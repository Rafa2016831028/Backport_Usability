Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"38764019","807494","2016-08-04 09:50:34","3","4484","<git><azure-devops><git-submodules><azure-pipelines>","Using relative url for git submodule needs credentials","<p>The Team Services documentation (<a href=""https://www.visualstudio.com/en-us/docs/build/define/repository#what-kinds-of-submodules-can-i-check-out"" rel=""nofollow noreferrer"">https://www.visualstudio.com/en-us/docs/build/define/repository#what-kinds-of-submodules-can-i-check-out</a>) points out that I can do a <code>$ git add submodule</code> if</p>

<ul>
<li>it is an immediate submodule</li>
<li>Unauthenticated (n/a)</li>
<li>Authenticated

<ul>
<li>Contained in the same team project</li>
<li>Added by using a relative url from main repository</li>
</ul></li>
</ul>

<p>They give an example:</p>

<pre><code>git submodule add /../../submodule.git mymodule
</code></pre>

<p>If I reference a git repo in the same project like</p>

<pre><code>git submodule add ./../other-repo mymodule
</code></pre>

<p>It resolves the right repo but wants me to provide credentials. The build fails with the following message:</p>

<pre><code>Cloning into 'mymodule'...
fatal: could not read Username for 'https://xxx.visualstudio.com': Invalid argument
</code></pre>

<p>Providing the full URL with credentials (<a href=""https://user:password@xxx.visualstudio.com/.."" rel=""nofollow noreferrer"">https://user:password@xxx.visualstudio.com/..</a>.) works but is IMO a bad solution.</p>

<p>The documentation suggests that this should work with a relative url and without credentials. Am I wrong?</p>

<h2>Edit 1:</h2>

<p>Running with system.debug: true</p>

<pre><code>Entering OnPrepareEnvironment
Primary repository: xxx
Calculating build folder hash key.
Loading tracking config if exists: C:\a\SourceRootMapping\07a8b96d-d805-4646-83d3-e7b2fbe394c2\18\SourceFolder.json
Creating new tracking config.
Loading top-level tracking config if exists: C:\a\SourceRootMapping\Mappings.json
Writing config to file: C:\a\SourceRootMapping\Mappings.json
Writing config to file: C:\a\SourceRootMapping\07a8b96d-d805-4646-83d3-e7b2fbe394c2\18\SourceFolder.json
Checking if artifacts directory exists: C:\a\1\a
Creating artifacts directory.
Checking if test results directory exists: C:\a\1\TestResults
Creating test results directory.
Creating binaries directory.
Setting local variables.
Create the initial timeline records for the tasks
Preparing repositories
repo clean = False
Found 3 endpoints to consider
Found 1 repositories to sync
Starting: Get sources
build.fetchtags=false
Entering GitSourceProvider.PrepareRepositoryAsync
Repository type=TfsGit
localPath=C:\a\1\s
clean=False
sourceBranch=refs/heads/r_080
sourceVersion=26d5a7a6e6ed47c8f12ee5dc5b376d6731b7863a
Syncing repository: xxx (Git)
repository url=https://xxx.visualstudio.com/_git/xxx
checkoutSubmodules=False
Starting clone
Checking out 26d5a7a6e6ed47c8f12ee5dc5b376d6731b7863a to C:\a\1\s
Checked out branch refs/heads/r_080 for repository xxx at commit 26d5a7a6e6ed47c8f12ee5dc5b376d6731b7863a
Leaving GitSourceProvider.PrepareRepositoryAsync
Leaving OnPrepareEnvironment
Running tasks
Starting task: Run git
##[warning]File name doesn't indicate a full path to a executable file.
Executing the following command-line. (workingFolder = C:\a\1\s)
git submodule add ./../other_repo mymodule
Error message highlight pattern: 
Warning message highlight pattern: 
C:\Windows\system32\cmd.exe /c ""git submodule add ./../other_repo mymodule""
Cloning into 'mymodule'...
Fatal: InvalidOperationException encountered.
bash: /dev/tty: No such device or address
error: failed to execute prompt script (exit code 1)
fatal: could not read Username for 'https://xxx.visualstudio.com': Invalid argument
fatal: clone of 'https://xxx.visualstudio.com/_git/other_repo' into submodule path 'mymodule' failed
Finishing task: CmdLine
##[error]System.Exception: Task CmdLine failed. This caused the job to fail. Look at the logs for the task for more details.
##[error]   at Microsoft.TeamFoundation.DistributedTask.Worker.JobRunner.Run(IJobContext jobContext, IJobRequest job, IJobExtension jobExtension, CancellationTokenSource tokenSource)
Entering OnFinalizeJob
Leaving OnFinalizeJob
</code></pre>

<p><br></p>

<h1>Edit 2:</h1>

<p>I cannot answer this. The documentation is wrong/unclear, I went with the option to check out submodules like @eddie-msft said - but watch out: <a href=""https://stackoverflow.com/questions/38752629/vsts-git-build-fails-with-git-submodule/"">VSTS git build fails with git submodule</a></p>
","8","807494","0","0"
"436125","45978","2009-01-12 17:01:23","115","98810","<git><git-submodules><git-subrepo>","Two git repositories in one directory?","<p>Is it possible to have 2 git repositories in one directory?  I'd think not, but thought I'd ask.  Basically, I'd like to check in my home directory config files (e.g. .emacs) which should be common across all of the machines I work on, but have a second repository for local files (e.g. .emacs.local), which contains machine-specific configurations.  The only way I can think of to do that is to have the local config in a subdirectory and ignore that subdirectory from the main git repository.  Any other ideas?</p>
","2","45978","0","0"
"19569352","759123","2013-10-24 14:54:05","2","95","<git><git-submodules><git-subtree>","How to rename/relocate directory on git clone/fetch and preserve the history?","<p>On remote master there is a folder <strong>/config/samples/</strong> (it also contains sub dirs) which contains sample configuration files; these files are good enough to be used in real environment w/o any changes. The application is located in the same repository and can read the files from <strong>/settings/</strong> directory only.</p>

<p>How to make that each clone of the master will rename locally this folder to the desired one AND will keep the history for these files (so If I add file there, it will be placed to the right folder on the master on git pull)?</p>

<p>The symlinks and hardlinks are not available on the filesystem.</p>

<p>Thanks in advance!</p>
","0","759123","",""
"57625440","901334","2019-08-23 11:28:58","1","234","<git><dependency-management><git-submodules>","Use git submodules for reproducible builds (dependency management)?","<p>I'm trying to come up with a way to handle Git project dependencies like the Swift Package Manager.</p>

<p>I'd like to specifically capture that, let's say my app version 1.2, depends on framework A, version 1.0.</p>

<p>When I then checkout v1.2 of my app, the framework code should be automatically be pulled in at tag v1.0.</p>

<pre><code>code/myapp/               tag v1.2
           lib/frameworkA tag v1.0
</code></pre>

<p>I experimented with Git submodules, but I could not figure out a way to automatically checkout a specific submodule tag when I checkout a specific tag of the parent app. </p>

<p>The .gitmodules file is checked in as part of the parent project. Ideally it would contain details about which tag of the submodule to use. Is this possible at all?  If not, is there maybe another way that doesn't use submodules?</p>
","0","901334","",""
"64978039","13671834","2020-11-23 23:21:00","8","11400","<git><azure><azure-pipelines><git-submodules>","Checkout git submodule from azure pipeline","<p>I am currently working on an azure pipeline.
Within my main github repo (repo A), I have another github repo added as a sub module. (repo B)</p>
<p>My goal is to checkout the sub-module at the start of the pipeline with the following YAML:</p>
<pre><code>stages:
- stage: checkout
  jobs:
  - job: checkout
    steps:
      - checkout: self
        submodules: true
        persistCredentials: true
</code></pre>
<p>This then attempts to checkout the sub-module, but ends with the following error:</p>
<pre><code>Cloning into '/home/vsts/work/1/s/devops-scripting'...
fatal: could not read Username for 'https://github.com': terminal prompts disabled
fatal: clone of 'https://github.com/sourcerepo/devops-scripting.git' into submodule path '/home/vsts/work/1/s/devops-scripting' failed
</code></pre>
<p>It seems to be an issue with using an incorrect user/password - if i was pushing i could simply use supply user/pass parameters, however this doesn't seem to work for checking out.</p>
<p>How can i update a submodule via an azure pipeline?</p>
","0","13671834","0","0"
"49959341","4114127","2018-04-21 19:11:08","2","1130","<ruby-on-rails><npm><git-submodules>","git submodule to npm dependency","<p>I working on Rails application of version 4.1.5. Rails application consists git submodules in it. I would like to change git submodules to npm package dependencies and include them to asset pipeline in a proper way. Could someone please suggest me gem or procedure to do it.</p>
","0","4114127","0","0"
"76155135","16689867","2023-05-02 13:01:03","0","50","<reactjs><git><git-submodules><storybook>","Using storybook inside git submodule","<p>I have a submodule with shared components for several electron-react apps. Adding a Storybook to every app project will be inconvenient, so I want to try to initialize it inside the submodule. Is it possible and ok to do this? Are there any pitfalls?</p>
","0","16689867","",""
"76162320","16749193","2023-05-03 09:26:45","0","24","<git><github><jenkins><git-submodules><github-app>","Jenkins git submodule not found when using GitHub App authentication and repo/submodule are in different GitHub organizations","<p>I have a GitHub repository referencing a submodule in a different org. Authenticating as my user account, I can clone the repository and update the submodule.</p>
<p>I need the same behaviour in Jenkins. Jenkins is authenticating as a GitHub App and can successfully clone the repository. It is unable to find the submodule however, despite the GitHub App having permissions on both orgs.</p>
<p>I am assuming this is because when authenticating as a GitHub App, you get an access token for an app installation in a specific org. Jenkins uses the same credentials for the clone and the submodule update, and given that the access token is for one org only, it makes sense that the submodule update fails.</p>
<p>On that basis, is it impossible to have Jenkins recursively update submodules if the repository and the submodules are in separate GitHub organisations?</p>
","0","16749193","",""
"76166810","391104","2023-05-03 18:01:55","0","81","<git><git-submodules>","How to delete a git submodule locally?","<p>I want to delete a submodule locally without pushing the changes to mainline.</p>
<p>Here is what I have done:</p>
<p><a href=""https://gist.github.com/myusuf3/7f645819ded92bda6677"" rel=""nofollow noreferrer"">https://gist.github.com/myusuf3/7f645819ded92bda6677</a></p>
<p>// Remove the submodule entry from .git/config</p>
<pre><code>$ git submodule deinit -f my_submodule
</code></pre>
<p>// Remove the submodule directory from the superproject's .git/modules directory</p>
<pre><code>$ rm -rf .git/modules/my_submodule
</code></pre>
<p>// Remove the entry in .gitmodules and remove the submodule directory located at path/to/submodule</p>
<pre><code>$ git rm -f my_submodule
</code></pre>
<p>Now here is what I have now:</p>
<pre><code>$ git status -s -uno
D  my_submodule
</code></pre>
<p><strong>Question</strong>&gt; If I commit this change locally and later push all my local changes to main, will these commands cause the submodule(i.e. my_submodule) deleted from mainline?</p>
<p>Thank you</p>
","0","391104","",""
"76193726","20651362","2023-05-07 11:46:14","0","47","<git><visual-studio-code><git-submodules>","How can I get a common local clone of a git repo and share it as a submodule of multiple other local git repo clones?","<p>I have multiple projects (repositories) which use the same submodules. Every projects submodule is displayed in the vs-code source control &quot;overview&quot;.</p>
<p><a href=""https://i.stack.imgur.com/Fp18Y.png"" rel=""nofollow noreferrer"">Screenshot of source control overview</a>
I want just one submodule in this overview so that I can make changes to the one sumodule, which apply to every project.</p>
<p>I tried to hide the respositories I don't want to see but then the problem is that when I change one submodule I have to pull for every single project again the submodule, which is not ideal.</p>
","1","20651362","",""
"76194176","1559401","2023-05-07 13:19:26","0","69","<docker><gitlab><git-submodules><cicd><kaniko>","How to build image in GitLab CI job when git repository contains submodules that require credentials?","<p>I have a Django project that is managed by multiple repositories:</p>
<ul>
<li>main repo - the Django project (incl. <code>manage.py</code>)</li>
<li>multiple submodules - each represents an app that is installed in the Django project.</li>
</ul>
<p>I adopted this structure using this <a href=""https://www.hildeberto.com/2018/02/creating-django-app-git-submodule.html"" rel=""nofollow noreferrer"">tutorial</a>, which allows me to manage my code in a better way.</p>
<p>However using submodules appears to be a major issue when it comes to GitLab's CICD, which provides quite limited <a href=""https://docs.gitlab.com/ee/ci/git_submodules.html"" rel=""nofollow noreferrer"">documentation</a> on this topic.</p>
<p>I managed to get this to work for another similar project but just for the PyPI package building job:</p>
<p><strong>GitLab CI job for PyPI packaging for repo with submodules</strong></p>
<pre><code>build-pypi-pkg:
  stage: build
  image: python:latest
  variables: !reference [.git_vars, variables]
  before_script:
    - git config --global credential.helper store
    - echo &quot;Login URL               https://${CI_REGISTRY_USER}:${CI_JOB_TOKEN}@gitlab.example.com&quot;
    - echo &quot;https://${CI_REGISTRY_USER}:${CI_JOB_TOKEN}@gitlab.example.com&quot; &gt; ~/.git-credentials
    - git submodule sync --recursive
    - git submodule update --init --recursive
    #- mkdir dist
  script:
    - echo Installing Twine for publishing PyPI package
    - pip install build twine
    - echo Building PyPI packages
    - |
      #!/bin/bash
      
      for i in `git submodule foreach --quiet 'echo &quot;$name&quot;'`
      do 
        echo &quot;Building PyPI package for submodule '$i'&quot;
        python -m build &quot;components/$i&quot;
      done
    - echo Publishing packages in ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - |
      #!/bin/bash
      
      for i in `git submodule foreach --quiet 'echo &quot;$name&quot;'`
      do 
        echo &quot;Publishing PyPI package '$i'&quot;
        TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --verbose --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi &quot;components/$i/dist/*&quot;
      done
</code></pre>
<p>The code above allows me to handle theoretically unlimited number of submodules as long as they provide a valid packaging structure (include <code>setup.py</code> in the root and so on) and use the same credentials (can be adapted for multiple credentials of course).</p>
<p>Now I am trying to adopt this to an image building job (either using Docker in Docker or Kaniko). The final image needs to contain the full project including all installed apps (submodules).</p>
<p>So far I was unable to find a way of providing the credentials that I need when submodules are being cloned (tried with both static and relative URLs). I would end up with the following error for every submodule:</p>
<pre><code>fatal: could not read Username for 'https://gitlab.example.com': No such device or address
</code></pre>
<p>I have control over the following things:</p>
<ul>
<li><strong>main repo</strong></li>
<li><strong>all submodule repos</strong> - however a possible solution should assume that I am e.g. referencing at least on submodule that I do not own (but can get a CI job token in order to execute CI/CD jobs for it)</li>
<li><strong>cluster</strong> - a <strong>microk8s</strong> (Canonical flavour of Kubernetes). Here I have created a secret that I used with <code>helm</code> when deploying my other projects. I can add more if required.</li>
</ul>
<p>One possible solution is to package all submodules in a separate job as PyPI packages and then install those in my Dockerfile using <code>pip</code>. However this has numerous issues including setting up testing environment, running tests (I'd prefer not to package tests) and easy of trying things out once the project is deployed (interactive shell in the running pod).</p>
<p>The other one is to create a custom image that has both Kaniko as well as git, clone my repos (I can use e.g. <code>sed</code> to temporarily append credentials to the <code>Dockerfile</code>) and then cleanup (uninstall git, remove credentials etc.) before I build the final image. This sounds like too much work.</p>
","0","1559401","",""
"76224843","21877949","2023-05-11 06:52:39","1","18","<git><performance><git-submodules><git-clone><size-reduction>","Clone git with default reference repositories including submodules","<p>we are using git for multiple projects, that are using hundreds of submodules. Most projects are using the same submodules, but when cloning them on the local disk, every project receives a full clone of each used submodule.</p>
<p>This results in an high network transfer and harddisk space usage.</p>
<p>Is there a way to define reference repositories for all those git repos?</p>
<p>As the URL's of the submodules can be anything, maybe a SHA1 hash of this URL could serve as a folder name</p>
<p>I'd think about such an command:
<code>git clone --reference-if-able d:\GitRefRepos\&quot;sha1(&lt;URL&gt;)&quot; --recursive &lt;URL&gt;</code></p>
<p>or better as config
<code>git config use-reference-if-able.folder d:\GitRefRepos\</code>
<code>git config use-reference-if-able.url2folder SHA1</code>
<code>git clone --recursive &lt;URL&gt;</code></p>
<p>I'd like to see from this a reduction of the harddisk space and network transfer time, by using the same submodule reference repo for all projects.</p>
","0","21877949","",""
"76250996","3924493","2023-05-15 05:06:08","1","15","<git><git-submodules>","Is there a way to keep global submodule cache instead of <project>/.git/modules/<submodule>?","<p>I have a multiple projects which are using some common submodules. Some of those submodules are really huge. Now each of these projects are keeping whole copy of the repo in their <code>.git/modules</code> directory.
I am wondering, if there is a way to keep a single global copy of these submodules.</p>
<p>I think cloning submodule as a separate repo and giving all pojects that local url will be one way.
But how can I do it without changing submodule repo urls in the main repo as it will be problem for other contributors if I change url?
Is there an official way or a workaround?</p>
","0","3924493","",""
"76299177","21440171","2023-05-21 09:28:37","0","43","<git><github><git-submodules>","Why are git submodules not cloned when using git clone --recursive?","<p>My git submodule clone is not working.</p>
<p>The repository in question is <a href=""https://github.com/0xNOY/0xNOY.github.io"" rel=""nofollow noreferrer"">this</a>.</p>
<p>I have run roughly the following commands.</p>
<pre class=""lang-bash prettyprint-override""><code>hugo new site 0xNOY.github.io
cd 0xNOY.github.io
git init
git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/stack
# Edit some files
git add .
git commit -m &quot;first commit&quot;
# and push to GitHub
</code></pre>
<p>I then ran <code>git clone --recursive git@github.com:0xNOY/0xNOY.github.io.git</code> from GitHub to local on another PC to clone it. However, the submodules were never cloned.</p>
<p>I also tried the following commands and others, but submodules were never cloned without any errors or other indications.</p>
<pre class=""lang-bash prettyprint-override""><code>git submodule update --init --recursive
</code></pre>
<pre class=""lang-bash prettyprint-override""><code>git submodule init
git submodule update
</code></pre>
<h3>Environments</h3>
<ul>
<li>git: 2.40.1</li>
</ul>
","0","21440171","",""
"76368485","1732418","2023-05-30 20:41:40","0","120","<git><github><git-submodules>","In git, what may cause the error message "" fatal: Unable to find refs/remotes/origin/HEAD revision in submodule path 'Assets/NRSDK'""","<p>Example project:</p>
<p><a href=""https://github.com/hpvdt/HMD-nreal/tree/cleanup/dev1"" rel=""nofollow noreferrer"">https://github.com/hpvdt/HMD-nreal/tree/cleanup/dev1</a></p>
<p>When I checkout this project and try to synchronise with all its submodule, I got a very concerning error message:</p>
<pre class=""lang-bash prettyprint-override""><code>git submodule update --remote --recursive
fatal: Unable to find refs/remotes/origin/HEAD revision in 
submodule path 'Assets/NRSDK'
</code></pre>
<p>It is concerning because <code>refs/remotes/origin/HEAD</code> is not a revision, nor it is a branch name.</p>
<p>What could possibly cause this defect? Is it a bug in git? I'm using git version 2.40.1.windows.1.</p>
","2","1732418","",""
"76411800","3172290","2023-06-06 06:01:05","0","21","<git><git-submodules>","Accidental commit of a git submodule directory","<p>In our repo there is a submodule (listed in .gitmodule file). Instead of adding it with <code>git submodule update</code> command, one of my teammates cloned the submodule to a different directory and added a symlink to that folder in our repo. This was being used just in their local.</p>
<p>But someday, it was accidentally commited (maybe because of <code>git add --all</code>) and pushed to remote. When I pulled that branch to my local, the symlink got downloaded and ever since that folder is not considered as a submodule but as a file part of this repo. I did a <code>git rm</code> on that file and did a commit.</p>
<p>But issue comes back whenever we checkout this branch. The submodule folder will staged to be deleted. Unfortunately, there have been lot of commits over this commit. So undoing the commit is tedious. What's the best course of action now?</p>
","2","3172290","",""
"76423148","10220019","2023-06-07 12:07:09","0","22","<git><git-submodules>","Are git submodules by default a full copy i.e. not shallow?","<p>I hope this is just a simple yes or no question. I need to create a local backup of my repository. For that I want to clone my repository that includes submodules. So doing:</p>
<pre class=""lang-bash prettyprint-override""><code>git clone &lt;remote&gt; .
git submodule update --init --recursive
</code></pre>
<p><strong>If I do this, do I get a fully copy of the repository of the submodules (and nested submodules)?</strong></p>
<p>I see a lot of question about adding shallow submodules so I'm assuming yes, but I haven't been able to find a statement that the default is a deep copy which I would like to have confirmed.</p>
<p>Extra info:
I read on the git documentation</p>
<blockquote>
<p>The initial clone of a submodule will use the recommended submodule.&lt;name&gt;.shallow as provided by the .gitmodules file by default.</p>
</blockquote>
<p>In my .gitmodules I only have the path and url defined.</p>
","1","10220019","",""
"76458831","34509","2023-06-12 17:02:34","0","12","<git><git-submodules>","""git submodule init"" to use worktree (?) of remote for clone","<p>I built myself a virtual machine in which I checkout a git repository that's on my host system. The repository itself was cloned from another repository, which is on our local VCS server. The repository has a number of submodules which are specified by relative URLs, to keep the repository working with both <code>ssh</code> and <code>http</code> transports.</p>
<p>My goal is to clone my host system git repository, in order to use (local) commits that are not yet pushed to the remote VCS server, and in order to have local clone speed, instead of going through VPN layers to reach the VCS.</p>
<p>Unfortunately, this doesn't work with the relative submodule URLs, because the virtual machine's git tries to clone them from my host system, in which those repositories do not exist. Is there any workaround, to make the virtual machine clone them from my machine aswell, using the worktree maybe?</p>
","0","34509","",""
"76469361","981199","2023-06-13 23:55:27","0","15","<git><git-submodules>","Prevent git submodules from reverting to a previous commit when doing a recursive pull","<p>I have a git repo which contains several submodules. It's usually convenient to do a <code>git pull --recurse-submodules</code> on the main repo, I tend to even have it activated permanently with <code>git config submodule.recurse true</code>.</p>
<p>The issue is that sometimes a submodule has new commits and the main module hasn't been updated to contain the new submodule commit yet. In this case a <code>git pull</code> reverts the submodule to a previous commit in a headless state.</p>
<p>I would like to prevent git from reverting submodules to a previous commit. That is, if the submodule commit contained in the main repo is behind what is currently checked out in a submodule, then a <code>git pull</code> / <code>git pull --recurse-submodules</code> should not change what's checked out in the submodule. How can I set this up?</p>
","1","981199","",""
"76514791","1419127","2023-06-20 12:38:34","0","20","<git><git-submodules><git-log>","git log submodule after changing folder structure","<p>A git submodule was changed location in our folder structure in the module containing it by means of <code>git mv</code> (I think). Anyhow, when I ask for the history of the revision changes in this submodule from the containing module (<code>git log &lt;submodule&gt;</code>), the history stops at the commit bringing this change in folder structure about.</p>
<p>Can I ask git to continue tracing the changes related to this submodule through its change of location in the structure ?</p>
","6","1419127","",""
"76556670","796940","2023-06-26 12:26:03","0","17","<git><git-submodules><gitignore><ignore>","Git repo: ignore any sub-directories that have their own git repos","<ul>
<li>I want to track <code>*.md</code> files recursively under my main <code>~/Documents</code> dir.  And nothing else.</li>
<li>However there's some subdirs under there that are their own projects with their own <code>.git</code> repos
<ul>
<li>So those dirs can be ignored entirely, I don't need to track their <code>*.md</code> files in my main <code>~/Documents/.git</code> repo</li>
<li>But I still want to leave those subdirs where they are</li>
</ul>
</li>
</ul>
<p>In my <code>~/Documents/.gitignore</code> file I have:</p>
<pre><code>*
!*/
!*.md
</code></pre>
<p>When I try running <code>git add -A</code> ... it fails with an error on the first subdir it comes across that has its own <code>.git</code> repo:</p>
<pre><code>error: 'some-subdir-project-that-can-be-ignored/' does not have a commit checked out
</code></pre>
<p>How can I get git to just skip any of those subdirs, without needing to specifically specify every one of them to be ignored by name (either now, or any others that appear in there later on).</p>
","2","796940","",""
"76573609","7505201","2023-06-28 13:21:43","2","43","<bash><git><awk><git-submodules>","git submodule foreach with awk","<p>I'm doing the following to delete all git branches in my submodules, which do not have a tracking reference:</p>
<p><code>git submodule foreach &quot;git branch -vv | cut -c 3- | awk '$3 !~/\[/ { print $1 }' | xargs -r git branch -D&quot;</code></p>
<p>If I'm executing this without git submodule foreach, it works as expected. But this here results in:</p>
<pre><code>awk: cmd. line:1:  !~/\[/ { print  }
awk: cmd. line:1:  ^ syntax error
</code></pre>
<p>I guess there is a problem with the quotes, but I don't get it</p>
","3","7505201","",""
"19438254","2892377","2013-10-17 22:14:22","1","801","<git><git-submodules><git-checkout><git-bare>","Why does git checkout from a bare repo delete instead of creating?","<p>This is kind of a weird one, and I apologize in advance if it doesn't have much application outside of my specific circumstances.  I am using git to manage my deployment packages by committing and tagging a set of generated files relating to the deployment and a submodule which points to the release code.  I am attempting to do a git checkout of this deployment tag from a bare repo on each machine into a different, empty directory.  The output I get indicates that it has deleted the files it should have created, and the work-tree directory remains empty afterward.</p>

<pre><code>$ ls -al /var/www/test/
total 0

$ git --bare --work-tree=/var/www/test/ checkout my_tag
D   .gitmodules
D   generated.tgz
D   release
D   signatures.md5
HEAD is now at 8946ff5... Generated contents of deployment package.

$ ls -al /var/www/test/
total 0
</code></pre>

<p>I should state that both the commit referenced by my_tag and the tip of master have the same 4 files (though with different contents).  Which makes it all the stranger that the following procedure gets me 75% of the way there:</p>

<pre><code>$ git --bare --work-tree=/var/www/test/ checkout master
D   .gitmodules
Previous HEAD position was 8946ff5... Generated contents of deployment package.
Switched to branch 'master'

$ ls -al /var/www/test/
total 4
-rw-r--r-- 1 root root    0 Oct 17 17:00 generated.tgz
drwxr-xr-x 2 root root 4096 Oct 17 17:00 release
-rw-r--r-- 1 root root    0 Oct 17 17:00 signatures.md5

$ git --bare --work-tree=/var/www/test/ checkout my_tag
D   .gitmodules
(---- git's warning about detached HEAD state cut ----)
HEAD is now at 8946ff5... Generated contents of deployment package

$ ls -al /var/www/test/
total 4624
-rw-r--r-- 1 root root 2103765 Oct 17 17:02 generated.tgz
drwxr-xr-x 2 root root    4096 Oct 17 17:00 release
-rw-r--r-- 1 root root 2614883 Oct 17 17:02 signatures.md5
</code></pre>

<p>The thing is, ""release"" is a git submodule, and I can't init or update it without .gitmodules, so 75% of the way there still isn't good enough.</p>

<p>One solution to this problem would be to simply clone the repo anew every time I deploy, and maybe I'll go that way if nobody can suggest a better solution.  But ideally I'd like to keep one bare repo on each machine and checkout from that to a new work-tree each time.  Can anybody tell me what's going on here?</p>

<p>For reference, I'm using Git 1.8.2.1.</p>
","0","2892377","",""
"2665741","176070","2010-04-19 07:17:26","1","450","<git><version-control><git-submodules>","git reference common directory/repo","<p>Project layout:</p>

<pre><code>/project_a
   /shared
/project_b
   /shared
/shared
</code></pre>

<p>project_a and project_b both need to contain the shared folder. With svn, we used svn:externalsand that worked fine, since svn can reference subdirs (with relative paths too). However, we moved to git and it seems to not support checking out subdirs. </p>

<p>Our solution now is to put project_a, project_b and shared all in different git repos, and use git submodules in project_a and project_b. However this seems much more complicated than one monolithic svn repo with svn:externals. What's the correct way to handle common elements in git?</p>

<p>EDIT:
The consensus is submodules are the way to go. But having used it for a day, it seems very unfriendly to use.</p>

<p>After making a change to a file in shared, I have to:</p>

<ol>
<li>Commit the change in shared</li>
<li>Push the change in share</li>
<li>Add the shared directory again in the parent directory</li>
<li>Push the parent directory</li>
</ol>

<p>Compared to a single commit in svn, this seems way more complicated. And missing one of these steps results in a huge versioning mess. Am I missing something here?</p>
","0","176070","",""
"2669477","65927","2010-04-19 17:26:55","17","3263","<ruby-on-rails><git><git-submodules>","Sharing code between two or more rails apps... alternatives to git submodules?","<p>We have two separate rails_app, <code>foo/</code> and <code>bar/</code> (separate for good reason). They both depend on some models, etc. in a <code>common/</code> folder, currently parallel to <code>foo</code> and <code>bar</code>.</p>

<p>Our current svn setup uses <code>svn:externals</code> to share <code>common/</code>. This weekend we wanted to try out git. After much research, it appears that the ""kosher"" way to solve this is using <code>git submodule</code>. We got that working after separating <code>foo</code>,<code>bar</code>,<code>common</code> into separate repositories, but then realized all the <a href=""https://stackoverflow.com/questions/677393/tracking-3rd-party-code-with-git"">strings attached</a>:</p>

<blockquote>
  <ol>
  <li>Always commit the submodule before committing the parent.</li>
  <li>Always push the submodule before pushing the parent.</li>
  <li>Make sure that the submodule's HEAD points to a branch before committing to it. (If you're a bash user, I recommend using git-completion to put the current branch name in your prompt.)</li>
  <li>Always run 'git submodule update' after switching branches or pulling changes.</li>
  </ol>
</blockquote>

<p>All these gotchas complicate things further than <code>add</code>,<code>commit</code>,<code>push</code>. We're looking for simpler ways to share <code>common</code> in git. <a href=""http://psionides.jogger.pl/2010/02/04/sharing-code-between-projects-with-git-subtree/"" rel=""nofollow noreferrer"">This guy</a> seems to have success using the <a href=""http://github.com/apenwarr/git-subtree"" rel=""nofollow noreferrer""><code>git subtree</code></a> extension, but that deviates from standard gitand still doesn't look that simple.</p>

<p>Is this the best we can do given our project structure? I don't know enough about rails plugins/engines, but that seems like a possible RoR-ish way to share libraries. </p>

<p>Thanks in advance.</p>
","0","65927","0","0"
"40599982","3731837","2016-11-15 00:09:07","-1","187","<git><git-submodules><git-subtree>","Why does git subtree prevent init-ing embedded submodules?","<p>I have a git repository that I keep my vim configuration in. This tree includes a number of git submodules that refer to other people's repos which contain plugins.</p>

<p>As I'm interested in setting up a proper dotfiles repo with GNU stow, I thought the best way to integrate the vim repo was to just subtree it into the dotfiles repo. As my vim config is forked from someone else, I figured this way I could easily merge in changes made upstream while preserving my own plugins and config.</p>

<p>I've succesfully added the subtree to my repo, using <code>git subtree add -P vim/.vim-files https:\\xx master --squash</code>. The resulting tree looks like this:</p>

<pre><code>dotfiles/
├── .git
└── vim/
    ├── .vimrc
    └── .vim-files/   &lt;= THE SUBTREE
        ├── .gitmodules
        └── plugins/
            └── submodule1/
</code></pre>

<p>When I perform <code>git submodule init</code> from <code>dotfiles/</code> after that, it fails with <code>fatal: No url found for submodule path 'vim/.vim-files/plugins/submodule1' in .gitmodules</code>. Even though the URL is there and the subtree repo has no problems with submodules when used standalone.</p>

<p>The stranger part is, when I cd into <code>.vim-files</code> and run the command there, the error looks like this: <code>fatal: No url found for submodule path 'vim/.vim-files/vim/.vim-files/plugins/submodule1' in .gitmodules</code>.</p>

<p>Can anyone explain what causes this behaviour? Are subtrees and submodules incompatible or have I stumbled upon a bug?</p>
","0","3731837","0","0"
"21622327","2948832","2014-02-07 08:01:48","8","997","<git><git-submodules><git-subtree>","How do I append one git history to another?","<p>I have a repository that contains the code for an old version of a website that is no longer being used on <code>master</code>. The site was completely redesigned in a new repository, and the code and history from that repository was copied over into a branch in the repo of the old site, let's call it <code>new_site</code>. I can't merge <code>new_site</code> into <code>master</code>, since the histories are entirely different. </p>

<p>I've investigated both submodules and subtree merges a bit, but both seem to only be relevant when you're trying to keep code from one project contained in a subdirectory of another project, not when you want to stick two working trees on top of each other.</p>

<p>At this point, I would like to have the old code remain where it is, and just append <code>new_site</code> on top of the current HEAD. Any idea how I can accomplish this, or alternate suggestions for cleaning up this mess without blowing away the old code?</p>
","0","2948832","0","0"
"3076629","230419","2010-06-19 18:02:11","2","1038","<django><git><version-control><github><git-submodules>","Creating a submodule in a git project","<p>I have a Django project and it's currently hosted in GitHub and it's private. I'm looking to move many useful parts of it into an open-source project. I think I need to use a 'submodule' thing, but unfortunately I have no idea how to operate these.</p>

<p>Please can someone help me :)</p>

<p>Joe</p>
","0","230419","",""
"40841882","2881849","2016-11-28 10:21:07","124","36965","<git><gitlab><git-submodules>","Automatically access git submodules via ssh or https","<p><strong>Question:</strong><br>
Is there a way to automatically checkout git submodules via the same method (ssh or https) as the main repository?</p>

<p><strong>Background:</strong></p>

<p>We have a non-public gitlab repository (<code>main</code>) that has a submodule (<code>utils</code>) which is also hosted as a non-public gitlab repository on the same server. Those repositories can be accessed either via ssh or https:</p>

<ul>
<li><code>user@gitlabserver.com:my/path/repo.git</code></li>
<li><code>https://gitlabserver.com/my/path/repo.git</code></li>
</ul>

<p>Both variants obviously require different forms of authentication and depending on the client computer and the user, one or the other is preferred. </p>

<p>For the top level repository (<code>main</code>) that is not an issue, as anyone can choose the method he or she prefers, but for the sub module this depends on the <code>.gitmodules</code> file and hence is (initially) the same for all.<br>
Now instead of everyone having to adapt the .gitmodules file to whatever they prefer and make sure they don't accidentally commit those changes, it would be nice, if there was a way to just specify the server and repo path and git chooses either the same method that is used for the main repo, or something that can be set in gitconfig.</p>
","1","2881849","0","0"
"3201396","51425","2010-07-08 07:19:20","2","461","<svn><git><git-submodules>","Is it possible to have a subversion repository as a ""submodule"" in git?","<p>Is it possible to have a subversion repository as a ""submodule"" in git?</p>

<p>In this project we will have several parts, but some parts will use svn and some will use git. So I am looking into a ""project root"" from where we can have the other projects as submodules (or similar).</p>

<p>And the question is if it is possible manage this ""project root"" with git?</p>

<p>Thanks 
Johan</p>

<hr>

<p>The inverse question can be found here:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/3201360/is-it-possible-to-have-a-git-repository-as-a-vendor-branch-in-subversion"">Is it possible to have a git repository as a “vendor branch” in subversion?</a></li>
</ul>

<hr>

<p><em>Update</em>:</p>

<p>In the inverse question VonC gave a tip that this could be done with git-svn, 
does anybody have a example on how this could look like?</p>
","0","51425","",""
"3227522","384164","2010-07-12 10:07:23","1","215","<git><git-submodules>","Will deleting a branch in a git submodule's repository make commits in that branch unavailable to the superproject?","<p>I'm fairly new to git, and I suspect the answer to this is no, but wanted to check with some of the more experienced git users here.</p>

<p>I have a superproject which has a commit which includes a reference to a development branch of a submodule.  I'm a little worried that when I rebase that development branch onto master and delete it that the referenced submodule commit will disappear, making the superproject commit that references it unusable.</p>

<hr>

<p>Though I've answered the question, it has brought up another question.  Can this behavior be counted on?  I've read that git keeps deleted items around in refs for a period of time, then removes them.  Could this result in the clone working at first, then failing later?</p>
","0","384164","",""
"3229042","777890","2010-07-12 13:37:35","2","348","<git><git-submodules>","How do I pull a git submodule from separate project?","<p>Let's keep things simple shall we?</p>

<p>I have a git project set up. Let's call it ProjectA. My friend has another, older git project set up, called ProjectB. In ProjectB, he has two submodules, SubOne and SubTwo, set up. Now, when I mean ""set up"", I mean he can just ""git submodule update"" them. They exist.</p>

<p>Now, being selfish, I want to steal his submodules (I'm not really stealing, he's giving them to me).</p>

<p>Is there a way I can, in my ProjectA, pull only his submodules? If so, how? Also, since we're working on sister projects, the file structure has to remain the same. In other words, his files are under ext/SubOne and ext/SubTwo, and my files need to be the same.</p>

<p>One last thing; he knows how to create submodules, but we no longer have the url for it.</p>

<p>Grazie!
NS</p>
","0","777890","0","0"
"41197721","1322179","2016-12-17 10:41:54","0","61","<git><vim><git-submodules><pathogen>","Pathogen bundles not being saved by git","<p><strong>Original question</strong><br>
Pathogen bundles not being loaded.<br>
I'm running Kali Linux and I've set up my .vimrc in the recommended way </p>

<pre><code>set nocompatible

execute pathogen#infect('~/.vim/bundle/{}')

filetype on
filetype plugin on
filetype plugin indent on

syntax enable
colorscheme solarized
</code></pre>

<p>but this gives me errors for any of the bundles I have installed (e.g. <code>E492: Not an editor command: NERDTree</code> or <code>E185: Cannot find colorscheme 'solarized'</code>)</p>

<p>Running the following commands once vim has launched, shows that the directory is correct.</p>

<p><code>echo pathogen#glob_directories(""~/.vim/bundle/*"")</code>
---> all of my bundles are returned</p>

<p>Is there anything else I'm missing?</p>

<p><strong>Update</strong><br>
I have all of my dotfiles in a git repo. But when I run a <code>git add</code>, only the directories of the bundles are added but none of the files themselves. How do I include pathogen bundles in my ""dotfiles"" repo?</p>
","2","1322179","",""
"41213027","190280","2016-12-18 21:22:48","4","1363","<git><git-submodules><git-plumbing>","git plumbing command to get submodule remote","<p>I am working with git plumbing and mirrored (and thus bare) repos, in a readonly filesystem.</p>

<p>I can see the existence of submodules with <code>git ls-tree</code>. I can infer their name/path and the SHA1, but I can't find a way to get the submodule remote.</p>

<p>The information is in there somewhere; if I clone the repo, <code>git submodule init</code> succeeds. (Making a clone is too expensive for normal use, particularly for very large repositories.) How can I get at the submodule remote directly?</p>
","4","190280","0","0"
"59937195","11460981","2020-01-27 18:53:39","4","244","<git><gitlab><git-submodules>","Configuring git push/commit to not push/show submodule updates","<p>I am working on a project that has numerous submodules. Here is the gist of how the project is structured:</p>

<pre><code>Bundle Repo
-- Submodule A
-- Submodule B
-- Submodule C
-- Submodule D
-- Submodule E
-- src

Submodule A
-- src
Submodule B
-- src
//...and so forth for the rest of the submodules
</code></pre>

<p>Here is the .gitmodules file (as an example) in the bundle repo:</p>

<pre><code>[submodule ""submodule_a""]
    path = submodule_a
    url = *some url*
    branch = dev
    ignore = dirty
[submodule ""submodule_b""]
    path = submodule_b
    url = *some url*
    branch = dev
    ignore = dirty
//...and so forth for the rest of the submodules
</code></pre>

<p>The bundle project involves the various submodule projects working/interacting with each other, so when a developer is working with the bundle project, we ensure that the submodules are all properly updated using the command: <code>git submodule update --remote --recursive</code>.</p>

<p>This updates the submodules to the latest commit on the 'dev' branch (as seen in the example .gitmodules file above). However, the issue is when the developer is monitoring their changes in the bundle's src files (we never make changes in projects through submodules. we will directly work in that submodule's repository instead), the 'updates' that are pulled when updating the submodules are listed as non-committed changes. </p>

<p>I want to remove that. There are two things that could be done: </p>

<p>1) Since every developer on the project knows to update submodules prior to working/testing in the bundle repository, we do not need to push the submodule updates (pointing to the latest commit) whenever we push to the bundle. Is there a way to disable the submodule updates showing up as non-committed changes?</p>

<p>2) Is there a way inside git itself (we are using gitlab for our service) to automatically have the bundle repo update itself to point to the latest commit whenever a submodule repo has a new commit?</p>

<p>Hope this isn't too confusing. Thanks!</p>
","0","11460981","0","0"
"3712917","119963","2010-09-14 21:07:18","17","2708","<git><git-submodules>","Highly coupled git submodules","<p>I have a project which needs to be split into two repositories: a set of common models, and a simulation based on those models, with additional code. Ultimately there may be multiple simulations using the same set of models, so having them in a separate repository is a definite requirement. The obvious solution is to have the common models as a submodule of the simulation.</p>

<p>Unfortunately, the two repositories will be <em>very</em> highly coupled. People will be very frequently adding something to their common models then immediately using it in the simulation. I imagine this will make for a lot of headaches in the integration process of the simulation's repo. In order to merge changes from many developers in the simulation, the integrator will have to do parallel merges in the common models submodule. On the other hand, it also makes it essential to use submodules - the simulation really <em>needs</em> to know which version of the common models it should be using.</p>

<p>The project is worked on by a sizeable number of people. Most of the developers have only a very cursory knowledge of git: they add files, commit, and pull from origin a lot, and hopefully have a dev and stable branch. The integrator has naturally learned quite a bit more, but anything involving submodules will certainly be new to him. Added bonus: I'm about to take a month of vacation, so I won't be able to put out any fires. The upshot is that there's a lot of incentive to make the workflow <em>really</em> hard to screw up, and to minimize the difference from people's previous workflows.</p>

<p>So, my questions are: am I going to regret recommending we use submodules for this? (Is there a better idea?) What kind of mistakes can I expect people to make, so I can warn against them in advance? Are there any good workflow strategies to keep in mind?</p>

<p>Edit: I just came across <a href=""http://gitslave.sourceforge.net/"" rel=""noreferrer"">git slave</a>, which might be worth a look in this context too. Can't yet give a good evaluation of abilities/limitations beyond what's on its website.</p>
","2","119963","0","0"
"3866733","267839","2010-10-05 18:45:57","111","88680","<git><git-submodules>","How to clone only a folder from a git submodule?","<p>I'm trying to get just a folder from an external github repo to use in my project.</p>

<p>I want my project setup to be like this:</p>

<pre><code>-my_project
    -submodule
        -code.py
    -MY_README
    -.git
</code></pre>

<p>And I have the remote repo named some-submodule with following structure:</p>

<pre><code>-submodule
    -code.py
-README
-.gitignore
</code></pre>

<p>So I just want the submodule folder added to my project.</p>

<p>But I end up with this after <pre>git submodule add <a href=""http://github.com/user/submodule.git"" rel=""noreferrer"">http://github.com/user/submodule.git</a> submodule</pre></p>

<pre><code>-my_project
    -submodule
        -submodule
            -code.py
        -README
        -.gitignore
    -MY_README
    -.gitignore
</code></pre>

<p>I am new to git so I really don't know if it possible using just git. If it is of some help I'm using msysgit on windows.</p>

<p>So, is there anyway that I can get a clean submodule folder in my project from a public repo?</p>

<p>If you're curious of exactly what I'm trying to do I'm trying to take directly from their repos these django plugins <a href=""http://github.com/adieu/django-dbindexer"" rel=""noreferrer"">1</a> <a href=""http://github.com/adieu/djangotoolbox"" rel=""noreferrer"">2</a> to add them to my project.</p>
","2","267839","0","0"
"60194381","12878091","2020-02-12 17:54:50","2","501","<git><git-submodules>","Is there a way to automatically update git submodules?","<p>I currently have a repo on github that contains a submodule. In order to update the submodule in any place I do a <code>git pull</code> to pull the main repo but have to do a <code>git pull origin master</code> from the directory of the submodule in order to update the submodule. Is there any way to update the submodule automatically when I do a <code>git pull</code> in the main project repo?</p>
","1","12878091","",""
"60197883","1712944","2020-02-12 22:32:44","2","1123","<reactjs><git><typescript><node-modules><git-submodules>","React project fails to use node modules in a git submodule","<p>I have a Javascript (typescript) project that I am using as a git submodule in a react project (also typescript).</p>

<p>This all works fine... until I make use of <strong>any node module</strong> in the git submodule. I tried using, for example, the node modules ""moment"" and ""faker"", but I am almost certain that it does not have anything to do with these specific node modules.</p>

<p>Importing for example ""moment"" in the submodule:</p>

<pre><code>import moment from 'moment';
</code></pre>

<p>using it:</p>

<pre><code>moment().format('DD/MM/YYYY');
</code></pre>

<p>and running the main react project leads to this error: </p>

<pre><code>Failed to compile.

./src/project_core/node_modules/moment/moment.js
  Line 5:37:  'define' is not defined  no-undef
  Line 5:50:  'define' is not defined  no-undef
</code></pre>

<p>Removing <code>moment().format('DD/MM/YYYY');</code> solves it.</p>

<p>If I just run some tests directly in the submodule and make use of for example ""moment"", it always works. I can use the node modules. It looks like something goes wrong once the main project uses the node modules in the git submodule. </p>

<p>This is how my react project looks like. As you can see the submodule project_core is added in the src folder of the main project.</p>

<pre><code>├── build
│   ├── assets
│   └── static
│       ├── css
│       └── js
├── node_modules
├── public
│   └── assets
└── src
    ├── project_core
    │   ├── node_modules
    │   ├── src
    │   └── tests
    ├── ui
    ├── api
    └── utils
</code></pre>

<p>I know... I read everywhere that using git submodules is not recommended. I, however, just want to experiment with git submodules to learn from it.</p>
","0","1712944","0","0"
"22646795","689554","2014-03-25 21:35:47","11","4729","<git><vagrant><git-submodules>","How to properly manage a git repo in a subdirectory, ignored by the parent directory, as its own project?","<p>I am looking to use <a href=""http://www.vagrantup.com/"">Vagrant</a> for a development project for <a href=""http://laravel.com/"">laravel</a>. To facilitate this effort, I am using this github project, <a href=""https://github.com/bryannielsen/Laravel4-Vagrant"">Laravel4-Vagrant</a>. </p>

<p>The vagrant configuration is managed as a git repository. Part of the Vagrant setup has a per-defined <code>www</code> directory which gets mapped to <code>/var/www</code> once the server is setup so you can just work with files inside the guest vm from the host vm directly. However, within <a href=""https://github.com/bryannielsen/Laravel4-Vagrant/tree/master/www"">this www</a> directory there is a <code>.gitignore</code> file. This makes a lot of sense because you want to manage your vagrant setup and start from scratch with your app development, etc.</p>

<p>However, you start doing your application development and have your project sitting in this <code>www</code> directory. It would be nice to also manage this project in git, then you could deploy your app to another web server or a new vagrant installation. Because of the <code>.gitignore</code> file there is no way to use git on the files in this directory since the parent wants to ignore it.</p>

<p>I am not sure if git-submodules is the right solution here or some other special configuration.</p>

<hr>

<p>More generically:</p>

<p>How can I create a git repo for a project, which ignores a child directory, but the files within that child directory (which are ignored by the parent) are managed at their own git repo?</p>

<p>Ideally, I should be able to package the parent up and the child up separately.</p>

<p>Would appreciate some generic explanation and some specific help to setup the project listed above as the example. </p>

<hr>

<p>Edits:</p>

<p>There is no real requirement for structure, etc as long as the two projects can be maintained in separate repos and can either be deployed together or one their own (e.g., I can use my custom vagrant built to setup another dev/prod environment or I can deploy the laravel project to an existing deployment elsewhere). I would also consider other standard source version control systems that easily work together. Also, would it make a difference if the initial laravel repo was installed via git? using the template github project cited above, it does not clone a git repo for the initial install but uses the laravel installer.</p>
","2","689554","0","0"
"41735992","2141043","2017-01-19 07:21:29","15","6627","<git><github><git-submodules><git-subtree>","How can I mirror a directory in a git repo into another git repo?","<p>I have a directory <code>/amp</code> in <code>RepoA</code> and a <code>RepoB</code> (populated with the contents of /amp initially). I want to mirror any changes to the  <code>/amp</code> in RepoA into RepoB. </p>

<p>Is it possible ?</p>

<p>P.S: RepoA contains many other directories. I only want to mirror the /amp dir. Whereas RepoB is only going to have the /amp contents not any other.</p>
","1","2141043","0","0"
"22764951","552671","2014-03-31 14:56:49","11","2308","<git><git-submodules>","How do I update a git submodule without checking it out","<p>I am using a git submodule in a very <a href=""https://github.com/davidhalter/jedi-vim"" rel=""noreferrer"">usual way</a>. The way how people typically update a submodule is by checking it out, pulling something in the submodule and then commiting outside.</p>

<p>Now, I typically don't develop those modules in the same place. For me it's more comfortable to develop those two modules in different places. How do I just tell my git project that one submodule has changed and is now at commit XYZ?</p>

<p>I think there's a chance that there's a setting somewhere in <code>.git</code> that I could modify.</p>
","0","552671","0","0"
"19616787","2924714","2013-10-27 09:59:13","1","440","<git><share><git-submodules><git-subtree>","git subtree from one branch to several locations of same project","<p>I have a git repository A with contents:</p>

<pre><code> &lt;shared files dir&gt;/
        sharedFile1
        sharedFile2
</code></pre>

<p>And I have additional git repository B with 2 projects, each of them has to use the shared files from repository A. So that the file structure will be similar to this:</p>

<pre><code>Project_X
   &lt;shared files dir&gt;/
      sharedFile1
      sharedFile2
   &lt;project X dirs&gt;

Project_Y
   &lt;shared files dir&gt;/
      sharedFile1
      sharedFile2
   &lt;project Y dirs&gt;
</code></pre>

<p>I would like the shared files to be updated only in the repository A, and I need to allow project_X and Project_Y to get those updates easily.</p>

<p>Actually, symbolic link could be the exact solution I need, but unfortunately, the filesystem I use doesn't support it.</p>

<p>Git subtree also looks as suitable solution, but the problem is that I couldn't find how to merge a subtree from same branch to 2 locations in same repository. I succeeded to create the file structure I need:</p>

<pre><code>git read-tree --prefix=Project_X/shared_files_dir/ -u shared_remote_branch
git read-tree --prefix=Project_Y/shared_files_dir/ -u shared_remote_branch
</code></pre>

<p>Creates the required filestructure (exactly as I described at the top of the question), but trying to merge updates brings me the changes only to the last subtree I created:</p>

<pre><code>git merge --squash -s subtree --no-commit shared_remote_branch
</code></pre>

<p>Updates only the Project_Y/shared_files_dir/, and not the Project_X/shared_files_dir/ with the changes from shared_remote_branch.</p>

<p>I would appreciate any ideas. On how to merge the subtree from one branch to 2 locations (Project_X/shared_files_dir/) and (Project_Y/shared_files_dir/) or how to make it in any other methodology</p>
","0","2924714","0","0"
"19619747","2924714","2013-10-27 15:26:42","70","54678","<git><git-submodules>","git submodule update --remote vs git pull","<p>What is the difference between running </p>

<pre><code>git submodule update --remote
</code></pre>

<p>vs </p>

<pre><code>cd &lt;submodule directoy&gt;
git pull
</code></pre>

<p>Assuming that the submodule was previously set to track some branch:</p>

<pre><code>git submodule add -b master [URL to Git repo]
</code></pre>
","1","2924714","0","0"
"57728419","","2019-08-30 14:14:21","3","3840","<python><git><git-submodules>","Cannot import from a git submodule","<p>I'm having difficulties making a git submodule work.</p>

<p>I have a project <code>ProjectA</code> that basically is a <code>mainA.py</code> file and a subfolder with library files:
The <code>mainA.py</code> contains a <code>MainClass</code> that is basically what should be called, and <code>Libraries</code> just contain scripts and classes for computations.</p>

<pre><code>ProjectA/
    Libraries/
        __init__.py
        library1.py
        library2.py
    __init__.py
    mainA.py
</code></pre>

<p>In <code>mainA.py</code> I just do something like:</p>

<pre><code># content of mainA.py
from Libraries.library1 import ClassA, ClassB

class MainClass:
    # do stuff

if __name__ == '__main__':
    MainClass()
</code></pre>

<p>This just works fine, but I have now a <code>ProjectB</code> that needs to use the <code>MainClass</code> from <code>ProjectA</code>, so I decided to put <code>ProjectA</code> as a git submodule of <code>ProjectB</code></p>

<pre><code>git submodule add ProjectA_git_url

ProjectB/
    ProjectA/
    mainB.py
    .gitmodules
</code></pre>

<p>However now in <code>mainB.py</code> I'm trying to import <code>MainClass</code> from <code>projectA</code>.</p>

<pre><code># content of mainB.py
from ProjectA.mainA import MainClass

ModuleNotFoundError: No module named 'Libraries'
</code></pre>

<p>I think this happens because now <code>Libraries</code> is no longer hanging from the root directory, but inside the submodule <code>ProjectA</code>, so when <code>mainA.py</code> does:</p>

<pre><code>from Libraries.library1 import ClassA, ClassB
</code></pre>

<p>The system cannot find <code>Libraries</code>.
If I change <code>mainA.py</code> to do:</p>

<pre><code>from ProjectA.Libraries.library1 import ClassA, ClassB
</code></pre>

<p>Then it works, but of course I don't want to change anything insise <code>ProjectA</code>, it is just a Project that should work either standalone or as a submodule of another project</p>

<p>What am I doing wrong? Is there a way to import <code>MainClass</code> from <code>mainA.py</code> when <code>ProjectA</code> is a submodule?</p>
","4","","",""
"49321446","3311728","2018-03-16 13:02:05","4","2935","<git><bundle><git-submodules>","How do you bundle submodule changes in git?","<p>If I have a repository that contains submodules, and I want to make a bundle for sneakernet, how do I make the bundle include the objects needed to update the submodules? </p>

<p>For example, let's say I have a repository called <code>parent</code> and it contains a submodule called <code>submod</code>. I want to create a bundle that contains all the recent work since commit <code>basecommit</code>, so naturally, from inside the <code>parent</code> root directory I would do:</p>

<pre><code>git bundle create mybundlefile.bundle basecommit..myworkingbranch
</code></pre>

<p>This creates a file called <code>mybundlefile.bundle</code> that contains all the commit objects from the <code>parent</code> repo on the range <code>basecommit..myworkingbranch</code> as well as the ref <code>myworkingbranch</code>. The problem is that if any of those commits changed the submodule, the resultant bundle will not be very useful because such commits are only stored in the bundle file as changing the submodule hash. So the object stored in the bundle file just says ""I'm commit <code>3ba024b</code> and I change the hash of submodule <code>submod</code> from <code>2b941cf</code> to <code>1bb84ec</code>."" but the bundle doesnt actually include the objects <code>2b941cf..1bb84ec</code> necceassary to update the submodule from the bundle and make a clean working tree for <code>myworkingbranch</code>. </p>

<p>How do I create the bundle file such that all those objects from the submodule repos are also included. That is, if the parents repo's base commit <code>basecommit</code> points submodule <code>submod</code> at hash <code>A</code> and the parent repo's working branch <code>myworkingbranch</code> points submodule <code>submod</code> at hash <code>B</code>, then my bundle needs to contain not only <code>basecommit..myworkingbranch</code>, but also <code>A..B</code>.</p>
","1","3311728","0","0"
"68174890","10721913","2021-06-29 08:11:06","-2","462","<git><git-submodules>","How to share folders/files with other git repositories","<p>We would like to share certain folders/files with other git repositories (like externals in SVN). What is the best way to source with other repositories but only part of the source (specific folders/files)?</p>
<p>For example, repository1 will use some folders/files (not the entire repository source) from repository2 and repository3, and it may that another repository will use some other/same folders/files.</p>
","6","10721913","",""
"68175083","51127","2021-06-29 08:24:10","1","19","<github-api><git-submodules>","repos/{org}/{repo}/git/trees/{sha} to query files in repo returns element with type=commit - how to deal with that?","<p>I have some code to retrieve a list of files from a repository (using REST API v3) and it worked great for many cases, but now I've hit a problem where it didn't work. Looking into this, I found that one of the elements of the response had this:</p>
<pre><code>{
        &quot;mode&quot;: &quot;160000&quot;,
        &quot;path&quot;: &quot;folderA/folderB/folderC&quot;,
        &quot;sha&quot;: &quot;84419db012d987a1705eea28055b278c17411a93&quot;,
        &quot;type&quot;: &quot;commit&quot;
    }
</code></pre>
<p>If I look at that path using the browser, the folder is shown as:
<a href=""https://i.stack.imgur.com/aiCzm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/aiCzm.png"" alt=""enter image description here"" /></a> - so after some confusion and embarrassement, I looked at things and concluded this must be a submodule (indeed it is mentioned in <code>/.gitmodules</code>.</p>
<p>I wonder how to best deal with that when I want to retrieve everything: currently my plan is to use <code>path</code>-entry to find a matching <code>[submodule &quot;path&quot;]</code> and then retrieve the tree from the repo using ther <code>url</code> from <code>.gitmodules</code> and <code>sha</code> from the response that I quoted. There is a <code>path</code> in <code>.gitmodules</code>, too - I guess that's just redundant?  (Would be grateful for any other comments and suggestions. Maybe there is an easier approach to get thinghs?)</p>
<p>Also, I did not find doc about this - so is submodule the only reason for having <code>commit</code> in the respone, or could there be other cases to consider?</p>
<p>Update: it worked as I described! But I'm really concerned I might be hit by other unexpected items in the reply, so the question is really about documentation regarding the items in a response to querying the tress-API.</p>
","1","51127","",""
"68177258","2819138","2021-06-29 10:48:52","0","125","<git><git-submodules>","""git checkout develop --recurse-submodules"" make submodule's HEAD detached","<p>I have parent project <code>A</code>,
<code>git branch -a</code>:</p>
<pre><code>* develop
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/master
</code></pre>
<p><code>A</code>'s <code>develop</code> branch depends on a submodule <code>subA</code>, but <code>master</code> branch doesn't.</p>
<p>and <code>subA</code> have these branches:</p>
<p><code>git branch -a</code>:</p>
<pre><code>* develop
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/master
</code></pre>
<p>the <code>.gitmodules</code> file :</p>
<pre><code>[submodule &quot;subA&quot;]
        path = subA
        url = https://someDomain/suA.git
        branch = develop
</code></pre>
<p>here's the problem,</p>
<p>I get into the parent project's directory, switch from branch <code>develop</code> to <code>master</code>, everything goes well cause <code>master</code> branch doesn't depend on <code>subA</code>, but when I use <code> git checkout develop --recurse-submodules</code> to switch back to the <code>develop</code> branch, the <code>suA</code>'s branch status is always like this,</p>
<pre><code>* (HEAD detached at refs/heads/develop)
  develop
  master
</code></pre>
<p>I know I can fix it by <code>git checkout develop</code>,  but I want to figure it out why <code>--recurse-submodules</code> doesn't work, and whether is there a solution to let submodules switch branches from the parent projects correctly.</p>
<p>git version 2.30.1 (Apple Git-130)</p>
","1","2819138","",""
"68214359","10467064","2021-07-01 17:11:31","2","1335","<gitlab><gitlab-ci><git-submodules><gitlab-ci-runner>","Error for git submodule in Gitlab CI runner - ""fatal: destination path already exists and is not an empty directory.""","<p>I am trying to include a submodule into my GitLab repository. It works just fine locally, but my build pipeline fails. According to <a href=""https://docs.gitlab.com/ee/ci/git_submodules.html"" rel=""nofollow noreferrer"">this docs entry</a>, all I should do is use relative url and set up the <code>GIT_SUBMODULE_STRATEGY</code>, but it doesn't really work.</p>
<p>My <code>.gitmodules</code>:</p>
<pre><code>[submodule &quot;res/submoduleName&quot;]
    path = res/submoduleName
    url = ../submoduleName.git
</code></pre>
<p><code>.gitlab-ci.yml</code>:</p>
<pre class=""lang-yaml prettyprint-override""><code>variables:
  GIT_SUBMODULE_STRATEGY: recursive

integration-test:
  # ... 
</code></pre>
<p>I get the following error in my Pipeline shell:</p>
<pre><code>Updating/initializing submodules recursively...
Submodule 'res/submoduleName' (https://gitlab-ci-token:[MASKED]@gitlab.com/mainProjectName/submoduleName.git) registered for path 'res/submoduleName'
fatal: destination path '/builds/_oBZKNaH/0/mainProjectName/mainProjectName/res/submoduleName' already exists and is not an empty directory.
fatal: clone of 'https://gitlab-ci-token:[MASKED]@gitlab.com/mainProjectName/submoduleName.git' into submodule path '/builds/_oBZKNaH/0/mainProjectName/mainProjectName/res/submoduleName' failed
Failed to clone 'res/submoduleName'. Retry scheduled
fatal: destination path '/builds/_oBZKNaH/0/mainProjectName/mainProjectName/res/submoduleName' already exists and is not an empty directory.
fatal: clone of 'https://gitlab-ci-token:[MASKED]@gitlab.com/mainProjectName/submoduleName.git' into submodule path '/builds/_oBZKNaH/0/mainProjectName/mainProjectName/res/submoduleName' failed
Failed to clone 'res/submoduleName' a second time, aborting
Cleaning up file based variables
00:00
ERROR: Job failed: exit code 1
</code></pre>
<p>What can I do to fix this problem?</p>
","2","10467064","",""
"49992758","8860495","2018-04-24 02:53:59","2","218","<git><svn><git-submodules><git-svn><dcommit>","How to ignore submodule in ""git svn dcommit""?","<p>'git svn dcommit' fails with the following error</p>
<blockquote>
<p>6aa885dabeb4f7d78ffcf45f6eb720c60a3e5b50 doesn't exist in the repository at /build/git/share/perl5/Git/SVN/Editor.pm line 440</p>
<p>Failed to read object 6aa885dabeb4f7d78ffcf45f6eb720c60a3e5b50 at /build/git/libexec/git-core/git-svn line 1017</p>
</blockquote>
<p>Found out the issue is because of the submodules later added to the git repo.
Is there a way to ignore submodule commits during <code>git svn dcommit</code> without impacting git repo.</p>
<p><strong>Note:</strong></p>
<p>Found a solution to rewrite history avoiding the sub-modules with Filter-branch option, but I guess that will tamper the repo which is already on production environment.</p>
","1","8860495","0","0"
"14687176","317915","2013-02-04 12:51:08","6","3330","<git><go><git-submodules>","git + go - how to handle subprojects with go get","<p>I use the version control system <code>git</code> for my software. And ""within"" the source code, I use <code>go get</code> to automatically fetch software from github. How can I handle the ""double git"" situation?</p>

<p>When I run <code>git add</code> on the directory <code>src/github.com/somename/someproject</code>, which is a git repository in itself, will this add anything? (it doesn't look like this when I run <code>git status</code>)</p>

<p>Should I use <code>git submodule</code> for the <code>git get</code> added subdirectories?</p>

<p>What is the best practice in this situation?</p>

<hr>

<p>Edit: I do have a custom <code>$GOPATH</code> environment for my software project. This is why the <code>src/github.com/somename/someproject</code> directory is found inside my software directory hierarchy.</p>
","2","317915","0","0"
"49999354","1485885","2018-04-24 10:27:04","10","2479","<git><parallel-processing><git-submodules>","Execute ""git submodule foreach"" in parallel","<p>Is there any way to execute a <code>git submodule foreach</code> command in parallel, similarly of how the <code>--jobs 8</code> parameter works with <code>git submodule update</code>?</p>

<p>For example, one of the projects we work on involves almost 200 sub-components (submodules) and we heavily use the <code>foreach</code> command to operate on them. I'd like to speed them up.</p>

<p>PS: In the case the solution involves a script, I work on Windows and, most of the time, using git-bash.</p>
","2","1485885","0","0"
"32189047","1363592","2015-08-24 18:18:51","0","33","<git><github><git-submodules><git-remote>","How do I link a shared common git repo as a subdir in other project repos","<p>I have been unable to find the answer to this question after
a couple of days of searching and finding hints suggesting
'git remote' and 'git submodule' but lacking sufficient clarity.</p>

<p>I wrote a CLI python script Banner.py containing a useful importable function.
(see '<a href=""https://github.com/jlettvin/Banner"" rel=""nofollow"">https://github.com/jlettvin/Banner</a>').
I use it in Makefiles, bash scripts, and as a function in other python scripts.</p>

<p>Now suppose I have projects A and B,
both of which could use that script and function.
I want to make a 'util' directory in both A and B containing Banner.py.
Then I want to call '$(HOME)/util/Banner.py' in Makefiles
and import Banner into python scripts in those projects too.</p>

<p>While working on project A I discover a tweak must be made to Banner.py.
I want to modify Banner.py in project A, commit and push it in project A,
and then use pull in project B to get the updated version
and also pull the Banner repo independently elsewhere.</p>

<ol>
<li>What git commands do I use to link the Banner project to projects A and B?</li>
<li>Will 'git status' in project B alert me to the Banner repo change?</li>
<li>Can I be notified which projects to pull when I push Banner from project A?</li>
</ol>

<p>The first question is the one that matters the most to me.
If I can modify the Banner repo and then silently pull it
when I pull repos A and B, that might suffice, but I'd like better.</p>
","0","1363592","",""
"68343998","8335629","2021-07-12 08:10:46","1","571","<git><commit><git-submodules>","How to make the parent git folder always point to latest commit whenever there is a new commit in child module(submodule)","<p>Every time I push a commit to the submodule I need to update the parent repo to the latest commit in the submodule. Is there any automatic way to do that in the remote?</p>
<p>Every time push a commit in the submodule repo I want the parent to automatically point to the latest commit of the child repo. Please suggest if it's possible and how?</p>
","3","8335629","",""
"14720034","335499","2013-02-06 01:22:19","33","34643","<git><version-control><git-submodules>","No submodule mapping found in .gitmodules for path","<p>When I run</p>

<pre><code>git submodule update
No submodule mapping found in .gitmodules for path 'Classes/lib/AFKissXMLRequestOperation'
</code></pre>

<p>But I have no submodule <code>Classes/lib/AFKissXMLRequestOperation</code> in current repos</p>

<p>My git config is:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
    precomposeunicode = false
[remote ""origin""]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = git@github.com:why_ios.git
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[submodule ""External/ios-SDNestedTable""]
    url = git@github.com:why/ios-SDNestedTable.git
[submodule ""External/PSStackedView""]
    url = git@github.com:why/PSStackedView.git
</code></pre>

<p>and .gitmodules is:</p>

<pre><code>[submodule ""External/ios-SDNestedTable""]
    path = External/ios-SDNestedTable
    url = git@github.com:why/ios-SDNestedTable.git
[submodule ""External/PSStackedView""]
    path = External/PSStackedView
    url = git@github.com:why/PSStackedView.git
</code></pre>
","1","335499","0","0"
"15353858","674039","2013-03-12 05:19:30","8","7895","<git><git-submodules><git-subtree>","git init in a git subdirectory","<p>I have a git repo which has some subdirectories:</p>

<pre><code>  ~/src
  ~/src/.git
  ~/src/mystuff
  ~/src/otherstuff
</code></pre>

<p>Now I want to share <code>otherstuff</code> with a friend, I was planning to do this with bitbucket.  They should be able to clone it and push changes in <code>otherstuff</code> but I don't want them to be able to access <code>src</code>, <code>mystuff</code> (nor even see that they exist).  </p>

<p>How do I go about this?  I almost went into <code>cd ~/src/otherstuff</code> and did <code>git init</code>, <code>git remote add origin ssh://git@bitbucket.org/wim_glenn/...</code> but something doesn't smell right about doing git init again when it's already under version control.  </p>
","7","674039","0","0"
"15359035","2160438","2013-03-12 10:43:47","2","476","<git><symfony><amazon-web-services><git-submodules><amazon-elastic-beanstalk>","Symfony2, AWS Beanstalk: how to push vendor as files not git-submodules to repo","<p>We are using Symfony2 on a AWS Beanstalk Application. For the Deployment we adjusted the Deployment-Script to do a <em>composer install</em> after the application has been uploaded. </p>

<p>Eventhough this works theoretically, it has some downsides - mainly the constantly increasing deployment-time (which sometimes results in server timeouts) and increasing dependencies on the availability of other servers. </p>

<p>I have read that some people copy the <code>vendor/*</code> to a tmp-dir and move it back after the deployment to <a href=""https://github.com/spy23/AWS-Elastic-Beanstalk-deployment-scripts-for-Symfony2-applications"" rel=""nofollow noreferrer"">speed-up the deployment</a>. </p>

<p>It's definetely helpful but we are updating our <code>composer.json</code> quite often so we still have to have a <em>composer install</em> in our deployment-process. We believe that the best approach is to include all dependencies (<code>vendor/*</code>) as files in the repo and skip the <em>composer install</em> during the deployment. </p>

<p>Unfortunately most libraries are included as git-submodules and AWS does not support submodules (all files have to be in the repo). </p>

<p><strong>So here comes my question:</strong></p>

<p><em>What is the best way to remove all git-submodules and commit the real files instead?</em> </p>

<p>I have tried combining:</p>

<pre><code>git submodules --recursive foreach
</code></pre>

<p>with <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"">How do I remove a submodule?</a> but without succes.</p>
","0","2160438","",""
"50321417","1188047","2018-05-13 23:14:56","3","3463","<git><gradle><groovy><git-submodules>","Gradle update git submodules","<p>I have a gradle project that's divided into submodules. It's not very convienient to execute <code>git submodule update --init</code> every time I need to build the project with latest sources, so I was wondering if there's a known way to create a gradle task that does that? Maybe there's an existing plugin? Unix and windows compatibility would be nice.</p>

<p><strong>UPDATE AFTER ANSWERED</strong></p>

<p>As <strong>@VonC</strong> stated <a href=""https://github.com/ajoberstar/gradle-git"" rel=""nofollow noreferrer"">ajoberstar/gradle-git</a> does the job. </p>

<p>Here's the configuration I ended up with</p>

<pre><code>buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.ajoberstar:gradle-git:1.6.0'
  }
}

apply plugin: 'org.ajoberstar.grgit'

task submodulesUpdate(type:Exec) {
  description 'Updates (and inits) git submodules'
  commandLine 'git', 'submodule', 'update', '--init', '--recursive'
  group 'Build Setup'
}

task build

build.dependsOn submodulesUpdate

// ...
</code></pre>
","0","1188047","0","0"
"15374552","26625","2013-03-12 23:57:09","0","549","<ios><git-submodules><workspace><projects>","How do I change build settings of an Xcode project that is a git submodule","<p>I have an Xcode project with an iOS app that uses another project, say Rest Kit, that is actually a Git submodule.</p>

<p>I want to effect a change in the build settings of RestKit, for good reason, when I build a debug build but at no other time. I don't want to modify the build settings itself because it may just be the one app I need to make the change for. And any change made will appear as a changed file in Git.</p>
","2","26625","",""
"15384497","501781","2013-03-13 11:50:49","0","685","<macos><git><git-submodules>","git submodules and detached HEAD","<p>So, I've been learning a bit more about git submodules, and everywhere that I read tells me that I end up with a detached HEAD after I add my submodule. This makes sense as I want my superproject to know specifically which commit should be used.  However, it isn't what I am seeing in practice (on Mac OS X).  </p>

<p>Consider the following sequence of commands that create a quick repo (called sub) with a single file in it, and then adds that as a submodule to another repo called blah.</p>

<pre><code>/tmp&gt; git version 
git version 1.7.12.4 (Apple Git-37)
/tmp&gt; git init sub
Initialized empty Git repository in /private/tmp/sub/.git/
/tmp&gt; cd sub
/tmp/sub&gt; touch a.txt
/tmp/sub&gt; git add a.txt
/tmp/sub&gt; git commit -m ""add a file""
[master (root-commit) c527790] .
 0 files changed
 create mode 100644 a.txt
/tmp/sub&gt; cd ..
/tmp&gt; git init blah
Initialized empty Git repository in /private/tmp/blah/.git/
/tmp&gt; cd blah
/tmp/blah&gt; git submodule add /tmp/sub sub
Cloning into 'sub'...
done.
/tmp/blah&gt; cd sub
/tmp/blah/sub&gt; git status
# On branch master
nothing to commit (working directory clean)
</code></pre>

<p>Why is the submodule on the master branch?  I would have expected it to say that it is not on a branch.  A bit more digging suggests that git is referencing the correct commit hash, but is somehow on the master branch, instead of a detached HEAD.</p>

<pre class=""lang-sh prettyprint-override""><code>/tmp/blah/sub&gt; cd ../../sub
/tmp/sub&gt; git reflog
97b97b3 HEAD@{0}: commit (initial): add a file
/tmp/sub&gt; cd ../blah
/tmp/blah&gt; git submodule status
 97b97b349cfae8da490c2cad3b3f4fc3af6a53c7 sub (heads/master)
</code></pre>

<p>What am I missing?  Thanks a lot.</p>
","0","501781","",""
"32506253","180813","2015-09-10 15:41:42","14","1101","<git><git-submodules><line-endings><gitattributes>","How can I force line endings to LF in submodules via .gitattributes in the parent project?","<p>I've got a repository that stores all of my Vim settings. It uses submodules to pull in plugins with Pathogen (I've looked at other plugin managers, not interested so far).</p>
<p>Due to the way MSYSGit handles line endings when opening Vim for commit messages, I need to have the repository stored with Unix line endings (eol=lf).</p>
<p>I've tried adding a .gitattributes file in the main repo with the content:</p>
<pre><code>* eol=lf
* text=auto
</code></pre>
<p>After refreshing the main repository using <code>git rm --cached -r .</code> and <code>git reset --hard</code>, the line endings in the main repo are now LF. Running the same commands inside of submodules, however, did not work.</p>
<p>How can configure my git repo so that submodules are checked out with LF line endings?</p>
","2","180813","0","0"
"50337342","3397008","2018-05-14 19:05:07","1","300","<github><git-submodules><git-fork>","Fork github repo with submodules?","<p>I'm trying to fork a github repo which uses several sub-modules. If I just fork the repo, the submodules are still referencing the original submodules (i.e., the submodules themselves arent forked). There are too many submodules for me manually fork them all! Is there a way to fork all the submodules too? </p>

<p>Also, if possible I'd like to be able to update the submodules automatically if there are changes to them. Whats the best way to do this? Thank you! </p>
","2","3397008","",""
"50337420","2272878","2018-05-14 19:10:11","1","631","<angular><express><travis-ci><git-submodules>","Build on travis failing for git submodule","<p>I have an angular project which has a git submodule for the backend.</p>

<p>It builds fine when i run it on my local machine. But, when i build it on travis it fails.</p>

<blockquote>
  <p>npm ERR! enoent ENOENT: no such file or directory, open
  '/home/travis/build/faxad/cartify/backend/node_modules/raw-body/package.json'</p>
  
  <p>npm ERR! enoent This is related to npm not being able to find a file.</p>
</blockquote>

<p>Complete build log here.</p>

<p><a href=""https://travis-ci.org/faxad/cartify/builds/378869452"" rel=""nofollow noreferrer"">https://travis-ci.org/faxad/cartify/builds/378869452</a></p>

<p>After taking a close look at travis logs, i found out that travis issues the following commands (which also throws the same error when i run them locally)</p>

<blockquote>
  <p>git clone --branch=upgrade <a href=""https://github.com/faxad/cartify.git"" rel=""nofollow noreferrer"">https://github.com/faxad/cartify.git</a>
  faxad/cartify</p>
  
  <p>git submodule update --init --recursive</p>
</blockquote>

<p>However, the following seems to be working fine without any issues</p>

<blockquote>
  <p>git clone --recursive <a href=""https://github.com/faxad/cartify.git"" rel=""nofollow noreferrer"">https://github.com/faxad/cartify.git</a></p>
</blockquote>
","1","2272878","",""
"15465673","697190","2013-03-17 20:14:51","0","63","<git><svn><version-control><repository><git-submodules>","Adding SVN library to a git repository. Hints? Tips? Do I need to make a submodule for it?","<p>I'm making an iOS app which is in a git repository. I'd like to add the Google Objective C client library, but it's stored via SVN. What's the recommended way to add an SVN project to a git repository? Do I need to make a submodule for it or is that unnecessary?</p>
","0","697190","",""
"15483276","261952","2013-03-18 17:38:33","2","2195","<git><git-submodules>","git submodule not working after deleting","<p>I have a project with a submodule set up.
A colleague by accident deleted the target folder and made a symlink instead (pointing outside the project folder), committing it.</p>

<p>Now I'm not able to restore the submodule anymore, even after deleting the link and creating an empty directory.
.gitmodule and .git/config haven't changed.
git submodule add and git submodule init don't do anything.</p>

<p>I can't revert the problematic commit, because it also contains a lot of other changes.</p>

<p>How can this be fixed?</p>
","0","261952","0","0"
"19495957","666057","2013-10-21 13:31:36","3","3939","<git><git-submodules>","Can I make a ""deep copy"" of a git repository with submodules?","<p>It is easy to clone an entire project plus all its submodules:</p>

<p><code>git clone --recursive git@github.com:homer/powerplant.git</code></p>

<p>However, how do I create a clone that has all these submodules replaced by the HEADs of the individual sub-repositories themselves? Preferably in such a way that this can be repeated easy, as soon as something changes. The target should be a read-only ""flat"" version of the same overall code. No merging should be necessary.</p>

<p>If this is possible, it would solve my Launchpad problems where <code>bzr</code> can import only repositories without submodules.</p>
","4","666057","0","0"
"19508849","64313","2013-10-22 04:15:17","13","14825","<git><git-submodules>","How to fix broken submodule config in git?","<p>I'm hitting this git error with sub module creation. I initial had a bad URL in the command, now any additional runs show this error. Any ideas on what is wrong?</p>

<pre><code>$ git submodule add -f https://github.com/Shougo/vimproc.vim.git .vim/bundle/vimproc
Adding existing repo at '.vim/bundle/vimproc' to the index
fatal: Not a git repository: .vim/bundle/vimproc/../../../.git/modules/.vim/bundle/vimproc
Failed to add submodule '.vim/bundle/vimproc'
</code></pre>
","0","64313","0","0"
"19546800","1366578","2013-10-23 16:06:06","1","269","<git><perforce><git-submodules><git-subtree><perforce-client-spec>","Remap dirs and files in git? Kind of clientspec in P4?","<p>There is a <em>large</em> project which is stored in a remote GIT repository in the way:</p>

<pre><code>root/
   |
   *
   module1/
         |
         * include/
         |       |
         |       * lib1/
         |       |     header1.h
         |       |     headerN.h
         |       * libN/
         |             headerX.h
         * sources/
                 | 
                 * lib1/
                 |     file1.cxx
                 |     fileN.cxx
                 * libN/
                 ...
</code></pre>

<p>The product is built from these libraries. Build system automatically downloads the sources, remaps each folder in the way that each library's sources directory is put near the corresponding header files on a disk, i.e.:</p>

<pre><code> lib1/
   include/
       header1.h
       headerN.h
   sources/
       fileN.cxx
   CMakeList.txt
</code></pre>

<p><strong>When the library is mapped to disk in this way it could be built</strong>. This structure is due to historical reasons (Perforce aka P4); it worked in Perforce because of <strong>Clientspec.txt</strong> file where it was possible to define such remap rules on repository clone.</p>

<p>Currently when the repository is cloned from <em><strong>origin/master</strong></em> it is not possible to build only one library in the project w/o preliminary step to create corresponding symlinks manually. When such symlinks are created it is not possible to modify the source code there because the connection between files and .git is lost.</p>

<p><strong>Question:</strong> is it possible to clone <em>origin/master</em> to local directory with remapping directories on the fly <strong>and</strong> with ability to preserve theirs connection with git (= being able to modify/rename/move files correctly?</p>

<p>I have researched <em>git submodule</em> and <em>git subtree</em> but seems they do not feet since they are for different purposes. </p>

<p>Thanks!</p>

<p>P.S. Currently it is not possible to affect on <em>origin/master</em> and on the server side at all.</p>
","0","1366578","",""
"38673450","310370","2016-07-30 11:29:58","3","3672","<git><github><git-submodules><git-pull><git-fetch>","How to fetch submodules in github","<p>I have used the following commands but submodules are not fetched :(</p>

<pre><code>git remote add upstream https://github.com/NecronomiconCoding/NecroBot

git fetch upstream

git merge upstream/master

git submodule foreach git pull upstream master
</code></pre>

<p>However the submodule <code>FeroxRev @ 33654cd</code> is not fetched into my local repository :(</p>

<p>So how can I fetch the latest submodule?</p>

<p>Here my project  : <a href=""https://github.com/MonsterMMORPG/aaddd/"" rel=""nofollow"">https://github.com/MonsterMMORPG/aaddd/</a></p>

<p>When I click submodule name it goes into remote repository</p>
","0","310370","0","0"
"278564","8950","2008-11-10 17:28:09","5","6249","<git><git-submodules>","How to update a git repo containing a submodule?","<p>After some time I wanted to update my git repo, and then something went wrong. What is the proper way out of this situation?</p>

<pre><code>mblsha@siruba:~/src/psi/ $ git status
iris: needs merge
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   src/common.cpp
#
# Changed but not updated:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#
#   unmerged:   iris
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   gupdate.sh
mblsha@siruba:~/src/psi/ $ git submodule status
+cf237ef8f3d9dc058dbde47e6973e6388608ce60 iris (heads/master)
+cf237ef8f3d9dc058dbde47e6973e6388608ce60 iris (heads/master)
+cf237ef8f3d9dc058dbde47e6973e6388608ce60 iris (heads/master)
mblsha@siruba:~/src/psi/ $ cd iris 
mblsha@siruba:~/src/psi/iris/ $ cat .git/HEAD 
cf237ef8f3d9dc058dbde47e6973e6388608ce60
</code></pre>
","0","8950","0","0"
"57632610","2026659","2019-08-23 20:23:20","17","14021","<git><git-merge><git-submodules><git-merge-conflict>","Can't resolve merge conflict with git submodule folder","<p>I have two git branches, develop and redesign that I need to merge. I have a submodule called library where its updates are being tracked by develop. When I run '<code>git merge</code>' it says library has been modified by both even though I haven't touched the library submodule. When I click on library in VS Code to see the conflicting changes I see this:</p>

<pre><code>diff --cc library
index 749618f9,589a7ae5..00000000
--- a/library
+++ b/library
</code></pre>

<p>I've tried deleting the library folder and running '<code>git submodule update</code>' while in the redesign branch before merging with no success. I added ignore = all to the .gitmodules file in redesign but didn't work. How do I get rid of the merge conflict with this submodule?</p>
","0","2026659","0","0"
"29746958","4398050","2015-04-20 11:44:09","34","25534","<python><git-submodules><python-import>","How to import python file from git submodule","<p>I've a project which uses git submodules. In my python file I want to use functions from another python file in the submodule project.</p>

<p>In order to work I had to add the <strong>init</strong>.py file to all subfolders in the path. My folder tree is the following:</p>

<pre><code>myproj
├── gitmodules
│   ├── __init__.py
│   ├── __init__.pyc
│   └── mygitsubmodule
│       ├── __init__.py
│       ├── __init__.pyc
│       └── file.py
└── myfile.py
</code></pre>

<p>Is there any way to make it work without touching mygitsubmodule ? </p>

<p>Thanks</p>
","0","4398050","0","0"
"29748323","1699828","2015-04-20 12:46:57","1","530","<vim><git-submodules><vim-plugin><pathogen>","Manage vim-plugin using git submodule and pathogen","<p>I use github to store my dotvim 
<a href=""https://github.com/mingchaoyan/dotvim"" rel=""nofollow"">https://github.com/mingchaoyan/dotvim</a></p>

<p>Pathogen is my choice to manage vim-plugins. To generate vim tags, pathogen tells me to add </p>

<pre><code>call pathogen#helptags()
</code></pre>

<p>into vimrc. It generates tags for each plugin. When I type</p>

<pre><code> git status
</code></pre>

<p>git points me some untracked file. They are tags generated by helptags.</p>

<p>To make my working copy clean, I do</p>

<pre><code>git add xxx/doc/tags
git ca ...
git push
</code></pre>

<p>but another problem appears.
When I try to clone dotvim on another computer,</p>

<pre><code>git clone https://github.com/mingchaoyan/dotvim
...
git submodule init
git submodule update 


fatal: reference is not a tree: 0cca328d1a6b12422026e62c3fb8951e22f70b80
fatal: reference is not a tree: 812b8c9e59a5e917f1e206ce4b3d2bcf3391bb11
fatal: reference is not a tree: a3d7e4533871e76b9cadd85177dc84aad7503154
fatal: reference is not a tree: 82a3aa42ff799de33739685551771decd05157de
fatal: reference is not a tree: ef95accdee67b43396fcc65cb65eed0d9668c9de
fatal: reference is not a tree: cb9b7a395a79dd5633eeb789bc809faf6977118d
Unable to checkout '0cca328d1a6b12422026e62c3fb8951e22f70b80' in submodule path 'bundle/DrawIt'
Unable to checkout '812b8c9e59a5e917f1e206ce4b3d2bcf3391bb11' in submodule path 'bundle/SingleCompil
e'
Unable to checkout 'a3d7e4533871e76b9cadd85177dc84aad7503154' in submodule path 'bundle/lookupfile'
Unable to checkout '82a3aa42ff799de33739685551771decd05157de' in submodule path 'bundle/snipmate'
Unable to checkout 'ef95accdee67b43396fcc65cb65eed0d9668c9de' in submodule path 'bundle/taglist'
Unable to checkout 'cb9b7a395a79dd5633eeb789bc809faf6977118d' in submodule path 'bundle/vcscommand'
</code></pre>

<p>These are the plugins I just add.</p>

<p>I may know the reason is the submodule on my repo is different from the original one with ""tags"".
How can I manage vim-plugins with pathogen and gitsubmodule without above problem？</p>
","3","1699828","",""
"38752629","807494","2016-08-03 20:02:30","1","1930","<git><azure-devops><git-submodules>","VSTS git build fails with git submodule","<p>I have a git repos A and B in a Visual Studio Team Services Project.
B is a submodule of A with the following config in .gitmodules:</p>

<pre><code>[submodule ""my_submodule""]
    path = somefolder/my_submodule
    url = https://xxx.visualstudio.com/xxx/_git/B
</code></pre>

<p>If I do a build with the option Repository/Checkout Submodules I get the following error:</p>

<pre><code>Repository type=TfsGit
localPath=C:\a\1\s
clean=False
sourceBranch=refs/heads/submoduletest
sourceVersion=0378dd86db31e4d7bff8de86a482b3d8e72dd3ba
Syncing repository: A (Git)
repository url=https://xxx.visualstudio.com/_git/A
checkoutSubmodules=True
Starting clone
Checking out 0378dd86db31e4d7bff8de86a482b3d8e72dd3ba to C:\a\1\s with submodules
Checked out branch refs/heads/submoduletest for repository A at commit 0378dd86db31e4d7bff8de86a482b3d8e72dd3ba
##[error]LibGit2Sharp.NotFoundException: Failed to resolve path 'C:/a/1/s/xxx/somefolder/my_submodule/.git': The system cannot find the path specified.
##[error]   at LibGit2Sharp.Core.Ensure.HandleError(Int32 result)
##[error]   at LibGit2Sharp.SubmoduleCollection.Update(String name, SubmoduleUpdateOptions options)
##[error]   at Microsoft.TeamFoundation.DistributedTask.Task.Internal.Core.GitHelper.DoUpdateSubmodules(Repository repository, Int32 maxRecursionDepth, Int32 currentRecursionDepth, String username, String password, CancellationToken cancellationToken)
##[error]   at Microsoft.TeamFoundation.DistributedTask.Task.Internal.Core.GitHelper.UpdateSubmodules(ITaskEndpoint endpoint, Repository repository, Int32 maxRecursionDepth, CancellationToken cancellationToken)
##[error]   at Microsoft.TeamFoundation.DistributedTask.Task.Internal.Core.GitHelper.SyncAndCheckout(Boolean cleanRepository, String sourceBranch, String sourceVersion, Boolean checkoutSubmodules, CancellationToken cancellationToken)
##[error]   at Microsoft.TeamFoundation.DistributedTask.Plugin.Build.GitSourceProvider.&lt;&gt;c__DisplayClass3_0.&lt;PrepareRepositoryAsync&gt;b__0()
##[error]Microsoft.TeamFoundation.DistributedTask.Agent.Common.AgentExecutionTerminationException: Prepare repository failed with exception. ---&gt; LibGit2Sharp.NotFoundException: Failed to resolve path 'C:/a/1/s/xxx/somefolder/my_submodule/.git': The system cannot find the path specified.
##[error]   at LibGit2Sharp.Core.Ensure.HandleError(Int32 result)
##[error]   at LibGit2Sharp.SubmoduleCollection.Update(String name, SubmoduleUpdateOptions options)
##[error]   at Microsoft.TeamFoundation.DistributedTask.Task.Internal.Core.GitHelper.DoUpdateSubmodules(Repository repository, Int32 maxRecursionDepth, Int32 currentRecursionDepth, String username, String password, CancellationToken cancellationToken)
##[error]   at Microsoft.TeamFoundation.DistributedTask.Task.Internal.Core.GitHelper.UpdateSubmodules(ITaskEndpoint endpoint, Repository repository, Int32 maxRecursionDepth, CancellationToken cancellationToken)
##[error]   at Microsoft.TeamFoundation.DistributedTask.Task.Internal.Core.GitHelper.SyncAndCheckout(Boolean cleanRepository, String sourceBranch, String sourceVersion, Boolean checkoutSubmodules, CancellationToken cancellationToken)
##[error]   at Microsoft.TeamFoundation.DistributedTask.Plugin.Build.GitSourceProvider.&lt;&gt;c__DisplayClass3_0.&lt;PrepareRepositoryAsync&gt;b__0()
##[error]   --- End of inner exception stack trace ---
##[error]   at Microsoft.TeamFoundation.DistributedTask.Plugin.Build.GitSourceProvider.&lt;&gt;c__DisplayClass3_0.&lt;PrepareRepositoryAsync&gt;b__0()
##[error]   at System.Threading.Tasks.Task.Execute()
</code></pre>

<p>The interesting error message seems to be:</p>

<pre><code>LibGit2Sharp.NotFoundException: Failed to resolve path 'C:/a/1/s/xxx/somefolder/my_submodule/.git'
</code></pre>

<p>Doing a git clone xxx/A --recursive on my maschine works.</p>

<p>The <em>fantastic</em> docs point to an auth problems:
<a href=""https://www.visualstudio.com/en-us/docs/build/define/repository"" rel=""nofollow"">https://www.visualstudio.com/en-us/docs/build/define/repository</a></p>

<p>But this says nothing about auth and even using a relative path in .gitmodules does not result in a different error message.</p>

<p>Any ideas?</p>

<h1>Update 1</h1>

<p>For testing purposes I used a branch. I merged the changes (adding submodule) to master and retried - now with the following error:</p>

<pre><code>##[error]LibGit2Sharp.NotFoundException: Object not found - no matching loose object (4fa408bc7b29e87b7032e0f78998516ff4a4da00)
</code></pre>

<p>That hash is the HEAD of my submodule - clearly available.</p>
","1","807494","",""
"19704667","2940885","2013-10-31 10:59:43","2","4652","<git><branch><git-submodules>","git submodule update per branch","<p>I have a parent (git) project with a submodule (git).</p>

<p>However, when I update the submodule in the parent/develop branch, the parent/master branch also contains the updated submodule files...</p>

<p>So while I want to test my parent code with the updated submodule code, the updates submodule code already appears in master ... what a disaster... that could create.</p>

<p>What I want is that if I update the submodule in parent/develop branch and switch to parent/master, I still see the submodule files before the update. Only after merging develop into master, the updated submodule files should appear in master.</p>

<p>If I look at this post: <a href=""https://stackoverflow.com/a/17927655/2940885"">https://stackoverflow.com/a/17927655/2940885</a>, it looks like the conclusion is that the files of the submodules are untracked and therefore appearing in any branch I checkout.</p>

<p>Any clue on this?</p>
","1","2940885","0","0"
"57728866","7755620","2019-08-30 14:42:04","1","473","<ruby><git><rubygems><git-submodules>","How to distribute and use a ruby gem as a git submodule in a Github repository?","<p>I need to distribute a dependency to my project – the markdown -> manpage converter <a href=""https://github.com/rtomayko/ronn"" rel=""nofollow noreferrer"">ronn</a> – with the project, as a git submodule. <code>ronn</code> requires gems <code>hpricot</code>, <code>mustache</code>, and <code>rdiscount</code>. I would like to distribute them with my project too, to provide a ready to run, 0-install, standalone tool.</p>

<p>Can be the ruby interpreter pointed to a local directory with a gem? In other words, if I add the <code>ronn</code> dependencies to my project repository as git submodules, then how can I make ruby interpreter and/or <code>ronn</code> notice and use them?</p>

<p>There is no problem with providing <code>ronn</code> this way – it has a <code>bin/</code> directory with the <code>ronn</code> executable and can be simply run without installing any gem.</p>
","3","7755620","",""
"12140166","1285574","2012-08-27 10:22:54","1","192","<xcode><git><xcode4><git-submodules>","Project in Xcode using git submodules results in conflicts","<p>I have a big project I'm working on which makes use of git submodules to separate a lot of the code I write. Problem is I ended up getting a conflict in Xcode because of two different versions of the same submodule.</p>

<p>For example, imagine I have the repository Project which has a submodule SubA and a submodule SubB. The problem is that my SubA has a submodule SubB too. This could not be a problem if the two different SubB's are in the same revision, but leads to conflicts when they aren't.</p>

<p>When importing all the files into Xcode there is no problem since they're in two different folders, but I use</p>

<pre><code>#import ""FileInSubB.h""
</code></pre>

<p>to import source code in SubB, so Xcode will compile only one of the versions of that file because they have the same name. Is there an easy solution for this?</p>
","0","1285574","",""
"12170779","205606","2012-08-29 04:13:27","4","160","<git><github><git-submodules>","Subdirectory from github as a git submodule","<p>A lots of repos for python on github use project structure for setuptools (for example <a href=""https://github.com/omab/django-social-auth"" rel=""nofollow"">https://github.com/omab/django-social-auth</a>). 
But I want to make folder with module core to my project as a submodule.
Can I use subdirectories from remote repo as a submodule in my repo?</p>
","1","205606","0","0"
"12192095","199649","2012-08-30 07:39:50","15","7018","<git><git-submodules>","How to discard change to git submodule?","<p>I changed the commit pointer of a git submodule:</p>

<pre><code>% git status
# On branch fix
# Your branch is behind 'origin/fix' by 1 commit, and can be fast-forwarded.
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   app/lib (new commits)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Yet when I do <code>git checkout</code>, nothing changes:</p>

<pre><code>% git checkout -- app/lib &amp;&amp; git status
# On branch fix
# Your branch is behind 'origin/fix' by 1 commit, and can be fast-forwarded.
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   app/lib (new commits)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Here's the diff:</p>

<pre><code>% git diff
diff --git a/app/lib b/app/lib
index d670460..83baae6 160000
--- a/app/web-lib
+++ b/app/web-lib
@@ -1 +1 @@
-Subproject commit d670460b4b4aece5915caf5c68d12f560a9fe3e4
+Subproject commit 83baae61804e65cc73a7201a7252750c76066a30
</code></pre>

<p>Any idea why this happen?</p>

<p>Thanks!</p>
","0","199649","0","0"
"29837053","1542339","2015-04-24 01:16:15","1","1008","<git><git-branch><git-submodules>","Why does `git rebase --continue` fail with gitmodules error?","<p>I created a branch named lab based on master. Months later, I tried to rebase the lab branch based on master. First there is one .gitignore conflict; after solving it, I ran <code>git rebase --continue</code>, but it failed again and this time there is no help info telling me how to continue with this rebase. How to rebase lab branch based on master?</p>

<pre><code>git rebase --continue
Applying: start edit
Applying: a
fatal: mode change for .gitmodules, which is not in current HEAD
Repository lacks necessary blobs to fall back on 3-way merge.
Cannot fall back to three-way merge.
Patch failed at 0002 a
The copy of the patch that failed is found in:
   f:/testxxx/.git/rebase-apply/patch

When you have resolved this problem, run ""git rebase --continue"".
If you prefer to skip this patch, run ""git rebase --skip"" instead.
To check out the original branch and stop rebasing, run ""git rebase --abort"".
</code></pre>
","0","1542339","",""
"29850029","835883","2015-04-24 14:24:31","103","83896","<git><github><git-submodules>","What is the way to remove a git submodule as of git version 1.9.3?","<p>as of git version 1.9.3 (Apple Git-50)  on mac how do i remove a git submodule? I am reading alot of outdated information with many developers telling me they wont work.  What is the current way ?
 will <code>git deinit pathToSubModule</code>    do the trick ?</p>

<p>The steps i thought would work are <a href=""http://davidwalsh.name/git-remove-submodule"" rel=""noreferrer"">here</a> but comments say they wont. </p>

<p>Let me explain my current situation and what i need accomplished.  I've installed <a href=""https://github.com/Quick/Quick#how-to-install-quick"" rel=""noreferrer"">the Quick repository</a> and added it to as submodule to my project.  This code is already checked in and others are using it.  What i now need to do is <em>fork</em> the same Quick repository and host it on a more secure github that my company has (so a completely other private github). After forking it i want to add that fork as a gitSubmodule and let it replace the current Quick submodule i had installed previously. </p>

<p>update: i've read that the following is the correct way on latest git version please confirm?</p>

<pre><code>To remove a submodule added using:

git submodule add blah@blah.com:repos/blah.git lib/blah
Run:

git rm lib/blah
That's it.

For old versions of git (circa ~1.8.5) use:

git submodule deinit lib/blah
git rm lib/blah
git config -f .gitmodules --remove-section submodule.lib/blah
</code></pre>
","1","835883","0","0"
"50542897","1032531","2018-05-26 12:43:04","1","33","<git><git-submodules><symlink><phped>","Git repository where script is physically in another git repository","<p>I am simultaneously developing a composer package and app which uses that composer package.  My app is a git repository where the <code>vendor</code> directory is ignored, and I wish to make the composer package its own git repository.  My first solution was to locate the package outside of my app and use a <a href=""https://getcomposer.org/doc/05-repositories.md#path"" rel=""nofollow noreferrer"">local repository</a> which will create a symbolic link to this other directory, but my IDE (NuShpere PhpED) doesn't seem to support execution breaks (off topic, but if anyone knows how to make them work, please comment).</p>

<p>I've looked into git submodules, but I don't think this will work since the script is physically located within the parent script.</p>

<p>How can this be accomplished?</p>
","1","1032531","0","0"
"16608604","64904","2013-05-17 12:06:53","5","2208","<git><git-submodules>","git submodule not fetched by repo checkout","<p>I'm a git newbie. My git repo includes submodule references. I have a post-receive hook to checkout the repo contents to my web directory:</p>

<pre><code>#!/bin/sh
GIT_WORK_TREE=/home/www/hello_world_php git checkout -f
</code></pre>

<p>(Per this <a href=""http://goo.gl/Ybzik"" rel=""noreferrer"">blog post</a>.)</p>

<p>It works fine except that the submodule directories in the www directory are NOT populated.</p>

<p>How to fix?</p>
","2","64904","0","0"
"16629450","61072","2013-05-18 22:08:25","2","2393","<git><git-submodules>","Why won't git ignore a bin folder in my submodule?","<p>Git isn't correctly ignoring a bin folder of one of my submodules. Any ideas why? </p>

<p>Here is git status in the submodule:</p>

<pre><code>MBPR:$ git status
# On branch master
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   bin/
#   gen/
</code></pre>

<p>Here is git status in the root:</p>

<pre><code>MBPR:$ git status
# On branch develop
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   cwac-loaderex (untracked content)
#
</code></pre>

<p>Here is my .gitignore:</p>

<pre><code>MBPR:$ cat .gitignore
.metadata
bin
gen
local.properties
</code></pre>

<p>This works correctly for other submodules, but for this submodule in particular it refuses to ignore the bin and gen folders. I have deleted and re-added this submodule repeatedly, to no avail.</p>

<p>Thanks!</p>
","0","61072","0","0"
"68911324","750913","2021-08-24 16:59:30","2","156","<git><git-submodules>","git status in parent module not showing new commits in submodule","<p>Why is the parent module's status showing no changes? What am I missing? The submodule is 2 commits ahead of the the commit returned by ls-tree in the parent module but it doesn't show up in status and commit -a says there are no changes. .git/info/exclude has no uncommented lines.</p>
<pre><code>/Repo/Submodule (master)$ git log -3 --format=&quot;%H&quot;
a210765353b5bbbdd5bd82b5b872b7d4c1fcb322
b39b3942fcf0bf08d98e2d7767a063c2f5c4ba95
fb1721d7bf78ff7c2182a7d33c0976544c8340d3

/Repo/Submodule (master)$ cd ..

/Repo (master)$ git ls-tree HEAD Submodule
160000 commit fb1721d7bf78ff7c2182a7d33c0976544c8340d3  Submodule

/Repo (master)$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

/Repo (master)$ git --version
git version 2.33.0.windows.1

</code></pre>
","4","750913","",""
"33894897","2050788","2015-11-24 13:24:14","3","6929","<git><git-submodules>","git submodule foreach checkout supermodule branch","<p>Consider a git repository Foo/, which has submodules bar1/ and bar2/.</p>

<p>Each of these has the same branches:  1 &amp; 2.</p>

<p>I enter the supermodule, and I want to update the supermodule to contain the most recent commits from bar1 and bar2's origin.  I've already init'd and updated the supermodule, so there's working trees in bar1 and bar2, but they are in a detached state.  I can do the following:</p>

<pre><code>cd foo;
git checkout 1
git submodule foreach git checkout 1
git pull
</code></pre>

<p>Now, what bugs me is repeating the branch identifier.   Can I do something like ""git submodule foreach git checkout $CURRENT_BRANCH_ID""?  Is there a better alternative?</p>
","0","2050788","0","0"
"17358738","2530724","2013-06-28 06:42:46","2","442","<git><symlink><git-submodules><subtree>","How to share files/folders across git repo?","<p>I have a git repository, inside there are files/folders, that I want to share across repo.</p>

<pre><code>repo/
     .git/
     html-coding
          css-shared
     js-app
          css-shared
          ttf-shared
     font-files
          ttf-shared
</code></pre>

<p>Using Submodules for this task looks like overkill. At times of SVN I've used snv:externals flag, which worked just fine for my purposes.</p>

<p>Subtree is again referencing to external repos, which I don't need at all. Something simple like symbolic links would be acceptable. But I need it cross-platform, since my devs are on Mac, Win and Linux.</p>
","0","2530724","0","0"
"33948631","210945","2015-11-27 00:04:23","0","281","<git><git-submodules><gitignore>","Tell git to ignore untracked content in submodules?","<p>Currently if I run <code>git status</code>, I get a bunch of stuff like this:</p>

<pre><code>On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

        modified:   projects/submodule1 (untracked content)
        modified:   projects/submod2 (untracked content)
        modified:   projects/submodule3 (new commits, modified content, untracked content)
        modified:   projects/submodule4 (modified content, untracked content)
        ...
</code></pre>

<p>I <em>do</em> care about the <code>new commits</code> and the <code>modified content</code>, but a lot of these submodule generate their own crap (like build files, etc), and I don't care about any of that (if it's important, I should be adding it to the submodule and tracking it). Is there a way to get git to ignore <code>untracked content</code> in submodules, but not <code>new commits</code> or <code>modified content</code>?</p>
","3","210945","",""
"17413493","1092815","2013-07-01 20:52:43","140","55045","<git><git-submodules><revision-history>","Create a submodule repository from a folder and keep its git commit history","<p>I have a web application that explores other web applications in a particular way. It contains some web demos in a <code>demos</code> folder and one of the demo should now have it's own repository. I would like to create a separate repository for this demo application and make it a <del>subpackage</del> <a href=""http://git-scm.com/book/en/Git-Tools-Submodules"" rel=""noreferrer"">submodule</a> from main repository without losing its commit history.</p>

<p><em>Is it possible to keep the commit history from the files in a repository's folder and create a repository from it and use it as a <a href=""http://git-scm.com/book/en/Git-Tools-Submodules"" rel=""noreferrer"">submodule</a> instead?</em></p>
","3","1092815","0","0"
"50736267","5554751","2018-06-07 08:20:49","1","144","<git><git-submodules>","Nesting git repositories with .gitignore","<p>I have three repositories: <code>first</code>, <code>second</code>, and <code>third</code> one inside another with a structure like this:</p>

<pre><code>first
    .git
    .gitignore &lt;- second/
    firstrepofiles
    second
        .git
        .gitignore &lt;- third/
        secondrepofiles
        third
            .git
            thirdrepofiles
</code></pre>

<p>The purpose of such structure is to separate parts of the system, yet keep them connected and continuously integrated.</p>

<p>It seems to work just fine but I wonder is it a bad practice to do something like that?</p>
","0","5554751","",""
"17441904","2214758","2013-07-03 07:16:38","4","10019","<git><github><git-submodules>","Git submodules in .gitmodules not initialized","<p><a href=""https://github.com/Uni-/shBrushesCollection"" rel=""nofollow noreferrer"">https://github.com/Uni-/shBrushesCollection</a></p>

<p>I created a GitHub repository and made a .gitmodules file directly from GitHub's web source editor. When I then cloned the repo, I noticed the submodules in .gitmodules were not being initialized.</p>

<p>I think I tried almost all commands possible, including update, init, update --init and so on. Is there a way to use current .gitmodules file, not submodules add?</p>
","0","2214758","0","0"
"34041830","1272105","2015-12-02 11:38:57","2","47","<git><git-submodules>","What is the difference between file .git and directory .git?","<p>I had a git submodule and I was in need to add some pre-commit operations, so i searched for the directory .git to find the hook and so on. Instead of the directory i found only a file </p>

<pre><code>.git
</code></pre>

<p>So, i was guessing what does this means? (in order to start understanding what exactly i messed up fetching the submodule)</p>

<p>I tried searching but cannot find something useful to understand what is going on.</p>
","0","1272105","",""
"34086504","4242772","2015-12-04 10:45:54","1","805","<php><git><repository><composer-php><git-submodules>","Getting composer package from git submodule","<p>I am trying to implement a <code>repository</code> for my libraries which are repositories, and added as <code>sub-modules</code> of the main repository, so the development of each library can be separated from each other and the <code>composer require</code> have to look at only the main repository</p>

<p>My Repository structure is something like this</p>

<pre><code>Main repositoey
    ----Submodule 1
    ----Submodule 2
    ----Submodule 3
    ----...
</code></pre>

<p>This structure is needed because if, i want to share the library to anyone, then they only have to add the main repository to their <code>composer.json</code> and not every single repository for the library.</p>

<p>I have tried similar thing using the branches and tags but,  that is not feasible when more than one libraries with same version, we can not create duplicate tags for different branches, which is possible for the submodules.</p>

<p>What i want to implement is</p>

<ol>
<li>Create modules</li>
<li>Push on the bitbucket repository</li>
<li>Share the module internally with colleagues</li>
<li>They should be able to get the module by running <code>composer require vensor/module</code></li>
<li>And they do not need to add another repository</li>
</ol>

<p>I do not know this is the correct direction i am heading in.
Please guide me or suggest a better way to implement the same mechanism.</p>
","0","4242772","",""
"69106788","12361700","2021-09-08 16:35:55","0","74","<git><branch><git-submodules>","Update git repository to submodule","<p>quick question, can I use submodule as &quot;cloned repos&quot;?</p>
<p>E.g.:<br />
Can I change the submodule branch, and in case, edit the code and do some work in it and commit them?</p>
<p>Example:</p>
<pre><code> &gt; example-repo
   |- index.html
   |- submodule -&gt; submodule-repo-1
   |  |- file1.html
   |- submodule -&gt; submodule-repo-2
      |- file2.html
</code></pre>
<p>and do something like:</p>
<pre><code>git clone https://.../example-repo.git
git submodule update
cd submodule-repo-1
git checkout -b test-branch
echo &quot;idk&quot; &gt; file1.html
git commit -am &quot;test commit&quot;
git push
</code></pre>
","3","12361700","",""
"34107214","720077","2015-12-05 15:29:21","10","728","<git><merge><git-submodules><git-subtree><pretzo>","How to merge a git repository with submodules into another with subtree merge?","<p>I have a dotfiles repository. I want to merge another one with submodules (<a href=""https://github.com/sorin-ionescu/prezto"">prezto</a>) into it, so I can conveniently have everything in one repository without the inconvenience of submodules.</p>

<p>How can I subtree merge prezto into my dotfiles repository with all its submodules?</p>

<p>I can use submodules, I can split and merge subtrees either the ""old fashioned"" way or with the newer git subtree tool. </p>

<p>I just don't know how to do this specific case.</p>
","2","720077","0","0"
"17566876","1264820","2013-07-10 09:20:07","5","999","<vim><customization><git-submodules><pathogen>","Customizing vim bundles using pathogen and git submodules","<p>I use vim in different machines and want to keep my configuration synced among them, so I tried the well known approach of using <a href=""https://github.com/tpope/vim-pathogen"" rel=""noreferrer"">pathogen</a> to install different vim plugins, keeping them as git submodules as described for example <a href=""http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen/"" rel=""noreferrer"">here</a>.</p>

<p>Now my <code>.vim</code> folder is a git repo, which contains as submodules each folder in <code>.vim/bundle</code>. I uploaded that main repo to bitbucket and cloning it from my other machines, and after some <code>git submodule init</code> and <code>git submodule update</code> I get the same configuration in all of them as wanted.</p>

<p>Now the problem comes when I need to make some customization in some of these plugins. For example, some of the submodules are simply vim colorschemes. Assume that I want to change, say the color of the comments. Which would be the proper way to do so?</p>

<p>Some ideas came co my mind:</p>

<ol>
<li>If I modify directly <code>.vim/bundle/vim-github-colorscheme/colors</code> (for example), then AFAIK, I should push those changes to the main <code>vim-github-colorscheme</code> repo, which I cannot, and would be ridiculous anyway. My customizations are by nature private. But if I don't sync with the submodule repo, those changes will not be visible from my other machines.</li>
<li>If I keep my own colorscheme customizations in <code>.vim/colors</code>, then these changes will be part of the main repo and they will be easily shared among machines, but this breaks the ""bundle"" philosophy of pathogen. In addition it is not clear to me how to accomplish this way other kind of customizations (eg, modifiying some snippets for snipMate, or even modifying the code of a plugin)</li>
<li>Should I make a private fork of the plugin, upload it to bitbucket, and use it as a submodule instead of the original one? This way at least I could properly do the approach in 1., but it does not looks as a good option. Specially because I don't know in advance if I will need to customize the plugin, so this would force me to make a fork of each new vim plugin I install ""just in case"". </li>
<li>I could keep the code of the bundles under a single git repo, i.e. do not use submodules at all. This will give me freedom to modify them, sync the modifications with my bitbucket repo and deploy them in all my machines with a single <code>git pull</code>. However this way, when a change is made in the original source of the plugin it will be difficult to merge it with my own modifications.</li>
</ol>

<p>I ran out of ideas, and all of the above seem wrong to me for one or other reason. How the people which uses git and pathogen manages this scenario?</p>
","0","1264820","0","0"
"50766201","2372748","2018-06-08 18:04:21","0","869","<git><git-branch><git-submodules>","""no branch"" on git submodule","<p>I'm working on a git project relying on a git submodule pointing to an outdated commit which is not usable for the main project. After successfully updating the master branch of this submodule to the commit I would like to use, grabbed from an external repository, I go back to the parent of the submodule, the main project, and issue <code>git submodule update</code> as I understood this is the correct way to make the parent know about the update. However, if I now move back to the submodule folder I see I'm on (no branch) which is still the branch of the old unusable commit. In the submodule I do see the updated master branch to version I would like to use. This leads me to think that I did not manage to correctly update the submodule to my preferred commit. Or should I not update the submodule from the main project? </p>

<p>Thank you!</p>
","0","2372748","",""
"34153029","109211","2015-12-08 10:05:05","5","5353","<git><version-control><git-submodules>","Why does git Submodule show wrong branch","<p>We have a superproject and a submodule contained within it. Both have the same branches <code>master, staging, featureBranch</code>. </p>

<p>I would like the superproject on <code>master</code> to track the submodule on <code>master</code> and the superproject on <code>staging</code> to track the submodule on <code>staging</code>.</p>

<p>for master in the superproject the <code>.gitmodules</code> looks like this:</p>

<pre><code>[submodule ""submodule""]
        path = submodule
        url = http://fpr-dev/submodule.git
        branch = master
</code></pre>

<p>and on staging</p>

<pre><code>[submodule ""submodule""]
        path = submodule
        url = http://fpr-dev/submodule.git
        branch = staging
</code></pre>

<p>now when I am on master an do a <code>git submodule</code> I see the following output:</p>

<pre><code>$ git submodule
+e3782f37b1ae23aa0d5537ef3061dfdfec70f77f submodule (heads/Staging)
</code></pre>

<p>Please note it says staging. But when I do a git status inside the submodule I see:</p>

<pre><code>$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
</code></pre>

<p><strong>Why is this so and how can I fix it?</strong></p>

<p>now when I switch to <code>staging</code> and try to pull (<code>git.exe pull -v --progress  ""origin""</code>) the submodule I get the following error:</p>

<pre><code>You asked to pull from the remote 'origin', but did not specify
a branch. Because this is not the default configured remote
for your current branch, you must specify a branch on the command line.
</code></pre>

<p><strong>All I want to do is:</strong> </p>

<ul>
<li>Superproject and submodule should have the same branches (Staging, feature, ...).</li>
<li>when switching the superproject to a different branch I want the submodule to follow the superprojects branch (i.e. also switch to that branch) I don't care if this is done automaticalle or I have to run a 1000 lines script</li>
<li>When doing a push or pull in the submodule it should just work (i.e. push/pull the correct branch)</li>
</ul>

<p>What is the easiest way to achieve this behaviour?</p>
","0","109211","0","0"
"17616594","9636","2013-07-12 13:55:48","3","1316","<git><git-submodules>","How do I add a git submodule that has no master branch?","<p>I have two git repositories: <code>A</code> and <code>B</code>. I want to make <code>B</code> a submodule of <code>A</code>. <code>B</code> has no <code>master</code> branch.</p>

<p>I ran the following command from <code>A</code>'s repository root:</p>

<pre><code>git submodule add git@git.example.com:B lib/B
</code></pre>

<p>Which yields the following output:</p>

<pre><code>Cloning into 'lib/B'...
remote: Counting objects: 156, done.
remote: Compressing objects: 100% (151/151), done.
remote: Total 156 (delta 45), reused 0 (delta 0)
Receiving objects: 100% (156/156), 109.80 KiB | 140 KiB/s, done.
Resolving deltas: 100% (45/45), done.
fatal: You are on a branch yet to be born
Unable to checkout submodule 'lib/B'
</code></pre>

<p>My <code>.gitmodules</code> file has no entry for <code>B</code>, but <code>.git/modules/lib/B</code> exists. If I <code>cd lib/B</code>, I can <code>git checkout develop</code> (<code>B</code>'s only branch), but git sees any files under <code>lib/B</code> as part of <code>A</code>.</p>

<p>Is there any way to tell git to add a submodule that has no <code>master</code> branch?</p>
","0","9636","",""
"34169814","4573839","2015-12-09 02:34:35","0","1155","<git><git-submodules>","Unable to checkout git submodule path when cloning repo after push","<p>After I push the master and submodule, I try to clone the repository to a new folder in computer from the remote.</p>

<p>When cloning the master, it works successfully.</p>

<p>But when I start cloning the submodule, it shows an error message </p>

<blockquote>
  <p>Unable to checkout git submodule path</p>
</blockquote>

<p>and fails.</p>

<p>Is there some way to solve it?</p>
","0","4573839","",""
"50774251","6057448","2018-06-09 12:22:50","0","20","<git><github><git-submodules><git-subtree>","using git-submodule without repository structure modification","<p>I have two github repository similar to the below structure as an example:</p>

<p>repo1:
[folder_X]
fileA
<strong>fileB
fileC</strong>
fileD
[folder_Y]
fileE
fileF</p>

<p>repo2:
[folder_M]
<strong>fileB
fileC</strong>
fileK
[folder_N]
fileO
fileP</p>

<p>as you see in both repository we have some common files in folder_X and folder_M which are fileB and fileC.  I need to have a common source for these files, so I don't need to modify them in two repository always. These common files (B and C) can be stored in a separate branch in repo1 as an example.</p>

<p>Is there any solution for it without modifying the repo structure?</p>
","0","6057448","",""
"17635801","2443357","2013-07-14 01:42:02","1","2379","<eclipse><git><namespaces><git-submodules>","How to include a git submodule into a project?","<p>So I have a git repository for a few related Java classes with a folder structure similar to this:  </p>

<pre><code>mylib/LICENSE  
mylib/README  
mylib/src/file1.java  
mylib/src/file2.java  
mylib/test/tester.java  
...
</code></pre>

<p>Now, I'm creating an Android app in Eclipse with the traditional folder structure like:  </p>

<pre><code>repo/AndroidManifest.xml  
repo/bin/*****  
repo/res/*****  
repo/src/com/mysite/project/activity1.java  
...
</code></pre>

<p>Now, I'd like to add the java classes to my android project in the folder:  </p>

<pre><code>repo/src/com/mysite/mylib/file1.java
</code></pre>

<p>However, if I add it as a git submodule, they are saved to the path:  </p>

<pre><code>repo/src/com/mysite/mylib/src/file1.java
</code></pre>

<p>Also, included is the tester.java, and some other files I don't want in the Android project.</p>

<p>What is the best way to resolve this? Should I just leave the path as <code>com/mysite/mylib/src/file1.java</code>? Or should I modify the repo and move the files from <code>mylib/src</code> up into <code>mylib</code> and delete the files I don't want?</p>
","0","2443357","0","0"
"17678566","2587660","2013-07-16 13:58:17","0","522","<git><git-submodules><gitosis>","gitosis clone submodule .git directory missing","<p>When cloning submodules from a gitosis repo, I got all files except for the .git directory. .git directory is missing. Instead, I got a single .git file. I use git submodule init and git submodule update to clone submodules. How can I get .git directory?</p>
","0","2587660","",""
"34283199","709683","2015-12-15 07:21:28","2","322","<git><git-submodules>","git submodule add only pick latest Commit","<p>I have a project that depends on other projects so I use git submodule.<br>
But my project is only interested with latest commit, I don't want all of the commits back to the beginning.</p>

<p>For example <a href=""https://github.com/openssl/openssl/archive/master.zip"" rel=""nofollow"">openssl zip</a> is 6.6MB but cloning repo is 71.76MB.<br>
I want only the 6.6MB but with advantage of git submodule.</p>

<p>Is there a way out?</p>
","0","709683","0","0"
"17792336","2607505","2013-07-22 16:07:42","3","1476","<git><merge><branch><git-submodules>","Does git change submodule reference when switching branch","<p>here is the situation i faced.
I have a repo containing a submodule. In the repo, i created a new branch to do some editing. </p>

<p>Then i found out i need an updated submodule, so i pulled down the submodule and kept working. 
I made a commit afterward, and merge the branch back to the master branch. </p>

<p>In the master branch, when i use ""git submodule update"", the submodule points back to an old version, but not to the updated one in the branch :(</p>

<p>I am wondering if git merges submodules reference? Can anyone help me?</p>
","0","2607505","0","0"
"57596616","241677","2019-08-21 17:32:46","0","187","<git><gitlab><gitlab-ci><git-submodules>","gitlab submodule foreach push to create","<p>Gitlab provides this method to push a new project directly to gitlab, without having to initialise it on the web-gui first. The following command works great:</p>

<pre><code>git push --set-upstream git@my.gitlab.com:username/project-name.git master
</code></pre>

<p>I would like to do the same thing, but iterating over all submodules inside the new project. I’m trying to get the following command with submodule foreach to do that:</p>

<pre><code>git submodule foreach --recursive 'sudo git push --set-upstream https://my.gitlab.com/namespace/$project-name.git master'
</code></pre>

<p>But it fails like this:</p>

<pre><code>Entering 'sub-repo-1'
&gt; GitLab: The project you were looking for could not be found.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Stopping at 'sub-repo-1'; script returned non-zero status.
</code></pre>

<p>In my use case, I have a project tree containing hundreds of submodules that I would like to push to gitlab. Eventually, I’d like to integrate that into a CI workflow, but first things first.</p>

<p>Any ideas why submodule foreach push-to-create doesn’t work on gitlab CI?</p>
","0","241677","",""
"34354959","865443","2015-12-18 11:45:24","4","2290","<git><git-submodules>","Error on git submodule update --init","<p>I have a main repository with several <code>git submodule</code>s.</p>

<p>Lately I came about a new error which I cannot resolve:</p>

<pre><code>fatal: Could not switch to '~/git': No such file or directory
Clone of '~/git/MyModule_A.git' into submodule path '.modman/MyModule_A' failed
</code></pre>

<h3>What I'm doing</h3>

<p>First, I clone the main repo as usual: <code>git clone /path/to/the/bare/repo.git src</code></p>

<p>Then, I run <code>git submodule update --init</code> which does correctly register all submodules and they are added to the <code>.git/config</code>.</p>

<pre><code>Submodule '.modman/MyModule_A' (~/git/MyModule_A.git) registered for path '.modman/MyModule_A'
Submodule '.modman/MyModule_B' (~/git/MyModule_B.git) registered for path '.modman/MyModule_B'
Submodule '.modman/MyModule_C' (~/git/MyModule_C.git) registered for path '.modman/MyModule_C'
fatal: Could not switch to '~/git': No such file or directory
Clone of '~/git/MyModule_A.git' into submodule path '.modman/MyModule_A' failed
</code></pre>

<h3>What I have tried so far</h3>

<ul>
<li>Removing <code>MyModule_A</code> submodule from the <code>.gitmodules</code> but then the error continues in <code>MyModule_B</code>, <code>MyModule_B</code> and so on.</li>
<li>Manually cloning <code>~/git/MyModule_A.git</code> into another folder outside the repo which is working fine.</li>
<li>Checking file permissions which seem to be correct.</li>
<li>Checking entries in <code>.gitmodules</code> for wrong paths, urls or any syntax problems which is not the case. </li>
</ul>
","0","865443","",""
"19710063","2941863","2013-10-31 15:06:19","2","500","<git><proxy><git-submodules><intranet>","Git - How do I set the gitproxy, to use no proxy for the intranet and to use a proxy for the rest","<p>I am using Git over an intranet. So, to access the intranet's repositories, I do not need a proxy. To access remote sub modules, I need to go through a proxy.</p>

<p>I can not use the gitconfig global _proxy settings ( _proxy = my.proxy.address ). If I set the proxy globally, I can't access the intranet.</p>

<p>My current approach is to use gitproxy entries under [core].</p>

<pre><code>gitproxy = none for my.intranet.address
gitproxy = my.proxy.address
</code></pre>

<p>But that does not work. For now I am out of Ideas.</p>

<p>o What am I doing wrong?<br>
o Is there an easier way?</p>

<p>Kudos in advance. \o/ \o/</p>
","0","2941863","0","0"
"19728933","480807","2013-11-01 14:38:04","70","38524","<git><bash><git-submodules>","Continue looping over submodules with the ""git submodule foreach"" command after a non-zero exit","<p>I have a project that contains many submodules. I want to loop over each submodule with the following command:</p>

<p><code>git submodule foreach npm install</code></p>

<p>And I want the script to continue looping over each submodule even if one submodule returns an error (non zero return code). Currently, a non-zero return code from running this command in any submodule will cause git to stop looping over the remaining submodules.</p>

<p>Any recommendations on how to accomplish this?</p>
","1","480807","0","0"
"17847892","231245","2013-07-25 02:13:39","9","1880","<git><github><git-submodules>","Download git submodules for tarball","<p>Is it possible to download submodules for a repository with only the working directory?</p>

<p>If I download a tarball of a repository from GitHub, that is equivalent to a shallow clone without the <code>.git</code> folder, is it at all possible to ""download"" the submodules into the working directory?</p>

<p>I tried <code>git init &amp;&amp; git submodule update --init</code>, but this neither initializes nor does it update the submodules. The <code>.gitmodules</code> file is in the current directory.</p>

<p><strong>Update</strong>: Some more background on the question: We'd like to use tarballs for checking out repositories at <a href=""https://travis-ci.org"" rel=""noreferrer"">Travis CI</a>, but several people use git submodules. ""Don't use Git submodules"" would therefore not be a good answer, but the answer doesn't really have to be something maintainable either. I just want a folder that has the code checked out and with the submodules initialized, there's no need for anything that allows me to pull down more changes later.</p>
","4","231245","0","0"
"57801899","997704","2019-09-05 08:58:26","1","1451","<git><git-submodules>","How to always track master branch of git submodule?","<p>I am relatively new to git submodules.</p>

<p>I know that parent repo tracks particular commit of submodule so I make a change in my submodule I have to explicitly update the commit id and push it to server. I feel this is a burden on me as a developer. </p>

<p>How do tell git to always track master branch of my submodule? I have already set up repo and added submodule.</p>
","6","997704","",""
"57874532","2208672","2019-09-10 16:06:06","1","259","<git><git-submodules><git-checkout>","git checkout takes too long ""Checking out submodules""","<p>Every time i do a ""git checkout "", it takes at least 90 secs to switch to a branch. It used to take less than a second. I see the message ""Checking out submodules"" and it takes a while to get out of that. How do I fix this please ?
Any help appreciated.</p>

<p>Tried re-installing git. But no change.</p>
","4","2208672","0","0"
"50969965","3834415","2018-06-21 13:36:33","1","662","<git><github><git-submodules>","Github: git submodule update hangs, does not clone","<p>I run, on linux: </p>

<pre><code>git clone https:// ... /my_project.git
cd my_project
git submodule init
git submodule update
</code></pre>

<p>And it updates fine. </p>

<p>I run, on mac: </p>

<pre><code>git clone https://.../my_project.git
cd my_project
git submodule init
git submodule update
</code></pre>

<p>And it hangs indefinitely.  </p>

<p>Then I check out the same modules as stand alone projects: </p>

<pre><code>git clone https://.../the_submodule.git
</code></pre>

<p>And I get a normal clone. </p>

<p>I see this issue pop up a lot, but there seems to be no clear answer.  Git does not fail to clone with any error message during submodule update, it just tries for a few minutes, clones nothing, and moves on to the next submodule. </p>
","1","3834415","",""
"24870265","1795026","2014-07-21 16:40:35","0","124","<git><git-submodules><git-commit><git-cherry-pick>","How to update specific directory on a git repository?","<p>I have two repository, one is a bit outdated, but I use both during the development. (It has historical reason to do so, but it doesn't matter.)</p>

<p>I have a sub-directory which is an almost independent part of the project, a small application. I would like to update only this tool's directory from the newer repo. Practically, I need the same version from this application in the top of both repo.</p>

<p>Is there any way to move only the application related commits to the other repository?</p>

<p>The commits are not in a ""straight line"", I had tons of commits and some of them were patch for this application.</p>

<p>Maybe somehow with cherry-pick?</p>
","0","1795026","",""
"7500741","517418","2011-09-21 13:40:05","22","14138","<git><git-submodules><git-tag>","Can git submodule update be made to fetch tags in submodules?","<p>I have a git repository which uses a submodule which I'd like to point at an annotated tag, but when I do <code>git submodule update</code> new tags don't get fetched. I can get new tags in the submodule by cd-ing into the submodule and doing a <code>git fetch --tags</code> there, but I'd really like to do all of this from the outside as it's scripted.</p>

<p>I can't find anything in the git documentation suggesting a way to get <code>git submodule update</code> to include tags (my git version is 1.7.3.5).</p>

<p>Obviously there is another possibility - to point the submodule at the commit which the tag points to rather than the tag itself, but this doesn't seem as neat.</p>

<p>Is there a way of getting <code>git submodule update</code> to include tags?</p>
","0","517418","0","0"
"68566262","6126726","2021-07-28 19:19:04","0","49","<git><macos><encoding><git-submodules>","Editing .git/config file filled with special characters","<p>I'm working with submodules in a repository and it's created a number of strange issues that I've never dealt with while working with git before.</p>
<p>When attempting to add a submodule to a directory (that has existed in that directory in the past), I'm getting an <code>A git directory for 'auth' is found locally with remote(s):</code> error.</p>
<p>I have already</p>
<ol>
<li>Removed the submodule details from my <code>.gitmodules</code> file</li>
<li>Removed the submodule from <code>.git/modules</code></li>
<li>Done a <code>git rm</code> and <code>git rm --cached</code> and a standard <code>rm -rf</code> to that directory. (to which all fail, because that folder does not exist in git or on my file structure).</li>
</ol>
<p>After some research, I was pointed in the direction of editing my <code>.git/config</code> file and removing the submodule from there. I open the file and alas, it most definitely is being mentioned in there... however, everyone online just nonchalantly says &quot;Edit your <code>.git/config</code> file&quot;, but mine is riddled with special characters (I'm opening it in UTF-8) and I can't seem to find anything online about &quot;local git repo .git config file being filled with special characters&quot;.</p>
<p>Here is an example of the <code>.git/config</code> file:</p>
<pre><code>�?�ΧeXbB:
</code></pre>
<p>The even more odd part is that all of the paths are perfectly legible, it just seems like all meta values are not.</p>
<p>For example</p>
<pre><code>�auth/src
</code></pre>
","4","6126726","",""
"33361039","1509241","2015-10-27 06:14:30","0","70","<git><git-submodules>","pul git code to get new submodules","<p>I'm using git with bitbucket.
I added some new submodules to git on my server with this command:
git submodule add --name   
This did the job, then I pushed it to the bitbucket and it all looks good.
But when I try to pull the changes from another server things are going wrong.
from the other server I run:
git pull and git submodule update, I get the changes in .gitmodule and it creates the folders of the submodule in the right place but they are empty!!!.
I can't go in to every empty submodule and run pull from the folder because I don't always know what submodule are added(sometimes other developers add them.)
I tried to add git submodule init before I run git submodule update but this didn't help. </p>
","2","1509241","0","0"
"69466210","15704972","2021-10-06 13:00:48","0","75","<git><git-submodules>","Git submodule suddenly no longer recognized as valid repo, some files in .git/modules/[submodule] missing","<p>I've been having a similar issue as <a href=""https://stackoverflow.com/questions/50747382/existing-git-repo-no-longer-recognized-as-a-valid-repository"">this question</a>, and it likewise seems to have appeared suddenly; however, for me it seems to happen due to a submodule - the error I'm getting on running <code>git status</code> in the main project is</p>
<pre><code>fatal: not a git repository: [submodule]/../.git/modules/[submodule]
</code></pre>
<p>When I tried to check whether something had happened to the paths in <code>[submodule]/.git</code> or <code>.git/modules/[submodule]/config</code> as suggested in <a href=""https://stackoverflow.com/a/13893585/15704972"">this answer to a similar question</a>, I found that the latter didn't exist, and more was missing. Specifically, for me the only contents of <code>.git/modules/[submodule]</code> are the <code>refs</code> and <code>objects</code> dirs and <code>packed-refs</code>.</p>
<p>I've tried to add a HEAD as suggested in <a href=""https://stackoverflow.com/questions/50747382/existing-git-repo-no-longer-recognized-as-a-valid-repository#comment88503270_50747382"">a comment on the first question</a> but can't quite work out what to put as <code>ref</code> - a simple <code>refs/heads/foo</code> (where <code>heads/foo</code> exists in the <code>refs</code> dir in <code>.git/modules/[submodule]</code>, I checked that much) fails with</p>
<pre><code>fatal: bad object HEAD
fatal: 'git status --porcelain=2' failed in submodule
</code></pre>
<p>and trying to point it at <code>[submodule]../.git/modules/[submodule]/refs/heads/foo</code> only gives me the original error. Can I get back to a usable submodule, and if so, how? For the submodule, there fortunately is a remote repo with all the changes, ditto for <em>most</em> of the main project (I was in the middle of trying out something I hadn't tracked just yet, so would prefer not having to nuke it...).</p>
","2","15704972","",""
"35556157","48062","2016-02-22 14:27:24","6","2294","<git><github><git-submodules><ios-frameworks><carthage>","git submodules defined by Carthage not being fetched","<p>I have used Carthage to import several frameworks as git submodules. For reference the repo is available on <a href=""https://github.com/maximveksler/IKnowKungFu"" rel=""noreferrer"">github</a>.</p>

<p>Carthage created a mix of configurations resulting in failure of building freshly cloned copy:</p>

<pre><code>➜  IKnowKungFu git:(master) carthage update
*** Fetching Nimble
*** Fetching Quick
*** Fetching CleanroomLogger
*** Fetching CleanroomASL
Parse error: expected submodule commit SHA in output of task (ls-tree -z HEAD Carthage/Checkouts/CleanroomLogger) but encountered:
</code></pre>

<p>Fresh clone of the repo gives the following:</p>

<ul>
<li><code>Carthage/Checkouts/Nimble</code> and </li>
<li><code>Carthage/Checkouts/Quick</code> </li>
</ul>

<p>exist but are empty folders. </p>

<p>After running <code>git submodule update --init --recursive</code>:</p>

<ul>
<li><code>Carthage/Checkouts/Nimble</code> and </li>
<li><code>Carthage/Checkouts/Quick</code> and</li>
<li><code>Carthage/Checkouts/Quick/Externals/Nimble</code> </li>
</ul>

<p>are checked out. Yet no memory of:</p>

<ul>
<li><code>Carthage/Checkouts/CleanroomASL</code> and</li>
<li><code>Carthage/Checkouts/CleanroomLogger</code> </li>
</ul>

<p><strong>Cartfile</strong></p>

<pre><code>➜  IKnowKungFu git:(master) cat Cartfile
github ""emaloney/CleanroomLogger""
</code></pre>

<p><strong>Cartfile.private</strong></p>

<pre><code>➜  IKnowKungFu git:(master) cat Cartfile.private
github ""Quick/Quick""
github ""Quick/Nimble""
</code></pre>

<p><strong>.gitmodules</strong></p>

<pre><code>➜  IKnowKungFu git:(master) cat .gitmodules
[submodule ""Carthage/Checkouts/CleanroomASL""]
    url = https://github.com/emaloney/CleanroomASL.git
[submodule ""Carthage/Checkouts/CleanroomLogger""]
    path = Carthage/Checkouts/CleanroomLogger
    url = https://github.com/emaloney/CleanroomLogger.git
[submodule ""Carthage/Checkouts/Nimble""]
    path = Carthage/Checkouts/Nimble
    url = https://github.com/Quick/Nimble.git
[submodule ""Carthage/Checkouts/Quick""]
    path = Carthage/Checkouts/Quick
    url = https://github.com/Quick/Quick.git
</code></pre>

<p><strong>.gitignore</strong></p>

<pre><code>➜  IKnowKungFu git:(master) cat .gitignore
###
### https://github.com/github/gitignore/blob/master/Swift.gitignore
###

# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore &amp; Swift.gitignore

## Build generated
build/
DerivedData/

## Various settings
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/

## Other
*.moved-aside
*.xccheckout
*.xcscmblueprint

## Obj-C/Swift specific
*.hmap
*.ipa

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
Carthage/Checkouts

Carthage/Build

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://github.com/fastlane/fastlane/blob/master/docs/Gitignore.md

fastlane/report.xml
fastlane/screenshots


###
### https://github.com/github/gitignore/blob/master/Global/OSX.gitignore
###

.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk
</code></pre>

<h3>Update 1</h3>

<p>Further research show Carthage updated the .gitmodules entries for <code>Carthage/Checkouts/CleanroomASL</code> and <code>Carthage/Checkouts/CleanroomLogger</code> but did failed to create the <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""noreferrer"">160000</a> directory pointers to allow cloning the submodules. </p>

<p>Nothing that I do seems to be able to resolve this. Including </p>

<ul>
<li>manually removing the Cleanroom entries from .gitmodules</li>
<li>wiping the local Carthage folder </li>
<li><code>rm -rf ~/Library/Caches/org.carthage.CarthageKit</code> </li>
</ul>

<p>I'm clueless about how to fix this.</p>

<h3>Update 2</h3>

<p>Filed a bug report <a href=""https://github.com/Carthage/Carthage/issues/1146"" rel=""noreferrer"">https://github.com/Carthage/Carthage/issues/1146</a> </p>
","5","48062","0","0"
"19301188","2867931","2013-10-10 16:23:12","2","286","<git><git-submodules>","Creating a local git mirror from a supergit","<p>I'm currently working on this supergit (a git repo with submodules) located in the USA that takes around 40 minutes to clone.
The need has arise to create a local mirror of that repo in order to reduce the cloning time.
Paths of the submodules are relative to the supergit and there are multiple branches, some having more submodules than others.</p>

<p>I made a script that parses all submodules and their relative paths and clones each submodule into the correct place but that works only for one branch (I have to repeat this for every branch an that's where I became stuck).</p>

<p>Is there a way to clone this supergit in a clean way?</p>
","2","2867931","0","0"
"69485652","12125479","2021-10-07 17:46:31","1","556","<c++><git><git-submodules>","Including header files pulled as a git submodule in a C++ file","<p>I've got some C++ code that depends on a submodule pulled from Git. The files are being developed as an Arduino library, and the submodule dependency is also an Arduino library. Both are compiled through the stable version of the Arduino IDE (1.8.16). The submodule's header file is nested within a few folders. Looking at how C++'s <code>#include</code> works, it seems as if there is no way to include a header file that isn't defined as a part of the include path or within the same folder as my own C++ file. I was previously putting the submodule's code in the IDE-defined include path to test other parts of the code, but this will not work when the repository is pulled to another computer. I don't believe I can change the path of the submodule in Git, and I do not believe it a good idea to put my own files in the submodule's folder. Is there some way to handle this within a Git repository such that the file inclusion will work on any other computer that pulls the repo without the need for any extra setup?</p>
<p>Here's how all of the mentioned files are currently set up (these are not the actual file names):</p>
<pre><code>ProjectFolder
+-- MyFile.cpp
+-- MyFile.h
+-- AFolder
|   +-- AnotherFolder
|   |   +-- SubModule.cpp
|   |   +-- SubModule.h
</code></pre>
","2","12125479","",""
"51136591","838355","2018-07-02 12:46:25","3","1166","<git><version-control><git-submodules>","git submodule showing up as a file in git status","<p>I added a submodule and when I run git status it shows up as a file</p>

<pre><code>Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    new file:   mysubmodule
</code></pre>

<p>should I commit this or add it to the .ignore file ?</p>
","1","838355","",""
"19403138","1128932","2013-10-16 12:16:00","2","5485","<capistrano><git-submodules>","capistrano v3 deploy git repository and its submodules","<p>With capistrano v2 submodules can be includes in the deploy by using option:</p>

<pre><code>set :git_enable_submodules, 1
</code></pre>

<p>In v3 this does not seem to work. Is this option still supported or is there a new way to reach the same goal?</p>
","0","1128932","0","0"
"39898261","824434","2016-10-06 14:08:33","1","585","<git><sh><git-submodules><git-config>","commit inside git submodule foreach","<p>I have a git repository that has a submodule. Generally I'm committing the repo and submodule with the same commit message. Currently when I want to commit my repo and submodule, I'm doing the following:</p>

<pre><code>cd submodule
git add --all
git commit -m ""message""
git push
cd ..
git add --all
git commit -m ""message""
git push
</code></pre>

<p>I would like an alias that allows me to do this with a single command e.g. </p>

<pre><code>git commit-including-submodule ""blah""
</code></pre>

<p>Sounds simple, but I'm having a few issues with the alias. The closest I've got is the following:</p>

<pre><code>[alias]
   commit-including-submodule = ""!f() { \
         if [ -u $1 ]; then \
            echo ""commit message required""; \
         else \
            git submodule foreach 'git add --all &amp;&amp; git commit -m \""$1\""'; \
            git add --all &amp;&amp; git commit -m $1; \
            echo ""success""; \
         fi; \
       }; f""
</code></pre>

<p>However the commit message in the submodule is</p>

<blockquote>
  <p>git add --all &amp;&amp; git commit -m ""$1""</p>
</blockquote>

<p>Yes that is the actual commit message, which seems a bit odd. I haven't been able to figure this out. Can anyone please help?</p>

<p>Thanks.</p>
","0","824434","",""
"19436845","106906","2013-10-17 20:41:06","0","228","<database><git><development-environment><git-submodules>","Are git submodules a good solution for storing a large DB dump?","<p>I.e., we have a 20MB bzip2 sql file of development data that we'd like to have versioned along with our development code.</p>

<p>However, we don't want this file pulled down from the repo by default with every fresh clone/fetch.</p>

<p>One solution seems to be storing this large file in a separate repo and then link to it with a submodule. Then, a developer would fetch the db file only when they need to retrieve and reset their development database. And then, when there's a schema change, the database file would be updated, committed to the external repo, and the submodule updated. </p>

<p>Is this a good development workflow? Or is there a better way of doing this?</p>

<p>EDIT: The uncompressed SQL dump is 360MB.</p>

<p>EDIT: Github says ""no"", don't do this:</p>

<blockquote>
  <p><strong>Database dumps</strong></p>
  
  <p>Large SQL files do not play well with version control systems such as
  Git. If you are looking to provide your developers with the most
  recent production dataset, we recommend using Dropbox for sharing
  files like these among your developers.</p>
</blockquote>
","2","106906","",""
"51162711","1892636","2018-07-03 20:56:34","0","284","<git><travis-ci><git-submodules>","Run travis build for last commit of git submodule","<p>I have git repository with a submodule included. However, whenever I made a commit in the submodule it is not impacted on Travis. </p>

<p>It is always executed on an old version of the submodule.
This is what I get (hiding real data):</p>

<pre><code>git submodule update --init --recursive
Submodule 'mysubmodule' (https://github.com/xxxxx/myproject.git) registered for path 'somepath'
Cloning into '/home/travis/build/somepath'...
Submodule path 'somepath': checked out '01234567890abcdef':
</code></pre>

<p>Where <code>01234567890abcdef</code> is an old commit, it is not the last one pushed.</p>
","1","1892636","",""
"43286553","3002699","2017-04-07 20:24:00","0","422","<git><github><symlink><git-submodules>","Can a git submodule be restricted to a single resource?","<p>There are two complex projects and my newly created one, for the sake of simplicity all hosted on Github, say</p>

<ul>
<li><code>https://github.com/vendor/asset/</code>,</li>
<li><code>https://github.com/standard/metadata/</code> and</li>
<li><code>https://github.com/me/mashup/</code>.</li>
</ul>

<p>Within my project, I only need a single subtree from the first repository (i.e. a folder and all files in it), say <code>./assets/img/</code>, and a single file from the second one (each from their main branch), say <code>./data/names.json</code>. Both will be updated from time to time.</p>

<p>As far as I understand the documentation on the <a href=""https://git-scm.com/docs/gitmodules"" rel=""nofollow noreferrer"">.gitmodules</a> file and the <a href=""https://git-scm.com/docs/git-submodule"" rel=""nofollow noreferrer"">git submodule</a> command, there is no way to directly achieve this. That means the following (or something like it) won't work:</p>

<pre><code>[submodule ""assets""]
  path = images/vendor
  url = git://github.com/vendor/asset.git:/assets/img/

[submodule ""metadata""]
  path = standard-names.json
  url = git://github.com/standard/metadata.git:/data/names.json
</code></pre>

<p>What is the best practice here? Can I put the submodules in a hidden folder and create symlinks in the places I want?</p>

<pre><code>images/vendor       -&gt; .ext/vendor/assets/img/
standard-names.json -&gt; .ext/standard/data/names.json
</code></pre>
","0","3002699","",""
"6589391","348081","2011-07-05 22:03:27","7","9087","<git><git-submodules>","git add remote in submodule","<p>the .gitmodule file have the list of submodule url and path, similar to this </p>

<pre><code>[submodule "".vim/bundle/subRepo""]
    path = .vim/bundle/subRepo
    url = https://git.com/sub/repo
</code></pre>

<p>and in the .git/config of core repo have list of remotes </p>

<pre><code>[remote ""origin""]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = git@otherRepo.com
</code></pre>

<p>when </p>

<pre><code> git submodule init
 git submodule update
</code></pre>

<p>I get the submodules.</p>

<p>how add one time the list of remotes in a submodule ?
for not write everytime</p>

<pre><code>git remote add remoteAlias git://... 
</code></pre>

<p>in each submodule </p>
","0","348081","0","0"
"51215154","1349754","2018-07-06 17:22:16","0","365","<git><repository><git-submodules><git-subtree>","Is it possible to keep several git repositories under ""umbrella"" one?","<p>Here is situation:</p>

<pre><code># Want this folder to be ""umbrella"" in order not to spawn 
# a lot of github repos later on (you can consider it 
# dotfiles-like repository with a lot of remotely pulled 
# projects where each should be occasionally updated 
# and ""custom"" patches applied) 
mytoolbox/
  .git/
  proj1/ 
    .git/
    ..
  proj2/
    .git/
    ..
  proj3/
    .git/
    ..
  file1
  file2
  ..
</code></pre>

<p>After some googling I stambled upon <code>git submodule</code> and <code>subtrees</code>. The first one seems like just keep tracking the last commit and reference to the remote (list of links without actual content under <code>.gitmodules</code>). And - after several attempts - I didn't get the idea of the second one if it fits my purposes. May be someone can suggest a better solution in general. 
<em>Frankly speaking, a while ago I used Dropbox for this purpose :)</em></p>
","1","1349754","0","0"
"26951252","3959480","2014-11-15 22:04:06","21","26960","<git><visual-studio><visual-studio-2013><git-submodules>","Workflow for using git submodules in Visual Studio","<p><em>I have some shared code I want to share among a number of solutions.</em> Most examples use the command line, but I want to do it using Visual Studio 2013 (and/or TortoiseGit)?</p>

<pre><code>- SolutionShared
  - .git
  - Project1Shared
  - Project2Shared
- Solution1
  - .git
  - ProjectFoo
  - ProjectBar
  - [SolutionShared]
    - [Project1Shared]
    - [Project2Shared]
- Solution2
  - .git
  - ProjectBaz
  - ProjectQux
  - [SolutionShared]
    - [Project1Shared]
    - [Project2Shared]
</code></pre>

<p>What I did was to create a new solution <code>SolutionShared</code>, add all my shared code there, and add it to its own git repo. I then used TortoiseGit (as I couldn't figure out how to do it Visual Studio) to add that shared repo as a git submodule to <code>Solution1</code> and <code>Solution2</code>.</p>

<p><strong>1. What do I do in Visual Studio?</strong><br>
My two solutions now have a <code>SolutionShared</code> directory. Do I simply add its two child projects (<code>Project1Shared</code> and <code>Project2Shared</code>) in Visual Studio?</p>

<p><strong>2. How do I make changes to the shared code from within the non-shared projects</strong><br>
If I'm in one of the non-shared solutions and make a change to something in the submodule, how do I commit and push it back to the shared solution's repo (<code>SolutionShared</code>) so that it's available to all solutions that reference it?</p>
","0","3959480","0","0"
"64199980","14390844","2020-10-04 21:16:10","0","1737","<git><git-submodules>","Local git config in git submodule","<p>My repository structure:</p>
<pre><code>repo_a
└── repo_b
    └── .gitconfig
</code></pre>
<p><code>repo_b</code> is a submodule.<br />
<code>.gitconfig</code>:</p>
<pre><code>[alias]
    b = branch
</code></pre>
<p>How can I add the path of <code>.gitconfig</code> such that only <code>repo_b</code> can use it?</p>
<p>Expected output:</p>
<pre><code>$ cd repo_a
$ git b
git: 'b' is not a git command. See 'git --help'.
$ cd repo_b
$ git b
* master
</code></pre>
<p>Edit #1:</p>
<p>The answers from @jthill and @bk2204 are good.<br />
They describe how to access the config file for the submodule using:</p>
<pre><code>git rev-parse --git-path config
</code></pre>
<p>I want to specify what I want.<br />
I want the changes in the <code>.gitconfig</code> file in <code>repo_b</code> to be tracked by git. Such that when cloning only <code>repo_b</code> I would also have access to the same <code>.gitconfig</code>.<br />
The solution from @jthill does seem possible. However, it does also seem quite error-prone, and I would have to add a hook for every single change in git that might change the <code>.gitconfig</code>. Such as <code>git pull</code>, <code>git checkout</code>, <code>git merge</code>.</p>
<p>Thus my question would have 2 parts:</p>
<ol>
<li>How can I both track changes for <code>repo/.gitconfig</code> and use it as a local config file?</li>
<li>How can I implement said functionality for both a normal repo and within a submodule?</li>
</ol>
","0","14390844","0","0"
"51290136","10065913","2018-07-11 16:17:46","8","3652","<git><rust><git-submodules><rust-cargo>","How to use relative git submodule paths in Cargo?","<p>I've done a MuPDF binding for Rust and I want to import it as a crate from its git repository.</p>

<p>My Cargo.toml file is something like this:</p>

<pre><code>[package]
name = ""package_name""
version = ""0.1.0""
authors = [""me""]

[dependencies]
mupdf-sys = {git = ""https://github.com/bruno-sm/mupdf-sys.git""}
</code></pre>

<p>The problem is that MuPDF stores its third party libraries as git submodules with relative paths. Here is an extract of the .gitmodules file:</p>

<pre class=""lang-none prettyprint-override""><code>[submodule ""thirdparty/jbig2dec""]
    path = thirdparty/jbig2dec
    url = ../jbig2dec.git
[submodule ""thirdparty/mujs""]
    path = thirdparty/mujs
    url = ../mujs.git
</code></pre>

<p>When I run <code>cargo build</code> I get the following error</p>

<pre class=""lang-none prettyprint-override""><code>Updating git repository `https://github.com/bruno-sm/mupdf-sys`
error: failed to load source for a dependency on `mupdf-sys`                     

Caused by:
  Unable to update https://github.com/bruno-sm/mupdf-sys

Caused by:
  failed to update submodule `mupdf`

Caused by:
  failed to update submodule `thirdparty/curl`

Caused by:
  invalid url `../thirdparty-curl.git`: relative URL without a base
</code></pre>

<p>This suggests that the base URL for the MuPDF repository is not specified, however it is in the file <code>.git/modules/mupdf/config</code></p>

<pre class=""lang-none prettyprint-override""><code>[remote ""origin""]
url = git://git.ghostscript.com/mupdf.git
fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>There is no problem cloning the repository with <code>git clone --recursive https://github.com/bruno-sm/mupdf-sys</code>, so I don't know where the problem can be.</p>

<p>To reproduce the error you have to create a new project with <code>cargo new project_name</code>, add</p>

<pre><code>[dependencies]
mupdf-sys = {git = ""https://github.com/bruno-sm/mupdf-sys.git""}
</code></pre>

<p>to the Cargo.toml file and run <code>cargo build</code>.</p>

<p>To see the contents of the MuPDF repository you can use <code>git clone --recursive git://git.ghostscript.com/mupdf.git</code></p>
","4","10065913","0","0"
"66793475","15475163","2021-03-25 05:15:15","4","533","<ios><frameworks><git-submodules><clean-architecture>","How to import an iOS framework as a git submodule, when the framework has external dependencies","<p>You have the main Project &quot;App&quot; with its own Git repo; you separate out the model into a separate framework project &quot;AppKit&quot; again with its own Git repo. &quot;AppKit&quot; is imported into &quot;App&quot; as a Git submodule &amp; everything is merry.</p>
<p>If &quot;AppKit&quot; has external dependencies -- let's say managed by CocoaPods, the typical import-as-submodule fails since &quot;AppKit&quot;s dependencies are not satisfied by the &quot;App&quot;.
I want to know if there is any way to achieve this while importing the &quot;AppKit&quot; as Git submodule. Can it be done?</p>
<p>I am aware there are several straightforward solutions to this -</p>
<ol>
<li>Make &quot;AppKit&quot; a &quot;Carthage&quot;able framework &amp; import it</li>
<li>Make &amp; import &quot;AppKit&quot; as a CocoaPod.</li>
</ol>
<p>I just wanted a definitive answer (in case it cannot be done as Git Submodule) so I can move on.</p>
<p>Context: Pursuit of the ideal solution to managing a multi-project App (so other ideas / opinions welcome)</p>
<p>Making the question clearer --</p>
<p>Can an iOS framework project be imported as a Git Submodule if it has dependencies of its own.
If the sub-dependencies are --</p>
<ol>
<li>Cocoapods</li>
<li>Carthage</li>
<li>Git submodule</li>
</ol>
","2","15475163","0","0"
"51321143","2426679","2018-07-13 08:43:23","1","304","<git><git-submodules>","Specify autocrlf For git submodule update","<p>When doing a clone, this can be set via:</p>

<p><code>git clone https://github.com/project/repo --config core.autocrlf=input</code></p>

<p>One would think that the <code>clone</code> option of <code>--recurse-submodules</code> would inherit from the <code>--config</code> value, but it is ignored.</p>

<p>How can a <code>git submodule update</code> be run with a defined value for <code>autocrlf</code>?</p>

<p>This should be done without modifying the global config setting.</p>
","3","2426679","0","0"
"69569595","799759","2021-10-14 11:04:35","0","286","<git><git-submodules>","how to undelete a folder that was a submodule removed via git rm","<p>I need to undelete a non-commited git rm of a folder that was showing as a submodule.</p>
<p>This is more complex than you might expect.</p>
<p>In my private repo on GitHub I found a submodule. This was unexpected. The GitHub project page showed the submodule as a folder with an arrow on it, but was not clickable.</p>
<p>locally there was a folder of the submodule's name and in it a .git folder. Indicating that it had been <code>git init</code> locally.</p>
<p>Locally I renamed the .git folder in the submodule folder and ran from the parent
<code>git rm -f folder</code></p>
<p>thinking it would get rid of the submodule and just leave me with the real folder which I can then <code>git add</code> back into the repo</p>
<p>but it deleted the folder locally and now none of the following commands seem to be able to get it back.
Remember, the folder that was listed as a submodule has never been committed to a git server. But the folder that it was in has.</p>
<p>Tried all of the following</p>
<pre><code>git reset HEAD folder
git add folder
git checkout -- folder
git reset HEAD folder/*
</code></pre>
<p>and updated git to 2.33.1 to also try</p>
<pre><code>git restore folder
git restore folder/*
</code></pre>
<p>and</p>
<pre><code>git status
</code></pre>
<p>currently shows</p>
<pre><code>On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

        deleted:    folder
</code></pre>
<p>.git/config has no reference to the submodule</p>
<p>Nothing I read in this thread helped
<a href=""https://stackoverflow.com/questions/30875205/restore-a-deleted-folder-in-a-git-repo/30875442"">Restore a deleted folder in a Git repo</a></p>
","5","799759","",""
"69569197","1520203","2021-10-14 10:35:36","2","282","<git><github><git-submodules>","git submodule not using specified branch","<p>I can't get submodules to checkout the correct branch, they always end up in a specific, old commit.</p>
<p>Example:
I have a repo which has 3 submodules, linked in the .gitmodules:</p>
<pre><code>[submodule &quot;repo-web&quot;]
    path = repo-web
    url = git@github.com:Project/repo-web.git
    branch = task/test_install
[submodule &quot;report-templates&quot;]
    path = report-templates
    url = git@github.com:Project/report-templates.git
    branch = master
[submodule &quot;Project-python&quot;]
    path = Project-python
    url = git@github.com:Project/Project-python.git
    branch = dev
</code></pre>
<p>When I do a fresh install of the repo and download the submodules by either</p>
<pre><code>git submodule update --init --recursive --remote
or
git clone --recursive https://github.com/Project/repo.git
</code></pre>
<p>the submodules seem to be linked to specific commit, all 3 of them alway end up with a detached head. Also, when I look at them at Github, they all have the format</p>
<pre><code>repo-web @ ce80174
</code></pre>
<p>which is the commit that they are linked to.</p>
<p>.git.config:</p>
<pre><code>[submodule &quot;repo-web&quot;]                                                                                                                                                                            
       url = git@github.com:Project/repo-web.git
</code></pre>
<p>How to get the correct branch?</p>
","3","1520203","",""
"69571254","10734452","2021-10-14 13:05:13","0","141","<bash><echo><git-submodules>","How to make 'echo -e' or 'printf' work in git submodule foreach?","<ul>
<li><code>echo -e &quot;\u001b[37;1mtest&quot;</code> outputs :</li>
</ul>
<blockquote>
<p><strong>test</strong></p>
</blockquote>
<ul>
<li><code>printf &quot;\u001b[37;1mtest&quot;</code> outputs:</li>
</ul>
<blockquote>
<p><strong>test</strong></p>
</blockquote>
<ul>
<li><code>git submodule foreach -q 'echo &quot;test&quot; '</code> outputs:</li>
</ul>
<blockquote>
<p>test <br />
test <br />
test</p>
</blockquote>
<ul>
<li><code>git submodule foreach -q 'echo -e &quot;\u001b[37;1mtest&quot; '</code> outputs:</li>
</ul>
<blockquote>
<p>-e &quot;\u001b[37;1mtest <br />
-e &quot;\u001b[37;1mtest <br />
-e &quot;\u001b[37;1mtest</p>
</blockquote>
<ul>
<li><code>git submodule foreach -q 'printf &quot;\u001b[37;1mtest\n&quot; '</code> outputs:</li>
</ul>
<blockquote>
<p>\u001b[37;1mtest <br />
\u001b[37;1mtest <br />
\u001b[37;1mtest</p>
</blockquote>
<p>How could I print with '\u001b[37;1m' ?</p>
","0","10734452","",""
"51337670","5515472","2018-07-14 10:41:20","1","378","<git><git-submodules>","Added wrong git submodule and cannot change its origin","<p>I have added a new submodule to my git super-project:</p>

<pre><code>git submodule add wrong-url project-directory
</code></pre>

<p>It was a wrong project, therefore I have removed it:</p>

<pre><code>git submodule deinit -f project-directory
</code></pre>

<p>I tried to add it using the right url:</p>

<pre><code>git submodule add right-url project-directory
</code></pre>

<p>Unfortunately it genrates an error: <code>already exists in the index</code>.</p>

<p>I found this to resolve the issue:
<a href=""https://stackoverflow.com/questions/12898278/issue-with-adding-common-code-as-git-submodule-already-exists-in-the-index?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa"">Issue with adding common code as git submodule: &quot;already exists in the index&quot;</a></p>

<p>Therefore, I run these commands:</p>

<pre><code>git rm --cached project-directory
git rm -r --cached project-directory
</code></pre>

<p>However, as it is stated <a href=""https://stackoverflow.com/questions/12898278/issue-with-adding-common-code-as-git-submodule-already-exists-in-the-index?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa#comment17486498_12902857"">in this comment</a>, I get the error message <code>project-directory already exists and is not a valid git repo</code>. Thus I have deleted the <code>project-directory</code>, and the <code>project-directory</code> is added successfully.</p>

<p>The problem is the contents are linked to the <code>wrong-url</code>.</p>

<p>I have edited the <code>.gitmodules</code> (in which the url was wrong) and the result was the same.</p>

<p>I have also changed the remote url using <code>git remote rm origin</code> and added the correct url using <code>git remote add right-url</code>, but it doesn help.</p>

<p>I am curious where this wrong-remote-url is stored, and how I can fix this?</p>
","0","5515472","",""
"51341375","731085","2018-07-14 16:36:52","4","559","<git><git-submodules>","git clone --recurse-submodules recording absolute paths for submodules","<p><code>git clone --recurse-submodules</code> is recording absolute paths for submodules. </p>

<p>That is, when I clone the parent directory, the value of <code>gitdir</code> in the .git folder of each submodule is recording the absolute path of the submodule, which makes it impossible for me to move the newly cloned directory without all the submodules becoming unusable. </p>

<p>In the original repo, where i first made the submodules the .git file looks like: </p>

<p><code>gitdir: ../../.git/modules/data/scta-codices</code></p>

<p>but after cloning into a new directory with 
git clone --recurse-submodules git@github.com:scta/scta-rdf.git the .git file looks like: </p>

<p><code>gitdir: /Users/username/Desktop/scta-rdf/.git/modules/data/scta-projectfiles</code></p>

<p>Any ideas of what's going wrong?</p>

<p>Here is what the .gitmodules file looks like in the parent directory: </p>

<pre><code>[submodule ""data/scta-projectfiles""]
    path = data/scta-projectfiles
    url = https://github.com/scta/scta-projectfiles
    branch = master
[submodule ""data/scta-codices""]
    path = data/scta-codices
    url = https://github.com/scta/scta-codices
    branch = master
[submodule ""data/scta-quotations""]
    path = data/scta-quotations
    url = https://github.com/scta/scta-quotations
    branch = master
[submodule ""data/lombardpress-lists""]
    path = data/lombardpress-lists
    url = https://github.com/lombardpress/lombardpress-lists
    branch = master
[submodule ""data/scta-rdf-schema""]
    path = data/scta-rdf-schema
    url = https://github.com/scta/scta-rdf-schema
    branch = master
[submodule ""data/scta-people""]
    path = data/scta-people
    url = https://github.com/scta/scta-people
    branch = master
</code></pre>
","3","731085","0","0"
"69194346","2516892","2021-09-15 13:41:05","1","207","<git><docker><docker-compose><git-submodules>","Why isn't it possible to set up a git repo including submodules in Docker?","<p>Is there a proper way to initialize a git-Repository and included sub-repositories inside a docker?</p>
<p>As I have spent several hours on this and couldn't find a solution I switched back to the setup by shell-scripts <em>outside</em> the docker.</p>
<p>The idea was to have a docker that takes care of downloading the repositories including the submodules and sets the branch to <em>stable</em>.
In order to access everything with the workdir is a volume mounted by docker-compose.</p>
<p>The first step is downloading the main Repo which has the Dockerfile and a yaml for docker-compose. Running it will initialize the rest.
The Dockerfile looked like this:</p>
<pre><code>WORKDIR /home/djangohome
COPY . /home/djangohome/
RUN git status
RUN git submodule init 
RUN git submodule update 
</code></pre>
<p>The output on starting the docker looked fine, no errors. Yet, every time I checked the content of the subrepos they were empty.</p>
<p>On the other hand if I just run:</p>
<pre><code>git submodule init 
git submodule update 
</code></pre>
<p>The output is the same, but it works.</p>
<p>I did some research on that, it seems others came to a similar result (<a href=""https://www.airpair.com/docker/posts/efficiant-development-workfow-using-git-submodules-and-docker-compose"" rel=""nofollow noreferrer"">https://www.airpair.com/docker/posts/efficiant-development-workfow-using-git-submodules-and-docker-compose</a>).</p>
<p>I still wonder why the result is despite it obviously doing <em>something</em> still just empty folders.</p>
","1","2516892","",""
"51354215","591831","2018-07-16 03:31:48","1","211","<git><tags><git-submodules>","git tag on parent repo doesn't show corresponding tagged version of submodules","<p>I have a parent repo and have a git submodule inside this repo from another repository. This submodule was created sometime back and has its old commit reference. It shows up in the parent repository as ""<strong>submodule-name @ 47b883bbcf4</strong>"" </p>

<p>Later post a release, I tagged this parent repository to 1.2.0 and also tagged the submodule (in its original repository) to 1.1.0.   But when I access the 1.2.0 tag  in parent repository and it is still pointing to the <strong>47b883bbcf4</strong> commit. How do I enforce it to point to 1.1.0 tag in the submodule's repository?</p>
","1","591831","0","0"
"51357079","2135069","2018-07-16 07:57:36","4","170","<git><docker><git-submodules>","Make git submodule independently usable from superproject","<p>I have a larger superproject with submodules, some submodules are supposed to build docker images, which I'd like to build independently from superproject. The problem is that git operations are failing within the docker build process because docker cuts the docker context on the level of subproject:</p>

<p><code>fatal: Not a git repository: ../.git/modules/&lt;submodule&gt;</code></p>

<p>The issue is basically that <code>&lt;submodule&gt;/.git</code> is available within the docker context, but <code>&lt;superproject&gt;/.git</code> is not. Hence, I need a submodule without reference to the superproject.
Now I'm looking for some sort of git-dir splitting mechanism for submodules. Basically the reverse of <a href=""https://git-scm.com/docs/git-submodule#git-submodule-absorbgitdirs"" rel=""nofollow noreferrer"" title=""git-submodule-absorbgitdirs"">git-submodule-absorbgitdirs</a>.</p>
","0","2135069","",""
"51406291","4059019","2018-07-18 15:53:05","0","129","<git><github><git-submodules><multiple-repositories>","store several git repos in one github repo","<p>I have several git repositories with separate histories (versionning, branches). I want :</p>

<ul>
<li>that these projects still have separate histories</li>
<li>to store them into a single github repository (in an existing organization)</li>
</ul>

<p>I've studied submodules, but I understood that if a single github repository has several submodules, each submodule still need to reference a main repository elsewhere, so it does not solve the problem.</p>

<p>Is there a way to do that ?</p>
","2","4059019","",""
"51414810","10103040","2018-07-19 05:15:38","0","2051","<git><git-submodules><gerrit>","Gerrit code review of git repo with submodules? Create a dependancy relationship in Gerrit?","<p>New with Git but have a background with Mercurial. Not sure if that helps here...</p>

<p>We have a git design repo with submodules used across a number of other designs. 
Their are users making changes in both the parent module and a submodule as a code update release. </p>

<p>We have methodology to in place to make sure submodule commits are done correctly to keep the parent module pointing to the correct change in the submodule.</p>

<p>The problem is when pushing the commits (parent module and submodule) to Gerrit (using git push origin HEAD:refs/for/$branch) for review we end up with two reviews. One for the parent module, and one for the submodule.</p>

<p>The parent module shows all it's file diffs/patch and then a reference to a change in the submodule with the change hash for the patch but nothing about the files that where modified there.</p>

<p>Is there a way to tie a dependency on the submodule change with the parent module change in Gerrit?  Insure that the parent module change review cannot be submitted/pushed unless the submodule change has also been reviewed ?</p>

<p>Thanks!
Mick</p>
","0","10103040","",""
"51415794","1688051","2018-07-19 06:31:52","11","2130","<git><maven><jenkins><gitlab><git-submodules>","How to manage multiple maven projects in gitlab","<p>We have multiple (about 75) maven projects, which we have pushed to Gitlab <strong>individually</strong> in following manner:<br>
GROUP1 - 4 projects<br>
GROUP2 - 2 projects<br>
GROUP3 - 10 Projects<br>
.<br>
.<br>
GROUP10 - 6 Projects</p>

<hr>

<p>We now want to implement CI tool like <code>Jenkins</code>. But creating and managing all 75 projects in jenkins individuality is very time consuming. So that we have 2 methods in mind.  </p>

<ol>
<li><strong><code>git submodules</code>:</strong> In this case we might get many complications, as individual developer is forking the multiple project and works in his forked repo.</li>
<li><strong>Single <code>git</code> Project:</strong> In this case if every developer will fork the main repo, then disk space required is much and the performance will also get degrade. But it will be better than <code>git submodules</code> to manage, as build can be simplified with maven <code>multiple module way</code>.   </li>
</ol>

<p>So according to you, is there any other approach we can think about, or can we go with <strong>Single git project</strong>?</p>
","0","1688051","0","0"
"51430278","7964568","2018-07-19 19:14:35","2","4441","<jenkins><jenkins-pipeline><git-submodules>","Shallow git submodule checkout using Jenkins","<p>I have no problem doing this using git commands, as in <a href=""https://stackoverflow.com/questions/6238590/set-git-submodule-to-shallow-clone-sparse-checkout"">Set Git submodule to shallow clone &amp; sparse checkout?</a> but I have a project using Jenkins and I'm using the checkout() function in the Groovy Pipeline syntax. I can't find any option to pass the --depth option to the git submodule update commands.</p>
","0","7964568","",""
"36646323","782564","2016-04-15 11:47:22","0","1359","<git><version-control><git-submodules>","Generate patch of uncommitted changes for git repo and submodules","<p>I have a git repo <code>foo</code> that has several submodules in their own folders <code>bar</code> and <code>baz</code> (the actual repo is eclipse.platform.releng.aggregator). I need to generate patches for changes to those repos. </p>

<p>I can generate a patch with <code>git --no-pager diff &gt; file.patch</code> which is fine for changes to <code>foo</code> but doesn't report changes in the <code>bar</code> or <code>baz</code>, the submodules.</p>

<p>Using <code>git submodule --quiet foreach --recursive git --no-pager diff &gt; file</code> (cribbed from <a href=""https://stackoverflow.com/a/13100667/1554850"">this answer</a>) nearly works but the diffs don't include the names of the folders the subrepos live in.</p>

<p>Presently I work round this by hacking the paths into the patches by hand but that only works for simple patches and the scripting solutions I can think of (e.g. getting the subrepo names from git, changing to the folders, generating the patches in folders) mean I can't use a simple <code>git apply</code> to reapply the patches later.</p>

<p>Is there a way to get git to diff the subrepos directly rather than through foreach so the generated patches can be simply applied?</p>
","2","782564","",""
"56730986","9917641","2019-06-24 06:34:21","6","2245","<import><path><protocol-buffers><code-generation><git-submodules>","How to organize multiple protocol buffer files in git submodule?","<p>I'm sharing .proto files across multiple projects using git-submodules. </p>

<p>Now my question is how to setup the imports properly?</p>

<p>In a microservice environment all service-repositories have a git-submodule containing the shared .proto files:</p>

<ul>
<li>git.dev/<strong>fooservice</strong>

<ul>
<li>proto (contains <code>git.dev/proto</code> as submodule)</li>
<li>... some java code</li>
</ul></li>
<li>git.dev/<strong>barservice</strong>

<ul>
<li>proto (contains <code>git.dev/proto</code> as submodule)</li>
<li>... some go code</li>
</ul></li>
<li>git.dev/<strong>bazservice</strong>

<ul>
<li>proto (contains <code>git.dev/proto</code> as submodule)</li>
<li>... some javascript code</li>
</ul></li>
<li>git.dev/<strong>proto</strong>

<ul>
<li>shared

<ul>
<li>shared.proto</li>
</ul></li>
<li>fooservice

<ul>
<li>fooservice.proto (imports <code>shared/shared.proto</code>)</li>
</ul></li>
<li>barservice

<ul>
<li>barservice.proto (imports <code>shared/shared.proto</code>)</li>
</ul></li>
</ul></li>
</ul>

<p>The typical header of a service proto file currently looks like this:</p>

<p><code>git.dev/proto/fooservice/fooservice.proto</code></p>

<pre><code>syntax = ""proto3"";

package abc.foo;

import ""shared/shared.proto"";

option go_package = ""foopb"";
option java_multiple_files = true;
option java_outer_classname = ""FooProto"";
option java_package  = ""com.abc.foo"";
</code></pre>

<h3>Question 1: Import path</h3>

<ul>
<li>Having it <code>import ""shared/shared.proto"";</code> works for linting of the git.dev/<strong>proto</strong> repo, but causes import-problems during code generation.</li>
<li>Having it <code>import ""proto/shared/shared.proto"";</code> works for code generation in the service-repos but of course causes linting problems in the git.dev/<strong>proto</strong> repo</li>
<li><strong><em>Should the import statement contain the <code>proto</code> folder?</em></strong></li>
</ul>

<h3>Question 2: go_package Option</h3>

<ul>
<li>to build the go stubs we currently use prototool to and set the <code>go_options.import_path</code> to e.g. <code>git.dev/fooservice</code> which generates correct golang import paths</li>
<li>another option would be to run something like

<ul>
<li><code>for x in proto/**/*.proto; do protoc -Iproto --go_out=plugins=grpc,paths=source_relative:src/proto $x; done</code> but this does not result in valid golang import paths as long as I don't add the full git path to the go_package option. Doing that of course conflicts with the git-submodule approach (which git repo path to choose, /proto or /*service.git ?).</li>
</ul></li>
<li><strong><em>What's best practice using go_package in combination with git-submodules?</em></strong></li>
</ul>

<h3>Question 3: submodules and 3rd-party tools</h3>

<ul>
<li>Is using git-submodules and 3rd-party tools like prototool the right way to work with proto files across multiple projects?</li>
</ul>

<p>Thanks!</p>
","3","9917641","",""
"73488615","16743013","2022-08-25 13:42:35","1","72","<git><git-submodules><git-clone>","Clone a subdirectory of a submodule in git","<p>I wish to create a submodule in my repository, and inside that submodule I only want to clone ONE folder to use as a dependency.</p>
<p><strong>For example if this is my current state:</strong></p>
<pre><code>main repository
│__README.md
│__file001.txt
</code></pre>
<pre><code>dependency repository
|__src
|__include
</code></pre>
<p><strong>I want to have:</strong></p>
<pre><code>main repository
│__README.md
│__file001.txt
|__dependency repository (submodule)
   |__include
</code></pre>
<p>How is it possible to do it in git?</p>
","2","16743013","",""
"73510548","3420854","2022-08-27 11:22:18","0","167","<git><git-submodules>","Renaming git submodules without moving them","<p>I have a submodule set up thus:</p>
<p>.gitmodules</p>
<pre><code>[submodule &quot;path/to/submodule&quot;]
    path = path/to/submodule
    url = user@bitbucket.org:account/repo.git
</code></pre>
<p>Instead of having to reference it from the project root as 'path/to/submodule', I'd like to just be able to reference it as 'my_submodule'. e.g.</p>
<pre><code>git submodule update --remote my_submodule
</code></pre>
<p>Everything I've read so far about this explains how to <em>move</em> the submodule, and that's not what I want to do. I have tried simply changing .gitmodules to</p>
<pre><code>[submodule &quot;my_submodule&quot;]
    path = path/to/submodule
    url = user@bitbucket.org:account/repo.git
</code></pre>
<p>and
.git &gt; config to</p>
<pre><code>[submodule &quot;my_submodule&quot;]
    url = user@bitbucket.org:account/repo.git
    active = true
</code></pre>
<p>but it just throws
<code>error: pathspec 'my_submodule' did not match any file(s) known to git</code></p>
<p>I hope someone out there can help. Thank you.</p>
","5","3420854","",""
"56762812","1732418","2019-06-25 22:28:48","2","326","<git><git-submodules><git-reset>","Why git reset --hard doesn't reset commit hash in submodules?","<p>I have project with 4 submodules, 2 of them are out of sychronisation:</p>

<pre><code>$ git submodule status
+ae633d13612e49a4d636ade1b20de7c306de9a40 devops-tools (heads/master)
 361fad5d187573d9bbb6aef67599f434c0bb7260 factorie (factorie_2.11-1.2-74-g361fad5d1)
 e702f2ffe7fa785acc97983500be6b6f995d5fa1 foundation (heads/master)
+69330f56f5db54c28a95752c7cc3a974af9cdd5e spookystuff (0.3.0-RC1-1167-g69330f56)
</code></pre>

<p>The little + indicates that these commit hashes are not staged, the synched commit hashes can be seen in the following message:</p>

<pre><code>$ git submodule summary
* devops-tools 2e576eb...ae633d1 (2):
  &gt; Additional tests for local and chained passports
  &gt; Add policy for github issue 278

* spookystuff feeec3e...69330f5 (3):
  &gt; fix an NPE caused by val overriding def ctg
  &gt; move 1 closure out of test body to avoid a NotSerialisable error
  &gt; fix a serialisation error merge process name &amp; command into a single condition Fixed a few test case due to parser injection Additional tests for local and chained passports fix 2 pattern matching errors caused by type erasure several refactorings that use more accurate names
</code></pre>

<p>I want to synchronise them, so I execute the following command:</p>

<pre><code>$ git add *
The following paths are ignored by one of your .gitignore files:
datapassports.iml
target
Use -f if you really want to add them.
$ git reset --hard
HEAD is now at e1d426df8 issue 284, ...

$ git submodule update --init --remote --recursive --force
Submodule path 'devops-tools': checked out 'ae633d13612e49a4d636ade1b20de7c306de9a40'
Submodule path 'factorie': checked out '361fad5d187573d9bbb6aef67599f434c0bb7260'
Submodule path 'foundation': checked out 'e702f2ffe7fa785acc97983500be6b6f995d5fa1'
Submodule path 'spookystuff': checked out '69330f56f5db54c28a95752c7cc3a974af9cdd5e'
</code></pre>

<p>but it appears that nothing changed, the command git reset --hard FAILED to set submodules to the correct hash: 2e576eb and feeec3e respectively. What's the purpose of this design and how to fix it?</p>
","2","1732418","0","0"
"73527093","2810305","2022-08-29 09:57:56","2","47","<git><git-submodules>","git with directory-became-submodule: The following untracked working tree files would be overwritten by checkout","<p>I work with a fork, <code>R-fork</code>, of a large repository <code>R</code> (developed by people with whom I have almost no contact). <code>R</code> has a dozen submodules.
On <code>R-fork</code>, I work in my own branch <code>mybranch</code>, which I frequently rebase.</p>
<p>Today, I needed to look something up in <code>oldbranch</code>, but my <code>git checkout</code> command resulted in</p>
<pre><code>error: The following untracked working tree files would be overwritten by checkout:
        Sdir/a
        Sdir/b
</code></pre>
<p><code>a</code> and <code>b</code> are files that are definitely part of the versioned tree structure, but have recently switched their status:
In <code>oldbranch</code>, <code>Sdir</code> was part of <code>R</code>, but then it was converted into a new submodule <code>S</code> of <code>R</code> and that is how it is in <code>mybranch</code>.</p>
<p>The commit that introduced the submodule deleted <em>three</em> files from <code>Sdir</code>: <code>a</code>, <code>b</code>, <code>c</code>. All three (and several others) now exist as versioned files in the <code>S</code> repo. Why did only <code>c</code> behave like it should?</p>
<p>Even more strangely, when do <code>cd Sdir; git ls-files -t</code>, all three are shown as cached (tracked) files and I do not see why <code>R</code> can view them as untracked.</p>
<p>What is my problem?</p>
","3","2810305","",""
"56777555","1548052","2019-06-26 16:42:56","0","472","<python><git><git-submodules><gitpython>","How to use variables of git submodule foreach in gitpython","<p>Using <a href=""https://gitpython.readthedocs.io/en/stable/index.html"" rel=""nofollow noreferrer"">gitpython</a>, I would like to use <code>repo.git.submodule('foreach', …)</code> and get the variables available such as <code>name</code>, <code>sm_path</code>, <code>displaypath</code>, <code>sha1</code> and <code>toplevel</code> as defined in the <a href=""https://git-scm.com/docs/git-submodule#Documentation/git-submodule.txt-foreach--recursiveltcommandgt"" rel=""nofollow noreferrer"">git documentation</a>.</p>

<p>I couldn't find any documentation on gitpython and my understanding of the API is limited.</p>
","1","1548052","",""
"73578618","1965555","2022-09-02 06:32:24","0","20","<git><nested><git-submodules><git-clone>","git submodule init within nested submodule","<p>I have a git submodule(subproject) with several submodules inside it within a main project. I want to checkout each nested submodule within the main submodule seperately. Also the main project has .gitmodules file with the required git submodule path from the git repo to pull.</p>
<p>Followed the steps below</p>
<pre><code>1. git clone mainproject.git
2. git submodule update --init (This would pull the subproject not the complete nested submodules)
3. cd subproject
4. git submodule update --init submodule1(This step does not pull the nested submodule)
This lead to error: pathspec 'submodule1' did not match any file(s) known to git
</code></pre>
<p>But doing the below steps clones the complete submodule with nested submodules including</p>
<pre><code>1. git clone mainproject.git
2. git submodule update --init --recursive
</code></pre>
<p>Please let me know if there is a way to retrieve the nested submodule within the submodule of a Project.</p>
<p>Thank you</p>
","5","1965555","",""
"73607219","8081710","2022-09-05 09:28:50","0","93","<git><git-submodules>","Make copy/clone/backup of local git submodule as separate repo","<p>So I have a git repo &quot;parent&quot; with a git submodule &quot;child&quot;. We are going to remove the &quot;child&quot; submodule, but as some developers may have local branches and modifications that aren't pushed to the remote I want them to create a local backup of &quot;child&quot; as a standalone git repo.</p>
<p>I have searched the far reaches of the internet and tried various invocations of simply <code>cp</code> and <code>git clone</code>, but to no avail.</p>
<p>To backup a normal git repo one can simply copy the entire directory - but this does not work for a git submodule repo as it stores the history and git config in the <code>.git/</code> folder of the &quot;parent&quot; repo. I want to clone the repo, keep all local branches and refs and all local changes in the working directory and keep the remote uplink. The &quot;parent&quot; repo should be left unmodified.</p>
<p>How do I achieve this?</p>
","0","8081710","",""
"73618587","19929508","2022-09-06 07:57:04","0","168","<git><azure><azure-pipelines><git-submodules>","Cannot checkout git submodules in Azure Pipeline (Within same project)?","<p>I have added a git submodule into the main project, which references the sub-project using a relative path. The .gitmodules looks like this:</p>
<pre><code>[submodule &quot;Shared&quot;]
path = Shared
url = ../Shared
</code></pre>
<p>The Azure pipeline is configured to self checkout including the submodules:
File <code>azure-pipelines.yaml</code></p>
<p><a href=""https://i.stack.imgur.com/V4RyS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/V4RyS.png"" alt=""enter image description here"" /></a></p>
<p>The build-pipeline fails on the checkout step, and gives the following error:
<a href=""https://i.stack.imgur.com/l23yB.png"" rel=""nofollow noreferrer"">Error</a></p>
<p>Extra information:</p>
<ul>
<li>Both repositories exist in the same organization and project.</li>
<li>Both repositories are private.</li>
<li>I have already checked if disabling the 'Limit job authorizaiton scope' in the organization- and projectsettings worked but unfortunately not.</li>
</ul>
<p>Any ideas?</p>
<p>Edit: I hid the URLs in the error screenshot, however when I click those I do get a result of the repositories so it definitely exists.</p>
","0","19929508","",""
"73641817","19873872","2022-09-07 21:53:18","-1","86","<github><git-submodules><netlify>","how to delete submodule in github that was added by accident","<p>I'm trying to put on frontend project on Netlify, however, when i'm trying to deploy it i'm getting the below error message<a href=""https://i.stack.imgur.com/OL349.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OL349.png"" alt=""error logs"" /></a></p>
<p>how can i get rid of the submodule?</p>
<p>see below my github page<a href=""https://i.stack.imgur.com/TUCEA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TUCEA.png"" alt=""github files"" /></a></p>
","1","19873872","",""
"56878530","791022","2019-07-03 22:13:24","2","7390","<git><github><git-submodules>","git submodule - use develop branch?","<p>In my project repo, i have created a submodule and in the <code>.submodules</code> file it look like this:</p>

<pre><code>[submodule ""lib/payment-sdk""]
    path = lib/payment-sdk
    url = https://user@github.com/user/Payment-SDK.git 
</code></pre>

<p>I initialize the Submodules with the following commend: <code>git submodule update --init --recursive</code> but how to get the latest from the develop branch? On the production server it will need to pull from the master branch.</p>
","0","791022","0","0"
"5427414","134595","2011-03-25 00:57:26","47","33676","<git><git-submodules>","Editing a git submodule","<p>Is this possible? Imagine I have projects Parent &amp; Child. Both are git respositories. Child is a submodule of Parent.</p>

<p>Can I make edits to the version of Child that is inside Parent &amp; commit &amp; push them just like a regular repository?</p>

<p>Or do I need a separate clone of Child somewhere that I make changes to?</p>

<p>Thanks.</p>
","1","134595","0","0"
"27905918","2369112","2015-01-12 15:55:28","1","357","<google-app-engine><pycharm><git-submodules><endpoints-proto-datastore>","Does Google App Engine's git Push-to-Deploy also work with git submodules?","<p>I've got an appengine Python app which takes advantage of <a href=""http://endpoints-proto-datastore.appspot.com/"" rel=""nofollow"">endpoints-proto-datastore</a>. I did install endpoints-proto-datastore using:</p>

<p>git submodule add <a href=""https://github.com/GoogleCloudPlatform/endpoints-proto-datastore"" rel=""nofollow"">https://github.com/GoogleCloudPlatform/endpoints-proto-datastore</a></p>

<p>It does work when I deploy my app through PyCharm (using Google Appengine Python SDK).
It does not work when I push to google's repository (Push-to-Deploy). When using Push-to-Deploy I get the following log message:</p>

<p>ImportError: No module named endpoints_proto_datastore.ndb</p>

<p>Do I have to download the endpoints_proto_datastore library and unzip it in the root directory to get Push-to-Deploy working? I wanted to be up-to-date, that's why I did use the git submodule.</p>
","0","2369112","",""
"66126886","241201","2021-02-09 20:47:29","0","29","<git><git-submodules>","Make git commit in submodule available to other local repos","<p>I have a submodule used by a couple of other repositories, I'm making changes to code in the submod, and I want to make my changes available to both of my other local repositories <em>before</em> I push my submod changes to remote. The idea is that I want to be able to test the other two repos' code first, before I push the code that's shared between them.</p>
<p>If I just do a local Commit in the submod, how can I make the change available to my other local repos?
Is this even possible? Seems like it should be since all I'm trying to do is make local code available to local code.</p>
","3","241201","",""
"37432536","2535853","2016-05-25 09:10:00","2","974","<git><github><git-submodules>","Add a list of submodules to the git","<p>I have cloned a project and customized it. the project is using some extra projects as submodules. I have setup  mine git repository and push the main project there. but I did not add the submodules to mine git project. </p>

<p>I want to pull the submodules to my project. I know using following command  I can add submodules one by one :</p>

<blockquote>
  <p>git submodule add <code>&lt;sub-m url&gt; &lt;path&gt;</code></p>
</blockquote>

<p>But they are a lot. is there another way to add them automatically and all together ? here is the list of submodules :</p>

<pre><code>submodule ""submodules/bcg729""]
    url = git://git.linphone.org/bcg729.git
[submodule ""submodules/bctoolbox""]
    url = git://git.linphone.org/bctoolbox.git
[submodule ""submodules/belcard""]
    url = git://git.linphone.org/belcard.git
[submodule ""belle-sip""]
    url = git://git.linphone.org/belle-sip.git
[submodule ""submodules/belr""]
    url = git://git.linphone.org/belr.git
[submodule ""submodules/bzrtp""]
    url = git://git.linphone.org/bzrtp.git
[submodule ""submodules/cmake-builder""]
    url = git://git.linphone.org/linphone-cmake-builder.git
[submodule ""submodules/externals/antlr3""]
    url = git://git.linphone.org/antlr3.git
[submodule ""submodules/externals/axmlrpc""]
    url = git://git.linphone.org/axmlrpc.git
[submodule ""submodules/externals/bv16-floatingpoint""]
    url = git://git.linphone.org/bv16-floatingpoint.git
[submodule ""submodules/externals/cunit""]
    url = git://git.linphone.org/cunit.git
[submodule ""submodules/externals/ffmpeg""]
    url = git://git.linphone.org/ffmpeg.git
[submodule ""submodules/externals/gsm""]
    url = git://git.linphone.org/gsm.git
[submodule ""submodules/externals/libmatroska""]
    url = git://git.linphone.org/libmatroska-c.git
[submodule ""submodules/externals/libupnp""]
    url = git://git.linphone.org/libupnp.git
[submodule ""submodules/externals/libvpx""]
    url = https://chromium.googlesource.com/webm/libvpx
[submodule ""submodules/externals/libxml2""]
    url = git://git.gnome.org/libxml2.git
[submodule ""submodules/externals/mbedtls""]
    url = git://git.linphone.org/mbedtls.git
[submodule ""submodules/externals/opencore-amr""]
    url = git://git.linphone.org/opencore-amr.git
[submodule ""submodules/externals/openh264""]
    url = https://github.com/cisco/openh264
[submodule ""submodules/externals/opus""]
    url = git://git.linphone.org/opus.git
[submodule ""submodules/externals/speex""]
    url = git://git.linphone.org/speex.git
[submodule ""submodules/externals/srtp""]
    url = git://git.linphone.org/srtp.git
[submodule ""submodules/externals/vo-amrwbenc""]
    url = git://git.linphone.org/vo-amrwbenc.git
[submodule ""submodules/externals/x264""]
    url = git://git.linphone.org/x264.git
[submodule ""submodules/linphone""]
    url = git://git.linphone.org/linphone.git
[submodule ""submodules/msamr""]
    url = git://git.linphone.org/msamr.git
[submodule ""submodules/mscodec2""]
    url = git://git.linphone.org/mscodec2.git
[submodule ""submodules/msopenh264""]
    url = git://git.linphone.org/msopenh264.git
[submodule ""submodules/mssilk""]
    url = git://git.linphone.org/mssilk.git
[submodule ""submodules/mswebrtc""]
    url = git://git.linphone.org/mswebrtc.git
[submodule ""submodules/msx264""]
    url = git://git.linphone.org/msx264.git
[submodule ""linphone""]
    url = git://git.linphone.org/linphone.git
</code></pre>
","3","2535853","0","0"
"54582257","215816","2019-02-07 21:04:43","0","1188","<git><github><git-submodules>","Checkout git project where submodule commit version does not exist anymore","<p>I am trying to checkout a github project, let's call it A, which has several submodules. So I tried,</p>

<pre><code>git clone A
cd A
git submodule update --init --recursive
</code></pre>

<p>However, one of the submodules, say B, is set to a commit that doesn't exist anymore, so when I try to update it, I get:</p>

<pre><code> Fetched in submodule path 'B', but it did not contain 3ffeb07de8634a3540d185cbd16f76ebee704f7d. Direct fetching of that commit failed.
</code></pre>

<p>I checked it on github and indeed that commit does not exist anymore, I get a 404.
How can I update B to a version that does exist, I guess HEAD is fine, and then check it out?</p>
","0","215816","0","0"
"57453003","1532919","2019-08-11 19:35:07","1","1299","<git><git-submodules>","Confused by git submodules","<p>I have an app and have set it up to use git. In that app I have a folder that I have setup as a git module, something like this:</p>

<pre><code>/app
  .git
  .gitmodules
  ...other-files
  /...other-folders
  /feature           # this is a sub-module
    .git
    ...other-files
    /...other-folders
</code></pre>

<p>Something seems wrong as when I make a changes in the <code>/feature</code> folder, then in the root folder do <code>git status</code>, it lists the changes in the sub-module.</p>

<p>Also when I change the branch in the root folder, doing a <code>git status</code> in the sub-module lists lots of files.  Same if I change the branch in the sub-module, <code>git status</code> lists lots of changed files in the root folder.</p>

<p>I thought of adding <code>/feature</code> to the root directory's <code>.gitignore</code>, but read that is the wrong approach?</p>

<p>Is this expected? Maybe I am misunderstanding submodules?  The reason I added them is to give a contractor access to just a part of the codebase.</p>
","5","1532919","",""
"74259996","10915537","2022-10-31 07:30:46","0","23","<git><git-submodules><post-commit><post-commit-hook>","Fail to run git command in specific directory in global post-commit hook","<p>I am trying to use a submodule with a global post-commit hook but find an issue.</p>
<h2>Description</h2>
<p>Consider we have two git directories A and B. A is the super-project of B.</p>
<p>Here's my script in the global post-commit hook.</p>
<pre class=""lang-bash prettyprint-override""><code>#!/bin/sh 
git -C path/to/A remote show origin 
</code></pre>
<h2>Expected behavior</h2>
<p>It supposes to show the remote information about A after committing in B.</p>
<h2>Actual behavior</h2>
<p>It shows remote information about B after I committed in B.</p>
<h2>Questions</h2>
<ul>
<li>Did I do anything wrong to cause the unexpected result?</li>
<li>If not, Why did this happen? (maybe caused by the limitation of post-commit hooks? <a href=""https://git-scm.com/docs/githooks#_post_commit"" rel=""nofollow noreferrer"">doc</a>)</li>
<li>How do I get the expected behavior?</li>
</ul>
","0","10915537","",""
"74298687","444644","2022-11-03 06:05:48","0","37","<git><git-submodules>","Making git submodules track branch after shallow initialization","<p>Suppose I initialize shallow-submodules with:</p>
<p><code>git clone --depth 1 --recurse-submodules --shallow-submodules https://github.com/vishvAsa/jyotiSham.git</code></p>
<p>I cannot then make submodules track the remote branch (<code>cd content; git checkout content</code>). <code>error: pathspec 'content' did not match any file(s) known to git</code></p>
<p>So, in intellij IDE, the submodule shows up as &quot;detached head&quot;, which then makes certain GUI-based operations cumbersome (checking in changes within submodules, updating submodules).</p>
<p><a href=""https://i.stack.imgur.com/WQbwp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WQbwp.png"" alt=""Example from a different but similar repo"" /></a></p>
<p>Is there any way to track the remote branch without recloning? Alternatively, is there a simple way to make all submodules non-shallow?</p>
","1","444644","",""
"73725003","19778192","2022-09-15 02:30:07","1","1117","<git><github><repository><git-bash><git-submodules>","How to remove unwanted, inadvertent git submodules in new repositories?","<p>I am trying to add a new repository simple-form but every time I do I end up with all of the other repositories I have locally as submodules (the blue folder with white arrow that I can't delete on GitHub) in that repository.</p>
<p>I have a main folder called GitHub locally that isn't supposed to be a repository with all of my repositories in it in their own folders.
There are no .gitmodules that I was able to find and none of the other past repositories have that same issue.</p>
<p>When I search on Git Bash, only the folders that are supposed to be there show up. I have tried:</p>
<pre class=""lang-sh prettyprint-override""><code>rm .gitmodules
git submodule deinit
git submodule deinit --all
git config --file .gitmodules --name-only --get-regexp path
git config --file .gitmodules --get-regexp path | awk '{print $2}'
</code></pre>
<p>and more and I keep getting <code>No such file or directory</code>.</p>
<p>I did lastly try<br />
<code>git submodule--helper list</code><br />
on both the simple-form repository with all of the unwanted blue folders with white arrows and the GitHub folder with all the separate repositories, and I do get a list of all of them. But when I try<br />
<code>git rm &lt;path-to-submodule&gt;</code><br />
I get<br />
<code>fatal: pathspec 'eyes' did not match any files</code><br />
even when I use the path stated in that list (it just has the name of the repository folder honestly but that is supposed to be the path)</p>
<p>I am not really sure what to do now. I don't want to delete all of my repositories and I have a feeling that it has something to do with that main GitHub folder, I will admit I may have accidentally made that folder I keep everything in into a repository. The GitHub folder did have remote url that matches the folder called simple-form that I am trying to fix. I remove it using the <code>git remote remove origin</code> command and nothing pops up when I type <code>git remote -v</code>, but it keeps coming back every time I delete and redo the entire simple-form folder (with new names every time).</p>
<p>I can't create more repositories because of this issue. How do I undo these submodules?</p>
","2","19778192","",""
"73740447","3357352","2022-09-16 05:57:01","1","42","<git><git-submodules>","What happens during a git submodule push","<p>I can <em>pull</em> submodule (<code>subby</code>) latest commit locally with <a href=""https://stackoverflow.com/a/5828396/3357352"">this answer</a>:</p>
<pre class=""lang-bash prettyprint-override""><code>$ git clone --recurse-submodules &lt;omitted&gt;/importer.git
$ cd importer
$ cat subby/README.md
cat: subby/README.md: No such file or directory
#
# good ! it's not supposed to exist
#
$ git submodule foreach git pull origin master
Entering 'subby'
&lt;omitted&gt;
Fast-forward
 README.md | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 README.md
$ cat subby/README.md 
Hello oren
#
# good ! now it exists
#
</code></pre>
<p>But now I want to <em>push</em> that change</p>
<pre class=""lang-bash prettyprint-override""><code>$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    modified:   subby (new commits)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>Closing my eyes and hoping for the best worked with:</p>
<pre><code>$ git add subby
$ git commit -m &quot;updating subby&quot;
$ git push
</code></pre>
<p>But what exactly did I commit? the sub-folder?</p>
","0","3357352","0","0"
"73747328","395205","2022-09-16 15:45:20","0","2711","<git><github><terraform><git-submodules>","Use terraform module from another private repo with git submodule","<p>I am trying to use module from another private github repository. This another github repository has git submodule from third repository.</p>
<pre><code>module &quot;ecr_repos&quot; {
  for_each = local.ecr_repos 

  source = &quot;git@github.com:gitaccount/repo2.git//terraform/modules/ecr&quot;
  name = each.key
}
</code></pre>
<p>git submodule directory in the repo is not used by tf modules.</p>
<p>It works locally (with my ssh keys), but when I run terraform in github workflow it fails.</p>
<p>It is also reproduced locally in docker container.</p>
<p>In both cases I inject <code>GITHUB_TOKEN</code> env variable, that is a github private token (not the temporary token generated by github actions)</p>
<p>I run</p>
<pre><code>git config --global url.&quot;https://oauth2:$GITHUB_TOKEN@github.com&quot;.insteadOf ssh://git@github.com
terraform init

Initializing modules...
Downloading git::ssh://git@github.com/gitaccount/repo2.git for ecr_repos...
╷
│ Error: Failed to download module
│ 
│ Could not download module &quot;ecr_repos&quot; (ecr.tf:1) source code from &quot;git::ssh://git@github.com/gitaccount/repo2.git&quot;: error downloading 'ssh://git@github.com/gitaccount/repo2.git': /usr/bin/git exited with 1: Submodule 'third/repo/submodule/path'
│ (git@github.com:gitaccount/repo3.git) registered for path 'third/repo/submodule/path'
│ Cloning into '/root/repo1/terraform/infra/ecr/.terraform/modules/ecr_repos/third/repo/submodule/path'...
│ git@github.com: Permission denied (publickey).
│ fatal: Could not read from remote repository.
│ 
│ Please make sure you have the correct access rights
│ and the repository exists.
│ fatal: clone of 'git@github.com:gitaccount/repo3.git' into submodule path '/root/repo1/terraform/infra/ecr/.terraform/modules/ecr_repos/third/repo/submodule/path' failed
│ Failed to clone 'third/repo/submodule/path'. Retry scheduled
│ Cloning into '/root/repo1/terraform/infra/ecr/.terraform/modules/ecr_repos/third/repo/submodule/path'...
│ git@github.com: Permission denied (publickey).
│ fatal: Could not read from remote repository.
</code></pre>
<p>As a result the repo2 downloaded into .terraform directory, but it fails to download submodule from repo3</p>
<p>If I try to clone repo2 with <code>GITHUB_TOKEN</code> then clone operation succeeds and submodule exists.</p>
<p>What am I missing and what else should I configure to make it work?
Adding ssh keys to <code>~/.ssh</code> is a last resort and I really do not want to use it.</p>
<p><strong>UPDATE:</strong></p>
<p><strong>I solved the issue</strong></p>
<p>As I described in the beging of question, repo2 has <code>.gitmodules</code> file that contains definition of submodule with <code>url = git@github.com:gitaccount/repo3.git</code></p>
<p>I added additioanal <code>git config</code> command before <code>terraform init</code> to match git submodule definition:</p>
<pre><code>git config --add --global url.&quot;https://oauth2:$GITHUB_TOKEN@github.com/&quot;.insteadOf &quot;git@github.com:&quot;
</code></pre>
<p>The ending <code>/</code> in url and <code>:</code> in <code>git@github.com:</code> are critical</p>
","0","395205","",""
"73758762","14896738","2022-09-17 21:47:10","3","75","<go><git-submodules>","GO workspaces - what to checkin to git and also to use git submodules?","<p>I have been playing around with go workspaces and everything is working as it should.</p>
<p>Although I am confused about whether I should be commiting the ROOT directory where the go.work is and also if I should, in fact, be committing the go.work.</p>
<p>If this is the case, then I added git submodules.</p>
<p>Although I am not sure if I like this workflow :-) I mean, using git submodules.</p>
<p>So I have (directory structure)</p>
<p>root (where go.work is)</p>
<ul>
<li>proj1 (also added to the go.work)</li>
<li>proj2 (also added to the go.work)</li>
</ul>
<p>Here is my go.work in the root</p>
<pre><code>go 1.18

use (
    ./test-work1
    ./test-work2
)
</code></pre>
<p>I cannot find any information about this. If we should be managing the &quot;root&quot; then I assume this needs to end up in GIT - but if I don't want to manage this as some massive MONOREPO then I need to use git submodules.</p>
<p><a href=""https://i.stack.imgur.com/8hvim.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8hvim.png"" alt=""enter image description here"" /></a></p>
<p>Or maybe the &quot;root&quot; should never be added to git and we use it locally?</p>
<p>Does anyone have any experience with a good workflow ?</p>
<p>Information seems to thin on the ground, although workspaces is a fairly new addition.</p>
<p>Thanks in advance.</p>
","0","14896738","",""
"73796567","20049732","2022-09-21 07:01:39","0","1131","<git><git-submodules>","No url found for submodule path 'XXXXXXX' in .gitmodules","<p>I have problem while using git in one of the platform I'm using,
it shows this error while the url is already define in .git/config file:</p>
<p><strong>Note</strong>:if I use master branch no error, but if I use none branch I get the error. even if the code is identical</p>
<pre><code> [core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
        symlinks = false
        ignorecase = true
[remote &quot;origin&quot;]
        url = https://bitbucket.XXXXX.com/project.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;master&quot;]
        remote = origin
        merge = refs/heads/master
[branch &quot;none&quot;]
        remote = origin
        merge = refs/heads/none
</code></pre>
<p>if I try to do &quot;git submodule add URL&quot; === error alreedy exist.</p>
","5","20049732","",""
"73817051","10526502","2022-09-22 15:15:33","0","509","<git><git-submodules>","Add only a specific folder to git submodule","<p>I am currently working in a big project that uses a lot of external libraries that are git repositories themselves and need to be added as git submodules.</p>
<p>The problem is that those libraries are not very specific and might include a lot of subdirectories of which I only need one or a few. Example:</p>
<p>Parent repository</p>
<ol>
<li>subdirectory 1</li>
<li>subdirectory 2</li>
<li>subdirectory 3</li>
<li>subdirectory 4</li>
<li>subdirectory 5</li>
<li>... so on</li>
</ol>
<p>All the subdirectories are quite heavy so I don't want to include them unnecesarily.</p>
<p>I've seen you can <a href=""https://terminalroot.com/how-to-clone-only-a-subdirectory-with-git-or-svn/"" rel=""nofollow noreferrer"">clone only a specific subdirectory</a>, but I can't figure out how to apply that to a <code>git submodule add</code> command.</p>
<p>Any and all help is appreciated. Thank you!</p>
","2","10526502","",""
"57036525","2085438","2019-07-15 02:33:45","0","89","<git><git-submodules>","git submodules of submodules","<p>I have the following repos in a project</p>

<pre><code>/main/somecode.py
/main/sub1/
/main/sub1/somemorecode.py
/main/sub1/sub2
/main/sub1/sub2/evenmorecode.py
</code></pre>

<p><code>sub1</code> and <code>sub2</code> are submodules.</p>

<p>Git has automatically created a .gitmodules file under <code>/main</code> but not under the other submodules. I initialized the submodules with <code>git submodules add the-url-of-the-submodule</code> and nothing else.</p>

<p>When I try and do a <code>git submodules update --remote --recursive</code>, git misses the second layer of submodules.</p>

<p>Am I supposed to create a .gitmodules file manually at each level ? How do I make git aware of all submodules ?</p>
","3","2085438","",""
"73853726","7146880","2022-09-26 11:49:33","1","223","<git><git-submodules><git-filter-branch><git-history-rewrite>","Git filter-branch or filter-repo to update submodule gitlink?","<p>I have git repository A that uses B as a submodule.</p>
<p>B's history has been rewritten after an LFS migration, but I would love it if A could still have its entire history functional. After the LFS migration, I do have a mapping OldSHA1 &gt; NewSHA1 for submodule B, and now I just want to rewrite OldSHA1 gitlinks to NewSHA1 in repo A.</p>
<p>I have tried to run a filter-repo command on the repo A with a full OldSHA1==&gt;NewSHA1 mapping as parameter but it doesn't seem to pick up gitlinks.</p>
<p>I also tried filter-branch as detailed in this thread <a href=""https://stackoverflow.com/questions/37442500/repository-with-submodules-after-rewriting-history-of-submodule"">Repository with submodules after rewriting history of submodule</a> that seems to be looking for the exact thing I am trying to accomplish. I tried doing this with a single OldSHA1=&gt;NewSHA1 mapping, and here's the command I am trying to run:</p>
<pre><code>git filter-branch --commit-filter '
  if [ &quot;$GIT_COMMIT&quot; = &lt;OLDSHA1&gt; ];
  then
    cd &lt;SUBMODULE_ABSOLUTE_PATH&gt;;
    git checkout &lt;NEWSHA1&gt;;
    cd ..;
    git add -u;
    git commit -m &quot;updated gitlink&quot;;
  else
    git commit-tree &quot;$@&quot;;
  fi' HEAD 
</code></pre>
<p>But I keep getting the following error:</p>
<pre><code>fatal: reference is not a tree: &lt;NEWSHA1&gt;
</code></pre>
<p>Somehow, git checkout doesn't seem to pick up the tree of submodule B. I even tried to specify a path with <em>git -C AbsolutePathToSubModule checkout</em> but I get the same error.</p>
<p>So, a few questions:</p>
<ul>
<li>Is there something obvious I'm doing wrong here?</li>
<li>Is there a better way of accomplishing this? It seems like I &quot;simply&quot; want to replace a string with another somewhere in the object database, but I can't find a simple way to do that</li>
<li>Is there a way to do this on the entire repo like filter-repo does? Or should I run this on every single branch.</li>
</ul>
<p>Thanks for any help, advice, clue about how to accomplish this!</p>
<p>Edit 1:</p>
<p>After an answer in the comments, I edited my script to this:</p>
<pre><code>git filter-branch --commit-filter '
  if [ &quot;$GIT_COMMIT&quot; = &lt;SpecificCommitID&gt; ];
  then
    git update-index --add --cacheinfo 160000,&lt;SpecificNewSha1&gt;,&lt;SubmodulePath&gt;;
  fi
  git commit-tree &quot;$@&quot;;
  ' HEAD
</code></pre>
<p>But it has no effect :(</p>
<p><code>WARNING: Ref 'refs/heads/develop' is unchanged</code></p>
<p>Edit 2:</p>
<p>Thanks a lot to user @torek! This is a snippet to help anyone get started:</p>
<pre><code>git filter-branch --index-filter '
if [ &quot;$(git rev-parse --quiet --verify :&lt;SUBMODULEPATH&gt;)&quot; = &lt;OLDSHA1&gt; ];
then
  git update-index --cacheinfo 160000,&lt;NEWSHA1&gt;,&lt;SUBMODULEPATH&gt;;
fi' HEAD --all
</code></pre>
<p>From then, you have to loop over all OLDSHA1/NEWSHA1 pairs, or use a case) dictionary as depicted in their answer below</p>
<p>Thanks again a lot!</p>
","5","7146880","",""
"57041841","7511460","2019-07-15 14:24:35","1","59","<git><visual-studio><visual-studio-2017><git-submodules>","Visual Studio : Select a working git repository","<p>I'm working on a solution with Visual Studio 2017 and I have some projects and git repositories in it.</p>

<p><strong>Root\<br></strong>
|<br>
+-----+ <strong>.git\<br></strong>
|<br>
+-----+ <strong>Solution\<br></strong>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+-----+ <strong>Solution.sln<br></strong>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+-----+ <strong>MainProject.vcxproj<br></strong>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
+-----+ <strong>OtherProject\ (Submodule)<br></strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+----- <strong>.git (File because is a submodule)<br></strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+----- <strong>OtherProject.vcxproj\<br></strong></p>

<p>I have to work on <code>OtherProject</code>, thereby, I would like to be able to use Visual Studio Team Explorer (Git) with the repository located at <code>Root\OtherProject\.git</code> instead of <code>Root\.git\</code>.</p>

<p><em>Is there any way to indicate Visual Studio the repository I want to work on?</em></p>
","0","7511460","",""
"57085189","4808079","2019-07-17 23:25:27","5","1759","<git><git-submodules>","How can I disable submodules in git?","<p>I'm trying to make a private mono-repo, with sub packages that have public gits.  At no point do I have any intent of modifying the code outside of my mono-repo, so I have no need for submodules.  In fact, they're the very thing I'm trying to avoid at all costs.</p>

<p>I don't want to delete the .gits for any of the packages in my mono-repo, and I don't want to do anything fancy.</p>

<p><strong>How can I simply disable submodule functionality in git?</strong></p>

<p>I don't ever want anything to be considered a submodule.  Never have, and probably never will.  </p>

<p>I've tried searching for some .submodule folder or something in the git.  I found none.  There appears to be no settings to get rid of these things.</p>

<p>I've found this link: <a href=""https://stackoverflow.com/questions/1759587/un-submodule-a-git-submodule/16162228#16162228"">un-submodule a git submodule</a></p>

<p>Unfortunately, these solutions all have to do with flattening submodules, and none of them cover a way to just disable the feature entirely.</p>
","7","4808079","",""
"73930650","13804211","2022-10-03 02:31:21","1","278","<git><github><gitlab><fetch><git-submodules>","git submodule doesn't work on React project","<p>I'm working on a React project. The repo name is &quot;namo-design-system&quot; inside this repo I used another repo &quot;design-system&quot;. <br> I used <code>git submodule</code> command to add &quot;design-system&quot; to inside src folder of &quot;namo-design-system&quot; <br>
My ide is vscode in explorer section inside src &quot;design-system&quot; is labeled with capital S as
submodule there is <strong>.gitmodules</strong> file and in it, there are the path and URL of the submodule
BUT when I use <code>git submodule status</code> nothing happens I tried it on <strong>git version 2.37.3.windows.1</strong> and on the integrated terminal in vscode but nothing happens
<a href=""https://i.stack.imgur.com/AKNXD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AKNXD.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/ZtoIO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZtoIO.png"" alt=""enter image description here"" /></a></p>
","7","13804211","0","0"
"73989031","9145193","2022-10-07 14:53:35","0","43","<git><git-submodules>",".gitginore for ignoring a submodule doesn't work as intended","<p>I have a folder called <code>app</code> in my original repository and inside it a <code>.gitignore</code> which simply ignores everything inside the folder (except itself). I would like to add a submodule inside <code>app</code> folder and I would like this submodule to be visually ignored by the original repository where I can't see the submodule directory (in GitHub where the original repo was published) but can update it and get updates when there are (since the folder will be locally there but won't be seen by the original repo).</p>
<p>However, whenever I try to add the submodule using <code>git add submodule</code> command, I get new changes in my original repo that I just added something. I don't want this.</p>
<p>Any idea to prevent this?</p>
","6","9145193","",""
"73991591","12096485","2022-10-07 18:57:05","0","65","<git-submodules><symlink><github-organizations>","submodule README as .github profile","<p>I want the readme of my github organization to be synced with the readme of another repository, called wiki (which contains a readme.md). To do this I made the wiki a submodule of the .github repo with the following command:</p>
<p><code>git submodule add [wiki repo address] profile</code></p>
<p>The picture below is the result of pushing that repo:</p>
<p><a href=""https://i.stack.imgur.com/fJadk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fJadk.png"" alt=""enter image description here"" /></a></p>
<p>As you can see github doesn't seem to recognize the submodule as a folder. I tried using a symbolic link to the submodule but that shows the same thing.</p>
<p>If I use the &quot;Add a README&quot; button on the right it gives me this error:</p>
<p><a href=""https://i.stack.imgur.com/Ubj2P.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Ubj2P.png"" alt=""enter image description here"" /></a></p>
<p>Is what I'm trying to do possible? What should I do?</p>
","1","12096485","",""
"57195209","","2019-07-25 05:57:15","2","270","<git><git-submodules><git-subtree>","What's the difference between git subtree and just git cloning in a subdirectory?","<p>I am starting to get the feeling that a git subtree is just a git clone in a subfolder.</p>

<p>For example:</p>

<pre><code>project/
   .git
   foo/
   bar/
   subtree/    # this could be a git subtree or just a git clone folder
   .gitignore
</code></pre>

<p>would I not get the same effect of a subtree, if I just put subtree in .gitignore, and then just git cloned my other project in the subtree folder? What are the effective differences between git cloning in a subfolder and git subtree?</p>
","0","","",""
"74020736","20208350","2022-10-10 21:15:05","0","71","<git><git-submodules>","What if git submodule remote is deleted","<p>I want to use a remote git repo as a library in my project and thought about adding it as a submodule to my git repo but than I thought: What if the submodule repo will be deleted?
I sure would still have my local copy of it and could hop around in all the branches that I have locally but I never trust in anything that I have locally. Only what is on the server is what I  trust.
So if I ignore my &quot;local backUp&quot;, the files would be lost in case that the remote server for the submodule isn't there anymore right? Or is there a mechanism for that?</p>
<p>So in that case I would be better of to copy the files from the submodule repo into my actual repo and commit all the files so that I actually have a copy of them on my server.</p>
<p>Am I missing something? Is there a better way to include external repos that I basically just want to read and use?</p>
<p>Thanks for all suggestions! Highly appreciate it!</p>
","1","20208350","",""
"74043773","20222706","2022-10-12 14:40:45","0","435","<git><github><github-actions><git-branch><git-submodules>","git submodule update doesn't work for in GitHub CI/CD pipeline for branched submodule","<p>When I call</p>
<pre><code>git submodule update --init --recursive --depth 50 --remote --jobs 1
</code></pre>
<p>for a submodule with a branch named <code>main</code> this works fine when I call it from local git bash while it fails when called from a GitHub CI/CD pipeline:</p>
<pre><code>13:27:13.378819 git.c:455               trace: built-in: git rev-parse --verify origin/main
fatal: Needed a single revision
13:27:13.381233 git.c:742               trace: exec: git-sh-i18n--envsubst --variables 'Unable to find current ${remote_name}/${branch} revision in submodule path '\''$sm_path'\'''
13:27:13.381277 run-command.c:668       trace: run_command: git-sh-i18n--envsubst --variables 'Unable to find current ${remote_name}/${branch} revision in submodule path '\''$sm_path'\'''
13:27:13.384468 git.c:742               trace: exec: git-sh-i18n--envsubst 'Unable to find current ${remote_name}/${branch} revision in submodule path '\''$sm_path'\'''
13:27:13.384504 run-command.c:668       trace: run_command: git-sh-i18n--envsubst 'Unable to find current ${remote_name}/${branch} revision in submodule path '\''$sm_path'\'''
fatal: Unable to find current origin/main revision in submodule path 'roles/trendmicro-ds-agent-branch'
</code></pre>
<p>This is my .gitmodules file:</p>
<pre><code>[submodule &quot;roles/trendmicro-ds-agent-branch&quot;]
    path = roles/trendmicro-ds-agent-branch
    url = ../../modules/ansible/trendmicro-ds-agent
    branch = main
</code></pre>
<p>It also works fine in the pipeline when I replace <code>branch = main</code> by <code>branch = master</code> (where master is the master branch in the submodule project) in .gitmdoules.</p>
<p>Any idea what's going wrong here?</p>
","4","20222706","",""
"74050383","3445381","2022-10-13 04:06:42","0","46","<git><git-submodules>","Pull specific folder from repository using gitsubmodule","<p>I have a Project and some modules in different repository. Let's say the project is Project A, in Repo A and the modules are Module-X,Module-Y, in Repo B.</p>
<p>So I wanted to add module-X into Project A using git submodule. I can add it into Project A using git-submodule like this:</p>
<pre><code>git submodule add https://github.com/author/repo_b.git
</code></pre>
<p>However, this will also add module-Y. What I need is, I just want to add module-X and instead of adding all modules from Repo B.</p>
<p>How can I achieve this using git submodule?</p>
","1","3445381","",""
"74059662","3357352","2022-10-13 17:29:39","0","98","<git><git-submodules>","git --recurse-submodules for non main/master branches","<ul>
<li>I have a <a href=""https://github.com/OrenGitHub/importer/tree/main"" rel=""nofollow noreferrer"">git repo</a> with two branches: <code>main</code> and <code>feature</code>.</li>
<li>only <code>feature</code> branch has a <a href=""https://github.com/OrenGitHub/importer/tree/feature"" rel=""nofollow noreferrer"">git submodule</a></li>
</ul>
<pre><code>$ git clone --recurse-submodules  git@github.com:OrenGitHub/importer.git
$ cd importer/
$ git checkout feature
$ ls -l subby/ # &lt;--- the submodule exists
total 0 # &lt;--- but it's empty 😣😣😣
</code></pre>
<p>I need to additionally do this to bring submodule content:</p>
<pre><code>$ git submodule update --init
</code></pre>
<p>why is that?</p>
","4","3357352","",""
"74080166","11934175","2022-10-15 14:11:00","0","246","<git><gitlab><git-submodules><git-remote>","Commit git submodule in a parent module","<p>I git cloned a public project (read-only)</p>
<p>and I changed some code of it.</p>
<p>and then, I would like to upload it in my private git just for storing.</p>
<p><strong>SUMMARY</strong></p>
<p>I want to make my private git repo which includes a public read-only project edited by myself.</p>
","3","11934175","",""
"74094672","10054063","2022-10-17 08:46:43","0","47","<python><git><git-submodules>","git submodule to import a folder","<p>How can we copy shared folder using git submodule ?Actually the requirement is that the shared folder should be present inside one folder out of the 4 folders present inside the repo in github. But when we clone the repo , the shared folder should be copied in all the 3 other folders from the one folder where shared folder is present … All the 4 folders are inside one repo only.. The requirement is to use a particular folder in all the DM folders in the project using git submodules .. Currently we are using the shared inside all the folders of the project .. Now we want to keep it in one folder where other folders can access it</p>
","2","10054063","",""
"74119442","3373967","2022-10-19 03:10:07","2","163","<git><foreach><git-submodules>","git : how to perform some operation to some specific submodule","<p>Git has the <code>foreach</code> command to recursively enter each submodule and so some operations. I now want to narrow the scope to some specific ones.</p>
<p>For example, there are 100 submodules inside a git repo. At some point, several of the submodules get dirty, the dirty submodules can show up with <code>git status -sb</code>. I only want to execute <code>git clean</code> for these dirty submodules.</p>
<p>I can use <code>git submodule foreach git clean</code>, however this recursively enter 100 submodules and perform the <code>git clean</code>, but most of them are not needed and waste a lot of time.</p>
<p>What I want is some kind of <code>git submodule foreachdirty</code>, or at least <code>git submodule &lt;submoduleName&gt;</code> to execute command on specific ones. Is there such facility existing?</p>
","0","3373967","",""
"74126663","11770390","2022-10-19 13:57:04","0","74","<git><directory><clone><git-submodules>","Avoid duplication of same git submodule within one project","<p>I didn't find anything related so I thought I might ask. Say in a project I have the following structure:</p>
<pre><code>my_project
├── .git
└── submodules
    ├── database_client
    │   └── submodules
    │       ├── io_lib
    │       │   └── .git
    │       └── JSON_parser // &lt;--
    │           └── .git
    └─ JSON_parser // &lt;-- one of those is not needed..
        └── .git
</code></pre>
<p>As you can see, the <code>JSON_parser</code> submodule is a dependency of both, my main project and a submodule that I'm including. So what I suppose is going to happen is that git is going to clone it twiced when using <code>git submodule update --init --recursive</code>. Is there a way to avoid that und only use the submodule once in my project?</p>
","3","11770390","",""
"74145759","11672706","2022-10-20 20:07:28","1","516","<bash><git><git-bash><git-submodules>","How to git submodule update ONLY on submodules that need it?","<p>Here is my situation:</p>
<ul>
<li>I'm working in a repo with 40+ submodules</li>
<li><code>git status</code> and <code>git submodule update</code> take a LONG time (submodule update is several minutes)</li>
<li>If I checkout a different commit and only a couple submodules have been changed, I can see the submodules that need updating using <code>git status</code>, then skip the long wait of a full <code>git submodule update</code> by doing</li>
</ul>
<pre><code>git submodule update &lt;submodule path&gt; &lt;submodule path&gt;
</code></pre>
<p>This will only update the submodules listed, taking only a few seconds</p>
<p>Is there a way to have <code>git submodule update</code> only update the modules that actually need it, instead of every one? I don't mind listing out a couple submodules manually, but when there's 6+, it'd be nice for git to somehow use the <code>git status</code> result to only run <code>git submodule update</code> on the ones that need it.</p>
<p>Does anyone know of any git command tricks I can do to achieve this and speed up my submodule updates? If not, is there a trick I can use to make a bash script to extract the necessary information from <code>git status</code> and build &amp; run a <code>git submodule update &lt;&gt; &lt;&gt; &lt;&gt;</code> command for me?</p>
<p>Bonus: is there a way to achieve a similar result on submodules that have had their content modified? That is, the submodule needs to be <code>git reset --hard HEAD</code>, not checked out to a new commit. But doing this without entering EVERY submodule, such as <code>git submodule foreach git reset --hard HEAD</code>, only ones that need it?</p>
<p>Example <code>git status --porcelain</code></p>
<pre><code>$ git status --porcelain
 M ABC
 M XYZ
 M XXX
 M YYY
 M FOO/BAR
</code></pre>
","0","11672706","",""
"74168634","131930","2022-10-23 04:23:01","1","31","<git><authentication><github><git-submodules>","How to push to my open-source library on GitHub, when it's checked out as a submodule of a closed-source git repository?","<p>Here's my situation:  I'm the maintainer of an open-source <a href=""https://github.com/jfriesne/muscle"" rel=""nofollow noreferrer"">library</a> on GitHub, and I also work on various closed-source (non-GitHub-based) git-repositories as part of my employment.  Many of these closed-source git repositories link to my open-source library on GitHub as a submodule.</p>
<p>Because of this, it's often the case that I'll be working on one of the closed-source repositories and I'll come across something that I want to change in my open-source library.  I'll make the change in the submodule and build and test it, and then I want to commit it and push the change to GitHub... and up until about four months ago that worked fine -- but recently GitHub has tightened their security policies so they no longer accept pushes from <code>https</code>-based repository-checkouts, only from <code>ssh</code>-based ones.</p>
<p>However, the <code>.gitmodules</code> file in my closed-source repositories are all configured to check out the open-source submodule via an <code>https</code> URL (so that my co-workers can <code>git submodule update --init --recursive</code> the submodule without having to know my GitHub login info), which means that GitHub won't let me push my changes.</p>
<p>For clarity, here's the relevant excerpt from one of my <code>.gitmodules</code> files:</p>
<pre><code>[submodule &quot;submodules/muscle&quot;]
    path = submodules/muscle
    url = https://github.com/jfriesne/muscle.git
</code></pre>
<p>My work-around has been to keep a separate (<code>ssh</code>-based) checkout of the open source library on my machine, and manually copy any locally-changed files over to that, do a commit-and-push from there, and then go back to my submodule and do a <code>git stash</code> followed by a <code>git pull origin master</code>.  That works, but manually copying files is a bit tedious and error-prone.  I miss being able to just do a simple <code>cd submodules/muscle ; git commit -mblah ; git push</code>, as I could in the past.</p>
<p>My question is, is there any way to authenticate myself to GitHub so that I can push changes to the <code>https</code>-checked-out submodule directly?</p>
","0","131930","",""
"74347397","3204942","2022-11-07 13:30:54","0","16","<github><git-submodules>","date start of submodule with commit number in github and installable git server","<p>Whenever I used a git submodule the commit number was not shown. Now it is shown. From when and which version did github/ git server start using a commit number in the submodules.</p>
<p><a href=""https://i.stack.imgur.com/FTmJg.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FTmJg.jpg"" alt=""submodules without commit number"" /></a></p>
<p><a href=""https://i.stack.imgur.com/QErez.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QErez.jpg"" alt=""submodules with commit number"" /></a></p>
","2","3204942","",""
"74352466","3120582","2022-11-07 20:17:48","0","663","<git><github><git-submodules><ssh-keys>","How to 'git clone --recurse-submodules' a github repo using ssh key, without being asked for username and password?","<p>Hello StackOverflow Community Members,</p>
<p>I'm looking for some help 'git clone --recurse-submodules'ing a github repo using an ssh key, without being asked for username and password.</p>
<p>I have no issues cloning repos using a properly setup ssh key:</p>
<pre><code>git clone git@github.com:{company_name}/{main_repo}.git
</code></pre>
<p>Everything works as expected here and project files are retrieved without asking me for a username and password.</p>
<p>This is not the case however when I try to automatically initialize and update each submodule in the repository (per <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules#:%7E:text=Cloning%20a%20Project%20with%20Submodules&amp;text=If%20you%20pass%20%2D%2Drecurse,the%20repository%20have%20submodules%20themselves."" rel=""nofollow noreferrer"">instructions</a>):</p>
<pre><code>git clone --recurse-submodules git@github.com:{company_name}/{main_repo}.git
</code></pre>
<p>When I run this I am asked for a username and password before any of the submodules are retrieved. This is highly undesired.</p>
<p>Any ideas on why I'm being asked for a username and password when I run with --recurse-submodules?  I have permission to successfully clone the submodule repos individually (without inputing username and password):</p>
<pre><code>git clone git@github.com:{company_name}/{submodule_repo}.git
</code></pre>
<p>Your brilliant assistance is greatly appreciated!</p>
","0","3120582","",""
"74402082","2285240","2022-11-11 11:50:56","1","147","<git><github><git-submodules>","How can I see the the submodules inside of my github repository?","<p>Ive created one repo out of two small repos which are now submodules. In this <code>Master Repo</code>, I can change these submodules and commit them to a PR from the <code>Master Repo</code>, however in Github, I am unable to actually open the submodules in Github. They are hidden behind an unclickable file with the <code>submodule repo #</code> name and the folder icon has a little white arrow pointing right [see image]</p>
<p><a href=""https://i.stack.imgur.com/57rLg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/57rLg.png"" alt=""enter image description here"" /></a></p>
<p>This is the folder structure. Each submodule ofc has its own remote added pointing to the original repo that it came from.</p>
<pre class=""lang-js prettyprint-override""><code>Master Repo -&gt;
  -submodule repo 1 
  -submodule repo 2 
</code></pre>
<p>How can I get github to actually show the contents of these submodules in things like pull request reviews and such?</p>
","0","2285240","",""
"74407772","2517097","2022-11-11 20:26:57","1","24","<git><synchronization><git-submodules>","git: how do I work with a submodule when two people are updating it (two remotes)?","<p>I have a project that relies on a git submodule.  The submodule is also a repository I own, but cloned from another github repository of another user.</p>
<pre><code>The layout is:
      my_project/
         my_submodule/
</code></pre>
<p>I would like to keep my submodule main branch clean and (optionally) synced to the other user's github repository (its main branch also), so I don't mess it up.
But I would like to create new branches and new commits in those new branches of my own submodule so I can send PRs to github and have an &quot;all_commits&quot; branch that holds all my changes to the submodule so I can check the changes with the latest version of my_project.  Basically I am looking to this workflow:</p>
<pre><code>$ cd my_submodule/
$ git switch main
$ git branch new_pr
$ git checkout new_pr
$ emacs somefile.cpp  # change some file
$ git commit -a
$ git push -u origin new_pr
$ git switch all_commits
$ git merge new_pr     # so all_commits holds all my prs and changes
</code></pre>
<p>Once the pr is accepted:</p>
<pre><code>$ cd my_submodule
$ git switch main
$ git &quot;sync&quot; to orig_main  # this is the command I am missing
$ git push -u origin main  # store the new_pr change in my own repository
$ git branch -D new_pr     # remove the new_pr now that it was accepted
</code></pre>
","0","2517097","",""
"74412765","1153026","2022-11-12 12:04:43","0","286","<git><git-submodules>","'git restore .' 'git reset' does not work for ""changes not staged""","<p>My git version is 2.34.1</p>
<p>I am trying to checkout a release by given tag, I am working on this git repo <a href=""https://gitee.com/EspressifSystems/esp-idf.git"" rel=""nofollow noreferrer"">https://gitee.com/EspressifSystems/esp-idf.git</a>
my checkout command <code>git checkout v3.4.3 -b v3.4.3</code></p>
<p>I get git status like:</p>
<pre><code>On branch v4.3.4
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    modified:   components/bt/controller/lib_esp32 (new commits)
    modified:   components/bt/controller/lib_esp32c3_family (new commits)
    modified:   components/bt/host/nimble/nimble (new commits)
    modified:   components/esp_wifi/lib (new commits)
    modified:   components/lwip/lwip (new commits)
    modified:   components/mbedtls/mbedtls (new commits)
    modified:   components/mqtt/esp-mqtt (new commits)
    modified:   components/protobuf-c/protobuf-c (new commits)
    modified:   components/spiffs/spiffs (new commits)
    modified:   components/tinyusb/tinyusb (new commits)
    modified:   examples/peripherals/secure_element/atecc608_ecdsa/components/esp-cryptoauthlib (new commits)

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    components/bt/controller/lib_esp32c2/
    components/bt/controller/lib_esp32h2/
    components/esp_phy/
    components/heap/tlsf/
    components/ieee802154/
    components/openthread/

</code></pre>
<p>I have tried bellow:</p>
<ol>
<li><code>git restore .</code> to ignore everything</li>
<li><code>git restore  components/bt/controller/lib_esp32</code> to ignore one specific item</li>
<li><code>git reset --hard HEAD</code></li>
<li><code>git clean -d -f</code></li>
</ol>
<p>Above commands take no effects</p>
<p>as @phd reminds, those &quot;not staged&quot; belongs to submodules, I tried
5. <code>git submodule foreach git reset --hard;git status</code></p>
<pre><code>git submodule foreach git reset --hard;git status
Entering 'components/bootloader/subproject/components/micro-ecc/micro-ecc'
HEAD is now at d037ec8 Add note that uECC_VLI_NATIVE_LITTLE_ENDIAN affects key compatiblity
Entering 'components/bt/controller/lib_esp32'
HEAD is now at 8188c3b fix esp32 ke_mem.c assert(425d342)
Entering 'components/bt/controller/lib_esp32c3_family'
HEAD is now at d1c2082 fix adv report duplicate check
Entering 'components/bt/host/nimble/nimble'
HEAD is now at 64322688 Fixed compilation error for esp32c2 and esp32h2 when os_mbuf_free is called
Entering 'components/cmock/CMock'
HEAD is now at eeecc49 Merge pull request #312 from Skinner927/patch-1
Entering 'components/esp_wifi/lib'
HEAD is now at 1777992b esp_wifi:bugfix for wifi owe memory leak(98ffa91b)
Entering 'components/json/cJSON'
HEAD is now at d348621 chore: update version and changelog (#610)
Entering 'components/lwip/lwip'
HEAD is now at 3f5a04bc igmp/mld6: Fix on-demand timers to set LWIP_NUM_SYS_TIMEOUT_INTERNAL
Entering 'components/mbedtls/mbedtls'
HEAD is now at 9bb5effc3 ecp: Add support for hardware implementation of ECP routines
Entering 'components/mqtt/esp-mqtt'
HEAD is now at 89e5c60 fix: MQTT tick not starting on connect and switch to esp_timer
Entering 'components/protobuf-c/protobuf-c'
HEAD is now at f224ab2 ChangeLog: 1.4.0
Entering 'components/spiffs/spiffs'
HEAD is now at 0dbb3f7 Merge pull request #288 from igrr/bugfix/spiffs_readdir_errcode
Entering 'components/tinyusb/tinyusb'
HEAD is now at c1986586 remove unused submodules
Entering 'components/unity/unity'
HEAD is now at 7d2bf62 Merge pull request #363 from Deltrix/patch-1
Entering 'examples/build_system/cmake/import_lib/main/lib/tinyxml2'
HEAD is now at 7e8e249 Merge pull request #707 from SwiftEngineering/issue_706
Entering 'examples/peripherals/secure_element/atecc608_ecdsa/components/esp-cryptoauthlib'
HEAD is now at 985ea96 Merge branch 'feature/mbedtls-3.1' into 'master'
On branch v4.3.4
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    modified:   components/bt/controller/lib_esp32 (new commits)
    modified:   components/bt/controller/lib_esp32c3_family (new commits)
    modified:   components/bt/host/nimble/nimble (new commits)
    modified:   components/esp_wifi/lib (new commits)
    modified:   components/lwip/lwip (new commits)
    modified:   components/mbedtls/mbedtls (new commits)
    modified:   components/mqtt/esp-mqtt (new commits)
    modified:   components/protobuf-c/protobuf-c (new commits)
    modified:   components/spiffs/spiffs (new commits)
    modified:   components/tinyusb/tinyusb (new commits)
    modified:   examples/peripherals/secure_element/atecc608_ecdsa/components/esp-cryptoauthlib (new commits)

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    components/bt/controller/lib_esp32c2/
    components/bt/controller/lib_esp32h2/
    components/esp_phy/
    components/heap/tlsf/
    components/ieee802154/
    components/openthread/

</code></pre>
","9","1153026","",""
"74418635","16368705","2022-11-13 05:14:31","0","181","<git><continuous-integration><bitbucket><git-submodules><bitbucket-pipelines>","Is there any way to automatically update git submodule in remote (bitbucket)?","<p>I have CI/CD pipeline in my parent git repository. But whenever I commit new changes in submodule, I have to update the parent repository again. This is quite painful now.
Is there any way to automatically update the submodule.
I am using Bitbucket.</p>
<p>I found <a href=""https://community.atlassian.com/t5/Bitbucket-questions/How-to-make-the-parent-git-folder-always-point-to-latest-commit/qaq-p/1783602"" rel=""nofollow noreferrer"">this</a> but solution seems vague to me.</p>
","2","16368705","",""
"74427767","17247195","2022-11-14 06:43:26","0","27","<git><git-submodules><yarn-workspaces>","`git add packages/fevm` is not adding submodule to staging in Git","<p>We have a workspace setuped using yarn. Inside <code>packages</code> folder we have another folder <code>fevm</code> which is actually I have cloned from a starter template repo. Therefore I have another repo inside my repo.
I want to commit the changes and push to my repo but not able to add <code>fevm</code> to staging. We have tried <code>git add packages/fevm</code> no error shown up still running <code>git status</code> it's not stagged.</p>
<pre><code> git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   packages/fevm (modified content)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>Please let me know how can we commit this another repo inside our repo too.</p>
","1","17247195","",""
"74419043","6352099","2022-11-13 06:53:13","0","975","<git><cmake><git-submodules>","cmake FetchContent_Declare: Is there a way to have FetchContent not bring in the git repo submodules?","<p>I use <code>FetchContent</code> in my <code>CMakeLists.txt</code> to bring in a git repo I need for my build. Everything works fine. However, it also brings in a (large) submodule I don't need for the build. It seems that content fetching will update the submodules even if <code>GIT_SUBMODULES &quot;&quot;</code> argument is not present under <code>FetchContent_Declare</code>.
So, how do I achieve that? cmake's documentation isn't very clear for this use case.</p>
","2","6352099","",""
"74439525","1223975","2022-11-15 00:49:46","-2","27","<git-submodules>","Give developer access to part of repo by using git submodules?","<p>I have a repository and I need work done by some subcontractors, let's say.
Instead of splitting the repo up into dependencies, to hide proprietary code, I can easily put all of the non-sensitive code in a folder, and somehow just give the subcontractors access to this one folder. Is this a good use case for <code>git submodules</code>? If so, what might the workflow look like exactly?</p>
","0","1223975","",""
"74460329","2340598","2022-11-16 12:17:14","1","65","<git><git-submodules>","Is it possible to specify which commits to clone with git submodules?","<p>I am using <code>.gitmodules</code> file to specify a git submodule for my main repo:</p>
<pre class=""lang-yaml prettyprint-override""><code>[submodule &quot;SUBMODULE&quot;]
    path = ...
    url = ...
</code></pre>
<p>And then in the command line: <code>git clone MAINREPO --recursive</code>.</p>
<p>Is it possible to specify which commit of the submodule to check out <strong>in the cloning command</strong>?</p>
","2","2340598","",""
"74491988","3526758","2022-11-18 15:36:49","0","209","<git><azure-devops><git-submodules>","Azure Pipelines: Select branch for git-submodule","<p>I've an environment which makes use of git submodules.</p>
<p>When making a change in the underlying submodule-repo I've always to create a branch on top level, make a change in the submodule reference and push it to server. Then I'm ready to run a pipeline with needed commit of the submodule.</p>
<p>In order to make this easier, I would like to have the possibility to select a branch or commit of the submodule when starting the build on top level.</p>
<p>On jenkins, I used to use an optional parameter created by <a href=""https://plugins.jenkins.io/git-parameter/"" rel=""nofollow noreferrer"">https://plugins.jenkins.io/git-parameter/</a> to select a branch of the submodule.</p>
<p>Unfortunately, I didn't find anything like that for Azure Pipelines. In the list of <a href=""https://learn.microsoft.com/en-us/azure/devops/pipelines/process/runtime-parameters?view=azure-devops&amp;tabs=script#parameter-data-types"" rel=""nofollow noreferrer"">Parameter data types</a> I've found <code>type: string</code> only, which is quite simplistic compared to what I've had in jenkins.</p>
<p>Logic would be:</p>
<pre><code>IF parameter for submodule branch is set
THEN 
$ cd submodule_path
$ git checkout --detach &lt;optional branch&gt;
</code></pre>
<p>Is there any easy or build-in solution for this task? I would appreciate a dropdown parameter list instead of adding the branch name manually.</p>
<p>I know that this approach has drawbacks in terms of reproducibility and traceability, but benefits for hands-on testing are quite large.</p>
","0","3526758","",""
"74549285","4550606","2022-11-23 15:28:17","0","53","<github-actions><git-submodules>","GithubActions add multiple tokens for git submodules recursive?","<p>Problem: I'm trying to checkout my repository with submodules, the submodules are located on remote gitlab server. If i add [token: 'some-token'] to access this remote gitlab, GithubActions fails for original github repo since it also requires the default ${{ github.token }}.</p>
<p>My question is how can I checkout my repo with remote submodules, it's seems such a generic case but i can't seem to find straight forward way to make it work?</p>
<pre><code>jobs:
    build:
        runs-on: [ self-hosted, Linux ]
        
        steps:
        # Checkout the repo
        - uses: actions/checkout@v2
          with:
            submodules: recursive
</code></pre>
","0","4550606","",""
"74715576","20348626","2022-12-07 11:00:28","1","39","<git><version-control><git-submodules>","How to manage multiple local git repositories at once (a la submodules, but w/ 1 remote repo)?","<p>I have a number of git repositories at school that I want to manage &amp; share at once, so that I can work on them at home too.<br />
But I don't want to create remote repos for each of those repositories.</p>
<p>Folder structure:<br />
-- basefolder<br />
| - project1 (repo)<br />
| - project2 (repo)<br />
| - project3 (repo)<br />
...</p>
<p>What I want is to have single repo (basefolder) that contains each of the 'subrepos'. As if I'd copied the folder (basefolder) using usb/dropbox etc.</p>
<p>I thought submodules were the way to go, and I researched submodules, and created sample repositores to try it out.</p>
<p>I created submodules with relative paths, but cloning the 'superproject' then <code>submodule init &amp;&amp; submodule update</code> doesn't get me the files from the submodules. The urls are local &amp; don't exist on a different machine.<br />
Having remote repos for each 'sub-repo' (project 1~) would make this work, but as I stated above I don't want to create separate repos for each project.`</p>
<p>I also know that I can concatenate them into one repo (basefolder), but I'd like to keep the histories of each project separate.</p>
","2","20348626","",""
"74718210","3416648","2022-12-07 14:28:27","1","31","<git><git-submodules>","git add submodule/path vs git submodule --init (submodule reference update)","<p>What should I use to update the reference to the committed submodule to the parent project
so nect time I clone recursively the project It downloads the correct submodule commit?</p>
<p>Should I opt for <code>git submodule --init</code> or should I just <code>git add submodule/path</code> commit and push?</p>
<p>Note: my submodules are specific tags, not branches that have to be followed</p>
","0","3416648","",""
"74757702","1601580","2022-12-11 01:13:19","0","105","<git><git-submodules>","Why is git submodules saying there isn't a url when there is one even when I try different versions of it?","<p>I am trying to pull a git submodule but it complains that the url is not found. Why is that? Everything seems in order:</p>
<ul>
<li>the folder with code in the submodule seems to be there</li>
<li>the .modules file seems right</li>
<li>the url doesn't seem wrong compared to other ones. I tried https but didn't help.</li>
</ul>
<p>So what's the issue?</p>
<p>See the modules file is correct:</p>
<pre><code>$ git submodule update &amp;&amp; git submodule init
fatal: No url found for submodule path 'coq-projects/coq-projects/lin-alg' in .gitmodules
$ rm -rf coq-projects/lin-alg
$ cat .gitmodules | grep lin-alg
[submodule &quot;coq-projects/lin-alg&quot;]
    path = coq-projects/lin-alg
    url = git@github.com:HazardousPeach/lin-alg-8.10.git
$ git submodule update &amp;&amp; git submodule init

Submodule path 'coq-projects/lin-alg': checked out 'aa5a7cc4105fd20debf4c13a7d40392e34631610'
fatal: No url found for submodule path 'coq-projects/coq-projects/lin-alg' in .gitmodules
$
$ ls coq-projects/lin-alg/
_CoqProject  description  examples  extras  filesInOrder  first_page.v  LICENSE  LinAlg  Makefile  README.md  support
$ cat .gitmodules | grep lin-alg
[submodule &quot;coq-projects/lin-alg&quot;]
    path = coq-projects/lin-alg
    url = git@github.com:HazardousPeach/lin-alg-8.10.git
</code></pre>
<p>look the https is not needed the other repos look fine:</p>
<pre><code>[submodule &quot;coq-projects/fermat4&quot;]
    path = coq-projects/fermat4
    url = git@github.com:coq-contribs/fermat4.git
</code></pre>
<p>this also failed:</p>
<pre><code>$ rm -rf coq-projects/lin-alg
$ git submodule add -f --name coq-projects/lin-alg https://github.com/coq-contribs/lin-alg.git coq-projects/lin-alg
Reactivating local git directory for submodule 'coq-projects/lin-alg'.

$
$ cat .gitmodules | grep lin-alg
[submodule &quot;coq-projects/lin-alg&quot;]
    path = coq-projects/lin-alg
    url = https://github.com/coq-contribs/lin-alg.git
$ git submodule update &amp;&amp; git submodule init
fatal: No url found for submodule path 'coq-projects/coq-projects/lin-alg' in .gitmodules
</code></pre>
<p>this still failed:</p>
<pre><code>$ rm -rf coq-projects/lin-alg
$
$ git submodule add -f --name coq-projects/lin-alg-8.10 git@github.com:HazardousPeach/lin-alg-8.10.git coq-projects/lin-alg
Reactivating local git directory for submodule 'coq-projects/lin-alg-8.10'.
$ cat .gitmodules | grep lin-alg
[submodule &quot;coq-projects/lin-alg-8.10&quot;]
    path = coq-projects/lin-alg
    url = git@github.com:HazardousPeach/lin-alg-8.10.git
$ git submodule update &amp;&amp; git submodule init
fatal: No url found for submodule path 'coq-projects/coq-projects/lin-alg' in .gitmodules
</code></pre>
<p>I thought that once the submodule name had the 8.10 it would work -- which matches his .gitmodules file <a href=""https://github.com/UCSD-PL/proverbot9001/blob/e89e89cf3b3ee24d04b2dc5e965e787f714340f0/.gitmodules#L134"" rel=""nofollow noreferrer"">https://github.com/UCSD-PL/proverbot9001/blob/e89e89cf3b3ee24d04b2dc5e965e787f714340f0/.gitmodules#L134</a></p>
<p>I don't understand why there are two coq-projects/coq-projects</p>
<pre><code>$ cat .submodules | grep coq-projects/coq-projects/lin-alg
cat: .submodules: No such file or directory
$ ls coq-projects/coq-projects/lin-alg
ls: cannot access 'coq-projects/coq-projects/lin-alg': No such file or directory
</code></pre>
<p>it's not there:</p>
<pre><code>$ opam list | grep lin-alg
$
</code></pre>
<hr />
<h1>New attempt</h1>
<pre><code>(iit_synthesis) brando9~/proverbot9001 $ eval $(opam env --switch=coq-8.10 --set-switch)
(iit_synthesis) brando9~/proverbot9001 $
(iit_synthesis) brando9~/proverbot9001 $
(iit_synthesis) brando9~/proverbot9001 $ git submodule add -f --name coq-projects/lin-alg-8.10 git@github.com:HazardousPeach/lin-alg-8.10.git coq-projects/lin-alg
Adding existing repo at 'coq-projects/lin-alg' to the index
(iit_synthesis) brando9~/proverbot9001 $
(iit_synthesis) brando9~/proverbot9001 $ git submodule update --init coq-projects/lin-alg
(iit_synthesis) brando9~/proverbot9001 $ (cd coq-projects/lin-alg &amp;&amp; make &quot;$@&quot; &amp;&amp; make install)
]make -f Makefile.coq Makefile
make[1]: Entering directory '/afs/cs.stanford.edu/u/brando9/proverbot9001/coq-projects/lin-alg'
make[1]: Nothing to be done for 'Makefile'.
make[1]: Leaving directory '/afs/cs.stanford.edu/u/brando9/proverbot9001/coq-projects/lin-alg'
make -f Makefile.coq all
make[1]: Entering directory '/afs/cs.stanford.edu/u/brando9/proverbot9001/coq-projects/lin-alg'
W: This Makefile was generated by Coq 8.15.2
W: while the current Coq version is 8.10.2
COQC support/equal_syntax.v
COQC support/more_syntax.v
File &quot;./support/more_syntax.v&quot;, line 18, characters 0-39:
Warning:
New coercion path [Build_cring; cring_ring; ring_group; abelian_group_on_def;
...
roup_sgroup] : ring_on &gt;-&gt; sgroup.
New coercion path [ring_monoid; Build_monoid] : ring_on &gt;-&gt; monoid is ambiguous with existing
[Build_ring; ring_group; abelian_group_group; group_monoid] : ring_on &gt;-&gt; monoid.
New coercion path [abelian_group_group; group_monoid; monoid_on_def;
                   Build_monoid] : abelian_group &gt;-&gt; monoid is ambiguous with existing
[abelian_group_group; group_monoid] : abelian_group &gt;-&gt; monoid.
New coercion path [abelian_group_abelian_monoid; Build_abelian_monoid;
                   abelian_monoid_monoid; monoid_on_def; Build_monoid] : abelian_group_on &gt;-&gt; monoid is ambiguous with existing
[abelian_group_abelian_monoid; Build_abelian_monoid; abelian_monoid_monoid] : abelian_group_on &gt;-&gt; monoid.
New coercion path [abelian_monoid_monoid; monoid_on_def; Build_monoid] : abelian_monoid &gt;-&gt; monoid is ambiguous with existing
[abelian_monoid_monoid] : abelian_monoid &gt;-&gt; monoid.
New coercion path [Build_abelian_monoid; abelian_monoid_monoid;
                   monoid_on_def; Build_monoid] : abelian_monoid_on &gt;-&gt; monoid is ambiguous with existing
[Build_abelian_monoid; abelian_monoid_monoid] : abelian_monoid_on &gt;-&gt; monoid.
New coercion path [Build_group; group_monoid; monoid_on_def; Build_monoid] : group_on &gt;-&gt; monoid is ambiguous with existing
[Build_group; group_monoid] : group_on &gt;-&gt; monoid.
New coercion path [group_monoid; monoid_on_def; Build_monoid] : group &gt;-&gt; monoid is ambiguous with existing
[group_monoid] : group &gt;-&gt; monoid. [ambiguous-paths,typechecker]
COQC LinAlg/vecspaces_verybasic.v
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 19, characters 0-31:
Warning: There is no option Automatic Coercions Import.
[unknown-option,option]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 22, characters 0-40:
Warning: Use of “Require” inside a section is deprecated.
[require-in-section,deprecated]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 22, characters 0-40:
Warning:
New coercion path [Build_field; field_ring; ring_on_def; Build_ring] : field_on &gt;-&gt; ring is ambiguous with existing
[Build_field; field_ring] : field_on &gt;-&gt; ring.
New coercion path [field_ring; ring_on_def; Build_ring] : field &gt;-&gt; ring is ambiguous with existing
[field_ring] : field &gt;-&gt; ring. [ambiguous-paths,typechecker]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 22, characters 0-40:
Warning:
New coercion path [Build_cring; cring_ring; ring_group; abelian_group_on_def;
                   Build_abelian_group] : cring_on &gt;-&gt; abelian_group is ambiguous with existing
[Build_cring; cring_ring; ring_group] : cring_on &gt;-&gt; abelian_group.
New coercion path [cring_ring; ring_group; abelian_group_on_def;
                   Build_abelian_group] : cring &gt;-&gt; abelian_group is ambiguous with existing
[cring_ring; ring_group] : cring &gt;-&gt; abelian_group.
New coercion path [Build_ring; ring_group; abelian_group_on_def;
                   Build_abelian_group] : ring_on &gt;-&gt; abelian_group is ambiguous with existing
[Build_ring; ring_group] : ring_on &gt;-&gt; abelian_group.
New coercion path [Build_field; field_ring; ring_group; abelian_group_on_def;
                   Build_abelian_group] : field_on &gt;-&gt; abelian_group is ambiguous with existing
[Build_field; field_ring; ring_group] : field_on &gt;-&gt; abelian_group.
New coercion path [ring_group; abelian_group_on_def; Build_abelian_group] : ring &gt;-&gt; abelian_group is ambiguous with existing
[ring_group] : ring &gt;-&gt; abelian_group.
New coercion path [field_ring; ring_group; abelian_group_on_def;
                   Build_abelian_group] : field &gt;-&gt; abelian_group is ambiguous with existing
[field_ring; ring_group] : field &gt;-&gt; abelian_group.
[ambiguous-paths,typechecker]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 22, characters 0-40:
Warning:
New coercion path [Build_abelian_group; abelian_group_group; group_on_def;
                   Build_group] : abelian_group_on &gt;-&gt; group is ambiguous with existing
[Build_abelian_group; abelian_group_group] : abelian_group_on &gt;-&gt; group.
New coercion path [Build_cring; cring_ring; ring_group; abelian_group_group;
                   group_on_def; Build_group] : cring_on &gt;-&gt; group is ambiguous with existing
[Build_cring; cring_ring; ring_group; abelian_group_group] : cring_on &gt;-&gt; group.
New coercion path [cring_ring; ring_group; abelian_group_group; group_on_def;
                   Build_group] : cring &gt;-&gt; group is ambiguous with existing
[cring_ring; ring_group; abelian_group_group] : cring &gt;-&gt; group.
New coercion path [abelian_group_group; group_on_def; Build_group] : abelian_group &gt;-&gt; group is ambiguous with existing
[abelian_group_group] : abelian_group &gt;-&gt; group.
New coercion path [Build_ring; ring_group; abelian_group_group; group_on_def;
                   Build_group] : ring_on &gt;-&gt; group is ambiguous with existing
[Build_ring; ring_group; abelian_group_group] : ring_on &gt;-&gt; group.
New coercion path [Build_field; field_ring; ring_group; abelian_group_group;
                   group_on_def; Build_group] : field_on &gt;-&gt; group is ambiguous with existing
[Build_field; field_ring; ring_group; abelian_group_group] : field_on &gt;-&gt; group.
New coercion path [ring_group; abelian_group_group; group_on_def; Build_group] : ring &gt;-&gt; group is ambiguous with existing
[ring_group; abelian_group_group] : ring &gt;-&gt; group.
New coercion path [field_ring; ring_group; abelian_group_group; group_on_def;
                   Build_group] : field &gt;-&gt; group is ambiguous with existing
[field_ring; ring_group; abelian_group_group] : field &gt;-&gt; group.
[ambiguous-paths,typechecker]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 22, characters 0-40:
Warning:
New coercion path [abelian_group_abelian_monoid;
                   abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : abelian_group_on &gt;-&gt; sgroup is ambiguous with existing
[abelian_group_abelian_monoid; abelian_monoid_abelian_sgroup;
 Build_abelian_sgroup; abelian_sgroup_sgroup] : abelian_group_on &gt;-&gt; sgroup.
New coercion path [abelian_monoid_on_def; abelian_monoid_abelian_sgroup;
                   Build_abelian_sgroup; abelian_sgroup_sgroup;
                   sgroup_on_def; Build_sgroup] : abelian_monoid &gt;-&gt; sgroup is ambiguous with existing
[abelian_monoid_on_def; abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
 abelian_sgroup_sgroup] : abelian_monoid &gt;-&gt; sgroup.
New coercion path [abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : abelian_monoid_on &gt;-&gt; sgroup is ambiguous with existing
[abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : abelian_monoid_on &gt;-&gt; sgroup.
New coercion path [Build_abelian_sgroup; abelian_sgroup_sgroup;
                   sgroup_on_def; Build_sgroup] : abelian_sgroup_on &gt;-&gt; sgroup is ambiguous with existing
[Build_abelian_sgroup; abelian_sgroup_sgroup] : abelian_sgroup_on &gt;-&gt; sgroup.
New coercion path [abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : abelian_sgroup &gt;-&gt; sgroup is ambiguous with existing
[abelian_sgroup_sgroup] : abelian_sgroup &gt;-&gt; sgroup.
New coercion path [Build_cring; cring_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid;
                   abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : cring_on &gt;-&gt; sgroup is ambiguous with existing
[Build_cring; cring_ring; ring_group; abelian_group_on_def;
 abelian_group_abelian_monoid; abelian_monoid_abelian_sgroup;
 Build_abelian_sgroup; abelian_sgroup_sgroup] : cring_on &gt;-&gt; sgroup.
New coercion path [cring_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid;
                   abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : cring &gt;-&gt; sgroup is ambiguous with existing
[cring_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : cring &gt;-&gt; sgroup.
New coercion path [abelian_group_on_def; abelian_group_abelian_monoid;
                   abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : abelian_group &gt;-&gt; sgroup is ambiguous with existing
[abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : abelian_group &gt;-&gt; sgroup.
New coercion path [Build_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid;
                   abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : ring_on &gt;-&gt; sgroup is ambiguous with existing
[Build_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : ring_on &gt;-&gt; sgroup.
New coercion path [Build_field; field_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid;
                   abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : field_on &gt;-&gt; sgroup is ambiguous with existing
[Build_field; field_ring; ring_group; abelian_group_on_def;
 abelian_group_abelian_monoid; abelian_monoid_abelian_sgroup;
 Build_abelian_sgroup; abelian_sgroup_sgroup] : field_on &gt;-&gt; sgroup.
New coercion path [ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid;
                   abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : ring &gt;-&gt; sgroup is ambiguous with existing
[ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : ring &gt;-&gt; sgroup.
New coercion path [field_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid;
                   abelian_monoid_abelian_sgroup; Build_abelian_sgroup;
                   abelian_sgroup_sgroup; sgroup_on_def; Build_sgroup] : field &gt;-&gt; sgroup is ambiguous with existing
[field_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : field &gt;-&gt; sgroup.
[ambiguous-paths,typechecker]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 22, characters 0-40:
Warning:
New coercion path [Build_cring; cring_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid; Build_abelian_monoid;
                   abelian_monoid_monoid; monoid_on_def] : cring_on &gt;-&gt; monoid_on is ambiguous with existing
[Build_cring; cring_ring; ring_on_def; ring_monoid] : cring_on &gt;-&gt; monoid_on.
New coercion path [cring_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid; Build_abelian_monoid;
                   abelian_monoid_monoid; monoid_on_def] : cring &gt;-&gt; monoid_on is ambiguous with existing
[cring_ring; ring_on_def; ring_monoid] : cring &gt;-&gt; monoid_on.
New coercion path [Build_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid; Build_abelian_monoid;
                   abelian_monoid_monoid; monoid_on_def] : ring_on &gt;-&gt; monoid_on is ambiguous with existing
[ring_monoid] : ring_on &gt;-&gt; monoid_on.
New coercion path [Build_field; field_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid; Build_abelian_monoid;
                   abelian_monoid_monoid; monoid_on_def] : field_on &gt;-&gt; monoid_on is ambiguous with existing
[Build_field; field_ring; ring_on_def; ring_monoid] : field_on &gt;-&gt; monoid_on.
New coercion path [ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid; Build_abelian_monoid;
                   abelian_monoid_monoid; monoid_on_def] : ring &gt;-&gt; monoid_on is ambiguous with existing
[ring_on_def; ring_monoid] : ring &gt;-&gt; monoid_on.
New coercion path [field_ring; ring_group; abelian_group_on_def;
                   abelian_group_abelian_monoid; Build_abelian_monoid;
                   abelian_monoid_monoid; monoid_on_def] : field &gt;-&gt; monoid_on is ambiguous with existing
[field_ring; ring_on_def; ring_monoid] : field &gt;-&gt; monoid_on.
[ambiguous-paths,typechecker]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 22, characters 0-40:
Warning:
New coercion path [Build_group; group_monoid; monoid_on_def; Build_monoid] : group_on &gt;-&gt; monoid is ambiguous with existing
[Build_group; group_monoid] : group_on &gt;-&gt; monoid.
New coercion path [group_monoid; monoid_on_def; Build_monoid] : group &gt;-&gt; monoid is ambiguous with existing
[group_monoid] : group &gt;-&gt; monoid.
New coercion path [abelian_group_abelian_monoid; Build_abelian_monoid;
                   abelian_monoid_monoid; monoid_on_def; Build_monoid] : abelian_group_on &gt;-&gt; monoid is ambiguous with existing
[abelian_group_abelian_monoid; Build_abelian_monoid; abelian_monoid_monoid] : abelian_group_on &gt;-&gt; monoid.
New coercion path [abelian_monoid_monoid; monoid_on_def; Build_monoid] : abelian_monoid &gt;-&gt; monoid is ambiguous with existing
[abelian_monoid_monoid] : abelian_monoid &gt;-&gt; monoid.
New coercion path [Build_abelian_monoid; abelian_monoid_monoid;
                   monoid_on_def; Build_monoid] : abelian_monoid_on &gt;-&gt; monoid is ambiguous with existing
[Build_abelian_monoid; abelian_monoid_monoid] : abelian_monoid_on &gt;-&gt; monoid.
New coercion path [Build_cring; cring_ring; ring_on_def; ring_monoid;
                   Build_monoid; monoid_sgroup; sgroup_on_def] : cring_on &gt;-&gt; sgroup_on is ambiguous with existing
[Build_cring; cring_ring; ring_group; abelian_group_on_def;
 abelian_group_abelian_monoid; abelian_monoid_abelian_sgroup;
 Build_abelian_sgroup; abelian_sgroup_sgroup; sgroup_on_def] : cring_on &gt;-&gt; sgroup_on.
New coercion path [Build_cring; cring_ring; ring_on_def; ring_monoid;
                   Build_monoid; monoid_sgroup] : cring_on &gt;-&gt; sgroup is ambiguous with existing
[Build_cring; cring_ring; ring_group; abelian_group_on_def;
 abelian_group_abelian_monoid; abelian_monoid_abelian_sgroup;
 Build_abelian_sgroup; abelian_sgroup_sgroup] : cring_on &gt;-&gt; sgroup.
New coercion path [Build_cring; cring_ring; ring_on_def; ring_monoid;
                   Build_monoid] : cring_on &gt;-&gt; monoid is ambiguous with existing
[Build_cring; cring_ring; ring_group; abelian_group_on_def;
 abelian_group_abelian_monoid; Build_abelian_monoid; abelian_monoid_monoid] : cring_on &gt;-&gt; monoid.
New coercion path [cring_ring; ring_on_def; ring_monoid; Build_monoid;
                   monoid_sgroup; sgroup_on_def] : cring &gt;-&gt; sgroup_on is ambiguous with existing
[cring_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup;
 sgroup_on_def] : cring &gt;-&gt; sgroup_on.
New coercion path [cring_ring; ring_on_def; ring_monoid; Build_monoid;
                   monoid_sgroup] : cring &gt;-&gt; sgroup is ambiguous with existing
[cring_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : cring &gt;-&gt; sgroup.
New coercion path [cring_ring; ring_on_def; ring_monoid; Build_monoid] : cring &gt;-&gt; monoid is ambiguous with existing
[cring_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 Build_abelian_monoid; abelian_monoid_monoid] : cring &gt;-&gt; monoid.
New coercion path [abelian_group_on_def; abelian_group_abelian_monoid;
                   Build_abelian_monoid; abelian_monoid_monoid;
                   monoid_on_def; Build_monoid] : abelian_group &gt;-&gt; monoid is ambiguous with existing
[abelian_group_on_def; abelian_group_abelian_monoid; Build_abelian_monoid;
 abelian_monoid_monoid] : abelian_group &gt;-&gt; monoid.
New coercion path [ring_monoid; Build_monoid; monoid_sgroup; sgroup_on_def] : ring_on &gt;-&gt; sgroup_on is ambiguous with existing
[Build_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup;
 sgroup_on_def] : ring_on &gt;-&gt; sgroup_on.
New coercion path [ring_monoid; Build_monoid; monoid_sgroup] : ring_on &gt;-&gt; sgroup is ambiguous with existing
[Build_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : ring_on &gt;-&gt; sgroup.
New coercion path [ring_monoid; Build_monoid] : ring_on &gt;-&gt; monoid is ambiguous with existing
[Build_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 Build_abelian_monoid; abelian_monoid_monoid] : ring_on &gt;-&gt; monoid.
New coercion path [Build_field; field_ring; ring_on_def; ring_monoid;
                   Build_monoid; monoid_sgroup; sgroup_on_def] : field_on &gt;-&gt; sgroup_on is ambiguous with existing
[Build_field; field_ring; ring_group; abelian_group_on_def;
 abelian_group_abelian_monoid; abelian_monoid_abelian_sgroup;
 Build_abelian_sgroup; abelian_sgroup_sgroup; sgroup_on_def] : field_on &gt;-&gt; sgroup_on.
New coercion path [Build_field; field_ring; ring_on_def; ring_monoid;
                   Build_monoid; monoid_sgroup] : field_on &gt;-&gt; sgroup is ambiguous with existing
[Build_field; field_ring; ring_group; abelian_group_on_def;
 abelian_group_abelian_monoid; abelian_monoid_abelian_sgroup;
 Build_abelian_sgroup; abelian_sgroup_sgroup] : field_on &gt;-&gt; sgroup.
New coercion path [Build_field; field_ring; ring_on_def; ring_monoid;
                   Build_monoid] : field_on &gt;-&gt; monoid is ambiguous with existing
[Build_field; field_ring; ring_group; abelian_group_on_def;
 abelian_group_abelian_monoid; Build_abelian_monoid; abelian_monoid_monoid] : field_on &gt;-&gt; monoid.
New coercion path [ring_on_def; ring_monoid; Build_monoid; monoid_sgroup;
                   sgroup_on_def] : ring &gt;-&gt; sgroup_on is ambiguous with existing
[ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup;
 sgroup_on_def] : ring &gt;-&gt; sgroup_on.
New coercion path [ring_on_def; ring_monoid; Build_monoid; monoid_sgroup] : ring &gt;-&gt; sgroup is ambiguous with existing
[ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : ring &gt;-&gt; sgroup.
New coercion path [ring_on_def; ring_monoid; Build_monoid] : ring &gt;-&gt; monoid is ambiguous with existing
[ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 Build_abelian_monoid; abelian_monoid_monoid] : ring &gt;-&gt; monoid.
New coercion path [field_ring; ring_on_def; ring_monoid; Build_monoid;
                   monoid_sgroup; sgroup_on_def] : field &gt;-&gt; sgroup_on is ambiguous with existing
[field_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup;
 sgroup_on_def] : field &gt;-&gt; sgroup_on.
New coercion path [field_ring; ring_on_def; ring_monoid; Build_monoid;
                   monoid_sgroup] : field &gt;-&gt; sgroup is ambiguous with existing
[field_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 abelian_monoid_abelian_sgroup; Build_abelian_sgroup; abelian_sgroup_sgroup] : field &gt;-&gt; sgroup.
New coercion path [field_ring; ring_on_def; ring_monoid; Build_monoid] : field &gt;-&gt; monoid is ambiguous with existing
[field_ring; ring_group; abelian_group_on_def; abelian_group_abelian_monoid;
 Build_abelian_monoid; abelian_monoid_monoid] : field &gt;-&gt; monoid.
[ambiguous-paths,typechecker]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 23, characters 0-28:
Warning: Use of “Require” inside a section is deprecated.
[require-in-section,deprecated]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 24, characters 0-27:
Warning: Use of “Require” inside a section is deprecated.
[require-in-section,deprecated]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 25, characters 0-41:
Warning: Use of “Require” inside a section is deprecated.
[require-in-section,deprecated]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 70, characters 0-35:
Warning: Adding and removing hints in the core database implicitly is
deprecated. Please specify a hint database.
[implicit-core-hint-db,deprecated]
File &quot;./LinAlg/vecspaces_verybasic.v&quot;, line 88, characters 0-4:
Error:
 (in proof Zero_times_a_vector_gives_zero): Attempt to save an incomplete proof

make[2]: *** [Makefile.coq:764: LinAlg/vecspaces_verybasic.vo] Error 1
make[1]: *** [Makefile.coq:387: all] Error 2
make[1]: Leaving directory '/afs/cs.stanford.edu/u/brando9/proverbot9001/coq-projects/lin-alg'
make: *** [Makefile:2: all] Error 2
</code></pre>
<p>still fails.</p>
","5","1601580","",""
"74764276","13426586","2022-12-11 20:29:01","0","41","<git><gitlab><git-submodules>","Treat git submodule like directory and track changes in outer Repository","<p>I have a git repo with a gitlab remote.
Inside of that repo I have a submodule folder connected to github.
How can I make the outer repo treat the submodule like it was just another folder inside of it?</p>
<p>Right now when i make changes in the inner repo I don't see specific changes in the outer repo when running git status, allI see is that there have been new commits or there is modified content. This seems like the normal submodules behavior.
On gitlab, it is not possible to see the files in the submodule since they are in the private github repo. This is my biggest issue since I need others to see the content of that submodule on gitlab.
Submodules might not be the way to go here but how can I make the inner folder and all files in there visible in the outer repo while staying connected to both remotes?</p>
<p>I saw that in order to integrate a different git repo into another, submodules are suggested but it seems like there is no way to treat a submodule like a normal folder.</p>
<p>I saw <a href=""https://stackoverflow.com/questions/60763205/how-to-treat-nested-repository-submodule-like-a-normal-directory"">this</a> but I don't want to remove the connection to the private github repo.</p>
","3","13426586","",""
"74757297","1601580","2022-12-10 23:28:48","5","242","<git><git-submodules>","how do I make sure to re-add a submodule correctly with a git command without manually updating .gitmodulefiles?","<p>One of the projects I am using has in it/s .gitmodules file:</p>
<pre><code>(iit_synthesis) brando9~/proverbot9001 $ cat .gitmodules  | grep 'metalib'
[submodule &quot;deps/metalib&quot;]
    path = deps/metalib
    url = git@github.com:plclub/metalib.git
</code></pre>
<p><a href=""https://github.com/UCSD-PL/proverbot9001/issues/59"" rel=""nofollow noreferrer"">but I am pretty sure it should be</a>:</p>
<pre><code>[submodule &quot;coq-projects/metalib&quot;]
    path = coq-projects/metalib
    url = git@github.com:plclub/metalib.git
</code></pre>
<p>when I do it by the command line it doesn't let me due to the gitignore file:</p>
<pre><code>(iit_synthesis) brandomiranda~/proverbot9001 ❯ git submodule add --name coq-projects/metalib https://git@github.com:plclub/metalib.git coq-projects/metalib

The following paths are ignored by one of your .gitignore files:
coq-projects
coq-projects/metalib
hint: Use -f if you really want to add them.
hint: Turn this message off by running
hint: &quot;git config advice.addIgnoredFile false&quot;
</code></pre>
<p>I am going to modify it manually but it feels dirty, weird. Then I will force it to update:</p>
<pre><code>git submodule update &amp;&amp; git submodule init # todo modify to only target metalib
</code></pre>
<p>What is the proper way using the git command to re-add from stratch and update a specific git module.</p>
<hr />
<p>Is the proper solution to do:</p>
<pre><code>git submodule add -f --name coq-projects/metalib https://github.com/plclub/metalib.git coq-projects/metalib
</code></pre>
<p>feels hacky? Will it always work?</p>
<hr />
<p>Bounty: ideal solution, # -- Pull metalib explicitly 1st before doing the standard git submodule &quot;pulls/inits&quot; (for now hope to fix later so git &quot;pull&quot; does it all)</p>
<pre><code>#-- Pull metalib explicitly 1st before doing the standard git submodule &quot;pulls/inits&quot; (for now hope to fix later so git &quot;pull&quot; does it all)
# - I think this pulls the coq projects properly in proverbot
# todo: Q: metalib missing, how do I pull it with original git submodule commands?
# todo: https://stackoverflow.com/questions/74757297/how-do-i-make-sure-to-re-add-a-submodule-correctly-with-a-git-command-without-ma
# todo: https://github.com/UCSD-PL/proverbot9001/issues/59
# todo: https://github.com/UCSD-PL/proverbot9001/issues/60
# ### rm -rf coq-projects/metalib  # why?
git submodule add -f --name coq-projects/metalib https://github.com/plclub/metalib.git coq-projects/metalib
</code></pre>
<p>e.g. with:</p>
<pre><code>git submodule update &amp;&amp; git submodule init
</code></pre>
<hr />
<h1>Bounty2: Need details in answers to be able to verify suggestions actually work</h1>
<p>I'd like that the answers given have more details by providing checks I can do to check that the updated gitmodules is as expected either in the .gitmodules files, downloaded repo or any check. Code and natural language explanations are best for verification.</p>
<hr />
<h1>Which is first init or update?</h1>
<p>Related note, when I should run <code>git submodule update</code> vs <code>git submodule init</code> vs is really confusing me. I usually do <code>git submodule init</code> then <code>git submodule update --init --remote</code>. Is that correct or a different order is better? related: <a href=""https://stackoverflow.com/questions/75342383/which-should-be-ran-first-git-submodule-update-or-git-submodule-init"">which should be ran first git submodule update or git submodule init?</a></p>
<hr />
<p>related:</p>
<ul>
<li><a href=""https://github.com/UCSD-PL/proverbot9001/issues/59"" rel=""nofollow noreferrer"">https://github.com/UCSD-PL/proverbot9001/issues/59</a></li>
<li><a href=""https://github.com/UCSD-PL/proverbot9001/issues/60"" rel=""nofollow noreferrer"">https://github.com/UCSD-PL/proverbot9001/issues/60</a></li>
</ul>
","7","1601580","",""
"74783198","4501948","2022-12-13 10:14:40","1","30","<git><git-submodules><git-fork><git-repo>","Is there a way to update a submodule in git without changing the original repository of the submodule?","<p>I have this repository (GPU_Playground) in github and I have the GPU_subproject_dummy submodule in it. I want to know if there is a way to update the contents of the submodule and pushing the updates only in GPU_Playground and the contents of GPU_subproject_dummy to remain the same in the GPU_subproject_dummy repository. <a href=""https://i.stack.imgur.com/52zEV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/52zEV.png"" alt=""enter image description here"" /></a></p>
<p>Maybe submodules isn't the best thing for what I am trying to do.
I want to be able to have multiple links to other repositories and in the first place to update the files only in my GPU_Playground repository and when I'm sure that everything is fine I will update the files in the original repositories that I've linked in my repo.</p>
<p>The steps I want to do:</p>
<ol>
<li>Clone GPU_playground (with all submodules)</li>
<li>cd GPU_subproject_dummy</li>
<li>make changes in GPU_subproject_dummy</li>
<li>push changes done but only update the GPU_subproject_dummy from GPU_playground</li>
<li>when I'm sure I want the original GPU_subproject_dummy  to be updated, I want to be able to do that.</li>
</ol>
<p>Is there a way to do that with submodules or I should be trying something else? Maybe fork?</p>
","0","4501948","",""
"74857682","477476","2022-12-20 01:31:52","1","116","<git><git-submodules><git-fetch>","`git submodule update` always keep fetching the same commit","<p>I have a Git repo with one submodule and two commits that change the submodule's HEAD. If I check out one of the commits, and do a <code>git submodule update</code>, this succeeds without having to connect to a remote, as I would expect since I have the given commit available locally. If I check out the other commit, however, <code>git submodule update</code> always does a fetch (and fails if the remote is not accessible), even though it keeps re-fetching the same commit.</p>
<p>Example session:</p>
<pre><code>$ git checkout -q 9089923 &amp;&amp; git submodule update
Submodule path 'chirp8-engine': checked out '341b24f2c3168a6e226ae3c249179426eff6dd99'
$ git checkout -q 289a15d &amp;&amp; git submodule update
From github.com:gergoerdi/chirp8-engine
 * branch            2fd6ace109f6337df97056aacdb40e5fb51f0e97 -&gt; FETCH_HEAD
Submodule path 'chirp8-engine': checked out '2fd6ace109f6337df97056aacdb40e5fb51f0e97'
$ git checkout -q 9089923 &amp;&amp; git submodule update
Submodule path 'chirp8-engine': checked out '341b24f2c3168a6e226ae3c249179426eff6dd99'
$ git checkout -q 289a15d &amp;&amp; git submodule update
From github.com:gergoerdi/chirp8-engine
 * branch            2fd6ace109f6337df97056aacdb40e5fb51f0e97 -&gt; FETCH_HEAD
Submodule path 'chirp8-engine': checked out '2fd6ace109f6337df97056aacdb40e5fb51f0e97'
$ git checkout -q 9089923 &amp;&amp; git submodule update
Submodule path 'chirp8-engine': checked out '341b24f2c3168a6e226ae3c249179426eff6dd99'
$ git checkout -q 289a15d &amp;&amp; git submodule update
From github.com:gergoerdi/chirp8-engine
 * branch            2fd6ace109f6337df97056aacdb40e5fb51f0e97 -&gt; FETCH_HEAD
Submodule path 'chirp8-engine': checked out '2fd6ace109f6337df97056aacdb40e5fb51f0e97'
</code></pre>
<p>What is the reason for this, and how do I change it so that <code>git submodule update</code> doesn't keep re-fetching the same commit?</p>
<p><strong>Edited to add</strong></p>
<p>I started tracing <code>git</code>, and the difference all comes down to what <code>git submodule--helper</code> does:</p>
<pre><code>$ GIT_TRACE=1 git submodule--helper run-update-procedure --oid 341b24f2c3168a6e226ae3c249179426eff6dd99  -- chirp8-engine
11:08:30.962038 git.c:455               trace: built-in: git submodule--helper run-update-procedure --oid 341b24f2c3168a6e226ae3c249179426eff6dd99 -- chirp8-engine
11:08:30.962259 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 341b24f2c3168a6e226ae3c249179426eff6dd99 --not --all
11:08:30.963983 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 341b24f2c3168a6e226ae3c249179426eff6dd99 --not --all
11:08:30.965639 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git checkout -q -f 341b24f2c3168a6e226ae3c249179426eff6dd99
11:08:30.966504 git.c:455               trace: built-in: git checkout -q -f 341b24f2c3168a6e226ae3c249179426eff6dd99
Submodule path 'chirp8-engine': checked out '341b24f2c3168a6e226ae3c249179426eff6dd99'
</code></pre>
<pre><code>$ GIT_TRACE=1 git submodule--helper run-update-procedure --oid 2fd6ace109f6337df97056aacdb40e5fb51f0e97  -- chirp8-engine 
11:08:35.917283 git.c:455               trace: built-in: git submodule--helper run-update-procedure --oid 2fd6ace109f6337df97056aacdb40e5fb51f0e97 -- chirp8-engine
11:08:35.917522 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 2fd6ace109f6337df97056aacdb40e5fb51f0e97 --not --all
11:08:35.919289 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git fetch
11:08:35.920134 git.c:455               trace: built-in: git fetch
11:08:35.920490 run-command.c:668       trace: run_command: unset GIT_DIR GIT_PREFIX; GIT_PROTOCOL=version=2 ssh -o SendEnv=GIT_PROTOCOL git@github.com 'git-upload-pack '\''gergoerdi/chirp8-engine.git'\'''
11:08:38.965515 run-command.c:668       trace: run_command: git rev-list --objects --stdin --not --all --quiet --alternate-refs
11:08:39.272774 run-command.c:1597      run_processes_parallel: preparing to run up to 1 tasks
11:08:39.272791 run-command.c:1629      run_processes_parallel: done
11:08:39.272799 run-command.c:668       trace: run_command: git maintenance run --auto --no-quiet
11:08:39.273925 git.c:455               trace: built-in: git maintenance run --auto --no-quiet
11:08:39.274557 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 2fd6ace109f6337df97056aacdb40e5fb51f0e97 --not --all
11:08:39.276381 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git fetch origin 2fd6ace109f6337df97056aacdb40e5fb51f0e97
11:08:39.277324 git.c:455               trace: built-in: git fetch origin 2fd6ace109f6337df97056aacdb40e5fb51f0e97
11:08:39.277686 run-command.c:668       trace: run_command: unset GIT_DIR GIT_PREFIX; GIT_PROTOCOL=version=2 ssh -o SendEnv=GIT_PROTOCOL git@github.com 'git-upload-pack '\''gergoerdi/chirp8-engine.git'\'''
11:08:42.446569 run-command.c:668       trace: run_command: git rev-list --objects --stdin --not --all --quiet --alternate-refs
From github.com:gergoerdi/chirp8-engine
 * branch            2fd6ace109f6337df97056aacdb40e5fb51f0e97 -&gt; FETCH_HEAD
11:08:42.754265 run-command.c:1597      run_processes_parallel: preparing to run up to 1 tasks
11:08:42.754283 run-command.c:1629      run_processes_parallel: done
11:08:42.754295 run-command.c:668       trace: run_command: git maintenance run --auto --no-quiet
11:08:42.755355 git.c:455               trace: built-in: git maintenance run --auto --no-quiet
11:08:42.755976 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git checkout -q -f 2fd6ace109f6337df97056aacdb40e5fb51f0e97
11:08:42.756942 git.c:455               trace: built-in: git checkout -q -f 2fd6ace109f6337df97056aacdb40e5fb51f0e97
Submodule path 'chirp8-engine': checked out '2fd6ace109f6337df97056aacdb40e5fb51f0e97'
</code></pre>
<p>In particular, the trace diverges right at the start:</p>
<pre><code>$ GIT_TRACE=1 git submodule--helper run-update-procedure --oid 341b24f2c3168a6e226ae3c249179426eff6dd99  -- chirp8-engine
11:08:30.962038 git.c:455               trace: built-in: git submodule--helper run-update-procedure --oid 341b24f2c3168a6e226ae3c249179426eff6dd99 -- chirp8-engine
11:08:30.962259 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 341b24f2c3168a6e226ae3c249179426eff6dd99 --not --all
11:08:30.963983 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 341b24f2c3168a6e226ae3c249179426eff6dd99 --not --all
</code></pre>
<p>vs</p>
<pre><code>$ GIT_TRACE=1 git submodule--helper run-update-procedure --oid 2fd6ace109f6337df97056aacdb40e5fb51f0e97  -- chirp8-engine 
11:08:35.917283 git.c:455               trace: built-in: git submodule--helper run-update-procedure --oid 2fd6ace109f6337df97056aacdb40e5fb51f0e97 -- chirp8-engine
11:08:35.917522 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 2fd6ace109f6337df97056aacdb40e5fb51f0e97 --not --all
11:08:35.919289 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git fetch
</code></pre>
<p>Indeed, there is a difference in the output of <code>cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 $SUBMODULE_COMMIT --not --all</code> depending on which commit is checked out in the submodule, but that should be expected since <code>2fd6ace</code> is an ancestor of <code>341b24f</code>.</p>
","0","477476","",""
"74864900","3541320","2022-12-20 14:51:29","0","322","<git><git-submodules>","git submodule with environment","<p>I have this <code>.gitsubmodule</code>:</p>
<pre><code>[submodule &quot;modules/some-utils&quot;]
    path = modules/some-utils
    url = ../some-utils.git
    branch = main
</code></pre>
<p>With that, I will always checkout to <code>main</code> each time that I update a the submodule.</p>
<p>What I need is to manage 3 different branches for different environments. I need something like:</p>
<pre><code>[submodule &quot;modules/some-utils&quot;]
    path = modules/some-utils
    url = ../some-utils.git
    branch = $ENVIRONMENT
</code></pre>
<p>Where <code>$ENVIRONMENT</code> be a value taken directly from an external file, for instance a <code>.env</code> file.</p>
<p>Is that possible?</p>
","2","3541320","",""
"74869867","5037757","2022-12-20 23:20:47","0","149","<maven><git-submodules><maven-release-plugin><maven-module>","Maven multi module project with git submodule: release perform fails","<p>I have a Maven multi-module project. One of the module is a git submodule</p>
<p>proj-root</p>
<ul>
<li>proj-module</li>
<li>proj-submodule</li>
</ul>
<p>When I try maven release:prepare, the project fails. I have tried multiple ways but still not succesful.</p>
<p>I follow the following steps:</p>
<ul>
<li>Clone the root project and cd into the cloned project folder</li>
<li>git submodule sync</li>
<li>git submodule update --init --remote</li>
<li>mvn --batch-mode -DcommitByProject=true release:prepare</li>
</ul>
<pre><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-release-plugin:3.0.0-M7:prepare (default-cli) on project proj-root: An error is occurred in the checkin process: Exception while executing SCM command. Detecting the current branch failed: fatal: ref HEAD is not a symbolic ref -&gt; [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-release-plugin:3.0.0-M7:prepare (default-cli) on project proj-root: An error is occurred in the checkin process: Exception while executing SCM command.
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
  ... 
Caused by: org.apache.maven.plugin.MojoExecutionException: An error is occurred in the checkin process: Exception while executing SCM command.
    at org.apache.maven.plugins.release.PrepareReleaseMojo.prepareRelease(PrepareReleaseMojo.java:417)
    at org.apache.maven.plugins.release.PrepareReleaseMojo.execute(PrepareReleaseMojo.java:349)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
    ... 20 more
Caused by: org.apache.maven.shared.release.ReleaseExecutionException: An error is occurred in the checkin process: Exception while executing SCM command.
    at org.apache.maven.shared.release.phase.AbstractScmCommitPhase.checkin(AbstractScmCommitPhase.java:191)
    at org.apache.maven.shared.release.phase.AbstractScmCommitPhase.performCheckins(AbstractScmCommitPhase.java:168)
    at org.apache.maven.shared.release.phase.AbstractScmCommitPreparationPhase.runLogic(AbstractScmCommitPreparationPhase.java:88)
    ... 23 more
Caused by: org.apache.maven.scm.ScmException: Exception while executing SCM command.
    at org.apache.maven.scm.command.AbstractCommand.execute(AbstractCommand.java:64)
    at org.apache.maven.scm.provider.git.AbstractGitScmProvider.executeCommand(AbstractGitScmProvider.java:300)
    at org.apache.maven.scm.provider.git.AbstractGitScmProvider.checkin(AbstractGitScmProvider.java:218)
    ... 29 more
Caused by: org.apache.maven.scm.ScmException: Detecting the current branch failed: fatal: ref HEAD is not a symbolic ref

</code></pre>
<p>My finding is that the above error is because the submodule &quot;proj-submodule&quot; is at HEAD and not specific branch.</p>
<pre><code>* (HEAD detached from c560983)
  master

</code></pre>
<p>I tried it differently now:</p>
<ul>
<li>Clone the root project and cd into the cloned project folder</li>
<li>git submodule sync</li>
<li>git submodule update --init --remote</li>
<li>cd proj-submodule &amp;&amp; git checkout master &amp;&amp; cd -</li>
<li>mvn --batch-mode -DcommitByProject=true release:prepare</li>
</ul>
<pre><code>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-release-plugin:3.0.0-M7:prepare (default-cli) on project proj-root: Unable to commit files
[ERROR] Provider message:
[ERROR] The git-push command failed.
[ERROR] Command output:
[ERROR] To github.com:user1234/proj-root.git
[ERROR] ! [rejected]        master -&gt; master (fetch first)
[ERROR] error:********@github.com:user1234/proj-root.git'
[ERROR] hint: Updates were rejected because the remote contains work that you do
[ERROR] hint: not have locally. This is usually caused by another repository pushing
[ERROR] hint: to the same ref. You may want to first integrate the remote changes
[ERROR] hint: (e.g., 'git pull ...') before pushing again.
[ERROR] hint: See the 'Note about fast-forwards' in 'git push --help' for details.
[ERROR] -&gt; [Help 1]
</code></pre>
<p>I don't understand why the above error even through there were no changes pushed to repo. When I looked into it the repo, the release version of pom files were updated to root and proj-module but not to proj-submodule. So my analysis is that the failure is again due to the submodule (git submodule project).</p>
<p>Can anyone help resolve the issue? Regular release builds with or without modules complete successfully but not the one with a submodule (git submodule).</p>
","4","5037757","",""
"74943484","20881589","2022-12-28 17:55:44","0","33","<git><git-submodules>","Why does git keeping setting my submodules to (HEAD) when I alter my main repo?","<p>I have a repo with 2 submods inside of it. When in the main repo and switching branches, or pulling changes, seemingly at random, the submods will leave the branch I told them to be on and switch to &quot;HEAD (string of numbers and letters)&quot;. I know this is the version of the submodule I last pushed to my main repo, but that's not what I want.</p>
<p>This is demolishing my workflow, and making me lose submod changes sometimes. I need git to never, ever, under any circumstances, change the branch I set my two submods to be on, no matter what I do to the main repo. How do I make that possible?</p>
","2","20881589","",""
"74945646","2000246","2022-12-28 22:44:04","0","554","<github-actions><git-submodules><personal-access-token>","Pulling a git submodule with private access from a Github action","<p>I'm trying to pull a git submodule during my 'push' github action. The submodule is a private repository.</p>
<p>I've created a PAT with read-only access to my repositories. And I've added the contents of that PAT as a secret in the git repo (not the submodule).</p>
<p>This is my github action file:</p>
<pre><code>name: Java CI

on: [ push ]

env:
  SUBMODULE_ACCESS: ${{ secrets.SUBMODULE_ACCESS }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Update submodules
        run: |
          git config --global url.&quot;https://${SUBMODULE_ACCESS}:x-oauth-basic@github.com/&quot;.insteadOf &quot;https://github.com/&quot;
          git submodule update --init --recursive
      - name: Set up JDK 19
        uses: actions/setup-java@v2
        with:
          java-version: '19'
          distribution: 'adopt'
      - name: Cache local .m2
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**.pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run lints and test with Maven
        run: mvn clean install -Dall
</code></pre>
<p>When I run this, I see the following error:</p>
<p><code>remote: Support for password authentication was removed on August 13, 2021.</code>
<code>remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.</code></p>
<p>But that link just mentions PATs, which I think I've set up?</p>
","2","2000246","",""
"74988223","1601580","2023-01-03 00:49:43","0","577","<git><git-submodules>","Why do I need to add the `--remote` to git's submodule when I specify the branch in the .gitmodule file?","<p>I want to pull/update the submodules at the right branch. Doing <code>git submodule update</code> pulls/updates the submodules but it changes to the wrong branch even when the branch I want to ALWAYS use is specified in the .gitsubmodule file.</p>
<p>Only when I do <code>--remote</code> does it work (but then I don't know what other unintended consequences it might have in the rest of my submodules).</p>
<p>I want to updat my modules <strong>exactly</strong> as specified in my .modules files. How do I do this?</p>
<p>e.g.</p>
<pre><code>[submodule &quot;pytorch-meta-dataset&quot;]
    path = pytorch-meta-dataset
    url = git@github.com:brando90/pytorch-meta-dataset.git
    branch = hdb
[submodule &quot;meta-dataset&quot;]
    path = meta-dataset
    url = git@github.com:brando90/meta-dataset.git

</code></pre>
<p>Is what I should be running:</p>
<pre><code>git submodule update
git submodule update --remote
git submodule init
git submodule status 
</code></pre>
<hr />
<p>I did read the --remote:</p>
<pre><code>--remote
           This option is only valid for the update command. Instead of using the superproject’s recorded SHA-1 to update the submodule, use the status of the submodule’s
           remote-tracking branch. The remote used is branch’s remote (branch.&lt;name&gt;.remote), defaulting to origin. The remote branch used defaults to the remote HEAD, but the branch
           name may be overridden by setting the submodule.&lt;name&gt;.branch option in either .gitmodules or .git/config (with .git/config taking precedence).

           This works for any of the supported update procedures (--checkout, --rebase, etc.). The only change is the source of the target SHA-1. For example, submodule update
           --remote --merge will merge upstream submodule changes into the submodules, while submodule update --merge will merge superproject gitlink changes into the submodules.

           In order to ensure a current tracking branch state, update --remote fetches the submodule’s remote repository before calculating the SHA-1. If you don’t want to fetch, you
           should use submodule update --remote --no-fetch.

           Use this option to integrate changes from the upstream subproject with your submodule’s current HEAD. Alternatively, you can run git pull from the submodule, which is
           equivalent except for the remote branch name: update --remote uses the default upstream repository and submodule.&lt;name&gt;.branch, while git pull uses the submodule’s
           branch.&lt;name&gt;.merge. Prefer submodule.&lt;name&gt;.branch if you want to distribute the default upstream branch with the superproject and branch.&lt;name&gt;.merge if you want a more
           native feel while working in the submodule itself.
</code></pre>
<hr />
<p>My install script ends up looking retarded:</p>
<pre><code># -- gitsubmodules
# - set up pytorch-meta-dataset git submodule
cd ~/diversity-for-predictive-success-of-meta-learning/
# adds the submodule to the .gitmodules file &amp; pull the project
git submodule add -f -b hdb --name pytorch-meta-dataset git@github.com:brando90/pytorch-meta-dataset.git pytorch-meta-dataset/
git submodule update --init --recursive --remote pytorch-meta-dataset

# - set up meta-dataset git submodule
# adds the submodule to the .gitmodules file &amp; pull the project
git submodule add -f -b master --name meta-dataset git@github.com:brando90/meta-dataset.git meta-dataset/
# - git submodule update to fetch all the data from that project
git submodule update --init --recursive --remote meta-dataset

# - initialize your local configuration file
git submodule init
# - check the submodules
git submodule status
</code></pre>
<p>why do I need to specify the same thing so many times? What is the point of the .gitmodules file then at all? <strong>It can't even update things properly without screwing up the rest of the subdmodules</strong></p>
<p>Look at the branchdes:</p>
<pre><code>(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning ❯ git submodule status                                         
 ca81edbf5093ec5ea1a1f5a4b31ec4078825f44b meta-dataset (arxiv_v1-200-gca81edb)
 6e60161962ae3fa309335da7aa1c675c75ecca54 pytorch-meta-dataset (heads/hdb)
</code></pre>
<p>they don't even match my .gitmodules</p>
<pre><code>[submodule &quot;pytorch-meta-dataset&quot;]
    path = pytorch-meta-dataset
    url = git@github.com:brando90/pytorch-meta-dataset.git
    branch = hdb
[submodule &quot;meta-dataset&quot;]
    path = meta-dataset
    url = git@github.com:brando90/meta-dataset.git
    branch = master
</code></pre>
<hr />
<p>related:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1777854/how-can-i-specify-a-branch-tag-when-adding-a-git-submodule"">How can I specify a branch/tag when adding a Git submodule?</a></li>
<li><a href=""https://stackoverflow.com/questions/74988266/how-do-i-pull-newly-specified-submodules-that-i-just-added-in-my-gitmodules-fil?noredirect=1&amp;lq=1"">How do I pull newly specified submodules that I just added in my .gitmodules file?</a></li>
<li>cross: <a href=""https://www.reddit.com/r/git/comments/101urnl/why_do_i_need_to_add_the_remote_to_gits_submodule/"" rel=""nofollow noreferrer"">https://www.reddit.com/r/git/comments/101urnl/why_do_i_need_to_add_the_remote_to_gits_submodule/</a></li>
<li>quora cross: <a href=""https://www.quora.com/unanswered/Why-do-I-need-to-add-the-remote-to-gits-submodule-when-I-specify-the-branch-in-the-gitmodule-file"" rel=""nofollow noreferrer"">https://www.quora.com/unanswered/Why-do-I-need-to-add-the-remote-to-gits-submodule-when-I-specify-the-branch-in-the-gitmodule-file</a></li>
</ul>
<hr />
<h1>Extra: <a href=""https://stackoverflow.com/questions/74998463/why-does-git-submodule-status-not-match-the-output-of-git-branch-of-my-submodule"">Why does git submodule status not match the output of git branch of my submodule?</a></h1>
<p>Why does it still not work even if I specified the --remote?</p>
<pre><code>(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule add -f -b hdb --name meta-dataset git@github.com:brando90/meta-dataset.git meta-dataset/

Cloning into '/Users/brandomiranda/ultimate-utils/tutorials_for_myself/my_git/meta-dataset'...
remote: Enumerating objects: 2947, done.
remote: Counting objects: 100% (740/740), done.
remote: Compressing objects: 100% (65/65), done.
remote: Total 2947 (delta 689), reused 675 (delta 675), pack-reused 2207
Receiving objects: 100% (2947/2947), 3.17 MiB | 4.51 MiB/s, done.
Resolving deltas: 100% (2248/2248), done.
(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule init

(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule update --init

(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule update --init --remote

(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule status
 ca81edbf5093ec5ea1a1f5a4b31ec4078825f44b meta-dataset (arxiv_v1-200-gca81edb)
(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule update --init --recursive --remote meta-dataset
(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule status                                         
 ca81edbf5093ec5ea1a1f5a4b31ec4078825f44b meta-dataset (arxiv_v1-200-gca81edb)
(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ cd meta-dataset 
(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git/meta-dataset ❯ git branch
* hdb
</code></pre>
","5","1601580","",""
"74998463","1601580","2023-01-03 20:41:51","0","257","<git><git-submodules>","Why does git submodule status not match the output of git branch of my submodule?","<p>I made sure that my project was using the hdb branch by doing <code>git submodule --remote meta-dataset</code>. But <code>git submodule</code> does NOT agree with the <code>git branch</code> command when I cd into the repo:</p>
<pre><code>(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule update --init --recursive --remote meta-dataset
(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ git submodule status                                         
 ca81edbf5093ec5ea1a1f5a4b31ec4078825f44b meta-dataset (arxiv_v1-200-gca81edb)
</code></pre>
<p>then I check the branch by cding into the submodule:</p>
<pre><code>(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git ❯ cd meta-dataset 
(meta_learning) brandomiranda~/ultimate-utils/tutorials_for_myself/my_git/meta-dataset ❯ git branch
* hdb
</code></pre>
<p>why are they not agreeing?</p>
<p>Version of git:</p>
<pre><code>git version 2.37.0 (Apple Git-136)
</code></pre>
<hr />
<p>The command <code>git log --decorate --oneline --graph --all --branches</code> shows:</p>
<pre><code>*   ca81edb (HEAD -&gt; master, origin/master, origin/HEAD) Merge pull request #86 from peymanbateni/main
|\  
| * e3f90db Readme typo fixed.
| * 3cfb2b3 Semantic updates to table link entries.
| * 9ed89a1 Updated readme and leaderboard notebook.
| *   81794ed Merge branch 'main' of https://github.com/peymanbateni/meta-dataset
| |\  
| | *   c5542c9 Merge branch 'google-research:main' into main
| | |\  
| |_|/  
|/| |   
* | | 8fbfc63 Fix requirements typo
* | | d868ea1 Resolves #85
* | | 1e81d11 Internal change
| * | 1705427 Leaderboard script updated to handle multiple references for the same method.
| |/  
| * f725ab7 Update README.md
| * 717caf7 Update README.md
| * 1a3d45b Update README.md
| * 1542931 Update README.md
| * 81ae589 Update README.md
|/  
* 7cb980c Add new TSA and Simple/Transductive CNAPs results to the leaderboard.
* e12d61d Remove sources which have no training split from training instructions
:
</code></pre>
<hr />
<p>Weird it's missing it?</p>
<pre><code>(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning/meta-dataset ❯ git branch --all
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/arxiv_v2_dev
  remotes/origin/master
</code></pre>
<p>despite me JUST adding it again from scratch...</p>
<hr />
<p>tried doing:</p>
<pre><code># - https://stackoverflow.com/questions/3796927/how-do-i-git-clone-a-repo-including-its-submodules/3796947#3796947
# - git submodule init initializes your local configuration file to track the submodules your repository uses, it just sets up the configuration so that you can use the git submodule update command to clone and update the submodules.
git submodule init
# - The --remote option tells Git to update the submodule to the commit specified in the upstream repository, rather than the commit specified in the main repository.
git submodule update --init --recursive --remote
</code></pre>
<p>again</p>
<p>output:</p>
<pre><code>(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning ❯ git submodule init
# - The --remote option tells Git to update the submodule to the commit specified in the upstream repository, rather than the commit specified in the main repository.
git submodule update --init --recursive --remote
zsh: command not found: #

From github.com:brando90/meta-dataset
 * [new branch]      hdb        -&gt; origin/hdb
(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning ❯ 
(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning ❯ git submodule status

 ca81edbf5093ec5ea1a1f5a4b31ec4078825f44b meta-dataset (arxiv_v1-200-gca81edb)
 6e60161962ae3fa309335da7aa1c675c75ecca54 pytorch-meta-dataset (heads/hdb)
</code></pre>
<p>seems it there but git subomdule status doesn't show it.</p>
<hr />
<p>Doesn't work even if I try to target the specific git submodule:</p>
<pre><code>(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning ❯ git submodule update --init --recursive --remote meta-dataset
(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning ❯ git submodule status
 ca81edbf5093ec5ea1a1f5a4b31ec4078825f44b meta-dataset (arxiv_v1-200-gca81edb)
 6e60161962ae3fa309335da7aa1c675c75ecca54 pytorch-meta-dataset (heads/hdb)
</code></pre>
<hr />
<p>It's there now:</p>
<pre><code>(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning/meta-dataset ❯ git branch --all
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/arxiv_v2_dev
  remotes/origin/hdb
  remotes/origin/master

</code></pre>
<p>in the submodule but it's still on the wrong branch even if I try git submodule update --romte it even with the name to it.</p>
<hr />
<p>Ok the the git subomdule cmd def doesn't think the project is on the hdb branch. I moved their, checkout it out explicitly. It's def in it but the submodule command refuses to agree -- even when I try to re update it multiple times and re add it and git fetch it with --remote.</p>
<pre><code>(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning ❯ cd meta-dataset 
(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning/meta-dataset ❯ git checkout hdb
branch 'hdb' set up to track 'origin/hdb'.
Switched to a new branch 'hdb'
(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning/meta-dataset ❯ git branch
* hdb
  master
(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning/meta-dataset ❯ cd ..
(meta_learning) brandomiranda~/diversity-for-predictive-success-of-meta-learning ❯ git submodule status  
 ca81edbf5093ec5ea1a1f5a4b31ec4078825f44b meta-dataset (arxiv_v1-200-gca81edb)
 6e60161962ae3fa309335da7aa1c675c75ecca54 pytorch-meta-dataset (heads/hdb)
</code></pre>
<hr />
<p>Ref:</p>
<ul>
<li>related: <a href=""https://stackoverflow.com/questions/74988223/why-do-i-need-to-add-the-remote-to-gits-submodule-when-i-specify-the-branch"">Why do I need to add the `--remote` to git&#39;s submodule when I specify the branch in the .gitmodule file?</a></li>
<li>cross: <a href=""https://www.reddit.com/r/git/comments/102n08e/why_does_git_submodule_status_not_match_the/"" rel=""nofollow noreferrer"">https://www.reddit.com/r/git/comments/102n08e/why_does_git_submodule_status_not_match_the/</a>
-- cross: <a href=""https://www.quora.com/unanswered/Why-does-the-git-submodule-status-not-match-the-output-of-the-git-branch-of-my-submodule"" rel=""nofollow noreferrer"">https://www.quora.com/unanswered/Why-does-the-git-submodule-status-not-match-the-output-of-the-git-branch-of-my-submodule</a></li>
</ul>
","4","1601580","",""
"75007889","3693060","2023-01-04 15:44:35","1","70","<git><azure-devops><yaml><git-submodules>","git submodule error - picking up latest commit instead of a specific commit","<p>I have a repository with a submodule which includes 3 files:</p>
<p><a href=""https://i.stack.imgur.com/SquEZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SquEZ.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/07HKW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/07HKW.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/qF0bM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qF0bM.png"" alt=""enter image description here"" /></a></p>
<p>As you see here, the branch specified in <code>.gitmodules</code> is 'develop' and the ref specified in <code>vsts-cicd.yml</code> is 'develop'.</p>
<p>The git command I use to update the commit is:</p>
<blockquote>
<p>git submodule update --remote --merge</p>
</blockquote>
<p>My understanding was that when we do a deployment, it will get the changes from 'public' submodule up to the commit specified in 'public' (in this case: 1ff703eda1b357efdecbffb2422b6fcc99a48557). But what I noticed is that, if I have a new commit in 'develop' in 'public', it will pick that latest commit from 'develop' even though 'public' submodule has an old commit '1ff703eda1b357efdecbffb2422b6fcc99a48557'. Is that how submodule works? Please let me know what I am missing?</p>
<p>Note: When I run</p>
<pre><code>cd submodule; git log
</code></pre>
<p>I see the latest commit listed as 1ff703eda1b357efdecbffb2422b6fcc99a48557 (which is correct)</p>
","0","3693060","",""
"75053094","889053","2023-01-09 04:05:46","2","232","<git><git-submodules>","git submodule at a specific commit/tag","<p><strong>The problem</strong>: Can I pin git modules to specific commits?</p>
<p>I am writing a build script to produce an artifact which is a Zip archive of multiple submodules with a few requirements.</p>
<ul>
<li>the artifact generated must be tagged / versioned</li>
<li>the tag of the repo with the build script must be used to version the artifact</li>
</ul>
<p>Here is the rub:</p>
<p>If I checkout:</p>
<pre><code>git clone git@whatever:thing/mybuildscipt
</code></pre>
<p>and then do</p>
<pre><code>git submodule update --init
</code></pre>
<p>I need the exact commit number of each submodule to be recorded in the build script's repo (ideally in .gitmodules) so that in the future, if I should do</p>
<pre><code>git checkout 1.2.3
git submodule update
</code></pre>
<p>I am going to the same submodules as they were at when the build script repo was tagged with &quot;1.2.3&quot;.</p>
<p>Long ago, this is exactly how git submodules worked: They were pinned to a specific commit and that commit hash was actually in the <code>.gitmodule</code> - I need that behavior and it's not at all clear to me, based on my research, if it's still possible.</p>
<p>Here is a summary of the commands being run the in build script, so that you can get the idea what is to be accomplished. Ultimately if I checkout a specific version of the git repo that contains the build script, it should produce an identical zip archive as before.</p>
<pre class=""lang-bash prettyprint-override""><code>export NEXT_VERSION=$(
    git tag --sort=committerdate \
       | tail -1 \
       | awk -F '.' '{print $1&quot;.&quot;$2&quot;.&quot; $3 +1}')
git submodule update --init

# remove the .git dir to save space
git submodule | awk '{print $2}' | xargs -I {} -n 1 rm -fR {}/.git
git submodule | awk '{print $2}' | xargs zip -qr ${FILE_NAME}

# push to object storage
mc cp ${FILE_NAME} ${ALIAS}/${bucket}/${FILE_NAME}

# tag
git tag ${NEXT_VERSION}
# update tags
git push --tags origin
</code></pre>
","3","889053","",""
"75078270","4390925","2023-01-11 04:13:32","0","216","<c++><cmake><git-submodules>","Not able to add external library using git submodules in CMake","<p>I am trying to add <code>jwt-cpp</code> library by <a href=""https://github.com/Thalhammer/jwt-cpp"" rel=""nofollow noreferrer"">Thalhammer</a> in my project using <code>CMake</code>.</p>
<p>My project structure is as follows</p>
<pre><code>build
External
---- jwt
.gitignore
.gitmodules
CMakeLists.txt
main.cpp
</code></pre>
<p>I used command <code>git submodule add https://github.com/Thalhammer/jwt-cpp.git External/jwt</code> to add the mentioned git submodule to my project. and the contents of the <code>.gitmodules</code> file is</p>
<pre><code>[submodule &quot;External/jwt&quot;]
    path = External/jwt
    url = https://github.com/Thalhammer/jwt-cpp.git
</code></pre>
<p>My CMakeLists.txt looks like</p>
<pre><code>cmake_minimum_required(VERSION 3.24.2)
set(This Trial)
project(${This} C CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(Sources main.cpp)
add_executable(${This} ${Sources})

add_subdirectory(External/jwt)

if(NOT TARGET jwt-cpp)
  find_package(jwt-cpp CONFIG REQUIRED)
endif()

target_include_directories(${This} INTERFACE External/jwt/include)
target_link_libraries(${This} INTERFACE jwt-cpp::jwt-cpp)
</code></pre>
<p>and my <code>main.cpp</code> is</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;jwt-cpp/jwt.h&gt;

int main ()
{
    return 0;
}
</code></pre>
<p>The issue I am facing is that everything configures builds properly if is don't include <code>#include &lt;jwt-cpp/jwt.h&gt;</code> in my <code>main.cpp</code> file but throws and error if I do that. The error looks like as follows:</p>
<pre><code>fatal error: 'jwt-cpp/jwt.h' file not found
#include &lt;jwt-cpp/jwt.h&gt;
         ^~~~~~~~~~~~~~~
1 error generated.
make[2]: *** [CMakeFiles/Trial.dir/main.cpp.o] Error 1
make[1]: *** [CMakeFiles/Trial.dir/all] Error 2
make: *** [all] Error 2
</code></pre>
<p>I am not able to figure out what should I correct/edit.</p>
","1","4390925","",""
"75104179","20996461","2023-01-13 02:06:35","1","97","<python><setuptools><git-submodules><python-packaging>","Python setup.cfg: how to add package_data with git submodules?","<p>I'm writing a Python package, in which I'm adding package data. The package data of my setup.cfg looks like the following:</p>
<pre><code>include_package_data = True
[options.package_data]
mypymodule = dir1/*/*, dir2/*/*
</code></pre>
<p>Both dir1 and dir2 are directories inside mypymodule source folder, which is part of &quot;mypackage&quot;. Building, installing and using &quot;mypackage&quot; is not an issue.</p>
<p>The trouble I'm facing is the following:</p>
<p>Both dir1 and dir2 have their subdirectories with some files inside each that I want to include in &quot;mypackage&quot; installation, and then access them as resources when &quot;mypackage&quot; is running.</p>
<p>For dir1, everything is fine: all dir1 subfolders are correctly installed within &quot;mypackage&quot;.</p>
<p>But for dir2, it looks like the installation is not recursive: only files belonging directly at the dir2 folder are installed within &quot;mypackage&quot;; all dir2 subfolders are ignored in &quot;mypackage&quot; installation, and I am not able to access their content as resources.</p>
<p>The difference between dir1 and dir2 is:</p>
<ul>
<li>dir1 is a regular directory in &quot;mypackage&quot; git repo</li>
<li>dir2 is added in &quot;mypackage&quot; git repo as a git submodule</li>
</ul>
<p>What am I missing? Is there some limitations in adding git submodules are package_data in Python packages setup.cfg?</p>
<p>Hope you can help! Thank you!</p>
<p>I've tried changing the &quot;*&quot; notation for subdirectories in setup.cfg file, but with no success. I expect that both dir1 and dir2 are treated evenly whether regular dirs or git submodule dirs.</p>
","8","20996461","",""
"75104243","15242140","2023-01-13 02:17:53","2","106","<git><git-submodules>","`git submodule update --remote` vs `git pull --recurse-submodule` vs `git submodule foreach git pull origin main`","<p>There are three commands that (as far as I know) can be used to update a git submodule to its latest version.</p>
<ul>
<li><code>git submodule update --remote --recursive</code></li>
<li><code>git pull --recurse-submodule</code></li>
<li><code>git submodule foreach git pull origin main</code></li>
</ul>
<p><strong>What is the difference between the three commands?</strong> There are already some questions on StackOverflow regarding this, but most of them explain this using concepts I do not understand (rebase and branch HEADs). I'm hoping someone can explain this to me in a simple way. I'm using submodules in my project to link it to other projects, and I would like to know what the difference between the three commands is. All three work for me locally, and I would like to know which one is the most appropriate one for me to use.</p>
<p><strong>I would also like to know what the two options on these commands do.</strong> <code>--recurse-submodule</code> is quite self-evident. <code>git pull</code> would only pull the main repo otherwise. But what does the <code>--remote</code> option on <code>git submodule update</code> do? What about the <code>--recursive</code> option? I'm assuming the <code>--recursive</code> option is to target submodules inside submodules, but I'm not able to figure out what <code>--remote</code> does.</p>
<p>I realize that <code>git submodule update</code> will initially clone the repos mentioned in <code>.gitmodules</code>, but I'm asking about what happens when a version of the repo already exists. Does it update that version to the latest commit or not?</p>
<p><strong>What happens when I run this in a CI/CD tool like GitHub Actions?</strong> Only the <code>.gitmodules</code> file will be present, so will <code>git submodule update</code> update that to the latest commits or will it just clone the submodule repos, which is kind of pointless since the &quot;local&quot; cache will be cleared once the workflow finishes running.</p>
","0","15242140","",""
"75154593","20977027","2023-01-18 04:09:03","1","33","<git><git-submodules><git-remote>","How can I clone a subfolder of a git repository into another git repository as a submodule?","<p>I'm new to git and git submodules. Although I've done some research I can't seem to find a proper answer to what I'm trying to achieve.</p>
<p>So suppose I have a repository called Big Repo cloned locally on my machine that contains:</p>
<pre><code>|- FolderA/
|- FolderB/
|- FolderC/
|- FolderD/
</code></pre>
<p>And another repo called Small Repo that contains</p>
<pre><code>|- foo/
    |- FolderE/
           |- content.txt
|- bar/
|- other/
</code></pre>
<p>So what I need is get <strong>only</strong> FolderE from Small Repo and add it to Big Repo locally as a submodule. That is option 1. How can a achieve that? (and I need to be only &quot;FolderE/&quot;, not the entire small repo or &quot;foo/FolderE&quot;).</p>
<p>Option 2 is: since I won't be making any pull/push to Big Repo (I only use it locally to run some code) I can delete the .git folder or change the remote url so that it points to Small Repo, but again I don't want Small Repo to mess with the folders within Big Repo.</p>
<p>So my final structure will be</p>
<pre><code>|- FolderA/
|- FolderB/
|- FolderC/
|- FolderD/
|- FolderE/
     |- content.txt
</code></pre>
<p>And when I run git push it only pushes FolderE and its content to Small Repo. When I run git pull it only pulls FolderE and its content into Big Repo.</p>
<p>What's the best approach to achieve this, assuming it is feasible?</p>
","0","20977027","",""
"75220931","9046804","2023-01-24 11:37:38","0","52","<git><git-submodules><git-subtree>","Different git submodules on different Folders on the same git repository","<p>I'll explain the mission.
I have a core git repository with my main software.
I have to use this software for different clients for which I have to specialize.</p>
<p>My goal is to have as many folders locally as my clients.
Within all folders I want to clone the CORE repository and I want to hook a submodule of specializations for that customer of that folder.</p>
<p>By doing so I can continue to make the core evolve even from different folders and at the same time I keep the specializations of the various customers distinct and isolated</p>
<p>I hope I explained myself, but I also leave an image for greater clarity</p>
<p><a href=""https://i.stack.imgur.com/IT7Pw.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IT7Pw.jpg"" alt=""enter image description here"" /></a></p>
<p>As an initial idea I had to manage a single local folder with the core and use the branches to specialize the various clients, but especially for Laravel I didn't want to versione the Storage folder so I find files from all the clients together.
That's why I would prefer to manage clients in separate folders locally</p>
","2","9046804","",""
"75219914","19557562","2023-01-24 10:03:19","0","30","<github><nested><git-submodules>","Working with git nested submodules (stage, commit, push)","<p>I have a set up that looks like this:</p>
<pre><code>- MainRepository
  - Folder1 (nested submodule)
    - Folder2 (double - nested submodule)  
  - Folder3 (nested submodule)  
  - Folder4 (nested submodule)
</code></pre>
<p>When I make a change to the double-nested folder I have to stage-commit-push on three different levels:</p>
<ul>
<li><p>Inside of the Folder2</p>
</li>
<li><p>Then inside of the Folder1</p>
</li>
<li><p>And finally from the MainRepository</p>
</li>
</ul>
<p>The problem is that a project I'm currently working is very big and it is time consuming doing it manually every time. Is there a way to stage and push the same commit on all 3 levels recursively</p>
<p>Currently I'm not able to stage the same commit for each level.
I've tried:</p>
<pre><code>- git submodule foreach --recursive git add.
- git submodule foreach --recursive git commit -m &quot;name_of_commit&quot;
</code></pre>
<p>But it returns the following because there are submodules(i.e Folder3/Folder4) that don't have any commits:</p>
<blockquote>
<p>fatal: run_command returned non-zero status</p>
</blockquote>
","0","19557562","",""
"75235378","17263281","2023-01-25 14:22:53","1","54","<git><github-actions><git-submodules><git-checkout>","Why do I get ""fatal: No url found for submodule path 'TestLibrary1' in .gitmodules"" for a submodule that no longer exists?","<h1>Problem</h1>
<p>When I try to checkout my repository using GitHub Actions I get the following error:</p>
<pre><code>fatal: No url found for submodule path 'TestLibrary1' in .gitmodules
</code></pre>
<h1>What I Tried</h1>
<p>I tried removing the submodule.</p>
<p>As far as I can tell it is completely gone (it is gone from the folder &amp; from <code>.gitmodules</code>)</p>
<p>However, I keep getting the above error.</p>
<h1>Question</h1>
<p>Why is this still happening when the submodule no longer exists?</p>
<p>Is there somewhere that it is holding onto a reference that I can check?</p>
","0","17263281","",""
"75260323","717069","2023-01-27 15:43:55","1","23","<git><tags><git-submodules>","git push --tags failing due to a submodule, which tag?","<p>When I do <code>git push --tags</code> I get</p>
<pre><code>The following submodule paths contain changes that can
not be found on any remote:
  packages/jpl
</code></pre>
<p>This apparently due to one of the tags as normal pushing works and so does pushing a specific tag using <code>git push origin &lt;tag&gt;</code>.   Unfortunately git gives me no clue which of the 699 tags (old project) is causing this.   I'm now running</p>
<pre><code>for t in $(git tag) do;
  echo $t
  git push origin $t
done
</code></pre>
<p>Its already running for a long time.   I'd assume there is a quicker way to find the culprits, no?</p>
","0","717069","",""
"75258262","18801588","2023-01-27 12:42:50","0","87","<c++><visual-studio><c++20><git-submodules><c++-modules>","Unresolved external symbols with git submodules","<p>I have a solution with 2 projects:</p>
<ul>
<li>A static library (Almond)</li>
<li>A project that uses that static library (Sandbox)</li>
</ul>
<p>I'm watching and following The Cherno's <a href=""https://www.youtube.com/watch?v=dZr-53LAlOw&amp;list=PLlrATfBNZ98dC-V-N3m0Go4deliWHPFwT&amp;index=6"" rel=""nofollow noreferrer"">Game Engine Series</a> except that I'm using C++20 modules. He added <a href=""https://github.com/gabime/spdlog"" rel=""nofollow noreferrer""><code>spdlog</code></a> through <code>git submodule add</code>. I did the same thing. Then I added the <code>$(SolutionDir)Almond\vendor\spdlog\include</code> to <code>Additional Include Directories</code> in the Almond project.</p>
<p>The library builds fine (with a bunch of macro redefinition warnings from <code>sal.h</code>). When I try to build Sandbox I don't get any warnings just these errors:</p>
<pre><code>Severity    Code    Description Project File    Line    Suppression State
Error   LNK1120 4 unresolved externals  Sandbox C:\source\Almond\bin\Debug-x64\Sandbox\Sandbox.exe  1   
Error   LNK2019 unresolved external symbol __imp_MapViewOfFileNuma2 referenced in function MapViewOfFile2   Sandbox C:\source\Almond\Sandbox\Almond.lib(stdout_color_sinks.h_D07BG2BYL2KQ67JA.obj)  1   
Error   LNK2001 unresolved external symbol __imp_MapViewOfFileNuma2 Sandbox C:\source\Almond\Sandbox\Almond.lib(spdlog.h_UEKL7NPFP4GR8605.obj)  1   
Error   LNK2001 unresolved external symbol &quot;private: static class std::shared_ptr&lt;class spdlog::logger&gt; Almond::Log::s_CoreLogger&quot; (?s_CoreLogger@Log@Almond@@0V?$shared_ptr@Vlogger@spdlog@@@std@@A::&lt;!Log&gt;)   Sandbox C:\source\Almond\Sandbox\Almond.lib(Log.ixx.obj)    1   
Error   LNK2001 unresolved external symbol &quot;private: static class std::shared_ptr&lt;class spdlog::logger&gt; Almond::Log::s_ClientLogger&quot; (?s_ClientLogger@Log@Almond@@0V?$shared_ptr@Vlogger@spdlog@@@std@@A::&lt;!Log&gt;)   Sandbox C:\source\Almond\Sandbox\Almond.lib(Log.ixx.obj)    1   
Error   LNK2001 unresolved external symbol &quot;char const * const spdlog::details::os::default_eol&quot; (?default_eol@os@details@spdlog@@3QEBDEB)  Sandbox C:\source\Almond\Sandbox\Almond.lib(Log.ixx.obj)    1   
</code></pre>
<h3>Relevant Code</h3>
<p>Log.ixx (Almond):</p>
<pre><code>export module Log;

import &lt;memory&gt;;

import &lt;spdlog/spdlog.h&gt;;
import &lt;spdlog/sinks/stdout_color_sinks.h&gt;;

export namespace Almond {
    class Log {
    private:
        static std::shared_ptr&lt;spdlog::logger&gt; s_CoreLogger;
        static std::shared_ptr&lt;spdlog::logger&gt; s_ClientLogger;

    public:
        static void Init() {
            spdlog::set_pattern(&quot;%^[%T] %n: %v%$&quot;);

            // Create multithreaded loggers
            s_CoreLogger = spdlog::stdout_color_mt(&quot;ALMOND&quot;, spdlog::color_mode::always);
            s_CoreLogger-&gt;set_level(spdlog::level::trace);

            s_ClientLogger = spdlog::stdout_color_mt(&quot;APP&quot;, spdlog::color_mode::always);
            s_ClientLogger-&gt;set_level(spdlog::level::trace);
        }

        inline static std::shared_ptr&lt;spdlog::logger&gt;&amp; GetCoreLogger() { return s_CoreLogger; }
        inline static std::shared_ptr&lt;spdlog::logger&gt;&amp; GetClientLogger() { return s_ClientLogger; }
    };
    
}
</code></pre>
<p>EntryPoint.ixx (Almond):</p>
<pre><code>export module EntryPoint;

import Application;
import Log;

#ifdef ALMOND_PLATFORM_WINDOWS

export int main(int argc, char** argv) {
    Almond::Log::Init();

    auto app = Almond::CreateApplication();
    app-&gt;Run();
    delete app;
}

#endif
</code></pre>
<p>Main.cpp (Sandbox):</p>
<pre><code>import Almond;

class Sandbox : public Almond::Application {
public:
    Sandbox() {}
    ~Sandbox() {}
};

Almond::Application* Almond::CreateApplication() {
    return new Sandbox();
}
</code></pre>
","0","18801588","",""
"75297509","648044","2023-01-31 12:56:40","0","32","<git><templates><git-submodules>","How to reuse boilerplate code in multiple similar git repos?","<p>I have the following template structure (simplified) copied across multiple repositories (~50) that implement similar cloud services:</p>
<pre><code>service-xx/
|-- lib/
|   |-- utils.py
|
|-- app/
|   |-- main.py
|   |-- business.py    &lt;- 
|
|-- test/
|   |-- __init__.py
|   |-- test_main.py
|   |-- test_business.py    &lt;-
|   |-- test_utils.py
|
|-- README
|-- service-config.yml    &lt;-
|-- Dockerfile
|-- requirements.txt    &lt;-
|-- .ci-config.yml
</code></pre>
<p>For every service I fork a template repo and write specific code in few files (business.py, test_business.py) and make very little changes in the configuration files (like specifying the service name in config.yml and adding some dependency in requirements.txt).</p>
<p><strong>Is there a better workflow to organize the shared files and minimize duplication?</strong></p>
<p>I'm pretty used to git submodules but I can't think of a good way to reference the common files from a repository template. I think it would be a good practice also to change shared files only in one place if the template has some improvement to be implemented (currently I need to manually copy every change in the &quot;shared&quot; files in every project).</p>
<p>I guess one can have a simpler repo for every service with only the <code>app/business.py</code> and <code>test/test_business.py</code> and maybe a shell-script/makefile that sets environment variables referenced in the config files and/or some sort of dependency on the template repo.</p>
","0","648044","",""
"75321427","475763","2023-02-02 10:00:53","0","27","<git><repository><commit><git-submodules><gradle-submodule>","How to `git add path/to/submodule` but with a specific submodule hash?","<p>How to perform <code>git add path/to/submodule</code> but in a way that will update the staging area to have the submodule set to a specific submodule hash instead of the currently checked out hash?</p>
<p>This would be very useful for me when splitting a bulk of changes into separate PRs.</p>
","0","475763","",""
"75342383","1601580","2023-02-04 01:16:48","1","249","<git><git-submodules>","which should be ran first git submodule update or git submodule init?","<p>I am seeing here # <a href=""https://github.com/UCSD-PL/proverbot9001/issues/73"" rel=""nofollow noreferrer"">https://github.com/UCSD-PL/proverbot9001/issues/73</a>
:</p>
<pre><code># run git submodule update and the &amp;&amp; makes sure init is only ran if the first worked
git submodule update &amp;&amp; git submodule init  
# https://github.com/UCSD-PL/proverbot9001/issues/73

</code></pre>
<p>But I believe this is the right/safer/more standard way:</p>
<pre><code>
# - git submodule init initializes your local configuration file to track the submodules your repository uses, it just sets up the configuration so that you can use the git submodule update command to clone and update the submodules.
git submodule init
# - The --remote option tells Git to update the submodule to the commit specified in the upstream repository, rather than the commit specified in the main repository. ref: https://stackoverflow.com/questions/74988223/why-do-i-need-to-add-the-remote-to-gits-submodule-when-i-specify-the-branch?noredirect=1&amp;lq=1
git submodule update --init --recursive --remote
# - for each submodule pull from the right branch according to .gitmodule file. ref: https://stackoverflow.com/questions/74988223/why-do-i-need-to-add-the-remote-to-gits-submodule-when-i-specify-the-branch?noredirect=1&amp;lq=1
git submodule foreach -q --recursive 'git switch $(git config -f $toplevel/.gitmodules submodule.$name.branch || echo master || echo main )'
# - check it's in specified branch. ref: https://stackoverflow.com/questions/74998463/why-does-git-submodule-status-not-match-the-output-of-git-branch-of-my-submodule
git submodule status
</code></pre>
<p>am I right? I'd love to be corrected or know the good practices for this.</p>
<hr />
<p>cross:</p>
<ul>
<li>ref: <a href=""https://www.reddit.com/r/git/comments/10tydp4/which_should_be_ran_first_git_submodule_update_or/"" rel=""nofollow noreferrer"">https://www.reddit.com/r/git/comments/10tydp4/which_should_be_ran_first_git_submodule_update_or/</a></li>
</ul>
","0","1601580","",""
"75349766","1601580","2023-02-05 02:30:37","0","607","<git><github><git-submodules>","Why is git asking me for a username and a password when I try to clone git submodules?","<p>I ran (following the instructions from this repo <a href=""https://github.com/UCSD-PL/proverbot9001/issues/74"" rel=""nofollow noreferrer"">https://github.com/UCSD-PL/proverbot9001/issues/74</a>):</p>
<pre><code>git submodule update --init --recursive --remote
</code></pre>
<p>but got these prompts for the terminal/git:</p>
<pre><code>Cloning into '/Users/brandomiranda/proverbot9001/coq-projects/VST/coq-ext-lib/coqdocjs'...
Username for 'https://github.com': brando90
Password for 'https://brando90@github.com': 
remote: Support for password authentication was removed on August 13, 2021.
remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.
fatal: Authentication failed for 'https://github.com/coq-ext-lib/coqdocjs.git/'
fatal: clone of 'https://github.com/coq-ext-lib/coqdocjs.git' into submodule path '/Users/brandomiranda/proverbot9001/coq-projects/VST/coq-ext-lib/coqdocjs' failed
Failed to clone 'coqdocjs'. Retry scheduled
Cloning into '/Users/brandomiranda/proverbot9001/coq-projects/VST/coq-ext-lib/templates'...
Username for 'https://github.com': 
Password for 'https://github.com': 
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/coq-ext-lib/templates.git/'
fatal: clone of 'https://github.com/coq-ext-lib/templates.git' into submodule path '/Users/brandomiranda/proverbot9001/coq-projects/VST/coq-ext-lib/templates' failed
Failed to clone 'templates'. Retry scheduled
Cloning into '/Users/brandomiranda/proverbot9001/coq-projects/VST/coq-ext-lib/coqdocjs'...
Username for 'https://github.com': 
Password for 'https://github.com': 
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/coq-ext-lib/coqdocjs.git/'
fatal: clone of 'https://github.com/coq-ext-lib/coqdocjs.git' into submodule path '/Users/brandomiranda/proverbot9001/coq-projects/VST/coq-ext-lib/coqdocjs' failed
Failed to clone 'coqdocjs' a second time, aborting
fatal: Failed to recurse into submodule path 'coq-projects/VST/coq-ext-lib'
</code></pre>
<p>is this suppose to happen? Why am I getting this request from git? Why can't it just pull the git repos and initialize the submodules as normal?</p>
","3","1601580","",""
"75349905","1601580","2023-02-05 03:22:21","2","556","<git><github><git-submodules>","How does one fix the git submodule error fatal: Needed a single revision Unable to find current origin/master revision in submodule path?","<p>I keep getting this issue:</p>
<pre><code>fatal: Needed a single revision
Unable to find current origin/master revision in submodule path 'coq_serapy'
</code></pre>
<p>I've tried</p>
<pre><code>git pull --recurse-submodules
</code></pre>
<p>didn't work.</p>
<p>Removing the folder and running:</p>
<pre><code>rm coq_serapy
# - git submodule init initializes your local configuration file to track the submodules your repository uses, it just sets up the configuration so that you can use the git submodule update command to clone and update the submodules.
git submodule init
# - The --remote option tells Git to update the submodule to the commit specified in the upstream repository, rather than the commit specified in the main repository. ref: https://stackoverflow.com/questions/74988223/why-do-i-need-to-add-the-remote-to-gits-submodule-when-i-specify-the-branch?noredirect=1&amp;lq=1
#git submodule update --init --recursive --remote
git submodule update --init --remote
</code></pre>
<p>didn't work. I've seen this <a href=""https://stackoverflow.com/questions/40987847/unable-to-find-current-origin-master-revision-in-submodule-path"">Unable to find current origin/master revision in submodule path</a> but didn't really help.</p>
<p>Any advice?</p>
<hr />
<pre><code>(iit_synthesis) brando9~/proverbot9001 $ git submodule update --init --remote
Submodule 'coq-projects/lin-alg-8.10' (https://github.com/HazardousPeach/lin-alg-8.10.git) registered for path 'coq-projects/lin-alg'
fatal: Needed a single revision
Unable to find current origin/master revision in submodule path 'coq_serapy'
</code></pre>
","1","1601580","",""
"75387806","17163531","2023-02-08 15:12:31","0","40","<typescript><git><git-submodules><getfiles>","git submodule - find file in submodule javascript/typescript code","<p>Ahoi,
I am using a method returns me all projects that contain a .csproj-file.</p>
<p>In my example I have five BlazorApps in my repository:</p>
<ul>
<li>Blazor1</li>
<li>Blazor2</li>
<li>Blazor3</li>
<li>Blazor4</li>
<li>submodule
--&gt; Blazor5</li>
</ul>
<p>One of the projects is in a submodule.
My code can find all folders with Blazor-projects (Blazor1 - Blazor4), but not the BlazorProject in the git submodule,</p>
<p>(Output is: projects found:</p>
<ul>
<li><p>Blazor1</p>
</li>
<li><p>Blazor2</p>
</li>
<li><p>Blazor3</p>
</li>
<li><p>Blazor4)</p>
<pre><code> `export const getAllProjects = async (
  rootFolder: string,
  recursive: boolean,
  result: string[] = []
  ): Promise&lt;string[]&gt; =&gt; {
  const files: string[] = readdirSync(rootFolder)
  const regex = /^.+.csproj$/
  for (const fileName of files) {
  const file = join(rootFolder, fileName)

  if (statSync(file).isDirectory() &amp;&amp; recursive) {
      try {
          result = await getAllProjects(file, recursive, result)
      } catch (error) {
          continue
      }
  } else {
      if (regex.test(file)) {
          info(`project found : ${file}`)
          result.push(file)
      }
  }
  }
       return filterProjectList(result)
  }


  const filterProjectList = (
  projects: string[],
  ignoreProjects: string[]
  ): string[] =&gt; {
  return projects.filter(
      (project) =&gt; {
          return ignoreProjects.indexOf(project) === -1
      }
  )
  }
</code></pre>
</li>
</ul>
<p>`</p>
<p>How can I get access to the Blazor5-Project in my submodule?</p>
<p>I tried to add other conditions to</p>
<p><code>    ...     if (statSync(file).isDirectory() &amp;&amp; recursive) {     ...</code></p>
<p>like</p>
<p><code>...statSync(file).isSymbolicLink() &amp;&amp; recursive</code></p>
<p>but it didnt help</p>
","0","17163531","",""
"75390225","13000598","2023-02-08 18:28:38","-1","38","<git><git-submodules>","Handling git submodules","<p>In this thread <a href=""https://stackoverflow.com/questions/56799562/git-submodule-add-error-does-not-have-a-commit-checked-out/75305137?noredirect=1#comment132992857_75305137"">git submodule add error: does not have a commit checked out</a></p>
<p>I had the exact same experience as the OP, so I read the responses to see if there was a solution. Several people answered that the solution was to delete the .git file in the added submodule. In that thread I asked &quot;But doesn't that defeat the purpose of the submodule and just turn that tree into a local repository without any connection back to where the submodule came from?&quot; (See <a href=""https://stackoverflow.com/a/75305137/13000598"">https://stackoverflow.com/a/75305137/13000598</a>)</p>
<p>So, I'm asking. Is the proper method to handle the situation described by the OP in the original thread to delete the .git subdirectory and, if so, how does that not <em>defeat</em> the purpose of <em>git submodule add</em>?</p>
<p>Am I wrong in believing that it does defeat <em>git submodule add</em>'s purpose?</p>
","1","13000598","",""
"75417355","1601580","2023-02-11 00:33:07","0","713","<git><git-submodules>","How does one git submodule add a specific commit and have it be recorded in the .modules files?","<p>Ideally I'd like the <code>.modules</code> file to have the exact commit I want to use and not change it (unless I tell it to, e.g. with <code>git submodule --init &lt;path2submodule_repo&gt; --remote</code>). But the git submodule add comment doesn't seem to provide an option (so I assume the .gitmodules can't do it?) e.g. see man page:</p>
<pre><code>NAME
       git-submodule - Initialize, update or inspect submodules

SYNOPSIS
       git submodule [--quiet] [--cached]
       git submodule [--quiet] add [&lt;options&gt;] [--] &lt;repository&gt; [&lt;path&gt;]
       git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;...]
       git submodule [--quiet] init [--] [&lt;path&gt;...]
       git submodule [--quiet] deinit [-f|--force] (--all|[--] &lt;path&gt;...)
       git submodule [--quiet] update [&lt;options&gt;] [--] [&lt;path&gt;...]
       git submodule [--quiet] set-branch [&lt;options&gt;] [--] &lt;path&gt;
       git submodule [--quiet] set-url [--] &lt;path&gt; &lt;newurl&gt;
       git submodule [--quiet] summary [&lt;options&gt;] [--] [&lt;path&gt;...]
       git submodule [--quiet] foreach [--recursive] &lt;command&gt;
       git submodule [--quiet] sync [--recursive] [--] [&lt;path&gt;...]
       git submodule [--quiet] absorbgitdirs [--] [&lt;path&gt;...]

DESCRIPTION
       Inspects, updates and manages submodules.

       For more information about submodules, see gitsubmodules(7).

COMMANDS
       With no arguments, shows the status of existing submodules. Several subcommands are available to perform operations on the submodules.

       add [-b &lt;branch&gt;] [-f|--force] [--name &lt;name&gt;] [--reference &lt;repository&gt;] [--depth &lt;depth&gt;] [--] &lt;repository&gt; [&lt;path&gt;]
           Add the given repository as a submodule at the given path to the changeset to be committed next to the current project: the current
           project is termed the &quot;superproject&quot;.

           &lt;repository&gt; is the URL of the new submodule’s origin repository. This may be either an absolute URL, or (if it begins with ./ or ../),
           the location relative to the superproject’s default remote repository (Please note that to specify a repository foo.git which is located
           right next to a superproject bar.git, you’ll have to use ../foo.git instead of ./foo.git - as one might expect when following the rules
           for relative URLs - because the evaluation of relative URLs in Git is identical to that of relative directories).

           The default remote is the remote of the remote-tracking branch of the current branch. If no such remote-tracking branch exists or the
           HEAD is detached, &quot;origin&quot; is assumed to be the default remote. If the superproject doesn’t have a default remote configured the
           superproject is its own authoritative upstream and the current working directory is used instead.

           The optional argument &lt;path&gt; is the relative location for the cloned submodule to exist in the superproject. If &lt;path&gt; is not given, the
           canonical part of the source repository is used (&quot;repo&quot; for &quot;/path/to/repo.git&quot; and &quot;foo&quot; for &quot;host.xz:foo/.git&quot;). If &lt;path&gt; exists and
           is already a valid Git repository, then it is staged for commit without cloning. The &lt;path&gt; is also used as the submodule’s logical name
           in its configuration entries unless --name is used to specify a logical name.

           The given URL is recorded into .gitmodules for use by subsequent users cloning the superproject. If the URL is given relative to the
           superproject’s repository, the presumption is the superproject and submodule repositories will be kept together in the same relative
           location, and only the superproject’s URL needs to be provided. git-submodule will correctly locate the submodule using the relative URL
           in .gitmodules.
</code></pre>
<p>So is the only way to record the commit manually in a bash script like this:</p>
<pre><code>git submodule add -f --name coq-projects/metalib https://github.com/plclub/metalib.git coq-projects/metalib
git submodule foreach -q --recursive 'git switch $(git config -f $toplevel/.gitmodules submodule.$name.branch || echo master || echo main )'
</code></pre>
<p>but obviously edited so it works with commits?
e.g.</p>
<pre><code>git submodule add -f --name coq-projects/metalib https://github.com/plclub/metalib.git coq-projects/metalib
Run git submodule foreach git checkout &lt;commit-hash&gt; to change the checked-out commit in each submodule to the desired commit. Replace &lt;commit-hash&gt; with the hash of the desired commit.
</code></pre>
<hr />
<h1>Specifying the commit in the URL doesn't for git submodule add</h1>
<p>But it does work if you git add it (either way I suppose, with our without the commit in the url since it will fetch the wrong one anyway) cd and the fetch the right commit:</p>
<pre><code>(iit_synthesis) brando9~/proverbot9001 $ git submodule add -f --name coq-projects/metalib git+https://github.com/plclub/metalib.git#104fd9efbfd048b7df25dbac7b971f41e8e67897 coq-projects/metalib
Reactivating local git directory for submodule 'coq-projects/metalib'.

...

(iit_synthesis) brando9~/proverbot9001/coq-projects/metalib $ cd coq-projects/metalib
-bash: cd: coq-projects/metalib: No such file or directory
(iit_synthesis) brando9~/proverbot9001/coq-projects/metalib $ git checkout 104fd9efbfd048b7df25dbac7b971f41e8e67897
Note: switching to '104fd9efbfd048b7df25dbac7b971f41e8e67897'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c &lt;new-branch-name&gt;

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 104fd9e Sync Makefile coq version with README/Docker
(iit_synthesis) brando9~/proverbot9001/coq-projects/metalib $ git status
HEAD detached at 104fd9e
nothing to commit, working tree clean
</code></pre>
","0","1601580","",""
"75425606","3746069","2023-02-12 07:58:23","0","95","<git><git-submodules><gitignore><git-subtree>","Nested folder structure with multiple git repos: submodules, subtrees or .gitignore?","<p>I have set up a set of large Repositories (interlinked HTML-Documentation) and have these requirements:</p>
<ol>
<li>since they are large, i needed to split them up into multiple Repos</li>
<li>Repos need to be checked out into a fixed Folder structure so the relative Links work</li>
<li>users should be able to pick and check out individual repos</li>
<li>all Repos have a simple, linear history with usually only 'main' branch</li>
<li>The actual Version of each repo is not critical (unlike with Code), as long as the files are not moved (which is forbidden, users are asked to leave a forwarding tombstone)</li>
<li>List item</li>
</ol>
<p>This is what I have tried:</p>
<ol>
<li><p>nested submodules: these quickly created conflicts with me, because they track the individual version of each sub-repo which is different in each clone. (Sub-question: are these conflicts 'normal'? Does this ever work in a distributed environment where submodules constantly change or it it a bad idea to use submodules?)
We have started to no longer check in the upper/downstream Repos to avoid conflicts, but one result is that it is always 'dirty'</p>
</li>
<li><p>nested repositories in Folders marked as .gitignore: This seems to works and is sufficient, because the versions between individual repos are not critical. I wonder though if this is a good practice. Mind that cloning all sub-repos is a hassle, but individual users must be able to pick sub-sections. I think about checking in scripts to clone and pull whole sub-directories of repos, but is there maybe a better way?</p>
</li>
<li><p>subtrees: AFAIK these track the full history of the nested repos within the upper/root repo, which would be way too huge. Can someone comment on this?</p>
</li>
</ol>
","3","3746069","",""
"75456928","2824459","2023-02-15 08:02:21","1","93","<git><github><github-actions><gitlab-ci><git-submodules>","How to git submodule level 1 update without using recursive?","<pre><code>&lt;project&gt;
.....&lt;submodules1&gt;
..........&lt;sub1&gt;
.............&lt;submodules2&gt;
.................&lt;sub11&gt;
......................&lt;src&gt;
.........................&lt;submodules3&gt;
.............................&lt;sub2&gt;
....&lt;submodules4&gt;
.........&lt;sub41&gt;
.............&lt;src&gt;
................&lt;submodules5&gt;
</code></pre>
<p>I initially cloned project with <code>git clone &quot;ssh:...&quot;</code>
I tried to update submodules in sub1 with
<code>git submodule update --init</code>
but it just initializes folders of submodules2 without any  contents.</p>
<p>I don't want to use recursive as it updates submodules3. Can I know a way to update submodules with 1 level deep.(I am not asking about history, I need submodules 1 level)</p>
","2","2824459","",""
"75486042","2323616","2023-02-17 15:12:19","1","55","<git><git-submodules><hugo><post-update>","git post-receive hook doesn't work as expected from remote but works when launched locally","<p>I'm setting up git on a server to be able to compile a hugo website and publish it to /var/www/html ready to be served on the internet.</p>
<p>What I do in short is:</p>
<ul>
<li>create a temporary hugo site</li>
<li>checkout the repository and its submodule (hugo theme) inside the same directory</li>
<li>build with hugo deploying the static files directly to /var/www/html</li>
</ul>
<p>What I don't understand is why <code>git --work-tree=$TARGET_DIR --git-dir=./ checkout -f --recurse-submodules</code> doesn't pull the submodule as expected.</p>
<p>Can anyone shed some light as to what I'm doing wrong?
Here's the script:</p>
<pre class=""lang-bash prettyprint-override""><code>#!/bin/bash

# Directory where to work on our site
TARGET_DIR=/tmp/site-compile
# Public dir where to push the site once compiled
PUBLIC_WWW=&quot;/var/www/html&quot;
BACKUP_WWW=$HOME/site-backup
SITE_DOMAIN=https://site.ext
# repository logical name
REPO=&quot;site.ext&quot;
# Branch that is going to be deployed to server
BRANCH=&quot;master&quot;
# date to be appended to latest tag
NOW=$(date +&quot;%d%m%Y-%H%M&quot;)

set -xe

# delete the working directory first
rm -rf $TARGET_DIR
# create new temporary site
/usr/local/bin/hugo new site $TARGET_DIR
# backup public www directory first then setup trap
rsync -avz --no-t $PUBLIC_WWW/ $BACKUP_WWW
trap &quot;echo 'A problem occurred.  Reverting to backup.'; rsync -avz --no-t --del $BACKUP_WWW/ $PUBLIC_WWW; rm -rf $TARGET_DIR&quot; EXIT

while read oldrev newrev ref
do
        # if TARGET_DIR is empty we don't want deploy for this project
        if [[ ! $TARGET_DIR == &quot;&quot; ]]; then
                if [[ &quot;$GL_REPO&quot; == &quot;$REPO&quot; ]]; then
                        # let's check that we are deploying to the correct branch
                        if [[ $ref = refs/heads/${BRANCH} ]]; then
                                echo &quot;Ref $ref received. Deploying '${BRANCH}' branch to production...&quot;
                                git --work-tree=$TARGET_DIR --git-dir=./ checkout -f --recurse-submodules
                                rm ${TARGET_DIR}/config.toml
                                rm -rf $PUBLIC_WWW/*
                                /usr/local/bin/hugo -s $TARGET_DIR -d $PUBLIC_WWW -b &quot;${SITE_DOMAIN}&quot; -t &quot;dagreynix&quot; --noTimes --minify
                                git tag release_$NOW $BRANCH
                                echo &quot;   /===============================&quot;
                                echo &quot;   | DEPLOYMENT COMPLETED - ${REPO}&quot;
                                echo &quot;   | Target branch: ${BRANCH}&quot;
                                echo &quot;   | Target folder: ${PUBLIC_WWW}&quot;
                                echo &quot;   | Tag name     : release_${NOW}&quot;
                                echo &quot;   \==============================&quot;
                        else
                                echo &quot;Ref $ref received. Doing nothing: only the ${BRANCH} branch may be deployed on this server.&quot;
                        fi
                fi
        else
                echo &quot;Target directory not declared. Skipping deploy to server.&quot;
        fi
done

rm -rf $TARGET_DIR
trap - EXIT

</code></pre>
<p>The site.ext repository contains the <code>content/</code> directory, <code>hugo.toml</code> settings file and <code>static/</code> directory, the submodule is a hugo theme.</p>
<p>In short the post-receive script should update the submodule in themes/theme-folder and pull the relative files, otherwise hugo can't properly build the site.</p>
<p>Thanks in advance</p>
<p><strong>[EDIT]</strong></p>
<p>I've solved thanks to @VonC by following this <a href=""https://stackoverflow.com/questions/75486042/git-post-receive-hook-doesnt-work-as-expected-from-remote-but-works-when-launch/75490414?noredirect=1#comment133199871_75490414"">comment</a></p>
","0","2323616","",""
"75531330","10144034","2023-02-22 10:24:37","1","42","<git><git-submodules><gitpython>","Removing a git submodule without a path","<p>I somehow have a git submodule without a path, which I would like to remove.</p>
<p>Looking into the submodules of my codebase, there is some weird config:</p>
<pre><code>[submodule &quot;a/path&quot;]
    path = a/path
    url = &lt;the-git-url&gt;
[submodule &quot;a/path/&quot;]
    url = &lt;the-git-url&gt;
</code></pre>
<p>Note the second submodule has a trailing &quot;/&quot; on the submodule header, no path variable, and points to the same git repo.</p>
<p>This has no bad effects (as far as I can tell) on our typical usage of the codebase and submodules. I only noticed it when GitPython threw an error trying to look at the submodules because of the lack of a path variable.</p>
<p>I want to remove the second submodule record (without a path), but all steps I can find for removing submodules just ends up removing the top one (e.g. <code>git rm a/path/</code>).</p>
<p>How can I remove it? Is it safe to just remove from .gitmodules?</p>
","0","10144034","",""
"75572625","20531364","2023-02-26 14:23:08","0","32","<git><github><visual-studio-code><git-submodules>","How to tell git that I already changed the path of a submodule?","<p>I have a submodule at the following path: <code>src/level_1/level_2/my_Submodule</code>.</p>
<p>In VS Code, I changed the path to: <code>src/level_1/level_2/level_3/my_Submodule</code>.</p>
<p>In this case, git gives me an error that the &quot;path to the my_Submodule is not found&quot;.</p>
<p>How can I make git to use the new path that I already modified?</p>
<p>I can't use <code>git mv old_path new_path</code> because I have to change the path from inside vscode itself, so vscode can update the imports, so I won't have broken paths.</p>
<p>I already read all the similar questions in stackoverflow and none of them solves the situation I explained above.</p>
","0","20531364","",""
"75598156","21020396","2023-02-28 23:05:27","0","53","<git><gitlab><terraform><git-submodules>","Is it possible to fetch all terraform module's source attribute(git url) within a gitlab project","<p>i am new to gitlab and all other doves tools, if i am not describing my problem clearly, i will clarify further. i have gitlab projects with terraform files that contain terraform modules. i wanted to run a bash script or any other to fetch all terraform modules within the project. i would like to create git submodules out of the git urls then.</p>
<p>i do not have enough experience to write a bash script to spent some time within the documentation too, i used chat gpt without any result.
#!/bin/bash
set -euo pipefail</p>
<h1>Define the Terraform files path</h1>
<p>TERRAFORM_FILES_PATH=&quot;/url&quot;</p>
<h1>Extract the source attribute URLs of the Terraform modules used</h1>
<p>grep -r source $TERRAFORM_FILES_PATH | awk '{print $3}' | sed 's/&quot;//g'</p>
","0","21020396","",""
"75588751","17900527","2023-02-28 06:56:44","1","71","<git><git-submodules>","Implementing semantic versioning with git submodules","<p>everyone. I’m working on a project with following structure:</p>
<pre><code>src/
  ExternalLib1/
  ExternalLib2/
  ExternalLib3/
  Main/
  other files…
</code></pre>
<p>Where <code>ExternalLibX</code> are git submodules and supported by other developers in my team, <code>Main</code> and <code>other files</code> - is my project.</p>
<p>My <code>.gitmodules</code> file sets all submodule branches to <code>develop</code> branch.</p>
<p>I want to implement git semantic versioning and I can’t figure out how it can be done.</p>
<p>For example: my colleague updates ExternalLibX module from version v1.0.0 to v1.1.0.
After that he send a notification about that and I need to update Main project.
Now I’m doing it with</p>
<pre><code>cd ExternalLibX
git checkout develop
git pull origin develop
</code></pre>
<p>But after that I also need to update the version into Main project, how can I do that?</p>
<p>I can solve it by changing submodule branches from <code>develop</code> to specific commits, and make a version update in <code>Main</code> after any commit sha change in <code>.gitmodules</code>, but it seems not a good solution for me.</p>
","0","17900527","",""
"75601880","20378170","2023-03-01 09:39:12","1","81","<linux><git><git-submodules><git-rm>","How to remove a submodule from git so that it is deleted from the file system on pull","<p>I have a submodule named my_submodule, which I would like to delete. I need to make sure that it is removed from other developers' file systems as well, to prevent accidentally using it.</p>
<p>I can't require the other develpers to run any extra commands to clean the directory. The repository is worked on by a few hundred people.</p>
<p>I can successfully remove the submodule, which causes it to be removed from git tracking, and also deletes it locally from my file system. When other developers pull the changes, the submodule directory becomes untracked, but is not deleted.They get this error:</p>
<p><code>warning: unable to rmdir 'path/to/my_submodule': Directory not empty</code></p>
<p>I've tried the following strategies, which all resulted in the above error. For each strategy, the repo that I pulled to did not have any local changes.</p>
<p>1.</p>
<pre><code>git rm path/to/my_submodule
git commit
</code></pre>
<ol start=""2"">
<li></li>
</ol>
<pre><code>git submodule deinit path/to/my_submodule
rm -rf .git/modules/path/to/my_submodule
git rm -f path/to/my_submodule
git commit -a
</code></pre>
<p>Using git version 2.25.1, on Linux.</p>
","7","20378170","",""
"75623842","13104244","2023-03-03 06:31:31","0","22","<git><elasticsearch><error-handling><git-submodules>","How can I differentiate whether an error was thrown at git submodule or its parent module?","<p>I have a common function to handle errors and create logs in Elastic, now I want some way to be able to differentiate whether the error occurred in the git module or sub module. I  thought of the solution of using regex as the error stack have the directory name. Problem with that solution is I will not be able to get that when the error is thrown with a custom message.</p>
","1","13104244","",""
"75662785","21349258","2023-03-07 13:45:26","0","30","<git><git-submodules><git-subtree>","nested but communicating git repositories","<p>let <code>upper</code>, <code>left</code>, and <code>right</code> be directories as in the following diagram.</p>
<pre><code>upper
├── left
└── right
</code></pre>
<h3>question</h3>
<p>how do i best manage these with git as local git repositories such that</p>
<ul>
<li>each <code>upper</code>, <code>left</code> and <code>right</code> has a separate git repository,</li>
<li>histories from the repositories of <code>left</code> and <code>right</code> can be somehow propagated to the repository of <code>upper</code>,</li>
<li>histories from the repository <code>upper</code> can be somehow propagated to the repositories of <code>left</code> and <code>right</code>,</li>
</ul>
<p>both of the latter preferably being done without changing the corresponding work-trees <code>upper</code>, <code>left</code>, and <code>right</code>?</p>
<h3>example</h3>
<p>for clarity, call the git repositories of <code>upper</code>, <code>left</code> and <code>right</code> just <code>upper.git</code> <code>left.git</code> and <code>right.git</code> respectively. (you can imagine them as bare repositories entirely outside the mentioned directory structure.) first</p>
<ul>
<li>i work on <code>left</code> and commit to <code>left.git</code>; then</li>
<li>i somehow propagate the history from <code>left.git</code> to <code>upper.git</code>, so the latter knows about all the work i have done; then</li>
<li>i work on <code>upper</code>, sometimes working on files in <code>right</code>, and commit to <code>upper.git</code>; then</li>
<li>i somehow propagate the history from <code>upper.git</code> to <code>right.git</code>, so the latter knows about all the work i have done on files in <code>right</code>.</li>
</ul>
<h3>thoughts</h3>
<p>initially i thought that i could realise this by using git subtree. but when i try to include the repository for <code>left</code> in <code>upper</code> using <code>git subtree -P left add ⟨left.git⟩ master</code>, i - perhaps unsurprisingly - get:</p>
<pre><code>fatal: prefix 'left' already exists.
</code></pre>
<p>i have searched similar questions on stackoverflow, regarding nested repositories, but i quite don’t see how they relate to my problem. i probably don’t understand git subtrees well enough and perhaps i’m a bit too simple-minded in general. i have not looked deeply into git submodules; it seems to me that they are meant for something else.</p>
","0","21349258","",""
"75686126","1050817","2023-03-09 14:43:56","0","115","<typescript><git-submodules><tsconfig>","which is the right way to use a typescript project inside other project with git submodules and avoid type check errors?","<p>What are the best practices for using one Typescript project within another?</p>
<p>Hi, I currently have a (core) project with components that I want to be able to reuse in other (sample) projects, both projects use typescript.</p>
<p>My first approach was to place this core library as a submodule at the level of my project, something like this:</p>
<pre><code>sample
|--src/
|------file_using_core_ts
|--core

</code></pre>
<p>This causes problems because I can't use components declared in core directly, because this shows that <strong>core is outside the root folder</strong>, which is <strong>src</strong></p>
<p>So I tried to test moving <strong>core</strong> to inside <strong>src</strong>, this works fine in principle, I can run the project (yarn dev) and everything looks perfect, except that it generates problems with tsc and I can't do the build.</p>
<p>In a simplification of the project, it would be something like this:</p>
<pre><code>sample
|--src/
|------core/
|----------src/
|-------------sample.ts
|-------------a.ts
|------file_using_core_ts
</code></pre>
<p><strong>sample.ts</strong> uses <strong>a.ts</strong>, but <strong>does not import it in a relative way</strong>, but uses <em>src/a</em>, which is problematic because tsc thinks the path refers to <em>sample/src</em> and not <em>sample/src/core/src</em>.</p>
<p>simplified example</p>
<pre><code>./src/core/src/sample.ts
Type error: Cannot find module 'src/a' or its corresponding type declarations.

&gt; 5 | import a from 'src/a'
</code></pre>
<p>I can't change the core imports to use relative paths, my option might be to change some typescript settings or change the location of my module.</p>
<p>I tried to exclude <code>core</code> from the typechecking, in the sample project tsconfig I put</p>
<pre><code>&quot;exclude: [
    &quot;node_modules&quot;,
    &quot;src/core&quot;
  ]
</code></pre>
<p>I have tried different variants of &quot;src/core/*. , /core, etc....but none of them work, I understand that in this situation even if you exclude the folder, tsc is forced to check the typing.</p>
<p>I'd like to know if there is a better approach to achieve this or if there is a way to configure typechecking, because after all the project runs and works fine when running <em>yarn run dev</em>, it's just a type checking problem.</p>
<p>Please, if you have a more descriptive title for the question, suggest it in the comments and I'll be happy to change it.</p>
<p>thank you so much</p>
","0","1050817","",""
"75748981","7106404","2023-03-15 18:55:23","0","97","<scala><sbt><git-submodules>","SBT and git submodules","<p>I've three separeted git projects, with SBT. They depends on each other, I'm having bad headaches hopping from one to another when looking at call stack.
I wanted to group them under a single sbt project, using git submodules, so I've created a module for each one and then a build.sbt in father project.
ThisBuild / version := &quot;0.1.0-SNAPSHOT&quot;</p>
<p>ThisBuild / scalaVersion := &quot;2.12.16&quot;</p>
<pre><code>lazy val core = RootProject (file(&quot;core&quot;))
lazy val plugins = RootProject (file(&quot;plugins&quot;))
lazy val utilities = RootProject (file(&quot;utils&quot;))
lazy val root = (project in file(&quot;.&quot;))
  .dependsOn(core, plugins, utilities)
  .settings(
    name := &quot;aggregator&quot;
  )
</code></pre>
<p>But I've got an error:
java.lang.NoClassDefFoundError: okhttp3/Interceptor,</p>
<p>I feel that is the wrong way to do it, anyone has some example on how it should be done?
I need only to navigate the code easily, I don't care if single module will not produce the fat jar.</p>
","8","7106404","",""
"75790360","8711970","2023-03-20 12:37:28","0","25","<git><git-submodules>","git submodules within submodules checkout","<p>If got a git repos with a submodule. Inside this submodule, there are other submodules.</p>
<p>When I first set this up on my local machine, I cloned the entire repos and went</p>
<p><code>git submodule update --init --recursive</code></p>
<p>to initialise all the submodules.</p>
<p>Now later down the track, I want to change the checkout status on one of the first-order submodules, I want it to point to another commit/tag. So I went:</p>
<p><code>git -C &lt;path/to/submodule&gt; checkout &lt;tag/commit&gt;</code></p>
<p>Then it feels like I should run <code>git submodule update --init --recursive</code> again to make sure all is set-up right.</p>
<p>That first-order submodule that I just checked out has other submodules within it. Do I need to do anything extra here in regard to checking out those second-order submodules besides initalising? Or, if I'm happy with where the origin/main first-order submodule has checked out those submodules, am I good to go?</p>
<p>I can see in the web-browser version of the git repos at GitHub that the first-order submodule has got the second-order submodules checked out to particular commits, and I'm happy with them. Does that mean all is good in my local clone now considering the commands above?</p>
","0","8711970","",""
"75801854","1704205","2023-03-21 13:27:27","0","19","<git><foreach><commit><git-submodules>","Using --quiet with git commit for submodule foreach - not working","<p>I use a zsh script for pushing submodules. This is the line where I am having an issue:</p>
<p><code>git submodule --quiet foreach &quot;git checkout --quiet main ; git pull --quiet; git add . &gt; /dev/null; git commit  --quiet -m '$COMMITMESSAGE';  git push --quiet&quot;</code></p>
<p>I don't see any of the normal output except for the git commit.</p>
<p>Also related, I tested the git commit on a submodule outside of the <code>submodule foreach</code>. --quiet did not work there either, so wondering if --quiet with git commit does not work with submodules?</p>
<p>Thanks for looking at this!</p>
<p>-Matt</p>
","0","1704205","",""
"75809684","1241317","2023-03-22 08:02:53","0","51","<git><gitlab><gitlab-ci><git-submodules><cicd>","git submodules branches not fetched","<p>My goal is to create a Gitlab pipeline that automatically updates all submodules of my project. So I've created the following pipeline:</p>
<pre class=""lang-yaml prettyprint-override""><code>update:submodule:
  image:
    name: alpine/git
    entrypoint: [&quot;sh&quot;, &quot;-c&quot;]
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - git submodule sync --recursive
    - git submodule update --init --recursive --remote
#    - cd my/submodule
#    - git branch -a
</code></pre>
<p>The referenced submodule (<code>my/submodule</code>) consists of 2 branches:</p>
<ul>
<li>main (default branch)</li>
<li>test</li>
</ul>
<p>In the .gitmodules file I've added <code>branch = test</code> so that it follows this branch. My problem is now that when running my pipeline it fails with the following error message:</p>
<pre><code>Unable to find current origin/test revision in submodule path 'my/submodule'
</code></pre>
<p>When I uncomment the last both lines (where I cd to <code>cd my/submodule</code> followed by <code>git branch -a</code>) I'm getting the following output:</p>
<pre><code>* (HEAD detached at 7d1ff65)
  main
  remotes/origin/HEAD -&gt; origin/main
  remotes/origin/main
</code></pre>
<p>Commit <code>7d1ff65</code> is the latest commit on the main branch. The latest commit on the test branch is <code>1f55a34</code>. So I expected that it updates to latest commit on the test branch, but instead it throws an error. For me it looks like it fetches the main/default branch of the submodule only and during update it cannot &quot;see&quot; the test branch and cannot update it. Does anyone have an idea how I can fix this issue?</p>
","0","1241317","",""
"75823206","15361057","2023-03-23 12:50:07","0","12","<git><github><git-submodules>","Select specific folder on git repository to tranform it in a submodule","<p>Let suppose I have a repository A with this structure:</p>
<ul>
<li>A
<ul>
<li>Main</li>
<li>Code1</li>
<li>Code2</li>
</ul>
</li>
</ul>
<p>then a repository B with this structure:</p>
<ul>
<li>B
<ul>
<li>Code1</li>
<li>Code2</li>
</ul>
</li>
</ul>
<p>There's an way of transform B.Code1 submodule of A.Code1 and B.Code2 submodule of A.Code1?</p>
<p>B.Code1 and B.Code2 works together and cannot be in the same folder, but I dont want to create 2 repositories (one for each).</p>
","0","15361057","",""
"75828839","14795938","2023-03-23 23:32:08","0","35","<git><git-submodules>","Submodules preventing me from staging files in git","<p>I am trying to create a small react application. I have the git CLI installed on my computer.</p>
<p>Once I use create-react-app and it finishes loading, I immediately use git init in the terminal. I then immediately use git add .  , but I instantly get the following message:</p>
<pre><code>hint: You've added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint: 
hint:   git submodule add &lt;url&gt; nodule
hint: 
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint: 
hint:   git rm --cached nodule
hint: 
hint: See &quot;git help submodule&quot; for more information.
</code></pre>
<p>Even though I haven't actually written any code in this project or even opened any of the file, I still go through the process using the git rm command. And even after that, I still cannot get any files to stage using the git add command. I'm not sure what im doing wrong.</p>
","2","14795938","",""
"75889666","1974465","2023-03-30 14:44:25","0","98","<azure-pipelines><git-submodules>","Azure DevOps Pipeline cannot find git-submdoule, if repository was transferred including history. TF401019","<p>We have a git-main-repository that uses a git-submodule. Both repositories are located on Bitbucket and shall both be transferred to Azure DevOps, including the git history.</p>
<p>If we transfer both repositories to Azure DevOps without history (just cloning and pushing to another remote), we can setup a Azure Pipeline that uses the git submodule. All works fine!</p>
<p>But, to migrate to Azure DevOps, we need the git history. So we transferred both repositories using 'git clone --bare .. ' and 'git push --mirror ...'. After the transfer, all files, branches and history look fine for both repositories.</p>
<p>Using same configuration for azure pipeline and git submodule, the issue appears if we setup the pipeline for the main-repository, which uses the git submodule:</p>
<pre><code>remote: TF401019: The Git repository with name or identifier name-lib-mdp-csharp.git does not exist or you do not have permissions for the operation you are attempting.

</code></pre>
<p>Azure pipeline script:</p>
<pre class=""lang-yaml prettyprint-override""><code>trigger:
- master
- azure/*

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  submodules: true
  persistCredentials: true
</code></pre>
<p>.gitmodules file:</p>
<pre><code>[submodule &quot;MDP&quot;]
    path = MDP
    url=../name-lib-mdp-csharp.git
</code></pre>
<p><strong>Update:</strong>
As described in other forums I played around with the Azure project setting &quot;Limit job authorization scope..&quot;, but this did not help.</p>
<p><em>Workaround</em>: locating the repository on GitHub and connect Azure Pipeline to it. This works fine.</p>
","0","1974465","",""
"75917611","21206020","2023-04-03 08:50:18","1","38","<git><bitbucket><git-submodules><git-push><git-pull>","Unable to git push a submodule, but being able to pull it","<p>I am not very skilled in git. I have a git repo, say <code>mainrepo</code>, with a remote one on Bitbucket. <code>mainrepo</code> has a submodule in <code>mainrepo/modules/mymodule</code>.</p>
<p>I do not understand exactly what a submodules is, but, as I see, this sets the <code>.git</code> repo of the submodule inside <code>mainrepo/.git/modules/mymodule</code>.</p>
<p>In any case, I have two branches for <code>mainrepo</code> and <code>mymodule</code>, having the same names:</p>
<ol>
<li><code>develop</code>, which is present on remote</li>
<li><code>feature</code>, which is <strong>not</strong> present on remote</li>
</ol>
<p>For both <code>mainrepo</code> and <code>mymodule</code>, I have committed a modification on <code>feature</code>, fetched the latest modifications from <code>origin/develop</code> into <code>develop</code>, and merged those modifications in the <code>feature</code> branch.</p>
<p>I did it for both <code>mainrepo</code> and the submodule <code>mymodule</code> with no problem.</p>
<p>Now, I need to push those branches on remote, I am using Bitbucket. Note that on Bitbucket <code>mainrepo</code> and the <code>mymodule</code> are contained in two separated repositories. To do that I made</p>
<pre><code>git push --set-upstream origin feature
</code></pre>
<p>This command works fine for <code>mainrepo</code>, but does not work for the submodule <code>mymodule</code>, I get the following error message</p>
<pre><code>The requested repository either does not exist or you do not have access. If you believe this repository exists and you have access, make sure you're authenticated.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>
<p>I tried to re-authenticate with SSH key, but nothing changed. I checked that the remote submodule repository exists, and it does. What it is confusing is that I can git pull, but not push.</p>
","3","21206020","",""
"75932678","17359519","2023-04-04 18:26:44","0","40","<git><git-branch><git-submodules>","Different git submodules within different branches","<p>Is it possible to have different submodules within different branches? For example, branch 1 would only see submodule 1 and branch 2 would only see submodule 2.</p>
<p>One option is to use <code>git submodule deinit</code> before moving to another branch, and then running <code>git submodule init</code> and <code>git submodule update</code> after returning to the first branch. This works, but adds a number of additional steps every time a new branch is to be checked out.</p>
<p>A similar question was asked <a href=""https://stackoverflow.com/questions/17247718/git-different-submodules-in-two-different-branches"">here</a>, but this was 10 years ago and I'm wondering if there is a more up-to-date way of doing this.</p>
","2","17359519","",""
"75964901","21494690","2023-04-08 11:17:18","0","29","<git><repository><git-submodules>","Remove git repository from folder","<p>I cloned into a GitHub repository named &quot;apartments&quot;. I put the &quot;apartments&quot; folder into another folder named &quot;booking&quot; and made a new repository tied to the booking folder. The problem is that when I commit, git recognizes the &quot;apartments&quot; folder like a submodule. How do I remove the submodule and just commit the &quot;apartments&quot; folder in the &quot;booking&quot; repository?</p>
<p>I tried to remove the submodule using &quot;git rm -r --cached apartments&quot;, but even after the command, git recognizes the &quot;apartments&quot; folder as a submodule. What do I do?</p>
","1","21494690","",""
"75997995","806065","2023-04-12 16:50:21","1","31","<git><gitlab><git-submodules>","How can I rewrite the history of .gitmodule so that I can change all submodule origins across all history","<p>Basically, I needed to move some repo's around and several of the repo's have submodules.  I have edited my .gitmodule file to change the origins to the new location, however, it appears that checking out a previous commit will get the old origins.  I'd like to make it such that all previous commits will appear to have the new .gitmodule file.  Is there a procedure for rewriting the history for one file for all time?</p>
","4","806065","",""
"76003035","15896930","2023-04-13 08:02:12","0","82","<go><gitlab><git-submodules><go-modules>","How to Import a golang package which has git submodule depedency in it","<p>I want to create a repo containing json files let us say mapping of countries to country ids, and import this repo in a golang package using git submodule for example called as transformer which reads the json for countries and creates a map and uses that for some operations.</p>
<p>sample structure</p>
<pre><code>repoA: 
-- country.json (mapping of country text to country id)

repoB: (golang package)
-- json (repoA added using git submodule)
-- transformer.go (logic to read json/country.json file and create lookup tables ).

repoC: (golang service)
-- main.go (uses repoB's transformer functionality).

</code></pre>
<p>When we import the created package (transformer or <strong>repoB</strong>), its dependency which is on <strong>repoA</strong> containing our country json file to read, is not imported in <strong>repoC</strong> and hence <strong>repoB package fails to read json</strong>.</p>
<p>tried to fetch submodules,
tried to create build and run but json file was not being read.</p>
<p>expecting that the submodule dependency is present in the imported package.</p>
","4","15896930","",""
"76037379","4973352","2023-04-17 16:36:05","0","20","<azure-aks><git-submodules><grpc-node>","empty git submodules inside a container running on AKS","<p>I have all my grpc protobuf file in a single repository and every other service uses git submodules to have access to the necessary protobuf file.</p>
<ol>
<li>each services have CI github actions that build the image and pushes to docker hub on every pull request on a branch.</li>
<li>i have CD github actions that deploys the changes of the deployment manifest on AKS.</li>
</ol>
<p>I keep getting the error that proto files inside the git submodules are not found on AKS, whenever i run the deployment manifest. So i added the proto file directly to the service and everything ran and started fine. i SSH into the container to discover the directory was empty.</p>
<p>Please how can i atleast get this submodule inside container or how can i update that git submodules on the deployment manifest before the container is run. I'll appreciate any help or pointer.</p>
","0","4973352","",""
"76056814","17359519","2023-04-19 16:22:56","1","30","<git><git-submodules>","Recursively list files in other git branches with submodules","<p>How does one recursively list the files in a git branch, including the contents within the commit in a submodule that the branch references? The branch is currently not checked out, and I want to access the contents without checking out that branch.</p>
<p>This is similar to <a href=""https://stackoverflow.com/questions/36848544/git-finding-a-list-of-files-e-g-using-git-ls-files-including-submodules"">this question</a>, but the question I am raising is for querying a branch not currently checked out.</p>
<p>Unlike <code>git ls-files</code>, <code>git ls-tree</code> does not have a <code>--recurse-submodules</code> option.</p>
","2","17359519","",""
"76063607","21689396","2023-04-20 11:35:42","0","26","<git><git-submodules>","Editing a git submodule if you are not the owner","<p>In my software project I am using a submodule which was posted by somebody else. I now want to edit the submodule so that it works in the context of my larger project, and push the changes to my own repository. How do I do that?</p>
<p>I tried creating a new branch inside the submodule, switching to it, and pushing the changes. But this seems to want to overwrite the original submodule repo, which I cannot do. I also tried git submodule update --remote --merge and then pushed the changes, but that broke the submodule in that the reference to the original submodule was lost and the folder empty.</p>
<p>I also tried following the instructions here <a href=""https://stackoverflow.com/questions/58693985/add-modified-git-submodule-which-is-not-owned"">add modified git submodule which is not owned</a>
which instructs you to fork the submodule and use the fork as the source for your submodule, but after doing that and checking the folder, it is empty.</p>
<p>Thanks for the help.</p>
","2","21689396","",""
"76067691","21692076","2023-04-20 19:39:35","1","86","<git><git-submodules>","How to recursively update only git submodules that are set up to track a branch?","<p>Let's say my <code>.gitmodules</code> defines many submodules. Some submodules track branches while others don't.</p>
<p>In my desired workflow, I'd run a single command that updates only the submodules which track a branch. All other submodules would remain fixed to their commit, rather than updating to the latest remote HEAD.</p>
<p>Running the typical recursive submodule update command would update all submodules, which is not desired:</p>
<p><code>git submodule update --recursive --remote --checkout</code></p>
<p>I've tried specifying a tag in the branch field of a submodule in <code>.gitmodules</code>, but the tag is not recognized as an appropriate reference. (a SHA also doesn't work, as expected):</p>
<p><code>$ git submodule update --recursive --remote --checkout</code></p>
<p><code>fatal: Unable to find refs/remotes/origin/tags/&lt;tag&gt; revision in submodule path &lt;path&gt;</code></p>
","0","21692076","",""
"76070314","17667575","2023-04-21 06:06:09","0","43","<git><git-submodules>","Using `git pull --recurse-submodules` returns the submodule directories empty","<p>I'll start off by asking not to be judged for my use of git... It might not be optimal but it has worked so far. At the moment I am using it to sync all of my university projects between my devices. For some courses I also have submodules, as those are projects I am collaborating on with other people. So far using git submodules seemed to work fine and dandy, but for the last two submodules I have added I can push changes no problem but when pulling, the directory containing the submodule is completely empty, not even the .git file. Here are some things that I have tried and their results:</p>
<pre><code>PS D:\University&gt; git pull --recurse-submodules
remote: Enumerating objects: 14, done.
remote: Counting objects: 100% (14/14), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 10 (delta 5), reused 8 (delta 3), pack-reused 0
Unpacking objects: 100% (10/10), 1.04 KiB | 1024 bytes/s, done.
From https://github.com/**********/University
   0e65e10f..c47ea81b  master     -&gt; origin/master
Fetching submodule Semantics and Rewriting/PokeBattles_project
Fetching submodule Year 2/New Devices Lab/smart-closet
Fetching submodule Year 2/New Devices Lab/smart-shop/final project
From https://github.com/**********/Smart-Shop-Project
   ab09d5a..3304c39  master     -&gt; origin/master
 * [new branch]      dependabot/npm_and_yarn/mongoose-7.0.4 -&gt; origin/dependabot/npm_and_yarn/mongoose-7.0.4
 * [new branch]      dependabot/npm_and_yarn/nodemon-2.0.22 -&gt; origin/dependabot/npm_and_yarn/nodemon-2.0.22
warning: unable to rmdir 'Semantics and Rewriting/PokeBattles_project': Directory not empty
Updating 0e65e10f..c47ea81b
Fast-forward
 .gitmodules                                                        | 7 +++++--
 Human-Computer Interaction/Project/HCI-Project                     | 1 +
 .../{PokeBattles_project =&gt; PokeBattle-Project}                    | 0
 3 files changed, 6 insertions(+), 2 deletions(-)
 create mode 160000 Human-Computer Interaction/Project/HCI-Project
 rename Semantics and Rewriting/{PokeBattles_project =&gt; PokeBattle-Project} (100%)

PS D:\University&gt; git submodule update --remote
Submodule path 'Year 2/New Devices Lab/smart-shop/final project': checked out '3304c398f204debcafa8e37dd89e038feeb345d2'

PS D:\University&gt; git submodule update --recursive --checkout --remote

PS D:\University&gt; git submodule foreach git pull origin main
Entering 'Year 2/New Devices Lab/smart-closet'
fatal: couldn't find remote ref main
fatal: run_command returned non-zero status for Year 2/New Devices Lab/smart-closet
.
</code></pre>
<p>As you can see, I have tried multiple methods that I have seen floating around. The two submodules in question are &quot;HCI-Project&quot; and &quot;Pokebattle-Project&quot;. The HCI project contains a full Unity project besides a readme and a .gitignore, and the other one is just a readme. Ass you can see here, they are completely empty, not even a .git file. And because of that very reason git doesn't even seem to try pulling from those repos if I try <code>git pull --recurse-submodules</code> again:</p>
<pre><code>PS D:\University&gt; git pull --recurse-submodules
Fetching submodule Year 2/New Devices Lab/smart-closet
Fetching submodule Year 2/New Devices Lab/smart-shop/final project
Fetching submodule Year 2/New Devices Lab/smart-shop/login system
Fetching submodule Year 2/New Devices Lab/smart-shop/mongo_db-app
Already up to date.
Submodule path 'Year 2/New Devices Lab/smart-shop/final project': checked out 'eda28e13dc7cadeef8539fe0b2e3d6a2fe28cd0b'

PS D:\University&gt; cd '.\Human-Computer Interaction\Project\HCI-Project\'
PS D:\University\Human-Computer Interaction\Project\HCI-Project&gt; ls
PS D:\University\Human-Computer Interaction\Project\HCI-Project&gt; cd '..\..\..\Semantics and Rewriting\PokeBattle-Project\'
PS D:\University\Semantics and Rewriting\PokeBattle-Project&gt; ls
PS D:\University\Semantics and Rewriting\PokeBattle-Project&gt; cd ../../
PS D:\University&gt; cat .gitmodules
[submodule &quot;smart-closet&quot;]
        path = smart-closet
        url = ../smart-closet/
[submodule &quot;Year 2/New Devices Lab/smart-closet&quot;]
        path = Year 2/New Devices Lab/smart-closet
        url = ../smart-closet
[submodule &quot;Year 2/New Devices Lab/smart-shop/final project&quot;]
        path = Year 2/New Devices Lab/smart-shop/final project
        url = ../Smart-Shop-Project
[submodule &quot;Year 2/New Devices Lab/smart-shop/login system&quot;]
        path = Year 2/New Devices Lab/smart-shop/login system
        url = ../Basic-Node.js-Login-System/
[submodule &quot;Year 2/New Devices Lab/smart-shop/mongo_db-app&quot;]
        path = Year 2/New Devices Lab/smart-shop/mongo_db-app
        url = ../Mybrary/
[submodule &quot;Semantics and Rewriting/PokeBattle-Project&quot;]
        path = Semantics and Rewriting/PokeBattle-Project
        url = https://github.com/DragosSpiridon/PokeBattle-Project.git
[submodule &quot;Human-Computer Interaction/Project/HCI-Project&quot;]
        path = Human-Computer Interaction/Project/HCI-Project
        url = https://github.com/DragosSpiridon/HCI-Project.git
</code></pre>
<p>As you can also see, the submodules are defined in the <code>.gitmodules</code> file. Any idea of what is happening and how I can fix it?</p>
","1","17667575","",""
"59125313","1650012","2019-12-01 12:02:32","1","110","<git><version-control><integration-testing><git-submodules>","How to handle folder of git submodule which is marked as ""untracked"" in the host repo?","<p>I've got a code base in which I want to add another repo as a submodule to do some integration testing. So following a tutorial I ran</p>
<pre><code>git submodule add -b master git@gitlab.com:kramer65/whisky.git
</code></pre>
<p>After that, a <code>git status</code> gives me this:</p>
<pre><code>$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

    .gitmodules
    whisky/

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>As you can see the <code>.gitmodules</code> file is new, but the <code>whisky/</code> folder also appears as untracked. After this I committed the <code>.gitmodules</code> file, but the <code>whisky/</code> folder still appears as untracked.</p>
<p>How should I handle this? Do I need to add the <code>whisky/</code> folder also to the &quot;host repo&quot;? Or do I need to add it to <code>.gitignore</code>? Or is there another way to handle this?</p>
","1","1650012","",""
"42676069","3633737","2017-03-08 15:58:50","3","4575","<git><git-submodules>","git submodule update from different directory","<p>I would like to run a submodule update from outside my git project. For most commands (e.g. <code>git status</code>), I can give git <code>--git-dir</code> and <code>--work-tree</code> arguments, like so:</p>

<p><code>git --git-dir=/path/to/root/.git --work-tree=/path/to/root status</code></p>

<p>However, running <code>git --git-dir=/path/to/root/.git --work-tree=/path/to/root submodule update</code> gives the result: <code>fatal: $program_name cannot be used without a working tree.</code></p>

<p>I am aware that I can change into the <code>/path/to/root</code> directory, however I would like to know if git has the ability to update submodules from outside of the git project.</p>
","0","3633737","0","0"
"62795726","3655005","2020-07-08 13:17:03","0","55","<git><jenkins><git-submodules>","Not able to see newly added file in git submodule","<p>I have added git submodule in my git repo. I use Jenkins to build the code. In Jenkins I do <code>git submodule update --init --remote</code>. When I modify the already existing files in the submodule it works fine. But today I added new file in git submodule repo and when I try to call that file from Jenkins or any of the script of the git submodule it shows error:
<code>./shared-code/check_code_status.sh: No such file or directory</code>
When I do <code>ls</code> in Jenkins it shows newly added file in the shared-code folder.</p>
<pre><code>Cloning into 'shared-code'...
Submodule path 'shared-code': checked out '69c58712f110f14c368e6b1e3e65a195'
total 44
-rw-r--r-- 1 jenkins jenkins  536 Jul  8 12:35 README.md
-rw-r--r-- 1 jenkins jenkins 1162 Jul  8 12:35 build_and_test_app.sh
-rw-r--r-- 1 jenkins jenkins  476 Jul  8 12:35 check_code_status.sh
-rw-r--r-- 1 jenkins jenkins  923 Jul  8 12:35 badge.sh
-rw-r--r-- 1 jenkins jenkins 1693 Jul  8 12:35 git_tag.sh
-rw-r--r-- 1 jenkins jenkins  463 Jul  8 12:35 docker_image.sh
</code></pre>
<p>Can someone help in this?</p>
","5","3655005","",""
"25562325","2038901","2014-08-29 05:45:10","0","221","<git><github><git-submodules><git-flow>","How do you develop along with a git submodule?","<p>Here is my project structure</p>

<pre><code>MainProject
|  README.md
|  src/
|  lib/      # this is a submodule
</code></pre>

<p>When I develop <code>MainProject</code>, I will also develop <code>lib/</code>, I mean <code>MainProject/lib/</code>.</p>

<p>When I do push, I will copy all changes in <code>MainProject/lib/*</code> into <code>MainProject/../lib/</code>, which is a separate  git directory, then push.</p>

<p>After that I will do a submodule update in <code>MainProject/lib/</code> to latest from remote. </p>

<p>Then I will commit and push changes in <code>MainProject</code>.</p>

<p>It suffers. How do you develop along with a git submodule?</p>

<p><strong>ADD</strong></p>

<p>I want all changes in <code>lib/</code> pushed to remote <code>lib</code> repository.
And all changes beside <code>lib/</code> in <code>MainProject</code> pushed to remote <code>MainProject</code>.</p>

<p>So if I directly put to remote <code>lib</code> repository inside <code>MainProject/lib</code>
And then add and commit and push changes beside <code>lib/</code> in  <code>MainProject</code> to remote.</p>

<p>If someone else clone <code>MainProject</code> and do <code>submodule update</code>, will he get the latest sources?</p>

<p>My <code>.gitmodules</code>:</p>

<pre><code> [submodule ""lib""]
    path = lib
    url = git@github.com:XXX/YYY.git
    branch = master
</code></pre>
","0","2038901","0","0"
"7365204","32816","2011-09-09 17:21:21","0","345","<ruby-on-rails><git><git-submodules><githooks><braid>","How to write an update hook for git submodules?","<p>I would like to copy some files in the submodules in my ""vendor/assets"" directory to another directory -- ""public/assets."" I heard about update hooks but I am not sure if they work for submodules. I wrote a simple hook and ran update from commandline, but it didn't work. </p>

<p>My update hook looks like this:</p>

<pre><code>#.git/gooks/update.rb

#!/usr/bin/env ruby

puts ""Copying files...""
</code></pre>

<p>So is this even possible?</p>

<p>btw, I'm using Braid to manage my submodules.</p>
","0","32816","",""
"25580150","1159171","2014-08-30 07:37:28","2","131","<git><git-submodules>","How can I use a git repository in my parent git project?","<p>I tried using submodules to keep a copy from github repository inside my 3rd party directory. After creating and fetching the files, when I commit from project it only see the folder, no the files (and yes, the files are there).</p>

<p>Is there a specific command? </p>
","0","1159171","0","0"
"44184521","5170216","2017-05-25 15:41:01","1","195","<build><mapping><git-submodules>","No submodule mapping found in .gitmodules for path 'paquete/static/lib/cgxp'","<p>I am installing geomapfish.</p>

<p>I am in this step.</p>

<pre><code>https://camptocamp.github.io/c2cgeoportal/master/integrator/install_application.html#apache-wsgi-conf-mako

Then you can build and install the application with the command:

$ make -f &lt;user&gt;.mk build
</code></pre>

<p>But in my case I have this erro:</p>

<pre><code>git submodule update --init
No submodule mapping found in .gitmodules for path 'paquete/static/lib/cgxp'
CONST_Makefile:1030: recipe for target '.git/modules/proyecto1/static/lib/cgxp/HEAD' failed
make: *** [.git/modules/proyecto1/static/lib/cgxp/HEAD] Error 1
</code></pre>

<p>I read this <a href=""https://stackoverflow.com/questions/4185365/no-submodule-mapping-found-in-gitmodule-for-a-path-thats-not-a-submodule"">post</a></p>

<p>And try to follow it but I don't know what is the problem.</p>

<p>If I type:</p>

<pre><code>...# git ls-files --stage | grep 160000
</code></pre>

<p>This is the commandline says:</p>

<pre><code>160000 e1097abee85078e0de1f8e0a4d5269e6a7a9f72f 0   cgxp
160000 7437277b10fbf23206ed75fd6d0924b61d6153be 0   cgxp2
160000 7437277b10fbf23206ed75fd6d0924b61d6153be 0   paquete/static/lib/cgxp
</code></pre>

<p>I think I only need one of them.</p>

<p>Could any help me??</p>
","0","5170216","0","0"
"63048098","13980543","2020-07-23 06:23:06","2","925","<git><git-submodules>","git pull --recurse-submodules ‘Could not access submodule’","<p>When I run the <code>git pull --recurse-submodules</code> command, I get the error below:</p>
<pre><code>Fetching submodule themes/
Could not access submodule ‘assets/vendor/bootstrap’
Errors during submodule fetch:
themes/
</code></pre>
<p>-- I am using - git version 2.27.0.windows.1
-- I'm Working with GitHub.</p>
<p>Could anyone please tell me why this error and how to fix it?</p>
","5","13980543","0","0"
"25858875","2360122","2014-09-16 00:20:13","0","2611","<git><teamcity><git-submodules>","TeamCity - ""No entry for this path in .gitmodules configuration""","<p>An error is consistently reoccurring, preventing builds in <strong>TeamCity</strong> from completing successfully. It seems to fail at updating it's <strong>Git</strong> repo to the latest version.</p>

<p>Here is the error message: (I've formatted it to make it easier to read)</p>

<pre><code>[Updating sources] Failed to build patch for build #119 {build id=620}, VCS root: 
""MyApp Git""
{
    instance id=1, 
    parent internal id=1,
    parent id=MYAPP_GIT, 
    description:
        ""http://build-pc:1234/scm/MYAPP/myapp.git#refs/heads/master""
}, 

due to error: 
    Patch building failed:
    jetbrains.buildServer.buildTriggers.vcs.git
             .submodules.MissingSubmoduleEntryException:
    The repository 'http://teamcity@build-pc:1234/scm/MYAPP/myapp.git' 
    has a submodule in the commit '5bb7870d294c719f61261f94510343abff65b789'
    at a path 'MyApp/Submodules/MySubmodule', 
    but has no entry for this path in .gitmodules configuration
</code></pre>

<p>At the time this error started to occur, I looked inside the .gitmodules file inside the TeamCity build agent's local repo. It was indeed in there:</p>

<pre><code>[submodule ""MyApp/Submodules/MySubmodule""]  
    path = MyApp/Submodules/MySubmodule     
    url = http://build-pc:1234/scm/MYSUB/mysub.git
</code></pre>

<p>Details that might help diagnose this problem:</p>

<ul>
<li>At the time this submodule was being created, I remember there were
some complications that eventually were taken care of. The most I
remember is that the submodule had to be created multiple times due
to the wrong URL and Path being entered. Nonetheless the submodule
""works"" now, minus this issue with TeamCity.</li>
<li>Other submodules have been added to our project, none of which reportedly have this issue.</li>
</ul>

<p>Here is the current build log</p>

<pre><code>[17:58:04]Checking for changes
[17:58:05]Will perform clean checkout
[17:58:05]Clean checkout reasons
[17:58:05]Agent doesn't have any version of the project sources
[17:58:05]Checkout directory is empty or doesn't exist
[17:58:05]Publishing internal artifacts
[17:58:05]Sending using ArtifactsCachePublisher
[17:58:05]Sending using WebPublisher
[17:58:05]Clearing temporary directory: C:\TeamCity\buildAgent\temp\buildTmp
[17:58:05]Using vcs information from server. Reason: no revision information for buildtype Full Build and checkout directory C:\TeamCity\buildAgent\work\MyApp_Checkout on agent
[17:58:05]Clean build enabled: removing old files from C:\TeamCity\buildAgent\work\MyApp_Checkout
[17:58:05]Checkout directory: C:\TeamCity\buildAgent\work\MyApp_Checkout
[17:58:05]Updating sources: server side checkout (6m:36s)
[17:58:06]Building and caching clean patch for VCS root: MyApp Git
[18:04:42]Failed to build patch for build #122 {build id=623}, VCS root: ""MyApp Git"" {instance id=1, parent internal id=1, parent id=MYAPP_GIT, description: ""http://build-pc:1234/scm/MYAPP/myapp.git#refs/heads/master""}, due to error: Patch building failed: jetbrains.buildServer.buildTriggers.vcs.git.submodules.MissingSubmoduleEntryException: The repository 'http://teamcity@build-pc:1234/scm/MYAPP/myapp.git' has a submodule in the commit '8e88b0760de96739bef3d77e8e99303a1d0c8296' at a path 'MyApp/Submodules/MySubmodule', but has no entry for this path in .gitmodules configuration
[18:04:42]Repository sources transferred
[18:04:42]Will repeat attempt when server will be available, number of attempts left: 2
[18:04:52]Updating sources: server side checkout (running for 4m:24s)
[18:04:52][Updating sources] Will perform clean checkout
[18:04:52][Updating sources] Clean checkout reasons
[18:04:52]Agent doesn't have any version of the project sources
[18:04:52]Checkout directory is empty or doesn't exist
[18:04:53][Updating sources] Building and caching clean patch for VCS root: MyApp Git
</code></pre>
","5","2360122","0","0"
"25861341","134063","2014-09-16 05:37:19","1","207","<git><git-submodules><gitignore>","Git Submodules conflicting gitignore","<p>I have a repository where I am ignoring a whole directory, however there is an individual directory inside there that I want to be a submodule. So my git ignore file has the line, </p>

<pre><code>wp-content/plugins/
</code></pre>

<p>I was planning on adding the line</p>

<pre><code>!wp-content/plugins/my-plugin
</code></pre>

<p>So it would then track only the submodule code, correct?</p>

<p>So I attempted to add it as a submodule and was given a ""use -f flag"" message. So I did. Now git status shows that plugin even though the directory is still ignored.</p>

<p>Does the -f force it to override the git ignore directives? And if so, can I then just omit the ! like in my ignore file and commit it all?</p>

<p>Thank you.</p>
","0","134063","0","0"
"44430124","6729172","2017-06-08 08:08:54","0","759","<git><git-submodules>","Update references to a submodule in parent repository after submodule's git history is re-written","<p>Following is the script I'm using to rewrite the history of a submodule which is referenced in multiple parent repositories. This runs in Git bash in a windows environment.</p>

<pre><code>#!/bin/bash

cd submodule_repo

git filter-branch --index-filter 'git rm -q --cached --ignore-unmatch files_to_remove' \--tag-name-filter cat -- --all

git for-each-ref --format=""%(refname)"" refs/original/ | xargs -n 1 git update-ref -d

git reflog expire --expire=now --all
git gc --prune=now
</code></pre>

<p>I need to somehow map the <strong>SHA</strong>s of the old commits to the newly created <strong>SHA</strong>s, so that I can update the same reference in the parent repositories. Is there a way to do it? I did look at <a href=""https://stackoverflow.com/questions/37442500/repository-with-submodules-after-rewriting-history-of-submodule"">Repository with submodules after rewriting history of submodule</a>, but it's not really helping as I'm updating the original refs to make sure the files I'm removing are not repacked by any chance. I'm relatively new to using git so any guidance would be really appreciated.</p>

<p><strong>Edit</strong>:</p>

<p>Following the steps mentioned in comments section of the accepted answer (by @torek) worked for me.</p>
","0","6729172","0","0"
"7718780","514748","2011-10-10 21:15:54","33","14543","<git><undo><git-submodules>","how to undo git submodule update","<p>I accidentally checked in a wrong submodule update: ( as part of a bigger commit )</p>

<p>-Subproject commit 025ffc<br>
   +Subproject commit f59250</p>

<p>It is already pushed to the remote..</p>

<p>How do I undo this update?</p>
","0","514748","0","0"
"7717435","93200","2011-10-10 19:09:20","4","1346","<git><git-submodules>","Can I use git submodule to manage individual files as well as directories?","<p>I have a complex repository where sometimes the logical boundaries between code segments crosses directory boundaries. Sometimes a single file in directory X really needs to go with files in directory Y. </p>

<p>E.g., pretend I have a central repo that looks like this:</p>

<pre><code>a/foo
a/bar
b/baz1
b/baz2
</code></pre>

<p>...and I want my local repository to end up with <code>a/*</code> and <code>b/baz1</code>, but not <code>b/baz2</code>.</p>

<p>(Yes, the long term solution is to move the files, but while I am working on that refactoring, I need to version-control the files appropriately.)</p>

<p>Can I use git submodule to work on a set of code that includes some directories and some other random files? How would I do this?</p>
","0","93200","",""
"7729263","929315","2011-10-11 16:21:03","1","886","<git><git-submodules>","Parsing the output of ""git submodule foreach 'git status'""","<p>I have a Git super project with many submodules.  I'd like to be able to go through the submodules and run <code>git status</code> so that I can quickly see which branch each submodule is on and whether there are uncommitted changes.  However when I run <code>git submodule foreach 'git status'</code> it is difficult to parse and I can't tell which submodule it's reporting the status for.  It appears to just spew out my %PATH% variable (I'm using msysGit on Windows).  My output appears similar to that shown here:</p>

<pre><code>Entering 'C:\Program Files\Git/libexec/git-core;C:\Program Files\Git\libexec\git-core;C:\Program Files\Git\libexec\git-core;C:\Program Files\Git\bin;c:\Documents and Settings\username\My Documents\LinuxHome\bin;.;C:\Program Files\Git\local\bin;C:\Program Files\Git\mingw\bin;C:\Program Files\Git\bin;c:\WINDOWS\system32;c:\WINDOWS;c:\WINDOWS\System32\Wbem;c:\WINDOWS\system32\WindowsPowerShell\v1.0;c:\WINDOWS\system32\WindowsPowerShell\v1.0;c:\Program Files\Intel\WiFi\bin\;c:\Program Files\Windows Imaging\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;c:\Program Files\TortoiseSVN\bin'
# On branch My_Branch
nothing to commit (working directory clean)
Entering 'C:\Program Files\Git/libexec/git-core;C:\Program Files\Git\libexec\git-core;C:\Program Files\Git\libexec\git-core;C:\Program Files\Git\bin;c:\Documents and Settings\username\My Documents\LinuxHome\bin;.;C:\Program Files\Git\local\bin;C:\Program Files\Git\mingw\bin;C:\Program Files\Git\bin;c:\WINDOWS\system32;c:\WINDOWS;c:\WINDOWS\System32\Wbem;c:\WINDOWS\system32\WindowsPowerShell\v1.0;c:\WINDOWS\system32\WindowsPowerShell\v1.0;c:\Program Files\Intel\WiFi\bin\;c:\Program Files\Windows Imaging\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;c:\Program Files\TortoiseSVN\bin'
# On branch My_Branch
# Your branch is ahead of 'FlashDrive/My_Branch' by 10 commits.
#
nothing to commit (working directory clean)
Entering 'C:\Program Files\Git/libexec/git-core;C:\Program Files\Git\libexec\git-core;C:\Program Files\Git\libexec\git-core;C:\Program Files\Git\bin;c:\Documents and Settings\username\My Documents\LinuxHome\bin;.;C:\Program Files\Git\local\bin;C:\Program Files\Git\mingw\bin;C:\Program Files\Git\bin;c:\WINDOWS\system32;c:\WINDOWS;c:\WINDOWS\System32\Wbem;c:\WINDOWS\system32\WindowsPowerShell\v1.0;c:\WINDOWS\system32\WindowsPowerShell\v1.0;c:\Program Files\Intel\WiFi\bin\;c:\Program Files\Windows Imaging\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;c:\Program Files\TortoiseSVN\bin'
# On branch My_Branch
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   MyApp/Win32/Release/MyApp.exe
#   modified:   MyApp/WinCe600 (ARMV4I)/Release/MyApp.exe
#   modified:   MyApp/WinCe600 (ARMV4I)/Release/Startup.exe
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
Entering 'C:\Program Files\Git/libexec/git-core;C:\Program Files\Git\libexec\git-core;C:\Program Files\Git\libexec\git-core;C:\Program Files\Git\bin;c:\Documents and Settings\username\My Documents\LinuxHome\bin;.;C:\Program Files\Git\local\bin;C:\Program Files\Git\mingw\bin;C:\Program Files\Git\bin;c:\WINDOWS\system32;c:\WINDOWS;c:\WINDOWS\System32\Wbem;c:\WINDOWS\system32\WindowsPowerShell\v1.0;c:\WINDOWS\system32\WindowsPowerShell\v1.0;c:\Program Files\Intel\WiFi\bin\;c:\Program Files\Windows Imaging\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;c:\Program Files\TortoiseSVN\bin'
# On branch My_Branch
# Your branch is ahead of 'FlashDrive/My_Branch' by 8 commits.
#
nothing to commit (working directory clean)
</code></pre>

<p>As you can see, this is quite difficult to glance at (especially when the output is wrapped) and see what the output of 'git status'.  In addition the name of each submodule is not shown so I have no way of knowing which submodule each section of output refers to.</p>

<p>Any help is appreciated!  Thanks!</p>
","0","929315","",""
"44455270","3719459","2017-06-09 10:20:13","5","3260","<git><recursion><git-submodules><smartgit>","How to specify --recurse-submodules strategy in SmartGit for git fetch","<p>SmartGit is explicitly using the submodule update strategy <code>no</code>. How can I overwrite it to use the strategy <code>on-demand</code>?</p>

<p>Executed command by SmartGit:
<code>
git.exe fetch --progress --prune --recurse-submodules=no origin
</code></p>

<p>I tried to overwrite the fetch command with an alias:
<code>
git config --global alias.fetch 'git fetch --recurse-submodules=on-demand'
</code></p>

<p>I see no changes in SmartGit's log window.</p>
","2","3719459","0","0"
"44694612","1668622","2017-06-22 08:51:08","2","131","<git><branch><git-submodules>","with git submodules, can I always get branch/HEAD when cloning?","<p>With git 1.8.2+ you can track branches as described in <a href=""https://stackoverflow.com/a/9189815/1668622"">this answer</a>. But compared to svn-externals without revision you seem to have to manually update your submodules when you intend to always build with latest revision of your submodules:</p>

<pre><code>git clone &lt;URL/TO/MY/COMPOSITE/PROJECT&gt; --branch develop --recursive
git submodule update --remote
</code></pre>

<p>Is there a way to always have the latest revision of submodules cloned when tracking branches?</p>

<p><a href=""https://stackoverflow.com/a/10443643/1668622"">This</a> answer suggests it would be bad and dangerous to not explicitly specify revisions for submodules. In my opinion this is true for most cases but there are scenarios where you want to track development-branches of your submodules. In such a case it's just extra work to always <code>pull</code>/<code>update</code>/<code>commit</code> when you want to track changes on your submodules.</p>
","0","1668622","",""
"8298006","418413","2011-11-28 15:20:30","3","135","<git><branching-and-merging><git-submodules>","How can I move large binaries from main to a git submodule?","<p>I have a bunch of videos inside a directory named ""videos"". I committed that unfortunately large folder to git, causing git to become very slow for some activities such as cloning. So I did some research and discovered git submodules, but I don't seem to understand them very well.</p>

<p>Here's what I did:</p>

<ol>
<li>I created a separate repository just for the videos at ssh://dev.example.org/var/git/project/microsite_videos and put the videos in there.</li>
<li>I deleted the videos from my main repo at ssh://dev.example.org/var/git/project/microsite and committed the delete. I realize this doesn't remove the videos from history, but I wanted to make sure I understood submodules before I change history.</li>
<li><p>I added the videos back as a submodule:</p>

<pre><code>git submodule add ssh://dev.example.org/var/git/project/microsite_videos videos
</code></pre></li>
<li><p>I committed these changes to master.</p></li>
</ol>

<p>Here is my .gitmodules file:</p>

<pre><code>[submodule ""videos""]
    path = videos
    url = ssh://dev.example.org/var/git/project/microsite_videos
</code></pre>

<p>At first it seemed to work OK, but I'm confused about some of its behavior. In particular, just now I merged master into a branch and the videos folder just disappeared. The .gitmodules file is still there, but any attempt to pull or update the videos folder just gives me a new prompt without appearing to do anything.</p>

<p>What am I doing wrong, and how can I improve the my understanding of submodules so I don't have to flounder every time I try to branch and merge?</p>
","0","418413","",""
"8381582","246776","2011-12-05 06:06:10","6","2200","<git><svn><external><git-submodules>","How to use a git repository as a svn:external?","<p>SVN offers external source link via <code>svn:external</code> feature. And I'm using a module from a Git repository. Can I use this Git repository as an external source?</p>

<p>My module Git repository is in Github. So Github specific way is also welcome.</p>
","0","246776","0","0"
"8386927","561638","2011-12-05 14:37:10","6","439","<git><git-submodules><git-merge>","strange output during git merge","<p>I am in a clone named /private/gmills, and I ran <code>git merge main_int</code>.</p>

<p>I am seeing a reference to another clone for some other user on a different machine. What does this mean?</p>

<p>I have only 1 remote configured and it isn't pointing to this other clone or machine.</p>

<p><strong>Warning message :</strong></p>

<pre><code>warning: Failed to merge submodule projects/kernel (multiple merges found)
 1b64e534e162316a124f98edef6584d7ead1c563: &gt; Merge branch 'main_int' into main_int_infra_xlp
 fe1ffcf1f49d8741e03710837fc6e1179b1cf222: &gt; merge from main_int workspace:/private/sriniv/projects/kernel on build02
</code></pre>

<p><strong>Information on remote repositories :</strong></p>

<pre><code>git remote -v
origin  git@server:flt/root.git (fetch)
origin  git@server:flt/root.git (push)
</code></pre>
","2","561638","0","0"
"8402453","530006","2011-12-06 15:32:38","1","113","<git><git-submodules>","when dev repo does not map 1-to-1 with production work tree, then is this a good use-case for git submodules?","<p>I am fairly new to git and just figured out the basics of how to update a live website from my local dev repo, via the method explained by these guys: </p>

<p><a href=""http://danielmiessler.com/study/git/#website"" rel=""nofollow"">http://danielmiessler.com/study/git/#website</a><br>
<a href=""http://toroid.org/ams/git-website-howto"" rel=""nofollow"">http://toroid.org/ams/git-website-howto</a></p>

<p>('The one-line summary ^^^ : push into a remote repository that has a detached work tree, and a post-receive hook that runs ""git checkout -f"".')</p>

<p>All is well, but I have 2 problems that I hope I can solve with a little more fancy git footwork than I know how to manage so far:</p>

<ul>
<li><p>My dev repo actually represents much more than just what I need to push to the live site.  But I want to keep my local dev repo as is (with the extraneous folders) because I also use this dev repo to backup <strong>all</strong> my work related to the site (including the master photoshop files I use to create the site's jpgs, project notes, etc.), locally, to my backup dev HD).  I have a vague notion that I should look into git being able to ignore certain files/folders, but (without having looked yet) I don't really want to just ignore anything - I want to backup my <strong>entire</strong> repo using git push when pushing to my backup dev repo (local backup HD), but push only <strong>some</strong> of the folders when pushing to the live site repo.  I don't know how to do this kind of thing.</p></li>
<li><p>The folders of my dev repo actually represent different areas on the live site, which are not in the same directory structure.  I mean to say that I actually need (want, if possible) to cause the post-receive hook(s?) to check out some of the folders/files of the live server tree <strong>into</strong> the web server's DocumentRoot, while checking out some of the other folders/files of the live server tree <strong>outside</strong> the web server's DocumentRoot.  I would have just made the post-receive hook checkout to the parent folder whose child is the server's DocumentRoot, but my dev repo's directory structure does not map one-to-one to the live server's directory structure.  I need a little fine-grained control (for just a few folders), so I can effectively tell the post-receive hook(s?) where each folder of the tree should map to, in the live site directory/file structure.</p></li>
</ul>

<p>Thanks for any guidance!</p>
","1","530006","0","0"
"8407226","98600","2011-12-06 21:39:03","0","95","<git><config><minify><git-submodules>","Commit changes to minify's config.php when set up as a git submodule","<p>In my web app project I have Google <a href=""http://code.google.com/p/minify/"" rel=""nofollow noreferrer"">minify</a> set up as a git submodule; the idea is that I can keep the minify library up to date by simply running <code>git submodule update</code>.
My problem is I have made local changes to the minify <code>config.php</code> file which I want to publish as part of my app... but how can I commit this change to the super-project?</p>

<p>Other sources (e.g. <a href=""https://stackoverflow.com/questions/5542910/how-do-i-commit-changes-in-a-git-submodule"">How do I “commit” changes in a git submodule?</a>) say I need to commit and push the submodule first, but obviously I'm not going to push the changes in my config file to the <em>public</em> minify repository.</p>

<p>What's the best way of handling this sort of set up... I imagine it should be quite common but cannot find any solid recommendations.</p>
","0","98600","",""
"26215625","1536527","2014-10-06 11:49:49","39","29386","<git><git-submodules>","`--name` option doesn't work with `git submodule add` command","<p>I want to add a git submodule with different name like:</p>

<pre><code>git submodule add --name foo git@bitbucket.org:ironsand/cookbook-foo.git
</code></pre>

<p>I wanted to create a git submodule directory named <code>foo</code>, but the repository are created with the name <code>cookbook-foo</code>.</p>

<p>Most likely I'm doing something wrong, but I don't know what was wrong.</p>

<p>How can I change the name of git submodule directory?</p>
","0","1536527","0","0"
"63357412","2280741","2020-08-11 11:42:22","0","244","<git><git-submodules>","Use git submodules for external repositories without use password inside .gitmodules file","<p>I'm using a repository in gitlab,</p>
<p>This repository have two submodules, one of them also in gitlab, but another one is in bitbucket.</p>
<p>Now I have inside <code>.gitmodules</code> file this content:</p>
<pre><code>[submodule &quot;src/repo&quot;]
    path = src/repo
    url = https://ruimartins:***password***@bitbucket.org/xxxxxx/repo.git
[submodule &quot;helm-chart&quot;]
    path = helm-chart
    url = ../helm-chart.git
</code></pre>
<p>But I don't want to have the password visible to all programmers, how can I hide the password from here?</p>
<p>Thanks</p>
","0","2280741","",""
"26861934","4144950","2014-11-11 09:49:55","3","2088","<git><composer-php><gitlab><git-submodules><satis>","composer private package based on gitlab is identified as git submodule","<p>I made some private packages for composer on company's gitlab.
But when require my private package on other project,it is identified as a git submodule,so I can't push it to the production environment.</p>

<p>I follow <a href=""https://getcomposer.org/doc/05-repositories.md#loading-a-package-from-a-vcs-repository"" rel=""nofollow"">composer document</a> to alter my project's composer.json.<br>
I also try the <a href=""https://github.com/composer/satis"" rel=""nofollow"">Satis</a>,but it turn on the same result---submodule.</p>

<p>When I store the package on Github, It works well!</p>

<p>It's the gitlab's issue?<br>
Thanks!</p>
","4","4144950","0","0"
"45131948","5764405","2017-07-16 18:19:05","-1","678","<git><git-submodules>","git submodules empty after git clone --recursive repo_url","<p>Summary: git clone --recursive REPO works, but doesn't checkout a commit for the submodules, instead it leaves all submodules empty.</p>

<p>I run </p>

<blockquote>
  <p>git clone --recurse-submodules git@github.com:user/repo.git
  Cloning into 'repo'...</p>
</blockquote>

<p>However, when I cd into repo, </p>

<blockquote>
  <p>git status</p>
</blockquote>

<p>returns</p>

<pre><code>modified:   submodule1 (new commits, modified content)
modified:   submodule2 (modified content)
modified:   submodule3 (modified content)
</code></pre>

<p>Running ls in any of the submodule folders shows they are all empty.</p>

<p>If I run ""git status"" on any of the submodule folders, it shows that all the contents have been deleted.</p>

<p>I can still checkout master (or any other commits) from any of the submodules, which restores the submodule.</p>

<p>My impression is that the command ""git clone --recursive"" is supposed to download and checkout the submodules. </p>

<p>git version 2.11.0 (Apple Git-81)
hub version 2.2.9</p>
","2","5764405","",""
"9608566","927370","2012-03-07 20:28:32","1","423","<git><git-submodules>","removing a git submodule","<p>I want to remove a git submodule. I found another question that answers how to do it but I had questions about the process. </p>

<p>In my knowledge, removing the reference from .gitmodules should remove it from .git/config as well as I see that .git/config (in the the top level) gets updated on running ""git submodule init"". So, why can't I just remove from .gitmodules and git rm --cached ?</p>

<p>Another question is that when I did that(just remove from .gitmodules), on running git submodules init, I see a failure as git tries to initialize the submodule that I want to remove. </p>

<p>I understand this is a process and this is how it is but if someone can give some more info. on it, it would be great. I have googled on it and also seen similar questions on stackoverflow. </p>
","1","927370","0","0"
"63568809","1584507","2020-08-24 21:16:38","1","81","<git><git-submodules>","Update git submodules when superproject is in detached head","<p>I am trying to programmatically work with Git repositories with submodules.</p>
<p>Just to clarify, this is not a bare clone, I am doing a full clone with recursive mode.</p>
<p>The main project is always checked out in the detached head depending on the user given commit SHA at runtime with git recursive clone.</p>
<p>The problem is the submodules are not updating for some reason. For example, with <code>git log</code> inside the submodule folder I do see the commit from super project showing up but the files haven't been updated.</p>
<p>This is the command I used</p>
<pre><code>git submodule update --init --recursive --force --merge
</code></pre>
<p>I tried the default <code>checkout</code> option too but no use. Any idea how do I guarantee to get the submodule updated to the commit SHA super-project is pointing it to and also make sure the files are updated. Or perhaps I am missing something obvious.</p>
<p><strong>Git log in submodule project's repository locally</strong>
<a href=""https://i.stack.imgur.com/ZNlll.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZNlll.png"" alt=""enter image description here"" /></a></p>
<p><strong>Git log on the server in submodule folder of checked out super-project</strong>
<a href=""https://i.stack.imgur.com/VjvMh.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VjvMh.png"" alt=""enter image description here"" /></a></p>
<p>But if I open the changed file on the server, it has not been updated to reflect the change in this commit.</p>
","2","1584507","0","0"
"45262340","8352256","2017-07-23 06:53:08","4","2102","<git><github><git-submodules><mediawiki-extensions>","How do I add sub directory of directory as a git submodule?","<p>I'm trying to add a submodule, as I normally would do, I did:</p>

<pre><code>git submodule add -f -b master 'https://github.com/OrganicDesign/extensions/tree/master/MediaWiki/PdfBook/'
</code></pre>

<p>Only it gives me </p>

<pre><code>fatal: repository 'https://github.com/OrganicDesign/extensions/MediaWiki/PdfBook/' not found since it does not recognize this as a git repository. 
</code></pre>

<p>Is there anyway to add this submodule (without having to fork anything; so I can keep the upstream)? </p>
","0","8352256","",""
"45678862","1327774","2017-08-14 16:23:06","76","63865","<git><git-submodules>","git submodule update vs git submodule sync","<p>The <code>git</code> documentation doesn't make it at all clear what the difference is between a <code>git submodule update</code> and a <code>git submodule sync</code> is. I'm also not finding any help out on the web. Can someone help me out with what the difference is here?</p>

<pre><code>   update
       Update the registered submodules to match what the superproject expects
       by cloning missing submodules and updating the working tree of the
       submodules. The ""updating"" can be done in several ways depending on
       command line options and the value of submodule.&lt;name&gt;.update
       configuration variable.
</code></pre>

<p>-</p>

<pre><code>   sync
       Synchronizes submodules' remote URL configuration setting to the value
       specified in .gitmodules. It will only affect those submodules which
       already have a URL entry in .git/config (that is the case when they are
       initialized or freshly added). This is useful when submodule URLs
       change upstream and you need to update your local repositories
       accordingly.
</code></pre>

<p>For reference, I'm using the git client version 2.11.0</p>
","0","1327774","0","0"
"45688707","7024671","2017-08-15 07:59:47","3","1541","<c++><cmake><git-submodules>","Isolating gitsubmodule projects in CMake","<p>I'm trying to manage my C++ project dependencies using CMake and gitsubmodules. I'm following the layout described here: <a href=""http://foonathan.net/blog/2016/07/07/cmake-dependency-handling.html"" rel=""nofollow noreferrer"">http://foonathan.net/blog/2016/07/07/cmake-dependency-handling.html</a> and it's worked really well for me on smaller projects. But I've started to use it on much larger projects and I'm hitting some issue with CMake.</p>
<h2>My current setup</h2>
<p>All my external build dependencies are in a <code>contrib/</code> subfolder inside my main project. Each is a submodule and has its own separate directory.</p>
<pre><code>/contrib
- /eigen
- /curl
- /leapserial
- /zlib
- /opencv
etc.
</code></pre>
<p>The <code>contrib/CMakeListst.txt</code> simply initializes the submodule and adds the subdirectory for each external dependency</p>
<pre><code># EIGEN
execute_process(COMMAND git submodule update --recursive --init -- eigen
 WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
# options..
add_subdirectory(eigen EXCLUDE_FROM_ALL)

# CURL
execute_process(COMMAND git submodule update --recursive --init -- curl
 WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
# Initialize cache with CMake build options..
add_subdirectory(curl EXCLUDE_FROM_ALL)

# LEAP SERIAL
execute_process(COMMAND git submodule update --recursive --init -- leapserial
 WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
# Initialize cache with CMake build options..
add_subdirectory(leapserial EXCLUDE_FROM_ALL)

# ZLIB
execute_process(COMMAND git submodule update --recursive --init -- zlib
 WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
# Initialize cache with CMake build options..
add_subdirectory(zlib EXCLUDE_FROM_ALL)

# OPENCV
execute_process(COMMAND git submodule update --recursive --init -- opencv
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
# Initialize cache with CMake build options..
add_subdirectory(opencv EXCLUDE_FROM_ALL)
</code></pre>
<p>This setup has worked fantastically for me:</p>
<ol>
<li>It's system/packagemanager independent. You don't need to install any libraries to get started developing</li>
<li>I can maintain the exact versions of my dependencies by setting the submodule to a particular commit. There are no surprises with some external library breaking your build</li>
<li>Adding the libraries to my build in the root <code>CMakeListst.txt</code> is trivial. Since I have the target available I just have something like</li>
</ol>
<pre><code>add_executable(someProjectImWorkingOn
  ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp )
target_link_libraries(someProjectImWorkingOn
  opencv_world
  eigen
  zlib
  etc.)
</code></pre>
<ol start=""4"">
<li>when you hook up an existing library target to your own target executable/library CMake will automatically (through the target interface) add include directories to your target and add any other necessary options the library target requires for it to be used</li>
<li>I can pick a toolchain/compiler-option/build-type in the root CMakeLists.txt and it'll propogate to all the subprojects (I need to build for multiple systems. So this is a big big deal)</li>
<li>Since it's all in one &quot;mega-project&quot; it makes it very easy to hook up to rtags/kdevelop/clion to navigate not on your own code, but also the library code</li>
</ol>
<h2>Some issues that I can't resolved:</h2>
<h3>1</h3>
<p>Subdirectories will define targets with the same name. In the example I gave, both Eigen OpenCV as well as another library define an 'uninstall' target</p>
<p>I tried to update the</p>
<pre><code>add_subdirectory(blah)
</code></pre>
<p>to</p>
<pre><code>add_subdirectory(blah EXCLUDE_FROM_ALL)
</code></pre>
<p>but this doesn't fix the issue for some reason</p>
<p>Enabling the variable <code>ALLOW_DUPLICATE_CUSTOM_TARGETS</code> kinda works.. but this is a hack, only work with Make files, and the libraries are essentially still &quot;mixing&quot; so it's still an issue</p>
<h3>2</h3>
<p>The second issue came up in LeapSerial but illustrates a bigger issue. The project no longer knows it's own name. LeapSerial tried to determine the version of LeapSerial, but when it asks for the project version it's getting the root project version. Ie. when cmake code in a subproject asks for &quot;what project am I in&quot; it's getting the root project, and not the immediate project it's in.</p>
<p>So again, the parent &quot;namespace&quot;s are leaking everywhere. This is bound to create more and more issues down the line. I need to the submodules to be self-contained</p>
<p>Is there are a cleaner solution?</p>
<p>ExternalProjectAdd might solve some of these problems, but has a <em>lot</em> more issues of its own. It's a real non-starter b/c it doesn't do most of what I've listed. The central issue is that it doesn't expose the sub-project's targets - and just vomits back variables that you then have to juggle</p>
","5","7024671","0","0"
"45690596","3573182","2017-08-15 09:58:31","1","65","<python><django><git><git-submodules>","git link to a submodule file import problems","<p>I added a file to my project which is a symlink to a file in another git project. I followed the steps in this answer <a href=""https://stackoverflow.com/a/27770463/3573182"">https://stackoverflow.com/a/27770463/3573182</a> to add the other project as a submodule in my project. </p>

<p>Now the link I added to the file has some broken imports. 
Let's say my project A's structure is like this (including the structure of the submodule from project B): </p>

<p>Project A:<br>
  - package1:<br>
     -- link.py<br>
  - submodule-of-project-B<br>
    -- package1:<br>
        --- linked_file.py<br>
    -- package2<br>
    -- package3  </p>

<p>Now the 'linked_file.py' has some imports from 'package2' which is a package inside project B. 
But because project A doesn't have that package so the imports inside the link are broken and I cannot run project A. 
I know I can change the imports from <code>import package2</code> to <code>import submodule.package2</code>. 
But because this is a link, I think this will change the import line in the original file in project B which will make it broken there. </p>

<p>I used a link because in the future I need any update in the original file from its developers to be immediately reflected in my project.</p>
","0","3573182","",""
"63689394","14202986","2020-09-01 14:09:39","1","89","<git><git-submodules>","Why does my git repo submodule fail to get updated?","<p>I have a repo (parent project) that relies on a submodule.  I need to update the submodule to the latest commit but it is not working.</p>
<p>I created the submodule like this:
<code>git submodule add https://github.com/library.git</code> (not the real name)</p>
<p>I tried to update it with this:
<code>git submodule update --remote --merge</code></p>
<p>It does not work. I still have the old code in the parent project. When I look at the code in the repo of the submodule the new code is there.</p>
<p>I updated the repo of the submodule, commit and push. That works. I update the submodule in the parent project, that does not work. I make a change to the parent project, commit and push. The submodule is still not updated.</p>
<p>I tried <code>git submodule --init</code> as suggested in one post. This is a terrible command.  First, it copies all the code in the submodule to the parent project which is a waste, potential source for errors now with the same code in two locations plus its the exact same wrong (old) code.</p>
<p>If I issue this command: <code>git submodule update --remote --merge</code>, I get no response.</p>
<p>Anyone know how I can update the parent project to point to the latest submodule?</p>
","0","14202986","0","0"
"45726261","506114","2017-08-17 03:44:53","1","419","<git><git-submodules>","git - submodules - space","<p>I have a large monolithic project where the repository is currently about 1.5GB and I'm wondering if breaking it into smaller submodules and only working on the submodule would help speed up cloning time and keep the storage use the same without increasing it.</p>

<p>If I work on a submodule within the main repository, won't those changes be stored in the main repository and the submodule's repository effectively duplicating the changes and storage requirements?</p>

<p>Is this the right tool for the job, or is there another approach I can leverage to work on a small chunk whilst also having it ""grouped"" under 1 umbrella, so if I want to work on everything, I can easily do that.</p>
","0","506114","0","0"
"63885957","713847","2020-09-14 14:05:35","2","653","<git><git-submodules>","Is there a way to add git submodule without nested submodule?","<p>I have three repositories.</p>
<ul>
<li>RepoCommon</li>
<li>RepoTn</li>
<li>RepoTh</li>
</ul>
<p><code>RepoCommon</code> is added as submodule to both <code>RepoTn</code> and <code>RepoTh</code>. Both <code>RepoTn</code> and <code>RepoTh</code> are two different repositories because earlier in the development it was recognized that those two are independent application. But now later in the development part we realized <code>RepoTn</code> is highly dependent on <code>RepoTh</code>.</p>
<p>As a solution I'm thinking of adding <code>RepoTh</code> as a submodule to <code>RepoTn</code>. But the one thing that bothers me is the &quot;extra&quot; <code>RepoCommon</code> inside <code>RepoTh</code>. If I do that it will essentially have the following structure:</p>
<ul>
<li>RepoTn
<ul>
<li>RepoCommon</li>
<li>RepoTh
<ul>
<li>RepoCommon   -&gt; this is the part I'm trying to remove</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>I'm wondering if it's even possible to remove <code>RepoCommon</code> from <code>RepoTh</code> when I want to add it as a submodule to <code>RepoTn</code>.</p>
<p>Note: <code>RepoTh</code> needs to live on as it's own separate repository as well. Also, another reason I'm asking this because if I can remove/ignore the <code>RepoCommon</code> I can modify the project file to make sure system uses the correct <code>RepoCommon</code> folder. I am using Visual Studio 2019 if that makes any difference. Any other suggestion for a better solution is also welcome.</p>
","1","713847","0","0"
"63889804","1332000","2020-09-14 18:17:33","4","3397","<git><git-submodules>","git submodules - how to undo git submodule update --init","<p>I have a git project with several submodules within.
Between now and a year ago several submodules have moved - even some of the same have been moved a directory level down.  Another one moved from one URL to another and location location. Git does not take such changes kindly :)</p>
<p>When I have my git and have run <code>git submodule update --init</code> - then I cannot run</p>
<pre><code>$ git checkout OLDSHA
fatal: not a git repository: sub/depdir/../../.git/modules/sub/depdir
</code></pre>
<p>or I get</p>
<pre><code>fatal: could not get a repository handle for submodule 'sub/depdir'
</code></pre>
<p>If I clone the git from scratch, run <code>git checkout OLDSHA</code> - AND THEN <code>git submodule update --init</code>, no problems.</p>
<p><strong>Then my question:</strong></p>
<ul>
<li>Is there a way to undo <code>git submodule update --init</code> which essentially brings me back to what I get after <code>git clone PROJECT &amp;&amp; cd project &amp;&amp; git checkout OLDSHA</code></li>
</ul>
<p>Note; this is NOT about getting rid of my submodules. The problem is to enable my e.g. to run git bisect across these changes more effetively without having to re-clone from scratch.</p>
","6","1332000","0","0"
"45935560","8428347","2017-08-29 09:34:19","1","60","<git><python-3.x><github><pip><git-submodules>","how i can use pip3 or github source in my github project for openshift?","<p>I tried to clone GitHub project (<a href=""https://github.com/dimka665/vk"" rel=""nofollow noreferrer"">this</a>), and added it to my project. So, I can see this in my repository, but when I try to run it on openshift I get <code>error: build error: No submodule mapping found in .gitmodules for path 'vk'</code>. What did I make wrong?</p>
","2","8428347","",""
"45944129","3666903","2017-08-29 16:30:40","0","739","<git><git-submodules><git-stash>","Apply git stash pop to new submodule","<p>I worked on two tasks at the same time : writing some code and make a folder of my working tree a submodule. When I switched task, I simply <code>git stash save</code> my modified files. The problem is that my modified files are now part of the new submodule.</p>

<p>And when I try to do a <code>git stash pop</code> on the top folder, I got a lot of conflicts</p>

<pre><code>$ git stash pop
error: refusing to lose untracked file at 'folder/file1'
error: refusing to lose untracked file at 'folder/file2'
[and so on]

CONFLICT (modify/delete): [folder]/file1 deleted in Updated upstream and modified in Stashed changes. Version Stashed changes of [folder]/file1 left in tree. 
CONFLICT (modify/delete): [folder]/file2 deleted in Updated upstream and modified in Stashed changes. Version Stashed changes of [folder]/file2 left in tree. 
[and so on]
CONFLICT (file/directory): There is a directory with name [folder] in Stashed changes. Adding [folder] as [folder]~Updated upstream
</code></pre>

<p>Where [folder] is the previous folder/new submodule</p>

<p>I did a clean clone of the complete repo and the there is no problem with the new submodule.</p>

<p>Is there a way to transfer the stash to the submodule? Or to get the files in the stash and merge them manually in the submodule?</p>
","1","3666903","",""
"45949353","5225057","2017-08-29 22:45:26","2","1788","<git-submodules>","submodule project not present in `git submodule status` roster and unable to commit from parent as single object","<p>I use <code>git submodule add &lt;GitHubURL.git&gt;</code> to add projects as submodules to a main ""parent"" project repository.</p>

<pre><code>Parent_Project_repo
- SubA_repo
- SubB_repo
- SubC_repo
- Sub_Problem_Child_repo
</code></pre>

<p>As I work in the submodules, I make commits within the <code>Sub*_repo</code> project (per usual, committing whichever files I have worked on). In the parent project, however, usually I am just making a single commit for all the submodules commits. This single commit of the submodule usually shows up like so in the <code>Parent_Project_repo</code>:  </p>

<p><a href=""https://i.stack.imgur.com/jrdej.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jrdej.png"" alt=""enter image description here""></a></p>

<p>I have recently added a submodule which, <em>from the parent repository,</em> displays each individual file in the commit history instead of just accessing all the files/commits in one single ""Subproject"" commit object.</p>

<p>Of note:  </p>

<ol>
<li>this problematic submodule does not show up in the roster when I
invoke:<br>
<code>git submodule status</code>  </li>
<li>It is listed in the<br>
<code>Parent_Project_repo/.gitmodules</code><br>
<code>Parent_Project_repo/.git/config</code><br>
file as a submodule &amp; there is a corresponding
<code>Parent_Project_repo/.git/modules/Sub_Problem_Child_repo/</code> folder.</li>
</ol>

<p>How can I get the problem child into the roster and able to have all it's commits handled by the Parent_Project_repo as one object?</p>

<hr>

<p>UPDATE:<br>
The only difference I have discerned with the “problem child” submodule is that it doesn’t have a “historySha” key in the <code>/.git/modules/config</code> file, e.g.:  </p>

<pre><code>[atomGithub]
    historySha = 1936e4c373c130860a8f92683b517dad713ec37
</code></pre>

<p>Also, these commands don't get the Problem child listed in the status:</p>

<pre><code>$  git submodule update --init --recursive
$  git submodule update --recursive
$  git submodule init
</code></pre>

<p>...nor showing up on GitHub in the Parent project with a ""@ e78c392"" which indicates I can double click the link and got to <em>that</em> repo instead of a copy inside the superproject (Parent).  </p>
","0","5225057","0","0"
"64441558","14483932","2020-10-20 08:43:31","0","22","<git><git-submodules>","Can't get any tags when run 'git --git-dir <submodule>/.git tag'","<p>I have a submodule in my git repo A, and I want to get tags of submodule like below steps:</p>
<ol>
<li>cd repo A directory,</li>
<li>run <code>git --git-dir &lt;submodule&gt;/.git tag</code></li>
<li>It return nothing.</li>
</ol>
<p>What's the steps I missed?</p>
<p>Thank you.</p>
","0","14483932","",""
"64472878","12048540","2020-10-21 23:02:36","0","461","<c++><cmake><mingw><git-submodules><assimp>","How to setup Assimp as a separate project (git-submodule) using CMake?","<p>I have a problem with adding Assimp to my project (which consists of exe and library projects). Before Assimp I added GLFW, GLEW and GLM as git submodule to my project. What's more, I did it using CMake. Now I want to do same thing with Assimp but somehow I can't.</p>
<p>I successfully added it as submodule. Then, in my CMake file (of library project) I added this lines:</p>
<pre><code>include_directories(assimp/include)
add_subdirectory(assimp)
target_link_libraries(MyLibrary PRIVATE assimp)
</code></pre>
<p>but compilation failed. Then I set some options:</p>
<pre><code>set(BUILD_SHARED_LIBS OFF)
set(INJECT_DEBUG_POSTFIX OFF)
</code></pre>
<p>but CLion told me that my exe file is corrupted. I created new test project (because why not) just for assimp, set same options (about assimp) and compilation succeeded. But program didn't want to run, next it &quot;did&quot; but didn't even enter main function (exited program with code 1). I'm using MinGW as a compiler, tried switching to Visual Studio compiler but with it compilation failed so I got back to MinGW.</p>
<p>I'm trying to do it that way (with CMake and Assimp as submodule) to make creating project cross-platform. Assimp install tutorial suggests building it with cmake (as a command in console or with &quot;Cmake-GUI&quot;) and then create (by compiling/building) with - for example on Windows - Visual Studio and get the lib/dll file(s) but that's not what I want to do.</p>
<p>Any ideas what I did wrong? I'm rather new to CMake and makeing programs cross-platfrom so it may be a simple thing. For any answers - thank you in advance!</p>
","2","12048540","",""
"10647637","1165123","2012-05-18 06:16:20","0","203","<git><git-submodules>","Reorganize git project using submodule","<p>My project(git project) is based on several git projects maintained by others, and I think git's submodule will make it better. (may be other git functions?) </p>

<p>I commit all their updates to my projects, that is to say, I clone their projects to my sub folder instead of a submodule, and fetch their projects sometimes and then commit it to my projects, because I need their latest version. </p>

<p>After that, my git projects contains lots of boring things esp. when I diff the head. These days I learnt some git basic skills, realize it should be a submodule. But My project is already here. I want to reorganize my project. But I can't tell a best practice to do this task with a smallest cost.</p>

<p>Main problem is that I don't want to lose the commit messages in my projects or rebuild my git project from init point. Also, the project's update message is extract from commit.</p>

<p>A best procedure about this?</p>

<p>Maybe just the contrary procudure of this? 
<a href=""https://stackoverflow.com/questions/1759587/un-submodule-a-git-submodule"">un-submodule a git submodule</a></p>
","0","1165123","",""
"10666085","494642","2012-05-19 14:34:38","20","27489","<git><git-submodules><git-clone><cloning><git-remote>","How do I get `git clone --recursive` to recreate submodules' remotes and branches?","<p>I have a project with a handful of submodules.  Many of them are cloned from a GitHub fork to which I've added a branch for my custom mods.  A typical setup is like thus:</p>

<p>In local folder: MyProject1/Frameworks/SomeAmazingRepo/</p>

<pre><code>$ git branch -vva
*my-fork                       123456 [my-fork/my-fork] Latest commit msg from fork
master                         abcdef [origin/master] Latest commit msg from original repo
remotes/my-fork/my-fork        123456 [my-fork/my-fork] Latest commit msg from fork
remotes/my-fork/master         abcdef [origin/master] Latest commit msg from original repo
remotes/origin/HEAD            -&gt; origin/master
remotes/origin/master          abcdef [origin/master] Latest commit msg from original repo

$ git remote -v
my-fork                        git@github.com:MyUser/SomeAmazingRepo.git (fetch)
my-fork                        git@github.com:MyUser/SomeAmazingRepo.git (push)
origin                         git://github.com/OriginalOwner/SomeAmazingRepo.git (fetch)
origin                         git://github.com/OriginalOwner/SomeAmazingRepo.git (push)
</code></pre>

<p>I <code>git clone --recursive</code> my project to begin a new spin-off project and when it begins to recurse, it spits out an error claiming it can't find the stored commits for these repos.  Upon inspection it seems that the remotes haven't been added and the branch is left (empty) in master ...</p>

<p>In local folder: MyProject2/Frameworks/SomeAmazingRepo/</p>

<pre><code>$ git branch -vva
*master                        abcdef [origin/master] Latest commit msg from original repo
remotes/origin/HEAD            -&gt; origin/master
remotes/origin/master          abcdef [origin/master] Latest commit msg from original repo

$ git remote -v
origin                         git://github.com/OriginalOwner/SomeAmazingRepo.git (fetch)
origin                         git://github.com/OriginalOwner/SomeAmazingRepo.git (push)
</code></pre>

<p>The only remedy is to go and add the remotes manually to all the repos (very tedious).</p>

<p>There exists a similar issue in the cases where there are two tracking branches as above but only one remote (origin => my github fork).  In these case, it finds the commit and checks it out but fails to recreate the tracking branch, leaving a ""dangling"" commit...very scary as it doesn't warn you!</p>

<p>How do I clone my project so that it reliably recreates the submodules' remotes and branches?</p>
","5","494642","0","0"
"10666847","974312","2012-05-19 16:11:18","19","3806","<git><git-submodules>","How to rename a git repo (project) which contains submodules in its subdirectories","<p>I never expect renaming a git repo, which, more specifically, is the top-level folder holds the project, would be so hard. Yes, the project containing some submodules, but it is the <strong>top-level folder</strong> that needs renaming, not the <strong>submodule folder</strong>. Git, it seems, records some odd <em>absolute paths</em> in its submodule mechanisms.</p>

<p>Let's assume that</p>

<ol>
<li>All your projects locate in <code>/tmp</code>.</li>
<li>You've got a <code>proj_master</code> and <code>proj_mod</code>.</li>
<li>You clone <code>porj_master</code> as <code>proj_ALL</code> then clone <code>prom_mod</code> as a submodule in it.</li>
<li>You rename <code>proj_ALL</code> to <code>proj_onebillion</code>. Then black magic happens.</li>
</ol>

<p>The following steps will reproduce the problem I mentioned. The version of git I use is:</p>

<pre><code>$ git --version
git version 1.7.9.5
</code></pre>

<hr>

<ol>
<li><p>Initialize <code>proj_master</code>.</p>

<pre><code>$ cd /tmp
$ mkdir proj_master; cd proj_master
$ git init .
$ touch README
$ git add .; git commit -m ""hello proj_master""
</code></pre></li>
<li><p>Initialize <code>proj_mod</code>.</p>

<pre><code>$ cd /tmp
$ mkdir proj_mod; cd proj_mod
$ git init .
$ touch README
$ git add .; git commit -m ""hello proj_mod""
</code></pre></li>
<li><p>Clone <code>proj_master</code> as <code>proj_ALL</code> and clone <code>proj_mod</code> as a submodule.</p>

<pre><code>$ cd /tmp
$ git clone proj_master proj_ALL
$ cd proj_ALL
$ git submodule add /tmp/proj_mod ./mod
$ git add .; git commit -m ""hello proj_ALL""
$ git status   % Everything is OK.
</code></pre></li>
<li><p>Rename <code>proj_ALL</code> to <code>proj_onebillion</code>. Encounter a fatal error.</p>

<pre><code>$ cd /tmp
$ mv proj_ALL proj_onebillion
$ cd proj_onebillion
$ git status
fatal: Not a git repository: /tmp/proj_ALL/.git/modules/mod
</code></pre></li>
</ol>

<hr>

<p>One thing to notice is the <code>.git</code> file in the submodule directory.</p>

<pre><code>$ cat /tmp/proj_ALL/mod/.git 
gitdir: /tmp/proj_ALL/.git/modules/mod
</code></pre>

<p>Yeah, an absolute path. For the first time, I realize that git is aware of something outside the scope of the top-level repo folder.</p>

<p>That's it. I repeat that one more time that I rename the top-level project folder, not the submodule folder. I check <a href=""https://stackoverflow.com/questions/9878860/how-can-i-rename-a-git-repository-with-submodules"">schmuck's question</a>, which tried to rename the submodule folder, therefore seems not so helpful to my problem.</p>

<p>If I miss something that should have been read before, I apologize. To all guys, any advice is welcomed. </p>
","0","974312","0","0"
"46856978","62660","2017-10-20 20:37:54","2","1067","<git><git-submodules><git-filter-branch>","git filter-tree and modifying submodules","<p>I'm moving the contents of a git repository into another repository, and, for all of the regular commits, everything is fine. I have run into problems with submodules, though.</p>

<p>Setting up, we start with two repos. We'll call them ""docs"" and ""operations"", and we want to move the contents of ""docs"" into a subdirectory of ""operations"", like this:</p>

<pre><code>docs/
  file1.txt
  dir1/
    file2.txt
  other-docs/  &lt;- This is a git submodule

operations/
  bin/
    do-things
  docs/
    important.txt
</code></pre>

<p>And we want the final version to look like this, where the ""docs"" repo ends up under ""docs/legacy"" in the operations repo:</p>

<pre><code>operations/
  bin/
    do-things
  docs/
    important.txt
    legacy/
      file1.txt
      dir1/
        file2.txt
      other-docs/  &lt;- This is a git submodule
</code></pre>

<p>I've got a script that uses a combination of <code>git filter-branch --tree-filter</code> and <code>git rebase</code> (to rebase the new content onto the existing content and handle conflicts like <code>.gitignore</code> files) to perform the actual migration, but, after running the migration, I end up with:</p>

<pre><code>operations/
  bin/
    do-things
  docs/
    important.txt
    legacy/
      file1.txt
      dir1/
        file2.txt
  other-docs/  &lt;- This is a git submodule
</code></pre>

<p>Where the <code>other-docs</code> submodule is still at the root of the new repo.</p>

<p>I understand why this is happening. As I go through the commits to move things, there isn't an actual file for the submodule, so, in the ""everything in this directory is committed exactly as you leave it"" model of <code>git filter-branch --tree-filter</code>, there is <em>nothing</em> to ""leave"" for a submodule.</p>

<p>So, first question: is there some aspect of using <code>git filter-branch</code> where I can account for this? One place I was wondering is if I can add <code>--commit-filter</code> and mess with things there, but I'm not completely clear on what the invariants around a commit filter are.</p>

<p>If not there, is there somewhere else I can do this. As far as I can tell, I will have to modify the existing commits for submodules, basically ""removing"" the submodule in the old, incorrect location and ""add"" the submodule in the new, correct location. I suppose I could script through an interactive rebase operation, finding those commits and amending them. It just sounds like a lot of work if there is a better way.</p>

<p>Any ideas appreciated.</p>
","0","62660","",""
"10677305","144152","2012-05-20 21:20:01","1","4327","<git><git-submodules><bitbucket>","Why is my git submodule command not working with Bitbucket?","<p>I'm trying to add a submodule</p>

<p><a href=""https://bitbucket.org/hski/issuestats-public/wiki/Home"" rel=""nofollow"">https://bitbucket.org/hski/issuestats-public/wiki/Home</a></p>

<p>With the following command</p>

<pre><code>git submodule add git@bitbucket.org:hski/issuestats-public.git issuestats
</code></pre>

<p>I'm getting the following error message</p>

<pre><code>fatal: Not a git repository (or any of the parent directories): .git
</code></pre>
","1","144152","0","0"
"28630040","850236","2015-02-20 13:24:22","-1","235","<git><repository><git-submodules>","How to create git submodule from existing directory?","<p>I have a project with many sub-directory. All of them are independent from each other and I wanna to transform each directory to git's submodule. How could I do this without made conflict between submodule repos and main git repository of project?</p>
","2","850236","",""
"65744067","1143850","2021-01-15 21:56:46","2","678","<git><git-submodules>","custom command in git submodule.<name>.update","<p>I am trying to add a custom command to the <code>.gitmodule</code> file. According to documentation:</p>
<blockquote>
<p>arbitrary shell command that takes a single argument (the sha1 of the commit recorded in the superproject) is executed. When <code>submodule.&lt;name&gt;.update</code> is set to <code>!command</code>, the remainder after the exclamation mark is the custom command.</p>
</blockquote>
<p>I tried something like the following:</p>
<pre><code>[submodule &quot;mysub&quot;]
    path = mysub
    url = mysub-url
    branch = a-branch
    update = !ls   &lt;&lt;  a custom command is here
</code></pre>
<p>Moreover, the code in <code>submodule-config.c</code> contains this:</p>
<pre><code>    } else if (!strcmp(item.buf, &quot;update&quot;)) {
        if (!value)
            ret = config_error_nonbool(var);
        else if (!me-&gt;overwrite &amp;&amp;
             submodule-&gt;update_strategy.type != SM_UPDATE_UNSPECIFIED)
            warn_multiple_config(me-&gt;treeish_name, submodule-&gt;name,
                         &quot;update&quot;);
        else if (parse_submodule_update_strategy(value,
             &amp;submodule-&gt;update_strategy) &lt; 0 ||
             submodule-&gt;update_strategy.type == SM_UPDATE_COMMAND)  //&lt;&lt;&lt; bummer! is it supposed to be
            die(_(&quot;invalid value for %s&quot;), var);
    }
</code></pre>
<p>However, all attempts to do so end up in: <em>fatal: invalid value for submodule...</em></p>
<p>So, any idea what is going on with custom commands in submodule updates? Is it just an oversight which had never been tested? Am I missing something?</p>
<p>I use git 2.26.0</p>
","4","1143850","0","0"
"65770548","10336854","2021-01-18 07:48:20","2","671","<git><docker><github><docker-compose><git-submodules>","docker-compose can't use git submodule","<p>I try to build a docker container from git with docker-compose but when I try to do &quot;docker-compose build&quot;, it says:</p>
<pre><code>Building network_monitor
ERROR: error initializing submodules: git: 'submodule' is not a git command. See 'git --help'.
: exit status 1
</code></pre>
<p>my docker-compose.yml:</p>
<pre><code>version: &quot;3&quot;

services:
    [...(irrelevant services)...]

    network_monitor:
        build: git://github.com/Kruemmelspalter/network_monitor#main
        ports:
            - &quot;10380:80&quot;
        volumes:
            - &quot;./network_monitor/conf:/root/conf&quot;
    [...(irrelevant services)...]
</code></pre>
","0","10336854","0","0"
"47250664","8713552","2017-11-12 15:42:44","0","898","<git><version-control><dependencies><git-submodules>","Alternative for git submodules","<p>I often write some libraries for my own usage that I want to use in different projects. I would like to have a possibility to edit the library and make the changes valid in all the projects where the libraries are used. Until now I always had to do copy&amp;paste. </p>

<p>I tried submodules but there seem to be many downfalls according to <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow noreferrer"">git submodules reference</a>. </p>

<p>Are there better possibilities for this dependency management?
What is the best practice for this?</p>
","3","8713552","",""
"11132892","645127","2012-06-21 06:45:26","1","2035","<git><git-submodules>","How to remove cloned git repo from a second git repo?","<p>I accidentally added a cloned git repository to a working copy clone of my repository, and pushed the changes to my remote. I did not use git submodule to do that, but rather did something like ""git add somedir.git"". </p>

<p>Now whenever I clone my repo, I get an empty ""somedir.git"" directory. I cannot do a ""git rm -r somedir"", because git complains ""somedir.git is a directory"". </p>

<p>How can I get rid of this directory or convert it into a proper submodule? The directory is completely empty after cloning, not even a .git/ folder in there.</p>
","2","645127","0","0"
"65820451","1503005","2021-01-21 02:41:24","1","27","<git><git-submodules>","How do I set up git submodules to get the latest commit from a specific branch without downloading the full history?","<p>Our product has a repo that controls our setup and installation process, and a bunch of others that contain different components. The setup process needs to access certain config files whose master copies are kept in the component repos; currently, those files are duplicated in the install repo, but this means they have to be kept in sync which complicates updates, so I want to move to including the other repos as submodules. The problem is, I want to only download the specific commits that we need - namely the latest commit of a specific branch - without downloading the full history of each repo, and I can't find any set of commands that will do this without giving me <code>Unable to find current origin/Some_branch revision in submodule path 'REDACTED'</code> errors.</p>
<p>The specific operations I need to support are:</p>
<ul>
<li>After a fresh instance of the installer is cloned, I need to initialize, fetch, and check out all the submodules</li>
<li>Sometimes new submodules will be added to the installer; after updating an existing instance of the installer by pulling the commit(s) which add them, I need to be able to initialize the new ones <em>without</em> affecting any existing submodules
<ul>
<li>Specifically I <em>do not</em> want to update the existing repos to the latest commit of the given branch - only initialize the new ones</li>
</ul>
</li>
<li>Whenever a submodule is initialized, it should check out the latest commit in the branch with the same name as the current branch of the super-project</li>
<li>Ideally, the required commit should be the only one downloaded, but having to download O(1) additional commits is acceptable</li>
<li>I need to be able to do this for all submodules at once, without needing a list of what submodules there are (other than <code>.gitmodules</code>) or which ones are new. Ideally this should just be a set of global commands in the super-project (e.g. <code>pull</code>, <code>submodule init</code>, <code>submodule update</code>, <code>submodule foreach</code>), but a solution that requires parsing the output of <code>submodule status</code> using Bash would be acceptable.</li>
<li>If possible, a solution that is compatible with Git versions at least as old as 2.16.6 would be nice</li>
</ul>
","3","1503005","0","0"
"11518818","224743","2012-07-17 08:36:14","8","5940","<php><git-submodules><composer-php>","Add php composer packages to my git repository","<p>I've installed composer and added some packages via 'composer install'. It installed them under ""my_project\vendor"" path but some of the packages were cloned using git, so when I committed ""my_project"", those cloned packages were ignored. </p>

<p>The problem is that when other developers are cloning ""my_project"", they are missing the packages that were ignored. Is there a way to automatically add the packages to ""my_project"" so other developers will fetch them from me?</p>

<p>I think this should be done using submodules, but I don't know how to automatically add every new package from composer as a submodule to my project.</p>
","2","224743","",""
"66136660","913098","2021-02-10 12:12:56","1","37","<git><git-submodules>","How to decide which module is a submodule of the other in git?","<p>Assume a module <code>A</code>, and a testing module for it, <code>T</code>.<br />
I would like to decide which of them should be the sub module of the other.</p>
<p>Intuitively, it would make sense to me to make <code>T</code> a sub module of <code>A</code>, because it has no meaning on its own.</p>
<p>However, I read for example <a href=""https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407"" rel=""nofollow noreferrer"">here</a> that</p>
<blockquote>
<p>... if the technological context allows for packaging and formal
dependency management, you should absolutely go this route instead</p>
</blockquote>
<p>Please assume we don't have the capacity right now to set up a packaging pipeline, thus need to use sub modules.</p>
<p>By that rationale, it would make sense to treat <code>A</code> as a package, and &quot;install&quot; it for <code>T</code>, which would mean <code>A</code> is actually a sub module of <code>T</code>.</p>
<hr />
<p>This is confusing to me, and I would like to know the best practice for this use case, and preferably also thumb rules on how to decide on the main question of &quot;what is a sub module of what&quot;.</p>
","0","913098","",""
"47603812","2121601","2017-12-02 01:56:13","2","622","<git><unity-game-engine><git-submodules><gitignore>","Adding files ignored by a git submodule","

<p><strong>TL;DR:</strong> I want a submodule to ignore some files, but I want those files tracked by the parent project</p>

<p><strong>Details</strong></p>

<p>This is for a Unity project. I want to add a bunch of code and assets I frequently used into a submodule, so I can easily share it between projects.</p>

<p>The problem is that Unity needs to keep track of "".meta"" files, that get stored along each asset. And these .meta files are unique for each project, so they can't be shared through the submodule.</p>

<p>So, I added a .gitignore file into the submodule, telling it not to track .meta files</p>

<p>So far things go as planned. I added the submodule into the project, and it correctly ignores the project's meta files. However, although I need to commit those into the main git repository, anything under the submodule is getting ignored, so I can't add the meta files into the main repository.</p>

<p><strong>Example:</strong></p>

<pre><code>Assets
L Game Files
  L some_asset.jpg
  L some_asset.jpg.meta
L Submodule    
  L shared_asset.jpg
  L shared_asset.jpg.meta
</code></pre>

<p>In this scenario, I want the main git repository to track:</p>

<pre><code>Assets
L Game Files
  L some_asset.jpg
  L some_asset.jpg.meta
L Submodule    
  L shared_asset.jpg.meta
</code></pre>

<p>And the submodule:</p>

<pre><code>shared_asset.jpg
</code></pre>

<p>I combed the web, I tried different .gitignore combinations but nothing works. I'm starting to think this is probably impossible, but if anyone has any idea, I would greatly appreciate it!</p>

<p>Thanks in advance!</p>






","0","2121601","0","0"
"66147974","283361","2021-02-11 02:29:21","0","85","<git><git-submodules>","""git submodule foreach"" does not iterate over all modules","<p>I want to iterate a command over all of my submodules, but <code>git submodule foreach</code> skips many of them.</p>
<pre><code>$ git submodule foreach pwd
Entering '.zprezto'
/Users/zachriggle/.zprezto
Entering 'omni'
/Users/zachriggle/omni
</code></pre>
<p>You can see that there are many more modules listed in .gitmodules</p>
<pre><code>$ cat .gitmodules
[submodule &quot;.bash_it&quot;]
    path = .bash_it
    url = git://github.com/zachriggle/bash-it.git
[submodule &quot;.zprezto&quot;]
    path = .zprezto
    url = ssh://git@REDACTED/~zriggle/prezto.git
[submodule &quot;.pyenv&quot;]
    path = .pyenv
    url = git://github.com/yyuu/pyenv.git
[submodule &quot;.rbenv&quot;]
    path = .rbenv
    url = git://github.com/sstephenson/rbenv.git
[submodule &quot;uncrustify&quot;]
    path = uncrustify
    url = ssh://git@REDACTED/~zriggle/uncrustify.git
[submodule &quot;omni&quot;]
    path = omni
    url = ssh://git@REDACTED/~zriggle/omni.git
</code></pre>
<p>How do I get Git to iterate over ALL of the submodules?</p>
","2","283361","",""
"11567073","688266","2012-07-19 18:27:29","1","341","<git><git-submodules>","how do i know if a submodule has changed in git?","<p>Currently I have a few submodules in my parent project.  How can I tell if one of the submodules has recently changed and I need to do a </p>

<pre><code>git submodule foreach git pull origin master
</code></pre>
","1","688266","",""
"11568479","688266","2012-07-19 20:08:04","2","218","<git><git-submodules>","In git, how do we add a sub-module to a project, but only pull in a sub-directory of the submodule?","<p>So we have a submodule:   App-Models/src/models/question.rb</p>

<p>And our main rails application is: App-Rails (which uses submodule App-Models)</p>

<pre><code>cd App-Rails
git submodule add git@url:SC-Models app/models
</code></pre>

<p>This will create:</p>

<pre><code>SC-App/app/models/src/models/question.rb
</code></pre>

<p>Seems like that sub-directory structure is really messy and too nested, how do we avoid it?</p>

<p>We would essentially like to have:</p>

<pre><code>App-Models/src/models/question.rb
</code></pre>

<p>and
    App-Rails/app/models/question.rb (from submodule)</p>

<p>ps. We like App-Models to be in sub-directories so it is easier to test the files.</p>
","2","688266","0","0"
"11567418","366853","2012-07-19 18:52:34","4","5968","<git><github><git-submodules>","git submodule update and authentication","<p>I've just started using git (like right this second). I've been invited to use a project that contains some submodules and I've been given permission through my Github account. When I cloned the repo, I got some errors:</p>
<pre class=""lang-bash prettyprint-override""><code>$ git submodule init
Submodule 'js/Common/enginelite' (git@github.com:clientName/EngineLite.git) registered for path 'js/Common/enginelite'

$ git submodule update
Cloning into 'js/Common/enginelite'...
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>
<p>Is there a way to pass credentials during this? Is there something I have to do locally or on Github? Thanks!</p>
","1","366853","0","0"
"11583753","980414","2012-07-20 16:53:07","6","8849","<git><indexing><git-submodules>","git status gives me an error: bad index file sha1 signature","<p>In my git repository I did an utf-8 conversion of many files, but only below the .git directory, so the .git directory was not touched.
Before this conversion I created a new testing branch, but now I cannot use my repo anymore, I cannot switch back to the master.
When I do:</p>

<pre><code>git status 
</code></pre>

<p>or any other git command I get:</p>

<pre><code>error: bad index file sha1 signature 
fatal: index file corrupt 
fatal: 'git status --porcelain' failed in submodule core/kimai-mobile
</code></pre>

<p>I searched about it and found the command:</p>

<pre><code>rm -f .git/index 
</code></pre>

<p>and after this:</p>

<pre><code>git reset
</code></pre>

<p>but this didn't help. I don't understand what is wrong.
Then I deleted the ""submodule"" core/kimai-mobile and suddenly I could use it again!</p>

<p>I had this other git repository in this directory in which I destroyed the other index file with my conversion. 
My problem was, that I thought that the ""main"" repositorys index file was meant.</p>

<p>Now it is working again :)</p>

<hr>

<p>My question is, why did git look into this submodule although I had the whole folder of this submodule in my ignorelist?</p>

<p>This is the ignore file of my ""main"" git:</p>

<pre><code>.gitignore

...
# kimai mobile
kimai-mobile
...
</code></pre>
","0","980414","0","0"
"29418611","1191028","2015-04-02 17:10:34","2","1778","<git><github><version><git-submodules><githooks>","tracking version numbers of subfolders in git","<p>My team is using github to manage a private repo full of cms themes. We have them all within the same repo and keep track of them with subfolders, labels and keeping our branchs and commits prefixed with the theme name</p>

<p>IE<br>
Commit message: <code>""[Super Theme] upgraded Navigation to include hover effect""</code> <br>
Branch <code>super_theme-upgrade-navigation-hover</code></p>

<p>Now we want to introduce semantic versioning into the theme's settings page so if you click about, you get the version number, but I'm not sure the best way to implement this</p>

<p>We could use git tags and git describe to check the number of commits but this only works if each folder is its own repo. We want to keep them together because it makes discussions on github easier since an issue affecting one theme often affects another. They're all different, but very closely related. </p>

<p>I thought about adding a script for us to check the current version of in the theme's json file and incrementing it, but I'm not sure if this is automatic enough. I really want to be sure that we don't run into version conflicts with everyone on the team. Not sure if submodules would work here since we want them always up to date. </p>

<p>I want a way to update the version number for a subfolder only when a branch working on that folder is merged into master. </p>

<p>Stumped. I'm not even sure if thats a clear question, so please ask for clarification. </p>
","2","1191028","",""
"29425135","1452634","2015-04-03 01:47:42","1","378","<xcode><unit-testing><build><cocoapods><git-submodules>","Running unit tests on git submodules (which are also CocoaPods) in Xcode 6.2","<p>My project is using an internal library.</p>

<p>It is set up both as a CocoaPod for dependency management and as git submodule so that I only need to package a new version when it's actually ready for release.</p>

<p>See <a href=""http://albertodebortoli.github.io/blog/2014/03/11/cocoapods-working-with-internal-pods/"" rel=""nofollow"">CocoaPods: Working With Internal Pods Without Hassle</a> for a detailed description of this setup.</p>

<p>So I've just modified my internal library, and those changes are now reflected in the pod, which I'm excited about.</p>

<p>The catch, however, is that the internal library has its own Podfile, and thus require a workspace. Since I generally would not build that library except as a dependency, it's mostly fine... up until I want to run unit tests on it.</p>

<p>Since CocoaPods normally includes the pods in a workspace, it can't find the object files for the pod dependencies. However, they're there - since those dependencies are also included in the project that uses the pod.</p>

<p>I don't think it's possible to nest workspaces in Xcode. But shouldn't it be possible make some change in the internal library's Build Phases-Link Binary With Libraries to point libPods.a to the one generated by the main project?</p>
","0","1452634","0","0"
"11637175","39321","2012-07-24 18:36:30","47","23524","<git><github><git-submodules><git-fork>","Swap git submodule with own fork","<p>I added a submodule to my git repo like this:</p>

<pre><code>$ git submodule add git://github.com/user/some-library some-library
</code></pre>

<p>I've decided I want to create a fork of that library to do some adjustments. How can i swap that submodule so that it points to my own github fork instead?</p>
","1","39321","0","0"
"11640195","152295","2012-07-24 22:24:46","2","110","<windows><git><git-submodules>","How can I track a git repository in a different directory?","<p>So I have a project that is a git repo which contains another git repository. So the structure is this:</p>

<pre><code>/gitProject
    /other
    /stuff
    /anotherGitProject
</code></pre>

<p>Currently, I've got anotherGitProject set up as a submodule of gitProject. My problem is that I have to deploy anotherGitProject to another part of my hard drive. Since anotherGitProject functions as an add-on, I just copy the contents of anotherGitProject directly into the other project's directory tree:</p>

<pre><code>/gitProject
    /other
    /stuff
    /anotherGitProject
/otherProject
    /(contents of anotherGitProject+otherProject)
</code></pre>

<p>My question is: How can I keep track of the changes I make to anotherGitProject within gitProject? This seems really convoluted, but I need to make changes to anotherGitProject on top of otherProject or else this wouldn't be an issue.</p>
","0","152295","",""
"11657957","1392690","2012-07-25 20:18:39","2","916","<git><github><git-submodules>","initialize submodule using git","<p>I added this to my application:</p>

<pre><code>https://github.com/fpotter/juggernaut-cocoa
</code></pre>

<p>In the instructions, it says:</p>

<pre><code>If you have git 1.7+ git clone git://github.com/fpotter/juggernaut-cocoa.git --recursive
</code></pre>

<p>It doesnt say where to clone it, so I clone it in my Documents folder. Then I copy the AsyncSocket.h, AsyncSocket.m, WebSocket.h, WebSocket.m, SocketIoClient.h, SocketIoClient.m, JuggernautClient.h, JuggernautClient.m files to my project in a folder I created called juggernaut-cocoa inside vendor.</p>

<p>However, while the files work on my local machine, when i push to github they are never added. All I see is a little green folder:</p>

<p><a href=""http://i47.tinypic.com/2ajnkzl.jpg"" rel=""nofollow"">http://i47.tinypic.com/2ajnkzl.jpg</a></p>

<p>But when I try to clone my repository from another computer, the files are not there, they were never added to git.</p>

<p>I then tried to clone their project into my Vendor folder, and then ran git submodule init but got this:</p>

<pre><code>No submodule mapping found in .gitmodules for path 'Vendor/juggernaut-cocoa'
</code></pre>
","0","1392690","0","0"
"63458062","3805208","2020-08-17 20:19:13","2","442","<git-submodules>","updating named git submodules fails with fatal error","<p>I have worked with git submodules in the past. I know the basic functionality.
If I simply used <code>git submodule add &lt;repo-url&gt; &lt;path/to/submodule&gt;</code>, the <code>.gitmodules</code> file would have :</p>
<pre><code>[submodule &quot;path/to/submodule&quot;]
        path = path/to/submodule
        url = &lt;repo-url&gt;.git
</code></pre>
<p>Recently, I had to add a new git submodule to a repository that I was working on. I also found the <em>fancy</em> <code>--name</code> flag that can be used with the <code>git submodule add</code> command, from the man page of git submodule. The add worked fine and my <code>.gitmodules</code> had :</p>
<pre><code>[submodule &quot;&lt;submodule-name&gt;&quot;]
        path = path/to/submodule
        url = &lt;repo-url&gt;.git
</code></pre>
<hr />
<p>The issue happens when I'm attempting to update the submodule from the remote :</p>
<pre><code>$ git submodule update --remote
fatal: no submodule mapping found in .gitmodules for path 'path/to/submodule'
</code></pre>
<p>OK, I can read the log, so I provide the <code>path/to/submodule</code> next :</p>
<pre><code>$ git submodule update --remote path/to/submodule
Submodule path 'path/to/submodule' not initialized
Maybe you want to use 'update --init'?
</code></pre>
<p>OK, if you say so ( though I'm sure that the submodule has been properly initialized before already ). Now :</p>
<pre><code>$ git submodule update --init --remote path/to/submodule
fatal: No url found for submodule path 'path/to/submodule' in .gitmodules
</code></pre>
<p>I did some experiments on a test repository and found that this happens only when the submodule is 'named'.</p>
<p>Am I doing something wrong with the name thing of the submodule? According to the man page, the <code>--name</code> flag is only applicable for the <code>add</code> sub-command and it does not work with <code>update</code>.</p>
<p>How do I update such <em>named</em> submodules?</p>
","10","3805208","0","0"
"8778323","255710","2012-01-08 14:27:27","4","3561","<git><git-submodules>","git submodule foreach not working","<p>I want to figure out why <code>git submodule foreach</code> command is not working for me. I have cloned a git repository which has several submodules. I wanted to init and update all submodules at once to pull down the submodules sources. But whatever I try git submodule foreach is not working for me... I tried several things:</p>

<pre><code>git submodule foreach init
git submodule foreach update
git submodule foreach update --init
git submodule foreach --recursive git submodule update --init
</code></pre>

<p>Every command will execute but without any output... If I go and init/update each module separately (without using foreach) then no problem.</p>

<p>Any ideas? </p>
","0","255710","0","0"
"8787956","263871","2012-01-09 11:49:30","4","1808","<git><xcode4><git-submodules>","Xcode 4 workspace with two interdependent projects: should I also use git submodule?","<p>I'm working on an iOS app and have broken the codebase into two separate projects: a client library for a web service, and an app project that depends on the client library. </p>

<p>Both projects have been added to a single Xcode workspace with the dependency appropriately declared. </p>

<p>Each project has its own git repository. Currently I have the two projects checked out to two separate directories, and I manage the two git repositories independently of each other. The only place where the dependency between these two pieces of code is currently defined is in the app's Xcode project.</p>

<p>However, I'm wondering whether I should add the client library git repository as a <a href=""http://book.git-scm.com/5_submodules.html"" rel=""nofollow"">git submodule</a> of the app's repository. This feels right conceptually but I haven't used git submodules before and I'm wondering if there are any gotchas with using this approach with Xcode? </p>

<p>(I can find plenty of blog posts on how to use Xcode workspaces to manage inter-project dependencies like this, and elsewhere plenty of documentation on git submodules, but I can't find a single account of a tried and tested workflow for using both together. If you know of one, please post a link!)</p>
","1","263871","0","0"
"44781935","8134442","2017-06-27 13:45:27","1","968","<git><git-submodules>","git error when using git submodule update --init","<p>I'm getting an error when using the following command on zsh:</p>

<pre><code>git submodule update --init
</code></pre>

<p>the error I'm getting is:</p>

<pre><code>fatal: No url found for submodule path 'bundle/YCM' in .gitmodules
</code></pre>

<p>The problem is, when I go to my .gitmodules file I have the following lines defined:</p>

<pre><code>[submodule ""/home/username/.vim/bundle/YCM""]
    path = /home/username/.vim/bundle/YCM
    url = https://github.com/Valloric/YouCompleteMe
</code></pre>

<p>Where <code>username</code> is my actual user.
I installed the YCM plugin via </p>

<pre><code>git submodule add https://github.com/Valloric/YouCompleteMe ~/.vim/bundle/YCM
</code></pre>
","0","8134442","",""
"63421531","2563715","2020-08-15 00:34:12","1","43","<git><git-submodules>","git create new branch from a previous commit in repo with submodules","<p>I have a git repo with multiple submodules.
On &quot;master&quot; branch of parent repo, lets say the history looks like A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F (HEAD). My parent repo is setup such that the submodules are pointing to a detached HEAD (like this &quot;HEAD detached at &quot;). I want to go back to a previous commit on &quot;master&quot; branch of parent repo, commit &quot;C&quot; and update one of the submodules to a more recent commit and push this new state of the &quot;master&quot; branch of parent repo to remote.</p>
<p>How do I go about this?</p>
<p>I have the following steps but I am not sure if that these are the right steps.</p>
<pre><code>git reset --hard HEAD~3 (which takes me to commit C)
git submodule update --init
cd path/to/submodule ; git checkout &lt;commit_id&gt; ; cd -
git add path/to/submodule ; git commit
git push origin master
</code></pre>
<p>Is this the correct procedure? Would I need to use the --force option in the last step. I looked up for similar question on how its done in a regular git repo without submodules but I am not sure of how to do it with repo with submodules. New to working with submodules.</p>
","0","2563715","",""
"8821210","248220","2012-01-11 14:46:49","1","250","<git><git-submodules>","Are git submodules reasonably usable?","<p>I've read many caveats with using git submodules.</p>

<p>In essense, I have my personal repository. And I would like to import another actively-maintained repository that I could add as a framework to the original project.</p>

<p>It it reasonable to use git submodules? Is that what the ""GitHub crowd"" do?</p>
","2","248220","",""
"26617838","3906760","2014-10-28 20:25:11","23","19133","<git><git-submodules>","How to resolve git submodule conflict if submodule is not initialized","<p>I have two branches <code>A</code> and <code>B</code>. Both contain a submodule (in the folder <code>sub</code>), however at different commits (which do not fast-forward from one to another).</p>

<pre><code>A  B
| /
BASE
</code></pre>

<p>I've checked out <code>A</code>, but the submodule isn't initialized yet. Now I merge <code>B</code> and I get a conflict on the submodule.</p>

<pre><code>$ git status
Unmerged paths:
  (use ""git add &lt;file&gt;..."" to mark resolution)

        both modified:   sub
</code></pre>

<p>Issuing <code>git checkout --ours sub</code> does nothing (if the submodule is initialized it works, also <code>git checkout-index -f --stage=2 -- sub</code> does not work). <code>git add sub</code> causes the error <code>error: pathspec 'sub' did not match any file(s) known to git.</code>.</p>

<pre><code>$ git diff sub
diff --cc sub
index 533da4e,ab2af77..0000000
--- a/sub
+++ b/sub
@@@ -1,1 -1,1 +1,1 @@@
- Subproject commit 533da4ea00703f4ad6d5518e1ce81d20261c40c0
 -Subproject commit ab2af775ec467ebb328a7374653f247920f258f3
++Subproject commit 0000000000000000000000000000000000000000
</code></pre>

<p><code>git submodule init -- sub</code> does nothing. Also <code>git submodule update --init --force -- sub</code> does not work: <code>Skipping unmerged submodule sub</code>.</p>

<p>So, how can I resolve this submodule conflict (without aborting the merge and retry after initializing the submodule)?</p>
","0","3906760","0","0"
"8844217","927370","2012-01-13 00:06:27","19","18914","<git><git-submodules>","git submodule update fails with error on one machine but works on another machine","<p>I created a git submodule and pushed it onto our main repository. This worked fine and I can see the submodule in the repository via a browser.</p>
<p>To test it I tried to get the source in a fresh build tree.
First I ran <code>git submodule init</code> and then <code>git submodule update &lt;submodule-name&gt;</code>.</p>
<p>The second command failed with error:</p>
<pre><code>error: pathspec 'x/mypkg' did not match any file(s) known to git. Did you forget to 'git add'
</code></pre>
<p>I tried adding to <code>.gitmodules</code> the url to the submodule but with no luck.</p>
","0","927370","0","0"
"8855284","1076247","2012-01-13 18:19:29","1","269","<git><git-submodules>","Ignore a git submodule only acessible over VPN","<p>I'm working a project under git revision control that is not my project, but I have r/w access to it.  So, I can change what is under revision control in regards to the .gitmodules file, but risk committing the change to the git repository.</p>

<p>It has two git submodules listed in .gitmodules file, one of which is <em>only</em> accessible via a VPN, and the other is accessible over the public Internet.</p>

<p>I will not have access to the VPN network when updating my submodules after the initial pull via:</p>

<pre><code>git submodule update
</code></pre>

<p>The pull will fail:</p>

<pre><code>$ git submodule update
Cloning into subproject...
ssh: connect to host blah.example.com port 22: Connection refused
fatal: The remote end hung up unexpectedly
Clone of 'git@blah.exampl.ecom:project/subproject.git' into submodule path 'subproject' failed
</code></pre>

<p>Nor will I have access anytime afterward.</p>

<p>I don't want to have modify the .gitmodules file stripping out the offending submodule and risk committing my version of the file at later date, nor do I want to globally ignore .gitmodules files.</p>

<p>What I'd like to do is some how ignore this submodule, while still pulling down the submodule accessible on the open Internet, do my work, and commit my changes.  How do I do that with in the constraints I ticked off?</p>
","0","1076247","",""
"8900627","504252","2012-01-17 19:37:26","0","559","<git><version-control><git-submodules><git-commit>","Track Custom commits on Read Only git submodule","<p>I'm working with Three20 as a git submodule on my iPhone app.  I have a couple custom modifications I've made to the three20 library and would like to commit them such that my project sees the commits.  I don't want, nor can I, commit these changes to the actual three20 repo.</p>

<p>Thanks</p>
","4","504252","",""
"26740387","791718","2014-11-04 16:39:23","0","23","<git><git-submodules>","Using UI, how to see if directory is a git submodule","<p>I am new to GIT... 
Using any UI, like Tortoise GIT or SourceTree, is there a way to quickly see if a directory is a GIT submodule or part of the local repo? 
I specifically do not want to use any command line commands to figure it out.</p>

<p>Thanks</p>
","0","791718","",""
"9026569","160173","2012-01-26 22:43:17","3","1058","<git><git-submodules>","No submodule mapping found in .gitmodules","<p>I'm trying to add a submodule to a git repo like this:</p>

<pre><code>git submodule add git://repo my/dir/here
git submodule init
</code></pre>

<p>And I get this error:<br>
        <code>No submodule mapping found in .gitmodules for path 'C:\Program Files (x86)\Git/libexec/git-core;C:\.....;c:\Program  Files (x86)\QuickTime\QTSystem\'</code></p>

<p>The <code>C:\Program Files</code> part has a lot more paths listed, it is shortened here for brevity.</p>

<p>Whats going on and how can I fix this?</p>
","0","160173","",""
"57786625","2481696","2019-09-04 10:35:49","1","112","<git><git-submodules>","Clone git submodules with their .git directory","<p>Is it possible to clone a repository with its submodules and have their <code>.git</code> directory be at <code>./submodule/.git</code> instead of <code>./.git/modules/submodule</code>?</p>

<p>Some tools in the submodule repository expect <code>.git</code> to be a directory.</p>
","2","2481696","",""
"38944165","2512380","2016-08-14 16:22:07","4","1664","<git><git-submodules>","Push git submodule changes to my own repo","<p>I've just started using git submodules for my Android application by following this <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow"">guide</a></p>

<p>I've successfully cloned the repo and changed a few things to suit the needs of my application, but I can't push those changes back to my repo.</p>

<p><code>git status</code> says there is modified content in my submodule, but I can't just <code>git add</code> that folder and push it?</p>

<p>If I try to push from the submodule directory it actually tries to push and gives me access denied since I'm not a contributor of that repo.</p>

<p>I want to be able to fetch the new changes from time to time, but to be able to keep and merge the small code that I modified every time that I try to update the submodule.</p>

<p>What would be the best approach in order to achieve this? Do I have to change the push remote origin?</p>
","0","2512380","0","0"
"38996105","1894199","2016-08-17 12:02:45","3","692","<git><heroku><deployment><git-submodules>","Can Heroku ignore git submodules on deploy?","<p>We have a git repo with a submodule which contains some binary test data. We don't need it to run the app and it is huge in size and slows down the deploy considerably. But heroku tries to clone including the submodule, even though the submodule is in a directory that is in .slugignore. Is there a way to prevent Heroku from checking out the submodule?</p>
","0","1894199","",""
"19915679","1003984","2013-11-11 20:51:56","10","11313","<git><git-submodules>","trouble with adding/removing a git submodule","<p>I'm trying to add a git submodule to my project, specifically ShareKit. My project is a git repo, and when I try to type</p>

<pre><code>git submodule add git://github.com/ShareKit/ShareKit.git Submodules/ShareKit
</code></pre>

<p>into Terminal I got an error saying that the submodule already existed. I guess I added it a while ago to this project, and ended up not using it and improperly deleting it from the project directory (just deleting the submodule folder, most likely). So I try and do</p>

<pre><code>git rm --cached Submodules/ShareKit
</code></pre>

<p>according to <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"">How do I remove a submodule?</a>, and now when I try and add the submodule again with the first bit of code I get this:</p>

<pre><code>A git directory for 'Submodules/ShareKit' is found locally with remote(s):
origin  git://github.com/ShareKit/ShareKit.git
If you want to reuse this local git directory instead of cloning again from
git://github.com/ShareKit/ShareKit.git
use the '--force' option. If the local git directory is not the correct repo
or you are unsure what this means choose another name with the '--name' option.
</code></pre>

<p>and I'm not really sure what to do. I'm fairly new to git, and I need to get this in my project - is there any way to just wipe everything git related off of the project and start from scratch? I'd just do it with a new project but it's already pretty much complete aside from this and it would be hugely time-consuming to start from scratch and copy everything over. I have ShareKit working in a test app, installed properly, is there any reason I can't just copy all of the ShareKit files from that folder into the one I need them in?</p>

<p>Edit: I have tried</p>

<pre><code>git submodule deinit Submodules/ShareKit
</code></pre>

<p>which gives me this error:</p>

<pre><code>error: pathspec 'Submodules/ShareKit' did not match any file(s) known to git.
Did you forget to 'git add'?
</code></pre>

<p>It seems like it's stuck in some sort of weird state where it's both insisting that the submodule does and doesn't exist simultaneously. I'm doing this with Terminal to add the submodule to an Xcode project, just to clarify.</p>
","3","1003984","0","0"
"57998968","844728","2019-09-18 18:35:22","2","723","<git><cmake><visual-studio-2017><git-submodules>","How to get CMake's ExternalProject_Add to work in Visual Studio (git-submodule problem)?","<p>I am trying to build <a href=""https://github.com/stevenlovegrove/Pangolin"" rel=""nofollow noreferrer"">Pangolin</a> to build directly on Windows 10 in Visual Studio 2017.
Pangolin's CMake involves the following command:</p>

<pre><code>ExternalProject_Add( __glew
  PREFIX ""${CMAKE_CURRENT_BINARY_DIR}/glew""
  GIT_REPOSITORY https://github.com/Perlmint/glew-cmake.git
  GIT_TAG 7574ab4d00b683e56adbfdec7da636529dfe65d8
  INSTALL_DIR ${CMAKE_INSTALL_PREFIX}
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
             -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
             -DCMAKE_C_FLAGS_RELEASE=${CMAKE_C_FLAGS_RELEASE}
             -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG}
             -DCMAKE_C_FLAGS_MINSIZEREL=${CMAKE_C_FLAGS_MINSIZEREL}
             -DCMAKE_C_FLAGS_RELWITHDEBINFO=${CMAKE_C_FLAGS_RELWITHDEBINFO}
)
</code></pre>

<p>When this code is run, I get the following error:</p>

<pre><code>fatal: 'submodule' appears to be a git command, but we were not
able to execute it. Maybe git-submodule is broken?
</code></pre>

<p>My analysis shows that this happens during the execution of the following generated CMake code (from <code>build-dir/external/glew/tmp/__glew-gitclone.cmake</code>):</p>

<pre><code>execute_process(
  COMMAND ""C:/Program Files/Git/mingw64/bin/git.exe""  submodule update --recursive --init 
  WORKING_DIRECTORY ""C:/Users/scrambledusername/Garage/Pangolin/build/external/glew/src/__glew""
  RESULT_VARIABLE error_code
  )
if(error_code)
  message(FATAL_ERROR ""Failed to update submodules in: 'C:/Users/scrambledusername/Garage/Pangolin/build/external/glew/src/__glew'"")
endif()
</code></pre>

<p>In other words, the command <code>git submodule update --recursive --init</code> results in an error. However, it does not result in an error when run manually via Git Bash.</p>

<p>Some <a href=""https://stackoverflow.com/questions/54672008/submodule-appears-to-be-a-git-command-but-we-were-not-able-to-execute-it"">research</a> (also <a href=""https://github.com/npm/npm/issues/20815"" rel=""nofollow noreferrer"">here</a> in the related commits and <a href=""https://cmake.org/pipermail/cmake/2016-March/062896.html"" rel=""nofollow noreferrer"">here</a>) shows this may be related to either the git path or the path with the git-submodule script (<code>C:\Program Files\Git\mingw64\libexec\git-core</code> for me) should be added to system path. Prepending these to the system path (for system OR user) didn't affect the outcome (restarted system, VS just to make sure new paths were registered). I also made sure to the best of my abilities that the script file itself has run permissions for any user (are there caveats to this?).</p>

<p>Copy/pasted from cmd:</p>

<pre><code>C:\WINDOWS\system32&gt;echo %PATH%
C:\Program Files\Git\mingw64\bin;C:\Program Files\Git\mingw64\libexec\git-core;C\Program Files\...
</code></pre>

<p>Does anyone know how to get this working or have any suggestions?</p>

<p>Current workaround: set <code>BUILD_EXTERN_GLEW=OFF</code> in CMake and manually check out and build the version of GLEW Pangolin needs based on its CMake.</p>

<p>Versions: </p>

<ul>
<li>git 2.23.0.windows.1</li>
<li>VisualStudio Community 2017 15.9.16</li>
<li>CMake 3.15.3</li>
<li>Pangolin 25159034e62011b3527228e476cec51f08e87602 (latest commit to master at time of writing)</li>
</ul>

<p>[EDIT (additional info)]</p>

<ol>
<li>I got the same results when running cmake from Git Bash, command
prompt, or via CMake-gui.</li>
<li>I got a perfect build on another machine with older
versions of both Git and CMake.</li>
</ol>
","0","844728","",""
"20022635","2391095","2013-11-16 19:16:45","1","200","<git><git-submodules>","Set rights to git submodules?","<p>I have a question about git submodules.</p>

<p>I have a project that needs to access 2 repos:
Repo1: main project repo
Repo2: Accessed as a submodule. Repo 2 is also accessed by other projects</p>

<p>Is there a way to set Repo2 access rights? More specifically, repo1 should be able to pull from repo2. But I would like if repo1 has NO right to update repo2, and push back the updates to the server. 
If repo1 can update repo2, other projects that need repo2 access will also get the updates, which can get messy</p>

<p>Any ideas?</p>

<p>Cheers</p>
","1","2391095","0","0"
"58028649","2168342","2019-09-20 12:44:21","0","30","<git><git-submodules>","Does a git repository know/keep track if it's being used as a submodule in other repositories?","<p>I know that I can ask the submoduling repository which repositories it contains, but does the submoduled repository also know that it's being contained somewhere?</p>

<p>Context is that I want to have some files in repositories of their own, then have multiple main repositories import some of these files. Then ideally if I wanted to know how many main repos are using a particular file, i would ask the file instead of cycling through the main repos and checking. </p>

<p>I don't actually think this is the case, but want to verify.</p>
","0","2168342","",""
"994155","208","2009-06-15 00:54:15","3","1857","<linux><git><unix><git-submodules>","git submodules: ln -s","<p>How can I create a directory link that will survive <code>git submodule update</code>?</p>

<p>Given the following example directory structure:</p>

<pre><code>proj
|-- lib3
|   `-- submod
|       `-- lib
`-- lib
</code></pre>

<p>I created a soft link from <code>proj/lib/</code> to <code>proj/lib3/submod/lib</code> using something like the following command:</p>

<pre><code>brad@bradpc:~/proj/lib$ ln -s ../lib3/submod/lib submodlib
</code></pre>

<p>creating the following directory structure:</p>

<pre><code>proj
|-- lib3
|   `-- submod
|       `-- lib
`-- lib
    `-- submodlib
</code></pre>

<p>However, running <code>git submodule update</code> destroys my link.  I was under the impression that a soft link is a logical link to a relative path, so removing the object and re-adding it would keep the link intact.  How can I achieve the desired effect?</p>
","0","208","",""
"20174364","591137","2013-11-24 12:19:53","3","5101","<git><git-submodules><git-subtree>","fatal: Not a git repository: git status works. But git add . doesn't","<p>I've had a gitsubmodule which I failed to properly uninstall. (Guessing here). I added a subtree with the same name. And everything went fine until I should stage my files. </p>

<pre><code>$git status /*Shows unstaged files just fine*/
$git add . /*Prints error message*/

fatal: Not a git repository:MyProject/SLibrary/../.git/modules/SLibrary
</code></pre>

<p>Any ideas how I can get rid of the error message so I can stage my files with git add -a/.</p>
","4","591137","0","0"
"39239738","45580","2016-08-31 02:19:14","0","74","<git><git-submodules>","git push --tags trying to push ignored subdirectory","<p>After upgrading to Ubuntu 16.04.1, <code>git push --tags</code> is now trying to push ignored subdirectories.</p>

<p>Directory structure has evolved into:</p>

<pre><code>top/.git
    subdir1/.git
    subdir2/.git
</code></pre>

<p>with <code>.gitignore</code> of:</p>

<pre><code>subdir1/**
subdir2/**
</code></pre>

<p>Currently running git 2.7.4 (I believe I was running git 2.5.0 before)</p>

<p>Pushing to the master repo works something like this:</p>

<pre><code>pushd subdir1; git push --tags; popd
pushd subdir2; git push --tags; popd
echo ""Now pushing top""
git push --tags
</code></pre>

<p>Prior to the upgrade, the above push instructions worked fine.  After the upgrade, the process now does something like this:</p>

<pre><code>Now pushing subdir1
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 312 bytes | 0 bytes/s, done.
Total 3 (delta 2), reused 0 (delta 0)

Now pushing subdir2
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 312 bytes | 0 bytes/s, done.
Total 3 (delta 2), reused 0 (delta 0)

Now pushing top
Pushing submodule 'subdir1'
Pushing submodule 'subdir2'
Pushing submodule 'subdir1'
Pushing submodule 'subdir2'
Pushing submodule 'subdir1'
Pushing submodule 'subdir2'
The following submodule paths contain changes that can
not be found on any remote:
    subdir1
    subdir2
</code></pre>

<p>After extensive googling, I did try this:</p>

<pre><code>git clean -d -i
</code></pre>

<p>and found subdir1 and subdir2 in the list.  Running <code>git clean -d -f</code> removed those directories.</p>

<p>However, this didn't solve the root problem.  Any suggestions as to what to try next?</p>

<p>For reference:</p>

<ol>
<li><code>.gitmodules</code> is empty</li>
<li>These directories <em>used</em> to be submodules, but they were migrated to separate repos months ago</li>
<li>There is no reference to subdir1/2 in .git/config</li>
<li><code>.git/modules</code> doesn't exist</li>
<li><code>git ls-files</code> doesn't show subdir1 or subdir2 in the list</li>
</ol>

<p>What can I try next?</p>
","2","45580","0","0"
"20268844","417629","2013-11-28 14:39:29","0","84","<wordpress><git><git-submodules><git-checkout><git-reset>","How do I git out of this mess with a git submodule?","<p>I've got a git repo with Wordpress as a submodule. I was trying to update Wordpress and really screwed things up. I just want to get all of the code from the 3.7.1 tag in the remote repository, but this doesn't work;</p>

<pre><code>git fetch --tags
git checkout 3.7.1
</code></pre>

<p>Leaves a bunch of either ""untracked files"" or ""uncommitted changes"". I don't know what I'm doing wrong. I've tried so many things to get this submodule onto the 3.7.1 tag and nothing seems to work. If anything, I feel like I'm just making the problem worse. It shouldn't be that hard to just reset the code from the tag I want and discard everything else. Any help?</p>
","0","417629","",""
"58215079","2899559","2019-10-03 08:22:19","1","195","<git><git-submodules><rebase>","How do I rebase a git superproject changing the hashes of the submodules?","<h3>Background</h3>

<p>Assume we have two git repos, one a submodule of the other (<code>A</code> will be the superproject, <code>B</code> will be the submodule). Project <code>A</code> is not source code per-se, rather a project that gathers and tracks information about its submodule(s). The <code>A</code> repo rarely, if ever, exists on local machines, rather a bunch of scripts keep it updated.</p>

<p>One day, someone realized that repo <code>B</code> should have been using LFS better and cleaned up the repo using <code>git lfs migrate import</code>. I have a list of <code>B</code>'s old hashes and new hashes.</p>

<h3>What I did</h3>

<p>As repo <code>A</code> happens to linear (no branching), I was able to do a <code>git rebase --root -i</code>, change all the commits to <code>edit</code>, and run a simple bash script that reset the submodule to the new hashes. Here's an example of the script:</p>

<pre class=""lang-sh prettyprint-override""><code>#!/bin/bash
#set the submodule path and input files
submodulePath=foo
newHashesFile=NewHashes.txt
originalHashesFile=OriginalHashes.txt

while [ (test -d ""$(git rev-parse --git-path rebase-merge)"" || test -d ""$(git rev-parse --git-path rebase-apply)"" ) ]; do
    numLines=`git ls-files --stage | grep $submodulePath | wc -l`
    if [ $numLines = 1 ];
    then
        oldHash=`git ls-files --stage | grep $submodulePath | sed -e 's/^160000 \([^ ]*\) 0.*$/\1/g'`
        echo oldHash: $oldHash
    else
        echo merge conflict
        oldHash=`git ls-files --stage | grep $submodulePath | grep '^160000 \([^ ]*\) 3.*' | sed -e 's/^160000 \([^ ]*\) 3.*$/\1/g'`
        echo oldHash: $oldHash    
    fi

    lineNumber=`grep -n $oldHash $originalHashesFile | sed -e 's/^\([^:]*\):.*/\1/g'`
    newHash=`head -n $lineNumber $newHashesFile | tail -n 1`

    if [ ! $lineNumber ];
    then
        echo Hash not changed
    else
        cd $submodulePath
        git reset --hard $newHash
        cd ../
    fi

    git add $submodulePath/
    git commit --amend
    git rebase --continue
done
</code></pre>

<h3>Question</h3>

<p>All this worked, but I was wondering if there is an easier simpler way to do so, as I assume I'll be called on to do this again. There are two parts to that question.</p>

<ol>
<li>Is there a simple way to tell git that you want the default to be <code>edit</code> instead of <code>pick</code>, not dependent on the editor?</li>
<li>Is there a simpler way of telling git to do what the script does? Would it help if I did the <code>git lfs migrate import</code> from within the superproject?</li>
</ol>
","0","2899559","0","0"
"39644346","4825809","2016-09-22 16:30:47","0","392","<git><git-submodules>","Copy git repo with sub-modules as directory into another repo","<p>Recently I cloned <code>gRPC</code> repo from GitHub which has various submodules like <code>protobuf, zlib,</code> etc. I have a different repo <code>X</code> of my own. Following is what I did.</p>

<ol>
<li>copied <code>gRPC</code> folder into folder <code>X</code></li>
<li>pushed the changes of <code>X</code> into origin master</li>
<li>cloned origin master into another repo <code>Y</code></li>
<li>Now, I don't see contents of <code>protbuf, zlib,</code> etc. in <code>Y</code></li>
</ol>

<p>Seems I did something wrong in steps 2 and 3. All I wanted to do was put everything from <code>gRPC</code> into <code>X</code> as clean directory structure. What are the steps to accomplish this?</p>
","0","4825809","",""
"39657353","2024780","2016-09-23 09:31:39","2","349","<git><git-submodules>","git submodule no checkout","<p>I have a git repository with multiple submodules, like around 5 submodules.</p>

<p>I want to change the parent's and all the submodules <code>core.autocrlf</code> config to <code>input</code>. </p>

<p>My problem is that when I <code>git submodule update --init</code> or <code>git submodule init &amp;&amp; git submodule update</code> the submodules are automatically checked out to HEAD, that is normal but I want to make it ""not checkout"" (no-checkout). I have not seen any options that would do that.</p>

<p>I am wondering if some people have this kind of situation and, did you have a workaround?</p>

<p><strong>Setting the config global is my last resort</strong></p>
","3","2024780","",""
"1584440","76782","2009-10-18 09:10:31","2","1480","<git><git-submodules>","How to ""freeze"" git submodule","<p>I'm using a few repository which I do not host myself and I thinking what if I deploy my application while they are not available? This simply just can't happen.</p>

<p>Is there a way to ""freeze"" the submodule somehow that when I pull from my repository the submodules are already init and update?</p>

<p>Any help is appreciated.</p>
","0","76782","",""
"20665274","120917","2013-12-18 18:04:10","2","181","<git><git-submodules>","How to generate git superproject from existing directory structure","<p>I have a current set up of a lots of git projects inside a huge directory tree. The structure looks something like this</p>

<pre><code>projects
projects/stuff -&gt; this is a git repo
projects/frontend/frontendone -&gt; this is also a git repo
projects/frontend/frontendtwo -&gt; this is also a git repo
projects/something -&gt; this is a git repo
...
</code></pre>

<p>This whole tree contains a lot of git repos (like 50-100), they can be anywhere inside the tree, and they can be from different servers, with different configs.</p>

<p>I'd like to create a new superproject inside the <code>projects</code> directory that contains all of the repositories as submodules already there. </p>

<p>Most of the examples I could find on git submodules start with not having the git repository there, and re-adding them one-by-one with <code>git submodule add</code>, but I already have my directory structure set up nicely, and re-doing all of them one-by-one seems to be too much effort.</p>

<p>So basicaly I just want the <code>projects</code> directory to become a superproject and keep everything else intact where it is, as they are already set up nicely for me.</p>

<p>What is the easiest way to create the superproject?</p>
","2","120917","",""
"1654934","124504","2009-10-31 16:59:38","2","874","<git><git-submodules>","git submodule error","<p>Getting this error:</p>

<pre><code>fatal: cannot read object aab1ca8db3ab8f1508db42220f9badc7b62dd4aa 'vendor/plugins/simple_stuff': It is a submodule!
</code></pre>

<p>When doing <code>git pull</code> from the main repo.
I don't have any submodule defined any where inside my project, still I have another repo inside <code>vendor/plugins/simple_stuff</code>. Any ideas?</p>
","0","124504","",""
"20806690","2084181","2013-12-27 19:33:27","0","374","<git><branch><git-submodules>","Overlapping branches in git","<p>I have a git repository that has a number branches (eg branch1, branch2). One of those branches contains a submodule (eg submodule1). </p>

<p>Example directly structure for branch1:</p>

<pre><code>$ ls
subdir1/
subdir2/
file1.txt
file2.txt
</code></pre>

<p>Example directly structure for branch2 (contains submodule):</p>

<pre><code>$ ls
submodule1/
file1.txt
</code></pre>

<p>When I swich from branch2 to branch1 (<code>$ git checkout branch1</code>), the submodule from branch2 appears in branch1:</p>

<pre><code>$ ls
subdir1/
subdir2/
submodule1/
file1.txt
file2.txt
</code></pre>

<p>How is this happening and why is it even possible?</p>
","0","2084181","",""
"58693985","9167762","2019-11-04 13:01:09","1","539","<git><git-submodules><git-subrepo>","add modified git submodule which is not owned","<p>Is it possible to add a git submodule that you modified localy but of which you are not the owner and therefore can not push to remote. 
Currently my repo only adds a link to the original submodule, but without my modifcations to it. 
But i want the full content including my modifications to be pushed to my remote repo.</p>

<p>I did the following so far:</p>

<pre><code>cd my_repo
git submodule add git@mygithost:submodulue submodule
git submodule init &amp;&amp; git submodule update
cd submodule
&lt;changes, hacks&gt;
git commit -am 'modify submodule'
cd .. &amp;&amp; git status

&gt; On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

    modified:   submodule (untracked content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>
","0","9167762","",""
"39900682","2583765","2016-10-06 16:00:15","3","2724","<git><git-submodules>","How to prevent git asking me to commit submodule modifications","<p>In my repository, I have added a submodule by</p>

<pre><code>git submodule add -b master https://something.something.git something
</code></pre>

<p>Now, whenever I hear there is an update in the submodule (remotely) I do</p>

<pre><code>git submodule update --remote
</code></pre>

<p>And the submodule is updated locally. And if I clone my repo somewhere, I get the submodule in its latest state right away.</p>

<p>But if I run <code>git status</code> on my repository after I updated the submodule, I get</p>

<pre><code>$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

        modified:   something (new commits, modified content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Why do I need to commit that some changes happened in the submodule when I am tracking the latest of the branch anyways? As I said, if I clone the repo somewhere else I get the updated submodules right away anyways, so what's this status message about?</p>

<p>Is there a way to make git ignore that there has been changes to the submodule?</p>
","0","2583765","",""
"20883995","2343265","2014-01-02 13:24:58","1","424","<git><git-submodules>","Why does ""git add"" not work with submodule","<p>I have a root folder with a <code>git/</code> folder and one submodule (<code>mymodule</code>). <code>mymodule</code> has its own <code>git/</code> folder, too.</p>

<p><code>git status</code> shows:</p>

<pre><code># modified mymodule (untracked content)
</code></pre>

<p>Then I have removed a git folder from the submodule, and now if I change something in <code>mymodule</code>, it doesn't show with <code>git status</code>. </p>

<p><code>git add mymodule</code> doesn't work.</p>

<p>All <code>mymodule</code> changes are untracked.</p>
","3","2343265","",""
"20961885","4196578","2014-01-07 00:29:11","5","902","<git><git-submodules>","Why can't I add back a git submodule after removing it","<p>I tried deleting a submodule and then adding it back with git 1.8.5.2.
An submodule <code>asub</code> was added by <code>git submodule add -b master url_asub.git</code>. 
I removed the submodule by </p>

<pre><code>git rm asub
</code></pre>

<p>The asub directory is gone. I then tried to add it back again with the original command that added it (to test if the submodule removal in 1.8.5.2 is clean):</p>

<pre><code>git submodule add -b master url_asub.git
</code></pre>

<p>I got an error message:</p>

<pre><code>A git directory for 'asub' is found locally with remote(s): 
   origin url_asub.git
If you want to reuse this local git directory instead of cloning again from
   url_asub.git 
use the '--force' option. If the local git directory is not the
correct repo or you are unsure what this means choose another name with the
'--name' option.
</code></pre>

<p>I am not sure what this error message means. I also tried doing <code>git submodule sync</code> in the superproject, and tried</p>

<pre><code>git submodule deinit asub
git rm asub
git submodule add -b master url_asub.git
</code></pre>

<p>But still I couldn't add the submodule back. What did I miss, or is this a bug in git 1.8.5.2? </p>

<p>The reason I want to do this is to a) remove a submodule and b) add it back so that it reflects the most recent content of the submodule. This may sound naive but I found that the <code>submodule add -b</code> feature will break as soon as I clone the super project (<a href=""https://stackoverflow.com/questions/20940993/how-to-keep-git-submodule-on-branch-status-after-cloning-superproject"">how to keep git submodule on-branch status after cloning superproject?</a>). So I figured probably a simply way to avoid all the troubles of keeping submodules tracking their master branches is to remove the submodule and add it back every time when cloning the super project.</p>
","0","4196578","0","0"
"2025427","203265","2010-01-08 04:04:45","2","75","<svn><git><git-submodules>","Creating submodules in a recently converted svn to git repo","<p>I have just recently converted an old company svn repo which has a bunch of projects into a git repo</p>

<p>ie. </p>

<p>repo</p>

<ul>
<li>project-1</li>
<li>project-2</li>
<li>project..n</li>
</ul>

<p>From within this new git repo how would you recommend creating a submodule for each individual project?</p>
","2","203265","",""
"2204415","143397","2010-02-05 01:07:03","4","734","<git><git-submodules><gitweb>","How to determine sub-module SHA-1 with gitweb?","<p>I want to determine the associated SHA-1 of a submodule without cloning anything - i.e. remotely. git-ls-remote doesn't show this information, so my initial approach was to scrape the XHTML from gitweb and pull the SHA-1 out of there.</p>

<p>Unfortunately, gitweb seems to have pretty poor support for submodules, showing 404 and 500 ""unknown object"" errors when trying to view history for the associated path. Therefore it does not seem possible to me to determine the associated SHA-1 of a submodule unless I can identify the exact commit that modified the git-link and then parse the diff for something like:</p>

<pre><code>-Subproject commit 706187649544cb029b617548771fe96c1693be39
+Subproject commit f05b9854fca9a2e1f47449e563a33156c1085646
</code></pre>

<p>Unfortunately gitweb is so broken with submodules that I can't find a way to determine which commit contains this diff, so unless I do an exhaustive search back through each commit, it's a no-go.</p>

<p>I've tried with gitweb bundled with git 1.6.4.2 and 1.6.6.1 (latest stable).</p>

<p>Can anyone think of a solution, or perhaps an alternative way to do this without having to clone each repository. You see, I want to do this for all repositories in our organisation, and for every branch within each repository, and that's a lot of branches. I'm doing this to get a list of all submodule commits and determine if any are out-of-date.</p>

<p>If the only solution is to individually clone each repository and run queries within, then that will have to be it. Unfortunately some of our repositories are quite large so this will make the entire operation very slow.</p>
","0","143397","0","0"
"58907021","616809","2019-11-18 01:51:30","4","1242","<git><github><git-submodules>","Create and push EXACT git repository containing submodules to github with EXACT folder structure","<p>I think mine is the simplest use case of git submodules possible.</p>

<p>I have a directory structure</p>

<pre><code>&lt;project-name&gt;
 ---&lt;directory1&gt;
 ---&lt;directory2&gt;
 ---&lt;directory3&gt;
        ---&lt;directory3.1&gt;
</code></pre>

<p>Each sub directory is a git repository. I just want to track different git repositories added in my <code>&lt;project-name&gt;</code> directory, which is my main (or super) repository.</p>

<p>I have figured out how to add each of these git repositories as submodules in my super repository, which is also a directory which contains them. In local I have exactly what I want.</p>

<p>So some of the git submodules are two depths inside my super repository, as long as I use</p>

<pre><code>git submodule add &lt;relative-path-to-submodule&gt; &lt;relative-path-to-submodule&gt;
</code></pre>

<p>It takes care of it just fine.</p>

<p>Why in the world I would like to do this? Because this represents the conventional local directory structure in the CFD framework (OpenFOAM), I am developing my code for.</p>

<p>I and others develop different submodules seperately and it is absolutely valuable to track each submodule/subdirectory separately.</p>

<p>The goal is to let my end users to clone my code repository, change the name and start compiling and using the code. (Building is super easy and by convention)</p>

<p>I just can't figure out how to push all the code to github, including the actual files from the<br>
submodule as files in that particular subdirectory.</p>

<p><strong>Obviously when I push to github, the submodule just appear as commits, no actual code from that 
subdirectory is pushed.</strong></p>

<p>I don't (can't afford to) want to add subdirectories in the super repository. All answers tell me to do that, which is pointless.</p>

<p>I have found the exact question, which is unanswered (<a href=""https://stackoverflow.com/questions/48936752/git-push-a-local-git-submodule-including-submodule-files-to-a-remote-bare-rep"">Git: Push a local git submodule, including submodule files, to a remote bare repository</a>)</p>
","5","616809","0","0"
"21205297","401196","2014-01-18 14:17:50","0","616","<git><github><refactoring><git-submodules><git-subtree>","Splitting out a sub directory in a git repo into it's own repo","<p>I have the following structure:</p>

<pre><code> my_main_project/
    my_lib/
       file1
       dir2/
           file2
    my_other_files
</code></pre>

<p>And now, the <code>my_lib</code> has got to the point where it really should be it's own library, and should be a submodule in <code>my_main_project</code></p>

<p>IE:</p>

<pre><code>my_main_project/  (is repo)
    &lt;my_lib&gt;  (is sub module)
    my_other_files/

my_lib/ (is repo)
    file1
    dir2/
    file2
</code></pre>

<p>I ideally wish to keep the git history for <code>my_lib</code> for obvious reasons.</p>

<p>Anyway, I tried the following: <a href=""https://stackoverflow.com/questions/12514197"">Convert a git folder to a submodule retrospectively?</a></p>

<p>However, it fielded this error </p>

<pre><code>$ git filter-branch --subdirectory-filter '../my_main_project/my_lib' --prune-empty -- --all
&gt; fatal '../my_main_project/my_lib' is outside repository
</code></pre>

<p>What, am I doing wrong and what needs to be done to get this working. I should point out that my_main_project is on branch master, and that is the branch of the subdir I wish to port.</p>

<p>Please let me know if there is an supplementary information you need.</p>
","1","401196","",""
"40219209","999355","2016-10-24 13:03:29","3","2089","<git><git-branch><git-submodules>","Does git submodule branch switch along with main project's branch?","<p>Recently I got to know git submodules. They appear to be self-sufficient projects with their own git structure and branches.</p>

<p>When I switch main project's branch, does this also switch submodule's branch? How does git handle this situation?</p>
","0","999355","",""
"2326299","261388","2010-02-24 13:29:21","11","2485","<git><version-control><git-submodules>","Reuse a Part of a git Repository","<p>I have the following project setup:</p>

<ul>
<li><code>Solution A</code>

<ul>
<li><code>Project 1</code> (a lightweight component)</li>
<li><code>Project 2</code> (contains a lot of files and depends on <code>Project 1</code>)</li>
</ul></li>
</ul>

<p><code>Solution A</code> is a single <strong>git</strong> repository. Then I created another solution and found that I could reuse and even update the functionality of <code>Project 1</code>. So my second solution would probably look like this:</p>

<ul>
<li><code>Solution B</code>

<ul>
<li><em><code>Project 1</code></em> (must be shared!)</li>
<li><code>Project 3</code> (depends on <code>Project 1</code>).</li>
</ul></li>
</ul>

<p>Now I want <code>Project 1</code> to become a shared component. That is, every time I change the source code of <code>Project 1</code> from either solution (<code>A</code> or <code>B</code>), I need the other one to update accordingly.</p>

<p>Maybe this has something to do the the <strong>submodule</strong> feature of <strong>git</strong>. However, the only way I was able to use it is to specify the whole <code>Solution A</code> as a submodule for <code>Solution B</code>. This is not really what I want ideally due to enormous size of <code>Solution A</code>. I only need a tiny part of it to be a submodule.</p>

<p>I know that it's possible in <strong>svn</strong> and works exactly as I've described: you specify a directory within an external repository in the <code>svn:externals</code> property.</p>

<p>Any tips on that? Or maybe, I'm missing something?</p>
","0","261388","0","0"
"21223672","1089360","2014-01-19 22:45:21","1","1194","<git><github><git-submodules>","git add submodule without repo name","<p>I have 2 repositories at github: 1st is for a cURL library, 2nd is for a project I'm writing. I'm trying to add my library as submodule to my project:</p>

<pre><code>cd /www/fifa14api/CI-FIFA14-API/
git submodule add git@github.com:ctepeo/CI-cURL.git
</code></pre>

<p>My project based on CodeIgniter, so file structure looks like</p>

<pre><code>/application/
/system/
index.php
</code></pre>

<p>My library at repo have prepared for CodeIgniter structure:</p>

<pre><code>/application/
     /libraries/
         curl.php
</code></pre>

<p>When I add submodule, I want to ""merge"" them (to put my curl.php at right directory in project), but it creates CI-cURL <em>(repo name)</em> folder at root, so I got</p>

<pre><code>/application/
/system/
/CI-cURL/
    /application/
        curl.php
index.php
</code></pre>

<p>How can I (and is it possible?) to exclude repository's name when adding submodule?</p>
","0","1089360","",""
"40305026","1470142","2016-10-28 12:22:40","3","306","<git><git-submodules><gerrit>","Use git submodules to track remote branches as well as specific tags","<p>I have some projects in individual git repositories and an integration repository that includes these using git submodules. The <code>branch</code> entry in <code>.gitmodules</code> makes it easy to track branches and works together with Gerrit, which I am using, as well as with <code>git submodule update --remote</code>. There are a lot of Q&amp;As about that here on stackoverflow.</p>

<p>But too often, one or more of the submodules shall not track a remote branch, but be fixed to a specific tag. I know that I can checkout a tagged revision in the submodule and record that <em>pointer to tag</em> with a commit in the integration repository. But even without a value set for the <code>branch</code> entry in <code>.gitmodules</code>, a subsequent <code>git submodule update --remote</code>  changes the submodule that sits on a specific tag, because it defaults to track the <code>master</code> branch of submodules without that value set.</p>

<p>Is there a way to specify a tag in the <code>.submodule</code> <code>branch</code> entry? I did not find a solution for that. Or does this pinning of some submodules to a tag not work at all with <code>git submodule update --remote</code>?</p>

<p>May Gerrit's support of submodules offer a solution to this problem? (I have not tried that yet.)</p>
","0","1470142","",""
"2426391","2147","2010-03-11 15:48:47","1","181","<git><branch><git-submodules>","How can I do git checkout on a repository with submodules?","<p>Suppose I have a repository <code>X</code> with a sub module <code>A</code>.  Now suppose I want <code>X</code> to have two branches:  master and development.  I want master to have a different revision of <code>A</code> than development does.  How can I switch back and forth between these branches?</p>

<p>I've got a repository set up that does this (but using real names instead of fake ones!).  The problem is that whenever I do <code>git checkout master</code> from development, I get the following:</p>

<pre><code>$ git co master
M       A
Switched to branch 'master'
</code></pre>

<p>It looks like it's not putting <code>A</code> back to the commit that master references.  Is there any way around this?  Both <code>git submodule sync</code> and <code>git submodule update</code> don't seem to change anything.</p>
","0","2147","",""
"57858898","9431636","2019-09-09 17:47:09","4","2623","<java><git><gradle><git-submodules>","How to include gradle multi-project repository as git submodule in another gradle project","<p>I'm trying to import a Gradle multi-project repository into another Gradle project as a git submodule.</p>

<p>This is the structure of the multi-project repo:</p>

<pre><code>MyLibrary
- lib-api
  - api-config
  - api-repository
- lib-impl
  - impl-config
  - impl-repository
</code></pre>

<p>Within the Gradle project <code>MyLibrary</code>, there are several modules that depend on other modules within that project. For example, <code>lib-api:api-repository</code> has the following dependency:</p>

<pre><code>implementation project(':lib-api:api-config')
</code></pre>

<p><em>(the modules under <code>lib-impl</code> also include their respective api as a dependency)</em></p>

<p>So far everything is ok, I can build, run and test the projects under <code>lib-impl</code>.</p>

<h2>Now I try to import the project into another project</h2>

<p>I use <code>git submodule add</code> to add <code>MyLibrary</code> to <code>MyProject</code>. This is now the structure:</p>

<pre><code>MyProject
- MyLibrary
  - lib-api
    - api-config
    - api-repository
  - lib-impl
    - impl-config
    - impl-repository
- api
- impl
</code></pre>

<p>In order to be able to use the modules under <code>MyLibrary</code>, I edit the <code>settings.gradle</code> file in <code>MyProject</code> to look something like this:</p>

<pre><code>rootProject.name = 'MyProject'
include 'api'
include 'impl'
include 'mylibrary'
include 'mylibrary:lib-api'
include 'mylibrary:lib-impl'
include 'mylibrary:lib-api:api-config'
include 'mylibrary:lib-api:api-repository'
include 'mylibrary:lib-impl:impl-config'
include 'mylibrary:lib-impl:impl-repository'
</code></pre>

<h1>The problem</h1>

<p>Now that the modules under <code>MyLibrary</code> belong to the root project <code>MyProject</code>, all the internal dependencies within <code>MyLibrary</code> need to be prefixed with <code>:mylibrary</code>. But this is only the case if <code>MyLibrary</code> is currently a submodule of another project.</p>

<p>In order to build <code>MyProject</code>, I need to change the dependencies inside <code>MyLibrary</code> from this:</p>

<pre><code>implementation project(':lib-api:api-config')
implementation project(':lib-api:api-repository')
</code></pre>

<p>to this:</p>

<pre><code>implementation project(':mylibrary:lib-api:api-config')
implementation project(':mylibrary:lib-api:api-repository')
</code></pre>

<p>However, <code>:mylibrary</code> needs to NOT be present for <code>MyLibrary</code> to compile successfully by itself (i.e. if <code>MyLibrary</code> is the root project). But this change IS required for <code>MyLibrary</code> to work as a submodule.</p>

<p>This used to not be a big problem as I could always pull the submodule <code>MyLibrary</code> and edit the necessary <code>build.gradle</code> files. However, I have now started trying to set up continuous integration and I get errors about those imports being invalid inside <code>MyLibrary</code> whenever I try to build <code>MyProject</code> as CI will always get the code directly from the git repo.</p>

<p>I feel like if the following statement was valid, it could fix my problem:</p>

<pre><code>implementation project(':mylibrary:lib-api:api-config').ifNotPresent(':lib-api:api-config')
</code></pre>

<p>Thanks in advance for any help</p>
","0","9431636","0","0"
"811251","74653","2009-05-01 13:01:24","110","21297","<git><git-submodules>","How can I move a single directory from a git repository to a new repository whilst maintaining the history?","<p>I have inherited a git repository containing multiple projects in separate directories. I'd like to split the repository into new individual repositories, one for each project and then have the master repository contain the projects as submodules. I'd like to do all this whilst maintaining the revision history of the individual projects if possible.</p>

<p>I could clone the repository for each project and remove all the other projects each time, but it there a better way to avoid having the cloned history in each new project repository?</p>
","2","74653","0","0"
"913701","38765","2009-05-27 02:35:49","951","427171","<git><git-submodules>","How to change the remote repository for a git submodule?","<p>I've created a git repository with a submodule in it. I'm able to tell the submodule itself to change its remote repository path, but I'm not sure how to tell the parent repository how to change the remote repository path for the submodule.</p>

<p>I wouldn't be surprised if I'm somewhat out of luck and have to do things manually, as even deleting submodules isn't easy.</p>
","2","38765","0","0"
"58141369","584757","2019-09-27 21:10:44","2","2039","<git><git-submodules><bitbucket-pipelines>","Use git submodule update --init in bitbucket pipeline","<p>I've searched through a lot of the other related posts but haven't found a solution. I have my own private laradock repo that I'm using as a submodule in my git repo. I have the following bitbucket-pipeline.yml file:</p>

<pre><code>pipelines:
  branches:
    master:
      - step:
          services:
            - docker
          caches:
            - docker
            - pip
            - composer
          name: Install server libs. Download and install composer. Build image, push to aws ecr, then deploy
          script:
            ...
            - git submodule update --init --recursive
            ...
</code></pre>

<p>When I run the pipeline I get the following error:</p>

<pre><code>+ git submodule update --init --recursive
Submodule 'laradock' (https://xxxx@bitbucket.org/xxxx/laradock.git) registered for path 'laradock'
Cloning into '/opt/atlassian/pipelines/agent/build/laradock'...
fatal: could not read Password for 'https://xxxx@bitbucket.org': No such device or address
fatal: clone of 'https://xxxx@bitbucket.org/xxxx/laradock.git' into submodule path '/opt/atlassian/pipelines/agent/build/laradock' failed
</code></pre>

<p>I've tried adding ssh keys to access keys. This was working until this morning. Any help would be great.</p>
","2","584757","0","0"
"1072602","44747","2009-07-02 05:07:16","21","6105","<git><mercurial><git-submodules>","git submodule from Hg repo?","<p>I have a very old project that includes the source from another project directly, instead of linking it as a library. Back in the bad days, when I was keeping everything in CVS, I had the external code on a vendor branch and did periodic imports. Now that my project is in git it would make more sense to include the external project as a submodule. But, there's a problem: the external project has migrated to Mercurial. I've found the git-hg and hg-git projects, but I'm not sure if either one handles submodules properly.</p>

<p>Is there a way to create a git submodule that points to an Hg repo instead of a git repo?</p>
","0","44747","0","0"
"58185680","7369280","2019-10-01 13:20:23","-1","64","<git><git-submodules>","What is `[submodule ""(heads/master)""]` in `.gitmodules`?","<p>In one of my projects I have a ""strange"" entry in my <code>.gitmodules</code>:</p>

<pre><code>...
[submodule ""tools""]
    path = tools
    url = https://...
[submodule ""(heads/master)""]
    branch = master
</code></pre>

<p>Questions:</p>

<ul>
<li>What is the entry <code>submodule ""(heads/master)""</code>?</li>
<li>Did I add it with some command?</li>
<li>Can/Should I delete it?</li>
</ul>
","0","7369280","",""
"58309538","31897","2019-10-09 17:42:23","48","51286","<git><travis-ci><git-submodules>","What does ""upload-pack: not our ref"" mean, when fetching git refs via --tags?","<p>In one of my projects, the Travis builds are failing before any of my build-system or code can be reached, as soon as my build-script attempts to fetch all of the Git tags with <code>git fetch --tags</code>:</p>

<pre><code>`` git fetch --tags --verbose
POST git-upload-pack (350 bytes)
POST git-upload-pack (788 bytes)
POST git-upload-pack (797 bytes)
From https://github.com/ELLIOTTCABLE/bs-sedlex
 = [up to date]      fix-ci        -&gt; origin/fix-ci
 * [new tag]         sedlex-1.99.2 -&gt; sedlex-1.99.2
 * [new tag]         v1.99.3       -&gt; v1.99.3
...
 * [new tag]         v20.0.0-pre.2 -&gt; v20.0.0-pre.2
Fetching submodule ppx-sedlex
POST git-upload-pack (122 bytes)
From https://github.com/ELLIOTTCABLE/ppx-sedlex
 = [up to date]      develop       -&gt; origin/develop
 = [up to date]      master        -&gt; origin/master
...
 = [up to date]      v20.0.0-pre.2 -&gt; v20.0.0-pre.2
POST git-upload-pack (4 bytes)
POST git-upload-pack (69 bytes)
POST git-upload-pack (586 bytes)
fatal: remote error: upload-pack: not our ref 0f509703fcd43ff4324d721a39220153bab49d4a
</code></pre>

<p>This is especially confusing, as neither the main repo <code>bs-sedlex</code>, nor the git-submodule <code>ppx-sedlex</code>, have any commit starting like <code>0f5097...</code>; I have no idea where that SHA is coming from. This failure is occurring only on the <strong>Linux</strong> workers, and I can't figure out why — <code>git fetch --tags</code> on that same repo works on the macOS Travis-workers, on my macOS machine, and on an Ubuntu Vagrant box I spun-up to debug this.</p>

<p>What does the ""fatal: remote error: upload-pack: not our ref"" error signify; and how can I work around it? I'm not even sure where to begin debugging this error, as it only occurs specifically on Travis workers.</p>

<p>(It's unlikely to be helpful, but here's the <a href=""https://travis-ci.com/ELLIOTTCABLE/bs-sedlex/jobs/255885673#L218-L251"" rel=""noreferrer"">error in context</a>, and <a href=""https://github.com/ELLIOTTCABLE/bs-sedlex"" rel=""noreferrer"">the repository in question</a>.)</p>

<p><strong>Edit 1:</strong> Here's some additional interesting output, from adding GIT_TRACE=2:</p>

<pre><code>Fetching submodule ppx-sedlex
23:55:28.125076 git.c:439               trace: built-in: git fetch --no-prune --no-prune-tags --tags -v --recurse-submodules-default on-demand --submodule-prefix ppx-sedlex/
23:55:28.125914 run-command.c:663       trace: run_command: git-remote-https origin https://github.com/ELLIOTTCABLE/ppx-sedlex.git
23:55:28.429609 run-command.c:663       trace: run_command: git rev-list --objects --stdin --not --all --quiet --alternate-refs
23:55:28.432485 run-command.c:663       trace: run_command: git rev-list --objects --stdin --not --all --quiet --alternate-refs
23:55:28.434082 git.c:439               trace: built-in: git rev-list --objects --stdin --not --all --quiet --alternate-refs
From https://github.com/ELLIOTTCABLE/ppx-sedlex
 = [up to date]      develop       -&gt; origin/develop
 = [up to date]      master        -&gt; origin/master
 = [up to date]      v1.99.4       -&gt; v1.99.4
 = [up to date]      v1.99.4-pre.1 -&gt; v1.99.4-pre.1
 = [up to date]      v1.99.4-pre.3 -&gt; v1.99.4-pre.3
 = [up to date]      v1.99.4-pre.8 -&gt; v1.99.4-pre.8
 = [up to date]      v2.0.0        -&gt; v2.0.0
 = [up to date]      v20.0.0-pre.1 -&gt; v20.0.0-pre.1
 = [up to date]      v20.0.0-pre.2 -&gt; v20.0.0-pre.2
23:55:28.442482 run-command.c:1616      run_processes_parallel: preparing to run up to 1 tasks
23:55:28.442504 run-command.c:1648      run_processes_parallel: done
23:55:28.442536 run-command.c:663       trace: run_command: git gc --auto
23:55:28.443983 git.c:439               trace: built-in: git gc --auto
23:55:28.444903 run-command.c:663       trace: run_command: cd /home/vagrant/ELLIOTTCABLE/bs-sedlex/.git/modules/ppx-sedlex; unset GIT_PREFIX; GIT_DIR=. git fetch --no-prune --no-prune-tags --tags -v --recurse-submodules-default on-demand --submodule-prefix ppx-sedlex/ origin 0f509703fcd43ff4324d721a39220153bab49d4a
23:55:28.446392 git.c:439               trace: built-in: git fetch --no-prune --no-prune-tags --tags -v --recurse-submodules-default on-demand --submodule-prefix ppx-sedlex/ origin 0f509703fcd43ff4324d721a39220153bab49d4a
23:55:28.447105 run-command.c:663       trace: run_command: git-remote-https origin https://github.com/ELLIOTTCABLE/ppx-sedlex.git
23:55:28.735871 run-command.c:663       trace: run_command: git fetch-pack --stateless-rpc --stdin --lock-pack --thin --no-progress https://github.com/ELLIOTTCABLE/ppx-sedlex.git/
23:55:28.738885 git.c:439               trace: built-in: git fetch-pack --stateless-rpc --stdin --lock-pack --thin --no-progress https://github.com/ELLIOTTCABLE/ppx-sedlex.git/
error: Server does not allow request for unadvertised object 0f509703fcd43ff4324d721a39220153bab49d4a
</code></pre>

<p>I can't make hide-nor-hair of why Git is requesting an ""unadvertised object"" here; but it's clearly not a GitHub problem, here — for some reason, the command:</p>

<pre><code>git fetch --no-prune --no-prune-tags --tags -v \
   --recurse-submodules-default on-demand \ 
   --submodule-prefix ppx-sedlex/ \
   origin 0f509703fcd43ff4324d721a39220153bab49d4a
</code></pre>

<p>... is being automatically invoked upon the submodule, when I <code>git fetch</code> in the parent repo. (Again, that commit, <code>0f509703</code>, does not exist in either repo; again, the exact same repo, the exact same commit, and this isn't happening on macOS — only on Travis's Linux machines.)</p>
","0","31897","0","0"
"39488940","110976","2016-09-14 11:08:55","0","276","<git><github><bitbucket><git-submodules><git-subtree>","how to use git repos inside another git project without Gitsubmodule or subtree","<p>I have two git repositories <code>main-pro</code> and another git repo <code>plugins</code>
I use main-pro as my core and <code>plugin</code> to components. </p>

<p>I don't want to use the git-submodule anymore because every change in the <code>plugin</code> repo will show in the <code>main-pro's</code> change list. I don't want to keep any relationship between these two repos, because the <code>plugin</code> repo is only for the development environment so I have many things to push pull on both repos, sometime it shows conflict from the plugin repo in the main-pro.</p>

<p><strong>I dont want to keep the latest commit-id of the plugin repo in main-project.</strong></p>

<p>What is the best way? if am not using submodule or subtree. how can I achive this.</p>

<p>when I tried to clone a plugin  in to my main projects subfoler, it automaticaly convert to submodule. how to detach that plugin folder from the main project. </p>

<p>I tried to exclude using gitignore, but that fails. </p>

<p>Does anyone have an Idea about this situation?</p>
","2","110976","",""
"58403616","571778","2019-10-15 23:01:36","2","1434","<git><git-submodules>","Does git submodule update --recursive override fetchRecurseSubmodules?","<p>I have a submodule who's submodules I don't need. For example:</p>

<pre><code>mainProject
  - usefulSubmodule
    - notNeededSubmodule
</code></pre>

<p>So in <code>mainProject</code>, I define my <code>.gitmodules</code> like so:</p>

<pre><code>[submodule ""usefulSubmodule""]
    path = lib/usefulSubmodule
    url = https://whatever
    fetchRecurseSubmodules = false
</code></pre>

<p>Then I run <code>git submodule update --init --recursive</code> after updating, and it seems that this is ignoring the value of <code>fetchRecurseSubmodules</code> (which I guess may be true according to the documentation <a href=""https://git-scm.com/docs/gitmodules#Documentation/gitmodules.txt-submoduleltnamegtfetchRecurseSubmodules"" rel=""nofollow noreferrer"">https://git-scm.com/docs/gitmodules#Documentation/gitmodules.txt-submoduleltnamegtfetchRecurseSubmodules</a> )</p>

<p>So therefore my question is, how do I disable this behavior without overriding it during update? What is the best way to update all my submodules while respecting that flag?</p>
","4","571778","0","0"
"1591387","6236","2009-10-19 22:00:34","15","3764","<git><git-submodules>","Need to handle git-submodules in git-archive","<p>I need to pack git submodules inside of tarball which I create with <code>git-archive</code>.</p>

<p>I see that in 1.6.5 <code>git-archive</code> does not support git submodules.</p>

<p>I see several scripts to handle this case in the net, but I'm not sure which one to pick.</p>

<p>What is the best / most official way to do this?</p>
","1","6236","0","0"
"39674052","3736112","2016-09-24 08:06:45","3","529","<git><git-submodules>","Tracking an external directory by git submodule","<p>MainApp directory is the main git repository</p>

<pre><code>MainApp
|
|
+--Js/MyPlugin/Plugin.js
|
+--Plugins/MyPlugin+-Controller/..
|                  |
|                  +-Model/..
|                  |
|                  +-.git 
|
+--Model/..
+--View/..
+--Controller/..
+--.git
</code></pre>

<p><code>MainApp/Plugins/MyPlugin</code> directory is a git submodule.
Can I track the <code>/js/MyPlugin</code> external directory with MyPlugin git submodule? is there any possible way to make that folder trackable without creating that javascript folder inside of <code>/MainApp/Plugins/MyPlugin</code> directory and symlinking?</p>
","3","3736112","0","0"
"39675387","3738438","2016-09-24 10:34:37","2","1797","<linux><git><vim><git-submodules>","git submodule already exist but it doesn't?","<p>I have git repo: <a href=""https://github.com/bbialek/dotfiles"" rel=""nofollow"">https://github.com/bbialek/dotfiles</a>
I want to create submodule for vim's pathogen plugin. </p>

<pre><code>cd ~/dotfiles/vim
git submodule add https://github.com/tpope/vim-pathogen .vim
</code></pre>

<p>It says: </p>

<blockquote>
  <p>'vim/.vim' already exists in the index</p>
</blockquote>

<p>Is it because I already have submodules in 
../dotfiles/vim/.vim/bundles/*  ?</p>

<p>My <code>.gitmodules</code>:</p>

<pre><code>    [submodule ""vim/.vim/bundle/nerdtree""]
    path = vim/.vim/bundle/nerdtree
    url = https://github.com/scrooloose/nerdtree
[submodule ""vim/.vim/bundle/vim-autoformat""]
    path = vim/.vim/bundle/vim-autoformat
    url = https://github.com/Chiel92/vim-autoformat
[submodule ""vim/.vim/bundle/vim-colors-solarized""]
    path = vim/.vim/bundle/vim-colors-solarized
    url = https://github.com/altercation/vim-colors-solarized
[submodule ""vim/.vim/bundle/vim-sensible""]
    path = vim/.vim/bundle/vim-sensible
    url = https://github.com/tpope/vim-sensible
[submodule ""vim/.vim/bundle/YouCompleteMe""]
    path = vim/.vim/bundle/YouCompleteMe
    url = https://github.com/Valloric/YouCompleteMe
[submodule ""tmux/.tmux/plugins/tpm""]
    path = tmux/.tmux/plugins/tpm
    url = https://github.com/tmux-plugins/tpm
</code></pre>
","2","3738438","0","0"
"39739654","5720701","2016-09-28 06:33:15","0","134","<git><gitlab><git-submodules><gitlab-ci><gitlab-ci-runner>","With gitlab 8.12, the gitlab .submodules file doesn't seem to be used","<p>I'm now upgraded to gitlab 8.12, I've added two submodules, but I'm unable to get the contents of those submodules. The <code>.gitmodules</code> file doesn't seem to be used here.</p>

<p>Here's the command I've used to get those submodules:</p>

<pre><code>git submodule update --init --recursive
</code></pre>

<p>So, Is there anything I've to add additionally to get the submodule contents ?</p>
","0","5720701","0","0"
"20757601","1520502","2013-12-24 08:40:15","31","8799","<git><git-submodules><git-subtree><git-filter-branch>","git splitting repository by subfolder and retain all old branches","<p>I have a git repo with 2 directories and multiple branches, I want to split them and create all branches</p>

<pre><code>`-- Big-repo
    |-- dir1
    `-- dir2

Branches : branch1, branch2, branch3 ...
</code></pre>

<p><strong>What I want</strong></p>

<p>I want to split dir1 and dir2 as two separate repos and retain branches branch1, branch2 ... in both repositories.</p>

<pre><code>dir1
Branches : branch1, branch2, branch3 ...

dir2
Branches : branch1, branch2, branch3 ...
</code></pre>

<p><strong>What I tried:</strong></p>

<p>I am able to split them into 2 repos using </p>

<pre><code>git subtree split -P dir1 -b dir1-only 
git subtree split -P dir2 -b dir2-only 
</code></pre>

<p>But, it is not creating any branches after separation.</p>

<p>To get all branches: </p>

<pre><code>git checkout branch1 (in Big-repo)
git subtree split -p dir1 -b dir1-branch1

git checkout branch2 (in Big-repo)
git subtree split -p dir1 -b dir1-branch2

And push these branches to newly created repo.
</code></pre>

<p>This involves more manual effort and I am sure there might be a quick way to achieve this?</p>

<p>Any ideas???</p>
","0","1520502","0","0"
"58701952","565877","2019-11-04 22:23:58","1","58","<git-submodules>","Checkout branch specified in .gitmodules for each submodule?","<p>I have submodules at many different paths. Some submodules are in the root of our repository, most are in src/app/shared-comps, but many are scattered throughout. When I clone our project, the branches for submodules are all in detached HEAD state, and I want to set them on the branches specified in .gitmodules file. I currently do this manually like so:</p>

<pre><code>cd submodule1 &amp;&amp; git checkout master &amp;&amp; cd .. &amp;&amp;
cd src/app/shared-comps &amp;&amp;
find . -maxdepth 1 -mindepth 1 -type d -exec sh \
    -c ""(echo {} &amp;&amp; cd {} &amp;&amp; git checkout our-fork &amp;&amp; echo)"" \;
# so on and so forth
</code></pre>

<p>How can I have a script that avoids hard-coding <code>submodule1</code> goes on master branch, and <code>src/app/shared-comps</code> should all go on <code>our-fork</code>? In fact, if some shared-comps should not be on <code>our-fork</code> branch, but perhaps master, how can we have them go to whatever branch is specified in .gitmodules?</p>
","0","565877","",""
"40000549","226342","2016-10-12 13:56:58","5","347","<git><version-control><git-submodules>","Convert git repo into a submodule AND move .git directory to superepo","<p>I have a super repo and a few submodules in this repo:</p>

<p>MY_SUPER_REPO</p>

<ul>
<li>my_sub_1</li>
<li>my_sub_2</li>
</ul>

<p>Now I am creating a new directory that will later become a submodule:</p>

<ul>
<li>my_dir_3</li>
</ul>

<p>When I am ready for it to become a sub repo I do:</p>

<pre><code>git init
git remote add origin URL
</code></pre>

<p>I then go to the super repo and </p>

<pre><code>git submodule add URL
</code></pre>

<p>Now .<code>gitmodules</code> are updated accordingly BUT the <code>.git</code> directory stays in the <code>my_dir_3</code> and the hooks seems to be taken from here when I work in that sub module, not from the super repo <code>.git/modules/xyz</code> directory. I run a script to copy hooks to <code>.git/modules/xyz</code> in my super repo but since the local <code>.git</code> folder exists in the added sub module the hooks in the super repo aren't used.</p>

<p>Is there any ""magic"" command to fix this or do I need to copy <code>.git</code> manually?</p>
","2","226342","0","0"
"21058363","3184153","2014-01-11 03:57:26","3","1254","<git><git-submodules>","git failing to find the index when in submodule (""index file open failed: not a directory"")","<p>On a fresh git repo, after adding a submodule and changing to the submodule directory most git commands fail when run within the submodule with the error:</p>

<pre><code>fatal: index file open failed: Not a directory
</code></pre>

<p>The full set of commands to reproduce the issue:</p>

<pre><code>&gt;  git init .
Initialized empty Git repository in /Users/drh/code/personal/Experiments/git-test/.git/
&gt;  git status
On branch master

Initial commit

nothing to commit (create/copy files and use ""git add"" to track)
&gt;  git submodule add git@github.com:mitsuhiko/flask.git thirdparty/flask
Cloning into 'thirdparty/flask'...
remote: Reusing existing pack: 9959, done.
remote: Total 9959 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (9959/9959), 5.17 MiB | 1.11 MiB/s, done.
Resolving deltas: 100% (5617/5617), done.
Checking connectivity... done.
&gt;  cd thirdparty/flask
&gt;  git status
fatal: index file open failed: Not a directory
&gt;  cat .git
gitdir: ../../.git/modules/thirdparty/flask
</code></pre>

<p>git version 1.8.5.2 running on Mavericks</p>
","2","3184153","0","0"
"2140985","45350","2010-01-26 16:53:30","227","96405","<git><github><external><git-submodules>","How to set up a git project to use an external repo submodule?","<p>I'd like to create a repo which pulls in a remote repo.</p>

<p>For example, let's say jQuery as a submodule:</p>

<pre><code>git://github.com/jquery/jquery.git
</code></pre>

<p>What would be the process of creating a repo with jQuery as a submodule and adding my own external as a remote repo.</p>

<p>Also once this is setup, if I push / pull to my own remote, will the external remain intact?</p>
","3","45350","0","0"
"2144406","21239","2010-01-27 03:34:26","193","87932","<git><git-submodules>","How to make shallow git submodules?","<p>Is it possible to have shallow submodules? I have a superproject with several submodules, each with a long history, so it gets unnecessarily big dragging all that history.</p>

<p>All I have found is <a href=""http://kerneltrap.org/mailarchive/git/2009/1/19/4766964/thread"" rel=""noreferrer"">this unanswered thread</a>.</p>

<p>Should I just <a href=""http://repo.or.cz/w/git.git/blob/HEAD:/git-submodule.sh#l107"" rel=""noreferrer"">hack git-submodule</a> to implement this?</p>
","1","21239","0","0"
"2229403","174027","2010-02-09 13:38:12","4","797","<django><git><github><branch><git-submodules>","create a git repo for project skeleton","<p>I created a <a href=""http://github.com/revolunet/django-skeleton"" rel=""nofollow noreferrer"">custom project skeleton</a> as a start for my django projects, hosted on a public repo at github.</p>

<p>Id like to use this as root folder for my new, public and privates projects, also hosted @github.</p>

<p>The problem is i cannot use this one as a submodule because as fas ar i know i cannot add submodules inside another submodules in the same git repo. and in my case i want to add submodules inside the skeleton folder.</p>

<p>As exercice, for a public projectB, i just created a branch of my skeleton but seems tricky as my projectB code is hosted inside the skeleton repo on a separate branch.</p>

<p>How would you do this in GIT ?</p>

<p>Also, any trick at github on how to create 'private branches' like from public repos ?</p>

<p>Thanks :)</p>

<p>Julien</p>
","0","174027","",""
"2344608","99923","2010-02-26 20:28:07","1","1483","<git><git-submodules>","Proper git submodule links","<p>Because I don't want to spend +$12 for the simple-to-use github.com private hosting, I place a lot of my code libraries in small repositories on a <em>shared hosting account</em>. This allows me to have as many code repos as I want.</p>

<p>Since those repos don't take any resources to sit there I also put a couple very light sites on that account to maximize my usage. These sites actually use some of those same code repos as submodules of their projects.</p>

<p>So, I push/pull code for each repo and site over ssh. The sites themselves setting just a couple directives down also pull those submodules.</p>

<p>So I have a simplesite.tld project on my pc with a submodule that looks like this:</p>

<pre><code>[submodule ""modules/blog""]
        path = modules/blog
        url = user@simplesite.tld:~/git/modules/blog/
</code></pre>

<p>Then I push the code to the simplesite.tld and login to the shared host through SSH and update the simplesite.tld modules</p>

<pre><code>git submodule update
</code></pre>

<p>But it asks me for my SSH password for the ""user"" in order to login and get the repo code. Which is just an annoyance since the repo is on the same server. </p>

<p><strong>So is there a better submodule link that I can use that both foreign computers (like my PC) and projects in the same harddrive can both use?</strong></p>
","0","99923","",""
"59076522","2516131","2019-11-27 18:31:38","0","1656","<git><github><gitlab><git-submodules>","why git clone not working with submodule?","<p>I know this question can mark as duplicate. I have gone through so many stack overflow questions, tutorial, and documents regarding this. </p>

<p>But any solution didn't work for me. ( I could not clone the parent project with submodules. only parent project was cloned)</p>

<p>I tried with </p>

<ol>
<li>git clone --recurse-submodules  </li>
<li>git clone --recursive 
</ol>

<p>and so many options. </p>

<p>Do I need to configure my git environment to support submodules?</p>

<p>Here it is repos I have tried. </p>

<p>Parent Project. 
<a href=""https://github.com/chamlyidunil/test-submodule-project"" rel=""nofollow noreferrer"">https://github.com/chamlyidunil/test-submodule-project</a></p>

<p>Common project (submodule )
<a href=""https://github.com/chamlyidunil/common-utility"" rel=""nofollow noreferrer"">https://github.com/chamlyidunil/common-utility</a></p>

<p>And it really helps you if you can provide example git commands for the whole cycle. </p>

<ol>
<li>git pull ( get update with sub modules)</li>
</ol>

<p>My git version is: <strong>git version 2.15.1 (Apple Git-101)</strong></p>
","4","2516131","",""
"59153856","11914070","2019-12-03 09:26:16","0","27","<git><git-submodules>","Define two ways to pull git sub-modules","<p>I have a git REPO that used as submodule.
I also have two group of users, one group able to pull that REPO only as Kerberos the other only via SSH.</p>

<p>Is there any way to define on GIT level two way to pull the SUBMODULE by specific criteria ?</p>

<p>Thank you </p>
","3","11914070","",""
"21327257","1078935","2014-01-24 07:54:02","4","813","<git><git-submodules><jgit>","JGit: git submodule foreach command","<p>I know the support for git submodules is limited in JGit, but still was wondering how can I achieve this:</p>

<p><code>git submodule foreach git checkout &lt;branchName&gt;</code></p>

<p>and similar commands using JGit.</p>

<p>Or is there any other better Java based API for Git?</p>
","0","1078935","",""
"21328557","211453","2014-01-24 09:07:44","6","3507","<git><git-submodules>","Merge git submodule into main repository","<p>Ok, we have a repository with 3 submodules. Now we want to merge this submodules back into main repository, keeping all history (well, using submodules turned out to be more headache than being usefull). How do we proceed?</p>
","1","211453","0","0"
"40423398","1945981","2016-11-04 13:02:42","0","635","<git><git-submodules><git-remote>","git submodule is not syncing","<p>I have a git submodule. On the server I have set it up, everything is working fine. On a different server, it's not finding the revision in the submodule it should go to. All changes have been pushed to the remote repository. I tracked the problem down to the remotes, that I might have screwed up while setting them up.</p>

<p>On the server where everything is working:</p>

<pre><code>$ cat .gitmodules 
&gt; [submodule ""foo/submodule""]
&gt;         path = foo/submodule
&gt;         url = https://:@gitlab.server.com:8443/goodremote/submodule.git
$ cd foo/submodule/
$ git remote -v
&gt; origin  https://:@gitlab.server.com:8443/goodremote/submodule.git (fetch)
&gt; origin  https://:@gitlab.server.com:8443/goodremote/submodule.git (push)
&gt; upstream        https://:@gitlab.server.com:8443/badremote/submodule.git (fetch)
&gt; upstream        https://:@gitlab.server.com:8443/badremote/submodule.git (push)
</code></pre>

<p>The commit that is checked out resides on the <code>origin</code> remote, so I believe the <code>.gitmodules</code> is correct.</p>

<p>But here's what happens on the server where it's not working:</p>

<pre><code>$ cat .gitmodules
&gt; [submodule ""foo/submodule""]
&gt;         path = foo/submodule
&gt;         url = https://:@gitlab.server.com:8443/goodremote/submodule.git
$ git submodule sync
$ git submodule update --init --recursive
&gt; Initialized empty Git repository in foo/submodule/.git/
&gt; remote: Counting objects: 13483, done.
&gt; remote: Compressing objects: 100% (3001/3001), done.
&gt; remote: Total 13483 (delta 10625), reused 13236 (delta 10444)
&gt; Receiving objects: 100% (13483/13483), 103.89 MiB | 24.57 MiB/s, done.
&gt; Resolving deltas: 100% (10625/10625), done.
&gt; fatal: reference is not a tree: 71a57a9551a3c10229b92d724716a0f897001dab
&gt; Unable to checkout '71a57a9551a3c10229b92d724716a0f897001dab' in submodule path 'foo/submodule'
$ cd foo/submodule
$ git remote -v
&gt; origin  https://:@gitlab.server.com:8443/badremote/submodule.git (fetch)
&gt; origin  https://:@gitlab.server.com:8443/badremote/submodule.git (push)
</code></pre>

<p>I understand the error message. The commit that is supposed to be checked out, is not to be found on that remote. However, I do not know how I can tell the submodule to use the right remote. Can I either define both remotes in the submodule or at least update the submodule to use the other remote? I believed this is what the <code>.gitmodules</code> is used for, but apparently it doesn't work.</p>

<p>Edit: I managed to fix this in an unsatisfactory way. I set up the repository including submodule on the new server until I hit the error outlined above. Then I go into the submodule, fix all the remotes and use <code>git submodule update</code>. While this is working, it is definitely not the way it is supposed to work. I'm puzzled.</p>
","6","1945981","0","0"
"40533800","1848443","2016-11-10 17:37:29","2","58","<git><git-submodules>","How to git diff multiple sibling git folders","<p>For reason I can't change, I have N sibling folders.
Each of which is a differente git repo.
When developing a feature I have to touch files in every folder (more or less).</p>

<p>There is a way to recap all those diffs? Can I make those N folder 'submodule' of a MAIN git repo (local only one) and commit/push/pull each git repo on its own like usual?</p>

<p>...</p>
","3","1848443","",""
"47749250","6573438","2017-12-11 08:55:54","2","127","<python><scikit-learn><cython><git-submodules><setuptools>","Cython inheritance from git submodule, override scikitlearn methods","<p>I am working with scikitlearn and would like to override the build method of the treebuilder class for regression trees implemented using cython. In order to do so I figured I would need access to the cython code, so I have added scikitlearn as a git submodule.</p>

<p>My project structure thus looks as follows:</p>

<pre><code>.
|-- setup.py
|-- MyNewTree
|   |-- __init__.py
|   |-- MyNewTree.pyx
|   `-- scikitlearn
|       `-- sklearn
|           `-- tree
|               |-- __init__.py
|               |-- _tree.pxd
|               |-- _tree.pyx
|               |-- setup.py
|               `-- tree.py
</code></pre>

<p>In my setup.py I am doing the following:</p>

<pre class=""lang-py prettyprint-override""><code>from setuptools import setup, find_packages
from setuptools.extension import Extension
from Cython.Build import cythonize
import numpy

extensions = [
    Extension(
        ""newtree.MyNewTree"",
        [""newtree/MyNewTree.pyx""],
        include_dirs=['modulenetwork/scikitlearn/sklearn/tree', numpy.get_include()]
    )
]

setup(
    name = 'MyNewTree',
    version = '0.0.1',
    packages = find_packages(),
    ext_modules = cythonize(extensions)
)
</code></pre>

<p>Finally MyNewTree.pyx</p>

<pre class=""lang-py prettyprint-override""><code># cython: cdivision=True
# cython: boundscheck=False
# cython: wraparound=False

import numpy as np
cimport numpy as np
np.import_array()

from .scikitlearn.sklearn.tree._tree cimport BestFirstTreeBuilder

cdef class TreeBuilder(BestFirstTreeBuilder):
    cpdef build(self):
        print('This is an overridden build method!')
</code></pre>

<p>What I would like this to produce is a TreeBuilder class that has a different build method from the original scikitlearn implementation, but has everything else the same.</p>

<p>To compile I run <code>python setup.py build_ext --inplace</code></p>

<p>However I get the following error:</p>

<pre><code>Error compiling Cython file:
------------------------------------------------------------
...

import numpy as np
cimport numpy as np
np.import_array()

from .scikitlearn.sklearn.tree._tree cimport BestFirstTreeBuilder
^
------------------------------------------------------------

newtree/MyNewTree.pyx:9:0: 'newtree/scikitlearn/sklearn/tree/_tree.pxd' not found

Error compiling Cython file:
------------------------------------------------------------
...

import numpy as np
cimport numpy as np
np.import_array()

from .scikitlearn.sklearn.tree._tree cimport BestFirstTreeBuilder
^
------------------------------------------------------------

newtree/MyNewTree.pyx:9:0: 'newtree/scikitlearn/sklearn/tree/_tree/BestFirstTreeBuilder.pxd' not found

Error compiling Cython file:
------------------------------------------------------------
...
cimport numpy as np
np.import_array()

from .scikitlearn.sklearn.tree._tree cimport BestFirstTreeBuilder

cdef class TreeBuilder(BestFirstTreeBuilder):
    ^
------------------------------------------------------------

newtree/MyNewTree.pyx:11:5: 'BestFirstTreeBuilder' is not a type name
Traceback (most recent call last):
  File ""setup.py"", line 18, in &lt;module&gt;
    ext_modules = cythonize(extensions)
  File ""/Users/__/miniconda3/lib/python3.6/site-packages/Cython/Build/Dependencies.py"", line 1039, in cythonize
    cythonize_one(*args)
  File ""/Users/__/miniconda3/lib/python3.6/site-packages/Cython/Build/Dependencies.py"", line 1161, in cythonize_one
    raise CompileError(None, pyx_file)
Cython.Compiler.Errors.CompileError: newtree/MyNewTree.pyx
</code></pre>

<p>Clearly the files that are reported as not existing actually do exist. Is this a problem with my setup script? How do I properly cimport scikitlearn classes into my code?</p>
","1","6573438","",""
"826715","101819","2009-05-05 20:11:34","192","185847","<git><branch><git-submodules><conflict>","How do I manage conflicts with git submodules?","<p>I have a git superproject that references several submodules and I am trying to lock down a workflow for the rest of the my project members to work within.</p>

<p>For this question, lets say my superproject is called <code>supery</code> and the submodule is called <code>subby</code>. (Then is a simplification of what I'm trying to do...I'm not actually using the branches for versions, but I thought it would be easiest to lay out as a question.)</p>

<p>My master branch of <code>supery</code> has the tag <code>v1.0</code> of the git project <code>subby</code> referenced as a submodule. The branch of <code>supery</code> called <code>one.one</code> and changed the reference of the submodule to point to the tag <code>v1.1</code> of <code>subby</code>.</p>

<p>I can work  within each of these branches without a hitch, but if I try to update the <code>one.one</code> branch with changes from the <code>master</code> branch I receive some conflicts and I don't how to resolve them.</p>

<p>Basically after running a <code>git pull . master</code> while in the <code>subby</code> branch, it looks like it creates additional submodules.</p>

<p>Before the pull/merge, I get the desired response from <code>git submodule</code> from the <code>one.one</code> branch:</p>

<pre><code>$ git checkout master
$ git submodule
qw3rty...321e subby (v1.0)
$ git checkout one.one
$ git submodule
asdfgh...456d subby (v1.1)
</code></pre>

<p>But after the pull, it adds additional submodules when I run <code>git submodule</code>:</p>

<pre><code>$ git pull . master
Auto-merged schema
CONFLICT (submodule): Merge conflict in subby - needs qu3rty...321e
Automatic merge failed; fix conflicts and then commit the results.

$ git submodule
qw3rty...321e subby (v1.0)
asdfgh...456d subby (v1.1)
zxcvbn...7890 subby (v1.1~1)
</code></pre>

<p>How do I delete/ignore the unwanted submodule references and commit my conflicts and changes? Or is there a parameter I can use with my original <code>git pull</code> that will ignore my submodules?</p>
","0","101819","0","0"
"58009826","11944944","2019-09-19 11:19:20","0","144","<java><git-submodules><jgit>","How to push the changes of git sub-module along with the parent module changes to remote using Jgit?","<p>I have a git parent repository which contains a sub-module. Now I have modified few files which are available in the sub-module and few files in the parent module as well.
My Goal is to push the changes using JGit API to the remote repository, so that both parent and sub-module would reflect my changes.</p>

<p>I can only able to commit and push the changes of the parent repository, whereas while pushing the sub-module changes the below exception is occurred:<br>
""org.eclipse.jgit.api.errors.TransportException: Nothing to push.""</p>

<pre><code>Git submoduleGitObj = new Git(submoduleRepository)
submoduleGitObj.commit().setAuthor(""testUser"", ""testUser@gmail.com"").setAll(false)
      .setMessage(commitMessage).call(); // commit is successful
submoduleGitObj .push().setRemote(""origin"").setCredentialsProvider(credentialsProvider).call(); // throws exception and push is unsuccessful
</code></pre>

<p>Using JGit, I  could be able to successfully commit and push the changes of both sub-module and the parent module</p>
","4","11944944","",""
"58012887","6875421","2019-09-19 14:06:55","3","3980","<git><git-submodules>","How to switch git submodule with other branch properly?","<p>I have repo, which contain lots of submodules. Every submodule was initialized with <code>-b branch_rev_1</code>. I want to switch state of this repo, changing every submodule's branch with <code>-b branch_rev_2</code> (so I will be able to build app with different revision of dependencies).</p>

<p>But making <code>checkout -b branch_rev_2</code> inside submodule's directory does not change record in <code>.gitmodules</code> file.
Is there any way for switch state of all submodules after changing branch name in <code>.gitmodules</code> file (or vice versa, sync <code>.gitmodules</code> description and other configuration in .git folder after checking out specific revision inside submodule) ?</p>
","0","6875421","",""
"12264022","1426193","2012-09-04 13:00:23","1","59","<git><git-submodules>","How do you tell which commit, tag, and branch a git submodule should be on without checking it out","<p>I have a project in git.  It has a couple of submodules.  Without going into the submodule and doing a git status or similar, is there a way to tell which commit, branch, and tag it the main project thinks it should be on? </p>
","0","1426193","",""
"20075257","1220582","2013-11-19 15:16:49","3","179","<git><push><git-submodules>","Pushing git submodules correctly","<p>I have the following repository layout:</p>

<pre><code>Repo
|-- Folder1
|   |-- file1
|   |-- file2
|   ...
|-- Folder2
|   |-- file3
|   |-- file4
|   ...
|-- file5
|-- file6
...
</code></pre>

<p>Where 'Repo' is the main repository and 'Folder1' and 'Folder2' are two submodules.</p>

<p>Working with the root directory (file5, file6 in the example) is straight forward, but I have doubts about how to correctly push the items you modify inside the submodules.</p>

<p>Right now I'm editing the file inside each submodule, committing each change and pushing it localy:</p>

<pre><code>[Repo]$ cd Folder1
[Folder1]$ vi file1
... do some changes ...
[Folder1]$ git add file1
[Folder1]$ git commit -m ""Some changes""
[Folder1]$ git push
</code></pre>

<p>If I check git status on the submodule directly, it outputs that it's up to date:</p>

<pre><code>[Folder1]$ git status
# On branch master
nothing to commit, working directory clean
</code></pre>

<p>But if I check the status in the root folder, it tells me that the submodule that I've already pushed, has new commits.</p>

<pre><code>[Folder1]$ cd ..
[Repo]$ git status
# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   Folder1 (new commits)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Correct me if I'm wrong, but I suppose the above is due to git checking the current local repo commit ID vs the information in the git server I've pushed to. So, what I actually do now is commit all and push it up in the main repo. Is this the correct way to work with submodules?</p>
","0","1220582","0","0"
"918768","38765","2009-05-28 01:19:56","18","4039","<git><git-submodules>","Are git submodules the only safe way to have working copies within working copies?","<p>In my scenario, I have a program that analyzes data input files and produces other data output files. I want to version control the program, and I want to version control the data files, and as a matter of preference, I want to have the working copy of the data files within the working copy of the program. I want the program and data to be version controlled separately to reduce ""noise"". The program does not have a dependency on the data files.</p>

<p>If I use git submodules, then when things happen within the data directory (committed updates I think), the version control for the program notes that there's an update with the submodule. Which'd be useful if the program depended on the data, but it doesn't.</p>

<p>In such a scenario, is it possible to have a working copy within another working copy without using git submodules?</p>
","0","38765","0","0"
"920165","","2009-05-28 10:18:41","125","34326","<git><git-submodules>","How to extract a git subdirectory and make a submodule out of it?","<p>I started a project some months ago and stored everything within a main directory.
In my main directory ""Project"" there are several subdirectories containing different things:
Project/paper contains a document written in LaTeX
Project/sourcecode/RailsApp contains my rails app. </p>

<p>""Project"" is GITified and there have been a lot of commits in both ""paper"" and ""RailsApp"" directory. Now, as I'd like to use cruisecontrol.rb for my ""RailsApp"" I wonder if there is a way to make a submodule out of ""RailsApp"" without losing the history.</p>
","2","","0","0"
"29924360","2605155","2015-04-28 16:02:13","3","731","<git><push><git-submodules><git-push>","How to list git submodules that have not been pushed to origin?","<p>Sometimes I forget to push a git submodule. Is there a way to show which git submodules are ahead of origin, that have not been pushed?</p>
","0","2605155","0","0"
"29924493","1166285","2015-04-28 16:08:07","2","71","<git><github><bitbucket><git-submodules>","how dependent am i on git submodules?","<p>When using <code>git submodule</code> functionality, how dependent am I on that repo's owner?</p>

<p>For example, I use <code>git submodule add https://bitbucket.org/awesomecompany/repo.git</code></p>

<p>Everything is great... I can clone new versions, <code>update</code> and <code>init</code> the submodules, and everythign works as expected.</p>

<p>But then, one dreary day, the ""awesome company"" decides to delete their repository from bitbucket (or github). Now I try to clone my repo again, but git can't locate <code>repo.git</code>.</p>

<p>Am i screwed?</p>

<p>How should I have set up my project to not rely on their repo?</p>

<p>Am i not using submodules correctly?</p>

<p>Thanks!</p>
","1","1166285","0","0"
"20119194","353652","2013-11-21 11:04:32","10","2931","<git><dependencies><project-management><git-submodules>","Dependency management in git repositories (using submodules)","<p>I have a rather big project with lots of dependencies. The project is stored in a git repository and the dependencies are stored in dedicated git repositories linked as submodules. The dependencies can have further dependencies (again, using git submodules).</p>

<p>This works well. However, if two dependencies required both a third dependency I run into trouble on updates.</p>

<p>A dependency graph looks like this:</p>

<pre><code>[Main Repo]
  |
  |-- [ModuleA]
  |       |
  |       \-- [ModuleC]
  |
  \-- [ModuleB]
          |
          \-- [ModuleC]
</code></pre>

<p>Right now I update the submodule pointer in ModuleA and ModuleB. This way both modules remain self contained. However, this is a lot of work.</p>

<p>How is this problem usually solved in bigger projects? I am looking for best practices to approach this kind of problem.</p>

<p>Thanks!</p>
","1","353652","0","0"
"29929396","284529","2015-04-28 20:34:27","9","6645","<git><git-submodules>","git submodule has ""new commits"" when I checkout master","<p>I have a submodule called Helpers. When I clone my main project with --recursive, the Helpers submodule is in a detached head state (as all of the tutorials say it should be). If I now 'git status' in the main project directory, everything is clean. If I 'cd Helpers; git checkout master', I would expect nothing to change except that I am now on a named branch that I can commit to. However, without doing anything else, if I 'cd ..; git status', I see </p>

<pre><code> modified:   Helpers (new commits)
</code></pre>

<p>Why does it think there are new commits? The submodule should still be at the same point as when it was updated (in this case, cloned), no?</p>
","0","284529","",""
"39214068","3145035","2016-08-29 19:49:09","1","1614","<git><git-submodules>","Get only a submodule from a git repo","<p>I would like to know if there's a way to only get access to a submodule directory from a git repo, without cloning the git repo fully or even using <code>git init</code>, if possible. I only need the submodules. </p>

<p>For example;</p>

<p>I only want to get the submodules from this git repo <code>git://git.linphone.org/linphone-android.git</code>, which contains a set of codecs.</p>

<p>If anyone can help me with this question, i would be grateful, thank you.</p>
","2","3145035","",""
"30496047","4947047","2015-05-28 02:08:06","6","1944","<git><mercurial><migration><git-submodules><mercurial-subrepos>","Best way to migrate mercurial repo with subrepositories to git, preserving history?","<p>I'm trying to migrate a mercurial repository to git, but the problem is that the mercurial repository has subrepositories (some with branches), and lots of merges and branches itself. I'd like the final git repository to keep all this history and be correct and complete when checking out earlier parts of the repository or other branches. I don't need the new repository to have submodules or subtrees, although I would accept a solution using that as well. Some methods I've seen merge all the subrepos at the top of the new repo as branches, which means that checking out in the past doesn't contain all the files that were in subrepos. I've also tried importing everything as branches, resetting the head into the past, merging, and rebasing upwards, but there are too many merges and many conflicts arise, even with --preserve-merges, so I'd rather avoid this. I also couldn't find any way of replicating the mercurial subrepository update history in git as submodule update history. Does anyone have any ideas? Thank you.</p>
","0","4947047","0","0"
"12898278","419305","2012-10-15 14:55:07","316","240398","<git><git-submodules>","Issue with adding common code as git submodule: ""already exists in the index""","<p>I want to add some git submodules.
I've received two projects sharing some common code. The shared code was just copied into the two projects. I created a separate git repo for the common code and removed it from the projects with the plan to add it as a <code>git</code> submodule.</p>
<p>I used the path option of git submodule add to specify the folder:</p>
<pre><code>git submodule add url_to_repo projectfolder
</code></pre>
<p>but then got the error:</p>
<pre><code>'projectfolder' already exists in the index&quot;
</code></pre>
<p>This is the desired structure of my repository:</p>
<pre><code>repo
|-- projectfolder
    |-- folder with common code
</code></pre>
<p>It is possible to add the <code>git</code> submodule directly in the repo, or into a new folder there, but not in the project folder. The problem is that it really need to be in the project folder..
What can I do about this and what have I misunderstood about the path option of git submodule add?</p>
","4","419305","0","0"
"1030169","77002","2009-06-23 01:05:54","2500","1675436","<git><git-submodules>","Pull latest changes for all git submodules","<p>We're using git submodules to manage a couple of large projects that have dependencies on many other libraries we've developed. Each library is a separate repo brought into the dependent project as a submodule. During development, we often want to just go grab the latest version of every dependent submodule.</p>
<p>How do I pull the latest changes for all git submodules?</p>
","3","77002","0","0"
"39257089","1711186","2016-08-31 18:59:22","0","30","<git><git-submodules>","Does `git submodule update` actually mean `git restore submodule to last commited state`?","<p>I have read some of the better question and answers regarding <code>git submodule update</code>. I am still a little confused about an aspect and want to clarify.</p>

<p>The term ""<code>update</code>"" in <code>git submodule update</code> triggered me to the assumption that, since a subumodule being another project/repo which might evolve, that an we are talking about importing those changes into the local copy of the submodule.</p>

<p>Can an answer to this question please clarify that if instead the action caused by calling <code>git submodule update</code> is not the action before, but instead would mean <code>git submodule restore_submodule_to_commit_state_of_which_was_commited_in_the_superproject</code>?</p>
","2","1711186","",""
"12924414","1705267","2012-10-16 22:26:37","0","249","<git><push><pull><git-submodules>","pushed code from a git submodule, but can't pull it again from the main working directory","<p>I have a project that pulls in a library as a submodule from a different repo.  I made a branch with some changes in the library from within the submodule directory and sucessfully pushed it to Github.  When I tried pulling the changes from within the library's main development, I get ""Already up-to-date."" when I know it's not.  I can clone the library's repo and there are my changes.  Why won't pull notice the changes?</p>
","3","1705267","",""
"39303464","2800245","2016-09-03 05:10:35","1","34","<git><git-submodules>","Working in a git branch with submodules and commiting directly from that branch","<p>I am working in my branch and I needed an external submodule, so from the root of my project I did.</p>

<pre><code>git submodule add https://github.com/blah/blah ./location/submodue
Cloning into ...
...
git commit -am ""Added submodule""
</code></pre>

<p>This seems to have worked and I was able to carry on working on the main branch, while working I noticed a bug in the submodule, so I made the change directly in it.</p>

<p>But when I did a <code>git add .</code> no changes were found, the code changes I made were not found. There was nothing to commit but git did report <code>git +0 ~1 -0!</code>, but I was not able to add/commit that one change. </p>

<p>So I made the changes to the 'main' project, then I pulled the changes and everything was fine again.</p>

<p>So how can I make changes to the submodule and commit those changes from the 'main' branch that uses that submodule</p>

<p>(Let me know if you want the links/paths to the actual github projects).</p>
","0","2800245","0","0"
"58194897","12145726","2019-10-02 03:38:33","1","1687","<git><git-submodules>","git submodule shows as changed in parent directory","<p>I've got a library checked out as a <em>git submodule</em> in my project and I often make changes in the lib. Every time I commit that change the subsequent <code>git status</code> in the parent repo shows that the submodule has changed. I also use <code>__git_ps1</code> and so the parent dir prompt shows that there are uncommitted changes. </p>

<pre><code>parent-project (master *) $ git diff
diff --git a/my-submodule b/my-submodule
index 5eb2e9f..fd40630 160000
--- a/my-submodule
+++ b/my-submodule
@@ -1 +1 @@
-Subproject commit 5eb2e9fdcb85ab5a1f57e622b17cc76e5af749b7
+Subproject commit fd406308851b5521980f4578960c428200c66371
</code></pre>

<p>I know of two options:</p>

<ol>
<li><code>git commit submodule</code> from the parent which creates unnecessary commits, or </li>
<li>remove and re-add the submodule which seems like an overkill.</li>
</ol>

<p>Is there any way to tell the parent repo <em>Update the submodule ref to the latest master and move on</em>? I don't want to refer to a specific git revision, just to the head of <em>master</em> or whatever branch I choose.</p>

<p>Thanks!</p>
","2","12145726","0","0"
"30534735","536299","2015-05-29 16:36:05","1","486","<git><heroku><github><git-submodules>","Deploying a git branch together with its submodule from Github to Heroku","<p>I am in reference to <strong>Heroku's deployment from Github</strong> feature that allows you to deploy from a Github branch to Heroku. See: <a href=""https://devcenter.heroku.com/articles/github-integration"" rel=""nofollow"">https://devcenter.heroku.com/articles/github-integration</a></p>

<p>I would like to know if I can deploy from a github project that includes a git submodule?</p>

<p>If so what are the necessary steps other that running the submodule command below on my project?</p>

<pre><code>git submodule add git://github.com/whomsoever/whatever.git
</code></pre>
","0","536299","",""
"1197572","143397","2009-07-29 01:00:43","2","2197","<git><merge><branch><git-submodules>","git segfaults on merge - submodule conflict","<p>I'm trying to combine code on two branches with the 'git merge' command, but git is crashing during the process. I need to find an alternative way to merge these branches.</p>

<p>To increase merge output to a debug level I ran:</p>

<pre>
    $ export GIT_MERGE_VERBOSITY=5
</pre>

<p>I am currently on the destination branch. git-status shows everything clean and clear.
When I merge the branches, this is what I see (I've replaced check-in comments with %%%%%% and filenames with ####### as they may be business-sensitive).</p>

<pre><code>$ git merge origin/PH-RELEASE-146.0
Merging HEAD with origin/PH-RELEASE-146.0
Merging:
8399d82 %%%%%%
4f9dcfe %%%%%%
found 2 common ancestor(s):
e0a5fa1 %%%%%%
ce62bf1 %%%%%%
  Merging:
  e0a5fa1 %%%%%%
  ce62bf1 %%%%%%
  found 1 common ancestor(s):
  af34a07 %%%%%%
  Skipped ######## (merged same as existing)
  Removed ########
  Removed ########
  ...
  Removed ########
  Auto-merged build
  CONFLICT (submodule): Merge conflict in build - needs b3efae4855bc5eb83aa3167ce6c309a4503c3286
  There are unmerged index entries:
  1 build
  2 build
  3 build
Merge with strategy recursive failed.
</code></pre>

<p>It turns out that at this point, git-merge has crashed. How do I know this?
 - when running git under Cygwin:</p>

<pre><code>$ git merge origin/PH-RELEASE-146.0

     11 [main] git 4352 _cygtls::handle_exceptions: Error while dumping state (probably corrupted stack)

Segmentation fault (core dumped)
</code></pre>

<ul>
<li>when running git under Linux, with 'ulimit -c unlimited':</li>
</ul>

<pre>
    $ ulimit -c unlimited; ls -l core; git merge origin/PH-RELEASE-146.0; ls -l core
    ls: cannot access core: No such file or directory
    Merging HEAD with origin/PH-RELEASE-146.0
    ...
    ...
    Merge with strategy recursive failed.
    -rw------- 1 user group 1589248 Jul 29 12:48 core
</pre>

<ul>
<li><p>in both cases, .git/index.lock remains and must be manually deleted before any git command will work again:</p>

<p>$ git status
fatal: unable to create '.git/index.lock': File exists</p></li>
</ul>

<p>I've manually walked through the merge above by comparing the commit IDs with the ones in the gitk tree. It seems clear to me that git is looking for common ancestors and breaking the merge up into pieces, dealing with each ancestor recursively. But what I think has caused the problem is that the ""git-link"" to a sub-module called ""build"" has changed between commits e0a5fa1 and ce62bf1:</p>

<ul>
<li>in e0a5fa1 the submodule build is meant to be 8dc84b6</li>
<li>in ce62bf1 the submodule build is meant to be b3efae4</li>
</ul>

<p>So obviously there's a conflict. But it's a conflict during the ""partial"" merge or whatever it's called, not the final one. And git does not seem to handle this very well at all.</p>

<p>Ok, so there's probably a bug - how would I go about submitting a bug report?</p>

<p>But what I'm really concerned about here is the fact that I cannot merge these two branches. Does anybody know an alternative way to bring these branches together without using the 'merge' command? Can I get 'git-merge' to somehow ignore this submodule completely during the entire merge process?</p>

<p>Linux git version 1.6.0.4</p>

<p>Cygwin git version 1.6.1.2</p>
","3","143397","0","0"
"30546655","456727","2015-05-30 13:15:48","1","708","<heroku><gruntjs><git-submodules><circleci>","using git submodule for deployment with circleCI","<p>I have a project which is built using the yeoman angular-fullstack generator. Part of this setup is a grunt 'build' task which creates a <code>dist</code> deployment directory.</p>

<p>So I wanted to deploy just that directory to Heroku and thought this would be an actual use for a git submodule. Rather than worrying about pulling down external changes, a submodule allows be to setup the dist directory as a separate repo that I can deploy independently to Heroku.</p>

<p>This all works nicely on localhost where I can cd into the submodule directory after grunt has completed it's build, and then just commit the changes and push them to the submodule's repo. Heroku is watching the repo and automatically deploys.</p>

<p>My problem is that when I tried to do the same thing in CircleCI, I don't seem to be able to <code>cd</code> into the submodule directory in order to add/commit/push the built distribution.</p>

<p>One thought is that I run CircleCI off the dist 'repo', but this will require me to include all the test in the repo which I'd prefer not to deploy to heroku.</p>

<p>I'm looking for anyone that:</p>

<ol>
<li>knows how to commit/push just the submodule in CircleCI, or</li>
<li>has a better idea of how to deploy the dist directory (only) to Heroku.</li>
</ol>
","0","456727","",""
"30580948","1094339","2015-06-01 18:47:40","18","17846","<git><git-submodules>","git error: unable to index file Crashlytics.framework/Headers","<p>I am using Twitter's Fabric on my iOS app.</p>
<p>Crashlytics in Fabric just updated itself and now I cannot commit my project to <code>git</code>. I get the error:</p>
<blockquote>
<p>git error: unable to index file <code>Crashlytics.framework/Headers</code></p>
<p>fatal: updating files failed</p>
</blockquote>
<p><img src=""https://i.stack.imgur.com/1wrau.png"" alt=""enter image description here"" /></p>
<p>Any idea what is going wrong or how to fix it?</p>
<p>Running <code>git status</code> reveals:</p>
<pre><code>Untracked files:
(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

Crashlytics.framework/Info.plist
Fabric.framework/Info.plist
profile.xcodeproj/project.xcworkspace/xcuserdata/
profile.xcodeproj/xcuserdata/
</code></pre>
","8","1094339","0","0"
"30597975","20712","2015-06-02 13:48:09","1","381","<git><git-submodules>","How can I access only the branch name of a git submodule?","<p>I have a submodule defined in <code>.gitmodules</code> as:</p>

<pre><code>[submodule ""app/scripts/directives/foo""]
    path = app/scripts/directives/foo
    url = git@bitbucket.org:ross_rogers/foo.git
    branch = my_branch
</code></pre>

<p>Is there a programmatic way to access this branch parameter from the containing repository?</p>

<p><code>git submodule status</code> produces (without newlines):</p>

<pre><code>074d5c118eeae3bf622c6f878db96d8bf8b3bf47 \
app/scripts/directives/foo \
(heads/my_branch)
</code></pre>

<p>I'm in a dual environment of Windows CMD shell and Linux bash, so I'm looking for a way to get <code>my_branch</code> programmatically, without using unix <code>cut</code>/<code>awk</code>/ et c.</p>
","0","20712","",""
"30599569","937363","2015-06-02 14:55:28","2","1739","<git><git-submodules><git-add>","git add submodule hash directly","<p>Is there a way using git commands to directly update the submodule hash in the index?</p>

<p>If not, is there a way to manually change it via modifying text somewhere in the .git directory?</p>

<p>I want to point to a specific commit in a submodule, but I want to avoid having to go into that submodule, check out the commit, add the submodule to the index, and then checking out the original commit in the submodule.
For example:</p>

<ol>
<li><code>cd &lt;submod&gt;</code></li>
<li><code>git checkout &lt;hash&gt;</code></li>
<li><code>cd ..</code></li>
<li><code>git add &lt;submod&gt;</code></li>
<li><code>cd &lt;submod&gt;</code></li>
<li><code>git checkout &lt;originalbranch&gt;</code>
<ul>
<li>To determine <code>&lt;originalbranch&gt;</code> programattically may take several more commands.</li>
</ul></li>
</ol>

<p>Of course, this could all be scripted, but since the submodule state is captured in the index via a single hash, it should be possible to have a single command to do this without this long unnecessary flow of actually checking the commit out.</p>
","2","937363","0","0"
"30618109","3780853","2015-06-03 10:56:24","7","1235","<git><clone><git-submodules>","How can I get 'git clone --recursive' to clone submodules locally?","<p>I'm in the habit of making a git clone to a master location on my disk and then using a local git clone from there to cut down on download and copy times.</p>

<p>However, if I clone a project that has submodules, <code>git clone --recursive</code>, it will use <code>--local</code> for the main repo, but the submodule initialization is still by reference to URLS, which means I'm still going and doing a download again.</p>

<p>Is there a way to make <code>git clone --recursive</code> clone from the local copies of submodules instead of the canonical locations?</p>
","2","3780853","0","0"
"1462754","157864","2009-09-22 21:32:50","12","5243","<git><github><git-submodules>","What is the advantage of using git submodules over having a repo inside another repo with a gitignore?","<p>We've been looking into git submodules and we are wondering what advantage (if any) is there in having a repository using submodules verses having a repository within another repository with a .gitignore file.</p>

<p>Example without submodules:</p>

<pre><code>mkdir a
cd a
git init
touch test1.txt
echo ""b"" &gt; .gitignore
git add .
git commit -m ""Adding test1.txt and gitignore""

mkdir b
cd b
git init
touch test2.txt
git add .
git commit -m ""Adding test2.txt""

git log
cd ..
git log
</code></pre>
","0","157864","0","0"
"13060577","1031218","2012-10-25 02:04:36","0","234","<git><git-submodules>","git submodule without placing metadata in separate-git-dir","<p>I want to use the old behaviour for submodule metadata.
What command line should I use?</p>

<p>1) clone repository --recursive</p>

<p>2) Add new submodule</p>
","0","1031218","0","0"
"13066415","1148775","2012-10-25 10:17:33","0","65","<git><git-submodules>","Is there any way to make a package of all git submodules?","<p>My project has a bunch of git submodules, and every time I clone my project, it takes a long time to clone all submodules.</p>

<p>Is there any way to make all submodules as a package, so maybe I can just unzip them, pull new commits, instead of clone them all?</p>

<p>I've tried just packing the submodule directories together in previous git version, and it works fine due to the git root of submodules are right in the path/to/submodule/.git, but recently, I found that they put the submodule git root centralized in .git/modules/path/to/submodule/.git, so this way is not working now.</p>

<p>Any idea?</p>
","0","1148775","",""
"58472229","6766713","2019-10-20 10:51:40","1","29","<git><push><git-submodules>","Update git submodule branch on remote server","<p>I accidently got detached head in my git submodule, when I edited the code inside of it and pushed. So now the remote branch is broken and won't build. So I resetted the submodule to the master, but only locally. What I need to do now is to ""push"" it somehow to the remote repository. But git doesn't show any changes to commit or anything to push.</p>
","0","6766713","",""
"20627172","1225055","2013-12-17 06:09:32","0","190","<git><github><git-submodules>","How can I delete git submodule wreckage?","<p>While pushing my code history to git repository, I found that Objective-C project work as a submodule, which means if I push Objective-C project, it work as a submodule, like <a href=""https://github.com/JaehyunAhn/-Obj-C--First-iPhone-Application-"" rel=""nofollow"">this</a>.</p>

<p>After I notice that factor, I tried to reinitialize my <strong>.git</strong> folder. (delete and tried to call 'git init')</p>

<p>But it would not work at all and submodules are still alive.</p>

<p>I also tried <strong>git submodule deinit</strong> and <strong>init</strong> command. However, after that, even though I tried to push my files to git repository, it throw out this message.</p>

<pre><code>Sogos-Macbook:Test code dkswogus7530$ git push -u origin master

To https://github.com/JaehyunAhn/cpuls2_book_review.git
! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/JaehyunAhn/cpuls2_book_review.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>I also tried to update &amp; delete my git repository to type command <strong>git pull origin master</strong> and that command abort this message</p>

<pre><code>Compressing objects: 100% (4/4), done.
Writing objects: 100% (5/5), 537 bytes | 0 bytes/s, done.
Total 5 (delta 2), reused 0 (delta 0)
remote: error: object d5c202897cf6f769235a2707d15719636fe37984:contains duplicate file entries
remote: fatal: Error in object
error: unpack failed: index-pack abnormal exit
To https://github.com/JaehyunAhn/cpuls2_book_review.git
 ! [remote rejected] master -&gt; master (unpacker error)
error: failed to push some refs to 'https://github.com/JaehyunAhn/cpuls2_book_review.git'
</code></pre>

<p>How can I resolve this problem?</p>

<p>This <a href=""https://github.com/JaehyunAhn/cpuls2_book_review"" rel=""nofollow"">submodule repository</a> pointed from <a href=""https://github.com/JaehyunAhn/-Obj-C--First-iPhone-Application-"" rel=""nofollow"">this</a>, <a href=""https://github.com/JaehyunAhn/-Obj-C--Fraction"" rel=""nofollow"">this</a> and <a href=""https://github.com/JaehyunAhn/ACM-Craft"" rel=""nofollow"">this</a>.</p>
","2","1225055","0","0"
"58522888","2240660","2019-10-23 12:28:13","1","344","<git><git-submodules><git-alias>","git submodule foreach not working as alias","<p>I used to use commands like</p>

<pre><code>git submodule foreach git status
</code></pre>

<p>or for commands that may fail</p>

<pre><code>git submodule foreach ""git checkout develop || true""
</code></pre>

<p>So now I created a alias for the first form and it works OK</p>

<pre><code>git config --global alias.all '!f(){ git submodule foreach ""git $@""; }; f'
</code></pre>

<p>I then try to do it also for the second form and it doesn't work at all</p>

<pre><code>git config --global alias.all '!f(){ git submodule foreach ""git $@ || true""; }; f'
</code></pre>

<p>Note that I can still use it the first one like   </p>

<pre><code>git all ""checkout develop || true""
</code></pre>

<p>but that looks like unnecessary typing when using an alias.</p>

<p>The error it gives in the example above using 'git all' is
    error: pathspec 'develop || true' did not match any file(s) known to git</p>

<p>while in the 'submodules' it outputs an error but it continues to the next submodule.</p>

<p>Any pointer on how to fix that second version?</p>

<p>Cheers.</p>
","0","2240660","",""
"58527510","3355024","2019-10-23 16:41:41","1","172","<git><git-submodules>","How to set the default remote used by the git submodule init command?","<p>I'm restructuring one of my git-repositories. So I cloned it locally to have a copy in case I mess up. Because of that, the origin now points to a folder on my local machine. When I now try to initialize the submodules (which are referenced by a relative URL), git tries to get the subrepository from my local machine and fails.</p>

<p>The documentation for the <code>git submodule init</code> subcommand says</p>

<blockquote>
  <p>[..] If the URL is relative, it will be resolved using the default remote [..]</p>
</blockquote>

<p>Where can I find the setting for the default remote?</p>

<p>How can I set the default remote?</p>

<p>Found something about the default push settings. But I can't figure out whether this has any effect on the <code>git submodule init</code> command.</p>
","0","3355024","",""
"58588910","12232029","2019-10-28 10:02:53","5","3354","<git><ansible><git-submodules>","Is it possible to execute ""git submodule update"" without ""command:"" or ""shell:"" with Ansible?","<p>So I've been given the task of updating a certain directory over Ansible and I can't seem to find a way to execute <code>git submodule update</code> with <code>git:</code>.</p>

<p>Is there really no other way to do <code>git submodule update</code> without using <code>command:</code> or <code>shell:</code>?</p>

<p>My current code:</p>

<pre><code># Command to execute: git remote update
- name: Git Update
  git:
    repo: ""{{ git_ssh_key }}""
    dest:  ~/some/directory
    update: yes
    version: master

# Command to execute: git reset --hard origin/master
- name: Git reset
  command: git reset --hard origin/master
  args: 
    chdir: ~/some/directory

# Command to execute: git submodule update
- name: Git Submodule Update
  [Here is where I need your help to execute ""git submodule update""]
</code></pre>

<p>Any help is greatly appreciated.</p>
","0","12232029","0","0"
"20708700","91970","2013-12-20 17:14:03","0","2853","<git><git-submodules>","How do I re-create a deleted .gitmodule file?","<p>I have a submodule in my repo, and I think I inadvertently deleted the <code>.gitmodules</code> file.</p>

<p>I don't want to do <code>git submodule add &lt;git@git:...&gt;</code> because that will pull the original repo for the submodule into the folder and erase the changes I made to the submodule. So all I want to do is just re-create the <code>.gitmodules</code> file.</p>

<p>How do I re-create it?</p>
","0","91970","0","0"
"13159979","603270","2012-10-31 14:14:00","8","6389","<git><git-submodules><gitignore><git-config>","How to make git ignore changes to submodules by default","<p>Since gitmodules were introduced in Git, I like to add them like so:</p>

<pre><code>[submodule ""actionbarsherlock""]
path = actionbarsherlock
url = git://github.com/JakeWharton/ActionBarSherlock.git
ignore = dirty
</code></pre>

<p>The important part here is <code>ignore = dirty</code>.</p>

<p>When using the <code>git submodule add</code> command, I'm forced to add this line by myself in the <code>.gitmodules</code> file.</p>

<p>How can I make this the default behavior for every <code>git submodule add</code> I'll make in the futur?</p>

<p>I know about the <code>submodule.&lt;name&gt;.ignore</code> configuration, but how to apply it to all by default?</p>
","4","603270","0","0"
"35059039","801913","2016-01-28 10:36:17","2","1423","<git><github><version-control><git-submodules>","Clone git repo inside another repo (and don't treat the cloned one as a submodule)","<p>In a previous project I was able to clone a third party GIT repo into my project repo. I then added the cloned repo and committed the changes to my project repo. That way I was able to keep the cloned repo up to date via <code>git pull</code> in the cloned repo folder, and also able to modify files in it and to commit them to my own project repo.</p>

<p>I have tried to replicate this in a new project and I am facing a strange issue. Basically I follow the same steps (in this case the cloned repo is another project of mine) but when I add the cloned repo files to my own repo, the main repo recognizes the cloned one as a submodule (though no <code>.gitmodules</code> file is generated).</p>

<p>I compared the all the git related files and found no difference between the previous project and the current one. Then I cloned the same third party repo I used in the previous project (<a href=""https://github.com/wymsee/cordova-HTTP.git"" rel=""nofollow"">https://github.com/wymsee/cordova-HTTP.git</a>) and I was able modify/add files and to commit them to my own repo. 
I can't see any difference between the third party repo I clone and my own project so I can't understand why the latter is treated as a submodule but the first isn't. Any ideas?</p>
","2","801913","",""
"20046930","391345","2013-11-18 11:44:02","0","104","<git><symlink><git-submodules>","How to do a reverse git submodule","<p>I am having a structural problem with git. I have a repository (base repository) with common code which is used as a base for all my projects.</p>

<p>Each project has a different theme and modules which each has it's own repository (project repository).</p>

<p>It is not possible to put the project repository as a submodule in the base repository, because then we would have to change to submodule for every project and we wouldn't be able to push that to the base repository.</p>

<p>what WOULD be interesting, is to add the base repository as a submodule tot the project repository, because that wouldn't change for any project. Then I am stuck with the folder structure, because the the and modules are in a sub/sub/sub ... folder of the base code</p>

<p>What would be the best approach to do this ?</p>
","2","391345","",""
"931882","115076","2009-05-31 11:32:37","101","62647","<git><patch><git-submodules><git-patch>","How to apply a git patch from one repository to another?","<p>I have two repositories, one is the main repo for a library, and the other is a project using that library.</p>

<p>If I make a fix to the in the subservient project, I'd like an easy way to apply that patch back upstream.</p>

<p>The file's location is different in each repository.</p>

<ul>
<li>Main repo: <strong><em><code>www.playdar.org/static/playdar.js</code></em></strong></li>
<li>Project: <strong><em><code>playlick.com/lib/playdar.js</code></em></strong></li>
</ul>

<p>I tried using <code>git format-patch -- lib/playdar.js</code> on the playlick project, and then <code>git am</code> on the main playdar repo, but the differing file locations in the patch file raised an error.</p>

<p>Is there an easy way to apply the patch from a given commit on a given file to another arbitrary file elsewhere?</p>

<p>For bonus points, what if the file you want to apply the patch to isn't in a git repository?</p>
","2","115076","0","0"
"58086304","12114973","2019-09-24 18:33:01","2","74","<github><git-submodules><delete-file><undo><revert>","I accidentally deleted my files in a repository on github, but I still have them locally","<p>I accidentally deleted my files in a repository on Github, but I still have them locally.  I'm having trouble pushing them back up because it says that I have a submodule. And the files are showing greyed out.  How can I fix this? <a href=""https://i.stack.imgur.com/IRtYB.png"" rel=""nofollow noreferrer"">screenshot of issue</a> The  double folders are submodules that are not clickable</p>
","6","12114973","",""
"1043298","208","2009-06-25 11:00:46","2","683","<git><customization><dvcs><git-submodules>","git submodules: customization","<p>When using git submodules, what is the preferred way of doing customizations?  Should I...</p>

<ul>
<li>fork the project and track the fork</li>
<li>attempt to override the default behavior</li>
<li>make the changes locally</li>
</ul>

<p>If none of these makes sense, then what does?</p>
","1","208","0","0"
"20260774","1635948","2013-11-28 08:09:28","3","2361","<git-submodules>","git submodule contents are not cloned along with the base repo","<p>I created a repo:</p>

<pre><code>git init --bare myrepo.git
</code></pre>

<p>Then on the same server, created the repo for production</p>

<pre><code>cd /home/myuser/public_html
git init
git remote add origin /usr/local/gitroot/myrepo.git
git commit --allow-empty -m ""Initial commit""
</code></pre>

<p>Then created the submodule</p>

<pre><code>cd subdirectory
git init
git add .
git commit -m ""Initial submodule commit""
cd ..
git submodule add /home/myuser/public_html/subdirectory subdirectory
git add .
git commit -m ""Initial commit of base files and submodule""
git push origin master
</code></pre>

<p>Then on my local machine</p>

<pre><code>git clone --recursive ssh://user@mydomain/path/to/git mygitdirectory
</code></pre>

<p>And at the tail end of what was looking like a clean clone, I get</p>

<pre><code>fatal: repository '/home/myuser/public_html/subdirectory' does not exist
Clone of '/home/myuser/public_html/subdirectory' into submodule path 'subdirectory' failed
</code></pre>

<p>Trying git submodule add and git submodule update in subdirectory yields the same result. I ended up with all the base files, but the subdirectory being empty. On the server, git log shows the commit of the base files + submodule, and git status in both the base and the submodule shows clean.    </p>

<p>Postscript</p>

<p>I blew away everything and tried again changing the submodule creation to:</p>

<pre><code>git submodule add ./subdirectory ./subdirectory
</code></pre>

<p>which yielded a .gitmodules on the server of</p>

<pre><code>[submodule ""subdirectory""]
path = subdirectory
url = ./subdirectory
</code></pre>

<p>When doing the clone on the local machine, it resulted in the same error when it got to the submodule part. So, I changed the .gitmodules (and then did a git submodule sync) to:</p>

<pre><code>[submodule ""subdirectory""]
path = subdirectory
url = ssh://user@mydomain/path/to/git
</code></pre>

<p>Reading (many) different workflow suggestions, I find myself unsure (a) what the contents of each .gitmodules should be (I assume the server one is correct) (b) whether the remote bare repo to which the super repo on the server is pushed should be the only bare repo or whether the submodule needs one as well (I assume that once the submodule is committed in the super repo that pushing the super repo to the bare repo (origin) takes the submodule history as well), and (c) whether the local submodule needs to have a remote defined (it didn't appear to on the server, so I didn't so so locally)</p>
","0","1635948","",""
"1155095","54964","2009-07-20 18:22:02","6","12729","<git><repository><git-submodules><git-pull>","Unable to `git submodule foreach git pull`","<p>This question is based on <a href=""https://stackoverflow.com/questions/1145422/to-show-external-code-dependency-in-git-by-a-submodule"">this thread</a>.</p>

<p><strong>My .gitmodules is at my Home</strong></p>

<pre><code>[submodule ""bin""]
           path = bin
           url = git://github.com/masi/bin.git
</code></pre>

<p><strong>My folder -structure at my Home:</strong></p>

<pre><code>~
|-- [drwxr-xr-x] bin          // this is the folder which I make a submodule
                              // it is also a folder where I have a Git to push my submodule's files
    | -- fileA
    ` -- folderA
    ...
</code></pre>

<p>I run </p>

<pre><code>git submodule init    # I get no output from these commands
git submodule update          
</code></pre>

<p>I run </p>

<pre><code>git submodule foreach git pull
</code></pre>

<p>I get </p>

<pre><code>Entering 'bin'
fatal: Where do you want to fetch from today?
Stopping at 'bin'; script returned non-zero status.
</code></pre>

<p>My first assumption to fix the bug was to change <code>path = bin</code> to <code>path = /Users/Masi/bin</code>. However, this does not solve the problem.</p>

<p><strong>How can you upload the content from the external repository which is a submodule in my Git?</strong> </p>
","6","54964","0","0"
"18623846","2748456","2013-09-04 21:10:52","5","1601","<git><gerrit><git-submodules>","How to update a git superproject that depends on submodule commit under gerrit review?","<p>We have a git superproject that has one submodule. The submodule is under gerrit review.</p>

<p>Our problem is that while changes are being reviewed in the submodule, (even if the submodule link to the commit under review has been committed on the superproject) they cannot be retrieved by other developers via 'git submodule update' unless they specifically fetch refs/changes/* in the submodule.</p>

<p>I clearly state that we need other developers to be able to checkout code that is still under review in the submodule. So waiting for the code to be merged is not an viable choice. </p>

<p>Is there a way to enable a developer getting the changes under review in the submodule via 'git submodule update' on the superproject that has the submodule link pointing to the commit under review ?</p>
","0","2748456","0","0"
"18626626","34134","2013-09-05 02:04:13","7","1199","<git><version-control><git-submodules>","Can I put a .gitmodules file in a subdirectory?","<p>Let's say my repo index root is in <code>/project</code> dir.
Should the <code>.gitmodules</code> also be inside this dir, or can I put it into, say <code>/project/subdir</code>?</p>

<p>The reason I would like to do that is because I have multiple contributors and I want each to be responsible for his own set of submodules.</p>
","0","34134","0","0"
"58283362","2359762","2019-10-08 09:13:41","4","2965","<git><github><continuous-integration><git-submodules><github-actions>","How to setting up GitHub Actions CI service for a private repo which has private git submodules?","<p>I am setting up GitHub Actions for an Android project private repo which has multiple git submodules and my workflow cannot even pass the checkout step!</p>

<p>I know that it might be the authentication issue but have no idea how to fix it! I am wondering since the CI is for GitHub it has access to all the company's repos and doesn't require any token or hash key.</p>

<p>This is the checkout step in yml file:</p>

<pre><code> - name: Chrckout repo
   uses: actions/checkout@v1
   with:
    submodules: true
    lfs: true
</code></pre>

<p>and here is some parts of the log (sorry that I had to obfuscate some parts because of project confidentiality but it should be readable):</p>

<pre><code>2019-09-29T13:03:39.9185317Z ##[group]Run actions/checkout@v1
2019-09-29T13:03:39.9272863Z with:
2019-09-29T13:03:39.9273270Z   submodules: true
2019-09-29T13:03:39.9273443Z   lfs: true
2019-09-29T13:03:39.9273636Z ##[endgroup]
2019-09-29T13:03:40.9117862Z Added matchers: 'checkout-git'. Problem matchers scan action output for known warning or error strings and report these inline.
2019-09-29T13:03:40.9118799Z ##[add-matcher]/home/runner/work/_temp/git_edd66dd0-526a-44d1-97ad-a70a018bc61e.json
2019-09-29T13:03:40.9137013Z Syncing repository: ***/***-Android
2019-09-29T13:03:40.9145133Z ##[command]git version
2019-09-29T13:03:40.9145665Z git version 2.23.0
2019-09-29T13:03:40.9146108Z ##[command]git lfs version
2019-09-29T13:03:41.5663318Z git-lfs/2.8.0 (GitHub; linux amd64; go 1.12.6)
2019-09-29T13:03:41.6007068Z ##[command]git init ""/home/runner/work/***-Android/***-Android""
2019-09-29T13:03:41.6453117Z Initialized empty Git repository in /home/runner/work/***-Android/***-Android/.git/
2019-09-29T13:03:41.6502397Z ##[command]git remote add origin https://github.com/***/***-Android
2019-09-29T13:03:41.6686542Z ##[command]git config gc.auto 0
2019-09-29T13:03:41.6767746Z ##[command]git config --get-all http.https://github.com/***/***-Android.extraheader
2019-09-29T13:03:41.6826722Z ##[command]git config --get-all http.proxy
2019-09-29T13:03:41.6946989Z ##[command]git -c http.extraheader=""AUTHORIZATION: basic ***"" fetch --tags --prune --progress --no-recurse-submodules origin +refs/heads/*:refs/remotes/origin/*
2019-09-29T13:03:42.5443344Z remote: Enumerating objects: 1483, done.        
2019-09-29T13:03:42.5444124Z remote: Counting objects:   0% (1/1483)        
2019-09-29T13:03:42.5444498Z remote: Counting objects:   1% (15/1483)        
.
.
.       
2019-09-29T13:03:42.5493616Z remote: Counting objects:  99% (1469/1483)        
2019-09-29T13:03:42.5493904Z remote: Counting objects: 100% (1483/1483)        
2019-09-29T13:03:42.5494370Z remote: Counting objects: 100% (1483/1483), done.        
2019-09-29T13:03:42.5495148Z remote: Compressing objects:   0% (1/727)        
2019-09-29T13:03:42.5495381Z remote: Compressing objects:   1% (8/727)
.
.
.        
2019-09-29T13:03:42.5898942Z remote: Compressing objects:  99% (720/727)        
2019-09-29T13:03:42.5899526Z remote: Compressing objects: 100% (727/727)        
2019-09-29T13:03:42.5899818Z remote: Compressing objects: 100% (727/727), done.        
2019-09-29T13:03:42.6030874Z 
2019-09-29T13:03:42.6031956Z                                                                                 
2019-09-29T13:03:42.6181873Z Receiving objects:   0% (1/98154)
2019-09-29T13:03:42.6182681Z 
2019-09-29T13:03:42.6184320Z                                                                                 
2019-09-29T13:03:42.6327511Z Receiving objects:   1% (982/98154)
2019-09-29T13:03:42.6328000Z 
2019-09-29T13:03:42.6328418Z                                                                                 
2019-09-29T13:03:42.6459740Z Receiving objects:   2% (1964/98154)
2019-09-29T13:03:42.6459933Z 
2019-09-29T13:03:42.6460265Z                                                                                 

.
.
.
2019-09-29T13:03:46.7921902Z 
2019-09-29T13:03:46.7923021Z                                                                                 
2019-09-29T13:03:46.8059761Z Receiving objects:  99% (97173/98154), 140.24 MiB | 35.06 MiB/s
2019-09-29T13:03:46.8061958Z remote: Total 98154 (delta 502), reused 1355 (delta 448), pack-reused 96671        
2019-09-29T13:03:46.8096377Z 
2019-09-29T13:03:46.8097502Z                                                                                 
2019-09-29T13:03:46.8099271Z Receiving objects: 100% (98154/98154), 140.24 MiB | 35.06 MiB/s
2019-09-29T13:03:46.8100178Z 
2019-09-29T13:03:46.8101120Z                                                                                 
2019-09-29T13:03:46.8102099Z Receiving objects: 100% (98154/98154), 150.44 MiB | 35.77 MiB/s, done.
2019-09-29T13:03:46.8177656Z 
2019-09-29T13:03:46.8179286Z                                                                                 
2019-09-29T13:03:46.8247809Z Resolving deltas:   0% (0/50478)
2019-09-29T13:03:46.8249644Z 
2019-09-29T13:03:46.8250044Z                                                                                 
2019-09-29T13:03:46.8275539Z Resolving deltas:   1% (606/50478)
2019-09-29T13:03:46.8275687Z 
2019-09-29T13:03:46.8275943Z                                                                                 

.
.
.                                                                               
2019-09-29T13:03:47.8181717Z Resolving deltas:  99% (49974/50478)
2019-09-29T13:03:47.8245769Z 
2019-09-29T13:03:47.8246196Z                                                                                 
2019-09-29T13:03:47.8246479Z Resolving deltas: 100% (50478/50478)
2019-09-29T13:03:47.8246612Z 
2019-09-29T13:03:47.8247201Z                                                                                 
2019-09-29T13:03:47.8247576Z Resolving deltas: 100% (50478/50478), done.
2019-09-29T13:03:51.8552178Z From https://github.com/***/***-Android
2019-09-29T13:03:51.8556296Z  * [new branch]      refactor -&gt; origin/refactor
.
.
.
2019-09-29T13:03:51.9186875Z  * [new tag]         v0.63.0                -&gt; v0.63.0
.
.
.
2019-09-29T13:03:51.9858238Z ##[command]git checkout --progress --force 4e746ed66b5dc33310ebdc6eb12b945e385d9c4a
2019-09-29T13:03:52.5800307Z Note: switching to '4e746ed66b5dc33310ebdc6eb12b945e385d9c4a'.
2019-09-29T13:03:52.5801297Z 
2019-09-29T13:03:52.5802472Z You are in 'detached HEAD' state. You can look around, make experimental
2019-09-29T13:03:52.5803107Z changes and commit them, and you can discard any commits you make in this
2019-09-29T13:03:52.5803598Z state without impacting any branches by switching back to a branch.
2019-09-29T13:03:52.5803933Z 
2019-09-29T13:03:52.5804367Z If you want to create a new branch to retain commits you create, you may
2019-09-29T13:03:52.5805414Z do so (now or later) by using -c with the switch command. Example:
2019-09-29T13:03:52.5806068Z 
2019-09-29T13:03:52.5806726Z   git switch -c &lt;new-branch-name&gt;
2019-09-29T13:03:52.5807094Z 
2019-09-29T13:03:52.5807511Z Or undo this operation with:
2019-09-29T13:03:52.5807830Z 
2019-09-29T13:03:52.5809354Z   git switch -
2019-09-29T13:03:52.5809855Z 
2019-09-29T13:03:52.5810364Z Turn off this advice by setting config variable advice.detachedHead to false
2019-09-29T13:03:52.5810742Z 
2019-09-29T13:03:52.5811258Z HEAD is now at 4e746ed66 submodules 99
2019-09-29T13:03:52.7096856Z ##[command]git submodule sync
2019-09-29T13:03:52.7930660Z ##[command]git -c http.https://github.com.extraheader=""AUTHORIZATION: basic ***"" submodule update --init --force
2019-09-29T13:03:52.8223899Z Submodule 'proto' (git@github.***/***-Protobuf.git) registered for path 'c/device/proto/src/main/proto'
2019-09-29T13:03:52.8229867Z Submodule 'json' (git@github.***/json.git) registered for path 'c/n/a/json'
2019-09-29T13:03:52.8234606Z Submodule 'v' (git@github.com:***/V.git) registered for path 'c/n/a/v'
2019-09-29T13:03:52.8239790Z Submodule 'd' (git@github.com:***/D.git) registered for path 'c/n/d/d'
2019-09-29T13:03:52.8383255Z Cloning into '/home/runner/work/***-Android/***-Android/c/device/proto/src/main/proto'...
2019-09-29T13:03:53.0073411Z Host key verification failed.
2019-09-29T13:03:53.0191036Z ##[error]fatal: Could not read from remote repository.
2019-09-29T13:03:53.0204269Z 
2019-09-29T13:03:53.0204574Z Please make sure you have the correct access rights
2019-09-29T13:03:53.0204816Z and the repository exists.
2019-09-29T13:03:53.0207224Z ##[error]fatal: clone of 'git@github.com:***/***-Protobuf.git' into submodule path '/home/runner/work/***-Android/***-Android/c/device/proto/src/main/proto' failed
2019-09-29T13:03:53.0208627Z Failed to clone 'c/device/proto/src/main/proto'. Retry scheduled
2019-09-29T13:03:53.0210196Z Cloning into '/home/runner/work/***-Android/***-Android/c/n/a/json'...
2019-09-29T13:03:53.0895134Z Host key verification failed.
2019-09-29T13:03:53.0901281Z ##[error]fatal: Could not read from remote repository.
2019-09-29T13:03:53.0901797Z 
2019-09-29T13:03:53.0902198Z Please make sure you have the correct access rights
2019-09-29T13:03:53.0902587Z and the repository exists.
2019-09-29T13:03:53.0910343Z ##[error]fatal: clone of 'git@github.com:***/json.git' into submodule path '/home/runner/work/***-Android/***-Android/c/n/a/json' failed
2019-09-29T13:03:53.0911390Z Failed to clone 'c/n/a/json'. Retry scheduled
2019-09-29T13:03:53.0938254Z Cloning into '/home/runner/work/***-Android/***-Android/c/n/a/v'...
2019-09-29T13:03:53.1691373Z Host key verification failed.
2019-09-29T13:03:53.1698028Z ##[error]fatal: Could not read from remote repository.
2019-09-29T13:03:53.1702098Z 
2019-09-29T13:03:53.1703485Z Please make sure you have the correct access rights
2019-09-29T13:03:53.1704308Z and the repository exists.
2019-09-29T13:03:53.1710654Z ##[error]fatal: clone of 'git@github.com:***/V.git' into submodule path '/home/runner/work/***-Android/***-Android/c/n/a/v' failed
2019-09-29T13:03:53.1713573Z Failed to clone 'c/n/a/v'. Retry scheduled
2019-09-29T13:03:53.1741011Z Cloning into '/home/runner/work/***-Android/***-Android/c/n/d/d'...
2019-09-29T13:03:53.2511414Z Host key verification failed.
2019-09-29T13:03:53.2514791Z ##[error]fatal: Could not read from remote repository.
2019-09-29T13:03:53.2526450Z 
2019-09-29T13:03:53.2526930Z Please make sure you have the correct access rights
2019-09-29T13:03:53.2527255Z and the repository exists.
2019-09-29T13:03:53.2528958Z ##[error]fatal: clone of 'git@github.com:***/D.git' into submodule path '/home/runner/work/***-Android/***-Android/c/n/d/d' failed
2019-09-29T13:03:53.2530699Z Failed to clone 'c/n/d/d'. Retry scheduled
2019-09-29T13:03:53.2558956Z Cloning into '/home/runner/work/***-Android/***-Android/c/device/proto/src/main/proto'...
2019-09-29T13:03:53.3373002Z Host key verification failed.
2019-09-29T13:03:53.3378381Z ##[error]fatal: Could not read from remote repository.
2019-09-29T13:03:53.3380657Z 
2019-09-29T13:03:53.3381349Z Please make sure you have the correct access rights
2019-09-29T13:03:53.3381662Z and the repository exists.
2019-09-29T13:03:53.3394503Z ##[error]fatal: clone of 'git@github.com:***/***-Protobuf.git' into submodule path '/home/runner/work/***-Android/***-Android/c/device/proto/src/main/proto' failed
2019-09-29T13:03:53.3400724Z Failed to clone 'c/device/proto/src/main/proto' a second time, aborting
2019-09-29T13:03:53.3487425Z Removed matchers: 'checkout-git'
2019-09-29T13:03:53.3487829Z ##[remove-matcher owner=checkout-git]
2019-09-29T13:03:53.3509685Z ##[error]Git submodule update failed with exit code: 1
2019-09-29T13:03:53.3905892Z ##[error]Exit code 1 returned from process: file name '/home/runner/runners/2.158.0/bin/Runner.PluginHost', arguments 'action ""GitHub.Runner.Plugins.Repository.CheckoutTask, Runner.Plugins""'.
2019-09-29T13:03:53.4082152Z Cleaning up orphan processes
</code></pre>
","2","2359762","0","0"
"35108662","3437862","2016-01-30 23:51:30","2","1089","<git><git-submodules>","How do I add a git submodule in a non empty directory?","<p>I am trying to add a submodule in a non empty folder inside a repo with:</p>

<pre><code>git submodule add repo_path.git non_empty_folder
</code></pre>

<p>I get the following message:</p>

<pre><code>'non_empty_folder' already exists and is not a valid git repo
</code></pre>

<p>Is it possible to force the creation of the submodule? Thanks!</p>
","1","3437862","",""
"1280537","61342","2009-08-14 22:39:49","1","999","<git><git-submodules><subproject>","Another use-case of splitting a git project into several subprojects","<p>I have split my project into several subprojects
But all have a common part (directory with cmake scripts).
Moreover some subproject need to include other subprojects (libraries).</p>

<p>I would prefer to use git submodules but as far as I know they have a limitation
that a submodule needs to be in a separate directory in the repo (does it?) what ties my hands a little as I don't want to duplicate any source or cmake scripts in a superproject or any of subprojects.</p>

<p>How do you propose to solve it ?</p>
","0","61342","",""
"58291315","2298137","2019-10-08 17:30:31","6","4732","<linux><git><foreach><git-submodules>","using ""git submodule foreach"" can you skip a list of submodules?","<p>lets say I have 10 submoules:</p>

<pre><code>module/1
module/2
module/3
module/4
module/5
module/6
module/7
module/8
module/9
module/10
</code></pre>

<p>where <code>module/</code> is the top-level repo.</p>

<p>I want to do <code>git submodule foreach 'git status'</code>, but I don't want to do it for submodules 4, 6 and 7.</p>

<p>Is there a way to do that, somthing like :</p>

<p><code>git submodule foreach --exclude=""4 6 7"" 'git status'</code></p>

<p>I tried doing it inside the command block using </p>

<pre><code>git submodule foreach '
    if [[ $list_of_ignores =~ *""$displayname""* ]] ; then echo ignore; fi
'
</code></pre>

<p><strong>update</strong> - removed <code>--exclude=""4 6 7""</code> that was accidently in there</p>

<p>But I get errors saying <code>eval [[: not found</code> - I am assuming this is because it is using /bin/sh instead of /bin/bash? - not sure...</p>
","1","2298137","0","0"
"20526320","417629","2013-12-11 17:46:50","1","182","<git><wordpress><wordpress-theming><git-submodules>","How can I manage complex WordPress setups in git?","<p>I'm struggling to come up with a good workflow for using git on my complex WordPress projects. I'm wondering if people can recommend a workflow that tends to work well in that situation.</p>

<p>Here's the situation I have, and the problems I've run into.</p>

<p>The situation: WordPress installation, with customized configuration files for WordPress and for the server, two or more WordPress themes from multiple developers and 20-25 plugins from multiple developers.</p>

<p>Problems:</p>

<ul>
<li>I thought about just creating repos for individual plugins and themes, since WordPress handles its own updates. That would be a lot easier to manage, but I still need to track the project as a whole (which plugins are used, WordPress config files, server config files, Google verification files, favicons and other resources that are not part of a plugin or theme), and I want an easy way to clone or deploy the whole project onto a new server.</li>
<li>Not all plugins have a public git repo, so I either have to add that code to my own repo or ignore the directories for those plugins.</li>
</ul>

<p>If I ignore plugins without a repo that still the problem of that code not being in version control. That makes it difficult to clone, deploy or track my own changes to it.</p>

<p><strong>What is the best workflow for using git with large scale WordPress projects?</strong></p>
","0","417629","0","0"
"35151797","1272105","2016-02-02 11:08:51","0","150","<git><commit><git-submodules><git-commit>","Hot to push commit id of a specific submodule to main git repository?","<p>I have a repository A, containing two module B and C. When i commit and push from A, B and C commit id are pushed to the main repo. This can be done via a </p>

<pre><code>git add -A
git commit -m 'great commit!'
git push origin master
</code></pre>

<p>Now, I need to push to the main repo the commit id of B, but <em>not</em> that of C. If it was a normal file, I would do</p>

<pre><code>git add specific_file.ext
git commit -m 'another great commit!'
git push origin master
</code></pre>

<p>but in case of a submodule, how to reach the same result?</p>
","0","1272105","",""
"58486811","695498","2019-10-21 12:57:27","0","424","<git><git-submodules>","git submodule in submodule with shared dependencies, in a C# project","<p>I have this following scenario:</p>

<ul>
<li>a core lib, let's call it A.</li>
<li>a features lib, we'll call B. B depends on A.</li>
<li>a tool, called C, depending on A and B.</li>
</ul>

<p>A is shared across many projects. B is shared across 3-4.</p>

<p>So, the layout is as follows:</p>

<ul>
<li>Project C has a submodule with A inside.</li>
<li>Project C has a submodule with B inside and, in turn, B has a submodule with A inside.</li>
</ul>

<p>This works well in git, although it fails quickly on the project side.</p>

<p>The first implication is that C and B could use different revisions of A, but that's just up to us to not mess that up.</p>

<p>The main issue is that it is not be possible to have a project including 'A' twice in the IDE.</p>

<p>Is it possible to have B as a submodule, but B wouldn't its own submodule? so we woudln't have two copies of A?</p>

<p>Additionally, I'm sure there are others with the same problem. Is there a common / accepted way to deal with that issue?</p>
","2","695498","",""
"20655073","1248175","2013-12-18 10:06:32","102","62983","<git><git-submodules><git-commit>","How to see which commit a git submodule points at","<p>As far as I understand, if you add a submodule in git, then the main repo contains a pointer to a certain commit of the submodule.</p>
<p>Is there any way to see to which commit the main repo points at for a specific submodule, without checking out the code of the submodule?</p>
","0","1248175","0","0"
"39765663","279147","2016-09-29 08:51:28","35","23780","<git><git-submodules>","git submodule init does absolutely nothing","<p>I have a strange problem with ""git submodule init""</p>

<p>When I added the submodules using ""git submodule add url location"" it cloned the repository just fine and everything was ok.</p>

<p>When I pushed all my changes back to the parent repository, added the .gitmodules files, etc and cloned the repository back, I tried to initialise all the submodules using ""git submodule init"" </p>

<p>And nothing happens :( Literally nothing, no output, no extra files, it does not even attempt to do anything actually.</p>

<p>So I am wondering, what did I do wrong?</p>

<p>.gitmodules:</p>

<pre><code>bash$ cat .gitmodules
[submodule ""projects/subprojectA""]
    path = projects/subprojectA
    url = ssh://user@bitbucket.company.com/test/projectA.git

[submodule ""projects/subprojectB""]
    path = projects/subprojectB
    url = ssh://user@bitbucket.company.com/test/projectB.git
</code></pre>
","0","279147","0","0"
"1811730","176611","2009-11-28 05:57:47","331","155244","<git><git-submodules><multiple-repositories>","How do I work with a git repository within another repository?","<p>I have a Git media repository where I'm keeping all of my JavaScript and CSS master files and scripts that I'll use on various projects. </p>

<p>If I create a new project that's in its own Git repository, how do I use JavaScript files from my media repository in my new project in a way that makes it so I don't have to update both copies of the script when I make changes? </p>
","2","176611","0","0"
"58727951","10593406","2019-11-06 10:25:01","7","1950","<python><dependencies><git-submodules><python-poetry>","Manage dependencies of git submodules with poetry","<p>We have a repository <em>app-lib</em> that is used as sub-module in 4 other repos and in each I have to add all dependencies for the sub-module.
So if I add/remove a dependency in <em>app-lib</em> I have to adjust all other repositories. 
I there a way to tell Poetry to install the root repo dependencies and the ones in the sub-module?</p>

<p>The <code>my-package = { path = ""../my-package/dist/my-package-0.1.0.tar.gz"" }</code> parameter seems only to work for files. And I don't know if it's good design to store all wheels in <em>app-lib</em>.</p>

<p>I kind of want to merge the root toml file dependencies and the sub-module toml file dependencies and then install them.</p>

<p>Thanks</p>
","0","10593406","0","0"
"20860607","433253","2013-12-31 16:51:56","1","177","<git><git-submodules><git-subtree>","Possible workflow with git submodules","<p>I would like to use swagger (<a href=""https://github.com/wordnik/swagger-ui"" rel=""nofollow"">https://github.com/wordnik/swagger-ui</a>) as part of my project. Using swagger requires editing one file. Can I add a submodule and make edits to certain files, commits and push to my public repo instead of upstream?</p>

<p>I used to use subtrees for that but out of a sudden subtrees stopped to work (another issue, identical to <a href=""https://jira.atlassian.com/browse/SRCTREE-2000"" rel=""nofollow"">https://jira.atlassian.com/browse/SRCTREE-2000</a>)</p>
","0","433253","0","0"
"1899792","84760","2009-12-14 09:05:38","92","21845","<git><git-submodules>","Why is git submodule not updated automatically on git checkout?","<p>When switching branches with git checkout I would assume that most of the time you would want to update your submodules.</p>

<ul>
<li>In what situation do you <strong>not</strong> want to update submodules after switching?</li>
<li>What would break if this was done automatically by git checkout?</li>
</ul>

<p>Updated with example:</p>

<ul>
<li>Branch A has submodule S at 3852f1</li>
<li>Branch B has submodule S at fd72d7</li>
</ul>

<p>On branch A, git checkout B will result in a working copy of branch B with submodule S at 3852f1 (with a modified S). git submodule update will checkout S at fd72d7.</p>
","2","84760","0","0"
"20867487","2760547","2014-01-01 10:04:35","0","694","<wordpress><git><git-submodules>","how to install roots theme and wordpress as git submodule","<p>I am wordpress developer and want to use git in wordpress. I also want version control in my wordpress so that everything in the projects gets updated frequently.and also how to install wordpress as git submodule?
thanks,
suku </p>
","1","2760547","",""
"39894103","890815","2016-10-06 10:54:16","7","1712","<git><git-submodules>","Can I override the URL of a nested git submodule without forking?","<p>I have a Git repository which uses a submodule for a 3rd party library. This 3rd party library also uses submodules.</p>

<p>I actually found a very obscure bug in one of the 3rd party submodules which is literally a 2-line fix to get it working for my situation.</p>

<p>How can I keep this change around in my actual Git repository, without having to fork the 3rd party library, update the submodule URL and point that to another fork so I can commit and fix the bug? Can I override the 3rd party submodules URLs from my Git repository?</p>

<p>If it's not possible I'll probably end up making a pre-build event to copy my version of the file to the right location, but that feels extremely hacky... But I don't feel like having to maintain two forks for a 3rd party library that overal works just fine either.</p>

<p>I'm aware I could make a pull request to get the bug fixed, but lets assume the author would not be interested in having a fix that only fixes something for my particular case, which would not be unreasonable - yet, I still want this fix in my repository.</p>
","0","890815","0","0"
"1992018","51923","2010-01-02 16:17:53","13","18411","<git-submodules>","git submodule update needed only initially?","<p>I'm getting a hang of git submodule (wishful thinking?) and I'm coming up with more specific questions, which is a good sign...  </p>

<p>I've tried to find the which revision of the submodule the superproject refers to, in <code>.gitmodules</code> and <code>.git/config</code>, but nothing is mentioned there...<br>
The scenario is that I'm changing submodules in their root locations (from which they're imported), and then pulling them in where they're ""submoduled""...<br>
Beyond committing from the superproject to incorporate those changes into the superproject repo, do I also need to do ""<code>git update</code>"" to register the new pulled in submodule commits?  </p>

<p>Basically the question is:</p>

<blockquote>
  <p>do I need to ""<code>git submodule update</code>"" only when I first clone the superproject, or after every pulling of the submodule (from its own repo)?  </p>
</blockquote>

<p>Thank you</p>
","1","51923","0","0"
"20940993","4196578","2014-01-06 00:20:43","4","849","<git><branch><git-submodules>","how to keep git submodule on-branch status after cloning superproject?","<p>I am testing the new <code>git submodule add -b</code> feature (after git 1.8.2), which creates sub-module that allegedly tracks a branch rather than a commit. I am using <code>git version 1.8.4.msysgit.0</code>. The branch-tracking feature for submodules seems to work fine in the original super-project but fails as soon as the super-project is cloned. To be more specific:</p>

<p>What I did is typical, and is roughly as follows,</p>

<pre><code>1. create a git repo (called common): ...
2. create a main project (called main), which uses common as a library/submodule.
 mkdir main &amp;&amp; cd main
 git init
 git submodule add -b master url_to_common.git
 git commit -m ""initial commit""
 cd common
 git status
</code></pre>

<p>As advertised, the added submodule tracks the master branch of the submodule repo. And I got:</p>

<pre><code># On branch master
nothing to commit, working directory clean
</code></pre>

<p>In addition, if I do <code>git pull</code> or <code>git push</code>, I get</p>

<pre><code>Already up-to-date.
Everything up-to-date
</code></pre>

<p>, respectively.</p>

<p>However, if I clone the <code>main</code> project in any way, the <code>common</code> submodule in the cloned project loses the ""On branch"" status. And I couldn't <code>git pull</code> or <code>git push</code> inside the <code>common</code> folder as in the prototype <code>main</code> project. Of course, I can add <code>origin master</code> to make pull and push work for <code>common</code> in the cloned project, but this seems to defeat the purpose of having a tracking submodule (submodule add -b).</p>

<p>The commands I used to clone and check submodules were:</p>

<pre><code>cd main
git clone . ../main2 --recursive
cd ../main2/common
git status
</code></pre>

<p>I got:</p>

<pre><code># HEAD detached at 0259d75
nothing to commit, working directory clean
</code></pre>

<p>I also tried <code>git clone . ../main3 --recurse-submodules</code>, as well as,</p>

<pre><code>git clone . ../main4.git --bare
git clone url_to_main4.git --recursive
</code></pre>

<p>the same thing happens to <code>main3</code> and <code>main4</code>. </p>

<p>In sum, I created a super-project with a submodule tracking its master branch. The branch-tracking capability is lost as soon as I tried to clone it and work on it elsewhere. It seems to me that the only way to keep branch-tracking submodules is to compress the original <code>main</code> project and copy it around. Did I missing something in this case, or is copying the original project around the best I can have?</p>

<p>My question is, how to keep the branch-tracking capability after cloning the super-project. I am particularly interested in making <code>main4.git</code> work because it involves a bare clone on a remote server.</p>

<p>Note: specifying a branch after the branch is lost (e.g. <a href=""https://stackoverflow.com/questions/1777854/git-submodules-specify-a-branch-tag"">Git submodules: Specify a branch/tag</a>) is not what I am looking for, because the info given in <code>git submodule add -b</code> is still lost, and we are back to square one. We might as well delete the submodule and add it again.</p>
","0","4196578","0","0"
"21012280","274434","2014-01-09 05:31:10","2","1718","<android><google-play><google-play-services><git-submodules>","How to install the Google Play Services library from a git submodule","<p>Ok I know this question has been asked before. But the usual solution is to mark the ""copy into the workspace"" checkbox. (Which I believe is not even an option for me because even when I do that I get the same problem).</p>

<p><img src=""https://i.stack.imgur.com/udni9.png"" alt=""I keep getting the red cross""></p>

<p>But that is not really a good solution to me, as I added the library as a submodule in my git repository and usually switch computers while developing (work and home). I would like the project to make a reference to it as a library project INSIDE the main project.</p>

<p>I cannot believe this can't be done. But I've tried lots of combinations and I'm almost giving up.</p>

<p>The funny thing is that as soon as I reference it as a project in the ""Android"" section of the Properties panel, it shows a green check mark. But as soon as I close the panel and then open it again, I get the red cross.. WTF!?</p>
","1","274434","",""
"21017573","261952","2014-01-09 10:26:36","6","4062","<xcode><git><git-submodules><osx-server><xcode-bots>","Xcode bot: git submodules not initialized","<p>I'm trying to set up an Xcode bot with OSX server.
After configuring the git repository and creating a bot, I run integrate.
It fails because the repository is checked out only partially. More precisely: Of the 6 submodules configured, only 3 are initialized and checked out.</p>

<pre><code>didi@mac:/Library/Server/Xcode/Data/BotRuns/Cache/c5fda8f4-4d25-4d25-c18a-eb0b16a06692/source$ git submodule status
+c6e8420aec4147641fb1ca12d9f1d31bdd804e77 libs/asi-http-request (v1.7-320-gc6e8420)
-ae64a38766b42f236bb94f0e661cddb829f9ac43 libs/kraken
-7da02b323636bbaa0bbbf5b4eb229fcc07b1e14a libs/route-me
 152f9ee5576e710705a49032253d7d5af5366f9c libs/routing (152f9ee)
 347aaf74fe0c6388785095efdbf6397851514b7f libs/rtlabel (1.0-32-g347aaf7)
-562cf6b1c879f03546f5184e012cea15c4f159db libs/skmaps
</code></pre>

<p>(- means not initialized)</p>

<p>Looking at the bot log, it seems to just ignore the missing submodules in the submodule initialize part:</p>

<pre><code>...
Checking connectivity... done
Submodule 'libs/asi-http-request' (https://github.com/BikeCityGuide/asi-http-request.git) registered for path 'libs/asi-http-request'
Submodule 'libs/routing' (ssh://mac_ci@rooty.bikecityguide.org/var/repos/librouting.git) registered for path 'libs/routing'
Submodule 'libs/rtlabel' (https://github.com/BikeCityGuide/RTLabel.git) registered for path 'libs/rtlabel'
Cloning into 'libs/asi-http-request'...
...
</code></pre>

<p>No error message here or anywhere else. No single mention of e.g. ""kraken"" (name of a missing submodule) anywhere in the logs.</p>

<p>When checking out manually (clone, submodule init, submodule update), all submodules are initialized.</p>

<p>.gitmodules looks like this:</p>

<pre><code>$ cat .gitmodules 
[submodule ""libs/asi-http-request""]
    path = libs/asi-http-request
    url = https://github.com/BikeCityGuide/asi-http-request.git
[submodule ""libs/rtlabel""]
    path = libs/rtlabel
    url = https://github.com/BikeCityGuide/RTLabel.git
[submodule ""libs/routing""]
    path = libs/routing
    url = ../librouting.git
[submodule ""libs/kraken""]
    path = libs/kraken
    url = ../kraken_ios.git
[submodule ""libs/route-me""]
    path = libs/route-me
    url = ../route-me.git
[submodule ""libs/skmaps""]
    path = libs/skmaps
    url = ../skmaps.git
</code></pre>

<p>The base repository and the 4 submodule repositories referenced with relative URL all need ssh authentication. The user set up in OSX server has access to all of them.
The log of the bot contains no trace of trying to pull the missing submodules.</p>

<p>I can manually fix the local repository, but I'd like not to have the same issue again with new projects and new submodules added.</p>

<p>git version 1.8.4.2</p>

<p>I'm out of ideas.</p>
","4","261952","0","0"
"58877872","12014635","2019-11-15 13:16:18","0","251","<ansible><git-submodules>","Is there a DRY way to ""git submodule add git@url"" with ansible?","<p>Straight forward question. MY playbook creates a new project on gitlab and then It clones it on all the host. Now I want for one host to enter the project and create a .gitmodules files with ""git submodule add git@some-url.git"" only once. </p>

<p>the git module for ansible only has track_submodules parameter but that updates the submodule which will be useful later. And I wouldn't like using the shell module in this case.</p>

<p>Essentially I just want an automatic ansible way to create a new project with a specific submodule.</p>
","0","12014635","",""
"18755933","249933","2013-09-12 05:22:58","16","12462","<git><git-submodules>","Create a git submodule from a specific repo hash or tag","<p>I have a project which depends on Twitter bootstrap 2.x, however, when I add bootstrap as a submodule using the following:</p>
<pre class=""lang-bash prettyprint-override""><code>git submodule add https://github.com/twbs/bootstrap.git
</code></pre>
<p>This brings in the latest version of bootstrap.</p>
<p>I would like to create a submodule for a specific tag, but haven't found a way to do that. Is this possible?</p>
","0","249933","0","0"
"21027495","1049112","2014-01-09 17:48:20","6","707","<git><git-submodules>","Clone git repository with --recursive and --bare","<p>In order to clone a repository and all of its submodules I know you can do this:</p>

<pre><code>$ git clone --recursive &lt;url&gt;
</code></pre>

<p>You can also clone a repository to a bare repository using this:</p>

<pre><code>$ git clone --bare &lt;url&gt;
</code></pre>

<p>I want to recursively clone to bare repositories, so I tried this:</p>

<pre><code>$ git clone --bare --recursive git@github.com:boostorg/boost.git
</code></pre>

<p>Which only clones the first repository (none of the submodules).</p>

<p>How can I recursively clone to bare repositories?</p>
","1","1049112","",""
"40198399","1836540","2016-10-23 00:24:55","3","1264","<git><git-submodules><rebase><git-filter-branch>","How to rebase git submodule preserving references to submodule commits from git repository containing the submodule?","<p>(Currently I'm fixing my old repositories before publishing.)</p>

<p>I already know how to <a href=""https://stackoverflow.com/a/750182/1836540"">rewrite commit author e-mail and name in git history</a>.</p>

<p>I have a git project with submodules. I want to rewrite history of these submodules, but because I fast-forward these submodules during development, I want to modify links from main git repo pointing to some of these submodules commits to links pointing to new commits after submodule rebase. I.e. I need to rebase git submodule in conjunction with rebasing git repository containing this submodule. (Sorry, for too long text, I don't know how to describe that shorter.)</p>

<p>How to rewrite git submodule history in sync with git repository history containing the submodule?</p>
","0","1836540","0","0"
"18802156","313115","2013-09-14 13:16:39","7","1562","<git><git-submodules><git-subtree>","Split a git repository to work on two projects at the same time","<p>I am developing a <strong>framework</strong> to use on my projects; however, the developing of a framework can go so far without context: i.e. I need to start using it in real-life projects and see specifically what <strong>I need to add, fix, or adjust</strong> (maybe things that worked on a testing environment don't work for real-life situation, or some things don't make sense, or I want to add features).</p>

<p>First of all, since <strong>Framework</strong> is obviously a work in progress, I need to be sure that it is kept updated within <strong>Real-life project</strong> as a different part of it, so I can go back to Framework, edit it, commit, go back to Real-life project update Framework within, go on working with the project.</p>

<p>Second, I would actually like a way to achieve this without doing the project switching. What I mean is that I would like to be able to edit <strong>Framework</strong> within <strong>Real-life project</strong> and push those commits to the <strong>Framework</strong> repository.</p>

<p>Now, I know that the tools to achieve this are most likely <code>git submodule</code> and <code>git subtree</code>, but both of them are pretty confusing. Submodule, especially, seems it is more oriented towards a <em>read-only</em> approach (e.g. keep your libraries always updated): this would satisfy my first requirement, but not the second.</p>

<p>Any pointers on how to achieve this with Git and how the workflow would look like?</p>
","3","313115","0","0"
"40297258","2392358","2016-10-28 02:44:52","0","44","<git><git-submodules>","git submodules - status no matching/tracking the remote","<p>This is a great article on <a href=""https://chrisjean.com/git-submodules-adding-using-removing-and-updating/"" rel=""nofollow noreferrer"">submodules</a> but I have a question I might be able to get answered here.</p>

<p>I have my repo/submodule here:  home/submodule</p>

<p>and then I have it included as a submodule here: home/core/submodule </p>

<p>but if I go into home/submodule and make some changes, then to a git add, git commit, git push that is all fine. </p>

<p>but then if I go into home/core/submodule and do a git status it will say it is up to date, even though it is/should be  1  commit behind. </p>

<p>If I then stay in home/core/submodule and do a git pull, it will pull down the changes, even though it does not think there is any, and it will then be up to date with the remote.</p>

<p>Is there something I am doing wrong, or am I mis-using submodules?</p>

<p>related q <a href=""https://stackoverflow.com/questions/19986075/git-submodule-to-track-remote-branch"">Git submodule to track remote branch</a> and <a href=""https://stackoverflow.com/questions/1596822/git-submodules-workflow"">Git submodules workflow</a> 
<br><strong>EDIT</strong> - good resource here <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow noreferrer"">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a> - particularily around <code>git diff --submodule</code> to show the new commits in the submodule. </p>
","2","2392358","",""
"18810904","172637","2013-09-15 09:37:27","16","4750","<git><grep><git-submodules>","How to git grep the main repository and all its submodules?","<p>I found this at a blog to grep project and submodules:</p>

<pre><code>[alias]
  sgrep = ""!f() { git grep \""$1\""; git submodule foreach \""git grep '$1'; true\"" | grep -B 1 \""$1\""; }; f""
</code></pre>

<p>I updated my <code>~/.gitconfig</code> to include it, but when I use the alias, it says:</p>

<p><code>fatal: bad config file line 9 in /home/myname/.gitconfig</code></p>

<p>What am I doing wrong?</p>
","0","172637","0","0"
"21381856","1332000","2014-01-27 13:12:18","0","70","<git><git-submodules>","git submodule - should not have been updated. How to back down","<p>When using ""git submodule"" I get myself into a new problem
I have .gitmodules file within my git project ""mainproject"" </p>

<pre><code>[submodule ""subsystem1""]
  path = subsystem11
  url = /mnt/gitrepos/subsystem1.git/
</code></pre>

<p>Starting in my main project I did</p>

<pre><code>$ cd subsystem1
$ git pull origin master
</code></pre>

<p>Lets assume that something is really wrong now in ""submodule1"". 
I got many updates in, that I did not like to have (right now).</p>

<pre><code>$ cd .. #back in ""mainproject""
$ git status  
# On branch master
# Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   subsystem1 (new commits)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>How can I revert to the version of subsystem1 that I had before pulling?   </p>
","0","1332000","",""
"18823942","807397","2013-09-16 08:52:37","5","2743","<git><github><translation><git-submodules><git-subtree>","Grant access to a single file on github","<p>I'm just searching for a possibility to grant access to another developer to one single file in my git-repository. Is there any way except of submodules/subtrees? </p>

<p>It's just the localization-file which should be translated by an other person. </p>

<p>Looking forward for your responses!</p>

<p>Thanks!</p>

<p>Sebastian</p>
","0","807397","",""
"59211281","8091812","2019-12-06 10:25:53","0","1228","<git><git-submodules>","git - submodule - checkout banch instead of hashes","<p>i have a git repo with multiple submodules.</p>

<p>when checking out, i usually do as follows</p>

<pre><code>git clone URL # without --recursive!
</code></pre>

<p>so i have a single main repository, checked out in master</p>

<pre><code>git checkout mybranchname_main_repo
</code></pre>

<p>now i have a single main repository checked out in its branch</p>

<pre><code>git submodule update --init # now i checkout submodules because now they point to their supposed branch hash and not the master
</code></pre>

<p>now have the main repository in its branch, with its submodules (repos) checkout out to the last commited hash which is typically also in a development branch and not master</p>

<p>the issue im having is that all submodules checkout the last commited hash value and not the branch/head.</p>

<p>is there a command that i can add an additional command making the submodules checkout the branch from their hash value in HEAD?</p>

<p>something like: (warning, this is pseudo code)</p>

<p>git submodule foreach checkout HEAD</p>
","3","8091812","",""
"18836802","2743565","2013-09-16 20:33:53","0","350","<git><version-control><git-submodules>","git submodules and branches","<p>So my structure looks like this for a repo:</p>

<pre><code>   --project - master
   --project - beta
   --project - dev1.0
   --project - dev1.1
   --project - dev1.2
</code></pre>

<p>Currently I do <code>git branch</code> and I am on <code>dev1.2</code> which is fine, I want to add a project reference starting at 1.2 and then ""merge"" it all the way back to master (or the other way around, which ever is better) the problem is, <a href=""http://git-scm.com/book/en/Git-Tools-Submodules"" rel=""nofollow"">according to this book</a>, that I don't think I understand this enough.</p>

<p>Could I just do, on the dev1.2 branch:</p>

<p><code>git add submodule --link-- name</code> then do <code>git commit -a -m ""some message""</code> and <code>git checkout dev1.1</code> then <code>git cherry-pick #commit where I added the reference project</code> and finally <code>git submodule udpate</code>??</p>

<p>This would essentially say: <em>on dev 1.2 add a new reference, commit it - adding the reference - switch to 1.1 where there is no reference, cherry pick the commit to add the reference and then update the submodule to now have the reference on both 1.2 and 1.1</em> .. </p>
","0","2743565","",""
"35312274","1141149","2016-02-10 10:12:51","17","31225","<git><jenkins><bitbucket><git-submodules>","Jenkins git submodule update fails","<p>I have a git repo which has one submodule. Both belong to a team on BitBucket. My jenkins machine is a AWS windows server with the git plugin. I am using SSH keys for authentication.
I have three jenkins jobs. One clones the main repo. This is successful. One clones the second repo on its own (the repo which will be used as a submodule). This is also successful.
In my third build job I tell jenkins to recursively update the submodules. This fails and says public-key error. How can this be the case if I can clone the repo on its own?</p>

<p>Console output below:</p>

<pre><code>Started by user anonymous
Building on master in workspace C:\Program Files (x86)\Jenkins\jobs\MainRepo\workspace
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository git@bitbucket.org:team/mainrepo.git
 &gt; git.exe init C:\Program Files (x86)\Jenkins\jobs\mainrepo\workspace # timeout=10
Fetching upstream changes from git@bitbucket.org:team/mainrepo.git
 &gt; git.exe --version # timeout=10
using GIT_SSH to set credentials 
 &gt; git.exe -c core.askpass=true fetch --tags --progress git@bitbucket.org:team/mainrepo.git +refs/heads/*:refs/remotes/origin/*
 &gt; git.exe config remote.origin.url git@bitbucket.org:team/mainrepo.git # timeout=10
 &gt; git.exe config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git.exe config remote.origin.url git@bitbucket.org:team/mainrepo.git # timeout=10
Fetching upstream changes from git@bitbucket.org:team/mainrepo.git
using GIT_SSH to set credentials 
 &gt; git.exe -c core.askpass=true fetch --tags --progress git@bitbucket.org:team/mainrepo.git +refs/heads/*:refs/remotes/origin/*
 &gt; git.exe rev-parse ""refs/remotes/origin/master^{commit}"" # timeout=10
 &gt; git.exe rev-parse ""refs/remotes/origin/origin/master^{commit}"" # timeout=10
Checking out Revision 6b3f6535c45e79ee88f4918d464edead48d83369 (refs/remotes/origin/master)
 &gt; git.exe config core.sparsecheckout # timeout=10
 &gt; git.exe checkout -f 6b3f6535c45e79ee88f4918d464edead48d83369
 &gt; git.exe rev-list 6b3f6535c45e79ee88f4918d464edead48d83369 # timeout=10
 &gt; git.exe remote # timeout=10
 &gt; git.exe submodule init # timeout=10
 &gt; git.exe submodule sync # timeout=10
 &gt; git.exe config --get remote.origin.url # timeout=10
 &gt; git.exe submodule update --init --recursive
FATAL: Command ""git.exe submodule update --init --recursive"" returned status code 128:
stdout: 
stderr: Cloning into 'my-submodule'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@bitbucket.org:team/my-submodule.git' into submodule path 'my-submodule' failed

hudson.plugins.git.GitException: Command ""git.exe submodule update --init --recursive"" returned status code 128:
stdout: 
stderr: Cloning into 'my-submodule'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@bitbucket.org:team/my-submodule.git' into submodule path 'my-submodule' failed

    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:1693)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access$500(CliGitAPIImpl.java:62)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$7.execute(CliGitAPIImpl.java:953)
    at hudson.plugins.git.extensions.impl.SubmoduleOption.onCheckoutCompleted(SubmoduleOption.java:90)
    at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1098)
    at hudson.scm.SCM.checkout(SCM.java:485)
    at hudson.model.AbstractProject.checkout(AbstractProject.java:1276)
    at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:607)
    at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:86)
    at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:529)
    at hudson.model.Run.execute(Run.java:1738)
    at hudson.matrix.MatrixBuild.run(MatrixBuild.java:301)
    at hudson.model.ResourceController.execute(ResourceController.java:98)
    at hudson.model.Executor.run(Executor.java:410)
Finished: FAILURE
</code></pre>
","2","1141149","0","0"
"48449397","1356926","2018-01-25 18:14:24","7","7803","<git><git-branch><git-submodules>","Changing git module branch","<p>I'm using <code>git submodule</code> in order to track a subproject. The submodule points at a specific branch, but I now need to change it.</p>

<p>I've tried to manually edit the <code>.gitmodules</code> file and change the <code>branch =</code> entry, but every command to update the repo I give later doesn't do anything or fails.</p>

<p>I've tried</p>

<pre><code>git submodule sync # Succeeds, but nothing happens
git submodule update # Doesn't do anything
git submodule update --remote # fails with Needed a single revision
</code></pre>

<p>The subproject did correctly check out and gitk in there shows that it does indeed have the new branch that I need to switch to. I could do this manually and commit the new hash but I'm not sure whether <code>git submodule</code> would truly understand the change this way.</p>

<p>I've also tried deleting all submodule folders (including inside the <code>.git</code> folder) and re-running</p>

<pre><code>git submodule update --init --recursive --remote
</code></pre>

<p>But I still get the project to the same state as before (I assume because it's still updating to the committed hash).</p>
","1","1356926","0","0"
"59295607","12521320","2019-12-11 23:24:28","2","698","<git><github><git-submodules><git-gui>","Pulling/Pushing submodule commits using git-gui","<p>I spent some time breaking up a rather large and cluttered codebase into smaller more targeted projects and while doing so I gathered all of the shared code between the projects and pushed those into a separate repo with the intent of using it as a git submodule. I'm fairly comfortable with the command line so I've been setting all this up using that, but when I started writing some documentation to help out some coworkers with this setup and procedures I couldn't figure how to update their local repo's submodule. I know this can be accomplished on the command line with </p>

<p><em>git submodule update --remote --merge</em>. </p>

<p>Is this possible to do within git-gui?</p>
","0","12521320","0","0"
"21486983","1304626","2014-01-31 18:04:32","4","1411","<git><version-control><static-libraries><git-submodules>","Insight on handling static library revisions (i.e. binaries) with git","<p>I'm looking for some insight on how to handle git repositories that each utilize a (large) static library, and have some concerns about a solution I thought about.</p>

<p>Suppose lots of separate projects, all under version control, each rely upon a large static library that is under (very) active development. Let's say that repos <code>A</code>, <code>B</code>, <code>C</code>, <code>...</code> all have their own development teams, and they all rely on <code>lib</code>. Now, the <code>lib</code> project itself is under version control, and is also being worked on by yet another team. Let's assume that some teams can't/shouldn't access the source for <code>lib</code>, but accessing the headers and static library binaries is OK.</p>

<p>Now, when I first thought about how to organize this sort of situation in git repos, submodules immediately came to mind. Here's a quick diagram:</p>

<pre><code>""lib"" repo:
    Dist/ -&gt; ""lib_dist"" submodule
    Headers/
    Sources/
    ...

""lib_dist"" repo:
    Binaries/ (output from ""lib"" repo build process)
    Headers/ (copied from ""lib"" repo in its build script)

""A"" repo:
    Headers/
    Libs/
        lib_dist/ -&gt; ""lib_dist"" submodule
    Sources/

""B"" repo:
    (looks just like ""A"")

""C"" repo:
    (again looks like ""A"")
</code></pre>

<p>The build process for <code>lib</code> would compile the source into static library files and copy the headers to the <code>Dist</code> subfolder. This subfolder is a submodule of the <code>lib</code> repo, and we'll call it the <code>lib_dist</code> repo. This <code>lib_dist</code> repo could then be added to <code>A</code>, <code>B</code>, <code>C</code>, <code>...</code> as a submodule.</p>

<p><strong>Advantages:</strong> Developers on the teams for <code>A</code>, <code>B</code>, <code>C</code>, etc. would not have to compile this large static library themselves, can't see the source code for <code>lib</code>, and the <code>A</code>, <code>B</code>, <code>C</code>, repos will always be able to compile <em>no matter which revision a developer is using</em>. What I mean is that if a developer on project <code>A</code> needs to go back to an older revision, they can simply <code>git checkout &lt;rev_hash&gt; .</code> and then <code>git submodule update</code>; even if <code>lib_dist</code> has changed since the time <code>&lt;rev_hash&gt;</code> was committed, the submodule revision will be adjusted to match the one present at the time <code>&lt;rev_hash&gt;</code> was made. This means the <code>lib_dist</code> headers and binaries will ""just work"".</p>

<p><strong>Disadvantages:</strong> Over time (and exacerbated due to active development), the <code>lib_dist</code> repo will grow <em>very large</em>, as git really isn't meant to store binary files under version control. Git repos over 1GB in size can really tax a server, and pushing/pulling will become very time consuming and resource intensive.</p>

<p>So, in this sort of context, what are the ""best practices""? Is git even the right tool? Does a better tool exist (I'm open to other version control tools)? Nothing really came to mind for me, short of manually managing <code>lib</code> versions. But, it seems to me that manually managing the to-be-compiled-against version of a static lib is so... 20th century (and error-prone).</p>

<p>Thanks!</p>

<p>EDIT: I should add that these projects are written in C/C++.</p>
","0","1304626","0","0"
"45032600","1648645","2017-07-11 10:57:39","1","111","<git><git-submodules>","How do I manage active development on git submodules","<p>I've got a git project with 3 git submodules.  Now I'm actively developing (changing code) in all 4 projects, and I normally do it using vim, from the base directory of the main project.  </p>

<p>So if I use <code>git status</code>, I see the status of just the main project.  If I use <code>git submodule status</code>, then I see the commit sha's of the subprojects (unsure why thats everyday useful), if I use <code>git submodule foreach git status</code> I see which files have changed, relative to whichever submodule it considered at the time.  </p>

<p>So what is considered the easy way to manage this?  Do I really have to change directory into each submodule when I want to commit anything?  How can I commit, from outside of the submodule (<code>git submodule foreach git commit -m ""message"" path/to/file/in/one/submodule</code> would work, but generate multiple errors and feels risky)</p>

<p>I tried <code>git --git-dir=path/to/submodule {status,diff}</code> and they worked fine, but <code>git --git-dir=path/to/submodule commit -m ""message"" path/to/file/in/one/submodule</code> doesn't work, and just complains with <code>fatal: ambiguous argument 'path/to/file/in/one/submodule': unknown revision or path not in the working tree.</code></p>

<p>As it happens each of the submodules is a variant of a sparse checkout of the same project, so there shouldn't be overlap, but I expect there to be many submodules in the future, so is there some way of effectively doing <code>git submodule command &lt;submodule&gt; git commit -m """" &lt;path&gt;</code> on a single submodule</p>
","0","1648645","",""
"27188899","818849","2014-11-28 12:40:14","12","3842","<git><git-submodules><shallow-clone>","Shallow clone with submodules in git, how to use pointed commits and not latest ones?","<p>I know it's possible to have shallow submodules using the <code>--depth</code> option with <code>git submodule update</code>.</p>

<p>However, If I run</p>

<pre><code>git submodule update --init --recursive --depth 1
</code></pre>

<p>on my project with several submodules, I get a <code>fatal: reference is not a tree</code>. So I've tried again with </p>

<pre><code>git submodule update --init --recursive --depth 100
</code></pre>

<p>which worked correctly, however I'd like to keep depth at 1.</p>

<p>It seems to me that <code>--depth 1</code> pulls the latest commit in the submodule, not the commit pointed by the main repository, and that's why setting it to 100 solved the problem, since it pulled a longer list of commits, including the pointed ones.</p>

<p>Unfortunately, if that's the case then I cannot generally be sure the latest 100 commits include the one I need.</p>

<p>How do I tell git to use the pointed commits and not the latest ones in the shallow clone with submodules?</p>

<p>I'm using git 1.9.4 on Windows.</p>
","1","818849","0","0"
"45057160","3637203","2017-07-12 12:01:38","3","604","<git><git-submodules>","Migrating a submodule's gitdir to 'in-tree'","<p>I have a submodule in my repo with a .git file that has just one line</p>

<pre><code>gitdir: ../.git/modules/mysubmodule
</code></pre>

<p>However, the CI runner of gitlab seems to have problems with this <code>gitdir</code> statement, so I want to move <code>../.git/modules/mysubmodule</code> to <code>./mysubmodule/.git</code>.</p>

<p>I did this using <code>mv</code>
I did not use <code>git mv</code>, because this command complains with</p>

<pre><code>fatal: cannot move directory over file, source=.git/modules/mysubmodule, destination=mysubmodule/.git
</code></pre>

<p>And I also removed the <code>worktree</code> line from the <code>mysubmodule/.git/config</code> file.</p>

<p>However, when I want to commit the changes (either to the superproject or the submodule), git lists no changes to commit.</p>

<p>This is why I am wondering how can I move the gitdir to another path?</p>
","0","3637203","",""
"9459532","783103","2012-02-27 03:03:55","8","683","<git><git-submodules>","Revert to pre-git v1.7.8 git submodule behavior with submodule filesystem locations","<p>Recently in git 1.7.8, a change was introduced to ""handle"" submodules differently than before - <a href=""https://lkml.org/lkml/2011/12/2/316"" rel=""noreferrer"">https://lkml.org/lkml/2011/12/2/316</a></p>

<blockquote>
  <p>When populating a new submodule directory with ""git submodule init"",
  the $GIT_DIR metainformation directory for submodules is created inside
  $GIT_DIR/modules// directory of the superproject and referenced
  via the gitfile mechanism. This is to make it possible to switch
  between commits in the superproject that has and does not have the
  submodule in the tree without re-cloning.</p>
</blockquote>

<p>So now, instead of cloning the submodule into the specified directory, instead a .git <em>file</em> is created and within it is this:</p>

<pre><code>$ cat .git
gitdir: ../../../../.git/modules/app/src/emberlabs/openflame
</code></pre>

<p>My problem: I'm on git 1.7.9, and I need the files of the cloned submodule to be in my local clone exactly where I expect them, instead of where git dictates they should be - as was the behavior before git 1.7.8, where I could ls the submodule's clone directory and find all files of the cloned commit present.</p>

<p>Any suggestions or ideas on how to...well, <strong><em>re</em></strong>-achieve this?</p>
","0","783103","0","0"
"45070315","2367317","2017-07-13 02:07:10","1","881","<git><git-submodules>","Hiding a git submodule subdirectory until submodule init call","<p>Problem setup, skip to linebreak for question.</p>

<p>I am working on projectA that has it's own git repo. This projectA has some optional tools in projectB that is its own separate git repo. From what I understand this sounds like a git submodule situation, making projectB a submodule of projectA.</p>

<p>To set this up I use <code>git submodule add projectB</code>. This creates a sub-directory in projectA that acts like a link to projectB, with that information saved in <code>.gitmodule</code>. You need to commit both this file and the ""subdirectory"". I can continue to develop on projectA without paying any attention to projectB. When I make updates to projectB and push them, I can update projectB within projectA by using <code>git submodule update --remote</code>. This alters the projectB subdirectory in projectA, both by updating the files inside to current version of projectB (not tracked by projectA) and the subdirectory file itself (tracked by projectA).</p>

<p>Now suppose a third user wants to take projectA and make projectC, but doesn't need projectB. They use <code>git clone projectA</code>, they get all of projectA and the <code>.gitmodule</code> and an empty subdirectory for projectB. I would like them to still get <code>.gitmodule</code> so that they have the option in the future, but is it possible so that they don't get the empty subdirectory for projectB?</p>

<hr>

<p>My question is it possible to hide the subdirectory for a submodule projectB in projectA before the user does a <code>git submodule init</code> > <code>git submodule update</code>?</p>

<p>I'm afraid this isn't possible because that subdirectory is actually a special git file that tells which commit to get of projectB, which I would have thought was saved in <code>.gitmodule</code>. I'm interested if there is a better method for what I want to accomplish or any git hacks.</p>
","1","2367317","0","0"
"45074729","6463698","2017-07-13 07:58:53","1","980","<git><jenkins><git-submodules><git-clone>","How to only clone a git submodule","<p>is there a way to get the information from a server which commit is selected in a submodule without cloning the whole repository? 
The goal is to clone only a specified submodule 'jenkins-config' so we need the URL (we know this already) and the commit.</p>

<p>Use Case: 
We want to use a Jenkins job configuration which specifies what to do with the checked out sources in our Pipeline. Because we do not know what is configured we first want to clone only the configuration, process it and then check out the whole repository (e.g. on the correct node). </p>

<p>We would really like to have the configuration next to the sources of the repository to be built. This is why we had the idea to use a ""config submmodule"" to include and specify the valid configuration (valid configuration is specified by the SHA of the submodule).<br>
This would also enable to select a specific configuration for your branch. Also the maintenance of configurations for different repositories would be quite comfortable using different branches in the configuration-repository (pull changes). </p>

<p>Any ideas how to solve this? 
 - Config in sandbox next to sources
 - Check out config only (without the rest of the repository) </p>
","2","6463698","",""
"9493645","807032","2012-02-29 04:36:24","5","4964","<git><github><git-submodules>","Update my fork of a github repo, to include submodules?","<p>A friend of mine has written an irc bot, and has the code on github. I made a fork, and wrote a few plugins and pushed to my fork. The owner of the original repo moved the plugins folder to a submodule (I don't even really get that, I've never really used git) and fetching and merging failed, and I couldn't figure out what went wrong. </p>

<p>So I deleted my fork, and forked it all over again, but when I did <code>git clone {my github fork}</code> I had an empty plugins folder. I'm not sure what I'm doing wrong, or what's the right way to fork a repo that has a submodule thing in it. :/</p>

<p>@manojlds answer below does grab the submodule and grab the stuff to put in the plugins directory, but if I try to add a file and push I can't because it's pointing at the original submodule. I've forked the submodule now too, I just don't know how to make my main repo point to my fork of the submodule instead of the upstream submodule.</p>
","1","807032","0","0"
"9501427","561638","2012-02-29 15:00:36","2","393","<git-submodules>","did the git submodule behavior change?","<p>I am using a new red hat os, with git version 1.7.6 (also tried 1.9.2).  I also have a debian 6 machine with git 1.7.6.  When I create a clone and populate a submodule on the debian machine, the submodule ends up with a .git directory.  However, when I perform the same commands on the red hat machine, my submodule ends up with a file named .git, and a new directory under my root repo in .git, named modules. This modules directory appears to contain the contents I would expect to be in .git under the submodule.  What is going on???</p>
","0","561638","",""
"45463219","483040","2017-08-02 14:07:44","1","799","<git><git-submodules>","git submodules dirty state","<p>For the sake of this discussion assume I have two repos on github: foo_top and bar_submodule. As suggested by the naming bar_submodule is a submodule of foo_top. </p>

<p>I have both repos cloned into my local working directory. Recently I went into the bar_submodule, created a new branch and made a change then pushed it to the remote.</p>

<p>When I go into foo_top and do </p>

<pre><code>git status
</code></pre>

<p>I see a message that says I've got local changes not committed:</p>

<pre><code>modified:   deps/bar_submodule (modified content)
</code></pre>

<p>and so I do a diff and see:</p>

<pre><code>diff --git a/deps/bar_submodule b/deps/bar_submodule
--- a/deps/bar_submodule
+++ b/deps/bar_submodule
@@ -1 +1 @@
-Subproject commit e851c59f8262bfbd8c2e1c0d3471494cf6c8475f
+Subproject commit e851c59f8262bfbd8c2e1c0d3471494cf6c8475f-dirty
</code></pre>

<p>The -dirty part confuses me. In the bar_submodule repo, on the branch I did my work on, I see a valid sha for the commit. I was expecting that sha to show up in the output of the git diff where the -dirty version is.</p>

<p>if I cd into deps/bar_submodule and do a git diff there I see the changes I made in the other repo shown in there as needing to be added.</p>

<p>Someone told me to just do <code>git add deps/bar_submodule</code> from the root of the foo_top repo and I tried that but nothing changed--there was nothing to add/commit/push and the result of git diff didn't change.</p>

<p>I have a few questions:</p>

<ol>
<li>What is the deal with the -dirty? Why isn't the real commit sha in there?</li>
<li>Do I need to add, commit and push those changes from with in the deps/bar_submodule directory of the foo_top repo?</li>
<li>Should I have just made these changes in the deps/bar_submodule directory instead of doing it from a clone of the bar_submodule directory in the first place?</li>
</ol>
","4","483040","",""
"27695331","2577","2014-12-29 20:12:13","0","571","<ios><xcode><git><github><git-submodules>","How can I get Xcode's source control to ignore the Remotes of a git submodule?","<p>I have an iOS app. This iOS app uses <a href=""https://github.com/Alamofire/Alamofire"" rel=""nofollow"">Alamofire</a> for a networking library.</p>

<p>According to the latest way Alamofire's documentation works, the suggested way to add it is as a ""submodule"" via git. This basically works. On GitHub, it actually shows up as being linked to a different repository at a particular revision. </p>

<p>I'm also trying to use it in a widget in iOS 8 and I'm getting a warning</p>

<p><code>ld: warning: linking against dylib not safe for use in application extensions</code></p>

<p>The short version of how to fix this is to tweak a build option in the Build Settings of the library's project. </p>

<p>This is a problem because it registers to Xcode as me trying to modify the Alamofire project and commit it. Naturally I have no access or rights to push an update to the Alamofire repository and I wouldn't want to.</p>

<p>Is there a way to get Xcode to ignore git submodules? Or maybe explain to git in general that I don't own these other repositories so ignore any changes I made to them? Or maybe a better way to tweak the settings and keep it part of my repository and not the submodule's repository? Or should I just not use these libraries as git submodules if I need to do this sort of thing with them?</p>
","0","2577","",""
"63637260","6098948","2020-08-28 16:00:23","1","66","<git><git-submodules><git-post-receive>","git submodule update in post-receive hook ignores -C","<p>I try to write a post-receive hook to build a static webpage, but the git submodule update --init command fails. The script runs successfully when not run by the hook.</p>
<pre><code>
OUTPUT=$HOME/post_receive_out

REPO=$HOME/repositories/personal/www_root.git
WORKING_DIR=$HOME/hugo_web_temp
WWW_DIR=/var/www/servers/levente.logonex.eu/pages

echo -ne &quot;This is the post receive hook. I am &quot; &gt; $OUTPUT

whoami &gt;&gt; $OUTPUT

rm -rf $WORKING_DIR
git clone $REPO $WORKING_DIR
git -C $WORKING_DIR submodule update --init

hugo -s $WORKING_DIR/lev -d $WWW_DIR
chmod -R a+r $WWW_DIR
</code></pre>
<p>says:</p>
<p>fatal: not a git repository: '.'</p>
<p>For now I fixed it with this:</p>
<pre><code>cd  $WORKING_DIR
git --git-dir $WORKING_DIR/.git --work-tree $WORKING_DIR submodule update --init
</code></pre>
<p>found in <a href=""https://stackoverflow.com/questions/21535979/git-submodule-update-from-post-receive-hook/21546191"">Git submodule update from post-receive hook</a></p>
","3","6098948","0","0"
"27725241","4408996","2014-12-31 18:57:54","2","765","<git><vim><github><git-submodules>","trouble with git submodule in nested folder (not submodule) of local repo","<p>I frequently find that I understand far less than I think I know... particularly when it gomes to git and github. I'm in that situation again and hope someone can help.</p>

<p>Background:
This is all in Windows 7 with PowerShell v4 as my cli.</p>

<p>I've long kept my vim config within my local filesystem in a ~\.vim folder (managing symlinks for ~\vimfiles, ~\_vimrc, etc) and on github in a "".vimrc"" repository, managing my plugins via pathogen and adding them to the repo as submodules. As long as I remembered to refresh my memnory before adding a new plugin, all went well.</p>

<p>But I recently decided I wanted to keep all of my most significant config files in a local ~\.dotfiles folder and on github in a similarly named repo (again, managing things with the appropriate symlinks).</p>

<p>I thought I had it all sussed out and ready to go until I tried to add the tabular plugin to my vim config.</p>

<p>First mistake was originally just cloning the tabular repo from github instead of adding it as a submodule. Second mistake was not looking up how to properly remove that cloned repo from my local repo. Maybe I did it wrong and caused my subsequent problems (I think I just deleted the tabular folder in ~.dotfiles.vim\bundle)</p>

<p>At any rate, after removing the cloned plugin repo folder, I tried to add the submodule and things blew up, as shown in the transcript below:</p>

<pre><code>(note 1:    I originally just cloned the tabular repo (by mistake). That worked
            perfectly but perhaps I didn't remove the cloned repo correctly)
(note 2:    currently in ~\.dotfiles folder)

---&lt;TRANSCRIPT&gt;---
13:11:44|OBERON|316|# git submodule add git://github.com/godlygeek/tabular .vim/bundle/tabular$
fatal: Not a git repository: ../.git/modules/.vim/bundle/tabular$
Unable to checkout submodule '.vim/bundle/tabular'$

13:13:44|OBERON|318|# gci$
    Directory: C:\Users\arley.dealey\.dotfiles$
$
Mode                LastWriteTime     Length Name$
----                -------------     ------ ----$
d----        12/31/2014   1:12 PM            .git$
d----        12/30/2014   4:41 PM            .vim$
-a---          4/4/2014   4:46 PM       6304 .bashrc$
-a---        12/28/2014  11:01 AM       1328 .bash_profile$
-a---        12/28/2014  11:01 AM         10 .digrc$
-a---        12/28/2014  11:01 AM       1548 .inputrc$
-a---        12/28/2014  11:01 AM       1689 .pentadactylrc$
-a---        12/31/2014  10:47 AM      11687 .sig-library.txt$
-a---        12/31/2014  11:20 AM       2150 README.md$
$
13:13:50|OBERON|319|# git submodule add git://github.com/godlygeek/tabular .vim/bundle/tabular$
The following path is ignored by one of your .gitignore files:$
.vim/bundle/tabular$
Use -f if you really want to add it.$

13:15:11|OBERON|320|# git submodule add -f git://github.com/godlygeek/tabular .vim/bundle/tabular$
Adding existing repo at '.vim/bundle/tabular' to the index$
fatal: Not a git repository: .vim/bundle/tabular/../.git/modules/.vim/bundle/tabular$
Failed to add submodule '.vim/bundle/tabular'$

13:15:30|OBERON|321|# gci .vim/bundle$
    Directory: C:\Users\arley.dealey\.dotfiles\.vim\bundle$
$
Mode                LastWriteTime     Length Name$
----                -------------     ------ ----$
d----        12/29/2014   9:31 PM            airline$
d----        12/29/2014   9:31 PM            colorscheme-switcher$
d----        12/29/2014   9:31 PM            cs-solarized$
d----        12/29/2014   9:32 PM            fugitive$
d----        12/29/2014   9:32 PM            indentLine$
d----        12/29/2014   9:33 PM            pathogen$
d----        12/29/2014   9:33 PM            surround$
d----        12/31/2014   1:12 PM            tabular$
d----        12/29/2014   9:33 PM            vim-misc$
---&lt;TRANSCRIPT&gt;---
</code></pre>

<p>(Note 3: The tabular folder DID get created even though the submodule add failed)</p>

<p>So now I'm kind of befuddled and not certain what to do next.</p>

<p>Help?</p>

<p>[EDIT]
Hmmm... I may have hosed it even worse than I thought. Trying a simple ""git add ."" from the root folder of the local repository now gets this:</p>

<pre><code>16:59:06|OBERON|355|# git add .
fatal: Not a git repository: .vim/bundle/tabular/../.git/modules/.vim/bundle/tabular
</code></pre>

<p>Look at the path in the error message... WTF?</p>

<p>[EDIT]
In case anyone is trying to follow along and getting a little lost, here is a tree
diagram of the first three levels of the .dotfiles folder heirarchy:</p>

<pre><code>17:35:50|OBERON|387|# tree ~\.dotfiles
.vim
├── README.md
├── autoload
│   └── pathogen.vim
├── bundle
│   ├── airline
│   ├── colorscheme-switcher
│   ├── cs-solarized
│   ├── fugitive
│   ├── indentLine
│   ├── pathogen
│   ├── surround
│   ├── tabular
│   └── vim-misc
├── colors
├── compiler
├── doc
├── ftdetect
├── ftplugin
├── indent
├── keymap
├── plugin
└── syntax
PowerShell
├── Microsoft.PowerShell_profile.ps1
├── PeterProvost_profile.ps1
├── nad-profile.ps1
└── profile.ps1
.bashrc
.bash_profile
.digrc
.inputrc
.pentadactylrc
.sig-library.txt
README.md
</code></pre>
","2","4408996","0","0"
"27760011","1032531","2015-01-03 22:02:21","1","32","<git><git-submodules>","Add git submodule after previous submodule had been used","<p>I had a couple of git submodules that were causing me problems (reference <a href=""https://stackoverflow.com/questions/27732982/verify-changes-in-git-modules"">Verify changes in git modules</a>)</p>

<p>I removed the submodules per <a href=""http://davidwalsh.name/git-remove-submodule"" rel=""nofollow noreferrer"">http://davidwalsh.name/git-remove-submodule</a>.</p>

<p>I then tried to add back the submodule, however, as seen below, am not getting the expected results (actually, they probably are expected, just not for me).</p>

<p>I tried the <code>--force</code> option but that just reverted back to my previous submodules which is not what I want.  I also don't wish to change the directory of the submodule as my application uses this path.</p>

<p>How do I add a submodule under this scenario?</p>

<pre><code>[Michael@devserver main]$ pwd
/var/www/main
[Michael@devserver main]$ git status
On branch master
Your branch is ahead of 'origin/master' by 11 commits.
  (use ""git push"" to publish your local commits)
nothing to commit, working directory clean
[Michael@devserver main]$ git submodule add https://github.com/parsecsv/parsecsv-for-php.git application/classes_3rd/parsecsv
A git directory for 'application/classes_3rd/parsecsv' is found locally with remote(s):
  origin        https://github.com/parsecsv/parsecsv-for-php.git
If you want to reuse this local git directory instead of cloning again from
  https://github.com/parsecsv/parsecsv-for-php.git
use the '--force' option. If the local git directory is not the correct repo
or you are unsure what this means choose another name with the '--name' option.
[Michael@devserver main]$
</code></pre>
","1","1032531","0","0"
"45623820","6431715","2017-08-10 21:37:35","2","202","<git><git-submodules><subtree>","git: working with 'parent' and 'child' repositories","<p>In my project I want to manage 3 repositories:
PARENT
CHILD1
CHILD2</p>

<p>The reason I'm not using <strong>only one</strong> PARENT repository that contains CHILD1+CHILD2 is that CHILD1\2 can be used in other projects also. </p>

<p>In a specific stage I want to tag all 3 repositories with the same tag. </p>

<p>The goal: In the future, I want to create local repositories from this tag.</p>

<p>During development, CHILD1 (for example) is modified. I want to push the modifications to the remote git. </p>

<p>If someone else is working on CHILD2 (for example) I want to pull last version into my project.</p>

<p>Should I use submodule or subtree or none ?
What is the right way (elegant + simple) to do it ?</p>

<p>Thank you in advance,
Zvika</p>
","0","6431715","",""
"27942999","1022043","2015-01-14 12:30:08","8","10552","<git><git-submodules>","modified content in git submodule, but git submodule says up to date","<p>I cant push the changes I made to a git submodule. I have pushed the main project, and get this</p>

<pre><code>mainProject$ git status
On branch myBranch
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

     modified:   example/submod (modified content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>But when trying to push the changed in the submodule i get </p>

<pre><code>submod$ git status
On branch dev
Your branch is up-to-date with 'origin/dev'.
</code></pre>

<p>The output of the git --version is </p>

<pre><code>git version 1.9.3 (Apple Git-50)
</code></pre>

<p>When I run </p>

<pre><code>mainProject$ git diff example/submod
Submodule example/submod contains modified content
</code></pre>

<p>What is happening here? I can't add the changes from the main project either</p>

<pre><code>mainProject$ git add example/submod
mainProject$ git status
On branch myBranch
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

   modified:   example/submod (modified content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>
","0","1022043","0","0"
"64368977","1104870","2020-10-15 09:49:17","3","3510","<git><git-submodules>","git fetch fails with ""fatal: git upload-pack: not our ref a639..."" and succeeds the second time","<p>We have a git repository that includes various submodules. There is an old clone of the main repo, on which we reproducibly get the following error when running <code>git fetch</code>:</p>
<pre><code>fatal: remote error: upload-pack: not our ref a63912a948cf1ce4c700c16b3417e89287f61f63
fatal: git upload-pack: not our ref a63912a948cf1ce4c700c16b3417e89287f61f63
</code></pre>
<p>When running <code>git fetch</code> a second time after this, the error disappears.</p>
<p>My current assumption is that the old clone (or some branch being fetched) contains references to commits in submodules which for whatever reasons (rebases?) have disappeared from origin. I understand that this can happen but how can I find the specific dangling reference, so that I can fix it?</p>
<p>The old clone sits in a base image that we use for setting up tests, so I can perfectly reproduce the error even if it is gone on each second attempt. However, I am reluctant to just ignore the problem by littering our scripts with <code>git fetch || git fetch</code> or similar hacks.</p>
<p>So how can I find out which commit in the main repo references the missing ref <code>a63912...</code>
More generally, is there a way to perform an integrity check on a repo that can catch these errors upfront?</p>
","3","1104870","",""
"64380751","8529173","2020-10-15 23:01:16","0","56","<python><git><pytest><git-submodules>","Python3: Importing a self-contained git submodule containing subclasses/superclasses into a larger project structure without breaking imports","<p>I have a project structure something like this:</p>
<pre><code>project/
  - app
    - __init__.py
    - __main__.py
  - dependencies/
    __init__.py
    - git_submodule/
      - __init__.py
      - somefile.py
      - extends_somefile.py
      - tests/
        - conftest.py
        - test_somefile.py
        - test_extends_somefile.py
</code></pre>
<p>Within <code>git_submodule</code>, I want the structure to be completely self contained, so that I can run <code>python3 -m pytest tests</code> from <code>project/app/dependencies/git_submodule/</code>. <em><strong>Note that there is a superclass and subclass which extends it.</strong></em></p>
<p>I also want to have an import statement in <code>project/app/__main__.py</code> like:</p>
<pre><code>from app.dependencies.git_submodule.extends_somefile import ExtendsSomeFile
</code></pre>
<p>So that if I navigate to 'project/' and run:</p>
<p><code>python3 -m app</code></p>
<p>None of the imports break. What is the best way to do this?</p>
","2","8529173","",""
"65052806","5526981","2020-11-28 17:56:32","0","2328","<git><gitlab-ci><pipeline><git-submodules>","How to trigger the pipeline of a git submodule in the main pipeline in GitLab?","<p>I have a main repository with a defined pipeline at <code>.gitlab-ci.yml</code>. When I push changes to the repository this runs few tests at the main repository.</p>
<p>I have also few sub-projects (libraries) that are linked as sub-modules. The sub-modules have their own pipeline tests. And if I do changes on the main these changes might break the sub-module, but the sub-module pipeline only triggers when there are new commits on the sub-module.</p>
<p>I would like to trigger the pipeline of the sub-module inside the main project when there are changes on the main. What is the easiest way to do that?</p>
","1","5526981","",""
"46524819","4934640","2017-10-02 11:43:42","2","478","<git><split><git-submodules><git-filter-branch><revision-history>","How extract 2 files as a git submodule?","<p>I have two files would like to send new repository of their own, but I also would like to keep their own history so the new repository already has some history.</p>

<p>I tried searching and I found these threads:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/5998987/splitting-a-set-of-files-within-a-git-repo-into-their-own-repository-preserving"">Splitting a set of files within a git repo into their own repository, preserving relevant history</a></li>
<li><a href=""https://stackoverflow.com/questions/2797191/how-to-split-a-git-repository-while-preserving-subdirectories"">How to split a git repository while preserving subdirectories?</a></li>
<li><a href=""https://stackoverflow.com/questions/17413493/create-a-submodule-repository-from-a-folder-and-keep-its-git-commit-history"">Create a submodule repository from a folder and keep its git commit history</a></li>
</ol>

<p>But I could not figure out exactly how to write the command. I tried running this based on the above answers:</p>

<pre><code>git clone repo
git remote rm origin
cd repo
git filter-branch --tree-filter 'git rm --cached --ignore-unmatch ""filename1"" ""filename2""' -- --all
</code></pre>

<p>I was expecting to the current repository be cleaned and keep only with these two files and their history, then I could just push it as a new submodule, but after running the command all my files stayed in the repository. </p>
","2","4934640","0","0"
"28273980","4346877","2015-02-02 08:53:33","13","9725","<git><visual-studio><git-submodules><projects-and-solutions>","Add git submodule as reference to existing solution in VS","<p>Lets say I have a submodule repo:</p>
<pre><code>_git/DbModel (only source code indexed. No /bin or /obj folders)
</code></pre>
<p>And two projects which need DbModel as reference library:</p>
<pre><code>_git/TTT
_git/TPM
</code></pre>
<p>I've already added DbModel as submodule via GitBash to both of them</p>
<pre><code> git submodule add https://RepoPath/_git/DbModel
</code></pre>
<p>And my local repos now look like this:</p>
<pre><code>Source\Repos\TTT\TTT.sln
Source\Repos\TTT\DbModel\DbModel.sln

Source\Repos\TPM\TPM.sln
Source\Repos\TPM\DbModel\DbModel.sln
</code></pre>
<p>My Team Explorer shows two different solutions which are available now and I can switch between them easily.</p>
<p>But. Maybe this is a kinda newbie question...</p>
<p>I don't know how to add DbModel solution as reference to TPM and TTT!
When I click &quot;Add Reference&quot; -&gt; &quot;Browse&quot; in VS I can only add &quot;.dll, .tlb, .olb, .ocx, .exe, .manifest&quot; as &quot;reference files.</p>
<p>How is it supposed to work? Should I compile sub module solution every time and add .dll as reference? I need source code to be added.</p>
","0","4346877","0","0"
"65075471","3387223","2020-11-30 14:31:04","2","826","<git><git-submodules>","git clone recursively without a submodule of a submodule","<p>We have a project which needs another external project (which I can't modify) as a submodule. That submodule again has submodules. However one of those submodules isn't necessary and the server it's on is unreliable.</p>
<p>Is there any way to only clone a part of the submodules of the submodule?</p>
","7","3387223","0","0"
"10317676","454533","2012-04-25 14:21:31","39","22616","<git><github><git-submodules>","git: change origin of cloned submodule","<p>I created a project <code>submodule</code> and put it up on Github.</p>

<p>I created another project, <code>supermodule</code>, and then did this:</p>

<pre><code>cd supermodule
git init
mkdir lib
git clone git://github.com/tandu/submodule lib/submodule
git submodule add ./lib/submodule lib/submodule
</code></pre>

<p>This worked fine, but on the website, it can't find the link to the submodule when viewing the files (in fact it just says ""Loading Commit data"" forever).  The submodule folder itself has the correct <code>origin</code>.</p>

<p>Apparently, what I should have done was</p>

<pre><code>...
mkdir lib
git submodule add git://github.com/tandu/submodule lib
</code></pre>

<p>...but it's too late for that now.  How can I have the submodule in this project correctly point to <code>origin</code>?</p>
","0","454533","0","0"
"10334558","1155825","2012-04-26 13:33:55","2","639","<git><git-submodules>","Git submodule modified after a git pull, should I push?","<p>I have two bare repos <code>super</code> and <code>a</code>, one clone of <code>super</code> - <code>clone_super</code> and one clone of <code>a</code> - <code>clone_a</code>. I've added repo <code>a</code> as a submodule in <code>clone_super</code>.</p>

<p>If I now make some changes in <code>clone_a</code>, push those and do a <code>git pull origin master</code> in <code>~/clone_super/a</code>, it will render in a <code>modify status</code> for <code>~/clone_super/a</code>, displayed after <code>git status</code> in <code>~/clone_super</code>.</p>

<p>If I do <code>git submodule update</code>, <code>~/clone_super/a</code> will revert to previous commit. So, is it intended that I need to commit and push submodules for repos that they exist in each time I update them?</p>
","0","1155825","",""
"65116706","890863","2020-12-02 21:55:00","1","3190","<git><git-submodules>","Make git pull --recurse-submodules update submodule to latest commit on submodule branch","<p>I want <code>git pull --recurse-submodules</code> to update all submodules to the latest commit on their branch.</p>
<p><code>.gitmodules</code>:</p>
<pre><code>[submodule &quot;roles-shared&quot;]
    path = roles-shared
    url = ../../project/roles-shared.git
    branch=master

</code></pre>
<p>I update <code>master</code> branch in roles-shared repository, adding 1 new commit.</p>
<p>I do <code>git pull --recurse-submodules</code> in main repository:</p>
<pre><code>Fetching submodule roles-shared
From gitlab:project/roles-shared
   83de1f4..f0688dd  master     -&gt; origin/master
Already up to date.

</code></pre>
<p>Submodule got all new commits, but it not updated, it is 1 commit behind master:</p>
<pre><code># submodule foreach git status

Entering 'roles-shared'
On branch master
Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
  (use &quot;git pull&quot; to update your local branch)
</code></pre>
<p>Is there any way to make <code>git pull</code> automatically update submodules to their latest commits?</p>
","0","890863","",""
"65134014","376507","2020-12-03 20:56:17","1","424","<git><git-submodules>","How to have different branches in git point to different branches of the same submodule","<p>I have a repo X (let us assume it has branches XB1, XB2, and I have checked out branch XB1). I have added a submodule Y (let us assume this submodule has branches YB1, YB2). I have added the submodule Y (branch YB1) in X.</p>
<p>Is there a way to add branch YB2 as submodule in branch XB2?</p>
<p>In summary, what I am looking for is that when I checkout XB1, I want to use YB1 and when I checkout XB2 I want to use YB2.</p>
<p>Not sure if the above is possible in git, but thought of asking.</p>
","4","376507","",""
"10365579","293974","2012-04-28 16:52:06","1","545","<git><git-submodules>","Prevent git submodule update from deleting submodule committed changes","<p>This seems a to be a common issue, but i just can't find a reasonable solution:<br>
IMHO, the worse problem with <a href=""http://schacon.github.com/git/user-manual.html#submodules"" rel=""nofollow"">git submodules</a> is where submodule committed but not pushed changes are easily deleted with the containing repository usage of <code>git submodule update</code>. Quoting:</p>

<blockquote>
  <p>It’s not safe to run git submodule update if you’ve made and committed
  changes within a submodule without checking out a branch first. They
  will be silently overwritten:      </p>
</blockquote>

<p>(...followed by an example there).</p>

<p>So, to the question-<br>
Let <code>super</code> be a repository root folder and <code>submod</code> be a child folder containing a submodule:    </p>

<pre><code>-super   
     -submod
</code></pre>

<p>When i commit in the submodule but not push, and then run <code>git submodule update</code> i get my <em>committed</em> changes in submod <strong>deleted</strong> (oh, the horror).<br>
How can i add a confirmation <code>are you sure</code> question when i'm doing this?
hooks, scripts or any other applicable ideas are more the welcome.</p>

<p>TIA</p>
","0","293974","0","0"
"46907716","5085260","2017-10-24 10:07:40","2","2217","<git><git-submodules><git-subtree><git-subrepo>","Creating multiple git sub repos inside parent git repository","<p>I want to create a parent git repo inside which there will be multiple git repos, but I do not want parent git repo to track all commits of sub repos. Commit history can be placed in individual sub repos. I just want that <strong>When I pull from parent repo, I want all sub repos to be pulled and when I push parent repo, all subrepos committed changes should be pushed to their respective repos in server. Also it should be able to push and pull individual git repos when we make some changes to any of subrepos and next time pull of parent repo should give the updated repos</strong>.</p>

<p>I am trying to use submodules/subtree but couldnot achieve it. I have heard of <strong>git subrepo</strong> but have not been able to find good tutorial on it</p>
","0","5085260","0","0"
"46911083","343204","2017-10-24 12:49:50","2","2406","<git><git-submodules>","git submodule update <name of submodule> - but still get modified: <name of submodule> (modified content)","<p>I have a submodule and when I do <code>git status</code> I get:</p>

<pre><code>modified:   &lt;name of submodule&gt; (modified content)
</code></pre>

<p>I run:</p>

<pre><code>git submodule update &lt;name of submodule&gt; 
</code></pre>

<p>but still get: </p>

<pre><code>modified:   &lt;name of submodule&gt; (modified content)
</code></pre>

<p>Any idea why?</p>
","1","343204","",""
"46270420","1223975","2017-09-18 01:33:26","1","24","<git><git-submodules><git-subtree>","Publish git subtree to subfolder of different git repo","<p>I have a project <code>suman-types</code></p>

<p>I want to publish a git subtree of the <code>suman-types</code> Git repo to <code>DefinitelyTyped/types/suman</code>.</p>

<p>Normally with a Git subtree, you publish a subtree of a Git project as the root of another Git project. But in this case I am wondering if I can publish a git subtree of a project (suman-types) to a subfolder of existing Git repo (my fork of DefinitelyTyped here: </p>

<p><a href=""https://github.com/ORESoftware-team/DefinitelyTyped"" rel=""nofollow noreferrer"">https://github.com/ORESoftware-team/DefinitelyTyped</a></p>

<p>so what I want to do is something like this:</p>

<pre><code>cd suman-types &amp;&amp; 
git subtree push --prefix types my-remote master/types
</code></pre>

<p>where master/types is a subdirectory in the master branch. I don't think this is the right syntax, but hopefully you get the idea.</p>

<p><em>Perhaps I need to use git submodules instead of git subtree.</em></p>
","0","1223975","0","0"
"64533213","8586012","2020-10-26 07:52:02","1","852","<github><github-api><git-submodules>","How to get a list of submodules through github API?","<p>I'm trying to get a list of submodules of a repository through GitHub API. After reading <a href=""https://developer.github.com/v3/repos/contents/"" rel=""nofollow noreferrer"">Github API docs</a>, I did the following things: In Order to access the submodules of the Jquery, I use the following <a href=""https://api.github.com/repos/jquery/jquery/contents/"" rel=""nofollow noreferrer"">link</a> to get a list of submodules, however, I cannot see any submodules from it. Could anyone please tell me what field should I use to get a list of submodules of a repository from GitHub API?</p>
","0","8586012","",""
"64583253","3693060","2020-10-29 00:33:35","0","411","<git><git-submodules>","Is it possible to create a build using YAML file within git submodule?","<p>I have set up a git submodule in a git repository.</p>
<p>On pushing changes to this submodule, I can see all the files added to this submodule in local branch. However, I don't see these files in the submodule in the remote branch. All I see in the remote branch is a submodule file with a <code>&lt;guid&gt;</code> as content. I see all the commits correctly.</p>
<p>Is this expected?</p>
<p>If that's the case, I have a YAML file within this submodule to be used for Build/Release. Is it possible to create a Build/Release using the YAML file within the submodule because this file is not visible in remote branch?</p>
","1","3693060","",""
"65159249","2026659","2020-12-05 16:28:27","0","56","<git><git-submodules>","need to switch to a different branch not listed in git submodule","<p>I have a git submodule 'library' that I want to make changes to. The submodule currently tracks my 'develop' branch. I want the submodule to track a feature branch so the changes are associated with that branch.</p>
<p>I've tried going into the submodule folder and doing:
<code>git checkout feature</code> and got <code>error: pathspec 'feature' did not match any file(s) known to git.</code></p>
<p>When I ran <code>git branch -a</code> in the submodule folder I noticed my feature branch was not listed. I tried adding it by running <code>git submodule add -b feature</code> but that didn't work.</p>
<p>When I run <code>git status</code> in the submodule folder it says:</p>
<pre><code>On branch develop
Your branch is up to date with 'origin/develop'
</code></pre>
<p>How do I switch the branch my git submodule is tracking?</p>
","2","2026659","",""
"10386944","306084","2012-04-30 16:17:16","2","341","<rake><git-submodules><rake-task><rakefile>","How can I call a rake task on a git submodule?","<p>I have a project including a number of vendored javascripts, e.g. jQuery. I'm including these scripts as git submodules. However, for my build process, I need the built script, not the whole repository of that script. So I'm trying to set up a rake task to build each script - preferably using the script's own rakefile - and then copy the built script into my asset directory.</p>

<pre><code>file ""app/vendor/scriptname.js"" do
    # Call the task that builds the script here
    sh ""cp app/vendor/script-submodule/dist/scriptname.js app/vendor/""
end

desc ""Make vendor scripts available for build""
task :vendor =&gt; ""app/vendor/scriptname.js"" do
end
</code></pre>

<p>If I use <code>import 'app/vendor/scriptname/Rakefile'</code> in my Rakefile, I should have access to the rake task that builds the script, right? How would I call it? Or should I just use <code>sh ""cd app/vendor/script-submodule/ &amp;&amp; rake dist""</code> and call it good?</p>
","0","306084","0","0"
"10418695","763419","2012-05-02 17:24:41","6","19951","<git><github><git-submodules><pyrocms>","can't add git submodule to repository","<p><em>(Predominantly a Git question, but may be relevant to other PyroCMS users)</em></p>

<p>I have a local repository of PyroCMS - the repo is a clone of a github fork of the main project.  I also have a PyroCMS module, which is also a local clone of a github fork of <em>that</em> project.  </p>

<p>I've put them both in separate directories.</p>

<pre><code>~/Dropbox/websites/pyrocmscommunity-test/
~/Dropbox/github/PyroDatabase/
</code></pre>

<p>I want to add PyroDatabase as a <strong>submodule</strong> of pyrocmscommunity-test, so I can pull updates from github, keep track of my own changes etc.</p>

<p>I tried to do this by going to the top of the working tree and doing:</p>

<pre><code>git submodule add ../../github/PyroDatabase/ addons/shared_addons/modules/
</code></pre>

<p>but it didn't complete properly:</p>

<pre><code>Cloning into 'addons/shared_addons/modules/database'...
ssh_exchange_identification: Connection closed by remote host
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I don't understand this as I didn't specify an SSH connection, I just wanted to use the local repo.  What is it trying to connect to and why?</p>

<p>Also, now, whenever I repeat the command, I get this:</p>

<pre><code>'addons/shared_addons/modules' already exists in the index
</code></pre>

<p>But I don't understand this as there is no <code>.gitmodules</code> file and no mention of the modules files in <code>.gitconfig</code> either.  </p>

<p>What am I doing wrong and how do I reset things?</p>

<p>Thanks,
William</p>
","1","763419","0","0"
"46644278","1668622","2017-10-09 10:28:45","10","1327","<git><git-submodules><git-pull><git-checkout><git-config>","Todays strategy to keep git submodule checkouts in sync with commit-IDs?","<p>A lot of questions about automatically update submodules have been asked on 
StackOverflow including:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/4611512"">Is there a way to make git pull automatically update submodules?</a></li>
<li><a href=""https://stackoverflow.com/questions/1030169"">Easy way to pull latest of all git submodules</a></li>
<li><a href=""https://stackoverflow.com/questions/22328053"">Why doesn't <code>git checkout</code> automatically do <code>git submodule update --recursive</code>?</a></li>
</ul>

<p>But it looks to me as for git submodules there is no single approach yet which works like <code>svn up</code> regarding svn-externals.</p>

<p>So since git is changing every day I dare to ask again: </p>

<p><strong>Is there a (convenient) way to <em>init</em> and <em>automatically update</em> submodule checkouts (i.e. keep in sync with their corresponding submodule commit IDs) for <code>checkout</code> <em>and</em> <code>pull</code> (i.e. <code>merge</code> and <code>rebase</code>)?</strong></p>

<p>Currently I have two approaches for this:</p>

<p><strong>#1: create a <code>post-checkout</code>, <code>post-merge</code> and <code>post-rewrite</code> hook with the following content</strong></p>

<pre><code>#!/bin/sh
git submodule update --init --recursive
</code></pre>

<p>as you can already see this approach has several disadvantages:</p>

<ul>
<li>it's <strong>complicated</strong> and probably needs a script to make it working reliably</li>
<li>does not work well if you <strong>use these git-hooks already</strong></li>
<li>the commit hooks are only active <strong>on this clone</strong> (has to be re-done by
everyone working on this project on every single clone)</li>
<li>setup is <strong>non-standard</strong> and will confuse others</li>
</ul>

<p><strong>#2: configure aliases for <code>pull</code> and <code>checkout</code></strong></p>

<pre><code>git config --global alias.up 'pull --recurse-submodules'
git config --global alias.co 'checkout --recurse-submodules'
</code></pre>

<p>But this isn't nice neither:</p>

<ul>
<li>it won't <code>--init</code> the submodules (can be solved by running <code>pull</code>/<code>checkout</code> and <code>submodule update</code> separately instead</li>
<li>it's <strong>non-standard</strong> and won't work with scripts and snippets</li>
<li>it's <strong>easy to forget to use</strong> <code>up</code>/<code>co</code> instead of <code>pull</code>/<code>checkout</code></li>
<li>it works <strong>only on the local</strong> machine/user</li>
</ul>

<p>This approach would be a bit more like I want it to be if you could do something
like</p>

<pre><code>git config --global pull.recurseSubmodules true
git config --global pull.initSubmodules true
git config --global checkout.recurseSubmodules true
git config --global checkout.initSubmodules true
</code></pre>

<p>.. but you can't, do you?</p>
","0","1668622","0","0"
"65191736","3693060","2020-12-08 01:19:13","3","3729","<git><azure-devops><git-submodules>","Submodule - update .gitmodules for specifying a branch name","<p>I have added a submodule to an ADO repository:</p>
<p>.gitmodules</p>
<pre><code>[submodule &quot;public&quot;]
    path = public
    url = https://xyz.visualstudio.com/DefaultCollection/abc/_git/STW-Sol-public

</code></pre>
<p>Is there a git command to update .gitmodules for specifying a branch name?</p>
","1","3693060","0","0"
"65193463","10824700","2020-12-08 05:15:16","1","270","<git><vue.js><github><gitlab><git-submodules>","Locally clone one git project to another's project subdirectory","<p>I'll try to be as succinct as possible:</p>
<p>** background **<br />
I started a project for a non-profit org with some friends a couple months ago; as we are not charging anything, a couple of friends abandoned ship (understandably enough as they are really busy at their actual jobs). However, those guys were in charge to develop front end of the project.</p>
<p>I took over of the front-end (initially thought with vuejs, I used vuejs + quasar framework).</p>
<p>In the initial repository (gitlab), front-end (vue) and back-end (django + postgres) were included in different directories under the same repo (I am a newbie so I dont know if this is good practice or not, with this I mean there is a repo in gitlab with a /backend directory and a /frontend firectory, each containing the respectively code).</p>
<p>I wasn't sure If they were coming back or not so I developed in my own device and pushed to my own github. In the end, they didn't come back and I finished the mock up's so now I want to push to gitlab in order to continue with the project.</p>
<p>** the goal **<br />
I want replace the existing code under the repository's &quot;/frontend&quot; directory with my own code (as stated, there is also a &quot;/backend&quot; directory which contains the django code and off course, should'nt be removed).</p>
<p>** what I have researched **<br />
As I have researched, I have found the following options</p>
<ol>
<li>mirror the new code into the old project.
I found one article explaining how I can use the --mirror flag to copy my code to the project:</li>
</ol>
<blockquote>
<p>cd my/own/repo/path<br />
git push --mirror gitlabs/old/repo</p>
</blockquote>
<p>THE ISSUE:
I think this will overwrite the backend development and only keep my FE code.</p>
<ol start=""2"">
<li>add the new code as a submodule of the initial project</li>
</ol>
<blockquote>
<p>cd initial/project/<br />
git submodule add  frontendDirectory<br />
git commit -m &quot;Added the FE submodule to the project.&quot;<br />
git push</p>
</blockquote>
<p>THE ISSUE:
Although I think this is the way to go, I am having the following doubts:</p>
<p>a) will it erase all previous code in the frontEndDirectory or should I manually erase it beforehand? (I mean, I could easily remove it using rm -r initial/project/frontendDir/ but I dont know if this is good practice or git has a built-in option).<br />
b) the intial repo had both FE and BE together and now I partitioned them (FE specifically); although I'd think this is the best practice I don't feel competent enough to impose it (now BE will have to &quot;git submodule update --init --recursive&quot; if they want to pull the FE, as I understand).<br />
c) I'd have to manually update the FE submodule every time and have to keep working on the github repository instead of merging everything to the gitlab repo.</p>
<ol start=""3"">
<li>Manually removing old FE code and copying new code.</li>
</ol>
<p>Nothing would seem simpler as erasing old code with &quot;rm -r&quot; and copying the new one with &quot;cp -r&quot;, and the pushing to gitlab, yet I have the following questions:</p>
<p>a) how would I initialize my quasar/vue project in the old repo? will the copy be enough as I am getting everything from the already initialize quasar/vue project? or should I initialize a quasar/vue project in the destination (old repo's FE dir) folder first and then import (copy) everything?<br />
b) I will lose all the commits (I feel confy with my current code but still I think it'd be nice to keep the old commits).<br />
c) This feels like cheating and that there should be a built-in git option for easily, locally copying everything from one project to another</p>
<p>I think this issue might be rather outdated and/or trivial, still would appreciate any input or recommended lectures as the ones I found don't seem to fully answer my questions.</p>
<p>Thanks in advance and cheers.</p>
","1","10824700","0","0"
"28411721","555167","2015-02-09 14:11:14","1","53","<git><magento><github><git-submodules>","Multiple reposistories in git repository","<p>Can I create a multiple repos git repo for store magento modules with submodule? For example:</p>

<pre><code>modules (master)
|_module1 (master) // submodule
|_module2 (master) // submodule
</code></pre>

<p>Then, can I version and update separated each other? For Example, I have to use module2 in a project and I clone it by itself?</p>

<p>The main point is, I want to store a lot of magento modules on github in one repository, but separated.</p>

<p>Thank you!</p>
","1","555167","",""
"28412467","1273394","2015-02-09 14:48:28","1","1689","<git><git-submodules>","Create a git tag with submodule","<p>Small question about git submodule.</p>

<p>Assume I have a <code>projectA</code>, and it have a submodule maybe called <code>moduleA</code>.</p>

<p>Then I create a tag in <code>projectA</code>, <code>tagA</code>, then I may have some new commits for <code>projectA</code> or <code>moduleA</code> also, and then I want to go back to the <code>tagA</code>, using <code>git checkout tagA</code>.</p>

<p>The problem is <code>projectA</code> go back to <code>tagA</code>, but <code>moduleA</code> not.</p>

<p>Do you know how can make this?</p>
","0","1273394","0","0"
"46666196","3285171","2017-10-10 11:58:30","1","384","<git><build><azure-devops><git-submodules>","VSTS build fails to checkout git submodules","<p>I'm trying to build a project in VSTS that includes a git submodule.
The build is configured to checkout submodules so I assume that it should checkout the submodule. When I run the build the ""Get sources"" step shows that the module has been checked out.</p>

<pre><code> Submodule path '*************': checked out '0740556614e1cf87da0873b1982b03aaf0b3886d'
</code></pre>

<p>However in the ""Build solution"" step claims that it can not find the files. When I search for the files on the build server I don't see the module that should have been checked out. So that explains why the build can't find them. </p>

<p>What I don't understand is why it claims to have checked it out, but it really didn't. The build is a clone of another build definition that does exactly the same with the same git submodule for another repository and in that build it works just fine.</p>

<p>does anyone know what the issue might be?</p>

<p>Here is the build log:</p>

<pre><code>2017-10-16T11:18:46.7198274Z ValidateSolutionConfiguration:
2017-10-16T11:18:46.7198274Z   Building solution configuration ""dev|any cpu"".
2017-10-16T11:18:46.7823299Z Project ""D:\agent4\_work\1\s\**********.Deployment\Deployment.sln"" (1) is building ""D:\agent4\_work\1\s\**********.Deployment\AzureResourceGroup\AzureResourceGroup.deployproj"" (2) on node 1 (Publish target(s)).
2017-10-16T11:18:46.7823299Z PrepareForBuild:
2017-10-16T11:18:46.7823299Z   Creating directory ""bin\Dev\"".
2017-10-16T11:18:46.7823299Z   Creating directory ""obj\Dev\"".
2017-10-16T11:18:46.7979556Z ##[error]C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(3608,5): Error MSB3030: Could not copy the file ""obj\Dev\AzureResourceGroup.exe"" because it was not found.
2017-10-16T11:18:46.7979556Z C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(3608,5): error MSB3030: Could not copy the file ""obj\Dev\AzureResourceGroup.exe"" because it was not found. [D:\agent4\_work\1\s\**********.Deployment\AzureResourceGroup\AzureResourceGroup.deployproj]
2017-10-16T11:18:46.7979556Z Done Building Project ""D:\agent4\_work\1\s\**********.Deployment\AzureResourceGroup\AzureResourceGroup.deployproj"" (Publish target(s)) -- FAILED.
2017-10-16T11:18:46.8135812Z Project ""D:\agent4\_work\1\s\**********.Deployment\Deployment.sln"" (1) is building ""D:\agent4\_work\1\s\**********.Deployment\Scripts\Scripts.pssproj"" (3) on node 1 (Publish target(s)).
2017-10-16T11:18:46.8135812Z PrepareForBuild:
2017-10-16T11:18:46.8135812Z   Creating directory ""bin\Debug\"".
2017-10-16T11:18:46.8135812Z   Creating directory ""obj\Debug\"".
2017-10-16T11:18:47.0635934Z ##[error]C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(3608,5): Error MSB3030: Could not copy the file ""obj\Debug\MyApplication.exe"" because it was not found.
2017-10-16T11:18:47.0635934Z C:\Program Files (x86)\MSBuild\14.0\bin\Microsoft.Common.CurrentVersion.targets(3608,5): error MSB3030: Could not copy the file ""obj\Debug\MyApplication.exe"" because it was not found. [D:\agent4\_work\1\s\**********.Deployment\Scripts\Scripts.pssproj]
2017-10-16T11:18:47.0635934Z Done Building Project ""D:\agent4\_work\1\s\**********.Deployment\Scripts\Scripts.pssproj"" (Publish target(s)) -- FAILED.
2017-10-16T11:18:47.0635934Z Done Building Project ""D:\agent4\_work\1\s\**********.Deployment\Deployment.sln"" (Publish target(s)) -- FAILED.
2017-10-16T11:18:47.0635934Z 
2017-10-16T11:18:47.0635934Z Build FAILED.
</code></pre>

<p>What I also don't understand is why it is looking for .exe files because it shouldn't and they aren't there.</p>
","4","3285171","",""
"10856138","613997","2012-06-01 19:17:55","40","13952","<git><git-submodules>","Make change to a git submodule, and keep the changes","<p>I've cloned a git submodule of one of my libraries into a project I'm working on. The thing is that, after cloning, I need to change some lines in the cloned submodule, <strong>but I don't want to push those changes into the original repository</strong>.</p>

<p>I want those changes to stay in the superproject. Is this possible? How can I achieve that?</p>

<p>EDIT: As @GoZoner said, basically its:</p>

<ol>
<li>git clone  foo;</li>
<li>cd foo;</li>
<li>git submodule init;</li>
<li>git submodule update;</li>
<li>cd path/to/submodule;</li>
<li>git checkout master;</li>
<li><strong>Make changes to the submodule</strong></li>
<li>git commit -am ""Something"";</li>
<li>git push origin (the superproject);</li>
</ol>

<p>Then when I clone the superproject in another computer (up to step 4), I want those changes to be saved, <em>in the superproject</em>.</p>
","4","613997","0","0"
"65586810","2414957","2021-01-05 21:27:00","0","102","<git><github><git-submodules>","Pushing the changes to the git repos inside a cloned git repo to my private git repo","<p>I have git cloned <a href=""https://github.com/facebookresearch/phosa"" rel=""nofollow noreferrer"">phosa git repo</a> which depends on 3 other git repos. I have git cloned those three and have modified their codes as needed. I now want to push the changes to my private git repo but I get the following warning.</p>
<p>How can I push the changes for these 3 git repo cloned inside the phosa repo by me?</p>
<pre><code>$ git add .
warning: adding embedded git repository: external/detectron2
hint: You've added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint: 
hint:   git submodule add &lt;url&gt; external/detectron2
hint: 
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint: 
hint:   git rm --cached external/detectron2
hint: 
hint: See &quot;git help submodule&quot; for more information.
warning: adding embedded git repository: external/frankmocap
warning: adding embedded git repository: external/multiperson
</code></pre>
<p>Here's my <code>git status</code> results:</p>
<pre><code>$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
    modified:   .gitignore
    new file:   PHOSA_demo.ipynb
    new file:   external/detectron2
    new file:   external/frankmocap
    new file:   external/multiperson
    new file:   input.jpg
    modified:   phosa/pose_optimization.py
    modified:   requirements.txt

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
    modified:   external/frankmocap (modified content)
    modified:   external/multiperson (modified content)
</code></pre>
","0","2414957","",""
"65587099","8727518","2021-01-05 21:51:39","0","196","<docker><lua><gitlab-ci><git-submodules>","How to include code from another repository in gitlab registry?","<p>I have a shared registry (a docker image with tools installed for running my code) which is used by multiple repositories. I have created a new repository called LuaServer, which uses code from another repository called LuaDB. In LuaServer I have created a test which requires the code from LuaDB, this test is run in a pipeline on GitLab CI/CD in said shared registry. I get an error during the execution of this test, stating the following:</p>
<blockquote>
<p>spec/serializer_spec.lua:36: module 'luadb.manager.AST' not found:No LuaRocks module found for luadb.manager.AST</p>
</blockquote>
<p>Now I tried to directly clone the repository and set it up in the registry (a docker image basically which now has LuaDB), which did not seem to work as the error stays the same. Then I tried to include LuaDB as a submodule for LuaServer, but this still did not solve my problem. Is there a way to work this out?</p>
","0","8727518","",""
"47051935","2099873","2017-11-01 09:38:51","1","76","<git><bitbucket><git-submodules>","git uses - sometimes - ""git""-account for submodules instead of user account","<p>At our office, we have a private Bitbucket server.  Naturally, each of our developers has accounts.  The other day, we added our first submodule to our main repository.  But the process has not been without its hiccups.</p>

<p>Particularly one thing I cannot explain is how I tell git to use the user's account when cloning the submodule.  Assume our internal Bitbucket server is called <code>bitbucket:7990</code> and we clone over <code>http</code>.  Wouldn't the appropriate way to add a submodule's URL be <code>http://git@bitbucket:7990/scm/project/repo.git</code>?</p>

<p>I thought as much, since it worked on most of our machines.  But on one of our developers' machine, git tried to use ""git"" as the account name - obviously failing, as that account doesn't exist on our system.  Why didn't it use the developer's own account to clone?  Like it did on the other developers' machine?</p>

<p>I could not spot a difference in their <code>.git/config</code>.  Eventually, I ended up fixing it by manually inserting their account name into the submodule's URL in their <code>config</code>-file.  But I fear the issue may come up again next time we add another submodule.</p>

<p>Am I handling submodules wrong?  Or is there some trick I am missing?</p>

<p>For the record, I tried replacing the <code>http</code>-cloning to <code>ssh</code>-cloning, but it still tried to log in with the ""git"" account.  My own <code>config</code>-file uses the <code>git</code>-account.  I also tried removing the protocol, but then the <code>:</code> portion of the URL changes meaning, and I do not know how to specify the custom SSH port (as it noted it failed to log in on port 22).</p>

<p>Additionally, we are on Windows, and we are using SmartGIT as our main GUI.  But using the git command directly, the same issue persisted.</p>
","0","2099873","",""
"65601778","12338800","2021-01-06 18:56:55","1","486","<bash><git><git-submodules>","Running a script that contains git commands using `git submodule foreach` causes a `not a git repository` error","<p>I'm using a few git submodules in my project, each with their own dependencies. I'm running the top level <code>setup.sh</code>, which installs top level deps and then runs this, which calls each submodule's <code>setup.sh</code> script.</p>
<pre><code>git submodule foreach 'if [ -e &quot;setup.sh&quot; ]; then ${SUDO} &quot;`pwd`/setup.sh&quot;; fi'
</code></pre>
<p>That runs fine, but the problem arises when the <code>sub1</code> and <code>sub2</code> submodules call their own <code>setup.sh</code> script that does the exact same thing.
When any git command is run by the <code>sub1</code> and <code>sub2</code> <code>setup.sh</code> script, it fails with the error:</p>
<pre><code>fatal: not a git repository: '.git'
</code></pre>
<p><code>pwd</code> in the <code>sub1</code> and <code>sub2</code> scripts give me the correct path, and the scripts work fine in isolation.</p>
<p>Project structure:</p>
<pre><code>.
├── setup.sh
└── submodules
    ├── sub1
    |   ├── setup.sh
    |   └── submodules
    |       └── sub3
    |           └── setup.sh
    └── sub2
        ├── setup.sh
        └── submodules
            └── sub4
                └── setup.sh
</code></pre>
<p>Apologies if this is a stupid question, thanks a bunch.</p>
","4","12338800","",""
"10906554","1098873","2012-06-05 23:52:44","414","307316","<git><git-submodules>","How do I revert my changes to a git submodule?","<p>I have a git submodule (RestKit) which I have added to my repo.</p>

<p>I accidentally changed some files in there and I'd like to go back to the source version. In order to do that, I tried to run </p>

<pre><code>Mac:app-ios user$ git submodule update RestKit
</code></pre>

<p>But as you can see here, this did not work as it is still ""modified content"":</p>

<pre><code>Mac:app-ios user$ git status
...
#   modified:   RestKit (modified content)
</code></pre>

<p>Even </p>

<pre><code>Mac:app-ios user$ git submodule update -f RestKit 
</code></pre>

<p>doesn't revert locally modified files.<br>
How do I reset the content of that submodule?</p>
","1","1098873","0","0"
"10914022","","2012-06-06 12:14:54","200","231198","<git><version-control><git-submodules>","How do I check out a specific version of a submodule using 'git submodule'?","<p>How would I go about adding a Git submodule for a specific tag or commit?</p>
","1","","0","0"
"11275355","1282175","2012-06-30 15:33:03","0","349","<git><git-submodules>","How to share a common git submodule within a superproject","<p>I am organizing all of my dotfiles into a git super-project and putting any similar files into submodules so I can pull them out individually if I need to. The issue I have run into is that I would like to have a common aliases file (and perhaps others) for both bash and zsh. Ideally I would like to have these common files be included if I choose to clone just one of bash/zsh on a system.</p>

<p>Right now I have the submodules <code>~/.bash</code> and <code>~/.zsh</code>. What would be nice is a <code>~/.shell</code> submodule that is actually a submodule of both <code>~/.bash</code> and <code>~/.zsh</code>. Can something like this be done? If so, how?</p>

<p>I am trying to avoid doing something like <code>~/.bash/shell</code> and <code>~/.zsh/shell</code> and I don't want to have to remember to update one everytime I change the other. One possible solution might be to hard link <code>~/.bash/shell</code> and <code>~/.zsh/shell</code>, but then if I clone my full dotfile repository onto a new machine, I will need to set up this hard link again.</p>

<p>Hopefully I have explained by question well enough. Any suggestions?</p>

<p><strong>EDIT:</strong> I just found some similar stack exchange questions (<a href=""https://stackoverflow.com/questions/4115817/duplicate-submodules-with-git"">here</a> and <a href=""https://stackoverflow.com/questions/1419498/git-nested-submodules-and-dependencies"">here</a>). It sounds like hard linking or creating a special bash-only and zsh-only super project might be the only real options. I don't really like the multiple super project option as I feel it is too much to keep updated. Is there another option that I'm still missing?</p>
","1","1282175","0","0"
"29187583","2216833","2015-03-21 20:17:39","1","591","<git><mercurial><bitbucket><git-submodules>","git submodule add failed with bitbucket repo","<p>I'm trying to add a repo as a submodule for my project as it will depend on it. The project is hosted on bitbucket, and when I tried to add it using this: <code>git submodule add https://bitbucket.org/blueluna/transmissionrpc</code>, I got the following:</p>

<pre><code>Cloning into 'transmissionrpc'...
fatal: repository 'https://bitbucket.org/blueluna/transmissionrpc/' not found
Clone of 'https://bitbucket.org/blueluna/transmissionrpc' into submodule path 'transmissionrpc' failed
</code></pre>

<p>I clicked on the link itself in terminal, which led to a valid link. I'm not sure how to add this in my github repo. It will also give me issues through git clone in both SSH and HTTPS. Note, the original command copied for cloning this repo is as follows: <code>hg clone ssh://hg@bitbucket.org/blueluna/transmissionrpc</code>, which uses mercurial as far as I know.</p>
","0","2216833","0","0"
"65946723","1185981","2021-01-28 23:30:22","2","4353","<git><gitlab><gitlab-ci><git-submodules>","How to update submodules in a gitlab CI/CD","<p>I have a project organized in the following tree</p>
<pre><code>|.
|..
|-- devops
|-- project1
|-- project2
</code></pre>
<p>In the devops folder, I have included the other two projects as submodules, since these two projects are developed independently by two different teams.</p>
<pre><code>|.
|..
|-- project1@0deed0fa
|-- project2@0beef0fb
|-- .gitlab-ci.yml
</code></pre>
<p>I have setup the pipeline to deploy the projects. Whenever there are new commits on any of the projects, a trigger is setup to run the <code>devops</code> project pipeline. As part of the devops jobs, I run <code>git submodule</code> commands to fetch and merge. Then build. It works.</p>
<p>The problem I have is, over a period of time, there are a lot of changes made to the submodules. The changes from the last submodule commit to the devops project folder is replayed every time there is a commit on any of the projects. Once a month, I manually update the <code>devops</code> project folder and update to the latest commit of the submodule projects. I can commit the changes from the devops pipeline task, but that will generate new pipeline in the same devops  pipeline. (I didn't test it but it seems obvious).</p>
<p>Is there any way I can update the submodules to the latest commit as part of the devops pipeline ?</p>
<p>Thanks.</p>
","1","1185981","0","0"
"47413735","4032654","2017-11-21 12:58:52","0","669","<git><attributes><config><git-submodules>","Using .gitconfig and .gitattributes of a submodule","<p>in my git repo <strong>A</strong> I am using a submodule (<strong>B</strong>), which comes with a .gitattributes and a .gitconfig. Those basically set a git filter for .vcxproj files (.gitattributes) and 'implementing' the it (.gitconfig).</p>

<p>When I am in the repository <strong>B</strong> itself the .gitattribute/.gitconfig setup works find.
I enabled it via </p>

<pre><code>git config --local input.path ../.gitconfig
</code></pre>

<p>But how can I <em>activate</em> those filters when I am in the repository <strong>A</strong> and have <strong>B</strong> as submodule in A?</p>
","0","4032654","",""
"29209471","279712","2015-03-23 11:49:17","3","140","<git><git-submodules><gitignore><subdirectory><git-subtree>","Completely independent Git project within another project using only gitignore","<p>Is it possible to work with two <strong>independent</strong> git projects, one within another in the directory tree and separate them using only gitignore (<em>without <a href=""https://stackoverflow.com/questions/1811730/how-do-i-work-with-a-git-repository-within-another-repository"">submodules</a> or <a href=""https://stackoverflow.com/questions/720669/projects-within-projects-using-git"">subtrees</a></em>)?</p>

<p>Here is the folder structure:</p>

<pre><code>repo_a     &lt;-- repository A folder
   /.git
   /folder_1
   /folder_2
   /repo_b    &lt;-- repository B folder (to be ignored by repository A)
       /.git
       /folder_3
       /folder_4
</code></pre>
","2","279712","",""
"29244398","1808261","2015-03-24 22:53:20","9","1776","<git><git-submodules>","git submodule update ""no-fetch""","<p>When I issue a sub-module update and include ""--no-fetch"" like so:</p>

<pre><code>git submodule update --remote --no-fetch
</code></pre>

<p>The <a href=""http://git-scm.com/docs/git-submodule"" rel=""noreferrer"">documentation</a> states:</p>

<blockquote>
  <p>In order to ensure a current tracking branch state, update --remote
  fetches the submodule’s remote repository before calculating the
  SHA-1. If you don’t want to fetch, you should use submodule update
  --remote --no-fetch.</p>
</blockquote>

<p>I'm a bit confused about the ""--no-fetch"" part. If I call update without it:</p>

<pre><code>git submodule update --remote
</code></pre>

<p>I understand that a fetch will not be performed - but this also means I am not guaranteed a ""<em>current tracking branch state</em>"" ? What exactly does that mean?</p>

<p>Under what scenario would I not want the guarantee of a <em>current tracking branch state</em>?</p>
","0","1808261","",""
"66003962","12917171","2021-02-02 05:12:36","-1","296","<git><go><dependencies><git-submodules><go-modules>","How to get sub-dependencies of a dependency added as a git submodule","<p>Let's say I am working on a Go project, called <em>X</em>, which has a dependency upon a repo <em>Y</em>.
I am not using go mods in my project <em>X</em> yet.</p>
<p>I have now added <em>Y</em> as a git submodule in my project <em>X</em> in the vendor pkg using the following command:
<code>git submodule add &lt;URL to Git repo&gt; &lt;Directory in vendor pkg&gt;</code>.</p>
<p>The repo Y has sub-dependencies on a project, say <em>Z</em> defined inside it in <strong>Gopkg.toml</strong> and <strong>go.mod</strong> files. Now, when I put my code to a server and run the following command to fetch the submodule <em>Y</em>, files of dependency <em>Z</em> are still missing.</p>
<p>What should I do to download the files for <em>Z</em> using the <em>Gopkg.toml</em> and <em>go.mod</em> files without explicitly going into <em>Y</em> and downloading.</p>
","10","12917171","0","0"
"47470271","4717188","2017-11-24 09:36:40","6","2999","<git><git-submodules>","What does ""--remote"" actually do in ""git submodule update --remote""?","<p>I just do not understand the help page of Git. So what does happen or what is the difference?</p>

<p>Assume I have a Git project A with a submodule B. Submodule B does have a submodule C. After cloning the repository A points to a specific commit of B. And B points to a specific commit of C.</p>

<p>If I am inside A I go to B by</p>

<pre><code>cd B
</code></pre>

<p>Now I type</p>

<pre><code>git submodule update --remote
</code></pre>

<p>or</p>

<pre><code>git submodule update
</code></pre>

<p>What is the difference? Assuming that the remote server does have changes in A, B and C.</p>

<p>I <em>guess</em> that using ""git submodule update --remote"" keeps the reference to the specific version of C. Does using it without <code>--remote</code> update to the latest version of C?</p>
","0","4717188","0","0"
"66015065","3681507","2021-02-02 17:53:29","0","713","<commit><git-submodules>","Commit type when updating a git submodule (Conventional Commits)","<p>To respect the <a href=""https://www.conventionalcommits.org/"" rel=""nofollow noreferrer"">Conventional Commits</a> guide, what type (<em>fix, feat, chore, ...</em>) of commit should we use when it is related to an update of a git submodule ?</p>
<p>Best regards,</p>
","1","3681507","",""
"29266456","78182","2015-03-25 21:03:03","1","72","<git><git-submodules>","Add git submodule with files?","<p>Is there a way to add a git submodule with all of its files? I really just need the files as a subdirectory with an easy way to run the update with git fetch and git pull.</p>

<p>I tried git cloning the repository but that added the directory as a submodule without the files.</p>
","0","78182","0","0"
"47476384","445860","2017-11-24 15:36:59","1","379","<git><boost><window><git-submodules>","Git - Checkout specific boost version fails (""Not a git repository"")","<p>I want to integrate boost in my local build system. The idea is to automatically retrieve a specific version of boost and build it. To improve the speed I want to keep a local cache of the boost repository. Therefore the steps would be:</p>

<ol>
<li>Clone or fetch latest results if already cloned</li>
<li>Checkout the requested version </li>
<li>Build, copy, ...</li>
</ol>

<p>Step 1 and 2 basically boil down to the following git commands</p>

<hr>

<pre><code>git clone --recursive -c core.longpaths=true -j 20 https://github.com/boostorg/boost.git .
git checkout --recurse-submodules tags/boost-1.65.1
</code></pre>

<hr>

<p>The clone itself works fine but the checkout fails with the following message</p>

<hr>

<pre><code>fatal: Not a git repository: ../../.git/modules/libs/hana
fatal: Not a git repository: ../../.git/modules/libs/metaparse
Note: checking out 'tags/boost-1.65.1'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &lt;new-branch-name&gt;

HEAD is now at 436ad1dfc... Revert accidental submodule changes  in last commit
M       libs/hana
M       libs/metaparse
</code></pre>

<hr>

<p>This is on a Windows 7 system with git 2.15.0</p>

<p><strong>Edit:</strong></p>

<p>I also tried to place the repository in a short directory tree and removed the <code>core.longpaths</code> flag. Same issue...</p>
","7","445860","",""
"11376418","527962","2012-07-07 15:49:29","1","1728","<git><git-submodules><gitignore>","git - Submodule issue with .gitignore","<p>I'm having the following error:</p>

<blockquote>
  <p>git.exe submodule add  -- ""D:/Programming/boost_1_50_0"" 
  ""C:/Users/qwerty/Documents/Visual Studio 2010/Projects/framework""</p>
  
  <p>The following path is ignored by one of your .gitignore files:
  C:/Users/qwerty/Documents/Visual Use -f if you really want to add it.</p>
  
  <p>git did not exit cleanly (exit code 1)</p>
</blockquote>

<p>none of my gitignore files specifies <em>C:/Users/qwerty/Documents/Visual</em> even remotely.</p>

<p>When I try the -f flag I get the following message:</p>

<blockquote>
  <p>Adding existing repo at 'C:/Users/qwerty/Documents/Visual Studio
  2010/Projects/ framework' to the index fatal:
  'C:/Users/qwerty/Documents/Visual Studio 2010/Projects/framework' is
  outs ide repository Failed to add submodule
  'C:/Users/qwerty/Documents/Visual Studio 2010/Projects/ framework'</p>
</blockquote>
","5","527962","",""
"12309884","888856","2012-09-06 23:37:45","3","1003","<git><github><git-submodules>","Make changes to a git submodule and then add those into my main project","<p>I have a git project P. Within my project P is a submodule Q that was cloned off a 3rd party library's master branch.</p>

<pre><code>P
|
 - src
 - Vendor
    |
     - Q
</code></pre>

<p>I do not have permission to make push any changes to the 3rd party library's remote repo.</p>

<p>I made some fixes in <code>Q</code> and I now want those to be pushed into the <code>master</code> branch of my project <code>P</code> so my team members can use them too.<br>
Currently I am developing on my '<code>dev</code>' branch.</p>

<p>I tried the following steps from within <code>P</code>:</p>

<ol>
<li><code>cd Vendor/Q</code></li>
<li><code>git branch my-fixes</code></li>
<li><code>git checkout my-fixes</code></li>
<li>Make fixes</li>
<li><code>git add</code> </li>
<li><code>git commit -m 'My fixes to 3rd Party Library Q'</code></li>
<li><code>cd ../..</code></li>
<li><code>git add Vendor/Q</code></li>
<li><code>git commit -m 'Changes/fixes made to submodule Q'</code></li>
<li><code>git push</code></li>
</ol>

<p>However, this does not seem to solve my problem. Can someone help me out?</p>
","0","888856","",""
"29965058","267073","2015-04-30 10:16:02","7","1103","<git><git-submodules><git-subtree>","How to integrate build output from one git repo into another","<p>I am working on a 2 projects which are stored in 2 git repos Project1 and Project2</p>

<p>Project1 is a javascript project. It has its own repo (for example <a href=""https://github.com/gandra/project1.git"">https://github.com/gandra/project1.git</a>)<br>
Project2 is a java maven project. It has its own repo (for example  <a href=""https://github.com/gandra/project2.git"">https://github.com/gandra/project2.git</a>)</p>

<p>Here is a current workflow which I want to improve:</p>

<ol>
<li>Commit changes in a Project1 and push it to origin</li>
<li>Run grunt in a Project1. This generates Project1/build directory</li>
<li>Manually copy Project1/build contents into Project2/libs/project1-lib directory</li>
<li>Commit changes(Project2/libs/project1-lib) in Project2</li>
<li>Runk jenkins build and deploy</li>
</ol>

<p>I want to somehow to avoid step 3 (manual copy of Project1/build contents into Project2/libs/project1-lib directory)
I thought about integrate Project1 into Project2 as a subtree but the problem with this approach is beacuse it gets all Project1 directory structure into Project2/libs/project1-lib and I want only to take subdirectory of a Project1 (Project1/build/*)</p>

<p>Some important note:
Project1 changes occurs only in its own repo(<a href=""https://github.com/gandra/project1.git"">https://github.com/gandra/project1.git</a>) and this change should be propagated to Project2. So there is no update of Project1 from Project2/libs/project1-lib
In other words:<br>
- Commits in Project1 affect Project2<br>
- commits in Project2 not affects Project1</p>
","2","267073","0","0"
"12333674","1012909","2012-09-08 19:11:07","1","487","<git><git-submodules>","Add repository to a git tree","<p>I have a git repository online and I use, as many do, to keep track of my programs. It worked all fine with the usual procedure from the root of my directory's tree:</p>

<pre><code>git add . 
git commit
git push origin master
</code></pre>

<p>When one day I found a subdirectory in my tree have become green (on the git site) and was impossible to access. Now I know the green color is for a submodule (even if I have not understood what this mean) but I'd like it to be a real directory, one where I can view and download what's there or examine modifications. The question is, how can I make this directory to become normal again, with all its subdirectory and file inside without touching the other directories inside the tree? </p>

<p>Thanks </p>
","0","1012909","0","0"
"29980506","1260682","2015-05-01 01:44:45","1","246","<github><git-submodules>","adding collaborators to github submodules only","<p>Is there a way to give a user only access to a submodule in a repo on github? I know I can do that for the entirely repo but I only want to do so for a submodule.</p>
","0","1260682","",""
"12349931","6236","2012-09-10 10:37:03","1","459","<git><history><git-submodules><git-subtree>","What came first: git subtree merge strategy or git submodule?","<p>What is more recent invention — git subtree merge strategy (not the new git-subtree command) or git submodule command (or maybe underlying mechanism if there was a separate one symmetrical to git subtree command vs. merge strategy).</p>

<p>What was included in Git distribution release first? </p>

<p>Bonus points for links to relevant Git ML posts.</p>

<p>I tried do dig that info from Git commit history, but got lost somewhere in 2007-2008 for both features.</p>
","0","6236","0","0"
"47775517","4504709","2017-12-12 14:54:27","-2","1033","<git><git-submodules>","Access to submodules is not possible ( Not a git repository)","<p>I wan to add the repositories of a project to my project as submodules.  The link of the repositories can be found in the .gitmodules.</p>

<p>I copied the links to clone the repositories including their submodules. </p>

<pre><code>:~$ git clone --recursive [URL to Git repo]
</code></pre>

<p>After this I wanted to load the cloned submodules:</p>

<pre><code>:~$ git submodule update --init –recursive
</code></pre>

<p>Unfortunately, I get this error:</p>

<p><strong>fatal: Not a git repository (or any of the parent directories): .git</strong></p>

<p>I am not sure how to proceed.</p>
","1","4504709","",""
"12373949","332451","2012-09-11 16:16:43","2","996","<git><proxy><git-submodules>","How to ""git clone"" including submodules which are not reachable from client host?","<p>I want to clone a repository including its submodules.</p>

<p>I've learned about the <code>--recursive</code> option at <a href=""https://stackoverflow.com/questions/3796927/how-to-git-clone-including-submodules"">this question</a>, but this solution requires the submodule repositories to be accessible from the cloning host.</p>

<p>Is there some switch to clone the submodules directly from the accessible host?</p>

<p>There is a https proxy through which I can theoretically reach the submodules repos, but the cloning host doesn't have the needed certificates installed. So finding a way to install a certain https certificate in user space might be a solution as well.</p>
","3","332451","0","0"
"12380993","440646","2012-09-12 03:55:48","0","560","<git><mercurial><git-submodules>","How do I clone a git repo into hg repo as a submodule?","<p>Have searched around, and was pointed to this: <a href=""https://www.mercurial-scm.org/wiki/Subrepository"" rel=""nofollow noreferrer"">https://www.mercurial-scm.org/wiki/Subrepository</a></p>

<p>But thats a hg within a hg. (hg aka mercurial)</p>

<p>I need the steps to clone the git repo into my current hg repo as a submodule.</p>

<p>By the way, I have both hg and git installed.</p>

<p>So I'm wondering, can I simply go into my hg repo's folder, and do a <code>git clone</code> there?</p>

<p>So hg alone, will manage the whole application (including the git repo), while git manages, its own repo.</p>

<p>Will there be any implications?<br>
Is this method the so called git submodule within hg?</p>
","0","440646","",""
"66314971","13664523","2021-02-22 11:37:20","1","181","<c#><git><git-submodules><libgit2sharp>","How to add git sub-module in a repo using LibGit2sharp","<p>I'm working with a local Git repository in some .NET code using the open source library used by the Visual Studio Tools for Git, LibGit2Sharp.</p>
<p>I need to create some submodules. The code I used was:</p>
<pre><code>$ git submodule add &lt;remote_url&gt; &lt;destination_folder&gt; 
$ git submodule init
$ git submodule update
</code></pre>
<p>Which I've obtained a new file called '.gitmodules' where says:</p>
<pre><code>[submodule &quot;destination_folder&quot;]
    path = destination_folder
    url = http://&lt;my_gitlab_domain&gt;/projects/&lt;my_project&gt;/&lt;submodule_name&gt;.git
</code></pre>
<p>This works perfectly but it's not exactly what I'm looking for. I've been looking up a way to get the same result by using the LibGit2Sharp API. I've been searching for any other similar posts, but they don't seem to be what I exactly need.</p>
<p>I saw this question about the same issue but in C++, but I don't find a way to make it work for C#.</p>
<p><a href=""https://stackoverflow.com/questions/38122130/how-to-add-a-git-sub-module-to-a-super-project-in-code-using-libgit"">How to add a git sub-module to a super-project in code using libgit2</a></p>
<p>If any of you can help me by sending any source of information or an example for what I need I'll be very grateful.</p>
<p>Thanks in advance.</p>
","2","13664523","",""
"16463330","27641","2013-05-09 13:47:50","5","728","<git><git-submodules>","Is the git submodule name used for anything other than display?","<p>The <code>.gitmodules</code> file used to track submodules within a git repository normally has a name for each submodule, like this:</p>

<pre><code>[submodule ""my-submodule""]
  path = foo/bar/my-submodule
  url = http://github.com/myuser/original-my-submodule
</code></pre>

<p>However, I've also seen it written with the local path duplicated in the submodule name:</p>

<pre><code>[submodule ""foo/bar/my-submodule""]
  path = foo/bar/my-submodule
  url = http://github.com/myuser/original-my-submodule
</code></pre>

<p>I have both of these styles in one of my repositories, probably by accident, and I'm not sure why they are different.</p>

<p>I'd like to make sure I have these expressed correctly. Which of these is ""correct""? Does it matter? Is the submodule name used for anything other than display?</p>
","0","27641","0","0"
"58653405","","2019-11-01 02:30:25","1","212","<git><git-submodules><git-pull>","Will git pull include new submodules?","<p>When I clone a repository with the following command, it automatically includes submodules.</p>

<pre><code>git clone --recursive https://github.com/xxxxxxxx
</code></pre>

<p>I have a question. If you later update the repository with <code>git pull</code>, will it include the newly added submodules? (if there is a newly added submodule)</p>
","0","","",""
"30754878","1544627","2015-06-10 11:25:22","5","3462","<git><git-submodules>","Recursively cloning a git repo doesn't pull submodules","<p>I'd like to clone a git repo [1], which has a submodule defined in <code>.gitmodules</code>:</p>

<pre><code>[submodule ""PointInCircle""]
        path = PointInCircle
        url = https://github.com/midas-journal/midas-journal-843
</code></pre>

<p>Following these questions [2-4], I tried:</p>

<pre><code>$ git clone --recursive https://github.com/midas-journal/midas-journal-851
</code></pre>

<p>If I understand <code>submodule</code>s correctly, which I obviously don't, there should be a directory inside <code>midas-journal-851</code> called <code>PointInCircle</code> with the second repo cloned into it.  However, no <code>PointInCircle</code> directory is created and as far as I can tell the code isn't cloned anywhere.  For good measure, I also tried...</p>

<pre><code>$ git submodule init
$ git submodule update
</code></pre>

<p>...as well as...</p>

<pre><code>$ git submodule update --init --recursive
</code></pre>

<p>...and...</p>

<pre><code>$ git submodule foreach --recursive git submodule update --init
</code></pre>

<p>...in the cloned directory.  Each command runs without printing anything to the console, and I don't see any changes in the directory.</p>

<p>Any ideas what I'm doing wrong?</p>

<p>[1] <a href=""https://github.com/midas-journal/midas-journal-851"" rel=""nofollow noreferrer"">https://github.com/midas-journal/midas-journal-851</a><br>
[2] <a href=""https://stackoverflow.com/questions/25200231/cloning-a-git-repo-with-all-submodules"">Cloning a git repo with all submodules</a><br>
[3] <a href=""https://stackoverflow.com/questions/3796927/how-to-git-clone-including-submodules"">How to `git clone` including submodules?</a><br>
[4] <a href=""https://stackoverflow.com/questions/24057871/git-submodule-update-init-recursive-vs-git-submodule-foreach-recursive"">&#39;git submodule update --init --recursive&#39; VS &#39;git submodule foreach --recursive git submodule update --init&#39;</a></p>
","0","1544627","0","0"
"58721641","4036104","2019-11-06 01:03:07","1","337","<git><git-submodules>","How can I force the use of a specific branch on a git submodule when commiting and pushing changes in a superproject?","<p>I want to do this, so I can enforce release branches in submodules when pushing a release branch in the superproject</p>
","0","4036104","",""
"58726343","10149291","2019-11-06 08:58:08","0","52","<git><git-submodules>","Why is git blind to new commits in a submodule?","<p>I've made a new commit inside a submodule but git doesn't indicate the submodule is changed (new commits) on the root level of the repository.</p>

<p><code>git status</code> says everything's up-to-date and doesn't indicate a change in the submodule (e.g. new commits).</p>

<p><code>git commit --allow-empty</code> didn't help either.</p>
","2","10149291","",""
"1974181","51923","2009-12-29 11:33:07","47","41386","<git><git-submodules>","Can't add git submodule when specified as a relative path","<p>I'm trying to add a submodule to my git repo, and I'm getting this error in return:  </p>

<pre><code>remote origin does not have a url defined in .git/config
</code></pre>

<p>any ideas about what this might be? I tried googling for it but only one vague link comes up.</p>

<p>I'm doing this:  </p>

<pre><code>git submodule add ../extern/Lib1 lib  
</code></pre>

<p>I'm expecting this to create a submodule <code>lib/Lib1</code><br>
I'm aware that this will only create a reference and that I then have to update/init (not crystal clear on this part, haven't gotten that far; I'm just learning the submodule command).</p>
","5","51923","0","0"
"20929094","3161631","2014-01-05 01:51:21","3","1295","<git><github><git-submodules>","How to upload files of local submodule on github?","<p>I have several projects on my local machine. Created a superproject and added projects in different folders as submodules. All submodules files are copied in superproject. File .gitmodules contains local urls. If I try to push superproject I don't see files of my submodules.</p>

<p>How I can to push superproject with submodules files (instead commits) on github?</p>

<p>P.S. I would like to work separately with projects and publish them as one repo.
Thanks for answers!</p>
","0","3161631","0","0"
"20929336","3156085","2014-01-05 02:32:03","328","91087","<git><git-submodules>","Git submodule add: ""a git directory is found locally"" issue","<p>I'm actually trying to learn how to use git, including the <code>git submodule</code> subcommands.
I already set up a server on which I can host, push and pull git repositories by using SSH.
I created a main git repository ""Travail"" on this server in which I would like to put all my projects as submodules.</p>

<p>In my Travail repository, I already added a project of mine as a submodule at <code>tools/libft</code>:
I'm able to develop this submodule, to push and to pull it.</p>

<p>But when I try to add another submodule (named fdf, from fdf.git on my server), I get the following issue :</p>

<pre><code>git submodule add ssh://XXX.XXX.XXX.XXX:XXXXX/opt/git/fdf.git projets/fdf
</code></pre>

<blockquote>
  <p>A git directory for 'projets/fdf' is found locally with remote(s):
        origin    ssh://git@XXX.XXX.XXX.XXX:XXXXX/opt/git/fdf.git
      If you want to reuse this local git directory instead of cloning again from
        ssh://XXX.XXX.XXX.XXX:XXXXX/opt/git/fdf.git
      use the '--force' option. If the local git directory is not the correct repo 
      or you are unsure what this means choose another name with the '--name' option.</p>
</blockquote>

<p>There is actually no subdirectory in <code>projets/</code></p>

<p>I read on another thread that I should use <code>git submodule sync</code> or edit the .gitmodules file in which the URL to my submodule's origin repository could have changed.</p>

<p>But my .gitmodules file only contains the information about my first submodule (tools/libft), not about projets/fdf :</p>

<pre><code>[submodule ""tools/libft""]
    path = tools/libft
    url = ssh://git@XXX.XXX.XXX.XXX:XXXXX/opt/git/libft.git
</code></pre>

<p>As a French student I could have missed something in the English documentation I have, but I searched and I really don't understand why I get this issue.</p>

<p>I would be glad if I would get a solution but just an explanation would be helpful too.</p>
","8","3156085","0","0"
"20991138","587267","2014-01-08 09:07:31","23","18900","<git><git-submodules>","After moving git submodule to another directory it fails with error 'git status --porcelain' failed in submodule","<p>Initially I had the following (simplified) repo structure:</p>

<pre><code>MyRepo
   external1/MySub (git submodule)
   .gitsubmodules
</code></pre>

<p>Where</p>

<pre><code>$ cat .gitsubmodules

  [submodule ""external1/MySub""]
  path = external1/MySub
  url = user@repo:/remoterepo/externals/MySub.git
</code></pre>

<p>I then wanted to move MySubmodule to another directory in the same git repository, e.g., <em>external2</em> so the structure is as follows:</p>

<pre><code>MyRepo
   external2/MySub (git submodule)
   .gitsubmodules
</code></pre>

<hr>

<p>What I did, and thought is enough, I simply moved (via OS <code>mv</code>) the <em>external1/MySub</em> directory to <em>external2/MySub</em> and edited the <em>.gitsubmodules</em> file to:</p>

<pre><code>$ cat .gitsubmodules

  [submodule ""external2/MySub""]
  path = external2/MySub
  url = user@repo:/remoterepo/externals/MySub.git
</code></pre>

<p>After this change, I get the following error:</p>

<pre><code>$ git status

  fatal: Could not chdir to '../../../../../repo/external/MySub': No such file or directory
  fatal: 'git status --porcelain' failed in submodule repo/external2/MySub
</code></pre>

<hr>

<p>What am I missing? Any other changes need to be done for such move to work?</p>

<p>(I'm using git version 1.8.3rc3 on Windows 8.1)</p>
","1","587267","0","0"
"58862131","10593406","2019-11-14 17:01:00","4","4718","<ssh><azure-devops><azure-pipelines><git-submodules>","Checkout git submodule in Azure Pipeline with SSH","<p>I try to checkout the git submodules via ssh instead of https (default if you use ""Checkout submodules"") in an Azure DevOps Pipeline. With the option in the picture it works - but for the developers it's annoying to enter the password all the time if they are working with the repository.</p>

<p><a href=""https://i.stack.imgur.com/fkt79.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fkt79.png"" alt=""enter image description here""></a></p>

<p>For that I used the following instructions to add the <a href=""https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/ssh?view=azure-devops"" rel=""nofollow noreferrer"">ssh key.</a>
I created a public and a private key, and copied the known_host entry.</p>

<p>That's my YAML file snippet:</p>

<pre><code>stages:
- stage: DeployBackend
jobs:
  - job: SSH
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: $(known_host)
          sshPublicKey: $(public_key)
          sshKeySecureFile: 'private_key_file'
  - job: Deploy
    steps:
      - checkout: self
        submodules: true
      - script: |
          -- here I run all docker commands to build the container and push it to Azure --
        displayName: ""Deploy""
</code></pre>

<p>If I use the SSH keys to clone the repository to my local computer I have no issues. But if I run the pipeline it will crash at the submodule checkout:</p>

<blockquote>
  <p>Please make sure you have the correct access rights and the repository
  exists. fatal: clone of
  'git@ssh.dev.azure.com:v3/<strong><em>repoLink</em></strong>'
  into submodule path '/home/vsts/work/1/s/app/submoduleFolder' failed
  Failed to clone 'app/submoduleFolder'. Retry scheduled Cloning into
  '/home/vsts/work/1/s/app/submoduleFolder'... Host key verification
  failed. fatal: Could not read from remote repository.</p>
</blockquote>

<p>That's the <code>.gitmodules</code> file in the repo - it works without any issues locally:</p>

<pre><code>[submodule ""app/subModuleName""]
    path = app/subModuleName
    url = git@ssh.dev.azure.com:v3/***/subModuleName
    branch = master
</code></pre>

<p>I even wrote the <code>id_rsa</code>, <code>known_hosts</code> and <code>id_rsa.pub</code> files into <code>.ssh</code> with a script, but it seems like they are not even used for ssh verification.</p>
","2","10593406","0","0"
"58928144","8124886","2019-11-19 06:49:12","0","2330","<git><ansible><git-submodules>","how to use Ansible clone git submodule with username/password login","<p>I am trying use ansible git module to clone a work project.
This project and all submodule are on a private server, and use username/password authentication. I can hardcode (or var on hosts file) the account in main project url, But ansible hangs because I must answer submodule login info.  </p>

<p>Is there anyway to pass login info for submodule update? </p>
","0","8124886","",""
"13261054","1804620","2012-11-06 23:27:14","5","146","<git><git-submodules>","git submodule functionality with sibling?","<p>I have a project consisting of a library and various applications:</p>

<pre><code>foo/
foolib/
bar/
baz/
qux/foo/
</code></pre>

<p>All of the applications link against <em>foolib</em>, a static library. </p>

<p>I would like <em>git commit</em> on <em>foo</em> to record the SHA1 ID of where <em>foolib</em> was at, and also <em>git status</em> on <em>foo</em> to report if there are uncommitted changes in <em>foolib</em>.</p>

<p>However I do not want to move <em>foolib</em> to having a copy of it as a subdirectory of every application. As well as being bloaty, this would lose the ability to try out some changes to <em>foolib</em> in multiple applications without committing the changes.</p>

<p>I have tried making a .gitmodules file that points to ../foolib but it seems to be completely ignored by <em>git status</em>.  I also tried making <em>foolib</em> a softlink inside <em>foo</em>, but <em>git</em> seemed to treat the softlink as a file instead of following the link.</p>

<p>Is what I want possible, or do you have any alternative workflow solutions?</p>

<p>On my public repository, the structure is the same, and each application (and foolib) has been cloned individually from the public.  </p>
","0","1804620","0","0"
"13261220","818078","2012-11-06 23:44:51","1","845","<git><git-submodules><svn-externals>","How to include subfolder from one git repo to another?","<p>Say I have Project1 in a git repo. Within Project1 there is a subfolder that I want to include in Project1+ (Project2, Project3, etc.) By ""include"" I don't mean copy-and-paste. I want a reference to Project1 so that if I make changes to Project1 I can automatically integrate those changes in Projects1+.  Further, I want to place it in <em>more than one</em> location within Project1+.</p>

<p>Example:</p>

<pre><code>Project1
|-Subfolder1
  |-Stuff I want...
|-README.md

Project2
|-Subfolder1 &lt;- from Project1
|-SomeOtherFolder
  |-Subfolder1 &lt;- from Project1
|-README.md
</code></pre>

<p>Git submodules won't work because:</p>

<ul>
<li>The submoldule is the entire repo, not the subfolder. I don't want the entire repo, just the one folder.</li>
</ul>

<p><a href=""http://www.kernel.org/pub/software/scm/git/docs/howto/using-merge-subtree.html"" rel=""nofollow"">The subtree merge strategy</a> won't work because:</p>

<ul>
<li>Only one subtree is supported; when you do the pull for the subtree (git pull -s subtree...) it only updates the one at the highest level (no matter the order in which they were created).</li>
</ul>

<p>Now bear in mind I am new to git so it's possible the above conclusions are wrong. But this is what I have discovered through both research and experimentation.</p>

<p>The possible solution I have come up with is:</p>

<ol>
<li>Create a branch for Project1.</li>
<li>Delete everything I don't want from this branch.</li>
<li>Move the files I DO want to the root of this branch.</li>
<li>Delete Subfolder.</li>
<li>Add this branch as a submodule to Project1+.</li>
</ol>

<p>This sorta-kinda worked. I modified the Project1 master branch and was able to merge the changes into the new branch, and therefore update the submodule, but this seems unnecessarily complex (given how easy it is in SVN). Furthermore when I merged the changes in Project1 it seemed to consider the deleted files as conflicted; i.e. it was just a huge PITA to update Project1. Maybe I need a different merge strategy?</p>

<p>But mainly I'm asking is this even the right path at all?</p>

<p>For the record, this is trivially easy with SVN Externals. So the use-case is there. And I realize it's entirely possible no one is doing this with git. The explanations I can find online after a couple days of research all boil down to ""restructure your projects so each repo has what you want to share""; i.e. ""Subfolder"" from Project1 becomes its own repo. I'm hoping that's not really the final answer.</p>

<p>Thanks!</p>
","3","818078","",""
"66460369","15321985","2021-03-03 15:46:05","0","1025","<git><git-submodules>","git submodule update failure","<p>I have meta repo, named anecdotes which has two submodules - utils &amp; global-sync. global sync has also utils submodule in it.
In anecdotes repo there is .gitmodules file, with this content:</p>
<pre><code>[submodule &quot;globals-sync&quot;]
    path = globals-sync
    url = https://github.com/organization/globals-sync.git
    branch = master
[submodule &quot;utils&quot;]
    path = utils
    url = https://github.com/organization/utils.git
    branch = master
</code></pre>
<p>global sync .gitmodules file content is:</p>
<pre><code>[submodule &quot;utils&quot;]
        path = utils
        url = https://github.com/organization/utils.git
</code></pre>
<p>default branch for utils repo is develop and default branch for global-sync repo is master (the global-sync repo contains, as I said, utils submodule).</p>
<p>git version is 2.30</p>
<p><strong>And now - describing the issue:</strong>
In github actions, trying to deploy from anecdotes repo. First I checkout to anecdotes repo - by doing so, the action checking out repo and the submodules (fetching &amp; cloning it)
at this point - the global-sync &amp; utils repo checked out properly (means - as it's being committed in anecdotes repo)</p>
<p>Now, I want to update submodules to latest commits (in the remote)So I run:</p>
<pre><code>git submodule update --remote
</code></pre>
<p>Which immediately failed with the following error:</p>
<pre><code>fatal: Needed a single revision
Unable to find current origin/master revision in submodule path 'utils'
</code></pre>
<p><strong>After reading a lot of similar problems I could isolated the problem:</strong>:
<a href=""https://stackoverflow.com/questions/7605469/git-submodules-pulling-into-a-new-clone-of-the-super-project/8573310#8573310"">here</a></p>
<p>By cd to utils directory and get info about the repo, I saw that &quot;master&quot; branch is not exist:
&quot;git branch -a&quot; listed only develop branch</p>
<p>any ideas?</p>
<ul>
<li>I deleted the utils directory in anecdotes and cloned it - the problem still occures.</li>
<li>Tried to do update submodules locally - successfully.</li>
</ul>
","2","15321985","",""
"47933362","5666171","2017-12-21 22:07:28","1","711","<git><netbeans><git-submodules>","How to import git submodules into NetBeans 8.1?","<p>I have a NetBeans project which is controlled by a Git repository. I am using one GitHub project as a dependency ; when I began the project I was new to Git so I just cloned the dependency, took the source code and put it as a package as if it was my own.</p>

<p>Now that I'm a little bit more experienced with Git, I'd like to have the dependency as a git submodule, so I can use it, easily update it, and have everything in one place so end-users (my project is an API) won't need to clone the dependency as a side project.</p>

<p>I discovered submodules from <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow noreferrer"">the SVN guide</a> ; so I made a new branch, deleted the dependency package and initialized the submodule, then opened NetBeans, but NetBeans just doesn't see it.</p>

<p>I was expecting the submodule to show up in some place like the library list, but it surely isn't there.</p>

<p>After research on the NetBeans forums, I have noticed that they never mention submodules in the documentation.</p>

<p>So, is it possible to use submodules in NetBeans ? I am not searching for anything complicated, just keeping my project and the dependency separated. I am not planning to do anything other than to compile the dependency (ie. no modifications), but I'd rather keep this doable if possible. And if this is not possible under NetBeans, what is the closest to achieve this goal ? (I have heard about Maven but have no knowledge whatsoever of what it is)</p>

<p>Related links : <a href=""https://github.com/CLOVIS-AI/Telegram"" rel=""nofollow noreferrer"">The project I'm talking about (GitHub)</a>, <a href=""https://github.com/ralfstx/minimal-json"" rel=""nofollow noreferrer"">the dependency (GitHub)</a></p>

<p>[EDIT]
After checking, my problem does not come from the git command line (the git submodule is initialized as it should in the project folder), but rather seems to be a NetBeans configuration issue. Based on the error (""package ... not found"" on every import), I guess that NetBeans just doesn't know where to find the submodule's source. I have tried to add the submodule manually to the libraries by right-clicking the 'libraries' folder in the IDE then 'add project/folder'. I have tried this for various folders in the submodule, but none seem to let NetBeans find the source (it is in there though). <a href=""https://github.com/ralfstx/minimal-json"" rel=""nofollow noreferrer"">Here is the link to the dependency, maybe there's something specific about how the folders are laid down, I don't know. (from GitHub)</a></p>
","0","5666171","0","0"
"59012783","3503228","2019-11-23 22:16:07","1","54","<git><git-submodules>","Regenerate (Clean) .gitmodules","<p>How to regenerate <code>.gitmodules</code> to eliminate all entries that don't exist? </p>

<p>Also, is it possible to update it with all submodules listed under <code>.git/modules</code>, that are not already present?</p>

<p>Although, this should not have happened if the submodules were properly removed using <code>git rm</code>, but unfortunately, this was not the case.</p>
","0","3503228","0","0"
"59017611","4640820","2019-11-24 12:23:58","1","1080","<git><shell><git-submodules>","how can I find out if I'm inside a git submodule?","<p>tldr; How can I find out that my current working directory is inside of a submodule directory?</p>

<p>Work processes differ if working inside or outside submodules. And time and again I get confused because I am not aware that i'm inside a submodule.</p>

<p>Optimally <code>__git_ps1</code> would show me that I'm inside a submodule, but apparently it has no provisions to do so.</p>

<p>I'd like to patch <code>__git_ps1</code> to show me the fact that I'm inside a submodule, but I can't find an elegant way to query git for that fact.</p>

<p>Ideally I'd like to have a shell function like this:</p>

<pre><code>function current_working_directory_is_in_a_submodule() {
  if some_magic; then
     echo ""( $submodule_name )""
  else
     false
  fi
}
</code></pre>

<p>What's <code>some_magic</code>?</p>
","0","4640820","0","0"
"59020649","2298137","2019-11-24 17:50:31","0","35","<git><git-submodules>","is there a command line way of getting the git module folder?","<p>Lets say I have a simple directory setup like this:</p>

<pre><code>top-level/
   |-- .git/
   |     |-- modules/
   |          |-- level2
   |--level2/
</code></pre>

<p>Where top-level is a git repo and level2 is a submodule inside top-level. What I want is when I am inside level2 I want to be able to print my .git folder - which is: <code>/home/.../top-level/.git/modules/level2</code> or <code>../.git/modules/level2</code> (I don't mind relative paths).</p>

<p>For this simple example I can hard code it - but I want a general way of finding this without having to write some script to search up folders until I find the <code>.git</code> directory.</p>

<p>I found: <code>git rev-parse --show-toplevel</code> which gets me ""half way"" but from there I still don't know the generalised path to my repo (i.e. I won't know how deep my submodule might be...</p>
","3","2298137","",""
"2277333","156785","2010-02-16 23:56:52","4","283","<git><version-control><external><git-submodules>","How to update a submodule in git to the HEAD commit in that external repo","<p>I had problems finding the answer to this so I am posting it for posterity.</p>

<p>The situation is, you have a git repo with a submodule (similar to an svn external).  You want to update that reference to point to a different commit in the external repository.  You might think 'git submodule sync' or 'git submodule update' would do that - you'd be wrong.</p>
","0","156785","0","0"
"40258372","6197263","2016-10-26 09:21:49","1","66","<git><git-submodules>","using a smaller project as a git submodule in several other projects - can't make it work","<p>I've seen this question crop up more than once in one form or another around here, which is what made me choose this route. So I have a smallish project (web stuff) which has its own gruntfile and git repository and is under active development. I would like to use the <strong>result</strong> of that development in several other projects, that is, I don't want or need the gruntfile or the sass files etc. However, if there's an update in this shared project, I want to be able to pull and merge those updates into the files in the current project. I also want to make modifications to these files to adapt them to the current project's needs.</p>

<p>The way I understand it is, I should make this a git submodule in any other project I want to have these files. I must say that I am fairly new to git, so far I've been using it for a few personal projects - and loving it -, but nothing collaborative (so no pulling and merging yet), and I feel I still don't really have a good grasp on it.</p>

<p>Anyway I added the shared project (let's call it SUB) as a submodule in the project I'm currently working on (let's call this A). So SUB now exists as a folder in A, and <code>git status</code> now lists this folder as <code>modified</code>. Doing <code>git add SUB/</code> does not change this. And doing <code>git merge SUB/</code> just nets me a <code>merge: SUB/ - not something we can merge</code>. ?? How do I get updated files from SUB into A? Or am I going about this the wrong way? I also found the subtree merge strategy on SO somewhere, maybe that would be more suitable?</p>

<p>I'm using git v2.1.4, afaik there have been changes to git submodule in v 2.10.1 - not sure if this is a problem.</p>
","0","6197263","",""
"40263720","794401","2016-10-26 13:33:03","2","162","<git><git-submodules>","Switch branches in a git repo with submodules","<p>What is the proper way to switch branches in a repo containing one or more submodules?</p>

<p>Consider all cases, maybe there is a different approach for each:</p>

<ul>
<li>submodules exist in only origin/destination branch</li>
<li>one of the submodules contains un-pushed/un-committed/untracked files that you may want to keep</li>
<li>submodules in origin/destination branch point to different sha1, with a different file set</li>
</ul>

<p>At the moment, since all our submodules start with <code>x_*</code>, we have to do this to <em>safely</em> switch branches:</p>

<pre><code>rm -rf x_*; rm -rf .git/modules/x_*
</code></pre>

<p>On top of being pretty <em>dirty</em> (to say the least), this is not safe with changes in the submodule (untracked files, un-pushed commits and modified files will be silently deleted)</p>

<p><strong>Example</strong>: switching from branch <code>B1</code> with submodules <code>S1</code>, <code>S2</code>, <code>S3</code> to branch <code>B2</code> with submodules <code>S2</code> and <code>S4</code></p>

<p>First we clone the repo and checkout <code>B1</code> and all its submodules. How can we swich to <code>B2</code> so that submodules <code>S1</code> and <code>S3</code> are not deleted from the files system (only show up as untracked files), <code>S2</code> is now on a different version and <code>S4</code> appeared in the file system as well?</p>
","0","794401","0","0"
"66563212","3042117","2021-03-10 10:51:46","2","425","<git><git-submodules>","How is it possible to get the current commit id of a submodule in git?","<p>I would like to find out the current commit id of a submodule. I've found this answer about <a href=""https://stackoverflow.com/questions/32327108/get-the-current-commit-id-of-specified-submodule"">current commit id of specified submodule</a> It suggests this code:</p>
<pre class=""lang-sh prettyprint-override""><code>git rev-parse @:./yourSubmodule
</code></pre>
<p>It works, but if I update the submodule, it still gives me the old commit id:</p>
<pre class=""lang-sh prettyprint-override""><code>git submodule update --remote --merge

git rev-parse @:./yourSubmodule
</code></pre>
<p><code>git submodule status</code> gives me the correct commit id, but the result is not just the commit id, but some auxiliary informations as well:</p>
<pre><code>git submodule status | grep yourSubmodule
</code></pre>
<p>Result:</p>
<pre><code>+1b2377f523dca6fa0c49bd7fa56eeb32011774e1 yourSubmodule (remotes/origin/HEAD)
</code></pre>
<p>What is the correct way, to determine the current commit id of a submodule? Only the commit id is needed, nothing else.</p>
","1","3042117","",""
"13883386","1030529","2012-12-14 17:19:23","0","339","<git><vim><version-control><git-submodules><pathogen>","Some git submodules won't clone","<p>I'm using git + pathogen to track my vim plugins. I have a git repo in my .vim folder, and all my plugins are in the <code>bundle</code> folder.</p>

<p>To add a new plugin I do:</p>

<pre><code>git submodules add git://github.com/plugin.git bundle/plugin
</code></pre>

<p>It works out of the box for most plugins (it clones the new repo to the location specified and I'm happy with my vim).</p>

<p>With some repos, however, it simply does not work. By not working I mean:</p>

<ul>
<li>After running <code>git submodules add</code> it doesn't output anything (unlike the clone information).</li>
<li>An empty folder is created in <code>bundle/plugin</code></li>
<li>.gitmodules and .git/config <em>are</em> updated to reflect the changes (opening .gitmodules you can see the new repo, just like all the others)</li>
</ul>

<p>I was told I should run <code>git submodule init &amp;&amp; git submodule update</code> after adding a new submodule.
Is it possible that forgetting to do so may have caused the issues?</p>
","0","1030529","",""
"13933193","455492","2012-12-18 12:37:23","10","14482","<git><github><teamcity><git-submodules>","Why is Teamcity not able to pull down git submodule","<p>I have a git project that has a submodule.  This submodule is used in two repositories that are both being built on a Teamcity server.  Teamcity is able to build the first project but the the second project has the following error (details have been qouted out to protect the guilty)</p>

<blockquote>
  <p>Error collecting changes for VCS repository 'TirePlotter'
  Collecting changes failed: org.eclipse.jgit.errors.CorruptObjectException: Object 'git hash here' is corrupt: 'git fetch' command failed.
  stderr: 'project submodule name url': 'project submodule name url'/info/refs?service=git-upload-pack not found 
  « Hide stacktrace
  jetbrains.buildServer.vcs.VcsException: Error collecting changes for VCS repository 'TirePlotter' 
  Collecting changes failed: org.eclipse.jgit.errors.CorruptObjectException: Object 'git hash here' is corrupt: 'git fetch' command failed. 
  stderr: 'project submodule name url': 'project submodule name url'/info/refs?service=git-upload-pack not found 
  at jetbrains.buildServer.buildTriggers.vcs.git.OperationContext.wrapException(OperationContext.java:139) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.collectChanges(GitVcsSupport.java:142) 
  at jetbrains.buildServer.vcs.CollectRepositoryChangesByCheckoutRulesAdapter.collectChanges(CollectRepositoryChangesByCheckoutRulesAdapter.java:5)
  at jetbrains.buildServer.vcs.CollectChangesBetweenRepositoriesAdapter.collectChanges(CollectChangesBetweenRepositoriesAdapter.java:6)
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges$CollectChangesInSingleRepository.perform(LoadChanges.java:2) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.perform(LoadChanges.java:60) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.collectChangesForCheckoutRules(LoadChanges.java:46) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.collectChanges(LoadChanges.java:20) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.run(LoadChanges.java:105) 
  at jetbrains.buildServer.buildTriggers.vcs.VcsRootChangesLoader._loadChanges(VcsRootChangesLoader.java:31) 
  at jetbrains.buildServer.buildTriggers.vcs.VcsRootChangesLoader.loadChanges(VcsRootChangesLoader.java:43) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.doLoadChanges(VcsChangesLoaderImpl.java:94) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.loadChangesNoLocking(VcsChangesLoaderImpl.java:16) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.loadChanges(VcsChangesLoaderImpl.java:133) 
  at jetbrains.buildServer.vcs.impl.VcsManagerImpl.loadChanges(VcsManagerImpl.java:604) 
  at jetbrains.buildServer.serverSide.impl.auth.SecuredVcsManager.loadChanges(SecuredVcsManager.java:72) 
  at jetbrains.buildServer.serverSide.impl.VcsModificationChecker$1.run(VcsModificationChecker.java:11) 
  at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) 
  at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) 
  at java.util.concurrent.FutureTask.run(Unknown Source) 
  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) 
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 
  at java.lang.Thread.run(Unknown Source) 
  Caused by: org.eclipse.jgit.errors.CorruptObjectException: Object 'Git hash here' is corrupt: 'git fetch' command failed. 
  stderr: 'project submodule name url': 'project submodule name url'/info/refs?service=git-upload-pack not found 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleAwareTreeIterator.movedToEntry(SubmoduleAwareTreeIterator.java:187)
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.DirectSubmoduleAwareTreeIterator.next(DirectSubmoduleAwareTreeIterator.java:86)
  at org.eclipse.jgit.treewalk.AbstractTreeIterator.skip(AbstractTreeIterator.java:628) 
  at org.eclipse.jgit.treewalk.TreeWalk.skipEntriesEqual(TreeWalk.java:944) 
  at org.eclipse.jgit.treewalk.TreeWalk.next(TreeWalk.java:554) 
  at jetbrains.buildServer.buildTriggers.vcs.git.ModificationDataRevWalk.getCommitChanges(ModificationDataRevWalk.java:152) 
  at jetbrains.buildServer.buildTriggers.vcs.git.ModificationDataRevWalk.createModificationData(ModificationDataRevWalk.java:91) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.getModifications(GitVcsSupport.java:164) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.collectChanges(GitVcsSupport.java:140) 
  ... 21 more 
  Caused by: jetbrains.buildServer.vcs.VcsException: 'git fetch' command failed. 
  stderr: 'project submodule name url': 'project submodule name url'/info/refs?service=git-upload-pack not found 
  at jetbrains.buildServer.buildTriggers.vcs.git.CommandLineUtil.getCommandLineError(CommandLineUtil.java:44) 
  at jetbrains.buildServer.buildTriggers.vcs.git.FetchCommandImpl.fetchInSeparateProcess(FetchCommandImpl.java:132) 
  at jetbrains.buildServer.buildTriggers.vcs.git.FetchCommandImpl.fetch(FetchCommandImpl.java:70) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.fetch(GitVcsSupport.java:716) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.TeamCitySubmoduleResolver.fetch(TeamCitySubmoduleResolver.java:79) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleResolver.getSubmoduleCommit(SubmoduleResolver.java:76) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleAwareTreeIterator.getSubmoduleCommit(SubmoduleAwareTreeIterator.java:224)
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleAwareTreeIterator.movedToEntry(SubmoduleAwareTreeIterator.java:174)
  ... 29 more 
  org.eclipse.jgit.errors.CorruptObjectException: Object 'git hash here' is corrupt: 'git fetch' command failed. 
  stderr: 'project submodule name url': 'project submodule name url'/info/refs?service=git-upload-pack not found 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleAwareTreeIterator.movedToEntry(SubmoduleAwareTreeIterator.java:187)
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.DirectSubmoduleAwareTreeIterator.next(DirectSubmoduleAwareTreeIterator.java:86)
  at org.eclipse.jgit.treewalk.AbstractTreeIterator.skip(AbstractTreeIterator.java:628) 
  at org.eclipse.jgit.treewalk.TreeWalk.skipEntriesEqual(TreeWalk.java:944) 
  at org.eclipse.jgit.treewalk.TreeWalk.next(TreeWalk.java:554) 
  at jetbrains.buildServer.buildTriggers.vcs.git.ModificationDataRevWalk.getCommitChanges(ModificationDataRevWalk.java:152) 
  at jetbrains.buildServer.buildTriggers.vcs.git.ModificationDataRevWalk.createModificationData(ModificationDataRevWalk.java:91) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.getModifications(GitVcsSupport.java:164) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.collectChanges(GitVcsSupport.java:140) 
  at jetbrains.buildServer.vcs.CollectRepositoryChangesByCheckoutRulesAdapter.collectChanges(CollectRepositoryChangesByCheckoutRulesAdapter.java:5)
  at jetbrains.buildServer.vcs.CollectChangesBetweenRepositoriesAdapter.collectChanges(CollectChangesBetweenRepositoriesAdapter.java:6)
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges$CollectChangesInSingleRepository.perform(LoadChanges.java:2) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.perform(LoadChanges.java:60) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.collectChangesForCheckoutRules(LoadChanges.java:46) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.collectChanges(LoadChanges.java:20) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.run(LoadChanges.java:105) 
  at jetbrains.buildServer.buildTriggers.vcs.VcsRootChangesLoader._loadChanges(VcsRootChangesLoader.java:31) 
  at jetbrains.buildServer.buildTriggers.vcs.VcsRootChangesLoader.loadChanges(VcsRootChangesLoader.java:43) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.doLoadChanges(VcsChangesLoaderImpl.java:94) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.loadChangesNoLocking(VcsChangesLoaderImpl.java:16) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.loadChanges(VcsChangesLoaderImpl.java:133) 
  at jetbrains.buildServer.vcs.impl.VcsManagerImpl.loadChanges(VcsManagerImpl.java:604) 
  at jetbrains.buildServer.serverSide.impl.auth.SecuredVcsManager.loadChanges(SecuredVcsManager.java:72) 
  at jetbrains.buildServer.serverSide.impl.VcsModificationChecker$1.run(VcsModificationChecker.java:11) 
  at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) 
  at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) 
  at java.util.concurrent.FutureTask.run(Unknown Source) 
  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) 
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 
  at java.lang.Thread.run(Unknown Source) 
  Caused by: jetbrains.buildServer.vcs.VcsException: 'git fetch' command failed. 
  stderr: <a href=""https://engdeveloper@github.com/rcrenterprises/RCR.Simulation"">https://engdeveloper@github.com/rcrenterprises/RCR.Simulation</a>: <a href=""https://engdeveloper@github.com/rcrenterprises/RCR.Simulation/info/refs?service=git-upload-pack"">https://engdeveloper@github.com/rcrenterprises/RCR.Simulation/info/refs?service=git-upload-pack</a> not found 
  at jetbrains.buildServer.buildTriggers.vcs.git.CommandLineUtil.getCommandLineError(CommandLineUtil.java:44) 
  at jetbrains.buildServer.buildTriggers.vcs.git.FetchCommandImpl.fetchInSeparateProcess(FetchCommandImpl.java:132) 
  at jetbrains.buildServer.buildTriggers.vcs.git.FetchCommandImpl.fetch(FetchCommandImpl.java:70) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.fetch(GitVcsSupport.java:716) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.TeamCitySubmoduleResolver.fetch(TeamCitySubmoduleResolver.java:79) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleResolver.getSubmoduleCommit(SubmoduleResolver.java:76) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleAwareTreeIterator.getSubmoduleCommit(SubmoduleAwareTreeIterator.java:224)
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleAwareTreeIterator.movedToEntry(SubmoduleAwareTreeIterator.java:174)
  ... 29 more 
  jetbrains.buildServer.vcs.VcsException: 'git fetch' command failed. 
  stderr: 'project submodule name url': 'project submodule name url'/info/refs?service=git-upload-pack not found 
  at jetbrains.buildServer.buildTriggers.vcs.git.CommandLineUtil.getCommandLineError(CommandLineUtil.java:44) 
  at jetbrains.buildServer.buildTriggers.vcs.git.FetchCommandImpl.fetchInSeparateProcess(FetchCommandImpl.java:132) 
  at jetbrains.buildServer.buildTriggers.vcs.git.FetchCommandImpl.fetch(FetchCommandImpl.java:70) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.fetch(GitVcsSupport.java:716) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.TeamCitySubmoduleResolver.fetch(TeamCitySubmoduleResolver.java:79) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleResolver.getSubmoduleCommit(SubmoduleResolver.java:76) 
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleAwareTreeIterator.getSubmoduleCommit(SubmoduleAwareTreeIterator.java:224)
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleAwareTreeIterator.movedToEntry(SubmoduleAwareTreeIterator.java:174)
  at jetbrains.buildServer.buildTriggers.vcs.git.submodules.DirectSubmoduleAwareTreeIterator.next(DirectSubmoduleAwareTreeIterator.java:86)
  at org.eclipse.jgit.treewalk.AbstractTreeIterator.skip(AbstractTreeIterator.java:628) 
  at org.eclipse.jgit.treewalk.TreeWalk.skipEntriesEqual(TreeWalk.java:944) 
  at org.eclipse.jgit.treewalk.TreeWalk.next(TreeWalk.java:554) 
  at jetbrains.buildServer.buildTriggers.vcs.git.ModificationDataRevWalk.getCommitChanges(ModificationDataRevWalk.java:152) 
  at jetbrains.buildServer.buildTriggers.vcs.git.ModificationDataRevWalk.createModificationData(ModificationDataRevWalk.java:91) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.getModifications(GitVcsSupport.java:164) 
  at jetbrains.buildServer.buildTriggers.vcs.git.GitVcsSupport.collectChanges(GitVcsSupport.java:140) 
  at jetbrains.buildServer.vcs.CollectRepositoryChangesByCheckoutRulesAdapter.collectChanges(CollectRepositoryChangesByCheckoutRulesAdapter.java:5)
  at jetbrains.buildServer.vcs.CollectChangesBetweenRepositoriesAdapter.collectChanges(CollectChangesBetweenRepositoriesAdapter.java:6)
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges$CollectChangesInSingleRepository.perform(LoadChanges.java:2) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.perform(LoadChanges.java:60) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.collectChangesForCheckoutRules(LoadChanges.java:46) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.collectChanges(LoadChanges.java:20) 
  at jetbrains.buildServer.buildTriggers.vcs.LoadChanges.run(LoadChanges.java:105) 
  at jetbrains.buildServer.buildTriggers.vcs.VcsRootChangesLoader._loadChanges(VcsRootChangesLoader.java:31) 
  at jetbrains.buildServer.buildTriggers.vcs.VcsRootChangesLoader.loadChanges(VcsRootChangesLoader.java:43) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.doLoadChanges(VcsChangesLoaderImpl.java:94) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.loadChangesNoLocking(VcsChangesLoaderImpl.java:16) 
  at jetbrains.buildServer.vcs.impl.VcsChangesLoaderImpl.loadChanges(VcsChangesLoaderImpl.java:133) 
  at jetbrains.buildServer.vcs.impl.VcsManagerImpl.loadChanges(VcsManagerImpl.java:604) 
  at jetbrains.buildServer.serverSide.impl.auth.SecuredVcsManager.loadChanges(SecuredVcsManager.java:72) 
  at jetbrains.buildServer.serverSide.impl.VcsModificationChecker$1.run(VcsModificationChecker.java:11) 
  at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) 
  at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) 
  at java.util.concurrent.FutureTask.run(Unknown Source) 
  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) 
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 
  at java.lang.Thread.run(Unknown Source)</p>
</blockquote>

<p>I have tried to rebuild it with a clean directory and verified that the git repository is fine.  Does anyone have any ideas on how to fix this?  Side note: the repositories are on github if that helps anyone.</p>
","0","455492","",""
"2718446","18434","2010-04-27 03:03:46","3","1620","<ruby-on-rails><git><models><git-submodules>","Sharing Models between two Rails Projects - using git submodules?","<p>I have a Rails website which has been divided into two separate projects - the public site, and the administration site.</p>

<p>As both sites are using the same database the models are shared between the applications (actually right now they are duplicated). The problem I have here is that when an update to the models occurs in the public project I need to copy the changes over into the admin project.</p>

<p>I've had a look around SO and noticed that there was a <a href=""https://stackoverflow.com/questions/660247/two-rails-apps-sharing-a-model-folder"">question</a> which had answers suggesting using svn:external or git submodule, but I'm not entirely sure how to do this.</p>

<p>Essentially my aim is to be able to make the changes in one place only, commit those changes to <strong>git</strong> and then be able to pull the changes in the other project when I need to update that as well.</p>
","2","18434","0","0"
"40558627","2954547","2016-11-12 01:26:49","0","323","<git><git-submodules><git-push><git-tag>","What is the correct way to push a ""read-only"" git submodule in a tagged repository?","<p>I am working on Project A, and I want to push the tagged releases from that project to GitHub. Project A depends on Project B, which is a submodule.</p>

<p>Project B releases an upstream update, and I want to merge that update into my project.</p>

<ol>
<li>Is <code>git submodule update --init --merge</code> the correct way to merge in that update?</li>
<li>When I did <code>git push --tags</code>, it also pushed all of the submodule's tags. <code>git tag</code> also shows all of the submodule's tags instead of just the parent project's tags. How can I isolate and push only the tags from the parent project?</li>
</ol>

<p><strong>edit</strong>: it occurred to me that I might be asking the wrong question. I'm concerned that the subproject's tags will conflict with my main project's tags.</p>
","0","2954547","",""
"13955433","1406122","2012-12-19 15:17:39","1","62","<git><version-control><repository><git-submodules><git-checkout>","Error cloning git re","<p>So I'm participating in this project, using git.</p>

<p>There's a bunch of source files and some libraries we refer to. The libs are put into git as sub-modules (e.g. BulletPhysics) and shall not be altered by our team.</p>

<p>According to Murphy's law, this alteration has happened, along with a commit/push, which seemed not to have had any effect...</p>

<p>... Until some guy lost his local repo and had to re-clone. Well, all that happens is some part of the project being actually downloaded, but when it comes to bullet, all that happens is </p>

<pre><code>Unable to checkout 'cc1b481c8ec2868595db30303d88bd12bc1bcf2a' in submodule path 'extern/bullet'
</code></pre>

<p>Our supervisor told us it has been broken by the commit/push action(s) that tried to alter bullet, with us not having rights to do this, and that he doesn't know how to fix this.</p>

<p>Could anybody help me fix this without judging him? ;)</p>

<p>regards, LDer</p>
","8","1406122","",""
"21565210","1301349","2014-02-04 22:49:45","1","523","<git><github><git-submodules>","git submodule losing upstream remote","<p>i've got a real fun git layout for my android project... everything has been working beautifully.</p>

<p>the structure is essentially 1 master project with a couple inner submodules. one of the inner submodules itself has a submodule.</p>

<p>i can either throw the <code>--recursive</code> flag in when i clone my project or I can clone it regularly and then traverse through the submodules folder and do a </p>

<pre><code>git submodule init
git submodule update
</code></pre>

<p>I recently decided that it would be a better idea to fork the submodules that I use on github. the origin is my account Github url to my forked repo, and i've added an 'upstream' remote that points to the project creator's master so that i can pull their latest from time to time.</p>

<p>i just cloned my project on a newly wiped computer using the <code>--recursive</code> flag for the first time since forking each submodule and everything worked beautifully.</p>

<p>so here comes the question...</p>

<p>my only issue with the whole process is that each of my submodules did not come down with the upstream in there... i can <code>cd</code> in to each submodule and do a <code>git remote show</code> and only <code>origin</code> is visible.</p>

<p>it's not a big deal to go through and re-add the <code>upstream</code> remotes but i'd rather know what my issue here is.</p>

<p>another little sub-question: is there any way to add an in-line flag to that single recursive clone command that will <code>git checkout master</code> on each submodule?</p>

<p>any ideas?</p>
","0","1301349","0","0"
"21567886","1443496","2014-02-05 03:09:44","0","87","<git><github><git-submodules><git-tag>","Are the commit IDs of submodules kept in a git tag?","<p>The impetus behind this is to manage both the source and wiki repositories of GitHub and be able to <code>git tag</code> the state of the entire project for releases.  If there is an easier way to go about this, I'm all ears in the comments :)</p>

<hr>

<p>I need to be able to include some sort of identifier for the state of a submodule (as returned be <code>git submodule status</code>, for example) in the tag.  I don't <em>really</em> need to be able to package it <em>all</em> up (as in <a href=""https://stackoverflow.com/q/12936014/1443496"">Include a GitHub submodule automatically in download</a>)—I only <em>need</em> the ability to include this identifier—but any additional functionality available to me is <em>awesome</em>.</p>

<p>As an aside, I'm surprised this isn't kept track of in <code>.gitmodules</code>.  I understand it's somewhere in <code>.git</code>, but it doesn't seem to be the case that any information therein is tracked (it makes sense for it not to be).</p>
","0","1443496","",""
"2743864","182779","2010-04-30 10:37:33","1","1438","<git><github><git-submodules><gitignore>","git submodule, ignoring the wrong directory","<p>I am new to git but have spent a good deal of time reading through documentation and gotchas on git submodules before trying them.  I am having a problem that I feel -- probably naively -- is a bug in git:</p>

<p>I have a project, in that root directory I have a plugins folder, which has a submodule called myplugin.  I added it with </p>

<pre><code>git submodule add xxxxxgithub.com/me/myplugin.git plugins/myplugin
</code></pre>

<p>which worked great.  Everything has been working fine for about a week. The framework I'm using has support for overriding views that are inside a plugin.  Those must be stored in </p>

<pre><code>views/plugins/myplugin/customviewfile.  
</code></pre>

<p>The problem is, git thinks that the override folder is also at: </p>

<pre><code> plugins/myplugin 
</code></pre>

<p>Git won't commit anything inside of my views/plugins/myplugin directory, it won't track the files, I can't unignore it no matter what I do.  In Github it shows up with the green arrow indicating that it's a submodule and when I switch branches that directory carries over the way submodules do</p>

<p>I have been pulling my hair out for over an hour and making no progress... any help is greatly appreciated!</p>
","1","182779","",""
"59370064","4332851","2019-12-17 08:17:59","0","306","<git><git-submodules>","How to push changes made in git submodule?","<p>I’ve ...</p>

<ul>
<li>created a new repo,</li>
<li>added submodule</li>
<li>made changes in submodule ...</li>
</ul>

<pre><code>git init
git submodule add ../../origin/subpr1/
cd subpr1/
touch hello.txt
git add hello.txt
git commit -m ""hello.txt""
</code></pre>

<p>... and now I’m trying to push these changes to the.</p>

<pre><code>$ git push
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 6 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 240 bytes | 240.00 KiB/s, done.
Total 2 (delta 0), reused 0 (delta 0)
remote: error: refusing to update checked out branch: refs/heads/master
remote: error: By default, updating the current branch in a non-bare repository
remote: is denied, because it will make the index and work tree inconsistent
remote: with what you pushed, and will require 'git reset --hard' to match
remote: the work tree to HEAD.
remote:
remote: You can set the 'receive.denyCurrentBranch' configuration variable
remote: to 'ignore' or 'warn' in the remote repository to allow pushing into
remote: its current branch; however, this is not recommended unless you
remote: arranged to update its work tree to match what you pushed in some
remote: other way.
remote:
remote: To squelch this message and still keep the default behaviour, set
remote: 'receive.denyCurrentBranch' configuration variable to 'refuse'.
To C:/src/lab/Git/mulliple_git/origin/subpr1
 ! [remote rejected] master -&gt; master (branch is currently checked out)
error: failed to push some refs to '/src/lab/git/origin/subpr1'
</code></pre>

<p>What step did I miss?
Here are some advises I was given by git. But what should I do in my case?</p>
","2","4332851","",""
"31488003","5129607","2015-07-18 05:07:28","1","1300","<git><git-submodules>","how to fix the error in 'git submodule update'","<p>I have a super project named Root and a submodule named subB on which I have no write permission. now I want to git a new branch in another machine .  but when run ""git submodule update"", get error :</p>

<p>""fatal: reference is not a tree: b4ec396a0e1da795a5187f7acf90f686c23c6940
Unable to checkout 'b4ec396a0e1da795a5187f7acf90f686c23c6940' in submodule path 'subB'"".  so I tried all kinds of ways to resolve the issue but I failed. who can answer the following questions for me , thanks:</p>

<ol>
<li>does the ref 'b4ec396a0e1da795a5187f7acf90f686c23c6940' means local commit in submodule subB? I could see its info only by 'git log b4ec396a0e1da795a5187f7acf90f686c23c6940'  in submodule directory 'subB', but in super project I see nothing by the same command.</li>
<li>the ref means a commit in local sumodule repo? because i have no write permission for the remote repo. so I am sure it only on local. buy why the error occurs when I update in another machine. the remote repo should have no idea about the local commit!</li>
<li>how to resolve the issue?</li>
</ol>
","0","5129607","0","0"
"21676570","2409752","2014-02-10 11:56:09","0","231","<git><git-submodules><git-remote><git-subtree>","How to use a git sub repository pushing to a private remote but pulling also from its original origin","<p>I need to setup a repository like this:</p>

<ul>
<li><em>rep</em> (pull &amp; push from/to <em>private remote</em>)
<ul>
<li>normal stuff</li>
<li><em>sub-rep</em> (pull from <em>private remote</em> &amp; <em>public remote</em> and push to <em>private remote</em>)
<ul>
<li>stuff in <em>sub-rep</em></li>
<li><em>sub-module</em> (pull from <em>private remote</em> &amp; <em>public remote</em> and push to <em>private remote</em>) 
<ul>
<li>stuff in <em>sub-module</em></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p><em>rep</em> is the repository I'd like to set up</p>

<p><em>private remote</em> is my own remote repository.</p>

<p><em>sub-rep</em> is the inclusion (<code>submodule</code> or <code>subtree</code>) of another repository fetched from <em>public remote</em> as a sub folder in <em>rep</em>. As I read that there are two ways of including another repository I simply write ''sub repository'' instead of <code>submodule</code> or <code>subtree</code>.</p>

<p><em>sub-module</em> is a <code>submodule</code> inside <em>sub-rep</em></p>

<p>The requirement is that all commits I make in <em>rep</em>, <em>sub-rep</em> and <em>sub-module</em> can be pushed to my <em>private remote</em>, so that I can continue my work from somewhere else. But I still want to be able to receive updates from the <em>public remote</em>. And at this point, no commit I make should be pushed to the <em>public remote</em>.</p>

<p>The key should be to use multiple remotes, but I'm not sure how to handle the repository inside repository (inside repository...) thing right. As the setup will be relatively complex (I think) an additional workflow example would be very helpful.</p>
","5","2409752","",""
"28690747","4473537","2015-02-24 08:02:15","1","175","<git><git-submodules>","How to update the git submodule?","<p>I have 2 projects. ""<code>MyProg</code>"" and ""<code>SubProj</code>"".<br>
Both projects are on Bitbucket. </p>

<p>One project is submodule to the second. The problem is that when I pull changes in the main project, the changes submodule are not pulled.</p>

<p>Perhaps it should be, or did I do something wrong?<br>
How do I do that when you upgrade one project <em>and</em> pull the second project's change?</p>
","0","4473537","0","0"
"10757091","1059589","2012-05-25 15:21:32","46","34139","<git><git-submodules><git-diff>","git: list of all changed files including those in submodules","<p>I would like to get a list of all files, which have changed betweet two commits including those in submodules.</p>

<p>I know I can do this:</p>

<pre><code>git diff --name-only --diff-filter=ACMR ${revision} HEAD
</code></pre>

<p>It returns a list of files, including the submodule-path, but not the files within.</p>

<p>Example:
I've updated a submodule. I commited the super-project. Now I want to get a list of all files which have been modified.</p>

<p>Do you know a way to get this done?</p>
","0","1059589","0","0"
"46937828","7169147","2017-10-25 16:41:41","1","23","<git><git-submodules>","Using gitmodules for plugins","<p><strong>I'm looking for a solution for my following usecase:</strong></p>

<hr>

<p>I have a CMS which stores the modules/plugins in seperate folders.</p>

<ul>
<li>src/Frontend/Modules</li>
<li>src/Backend/Modules</li>
</ul>

<hr>

<p>I have a module is structured like this:</p>

<ul>
<li>src/Frontend/Modules/{ModuleName}</li>
<li>src/Backend/Modules/{ModuleName</li>
</ul>

<hr>

<p><strong>I would love to:</strong>
Use git submodules to add the modules foreach project I make, so I can easily update the module repository if needed fromout the project.</p>

<hr>

<p><strong>I have the following issue</strong>: If I add the submodule to my project on path ""/"" as that's the path it should be, it prompts me an error that the directory already exists (Ofcourse).</p>

<hr>

<p><strong>My best solution I can think of</strong>: Split the module in two, having Frontend and Backend as it's own repository foreach plugin (unwanted).</p>

<hr>

<p><strong>What I would love is that I can just add my module as a git submodule, without the need of splitting it up in two seperate modules.</strong></p>

<p>Any help is appreciated! Thanks in advance!</p>
","4","7169147","",""
"65524950","1169781","2020-12-31 19:35:26","1","142","<git><git-submodules><git-commit>","Git submodule updating - HEAD doesn't match up to git log","<p>I'm having trouble getting git's submodules to update properly when I pull a repository and the submodule's commit has changed.  First off, I believe this question is different from <a href=""https://stackoverflow.com/questions/18770545/why-is-my-git-submodule-head-detached-from-master"">this</a> question because that question is concerned with staying up to date with a particular branch.  I don't want the latest commit on a branch, I want the commit specified in the parent repository.</p>
<h3 id=""heres-my-scenario-0l4q"">Here's my scenario:</h3>
<p>Git repo <code>A</code> has repo <code>B</code> as a submodule.  Repo <code>A</code> lists submodule <code>B</code> as being on commit <code>abc</code>.</p>
<p>Then, inside repo <code>A</code>, I do a <code>git pull</code> and receive a new commit for repo <code>A</code>.  This new commit states that submodule <code>B</code> should now be on commit <code>def</code>.  I run a <code>git submodule update</code> just to make sure everything is up to date.</p>
<h3 id=""now-heres-where-the-problem-arises-c4rr"">Now here's where the problem arises.</h3>
<p>I <code>cd</code> into submodule <code>B</code> and run <code>git status</code>.  It reports <code>HEAD detached at abc</code>.  Hmm, that's not right, it should be on <code>def</code>.  <strong>But here's the confusing part</strong> - I run <code>git log</code> and the very first commit it lists is <code>def</code>, preceded by <code>abc</code>!  <strong>How can that be?</strong> Shouldn't <code>git log</code> always start with <code>HEAD</code>?  And if it knows about the new commit, <strong>why hasn't the working copy updated to reflect that?</strong></p>
<p>Even after getting the submodule in the state described above, I can't figure out what <code>git submodule ...</code> command, if any, would move the <code>B</code>'s head to be at <code>def</code>.  The only fix I found was to <code>cd</code> into <code>B</code> and manually run <code>git checkout def</code>.</p>
<p>Help, please!  I want a <code>git pull</code> in repo <code>A</code> to update submodule <code>B</code> to the commit has as indicated by <code>A</code>.</p>
","3","1169781","0","0"
"47289414","7211233","2017-11-14 15:24:16","0","63","<git><git-submodules>","git submodule unpushed commit update","<p>so my git project has a submodule, and i make a change and commit it, <strong>but i don't push</strong> , then on the parent i issue command  </p>

<pre><code>git submodule update
</code></pre>

<p>which reverts the submodule , but where did the commit go, can i get it back?</p>

<p>normally if i had pushed the sub module commit it would have gone to the server, and then i would always be able to run the following command and it pulls it back down from the server.</p>

<pre><code>git submodule update --remote
</code></pre>
","2","7211233","",""
"47299554","3423503","2017-11-15 04:50:07","1","676","<git><git-submodules>","How to recover a messed-up git submodule?","<p>I <code>git submodule add</code>'ed a submodule at a wrong directory.<br>
I <code>git rm</code>'ed the submodule and then <code>git submodule summary</code> returned <code>fatal: Not a git repository: '&lt;path to the deleted submodule&gt;.git'</code>. </p>

<p>I used <code>grep -r '&lt;path to the deleted submodule&gt;'</code> to remove all references to the deleted directory.<br>
There was only one reference left to the deleted directory, which was in <code>.git/index</code> (binary file).<br>
But <code>git submodule summary</code> still gives <code>fatal: Not a git repository: '&lt;path to the deleted submodule&gt;.git'</code>. </p>

<p>How should I fix it?</p>
","0","3423503","0","0"
"11177399","455578","2012-06-24 12:23:01","4","647","<git><git-submodules><git-post-receive>","git checkout bare with submodules in post-receive","<p>how may I checkout a bare repository on my server in a post-receive hook that includes submodules?</p>

<p>I currently have this as a post-receive hook:</p>

<pre><code>#!/bin/bash

# http://blog.ekynoxe.com/2011/10/22/git-post-receive-for-multiple-remote-branches-and-work-trees/
# post-receive hook that checks out development branch after a push to the bare
# repo

# paths must exist
livepath=""/var/www/live""
devpath=""/var/www/dev""

while read oldrev newrev ref
do
    branch=`echo $ref | cut -d/ -f3`

    #if [[ ""master"" == ""$branch"" ]]; then
    #   git --work-tree=$livepath checkout -f $branch
    #   echo 'Changes pushed live.'
    #fi
    if [[ ""develop"" == ""$branch"" ]]; then
        git --work-tree=$devpath checkout -f $branch
        echo 'Changes pushed to dev.'
    fi
done
</code></pre>

<p>But with this the submodules wont get initialized.</p>

<p>I tried doing this for testing manual:</p>

<pre><code>cd /var/www/dev
git --work-tree /var/www/dev --git/dir /git/myrepo.git submodule init
git --work-tree /var/www/dev --git/dir /git/myrepo.git submodule update
</code></pre>

<p><code>submodule update</code> command failed with this error messages:</p>

<pre><code>fatal: working tree '/var/www/dev' already exists.
Clone of 'https://github.com/yiisoft/yii.git' into submodule path 'yii' failed
</code></pre>

<p>That behavior is already (unanswered) questioned here: <a href=""https://stackoverflow.com/questions/5871438/git-submodules-with-separate-work-tree"">Git submodules with separate work_tree</a></p>

<p>It would also be good if it would not reinitialize them if they are alredy there.</p>
","0","455578","0","0"
"65852532","4726348","2021-01-22 20:45:26","1","1033","<git><git-submodules>","git submodule tracking a tag","<p>I know how to add a submodule that tracks a branch (<code>-b branchname</code>) but I want to know if there is a similar functionality to track a tag.</p>
<p>Let say I have a tag for a specific project in a submodule repo. I add new features in the submodule repo and pull up the tag to a certain commit. I want the project that is using the submodule to track the tag without having to have an extra commit in the project repo.</p>
<p>Is this possible ?</p>
<p>Regards</p>
","1","4726348","",""
"65853473","14927313","2021-01-22 22:16:12","1","202","<git><github><git-submodules>","Git: how to init submodule in just created local git repository","<p>If I clone a git repository and the repository has a <code>.gitmodules</code> file, then <code>git submodule init</code> successfully init submodules and <code>git submodule update</code> downloads submodules to local directories. But if I manually download the same project, but without the <code>.git</code> directory(because the repository isn't cloned), and the project still has a <code>.gitmodules</code> file, I  create a new git repository using the command <code>git init</code> and init submodules using the command <code>git submodules init</code>, but in this case the command prints nothing, and <code>git submodule update</code> does nothing. Why? How can I download submodules in just created local repository?</p>
","2","14927313","",""
"65861084","2593810","2021-01-23 15:39:46","4","826","<git><github><repository><git-submodules><git-remote>","What happens to a git submodule when its referenced repo is deleted?","<p>Suppose I find an interesting repository on github that I want to use, I add it as submodule and then one day the owner of the repo decide to delete the repo, would my submodule become broken?</p>
","1","2593810","",""
"65867606","3574919","2021-01-24 06:03:14","2","169","<git><git-submodules>","is it possible to save submodules changes to the main git index?","<p>up until very recently i was managing modules via copy/paste but then i discovered submodules &amp; with the single branch clone its becoming more sensible to use this feature.</p>
<p>however i have a couple of questions and hopefully someone could help me with them.</p>
<blockquote>
<ol>
<li>is it possible to save a module changes in the main git index instead of the module it self ?</li>
</ol>
</blockquote>
<p>what i mean is am trying to have a central modules with the basic/essential setup on github &amp; under each project that pull/require this module, the project can make changes that is related to him alone &amp; save this changes to his git index, so we can clone the project later and all the changes will be there.</p>
<p>if this is not possible, what would be a viable alternative ?</p>
<hr />
<p><strong># Partial Solution</strong></p>
<p>use <code>git diff --submodule=diff &gt; modules_changes.diff</code> &amp; later simply use <code>git apply modules_changes.diff</code></p>
<p>however this wont work with changed files &quot;deleted/added files&quot;</p>
<p><strong># Better Solution</strong></p>
<p>setup a repo per module &amp; have branches for each project</p>
<hr />
<blockquote>
<ol start=""2"">
<li>how to auto set the module head on add ?</li>
</ol>
</blockquote>
<p>atm when you want to push something to the module while you are working on a project. the steps are usually</p>
<ul>
<li>cd into the module dir</li>
<li>add &amp; commit ur changes</li>
<li>push the new changes while specifying the head we will push to</li>
</ul>
<p>however i was wondering if there is a way to automate that, so something like auto push on commit will work directly without the need to manually do the steps above on each module change.</p>
","0","3574919","",""
"29126334","919705","2015-03-18 15:38:51","0","46","<git><github><ssh><git-submodules>","Access rights to submodules under github","<p>I want a github project <em>projectA</em> which uses a submodule <em>projectSub</em>. I further want users to be able to clone the project recursively, automatically getting both <em>projectA</em> and <em>projectSub</em>.</p>

<p>Please correct me if I'm wrong, but as I understand it, cloning <code>https://github.com/username/projectname</code>  implies that you will be asked for username and password before pushing, whereas cloning <code>git@github.com:username/projectname</code> will use your ssh credentials automatically.</p>

<p>Now, I can add the submodule thus</p>

<pre><code>git add submodule git@github.com:username/projectSub
</code></pre>

<p>or thus</p>

<pre><code>git add submodule https://github.com/username/projectSub
</code></pre>

<p>If I use the first method, a user <em>without</em> ssh access to the project will not be able to recursively clone <em>projectA</em>, because the <code>.gitmodules</code> file contains <code>git@github.com:...</code>.</p>

<p>But if I use the second method, a user <em>with</em> ssh access to the project will nevertheless be asked to provide username and password when pushing updates to <em>projectSub</em>, because the <code>.gitmodules</code> file contains <code>https://github.com/...</code>.</p>

<p>Is there a way to make this work for both kinds of users? (Or have I completely misunderstood how this works?)</p>
","0","919705","",""
"65882520","5029787","2021-01-25 10:00:22","0","434","<windows><git><jenkins><git-submodules>","Jenkins Windows 10: git-submodule cannot be used without a working tree","<p>We have jenkins Windows 10 CI builder.</p>
<p>Our project has submodule, which I want to &quot;git submodule update --init --recursive&quot;.</p>
<p><strong>This command is called from cmake script</strong>, but even if one enables submodule processing the error will be the same:
<strong>C:\Program Files\Git\mingw64/libexec/git-core\git-submodule cannot be used without a working tree.</strong>
<a href=""https://i.stack.imgur.com/cm2L5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cm2L5.png"" alt=""enter image description here"" /></a></p>
<p>Current setup copies all files of project from Ubuntu jenkins is run on( the setup is not known for sure and I started studying Jenkins from bottom ) and puts them into Windows CI builder into <strong>Pull_Request_Builder_Winx64</strong> folder.</p>
<p>Tried to run git manually from this folder: result is the same</p>
<p>Tried running update manually on the same project that is downloaded with git clone, it works.</p>
<p>Please help find the source of the issue, thanks in advance</p>
","0","5029787","",""
"65896791","6330106","2021-01-26 06:29:24","0","451","<git><gitlab><gitlab-ci><git-submodules>","Failed to setup submodules in gitlab cicd","<p>I'm new to Gitlab CICD. We have a repository which has two submodules registered with SSH urls. In the CICD job, it failed to clone the submodules because of <code>Host key verification failed</code>. I think the job environment's ssh public key is not registered in some Gitlab account, but I have no clue how to add the public key to which account.</p>
<p>The <code>.gitsubmodules</code> is like:</p>
<pre><code>[submodule &quot;xfoo&quot;]
    path = xfoo
    url = git@gitlab.com:a/xfoo.git
[submodule &quot;xbar&quot;]
    path = xbar
    url = git@gitlab.com:a/xbar.git
</code></pre>
<p>The <code>.gitlab-ci.yml</code> is like:</p>
<pre><code>variables:
    GIT_SUBMODULE_STRATEGY: recursive 

test:
  script:
    - bash ./foo.sh

cpplint:
  script:
    - bash ./bar.sh
</code></pre>
<p>In foo.sh and bar.sh there are no git commands. I think there's a standard setup for this case but just can't find out how.</p>
","3","6330106","",""
"11258737","229151","2012-06-29 08:50:21","96","45126","<git><git-submodules>","Restore git submodules from .gitmodules","<p>I have a folder, which was a git repo. It contains some files and .gitmodules file. Now, when I do <code>git init</code> and then <code>git submodule init</code>, the latter command output is nothing. How can I help git to see submodules, defined in .gitmodules file without running <code>git submodule add</code> by hand again?</p>

<p>Update:
this is my .gitmodules file:</p>

<pre><code>[submodule ""vim-pathogen""]
    path = vim-pathogen
    url = git://github.com/tpope/vim-pathogen.git
[submodule ""bundle/python-mode""]
    path = bundle/python-mode
    url = git://github.com/klen/python-mode.git
[submodule ""bundle/vim-fugitive""]
    path = bundle/vim-fugitive
    url = git://github.com/tpope/vim-fugitive.git
[submodule ""bundle/ctrlp.vim""]
    path = bundle/ctrlp.vim
    url = git://github.com/kien/ctrlp.vim.git
[submodule ""bundle/vim-tomorrow-theme""]
    path = bundle/vim-tomorrow-theme
    url = git://github.com/chriskempson/vim-tomorrow-theme.git
</code></pre>

<p>and here is listing of this dir:</p>

<pre><code>drwxr-xr-x  4 evgeniuz 100 4096 июня  29 12:06 .
drwx------ 60 evgeniuz 100 4096 июня  29 11:43 ..
drwxr-xr-x  2 evgeniuz 100 4096 июня  29 10:03 autoload
drwxr-xr-x  7 evgeniuz 100 4096 июня  29 12:13 .git
-rw-r--r--  1 evgeniuz 100  542 июня  29 11:45 .gitmodules
-rw-r--r--  1 evgeniuz 100  243 июня  29 11:18 .vimrc
</code></pre>

<p>so, definitely, it is in top level. the git directory is not changed, only <code>git init</code> is done</p>
","3","229151","0","0"
"65921468","4230627","2021-01-27 14:45:42","2","34","<git><git-submodules>","How to handle expired url in gitmodules","<p>I am encountering problems when working with git submodules.</p>
<p>In my case I'd like to check out some older commit, but the url given in .gitmodules has changed. Therefore git will exit with error.</p>
<pre><code>Cloning into 'XXX'...
fatal: unable to access 'http://xxx: Could not resolve host: xxx
</code></pre>
<p>What is the most suitable workflow to conduct this?</p>
<p>Thanks, Daniel</p>
","4","4230627","",""
"11749515","79125","2012-07-31 21:49:33","-1","2235","<git><git-submodules>","Why is git telling me that a submodule I removed is ignored?","<p>Why is git telling me that the path for my submodule is ignored?</p>

<pre><code>The following path is ignored by one of your .gitignore files:
multi/vim/.vim/bundle/powerline
Use -f if you really want to add it.
</code></pre>

<hr>

<p>Here's what I'm doing:</p>

<pre><code>$ git subaddvim git://github.com/Lokaltog/vim-powerline.git powerline
The following path is ignored by one of your .gitignore files:
multi/vim/.vim/bundle/powerline
Use -f if you really want to add it.
$ git help subaddvim
`git subaddvim' is aliased to `!f(){ [ $# -eq 2 ] &amp;&amp; git submodule add $1 multi/vim/.vim/bundle/$2; };f'
</code></pre>

<p><em>Edit</em>: Looks like it's the <code>p</code> in <code>p</code>owerline:</p>

<pre><code>$ git subaddvim git://github.com/Lokaltog/vim-powerline.git p
The following path is ignored by one of your .gitignore files:
multi/vim/.vim/bundle/p
Use -f if you really want to add it.
$ git subaddvim git://github.com/Lokaltog/vim-powerline.git owerline
Cloning into 'multi/vim/.vim/bundle/owerline'...
</code></pre>

<p>I don't understand why.</p>

<p><em>Edit 2</em>: I found a file in the submodule clone destination:</p>

<pre><code>multi/vim/.vim/bundle$ cat powerline/.git
gitdir: ../.git/modules/multi/vim/.vim/bundle/powerline
</code></pre>

<p>If I remove that and try again, I get a different error:</p>

<pre><code>$ git subaddvim git://github.com/Lokaltog/vim-powerline.git powerline
fatal: Not a git repository: ../.git/modules/multi/vim/.vim/bundle/powerline
Unable to checkout submodule 'multi/vim/.vim/bundle/powerline'
</code></pre>

<p>Maybe there's some thing messed up with my .git? (I had cloned this repo yesterday and then reverted that change.)</p>

<p><em>Edit 3</em>: I tried using <code>git submodule</code> directly (instead of my alias) and it worked! I can re-create the issue (sometimes) by doing <code>git reset --hard</code> after the clone. Seems like it's a combination of my alias not working the same as the git command git ignoring the <code>.git</code> file (or doing something magic that I don't understand). And maybe something to do with my .git/config having a reference to powerline.</p>

<p><em>Edit 4</em>: My previous edit wasn't clear: Although using <code>git submodule</code> directly worked. It does not always work. I don't know why it worked in the first place.</p>

<p>I've narrowed it down to a reproducible case. It looks like the issue is caused by git assuming that submodules are in the root directory. Here's my test script.</p>

<pre><code>if [ ! -d remote ] ; then
    echo
    echo Setup remote test repo 
    mkdir remote
    cd remote
    git init
    touch firstfile
    git add firstfile
    git ci -m'first'
    cd -
fi

# Pick one of these lines:
submodule=multi/plugin
# OR
submodule=plugin

echo
echo Setup test repo 
mkdir test
cd test
git init
touch firstfile
git add firstfile
git ci -m'first'

echo
echo submodule add
git submodule add ../remote $submodule
ls -ld $submodule/.git
cat $submodule/.git

echo
echo submodule remove
git reset --hard HEAD
ls -ld $submodule/.git
cat $submodule/.git
rm -r $submodule/

echo
echo submodule re-add
git submodule add ../remote $submodule
ls -ld $submodule/.git
cat $submodule/.git
</code></pre>

<p>Using <code>submodule=multi/plugin</code> will fail:</p>

<pre><code>submodule re-add
fatal: Not a git repository: ../.git/modules/multi/plugin
Unable to checkout submodule 'multi/plugin'
-rw-r--r-- 1 pydave mkgroup 37 Aug  1 10:08 multi/plugin/.git
gitdir: ../.git/modules/multi/plugin
</code></pre>

<p>(After this, if you run <code>git submodule add</code>, you'll get the ""following path is ignored"" message.)</p>

<p>But <code>submodule=plugin</code> will succeed:</p>

<pre><code>submodule re-add
-rw-r--r-- 1 pydave mkgroup 31 Aug  1 10:07 plugin/.git
gitdir: ../.git/modules/plugin
</code></pre>

<p>The relative paths are both using <code>../.git</code>, which is only correct for the second option -- when the submodule is in the root of the git project.</p>

<p>I've rename this question to be more specific to my problem and <a href=""https://stackoverflow.com/q/11764439/79125"">re-asked the original question</a>.</p>
","5","79125","0","0"
"11751152","557580","2012-08-01 00:55:22","4","273","<git><github><git-submodules><mupdf>","How to manage a project on GitHub that has an external git dependency not stored on GitHub","<p>I'm working on a project that I'd like to store on GitHub. </p>

<p>This project uses mupdf, which is hosted on it's own git server, e.g. git://git.ghostscript.com/mupdf.git</p>

<p>I want to be able to get the latest changes from mupdf, but also keep changes that I make to mupdf, while keeping my whole project on GitHub.</p>

<p>My first thought was to add mupdf as a submodule and then push my project to GitHub-- but what happens to changes I make to mupdf (e.g. inside the submodle)? Where do I store those? My understanding was that if I make a change inside the submodule, the commit there will only be stored locally. I read this page <a href=""http://git-scm.com/book/en/Git-Tools-Submodules"" rel=""nofollow"">http://git-scm.com/book/en/Git-Tools-Submodules</a> , but was left unsure whether this will work. </p>

<p>What's the best way to set up my repo, such that:</p>

<p>1) My entire project is on GitHub
2) I can get new changes from mupdf into my project
3) I can preserve my changes to mupdf and merge them with new changes</p>
","0","557580","0","0"
"14250183","433570","2013-01-10 03:03:05","2","1047","<git><git-submodules>","git submodule push?","<p>I changed code in submodule and want to share with other team members.<br>
(Wow git submodule is hard)</p>

<pre><code>&gt; cd to submodule
&gt; git add/commit
&gt; git push prompts me Username: and Password:
&gt; Username: 
&gt; Password: 
&gt; error: The requested URL returned error: 403 while accessing 
&gt; https://github.com/hovel/pybbm.git/info/refs
</code></pre>

<p>I read I have to <code>push</code> the change before other people can do <code>git submodule update</code> to see the change.<br>
I thought I'm pushing it to some local repo? why is the error showing me github(original repo) and how do I fix it? </p>
","0","433570","0","0"
"11887203","4249","2012-08-09 15:51:48","130","38575","<git><git-submodules>","""You are on a branch yet to be born"" when adding git submodule","<p>I am attempting to add a few submodules to my <code>.vim/bundles</code> directory, and when I attempt to add this particular repo Git gives me a strange error I've never seen before:</p>

<pre><code>$ git submodule add -f git://github.com/derekwyatt/vim-scala.git .vim/bundle/vim-scala
fatal: You are on a branch yet to be born
Unable to checkout submodule '.vim/bundle/vim-scala'
</code></pre>

<p>Any idea what can cause this?</p>

<p>If I clone the same repo to a test directory (not through the submodule command), it works fine, and creates the expected files.</p>
","0","4249","0","0"
"29564257","1827123","2015-04-10 14:40:12","6","2572","<git><git-submodules>","git push --recurse-submodules=on-demand is not truly recursive","<p>I have the following project structure:</p>

<pre><code>root-project
      |
      |-- A
      |   |
      |   |-- C
      |
      |-- B
</code></pre>

<p>A and B are submodules of the root-project. C is in turn a submodule
of project A. Suppose I have made changes to projects A,B and C and
commited these changes to the respective indices. After that I update
the references to A and B in the root-project and commit that change
as well. When I push the changes of the root-project with the option
--recurse-submodules=on-demand, git pushes all commits of projects A,
B and the root-project, but silently ignores the commits of
project C. I would expect that it pushes the changes of project C as well.</p>

<p>I know that i can work around this problem by using the following two commands in the root-project folder.</p>

<pre><code>git submodule foreach --recursive 'git push origin master'
git push
</code></pre>

<p>Could someone clarify whether I'm doing something wrong or if this is a bug in git-push.I have already asked this question on the git mailing list but didn't  receive any response: <a href=""http://thread.gmane.org/gmane.comp.version-control.git/266184"" rel=""noreferrer"">http://thread.gmane.org/gmane.comp.version-control.git/266184</a></p>

<p>I have also written a small shell script that sets up the described project structure and executes the recursive push operation:
<a href=""https://gist.github.com/usommerl/6e8defcba94bd4ba1438"" rel=""noreferrer"">https://gist.github.com/usommerl/6e8defcba94bd4ba1438</a></p>

<p>git version 2.3.3</p>
","1","1827123","0","0"
"29629847","221450","2015-04-14 14:20:26","0","63","<git><git-submodules>","Transform existing subdirectories inside a git repository into nested sub-git repositories","<p><strong>I have only access to one (1) and only one git remote repository.</strong> </p>

<p>In that git repositories I have that structure:</p>

<ul>
<li>root (remote git repository X)
<ul>
<li>A directory</li>
<li>B directory </li>
<li>C directory</li>
</ul></li>
</ul>

<p>Right now if I change something in A,B,C is tracked as part of the root git repository.</p>

<p>What I would like is to transform my current git repository as follows:</p>

<ul>
<li>root (remote git repository X)
<ul>
<li>A (remote git repository inside X)</li>
<li>B (remote git repository inside X)</li>
<li>C (remote git repository inside X)</li>
</ul></li>
</ul>

<p>Right now I read about submodules but it as far I've understood with submodules I will have to use different remote repositories and not my existing one. </p>

<p>Suggestions ? </p>
","1","221450","",""
"12011120","546741","2012-08-17 18:18:37","3","584","<npm><git-submodules><jshint>","NPM dependency is not creating git submodule","<p>I'm running grunt.js. One of its dependencies is node-jshint which has the actual jshint files added as a submodule. (I'm using my own fork of node-jshint so that I can do some modifications to the jshint source).</p>

<p>If you npm install in grunt, it'll install node-jshint and it will also build the jshint submodule.</p>

<p>However, my package.json file is pointing to the url of my node-jshint fork rather than the npm version, and the jshint submodule never gets created.</p>

<p>It seems like when npm grabs dependencies normally, it's internally running git submodule update, but when it grabs dependencies via a URL, it never runs that command.</p>

<p>Is there anyway to force npm to run git submodule update when it install a dependency, like via package.json?</p>
","1","546741","0","0"
"12024345","358480","2012-08-19 05:02:40","2","927","<git><github><git-submodules>","""Not a git repository: "" Error when trying to add RestKit to my repository","<p>I am trying to start using git with my project.</p>

<p>I had (in the past) cloned RestKit to my project for use (I think that as a submodule but I am not sure. Now everything is working great and 99% of my files are tracked and pushed to Github.</p>

<p>When I try to add RestKit/ to my repository I get this error:</p>

<blockquote>
  <p>shanis-imac:shannoga-English-Club shannoga$ git add RestKit/
  fatal: Not a git repository: /Users/shannoga/github/shannoga-English-Club/.git/modules/RestKit</p>
</blockquote>

<p>Now I can guess that I am not spoused to push rest kit but somehow to relate it to my repository?</p>

<ol>
<li>Am I right?</li>
<li>What does the error mean</li>
<li>What is the way to do that?</li>
</ol>

<p>Thanks, Shani</p>
","1","358480","",""
"12031329","1610694","2012-08-20 01:23:57","0","148","<git><status><git-submodules>","how to perform ""git status"" across many submodules","<p>I have a git repository with several submodules. When I perform a <code>git status</code> in the parent module it only shows me changes at that level, and I need to <code>cd</code> into each submodule and perform <code>git status</code> separately in each module. Is there a better way of doing this so that I can perform <code>git status</code> at the top level and see the changes across all submodules?</p>

<p>My <code>git --version</code> returns:</p>

<blockquote>
  <p>git version 1.7.9.6 (Apple Git-31.1)</p>
</blockquote>
","0","1610694","",""
"29681116","722986","2015-04-16 16:44:46","6","13756","<git><android-studio><git-submodules>","Accessing git submodule in Android Studio","<p>I'm just starting out using source control for my own project, and now I want to add Joda-Time. I want to add it as a submodule so I went into the terminal and executed:</p>

<pre><code>git submodule add https://github.com/JodaOrg/joda-time.git
</code></pre>

<p>and it downloaded all the files successfully. Then I ran:</p>

<pre><code>git submodule init
</code></pre>

<p>And got nothing back.</p>

<pre><code>git submodule status
</code></pre>

<p>returns</p>

<pre><code>b9fe534c7f5876eced6494a6d6c1deaf2528a579 joda-time (v2.7-17-gb9fe534)
</code></pre>

<p>I checked my projects root directory and I see the new joda-time directory and it's source. But now how do I access the library in my project? Did I miss a step? </p>
","0","722986","",""
"12078365","219837","2012-08-22 17:28:22","26","12801","<git><git-submodules>","how exactly does git submodule work","<p>The <code>.gitmodule</code> file only specifies the module repository url. How does <code>git submodule</code> know which version to download? It seems to be always checking out the latest version. Then, how does developers ensure compatibility between the main project and the sub modules?</p>
","0","219837","0","0"
"66353917","124486","2021-02-24 15:26:38","4","996","<git><git-submodules><sparse-checkout><git-sparse-checkout>","Can sparse-checkout patterns be added to .gitmodules?","<p>Let's say I have a <code>git submodule</code> and I want to to enable sparse-checkout on it. Is it possible to do so and add that file to the repository for other people that clone? The git submodule gets added to <code>/.gitmodules</code> but the sparse checkout file for that submodule is in <code>.git/modules/foo/info/sparse-checkout</code>? <strong>How can I configure a git submodule such that when other people clone with <code>--recursive</code> they only get the whitelisted directories?</strong> How can I save the configuration of sparse-checkout on submodules into the repo?</p>
","7","124486","0","0"
"30227574","4081597","2015-05-14 00:51:34","37","1470","<git><cocoapods><git-submodules>","How to create a CocoaPod with nested git submodules?","<p>I'm trying to create a CocoaPod with nested git submodules. I can create the pod, however, I can't <em>fully</em> install it.</p>
<p>When I run <code>pod install --verbose</code> I can see that <code>git submodule update --init</code> is being run instead of <code>git submodule update --init --recursive</code> which doesn't pull the nested submodule.</p>
<p>Does CocoaPods support nested submodules, or no? I have scoured the web for potential leads, but can't find anything!</p>
<p>I should also mention that I that lint passes with <code>pod lib lint</code> but not <code>pod spec lint.</code> <code>pod spec lint</code> complains that it can't find the header file in the nested submodule. I'm not sure if this is related to the problem above.</p>
<p>(Also note that this particular Pod I'm working on is only a proof of concept. I'll be creating a much more complex Pod that depends on socket.IO-objc. Unfortunately socket.IO-objc is not available as a Pod, and depends on SocketRocket as a submodule.)</p>
<p>Here's my PodSpec:</p>
<pre class=""lang-rb prettyprint-override""><code>Pod::Spec.new do |s|
  s.name             = &quot;DebugTools&quot;
  s.version          = &quot;0.1.0&quot;
  s.summary          = &quot;Awesome tools for debugging iOS apps.&quot;
  s.homepage         = &quot;https://github.com/robertcrabtree/DebugTools&quot;
  s.license          = 'MIT'
  s.author           = { &quot;Robert Crabtree&quot; =&gt; &quot;me@gmail.com&quot; }
  s.source           = { :git =&gt; &quot;https://github.com/robertcrabtree/DebugTools.git&quot;, :tag =&gt; s.version.to_s, :submodules =&gt; true }

  s.platform     = :ios, '7.0'
  s.requires_arc = true

  s.source_files = 'Pod/Classes/**/*', 'Pod/Submodules/LogMaster/LogMaster/*.{h,m}', 'Pod/Submodules/LogMaster/LogMaster/LogCore/*.h'
  s.resource_bundles = {
    'DebugTools' =&gt; ['Pod/Assets/*.png']
  }
end
</code></pre>
<p>Here's my Podfile:</p>
<pre class=""lang-rb prettyprint-override""><code>pod &quot;DebugTools&quot;, :git =&gt; &quot;https://github.com/robertcrabtree/DebugTools.git&quot;, :submodules =&gt; true
</code></pre>
","0","4081597","0","0"
"12631212","684908","2012-09-27 22:52:55","1","1404","<git><version-control><git-submodules><puppet>","How to properly update a git submodule?","<p>I know this question has been beaten to death. But I still don't have a clear understanding of why my submodule is trying to refer to a commit in my superproject. I have a project which has a number of submodules, some of which reference github repositories which I want to contribute to. After updating the module, I pull the changes of the module:</p>

<pre>
[ashinn@puppet1 puppet]$ cd modules/ganglia
[ashinn@puppet1 ganglia]$ git branch
* (no branch)
  master
[ashinn@puppet1 ganglia]$ git pull origin master
remote: Counting objects: 8, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 6 (delta 4), reused 4 (delta 2)
Unpacking objects: 100% (6/6), done.
From https://github.com/andyshinn/puppet-ganglia
 * branch            master     -> FETCH_HEAD
Merge made by recursive.
 README |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
</pre>

<p>Now I want to update the reference to the module in the superproject:</p>

<pre>
[ashinn@puppet1 ganglia]$ cd ../..
[ashinn@puppet1 puppet]$ git add modules/ganglia
[ashinn@puppet1 puppet]$ git commit -m 'updated ganglia module'
[ganglia c172591] updated ganglia module
 1 files changed, 1 insertions(+), 1 deletions(-)
</pre>

<p>I am currently working on the ganglia branch, so I push it to my origin (which is 2 differen't URLs):</p>

<pre>
[ashinn@puppet1 puppet]$ git push origin ganglia
Counting objects: 8, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 616 bytes, done.
Total 6 (delta 4), reused 0 (delta 0)
To git@github.com:andyshinn/puppet.git
   1876698..c172591  ganglia -> ganglia
Counting objects: 5, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 323 bytes, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: From /var/lib/puppet/repo
remote:    dcd1fcc..c172591  ganglia    -> origin/ganglia
remote: From https://github.com/andyshinn/puppet-ganglia
remote:    a0c4e21..975c92f  master     -> origin/master
remote: fatal: reference is not a tree: c5defdeae006c7b87058cc5c79aef60087b63a6b
remote: Unable to checkout 'c5defdeae006c7b87058cc5c79aef60087b63a6b' in submodule path 'modules/ganglia'
remote: Updating existing environment ganglia
To puppet@puppet.mydomain.com:repo
   dcd1fcc..c172591  ganglia -> ganglia
</pre>

<p>The remote has a post-receive script to checkout branches in different folders and run <code>git submodule update --init</code> for each. If I manually connect to the origin repo I can verify the issue:</p>

<pre>
-bash-4.1$ git pull
Already up-to-date.
-bash-4.1$ git submodule update --init
fatal: reference is not a tree: c5defdeae006c7b87058cc5c79aef60087b63a6b
Unable to checkout 'c5defdeae006c7b87058cc5c79aef60087b63a6b' in submodule path 'modules/ganglia'
</pre>

<p>What am I doing wrong here?</p>
","0","684908","",""
"21587770","2684","2014-02-05 20:26:36","6","2703","<android><git><intellij-idea><git-submodules>","IntelliJ + git + submodules -> Where do you put the .iml?","<p>Please note: <strong>Not using Gradle/Maven.</strong></p>

<p><strong>Scenario:</strong></p>

<p>A typical Android App, requires the <em>Facebook SDK</em>, you have a few options:</p>

<ol>
<li>Clone the SDK somewhere in your disk, copy the contents of <code>/facebook-android-sdk/facebook</code> (where the Android src code for the library resides) into your <code>/myapp/facebook</code> for example, import a <em>module</em> in IntelliJ, point it to this new <code>/myapp/facebook</code> path and call it a day. IntelliJ will create a facebook.iml (and will modify your project.properties and other <code>.idea</code> related files to account for this new module). You can then add this new module to your repository and treat it as just any other library. </li>
<li>Clone the SDK inside your app's directory, e.g.: <code>/myapp/facebook-android-sdk/*</code> and import a <em>module</em> in IntelliJ, point it to this new path and treat it as another git repository (you can even pull from Facebook to get new changes, albeit sometimes this may break the module).</li>
<li>Create a git submodule pointing to the Facebook SDK's github repo, import a <em>module</em> in IntelliJ pointing to the submodule, most likely correctly imported in <code>/myapp/facebook-android-sdk/*</code>. </li>
</ol>

<p>Before moving on, let's see some particular aspects of each:</p>

<ol>
<li><strong>PROS</strong>: It's a fire and forget and clean approach, you can even change the SDK as you please, because you only imported the library and you have the source code. <strong>CONS:</strong> tedious to keep up to date. Everytime there's a new FacebookSDK update, you have to manually update your external clone, copy the SDK and/or re-add the module (and make sure stuff works!). If you have local changes, things are harder. </li>
<li><strong>PROS:</strong> Easier to update than #1, but you can't really commit changes (unless you created a <em>fork</em>), because we don't have write access to the FacebookSDK. <strong>CONS:</strong> your <code>facebook.iml</code> and stuff will always be ""<em>dirty</em>"" in git, because you cannot commit it (since it's a different repo).</li>
<li><strong>PROS:</strong> The cleanest approach in terms of technology, you're doing ""the right thing"" by using a submodule and let git point to the right repository and correctly treat it as such. <strong>CONS:</strong> submodules are… well delicated if not treated with care, but that asside, the same rules as #2, unless your submodule is a <em>fork</em> you can control, you can't change the FacebookSDK and commit to it, so this leaves you with the problem of the <code>facebook.iml</code> that IntelliJ creates when you add the module to your project, roaming around the submodules directory… which leads me to the question…</li>
</ol>

<p>If you can't commit to a submodule because you have no permission (like the FacebookSDK), where (and how) can you put the module.iml (facebook.iml in this example) that IntelliJ puts inside each new module so your other users can <em>clone</em> your repository, do a <code>git submodule init</code> and <code>git submodule update</code> and not get the typical IntelliJ ""Problem loading module"" error. The solution to the above problem consists in each new user cloning, having to say ""yes"" to the ""remove facebook from project"" and then adding/importing the module again (dependencies, if they respect the name, are correctly saved for the other modules, so that's good).</p>
","0","2684","",""
"18884962","1505745","2013-09-19 01:34:08","2","1942","<git><git-submodules>","git submodule referencing SHA that doesn't exist","<p>I took the following files from rcbops:</p>

<p><a href=""https://github.com/rcbops/chef-cookbooks"" rel=""nofollow"">https://github.com/rcbops/chef-cookbooks</a></p>

<p>I moved them internally, copying all of the cookbooks over. </p>

<p>I then edited the <a href=""https://github.com/rcbops/chef-cookbooks/blob/master/.gitmodules"" rel=""nofollow"">.gitmodules</a> file to point to my local repos. </p>

<p>Between the time that I uploaded the repos internally, and the time I tested my code, the external repos were updated. (Particularly Rabbitmq). </p>

<p>After running my command to download the submodules. I get the following error:</p>

<pre><code>fatal: reference is not a tree: c04c57b549c2b79f2df5922aad3a27769234bf5c
Unable to checkout 'c04c57b549c2b79f2df5922aad3a27769234bf5c' in submodule path 'cookbooks/rabbitmq'
</code></pre>

<p>From what it looks like, it looks like it is referencing an external SHA, but looking on my local repos for that SHA. </p>

<p>How can I fix this?</p>
","0","1505745","0","0"
"18895661","121993","2013-09-19 13:14:06","3","2988","<git><git-submodules>","adding a git submodule that tracks master","<p>I'm using git 1.8.4 and trying to add a submodule that tracks master of another repository. I tried adding it as follows:</p>

<pre><code>git submodule add -b master /path/to/myrepo.git
</code></pre>

<p>And I get the following error when I try to add it</p>

<pre><code>Cloning into 'myrepo.git'...
warning: You appear to have cloned an empty repository.
done.
fatal: Cannot update paths and switch to branch 'master' at the same time.
Did you intend to checkout 'origin/master' which can not be resolved as commit?
Unable to checkout submodule 'myrepo'
</code></pre>

<p>I'm not sure what this means...can someone explain?</p>
","9","121993","0","0"
"35372359","1470475","2016-02-12 21:18:52","1","121","<git><git-submodules>","keep changes to git submodules in parent repository","<p>I have a project repository that has many third-party repositories as submodules. In order for everything to build I have to make minor changes to some of those submodules. I would like to save these changes as part of the main repositories history (i.e., I can't push those changes to the third-party server and I don't want to have to fork the submodules on my server just for these minor changes).  Is this possible?</p>
","0","1470475","",""
"35373527","2448591","2016-02-12 22:48:25","1","253","<git><git-submodules>","How to check git submodule status from the root repo?","<p>I have a repo, let's call it <code>test</code>. Inside that repo, I want to create a submodule that points to another existing repo called <code>tools</code>. I want to be able to modify files in both repos, then open a git bash from <code>test</code>, do a <code>git status</code>, and see that I have modified or untracked files in both repos. I am expecting to modify and push to both repos in the course of this project, and I want to avoid having to do a <code>git status</code> in two different places. How can I do that?</p>

<p>I have tried <code>git status --ignore-submodules=none</code> and that did not show submodule information even when I had modified files in the submodule.</p>

<p>If using submodules for this is not the best way to do this, I'm open to other suggestions.</p>
","0","2448591","0","0"
"69395818","2508277","2021-09-30 16:29:59","6","2161","<c++><git><boost><cmake><git-submodules>","Use Boost as a git submodule with CMake","<p>I want to use the Boost library for my C++ project (more precisely, I'm interested in the Boost Graph Library). I'd like it to be inside my git repository, as a git submodule, as it's done for every other dependency.</p>
<p>For example, if I want to start a project with <code>fmt</code> dependency as a git submodule, I do:</p>
<pre class=""lang-bash prettyprint-override""><code>mkdir my_project
cd my_project
git init .
</code></pre>
<p>Then, I want to add <code>fmt</code> as a submodule, on tag <code>8.0.0</code>:</p>
<pre class=""lang-bash prettyprint-override""><code>mkdir deps
git submodule add https://github.com/fmtlib/fmt.git deps/fmt
cd deps/fmt
git checkout 8.0.0
</code></pre>
<p>Then, I go back to my project's root folder:</p>
<pre class=""lang-bash prettyprint-override""><code>cd ../..
</code></pre>
<p>And I create the following files:</p>
<ul>
<li><code>main.cpp</code></li>
</ul>
<pre class=""lang-cpp prettyprint-override""><code>#include &lt;fmt/format.h&gt;

int main() {
    fmt::print(&quot;Hello, World!\n&quot;);
    return 0;
}
</code></pre>
<ul>
<li><code>CMakeLists.txt</code></li>
</ul>
<pre class=""lang-cmake prettyprint-override""><code>cmake_minimum_required(VERSION 3.17)
project(test_boost)

add_subdirectory(deps/fmt)

add_executable(test_boost main.cpp)
target_link_libraries(test_boost fmt::fmt)
</code></pre>
<p>Then, we're able to build:</p>
<pre class=""lang-build prettyprint-override""><code>mkdir build
cd build
cmake ..
make
</code></pre>
<p>And the binary works fine, expectedly printing <code>Hello, World!</code>, which is great.</p>
<p>Now if I want to add boost, version <code>1.77.0</code>:</p>
<pre class=""lang-bash prettyprint-override""><code>git submodule add https://github.com/boostorg/boost deps/boost
git submodule update --init --recursive  # To get Boost's own submodules.
cd deps/boost
git checkout boost-1.77.0
cd ../..
</code></pre>
<p>Now I want to use this boost folder as dependency of my project, and this is where it gets tricky. I read <a href=""https://stackoverflow.com/a/42124857/2508277"">here</a> that from version <code>1.77</code>, I should be able to use <code>find_package()</code> to do this, as it obseletes the <code>FindBoost</code> thing:</p>
<pre class=""lang-cmake prettyprint-override""><code>find_package(Boost 1.77.0 REQUIRED CONFIG PATHS deps/boost/tools/boost_install)
</code></pre>
<p>But I get the following error:</p>
<pre><code>-- Module support is disabled.
-- Version: 8.0.1
-- Build type: Debug
-- CXX_STANDARD: 11
-- Required features: cxx_variadic_templates
CMake Error at CMakeLists.txt:6 (find_package):
  Could not find a configuration file for package &quot;Boost&quot; that is compatible
  with requested version &quot;1.77.0&quot;.

  The following configuration files were considered but not accepted:

    /home/me/tests/boost_so/my_project/deps/boost/tools/boost_install/BoostConfig.cmake, version: unknown



-- Configuring incomplete, errors occurred!
See also &quot;/home/me/tests/boost_so/my_project/cmake-build-debug/CMakeFiles/CMakeOutput.log&quot;.
See also &quot;/home/me/tests/boost_so/my_project/cmake-build-debug/CMakeFiles/CMakeError.log&quot;.
</code></pre>
<p>I tried other things as well, but I run into one of the following errors:</p>
<ul>
<li>The same one as above.</li>
<li>CMake uses my Boost installation from <code>/usr/local</code>, which is not what I want.</li>
</ul>
<p>I'm using CMake <code>3.17.2</code>. Is it possible to do this or am I missing something ?</p>
","4","2508277","",""
"40695862","3508399","2016-11-19 17:29:21","0","581","<git><twitter-bootstrap><github><twitter-bootstrap-3><git-submodules>","The GitHub submodule was not properly initialized with a .gitmodules","<p>I have an error message on <strong>GitHub</strong> :</p>

<blockquote>
  <p>Your site is having problems building: The submodule <code>bootstrap-touch-carousel</code> was not properly initialized with a <code>.gitmodules</code> file. For more information, see <a href=""https://help.github.com/articles/page-build-failed-missing-submodule"" rel=""nofollow noreferrer"">https://help.github.com/articles/page-build-failed-missing-submodule</a>.</p>
</blockquote>

<p>Bacause of this error I can't see my site's URL.
It happened after I tried to include to my project bootstrap-touch-carousel: Add as Bootstrap git submodule 
<code>git submodule add git://github.com/ixisio/bootstrap-touch-carousel.git /vendor/your-sm</code>
It didn't work, so after that I locally added files.
But I can't fix this problem.
Help, please!
<a href=""https://i.stack.imgur.com/LvE7C.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LvE7C.jpg"" alt=""enter image description here""></a></p>
","8","3508399","",""
"48563706","1510211","2018-02-01 13:16:15","3","67","<git><git-submodules>","How do I make git commit -a not add submodule changes?","<p>Due to many cases lately of people reverting other people's submodule changes, I've narrowed down the problem to this work flow:</p>

<ul>
<li>Programmer A pushes a new submodule revision</li>
<li>Programmer B performs a <code>git rebase</code>, but does not run <code>git submodules update</code>, so she's still on the old submodule revision.</li>
<li>Programmer B finishes making changes, and commits them using <code>git commit -a</code>. This adds a revert of programmer A's submodule update.</li>
<li>Programmer B pushes.</li>
</ul>

<p>I seem to recall that git used to not grab submodules updates when <code>commit -a</code> was used. Regardless of whether I am misremembering or not, as of now (version 2.14.1) it does.</p>

<p>Does anyone know of a way to make git not automatically add submodules to commits?</p>
","3","1510211","",""
"35402999","1532045","2016-02-15 06:42:04","2","999","<git><github><git-submodules><git-clone>","How to setup submodule so that git clone --recursive always takes master of submodule","<p>I've reference this: <a href=""https://stackoverflow.com/questions/2155887/git-submodule-head-reference-is-not-a-tree-error"">Git submodule head &#39;reference is not a tree&#39; error</a></p>

<p>And this: <a href=""https://stackoverflow.com/questions/9189575/git-submodule-tracking-latest/9189815#9189815"">git submodule tracking latest</a></p>

<p>Possibly my problem is slightly different. (I'm assuming its the same but not doing something right...)</p>

<p>I want my git setup such that if I run:</p>

<pre><code>git clone -b master --recursive /path/to/main/repo.git
</code></pre>

<p>the <strong>submodules</strong> <strong>should always</strong> be cloned against ""master""</p>

<p>Otherwise, in many cases the referenced commit doesn't exist (The branch of the submodule) or are ""out of date"" causing the clone to fail with error:</p>

<pre><code>fatal: reference is not a tree
</code></pre>

<p>I've tried to setup the main repository to take the submodule master:</p>

<pre><code>git submodule add -b master /path/to/submodule.git
</code></pre>

<p>But when cloning the main repo:</p>

<pre><code>git clone -b master --recursive /path/to/main/repo.git
</code></pre>

<p>The submodule commit referenced doesn't exist (not taking master as expected)</p>
","0","1532045","0","0"
"59486568","455048","2019-12-26 09:44:46","1","211","<git><git-branch><git-submodules>","How to use `git submodules` to track a superproject by branching","<p>I have a superproject where I have added a number of projects as submodules. These projects are part of a microservices architecture.
The idea of using a superproject with (microservices) projects added as submodules is to be able to get all the projects in a single repository.</p>

<p>Another use case is to track the changes of all the projects.
The idea was to branch the superproject, such that each branch would create a sort of a 'snapshot' of all the projects at a given time.</p>

<p>However, I found that whenever I create a new branch and update the submodules (<code>git submodules update --remote</code>), all the branches of the superproject gets updated. This is expected, as submodules are merely a link to the original project.</p>

<p>Now my question is, is there a strategy for me to take snapshots of a superproject? The way we can branch off a single project, is there such a way to do it for a submodule superproject?</p>

<p>Thank you.</p>
","4","455048","",""
"59567922","4825076","2020-01-02 18:01:17","0","110","<git><docker><github><dockerfile><git-submodules>","Change multiple submodules sheme from git to https when cloning in dockerfile","<p>I have a repo to clone and it has multiple submodules in it. This can be shown by running,
<code>git config --file=.gitmodules -l</code> Which results to </p>

<pre><code>submodule.third-party/lua-resty-lrucache.path=third-party/lua-resty-lrucache
submodule.third-party/lua-resty-lrucache.url=git@github.com:openresty/lua-resty-lrucache.git
submodule.third-party/oxd-web-lua.path=third-party/oxd-web-lua
submodule.third-party/oxd-web-lua.url=git@github.com:GluuFederation/oxd-web-lua.git
submodule.third-party/json-logic-lua.path=third-party/json-logic-lua
submodule.third-party/json-logic-lua.url=https://git.rucciva.one/rucciva/json-logic-lua.git
submodule.third-party/lua-resty-jwt.path=third-party/lua-resty-jwt
submodule.third-party/lua-resty-jwt.url=git@github.com:altexy/lua-resty-jwt.git
submodule.third-party/lua-resty-hmac.path=third-party/lua-resty-hmac
submodule.third-party/lua-resty-hmac.url=git@github.com:jkeys089/lua-resty-hmac.git
submodule.third-party/nginx-lua-prometheus.path=third-party/nginx-lua-prometheus
submodule.third-party/nginx-lua-prometheus.url=git@github.com:knyar/nginx-lua-prometheus.git
submodule.third-party/lua-resty-session.path=third-party/lua-resty-session
submodule.third-party/lua-resty-session.url=git@github.com:bungle/lua-resty-session.git
</code></pre>

<p>I don't want to use ssh when doing a clone since I want to enable dockerhub autobuild. I just want to convert all <code>git@github.com</code> scheme to <code>https://...</code></p>

<p>I have tried using <code>git config --file=.gitmodules submodules.Submod.url https://github.com/jkeys089/lua-resty-hmac.git</code> but I am not sure how to convert all the submodules leave alone one submodule.</p>

<p>How can I convert all the submodules' scheme from <code>git</code>to <code>https</code>. in dockerfile</p>
","4","4825076","",""
"40796289","1423254","2016-11-25 00:54:19","1","95","<git><repository><git-submodules><git-subtree>","How to automatically download the same 8 repos for every from another 4 repos in a git?","<p>We have 4 repos with executables and when I clone any 1 of them, I want to also clone all of the 8 repos with libraries to the folders next to the executable folder. The executables are something like services, all 4 of them will use the latest versions from main repositories of the libraries. I also want to clone all of the 8 library repos when I clone any 1 of them. </p>

<pre>So I can for example 
clone executable1 and have folders: 
executable1-library1-..-library8
or clone library1 and have folders: 
library1-..-library8
or end up cloning all of the executables and have folders: 
executable1-..-executable4-library1-..-library8. </pre>

<p>So I don't want to download all of the executables everytime, but I want to download all of the libraries everytime. </p>

<p>I have been thinking about submodules, but their documentation is terrible, maybe the whole feature is poor, I don't know. Then I have been thinking about subtrees and other structures from git. There is also a possibility that I will always just clone all of the 8 libraries separately manually, that would be sad. </p>

<pre>So what is the best way to 
1) automatically download all of the 8 libraries to their folders (next to the folder of the executable if it was caused by cloning executable)?
2) automatically download all of the 8 libraries to their folders next to the folder of the executable during the cloning of the executable?</pre>

<p>The first option is more basic - to have it done in 2 steps (1.executable+2.libraries), the second is way better for me, to just have it done in 1 step(executable&amp;libraries together). </p>

<p>Part of my question was solved here: <a href=""https://stackoverflow.com/questions/27379818/git-possible-to-use-same-submodule-working-copy-by-multiple-projects"">Git: Possible to use same submodule working copy by multiple projects?</a></p>

<p>I also want to make changes to the libraries even if they were downloaded with the executable and push those changes to their repositories. </p>

<p>EDIT: I added last sentence and added that also 1 library should also download other libraries. </p>
","2","1423254","0","0"
"51051342","7431005","2018-06-26 21:04:36","4","154","<git><git-submodules>","git common submodule of submodule","<p>I have an application <code>main</code> which consists of multiple submodules <code>A</code>, <code>B</code> and <code>utility_functions</code>:
Both of these submodules <code>A</code> and <code>B</code> by itself include the submodule <code>utility_functions</code>. </p>

<pre><code>main
|
|---- A
|     |
|     |---- utility_functions
|
|---- B
|     |
|     |---- utility_functions
|
|---- utility_functions
</code></pre>

<p>Right now I have the <code>utility_functions</code> three times in my project. 
Usually <code>sub_A</code>, <code>sub_B</code> and <code>main</code> should all point to the same commit of <code>utility_functions</code>.</p>

<p>It is necessary that the code from the repository <code>A</code> is run-able by itself.
If I only clone <code>A</code> it should include my <code>utility_functions</code></p>

<pre><code>A
|
|---- utility_functions
</code></pre>

<p>Is there a way to only tell my submodules included in the main repository to rely on the same <code>utility_functions</code>? Or does this break the idea of submodules because they can point to different commits? Or is this simply a bad idea?</p>

<pre><code>main
|
|---- A
|     |
|     |----
|         |
|---- B   |
|     |   |
|     |   |
|     |   |
|---- utility_functions
</code></pre>
","0","7431005","0","0"
"48590809","4743823","2018-02-02 21:01:31","-1","190","<git><makefile><gnu><git-submodules><init>","When I run make with -git submodule init command I get ""Not a git repository ""","<p>When I run make and the makefile attempts to execute a <code>-git</code> submodule <code>init</code> command I receive <code>fatal: Not a git repository (or any of the parent directories): .git</code></p>
","1","4743823","",""
"21806682","3314907","2014-02-16 02:51:27","8","3483","<git><makefile><gnu-make><git-submodules>","Properly build a git submodule with gnu make","<p>I currently try to write a Makefile that build properly a project which contains a git submodule. This submodule have its own set of makefiles and produce several targets at once, including some libraries.</p>

<p>This Makefile should have the following properties.</p>

<ul>
<li>Don't rebuild twice the submodule even with parallel build.</li>
<li>Update the submodule targets when the submodule code has changed (maybe
because I navigated through the revisions of the main repository).</li>
<li>Re-link the main project when the submodule library have changed.</li>
<li>Don't copy-paste the Makefiles of the submodule in the top-level project (i.e. keep the Makefiles recursive).</li>
</ul>

<p>Just to set the ideas, here is something that seems to work.</p>

<pre><code>FOO_SUBDIR := $(CURDIR)/foo
LDFLAGS := -L$(FOO_SUBDIR)

FOO_LIBSFILES := $(FOO_SUBDIR)/libfoo.a $(FOO_SUBDIR)/libgnufoo.a
FOO_LDLIBS := -lfoo -lgnufoo


.PHONY: all
all: main

# There are theoretically 3 main binaries
main: main.c $(FOO_LIBSFILES)
    gcc -o $@ $&lt; $(LDFLAGS) $(FOO_LDLIBS)

$(FOO_LIBSFILES): libfoo
    @# Do nothing

.PHONY: libfoo
libfoo:
    $(MAKE) -C $(FOO_SUBDIR)
</code></pre>

<p>It seems to work sice I added the empty recipe, but I don't understand why.</p>

<p>The idea is to always rely on the submodule's Makefile to rebuild (or not) <code>libfoo.a</code> and <code>libgnufoo.a</code>, and let the main Makefile decide whether <code>main</code> need to be rebuilt. Without the empty recipe it doesn't work. When a <code>foo/foo.c</code> is modified, then <code>libfoo.a</code> is rebuilt, but <code>make</code> doesn't rebuild <code>main</code>.</p>

<p>I have the feeling that the empty recipe force make to check the date of the target files. But I can't find documentation about this behavior.</p>

<p>Is this the right way to go? Any pitfall I should be aware of? Any less obscure way to do this? Or any documentation about this behavior?</p>

<p>Thanks in advance.</p>
","0","3314907","0","0"
"40813376","4216745","2016-11-25 23:25:09","0","78","<git><github><git-submodules>","Git repo not updating github.io content","<p>Git newbie here. Have searched Stackoverflow for this but nothing matches.</p>

<p>I have been committing/pushing my files for the last 8 weeks. However this week it seems to have gone wrong.</p>

<ul>
<li>My git repo (<a href=""https://github.com/alice-tlr/alice-tlr.github.io"" rel=""nofollow noreferrer"">https://github.com/alice-tlr/alice-tlr.github.io</a>) is showing the updated files, that match my local dev files</li>
<li>However they are not reflected in the live <a href=""https://alice-tlr.github.io"" rel=""nofollow noreferrer"">https://alice-tlr.github.io</a> site</li>
<li>Git reports everything is up to date when i try push</li>
</ul>

<p>Have also tried backing up &amp; the deleting various folders and re-cloning. The push is successful but still the github.io site doesn't update.</p>

<p>What am I doing wrong? </p>
","0","4216745","0","0"
"51057529","2298137","2018-06-27 08:00:05","0","119","<git><git-submodules>","git: How to checkout specific (latest) version on a specific submodule (using git submodule ...)","<p>So I have a repo with a bunch of submodules in it. I only want to update one of them, but I want to update to the latest commit which I know is at the tip of branch called origin/mybranch. The submodule I want to update is mysubmodule (for example)</p>

<p>First I tried this:</p>

<pre><code>git submodule update --remote -- mysubmodule 
</code></pre>

<p>This was a bit of a disaster in that it seemed to checkout the latest origin/master branch (which is way old).</p>

<p>So I read some of the git docs, this seems to be the default behaviour - fair enough!</p>

<p>But how do I checkout the remote commit that has the branch origin/mybranch?</p>

<p>I tried things like:</p>

<pre><code>git submodule update --remote --checkout mybranch -- mysubmodule 
git submodule update --remote --checkout origin/mybranch -- mysubmodule 
</code></pre>

<p>But I have not managed to figure this out yet :(</p>
","10","2298137","",""
"18986789","2071284","2013-09-24 16:12:48","0","1219","<git><symfony><git-submodules>","symfony bundle as git submodule","<p>I have two symfony2 projects with some bundles, theses project are under git management.</p>

<p>Those 2 projects have 1 bundle in common, I want to make this bundle a submodule in order to merge the differences between project A and project B.</p>

<p>I'v read this: <a href=""https://stackoverflow.com/questions/11312333/splitting-directory-into-a-submodule"">Splitting directory into a submodule</a> but i don't really understand how it works as the official git page (<a href=""http://git-scm.com/book/en/Git-Tools-Submodules"" rel=""nofollow noreferrer"">http://git-scm.com/book/en/Git-Tools-Submodules</a>) refer the command : <code>git submodule add</code></p>

<p>So, how can I merge the two version of the commomBundle using submodules ?
Will a commit to projectA or projectB allso commit the change for submodules ?</p>
","3","2071284","",""
"48646775","3033594","2018-02-06 15:43:53","0","41","<git><workflow><branch><git-submodules>","git philosophy/strategy for compartmentalized projects","<p>I've got myself and two other people working on a project that's housed in a git-repo.</p>

<p>The layout of the project looks like this:</p>

<pre><code>./
    --DataSheets
    --Electrical
    --FW
    --Mechancial
</code></pre>

<p>One guy works on Mechanical
I work on FW
Me and another guy work on Electrical
Everyone works on Datasheets</p>

<p>I'm sure everyone has seen this at some point:  <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">http://nvie.com/posts/a-successful-git-branching-model/</a>, and so far, that's what I've been trying to use...</p>

<p>I've got one branch for each, and I make sub-branches off of them for each change...
Once the whole project comes to a good stopping point, I try to bring everything up to date and merge it into dev...One day, if anything ever leaves the lab, it'll get merged into master, but that hasn't happened yet.</p>

<p>I thought this would be a good way to go, but after 6 months of trying to maintain this, I've got a few issues that I run into constantly that I'd like to address:</p>

<p>I feel like there's a lot of overhead when it comes to keeping each branch up to date relative to the others...For instance, If I change the Electrical folder, that has PCB/schematic stuff in it, it almost by default will affect FW in some way.  That means that the when working out of the FW directory, I need to make absolutley sure that the FW directory has been rebased with the electrical directory.  This feels kind of foolish, since no changes in the FW branch should affect the Electrical branch and vice-versa, but failure to remember this can lead to working on a new FW with an outdated HW reference document.</p>

<p>I've done some reading about submodules, and those do sound like they could be applicable to this situation.  Is this a path worth considering?  Again, this whole project is in one repo, because everything is in fact related to each other, but all of the 4 elements listed above are independent in the development workflow, which is what I'm really leaning on git for during this time.</p>
","0","3033594","",""
"51814310","796036","2018-08-13 01:58:26","3","445","<windows><git><git-submodules><symlink>","How to properly git clone with Windows symlinks pointing to folder in submodule","<p>After some trial and error I noticed that links created with <code>mklink /D Foo ..\..\Bar\Baz\Foo</code> (pointing to a another file in the same repo) can be commited and cloned without issues even on macOS. Unfortunately when this particular link points to a submodule, then Windows behaves odd when cloning. The reason is most likely, that the links stored in the repo are pulled before cloning the submodules. Since the links point nowhere at this particular time they are broken and will stay broken even after the submodule has been cloned.</p>

<p>One workaround is to <code>del</code> the particular link and <code>git checkout -- *</code> to restore it in a working state. However I'd like to refrain from doing this manually and I'd like to know whether there is any other way. Something like forcing the submodules to be pulled before the repo itself maybe?</p>
","0","796036","0","0"
"31674177","3806595","2015-07-28 10:51:53","5","1070","<git><git-submodules>","Can I use fetch recurseSubmodules on git clone set in .gitconfig","<p>Is there a way to set in .gitconfig to git clone automatically add --recurse-submodules flag ? I trie to add in .gitconfig the following:</p>

<pre><code>[fetch]
    recurseSubmodules = true
</code></pre>

<p>But it doesn't work. </p>

<pre><code>$ git clone upstream nowyprojekt2
Cloning into 'nowyprojekt2'...
done.
</code></pre>

<p>I need to add the --recurse-submodule flag</p>

<pre><code>$ git clone --recurse-submodule upstream nowyprojekt2
Cloning into 'nowyprojekt2'...
done.
Submodule 'euca2ools' (https://github.com/eucalyptus/euca2ools.git) registered for path 'euca2ools'
Cloning into 'euca2ools'...
remote: Counting objects: 19147, done.
remote: Total 19147 (delta 0), reused 0 (delta 0), pack-reused 19147
Receiving objects: 100% (19147/19147), 22.23 MiB | 450.00 KiB/s, done.
Resolving deltas: 100% (15556/15556), done.
Checking connectivity... done.
Submodule path 'euca2ools': checked out '12c358cd27ff652cb144de124bb5472a74145277'
</code></pre>

<p>My GIT version:</p>

<pre><code>$ git --version
git version 2.1.0
</code></pre>
","0","3806595","0","0"
"31677804","5165092","2015-07-28 13:30:21","2","1627","<cmake><git-submodules><organization><project-organization><external-project>","Dependencies as git submodule with no configured cmake project","<p>I have a project with cmake as its build system. I want project's dependencies to be pulled as git submodules and their build process to be integrated into one cmake build process for whole project.</p>

<p>If a dependency is also using cmake as it's build system it's pretty much easy - using <code>ExternalProject_Add</code>. I was able to integrate such a dependency already (SDL).</p>

<p>However what should I do if my dependency don't use cmake? In my case those would be lua and bgfx for example. What are possible ways to organize everything with such case in mind? Should I write and maintain CMakeLists.txt files for such projects myself, with somewhat ugly source references like <code>../../bgfx/src/main.cpp</code> for each such dependency and making a folder for each such CMakeLists.txt file to refer to this folder with <code>ExternalProject_Add</code>? Or there might be some other ways?</p>
","6","5165092","",""
"41038771","3426358","2016-12-08 11:48:04","4","1044","<git><git-submodules>",".git/config and .gitmodules not in sync","<p>I want to pull code from the referenced submodules. I tried <code>git submodule update --init</code> which does not do anything.</p>

<p>Reading up, I realized that this could be perhaps because my .git/config file isnt set. 
My .git/config does not contain anything about the submodule. </p>

<p>.git/config:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote ""origin""]
    url = ssh://ShubhamRathi@gerrit.opnfv.org:29418/opnfvdocs
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[remote ""gerrit""]
    url = ssh://ShubhamRathi@gerrit.opnfv.org:29418/opnfvdocs.git
    fetch = +refs/heads/*:refs/remotes/gerrit/*
[user]
    email = shubhamiiitbackup@gmail.com
[branch ""Testingdoc""]
    remote = origin
    merge = refs/heads/master
</code></pre>

<p>However my .gitmodule contains the references to the submodules</p>

<pre><code>[submodule ""docs/testing/docs/submodules/apex""]
    path = docs/testing/docs/submodules/apex
    url = https://gerrit.opnfv.org/gerrit/apex
[submodule ""docs/testing/docs/submodules/armband""]
    path = docs/testing/docs/submodules/armband
    url = https://gerrit.opnfv.org/gerrit/armband
</code></pre>

<p>My question is, how do I bring these both files in sync that on <code>git submodule update --init</code>, the relevant repositories are pulled up? </p>
","0","3426358","0","0"
"3326892","66226","2010-07-24 20:58:38","14","9029","<git><git-submodules>","Can't get rid of git submodule","<p>I added some Haml templates to my Rails 3 project with</p>

<pre><code>git clone git://github.com/psynix/rails3_haml_scaffold_generator.git lib/generators/haml
</code></pre>

<p>only to find, when I tried to edit some of those files, that this was a submodule, so I couldn't commit changes that I made within the <code>lib/generators/haml</code> directory. Now every time I <code>git status</code>, I get</p>

<pre><code># On branch master
# Changed but not updated:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   lib/generators/haml
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>but <code>git add lib/generators/haml</code> has no effect. I really just want to have the files, not a submodule, but I'm finding the submodule impossible to get rid of:</p>

<pre><code>&gt; git rm --cached lib/generators/haml
rm 'lib/generators/haml'
&gt; git status

# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   deleted:    lib/generators/haml
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   lib/generators/

&gt; git commit -m ""Removed submodule""

[master 02ae4c7] Removed submodule
 1 files changed, 0 insertions(+), 1 deletions(-)
 delete mode 160000 lib/generators/haml

&gt; git status

# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   lib/generators/
nothing added to commit but untracked files present (use ""git add"" to track)

&gt; git add lib/generators/haml
&gt; git status

# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   new file:   lib/generators/haml
#
# Changed but not updated:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   lib/generators/haml

&gt; git commit -m ""Re-added lib/generators/haml""

[master c966912] Re-added lib/generators/haml
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 160000 lib/generators/haml

&gt; git status

# Changed but not updated:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   lib/generators/haml
</code></pre>

<p>Additional <code>git add</code>s are useless. If I try <code>git rm -rf lib/generators/haml</code>, I get</p>

<pre><code>fatal: git rm: 'lib/generators/haml': Operation not permitted
</code></pre>

<p>It just won't die! I've looked up <a href=""https://stackoverflow.com/questions/1759587/un-submodule-a-git-submodule"">how to delete submodules</a>, but in this case, there is no <code>.submodules</code> file, nor is there any mention of the submodule in <code>.git/config</code>. Yet if I run <code>git submodule update</code>, I get</p>

<pre><code>No submodule mapping found in .gitmodules for path 'lib/generators/haml'
</code></pre>

<p>I deleted the directory, but I get the same results! What's going on? Do I need to create a <code>.gitmodules</code> file just to delete the submodule?</p>
","0","66226","0","0"
"22049777","2069620","2014-02-26 18:14:12","4","2693","<php><git><jenkins><git-submodules><jenkins-php>","Private git submodule not found in Jenkins","<p><strong>The problem</strong></p>

<p>I'm trying to build my application in Jenkins, and it is on a private repo on Github, also there's a private submodule.</p>

<p>I can clone the private repository in Jenkins by setting up it's credentials, but Jenkins can't clone the submodule, here's the output of a failed build:</p>

<pre><code>Started by an SCM change
Building in workspace /var/lib/jenkins/jobs/Project/workspace
Fetching changes from the remote Git repository
Fetching upstream changes from git@github.com:user/repogit
using GIT_SSH to set credentials 
Checking out Revision 9cc99b67cc676d0ea8ccd489a8327f5c6dbb8d7f (origin/branch)
[workspace] $ /bin/sh -xe /tmp/hudson2710403018107019432.sh
+ git submodule update --init --recursive
Initialized empty Git repository in /var/lib/jenkins/jobs/repository/submodule/.git/
ERROR: Repository not found.
fatal: The remote end hung up unexpectedly
Clone of 'git@github.com:user/submodule.git' into submodule path 'repository/submodule/' failed
Build step 'Execute shell' marked build as failure
Discard old builds...
#156 is removed because status FAILURE is not to be kept
Publishing Clover coverage report...
No Clover report will be published due to a Build Failure
Sending e-mails to: 
Finished: FAILURE
</code></pre>

<p><strong>Here's what I've tried to do in Jenkins</strong></p>

<ul>
<li>Tried to set the Additional behavior ""Advanced sub-module behavior"", with no success.</li>
<li>Tried to set up a new step before running the tests with phpunit:</li>
</ul>

<p><code>git submodule update --init --recursive</code></p>

<ul>
<li>Tried to set a git repository on the project of my submodule too, not just the main repository that is being tested, no luck too.</li>
</ul>

<p>All of them causes the error that says that Jenkins can't find the repository of the submodule.</p>

<p>Any ideas of how can I solve this?</p>

<p>(The username, paths and repositories are correct, I've just changed them to post here)</p>
","0","2069620","0","0"
"51864564","8334579","2018-08-15 18:39:07","0","809","<typescript><import><node-modules><git-submodules>","imported git submodule causing run-time linking errors in Typescript project","<p>Typescript Project A imports Typescript Project B, however I am actively modifying Project B at the same time as working on Project A.</p>

<p>Project A and B each have their own git repo.
I have added Project B as a git submodule to Project A</p>

<pre><code>/project-a/
    /src/
       /index.ts
    /build/
       /index.js
    /test/
    /node_modules/
    /project-b/  &lt;- git submodule
       /src
       /build/
       /node_modules
</code></pre>

<p>Inside index.ts</p>

<pre><code>import { classB } from '../project-b/src/classB';
</code></pre>

<p>I can build Project B independently and I can build Project A with Project B included in tsconfig.json, however at run time node can't find the modules from Project B which are in Project B's node_modules directory.</p>

<p>I have tried using yarn workspaces where both Project A and Project B are the workspaces, however doing that results in Project A no longer being able to be built due to a bunch of build errors coming from Project B which weren't there before.</p>

<p>What is the correct way to set this up?</p>

<p><strong>Update:</strong>
One example would be that project-b has a dependency on 'winston' logger npm module. <code>yarn install</code> in project-b folder will download winston package to <code>project-b/node_modules</code>. I then <code>yarn run build</code> in <code>project-a</code> folder and the project builds successfully with no errors. If I then run <code>node build/index.js</code> in <code>project-a</code> folder it says that 'winston' module cannot be loaded. As a hacky fix I am adding this dependency to <code>project-a</code> which fixes the runtime error but I would rather not add all dependencies of <code>project-b</code> to <code>project-a</code>. I think the problem is that if this were a javascript project it would find <code>project-b/node_modules</code> directory but because in typescript the javascript lives in <code>build/</code> there is no <code>project-b/node_modules</code> folder in the folder tree.</p>
","5","8334579","0","0"
"3347131","162349","2010-07-27 19:23:16","8","2909","<git><cad><git-submodules>","How to add a git repository as a shared dependency of another git repository?","<p>I need something akin to submodules, but which exist outside the main repository as a dependency.  </p>

<p><strong>Here's the problem:</strong></p>

<p>I'm trying to use Git (in a REALLY awkward way) to manage design files for a CAD tool (Cadsoft Eagle), and I'm having a hard time figuring out if there is a way to use git submodules to manage each project's dependency upon the CAD tool's shared library.</p>

<p>I'm using a folder structure like this:</p>

<pre><code>~/eagle/ &lt;-- Main library used by multiple projects
    .git/     
    &lt;library files&gt;

~/projects/ &lt;-- Projects folder
    Proj0/
        .git/
        &lt;design files&gt;
    Proj1/
        .git/
         &lt;design files&gt;
</code></pre>

<p>In this case, it doesn't make sense to add the eagle.git repository as a git submodule for each project.</p>

<p>However, I still need a way to snapshot the current state of the ""eagle.git"" repository so that if the library is updated in the future, it can be rolled back to access the specific revision of the library files which were being used when the Proj[x] was committed.  </p>

<p>Ideally, I'd like something like the following:</p>

<pre><code>~/eagle/ &lt;-- Main library used by multiple projects
    .git/     
    &lt;library files&gt;

~/projects/ &lt;-- Projects folder
    Proj0/
        .git/
        &lt;design files&gt;
        **eagle** &lt;-- something that acts like a submodule  
                      but which actually points to ~/eagle/
    Proj1/
        .git/
         &lt;design files&gt;
         **eagle** &lt;-- something that acts like a submodule  
                       but which actually points to ~/eagle/
</code></pre>

<p>I'd like to be able to:</p>

<pre><code>cd ~/projects/Proj0
git submodule update
</code></pre>

<p>and have the ~/eagle/ directory automatically roll back to the revision checked into Proj0.</p>

<p>Anybody know of anything in Git that could allow for this kind of behavior?</p>
","6","162349","0","0"
"51884681","874701","2018-08-16 20:12:44","0","31","<git><git-submodules>","update git submodule by n commits","<p>So I know how to update git submodules to the latest master. But as I have not done it in a long time, the latest master is 700+ commits ahead of the version I am using and is by now incompatible with my code. At some point I should update my code, but right now I would like to just update to the newest version that is still compatible with my code. One idea was to update a submodule by e.g. 100 commits and then see if that still works. How would I do that, or is there an even better way (maybe using tags/releases as intermediate steps)?</p>
","1","874701","",""
"48767595","4523359","2018-02-13 13:09:05","8","11668","<git><git-submodules><git-post-receive>","GIT error: fatal: /usr/libexec/git-core/git-submodule cannot be used without a working tree","<p>I have a git repo with a submodule.</p>

<p>I would use in post-receive hook file:</p>

<pre><code>git --git-dir=""$GIT_DIR"" --work-tree=""$GIT_WORKDIR1"" submodule update --init --recursive 
</code></pre>

<p>but I get the following error:</p>

<pre><code>remote: fatal: /usr/libexec/git-core/git-submodule cannot be used without a working tree.  
</code></pre>

<p>I did not get solution for this problem.</p>

<p>What should I do to make it work?</p>
","0","4523359","0","0"
"22167814","802365","2014-03-04 09:29:01","3","820","<git><refactoring><project><git-submodules>","How to make/transform existing directory into git submodule?","<p>So I'm having this project where some parts have been developed in the main repo but can be moved to an independently developed sub-module :</p>

<pre><code>./                       ← repo root
├── client-angular/
│   └── whatever/
├── resources/
│   └── script/          ← wanna be sub-module
└── server-codeigniter/
</code></pre>

<h3>Question</h3>

<p>How can I make the <code>script/</code> directory into a git submodule with minimal effort ?
 It is <strong>currently tracked</strong> by the main repo.</p>
","1","802365","0","0"
"41159852","881272","2016-12-15 08:47:45","0","85","<git><git-submodules><git-subtree>","Segment git project into submodules","<p>I have a git project that is currently growing and several parts are starting to become projects in their own right.</p>

<p>So, I want to create submodules for them, but preserve the history of the files. There were moves between the different folders (eG from <code>partThatIsNotItsOwnProject</code> to <code>partThatIsItsOwnProject</code> and I'd like to have the history for that move too.)</p>

<p>Before:</p>

<pre><code>/.git
/someFiles
/partThatIsItsOwnProject
--/subdirectory
/partThatIsNotItsOwnProject
--/subdirectory
</code></pre>

<p>I'd like to have:</p>

<pre><code>/.git
/someFiles
/partThatIsItsOwnProject
--/.git
--/subdirectory
/partThatIsNotItsOwnProject
--/subdirectory
</code></pre>

<p>So, I guessed <code>git subtree</code> would do that, but it seems to keep the original git repository and only display a part of it. <code>git submodule</code> seems to be the target of this setup, but how do I do the transition?</p>
","0","881272","",""
"35801143","1734303","2016-03-04 16:29:18","1","51","<git><git-submodules>","Keeping git submodule history separate from containing repo history","<p>If I have a git project Consumer with a git submodule repo called Producer, is there any way to keep the commit history from the submodule (Producer) seperate from the containing git repo (Consumer)?</p>
","0","1734303","0","0"
"41170353","1086117","2016-12-15 17:48:46","4","492","<git><git-submodules>","Order of git submodule foreach","<p>Is there anyway to tell <code>git submodule foreach</code> to run in the submodule order specified in the <code>.gitmodules</code>? It seems to run alphabetically.</p>

<p>I want to the foreach command to run in th same order the submodules were added.</p>
","1","1086117","0","0"
"35816626","441652","2016-03-05 16:27:35","1","626","<git><git-submodules>","Command `git status` does not show `(new commits)` for submodules","<p>I have standard top-level Git repository with Git submodules.</p>

<p>It is known that when commit id recorded by top-level repository does not match actual <code>HEAD</code> for specific submodule, <code>git status</code> from top-level repository reports it by <code>(new commits)</code> (for example):</p>

<pre><code>modified:   submodule-a.git (new commits)
modified:   submodule-b.git (new commits)
</code></pre>

<h2>Problem</h2>

<p>Now, in some circumstances, <code>git status</code> stops reporting <code>(new commits)</code> for just some of the submodules even if it is clear that there are new commits - 
it may incorrectly stop reporting <code>(new commits)</code> for <code>submodule-a.git</code> while still showing properly <code>(new commits)</code> for <code>submodule-b.git</code>.</p>

<p>I can verify that commit ids do not match:</p>

<ul>
<li><p>What top-level repository ""thinks"":</p>

<pre><code>&gt; git ls-tree HEAD submodule-a.git
160000 commit edff703c82e270afbabc4ac4b571fdbdaefd88bc  submodule-a.git
</code></pre></li>
<li><p>What submodule repository ""thinks"":</p>

<pre><code>&gt; cd submodule-a.git
&gt; git rev-parse HEAD
1b66fb09ca9506f1b707fe28135cb3c07c2cd717
</code></pre></li>
<li><p>By the way, both top-level and submodule repositories are otherwise have clean status:</p>

<p>Top-level (note missing entry for <code>submodule-a.git</code>):</p>

<pre><code> &gt; git status
 On branch master
 Changes not staged for commit:
   (use ""git add &lt;file&gt;..."" to update what will be committed)
   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

         modified:   submodule-b.git (new commits)

 no changes added to commit (use ""git add"" and/or ""git commit -a"")
 &gt; git diff --submodule
 # [NO OUTPUT]
</code></pre>

<p>Submodule:</p>

<pre><code> &gt; cd submodule-a.git
 &gt; git status
 On branch master
 nothing to commit, working directory clean
</code></pre></li>
</ul>

<p>This is a problem because I'm also unable to update (as in <code>git add --all &amp;&amp; git commit</code>) commit ids for such submodules recorded by top-level repository because it simply ""thinks"" there is nothing to update.</p>

<p><strong>Platform/Version:</strong> GNU/Linux 4.2.6-200.fc22.x86_64, git version 2.4.3 (also confirmed on 2.5.0).</p>

<h2>Question</h2>

<p><strong>Is it a bug or there is an option somewhere which may disable such <code>(new commits)</code> report?</strong></p>
","5","441652","0","0"
"60005603","4684797","2020-01-31 14:14:39","-1","41","<git><git-submodules>","Git - how to delete submodul and create it again under same name and path, if git history at the new URL is entirely different?","<p>This is my <code>.gitmodules</code>:</p>

<pre><code>[submodule ""app/code/EthanYehuda/CronjobManager""]
        path = app/code/EthanYehuda/CronjobManager
        url = https://company@bitbucket.org/some_user/ethanyehuda_cronjobmanager.git
</code></pre>

<p>I have do delete and recreate the submodul <strong>app/code/EthanYehuda/CronjobManager</strong>, because I have to change the URL. The git history of my repository is completly different from the history of the new repository. More infos why they are different are found at the bottom of this question.</p>

<p>So I deleted the submodule and created it again.</p>

<p><strong>Delete:</strong></p>

<pre><code>git submodule deinit app/code/EthanYehuda/CronjobManager
git rm app/code/EthanYehuda/CronjobManager
rm -rf .git/modules/app/code/EthanYehuda/CronjobManager
git commit -m ""Deleted submodule app/code/EthanYehuda/CronjobManager""
</code></pre>

<p><strong>Re-Add:</strong></p>

<pre><code>git submodule add --force https://github.com/Ethan3600/magento2-CronjobManager.git app/code/EthanYehuda/CronjobManager
git commit -m ""Add submodul app/code/EthanYehuda/CronjobManager""
</code></pre>

<p>Now if I go to <em>app/code/EthanYehuda/CronjobManager</em> and execute <code>git remote -v</code> I get:</p>

<pre><code>origin  https://github.com/Ethan3600/magento2-CronjobManager.git (fetch)
origin  https://github.com/Ethan3600/magento2-CronjobManager.git (push)
</code></pre>

<p>Looks good so far... But if I switch to a clone (staging) and pull the changes, then I get:</p>

<pre><code>Fetching submodule app/code/EthanYehuda/CronjobManager
error: The server refused requests to not specified object 9b677ef0e750acb9292030306bd97a3ee2734c61
</code></pre>

<p><strong>Why the git histories are different:</strong></p>

<p>I received a project as a Zip file. So I created a fresh repo and commited the files and pushed it to my bitbucket.</p>

<p>Then I found out, that it is a public github project. So I wanted to change the URL to the github repository. But since they have completly different git histories (My repo just has an initial commit, while the github repo contains all commits.)</p>

<p>So it won't work by just changing the URL's.</p>
","0","4684797","",""
"51949355","1540547","2018-08-21 13:04:21","0","757","<visual-studio-code><git-submodules>","VSCode with git submodules gives errors","<p>I'm getting some errors in a project using submodules:
<a href=""https://i.stack.imgur.com/IVdUu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IVdUu.png"" alt=""enter image description here""></a></p>

<p>I think this is blocking extensions from working. I have the following extensions installed:
- haskelly
- gitlens</p>

<p>(the error was happening before I had gitlens installed)</p>

<p>I'm using a mac.</p>
","0","1540547","",""
"66733612","13180143","2021-03-21 14:36:13","0","470","<git><git-submodules>","git submodule update --init --recursive is not cloning submodules","<p>I am trying to clone the <a href=""https://github.com/firesim/firechip"" rel=""nofollow noreferrer"">FireChip</a> repository.
The get started say to run the following commands to start off with</p>
<pre><code>git clone https://github.com/ucb-bar/project-template.git
cd project-template
git submodule update --init --recursive
</code></pre>
<p>so when i  run <code>git clone https://github.com/ucb-bar/project-template.git </code> i get</p>
<pre><code>talmadage@talmadage-Inspiron-5567:~/test$ git clone https://github.com/ucb-bar/project-template.git
Cloning into 'project-template'...
remote: Enumerating objects: 81, done.
remote: Counting objects: 100% (81/81), done.
remote: Compressing objects: 100% (59/59), done.
remote: Total 17234 (delta 22), reused 50 (delta 11), pack-reused 17153
Receiving objects: 100% (17234/17234), 6.54 MiB | 5.59 MiB/s, done.
Resolving deltas: 100% (9476/9476), done.
</code></pre>
<p>When i run  <code>git submodule update --init --recursive</code>in it. It ends up showing</p>
<pre><code>talmadage@talmadage-Inspiron-5567:~/test/project-template$ git submodule update --init --recursive
Submodule 'fpga/fpga-shells' (https://github.com/sifive/fpga-shells.git) registered for path 'fpga/fpga-shells'
Submodule 'generators/boom' (https://github.com/riscv-boom/riscv-boom.git) registered for path 'generators/boom'
Submodule 'generators/cva6' (https://github.com/ucb-bar/cva6-wrapper.git) registered for path 'generators/cva6'
Submodule 'generators/gemmini' (https://github.com/ucb-bar/gemmini) registered for path 'generators/gemmini'
Submodule 'generators/hwacha' (https://github.com/ucb-bar/hwacha.git) registered for path 'generators/hwacha'
Submodule 'generators/icenet' (https://github.com/firesim/icenet.git) registered for path 'generators/icenet'
Submodule 'generators/nvdla' (https://github.com/ucb-bar/nvdla-wrapper.git) registered for path 'generators/nvdla'
Submodule 'generators/riscv-sodor' (https://github.com/ucb-bar/riscv-sodor.git) registered for path 'generators/riscv-sodor'
Submodule 'rocket-chip' (https://github.com/ucb-bar/rocket-chip.git) registered for path 'generators/rocket-chip'
Submodule 'generators/sha3' (https://github.com/ucb-bar/sha3.git) registered for path 'generators/sha3'
Submodule 'generators/sifive-blocks' (https://github.com/sifive/sifive-blocks.git) registered for path 'generators/sifive-blocks'
Submodule 'generators/block-inclusivecache-sifive' (https://github.com/sifive/block-inclusivecache-sifive.git) registered for path 'generators/sifive-cache'
Submodule 'testchipip' (https://github.com/ucb-bar/testchipip.git) registered for path 'generators/testchipip'
Submodule 'sims/firesim' (https://github.com/firesim/firesim.git) registered for path 'sims/firesim'
Submodule 'software/coremark' (https://github.com/ucb-bar/coremark-workload.git) registered for path 'software/coremark'
Submodule 'software/firemarshal' (https://github.com/firesim/FireMarshal.git) registered for path 'software/firemarshal'
Submodule 'software/nvdla-workload' (https://github.com/ucb-bar/nvdla-workload.git) registered for path 'software/nvdla-workload'
Submodule 'software/spec2017' (https://github.com/ucb-bar/spec2017-workload.git) registered for path 'software/spec2017'
Submodule 'toolchains/esp-tools/riscv-gnu-toolchain' (https://github.com/ucb-bar/esp-gnu-toolchain.git) registered for path 'toolchains/esp-tools/riscv-gnu-toolchain'
Submodule 'toolchains/esp-tools/riscv-isa-sim' (https://github.com/ucb-bar/esp-isa-sim.git) registered for path 'toolchains/esp-tools/riscv-isa-sim'
Submodule 'toolchains/esp-tools/riscv-pk' (https://github.com/riscv/riscv-pk.git) registered for path 'toolchains/esp-tools/riscv-pk'
Submodule 'toolchains/esp-tools/riscv-tests' (https://github.com/ucb-bar/esp-tests.git) registered for path 'toolchains/esp-tools/riscv-tests'
Submodule 'toolchains/libgloss' (https://github.com/ucb-bar/libgloss-htif.git) registered for path 'toolchains/libgloss'
Submodule 'toolchains/qemu' (https://github.com/qemu/qemu.git) registered for path 'toolchains/qemu'
Submodule 'toolchains/riscv-tools/riscv-gnu-toolchain' (https://github.com/riscv/riscv-gnu-toolchain.git) registered for path 'toolchains/riscv-tools/riscv-gnu-toolchain'
Submodule 'toolchains/riscv-tools/riscv-gnu-toolchain-prebuilt' (https://github.com/ucb-bar/chipyard-toolchain-prebuilt.git) registered for path 'toolchains/riscv-tools/riscv-gnu-toolchain-prebuilt'
Submodule 'toolchains/riscv-tools/riscv-isa-sim' (https://github.com/riscv/riscv-isa-sim.git) registered for path 'toolchains/riscv-tools/riscv-isa-sim'
Submodule 'toolchains/riscv-tools/riscv-openocd' (https://github.com/riscv/riscv-openocd.git) registered for path 'toolchains/riscv-tools/riscv-openocd'
Submodule 'toolchains/riscv-tools/riscv-pk' (https://github.com/riscv/riscv-pk.git) registered for path 'toolchains/riscv-tools/riscv-pk'
Submodule 'toolchains/riscv-tools/riscv-tests' (https://github.com/riscv/riscv-tests.git) registered for path 'toolchains/riscv-tools/riscv-tests'
Submodule 'tools/DRAMSim2' (https://github.com/firesim/DRAMSim2.git) registered for path 'tools/DRAMSim2'
Submodule 'tools/axe' (https://github.com/CTSRD-CHERI/axe.git) registered for path 'tools/axe'
Submodule 'barstools' (https://github.com/ucb-bar/barstools.git) registered for path 'tools/barstools'
Submodule 'tools/chisel-testers' (https://github.com/freechipsproject/chisel-testers.git) registered for path 'tools/chisel-testers'
Submodule 'tools/chisel3' (https://github.com/freechipsproject/chisel3.git) registered for path 'tools/chisel3'
Submodule 'tools/dromajo/dromajo-src' (https://github.com/riscv-boom/dromajo.git) registered for path 'tools/dromajo/dromajo-src'
Submodule 'tools/dsptools' (https://github.com/ucb-bar/dsptools.git) registered for path 'tools/dsptools'
Submodule 'tools/firrtl' (https://github.com/freechipsproject/firrtl) registered for path 'tools/firrtl'
Submodule 'tools/firrtl-interpreter' (https://github.com/freechipsproject/firrtl-interpreter.git) registered for path 'tools/firrtl-interpreter'
Submodule 'tools/torture' (https://github.com/ucb-bar/riscv-torture.git) registered for path 'tools/torture'
Submodule 'tools/treadle' (https://github.com/freechipsproject/treadle.git) registered for path 'tools/treadle'
Submodule 'vlsi/hammer' (https://github.com/ucb-bar/hammer.git) registered for path 'vlsi/hammer'
Submodule 'vlsi/hammer-cadence-plugins' (https://github.com/ucb-bar/hammer-cadence-plugins.git) registered for path 'vlsi/hammer-cadence-plugins'
Submodule 'vlsi/hammer-mentor-plugins' (https://github.com/ucb-bar/hammer-mentor-plugins.git) registered for path 'vlsi/hammer-mentor-plugins'
Submodule 'vlsi/hammer-synopsys-plugins' (https://github.com/ucb-bar/hammer-synopsys-plugins.git) registered for path 'vlsi/hammer-synopsys-plugins'
Cloning into '/home/talmadage/test/project-template/fpga/fpga-shells'...
Cloning into '/home/talmadage/test/project-template/generators/boom'...
Cloning into '/home/talmadage/test/project-template/generators/cva6'...
Cloning into '/home/talmadage/test/project-template/generators/gemmini'...
Cloning into '/home/talmadage/test/project-template/generators/hwacha'...
Cloning into '/home/talmadage/test/project-template/generators/icenet'...
Cloning into '/home/talmadage/test/project-template/generators/nvdla'...
Cloning into '/home/talmadage/test/project-template/generators/riscv-sodor'...
Cloning into '/home/talmadage/test/project-template/generators/rocket-chip'...
Cloning into '/home/talmadage/test/project-template/generators/sha3'...
Cloning into '/home/talmadage/test/project-template/generators/sifive-blocks'...
Cloning into '/home/talmadage/test/project-template/generators/sifive-cache'...
Cloning into '/home/talmadage/test/project-template/generators/testchipip'...
Cloning into '/home/talmadage/test/project-template/sims/firesim'...
Cloning into '/home/talmadage/test/project-template/software/coremark'...
Cloning into '/home/talmadage/test/project-template/software/firemarshal'...
Cloning into '/home/talmadage/test/project-template/software/nvdla-workload'...
Cloning into '/home/talmadage/test/project-template/software/spec2017'...
Cloning into '/home/talmadage/test/project-template/toolchains/esp-tools/riscv-gnu-toolchain'...
Cloning into '/home/talmadage/test/project-template/toolchains/esp-tools/riscv-isa-sim'...
Cloning into '/home/talmadage/test/project-template/toolchains/esp-tools/riscv-pk'...
Cloning into '/home/talmadage/test/project-template/toolchains/esp-tools/riscv-tests'...
Cloning into '/home/talmadage/test/project-template/toolchains/libgloss'...
Cloning into '/home/talmadage/test/project-template/toolchains/qemu'...
Cloning into '/home/talmadage/test/project-template/toolchains/riscv-tools/riscv-gnu-toolchain'...
Cloning into '/home/talmadage/test/project-template/toolchains/riscv-tools/riscv-gnu-toolchain-prebuilt'...
Cloning into '/home/talmadage/test/project-template/toolchains/riscv-tools/riscv-isa-sim'...
Cloning into '/home/talmadage/test/project-template/toolchains/riscv-tools/riscv-openocd'...
Cloning into '/home/talmadage/test/project-template/toolchains/riscv-tools/riscv-pk'...
Cloning into '/home/talmadage/test/project-template/toolchains/riscv-tools/riscv-tests'...
Cloning into '/home/talmadage/test/project-template/tools/DRAMSim2'...
Cloning into '/home/talmadage/test/project-template/tools/axe'...
Cloning into '/home/talmadage/test/project-template/tools/barstools'...
Cloning into '/home/talmadage/test/project-template/tools/chisel-testers'...
Cloning into '/home/talmadage/test/project-template/tools/chisel3'...
Cloning into '/home/talmadage/test/project-template/tools/dromajo/dromajo-src'...
Cloning into '/home/talmadage/test/project-template/tools/dsptools'...
Cloning into '/home/talmadage/test/project-template/tools/firrtl'...
Cloning into '/home/talmadage/test/project-template/tools/firrtl-interpreter'...
Cloning into '/home/talmadage/test/project-template/tools/torture'...
Cloning into '/home/talmadage/test/project-template/tools/treadle'...
Cloning into '/home/talmadage/test/project-template/vlsi/hammer'...
</code></pre>
<p>But it all the submodule folders after the operation is done are empty</p>
<pre><code>talmadage@talmadage-Inspiron-5567:~/test/project-template$ ls
build.sbt  CHANGELOG.md  common.mk  CONTRIBUTING.md  docs  fpga  generators  LICENSE  LICENSE.SiFive  project  README.md  scripts  sims  software  tests  toolchains  tools  variables.mk  vcs.mk  vlsi
talmadage@talmadage-Inspiron-5567:~/test/project-template$ cd generators
talmadage@talmadage-Inspiron-5567:~/test/project-template/generators$ ls
boom  chipyard  cva6  firechip  gemmini  hwacha  icenet  nvdla  riscv-sodor  rocket-chip  sha3  sifive-blocks  sifive-cache  testchipip  tracegen  utilities
talmadage@talmadage-Inspiron-5567:~/test/project-template/generators$ cd boom
talmadage@talmadage-Inspiron-5567:~/test/project-template/generators/boom$ ls
talmadage@talmadage-Inspiron-5567:~/test/project-template/generators/boom$ 
</code></pre>
<p>This issue happens on windows 10 as well as ubuntu 20.04 and deepin 15.11</p>
","6","13180143","",""
"60009274","4684797","2020-01-31 18:18:07","-1","4378","<git><git-submodules>","git - error after changing submodules URL - fatal: Needed a single revision","<p>I downloaded a module from github. But instead of using the github repository, I initialized my own and pushed all the code to my own bitbucket remote repository with one ""initial commit"".</p>

<p>But I would like to use the github repo, so that it is easier to keep it up to date. So I opened <code>.gitmodules</code> and changed the URL of the repo, made a commit and pushed.</p>

<p>But if I execute <code>git clone myrepo_url.git</code> and then execute <code>git submodule --init --update --remote</code> then everything is fine, but the module where I changed the URL.</p>

<pre><code>&gt; fatal: Needed a single revision, unable to find commit of
&gt; origin/master in Submodul-path 'app/code/EthanYehuda/CronjobManager'
</code></pre>

<p>Thats maybe because my old repository used <code>master</code> as the main branch and the github repository uses <code>1.x</code>.</p>

<p><strong>.git/modules/app/code/EthanYehuda/CronjobManager/config</strong>:</p>

<pre><code>[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
        worktree = ../../../../../../app/code/EthanYehuda/CronjobManager
[remote ""origin""]
        url = https://github.com/Ethan3600/magento2-CronjobManager.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""1.x""]
        remote = origin
        merge = refs/heads/1.x
</code></pre>

<p><strong>.gitmodules</strong></p>

<pre><code>[submodule ""app/code/EthanYehuda/CronjobManager""]
        path = app/code/EthanYehuda/CronjobManager
        url = https://github.com/Ethan3600/magento2-CronjobManager.git
</code></pre>

<p>How can I fix this so that the error does not show if I clone the project?</p>
","0","4684797","",""
"35858955","3688648","2016-03-08 04:27:24","2","891","<python><git><python-3.x><module><git-submodules>","add python modules that depend on each other as git submodules","<p>I have these 2 little modules in 2 separate git repositories:</p>

<p><code>RepoA/A.py</code></p>

<pre><code>def foo():
    return ""Hello World""
</code></pre>

<p><code>RepoB/B.py</code></p>

<pre><code>import sys
try:
    import A
except ImportError:
    print(""Dependency not available!"")
    sys.exit(1)

def bar():
    return A.foo() + "" EXTENDED!""
</code></pre>

<p>You see that <code>B</code> currently assumes <code>A</code> is importable globally (either installed or in the script-execution directory).</p>

<p>Both have an empty <code>__init__py</code> at their root directory to make them importable as submodules.</p>

<p>Now I have another, bigger repository C that needs B. It has both A and B available as git submodules, so the structure virtually looks like this:</p>

<pre><code>RepoC
|---utils/
|   |---__init__.py
|   |---RepoA/
|   |   |---__init__.py
|   |   |---A.py
|   |---RepoB/
|       |---__init__.py
|       |---B.py
|---C.py
</code></pre>

<p><code>RepoC/C.py</code></p>

<pre><code>import utils.B

print(B.bar())
</code></pre>

<p><code>RepoC/utils/__init__.py</code></p>

<pre><code># remove the 1-layer indirection through the submodule
from .RepoB import B
</code></pre>

<p>Now this prints <code>Dependency not available!</code>, as expected because <code>A</code> isn't globally available, but rather at a location <code>B</code> could never guess (in this case it would need to do <code>from ..RepoA import A</code>). If I make <code>A</code> globally available again by adding it to <code>sys.path</code> it will work:</p>

<p><code>RepoC/utils/__init__.py</code></p>

<pre><code>import os, sys
import inspect

def fake_install(module_path):
    # the submitted module path is relative to the caller's location
    # therefore get that script's file location first
    caller_module = inspect.getmodule(inspect.stack()[1][0])
    caller_dir = caller_module.__file__.rsplit(os.path.sep, 1)[0]
    # build an absolute file path and append it to the system paths
    path = os.path.join(os.path.abspath(caller_dir), *module_path.split("".""))
    sys.path.append(path)

fake_install(""RepoA"")

# remove the 1-layer indirection through the submodule
from .RepoB import B
</code></pre>

<p>This feels like a horrendous solution though.</p>

<p>Another idea was to not use git submodules at all, but rather just collect the dependencies as git-links in a requirements.txt, write some setup.exe scripts and let pip <em>actually</em> install them.</p>

<p>How can I elegantly overcome this problem? Is there any import trickery that lets me do exactly this?</p>
","0","3688648","",""
"48848751","8361292","2018-02-18 05:25:42","3","794","<git><github><bitbucket><git-submodules><gitblit>","git submodule add taking longer time","<p>My submodule repository is morethan 2 gb. whenever i do adding the submodule to my localrepo its cloning the entire submoudle remote repository.</p>

<pre><code>git submodule add -f -b localbranch https://mygitserversuperprojecturl/server.git .submodule/server_git
</code></pre>

<p>result:- 
   Cloning into 'submodule/server_git'...</p>

<p>so usually it takes morethan 1 hour to get complete could anybody help me to add particular branch without adding the entire submodule remote repo.</p>

<pre><code>  git verison 1.8.3.1
</code></pre>

<p>Thanks.</p>
","1","8361292","0","0"
"48857555","5790859","2018-02-18 23:03:38","3","6318","<git><branch><git-submodules>","git add submodule of only a certain branch","<p>Is it possible to only checkout a single branch as a submodule WITHOUT the overhead of the whole repository in my main repositories working directory? (And really only download the files of that branch)</p>

<p>I think of having a submodule for a javascript library with a branch called ""dist"" containing only the minified compiled ready-to-use js file. The ""master"" would instead contain the source files and a bunch of other stuff only needed for development of the lib.</p>
","3","5790859","0","0"
"51963783","471614","2018-08-22 09:30:52","21","6345","<git><git-submodules>","What is the workflow to clean git submodules on clones?","<p>There are useful answers how to remove submodules ""locally"" - <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule"">How do I remove a submodule?</a></p>

<p>However I have the issue I have clones of my repo on several machines. Two I only work once or twice a month.   So when I update the branches on those although the submodules are no longer tracked the files are still on the working branch as well in <code>.git/modules</code>.  On more than one occasion I accidentally checked some in.  In  other cases I have builds failing due to the presence of these unwanted files/directories.</p>

<p>I suppose I could keep a list of stuff to delete - but that doesn't seem right - how about another person would do the removal and I don't have info outside git what to remove?</p>

<p>So what is the suggested way to clean up clones?</p>

<p><strong>update</strong></p>

<p>For me <code>git --version</code> returns <code>git version 2.18.0</code> which seems to be current (it is 2018-09-01).</p>

<p>I add a reproducible example.</p>

<p><em>Setup</em></p>

<pre><code>mkdir parent
cd parent 
git init
git submodule add https://github.com/jakesgordon/javascript-tetris.git
git commit -am add

cd ..
git clone parent clone
cd clone
git submodule update --init
</code></pre>

<p>Now both directories contain the submodule with checked out files in <code>javascript-tetris/</code>.  <code>.gitmodules</code> contains the submodule.</p>

<p>When I do </p>

<pre><code>cd parent
git rm javascript-tetris
git commit -am delete
</code></pre>

<p>In parent the directory is <code>javascript-tetris</code> gone and the entry in <code>.gitmodules</code> removed.  But there remains a populated <code>.git/modules/javascript-tetris</code> directory.</p>

<p>on the clone side:</p>

<pre><code>git pull
</code></pre>

<p>gives the warning: <code>warning: unable to rmdir 'javascript-tetris': Directory not empty</code>.  And the directory remains, also <code>.git/modules/javascript-tetris</code> is still there.</p>
","7","471614","0","0"
"69725920","14599025","2021-10-26 15:28:32","1","714","<node.js><git><build><git-submodules>","Why does git submodule build depend on node modules of parent project?","<p><a href=""https://github.com/hyperbotauthor/chessopsnpmts"" rel=""nofollow noreferrer"">https://github.com/hyperbotauthor/chessopsnpmts</a></p>
<p>This project has a git submodule, which in separation builds according to its own <code>package.json</code>'s build script.</p>
<pre><code>[submodule &quot;chessground&quot;]
    path = chessground
    url = https://github.com/ornicar/chessground
</code></pre>
<p>However if I run the same build script when I import it in my project as a git submodule, then the build fails with cryptic error messages about missing modules which are actually not missing.</p>
<p>I suspected that this has to do something with the parent project's node modules, so I renamed the node modules folder of the parent project for the time of the build, and it succeeded. So now I have a build script that renames, builds, then restores original name of the folder of parent node modules.</p>
<pre class=""lang-json prettyprint-override""><code>&quot;buildcg&quot;: &quot;mv node_modules node_modules_ignore ; cd chessground &amp;&amp; yarn &amp;&amp; yarn dist &amp;&amp; cd .. ; mkdir vendor ; cp chessground/dist/chessground.js vendor ; printf '\n\n// es export\n\nexport { Chessground }\n' &gt;&gt; vendor/chessground.js ; mv node_modules_ignore node_modules&quot;
</code></pre>
<p>Is the build standing in a git module's folder dependent of parent project's installed node modules ( every module is installed locally to the parent project )?</p>
","2","14599025","",""
"22328053","911646","2014-03-11 14:03:38","57","26281","<git><git-submodules>","Why doesn't `git checkout` automatically do `git submodule update --recursive`?","<p>Someone please help me understand submodules in git. I know they are getting a lot of bashing around the internet but since I assume the git developers are smart people there must a reason for the current behavior - and maybe a way to work around my problem.</p>

<p>So, I have a project and some submodules. The project have different branches, like:</p>

<ul>
<li>MyApp_version2</li>
<li>MyApp_version3</li>
<li>MyApp_version4</li>
<li>MyApp_liteversion</li>
<li>MyApp_development</li>
</ul>

<p>My submodules doesn't update that often (maybe once a week) so I'm fine with them <a href=""https://stackoverflow.com/questions/1979167/git-submodule-update"">not being attached to the head of the submodule repository automatically</a>.</p>

<p>However, when I check out an old branch - because I need to fix a bug in an old version of the software - I also need to update the submodules.</p>

<p>Why do I need to do this?</p>

<p>I would expect git to work like svn. When I commit my work in my main repo I would expect git to think something along these lines: ""OK, he wants to commit his work now. I can see the submodules are currently at revision abc so when he at some point in the future get's back to this commit he probably wants the submodules at the same revision again.""</p>

<p>I can not see a single case where you would want the submodules to stay at the current revision while you go back 3 years in your main repository. However, there must be a reason for this implementation, right?</p>

<p>I would really like to hear if any of you know the thoughts behind this, but in any case I would really like a solution. Is there a way to tell git: ""I want to commit this work with these submodules. If I at some point go back to this state I want the submodules to be checked out at the correct version as well.""</p>

<p><strong>Example for clarification</strong></p>

<p>My main repository is an application which needs to use SSL, and I find a SSL library (libSSL) I add as a submodule.</p>

<p>On Oct. 31 2010 I create a commit in my main repository (2fd4e1) while the submodule points to libSSL version 3 (c67a2d).</p>

<p>Time passes, libSSl gets updated to version 34, I adapt my code, life it good.</p>

<p>On May 14 2013 I create a new commit (28fced) and submodule points to the most recent version of libSSL (849ee1).</p>

<p>However, if I check out 2fd4e1 my submodule will stay at 849ee1 even though the original commit was created with c67a2d. Git knows I made the original commit with c67a2d and I don't see how you could possibly want a another submodule than the one the original commit was created with.</p>
","5","911646","0","0"
"21740026","173773","2014-02-12 21:26:58","0","51","<git><git-submodules>","How do I configure git so that some code only is checked out for people with read access?","<p>I have a git repository, which is accessed by two sets of users:</p>

<ul>
<li>build team (read only access)</li>
<li>dev  team (read/write access)</li>
</ul>

<p>The dev team, for their debugging work, would like to use some code that they will share only with each other - and should not ever end up checked out by the build team.</p>

<p>Same is true for the build team.</p>

<p>I've looked at using private submodules - one private submodule storing all the code that's shared between the devs, and another that stores all of the code that's shared by the build team (which they only would see, and have read/write access to). Is there a way to make this configuration work (submodule configuration/dependencies usually get committed into git, i think)?</p>

<p>Is there an alternative solution, which will make the git repo work the way we're looking to make it work?</p>
","3","173773","",""
"59520196","3017219","2019-12-29 14:20:39","1","1808","<git><git-submodules><sparse-checkout>","git sparse-checkout of a submodule from a root repo","<p>I have a <a href=""https://github.com/KVM-VMI/kvm-vmi/"" rel=""nofollow noreferrer"">main repo</a> with 4 submodules:</p>

<ul>
<li>kvm</li>
<li>libvmi</li>
<li>qemu</li>
<li>nitro</li>
</ul>

<p>and I would like to <code>sparse-checkout</code> <code>kvm</code>, to filter out a few annoying files that are not comptabile with filesystem limitations on Windows 
(<code>AUX</code> is a reserved filename, and kvm tree contains <code>aux.{h|c}</code>)</p>

<p>I understand how to do a <code>sparse-checkout</code> on a normal repository, but when I do the same on a submodule, it doesn't work, the <code>.git/modules</code> directory is missing:</p>

<pre><code>git clone https://github.com/KVM-VMI/kvm-vmi/
git -C kvm config core.sparseCheckout true
echo ""!drivers/gpu/drm/nouveau/nvkm/subdev/i2c/aux.*"" &gt;&gt; .git/modules/kvm/info/sparse-checkout # ignore aux.*
echo ""/*"" &gt;&gt; .git/modules/kvm/info/sparse-checkout # checkout everything else
git submodule update --init
</code></pre>

<p>The first <code>echo</code> command will fail because the <code>.git/modules</code> hasn't been created.</p>

<p>I don't know who is responsible for creating this directory.</p>

<p>Am I missing an ""<code>init</code>"" command somewhere ?</p>

<p>Note:</p>

<p>I have been looking for solutions on Stackoverflow, or from blog posts:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/52780680/git-submodule-prepare-for-sparse-checkout"">Git submodule prepare for sparse checkout</a></li>
<li><a href=""https://issue.life/questions/45688121"" rel=""nofollow noreferrer"">How to do submodule sparse-checkout with Git?</a></li>
</ul>

<p>but they don't work for me because I don't want to clone a separate <code>kvm</code> repo and later on add it to my main repo.</p>

<p>Thanks.</p>
","0","3017219","",""
"21745569","1069083","2014-02-13 04:54:39","1","102","<android><git><git-submodules><project-organization><git-subtree>","How to manage several projects with git","<p>I want to organize all my java, C and Android projects with Git.</p>

<p>I have several folders:</p>

<pre><code>something_like_gdlib
example_library1
example_library2
...
example_project1
example_project2
...
</code></pre>

<p>In each of those projects I use some of those libraries. But if I update a library, I want all projects to get the changes for that library.</p>

<p>Usually I work alone on those projects and I just want to have a change history.</p>

<p>Now I want to work together with another programmer, that should get access to only one project and the corresponding libraries.</p>

<p>How should I set up git? I heard of subtrees or submodules? Or is there a better solution?</p>
","0","1069083","",""
"41772036","150447","2017-01-20 20:41:09","1","1521","<gitlab><git-submodules>","how do I force gitlab to update submodule references?","<p>I have a super-project in a gitlab repository.  For testing purposes I originally pointed the submodules at URLs for forks in my personal space using full URLs (this was pre 8.12).</p>

<p>I am now on 8.14* and have changed the submodule URLs to use relative URLs into the authoritative repositories.  <code>git submodule sync</code> has worked its magic in my clone, and I've pushed into gitlab.  I can see that <code>.gitmodules</code> contains the relative URLs I desire.</p>

<p>HOWEVER</p>

<p>When I navigate the repository through the web browser to the directory containing my submodules, the links on the web page still go to projects in my personal space rather than using the canonical, relative URLs.</p>

<p>How do I convince gitlab to update its view?</p>
","0","150447","",""
"41776331","1939576","2017-01-21 06:18:56","2","596","<git><git-submodules>","Is there a way to reconstruct a .git directory for a submodule?","<p>I have a project with a submodule, and I want to be able to reconstruct the <code>.git</code> directory of the submodule, as if the submodule had been cloned.</p>

<p>In more detail, say I have a submodule <code>subproject</code> in a git project <code>superproject</code>, and I have already done:</p>

<pre><code>git clone git://url.of.superproject
cd superproject
git submodule update --init
</code></pre>

<p><code>subproject</code> does not have its own <code>.git</code> directory, but a <code>.git</code> file, pointing to the directory <code>../.git/modules/subproject</code>. I really need the real <code>.git</code> directory for <code>subproject</code>, because the tool I am using (Python's pip) insists on copying the <code>subproject</code> directory to an arbitrary location in order to work on it, and the work it will do includes running git commands.</p>

<p>Is there any way of reconstructing the <code>subproject/.git</code> directory as if it had been cloned?  I can't just copy the <code>.git/modules/subproject</code> directory because it contains relative links to other parts of the <code>superproject/.git</code> directory. </p>
","5","1939576","",""
"41785654","645212","2017-01-21 23:25:07","2","136","<git><git-submodules>","Pull git submodule post receive","<p>I currently update a website by pushing the git repository to a remote. The remote then has a post-receive hook which does</p>

<pre><code>GIT_WORK_TREE=/var/www/html/ git checkout -f
</code></pre>

<p>I recently added a submodule in my repository from a different project. I would like to pull from this submodule post-receive.</p>

<p>.gitmodule</p>

<pre><code> [submodule ""plugins""]
    path = plugins
    url = https://github.com/getpelican/pelican-plugins.git
</code></pre>

<p>(yes it's a pelican website, but that's irrelevant)</p>

<p>I imagine it's a matter of adding a <code>git pull</code> in the right place in the post-receive hook, but I'm not sure exactly where or how.</p>
","0","645212","0","0"
"40753505","4354053","2016-11-22 23:25:09","5","10379","<git><heroku><github><git-submodules>","How to add sub-modules to github repository","<p>Hello i am looking for a way to add my submodules to my github repo for example</p>

<blockquote>
  <p>iris</p>
</blockquote>

<p><a href=""https://github.com/kataras/iris"" rel=""nofollow noreferrer"">https://github.com/kataras/iris</a></p>

<p>I tried </p>

<pre><code>git add *
git add .
</code></pre>

<p>and then committing and pushing but the folder stay empty (greyed out)</p>

<p>The reason I want to add these submodules is because I want to deploy my application on heroku.</p>

<p>But since the submodules do not get uploaded into my github repo I can not deploy my heroku application since it is missing them from my github repository.</p>

<p>Any ideas on how to add these submodules to my repo would be much appreciated.</p>
","1","4354053","0","0"
"40755939","541686","2016-11-23 04:16:03","4","983","<git><diff><git-submodules><git-diff><patch>","What is git solution for submodules that need patching?","<p>I expect this problem is common, but for the life of me I can't seem to find a good solution:</p>
<ol>
<li><p>Project Foo requires <em>third-party</em> project Bar's source (which I have no control over)</p>
</li>
<li><p>Project Foo adds Bar as a submodule, because that's the Git solution to this problem</p>
</li>
<li><p>It turns out Bar requires a handful of tiny patches that <em>will never be merged upstream</em>, as they are quite specific to Foo</p>
</li>
</ol>
<h3>In my ideal world:</h3>
<p>I could <strong>&quot;commit&quot;</strong> patches to Bar <strong>inside Foo</strong>. This would make sense since these patches are specific to Foo and not applicable to other users of Bar.</p>
<h3>In the real world:</h3>
<p>It seems I have to either provide a custom script that the user runs every time in order to patch its copy of Bar (a pain and quite fragile), or I have to host (and consistently keep up to date) a custom copy of every single third-party repository I need (also a pain, seems quite an overkill for tiny patches, and seems weird for changes that are specific to Foo).</p>
<p>What solution am I supposed to use for this problem? I imagine it's quite common, yet I get the feeling Git's &quot;solution&quot; is that patches always be merged upstream, which is quite a non-starter.</p>
","1","541686","0","0"
"4366788","33208","2010-12-06 13:22:21","7","1679","<git><git-submodules>","Share a working tree with git submodules","<p>Suppose I have a library <code>Common</code> that may be used stand-alone, and is used by projects <code>P1</code> and <code>P2</code>, so the tree I want looks like</p>

<pre><code>/Common/.git
        ...
/P1/.git
    .gitmodules  # points to remote server
    Common/
    ...
/P2/.git
    .gitmodules  # points to remote server
    Common/
    ...
</code></pre>

<p>When I make a change in <code>/Common</code>, I would like to be able to test it using <code>P1</code> and <code>P2</code> before committing.  With the usual <code>git submodule</code> command set, I would have to commit from <code>/Common</code>, push to remote, then pull from both <code>/P1/Common</code> and <code>/P2/Common</code>.  If the commit breaks something, it cannot be amended because the bad change has already been published.  Alternatively, I could <code>git remote add quicktest /Common</code> from <code>/P?/Common</code> to be able to pull without touching the remote server.  But this has lots of opportunities for inconsistency and it is dirty to strip broken commits from <code>/P?/Common</code> so that they can be amended in <code>/Common</code>.</p>

<p>I would rather that, during development, the working tree from <code>/Common</code> be used by <code>P1</code> and <code>P2</code>, but I can't make <code>/P1/Common</code> a symlink to <code>/Common</code> because <code>git submodule</code> recognizes the symlink as different from a directory.  Hardlinking directories is not allowed by most file systems.  I can hardlink all the files using</p>

<pre><code>rm -rf /P1/Common
cp -rl /Common /P1/Common
</code></pre>

<p>which works quite well until a new file is added to <code>/Common</code> in which case this process needs to be repeated.  Is there an elegant way to both</p>

<ol>
<li>keep <code>git clone --recursive git://remote/P1.git</code> working for the end user, and</li>
<li>allow me to easily test that changes in <code>/Common</code> work with <code>P1</code> and <code>P2</code>?</li>
</ol>
","1","33208","0","0"
"21856214","1003190","2014-02-18 14:05:43","3","1355","<git><git-submodules>","git submodule update - why from toplevel","<p>I've always been puzzled by this:</p>

<pre><code>$ git submodule
You need to run this command from the toplevel of the working tree.
</code></pre>

<p>Why do I need to run it from the top level directory? Is it a technical reason, or just because of a convention / possible flaw ?</p>
","0","1003190","0","0"
"59633536","1948292","2020-01-07 17:45:12","1","2675","<git><git-submodules>","git submodules without .gitmodules file?","<p>Switching branches (using SourceTree), I get error messages like </p>

<pre><code>fatal: No url found for submodule path '...' in .gitmodules
</code></pre>

<p>There is no <code>.gitmodules</code> file in the whole project.</p>

<p>Where should I look at?</p>

<p>SourceTree hits the following command upon branch switching:</p>

<pre><code>git --no-optional-locks -c core.quotepath=false submodule update --init 
</code></pre>

<p>When I enter <code>git submodules</code>, the output is:</p>

<pre><code># git submodule                        
fatal: no submodule mapping found in .gitmodules for path '...'
</code></pre>

<p>Folder <code>...</code> is empty.</p>
","5","1948292","0","0"
"3115249","2701130","2010-06-25 02:53:12","10","2418","<git><git-submodules>","How to make top-level git to track all the files under another sub-directory git","<h2>command sequence</h2>

<blockquote>
  <p>mkdir topdir<br>
  mkdir another-git-directory<br>
  touch fileC<br>
  touch fileD<br>
  git add .<br>
  git commit -m ""sub-dir init""<br>
  cd ..<br>
  touch fileA<br>
  touch fileB<br>
  git add .<br>
  git commit -m ""top-dir init""<br>
  git ls-files<br>
  // now we can see that fileC and fileD is not tracked by top-level git //<br>
  git ls-files -o<br>
  // this would not show us the fileC and fileD as untracked files//  </p>
</blockquote>

<p>my question is: how can we make ""git ls-files -o"" to show the untracked files inside sub-directory? why git is behaved such, as i expect git ls-files to show all untracked file (even it is inside another sub-dir git)? </p>

<p>I know that I could make the top git to track the sub-dir files using ""git add */.""... but I am interested to know why for the question above. Thanks!</p>

<p>directory structure</p>

<blockquote>
<pre><code> topdir +  
        +-- .git  
        +-- fileA  
        +-- fileB  
        + another-git-directory +-- .git  
                                +-- fileC  
                                +-- fileD  
</code></pre>
</blockquote>

<h2>update (26 Jun)</h2>

<p>I found this thread <a href=""https://stackoverflow.com/questions/1084969/unable-to-track-files-in-deep-directories-by-git"">Unable to track files within Git submodules</a> and this url (cn) <a href=""http://blog.ossxp.com/2010/01/425/"" rel=""nofollow noreferrer"">http://blog.ossxp.com/2010/01/425/</a> which explains how to resolve the problem. </p>

<p>the solution:</p>

<blockquote>
  <p>git rm --cached another-git-directory   #no trailing slash<br>
  git add another-git-directory/.<br>
  git commit </p>
</blockquote>

<p>the 'git rm --cached path/to/sub-dir-or-sub-module' will tell the top-dir not to treat the sub-dir as a submodule... I think....</p>
","0","2701130","0","0"
"42028437","2370920","2017-02-03 16:11:53","18","27637","<git><git-submodules>","How to change git submodules url locally?","<p>The original <code>.gitmodules</code> file uses the hard coded <code>https</code> urls but for some automated tests I clone from <code>ssh</code> and make the submodule urls relative as in <code>../ModuleName</code>. I don't want to push these changes back into the repo either.</p>

<pre><code># change the https://github.com/ with git@github.com:
sed -i 's/https:\/\/github.com\//git@github.com:/g' "".git/config""
# delete the url lines from the submodule blocks of .git/config
sed -i '/submodule/ {$!N;d;}' "".git/config""
# change hardcoded https:// urls of submodules to relative ones
sed -i 's/https:\/\/github.com\/ProjName/../g' "".gitmodules""
# also make the same change in the .git/modules/*/config
sed -i 's/https:\/\/github.com\/ProjName/../g' .git/modules/*/config
# sync and update
git submodule sync
git submodule update --init --recursive --remote
</code></pre>

<p>With the snippet above, it does what I want. However, the annoying thing is, <code>.git/modules/</code> folder doesn't seem to be under version control but if I just delete it, <code>git submodule sync</code> and most other Git operations just stop working.</p>

<p>Is there a way to get the <code>.git/modules</code> regenerated after modifying the <code>.gitmodules</code> and <code>.git/config</code> files?</p>
","0","2370920","0","0"
"40973518","522322","2016-12-05 11:44:07","0","109","<git><build><azure-devops><git-submodules>","How to restore git submodules in VSO build task","<p>I have one submodule(hosted in VSO) and I would like to build project in VSO and produce a nuget package. I dont know how to restore submodule so my project can build.</p>
","0","522322","",""
"40984170","2120790","2016-12-05 22:02:43","3","4691","<git><github><version-control><git-submodules>","Creating multiple remote branches with git submodules","<p>I am working with git submodules for the first time. Struggling with understanding how to create branches across the board and adding them to all the remote repos. </p>

<p>Currently my file structure resembles the following:</p>

<pre><code>-parent_repo
  |
  |_ submodule_1
  |_ submodule_2
  |_ submodule_3
  |_ submodule_4
  |_ submodule_5
  |_ submodule_6
  |_ submodule_7
</code></pre>

<p>If I create a branch on parent repo:</p>

<pre><code>(master) $ git checkout -b feature/my_feature
(feature/my_feature) $ git commit -m ""created my_feature""
(feature/my_feature) $ git push -u origin feature/my_feature
</code></pre>

<p>I would like to create a branch across all submodules including the parent. After which all branches are pushed remote to each submodules and their respected repos.</p>

<p>Tried the following steps:</p>

<pre><code>$ git submodule foreach -b branch_name
$ git push --recurse-submodules=on-demand
$ git submodule foreach ""(git checkout branch_name; git pull)&amp;""
</code></pre>

<p>..just fails. First command not found.</p>

<p>..and if I do:</p>

<pre><code>$ git config -f .gitmodules submodule.submodule_1.branch branch_name
$ git submodule update --remote
</code></pre>

<p>git returns:</p>

<pre><code>fatal: Needed a single revision
Unable to find current origin/branch_name revision in submodule path 'submodule_1'
</code></pre>
","2","2120790","0","0"
"59739400","4316724","2020-01-14 18:04:15","0","146","<git><git-submodules><subtree>","git subtree vs submodule - embedded code - shared drivers and middleware between PCBs","<p>I am wondering if I shall use <strong>git</strong> <em>submodules</em> or <em>subtrees</em> in this specific usecase:</p>

<p>We a have a lot of devices (product families) which contains multiple PCBs with microcontrollers (c code) which controls motors and measures different physical values through sensors and they are connected through network communication (CAN).
In one product we use multiple different PCBs but it is not rare that the same PCB is built into the machine with different application code.</p>

<p>We would not like to use one monorepo because the codebase is big. Basically the idea is to organize the code at PCB level because we usually work on one board at the same time and the application and PCB specific code of other boards are irrelevant when we work on that specific board. Another advantage is that the history of the repository can be more clean this way.</p>

<p>If we have only PCB specific repository then it would be a problem because we would duplicate a lot of code. Example: every board communicates through CAN or uses SPI to read sensor data. Therefore it makes sense to collect these common parts into one or more additional repositories. The question is: how to share the content of these common repositories in git? (e.g. driver or middleware repositories)</p>

<p>Side note: a lot of people recommends the subtree but mostly in those cases when you just need a lib from github and you don't really plan to push content back into the original remote repository.</p>
","3","4316724","",""
"42076004","4031815","2017-02-06 19:44:58","0","297","<git><gitlab><git-submodules><gitlab-ci><gitlab-ci-runner>","Build error in gitlab CI server (maybe related to git submodules)","<p>I have been assigned to a project which uses git submodules. I did a small change in the markdown of the README.md and received the following error:</p>

<pre><code>Running on staging.example.com...
Fetching changes...
HEAD is now at 2414dbe test change
From https://gitlab.example.com/external/project-example
   2432dbe..b64b2d0  develop    -&gt; origin/develop
Checking out b452d91 as develop...
$ docker rm -f $CONTAINER_NAME-db
Error response from daemon: No such container: project-example-db
ERROR: Build failed: exit status 1
</code></pre>

<p>When I check the file named: <code>.gitlab-ci.yml</code> I see this code:</p>

<pre><code># ADD   

install:clean:
    stage: prepare
    script:
        - docker rm -f $CONTAINER_NAME-db
        - docker rm -f $CONTAINER_NAME
        - docker rmi $IMAGE_NAME
    allow_failure: true
    tags:
      - staging

# BUILD

prepare:build:
    stage: prepare
    script:
        - git submodule init
        - git submodule update --recursive
        - docker-compose build --no-cache --pull
    tags:
      - staging
</code></pre>

<p>I'm not sure if my error is due to something missing with the submodules, my .gitmodules file looks like this:</p>

<pre><code>[submodule ""frontend""]
    path = frontend
    url = git@gitlab.example.com:external/project-example-frontend.git
    branch = v3.1
</code></pre>

<p>I have the 2 repos (<strong>project-example</strong> &amp; <strong>project-example-frontend</strong>) inside a directory. What am I missing?</p>
","0","4031815","0","0"
"4707791","350127","2011-01-16 20:18:24","4","220","<git><github><git-submodules>","pulling a github project into another github project","<p>I have a project on github which uses other repos in github. (I used JQuery , backbone.js , underscore.js in my project)
I want to pull those repos from github into my repo (possibly with their history).
And time to time I want to update those codes from their github repos. But I still want to commit them in my repo. Is that possible.</p>
","0","350127","",""
"42096543","7081922","2017-02-07 17:46:52","5","8754","<git><clone><git-submodules><git-clone>","git add submodule into existing directory","<p>I have a git repository in the parent folder. Lets call this folder ""root"".
Then there is a sub directory in the folder, lets call it ""child"". What I want to do is clone a remote repository as a submodule into ""child"":</p>

<pre><code>git submodule add git@github.com:username/repopath child/
git submodule add git@github.com:username/repopath ./child/
</code></pre>

<p>Both the above give me the error:</p>

<blockquote>
  <p>child already exists in the index</p>
</blockquote>

<p>I tried removing the directory from being tracked:</p>

<pre><code>git rm --cached .\child\*
git submodule add git@github.com:username/repopath child/
</code></pre>

<p>Then i get this error:</p>

<blockquote>
  <p>'child' already exists and is not a valid git repo</p>
</blockquote>

<p>Any help would be most appreciated</p>

<p>Thanks</p>
","0","7081922","0","0"
"60494143","3059024","2020-03-02 17:51:09","5","1383","<c++><git><cmake><git-submodules><external-project>","What is the relationship between use of `git submodules` and `ExternalProject_Add` for dependency mangement in CMake?","<p>I've spent a lot of time recently following a long gone developer's vague and incorrect build instructions for a C++ project I'm working on. Therefore, I'm writing a new build system and I'm looking for the best way to do it. I've settled on using the <code>ExternalProject_Add</code> command in CMake for collecting and building dependencies before the project targets but I've also found an excellant <a href=""https://blog.kitware.com/cmake-superbuilds-git-submodules/"" rel=""noreferrer"">article</a> suggesting use of git submodules, which looks like it does a very similar, if not the same thing. So my question: What is the relationship between <a href=""https://www.vogella.com/tutorials/GitSubmodules/article.html"" rel=""noreferrer"">git submodules</a> and <a href=""https://cmake.org/cmake/help/latest/module/ExternalProject.html"" rel=""noreferrer"">ExternalProject_Add</a>? </p>
","2","3059024","",""
"41123735","2632266","2016-12-13 14:38:24","2","712","<git><git-submodules><git-push>","Pushing in submodule in git version 2","<p>I'm using from git version 2.7.4, with submodules. My project structure is like this:</p>

<pre><code>main/
   file1
   file2
   subm1/
       file3
       file4
   subm2/
       file5
</code></pre>

<p>According to <a href=""https://stackoverflow.com/questions/5814319/git-submodule-push"">this question</a> I want to push in submodule. For example, after changing in file3, I'm using this commands to push it:</p>

<pre><code>cd subm1/
git add file3
git commit -m 'Update file3'
git push origin master
</code></pre>

<p>I have recieved this error:</p>

<pre><code>Pushing submodule 'subm1'
To &lt;submodule git repo&gt;
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to &lt;submodule git repo&gt;
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. Check out this branch and integrate the remote changes
hint: (e.g. 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
Unable to push submodule 'subm1'
fatal: Failed to push all needed submodules!
</code></pre>

<p>but when I use pull like this recieved <code>Already up-to-date</code>:</p>

<pre><code>subm1$ git pull origin master 
From https://gitlab.com/systemnegar-ai/compare
 * branch            master     -&gt; FETCH_HEAD
Already up-to-date.
</code></pre>

<p>How can I push it into submodule origin repository?</p>
","0","2632266","0","0"
"42113485","2298137","2017-02-08 12:43:46","1","21","<windows><git><git-submodules>","git CLI how do I perform a checkout that also updates all of the submodules?","<p>So I can clone a branch and get all the submodules with:</p>

<pre><code>git clone &lt;url&gt; -b myBranch --recursive
</code></pre>

<p>This is great :) But then I want to switch to a different branch, so I do:</p>

<pre><code>git checkout myBranch2
</code></pre>

<p>This updated the top-level of my project, but not the submodules (I did not see a recursive option here). Infact I got an output that suggests it knows that the submodules need updating, but I just don't know how to do that part:</p>

<pre><code>c:\dev&gt; git checkout myBranch2
M        SubModule1
M        SubModule2
Branch myBranch2 set up to track remote branch myBranch2 from origin.
Switched to a new branch 'myBranch2'
</code></pre>

<p>So then I checked the version of the SubModule1 and it is still pointing to the version that was originaly checked out (the latest) and not the version it should be pointing to (about 3 checkins older) that was associated with the branch myBranch2.</p>

<p>Of course I could just clone a new one and have both - this is what I would normally do, but it bugs me that I don't know how to do this... and it might be useful.</p>
","4","2298137","",""
"42116867","5032083","2017-02-08 15:13:20","2","2223","<git><github><git-submodules><git-fork>","github - How to fork inside a repository (Into an submodule)","<p>I have a repository, let's call ""School's Projects"".<br>
My friend have a repository, let's call ""Foo Project"".<br>
I've created a submodule inside my ""School's Projects"" with ""Foo Project"".<br>
The thing is I want to edit ""Foo Project"" and create pull requests from it.<br>
How can I do that?</p>
","0","5032083","",""
"22884292","876603","2014-04-05 17:33:36","1","1973","<git><github><git-submodules>","How to use git submodule with a 3rd party library?","<p>I want to add a 3rd party lib on github as a git submodule for a project I'm working on.</p>

<p>Since this is a library that can change, and those changes are out of my hands, I was wondering  what is the best practice for using it as a submodule.</p>

<p>The options I had in mind are:</p>

<ol>
<li>Forking the lib and using that as a sub module to ensure no changes harm my project.</li>
<li>Using a specific version's branch/tag (is that possible) as a submodule</li>
</ol>

<p>Is one of these options the recommended way to go? Is there a better way aside these options?</p>
","4","876603","",""
"42280688","728241","2017-02-16 17:19:55","4","1577","<git><git-submodules>","Set up git submodule without creating commit","<p>I have a parent project with the following <code>.gitmodules</code> file</p>

<pre><code>[submodule ""src/redux""]
    path = src/redux
    url = git@github.com:username/sub-package.git
    branch = master
</code></pre>

<p>Here are the steps I'm using to clone the parent project to ensure I have the submodule set up.</p>

<pre><code>git clone git@github.com:username/parent-project.git
git submodule init
git submodule update
</code></pre>

<p>After that, I have the contents of the submodule in the place in the parent project. However, the HEAD is detached in the submodule. First indication that I'm not doing something right. I expect this to be on the master branch since the parent project's <code>.gitmodules</code> file points to the master branch.</p>

<p><a href=""https://i.stack.imgur.com/PqBvp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PqBvp.png"" alt=""enter image description here""></a></p>

<p>I then checked out master and set up the submodule's master branch to track the remote master branch.</p>

<pre><code>git checkout master
git branch -u origin/master master
</code></pre>

<p>When i back out to the parent project and run git status i have an uncommitted change in the submodule. </p>

<p><a href=""https://i.stack.imgur.com/RJ5TZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RJ5TZ.png"" alt=""enter image description here""></a></p>

<p>I feel like I shouldn't have that change when I'm just setting it all up initially. If I did, all developers that cloned the project would also have their own unique initial commit when setting up their local environment. What am I doing wrong? </p>
","2","728241","",""
"4951944","122075","2011-02-09 23:56:39","2","282","<git><github><git-submodules><subtree><subproject>","Using git for plugin development","<p><a href=""/questions/720669/projects-within-projects-using-git"">Similar questions</a> to this have <a href=""/questions/769786/vendor-branches-in-git"">already been asked</a>, although they're not exactly what I'm trying to do.</p>

<p>At first I thought I needed a git submodule, then to set up a superproject and then a sub tree merge but I'm not sure if any of these really fit.</p>

<p>I have a <a href=""https://github.com/G4EGK/Eva"" rel=""nofollow"">project</a> (Eva), and I'm writing some <a href=""https://github.com/G4EGK/Eva-Torn-Events"" rel=""nofollow"">extensions for it</a> that are <em>optional</em>. So if you were to pull down a copy Eva from Github, it wouldn't contain the optional plugins but you could fetch them separately and use them.</p>

<p>The optional extensions reside in the same directory structure as Eva. Simple so far ...</p>

<pre><code>Eva
 |
 --- system/
 --- events/
   |
   --- core_events
 --- tests/
   |
   --- core_tests

Extension A
 |
 --- events/
   |
   --- [extension A]
 --- tests/
   |
   --- [extension A tests]
</code></pre>

<p>I wanted to add tests to those extensions tonight, and at present I have them in a separate directory outside of my local Eva git repo. In order to run these tests I really need these extension to live in the same directory as Eva, the events rely on the core system to run. </p>

<pre><code>Eva
 |
 --- system/
 --- events/
   |
   --- core_events
   --- [extension A]
   --- [extension B]
 --- tests/
   |
   --- core_tests
   --- [extension A tests]
   --- [extension B tests]
</code></pre>

<p>I could copy the Eva project files into the extensions repo directory but if I modify Eva's source, then I have to keep copying those changes across.</p>

<p>Should I continue with this clumsy set up or is there a more graceful way git can accomodate this?</p>

<p>Maybe my requirements are the reverse of the other questions. My extensions are a sub project of Eva and I need to pull in updates from the Eva repo around it occasionally.</p>

<p>If I add my extensions repo as a submodule when someone clones Eva they'll get all the optional plugins too? I don't want that.</p>

<p>Not sure a subtree merge fits either, I will never have to pull the extensions project into the core Eva project.</p>
","1","122075","",""
"4958826","428502","2011-02-10 15:12:59","4","1089","<git><github><git-submodules>","$HOME git repo (selectively) to github?","<p>I keep many files in my home directory under <code>git</code>. Important dotfiles, my thesis, etc.</p>

<p>I want to push certain files to <em>github</em>, e.g., my <code>emacs</code> configuration, to share.</p>

<p>Obviously, I don't want to push the entire repo. Are <code>submodules</code> the way to go?</p>

<p>My first thought is to make a directory <code>~/github/emacs</code>, and <code>rsync</code> selective files here, then add a submodule under that directory, pointing to github, to push.</p>

<p>Is this a good idea, or is there a better way?</p>

<p>(I don't want my local git repo storing all files to get muddled up with this stuff, though.)</p>
","0","428502","0","0"
"23089518","1978412","2014-04-15 16:32:12","0","206","<git><git-submodules>","Why isn't git submodule init and git submodule update one command?","<p>Whenever I use submodules in <code>git</code> find myself doing</p>

<pre><code>git submodule init
git submodule update
</code></pre>

<p>What's the logic in two commands when you basicly do those commands every time?</p>
","0","1978412","",""
"22382595","2955413","2014-03-13 14:58:41","0","64","<git><composer-php><git-submodules>","Moving to composer from git submodules","<p>Do I have/is it good practice to remove git submodules before I run 'composer install'? Or could I just install and bet that composer figuring it out?</p>
","1","2955413","",""
"41368827","2848117","2016-12-28 19:53:26","1","262","<git><git-submodules>","Initialize a Select Submodule in git rather then all of them","<p>I have a common submodule across many projects which is designed to be build on many difference platforms. Since I maintain the code for the core logic and the interfaces from the different platforms, I have submodules for each to keep track and have the code build against all the platforms like so:</p>

<pre><code>lib/core_logic_module/lib/
                         platform_1
                         platform_2
                         ...
                         platform_X
</code></pre>

<p>When working on a project that requires a specif platform, it is very nice to actually have the platform specific module so changes can be examined if needed and not the unneeded ones. Do a plane old <code>git submodule update --init --recursive</code> clones all the submodules and their specif dependencies which makes using <code>grep</code>, <code>ctags</code>, and <code>find</code> a pain as the platforms all have similar files for hardware abstraction. </p>

<p>Is there a simple way when initializing submodules to specify that I only want a single module?</p>
","0","2848117","",""
"23110795","590222","2014-04-16 13:23:08","1","3403","<git><git-submodules>","Git submodule add: “a git directory is found locally” issue","<p>Hi one follow up question to the question discussed in <a href=""https://stackoverflow.com/questions/20929336/git-submodule-add-a-git-directory-is-found-locally-issue/23109765?noredirect=1"">Git submodule add: “a git directory is found locally” issue</a></p>

<p>I have a lot of such submodule directories(not sure how many)</p>

<p>Is it somehow possible to initialize all the submoudules as listed in .gitmodules and force pull all of them.</p>

<p>Additionally I would like to reset all of the submodules and discard any changes locally present.</p>

<p>Thanks :)</p>
","0","590222","0","0"
"60086154","12848699","2020-02-06 00:41:26","6","10568","<github><heroku><git-submodules>","How can I push my submodules from github desktop?","<p>Everytime when I try to push the files on myflix, the submodules myflixdb01 cant be pushed and when I try to push it from github desktop,I get an error""commit failed-exit code 1 received.<a href=""https://i.stack.imgur.com/sRqkH.png"" rel=""noreferrer"">enter image description here</a></p>
","1","12848699","0","0"
"22395542","1893487","2014-03-14 03:23:17","1","692","<git><github><git-submodules>","git clone --recursive not pulling the latest in submodules","<p>For some reason the git command <code>git clone --recursive git@github.com:foo/bar.git</code> is not pulling the latest from the
submodules.</p>

<p>For the submodule ""sub"", it is going back to an older commit:</p>

<pre><code>$ cd other/sub/
$ git log | head -1
commit 57d0df7269949ef6d5347c5a4556fde7eafef16d

$  grep -r 57d0df7269949ef6d5347c5a4556fde7eafef16d .git/*
.git/modules/other/sub/HEAD:57d0df7269949ef6d5347c5a4556fde7eafef16d
.git/modules/other/sub/logs/HEAD:b0e43d8acf9fc38257b20ab7317b2b86110e8f72 57d0df7269949ef6d5347c5a4556fde7eafef16d Me
&lt;me@hello.com&gt; 1394764688 +0530     checkout: moving from master to 57d0df7269949ef6d5347c5a4556fde7eafef16d
</code></pre>

<p>Any idea why this is happening?</p>

<p>One answer at <a href=""https://stackoverflow.com/questions/6474847/how-do-i-git-clone-recursive-and-checkout-master-on-all-submodules-in-a-single/8661881#8661881"">How do I git clone --recursive and checkout master on all submodules in a single line?</a> suggests I might have pinned the submodule to particular sha, which the author says is the correct way to do. In my case, I want to get the latest, both in my main repo and all the submodules it refers to, when I do the clone.</p>

<p>How do I confirm if the submodule is pinned to the sha 57d0df7269949ef6d5347c5a4556fde7eafef16d? How do I remove it?</p>

<p>thanks.</p>
","0","1893487","0","0"
"22402865","2386199","2014-03-14 10:47:24","4","235","<git><git-submodules>","How can I determine whether a git submodule is actually ahead or behind its remote?","<p>I did find an old question that answers this to some extent, but it's not entirely helpful as it stands:</p>

<p><a href=""https://stackoverflow.com/questions/12529141/how-can-i-find-out-if-a-git-submodule-has-new-commits"">how can I find out if a git submodule has new commits</a></p>

<p>Mostly I was hoping that git has changed since 2012 enough that this is easier.</p>

<p>When I do a <code>git status</code> with my current setup I get two types of output. The usual lines</p>

<p><code>modified: path/to/submodule (new commits)</code></p>

<p>And some extra info about the submodules like this</p>

<pre><code>* path/to/submodule/
  &lt; upstream repo
  &lt; added more commits
  &lt; you should update this submodule

* path/to/submodule/
  &gt; These commits
  &gt; don't exist upstream
  &gt; you should commit this submodule
</code></pre>

<p>Git seems to know exactly what is going on, but I don't seem to have the tool to determine this myself. </p>

<p>My goal is to know for each submodule whether I should commit it, update it, or manually investigate because there's a mix of <code>&gt;</code> and <code>&lt;</code> in there. I'm about to write a script based on heuristics, which feels bad, so better ideas are gratefully received.</p>

<pre><code>$ git --version
git version 1.8.5.3
</code></pre>
","0","2386199","0","0"
"5200085","223201","2011-03-04 22:42:13","1","152","<git><github><git-submodules>","Can I push my git submodules to Github without using extra repositories?","<p>I have a Github ""Gold"" account and I'm starting to run out of my allotted repositories. :-(</p>

<p>Luckily, I have a few very small projects that are interrelated and could be treated as submodules of a bigger project. I'm a bit of a novice when it comes to submodules, so forgive me if my question is naive...</p>

<p>I'd like to push the supermodule along with all of its submodules into one Github repository if that's possible. This would help me conserve my remaining Github repositories for projects that are truly separate. Can I do this?</p>

<p>In my investigation of the problem so far it looks like each submodule needs to have its own remote, and if that's the case then I'll run out of repositories before long!</p>

<p>Thanks much.</p>
","0","223201","",""
"5216394","106302","2011-03-07 06:04:30","2","1068","<git><git-submodules><subdirectory>","How does git handle cloning another repository into a subdirectory?","<p>I just cloned a repository into a subdirectory of another repository, and git actually appeared to handle the situation pretty intelligently.  I know about submodules, but I thought they always had to be explicitly defined and I didn't think git had this functionality.  What happened?</p>

<p>Here's my shell session:</p>

<p><a href=""https://gist.github.com/858131"" rel=""nofollow"">https://gist.github.com/858131</a></p>
","0","106302","0","0"
"23331756","765382","2014-04-28 02:49:39","1","219","<git><git-submodules><git-subtree>","git subtree or submodule for surrounding directories","<p>We commonly work on projects that share a similar directory structure to CodeIgniter, where there is a framework surrounding our application code (in parent and sibling directories).  We have two main workflows that we need to manage:</p>

<ol>
<li>maintain our local application code (e.g. the <code>/application</code> directory) in a private (non-github) repository</li>
<li>pull upstream changes from the outer framework, submit pull requests, etc.</li>
</ol>

<p>The closest approach I've found in my research would be to use <a href=""http://debuggable.com/posts/git-fake-submodules:4b563ee4-f3cc-4061-967e-0e48cbdd56cb"" rel=""nofollow"">fake submodules</a>, with a dash of <code>.gitignore</code> or some sort of related voodoo, however that seems very fragile. Is there a better approach to setting up our repositories and directories?</p>
","0","765382","",""
"30262638","166231","2015-05-15 14:54:14","0","402","<asp.net-mvc><git><git-submodules><gitignore>","git add . (dot) doesn't obey .gitignore (or my patterns are wrong)","<p>I have the following situation.  In my asp.net webforms projects, I have some shared repositories that I optionally use <em>under</em> my main repositories.  The folders are named <em>Shared</em> and then <em>Shared.*</em> for others.  For example, I have a folder structure like this.</p>

<pre><code>\main  
.. \\.git  
.. \main-subfolder  

.. \Shared (this should be ignored since own repo)  
.... \\.git  
.... \Shared-subfolder  
.... shared files  

.. main-files
</code></pre>

<p>I think this pattern I'm using might be similar to git sub-modules, but that is (hopefully) reserved for another discussion.</p>

<p>My .gitignore file originally simply had: <code>Shared*/</code> and everything worked great.</p>

<p>Then I discovered that in my asp mvc projects, my <em>Views/Shared</em> folders were getting ignored (as expected given the above pattern).  So I tried to add an exclusion with <code>!Views/Shared/</code> but that didn't work in that git still didn't detect that for the mvc projects it should be adding <em>Views/Shared</em> content.</p>

<p>So I ended up with:</p>

<pre><code>Shared*/*
!Views/Shared/
</code></pre>

<p>And all seemed to work, however, I detected a problem in my original webforms projects (that should be ignoring folders of <em>Shared*</em>).  So the following image.  <code>git status</code> appears to correctly be ignoring the Shared folder, but when I do a <code>git add .</code> then <code>git status</code>, you can see that it has been added.</p>

<p><img src=""https://i.stack.imgur.com/xEfl3.png"" alt=""git add . workflow""></p>

<p>Note: <code>git com -am ""Commit Message""</code> appears to work too.  If that would have been my original step instead of <code>git add .</code>, the <em>Shared</em> folder is ignored on the commit.</p>

<p>Is my setup (nested repository) not supported or is my .gitignore pattern incorrect?  Thanks in advance.</p>
","2","166231","",""
"30263144","192801","2015-05-15 15:18:57","4","1249","<git><git-submodules>","Readable submodule status information in git","<p>I have a script that checks out a repo, checks out the submodules, then prints some info about the submodules so that the user knows which tags/branches they are dealing with.</p>

<p>The output on my own workstation looks like this:</p>

<pre><code>        Entering 'SubModuleA', 
        * feature/some_feature_branch,
        Branch is, 
        feature/some_feature_branch,
        Tag is, 
        undefined, 
        Entering 'SubModuleB'
        * (detached from 1.1.9)
        Branch is
        HEAD
        Tag is
        1.1.9^0
</code></pre>

<p>In this example, the main repo is pointing a feature branch of Submodule A and a tag of Submodule B.</p>

<p>But when I use ansible to run this code on other workstations or VMs, the output looks different:</p>

<pre><code>        Entering 'SubModuleA', 
        * (detached from 1234abcd), 
        Branch is, 
        HEAD, 
        Tag is, 
        undefined, 
        Entering 'SubModuleB'
        * (detached from a1b23c4d)
        Branch is
        HEAD
        Tag is
        1.1.9^0
</code></pre>

<p>The code looks like this:</p>

<pre><code> git submodule foreach 'git branch | grep \* ; echo Branch is &amp;&amp; git rev-parse --abbrev-ref HEAD ;  echo Tag is &amp;&amp; git name-rev --tags --name-only $(git rev-parse HEAD) '
</code></pre>

<p>It's a bit of a hodge-podge of other examples I've found to get this kind of info, but I'm having trouble finding something that is consistent.</p>

<p>The command that is immediately before the status check in the playbook is</p>

<pre><code>git submodule init
git submodule update
</code></pre>

<p>I'm not sure why I'm getting different results. Is there anything that will reliably print the branch name and tag name of a submodule consistently?</p>
","0","192801","",""
"12681936","12034","2012-10-01 22:19:47","15","2794","<git><git-submodules>","git - default push to --recurse-submodules=check","<p>I always forget to push submodules. Sometimes I forget to add <code>--recurse-submodules=check</code> to <code>git push</code>. Even worse, others on my team might do the same. Is there a <code>git config</code> option we can set to make <code>check</code> the default?</p>
","0","12034","0","0"
"12687114","1031601","2012-10-02 08:46:05","4","2512","<git><git-submodules>","What are the advantages of git submodule over a symbolic link?","<p>I have a git repository (A) that includes a library code that I need to reuse in the second repository (B).</p>

<p>My understanding is that git submodule does not allow to import only specific path within a repository, the whole repository needs to be imported. Is this correct?</p>

<p>Because of this, I see two solutions to my problem:</p>

<ol>
<li>Have A and B as separate repositories and add a symbolic link from B to a library directory in A.</li>
<li>Add a new git repository C with the library and import it as a submodule in A and B.</li>
</ol>

<p>What are the advantages of the second approach? It seems to me that adding a separate repository for a small library is an overkill that can add unnecessary burden to the project maintenance. Is there any better way to solve my problem? </p>
","0","1031601","0","0"
"12688844","197134","2012-10-02 10:43:56","1","1129","<git><github><git-submodules>","git submodule pull and commit automatically on webserver","<p>I have the following setup, I am working on a project <code>project</code> with the submodule <code>submodule</code>. Whenever I push changes to github it sends a post request to update.php on the server. </p>

<p>This php file executes a git command. Without submodules I can just do a git pull and everything is fine but with submodules it is much more difficult.</p>

<p>I have this at the moment, but it does not do what I want. I should git pull the repo and update and pull the latest version of each submodule.</p>

<pre><code>&lt;?php echo `git submodule foreach 'git checkout master; git pull; 
git submodule update --init --recursive; git commit -m ""updating""' &amp;&amp; git pull &amp;&amp; 
git submodule foreach 'git add -A .' 
&amp;&amp; git commit -m ""updating to latest version including submodules"" 2&gt;&amp;1s`;
</code></pre>

<p><strong>EDIT//</strong>
Okay, I got it half way done.</p>

<pre><code>&lt;?php echo `git submodule foreach 'git checkout master; git pull; 
git submodule update --init --recursive; git commit -am ""updating""; echo ""updated""' &amp;&amp; 
git pull &amp;&amp;  git commit -am ""updating to latest version including submodules"" &amp;&amp; 
echo 'updated'`;
</code></pre>

<p>The echo prevents the script to stop because of non-zero returned. It works 100% fine when I run it from the console using <code>php update.php</code>.</p>

<p>When github initialized the file, or I run it from the browser it still does not work.</p>

<p>Any ideas?</p>
","6","197134","",""
"30329106","961264","2015-05-19 14:54:24","0","40","<git><git-submodules>","git submodules: Which repository shall be used as the 'submodule'?","<p>I have a private git repository (repos 'private') with a bunch of files in them
I frequently edit. Some of these files are published on a website. It is tedious
to update these files every time I make a small change. I therefore thought of
using git submodules in the following way: I set up a second (now public) git
repository ('public'), and put in all files which appear on the website. The
website then provides links to these files in 'public'. Once I edit one of the
files in 'private' which are also in 'public', the changes in 'public' will be
visible (after a simple git command) and the file changes will thus be visible
on the website. My questions are:</p>

<p>1) Is this a good approach to deal with the problem?</p>

<p>2) I read about <code>git submodule update --remote --merge</code> but I'm still not 100%
sure whether this updates the submodule to changes in the main project or
exactly the opposite. I frequently see the wor 'upstream' used in explanations
but couldn't find an exact definition.</p>

<p>3) If submodules are mainly used in the sense that one updates the main project
to changes in the submodules, would I then have to create the 'private'
repository as a submodule and the 'public' one as the main project? (because I
would like to track changes to 'private' from within 'public')</p>

<p>[I thought I still keep these questions in a single post as they are quite related.]</p>
","0","961264","0","0"
"30343488","1432980","2015-05-20 07:52:32","2","1807","<git><git-submodules>","git submodule checks out the same commit","<p>After I <code>git submodule update</code> it always checks out the same commit. for example <code>34561</code>.</p>

<p>I do <code>git checkout master</code> for submodule and then <code>git submodule sync</code>. Then it points to the latest commit <code>a2344</code>.</p>

<p>But after <code>update</code> it again points to the commit <code>34561</code>.</p>

<p>How to change it? I mean why it decided to point to that commit and not another? </p>
","0","1432980","0","0"
"12797408","964045","2012-10-09 09:56:23","0","262","<ios><git-submodules><soundcloud>","Do I have to fork a 3rd party library in order to make small changes when including as a git submodule?","<p>I'm attempting to use some 3rd party libraries in my iOS app, as recommended by the SoundCloud API. I followed their <a href=""http://developers.soundcloud.com/docs/api/ios-quickstart"" rel=""nofollow"">tutorial</a>, running <code>git submodule add</code> on each of the required dependencies.</p>

<p>However, when compiling, I had to make some tiny tweaks to the dependency projects in order to get them to link correctly - purely in the project settings.</p>

<p>I have never used submodules before, but from what I've heard, the parent repo tracks a particular commit of the submodule, right? If I want to include the little tweaks to the project files of the 3rd party libraries, so that a team member can pull it from origin, does that mean I will have to fork each of the dependencies first and commit each of the little project settings, just so that they can be included in the main repo? Or can I make ""local"" changes to the 3rd party libraries, and then push the main repo to origin?</p>

<p>This is quite frustrating, since I'm not actually <em>changing</em> the 3rd party libraries per se, it's purely a setting I've had to change so that they work correctly with my specific project. Is there a way I can include tweaks in the main repo without forking each library in their entirety?!</p>

<p>Thanks!!</p>
","0","964045","",""
"30413808","1922945","2015-05-23 14:24:34","2","295","<git><github><git-submodules><gist>","show github gist git submodule page link","<p>I've added submodules from github before and I like that you can click on the submodule link and it takes you to the submod repo page. However, with gists as submodules it seems like that is not the case.</p>

<p>Is there anything I can do to fix this? Is this a github issue?</p>
","1","1922945","0","0"
"47970631","","2017-12-25 17:16:38","0","137","<git><git-submodules><symlink>","How to convert automatically all symlink to git submodules in repo","<p>How to convert automatically all symlink to git submodules in some repo.</p>

<p>I want to do something like, I have on client side: </p>

<pre><code>folder1(repo1) 
| 
+--folderA--file.a 

folder2(repo2) 
| 
+--symlink to folderA 
</code></pre>

<p>And I want convert it to git submodule, on server side: </p>

<pre><code>repo1 
| 
+--FolderA--file.a 

repo2 
| 
+-- git submodule to folderA in repo1.. 
</code></pre>

<p>Repo 1 and repo 2 are mine.</p>

<p>(I need something like:</p>

<p>I have on client side folder1 inicializated as repo1, I have folder2 inicializated as repo2, I have symlink from one folder in folder 2 to one folder in folder1. And I need it on server side (git server) all symlinks convert to git submodules -> folder in repo2 to be submodule to folder in repo1.)</p>

<p>(sry for my English), I'm using google translator, and it sometimes translate very bad.</p>
","1","","0","0"
"13520870","710416","2012-11-22 22:33:53","2","1168","<jquery><git><git-submodules>","github.com/jquery/jquery as git submodule","<p>I'd like to use a local copy of jQuery 1.8.3 for my github project. I'd like to do it the right way, which would be to add it as a submodule:</p>

<pre><code>git submodule add git://github.com/jquery/jquery.git js/lib/jquery
</code></pre>

<p>Done! The problem is the jQuery repository does not have prebuilt versions of jQuery, and other javascript libraries that I'm using do. How should I proceed? </p>
","0","710416","",""
"31075232","3785777","2015-06-26 14:02:01","2","129","<git><git-submodules>","How to change a tracked folder into a git submodule","<p>I'd like to change one folder in my project into a submodule.
This is my (sumplified) directory structure:</p>

<pre><code>|-app &lt;- the root of git project   
|--themes
|--plugins
|--lib
</code></pre>

<p>Now, I want to turn app/plugins into a submodule so that I commit changes in this directory into a separate reposiotry.</p>

<p>After setting up a new repo for plugins, I've tired <code>git submodule add &lt;submodule-repository&gt; plugins</code>, but then I receive a message the reads</p>

<blockquote>
  <p>app/plugins' already exists in the index</p>
</blockquote>

<p>Sure it exists in the index since it was tracked as part of the main project repository.</p>

<p>How should I solve it? Should I perhaps delete the main <code>.git</code> folder, add <code>app/plugins</code> to .gitignore, commit again, and then run <code>git submodule add</code>?</p>

<p>This actually raises another question, should a folder that is a submodule of the project be added to <code>.gitignore</code> of the project that includes the submodule?</p>
","1","3785777","",""
"31076012","394663","2015-06-26 14:40:49","0","721","<git><dependency-management><git-submodules><git-clone>","Selectively init/update git submodules","<p>I'm developing a RESTful framework that has the option to build HTTP and/or HTTPS support. The current HTTP only build instructions follow:</p>

<pre><code>git clone --recursive https://github.com/corvusoft/restbed.git
mkdir restbed/build
cd restbed/build
cmake [-DBUILD_TESTS=YES] [-DBUILD_EXAMPLES=YES] [-DCMAKE_INSTALL_PREFIX=/output-directory] ..
make install
make test
</code></pre>

<p>I'm keen to commit in the latest HTTPS feature but I'd like the ability to select certain dependencies (git submodules) during clone to help reduce network traffic.</p>

<p>HTTP and HTTPS example pulling down all dependencies.</p>

<pre><code>git clone --recursive  https://github.com/corvusoft/restbed.git
mkdir restbed/build
cd restbed/build
cmake [-DBUILD_TESTS=YES] [-DBUILD_EXAMPLES=YES] [-DCMAKE_INSTALL_PREFIX=/output-directory] ..
make install
make test
</code></pre>

<p>HTTP only example pulling down specific dependencies.</p>

<pre><code>git clone --recursive=""asio, framework"" https://github.com/corvusoft/restbed.git
mkdir restbed/build
cd restbed/build
cmake -DBUILD_SSL=NO [-DBUILD_TESTS=YES] [-DBUILD_EXAMPLES=YES] [-DCMAKE_INSTALL_PREFIX=/output-directory] ..
make install
make test
</code></pre>

<p>git <a href=""http://git-scm.com/docs/git-clone"" rel=""nofollow"">--recursive</a> would appear to lack this functionality.</p>

<blockquote>
  <p>--recursive
  --recurse-submodules After the clone is created, initialize all submodules within, using their default settings. This is equivalent to
  running git submodule update --init --recursive immediately after the
  clone is finished. This option is ignored if the cloned repository
  does not have a worktree/checkout (i.e. if any of --no-checkout/-n,
  --bare, or --mirror is given)</p>
</blockquote>
","0","394663","",""
"13539636","1121982","2012-11-24 08:34:47","2","695","<git><combinations><git-submodules><repository>","Combine a base project that is growing in child projects in git repository except git submodule or subtree merge methods","<p>There are some child projects: ""Project 1"", ""project 2"" and so on in the future.</p>

<p>Also, There is a project that named: ""Base Project"" and it's foundation of other projects. ""Base Project"" is a content management system (CMS).</p>

<p>All projects have their own git repositories.</p>

<p>""Project 1"" , ""project 2"" and others uses ""Base Project"" to develop and grow.</p>

<p>There are some methods in git like submodule or subtreemerge. but don't seem to fit here.
""Base Project"" not should be clone into a sub directory. It's in root directory. It's growing in ""project 1"" or ""project 2""...</p>

<p>When I work in child projects, I have to be able to push ""Base Project"" changes separately to It's own repository to fetch in other children.</p>

<p>What can I do?</p>
","0","1121982","0","0"
"13551625","1044140","2012-11-25 13:49:59","2","3016","<git><github><git-submodules>","Git submodules in github repo","<p>In my project, im using a third party library. I had git cloned this lib in my project, and then had done <code>git submodule init</code> and <code>git submodule update</code> in the lib folder. I pushed my main project to github, but the contents of this third party lib were not sent and the lib folder appears like a green folder in my github project repo.</p>

<p>If i clone my main project on another machine, i dont have the contents of the lib there.So, should i git clone the lib again on the machine and run the init and update commands again or is there any way to push the contents of the 3rd party lib to my github repo ?</p>

<p>Thank You</p>
","0","1044140","0","0"
"31099593","984868","2015-06-28 12:05:15","11","4055","<git><github><commit><git-submodules>","How to commit a git repository inside another git repository","<p>I'm developing an application that uses git, so I need to test its integration with git. Inside my git repository, I need to have another repository (my_git_repo/tests/another_repo). How can I commit it without git submodules? (I don't want to have another remote repository (in github/bitbucket, etc) for just one file)</p>

<p>Any ideas?</p>
","4","984868","",""
"13599319","2388590","2012-11-28 06:45:29","1","197","<git><git-submodules>","git: changes ignored in sub-directory","<p>I have a sub-directory in my repo that stopped tracking changes. I can add abc.php file to any directory above a certain level and <code>git status</code> returns the expected results, but once I add abc.php to the subdirectory in question (or change an existing file), <code>git status</code> comes up empty. I believe the subdirectory <em>used</em> to have it's own git repo, but I could be wrong.</p>

<p>I see that <code>git update-index --really-refresh</code> <a href=""https://stackoverflow.com/questions/9034999/git-novice-git-is-not-tracking-changes-in-a-sub-directory"">may be an option</a>, but I'm concerned because I added other git projects to ""sibling"" directories to the one having an issue. (I didn't do anything within my parent repo to acknowledge these, so hope that's okay too.)</p>

<p>That is, I have </p>

<ol>
<li>...dir/custom (the dir where changes ignored)</li>
<li>...dir/sibling1 (sibling dir 1 with own git repo)</li>
<li>...dir/sibling2 (sibling dir 2 with own git repo)</li>
</ol>

<p>Every parent directory in dir and above has no issues and works as expected.</p>

<p>My primary question: should I be concerned about running this given the above structure? I'd also like to ask if there's anything I <em>should</em> do with the repos within the primary repo (i.e. somehow declare them as submodules)?</p>

<p>Thanks.</p>
","4","2388590","0","0"
"13604592","1859749","2012-11-28 12:00:44","1","275","<git><ssh><git-submodules><buildbot>","Using git submodules through ssh with buildbot","<p>I have a git repository with submodules that are linked with different external git-servers. How can I pass ssh authentification for each submodule and user? Can I put separate options for each submodule in Buildbot?</p>

<p>Can I checkout every submodule on the neccessary branch automatically? And can I view not only root changelog, but every submodule's changelog in one time?</p>
","1","1859749","",""
"13633930","1460983","2012-11-29 20:14:10","2","269","<git><github><git-submodules>","How do I remove a submodule from my github repository?","<p>I happened to change a name of a directory within my local repository and then proceeded to push this change up to my github repository. In effect, it caused this repository to turn into a git submodule which is displayed as a green icon on github and there is no way to drill down further in to the directory to view individual files.</p>

<p>How do I remove the submodule from github?</p>
","0","1460983","",""
"31211870","156042","2015-07-03 17:31:55","9","3672","<git><git-submodules><git-subtree><git-repo><git-slave>","Best practices for multiple git repositories","<p>I have around 20 different repositories. Many are independent and compile as libraries but some others have dependencies among them. Dependency resolution and branching is complicated.</p>

<p>Suppose that I have a <em>super project</em> that only aggregates all other repositories. It is used exclusively to run tests -- no real development goes here.</p>

<pre><code>/superproject  [master, HEAD]
    /a         [master, HEAD]
    /b         [master, HEAD]
    /c         [master, HEAD]
    /...
</code></pre>

<p>Now, to develop specific features or fixes for each one (<code>a</code>), especially one of those that require specific versions of projects to compile or run (<code>b v2.0</code> and <code>c 3.0</code>) I have to create a new branch:</p>

<pre><code>/superproject  [branch-a, HEAD]  &lt;-- branch for 'a' project
    /a         [master]  &lt;-- new commits here
    /b         [v2.0]
    /c         [v3.0]
</code></pre>

<p>For <code>b</code>, it might be required something else, like <code>a v0.9</code> and <code>c v3.1</code>:</p>

<pre><code>/superproject  [branch-b, HEAD]  &lt;-- branch for 'b' project
    /a         [v0.9]   &lt;-- older version than 'a'
    /b         [master] &lt;-- new commits go here
    /c         [v3.1]   &lt;-- newer version than 'a'
</code></pre>

<p>This becomes even more complex and complicated when implementing common git workflows involving feature branches, hotfix branches, release branches, etc. I was advised to (and advised against) using <code>git-submodules</code>, <code>git-subtree</code>, google's <code>git-repo</code>, <code>git-slave</code>, etc.</p>

<p>How can I manage <strong>continuous integration</strong> for such a complex project?</p>

<p><strong>EDIT</strong></p>

<p>The real question is how to run tests without having to mock all other dependent projects? Especially when all projects might use different versions.
<a href=""https://stackoverflow.com/questions/31214483/trigger-jenkins-tests-after-commits-in-git-submodules"">Trigger Jenkins tests after commits in git submodules</a></p>
","3","156042","0","0"
"31214483","156042","2015-07-03 21:40:37","2","911","<git><jenkins><git-submodules><jenkins-job-dsl>","Trigger Jenkins tests after commits in git submodules","<p>I have a <strong>super project</strong> that only aggregates multiple git sumodules. I would like to trigger Jenkins for each change in submodules as well as when super project is updated.</p>

<pre><code>/superproject
    /submodule-a
    /submodule-b
    /submodule-c
</code></pre>

<p>For each submodule I am using <a href=""https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin"" rel=""nofollow"">Job DSL plugin</a> and works fine except when some modules require others to compile or run tests -- that is one reason to aggregate all other repos in one <em>super project</em>.</p>

<p><strong>What should I do for testing individual submodules as well as integration as part of a super project?</strong></p>
","1","156042","0","0"
"66536953","3626104","2021-03-08 20:46:10","2","257","<git><ssh><git-submodules>","git - Can you clone via HTTPS even if SSH-style git@github is used","<p>I'm trying to clone a git repository which has submodules via <code>git submodule update --init --recursive</code>. These submodules all use &quot;git@github.com:foo/bar.git&quot; URLs. Unfortunately, my work place is preventing SSH URLs from their firewall. I can, however, clone via HTTPS, with no problems.</p>
<p>As mentioned, the submodule URLs are hard-coded in the repository to use SSH. Is there a way to tell git to clone these submodule repositories using HTTPS without instead of SSH making any direct modifications to the git repository?</p>
","0","3626104","0","0"
"31283530","1494512","2015-07-08 04:27:24","5","1228","<git><git-submodules><mirror>","Mirroring git repository with submodules","<p>Suppose that I have a git server with several repos, and that one of the repos includes some of the others as submodules.  Is it possible to mirror all of the repositories on another server and redirect the submodule dependencies without altering the history?</p>
","0","1494512","0","0"
"48029330","2863603","2017-12-29 22:59:21","2","687","<git><git-submodules>","How to update git submodule reference without updating its working tree?","<p>I have some files in my repository that take a lot of space as compared to the rest which are just text files. So, I decided to keep them in separate git repositories in order to keep the main code repository compact, and link the others as git submodules. </p>

<p>However, I don't need git to update working tree since I already have them on my development machine. I just need the main repo keep references to the submodules. </p>

<p>Once I commit something to the submodule and push, how do I just update the main repo's pointers to the submodule commits? </p>

<p>In my experience, git does not allow me <code>update</code> without <code>git submodule init</code>, and that updates the working tree. </p>
","2","2863603","0","0"
"48035434","9156357","2017-12-30 15:50:43","5","16010","<git><docker><ubuntu-16.04><git-submodules>","git error: RPC failed; curl 56 GnuTLS recv error (-54): Error in the pull function","<p>I tried <code>git submodule update --init --recursive</code></p>

<p>and got following error</p>

<p><code>
error: RPC failed; curl 56 GnuTLS recv error (-54): Error in the pull function.
fatal: The remote end hung up unexpectedly
fatal: early EOF
fatal: index-pack failed
</code></p>

<p>My OS is window 10 and I'm using docker for windows. <code>Docker</code> images is <code>ubuntu:16.04</code></p>
","1","9156357","0","0"
"48035601","5645358","2017-12-30 16:12:31","0","589","<c++><cmake><linker><git-submodules><yaml-cpp>","CMake - Linker error with static yaml-cpp as git submodule","<p>I am trying to use <a href=""https://github.com/jbeder/yaml-cpp"" rel=""nofollow noreferrer"">yaml-cpp</a> in my project. I am using cmake to build both my project and yaml-cpp which is a git submodule in my project.</p>

<p>I have the boost library on my computer (required by yaml-cpp).</p>

<p>I am building it statically. Using <code>add_subdirectory</code> in my main CMakeLists.txt then using <code>target_link_libraries(components yaml-cpp)</code> (<em>component</em> is a static library I am using on different modules of my project).</p>

<p>I have an error during the linking phase for one of my source files :</p>

<pre><code>CMakeFiles/rsa-packer.dir/options/addObject.cpp.o : In function « YAML::detail::node&amp; YAML::detail::node_data::get&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, boost::shared_ptr&lt;YAML::detail::memory_holder&gt;) » :
~/git/apps/rsa-packer/options/addObject.cpp:(.text._ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE[_ZN4YAML6detail9node_data3getINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERNS0_4nodeERKT_N5boost10shared_ptrINS0_13memory_holderEEE]+0x157) : undefined reference to: « YAML::detail::node_data::convert_to_map(boost::shared_ptr&lt;YAML::detail::memory_holder&gt;) »
</code></pre>

<p>I checked the make output, there is the -lyaml-cpp option.
I checked the libyaml-cpp.a file, it contains the function (but I do not really understand the output of <em>nm</em> :</p>

<pre><code>000000000000005d r .L__PRETTY_FUNCTION__._ZN4YAML6detail9node_data14convert_to_mapESt10shared_ptrINS0_13memory_holderEE
0000000000000940 T _ZN4YAML6detail9node_data14convert_to_mapESt10shared_ptrINS0_13memory_holderEE
</code></pre>

<p>The weird thing is : </p>

<pre><code>// this works
YAML::Node node = YAML::Load(manifest.getStream());

// this does not work
if(node[""objects""]) {
    std::cout &lt;&lt; ""no objects"" &lt;&lt; std::endl;
}
</code></pre>

<p>I can build the node object using the <code>YAML::Load</code> function that works and is found in the static lib.</p>

<p>But I can't call <code>node[""...""]</code> because the function is not found in the lib.</p>

<p>I have no idea what is causing this error.</p>

<p>I don't know if it can lead to problems, but I am compiling my project in C++14 and the yaml-cpp lib is built using c++11.</p>

<p>Thanks!</p>
","0","5645358","",""
"13805658","1180316","2012-12-10 17:07:21","4","812","<git><git-submodules><deb>","How do I enable submodule cloning in git-buildpackage","<p>We've been using <code>git-buildpackage</code> to build Debian packages with great success, but we've recently hit a wall since introducing git submodules into the mix.</p>

<p>We normally run </p>

<pre><code>git-buildpackage -b -us -uc --git-export-dir=""latest"" 
</code></pre>

<p>to build the package.  However, the contents of any submodules are not checked out and included in the package (we just get an empty directory where the submodule would be, just as we would if we cloned without the <code>--recursive</code> flag).</p>

<p>It appears from the <code>git-buildpackage</code> log that support for submodules was added in v0.5.0.20, but in version 0.5.22 there is a changelog entry saying ""Disable submodule processing by default.""  This implies that there is a flag or switch we can set to enable it.  But no amount of man-page and internet trawling has revealed it.</p>

<p>I imagine submodules are very common in Debian source code - but for the life of me I can't figure out how get the packages to build properly.  Is my problem caused by the fact I'm telling it to do a binary-only package (the <code>-b</code> switch)?</p>
","0","1180316","",""
"48065122","9063338","2018-01-02 17:14:12","0","158","<android><git><android-studio><c++11><git-submodules>","In Android Studio 3.0.1 having trouble when trying to find files in git submodule","<p>I'm new to the whole git submodule thing, but as far I can tell I've done the process correctly for the git side of this equation. I only have a few C++ files that are in a git submodule to be used as an Android library. I previously had the folders that are currently in the submodule just placed in my jni folder and all my imports worked there. </p>

<p>The structure of my files looked like this:</p>

<p><a href=""https://i.stack.imgur.com/ryL4X.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ryL4X.png"" alt=""enter image description here""></a></p>

<p>(There was one more level. in jniLib there was also armeabi-v7a then in there was the osm and google folders. It was an older pic I had, sorry. It worked that way as well.)</p>

<p>Now the structure is like this:</p>

<p><a href=""https://i.stack.imgur.com/na9wy.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/na9wy.png"" alt=""enter image description here""></a></p>

<p>I've changed my Android.mk file accordingly.
This is it here:</p>

<pre><code>  LOCAL_PATH := $(call my-dir)

  include $(CLEAR_VARS)
  LOCAL_MODULE := protobuf-lite
  LOCAL_SRC_FILES := nearby_osm_lib/osm/libprotobuf-lite.so
  include $(PREBUILT_SHARED_LIBRARY)

  include $(CLEAR_VARS)
  LOCAL_MODULE := native-lib
  LOCAL_SHARED_LIBRARIES := libprotobuf-lite
  LOCAL_CPP_EXTENSION := .cxx .cpp .cc
  LOCAL_LDFLAGS := -lz -llog 
  LOCAL_CPP_FEATURES := rtti
  LOCAL_SRC_FILES := \
    nearby_osm_lib/osm/native-lib.cpp \
    nearby_osm_lib/google/include/protobuf/io/coded_stream.cc \
    nearby_osm_lib/google/include/protobuf/wire_format_lite.cc \
    nearby_osm_lib/google/include/protobuf/arenastring.cc \
    nearby_osm_lib/google/include/protobuf/arena.cc \
    nearby_osm_lib/google/include/protobuf/stubs/int128.cc \
    nearby_osm_lib/google/include/protobuf/message_lite.cc \
    nearby_osm_lib/google/include/protobuf/io/zero_copy_stream_impl_lite.cc \
    nearby_osm_lib/google/include/protobuf/io/zero_copy_stream.cc \
    nearby_osm_lib/google/include/protobuf/generated_message_util.cc \
    nearby_osm_lib/google/include/protobuf/stubs/common.cc \
    nearby_osm_lib/osm/BeaconSearchResult.cpp \
    nearby_osm_lib/osm/Geopoint.cpp \
    nearby_osm_lib/osm/fileformat.pb.cc \
    nearby_osm_lib/osm/osmformat.pb.cc \
    nearby_osm_lib/osm/Location.cpp \
    nearby_osm_lib/osm/osmpbf.cpp \
    nearby_osm_lib/osm/OSMPBFread.cpp \
    nearby_osm_lib/osm/OSMPOISearch.cpp \
    nearby_osm_lib/osm/POI.cpp \
LOCAL_CFLAGS    := -std=c++11
include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>Now here is the real problem here:</p>

<p><a href=""https://i.stack.imgur.com/d3Mh0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/d3Mh0.png"" alt=""enter image description here""></a></p>

<p>I know I can go in and fix the path and it will work, but I have a lot of files I would have to change. Before the submodule it worked and after it doesn't. I've tried searching around, but no one really has this particular problem. The things I found tend to be two separate Android Studio Projects that they use as submodules. </p>

<p>What I'm using:</p>

<p><ul>
   <li>Windows 10 64-bit</li>
   <li>Android Studio 3.0.1 </li>
</Ul></p>

<p>Any help would be deeply appreciate it. I'm sure there is a way to tell Android studio to look in the submodule but I'm just not sure how. If you need anything else from me just ask. </p>

<p>Edit: I'm sorry I mean to clearify a bit more. The line that the program is messing up on is:</p>

<pre><code>  #include ""google/include/protobuf/stubs/common.h""
</code></pre>

<p>I can fix it with a slight change:</p>

<pre><code> #include ""../google/include/protobuf/stubs/common.h""
</code></pre>

<p>but then that opens the flood gates to more include errors that I need to fix. Before it didn't have this issue. </p>
","0","9063338","",""
"31359469","4697660","2015-07-11 16:45:30","2","162","<git><workflow><version><git-submodules><trunk>","Workflow: git-repository with sub-modules to release","<p>My git project (a Wordpress-Plugin) contains some 3rd party submodules with extra files (language <code>.po</code> files, <code>/tests</code> folder, <code>coverage.cover</code>) that are not needed in release versions. </p>

<p>Is there a command/workflow that strips all of these files automatically for releases? </p>
","0","4697660","0","0"
"13844996","766548","2012-12-12 17:10:48","46","29154","<git><git-submodules>","git submodule init not pulling latest commit","<p>I have a git repo with a git submodule inside of it. The submodule is hosted on bitbucket. I want to update my local copy of the submodule to its latest commit. I tired ""<strong>git submodule update</strong>"" however that is not doing anything. So I tried deleting the submodule folder and then doing ""<strong>git submodule init</strong>"" However it simply pulls the initial submodule commit, not the latest.</p>

<p>How can I get my local submodule to update to the latest commit?</p>
","0","766548","0","0"
"13854066","1160887","2012-12-13 06:16:00","2","289","<git><version-control><development-environment><git-submodules><git-subtree>","How to track separate projects with same core files in git","<p>I use git version controll and I have multiple projects that uses same base directory, although some changes are made project specific.</p>

<p>Is there a way I could track with same git repo the superfolder (root/private/core in my case) and both public and private project specific directories aswell. 
Also, if I make changes in one project to core files, I would like that changes are made in other projects git repo aswell.</p>

<p>The way i have came up is to make a git repo in the root folder and then make branches for project, and not track other project files. But with this method I have to merge core changees in other projects and there is kind of a logic error aswell, because in this case branch would be used as project.</p>

<p>I have looked into submodules aswell, but that seems not to be the best solution aswell. If there is a solution that requires me to change my project directory system I am able to do it, although i would like to keep public, private and core directorys separately.  </p>

<p>Simplified example of my directory at the moment:</p>

<ul>
<li>root
<ul>
<li>private
<ul>
<li>core</li>
<li>projects
<ul>
<li>project1</li>
<li>project2</li>
</ul></li>
</ul></li>
<li>public
<ul>
<li>project1</li>
<li>project2 </li>
</ul></li>
</ul></li>
</ul>

<p>In private project folder there are core php extensions that are project specific and in public project folder is only stylesheets, javascript and index.</p>
","0","1160887","0","0"
"13864093","381384","2012-12-13 16:23:35","4","2744","<git><git-submodules><dotfiles>","How can you use submodules with git-managed dotfiles?","<p>I use a git repository to manage my dotfiles, and I'm having the hardest time getting submodules to work right (most of my .vim has a lot of external plugins)</p>

<p>I have an alias cgit to do (not sure if it's relevant)
    alias cgit='GIT_DIR=/home/myuser/.config-git GIT_WORK_TREE=/home/myuser/. git'""</p>

<p>So, I can pull the repository with cgit pull, but I can't get submodules to checkout/update:</p>

<pre><code>$ cgit submodule status
-9895285042a2fd5691b2f6582aa979e4d1bdffea .vim/bundle/ack
-e9267044261481fbb6717b482c2f3811eb61b409 .vim/bundle/command-t
&lt;snip&gt;
$ cgit submodule init
$ cgit submodule update
fatal: working tree '/home/myuser/.' already exists.
Clone of 'https://github.com/mileszs/ack.vim.git' into submodule path '.vim/bundle/ack' failed
$
</code></pre>

<p>I've tried removing that specific directory and trying again, and it just bombs. My .gitmodules doesn't have /home/myuser/. and my .config-git/config doesn't have any references to my home directory either, so I'm at a loss. If it helps, my version of git is 1.7.4.1</p>

<p>thanks!</p>

<p><strong>UPDATE</strong></p>

<p>It appears that first thing was a weird bug where git submodule wasn't accepting the environment variables (though other git commands were), but it required the command line arg be passed. Now, the clone works, it just complains (I fixed the ack config manually)</p>

<pre><code>Cloning into '.vim/bundle/command-t'...
remote: Counting objects: 2659, done.
remote: Compressing objects: 100% (1089/1089), done.
remote: Total 2659 (delta 1453), reused 2524 (delta 1325)
Receiving objects: 100% (2659/2659), 447.42 KiB, done.
Resolving deltas: 100% (1453/1453), done.
fatal: Could not chdir to '../../../../../../../nfs_mounts/home/myuser/.vim/bundle/command-t': No such file or directory
</code></pre>

<p>And if I look in ~/.config-git/modules/.vim/ack/config, I see:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    worktree = ../../../../../../../nfs_mounts/home/myuser/.vim/bundle/command-t
[remote ""origin""]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = https://github.com/wincent/Command-T.git
[branch ""master""]
    remote = origin
    merge = refs/heads/master
</code></pre>

<p>but if I 'ls' that worktree, it appears to be there. If I remove all the ../ , then try the git again it appears to work</p>
","1","381384","0","0"
"13865660","345918","2012-12-13 17:58:15","1","594","<git><git-submodules><git-subtree><sparse-checkout><pootle>","git sparsecheckout - how to pull into a different directory","<p>I'm using pootle to allow people to translate the .po files in a PHP Yii project.</p>

<p>Pootle can pull and push translations once a translator has updated the .po file.
Separately we have developers working on the site, who may also update the translation files to add more text to be translated.</p>

<p>Yii requires the .po files to be located in:</p>

<blockquote>
  <p>yii-project/protected/messages/en_gb/messages.po</p>
</blockquote>

<p>Pootle requires the directory structure to be:</p>

<blockquote>
  <p>pootle/yii-project/en_GB/messages.po</p>
</blockquote>

<p>In order for pootle to pull &amp; push, the .git directory needs to be in pootle/yii-project/.git.</p>

<p>I have tried using git sparse checkout, but that will pull the files into pootle/yii-project/protected/messages/en_gb/messages.po which unfortunately pootle does not pick up.</p>

<p>I can't do a pull of the repository elsewhere and then softlink, as then pootle will not be able to find the .git directory.</p>

<p>What I would really like to be able to do is a sparse checkout of a directory and map the result to another directory, i.e. checkout:</p>

<blockquote>
  <p>pootle/yii-project/protected/messages/ -> pootle/yii-project</p>
</blockquote>

<p>I don't want to use git-subtree, as I want the files to be able to be updated either by the developers or the translators.  I don't want to use submodules, as I don't like the extra pull overhead, and we would like the developers to include all changes to do with a new feature in a single commit (instead of one commit on the main project and one on the submodule).</p>

<p>Any suggestions?</p>
","3","345918","",""
"49169681","3518631","2018-03-08 09:32:10","1","33","<git><git-submodules>","How to handle external project in git reposiotry","<p>Here is scenario:</p>

<p>I'm working on some project where I use some library. I found a bug in library filled bug report but don't want to wait for library author to fix it.
I've looked in source code and found that I could add workaround which will work for me (but probably not for all people using this library).</p>

<p>I want to add this project (it's on github) to mine, fix a bug and when author will make official bugfix then replace it with library from package manager.</p>

<p>It looks like place to use <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow noreferrer"">git submodules</a> but how to pass fix to co-workers without pushing change to original repo?</p>
","3","3518631","",""
"49169946","1014479","2018-03-08 09:43:28","0","49","<git><git-submodules>","How to find commits of git submodules for specific commit of root repo?","<p>The question is: How to find commits of each submodule of git repo recorded in some specific commit (without checking this commit out).</p>

<p>I know, that for the working copy I can use</p>

<pre><code>git ls-files --stage
</code></pre>

<p>which would give me (among other things) commits recorded for each submodule.</p>

<p>The problem is that I want to see this information for the commit in the root repo, which is not checked out.</p>

<hr>

<p>For those, who are interested, the question comes from the need to merge branches in the repo with lots of submodules. Funny enough, this question is not extensively covered in the internet (or I cannot use google).</p>

<p>Let's say, I have two branches in the root repo: <code>branch_a</code> and <code>branch_b</code>. And I want to merge <em>some</em> <em>commit</em> from <code>branch_b</code> into <code>branch_a</code>. To be specific, let's say, that I want to merge the commit with hash <code>bbb123</code>.</p>

<ul>
<li>For this I need to find out, which commits were recorded in the <code>branch_b</code> of the root repo in commit <code>bbb123</code> for each submodule. [Exactly for this I need the answer to my question]. </li>
<li>Now I should check, if these commits of submodules differ from the commits of corresponding submodule recorded in <code>branch_a</code>, where I want to merge.</li>
<li>If commits are the same, then I should do nothing, but if the commits are different, then I should merge corresponding commit of submodule (recorded in <code>branch_b</code>) into the same submodule it it's sate in <code>branch_a</code>.</li>
<li>After it is done for all submodules, I can merge the root repos. Git will propose me then to use newly created merge-comits of submodules as resolution of conflicts. [If fact I could first start merge in root repos, then submodules with different comments would be reported as conflicts, which I would need to resolve by merging submodules.]</li>
</ul>

<p>Probably I over-complicate. If someone knows simpler way of doing it, I'd appreciate it also...</p>
","2","1014479","",""
"66801014","4443027","2021-03-25 13:57:18","1","190","<linux><bash><git><git-submodules>","Environment variable causing git submodule to fail","<p>When building a project with a simple script I ran into a strange failure when running trying to checkout the submodule (<code>git submodule update --init --recursive</code>)</p>
<p>I source a few environment variables from a script, <code>env.sh</code></p>
<pre class=""lang-sh prettyprint-override""><code>export jobs=`grep -c processor /proc/cpuinfo`                                                                                                                                                                                                                 
export build_dir=...                                                                                                                                                                                                                                          
export source_dir=...                                                                                                                                                                                                                                         
export CC=...                                                                                                                                                                                                                                                 
export CXX=...                                                                                                                                                                                                                                                
export FC=..
</code></pre>
<p>I then install my project with the following script, <code>build.sh</code>:</p>
<pre class=""lang-sh prettyprint-override""><code>#!/bin/bash

source env.sh                                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                              
function build() {                                                                                                                                                                                                                                            
        
  git clone &lt;REPO_URL&gt; .
  git submodule update --init --recursive  
  mkdir bld                                                                                                                                                                                                                                                  
  cd bld                                                                                                                                                                                                                                                      
  cmake ${source_dir}                                                                                                                                                                                                                                         
        -DCMAKE_C_COMPILER=${CC} \                                                                                                                                                                                                                            
        -DCMAKE_CXX_COMPILER=${CXX} \                                                                                                                                                                                                                         
        -DCMAKE_Fortran_COMPILER=${FC} \                                                                                                                                                                                                                      
        -DCMAKE_INSTALL_PREFIX=${install_dir} \                                                                                                                                                                                                               
  make -j${jobs}                                                                                                                                                                                                                                              
  make install                                                                                                                                                                                                                                                
}                  

</code></pre>
<p>This script exits with the failure</p>
<pre><code>error: pathspec '4' did not match any file(s) known to git
</code></pre>
<p>But when I run the same submodule command in my terminal it is successful</p>
","0","4443027","",""
"49191565","551625","2018-03-09 10:23:05","30","23779","<git><windows-10><gitlab><git-submodules><git-for-windows>","git clone works; git submodule fails ""Permission denied""","<p>On a private repository from gitlab, when I run <code>git clone git@git.privateserver.local:group/project-submodule.git</code> the clone completes successfully.<br>
As part of the cloning process, <strong>I'm asked</strong> for the passphrase of my private key.</p>

<p>When I run
<code>submodule update --init ""group/project-submodule""</code><br>
It fails with:  </p>

<blockquote>
  <p>Permission denied, please try again.
  Permission denied, please try again.
  Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
  fatal: Could not read from remote repository.</p>
</blockquote>

<p>While trying to process the submodule getting, <strong>I'm not asked</strong> for the passphrase for my private key.</p>

<p>(I had to anonymize it)</p>

<blockquote>
  <p>fatal: clone of 'git@git.privateserver.local:group/project-submodule.git' into submodule path 'C:/Users/user/repos/project-module/project-submodule' failed</p>
</blockquote>

<p>I've checked the <code>.gitmodules</code> file and it contains the right data (I think it can be confirmed by the error message).</p>

<p>The main element that calls my attention is that I'm not asked for my private key passphrase. Even weirder because, when I use <code>git clone</code> directly, it runs as expected.</p>

<p>I also already diagnosed by accessing with <code>ssh</code> and it asks me for the passphrase just like it happens when I execute a pull or a clone</p>

<p>Using git for windows ""git version 2.16.2.windows.1""</p>
","0","551625","0","0"
"31790481","5132539","2015-08-03 14:54:23","15","5765","<git><git-submodules>","How to do git submodules and why to use git submodules","<p>I have found a GitHub project and it uses git submodules.</p>
<p>What is the usage of git submodules?</p>
<p>How to create git submodules?</p>
<p>How do they differ from subtree?</p>
<p><a href=""https://i.stack.imgur.com/R7qr8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/R7qr8.png"" alt=""GitSubModule"" /></a></p>
","6","5132539","0","0"
"49199143","615217","2018-03-09 17:31:31","2","1333","<git><android-studio><git-submodules>","Android Studio syncs git submodules across projects","<p>I have a main project that includes several other GIT projects as submodules. All projects are branched after git-flow. The main project always uses the <code>master</code> branch of the submodules. New features within the submodules are developed inside a separate IDE window in the <code>develop</code> or <code>feature</code> branches.</p>

<p>The problems begin if I open both the main project and a submodule in different windows of AndroidStudio. The IDE seems to recognize that the submodule of the main project's window is the same repository as the module opened in the other window and starts to keep the checked out commit in sync. Example:</p>

<ol>
<li>I open the main project with submodule A checked out on the last commit of <code>master</code> branch.</li>
<li>I open the module A project in a new IDE window checked out on the last commit of the <code>develop</code> branch.</li>
<li>I checkout a different commit in the submodule project's window.</li>
<li>The submodule within the main project is automatically updated to the commit of step 3. Git shows that the submodule commit has changed.</li>
<li>I change the branch of the main project's submodule back to <code>master</code>. The git change disappears, but the module A is also checked out on the <code>master</code> branch in its own IDE window.</li>
</ol>

<p>This prevents me from opening both the module and the main project in AndroidStudio simultaneously.</p>

<p>I've checked the following while trying to find the cause of this bug:</p>

<ul>
<li>The main project's submodule folder and the folder of the module project are not at the same location.</li>
<li>Git is not the cause. I've closed the IDE and checked out different commits via the Git-CLI. The commits stay different across both projects.</li>
<li>Once both projects are open inside AndroidStudio it does not matter how I change the commit (IDE built-in Git-UI, IDE built-in terminal + Git CLI, External terminal + Git CLI). The commits start syncing once I check out a different commit.</li>
<li>The IDE uses the system's Git binaries.</li>
</ul>

<p>Is this a bug or a feature? If the latter, is there a way to disable it?</p>
","0","615217","",""
"66809270","11576118","2021-03-26 00:08:40","2","1080","<python><git><pytest><git-submodules><python-3.8>","How do I ignore a conftest.py file at the root of a git submodule (e.g. submodule/conftest.py) when running pytest on the parent project?","<h2>Question</h2>
<p>How can I tell pytest to ignore <strong>all test files including conftest.py</strong> within a repository's git submodule as these tests and files are irrelevant to the parent repository's test suite?</p>
<h2>Background</h2>
<p>I have a number of git submodules in my project which house their own self contained testing configurations.</p>
<p>When I try to use pytest in the &quot;parent&quot; repository, I am getting this error because pytest is collecting the conftest.py files within my submodules.</p>
<pre><code>&gt;pytest
=================================================== ERRORS =================================================== 
_______________________________________ ERROR collecting test session ________________________________________ 
Defining 'pytest_plugins' in a non-top-level conftest is no longer supported:
It affects the entire test suite instead of just below the conftest as expected.
  C:\Users\user\git\project\submodule\conftest.py
Please move it to a top level conftest file at the rootdir:
  C:\Users\user\git\project
For more information, visit:
  https://docs.pytest.org/en/latest/deprecations.html#pytest-plugins-in-non-top-level-conftest-files
========================================== short test summary info =========================================== ERROR
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ============================================== 1 error in 0.45s ==============================================
</code></pre>
<p>My &quot;parent&quot; git repository structure looks like:</p>
<pre><code>./.git
./project1/__main__.py
./project1/__init__.py
./project1/other_stuff/
./test/
./conftest.py
./setup.cfg
./submodule/.git
./submodule/project2/__main__.py
./submodule/project2/__init__.py
./submodule/project2/other_stuff/
./submodule/conftest.py
./submodule/setup.cfg
./submodule/test/
</code></pre>
<p>One (cumbersome) option may be to only run pytest with uninitialized submodules. However, if I do not initialize the git submodules then I cannot run integration tests with those libraries.</p>
","0","11576118","0","0"
"49239868","3830058","2018-03-12 16:16:23","-1","664","<c><git><git-submodules><autotools>","Best practices for C project git submodule building","<p>I have a C project using autotools and make to build my project. I need to use code that as far as I can tell is only available on github. What is the best practice for including this code in my project? How would I do it?</p>

<p><a href=""https://github.com/bitcoin-core/secp256k1"" rel=""nofollow noreferrer"">This is the code I want to use</a></p>
","3","3830058","",""
"31542745","371970","2015-07-21 15:01:33","1","22","<git><git-submodules>","Synchronize working directories in git submodule used in several repos","<p>Suppose I have git repositories named <code>common</code>, <code>projectA</code>, <code>projectB</code>. Both <code>projectA</code> and <code>projectB</code> use <code>common</code> as a submodule.</p>

<p>When I make changes in <code>common</code>, however, only one <code>common</code> ""instance"" is being changed: either the one contained in <code>projectA</code>/<code>projectB</code> as a submodule, or the one cloned as a whole repository.</p>

<p>If I want to make changes, I have to commit to <code>common</code> first, push the changes, and then update submodules in <code>projectA</code> and <code>projectB</code>.</p>

<p>The problem is, I want to test changes that I'm making to <code>common</code> before commiting. And in order to do that, I have to test it with both <code>projectA</code> and <code>projectB</code>. I could theoretically commit them to some temporary branch, but it will clutter the history.</p>

<p>I want to make changes in <code>common</code>'s working directory in the way so these changes will be visible in <code>projectA</code> and <code>projectB</code> immediately.</p>
","0","371970","",""
"48253982","1938118","2018-01-14 20:44:51","1","1079","<git><git-submodules>","How do I get git submodule changes from parent to child repository?","<p>I have a project repo (the parent) that contains a submodule (the child).</p>

<p>While working in the parent, I have made changes to the files of the child. I've committed those changes in the parent.</p>

<p>How do I get those changes back over to the child?</p>
","0","1938118","0","0"
"3131912","1288364","2010-06-28 11:26:18","14","7959","<svn><git><git-svn><git-submodules><svn-externals>","Why are git submodules incompatible with svn externals?","<p>There are lots of webpages out there suggesting <a href=""http://fredericiana.com/2010/01/12/using-svn-repositories-as-git-submodules/"" rel=""nofollow noreferrer"">hackish ways to make svn externals look like git submodules</a>. I have read <a href=""https://stackoverflow.com/questions/571232/svn-external-in-git"">some accounts</a> of what the difference is, but this doesn't seem very fundamental:</p>

<blockquote>
  <p>Git submodules link to a particular commit in another project's repository, while svn:externals always fetch the latest revision.</p>
</blockquote>

<p><strong>Why does this difference make them so fundamentally incompatible?</strong> Isn't there a reasonable default we can assume, such as that most svn:externals point to tags that never move?</p>
","1","1288364","0","0"
"31566773","2125669","2015-07-22 14:55:39","7","5722","<c++><git><cmake><git-submodules>","C++ with git and CMake: How to build submodules with specific parameters?","<p>Consider a C++ project, organized in a git repository. Assume that the git repository has a submodule from which a library is built on which the (super)project depends. If the (super)project depends not only on the library but on the library built with specific (CMake) parameters, how can it be ensured that the submodule is built with these parameters when the (super)project is built?</p>
","4","2125669","0","0"
"3158597","248874","2010-07-01 14:13:11","63","41352","<git><git-submodules>","How can I add a specific folder from a git repo as a git submodule?","<p>I have a git repo and I want to add a submodule to it. Problem is, the submodule exists as a folder inside another repo. Can I add only that folder as a submodule?</p>
","1","248874","0","0"
"41001174","4127646","2016-12-06 17:17:22","2","68","<git><dependencies><repository><git-submodules>","How to part out an existing codebase to git submodules","<p>I am in the process of converting all of my old usable code into git repositories.  This is both a tactical and strategic question.</p>

<p>So I have created a new blank repo on Github called HomeBase (it is private right now).  I then did a <code>git clone</code> to pull this blank repo to my local.</p>

<p>I then copied in all the files from my ""Home Base"" PHP project for a client into that folder, cleaned it up some, committed it using SourceTree, and pushed to master on Github.</p>

<p>Now, I want to take certain subfolders in the project (which are used identically in several projects), and turn them into submodules and independent git repos (again, they are used identically by other projects so they are basically 'third party libraries').  The subfolders contain anything from PHP utility tools to javascript libraries.</p>

<p>My question is how to remove these subfolders from the HomeBase repo, create new repos and populate with the respective files, and then re-link them to the HomeBase repo.  I need and appreciate help with both specific steps as well as strategy on this.  Thanks.</p>
","1","4127646","",""
"3300626","212376","2010-07-21 14:56:42","2","825","<git><migration><git-svn><git-submodules><git-filter-branch>","How to modify git repository to add submodules in ALL the past revisions?","<p>I migrated my SVN repository successfully with Tags into Git using <code>git svn-clone</code>. However, <code>git svn-clone</code> does not migrate <code>svn:externals</code>. Hence, I decided to modify branch tree using <code>git filter-branch</code>.</p>

<p>For <code>svn:externals</code>, first I created a separate Git repository for each svn:externals and then I tried using the following, but it didn't work.</p>

<pre><code>$ git filter-branch --tree-filter ""git submodule add git@github.com:myAcc/mySubmodule.git mySubmodule"" HEAD
Rewrite a013a219e4294d4ee66b323cf1db9c170d90130a (1/4)fatal: working tree '.' already exists.
Clone of 'git@github.com:myAcc/mySubmodule.git' into submodule path 'common' failed
tree filter failed: git submodule add git@github.com:myAcc/mySubmodule.git mySubmodule
rm: cannot remove `c:/myRepo/.git-rewrite/revs': Permission denied
rm: cannot remove directory `c:/myRepo/.git-rewrite': Directory not empty
</code></pre>

<p>Any idea how to accomplish this? Thanks a lot in advance.</p>
","2","212376","0","0"
"49374797","2244907","2018-03-20 01:00:09","1","153","<github><git-submodules><git-subtree><git>","How to include git submodules and their physical files in parent repository?","<p>The story starts from a git repository. Let's call it pet-shop.
The pet-shop has 2 folders containing different projects.</p>

<pre><code>--pet-shop          &lt;== this is a repository
  --web             &lt;== subfolder angular project
  --rest-api        &lt;== subfolder python project
</code></pre>

<p>Due to within the same git repository, there is an issue that when developers commit changes to either <strong>pet-shop/web</strong> or <strong>pet-shop/rest-api</strong> the history logged to pet-shop. This makes no sense. Like as someone working within <strong>web</strong>, he/she doesn't need to know what's happend in <strong>rest-api</strong>.</p>

<p>Therefore, I was trying to split them out. I noticed git submodule feature.
After spending an hour on googling. It now ends up 3 git-repositories.</p>

<pre><code>--pet-shop                            &lt;==== this is a git repository
  --web @9se5082                      &lt;==== refer to git repo pet-shop-web
  --rest-api @defs02d                 &lt;==== refer to git repo pet-shop-rest-api


--pet-shop-web                        &lt;==== this is a new git repository


--pet-shop-rest-api                   &lt;==== this is another new git repository
</code></pre>

<p>This meets the initial requirement now. I could commit changes separately.</p>

<p>Logically they are connected; Physically they are stored respectively.</p>

<blockquote>
  <p>My question now is, the way of doing this consumes 3 git repositories, could it be done by 1 repository? </p>
</blockquote>
","1","2244907","",""
"41150832","745250","2016-12-14 19:40:28","10","1466","<git><git-merge><git-submodules>","Equivalent of git checkout ours/theirs for submodules","<p>When resolving a conflict in a file I can</p>

<pre><code>git checkout --ours filename
</code></pre>

<p>and then commit the file. This will resolve the conflict. However,</p>

<pre><code>git checkout --ours submodule
</code></pre>

<p>doesn't seem to work. The reference commit for the submodule doesn't change.</p>

<p>What would be the equivalent of <code>git checkout --ours filename</code> when resolving conflicts in submodule references?</p>
","1","745250","0","0"
"66985343","9895995","2021-04-07 11:41:03","0","50","<git><gitlab><git-submodules><git-clone>","How can a git-submodule be published and cloned?","<p>I created a git repository, where I store everything for a project. The project is private, but part of it will be published. Therefore, I created a submodule inside the repo, that I want to publish exclusively. This brought up certain questions:</p>
<ol>
<li>Can a submodule be exclusively cloned and published? If yes, how? If not, what would be the alternative?</li>
<li>Where can I find the URL online on Gitlab for the submodule (not the complete repo)?</li>
</ol>
<p>I hope you can help me, thanks!</p>
","2","9895995","",""
"49449396","3905763","2018-03-23 12:11:27","0","66","<git><git-submodules>","How to disable submodules functionality for git repo with nested git repos?","<p>I have following repo structure:</p>

<pre><code>/repo
  .git/
  subrepo1/
    .git/
    ...
  dir/
    subrepo2/
      .git/
      ...
  ...
  subrepoN/
    .git/
    ...
</code></pre>

<p><code>subrepo</code>s are updated externally, but don't necessarily have a remote. <code>repo</code>'s purpose is to track all <code>subrepo</code>'s updates and introduce new changes in a single place. Updates will form a ""vanilla"" branch inside <code>repo</code>, which then will be periodically merged to ""dev"" branch. That's the intended workflow. Git by default refuses to track <code>subrepo</code>'s files, assuming they are non-configured submodules.</p>

<p>Questions is how do I disable such behaviour? I don't want to use submodules. I want Git to stop treating <code>subrepo</code>s as submodules, ignore every <code>subrepo</code>'s <code>.git</code> directory while keeping it, and to track all files from <code>subrepo</code>s. Preferably in <code>repo</code>'s <code>.git/config</code> file.</p>

<p>I looked through git manual, tried various things and couldn't acheive this. There is a valueable <a href=""http://debuggable.com/posts/git-fake-submodules:4b563ee4-f3cc-4061-967e-0e48cbdd56cb"" rel=""nofollow noreferrer"">workaround</a>, but it still requires to execute <code>git add &lt;subrepo-path&gt;/</code> for each <code>subrepo</code>. Subtree approach isn't desireable, because it seemingly doubles space consumed and adds complexity.</p>
","0","3905763","",""
"14326187","649419","2013-01-14 20:33:35","1","921","<git><jenkins><continuous-integration><hudson><git-submodules>","What is the best practice using git and hudson with one repository including multiple projects","<p>I have raised a similar question before yet after doing some research and bashing my head for a long time , I have concluded that I need some more guidance.</p>

<p>We have currently migrated to GIT from SVN and biggest impact was to our CI Server. Since you can't checkout sub-directories in GIT.</p>

<p>Our repository consists of multiple projects and we like to keep it that way , because every developer creates its own story branch and merges with the main branch after he is done with the story. </p>

<p>On the other hand we can't manage to configure Hudson or Jenkins with our git repository so that we can create separate tasks for each of our subfolders which corresponds to separate maven projects.</p>

<p>I know its advised to use submodules yet , If we configure each maven project as a submodule our sub-branching won't be in the way that we want to be.</p>

<p>It kinda feels like that it should be possible to configure in such way that but couldn't achieved any progress so far.</p>

<p>What is it advised that we should do in such situation?</p>
","2","649419","0","0"
"66994738","4258782","2021-04-07 22:06:13","1","19","<github><git-submodules>","How do I keep a synced copy of a file from a github submodule","<p>If I make a new github repo and add this as a recursive updated submodule <a href=""https://github.com/Fyrd/caniuse/tree/42683d2cbec309750a30ce5d055b12937b9fd2f7"" rel=""nofollow noreferrer"">https://github.com/Fyrd/caniuse/tree/42683d2cbec309750a30ce5d055b12937b9fd2f7</a>, how do I bring a copy of the data.json file into my repo that stays fully synchronized with any changes made in the repo?</p>
","0","4258782","0","0"
"14723589","777318","2013-02-06 07:17:24","3","1431","<git><vim><git-submodules><vim-plugin>","How to get Vim Ctrl-P plugin to index files inside a git submodule","<p>If I run Ctrl-P natively out of the box, it works 100% as I desire, except that with the size of the codebase I work with, it takes a very long time to index directories.</p>

<p>To make Ctrl-P cope with the project sizes I'm dealing with, I'm using the following (fairly popular) user_command setting in my .vimrc file to provide native helper-utilities to more quickly provide Ctrl-P with the list of files available:</p>

<pre><code>if has(""unix"")
    let g:ctrlp_user_command = {
    \ 'types': {
        \ 1: ['.git/', 'cd %s &amp;&amp; git ls-files']
    \ },
    \ 'fallback': 'find %s -type f | head -' . g:ctrlp_max_files
    \ }
endif
</code></pre>

<p>This approach makes indexing blazingly fast, but when configured this way Ctrl-P doesn't learn about the contents of git submodules the way that it did when running without helper programs (since 'git ls-files' doesn't recurse into submodules, while Ctrl-P's naive directory traversal does).</p>

<p>I've tried using 'find' to index git repositories as well, but when I do that I wind up indexing .git directories, object files, and all sorts of other things that Ctrl-P normally knows to ignore automatically;  seems like providing a user_command completely supersedes the built-in logic about which files to ignore.  I could probably hack together an inverse grep to remove certain elements, but it seemed like someone must have figured out a more elegant solution to this.</p>

<p>Is there another, perhaps cleverer way to get Ctrl-P to index all files within a git repository, including the files inside all its submodules, other than resorting to its slow built-in search?</p>
","1","777318","",""
"41391493","4405477","2016-12-30 06:11:35","0","589","<node.js><git><gulp><git-submodules>","Gulp and git submodules","<p>Is it possible to use gulp with git sub-modules that have their own gulp settings and npm modules?</p>

<p>This is the idea:</p>

<pre><code>/ Project
|- Modules
|-- Grid
|--- some files and subfolders
|--- gulpfile.js
|-- Typography
|--- some files and subfolders
|--- gulpfile.js
|
| gulpfile.js
</code></pre>

<p><code>Modules</code> are folder where I would like to keep unknown number of git sub-modules. Each of those git sub-modules would have their own gulpfile.js and NPM modules. </p>

<p>Question is - When I start gulp process from the root folder, is it possible for main gulpfile.js to start all other gulpfile.js files from included git sub-modules?  </p>
","2","4405477","",""
"50040185","9703007","2018-04-26 10:03:47","2","484","<git><jenkins><jenkins-pipeline><git-submodules>","Jenkins Build with git submodules","<p>I'm kinda new to Jenkins, I've done some work with it, but i am stumbling on question that i will explain right away:</p>

<p>Suppose i have the following folder structure:  </p>

<pre><code>&gt;Project_Folder  
&gt;&gt; FolderA  
&gt;&gt;&gt;FolderA.1

&gt;&gt; FolderB  
&gt;&gt;&gt; FolderB.1  
&gt;&gt;&gt; FolderB.2  

&gt;&gt; FolderC  
</code></pre>

<p><strong>FolderA.1</strong>, <strong>FolderB.1</strong> and <strong>FolderB.2</strong> have Visual Basic projects inside and i have then in <strong>different git submodules</strong>. (So, Project_Folder is the parent git repository).  </p>

<p><strong>FolderC</strong> has some shared files that are needed by all projects (A.1, B.1 and B.2) and <strong>is not</strong> a submodule, it's merely present in the parent repository.</p>

<p>I need those shared folder items to build the projects, but only cloning the submodule will not bring them attached, obviously.  </p>

<p>All the .vbp files have the path to the shared folder like <code>../../FolderC/shared_item.cls</code></p>

<p>In Jenkins, i wanted to add the individual submodules to different Pipelines, so that it would trigger when changes were made to that single repository. If i add the parent repo, it would be too inefficient since it would clone the entire repo and the specific submodule AND the job would be triggered every time a change was made to the parent instead of only to the child...</p>

<p><strong>Questions</strong>:  </p>

<pre><code>Is it possible to grab the shared folder and clone only the child submodule?  
</code></pre>

<p><strong>OR</strong>   </p>

<pre><code>Is it possible to clone the parent and a specific submodule, 
BUT trigger the Pipeline build ONLY when the submodule is updated and not the parent?  
</code></pre>

<p>What do you suggest me to do?<br>
Many Thanks!</p>
","2","9703007","",""
"14746765","2005821","2013-02-07 08:32:47","0","98","<git><git-branch><git-submodules><branching-and-merging>","forking git project for different OS","<p>I have an OSX app which I have build myself in python.  Like many OSX apps it has many (all?) of its dependencies within it.  eg...</p>

<pre><code>./git_repo
└── mac (dir)
    ├── myapp.app (dir)
    │   ├── Frameworks (dir)
    │   ├───MacOS (dir)
    │   ├───Resources (dir)
    │   │   ├──main.py
    │   │   ├──lib1.py
    │   │   ├──lib2.py
            ├─img(dir)
</code></pre>

<p>The directory structure is much larger than this, with many files in each dir, but you get the idea</p>

<p>My first fork will be for Linux, in which I need main.py,lib1.py,lib2.py and the img dir.  I need nothing else in the Resources dir, or any other dir.  I will also be adding Linux specific files which are not require for mac.  The overall dir structure will be much more flat than the mac structure.</p>

<p>After that I will be forking for Windows, with the files I've listed for Linux, and some Windows specific files not required for mac/linux.</p>

<p>I have read the similar threads here but I can't visualize how the overall directory structure will work.
I see a couple of options.</p>

<ol>
<li>Use separate git branches and merge/cherry-pick changes in when required (this may be difficult as the directory structure of all 3 will be completely different</li>
<li>Use git submodules - have been reading up about this, but not sure which components I should make submodules - the common items, or the extras?</li>
<li>use separate repositories - not sure if this is any different to branches</li>
</ol>

<p>Ultimately I just need to track changes for those main files for all 3 OSs whilst keeping the changes separate, and without having to take huge steps when working on a particular OS/branch (eg make file etc)</p>

<p>What is the best way of achieving this?
Thanks for reading</p>
","0","2005821","",""
"60117105","816458","2020-02-07 16:07:13","0","38","<git><git-submodules>","After converting folder to git submodule, how to easily switch between branches","<p>I recently converted a folder of my git repository to a submodule, as in <a href=""https://stackoverflow.com/questions/12514197/convert-a-git-folder-to-a-submodule-retrospectively"">this question</a>. The process works well for the master branch.</p>

<p>However, I've found that when switching to any other branch, I get the following error:
<code>The following untracked working tree files would be overwritten by checkout:</code>, listing all files in the converted folder. The only solution seems to be to manually move/delete the folder, and then switch branches. Once I've merged in the changes from master, this resolves, but I'll still need to switch to branches (or historical commits) where I won't be merging any time soon.</p>

<p>Is there any better way to do this? Or a better way to do the folder-to-submodule conversion that would not require this process?</p>

<p>My primary constraint is that I'd like to avoid rewriting history, since this is a repo shared by many others, who would then need to overwrite their local history. </p>
","3","816458","",""
"50052743","68532","2018-04-26 22:30:30","18","13233","<git><visual-studio><git-submodules>","submodules git visual studio ""fatal: unexpected sequence in commit output"" can they just checkin?","<p>Any reason why git submodules in Visual Studio 2017 just don't want to checkin?  I keep getting</p>
<blockquote>
<p>fatal: unexpected sequence in commit output</p>
</blockquote>
<p>Seems like sometimes they <strong>DO</strong> checkin, but most of the time they don't.  Am I misunderstanding something?</p>
<p><a href=""https://i.stack.imgur.com/gmfxU.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/gmfxU.png"" alt=""enter image description here"" /></a></p>
","1","68532","0","0"
"14768509","476310","2013-02-08 08:29:53","38","58332","<git><git-submodules>","Unable to checkout git submodule path","<p>I have a problem when working with git submodules.</p>

<p>Whenever i receive a new submodule reference from the upstream repository, executing <code>git submodule update</code> gives the following result:</p>

<pre><code>fatal: reference is not a tree: dd208d46ecdd1ac0d2b2594a610fe4c9150fece1
Unable to checkout 'dd208d46ecdd1ac0d2b2594a610fe4c9150fece1' in submodule path 'submodule/path'
</code></pre>

<p>It is important to note that the submodule has several remotes, of which the upstream remote should be used to update the submodule reference tree. I'm guessing that my problem is there, but i am not sure.</p>

<p>My setup is the following:</p>

<p><strong>Git project</strong></p>

<p>Remotes:</p>

<ol>
<li><code>origin</code> (my git fork)</li>
<li><code>upstream</code> (project repo)</li>
</ol>

<p>Submodule ""module"", has remotes:</p>

<ol>
<li><code>origin</code> (my git fork)</li>
<li><code>upstream</code> (project repo)</li>
</ol>

<p>Does anyone know what is causing my problem?</p>
","0","476310","0","0"
"3796927","","2010-09-26 07:13:25","2588","1417202","<git><git-submodules>","How do I ""git clone"" a repo, including its submodules?","<p>How do I clone a git repository so that it also clones its submodules?</p>
<p>Running <code>git clone $REPO_URL</code> merely creates empty submodule directories.</p>
","9","","0","0"
"48936752","1936237","2018-02-22 20:37:54","2","957","<git><git-submodules><git-remote><git-bare>","Git: Push a local git submodule, including submodule files, to a remote bare repository","<p>I have two local projects which I manage with <code>git</code>, one being dependent on the other – like this:</p>

<pre><code>project A/
├── project B/     
│   ├── file B₁
│   ├── file B₂
│   ├── …
</code></pre>

<p>It makes sense to me to have <code>project B</code> as a git submodule of <code>project A</code>.</p>

<p>Now, I have set up a remote <em>bare</em> repository for <code>project A</code> for backup and sharing purposes. Of course, I want the remote repository to contain all of <code>project B</code>, including its files (<code>file B₁</code>, <code>file B₂</code>, …). But <code>git push</code> and <code>git push --recurse-submodules=on-demand</code> don’t achieve this. Whenever I list the files in my remote repository by <code>git ls-tree -r HEAD</code>, only the files of <code>project A</code> itself are listed. This <em>does</em> make sense to me.</p>

<p>However, is there a way to push the entire submodule <code>project B</code> to my remote base repository somehow, preferably in a clean way?</p>
","0","1936237","0","0"
"49468497","6094393","2018-03-24 18:43:38","0","45","<git><github><git-submodules>","Complex github Structure","<p>So I have my main repository and as a <code>backend</code> I want to add submodules which are repositories I don't have write access to. However I want to be able to keep on pulling from the mainstream. </p>

<p>I want to add a plugin to one of those <code>backends</code> that reside as a submodule, and to do that the plugin code must be placed inside the <code>backends/foo/src/</code> directory of my submodule. At the same time I want to keep my <code>backends/foo/src/plugin</code> as a part of my main repo.</p>

<p>Is there a way to do that with <code>github</code> ?</p>
","2","6094393","",""
"49478113","1003423","2018-03-25 16:26:39","2","1114","<git><git-submodules>","git - multiple .gitmodules files","<p>Within my git repository I added a third party library as a submodule to a dedicated sub folder '/Workspace/Common/Lib/External'. Therefore on repository root level there exists one '.gitmodules' file with all required information. </p>

<p>Now I noticed that the library itself also uses a submodule. Therefore a second '.gitmodules' file is located at '/Workspace/Common/Lib/External' level.</p>

<p>From my point of view only the root level '.gitmodules' file is used by git. So it is unclear for me how to handle multiple '.gitmodules' files. Is it required to add the libraries submodule to my repository per hand (git submodule add...) or is there some .gitmodules merge functionality available ?</p>
","0","1003423","",""
"22469174","999973","2014-03-18 02:15:20","0","837","<git><github><git-submodules>","Unable to add a directory to git repo","<p>I want to collect some dot files in one folder and keep it on GitHub.</p>

<p>So, <code>dotfiles</code> directory for me is <code>.vim</code>.</p>

<p>I moved <code>.xmonad</code> folder there as well. But unfortunately, when I wanted to copy my environment to other computer, I realized that <code>.vim/xmonad/</code> is empty in my GitHub repo.</p>

<p><code>git add xmonad</code> doesn't do anything.</p>

<p><code>git add xmonad/*</code> gives the following error:</p>

<p>fatal: Path 'xmonad/get-volume' is in submodule 'xmonad'</p>

<p>Per this thread (<a href=""https://stackoverflow.com/questions/1084969/unable-to-track-files-within-git-submodules"">Unable to track files within Git submodules</a>), I checked my submodules, deleted .git file from xmonad directory, but nothing helps.</p>

<pre><code>bv@ln:~$ cd .vim
bv@ln:~/.vim$ ll -a
total 76
drwxrwxr-x  6 bv bv  4096 Mar 18 06:48 ./
drwxr-xr-x 97 bv bv  4096 Mar 18 07:01 ../
drwxrwxr-x  2 bv bv  4096 Nov  4 17:48 autoload/
-rw-rw-r--  1 bv bv   170 Jan 15 12:14 bash_profile
-rw-r--r--  1 bv bv  3868 Jan 15 15:40 bashrc
drwxrwxr-x 19 bv bv  4096 Feb  6 17:32 bundle/
drwxrwxr-x  9 bv bv  4096 Mar 18 07:00 .git/
-rw-rw-r--  1 bv bv    99 Mar 18 06:46 .gitignore
-rw-rw-r--  1 bv bv  1177 Dec 19 12:26 .gitmodules
-rw-rw-r--  1 bv bv   509 Jan 16 19:02 .netrwhist
-rw-rw-r--  1 bv bv 10710 Feb  6 18:16 README.md
-rw-rw-r--  1 bv bv  1243 Dec 20 16:21 tmux.conf
-rw-rw-r--  1 bv bv 10139 Jan 21 13:22 vimrc
drwxr-xr-x  3 bv bv  4096 Mar 18 06:43 xmonad/
-rw-rw-r--  1 bv bv   377 Jan 23 15:44 xsessionrc
bv@ln:~/.vim$ cat .git/config 
[core]
repositoryformatversion = 0
filemode = true
bare = false
logallrefupdates = true
[remote ""origin""]
url = git@github.com:bv/vim_pathogen.git
fetch = +refs/heads/*:refs/remotes/origin/*
                     [submodule ""bundle/command-t""]
                     url = git://git.wincent.com/command-t.git
                     [submodule ""bundle/nerdtree""]
                     url = https://github.com/scrooloose/nerdtree.git
                     [submodule ""bundle/delmitmate""]
                     url = git://github.com/Raimondi/delimitMate.git
                     [submodule ""bundle/tcomment""]
                     url = https://github.com/tomtom/tcomment_vim
                     [submodule ""bundle/vim-colors-solarized""]
                     url = git://github.com/altercation/vim-colors-solarized.git
                     [submodule ""bundle/tagbar""]
                     url = git://github.com/majutsushi/tagbar.git
                     [submodule ""bundle/fugitive""]
                     url = git://github.com/tpope/vim-fugitive.git
                     [submodule ""bundle/vim-unimpaired""]
                     url = git://github.com/tpope/vim-unimpaired.git
                     [submodule ""bundle/vim-instant-markdown""]
                     url = https://github.com/suan/vim-instant-markdown
                     [submodule ""vim-css-color""]
                     url = git@github.com:ap/vim-css-color.git
                     [submodule ""bundle/ctrlp""]
                     url = https://github.com/kien/ctrlp.vim.git
                     bv@ln:~/.vim$ find . -name "".git*""
                     ./bundle/vim-colors-solarized/.git
                     ./bundle/indentLine/.gitattributes
                     ./bundle/indentLine/.gitignore
                     ./bundle/indentLine/.git
                     ./bundle/tcomment/.gitignore
                     ./bundle/tcomment/.git
                     ./bundle/vim-rails/.gitignore
                     ./bundle/vim-rails/.git
                     ./bundle/vim-unimpaired/.gitignore
                     ./bundle/vim-unimpaired/.git
                     ./bundle/nerdtree/.gitignore
                     ./bundle/nerdtree/.git
                     ./bundle/vim-surround/.gitignore
                     ./bundle/vim-surround/.git
                     ./bundle/delmitmate/.gitignore
                     ./bundle/delmitmate/.git
                     ./bundle/tagbar/.gitattributes
                     ./bundle/tagbar/.gitignore
                     ./bundle/tagbar/.git
                     ./bundle/ctrlp/.gitignore
                     ./bundle/ctrlp/.git
                     ./bundle/fugitive/.gitignore
                     ./bundle/fugitive/.git
                     ./bundle/vim-slim/.git
                     ./bundle/vim-instant-markdown/.git
                     ./bundle/vim-bundler/.gitignore
                     ./bundle/vim-bundler/.git
                     ./bundle/command-t/doc/.gitignore
                     ./bundle/command-t/.gitattributes
                     ./bundle/command-t/.gitmodules
                     ./bundle/command-t/.gitignore
                     ./bundle/command-t/ruby/command-t/.gitignore
                     ./bundle/command-t/.git
                     ./.gitmodules
                     ./.gitignore
                     ./.git
                     bv@ln:~/.vim$ cat .gitmodules 
                     [submodule ""bundle/command-t""]
                     path = bundle/command-t
                     url = git://git.wincent.com/command-t.git
                     [submodule ""bundle/nerdtree""]
                     path = bundle/nerdtree
                     url = https://github.com/scrooloose/nerdtree.git
                     [submodule ""bundle/delmitmate""]
                     path = bundle/delmitmate
                     url = git://github.com/Raimondi/delimitMate.git
                     [submodule ""bundle/tcomment""]
path = bundle/tcomment
url = https://github.com/tomtom/tcomment_vim
[submodule ""bundle/vim-colors-solarized""]
path = bundle/vim-colors-solarized
url = git://github.com/altercation/vim-colors-solarized.git
[submodule ""bundle/tagbar""]
path = bundle/tagbar
url = git://github.com/majutsushi/tagbar.git
[submodule ""bundle/fugitive""]
path = bundle/fugitive
url = git://github.com/tpope/vim-fugitive.git
[submodule ""bundle/vim-unimpaired""]
path = bundle/vim-unimpaired
url = git://github.com/tpope/vim-unimpaired.git
[submodule ""bundle/vim-instant-markdown""]
path = bundle/vim-instant-markdown
url = https://github.com/suan/vim-instant-markdown
[submodule ""vim-css-color""]
path = vim-css-color
url = git@github.com:ap/vim-css-color.git
[submodule ""bundle/ctrlp""]
path = bundle/ctrlp
url = https://github.com/kien/ctrlp.vim.git
bv@ln:~/.vim$ git add xmonad/
bv@ln:~/.vim$ git st
# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
# modified:   bundle/indentLine (untracked content)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
bv@ln:~/.vim$
</code></pre>

<p>Thank you a lot!</p>
","0","999973","",""
"22590249","1258945","2014-03-23 11:26:29","3","902","<git><local><directory><git-submodules>","How can I add a git submodule with the same name as an old, deleted git directory?","<p>I'm trying to turn a directory into a submodule and effectively turn the thing into a git superproject/project with specialized submodules inside.  I have a ""built"" directory (necessary for what I'm making, as some of the dependencies are closed-source and therefore not in the git repo, meaning that some people can't build their own version), but I want to turn it into a separate repo placed in the same location as before.  That is, instead of being <code>/built</code> as a directory tracked by the repo, I want it to be <code>/built</code> as a submodule tracked by a different repo.</p>

<p>However, when I try deleting <code>/built</code>, committing that, and executing <code>git submodule add BUILT_REPO_URL built</code>, I get:</p>

<pre><code>A git directory for 'built' is found locally with remote(s):
  origin        BUILT_REPO_URL
If you want to reuse this local git directory instead of cloning again from
  BUILT_REPO_URL
use the '--force' option. If the local git directory is not the correct repo
or you are unsure what this means choose another name with the '--name' option.
</code></pre>

<p>(I have substituted BUILT_REPO_URL for the appropriate git repository hosting URL.)</p>

<p>I don't want to rename the directory because that seems odd and I have build scripts and whatnot that I'd have to change.  Besides, there are other directories I want to do this to as well, and they have a fairly set directory structure based on the framework I'm using.  I've tried removing files from the cache (didn't have them there) and other similar steps.  The problem is also un-Googleable, since all the results I've found have been for changing a submodule to a different submodule with the same directory name.</p>
","0","1258945","0","0"
"3983829","143397","2010-10-21 02:18:09","47","22759","<git><diff><git-submodules>","How can I get a git submodule's associated commit ID from a past commit in the parent clone?","<p>Is there a way, short of actually checking out the parent commit, to determine a submodule's SHA-1 commit ID based on a commit ID in the parent clone? I know I can find the <em>currently</em> associated SHA-1 with <code>git submodule</code>.</p>

<p>Here's an example: </p>

<ul>
<li>I have a clone with a single submodule <code>foo</code> that has changed several times in the last month. </li>
<li>I have a tag in the parent clone that is a few weeks old called <code>released-1.2.3</code>. I want to find out what the associated SHA-1 of <code>foo</code> was for this tagged commit. </li>
<li>I could simply check out <code>released-1.2.3</code> and use <code>git submodule</code> to see, but I'm wondering if there's a way to do this <em>without</em> affecting the working tree, as I want to script it.</li>
</ul>

<p>I want to do this because I want to construct a script to do a 'diff' on all changes within a submodule between two commits within the parent repository - i.e. ""tell me what files changed within the submodule <code>foo</code> between these two commits in the parent.""</p>
","0","143397","0","0"
"60275144","2762170","2020-02-18 06:39:07","3","3432","<git><go><git-submodules>","Where to keep git submodules inside of a go project?","<p>I want to add a submodule to my go project. </p>

<p>The submodule will contain some <code>.proto</code> files and some go files. I will use protos to generate grpc-gateway files using my Makefile, which will have the same package as the go files in the repo. The repo which contains these protos is not mine, and others are developing it. I won't commit these gateway files generated. </p>

<p>Is there any specific structure for such files in golang projects? Should I keep them in pkg directory?</p>

<p>I have three folders of build, configs, templates currently in my project.</p>
","1","2762170","",""
"3992714","1329401","2010-10-21 23:08:36","10","2452","<svn><git><git-submodules>","How do I adapt my svn:externals strategy to git submodules?","<p>I'm having trouble figuring out how to change my mindset to git and have run in to the following problem. I have the situation where we have a shared engine and multiple projects that use the engine. Internal development teams and second party teams may be working on projects that use the shared engine, and want to be using HEAD of the shared engine as much as possible during development, until just a few weeks before ship, where the shared engine will be tagged and branched, and the project will then use that branch. The project teams typically only work on one project at a time, but may make changes to the shared engine during debugging or to add features. When they commit those changes, our build system runs to find any problems they may have introduced with the commit.</p>

<p>I (think I) want to use this same model with a new project/new company. In svn, the structure was something like this:
shared_engine</p>

<pre><code>project_in_dev-+
               +- svn:external shared_engine:head
project_about_to_ship-+
                      +-svn:external shared_engine_rev1_branch
</code></pre>

<p>This worked very well:</p>

<ul>
<li>Project developers could do one command to check out all the dependencies they would need</li>
<li>Project developers could do engine work and commit in to the shared engine easily</li>
<li>We could easily rev or change the shared engine the project was using with externals and revisions</li>
<li>Engine updates were easy to get with your daily ""update from the root project""</li>
</ul>

<p>OK, now I've moved to git, and submodules SEEM to be the new way to deal with external code, but it seems like I lose some features.</p>

<ul>
<li>It's a multiple step process to actually get all the dependencies of the project. Project developers have to do a git clone then a git submodule init/git submodule update --recursive</li>
<li>It's a multiple step process to update the root project and the submodule, so if changes are made to the root project by another developer that match changes to the submodule, you don't get the matching code immediately and could get very confused</li>
<li>The submodule is locked to a particular commit, and if you make changes to the submodule you will have trouble getting it to work with the head of the shared engine</li>
<li>I have no control over what revision of the shared engine the project developer has checked out without giving instructions on what to update to</li>
</ul>

<p>So my questions are as follows:</p>

<ul>
<li>First and foremost, are the above assumptions about submodules correct? It seems to be based on what I've read, but I'm not 100% certain as I'm still figuring out git</li>
<li>If my assumptions are correct, am I approaching the problem with the correct process? Do I need to readjust my thinking when using git? In other words, is there another way to do what I'm trying to do and need to think about the process differently?</li>
<li>Assuming I haven't blown the first two, and submodules won't do what I want, what will? I read about subtree merges but those don't seem exactly right either as it looks like I can't get changes made to the shared code back in to the repository.</li>
</ul>

<p>Thanks so much for your help and patience. If it's not obvious, I'm very new to git, and I like it and want to embrace it, but I'm still having some conceptual misunderstandings because I've probably been brain damaged by years of using central repos. I want to learn! Also, I've been rtfm'ing all day, and looking at various blogs posts, stackoverflow questions, etc, and I still don't get it, I obviously need it spelled out step by step for my situation. I have no coworkers to ask about this, any user groups in the Seattle area where there might be some git gurus? :)</p>
","1","1329401","0","0"
"60282047","540370","2020-02-18 13:31:19","0","68","<git><android-studio><git-submodules>","What is the equivalent git command of Android studio ""update project"" when you have submodules?","<p>I have an Android project with 3 submodules.</p>

<p>Every time I have to update the project I use the Android studio ""update project"" command:</p>

<p><a href=""https://i.stack.imgur.com/KxfRF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KxfRF.png"" alt=""enter image description here""></a></p>

<p>Since I prefere working with the command line and I'm trying to create some scripts for this, I'd like to know what command do I have to run to obtain the same result (update parent repo and all submodules)?</p>

<p>Is this enough?</p>

<pre><code>git submodule update --recursive --remote
</code></pre>
","2","540370","",""
"31866246","791713","2015-08-06 21:39:04","0","88","<python><git><git-submodules>","Put part of a git submodule to different location","<p>I would like to use <code>git submodule</code> to include another Python library into my application. The only problem is, that I need the actual module to go into a special location from which I can load it. I already thought about a script that would simply copy the contents I need from the submodule to the location it needs to be, but I was hoping that there is already an existing solution.</p>

<p>It would be nice if the contents from the submodule I need in a different location would automatically be synced when the submodule is updated. Let me finally give a short illustration to the problem I have:</p>

<pre><code>git submodule add git@github.com:nr-python/nr.async.git vendor/nr.async
cp vendor/nr.async/src libs/nr.async.egg
</code></pre>

<p>Now if I update the submodule, I would need to copy the contents <em>again</em>.</p>

<pre><code>cd vendor/nr.async &amp;&amp; git pull origin master &amp;&amp; cd ../..
rm -r libs/nr.async &amp;&amp; cp vendor/nr.async/src libs/nr.async.egg
</code></pre>
","0","791713","",""
"67067465","503804","2021-04-13 01:09:23","1","1163","<git><github><git-submodules>","git submodules vs maven artifacts","<p>Our rest service development is handicapped and slowed down with current  structure. I have tried to capture it in a picture below. Some explanation about the diagram</p>
<ul>
<li>prd-common, RestServiceA and RestServiceB are separate github repos</li>
<li>v1 has two submodules. v1-lifecycle and v1-utils. v1-lifecycle depends on v1-utils. Similarly, v2 has same dependencies</li>
<li>both v1 and v2 depend on common which is another maven module</li>
<li>Both v1 and v2 are disjointed meaning they don’t know about each other</li>
<li>RestServiceA needs code from v1-lifecycle and v2-lifecycle so it directly depends on them</li>
<li>RestServiceB needs code only from v2-lifecycle so it directly depends on it</li>
</ul>
<p>Most of the code is under v1 or v2. RestServiceA/B don’t have much code in them apart from resources, configurations etc. So, there is a tight coupling here.</p>
<p>Problem with this approach is that, for a given feature I make changes in let’s say v1, I need to build the jar, update its version in let’s say RestServiceA and test. This needs to repeat for every new commit. Additionally, I would need to publish my own snapshots to test outside of local.</p>
<p>To avoid this mess, I was thinking of using github submodules. However, my knowledge is limited. Can someone help if below understanding is correct and if I am missing any obvious loopholes if were to choose this approach. I’m open to any alternative approach. Thanks!</p>
<ul>
<li>If someone is making local changes to let’s say v1, they push the commit and do a github submodule update to get the latest hash in let’s say RestServiceA and test. This will be much faster than building entire jar and improve on time to market.</li>
<li>At times, we need to test code from a developer in production for A/B testing. In those cases, RestServiceA can point to the developer’s special fork and branch temporarily, create a build, test and revert. However how can we avoid developers to not commit to .gitmodules in the main repo? Maybe write a unit test and fail it explicitly if the url/branch etc. changed</li>
<li>We can still publish maven artifacts as part of releases, so if RestServiceB,RestServiceC want to stick to artifact and not submodule, they can do so.</li>
</ul>
<p><a href=""https://i.stack.imgur.com/HcQk7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HcQk7.png"" alt=""enter image description here"" /></a></p>
","0","503804","",""
"31871888","946226","2015-08-07 07:25:05","63","15319","<git><git-submodules><git-worktree>","What goes wrong when using git worktree with git submodules","<p>I recently discovered the <a href=""https://git-scm.com/docs/git-worktree""><code>git worktree</code></a> command:</p>

<blockquote>
  <p>The new working directory is linked to the current repository, sharing everything except working directory specific files such as HEAD, index, etc.</p>
</blockquote>

<p>But the docs also indicate </p>

<blockquote>
  <p>… the support for submodules is incomplete. It is NOT recommended to make multiple checkouts of a superproject.</p>
</blockquote>

<p>without further explanation as to what goes wrong.</p>

<p>Can someone enlighten me about the problems to expect? For example, will I be fine if I use the separate worktrees generated this way only for changes that do not affect the submodules?</p>
","0","946226","0","0"
"4022271","130638","2010-10-26 09:22:40","1","1223","<git><deployment><git-submodules>","Best way to deploy git projects (with submodules) to FTP server","<p>Hey guys. There is capistrano but that only works for ssh servers, which a lot of our clients aren't. We also make use of git submodules extensively. What is the best way you know of deploying git projects (with submodules) to FTP servers?</p>

<p>I've tried Beanstalk and Springloops v2 but they are both falling quite short. Beanstalk often fails, and springloops v2 is still struggling intensely.</p>

<p>Thanks guys.</p>
","0","130638","0","0"
"60303060","1421775","2020-02-19 14:54:08","4","1911","<git><github><git-submodules>","no submodule mapping found in .gitmodules for path xx","<p>I have tried a lot of different answers on stack but none of them work. I am trying to add a repository as a submodule which contains another submodule. So what I do is this:</p>

<pre><code>git submodule add -b develop git@github.com:submoduleRepo
</code></pre>

<p>The submodule is added to the repository and contains the folder of the submodule within it. However the folder is empty. So I follow up with this command:</p>

<pre><code>git submodule update --init --recursive
</code></pre>

<p>Which returns me nothing. If I go to the directory of the submodule <code>cd submoduleRepo</code> and then type git submodule, I get:</p>

<pre><code>fatal: no submodule mapping found in .gitmodules for path 'src/app/nestedSubmoduleRepo'
</code></pre>

<p>This is my .gitmodules of the main repo:</p>

<pre><code>[submodule ""submoduleRepo""]
    path = submoduleRepo
    url = git@github.com:submoduleRepo.git
    branch = develop
</code></pre>

<p>And within submoduleRepo/.gitmodules:</p>

<pre><code>[submodule "".\\src\\app\\nestedSubmoduleRepo""]
    path = .\\src\\app\\nestedSubmoduleRepo
    url = git@github.com:nestedSubmoduleRepo.git
</code></pre>

<p>Why do I keep getting this error and is the directory not getting populated?</p>

<p>EDIT:</p>

<p>Once I've ran <code>--init --recursive</code> once it gives me the error:</p>

<pre><code>fatal: No url found for submodule path 'submoduleRepo/src/app/nestedSubmoduleRepo' in .gitmodules
Failed to recurse into submodule path 'submoduleRepo'
</code></pre>

<p>My git config:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[remote ""origin""]
    url = git@github.com:mainRepo.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[submodule ""submoduleRepo""]
    url = git@github.com:submoduleRepo.git
    active = true
</code></pre>
","2","1421775","",""
"67088420","10734452","2021-04-14 08:47:21","0","169","<git><git-submodules>","Is not being able to call a git function outside submodule root a git submodule feature or a bug?","<p><code>git submodule foreach 'if echo &quot;$sm_path&quot; | grep just_this_one ; then git rev-parse HEAD ||:; fi'</code></p>
<ul>
<li>gives : just_this_one's sha1</li>
</ul>
<p><code>git submodule foreach 'if echo &quot;$sm_path&quot; | grep just_this_one ; then cd somewhere; git rev-parse HEAD ||:; fi'</code></p>
<ul>
<li>gives : error not a repository '.git'</li>
</ul>
<p><code>git submodule foreach 'if echo &quot;$sm_path&quot; | grep just_this_one ; then cd somewhere; git -C .. rev-parse HEAD ||:; fi'</code></p>
<ul>
<li>gives : just_this_one's sha1</li>
</ul>
<p>Is this a bug or a feature?</p>
<p>What can I do to pass through it if I want to run this command:
<code>git submodule foreach 'make -C somewhere all'</code>
where the makefile contains some git function calls.
I would like to also still be able to call the makefile outside git submodule foreach.</p>
<hr />
<pre><code>$ git --version
git version 2.23.0
</code></pre>
","8","10734452","",""
"4185365","3381","2010-11-15 14:38:56","406","349122","<git><git-submodules>","No submodule mapping found in .gitmodule for a path that's not a submodule","<p>I have a project that has a submodule at <code>lib/three20</code></p>

<p>My <code>.gitmodule</code> file looks like this:</p>

<pre><code>[submodule ""lib/three20""]
    path = lib/three20
    url = git://github.com/facebook/three20.git
</code></pre>

<p>I have cloned this in the past without errors, (<code>git submodule init</code> followed by a <code>git submodule update</code>) and it's been working for a while.</p>

<p>I tried to clone this to a new machine, and now I'm getting this error on <code>git submodule init</code>:</p>

<pre><code>No submodule mapping found in .gitmodules for path 'Classes/Support/Three20'
</code></pre>

<p>That path is just an empty folder in Xcode that I use to house the projects from the other directory.  It's not part of the <code>.gitmodules</code> file, so I don't see where it's getting this path from.</p>

<p>Any ideas?</p>
","9","3381","0","0"
"67106575","6607497","2021-04-15 10:17:08","0","36","<git><git-submodules>","git: directory seems to be both directory with modification and submodule","<p>Some long time ago (in 2011) I had started a project with subdirectories.
At some later time I decided to make those subdirectories submodules actually.</p>
<p>That was so long ago (in 2013) that I don't remember the individual steps.</p>
<p>Now I added two commits to a submodule (doing it in that subdirectory), also tagging a new version, then pushed.</p>
<p>After updating the submodule, adding and committing the changes, in the git main directory <code>git status</code> still shows &quot;<code>modified:</code> <em>directory</em> <code>(untracked content)</code>&quot;.</p>
<p>I wonder how to get rid of that message (or at least I want to know what is causing that).</p>
","2","6607497","",""
"4251940","195638","2010-11-23 01:35:08","80","21882","<git><version-control><git-submodules><git-clone>","Retrospectively add --recursive to a git repo","<p>If you <code>git clone</code> with <code>--recursive</code>, you can get all the git submodules too.</p>

<p>If I've forgotten to add this magical flag when cloning, as can happen, how do I now go and get any submodules?</p>

<p>Additionally, how can I set the recursive flag as a default for future clones?</p>
","0","195638","0","0"
"41718822","3916927","2017-01-18 11:57:54","62","79188","<git><git-submodules>","How to ""resolve fatal: Not a git repository""?","<p>I was trying to remove one sub-module from the project</p>

<p>Tried  <strong>rm -rf .git/modules/submodulePath</strong>  </p>

<p>After that I am having the issue</p>

<p><strong>fatal: Not a git repository</strong></p>
","1","3916927","0","0"
"4611512","137067","2011-01-06 03:39:54","311","119079","<git><git-submodules>","Is there a way to make git pull automatically update submodules?","<p>Is there a way to automatically have <code>git submodule update</code> (or preferably <code>git submodule update --init</code> called whenever <code>git pull</code> is done?</p>

<p>Looking for a git config setting, or a git alias to help with this.</p>
","5","137067","0","0"
"22819265","534003","2014-04-02 17:55:13","3","4107","<git><deployment><capistrano><git-submodules><capistrano3>","Deploying a git submodule with Capistrano 3","<p>My project repo includes Wordpress as a git submodule.  When deploying via Capistrano 3, the submodule directory is barren.</p>

<pre><code>project
--wordpress
--images
</code></pre>

<p>I am using git and <code>:deploy_via, :remote_cache</code></p>

<p>How can I tell Capistrano to also deploy the submodule?</p>
","0","534003","0","0"
"67149516","9574405","2021-04-18 14:10:43","0","473","<git><github><git-submodules>","git version branch of thirdparty repository within my own repository","<p>I would like to use thirdparty code hosted in a git repo within my own git repo.
I will need to modify and extend some parts of the thirdparty code.
But I would still like to be able to merge certain new commits to the thirdparty repo into my project.</p>
<p>I tried to use <code>git submodule</code> for this. I leave the remote on the thirdparty repo so I can pull in changes. I create a new branch on the submodule that I don't push to the thirdparty repo ( I don't have write access anyway).</p>
<p>But when somebody else clones my repo, they will get <code>Fetched in submodule path 'thirdparty-repo', but it did not contain abcd</code> on <code>git submodule update</code>, because the remote repository that is still configured in <code>.gitmodules</code> does not contain the commit <code>abcd</code>.</p>
<p>How can I fix this? Or is there a better approach to achieve my requirements?</p>
","3","9574405","",""
"42253435","6381533","2017-02-15 15:24:34","1","504","<git><cmake><git-submodules>","How to use git submodules properly in cmake project?","<p>I have a <code>Cmake</code> project that should be a library for another project and should be run as a standalone application. Both projects use the same external library as a git submodule. What is the correct way to do it? Here is my structure:</p>

<pre><code>ProjectParent/
  lib/
    /externalLib
    /ProjectChild
      /lib
        /externalLib
</code></pre>

<p>I can not remove externalLib from ProjectChild because it should run as a standalone application, it is not just a library. I don't want to remove externalLib from ProjectParent too. Do we have any option in cmake like exclude option in gradle? </p>

<p>Also I just add ""include(""lib/ProjectChild"")"" to cmake file. Is it right?</p>
","4","6381533","0","0"
"49635394","8649261","2018-04-03 16:54:32","1","483","<version-control><local><git-submodules><git-subtree><django-apps>","How to manage Django Project and its modules with git?","<p>I've been looking for a solution how to manage my project with git for quite some time now. I want to have one instance as the main repo for connecting the entire project. Each app should be its own git instance. 
During my search I found both <strong>git submodule</strong> and <strong>git subtree</strong>. For both tools I found an instruction how to insert an existing reppo. However, I am interested in how to proceed from the beginning. I mean here from the command <pre>$ django-admin startproject myproject</pre> Where do I enter the <code>git init</code>? When I create a new app </p>

<p><pre><code>$ django-admin startapp new-app</code></pre> and how do I use this as subtree/submodule?</p>

<p>Until now I have always found instructions that refer to a remote repo. Is this always necessary? I am not sure if I want to publish every Django app on Github. But I want a version control system just for me. Is this possible?</p>

<p>I have to say that so far it has been enough to manage my ""projects"" locally. Now I want to work together with others and I don't want to install the whole Django Project locally but only provide me with single functions or modules.</p>

<p>It would be a great help if you could explain to me how that works.</p>

<p>TL;DR<br>
How to manage (start and expand) a Django Project with git. The apps should be their own git repos.</p>
","0","8649261","",""
"4914363","591434","2011-02-06 15:59:10","0","396","<git><vim><git-submodules>","vim & git submodules: how to put my own files into submodules?","<p>I am using vim with pathogen and all plugins installed as a submodules. This works great, but I've got a problem with one plugin - xptemplate. It requires putting personal code snippets into specific directory ""bundle/xptemplate/personal/"". I've created personal snippet for ruby and put it in ""bundle/xptemplate/personal/ruby/ruby.xpt.vim"" and it works... but doing ""git submodule update"" reverts my work. And updating plugins is a thing that I would like to do from time to time. Another disadvantage is that I cannot easily clone my vim config on another machine - I had to copy this file manually.</p>

<p>Is there a way to do it right? I thought about adding something like ""personal/*"" to .gitignore file in ""bundle/xptemplate"". I have not tested it, but even if it worked it would solve only problem with reverting my work by submodule update, and not allow me to push my snippets to github.</p>

<p>I will appreciate any help.</p>
","0","591434","",""
"49654543","6135454","2018-04-04 15:09:44","1","2696","<git><git-submodules>","git submodule reference not show current branch, but show commit hash","<p>This is my submodules</p>

<p><code>+a3ebd2c9635f67ef7d0b430e505e40fa65f3abd4 android-libs-core (0.3-145-ga3ebd2c)
 6041beecf8082b2e68b597e3305c8b9ef4012772 android-libs-debug (heads/master)
 df7dad74c8b922714b2f17defb8172df7ecf32ea android-libs-router (v1.1-5-gdf7dad7)
 7a669bac24430841a5d86c0d90964cd612005769 android_libs_view (heads/master)</code></p>

<p>PS: Even not show current branch, the sub module also tracking the master branch , so I have my doubts. see the submodule information.</p>

<p><code>+a3ebd2c9635f67ef7d0b430e505e40fa65f3abd4 android-libs-core (0.3-145-ga3ebd2c)</code>    </p>

<p><strong>(0.3-145-ga3ebd2c) mean's what and is it right ?</strong></p>

<p>normal case will show the submodule's current branch, so I am worried of my git repertory has some problem</p>
","2","6135454","0","0"
"67185720","14173256","2021-04-20 20:12:44","1","690","<git><git-submodules>","git submodule update upstream","<p>I have a super project with a submodule in it (Overleaf project). I have made changes to the submodule but they are not showing up in the super project. I want to update the superproject to reflect the latest commits to the submodule. My understanding is that <code>git submodule update</code> acts on the submodule to fetch the latest commits from the super project but how do I do the reverse?</p>
<p>When in the superproject I run <code>git submodule update --remote</code> it tells me no changes found</p>
","0","14173256","0","0"
"14404704","1192740","2013-01-18 17:52:39","110","50103","<git><git-submodules>","How do I replace a git submodule with another repo?","<p>How do I replace a git submodule with a different git repo?</p>

<p>Specifically, I have a submodule:</p>

<ul>
<li>located at <code>./ExternalFrameworks/TestFramework</code> that points to a git repo <code>git@github.com:userA/TestFramework.git</code> </li>
<li>I'd like it to now point to <code>git@github.com:userB/TestFramework.git</code>.</li>
</ul>

<p>The problem is that when I delete the submodule with the method described <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"">here</a>, then re-add it using the command     </p>

<pre><code>git submodule add git@github.com:userB/TestFramework.git
</code></pre>

<p>I get this error:</p>

<pre><code>A git directory for 'ExternalFrameworks/TestFramework' is found locally with remote(s):
  origin    git@github.com:userA/TestFramework.git
If you want to reuse this local git directory instead of cloning again from
  git@github.com:userB/TestFramework.git
use the '--force' option. If the local git directory is not the correct repo
or you are unsure what this means choose another name with the '--name' option.
</code></pre>
","1","1192740","0","0"
"67314263","14162728","2021-04-29 09:05:16","2","5739","<git><github><git-submodules><git-merge-conflict>","Git - ""<directory> does not have a commit checked out"" even after deleting the .git inside that directory. Cant get rid of inner git repo","<p>Alright this is gonna be a bit confusing but please bear with me. Still getting used to git and Im struggling. So. The sequence of events were as follows (very hectic so ill summarise)</p>
<p>I have a project with backend and frontend. the frontend directory has a react app (<code>frontend/financee-app/</code>) which by default has a <code>.git</code> initialised in it.</p>
<p>But my dumb self forgot to delete that inner repo before initialising a git repo for the whole project and committing and pushing my code.</p>
<p>So naturally, i couldnt open that react app folder on github cuz from what i learned till now is that its now a &quot;submodule&quot;? Which means theres a git repo within a git repo.</p>
<p>But after so many struggles and messing up my files, i replace my files with the backup files i had for this exact reason which have pretty much the same file structure as what i originally committed. BUT i made sure there is no inner git repo in the react app this time.</p>
<p>So i git pull my code to see what the differences are, it tells me theres three conflits. Two in two files. Which i fix, no problem. The third conflict is the freaking react app directory. Idk how to fix it so i just fix the other two, make sure i dont have a git repo in that app directory, and then i finally <code>git add *</code>.</p>
<p>Annnd. An error.</p>
<pre><code>error: 'frontend/financee-app' does not have a commit checked out
fatal: updating files failed
</code></pre>
<p>Searching everywhere about that error, everyone keeps saying to delete the inner git repo. BUT I ALREADY DID. Is it detecting the one that i mistakenly pushed the first time that caused all these issues? What if i want to get rid of it for good. I just want to commit this new folder that doesnt have the git repo inside. I swear thats all i wanna do. Why is this so hard.</p>
","0","14162728","0","0"
"67322196","3503228","2021-04-29 17:18:21","1","112","<git><url><ssh><git-submodules><git-remote>","Inconsistent git submodule remote url","<p>I have a git submodule:</p>
<pre class=""lang-sh prettyprint-override""><code>$ cd zathura
$ git remote get-url origin
ssh://git@github.com/pwmt/zathura.git
$ cd ..
</code></pre>
<p>But inside <code>.git/config</code></p>
<pre class=""lang-sh prettyprint-override""><code>[submodule &quot;zathura&quot;]
    url = https://github.com/pwmt/zathura.git
</code></pre>
<p>And inside <code>.gitmodules</code></p>
<pre><code>[submodule &quot;zathura&quot;]
    path = zathura
    url = https://github.com/pwmt/zathura.git
    ignore = dirty
</code></pre>
<hr />
<h3>Questions</h3>
<p>Why the Remote urls are inconsistent (a mixture of https and ssh)?
Is this  valid? Or is it due to some mistake that I might have done? How can I have consistent remote url and which url is used by git?</p>
","3","3503228","0","0"
"32303392","1503619","2015-08-31 02:55:53","1","365","<ruby-on-rails><ruby><git><git-submodules>","git submodules with rails directory structure","<p>I'd like to split up rails using a git submodule, which as far as I can tell, works basically like a directory. While this works well with a file structure similar to Python's Django, where each module has a models.py, views.py, etc, this doesn't appear to work so well with rails, which gives you a directory structure where there is a views folder, a controllers folder, etc, with each folder having 1 file from the module.</p>

<p>Is there any way to convert to a file structure similar to Django's, or if not, how would you use git submodules with rails?</p>
","0","1503619","0","0"
"68466273","4912037","2021-07-21 08:24:37","0","150","<git><git-submodules><rsync>","how to rsync git repos with submodules","<p>I am trying to rsync git repo containing submodules from my development system to debug system. The command I am using is <code>rsync -vazrP /mydevelopmentFolder debug_pc:path</code>.</p>
<p>The problem is that after the rsync when I do a <code>git diff</code> I find the following error:</p>
<pre><code>fatal: not a git repository: &lt;abs path of my dev system&gt;/&lt;sub module path&gt;
fatal: 'git status --porcelain=2' failed in submodule &lt;submodule path&gt;
</code></pre>
<p>The <code>git log</code> seems to work okay at the root level or at sub module level.
It is interesting to see that git repo contains the old absolute path to the subsystem (issue would not have been there is these were relative).</p>
<p>What am I doing wrong here? How do I fix this?</p>
","6","4912037","",""
"14877420","3189","2013-02-14 14:48:36","4","403","<git><git-submodules>","Removing git submodules - how to automate removal on pull?","<p>I've read <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"">how to remove a git submodule myself</a>:</p>

<pre><code># Delete the relevant section from the .gitmodules file.
git config -f .gitmodules --remove-section submodule.$submodulepath
# Delete the relevant section from .git/config
git config -f .git/config --remove-section submodule.$submodulepath
git rm --cached path_to_submodule    # no trailing slash
git commit
rm -rf path_to_submodule
</code></pre>

<p>I can do that.  But when someone else does a <code>git pull</code> how do we ensure that the submodule is then removed from their system?  The <code>.gitmodules</code> change comes with the pull, but not much else as far as I can tell.  So the person who pulled would then still have to run</p>

<pre><code>git config -f .git/config --remove-section submodule.$submodulepath
rm -rf path_to_submodule
</code></pre>

<p>Is that right?  On a small development team I guess you could just tell everyone to run those commands, but it's less than ideal.</p>

<p>Is there some magic command that automates this?  In particular I'd like some standard way of automating this in deployment scripts.  Off the top of my head I'm not sure how the scripts would even know that there was one less submodule than there previously was.  (Not particularly attractive) options that occur to me are:</p>

<ul>
<li>doing diffs on <code>.gitmodules</code> before and after pull</li>
<li>delete all submodules and then run <code>git submodule update --init</code> every single deploy.</li>
<li>The submodule does end up being an untracked file after the pull, so an option that would work would be to delete all untracked directories that contain a <code>.git</code> subdirectory after a pull, but you're liable to delete stuff you wanted to keep that way.</li>
</ul>

<p>Any better options appreciated.</p>
","7","3189","0","0"
"32317365","1138916","2015-08-31 18:13:06","29","8939","<git><github><bitbucket><git-submodules>","Multiple urls of git submodule - per remote submodules","<p>I have git repository with two remotes (github and bitbucket). Inside I have submodule, that points accordingly to another github/bitbucket repo.
But in the definition of submodule is url, that is hardcoded. Can I have two of them? Or one per remote? So that my main repo on github points to submodule on github. And my main repo on Bitbucket points to submodule on bitbucket?</p>

<pre><code>[submodule ""programs/mgr-nancy-demo""]
    path = programs/mgr-nancy-demo
    url = git@github.com:wedkarz/mgr-nancy-demo.git
</code></pre>
","0","1138916","0","0"
"50167969","9065506","2018-05-04 05:47:54","63","119037","<git><git-submodules>","How to fix ""modified content, untracked content"" in git?","<p><strong>The objective is to commit a git branch. The output of ""git status"" for the branch is:</strong></p>

<pre><code>On branch zeromq_new
Your branch is up to date with 'origin/zeromq'.

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

      modified:   log4cplus (modified content, untracked content)
      modified:   ../lib/notification/cppzmq (modified content)
</code></pre>

<p>The directory structure looks like this:</p>

<pre><code>HySecureGateway
├──fes
│   └──log4cplus
│       ├──.git
│       ├──.gitattributes
│       ├──.gitignore
│       ├──.gitmodules
│       ├──catch
│       │   ├──.git
│       │   ├──.gitattributes
│       │   ├──.github
│       │   ├──.gitignore
│       │   └──.github
│       │       ├──issue_template.md
│       │       └──pull_request_template.md
│       └──threadpool
│           └──.github
└──lib
    └──notification
        └──cppzmq
            ├──.git
            └──.gitignore
</code></pre>

<p>I read an answer of to a similar question here: </p>

<p><a href=""https://stackoverflow.com/questions/4161022/how-to-track-untracked-content?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa"">How to track untracked content?</a> , </p>

<p>and couldn't understand it completely. 
Also the logc4plus/.gitmodules contains this:</p>

<pre><code>[submodule ""threadpool""]

        path = threadpool
        url = https://github.com/log4cplus/ThreadPool.git

[submodule ""catch""]

        path = catch
        url = https://github.com/philsquared/Catch.git
</code></pre>
","9","9065506","0","0"
"68528624","12176460","2021-07-26 10:56:10","1","894","<git><git-submodules>","Does git pull --recurse-submodule really pulls latest commit in submodule?","<p>This thread's  (<a href=""https://stackoverflow.com/questions/1030169/easy-way-to-pull-latest-of-all-git-submodules"">Easy way to pull latest of all git submodules</a>)  answer states that when running:</p>
<pre><code>$ git pull --recurse-submodules
</code></pre>
<p>will pull the latest commits in the submodules. But when trying it, it doesn't seem to work.</p>
<p>I have a demo repo with a demo submodule called &quot;tinyXml&quot; (It's not the real tinyXml, just a demo). Take a look at the following shell interaction:</p>
<pre><code>PS D:\DemoProject&gt; cd .\tinyXml
PS D:\DemoProject\tinyXml&gt; git status 
HEAD detached at 9101c63
nothing to commit, working tree clean
PS D:\DemoProject\tinyXml&gt; cd ..     
PS D:\DemoProject&gt; git pull --recurse-submodules                  
Fetching submodule tinyXml
Already up to date.
PS D:\DemoProject&gt; cd .\tinyXml\
PS D:\DemoProject\tinyXml&gt; git status      
HEAD detached at 9101c63
nothing to commit, working tree clean
PS D:\DemoProject\tinyXml&gt; cd ..
PS D:\DemoProject&gt; git submodule update --remote      
Submodule path 'tinyXml': checked out 'e249788ed10afbdff043f758f46add75b81d522a'
</code></pre>
<p>So you see that <code>git submodule update --remote</code> works, but <code>git pull --recurse-submodules</code> didn't pull the latest commit in the submodule.</p>
<p>My git version - 2.32.0</p>
","0","12176460","",""
"32370975","494143","2015-09-03 08:46:03","2","146","<git><version-control><git-submodules><project-structure><multiple-projects>","Workflow to protect against breaking changes in git submodules","<p>We are currently refactoring code to be shared among different projects in our company. This shared code will be included in other projects as a <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow"">Git submodule</a>.</p>

<p>One thing we're worried of is breaking changes introduced to the super project from the submodule at certain stages of the project (e.g: a point where we should be stable / code freeze).</p>

<p>I have never worked with submodules before, but according to what I know, a submodule references a particular commit in another repo, so you're basically OK as long as you don't update the submodule in the project.</p>

<p>Another teammate of mine suggested that whenever we enter a ""stable phase"" of the project (e.g: finish dev), we should create a branch of the submodule and point to that. I think this is an overhead and seems wrong (a shared project shouldn't be version-locked with other projects that use it).</p>

<p><strong>So, to sum it up, my questions are:</strong></p>

<ol>
<li>Is there anything at all that should be done to protect a super project from submodules updates (breaking changes) ?</li>
<li>Is there a known workflow where a super project that goes into a stable phase, also creates a new branch of its submodules to point to? (a link would be great).</li>
</ol>
","0","494143","0","0"
"14961116","688608","2013-02-19 15:27:48","7","4381","<git><git-submodules>","recursively git pull for all of the git submodules simply","<p>My personal repository has some repositories as submodules. And the following command</p>

<pre><code>$ git submodule foreach git pull origin master
</code></pre>

<p>was faced with the following result right after entering ruby repository because ruby repository seems that it does not have a master branch and ""git pull"" stopped.</p>

<pre><code>Entering 'rails'
From git://github.com/rails/rails
 * branch            master     -&gt; FETCH_HEAD
Already up-to-date.
Entering 'roo'
From git://github.com/hmcgowan/roo
 * branch            master     -&gt; FETCH_HEAD
Already up-to-date.
Entering 'ruby'
fatal: Couldn't find remote ref master
Stopping at 'ruby'; script returned non-zero status.
</code></pre>

<p>So my question is <strong><code>what should I do to git pull for all of submodules only by git command?</code></strong> Should I do make a script to this? I hope just ONE command line provided from git will make this.</p>
","1","688608","0","0"
"32377313","5210478","2015-09-03 13:40:51","0","59","<php><git><bitbucket><git-submodules>","multiple git repositories (managing by using PHP)","<p>My project demands that I manage everything using <strong>PHP</strong>.</p>

<p>I cloned some repos from bitbucket into my server and now the directory structure looks like this:</p>

<p><code>_root
  |_git-repo-1
  |    |_.git
  |    |_codes
  |         |_sub-folders
  |
  |_git-repo-2
  |    |_.git
  |    |_codes2
  |         |_sub-folders
  |
  |_git-repo-3
       |_.git
       |_codes3
            |_sub-folders3</code></p>

<p>Since I am using <strong>PHP</strong> to manage them I am facing problems to manage them all from the <em>root</em> as the config file has customized itself while initiating the first repo.</p>

<p>Now my question is</p>

<blockquote>
  <p>Is there a way I can keep my PHP files into the <strong>root folder</strong> and manage
  the individual git repos from there? I am not using any special app or
  module but relying upon shell_exec to manage the repos.</p>
</blockquote>

<p>I am aware of <strong>git submodule</strong> but I am wondering if there is any better option to handle this project.</p>
","4","5210478","",""
"32379433","3639557","2015-09-03 15:11:31","0","257","<git><git-submodules>","how to work with git submodule in a new repository?","<p>I have been handed a project from someone else and I am having a hard time to get the repo up and running. It might sound very basic but here is my question:</p>

<p>so I clone the project and I need to do </p>

<pre><code>git submodule init
git submodule update
</code></pre>

<p>and it creates link to external repositories which this project is based on. Now if I want to keep the last version of this code and erase the .git (because we will release it to public soon and don't want to share our git footprints) and still have the ""git submodule"" working, what do I need to do? In the project folder in addition to the .git, there is a file called "".gitmodules"" which contains the links to the external repositories. But when I ""rm -rf .git"" and do a fresh git init to initialize a fresh git copy, the ""git submodule init"" and ""git submodule update"" don't do anything. Should I do something else to make a link between the .git and the "".gitmodules"" file that I kept in the folder?</p>
","2","3639557","",""
"14983419","2091702","2013-02-20 15:19:24","0","59","<git><git-submodules><git-filter-branch><repository-design>","I want to setup lower repository projects from a higher git repository","<p>When I started with GIT, I was unfamiliar with the Project Code and just wanted to get all the code under source code control.  The project hierarchy was like this:</p>

<pre><code>/Projects/.git  # I put the git repository here, which I think was a big mistake.
/Projects/Project1
/Projects/Project2
/Projects/Project3
/Projects/Project4
/Projects/Project5
</code></pre>

<p>At one point I ended up creating a sub repository:</p>

<pre><code>/Projects/.git (now it contains all of /Projects/Project3/.git changes too)
/Projects/Project1
/Projects/Project2
/Projects/Project3
/Projects/Project3/.git    # I think this will compound the problem of seperation
/Projects/Project4
/Projects/Project5
</code></pre>

<p>What I really want is to do this:</p>

<pre><code>/Projects/(no .git here)
/Projects/Project1/.git
/Projects/Project2/.git
/Projects/Project3/.git
/Projects/Project3/.git
/Projects/Project4/.git
/Projects/Project5/.git
</code></pre>

<p>I've looked at the filter branch, but don't really understand how I can use it to pull the history out of the higher /Projects/.git repository into separate lower /Projects/Project[1-5]/.git repositories.</p>

<p>I've been looking around and seeing that there is a new git submodule tool.  I'm wondering if this is what I should try to use, but I'm not sure.</p>

<p>Does anyone have an idea of how to get these projects separated into seperate repositories so that I can get rid of the upper level repository that covers the entire set of projects?</p>

<p>Any help would be appreciated.</p>

<p>Alan</p>
","0","2091702","",""
"68556494","13989403","2021-07-28 07:56:26","1","215","<git><merge><git-submodules>","Correct way to merge a git branch into mine, with a submodule","<p>This has to be a dupe, but I can't find a search phrase that finds me the answer.</p>
<p>I have a git repo (<code>foo</code>) with one submodule, pointing at commit <code>abc123</code> of another repo (<code>bar</code>).</p>
<p>I have a long-ish lived branch of <code>foo</code> still pointing at commit <code>abc123</code>.</p>
<p>Changes happen on <code>foo</code>'s <code>main</code> branch, including an update to the submodule, moving it to commit <code>zyx987</code>.</p>
<p>Now I want to merge <code>main</code> into my branch.</p>
<p>Normally I would just do <code>git merge main</code>. With the submodule, that shows me:</p>
<pre><code># On branch feature
# All conflicts fixed but you are still merging.
#  (use &quot;git commit&quot; to conclude merge)
#
# Changes to be committed:
#
#       ...
#
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:  bar (new commits)
#
</code></pre>
<p>When I navigate into the <code>bar</code> directory, and do a <code>git status</code>, I see it's still at the previous commit (<code>abc123</code>). I've tried <code>git add bar</code>, but that kept it at <code>abc123</code>.</p>
<p>The only way I found to get the new commit, was to navigate into the submodule's directory and manually issue <code>git checkout zyx987</code>.</p>
<p>There's obviously scope for errors to creep in here, I could easily miss the fact that the submodule changed, or select the wrong commit when I manually update it, not to mention that it's additional work that I, as the developer working on the (unrelated) feature branch, shouldn't need to care about what's going on in that submodule.</p>
<p>Is there a way to say &quot;merge, and update the submodule&quot; or (better) after a normal <code>git merge</code>, when you discover that the submodule has changed, to accept the commit that was selected in the source branch?</p>
","4","13989403","",""
"60239281","11626247","2020-02-15 13:39:52","0","105","<git><git-submodules>","Sharing same git submodule for both project","<p>So i've a 3 project A, B and C</p>

<p>Project A is the core library
Project B is an extension of A (so project A is requiered to work)
Project C is an application build with project A &amp; B</p>

<p>Project A<br>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Project B<br>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>
Project C</p>

<p>My projects setup are like this</p>

<p>ProjectA/srcs/</p>

<p>ProjectB/lib/ProjectA (submodule)<br>
ProjectB/srcs/</p>

<p><strong>ProjectC/lib/ProjectA</strong> (submodule)<br>
ProjectC/lib/ProjectB (submodule)<br>
<strong>ProjectC/lib/ProjectB/lib/ProjectA</strong> (submodule)<br>
ProjectC/srcs</p>

<p>How can i use the same ProjectA (bold) submodule in ProjectC without modifying ProjectB ?</p>

<p>Thanks for your help</p>
","0","11626247","",""
"14783127","455578","2013-02-08 23:37:10","20","13988","<git-submodules><git-archive>","git archive export with submodules (git archive all / recursive)","<p>I have a website directory versioned with git. I use submodules for required libraries like Twitter Bootstrap, colorbox and lessjs because I should not track the sourcecode but only the version of their code I use.</p>

<p>Now I want to deploy the project and therefore I need the submodule code too.
By using <code>git archive</code> I don't get the source files/code from the submodules.</p>

<p>The following three approaches TRY to achieve what I want but dont't work:
<strong>1st approach</strong></p>

<pre><code>#!/bin/sh

export revision=""$1""

export GIT_INDEX_FILE="".git/tmpindex""
rm -f ""$GIT_INDEX_FILE""

git read-tree $revision

export up=""$(pwd)""

read_one_level () {
        export GIT_ALTERNATE_OBJECT_DIRECTORIES=""$GIT_ALTERNATE_OBJECT_DIRECTORIES"":$(
            git submodule foreach 'echo ""$up/$path/.git/objects""' |
            grep -E -v '^(Entering|No submodule mapping found)' |
            tr '\n' : |
            sed 's/:$//'
        )

        git submodule foreach '
                cd ""$up""
                subcommit=$(git rev-parse :""$path"")
                git rm --cached ""$path""
                git read-tree -i --prefix=""$path/"" $subcommit
        ' &gt;/dev/null
}

while git ls-files -s | grep -q ^160000; do
    read_one_level
done

git archive --format=tar $(git write-tree)

rm -f ""$GIT_INDEX_FILE"" 
</code></pre>

<p>Thomas Rast in <a href=""http://git.661346.n2.nabble.com/Running-git-archive-recursively-over-submodules-td4577012.html"">http://git.661346.n2.nabble.com/Running-git-archive-recursively-over-submodules-td4577012.html</a></p>

<p>This gives me errors both on Windows as in Linux that there are no objects files found.</p>

<p><strong>2nd approach</strong>
<a href=""https://github.com/meitar/git-archive-all.sh"">https://github.com/meitar/git-archive-all.sh</a></p>

<p>Complains about mktemp not found on Windows. And correcting calls to <code>git archive</code> (from <code>git-archive</code>) does not give submodules in the tar ...:(</p>

<p><strong>3rd approach</strong>
<a href=""https://github.com/Kentzo/git-archive-all"">https://github.com/Kentzo/git-archive-all</a></p>

<p>Is outdated from my point of view by not being compatible to latest python 3.3 and still not fully working by using 2.7 because samefile complains.</p>

<p>So my question is now:
Is there any recent way/approach to deal with exporting/archive a git project including submodules?</p>

<p>Or should I check subtrees for this workflow?</p>

<p>Thanks in advance</p>
","1","455578","0","0"
"14785287","44003","2013-02-09 05:29:17","6","367","<git><git-submodules><git-filter-branch>","How do I use 'git filter-branch' to update the SHA of a submodule?","<p>Let's assume that I have two Git repositories, A and B. B is a submodule of A.</p>

<p>For the sake of simplicity, let's also assume that I have a magic function, <code>get_sha_B</code> that, given an SHA commit from A, returns the desired SHA commit of B.</p>

<p>How do I run filter-branch on repo A such that each commit of repo A is rewritten to point to the desired commit of repo B, as returned by <code>get_sha_B</code>?</p>

<p>Thank you!</p>
","0","44003","",""
"60245902","676644","2020-02-16 06:15:16","2","359","<git><travis-ci><github-pages><git-submodules><hugo>","What is the purpose of the .git file in a submodule directory?","<p>What is the purpose of the .git file in a submodule directory?</p>

<p>The submodule is mapped to the <code>public</code> directory which is build with Hugo. This is pushed to a Github pages site.</p>

<p>When I run <code>hugo --cleanDestinationDir</code></p>

<p>What happens if this gets deleted? Can this be recreated within the build in Travis CI?</p>
","0","676644","",""
"60245594","325418","2020-02-16 05:08:44","1","1368","<git><create-react-app><git-submodules>","How to fix the git repo if I accidentally create the repo with a submodule (sub repo) in it?","<p>If I do the following:</p>

<pre><code>mkdir TryReactHooks
cd TryReactHooks
npx create-react-app my-app
git init 
git remote add origin git@gitlab.com:username/tryreacthooks.git  # optional
git add .
git commit -am ""Initial Commit""
git push -u origin master
</code></pre>

<p>then for some reason, this repo doesn't seem to track any file in the <code>my-app</code> folder.  It is probably due to <code>my-app</code> is a repo by itself (because <code>create-react-app</code> did it).  If I do </p>

<pre><code>mv my-app/.git my-app/.git-tmp
</code></pre>

<p>so that <code>my-app</code> is no longer a git repo, I find that still the current repo won't track any changes made to <code>my-app</code> even if I do <code>git add .</code>  How can this be fixed?</p>
","0","325418","0","0"
"60250408","4332851","2020-02-16 16:06:21","1","320","<git><git-submodules>","How to add and pull submodules specified in the .gitmodules file even if they weren’t added to the current repo","<p>I know I can call <code>git submodule update --init --recursive</code> if modules were already added to the repo.</p>

<p>However, Is there way to add and pull submodules specified in the <code>.gitmodules</code> file even if they weren’t added to the current repo with <code>git submodule add</code> command?</p>
","4","4332851","",""
"60224145","4030665","2020-02-14 10:06:21","0","859","<boost><cmake><git-submodules><boost-program-options>","Add boost program_options as a git submodule and build an executable with its sources","<p>I have a small project that uses <code>boost::program_options</code>. I want to add this (only this) library to my project as a <code>git submodule</code> and build my executable using its sources.</p>

<p>I have already done the <code>git submodule</code> part (<code>git submodule add https://github.com/boostorg/program_options.git</code>), and I have done a small experiment in which I build an example application using only the sources in the mentioned submodule (to double check that there are not extra dependencies).</p>

<p>Now I want to add these sources to my project. What I do in my <code>CMakeLists.txt</code> file is:</p>

<pre><code>set(BOOST_PROGRAM_OPTIONS_SOURCES
  boost/program_options/src/split.cpp
  boost/program_options/src/positional_options.cpp
  boost/program_options/src/parsers.cpp
  boost/program_options/src/options_description.cpp
  boost/program_options/src/convert.cpp
  boost/program_options/src/config_file.cpp
  boost/program_options/src/cmdline.cpp
  boost/program_options/src/winmain.cpp
  boost/program_options/src/variables_map.cpp
  boost/program_options/src/value_semantic.cpp
  boost/program_options/src/utf8_codecvt_facet.cpp
)
</code></pre>

<p>and</p>

<pre><code>add_executable(
  ...
  src/main.cpp
  ${BOOST_PROGRAM_OPTIONS_SOURCES}
)
</code></pre>

<p>but I obtain the following error:</p>

<pre><code>CMake Error at CMakeLists.txt:69 (add_executable):
  The target name ""boost/program_options/src/split.cpp"" is reserved or not
  valid for certain CMake features, such as generator expressions, and may
  result in undefined behavior.


CMake Error at CMakeLists.txt:86 (target_link_libraries):
  Cannot specify link libraries for target ""..."" which is not built
  by this project.
</code></pre>

<p><strong>What is the right way to do what I want></strong></p>
","0","4030665","",""
"60634823","12997644","2020-03-11 11:20:07","1","1378","<git-submodules>","Add git submodule using a specific commit number","<p>I'm using git submodule commands to add <a href=""https://github.com/tkem/fsmlite"" rel=""nofollow noreferrer"">this FSM repo</a> in my project. I want to checkout a specific release commit. By default the master branch is checked out. 
After adding the git repo, when I run</p>

<p><code>$ git submodule</code></p>

<p>It gives </p>

<p><code>d1b66d66cfa95f238a7498465908a262f4b2326a directory_path/fsmlite</code></p>

<p>The commit number here belongs to a master branch commit. How can I checkout another commit instead, using its commit number?</p>
","0","12997644","",""
"5232829","23643","2011-03-08 13:02:52","8","10436","<git><git-submodules>","Adding git submodule into the root of the repository?","<p>I want to keep my Vim plugins up-to-date with git by using github repos as submodules with the help of <a href=""https://github.com/tpope/vim-pathogen"" rel=""noreferrer"">pathogen</a>. Everything is well except pathogen itself.</p>

<p>For example, I have a repository in <code>~/.vim</code>, at pathogen's repo has <code>autoload</code> directory in its root: <code>&lt;pathogen repo&gt;/autoload</code>.</p>

<p>Is it possible to make a git submodule so that pathogen's <code>autoload</code> goes into <code>~/.vim</code>?</p>

<pre><code>~/.vim/autoload/pathogen.vim
</code></pre>
","0","23643","0","0"
"23350803","96140","2014-04-28 20:41:58","6","2268","<git><teamcity><git-submodules>","TeamCity The repository X has a submodule in the commit 'X' at a path 'X', but has no entry for this path in .gitmodules configuratio","<p>I am trying to build a Git project on a MacBuild agent.</p>

<p>This project had, at one time, been working. I changed multiple submodule urls (to point to new Git server), and these issues started cropping up. However, the old urls are still available, and are proxyin' to the new Git server address, so I don't think that is the issue. I have verified that the parent/super project is referencing a commit that exists on the Git server (both old and new urls).</p>

<p>I can check out with SourceTree/git locally on any computer without any issues. So, why would this be an issue on the build server (TeamCity).</p>

<pre><code>Build 'MedXStream :: Internal' #1 
Started 'Mon Apr 28 16:27:20 EDT 2014' on 'Pauls-MacBook-Pro' by 'pknopf'
Finished 'Mon Apr 28 16:28:21 EDT 2014' with status 'FAILURE Failed to start build'
TeamCity URL http://192.168.5.180/viewLog.html?buildId=1&amp;buildTypeId=MedXStream_Internal 
TeamCity server version is 8.1.2 (build 29993)

[16:27:20]E: bt1 (1m:01s)
[16:27:20] : TeamCity server version is 8.1.2 (build 29993)
[16:27:20] : Checking for changes (running for 1m:01s)
[16:27:20] : Will collect changes in 1 VCS roots
[16:27:20] : Waiting for completion of current operations for the VCS roots
[16:27:20] : Loading current repository state for VCS root 'MedXStream'
[16:27:20] : Detecting changes in VCS root 'MedXStream' (used in Internal)
[16:27:20] : Agent time zone: America/New_York
[16:27:22] : Agent is running under JRE: 1.6.0_65-b14-462-11M4609
[16:27:22] : Publishing internal artifacts
[16:27:22] :     [Publishing internal artifacts] Sending using WebPublisher
[16:27:22] :     [Publishing internal artifacts] Sending using ArtifactsCachePublisher
[16:27:22] : Clearing temporary directory: /Applications/buildAgent/temp/buildTmp
[16:27:22] : Checkout directory: /Applications/buildAgent/work/646019915a7c9b49
[16:27:22]W: Updating sources: server side checkout (32s)
[16:27:22] :     [Updating sources] Using vcs information from server. Reason: no revision information for buildtype Internal and checkout directory /Applications/buildAgent/work/646019915a7c9b49 on agent
[16:27:21] :     [Updating sources] Will perform clean checkout
[16:27:21] :     [Updating sources] Clean checkout reasons
[16:27:21] :         [Clean checkout reasons] Agent doesn't have any version of the project sources
[16:27:21] :         [Clean checkout reasons] Checkout directory is empty or doesn't exist
[16:27:21] :     [Updating sources] Building and caching clean patch for VCS root: MedXStream
[16:27:53]W:     [Updating sources] Failed to build patch for build #1 {build id=1}, VCS root: ""MedXStream"" {instance id=3, parent internal id=1, parent id=MedXStream, description: ""http://stash.medxchange.com/scm/ios/software.git#refs/heads/master""}, due to error: Patch building failed: jetbrains.buildServer.buildTriggers.vcs.git.submodules.MissingSubmoduleEntryException: The repository 'http://stash.medxchange.com/scm/mdx/medxchange.library.git' has a submodule in the commit '985645766910a85451368de894d7a02507e63bed' at a path 'SubModules/MedXChange.MobileDevice', but has no entry for this path in .gitmodules configuration
[16:27:54] :     [Updating sources] Repository sources transferred
[16:27:54]W: Will repeat attempt when server will be available, number of attempts left: 2
[16:28:04]W: Updating sources: server side checkout (4s)
[16:28:03] :     [Updating sources] Will perform clean checkout
[16:28:03] :     [Updating sources] Clean checkout reasons
[16:28:03] :         [Clean checkout reasons] Agent doesn't have any version of the project sources
[16:28:03] :         [Clean checkout reasons] Checkout directory is empty or doesn't exist
[16:28:03] :     [Updating sources] Building and caching clean patch for VCS root: MedXStream
[16:28:07]W:     [Updating sources] Failed to build patch for build #1 {build id=1}, VCS root: ""MedXStream"" {instance id=3, parent internal id=1, parent id=MedXStream, description: ""http://stash.medxchange.com/scm/ios/software.git#refs/heads/master""}, due to error: Patch building failed: jetbrains.buildServer.buildTriggers.vcs.git.submodules.MissingSubmoduleEntryException: The repository 'http://stash.medxchange.com/scm/mdx/medxchange.library.git' has a submodule in the commit '985645766910a85451368de894d7a02507e63bed' at a path 'SubModules/MedXChange.MobileDevice', but has no entry for this path in .gitmodules configuration
[16:28:09] :     [Updating sources] Repository sources transferred
[16:28:09]W: Will repeat attempt when server will be available, number of attempts left: 1
[16:28:19]W: Updating sources: server side checkout (4s)
[16:28:17] :     [Updating sources] Will perform clean checkout
[16:28:17] :     [Updating sources] Clean checkout reasons
[16:28:17] :         [Clean checkout reasons] Agent doesn't have any version of the project sources
[16:28:17] :         [Clean checkout reasons] Checkout directory is empty or doesn't exist
[16:28:17] :     [Updating sources] Building and caching clean patch for VCS root: MedXStream
[16:28:21]W:     [Updating sources] Failed to build patch for build #1 {build id=1}, VCS root: ""MedXStream"" {instance id=3, parent internal id=1, parent id=MedXStream, description: ""http://stash.medxchange.com/scm/ios/software.git#refs/heads/master""}, due to error: Patch building failed: jetbrains.buildServer.buildTriggers.vcs.git.submodules.MissingSubmoduleEntryException: The repository 'http://stash.medxchange.com/scm/mdx/medxchange.library.git' has a submodule in the commit '985645766910a85451368de894d7a02507e63bed' at a path 'SubModules/MedXChange.MobileDevice', but has no entry for this path in .gitmodules configuration
[16:28:23] :     [Updating sources] Repository sources transferred
[16:28:23]E: Patch is broken, can be found in file: /Applications/buildAgent/temp/globalTmp/temp6909424303578745215patch_1
[16:28:23]E: Failed to build patch for build #1 {build id=1}, VCS root: ""MedXStream"" {instance id=3, parent internal id=1, parent id=MedXStream, description: ""http://stash.medxchange.com/scm/ios/software.git#refs/heads/master""}, due to error: Patch building failed: jetbrains.buildServer.buildTriggers.vcs.git.submodules.MissingSubmoduleEntryException: The repository 'http://stash.medxchange.com/scm/mdx/medxchange.library.git' has a submodule in the commit '985645766910a85451368de894d7a02507e63bed' at a path 'SubModules/MedXChange.MobileDevice', but has no entry for this path in .gitmodules configuration
[16:28:23]W: jetbrains.buildServer.agent.impl.patch.PatchDownloaderImpl$1: Server was not able to build correct patch, most likely due to VCS errors
    at jetbrains.buildServer.agent.impl.patch.PatchDownloaderImpl.throwError(PatchDownloaderImpl.java:118)
    at jetbrains.buildServer.agent.impl.patch.PatchDownloaderImpl.checkPatch(PatchDownloaderImpl.java:108)
    at jetbrains.buildServer.agent.impl.patch.PatchDownloaderImpl.copyPatchAndCheck(PatchDownloaderImpl.java:69)
    at jetbrains.buildServer.agent.impl.patch.UpdateSourcesPatcherBase.copyPatchToTempFile(UpdateSourcesPatcherBase.java:71)
    at jetbrains.buildServer.agent.impl.patch.UpdateSourcesFromServer.updateSources(UpdateSourcesFromServer.java:60)
    at jetbrains.buildServer.agent.impl.patch.UpdateSourcesBuildStageBase.doSourceUpdate(UpdateSourcesBuildStageBase.java:91)
    at jetbrains.buildServer.agent.impl.patch.UpdateSourcesBuildStageBase.doRecoverableStage(UpdateSourcesBuildStageBase.java:59)
    at jetbrains.buildServer.agent.impl.buildStages.startStages.RecoverableBuildStage.doLastAttempt(RecoverableBuildStage.java:112)
    at jetbrains.buildServer.agent.impl.buildStages.startStages.RecoverableBuildStage.doBuildStage(RecoverableBuildStage.java:70)
    at jetbrains.buildServer.agent.impl.buildStages.BuildStagesExecutor$1.callStage(BuildStagesExecutor.java:31)
    at jetbrains.buildServer.agent.impl.buildStages.BuildStagesExecutor$1.callStage(BuildStagesExecutor.java:24)
    at jetbrains.buildServer.agent.impl.buildStages.StagesExecutor.callRunStage(StagesExecutor.java:78)
    at jetbrains.buildServer.agent.impl.buildStages.StagesExecutor.doStages(StagesExecutor.java:37)
    at jetbrains.buildServer.agent.impl.buildStages.BuildStagesExecutor.doStages(BuildStagesExecutor.java:24)
    at jetbrains.buildServer.agent.impl.BuildRunAction.doStages(BuildRunAction.java:70)
    at jetbrains.buildServer.agent.impl.BuildRunAction.runBuild(BuildRunAction.java:50)
    at jetbrains.buildServer.agent.impl.BuildAgentImpl.doActualBuild(BuildAgentImpl.java:265)
    at jetbrains.buildServer.agent.impl.BuildAgentImpl.access$100(BuildAgentImpl.java:52)
    at jetbrains.buildServer.agent.impl.BuildAgentImpl$1.run(BuildAgentImpl.java:231)
    at java.lang.Thread.run(Thread.java:695)
Caused by: jetbrains.buildServer.vcs.patches.UnsuccessfulPatchException: Failed to build patch for build #1 {build id=1}, VCS root: ""MedXStream"" {instance id=3, parent internal id=1, parent id=MedXStream, description: ""http://stash.medxchange.com/scm/ios/software.git#refs/heads/master""}, due to error: Patch building failed: jetbrains.buildServer.buildTriggers.vcs.git.submodules.MissingSubmoduleEntryException: The repository 'http://stash.medxchange.com/scm/mdx/medxchange.library.git' has a submodule in the commit '985645766910a85451368de894d7a02507e63bed' at a path 'SubModules/MedXChange.MobileDevice', but has no entry for this path in .gitmodules configuration
    at jetbrains.buildServer.vcs.patches.AbstractPatcher$1.fail(AbstractPatcher.java:93)
    at jetbrains.buildServer.vcs.patches.LowLevelPatcher.readPatchStream(LowLevelPatcher.java:165)
    at jetbrains.buildServer.vcs.patches.LowLevelPatcher.applyPatch(LowLevelPatcher.java:88)
    at jetbrains.buildServer.vcs.patches.AbstractPatcher.applyPatch(AbstractPatcher.java:42)
    at jetbrains.buildServer.agent.impl.patch.PatchApplierImpl.applyPatch(PatchApplierImpl.java:18)
    at jetbrains.buildServer.agent.impl.patch.PatchDownloaderImpl.checkPatchInFileIsCompleted(PatchDownloaderImpl.java:88)
    at jetbrains.buildServer.agent.impl.patch.PatchDownloaderImpl.checkPatch(PatchDownloaderImpl.java:98)
    ... 18 more

[16:28:23] : ##teamcity[buildStatisticValue key='buildStageDuration:buildFinishing' value='61048.0']
[16:28:23] : Publishing internal artifacts
[16:28:23] :     [Publishing internal artifacts] Sending using WebPublisher
[16:28:23] :     [Publishing internal artifacts] Sending using ArtifactsCachePublisher
[16:28:23] : Build failed to start. Artifacts will not be published for this build
[16:28:23] : ##teamcity[buildStatisticValue key='buildStageDuration:artifactsPublishing' value='48.0']
[16:28:21] : Build finished
</code></pre>

<p>Why would this happen?</p>
","0","96140","0","0"
"41636884","4406856","2017-01-13 14:30:44","0","252","<git><github><gitlab><git-submodules>","how i can use submodule gitlab in this stracture","<p>i work gitlab for my work . i use  multiply core (master) library for any project. during development each project maybe need add or change same feature in core library .</p>

<p>i use git submodule for sync new change to core (master) and commit it, it work perfectly . this is my question in core library after commit and push all change sync with master , how i can ignore same files or folder commit in submodule.</p>

<h1>my structure</h1>

<p>core library</p>

<pre><code>-library
--crm
---controller
----index.php
---model
----index.php
---view
----index.php
</code></pre>

<p>=================
this myproject</p>

<pre><code>-library
--crm
---controller
----index.php
---model
----index.php
---view
----index.php (change)
----about.php (add)
</code></pre>

<p>==================</p>

<p>i build new repo for myproject , how i can ignore commit view folder in submodule  ? and model and controller allow commit and push.</p>
","0","4406856","",""
"22677295","1297064","2014-03-27 02:44:34","11","7559","<git><git-submodules>","Update git submodules shallowly with the '--depth' option","<p><code>git submodule update</code> has supported the <code>--depth</code> option as described in this <a href=""https://stackoverflow.com/a/17692710/1297064"">answer</a>.</p>

<p>But still we can't easily determine the depth value, which would probably make git unable to find the intended revision of a submodule.</p>

<p>Is there a true solution for updating submodules shallowly?</p>
","3","1297064","0","0"
"23362967","2605155","2014-04-29 11:09:17","1","4209","<git><git-submodules>","How to tell git to ignore git sub modules?","<p>My ""real"" <code>.git</code> folder is in <code>/var/www</code>. I want to push the whole folder to github. Unfortunately, a few git sub modules are excluded.</p>

<p>For example the folder <code>w/extensions/Lingo</code> is excluded. But <code>w/extensions/Lingo/.git</code> isn't ""my"" git sub module. Git was only used to download <code>w/extensions/Lingo</code> and will be used to update that folder. No own development planed.</p>

<p>How can I tell my ""real"" git <code>/var/www/.git</code> to ignore any sub modules such as <code>w/extensions/Lingo/.git</code>?</p>

<p>In other words, what I want to tell git is ""just treat any file in <code>/var/www/*</code> as normal file"".</p>
","0","2605155","0","0"
"4124505","17744","2010-11-08 13:58:42","2","184","<git><git-submodules><branching-and-merging>","Trying to figure out the right approach to using submodules in git","<p>I'm trying to get a submodule setup properly in git and I want to make sure I use it right.</p>

<p>I have main repository called <code>MyProject</code>. I have a secondary repository that contains all of our code generated data access called <code>Data</code>. I want to setup <code>Data</code> as a submodule of <code>MyProject</code>. </p>

<p><code>Data</code> rarely changes unless there is a schema change, or a small little bug fix. </p>

<p>Let's say I'm adding some new functionality to <code>MyProject</code> which requires a schema change. Typically I would create a branch of <code>MyProject</code> called <code>NewFeature</code> and check in all my changes there until it's ready to be merged with master. I also want to create a branch for <code>Data</code> so that any schema changes stay seperate from <code>Master</code> until my changes are ready to be merged.</p>

<p>What's the right workflow for this or is there even one?</p>

<p>Thanks!</p>
","0","17744","",""
"42692250","4301236","2017-03-09 10:02:45","3","1633","<git><git-submodules>","Use a .gitmodules from another project","<p>So I have a project ""NewProject"" that needs the same submodules than another project ""OldProject"".</p>

<p>Since I don't want to manually do the following manipulation in NewProject
<br>
 <code>git submodule add git@gitlab.me:my-submodule.git</code></p>

<p>I hope that there is a way to re-use the <code>.gitmodules</code> file from OldProject</p>

<p>Here is what I tried for the moment:</p>

<ul>
<li><code>cp OldProject/.gitmodules NewProject/.gitmodules</code> -> ok (wouaw)</li>
<li><code>git submodule init</code> -> nothing</li>
<li><code>git submodule update</code> -> nothing</li>
<li><code>git submodule update --init</code> -> nothing</li>
<li><code>git submodule sync</code> -> nothing</li>
<li><code>git submodule update --init --recursive</code> -> nothing</li>
</ul>

<p>I've seen countless problems of people trying to change the url (or the name) of their submodule(s) but I don't think that this is similar, the new factor being that the NewProject git repository is vanilla (have no <code>.git/modules</code>).</p>

<p>So do you think there is a way to do what I intend to ?<br>
and if yes, how can I achieve that?</p>
","0","4301236","",""
"42704690","857277","2017-03-09 20:19:14","3","674","<git><git-submodules><sparse-checkout>","Efficiently updating a git submodule from a sparse checkout of the main repository","<p>I am writing some automation to update a git submodule to the latest on the remote. Normally this is achieved by specifying <code>branch=&lt;blah&gt;</code> in the <code>.gitmodules</code> and running:</p>

<pre><code>git submodule update --remote
</code></pre>

<p>But for me this is not suitable. </p>

<p>The main repository I am dealing with over 6 gigs in size, and the submodule is over 10 gigs. Do not ask me why, this is the way it is. When one runs <code>git submodule update --remote --init</code>, git performs a full checkout of the remote branch, which takes forever. I want to update the submodule pointer in the main repository to the latest without checking out the entire submodule. I also want to avoid checking out the entire main repository if possible. So I devised a solution using sparse checkouts and manually cloning the submodule:</p>

<p>1) Perform a sparse checkout of the main repository with just <code>.gitmodules
</code></p>

<p><code>git clone -b &lt;branch&gt; --no-checkout --depth=1 &lt;url&gt;</code></p>

<p><code>git config core.sparsecheckout true</code></p>

<p><code>echo .gitmodules &gt; .git\info\sparse-checkout</code></p>

<p><code>git checkout &lt;topic-branch&gt;</code> </p>

<p>2) Clone the submodule manually with </p>

<p><code>git submodule init</code></p>

<p><code>git clone --no-checkout --depth=1 -b &lt;submodule-branch&gt; &lt;submodule-url&gt; &lt;submodule-path&gt;</code></p>

<p>At this point I would expect a git status to report a difference in the submodule commit, since it is now different than the checked in version of the submodule. Then I could simple add the submodule path, commit, and create pull request. However, using this sparse checkout method, the main repository is unaware of change I made in the submodule. This method works if I do an ordinary checkout of the main repository instead of sparse, but then I need to checkout the entire main repository as well. Is this some limitation of sparse checkout w/ relation to git submodules?</p>

<p>Thanks!</p>
","0","857277","0","0"
"42712542","2300237","2017-03-10 07:20:15","13","15606","<git><github><git-submodules><aws-code-deploy>","How to auto deploying git repositories with submodules on AWS?","<p>I have a submodule in my git repository and my directory structure is like,</p>

<pre><code>app
  -- folder1
  -- folder2
  -- submodule @5855
</code></pre>

<p>I have deployed my code on AWS by using autodeploy service.
Now, on server I have code in the parent-directory but submodule directories are empty.</p>

<p>Q1) How can I get data in submodules. My repository on server is not git repository. Do I need to convert it firstly into git repo and then run <code>submodule</code> commands to get it ?</p>

<p>Q2) How can I automate the submodule deployment as well?</p>

<p>Thanks</p>
","9","2300237","0","0"
"4446656","262972","2010-12-15 04:19:54","2","210","<git><github><git-submodules>","Why are all of my git submodles not being cloned when I do git clone --recursive?","<p>I tried to export my emacs and vim configurations into their own repositories, and added them as submodles to a superrepository.  However when I try to do </p>

<pre><code>git clone --recursive 
</code></pre>

<p>to clone the superrepository, it only pulls in the ext/rsense submodule and ignores the other two.  What am I doing wrong?  I am using git 1.7.0.4</p>

<p>Here's the .gitmodules for my superrepository</p>

<pre><code>[submodule ""vim""]
        path = vim
        url = https://github.com:sid137/.vim.git
[submodule "".emacs.d""]
        path = .emacs.d
        url = https://github.com:sid137/emacs.git
[submodule ""ext/rsense""]
        path = ext/rsense
        url = https://github.com/m2ym/rsense.git
</code></pre>
","0","262972","",""
"4445738","187780","2010-12-15 00:45:04","25","10230","<git><github><git-submodules>","Unable to push commits from a git submodule?","<p>I have a simple project that has one submodule.</p>

<pre><code>$ git submodule
 964737623a362f6303e87ec41f2c7090c8c2c093 lib/mongodb-php-odm (heads/master-1-g9647376)
</code></pre>

<p>I have made changes to that submodule and committed them, but cannot push them to github.</p>

<pre><code>$ cd lib/mongodb-php-odm
$ git branch
* (no branch)
  master
$ git remote -v
origin  git@github.com:colinmollenhour/mongodb-php-odm.git
$ git ls-remote .
964737623a362f6303e87ec41f2c7090c8c2c093    HEAD
6f5f91eff9b1854faa30608f335aee92aa7532eb    refs/heads/master
6f5f91eff9b1854faa30608f335aee92aa7532eb    refs/remotes/origin/HEAD
6f5f91eff9b1854faa30608f335aee92aa7532eb    refs/remotes/origin/master
$ git push origin master
Everything up-to-date
</code></pre>

<p>I don't understand why it says ""Everything up-to-date"" because the 964737 commit has not been pushed to github. It is likely I did something wrong, but I have no idea what that would be..</p>

<p>How do I push the latest commit in this submodule to github?</p>
","0","187780","0","0"
"4760869","472109","2011-01-21 16:01:49","2","185","<git><git-submodules>","Can git submodules reference HEAD instead of a specific commit (useful for a superset project)?","<p>We have a bunch of git repositories:</p>

<ul>
<li>drools</li>
<li>jbpm</li>
<li>guvnor</li>
<li>planner</li>
<li>... (many more)</li>
</ul>

<p>which are a git submodules in a <em>super</em> git repository, which is an aggregation of all these repositories, so the whole thing can be cloned at once and configured in our IDE at once. However casual developers can also only clone the module their are interested in.</p>

<p>The problem is, that when someone pushes a change to a subrepository, the super repository still is stuck on the previous commit of that subrepository. So someone of the non-casual developers has to update that super repository to the latest commit of that subrepository.</p>

<p><em>Is there any way to make the super repository automatically point to the latest commit of a subrepository?</em></p>

<p>We know that for every branch or tag in the <em>super</em> git repository (such as <code>master</code>, <code>5.1.x</code>, <code>5.0.x</code>, ...), there exists a branch or tag with the same name in each of the submodules.</p>
","1","472109","",""
"4763687","65778","2011-01-21 20:51:40","11","1982","<git><hook><git-submodules><githooks>","What is the best way to write a git update hook that rejects invalid submodule commits?","<p>I am attempting to write an <code>update</code> hook for git that bounces if a submodule is being updated to a commit ID that does not exist in the submodule's upstream repository. To say it another way, I want to force users to push changes to the submodule repositories before they push changes to the submodule pointers.</p>

<p>One caveat:</p>

<ul>
<li>I only want to test submodules whose bare, upstream repositories exist on the same server as the parent repository. Otherwise we start having to do crazy things like call 'git clone' or 'git fetch' from within a git hook, which would not be fun.</li>
</ul>

<p>I have been playing around with an idea but it feels like there must be a better way to do this. Here is what I was planning on doing in the update hook:</p>

<ol>
<li>Check the refname passed into the hook to see if we are updating something under <code>refs/heads/</code>. If not, exit early.</li>
<li>Use <code>git rev-list</code> to get a list of revisions being pushed.</li>
<li>For each revision:
<ol>
<li>Call <code>git show &lt;revision_id&gt;</code> and use a regular expression that looks to see if a submodule was updated (by searching for `+Subproject commit [0-9a-f]+).</li>
<li>If this commit did change a submodule, get the contents of the <code>.gitmodules</code> files as seen by that particular commit (<code>git show &lt;revision_id&gt;:.gitmodules</code>).</li>
<li>Use the results of 3.1 and 3.2 to get a list of submodule URLs and their updated commit IDs.</li>
<li>Check this list created in 3.3 against an external file that maps submodule URLs to local bare git repositories on the filesystem.</li>
<li><code>cd</code> to the paths found in 3.4 and execute <code>git rev-parse --quiet --verify &lt;updated_submodule_commit_id&gt;</code> to see if that commit exists in that repository. If it does not, exit with a non-zero status.</li>
</ol></li>
</ol>

<p>(Note: I believe the results of 3.2 can potentially be cached across revisions as long as the output to <code>git rev-parse --quiet --verify &lt;revision_id&gt;:.gitmodules</code> doesn't change from one revision to the next. I left this part out to simplify the solution.)</p>

<p>So yeah, this seems pretty complex, and I can't help but wonder if there are some internal git commands that might make my life a lot easier. Or maybe there is a different way to think about the problem?</p>
","0","65778","0","0"
"23569821","515540","2014-05-09 16:38:02","3","60","<git><git-submodules>","Is there a way to add a submodule to a git repo that share a directory structure","<p>I have a repo with a directory structure like so
<code>
    /foo
    /foo/bar
    /foo/bar/me
    /foo/bar/you
    /foo/one
    /foo/one/two
    /foo/one/three
</code></p>

<p>There is a submodule I want to add that has this structure
<code>
    /foo/bar/file.txt
    /foo/one/otherfile.txt
</code></p>

<p>Is there way to add that submodule to my repo, where the submodule shares some of the same directory structure?
I've tried using the basic add submodule commands, but I get the error that <code>'foo' already exists in the index</code>, which I take to mean that becuase my repo already has a /foo directory, it can't add the submodule with the same directory.</p>

<p>Is there anyway to have the submodule share the directory structure, but still have different files?</p>
","1","515540","",""
"22901693","807863","2014-04-07 00:20:57","0","1081","<git><dojo><git-submodules><bower>","Bower does not download git submodule (DojoX candidate plugin)","<p>I am using dojo, dijit, dojox in my project, they are installed with:</p>

<pre><code>$ bower install dojo dijit dojox
bower dijit#*                   cached git://github.com/dojo/dijit.git#1.9.3
bower dijit#*                 validate 1.9.3 against git://github.com/dojo/dijit.git#*
bower dojo#*                    cached git://github.com/dojo/dojo.git#1.9.3
bower dojo#*                  validate 1.9.3 against git://github.com/dojo/dojo.git#*
bower dojox#*                   cached git://github.com/dojo/dojox.git#1.9.3
bower dojox#*                 validate 1.9.3 against git://github.com/dojo/dojox.git#*
</code></pre>

<p>Everything is fine until I discover dojox.calendar is missing. This is a candidate plugin for DojoX and using it from the DojoX git repository (git cloned from Github) requires ""<em>git submodule update --init --recursive</em>"". </p>

<p>My options are:</p>

<ul>
<li>Can I get Bower to download this git submodule?</li>
<li>Or should I download this module separate from the dojox package via
a normal git clone and just symlink dojox/calendar to it? This would
mean I have to maintain this link every time bower updates the dojox
packages, right?</li>
</ul>

<p><strong>UPDATE</strong>: I've just discovered bower install accepts git URLs as parameters, however it outputs a single <em>index</em> HTML file that is most definitely not the module I need.</p>
","0","807863","",""
"5482544","226006","2011-03-30 06:11:04","31","25506","<git><deployment><git-submodules><git-bare>","How can I use git-archive to include submodules from a bare repository","<p>I'm in the process of setting up a deployment script. The basic process is:</p>

<ol>
<li>Push changes to a bare repository on the server</li>
<li>Then based on new tags will create a new folder for the release.</li>
<li><strong>Use git archive to move the files into the release directory</strong></li>
<li>Runs some migrations scripts and puts it live (if all is successful).</li>
</ol>

<p>The issue is my repository contains a submodule, which doesn't get put in the archive, and therefore doesn't get put in the release directory.</p>

<p>I've seen <a href=""https://github.com/meitar/git-archive-all.sh"">git-archive-all</a>, but that doesn't work on a bare repository.</p>

<p>If its not possible, I'm considering, </p>

<ol>
<li>making the repository not bare, and updating the working copy, which would allow me to use git-archive-all. Or</li>
<li>having a second bare repository of the submodule on the server, which I could get an archive from (would have to look into this to make sure I'm getting the right revision).</li>
</ol>
","0","226006","0","0"
"42760879","882746","2017-03-13 10:02:51","4","16340","<git><deployment><gitlab><git-submodules><webhooks>","git - check out branch and submodules","<p>Which functions can I use to sync/init/update all submodules (local repo) to the version in a remote branch?</p>

<p>The ""Sync"" (let's call it that, I don't mean git sync!) must also work when:</p>

<ul>
<li>A submodule has been added only to the remote branch</li>
<li>Files within a submodule have been added/removed/modified locally. Tracked or untracked.</li>
<li>Submodules are removed (optional)</li>
</ul>

<p>Essentially, I want the local repo to always be at exactly the same version as the remote branch. Without much fiddling whenever I change somthing in the submodules. So no manual ssh'ing to the server to init a new submodule, only for the deploy script to work...</p>

<p>Can this be achieved without cloning (aka. transferring) the entire repository? I chose git to have a secure, fast way to deploy my sources. But the only option I can think of, is to do a complete <code>git clone --recursive</code> and check out submodules at their respective tags next. In which case, rsync would probably do a better job of syncing files.</p>
","1","882746","0","0"
"5776984","1940255","2011-04-25 09:24:11","1","280","<git><bash><csv><git-submodules>","How to do a bash foreach csv field to 'git submodule add'","<p>I have no idea how to write Bash and after googling around for a while, I'm in no better position to achieve what I need.
I have a csv file consisting of a list of git submodules and their paths-to-be in the super project:</p>

<pre><code>git://github.com/demo/git-repo.git, extensions/git-repo
git://github.com/demo/another-repo.git, extensions/another-repo
</code></pre>

<p>I would like to have a bash script which would read each line of the file, put each part of the line (separated by the comma) into the following command</p>

<pre><code>git submodule add $1 $2
</code></pre>

<p><code>$1</code> being the git:// part and <code>$2</code> being the extensions/ part</p>

<p>I need to be able to pass the filename of the csv file to the script, and not have it hardcoded in the script. If anyone can help me, I would really appreciate it as I have over 50 of these submodules to add regularly, and I'm fed up with writing it out one by one.</p>

<p>Cheers.</p>
","2","1940255","",""
"5795089","376600","2011-04-26 18:55:37","8","3891","<git><repository><git-submodules>","git repository structure with multiple modules","<p>I have the following situation:</p>

<ol>
<li>Have 4-5 different software modules part of a bigger software project.</li>
<li>All of them are set as separate git repos.</li>
<li>When i commit a feature, usually it spans more than a single module - thus making e.g. 2 or 3 commits for each module.  </li>
</ol>

<p>Give me ideas for multiple modules part of a bigger project. Do you prefer using git submodules, and if yes, in what way? Or do you use a master folder for the project, e.g.:</p>

<p>Software_Project<br>
&nbsp;&nbsp;&nbsp;Module_1<br>
&nbsp;&nbsp;&nbsp;Module_2<br>
&nbsp;&nbsp;&nbsp;Module_3<br>
&nbsp;&nbsp;&nbsp;Module_4<br></p>

<p>Any ideas for an appropriate git repo structure are welcome.</p>
","2","376600","0","0"
"61750722","1192872","2020-05-12 11:36:30","3","122","<git><github><git-submodules>","How to authenticate to github submodule during clone action in CI?","<p>I am trying to clone a github repository in a CI environment (specifically Gitlab CI) which contains submodules to other private github repositories. So the github repository I try to clone has the structure:</p>
<pre><code>repo1
|
 -&gt; repo2
|
 -&gt; repo3
</code></pre>
<p>Here repo2 and repo 3 are submodules of repo1. Let's assume the address of the repos are <code>https://github.com/user/[repo1|repo2|repo3].git</code>. In my Ci script I call the command <code>git clone  --recurse-submodules https://&lt;AcessToken&gt;@github.com/user/repo1.git &lt;Some/Path&gt;</code>to clone the repository. Without the submodules, this works fine. With the submodules I get the following error:</p>
<pre><code>[git]: fatal: could not read Username for 'https://github.com': No such device or address
</code></pre>
<p>What is the best approach here to authenticate while cloning the submodules?</p>
","0","1192872","0","0"
"6041516","87973","2011-05-18 07:56:18","28","22219","<git><git-submodules><git-config>","git submodule update with other user","<p>I'm logged in as user A on my machine, but my repo is accessible through username B on the server that I pull from. The <code>.gitmodules</code> file has <code>url = ssh://domain.com/abc/def.git</code>.</p>

<p>How can I configure git to use a username B instead of A when I do <code>git submodule update</code>?</p>
","2","87973","0","0"
"6054118","434445","2011-05-19 05:17:57","7","381","<git-submodules><darcs>","darcs equivalent for git's submodules?","<p>so yeah just wondering if darcs has anything equivalent to git's submodules.</p>

<p>i.e. lets say I have a repo (myapp) and I have a folder in it called mylibrary. mylibrary doesn't really have anything to do with myapp's development, it just has to be included. mylibrary's development happens in it's own repo, but when someone pulls myapp, it'll also pull an up-to-date version of mylibrary. any ideas?    </p>
","0","434445","0","0"
"6083357","162349","2011-05-21 17:36:04","6","1222","<git><addition><git-submodules>","Why does adding an existing repo as a submodule modify .git/config?","<p>If I add a submodule that does not currently exist, no submodule information is added to <code>.git/config</code>.</p>

<pre><code>$ mkdir testing
$ cd testing
$ git init
$ git submodule add git@git.server:submodule.git
$ cat .git/config 
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
</code></pre>

<p>However, if I add a repo that currently exists as a submodule, the url is added to <code>.git/config</code>:</p>

<pre><code>$ mkdir testing
$ cd testing
$ git init
$ git clone git@git.server:submodule.git
$ git submodule add git@git.server:submodule.git
$ cat .git/config 
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
[submodule ""submodule""]
    url = git@git.server:submodule.git
</code></pre>

<p>I would have assumed that in both cases, <code>git submodule add</code> would have only modified <code>.gitmodules</code>, and that <code>git submodule init</code> would have updated the project's <code>.git/config</code>.  </p>

<p>Why is <code>.git/config</code> modified in the second case but not the first?  Can somebody explain the rational for this behavior?</p>
","0","162349","",""
"24451965","692810","2014-06-27 12:33:37","1","596","<git><git-submodules><git-subtree>","Is git-subtree appropriate for me?","<p>I have a 3rd party library included in my project. It is important that the ""subproject"" code should be included in the main/parent one, because the objective is when other people makes git pull, they could will download the code with no extra-effort (or minimal).</p>

<p>But I want the possibility to download updates from the library own repo.</p>

<p>Previously, that library was downloaded directly into his directory and updates were managing by commits in the main project.</p>

<p>Now I'm thinking in use git-subtree or git-submodule. Is git-subtree are useful for that purpose. Is git-submodule better?</p>
","0","692810","0","0"
"61970990","11322957","2020-05-23 10:58:30","0","333","<git><configuration><git-submodules>",".gitmodules options to ignore a submodule in a submodule","<p>I have a git repository with a hierarchy of submodules similar to this:</p>

<pre class=""lang-sh prettyprint-override""><code>TopLevelRepo
+- .gitmodules # this is where I want the configuration
+- externals
   +- RepoA # this is a 3rd party repository and I cannot modify it
   |  +- externals
   |     +- RepoB # this repository is not necessary and is very large
   |     +- RepoC # this repository is required
   +- RepoD
   +- dozens more repositories
</code></pre>

<p>The way I clone the repository is one of these:</p>

<pre class=""lang-sh prettyprint-override""><code>git clone --recursive https://github.com/TopLevelRepo TopLevelRepo
# or
git clone https://github.com/TopLevelRepo TopLevelRepo
cd TopLevelRepo
git submodules update --init --recursive
</code></pre>

<p>Is there an option that I can add to .gitmodules (or any other file that is checked into the repository) that would allow me to skip (avoid cloning) the RepoB, but keep the RepoC?</p>

<p>I have already found this:
<a href=""https://stackoverflow.com/questions/56745097/exclude-submodule-of-a-submodule"">Exclude submodule of a submodule</a>
which would apparently do what I want, but I need it to be stored in the top level repository.</p>

<p>Thanks.</p>
","0","11322957","",""
"6334975","79125","2011-06-13 19:05:52","2","201","<git><git-submodules><cherry-pick>","Extracting git history for part of a git repo to create a git submodule -- cherry-pick?","<p><em>A similar question, <a href=""https://stackoverflow.com/questions/1670970/how-to-cherry-pick-multiple-commits"">How to cherry-pick multiple commits</a>, assumes that the commits are consecutive.</em></p>

<p>I have a module that I downloaded as a tarball. I've included it in my main project's git repo and made changes to it. These changes are interspersed with other commits for the main project.</p>

<p>I've realized the error of my ways and want to replace the module with a git submodule. I could just add the current state, but I want to keep my git history. </p>

<p>How can I move each individual commit into my new repo?</p>

<hr>

<p>I think I can do this with cherry-pick, but it's time-consuming. Here's what I have:</p>

<p>Setup my new repo with the main project as a remote (so I can cherry pick):</p>

<pre><code>cd ~/snippets
git remote add main ~/.vim/
git fetch main
</code></pre>

<p>I can see the relevant commits in the main project with <code>git log ~/.vim/snippets</code></p>

<p>I can make a script to cherry pick with </p>

<pre><code>cd ~/.vim/snippets
git log --oneline --reverse --format=""format:git cherry-pick %h #%s"" .
</code></pre>

<p>But if I run the script, there are merge conflicts. After I resolve a merge and commit, I need to remove the successful bits from my cherry pick script and run it again. I'd like to do this automatically, like git rebase.</p>
","0","79125","",""
"24660897","51759","2014-07-09 18:07:40","2","1401","<windows><git><git-submodules>","msysgit 'submodule update' is excessively slow in windows 7","<p>I have 5 submodules and a <code>git submodule update</code> takes 6-8 seconds.  The same <code>git submodule update</code> command on the same repo in ubuntu 13.10 takes 0.4 seconds.</p>

<p>In order to resolve this, I've tried everything listed in these two questions:</p>

<p><a href=""https://stackoverflow.com/questions/2835775/msysgit-bash-is-horrendously-slow-in-windows-7"">Msysgit bash is horrendously slow in Windows 7</a> <br>
<a href=""https://stackoverflow.com/questions/4485059/git-bash-is-extremely-slow-in-windows-7-x64"">Git/Bash is extremely slow in Windows 7 x64</a></p>

<p>I've performed the following:</p>

<ul>
<li>Fresh windows x64 install using virtualbox with plenty of memory and 4 cores</li>
<li>Install msysgit in c:\git\</li>
<li>Disable UAC by turning off the luafv driver in the registry and setting UAC to 'never'</li>
<li>Run git bash as administrator</li>
<li>$HOME variable is on the C: drive</li>
<li><code>export PS1='$'</code> in git bash</li>
<li><code>git config --global core.preloadindex true</code></li>
<li><code>git config --global core.fscache true</code></li>
<li><code>git config --global gc.auto 256</code></li>
<li>No antivirus installed</li>
</ul>

<p>I'm out of ideas and figured I'd ask if anyone has had this same issue, specifically with submodule updates.  Git performance otherwise is acceptable when implementing the above list of changes.  I'm beginning to think the implementation of the git command in windows is actually at fault.</p>
","0","51759","",""
"24666936","1110772","2014-07-10 03:17:31","1","215","<git><gruntjs><git-submodules><githooks><post-commit-hook>","Commit Git ""Supermodule"" using post-commit hook of submodule with grunt-git and grunt-githooks","<p>I have a git repo which contains many submodules. When I commit in a submodule, I have a git hook which is supposed to commit in the ""supermodule"". Unfortunately, the commit in the post-commit hook fails because the ""supermodule"" can't seem to detect the changes in its submodule.</p>

<p>Is there any other way I can achieve this behavior?</p>

<p>I have all this set up through Grunt using <code>grunt-githooks</code> and <code>grunt-git</code>.</p>

<p>Below is my gruntfile:</p>

<pre><code>module.exports = function(grunt) {

  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),

    githooks: {
      all: {
        options: {
            dest: '../../../.git/modules/server/modules/mymodule/hooks'
        },
        'post-commit': 'updateSuperModule'
      }
    },

    gitcommit: {
        all: {
            options: {
                message: 'Updated Submodule',
                cwd: '../../..',
                verbose: true
            },
            files: {
                src: ['.']
            }
        }
    },

    gitpush: {
        all: {
            options: {
                cwd: '../../..',
                verbose: true
            }
        }
    }
  });

  grunt.loadNpmTasks('grunt-githooks');
  grunt.loadNpmTasks('grunt-git');
};
</code></pre>
","0","1110772","0","0"
"62013532","871821","2020-05-26 02:09:01","1","35","<github><jupyter-notebook><google-colaboratory><git-submodules>","How can I fetch .gitmodules directly into its github repository?","<p>I know I can <code>git clone --recurse-submodules</code> to fetch the <code>.gitmodules</code> into the clone and then commit the result back to <code>github</code>, but I'm working with <code>colab</code> which doesn't (to my knowledge) provide such niceties in executing notebooks.  So I'd like to modify the repo on <code>github</code> without the (admittedly not too bad) extra step of cloning onto my system to do the desired modification and doing the commit.</p>
","0","871821","0","0"
"62018647","5170","2020-05-26 09:17:56","18","20485","<git><git-submodules>","Get ""please make sure that the .gitmodules file is in the working tree"" when running the git submodule add command","<p>I'm new to git, currently looking at porting some large projects from mercurial.  We have a root project that just contains the references to all the external projects (submodules in git). I'm trying to recreate this in git.</p>

<p>I have imported a project (foo) into githib.  I've created a new empty project (root) and cloned it locally.  I want to add Foo as a submodule using</p>

<pre><code>git submodule add https://github.com/.../foo.git
</code></pre>

<p>from the /c/Work/GitHub/root (master)</p>

<p>but I keep getting ""please make sure that the .gitmodules file is in the working tree"".</p>

<p>Looking at the documentation, the first run of this command should create the .gitmodules file, but I get this error even if I create it by hand.  Looking for this error on Google just returns the source files with the error but no explanation to why I'm getting it.  I assume it's just my poor understand of git.</p>

<p>What I'm I doing wrong?</p>

<p>EDIT:
I've also tried.</p>

<pre><code>mkdir test
cd test
git init
git submodule add https://github.com/.../foo.git
</code></pre>

<p>I get the same error.</p>
","2","5170","0","0"
"6594005","980640","2011-07-06 09:10:47","5","553","<git><git-submodules><relative-url>","How to work with submodules and n-tiers git repository strategies","<p>We are migrating to git. We have a large number of modules that make up our products, some of them are shared between products. The product is represented by a ""thin"" super repository (ssh://server/product.git) that only contains submodules:</p>

<pre><code>[submodule ""module1""]
path=module1
url=ssh://server/product/module1.git
[submodule ""module2""]
path=module2
url=ssh://server/product/module2.git
...
</code></pre>

<p>I can clone the super repository and work with the submodules and commit them, and then commit the submodules to the super repository. </p>

<p>The problem comes when I want to introduce another tier. There are two basic scenarios (this can combine to make more complex setups, but anything should be a combination of these):</p>

<ol>
<li><p>As a developer, I clone a central repository and work. Then I want to submit my code to our continuous integration server before merging my changes to the central repository. I let the CI server clone my repo. This doesn't work, the CI server will clone my super repo and then it will clone the submodules from the central repository location (since that is what it says in .gitmodules).</p></li>
<li><p>As a team we want to have an integration repository that we work towards before we, at the end of a sprint, merge our code to the central repository. This fails, for the same reason. </p></li>
</ol>

<p>I tried specifying relative URLs for the submodules, but this doesn't work, either, since when we clone the second tier into the third tier the relative URLs resolve relative to the second tier repository location, but the second tier submodule locations are inside the second tier super repository. </p>

<p>Can I have it both? Git submodules and n-tier repository structure?</p>
","1","980640","0","0"
"6597955","561638","2011-07-06 14:22:02","0","312","<git><commit><git-submodules>","git submodules - trying to debug an elusive problem","<p>We use multiple submodules to keep our code modular.  Most developers work in 1 or 2 of them, which makes it nice for them, since they don't have to populate areas of the code they don't care about.  We work on branches.  The submodules and super project are checked out on the same branch.  Now comes the fun part.  they make changes in the submodule, add, commit.  cd up to the superproject, and repeat the commit to record the new version of the submodule they changed.  Then they run supergit pull to update all of the content in their workspace.  This should bring in all the latest versions for all submodules.  Then they push to deliver.  Our build system creates a clone, and populates all of the submodules.  It then finds that one of the submodules that the developer had not populated has a commit that hasn't been committed and pushed in the superproject.  We fail the build now when this happens, but how can we avoid it?  I have asked developers to populate all of the submodules before they push to make sure this doesn't happen, but we have actually seen this problem occur when no changes have been made to the branch.  Over the holiday weekend, when no one made changes, one of the branches started to fail the build.  Is it possible that git is losing commits to the superproject?   </p>
","0","561638","",""
"24899296","341706","2014-07-22 23:03:43","10","7711","<git><unity-game-engine><git-submodules>","unity3d and git submodules is it possible?","<p>TLDR; This is going to be a long winded post but I am sure many of you unity3d developers are also running into the same problem I am. A problem that needs a clear definitive, once and for all answer to save our collective sanity.</p>

<p>So I have been using git for the last 2+ years but I have not dived deep into it too much. I can branch/merge push pull from bitbucket/github etc and that works fine for regular win forms/traditional applications.</p>

<p>Here is the problem. I've long since moved from xna/silverlight over to unity3d and in unity in order to add a reference to a library you actually have to copy the source files from that library into your unity project folder. Although unity does allow you to drop *.dll files into a Plugin folder, there are obvious cross platform compatibility issues, and thus I never want to go there.</p>

<p>I have over a dozen library projects providing various functionality from AI, to content management, to logging, abstracted user input system etc etc. and I have been working on a new level editor for a future game I will be making.</p>

<p>Each individual library project it self is a unity project and the code files for each project are organized in unity as such</p>

<pre><code>Assets\&lt;company name&gt;\&lt;project name&gt;\
Assets\&lt;company name&gt;\&lt;library name&gt;\
Assets\&lt;company name&gt;\&lt;another library name&gt;\
</code></pre>

<p>I do this to keep things highly organized unlike many of the other assets that are on the unity asset store. :(</p>

<p>So my level editor project is using multiple library projects whose code has been imported via copy paste. Each of those libraries are themselves hosted in there own local git repositories. So when I copy paste the code files from the library projects to my main unity project I automatically loose any ability to commit changes I make to that libraries git repo.</p>

<p>What I have been doing this last year has been the fallowing</p>

<ol>
<li>Start a main project <code>Assets\&lt;company name&gt;\&lt;main project name&gt;\</code></li>
<li>Import any library projects (copy/paste code files) <code>Assets\&lt;company name&gt;\&lt;library name&gt;\</code></li>
<li>If I need to make a change to one of the libraries I usually just edit the libraries code file(s) that are in the main project that I am working on. (otherwise more complexity ensues)</li>
<li>Because the main project is also a git repo the changes I make to any library files also gets committed to the main project's repo.</li>
<li>After a while I use CodeCompare (a diff utility) to do a folder comparison of <code>Assets\&lt;company name&gt;\&lt;library name&gt;\</code> with the original location of the library where I previously copied the library files from.</li>
<li>I painstakingly compare each changed code file diff by diff and migrate changes made in my main project over to the original location of the library.</li>
<li>Now that that is done, the library is a git repo so again (2nd time) I have to make commits about the various changes that were made to the code files.</li>
</ol>

<p>Along with that insanity here lies yet another problem. The main project is not the only main project I have on the go right now. I have a handful of projects that all reference (via copy/paste) these other libraries. So now that I have updated the code for the library and committed it I now have to go back through each main project that uses the library and copy/paste over the changes from the libraries git repo over to those main projects.</p>

<p>Work flow summerized </p>

<p><em>MainProjectA->Code files copied from LibraryA->LibraryA files modified inside MainProjectA->LibraryA files merged via diff comparison back to original LibraryA folder location->LibraryA code files then copied back to other projects that use LibraryA IE: MainProjectB, MainProjectC, MainProjectD.</em></p>

<p>Good lord! As my various projects get larger and larger this problem gets compounded more and more. This system works but it is very very tedious.</p>

<h1>Intermission</h1>

<p>So a bit of a short rant. /TakesDeepBreath /sigh  I refuse to use the git command line. It wreaks of MS-DOS ala 1980's. It's 20 freaking 14 people. 2014 and us developers are still geeking out with command lines. In this day and age, I expect more. I am not learning basically a whole new command line language let alone have to switch back and fourth between windows and apps just to do something as fundamentally simple like commit a code change. Something that can be accomplished with 2-3 fast mouse clicks and a short typed message is all that is needed. git = new hawtness + unnecessary command line complexity</p>

<p>Having said that I most often use the built in vs2013 git features for making commits and branching/merging etc. But it does not appear to support submodules, as far as I can tell. So for that I use SourceTree.</p>

<p>End Intermission.</p>

<h1>Enter git submodule hell</h1>

<p>Like I said I have not yet used git a lot beyond it's basic core functionality and I have only done preliminary tests via test projects but I can't get git to work reliably the way I need it to and often when working with submodules there is a bit of confusion, and it often times will not commit because of various errors.</p>

<p>What I want to do is this</p>

<ol>
<li>Create new unity project called MainProjectA and make it a local repo</li>
<li>Add git submodule(s) to MainProjectA from LibraryA (local repo), LibraryB (local repo) etc</li>
<li>If I make changes to code files related to LibraryA inside of MainProjectA I want the ability to commit those specific changes back to LibraryA's repo from within MainProjectA. </li>
</ol>

<p>I have even gone so far as to begin writing a utility that would automatically sync files between 2 different folders as soon as it detects a change. But I abandoned it because although it would solve synchronization issues it would not solve the git commit issues.</p>

<p>Another problem is that all my existing unity projects that have a local repo are setup as fallows</p>

<pre><code>&lt;Unity Main Project Folder&gt;
  |- .git
  |- Assets
    |-Company Name
      |- MainProjectA
  |- Library
  |- ProjectSettings
  |- .gitignore

&lt;Unity LibraryA Folder&gt;
  |- .git
  |- Assets
    |-Company Name
      |- LibraryA
  |- Library
  |- ProjectSettings
  |- .gitignore
</code></pre>

<p>What I want to do is have a LibraryA folder in my main project that is a submodule of my LibraryA project, more specifically I want only the contents of <code>&lt;Unity LibraryA Folder&gt;\Assets\Company Name\LibraryA\</code> to be included as a submodule in my main project folder <code>&lt;Unity Main Project Folder&gt;\Assets\Company Name\LibraryA\</code></p>

<pre><code>&lt;Unity Main Project Folder&gt;
  |- .git
  |- Assets
    |-Company Name
      |- MainProjectA
      |- LibraryA (submodule)
  |- Library
  |- ProjectSettings
  |- .gitignore
</code></pre>

<p>But SourceTree/git complains that I can't add a submodule to a existing repo folder. <code>&lt;Unity Main Project Folder&gt;\Assets\Company Name\</code></p>

<p>I was going to continue writing but ... yeah I think that's enough writing, and my goal should be described well enough by now.</p>

<h1>Conclusion</h1>

<p>I guess I could also ask weather git has matured enough as a product that it will even allow me to do what I am trying to do? Or is it simply not possible given the architecture of git to support what I am trying to do?</p>

<p>Every search has come up empty, YouTube is no help and a waste of time, not to mention every example I can find is a command line example, and does not touch on submodules. </p>

<p>In a normal windows application submodules would not be a problem. The problem is specifically with how unity likes to have all the code files in it's project. That and how I am trying to keep my organized folder structure intact.</p>

<p>Please help. Please. Purdy please. I BEG YOU! I BEG YOU! ON MY FRIEAKIN KNEES BEGGING! :P</p>
","3","341706","0","0"
"6639964","764870","2011-07-10 08:04:04","2","689","<git><git-submodules><git-filter-branch>","using git filter-branch for submodule checkout","<p>I have a git repo with one submodule. I used the method described <a href=""https://stackoverflow.com/questions/3300626/how-to-modify-git-repository-to-add-submodules-in-all-the-past-revisions"">here</a> to connect them.</p>

<p>Now, I'd like to use filter-branch to check out a specific revision from the submodule for each revision of the superproject. I wrote a script that does that, but checkout doesn't work, because in the temporary root, the submodule doesn't have .git directory...</p>

<p>Is there a way to do that?</p>

<p>Thanks.</p>
","3","764870","",""
"24929699","355401","2014-07-24 09:16:02","5","1676","<git><jenkins><git-submodules>","git plugin in Jenkins on Windows does not use credentials with submodule","<p>I have an issue with Jenkins on Windows with git, I can use ssh credentials to fetch git repository from BitBucket but when it tries to fetch the submodule repository, which is on the same account, I get permission exception.</p>

<p>Fetching upstream changes from git@bitbucket.org:mycomp/at.git</p>

<blockquote>
  <p>C:\CI\Git\bin\git.exe --version
      using GIT_SSH to set credentials Bitbucket key
  C:\CI\Git\bin\git.exe fetch --tags --progress git@bitbucket.org:mycomp/at.git +refs/heads/<em>:refs/remotes/origin/</em>
  C:\CI\Git\bin\git.exe rev-parse ""origin/ci^{commit}""
      Checking out Revision a079842300ba7fc9e6f4e7182c94af2cfc3af0ba (origin/ci)
  C:\CI\Git\bin\git.exe config core.sparsecheckout
  C:\CI\Git\bin\git.exe checkout -f a079842300ba7fc9e6f4e7182c94af2cfc3af0ba
  C:\CI\Git\bin\git.exe rev-list a079842300ba7fc9e6f4e7182c94af2cfc3af0ba
  C:\CI\Git\bin\git.exe remote
  C:\CI\Git\bin\git.exe submodule init
  C:\CI\Git\bin\git.exe submodule sync
  C:\CI\Git\bin\git.exe config --get remote.origin.url
  C:\CI\Git\bin\git.exe submodule update
      FATAL: Command ""C:\CI\Git\bin\git.exe submodule update"" returned status code 1:
      stdout: 
      stderr: Cloning into 'include/portal_air'...
      Permission denied (publickey).
      fatal: Could not read from remote repository.</p>
</blockquote>

<pre><code>Please make sure you have the correct access rights
and the repository exists.
Clone of 'git@bitbucket.org:mycomp/portal_air.git' into submodule path 'include/portal_air' failed

hudson.plugins.git.GitException: Command ""C:\CI\Git\bin\git.exe submodule update"" returned status code 1:
stdout: 
stderr: Cloning into 'include/portal_air'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Clone of 'git@bitbucket.org:mycomp/portal_air.git' into submodule path 'include/portal_air' failed

    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:1406)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access$400(CliGitAPIImpl.java:87)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$6.execute(CliGitAPIImpl.java:741)
    at hudson.plugins.git.extensions.impl.SubmoduleOption.onCheckoutCompleted(SubmoduleOption.java:77)
    at hudson.plugins.git.GitSCM.checkout(GitSCM.java:908)
    at hudson.model.AbstractProject.checkout(AbstractProject.java:1414)
    at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:671)
    at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:88)
    at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:580)
    at hudson.model.Run.execute(Run.java:1684)
    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)
    at hudson.model.ResourceController.execute(ResourceController.java:88)
    at hudson.model.Executor.run(Executor.java:231)
</code></pre>
","0","355401","",""
"43761594","794424","2017-05-03 13:33:13","21","17339","<cmake><git-submodules>","CMake and using git-submodule for dependence projects","<p>Consider the following three projects.</p>

<p><code>ProjectA</code> does not have any dependencies and its <code>CMakeLists.txt</code> at top level is like the following,</p>

<pre><code>cmake_minimum_required(VERSION 2.8.4)
project(A CXX)
add_library(a ${PROJECT_SOURCE_DIR}/liba.cpp)
</code></pre>

<p><code>ProjectB</code> depend on <code>ProjectA</code>, and I add <code>ProjectA</code> as a git-submodule, so its structure will be like below,</p>

<ul>
<li><code>ProjectB</code>

<ul>
<li><code>CMakeLists.txt</code></li>
<li><code>libb.cpp</code></li>
<li><code>ProjectA</code> (git submodule)

<ul>
<li><code>CMakeLists.txt</code></li>
<li><code>liba.cpp</code></li>
</ul></li>
</ul></li>
</ul>

<p>and <code>ProjectB</code>'s <code>CMakeLists.txt</code> look like the following</p>

<pre><code>cmake_minimum_required(VERSION 2.8.4)
project(B CXX)
add_subdirectory(ProjectA)
add_library(b ${PROJECT_SOURCE_DIR}/libb.cpp)
target_link_libraries(b a)
</code></pre>

<p>So far it is alright.</p>

<p>Now let's say it comes a <code>ProjectC</code>. It depends on both <code>ProjectA</code> and <code>ProjectB</code>. And let's assume that I am not aware that <code>ProjectB</code> depends on <code>ProjectA</code> already (e.g., I did not create the two before. Or think that <code>ProjectC</code> actually have many dependencies and I shall not be forced to figure out an exact dependency tree among them).</p>

<p>Anyway, I add both <code>ProjectA</code> and <code>ProjectB</code> as git submodules in <code>ProjectC</code>. So it has the following structure,</p>

<ul>
<li><code>ProjectC</code>

<ul>
<li><code>CMakeLists.txt</code></li>
<li><code>libc.cpp</code></li>
<li><code>ProjectA</code> (git submodule)

<ul>
<li><code>CMakeLists.txt</code></li>
<li><code>liba.cpp</code></li>
</ul></li>
<li><code>ProjectB</code> (git submodule)

<ul>
<li><code>CMakeLists.txt</code></li>
<li><code>libb.cpp</code></li>
<li><code>ProjectA</code> (git submodule of the submodule <code>ProjectB</code>)

<ul>
<li><code>CMakeLists.txt</code></li>
<li><code>liba.cpp</code></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p>And it has the following <code>CMakeLists.txt</code>.</p>

<pre><code>cmake_minimum_required(VERSION 2.8.4)
project(C CXX)
add_subdirectory(ProjectA)
add_subdirectory(ProjectB)
add_library(c ${PROJECT_SOURCE_DIR}/libc.cpp)
target_link_libraries(c a b)
</code></pre>

<p>Now if I try to run <code>cmake</code> for <code>ProjectC</code>, I get the following error.</p>

<pre><code>add_library cannot create target ""a"" because another target with the same
name already exists....
</code></pre>

<p>I understand the reason of this error. It is because <code>ProjectA</code> is added as a subdirectory twice and all targets created by <code>add_library</code> is <strong>Global</strong>. For this particular case, I can fix it by remove <code>add_subdirectory(ProjectA)</code> in the <code>ProjectC/CMakeLists.txt</code>. However, consider a situation that <code>ProjectC</code> has many dependencies, and there might or might not be dependencies among them. From point of view of the developer of <code>ProjectC</code>, he should not need to care about the inter-dependencies among its own dependencies.</p>

<p>In this situation, what is the best way to have <code>ProjectC</code> include its dependencies? Having <code>ProjectA</code> and <code>ProjectB</code> as a git-submodule in source form is a must. I am aware that I can simply install <code>ProjectA</code> and <code>ProjectB</code> somewhere, and <code>ProjectC</code> only need to find the installed files somewhere. However, if possible, I would like to avoid that kind of solution (for example, if the installation was built with a different ABI than the one used by <code>ProjectC</code>, incompatibility issues arise). I would like all three projects to be built inside the build tree of <code>ProjectC</code>.</p>
","1","794424","0","0"
"60386599","12749695","2020-02-25 02:14:44","1","164","<git><git-submodules>","Is it possible to recursively init git submodules without also updating them?","<p>I have a git repository with a lot of submodules, and I would really like to recursively init all of them, configure a few to not update with 'git config submodule.&lt;my submodule&gt;.update none', then update everything I have not set to none with 'git submodule update --recursive'.</p>

<p>Is there a way to recursively init all submodules WITHOUT updating? 'git submodule update --init --recursive' will not work for me because the --init seems to override my 'git config submodule.&lt;my submodule&gt;.update none' setting.</p>
","3","12749695","0","0"
"50108052","9458257","2018-04-30 20:51:41","0","54","<git><github><git-submodules><git-add>","undo submodule and make it a directory to a github repository","<p>I cloned a repository from github, and I would like to make it a directory in an other github repository. Though it is considered as a submodule (and I don't want it to be a submodule, but a directory). 
In this directory i have some script that I would like to push on my github repository.</p>

<p>When i do : <code>git status</code> i get this error message:</p>

<pre><code>On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

    modified:   my_directory (untracked content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I tried to do <code>git add .</code> ; <code>git add my_directory</code> and to commit it, but it's not working neither.</p>

<p>I don't find any .gitignore or .gitmodules...</p>

<p><strong>edit :</strong></p>

<p>finally i find how to do what i want, i had to delete the .git that was in my directory. Though it was an invisible file...
Once this was done, i just had to do <code>git commit -a</code> and then <code>git push</code></p>
","0","9458257","",""
"14846967","170413","2013-02-13 05:28:56","12","7383","<git><foreach><git-submodules>","git submodule foreach - Robust way to recursively commit a child module first?","<p>Is there a robust way to do a recursive depth-first <code>git submodule foreach</code> command? I am using the <code>foreach --recursive</code> command which does the job, except it is breadth-first. This is a problem because if I have the following structure:</p>

<ul>
<li>A
<ul>
<li>B</li>
</ul></li>
<li>C</li>
</ul>

<p>And I have commits in all three, a <code>foreach --recursive add -A &amp;&amp; git commit ...</code> will hit A, B, C, which is problematic if I want the supermodule to capture the commits of B at that time.</p>

<p>I found <a href=""http://marc.info/?l=git&amp;m=120997867213008"">this discussion</a> from 2008, but it does not look like any of the suggested features are in the current version of Git that I have (1.7.9.5).</p>

<p>I wrote a small bash function to do this (excuse the shorthand naming):</p>

<pre><code>function git-sfed() { git submodule foreach ""git submodule foreach '$*' &amp;&amp; $*""; }
</code></pre>

<p>And testing it with the following fanciful command seems to work:</p>

<pre><code>git-sfed 'python -c ""import sys; print sys.argv"" $path'
</code></pre>

<p>Does this command seem robust, or are there other common existing methods?</p>
","1","170413","0","0"
"15516872","2189521","2013-03-20 06:37:46","1","66","<git><git-submodules>","Structure of git repos where code shared across repos needs to be in the root of the repo","<p>I'm trying to come up with a reasonably clean way to represent the following in Git:</p>

<ul>
<li><p>A base project that contains common code used across a number of projects.</p></li>
<li><p>Multiple projects that extend the base project with additional files in several subdirectories of the base project.</p></li>
<li><p>Extension projects often have project-specific modifications to the base project. We want the ability to push these modifications back upstream while not also pushing the extension specific stuff up.</p></li>
</ul>

<p>My current thinking is something along the lines of:</p>

<ul>
<li><p>Separate repos for base project and each extension project.</p></li>
<li><p>For each extension project, fork the base project and create a submodule for the extension-specific stuff. Symlink subdirectories of the submodule to the expected locations in the superproject directory structure.</p></li>
</ul>

<p>Is there a better way?</p>
","0","2189521","0","0"
"15546073","72824","2013-03-21 11:20:42","2","2368","<git><bitbucket><git-submodules><ssh-keys><openshift>","Using git submodules with ssh authentication on Openshift","<p>I created a submodule (a bitbucket repo) on my openshift repo.</p>

<p>My current <code>.gitmodules</code> configuration:</p>

<pre><code>[submodule ""php""]
    path = php
    url = git@bitbucket.org:sgtcarneiro/repo.git
</code></pre>

<p>The problem is that after I push this code into my Openshift app i get the folling error:</p>

<pre><code>remote: Host key verification failed.
remote: fatal: The remote end hung up unexpectedly
remote: Clone of 'git@bitbucket.org:sgtcarneiro/repo.git' into submodule path 'php' failed
</code></pre>

<p>This is expected since i didn't mention anywhere on bitbucket the pub key from the Openshift server. I already tried to check my <code>.ssh/</code> to find/edit the public key but I do not have any permissions to access that.</p>

<p>PS: As a workaround I am using HTTPS authentication with user and password on the submodule and is working fine.</p>
","0","72824","0","0"
"15560142","769","2013-03-21 23:36:41","0","518","<git><git-submodules>","git add my remote for pushing submodule","<p>I have a main app that stored in <em>our</em> git. Within that app we are using a third-party component that's hosted on <em>github</em>. We make numerous customizations to this component, and as such felt that to make updates easier, we should add the component as a submodule.</p>

<p>It was my understanding that by adding this component as a submodule, we would be able to pull upstream changes from <em>github</em> and merge those into our submodule. We would then push those changes to <em>our</em> git.</p>

<p>I successfully added the component as a submodule, and cloned it into my app's directory. I've merged in all our modifications, and committed those locally. </p>

<p>My question is, how do I now add our git as a remote for the submodule so that I can push all my customizations to that server? </p>
","0","769","",""
"68718735","12875055","2021-08-09 21:28:24","0","55","<git><git-submodules>","How do I modify an existing git submodule to track a branch instead of a commit, and vice-versa?","<p>When you add a submodule to your project using the traditional <code>git submodule add https://example.com/someproject.git</code> form, git ties your project to a specific commit in the subjproject. Initially, it's whatever commit was master at the time you used the command, then it's whatever you explicitly check out.</p>
<p>For a while now, git has had support for submodules to track the tip of a branch. I can add such a submodule with the syntax <code>git submodule add -b somebranch https://example.com/someproject.git</code>. This adds branch-related info in git, and you can see this in .gitmodule. I can do <code>git submodule update --remote</code> from a project to update the submodule to the latest commit in the chosen branch (somebranch in the example above).</p>
<p>Currently I have two projects which use the same submodule added via the traditional form.</p>
<ol>
<li><p>I'm working on a new major change, and would like to temporarily switch to the branch tracking. So I'm working in the parent projects in branches called newfeature. I'm also making frequent changes to the submodule's sub-newfeature branch. I'd like the parent project's newfeature branch to always be using the latest commit from the submodule's sub-newfeature branch. How do I do this?</p>
</li>
<li><p>When I'm done in a month or so, I'd like to undo the change from #1. So remove the branch tracking, and go back to traditional submodule behavior. How would I do this?</p>
</li>
</ol>
","6","12875055","",""
"15674064","1279497","2013-03-28 04:01:58","48","16846","<git><github><git-submodules><travis-ci>","How to fix a permission denied (publickey) error for a git submodule update in the Github Travis CI build?","<p>I cannot update the git submodule, with the error:</p>

<pre><code>$ git submodule init
Submodule 'build/html' (git@github.com:quadroid/clonejs.git) registered for path 'build/html'
...
$ git submodule update
Cloning into 'build/html'...
Warning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.
</code></pre>

<p>But when I do the same tasks locally, everything is OK.</p>

<p>How do I fix this so that the Travis CI build passes and I can still click on the submodule in the repo to direct to it?</p>
","3","1279497","0","0"
"32567031","547262","2015-09-14 14:13:07","1","870","<git><git-submodules>","How to hook a git submodule?","<p>I have installed a hook on the staging servers, allowing me to push to staging very easy. However, the code includes a submodule and this one does not get copied over due to access rights.</p>

<p>This is the post-receive hook I am using:</p>

<pre><code>#!/bin/sh
GIT_WORK_TREE=/home/www/staging git checkout -f
pwd
cd /home/www/staging/
git --git-dir=/home/git/staging.git --work-tree=/home/www/staging submodule update --init --recursive
</code></pre>

<p>After trying to <code>git push staging</code> I get the following:</p>

<pre><code>remote: /home/git/staging.git
remote: Cloning into 'MEW'...
remote: Host key verification failed.
remote: fatal: Could not read from remote repository.
remote: 
remote: Please make sure you have the correct access rights
remote: and the repository exists.
remote: Clone of 'git@bitbucket.org:demo/demo-mew.git' into submodule path 'MEW' failed
</code></pre>

<p>Do I need to create a cert on the staging server and add this one to bitbucket?</p>
","2","547262","",""
"50394520","9806639","2018-05-17 14:54:24","7","1155","<git><git-submodules>","Make some submodules optional in git","<p>We have a git repo that is serving multiple projects/targets.
In addition there are 3 submodules for separately developed modules that are referenced and pulled into the workspace.</p>

<p>Are are going to have a 4th repo for a module that will be needed only for a specific project and only specific engineers have permissions to access it.
Is there any way to make this 4th submodule optional or it's all-or-nothing?</p>

<p>Thanks a lot,</p>

<p>Guy.</p>
","4","9806639","0","0"
"15718222","1175555","2013-03-30 11:53:03","1","224","<git><subdirectory><git-submodules>","unwanted subfolder when adding a git submodule","<p>I am trying to add a git submodule. The submodule itself works without any problem but my question is about the created layout when adding the submodule.</p>

<p>I am adding a simple submodule called utils that only contains a file.</p>

<p>I am using this</p>

<pre><code>git submodule add --force ssh://myserver/home/git_repositories/utils js/utils
</code></pre>

<p>because I want to add the submodule utils into the js/utils folder</p>

<p>the problem is that after doing this operation, inside of the js/utils folder i find another folder called utils, like js/utils/utils and there I find my javascript.</p>

<p>I want to have a layout like js/utils/ and here my javascript.</p>

<p>I have tried to eliminate the /utils in the git submodule add like</p>

<pre><code>git submodule add --force ssh://myserver/home/git_repositories/utils js/
</code></pre>

<p>but then git yields</p>

<pre><code>'js' already exists in the index
</code></pre>

<p>Do you know any way to avoid that secondary /utils?</p>

<p>Thanks a lot in advance!</p>

<p>prussian blue</p>
","4","1175555","0","0"
"15740393","955926","2013-04-01 08:53:35","1","65","<git><package><version><git-submodules>","Can a git submodules workflow coexist with versioned packages?","<p>Can anyone explain how something like the following system could be brought outside of git, i.e. using version numbers instead of git's context via branches and submodules:</p>

<p>Let's say we have some tools that are in a <strong>project</strong> git repo. The assets are in an <strong>assets</strong> repo, and because the data - organization, naming, number of data fields, etc. - changes over time, and because the tools must also update to work against these changes, we want to make the <strong>asset</strong> repo a submodule of the <strong>project</strong> repo. This lets us do things like branch <strong>project</strong>, checkout an older version, and have the assets move back in time to match, so the tools and data stay in sync over time. This lets us, e.g., checkout everything from a week ago.</p>

<p>It also means we can have a crazy idea for reshaping the data to make for new abilities in a particular tool, and we can branch <strong>project</strong>, then branch <strong>assets</strong> and in the new branch in <strong>project</strong> we can check out that new branch in <strong>assets</strong>, and effectively work on everything separately. If real work comes in, we can just hop back to <strong>project</strong>'s master, and the assets update to follow suit. If the crazy new data structure works out, we can branch (or reuse the first branch) and bring the other tools in line with the new data, and when all of it works, we can merge everything back, without interrupting anyone (provided interfaces haven't changed). It seems like a nice workflow, and it keeps assets separate from tools, so various departments can use them without needing a large repo of tools that don't even work on their systems, and I can pull down the tools without a huge vat of assets if I just want to work on some logic separate from the assets on my laptop.</p>

<p>Is there anything approaching this level of complexity and flexibility using packages and version numbers? I've never used them, but I keep feeling like I'll need to if I want to break tools out of git for distribution elsewhere, while preserving interdependencies. How do people resolve git and package version numbers? I've been studying this for awhile and I'm still quite confused by all of it.</p>
","0","955926","0","0"
"32579466","2994037","2015-09-15 06:48:50","10","21592","<gitlab><git-submodules>","Can’t get submodules to work in gitlab","<p>I have a project in my computer with the following structure:</p>

<pre><code>.
├── bin
├── code
│ └── src
├── data
├── doc
├── experiments
└── reports
└── summary
</code></pre>

<p>code/src and /reports/summary are submodules defined in .gitmodules</p>

<pre><code>[submodule ""code/src""]
path = code/src
url = ./code/src/

[submodule ""reports/summary""]
path = reports/summary
url = /home/zunbeltz/Proyectos/reports/base/
</code></pre>

<p>I created a project in the gitlab of my workplace (version 7.9.4). After adding the new origin and 
git push -u origin master
The links of the submodules are broken with a 500 error code.</p>

<p>I tried also in gitlab.com, (version 7.14) and I get a 404 error</p>

<p>Does someone know what is going here?</p>

<p>Note: I did post this message on the gitlab forum, but have any answer. </p>
","1","2994037","0","0"
"15765926","697190","2013-04-02 13:52:26","12","6251","<git><git-submodules>","Error after removing submodule: The following path is ignored by one of your .gitignore files:","<p>I'm getting this error after I've removed a submodule. The path in question is not in my .gitignore file, nor is there anything relevant in my .git/info/exclude file. I don't have a .gitignore_global file. Why is git trying to ignore this path and how can I fix this?</p>

<pre><code>The following path is ignored by one of your .gitignore files:
MyTest/MyTest/lib/submodules/ScreenRecorder
Use -f if you really want to add it.
</code></pre>

<p>This is the command I'm trying to execute:</p>

<pre><code>git submodule add https://github.com/kishikawakatsumi/ScreenRecorder.git MyTest/MyTest/lib/submodules/ScreenRecorder
</code></pre>

<p>This is being executed from my git repos root directory.</p>
","4","697190","0","0"
"50432632","1118211","2018-05-20 07:31:30","3","202","<git><git-submodules><git-push>","Adding a pushurl to git submodule","<p>I want to add a project into my repo as a submodule. For example, I want to add <a href=""https://aur.archlinux.org/packages/gnome-keyring-query/"" rel=""nofollow noreferrer"">https://aur.archlinux.org/packages/gnome-keyring-query/</a> as a submodule. I have added it and looks like it's working, i.e. <code>git submodule update --recursive</code> works. </p>

<p>Now I have added a new file (i.e. <code>Makefile</code>) to <code>gnome-keyring-query</code> and I want to keep that submodule into my repo with that <code>Makefile</code>. Therefore, I have added a <code>pushurl</code> (my repository url) to the <code>.gitmodule</code> file. But it does not work, I mean, I can't push. Then I tried adding the <code>pushurl</code> to <code>.git/modules/...path.../gnome-keyring-query/config</code> file. Still it does not work.</p>

<p>Any idea?</p>
","2","1118211","0","0"
"15953250","633318","2013-04-11 15:46:57","0","755","<git><git-submodules>","git add submodule of remote","<p>I have a submodule in a git remote repository. I cloned the repository before the remote submodule was created.</p>
<h1>How can I add the submodule of the remote repository?</h1>
<p>I tried the following:</p>
<pre><code>$ git submodule init
$ git submodule update
</code></pre>
<p>and</p>
<pre><code>$ git submodule update --init --recursive
</code></pre>
<p>But none of those commands worked—there is no .gitmodules file.</p>
<p>The remote has a <code>.gitmodules</code> file with information about the submodule. In the remote repository:</p>
<pre><code>$ git submodule
+79444cf2aaa9279b4838f52b81cc40ad3f116771 Appendix
</code></pre>
<p>The <code>.gitmodules</code> file was added to the repository as evidenced by:</p>
<pre><code>$ git status .gitmodules
# On branch master
nothing to commit (working directory clean)
</code></pre>
<p>If <code>.gitmodules</code> had not been committed this command would have stated that it was untracked.</p>
","7","633318","",""
"68789083","2897115","2021-08-15 06:01:02","0","59","<git><git-submodules>","how to create add a git repo as submodule after its created locally first","<p>I have the following</p>
<pre><code>project_main
--test1.txt
--text2.txt
--.git
--new_folder  &lt;-- currently its local repo
  --test1.txt
  --text2.txt
  --.git
</code></pre>
<p>Now in the <code>new_folder</code> I did</p>
<pre><code># inside new_folder
git add remote git:someurl
git add -A; git commit -m &quot;first commit&quot;
git push -u origin master
</code></pre>
<p>Now how to add the <code>new_folder</code> as a <code>submodule</code> to the <code>project_main</code></p>
<p>Generally we add submodule using (i.e getting some remote repo)</p>
<pre><code>git submodule add -- git://someurl new_folder
</code></pre>
<p>but here I want a newly created repo to be added as submodule.</p>
","0","2897115","0","0"
"15979337","633318","2013-04-12 19:24:44","4","7037","<git><git-submodules>","Why is git submodule path wrong?","<p>I have a git repository (which I'll refer to as <code>ml</code>) located at</p>

<pre><code>ssh://ml-fey/usr/projects/data/nuclear/mc/type1
</code></pre>

<p>This repository has a submodule. The <code>.gitmodules</code> file looks like this</p>

<pre><code>[submodule ""Appendix""]
    path = Appendix
    url = /usr/projects/data/nuclear/mc/type1/Appendix
</code></pre>

<p>I can clone the repository to a new repository (which I'll refer to as <code>XL</code>), however when I try to update the submodule I get this error</p>

<pre><code>$ git submodule update
Cloning into 'Appendix'...
fatal: '/usr/projects/data/nuclear/mc/Appendix' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Clone of 'ssh://ml-fey/usr/projects/data/nuclear/mc/Appendix' into submodule path 'Appendix' failed
</code></pre>

<p>Notice that the directory from which it is search for the <code>Appendix</code> submodule is missing the final <code>type1</code> directory. The reason git can't update the submodule in <code>XL</code> is because <code>ssh://ml-fey/usr/projects/data/nuclear/mc/Appendix</code> doesn't exist. Where did the <code>type1</code> go?</p>

<p>The <code>.gitmodules</code> file for the <code>XL</code> repository looks like:</p>

<pre><code>[submodule ""Appendix""]
    path = Appendix
    url = /usr/projects/data/nuclear/mc/type1/Appendix
</code></pre>
","0","633318","0","0"
"16016953","633318","2013-04-15 13:50:59","-1","206","<git><git-submodules>","git remote submodule url doesn't apply to local git repository","<p>I have a git repository that has a submodule with a url that points to a local directory on the machine. (The directory is actually inside the directory of the git repository, but should be maintained as a separate project.) This works well until I clone that repository to a remote machine. The submodule keeps the url that is local to that remote repository—it doesn't exist on the cloned repository. </p>

<p>Is there some way to make this work? Or, should I just remove the submodule and keep track of it separately?</p>
","0","633318","0","0"
"16020216","1523603","2013-04-15 16:28:38","18","10270","<ios><github><repository><git-submodules><cocoapods>","Working with git submodules/cocoapods","<p>I am working on a project which includes other repositories from Git.</p>

<p>I would like to keep up to date with these repositories. Know what are the latest features, bug fixes etc. 
Qu 1) What is the best way to keep up to date with a repository on Git without receiving emails of all issues reported etc?</p>

<p>After this is complete I would like to know the best way to include these into your project. I understand you can copy the source code into the project, but what are cocoapods/sub modules used for? For example, what is the correct way to update your project with the latest changes to that included repository? </p>

<p>Are there any GUIs for either of these methods as opposed to terminal?</p>
","0","1523603","0","0"
"16034704","99834","2013-04-16 10:28:11","1","268","<git><mercurial><git-submodules><subrepos><mercurial-subrepos>","How to use mercurial or git subrepositories that are connected to the latest release tag?","<p>I am looking for a solution that would allow me to use subrepositories that are getting not the HEAD and instead a specific <code>RELEASE</code> tag, or if possible the latest tag.</p>

<p>Is this possible, how should I implement this? Did anyone implemented this?</p>
","0","99834","",""
"16080415","655372","2013-04-18 10:25:09","11","1818","<git><git-submodules><gitlab>","different push/pull urls for git submodule","<p>I'm using the <a href=""http://en.wikibooks.org/wiki/Git/Submodules_and_Superprojects"">git superproject pattern</a> in a large project which is deployed by a Teamcity build agent which does not have a repository account, however the repository is set up to allow anonymous cloning. For this reason I have set up the submodules with their <code>http://</code> url rather than their git url. The issue with this is that the repository rejects http pushes:</p>

<pre><code>Total 0 (delta 0), reused 0 (delta 0)
error: RPC failed; result=22, HTTP code = 401
fatal: The remote end hung up unexpectedly
fatal: The remote end hung up unexpectedly
</code></pre>

<p>So every time I update the submodules when switching branches, I have to do a <code>git remote add-url --push</code> to add the <code>git://</code> url.</p>

<p>Is there any way to set up the submodules in the superproject such that they already use the <code>http://</code> url for pulling and the <code>git://</code> url for pushing?</p>
","1","655372","0","0"
"50474445","4596596","2018-05-22 18:40:38","9","280","<r><github><git-submodules><r-package>","How could I release an R package on github using github submodules?","<p>I have an R package on github. This R package has C++ dependencies which I include in <code>/src</code>. </p>

<p>The correct way I would normally do this (outside of R) is create submodules within the github repo, which could link to the correct commits as dependencies. </p>

<p>The problem with doing this in R is that these subdirectories will be interpreted as ""empty"" and the installation won't work, e.g. </p>

<pre><code>&gt; devtools::install_github(""reponame/packagename"")
* checking for file 'bambi/DESCRIPTION' ... OK
* preparing 'packagename':
* checking DESCRIPTION meta-information ... OK
* cleaning src
* checking for LF line-endings in source and make files
* checking for empty or unneeded directories
...
</code></pre>

<p>So, the <code>checking for empty or unneeded directories</code> causes the errors, because the submodules are interpreted as empty subdirectories. Therefore, it cannot find the necessary dependencies, and I'll run into a fatal error upon <code>build</code></p>

<p>(1) Yes, one way to solve this is to physically put the dependencies within the R package. That does defeat the purpose of submodules though, which are very useful.</p>

<p>(2) It appears using the following argument works:</p>

<pre><code>devtools::install_git(""reponame/packagename"", args=""--recursive"")
</code></pre>

<p>The problem with this is, this isn't default behavior. I'm nervous about getting dozens of github issues from users who ran <code>devtools::install_git(""reponame/packagename"")</code> and didn't read the fine print in the README</p>

<p>(3) Is there a better way? What is the standard method of releasing R packages as a github repo using submodules?</p>
","8","4596596","0","0"
"16095854","2297440","2013-04-19 01:36:35","1","61","<git><git-submodules>","Adding to a git submodule locally","<p>So I have a git repository with all my commonly used wordpress plugins.<br>
I also have a wordpress environment with themes and plugins that are in git.</p>

<p>What I want to do is have the common plugins as a submodule in my wordpress environments, however some sites may need extra plugins.  Problem is as far as I can tell wordpress requires all plugins need to be in the 1 plugins folder (so can't have subfolders).</p>

<p>Can I add to a submodule and have it committed to the environment repository without committing to a submodule.</p>

<p>What about when I clone this environment repo, can I get all the plugins, not just the ones in the commonly used plugins repo?</p>

<p>Thanks :)</p>
","0","2297440","0","0"
"68819239","15506167","2021-08-17 14:30:53","1","574","<github><git-submodules><cloning>","Error "" pathspec '–-recursive' did not match any file(s) known to git"" when running submodule update","<p>I am trying to update submodules in a repo. I have successfully cloned the repo and used git checkout to successfully switch to the correct branch I need to be on. When I run <code>git submodule update --init -–recursive</code> in that branch I get the following:</p>
<blockquote>
<p><code>error: pathspec '–-recursive' did not match any file(s) known to git</code>.</p>
</blockquote>
<p>I have previously followed this process on a Macbook pro and did not get an error, but am currently getting the error on Windows. I have the latest version of Git installed (2.32.0). I first considered that this could be a Github SSH key issue, but I have confirmed that it asks for my SSH passphrase and proceeds with the cloning to my local machine, so probably not security related. The Git documentation states that this submodule update is mostly foolproof, so I'm unsure where to go from here. I've also tried running <code>git submodule foreach git pull origin master</code> before the submodule update
and same error. Any assistance is appreciated.</p>
","0","15506167","0","0"
"16160993","1442517","2013-04-23 04:30:07","8","6671","<git><git-submodules>","Moving a git working copy containing submodules","<p>A recent change in Git changed the way the <code>.git</code> directory is handled when using submodules.
Instead of having one <code>.git</code> per submodule, everything is now in the ""root level"" <code>.git</code> directory (the one corresponding to the working copy including the submodules).</p>

<p>Then, in each submodule, a file is created which points to the new location of the <code>.git</code> directory.</p>

<p>In <a href=""https://github.com/roboptim/roboptim-core"" rel=""nofollow noreferrer"">my project</a>, I have the following <code>.gitmodules</code> file:</p>

<pre><code>[submodule ""tests/shared-tests""]
        path = tests/shared-tests
        url = git://github.com/roboptim/roboptim-shared-tests.git
[submodule ""cmake""]
        path = cmake
        url = git://github.com/jrl-umi3218/jrl-cmakemodules.git
</code></pre>

<p>When I do <code>git clone --recursive</code>, I then obtain:</p>

<pre><code>$ cat cmake/.git
gitdir: /home/moulard/profiles/default-x86_64-linux-ubuntu-12.04.1/src/unstable/roboptim/roboptim-core/.git/modules/cmake
</code></pre>

<p>I am currently using Git 1.8.1.5.</p>

<p>My questions are:</p>

<ol>
<li>Why did this behavior change? I don't see any obvious gain to this new strategy.</li>
<li>How can I then move safely a working copy? (if I move my working copy, I get an error message telling me that the path to the broken gitdir is not a Git repository anymore)</li>
</ol>

<p>Please note that this is not the same as the previous question <a href=""https://stackoverflow.com/questions/13252529/moving-the-parent-directory-of-a-git-repository-that-contains-submodules"">Moving the parent directory of a git repository that contains submodules</a> in the sense that I am <em>sure</em> this is not an issue related by the presence of an absolute path in my <code>.gitmodules</code> file.</p>
","0","1442517","0","0"
"32776018","521957","2015-09-25 06:22:14","24","24748","<git><git-submodules><cloud9-ide>","How to `git submodule add` Existing sub Repository?","<h3>The Question</h3>

<p>How to add existing sub repository as a submodule in git?</p>

<h3>The Why</h3>

<p>I have a private <code>codespace</code> supermodule with submodules scattered randomly:</p>

<pre><code>codespace (git repo, private)
├── Archived_projects (git repos)
└── Projects
    ├── project-foo (git repo)
    └── project-bar (git repo)
</code></pre>

<p>Sometimes submodules have commits not ready to be pushed. But I want them to be saved while pushing supermodule <code>codespace</code>.<br>
<code>codespace</code> is a repo cloned to <a href=""http://c9.io"" rel=""noreferrer"">c9.io</a> workspace or other places.</p>

<h3>What I Do</h3>



<pre class=""lang-console prettyprint-override""><code>linus@machine /cygdrive/f/__Storage__/Workspace
$ git clone https://github.com/octocat/Spoon-Knife.git
Cloning into 'Spoon-Knife'...
$ cd Spoon-Knife/
$ git clone https://github.com/octocat/Spoon-Knife.git ./foo/bar
Cloning into './foo/bar'...
$ git add .
</code></pre>

<p>From <strong>cmd.exe</strong></p>

<pre class=""lang-console prettyprint-override""><code>&gt; git submodule add https://github.com/octocat/Spoon-Knife.git ./foo/bar
'foo/bar' already exists in the index
&gt; cat .gitmodules
cat: .gitmodules: No such file or directory
</code></pre>

<p>From <strong>cygwin.exe</strong> (bash)</p>

<pre class=""lang-console prettyprint-override""><code>$ git submodule add https://github.com/octocat/Spoon-Knife.git ./foo/bar
': not a valid identifier/Git/mingw64/bin/gettext.sh: line 89: export: `sm_path
'' already exists in the index
$ cat .gitmodules
cat: .gitmodules: No such file or directory
</code></pre>

<h3>Reference</h3>

<pre class=""lang-console prettyprint-override""><code>git submodule [--quiet] add [-b &lt;branch&gt;] [-f|--force] [--name &lt;name&gt;]
              [--reference &lt;repository&gt;] [--depth &lt;depth&gt;] [--] &lt;repository&gt; [&lt;path&gt;]

&lt;repository&gt; is the URL of the new submodule’s origin repository.

&lt;path&gt; is the relative location for the cloned submodule to exist in the superproject. If &lt;path&gt; does not exist, then the
submodule is created by cloning from the named URL. If &lt;path&gt; does exist and is already a valid Git repository, then this is
added to the changeset without cloning. This second form is provided to ease creating a new submodule from scratch, and
presumes the user will later push the submodule to the given URL.

In either case, the given URL is recorded into .gitmodules for use by subsequent users cloning the superproject. If the URL
is given relative to the superproject’s repository, the presumption is the superproject and submodule repositories will be
kept together in the same relative location, and only the superproject’s URL needs to be provided: git-submodule will
correctly locate the submodule using the relative URL in .gitmodules.
</code></pre>

<p><strong>If <code>&lt;path&gt;</code> does exist and is already a valid Git repository, then this is added to the changeset without cloning.</strong>  </p>

<p>Why this doesn't work in my case?</p>
","1","521957","0","0"
"16224603","2321201","2013-04-25 20:59:32","5","1450","<git><git-submodules>","Convert git repo to submodule","<p>So I am fairly new to the whole <code>git</code> topic. But what I am trying to do is syncing my <code>dotfiles</code> across multiple machines. I know there are plenty of tutorials out there and I got the basic concept. But my question is a tick more specific. </p>

<p>First things first: I am using Windows (for now) and <code>Vim</code>. On top of that I use <code>vundle</code> to manage my plugins. Now the plugins are <code>git-repos</code> themselves. The directory <code>~/.vim</code> (which is the main repo I want to sync) contains them.</p>

<p>So my question is, how do I initialize a <code>submodule</code> of an existing repo? </p>

<p>What I got now is a bunch of green folders in my <code>~/.vim/bundle/...</code> which represent the other repos. The <code>git status</code> command reports them as <em>untracked content</em> (and no its not my <code>.gitignore</code> doing some funky stuff).</p>

<p>You might want to take a look at my repo if you are unfamiliar with the green folder ""<a href=""https://github.com/tairun/dotfiles.test"" rel=""noreferrer"">phenomenon</a>"".</p>

<p>P.S. One of the subfolders says <em>modified content</em> instead of <em>untracked content</em>, even though I didn't touch it. I have no idea why.</p>
","0","2321201","0","0"
"16268631","1008881","2013-04-28 22:21:18","4","1764","<git><laravel><laravel-4><composer-php><git-submodules>","How should git submodules be set up for laravel 4 composer packages?","<p>I'm building an app with laravel 4, and am looking to deploy to a cloud server for further testing. The general process I usually do is local > push to github > clone to server.</p>

<p>The problem with this is that pretty much all of the laravel/composer packages I've added are ignored because they have their own git repos – I didn't really think about this beforehand.</p>

<p>I understand the concept of submodules, but I'm not quite understanding how to set them up. Do I have to add a submodule in the parent tree for every package I install to the app? Is there a more automated way of handling this?</p>

<p>Or am I completely off, and should these be updated on the server with composer?</p>
","0","1008881","0","0"
"32947108","1139533","2015-10-05 11:08:24","0","2325","<windows><git><jenkins><git-submodules>","Unable to retrieve git submodule in jenkins with git-client plugin","<p>I'm trying to have Jenkins retrieve the submodules of a repository, but I cannot get it to work. I've looked around on the internet for a solution, but most problems there center around authentication, which is not the issue in this case. From what I've been able to gather from the error message, the issue seems to be related to the way the git-client plugin handles reponses from the command-line tools.</p>

<p>As we had Git for Windows version 2.6.0 installed and the Jenkins Git-client plugin 'officially' supports version 2.5.0, I also tried uninstalling version 2.6.0 and installed version 2.5.0, but that made no difference.</p>

<p>Does anyone here have any experience with this problem or a possible solution?
The error is:</p>

<pre><code>FATAL: Command ""c:\Program Files\Git\bin\git.exe submodule update"" returned status code 1:
stdout: 
stderr: Cloning into 'mysubmodule'...
error: cannot spawn echo : No such file or directory
bash: /dev/tty: No such device or address
error: failed to execute prompt script (exit code 1)
fatal: could not read Username for 'http://somerepo': No error
Clone of 'http://somerepo/scm/bf/mysubmodule.git' into submodule path 'mysubmodule' failed
</code></pre>
","0","1139533","",""
"68861833","10207304","2021-08-20 11:54:31","0","370","<javascript><angular><git><npm><git-submodules>","Publish Angular library dist folder on a separate git","<p>I have an Angular library that i use in another project. I build my library with the following command:</p>
<pre><code>ng build
</code></pre>
<p>Which creates a dist/my-library directory at the library root. I want to publish the dist content on a separate git repository so that it can be consumed directly by other projects.</p>
<p>I have created a git submodule but when i do a build and enter the dist directory, git doesn't see any changes. If i do:</p>
<pre><code>git submodule update
</code></pre>
<p>it will detect changes but it will be detached from head, so i can't publish changes on the master branch.</p>
<p>The weird thing is that i managed to get it to work a few times by pure luck, so it must be a viable solution.</p>
<p>How can i get git to publish the content of the dist folder on the dedicated repository?</p>
","5","10207304","",""
"33569189","5533897","2015-11-06 14:36:17","3","1008","<git><git-submodules><git-merge>","Convert git repo with submodules to single repo","<p>I have a git repository with several submodules which i would like to convert into one single repository containing all the history. Is this possible?</p>

<p>The closest solution I've found is to merge the submodules into the parent repo as described in these questions:<br>
<a href=""https://stackoverflow.com/questions/1759587/un-submodule-a-git-submodule"">un-submodule a git submodule</a><br>
<a href=""https://stackoverflow.com/questions/23327701/git-merge-submodule-into-parent-tree-cleanly-and-preserving-commit-history"">Git merge submodule into parent tree cleanly and preserving commit history</a></p>

<p>But as far as I understand this does not change the history of the parent repository.</p>

<p>Note that this repository is not public and thus I have no problem with changing the history.</p>
","3","5533897","0","0"
"17017335","80353","2013-06-10 05:25:23","70","61774","<git><git-submodules>","No submodule mapping found in .gitmodules for path and missing .gitmodules file","<p>When I run <code>git submodule init</code>, I get the following error:</p>

<blockquote>
  <p>No submodule mapping found in .gitmodules for path 'xxx'</p>
</blockquote>

<p>I searched for a <code>.gitmodules</code> file and I cannot find it anywhere.</p>

<p>I have read <a href=""https://stackoverflow.com/questions/4185365/no-submodule-mapping-found-in-gitmodule-for-a-path-thats-not-a-submodule"">this</a> most popular SO question on the same topic. 
But unfortunately, I cannot solve the problem. Especially given that I no longer have <code>.gitmodules</code>.</p>

<p>According to my GitHub private repo, I still have submodules for my repository. Just that I cannot find the <code>.gitmodules</code> file anywhere.</p>
","1","80353","0","0"
"17032637","724752","2013-06-10 20:53:15","4","2136","<git><git-submodules><gerrit><permission-denied>","permission denied for certain git path","<p>I need to clone a submodule from a gerrit server to my local project. Here's a .gitmodule file that works:</p>

<pre><code>[submodule ""blah/blah/thing""]
  path = blah/blah/thing
  url = ssh://my_username@gerrit.somewhere.com/some-thing.git
</code></pre>

<p>Here's a .gitmodule file that I would like to work because it works for other team members:</p>

<pre><code>[submodule ""blah/blah/thing""]
  path = blah/blah/thing
  url = gerrit.somewhere.com:some-thing.git
</code></pre>

<p>When I try to use the latter form, I get this error:</p>

<pre><code>$ git submodule update --init --recursive
Submodule 'blah/blah/thing' (gerrit.somewhere.com:some-thing.git) registered for path 'blah/blah/thing'

Cloning into 'blah/blah/thing'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Clone of 'gerrit.somewhere.com:some-thing.git' into submodule path 'blah/blah/thing' failed
</code></pre>

<p>What's wrong?</p>
","1","724752","0","0"
"17063920","827927","2013-06-12 11:08:17","0","120","<git><git-submodules><git-fork>","Submitting changes to git submodules","<p>I am working on machine learning with node.js. There are several different projects for different methods, and I want to use all of them for comparison, so I created a parent repository <a href=""https://github.com/erelsgl/machine-learning"" rel=""nofollow"">machine-learning</a>, that contains several (currently two) submodules: ""perceptron"" and ""classifier"". The two submodules are forks that I made from other repositories.</p>

<p>Now, while I work on the main machine-learning project, I sometimes make slight modifications to code in the submodules. But when I try to commit my changes (to my fork), it doesn't work:</p>

<pre><code>erelsgl@erelsgl-H61MLC:~/git/machine-learning$ git commit -a
# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   classifier (modified content, untracked content)
#   modified:   perceptron (untracked content)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")

erelsgl@erelsgl-H61MLC:~/git/machine-learning$ git add .

erelsgl@erelsgl-H61MLC:~/git/machine-learning$ git commit -a
# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   classifier (modified content, untracked content)
#   modified:   perceptron (untracked content)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>How can I commit my changes to the submodules?</p>

<p>I am not sure submodules are the way to go - maybe there is a better way to use several sub-projects in a single main project, so that I can also submit changes to each subproject?</p>
","0","827927","",""
"17100032","240430","2013-06-14 02:04:25","10","6604","<git><jenkins><bitbucket><git-submodules>","Why is Jenkins getting Authentication Failed error for git submodule update?","<p>I have a Jenkins job that pulls from a BitBucket repo that was working fine, and still is.  However, I've added a submodule and Jenkins is choking on that.  Here is a clip from the Jenkins console output:</p>

<blockquote>
  <p>FATAL: Command ""C:\Program Files (x86)\Git\cmd\git.exe submodule update"" returned status code 1:
  stdout: Cloning into 'submodules/my.repo'...</p>
  
  <p>stderr: fatal: Authentication failed</p>
</blockquote>

<p>I'm using an ssh key which I added to my deployment keys for the main repo in BitBucket. And that's always worked.  I added the same key to my submodule repo's deployment keys.  Can anyone tell me why authentication is failing?</p>
","5","240430","0","0"
"33684046","2260362","2015-11-13 00:36:40","2","563","<git><git-submodules><gerrit>","git submodule code review with main","<p>I have a repo called <code>main</code> with a submodule called <code>sub</code>. What I want to do is when I make changes in <code>main</code> or <code>sub</code> for them to be a part of the same Code Review in gerrit. 
Is there any way to perform this? I can't seem to find any information to make this work.
Thanks</p>
","1","2260362","",""
"17119275","2487896","2013-06-15 01:05:55","1","132","<git><git-submodules>","git submodule in superproject has later commits not seen in submodule itself","<p>I have a super-module ""Research"" that includes a submodule ""Simulator"".</p>

<p>When I clone Simulator repository, and do git log, I get this</p>

<pre><code>~/Simulator$ git log
commit abcd...
Date: Feb 1.......
........
</code></pre>

<p>When I clone Research repository, and do git submodule update --init and do git log inside Research/Simulator, I get this</p>

<pre><code>~/Research/Simulator$ git log
commit efgh...
Date: Feb 2.......
........
</code></pre>

<p>So, by cloning Research repo and pulling submodule, I get newer version of Simulator, compared to just cloning Simulator repo directly...</p>

<p>I have another problem that I think is caused by this.</p>

<p>I had to move git repos to New Server, and when I test cloning Research and pull submodules from the repo in the New Server, I get this,</p>

<pre><code>~/Research_test$ git submodule update
Cloning into Simulator...
....
fatal: reference is not a tree: efgh...
Unable to checkout 'efgh...' in submodule path 'Simulator'
</code></pre>

<p>The funny thing is that when I clone Research and pull submodules from Old Server, it pulls Simulator successfully. (well, with some weirdness like I explained before)</p>

<p>I migrated repo by simply copying the repository (bare) directories </p>

<p>My goal is</p>

<ol>
<li>when I clone Simulator directly, it should pull the latest version....</li>
<li>that ""reference is not a tree"" error should go away......</li>
</ol>

<p>Btw, working directory for Simualtor has been deleted, so I only have the repo to work with.</p>
","0","2487896","0","0"
"17160647","1596973","2013-06-18 04:40:09","7","2645","<git><github><git-submodules>","How to structure dependent projects on github?","<p>I recently put some of my projects on github to make them open source but I'm having trouble understanding how to structure the projects properly.</p>

<p>I've got a <a href=""https://github.com/craftworkgames?tab=repositories"" rel=""noreferrer"">Core project and another project</a> that depends on the Core project (plus more to come). However, when users grab a copy of one of the projects they complain that it's missing the Core project and I have to tell them that it lives in a separate repository.</p>

<p>I know there must be a better way to do this. I've read about git submodules but I don't really understand them yet.</p>

<p>My question is, are there any easy to follow tutorials or examples of how I can structure my projects? I'm using Windows, TortoiseGit and my projects are in C#.</p>
","1","1596973","0","0"
"33739376","163394","2015-11-16 15:51:37","42","18685","<git><git-submodules>","git submodule sync command - what is it for?","<p>I don't understand from the <a href=""https://git-scm.com/docs/git-submodule"">documentation</a> what does <code>git submodule sync</code> do. Please explain.</p>
","0","163394","0","0"
"50693341","8663703","2018-06-05 06:21:57","1","36","<git><git-submodules>","How to add a sub-directory to a git repository given, this sub-directory used to be a repository itself but it has been deleted?","<p><a href=""https://i.stack.imgur.com/CeRpC.png"" rel=""nofollow noreferrer"">image description here</a></p>

<p><a href=""https://i.stack.imgur.com/tWuDT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tWuDT.png"" alt=""enter image description here""></a></p>

<p>Please check the image above for clarity. 
Even though Repo3 doesn’t exist, when I am trying to add it to Repo2, it is giving some sub-module error and creating this directory inside repo2, but It appears grey and I cannot get inside it.<br>
So, I went inside, Repo2 and used the following command – 
<em>git submodule add <a href=""https://github.com/GitRepo/Repo3"" rel=""nofollow noreferrer"">https://github.com/GitRepo/Repo3</a></em>    -  though Repo3 doesn’t exist.
After the above command, I can see a directory Repo3 @(some random number) is created inside Repo2 but when I am clicking on it, it is taking me to an error page stating that the webpage that I am looking for doesn’t exist.
So what should I do now? </p>
","1","8663703","",""
"69046015","3355024","2021-09-03 13:49:39","1","119","<git><git-submodules><git-remote><git-fetch>","Where does git fetch from when doing a git submodule update?","<p>The <code>git submodule update</code> documentation says:</p>
<blockquote>
<p>Update the registered submodules to match what the superproject expects by cloning missing submodules, <strong>fetching missing commits in submodules</strong> and updating the working tree of the submodules.</p>
</blockquote>
<p>But I can't find anything about from which remote git will fetch from. I was hoping to find some configuration, which would define the remote to fetch from.</p>
<p>My setup right now is: I have two remotes defined in one of my submodules. When doing a <code>git submodule update</code> I get following error:</p>
<pre><code>fatal: --stdin can only be used when fetching from one remote
</code></pre>
<p>This sounds like git is trying to fetch from all known remotes. Is there a way to configure the remote fetch from?</p>
<p>Worth mentioning: none of the submodule's remotes is named <code>origin</code> (I really hope that is not the issue here)</p>
","2","3355024","",""
"33807372","1873758","2015-11-19 15:02:21","2","1901","<git><git-submodules>","""git submodule status"" does not see submodules","<p>I'm trying to update my submodule on a project in Windows 7, but Git does not respond to anything.</p>
<p>There is a <code>.gitmodules</code> file containing paths, etc.</p>
<p>When I run <code>git submodule init</code> and <code>git submodule update</code> nothing happens. I don't get any output. Also <code>git submodule status</code> gives nothing.</p>
<p>When I try to add an existing submodule I get an error that it already exists.</p>
<p>It might be useful to mention that I am using 1.9.5.msysgit, which is the embedded Git version of SourceTree. The same problem appears with 2.6.1 or even 2.25.1 on Ubuntu Linux.</p>
<p><strong>Update:</strong> Also SourceTree does not show the submodules either.</p>
","7","1873758","",""
"69052941","11236201","2021-09-04 06:28:27","1","459","<git><git-submodules>","How do i specify to download some submodules in .gitsubmodule?","<p>There are too many submodule in .gitsubmodule, and downloading all of them will take a lot of time. How can I choose to download only the modules I need.</p>
","0","11236201","0","0"
"33845701","1870790","2015-11-21 16:20:52","0","70","<git><git-submodules>","git sub..submodules tag synchronization","<p>I am new to git submodules.</p>

<p>I am creating a project that includes other libraries as submodules. Some of them though have submodules on their own.</p>

<p>When I have only one level I can go in the root of the submodule and checkout particular tag. Git identifies that and creates a record. The next time I say update on clean place I have the exact change.</p>

<p>This though does not seem to be the case for sub submodule. And I do not see any easy automatic way to apply a particular tag to all submodules.</p>

<p>Am I asking too much, or I just do not know how to do it? </p>
","0","1870790","",""
"18090743","1988504","2013-08-06 21:22:12","8","3860","<git><git-submodules>","Is it possible to force git submodules to be updated?","<p>We have a git repository that depends on code in other git repositories.  We use submodules, the usual way, to express this relationship and ensure that the supporting code lives at a standard location within the user's directory structure.  Updating the supporting code is straightforward enough: </p>

<ul>
<li>make a change to a submodule</li>
<li>commit it</li>
<li>push it</li>
<li>cd into the main repository</li>
<li>commit the change to the submodule</li>
<li>push it</li>
</ul>

<p>The problem comes on the other side.  After this sort of change, for other developers to get a complete, consistent set of code they need to execute three commands:</p>

<ul>
<li>git pull (update the main repository)</li>
<li>git submodule init (in case any new submodules were added)</li>
<li>git submodule update (update the submodules)</li>
</ul>

<p>It's proven difficult to train developers to do all of these, particularly since in all of our other repositories, which don't contain submodules, the pull is sufficient.  The result is developers at times working with code that uses obsolete versions of the submodules, resulting in spurious problems that can be time-consuming to track down.  It there any way, other than writing a shell script that does all three commands and insisting ""Use this!"", to make this more automatic?</p>
","0","1988504","0","0"
"34620145","1808261","2016-01-05 19:54:36","0","4708","<git><tfs><git-submodules><tfs-2015>","Team Foundation Server 2015 git repo with submodules on external git servers","<p>I've got Team Foundation Server 2015 installed. Everything is working great expect one thing.</p>

<p>I am working with two main <a href=""/questions/tagged/git"" class=""post-tag"" title=""show questions tagged &#39;git&#39;"" rel=""tag"">git</a> repositories (Created from team projects). The build for the first repository works great but the build for the second repository has problems.</p>

<p>The first has sub-modules that live on the TFS <a href=""/questions/tagged/git"" class=""post-tag"" title=""show questions tagged &#39;git&#39;"" rel=""tag"">git</a> server itself. The build works great here.</p>

<p>The second has sub-modules that live on a different <a href=""/questions/tagged/git"" class=""post-tag"" title=""show questions tagged &#39;git&#39;"" rel=""tag"">git</a> server. When this build runs TFS fails to obtain those submodules:</p>

<pre><code>******************************************************************************
    Starting: Get sources
******************************************************************************
Syncing repository: my_app (Git)
Checking out dbab6... to C:\TfsBuildAgents\Agent-UTP120W-1\_work\5\s with submodules

Object not found - no matching loose object (f8334...)

Prepare repository failed with exception.
</code></pre>

<p>(I've abbreviated the SHA's here for simplicity)</p>

<p>The SHA that starts with <code>f8334...</code> is the submodule that lives on an external git server. My guess is that this error: </p>

<blockquote>
  <p>Object not found - no matching loose object</p>
</blockquote>

<p>actually has something to do with the credentials that TFS is attempting to use on the remote server. Is there a way to see which credentials TFS is using to interact with the remote server? Is there a way to configure these credentials myself?</p>

<p>I attempted to change the <code>repository type</code> in the build settings from <code>git</code> to <code>external git</code> so that I could specify credentials. However, this results in yet a different error:</p>

<pre><code>******************************************************************************
    Starting: Get sources
******************************************************************************
Syncing repository: my_app (Git)

Too many redirects or authentication replays

Prepare repository failed with exception.
</code></pre>

<p>Google results for both this error: </p>

<blockquote>
  <p>Too many redirects or authentication replays</p>
</blockquote>

<p>and the previous don't seem to turn up anything useful for this scenario. Anyone have any clues?</p>

<p><strong>UPDATE</strong></p>

<p>It looks like TFS 2015 only supports repos with <a href=""http://visualstudio.uservoice.com/forums/330519-team-services/suggestions/3606383-add-submodule-support-in-visual-studio-git-extensi"" rel=""nofollow"">submodules that are in TFS itself, or are anonymously accessible</a>. However, a <a href=""http://visualstudio.uservoice.com/forums/330519/suggestions/11462817"" rel=""nofollow"">new feature request was created</a> to address external authentication for submodules.</p>

<p>However, in my case the external git server <em>is anonymously accessible</em>. So, unfortunately, I'm guessing that the problem somehow lies with my external git server? For reference it is the open source software <a href=""https://bonobogitserver.com/"" rel=""nofollow"">Bonobo Git server</a>.</p>
","2","1808261","",""
"18118941","569430","2013-08-08 06:03:13","1","124","<android><git><github><egit><git-submodules>","Multiple support libraries conflicts using git submodules","<p>So I have a project with multiple libraries attached as submodules - this means I can't commit to them.</p>

<p>Each of the libraries already includes an android support library, which obviously leads to an error</p>

<pre><code>Conversion to Dalvik format failed: Unable to execute dex: Multiple dex files define...
</code></pre>

<p>while trying to build apk.</p>

<p>Of course I can remove duplicate support libraries from library projects, but I won't be able to commit this changes, and as result use my repo with Jenkins, etc.</p>

<p>For now I see only one choice - fork libraries, remove conflicting jar from them, and use forked versions as submodules. But to be honest, I would like to avoid it.</p>

<p>So, is there any way to build apk with multiple support libraries, or exclude those libraries from git submodules while cloning them?</p>
","0","569430","0","0"
"18164819","1553741","2013-08-10 18:01:27","1","246","<git><git-submodules>","git tracks files in directory, but not directory itself - bug in git?","<p>My understanding of git doesn't include this situation. I cannot make 'git status' clean by running <code>git reset --hard HEAD</code> and <code>git clean -fd</code>. It appears that git is tracking the two files inside a directory, but not the directory itself. Here is an excerpt</p>

<pre><code>~/work/ghc/libraries/haskeline ((no branch)) $ git status
# Not currently on any branch.
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   ""tests/dummy-I\314\202\302\274I\314\202\302\261I\314\210\302\203/""
nothing added to commit but untracked files present (use ""git add"" to track)

~/work/ghc/libraries/haskeline ((no branch)) $ git clean -fd
Removing ""tests/dummy-I\314\202\302\274I\314\202\302\261I\314\210\302\203/""

~/work/ghc/libraries/haskeline ((no branch)) $ git status
# Not currently on any branch.
# Changes not staged for commit:
#   (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   deleted:    ""tests/dummy-\303\216\302\274\303\216\302\261\303\217\302\203/bar""
#   deleted:    ""tests/dummy-\303\216\302\274\303\216\302\261\303\217\302\203/\303\217\302\202\303\216\302\265\303\217\302\201\303\217\302\204""
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")

~/work/ghc/libraries/haskeline ((no branch)) $ git reset --hard
HEAD is now at 40bcd6a Fix build on Win64

~/work/ghc/libraries/haskeline ((no branch)) $ git status
# Not currently on any branch.
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   ""tests/dummy-I\314\202\302\274I\314\202\302\261I\314\210\302\203/""
nothing added to commit but untracked files present (use ""git add"" to track)

~/work/ghc/libraries/haskeline ((no branch)) $ git log tests/dummy-Î¼Î±Ï/
~/work/ghc/libraries/haskeline ((no branch)) $ git log tests/dummy-\303\216\302\274\303\216\302\261\303\217\302\203/bar
fatal: ambiguous argument 'testests/dummy-303216302274303216302261303217302203/bar': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'

~/work/ghc/libraries/haskeline ((no branch)) $ git log ""testests/dummy-\303\216\302\274\303\216\302\261\303\217\302\203/bar""
fatal: ambiguous argument 'testests/dummy-\303\216\302\274\303\216\302\261\303\217\302\203/bar': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'

~/work/ghc/libraries/haskeline ((no branch)) $ cd tests/dummy-Î¼Î±Ï/
~/work/ghc/libraries/haskeline/tests/dummy-Î¼Î±Ï ((no branch)) $ ls
Ï?ÎµÏ?Ï?         bar

~/work/ghc/libraries/haskeline/tests/dummy-Î¼Î±Ï ((no branch)) $ git status
# Not currently on any branch.
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   ""../dummy-I\314\202\302\274I\314\202\302\261I\314\210\302\203/""
nothing added to commit but untracked files present (use ""git add"" to track)

~/work/ghc/libraries/haskeline/tests/dummy-Î¼Î±Ï ((no branch)) $ git log bar 
commit e9c39a16fdecf529e7a86beb3971eb351e915de5
Author: Judah Jacobson &lt;judah.jacobson@gmail.com&gt;
Date:   Sun Jul 22 22:14:08 2012 +0000

    Add test folder for unit-testing file completion.

~/work/ghc/libraries/haskeline/tests/dummy-Î¼Î±Ï ((no branch)) $ git log .
commit e9c39a16fdecf529e7a86beb3971eb351e915de5
Author: Judah Jacobson &lt;judah.jacobson@gmail.com&gt;
Date:   Sun Jul 22 22:14:08 2012 +0000

    Add test folder for unit-testing file completion.

~/work/ghc/libraries/haskeline/tests/dummy-Î¼Î±Ï ((no branch)) $ cd ..
~/work/ghc/libraries/haskeline/tests ((no branch)) $ git log dummy-Î¼Î±Ï/
~/work/ghc/libraries/haskeline/tests ((no branch)) $ 
</code></pre>

<p>Is this a bug in git that I should report (possibly to do with the non-ascii filenames involved)? If not, could someone explain why this makes sense?</p>

<p>A final note: the libraries/haskeline directory is a git submodule inside the ghc directory. I'm not aware of any way that this should make a difference.
Also, my prompt contains the current git branch. Running the command explicitly gives</p>

<pre><code>~/work/ghc/libraries/haskeline/tests ((no branch)) $ git branch
* (no branch)
  master
</code></pre>
","3","1553741","",""
"69248948","16549842","2021-09-20 04:02:10","0","168","<git><git-submodules>","How to handle two git repos that import the same submodule and that submodule needs to be the same version on each?","<p>Currently I am developing on two different repos, we'll call them A and B.</p>
<p>Each of these repos imports a shared submodule I'll refer to as C.</p>
<p>Now given the relationship of repos A and B, they both require the same version of repo C, meaning that anytime I need to change repo C (to fit new features on either A or B), I need to create a pull request including that change for both repo A and B.</p>
<p>Making this &quot;double pull-request&quot; is slowing down development and so I'm curious if anyone has solved this sort of problem before.</p>
<p>Is there anyway to reorganize the repos so that this issue no longer arises?</p>
<p>I considered breaking up C into two different repos but that breaks the condition that the version of C is always the same for A and B.</p>
<p>Thanks in advance for any help you can offer!</p>
","5","16549842","",""
"34714671","5771942","2016-01-11 05:22:21","1","194","<git><git-submodules><starter-kits>","Cloning a git starter project without throwing away the original git linkage?","<p>I would like to clone a starter project for a javascript application. The starter project contains pre-configurations for development and nice folder structures etc. I would be developing my app inside that folder structure. I will be committing the starter project and all my files to my own repo.</p>

<p>What I want to know is, can I keep the linkage to the startup project repo so I can pull any of their changes to (for example) the build config files?</p>

<p>I looked into git submodules but don't think that will work since I am making changes inside the ""sub-project"".</p>
","0","5771942","0","0"
"50909422","34134","2018-06-18 12:22:00","2","156","<git><git-submodules>","How to remove and re-fetch all git submodules?","<p>I need to write a script that fetches all new changes in the repo, including updates in submodules and checks them out.</p>

<p>The problem is that submodules, as well as the main repo, may have commits that were ""forced"" (so they may have a conflicting tree). How do I re-fetch all submodules without getting any errors in the process and without purging and gecloning the main repo?</p>
","0","34134","",""
"18238140","788473","2013-08-14 17:16:10","3","1134","<git><git-submodules><git-annex>","Annexed submodules in git","<p>I'd like to keep some binary files (documentation, executable binary files, images, etc) in a <code>git-annex</code>, and then include them in several projects as <code>git-submodules</code>. I think this will allow me to keep track of the correct versions of these large files as they change, keeping old projects linked to the old versions and new projects to the new versions.</p>

<p>So I make the following repo for my big files:</p>

<pre><code>mkdir annexedrepo
cd annexedrepo
cp big_files annexedrepo/
git init
git annex init
git annex add .
</code></pre>

<p>and then go to my project repo and add them as a submodule.</p>

<pre><code>cd ../otherrepo
mkdir data
git submodule add ../annexedrepo data/annexed
</code></pre>

<p>I'd love if these would just appear as symlinks to the correct files in the other repo. But I guess it's good enough if I can just make the copies as I need them with:</p>

<pre><code>git annex get data/annexed
</code></pre>

<p>This copies the files over - I can see them in <code>otherrepo/.git/module/data/annexed/objects/</code>. But when I do this, the annexed files are just dead symlinks. I can list them with <code>ls data/annexed/</code>, but nobody's home.</p>

<p>Am I trying to do something wrongheaded? Is there a way to fix this? Are these bugs in either <code>git-submodule</code> or <code>git-annex</code>? Thanks for your help!</p>
","0","788473","0","0"
"34764193","3743145","2016-01-13 10:26:51","5","8143","<git><git-submodules>","git submodule from local folder","<p>Have a git repo named <code>parent-repo</code>. It has folder <code>lib</code> with libraries. 'lib/one' is under control of <code>parent-repo</code>. And now I want to make git to recognize <code>lib/one</code> as git submodule of <code>parent-repo</code>.</p>
<pre><code>cd lib/one
git init
git add .
git commit -m 'first commit'
</code></pre>
<p>I think next steps are</p>
<ol start=""0"">
<li><code>cd parent-repo</code></li>
<li>untrack <code>lib/one</code></li>
<li>register <code>lib/one</code> as submodule</li>
<li>stage and commit.</li>
</ol>
<p>Please clear next steps with git commands if it is possible.</p>
","0","3743145","0","0"
"18263850","1985171","2013-08-16 00:03:22","1","1547","<c++><git><boost><git-submodules>","Error compiling c++ boost libraries from github","<p>I have been trying to compile the c++ boost libraries downloaded from the boostorg github repo and I get the following error.</p>

<pre><code>...updating 968 targets...

darwin.compile.c++ bin.v2/libs/atomic/build/darwin-4.2.1/release/threading-multi/lockpool.o
libs/atomic/src/lockpool.cpp:31: error: expected unqualified-id before numeric constant
libs/atomic/src/lockpool.cpp:31: error: expected `)' before numeric constant
libs/atomic/src/lockpool.cpp:55: error: expected `}' at end of input
libs/atomic/src/lockpool.cpp:55: error: expected `}' at end of input
libs/atomic/src/lockpool.cpp:55: error: expected `}' at end of input
libs/atomic/src/lockpool.cpp:55: error: expected `}' at end of input

    ""g++""  -ftemplate-depth-128 -O3 -finline-functions -Wno-inline -Wall -dynamic -gdwarf-2 -fexceptions -fPIC  -DBOOST_ALL_NO_LIB=1 -DBOOST_ATOMIC_DYN_LINK=1 -DBOOST_ATOMIC_SOURCE -DNDEBUG  -I""."" -c -o ""bin.v2/libs/atomic/build/darwin-4.2.1/release/threading-multi/lockpool.o"" ""libs/atomic/src/lockpool.cpp""

...failed darwin.compile.c++ bin.v2/libs/atomic/build/darwin-4.2.1/release/threading-multi/lockpool.o...
...skipped &lt;pstage/lib&gt;libboost_atomic.dylib for lack of &lt;pbin.v2/libs/atomic/build/darwin-4.2.1/release/threading-multi&gt;lockpool.o...
darwin.compile.c++ bin.v2/libs/system/build/darwin-4.2.1/release/threading-multi/error_code.o
darwin.link.dll stage/lib/libboost_system.dylib
darwin.compile.c++ bin.v2/libs/chrono/build/darwin-4.2.1/release/threading-multi/chrono.o
In file included from /usr/local/include/boost/mpl/or.hpp:43,
                 from /usr/local/include/boost/mpl/logical.hpp:17,
                 from /usr/local/include/boost/chrono/duration.hpp:40,
                 from /usr/local/include/boost/chrono/chrono.hpp:11,
                 from /usr/local/include/boost/chrono/detail/inlined/chrono.hpp:13,
                 from libs/chrono/src/chrono.cpp:14:
/usr/local/include/boost/mpl/aux_/include_preprocessed.hpp:37:90: error: boost/mpl/aux_/preprocessed/gcc/or.hpp: No such file or directory
In file included from /usr/local/include/boost/mpl/and.hpp:42,
                 from /usr/local/include/boost/mpl/logical.hpp:18,
                 from /usr/local/include/boost/chrono/duration.hpp:40,
                 from /usr/local/include/boost/chrono/chrono.hpp:11,
                 from /usr/local/include/boost/chrono/detail/inlined/chrono.hpp:13,
                 from libs/chrono/src/chrono.cpp:14:
/usr/local/include/boost/mpl/aux_/include_preprocessed.hpp:37:90: error: boost/mpl/aux_/preprocessed/gcc/and.hpp: No such file or directory
In file included from /usr/local/include/boost/chrono/chrono.hpp:11,
                 from /usr/local/include/boost/chrono/detail/inlined/chrono.hpp:13,
                 from libs/chrono/src/chrono.cpp:14:
/usr/local/include/boost/chrono/duration.hpp:442: error: ‘and_’ is not a member of ‘boost::mpl’
</code></pre>

<p>This is exactly how I am doing it:</p>

<pre><code>git clone https://github.com/boostorg/boost.git
cd boost
git submodule init
git submodule update
./boostrap.sh
./b2
</code></pre>

<p>Any idea of what I am missing?</p>
","0","1985171","0","0"
"34797830","837705","2016-01-14 19:13:59","2","105","<git><git-submodules>","SubModule move conflict on git pull","<p>In the ""FrameworkRepo"" I moved a SubModule from framework/modules/Vendor/SubModule1/ (this folder was deleted) to framework/vendor/SubModule1/ (this one was added) in ""ClientRepo"", committed, and pushed.</p>

<p>In ""ClientRepo"" I pulled ""FrameworkRepo"" (merged). I am now getting a conflict: <code>Auto-merging framework/vendor/SubModule1
Adding as framework/vendor/SubModule1 ~a853d4bc829db59c0e4d8b4e857034124018a917 instead</code></p>

<p>How do I resolve this?</p>

<p>Before anyone says it... I know I could just not add the submodules to the repo and just use <code>git submodule foreach git fetch origin --tags &amp;&amp; git pull &amp;&amp; git submodule update --init --recursive</code> in the ""ClientRepo"" but we want to control what version SubModule they use in case our FrameworkRepo is not ready for a newer version SubModule. Hope that makes sense.</p>
","0","837705","0","0"
"34823212","2474735","2016-01-16 03:27:54","5","605","<git><macos><git-submodules><gnupg><pgp>","password-store with git submodules","<p>Git submodules in <a href=""http://passwordstore.org"" rel=""noreferrer"">pass</a> work quite well for using different sets of passwords. My only issue is that I cannot issue <code>git submodule</code> commands through <code>pass</code>.</p>

<p>For example, </p>

<pre><code>pass git submodule foreach git pull 
</code></pre>

<p>returns:</p>

<blockquote>
  <p>fatal: /usr/local/Cellar/git/2.6.4/libexec/git-core/git-submodule cannot be used without a working tree.</p>
</blockquote>
","0","2474735","",""
"34829824","104250","2016-01-16 17:22:18","2","1081","<git><git-submodules><git-tag>","How to add a shallow git submodule at a given tag","<p>I want to include a large git repository as a submodule in my project. To reduce download times for developers in the project, I'd like to add the submodule so that when it is cloned, only one version is retrieved. Also, the version I need is an older version which is marked with a tag. </p>

<p>How do I achieve this when adding the module or when setting up a new clone?</p>
","0","104250","",""
"50928317","4502203","2018-06-19 12:21:21","1","556","<git><git-submodules>","a single directory containing git submodule and parent repository","<p><strong>Use case:</strong>
We have a directory containing IDE configurations of which some should be shared over a set of projects and some which are project specific. This means some parts of the config directory must be shared with the project while some should come from a centralized source. </p>

<p><img src=""https://i.stack.imgur.com/12ZaS.png"" alt=""Directory""></p>

<p>Since <code>Project</code> is a git repository I considered using git submodules to solve this. As far as I understand if I make <code>config</code> a submodule I have to share <code>project specific 1</code> &amp; <code>project specific 2</code> via that submodule. The alternative would to make <code>shared 1</code> and <code>shared 2</code> individual submodules. The <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow noreferrer"">git book</a> didn't help me to find a solution.</p>

<p><strong>Questions:</strong> </p>

<ul>
<li>Is there a way to have <strong>one</strong> submodule or other construct which contains <code>shared1</code> &amp; <code>shared2</code> while <code>project specific 1</code> &amp; <code>project specific 2</code> are still part of the <code>Project</code> git repo? </li>
<li>If so, how does a solution look like? </li>
<li>If not is the approach flawed (and how) or am I just out of luck?</li>
</ul>

<p><strong>Edit 1:</strong></p>

<p>In repsponse to <a href=""https://stackoverflow.com/a/50930797/4502203"">@Mark Adelsberger</a>: The files we are talking about are not runtime configurations but configurations for the IDE. Thus trying to solve this in the build phase is not expedient.</p>

<p><strong>Edit 2:</strong></p>

<p>I was following the hint of <a href=""https://stackoverflow.com/questions/50928317/a-single-directory-containing-git-submodule-and-parent-repository/50930797#comment88860566_50928317"">@Thomas</a> with symbolic links. I created a submodule <code>sharedConfig</code> containing <code>shared1</code> &amp; <code>shared2</code> which was placed in <code>project</code> and then have two sym-links in <code>config</code> which target the directories in <code>sharedConfig</code>. Sadly the IDE im using does not follow the sym-links but crashes. If you use a more mature tool this might be a solution for you.</p>

<p><strong>Edit 3:</strong></p>

<p>After all I tried I agree with <a href=""https://stackoverflow.com/a/50930797/4502203"">@Mark Adelsberger</a>, there is no way to do what I intended although there are workarounds/hacks which might work for some platform/tool combination.
In the end I went with having each <code>shared#</code> directory as a separate submodule.</p>
","5","4502203","",""
"34839804","3140927","2016-01-17 15:04:05","1","172","<ios><git><git-submodules><git-subtree>","How to modify third party code imported with git (subtree, submodules, etc)?","<p>I have a project that needs to support iOS7. I want to use a lib (let's call it LIB) that does not support iOS7 but could be easily modified to do so. I also expect LIB will change quite often.</p>

<p>What will be an ideal solution:</p>

<ol>
<li><p>I include LIB's code into my project (tag with the last
release) </p></li>
<li><p>I modify LIB to support iOS7 (usually only one commit). I <strong>do not</strong> want to push this commit to LIB's original repository but want to save it in my projects repository.</p></li>
<li><p>When new LIB's version is released I update it in my project and
merge with changes from point 2 or just redo these changes.</p></li>
<li><p>I do not want to have LIB's full history in my project history (as git subtree do AFAIK). Only something like ""LIB changed to 1.2.42;  LIB updated to support iOS7;""</p></li>
</ol>

<p>I can copy LIB's code myself or maintain LIB's fork with iOS7 support but it is time consuming and not very ""automagically"". I have checked git submodules and git subtree but as far as I understand it is impossible to have point 2, is it?.</p>

<p>What is a best approach to solve this?</p>
","0","3140927","",""
"18350013","437748","2013-08-21 06:10:09","1","359","<git><git-submodules>","How to fix changes in git submodules?","<p>I have added submodule to my project, I have added my file to it, then I have done commit. What I have to do now? I can't push changes because that submodule repository is not my, I haven't password from it, etc. Is it possible to push changes in submodule to my server?</p>
","3","437748","",""
"50931593","5857569","2018-06-19 15:04:36","0","214","<git><git-submodules><sendinblue>","submodule is archived on gitlab","<p>I have installing Sendinblue api with following this link <a href=""https://github.com/sendinblue/APIv3-php-library"" rel=""nofollow noreferrer"">SendinBlue's API v3 Php Library</a> on my local, and I made some modification on this api. I can see that I have a submodule on this api.</p>

<p>When I push it to my repository on gitLab, the submodule is archived and I can't see the content of this folder: <code>vendor/sendinblue/api-v3-sdk</code>.</p>

<p>This is the api Architecture :</p>

<p><a href=""https://i.stack.imgur.com/tix4d.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tix4d.png"" alt=""api Architecture""></a></p>

<p>And this what I see in gitlab:</p>

<p><a href=""https://i.stack.imgur.com/3daGj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3daGj.png"" alt=""Git lab""></a></p>

<p><code>$ ls -la</code> display display this:
<a href=""https://i.stack.imgur.com/TV0rq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TV0rq.png"" alt=""enter image description here""></a></p>
","6","5857569","",""
"18355765","810067","2013-08-21 11:06:27","6","2483","<git><git-submodules><git-flow>","updating submodules with git-flow","<p>When making a release with git, using the git-flow model, I switch my repository to point to the latest commit in master, tag and then build from the tag. Is it good practice to merge changes into master for <em>all</em> the repository's submodules, and have them point to master (that is, the latest commit in master), or is it sufficient to leave all submodule commits unchanged?</p>
","0","810067","",""
"34852902","2515498","2016-01-18 10:52:11","1","35","<python><git><permissions><file-permissions><git-submodules>","Preventing access to specific file for specific user in git","<p>Imagine we have a team that we are using a project in git and we have remote access to the repoitory. The structure of project is:</p>

<pre><code>project/
       install.sh
       readme
       changelog
       project.odt
       src/
           project.py
           modules/
                   a.py
                   b.py
                   c.py
</code></pre>

<p>Now:</p>

<pre><code>git init
</code></pre>

<p>Imagine I am an admin of project. I want to set permissions on file for users then push project to remote repository. how can I set permissions?
I want users to have read and execute permissions on whole project but:</p>

<p>usera has write permission only on a.py</p>

<p>userb has write permission only on b.py</p>

<p>userc has write permission only on c.py</p>

<p>How can I handle it?</p>
","7","2515498","",""
"4464579","93311","2010-12-16 19:23:58","1","1150","<git><github><git-submodules>","How to reverse a `git submodule init`","<p>To get a project started, I had to perform <code>git submodule init</code> followed by <code>git submodule update</code> . But now that the cat's out of the bag, I was wondering if there's something I have to do to pack it back up before committing back up to the repository. </p>

<p>Any ideas?</p>
","1","93311","0","0"
"4486205","465447","2010-12-20 01:26:58","2","575","<git><git-submodules>","Is there a .gitconfig option that corresponds to the git status --ignore-submodules setting?","<p>Is there a global .gitconfig setting that allows to change the default of the ignore-submodules option from ""all"" to ""dirty"", ""untracked"", or ""none""?</p>
","0","465447","0","0"
"41895052","6626554","2017-01-27 13:26:21","0","452","<git><github><git-submodules><githooks>","How to ensure `submodule update` automatically with `git pull` on a repository level","<p>I have a git repository which is used across a team of 10+ developers. I have a few <code>git submodule</code>s added into my repository. The submodules can of course be checked out by the following command.</p>

<p><code>git submodule update --init</code></p>

<p>But if I want that the <code>submodule update</code> to happen automatically when someone does a <code>git pull</code>, is it feasible? How can I do this?</p>

<p>Is there something I can do with git hooks ?</p>
","0","6626554","",""
"18418955","1929968","2013-08-24 13:10:52","3","379","<git><emacs><git-submodules><dot-emacs>","git submodule update --init Error while installing dot-emacs files","<p>I try to install a dotfiles config for emacs (<a href=""https://github.com/dhaley/dot-emacs"" rel=""nofollow noreferrer"">https://github.com/dhaley/dot-emacs</a>). I did all like instructed (download and install of the macport of emacs via brew, clone of the repsitory) and now when I use the command git submodules update --init I get the following error: </p>

<pre><code>$git submodule update --init
fatal: reference is not a tree: a2bcba9a92873900055dcaff640e4d31a650947e
fatal: reference is not a tree: 05f9cebc64842efa2968d49adb08330d15c7ffe8
fatal: reference is not a tree: 89611c7a6947787bf2f591e64e22b7444ea5ed41
Unable to checkout 'a2bcba9a92873900055dcaff640e4d31a650947e' in submodule path 'override/bbdb'
Unable to checkout '05f9cebc64842efa2968d49adb08330d15c7ffe8' in submodule path 'site-lisp/auctex'
Unable to checkout '89611c7a6947787bf2f591e64e22b7444ea5ed41' in submodule path 'site-lisp/drupal-mode'
</code></pre>

<p>Some of these did not have an entry in the .gitmodules file and I added it manually. But now I have no clue how to fix this error. I new to emacs and the hole dotfile thing so if you can give me a hint it would be great (on stackoverflow I found <a href=""https://stackoverflow.com/questions/2155887/git-submodule-head-reference-is-not-a-tree-error"">Git submodule head &#39;reference is not a tree&#39; error</a> but did not really understand if this is my problem and how to fix it)</p>

<p>PS: I send a mail to Damon Haley the maintainer of the repository with a link to this, as I found no forum to discuss issues on the github repository. </p>

<p>Best Regards and thanks to everybody contribution to this greate community,</p>

<p>Dennis</p>
","0","1929968","0","0"
"41903610","2023432","2017-01-27 21:52:05","1","17","<git><git-submodules>","Is there a way to update a git submodule in the tree without downloading its updates?","<p>I have a submodule with a large delta that is intended to only be cloned on the deploy target (e.g., Heroku).</p>

<p>The <code>git submodule</code> commands I know of all update the local tree with the tree of the submodule, including the huge delta.</p>

<p>Is there a porcelain command I can do to update the submodule hash to the latest commit in the main repo without actually download it?</p>
","5","2023432","",""
"18436624","2327283","2013-08-26 04:28:45","2","1373","<git><repository><git-submodules><git-subtree><atlassian-sourcetree>","is git submodules what I need?","<p>I have two repositories for two websites, but those two websites share the same framework.</p>

<p>I wanted to make a dedicated repository for the framework itself but I'm not sure how would that work.</p>

<p>What I currently do is that I develop the framework within website1 and then copy it to website2 each time I add new features. As you can see it's not very effective...</p>

<p>I would like a separate repository for the framework, but I still need it to be within one of the two websites so I can keep working on it. <strong>The most important part is that I need to be able to deploy it to the other website in a simple way</strong></p>

<p>What is the best solution for me? How can this be achieved?</p>

<p>PS: <em>I'm using SourceTree with Bitbucket quit intensively for the past months so I'm fairly familiar with git, but I have never used the command line.</em></p>
","0","2327283","0","0"
"4519679","127013","2010-12-23 14:37:04","16","2790","<git><git-svn><git-submodules>","Using git submodules in a git-svn project","<p>In our git-svn managed project, we have 3 upstream projects that are all kept in native git repositories on GitHub. Since the source code of those upstream projects is under our control and changes frequently, our current solution, namely re-deploying the build artifacts to the super-project everytime we change something is quite cumbersome.</p>

<p>What I'd like to have is this:</p>

<pre><code>parent project (git-svn):
    --&gt; submodule 1 (git)
    --&gt; submodule 2 (git)
    --&gt; submodule 3 (git)
</code></pre>

<p>That way, the source code for submodules 1-3 is compiled along with the sources for the super project, but I can push changes to submodules separately.</p>

<p>The question is: what happens when I <code>git svn dcommit</code> on the parent project? Does this even work?</p>

<p><strong>UPDATE</strong>
Hm, I just set up a simple project structure, trying to resemble this scenario, and I receive this error message when trying to dcommit on the superproject: </p>

<pre><code>a0301b11f3544a1e71067ff270eded65e4c8afbd doesn't exist in the repository at /opt/local/libexec/git-core/git-svn line 4775
Failed to read object a0301b11f3544a1e71067ff270eded65e4c8afbd at /opt/local/libexec/git-core/git-svn line 574
</code></pre>

<p>Any ideas/suggestions?</p>
","3","127013","0","0"
"41919820","618598","2017-01-29 10:23:26","8","1017","<git><git-submodules>","Check out a git commit including submodules as they were at that time","<p>How do we check out a git commit including submodules <strong>as they were at that time</strong>?</p>

<p>One reason why we might want this is to look at a previous version of the main program for which we need to rebuild it with the submodules in the version that was used at the time of the commit.</p>

<p>Given this, we could even use this in regular workflow: </p>

<ul>
<li>First update all submodules with <code>git submodule update --remote --merge</code>, then try to build to see if the program can work with the newest version of all submodules. </li>
<li>If it works we are done. If it does not work, then we could go to the previous version of the program incl. the submodule-versions it used and with which it works. </li>
<li>Then update the submodules one-by-one and change the program to work with them.</li>
</ul>

<p>We can kind-of do it by manually looking at each submodule: which commit had the appropriate timestamp (and hope that the program used the then-most-uptodate version). It would be much better if we could see commit X of the program used submodule commit Y. And check those out for each submodule.</p>
","6","618598","0","0"
"4526910","231211","2010-12-24 14:52:18","227","96429","<git><git-submodules>","Rename a git submodule","<p>Is there some easy way to rename a git submodule directory (other than going through the entire motion of  <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"">deleting</a> it and re-adding it with a new destination name). </p>

<p>And while we are at it, why is it that I simply cannot do the following in the parent directory: <code>git mv old-submodule-name new-submodule-name</code></p>
","5","231211","0","0"
"22798625","1431665","2014-04-01 23:08:51","2","141","<git><git-submodules>","Problems making a .gitignore in a ""main"" module affect a submodule properly","<p>I have a currently existing directory structure I need to adhere to, which is similar to this: [workspace/project/src/htdocs/templates]. In the project directory I have a Git repository with the entire project in it. I also have a 'front-ends' directory in the workspace directory which is not currently included in the existing repository.</p>

<p>I want to have the workspace/front-ends &amp; workspace/project/src/htdocs/templates directories contained in their own repositories - basically a separation of front-ends and code. (There will be a separate group of people working on these files and would like to have their changes independent of the code on the site.)  My idea was to create second repository in the workspace directory, and in the .gitignore file, exclude the /project/src/htdocs path - all except the /templates directory. I have been unsuccessful with this. I tried the following consecutive lines in the .gitignore file:</p>

<p>project/src/htdocs </p>

<p>!project/src/htdocs/templates (and also tried project/src/htdocs/templates/!*)</p>

<p>Both of these resulted in the files still being ignored by the secondary repository in workspace. I have been reading about Submodules, but I am not sure this is the correct way to accomplish this workflow. Is it possible to have the outer repository contained in workspace ignore the specified path and still recognize a directory in that path? </p>
","5","1431665","0","0"
"18469225","861826","2013-08-27 15:08:14","1","934","<git><git-submodules>","Non-existent submodule mentioned in git error","<p>Git is telling me I can't add some files to the index because they are in a submodule.  I think it's true that these files were once in a submodule, but I can't find any indication that they still are in a submodule.  If I grep for .gitmodules, I find nothing.  How can I eliminate this phantom submodule so I can add the files to my index?</p>

<pre><code>ryan@ryan-HP-ProBook-4530s:/opt/staging/my.domain.com/public/profiles/mei_main$ ls
civicrm_starter.sql  mei_main.info  mei_main.install  mei_main.profile  modules  themes
ryan@ryan-HP-ProBook-4530s:/opt/staging/my.domain.com/public/profiles/mei_main$ git add themes
fatal: Path 'profiles/mei_main/themes' is in submodule 'profiles/mei_main'
ryan@ryan-HP-ProBook-4530s:/opt/staging/my.domain.com/public/profiles/mei_main$ ls -la
total 4704
drwxr-xr-x 4  48 502    4096 Aug 19 11:58 .
drwxr-xr-x 6  48 502    4096 Aug 19 11:49 ..
-rwxr-xr-x 1 503 502 4786089 Apr 29 13:43 civicrm_starter.sql
-rwxr-xr-x 1  48 502    2985 Jun  4 02:20 mei_main.info
-rwxr-xr-x 1  48 502     579 Jun  4 02:20 mei_main.install
-rwxr-xr-x 1  48 502     736 Jun  4 02:20 mei_main.profile
drwxr-xr-x 4  48 502    4096 Aug 26 17:26 modules
drwxr-xr-x 4  48 502    4096 Aug 16 10:23 themes
ryan@ryan-HP-ProBook-4530s:/opt/staging/my.domain.com/public/profiles/mei_main$ cd ../../
ryan@ryan-HP-ProBook-4530s:/opt/staging/my.domain.com/public$ grep path .gitmodules | sed 's/.*= //'
grep: .gitmodules: No such file or directory
</code></pre>
","3","861826","",""
"60465481","4623259","2020-02-29 13:09:05","3","2351","<git><git-submodules><rebase><git-rewrite-history>","Rebase git submodule and parent repo","<p>My situation: You have a feature branch based off master, and someone commits to master. Now your history is like this:</p>

<pre><code>A - B - C - D (master)
         \
           E - F - G  (feature)
</code></pre>

<p>So you'd like to rebase feature onto master for a clean history, as one does. But consider this: that repo is a submodule of another, and the parent repo references the submodule's commits like so:</p>

<pre><code>A - B - C - D (submodule:master)
         \
           E - F - G  (submodule:feature)
           *    *
           *     *
           X - Y - Z             (parent:feature)
              (asterisks represent references to submodule)
</code></pre>

<p>If I rebase the submodule naively, the parent's references to submodule's commits will be invalid. Let's assume that some of the commits in the feature branches are meaningful enough to separate, so squashing them into one commit is out.</p>

<p>Any way to do it and maintain those references? (both 'feature' branches can be freely rewritten).</p>
","0","4623259","0","0"
"4595801","199822","2011-01-04 16:15:04","2","2439","<git><teamcity><git-submodules>","TeamCity + git and authentication for submodules","<p>Trying to configure TeamCity to build our project, I'm having trouble getting the git VCS module to checkout a submodule. The submodule should be checked out using the same authentication as the root module, but I cannot figure out how to configure TeamCity for this. I have tried both password and private key authentication, but they both fail:</p>

<pre><code>[12:07:14]: Patch is broken, can be found in file: C:\TeamCity\buildAgent\temp\cache\temp8149231956777659708patch_48
[12:07:14]: RunBuildException when running build stage UpdateSourcesFromServer: Failed to build patch for build 31 {build id=48}, VCS root: ssh://host/repo#master {id=2}, due to error: Patch building failed: 
jetbrains.buildServer.buildTriggers.vcs.git.submodules.SubmoduleFetchException: Cannot fetch submodule. Repository URL: 'ssh://*****@host/repo', submodule path: 'subrepo'.
org.eclipse.jgit.errors.TransportException: ssh://*****@host/subrepo: Auth fail
com.jcraft.jsch.JSchException: Auth fail
</code></pre>

<p>TeamCity runs on a windows machine and the git repos are on a linux machine.</p>

<p>Is it possible to configure authentication for submodules in TeamCity, or can anyone come up with a good workaround?</p>
","2","199822","",""
"4600835","107277","2011-01-05 04:31:52","52","19865","<git><github><git-submodules>","Adding git submodule that contains another submodule?","<p>I'm working on a project in one git repository (A) that is including another git repository (B), which in turn includes a third git repository (C).  In A, I added B via:</p>

<pre><code>git submodule add https://github.com/blt04/sfDoctrine2Plugin.git plugins/sfDoctrine2Plugin
</code></pre>

<p><a href=""https://github.com/blt04/sfDoctrine2Plugin/tree/master/lib/vendor"" rel=""noreferrer"">Click here</a>, and you can see where B references C: <a href=""https://github.com/doctrine/doctrine2"" rel=""noreferrer"">https://github.com/doctrine/doctrine2</a></p>

<p>After doing my git submodule add, my <code>plugins/sfDoctrine2Plugin/lib/vendor/doctrine</code> folder (should contain C) is empty.  I tried doing a <code>git submodule update --recursive</code> as per <a href=""https://stackoverflow.com/questions/1535524/git-submodule-inside-of-a-submodule/1535541#1535541"">this StackOverflow answer</a>, but it still didn't import the files to that path.  I'm at a loss as to what to do here.</p>
","1","107277","0","0"
"22953998","309830","2014-04-09 05:56:22","1","47","<git><git-submodules>","How convert sub dir to a submodule in git repo and commit it?","<p>My project is already set and working. Some of the files are from an external project. Now, I want to use git to manage the changes of the external file from upstream.</p>

<p>I did the following:</p>

<pre><code>rm &lt;external files&gt;              # &lt;= should use ""git rm""
git commit -m ""prepare submodule""

git submodule add &lt;...remote...&gt; extLibs
cd extLibs
git pull master
&lt;make changes&gt;
git commit -m""make external project work with my project""

cd .. # back to upper level project
</code></pre>

<p>At this point, I found I have to commit changes in my main repo again for the files I have already committed in the submodule. <strong>I don't even know if it is the correct behavior.</strong> Can I change it so I don't need to commit twice?</p>
","0","309830","0","0"
"22970467","2847817","2014-04-09 18:00:13","0","54","<git><github><assets><git-submodules><atlassian-sourcetree>","Storing collections of binaries that update infrequently in a git repository","<p>I come from a p4 background, so apologies for the newbie git question.</p>

<p>What would be the best way to organize infrequently updated binary files as part of a git repo? These assets may be part of a build system and is required to exist alongside source. The bottome line is to get a complete build environment with a single clone. I'm aware of git extensions that provide support for binaries, etc. but I'd like to explore a cleaner solution with vanilla git if possible as I'm not sure if IDEs such as SourceTree support them out of them box.</p>

<p>Example scenario:
- Project X has binary asset collections Av1, Bv1, Cv1
- Six months later Av2, Bv2 become available
- Delete Av1, Bv1 and add Av2, Bv2</p>

<p>Simply keeping those assets as part of the parent repo is the obvious solution. But AFAIK all history is maintained in the repo, so even deleted assets are never really gone. This is something I want to avoid. Is there a way to selectively purge folders/files from a repo? </p>

<p>The recommended approach for binaries seems to be the use of submodules. I was thinking of keeping each version of the assets as their own repo and submodule them into the parent repo. With submodules, each versioned collection of assets will be in its own repo. However, do the histories/copies stick around when submodule repos are deleted?</p>

<p>Which is better? Are there other approaches? Does anyone have firsthand experience with a comparable scenario?</p>
","2","2847817","",""
"42199497","3270191","2017-02-13 08:19:42","2","1185","<.net><git><visual-studio><nuget><git-submodules>","How to resolve nuget packages when using git submodules for VS Solution","<p>I have two repositories. The first one is big integration repository with lots of projects in it. The second one is relatively small solution with a number of projects in it that is being developed separately and then integrated into the first solution.</p>

<p>I added second git repository to the first git repository as submodule, so I have such file structure:</p>

<pre><code>MainSolution.sln
SomeProject1
SomeProject2
packages
my-second-project
  SecondSolution.sln
  SomeProject3
  SomeProject4
</code></pre>

<p>And my separate repository (after restoring nuget packages) looks like</p>

<pre><code>SecondSolution.sln
SomeProject3
SomeProject4
packages
</code></pre>

<p>Now, each project references nuget restore packages folder separately. So None of my projects from added submodule were able to restore their nuget packages because they searched for <code>my-second-project/packages</code> folder which doesn't exist. And if I reinstall nuget packages, then I can see in my git diffs that they begin to reference root packages folder (like <code>..\..\packages</code>).</p>

<p>How can I resolve this?</p>
","3","3270191","",""
"42203023","2300237","2017-02-13 11:31:13","0","440","<git><github><git-submodules>","Manage git submodules","<p>We are using github to manage our project.
In my project we have two modules one for front-end and one for back-end.</p>

<p>I have one git repo and I am going to push my back-end code in it. Now, I want to make a submodule in that repo and want to push front-end code in it. </p>

<p>Q-> Is it required to make a seperate git repo for front-end and then I have to link it my main repo by running below command ?</p>

<p>git submodule add gitRepoUrl /path/of/submodule</p>

<p>Q-> How can I make a folder of an existing git repo a submodule ?
(Do I have to make that folder a git repo first and then have to link it in main repo)</p>

<p>Thanks</p>
","0","2300237","",""
"23027339","90025","2014-04-12 07:05:35","2","120","<git><git-submodules>","How do I correctly move a git submodule?","<p>I have a git repo on github which contains a submodule. I'd like to move the submodule to a new directory. The closest I've gotten is:</p>

<pre><code>git submodule add --name new git://github.com/a/b new
git rm -r --cached old
git add .gitmodules new
git commit -m ""move submodule from old to new""
</code></pre>

<p>This works well but prints</p>

<pre><code>warning: unable to rmdir old: Directory not empty
</code></pre>

<p>whenever someone checkouts out my repo and had previously run <code>git submodule update --init</code>.</p>

<p>How can I make a commit that instructs the client's git to remove that directory?</p>
","2","90025","0","0"
"42422464","4127646","2017-02-23 17:27:41","1","3160","<git><git-submodules><git-checkout>","Git ""fatal: no submodule mapping found in .gitmodules for path.."" but no submodule reference found","<p>I have pulled a company repo down and started working; the initial branch was <code>master</code>.  In attempting to <code>git checkout</code> I'm encountering the following error consistently <em>(backslash = line break)</em>:</p>

<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false -c \
    credential.helper=sourcetree checkout master 
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.  #so far, so good..


git -c diff.mnemonicprefix=false -c core.quotepath=false \
     -c credential.helper=sourcetree submodule update --init --recursive 
fatal: no submodule mapping found in .gitmodules for path 'vendor/omnipay/pin'
Completed with errors, see above
</code></pre>

<p>I have searched for answers on this but all of them involve the presence of some reference to <code>submodule</code> somewhere, including <a href=""https://stackoverflow.com/questions/4185365/no-submodule-mapping-found-in-gitmodule-for-a-path-thats-not-a-submodule"" title=""this one here"">this one here</a>.  However:</p>

<ol>
<li><p><code>.git/config</code> - contains no reference to submodule(s) at all</p></li>
<li><p><code>vendor/omnipay/pin</code> - this directory is empty including no hidden dot-files.</p></li>
<li><p>There is no string <code>submodule</code> in vendor/omnipay or even vendor/ for that matter</p></li>
</ol>

<p>Again, other posts don't seem to apply as there is no file or submodule line to reference/remove.  What is the problem here and how do I fix it?</p>
","5","4127646","0","0"
"42417294","1559401","2017-02-23 13:36:06","75","75586","<git><git-submodules><git-commit>","Why does git fail to fetch specific valid submodule for a given commit and how to fix it?","<p>I have a <code>git</code> repo which has another one as a <code>submodule</code> dependency. In the root of my project (where the <code>.git</code>, <code>.gitsubmodules</code> etc. are) I called</p>
<pre><code>git submodule update
</code></pre>
<p>This failed with the following message:</p>
<blockquote>
<p>Fetched in submodule path 'src/framework', but it did not contain cc8c38e9d853491c672452d8dbced4666fc73ec8. Direct fetching of that commit failed.</p>
</blockquote>
<p>where <code>src/framework</code> is a sub-directory of my project (<code>PROJECT_ROOT/src/framework</code>) and should be where the third-party repo lands. The given commit hash is a valid one as in I can use to access that commit through the web interface.</p>
<p>I have also tried <code>git clone --recursive &lt;my-repo&gt;</code> but it fails too.</p>
<p>The contents of my <code>.gitmodules</code> is</p>
<pre><code>[submodule &quot;src/framework&quot;]
        path = src/framework
        url = git@gitlab-blah-internal.de:gh/framework.git
</code></pre>
<p>In addition to that I have to note the following important fact: due to recent updates in the <code>framework</code> repo my code breaks hence I really need to retrieve that specific version of it where things were working fine.</p>
","10","1559401","0","0"
"60558618","6400403","2020-03-06 06:24:25","1","696","<git><git-submodules><git-tag>","Submodule tags are not updated with git submodule repository URL update","<p>I have to update the repo URL of a submodule used in my main repo. These are the steps I've followed.</p>

<p>1) Modify the repo URL in <code>.gitmodules</code> file.</p>

<p>2) Run <code>git submodule sync</code> (Then <code>.git/config</code> got updated with the new URL)</p>

<p>3) Then i executed the below command:</p>

<pre><code>git submodule update --init --remote -- &lt;path-to-submodule-folder&gt;
</code></pre>

<p>After this i got the submodule files updated from the new repo URL. But in <code>.git/modules/&lt;path-to-submodule-folder&gt;/packed-refs</code> file the tags are still of the previous repo only. </p>

<p>For example:</p>

<p>packed-refs before submodule and after submodule are same like below (which are the tags fetched from the previous repo URL):</p>

<pre><code>208058b9ad3fd54caf66a9c9972cfe80d4f4bc13 refs/tags/3.3.3
3dc3a0ea2d0773af4c0ffd7bbcb21c608e28fcef refs/tags/3.3.4
81bdde705cc69776fd63c870581ee0c793d48873 refs/tags/3.3.5
f8d653d1f9329081e017caf6cb9341834a71b6d2 refs/tags/3.3.6
21ae2afd4edaa1b69782c67a54182d34efe43f9c refs/tags/3.3.7
</code></pre>

<p>Ideally i should get new tags in packed-refs file after the submodule is updated so that i can checkout to a specific tag in the new repo.</p>

<p>Thanks!</p>
","0","6400403","0","0"
"5127178","279024","2011-02-26 13:30:24","61","19484","<git><vim><gitignore><git-submodules>",".gitignore files added inside Git submodules","<p>I recently reorganized my dotfiles to live inside a Git repository at <code>~/Dropbox/dotfiles</code> and I'm using pathogen to bundle all Vim addons inside <code>~/Dropbox/dotfiles/home/.vim/bundle</code>. These addons were added as Git submodules.</p>

<p>Now the problem is, when I run Vim, it automatically generates the documentation for all addons and puts them inside each submodule directory. This adds untracked content to the submodules, which I'd like to avoid.</p>

<pre><code>ruby-1.8.7-p330@gs ~/Dropbox/dotfiles ‹master*› $ git st
# On branch master
# Changed but not updated:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   home/.vim/bundle/fuzzyfinder (untracked content)
#   modified:   home/.vim/bundle/l9 (untracked content)
#   modified:   home/.vim/bundle/matchit (untracked content)
#   modified:   home/.vim/bundle/ruby (untracked content)
#   ...
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I tried to add a <code>.gitignore</code> file to the root of my Git repository to ignore all <code>doc</code> folders inside submodules, but this doesn't seem to work:</p>

<pre><code>home/.vim/bundle/**/doc
</code></pre>

<p>My question: is there a way to ignore files and folders inside Git submodules or maybe configure Vim to create the documentation in a folder outside the Git repository?</p>

<p>EDIT: as Randy Morris pointed out, this might be a duplicate of <a href=""https://stackoverflow.com/questions/4343544/generating-tags-to-different-location-by-pathogen#4346300"">Generating tags to different location by pathogen</a></p>
","4","279024","0","0"
"60565199","4463512","2020-03-06 13:35:38","0","629","<angular><git><npm><git-submodules>","Angular 2 project's dependencies of a git submodule","<p>I am developing an angular 8 project which contains a git submodule in src / app / submodule. I wish this submodule had a package.json of its own in which it recorded its dependencies. I would also like that by running an npm_install its dependencies were moved to the main node_modules of the project, in the root, in order to make them available to the whole application. Is it possible to achieve something similar with some solution? At the moment if I run npm install inside the folder I have as a consequence the creation of node_modules inside src / app / core, and I'm not happy with that because I have to be able to share its dependencies with the whole application. Tips?</p>
","3","4463512","",""
"42585548","3800049","2017-03-03 17:59:16","2","1921","<git><git-submodules><git-remote>","git submodule: track 2 branches","<p>Since a while (v1.8.2), <code>git submodule</code> allow us to track a specific branch:</p>

<pre><code>git submodule add -b &lt;tracked_branch&gt; &lt;added_sobmodule&gt;
</code></pre>

<p>That's pretty useful in a use case where you use meta-projet to track a bunch of project in their <em>releasing</em> branch from a public remote. </p>

<p>Now, I have a use case in which I need to track both a <em>release</em> branch <strong>and</strong> a <em>dev</em> branch. So I add to the previous command:</p>

<pre><code>git submodule add -b &lt;another_tracked_branch&gt; &lt;already_added_sobmodule&gt;
</code></pre>

<p>I get this error (v2.12.0): </p>

<pre><code>'already_added_sobmodule' existe déjà dans l'index
</code></pre>

<p>Which mean that <em>already_added_sobmodule</em> already exist in the index...</p>

<p>How could I track (using submodule) only 2 of the branches of a public git remote?</p>
","0","3800049","0","0"
"42589875","3800049","2017-03-03 22:59:24","2","289","<git><git-submodules>","Fix broken git submodule due to manual directory mv","<p>A directory that is a submodule have been manually moved. Then the git repo is broken as it can be seen by a <code>git submodule status --all</code> call. It returns:</p>

<pre><code>fatal: no submodule mapping found in .gitmodules for path &lt;actual-sobmodule-path&gt;
</code></pre>

<p>I removed everything about the faulty sobmodule in the various configuration files (.git/config,  .gitmodules and path/to/sobmodule/.git/config) but it does not fix the problem.</p>
","1","3800049","",""
"60712774","1343","2020-03-16 20:26:59","1","198","<git><git-submodules>","Make git fetch submodules using the same protocol as the parent?","<p>Is there a way to set up a repository so that any user that clones it via <code>ssh</code> or via <code>https</code> will also clone any submodules it contains via the same protocol as they used for the parent?</p>

<hr>

<p>If that is not possible, that fact (preferably with a citation of why that choice was made by the git designers) would be a valid answer.</p>

<p>Things I'm <strong>not</strong> asking for (because I already know them) and which I'd not consider a useful answer:</p>

<ul>
<li>Making it always use one or the other</li>
<li>A way that <a href=""https://stackoverflow.com/questions/36564696/how-to-use-same-protocol-for-git-submodules"">a user can override which is used</a></li>
</ul>
","1","1343","",""
"60730176","6041641","2020-03-17 21:02:31","1","845","<git><git-submodules><git-add>","How do I ""git add"" a modified submodule into the main module?","<p>I modified, added, committed and pushed a change to a submodule, then went up to the main module directory and ran:</p>

<pre><code># git status
...
Changes not staged for commit:
...
modified:   deps/gr-d13 (modified content, untracked content)
...

# git add deps/gr-d13
(no errors)
# git status
...
Changes not staged for commit:
...
modified:   deps/gr-d13 (modified content, untracked content)
...
</code></pre>

<p>Exactly the same as before.  My submodule was not staged.  Why not?</p>

<p>Both main and submodule are on the same branch.</p>
","2","6041641","",""
"23678842","3323896","2014-05-15 12:55:04","0","159","<django><git><git-submodules>","Struggling with git submodule and django","<p>I have a django project A which contains an app App1. I also have a django project B in which I'd like to have the same App1. Then, when I edit App1 in my project A, I'd like to update App1 and be able to pull changes in project B.</p>

<p>A and B are under separate git repository.
What should be my workflow?
Should I create a submodule and a new git repo for the App1 I want to duplicate? I read a lot about people struggling with submodules and tricking git...</p>

<p>I don't want to break anything...</p>

<p>Cheers</p>
","2","3323896","",""
"60936262","2348716","2020-03-30 17:39:01","2","522","<git><google-cloud-functions><gcloud><git-submodules>","Google Cloud Functions not pulling in git submodules","<p>I'm using a Cloud Source Repo for my Cloud Function which is connected to an external GitHub repo. The github repo has a submodule.</p>

<p>When my cloud function runs (Python), I get import errors when trying to import files from said submodule.</p>

<p>It the same errors I get if I do:
<code>
git clone &lt;repo&gt;
</code>
And then try to run my python script instead of:
<code>
git clone --recurse-submodules &lt;repo&gt;
</code></p>

<p>AFAICT, it seems like Cloud Functions isn't pulling in my submodules. I've tried making the submodule point directly to a mirror repo in Cloud Source Repository - but to no effect.</p>

<p>Any idea how to get submodules working correctly with Cloud Functions?</p>
","1","2348716","",""
"61272603","11383283","2020-04-17 13:15:24","0","648","<windows><git><git-submodules><symlink><hugo>","Why do am i getting error 404 on my sub module symlink found on my git repo?","<p>I'm currently having an issue with my git submodule. I've created a git submodule in my cloned project folder and it appears right on my repo. But when I click on the symlink, it gives me Error 404 page not found. I am VS Code and Windows 8 x64. Thanks a lot for your help! Below is what is written in the .gitmodules</p>

<pre><code>[submodule ""themes/casper-two""]
    path = themes/casper-two
    url = ""https://github.com/eueung/hugo-casper-two""
</code></pre>

<p><a href=""https://i.stack.imgur.com/RJP62.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RJP62.png"" alt=""submodule symlink""></a></p>

<p><a href=""https://i.stack.imgur.com/SgLUd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SgLUd.png"" alt=""enter image description here""></a></p>
","0","11383283","",""
"42793618","7000031","2017-03-14 18:18:00","5","2921","<git-svn><git-submodules><git-subtree><svn-externals><git-subrepo>","svn to git migration with nested svn:externals","<p>Migrating from svn with svn externals, to git. 
Each svn externals may have it's own svn:externals. There is no guide how to migrate svn with externals to git here that I found useful.
Each branch may have it's own branches tags trunk. 
What's the best way to migrate the whole repository?
I am looking at git svn clone of the main repository adding git submodules, of each one external cloned as well. But Since the externals are nested, I don't know what's the best solution.
Script used till now:</p>

<pre><code>https://github.com/eneroth/git-externals
https://github.com/eneroth/git-externals
</code></pre>
","4","7000031","0","0"
"5889246","738734","2011-05-04 20:08:41","3","576","<git><git-submodules>","git submodule foreach: execute read","<p>Is it possible to execute a read inside a git foreach?</p>

<pre><code>git submodule foreach 'read -p ""test""; echo $REPLY'
</code></pre>

<p>does not work at all as the read gets the input from git itself - which is the objname and hash here.
Is there any chance to read interactively of the console?</p>
","0","738734","",""
"61668461","263061","2020-05-07 22:00:06","3","318","<git><git-submodules><git-diff>","How to effectively review git submodule updates/rebases?","<p>Our project uses a git <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow noreferrer"">submodule</a> to pin one of our library dependencies.</p>

<p>We regularly <code>rebase</code> the submodule to follow upstream changes, and we also have a set of commits on top of it that we cannot easily upstream.</p>

<p>When somebody rebases the submodule, I only see this in the <code>git diff</code> of the parent repo:</p>

<pre><code>--- a/mysubmodule
+++ b/mysubmodule
@@ -1 +1 @@
-Subproject commit abc12345abc12345abc12345abcd12345abc1234
+Subproject commit efg67890efg67890efg67890efg67890efg67890
</code></pre>

<p>That is not very useful. When I <code>git diff</code> these commits in the submodule, I get a lot of output, including all of the upstream changes, with our commits on top buried in between. I cannot easily judge whether some of the conflict resolution performed on our own commits introduced some mistakes.</p>

<p><strong>How can I effectively code-review the changes to the submodule?</strong></p>
","1","263061","0","0"
"24547810","1906123","2014-07-03 07:41:08","3","350","<git><git-submodules>","Display unpushed commits in git submodules","<p>I know there is some questions already around there as <a href=""https://stackoverflow.com/questions/2016901/viewing-unpushed-git-commits"">this one</a>. In my case:</p>

<p>Let's say I have a repo R1 with a submodule SR2.</p>

<ol>
<li>I do a submodule commit in SR2.</li>
<li>I commit the submodule update in R1</li>
<li>I push the submodule update in R1</li>
<li><strong>I forgot to push in SR2</strong></li>
</ol>

<p>Then anyone who will clone repository R1 will get a <code>reference is not a tree</code> error, because obviously the submodule commit revision is only available locally currently.</p>

<p>If I then type <code>git status</code> in R1 repository, nothing warns me about the fact that my submodule is ahead of the remote repository.</p>

<p>If there any way to retrieve status recursively?</p>
","0","1906123","0","0"
"43221767","","2017-04-05 04:22:18","1","835","<git><github><git-submodules>","Add recursively git repos in subfolder as submodules","<p>Add recursively git repos in subfolder as submodules:</p>

<p>iam looking for a solution to add git repositories as submodules to a folder which is a git repo.</p>

<p>I already have the folder structure and the cloned repositories in the destination folder. All i need is to automate adding those repos in the subfolders as submodules.</p>

<p>there are hundreds of git repos so i want to automate it.</p>

<p>structure: folder 1 &amp; 2 serve as categories.</p>

<pre><code>~/gitrepo-main/folder1/folder01/submodule
~/gitrepo-main/folder1/folder02/submodule
~/gitrepo-main/folder2/folder01/submodule
~/gitrepo-main/folder2/folder02/submodule
</code></pre>

<p>EDIT:</p>

<p>probably found the solution via <a href=""https://stackoverflow.com/questions/16224603/convert-git-repo-to-submodule"">Convert git repo to submodule</a></p>

<p>script run from gitrepo-main folder</p>

<pre><code>#!/bin/bash
for d in `find folder1/ -maxdepth 3 -mindepth 3 -type d`
do
    pushd $d
    export url=$(git config --get remote.origin.url)
    popd
    git submodule add $url $d
done
</code></pre>
","0","","0","0"
"62076196","11053201","2020-05-28 23:29:37","1","140","<windows><git><git-submodules><git-clone><bitbucket-server>","git submodule breaks repo, cloning the submodule directly works","<p>I've found an issue in which I'm using this command:</p>

<p><code>git clone --recurse-submodules ssh://git@someurl:9999/someproject/repoX.git</code></p>

<p>git clones the repo successfully if I dont pass git clone any flags, but gives me this error when I use --recurse-submodules and git attempts to clone the single submodule:</p>

<pre><code>git@someurl: Permission denied (publickey).
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'ssh://git@someurl:9999/someproject/submodule_repo.git' into submodule path 'C:/someproject/submodule_repo' failed
</code></pre>

<p>The obvious answer is that my permissions are bad, but I can clone the submodule repo directly without issue..
This command succeeds:
<code>git clone --recurse-submodules ssh://git@someurl:9999/someproject/submodule_repo.git</code></p>

<p>what gives git?</p>
","1","11053201","0","0"
"62088745","2411060","2020-05-29 14:52:35","2","414","<java><git-submodules><querydsl>","QueryDsl does not generate q-classes for @Entity classes of git submodules","<p>I have a java project (spring boot) with git submodules. I've added QueryDsl to my project but it generates q-classes only for @Entity classes of main project, not for @Entity classes of submodules.</p>

<p>What should I do to fix it?</p>

<p>p.s. Spring Data works well, all @Entity classes are available to use.</p>
","3","2411060","",""
"6474847","439789","2011-06-24 23:47:57","63","76360","<git><git-submodules>","How do I git clone --recursive and checkout master on all submodules in a single line?","<p>I really like this command to fetch a repo with submodules:</p>

<pre><code>git clone git@github.com:my_user/my_repo.git --recursive
</code></pre>

<p>However, the submodules are all set to ""no branch"" when they arrive, and I have to manually checkout master on each and every one.  Is there a way to recursively pull submodules and automatically set the branch to master?</p>
","0","439789","0","0"
"24777973","1261432","2014-07-16 10:05:14","19","8527","<git><git-submodules>","Adding git submodules automatically (.gitmodules)","<p>I have a repo with several submodules. I want to add some others, and the fastest way for me is to use the <code>.gitmodules</code> (which in my opinion should clearly allow any kind of submodule management).</p>

<p>However, when editing this file and adding submodules, after a <code>git submodule init</code> nothing is added (except the submodules that were already present before the modification).</p>

<p>Is there any solution to add a submodule without going through <code>git submodule add</code> (ie, just by editing the <code>.gitmodules</code> file and then <code>git submodule update --init</code>) ?</p>

<p>That is, the following workflow should automatically add the submodule ""<em>foo/bar</em>"":</p>

<pre><code>Add the following to .gitmodules:
    [submodule ""foo/bar""]
        path = foo/bar
        url = https://example.com/foo.git

Run the following command after saving:
    git submodule init
    git submodule update

Expected result:
    submodule 'foo/bar' automatically gets added
    it is also updated (the update command)
</code></pre>
","5","1261432","0","0"
"43437909","79891","2017-04-16 13:46:12","2","1280","<git><unity-game-engine><continuous-integration><git-submodules>","Cloud build failing on git submodules","<p>I have a Unity project in a git repo hosted on VSTS with submodules, I've integrated it the git repo with Unity cloud build.</p>

<p>When Cloud Build tires to do a build it seems to go fine checking everything out until it reaches the modules, it hangs on the line '328: Cloning into 'Assets/MySubmodule'... and just waits there for about an hour before the build fails for taking too long.</p>

<p>I get an error sometimes that goes like:</p>

<p>Username for '<a href=""https://mycompany.visualstudio.com"" rel=""nofollow noreferrer"">https://mycompany.visualstudio.com</a>': Clone of '<a href=""https://mycompany.visualstudio.com/DefaultCollection/_git/mysubmodulerepopath"" rel=""nofollow noreferrer"">https://mycompany.visualstudio.com/DefaultCollection/_git/mysubmodulerepopath</a>' into submodule path 'Assets/mysubmodule' failed</p>

<p>I'm thinking the issue might be that the submodules are not being referenced as ssh links but directly as https, is there some work around or something I need to do to get them to work?</p>
","0","79891","0","0"
"62326295","13277098","2020-06-11 14:06:34","0","32","<git><branch><git-merge><git-submodules><git-commit>","no easy way to merge a git mv?","<p>I have two repo:</p>

<p>App and Libs. Libs is a sub-module of App, so all my libs are like path: App/Libs/lib1 App/Libs/lib2 and so on. I had a library like App/libX and I did: </p>

<pre><code>cd App
git mv libX ../Libs/
</code></pre>

<p>I then did a commit in Libs, and another in App (to update the submodule). Everything seems working in this feature branch- let's call it: ft_branch. </p>

<p>I then wanted to merge these edits in my dev branch, I went in the dev branch of Libs and merged ft_branch into dev. No problem so far. I then went into App and tried a merge of ft_branch into dev, but now I have this error:</p>

<pre><code>CONFLICT (modify/delete): Libs deleted in ft_branch and modified in HEAD. Version HEAD of Libs left in tree at Libs~HEAD.
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>Any hint?</p>
","8","13277098","0","0"
"6791705","205058","2011-07-22 14:45:11","5","3156","<git><macos><git-submodules><git-pull>","Submodules and 'git pull --rebase'","<p>We recently switched to git and are trying to use Submodules to include our Common libraries.</p>

<p>No matter what we do we can not get 'git pull --rebase' to work in the Super or Submodule.</p>

<p>We get: </p>

<pre><code>james:libraries james$ git pull --rebase
Cannot pull with rebase: You have unstaged changes.
Please commit or stash them.
</code></pre>

<p>This happens even if we do not have any local changes at all and have a clean directory. Any thoughts on what we might be doing wrong?</p>

<p>Thanks!
James</p>
","1","205058","0","0"
"25060648","1153770","2014-07-31 13:51:18","2","1565","<git><branch><git-submodules>","How to list existing branches of a git submodule (without initializing it first)?","<p>I have a project with lots of submodules for some specific reason. I just want to know which branches exist for each submodule. I know that I could initialize each submodule with </p>

<pre><code>git submodule update --init
</code></pre>

<p>and perform a </p>

<pre><code>git ls-remote --heads {URL} 
</code></pre>

<p>on each submodule to get the currently existing branches of that submodule (git branch -r also lists already deleted branches). But since our project exists of many submodules the initialization above needs a lot of time on the first run. Is there a way to get the existing branches without initializing the submodules?</p>
","0","1153770","0","0"
"62552794","12680409","2020-06-24 10:19:26","0","177","<git><git-submodules><git-subtree>","How to read .git/index file for submodules","<p>I have <code>test</code> folder in which I'm adding a submodule and after that I manually delete the <code>.gitmodules</code> file from the folder and then again want to add the submodule but facing error like  <code>'test' already exists in the index</code> if I have multiple submodules and they don't have <code>.gitmodule</code> file how we will identify that they are submodules or not? If this question is silly please sorry because I'm very new to git. I suggested by someone for <a href=""http://%20https://git-scm.com/docs/git-ls-files"" rel=""nofollow noreferrer"">link</a> but not able to make a command which identifies this. Can anybody help me in this?</p>
","0","12680409","",""
"7048635","243568","2011-08-13 04:44:42","2","363","<git><git-submodules>","Can git submodules have a custom root?","<p>I currently have two projects, a framework and an application. The repository for the framework contains a number of directories that are not useful in the application. I'd like to be able to configure git submodule to only copy the directories I want from my framework repository to the root of my application directory.</p>
<p>Here's what my project directories look like:</p>
<h3>Framework</h3>
<ul>
<li>/
<ul>
<li>red-locomotive/ - the framework i want to use</li>
<li>modules/ - a directory with extra modules</li>
<li>lib/ - libraries that the engine depends on</li>
<li>examples/ - some tests</li>
<li>readme.md etc...</li>
</ul>
</li>
</ul>
<h3>Application</h3>
<ul>
<li>/
<ul>
<li>red-locomotive/ - from framework</li>
<li>modules/ - from framework</li>
<li>lib/ - from framework</li>
<li>kernel.js etc...</li>
</ul>
</li>
</ul>
<p>You can see that I want the three directories from the framework repository in the root of my application. can git submodules do this?</p>
","0","243568","",""
"43895608","297032","2017-05-10 14:36:49","1","610","<git><git-submodules><githooks><git-subtree>","How to assign different git per-folder permissions while you maintain the commit binding?","<h2>Background</h2>

<p>I've searched a lot and I am aware that <em>different folder permissions under the same repository</em> is something that is not supported by git. However, I still haven't found a satisfactory git model for my infrastructure although I've studied both <code>submodules</code> and <code>subtree</code></p>

<p><strong>References</strong></p>

<ul>
<li><a href=""https://stackoverflow.com/questions/3131912/why-are-git-submodules-incompatible-with-svn-externals/3132221#3132221"">Why are git submodules incompatible with svn externals?</a></li>
<li><a href=""https://stackoverflow.com/questions/2065559/using-two-git-repos-in-one-folder/2065749#2065749"">Using two git repos in one folder</a></li>
<li><a href=""https://stackoverflow.com/questions/31769820/differences-between-git-submodule-and-subtree"">Differences between git submodule and subtree</a></li>
<li><a href=""https://stackoverflow.com/questions/769786/vendor-branches-in-git/769941#769941"">Vendor Branches in Git</a></li>
</ul>

<p>In this point have to thank <a href=""https://stackoverflow.com/users/6309/vonc/"" title=""VonC"">@VonC</a> for his immense contribution to my understanding of those models</p>

<h2>Infrastructure</h2>

<p>I maintain a highly configurable application so most of my <strong>commits affect both the source and the configuration</strong> so I have placed them under a single git repository which structure looks like this:</p>

<pre><code>.
└── myapp
    ├── README.md
    ├── source
    └── conf
</code></pre>

<h2>Issue</h2>

<p>My issue is that my <strong>conf directory needs to be exposed to the client</strong>  (<em>part of what makes my product highly configurable</em>) who wants to perform a <code>git-pull</code> but for obvious reasons I don't want my client to get the source directory as well.</p>

<h2>Workaround</h2>

<pre><code>.
└── myapp-conf
    └── ""configuration""
.
└── myapp-source
    ├── README.md
    └── ""sources""
</code></pre>

<p>This structure assumes two distinct repositories with no connection between them whatsoever, which doesn't meet my exact needs by saves me from the hustle <code>submodules</code> and <code>subtree</code> introduce,</p>

<h2>Need</h2>

<p>A way to:</p>

<ul>
<li><strong>associate a single commit ID to changes in both</strong> <em>source</em> <strong>and</strong> <em>conf</em> <strong>directories</strong></li>
</ul>

<p><em>while at the same time</em></p>

<ul>
<li><strong>being able to prevent the client from pulling my source code</strong>.</li>
</ul>

<p>Sorry for the long question and thank you all in advance.</p>
","0","297032","0","0"
"43907820","3034990","2017-05-11 06:13:49","0","372","<git><windows-10><git-submodules>","git error for Windows 10: ""Unable to determine absolute path of git directory""","<p>I am starting to get the following error from git after I switch to Winodows 10 recently. </p>

<pre><code>git submodule -q update --init --recursive: Unable to determine absolute path of git directory
</code></pre>

<p>Does anyone know what this error means and how to fix it?</p>
","2","3034990","",""
"62588847","10534730","2020-06-26 05:57:01","2","348","<git><git-submodules>","How to `git pull` all submodules without initializing the submodules","<p>Given a git repository with hundreds of submodules that I don't need or want to initialize because it would take a long time, how would I move the submodule pointer to the latest commit of each submodule?</p>
<p>If all the submodules were initialized I could use something like <code>git submodule foreach git pull</code>.</p>
<p>There may be some related gotchas like needing to specify which branch of each submodule to pull. In this case git should use the branch specified in the .gitmodules file for each submodule. I would like the command to go ahead and follow the specified branch even if a submodule's history has been rewritten. I would expect to get an error if the branch specified in the .gitmodules file does not exist.</p>
<p>Errors should either be reported at the end of the command output or sent to a log file so that they are not overlooked.</p>
","0","10534730","0","0"
"62598858","12300522","2020-06-26 16:18:48","18","10469","<git-submodules>","git submodule vs npm package?","<p>I'm using git submodules to build and share components between projects. The projects are not in production yet, so at this point submodules are serving them well.</p>
<p>But I'm concerned about maintenance and deployment. Would it be a good idea to transform the submodules into npm packages?</p>
","0","12300522","0","0"
"43937513","3739043","2017-05-12 12:12:49","0","43","<git><git-submodules>","Include own git repo to external git versioned project","<p>I read about the possibility to integrate external git repositories with submodules:</p>

<pre><code># file .gitmodules
[submodule ""other""]
    path = other
    url = git@github.com:foobar/other.git
</code></pre>

<p>I want to do this vice versa. There is a git versioned open source project which I cloned locally. I want to work on this project, maybe make some commits and pull requests there.</p>

<p>First I want to develop an own module for that system and therefore I need to create an new folder within the project. For my own code I want to use git too.</p>

<p>To develop fast and see my changes immediately on my local dev machine I don't want to split their git repo and mine but use both parallel. So I can't change their <code>.gitignore</code> or <code>.gitmodules</code> with my stuff.</p>

<p>How can I integrate my git submodule without touching files of the main project?</p>
","0","3739043","",""
"25162708","2200250","2014-08-06 14:14:29","4","944","<git><continuous-integration><git-submodules>","Add conditional logic after ""git submodule foreach""","<p>I am working on a script to update submodules for various projects in a CI environment. The single script needs to take care following three cases:</p>

<ol>
<li>Project that always needs master branch of the submodule.</li>
<li>Project that has reference to specific branch of the submodule.</li>
<li>Project that has reference to specific commit of the submodule.</li>
</ol>

<p>Is it possible to create this single script to handle the submodule update from the parent project for all these different cases?</p>

<p><code>git submodule foreach git pull</code> would handle case 1 and 2 but not 3.</p>

<p><code>git submodule foreach git pull origin master</code> would handle 1 but also 3 in some sense as it won't fail.</p>

<p>Is there anyway to add conditional logic after foreach so I can get all submodules properly updated? Or am I trying to fix the problem in a wrong way?
Any help would be appreciated!</p>
","0","2200250","0","0"
"6935553","293642","2011-08-04 02:32:14","5","1681","<git><addition><git-submodules>","git add -p --ignore-submodules?","<p><strong>Is there a way to ignore dirty submodules when using <code>git add --patch</code>?</strong></p>

<p>I've set <a href=""https://stackoverflow.com/questions/3240881/git-can-i-suppress-listing-of-modified-content-dirty-submodule-entries-in-stat#answer-6935474""><code>ignore = dirty</code> as explained here</a>. This seems to only work with <code>git status</code> and <code>git diff</code>. I love <code>git add -p</code>. Having to skip through 10 dirty submodules every time I want to add a small change frustrates me.</p>

<p>I haven't quite figured out <code>git add -i</code> yet, but it looks like it handles dirty submodules the same way.</p>
","1","293642","0","0"
"6938142","68665","2011-08-04 08:13:19","15","7803","<git><maven><git-submodules>","How to get Maven release to clone git submodules?","<p>I've got a Maven project with some git submodules linked. Everything works fine until I do a release:prepare or :perform, the clean checkout these targets perform does not contain the submodules (or in other words, git clone is not recursive).
I could not find a proper way to configure Maven to call git clone with the --recursive option.</p>

<p>I was thinking of using the scm provider configuration (http://maven.apache.org/scm/git.html) or simply to configure the release plugin directly in the pom.xml, but couldn't get it to work.</p>

<p>Thanks.</p>
","1","68665","0","0"
"43808736","843726","2017-05-05 15:30:35","2","167","<android><git><git-submodules>","Use some files as a git submodule","<p>Is it possible to make a git submodule that contains only a few files from the working tree of the main project I'm working on?</p>

<p>Say my current directory structure looks like:</p>

<pre><code>.git
FolderA
    FileAA
    FileAB
FolderB
    FileBA
    FileBB
</code></pre>

<p>I want to have FolderA/FileAA and FolderB/FileBA as part of a submodule, while the rest as part of the main project.</p>

<p>Context: I'm working on an Android project that has an iOS counterpart. The team agreed that translations would be oficially handled in the Android format (strings.xml) and iOS translations would be auto-generated with an automated tool. In Android, translations are split among a set of folders for each language, but those folders might contain other files (such as style and color definitions in the case of the <code>values</code> folder). So the idea is to have all xml files relating to translations in a submodule that can be shared between platforms. In the case of iOS, it would reside in a separate folder, from which the automated tool will gather the translations and convert them in iOS style.</p>
","1","843726","0","0"
"6951617","685107","2011-08-05 04:55:53","1","2311","<git><gitosis><git-submodules><git-bare>","Is there a way to add submodules to a bare git repository?","<p>I have some repos on my server with gitosis. One of them is Main, it's including all the others. I work with them from my local machine, and submodules hierarchy was built on my local machine. Gitosis has repos as bare(?) so, it's impossible to include submodules on the server. Problem is, Main repo has a bare clone for Redmine (project management. Redmine shows stats, commits' and files' history. It also lets to write reflinks to commits or files or file's revision straight in wiki). But when files are placed in submodules, redmine cannot access them. So, how to make submodule stats visible in a bare repo?</p>

<hr>

<p><strong>=== upd ===</strong></p>

<p>I'm not sure my submodules are always included. Redmine uses a clone of a bare repo and always can show stats for any file, but submodules are shown as files with 0 size. I've already tried default scheme <code>git@123.456.789.001:Main.git</code> and now <code>ssh://git@123.456.789.001/Main.git</code> submodules are still shown like zero-length files.</p>

<p><code>git-status</code> works fine and shows unpushed commits from submodules, but repos are files, though. This is strange, but redmine now shows commits from submodules but in its own weird way, look at this:</p>

<p><img src=""https://i.stack.imgur.com/X4CEl.jpg"" alt=""redmine view differences issue with git submodules""></p>

<p>Now I'll try to create a subproject per every submodule, maybe then it will be referencing as it should be. <a href=""http://www.redmine.org/issues/3169"" rel=""nofollow noreferrer"">http://www.redmine.org/issues/3169</a> is totally related. </p>
","0","685107","",""
"7196519","","2011-08-25 20:04:00","2","1158","<git><git-submodules>","Working with Git submodules without .gitmodules","<p>
I'm interested in the specific case where you manually place one Git repository inside another Git repository (either by using <code>git clone</code> or by copy-pasting in the filesystem). I've noticed the following things happen when you do this:
</p>

<ol>
   <li>
      Git will save a pointer to a specific commit, like with a submodule.
   </li>
   <li>
      Git will not allow you to modify the contents of the subproject from within the
      superproject, like with a submodule.
   </li>
   <li>
      <code>git clone</code> on the superproject will not copy the subproject contents,
      like with a submodule.
   </li>
   <li>
      <code>git submodule</code> will not work. It complains about .gitmodules not being
      there.
   </li>
</ol>

<p><p>
I would like to know:</p>

<ul>
   <li>
      What does .gitmodules do? It's absence is the only obvious difference between a
      manual copy like this and a true submodule.
   </li>
   <li>
      Is there any other difference I don't know about?
   </li>
   <li>
      Does this manually-copied state have a special name?
   </li>
   <li>
      Is there any way to override and/or work around effects 3 and 4? (IE: I want to
      render the resulting repository fully usable)
   </li>
</ul>
","0","","",""
"7238426","482506","2011-08-30 03:39:48","16","15373","<git><git-submodules>","Understanding git submodule and ""freezing"" it at a specific commit hash or version","<p>Assuming the following project layout:-</p>

<pre><code>mainrepo_git
    |____ .git
    |____ .gitmodules
    |____ proj            &lt;------- directory containing the code files for mainrepo
            |____ 3rdpartysourcecode &lt;-- directory containing upstream open source code
            |      |____ .git
            |      |____ 3rdpartyfiles
            |
            |____ mainrepofilesanddirectories  
</code></pre>

<p><strong>mainrepo_git</strong> contains source code I am directly responsible for.  I have read/write access and can push and pull directly to a remote git repository which I manage.</p>

<p>Nested inside <strong>mainrepo_git</strong> is a directory which I named <strong>3rdpartysourcecode</strong>.  This <strong>3rdpartysourcecode</strong> directory is in fact another git repo (also commonly referred to as a ""git submodule"") which is pointing to an open source 3rd party git repository managed by other developers. I only have read access to it. No write access.</p>

<p>Is there any way of 'freezing' a specific commit hash of the git submodule in relation to a commit made in my main repository?</p>

<p>For example, if I am at (or I revert to) commit <em>a12ucak</em> in my mainrepo, my git submodule also gets reverted to a specific version which I tie to commit <em>a12ucak</em>?  And when I switch to commit <em>b349jdsak</em>, my git submodule also gets reverted to a version which I tie to <em>b349jdsak</em>?</p>

<p><strong>So my question is:</strong> there is a way to create a linkage between a specific commit in the main repo with a corresponding commit in the git submodule? In such a way where when I checkout that specific commit in the main git repo, the corresponding commit in the git submodule will also be checkout.</p>
","0","482506","0","0"
"62713714","474657","2020-07-03 10:41:18","0","473","<git><git-submodules>","git submodule not updating to parent branch","<p>I have the following in my <code>.gitmodules</code>:</p>
<pre><code>[submodule &quot;django&quot;]
    path = django
    url = git@gitlab.******.com:path/to/django.git
    branch = .
</code></pre>
<p>This file is identical in my <code>master</code> and <code>uat</code> branches.</p>
<p>Regarding the branch, from the <a href=""https://git-scm.com/docs/gitmodules"" rel=""nofollow noreferrer"">docs</a></p>
<blockquote>
<p>A special value of . is used to indicate that the name of the branch
in the submodule should be the same name as the current branch in the
current repository.</p>
</blockquote>
<p>Here's what I'm doing:</p>
<pre><code>git checkout master &amp;&amp; git submodule sync &amp;&amp; git submodule update &amp;&amp; git submodule status
</code></pre>
<p>Which gives me:</p>
<pre><code>f6d808827aca47984d495e0fe2403dd41f042e40 django (heads/master)
</code></pre>
<p>I switch the parent to <code>uat</code> branch:</p>
<pre><code>git checkout uat &amp;&amp; git submodule sync &amp;&amp; git submodule update &amp;&amp; git submodule status
</code></pre>
<p>This outputs the exact same ref:</p>
<pre><code>f6d808827aca47984d495e0fe2403dd41f042e40 django (heads/master)
</code></pre>
<p>I expect it to be pointing at a commit on the <code>uat</code> branch.</p>
<p>Why isn't it?</p>
","0","474657","",""
"62921535","13937362","2020-07-15 18:30:25","1","306","<linux><git><jenkins><continuous-integration><git-submodules>","git-ftp command failed to complete when using Git Submodules in Jenkins","<p>We have a project in Laravel that is in a repository and that uses a package also developed by us that is in a different repository.</p>
<p><strong>Problem:</strong>
As we make changes to any of the Package's designs, these are not obtained by the project that uses it.</p>
<p><strong>Solution:</strong>
Use a git function which is the submodules.</p>
<p><strong>Procedures:</strong>
We are using Jenkins for CI CD, this works perfectly. When trying to add the Git Submodule from the pack package to the laravel project repository, Jenkins was unable to complete when trying to execute the git-ftp commands.</p>
<p><strong>Methods used in jenkins:</strong></p>
<pre><code>git config git-ftp.url &quot;ftp://myserver.com/public_html/&quot;
git config git-ftp.user &quot;''' + username + '''&quot;
git config git-ftp.password &quot;''' + password + '''&quot;
git config git-ftp.syncroot .
git ftp push --auto-init
</code></pre>
<p><strong>The procedure:</strong>
Add the submodule in the repository, command:</p>
<pre><code>git submodule add -f https://myuser@bitbucket.org/mycompany/thepackage-library.git packages/mycompany/packagelibrary/src
</code></pre>
<p>The error obtained after adding the git submodule was:</p>
<pre><code>. . .

fatal: Commit found, use 'git ftp push' to sync. Exiting...
1 file to sync:
[1 of 1] Buffered for upload 'packages/mycompany/packagelibrary/src'.
Handling submodule sync for packages/mycompany/packagelibrary/src.
fatal: Could not get last commit. Use 'git ftp init' for the initial push. Access to resource denied. This usually means that the file or directory does not exist. Wrong path? exiting...
Could not push packages/mycompany/packagelibrary/src, trying to init...
fatal:  Access to resource denied. This usually means that the file or directory does not exist. Wrong path? exiting...
fatal: Failed to sync submodules., exiting...
fatal: Commit found, use 'git ftp push' to sync. Exiting...
3 files to sync:
[1 of 3] Buffered for upload '.gitmodules'.
[2 of 3] Buffered for upload 'packages/mycompany/packagelibrary/src'.
Handling submodule sync for packages/mycompany/packagelibrary/src.
fatal: Could not get last commit. Use 'git ftp init' for the initial push. Access to resource denied. This usually means that the file or directory does not exist. Wrong path? exiting...
Could not push packages/mycompany/packagelibrary/src, trying to init...
fatal:  Access to resource denied. This usually means that the file or directory does not exist. Wrong path? exiting...
fatal: Failed to sync submodules., exiting...

. . .
</code></pre>
<p>The expected behavior is that git-ftp obtained commits from both repositories to be sent to the server.</p>
","0","13937362","",""
"62948200","2432571","2020-07-17 06:16:19","1","135","<git><git-submodules>","Unable to update git sub-modules","<p>In my project, i am using sub-modules to manage the dependencies.</p>
<p>I ran the command once and the repos are cloned and fetched.</p>
<pre><code>git submodule update --init --recursive
</code></pre>
<p>Now, I have deleted the folder (_internals) in which they were cloned.</p>
<p>when running the command again, it does not fetch anything.</p>
<p>Not Sure whats wrong. Any pointers or help ?</p>
","0","2432571","",""
"44318543","2183021","2017-06-01 23:23:02","10","11075","<git><git-submodules><git-tag>","How to git tag all submodules?","<p>I would like to tag all of the submodules of my project.  I tried to do that with:</p>

<pre><code>git submodule foreach git tag tagName
</code></pre>

<p>... but it appears to just return with no errors, having done nothing.</p>

<p>Edit: Here are the results of my attempt:</p>

<p><a href=""https://i.stack.imgur.com/1dXED.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/1dXED.jpg"" alt=""enter image description here""></a></p>

<p>Can someone tell me how to properly tag all submodules?</p>

<p>Note: this a very similar question to <a href=""https://stackoverflow.com/questions/33117090/git-how-to-create-a-tag-that-also-include-submodules"">this post</a>, but the answer for that one suggested to rely on the submodule refs in the super-project.  I, however, would actually like a tag in the submodule's repo.</p>
","3","2183021","0","0"
"62971164","7860026","2020-07-18 16:49:28","1","333","<node.js><git><deployment><git-submodules><pm2>","How does one send .env files to a git submodule during pm2 deployment?","<p>TLDR: How can one send <code>.env</code> files to a submodule during the <code>pm2</code> deployment process while avoiding the <code>fatal: destination path '/home/projects/client' already exists and is not an empty directory</code> error message from <code>git</code>?</p>
<p>I'm running an automatic deployment script which clones some .env files from my local machine into my production machine, using pm2.</p>
<p>The below script does the following:</p>
<ol>
<li><p>Clones the <code>.env</code> files from my local machine into the host for both my server and the client</p>
</li>
<li><p>Deploys the project w/ <code>pm2</code></p>
</li>
<li><p>Is <em>supposed</em> to update the submodules***</p>
</li>
<li><p>Installs the dependencies for my server and build the server</p>
</li>
<li><p>Install the dependencies for my front-end (create-react-app) and builds the frontend</p>
</li>
<li><p>Run the project</p>
<pre><code>deploy: {
   production: {
     user: &quot;harrison&quot;,
     host: hosts,
     key: &quot;~/.ssh/id_rsa&quot;,
     ref: &quot;origin/master&quot;,
     repo: process.env.GIT_REPO,
     path: process.env.PROJECT_PATH,
     &quot;pre-deploy-local&quot;: `./deployEnvs.sh ${process.env.PROJECT_PATH} ${hostsBashArgs} &amp;&amp; \
      ./deployClientEnvs.sh ${process.env.PROJECT_PATH} ${hostsBashArgs}`,
     &quot;post-deploy&quot;: `source ~/.zshrc &amp;&amp; \
      git submodule update --init --recursive &amp;&amp; \
      yarn install --ignore-engines &amp;&amp; \
      yarn prod:build &amp;&amp; \
      cd client &amp;&amp; \
      yarn install --ignore-engines &amp;&amp; \
      yarn build &amp;&amp; \
      cd ../ &amp;&amp; \
      yarn prod:serve`,
   },
</code></pre>
</li>
</ol>
<p>*** The problem that I'm having relates to the part of the script that downloads the submodule (everything else works fine).
The script tells me that the client folder is not empty (this is because it's necessary for me to send the <code>.env</code> files to the client folder before building the application.</p>
<p>Is it possible for me to somehow send the <code>.env</code> files to the client folder <em><strong>after</strong></em> updating the submodule? How can I send the <code>.env</code> files from my local machine to the submodule and avoid the &quot;this directory is not empty&quot; message?</p>
<p>For clarity, here is my folder structure:</p>
<p><a href=""https://i.stack.imgur.com/YRBTv.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YRBTv.png"" alt=""enter image description here"" /></a></p>
","0","7860026","",""
"7574283","252428","2011-09-27 18:56:26","1","148","<git><git-submodules>","If I remove a git submodule... is it REALLY gone from the repo?","<p>I have, for the last year, TouchJSON via a submodule. I no longer need to use the library and want to remove it but I am not sure if doing this: <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"">How do I remove a submodule?</a>
will remove even the 'history' of TouchJSON.</p>

<p>basically, if I delete the submodule and then need to roll back for some odd reason, will it remember which version of TouchJSON to check out?</p>
","0","252428","",""
"25998653","1230946","2014-09-23 15:12:00","2","247","<git><git-submodules><public-key>","How to push a modification on a git submodule without giving username/password","<p>I'm currently trying  to deal with git submodules and I'm having trouble when I want to push modifications on children repository.</p>

<p>I get the following error:</p>

<pre><code>fatal: remote error: 
  You can't push to git://github.com/yllieth/ui.git
  Use https://github.com/yllieth/ui.git
</code></pre>

<p>Indeed, it's working fine if I change my remote configuration to use HTTPS instead of ssh public key. But I would like to avoid giving my github's username/password. </p>

<p>Is anyone knows some configuration tips or something else to be able to push to a submodule using my public key ?</p>
","1","1230946","0","0"
"7853635","248129","2011-10-21 18:23:15","0","382","<git><permissions><git-submodules>","User can't git submodule update, but they can pull from all submodules independantly","<p>I have a new team member who gets a Permission Error when trying to perform their initial <code>git submodule update</code>:</p>

<pre><code>[mrTeamMember@desktop application]$ git submodule update
Initialized empty Git repository in /home/mrTeamMember/work/application/subMod/.git/
mrTeamMember@server.example.com's password: 
Permission denied, please try again.
</code></pre>

<p>If, however, they simply <code>git pull</code> from the submodules' repositories directly, they get no error!</p>

<p>How can this be?</p>

<p>What could be causing this problem?</p>
","0","248129","",""
"44559306","44729","2017-06-15 05:35:06","16","3620","<git><git-submodules>","Opposite/reverse of ""git submodule absorbgitdirs""?","<p>How can I do the reverse of <code>git submodule absorbgitdirs</code>?  I.e. move a submodule's <code>.git</code> information out of <code>superproject/.git/modules/&lt;module&gt;</code> and back to the <code>superproject/path/to/&lt;module&gt;/.git</code> directory?</p>

<p>I still want <code>&lt;module&gt;</code> to be a submodule of <code>superproject</code>, I just don't want <code>&lt;module&gt;</code>'s <code>.git</code> directory info in <code>superproject</code>'s <code>.git/modules</code> directory.</p>
","0","44729","0","0"
"26023395","2605155","2014-09-24 17:54:51","29","16050","<git><performance><download><git-submodules><git-clone>","How to speed up / parallelize downloads of git submodules using git clone --recursive?","<p>Cloning git repositories that have a lot submodules takes a really long time. In the following example are ~100 submodules</p>

<pre><code>git clone --recursive https://github.com/Whonix/Whonix
</code></pre>

<p>Git clones them one by one. Takes much longer than required. Let's make the (probable) assumption that both the client and the server has sufficient resources to answer multiple (parallel) requests at the same time.</p>

<p>How to speed up / parallelize downloads of git submodules using <code>git clone --recursive</code>?</p>
","5","2605155","0","0"
"7900659","700771","2011-10-26 09:05:14","3","225","<perl><git><git-submodules>","What are best practices for maintaining/testing (mostly Perl) software in separate git repositories with dependencies between them?","<p>I am working on refactoring a large (mostly Perl) codebase. Rather that put everything into one giant git repository, I'd like to group related modules and their tests into separate git repositories, and to have the repositories structured like CPAN distributions.</p>

<p>One problem is that if each repository has a distinct CPAN distribution tree, then it seems awkward to use submodules, since (for testing purposes) what we really want is to include each submodule's ""lib"" in the tests.  This is a minor issue, and I am already aware of various easy workarounds (""use lib..."" in tests), but I would like to know what other developers do in similar situations, and what are considered best practices.</p>

<p>A more important issue is how to deal with branching. If a new branch of the submodule is created, and then the branch is updated, how can I test the code in the super-repositories that depend on it for <em>that branch</em>? (I may not necessarily want to make changes to the super-repositories, just check that changes to the submodule didn't break anything.)</p>

<p>On a similar note, are there utilities that can track dependencies between git repositories, so that I can determine which super-repositories need testing for a branch after changes to a dependency?</p>
","0","700771","0","0"
"44593160","4934640","2017-06-16 15:41:17","0","269","<git><git-branch><git-submodules>","How to clone a git repository with its submodules checkout on their default branches?","<p>On the question:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/44591825/how-to-correctly-call-a-git-submodule-symlinked"">How to correctly call a git submodule symlinked?</a></li>
</ol>

<p>Was figured it out it is necessary to checkout the git submodules to their default branch when a <code>git clone --recursive</code> is performed, but how to do that?</p>

<p>I tried searching and found this other question:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/1030169/easy-way-pull-latest-of-all-submodules"">Easy way pull latest of all submodules</a></li>
</ol>

<p>Suggesting to use the command <code>git clone --recurse-submodules</code> but after cloning the repository its submodule still not checkout on their default branches.</p>
","0","4934640","",""
"22915097","876603","2014-04-07 14:18:50","3","69","<android><git><git-submodules>","How to create an organized git repository for an Android project that uses a git submodule","<p>My android project depends on 3rd party libs from github (which I will add as git submodules).
I want to come to a point where cloning the project will retrieve all of the relevant projects AND that everything will be organised in my work space (I'm using eclipse).</p>

<p>What is the recommended way to build such a repository?</p>

<p>I had this in mind:</p>

<pre><code>- project_main (repo root)
   - libs
       - 3rd part lib1
       - 3rd part lib2
       - ...
   - android_project
       - src
       - libs
       - res
       - ...
</code></pre>

<p>And as an alternative the root can be the android project into which the 3rd party libs will be cloned:</p>

<pre><code>- android_project (repo root)
    - src
    - libs
    - res
    - ...
    - 3rd part lib1
    - 3rd part lib2
    - ...
</code></pre>
","0","876603","0","0"
"4802123","272952","2011-01-26 07:07:07","3","928","<git><git-submodules>","Embedded git repository that tracks our changes?","<p>Similar to git's submodule functionality, I'd like to embed a clone of a remote repository in my own. However, I would like the ability to make changes to our embedded version while still maintaining the ability to pull updates from the remote as well. I don't see how I can do this with a submodule. Is this functionally possible? Right now I just have the remote source directory copied into my repository and while that allows me to track my local changes, it loses the ability to pull updates from the remote repository or manage branches.</p>
","0","272952","",""
"42337389","2689696","2017-02-20 05:55:08","1","322","<git><git-submodules>","Git fetch submodules from latest gitmodule","<p>Suppose I am on commit a which has submodule s1</p>

<p>and somebody added submodule s2 in commit a+1, now I don't want to move to a+1 but fetch(just download) submodule s2.</p>

<p>Is this possible?</p>

<p>my git version is 2.1.4 I can get 2.10.1.windows.1 if required to update</p>

<p>Edit: simple script I tried, it has some problems
   - .git folder is inside the new cloned submodule rather than in super rep's .git/modules folder 
   - working directory is polluted with the new submodule :|</p>

<pre><code>git diff HEAD origin/master .gitmodules 2&gt;&amp;1 | perl -e '
while(&lt;&gt;)
{
   if(/^\+\s+path = (.+)/)
   {
      my $path = $1;
      my $line = &lt;&gt;;
      if($line=~/^\+\s+url = (.+)/)
      {
         my $url = $1;
         print ""$path -&gt; $url\n"";
         `git clone ""$url"" ""$path""`
      }
   }
}'
</code></pre>
","0","2689696","0","0"
"23207542","1676287","2014-04-21 23:08:36","3","259","<wordpress><git><git-submodules><git-reset>","WordPress as git submodule, accidentally updated through WP admin instead of git, now modified content","<p>I followed David Winter's workflow to ""Install and Manage WordPress with Git."" WordPress is a git submodule. On the latest WordPress 3.9 upgrade, I accidentally updated through the WordPress admin instead of via git. Now when I run <code>git status</code> I get:</p>

<pre><code>modified:   wordpress (modified content, untracked content)
</code></pre>

<p>Which makes sense. But I can't commit the modified wordpress content. The WordPress submodule is dirty. If I run <code>git diff</code> within my main repo, I get this:</p>

<pre><code>-Subproject commit 22bb60277036651db73dc872eaa7d2a50276b00d
+Subproject commit 22bb60277036651db73dc872eaa7d2a50276b00d-dirty
</code></pre>

<p>What's the best way to fix this? If I run the following within my main repo, will it mess up my WordPress install? (Note: I had also updated some plugins.)</p>

<pre><code>git clean -dfx             # delete everything in the worktree that isn't tracked
git reset --hard           # wipe all modifications to tracked files
git checkout 3.8.1         # return to previous version tag
</code></pre>

<p>Update: The commands above work perfectly. I checked the documentation on git clean to learn what the options 'd', 'f', and 'x' were: <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-clean.html"" rel=""nofollow"">https://www.kernel.org/pub/software/scm/git/docs/git-clean.html</a>. After I ran the previous commands within the WordPress directory, I was able to then checkout version 3.9, thus correctly updating WordPress.</p>
","4","1676287","0","0"
"42539635","527302","2017-03-01 18:49:09","1","1019","<git><git-submodules>","Remove git submodule/repo inside repo fatal: Pathspec 'xfile.md' is in submodule 'x'","<p>I accidentally create a repo around another repo.<br>
I now just want the inner repo to just become part of the outer repo (I don't want a submodule/multi repos). </p>

<p>I went into the inner repo a removed the <code>.git</code> folder, but running <code>git status</code> doesn't show any changes and if I try and explicitly <code>git add</code> a file from the inner repo I get:</p>

<pre><code>fatal: Pathspec 'xfile.md' is in submodule 'x'
</code></pre>

<p>I tried to reinit git from the outer repo but no luck. </p>

<p>I simply want to remove in the inner repo and make it become part of the parent repo. Had a google and a stack overflow search but answers seemed to get in depth pretty quickly.</p>
","0","527302","0","0"
"60664885","13054975","2020-03-13 04:31:39","1","109","<github><git-submodules>","How to find missing file in my github submodule","<p>I am new to git, so I used git to put my ionic project folder into local repository then push it, it did not appear as the normal repository I saw. </p>

<p>It then becomes submodule, so I cloned the repository, then the folder became empty, then I could not find my file but a empty folder. </p>

<blockquote>
  <p>Can someone tell me how to find my missing file and why I tried to push a simple folder then it becomes submodule?</p>
</blockquote>
","0","13054975","0","0"
"5296236","14637","2011-03-14 08:22:50","26","7234","<git><github><git-submodules>","How to add a git repo as a submodule of itself? (Or: How to generate GitHub Pages programmatically?)","<p>I want to start using <a href=""http://pages.github.com/"" rel=""noreferrer"">GitHub Pages</a> for my project's website. This simply requires a branch (subtree) named <code>gh-pages</code> in the repo, and serves up its content. The problem is that part of the website (manual, changelog, download page...) is auto-generated by the build system, so I want to find the best way to commit these changes to the <code>gh-pages</code> branch while the main repo remains on <code>master</code> (or wherever).</p>

<p>To commit to the <code>gh-pages</code> branch, I could write a script that clones the repo into a temporary directory, makes the modifications, commits them, and then pushes them back to the main repo. But this sounds like an error-prone process, so I'm hoping there is an easier way.</p>

<p>A friend suggested that I might add the <code>gh-pages</code> branch as a submodule to the main repository. I ran a little experiment, but it doesn't quite work:</p>

<pre><code>$ git init main
Initialized empty Git repository in /tmp/main/.git/
$ cd main
$ touch main.txt
$ git add .
$ git commit -m'Initial commit in main branch.'
[master (root-commit) 1c52a4e] Initial commit in main branch.
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 main.txt
$ git symbolic-ref HEAD refs/heads/gh-pages
$ rm .git/index
$ git clean -fdx
Removing main.txt
$ touch index.html
$ git add .
$ git commit -m'Initial commit in website branch.'
[gh-pages (root-commit) 94b10f2] Initial commit in website branch.
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 index.html
$ git checkout master
Switched to branch 'master'
$ git submodule add -b gh-pages . gh-pages
repo URL: '.' must be absolute or begin with ./|../
$ git submodule add -b gh-pages ./ gh-pages
remote (origin) does not have a url defined in .git/config
</code></pre>

<p>I'm new to submodules; have done some reading, of course, but I don't understand this behaviour. Why does it need an <code>origin</code> remote? Ideally, I want the submodule to always reference the repo that it resides in, so it should not reference <code>origin</code> or any other remotes. If somebody clones the repo and runs <code>git submodule init ; git submodule update</code>, it should ideally pull from the newly cloned repo.</p>

<p>Is it possible to add a repo as a submodule of itself? Is it desirable? Are there any pitfalls that I need to be aware of? Is there a better way to achieve what I want?</p>
","5","14637","0","0"
"5303496","11236","2011-03-14 19:34:20","141","89809","<git><git-submodules>","How to change a git submodule to point to a subfolder?","<p>Skimming through <a href=""https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial"">the SubModule tutorial</a>, I created a submodule out of the <a href=""https://github.com/boto/boto"">boto project</a>. Then, I discovered that I actually need only a subset of this project - specifically, the <a href=""https://github.com/boto/boto/tree/master/boto"">boto</a> folder.</p>

<p>I would like to change my submodule to point to this folder. When I look in .gitmodules, I see</p>

<pre><code>[submodule ""backup/src/boto""]
    path = backup/src/boto
    url = https://github.com/boto/boto.git
</code></pre>

<p>What URL should I use instead of <a href=""https://github.com/boto/boto.git"">https://github.com/boto/boto.git</a>? After I change the URL, should I delete the boto folder locally and re-pull?</p>
","4","11236","0","0"
"16728866","482506","2013-05-24 06:27:30","114","107740","<git><git-submodules>","How to only update specific git submodules?","<p>So, updating all my submodules is done by running</p>

<pre><code>git submodule foreach 'git pull origin master'
</code></pre>

<p>How do I update a <strong>specific submodule</strong>, located in say <code>bundle/syntastic</code>, without updating any other submodules?</p>
","3","482506","0","0"
"16735024","425285","2013-05-24 12:30:02","0","163","<ruby-on-rails><ruby-on-rails-3><git-submodules>","Use controllers from git submodule in Rails application?","<p>does anyone know if it's possible to use controllers of a submodule in a Rails application? My submodule currently has a few models which work perfectly but I'd need to add one or two controllers which are also shared between two applications.</p>

<p>Any help or suggestions? Thanks!</p>
","0","425285","",""
"16773642","223386","2013-05-27 12:52:05","228","133708","<git><git-submodules>","Pull git submodules after cloning project from GitHub","<p>I have a project that has specified submodules in it. Everything works well on the dev machine. I have commited <code>.gitmodules</code> file and pulled on the production. However it does not pulled submodules.</p>

<p>If I go into submodule directories and call <code>git pull</code>, nothing happens.</p>

<p>What is the proper way to pull those submodules in the new project ?</p>
","0","223386","0","0"
"69169897","16903314","2021-09-13 22:52:45","2","612","<git><git-submodules><weblate>","How to integrate a git submodule to a git workflow","<p>Here's my situation : my team and I have a project using a front end framework. It works great and is correctly organized with a typical git workflow with <code>master</code>, <code>develop</code> and <code>features/fixes</code> branches.</p>
<p>We now have an increasing need to add a large number of translations to our project (translations are located in a single folder). We decided to try out Weblate to manage them. Right now, Weblate has a full access to our entire git repository to push translations.</p>
<p>For security reasons, we want <code>Weblate</code> to only have access to our translation folder. We thought we could create a git submodule for the translation and give <code>weblate</code> an access to it.</p>
<p>Unfortunately, I am not sure of how we could easily integrate a submodule to our current workflow.</p>
<p>I thought of a solution but I am not sure it is possible : I want to create a submodule with a workflow similar to the main project. When a developer (or weblate) wants to update a translation, he has to create a feature branch on both the main project and the submodule and then merge both branch when the feature is finished.</p>
<p>I am not familiar with git submodules and there is probably a smarter way to do this so your thoughts on this would be very much appreciated :)</p>
","0","16903314","0","0"
"34408392","1936343","2015-12-22 04:22:18","7","5219","<git><github><git-submodules>","git --recursive doesn't clone submodule","<p>I learned that to download submodules with main repository we can use <code>--recursive</code> option when cloning main repository. </p>

<p>I did the same <code>git clone --recursive git@github.com:passion/academy.git</code></p>

<p>I found that it only create a empty directory of submodule but not downloaded its code. </p>

<p>Do we need to do extra stuff like <code>git submodule update --init --recursive</code>  ? If yes then what is the use of <code>--recursive</code> flag when cloning main repository ?</p>
","1","1936343","0","0"
"34455905","3430986","2015-12-24 17:07:27","1","75","<git><git-submodules><git-subtree>","git subtree/submodule a file from a repository and update it","<p>Let's say that I am keeping my zsh dotfiles in a repo:</p>

<pre><code>$  tree -a -F .
.
├── .zlogin
├── .zsh/
│   ├── some-dir/
│   │   └── another-script.zsh
│   └── some-script.zsh
└── .zshrc
</code></pre>

<p>and I am interesting in using a subdirectory from another project, for example directory <code>lib</code> from <a href=""https://github.com/robbyrussell/oh-my-zsh/tree/master/lib"" rel=""nofollow"">oh-my-zsh</a> and put it in my <code>.zsh</code> folder.</p>

<p>The ending result should be something like this:</p>

<pre><code>$  tree -a -F .
.
├── .zlogin
├── .zsh/
│   ├── lib/
│   │   ├── bzr.zsh
│   │   ├── clipboard.zsh
│   │   ├── compfix.zsh
│   │   ├── completion.zsh
│   │   ├── correction.zsh
│   │   ├── diagnostics.zsh
│   │   ├── directories.zsh
│   │   ├── functions.zsh
│   │   ├── git.zsh
│   │   ├── grep.zsh
│   │   ├── history.zsh
│   │   ├── key-bindings.zsh
│   │   ├── misc.zsh
│   │   ├── nvm.zsh
│   │   ├── prompt_info_functions.zsh
│   │   ├── spectrum.zsh
│   │   ├── termsupport.zsh
│   │   └── theme-and-appearance.zsh
│   ├── some-dir/
│   │   └── another-script.zsh
│   └── some-script.zsh
└── .zshrc
</code></pre>

<p>but I don't want to just download &amp; copy the directory, I want to be able to automatically update it without having to keep the whole oh-my-zsh repo on my project. How can I do that?</p>
","0","3430986","0","0"
"69427105","17065089","2021-10-03 17:05:36","0","1590","<android><gradle><git-submodules><gradle-kotlin-dsl><jitpack>","Could not resolve git repository as dependency in android gradle","<p>I am trying to add a git repository (<a href=""https://github.com/FHNW-IP5-IP6/ComposeForms"" rel=""nofollow noreferrer"">https://github.com/FHNW-IP5-IP6/ComposeForms</a>) as a dependency into my project with Gradle and tried the below-listed variants (1.-3.) from <a href=""https://stackoverflow.com/questions/18748436/is-it-possible-to-declare-git-repository-as-dependency-in-android-gradle"">Is it possible to declare git repository as dependency in android gradle?</a> but every time when I sync the project I get an Error saying: <strong>&quot;Could not resolve com.github.FHNW-IP5-IP6:ComposeForms:master-SNAPSHOT&quot;</strong>.</p>
<p>I tried the following:</p>
<ol>
<li><p>Jitpack (<a href=""https://jitpack.io/#FHNW-IP5-IP6/ComposeForms/master-SNAPSHOT"" rel=""nofollow noreferrer"">https://jitpack.io/#FHNW-IP5-IP6/ComposeForms/master-SNAPSHOT</a>)</p>
<pre><code>allprojects {
  repositories {
    ...
    maven(&quot;https://jitpack.io&quot;) // also tried uri https://www.jitpack.io
  }
}
</code></pre>
<p>and in app build.gradle</p>
<pre><code>kotlin {
  sourceSets {
    named(&quot;main&quot;) {
      dependencies {
        ...
        implementation(&quot;com.github.FHNW-IP5-IP6:ComposeForms:master-SNAPSHOT&quot;)
      }
    }
  }
}
</code></pre>
</li>
<li><p>Git Submodule (named as compose-forms)</p>
<p><code>include(&quot;:compose-forms&quot;)</code> inside settings.gradle</p>
<pre><code>kotlin {
  sourceSets {
    named(&quot;main&quot;) {
      dependencies {
        ...
        implementation(project(&quot;:compose-forms&quot;))
      }
    }
  }
}
</code></pre>
</li>
<li><p>New feature in gradle</p>
<p>Inside settings.gradle</p>
<pre><code>sourceControl {
  gitRepository(uri(&quot;https://github.com/FHNW-IP5-IP6/ComposeForms.git&quot;)) {
    producesModule(&quot;compose-forms&quot;)
  }
}
</code></pre>
<p>and in app build.gradle</p>
<pre><code>kotlin {
  sourceSets {
    named(&quot;main&quot;) {
      dependencies {
        ...
        implementation(&quot;compose-forms&quot;) {
          version {
            branch = &quot;master&quot;
          }
        }
      }
    }
  }
}
</code></pre>
</li>
</ol>
<p>I'm running out of options and really need the git repository as a dependency. I would prefer not to have any git submodules inside my project so I prefer numbers 1 and 3 to work. Thanks in Advance for any hint :)</p>
","0","17065089","0","0"
"19082379","674041","2013-09-29 19:35:52","1","392","<git><github><build><config><git-submodules>","What is a practical way for maintaining a secret (from public) patch to a git repo?","<p>I am doing a demo app for a particular platform (Jolla Sailfish) on github and it is going to have some ids/keys that I don't want public to see. For example, I definitely don't want public to see the real Mixpanel or Google Analytics keys. Public version should have them empty or use completely different keys.</p>

<p>That said when I build app for myself I do want my own keys to be used. So I want to get a generally public repo, with a minimal modification that is to stay private and secret.</p>

<p>What is a practical way to achieve it?</p>

<p>It should somehow be possible with the help of submodules with one of the submodules coming from my private repo (e.g. from bitbucket), but I somehow can't figure out the whole thing that would work for both public and me.</p>

<p>How would you do it? Or has anybody had similar situation on your own projects?</p>
","3","674041","",""
"19101504","131433","2013-09-30 18:45:25","1","537","<git><git-submodules>","how does git submodule status pick a commit description?","<p>I have a submodule that tracks a branch. It is currently sitting at the head of the branch. But <code>git submodule status</code> comes up with a rather ugly tagging.<br>
That commit is really the current head of the branch in question, both in the submodule and on the remote.</p>

<pre><code> % git submodule status
    168b1e6c54101dfa7b1b865197ab7ac660c56fcf common (tha-6-7-g168b1e6)
 % cat .gitmodules
    [submodule ""common""]
    path = common
    url = git@github.com:basis-technology-corp/perceptron-segmentation-models.git
    branch = etrog-985-restructure
</code></pre>

<p>Where does the ugly string '<code>tha-6-7-g....</code>' come from? It's not a tag on the commit at the top of the branch.</p>
","5","131433","0","0"
"19121275","221226","2013-10-01 16:23:31","2","192","<git><qt><git-submodules><organization><repository>","Code organization using several git repositories with a QT project","<p>I am looking for a way to structure a project that is mainly built around a Qt application on Linux system. what I need is the following:</p>

<ul>
<li>Project
<ul>
<li>.git</li>
<li>QT_Application
<ul>
<li>.git</li>
<li>src</li>
<li>resources</li>
<li>bla</li>
</ul></li>
<li>Drivers
<ul>
<li>.git</li>
<li>src</li>
<li>libs</li>
</ul></li>
<li>Utils
<ul>
<li>.git</li>
<li>src</li>
<li>libs</li>
</ul></li>
</ul></li>
</ul>

<p>the Qt application will relatively access all other repositories like ../Utils/libs/xyz. does it make sense to separate it into git submodules and the root folder will be a git repo as well?</p>

<p>How would you realize it?</p>
","0","221226","",""
"19141377","678777","2013-10-02 16:00:56","1","671","<git><teamcity><git-submodules>","How to configure Teamcity git plugin to init submodules NON-recursively","<p>According to its repo git-plugin has such functionality (<a href=""http://git.jetbrains.org/?p=teamcity/git-plugin.git;a=commit;h=b2354dbef90b793d7e24c6f3c135f7a0bec4ad15"" rel=""nofollow"">http://git.jetbrains.org/?p=teamcity/git-plugin.git;a=commit;h=b2354dbef90b793d7e24c6f3c135f7a0bec4ad15</a>)
I'm wondering is there a way to disable recursive submodules (fetch only first-level submodules) via Teamcity web UI? Or is there any other way to workaround this cause I need it for my current project.</p>

<p>*This question is mirrored in <a href=""http://devnet.jetbrains.com/message/5500243"" rel=""nofollow"">http://devnet.jetbrains.com/message/5500243</a></p>
","0","678777","",""
"19143838","579692","2013-10-02 18:13:03","0","351","<git><networking><github><git-submodules><git-clone>","Tackling a network issue with git clone --recursive","<p>I am unable to clone git repositories with submodules.  </p>

<p>$ git clone --recursive <a href=""https://www.github.com/lagadic/visp_auto_tracker.git"" rel=""nofollow"">https://www.github.com/lagadic/visp_auto_tracker.git</a></p>

<p>Cloning into 'visp_auto_tracker'...<br>
remote: Counting objects: 275, done.<br>
remote: Compressing objects: 100% (222/222), done.<br>
remote: Total 275 (delta 154), reused 157 (delta 42)<br>
Receiving objects: 100% (275/275), 44.52 KiB, done.<br>
Resolving deltas: 100% (154/154), done.<br>
Submodule 'flashcode_mbt' (git://github.com/lagadic/flashcode_mbt.git) registered for path 'flashcode_mbt'<br>
Cloning into 'flashcode_mbt'...<br>
fatal: unable to connect to github.com:<br>
github.com[0: 192.30.252.131]: errno=Connection timed out  </p>

<p>Clone of 'git://github.com/lagadic/flashcode_mbt.git' into submodule path 'flashcode_mbt' failed.  </p>

<p>This happens on UbuntuLTS12.04 git version 1.7.9.5 as well as Fedora17 git version 1.7.11.7.</p>

<p>It seems to be a network issue for sure. Because i asked other users on different networks to do it and it works. Any of you faced a similar problem? Thanks for your help.</p>
","0","579692","",""
"35524958","1456841","2016-02-20 15:01:24","1","156","<git><vim><bitbucket><git-submodules><pull>","Push local git repo with sub repos (vim)","<p>I'm using Vim and pathogen as a plugin manager, and i have cloned a lot of plugins into my .vim folder. Now i want my custom vim to be easily accessible on multiple systems, so i made my .vim directory a git repo. I added everything with 'git add .' and pushed it to a bitbucket repository. Now whenever i want to clone this repo to another computer it only creates the folders where the plugins should be, but not the files. I guess they were added as submodules automatically, but i can't seem to pull them from there respective sources with a simple command like 'git submodule update' it only says ""No submodule mapping found in .gitmodules for path 'bundle/plugin' .
What do i need to do to prevent this?
Thanks in advance.</p>
","0","1456841","",""
"35881682","1908763","2016-03-09 02:13:11","3","2842","<git><git-submodules><git-status>","How to see status of a git submodule library?","<p>I have a library in a git project which is a submodule, I will call it service-lib.</p>

<p>The serivce-lib is not developed by myself or my company, and in fact I am encouraged not to edit it.</p>

<p>How can I check the git status of this module to:</p>

<ol>
<li>Check to makes sure I haven't accidentally edited/created a file
in it</li>
<li>See any updates from the developers (i.e. so I can adopt
any bug fixes they may have added)</li>
</ol>
","0","1908763","0","0"
"69731047","2656614","2021-10-26 23:28:53","7","745","<git><git-submodules>","git submodule status shows wrong tag/branch","<p>When I run the command <code>git submodule status</code>, I see references to tags from months or even years ago. Everything else works fine (the code checks out what I expect it to, and there is no other weird behaviour).</p>
<p>The issue is that this one command displaying it incorrectly. Everything works fine. <code>git submodule update</code> always gets what I expect, and I frequently update the submodules with <code>git add</code> and <code>git push</code>.</p>
<pre><code>username:~/src/main (master)$ git submodule status
 3f786850e387550fdab836ed7e6dc881de23001b module0 (old-tag-1234-g8f123456)
 89e6c98d92887913cadf06b2adb97f26cde4849b module1 (years-old-tag-4321-g12f4567890)
 2b66fd261ee5c6cfc8de7fa466bab600bcfe4f69 module2 (heads/master)
 e983f374794de9c64e3d1c1de1d490c0756eeeff module3 (heads/master)
</code></pre>
<p>This is strange, because ALL of my submodules have the <code>master</code> branch checked out. I would expect this command to show me <code>heads/master</code> for all 4 of the modules.</p>
<pre><code>username:~/src/main/module0 (master)$ git status 
On branch master
Your branch is up to date with 'origin/master'.

...

username:~/src/main/module3 (master)$ git status 
On branch master
Your branch is up to date with 'origin/master'.
</code></pre>
<p>These submodules are properly referenced too - a <code>git submodule update</code> does not result in any changes to them. This is a repository updated dozens of times daily by dozens of people - There is zero chance that we're accidentally using code from 3 years ago, or forgot to update it.</p>
<p>To further emphasise: <strong>The issue is that this one command displaying it incorrectly. Everything works fine</strong></p>
<p>Can anyone suggest reason's why? I suspect this might be something to do with needing to do a <code>update-ref</code> for everything, or some kind of stale refs in <code>~/src/main/.git/modules/module0/info/refs</code></p>
","3","2656614","0","0"
"23293251","227863","2014-04-25 12:31:06","3","261","<git><git-submodules>","How does git know which commit to check a submodule out at?","<p>I have cloned a repo that includes a submodule. I know that running <code>git submodule init</code> inserts a reference to the submodule into <code>.git/config</code>, and that running <code>git submodule update</code> pulls the files from the submodule (as it stood at commit 3ab4ef2) into my main repo...</p>

<p>Now I'm on Windows here and can't use grep so I'm having trouble figuring out how my main git repo <em>knows</em> that it is tied to commit 3ab4ef2. </p>

<p>Where would I find a reference to that commit in my main repo?</p>
","0","227863","",""
"23468616","1190861","2014-05-05 08:59:34","1","93","<git><github><git-submodules>","Migrate the .git folders structure for Submodules","<p>In old versions of git, before 1.7.8, the git folder of the submodule was located inside the submodule folder </p>

<pre><code>RootProject/Submodule/.git
</code></pre>

<p>Starting from 1.7.8 this structure is changed</p>

<pre><code>When populating a new submodule directory with ""git submodule init"",
the $GIT_DIR metainformation directory for submodules is created inside
$GIT_DIR/modules/&lt;name&gt;/ directory of the superproject and referenced
via the gitfile mechanism. This is to make it possible to switch
between commits in the superproject that has and does not have the
submodule in the tree without re-cloning.
</code></pre>

<p><a href=""https://github.com/git/git/blob/master/Documentation/RelNotes/1.7.8.txt"" rel=""nofollow"">https://github.com/git/git/blob/master/Documentation/RelNotes/1.7.8.txt</a></p>

<p>So now it is being created at inside the .git/modules of the root project</p>

<pre><code>RootProject/.git/modules/Submodule/
</code></pre>

<p>and the .git folder inside the submodule is converted to a file that contains a relative path to the git folder in the root </p>

<pre><code>gitdir: ../.git/modules/Submodule
</code></pre>

<p>So is there any way to migrate from the old structure to the new structure without losing the local history(i.e. local branches, stashes,...)?</p>
","3","1190861","0","0"
"23475430","1529267","2014-05-05 14:49:50","0","187","<git><git-submodules>","Does doing 'git submoudle update' update the submodule after git pull?","<p>I am newbie to git submodule and I am really confused by the documentation available regarding git submodules. My question is pretty straight forward</p>

<blockquote>
  <p>I have been away for 2 months and I want to update my local repo code. My repo which has submodules in it.  I do<br/> 
  <strong>git pull origin master</strong>(It updates the code in my local repo.) <br/>Now I want to update the submodules<br/></p>
</blockquote>

<p>So for that, is doing</p>

<blockquote>
  <p><strong>git submodule update</strong>  enough?<br/></p>
</blockquote>

<p>I also see the command </p>

<blockquote>
  <p><strong>git submodule foreach git pull origin master</strong><br/>
  in the text of updating the submodules.<br/></p>
</blockquote>

<p>This command, in my opinion, is doing git pull for each submodule. But in my repo, every submodule is in detached head state. When I  go in their subdirectory and do git branch, it says <strong>(no branch)</strong> which I think means that it is in detach head state. So if it is not in any branch, then where with pulled code be placed.</p>

<p>So what is the right way for me to ensure that my repo is in update state.</p>
","0","1529267","",""
"60755600","10751129","2020-03-19 10:47:28","1","1547","<git><git-submodules>","Trouble understanding git submodule summary","<p>I am facing some problems in understanding what <em>exactly</em> does <code>git submodule summary</code> do? How and when do we use this command? I am also not able to understand the significance of the <code>--files</code> option. To me, not using the tag seems the same as using it. </p>

<p>Also, how will it differ from <code>git submodule status</code>? I am extremely confused. I had been reading the <a href=""https://git-scm.com/docs/git-submodule#_name"" rel=""nofollow noreferrer"">Documentation</a> of the command if it helps.</p>

<p>Thank you so much in advance for the help! :)</p>
","0","10751129","0","0"
"23506303","470300","2014-05-06 23:37:04","2","1582","<ruby-on-rails><ruby><git><git-submodules>","How do I update my git submodules from specific branches?","<p>I have a Ruby on Rails app that has two git submodules. I am upgrading Rails from v3 to v4 in the main app and in the two submodules, so I created a rails4 branch for each in which to do the work. The main app and each submodule have their own test suites that run independently, so I made the upgrades in the submodules and the project, ensured the tests all run in each place, and now I need to update the submodules into the project.</p>

<p>How do I tell git in my app's rails4 branch to update from the submodules' rails4 branches when I do <code>git submodule update</code>? It's ok to have a temporary fix for this as I can point them back at master once the app is confirmed working and the branches all get merged in to master. Thanks.</p>
","0","470300","0","0"
"5417918","674730","2011-03-24 10:43:15","16","17413","<git><git-submodules>","Can I add a username & password to git clone using the --recursive option (for submodules)?","<p>I am using git to clone a repo via https thus:</p>

<pre><code>git clone https://username:password@alocation/git/repo.git
</code></pre>

<p>This is fine but it has a large number of subrepos to clone as well so I am using the <code>--recursive</code> option.</p>

<p>Problem here is that for the top level it takes the username &amp; pass specified but for each sub repo it asks for the details again so I get the following:</p>

<pre><code>C:&gt;git clone --recursive https://username:password@alocation/git/repo.git
Cloning into repo...
remote: Counting objects: 15, done.
remote: Compressing objects: 100% (15/15), done.
remote: Total 15 (delta 8), reused 0 (delta 0)
Unpacking objects: 100% (15/15), done.
Submodule 'sub1' (https://alocation/git/repo.sub1) registered for path 'sub1'
Submodule 'sub2' (https://alocation/git/repo.sub2) registered for path 'sub2'
Submodule 'sub3' (https://alocation/git/repo.sub3) registered for path 'sub3'
Submodule 'sub4' (https://alocation/git/repo.sub4) registered for path 'sub4'
Cloning into sub1...
Username:
Password:
remote: Counting objects: 10, done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 10 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (10/10), done.
Username:
..............................etc....
</code></pre>

<p>Can I give the username &amp; password separably so I don't have to enter each time.</p>

<p>Obvious use case is for a deep subrepo structure like this where there are lots of files. Entering the same data for each subrepo is going to get tedious &amp; error prone. </p>
","0","674730","0","0"
"60953912","10910871","2020-03-31 15:11:49","0","468","<git><git-submodules>","Creating a local git submodule","<p>I am wanting to version control my entire 'CLIENT' folder which includes everything for my clients such as fonts, stock images, designs, print files etc. Some of these files are very large so there is no way I could upload these to a remote repo.</p>

<p>On the other hand, I would like to upload their website to a remote repo for when another developer works on the site.</p>

<p>On this basis I am thinking of creating a repo for the main client folder and submodule for the website project. Unless there is a better way of doing things?</p>

<p>For reference, my project file structure is as follows:</p>

<p>~/Documents/Clients/Client/Projects/Website/5-Website</p>

<p>Client = Main project folder
5-Website = Website Project</p>

<p>I'm opening my main project folder in Terminal (MacOS) and initialising git using the following code</p>

<pre><code>cd ~/Documents/Clients/Client &amp;&amp; git init &amp;&amp; git config --global user.email 'name@email.com' &amp;&amp; git config --global user.name 'Full Name' &amp;&amp; git add . &amp;&amp; git commit -m 'initial commit, added all files'
</code></pre>

<p>It's working perfect up till this point and here's where it does wrong.</p>

<p>I then (while I am still in the client folder) type into Terminal</p>

<pre><code>git submodule add --name website ~/Documents/Clients/TEMPLATE/projects/Website/5-Website
</code></pre>

<p>To try to add my submodule but I get the following error:</p>

<pre><code>fatal: repository '/Users/User/Documents/Clients/CLIENT/projects/Website/5-WEBSITE' does not exist
fatal: clone of '/Users/User/Documents/Clients/CLIENT/projects/Website/5-WEBSITE' into submodule path '/Users/User/Documents/Clients/CLIENT/5-WEBSITE' failed

</code></pre>

<p>If you notice the last part of the error message, it misses out part of the folder url just 5-website.</p>

<p>What am I doing wrong?</p>
","5","10910871","",""
"23813783","1214237","2014-05-22 17:41:40","0","1009","<git><github><git-submodules>","Different git submodules pointing to different tags/branches from same repository","<p>The scene is I have a git project A and it has a submodule pointing to project B repo, i.e. to a specific tag from such repo. I would like to create a branch in A that could point to a different tag from B.
Questions: Is it possible? If yes, how? If no, I would like listen to your suggestions about a better project structure to allow this.
Thanks in advance.</p>

<p>Edit: Without to have cloning repo B again.</p>
","2","1214237","",""
"61379407","13387233","2020-04-23 04:31:31","2","679","<git><github><git-submodules><windows-subsystem-for-linux>","Is it possible on WSL to run git submodule update --init?","<p>I'm running Ubuntu 18.04 on Windows Subsystem for Linux on a Windows 10 machine. I have just cloned a repository from GitHub that contains several submodules. To initialize those submodules, I typically run the command:<br>
<code>git submodule update --init</code></p>

<p>However, when I do that I get an error:<br>
<code>/usr/lib/git-core/git-submodule: 332: /usr/lib/git-core/git-sh-setup: uname: Input/output error</code></p>

<p>Has anyone else seen this behavior? Does anyone know how to fix this?</p>
","0","13387233","0","0"
"61422223","1941316","2020-04-25 07:16:16","0","351","<git><git-submodules>","How to add a Git submodule on a subdirectory that is excluded in .gitignore?","<p>Let's say I have the following structure:</p>

<pre><code>my-project
├── modules
│   ├── my-first-module
│   ├── my-second-module
│   └── my-fourth-module
</code></pre>

<p>I included the <em>modules</em> directory in my <em>.gitignore</em> file and made an exception for <em>my-third-module</em>:</p>

<pre><code>/my-project/modules/*
!/my-project/modules/my-third-module/
</code></pre>

<p>Then when I execute <code>git submodule add git@git.my-app/my-third-module.git</code> from <em>my-project/modules/</em> path, I get:</p>

<pre><code>The following path is ignored by one of your .gitignore files:
my-project/modules/my-third-module
Use -f if you really want to add it.
</code></pre>

<p>It seems the exclusion of <code>/my-project/modules/my-third-module/</code> in <em>.gitignore</em> is not taken into account.</p>

<p>So, I tried to create an empty <em>my-third-module</em> directory but in this case the <code>git submodule add</code> command complains:</p>

<pre><code>'my-third-module' already exists and is not a valid git repo
</code></pre>

<p>Apparently <code>git submodule add</code> requires that the directory doesn't exists, so it's not the way to go.</p>

<p>Why the exclusion of <em>my-third-module</em> is not taken into account by Git?  </p>
","0","1941316","",""
"61439274","1640340","2020-04-26 10:34:33","-1","908","<git><git-submodules><git-history>","Changing the remote repository of git submodule for all commits in git history","<p>How can I change the remote url of a git submodule without breaking commit history?
Currently if I checkout old commits my submodule seems to have the old remote url witch doesn't exist anymore.</p>

<p>My workflow:</p>

<ol>
<li>Clone repo with commit A,B</li>
<li>git submodule update --init</li>
<li>Change submudule url</li>
<li><p>Push .gitmodules to remote (Commit C)</p></li>
<li><p>Clone repo with commit A,B,C</p></li>
<li>Switch to commit A  </li>
<li>git submodule update --init <strong>-> FAILES</strong></li>
</ol>

<p>-> want also the new submodule remote URL, but still the old url in .gitmodules</p>

<p>It seems that <code>git submodule update --init</code> is still trying to use the old remote url</p>

<p>If have also tried to use  <code>git submodule update</code> , as suggested, but I also got the error:</p>

<p><code>The Git repository with name or identifier OLD_REPO_NAME does not exist or you do not have permissions for the operation you are attempting.</code></p>
","0","1640340","",""
"61453698","915087","2020-04-27 07:29:09","1","1917","<git><azure-devops><yaml><git-submodules>","Any way to auto-update/push git submodule (without a cmd to do so)","<p>What's the easiest way to auto-update a git submodule, without having to manually pull it and commit/push the owning repo update?</p>

<p>I'm using Azure DevOps with yaml. I'm trying to find the best way  that when a submodule is committed, the owning repo gets published with the update. Even if I trigger a republish of the owning repo (manually, or automatically), how can I instruct the owning repo to re-pull the submodule? </p>

<p>Would one path be some yaml instruction OR git config to ""always pull latest""? That doesn't seem to exist as a submodule seems to only show a specific commit to pull.</p>

<p>I'm hoping I won't have to write an Azure Function to (1) watch the submodule, (2) pull the owner, (3) pull the submodule, (4) commit/push the owner - which already automatically publishes the update.  ... but if that's the simplest way, how does one best automate git management?</p>
","3","915087","",""
"24154241","487940","2014-06-11 03:36:47","1","73","<git><github><git-branch><git-merge><git-submodules>","git submodule conflicted pushed","<p>I have a really weird, bad scenario here.  Disclaimer, I'm new to git, and I've kind of screwed up.</p>

<p>SO I have lots of submodules in my fork, based on monodevelop.</p>

<p><strong>First</strong>: I couldn't even update my submodules using 
<code>git submodule update --init --recursive</code>.<br>
I tried bunch of similar commands, with rebase, foreach, etc.  So I finally got the latest using   <code>git submodule foreach git pull origin master</code>.  After this I got all my files.  I then committed and pushed my changes</p>

<p><strong>Now</strong>: I just noticed that all my submodules have conflicts.  &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD, etc.  I have no idea where these came from, and I don't know how to fix these.</p>

<p>git status says everything is up-to-date.  submodule update says everything is up to date, even with force.  git fetch says everything is up-to-date.</p>
","0","487940","0","0"
"61467402","3030875","2020-04-27 19:57:29","1","473","<windows><git><git-submodules>","Setting up complex git submodules dependencies","<p>I have a git repository that has multiple submodules, which also have submodules. In my graph of dependencies, I have such subgraphs:</p>
<p><a href=""https://i.stack.imgur.com/QNGPW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QNGPW.png"" alt=""enter image description here"" /></a></p>
<p>I would like that all repositories share the common parent folder, i.e. if my repositories are named A, B, C, etc..., then A is in C:/dev/folderA, B is in C:/dev/folderB, C is in C:/dev/folderC, etc...</p>
<p>Is such a setup possible? If so, how to create it.</p>
","0","3030875","0","0"
"61488537","1534898","2020-04-28 19:34:35","1","314","<git><git-submodules>","sync between .gitmodules and .git/config","<p>I added few repositories in .gitmodules by editing the file. Thereafter, I ran the command <code>git submodule sync</code> and I could see, that both the files .gitmodules and .git/config are in sync. However, I still dont see the added respositores when I run <code>git submodule status</code></p>

<p>What could be wrong here?</p>
","3","1534898","",""
"61510646","310292","2020-04-29 20:01:20","0","235","<git><git-submodules><git-filter-branch>","In git, while converting a subfolder into a submodule, also keep the history from files that were moved into the target folder","<p>Similar to the process defined at <a href=""https://gist.github.com/korya/9047870"" rel=""nofollow noreferrer"">https://gist.github.com/korya/9047870</a> using the command </p>

<pre><code>git filter-branch --subdirectory-filter sub/module/path HEAD -- --all
</code></pre>

<p>In my history there are files that were in other folders and were moved into that folder, ex.</p>

<blockquote>
  <p>Created testfile.txt<br>
  Modified testfile.txt<br>
  Moved testfile.txt to /sub/module/path/testfile.txt<br>
  Modified /sub/module/path/testfile.txt</p>
</blockquote>

<p>I would want the history of that file (and any other file that exists in the sub/module/path) to exist in the new resulting repository.</p>
","0","310292","",""
"61531772","3521632","2020-04-30 20:00:57","5","529","<git><docker><visual-studio-code><docker-compose><git-submodules>","several development container environment with git","<p>I am using vs-code <a href=""https://code.visualstudio.com/docs/remote/containers"" rel=""noreferrer"">devcontainer</a> feature to create a containerized development environment of the following setup:</p>

<pre><code>root_folder (main git repository)
|- .git
|- docker-compose.yml
|- @myapi-submodule (django python API)
  |- .devcontainer.json
|- @myclient-submodule (react js client)
  |- .devcontainer.json
</code></pre>

<p>In the <code>docker-compose.yml</code> I create 2 services respectively <code>api</code> and <code>client</code> and mount their corresponding submodule folder.</p>

<p>I can then ""Open Folder in Container..."" in 2 separate windows and everything works great except for git. I need to be able to make changes, commit them change branches... from the container but since only the submodule folder is mounted I can't use git at all.</p>

<p>What are my options in this scenario ? How can I modify the submodule from the container without the parent folder ?</p>
","1","3521632","",""
"5974365","519878","2011-05-12 06:51:28","1","651","<git><merge><git-submodules>","How to replace a git submodule with vendored in code?","<p>I've been in the process of getting rid of git submodules lately. Sometimes I'm adding new files where there's been the submodule.</p>

<p>I'm looking for a nice way to drop a submodule, and add some files in it's place without creating merge problems for pulling users.</p>

<p>Here's what I'm talking about:</p>

<p>This is a commit where I've removed a submodule definition and added some files as replacement:</p>

<pre><code>$:~/src/github/huerlisi/mailyt$ git show d1e7e1276fdccb37f775c8f656077e490a0b7be8
commit d1e7e1276fdccb37f775c8f656077e490a0b7be8
Author: Simon Hürlimann (CyT) &lt;simon.huerlimann@cyt.ch&gt;
Date:   Wed May 11 22:07:49 2011 +0200

    Vendor in formtastic sass, drop git submodule.

diff --git a/.gitmodules b/.gitmodules
index 24f8f38..e6177d1 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,6 +1,3 @@
 [submodule ""vendor/plugins/fetcher""]
        path = vendor/plugins/fetcher
        url = git://github.com/huerlisi/fetcher.git
-[submodule ""app/stylesheets/partials/formtastic""]
-       path = app/stylesheets/partials/formtastic
-       url = git://github.com/activestylus/formtastic-sass.git
diff --git a/app/stylesheets/partials/formtastic b/app/stylesheets/partials/formtastic
deleted file mode 160000
index 1b920cb..0000000
--- a/app/stylesheets/partials/formtastic
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 1b920cb2db627cb7cf11cf4d3cea373a774a6fd3
diff --git a/app/stylesheets/partials/formtastic/_formtastic_base.sass b/app/stylesheets/partials/formtastic/_formtastic_base.sass
new file mode 100644
index 0000000..b01ac8e
--- /dev/null
+++ b/app/stylesheets/partials/formtastic/_formtastic_base.sass
@@ -0,0 +1,652 @@
+//
+// FORMTASTIC SASS
+// Flexible styling for formtastic forms
</code></pre>

<p>Merging this commit into my working dir with the submodule checked out gives this error:</p>

<pre><code>~/src/github/huerlisi/mailyt$ git pull
remote: Counting objects: 35, done.
remote: Compressing objects: 100% (23/23), done.
remote: Total 24 (delta 16), reused 0 (delta 0)
Unpacking objects: 100% (24/24), done.
From github.com:huerlisi/mailyt
   2d055d6..82a45be  master     -&gt; origin/master
 * [new branch]      notmuch    -&gt; origin/notmuch
Updating 2d055d6..82a45be
error: The following untracked working tree files would be overwritten by merge:
        app/stylesheets/partials/formtastic/_formtastic_base.sass
Please move or remove them before you can merge.
Aborting
</code></pre>

<p>Manually removing the app/stylesheets/partials/formtastic directory before merging works. But I'd like my fellow coders to be able to simply pull and code.</p>
","0","519878","",""
"43041596","3387542","2017-03-27 08:38:32","1","108","<git><mercurial><git-submodules><data-conversion>","convert mercurial repo with submodules to git repo with submodules keeping history","<p>Is there already a tool around which allows to convert a hg repo with hg sub-repos to a git repo with git sub-repos while keeping the sub-repo state history?
It would be nice to know the sub-repo state on each commit.</p>
","1","3387542","",""
"5991900","571409","2011-05-13 12:33:59","1","663","<git><git-submodules><git-tag>","Tagging an old commit of a submodule with git","<p>I have a git project (repo1) including a single submodule (repo2).
What I would like to achieve is to <em>tag</em> my project using an older commit of my submodule (like HEAD - 3).</p>

<p>I tried with a checkout of the submodule to the commit I want, but checkout is <em>wrong</em> since, committing in my project won't track the proper revision.
I tried resetting my submodule to the commit I want, commit the project, and then pulling the submodule and committing the project, which is also wrong because:</p>

<pre><code>$ git submodule update 
fatal: reference is not a tree: 2c3d1a5936aa9469ecc1442cd4b101e1bbd3aada
Unable to checkout '2c3d1a5936aa9469ecc1442cd4b101e1bbd3aada' in submodule path 'repo2'
</code></pre>

<p>What would be the best -- as well as nicest -- procedure ?</p>

<hr>

<p><a href=""https://stackoverflow.com/questions/2155887/git-submodule-head"">Git submodule head &#39;reference is not a tree&#39; error</a> gives a beginning of an answer, but it stills links the HEAD of repo2 and not a chosen commit...</p>

<p>Suppose now that the tag is done, how can I tell my repo1 to set repo2 in the proper state for a tag:</p>

<pre><code> git checkout 0.0.1
</code></pre>

<p>According to <a href=""https://stackoverflow.com/questions/1979167/git-submodule-update"">git submodule update</a>, a simple</p>

<pre><code> git submodule update
</code></pre>

<p>should suffice. It doesn't checkout my submodule to the specified commit. Why ? Is that a ... <em>bug</em> ?</p>
","0","571409","0","0"
"6006494","332913","2011-05-15 04:30:17","55","33038","<git><git-submodules>","git submodule modified files status","<p>I've added a submodule in my main git folder tree and haven't changed anything but it's showing up modified.  What do I do about this?</p>

<pre><code>$ git status
# On branch master
# Changed but not updated:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#    modified:   example.com/soundmanager
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I've tried a git submodule update, but it doesn't do anything.</p>
","1","332913","0","0"
"6242204","347727","2011-06-05 10:02:25","2","1116","<git><terminal><command-line-interface><git-submodules><dir>","git submodules are ruining my day","<p>Currently I am trying to clone this git repo: <a href=""https://github.com/twilio/OpenVBX"" rel=""nofollow noreferrer"">https://github.com/twilio/OpenVBX</a> into my main repo, as though it was a directory. The issue lies, in it that when I try to commit the main repo with git add ., nothing in the sub dir (submodule) gets committed, and when I try to git add path/to/file it gives me the fatal error: 'Path """" is in submodule'. It seems git is not tracking the sub directory, nor does it notice that it and its files exist at all.</p>

<p>I looked around and came upon this thread: <a href=""https://stackoverflow.com/questions/1084969/unable-to-track-files-in-deep-directories-by-git"">Unable to track files within Git submodules</a>, however, the fix in it has not seemed to work with me or my limited knowledge of git. I do not have any .gitmodules file in my main, and the .git dir I have is not relevant as far I can tell. Is there a way I can make it so its not a submodule anymore? Is there someway I can delete it, and readd it without its git backbone?</p>

<p>I'm more than lost right now, thanks in advance for your help!</p>
","3","347727","",""
"43256688","3493731","2017-04-06 13:30:20","5","3654","<git><git-submodules>","git submodule ""--reference"" parameter","<p>In the <a href=""https://git-scm.com/docs/git-submodule"" rel=""noreferrer"">git submodule</a> documentation for <code>git submodule add</code>, it shows that there is a <code>--reference</code> parameter. Presumably, this works the same way the <code>--reference</code> parameter for <code>git clone</code> works, by copying objects from it, instead of the remote repository. After executing with this parameter, if I look inside <code>.git/modules/&lt;submodule&gt;/objects/info</code>, there is an <code>alternates</code> file, containing the path to the reference repo. </p>

<p>However, <code>git clone</code> also has a <a href=""https://git-scm.com/docs/git-clone#git-clone---dissociate"" rel=""noreferrer""><code>--dissociate</code></a> parameter, to essentially do this for only the initial clone. Is there a way to the same thing for a submodule repository?</p>
","1","3493731","0","0"
"61933252","5345715","2020-05-21 11:15:08","0","198","<git><git-submodules>","How to update git submodules when .gitmodules was manually changed?","<p>Even though this issue was addressed in other posts, I could not find an answer that worked for me. </p>

<p>My Problem: I manually made changes to my <code>.gitmodules</code> file, both adding and removing modules. I would like to my submodules folder to represent those changes.</p>

<p>Approach: </p>

<pre><code>rm -rf submodules/
mkdir submodules/
git submodule update --init --recursive
</code></pre>

<p>This seems to do nothing.</p>

<p>I also tried the same with <code>git pull --recurse-submodules</code> and <code>git submodule update --recursive --remote</code>. Still nothing.</p>

<p>Is there a cache entry I have to delete in <code>.git/</code>?</p>

<p>I <strong>don't</strong> want to use <code>git add xyz</code> manually over and over, pls!</p>
","5","5345715","",""
"6281891","789533","2011-06-08 16:11:04","6","1890","<git><merge><conflict><git-submodules>","git submodule merge conflict: how to visualize?","<p>I was pretty happy when I found out lately about</p>

<pre><code>git submodule summary
</code></pre>

<p>which shows me nicely by which commits the checked out commit of a submodule is ahead or behind the reference in the repository.</p>

<p>Now when I am in the middle of a merge with submodule conflicts, the same command does not produce useful output. I need a painful sequence of gitk in my main tree examining the branches, along with cd'ing into the submodules, fetching and  gitk in there, comparing sha1 values...</p>

<p>What would be a more convenient way to get the picture of the conflict?</p>
","0","789533","0","0"
"42584138","3800049","2017-03-03 16:38:58","10","3353","<git><git-submodules><git-clone>","'git submodule add' without cloning it","<p>How could I add a local submodule to a projet without actually cloning all the files it contain? I want to avoid duplicating my project's files locally.</p>

<p>I know this kind of thing can be achieved because when you clone a project that includes submodules, these are not cloned by default. You have to do it manually:</p>

<pre><code>git clone url-of-repo-containing-submodules.git
git submodule init sub-mod
git submodule update --remote
</code></pre>

<p>Let say, I have a git repo <em>meta-project</em> with an out-source repo <em>lib-sobmodule</em>.</p>

<p>I could hack it to avoid file duplication:</p>

<pre><code>cd /path/to/metaproject
git submodule add ../path/to/lib-sobmodule
git commit -m ""lib-sobmodule added...""
git push
cd .. &amp;&amp; rm -rf meta-project
git clone url-of-meta-project.git
</code></pre>

<p>Tadam! Files of <em>lib-sobmodule</em> are not duplicated on my desktop. But its not a nice solution as it exports then imports everything to/from a git remote...</p>

<p>Is there an option or a method that could prevent to clone a local project without having to duplicate all the files it contains? </p>

<p><em>Disclamer: This is almost a clone question of <a href=""https://stackoverflow.com/questions/34562333/is-there-a-way-to-git-submodule-add-a-repo-without-cloning-it"">Is there a way to <code>git submodule add</code> a repo without cloning it?</a>. But as the answers are focused on the <strong>30K</strong> git submodules requirement, they did not gave a satisfactory solution for the more common use case I describe here.</em></p>
","2","3800049","0","0"
"42716182","7000031","2017-03-10 10:33:24","6","987","<git><git-svn><git-submodules><svn-externals>","Migrate from svn to git keeping svn-externals","<p>I am migrating from an svn repository to git.
This svn repository has svn-externals, to be kept on svn repositories. These external are versioned and tagged in the history, and are read only.
How I can properly migrate and have the svn-externals in the new git repository properly set?</p>

<p>I am looking in ""git svn propset"", git submodules, subtree merges. But How I can set up such a repository?  </p>
","2","7000031","0","0"
"5542910","5017","2011-04-04 18:51:54","345","295094","<git><git-submodules>","How do I ""commit"" changes in a git submodule?","<p>I have, in my naivety, set up a git submodule and treated it like a Subversion external - i.e. it's now full of changes that I've just realized haven't been committed or pushed anywhere.</p>

<p>Is there some easy way to commit/push the submodule changes back to the upstream repo? And what's the recommended technique in Git for doing simultaneous development on separate (but linked) repositories in this way?</p>
","1","5017","0","0"
"60894850","5067748","2020-03-27 22:19:03","-1","2615","<git><shell><git-submodules>","Add existing git repo as submodule","<p>I am reorganizing my dotfiles and have the following directory structure:</p>

<pre><code>dotfiles
├── .vim
│   ├── colors/
│   ├── ftplugin/
│   ├── pack/
│   │   └── my_plugins/
│   │       ├── opt/
│   │       │   ├── nerdtree/
│   │       │   │   ├── .git
│   │       │   └── vimwiki/
│   │       │       ├── .git
│   │       └── start/
│   │           ├── fugitive/
│   │           │   ├── .git
│   │           ├── syntastic/
│   │           │   ├── .git
│   │           ├── vimade/
│   │           │   ├── .git
│   │           └── vim-css-color/
│   │               ├── .git
│   ├── README.md
│   └── vimrc
</code></pre>

<p>There are six directories which are github repos and that have already been cloned to their directories.</p>

<p>I want to now make the entire dotfiles directory version controlled.
How do I add the six <code>.../.git</code> repos as submodules to the top level repo, without having to re-clone the packages.</p>

<p>Note that <a href=""https://stackoverflow.com/questions/32776018/how-to-git-submodule-add-existing-sub-repository"">here</a>, a similar question was asked, but the instructions given are unclear.
What I need is the step-by-step solution to add the entire .vim directory to the top-level repo.</p>
","0","5067748","",""
"61163082","12027622","2020-04-11 20:09:59","33","29468","<git><github><git-submodules>","Why does git submodule update fail with ""fatal: remote error: upload-pack: not our ref""?","<p>I have a git repo with multiple submodules. I have tried deleting and adding the submodule in question (<a href=""https://github.com/scopatz/nanorc.git"" rel=""noreferrer"">scopatz's nanorc</a>), however the error persists across the deletion and re-addition. When I clone the repo to a new location I automatically update it with <code>git submodule update --init --recursive</code>, which is when this fails, but only for this submodule...
Below is the relevant output from the command with <code>GIT_TRACE=2</code>:</p>

<pre><code>23:01:26.918691 run-command.c:1569      run_processes_parallel: preparing to run up to 1 tasks
23:01:26.933567 run-command.c:1601      run_processes_parallel: done
23:01:26.934373 run-command.c:646       trace: run_command: git gc --auto
23:01:26.966805 git.c:344               trace: built-in: git gc --auto
23:01:26.991059 git.c:344               trace: built-in: git rev-parse --local-env-vars
23:01:27.015684 git.c:344               trace: built-in: git rev-parse --local-env-vars
23:01:27.032282 git.c:344               trace: built-in: git symbolic-ref -q HEAD
23:01:27.053948 git.c:344               trace: built-in: git config --get branch.master.remote
23:01:27.073636 git.c:344               trace: built-in: git fetch origin 151d94a8754b0a612315fc191c5373cc0055c13d
23:01:27.079657 run-command.c:646       trace: run_command: git-remote-https origin https://github.com/scopatz/nanorc.git
23:01:28.441725 run-command.c:646       trace: run_command: git rev-list --objects --stdin --not --all --quiet
23:01:28.452267 run-command.c:646       trace: run_command: git fetch-pack --stateless-rpc --stdin --lock-pack --thin https://github.com/scopatz/nanorc.git/
23:01:28.467757 git.c:344               trace: built-in: git fetch-pack --stateless-rpc --stdin --lock-pack --thin https://github.com/scopatz/nanorc.git/
fatal: remote error: upload-pack: not our ref 151d94a8754b0a612315fc191c5373cc0055c13d
fatal: The remote end hung up unexpectedly
Fetched in submodule path 'submodules/nano', but it did not contain 151d94a8754b0a612315fc191c5373cc0055c13d. Direct fetching of that commit failed.
</code></pre>

<p>hoping someone here can help, I'm mostly lost at this point.</p>

<p><strong>=== EDIT: Solution Steps Below ===</strong></p>

<pre><code>cd {submodule path}
git reset --hard origin/master
cd -
git clean -n
git add {submodule path}
git commit
git submodule update --init --recursive
</code></pre>

<p>No errors, awesome.</p>
","0","12027622","0","0"
"61182579","10295041","2020-04-13 06:28:08","1","431","<java><spring-boot><maven><microservices><git-submodules>","Extracting common code from existing spring boot services and reusing the code using maven and git submodules","<p>So I work on a bunch of spring boot based microservices. The thing is all those services have the same user verification code, same exception handler advice, same AOP based logging etc. Now what I want to do is to extract this code in a separate repository and use this code with each of the services as their component (and I want to be able to edit this code with the service code I will be adding it into).
Basically, when I build the code of that service, I should be able to build that common code project as well which would be present as a sub-directory in each of the services.
Visually, my current situation is this:</p>

<pre><code>   service A (present in its own repo,contains common code)
   pom.xml

   service B (present in its own repo,contains common code)
   pom.xml

  ....etc.
</code></pre>

<p>What I want to achieve is this:</p>

<pre><code>   service A
      \-----pom.xml
       \----src\main\java\com\company\project\sub-directory A
        \----src\main\java\com\company\project\sub-directory B
         .....
         \----src\main\java\com\company\project\sub-directory common (common code extracted, will be a spring boot project)
</code></pre>

<p>Similarly for service B.
Now I have tried a few approaches so far and have not found a solution yet. The most promising thing that I thought was this:</p>

<ol>
<li>Separate the common code into a new repository.  </li>
<li>Make each of the services into a <code>pom</code> packaging instead of currently jar</li>
<li>Add the common code as a git submodule where ever I want in the project as a sub-directory and also 
include it in <code>pom.xml</code> of each of the services as</li>
</ol>

<pre><code>&lt;modules&gt;
    &lt;module&gt;path-to-sub-module&lt;/module&gt;
&lt;/modules&gt;
</code></pre>

<p>Also, the common project will not have any specific parent like service A or service B. It will be a simple spring boot project with the parent as  <code>spring-boot-starter-parent</code>.
So I tried that and after doing the above, when I have the common project as a sub directory, there are lots of compilation errors because the package structure for the common project has now changed. If each of the models was in a package say:</p>

<pre><code>package com.project.poc.models;
</code></pre>

<p>are now throwing error saying this isn't the correct package and rightly so, which should be</p>

<pre><code>package com.project.poc.common.src.main.java.com.project.poc.models;
</code></pre>

<p>Anything I can do about this? or is there something else, something better you guys can suggest I can do to achieve my requirement?</p>

<p>Thanks</p>
","5","10295041","",""
"61191463","6271889","2020-04-13 15:42:43","1","157","<git><git-submodules><git-tag>","git submodule version based on tag","<p>How do git submodules and tags work, specifically can I use git tags in the host module to change which has the submodule points to?</p>

<p>Lets say that I have a module called <code>main</code> and under that, I added a submodule called <code>dep</code>. I have just released a new version, so I tag the whole repo with <code>REL_1</code>. Life goes on, I  code some more and update the <code>dep</code> submodule and commit that to HEAD.</p>

<p>What happens when I checkout <code>REL_1</code>? Will <code>dep</code> go back to the hash it had when I created the tag?</p>

<p>Thank you!</p>
","0","6271889","0","0"
"61217170","7668013","2020-04-14 21:01:12","2","97","<git><git-submodules><git-filter-branch>","How does git filter-branch affect repos used as submodules?","<p>I want to use <code>git filter-branch</code> to remove some large files from the commit history of a repository named <code>problems</code>. Does this cause any issues in my repository <code>thesis</code>, which uses the <code>problems</code> repository as a submodule?</p>

<p>Namely, does the force push required with <code>git filter-branch</code> necessitate any special action or consideration in the <code>thesis</code> repository?</p>
","0","7668013","0","0"
"24057871","1389252","2014-06-05 10:33:58","65","88083","<git><git-submodules>","'git submodule update --init --recursive' VS 'git submodule foreach --recursive git submodule update --init'","<p>I have git repo which has nested submodules. What is the difference between below 2 commands? </p>

<pre><code>git submodule update --init --recursive

git submodule foreach --recursive git submodule update --init
</code></pre>
","0","1389252","0","0"
"5847195","242135","2011-05-01 07:49:58","2","356","<visual-studio-2010><git-submodules><githooks><tortoisegit>","What githooks are called on submodule update?","<p>So here's the situation.  I have a git repository with multiple submodules.  Both the top level directory and all of the submodules contain Visual Studio 2010 solutions.</p>

<p>The top level repository depends on the submodules being up to date and the submodules need to be rebuilt every time they are updated.  What I want to do, since there are an arbitrary number of submodules, is to make some kind of post-update hook in git to compile the submodule that was just updated.</p>

<p>So my question is this: what hooks (if any) are called when a submodule is updated?  It seems like post-checkout might be what I want but I'm not sure.</p>

<p>We're using TortoiseGit with Git for Windows(msysgit) as the backend if that makes a difference.</p>
","0","242135","",""
"42938741","615780","2017-03-21 21:47:31","0","5713","<node.js><git><npm><git-submodules>","npm install update git submodule","<p>I have a Node JS lib with git submodule.
When I clone the git repository of my lib, I had to do <code>submodule update --init --recursive</code> something like this to pull the actual stuff from the submodule. 
After I released the lib and I did npm install my-lib and noticed it's not pulling the git submodule. How do I configure it so it pulls the git submodule? is that even possible?</p>
","0","615780","",""
"6100966","185651","2011-05-23 17:55:46","50","33489","<git><git-submodules>","Nested git repositories without remotes (a.k.a. git submodule without remotes)","<p>I have a project of which I am interested in breaking out portions as open-source. I've set up nested git repositories main, one, two and three:</p>
<pre><code>main/
├── one
├── three
└── two
</code></pre>
<p>I thought that by going into &quot;main&quot; and doing</p>
<pre><code>git add one
git add two
git add three
</code></pre>
<p>(note the lack of trailing slashes), I'd set up submodules with the sub-repositories and be good to go.</p>
<p>However, as noted in <a href=""https://stackoverflow.com/questions/4161022/git-how-to-track-untracked-content/4162672#4162672"">How to track untracked content?</a>, this only creates gitlinks and not real submodules.</p>
<p>Unfortunately, that answer doesn't help, as it assumes that there is a &quot;master&quot; repository somewhere <em>else</em> for &quot;main/one&quot;, &quot;main/two&quot;, and &quot;main/three&quot;. I'd like these sub-repo's to <em>be</em> the master repositories. I'm considering fake submodules (as per <a href=""http://debuggable.com/posts/git-fake-submodules:4b563ee4-f3cc-4061-967e-0e48cbdd56cb"" rel=""noreferrer"">Git fake submodules</a>), but that's not a particularly ideal situation for cloning.</p>
<p>Any other suggestions out there?</p>
","0","185651","0","0"
"43155797","1455384","2017-04-01 10:41:39","0","351","<git><git-submodules>","git - treat sub git repository as normal repository for unittests?","<p>I'm writing a module that integrates one system with <code>git</code>. I'm writing tests and want to have test repository inside tests directory, so I could run unittests on it.</p>

<p>Module and project structure looks like this:</p>

<pre><code>myproject/
  mymodule/
    some_dir/
    tests/
      __init__.py
      testrepo/
        /.git
      test_some.py
  /.git
</code></pre>

<p>Now while I'm developing, it is working. I can run tests using <code>testrepo</code>. Though I noticed, when I committed, <code>git</code> started treating <code>testrepo</code> as subproject automatically. So basically it does not track all changes that occurred. If actual code changes, then it recognizes as subproject/submodule change. But if I let say add new branch, those changes are not recognized (unless I would check out to it etc).</p>

<p>So I'm wondering what could be best way to use <code>testrepo</code> for unittests. I want it to be in source control, so whole structure would be intact with unittests. </p>

<p>If understood correctly from <a href=""https://stackoverflow.com/questions/37563528/how-can-i-add-git-submodule-into-git-repo-as-normal-directory"">how can I add git submodule into git repo as normal directory?</a> it is not really possible (only by somewhat hacking git name back and forth) to treat sub git repository as normal repository.</p>

<p>So how I could preserve all changes in sub repository, so I would need to just pull <code>myproject</code> and get <code>testrepo</code> with all branches etc?</p>

<p>Or I can only use it as real submodule and need to initialize it after cloning <code>myproject</code>?</p>

<p><strong>Update</strong></p>

<p>If I use <code>testrepo</code> as real submodule, then my tests stop working, because it is no longer recognized as normal <code>git</code> repo. </p>
","0","1455384","",""
"61831943","8062444","2020-05-16 04:35:56","0","435","<git><github><git-submodules><git-remote>","How can I have multiple projects with their own local git repositories in one GitHub repository?","<p>I am a university student working on a summer research project with a few colleagues.  I am working on one research project that involves an iOS app (built with Swift/Xcode), a Java app (built with IntelliJ IDEA), an Arduino sketch (made with CLion/C++), and a MicroPython file (made with PyCharm/Python).  Since I am working with others on a team, and all of these separate codebases produce one finished product, I would like to have one GitHub repository where all of these are stored, each in their own subfolder.  Google does this on their examples repository: <a href=""https://github.com/googlesamples/google-services"" rel=""nofollow noreferrer"">https://github.com/googlesamples/google-services</a>.  They have multiple Xcode projects under the ""iOS"" folder and multiple Android projects under the ""Android"" folder, as well as some source code throughout.  The Xcode projects appear to all have their own repositories, given the <code>.gitignore</code> file in each of them.  Also, all of the projects are on the same branch.  How can I achieve this in my own repository?  So far I've tried submodules, which seem to not upload the code to GitHub in a way that is accessible.  I've also tried adding the GitHub repository as a remote to each project and pushing the projects from there, but I get errors because the <code>master</code> branch on the GitHub repository has changes that are not reflected locally.  I would prefer that all the projects are on one branch like they are in the Google repository.  Would it be possible for all of the projects to share a local repository, or would that be unmanageable?  Thanks.</p>
","1","8062444","",""
"24484509","377393","2014-06-30 06:59:22","2","301","<git><git-submodules>","Is it possible to add nested submodules in the root repo in git?","<p>I want to make submodule in my repo:</p>
<pre><code>Root /
\--- /A (submodule)
</code></pre>
<p>But also I want to nest another submodule, also in root:</p>
<pre><code>Root /
\--- /A (submodule)
 \-- /A/B (another submodule)
</code></pre>
<p>And I can't add <code>B</code> as submodule to <code>A</code>, since <code>A</code> is a third-party repo.</p>
<h3>The real-life example.</h3>
<p><code>llvm</code> + <code>clang</code> trees: I want to include both repos, but <code>clang</code> must be checked-out inside <code>llvm</code> tree.</p>
","0","377393","0","0"
"6147142","198553","2011-05-27 02:12:11","9","600","<git><version-control><mercurial><git-submodules>","Why hg always commit a git submodule, even if it hasn't changed?","<p>I have a hg repository, with a hg subrepository, which has some git submodules. (I know this sounds completely insane, but it's working with svn repos in google code, in libs in github and modules in bitbucket. I'm using code freely made available by a bunch of people, WHO AM I to complain about their decisions about version control - what I want is the code and I'm grateful for that).</p>

<p>A little ""tree"" about this scenario:</p>

<pre><code>+ hg repo
  + hg subrepo
    + git submodules
</code></pre>

<p>When I change a file in the hg subrepository and commit, it commits all the git submodules, even if they were not changed. I have run <code>hg status</code>, it doesn't show anything about the git submodules, but if I commit:</p>

<pre><code>committing subrepository SUBREPO
</code></pre>

<p>This wouldn't be so problematic, if I were using just one hg main repo with a bunch of git submodules. The problem relies when I make a change in the first hg repository: now, when I commit, it commits in the hg repository AND in the hg subrepository, since it <strong>always</strong> commits the git submodules. So now, I have a comment that was designed to be at the first hg repository only, and the same comment in the hg subrepository.</p>

<p>How do I avoid this intermitent <code>committing subrepository SUBREPO</code>, for every commit I do on my hg repository/subrepository with git submodules? Is this a bug? Is this a git design (maybe the git repositories always change at least a ""status"" file or something like that that always change after a pull? I don't have much experience with git...)</p>
","6","198553","0","0"
"6154935","734804","2011-05-27 16:09:18","1","598","<git><git-submodules>","How to know if a git submodule commit is already pushed into the repository","<p>Suppose you have a repository called super and a submodule called sub. Stand in super, I'd like to know if sub last commit is already pushed to the repository or if it's local.</p>
","0","734804","",""
"24501084","458955","2014-07-01 01:03:26","2","345","<git><git-submodules><depth>","Configure depth of git submodule","<p>I realize you can set the depth of a submodule manually when updating it, <a href=""https://stackoverflow.com/questions/2144406/git-shallow-submodules"">see here</a>, but is it possible to set that automatically, say as an option in the gitconfig? This way I could set it so when updating a submodule it only ever brings down a revision history of depth 2?</p>
","0","458955","0","0"
"24695531","2370280","2014-07-11 10:24:27","5","79","<git><automation><git-submodules><gitignore>","Is it possible to add/initiate a new git submodule with the ignore option set to a certain value?","<p>I have a script that sets up a project for me and my co-workers.
We are using git submodules inside our repository. The script I've made creates untracked config files inside the submodules' directories (cabal's sandbox config files to be more specific). I'm never going to modify the submodules, will never push any changes. I would like for those config files not to be listed as modifications to the repository, so I ignore them with the submodule option <code>ignore = untracked</code>. However, I have to do that manually for each submodule entry in the <code>.git/config</code> file.</p>

<p>The question at hand: is it possible to set that option per submodule when calling <code>git submodule add</code> or <code>git submodule init</code>? If not, is there any git command that would allow me to set such a config variable per-module after initialisation?</p>
","0","2370280","0","0"
"6403715","600500","2011-06-19 16:45:21","24","6356","<git><git-submodules><git-filter-branch><git-subtree>","git: How to split off library from project? filter-branch, subtree?","<p>So, I've a bigger (closed source) project, and in the context of this project created a library which could also be useful elsewhere, I think.</p>

<p>I now want to split off the library in its own project, which could go as open source on github or similar. Of course, the library (and its history there) should contain no traces of our project.</p>

<p>git-subtree seems like a solution here, but it does not completely fit.</p>

<p>My directory layout is something like this (since it is a Java project):</p>

<ul>
<li>fencing-game  <em>(git workdir)</em>
<ul>
<li>src
<ul>
<li>de
<ul>
<li>fencing_game
<ul>
<li><strong>transport</strong>   <em>(my library)</em>
<ul>
<li><strong>protocol</strong>  <em>(part of the library)</em></li>
<li>fencing <em>(part of the main project interfacing with the library)</em></li>
<li>client <em>(part of the main project interfacing with the library)</em></li>
<li>server <em>(part of the main project interfacing with the library)</em></li>
</ul></li>
<li>client <em>(part of the main project)</em></li>
<li>server <em>(part of the main project)</em></li>
<li>...  <em>(part of the main project)</em></li>
</ul></li>
</ul></li>
</ul></li>
<li><em>other files and directories (build system, website and such - part of the main project)</em></li>
</ul></li>
</ul>

<p>After the split, I want the library's directory layout look like this (including any files directly in the bold directories):</p>

<ul>
<li>my-library <em>(name to be determined)</em>
<ul>
<li>src
<ul>
<li>de
<ul>
<li>fencing_game
<ul>
<li><strong>transport</strong>   <em>(my library)</em>
<ul>
<li><strong>protocol</strong>  <em>(part of the library)</em></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p><strong>The history should also contain just the part of the main project's history which touches this part of the repository.</strong></p>

<p>A first look showed me <code>git-subtree split --prefix=src/de/fencing_ame/transport</code>, but this will</p>

<ol>
<li>give me a tree rooted in <code>transport</code> (which will not compile) and</li>
<li>include the <code>transport/client</code>, <code>transport/server</code> and <code>transport/fencing</code> directories.</li>
</ol>

<p>The first point could be mitigated by using <code>git subtree add --prefix=src/de/fencing_ame/transport &lt;commit&gt;</code> on the receiving side, but I don't think git-subtree can do much against exporting also these subdirectories. (The idea really is to just be able to share the complete tree here).</p>

<p>Do I have to use <code>git filter-branch</code> here?</p>

<p>After the split, I want to be able to <em>import back</em> the library in my main project, either using git-subtree or git-submodule, in a separate subdirectory rather than where it is now. I imagine the layout this way </p>

<p><ul>
<li>fencing-game  <em>(git workdir)</em>
<ul>
<li>src
<ul>
<li>de
<ul>
<li>fencing_game
<ul>
<li>transport   <em>(empty)</em>
<ul>
<li>fencing <em>(part of the main project interfacing with the library)</em></li>
<li>client <em>(part of the main project interfacing with the library)</em></li>
<li>server <em>(part of the main project interfacing with the library)</em></li>
</ul></li>
<li>client <em>(part of the main project)</em></li>
<li>server <em>(part of the main project)</em></li>
<li>...  <em>(part of the main project)</em></li>
</ul></li>
</ul></li>
</ul></li>
<li>my-library
<ul>
<li>src
<ul>
<li>de
<ul>
<li>fencing_game
<ul>
<li><strong>transport</strong>   <em>(my library)</em>
<ul>
<li><strong>protocol</strong>  <em>(part of the library)</em></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li><em>other files and directories (build system, website and such - part of the main project)</em></li>
</ul></li>
</ul>
<strong>What would be the most pain-free way to do this?</strong> Are there other tools than git-subtree and git-filter-branch for this goal?</p>
","2","600500","0","0"
"24710751","24949","2014-07-12 07:33:11","9","420","<git><git-submodules>","Include submodules as well in git checkout-index","<p>Is there a way to copy files from the submodules as well when doing <code>git checkout-index</code>?</p>

<p>I already checked the documentation of <a href=""http://git-scm.com/docs/git-checkout-index.html"" rel=""noreferrer"">git checkout-index</a> but it makes no mention of submodules</p>
","2","24949","0","0"
"62051812","5609685","2020-05-27 19:57:16","0","158","<git><npm><git-submodules>","What are the main advantages of using git submodules over package managers like npm?","<p>My current understanding of git submodules is that it allows one to track multiple repos as dependencies. </p>

<p>It's better than pasting code in because it can track upstream changes and will allow one to easily update them. </p>

<p>It's better than manually cloning repos into a dependencies folder since submodules will let you view all changes and update them all at once easily. It would require committing all the dependency code as part of the parent project. Other collaborators would be forced to pull the same versions of the dependencies since the code is committed with rest of the project.</p>

<p>However, I don't understand its advantages over a package manager like npm. Atlassian claims ""package managers have the downside of requiring installation and version management at all places the origin code is deployed."" Why is this a downside and how does git submodules escape this problem?</p>
","0","5609685","",""
"6700093","561638","2011-07-14 21:22:26","13","16924","<git><merge><git-submodules><conflict>","what causes submodule conflicts in git, and how should they be resolved?","<p>We are using submodules and we are new to git.</p>

<p>We often see merge conflicts for the submodules themselves, no files are conflicted, just the submodule.  There are multiple versions listed in the output of <code>git submodule summary</code>.  We resolve them by running <code>git add &lt;submodule&gt;</code> in the superproject.<br>
But today we had a developer lose a commit of the submodule when she resolved the conflict in this manner.<br>
Does running a git add choose the remote version?  Shouldn't the contents of the submodule get merged?  If she made changes in the submodule and committed them (which I see), then why would that commit disappear after she ran the pull and resolved the conflict?</p>
","0","561638","0","0"
"62280076","2298137","2020-06-09 10:09:10","2","191","<git><git-submodules>","git clean remove untracked submodules","<p>I have refactored my submodules in a project tree (lots of submodules deep).</p>

<p>I have been working my way up the tree of submodules. Now I am at the top level. So when I updated its submodules, all the submodules below still have local copies of submodules that are no longer part of the repo after moving them to the latest version.</p>

<p>so I want a way to go through the modules and clean them out.</p>

<p>I did: <code>git clean -df</code> but this gives me the message: ""would skip repository"" for each unused copy of submodules that I am trying to remove. I can manually remove them with <code>rm -rf submodule</code>, but I want to use clean since it does all in one command.</p>

<p>Note: these are not still actual submodules, since they have been removed correctly from the repo, but when switching between an old version and new version of the repo, the submodule update does not clear them away.</p>

<p>Here is a simple setup:</p>

<pre><code>module/submodule1      -&gt; version 1
now remove submodule1  -&gt; version 2
</code></pre>

<ul>
<li>checkout version 1 (submodule1 folder is created)</li>
<li>checkout version 2 (submodule1 folder is still there, but not part of the repo)</li>
</ul>

<p>If I do a <code>git submodule update --recursive --init</code> it also does not remove the unwanted SMs...</p>

<p>how can I tell git to remove those folder dregs between versions?</p>
","1","2298137","",""
"24969270","403727","2014-07-26 08:52:27","1","166","<git><git-submodules>","merging a git-submodule into a git repo. what happens to existing files?","<p>I may have the wrong approach here, but this is what I want to do and I'm not sure how to do it:</p>

<p>I have a source tree (a magento shop) which is one big git repo. magento is expandable with extensions, and I did install one. an extension is basically another source tree, which is copied into the main source tree and so gets added to the main repo.</p>

<p>now I want to add a new version of the extension. I could just copy over the new source tree, which would overwrite my own changes. what I would like to do instead is merging the updated source tree into the main repo. </p>

<p>my impression is, that I could add the extension source tree as a git-submodule. how would I do this and what happens with the existing files, which are tracked in the main repo now, but should be tracked in the git-submodule (as I understand it).</p>
","0","403727","0","0"
"6734418","183910","2011-07-18 14:24:20","3","946","<git><git-submodules>","Checking out only a subdirectory of another repo with git-submodule","<p>I need to only add a part (a directory) of another project within my ""superproject"", so I'd like to know if it is possible with git-submodule to only add a certain directory from another repository to my project?</p>

<p>(I'm using git for the deployment as well, so I do not want to stuff my project with other unnecessary things.)</p>
","1","183910","",""
"62488984","9644179","2020-06-20 17:02:00","0","167","<git><github><git-submodules><git-subtree><git-worktree>","How to create different github repos if I have one large folder with many files in it","<p>I have a folder called coursework on my machine with many files like: file 1, file 2, file 3, file 4, file 5, and file 6. On Github, I want to create repo1 with ONLY file 1, file 2 and file 3. Also, I want to create repo 2 with ONLY files file 4, file 5 and file 6 from that same coursework folder.</p>
<p>Someone recommended me to use submodules but I am not entirely sure how to use them in this case. Is there an easier approach to accomplish this task? Thanks!</p>
","7","9644179","0","0"
"25200231","2214693","2014-08-08 09:31:58","17","15262","<git><git-submodules><git-push><git-clone>","Cloning a git repo with all submodules","<p>I have a working git repository containing several submodules (obtained by cloning different repositories). </p>

<p>Now, I want to <strong>copy the whole repository (with all the submodules)</strong> to a bare git repo on a different machine by either using pushing or cloning. I'm fine loosing the history of the submodules (I'm just interested in keeping their content). </p>

<p>Is this possible ? In my attempts, in the cloned repository the submodule directory is empty.</p>

<p>P.S. I know that this is not the correct workflow (see <a href=""https://stackoverflow.com/questions/9811514/creating-a-public-repo-with-submodules"">creating a public repo with submodules</a>), however there is no possibility of updating the original submodule.</p>
","0","2214693","0","0"
"25212477","307428","2014-08-08 21:24:32","1","69","<git><git-submodules>","Renamed my Xcode project and directory now trying to git init, but Not a git repository","<p>I had an xcode project that contained a submodule. I renamed my project and renamed the directory where my project lives. Not I am trying to <code>git init</code>, but getting the following error.</p>

<pre><code>Not a git repository: RestKit/../.git/modules/submodules/RestKit
</code></pre>
","0","307428","0","0"
"62504184","3443251","2020-06-21 20:40:55","1","17","<git><git-submodules>","Remove actual git repo after adding as submodule","<p>i'm new so please bear with me! I had made two repos on git, lets call them <code>FRONTEND</code> &amp; <code>BACKEND</code>. I didn't like that these 2 repositories, which belong to the same App/Project, should be in different git repos. So, I made a parent <code>CMS</code> repository and <code>git submodule</code>ed <code>FRONTEND</code> &amp; <code>BACKEND</code> to it. But on GitHub, I can still see the initial repos and also the submoduled repos in the <code>CMS</code>. I don't want to lose my GitHub commits. Is there a way to consolidate the repos into a single repo with multiple folders without losing the commits?</p>
","3","3443251","",""
"24812321","18573","2014-07-17 19:50:32","0","365","<git><git-submodules>","git pull --rebase fails with submodule foreach but succeeds on its own directory","<p>[update at bottom]</p>

<p>This has now happened twice in last fifteen minutes. When I issue the following command from parentmodule</p>

<pre><code>git submodule foreach git pull --rebase
</code></pre>

<p>It prints messages about updating some submodules and 'is up to date.' about some other until stopping at one with the following:</p>

<pre><code>Entering 'foo.bar'
Cannot pull with rebase: You have unstaged changes.
Please commit or stash them.
Stopping at 'foo.bar'; script returned non-zero status.
</code></pre>

<p>I do not remember making any changes in foo.bar. As a matter of fact I had issued <code>git submodule foreach git status</code> immediately before this where it had reported up to date. So I try to see what is wrong and there seems to be nothing wrong:</p>

<pre><code>$ cd foo.bar/
14 07 17 12:38:03 I063510@OAKN00563024A /c/git/mainbuild/foo.bar (staging)
$ git st
On branch staging
Your branch is up-to-date with 'origin/staging'.

nothing to commit, working directory clean
14 07 17 12:38:08 I063510@OAKN00563024A /c/git/mainbuild/foo.bar (staging)
$ git pull --rebase
remote: Counting objects: 19, done        
remote: Finding sources: 100% (10/10)        
remote: Total 10 (delta 5), reused 9 (delta 5)        
Unpacking objects: 100% (10/10), done.
From ssh://git.wdf.sap.corp:29418/smp/server/dist/com.sap.mobile.platform.server.foo.bar
   214e0c9..266b279  master     -&gt; origin/master
Current branch staging is up to date.
</code></pre>

<p><strong>So why did it fail with submodule foreach?</strong></p>

<p><strong>UPDATE</strong>
It seems <code>git submodule</code> is not to be blamed here. I tried</p>

<pre><code>git submodule  -q foreach 'echo ""cd $name;  pwd; git pull --rebase; cd ..""' | bash
</code></pre>

<p>and that failed too. Then I tried the original command in a new <code>cygwin bash</code> started from windows command prompt that did not execute my <code>~/.bash_profile</code> etc. And it succeeded. So there is something else that is causing this. </p>
","0","18573","0","0"
"62139248","3632863","2020-06-01 19:07:20","4","1582","<android><git><gradle><git-submodules><aar>","trouble using aar with gradle 6.2.1 in git submodule","<p>I have an Android project that has several modules. It also has a library that consists of several modules as a git submodule. The library is its own standalone project with an app module for testing.</p>

<pre><code>- Project
    - app
    - module1
    - module2
    - library (git submodule)
        - app (sample app module for testing library)
        - module1
        - module2 (depends on aar)
</code></pre>

<p>updating to Gradle 6.2.1, I got build errors:</p>

<blockquote>
  <p>Direct local .aar file dependencies are not supported when building an AAR. The resulting AAR would be broken because the classes and Android resources from any local .aar file dependencies would not be packaged in the resulting AAR. Previous versions of the Android Gradle Plugin produce broken AARs in this case too (despite not throwing this error). The following direct local .aar file dependencies of the :module2 project caused this error: .../master/module2/libs/my_dependency.aar</p>
</blockquote>

<p>Now, if I fix this in the library project by importing the aar as a module, the sample app works fine. However, if I use that same library branch in my master project, I get errors about the aar module not having an AndroidManifest.xml, or the compileSdkVersion is not defined. If I fix those two errors, then there are still class not found errors.</p>

<p>Is this type of aar module supported in a git submodule?
Also, the aar dependency works fine using gradle 5.4.1.</p>
","0","3632863","",""
"6528936","95078","2011-06-30 00:56:57","13","3276","<git><ruby-on-rails-plugins><git-submodules>","switching a subdirectory managed by git to a submodule","<p>We used to have a local hack of delayed_job in a Rails app, in vendor/plugins/delayed_job.  It was installed as a one-time event and checked into git in the main app repo.</p>

<p>Now we decided to fork delayed_job on github and replace the subdirectory by a git submodule, as described e.g. here:</p>

<p><a href=""http://doblock.com/articles/using-git-submodules-to-manage-plugins-in-rails"">http://doblock.com/articles/using-git-submodules-to-manage-plugins-in-rails</a></p>

<p>Before doing that, I simply removed vendor/plugins/delayed_job, without checking it in.  Now, despite adding the submodule, git status in the main repo still shows new files in vendor/plugins/delayed_job.</p>

<p>How should we handle the situation where a subdirectory which was a part of the repo is deleted and made to hold a git submodule?  Should we first delete it with git rm, or obliterate it even more thoroughly, before cloning a submodule into its place?</p>
","0","95078","0","0"
"24831274","782130","2014-07-18 18:10:00","0","166","<git><version-control><git-submodules>","Share git repo but with one directory “hidden”?","<p>The situation is this:</p>

<p>We have a git repo on some server with one branch on it, let’s assume it’s <code>master</code>.  We clone that repo to our own machines and do things on it.  Each of us have our own local branches, but when we push to the server, we always merge/rebase our local changes onto <code>master</code> first, and then push to the server.</p>

<p>Everything is fine.</p>

<p>Now some other guys want to join the development.  Therefore we decide to share our repo with them, except that one particular directory.  What we want is some kind of mechanism, with which we can develop the project as usual (one branch on server, local branches for convenience), but when that “other guys” clone the project (maybe with some other clone command, or whatever proper command provided by the mechanism, we’ll teach them the command), they see all the content except that particular directory (or they can see the dir, but it’s empty, or they don’t have access), and they can also push their changes to the server, and have their own local branches, etc.</p>

<p>What’s the best way to achieve this?  I don’t mind having multiple repos on the server.</p>

<p>I’ve been looking into submodule, and did some tests.  The thing I don’t like about submodule is that I have to go into the submodule dir and add/commit/push etc (er… right?).  Also I’m not sure how submodule will fit into our local branches workflow.  Any suggestion are welcome.</p>
","2","782130","",""
"62157241","5555799","2020-06-02 16:56:05","0","230","<git><git-submodules><githooks>","git pre-receive hook fails to execute git commands for other repository on server","<p>I have a git server on my local docker, where I host 2 repositories: <code>main.git</code> and <code>sub.git</code>. <code>sub</code> is a submodule in the <code>main</code> repo. Both of them are bare. I try to add a pre-receive hook to my <code>main</code> repo, that checks if I don't reference a missing submodule revision (for example if someone forgets to push the submodule before pushing the main repo). I use this script: <a href=""https://gist.github.com/T3sT3ro/902d67f29d2c913b3fef6034776777e0"" rel=""nofollow noreferrer"">https://gist.github.com/T3sT3ro/902d67f29d2c913b3fef6034776777e0</a> which is a slightly fixed version of this one:  <a href=""https://gist.github.com/bagage/bdca3d4b66d43db7a5e3"" rel=""nofollow noreferrer"">https://gist.github.com/bagage/bdca3d4b66d43db7a5e3</a>.</p>

<p>Unfortunately, this script doesn't work. Any git command executed for the <code>sub</code> repo fails if launched from inside the <code>main</code> repo's <code>pre-receive</code> hook. When run by hand everything seems fine. For example executing <code>git log|show</code> result in <code>bad object HEAD</code> and <code>git branch</code> in <code>fatal: missing object 78f5da8ed1f83047d0f68fe17e5eaf86060038c3 for refs/heads/master</code>, even though running <code>git branch --contains 78f5da8ed1f83047d0f68fe17e5eaf86060038c3</code> by hand in <code>sub</code> repo works as it should: prints <code>* master</code>.</p>

<p>running <code>git fsck</code> for sub repo in hook (with debug varibles set) returns this:</p>

<pre><code>remote: 16:45:32.575940 trace.c:318             setup: git_dir: .
remote: 16:45:32.575961 trace.c:319             setup: git_common_dir: .
remote: 16:45:32.575967 trace.c:320             setup: worktree: (null)
remote: 16:45:32.575971 trace.c:321             setup: cwd: /var/www/git/sub.git
remote: 16:45:32.575976 trace.c:322             setup: prefix: (null)
remote: 16:45:32.575982 git.c:344               trace: built-in: git fsck
remote: error: HEAD: invalid sha1 pointer 78f5da8ed1f83047d0f68fe17e5eaf86060038c3
remote: error: refs/heads/master: invalid sha1 pointer 78f5da8ed1f83047d0f68fe17e5eaf86060038c3
remote: notice: No default references
remote: 16:45:32.580070 read-cache.c:1925       performance: 0.000004548 s: read cache ./index
remote: 16:45:32.580107 trace.c:420             performance: 0.004374272 s: git command: git fsck
remote: dangling commit 468626a3126e8139a08727ff3c1b25f37e23f957
</code></pre>

<p>I tried changing hook's owner and group to be the same as for other files, but it doesn't work. It kinda seems like some kind of security mechanism, but on the other hand I can <code>touch</code> files in the <code>sub</code> repo. From the fsck log above we can also see that <code>78f5da...</code> is present somewhere...</p>

<p>repro goes like this: create main and sub repo, push some initial commits to both, add sub as submodule to main, commit on sub without pushing, in main add sub (main should now reference the local commit of sub repo), try to push main repo(fails - expected), push sub repo, try to push main repo(fails again - now with those errors).</p>

<p>git version on server: 2.17.1</p>
","5","5555799","",""
"43493559","4271452","2017-04-19 10:49:05","0","592","<git><git-submodules>","How to add a git submodule from other repo and merge it with local folder","<p>I have a specific situation and i didn't found the answer on stack that matches it.<br>
I have a <code>root_project</code> which is base app directory, synchronized with it's remote repo.  </p>

<p>Now i have a folder in it, which is named <code>oscar</code>. I've previously downloaded zipped <a href=""https://github.com/django-oscar/django-oscar/tree/master/src/oscar"" rel=""nofollow noreferrer"" title=""navigate to django/python oscar git repo"">oscar</a> and copied it into my <code>root_project</code>, after i've customised it in places i needed.<br>
After that i have noticed that i get into troubles if i need to get updates from remote <a href=""https://github.com/django-oscar/django-oscar/tree/master/src/oscar"" rel=""nofollow noreferrer"" title=""navigate to django/python oscar git repo"">oscar</a> once those are made up.  </p>

<p>The basic idea is to use <code>git submodule</code> but really can't figure out how to adapt it to my necesities as i don't want to crash my project and repo on experimenting.</p>

<p>Also a specific part is that i need only <code>src/oscar</code> from <a href=""https://github.com/django-oscar/django-oscar/tree/master/src/oscar"" rel=""nofollow noreferrer"" title=""navigate to django/python oscar git repo"">oscar</a> repo, that is actually in my <code>root_project</code> and to make it possible to merge with my changes in local <code>oscar</code> folder, without loosing the things i've already done locally.  </p>

<p>I would appreciate any help and suggestions on how to use correctly <code>git submodule</code> in current circumstances, also if possible wanna see the steps i must do on achieving desired results</p>
","0","4271452","",""
"62164236","4253741","2020-06-03 02:26:29","3","684","<git><travis-ci><git-submodules>","Travis build failed due to git submodule repository not found","<p>I have an Android project with a main app (a git repo) and several modules (git repos cloned as submodule). Today it starts building fail due to submodule repository not found when it tried to build the newly PR code. Travis log looks like below</p>

<p><a href=""https://i.stack.imgur.com/5cBSk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5cBSk.png"" alt=""enter image description here""></a></p>

<p>The main app clones fine, just submodules which failed to clone. I tried to rebuild commits that succeeded last week, but they start building fail too.</p>
","0","4253741","",""
"24860096","44289","2014-07-21 07:51:47","0","55","<git><git-submodules>","Automatically changing git submodule URL when pushing","<p>There is a private host A that is the master source repository for a project that also uses submodules from the same host A.</p>

<p>I'd like to set up (semi-)automatic publishing of the sources from a branch on host A to a public host B (say, github), so that the submodule references would contain URL-s with host B instead of host A, so that public checkouts would work without manual intervention. Doing that with minimal surgery, as the submodule repositories all contain the same commits from a single master branch.</p>

<p>Are there any best practices or utilities for doing such surgery, without ""re-writing history"" if possible ?</p>
","3","44289","",""
"62179110","4075155","2020-06-03 17:33:14","1","119","<git><github><git-submodules>","Personal modifications to git submodule","<p>I have cloned a third-party git repo inside a repo managed by me. I haven't added it as a submodule and I have performed quite a few modifications in the code that probably won't be useful to anyone but myself so I dont want to pull request them.</p>

<p>When I try to push my repo, I get a warning saying that I have a nested repo that was not added as a submodule. I know I can delete the <code>.git</code> folder of the submodule and that would allow me to push the modifications on the files as if they were just normal files, but don't like the idea of doing it, especially because I am not the code's author. </p>

<p>How should I proceed in this situation? How can I get the changes i've performed on the submodule to be tracked by my repo?</p>

<p>Best,
Lucas.</p>
","0","4075155","",""
"62395805","12845821","2020-06-15 19:45:16","1","626","<git><azure-devops><git-submodules>","Are Repos in Azure DevOps not able to display git submodules?","<p>In GitHub, when I have repo that contains a git submodule, the submodule is a link to the referenced git repo. </p>

<p>Now I have Azure DevOps there is no link, when I click on the submodule at least it shows the commit ID. Am I missing something? or is the User Experience really that bad? </p>
","0","12845821","0","0"
"35909015","2420872","2016-03-10 06:18:07","2","279","<git><github><git-submodules>","using submodules in git for the timid","<p>I am working in a project which have few layers, each of them independent sub-projects. </p>

<p>It looks like this:</p>

<pre><code>[ Project C ] [ Project D ]  C and D uses B and therefore A
[ Project B ]                B has all source code in a and adds more
[ Project A ]                
</code></pre>

<p>Setting upstream to the parent repository and issuing <code>git pull upstream</code> works well to get the changes from the upper project.</p>

<p>However, how would I push a commit in the scenario of bug fix in C which affects the code shared with the parent layers? </p>

<p>If I issue <code>git pull project-D</code> from Project A, it will also merge all the source code added at that layer.</p>

<p>I also considered using <code>sub-trees</code> or <code>submodules</code>, but it still looks complicated.</p>
","0","2420872","0","0"
"25109339","890899","2014-08-03 21:31:52","6","785","<git><git-submodules>","Providing custom files for git submodule","<p>My project uses <a href=""https://github.com/Varying-Vagrant-Vagrants/VVV"">Varying-Vagrant-Vagrants</a> as a submodule in <code>/machine</code>.</p>

<p>VVV offers the possibility to configure it through custom files. My custom files are:</p>

<pre><code>machine/
├── Customfile
├── config
│   └── nginx-config
│       └── sites
│           └── mysite.conf
└── www
    └── mysite
        ├── vvv-hosts
        ├── vvv-init.sh
        └── wp-cli.yml
</code></pre>

<p>These paths are all ignored in VVV's <code>.gitignore</code> file.</p>

<p>What's a good way of providing these files in my project so that they sit in the same directory as vvv when the whole project is recursively cloned? <em>Hopefully without having to make a fork that tracks these files</em>.</p>

<p>Simply adding the submodule with these files present has the following result:</p>

<pre><code>$ git submodule add https://github.com/Varying-Vagrant-Vagrants/VVV.git machine/
'machine' already exists and is not a valid git repo
</code></pre>

<p>Thanks</p>
","3","890899","0","0"
"25118638","305189","2014-08-04 12:24:06","2","68","<git><dependencies><git-submodules><subproject>","git - Including submodules into the main repository","<p>It's been about 6 months I used submodules for subprojects developed alongside a main project with a dev team.</p>

<pre><code>- v-- Repository (developer(s)) --v

- Main project (dev team)
    - Sub project 1 (me)
    - Sub project 2 (me)
</code></pre>

<p>For several reasons now I'd like to consider my sub projects as regular files in the main repository.<br>
So modifications in one of the sub projects ...</p>

<ul>
<li>... should be committable from the main without having to commit and push from the sub project</li>
<li>... should still be committable from the sub project </li>
</ul>

<p>The question is <strong>How to disable these submodules</strong> ?<br>
I mean disable and not delete, as I need the files in the main repository</p>

<hr>

<p>Here is what I did:</p>

<ul>
<li>Deleted <code>.gitsubmodule</code></li>
<li>Deleted the submodule sections from <code>.git/config</code></li>
<li><code>rm --cached my_subprojects</code></li>
<li><code>git add/commit/push</code></li>
</ul>

<p>Now when I try to merge this, the subprojects seem still considered as submodules as I still see</p>

<pre><code>modified:   Sub project 1 (new commits)
modified:   Sub project 2 (new commits)
</code></pre>
","2","305189","0","0"
"25328670","3879","2014-08-15 14:51:28","1","426","<git><bash><git-submodules>","How do I get the SHA of HEAD in a specific git submodule?","<p>My project has multiple git submodules.  I need the SHA commit of one submodule in particular to present in the app.</p>

<p><code>git submodule foreach</code> accepts a command like <code>rev-parse</code>, but it loops over all submodules, which I don't want. <code>git submodule status MySubmoduleFolder</code> gives too much output.</p>
","1","3879","0","0"
"43957604","4932384","2017-05-13 20:17:42","1","607","<github><git-submodules><hugo>","Having issues with .gitmodules in getting my Hugo Site onto github pages","<p>So I managed to create a static webpage using the Hugo Framework and the After-Dark theme (<a href=""https://after-dark.habd.as"" rel=""nofollow noreferrer"">https://after-dark.habd.as</a>). I uploaded my site to my repository (<a href=""https://github.com/Lord-Left/Lord-Left.github.io"" rel=""nofollow noreferrer"">https://github.com/Lord-Left/Lord-Left.github.io</a>) but when I try to build the site, I get the following error:</p>

<blockquote>
  <p>Your site is having problems building: The submodule public was not
  properly initialized with a .gitmodules file. For more information,
  see
  <a href=""https://help.github.com/articles/page-build-failed-missing-submodule/"" rel=""nofollow noreferrer"">https://help.github.com/articles/page-build-failed-missing-submodule/</a>.</p>
</blockquote>

<p>This is the link to my submodule file (located in root). I created it by tinkering with it, is it correct? </p>

<p><a href=""https://github.com/Lord-Left/Lord-Left.github.io/blob/master/.gitmodules"" rel=""nofollow noreferrer"">https://github.com/Lord-Left/Lord-Left.github.io/blob/master/.gitmodules</a></p>
","0","4932384","0","0"
"35978137","1908763","2016-03-14 01:29:48","4","2315","<git><git-submodules>","Is it possible to have two different submodules depending on git branch?","<p>My company (<strong>consultancy</strong>) is developing for another company (<strong>customer</strong>). The two main engineers on the project for the <strong>consultancy</strong> (lead iOS and lead Android) have login capabilities for the <strong>customers</strong> git for maintenance of the source code. Besides that we (<strong>consultancy</strong>) have an internal git setup for our developers to use.</p>

<p>To manage the internal work done it is committed to the internal git and tested and merged by one of the leads to the <strong>customers</strong> git to release source code to the client.</p>

<p>One project we are working on requires the use of a library which is submodule, managed by another consultancy for the <strong>customer</strong>. Our two main developers have access to this submodule as we have access to the <strong>customers</strong> git repo.</p>

<p>Is it possible to create a local version of the submodule on our local git for access by our other developers <strong>and</strong> maintain the git-submodule address on the external git repo?</p>
","3","1908763","",""
"7140321","236564","2011-08-21 18:48:05","6","1274","<python><git><git-submodules><buildout><git-subtree>","How to structure a python projects with shared sub apps using git and buidout without symbolic links","<p>I have multiple <strong>projects</strong> that shares child <strong>apps</strong> with other <strong>projects</strong>.
When working within the <strong>project</strong> directory I want to be able to make changes to the <strong>app</strong>, update it, and pull those updates into the second <strong>project</strong>.</p>

<p>Requirement:</p>

<ul>
<li>No use of <strong><em>symbolic links</em></strong> (my IDE's debugger doesn't work well with them)</li>
<li>No compiling/rerun a script. I would like to make changes to the <strong>app</strong> without having to rerun a script/buildout. </li>
<li>Apps must be within the project folder.</li>
</ul>

<p>Here's the structure:</p>

<pre><code>app_one (git repo)
  |-- app_one (actual app uses by projects)
  |   +-- models.py
  |-- README.md
  +-- setup.py

project_one  (git repo)
  |-- project_one
  |   |-- apps
  |   |   |-- app_one
  |   |   |   +-- models.py
  |   |   | -- app_two
  |-- setup.cfg
  +-- setup.py

project_two  (git repo)
  |-- project_two
  |   |-- apps
  |   |   |-- app_one (same app as project_one)
  |   |   |   +-- models.py
  |   |   | -- app_two
  |-- setup.cfg
  +-- setup.py
</code></pre>

<p>Currently I'm using git-submodules for this; the downside is there is no way to link to a subfolder of a repo. I recently read about subtree, would this work better?</p>

<p>Ideally I would like to use <strong>buildout</strong>, but I haven't found a good way to accomplish this without the use of symbolic links. If there's a way to to do this please let me know. </p>

<p>Any suggestions would be greatly appreciated.</p>
","0","236564","0","0"
"7150424","886669","2011-08-22 16:19:37","10","11836","<git><git-submodules>","Is it possible to have a git repo inside another git repo","<p>I have a django project managed with git. I am git pushing it to my host. Now, I want to be able to push just one of the directories (inc. all sub dirs) to another git repo. How is it possible, if it is possible at all?</p>

<p>Edit: So I want that directory to be a git repo itself.</p>
","0","886669","0","0"
"7151906","886669","2011-08-22 18:33:20","2","183","<git><git-submodules>","what difference does --bare switch make when initing a git repo?","<p>This question is somewhat related to this question: <a href=""https://stackoverflow.com/q/7150424/886669"">Is it possible to have a git repo inside another git repo</a></p>

<p>Here is the summary:</p>

<p>I had a git repo, which I pushed to my web host. I seperated a subdirectory of that repo, and added that subdirectory back as submodule. Now I am going to remove that subdirectory from my web host, create an empty git repository there, and push my submodule there. So, I was wondering what does --bare switch do, and do I need it.</p>

<p>As a side note, I am git beginner.</p>
","1","886669","0","0"
"62645339","10680282","2020-06-29 19:23:39","0","21","<git><github><heroku><git-submodules>","What is the best way to include private github submodule repos in Heroku?","<p>When deploying to Heroku using:</p>
<pre><code>git push heroku master 
</code></pre>
<p>It will successfully find the public submodules but will not be able to clone the private ones.
What is the best way to include private submodules?</p>
","2","10680282","",""
"36032209","6070724","2016-03-16 09:56:59","6","5231","<git><android-studio><git-submodules>","How to update git submodules in Android Studio?","<p>I'm trying to build this project at ""<a href=""https://github.com/jonasoreland/runnerup"" rel=""noreferrer"">https://github.com/jonasoreland/runnerup</a>"" on Android Studio. But when I'm going to compile it I received this error:</p>

<p><a href=""https://i.stack.imgur.com/zXzDS.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/zXzDS.png"" alt=""enter image description here""></a></p>

<p>I think it's because I've to update git submodules like said on a page project where is specified to Run the following command to get all submodules:</p>

<pre><code>git submodule init &amp;&amp; git submodule update
</code></pre>

<p>But I'm new with git and I don't know how to do this.
I ask you if you can explain me step by step how to do this.</p>
","1","6070724","0","0"
"25390540","747654","2014-08-19 18:31:12","1","309","<git><git-submodules><git-rerere>","How to use git rerere (or similar) for automatic resolution of ""Submodule merge conflict""s?","<p>I'm trying to rebase a branch B over a branch A, but one of the newest commits in A deletes one folder replacing it with a git submodule.</p>

<p>After running <code>git rebase A</code>, git stops at <em>every single</em> commit of B (about 200) asking me to resolve conflicts. Then I run <code>git mergetool</code> and I get:</p>

<pre><code>Submodule merge conflict for 'isolate':
  {local}: submodule commit 0b28bb5dc58c86f38729a6f06c235bc564033556
  {remote}: deleted
Use (l)ocal or (r)emote, or (a)bort?
</code></pre>

<p>I tried to enable git rerere by running <code>git config --global rerere.enabled 1</code> and I did call <code>git rerere</code> after having ""resolved"" (by just typing <kbd>L</kbd>).</p>

<p>The problem is: by looking in the <code>.git/rr-cache/</code> folder I can see that it has recorded one resolution, but it is about the only time (in over 20 resolutions) where I did have to really resolve a conflict.</p>

<p>Maybe rerere doesn't record this type of resolution? If that's the case, how could I do it?</p>
","0","747654","",""
"52154055","7098279","2018-09-03 17:20:28","1","2546","<python-3.x><git-submodules><python-module>","python git-submodule importing from other git-submodule","<p>Using Python 3.6
I did create multiple modules (like DBmanager or jsonParser etc which I use across multiple different python projects)</p>

<p>For simplicity: I have created a module, lets call it 'gitmodule03'.
Internally it is supposed to be using yet another module from github 'gitmodule01' for parsing data. I have added 'gitmodule01' to 'gitmodule03' by</p>

<pre><code>'git submodule add http://git/gitmodule01'
</code></pre>

<p>Separatenly, I am developing my 'MainPackage' which will use directly 'gitmodule03' and 'gitmodule01' (among others). I've added them all to my main Program with </p>

<pre><code>'git submodule add http://git/gitmodule01'
'git submodule add http://git/gitmodule02'
'git submodule add http://git/gitmodule03'
</code></pre>

<p>and my package looks like this:</p>

<pre><code>.
└── MainPackage
    ├── modules
    │   ├── __init__.py
    │   ├── gitmodule01
    │   │   ├── __init__.py
    │   │   └── mymodule01.py
    │   ├── gitmodule02
    │   │   ├── __init__.py
    │   │   └── mymodule02.py
    │   ├── gitmodule03
    │   │   ├── __init__.py
    │   │   ├── mymodule03.py
    │   │   └── gitmodule01
    │   │       └── 
    │   └── mymodule04.py
    └── myMainProgram.py
</code></pre>

<p><strong>At this moment 'gitmodule03' is NOT importing 'gitmodule01' internally</strong>. I was hoping that importing it in main myMainProgram.py would propagate across submodules (which is not the case)</p>

<p>If my <strong>myMainProgram.py</strong> imports them all:</p>

<pre><code>from modules.gitmodule01.mymodule01 import my01class
from modules.gitmodule02.mymodule02 import my02class
from modules.gitmodule03.mymodule03 import my03class
</code></pre>

<p>my03class() # will work</p>

<p>my02class() # is internally using 'my03class()' and will error out:</p>

<p><strong><em>NameError: name 'my03class' is not defined</em></strong></p>

<p>How can I design those so they can work independently as well as within bigger package, in clean, pythonic way ?</p>

<p><em>I would like to have those modules idependent so they won't have to use any hard coded <strong>sys.path()</em></strong> methods</p>

<p><strong>Edit Test Cases:</strong></p>

<p>1.</p>

<pre><code>myMainProgram.py
sys.path.insert(0, ""modules/gitmodule03/gitmodule01/"")
from mymodule01 import my01class
from modules.gitmodule03.mymodule03 import my03class
my01class() #works
my03class() # NameError: name 'my01class' is not defined
</code></pre>

<p>2.</p>

<pre><code>myMainProgram.py
from modules.gitmodule03.gitmodule01.mymodule01 import my01class
from modules.gitmodule03.mymodule03 import my03class
my01class() #works
my03class() # NameError: name 'my01class' is not defined
</code></pre>

<p>3.</p>

<pre><code>mymodule03.py
from gitmodule01.mymodule01 import my01class
my01class() #works

myMainProgram.py
from modules.gitmodule01.mymodule01 import my01class
from modules.gitmodule03.mymodule03 import my03class
my03class() # ModuleNotFoundError: No module named 'gitmodule01'
</code></pre>

<p>4.</p>

<pre><code>mymodule03.py
from .gitmodule01.mymodule01 import my01class
my01class() # ModuleNotFoundError: No module named '__main__.gitmodule01'; '__main__' is not a package

myMainProgram.py
from modules.gitmodule03.mymodule03 import my03class
my03class() # works
</code></pre>

<p>With Test Case #4 It looks like i could make myMainProgram.py work but i would have to break module on its own.</p>
","6","7098279","",""
"7446681","949116","2011-09-16 15:04:57","15","6231","<git><git-submodules>","How do I init/update a git submodule in a working tree after pushing to a bare working directory?","<p>I have a git repository with an attached working tree that I'm pushing to a bare repo on a remote.
The repository includes a submodule.</p>

<p><strong>At the remote end</strong>: I check out the repo to a working tree <code>git checkout -f</code> having set <code>GIT-DIR</code> and <code>GIT-WORK-TREE</code> env vars.</p>

<p>In the working tree I now see all the expected files and an empty directory for the submodule ('MySubmodule').</p>

<p>I then do:</p>

<pre><code>git submodule init
git submodule update
</code></pre>

<p>This errors with a message like:</p>

<pre><code>working tree '../../workTree/' already exists
Clone of 'git@github.com:user/MySubmodule.git' into submodule path 'MySubmodule' failed
</code></pre>

<p>The empty submodule directory has now also 'vanished' from the working tree...</p>

<p>I'm not sure where I'm going wrong with this, basically I just want to check out the submodule files as I would with 'git submodule update'.</p>
","3","949116","0","0"
"52179463","8257877","2018-09-05 07:29:29","21","16169","<git><version-control><git-submodules>","How to exclude a specific git submodule from update?","<p>I have list of submodules in .gitmodules.
I want to download a specific submodule i.e grpc only if there is some option enabled as true in config file. 
Since grpc is not required at times for my build.
All submodules are in third-party directory.
So .gitmodules is like:</p>

<pre><code>[submodule ""third-party/libzip""]
        path = third-party/libzip
        url = https://github.com/nih-at/libzip.git
[submodule ""third-party/sqlite""]
    path = third-party/sqlite
    url = https://github.com/mackyle/sqlite.git
    branch = sqlite-3.23.1
[submodule ""third-party/grpc""]
    path = third-party/grpc
    url = https://github.com/grpc/grpc.git
</code></pre>

<p>Also is there a way to exclude the submodule specifically while executing command: </p>

<pre><code>git submodule update --init --recursive
</code></pre>

<p>I would like to exclude grpc and submodules in grpc while submodule update. Something like:</p>

<pre><code>git submodule update --init --recursive ""exclude third-party/grpc""
</code></pre>
","2","8257877","0","0"
"36112439","1574104","2016-03-20 10:09:24","0","32","<git><git-submodules>","git submodules using .gitmodules - failing to to take the latest code from master","<p>using this:
<code>git pull &amp;&amp; git submodule init &amp;&amp; git submodule update &amp;&amp; git submodule status</code></p>

<p><code>.gitmodules</code></p>

<pre><code>[submodule ""Backend""]
    path = Backend
    url = git@github.com:OwnHealthIL/Backend.git
    branch = master
    checkout = master
</code></pre>

<p>for some reason, the git submodule checks out to an old tag. </p>

<p>how can I tell git submodule to pull the lastest HEAD ?</p>
","3","1574104","",""
"7459848","152796","2011-09-18 06:23:14","1","2294","<git><git-submodules>","Library and example circular dependency in git","<p>I'm making a js library and using git for version control. Say it's located at <code>mylib/lib.js</code>. Inside my library directory, I have a submodule for an example program that I'm developing alongside that library, say <code>mylib/example/example.js</code>. Now, the question is: how should the example program access the library?</p>

<p>If I use a relative path to go up and grab the js file (like <code>../lib.js</code>), that means that the example isn't standalone; the only way to run it would be to clone the library. Then there's really no point to have it be a submodule at all. </p>

<p>If I copy <code>lib.js</code> into the example directory, then I'm violating DRY and I'd have to copy it every time it gets updated (which is going to be a lot).</p>

<p>Is there a better solution to this problem?</p>
","0","152796","",""
"7459353","857514","2011-09-18 03:45:15","0","251","<git><branch><git-branch><git-submodules>","""git submodules update --recursive"" doesn't seem to go into sub-submodules","<p>I have a project that's consisted of two branches: STABLE and DEVELOPMENT. As the names suggested, DEVELOPMENT is the ever-ongoing developing branch and STABLE is the stable-but-not-so-new branch; hence the versions of submodules (and sub-submodules) in DEVELOPMENT are often ahead of STABLE.</p>

<p>Now, whenever I need to checkout from DEVELOPMENT to STABLE, <strong>git submodules update --recursive</strong> will not get into these ""sub-submodules"" at all and their directory will simply become empty, while all the submodules will be properly shunted back to an older version if needed. I have no idea how to get this right and would appreciate some helps.</p>
","3","857514","",""
"25661255","2571840","2014-09-04 08:58:53","2","55","<git><git-submodules>","Add a directory which previously had its own git repository","<p>I had Git a project with other Git project inside. 
I finally decided to remove the second one, so I removed the <code>.git</code> directory:</p>

<pre><code>rm -rf /pathToProject/pathToProjectInsideProject/.git
</code></pre>

<p>But now, when I do <code>git status</code> I can't see the changes on the <code>pathToProject/pathToProjectInsideProject/</code> directory.</p>

<p>I've try with: </p>

<pre><code>git add pathToProjectInsideProject
</code></pre>

<p>but nothing changes. Any idea of how to include this directory to the main git repository?</p>

<p><strong>Edit:</strong></p>

<p>When I try to add a single file with <code>force</code> (<code>git add --force pathToProjectInsideProject/file.php</code>) I'm getting this error:</p>

<blockquote>
  <p>pathToProjectInsideProject/file.php is in submodule pathToProjectInsideProject</p>
</blockquote>

<p><strong>Edit2:</strong></p>

<p>This question is duplicate: <a href=""https://stackoverflow.com/questions/16574625/how-do-i-add-files-in-git-to-the-path-of-a-former-submodule"">How do I add files in Git to the path of a former submodule?</a>. </p>

<p>The solution is:</p>

<pre><code>git rm --cached pathToProjectInsideProject
git add pathToProjectInsideProject
</code></pre>
","10","2571840","",""
"52224200","903780","2018-09-07 14:05:00","6","3989","<git><git-submodules>","Convert a git submodule to a regular directory and preserve the history in the main tree?","<p>I have a project that consists of many submodules. However, some of these submodules in hindsight shouldn't be submodules, as they aren't meant or would ever be used in another project and I'm occasionally transferring code between them. This project doubled as an experiment in submodules so I got a little crazy with it.</p>

<p>I was wondering if there was a way to convert the submodules to regular directories, maintaining the history of changes but rewriting the main project's history so that they're treated as regular directories.</p>

<p>I've seen stuff about subtree merging but I was hoping for a way to rewrite the commits so the file paths are prefixed with that of the submodule.</p>
","1","903780","0","0"
"36175383","473368","2016-03-23 10:18:52","2","365","<git><github><git-submodules><github-pages><git-subtree>","Can a github repo be made to always refer to the latest version of its submodule repos?","<p>I'm making a webapp that does version control of files using git and it has the option of being hosted on GitHub Pages with some missing features (features not supported by a git-only backend).</p>

<p>Now the ""app"" itself is separated from the users content, the user content is version controlled but the app is not (or at least doesn't need to be for the functionality of the app itself), but both need to be uploaded to github pages and to isolate the content's version control, and to have different permissions for the app vs content, I host the app itself in gh-pages and the content as a git <strong>submodule</strong> inside the gh-pages repo.</p>

<p>This works, the app/site is built and gets exposed on <code>username.github.io/sitename/</code> with everything accessible, except there is a catch.</p>

<p>The catch is that for some reason <strong>the submodule content repo is referred to at a specific commit</strong> instead of just the latest version of the repo, which means I can't just update the content repo and have everything work but also have to update the app repo to refer to the latest version of the submodule, on <em>every content repo commit</em>.</p>

<p>Which gets a bit tedious since I almost never actually have to update the app repo unless there is a new version of the app but I update the content repo daily, as well as the fact that the content repo should be editable by many people but the app repo by few.</p>

<p>So my question is:</p>

<ul>
<li>How can I define a submodule to always refer to the latest commit of a repo?</li>
<li>How can I trigger a build of the site by only updating the submodule repo?</li>
<li>How can the gh-pages repo always reflect the latest version of its submodules, so that the gh-pages site is always serving the latest content?</li>
</ul>

<hr>

<ul>
<li>Example repos:

<ul>
<li><a href=""https://github.com/01AutoMonkey/app"" rel=""nofollow"">https://github.com/01AutoMonkey/app</a></li>
<li><a href=""https://github.com/01AutoMonkey/app-content"" rel=""nofollow"">https://github.com/01AutoMonkey/app-content</a></li>
<li>Combined running at: <a href=""http://01automonkey.github.io/app/"" rel=""nofollow"">http://01automonkey.github.io/app/</a></li>
</ul></li>
<li>Git Submodules:

<ul>
<li><a href=""https://git-scm.com/docs/git-submodule"" rel=""nofollow"">https://git-scm.com/docs/git-submodule</a></li>
<li><a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow"">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></li>
<li><a href=""https://help.github.com/articles/using-submodules-with-pages/"" rel=""nofollow"">https://help.github.com/articles/using-submodules-with-pages/</a></li>
</ul></li>
</ul>

<h2>How I create the submodule</h2>

<pre><code># Create app master + app-content master, then:
git init
git remote add origin https://github.com/01AutoMonkey/app.git
git submodule add https://github.com/01AutoMonkey/app-content ./wiki
cd wiki
git remote add origin https://github.com/01AutoMonkey/app-content.git
# And then push to both repos and create a gh-pages branch.
# The site is now running but if I update app-content the update isn't reflected on the site until I refer to the new commit in the app repo.
</code></pre>
","0","473368","0","0"
"52242830","655813","2018-09-09 08:47:00","1","809","<python><git><git-submodules>","Get the Git hash of the submodules using Python (Preferred pygit2)","<p>I need to get the exact version (git hash) of all submodules of many git projects. In git command line I just type: <code>git submodule</code> and get what I want. I can't figure out how to access that information from Python. I'm currently using Pygit2, but I was only able to get list of submodules using <code>repo.listall_submodules()</code> and to lookup the name/url using <code>repo.lookup_submodule(submodule)</code>. I'm still missing the githash of the submodules.</p>
","2","655813","",""
"52253738","4858640","2018-09-10 08:22:14","0","484","<windows><git><git-submodules>","git clone --recurse-submodules fails silently","<p>I have added a submodule to one of my repositories hosted on GitLab. In my browser GitLab displays the correct submodule@commit entry and the <code>.gitmodules</code> also looks okay. However, if I clone the repository using <code>--recurse-submodules</code>, the folder which should contain the submodule is empty.</p>

<p>I realize that this is impossible to diagnose without further information (which I cannot provide) but all I'd like to know here is how to go about debugging this myself since git fails to provide any information on what's gone wrong.</p>

<p>EDIT: I believe I've figured it out. I'm on Windows (which I forgot to tag, sorry about that) and my .gitmodules contained submodule paths using escaped backslashes (which I thought was correct), manually changing those to forward slashes fixed the problem.</p>
","2","4858640","",""
"36196548","6108490","2016-03-24 09:11:17","2","1204","<git><git-submodules><githooks>","Cannot trigger post-commit git hook on git submodule","<p>We use a git module with several submodules. In order to make it more convenient for daily use, I wanted to have a post-commit hook which automatically adds the submodule to the git index in the main/super/root git repo/clone/module such as <code>git add mychangedsubmodulename</code> so as to prepare a commit ready to update the submodule's commit reference in the main repo and probably more ideas to come.</p>

<p>The .git folder is located inside the main module root folder and seems to contain as well the submodule related stuff as a result of having cloned the main repo with <code>--recursive</code> option. My version of git is <code>git version 2.6.4 (Apple Git-63)</code>.</p>

<p>I could easily create a post-commit hook in the main repo but it does not fire from commits within a submodule, which I consider correct and appropriate so far but also might be a clue for a possible workaround.</p>

<p>I have tried to define several post-commit hook files in different locations also following the <a href=""https://stackoverflow.com/questions/10848191/git-submodule-commit-hooks"">question 10848191</a> without any success.</p>

<p>How can I achieve to automatically modify the main module on commits in a submodule?</p>

<p><strong>Update:</strong> After the submodule post-commit hook now works sometimes, I managed to cd into the main repository and successfully invoke git by cleaning the environment variables.</p>

<pre><code># clear git environment or git would confuse main and sub repos when crossing boundary by only changing pwd
while read variable; do
    unset $variable
done &lt; &lt;(env | grep ""^GIT_"" | sed 's/=.*//g')
</code></pre>

<p>However, the original question was as how to fire the submodule hook. This seems to be working only sometimes, still.</p>
","0","6108490","0","0"
"63117662","1135950","2020-07-27 14:38:32","1","24","<git><git-submodules><git-subtree>","git subtree of repository that uses git submodules","<p>Is it possible or recommended to add as a git subtree, a project that has .gitmodule dependencies(It was meant to be used with git submodule)?</p>
<p>If yes, is there a command to download recursively when adding git subtree?</p>
<p>This is different than the git submodule project nested in another git  submodule project because it's a git submodule project nested in a git subtree project.</p>
","3","1135950","",""
"25925414","763744","2014-09-19 02:23:21","5","1539","<git><git-submodules>","how to prevent unpushed submodules in git","<p>is there some hook script in git that will detect if the submodule source tree is available whenever you push to the main project? Intend to avoid people pushing a master project that has unpushed submodules</p>
","0","763744","0","0"
"7773753","996178","2011-10-14 21:26:51","0","186","<git><rubygems><git-submodules>","Is this an appropriate scenario to use git submodules?","<p>I'm fairly new to both Git and Ruby, but I'm wondering if this situation is an appropriate time to use Git submodules, or if I should use a different approach.</p>

<p>I'm working on a Sinatra project. There's a gem I would like to use with the code hosted on Github. I need to make some changes to the gem for my project. (Basically, the gem is for working with a certain file format, and the source I'm using doesn't conform to certain standards for this format. I think it would be easier to adjust the gem rather than try to fix the files). I don't think the changes I'm making would be of any use to most other people, so I wasn't planning on forking the project.</p>

<p>What I was thinking of doing was adding a submodule to my project for the gem project, and then making my changes in there. I don't plan on ever needing to push any of these changes to a separate repository, but I thought it would be nice to be able to pull any changes the authors of the gem make to merge in with my changes if they add any additional functionality.</p>

<p>Does this seem appropriate?</p>
","0","996178","",""
"44490667","2688699","2017-06-12 02:36:24","1","183","<node.js><git-submodules>","Using git submodule causing npm package size too big when publish","<p><code>git submodule add</code> will add the whole project as submodule including all their stuff, tests, etc.. which will in turn causing the publish package size too big.</p>

<p>Is there any way to overcome this?</p>
","2","2688699","",""
"63134584","14009637","2020-07-28 12:52:16","-2","1985","<git><ansible><git-submodules><ansible-awx>","How in Ansible Tower / AWX can I upload a files from another git repository to a role (/files)?","<p>tried 2 ways:</p>
<ul>
<li><p>use submodules, but how do I do checkout?</p>
</li>
<li><p>use git module ansible, but credentials for Source Control and Machine this is a different access. And user for ssh Machine does not have access to the git repository.</p>
</li>
</ul>
","5","14009637","",""
"7797029","372405","2011-10-17 16:58:46","1","199","<git><build><git-submodules>","git submodules as part of a build","<p>I am trying to setup a git repository with a submodule repository inside it.  Lets call the 2 repos: Super &amp; Sub for this example.  So I initialized the Super repo then did a <code>git submodule add</code> of the 2nd repo.  I committed the <code>.gitmodules</code> file with the Super repo so that when you do a <code>git clone --recursive</code> it pulls the submodule down along w/ the super.  Currently our urls are formatted like this:</p>

<pre><code>ssh://user.name@serverUrl/path/to/repo.git
</code></pre>

<p>Now lets say I have 3 users: <code>user.a</code>, <code>user.b</code> and <code>user.c</code>.  <code>user.a</code> adds the submodule to the super repo.  <code>user.b</code> is the build server.  when <code>user.a</code> adds the submodule then <code>user.b</code> should get the submodule as <code>user.b</code> (NOT <code>user.a</code>).  The same goes for <code>user.c</code>  when he clones super and then does a commit, the log should reflect that it was committed by <code>user.c</code> and not as <code>user.a</code> (who added the submodule).  I suspect there is a way to specify the url of the submodule WITHOUT including the user.name as part of the url.  Which leads me to my question.  How can I properly setup my git repository such that the url does not include the username?  Presumably this involved copying some keys around, I'm just curious what is the proper way to do this.</p>

<p>many thanks
Ben</p>
","1","372405","0","0"
"36257847","2398143","2016-03-28 07:23:49","0","575","<git><github><git-submodules>","Do git tags work recursively on submodules?","<p>I have created a submodule in  my git repository (<code>repo1</code>) by the following command <code>git submodule add https://github.com/user/mod1</code>. So after adding this command, my repo now contains the sudmodule <code>mod1</code>. </p>

<p>Now I am applying a tag to my repository <code>repo</code> using command - <code>git tag -a baseline -m ""tagging baseline code</code>. </p>

<p>I am not sure if this tag will also be applied to the submodule <code>mod1</code>? When I create a new clone recursively and with specific tag, will I get all the code (including submodule) with the tag I am specifying? </p>
","3","2398143","",""
"52334252","1979665","2018-09-14 14:41:43","1","1076","<git><github><git-submodules>","git submodule update --recursive --remote","<p>According to <a href=""https://stackoverflow.com/a/19621245/1979665"">this SO answer</a>:</p>

<blockquote>
  <p>git submodule update --remote will only update the branch registered
  in the .gitmodule (...)</p>
  
  <p>...</p>
  
  <p>(...) you still have to go back to the parent repo, add and commit the new
  submodule SHA1 reference.</p>
</blockquote>

<p>And according to <a href=""https://stackoverflow.com/a/34864099/1979665"">this other</a>:</p>

<blockquote>
  <blockquote>
    <p>Or do I have to tell my colleagues to pay more attention and do a git
    submodule update from time to time?</p>
  </blockquote>
  
  <p>Ideally this is what they do. If they don't, you could try to add a
  git-hook which runs a git submodule update after they pulled.</p>
</blockquote>

<p>I am working on my own from two different machines. My repo has a submodule in it.</p>

<p>When I need to upodate it normally I do <code>git submodule update --recursive --remote</code>. And then, I do:</p>

<pre><code>git add .
git commit -m ""submodule updated""
git push origin master
</code></pre>

<p>The problem is, from the other machine, I pull the changes from the remote <code>git pull origin master</code>, then I update the submodule with the same code (<code>git submodule update --recursive --remote</code>), but then I seem I have to still add commit and push those changes again to the remote.</p>

<p>Is this the correct way to proceed?</p>

<p>If so, why should I have to push the updates to submodule twice to the remote?</p>
","0","1979665","",""
"7813030","90826","2011-10-18 20:06:55","181","70939","<git><github><dependencies><git-submodules><githooks>","How can I have linked dependencies in a git repo?","<p>In my scripts, I often use libraries (mine or others') that have their own repos. I don't want to duplicate those in my repo and get stuck with updating them every time a new version comes out. 
However, when somebody clones the repo, it should still work locally and not have broken links.</p>

<p>Any ideas about what I could do?</p>
","0","90826","0","0"
"7816023","1000337","2011-10-19 02:48:39","7","780","<git><git-submodules>","Why does `git submodule` require fetching from a remote repository everytime?","<p>Judging just from the number of results for ""git submodule"" here on SO alone, this is clearly a commonly asked and easily confused topic, so I will try to be as precise as possible.</p>

<p>Forgetting <em>everything</em> about updating/committing/branching submodules (which I understand greatly complicates things), why do submodules get emptied each time I change branches? From my current understanding, <strong>this makes branches expensive</strong>; what if I'm at the airport, and can't easily/cheaply connect? Am I doing something wrong, or there's some development philosophy that I'm not yet aware of?</p>

<p>Examples never hurt:</p>

<pre><code>## make a new project
$&gt; git --version
git version 1.7.5.4
$&gt; mkdir new_proj; cd new_proj; git init
$&gt; touch new_file_1.txt; touch new_file_2.txt
$&gt; git add . &amp;&amp; git commit -m ""first commit""

## move into some development branch
$&gt; git checkout -b cool_feature
$&gt; &lt;hack hack hack&gt;
# in the middle, I add a submodule
$&gt; git submodule add https://github.com/some/other_proj.git other_proj
$&gt; git submodule update --init
$&gt; ls -lR
new_file_1.txt
new_file_2.txt
other_proj
other_proj/that_file
other_proj/another_file

## I have to go back to master to do some work
$&gt; git checkout master
# Why is other_proj still around?
$&gt; git status
Untracked: other_proj
## Fine, I'll remove it, since I want a clean working copy, because I need to do some work and commits
$&gt; git clean -f -d
$&gt; &lt;work work work&gt;

## Now I'm ready to go back to cool_feature, but my submodules are empty!
$&gt; git checkout cool_feature
</code></pre>

<p>At this point, I'm supposed to <code>git submodule update</code>, but what if I can't/it's expensive (e.g. it's remote, and I don't have internet access/it's slow).</p>

<p>The best workaround I've come up with is to clone all the submodules that I care about into a completely separate location, and then submodule from my local clones; this preserves the cheapness of submodules. Of course, this adds another layer of complexity when you're working on a team. :/</p>
","0","1000337","0","0"
"52345460","1979665","2018-09-15 14:07:24","0","2195","<git><npm><git-submodules>","Remove git submodule from a specific branch","<p>I am in the process of porting my JS application to modern E6 modules. My application is stored in a git repo. Within the repo there's a submodule.</p>

<p>I created another branch to do what I need to do, but I would like to remove the submodule in this specific branch.</p>

<p>The reason is that I have to <code>npm install</code> the app within the submodule as a package rather than using it in ""the classical submodule"" way as I do in master branch.</p>

<p>Reading <a href=""https://stackoverflow.com/a/29849303/1979665"">this answer</a> I thought that would be as simple as checkout to the new branch, modify the .gitmodules file excluding the submodule and deleting the submodule folder itself.</p>

<p>However, when I do this, I checkout to master and it seems the submodule is missing from there as well, and this would be a tremendous error. I didn't stage the changes before checking out if this is important.</p>

<p>So, how do I get rid of the submodule in the new branch to start working in it, without loosing it in my master branch?</p>

<p><strong>EDIT 1</strong></p>

<p>I am trying again after phd comments. I am in the branch where I need to remove the gitmodule. I edited the <code>.gitmodules</code> file to remove the submodule i need to remove, and then tried to remove the submodule with <code>git rm -r &lt;my_submodule&gt;</code> but I get <code>fatal: Please, stage your changes to .gitmodules or stash them to proceed</code> message.</p>

<p>So I stashed my changes and removed the submodule. Then I was able to checkout to the master branch, and the submodule folder was there (as I needed).</p>

<p>Also, the master <code>.gitmodules</code> still showed the submodule I removed from the other branch, which was my aim.</p>

<p>So now I have a master branch with the submodule, and the ""dev"" branch without it and I can install with npm here. So I guess I messed up something and the <a href=""https://stackoverflow.com/a/29849303/1979665"">asnwer I linked</a> was right. Will accept phd answer as it was correct.</p>

<p>Finally, as I have git version 2.7.4 and I cannot run <code>git checkout --recurse-submodules master</code>, I added <a href=""https://launchpad.net/~git-core/+archive/ubuntu/ppa"" rel=""nofollow noreferrer"">this GIT PPA</a> (I am using Ubuntu) as the version in the OS package manager was older, upgraded git to 2.19, run the command and everything worked just fine.</p>

<p>The command I used are:</p>

<pre><code>sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
apt-get install --only-upgrade git
</code></pre>

<p><strong>EDIT 2</strong></p>

<p>Strangely, I just noticed when I switch to the ""dev"" branch that the folder of the submodule I removed is still there, although the .gitmodules is not showing the submodule in the list. Also, during checkout to this branch I received the message <code>warning: unable to rmdir 'ol/ol-layerswitcher': Directory not empty</code>.</p>

<p>I guess that now this folder is not treated as a submodule anymore, but it is still there. How could I get rid of it from the dev branch and not from the master branch (which was my original question) if it is possible?</p>

<p><strong>FINAL ANSWER</strong></p>

<p>Ok answered myself. I just needed to remove the floder without <code>git rm</code>. Now the:</p>

<ol>
<li>the dev branch has nothing to commit</li>
<li>the submodule folder is not there</li>
<li>when I switch to it, I don't receive any message</li>
</ol>

<p><strong>FINAL ANSWER NOT TRUE!</strong></p>

<p>Just wanted to add that deleting the files made them disappear also in the master branch. The only thing I could do apparently is living with the submodules folder in the devb ranch but just ""ignoring"" them with the <code>.gitignore</code> in order not to push them to my remote dev branch.</p>
","0","1979665","0","0"
"63162924","1732418","2020-07-29 21:46:18","4","266","<git><git-submodules><git-stash>","Is it possible to make git submodule update to autostash if there are uncommitted changes?","<p>assuming that I have a git project that has been changed locally and remotely, so it is obsolete.</p>
<p>If I want to upgrade to the latest remote code without destroying my local work. Git can do it automatically using:</p>
<pre><code>git pull --rebase --autostash
</code></pre>
<p>Unfortunately it only works for root module, for git submodule. I have tried the following options:</p>
<pre class=""lang-sh prettyprint-override""><code>git submodule foreach git fetch
git submodule update --init --recursive
# git report error:
# Cannot rebase: Your index contains uncommitted changes.
# Please commit or stash them

git submodule foreach git fetch
git submodule update --init --recursive --autostash
# git report syntax error

git submodule foreach git fetch
git submodule update --init --recursive --force
# git destroy local changes

</code></pre>
<p>What is the correct way to make submodule to behave similarly to root module?</p>
","0","1732418","",""
"36298314","4187540","2016-03-30 01:59:47","1","56","<ios><git><git-submodules>","How to handle modified .xcodeproj files in a git submodule","<p>This is more of a process question, but here goes:</p>

<p>I have an iOS project with custom build settings. My repository is stored in Git. I'd like to use submodules to include a couple of open source libraries (AlamoFire and SwiftyJson, as an example). </p>

<p>However, I've found that because of the custom build settings, I have to modify the build settings in the .xcodeproj of the submodules. This causes problems because I can't figure out how to sync this with other developers on my team.</p>

<p>The one solution I have thought of is to make a second .xcodeproj in my main repo that includes all of the files from the submodule, but that's not ideal.</p>

<p>Is there a way to share my submodule .xcodeproj modifications with other developers on my team?</p>
","0","4187540","",""
"36300725","3270957","2016-03-30 05:51:41","1","26","<git><github><git-submodules>","Git submodule not getting removed from git repo and not getting pushed successfully","<p>A cloned project from git repo <code>A</code> was copied in another folder in the local system and tried to be pushed in an another new repository <code>B</code>.</p>

<p>All the files except the previous cloned project folder got pushed successfully. The folder in the git repo showing as <code>[folder_name]@232435</code>.</p>

<p>I want to remove this remote folder removed from repo, and push the folder successfully in the repo without any sub modules coming into picture.</p>
","0","3270957","0","0"
"36313894","3695849","2016-03-30 15:53:35","0","1827","<git><git-submodules>","No submodule mapping found in .gitmodules for path 'LibTecho'","<p>There are 3 submodules in my directory.</p>

<p>I am trying to update all my submodules using the command</p>

<pre><code>   git submodule foreach git submodule update
</code></pre>

<p>Two of them are updated fine and One is throwing the error:</p>

<pre><code> No submodule mapping found in .gitmodules for path 'LibTecho'
</code></pre>

<p>I am unable to do init and update for the module '<code>LibTecho</code>'</p>

<p>Here is my <strong>.gitmodules</strong></p>

<pre><code>[submodule ""TechEngine""]
    path = TechEngine
    url = git@github.com:TechApp/TechEngine.git
[submodule ""LibTechCreate""]
    path = LibSTechCreate
    url = git@github.com:TechApp/LibTechCreate.git
[submodule ""LibTecho""]
    path = LibTecho
    url = git@github.com:TechApp/LibTecho.git
</code></pre>

<p>I tried:</p>

<ol>
<li><p>Removing the submodule and adding it again as mentioned in <a href=""https://stackoverflow.com/questions/4185365/no-submodule-mapping-found-in-gitmodule-for-a-path-thats-not-a-submodule"">here</a></p>

<pre><code>git rm --cached LibTecho
</code></pre></li>
</ol>

<p>and </p>

<pre><code>   git submodule add git@github.com:TechApp/LibTecho.git
</code></pre>

<ol start=""2"">
<li><p>Checked the entries which reference to submodule:</p>

<pre><code>git ls-files --stage | grep 160000 
</code></pre></li>
</ol>

<p>and I found that all three libs are listed properly.</p>

<ol start=""3"">
<li><p>I removed the submodule and then cloned again:</p>

<pre><code>git clone --recursive git@github.com:TechApp/LibTecho.git
</code></pre></li>
<li><p>Removed the submodules section in .git/config file</p>

<ul>
<li>There are no other .gitmodules file in my directory.</li>
</ul></li>
</ol>

<p>Even after multiple tries, I'm unable to update my submodule. </p>

<p>Edit:</p>

<p>when I try to pull from submodule git using source tree, I get this error message too:</p>

<blockquote>
  <p>git -c diff.mnemonicprefix=false -c core.quotepath=false -c
  credential.helper=sourcetree submodule update --init --recursive  No
  submodule mapping found in .gitmodules for path 'LibTecho'</p>
</blockquote>
","0","3695849","0","0"
"43856671","852592","2017-05-08 20:23:02","1","5236","<git><git-submodules>","How can I add a file to a git submodule?","<p>I want to make a Python package out of a repository that I've added as a submodule to my repository. Is there a way to add a <code>__init__.py</code> file to this submodule and to track it in the parent repository?</p>
","0","852592","0","0"
"25235259","3796554","2014-08-11 02:49:41","1","197","<git><git-submodules>","How to change origin of multiple git repos?","<p>I want to create multiple repositories inside one repository. These will be recursive. I already have a code of having 80-90 repositories. But i need to change the ""origin"" of each repository. 
So, i have two questions-</p>

<ol>
<li><p>How can i create git repositories recursively?</p></li>
<li><p>(If .git is already present How can i change the ""origin"" of each repository?</p></li>
</ol>

<p>Any help will be highly appreciated.</p>
","5","3796554","0","0"
"25240634","2264881","2014-08-11 10:02:13","12","6273","<git><git-submodules>","How to change HEAD of git submodule","<p>The Project is having one sub module and is pointing to one particular SHA (ex <code>62726c</code>) of that submodule.</p>

<p>So each time on running <code>git submodule update --init</code> the submodule directory is showing the changes of that SHA (<code>62726c</code>) only.</p>

<p>Recently I made change to the submodule and pushed the changes SHA (<code>f81611</code>) but as mentioned above the HEAD of the submodule is still pointing to old SHA <code>62726c</code> .</p>
","0","2264881","0","0"
"25244182","522297","2014-08-11 13:15:28","1","350","<git><msbuild><git-submodules>","MSBuild exec task never completes when executing git submodule","<p>Within a git repository, I would like to add a sub module via MSBuild. I assumed something like the following would allow me to do so.</p>

<pre><code>&lt;Exec Command='git submodule add -f git@clone-url.git ""sub/module/folder""' /&gt;
</code></pre>

<p>Unfortunately, the execute command never completes. The following message appears and stays until I terminate the script.</p>

<pre><code>Cloning into 'sub/module/folder'...
</code></pre>

<p>My guess is that git is asking for my username and password. For some reason, the output is never passed to the main command window so that I can enter my username and password for the repository.</p>

<p>Is there anyway to see why it is pausing or allow the execute command to output to the main window?</p>
","1","522297","0","0"
"7283049","391826","2011-09-02 11:56:03","2","2192","<git><git-svn><git-submodules>","Git submodule not updating from a git-svn repository","<p>I have a projectx which includes a git submodule </p>

<pre><code>/projectx/foo/bar/submodule
</code></pre>

<p>The submodule repository is itself a git-svn repo which tracks an svn repository.</p>

<p>In the standalone submodule repo, I've pulled in some new updates:</p>

<pre><code>git svn fetch
</code></pre>

<p>and I see some revisions come in. So I run:</p>

<pre><code>git svn rebase master
</code></pre>

<p>and when I call:</p>

<pre><code>git status
</code></pre>

<p>It all looks fine. So in the root of my projectx I run:</p>

<pre><code>git submodule update
</code></pre>

<p>and nothing happens. What am I doing wrong? I've definitely run:</p>

<pre><code>git submodule add
git submodule init
</code></pre>

<p>on the submodule, and when I run:</p>

<pre><code>git submodule status
</code></pre>

<p>I see the hash for its status.</p>

<p>So why does <code>git submodule update</code> not cause any update to happen?</p>
","0","391826","0","0"
"7301329","636493","2011-09-04 18:35:06","5","3508","<git><git-submodules><git-status>","Strange problem with git repo?","<p>I just upgraded to OSX Lion on my Mac and I aquired a strange problem with a git repo. I have my .vim files under version control with a number of plugins configured as git submodules. After upgrading, I ran a <code>git status</code> command into my .vim directory and got the following:</p>

<pre><code>fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
fatal: git status --porcelain failed
</code></pre>

<p>Does anyone know what my problem is? I searched the above error message on Google and SO, but I didn't find any answers. I've also noticed that git seems to be very slow now. Also, I have no other problems in other git repos (expect the slowness problem), which makes me think the problem is not related to Lion. Does anyone have any suggestions for how I can fix my .vim repo? Thanks in advance for the help.</p>

<p>Here is some of the trace output requested by drizzd:</p>

<pre><code>setup: worktree: /Users/sbrown/.vim/bundle/supertab  
setup: cwd: /Users/sbrown/.vim/bundle/supertab  
setup: prefix: (null)  
trace: built-in: git 'status' '--porcelain'  
trace: run_command: 'status' '--porcelain'  
trace: exec: 'git' 'status' '--porcelain'  
setup: git_dir: .git  
setup: worktree: /Users/sbrown/.vim/bundle/surround  
setup: cwd: /Users/sbrown/.vim/bundle/surround  
setup: prefix: (null)  
trace: built-in: git 'status' '--porcelain'  
trace: run_command: 'status' '--porcelain'  
trace: exec: 'git' 'status' '--porcelain'  
setup: git_dir: .git  
setup: worktree: /Users/sbrown/.vim/bundle/tasklist  
setup: cwd: /Users/sbrown/.vim/bundle/tasklist  
setup: prefix: (null)  
trace: built-in: git 'status' '--porcelain'  
trace: run_command: 'status' '--porcelain'  
trace: exec: 'git' 'status' '--porcelain'  
setup: git_dir: .git  
setup: worktree: /Users/sbrown/.vim  
setup: cwd: /Users/sbrown/.vim  
setup: prefix: bundle/vim-colors-solarized/  
trace: built-in: git 'status' '--porcelain'  
trace: run_command: 'status' '--porcelain'  
trace: exec: 'git' 'status' '--porcelain'  
</code></pre>
","8","636493","0","0"
"62769787","6224975","2020-07-07 07:07:13","1","467","<git><github><ssh><git-submodules>","Make git-submodule update from specific Host in config","<p>Using this guide <a href=""https://medium.com/@xiaolishen/use-multiple-ssh-keys-for-different-github-accounts-on-the-same-computer-7d7103ca8693"" rel=""nofollow noreferrer"">here</a> I have created a work ssh-key (<code>id_rsa_work</code>) and changed my <code>config</code> file to</p>
<pre class=""lang-sh prettyprint-override""><code># Personal GitHub account
Host github.com
 HostName github.com
 User git
 AddKeysToAgent yes
 IdentityFile ~/.ssh/id_rsa

# Work GitHub account
Host github.com-work
 HostName github.com
 User git
 AddKeysToAgent yes
 IdentityFile ~/.ssh/id_rsa_work

</code></pre>
<p>I have added the work ssh to my work git-repo and I can call
<code>git clone git@github.com-work:user/test.git</code> and clone it.</p>
<p>The problem is that there is a submodule in <code>test</code> which I cannot update, calling</p>
<pre><code>git submodule update
</code></pre>
<p>throws the error</p>
<pre><code>
Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@github.com:user/Utils.git' into submodule path 'C:/Users/user/Documents/work/test/Utils' failed
</code></pre>
<p>It seems like it tries to pull using my personal setting (<code>git@github.com</code>) and not the work (<code>git@github.com-work</code>). I have called <code>git submodule init</code> and have tried modify the <code>.gitmodule</code> url to</p>
<pre><code>[submodule &quot;Utils&quot;]
    path = Utils
    url = git@github.com-work:user/Utils.git
</code></pre>
","0","6224975","",""
"25537863","310292","2014-08-27 22:20:32","8","2455","<git><git-submodules><git-bare>","Does git allow for ""bare"" submodules?","<p>This may be terrible, I am not sure.</p>

<p>Let us say we have a repo ""product"" with a working directory</p>

<pre><code>/product
/product/command.script
/product/config/ (bare git repo)
</code></pre>

<p>And a repo ""config"" with a working directory</p>

<pre><code>/config
/config/config.json
</code></pre>

<p>The command.script file has actions to interact with a bare repo. ex. Running command.script BRANCH1 would run the command</p>

<pre><code>git show BRANCH1:config.json
</code></pre>

<p>Is there any way that the ""/product/config/"" folder can be a submodule of the ""product"" repo, such that when the ""product"" repo is cloned the ""config"" repo will also be cloned </p>

<pre><code>git clone --bare [config origin here] config
</code></pre>

<p>from its origin and when the ""product"" repo is fetched, the ""/product/config"" submodule can be fetched </p>

<pre><code>git fetch origin '*:*'
</code></pre>

<p>Or is this something that should be handled through hooks of some sort?</p>
","2","310292","0","0"
"25771408","4027812","2014-09-10 17:21:08","2","99","<git><git-submodules>","How do I find out the super projects of a git submodule?","<p>After a changing in a git submodule a manual searching is necessary to find out the main projects that track it. So, is there any way to know which remote super repos it is linked?</p>
","1","4027812","",""
"7597748","968218","2011-09-29 13:04:37","78","55653","<git><git-submodules><repository>","Linking a single file from another git repository","<p>How do you link a <strong>single file</strong> from another git repository to your own repository?  I don't want the full repository, just a single file.  Using <code>git submodule</code> seems like the right route to go, but it wants to grab the whole thing.</p>
","2","968218","0","0"
"25781339","2136812","2014-09-11 07:15:03","4","6566","<eclipse><git><git-submodules>","Cloning a git repo that has submodules","<p>I have a git repot that has a submodule.</p>

<p>I want to clone this repo into an eclipse workspace, I've read this</p>

<blockquote>
  <p><strong>Working with Submodules</strong></p>
  
  <p>You can read more about what Git submodules are and how they work in this Git Community Book chapter.<br>
  <strong>Cloning Repositories with Submodules</strong><br>
  Submodules are repositories nested inside a parent repository.<br>
  Therefore when doing a clone of a parent repository it is necessary to
  clone the submodule repositories so that the files/folders are
  available in the parent repository's working directory.</p>
  
  <p>Checking the Clone Submodules button from the Git Clone wizard will clone all submodule repositories after the clone of the parent
  repository finishes.</p>
</blockquote>

<p><img src=""https://i.stack.imgur.com/T0gIg.png"" alt=""enter image description here""></p>

<p>However, when I am done cloning, the submodule directory is empty
and the project doesnt appear in the workspace.</p>

<p>How do I add the submodule ?</p>
","0","2136812","0","0"
"7603911","972060","2011-09-29 22:05:12","0","1677","<git><git-submodules><gitolite>","How do I properly implement git submodules using Gitolite?","<p>I would like to create submodules within my hosted repository using Gitolite.  Submodules are easy enough in git outside of Gitolite.  However, Gitolite seems to complicate things.</p>
","1","972060","0","0"
"7618876","80559","2011-10-01 07:31:03","19","2157","<git><git-submodules><git-merge>","Replaced third party code with git submodules, now I can't switch branches","<p>Here's the story:
I have 2 git branches <code>master</code> and <code>develop</code>
I'm currently on <code>develop</code>.</p>

<p>I've long since had the source files of a third party library included in my repo in the directory <code>Vendor/MGTwitterEngine</code>. This code was already merged into master.</p>

<p>Now, on branch <code>develop</code>, I've removed the library and replaced it with a git submodule and committed.</p>

<p>The problem is I can no longer switch back to the <code>master</code> branch. If I try, I get the following error:</p>

<pre><code>The following untracked working tree files would be overwritten by checkout:
    Vendor/MGTwitterEngine/MGTwitterHTTPURLConnection.h
    Vendor/MGTwitterEngine/MGTwitterHTTPURLConnection.m
    Vendor/MGTwitterEngine/MGTwitterLibXMLParser.h
    Vendor/MGTwitterEngine/MGTwitterLibXMLParser.m
    Vendor/MGTwitterEngine/MGTwitterMessagesLibXMLParser.h
    Vendor/MGTwitterEngine/MGTwitterMessagesLibXMLParser.m
    Vendor/MGTwitterEngine/MGTwitterMessagesParser.h
    Vendor/MGTwitterEngine/MGTwitterMessagesParser.m
    ...
   Aborting
</code></pre>

<p>git thinks the submodule files are ""untracked"" and won't replace them with the tracked, non-submodule files in the same location. </p>

<p>How can I get around this issue?</p>
","0","80559","0","0"
"7629822","417527","2011-10-02 23:04:51","16","10552","<git><git-submodules>","Is it possible to make Git aware of an existing .gitmodules file?","<p>I added a submodule:</p>

<pre><code>git submodule add git://github.com/chneukirchen/rack.git rack
</code></pre>

<p>A file <code>.gitmodules</code> was created like:</p>

<pre><code>[submodule ""rack""]
path = rack
url = git://github.com/chneukirchen/rack.git
</code></pre>

<p>And of course Git knows about it:</p>

<pre><code>git submodule status
30fb044db6ba5ea874ebc44a43bbd80a42676405 rack (1.3.0-64-g30fb044)
</code></pre>

<p>I added a submodule by hand, for example, adding to that file:</p>

<pre><code>[submodule ""redcloth""]
path = plugins/redcloth
url = git://github.com/jgarber/redcloth.git
</code></pre>

<p>And I repeated the previous command:</p>

<pre><code>git submodule init
Submodule 'rack' () registered for path 'rack'

git submodule update
(no output)

git submodule status
30fb044db6ba5ea874ebc44a43bbd80a42676405 rack (1.3.0-64-g30fb044)
</code></pre>

<p>So, as far I can see, what I added by hand is ignored. Is there some way to make Git aware of the lines added by hand in the .gitmodules file?</p>

<p>Note: I've also tried to add the lines by hand to the <code>.git/config</code> file and that didn't work either.</p>
","3","417527","0","0"
"44366417","","2017-06-05 10:02:31","130","112596","<git><git-submodules>","What is the point of 'git submodule init'?","<h3>Background</h3>

<p>To populate a repository's submodules, one <a href=""https://stackoverflow.com/a/3796947"">typically invokes</a>:</p>

<pre><code>git submodule init
git submodule update
</code></pre>

<p>In this usage, <code>git submodule init</code> seems to do only one thing: populate <code>.git/config</code> with information that is already in <code>.gitmodules</code>.</p>

<p>What is the point of that?</p>

<p>Couldn't <code>git submodule update</code> simply use the information from <code>.gitmodules</code>? This would avoid both:</p>

<ul>
<li>an unnecessary command (<code>git submodule init</code>); and</li>
<li>an unnecessary duplication of data (<code>.gitmodules</code> content into <code>.git/config</code>).</li>
</ul>

<h3>Question</h3>

<p>Either:</p>

<ul>
<li>there are use-cases for <code>git submodule init</code> that I do not know (in which case, please enlighten me!); or else</li>
<li><code>git submodule init</code> is cruft that could be deprecated in Git without any harm.</li>
</ul>

<p>Which of these is true?</p>
","1","","0","0"
"7656491","10636","2011-10-05 03:45:51","8","15392","<git><git-submodules>","Why is git submodule update failing?","<p>I have the following  <code>.gitmodules</code> file:</p>

<pre><code>[submodule ""web/blog""]
    path = web/blog
    url = git://amygdala.servebeer.com:lucky_blog.git

[submodule ""web/old""]
    path = web/old
    url = git://amygdala.servebeer.com:old_lucky.git
</code></pre>

<p>When I clone the repo and run <code>git submodule init &amp;&amp; git submodule update</code> (or <code>git submodule init --update</code>) I get the following error:</p>

<pre><code>Cloning into web/blog...
fatal: Unable to look up  (port 9418) (Name or service not known)
Clone of 'git://amygdala.servebeer.com:lucky_blog.git' into submodule path 'web/blog' failed
</code></pre>

<p>I observe three things which cause some concern: </p>

<ol>
<li>The second <code>.gitmodules</code> entry (web/old) is cloned just fine, with no issues.</li>
<li>There appears to be an extra space in the error message, where I think git would normally list the hostname it fails to look up (right before the port number listing in the error listed above).</li>
<li><code>git clone git://amygdala.servebeer.com:lucky_blog.git</code> works just fine.</li>
</ol>

<p>What is wrong with this repo? Is this an error with git or did I screw something up when setting up the repo?</p>

<p><em>Edit</em> Here's my git config for reference:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote ""origin""]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = git@amygdala.servebeer.com:luckybead.git
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[submodule ""web/blog""]
    url = git://amygdala.servebeer.com:lucky_blog.git
[submodule ""web/old""]
    url = git://amygdala.servebeer.com:old_lucky.git
</code></pre>
","3","10636","0","0"
"63041542","2907906","2020-07-22 19:11:09","0","120","<git><git-submodules><git-repo>","Create a fat git repository based on git submodules","<p>I'd like to know, if it's possible to do this:</p>
<ol>
<li><code>git clone --recursive &lt;repository with submodule&gt;</code></li>
<li><code>git remote add fat-repository &lt;path&gt;</code></li>
<li>???</li>
<li><code>git add -A &amp;&amp; git commit -m &quot;Test&quot; &amp;&amp; git push fat-repository master</code></li>
</ol>
<p>Step 3 would <em>de-submodule</em> the repository, keeping the content of the <em>submodule</em>, but removing any trace that it was a submodule.</p>
<p>Thanks!</p>
","0","2907906","",""
"7928061","590483","2011-10-28 10:28:40","7","7974","<windows><git><git-submodules>","Git submodule mess: how to use git submodules with developers not familiar with git?","<p>I am really frustrated about using git's submodule feature. Either I still don't get it right or it just don't work as I am expecting this. Following project situation is given:</p>

<pre><code>Project
  | .git
  | projsrc
  | source (submodule)
  | proj.sln
</code></pre>

<p>In this scenario <strong>source</strong> is pointing to another repository containing the common source data across all our projects. There is a lot of development happening under <strong>source</strong> as also under <strong>projsrc</strong>. Unfortunately <strong>Project</strong> points to some commit of the source submodule and not to the actual HEAD of it. This is the usual git behaviour, as far as I got it know. </p>

<p>I already found out that</p>

<pre><code>git submodule update
</code></pre>

<p>just get the version of submodule which was commited together with the main Project. However, I would really like to be always up-to date with the submodules development, but do not have any real clue how to do this right. Hence my question is:</p>

<p>Is it possible to attach the <strong>Project</strong> to the HEAD of the submodule, 
reagardless of the fact if this will break the compilation of Project or not. 
I just don't want to go always into the submodule 
directory and do <em>git pull</em> there. Since I think I could loose my changes done 
in the submodule directory, because this is simple attached to a 
commit and not really to any branch or so.</p>

<p><strong>Please consider following constraints</strong>:</p>

<ul>
<li>Developers in our group are not that familiar with all VCS around. We are used to use really huge svn repository before, without any external repo features at all.</li>
<li>We are working on Windows</li>
<li>A click'n'forget solution would be best, since most of project members are rather scared by using a command line interface :)</li>
</ul>
","2","590483","0","0"
"63245399","3575661","2020-08-04 10:56:44","-1","2338","<git><git-submodules>","git restore of an actually unchanged folder","<p>I have a modified folder (whyever, I can't figure out any chances on it) and want to unstage (and keep) its content because it is a submodule here with codes inside.</p>
<pre><code>C:\Users\devuser\source\repos\MainProject&gt;git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   SubProject (new commits)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>So far I know I can unstage it with <code>git restore SubProject</code>. If I say <code>git restore SubProject</code> I get still</p>
<pre><code>C:\Users\devuser\source\repos\MainProject&gt;git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   SubProject (new commits)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>After a while of research I stuck with this problem. What am I doing wrong?</p>
","2","3575661","",""
"63264080","14053511","2020-08-05 11:19:42","2","1686","<git><gitlab><gitlab-ci><git-submodules>","How to get gitlab CI to checkout my submodule?","<p>My application consists of a .NET C# WebApi backend and a npm/node/Javascript frontend.</p>
<p>I have a .gitlab-ci.yml script. Below is the gitlab CI configuration file. I have removed irrelevant text.</p>
<pre><code>stages:
 - build
build-backend:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  stage: build
  script:
    - echo &quot;build-backend&quot;
    - dotnet clean WebApiServer --configuration Release
    - dotnet build WebApiServer --configuration Release    
  artifacts:
    name: &quot;Backend-${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}&quot;
    expire_in: 1 day
    paths:
      - WebApiServer/bin/Release  
build-frontend:
  image: node:12
  stage: build
  script:
    - echo &quot;build-frontend&quot;
    - git submodule init
    - git submodule update
    - cd WebApiServer/client
    - npm install
    - node node_modules/webpack/bin/webpack.js --env=prod --progress --profile --config=webpack.prod.js  
  artifacts:
    name: &quot;Frontend-${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}&quot;
    paths:
      - build
    expire_in: 1 day
</code></pre>
<p>The backend builds correctly.</p>
<p>But the frontend gives an error. It seems gitlab cannot checkout the submodule. Although the submodule is hosted on the same gitlab server as the backend.</p>
<pre><code>$ git submodule init
$ git submodule update
Cloning into '/builds/subcompany/clientname/WebApiServer/WebApiServer/client'...
Host key verification failed.
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@git.company.ab:subcompany/clientname/WebApiServerclient.git' into submodule path '/builds/subcompany/clientname/WebApiServer/WebApiServer/client' failed
Failed to clone 'WebApiServer/client'. Retry scheduled
Cloning into '/builds/subcompany/clientname/WebApiServer/WebApiServer/client'...
Host key verification failed.
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@git.company.ab:subcompany/clientname/WebApiServerclient.git' into submodule path '/builds/subcompany/clientname/WebApiServer/WebApiServer/client' failed
Failed to clone 'WebApiServer/client' a second time, aborting
ERROR: Job failed: exit code 1
</code></pre>
<p>.gitmodules</p>
<pre><code>[submodule &quot;WebApiServer/client&quot;]
    path = WebApiServer/client
    url = git@git.company.ab:subcompany/clientcompany/client.git
    branch = development
</code></pre>
<p>Questions</p>
<ol>
<li>How to get gitlab to checkout the submodule?</li>
<li>In gitmodules should I use the SSH type URL or the HTTPS type URL?</li>
</ol>
<hr />
<p><strong>Update</strong></p>
<p>I did try <code>GIT_SUBMODULE_STRATEGY: recursive</code>. I would prefer not to use <code>GIT_SUBMODULE_STRATEGY: recursive</code>.</p>
<p>The error message when using <code>GIT_SUBMODULE_STRATEGY: recursive</code></p>
<pre><code>Synchronizing submodule url for 'WebApiServer/client'
17Cloning into '/builds/subcompany/clientname/WebApiServer/WebApiServer/client'...
18error: cannot run ssh: No such file or directory
19fatal: unable to fork
20fatal: clone of 'git@git.company.ab:subcompany/clientname/client.git' into submodule path '/builds/subcompany/clientname/WebApiServer/WebApiServer/client' failed
21Failed to clone 'WebApiServer/client'. Retry scheduled
22Cloning into '/builds/subcompany/clientname/WebApiServer/WebApiServer/client'...
23error: cannot run ssh: No such file or directory
24fatal: unable to fork
25fatal: clone of 'git@git.company.ab:subcompany/clientname/client.git' into submodule path '/builds/subcompany/clientname/WebApiServer/WebApiServer/client' failed
26Failed to clone 'WebApiServer/client' a second time, aborting
28ERROR: Job failed: exit code 1.
</code></pre>
","4","14053511","",""
"44633329","5008622","2017-06-19 14:31:48","1","597","<git><git-submodules><google-container-registry>","Google container builder DockerFile with git submodules","<p>Our container-builder fail to build an image we have that has a private git submodule command as part of the DockerFile.</p>

<p>I linked the console account with the bitbucket account, (which has access to all repos) but still the build fail with ""access denied"" to the submodule repo.</p>

<p>in Quay.IO builder i solved this by adding the ssh-key to the submodule repository, but since Container-Builder link with my account i can't use that solution.</p>
","0","5008622","",""
"26108137","1402368","2014-09-29 20:18:12","7","7158","<git><git-submodules>","git submodule sync doesn't work","<p>I'm trying to change the remote on a submodule as per <a href=""https://stackoverflow.com/a/14405542/1402368"">these instructions</a>.</p>

<p>After modifying and saving <code>.gitmodules</code>, then doing <code>git submodule sync</code> my submodule hasn't changed, though my <code>.git/config</code> file has been updated to match the new remote url in <code>.gitmodules</code>.</p>

<p>I've also tried <code>git submodule sync --recursive</code>, and doing <code>rm -rf .git/modules/&lt;mySubmodule&gt;</code> as per <a href=""https://stackoverflow.com/questions/14404704/how-do-i-replace-a-git-submodule-with-another-repo#comment30543163_14405542"">this tip</a> without any difference. In fact, running the latter command then <code>git submodule sync</code> again gives <code>fatal: Not a git repository: ../.git/modules/&lt;mySubmodule&gt;</code>. Any tips?</p>

<p>I initially added the submodule to the project via <code>git submodule add git://&lt;mySubmodule-url&gt;</code> as per the <a href=""http://git-scm.com/book/en/Git-Tools-Submodules"" rel=""nofollow noreferrer"">git docs</a>.</p>

<p><strong>Edit</strong></p>

<p>I've even updated git via homebrew to v2.1.1, still nothing. I've also tried starting completely from scratch, and even switching between two completely different submodules but I'm still getting the same results. In sum:</p>

<pre><code>$&gt; mkdir myRepo
$&gt; cd myRepo
myRepo$&gt; git init .
myRepo$&gt; git submodule add https://&lt;path/to/my/repo&gt;.git
myRepo$&gt; vim .gitmodules 
# change submodule url to https://&lt;path/to/another/repo&gt;.git
myRepo$&gt; git submodule sync # updates my .git/config file with the new submodule url, but all my files in the submodule are still from the old url
myRepo$&gt; git submodule sync --recursive # doesn't do anything
myRepo$&gt; git submodule update --init --recursive # doesn't do anything either
myRepo$&gt; rm -rf .git/modules/&lt;mySubmodule&gt; # tip from SO comment linked above
myRepo$&gt; git submodule sync
fatal: Not a git repository: ../.git/modules/&lt;mySubmodule&gt;
</code></pre>
","3","1402368","0","0"
"44641872","4934640","2017-06-20 00:26:29","4","1807","<git><git-submodules><git-push>","How can I do `git push --recurse-submodules=on-demand` when the parent repo is on the `develop` branch with this new git version 2.13?","<p>Related to:</p>

<ol>
<li><a href=""https://groups.google.com/forum/#!topic/smartgit/RpsRjUCmduA"" rel=""nofollow noreferrer"">Allow the Smartgit Push button to do <code>push --recurse-submodules=on-demand</code> when using git sub module</a></li>
</ol>

<p>Before the <code>git version 2.13</code>, everything was perfect around here, but now with this version they broke my workflow:</p>

<pre><code>Push: process for submodule 'Packages/Advanced CSV' failed
    D:\SublimeText\Data&gt; git.exe push --porcelain --progress --tags --recurse-submodules=on-demand origin refs/heads/develop:refs/heads/develop
    src refspec 'refs/heads/develop' must name a ref
    process for submodule 'Packages/Advanced CSV' failed
</code></pre>

<p>I am using the <code>Smartgit</code> client, and now when I hit the push button, I got this error above. Searching I found it was a new update on git client the problem:</p>

<ol>
<li><a href=""https://groups.google.com/forum/?utm_medium=email&amp;utm_source=footer#!msg/smartgit/xVbPY2Hypro/GutIp9QTBAAJ"" rel=""nofollow noreferrer"">[smartgit] Push on demand stopped working on SmartGit 17.0.4</a></li>
</ol>

<blockquote>
  <p>It looks like the git push recurse-submodules behavior has changed.
  Currently with 2.13 you cannot run ""git push
  --recurse-submodules=on-demand"" if the parent repo is on a different
  branch than the sub repos, e.g. parent repo is on ""develop"" and
  sub-repo on ""master"". </p>
</blockquote>

<p>...</p>

<blockquote>
  <p>I was under the impression that Jonathan and may be others considered
  the fact that <code>git push --recurse-submodules=on-demand</code> doesn't work
  as before an unintentional change. He asked me previously if pushing
  without a refspec will work for us and I responded with a yes. The
  question remains if everyone is on board with change push without
  refspec to use <code>push.default</code> in the parent repo as well as
  submodules.</p>
  
  <p>Cheers,</p>
  
  <p>JS</p>
</blockquote>

<p><a href=""https://public-inbox.org/git/CAE5=+KX57KM+6n9NpePw9KYPXFy7UH-WRgSwaJDnvRofYFXm7Q@mail.gmail.com/T/"" rel=""nofollow noreferrer"">git push recurse.submodules behavior changed in 2.13</a></p>

<p>I did not understand the last part <code>without refspec to use push.default in the parent repo as well as submodules</code>, is it a way to <code>git push --recurse-submodules=on-demand</code> when the parent repo is on the <code>develop</code> branch and the submodules are on the <code>master</code> branch?</p>

<p>If it is not, how can I do <code>git push --recurse-submodules=on-demand</code> when the parent repo is on the <code>develop</code> branch, but the submodules are on the <code>master</code> branch with this new git version?</p>

<hr>

<h1>Update</h1>

<p>I created this script which reproduces the problem locally with local remotes:</p>

<pre><code># Create the directory structure
rm -r -f main_repo
rm -r -f main_repo_remote
rm -r -f submodule_remote

mkdir main_repo_remote
mkdir submodule_remote
mkdir main_repo
mkdir main_repo/first_submodule

cd main_repo

# Setup the first_submodule
cd first_submodule
printf ""# Submodule Repository\n\n"" &gt; README.md
git init
git add README.md
git commit -m ""Added the repository first commit.""

git init --bare ../../submodule_remote
git remote add origin ../../submodule_remote
git push origin master

# Setup the main_repo
cd ..
printf ""# Main Repo\n\nThis is the main repository which contains submodules\n"" &gt; README.md
git init
git add README.md
git submodule add -- ../../submodule_remote ""first_submodule""
git commit -m ""Added the main repository first commit.""

git init --bare ../main_repo_remote
git remote add origin ../main_repo_remote
git push origin master
git checkout -b develop
git push --set-upstream origin develop

# Add an unpushed commit to the submodule
cd first_submodule
printf ""Dirty\n\n"" &gt;&gt; README.md
git add README.md
git commit -m ""Added the repository second commit.""

# Go to the main repository and do the push
cd ..
git add first_submodule
git commit -m ""Added the main repository second commit.""
git push --recurse-submodules=on-demand
</code></pre>

<p>At its last line, I am doing the push on the main repo, but it is failing on the new git version.
Currently the solution is to manually open the submodules which need to be pushed and push them before to push the main repository, as the option <code>--recurse-submodules=on-demand</code> does not work on the main repository.</p>

<p>This is a output example:</p>

<pre><code>$ sh create_bug.sh
Initialized empty Git repository in D:/User/Downloads/test/main_repo/first_submodule/.git/
[master (root-commit) 69015bb] Added the repository first commit.
 1 file changed, 2 insertions(+)
 create mode 100644 README.md
Initialized empty Git repository in D:/User/Downloads/test/submodule_remote/
Counting objects: 3, done.
Writing objects: 100% (3/3), 249 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To ../../submodule_remote
 * [new branch]      master -&gt; master
Initialized empty Git repository in D:/User/Downloads/test/main_repo/.git/
Adding existing repo at 'first_submodule' to the index
[master (root-commit) 6af0279] Added the main repository first commit.
 3 files changed, 7 insertions(+)
 create mode 100644 .gitmodules
 create mode 100644 README.md
 create mode 160000 first_submodule
Initialized empty Git repository in D:/User/Downloads/test/main_repo_remote/
Counting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 430 bytes | 0 bytes/s, done.
Total 4 (delta 0), reused 0 (delta 0)
To ../main_repo_remote
 * [new branch]      master -&gt; master
Switched to a new branch 'develop'
Total 0 (delta 0), reused 0 (delta 0)
To ../main_repo_remote
 * [new branch]      develop -&gt; develop
[master 58e7111] Added the repository second commit.
 1 file changed, 2 insertions(+)
[develop 69f9588] Added the main repository second commit.
 1 file changed, 1 insertion(+), 1 deletion(-)
fatal: src refspec 'develop' must name a ref
fatal: process for submodule 'first_submodule' failed
fatal: The remote end hung up unexpectedly
</code></pre>
","5","4934640","0","0"
"44642278","4934640","2017-06-20 01:16:01","2","511","<git><git-submodules><smartgit>","How to disable this message `An error-prone admin area configuration` on Smartgit client?","<p>The configuration is correct, 
I have a parent git repository on the folder <code>D:\</code>, 
with the submodule <code>Packages/ANSIescape</code>,
while I also have a unrelated git repository on the folder <code>D:\Packages</code>.</p>

<pre><code>1/73: The submodule at 'Packages/ANSIescape' has an error-prone admin area configuration.

For the submodule at Packages/ANSIescape the .git-admin directory is not located below D:\Packages\.git, but at D:\.git\modules\Packages\ANSIescape instead.

This indicates an error-prone configuration and will most likely result in confusion and strange behavior. You should re-done the submodule from scratch.
</code></pre>

<p>This message is slowing down a lot to open the submodule,
it keeps count 1 per seconds until it gets on 73 submodules I had installed at the folder:</p>

<p><a href=""https://i.stack.imgur.com/33iP3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/33iP3.png"" alt=""enter image description here""></a></p>

<p>I am obeyed to click with my mouse 73 times on the close button, otherwise these messages never goes out. And they always come in, when I open the repository.</p>

<hr>

<h1>Update</h1>

<p>There is this script which reproduces the same repository structure. You just need to run and open the repository on Smartgit, and it will point the error:</p>

<pre><code># Create the directory structure
mkdir main_repo
mkdir main_repo/unrelated_repo
mkdir main_repo/unrelated_repo/main_repo_submodule

cd main_repo

# Setup the unrelated_repo
cd unrelated_repo
printf ""# UnRelated Repository\n\n"" &gt; README.md
git init
git add -f README.md
git commit -m ""Added the unrelated repository first commit.""
git remote add origin https://github.com/user/unrelated_repo

# Setup the main_repo_submodule
cd main_repo_submodule
printf ""# This is a submodule from the \`main_repo\`, and not from the \`unrelated_repo\`\n"" &gt; README.md
git init
git add -f README.md
git commit -m ""Added the main repository submodule first commit.""
git remote add origin https://github.com/user/main_repo_submodule

# Setup the main_repo
cd ../..
printf ""# Main Repo\n\nThis is the main repository which contains submodules\n"" &gt; README.md
printf ""\nThis is a main_repo_file on the unrelated repository\n\n"" &gt; unrelated_repo/main_repo_file.txt
printf ""\n*\n**\n\n"" &gt; unrelated_repo/.gitignore
git init
git add -f README.md unrelated_repo/main_repo_file.txt unrelated_repo/.gitignore
git submodule add -f -- https://github.com/user/main_repo_submodule ""unrelated_repo/main_repo_submodule""

git commit -m ""Added the first main repository first commit.""
git remote add origin https://github.com/user/main_repo

# Move the submodule to the parent repository
mkdir -p .git/modules
mv unrelated_repo/main_repo_submodule/.git/ .git/modules/main_repo_submodule
printf ""gitdir: ../../.git/modules/main_repo_submodule\n"" &gt; unrelated_repo/main_repo_submodule/.git
</code></pre>
","0","4934640","",""
"44646045","5960800","2017-06-20 07:02:56","4","5316","<git><git-submodules>","Fatal error ""could not read Username"" when update submodule using git","<p>I've encountered a strange issue, and searched for a long time with no solution.</p>

<p>I have a main project named <code>lapp-yhkt</code>(local path: <code>/g/webstorm/lapp-yhkt</code>):<a href=""https://i.stack.imgur.com/Zjubc.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Zjubc.png"" alt=""enter image description here""></a></p>

<p>and the content of <code>.gitmodules</code> :<a href=""https://i.stack.imgur.com/MNUOk.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/MNUOk.png"" alt=""enter image description here""></a></p>

<p>At this directory, I take the steps from <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""noreferrer""><strong>Git-Tools-Submodules</strong></a>:</p>

<p>First init submodule,</p>

<pre><code>$ git submodule init
Submodule 'app/base' (https://git.mobcb.com/liteapp/lapp-base.git) registered for path 'app/base'
</code></pre>

<p>the update it and get fatal error,</p>

<pre><code>$ git submodule update
Cloning into 'G:/webstorm/lapp-yhkt/app/base'...
bash: /dev/tty: No such device or address
error: failed to execute prompt script (exit code 1)
fatal: could not read Username for 'https://git.mobcb.com': Invalid argument
fatal: clone of 'https://git.mobcb.com/liteapp/lapp-base.git' into submodule path 'G:/webstorm/lapp-yhkt/app/base' failed
</code></pre>

<p>After these, I also tried <code>git submodule sync</code> and <code>git submodule update</code>:</p>

<pre><code>$ git submodule sync
Synchronizing submodule url for 'app/base'


$ git submodule update
Cloning into 'G:/webstorm/lapp-yhkt/app/base'...
bash: /dev/tty: No such device or address
error: failed to execute prompt script (exit code 1)
fatal: could not read Username for 'https://git.mobcb.com': Invalid argument
fatal: clone of 'https://git.mobcb.com/liteapp/lapp-base.git' into submodule path 'G:/webstorm/lapp-yhkt/app/base' failed
</code></pre>

<p>But same error occur to me, it's frustrated. Hope anyone can save me and thanks in advance.</p>

<p><strong><em>EDIT:</em></strong> I used git in windows.</p>
","0","5960800","",""
"63283906","14060179","2020-08-06 12:45:00","2","488","<git><gitlab><gitlab-ci><git-submodules>","Why does Gitlab CI fail to get git submodule but on subsequent push checks out the submodule?","<p>My project consists of a parent project and a child project. The child project is included in the parent project as a submodule.</p>
<p>I am using Gitlab CI. Below is the .gitlab-ci.yml file.</p>
<pre><code>stages:
 - build

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  
build-backend:
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  stage: build
  script:
    - echo &quot;build-backend&quot;
    - apt update -y
    - apt install -y nodejs npm
    - node --version
    - npm --version
    - ls -al MyApp/client
    - dotnet publish MyApp /p:PublishProfile=&quot;Profile&quot;
</code></pre>
<p>The gitmodules file looks like this</p>
<pre><code>[submodule &quot;MyApp/client&quot;]
    path = MyApp/client
    url = ../myappclient.git
    branch = master

  
</code></pre>
<p>If I make a change to the source code and push to Gitlab, then Gitlab fails with this error</p>
<pre><code>fatal: destination path '/builds/def/abc/xyz/MyApp/client' already exists and is not an empty directory.
</code></pre>
<p>Complete error message</p>
<pre><code>Running with gitlab-runner 13.1.0 (6214287e)
  on runner-docker-builder-7.dev.nsynd.com spMNyspT
Preparing the &quot;docker&quot; executor
00:00
Using Docker executor with image mcr.microsoft.com/dotnet/core/sdk:3.1 ...
Pulling docker image mcr.microsoft.com/dotnet/core/sdk:3.1 ...
Using docker image sha256:052ed32b57d8892af69eb4141a96032b01534ccc63db136c5649813e727c78ca for mcr.microsoft.com/dotnet/core/sdk:3.1 ...
Preparing environment
00:02
Running on runner-spmnyspt-project-440-concurrent-0 via runner-docker-builder-7.dev.nsynd.com...
Getting source from Git repository
00:04
Fetching changes...
Reinitialized existing Git repository in /builds/def/abc/xyz/.git/
Checking out b626802d as MyBranch...
Updating/initializing submodules recursively...
Synchronizing submodule url for 'MyApp/client'
fatal: destination path '/builds/def/abc/xyz/MyApp/client' already exists and is not an empty directory.
fatal: clone of 'https://gitlab-ci-token:[MASKED]@git.dfghj.com/def/abc/mysubmodule.git' into submodule path '/builds/def/abc/xyz/MyApp/client' failed
Failed to clone 'MyApp/client'. Retry scheduled
fatal: destination path '/builds/def/abc/xyz/MyApp/client' already exists and is not an empty directory.
fatal: clone of 'https://gitlab-ci-token:[MASKED]@git.dfghj.com/def/abc/mysubmodule.git' into submodule path '/builds/def/abc/xyz/MyApp/client' failed
Failed to clone 'MyApp/client' a second time, aborting
ERROR: Job failed: exit code 1
</code></pre>
<p>If I push another change (any contrived change), then the build works.</p>
<ol>
<li>Why does Gitlab fail to get the submodule the first time?</li>
<li>Do I need to clean up after the last build?</li>
</ol>
","0","14060179","0","0"
"8040761","544947","2011-11-07 18:17:25","1","402","<ruby><git><rake><git-submodules>","Trying to update git submodule with Ruby, how to chdir before executing shell command?","<p>I have some git repo X that has a submodule in the subfolder foo/bar pointing to repo Y.</p>

<p>I'm trying to get my CI system to update the submodule automatically, I mean pursuing this commands from RAKE:</p>

<pre><code>$ cd foo/bar
$ git pull origin master
</code></pre>

<p>But when my RAKE task tries to perform this, it looks like it is pulling X instead of Y (from the log), so I assume the chdir to foo/bar didn't work.</p>

<p>What I've already tried in ruby:</p>

<p>1: Using backticks:</p>

<pre><code>`cd foo &amp;&amp; cd bar &amp;&amp; git pull origin master`
</code></pre>

<p>2: Using Dir.chdir first and then backticks:</p>

<pre><code>Dir.chdir(Dir.pwd + ""\\foo\\bar"")
`git pull origin master`
</code></pre>

<p><br/></p>

<p>(Yes, I use backslashes because the agent runs on windows...)</p>

<p>Both methods above seem to still execute in X's root, instead of X\foo\bar.</p>

<p>Any ideas? :(</p>

<p>Thanks</p>
","0","544947","0","0"
"8212800","383007","2011-11-21 13:46:00","11","2689","<github><git-submodules>","How do submodules behave in github pages?","<p>I have this github repository, which is a web page for an open source project I am working on:</p>

<p><a href=""https://github.com/o8/o8.github.com"">https://github.com/o8/o8.github.com</a></p>

<p>According to github's documentation, this repository is special, as it builds a github-pages site everytime it receives a push. This site becomes available under <a href=""http://o8.github.com"">http://o8.github.com</a>. This works fine :-).</p>

<p>However, my repository contains a submodule under the folder <code>/oxy</code>. This is declared inside the file <code>/.gitmodules</code> with a public url (<code>git://github.com/linepogl/oxygen.git</code>). I expected that all the files inside this submodule would also be included in the github-pages site. This does not happen, or at least I don't know how to make it work.</p>

<p>For example, there is the file <code>/oxy/hlp/index.html</code>. I expected that the address <a href=""http://o8.github.com/oxy/hlp/index.html"">http://o8.github.com/oxy/hlp/index.html</a> would point to this file. Instead, I get a 404 error.</p>

<p>Any ideas?</p>
","2","383007","",""
"26157290","1230946","2014-10-02 08:46:06","6","2976","<git><docker><git-submodules>","docker autobuild with git private submodule","<p>I have two private repositories on GitHub called <code>dashboard</code> and <code>ui</code>. I defined <code>ui</code> as a git submodule of <code>dashboard</code>, and I configured docker to autobuild <code>dashboard</code> on every changes on a specific branch.</p>

<p>I read this documentation <a href=""https://docs.docker.com/docker-hub/builds/"">https://docs.docker.com/docker-hub/builds/</a>, but when I try to setup the deploy key given by docker in my <code>ui</code>'s settings, it says ""Key already in use"". Indeed, this key is already used by <code>dashboard</code> to allow docker to autobuild this repo!</p>

<p>Here is my docker build log:</p>

<blockquote>
  <p><strong>Error:</strong></p>

<pre><code>Failed to clone repository: Cloning into '/tmp/build_byaxhis7sznbvmb6wgwzm6n'...
Submodule 'app/styles/ui' (git@github.com:yllieth/ui.git) registered for path 'app/styles/ui'
Cloning into 'app/styles/ui'...


Warning: Permanently added 'github.com,192.30.252.130' (RSA) to the list of known hosts.
ERROR: Repository not found.
fatal: The remote end hung up unexpectedly
Clone of 'git@github.com:yllieth/ui.git' into submodule path 'app/styles/ui' failed
</code></pre>
  
  <p><strong>Dockerfile:</strong> None</p>
</blockquote>

<p>Docker doesn't find any Dockerfile even if I have one defined in my <code>dashboard</code> repo. So, I won't be able to give it any instructions or add another SSH key.</p>

<p>If anyone has an idea about how using autobuild with private repos and git submodule, I'm interested!!</p>
","1","1230946","0","0"
"44660160","4934640","2017-06-20 18:07:16","0","502","<git><recursion><git-submodules><git-clone>","How to send a git submodule folder `.git` to the parent repository `.git/modules/` folder?","<p>When you locally create git submodules as on this script:</p>

<pre><code># Create the directory structure
mkdir main_repo
mkdir main_repo/unrelated_repo
mkdir main_repo/unrelated_repo/main_repo_submodule

cd main_repo

# Setup the unrelated_repo
cd unrelated_repo
printf ""# UnRelated Repository\n\n"" &gt; README.md
git init
git add -f README.md
git commit -m ""Added the unrelated repository first commit.""
git remote add origin https://github.com/user/unrelated_repo

# Setup the main_repo_submodule
cd main_repo_submodule
printf ""# Main Repository Submodule\n\nThis is a submodule from the \`main_repo\`, and not from the \`unrelated_repo\`\n"" &gt; README.md
git init
git add -f README.md
git commit -m ""Added the main repository submodule first commit.""
git remote add origin https://github.com/user/main_repo_submodule

# Setup the main_repo
cd ../..
printf ""# Main Repo\n\nThis is the main repository which contains submodules\n"" &gt; README.md
printf ""\nThis is a main_repo_file on the unrelated repository\n\n"" &gt; unrelated_repo/main_repo_file.txt
printf ""\n*\n**\n\n"" &gt; unrelated_repo/.gitignore
git init
git add -f README.md unrelated_repo/main_repo_file.txt unrelated_repo/.gitignore
git submodule add -f -- https://github.com/user/main_repo_submodule ""unrelated_repo/main_repo_submodule""

git commit -m ""Added the first main repository first commit.""
git remote add origin https://github.com/user/main_repo
</code></pre>

<p>The submodule <code>.git</code> folder will be located on the folder:</p>

<ol>
<li><code>main_repo/unrelated_repo/main_repo_submodule/.git/</code></li>
</ol>

<p>However, if I push this submodule to a remote server do to perform a:</p>

<ol>
<li><code>git clone --recursive</code></li>
</ol>

<p>The submodule git folder <code>main_repo/unrelated_repo/main_repo_submodule/.git/</code> will be located on:</p>

<ol>
<li><code>main_repo/.git/modules/main_repo_submodule/</code></li>
</ol>

<p>And on its place will be a synlink to its git folder on the parent repository. So how to put a submodule just create on this parent folder <code>.git/modules/</code> folder, wihtout cloning it recursively?</p>

<p>It is necessary because I want to keep my submodules folder on the parent modules folder, keeping the workspace clean, without having to recursively re-clone everything every time a new submodule is added.</p>

<h1>Update</h1>

<p>I tried doing:</p>

<pre><code># Move the submodule to the parent repository
mkdir -p .git/modules
# shopt -s dotglob
mv unrelated_repo/main_repo_submodule/.git/ .git/modules
printf ""gitdir: ../../.git/modules/main_repo_submodule\n"" &gt; unrelated_repo/main_repo_submodule/.git
</code></pre>

<p>But git says the submodule is not found.</p>
","0","4934640","",""
"8150769","171278","2011-11-16 11:15:48","0","385","<git><mercurial><git-submodules><mercurial-subrepos>","How to share a .git folder among several projects?","<p>I want to work with Git repositories or sub-repositories <a href=""http://mercurial.selenic.com/wiki/ShareExtension"" rel=""nofollow"">like in Mercurial Share extension</a>.</p>

<p>So, here's what I have:</p>

<pre><code>mkdir orig
cd orig
echo ""osthuaosteh"" &gt; abc
git init --shared
git add abc
git commit -m 'init'
cd ..
mkdir another
</code></pre>

<p>How can I initialize a repo in <code>another</code> so that it shares the repository with <code>orig</code>?</p>

<p>I need this for a big library that I want to include as a sub-repository. The repo weighs hundreds of megs, so I want to reuse some of the folders.</p>

<p>Update: I want to be able to have different revisions in different working folders.</p>
","2","171278","",""
"26151537","3944241","2014-10-01 22:11:31","1","604","<git><github><git-submodules><github-for-mac>","Update git submodules recursively","<p>Maybe this is kind of a dumb question, however I can't seem to wrap my head around this.</p>

<p>I have a repository with 3 submodules, one of them beeing a sub-submodule.
All three submodules are third party open source projects on GitHub.</p>

<p>Structure:</p>

<pre><code>My Project
L SubmoduleA
L SubmoduleB
  L SubmoduleC
</code></pre>

<p><em>How do I update all three submodules to the latest available commit (on master branch) on GitHub?</em></p>

<p><strong>EDIT:</strong> Of course I don't want to get the <em>latest</em> commit of <code>SubmoduleC</code> but the one, that is referenced within <code>SubmoduleB</code>. This will change a lot with updates to <code>SubmoduleB</code>.</p>
","2","3944241","0","0"
"44684622","2183021","2017-06-21 19:21:58","0","136","<git><git-submodules>","Is there a way to have a git submodule not store a particular SHA?","<p>On my project, we are using git submodules to manage some plugins.  Both our core project and the submodules are being developed on in parallel.  As a result, it doesn't work well for us that we have to update the SHA of the submodule in the core project every time the submodule moves forward (and have to resolve conflicts on that SHA between different developers, etc).</p>

<p>We would like to tell it to track a branch and let that be that.  But it appears that submodule branch tracking makes it easier to update the submodule, but does nothing to alleviate our issue of having the super project point to a particular SHA instead of a branch.</p>

<p>Anybody have any suggestions for us?</p>
","8","2183021","",""
"8250263","779159","2011-11-23 23:02:02","3","232","<git><branch><git-submodules>","How to setup a git structure where a submodule requires an external library underneath it?","<p>I'm using git and my project (MyProject) has added as a submodule a public git project hosted on github (SubProject) underneath its directory structure. SubProject requires a library (SomeLibrary) to be contained underneath its directory structure.</p>

<p>Now that sucks, because if it wasn't for SubProject requiring SomeLibrary to be underneath it, this would be very simple. Because I've already added SubProject as a submodule of MyProject, there'd be nothing more to do. However, SomeLibrary is required and it isn't hosted in any git repository. So I'll create a new repository and tag it with its version number. But what's the best way of tying it all together?</p>

<p>Once SomeLibrary is in a git repository that I create for it, can I add SomeLibrary as a submodule underneath MyProject, or must it be a submodule of SubProject? If it's a submodule of SubProject, what's the best way to do it knowing that I may need to upgrade SubProject from new tagged releases over time? An example workflow would really help me wrap my head around this, because I'm having trouble conceptualizing what it would look like. (e.g. Would I branch SubProject before doing anything, or is that not necessary, meaning I could just extract SomeLibrary underneath SubProject and commit...)</p>
","0","779159","0","0"
"8271839","708082","2011-11-25 16:27:26","1","242","<git><git-submodules><githooks>","How can I init/update git submodules in a remote?","<p>I often use this pattern for easy deployment of websites:</p>

<p>I have a bare repo, which I push/pull to from my computer and this bare repo has a post-update hook that automatically does a pull in another repo (the live version).</p>

<p>However, if I add a submodule on my computer and push it, I have to manually connect to the remote and do the init/update. </p>

<p>Is there a way around it ?</p>
","0","708082","",""
"8584709","143225","2011-12-21 03:22:56","0","150","<git><kohana><git-submodules>","Should I commit nested git submodules?","<p>I have a kohana email module(<code>modules/email</code>) as a git submodule in my project and the email module has a git submodule itself(<code>vendors/swiftmailer</code>).<br>
When I init the <code>swiftmailer</code> submodule from within the <code>modules/email</code> submodule it shows the the modules/email is modified.<br>
I don't want to commit it because I didn't change it plus I committed it before and it broke my git index(which I spent too much time fixing).<br>
<strong>What should I do? Add it to .gitignore or is there something better?</strong><br>
I have little experience with git submodules. So thanks for any advice.</p>
","0","143225","",""
"26401006","1030168","2014-10-16 09:35:44","1","2019","<git><proxy><configuration><settings><git-submodules>","git config proxy for a project with submodules","<p>I have the following project setup</p>

<pre><code>ProjectA  
    -- [sub moduleB]
       -- file1
       -- file2 etc
    -- [sub moduleC]
  --file1
  --file2
  --etc
</code></pre>

<p><code>ProjectA</code> is its own project.  As are the submodules.  Each have their own files and folders and git repository.  However the problem I have is that due to company restrictions the stuff in the submodules requires me to connect to it via a proxy.  e.g. ProjectA is hosted internally but the submodules are not.  Think of the submodules as like external plugins for a bigger app.</p>

<p>I currently get around this by manually setting the proxy.</p>

<p>So inside projectA I clear the proxy setting by typing</p>

<pre><code>git config --global http.proxy """"
</code></pre>

<p>When im in the submodule I then set the proxy</p>

<pre><code>git config --global http.proxy http://&lt;proxy url&gt;:8080
</code></pre>

<p>Can I configure git to remember the proxy on a folder level?  So I don't have to keep remembering (and sometimes forgetting) to run this config command.  I would like to just do it once and then forget about it.</p>
","0","1030168","",""
"52395202","9649980","2018-09-18 22:04:14","1","495","<git><git-submodules><git-push>","Pushing changes in the git submodule","<p>I have a problem with pushing changes in submodule repo. </p>

<pre><code>add submodule add https://github.com/ikalnytskyi/termcolor.git
git add .
git commit -m ""Add the new color submodule""
</code></pre>

<p>After that I made some changes in the <strong>termcolor</strong> submodule</p>

<pre><code>cd termcolor
echo Hello&gt;&gt;hello.txt
git add .
git commit -m ""Add hello.txt""
</code></pre>

<p><strong>Finally</strong>, I want to push this commit to my remote repo, but I think git wants login and password for this submodule repo, which, of course, I don't know.</p>

<pre><code>git push origin master
Username for 'https://github.com': lyalival
Password for 'https://lyalival@github.com': 
remote: Invalid username or password.    
</code></pre>

<p><strong>So, the question is, why git doesn't push it to my project repository?</strong> </p>

<p>P.S. For instance, in my main folder, I push the changes without writing login and password, I just typing </p>

<pre><code>git push origin master
</code></pre>
","0","9649980","",""
"44727461","802911","2017-06-23 18:01:44","3","3006","<git><git-submodules>","Adding a submodule with a specific SHA1 to an existing git repo","<p>This has been asked quite a few times over the years, but never seen an actual answer.</p>

<p>I would like to add some open source code to my existing project as a submodule, but I can only use a specific commit SHA1.</p>

<p>I have set up an example to demonstrate the problem.</p>

<p>So, my main project is: </p>

<pre><code>https://github.com/BitvuLtd/myProj 
</code></pre>

<p>As you can see, there is a sub module in this project that points to:</p>

<pre><code>https://github.com/BitvuLtd/strangersPro/tree/bd06980e0d711348bc7831f6421b3c5b27948781
</code></pre>

<p>I would like to point that to the next commit up the line:</p>

<p><code>https://github.com/BitvuLtd/strangersPro/tree/1463dd07645ce4e0450aabaa952b4c657d</code></p>

<p>I don't want the most up-to-date commit as it is incompatible.</p>

<p>The closest I've got is being able to checkout the correct commit is in a separate cloned copy of the submodule using:</p>

<pre><code>git checkout 1463dd07645ce4e0450aabaa952b4c657d16da39
</code></pre>

<p>But if I do that in the submodule directory of the main project, it get:</p>

<pre><code>fatal: reference is not a tree: 1463dd07645ce4e0450aabaa952b4c657d16da39
</code></pre>
","1","802911","",""
"52414272","4877016","2018-09-19 21:12:08","1","1469","<git><git-submodules>","git submodule update ignores .gitmodules","<p>I have a git repo which has a submodule. The contents of the .gitmodule file for the main repo are:</p>

<pre><code>[submodule ""wits-mercuryAPI""]
    path = wits-mercuryAPI
    url = https://github.com/myorganization/wits-mercuryAPI.git
</code></pre>

<p>I would expect that when I issue the command...</p>

<blockquote>
  <p>git submodule update</p>
</blockquote>

<p>... it would correctly clone the submodule from the location specified in the url of the .gitmodule file. However, it apparently tries to use an older version of this file where the url points to an incorrect url, and therefore fails.</p>

<p>For the life of me I can't figure out why it behaves this way or what magic hidden property is telling this command to access some older and invisible version of the .gitmodules file.</p>
","2","4877016","",""
"8494321","165448","2011-12-13 18:33:38","-5","206","<git><clone><git-submodules><git-checkout>","I have a ruby project that needs a submodule from github","<p>I have a typical ruby project and I would like to include a submodule within that project. The submodule lives on github. How do I use the git submodule command to include the submodule in my projects vender/plugins directory?</p>

<p>Thanks.</p>
","1","165448","",""
"52424653","9191702","2018-09-20 11:56:18","3","1184","<git><git-submodules>","git pull with config ""recurse=true"" doesn´t update all submodules","<p>I have run the following git command to update my config:</p>

<pre><code>git config --global submodule.recurse true
</code></pre>

<p>The entry in .gitconfig now looks like this:</p>

<pre><code>[submodule]
    recurse = true
</code></pre>

<p>My expectation was that afterwards a <code>git pull</code> would also update all my submodules. But running </p>

<pre><code>git submodule update --init –recursive
</code></pre>

<p>again after the pull did still update some submodules.</p>

<p>Am I misunderstanding the effect of the config-setting or are there situations where git pull will still not update a submodule?</p>
","0","9191702","0","0"
"63371273","6573625","2020-08-12 06:48:05","1","738","<git><github><git-submodules>","How to set .gitmodules so that contributors don't have to fork also submodule?","<p>I have a library on github</p>
<pre><code>my_library
  |-- my_submodule 
</code></pre>
<p>with <code>.gitmodules</code></p>
<pre><code>[submodule &quot;my_submodule&quot;]
    path = my_submodule
    url = ../my_submodule.git
    branch = master
</code></pre>
<p>My contributors now need to fork both repo <code>my_library</code> and repo <code>my_submodule</code> to their github, and then be able to <code>git clone --recurse-submodules https://github.com/&lt;contributor_user_name&gt;/my_library</code></p>
<p>Otherwise they will get</p>
<pre><code>...
Submodule 'my_submodule' (https://github.com/&lt;contributor_user_name&gt;/fastai-docs.git) registered for path 'docs'
Cloning into 'my_submodule'...
Username for 'https://github.com': &lt;contributor_user_name&gt;   
Password for 'https://&lt;contributor_user_name&gt;@github.com': 
remote: Repository not found.
fatal: repository 'https://github.com/&lt;contributor_user_name&gt;/my_submodule.git/' not found
fatal: clone of 'https://github.com/&lt;contributor_user_name&gt;/my_submodule.git' into submodule path 'my_submodule' failed
</code></pre>
<p>How should I do, so contributors don't need to fork also <code>my_submodule</code> ?</p>
","0","6573625","",""
"52437755","9260060","2018-09-21 06:22:39","0","121","<git><github><atom-editor><git-submodules>","Will publishing a package with a git submodule using apm include the submodule?","<p>I have a git repository and I want to leave a separate git repo with fonts as a submodule. Can I leave it as a submodule for apm to pick it up correctly with the included submodule or do I need to add the files separately from git repository?</p>

<p>Will apm publish the package with with the repository on github added in to the main repository? </p>
","1","9260060","",""
"36386667","4935114","2016-04-03 14:29:00","89","57724","<git><version-control><git-submodules>","How to make an existing directory within a git repository a git submodule","<h2>I'm very confused about git-submodules.</h2>

<p>Basically my problem is that I can't make git understand that <code>~/main-project/submodule</code> is a submodule.</p>

<hr>

<p><strong>I have good experience with git submodules:</strong><br>
in my <a href=""https://github.com/Doron-Behar/dotfiles"" rel=""noreferrer"">dotfiles repository</a> I created the .gitmodules file in <code>~/dotfiles-repo</code> and I added there paths and urls. Since then, If I make changes to the files within the submodules and run <code>git status</code>, I'd get something like like: <code>.vim/bundle/auto-complete (new commits) # in red</code></p>

<p>I created the <code>.gitmodules</code> file in <code>~/main-project</code> but:</p>

<ul>
<li>If I make changes to <code>~/main-project/submodule</code> and even push the changes, I don't get a similar response like <code>&lt;submodule&gt; (new commits) # in red</code> when running <code>git status</code> in <code>~/main-project</code>. <strong>I just get the changes that were made in those directories</strong></li>
<li><p>When I hit the folders' links at <code>github</code> for these directories it's not directing me to the repositories themselves but I stay in the same repository.</p>

<ol>
<li>Maybe I'm missing the whole point. What are the main features of submodules?</li>
<li>Why does git understands the submodules in <a href=""https://github.com/Doron-Behar/dotfiles/tree/master/.vim/bundle"" rel=""noreferrer"">the dotfiles repo</a> but not <a href=""https://github.com/Doron-Behar/RFID-entry-permissions-sys"" rel=""noreferrer"">in my other repo</a>?</li>
<li>Is it because I have already told git to add the files inside <code>~/main-project/submodule</code> to the index?</li>
</ol></li>
</ul>

<p>I've read <a href=""https://stackoverflow.com/questions/1593620/how-to-make-part-of-an-existing-git-repository-a-submodule"">this question</a> which led me to <a href=""https://stackoverflow.com/questions/920165/howto-extract-a-git-subdirectory-and-make-a-submodule-out-of-it/1307969#1307969"">this answer</a> But I'm not sure I need <code>git-subtree</code>. I don't want to do things that might do changes hard to be revert.</p>

<blockquote>
  <p>Edit: <a href=""https://stackoverflow.com/questions/17413493/create-a-submodule-repository-from-a-folder-and-keep-its-git-commit-history"">This suggested duplicate-solution</a> didn't work either, I recieved an error that <code>Updates were rejected because the remote contains work that you do not have locally</code>. It seems that <a href=""https://stackoverflow.com/users/1092815/gableroux"">@GabLeRoux</a> practically told me to push <code>&lt;repo-A&gt;</code> to the url of <code>&lt;repo-B&gt;</code>.</p>
</blockquote>
","3","4935114","0","0"
"8520887","11414","2011-12-15 13:32:04","9","305","<git><git-submodules>","Shallow depth git submodule update or clone","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2144406/git-shallow-submodules"">Git shallow submodules</a>  </p>
</blockquote>



<p>Starting Git 1.6.5+ git clone has a <code>--recursive</code> option that also clones submodules, recursively.</p>

<p>The submodules in our project are quite large (lots of history) and sometimes take a long time to clone which can be saved by the <code>--depth 1</code> option.</p>

<p>Is there some way to shallow clone (<code>--depth 1</code>) these submodules recursively?</p>
","2","11414","0","0"
"52482733","8397886","2018-09-24 15:32:09","1","134","<bash><git><bitbucket><git-submodules><bitbucket-pipelines>","Using git submodules via bitbucket pipelines","<p>So I have a versioning script that I wanted to share across several of my repos. I decided to use submodules for this purpose–maybe not the brightest idea... </p>

<p>I am trying to call the versioning script from BB pipelines in this way:</p>

<pre><code>image: python:3.6

pipelines:
  default:
    - step:
        name: Development build - linting
        script:
          - git submodule init
          - bash versioning/version.sh 
</code></pre>

<p>Unfortunately I get the following error message:
<code>bash: versioning/version.sh: No such file or directory</code></p>

<p>However, when I run <code>echo ""$(ls)""</code> I see that the folder versioning is present. I tried running echo <code>""$(cd versioning; ls)""</code>, but that didn't work for some reason...</p>
","0","8397886","",""
"9170380","861649","2012-02-07 02:51:57","1","781","<git><git-submodules>","Is it possible in git to push submodule defined as relative path to bare?","<p>I got this scenario:</p>

<ol>
<li><p>I created a Git repository.</p>

<p>$ git init</p></li>
<li><p>Cloned an external repository in a sub directory. (using git-hg in my case)</p>

<p>$ git hg clone lib remote_uri</p></li>
<li><p>Added the the cloned library as submodule</p>

<p>$ git submodule add lib ./lib</p></li>
<li><p>Then I commited the changes</p>

<p>$ git commit -am ""added lib""</p></li>
</ol>

<p>After this procedure, if I <code>git clone</code> this repo and <code>git submodule init/update</code> the new one, I get the repo and the lib.</p>

<p>Anyway, If I try to push the repo to a bare one, and clone from the bare to another place, the new one crashes trying to get the lib.
I tried to <code>git submodule init</code> in the bare, but the command doesn't work if you doesn't have a working copy.</p>

<p>Someone got any idea what can be done?</p>

<p>** Update **
Here is an example without the hg.</p>

<pre><code>This is a way to reproduce it.
/tmp$ git clone https://github.com/gitster/git.git
/tmp$ cd git/
/tmp/git [master]$ git clone https://github.com/gitster/git.git gitrepo
/tmp/git [master]$ git submodule add ./gitrepo
/tmp/git [master]$ git commit -am ""added repo""
/tmp$ cd ..
/tmp$ git clone --bare git  gitbare
/tmp$ git clone  gitbare gittest
/tmp$ cd gittest/
/tmp/gittest [master]$ git submodule init
Submodule 'gitrepo' (/tmp/gitbare/gitrepo) registered for path 'gitrepo'
/tmp/gittest [master]$ git submodule update
fatal: repository '/tmp/gitbare/gitrepo' does not exist
Clone of '/tmp/gitbare/gitrepo' into submodule path 'gitrepo' failed
</code></pre>
","4","861649","0","0"
"36471981","1856432","2016-04-07 09:28:15","5","5092","<git><jenkins><jenkins-plugins><git-submodules>","Jenkins and updating git submodules","<p>I am using Jenkins ""Advanced sub-modules behaviour"" and checked the ""Recursively update sub modules"" option. However I get the submodule only in an old revision. I would like to always have the head revision of the submodule. I found another option in ""Advanced sub-modules behaviour"" called ""Update tracking submodules to tip of branch"". This seems to use the --remote option. Will this solve the Problem? </p>

<p>Any Ideas? </p>
","0","1856432","0","0"
"45969862","1533046","2017-08-30 21:19:45","0","673","<git><git-submodules>","git submodule: How do I keep a submodule current without commit to the superproject?","<p>I have a superproject with a single submodule. That submodule is developed completely independent of the superproject, but that is not how my superproject is setup. Currently, when the origin of the submodule gets updated, the superproject only gets updated if someone (me) runs <code>git submodule update --recursive --remote</code> AND then commits that update to the superproject. That is stupid; I don't to track any versions or commit hashes of the submodule in my superproject. All I want is to have origin/master of submodule in my superproject, whatever origin/master happens to be. I want only to have to sync the submodule and NOT commit the submodule into my superproject.</p>

<p>For example, after doing a <code>git clone</code>, in order to get the submodule, I run <code>git submodule update --init --recursive</code> and get this:</p>

<pre><code>$ git submodule update --init --recursive
Submodule 'scripts/token' (https://gitserver.company.com/token.git) registered for path 'scripts/token'
Submodule path 'scripts/token': checked out '93b6bee2031913f563f548883358a65a136bdd88'
</code></pre>

<p>But the commit hash 93b6bee2031913f563f548883358a65a136bdd88 is NOT origin/master of the token repo; that's 0f39201818985d21a1f2362ad5b519793bd4f2b6. In order to get that, I have run another <code>git submodule</code> command:</p>

<pre><code>$ git submodule update --recursive --remote
Cloning into '/Users/me/superproject/scripts/token'...
Submodule path 'scripts/token': checked out '0f39201818985d21a1f2362ad5b519793bd4f2b6'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Changes not staged for commit:
(use ""git add &lt;file&gt;..."" to update what will be committed)
(use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   scripts/token (new commits)
</code></pre>

<p>No, I don't have ""new commits"" to superproject; I just synced a submodule. I want this to work like a dependency; I want <code>token&gt;=0.0.1</code> (whatever is origin/master), but it seems like what I have is <code>token=explicit_commit_hash</code>. I don't want to support version numbers or commit hashes of submodule token in my superproject.</p>

<p><em>UPDATE:</em> In other words, if <code>git status</code> says ""up-to-date"" with no local changes before running <code>git submodule update</code>, then after <code>git submodule update</code> updates the submodule, I STILL want <code>git status</code> to say ""up-to-date"" with no local changes. </p>

<p>What am I doing wrong?</p>
","0","1533046","",""
"45994105","353030","2017-09-01 06:01:20","2","1969","<git><git-submodules>","Android - Best way to use git submodules","<p>Let me suppose a project <strong>App</strong> with 4 external modules: <strong>ModA</strong>, <strong>ModB</strong>, <strong>ModC</strong> and <strong>ModD</strong> that could be used by another projects in a re-usable way.</p>

<p>The idea behind the project is to link the project to internal git submodules into a folder named ""modules"" .</p>

<p>For example, the related settings.gradle could be:</p>

<pre><code>include ':app'
include ':modules:ModA'
include ':modules:ModB'
include ':modules:ModC'
include ':modules:ModD'
</code></pre>

<p>and all works fine with this .gitmodules file:</p>

<pre><code>[submodule ""modules/ModA""]
    path = modules/ModA
    url = ssh://git@bitbucket.org/repo/ModA.git
[submodule ""modules/ModB""]
    path = modules/ModB
    url = ssh://git@bitbucket.org/repo/ModB.git
[submodule ""modules/ModC""]
    path = modules/ModC
    url = ssh://git@bitbucket.org/repo/ModC.git
[submodule ""modules/ModD""]
    path = modules/ModD
    url = ssh://git@bitbucket.org/repo/ModD.git
</code></pre>

<p>Now, suppose that the ModA has dependencies with ModC and ModD, what is the best way to connect them? Add a sub-sub-module to ModA with ModC and ModD or deploy artifacts of ModC and ModD on maven and use them as dependencies?</p>

<h2>Module's Tree</h2>

<ul>
<li>App    

<ul>
<li>ModA 

<ul>
<li>ModC</li>
<li>ModD</li>
</ul></li>
<li>ModB </li>
<li>ModC </li>
<li>ModD</li>
</ul></li>
</ul>

<h2>The question</h2>

<p>If the App needs changes to ModC, the changes affects only the modules/ModC into App modules directory. The ModA (that has ModC like a module) doesn't see any changes.</p>

<p>Do you have any ideas? How can I handle a change one time?</p>

<p>I've a bit of confusion about this argument.</p>
","0","353030","",""
"36538813","5501675","2016-04-11 02:17:45","1","625","<git><github><git-submodules>","git submodule talking about folder that does not exist","<p>So I have C++ project in a folder on a git repository in GitHub, the file does not exist locally for me.  I tried deleting it with the command</p>

<pre><code>git rm --cached -r foldername
</code></pre>

<p>but that outputted</p>

<pre><code>fatal: pathspec 'foldername' did not match any files
</code></pre>

<p>Also I have a submodule I was trying to initialize with the following command</p>

<pre><code>git submodule update --init --recursive 
</code></pre>

<p>but it also outputs something about the nonexistant folder</p>

<pre><code>No submodule mapping found in .gitmodules for path 'foldername/anotherfolder'
</code></pre>

<p>I think this is the result of copy pasting a folder with a git repository into this folder a long time ago without initializing it as a submodule.  </p>

<p>Anyone have any suggestions? </p>

<p><strong>EDIT</strong> : So I was able to fix my problem by re-cloning the directory and doing <code>git -rm foldername</code> and similar <code>git rm -rf</code> on all supposed ""submodules"".  But I would still like it if someone could explain what exactly was going on here.</p>
","0","5501675","",""
"36564696","116388","2016-04-12 05:57:40","7","1204","<git><git-submodules>","How to use same protocol for git submodules?","<p>In a git repository R I have a submodule that I initialized with the following command:</p>

<pre><code>git submodule add git@mygitserver...
</code></pre>

<p>Now a user just cloned R using <code>https</code> and get an error when running</p>

<pre><code>git submodule init
git submodule update
</code></pre>

<p>because he doesn't have ssh (with public key uploaded on the server) access. 
So my question is, is it possible to create a submodule that will automatically uses the same protocol than the one used to clone the parent repository on the <code>git submodule update</code> command ?</p>
","0","116388","0","0"
"52617849","","2018-10-02 23:43:19","1","331","<git><git-submodules><git-checkout><git-reset>","git submodule - ignoring changes","<p>I do this all the time:</p>

<pre><code>git add .
git add -A
git commit -am ""foobar""
</code></pre>

<p>that adds everything so all of my changes are staged, but we have a git submodule in the config directory.</p>

<p>What I have been doing is using several of these commands to ""get rid of changes to the config dir"":</p>

<pre><code>git reset -- config
git checkout -- config
git checkout origin/dev config
git reset HEAD config
</code></pre>

<p>Can anyone explain what these are doing? I am not even sure if the last command is doing what I think it does.</p>
","0","","0","0"
"53514521","12711","2018-11-28 07:49:14","17","5668","<git><git-submodules>","What are the drawbacks to setting git's submodule.recurse config option to true?","<p>This question <a href=""https://stackoverflow.com/q/4611512/12711"">Is there a way to make git pull automatically update submodules?</a> has an accepted answer of configuring git like so:</p>

<pre><code>git config --global submodule.recurse true
</code></pre>

<p>Like one of the comments to that answer, I'm wondering why this isn't the default behavior of git; more precisely, what are the drawbacks of setting this configuration option?</p>
","5","12711","0","0"
"37461647","189186","2016-05-26 13:01:17","11","2601","<git><git-submodules><git-remote>","git: manage multiple remotes in a submodule","<p>My team uses a publicly available github hosted project as a submodule in our main project. We would like to manage our own patches against that project, without pushing upstream, but then we can't share those patches unless we have a mirror where we push our private branch.</p>

<p>Assuming we have the mirror, our submodule needs two remotes: one where we fetch upstream changes from, and one where we push merges with our patch branch. How can we store the information about the remotes with the submodule (or with the superproject), so that, every member of the team can trivially perform an upstream update, without having to <code>git add remote upstream ...github...project.git</code>.</p>

<p>We intend to solve the problem by writing a shell script to automate the process and a file for storing the upstream remotes, but is there a <em>git way</em> of doing this?</p>

<p>May be related, but I don't see a proper solution: <a href=""https://stackoverflow.com/questions/6589391/git-add-remote-in-submodule"">git add remote in submodule</a></p>
","2","189186","0","0"
"53525204","1734357","2018-11-28 17:42:01","5","11716","<git><git-submodules>","How to add git submodule and tag it to a release?","<pre><code>git clone my-new-repo-url
mkdir deps
cd deps
git submodule add -b 6.2.0 https://github.com/leethomason/tinyxml2.git
</code></pre>

<p>yields</p>

<pre><code>fatal: 'origin/6.2.0' is not a commit and a branch '6.2.0' cannot be created from it
Unable to checkout submodule 'deps/tinyxml2'
</code></pre>

<p>does not populate .gitmodules, but creates a folder <code>.git/modules/deps/tinyxml2</code> and adds a repo in <code>deps/tinyxml2</code></p>

<p>I thought I did this way before, and it would populate .gitmodules with</p>

<pre><code>[submodule ""deps/tinyxml2""]
    path = deps/tinyxml2
    url = https://github.com/leethomason/tinyxml2.git
    branch = 6.2.0
</code></pre>

<p>but it's not working now what's up?</p>
","0","1734357","0","0"
"53535523","7026501","2018-11-29 09:20:07","1","150","<c++11><cmake><git-submodules><clion><cmake-modules>","CMake & C++ - What is the best approach to share library between several git submodules","<p>I am working with large C++ project (using cLion) which containing 4 submodules.
I wrote small C++ library which provides the ability to read from .properties file (most common in Java..).</p>

<p>The ""Application.properties"" file should includes common variables and per-project variables.
For example; I am using Elasticsearch database and all the 4 sub-modules should know his address.
In addition, Since i have 4 foreign projects i need to maintenance constantly 5 different CMakeLists files ( 4 sub-modules 1 for the main project).</p>

<p>My solution is to set the shared code in the main project root and using it by include the library in per project.</p>

<ul>
<li>The project &amp; submodules version control is git.
I thought about it and decided that maybe I should check for more reviews before I started writing.</li>
</ul>

<p>With Gratitude,
Kobi.</p>
","0","7026501","",""
"53548330","10208721","2018-11-29 22:07:19","0","388","<git><git-submodules>","Is there a way to change the commit a git submodule points to simply by changing the .gitmodules file and committing that change?","<p>I have searched and can't find a direct answer to this question specifically.</p>

<ul>
<li>I don't want to use any of the submodule commands to update my submodule</li>
<li>I don't want to use googles repo or another tool to accomplish this.</li>
</ul>

<p>Also, is there good reason if the answer is no?
Or is this just an unfortunate design?</p>

<p>EDIT: Title for clarity</p>

<p>Additional Info:
I'm familiar with the fact that submodules use a gitlink and information located in .gitmodules as well as .git/config. </p>

<p>I should have been more clear that I'd like to know more regarding the design intent of this.</p>
","4","10208721","0","0"
"37486195","6166249","2016-05-27 14:36:13","3","1104","<git><svn><version-control><external><git-submodules>","git repo with svn external/submodule","<p>I have been searching for a long time now.
And cannot really find a good enough answer for my problem.</p>

<p>We now use SVN for our projects. These projects share 3 libraries which are also SVN repos. 
We include them into our projects via SVN externals.</p>

<p>We are looking into GIT now and I am searching for a solution to use these libraries and keep them synced between GIT and SVN.</p>

<p>I tried using submodules, but they only support GIT repos, not SVN.
Then I created a new GIT repo for our library and used that as a submodule in our GIT project. Then I added a svn remote to the submodule, which allowed me to fetch from svn and commit to svn. </p>

<p>But then I ran into the problem where the new GIT library and SVN library went out of sync. someone committed to SVN and i comitted to GIT and all hell broke loose. I cannot get them synced anymore. Merging and more stuff failed all over the place.
so the solution I came up with is not what I want. 
It generated more problems than solutions for us.</p>

<p>So, my question: What is the best solution to keep data synced?
Some relatively older projects need to keep the reference to their GIT or SVN revision(submodules do exactly what we want).</p>

<p>It is o.k. for us, for now, to keep de libraries in SVN only.
Can someone explain to me how this should/can be handled?</p>

<p>Thank you</p>
","5","6166249","0","0"
"70262347","13859333","2021-12-07 14:56:12","0","82","<git><git-submodules>","Update command in .gitmodules file throws an error","<p>I am new to the submodule feature of git and at the moment I am struggling with the .gitmodules configuration. What I want is to initialize the submodule and checkout to the develop branch and not to the head.</p>
<p>My .gitmodules looks like the following:</p>
<pre><code>[submodule &quot;test-submodule&quot;]
    path = test-submodule
    url = https://...
    update = checkout develop
</code></pre>
<p>When I run</p>
<pre><code>git submodule init
</code></pre>
<p>I get the following error: <strong>fatal: invalid value for submodule.test-submodule.update</strong></p>
<p>Any help is welcome.</p>
","5","13859333","",""
"37525188","816116","2016-05-30 12:01:48","5","3012","<git><git-submodules>","How can I pull git submodule automatically?","<p>I am assigned a project, where I will be doing backend development and another person will be handling frontend development. There is a requirement that the frontend developer does not have access to the development server, nor the project code. So, we decided to create another repository just for frontend.</p>

<p>The problem is that I don't know how to make submodule to immediately pull from the remote server when something is committed to the remote repo. I need the developer to commit and immediately see the change in the frontend. </p>

<p>I have been reading about git hooks and I have found that I can do this using <code>post-receive</code> hook. However, it doesn't seem to work. Here is what I did:</p>

<ol>
<li>From the main project's root directory, I found the following directory /.git/modules/submodule-directory/hooks</li>
<li>I created <code>post-receive</code> file with executable permission allowed.</li>
<li><p>Contents of <code>post-receive</code> file:</p>

<pre><code>#!/bin/sh
git pull
</code></pre></li>
<li><p>Pushed a change from my local machine to the submodule repo but nothing happened.</p></li>
</ol>

<p>What am I doing wrong?</p>

<p>EDIT: I am going to clarify some points regarding my question.</p>

<p>I have two repositories: The ""main"" repository, which is the entire project; and another repository, which is frontend stuff (views, assets etc). Let's call this ""frontend"" repository.</p>

<p>To my main repository, I added frontend repo as a submodule, located inside /submodules/frontend. This way, the outsourced frontend developers will not be able to see anything about the actual project. They will only see what they are working on.</p>

<p>This actually works perfectly in terms of access control and I can easily monitor the frontend development's progress separately from project. But there is one problem that I don't know how to do. </p>

<p>Our project has two separate servers - a development server and a production server. The development server needs to always be in the master branch for both main repo and frontend repo. This way, both frontend team and the backend team will be able to see their updates. Even though frontend team mainly works with templates, the templates have access to data that is stored in the database and are using a lot of stuff that are integrated to backend (e.g models).</p>

<p>In order for this ""system"" to work, I need the frontend repo to always fetch and merge whenever there is a new commit in ""frontend"" <strong>remote</strong> repo. In other words, if the frontend team does <code>git commit</code> and <code>git push</code>, the ""frontend"" repo submodule in the development server needs to immediately <code>git pull</code>. So, when the frontend guys go test their stuff, they will immediately see the latest changes.</p>

<p>I read that <code>post-receive</code> hook can do that but I need this hook to exist only for submodule. So, after some digging I found that all the submodule hooks exist in <code>/.git/modules/submodules/frontend/hooks</code>. So, I created <code>post-receive</code> hook in that directory with the following code:</p>

<pre><code>#!/bin/sh
git pull
</code></pre>

<p>But this didn't work. My question is how to make the hooks work with post-receive inside submodule?</p>

<p>I know the route that I have taken is far from perfect but this is the only way that makes sense to me when it comes to allowing devs to only access one directory without having access to the development server.</p>

<p>I hope this makes sense.</p>
","5","816116","0","0"
"70291912","6911200","2021-12-09 14:49:42","1","101","<windows><docker><git-submodules><gitlab-ci-runner>","Gitlab-runner submodule .../.git/modules/... is not an directory","<p>I have a repository with one submodule. The CI is configured to clone the submodule:</p>
<pre class=""lang-yaml prettyprint-override""><code>variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: normal
</code></pre>
<p>I then created two jobs. One job to build on debian and one job build on windows. The debian build job works fine the submodule is cloned and the correct commit is checked out.</p>
<pre class=""lang-yaml prettyprint-override""><code>build:debian:
    image: debian
    stage: build
    tags:
        - linux
        - docker
    script:
        - qmake project.pro
        - make
</code></pre>
<p>But the windows job fails during cloning the submodule:</p>
<pre class=""lang-yaml prettyprint-override""><code>build:windows:
    image: windows
    stage: build
    tags:
        - windows
        - docker
    script:
        - qmake.exe project.pro -spec win32-msvc &quot;CONFIG+=release&quot; -r
        - nmake clean
        - jom.exe -j4
</code></pre>
<p>The error looks like this:</p>
<pre><code>Cloning into 'C:/builds/group_name/project_name/submodule_name'...
fatal: Invalid path 'C:/builds/group_name/project_name/.git/modules/submodule_name': Not a directory
fatal: clone of 'https://gitlab-ci-token:[MASKED]@gitlab.domain.com/group_name/submodule_name.git' into submodule path 'C:/builds/group_name/project_name/submodule_name' failed
Failed to clone 'submodule_name' a second time, aborting
</code></pre>
<p>I did not posted the first try since it is the same error message.</p>
<p>Do someone know this error, has a solution or maybe an idea how to fix or how to debug?</p>
","2","6911200","0","0"
"70301880","50899","2021-12-10 08:50:31","1","813","<ssh><bitbucket><git-submodules><bitbucket-pipelines>","Bitbucket pipeline does not handle relative git submodule url for ssh checkout?","<p>I have a bitbucket hosted git repository, which has a git submodule repo.
I'd like to use a relative url, to allow both https and ssh usage, in the <code>.gitmodules</code> file:</p>
<pre><code>[submodule &quot;sm-ourlib&quot;]
path = sm-ourlib
# url = git@bitbucket.org:companyname/ourlib.git
# Use relative url to allow for both HTTP and SSH access, see https://stackoverflow.com/a/44630028/50899
url = ../ourlib.git
</code></pre>
<p>However, it seems bitbucket pipelines can't handle the relative url as expected, since it doesn't use ssh for the subrepo for relative urls, but instead uses https and fails. (for the absolute url, it uses ssh correctly).</p>
<p>The pipeline run fails in the <code>git submodule update --init</code> step with:</p>
<pre><code>+ git submodule update --init
Submodule 'sm-ourlib' (http://bitbucket.org/companyname/ourlib.git) registered for path 'sm-ourlib'
Cloning into '/opt/atlassian/pipelines/agent/build/sm-ourlib'...
fatal: could not read Username for 'https://bitbucket.org': No such device or address
fatal: clone of 'http://bitbucket.org/companyname/ourlib.git' into submodule path '/opt/atlassian/pipelines/agent/build/sm-ourlib' failed
Failed to clone 'sm-ourlib'. Retry scheduled
Cloning into '/opt/atlassian/pipelines/agent/build/sm-ourlib'...
fatal: could not read Username for 'https://bitbucket.org': No such device or address
fatal: clone of 'http://bitbucket.org/companyname/ourlib.git' into submodule path '/opt/atlassian/pipelines/agent/build/sm-ourlib' failed
Failed to clone 'sm-ourlib' a second time, aborting
</code></pre>
<p>Is this a known issue, or am I doing something wrong?</p>
","0","50899","",""
"70302679","3909890","2021-12-10 09:57:15","1","1859","<git><git-submodules>","How do I discard modified content in git submodules?","<p>I recently ran a git submodule <code>init</code> and <code>update</code> commits in my staging branch. This led to git downloading a bunch of changes from submodules that I do not want to put into staging and wish to discard completely.</p>
<pre><code>Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   path-to/submodule1 (modified content)
        modified:   path-to/submodule2 (new commits,modified content)
    …


no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>I'd like to discard all of these changes and and not add anything to my current branch. How do I do this?</p>
","0","3909890","",""
"70322904","11814637","2021-12-12 10:55:55","0","102","<git><github><git-submodules><gitignore><ignore>","Is it possible to use the .gitignore file from within a submodule as the ignore file for the repository?","<p>I have created a submodule to organise frequently used files from my repositories, to access them using</p>
<pre><code>git submodule add \repo\
</code></pre>
<p>I was wondering if I could create an ignore file in this submodule to avoid having to create one each time I make a new repository.</p>
<p>If my folder structure looks like this:</p>
<pre class=""lang-sh prettyprint-override""><code>root
│   foo.log
│
└───submodule
        .gitignore
</code></pre>
<p>and <code>.gitignore</code> has the following pattern:</p>
<pre><code>*.log
</code></pre>
<p>Is it possible to use the <code>.gitignore</code> file in <code>root\submodule\</code> to ignore the file: <code>foo.log</code>?</p>
<p>If not, is my best option to just copy the <code>.gitignore</code> file into the project manually?</p>
<p>Thanks for your help.</p>
","5","11814637","",""
"70325756","8684171","2021-12-12 17:01:17","1","352","<python><import><git-submodules>","ImportError while importing from two git submodules","<p>I've installed two git submodules into my project. Those submodules contain a lot of relative imports, so if you just import something from them, they will not find necessary modules. This problem can be easily solved by adding following line before imports:</p>
<pre><code>sys.path.insert(0, './yolov5_face') # where ./yolov5_face is path to submodule
</code></pre>
<p>But that solves problem only for one submodule.
I have following project structure:</p>
<pre><code>/yolov5 # submodule
/yolov5_face # submodule
detect_face.py # script, which imports yolov5_face
track.py # script, which imports yolov5
</code></pre>
<p>Submodules are almost identical but have slightly different classes and functions. Script detect_face.py gets loaded first, so I insert './yolov5_face' to sys.path before imports from submodule. Then, in trace.py I insert './yolov5' before imports. So my sys.path after second insertion looks that way:</p>
<pre><code>['./yolov5', './yolov5_face', '/home/sher/Dev/realtime-detection', ... ]
</code></pre>
<p>And I have following error:</p>
<pre><code>File &quot;/home/sher/Dev/realtime-detection/track.py&quot;, line 14, in &lt;module&gt;
    from yolov5.models.common import DetectMultiBackend
File &quot;/home/sher/Dev/realtime-detection/yolov5/models/common.py&quot;, line 23, in &lt;module&gt;
    from utils.datasets import exif_transpose, letterbox
ImportError: cannot import name 'exif_transpose' from 'utils.datasets' (/home/sher/Dev/realtime-detection/./yolov5_face/utils/datasets.py)
</code></pre>
<p>Function <em>exif_transpose</em> resides in yolov5 submodule and its path appears first in sys.path, but it seems like python searches for this import in yolov5_face instead. yolov5_face contains <em>utils.datasets</em> module too, but does not have <em>exif_transpose</em> function. Also all imports from <em>detect_face.py</em> loads just fine.</p>
<p>Is there a way to resolve this problem and use two submodules together?</p>
","0","8684171","",""
"70349096","12386300","2021-12-14 12:44:25","0","833","<git><git-submodules>","git --no-replace-objects ineffective when changing submodule ref","<p>I have super-repo/submodule structure where some submodules need to be migrated to another upstream source. The submodule itself is using git-replace internally in order to mimick the behavior of the old upstream source (git histories are unrelated but the replace refs ensure that old commits can be found).</p>
<p>What I could not achieve is easy editing of the super repo in cases where I want to migrate an existing branch there at once to point to the new refs. However, doing that without new commits on the submodule!</p>
<p>When I do a <code>git add smfolder</code> there, nothing happens. git seems to assume that the SM is unchanged. And it might look unchanged but the reference stored in super-repo is still the old one, and I wish to convert it to a new one.</p>
<p>I have even tried <code>git --no-replace-objects add smfolder</code> following git-replace manpage. This is also not effective. What else can I use to overcome this shadowing from git-replace?</p>
","4","12386300","",""
"70411104","318517","2021-12-19 11:44:44","0","272","<git><branch><git-submodules>","Untracked files error when replacing hard coded directory with git submodule","<p>I have a git repository with a directory under lib/some_module.</p>
<p>All the files in sub_module are part of the main git repository.</p>
<p>While working on branch B, I deleted everything in some_module, and pulled it from the some_module git. So, now some_module is a submodule of the main repository, but it sits in the same place - lib/some_module.</p>
<p>I added the path to .gitmodules, and ran <code>git submodule init</code> and <code>git submodule update</code>.
I'm now trying to switch back to main branch, and getting this error:</p>
<pre><code>error: The following untracked working tree files would be overwritten by checkout:
        lib/some_module/.gitignore
        lib/some_module/file1
        ...
</code></pre>
<p>I obviously don't want to delete these files, as they're now part of the submodule.
What is the best way to handle this?</p>
<p>Thanks!</p>
","0","318517","",""
"70417566","6772235","2021-12-20 05:05:45","0","268","<git><eslint><git-submodules><tsconfig><typescript-eslint>","Repo working with git submodules causeing eslint to look in the wrong dir","<p>Started a new project and intended to use git sub-modules to separate server, client, and other resources into their own repos, while using a main repo to house the <code>dev.docker-compose-yaml</code>,  <code>docker-compose.yaml</code>, static site and other resources.</p>
<p>(This could be using sub-modules wrong so correct me if im wrong)</p>
<p>The project structure looks like this:</p>
<p><a href=""https://i.stack.imgur.com/lPimM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lPimM.png"" alt=""proj_strut"" /></a></p>
<p>Client is react, server is Nest. Each contains their own <code>Dockerfile</code> which is built by <code>dev.docker.compose.yaml</code>. The app runs fine, but eslint is throwing an error:</p>
<pre><code>Parsing error: Cannot read file 'c:\users\&lt;user&gt;\programing\projects\&lt;thing&gt;\tsconfig.json'. eslint [1, 1]
</code></pre>
<p>The correct path for the file its looking for is:</p>
<pre><code>'c:\users\&lt;user&gt;\programing\projects\&lt;thing&gt;\**server**\tsconfig.json'
</code></pre>
<p>Is there a way to correct this? Should I not use sub-modules like this?</p>
<p>Thanks</p>
","0","6772235","",""
"37662267","6233380","2016-06-06 16:17:40","1","36","<git><github><repository><git-submodules><git-push>","Upon pushing an update to my gh-pages remote branch, i received an email from github, “Page build failure”","<p>So, I pushed local files to github and when I tried to use gh-pages to host, it gives me a problem saying ""The submodule <code>drawer</code> was not properly initialized with a <code>.gitmodules</code> file."" I tried going into my terminal and using git submodule init and git submodule update but it says everything is up to date. I have no idea what is wrong. Can anyone help?</p>
","3","6233380","",""
"70502080","13784106","2021-12-28 01:54:18","1","1282","<git><github><git-submodules>","Cannot open git submodule folder on GitHub online","<p>I recently added <a href=""https://github.com/ROBOTIS-GIT/turtlebot3_simulations/tree/noetic-devel"" rel=""nofollow noreferrer"">this</a> github repo as a submodule in my project repo. I cannot open the root folder of the repo in my project repo <a href=""https://github.com/WaliaRohan/TurtlebotNavigation/tree/main/catkin_ws/src"" rel=""nofollow noreferrer"">here</a>. I looked at <a href=""https://stackoverflow.com/a/16300781/13784106"">this</a> answer and it says that both the name and the commit hash should appear as links but that does not seem to be the case for me. I directly cloned the submodule repo into my project, so I had to first do <code>git rm --cached catkin_ws/src/turtlebot3_simulations/</code> and then execute <code>git submodule add https://github.com/ROBOTIS-GIT/turtlebot3_simulations/tree/noetic-devel catkin_ws/src/turtlebot3_simulations/</code> to add the submodule. This is my first time using submodules and I am not sure what I am doing wrong. Looking for any kind of hints on what I did wrong and what is the correct way to fix this. Thank you!</p>
","0","13784106","",""
"53695232","10198627","2018-12-09 18:10:05","7","5573","<java><git><maven><git-submodules>","git: Split existing repository into submodules","<p>I only found answers on how to use git subtrees to split up a repository. However, I explicitly want submodules.</p>

<p>It's a Java maven project. Currently, everything is in one maven project and one repository. My goal is to achieve something like this:</p>

<p>The root repository should contain the main pom.xml, system documentation, etc
Then there should be a few submodules, one for a utility library, one for the main application, and so on. The submodules are their own maven project, referenced from the main maven project in the root repository. The root repository will not contain any source code.</p>

<p>I could create everything new from current HEAD, but it is important to me that the commit history is kept as complete as possible.</p>
","0","10198627","0","0"
"53700354","159145","2018-12-10 06:13:07","2","150","<git><azure-web-app-service><git-submodules><kudu>","Why is git misinterpreting a colon in my submodule URL?","<p>My repo's <code>.gitmodules</code> file looks like this:</p>

<pre><code>[submodule ""deps/Framework""]
    path = deps/Framework
    url = git://git@github.com/MyOrg/framework-php.git
    branch = reorg
[submodule ""deps/MyClient""]
    path = deps/MyClient
    url = git://git@github.com/MyOrg/myclient-php.git
    branch = publish
</code></pre>

<p>when I run <code>git submodule update --init --progress</code> in Azure Kudu's command-line I get this error:</p>

<pre><code>Cloning into 'D:/home/site/repository/mywebsite/deps/MyClient'...
ssh: Could not resolve hostname github.com:MyOrg: Name or service not known
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.
fatal: clone of 'ssh://git@github.com:My/Myclient-php.git' into submodule path 'D:/home/site/repository/mywebsite/deps/MyClient' failed
Failed to clone 'deps/MyClient'. Retry scheduled
Cloning into 'D:/home/site/repository/mywebsite/deps/Framework'...
ssh: Could not resolve hostname github.com:MyOrg: Name or service not known
fatal: Could not read from remote repository.
</code></pre>

<p>Why is it converting <code>github.com/MyOrg</code> into <code>github.com:MyOrg</code> (which is a valid SSH URL anyway) and then rejecting it?</p>

<p>My <code>git config -l</code> output does not list any <code>submodule...</code> entries.</p>
","1","159145","0","0"
"70576531","7543701","2022-01-04 09:22:27","0","415","<git><git-submodules><git-bundle>","Cloning submodule from a git bundle using the .gitmodules file","<p>I have bundled a repo and stored the repo.bundle file on my filesystem. I need to clone from this bundle as a submodule in another repo which currently has a .gitmodules file with the remote url. In order to clone from the git bundle stored locally on my system, I made the following change to my .gitmodules file:</p>
<pre><code>[submodule &quot;myrepo_path/submodule_path&quot;]
    path = myrepo_path/submodule_path
    url = file:///home/myuser/MY-BUNDLES/repo.bundle
    fetch = +refs/heads/*:refs/remotes/origin/*
    ignore = all
</code></pre>
<p>However when I do a git submodule init, the cloning fails with the following error:</p>
<pre class=""lang-sh prettyprint-override""><code>$ git submodule update --init
Cloning into '/home/myuser/Desktop/Repos/myrepo_path/submodule_path'...
fatal: too large to be a .git file: '/home/myuser/MY-BUNDLES/repo.bundle'
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>
<p>The bundle is a 1.9G file. I want to know if it is possible to init my submodules in the above manner? Or the only option for me is to explicitly clone from the git bundle using the <code>git clone</code> command</p>
","0","7543701","",""
"26523726","4173053","2014-10-23 08:07:05","1","30","<git><git-submodules>","Does commiting a git repo containing a submodule affect the submodule repo?","<p>I have a repository containing a git submodule.  Everytime I try to commit I am told I cannot commit at this time and to sort all dependencies.  Could this be the fact that I have a submodule?</p>

<p>error message:</p>

<p>error: Entry 'sphere.py' would be overwritten by merge. Cannot merge.</p>

<p>Thanks</p>
","2","4173053","",""
"9189575","226889","2012-02-08 08:00:41","179","142883","<git><git-submodules><git-track>","git submodule tracking latest","<p>We are moving our (huge) project to git and we are thinking about using submodules. Our plan is to have three different heads in the superproject:</p>
<blockquote>
<p>release, stable, latest</p>
</blockquote>
<p>The project leads will handle the release and stable branches. They will move the submodules as required.</p>
<p>The issue is the &quot;latest&quot; head. We would like the superproject &quot;latest&quot; head to track the master branches of all the submodules (automatically). And also it would be great if it would show the history of all commits to the submodule.</p>
<p>I have looked at gitslave, but it is not quite what we want. Any suggestions?</p>
","2","226889","0","0"
"63486789","4669801","2020-08-19 12:19:21","0","328","<git><git-submodules>","How to update submodule url with git mirror","<p>I migrated my repo via use command <code>git clone --mirror myrepo.git</code></p>
<p>My repo have a git submodule, the submodule url has changed.</p>
<p>How do I update submodule url in mirror folder?</p>
<p><a href=""https://i.stack.imgur.com/JKjIz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JKjIz.png"" alt=""enter image description here"" /></a></p>
","0","4669801","",""
"44855669","4046605","2017-06-30 22:40:43","6","1232","<git><bash><shell><git-submodules><githooks>","git rev-parse --git-path hooks always return absolute path","<p>Is there an equivalent command to this that always returns the absolute path?</p>

<pre><code>git rev-parse --git-path hooks
</code></pre>

<p>When I'm in a submodule, I get an absolute path, but when I'm in the root repository, I get</p>

<blockquote>
  <p>.git/hooks</p>
</blockquote>
","4","4046605","0","0"
"44861194","8192572","2017-07-01 12:57:30","2","4252","<git><git-submodules><youcompleteme>","git asks to commit submodule modified content","<p>Recently I updated submodules in my vim configuration repository with this command:</p>

<pre><code>git submodule update --recursive --remote
</code></pre>

<p>And when I called <code>git status</code> I got this:</p>

<pre><code>On branch master
Your branch is ahead of 'origin/master' by 5 commits.
  (use ""git push"" to publish your local commits)
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

        modified:   .vim/pack/starter-pack/start/YouCompleteMe (modified content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Then I followed the chain of submodules that have ""modified content"" and found that the only modification was the untracked commits of submodules:</p>

<pre><code>On branch master
Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
  (use ""git pull"" to update your local branch)
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   vendor/bottle (new commits)
        modified:   vendor/jedi (new commits)
        modified:   vendor/waitress (new commits)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>master branches of these submodules (bottle, jedi, waitress) are behind master branches of their remote origins, so I suppose what <code>git submodule update</code> did is not just pull origins of each repo, but find appropriate version that parent repository requires.</p>

<p>Why even git marks this repos with <code>(new commits)</code> if it is exact commits that parent modules require? What is going on there?</p>
","0","8192572","0","0"
"9305293","990524","2012-02-16 03:52:33","3","309","<git><cvs><git-submodules>","Converting 'CVS era' repo into git repo's with submodules","<p>We have a very large ancient flat CVS repo with an example format as below. I have imported each subdir as its own git repo with full history.</p>

<pre><code>.
├── liba
├── libb
├── libc
├── prog1
├── prog2
└── prog3
</code></pre>

<p>Lets say that the 3 programs use libraries in the following way:</p>

<pre><code>.
├── prog1
│   ├── liba
│   └── libb
├── prog2
│   ├── libb
│   └── libc
└── prog3
    ├── liba
    └── libc
</code></pre>

<p>Because CVS allows tagging part of the tree - we tag each library and program release with a version tag. eg <code>liba_4x23</code>, <code>prog3_2x22</code>.</p>

<p>We also tag the program with every version of library it uses at release (ie <code>liba_3x19</code> <code>libc_7x88</code>)</p>

<p>If we release a new version of the program without a library tag - the tag stays the earliest version of the program it was used.<br>
Now due to the way the git import works - it actually ends up at the latest version of the program (not to worried about that though)</p>

<p>Git submodules seem to be a very good solution for this - a version of a program can be checked out and it pulls in all the right version of libraries as submodules.</p>

<p>Now since all current programs are at different releases of libraries - I would need to retrofit a submodule at a particular version.</p>

<ul>
<li><code>prog1</code> is linked with <code>libb_4x50</code> </li>
<li><code>prog2</code> is linked with <code>libb_4x70</code></li>
</ul>

<p>Assuming <code>libb_4x70</code> is latest version then the example of <code>prog2</code> is easy</p>

<pre><code>git checkout prog2
cd prog2
git submodule add libb
.... done
</code></pre>

<p>So how to add <code>libb</code> tagged with version (not branched) <code>4x50</code> to <code>prog1</code>?</p>

<p>Other advice appreciated if you have a better idea :-)</p>

<p>What we may also want to do is go back 3 version of the program and set the appropriate submodules for each version. For either backwards compatibility and also as an example to management on how it will work.</p>
","0","990524","",""
"63512596","6440892","2020-08-20 20:19:43","0","39","<git><git-submodules>","Is it possible to make a git submodule only allow updates to commits that have Tag(s)?","<p>I have a project where I enforce, on myself, to tag and &quot;release&quot; a submodule before I can allow the parent to updated. Sometimes I forget and have to retroactively do this. I wonder if there is a way to enforce a rule that a submodule can only update to commits that have been tag'd in the submoduled repo?</p>
","0","6440892","",""
"9357837","177056","2012-02-20 08:00:08","4","559","<git><github><git-submodules>","Download Submodules on github.com","<p>I host a project on github.com. My project have some git submodules.</p>

<p>One can clone a project with submodules with <code>git clone --recursive</code>, but since my audience are not developers, but people who never heard of git, I wonder if there is a way to make it possible to download project with submodules?</p>
","0","177056","",""
"27138450","2480148","2014-11-25 23:04:13","4","1564","<git><containers><docker><bower><git-submodules>","Failed to execute git command in Docker container using fig/crane","<p>I use <a href=""https://github.com/michaelsauter/crane"" rel=""nofollow"">crane</a> to orchestrate my containers and I've got a git submodule for my project sources (a NodeJS app). When I run up my containers when it tries to <code>bower install</code> in my project root this error occurs:</p>

<pre><code>bower jquery#~2.1.1            ECMDERR Failed to execute ""git ls-remote --tags --heads git://github.com/jquery/jquery.git"", exit code of #128

Additional error details:
fatal: Not a git repository: ../../.git/modules/src/web
</code></pre>

<p>Here is my <code>crane.yml</code> config file:</p>

<pre><code>containers:
    db:
        dockerfile: images/db
        image: project/db
        run:
            detach: true
    web:
        dockerfile: images/web
        image: project/web
        run:
            volume: [""src/web:/src""]
            publish: [""8000:8000""]
            link: [""db:mongo""]
            detach: true
</code></pre>

<p>And here is my <code>fig.yml</code></p>

<pre><code>db:
    build: images/db
web:
    build: images/web
    volumes:
      - src/web:/src
    links:
      - db:mongo
    ports:
      - ""8000:8000""
</code></pre>

<p>The weird thing is when I set my volume outside the current directory (<code>../myproject</code> for example) it works. But I really need to have a submodule in my repository</p>

<p><strong>Edit</strong></p>

<p>It doesn't work if I use command line. So it's not related to fig or crane but maybe to how Docker, bower or git work.</p>

<p><strong>Note</strong></p>

<ul>
<li>I'm on Archlinux</li>
<li>I also tried with <a href=""https://github.com/docker/fig"" rel=""nofollow"">Docker fig</a>, It generates the same error</li>
</ul>

<p>Thanks for your help !</p>
","3","2480148","0","0"
"27508018","1357328","2014-12-16 15:26:39","1","469","<git><repository><git-submodules>","create a parent repo for an existing git repo","<p>I had an existing maven project <code>A</code> as a git repository. Later I realised that there were more related projects to be created. I have created a parent project and placed all the project <code>P</code> and placed <code>A</code> as a submodule to the maven project. </p>

<p>Now I want to make the same changes to be reflected to the git repository. But the repository root has changed. How should I go about to preserve the history of existing project and reflect the hierarchy as well in the project tree.</p>

<p>I don't want to create a new repo for <code>P</code> but reflect the same repo's root to point at <code>P</code>. If I move my <code>.git</code> directory from <code>A</code> to the <code>P</code> directory and commit the changes would that solve the purpose for me.  </p>
","1","1357328","0","0"
"63604486","522209","2020-08-26 19:27:24","0","194","<git><git-submodules>","How to rename a git folder that has a submodule in its sub-directory","<p>My folder structure is:</p>
<blockquote>
<p>~/git_project/bad_name/some/folder/structure/submodule_folder/</p>
</blockquote>
<p>I would like to change it to:</p>
<blockquote>
<p>~/git_project/better_name/some/folder/structure/submodule_folder/</p>
</blockquote>
<p>So I did:</p>
<pre><code>cd git_project
git mv bad_name better_name
</code></pre>
<p>When I checked my git status after this command, I got this:</p>
<pre><code>fatal: Could not chdir to '../../../../../../../bad_name/some/folder/structure/submodule_folder': No such file or directory
fatal: 'git status --porcelain' failed in submodule better_name/some/folder/structure/submodule_folder
</code></pre>
<p>How do you rename a folder that has submodule in its sub-directories?</p>
","2","522209","",""
"64221229","13732414","2020-10-06 07:34:25","1","313","<git><merge><git-submodules><conflict><git-status>","Committing impossible due to unmerged files with git submodules","<p>We have a repo with a bunch of submodules and we are currently working on a <em>develop</em> branch.</p>
<p>Starting from the same common commit, two developers, <strong>A</strong> and <strong>B</strong>, made some changes to some files (unimportant here I think) and added a new revision of one of the submodules, then commited to develop.
Now <em>develop</em> holds <em>rev1</em> of <em>subm</em> commited by developer <strong>A</strong>, while <strong>B</strong>'s <em>develop</em> branch holds <em>rev2</em> of <em>subm</em>, thus creating a conflict when <strong>B</strong> tries to pull changes made by <strong>A</strong> from remote.</p>
<p>This is what <code>git status</code> gives to <strong>B</strong>, after a merge with conflicts:</p>
<pre><code>Your branch and 'origin/develop' have diverged,
and have 1 and 1 different commits each, respectively.
  (use &quot;git pull&quot; to merge the remote branch into yours)

All conflicts fixed but you are still merging.
  (use &quot;git commit&quot; to conclude merge)

Changes to be committed:
        modified:   path/to/another/submodule
        modified:   path/to/file/file.html
</code></pre>
<p>Now, whenever <strong>B</strong> tries to commit, it gets:</p>
<pre><code>U       path/to/subm
error: Committing is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'
hint: as appropriate to mark resolution and make a commit.
fatal: Exiting because of an unresolved conflict.
</code></pre>
<p>I tried looking up for solutions and they all seem to suggest to add the conflicted files to the stage to mark them as resolved, but <code>git status</code> does not list any unmerged files.</p>
<p>It looks like I am missing something here, any help would be gladly appreciated.</p>
","3","13732414","",""
"64240521","6637691","2020-10-07 08:50:36","1","136","<git><git-submodules>","git: fetch --recurse-submodules does fetching twice","<p>I have in git a superproject and a few submodules. After executing the command</p>
<p><code>git fetch --all --recurse-submodules</code></p>
<p>at the superproject, all the submodules will be fetched twice.
Do you know why?</p>
<p>Greetz</p>
","0","6637691","",""
"64288673","13833273","2020-10-09 23:58:04","0","26","<github><git-branch><git-submodules>","How to pull changes from github submodule branch ""A"" into parent module branch ""B""","<p>I've made some changes in repository A, that are reflected in branch A. This repository A is a submodule for repository B. I want to reflect repository A's branch A changes in repository B's branch Y. How do I do this?</p>
","0","13833273","",""
"9932275","1200039","2012-03-29 19:37:43","4","198","<git><git-submodules>","How can I get git clone --recursive A B to use the submodule repositories in A?","<p>It seems that if project A has submodules with remote urls, then <code>git clone --recursive A B</code> insists on pulling down copies of each submodule repository from the remote url.  Is there a way to get git to clone the submodule repositories from the copies in A instead of pulling from the remote repositories?</p>

<p>I suppose I could do something like:</p>

<pre><code>git clone A B
cd A
git submodule --quiet foreach 'echo [submodule \""$path\""]\\n path = $path\\n url = $toplevel/$path ' &gt; ../B/.gitmodules
cd ../B
git submodule sync
git submodule update --init --recursive
git checkout .gitmodules
cd ..
</code></pre>

<p>Is there an easier way?</p>
","0","1200039","0","0"
"64335832","5097445","2020-10-13 13:01:02","1","104","<git><git-submodules>","How to isolate the log of a git submodule","<p>Is it possible to show the git log of a submodule WITHOUT being inside it or interleaving?</p>
<p>Such as</p>
<pre><code>git log &lt;my_submodule&gt;
</code></pre>
<p>And only see the commits to it from its remote repo.</p>
","0","5097445","0","0"
"10184809","80353","2012-04-17 03:51:34","1","142","<php><git><cakephp><twig><git-submodules>","How do I have my project specific files inside a git submodule?","<p>I have a cakephp project. Let us call it Project <em>Super</em>.</p>

<p>It has its own github repo.</p>

<p><em>Super</em> has git submodule that pulls from this repo. <a href=""https://github.com/predominant/TwigView"" rel=""nofollow"">https://github.com/predominant/TwigView</a></p>

<p>The issue is that I need to have my own project specific extensions, so I need to create new files in the Lib folder of <a href=""https://github.com/predominant/TwigView"" rel=""nofollow"">https://github.com/predominant/TwigView</a> and I need to add require_once statements inside the file View/TwigView.php of <a href=""https://github.com/predominant/TwigView"" rel=""nofollow"">https://github.com/predominant/TwigView</a></p>

<p>I want to maintain the git submodule as much as I can. </p>

<p>I know I can fork the <a href=""https://github.com/predominant/TwigView"" rel=""nofollow"">https://github.com/predominant/TwigView</a> and add the project specific extension files and changes. </p>

<p><em>Super</em> would then have this forked version as git submodule.</p>

<p>However, I am not pleased with that because that means </p>

<ol>
<li>it is slightly harder to update the forked version from its upstream</li>
<li>I need to have 1 forked version per project.</li>
</ol>

<p>What would be the cleanest, and easily maintainable way to use <a href=""https://github.com/predominant/TwigView"" rel=""nofollow"">https://github.com/predominant/TwigView</a> as a git submodule in Project <em>Super</em> and other cakephp projects?</p>
","0","80353","",""
"64994791","3693060","2020-11-24 21:02:41","0","304","<git><github><azure-devops><repository><git-submodules>","Copy projects from git submodule to ADO repository","<p>I have an ADO repository which includes a GitHub repository as a git submodule.</p>
<p>Here is an example of .csproj file in ADO repo:</p>
<pre><code>&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFramework&gt;netcoreapp3.1&lt;/TargetFramework&gt;
    &lt;AzureFunctionsVersion&gt;v3&lt;/AzureFunctionsVersion&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;PackageReference Include=&quot;Microsoft.Azure.Functions.Extensions&quot; Version=&quot;1.0.0&quot; /&gt;
    &lt;PackageReference Include=&quot;Microsoft.NET.Sdk.Functions&quot; Version=&quot;3.0.3&quot; /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;ProjectReference Include=&quot;..\..\..\Repositories.ABC\Repositories.ABC.csproj&quot; /&gt;
    &lt;ProjectReference Include=&quot;..\..\..\Repositories.XYZ\Repositories.XYZ.csproj&quot; /&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>
<p>Project references mentioned in .csproj - Respositories.ABC and Repositories.XYZ are a part of GitHub repository (git submodule).
Is there a way to copy the projects - Respositories.ABC and Repositories.XYZ from git submodule to ADO repository in the specified path so that build will not fail?</p>
<p>Here is my project structure:
<a href=""https://i.stack.imgur.com/fQlTm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fQlTm.png"" alt=""enter image description here"" /></a>
<a href=""https://i.stack.imgur.com/rZtL1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rZtL1.png"" alt=""enter image description here"" /></a>
<a href=""https://i.stack.imgur.com/eAE1w.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eAE1w.png"" alt=""enter image description here"" /></a></p>
<p>Here is my submodule structure:</p>
<p><a href=""https://i.stack.imgur.com/OQbbj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OQbbj.png"" alt=""enter image description here"" /></a></p>
","0","3693060","",""
"10205438","177116","2012-04-18 08:13:18","35","6702","<git><github><git-submodules>","Can I have a nested git repo inside a git-ignored folder?","<p>I have a git repo which have following folders:</p>

<pre><code> _includes/
 _layouts/
 _plugins/
 _posts/
 _site/
</code></pre>

<p>_site folder is added in the <code>.gitignore</code> file.</p>

<p>Now can I have a git repo inside _site folder with different remote repo for push and pull? Will there be any conflict?</p>

<p>I have studied git submodules but I think it would be a overkill in my case, if the above stated method can work.</p>
","5","177116","0","0"
"10212755","765836","2012-04-18 15:30:09","0","117","<git><github><git-submodules>","Cannot figure out git submodule behaviour","<p>I had used a library called python-magic to find type of file in my django project . However the way I structure my code I prefer to do relative import. However the library did not seem to have an <code>__init__.py</code> file to allow relative import , so i made a fork and added one. However when i pulled code on my server even though .gitmodules had my fork's url
url = git://github.com/dusual/python-magic.git  as the entry it only picked up code till index 
d5fba and not 6a5581a which is commit id ? Please explain to me why was this the case?</p>
","0","765836","",""
"10219319","473891","2012-04-18 23:00:32","0","419","<git><git-submodules>","changes inside git submodules","<p>It's possible this has been asked before, but it's difficult to tell because submodules seem to cause lots of problems. Here's what I'm doing.</p>

<pre><code># cd to parent repo
git submodule add git://example.com/myrepo
cd myrepo
# make some changes
git commit -am ""made changes""
cd ..
git commit -am ""modified submodule""
git clone --recursive . &lt;path to cloned repo&gt;
</code></pre>

<p>When I do this I get errors</p>

<blockquote>
  <p>fatal: reference is not a tree: 96fa64c0dd64684f86d17841f7c515446885eb33</p>
</blockquote>

<p>followed by</p>

<blockquote>
  <p>Unable to checkout '96fa64c0dd64684f86d17841f7c515446885eb33' in submodule path 'myrepo'</p>
</blockquote>

<p>What am I doing wrong here? I just want to add a submodule, then make some changes to it, and then clone the entire parent source tree (including submodule) to a new repo.</p>
","0","473891","",""
"10220140","284981","2012-04-19 00:45:19","7","17146","<git><git-submodules>","git rm -r --cached not removing submodule folder and contents","<p>Solution:  remove <code>--cached</code> from <code>git rm -r --cached submodule/name</code>.  <a href=""https://github.com/byrongibson/scripts/blob/master/git-rm-submodule.sh"" rel=""nofollow noreferrer"">Scripted</a> for reference.</p>

<hr>

<p>I'm trying to remove a git submodule based on <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"">this SO answer</a>, but the submodule is not being removed.</p>

<p>I add the submodule, commit the changes, then delete it using <code>git rm -r --cached $path/to/submodule</code> (minus the trailing / ), commit the changes, but the submodule is still there.</p>

<p>I can use <code>rm -rf submodules/lift_sbt_24</code> to delete the folder and contents, but why isn't <code>git rm -r --cached</code> doing that?</p>

<p>(deleting the relevant section from .gitmodules works fine, is no problem, hence not mentioned here)</p>

<p>This is git 1.7.5.4 on Ubuntu 11.10, fwiw.  Complete example:</p>

<pre><code>$&gt; git submodule add git@github.com:lift-stack/lift_24_sbt.git submodules/lift_24_sbt
Adding submodule from repo git@github.com:lift-stack/lift_24_sbt.git as submodules/lift_24_sbt
Cloning into submodules/lift_24_sbt...
remote: Counting objects: 619, done.
remote: Compressing objects: 100% (375/375), done.
remote: Total 619 (delta 172), reused 593 (delta 147)
Receiving objects: 100% (619/619), 1.74 MiB | 112 KiB/s, done.
Resolving deltas: 100% (172/172), done.
$&gt; git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commits.
#
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   .gitmodules
#   new file:   submodules/lift_24_sbt
#
$&gt; git add -a
$&gt; git commit 'added submodules/lift_24_sbt'
[master 9894113] update
 2 files changed, 4 insertions(+), 0 deletions(-)
 create mode 160000 submodules/lift_24_sbt
$&gt; git rm -r --cached submodules/lift_24_sbt
rm 'submodules/lift_24_sbt'
$&gt; git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commits.
#
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   deleted:    submodules/lift_24_sbt
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   submodules/lift_24_sbt/
$&gt; git add -a
$&gt; git commit -m 'deleted submodules/lift_24_sbt'
# On branch master
# Your branch is ahead of 'origin/master' by 1 commits.
#
nothing to commit (working directory clean)
$&gt; ls -al submodules/lift_24_sbt/
total 1060
drwxr-xr-x 5 kurtosis kurtosis    4096 2012-04-18 17:26 ./
drwxrwxr-x 6 kurtosis kurtosis    4096 2012-04-18 17:26 ../
drwxrwxr-x 8 kurtosis kurtosis    4096 2012-04-18 17:32 .git/
drwxrwxr-x 2 kurtosis kurtosis    4096 2012-04-18 17:26 project/
drwxrwxr-x 3 kurtosis kurtosis    4096 2012-04-18 17:26 src/
-rw-rw-r-- 1 kurtosis kurtosis     931 2012-04-18 17:26 build.sbt
-rw-rw-r-- 1 kurtosis kurtosis     463 2012-04-18 17:26 .gitignore
-rw-rw-r-- 1 kurtosis kurtosis      91 2012-04-18 17:26 README.md
-rwxrwxr-x 1 kurtosis kurtosis     110 2012-04-18 17:26 sbt*
-rw-rw-r-- 1 kurtosis kurtosis     131 2012-04-18 17:26 sbt.bat
-rw-rw-r-- 1 kurtosis kurtosis 1041753 2012-04-18 17:26 sbt-launch.jar
$&gt; git --version
git version 1.7.5.4
</code></pre>
","0","284981","0","0"
"10247200","717998","2012-04-20 13:27:51","27","1960","<git-submodules><travis-ci>","How to tell Travis to skip pulling all git submodules in?","<p>In my project I have a few git submodules, however those aren't actual build dependencies and do take some extra time to get pulled in, literarily doubling or tripling the build time.</p>

<p>Is there any way of telling Travis to skip this useless step?</p>
","0","717998","0","0"
"46494269","8656552","2017-09-29 17:41:37","0","117","<git><ansible><git-submodules><composition><code-reuse>","Is there an industry standard method for composition of deployable configurations using git submodules per role?","<p>I'd like to build up complex deployments as compositions of smaller repositories.</p>

<p>For example, I might want to deploy and inventory management server as an oracle UIM install, which I'd like to build on roles that configure the server, install the jdk, install weblogic, set up a basic domain, then drop UIM on that stack.</p>

<p>I can create roles that do our standard configurations, that install the jdk, that install the weblogic binaries, that install a standardized domain configuration, etc, but certain things are always going to need tweaking and abstraction. </p>

<p>Is there a standard for setting up common variables to be used between them, such as {{ install_user }} or {{ DB_URL }}? </p>

<p>If not, does anyone have good suggestions to help keep design on track in the absence of a project manager?</p>
","0","8656552","",""
"10628574","1244374","2012-05-17 00:45:25","14","7767","<git><ssh><github><amazon-ec2><git-submodules>","Problems with git submodules when submodules are private Github repos","<p>I have a private repo on Github that houses 3 submodules, all 3 of which are also private.</p>

<p>I have generated 4 SSH keys on my EC2 server and applied them as Github deploy keys to all 4 private repositories.</p>

<p>I am able to clone the primary repository as it recognizes the SSH key. When I run ""git submodule update"" it fails on the private repos with the following error:</p>

<p>ERROR: Repository not found.
fatal: The remote end hung up unexpectedly</p>

<p>If I manually check out those private repos it works, but not when using the git submodule command. Any idea? Is this not fully supported?</p>
","0","1244374","0","0"
"37824611","745776","2016-06-15 01:17:54","1","1386","<android><git><android-studio><github><git-submodules>","Getting ""detached HEAD"" error despite deleting git submodule","<p>Git seems to be tracking the java folder, but I can't commit changes to the specific file <code>MainActivity.java</code>. I get a ""Changes not staged for commit""
The diff shows the changes, but I can't commit it.</p>

<p>Also, I can't go down into the folder in Github.</p>

<p><a href=""https://i.stack.imgur.com/UwyLo.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UwyLo.png"" alt=""Project structure""></a>
<a href=""https://i.stack.imgur.com/Mkc9z.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Mkc9z.png"" alt=""Commit error""></a></p>

<p><a href=""https://i.stack.imgur.com/mWou5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mWou5.png"" alt=""Github structure""></a>
That folder is not clickable.</p>

<p><strong>Edit:</strong> When I do <code>git status</code> in the command line, I get</p>

<pre><code>user:JustJava juil$ git status
HEAD detached at 93ea9a1
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

        modified:   app/src/main/java/com/example/android/justjava (modified content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p><strong>Edit 2:</strong> I have checked out the latest commit as some have suggested but still get the detached head error.</p>

<p><a href=""https://i.stack.imgur.com/jW3a7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jW3a7.png"" alt=""Current git log""></a></p>

<p><strong>Edit 3:</strong> I tried adding the file itself w/ <code>git add</code> but got an error that the directory is a submodule.</p>

<pre><code>JustJava juil$ git add app/src/main/java/com/example/android/justjava/MainActivity.java
fatal: Pathspec 'app/src/main/java/com/example/android/justjava/MainActivity.java' is in submodule 'app/src/main/java/com/example/android/justjava'</code></pre>

<p>I tried running <code>git submodule status</code> and got the error</p>

<pre><code>fatal: no submodule mapping found in .gitmodules for path 'app/src/main/java/com/example/android/justjava'
</code></pre>

<p>I tried deleting <code>.git</code> in the submodule, but the same error keeps popping up.</p>
","4","745776","",""
"54637089","382736","2019-02-11 18:42:50","0","845","<bash><git><git-submodules><fish>","howto find out which git submodule current directory belongs to","<h1>setup</h1>
<p>i have a <code>git</code> repo located in <code>/home/v/git_repo</code>, in which i have a submodule localted in subdirectory <code>./a/b/c</code>.</p>
<pre><code>$ cat /home/v/git_repo/.gitmodules
[submodule &quot;foo/bar&quot;]
    path = a/b/c
    url = git@github.com:username/repo.git
</code></pre>
<p>having the full path or only the in-repository subpath (that i have implemented in helper script <code>git-where-in-repo-am-i-currently</code>)</p>
<pre><code>$ pwd
/home/v/git_repo/a/b/c/something

$ git where-in-repo-am-i-currently
a/b/c/something
</code></pre>
<h1>question</h1>
<p>i want to find out (preferably in <code>fish</code>) which submodule this path belongs to: e.g</p>
<pre><code>$ git which-submodule (pwd)
foo/bar
</code></pre>
<p>to later use it to query that submodules status like</p>
<pre><code>$ git -C (git rev-parse --git-dir)/modules/(git which-submodule) status
on branch master
Your branch is up to date with 'origin/master'
</code></pre>
<p>and ultimately display this information in my prompt (that part is already implemented)</p>
<h1>what i tried</h1>
<p>parsing the output of</p>
<pre><code>$ git -C (git rev-parse --show-toplevel) config --file=.gitmodules --get-regexp &quot;path&quot;`
submodule.foo/bar.path a/b/c
</code></pre>
<p>and comparing my sub-directory path to that of a submodule, but it was rather a mess, with splitting pathes into arrays and all kinds of hacks</p>
","0","382736","",""
"54649818","4991573","2019-02-12 12:08:36","1","80","<git><git-submodules><carthage>","delinking submodules in a recursive git repo and making them independent of original references","<p>I have a third party complex project in git. It uses Carthage to manage submodules. I need to customize submodules. After initial checkout of submodules with  the command </p>

<p>git submodule update --init --recursive</p>

<p>I should be independent of the original references and submodules.</p>

<p>I saw the following, but I could not completely be successful
<a href=""https://stackoverflow.com/questions/1759587/un-submodule-a-git-submodule"">un-submodule a git submodule</a></p>

<p>How do I go about? given there must be enhancements and updates to git capabilities</p>

<p>Any automated script out there? Please keep in mind that there are several submodules, some in deeply embedded directories.</p>

<p>Many thanks in advance!</p>
","3","4991573","",""
"54648831","10155611","2019-02-12 11:13:22","0","23","<git><logging><diff><git-submodules>","git filtered log over submodules and as diffs","<p>I'd need the output of</p>

<ol>
<li>all commits in diff form</li>
<li>of a specific author</li>
<li>including submodules</li>
<li>ordered by date, not by submodule and then date</li>
</ol>

<p>Is this possible at all?</p>

<p>Greetings</p>
","0","10155611","",""
"54756954","1779039","2019-02-18 23:39:19","1","5693","<git><jenkins-pipeline><git-submodules>","Checkout git repo with git submodules in Jenkinsfile with credentials","<p>I have a stage in my Jenkinsfile that look like:</p>

<pre><code>stage('Pull Source Code') {
    steps {
        script {
            git branch: ""master"",
                    credentialsId: 'myCredentialId',
                    url: ""${GIT_URL}""
        }
        sh 'git submodule update --recursive'
    }
}
</code></pre>

<p>I want to provide credentials for the git git submodule update step because it giving the following error:</p>

<pre><code>+ git submodule update --recursive
Cloning into 'submodule-destination-folder'...
fatal: could not read Username for 'https://tfsgit.mycompany.com': No such device or address
fatal: clone of 'https://tfsgit.mycompany.com/submodule-repo' into submodule path 'submodule-destination-folder' failed
</code></pre>

<p>Is there a way to provide Jenkins credentials to git submodule update ?</p>
","1","1779039","",""
"54760132","7807275","2019-02-19 06:36:42","1","772","<git><git-submodules>","Adding a public github repo as Submodule in a private repository would make the submodule repo as Private","<p>I have a <strong>private Github</strong> repo and I want to add a <strong>public Github</strong> repo as a <strong>Submodule</strong> in that repo. My question is that If I add the public repo as submodule, would the public repo become private?. Because I want to make changes in the public repo and don't want anyone to access it.</p>
","4","7807275","0","0"
"72381666","3014841","2022-05-25 17:01:37","0","137","<git><terminal><git-submodules><gerrit>","git review fails in a repo with submodules under git version 2.30.1 (Apple Git-130)","<p>I have a repo with several submodules. Here is the <code>git state</code> before I try to execute <code>git review</code> and send my changes to the gerrit server:</p>
<pre><code>▶ git status
On branch 12345_defect_name
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
    modified:   src/submodule01 (new commits)
    modified:   src/submodule02 (new commits)
    modified:   submodule03 (new commits, modified content)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>Then I have failing <code>git review</code>:</p>
<pre><code>▶ git review -t 12345
You have unstaged changes. Please commit or stash them first, and then
try again.
</code></pre>
<p>Stashing does not help:</p>
<pre><code>cd src/submodule01
▶ git stash
No local changes to save
</code></pre>
<p>This behaviour started after the latest system update, before that the messages that there are some modifications in the submodules never caused problems during <code>git review</code>. I could find no helpful info using google search. Would appreaciate your help/hints.</p>
<pre><code>▶ git --version
git version 2.30.1 (Apple Git-130)
</code></pre>
","0","3014841","",""
"54792444","2696125","2019-02-20 17:48:56","1","1461","<git><ubuntu><git-submodules><ubuntu-18.04>","git submodule update is stuck on ""Cloning into ..."" on remote VPS - Ubuntu 18.04","<p>I'm trying to run <code>git submodule update</code> command on my ubuntu machine but it hangs on <code>Cloning into '/home/ubuntu/mazerat/mazerat/tasks/instabotpy'...</code></p>

<p>I checked following solutions but doesn't work.</p>

<blockquote>
  <p><a href=""https://stackoverflow.com/questions/39765663/git-submodule-init-does-absolutely-nothing/39766926"">git submodule init does absolutely nothing </a></p>
  
  <p><a href=""https://teamcity-support.jetbrains.com/hc/en-us/community/posts/206867175-Git-submodules-update-is-stuck"" rel=""nofollow noreferrer"">Git submodules update is stuck 
  </a></p>
</blockquote>

<p>Same instance works properly on macOS Mojave (Version 10.14.3) and Windows 10.</p>

<p>Also machine SSH public key is set on github.</p>

<p>I tried to run command as root (after set the root ssh key) for premission check but didn't matter.</p>

<p><strong><em>.gitmodules</em></strong></p>

<pre><code>[submodule ""mazerat/tasks/instabotpy""]
    path = mazerat/tasks/instabotpy
    url = git@github.com:motameni/instabot.py.git
</code></pre>
","7","2696125","",""
"54815737","4602919","2019-02-21 20:31:29","5","1500","<python><django><git-submodules><pipenv>","using pipenv with git submodules","<p>I have a git submodule B, that works as an app in my django project A. B has its own Pipfile and Pifile.lock. A also has a Pipfile and Pipfile.lock. How can I use pipenv, to install the libraries  from both pipfiles within the same virtuaelenv?</p>
","0","4602919","0","0"
"54897439","2856308","2019-02-27 03:12:14","1","361","<git><version-control><repository><git-submodules>","What's wrong with nested git repos?","<p>I am in a situation where I cannot use submodules (or subtrees, I believe), and I can only use vanilla nested repos (the reason is somewhat unusual, but it has to do with building inside a docker container).</p>

<p>In general, what are the issues with nesting vanilla git repos in this manner?</p>
","0","2856308","0","0"
"54935705","6228409","2019-02-28 23:10:41","1","84","<git><git-submodules>","Git Update Path Setting In .gitmodules","<p>I'd like to update the path of a submodule on a local branch and then push those changes. How do I accomplish this?</p>
","0","6228409","0","0"
"55031993","10597038","2019-03-06 20:56:13","4","2683","<git><git-submodules>","git: submodule tracking current branch","<p>According to the <a href=""https://git-scm.com/docs/git-submodule#git-submodule---branch"" rel=""nofollow noreferrer"">git documentation</a>, I should be able to run this command:</p>

<pre><code>git submodule add -b . https://my/repo
</code></pre>

<p>And have a sub-module added, which will track head of the current branch of the super project.</p>

<blockquote>
  <p>Branch of repository to add as submodule. The name of the branch is recorded as submodule..branch in .gitmodules for update --remote. A special value of . is used to indicate that the name of the branch in the submodule should be the same name as the current branch in the current repository.</p>
</blockquote>

<p>But when I do this, I get this error:</p>

<blockquote>
  <p>fatal: 'origin/.' is not a commit and a branch '.' cannot be created from it</p>
</blockquote>

<p>I'm running git 2.21.  Have I read the instructions completely wrong?</p>
","1","10597038","0","0"
"55039371","2409793","2019-03-07 08:39:29","0","40","<git><git-submodules>","Get branche names of git submodules in another directory","<p>I have checked out a project that includes some submodules.</p>

<p>First I checked out my <code>project</code> and then the <code>submodules</code>:</p>

<pre><code>git clone git@my-gitlab-server:namespace/project.git
</code></pre>

<p>Initiatiated the submodules for that <code>branch</code> with the latest:</p>

<pre><code>git submodule update --init --recursive
</code></pre>

<p>Then I checked out the specific branch that includes the submodules. I just want to get the <strong>branch</strong> name of each sumbodule.</p>

<p><strong>But</strong>:</p>

<pre><code>$ git --git-dir path/to/my/submodule rev-parse --abbrev-ref HEAD
fatal: not a git repository: 'path/to/my/submodule'


$ cd  path/to/my/submodule 
$ (detached*)$ git branch
* (HEAD detached at 24bbc55)
  develop
</code></pre>

<p>Why the first command shows that it is not a git submodule? (while it is)
The checkout is done from a specific branch ('develop') of the submodule. How can I get the actual branch name (and not the git <code>sha</code>?)</p>
","0","2409793","",""
"72452138","6101336","2022-05-31 17:45:55","0","228","<git><git-branch><git-submodules>","How do i add a git submodule to a specific branch of the parent repo?","<p>Say i have a repo that has two branches: <code>main</code> and <code>feature</code>. Now i want my <code>feature</code> branch to depend on another repo as a submodule but i want that submodule to be visible only to that <code>feature</code> branch not to the <code>main</code> branch.
I have already tried:</p>
<ol>
<li>switch to <code>feature</code> branch</li>
<li>add my submodule there</li>
<li>switch back to <code>main</code> branch, but here the submodule remains visible which i don't want.</li>
</ol>
<p>How is it possible ?</p>
","2","6101336","",""
"63972421","559827","2020-09-19 19:02:39","0","191","<git><git-submodules>","How to change a git submodule's name only, leaving its path unchanged?","<p>Suppose that a <code>.gitmodules</code> file includes the following lines</p>
<pre><code>[submodule &quot;sub/x&quot;]
    path = sub/x
</code></pre>
<p>...which resulted from a command of the form</p>
<pre><code>git submodule add $url sub/x
</code></pre>
<p>After the fact (and after having added several commits, both to the superproject as well as the submodule), I realize that I should have run this instead:</p>
<pre><code>git submodule add --name x $url sub/x
</code></pre>
<p>...so that the two lines in the <code>.gitmodules</code> file corresponding to the two quoted earlier would have been</p>
<pre><code>[submodule &quot;x&quot;]
    path = sub/x
</code></pre>
<p>I want to fix the superproject so that the <em>name</em> of the submodule is <code>x</code> rather than <code>sub/x</code>, but the <em>path</em> remains <code>sub/x</code><sup>1</sup>.</p>
<p>My immediate interest is in learning how to <em>fix the history</em> (e.g. through an interactive rebase) of the superproject, so that in the end the repo looks as if the second <code>git submodule add</code> command was the one used from the beginning.  (FWIW, this repo has not yet been published, though I do intend to do so.)  For future reference, however, I am also interested in learning how to do this without modifying the history, i.e. by adding one or more new commits to it.</p>
<p>I have tried to remove the submodule and add it again (based on the <code>git submodule deinit</code> recipe given <a href=""https://stackoverflow.com/a/16162000/559827"">here</a>), but I quickly find myself in a mess.  (I think that part of the problem is that, as I already mentioned, I have added several commits to the submodule, made corresponding updates to the superproject's submodule information, along the way.)</p>
<p>Therefore, I am hoping to find more direct guidance on how to do this renaming.</p>
<hr />
<p><sup><sup>1</sup> There is an <a href=""https://stackoverflow.com/questions/4526910/rename-a-git-submodule"">earlier post</a> whose title suggests that it is asking exactly the question I am asking here, but in fact that post is asking for not only how to rename the submodule, but also <em>how to change its path</em>.  It turns out that most of the content in the answers to that question focus on the problem of changing the module's path.</sup></p>
","0","559827","0","0"
"63974493","559827","2020-09-20 00:23:21","3","4713","<git><git-submodules>","Why would 'git submodule update' skip a submodule?","<p>I have a git repo with a single submodule <code>sub/x</code>.  (This submodule does not contain any submodules of its own.)</p>
<p>In the superproject's repo, the output of <code>git status</code> shows the following (unstaged) modification</p>
<pre><code>modified:   sub/x (new commits)
</code></pre>
<p>If I now run</p>
<pre><code>git submodule update
</code></pre>
<p>...on the superproject, the following line gets printed to the terminal (and nothing more):</p>
<pre><code>Skipping submodule 'sub/x'
</code></pre>
<p>After this, the output of <code>git status</code> on the superproject remains as shown above, unchanged.</p>
<p>(Ditto if I add <code>--init</code> to the <code>git submodule update</code> command.)</p>
<p><strong>Q:</strong> How can I determine why <code>git submodule update [--init]</code> skips the <code>sub/x</code> submodule?</p>
","0","559827","0","0"
"63988828","2144408","2020-09-21 08:39:18","0","248","<git><git-submodules>","How can I get the git submodule status at some commit?","<p>I want to retrieve the <code>git submodule status --cached --recursive</code> for a particular commit. I know I can do:</p>
<p><code>git checkout [commit_hash] &amp;&amp; git submodule status --cached --recursive</code></p>
<p>But that changes the current git status, branch, and file contents, which would all need to be reversed again afterwards.</p>
<p>Unfortunately, the <a href=""https://git-scm.com/docs/git-submodule#Documentation/git-submodule.txt-status--cached--recursive--ltpathgt82308203"" rel=""nofollow noreferrer"">docs for git submodule status</a> do not indicate a commit hash can be passed, nor does it work:</p>
<pre><code>$ git submodule status --cached --recursive bc7cecf1eef3
error: pathspec 'bc7cecf1eef3' did not match any file(s) known to git
</code></pre>
<p>Note that the current submodules may differ from the submodules at that commit, so using <code>git submodule foreach ...</code> will not work. Of that submodule status, I actually only need the (path, commit_sha) pairs.</p>
","0","2144408","",""
"46076593","4443417","2017-09-06 13:29:05","1","129","<git><git-submodules>","Checkout one particular branch in every git submodule","<p>I'm trying to write an alias for git that will accept the branch name and checkout to it in each submodule recursively. It's expected that some submodules may not have this branch, so they'll be skipped.</p>

<p>I tried this solution:</p>

<pre><code>[alias]
subco = ""!f() { git submodule foreach 'git checkout $1 || true'; }; f""
</code></pre>

<p>Bit it gives me error, $1 - is not typed correctly. </p>

<pre><code>Entering 'Services/Payment'
error: pathspec 'git' did not match any file(s) known to git.
error: pathspec 'checkout' did not match any file(s) known to git.
error: pathspec '$1' did not match any file(s) known to git.
error: pathspec '||' did not match any file(s) known to git.
error: pathspec 'true' did not match any file(s) known to git.
</code></pre>

<p>I tried to put $1 in quotes, that doesn't help, ant suggestions?</p>
","0","4443417","",""
"9876179","248220","2012-03-26 16:42:08","13","6905","<git><git-submodules><git-pull>","What's the status of my git submodule, and how can I clean it up?","<p>Being a relative submodules noob, I wanted to update my submodule with from its origin, and did:</p>

<pre><code>git pull
</code></pre>

<p>This resulted in:</p>

<pre><code>remote: Counting objects: 111, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 57 (delta 54), reused 57 (delta 54)
Unpacking objects: 100% (57/57), done.
From github.com:eteanga/smarty
   8e9a011..818ab3e  master     -&gt; origin/master
You are not currently on a branch, so I cannot use any
'branch.&lt;branchname&gt;.merge' in your configuration file.
Please specify which remote branch you want to use on the command
line and try again (e.g. 'git pull &lt;repository&gt; &lt;refspec&gt;').
See git-pull(1) for details.
</code></pre>

<p>Trying to fix:</p>

<pre><code>git pull origin master
</code></pre>

<p>Output:</p>

<pre><code>From github.com:eteanga/smarty
 * branch            master     -&gt; FETCH_HEAD
Updating 8e9a011..818ab3e
Fast-forward
[snip]
</code></pre>

<p>Now it seems that I did get the updated code, <strong>but</strong> I'm not currently working on any branch.</p>

<p>What should I have done to update my submodule correctly, and what should I do to fix this current state?</p>
","0","248220","0","0"
"9878860","291573","2012-03-26 19:58:12","12","7462","<git><repository><git-submodules>","How can I rename a git repository with submodules?","<p>I have a git repository with submodules in the directory <code>projects/myRepo</code> and I want to rename the directory to <code>projects/my-repo</code>.</p>

<p>According to <a href=""https://stackoverflow.com/questions/2041993/how-to-rename-a-git-project-name"">this</a> question it can simply be done with <code>mv</code>. But in a repo with submodules git keeps telling me </p>

<blockquote>
  <p>fatal: Not a git repository: projects/myRepo/.git/path/to/submodule```</p>
</blockquote>

<p>even for <code>git status</code>.</p>

<p>Submodule config:</p>

<pre><code>[submodule ""path/to/submodule""]  
   path = path/to/submodule  
   url = https://github.com/user/projectName.git  
</code></pre>

<p>Somehow the 'internal path' for the submodule does not get updated?! Is there a way to tell git to update these submodule paths? </p>
","4","291573","0","0"
"64153264","2116599","2020-10-01 10:12:22","0","111","<git><git-submodules><directory-structure>","Best way to organize this folder structure with git","<p>I have the following folder structure</p>
<pre><code>code
|-- ML_framework
|   `-- models
|-- experiments
|   |-- prog_clust_learning
|   |-- other_exps
|   `-- my_important_experiment
|-- generate_datasets
|   |   `-- generators
</code></pre>
<p>(I have slightly modified the tree to delete useless folders).</p>
<p><code>ML_framework</code> and <code>generate_datasets/generators</code> are submodules, and they are publicly available on GitHub. <code>experiments/my_important_experiment</code> is not a submodule. The whole <code>code</code> directory is on github, but it's private. The files in <code>my_important_experiment</code> depends heavily on the other two submodules.</p>
<p>Since I have finished working on <code>my_important_experiment</code> I would like to make it public so that my work can be replicated by other researcher.
What would be the best way to do so?
Should I make <code>my_important_experiment</code> a submodule as well, and then indicate in the README that it depends on those other two submodules? Should I also indicate exactly the folder structure that these submodule should have?</p>
<p>This seems like a lot of work for someone that would like to run my scripts. Is there anyway to make all of this simpler?
I would like to keep to a minimum the amount of change I have to do on my folder structure.
Also, I may possibly add or modify stuff to <code>my_important_experiment</code> and I would like, obviously, the remote repo to reflect these changes.</p>
","4","2116599","",""
"64186593","5117267","2020-10-03 16:38:16","0","53","<git><git-submodules>","How to update a local git repository to effectively reflect deleted submodules?","<p>I have a repo containing submodules which i manage from multiple machines. I updated the repro from machine1 wherein i removed some submodules using the following steps:</p>
<ul>
<li><code>git submodule deinit path_to_submodule</code></li>
<li><code>git rm path_to_submodule</code></li>
<li><code>rm -rf .git/modules/path_to_submodule</code></li>
</ul>
<p>After pushing my changes to the remote, i want to pull the changes in my machine2 so that the submodules that i deleted in machine1 get deleted in machine2 as well.</p>
<p>What is the command to do it.? I don't think <code>git pull</code> is sufficient for this.</p>
<p>I tried <code>git submodule update --recursive</code> but no luck</p>
","0","5117267","",""
"64613354","3693060","2020-10-30 17:41:40","1","612","<git><github><git-submodules>","Update git submodules","<p>On trying to update git submodule, I see the following error:</p>
<pre><code>Submodule 'paa' (https://github.com/microsoftgraph/paa.git) registered for path 'paa'
Cloning into 'D:/a/1/s/paa'...
git: 'credential-manager-core' is not a git command. See 'git --help'.
fatal: could not read Username for 'https://github.com': terminal prompts disabled
fatal: clone of 'https://github.com/microsoftgraph/paa.git' into submodule path 'D:/a/1/s/paa' failed
Failed to clone 'paa'. Retry scheduled
Cloning into 'D:/a/1/s/paa'...
git: 'credential-manager-core' is not a git command. See 'git --help'.
fatal: could not read Username for 'https://github.com': terminal prompts disabled
fatal: clone of 'https://github.com/microsoftgraph/paa.git' into submodule path 'D:/a/1/s/paa' failed
Failed to clone 'paa' a second time, aborting
##[error]Git submodule update failed with exit code: 1
</code></pre>
<p>I referenced <a href=""https://stackoverflow.com/questions/8197089/fatal-error-when-updating-submodule-using-git"">Fatal Error when updating submodule using GIT</a> stack overflow post and .gitmodules already has the following content:</p>
<pre><code>[submodule &quot;paa&quot;]
    path = paa
    url = https://github.com/microsoftgraph/paa.git
</code></pre>
<p>UPDATE:</p>
<p>Based on below answer I added a PATH as follows:</p>
<pre><code>C:\Program Files\Git\bin
C:\Program Files\Git\cmd
C:\Program Files\Git\usr\bin
C:\Program Files\Git\mingw64\bin
C:\Program Files\Git\mingw64\libexec\git-core
</code></pre>
<p>I still see the same error. I tried updating the content in .gitmodules to the following:</p>
<pre><code>[submodule &quot;paa&quot;]
    path = paa
    url = https://&lt;username&gt;:&lt;password&gt;@github.com/microsoftgraph/paa.git

</code></pre>
<p>I see this error:</p>
<pre><code>Submodule 'paa' (https://&lt;username&gt;:&lt;password&gt;@github.com/microsoftgraph/paa.git) registered for path 'paa'
Cloning into 'D:/a/1/s/paa'...
fatal: unable to access 'https://&lt;username&gt;:&lt;password&gt;@github.com/microsoftgraph/paa.git/': Could not resolve host: &lt;username&gt;:&lt;password&gt;@github.com
fatal: clone of 'https://&lt;username&gt;:&lt;password&gt;@github.com/microsoftgraph/paa.git' into submodule path 'D:/a/1/s/paa' failed

</code></pre>
","3","3693060","0","0"
"46300248","5031373","2017-09-19 12:16:38","0","37","<git><git-submodules>","Using multiple git projects in the same repository","<p>I've built a static website setup that I'm trying to make modular, so I can use the same basic site for multiple websites and simply use configuration files to make each site different.  My current setup is to have each site on a separate branch (<code>site1</code>, <code>site2</code>, etc.) and merge the common files into <code>master</code>.  However, it's become kind of a mess, since whenever I make an edit for <code>site1</code> and want to add it into <code>site2</code>, I end up having to do a lot of legwork to disentangle the <code>site1</code> configurations from the common code.</p>

<p>What I would really like is if there was a way so I can keep my common files (e.g. <code>index.html</code>, <code>page.html</code>, <code>angular.js</code>) in one container, and then several other containers for the site-specific files (e.g. <code>main.css</code>, <code>config.json</code>, <code>pretty-pic.jpg</code>).  I would like to be able to track these containers separately, so if I want to edit, say, <code>index.html</code>, I can do that without affecting the site-specific containers, and when I want to customize something on a site (e.g. some CSS), I can do that without it affecting the main code or the other site's code.</p>

<p>I've examined submodules, but those appear to tie one repository into another, and I really need my main code to not be linked to only one of the sites.  Plus, I need the <code>index.html</code> and my other main files in the top directory, not in any subdirectory.  I've also looked at keeping multiple repositories in the same directory locally, but I'm wondering if there's an easier way.</p>

<p>What is the best way in git to achieve what I'm trying to do?  I'd prefer a cross-platform solution, but I can settle for just Linux.  These files will eventually need to be dropped into AWS S3, if that affects the solution.</p>
","4","5031373","",""
"46303509","702948","2017-09-19 14:48:00","0","107","<git><git-submodules>","git: set submodule to auto-track remote repository","<p>Is it possible to create a git submodule that will always reflect the HEAD of the remote branch?  i.e I don't want to have to manually update the reference to a commit.  When I clone my parent repo, I want to get the HEAD of the branch the submodule is tracking.  If there is a change to the submodule, but no changes to the parent repo, I want a <code>git pull</code> to update the submodule.</p>

<p>Is this possible?</p>
","1","702948","",""
"64629516","13052291","2020-11-01 07:17:12","0","213","<git><github><git-submodules><hugo>","git & hugo - problem with creating git submodule to github","<p>According to <a href=""https://gohugo.io/hosting-and-deployment/hosting-on-github/"" rel=""nofollow noreferrer"">this</a> instruction, I entered the following into git,</p>
<pre><code>git submodule add -b master https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git public
</code></pre>
<p>but <code>'public' does not have a commit checked out</code> appears as result.</p>
<p>I am quite new to this field, so I need explanations on some basic things. What exactly needs to be done with the <code>public</code> directory, and what should I do to solve this error?</p>
","0","13052291","",""
"28031922","2416049","2015-01-19 19:13:57","4","627","<git><github><chef-infra><git-submodules>","Manage different codebases using single git repository instead of submodules","<p>After reading <a href=""http://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow"">this</a> article on submodules, it seems like they exist only to link to external git repositories from within your own. However, I am expecting submodules to simply allow you to manage multiple, separate commit histories from within one repository. </p>

<p>Is it possible to have non-external git repositories? I'd like to manage all of my chef cookbooks under one repository with separate commit histories for each, without needing to create a bunch of git repos</p>

<p>EDIT: I don't think I made my use case clear. What I meant was that I wanted to have the <em>list</em> of cookbooks for each of my servers in uniquely addressable places; not that I wanted a submodule for an individual cookbook. In this case, mu's answer addresses the problem quite effectively.</p>
","4","2416049","0","0"
"64637554","435223","2020-11-01 22:16:14","3","820","<git><git-submodules>","Reliable set of command to switch between git branches with and without submodules","<p>I'm attempting to create a node/go library (<a href=""https://github.com/simpleviewinc/git-tools"" rel=""nofollow noreferrer"">https://github.com/simpleviewinc/git-tools</a>) to help using git to checkout a repo to a specific remote/branch for handling production checkouts as well as developer checkouts for peer review. In both cases when a developer executes the checkout command I want it to execute and setup the working copy to the exact state declared in the remote repositories. So this means it will toss any untracked changes, unpushed commits, all of that. It is to make their local working copy or the server working copy exactly match the remotes. In production this is obviously so that the live server matches the exact state. On local, it ensures that the developer has the exact state of the fork that they are reviewing (with no changes on their local box interfering with the review). On local, it will prompt the user before doing destructive actions (like git reset, git clean).</p>
<p>The problem I am facing is that I cannot figure out a set of git commands that will consistently work in all cases when switching between branches if the branch has submodules. In my test, I have one repo with 3 branches, one branch has no submodules (master), another module has 1 submodule (submodule-test), and another branch has another submodule (submodule-test2) that points to a different repository (at the same path). I want my library to be able to switch the working copy from any branch to any other branch, executing the exact same set of commands, without the developer executing needing to know the specific setup related to the destination branch. Basically, it should be &quot;give me this code whatever it is declared in the remote&quot;. In example if a dev is peer reviewing and both the main repo and the submodule have forks/branches. I want the dev to be able to just gun <code>git-tools checkout proj1 --remote=dev1 --branch=pr-150</code> and it will checkout dev1's fork of proj1 and branch pr-150. Then if they ran <code>git-tools checkout proj1</code> it would switch it back to master of proj1.</p>
<p>Right now the closest set of commands for switching branches I've been able to almost get working is:</p>
<pre><code>git submodule deinit --all
git checkout branch
git submodule sync
git submodule update
</code></pre>
<p>That almost works, except for it fails when switching from one branch with submodules to another branch with different submodules the first time (or a different remote for the same sub-module, such as a developer fork).</p>
<p>In example here is one set of commands and their failure in git <code>2.20.1</code></p>
<pre><code>cd /tmp
git clone git@github.com:simpleviewinc/git-tools-test.git ./checkout --recurse-submodules
cd checkout
git checkout submodule-test
git submodule sync
git submodule update
# branch submodule-test fully checked out, all submodules downloaded, looking good!
git submodule deinit --all
git checkout submodule-test2
git submodule sync
git submodule update
fatal: remote error: upload-pack: not our ref c1bba6e3969937125248ee46e308a8efec8ac654
Fetched in submodule path 'submodule', but it did not contain c1bba6e3969937125248ee46e308a8efec8ac654. Direct fetching of that commit failed.
</code></pre>
<p>It fails because it uses the wrong submodule remote, even though I thought that was the explicit purpose of submodule sync. If I go from submodule-test to master, it will succeed, but if master has a submodule it fails, so that doesn't help.</p>
<p>I tried <code>--recurse-submodules</code> but that fails too, but this time when checking from a branch without submodules to a branch with submodules.</p>
<pre><code>cd /tmp
git clone git@github.com:simpleviewinc/git-tools-test.git ./checkout --recurse-submodules
cd checkout
git checkout submodule-test --recurse-submodules
fatal: not a git repository: ../.git/modules/submodule
fatal: could not reset submodule index
</code></pre>
<p>Master doesn't have submodules so when I switch to another branch, something goes awry.</p>
<p>There has to be some git incantation that will reliably allow you to switch from branch A to branch B that can be run for any branch A and any branch B regardless of the submodules in play. If you examine the repo I'm testing with, it's basically empty, so it's perfectly safe for you to execute the exact same commands and see the exact same errors I'm hitting. Ultimately it seems like something needs to be synchronized between .git/config, .git/modules/module-name/config and the .gitmodules, but I cannot figure out a rely set of sequences that meets the goal. Any assistance would be incredible as I've already spent way to long trying to beat my head against these stupid submodules.</p>
","1","435223","0","0"
"10048783","109605","2012-04-06 20:18:23","10","29073","<git><git-submodules>","git submodule add fatal: Not a Git Repository","<p>I am fairly new to Git and trying my best to find some documentation on this problem to no avail.</p>

<p>Here's my command:</p>

<pre><code>$ git submodule add https://github.com/joliver/EventStore.git externalsource/JOliverEventStore/ 
</code></pre>

<blockquote>
  <p>fatal: Not a git repository: ../.git/modules/externalsource/JOliverEventStore
      Unable to checkout submodule 'externalsource/JOliverEventStore'</p>
</blockquote>

<p>I am in my root of my repo and there is currently no directory for <code>/externalsource/JO
liverEventStore/</code>. The error is talking about a directory that I have no knowledge of.</p>

<p>If I add the submodule to the root dir like this:</p>

<pre><code>$ git submodule add https://github.com/joliver/EventStore.git JOliverEventStore 
</code></pre>

<p>I have no problem and it creates the folder in the root directory.</p>

<p>Any insight would be greatly appreciated.</p>
","3","109605","0","0"
"10054011","1013629","2012-04-07 11:22:33","51","42773","<git><file><pull><git-submodules>","git submodule not pulling files in submodules","<p>I thought I had it all worked out with this new project and thought that git submodules are the way to to develop and deploy my application.</p>

<p>Set up my git repo (Drupal) and initialized it with the 7.12 tag of Drupal. Made my own branch. Then added the modules that are needed under sites/all/modules/contrib with
git submodule add --branch 7.x git://path/to/drupal/module sites/all/modules/contrib/module</p>

<p>and then I thought, by pushing my repo to github, I would be able to simply pull it and then it would pull all the submodules into the deployment path. However, all my modules are not pulled, even if I do:
git submodule foreach git pull
or
git submodule init
followed by
git submodule update</p>

<p>Turns out, I was wrong. Do I now need to redo everything in another way? If yes, please tell me how, if not, great, please let me know.</p>
","0","1013629","0","0"
"10056311","1094249","2012-04-07 16:39:59","1","341","<git><vim><git-submodules><pathogen>","Using git submodules with my own repo","<p>I'm newbie in git, so question may be really stupid, sorry for that. I mean, I even found here on stackoverflow questions pretty close to mine, but still don't understand how to solve problem correctly.</p>

<p>I have github repo with my dotfiles, including for vim. I'm using <strong>pathogen</strong> with vim, so natural way to get plugins seams to be</p>

<pre><code>git submodule add https://github.com/msanders/snipmate.vim.git vim/bundle/snipmate
...
git submodule init
git submodule update
git submodule foreach git submodule init
git submodule foreach git submodule update
</code></pre>

<p>wich I found somewhere. Last four commands I simply added to my setup script to run every time I clone this repo.</p>

<p><strong>The first problem</strong> is <code>git status</code> always shows me </p>

<pre><code># modified:   vim/bundle/snipmate (untracked content)
# ...
</code></pre>

<p>in the <code># Changed but not updated:</code> section and <code>git add vim/bundle/snipmate</code> doesn't help. It is pretty annoying.</p>

<p><strong>The second problem</strong> is I obviously don't wand to keep <strong>snipmate</strong> snippets as default, I want to change them, and because of <strong>pathogen</strong> snippets are stored in <strong>snipmate</strong> folder, which is submodule, not my own repo. Of course, I could simply <code>clone</code> them there, or even create a fork of some of them, but is doesn't seem like a good solution: </p>

<ul>
<li>It messes up my own code with other's code can be found on github;</li>
<li>I'm not really going to <em>modify</em> snipmate, I'm going to configure it;</li>
<li>All that stuff makes complicated or even impossible to update thirty-part plugins.</li>
</ul>

<p>Maybe someone could help with finding a ""correct"" answer?</p>
","1","1094249","",""
"46332923","3022952","2017-09-20 22:57:32","2","154","<git><git-merge><git-submodules>","Working with git submodules when you're not actively working with git submodules","<p>We've recently added a submodule to our git repository. There's one person who's in charge of dealing with the submodule, so most of the developers don't <em>normally</em> have to concern themselves with the submodule versions, changes and updates. </p>

<p>It turns out there are certain situations where it becomes impossible to ignore the fact that a submodule is present (as opposed to a regular directory). And unfortunately, most of the documentation on git submodules is focused on how one actively makes changes to the contents of the the submodule, rather than how to effectively <em>avoid</em> making active changes to the submodule contents.</p>

<p>The big issue I'm having at the moment is merging. I have my branch, on which I should have no changes to the submodule. I then merge in another branch, which <em>does</em> have changes to the submodule. This results in the following in the <code>git status</code>:</p>

<pre><code># All conflicts fixed but you are still merging.
#   (use ""git commit"" to conclude merge)
#
...
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   path/to/submodule (new commits)
</code></pre>

<p>And sure enough, if I do a <code>git diff</code>, it shows a change:</p>

<pre><code>diff --git a/path/to/submodule b/path/to/submodule
index 0dce5c0..a4df5ed 160000
--- a/path/to/submodule
+++ b/path/to/submodule
@@ -1 +1 @@
-Subproject commit 0dce5c08ea0c1ff9208cc9427aef5872c75f1e1e
+Subproject commit a4df5ed659cf150200a14529e1fc34727213792c
</code></pre>

<p>Given that there shouldn't be any changes to the submodule on the HEAD branch side of my merge, and that I definitely want my final merged commit to contain the version of the submodule that is on the other branch, how should I resolve this? </p>

<p>On a related note, if I do manage to mess up this merge with respect to the submodule, how would I fix it? That is, what's the ""make the submodule match the state it is on a given branch"" command? For normal files you can use <code>git checkout &lt;branchname&gt; -- path/to/file</code>, but <code>git checkout &lt;branchname&gt; -- path/to/submodule</code> doesn't seem to work, despite the header printed by git status indicating that it might.  </p>
","3","3022952","0","0"
"64740516","14601047","2020-11-08 16:37:02","0","980","<git><git-submodules>","git submodule branch clone","<p>I want to do a branch of the project including same branch in all submodules.
Then after commit &amp; push for all subrepos &amp; main repo.
I want to be able to clone the new branch for everything.</p>
<p>After I commit and everything looks fine - I try to clone.</p>
<p>For some reason the submodule does not point to the new branch
forcing me to switch/checkout in the submodule.</p>
<p>Is this the normal behavior?
Am I doing something wrong / could I do something better?
Is there a way to &quot;clone&quot; all submodules with branch switched?</p>
<p>Thank you.
David.</p>
","1","14601047","0","0"
"28077972","537089","2015-01-21 22:25:13","1","157","<php><git><google-app-engine><github><git-submodules>","Pushing git repo (with submodules) to google app engine","<p>I have a project structure based on Laravel, versioned in Git, with various Git submodules (implemented using Composer) that I'd like to deploy/push to Google App Engine via Git. I've searched the internet for days and have tried countless tricks with recursive submodule init/updates, etc, but however I'm not having any luck. </p>

<p>Submodules are stuck as ""references"" but don't push remotely. </p>

<p>Is this honestly not possible?</p>

<p><strong>I'm aware of previous posts / questions (<a href=""https://stackoverflow.com/questions/27905918/does-google-app-engines-git-push-to-deploy-also-work-with-git-submodules"">circa 2012</a>) that mention you can't deploy submodules to Google App Engine, but I was wondering if that hasn't changed or if someone hasn't figured out a workaround?</strong></p>
","4","537089","",""
"46352657","3245247","2017-09-21 20:27:47","3","722","<git><github><git-submodules>","Modify URL of a nested submodule in git","<p>I'm working with the latest version of ardupilot firmware.
The goal is to make the ardupilot talking with a companion board using the mavlink protocol.</p>

<p>I started creating a fork of the original ardupilot repository on my github account.</p>

<p>The integration of the companion board would require me to modify also the code of some submodules of the ardupilot repository: PX4Firmware and mavlink.</p>

<p>Therefore, in order to be able to do it, I've forked also the various submodules of ardupilot on my github account. </p>

<p>Then, I've modified the .gitmodules file on my fork of the ardupilot repo, to be sure that the initialization of the submodules uses my forks instead of the original ones. The modification are as follows:</p>

<pre><code>[submodule ""modules/PX4Firmware""]
path = modules/PX4Firmware
url = git://github.com/MY_GITHUB_ACCOUNT/PX4Firmware.git
[submodule ""modules/PX4NuttX""]
path = modules/PX4NuttX
url = git://github.com/MY_GITHUB_ACCOUNT/PX4NuttX.git
[submodule ""modules/uavcan""]
path = modules/uavcan
url = git://github.com/MY_GITHUB_ACCOUNT/uavcan.git
[submodule ""modules/waf""]
path = modules/waf
url = git://github.com/MY_GITHUB_ACCOUNT/waf.git
[submodule ""modules/gbenchmark""]
path = modules/gbenchmark
url = git://github.com/MY_GITHUB_ACCOUNT/benchmark.git
[submodule ""modules/mavlink""]
path = modules/mavlink
url = git://github.com/MY_GITHUB_ACCOUNT/mavlink
[submodule ""gtest""]
path = modules/gtest
url = git://github.com/MY_GITHUB_ACCOUNT/googletest
</code></pre>

<p>After this, I realized that I need to modify the code of one submodule of the PX4Firmware as well. Therefore I repeated the same procedure within the PX4Firmware repo:</p>

<ol>
<li>Fork of the sub-sub-module on my github account</li>
<li><p>Modification of the .gitmodules file inside the PX4Firmware repo as follows:</p>

<pre><code>[submodule ""mavlink/include/mavlink/v1.0""]
path = mavlink/include/mavlink/v1.0
url = git://github.com/MY_GITHUB_ACCOUNT/c_library.git
[submodule ""src/modules/uavcan/libuavcan""]
path = src/modules/uavcan/libuavcan
url = git://github.com/UAVCAN/libuavcan.git
[submodule ""Tools/genmsg""]
path = Tools/genmsg
url = https://github.com/ros/genmsg.git
[submodule ""Tools/gencpp""]
path = Tools/gencpp
url = https://github.com/ros/gencpp.git
[submodule ""src/lib/matrix""]
path = src/lib/matrix
url = https://github.com/PX4/Matrix.git
[submodule ""src/lib/DriverFramework""]
path = src/lib/DriverFramework
url = https://github.com/PX4/DriverFramework.git
[submodule ""src/lib/ecl""]
path = src/lib/ecl
url = https://github.com/PX4/ecl.git
</code></pre></li>
</ol>

<p>After modifying the files, I run the commands <strong>git submodule sync</strong> and <strong>git submodule update</strong>. I've also commited both .gitmodules files and pushed them to the corresponding master branches.</p>

<p>To see if it worked, I cloned my fork of the ardupilot on a new folder and initialized all the submodules recursively:</p>

<pre><code>git clone https://github.com/MY_GITHUB_ACCOUNT/ardupilot.git
cd ardupilot
git submodule update --init --recursive
</code></pre>

<p>Unfortunately it didn't work as expected. While the submodules of my fork of ardupilot seemed to be downloaded from my github, the submodules of the PX4Firmware are still downloaded from the original repos.</p>

<p>Here you can find the output of the <strong>git submodule update --init --recursive</strong> command: <a href=""https://pastebin.com/ECi4wQEZ"" rel=""nofollow noreferrer"">https://pastebin.com/ECi4wQEZ</a></p>

<p>My problem is that I cannot commit on the original repositories, of course, therefore I have to work with forks to keep track of my modifications, as far as I understood.</p>

<p>I've found and tried many asnwers here on stackoverflow:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/14404704/how-do-i-replace-a-git-submodule-with-another-repo/"">How do I replace a git submodule with another repo?</a></li>
<li><a href=""https://stackoverflow.com/questions/913701/changing-remote-repository-for-a-git-submodule"">Changing remote repository for a git submodule</a></li>
</ol>

<p>and many others, but none of them worked in my case.</p>

<p>Do you have any suggestions?</p>

<p>Thank you.</p>

<p><strong>-------- UPDATE --------</strong></p>

<p>In the meantime I've found a way to make it working.</p>

<p>I describe the procedure here in case someone needs it or knows a better way to do that:</p>

<p>I started solving the issue about the url of the sub-sub module: make sure that the PX4Firmware repo uses git://github.com/MY_GITHUB_ACCOUNT/c_library.git instead of the original one.</p>

<p>Here is the procedure:</p>

<ol>
<li>Go on the main page of the PX4Firmware repo on my github</li>
<li>Modify the .gitmodules file (change of url). <strong>Note:</strong> I've figured out that the git protocol doesn't allow to push, therefore I've used https.</li>
<li>Save changes.</li>
<li>Clone the PX4Firmware repository on my PC.</li>
<li>Initialize the submodules after going the root folder of the PX4Firmware repo, with the command <strong>git submodule update --init --recursive</strong></li>
<li>cd into the submodule folder</li>
<li>running the command <strong>git checkout __sha__</strong> where <strong>sha</strong> is the latest commit of my local copy of the sub-sub module.</li>
<li>going up one level with <strong>cd..</strong></li>
<li>running the command <strong>git add submodule_folder</strong></li>
<li>git commit and then push</li>
</ol>

<p>From the main repository (ardupilot) I repeated the same procedure to make sure that the PX4Firmware submodule is the fork on my repository instead of the original one.</p>

<p>I'm sure there is a better way to do this. If you know it, please share.
I also hope this can help somebody else with the same problem.</p>
","0","3245247","0","0"
"46352710","528894","2017-09-21 20:31:11","0","62","<git><vim><git-submodules><vim-plugin>","converting git submodules to regular directories","<p>I would like to push some submodules (like vim bundles loaded through Vundle) as normal directories to my GitHub, since I am having difficulty getting the submodules one by one to my other machine. It will be much easier if I can push all bundles like normal directories</p>

<pre><code>git add vim-workshop/bundle/Vundle.vim/*
</code></pre>

<p>I am getting following error when I run the above</p>

<pre><code>fatal: Pathspec 'vim-workshop/bundle/Vundle.vim/autoload' is in submodule 'vim-workshop/bundle/Vundle.vim'
</code></pre>

<p>Is there an easy way to convert all submodules to normal directories. I tried removing .git in the submodule folder, that did not help</p>
","5","528894","",""
"46353986","4664804","2017-09-21 22:18:49","4","1020","<c#><git-submodules><libgit2sharp>","checkout submodule in libgit2sharp","<p>we have found that <code>git submodule update --recursive -f</code> update takes quite a while (as run from a .bat file in windows 7) and are hoping to use a compiled exe (probably c#.NET via libgit2sharp) to to checkout each submodule independently (there are 4).
There is a noticeable difference in the batch file speed when we use four sequential <code>git checkout -f [hash]</code> commands after cd'ing into each submodule vs running <code>submodule update</code>, and we want that speed gain.  </p>

<p>Anyone know how to checkout a specific commit of a submodule with libgit2sharp? since the HEAD property of <code>repo.Submodule[""name""]</code> isn't set-able, I tried to get creative with this (treating the submodules as their own repos), but libgit2sharp seems to think they <em>aren't</em> their own repo...bummer:</p>

<pre><code>        for (int cntr = (int)argumentIndeces.LiquidsId; cntr &lt; (int)argumentIndeces.MethodConfigId; cntr++)
        {
            Logger.Debug(""About to checkout '"" + argNames[cntr].Replace('/', '\\') + ""' at commit: '"" + arguments[argNames[cntr]] + ""'"");
            Repository sub = new Repository(superProjectPath + ""\\"" + argNames[cntr].Replace('/', '\\') );
            Commands.Checkout(sub, arguments[argNames[cntr]]);
            Logger.Debug(""Checked out '"" + argNames[cntr].Replace('/', '\\') + ""' at commit: '"" + arguments[argNames[cntr]] + ""'"");
            Console.WriteLine(""checked out: "" + sub.Tags);
        }
</code></pre>
","0","4664804","0","0"
"64915612","6933148","2020-11-19 16:14:46","3","1408","<git><git-submodules><bert-language-model>","Error ""version"" not found after adding bert as a submodule to my git repo","<p>After adding BERT as a submodule, cannot use it, the version info is missing in the config file. These are the main steps:</p>
<p>1- I've used the <code>git submodule add https://huggingface.co/bert-base-multilingual-uncased</code> command to add it as a submodule to my repos
2- I've put it in a directory whose name is: <code>pretrained/mbert/</code>
3- I've used the following code to use it:</p>
<pre><code>from sentence_transformers import SentenceTransformer


def embed_text(sentences, pretrained=&quot;../pretrained/mbert/bert-base-multilingual-cased&quot;): 
    &quot;&quot;&quot;
    Computes the embeddings of the different sentences in input.
    :param sentences: list, of sentences
    :param pretrained: str, the pretrained bert model
    :return: list, of list
    &quot;&quot;&quot;

    model = SentenceTransformer(pretrained) 
    sentence_embeddings = model.encode(sentences)

    return [arr.tolist() for arr in sentence_embeddings]
</code></pre>
<p>I've got the following error:</p>
<pre><code>model = SentenceTransformer(pretrained)  
  File &quot;C:\ProgramData\Anaconda3\lib\site-packages\sentence_transformers\SentenceTransformer.py&quot;, line 104, in __init__
    if config['__version__'] &gt; __version__:
KeyError: '__version__'
</code></pre>
","1","6933148","0","0"
"28110097","2212899","2015-01-23 12:37:02","15","6857","<git><git-submodules>","Adding a git submodule inside of a submodule (nested submodules)","<p><a href=""https://stackoverflow.com/questions/1535524/git-submodule-inside-of-a-submodule-nested-submodules"">As described in this Question</a></p>

<p>Is it possible for a git submodule to be made of several other git submodules, and the super git repo to fetch the contents for each submodule?</p>

<p>The author assumed a git submodule hierarchy like this:</p>

<ul>
<li>repo1     

<ul>
<li>submodule  xyz1  </li>
<li>submodule  xyz2  </li>
</ul></li>
<li>repo2  

<ul>
<li>submodule repo1   </li>
</ul></li>
</ul>

<p>This question is about the possibility of nesting a submodule within a submodule:</p>

<ul>
<li>repo1   

<ul>
<li>submodule a   

<ul>
<li>submodule ab  </li>
<li>submodule ac   </li>
</ul></li>
</ul></li>
</ul>

<p>Real example of a .gitmodules should look like this:</p>

<pre><code>[submodule ""Source/V8""]
    path = Source/V8
    url = https://chromium.googlesource.com/v8/v8.git
[submodule ""Source/V8/build/gyp""]
    path = Source/V8/build/gyp
    url =  https://chromium.googlesource.com/external/gyp
[submodule ""Source/V8/third_party/cygwin""]
    path = Source/V8/third_party/cygwin
    url = https://chromium.googlesource.com/chromium/deps/cygwin
[submodule ""Source/V8/third_party/python_26""]
    path = Source/V8/third_party/python_26
    url = https://chromium.googlesource.com/chromium/deps/python_26
[submodule ""Source/V8/third_party/icu""]
    path = Source/V8/third_party/icu
    url = https://chromium.googlesource.com/chromium/deps/icu52
[submodule ""Source/V8/testing/gtest""]
    path = Source/V8/testing/gtest
    url = https://chromium.googlesource.com/chromium/testing/gtest
[submodule ""Source/V8/testing/gmock""]
    path = Source/V8/testing/gmock
    url = https://chromium.googlesource.com/chromium/testing/gtest
</code></pre>

<p>Note that the path of the submodules are nested:</p>

<ul>
<li>Source/V8

<ul>
<li>Source/V8/build/gyp</li>
<li>Source/V8/third_party/cygwin</li>
</ul></li>
</ul>

<p>I tried the following example with no success: </p>

<pre><code> git submodule add https://chromium.googlesource.com/v8/v8.git   
 Source/V8
 git submodule add https://chromium.googlesource.com/external/gyp 
 Source/V8/build/gyp 
</code></pre>

<p>results in:</p>

<pre><code> The following path is ignored by one of your .gitignore files:
 Source/V8/build/gyp
 Use -f if you really want to add it.
</code></pre>

<p>using git submodule add -f results in:</p>

<pre><code>Cloning into 'Source/V8/build/gyp'...
remote: Sending approximately 10.28 MiB ...
remote: Total 16486 (delta 10444), reused 16486 (delta 10444)
Receiving objects: 100% (16486/16486), 10.28 MiB | 2.07 MiB/s, done.
Resolving deltas: 100% (10452/10452), done.
Checking connectivity... done.
fatal: Pathspec 'Source/V8/build/gyp' is in submodule 'Source/V8'
Failed to add submodule 'Source/V8/build/gyp'
</code></pre>

<p>Please let me now if this case is possible to achieve.</p>

<p><strong>Update:</strong> Note this question is about creating a submodule structure, not initializing it.</p>
","2","2212899","",""
"46380842","6165026","2017-09-23 14:49:57","0","25","<git><git-submodules>","Creating new git repository as a replacement of existing git repository","<p>I have three existing git repos <strong>RepoA</strong>, <strong>RepoB</strong> and <strong>RepoC</strong>.</p>
<p><strong>RepoA</strong> is being used as a <strong>submodule</strong> within <strong>RepoC</strong>.</p>
<p>What I am looking for is to use <em>RepoB</em> as <em>RepoA</em> now onwards, and mark <em>RepoA</em> as obsolete. To avoid updating .gitmodule file in each dependent repositories, I simply want to get rid of <em>RepoA</em> and rename <em>RepoB</em> as <em>RepoA</em>.</p>
<h3>To summarize, existing state is</h3>
<p><em>RepoA</em> - with latest develop branch having commit ID 12345
<br><br>
<em>RepoC</em> -&gt; submodule  -&gt; <em>Repo A</em> (12345)
<br><br>
<em>RepoB</em> - with latest develop branch having commit ID 98765</p>
<h3>What I want is,</h3>
<p><em>RepoA</em> - deleted or renamed to &quot;obsolete&quot;</p>
<p><em>RepoB</em> - renamed to <em>RepoA</em> (so that .gitmodule files in other repos stays valid)</p>
<p><em>RepoC</em>
-&gt; submodule  -&gt; <em>RepoA</em> (renamed <em>RepoB</em>) (98765)
<br><br><br>
I tried to do some experiments, but not sure what steps shall I follow to be safe without too much mess for <em>RepoC</em> users.</p>
<p>Great thanks for your help!</p>
","1","6165026","",""
"46385332","5655618","2017-09-23 23:58:32","2","169","<git><github><git-branch><git-submodules><git-fork>","git repo with submodules: fork and create your own branch","<p>I am having issues working with git submodules. I want to know a clean way of doing the following. </p>

<p>I want to fork a git repository which has submodules and then I want to create my own branch for each of the submodule and work on that. Can anyone tell a clean way of doing this? One way that I know is to basically fork each submodule separately, set the upstream and create your own branch. But this process is a little painful if there are a lot of submodules. Also as in general for the git repos with submodule a particular commit point in the submodule is tracked. If I create my own fork for each submodule it will become hard to be in sync with the original git repo.</p>

<p>Any suggestions ?</p>

<p>Thanks.</p>
","2","5655618","0","0"
"10152031","256007","2012-04-14 07:56:35","1","670","<git><github><nested><git-submodules>","git nested projects","<p>I've a stable and functioning project <code>X</code>. I want a module to be added to it and that's is from some other project <code>Y</code> on github in my <code>modules</code> directory. </p>

<p>I've <code>git remote add Y git@github.neel/Y.git</code> followed by <code>git fetch Y</code>
But there there is nothing on <code>Y</code> directory yet . I followed <a href=""http://progit.org/book/ch6-7.html"" rel=""nofollow"">http://progit.org/book/ch6-7.html</a>
and also did the checkout but still the directory is empty</p>

<p>I don't want to break my existing project for submoduling have I already done anything wrong with it ? </p>
","0","256007","",""
"65245862","4020435","2020-12-11 04:38:33","0","368","<git><git-submodules>","Branching in a git repo with submodules","<p>Say I create a git repo with a submodule in it. Then I clone the repo (with the submodule) and create a branch in my local repo. Will that branch include the submodule? If I change 2 files in the repo, f1 an f2, with f1 in the submodule and f2 outside of the submodule, and then commit my change, will that commit include both files? If I then push the commit, will that change the remote submodule?</p>
","0","4020435","",""
"28460814","2177061","2015-02-11 17:38:40","1","511","<git><git-submodules>","git trying to clone a submodule's ref that doesn't exist","<p>I'm trying to clone a project with submodules, and I get a message like this one:</p>

<pre><code>fatal: reference is not a tree: da3d99e1e6c554231cba76066a7b3149592e597e
Unable to checkout 'da3d99e1e6c554231cba76066a7b3149592e597e' in submodule path 'module_path'
</code></pre>

<p>Now, I'm not a first timer with git modules, and first I checked if the co-worker who pushed the main project, forgot somehow to push the module as well, <strong>and this is not the case.</strong></p>

<p>Point is, not only the module in <code>module_path</code> doesn't have the specific commit anywhere (I've checked all remotes and all branches in each remote), but I can't find a single reference to said commit anywhere.</p>

<p>This is a (partial) list of the things I tried (I admit that I don't know much about the innards of a git repository, so my attempt are pretty general in scope):</p>

<ol>
<li>checked the module in question, and unexpectedly is <strong>correctly checked out</strong> to the ref I would expect it to be (not the one that's giving me the error), which is the last commit that was made for the submodule</li>
<li>grepped the whole tree (including <code>.git</code> subdirs) for a file containing the offending reference</li>
<li><code>find</code> on the tree (including <code>.git</code> and submodules) for a filename <em>containing</em> the offending ref.</li>
<li><code>git verify-pack</code> on each and every pack file, grepping for the offending ref (nope: I <em>do find</em> the one I expect, though)</li>
<li>entered the submodule in question in <code>.git/modules/&lt;module name&gt;</code>, and done the aforementioned operations there too (not that I expected to find anything, as all previous operations where recursive)</li>
<li>mirrored the remote locally, cloned it, verified that the problem can be reproduced in this way too, and replicated all tests from  1 to 5 in the bare repository as well</li>
<li>tried <code>dtruss</code> (it's like <code>strace</code>, but on a Mac), without finding anything relevant on a <em>cursory</em> look</li>
<li>checked the <code>reflog</code> (not that I did expect anything). No dice.</li>
</ol>

<p>I guess I could try force-pushing the current commit upward on the remote, but I would really like to understand what's going on, specifically: where does that ref comes from? Why do I get that error?</p>

<p>Thanks for the help!</p>

<p><strong>UPDATE</strong> found a new ""toy"":</p>

<pre><code>$ git cat-file -t da3d99e1e6c554231cba76066a7b3149592e597e
fatal: git cat-file da3d99e1e6c554231cba76066a7b3149592e597e: bad file
</code></pre>

<p>this happens both in the main git repository, and in the submodule's one (same message)</p>

<p><strong>UPDATE2</strong> found the command <code>ls-tree</code> and it <strong>doesn't</strong> report the offending ref for the specific submodule</p>

<pre><code>$ git ls-tree master:&lt;plugin_location&gt; |grep &lt;plugin_name&gt;
160000 commit afa6b85e6aac7dfa13b74fb26fe68055864cdebe  &lt;plugin_name&gt;
</code></pre>

<p>but the one is actually checked out in the submodule :(</p>

<p><strong>UPDATE3</strong> turns out that the refs actually existed on my coworker's machine (they where in the reflog, that's why I didn't noticed them at first glance), and after a bit of fiddling I fixed the problem. The question still stands, though: <strong>where does git save the ref of the submodules</strong>?</p>
","2","2177061","0","0"
"65259163","5258204","2020-12-11 21:57:25","0","96","<git><git-submodules><git-remote><subtree>","How to have editable git dependencies in my project (fe. Android)","<p>I just wonder if somebody can help me solve this issue which Im trying to solve for several days...</p>
<p>I want to make private reusable libraries for my projects but I want to be able to edit these libraries (for example some library can provide me with prepared login screen and I want to tweak design of this screen)
I already tried submodules, but that´s not really appropriate solution
I also tried subtrees with multiple remotes but I think it will be messy when I have like 10 libraries in project (git tree will be huge and complicated)</p>
<p>In my head the behaviour should be something like this:</p>
<ul>
<li>I add dependencies to my project</li>
<li>I edit and tweak these libraries</li>
<li>When I commit these changes, I want these changes be in my main git project, not in the library git</li>
<li>When I make some bugfixes in my libraries, I push these changes with TAG and then pull the changes to my main project and resolve conflicts if any show up</li>
</ul>
<p>I discovered this plugin <a href=""https://github.com/alexvasilkov/GradleGitDependenciesPlugin"" rel=""nofollow noreferrer"">https://github.com/alexvasilkov/GradleGitDependenciesPlugin</a> which seemed promising but have the same flaw as submodules (I must commit changes to the library git instead of main project git)</p>
<p>Is something like this even possible? Thanks for any help</p>
","0","5258204","",""
"10503175","1260237","2012-05-08 17:08:49","6","2435","<git><git-submodules>","Possible to have git track a single file from an external repo?","<p>I know about submodule, but have a weird edge case where I want to avoid keeping a separate directory for the external repository's code.  </p>

<p>I have a LaTeX project for my graduate thesis:
<a href=""https://github.com/jklukas/gradthesis"" rel=""nofollow"">https://github.com/jklukas/gradthesis</a></p>

<p>Which uses a style file which I keep in a separate repository (for others to easily use):
<a href=""https://github.com/jklukas/uwthesis"" rel=""nofollow"">https://github.com/jklukas/uwthesis</a></p>

<p>I could include uwthesis as a submodule, but LaTeX only looks for style files in the main directory.  There are hacky ways around this in LaTeX, like giving the explicit path when importing the style file, but that just seems ugly.</p>

<p>Currently, I'm just keeping a copy of <code>uwthesis.sty</code> in the <code>gradthesis</code> repo.  Would it be possible to configure <code>uwthesis</code> as a remote and be able to push changes there for just this one file?</p>
","3","1260237","0","0"
"10516497","1349278","2012-05-09 12:49:53","2","1481","<git><pip><git-submodules>","How to make pip update submodules of a git repository?","<p>I'm using pip for deploying my package and I want it to pull my package's submodules recursively whenever I upgrade my package, does anybody know how can I do so?</p>
","0","1349278","",""
"46734720","4818853","2017-10-13 16:59:15","0","159","<git><git-submodules>","How to use git-submodule to track feature branches?","<p>I have currently almost 20 java repositories in my Source Control. They all have different build plans but they are all built with similar strategy. I am thinking of to use <code>git-submodule</code> to have all the 20 repos as part of a single repository with single build plan. But looks-like gitsubmodule can track only one branch in <code>.gitsubmodule</code>. </p>

<pre><code>[submodule ""demo-1""]
    path = """"
    url = https://github.com/hsdajsd/demo-1.git
    branch = master
[submodule ""demo-2""]
    path = """"
    url = https://github.com/hsdajsd/demo-2.git
    branch = master
</code></pre>

<p>How can I configure <code>gitsubmodules</code> to track all the branches in a submodule(including mainline and feature branches). Any suggestions from the community? Idea is to trigger the single build plan whenever any changes happens in any of the repositories regardless of branches.</p>
","0","4818853","",""
"65298409","969114","2020-12-15 00:30:51","0","78","<git><git-submodules>","How to git reset --hard HEAD^ root of repo without affecting submodules","<p>After making a temporary commit to the root of a repo, which has submodules, I haphazardly ran <code>git reset --hard HEAD^</code> with the intention of just deleting said commit on the master's root - but to my dismay affect all submodule repos too....</p>
<p>I just wanted to delete the head commit on the root repo.</p>
<p>Is there a better/safer way to accomplish this task without affecting the submodule repos ?</p>
","0","969114","",""
"10548178","1190041","2012-05-11 08:43:54","5","1406","<git><git-submodules><git-rm>","git rm -r doesn't work in a submodule","<p>Try to change submodule as described in <a href=""http://git-scm.com/book/en/Git-Tools-Submodules"" rel=""nofollow"">git book</a></p>

<pre><code>$ git rm -r vendor/html-minifier
$ git submodule add https://github.com/kangax/html-minifier.git vendor/html-minifier
</code></pre>

<p>But it fails with following</p>

<pre><code>rm 'vendor/html-minifier'
fatal: git rm: 'vendor/html-minifier': Is a directory
</code></pre>
","2","1190041","0","0"
"10555533","1049688","2012-05-11 16:52:39","6","4219","<git><git-submodules>","git deploy with submodules","<p>I've been looking into different ways of deploying sites using git, and found the following tutorial:</p>

<p><a href=""http://42pixels.com/blog/quick-and-dirty-git-deployment"" rel=""nofollow noreferrer"">http://42pixels.com/blog/quick-and-dirty-git-deployment</a></p>

<p>I like the ideas presented in this tutorial, and would be keen on using it for my sites, only it doesn't seem to support submodules.</p>

<p>Is there anyway that this can be changed so that submodules are also pulled in and updated as required?</p>

<p>Thank you.</p>

<p><strong>UPDATE</strong></p>

<p>I've been working on this problem for the last couple of hours, and I seem to be making progress, but I still can't get it working.</p>

<p>I've switched to this tutorial: <a href=""http://toroid.org/ams/git-website-howto"" rel=""nofollow noreferrer"">http://toroid.org/ams/git-website-howto</a> (which is mostly the same, just a few slight changes), and after following some advice found here: <a href=""https://stackoverflow.com/a/6636509/1049688"">https://stackoverflow.com/a/6636509/1049688</a> I've ended up with a post-receive file that looks like this:</p>

<pre><code>#!/bin/sh

export GIT_WORK_TREE=/srv/www/limeblast.co.uk/htdocs_test
export GIT_DIR=/srv/www/limeblast.co.uk/.git
cd $GIT_WORK_TREE

git checkout -f master
git submodule init
git submodule update
</code></pre>

<p>This all seems fine in theory, and it would appear that the submodule commands are running, but I'm getting the following error messages back:</p>

<p><em>remote: Submodule 'wordpress' (git://github.com/WordPress/WordPress.git) registered for path 'wordpress'</em>
<em>remote: Submodule 'wp-content/themes/limeblastevolution/inc/cssCrush' (git://github.com/peteboere/css-crush.git) registered for path 'wp-content/themes/limeblastevolution/inc/cssCrush'</em>
<em>remote: fatal: working tree '/srv/www/limeblast.co.uk/htdocs_test' already exists.</em>
<em>remote: Clone of 'git://github.com/WordPress/WordPress.git' into submodule path 'wordpress' failed</em></p>

<p>Any ideas? Thank you.</p>
","0","1049688","0","0"
"46771265","4819485","2017-10-16 13:14:25","0","510","<git><git-submodules>","git submodule not pushing into correct repo","<p>I have a repo where I'm developing some library and I generate the /dist folder that I want then to push into another repo so that other apps can import only this.</p>

<p>So I read that adding this /dist as a submodule would be a way to do that.</p>

<p>My main folder (with my /src, package.json and so on) has a remote like this:</p>

<pre><code>MINGW64 ~/Documents/myapp-dw (master)
$ git remote -v
origin  https://.../_git/myapp-dw (fetch)
origin  https://.../_git/myapp-dw (push)
</code></pre>

<p>now I add a submodule with</p>

<pre><code>$ git submodule add https://.../_git/myapp-dw-dist dist
</code></pre>

<p>and a new .modules file is created with the information for the new module.</p>

<p>Next, I generate my dist folder with an npm task and the folder is created with the rest of the files inside.</p>

<p>I do <code>git status</code> and I see that folder /dist has been modified.</p>

<p>So I go to /dist and I run <code>git add .</code> and <code>git commit</code></p>

<p>Next I do <code>git push</code> from my main folder and the /dist folder is pushed into my main repository instead of my dist repository.</p>

<p>What am I missing here? I thought this was supposed to go into myapp-dw-dist as I added it as a different submodule.</p>

<p>EDIT: Just in case, I have to say that every time I rebuild my /dist folder I'm removing the folder completely (rimraf) and create it again... is it possible I'm removing some sensitive git information? I was under the impression that all git needed was the .modules file.</p>
","0","4819485","",""
"65320945","1485885","2020-12-16 09:55:01","1","133","<windows><git><git-submodules><junction>","Using git submodules as junctions in Windows","<p>If a submodule's directory is a junction (Windows), git doesn't detect it as a repository and cannot work on such submodule.</p>
<p>For example, imagine a repository <code>root</code> is in <code>c:\src\root</code>, and that has one submodule <code>subrepo</code>, that is a junction to another drive. So <code>c:\src\root\subrepo</code> links to <code>d:\submodules\subrepo</code>.</p>
<p>If you try any git command on <code>c:\src\root\subrepo</code> you will receive an error message like</p>
<blockquote>
<p>$ git pull</p>
<p>fatal: not a git repository: d:/submodules/subrepo/../.git/modules/subrepo</p>
</blockquote>
<p>How can I solve these issues?</p>
","0","1485885","",""
"46774164","8565550","2017-10-16 15:45:32","0","256","<git><github><version-control><git-submodules>","How to initialize git submodule when you already have a local copy?","<p>I already have a git repo inside another one. Let's say the directory structure is:</p>

<pre><code>repo1
  --.git
  --repo2
    --.git
</code></pre>

<p>How would I be able to tell git I want repo2 to be a submodule? Note that I already have the entire git repo on disk (I tried doing <code>git submodule add repo2</code>, but it said <code>repo URL: 'repo2' must be absolute or begin with ./|../</code>)</p>
","1","8565550","",""
"28542733","","2015-02-16 13:38:16","2","144","<git><git-submodules>","How do I upgrade git submodules to the ""gitfile"" format?","<p>Since version 1.7.8 git stores the repository information for a submodule inside the GIT_DIR of the containing repository. In the submodule .git now is a file with a ""textual symlink"" to the actual GIT_DIR (usuall something like: <code>gitdir: ../../.git/modules/submodule-path</code>).</p>

<p>It seems that git doesn't update old submodules to fit this new standard.</p>

<p>What is the recommended way of upgrading the format? Do I just:</p>

<ol>
<li>move the GIT_DIR of my submodule into the GIT_DIR of my containing repository and</li>
<li>write the gitfile by hand</li>
</ol>

<p>I'm asking because I've broken to many things by improvising. I suppose this has no impact whatsoever on how remotes store the repositories?</p>
","0","","",""
"10930828","330617","2012-06-07 11:22:08","2","83","<git><git-submodules>","How can I use one commit for git main and sub modules?","<p>Let's say I have a project(UI) which has a git submodule(Data layer). I'll often change both the submodule and the main git repo. Is it possible to modify files in both and commit them together?</p>
","0","330617","0","0"
"47090002","1137814","2017-11-03 06:50:16","0","50","<git><version-control><git-submodules>","Why there's no submodule directories when I clone git project with submodule?","<p>As stated in the <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules#Cloning-a-Project-with-Submodules"" rel=""nofollow noreferrer"">documentation</a>:</p>

<blockquote>
  <p>When you receive such a project, you get the directories that contain submodules, but none of the files yet</p>
</blockquote>

<p>I clone it with --recursive flag and git submodule init in it (?)</p>

<pre><code>$ git clone --recursive git://path/to/repo.git
$ git submodule init
$ git submodule update
</code></pre>

<p>But I don't even get the directories.
The .gitmodule file is there.</p>

<p>.gitmodule content:</p>

<pre><code>[submodule ""Alamofire""]
path = Alamofire
url = https://github.com/Alamofire/Alamofire.git
</code></pre>

<p>I use git version 2.11.0</p>
","7","1137814","",""
"47089106","432509","2017-11-03 05:35:42","1","38","<git><git-submodules>","How to commit to a git repo ignoring changes to submodules?","<p>When I run <code>git commit -a</code> I would like it to skip committing changes to submodules.</p>

<p><em>(incase it matters, I want to have the latest version of all submodules but not commit these changes to the remote git repository).</em></p>

<p>How can this be done locally, so I can update submodules, but not commit changes to them?</p>

<p>So this works for eg:</p>

<pre><code>git submodule foreach git origin master
</code></pre>

<hr>

<p>Note that this seems similar to <a href=""https://stackoverflow.com/questions/14418352/"">this question</a>, but there seems some slight difference and the accepted answer doesn't work.</p>
","0","432509","0","0"
"10941282","11236","2012-06-07 23:32:51","0","205","<java><git><playframework><git-submodules>","How to use a java git submodule inside Play Framework?","<p>I would like to use <a href=""https://github.com/kgilmer/org.openexchangerate.client"" rel=""nofollow"">org.openexchangerate.client</a> in my Play 1 app.</p>

<p>Is there a proper way to use it as a git submodule, or must I download the files and embed them in my project, losing the connection to git?</p>
","0","11236","",""
"47110680","1104939","2017-11-04 12:22:00","3","61","<git><git-submodules>","Add a git project as submodule without the projects submodules","<p>I've the following projects.
With B and C are meant to be libraries</p>

<pre><code>A - B(submodule)

C - B(submodule)
</code></pre>

<p>Now I want to include project C as git submodule in project A</p>

<pre><code>A - B(submodule)
|___C(submodule) - B'(submodule)
</code></pre>

<p>I want to get rid of the B' submodule because project A can call the build of C specifying that B is on an other location.
Can I make this work while</p>

<pre><code>git submodule update --init --recursive
A - B(submodule)
|___C(submodule) 
</code></pre>

<p>Still works?</p>
","1","1104939","0","0"
"28895590","1592264","2015-03-06 09:16:56","0","684","<git><go><git-submodules>","Should I use git submodules in go project?","<p>There's a project written in go language. And it's managed using git. Should I use git submodules or just import directives to use a 3rd-party project?</p>

<p>For example:</p>

<pre><code>// Just use import directive.
import ""github.com/3rd-party/dep""

// From a submodule.
$ cd myown
$ git add submodule https://github.com/3rd-party/dep dep
$ ...
import ""github.com/myown/dep""
</code></pre>
","0","1592264","",""
"65664846","14982230","2021-01-11 10:10:22","0","1159","<github><git-submodules><github-actions>","Authentication problem when updating private submodule within github actions","<p>My repository includes a submodule, the submodule is a private repository.
Whenever a push happens, a test-script is executed using <strong>GitHub actions</strong>.
When <strong>GitHub actions</strong> updates the submodule, it runs into an authentication problem and cannot access the submodule with GitHub actions.</p>
<p>I followed the discussion on how to authenticate to private repositories, <a href=""https://github.com/actions/checkout/issues/116"" rel=""nofollow noreferrer"">here</a> and <a href=""https://github.com/actions/checkout/issues/81"" rel=""nofollow noreferrer"">here</a>.</p>
<p>Currently, my main issue is how to access and use the personal access token as discussed in the links above.</p>
<p>One of discussion contributors uses a <code>secret.GITHUB_PAT</code> variable, the other one uses <code>secret.CI_PAT</code>.
Following <a href=""https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow"" rel=""nofollow noreferrer"">this github documentation</a>, there might be a <code>secret.GITHUB_TOKEN</code> but I have no idea how they created the other two.</p>
<p>-&gt; Are they all the same? How do I create these variables and how do I get my correct PAT put into these variables?</p>
<p>Naively running the code from <a href=""https://github.com/actions/checkout/issues/116#issuecomment-573660416"" rel=""nofollow noreferrer"">Lauszus reply</a> gives me the following error.</p>
<p><strong>My Code</strong>
assuming <code>SUBREPO</code> is the submodule,</p>
<pre><code>jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout reposistory
      uses: actions/checkout@v2
    - name: Checkout submodule
      run: |
      git config --file=.gitmodules SUBREPO.url https://${{ secrets.GITHUB_TOKEN }}:${{ secrets.GITHUB_TOKEN }}@github.com/COMP/SUBREPO.git
      git submodule sync
      git submodule update --init --recursive
</code></pre>
<p><strong>Output</strong></p>
<pre><code>Run git config --file=.gitmodules SUBREPO.url ***github.com/COMP/SUBREPO.git
  git config --file=.gitmodules SUBREPO.url ***github.com/COMP/SUBREPO.git
  git submodule sync
  git submodule update --init --recursive
  shell: /bin/bash -e {0}
Submodule 'SUBREPO' (https://github.com/COMP/SUBREPO.git) registered for path 'MYREPO/SUBREPO'
Cloning into '/home/runner/work/MYREPO/MYREPO/MYREPO/SUBREPO'...
fatal: could not read Username for 'https://github.com': No such device or address
fatal: clone of 'https://github.com/COMP/SUBREPO.git' into submodule path '/home/runner/work/MYREPO/MYREPO/MYREPO/SUBREPO' failed
Failed to clone 'MYREPO/SUBREPO'. Retry scheduled
Cloning into '/home/runner/work/MYREPO/MYREPO/MYREPO/SUBREPO'...
fatal: could not read Username for 'https://github.com': No such device or address
fatal: clone of 'https://github.com/COMP/SUBREPO.git' into submodule path '/home/runner/work/MYREPO/MYREPO/MYREPO/SUBREPO' failed
Failed to clone 'MYREPO/SUBREPO' a second time, aborting
Error: Process completed with exit code 1.
</code></pre>
","0","14982230","",""
"10987341","105428","2012-06-11 20:50:15","1","62","<git><git-submodules><githooks><git-log>","How can I get a list of all modified files for submodules with git?","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/10757091/git-list-of-all-changed-files-including-those-in-submodules"">git: list of all changed files including those in submodules</a>  </p>
</blockquote>



<p>I have a super repository that has many submodules that are regularly being updated. I have a post-receive hook setup for this super repository that does maintenance after every commit.</p>

<p>I'm trying to get a list of all modified files in a commit, which includes any files that have been modified after a submodule has been updated.</p>

<p>Here's how I do it for a repo without submodules:</p>

<p><code>git show --pretty=""format:"" --name-only HEAD | tr '\n' ' '</code></p>

<p>...which will output something like <code>testing1.html testing2.html foo.md bar.js</code>, which is the desired format (space-delimited filenames).</p>

<p>My question is, how can I get a list of <em>all</em> the modified files for a single commit, including the files that have changed in submodules?</p>
","0","105428","0","0"
"10993464","1155825","2012-06-12 09:03:23","4","2227","<git><ssh><jenkins><fetch><git-submodules>","Jenkins, fetch git submodule over ssh with multiple users?","<p>don't know if the title describes anything about what I'm trying to say but here it is:</p>

<p>I would like to know what would be the ""best practice"" when setting up Jenkins with git submodules. Both the main and submodule repo are accessed over ssh, and since we have several users all of these have their individual user name. This is the case also for Jenkins that has its own user. HOWEVER, we've (I have) stumbled upon a problem. If I create a submodule:
<strong>git submodule add ssh://my-user-name@address-to-module-repo</strong> and <strong>push</strong> it, Jenkins will refer to me as a user when trying to <strong>fetch</strong> the submodule, which obviously will fail. And if some other user does a <strong>pull</strong>, my username will still be in the paths ( in .gitmodule, .git/config et cetera).</p>

<p>I found another post <a href=""https://stackoverflow.com/questions/6031494/git-submodules-and-ssh-access"">Git submodules and ssh access</a> handling sharing between ""normal"" users, <strong>but it doesn't really solve the issue when Jenkins will try to build</strong>, since I'm only allowed to execute shell cmd's after Jenkins has fetched everything I cannot do as mentioned in the link, or can I (Jenkins newbie)?</p>

<p>So, to sum things up. How can this be solved so that Jenkins will use its own user when fetching the submodule over ssh?</p>

<p>Br,
Mr. Pistol</p>
","0","1155825","0","0"
"47151446","2046292","2017-11-07 06:36:40","0","117","<git><git-submodules>","How to set git submodules","<p><strong>The scenario</strong></p>

<p>We have a large project with a lot of sub-projects in sub-directories and interdependencies. We are planning to outsource a part of the project.</p>

<p>Our project structure is like this
(the text are subfolder names):</p>

<pre><code>MAIN
|_Custom
|   |_Source
|   |   |_CustA (Contains multiple projects each in own directory)
|   |   |_CustB (Contains multiple projects each in own directory)
|   |
|   |_Dll
|   |  |_Debug
|   |  |_Release 
|   |
|   |_Lib
|      |_Debug
|      |_Release
|
|_Dll
|   |_Debug
|   |_Release
|
|_Lib
|  |_Debug
|  |_Release
|
|_Plugins
|  |_Dll
|  |  |_Debug
|  |  |_Release
|  |
|  |_Source
|     |_PluginA
|     |_PluginB
|
|_Source
   |_Module1
   |   |_M1A
   |   |_M1B
   |
   |_Module2
       |_M2A
</code></pre>

<p>As I mentioned above, the 'Custom' part is what we would like to outsource. These custom projects depend on the dll and lib files in the Main/Custom/Dll, Main/Custom/Lib, Main/Dll, Main/Lib and Main/Plugins/Dll folders to run. The trouble here is that irrespective of the root drive, the Main/Dll-Lib and Main/Plugins/Dll folders must maintain the exact same hierarchy and position inside the Main folder.</p>

<p>That is, suppose CustA has a project under it, which depends on some dll from the Main. All projects under CustA must mandatorily set the output paths so that 
 the exe and dll files go to Main/Custom/Dll and lib outputs to Main/Custom/Lib. 
 These exe (suppose it is inside Release) must necessarily look for the referenced main dll using the relative path ""......\Dll\Release"" which will point to the Main/Dll/Release folder and similarly for any main-plugin dlls. It cannot reference the dll or lib from some other arbitrarily set path.</p>

<p><strong>The requirement:</strong></p>

<p>When Main is to be cloned by our own people, they must get all source and dlls and files under Main. But for Custom, the folders Main/Custom/Source, Main/Custom/Dll and Main/Custom/Lib must be created(they may contain some empty file in case git does not allow empty folders.), but the specific custom modules (like CustA and its subdirectories and its output exe, dll &amp; lib files) must not be cloned. The custom modules(CustA, CustB, CustC...) must be explicitly Pulled/Cloned one by one as needed, under the Main/Custom/Source folder to get their source code, and built to obtain their exe-dll-lib files.</p>

<p>On the other hand, when outsourcing, it must be easy to setup at their end also.
Here, they should be able to clone the Main in such a way that they obtain the Main/Dll, Main/Lib and Main/Plugins/Dll folders and their content exe-dll-lib and other output files, but not the source code inside Main/Source and Main/Plugins/Source. Also, as the outsource will be done per module of Custom, supposing that this developer has been assigned CustA, he must be easily able to get the source code for all the projects under CustA, but must not be able to Clone/Pull Custom/Source/CustB.</p>

<p><strong>What I have already tried:</strong></p>

<p>The whole Main and everything inside it currently is backed up to an SVN repository on our own server machine. But we are looking to migrate to git, and
use Nulabs-backlog for project issue tracking and management.</p>

<p>I did some research and created a copy of our project structure with dummy files and was able to create a test repo with all (I mean ALL) the files and subfolders, but this did not allow the restricted access like I mentioned above.</p>

<p>I understand that I can partition the whole project into multiple smaller repositories and then use the git submodule feature to reference specific repositories under other repos. So I created separate repositories from Main/Plugins/Source, Main/Source, and for the custom modules, separate repositories each for Main/Custom/Source/CustA, Main/Custom/Source/CustB, Main/Custom/Source/CustC etc. and upload them to remote. Then I created a repository for the Main folder itself and added the Main/Dll, Main/Lib, Main/Plugins/Dll folders to this. Here, the #/Source modules show up as sub-modules which at first seems OK. When I push this main repo to remote, the remote also shows that CustA, CustB..., Main/Source, Main/Plugins/Source etc. are sub-modules while the Dll and Lib folders show the correct files.</p>

<p>But I cannot understand how to clone these properly. </p>

<p><strong>The problem:</strong></p>

<p>When I clone Main repo from remote, the cloning does recreate the outsource scenario where the source folders do not contain anything as they are submodules, while the Dll and Lib folders are properly populated. But when I try to pull the Main/Source or Main/Plugins/Source folders explicitly, it does not work. Neither it does not allow me to set the remote path of the source folders as these folders themselves are part of the main repo, nor does it allow me to execute a Pull when I delete these empty source folders, and then recreate them and set their remote path to reflect the actual sub-module repo URL.</p>

<p>Is the partitioning that I did wrong? Or is the clone step wrong? If so, how can I set up git properly to allow the above requirements?</p>
","4","2046292","",""
"11025783","50175","2012-06-14 02:09:43","1","35","<git><commit><git-submodules>","How do I recover from committing a git project before committing the submodule?","<p>I have a project in a git repository, with a git submodule. I made changes to both the project and the submodule, and committed the project.</p>

<p>Apparently I was supposed to commit the submodule first, then commit the project. Next time I'll do that.</p>

<p>In the meantime, how do I recover?</p>
","0","50175","",""
"65711580","969478","2021-01-14 00:00:42","1","53","<git><git-submodules>","How can I find where a git submodule was removed?","<p><a href=""https://github.com/mycelium-com/wallet-android"" rel=""nofollow noreferrer"">Our project</a> got a submodule <code>fiosdk_kotlin</code> added and now the most recent merge removed it but I can't find why its removal would be considered by git as a &quot;trivial merge&quot; as <code>git instaweb</code> puts it which as far as I understand means the same as <code>git show</code> yielding no chunks.</p>
<pre><code>$ git show 6de05c
commit 6de05c46fb6dd19bf0d834290de8a3c36da22da3
Merge: 2b35c1a67 323b5e121
</code></pre>
<p>Now to explore what happened to the submodule:</p>
<pre><code>$ git diff 6de05c46f...06ef8cfec -- fiosdk_kotlin
$ git diff 06ef8cfec...6de05c46f -- fiosdk_kotlin
diff --git a/fiosdk_kotlin b/fiosdk_kotlin
deleted file mode 160000
index 698b2b41f..000000000
--- a/fiosdk_kotlin
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 698b2b41f4c7581bb4934da5d37f253d90963278
</code></pre>
<p>So there should be a commit somewhere on the second branch where the module was removed, right?</p>
<p><code>git log --all --full-history --patch -- .gitmodules</code> should show me all additions or removals of submodules? It shows many commits (merge commits?) that don't show a patch at all. I can filter that down with <code>-Sfiosdk_kotlin</code>:</p>
<pre><code>$ git log --all --full-history --patch -Sfiosdk_kotlin -- .gitmodules
commit 1d6d2af7bcfc043e8a7efb14cecbdd6a9595a1de
Author: Leo Wandersleb &lt;leo.wandersleb@mycelium.com&gt;
Date:   Wed Sep 16 12:35:48 2020 -0300

    add fio as git submodule
    
    remove copied folders androidfioserializationprovider and fiosdk
    fix minSdk via main build.gradle
    restore String.isFioActor() in FIOToken

diff --git a/.gitmodules b/.gitmodules
index d001539c2..fafdcaa6f 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,6 @@
 [submodule &quot;wallet-android-modularization-tools&quot;]
        path = wallet-android-modularization-tools
        url = git@github.com:mycelium-com/wallet-android-modularization-tools
+[submodule &quot;fiosdk_kotlin&quot;]
+       path = fiosdk_kotlin
+       url = https://github.com/fioprotocol/fiosdk_kotlin
</code></pre>
<p>What the hack? It only ever gets added, yet it's gone?</p>
<p>Turns out, it's still there in .gitmodules but not pinned to any revision or something??:</p>
<pre><code>$ cat .gitmodules 
[submodule &quot;wallet-android-modularization-tools&quot;]
    path = wallet-android-modularization-tools
    url = git@github.com:mycelium-com/wallet-android-modularization-tools
[submodule &quot;fiosdk_kotlin&quot;]
    path = fiosdk_kotlin
    url = https://github.com/fioprotocol/fiosdk_kotlin
$ git submodule 
 de7973e0781a8f6245b345999b6d2b7c6c45be6b wallet-android-modularization-tools (remotes/origin/api29submodule)
</code></pre>
<p>So as I don't get revisions to show in <code>git log</code> but in <code>git diff</code>, I tried this:</p>
<pre><code>$ for h in $( git log --all --full-history --pretty=format:%h 1d6d2a~1..master ); do git show --oneline --patch $h -- fiosdk_kotlin | cat ; done
362bf3885 update ndk and cmake versions
diff --git a/fiosdk_kotlin b/fiosdk_kotlin
index a8ab9eaec..698b2b41f 160000
--- a/fiosdk_kotlin
+++ b/fiosdk_kotlin
@@ -1 +1 @@
-Subproject commit a8ab9eaec553bfc8fe986a390d89fc459eebc26c
+Subproject commit 698b2b41f4c7581bb4934da5d37f253d90963278
5b684defc Update fiosdk_kotlin
diff --git a/fiosdk_kotlin b/fiosdk_kotlin
index a8ab9eaec..d643a8db5 160000
--- a/fiosdk_kotlin
+++ b/fiosdk_kotlin
@@ -1 +1 @@
-Subproject commit a8ab9eaec553bfc8fe986a390d89fc459eebc26c
+Subproject commit d643a8db507394840ecffb7915d9af0228f45442
4a2a7f343 merge with fio branch
diff --git a/fiosdk_kotlin b/fiosdk_kotlin
index feffc134e..a8ab9eaec 160000
--- a/fiosdk_kotlin
+++ b/fiosdk_kotlin
@@ -1 +1 @@
-Subproject commit feffc134e1904331f7a5dc36b8fe125e6a8fcef1
+Subproject commit a8ab9eaec553bfc8fe986a390d89fc459eebc26c
f646016b6 fix obtRecord send
diff --git a/fiosdk_kotlin b/fiosdk_kotlin
index feffc134e..a8ab9eaec 160000
--- a/fiosdk_kotlin
+++ b/fiosdk_kotlin
@@ -1 +1 @@
-Subproject commit feffc134e1904331f7a5dc36b8fe125e6a8fcef1
+Subproject commit a8ab9eaec553bfc8fe986a390d89fc459eebc26c
405730262 update fiosdk_kotlin submodule to latest master
diff --git a/fiosdk_kotlin b/fiosdk_kotlin
index b57f30432..feffc134e 160000
--- a/fiosdk_kotlin
+++ b/fiosdk_kotlin
@@ -1 +1 @@
-Subproject commit b57f30432d6a72f3a5a75374950fe39ce9cc096e
+Subproject commit feffc134e1904331f7a5dc36b8fe125e6a8fcef1
1d6d2af7b add fio as git submodule
diff --git a/fiosdk_kotlin b/fiosdk_kotlin
new file mode 160000
index 000000000..b57f30432
--- /dev/null
+++ b/fiosdk_kotlin
@@ -0,0 +1 @@
+Subproject commit b57f30432d6a72f3a5a75374950fe39ce9cc096e
</code></pre>
<p>and again I see the submodule's addition but not its removal. What am I missing??</p>
","0","969478","0","0"
"11386553","172536","2012-07-08 20:43:38","1","159","<git><bazaar><git-submodules>","filter history to clean git repo from submodules","<p>How can you remove references to submodules in a git repo which no longer uses submodules (merged them) so that bazaar can import it?</p>

<blockquote>
  <p>bzr: ERROR: The repository you are fetching from contains submodules, which are not yet supported.                                                  </p>
</blockquote>

<p>It should be possible according to jelmer: <a href=""https://bugs.launchpad.net/bzr/+bug/402814/comments/43"" rel=""nofollow"">https://bugs.launchpad.net/bzr/+bug/402814/comments/43</a></p>

<blockquote>
  <p>There is no way to tell the import system to just ignore history. You could provide a custom repository that has the submodules filtered out of the history or filter them out of your history on github.</p>
</blockquote>
","0","172536","",""
"66045125","14314692","2021-02-04 11:56:28","0","162","<git><azure-devops><git-submodules>","Git Submodule checkout for downloaded git repository as an artifact","<p>The scenario is related to the Azure DevOps pipeline. We are checking out the repo in one of the jobs and building the solution. Post archiving the repo+binaries, we are publishing that as an Artifact.</p>
<p>Now, this artifact is getting downloaded on another job (separate agent) and we want to check out the submodule (git submodule update) on this new agent without checking out the repo again.</p>
<p>Can anyone suggest something here? We tried git init/ git submodule init before git submodule update and nothing worked.</p>
<p>FYI.. the submodule update command works fine if we check out our repository.</p>
","2","14314692","",""
"11423384","413414","2012-07-10 23:17:51","0","463","<git><svn><git-submodules>","Strategy for using git-svn with submodules","<p>I would like to use Git locally, with submodules, and be able to push/pull from SVN (The company I'm at uses SVN, and a switchover to Git is nowhere in the near future). I know git-svn doesn't support this, but I'd like to be able to trick it with perhaps a shell script. Any ideas?</p>
","0","413414","",""
"29312464","3877971","2015-03-28 01:03:41","0","149","<git><git-submodules>","Manage multiple git repositories at the same level?","<p>I can't think of a good workflow for my use case :</p>

<p>I have a repository for my JS framework.</p>

<p>I would like to use this framework to make an application, keeping the ability to update my framework with git.</p>

<p>In fact, git submodules could work, but my framework files (and my application files) are scattered all over my directory tree.</p>

<p>I tried to add a remote pointing to my framework repo in my app repo in order to pull/push commits from/to my framework, but if I do that, I run into some conflicts. For example, I can't have tags with the same name in both repo. Moreover, it ""pollute"" my history.</p>

<p>A real world example :
Say I have a CakePHP website. How can I update CakePHP framework with git while versionning my website with git, too ?</p>

<p>Ideally, I would like to push commits to the framework from the app repo (like I do with submodules).</p>

<p>(Sorry, I could not find a better title for this question)</p>
","0","3877971","",""
"29321729","1436044","2015-03-28 19:43:12","1","159","<git><tags><release><git-submodules>","Can I add a git release as a submodule?","<p>I have binary files in a github release tag, which I think is not cloneable. In another git repo I'd like to add these binary files (they are like dependencies) as a submodule, so that they can get updated easily. I dont want to submit binaries to the first repository if possible.</p>

<p>How do I do this?</p>
","0","1436044","0","0"
"29331153","362445","2015-03-29 15:41:15","7","3350","<git><git-submodules><ssh-keys>","git bitbucket private submodule ssh alias issues","<p>git version 1.7.1 ( I have no power over this, on this server )</p>

<p>I have a private repo with several submodules, some of which are also private.
The submodules which are not private are coming in without issue. However the first private repo encountered returns this
<code>ssh: Could not resolve hostname bitbucket.org:username: Name or service not known</code>, and the process stops here.</p>

<p><a href=""https://confluence.atlassian.com/display/BITBUCKET/Use+the+SSH+protocol+with+Bitbucket"" rel=""nofollow"">As per </a><a href=""https://confluence.atlassian.com/display/BITBUCKET/Add+an+SSH+key+to+an+account"" rel=""nofollow"">the docs</a>, I have set up a deployment key for the staging server and have created an <code>~/.ssh/config</code> alias to point bitbucket.org to that key. This is working as the private parent repo is pulling in just fine. 
The staging server has a few locked files in the environment which I have to work around, so I am initialising as follows:</p>

<pre><code>git init
git remote add origin ssh://git@bitbucket.org/user/parent-repo.git 
git fetch
git checkout -t origin/master
</code></pre>

<p>So far so good but the submodules are empty:</p>

<pre><code># Update submodules 
git submodule update --init --recursive
# git submodule update --remote # Not available in 1.7.1
git submodule foreach git pull origin master 
## git fetch --recurse-submodules=yes # introduced 1.7.3 
</code></pre>

<p>Here is where things go wrong and ssh can't connect and the process halts on the first private repo. This isn't totally surprising as to access private repos, we need to associate another key, <a href=""https://confluence.atlassian.com/display/BITBUCKET/Use+deployment+keys"" rel=""nofollow"">which cannot be the same as the one associated with the account</a>. (scroll down to 'Private repos"" heading for some interesting comments in this article by <a href=""https://lkwdwrd.com/git-auto-deployment/"" rel=""nofollow"">Luke Woodward</a>)</p>

<p>So after making individual (I could have created just one) keys and creating ssh aliases for each of them (on the staging server), I'm stuck as to how to reference those key properly. </p>

<p>Just to be sure the aliases are working we <a href=""https://confluence.atlassian.com/display/BITBUCKET/Troubleshoot+SSH+Issues"" rel=""nofollow"">can test</a> them with:</p>

<pre><code>ssh -Tv git@&lt;alias&gt;
</code></pre>

<p>Which when successful returns a lot of output ending with:</p>

<blockquote>
<pre><code>....
authenticated via a deploy key.
You can use git or hg to connect to Bitbucket. Shell access is disabled.
This deploy key has read access to the following repositories: XXXXX
</code></pre>
</blockquote>

<p>Here is what I've tried so far. After each change, Im running:</p>

<pre><code>git submodule update --init --recursive
git submodule foreach git pull origin master
</code></pre>

<p>EDIT: as suggested in comments re updating the links, at this point a <code>git submodule sync</code> will sync all submodules which have already completed a pull. None of the private repos will be listed in this operation. So sadly this operation does not seem to address issues with missing private repos.</p>

<ol>
<li>change paths to ssh key aliases <code>.gitmodules</code></li>
</ol>

<blockquote>
  <p>Result: <code>ssh: Could not resolve hostname bitbucket.org:username</code></p>
</blockquote>

<p>It looks like an alias is resolving, but something is blocking the key?</p>

<ol start=""2"">
<li>change paths to ssh key aliases in <code>.git/config</code>.</li>
</ol>

<blockquote>
  <p>Result: <code>ssh: Could not resolve hostname &lt;alias&gt;:username</code></p>
</blockquote>

<p>Obviously the alias isn't resolving at all.</p>

<hr>

<p>As option 1 seemed to be at least making the ssh request,  I manipulated the ssh alias that I thought was routing the request to the proper key. There must be some caching in effect, because changing the host on the alias to something impossible like <code>bitbucketXXX.org</code>. The result was the same error: <code>ssh: Could not resolve hostname bitbucket.org:username</code>. I would have thought the error would have read <code>ssh: Could not resolve hostname *bitbucketXXX.org:username*</code> --HUMMMM</p>

<hr>

<h2>Update: After a bit of thought</h2>

<p>My approach so far has been to create an ssh key alias linking bitbucket.org to the parent key that I established for this server in my personal bitbucket settings. </p>

<p>When that didn't work for subs, I set up keys for each of them, and then on the server, aliases for each of them too, but keeping the parent repo key the same as before. Thus far i've been hunting for ways to reference these aliased-keys in <code>.gitmodules</code> and in <code>.git/config</code>. But this simply isn't working, the parent key is being recognised, but aliases for submodules keys are not.</p>

<p>My last approach has been to make one common key (different from my account key, they wont let you do that) and assign it to the parent repo, <em>and</em> each submodule. On the server, the alias for bitbucket.org points to this common key.</p>

<p>now when I test it with <code>ssh -Tv git@bitbucket.org</code> after a lot of output, we get:</p>

<pre><code>authenticated via a deploy key.
You can use git or hg to connect to Bitbucket. Shell access is disabled.
This deploy key has read access to the following repositories:
*A list of all the repos associated with that key*
</code></pre>

<p>While this <em>looks</em> promising, the result is the same <code>ssh: Could not resolve hostname . . .</code></p>

<p>I've even tried absorbing the user name into the alias like so</p>

<pre><code>Host bitbucket.org:&lt;user_name&gt;
    HostName bitbucket.org          
    IdentityFile ~/.ssh/shared_bb_key
</code></pre>

<p>but this results in <code>conq: invalid repository syntax.</code></p>

<hr>

<p>At this point I can't see the forest, never mind trees. Any thoughts?</p>
","3","362445","0","0"
"11450462","239337","2012-07-12 11:04:20","2","200","<git><git-submodules>","locally committing to git submodule","<p>I have a git project that contains a git submodule that I cloned from a public <strong>read-only</strong> repository (i.e. I cannot push to that repository). Is it possible to commit to that submodule? Here's how I tried to do this</p>

<pre><code>[main]$ cd sub
[sub]$ git checkout master
[sub]$ echo test &gt; new-file
[sub]$ git add new-file
[sub]$ git commit -m 'added a new file'
[sub]$ cd ..
[main]$ git add sub
[main]$ git push origin
</code></pre>

<p>So far so good. Now the problem is when I go to another computer and I do the following:</p>

<pre><code>[main]$ git pull
[main]$ git submodule update
</code></pre>

<p>but it fails with <code>fatal: reference is not a tree: af232...</code>. I thought that this would work because when I do <code>git push origin</code> in main it seems that it pushes all objects for the submodules as well (after all they are in main's .git directory). But apparently, when the second computers pulls, it does not receive these new objects.</p>
","0","239337","",""
"47543433","7773323","2017-11-29 01:02:37","0","64","<git><maven><git-submodules>","Configuration Management in a many git repositories","<p>I have the following question: Lets say I have many projects that are mostly independent from each other. All of them are released independently (also different release versions) from each other and they have mostly no code to share. But there are some things which can be shared like a global configuration which can be updated some times from the different projects.
How should I realize it? I thought it would be better to have different git repositories for the projects. But where should I put the configuration? In a submodule? In a subtree? As a dependency? Or should I use one git repo with many maven submodules with different versions?</p>

<p>Thanks</p>
","0","7773323","",""
"11454539","","2012-07-12 14:52:08","9","2746","<git><git-submodules>","How is git bundle supposed to work with submodules ?","<p>I am using git bundle to back up git repositories. In recent versions of git the repository metadata of a submodule are stored in .git/modules of the parent repository as opposed to before when it was stored in a .git directory right in the submodule. </p>

<p>When git-bundle is run in a submodule, it creates a bundle of the parent repo, omitting the submodules.</p>

<p>Anyone who can shed light on this?<br>
How can I make a git bundle of a submodule?</p>

<p>reference:
<a href=""http://git.661346.n2.nabble.com/git-bundle-behaves-unexpected-with-submodules-td7562250.html"" rel=""nofollow"">question on the git mailing list</a></p>

<p><strong>edit</strong>:</p>

<p>After reading that for sschuberth it works, I wrote a script to test and can verify that it works. I have a backup script that relied on verifying the existence of a .git <strong>directory</strong> in order to know if it is in the top level dir of a repository and that thus broke when submodules started using .git <strong>files</strong>. If anyone knows what the recommended way is to garantee that you are in the top level folder of a repository, I'm interested. I don't know how I missed this.</p>

<p>Just in case it might interest someone who has to write test scripts for submodules, this is the script I used:</p>

<pre><code>#!/bin/bash

git --version

mkdir super
mkdir subRemote

touch super/superFile.txt
touch subRemote/subFile.txt

cd super

   git init
   git add --all
   git commit -am""Initial commit""

cd ..


cd subRemote

   git init
   git add --all
   git commit -am""Initial commit""

cd ..


cd super

   git submodule add ../subRemote/.git
   git add --all
   git commit -am""added submodule""
   git submodule update
   echo -e ""\ngit log in super:""
   git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative --all


   cd subRemote

      echo -e ""\ngit bundle:""
      git bundle create ../../submoduleBundle --all --remotes

   cd ..

cd ..


git clone --mirror submoduleBundle bundledSub/.git

cd bundledSub

   git config core.bare false
   git config core.logallrefupdates true
   git remote rm origin
   git checkout

cd ..


#------------------------------------------------

cd super

   echo -e ""\nfiles in super"":
   ls -alh

cd ..


cd super/subRemote

   echo -e ""\nfiles in super/subRemote"":
   ls -alh

cd ../..


cd bundledSub

   echo -e ""\nfiles in bundledSub"":
   ls -alh

cd ..
</code></pre>
","5","","0","0"
"30069130","625454","2015-05-06 06:29:04","9","7326","<git><git-submodules><git-merge>","How to update git submodule","<p>I have just done a <code>git merge &lt;merging_branch_name&gt;</code> in the app and resolved many conflicts.</p>

<p>But when I do <code>git status</code>, I can see list of submodules with (new commits) in the message.
It looks like the submodule (branch/tag) versions have not been updated.</p>

<p>For example:</p>

<pre><code>modified:   plugins/myplugin.git (new commits)
</code></pre>

<p>How do I update the submodules with the versions (with the <code>&lt;merging_branch_name&gt;</code>)</p>

<p>I get like this in git bash  </p>

<pre><code>my_app (current_branch  |MERGING), 
</code></pre>

<p>so when I do <code>git status</code>, I get list of submodules as below</p>

<pre><code> modified:   plugins/plugin1.git (new commits)
 modified:   plugins/plugin2.git (new commits)
 modified:   plugins/plugin3.git (new commits)
 modified:   plugins/plugin4.git (new commits)
</code></pre>

<p>How do I solve this?</p>
","1","625454","0","0"
"30072816","880326","2015-05-06 09:31:21","1","89","<git><git-submodules>","Can't set tag or commit as branch/version when create git submodule","<p>I'm trying specify git submodule branch to tag:</p>

<pre><code>git submodule add --branch 8.0.0.2 -f \
              git@git.TEST.com:tbicr/test_submodule.git src/test_submodule
</code></pre>

<p>or commit:</p>

<pre><code>git submodule add --branch 5c0f8d23 -f \
              git@git.TEST.com:tbicr/test_submodule.git src/test_submodule
</code></pre>

<p>But I get next error:</p>

<pre><code>Reactivating local git directory for submodule 'src/test_submodule'.
fatal: Cannot update paths and switch to branch '8.0.0.2' at the same time.
Did you intend to checkout 'origin/8.0.0.2' which can not be resolved as commit?
Unable to checkout submodule 'src/test_submodule'
</code></pre>

<p>I see that it try checkout to <strong>origin</strong>/8.0.0.2 instead <strong>tags</strong>.</p>

<p>I even try <code>tags/8.0.0.2</code> and <code>refs/tags/8.0.0.2</code>, but it try checkout to <code>origin/tags/8.0.0.2</code> and <code>origin/refs/tags/8.0.0.2</code> in error message.</p>

<p>For <code>master</code> and other general branches all work fine.</p>

<p>I have next <code>test_submodule</code> refs:</p>

<pre><code>refs/heads/master
refs/remotes/origin/8.0
refs/tags/8.0.0.2
refs/tags/8.0.0.3
</code></pre>

<p>git version 2.1.4</p>

<p>Can I specify submodule branch/version to tag or commit?</p>
","0","880326","0","0"
"12457338","1666594","2012-09-17 10:24:08","6","1392","<c++><git><boost><github><git-submodules>","Hosting a subset of boost used in project on github","<p>I am using git for source control and hosting on github.  We are trying to keep the repo as small as possible. </p>

<p>I decided to add boost to the project, which (relative to our requirements) is quite large.  I have extracted a subset of the features required.  Now I am a bit confused as to how to handle this on git.  Should I add my subset of boost to the repository? If I add boost as a submodule, the download size is going to be a bit big (I assume, I haven't tested this).</p>

<p>How is this typically done?</p>
","0","1666594","0","0"
"30084989","1672995","2015-05-06 18:39:19","8","6114","<git><dependencies><repository><workflow><git-submodules>","My project uses over 100 git submodules, which submodule alternative can handle a lot of repositories gracefully","<p>I've been researching git subtree and other alternatives to git submodules. My project has well over 100 submodules and it's very unwieldy to manage them all.</p>

<p>Can anyone recommend a workflow that works really well with a large number of repositories that need to be kept in sync.</p>
","0","1672995","0","0"
"12464935","292952","2012-09-17 18:14:56","1","102","<xcode><macos><git><git-submodules>","Create ""Template"" XCode project that automaticly adds git-submodules etc?","<p>I have a few xcode projects (static libraries) that I include in several other projects through the use of git-submodules. This works great and I like this way of sharing code between projects. However, since I am adding some of these libraries to pretty much every new project I create I would like to streamline this process somehow. Create some sort of ""template"" of which I can base all my projects.</p>

<p>I would like some way to automaticly go through these steps:</p>

<ol>
<li>Create a new project called X</li>
<li>Add a fixed (or dynamic) list of submodules</li>
<li>Have the added submodules automaticly added to the Xcode-project</li>
</ol>

<p>Is it possible to create a script for this? With a syntax like:</p>

<p>fooproj -n ""Bar"" -s ""foundation, coredata, uikit""</p>

<p>(where Bar is the name of the new project and foundation, coredata and uikit would be the submodules to add)</p>

<p>Or is there some other way I could streamline this process?</p>
","0","292952","",""
"47798888","1534898","2017-12-13 17:20:52","3","4228","<git><git-submodules>","git clone shallow-submodules","<p>I have added few git submodules and they are configured in .gitmodules. I am interested in specific commits of submodules. Hence I commit these commits and the can be seen in git submodule status.
Say for</p>

<pre><code>[submodule ""pcl""]
        path = libs/pcl
        url = https://github.com/PointCloudLibrary/pcl.git
</code></pre>

<p>the submodule status shows <code>757e28a75a0c6c0413085a2af070670828a48527</code> libs/pcl.
This means the above SHA1 will be checked out after running <code>git submodule update --init</code></p>

<p>However, my problem is that I dont want to entirely clone the submodule pcl, because I am just interested in the commit from 757e28a75a0c6c0413085a2af070670828a48527 onwards. Is there any way to achieve this by writing a depth parameter etc in the .gitmodules file? </p>

<p>I have seen several posts, but most of them suggest to do a git add submodule. Since, I already have done this, is there a way, to edit the .gitmodule file with a depth parameter for each submodules.</p>

<pre><code>git clone --depth 10 --shallow-submodules &lt;repo&gt;
</code></pre>

<p>would in my opinion pull 10 commits of the main branch and subsequently the tip of the master branch of all the submodules. Is my understanding correct?</p>
","0","1534898","0","0"
"12529141","832074","2012-09-21 10:54:02","1","445","<git><git-submodules>","how can I find out if a git submodule has new commits","<p>We have quite a few repositories with submodules and we would like to report which submodules are candidates for upgrading because the repository they refer to has new commits. Is there a way to do this without changing the currently checked out version?</p>

<p>basically there are 3 different commits that we would like to know about;<br>
1) the commit to which origin's containing repository is pointing to<br>
2) the commit to which the local containing repository is pointing to (this might be different from 1 because of a manual pull of the submodule<br>
3) the head of the submodule repository.  </p>

<p>If local is behind origin we would like to do a submodule update.<br>
If local is ahead origin, we don't want to do a submodule update because it is probably changed by the developer.<br>
If local is behind the head of the submodule repository, we would like to get a warning.</p>
","0","832074","",""
"13425260","1749093","2012-11-16 22:17:59","5","1252","<git><url-rewriting><git-submodules><git-filter-branch><subproject>","Rewrite history git filter-branch create / split into submodules / subprojects","<p>I am currently importing a cvs project into git.<br/>
After importing, i want to rewrite the history to move an existing directory into a seperate submodule.</p>

<p>Suppose i have a structure like this:</p>

<p><code>
file1<br>
file2<br>
file3<br>
dir1<br>
dir2<br>
library<br>
</code></p>

<p>Now i want to rewrite the history so that the directory <code>library</code> is always a git submodule. Say, split out specified directories into their own submodules / subprojects</p>

<p>This is my currently code:</p>

<p>File <b>rewrite-submodule</b> (which is called)</p>

<pre><code>cd project
git filter-branch --tree-filter $PWD/../$0-tree-filter --tag-name-filter cat -- --all
</code></pre>

<p>File <b>rewrite-submodule-tree-filter</b></p>

<pre>
    #!/bin/bash

    function gitCommit()
    {
        unset GIT_DIR
        unset GIT_WORK_TREE
        git add -A
        if [ -n ""$(git diff --cached --name-only)"" ]
        then
            # something to commit
            git commit -F $_msg
        fi
    }

    _git_dir=$GIT_DIR
    _git_work_tree=$GIT_WORK_TREE
    unset GIT_DIR
    unset GIT_WORK_TREE
    _dir=$PWD

    if [ -d ""library"" ]
    then
        _msg=$(tempfile)
        git log ${GIT_COMMIT}^! --format=""%B"" > $_msg
        git rm -r --cached lib
        cd library
        if [ -d "".git"" ]
        then
            gitCommit
        else
            git init
            gitCommit
        fi
        cd ..
        export GIT_DIR=$_git_dir
        export GIT_WORK_TREE=$_git_work_tree
        git submodule add -f ./lib
    fi

    GIT_DIR=$_git_dir
    GIT_WORK_TREE=$_git_work_tree
    </pre>

<p>This code creates the .gitmodules file, but not the submodule commit entry (the line <code>Subproject commit &lt;sha1-hash&gt;</code>, output by <code>git diff</code>) in the main repository and the files in directory <code>library</code> are still versioned in the main repository and not in the subproject repository.</p>

<p>Thanks in advance for any hint</p>

<p>The .gitmodules look like this:<br>
    <pre>
    [submodule ""library""]
        path = library
        url = ./library
    </pre></p>
","4","1749093","0","0"
"30994172","4842898","2015-06-23 05:01:58","14","2293","<git><github><merge><git-submodules><merge-strategy>","Are there any git merge-strategies for ignoring submodule updates on a commit or branch merge into target branch?","<p>My usecase is:
I have a two branches of a repo containing submodules.
I want to set up auto-integrate of these two branches. But whenever there are submodule updates on both branches, my auto integrate script fails with conflicts on submodules. Is there way to ask git to ignore the changes in submodule pointers during the merge?
Or provide something like <code>merge=ours</code> for the given submodules?</p>

<p>I've read this <strong><a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes"" rel=""noreferrer"">here.</a></strong></p>

<p>I tried the merge strategies in the above page for submodule folder like this (but it only works for files)</p>

<pre><code>submodule-name merge=ours
</code></pre>
","3","4842898","0","0"
"30999406","2791584","2015-06-23 09:49:18","4","195","<git><nested><git-submodules><git-subtree>","Commiting changes in nested git subtrees","<p>I have been reading a lot on git subtrees as an alternative submodules and was wondering what is the best way to handle nested subtrees with regards to committing changes:</p>

<p>Say you have project A with a subproject B as a subtree (so A is the parent). <br> If I make changes to B while working in A, I need to use <strong>git subtree push</strong> to push the changes onto B. <br>
Similarly, If I make changes to B whilst working in B, to bring these updates in A I need to use <strong>git subtree pull</strong></p>

<p>My question is how do you handle committing changes if you add another subproject C which is a subtree in B (ie B is the parent of C). As far as I understand, the below is how you would do it. Is there a better way?</p>

<p>So say you are working in project A and then make changes to C. In order to bring these changes to C, you need to use <strong>git subtree push</strong> twice:<br> 
1. <strong>Git subtree push</strong> from A to B, then <br>
2. <strong>Git subtree push</strong> from B to C</p>

<p>Similiary, the reverse is true when making changes in C whilst working within C and <strong>git subtree pull</strong></p>

<p>This is a bit repetitive, so I was wondering if there is another way to go about it. Perhaps a better way  would to not use subtrees at all? If not, what would be an alternative?</p>
","0","2791584","0","0"
"14208974","150941","2013-01-08 05:52:28","1","161","<git><git-submodules>","How can this commit vanish from git history?","<p>I am unable to understand why a particular commit seems to have just vanished from my git history even though I can see it from a previous commit in my branch.</p>

<p>You can see that <code>master</code> contains the tag <code>v2.1.1.332</code>:</p>

<pre><code>$ git branch --contains v2.1.1.332
* master
</code></pre>

<p>Here's the commit log for <code>lib/facebook-ios-sdk</code> from <code>master</code>:</p>

<pre><code>$ git log --format=%h master -- lib/facebook-ios-sdk
4b23dc7
3cc007d
b14fbda
3e5c85d
ab962d1
d3da048
d765573
</code></pre>

<p>Note that <code>lib/facebook-ios-sdk</code> is a git submodule, not a regular path in my git repo.</p>

<p>And commit log for the same path from <code>v2.1.1.332</code>:</p>

<pre><code>$ git log --format=%h v2.1.1.332 -- lib/facebook-ios-sdk
e5ed45f
4b23dc7
3cc007d
b14fbda
3e5c85d
ab962d1
d3da048
d765573
</code></pre>

<p>Notice the commit <code>e5ed45f</code>; its apparently present in <code>v2.1.1.332</code> but not in <code>master</code>! How is this possible?</p>

<p>Even more interesting, <code>git-branch</code> indicates that <code>master</code> <em>does</em> contain <code>e5ed45f</code>:</p>

<pre><code>$ git branch --contains e5ed45f
* master
</code></pre>

<p>Also, when I run <code>git log master</code>, I do get <code>e5ed45f</code> in the list. Its just that I don't see this commit when I specify the path with <code>git log</code>.</p>

<p>Why am I asking all this? While this in itself is a curios state of things, we noticed that the submodule <code>lib/facebook-ios-sdk</code> had erroneously been set to a previous commit (the one in <code>4b23dc7</code>'s tree). We started looking for the bad commit using <code>git log master -- lib/facebook-ios-sdk</code> and that's when we encountered this. Right now we have no idea how this submodule's commit was changed to a previous value.</p>

<p><strong>EDIT</strong> wereHamster on #git pointed me to <code>git log --full-history</code>. Using this option does show the missing commit:</p>

<pre><code>$ git log --format=%h --full-history master -- lib/facebook-ios-sdk
e5ed45f
4b23dc7
3cc007d
b14fbda
3e5c85d
ab962d1
aa43dc3
d3da048
d765573
</code></pre>

<p>However it still doesn't explain why the wrong commit is checked out for the submodule:</p>

<pre><code>$ git show --format=%b e5ed45f -- lib/facebook-ios-sdk


diff --git a/lib/facebook-ios-sdk b/lib/facebook-ios-sdk
index cb42580..de7509b 160000
--- a/lib/facebook-ios-sdk
+++ b/lib/facebook-ios-sdk
@@ -1 +1 @@
-Subproject commit cb425807b1f25f916e48b35e06197bccc8b881be
+Subproject commit de7509b8bff6df7163738a979567a72fd4a13ff8

# This command was run on master
$ git submodule lib/facebook-ios-sdk
 cb425807b1f25f916e48b35e06197bccc8b881be lib/facebook-ios-sdk (v1.1-20-gcb42580)
</code></pre>
","4","150941","0","0"
"49001032","1610473","2018-02-27 04:16:07","1","559","<git><git-submodules>","Stuck on git submodule","<p>My ultimate goal is to get CoreStore installed from github.</p>

<p>The instructions for CoreStore say to use the following to install as a git submodule: <code>git submodule add https://github.com/JohnEstropia/CoreStore.git &lt;destination directory&gt;</code>. From what I understood from the git submodule <a href=""https://git-scm.com/docs/git-submodule"" rel=""nofollow noreferrer"">discussion</a>, I need to enter this command from my $GIT_DIR, which I understand to mean the directory where my superproject's .git folder resides.</p>

<p>But I can't seem to make it work. A tutorial I read suggests creating subfolders under $GIT_DIR and putting the submodule there. But if I enter the name of an existing directory called ""foo"" for <code>&lt;destination directory&gt;</code>, I get <code>'foo' already exists and is not a valid git repo</code>. If I enter the name of a non-existent directory, I get <code>A git directory for 'foo' is found locally with remote(s): fatal: Not a git repository: '.git/modules/foo'</code>.</p>

<p>If I leave the folder name off, I get a CoreStore folder in my superproject's $GIT_DIR, which seems almost sensible, and I see that CoreStore and .gitmodules have been staged. Also seemingly sensible . But when I try to commit them, I get <code>fatal: Path '.gitmodules' exists on disk, but not in 'HEAD'.</code></p>

<p>I have overcommit, which hooks into git to validate commits. I turned on overcommit's debug mode, and twice during the commit attempt it says <code>STDERR: ""warning: unable to rmdir 'CoreStore': Directory not empty\n""</code>. I also disabled overcommit, and the fatal error message went away, but I can't tell whether that's because the problem is fixed, or because everything is broken beyond repair.</p>

<p>I've read the <a href=""https://git-scm.com/docs/gitsubmodules"" rel=""nofollow noreferrer"">theory</a> of submodules, and I think I understand them, I just can't figure out how to work with them. I've looked at <a href=""https://blog.axosoft.com/learn-git-submodule/"" rel=""nofollow noreferrer"">some</a> <a href=""https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407"" rel=""nofollow noreferrer"">articles</a>, and a <a href=""https://www.raywenderlich.com/155150/dependency-management-using-git-submodules"" rel=""nofollow noreferrer"">tutorial</a>, but the articles don't address syntax in a helpful way, and the tutorial describes a behavior from git that is nothing like what I'm seeing. Even the git <a href=""https://git-scm.com/docs/gitsubmodules#_workflow_for_a_third_party_library"" rel=""nofollow noreferrer"">instructions</a> that seem to apply directly to my situation don't work for me. I'm in over my head.</p>

<p>git version 2.16.2</p>

<p>overcommit 0.43.0</p>

<p><strong>Edit: To reproduce:</strong></p>

<ol><li>mkdir foo; cd foo; git init</li>
<li>Create dummy text file in foo; commit</li>
<li>git submodule command goes here</li>
<li>git status reports that .gitmodules and CoreStore are ready to be committed</li>
<li>git commit</li>
<li>Observe some overcommit output, an ugly git error, then more overcommit output</li></ol>
","3","1610473","0","0"
"66773544","2134887","2021-03-24 01:31:31","1","86","<git><git-submodules>","git submodule not ignored even with ignore=all","<p>We have a main git repo in which we have added another repo as submodule. We have configured to ignore any changes to this submodule by setting <code>ignore=all</code> in the .gitmodules file with the expectation that any changes within the submodule (commits or files) never show up as changes when adding files to staging.</p>
<p>What we are observing is that even though the submodule doesn't show up as changed when we run <code>git status</code>, using git add -A adds the submodule as a change if there is difference in the commits in the submodule between the current branch and master.</p>
<p>Is there a way to avoid the submodule from being added to staging/commit when using git add or git commit -am?</p>
","1","2134887","",""
"49027893","573925","2018-02-28 10:56:21","1","52","<git><git-submodules><git-clone>","How can be a subdirectory added as submodule in git","<p>I want to add to my repository a content from another repository, but not the whole repository just a part from sub-directory <code>My/Repo/Resources/Strings</code>
call like this is working for me and it is adding the whole repository to my project      </p>

<pre><code>git submodule add -b develop -- git@github:My/Repo.git
</code></pre>

<p>But I would like to have something like this: </p>

<pre><code>git submodule add -b develop -- git@github:My/Repo/Resources/Strings.git
</code></pre>

<p>can It be achieved by some parameter? I do not really found anything on <a href=""https://git-scm.com/docs/git-submodule"" rel=""nofollow noreferrer"">git-submodules</a>. 
The error I received is : <code>fatal: clone of '...' into submodule path '...' failed</code></p>
","0","573925","",""
"14233939","433570","2013-01-09 11:11:28","14","33509","<git><git-submodules>","git submodule commit/push/pull","<p>I'd like to use git submodule.  </p>

<p>The steps I need to take to push my changes to my project are</p>

<blockquote>
  <ol>
  <li>add/commit/push from submodule directory</li>
  <li>add/commit/push from parent directory</li>
  </ol>
</blockquote>

<p>Steps I need to take to pull changes of my project.</p>

<blockquote>
  <ol>
  <li>git pull from parent directory</li>
  <li>git submodule update from parent directory</li>
  </ol>
</blockquote>

<p>Steps for updating the submodule from its original repo</p>

<blockquote>
  <ol>
  <li>git pull from submodule directory</li>
  </ol>
</blockquote>

<p>What worries me is the following exerpt from <a href=""http://git-scm.com/book/en/Git-Tools-Submodules"" rel=""noreferrer"">http://git-scm.com/book/en/Git-Tools-Submodules</a></p>

<blockquote>
  <p>The issue is that you generally don’t want to work in a detached HEAD
  environment, because it’s easy to lose changes. If you do an initial
  submodule update, commit in that submodule directory without creating
  a branch to work in, and then run git submodule update again from the
  superproject without committing in the meantime,(<strong>?? update/commit/update will lose change?</strong>) Git will overwrite
  your changes without telling you. Technically you won’t lose the work,
  but you won’t have a branch pointing to it, so it will be somewhat
  difficult to retrieve.</p>
  
  <p>To avoid this issue, create a branch when you work in a submodule
  directory with git checkout -b work or something equivalent. When you
  do the submodule update a second time, it will still revert your work,
  but at least you have a pointer to get back to.</p>
</blockquote>

<p>I'm going to modify submodules and don't wanna mess up, the doc above briefly mentions the possibility of losing change, and I don't understand what might cause the loss.   </p>

<blockquote>
  <p>I wonder what additional steps more than I listed above I need to take to prevent the
  loss.
  Especially several team members modify submodules, what do they need to do not to mess up?</p>
</blockquote>
","6","433570","0","0"
"31769820","25645","2015-08-02 08:05:45","402","121522","<git><git-submodules><git-subtree>","Differences between git submodule and subtree","<p>What are the conceptual differences between using git submodule and subtree?</p>

<p>What are the typical scenarios for each?</p>
","3","25645","0","0"
"49110958","1952991","2018-03-05 12:53:21","11","2478","<git><plugins><git-submodules>","How to add optional submodules in git?","<p>When we have many (say 20) submodule in a git repository, we can install (and update) them like so: </p>

<pre><code>git submodules update --init --recursive 
</code></pre>

<p>Git tries to download every submodule (recursively) after this command. What if we want to make some of the submodules optional (like a plugin)? </p>

<p>How can we make git skip downloading these optional submodules by default and handle as a usual submodule when we mark this submodule ""okay, use this from now on""?</p>
","0","1952991","0","0"
"14418352","59087","2013-01-19 20:07:26","92","59853","<git><status><git-submodules><ignore>","Ignore new commits for git submodule","<h1>Background</h1>

<p>Using Git 1.8.1.1 on Linux. The repository looks as follows:</p>

<pre><code>master
  book
</code></pre>

<p>The submodule was created as follows:</p>

<pre><code>$ cd /path/to/master
$ git submodule add https://user@bitbucket.org/user/repo.git book
</code></pre>

<p>The <code>book</code> submodule is clean:</p>

<pre><code>$ cd /path/to/master/book/
$ git status
# On branch master
nothing to commit, working directory clean
</code></pre>

<h1>Problem</h1>

<p>The master, on the other hand, shows there are ""new commits"" for the book submodule:</p>

<pre><code>$ cd /path/to/master/
$ git status
# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   book (new commits)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Git should ignore the submodule directory completely, so that the master is also clean:</p>

<pre><code>$ cd /path/to/master/
$ git status
# On branch master
nothing to commit, working directory clean
</code></pre>

<h1>Failed Attempt #1 - dirty</h1>

<p>Inside the file <code>master/.gitmodules</code> is the following, as per this <a href=""https://stackoverflow.com/a/5542452/59087"">answer</a>:</p>

<pre><code>[submodule ""book""]
        path = book
        url = https://user@bitbucket.org/user/repo.git
        ignore = dirty
</code></pre>

<h1>Failed Attempt #2 - untracked</h1>

<p>Changed <code>master/.gitmodules</code> to the following, as per this <a href=""https://stackoverflow.com/a/5127213/59087"">answer</a>:</p>

<pre><code>[submodule ""book""]
        path = book
        url = https://user@bitbucket.org/user/repo.git
        ignore = untracked
</code></pre>

<h1>Failed Attempt #3 - showUntrackedFiles</h1>

<p>Edited <code>master/.git/config</code> to the following, as per this <a href=""https://stackoverflow.com/a/4345788/59087"">answer</a>:</p>

<pre><code>[status]
   showUntrackedFiles = no
</code></pre>

<h1>Failed Attempt #4 - ignore</h1>

<p>Added the book directory to the master ignore file:</p>

<pre><code>$ cd /path/to/master/
$ echo book &gt; .gitignore
</code></pre>

<h1>Failed Attempt #5 - clone</h1>

<p>Added the book directory to the master as follows:</p>

<pre><code>$ cd /path/to/master/
$ rm -rf book
$ git clone https://user@bitbucket.org/user/repo.git book
</code></pre>

<h1>Question</h1>

<p>How can the <code>book</code> submodule be in its own repository directory under the <code>master</code> repository yet have git ignore the <code>book</code> submodule? That is, the following should not display:</p>

<pre><code>#
#       modified:   book (new commits)
#
</code></pre>

<p>How to suppress that message when executing <code>git status</code> in the master repository?</p>

<p>An article about <a href=""http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/"" rel=""noreferrer"">git submodule pitfalls</a> suggests this an inappropriate submodule usage?</p>
","6","59087","0","0"
"67361968","12413554","2021-05-02 23:28:21","0","539","<github><git-submodules><hugo>","I can't push anymore to a github submodule using Hugo theme","<p>My blog is hosted at <code>github.io</code> and it uses Hugo's &quot;m10c&quot; theme. The blog was working fine until today, when I tried to write two posts. I could post the first one, but, when I tried the second one, I could not <code>push</code> to the submodule in <code>main branch</code>. That was the error message:</p>
<pre><code>error: src refspec main does not match any
</code></pre>
<p>So, I've investigate the <code>public</code> directory with:</p>
<pre><code>git remote -v
</code></pre>
<p>And the result doesn't show the submodule repo (<code>igordeo-costa.github.io</code>), but only the repos where I maintain my static files. That was the command line and the error:</p>
<pre><code>igor@skynet:.../public$ git push origin main
error: src refspec main does not match any
error: failed to push some refs to 'https://github.com/igordeo-costa/meuHugo.git'

igor@skynet:.../public$ git remote -v
origin  https://github.com/igordeo-costa/meuHugo.git (fetch)
origin  https://github.com/igordeo-costa/meuHugo.git (push)
igor@skynet:/home/dados/MeuBLog/meuHugo/igorcosta/public$ 
</code></pre>
<p>I don't know what is happening here.</p>
<p>Thanks in advance for any help.</p>
","5","12413554","0","0"
"67367398","1920407","2021-05-03 10:29:26","0","630","<git><azure-devops><git-submodules><azure-pipelines-yaml>","azure devops pipeline failure when using private github submodule in a private github repo","<p>I have two private github repo's and one repo is used as a submodule in the other.
The .git modules looks like this</p>
<pre><code>[submodule &quot;submodule&quot;]
    path = submodule
    url = ../submodule
</code></pre>
<p>I have an two factor SSO , so I use a PAT to access these repos.</p>
<p>I build these in AzureDevOps and I have a service connection with my PAT.b below is my pipeline yaml.</p>
<pre><code>resources:
  repositories:
    - repository: self
      type: GitHub
      name: myorg/main
      connection: github.com_connectionid
      pr:
        branches:
          include:
          - main
      trigger:
        batch: true
        branches:
          include:
          - main

pool:
  vmImage: 'ubuntu-latest'

steps:
  - checkout: self
    submodules: true
    persistCredentials: true
</code></pre>
<p>With this the submodule checkout fails. with this error</p>
<pre><code>2021-05-02T17:01:06.3578223Z HEAD is now at 9560ded fix persist credentials
2021-05-02T17:01:06.3581105Z ##[command]git submodule sync
2021-05-02T17:01:06.3590245Z ##[command]git -c http.https://github.com.extraheader=&quot;AUTHORIZATION: basic ***&quot; submodule update --init --force
2021-05-02T17:01:06.7063231Z Submodule 'submodule' (https://github.com/myorg/submodule) registered for path 'submodule'
2021-05-02T17:01:06.7065477Z Cloning into '/home/vsts/work/1/s/submodule'...
2021-05-02T17:01:06.7066269Z remote: Repository not found.
2021-05-02T17:01:06.7067185Z fatal: repository 'https://github.com/myorg/submodule/' not found
2021-05-02T17:01:06.7068915Z fatal: clone of 'https://github.com/myorg/submodule' into submodule path '/home/vsts/work/1/s/submodule' failed
2021-05-02T17:01:06.7070000Z Failed to clone 'submodule'. Retry scheduled
2021-05-02T17:01:06.7070925Z Cloning into '/home/vsts/work/1/s/submodule'...
2021-05-02T17:01:06.7071592Z remote: Repository not found.
2021-05-02T17:01:06.7072746Z fatal: repository 'https://github.com/myorg/submodule/' not found
2021-05-02T17:01:06.7073981Z fatal: clone of 'https://github.com/myorg/submodule' into submodule path '/home/vsts/work/1/s/submodule' failed
2021-05-02T17:01:06.7075750Z Failed to clone 'submodule' a second time, aborting
2021-05-02T17:01:06.7132523Z ##[error]Git submodule update failed with exit code: 1
2021-05-02T17:01:06.7332338Z ##[section]Finishing: Checkout myorg/main@main to s
</code></pre>
<p>changing persistCredentials has no effect.</p>
<p>Adding full path in the URL has no effect.
The main repo is checked out successfully with the same service connection.
Names of 'main' and 'submodule' have been changed from the original.</p>
","0","1920407","",""
"55112619","4397077","2019-03-12 01:01:53","1","576","<git><git-submodules>","submodule in git not added and showing [modified content]","<p>The repo is an Android project, and using a submodule called <code>volley</code>. I am trying to add it to git after modifying. I followed <a href=""https://stackoverflow.com/questions/7726131/git-add-a-is-not-adding-all-modified-files-in-directories"">this</a> and executed:</p>

<pre><code>git submodule foreach --recursive git add -A .
</code></pre>

<p>But the submodule is not added. On the terminal I get this after running the above cmd:</p>

<pre><code>Entering 'app/modules/volley'
</code></pre>

<p>But then no new files added. What am I doing wrong here?</p>
","0","4397077","0","0"
"72502718","1824583","2022-06-04 19:50:17","1","438","<github><git-submodules><git-fork>","How to fork your own repo in github?","<p>I have researched and all the answers I found say to just clone it and push it up under a different repo. Although this may work for many people it does not work for me.</p>
<p>I have a framework I made in a repo. I make websites based off of that. I update the framework regularly and need to be able to merge those changes into each website that uses it. I can't create branches for each website under the framework repo because I don't want my clients looking at other peoples websites.</p>
<p>I've tried submodules but you cannot have a submodule on the root folder.</p>
<p>I have also tried an organization account but you cannot fork a private repo into a free organization account. Any ideas on how I can set this up?</p>
","8","1824583","",""
"55241341","3413239","2019-03-19 12:42:32","1","1751","<git><git-submodules>","Changing https-address of submodules in .git/config to ssh-address","<p>I need to use ssh forwarding-agent to enable git cloning on remote servers. The repository has submodules which were originally added with their <code>https</code> addresses. In order for forwarding agent to work, I think I need to change those addresses to their corresponding <code>ssh</code> address. </p>

<p>Will changing these addresses in <code>.git/config</code> solve my problem? </p>
","0","3413239","",""
"72529333","15223875","2022-06-07 10:03:40","0","39","<git><git-submodules>","Is it possible to have git submodules that are always at HEAD without requiring any update commits?","<p>Currently, as part of the build process in a repository I'm working on, several repositories are cloned into a subdirectory of said repository. When it comes to commit time, those repositories are ignored through the .gitignore. I would like to implement these through submodules, but from my understanding it seems that submodules have to be manually updated to match HEAD?</p>
<p>Is it possible to set up the submodules in such a way that they are only mentioned in the .gitmodules file, <strong>not in the path they are cloned into</strong>, and, when the repository is cloned recursively, will be at HEAD?</p>
","3","15223875","",""
"55308229","23845","2019-03-22 21:48:24","1","64","<git><git-submodules>","Is there a way to configure 'git commit -a' to NOT include submodule changes","<p>The most common way to accidentally pick up submodule changes is to do a pull, forget to submodule update, and then do a <code>git commit -a</code> (which will add the submodule changes). Is there a way to configure Git so that it ignore submodule changes unless I specifically request it? Is there some other way to molly guard the situation?</p>
","2","23845","",""
"55322588","712525","2019-03-24 09:59:59","2","94","<git><git-submodules>","Clever ways to use git submodules with interdependent repositories","<p>We have a somewhat larger project that is organised in various interdependent git repositories following a tree structure without recursion.  In what follows I try to depict the smallest possible example that would highlight the problem I'm trying to address, even if in our case the tree depth can be relatively big.  Suppose the system of repositories and submodule dependencies as follows (notation ""->"" means uses as a submodule):</p>

<pre><code>A
B -&gt; A
C -&gt; A, B
</code></pre>

<p>If I use <code>git clone --recursive</code> for C, the following directory structure will happen:</p>

<pre><code>C/
C/A
C/B/A
</code></pre>

<p>This repetition will also happen inside the <code>.git</code> directory: you'll find <code>.git/modules/A</code>, <code>.git/modules/B</code>, and <code>.git/modules/B/modules/A</code>.  While I understand the reasons for this,  in our particular case, it would be useful if the structure would be more like the following (notation: ""->"" symlink):</p>

<pre><code>C/A
C/B
C/B/A -&gt; C/A
</code></pre>

<p>So, if I would update <code>A</code> inside <code>B</code>, it would also be updated in <code>C</code>, and I'd just have to commit the changes to those repos and they would stay in sync.  Is this possible somehow within git?  Are there practical solutions to this issue?</p>
","1","712525","0","0"
"72540514","1778702","2022-06-08 05:33:20","1","266","<git><github><git-submodules>","git submodules - error: could not lock config file .git/modules/path/to/vimlib/config: No such file or directory","<p>This is a weird one. I created a repo years ago:
<a href=""https://github.com/todd-dsm/vimSimple"" rel=""nofollow noreferrer"">https://github.com/todd-dsm/vimSimple</a></p>
<p>I used submodules at the time; thought it was a good idea; it's been a PITA since then. I now need to update some of those submodules and I get this error on every single one</p>
<pre><code>% git submodule deinit -f vim/bundle/tlib_vim 
Cleared directory 'vim/bundle/tlib_vim'
error: could not lock config file .git/modules/vim/bundle/tlib_vim/config: No such file or directory
warning: Could not unset core.worktree setting in submodule 'vim/bundle/tlib_vim'
</code></pre>
<p>It doesn't matter which submodule I choose, it's the same error as there is no 'modules' directory:</p>
<pre><code>% ls -al .git/modules
ls: cannot access '.git/modules': No such file or directory
</code></pre>
<p>Effectively, I've created an 'updates' branch, deleted some submodules:</p>
<pre><code>othree/html5.vim.git
rodjek/vim-puppet.git
rodjek/puppet-lint.git
pearofducks/ansible-vim
python-mode/python-mode
elzr/vim-json
hashivim/vim-hashicorp-tools
</code></pre>
<p>Now, I need to <code>update</code> the remaining submodules:</p>
<pre><code>% git config --file .gitmodules --name-only --get-regexp path                      
submodule.vim/bundle/syntastic.path
submodule.vim/bundle/tlib_vim.path
submodule.vim/bundle/vim-addon-mw-utils.path
submodule.vim/bundle/vim-fugitive.path
submodule.vim/bundle/vim-snipmate.path
submodule.vim/bundle/vim-snippets.path
submodule.vim/bundle/vim-lint.path
submodule.vim/bundle/Dockerfile.path
submodule.vim/bundle/L9.path
submodule.vim/bundle/vim-autocomplpop.path
</code></pre>
<p>It seems like it used to work one way and now, years later, it works another.
Is there any way out of this? How would one solve this problem?</p>
","1","1778702","0","0"
"69875464","1455384","2021-11-07 18:37:34","0","431","<git><github-actions><git-submodules>","github actions: update submodules from upstream with rebase","<p>I want to update my repository submodules, push to their respective forks and then commit changes to my main repo and push it.</p>
<p>Here is my github action yml:</p>
<pre><code>---
name: Auto Update Submodules
# yamllint disable-line rule:truthy
on:
  push:
  # schedule:
  #   # Run every Wednesday at 4 AM.
  #   - cron: &quot;0 4 * * WED&quot;
jobs:
  auto-update:
    runs-on: ubuntu-latest
    steps:
      # Create private key to access private repos.
      - uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: actions/checkout@v2
        with:
          ref: '15.0'
          submodules: true
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          persist-credentials: true
      - name: Update submodules from origin
        run: |
          git submodule update --recursive --remote --merge --init --rebase
      - name: Update from upstream and commit
        run: |
          git config --global user.name 'bot'
          git config --global user.email 'bot@users.noreply.github.com'
          cd src/odoo
          git checkout 15.0
          git remote add upstream git@github.com:odoo/odoo.git
          git fetch upstream 15.0
          git rebase upstream/15.0
          git push
          cd ../enterprise
          git checkout 15.0
          git remote add upstream git@github.com:odoo/enterprise.git
          git fetch upstream 15.0
          git rebase upstream/15.0
          git push
          cd ../..
          git add .
          git commit -m &quot;[SUB] odoo/enterprise&quot; || echo &quot;No changes to commit&quot;
          git push origin 15.0
</code></pre>
<p>This is what I get when action is triggered:</p>
<pre><code>  git submodule update --recursive --remote --merge --init --rebase
  shell: /usr/bin/bash -e {0}
  env:
    SSH_AUTH_SOCK: /tmp/ssh-VxFJiDzXtsoG/agent.2130
    SSH_AGENT_PID: 2131
Rebasing (1/1)
warning: Cannot merge binary files: stock_barcode/static/img/barcodes_demo.pdf (HEAD vs. 944ae3a4 ([I18N] Update translation terms from Transifex))
CONFLICT (add/add): Merge conflict in worksheet/i18n/sv.po
Auto-merging worksheet/i18n/sv.po
CONFLICT (add/add): Merge conflict in worksheet/i18n/de.po
Auto-merging worksheet/i18n/de.po
CONFLICT (add/add): Merge conflict in website_twitter_wall/i18n/zh_TW.po
Auto-merging website_twitter_wall/i18n/zh_TW.po
CONFLICT (add/add): Merge conflict in website_twitter_wall/i18n/vi.po
Auto-merging website_twitter_wall/i18n/vi.po
CONFLICT (add/add): Merge conflict in website_twitter_wall/i18n/th.po
Auto-merging website_twitter_wall/i18n/th.po
...
...
Error: Process completed with exit code 2.
</code></pre>
<p>If I only fetch changes from upstream and use that to commit on main repo, it does update it. But then further workflow breaks, because it can't find those commits (which are coming directly from upstream repos).</p>
<p>I tried to update my submodules from upstream locally (from my PC) and it works fine. No conflicts, no errors, with (don't even need to force push it, because I don't have any custom changes):</p>
<pre><code>git fetch upstream 15.0
git rebase upstream/15.0
git push
</code></pre>
<p><code>src/odoo</code> and <code>src/enterprise</code> are paths to submodules.</p>
<p><strong>What am I doing wrong with github actions that it behaves differently?</strong></p>
<p>Could it be that it gets only shallow copy and things break because of it?</p>
","4","1455384","",""
"52724895","6019443","2018-10-09 15:49:37","0","53","<git><git-submodules><subproject>","Best practice git Module","<p>In our git project we have one submodule. This submodule is configured in submodules file with a specific branch. So if we <code>init</code> or <code>update</code> the submodule, we always use the <code>--remote</code> Option.</p>

<p>But now, every time we update the submodule, there are changes in metadata of the submodule (subproject commit). The hash changes. </p>

<p>Is it possible to deactivate this change and just use the branch specified in gitmodules? In our case the commit hash is obsolete.</p>
","5","6019443","",""
"36693865","4352108","2016-04-18 12:21:37","0","1845","<git><version-control><git-submodules><dotfiles>","Can't add git submodule when worktree is a parent directory","<p>I’m keeping track of my dotfiles with a git repository under <code>$HOME/.dotfiles</code> which is configured to track files in <code>$HOME</code> (I used <code>git config core.worktree ""../../""</code>). </p>

<p>This method works fine as long as regular files are concerned, but it fails when I try to add a submodule. Eg:</p>

<pre><code>~/.dotfiles $ git submodule add git@github.com:ardagnir/vimbed.git ../../.vim/bundle/vimbed/
fatal: Not a git repository (or any parent up to mount point /home)       
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
</code></pre>

<p>I also tried <code>../.vim/...</code> and <code>$HOME/.vim/...</code>.</p>

<p>Is it possible to add a submodule when <code>core.worktree</code> is set to a parent of the repo’s default directory? If so, how what command should I use?</p>
","0","4352108","0","0"
"36700992","3339128","2016-04-18 17:51:35","5","2789","<git><github><git-submodules>","Submodules not clickable in github","<p>I am using github and I have submodules in my repo. However, I would like to be able to click on the submodules on github to open the submodules repo page. This is my .gitmodules file.</p>
<pre><code>[submodule &quot;submodule1&quot;]
        path = submodule1
        url = https://github.com/octocat/Hello-World
[submodule &quot;submodule2&quot;]
        path = submodule2
        url = https://github.com/octocat/hello-worId
[submodule &quot;submodule3&quot;]
        path = submodule3
        url = https://github.com/octocat/hello-worId
</code></pre>
<p><a href=""https://i.stack.imgur.com/FwQET.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FwQET.png"" alt=""GitHub submodules"" /></a></p>
<p>Is there anything I can do to get the submodules clickable on github?</p>
","8","3339128","0","0"
"36740672","435828","2016-04-20 10:15:05","1","174","<git><git-submodules>","Update git pull url for submodules","<p>I have git with local readonly mirror (Atlassian Bitbucket Server).</p>

<p>I have repository with many submodules.</p>

<p>What i want to do is to update the fetch url in repo and all submodules  to <code>MIRROR_URL</code>.</p>

<p>For one repo it is easy - </p>

<pre><code>git remote set-url        origin MIRROR_URL 
git remote set-url --push origin MASTER_URL
</code></pre>

<p>But when i call <code>git submodule sync</code> it makes <code>MIRROR_URL</code> as both fetch and push url for all submodules.</p>
","0","435828","",""
"36753890","9950","2016-04-20 19:54:42","2","408","<git><git-submodules>","git submodule ""--remote"" results in (new commits)","<p>How do I prevent git status from showing submodule locked to specific submodule branch as a change after update?</p>

<p>I added a git submodule using a specific branch:</p>

<pre><code>git submodule add -b feature/special git@.../buildenv.git env
git commit -a -m ""added submodule locked to special feature""
git push
</code></pre>

<p>All was good until someone committed to the submodule and pushed
Now, when I update the submodule I see new commits messages from status</p>

<pre><code>git submodule update --remote --recursive --init
git diff

index b45bfd8..2334b1f 160000
--- a/env
+++ b/env
@@ -1 +1 @@
-Subproject commit b45bfd8f498a4d86a9586e1a4b1a6194052274b0
+Subproject commit 2334b1faa019c28c6fe75cef94fd94d847593c37
</code></pre>
","0","9950","",""
"52815602","230270","2018-10-15 11:20:17","1","165","<git><git-submodules>","Find all submodules in git and their commits","<p>I have a project on my git repositary which contains submodules and those submodules contains feather submodules.</p>

<p>Since I am not responsible to all the submodules, I don't know what changed there after I updated the commit I was looking at. For this reason I would like to document the current state.</p>

<p>This means, I would like to know all the submodules I am using (explicit and non-explicit). For each submodules I would like to know its Tag and\or commit.</p>

<p>I found:</p>

<pre><code>git ls-files --stage
</code></pre>

<p>helpful, but shows only commits from my repository and not inside the submodules.</p>

<p>Any idea?</p>
","0","230270","0","0"
"36851739","4640163","2016-04-25 21:51:38","0","38","<git><git-submodules>","Add folder into existed git folder and make it become submodule","<p>First, my question is different from
<a href=""https://stackoverflow.com/questions/17413493/create-a-submodule-repository-from-a-folder-and-keep-its-git-commit-history"">Create a submodule repository from a folder and keep its git commit history</a> .</p>

<p>Suppose I have git folder, let's say <code>~/GITA</code>.<br>
I want to move a folder <code>~/Folder1</code> into it. (<code>~/GITA/Folder1</code>).<br>
Then in the folder (<code>~/GITA/Folder1</code>), change it into submodule.<br>
And then push it  (submodule <code>~/GITA/Folder1</code>) to the new created server
repository.</p>
","0","4640163","",""
"36875855","3439870","2016-04-26 21:11:42","0","45","<git><github><git-submodules>","Pushing a repo with submodules to github","<p>im a student with a large directory of previous projects/labs that ive worked on through college. I want to upload the entire folder of all my projects with individuals git repos to github in one giant repository for the sake of documentation. But after attempting to push all these projects, they appear as unclickable grey folders within github. How can I easily/quickly make it so those project's source code are able to be browsed on github?</p>
","0","3439870","",""
"36880168","1096193","2016-04-27 04:12:15","1","319","<node.js><git><mongodb><git-submodules>","How to use git for setting up a component based project","<p>I'm planning to design a platform which will have a structure as follows.</p>

<ul>
<li>Root

<ul>
<li>Common</li>
<li>module_1</li>
<li>module_2</li>
<li>...</li>
<li>module_N</li>
</ul></li>
</ul>

<p>This is a node/express/mongodb based plaform. As per my understanding, i can use git sub modules, Which allows to add more modules in future and handle each module as a independent project inside the main project. However i'm wondering is it possible to pull selected modules (eg: common,auth and module_2) without checking out all the modules in the main project, which will be used to develop a new application.</p>

<p>Is there any other way to organize a node project while maintaining my requirements? Appreciate any thoughts.</p>
","0","1096193","",""
"52952143","7406574","2018-10-23 14:57:51","1","22","<git><service><git-submodules>","Best development workflow when using git submodules?","<p>I have a project that has a couple git submodules for services. E.G.</p>

<p>.</p>

<p>+--docker-compose.yml</p>

<p>+--playbooks</p>

<p>+--service1Submodule</p>

<p>+--service2Submodule</p>

<p>Say I wanted to create a new feature for service 1. I could make a feature branch in service 1. Then I could make a feature branch for the main project. If integration tests pass, I could make a pull request to merge the feature branch of the parent directory into master. This all works fine - but the only issue is that then the master branch of the parent directory is pointing to a commit hash in the feature branch of the submodule. So one option would be to merge the feature branch of the submodule into the master branch first, then use the master branch of the submodule for the parent directory pull request. There are a lot of different options of how to to do this and they all basically accomplish the same thing, but none of them seam too ideal. I'm wondering if anyone has a tried and tested workflow that they could share? Thanks a lot.</p>
","0","7406574","",""
"52955067","2748513","2018-10-23 17:53:11","1","1673","<bash><git><git-submodules>","How to access variables used in ""git submodule foreach"" from outside?","<p>How to recurse into all submodules and save the info to an array? that array should be accessible from outside of <code>git submodule foreach</code>, in the below example, I am trying to save all the paths which has <code>foo</code> in it.</p>

<pre><code>$ declare -a paths
$ git submodule foreach --recursive '[[ ""$name"" = *""foo""* ]] &amp;&amp; \
 ( echo $path; paths+=($path) ) || true'
Entering 'bar-1'
Entering 'foo-1'
foo-1
Entering 'foo-2'
foo-2
Entering 'foo-8'
foo-8
Entering 'foo'
foo
Entering 'baz'
$
$ echo ${paths[@]}
$
</code></pre>
","0","2748513","",""
"52955916","588195","2018-10-23 18:44:26","0","152","<git><git-submodules>","Is there a way to set a git submodule so it doesn't have a detached head when pulled?","<p>We're starting to use git submodules and I'm trying to provide some chrome for my developers.</p>

<p>I know git stores the SHA of the submodule so it takes a commit, so that means if a developer wants to update a submodule dependency, they do it by CDing in and getting latest, then committing the change in the outer dir.  </p>

<p>But the problem is that by default git submodules have detached heads.  Is there way to configure a git submodule within the repo to always track a certain remote branch?  And commands to change this remote tracking branch?</p>

<p>I'd like to be able to write a quick ""update my submodule and commit"" script, or a quick ""switch my submodule's branch from the dev to a release branch"".  The fact that we're switching branches means I can't just hardcode the branch name everywhere.  Does git store this in a decent location, or am I going to have to roll my own .submoduleconfig thingy for my scripts to read?</p>

<p>I have searched for this before and most of the similar questions are how to make it auto-track latest (which git does not support) and alternately how to <em>manually</em> push the submodule to the latest of a specific branch you give it, not just ""you're already tracking this branch, get latest"".</p>
","2","588195","",""
"69917897","457059","2021-11-10 17:46:07","4","352","<git><git-submodules><git-subtree>","Hide contents of git repository from subcontractors","<p>I have an application that has a lot of UI, DB, ... and also a background processing part. I want to keep the background processing part hidden from my contractors so they can't disclose the clever algorithm I came up with.</p>
<p>What's the right way to do that with git?</p>
<p>I started out with submodules:
I have the main repo with all the UI, DB, ... in there and a secret repo which I included via a git submodule.
After I change stuff in the processing part of the app, I minify it (it's JS), and save it to the main repo, so it can be used by the rest of the application.
This way the contractor can pull my minified file as part of the main repo. Then run the app without the need for the secret code. So far so good.</p>
<p>However, the problems are:</p>
<ol>
<li>The contractor gets errors when checking out the main project because the submodule is not accessible for him</li>
<li>The contractor has accidentally created a &quot;remove processing submodule&quot; commit, because the submodule folder is not there, and if he does <code>git add .</code> and then commits, git assumes that he wanted to delete the submodule.</li>
</ol>
<p>So all in all it seems that's not the right strategy. I read that git subtree can be used, but I didn't find any example on how to use it for that use case.</p>
<p>Any help is highly appreciated!</p>
","5","457059","0","0"
"36939027","2312688","2016-04-29 12:59:46","0","68","<git><version-control><git-submodules>","Why does git submodule show commits dated after parent commit?","<p>I have the following project structure
Parent, 
Parent/client, 
Parent/server, 
Parent/app</p>

<p>client,server and app are git submodules of parent. 
I checkout version 1 for example of parent, go into submodule client and do git log and see commits past the date of version 1 of parent.Why?</p>

<p>When I commit parent, does it not take the current versions of all submodules enabling a snapshot of the entire project?</p>
","0","2312688","",""
"52976837","2748513","2018-10-24 19:45:30","0","644","<git><git-submodules><git-config>","How to update a config file section using git config?","<p>I need to add <code>branch = super_foo</code> to the existing <code>superproject</code> section in test_config file:</p>

<pre><code>$ cat .test_config
[superproject ""mysuper""]
    url = https://server.com/test/mysuper

[submodule ""tsn-inc""]
    url = url = https://server.com/test/foo_s
    branch = foo
</code></pre>

<p>This works:</p>

<pre><code>git config -f .test_config --add superproject.mysuper.branch super_foo
</code></pre>

<p>But, ""mysuper"" is not a known value, so I tried below as there will be only one superproject section.</p>

<pre><code>git config -f .test_config --add superproject.*.branch super_foo
</code></pre>

<p>it added a new section as below:</p>

<pre><code>[superproject ""*""]
    branch = super_foo
</code></pre>

<p>Instead, I want to add branch to the existing superproject section, is there a way to do this?</p>
","1","2748513","",""
"53009308","2109510","2018-10-26 12:58:47","3","497","<git><git-submodules>","Managing multiple upstream git submodule URL's in private repo","<p>I am developing applications for my company where we use a private git repo inside our company's network. I am able to work with our git projects both internally and externally through the use of multiple upstreams to the same host (but through different SSH ports), like so:</p>

<pre><code>external      ssh://user@externalhost.example.com:1234/var/git/project.git
origin        ssh://user@internalhost.example.com/var/git/project.git
</code></pre>

<p>My submodules work only when I connect internally. Here's an example submodule upstream:</p>

<pre><code>[submodule ""common-code""]
    path = common-code
    url = ssh://user@internalhost.example.com:/var/git/common-code.git
</code></pre>

<p>Is there a way to manage multiple upstreams for submodules so that I can work with them both internally and external to my company network?</p>

<p>Note: I've found some old posts about this on SO but they didn't really resolve the OP's answer or were vague about how to do so.</p>
","0","2109510","",""
"53010082","1424542","2018-10-26 13:41:21","3","1067","<git><git-submodules>","git show to display submodule commit ID for a specific tag","<p>I'm trying to figure out the submodule commit ID for every release that was made in my project. So I was going to write a script that iterates over the git tags and then perform the following command:</p>

<pre><code> $ git show V1.2.3.4:Files/targetdir/dbscripts
 fatal: bad object V1.2.3.4:Files/targetdir/dbscripts
</code></pre>

<p>If I try a different path that is not a submodule, it works fine. Short of brute forcing the solution with git checkout, what are my options?</p>

<p>Thanks!</p>
","0","1424542","",""
"53016520","3058609","2018-10-26 21:29:18","2","1608","<git><git-submodules>","git submodule update --no-checkout?","<p>I have a git repo that contains a fairly large submodule I need to add a few items to. I'd rather not clone and checkout the whole working tree.</p>

<p>With a clone, I could do <code>git clone &lt;repo&gt; --no-checkout</code>, but that doesn't seem to be an option for this submodule. That's my current solution:</p>

<pre><code>git clone &lt;remote-path-to-MySubmodule&gt; --no-checkout
cd MySubmodule
cp path/to/files/* .
git add path/to/files/*
git commit -m &lt;message&gt;
git push
</code></pre>

<p>but it feels like the <code>submodule</code> workflow should allow this too.</p>
","5","3058609","0","0"
"36981973","2045438","2016-05-02 12:02:28","5","3916","<git><git-submodules>","How to recover deleted .git/modules folder","<p>In my project .git/modules folder got deleted. Now I am able to reset the parent branch to other versions but submodule update is not working.</p>

<p>Error I am receiving:</p>

<pre><code>fatal: Not a git repository: ../.git/modules/abc.
Unable to find current revision in submodule path 'abc'
</code></pre>

<p>How can I recover the deleted folder and bring back the submodule in line with parent branch.</p>

<p>Repo structure is like this:</p>

<pre><code>parent_folder---|---abc
                |---def
</code></pre>

<p><strong>abc and def are submodules.</strong></p>
","0","2045438","0","0"
"53026355","5728032","2018-10-27 21:15:31","0","853","<git><git-submodules>","Replacing a specific file in git submodule with a new version at build time","<p>I am using an open source repo as a git submodule inside my own project. </p>

<p>Every time I build the whole project, I have to replace a specific file in the submodule with my own implementation. How can I do that without forking the open source repo? (The open source project is under heavy development and I get lots of conflicts when I add my own logic)</p>

<p>Thanks!</p>
","0","5728032","",""
"37018467","1990636","2016-05-04 04:26:55","2","682","<git><azure><github><git-submodules>","Azure github deployment with private submodule","<p>I am trying to deploy private repository with github onto Azure and it used to work perfectly until I made a piece of repository into separate private submodule that is also hosted on github.</p>

<p>Now, every time I try to deploy to Azure it breaks during submodule deployment with following message:
fatal: could not read Username for '<a href=""https://github.com"" rel=""nofollow noreferrer"">https://github.com</a>'</p>

<p>What can I do to fix it?</p>
","1","1990636","",""
"53070816","44737","2018-10-30 18:36:28","3","1203","<git><git-submodules>","How do I reference an alternate URL for a git submodule, depending on where I cloned the super-repo?","<p>I have a workflow where I need to be able to pull several repos from one git server (server1) and push to another git server (server2). server2 resides on a network without Internet access, and some repos use submodules which refer to other repos that reside on server1.</p>

<p>Normally when I clone the super-repo (the one containing submodules) recursively, it clones the submodules from their original source. However, that is not an option when cloning from server2, because server2 does not have Internet access.</p>

<p>My thought was to push the submodules onto server2 and have those versions cloned when cloning the super-repo from server2. How do I achieve this while preserving the ability?</p>

<p>i.e., assuming all repos on server2 are identical to those on server1, I want the following 2 commands to be equivalent even though a build machine on server2's network cannot reach server1 to recursively clone the submodules:</p>

<p>git clone --recurse-submodules <a href=""https://server1/super-repo.git"" rel=""nofollow noreferrer"">https://server1/super-repo.git</a></p>

<p>git clone --recurse-submodules <a href=""https://server2/super-repo.git"" rel=""nofollow noreferrer"">https://server2/super-repo.git</a>
(and recall that server2 cannot reach server1 when recursively cloning submodules)</p>

<p>I was thinking of trying to achieve this through branches but that seems like it will introduce a maintenance issue.</p>
","0","44737","",""
"53097816","287238","2018-11-01 08:47:45","0","159","<git><git-submodules>","How to clone git repo with many git submodules, some of which are broken/missing?","<p>For example,</p>

<pre><code>git clone --depth 1 --recursive https://github.com/gohugoio/hugoThemes.git themes
</code></pre>

<p>You can try:</p>

<pre><code>git submodule update --init
</code></pre>

<p>But basically this stops on the first errors. When you don't own the repo, you probably just want to skip the broken or private repos but I don't think git has a skip-errors option yet. A foreach command might solve but haven't discovered yet. </p>
","0","287238","",""
"53121955","1792699","2018-11-02 15:58:04","14","12358","<git><ssh><git-submodules><bitbucket-pipelines>","How to use git submodules with Bitbucket pipelines?","<p>How to use git submodules with Bitbucket pipelines?</p>

<p>I'm using Bitbucket pipelines to build my project and I'm having issues pulling in my submodule, I'm probably not configuring the SSH keys correctly.</p>

<p>What I've done:</p>

<ol>
<li>Created SSH key pair in my computer. </li>
<li>Pasted the same key pair in both repositories (repo where the build will run and in the dependency repo) under Settings/SSH keys.</li>
</ol>

<p>The build error:</p>

<pre><code>Submodule 'dependencies/my-dependency' (git@bitbucket.org:mycompany/my-dependency.git) registered for path 'dependencies/my-dependency'
Cloning into 'dependencies/my-dependency'...
Warning: Permanently added the RSA host key for IP address '18.205.93.2' to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
Clone of 'git@bitbucket.org:mycompany/my-dependency.git' into submodule path 'dependencies/my-dependency' failed
</code></pre>

<p>My yml file</p>

<pre><code>image:
  name: myuser/my-image-name
  username: $DOCKER_HUB_USERNAME
  password: $DOCKER_HUB_PASSWORD
  email: $DOCKER_HUB_EMAIL

pipelines:
  branches:
    pipelines-setup:
      - step:
          script:
            - git submodule update --init
</code></pre>
","0","1792699","0","0"
"53173335","4869170","2018-11-06 13:54:28","0","271","<git><git-submodules>","Merging git repo with submodules to master","<p>I have a microservice type application made up of 10+ microservices. Currently all services exist in one git repo, but this is starting to prove unmanageable because our build/release pipelines are taking a long time to complete because a single change to one of the services triggers the single build for the entire repo.</p>

<p>I'm considering using git submodules to manage this process (so I can create build/release pipelines for each submodule), but unsure of the pull-request process. If I have a repo called Develop with 10 submodules (1 for each microservice) and another repo called master (also with 10 submodules). When I create a pull request from develop to master would I be able to do this once at the parent level (so develop to master), or would I need to create a separate pull request for each submodule that has changes?</p>
","0","4869170","",""
"53180419","80002","2018-11-06 21:36:55","1","32","<git><authentication><tfs><azure-devops><git-submodules>","How to build a git repo with external submodules in a vNext build on an on-premises TFS 2017?","<p><strong>Given:</strong></p>

<ol>
<li>Repo 1</li>
<li>Repo 2</li>
<li>Repo X - loads Repos 1 and 2 as submodules</li>
</ol>

<p>People make commits independently to Repo 1 and Repo 2, but never Repo X.</p>

<p>I need to create a vNext build for Repo X.</p>

<p><strong>Problem:</strong></p>

<p>Nobody updates Repo X, i.e. nobody runs the following commands:</p>

<ol>
<li>git submodule update --recursive --remote</li>
<li>git add .</li>
<li>git commit ""Refreshed""</li>
<li>git push</li>
</ol>

<p>I do not want humans to be aware of this detail, hence I want the build do it as the first step. </p>

<p>However, the problem is authentication - how do I make the build authenticate with the TFS server?</p>

<p><strong>I do not want any interactivity, even once at the very beginning.</strong></p>

<p>So, I create user name and password build variables (the latter is a secret), but now I am at loss - how do I make them propagate to git?</p>

<p>The only non interactive option I can see is the askpass protocol. But that implies writing some code, which seems trivial, but I wish to avoid it, if possible.</p>

<p>So, my question is - is there a better way to build Repo X? The one that does not force me to manipulate the Repo X explicitly from the build itself? If not, is there a simple way to authenticate with the TFS server without any user interaction whatsoever?</p>
","0","80002","",""
"69955934","8227894","2021-11-13 16:00:13","2","2228","<c++><cmake><git-submodules>","CMake build git submodules and its dependencies","<p>I am a novice in CMake,</p>
<p>I would like to use a C++ library <strong>A</strong> in my CMake project.
This library <strong>A</strong> is included as a git submodule and I include it in my CMakeFile using</p>
<pre><code>add_subdirectory(&quot;extern/A&quot;)
</code></pre>
<p>which works so far.</p>
<p>However, my library <strong>A</strong> has two other dependencies <strong>B</strong> and <strong>C</strong>. They are included in the CMakeFile of library <strong>A</strong> using <code>find_package()</code>.</p>
<p>Now, I would like CMake to build these dependencies <strong>B</strong> and <strong>C</strong>, so that library <strong>A</strong> can use them. I want to include <strong>B</strong> and <strong>C</strong> as git submodules as well.</p>
<p>Simply concatenating</p>
<pre><code>add_subdirectory(&quot;extern/B&quot;)
add_subdirectory(&quot;extern/C&quot;)
add_subdirectory(&quot;extern/A&quot;)
</code></pre>
<p>obviously doesn't work. I thought using <code>add_dependencies</code> could help here, but I couldn't find a way to make it work yet...</p>
<p>Is it even possible to do what I want to do here? If yes, could someone give me a hint which commands I might have to use?</p>
","2","8227894","0","0"
"53208481","4415153","2018-11-08 13:12:42","0","602","<git><deployment><git-submodules><bitbucket-pipelines><git-ftp>","Bitbucket pipelines using git submodules foreach","<p>I want to deploy my repository with git-ftp (as many of my client’s hosting plans don’t include SSH access) to my staging environment where WordPress is included as a submodule. This was my first attempt with Bitbucket pipelines:</p>

<pre><code>image: php:7.1

pipelines:
  branches:
    master:
    - step:
        deployment: staging
        script:
          - apt-get update
          - apt-get -qq install git-ftp
          - git ftp init -vv --user $sftp_user --passwd $sftp_passwd $sftp_path
</code></pre>

<p>It works perfectly fine and transfers all the files to my server, despite the fact that it doesn’t deploy the WordPress repository but an empty placeholder file.</p>

<p>As it says <a href=""https://github.com/git-ftp/git-ftp/issues/295"" rel=""nofollow noreferrer"">here</a> the support for submodules doesn’t work all the time but there is a workaround using </p>

<pre><code>git submodule foreach git [init|push|catchup]
</code></pre>

<p>I tried all the steps manually using Bash and it worked:</p>

<pre><code>$ git ftp init --user $sftp_user --passwd $sftp_passwd -vv $sftp_path
$ git submodule foreach 'git ftp init -vv $sftp_user --passwd $sftp_passwd -vv $sftp_path/$path/'
</code></pre>

<p>But when I try to apply this workaround to my bitbucket-pipelines.yml the submodule command foreach doesn’t seem to work at all… Testing the command only outputs</p>

<pre><code>git submodule foreach 'echo $path'
+ git submodule foreach echo 'echo $path'
</code></pre>

<hr>

<ol>
<li>Does anyone know a better workaround?</li>
<li>Why is submodule (+ foreach) not working? Or is it?</li>
<li>The command should give you <a href=""https://git-scm.com/docs/git-submodule#git-submodule-foreach--recursiveltcommandgt"" rel=""nofollow noreferrer"">access to several variables</a>, do Bitbucket’s repository variables override/block these? </li>
</ol>

<p>Thanks for your help!</p>
","0","4415153","",""
"53254220","947040","2018-11-11 23:18:20","5","1145","<git><git-submodules><plesk>","Plesk automatically update submodule on git repository change","<p>I have setup my plesk website to automatically pull changes from a remote repository to a certain path of the webserver via post-hooks as described <a href=""https://docs.plesk.com/en-US/onyx/customer-guide/git-support/using-remote-git-hosting.75848/#o76297"" rel=""noreferrer"">here</a>.</p>

<p>However my repository contains a git submodule and I need to run the custom command <code>git submodule update --remote</code> as well. How can I tell plesk to do that. The commands I can enter in the</p>

<blockquote>
  <p>Enable Additional Deployment Actions</p>
</blockquote>

<p>Setting seem not to be executed in the correct path. Also when I go to the path the repository syncs to on my server i get: </p>

<p><code>fatal: Not a git repository (or any of the parent directories): .git</code></p>

<p>How can I achive to tell plesk to update submodules too with the git plugin?</p>
","1","947040","0","0"
"53271819","4130378","2018-11-12 23:56:12","1","36","<git><git-submodules><revision>","git not adding files from different git directory","<p>How do you add git revisioned files to a different git?</p>

<p>Current Setup:</p>

<pre><code>env/A.txt
env/.git         &lt;-- parent git

env/docs
env/docs/B.txt
env/docs/.git    &lt;-- child git
</code></pre>

<p>While inside <code>env</code> directory I want to be able to add all files to parent git including the ones from child git. For some reason I am not able to do that. All files that are inside <code>env/docs/B.txt</code> are not adding to parent git. What to do?</p>
","0","4130378","0","0"
"53308839","10654394","2018-11-14 21:16:19","1","853","<git><version-control><git-submodules><remote-branch>","Correct way to update git superproject","<p>Scenario: We have recently started using a superproject in our team but seem to keep ending up having different versions of our superproject. We are all working on 1 branch of the project (but superproject has 3 remote branches). The issue seems to be that some files which have been deleted in the remote branch do not get removed when some of us do a:</p>

<pre><code>git submodule foreach 'git checkout &lt;branch_name&gt; &amp;&amp; git pull -r'
</code></pre>

<p>Even though a git status on any repo shows that our local branch is up to date with the remote branch. Sometimes, when an entire repo is deleted we also run across the problem of having different contents of the entire superproject.</p>

<p>What is the correct way (our team has about 3-4 different ways of doing this for some reason) of updating our superproject with what is on the remote branch that would allow us to have the same workspace when repos/directories inside repos are removed.</p>
","0","10654394","0","0"
"70628381","1772066","2022-01-07 23:45:01","2","170","<git><git-submodules><git-subtree><git-detached-head><git-subrepo>","git submodule replacement that doesn't detach heads","<p><strong>My situation</strong>: I have a large number of computers that I use for various tasks.  I have a large number of libraries, each in its own git repo.</p>
<p><strong>My desire</strong>: I want to be able to modify one of the libraries on any computer, do a git commit/push; then go to another computer, do a <code>git pull</code>, and have all the libraries updated.  Then I modify one of these libraries, commit/push, and everything works when I get tot he next computer.</p>
<p><strong>My current attempt</strong>:  I have a top-level git project that incorporates all the other library repos as submodules.  This includes a .gitmodules file that specifies the working branch of each module by using</p>
<pre><code>git config -f .gitmodules submodule.modulename.branch develop
</code></pre>
<p>I have <a href=""https://stackoverflow.com/questions/18770545/why-is-my-git-submodule-head-detached-from-master""><code>update = merge</code></a> set for each module.
I have <code>submodule.recurse</code> set to true, so <code>git pull</code> at the top level does <em>something</em> to each module.</p>
<p><strong>How it is broken</strong>: Heads become detached.  I wrote a script that parses the <code>.gitmodules</code> file and does a <code>checkout</code> of the appropriate branch of each module. I then <code>commit</code> and <code>push</code> the top module.  Whenever I modify things and try to do a pull, e.g. on another machine, heads become detached.  If I don't notice that the head is detached before I start modifications, I have to carefully unscramble the wreckage before I can commit my changes.</p>
<p>There are literally 3.6k stack overflow questions about git detached heads over the past decade, and most seem to be from the submodule capability.  I haven't gone through all of them, but what I have tried isn't working.</p>
<p>I forget why I rejected <code>git-subtree</code>, but <code>git-subrepo</code> hasn't been touched in over a year and has 153 issues and 25 pull requests pending, so I think it's dead.</p>
<p>Does anyone have a working solution to this?</p>
<hr />
<h1>Accepted answer from @vonC looks good.</h1>
<p>I could probably streamline this a bit, but my readme for the top-level project now says:</p>
<h2>Recommended checkout:</h2>
<pre><code>git clone --recursive --jobs=8 *mysuperproject_clone_url*
cd *mysuperproject*
git config alias.pullall 'submodule foreach git pull'
git config alias.statusall 'submodule foreach git status'
git config alias.switchall \
    &quot;submodule foreach --recursive 'git switch \$(git config -f \${toplevel}/.gitmodules submodule.\${sm_path}.branch)'&quot;
git switchall
</code></pre>
<h3>Updating from repository</h3>
<pre><code>git pullall
</code></pre>
<h3>If heads become detached, fix with</h3>
<pre><code>git switchall
</code></pre>
<h3>To add a module</h3>
<p>Module named <code>newmodule</code> working on path <code>develop</code> in the following example.</p>
<pre><code>cd /path/to/mysuperproject
git submodule add git@github.com:myaccount/newmodule
git config -f .gitmodules submodule.newmodule.branch develop
git config -f .gitmodules submodule.newmodule.update merge
</code></pre>
<p>If the submodule is on the default <code>master</code> branch, you still have to config the branch.</p>
<p>If you switch a submodule to a different branch, then in the top level you must config again</p>
<pre><code>git config -f .gitmodules submodule.newmodule.branch newbranch
</code></pre>
<p>And push both the submodule and the top level project.</p>
<p>On a different working directory (such as on a different machine), you must</p>
<pre><code>cd /path/to/mysuperproject
git pull
git switchall
git pullall
</code></pre>
","4","1772066","0","0"
"70664446","","2022-01-11 09:34:58","0","82","<git><git-submodules><git-clone><git-add>","Broken repos by applying git clone and add . to a parent folder","<p>This is the 2nd time it happens to me. The first time I thought it was a hard drive problem.</p>
<p>I'm trying to back up all my projects, that don't have a Repos in it. Because of my bad practices, I've local projects with repo and local projects without it. All projects are in a folder named <code>Workspace</code>.</p>
<p>I tried to backup everything creating a new repo in GitHub, I did a clone and then copy all the files ( in this case two files <code>Readme.md</code> and the folder <code>.git</code>) on the <code>Workspace</code> Folder. Then I apply</p>
<pre><code>git add . 
git commit -m &quot;backing up&quot;
</code></pre>
<p>After some time, I receive an error, talking of submodules, etc. I realize that I should do other things applying submodules and git. In any case, I change the strategy to back up my local projects.</p>
<p>The problem is, that all my local projects that have repos, git don't recognize the repos. git doesn't &quot;see&quot; the repos. I believe those commands change something on those inner projects.
Each project has its own <code>.git</code> folder but it doesn't matter. Git doesn't see the repo.
I've been trying to find a solution for two days now, and I didn't format my pc yet just in case
:( .
I believe that is something related to the files inside <code>.git</code> folder, <code>HEAD</code> file is not in the <code>.git</code> folder, it doesn't exist. Thank you</p>
","4","","",""
"37921871","1448813","2016-06-20 11:52:42","0","31","<git><git-submodules>","Create new git repository out of two existing ones","<p>I have two repositories, A and B, and now I want to make a third one (C) that has two submodules, subA and subB. But I want to replay the whole history of those two repositories, as if they were commited alongside each other.</p>

<p>So I want to go to repository C and create submodules subA and subB with their first commits. Then search by date which had the next commit, and then commit that one. And so on until today. Of course, only the main branch.</p>

<p>I need this because i want to have the whole history of those two repositories together.</p>

<p>Is there a script that would do this?</p>
","2","1448813","",""
"53763633","10591104","2018-12-13 14:03:50","0","116","<git><git-submodules>","How to use submodule decently in multi-branch git project?","<p>I have a git project named G, which has multi branches named A, B, C... Then I add a submodule S in branch A, update it, and commit all the changes. So I have a .gitmodule file and a 'directory' also named S lying on my working directory, as well as some changes in .git/config to track the module's info.</p>

<p>Then if I directly checkout branch B, git will define the 'directory' S as an untracked directory. In my understanding, this is caused because in branch B there is neither .gitmodule nor any other config files that can define S as a submodule, so git just think it as an untracked directory.</p>

<p>This is kind of annoying. If I remove the directory S in branch B, then when I checkout branch A again, the submodule S is also changed. But I don't want to add either submodule S or directory S to branch B (or to any other branches except A).</p>

<p>So my question is, is there some way to just add a submodule in one branch, while not affecting the other branches?</p>

<p>I know I can ""git submodule deinit S"" before I checkout B when I was in  branch A. But I think this is not so convenient. I just want to use the files in another project, why should I init and deinit it every time? Or is my understanding to the usage of submodule wrong?</p>

<p>I also think about adding the directory S to .gitignore in other branches, but this is even more inconvenient if there's many branches.</p>

<p>And I also also think about just copying the project S files to the branch A, and commiting them. But then I cannot track the changes in project S directly.</p>

<p>And I also also also think about using symbolic link of project S, which finally meets my need. But I still want to know if there is a way in git to solve this problem.</p>

<p>(I'm using git 2.17.1</p>
","7","10591104","",""
"70784537","1095896","2022-01-20 10:26:39","0","271","<git><git-submodules>","How to keep folder structure while share common code across projects in git?","<p>I have the following directory structure that I'd like to keep it while share some of the directories across different projects. I'd like to achieve something like this:</p>
<pre><code>root
  |_dir1  (git repo1)
  |_dir2  (git repo1)
  |_dir3  (git repo1)
  |_project&lt;n&gt; (git repo2 contains project specific code in different branches, e.g. project1's code in branch1 and project2's code in branch2, etc.)
</code></pre>
<p>dir1...3 are common code shared across different projects and I'd like to keep the folder structure unchanged.</p>
<p>I'm thinking about using git submodules but not sure how to do it. Is it possible to put dir1...3 in git repo1, as a submodule, then all project codes in project folder in git repo2, which is the main git repo that hosts git repo1 as the submodule?</p>
","6","1095896","",""
"38070585","1723578","2016-06-28 08:11:01","14","5453","<git><git-submodules><git-subtree><git-slave><git-subrepo>","git submodules , gitslave, git subtree or a simpler solution","<p>We have a git repository with N folders.</p>

<pre><code>Repo
|-Folder1
|-Folder2
|- ...
|-FolderN
</code></pre>

<p>With different collaborators we would like to share different folders. Each collaborator should have access only to his allowed subset of folders. What is the ""good"" way to achieve this using git?</p>

<hr>

<p>An answer was to use <code>git submodules</code>. But after I read this article: 
<a href=""https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/"" rel=""noreferrer"">https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/</a>
I understood that you need to have a good mastery of git (which is not the case of our collaborators) in order to not have problems when using <code>git submodules</code>.</p>

<p>I read about some possible alternatives like <code>gitslave</code>, and <code>git subtree</code>. <code>gitslave</code> seemed to be a good solution but still a complex solution in my opinion.</p>

<p>Here is my simple solution and I would like to know if it can have some very bad drawbacks : </p>

<p>-Having a simple repository for each Folder and a repository for Repo. Then add all the files in Folder1, ..., FolderN in the main Repo. </p>

<p>-globalpush script:</p>

<pre><code>function globalpush(){
REPOS=""$HOME/Repo/
       $HOME/Repo/Folder1
       $HOME/Repo/Folder2
       $HOME/Repo/Folder3
       # ...
       $HOME/Repo/FolderN""   

#do not show untracked files
git config status.showuntrackedfiles no

read -p ""Commit description: "" description

for repo in ${REPOS}
do
    # if the repo folder exists
    if [ -d $repo ]
    then
        # Go inside the repo
        cd $repo
        echo ""-----PUSHING REPO : ""$repo""-----""

        #add all modified all deleted TRACKED files
        git add -u .

        git commit --allow-empty -m ""$description""
        git push                
    else
        echo ""-----COULD NOT FIND : ""$repo""-----""
    fi
done

#show untracked files again
git config status.showuntrackedfiles normal
}
</code></pre>

<p>-globalpull script:            </p>

<pre><code>function globalpull(){
REPOS=""$HOME/Repo/
       $HOME/Repo/Folder1
       $HOME/Repo/Folder2
       $HOME/Repo/Folder3
       # ...
       $HOME/Repo/FolderN""           

for repo in ${REPOS}
do
    # if the repo folder exists
    if [ -d $repo ]
    then
        # Go inside the repo
        cd $repo
        # pull the modifs.
        echo ""-----PULLING REPO : ""$repo""-----""
        git pull                        
    else
        echo ""-----COULD NOT FIND : ""$repo""-----""
    fi
done
}
</code></pre>

<p>The advantages of this solution are:</p>

<p>1 - Simple solution that everyone can understand.</p>

<p>2 - Possibility to give the access rights for each Folder independently.</p>

<p>3 - For the main developers (who have access to Repo) the repository Repo is self-contained, and contains all the history (in case something goes wrong with the repositories of Folder1, ..., FolderN).</p>

<p>4 - when a main developer makes a commit with a given description, a commit with the same description will be created for all the Folders repositories, even those without a modification (--allow-empty), which of course isn't perfect but helps tracking versions that are submitted by main developers.</p>

<p>EDIT : </p>

<p>There seems to be a new command I was not aware of <code>git subrepo</code> ...</p>
","2","1723578","0","0"
"38078258","2259735","2016-06-28 13:57:26","0","1368","<git><gitlab><git-submodules>","Some gitlab folders showing as submodules","<p>Excuse the potentially naive question - I am not a software engineer by any means...</p>

<p>I am using .git to track revision changes for .xlsx files. I've created a git repo (""main"" - hosted by Gitlab) - the folder structure is as follows:</p>

<ul>
<li>Main (.git repo)

<ul>
<li>_archive</li>
<li>_personal</li>
<li>pricing_model</li>
<li>inventory_model</li>
<li>monthly_close</li>
</ul></li>
</ul>

<p>When I commit and push the ""main"" folder, Gitlab picks up all the folders, but classifies <strong>""pricing_model"", ""inventory_model"", and ""monthly_close"" as submodules</strong> <a href=""http://imgur.com/a/0wKAD"" rel=""nofollow"">(see attached)</a>. As a result, I cannot drill through Gitlab's interface to see the files that are within the submodule. </p>

<p><strong>QUESTIONS</strong></p>

<ol>
<li>How do I configure my main folder so that I can drill through all subfolders?</li>
<li>Is ""submodule"" the correct terminology in this instance?</li>
</ol>
","2","2259735","",""
"70806004","12246164","2022-01-21 18:27:12","0","698","<git><git-submodules>","Track branches with git submodule","<p>I'm needing to use the git submodules so that my parent repository can track changes that occur in specific branches. I have a project with testing, beta and production branches. Both my parent and child repositories will need to have testing, beta, and production (main) branches.</p>
<p>Thanks if anyone can suggest me a solution to this.</p>
","4","12246164","",""
"53776852","3926506","2018-12-14 09:30:11","3","1529","<git><android-studio><git-submodules><android-studio-3.0>","Hide git submodule changes from version control window","<p>I'm working on git project with submodules. When I pull changes from remote repository my default change list contains changed <em>submodule meta files</em>:</p>

<p><a href=""https://i.stack.imgur.com/FGoUi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FGoUi.png"" alt=""meta files""></a></p>

<p>And I need to move <em>this files</em> to another change list: </p>

<p><a href=""https://i.stack.imgur.com/hArHI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hArHI.png"" alt=""meta files in Git change list""></a></p>

<p>How I can avoid this <strike>pain</strike> useless work?</p>
","2","3926506","0","0"
"38122130","6533081","2016-06-30 11:44:00","4","637","<git><installation><addition><git-submodules><libgit2>","How to add a git sub-module to a super-project in code using libgit2","<p>I have successfully created two git repositories (named repo and module) in code using the libgit2 C API and am now trying to add the ""module"" repository to the ""repo"" repository as a submodule. I am trying to use the libgit2 git_submodule_add_setup C API to do this. See <a href=""https://libgit2.github.com/libgit2/#HEAD/group/submodule/git_submodule_add_setup"" rel=""nofollow"">https://libgit2.github.com/libgit2/#HEAD/group/submodule/git_submodule_add_setup</a>.</p>

<p>The documentation says the following:</p>

<p>git_submodule_add_setup:
This does ""git submodule add"" up to the fetch and checkout of the submodule contents. It preps a new submodule, creates an entry in .gitmodules and creates an empty initialized repository either at the given path in the working directory or in .git/modules with a gitlink from the working directory to the new repo.</p>

<p><strong>To fully emulate ""git submodule add"" call this function, then open the submodule repo and perform the clone step as needed</strong>. Lastly, call git_submodule_add_finalize() to wrap up adding the new submodule and .gitmodules to the index to be ready to commit.</p>

<p>My question is how exactly do I perform the clone operation alluded to above given that the call to git_submodule_add_setup creates a initialised, but empty submodule (with a .git directory inside it)? I have already made several attempts to do the clone using the git_submodule_open and git_clone C APIs, but to no avail. The clone fails because the submodule is not an empty folder. I have read the git_clone C API documentation at and have also familiarised myself with the example code at <a href=""https://libgit2.github.com/docs/guides/101-samples/#repositories_clone_simple"" rel=""nofollow"">https://libgit2.github.com/docs/guides/101-samples/#repositories_clone_simple</a> etc., but I am still none the wiser. Some help from those in the the know would be much appreciated.</p>

<p>I have included a code snippet below to give a flavour of what I have so far.</p>

<pre><code>namespace bfs = boost::filesystem;
git_repository * repo = NULL;
bfs::path const repo_path = bfs::current_path() / ""repo"";
std::string const repo_url = repo_path.string();
git_repository_init(&amp;repo, repo_url.c_str(), 0);

//Add various files to repo index, and commit them...

git_repository * module = NULL;
bfs::path const module_path = bfs::current_path() / ""module"";
std::string const module_url = module_path.string();
git_repository_init(&amp;module, module_url.c_str(), 0);

//Add various files to moduleindex, and commit them...

git_submodule * submodule = NULL;
git_submodule_add_setup(&amp;submodule, repo, module_url.c_str(), ""module"", 0);

//What do I need to do in here to clone the module into position??

git_submodule_add_finalize(submodule);
git_submodule_free(submodule);

git_repository_free(module);
git_repository_free(repo);
</code></pre>
","1","6533081","",""
"70865847","820410","2022-01-26 15:21:17","3","2304","<git><git-submodules>","git submodule checkout latest commit of different branch from respective remotes","<p>My parent project has a couple of submodules added to it.</p>
<p>For deployment purposes, I want to checkout a specific branch eg <code>master</code>, <code>staging</code>, etc in each submodule and pull the latest commit of this branch in each submodule.</p>
<p>I've checked various answers on SO like the following:</p>
<ul>
<li><a href=""https://stackoverflow.com/q/1030169/820410"">Easy way to pull latest of all git submodules</a></li>
<li><a href=""https://stackoverflow.com/q/1777854/820410"">How can I specify a branch/tag when adding a Git submodule?</a></li>
<li><a href=""https://stackoverflow.com/q/5828324/820410"">Update Git submodule to latest commit on origin</a></li>
</ul>
<p>But it's very much confusing as to what is the best practice in 2022. I've <code>git version 2.30.1 (Apple Git-130)</code></p>
<p>So far I've understood that this command can be used to fetch the latest commit (from their respective remotes) of the branch already mentioned in <code>.gitmodules</code> file.</p>
<pre><code>git submodule update --remote --merge
</code></pre>
<p>But how exactly do I use the <code>-b</code> option in order to switch the branches in all submodules at the same time, for diff environments deployment?</p>
","0","820410","0","0"
"70867805","1113139","2022-01-26 17:33:14","3","715","<windows><git><docker><git-submodules>","Error in Windows Docker git: cd: .git: Not a directory","<p>I have a Windows 10 host with a <code>mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019</code> Docker image,</p>
<p>git was installed via</p>
<pre><code>RUN powershell.exe -ExecutionPolicy RemoteSigned `
  iex (new-object net.webclient).downloadstring('https://get.scoop.sh'); `
  scoop install python git
</code></pre>
<p>My git repo has submodules. When I checkout the repo locally and try to build it via</p>
<pre><code>docker run --rm -it -v %cd%:C:\Temp -w C:\Temp buildtools2019 cmd.exe /C build.bat
</code></pre>
<p>I get the following error when git tries to update submodules (I use CMake as a build system):</p>
<pre><code>-- Submodule update
/mingw64/libexec/git-core/git-sh-setup: line 365: cd: .git: Not a directory
Unable to determine absolute path of git directory
CMake Error at CMakeLists.txt:47 (message):
  git submodule update --init failed with 1, please checkout submodules
</code></pre>
<p>But when I just start the container, make <code>git clone</code> inside the container and then execute my batch script, git has no problems. What is the difference between the cloned repo and the mapped one?</p>
<p><strong>Edit:</strong> Mapped folder list:</p>
<pre><code>PS C:\TEMP&gt; dir


    Directory: C:\TEMP


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        1/27/2022   6:59 AM                .git
d-----        1/26/2022   6:01 PM                src
-a----        1/26/2022   6:01 PM             88 .gitmodules
-a----        1/26/2022   6:01 PM            162 build.bat
</code></pre>
<p>This is the routine where the issue occurs:</p>
<pre class=""lang-bash prettyprint-override""><code># Make sure we are in a valid repository of a vintage we understand,
# if we require to be in a git repository.
git_dir_init () {
        GIT_DIR=$(git rev-parse --git-dir) || exit
        if [ -z &quot;$SUBDIRECTORY_OK&quot; ]
        then
                test -z &quot;$(git rev-parse --show-cdup)&quot; || {
                        exit=$?
                        gettextln &quot;You need to run this command from the toplevel of the working tree.&quot; &gt;&amp;2
                        exit $exit
                }
        fi
        test -n &quot;$GIT_DIR&quot; &amp;&amp; GIT_DIR=$(cd &quot;$GIT_DIR&quot; &amp;&amp; pwd) || {
                gettextln &quot;Unable to determine absolute path of git directory&quot; &gt;&amp;2
                exit 1
        }
        : &quot;${GIT_OBJECT_DIRECTORY=&quot;$(git rev-parse --git-path objects)&quot;}&quot;
}
</code></pre>
<p>I can change into any directory while I'm still in the shell, but from inside of this script, I can change only into the folders outside of the mounting point i.e. <code>c:\TEMP</code>.</p>
","4","1113139","",""
"70874808","2298137","2022-01-27 07:34:09","0","112","<git><git-submodules>","Convert a git submodule into a normal folder with the same name causes trouble","<p>We have a repo with a setup like this:</p>
<pre><code>Main/
  |--utilities/
</code></pre>
<p>Main and utilities are both git repos (not their actual names). Utilities was added to main as a submodule. We decided that utilities should not be a submodule, but instead should just be a normal subfolder within Main. The reason to use the same name is that users of Main don't have to change (include paths etc...).</p>
<p>So on a new branch we removed utilities like:</p>
<pre class=""lang-sh prettyprint-override""><code>git submodule deinit -f utilities/
rm -rf .git/modules/utilities/
git rm -f utilities/
</code></pre>
<p>Committed this and then copied in utils as a folder (minus its .git files) and added this to the repo and committed that. All good so far</p>
<p>But now we want to merge in changes that other people have made in the meantime (they still have utils as a sub-repo and have even moved utils on). So basically <code>git pull origin master</code>.</p>
<p>Now we get errors like:</p>
<pre><code>Unmerged paths:
  (use &quot;git add/rm &lt;file&gt;...&quot; as appropriate to mark resolution)

deleted by us:   utilities 
$ git add utilities/
error: unable to index file utilities 
fatal: updating files failed
</code></pre>
<p>The only way I can think of to proceed would be to abandon my changes on this branch and start again - and suspend all other work on this repo until the changes are done.</p>
<p>My question is - what is the best way to go about converting a submodule into a folder of the same name (which I think really confuses git). I also feel that switching between versions before the change and after the change will be horrible (as the submodule folder won't always get removed etc...). Any tips/tricks here? - never had to do this before and I can't see examples of others doing it (yet).</p>
","2","2298137","",""
"38144514","281545","2016-07-01 11:39:02","1","166","<git><git-submodules>","git repo subdirectory convert to a submodule - should I not commit dir removal and module addition at once?","<p>Following advice in <a href=""https://stackoverflow.com/a/12515629/281545"">Convert a git folder to a submodule retrospectively?</a> I have prepared an online repository and I am ready to start testing by removing the old folder and replacing it with the submodule - see <a href=""https://stackoverflow.com/a/6529536/281545"">switching a subdirectory managed by git to a submodule</a>. </p>

<p>But everywhere I looked people first commit the folder removal and then the addition of the submodule (random <a href=""http://will.willandorla.com/extract-to-git-submodule"" rel=""nofollow noreferrer"">example1</a>, <a href=""https://stackoverflow.com/a/36499856/281545"">example2</a>).<br>
This however results in a broken commit on <code>master</code> (as the files in the subfolder are of course needed) and this is a nono. </p>

<p>So is there some reason people add the submodule in a separate commit ?<br>
Is there some reason submodules updates should be in a separate commit in general ?</p>
","0","281545","0","0"
"70917119","1445015","2022-01-30 17:27:30","1","786","<git><git-submodules><git-diff>","`git diff --submodule=diff` doesn't show diff in submodule that points to a different repository","<p>As an example of my problem, consider <a href=""https://github.com/alexcrichton/ssh2-rs"" rel=""nofollow noreferrer"">ssh2-rs repo</a> has a submodule at the path <code>libssh2-sys/libssh2</code> that points to <a href=""https://github.com/libssh2/libssh2"" rel=""nofollow noreferrer"">libssh2 repo</a>. Now, within <code>ssh2-rs@0.2.19</code> [<code>d2ef03f</code>] and <code>ssh2-rs@0.2.20</code>[<code>1fcf8d3</code>], the reference pointer to the submodule was updated. Now when I run <code>git diff --submodule=diff d2ef03f..1fcf8d3</code>&lt; i expect the diff to show me the code changes within the submodule too, but it does not. For example, the <a href=""https://github.com/alexcrichton/ssh2-rs/compare/libssh2-sys-0.2.19...libssh2-sys-0.2.20"" rel=""nofollow noreferrer"">GitHub compare</a> page shows a link to the diff for the files within the submodule. Ideally, I would want a single <code>diff</code> command to show all the code changes between two commits, including changes within the submodule files in the case where the submodule reference pointer was updated. Is that doable? How can I achieve that?</p>
","7","1445015","",""
"53795838","3834142","2018-12-15 18:00:29","4","1816","<git><git-submodules>","Create new git repository inside subfolder by git init and ignore in the main git repo","<p>I have tried to understand git submodule. It seems complicated (I don't have any experience with submodule). It might be worth to invest some time. But, right now I am having some questions related to git submodule.</p>

<p>Actually what I am trying is:</p>

<ul>
<li>having a main repository, inside the main repository I would like to create a new (sub)repository. So what I did: 
<br> - First) create folder (ABC).
<br> - Second) in the main repository ignore the folder (ABC).
<br> - Third) in de folder (ABC), git init (to create a new repository)</li>
</ul>

<p>Is this the right way to create a sub-repository (or possibly right direction)?</p>

<p>Is git submodule kind of the same as I did like above?</p>

<p>Thanks in advance.</p>
","1","3834142","",""
"70978120","17974740","2022-02-03 20:51:35","1","89","<git><git-submodules><.git-folder>","Updating git submodule inside a submodule","<p>I have a submodule inside my repo for example <code>repo/submodule1</code>. Inside <code>submodule1</code>there is another submodule, example: <code>repo/submodule1/submodule2</code>. Do I have to checkout and commit changes in <code>submodule1</code> to get <code>submodule2</code>'s changes? I'm wanting changes from <code>submodule2</code> to reflect into my <code>repo</code> repository. I've tried <code>git submodule update --init --recursive</code> from my <code>/repo/</code> repository but that doesn't seem to reflect any changes.</p>
<p>I've also tried deleting and reinitializing my <code>submodule1</code> from within <code>/repo/</code> but it's not working either, but may have done it wrong. I'd prefer to get this all working from only changes within <code>repo</code> and not needing to checkout any of the other submodules if possible.</p>
","1","17974740","",""
"70980793","9954366","2022-02-04 02:35:45","0","121","<git><version-control><git-submodules>","Is it possible to add a submodule to a submodule from the top-level git repository?","<p>I'm working on a few game development projects that use the open-source Godot Engine, which supports modules and add-on scripts.</p>
<p>Our team manages a Git repository for the project, as well as some custom engine modules and add-on script Git repositories, but we don't necessarily want to maintain our own fork of the engine for each project if it isn't necessary. Here's the basic structure:</p>
<pre><code>/project/project.git                              [The project repo. We maintain it.]

/project/engine/engine.git                        [Open-source engine repo. Submodule. We prefer to not maintain a fork if not needed.]

/project/engine/modules/my-module/my-module.git   [One of our custom engine module repos. Submodule. We maintain them.]
</code></pre>
<p>In other words, what we'd like to do is add the upstream engine to each of our projects as a submodule at <code>/project/engine</code>. And then we'd like to add various modules to the engine under <code>/project/engine/modules/</code>, but <em>as submodules of the top-level project repo instead of the engine repo.</em></p>
<p>(Our thought process is that, in many projects, we can simply attach the unmodified, upstream Godot repository directory, and then add functionality to the engine by attaching modules and add-ons. Each top-level project would be responsible for managing the specific engine, modules, and add-ons that it needs. As such, we can cut down on the number of engine forks or branches that we need to maintain, saving that as a last-resort for situations where modules and add-ons can't be used.)</p>
<p>The problem that we've run into so far is that, once we add the engine as a submodule of the project (at <code>/project/engine</code>) we don't seem to be able to add another nested submodule (at <code>/project/engine/modules/my-module</code> for example) from the top-level &quot;superproject&quot;, I think because the target path exists inside the engine's submodule. We want the project to attach a submodule on behalf of the engine, so that the project is responsible for the change but...</p>
<p><strong>Is that just not possible? Is there no way to add a submodule to the top-level project repository, that targets a path that exists in the one of its submodules?</strong></p>
<p>I'm open to alternative suggestions if there are better ways to manage this kind of setup, though I feel we're already at risk of over-designing our repo structure here.</p>
","1","9954366","",""
"70988396","8677806","2022-02-04 14:54:02","8","10943","<git><git-submodules>","How to update git submodule to a specific commit?","<pre><code>git submodule update --remote
</code></pre>
<p>Above command updates the submodule to latest commit however I want to update to a specific commit (e.g. to some commit hash). How to achieve that ?</p>
","1","8677806","0","0"
"38276448","6348140","2016-07-08 22:52:43","4","3466","<git><git-submodules>","How can a git submodule be restored to it's committed version?","<p>If I update the submodule in one parent project branch, then switch to another branch in the same working tree, the submodule reference appears as if it has been modified.</p>

<p>For example (the hashes will be different probably and you probably have to scroll the code window down to see all of the lines):</p>

<pre><code># create soon to be submodule
mkdir /tmp/example-submodule
cd /tmp/example-submodule
git init
echo a &gt; a
git add a
git commit -m 'm'
cp -r .git /tmp/example-submodule.git
cd /tmp/example-submodule.git
git config --bool core.bare true
cd /tmp
/bin/rm -rf /tmp/example-submodule
git clone file:///tmp/example-submodule.git

#create other project and add sub-module
mkdir /tmp/example-supermodule
cd /tmp/example-supermodule
git init
echo x &gt; x
git add x
git commit -m 'm'
cp -r .git /tmp/example-supermodule.git
cd /tmp/example-supermodule.git
git config --bool core.bare true
cd /tmp
/bin/rm -rf /tmp/example-supermodule
git clone file:///tmp/example-supermodule.git

#update the submodule
cd /tmp/example-supermodule
git submodule add file:///tmp/example-submodule.git example-sub
git commit -a -m'm'
git submodule status
# prints: 189ea25d45618862d0bfcbf5bd995e05ce1c2e4e example-sub (heads/master)
git push

#update the submodule
cd /tmp/example-submodule
echo b &gt; b
git add b
git commit -m 'm'
git push

#create new branch in super module and update submodule to new HEAD
cd /tmp/example-supermodule
git branch otherbranch
git checkout otherbranch
git submodule update --remote
git commit -a -m'm'
git submodule status
# prints: 26f94e59002603475a1ba731104f92e10e88cf6b example-sub (remotes/origin/HEAD)
git push origin otherbranch

#checkout another branch
git checkout master
git status
cat .git/modules/example-sub/HEAD
# prints: 26f94e59002603475a1ba731104f92e10e88cf6b
</code></pre>

<p>After master is checked out, the submodule's hash is different as if the update in otherbranch also affected master.</p>

<p>If I clone the super-project instead of switching the branch in the same working tree:</p>

<pre><code>cd /tmp
git clone --recursive file:///tmp/example-supermodule.git/ other
cd /tmp/other
git submodule status
</code></pre>

<p>it shows the submodule commit that was added in the master branch.</p>

<p>How can someone switch between branches in their working tree and have the submodule's commit match what it was committed as? Or how can one recover after changing branches shows the submodule as modified when it wasn't modified in that branch?</p>
","0","6348140","0","0"
"71087086","3927314","2022-02-11 22:13:44","0","56","<git><git-submodules>","For a git submodule, which commit will be cloned if no version is specified in .gitmodules?","<p>Does git follow a certain set of rules when the <code>.gitmodules</code> file only specifies <code>path</code> and <code>url</code> for a submodule?</p>
","2","3927314","",""
"38336370","3344139","2016-07-12 18:25:31","0","31","<git><version-control><git-submodules>","Create a git submodule from already existing repository","<p>I have the following folder tree:</p>

<pre><code>&lt;A git repository&gt;
    &lt;Folder A&gt;
    &lt;Folder B&gt;
    &lt;Another git repository C&gt;
    &lt;Yet another git repository D&gt;
</code></pre>

<p>What I want is for repository C and D to be a submodule of the repository they are contained in. At the moment, C and D have not been added to the toplevel repository, they just reside in the folder. They got there by using <code>git clone</code>.
Is there a way to add them as submodules without having to delete the current folders and using <code>git submodule add &lt;url to repository C&gt;</code> to download them again?</p>
","2","3344139","",""
"73217034","6320022","2022-08-03 06:15:37","0","691","<c++><cmake><git-submodules>","How can I use a library from a git submodule with CMake?","<p>I have a big project where I want to introduce a new library, both are mantained by me so full access to the code, CMakeLists etc</p>
<p>In Linux it is really easy, I just install the library with make install and then add it to my project with find_package(mynewlib REQUIRED). Then I use it as any other external library, target_link_libraries, add the headers and everything goes fine.</p>
<p>In Windows, I cannot make install, so I add it as a git submodule and use it like this:</p>
<pre><code>    find_package(MYLIB QUIET)
    if(MYLIB_FOUND)
        set_property(GLOBAL APPEND PROPERTY CUSTOM_STATUS MYLIB)
        set_property(GLOBAL APPEND PROPERTY CUSTOM_STATUS_MYLIB
            &quot;   MYLIB:&quot; &quot;version ${MYLIB_VERSION}&quot;)
    else()
        add_subdirectory(modules/mylib)
    endif()

    set(ALL_LIBS
        Qt5::Core
        Qt5::Widgets
        MYLIB)
</code></pre>
<p>It doesn't work, linker starts complaining about unresolved symbols in different parts of the code, not related with the new introduced library. For example:</p>
<blockquote>
<p>[build] Main.cpp.obj : error LNK2019: unresolved external symbol &quot;int
__cdecl qInitResources_application(void)&quot; (?qInitResources_application@@YAHXZ) referenced in function main
[build] Main.cpp.obj : error LNK2001: unresolved external symbol
&quot;public: static struct Version const Version::SOFTWARE_VERSION&quot;
(?SOFTWARE_VERSION@Version@@2U1@B) [build] targetapp\targetappcore.dll
: fatal error LNK1120: 52 unresolved externals</p>
</blockquote>
<p>My question is, is my approach correct? MYLIB has a very big CMakeLists.txt I am currently analyzing in case it conflicts with the top level one, but if it was fine, is this how to do it?</p>
<p>I will consider using a package manager like vcpkg or conan in the future, but right now I would like to keep with git submodules.</p>
","8","6320022","",""
"73237850","9506773","2022-08-04 14:39:52","0","182","<git><git-submodules>","How to get the latest release tag of a specific submodule in .gitmodules","<p>I have two submodules in my repo. My <code>.gitmodules</code> look like this:</p>
<pre class=""lang-bash prettyprint-override""><code>[submodule &quot;strong_sort/deep/reid&quot;]
    path = strong_sort/deep/reid
    url = https://github.com/KaiyangZhou/deep-person-reid
[submodule &quot;yolov7&quot;]
    path = yolov7
    url = https://github.com/WongKinYiu/yolov7
</code></pre>
<p>When running <code>git tag</code> I get the following:</p>
<pre class=""lang-bash prettyprint-override""><code>v.2.0
v1.0
v3.0
v4.0
v5.0
v6.0
yolov7
</code></pre>
<p>How do I get the latest release tag of a specific submodule? I know I can run <code>git submodule foreach</code> but how is it supposed to be used when you have multiple submodules?</p>
<p>For the specific case of Yolov7 for example I would like to see its latest release tag: <code>v0.1</code> (<a href=""https://github.com/WongKinYiu/yolov7/tags"" rel=""nofollow noreferrer"">https://github.com/WongKinYiu/yolov7/tags</a>) atm of writing this post</p>
","7","9506773","",""
"73263713","18207598","2022-08-06 22:39:12","0","64","<github><git-submodules><rebase><git-subtree>","How to rebase through a git add subtree?","<p>I have a repo called A that I have cloned and am developing on. I have done some development on this repo on my own branch and rebase from master branch to get the most recent version. I can resolve my conflicts relatively easy.</p>
<p>Later on I have added a repo B as a subtree in a folder in repo A's root directory, which relies on repo A. I have to do some development on B as well to match changes on repo A so I have added it as a subtree. I am making changes to both of these repos and doing the commits normally as I would without having a subtree, from root of repo A.</p>
<p>Now, I want to do 2 things.</p>
<ol>
<li>I want to rebase repo A, so that I can pull the most recent changes. I am trying <code>git rebase -i --rebase-merges master</code> after pulling new changes and am getting weird conflicts. Seems that the subtree is trying to commit changes to my root dir, as the repo B README gets dumped into the repo A README causing a conflict.</li>
<li>I want to also be able to rebase my subtree and get the new changes there as well.</li>
</ol>
<p>How do I go about managing this workflow?</p>
","0","18207598","",""
"73279323","9010063","2022-08-08 14:15:14","0","492","<git><git-submodules>","Add submodule to git repository but to specific commit","<p>I want to add a git repository as a submodule. But instead of using the most recent version of this external repository, I want a previous commit.
Using <code>git submodule add</code> adds the head of the repository, but it does not add the commit history. Therefore, I cannot checkout to a previous commit. How could I do that?</p>
","7","9010063","",""
"56529232","695498","2019-06-10 15:25:06","0","284","<git><git-submodules>","I don't understand git pull with submodules","<p>We have a repository with a submodule and I'm using SmartGit to pull update and it works perfectly.</p>
<p>My partner is trying to do the same from the command line:</p>
<blockquote>
<p>git pull --recurse-submodules</p>
</blockquote>
<p>and git returns:</p>
<pre><code>Fetching submodule xxx/yyy
Already up-to-date.
</code></pre>
<p>and the submodule is not updated.</p>
<p>When I look at smartgit, it doesn't update the submodules through a single command, but it issues two commands:</p>
<blockquote>
<p>~/Projects/xxx&gt; git fetch --progress --prune --recurse-submodules=no origin</p>
<p>~/Projects/xxx/yyy&gt; git fetch --progress --prune --recurse-submodules=no origin</p>
</blockquote>
<p>So it updates the main code AND the submodule separately.</p>
<p>How do get everything updated in a single command?</p>
","2","695498","",""
"67396099","4825376","2021-05-05 06:23:11","2","5722","<ios><xcode><git><git-submodules>","No url found for submodule path 'Pods' in .gitmodules","<p>I have added the Xcode project into the git repo. When I run the following command:</p>
<pre><code>$ git submodule init
</code></pre>
<p>I get the following error:</p>
<pre><code>fatal: No url found for submodule path 'Pods' in .gitmodules
</code></pre>
<p>I didn't add the 'Pods' submodules, it is added on its own?</p>
","0","4825376","0","0"
"31962185","2235045","2015-08-12 10:11:00","3","183","<git><git-submodules>","Tagging git submodules with release","<p>We have a project whereby we use a lot of submodules. When branching and tagging our release I would like to ensure that the submodules state is preserved with the branch and tag. So that if we need to build the release again we can ensure the submodule is the same version as what we originally used. What is the best way to do this?</p>

<p>Thanks</p>
","1","2235045","0","0"
"49799766","","2018-04-12 14:55:15","3","526","<git><configuration><git-submodules><core.autocrlf>","how to set git core.autocrlf for a submodule","<p>Is it possible to configure core.autocrlf=false for a specific submodule?
I do not have push access for the submodule, so I need to set it from outside.</p>
","0","","",""
"67445688","1692999","2021-05-08 08:47:59","0","52","<git><git-submodules><revert>","How can I restore many git submodules and tag the next version for release after reverting a parent repository?","<p>After reverting a repository state to yesterday's last commit (all commits today introduced too much instability), understadably all the submodules no longer point to commits made after their last tagged versions.</p>
<p>What is the correct way to tag the next release of these submodules?  I usually tag a version on the main branch for any module, but now that doesn't seem so straight forward.</p>
<p>Should I:</p>
<p>a)</p>
<ul>
<li>force each branch to point main at the previous commit?
git branch -f main 1258f0d0aae</li>
<li>and then tag another release?</li>
</ul>
<p>b)
Or would I have to go and find some other way to ensure the state of the main branch for each submodule has a new commit applied that correctly reverts the changes?  I have many many submodules, If this is what is required I don't know how to do it efficiently.</p>
<p>c)
Something else I haven't considered entirely?</p>
","0","1692999","",""
"67457356","9946668","2021-05-09 11:50:04","0","63","<git><git-submodules><git-checkout>","How to checkout between git branches while one has a directory and the other has a submodule under the same name and path?","<p>In a large git repo, I need to maintain an old branch that has a directory named NAME in its root dir. Somewhere along the way, git submodules were introduced to the project so that the directory became a submodule, and the submodule's name was defined NAME for consistency.</p>
<p>Now, when working on the current branch - NewBranchWithSubmodule, upon checkout to the old OldBranchWithDir, I get the following message:</p>
<pre><code>user$ git checkout OldBranchWithDir
error: The following untracked working tree files would be overwritten by checkout:
       NAME/file
Please move or remove them before you switch branches.
Aborting
</code></pre>
<p>I've read about similar issues here, but none of which solved the issue sufficiently enough.</p>
<p>what is the proper way to checkout or to maintain such condition? (assuming a rename or moving the dir isn't an option)</p>
<p>Thanks!</p>
","0","9946668","",""
"67457510","444644","2021-05-09 12:08:53","0","1314","<git><git-submodules><github-actions>","git submodule update --remote --merge yields fatal: Needed a single revision","<p>Suppose I have a <a href=""https://github.com/vvasuki/kAvyam"" rel=""nofollow noreferrer"">repo</a> with the following submodule structure:</p>
<pre><code>[submodule &quot;themes/sanskrit-documentation-theme-hugo&quot;]
    path = themes/sanskrit-documentation-theme-hugo
    url = https://github.com/sanskrit-coders/sanskrit-documentation-theme-hugo.git
    update = merge
[submodule &quot;content&quot;]
    path = content
    url = https://github.com/vvasuki/kAvyam.git
    branch = content
    update = merge
</code></pre>
<p>While checking out this repository in the cloud, I would like all the submodules to be updated to the latest commit from the respective remote branches.</p>
<p>In github actions, if I run (example <a href=""https://github.com/vvasuki/kAvyam/runs/2538762762?check_suite_focus=true"" rel=""nofollow noreferrer"">here</a> with <a href=""https://github.com/vvasuki/kAvyam/actions/runs/825176589/workflow"" rel=""nofollow noreferrer"">workflow file</a> ) <code>git submodule update --remote --merge</code> , I get this error <code>fatal: Needed a single revision</code> . What gives? Is there an alternative?</p>
<h2>Alternatives tried</h2>
<p><code>git submodule foreach &quot;(git checkout $(git config -f $toplevel/.gitmodules submodule.$name.branch || echo master); git pull)&amp;&quot;</code> - this works on my computer, but not in github actions (master branch is <a href=""https://github.com/vvasuki/kAvyam/runs/2538751544?check_suite_focus=true"" rel=""nofollow noreferrer"">wrongly checked out</a> for submodule content).</p>
","1","444644","",""
"67506054","749655","2021-05-12 14:53:36","0","51","<git><git-submodules>","Change GIT submodule URL for all git subrepos and commits","<p>I am switching all git repos (including the surepos referenced) to another server URL.
My issue is that the .gitmodules file which is part of the GIT repository is still pointing to the OLD URL.</p>
<p>I changed this for the most recent commit to point to the new URL, however every older branch (old releases and commits) are pointing to the OLD URL.</p>
<p>Is there a way to change the .gitmodules files to point to the correct URL for all commits / branches?</p>
<p>This is the closest i could find to solve the issue, however for me it didn't work:
<a href=""https://stackoverflow.com/questions/35902895/git-submodule-url-changed"">Git submodule url changed</a></p>
<p>This is an generic issue, I should not be the only one with it, right?</p>
<p>Thanks in advance for any feedback!</p>
","8","749655","",""
"67515686","8176989","2021-05-13 07:49:49","1","813","<git><git-submodules><git-lfs>","Init & update submodules with git-lfs include","<p>I'm making a test for Windows, so I want to restrict some lfs files that is not necessary in submodules.</p>
<p>When I try <code>git submodule update --init --recursive</code>, it pulls all lfs files.<br />
Running <code>git config lfs.fetchinclude &quot;*.lib&quot;</code> before update submodule doesn't pull any lfs files at all,<br />
and <code>git config lfs.fetchexclude &quot;*.a,*.so&quot;</code> before update submodule pulls all lfs files.</p>
<p>I don't want to specify a submodule to restrict lfs files, since it's not open to changes.<br />
How can I do this?</p>
","0","8176989","",""
"67582740","7012917","2021-05-18 08:39:04","0","55","<git><git-submodules>","What is the difference between these two git commands to update latest submodules?","<p><code>git pull --recurse-submodules</code></p>
<p>vs.</p>
<p><code>git submodule update --recursive --remote</code></p>
<p>I have seen these two been used in the same context when updating/pulling the latest submodules, but I can't find the difference between them and when to use which?</p>
","3","7012917","",""
"67588714","10734452","2021-05-18 14:52:12","1","286","<git><git-submodules>","how to remove git diff whitespace and indentation for submodule?","<p>I know how to remove spaces/indentation with git when doing a diff:</p>
<pre><code>git diff --color-moved-ws=ignore-space-at-eol,ignore-space-change,ignore-all-space &quot;$@&quot;

git diff --color-moved-ws=allow-indentation-change &quot;$@&quot;

git diff --word-diff=color &quot;$@&quot;
</code></pre>
<p>I also know how to do a submodule diff:</p>
<pre><code>git diff --submodule=diff  &quot;$@&quot;
</code></pre>
<p>but I'm not able to mix the two solutions.</p>
<p>Adding options in the previous commands does not change the output for the submodules' diff :</p>
<pre><code> git diff --submodule=diff --color-moved-ws=ignore-space-at-eol,ignore-space-change,ignore-all-space &quot;$@&quot;
</code></pre>
<p>What am I doing wrong?</p>
","1","10734452","",""
"32008155","2404855","2015-08-14 10:41:44","1","1179","<git><git-branch><git-submodules><git-clone>","git clone --recursive - submodules on no branch","<p>I have a git module called 'production' and inside a couple of submodules. When I use the following command: <code>git clone --recursive git@git_server:production</code> it's clonning the 'production' module with the submodules. When I <code>cd</code> in one of the submodule and give the following command: <code>git branch -a</code> I get:</p>

<pre><code>* (no branch)
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>The <code>.gitmodules</code> files contains:</p>

<pre><code>[submodule ""blabla""]
url = git@git_server:production/blabla
path = blabla
branch = refs/heads/master
...........................................
</code></pre>

<p>The question is: Why if I clone recursive the submodules are on the branch ""(no branch)"" and if I clone only the respective submodule is cloning directly on branch ""master""? Is there any way to change the configuration that when I clone recursive to clone directly all the submodule in branch ""master""?</p>
","0","2404855","0","0"
"67601674","2151275","2021-05-19 10:40:23","1","186","<git><git-submodules>","How to get name list for chaned files in specific git submodule?","<p>A parent git repo contains several submodules, and the folder structure as belowing:</p>
<pre><code>parent-dir
    src
    module-a
    module-b
    module-c
    module-spec
</code></pre>
<p>In one parent git commit, a submodule may have multi commits.
How to get all file names that changed in <code>module-spec</code> contains in a parent commit?</p>
<p><a href=""https://stackoverflow.com/questions/10757091/git-list-of-all-changed-files-including-those-in-submodules"">Found this question</a> but the answer do not work.</p>
","0","2151275","",""
"67610624","985292","2021-05-19 20:43:17","1","52","<git><git-submodules>","Cannot change/push .gitmodules file","<p>I create a repo &quot;main&quot;, containing a submodule &quot;sub0&quot;, containing a submodule &quot;sub1&quot;:</p>
<pre><code>mkdir sub0 &amp;&amp; cd sub0 &amp;&amp; git init &amp;&amp; touch README.md &amp;&amp; git add README.md &amp;&amp; git commit -am &quot;Initial&quot; &amp;&amp; cd ..
mkdir sub1 &amp;&amp; cd sub1 &amp;&amp; git init &amp;&amp; git submodule add ../sub0 sub0 &amp;&amp; git commit -am &quot;Initial&quot; &amp;&amp; cd ..
mkdir main &amp;&amp; cd main &amp;&amp; git init &amp;&amp; git submodule add ../sub1 sub1 &amp;&amp; git commit -am &quot;Initial&quot; &amp;&amp; cd ..
</code></pre>
<p>I also tried</p>
<pre><code>git submodule update --init --recursive
</code></pre>
<p>in <code>main</code>, but it makes not difference for the following issue.</p>
<p>Now, I got to <code>main/sub1/</code>, and make a change to the submodule configuration:</p>
<pre><code>git config submodule.sub0.update none
</code></pre>
<p>For some strange reason, this change ends up in <code>../.git/modules/sub1/config</code> instead of in <code>.gitmodules</code>. Now, how do I push this change? git shows me no modified files in any of the repos.</p>
","2","985292","",""
"14508529","412733","2013-01-24 18:47:04","4","2828","<git><git-submodules>","use git submodule with read-only access","<p>How to push changes in a git submodule where i have only read-only access.</p>

<p>My problem is when I try to do <code>git submodule update</code>. I get a <code>fatal: reference is not a tree</code> error</p>
","0","412733","0","0"
"67720901","5661749","2021-05-27 11:07:58","5","1967","<git><git-submodules><git-push>","How to push git submodule code together with main repo code","<p>I have a repo with a submodule in a /modules directory.</p>
<p>I now want to force push the whole repo content incl. the contents of /modules to another repo (used for deployment).</p>
<p>However, it seems that the contents of the target repo do not get updated when I have changes in the submodule. This is what I run to push the contents:</p>
<pre><code> - git pull
 - git submodule update --init --recursive
 - git push -f --recurse-submodules=on-demand https://example.com/deployment.git master
</code></pre>
","1","5661749","0","0"
"67725758","11305417","2021-05-27 15:54:09","1","643","<themes><git-submodules><hugo><github-pages-deploy-action>","Hugo website on github pages deployed through github actions is not working with custom theme","<p>I have a github repository [1] (named &quot;exo-cortex.github.io&quot; that I want to use to make a static website on github). In it there are the hugo source files. There is also a git submodule [2] for the theme &quot;archie&quot;, which I have forked, because I want to make some changes to it (i.e. KaTeX rendering of mathematical symbols).
Through the command &quot;hugo server&quot; I can view the website locally where everything looks fine.
Once I run the command</p>
<pre><code>hugo -t archie
</code></pre>
<p>hugo compiles the project into a static website in the folder &quot;public&quot; [3].</p>
<p>I learned that through github actions I can let github do the compilation and deployment for me. In fact I get some kind of website, although without the theme and without the content. I have tried many times and it does not work.</p>
<p>Are there some common pitfalls with my approach? Is there a better way?
For example I am thinking about working with 3 repositories [1-3] marked above. In this constellation I would have the main repo [1] under a different name (i.e. <em>not</em> exo-cortex.github.io) and 2 git submodules: [2] would stay as is and [3] (the folder &quot;public&quot;) would be a second git submodule with which I would push directly to my github pages website. This way I would have to build the site manually on my local computer.</p>
","1","11305417","",""
"67757517","10156846","2021-05-30 03:49:26","2","95","<git><git-submodules><git-clone>","Do I need to track .gitmodules file in git?","<p>Do I need to add or track <code>.gitmodules</code>? Or it is already being tracked internally by git?</p>
<p>I don't want to lose submodules when I make a new clone.</p>
<p>Usually my <code>git status</code> look like this:</p>
<pre><code>Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

    .gitmodules
</code></pre>
","2","10156846","0","0"
"67795503","6164883","2021-06-01 20:16:45","3","4859","<git><tags><git-submodules>","How to guarantee git submodule is checking out a specific tag?","<p>Here's my situation:</p>
<p>We're trying to convert a project we're working on to use submodules. Since we were testing before, the submodules were simply referring to the develop branch. Now I would like to convert all the modules to point from the develop branch to a specific release tag on the master branch. One of the modules also needed to have the remote URL changed so I followed <a href=""https://stackoverflow.com/questions/913701/how-to-change-the-remote-repository-for-a-git-submodule"">these</a> instructions to modify the .gitmodule file and update the remote url and branch; I even executed the comment that said I need to <code>git submodule update --init --recursive --remote</code> from the root level directory. Then I followed <a href=""https://stackoverflow.com/questions/1777854/how-can-i-specify-a-branch-tag-when-adding-a-git-submodule"">these</a> instructions, going into each submodule, checking out the respective release tag in each.</p>
<p>This seemed to work fine but when I ran <code>git status</code>, it complained about having a detached head (I suppose this is expected since I checked out the tag on the branch and not the actual branch itself). However, I then <code>git add</code>ed all submodules and committed to my local repo but have not yet pushed because I'm not actually sure the submodules are pointing the the desired tags.</p>
<p>So, how can I verify that when a coworker clones this project, it will pulls the submodules at the state referred to by the release tag I have hopefully set? I tried looking in the .gitmodule file hoping to see a &quot;tag&quot; value but nothing. I also checked the individual .git/module/sub_module_path/config files and see nothing in here as well.</p>
<p>How can I be sure the submodules will be cloned at the desired tag?</p>
","0","6164883","0","0"
"32059146","802281","2015-08-17 20:27:04","4","1555","<git><git-submodules><readonly>","is there a way to load non-editable/read-only git submodule?","<p>the git command ""submodule"" downloads the whole source of the project AND it is editable...</p>

<p>is there a way to make the submodule read only? </p>

<p>I just want to have one of my git projects to be dependent on another, maybe submodule is not the correct way? what is a better/correct way of accomplishing this?</p>
","0","802281","",""
"67823941","2899559","2021-06-03 15:04:26","0","196","<git><git-submodules>","git submodule init only repos in .gitmodules","<p>We have a (ok, multiple) superproject that has multiple submodules that are added at different points in the non-linear history. We also have some automated processes that need to run at different commits in the superproject. Our current process clones the superproject (if needed), checks out a commit (headless), and has to make sure the submodules are reset and cleaned to their correct state. The obvious method would be to use</p>
<pre><code>git submodule update --init --recursive
</code></pre>
<p>but due to the fact that the <code>.gitmodules</code> files reflect the submodules relevant for the given commits that often exits with a non-zero code with messages like:</p>
<blockquote>
<p>fatal: no submodule mapping found in .gitmodules for path 'whatever'</p>
</blockquote>
<p>The <a href=""https://git-scm.com/docs/git-submodule"" rel=""nofollow noreferrer"">documentation</a> for <code>update</code> seems to indicate that I shouldn't get that:</p>
<blockquote>
<p>Update the registered submodules to match what the superproject expects by cloning missing submodules, fetching missing commits in submodules and updating the working tree of the submodules.</p>
</blockquote>
<p>whereas the section about <code>foreach</code> mentions the <code>.gitmodules</code> file explicitly possibly indicating that I could sidestep the &quot;missing&quot; entry with thing like:</p>
<pre><code>git submodule foreach --recursive 'echo $sm_path'
</code></pre>
<p>but even there I get errors like:</p>
<blockquote>
<p>fatal: No url found for submodule path 'whatever' in .gitmodules</p>
</blockquote>
<h2>TL;DR</h2>
<p>How can I run a recursive <code>git submodule update --init</code> <strong>only</strong> on the submodules listed in the commits <code>.gitmodules</code> files?</p>
<p>Notes:</p>
<blockquote>
<pre><code>$ git --version  
git version 2.31.1.windows.1
</code></pre>
</blockquote>
","7","2899559","",""
"14546282","475624","2013-01-27 10:02:06","1","1944","<windows><git><git-submodules>","Is it possible to add a git submodule with recursive flag?","<p>I am adding a submodule to my project which contains another git repo.</p>

<p>To get the module I ran:</p>

<pre><code>git submodule add git://github.com/biakaveron/debug-toolbar.git modules/debug-toolbar
</code></pre>

<p>Then ran:</p>

<pre><code>git submodule update --init --recursive
</code></pre>

<p>Which generated this error:</p>

<pre><code>fatal: Not a git repository: ../../../../../../..//d/websites/project/.git/modules/modules/debug-toolbar/modules/vendor/firephp
Failed to recurse into submodule path 'modules/debug-toolbar'
</code></pre>

<p>I have run into similar problems before. Previously I just added the submodule and then re-cloned the project with the recursive flag (<code>git clone --recursive project.git</code>) which works. However it would be easier if I could get the submodule to pull in recursively in the first place. Is there a way to do this?</p>
","2","475624","0","0"
"32063911","5236109","2015-08-18 05:05:16","2","102","<github><ssh><git-submodules><git-commit><cd>","How do I perform these commands without getting errors? (git submodule, cd, git commit)","<p>I am a new user to command line. I have downloaded the repo, I do <code>git init</code> every time but still I get this error : </p>

<blockquote>
  <p>fatal : Not a git repostitory.. .git</p>
</blockquote>

<p>EDIT : It also says my repo is empty but I am sure that I did clone and init it!!</p>

<p>These are the commands I am trying -</p>

<pre><code>git submodule add -f -b REL1_25 https://github.com/wikimedia/mediawiki-extensions-CharInsert CharInsert

cd ../ &amp;&amp; git add .gitmodules extensions/CharInsert

git commit -m 'Add CharInsert' &amp;&amp; git push
</code></pre>
","0","5236109","0","0"
"67840579","16129952","2021-06-04 16:08:59","1","384","<git><digital-ocean><git-submodules>","Digital Ocean App Platform does not support relative submodules for GitHub","<p>I already asked <a href=""https://www.digitalocean.com/community/questions/app-platform-does-not-support-relative-submodules-for-github"" rel=""nofollow noreferrer"">this question</a> on the Digital Ocean community forum, but didn't get any reply.
So that's why I'm trying here.</p>
<p>I’m trying to create an app using a private GitHub repository that contains several submodules that are also private.
Because they are part of the same project, I’m using relative addressing.
For example:</p>
<p>&quot;../submodule.git&quot; instead of &quot;<a href=""https://github.com/Mindesk/submodule.git"" rel=""nofollow noreferrer"">https://github.com/Mindesk/submodule.git</a>&quot;.</p>
<p>However, while building the application, I stumbled upon the following error:</p>
<pre><code>=&gt; Cloning submodules
   warning: error cloning submodules: repository not found
</code></pre>
<p>For now, I’ve hardcoded the full &quot;<a href=""https://github.com/Mindesk/"" rel=""nofollow noreferrer"">https://github.com/Mindesk/</a>&quot; prefix, but I’d rather use the relative address (i.e. &quot;../&quot;).</p>
<p>Is this a known issue? And is there something I can do in order to support relative addressing?</p>
","0","16129952","",""
"67851704","1270076","2021-06-05 16:34:27","1","219","<git><git-branch><git-bash><git-submodules>","How to make git bash show branch name in submodules","<p>Git bash shows the branch name as</p>
<pre><code> (master)
</code></pre>
<p>But when using submodules, it now shows the hash and not the name, for example:</p>
<pre><code> ((445c03f...))
</code></pre>
<p>How can I make it show the name of the branch while inside a submodule?</p>
","3","1270076","",""
"14554878","446051","2013-01-28 03:04:17","2","121","<git><git-submodules>","Converting cloned git repositories into submodules","<p>I have a project which is a git repository, and inside that project I have some cloned git repositories.</p>

<p>The directory structure is like this.</p>

<pre><code>main-project
    -other_project (cloned git repository)
    -another_project (cloned git repository)
</code></pre>

<p>When I tried to clone main-project into another system, it only has empty directories for other_project and another_project.</p>

<p>I know that I should have used <code>git submodule</code> to add those repositories in the first place. Since I didn't, is there any way to fix the mess I've made ?</p>

<p>There are about 15 repositories inside (which should be submodules), so a way to ""bulk convert"" all those repositories into submodules would be greatly appreciated.</p>
","0","446051","0","0"
"49893450","7522982","2018-04-18 07:16:30","8","8486","<git><git-submodules><symlink>","git clone -c core.symlinks=true does not work","<p>I try to clone a repository with submodules and symlinks.
I'm on Windows 10 and clone onto an NTFS SSD.</p>

<p>I'm cloning with</p>

<p><code>$git clone -c core.symlinks=true --recurse-submodules -b develop git@example.com/my-project.git</code></p>

<p>When cloned, the config contains the line <code>symlinks = false</code> and the symlinks are not created. </p>

<p>I have to use</p>

<p><code>$git config core.symlinks true</code></p>

<p><code>$git reset --hard</code></p>

<p>after cloning to create the symlinks.</p>

<p>Why does it not work when cloning directly?</p>
","2","7522982","0","0"
"67928075","7159126","2021-06-10 20:30:23","1","349","<git><docker><ssh><github-actions><git-submodules>","Issues with ssh for github actions with private submodules","<p>I have a cmake action configured, for a c++ repo with some private submodules. The workflow is</p>
<pre class=""lang-yaml prettyprint-override""><code>name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
    container: user/image:latest

    steps:
    - uses: actions/checkout@v2
      with:
         submodules: true

    - name: Configure CMake
      with:
          run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}   
</code></pre>
<p>But it fails to clone private submodules:</p>
<pre><code>  remote: Repository not found.
  Error: fatal: repository 'https://github.com/user/submodule.git/' not found
  Error: fatal: clone of 'git@github.com:user/submodule.git' into submodule path '/__w/folder/external/submodule' failed
</code></pre>
<p>I tried using a <code>SSH_PRIVATE_KEY</code> as a secret for the private half of the ssh keypair. And the public key was added to the github user settings.</p>
<p>But then not even the main repo is being able to get cloned:</p>
<pre><code>Load key &quot;/__w/_temp/5103ef84-9e3f-4dbf-b26d-a8a7d959bbb1&quot;: invalid format
git@github.com: Permission denied (publickey).
Error: fatal: Could not read from remote repository.
</code></pre>
<p>I also tried to create a Personal Access Token for the docker build and pass it via a &quot;PAT&quot; secret:</p>
<pre class=""lang-yaml prettyprint-override""><code>    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT}}
</code></pre>
<p>With the PAT variable, the error becomes:</p>
<pre><code>Error: Input required and not supplied: token
</code></pre>
<p>Adding a <code>ssh-known-hosts: 'github.com'</code> also did not work.</p>
<p>Does anyone know what else can I try?</p>
","0","7159126","0","0"
"67960435","1102705","2021-06-13 16:28:53","1","110","<git><git-submodules>","Is it possible to inline the contents of a git submodule?","<p>I'd like to use git submodules to track subprojects. I'd also like to have the subprojects' code directly contained in the parent repo, for convenience. Is it possible to inline a submodule such that the parent repo contains a snapshot of the child repo's content at the submodule's commit?</p>
","3","1102705","",""
"67962129","13273250","2021-06-13 19:49:47","3","1201","<git><docker><visual-studio-code><git-submodules><vscode-devcontainer>","Visual Studio Code Dev Container points to wrong git repository directory","<p>I want to develop <code>frontend</code> app in an isolated container. To set it up, I have followed <a href=""https://code.visualstudio.com/docs/remote/containers"" rel=""nofollow noreferrer"">Developing inside a Container</a> document.</p>
<p>This is my project:</p>
<pre><code>├── .dockerignore
├── .git
│   └── foo
├── .gitignore
├── .gitmodules
├── backend
│   ├── .devcontainer.json
│   ├── .git
│   │   └── foo
│   ├── .gitignore
│   ├── Dockerfile.development
│   ├── Dockerfile.production
│   └── foo
├── docker-compose.development.yml
├── docker-compose.production.yml
├── docker-sync.yml
├── frontend
│   ├── .devcontainer.json        &lt;- Trying to run dev container with this one.
│   ├── .dockerignore
│   ├── .git
│   │   └── foo
│   ├── .gitignore
│   ├── Dockerfile.development
│   ├── Dockerfile.production
│   ├── foo
└── └── yarn.lock
</code></pre>
<p><strong>frontend/.devcontainer.json</strong></p>
<pre><code>{
    &quot;name&quot;: &quot;chat-app_frontend&quot;,
    &quot;dockerComposeFile&quot;: [&quot;../docker-compose.development.yml&quot;],
    &quot;service&quot;: &quot;frontend&quot;,
    &quot;shutdownAction&quot;: &quot;none&quot;,
    &quot;extensions&quot;: [&quot;dbaeumer.vscode-eslint&quot;],
    &quot;workspaceFolder&quot;: &quot;/app&quot;,
    &quot;settings&quot;: {
      &quot;git.path&quot;: &quot;/usr/bin/git&quot;,
    }
  }
</code></pre>
<p>The problem is that the IDE tries to open git repository from wrong directory. <strong>As a result, while being connected to the Dev Container, IDE Git tools tell me the repository can't be found.</strong></p>
<p><a href=""https://i.stack.imgur.com/nX2p5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nX2p5.png"" alt=""enter image description here"" /></a></p>
<p>Output -&gt; Git returns:</p>
<pre><code>Opening repository for path='/app' failed; ex=Failed to execute git {
  &quot;exitCode&quot;: 128,
  &quot;gitErrorCode&quot;: &quot;NotAGitRepository&quot;,
  &quot;gitCommand&quot;: &quot;rev-parse&quot;,
  &quot;stdout&quot;: &quot;&quot;,
  &quot;stderr&quot;: &quot;fatal: not a git repository: /app/../.git/modules/chat-frontend\n&quot;
</code></pre>
<p>I can see <code>.git</code> directory in the running container:</p>
<pre><code>23baa3d3982d:/app# find .git
.git
</code></pre>
","0","13273250","0","0"
"67967192","1264304","2021-06-14 08:38:42","-1","252","<git><git-submodules>","Commit .git folder from subfolder in git repository","<p>Below is structure of git repository which has another git repository initialized using <code>git init</code> in subfolder <code>dir</code>.</p>
<pre><code>$ tree -a -L 2 . 
.
├── .git
│   ├── HEAD
│   ├── config
│   ├── description
│   ├── hooks
│   ├── info
│   ├── objects
│   └── refs
└── dir
    └── .git
</code></pre>
<p>How to commit and push <code>.git</code> folder from the subfolder?</p>
<p>I tried running <code>git add dir/.git</code> and <code>git commit ..</code>, but nothing was commited as far as <code>git log</code> is concerned.</p>
<p>Repository inside <code>dir</code> is used in deployment by some tool which needs to clone/checkout changes from local git repository in <code>dir</code>.</p>
","3","1264304","",""
"14592583","1031417","2013-01-29 21:25:16","1","148","<git><git-submodules><repository>","git -submodules / repo - How to use commit and branch for a bunch of branches in separate modules?","<p>I have <a href=""http://source.android.com/source/using-repo.html"" rel=""nofollow""><code>repo</code></a> wrapper and about dozen different git repositories in it.</p>

<p>I would like to have one patch which I can apply/use later 
in the following manner:</p>

<p>I would like to perform this commands on all the changed submodules:</p>

<pre><code>git checkout -b all_sub_branch
git commit -a all_submodules
git format-patch all_submodules aaa.patch
git apply aaa.patch
</code></pre>
","0","1031417","0","0"
"49929938","2748513","2018-04-19 20:44:17","4","4499","<bash><git><git-submodules>","How to inject variables to git submodule foreach?","<p>I have 2 questions, (1) How to inject a variable into this <code>foreach</code> loop? in below example, <code>$user_branch</code> is not accessible in line 2.</p>

<pre><code>USER_BRANCH=""foo""
git submodule foreach -q --recursive 'branch=""$(git config -f $toplevel/.gitmodules submodule.$name.branch)""; [ ""$branch"" = """" ] &amp;&amp; git checkout $USER_BRANCH || git checkout $branch' –
</code></pre>

<p>(2) Is there a way to make this <code>foreach</code> into a regular loop?, something like:</p>

<pre><code>foreach $(git submodules --recursive); do
  #do something
  #more
  #and more
done
</code></pre>
","0","2748513","0","0"
"68066884","14378480","2021-06-21 11:10:03","1","39","<git><git-submodules>","add existing unversioned directory as git submodule in place (while avoiding moving and copying as much as possible)","<p>I'm trying to convert a unversioned subdirectory of a git project clone into a submodule.
The straightforward way would be to move it out, create a project and re-add this project as a submodule.
Is there a way to do this in place, e.g. avoid moving, copying locally and transferring most of the data again from the server?</p>
<p>Example:</p>
<p>I have a git project named &quot;test&quot; cloned to a directory &quot;test&quot;, where the only versioned file is readme.md. Hoewver, there's a huge subdirectory testsm which i'd like to create a git project &quot;testsm&quot; for and then add it as a submodule in the folder &quot;test/testsm&quot;.</p>
<pre><code>/test
/readme.md (versioned)
/testsm/* (yet unversioned)
</code></pre>
","0","14378480","",""
"15021096","673642","2013-02-22 09:43:14","3","1020","<git><git-submodules>","Is it possible to hard-link local git submodule repositories?","<p>We currently have a fairly large git repository with submodules (about 10GB), and cloning it from the server takes quite some time. I want to keep a local copy in our project directory and use it as the origin for builds. The project directory is stored on an NFS-mounted drive.</p>

<p>Git makes hard links to the original repository when cloning with --local or just /path/to/repo, but it does not seem to make hard links for the submodule repos. I would have expected</p>

<pre><code>git clone --local --recursive /path/to/origin mycopy
</code></pre>

<p>to create hard links for all repos. Can I tell git to use hard links for the submodules too?</p>
","6","673642","0","0"
"50253867","7784533","2018-05-09 12:50:12","0","18","<git><git-submodules><git-log>","git log doesn't show modified submodules of a commit","<p>With git, is it possible to show modified submodules of a commit when execute <code>git log</code> in a master repo managing submodule ?
I try differents values for --pretty and --submodule options but nothing works.</p>
","0","7784533","",""
"50254184","193506","2018-05-09 13:06:52","6","10817","<git><git-submodules><drupal-8>","git submodule and fetch","<p>having trouble getting my head around submodules</p>

<p>They appear to be unnecessarily complicated. Normally I totally avoid them but a project has forced me into this situation</p>

<p>So...</p>

<p>I have a git repo on our dev server with a submodule</p>

<pre><code>/myproject
          /.git
          /files ...
          /other
               /submodule
                         /.git
</code></pre>

<p>Now because we run a dev/prod environment we are very restricted in what we can do</p>

<p>How do I </p>

<ul>
<li>Clone the repo to prod such that the prod server is fully populated with the parent git and all the submodules checked out?</li>
<li>How do I then... 

<ul>
<li>update a file in other/submodule </li>
<li>commit it</li>
<li>fetch it to the cloned repo</li>
<li>then merge it in the cloned repo</li>
</ul></li>
</ul>

<p>We traditionally use a fetch then merge strategy rather than a single pull. Due to the very small size of the team we also do not use a bare repo.  </p>

<p>I have tried multiple different methods of achieving the above and none of it seems right. there seems to be a very large number of steps involved so I must be doing something wrong.</p>

<p>Also I do not want the fetch to the prod server to fetch from the submodules remote repo.</p>

<p>Just so you know the project I am working on is a drupal 8 project and it is entirely inappropriate to do dev on production we do not even install composer or drush.</p>
","2","193506","0","0"
"15124430","299262","2013-02-27 23:15:42","69","47613","<git><git-submodules>","How to checkout old git commit including all submodules recursively?","<p>I have a git repo with multiple submodules. One of those submodules has multiple submodules of it's own. All I'm looking to do is check out an old commit on the master repo and have it checkout the appropriate commits from all submodules to get the correct state of the code at that time.</p>

<p>I know that git contains the information necessary as the <code>ls-tree</code> command can tell me which commit each submodule was on. However, I have to manually check out each one, which is painfully time consuming.</p>

<p>I'm looking for something like <code>git checkout --recursive</code> but such a command doesn't seem to exist.</p>

<p>Is there anyway to do this?</p>
","1","299262","0","0"
"32435056","82410","2015-09-07 09:15:29","5","7195","<git><git-submodules>","How to change git submodule tracking remote branch?","<p>I add a submodule using following command</p>

<blockquote>
  <p>git submodule add -b br1 [repo]</p>
</blockquote>

<p>The .gitmodules file has entry branch=br1 . Now I want to switch the branch to br2. I can go into submodule folder and switch the branch but that does not update .gitmodules file.</p>

<p>How I can do that?</p>
","2","82410","",""
"15133949","1591992","2013-02-28 11:08:46","1","203","<git><github><git-submodules><git-tfs>","Getting a buildable git-tfs","<p>I am trying to modify <a href=""https://github.com/git-tfs/git-tfs"" rel=""nofollow"">git-tfs</a>. However, I cannot seem to get it built. </p>

<p>What I did: </p>

<pre><code>1. Read the readme which states for building: 
    1a. Update submodules. git submodule update to get the libgit2sharp dependencies.
    1b. Build with msbuild GitTfs.sln /p:Configuration=debug for the default debug build.
2. clone git-tfs: git clone git@github.com:git-tfs/git-tfs.git
3. git submodule update
</code></pre>

<p>However, the submodule update doesn't seem to do it's job - it doesn't fetch any sources.</p>

<p>What am I doing wrong?</p>
","0","1591992","",""
"15146163","175830","2013-02-28 21:40:32","6","682","<git><bash><git-submodules>","Programmatically get path to git directory in bash (including submodules)","<p>Is it possible to programmatically find the path to the .git directory including for submodules?</p>

<p>I'm trying to write a script that installs a git hook but I can't find a straightforward way to find the .git directory for the project. Ideally it should cover the following cases:</p>

<ol>
<li>In root directory of project</li>
<li>In sub-directory of project</li>
<li>In root directory of submodule within project</li>
<li>In sub-directory of submodule within project</li>
</ol>

<p>I could do all of this manually but I'd rather not parse the .git file of a submodule.</p>

<p>Edit: I'd be interested in a solution in python as well.</p>
","5","175830","",""
"15187507","914729","2013-03-03 15:59:57","1","116","<git><git-submodules>","Push git sumbodule to own remote repo","<p>I'm new to git, so I need your help.</p>

<p>I have project, and I'm added some third-party libraries to it from GitHub using <code>git submodule add</code>. I have modified some libraries depending on my needs. So how can I push that libraries with all the changes to my remote repo? Or what can I do to have all that libraries in my remote repo? thanks.</p>
","2","914729","",""
"50282837","177275","2018-05-10 23:22:31","6","2236","<git><github><git-submodules>","Using ssh vs https with github submodules","<p>I would like to set up a public GitHub repo with submodules.  GitHub offers two ways of connecting - <code>https:...</code> &amp; <code>git@...</code> protocols.  For the team working on the project, <code>git@...</code> is much easier to use because we all use proper ssh certificates. But for the casual user who is not a member of the team, <code>https:...</code> is the only option.  The git submodules require a full URL. </p>

<p>How can we set up repository submodules so that both the developers and casual contributors can use the system equally well?  Thanks!</p>
","2","177275","0","0"
"15279703","303270","2013-03-07 19:10:20","4","3257","<git><node.js><npm><git-submodules>","Using non-npm-package git submodules in npm packages","<p>How can I update <strong>non-npm-package</strong> <a href=""/questions/tagged/git-submodules"" class=""post-tag"" title=""show questions tagged &#39;git-submodules&#39;"" rel=""tag"">git-submodules</a> in my <a href=""/questions/tagged/npm"" class=""post-tag"" title=""show questions tagged &#39;npm&#39;"" rel=""tag"">npm</a> package before install?</p>

<p>I'm using git and have a node.js module that depends on an external project also hosted in a git repository. I added the external project as a submodule and now I'm trying to make an npm package.</p>

<p>Since the external dependency is not an npm package (nor a node module), I think I can't use <a href=""https://npmjs.org/api/submodule.html"" rel=""nofollow""><code>npm submodule</code></a> command, so I came up with <a href=""https://github.com/isaacs/octave-test/blob/master/package.json#L3"" rel=""nofollow"">this</a> preinstall script in <code>package.json</code> file:</p>

<pre><code>""scripts"": { ""preinstall"" : ""git submodule update --init""}
</code></pre>

<p>When I execute <code>npm install</code> in package directory, it works fine, but when I'm trying to install the package directly from my remote git repository or the tarball made with <code>npm pack</code>, I get the following error:</p>

<pre>
You need to run this command from the toplevel of the working tree.
</pre>

<p>I also tried (as the error message said):</p>

<pre><code>""scripts"": { ""preinstall"" : ""cd $(git rev-parse --show-toplevel) &amp;&amp; git submodule update --init""}
</code></pre>

<p>This one doesn't show any errors but also doesn't update the submodule in package directory.</p>

<p>Any help would be appreciated.</p>
","0","303270","",""
"15296896","583028","2013-03-08 14:59:15","4","778","<git><git-submodules>","How do you stop a user from committing to a submodule in git?","<p>Let's say you have a parent project and submodule.</p>

<p>There is a user who has read/write permission to the parent project but only read permission for the submodule.</p>

<p><strong>How do you stop the user from making a change to the submodule and committing it and then subsequently committing and pushing the updated reference to this new commit in the parent project?</strong></p>

<p>The user will not be able to push their changes to the submodule as they do not have permission. When another user now pulls down the parent project they will have a reference to a submodule commit that has not been pushed up to the server.</p>
","0","583028","0","0"
"68640021","16586742","2021-08-03 16:55:27","1","131","<git><version-control><git-submodules><git-add>","How do I tell git that I only want to add the current file content of a child repo, not the repo as a submodule","<p>If you clone a git repo inside of another git repo (e.g. to install code for a library or plugin into the parent repo) it appears impossible to add the file content of that directory to the parent repo as a simple commit of files, unless you delete or move the child repo's <code>.git</code> directory first.</p>
<p>You might want to instead add the repo as a submodule, in which case <code>git add submodule &lt;child_repo_url&gt; &lt;child_folder&gt;</code> will add it as two files:</p>
<pre><code>new file:   .gitmodules
new file:   child_folder
</code></pre>
<p>In which child_folder is not an actual folder, but a simple text file that contains a line like this:</p>
<pre><code>Subproject commit 3ddea2d9a36dbdbf02f9f1897b713704300b0c34
</code></pre>
<p>And the <code>.gitmodules</code> file contains the info about the repo, allowing git to later check out the exact same commit from that repo and so reconstruct all the files without actually adding them to the parent repo.</p>
<p>But, if you don't want that because you do want to simply add the files and just do <code>git add &lt;child_folder&gt;</code> instead you will see this message:</p>
<pre><code>warning: adding embedded git repository: child_folder
hint: You've added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint: 
hint:   git submodule add &lt;url&gt; child_folder
hint: 
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint: 
hint:   git rm --cached child_folder
hint: 
hint: See &quot;git help submodule&quot; for more information.
</code></pre>
<p>This sounds like it has done what I want, and is warning you in case you didn't want that to happen. But in fact, it hasn't added the files.</p>
<p>Instead it has added the same <code>child_folder</code> file as the <code>git submodule add</code>, but not the <code>.gitmodules</code> entry which seems like a necessary partner for it, and neither of the two commands it suggests will actually work now, because of the action that the command has just taken.</p>
<p>The <code>git submodule add</code> command would have worked, if the previous command hadn't already added something to the git index called <code>child_folder</code>, so the command fails with <code>'child_folder' already exists in the index</code>.</p>
<p>The second command I assume would work if the first command had done what I'd wanted, and allow you to undo that action, but instead it will say</p>
<pre><code>error: the following file has staged content different from both the
file and the HEAD:
    child_folder
</code></pre>
<p>So it seems at some point, what I want to happen was the default, and this error message was added to help people who had done it by mistake. Now, it appears impossible to do this with a single command, and the old help message is out of date and unhelpful.</p>
<p>Previously, you could avoid this behaviour by being careful about using, or not using, a final / when using <code>git add child_folder/</code> to get one behaviour or the other but at some point in git's history aronud version 1.6 this workaround appears to have stopped working and you now always get the behaviour I describe.</p>
<p>There seems to be no flags you can add to the command to specify that you know the subdirectory is a repo, and that you don't care. There is a flag        <code>--no-warn-embedded-repo</code> the help for which says:</p>
<blockquote>
<p>By default, git add will warn when adding an embedded repository
to the index without using git submodule add to create an entry
in .gitmodules. This option will suppress the warning (e.g., if
you are manually performing operations on submodules).</p>
</blockquote>
<p>If you ignore everything after the &quot;e.g.&quot; then it sounds exactly what I want. But if you include the e.g. then I don't know why you would want to manually update submodules that don't exist in .gitmodules. Either way, it doesn't help. It does suppress the warning, but the action it takes remains the same.</p>
<p>My current workaround is to delete or move the .git folder from the child repo to a different location before performing the git add, but it seems like this should be a possible option to have as a preference setting or command line flag, or indeed be the default behaviour with the existing warning message as help for those who don't want that, and the existing flag for people who know that they're doing something that throws a warning, and don't care.</p>
<p>Am I missing a git command or option that would do what I want or is this just a bug in git?</p>
","1","16586742","",""
"68643391","8306746","2021-08-03 22:24:49","0","77","<php><git><.htaccess><scope><git-submodules>","Converting my custom PHP framework in git submodule for every project","<p>I developed throughout the times my personal PHP Framework. It has some folders (in the root) and everything else is part of every web project.</p>
<p>I have more git projects. And, when I develop new features in framework folders, I have to manually update the frameworks of the others web projects.</p>
<p><strong>How can I have the framework in one single place (a git project on its own) and easily update every web project's framework?</strong></p>
<p>I've heard about submodules and subtrees. Submodules sound a good solution because I can develop new features in framework, when working to a specific web project. And after that I commit and push my submodule so all the others git web projects' frameworks can pull new commits.</p>
<p>Is it the best solution?</p>
<p><strong>My struggle:</strong></p>
<p>But submodules require having project in one subdirectory. For now, my framework has a <code>.htaccess</code> file in root which sends all requests to <code>web.php</code> (located also in root of web project). And <code>web.php</code> includes other necessary php files.</p>
<p>The good part is all php files has root as the scope (same scope as <code>web.php</code>).</p>
<p>How can I move all my framework files (including <code>.htaccess</code> and <code>web.php</code>) in a subdirectory (so could be easily treat as a submodule) and also having root scope for all my php files?</p>
","4","8306746","",""
"68643948","11483682","2021-08-03 23:56:32","0","4120","<reactjs><git><github><git-submodules><glitch-framework>","How do I commit/push my build folder into another git repository and not into the main repository?","<p>So, I've recently made a React app which I have posted on GitHub. However, I would like to post the output (<code>build</code> folder after I run <code>npm run build</code>) to a Glitch application. Since all Glitch applications have a <code>git</code> repository, I thought that would be the best way to go about doing this. Here is my desired structure:</p>
<ul>
<li>My main <code>git</code> repo, which pushes to GitHub. <strong>This repository ignores the <code>build</code> folder.</strong></li>
<li>Another &quot;sub&quot; <code>git</code> repository, which only pushes the contents of <code>build</code> to Glitch.</li>
</ul>
<p>I've seen people using submodules, but I can't figure out how to make my main <code>git</code> repo ignore the <code>build</code> folder and have the submodule just push the <code>build</code> folder.</p>
<p>I'm also confused on how to setup a submodule in general, so an example/explanation for that as well would be appreciated.</p>
<p>~ Ayush</p>
","0","11483682","",""
"68951024","8335629","2021-08-27 09:22:50","0","133","<git><git-submodules><git-commit>","How to make the parent git folder always point to latest commit whenever there is a new commit in child module(submodule) - Any Alternative?","<p>Every time I push a commit to the submodule I need to update the parent repo to the latest commit in the submodule. Is there any automatic way to do that in the remote?</p>
<p>I understood that there is no way directly I can achieve this, but cCan someone suggest an alternate for git submodules? I just saw git-tree, google repo tools but not sure how to change my current setup to use those?</p>
","6","8335629","",""
"16841765","2386548","2013-05-30 16:49:59","4","2222","<ruby-on-rails><git><git-submodules><formwizard>","completely remove a git submodule which is causing a fatal error after repo rename","<p>I have an old project (RAILS) I'm trying to get up and running again. I (probably stupidly, but too late now) renamed the repo for various reasons (using gem 'rename' + changing github..etc).</p>

<p>There appears to be a submodule attached to the project, (related to a minor change that was hacked onto formwizard) that is refusing to play ball. I've tried just about every approach I can find, but I just can't get rid of it. </p>

<p>Currently if I try <code>git submodule init</code> I get:</p>

<pre><code>    No submodule mapping found in .gitmodules for path 'public/javascripts/formwizard'
</code></pre>

<p>In order to get that far I had to clone an old version of the repo to it's original position.</p>

<p>Otherwise I get </p>

<pre><code>    fatal: Not a git repository at $path_inc_old_project_name
</code></pre>

<p>I just want this thing to go away and stop being linked to my main repo. Nothing i do seems to work</p>

<p><a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"">This</a> solution fails as <code>submodule deinit</code> isn't recognised (have upgraded to latest install of git using homebrew).</p>

<p><code>git rm --cached path_to_submodule</code></p>

<p>Just returns </p>

<p><code>fatal: 'path_to_submodule' is outside repository</code>
i.e. the path you need is outside the repository</p>

<p>I know that, that's why I'm trying to get rid of the damn thing...</p>

<p>I've tried removing every reference to the old project name with a find replace, but the git repo still seems to know where to look for this submodule.</p>

<p>How can I tell git to just forget about this submodule...? (or in fact, all submodules as this is the only one I have)</p>
","1","2386548","",""
"33421431","498624","2015-10-29 17:58:21","7","3470","<git><recursion><git-submodules>","What is the difference between ""git submodule foreach git pull origin master"" and ""git pull origin master --recurse-submodules""","<p>I have a dotfiles repository where all my vim plugins are stored as submodules so they are easy to update when they have changes. I thought these two commands did the same thing, but I noticed this must not be the case.</p>

<p>I knew I had updates to pull down in several submodules so I ran <code>git pull origin master --recurse-submodules</code> from the root of the parent repository. It appeared to iterate over each submodule, but only fetch updates from their origin repositories.</p>

<p>When I ran <code>git submodule foreach git pull origin master</code> then it actually ran <code>git pull origin master</code> within each repository, doing both the fetch and the merge.</p>

<p>What is the point of using <code>--recurse-submodules</code>? I'm a little confused about what it's actually trying to do and Google was a bit cryptic with what I found. I thought maybe you smart folks would have a simpler explanation.</p>
","0","498624","0","0"
"16896000","","2013-06-03 11:48:16","0","1202","<git><git-submodules>","git submodule update seems to timeout with no error","<p>I am trying to update git modules, sometimes it works and the modules download, sometimes it seems to timeout and it sits on the same percentage all day! (No error thrown)</p>

<p>Have I missed something in my search for an answer?</p>

<pre><code>git clone https://github.com/biometrics/openbr.git
git submodule init
git submodule update
</code></pre>
","2","","",""
"33468285","1078529","2015-11-01 23:10:04","14","1801","<git><commit><git-submodules><commit-message>","How to write git commit messages for submodule updates?","<p>I always struggle to write good git commit messages for commits which did nothing except update which commit a submodule is on. What I really want to write is ""just read the freaking submodule commit messages!"" </p>

<p>Perhaps a slightly nicer solution is, does there exist something which goes to the submodule and concatenates all of the messages since the previous commit it was on in some nice fashion and automatically makes <em>that</em> the message?</p>
","0","1078529","0","0"
"33501985","","2015-11-03 14:47:25","1","482","<git><git-submodules>","Should we be using git submodule?","<p>How handy would <code>git submodule</code> come into a collaborating project? If I have a project that contains multiple separate works in different repositories, it sounds logical to use submodule. However, I have read there are certain drawbacks, including how difficult it is when it comes to merging. </p>

<p>So can anyone who has experience using submodule please give me some feedbacks?</p>

<p>Many thanks,</p>
","3","","",""
"16951165","334493","2013-06-05 22:51:11","3","1251","<git><git-submodules>","How to push commits from changes made to a submodule into main git repo?","<p>I have decided to switch from SVN to git for my app repository.</p>

<p>My repo structure is like this:</p>

<pre><code>~/AndroidStudioProjects/MyMine $ tree -L 1
.
├── ActionBarSherlock
├── Android-Universal-Image-Loader
├── Android-ViewPagerIndicator
├── Crouton
├── ListViewAnimations
├── MyMine
├── SlidingMenu
├── aFileChooser
├── drag-sort-listview
└── out

10 directories, 0 files
</code></pre>

<p>As you can see, I have plenty of libraries, and the core of my app is in the <code>MyMine</code> folder.</p>

<p>I have added the libraries as git submodules:</p>

<pre><code>~/AndroidStudioProjects/MyMine $ cat .gitmodules
[submodule ""ActionBarSherlock""]
    path = ActionBarSherlock
    url = https://github.com/JakeWharton/ActionBarSherlock.git
[submodule ""Android-Universal-Image-Loader""]
    path = Android-Universal-Image-Loader
    url = https://github.com/nostra13/Android-Universal-Image-Loader.git
[submodule ""Android-ViewPagerIndicator""]
    path = Android-ViewPagerIndicator
    url = https://github.com/JakeWharton/Android-ViewPagerIndicator.git
[submodule ""Crouton""]
    path = Crouton
    url = https://github.com/keyboardsurfer/Crouton.git
[submodule ""drag-sort-listview""]
    path = drag-sort-listview
    url = https://github.com/bauerca/drag-sort-listview.git
[submodule ""ListViewAnimations""]
    path = ListViewAnimations
    url = https://github.com/nhaarman/ListViewAnimations.git
[submodule ""SlidingMenu""]
    path = SlidingMenu
    url = https://github.com/jfeinstein10/SlidingMenu.git
[submodule ""aFileChooser""]
    path = aFileChooser
    url = https://github.com/iPaulPro/aFileChooser.git
</code></pre>

<p>Now, let's say I make changes to one of the libraries/submodules. But I don't want to push those changes to their origin, because:</p>

<ul>
<li>the author may/will decline my commits</li>
<li>my changes are only relevant to me</li>
<li>my changes are only one-line modifications that adapt the code so that it compiles inside my project</li>
</ul>

<p>However, what I <em>do</em> want is to push my commits (made to those submodules) to my project's origin. This is because those changes are necessary for compiling my project. So I want them to be in the repo if I decide for example to clone the full repo to a new development machine. Or if a new guy comes to the team and needs to setup its development machine.</p>

<p>So, then, I have committed the modifications made to one of the libraries. Then, I committed the corresponding submodule to my repository, and pushed it to the origin.</p>

<p>The problem is that on the origin (of my server), the submodule projects points to a wrong snapshot, because that snapshot is only existing on my local repo, and not on origin's. And I can't push that, because git would try to push the commits to the submodule's origin, which is not my project's origin.</p>

<p>How can I commit changes made to a submodule, and have those changes available from my main repository? All of that without pushing the submodule to its origin?</p>

<p>I apologize if the terminology or the methods I use seem dumb or aren't appropriate. As I said, I'm trying to switch to git, and even if I spent some time reading a git book, I may have misunderstood some of the processes or vocabulary.</p>
","0","334493","0","0"
"17982587","96683","2013-07-31 23:13:03","2","2149","<git><git-submodules>","git: stop warning me about changes in submodule","<p>I have a git submodule which is constantly showing ""modified"" in git status even though I never update it.</p>

<pre><code># On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   MKNetworkKit (new commits, untracked content)
#
</code></pre>

<p>How do I stop git from thinking about it?  I tried adding MKNetworkKit to .gitignore but it doesn't do anything.</p>
","2","96683","0","0"
"17994930","414037","2013-08-01 13:06:59","3","1537","<git><conflict><git-submodules><git-rebase>","git submodule conflicts during rebase causes commit to disappear","<p>I have this following scenario that keeps coming back:</p>

<ol>
<li>I commit a change in some files, along with an update to a submodule.</li>
<li>Someone else commits and pushes an update to the same submodule.</li>
<li><code>git pull --rebase</code>, I get a conflict</li>
<li>I fix the conflict by adding the latest version of the submodule.</li>
<li><strong>THE PROBLEM:</strong> Now, instead of the commit I made at step #1, I have a commit with ONLY the update to the submodule, without the other file changes.</li>
</ol>

<p>I always fix this by either aborting rebase and using pull --no-rebase, or by cherry-picking the commit before rebase from the reflog.</p>

<p>There must be a better way.</p>

<p>Is there a good workaround for this common buggy scenario?</p>
","5","414037","",""
"50866230","8223979","2018-06-14 21:31:02","1","1373","<git><github><command-line><git-submodules>","How to use git submodules","<p>I have a ./gitmodules file which looks like this:</p>

<pre><code>[submodule ""external/mpifx/origin""]
           path = external/mpifx/origin
           url = https://github.com/dftbplus/mpifx.git
[submodule ""external/scalapackfx/origin""]
           path = external/scalapackfx/origin
           url = https://github.com/dftbplus/scalapackfx.git
</code></pre>

<p>How can I pull all of this submodules from the command line?</p>
","3","8223979","",""
"34562333","584121","2016-01-02 03:34:26","30","8490","<git><git-submodules>","Is there a way to `git submodule add` a repo *without* cloning it?","<p>I have a very long list of repos that I'm trying to make into one parent repo by making them all submodules. </p>

<p>I've tried adding them to <code>.gitmodules</code> manually, and also to <code>.git/config</code>, but it doesn't seem to work. </p>

<p>I've also tried running <code>git submodule sync</code> and <code>git submodule update --init</code>, etc, but with no luck. </p>

<p>Is there a way to trick git into thinking my project has all its (~30K) submodules, without actually needing to clone them all?</p>
","5","584121","0","0"
"51538747","8260406","2018-07-26 12:21:35","0","180","<bash><git><git-submodules>","How to create snapshot functionality using git submodules?","<p>I am working in a project, where the <a href=""https://source.android.com/setup/develop/repo"" rel=""nofollow noreferrer"">repo</a> tool is no longer used in the project, thus the current snapshot functionality is now meaningless. However, the same functionality can be achieved using <em>git submodules</em>.</p>

<p>I want to come up with a script which basically does this. I have not worked with git submodules. I would appreciate if someone could help me with the workflow. </p>

<p>Thanks in advance! </p>
","2","8260406","",""
"51554039","5084344","2018-07-27 08:35:47","1","47","<git><scripting><hook><git-submodules><gogs>","update git submodule when submodule is changed","<p>i currently want to improve my workflow with git. I run a Gogs server on which there are several repos. One repo is software, the others are language files or translations. </p>

<p>Since the translators are not allowed to see the source code for internal reasons, I decided to include each language as submodules. </p>

<p>This works very well, it's very complicated only for me. I thought that as admin of the Gogs Server I might have the ""power"" to install a hook that automatically changes the submodules when there are new translations in them. I would be able to integrate the submodules into the different repos. The changes of the language files may be transferred directly from the submodule master to the master.</p>

<p>I'm afraid I have no experience with that. Could someone help me please.</p>
","0","5084344","",""
"51576993","2085899","2018-07-29 03:38:09","1","199","<git><git-submodules>","Having both local and remote git repositories at the same time with different files included","<p>I need a local repository for tracking my changes and a remote repository containing just some of these files.</p>

<p>I added a parent directory to the project to initialize a local repository and initialized another git in the project dir as another remote repository  and published it to GitHub.</p>

<p>.gitignore file of parent repo is empty but .gitignore in child excludes all fies except some specific ones. <strong>Parent repository should not use .gitignore file of the child repo.</strong></p>

<p><strong>I need local repository to track all files and a remote repository to track just some of them.</strong> The problem is that parent repository does not include anything inside the project. </p>

<p>I tried <a href=""https://stackoverflow.com/questions/1811730/how-do-i-work-with-a-git-repository-within-another-repository"">this submodule solution</a> but it creates a new folder for new repository instead of using existing one.</p>

<p>This is output of git add -A for parent repository:</p>

<pre><code> git add -A
warning: adding embedded git repository: Part Project Manager
hint: You've added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint:
hint:   git submodule add &lt;url&gt; Part Project Manager
hint:
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint:
hint:   git rm --cached Part Project Manager
hint:
hint: See ""git help submodule"" for more information.
</code></pre>
","2","2085899","",""
"51675737","6865355","2018-08-03 15:21:46","1","362","<git><jenkins><git-submodules>","Recursively stage all git-submodule reference updates","<p>I'm working on getting Jenkins to play nice with git submodules. The current process is to pull the parent repo and the submodule, do the builds, bump the version, stage a bunch of changes, tag the repos, commit and push.</p>

<p>I'm adding an option to update the submodule reference, and that seems to also be working fine (after adding tracking branch info to the .gitmodules file). However, I am not having much luck in automatically (or, maybe recursively) staging all tracking branch reference updates into a commit.</p>

<p>So, in order to stage the reference change, I would need to do a <code>git add /path/to/sub</code>. This might become a problem if/when additional submodules are tracked, esepcially when I'm trying to have the stage/commit/tag operation as a Jenkins global library function.</p>

<p>To be clear, I am not trying to commit the <strong>changes made inside the submodule</strong>, but rather the <strong>change to parent repo's reference to the submodule sha</strong>.</p>

<p>I'm not sure if such a command already exsits, but I haven't been able to find it. I am envisioning something along the lines of <code>git add --submodule-paths</code>. I feel like it can be done by iterating over the submodules with <code>git submodule foreach</code> and then doing something, but after a few hours I haven't come up with anything.</p>

<p>Is there a good way to do this?!</p>
","0","6865355","0","0"
"51698171","10183900","2018-08-05 20:51:29","2","97","<git><tags><size><branch><git-submodules>","git submodule shallow downloads everything","<p>I have recently migrated two directories of our svn repository to our locally hosted gitlab. One is a single application (let's call it app1), with linear history and ""few"" commits (under 100). </p>

<p>But the second one is ""core"", with very long history, lots of commits and about 10 tags.</p>

<p>While using svn, I have just downloaded the whole repository, where i had
/apps/app1/ and /apps/shared/core/, and I have just linked from my app to ../shared/core/tags/tag20160101. </p>

<p>Now, I want to use git to save time and space. I have migrated both ""app1"" and ""core"" succesfully to gitlab using svn2git. I deleted both local repositories that I have used to migrate, and cloned ""app1"", and executed</p>

<pre><code>git submodule add ../core.git submodules/core --depth=1 -b tag20160101
</code></pre>

<p>Now the problem is, that while the submodules/core directory is about 300MB in size (just the size of 20160101 tag), the .git directory in main repository bumped out to 4GB. It just downloaded everything.</p>

<p>Did I do something wrong or is there a way to download only the useful tag to save space? </p>

<p>There may be a time when I am working on 5 different projects, each including ""core"" on different tag, and I do not want to download 4GB of not needed files for each project.</p>
","3","10183900","0","0"
"69651701","17204829","2021-10-20 19:03:54","1","1116","<git><git-submodules><githooks>","Add pre commit hook to submodule from parent module's .git","<p>So I have a project with a submodule that gets updated every once in awhile. I have some rules for commits that I try to follow and one of them is to include the branchname in the commit. I accomplish this with githooks as follows:</p>
<p>From top level directory</p>
<p><strong>.git/hooks/prepare-commit-msg</strong></p>
<pre><code>#!/bin/sh

BRANCH=`git branch | grep '^\*' | cut -b3-`
FILE=`cat &quot;$1&quot;`
echo &quot;$BRANCH $FILE&quot; &gt; &quot;$1&quot;
</code></pre>
<p><strong>.git/hooks/pre-commit</strong></p>
<pre><code>#!/bin/bash

find vendor -name &quot;.git*&quot; -type d | while read i
do
        if [ -d &quot;$i&quot; ]; then
                DIR=`dirname $i`
                rm -fR $i
                git rm -r --cached $DIR &gt; /dev/null 2&gt;&amp;1
                git add $DIR &gt; /dev/null 2&gt;&amp;1
        fi
done
</code></pre>
<p>Then I just set permissions
sudo chmod 755 .git/hooks/prepare-commit-msg
sudo chmod 755 .git/hooks/pre-commit</p>
<p>However, this does not work for the submodule as it does not have the .git directory. Is there a way to force the submodule to use the hook from the parent directory? If I open the submodule independently I can make it work however, it's alot more practical to keep it under the parent as it keeps stuff organized.</p>
","4","17204829","",""
"51726506","3844774","2018-08-07 12:11:38","3","1215","<python><git><python-sphinx><git-submodules>","How do I structure a ""sphinx"" documentation git repo to document other repos as submodules?","<p>I have multiple git repos that make up a larger library.</p>

<p>I want to create a ""sphinx"" documentation repo that references the other repos as submodules, and build the documentation in the ""sphinx"" repo. The sphinx repo documentation tree will be published as the documentation for the larger library. It will be regenerated whenever any of the constituent repos are updated.</p>

<p>I'm also using the autodoc and napoleon extensions.</p>

<p>I have a shell script that walks through the submodules running sphinx-apidoc, then runs make html in the top directory:</p>

<pre><code>SPHINX_APIDOC_OPTIONS='members,undoc-members,inherited-members,show-inheritance'

for dir in `find * -type d | egrep -v ""(^_)|(^\.)""`; do
    sphinx-apidoc -f -e -a -o _build/docs/${dir} ${dir};
done

make html
</code></pre>

<p>The top level index.rst file:</p>

<pre><code>.. toctree::
   :maxdepth: 1
   :caption: Contents:

   _build/docs/module1/modules.rst
   _build/docs/module2/modules.rst
</code></pre>

<p>(The submodules don't have index.rst files.)</p>

<p>The submodules only get linked in shallowly, so class folders in a submodule don't show up. I've tried variations, but each one is flawed in a different way. </p>

<p>Does someone have a simple example how to put this together? Surely I'm missing something fundamental?</p>

<p><strong>Update</strong>: Added screenshot of first page.</p>

<p>Requirement: Create a Sphinx ""project"" folder, including any build scripts and index.rst files, with softlinks to local git project folders, so that all of the documentation of all linked projects can be stitched together automatically in one place? The built documentation folder can then be published, such as to AWS S3, as part of the automated build flow.</p>

<p><a href=""https://i.stack.imgur.com/WhZss.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WhZss.png"" alt=""Current first page""></a></p>
","4","3844774","",""
"51726725","4241431","2018-08-07 12:22:57","2","303","<git><git-submodules><git-checkout>","git checkout version including submodules","<p>How can I checkout a git repo including its submodules?</p>

<p>e.g. I have a repo A, with a submodule B, the commit history is as follows:</p>

<ul>
<li>f7fe0a4 A, bcbaec2 B (latest)</li>
<li>206c8dd A, bcbaec2 B</li>
<li>0fd667c A, bcbaec2 B </li>
<li>0ec21a1 A, e79fea0 B (older version)</li>
</ul>

<p>I want to temporarily go back to an older version of A, so I stashed local changes in A and B, then <code>git checkout 0ec21a1</code></p>

<p>But Im still on the latest version of the submodule. I expected the submodule to updated according to the parent version. My understanding from this question, <a href=""https://stackoverflow.com/questions/1777854/git-submodules-specify-a-branch-tag"">submodule tag</a> is that git does not manage submodules when you checkout the parent, is this correct?</p>

<p>My real commit history is more complicated and there are several submodules. Is there a way to determine what version of submodule B was used in commit xxx of A? I can get approximate versions by comparing the git logs but it's rather painful...</p>
","2","4241431","",""
"35750570","1159005","2016-03-02 14:51:55","1","1567","<python><git-submodules><python-import>","Importing from a git sub-module (ImportError)","<p>I get an <code>ImportError</code> when I am importing from a sub-module in the way I thought One Was Supposed To Do It.</p>

<p>I have the following package:</p>

<pre><code>pkg/
  __init__.py
  cow.py
  pizza.py
  pkg.py
  components/
    components.py
    otherstuff.py
    __init__.py
</code></pre>

<p>cow.py:</p>

<pre><code>print ""Hello""
from components import foodle
</code></pre>

<p>components.py:</p>

<pre><code>foodle=5
</code></pre>

<p>and the <code>__init__</code>'s are empty.</p>

<p>I am having trouble putting things in the right place or organizing them properly.  When, from the pkg directory, I try</p>

<pre><code>from pkg import foodle
</code></pre>

<p>I get ""ImportError: cannot import name foodle""</p>

<p>What is the right way to arrange files and import from submodules?  I have read <a href=""https://stackoverflow.com/questions/29746958/how-to-import-python-file-from-git-submodule"">How to import python file from git submodule</a> ;  I have tried messing with <code>sys.path</code> in <code>components/__init__.py</code> and in <code>cow.py</code>, to no avail.
This package is shared on git, so it needs to be portable. <code>components</code> is actually a git sub-module.</p>

<p>Putting <code>from components import *</code> in the <code>__init__py</code> in components/ seems to work, but I thought usually that file stays empty.</p>
","0","1159005","",""
"51755069","888469","2018-08-08 20:23:31","6","3565","<git><git-submodules>","how to clone git repository with submodules without asking for password for every subrepository","<p>I'm recently put a repository into bitbucket. And this repository has some submodules</p>

<p>I'm working on a Initialization script. I would like to clone the main directory and them pull all subdirectories.</p>

<pre><code> git clone https://bitbucket.org/#####/main.git elastic --recurse-submodules
</code></pre>

<p>this prompts me for the user and password. </p>

<pre><code>Username for 'https://bitbucket.org': myuser 
Password for 'https://myuser@bitbucket.org': 
</code></pre>

<p>and them it asks me again for every submodule</p>

<pre><code>Username for 'https://bitbucket.org':  
...
</code></pre>

<p>My .gitmodules file is like:</p>

<pre><code>[submodule ""api""]
     path = app/api/
     url = git@bitbucket.org/###/api.git
     branch = master
[submodule ""front""]
     path = app/front
     url = git@bitbucket.org/###/front.git
     branch = master
[submodule ""app/config""]
     path = app/config
     url = git@bitbucket.org/###/config.git
     branch = master

... some few more repositories
</code></pre>

<p>How can I clone the main repository and them use the same credentials to all childs repositories?</p>

<p>I'm using AWS AMI Linux.</p>
","2","888469","0","0"
"53319225","10077582","2018-11-15 12:10:45","0","27","<git><git-submodules>","git submodules. Detached state vs master","<p>Lets say i have two repos R1 and R2 which are using one common submodule.</p>

<p>When time comes to build any of them, i see two possible ways</p>

<ul>
<li>Keeping submodule in detached state on a specific commit </li>
<li>Always updating it to latest change using $git pull</li>
</ul>

<p>Which practice is the best and most safe?</p>

<p>Thanks!</p>
","0","10077582","",""
"37262391","3719459","2016-05-16 20:07:18","0","111","<python-sphinx><git-submodules><read-the-docs>","RTD compiles all my docs including foreign docs from git submodules","<p>I'm experimenting with <a href=""http://www.sphinx-doc.org/"" rel=""nofollow"">Sphinx</a> and <a href=""http://readthedocs.org/"" rel=""nofollow"">ReadTheDocs</a> (RTD) to compile my documentation on every GitHub push. Unfortunately, RTD found multiple <code>doc</code>/<code>docs</code> folders containing a <code>conf.py</code> file.</p>

<p>My <a href=""https://github.com/VLSI-EDA/PoC"" rel=""nofollow"">repository</a> uses git sub-modules to embed third party libraries. Some of them are also documented using Sphinx. I assume the biggest (long lasting documentation build) wins and overwrites all static HTML pages in the final RTD view.</p>

<p>How can I exclude or tell RTD to ignore the folders of these sub-modules:</p>

<pre><code>lib/cocotb
lib/osvvm
lib/vunit
docs/source/_themes/sphinx_rtd_theme
</code></pre>

<p>My documentation is located here:</p>

<pre><code>docs/source/conf.py
docs/source/index.rst
</code></pre>

<p>As far as I have found, RTD does support <code>*.yml</code> files, but there is no entry to define the documentation root folder.</p>

<p>Any ideas to solve my problem?</p>
","0","3719459","",""
"37379018","1307609","2016-05-22 19:57:07","1","115","<git><git-submodules><git-remote>","Maintain git remote to a subdirectory","<p>I have a Git repository with the following structure:</p>

<pre><code>src/
    .git/
    Api/
    Web/
</code></pre>

<p>I want to clone another repository to the Web directory and pulling new changes from a remote to Web later from time to time. But I also want to modify the files under <code>/Web</code> and push every change that I made to my main remote.
I don't want to push anything to the Web's remote, just to the main one.</p>

<p>If I pull the changes from the Web remote, I'd like to see the changes that I pulled in the main history.</p>

<p>Can I use git submodules in this scenario?</p>

<p>The <a href=""https://git-scm.com/docs/git-submodule"" rel=""nofollow"">docs</a> says that <code>""The other repository has its own history, which does not interfere with the history of the current repository.""</code> that's why I'm hesitating, probably this is cannot be done with submodules...?</p>
","0","1307609","0","0"
"53484782","1734357","2018-11-26 15:54:39","0","166","<git><git-submodules>","How to store a specific checkout of a submodule in .gitmodules","<p>My project has dependencies. The dependencies are added as submodules.</p>

<p>A given submodule released a new major version that breaks my code.</p>

<p>In my personal copy I may <code>cd into submodule folder</code> <code>git checkout specific version</code> to fix this.</p>

<p>How do I store this specific version in a way that any fresh <code>git clone; git submodule update --init --recursive</code> comes with the correct version for the submodule? </p>

<ul>
<li>Perhaps in <code>.gitmodules</code>?</li>
<li>""It's currently not possible and you should just add that specific version library code directly into your repository"" ?</li>
</ul>
","3","1734357","",""
"71118955","3263659","2022-02-14 22:20:11","1","1533","<git><github-actions><git-submodules><git-subtree>","How to have the .github workflows sharable or reusable","<p>We have a repo that contains a bunch of workflows that we want to share amongst all of our dev repositories.</p>
<pre><code>github-common-workflows repository:
  workflows/build.yml
  workflows/test.yml
</code></pre>
<p>Is there a way to import the repo above as a submodule or subtree within our dev repos, e.g.:</p>
<pre><code>dev-repo repository:
  .github/&lt;point to the github-common-workflows repo&gt;
</code></pre>
<p>BECAUSE - when using submodules, github actions will not recognize any workflows at all Hence no github workflow will be triggered (e.g. upon push)</p>
<p><strong>Any ideas how to achieve a single place that contains all the workflows and shared amongst all repos?</strong></p>
","1","3263659","0","0"
"38397645","2039740","2016-07-15 13:42:59","2","161","<git><git-submodules>","Understanding git submodule pulling and pushing","<p>I have read the following articles:</p>

<ol>
<li><a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow noreferrer"">Git Tools - Submodules</a></li>
<li><a href=""https://git-scm.com/docs/git-submodule"" rel=""nofollow noreferrer"">git-submodule</a></li>
<li><a href=""https://chrisjean.com/git-submodules-adding-using-removing-and-updating/"" rel=""nofollow noreferrer"">Git Submodules: Adding, Using, Removing, Updating</a></li>
<li><a href=""https://stackoverflow.com/a/27431025/2039740"">easy-way-pull-latest-of-all-submodules</a></li>
</ol>

<p>But I still do not 100% understand submodule handling. My questions are:</p>

<ol>
<li>What does <code>git submodule update</code> do? Is it the same as doing <code>git submodule foreach git pull</code>?</li>
<li>What is the difference to <code>git submodule update --force</code>?</li>
<li>What is the difference to <code>git submodule sync</code>? And when do I have to call update and when do I have to call sync?</li>
<li><p>This question is a bit longer. I had to trigger a <code>git submodule update --init —recursive</code>. But why did no <code>git submodule update --force</code> or <code>git submodule sync</code> help? Please regard the following history of commands and outputs. I am sorry for the terrible formating. But I am somehow not able to insert this as code.</p>

<pre><code>        - cd $gitproject
        - cd submodule_a
        - git status
            - ad96e1a11:og-appconfig-android knoppik$ git status
            - On branch develop
            - Your branch and 'origin/develop' have diverged,
            - and have 1 and 5 different commits each, respectively.
            -   (use ""git pull"" to merge the remote branch into yours)
            - nothing to commit, working directory clean
        - cd ..
        - git pull
        - git submodule update --force
        - git submodule sync
        - cd submodule_a
        - git status
            - ad96e1a11:og-appconfig-android knoppik$ git status
            - On branch develop
            - Your branch and 'origin/develop' have diverged,
            - and have 1 and 5 different commits each, respectively.
            -   (use ""git pull"" to merge the remote branch into yours)
            - nothing to commit, working directory clean
        - cd ..
        - rm -rf submodule_*
        - git submodule update --init --recursive
            - Submodule path ’submodule_a’: checked out '8d4d756f2342bc373b6e86f0d0246f7b502ba796‘
        - git status
            - On branch develop
            - Your branch is up-to-date with 'origin/develop'.
            - nothing to commit, working directory clean
        - cd submodule_a
        - git status
            - HEAD detached at 8d4d756
            - nothing to commit, working directory clean
</code></pre></li>
</ol>

<p>So why did <code>git submodule update --force</code> not work? Why did I have to delete the submodule folders and run an init once again?</p>
","0","2039740","",""
"38396958","3298319","2016-07-15 13:09:04","2","6449","<git><git-submodules>","git submodule update --remote does not work","<p>I cloned a git repository, <code>mainrepo</code>, which has a submodule <code>submodule1</code>. When I try to get the latest update from <code>submodule1</code>:</p>

<pre><code>$ cd mainrepo

$ git submodule add git@bitbucket.org:myaccount/submodule1.git

$ git submodule update --remote submodule1
Usage: git submodule [--quiet] add [-b branch] [--reference &lt;repository&gt;] [--] &lt;repository&gt; [&lt;path&gt;]
   or: git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;...]
   or: git submodule [--quiet] init [--] [&lt;path&gt;...]
   or: git submodule [--quiet] update [--init] [-N|--no-fetch] [--rebase] [--reference &lt;repository&gt;] [--merge] [--recursive] [--] [&lt;path&gt;...]
   or: git submodule [--quiet] summary [--cached|--files] [--summary-limit &lt;n&gt;] [commit] [--] [&lt;path&gt;...]
   or: git submodule [--quiet] foreach [--recursive] &lt;command&gt;
   or: git submodule [--quiet] sync [--] [&lt;path&gt;...]

$ git submodule update --remote
Usage: git submodule [--quiet] add [-b branch] [--reference &lt;repository&gt;] [--] &lt;repository&gt; [&lt;path&gt;]
   or: git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;...]
   or: git submodule [--quiet] init [--] [&lt;path&gt;...]
   or: git submodule [--quiet] update [--init] [-N|--no-fetch] [--rebase] [--reference &lt;repository&gt;] [--merge] [--recursive] [--] [&lt;path&gt;...]
   or: git submodule [--quiet] summary [--cached|--files] [--summary-limit &lt;n&gt;] [commit] [--] [&lt;path&gt;...]
   or: git submodule [--quiet] foreach [--recursive] &lt;command&gt;
   or: git submodule [--quiet] sync [--] [&lt;path&gt;...]
</code></pre>

<p>I am sure I once tried updating a <code>submodules</code> this way, the docs says to do so too, yet I do not understand why it does not work.</p>

<p>But if I do a fetch and merge directly in the <code>submodule</code>, it gets updated to the latest repository commit as I want it:</p>

<pre><code>$ cd submodule1

$ git fetch &amp;&amp; git merge master
</code></pre>

<p>Why doesn't the <code>submodule update --remote submodule1</code> command work?</p>

<p>Maybe that might help:</p>

<pre><code>$ vim mainrepo/.git/config
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote ""origin""]
        fetch = +refs/heads/*:refs/remotes/origin/*
        url = git@bitbucket.org:myaccount/mainrepo.git
[branch ""master""]
        remote = origin
        merge = refs/heads/master
[submodule ""local/src/utils""]
        url = git@bitbucket.org:myaccount/submodule1.git

$ vim .gitmodules
[submodule ""submodule1""]
        path = submodule1
        url = git@bitbucket.org:myaccount/submodule1.git
</code></pre>
","2","3298319","",""
"38399366","109749","2016-07-15 15:01:06","0","360","<git><git-submodules>","git submodule clone on windows not creating target folders","<p>At work we've set up a repo appdevx and it has a project with submodules. When I run this command on OSX (<code>git --version</code> -> <code>git version 2.8.1</code>) everything works as expected, all my directories are populated, life is grand.</p>

<pre><code>git clone --recursive ssh://git@bb/appdevx/orb.git x
</code></pre>

<p>When I run the same command on Windows in git bash (<code>git --version</code> -> <code>git version 2.9.0.windows.1</code>) it seems to download all the modules as expected and puts them in the .git folder (I didn't confirm this, but it's got a long stream of found submodules and etc) and then it goes to write to the first folder alphabetically (which for some reason isn't created on the initial clone) and fails because it can't find the target path. If I create the path (paying attention to casing) it deletes the folder and then fails because the target path isn't there.</p>

<p>What am I doing wrong?</p>

<p>To add to this, because I have SourceTree installed (uses system git, not embedded), I let it do the update on the repository, and it works there.</p>
","0","109749","",""
"71157716","7573878","2022-02-17 11:57:19","1","410","<git><recursion><git-submodules>","git push recurse-submodules does not work","<p>I just start to use git submodule, but the behavior is not as expected when push submodules recursively.</p>
<p>My git version is 2.26.2.dirty. My repo is simple, where root-project has one submodule 'common_misc'. I do some change in common_misc, add and commit it. Then go to parent directory and add/commit directory common_misc.</p>
<p>After all that, I run in parent directory:</p>
<blockquote>
<p>git push --recurse-submodules=on-demand</p>
</blockquote>
<p>it will report error:</p>
<blockquote>
<p>% git push --recurse-submodules=on-demand</p>
<p>Pushing submodule
'common_misc' Everything up-to-date The following submodule paths
contain changes that can not be found on any remote:   common_misc</p>
<p>Please try</p>
<p>git push --recurse-submodules=on-demand</p>
<p>or cd to the path and use</p>
<p>git push</p>
<p>to push them to a remote.</p>
<p>fatal: Aborting.</p>
</blockquote>
<p>Here is output of git status in parent and sub directories:</p>
<blockquote>
<p>% git status .</p>
<p>On branch master
Your branch is ahead of
'origin/master' by 1 commit.   (use &quot;git push&quot; to publish your local
commits)</p>
<p>nothing to commit, working tree clean</p>
<p>% cd common_misc</p>
<p>% git status .</p>
<p>On branch dev/test
Your branch is ahead of 'origin/dev/test' by 1
commit.   (use &quot;git push&quot; to publish your local commits)</p>
<p>nothing to commit, working tree clean</p>
</blockquote>
<p>It shows both need be pushed.</p>
<p>I try to push without recursive in both parent and sub directories and that works without any problem.</p>
","1","7573878","",""
"53843769","10299721","2018-12-19 02:31:58","2","393","<c++><cmake><git-submodules>","Managing cmake dependency git module","<p>I am trying to set up cmake build for one of my libraries. Let say I want library B depending on A. Both libraries using CMake as build system. Both has an external dependency on gtest via <code>git submodule</code>.</p>

<pre><code>.
+-libA
  |-CMakeLists.txt
  |...
  +-external/gtest
    +-CMakeLists.txt
+-libB
  |-CMakeLists.txt
  |...
  +-external/gtest
    +-CMakeLists.txt
</code></pre>

<p>What would be the best project structure to be able to build projects independently and as part of a larger project?</p>

<p>With the above layout I get an errors that gtest is defined by another project:</p>

<pre><code>CMake Error at libstyxe/external/gtest/googletest/cmake/internal_utils.cmake:161 (add_library):                                               
  add_library cannot create target ""gtest"" because another target with the                                                                    
  same name already exists.  The existing target is a static library created                                                                  
  in source directory                                                                                                                         
  ""libsolace/external/gtest/googletest"".  See                                                                 
  documentation for policy CMP0002 for more details. 
</code></pre>

<p>Options I tried:
 1. Have libA symlinked from libB/external and including it via add_directory.
 Builind libB fails with the similar error to the one above.
 2. Creating a root CMakeLists.txt adding both libA and libB as add_subdirectory. 
 Same problem.</p>

<p>In both libA/CMakeLists.txt and libB/CMakeLists.txt gtest is included as:
<code>add_subdirectory(external/gtest/googletest EXCLUDE_FROM_ALL)</code></p>
","1","10299721","",""
"71308937","2689665","2022-03-01 13:06:17","2","377","<git><migration><git-submodules><history>","git - Copy History of A project with submodules to existing single project","<p>I have a git project contains 10 submodules project. I migrated this project to another as a single project. (All submodules are just a folder in the new project now)</p>
<p>Is there anyway to migrate the history data of files in the submodules to new one?</p>
","1","2689665","0","0"
"71326589","18356205","2022-03-02 17:11:14","0","1109","<node.js><npm><node-modules><git-submodules>","npm ERR! git dep preparation failed","<p>I'm trying to install a library from github using npm. I run into the following errors when using the line:</p>
<pre><code>npm i --save --save-dev --force --legacy-peer-deps
</code></pre>
<p>I receive tons of errors such as:</p>
<pre><code>npm ERR! code 1
npm ERR! git dep preparation failed
npm ERR! command /usr/local/Cellar/node/17.6.0/bin/node /usr/local/lib/node_modules/npm/bin/npm-cli.js install --force --cache=/Users/raymondabid/.npm --prefer-offline=false --prefer-online=false --offline=false --no-progress --no-save --no-audit --include=dev --include=peer --include=optional --no-package-lock-only --no-dry-run
</code></pre>
<p>and:</p>
<pre><code>npm ERR! npm ERR! code 1
npm ERR! npm ERR! path /Users/raymondabid/.npm/_cacache/tmp/git-cloneRtYsoF/node_modules/slimerjs
npm ERR! npm ERR! command failed
npm ERR! npm ERR! command sh -c node install.js
npm ERR! npm ERR! node:internal/modules/cjs/loader:936
npm ERR! npm ERR!   throw err;
npm ERR! npm ERR!   ^
npm ERR! npm ERR! 
npm ERR! npm ERR! Error: Cannot find module 'brace-expansion'
</code></pre>
<p>Here is a link to the submodule that I am trying to install: <a href=""https://github.com/wet-boew/wet-boew"" rel=""nofollow noreferrer"">https://github.com/wet-boew/wet-boew</a></p>
<p>Google doc with full stack of errors and warning when running the install: <a href=""https://docs.google.com/document/d/1DV1ZAWLtBtnPfKtC9fubqSv4z-ohvAUMIIv6svBWzLA/edit?usp=sharing"" rel=""nofollow noreferrer"">https://docs.google.com/document/d/1DV1ZAWLtBtnPfKtC9fubqSv4z-ohvAUMIIv6svBWzLA/edit?usp=sharing</a></p>
","0","18356205","",""
"71379041","9260623","2022-03-07 09:40:48","0","66","<git><android-studio><module><git-submodules>","How to make a submodule behave as. a submodule in git?","<p>I have created 2 submodules in my project. But, these submodules seem to have the commit history of the entire project, not just for the submodule. When I push from the submodule to remote repository for submodule, the entire project's commits, and not just
the submodule's commit gets pushed.</p>
<p>In other words, my submodules aren't behaving as submodules. How do I fix it?</p>
","3","9260623","",""
"53889819","145504","2018-12-21 19:24:05","1","208","<git><git-submodules>","git submodule is always detached, even when tracking branch","<p>I have a git submodule configured to track a specific branch:</p>

<pre><code>[submodule ""subproject""]
path = subproject
url = ../subproject.git
branch = v2.44
</code></pre>

<p>In my build script, I want to be able to query the branch of the subproject, so I use <code>cd subproject &amp;&amp; git rev-parse --abbrev-ref HEAD</code>. I would expect this to output <code>v2.44</code>, but it always outputs <code>HEAD</code>.</p>

<p>When I go into <code>subproject/</code> and inspect the branch, I get:</p>

<pre><code>git branch -v
* (HEAD detached at b69ac07) b69ac07 Another commit
  master                     36096e7 Some commit
</code></pre>

<p>What's going on here? Why would I be detached rather than on the <code>v2.44</code> branch?</p>

<p>If I manually <code>git checkout v2.44</code>, the parent git repo doesn't detect any sort of modification to the submodule either, versus if I were to <code>git checkout v2.43</code> and then it does notice that the submodule was modified.</p>
","0","145504","",""
"53896924","5290011","2018-12-22 15:25:29","7","2433","<bash><git><git-submodules>","Convert .gitmodules into a parsable format for iteration using Bash","<h2>Background</h2>

<p>I would like to make a shell function that takes <code>.gitmodules</code> and iterates over each module executing certain commands based off of each submodules properties (e.g. <code>&lt;PATH&gt;</code> or <code>&lt;URL&gt;</code> or <code>&lt;BRANCH&gt;</code>).</p>

<p>➡️ The default format of <code>.gitmodules</code>:</p>

<pre><code>[submodule ""PATH""]
    path = &lt;PATH&gt;
    url = &lt;URL&gt;
[submodule ""PATH""]
    path = &lt;PATH&gt;
    url = &lt;URL&gt;
    branch = &lt;BRANCH&gt;
</code></pre>

<p>➡️ Pseudocode:</p>

<pre><code>def install_modules() {
    modules = new list

    fill each index of the modules list with each submodule &amp; its properties

    iteratate over modules
       if module @ 'path' contains a specified 'branch':
          git submodule add -b 'branch' 'url' 'path'
       else:
          git submodule add 'url' 'path'
}
</code></pre>

<h2>⚠️ Current <code>install_modules()</code></h2>

<pre><code># currently works for grabbing the first line of the file
# doesn't work for each line after.
install_modules() {
    declare -A regex

    regex[""module""]='\[submodule ""(.*)""\]'
    regex[""url""]='url = ""(.*)""'
    regex[""branch""]='branch = ""(.*)""'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    cat &lt; "".gitmodules"" | while read -r LINE; do
        if [[ $LINE =~ ${regex[module]} ]]; then
            PATH=${BASH_REMATCH[1]}

            echo ""$PATH""
        fi
    done
}
</code></pre>
","1","5290011","0","0"
"71476215","18467916","2022-03-15 02:04:47","1","379","<git><git-submodules><refspec>","Is it possible to clone a submodule in git without getting its master branch?","<p>Say that I have a repo A, that has a submodule B. B has a branch X that A is interested in. Is it possible to clone A, and then get branch X for B, without also pulling down B's master. I tried having .gitmodule specify branch X for B, &quot;git submodule update --single-branch -- path_to_B&quot;, changing submodule fetch refspec to include the branch X only, but seems that B's master always gets pulled. Is it possible to not get master branch of B when cloning repo A?</p>
","2","18467916","",""
"71533343","1782553","2022-03-18 21:26:34","0","169","<git><git-submodules><git-remote><git-subtree>","git push specific files to another remote","<p>I have a git repository containing several linked projects like</p>
<pre><code>|-- configs
|   |-- A.py
|   `-- B.py
|-- datasets
|   |-- a.py
|   |-- b.py
|   `-- c.py
|-- models
|   |-- x.py
|   `-- y.py
`-- projects
    |-- A.py
    |-- B.py
    `-- common.py
</code></pre>
<p>I would like to publish a subset of those files with a new remote. From reading the documentation, it's seems not possible. What alternative would you suggest?
I'm thinking of:</p>
<ul>
<li>copy-pasting to a new repository (but if code is updated on one side, I won't benefit from the changes on the other side</li>
<li>pushing the whole repository to the new remote (but I'm not sure I want to share everything)</li>
<li>Restructuring repo and use submodules or git subtree (but it gets complicated for the common files, that would mean creating 3 repositories (one for each project + one for common things, which is messy to maintain, especially for very few files)</li>
</ul>
<p>Any advice on how to address this problem?</p>
","1","1782553","",""
"53921334","5154090","2018-12-25 10:10:09","3","321","<azure-devops><git-submodules><azure-pipelines><artifact>","Azure Pipelines: Store git submodules as artifacts and only build as needed","<p>We have a project written in C that depends on several libraries as git submodules. We built an Azure Pipeline to build it, using multiple containers targeting multiple environments.</p>

<p>The challenge is that the build takes more time than we'd like, partly because of the fact that the submodules are being recompiled every time, even though they do not change.</p>

<p>What I'm looking for is a way to build the submodules only when needed, store them as artifacts, and have the main build consume them.</p>

<p>As far as I understand, I can set up a build for the submodule's repos which will poll for changes, but I want my product to depend on specific commits of the submodules - i.e. I'm not always taking the latest submodule version.</p>

<p>So I'm looking to trigger a submodule build whenever we switch to a new commit. Can this be achieved in Azure Pipelines? What would be the best way to manage the artifacts (e.g. store the commit ID as part of the artifact name)?</p>
","0","5154090","0","0"
"71589664","18140393","2022-03-23 15:13:50","0","77","<ruby-on-rails><ruby><module><git-submodules>","No .gitmodules file to add the line ignore = dirty","<p>So currently I am getting this error in my terminal when trying to commit/push:</p>
<pre><code>Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
    modified:   guarded-headland-03173 (modified content)
</code></pre>
<p>Apparently, the answer is simply adding ignore = dirty to the .gitmodules file but the problem is that there is no .gitmodules for me.</p>
","0","18140393","",""
"71599248","1296971","2022-03-24 08:36:32","1","232","<git><config><git-submodules>","How to get git includeIf work for submodule","<pre><code>[core]
    editor = \&quot;C:\\Microsoft VS Code\\bin\\code\&quot; --wait

[includeIf &quot;gitdir/i:D:/code/project/&quot;]
   path = project.gitconfig

[includeIf &quot;gitdir/i:D:/code/project/acts/ccxt/ccxt&quot;] # not working, why?
    path = github.submodule.gitconfig

[includeIf &quot;gitdir/i:E:/code/project/&quot;]
    path = project.gitconfig

[includeIf &quot;gitdir/i:d:/OneDrive/code/&quot;]
    path = project.gitconfig

[includeIf &quot;gitdir/i:D:/code/github/&quot;]
    path = github.gitconfig
</code></pre>
<p><code>D:/code/project/acts/ccxt/ccxt</code> is a submodule of <code>D:/code/project/acts/</code>.
All <code>includeIf</code> work except the one in the submodule. If I comment out <code>D:/code/project/acts/</code> and change <code>D:/code/project/acts/ccxt/ccxt</code> to <code>D:/code/project/acts/</code> it works, but I need different settings for <code>ccxt</code> and <code>project</code>.</p>
","4","1296971","",""
"71616235","5372895","2022-03-25 11:29:39","0","20","<git><github><git-submodules>","How to specify the git submodule URL dynamically in .gitmodules file?","<p>My repository's <code>.gitmodules</code> file is currently like this :</p>
<pre><code>[submodule &quot;app/src/main/assets/my-submodule-repository&quot;]
    path = app/src/main/assets/my-submodule-repository
    url = git@github.com:my-organization/my-submodule-repository.git
    branch = main
    recurse = true
</code></pre>
<p>Instead of having a unique hardcoded value for the submodule URL, is it possible to have a certain submodule URL depending on what the main repository's URL is? If the main repository has a HTTPS protocol URL, then use an HTTPS URL for the submodule, and if the main repository has a SSH URL, then use a SSH URL for the submodule too?</p>
","2","5372895","",""
"71642959","1267368","2022-03-28 05:56:17","2","59","<git><github><merge><git-submodules>","Why does GitHub submodule merge conflict detection work differently to gits?","<p>I write this as one who fully understands the complexities of submodules and their limitations, so please don't use your answer to give me a lecture about this being the fate I deserve for using submodules. I do know that if they are used the wrong way, they can create all manner of nasty nightmares. However, the way I am using them is not one of those ways - developers are barely aware of their existence and almost all the management of them is performed in strucutred way by automated CI/CD processes.</p>
<p>I am using a pure git superproject and its submodules as a configuration tracking mechanism for a collection of submodules. Each tag in the superproject represents a configuration of submodules that can be deployed into an environment. There is one branch per environment which tracks what is actually deployed in an environment. There is a master branch that tracks the master branches of the all the submodules. Other branches are used to track feature or fix branches of the same name in the submodules. All the accounting is done automatically by the CI/CD system so that developers barely need to be aware of the existence of submodules, let alone how to wrangle with them.</p>
<p>The normal release process is to tag the master branch and merge that tag into an environment branch. Typically, this will update the environment branch with the state of the master branch and thus make the environment branch tree-same and submodule-same as the tag.</p>
<p>In case a hotfix is required, we create a branch from the same tag as was last pushed into the environment to be hotfixed, create branches of the submodules with the same name and at the same commit as the tag, and update the submodules as required to implement the hot fix, which ultimately updates the superproject branch of the same name. We then tag that hotfix branch with a tag, merge that tag into the environment branch and the hotfix is then deployed to the related environment by the CI/CD processes.</p>
<p>This potentially creates a non-trivial divergence between the hotfix branch and master which might cause a merge conflict on a future normal deployment so we do an 'ours' strategy merge of the hotfix tag back into master which doesn't change the master tree, but does enough with the history to keep git happy (we also, of course, merge the hotfix branches from the submodules into the master branches so that we can sleep in bed at night and not feel bad about lying about whether superproject merge was legit or not).</p>
<p>All of this works pretty well, and there are almost never any merge conflicts that aren't caused by a failure to do that last step.</p>
<p>Today I was working through the hotfix process with the intention of delivering a single hotfix tag to 3 environment branches. This seemed straightforward, but strangely it didn't work.</p>
<p>If I test it locally, the merge into each of the 3 environment branches works, but when I create a tag delivery branch (identical to the hotfix tag) to do the same in GitHub, GitHub reports a merge conflict between 2 of the environment branches and the tag delivery branch, but not between the 3rd environment branch.</p>
<p>For reference I have included screen captures of <code>gitk force-{environment} ^{hotfix}</code> which shows the divergence of the environment away from the hotfix tag/branch (there is always going to be at least one merge commit which diverges).</p>
<p>THe intended merge is equivalent to:</p>
<pre><code>git checkout force-{environment} &amp;&amp;
git merge {hotfix}
</code></pre>
<p>failing environment branch (force-exosphere):</p>
<p><a href=""https://i.stack.imgur.com/bY71N.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bY71N.png"" alt=""failing environment branch"" /></a></p>
<p>working environment branch (force-quartz):</p>
<p><a href=""https://i.stack.imgur.com/5nzzn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5nzzn.png"" alt=""working environment branch"" /></a></p>
<p>The curious thing is that the force-{environment} branch that is failing is the most trivial one (force-exosphere) -  the more complicated branch (force-quartz) actually passes GitHub's merge conflict detection logic. There is another branch (force-emerald, not shown) which looks and behaves like force-exosphere. All 3 branches merge without conflict if the merge is done natively with git, outside of GitHub.</p>
<p>My question is: what is it about GitHub's merge conflict detection logic that is causing GitHub to report the existence of merge conflict on a submodule when git itself does not?</p>
","1","1267368","0","0"
"53990111","5019802","2018-12-31 17:51:13","3","44","<git><version-control><git-submodules>","Creating new Git repo in sub-folder's of git with existing source code","<p>I'm using shared hosting and I have several website hosted into same server as an addon domain. Now I want to use git for version control</p>

<p>Say I have 3 website as <em><code>example1.com</code></em>, <em><code>example2.com</code></em> &amp; <em><code>example2.com</code></em>. <em><code>example1.com</code></em> is hosted as main domain in <code>public_html/</code></p>

<p>My dir structure is </p>

<pre><code>/public_html/
  .git/
  .gitignore
  index.html
  .....

  example2.com/
    index.html
    .....

  example3.com/
    index.html
    .....
</code></pre>

<p><code>.gitignore</code> content of <em><code>example1.com</code></em> is</p>

<pre><code>*.log
log/*
tmp/*
.env
/example2.com/
/example3.com/
</code></pre>

<p>Now my question is as I already have a git repo in <code>public_html</code> so how can I initilized a new repo with existing code of <em><code>example2.com</code></em></p>

<p>I create a new project in gitlab as <em>example2</em> (<em><code>git@gitlab.com:myusername/example2.git</code></em>) now I'm want to push code of 
example2.com dir into this repo.</p>

<p>I checked some example as how to achieve this, so I got <a href=""https://stackoverflow.com/q/3456888/5019802"">this</a> and <a href=""https://webmasters.stackexchange.com/a/84533/70357"">this</a>. So I tried below cmd from <code>public_html</code>.</p>

<pre><code>git submodule add https://gitlab.com/myusername/example2.git example2.com
</code></pre>

<p>But I'm getting below error</p>

<blockquote>
<pre><code>The following path is ignored by one of your .gitignore files:
example2.com
Use -f if you really want to add it.
</code></pre>
</blockquote>

<p>If I remove <code>example2.com</code> from root <code>.gitignore</code> then it'll add the code in to my example1.com repo. I'm too confused as how to maintain separate commit/repo for sub-folder</p>

<p>Can anyone help me with there knowledge.</p>

<p>Thanks in advance.</p>
","0","5019802","0","0"
"53994942","2629244","2019-01-01 11:06:48","2","2062","<git><git-submodules>","How to get a list of git submodules of repository before `git clone`?","<p>I'm trying to get a submodule list of a repo before preforming clone.</p>

<p>And then to  choose which submodule repo to clone.</p>

<p>Is there any way to do it?</p>
","4","2629244","0","0"
"71823881","2903605","2022-04-11 07:08:32","8","2349","<git><git-submodules>","Why does git not see the changes in my submodules anymore?","<p>Windows user here. I have a C++ git project with a bunch of submodules. The directory structure looks something like this:</p>
<pre><code>source
  apps
    myapp1
    myapp2
  externals
    submodule1
    submodule2
    ...
    submoduleN
  packages
    mypackage1
    mypackage2
CMakeLists.txt
Makefile
...
</code></pre>
<p>The submodules are my own work that I share between my projects (so I own and maintain them).</p>
<p>Cloning this is straightforward:</p>
<pre><code>git clone ssh://blabla@blabla/blabla
git submodule update --init
</code></pre>
<p>Everything works for a while. When I change stuff in my submodules, and do <code>git status</code>, git recognizes this and says something like:</p>
<pre><code>C:\blabla&gt;git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   source/externals/XXX (modified content)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>I go into the dirty submodule, add, commit and push the changes. Then, in the main project, git will notice I am now on a different commit:</p>
<pre><code>C:\blabla&gt;git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   source/externals/XXX (new commits)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>This works fine, until suddenly it doesn't anymore. After working like this for a period of time (usually a day or two), git suddenly stops recognizing changes in one or more submodules. When I go into an affected submodule's directory and hit <code>git status</code> there, git sees the changes. But when I do the same in the main project, git no longer says that there is modified content in that submodule. And when I add, commit and push the changes in my submodule, git no longer recognizes that the submodule now is on a different commit. Trying <code>git submodule update</code> doesn't fix anything. It brings the affected submodule back to the commit it was on before things went wrong. But when I do <code>git checkout master</code> and then <code>git pull</code> to get my changes back, doing <code>git status</code> in the main directory still shows no changes for that submodule.</p>
<p>I know of only two ways to fix this:</p>
<ul>
<li>deleting the whole project and re-cloning</li>
<li>cloning the submodule in a different unrelated directory, changing, committing and then pushing something (anything really), and then doing <code>git pull</code> in my project... weirdly enough THAT is what brings git around and everything works again.</li>
</ul>
<p>Anyone got any idea what could cause this? Sorry for the super long post, tried to give as much context as possible.</p>
<p>EDIT: I have the problem again.
<code>git submodule sync</code> fixes nothing.
<code>git submodule status</code> shows the following:</p>
<pre><code> e773ebc7904dd5f695bfa56880bd0874207d57be source/externals/... (heads/master)
 9b3ef1bd87dd4a2ab0c527499162df84babff1de source/externals/... (remotes/origin/HEAD)
 99f672b772fa876a790b86d6900191fd3eba1d3e source/externals/THIS_ONE_GOES_WRONG (99f672b)
 27ed4009784093fa8a095415ec4666135dece821 source/externals/... (remotes/origin/HEAD)
 dd207664b563c4fe271c995fda7b1b93ec40f437 source/externals/... (remotes/origin/HEAD)
</code></pre>
<p>The weird part here is that the mentioned commit for the submodule going wrong is NOT the commit the submodule is actually one! It's on a different commit (a newer one), as shown when I do <code>git log</code> in the affected submodule:</p>
<pre><code>commit c374f672a8ac8fc5d8f312a7cf75785c96ca5763 (HEAD -&gt; master, origin/master, origin/HEAD)
Author: ...
Date:   Tue Apr 12 19:29:14 2022 +0200

    &lt;commit message&gt;

commit 99f672b772fa876a790b86d6900191fd3eba1d3e
Author: ...
Date:   Tue Apr 12 16:15:03 2022 +0200

    &lt;commit message&gt;
</code></pre>
<p>But whatever I do, <code>git submodule update</code> and then pull in the affected submodule, git does NOT recongize ANYTHING in it anymore. Changed content, changed commit, it's somehow looking at stale data :/</p>
","2","2903605","0","0"
"54033506","1495342","2019-01-04 05:28:04","1","45","<git><git-submodules><git-subtree>","How to link a subfolder from one git repository into another?","<p>I have 2 git repositories in following structure.</p>

<pre><code>Repository1 -&gt; src
            |
            -&gt; res


 Repository2 -&gt; src
             |
             -&gt; res
</code></pre>

<p>I want to link subfolders in Repository2 to Repository1, so that final folder structure would look something like : </p>

<pre><code>Repository1 -&gt; src -&gt; Repository2src
            |
            -&gt; res -&gt; Repository2res
</code></pre>

<p>Is there any way I could do this?</p>
","0","1495342","0","0"
"72040388","11942268","2022-04-28 08:29:01","0","69","<git><git-submodules>","Can I add --recurse-submodules to .gitattributes of a git repo?","<p>When working with git repos that use git submodules, people might forget to add <code>--recurse-submodules</code> to their git commands or might not think about setting <code>git config --local submodule.recurse true</code> locally for a repo. Can I somehow set this by a setting in the repository, e. g. in the <code>.gitattributes</code> file?</p>
<p>I just want to make sure that people do not have to think about if a repo contains submodules or not.</p>
","0","11942268","",""
"72098713","15402527","2022-05-03 11:28:00","1","242","<git><github><branch><local><git-submodules>","How can I clone git branch with submodule?","<p>I have a branch called A (not main branch) and there's some files and one submodule. I want to clone this submodule to my local repository but I don't know how to.</p>
<p>I tried some commands but they only cloned files and folders. They only copy the folder of the submodule, except the files and folders inside it.</p>
<p>Here are some commands I tried but they didn't work.</p>
<pre><code>git clone --recurse-submodules -b week3 --single-branch git://github.com/foo/bar.git
git clone -b week3 --single-branch git://github.com/foo/bar.git
</code></pre>
<p>How can I clone a submodule in a specific branch(not main) to my local computer?</p>
","2","15402527","",""
"54169162","4549502","2019-01-13 13:06:30","1","4000","<git><server><private><git-submodules>","Git submodules fail to recurse at cloning from private git server","<p>This question has been asked zillions of times, but always in combination with the use of public git servers such as github. I am in the process of setting up my own private git server, which seems to be going alright, up to the point where I try to clone a project with submodules which I previously committed and pushed myself.</p>

<p>When this question is asked with respect to github, the answer always seems to be that a keypair needs to be generated and the public key needs to be registered with github. I would be happy to register my public key with my private git server, but I cannot find any documentation about this. Is it even possible? Even the documentation from git-scm.com funnel into a github reference.</p>

<p>My private git server is nothing more than a Raspberry Pi with an external harddrive, running Raspbian lite. I have made three projects of which one is a main project which has the other two added as submodule. I can create this as such, commit and push, but when I try to clone it with --recurse-submodules (or without and then submodule init/update), the submodules fail. I can, however, clone the submodules outside the scope of the main project.</p>

<p>I have been fooling around with the network setup, and the Pi has changed IP number a couple of times. When I ran into problems because of that, I setup a DNS entry that points to my router, and added a port forwarding rule to the Pi in the router so I can effectively reach my private server from all over the world. Because the URLs changed, and did not want to end up with remnants of the old URL somewhere, I simply started all three projects again, but that did not help me.</p>

<p>What is going on here? Following log has been anonymized. :)</p>

<p>Update 1: the problem is in the authentication when the submodules are cloned. /var/log/auth.log shows failed logins when a submodule is being cloned as part of the cloning of the main project:</p>

<pre><code>Jan 13 15:07:56 raspberrypi sshd[3148]: Failed password for git from 192.168.1.18 port 62855 ssh2
</code></pre>

<p>Scenario I did that shows the error, and also that a clone of a submodule out of the context of the main project simply succeeds:</p>

<pre><code> E:\Projects&gt;git clone --recurse-submodules ssh://git@git.domain.com/gitdata/Project1.git
Cloning into 'Project1'...
git@git.domain.com's password:
warning: You appear to have cloned an empty repository.

E:\Projects&gt;cp -r Project1.cleanBU/* Project1

E:\Projects&gt;cp -r Project1.cleanBU/.gitignore Project1

E:\Projects&gt;git add Src .gitignore
fatal: not a git repository (or any of the parent directories): .git

E:\Projects&gt;cd Project1

E:\Projects\Project1&gt;git add Src .gitignore

E:\Projects\Project1&gt;git commit
[master (root-commit) 1e52450] Initial commit
 1145 files changed, 726152 insertions(+)
 create mode 100644 .gitignore
...
&lt;&lt;&lt;zapped!&gt;&gt;&gt;
...
 create mode 100644 Src/build.bat

E:\Projects\Project1&gt;git push
git@git.domain.com's password:
Enumerating objects: 550, done.
Counting objects: 100% (550/550), done.
Delta compression using up to 8 threads
Compressing objects: 100% (527/527), done.
Writing objects: 100% (550/550), 1.27 MiB | 3.21 MiB/s, done.
Total 550 (delta 272), reused 0 (delta 0)
remote: Resolving deltas: 100% (272/272), done.
To ssh://git.domain.com/gitdata/Project1.git
 * [new branch]      master -&gt; master

E:\Projects\Project1&gt;git submodule add ssh://git@git.domain.com/gitdata/project2.git Src/project2
Cloning into 'E:/Projects/Project1/Src/project2'...
git@git.domain.com's password:
remote: Counting objects: 202, done.
remote: Compressing objects: 100% (162/162), done.
remote: Total 202 (delta 36), reused 202 (delta 36)
Receiving objects: 100% (202/202), 586.16 KiB | 4.73 MiB/s, done.
Resolving deltas: 100% (36/36), done.

E:\Projects\Project1&gt;git submodule add ssh://git@git.domain.com/gitdata/project3.git Src/project3
Cloning into 'E:/Projects/Project1/Src/project3'...
git@git.domain.com's password:
remote: Counting objects: 18, done.
remote: Compressing objects: 100% (18/18), done.
remote: Total 18 (delta 0), reused 0 (delta 0)Receiving objects:  44% (8/18)
Receiving objects: 100% (18/18), 15.94 KiB | 5.31 MiB/s, done.

E:\Projects\Project1&gt;git add .gitmodules

E:\Projects\Project1&gt;git commit
[master d93cfa4] Added project3 and project2 submodules
 3 files changed, 8 insertions(+)
 create mode 100644 .gitmodules
 create mode 160000 Src/project2
 create mode 160000 Src/project3

E:\Projects\Project1&gt;git push
git@git.domain.com's password:
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 8 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 596 bytes | 596.00 KiB/s, done.
Total 4 (delta 0), reused 0 (delta 0)
To ssh://git.domain.com/gitdata/Project1.git
   1e52450..d93cfa4  master -&gt; master

E:\Projects\Project1&gt;cd ..

E:\Projects&gt;rm -rf Project1

E:\Projects&gt;git clone --recurse-submodules ssh://git@git.domain.com/gitdata/Project1.git
Cloning into 'Project1'...
git@git.domain.com's password:
remote: Counting objects: 554, done.
remote: Compressing objects: 100% (259/259), done.
remote: Total 554 (delta 273), reused 549 (delta 272)
Receiving objects: 100% (554/554), 1.27 MiB | 5.96 MiB/s, done.
Resolving deltas: 100% (273/273), done.
Submodule 'Src/project2' (ssh://git@git.domain.com/gitdata/project2.git) registered for path 'Src/project2'
Submodule 'Src/project3' (ssh://git@git.domain.com/gitdata/project3.git) registered for path 'Src/project3'
Cloning into 'E:/Projects/Project1/Src/project2'...
Permission denied, please try again.
Permission denied, please try again.
git@git.domain.com: Permission denied (publickey,password).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'ssh://git@git.domain.com/gitdata/project2.git' into submodule path 'E:/Projects/Project1/Src/project2' failed
Failed to clone 'Src/project2'. Retry scheduled
Cloning into 'E:/Projects/Project1/Src/project2'...
Permission denied, please try again.
Permission denied, please try again.
git@git.domain.com: Permission denied (publickey,password).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'ssh://git@git.domain.com/gitdata/project2.git' into submodule path 'E:/Projects/Project1/Src/project2' failed
Failed to clone 'Src/project2' a second time, aborting
Cloning into 'E:/Projects/Project1/Src/project3'...
Permission denied, please try again.
Permission denied, please try again.
git@git.domain.com: Permission denied (publickey,password).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'ssh://git@git.domain.com/gitdata/project3.git' into submodule path 'E:/Projects/Project1/Src/project3' failed
Failed to clone 'Src/project3'. Retry scheduled
Cloning into 'E:/Projects/Project1/Src/project3'...
Permission denied, please try again.
Permission denied, please try again.
git@git.domain.com: Permission denied (publickey,password).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'ssh://git@git.domain.com/gitdata/project3.git' into submodule path 'E:/Projects/Project1/Src/project3' failed
Failed to clone 'Src/project3' a second time, aborting

E:\Anheko\Projecten&gt;git clone ssh://git@git.domain.com/gitdata/project2.git
Cloning into 'project2'...
git@git.domain.com's password:
remote: Counting objects: 18, done.
remote: Compressing objects: 100% (18/18), done.
Rremote: Total 18 (delta 0), reused 0 (delta 0)eceiving objects:  44% (8/18)
Receiving objects: 100% (18/18), 15.94 KiB | 5.31 MiB/s, done.
</code></pre>
","3","4549502","0","0"
"54172820","1987629","2019-01-13 20:18:00","1","212","<git><git-submodules><git-subtree><git-subrepo>","git submodules, subtrees or else","<p>Probably, i misunderstood how git works, I have my directory structure as follows:</p>

<pre><code>project (git-repo)
  project 1 (git-repo)
  project 2 (git-repo)
  common scripts (git-repo)
</code></pre>

<p>All these folders have their own repositories where the main <code>project</code> can have child repositories such as <code>project 1</code>, <code>project 2</code>, <code>child scripts</code>. They can be submodules or subtree. The problem, the <code>common scripts</code> contain some of the codes that is common and essential to build both <code>project 1</code> and <code>project 2</code>. What can be best strategy to maintain this so that each project can be independent as well as no need to keep common scripts in two places.</p>
","1","1987629","",""
"72178053","710491","2022-05-09 20:48:26","0","255","<git><git-submodules>","Copy git submodules from one repo to another","<p>I'm developing a set of libraries that depend on a common set of other libraries.</p>
<p>I'd like to copy the .gitsubmodules file from one repo that has all of the necessary submodules into all of the other repos.</p>
<p>However I can't seem to get git to recognize the submodules file, or otherwise do anything to pull the submodules into the new repository.</p>
","0","710491","",""
"72181548","19083020","2022-05-10 06:22:08","2","815","<gitlab><continuous-integration><devops><gitlab-ci><git-submodules>","fatal: Needed a single revision(gitlab runner error)","<p>When adding a submodule  to my Gitlab repo, I install the main branch:</p>
<p>git submodule add -b main ../../some-project/my-repo.git</p>
<p>After that I use the gitlab runner with variables:</p>
<p>GIT_SUBMODULE_STRATEGY: normal</p>
<p>GIT_SUBMODULE_UPDATE_FLAGS: &quot;--remote --merge&quot;</p>
<p>Everything works fine, but when you change the submodule branch in .gitmodules to another one, let's say &quot;feature&quot; (changed both manually in the file and with the command git submodule set-branch -b feature my-repo), then the pipeline drops with this: fatal: Needed a single revision</p>
<p>Unable to find current origin/feature revision in submodule path 'my-repo'</p>
<p>Locally, the command &quot;git submodule update --init --remote --merge my-repo&quot; works fine, updating the submodule to the latest commit in the &quot;feature&quot; branch</p>
","1","19083020","",""
"72185464","9387519","2022-05-10 11:22:45","0","168","<git><repository><git-submodules>","How to pull the latest commit git with submodule's update init","<p>I have a git-managed project called <code>myProject</code> which contains a submodule called <code>mySubmodule</code>.</p>
<p>There is a point in our pipeline where we clone the whole <code>myProject</code> and then we run this git command: <code>git submodule update --init --recursive --remote</code>. But it looks like it doesn't pull the latest state from the original submodule's repo. We have to manually update <code>mySubmodule</code> with <code>git submodule update --remote --merge</code>, then push it to <code>myProject</code>. I would like to use this submodule the way when my pipeline is freshly checking out <code>myProject</code> then the update would init this submodule with the submodule's latest state. Is that possible?</p>
","4","9387519","",""
"72223234","9614075","2022-05-13 00:05:44","1","356","<git><github><branch><git-submodules>","New git submodule missing everytime I checkout my repo/branch","<p>Whenever I clone my repo (<code>&lt;my_repo&gt;</code>) locally, the new submodule's directory (under <code>&lt;my_repo&gt;/_includes/&lt;NEW_submodule_2&gt;</code>) is empty.</p>
<p>I have added in my <code>&lt;NEW_submodule_2&gt;/.gitmodules</code> like so:</p>
<pre><code>[submodule &quot;_includes/&lt;submodule_1&gt;&quot;]
    path = _includes/submodule_1
    url = https://github.com/&lt;my_org&gt;/submodule_1
    branch  = master
[submodule &quot;_includes/&lt;NEW_submodule_2&gt;&quot;]
    path = _includes/&lt;NEW_submodule_2&gt;
    url = https://github.com/&lt;my_org&gt;/&lt;NEW_submodule_2&gt;
    branch  = master
</code></pre>
<p>I have to always run the following to get that directory populated: <code>git submodule update --init --remote _includes/&lt;NEW_submodule_2&gt;</code></p>
<p>How do I fix this so that this command doesn't have to be run everytime I git clone (or whenever someone else clones)?</p>
","1","9614075","0","0"
"54328086","874660","2019-01-23 13:12:47","2","110","<git><git-submodules>","Why aren't git submodule operations automatic?","<p>It seems like by design git's submodule operations are manual. As a moderately-adept git user, I want to understand this design decision. In particular, it seems like the least surprising thing for <code>git pull</code> or <code>git checkout</code> to do is to check pull/check out the appropriate branch/comment, then update all submodules to match their corresponding commits. Why?</p>

<p>It appears that the above functionality is enabled if I set </p>

<pre><code>[submodule]
        recurse = true
</code></pre>

<p>in my <code>~/.gitconfig</code>. But even then, when a colleague adds a new module, when I <code>git pull master</code>, I don't get the new module even though it shows up in <code>.gitmodules</code>. If I check <code>.gitmodules</code> for new ones and then do <code>git submodule update --init MODULEPATH</code>, I get it. But again, why would this manual interaction be the desired behavior? When I <code>pull</code>/<code>checkout</code>, wouldn't I (almost?) always want all the modules update to match?</p>

<p>Bonus: Is there a way to automatically have <code>git</code> fetch and check out new submodules? I.e., is there a Just Works mode for submodules. And if not, what do I not understand about the design of submodules that makes the default behavior desirable?</p>
","4","874660","",""
"72276563","5329722","2022-05-17 15:14:44","2","52","<git><git-submodules>","Untracked git submodules","<p>For one of my project I decided to use submodules.<br />
They are nice to keep different plugins for application in separate repos, but I have one issue.<br />
Any time I have uncommited changes in the submodule I cannot do anything with the main repo, it keeps track of the submodule and the moment I try to do a commit or anything I have to choose between loosing all my submodule changes or commit them first.</p>
<p>Its a huge pain to work on the main repo because the submodules getting in the way all the time. I have lost changes in the submodule so many times due to main repo deleting them when I was stashing or changing anything in the main repo.</p>
<p>So my question is, is there a way to tell git to only clone a subrepository but completely ignore it afterwards?</p>
","4","5329722","0","0"
"72275167","10508561","2022-05-17 13:45:22","0","113","<git><go><git-submodules>","How to import gitsubmodule containing golang code with go.mod and go.sum file","<p>I am facing issue in importing a gitsubmodule containing golang package with go.mod and go.sum file inside the package inside main project directory. But facing issue in importing the package.</p>
<p>go.mod inside gitsubmodule package</p>
<pre><code>module abc

go 1.18

</code></pre>
<p>go.mod inside main project directory</p>
<pre><code>module def

go 1.18
</code></pre>
<p>files inside the gitsubmodule go package has imports</p>
<pre><code>package abc

import &quot;abc/sample&quot;

</code></pre>
<p>file for main project package</p>
<pre><code>package main

import &quot;def/abc/sample&quot;


</code></pre>
<p>the structure of my project code is like this:-</p>
<pre><code>|── go.sum
|── go.mod
|── main.go import &quot;def/abc&quot;
abc
    ├── constant
    |    ├── constant.go
    ├── abc.go  ----&gt; import &quot;abc/constant&quot;
    |── go.mod
    |── go.sum
</code></pre>
<p>and but import &quot;abc/constant&quot; giving problem for gitsubmodule saying import error when I try to run main.go file</p>
","1","10508561","0","0"
"72286203","17024193","2022-05-18 09:04:45","1","199","<git><docker><docker-compose><git-submodules>","Docker compose build failed when trying to update git submodule from remote repo","<p>I need help with docker compose (v2.5.0) and git submodules. It is big project with many microservices using JS. Some microservices have git submodule (the same one) inside. I created docker-compose.yml which builds the whole project. It works great when I'm pointing build context to local directory like:</p>
<pre><code>some-service:
 build:
  context: /my/home/dir/some-service_dir
</code></pre>
<p>but when I'm trying to build from remote git repo</p>
<pre><code>some-service:
 build:
  context: https://gitURL/some-service.git#branch
</code></pre>
<p>and the service have submodule inside, it crashes with <code>fatal: not a git repository (or any of the parent directories): .git</code> when tries to do <code>git submodule update</code>. I tried to specify the appropriate instructions in the docker file and  in the makefile alternately.
This service has .gitsubmodule file with right structure like</p>
<pre><code>[submodule &quot;name&quot;]
    path = submoduleDir
    url = https://git.repo.url/mysubmodule.git
    branch = develop
</code></pre>
<p>all configs in .git are also correct, I suppose, cause it works great in other cases.
So I have no idea what happening and why it doesn't work only when context points to the remote git repo. Any suggestions?</p>
","0","17024193","",""
"54384035","151641","2019-01-27 00:20:30","8","1208","<git><git-submodules><git-checkout><git-lfs>","Git checkout branch and prune everything related to previous checkout (incl. git-lfs remains)","<p>I have a repo of a superproject with number of submodules.
lots of files of both are in Git LFS.</p>

<p>The repo comes with multiple long-lived release branches.</p>

<h2>Problem</h2>

<p>The complete clone transfers 20 GB of Git and Git LFS objects.</p>

<p>Checkout of master deflates the total repo to 40 GB in total,
that is the objects and the working tree files together.</p>

<p>Let's consider three separate clones as canonical way to create
three working copies, one per the long-lived branch:</p>

<pre><code>git clone --branch master      --recursive --jobs 8 https://repo repo_master
git clone --branch release/1.0 --recursive --jobs 8 https://repo repo_release1
git clone --branch release/2.0 --recursive --jobs 8 https://repo repo_release2
</code></pre>

<p>I'm trying to work out a network-optimised equivalent of the above:
- clone once with the default master checked out
- make multiple copies of the cloned repo
- checkout release branches</p>

<h2>Questions</h2>

<ol>
<li><p>How to checkout an existing branch fetched from remote,
delete the previous branch and clean up any remains?</p></li>
<li><p>How to clean up everything related to the previously checked out
master and its working tree, any cached previous LFS downloads etc.?</p></li>
</ol>

<p>But, to keep the history of origin/master.</p>

<h2>Solution Prototype</h2>

<p>Here is what I have come up with for the the network-optimised workflow:</p>

<pre><code>git clone --branch master --recursive --jobs 8 https://repo repo_master

cp -a repo_master repo_release1
cp -a repo_master repo_release2

cd repo_release1
git checkout -b release/1.0 --track origin/release/1.0

git pull
git submodule update --init --recursive --jobs 8

git branch -D master

git lfs prune
git submodule foreach --recursive git lfs prune

git lfs checkout
git submodule foreach --recursive git lfs checkout
</code></pre>

<h3>Questions to Prototype</h3>

<p>Does it look correct or any steps are missing/redundant?</p>

<p>Does it make sense to run any of these, at which point?</p>

<pre><code>git gc --aggressive --prune=now
git submodule foreach --recursive git gc --aggressive --prune=now
</code></pre>

<p>Please, assume, no new commits will happen locally between the
<code>git clone --branch master ...</code> and <code>cp -a repo_master ...</code>.</p>

<p>(<em>The problem was also posted to <a href=""https://public-inbox.org/git/CABUeae_tm__uvHH74UARG805uTa2Sf0v6wYk=pmKvxxH3kvQ8A@mail.gmail.com/"" rel=""noreferrer"">Git mailing list</a> and <a href=""https://github.com/git-lfs/git-lfs/issues/3499"" rel=""noreferrer"">Git LFS at GitHub</a></em>)</p>
","6","151641","0","0"
"54387750","2266772","2019-01-27 11:43:19","9","23267","<git><jenkins><bitbucket><git-submodules>","Error while checking out git repository with submodules","<p>While deploying my tests on a Jenkins instance, I noticed that some submodules could not be initialized.</p>

<p>In Jenkins, I checked the checkbox for <code>Use credentials from default remote of parent repository</code> which made it possible to initialize the first submodule. Unfortunately, no matter what I do, the rest doesn't work.</p>

<pre><code> &gt; git remote # timeout=10
 &gt; git submodule init # timeout=10
 &gt; git submodule sync # timeout=10
 &gt; git config --get remote.origin.url # timeout=10
 &gt; git submodule init # timeout=10
 &gt; git config -f .gitmodules --get-regexp ^submodule\.(.+)\.url # timeout=10
 &gt; git config --get submodule.sub1.url # timeout=10
 &gt; git remote # timeout=10
 &gt; git config --get remote.origin.url # timeout=10
 &gt; git config -f .gitmodules --get submodule.sub1.path # timeout=10
using GIT_SSH to set credentials 
 &gt; git submodule update --init --recursive sub1
 &gt; git config --get submodule.sub2.url # timeout=10
 &gt; git remote # timeout=10
 &gt; git config --get remote.origin.url # timeout=10
 &gt; git config -f .gitmodules --get submodule.sub2.path # timeout=10
using GIT_SSH to set credentials 
 &gt; git submodule update --init --recursive sub2
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
[Bitbucket] Notifying commit build result
[Bitbucket] Build result notified
hudson.plugins.git.GitException: Command ""git submodule update --init --recursive sub2"" returned status code 1:
stdout: 
stderr: Cloning into '/var/jenkins_home/workspace/develop/sub2'...
repository does not exist.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@bitbucket.org:xxxx/xxx.git/sub2' into submodule path '/var/jenkins_home/workspace/develop/sub2' failed
Failed to clone 'sub2'. Retry scheduled
Cloning into '/var/jenkins_home/workspace/develop/sub2'...
repository does not exist.
fatal: Could not read from remote repository.
</code></pre>

<p>I also checked that in <code>.git/config</code>, I have the proper paths to the other repositories in bitbucket.</p>
","0","2266772","0","0"
"72289145","11658471","2022-05-18 12:25:32","1","1735","<git><gitlab><gitlab-ci><access-token><git-submodules>","git submodule update with Access Token inconsistent behavior","<h3>Context</h3>
<p>On a self-managed GitLab instance, with multiple users and groups,
I'm trying to do a <code>git submodule update --init --recursive</code> in the <code>.gitlab-ci.yml</code> of <code>main_project</code>. This repo contains a submodule (<code>filter_lib</code>), itself containing a submodule (<code>helper_funcs</code>):</p>
<pre class=""lang-none prettyprint-override""><code>main_project
├── app
│   └── filter_lib                    &lt;- submodule
│       ├── .gitmodules
│       ├── lib
│       └── helper_funcs              &lt;- submodule
│           └── funcs
├── .gitmodules
├── .gitlab-ci.yml
├── .gi
└── tests
    └── test_stuff.py
</code></pre>
<p><code>main_project</code> is in one GitLab group (let's call it <code>group1</code>) and both submodules (<code>filter_lib</code> and <code>helper_funcs</code>) are in another GitLab group and subgroup (<code>group2/subgroupA</code>), with no acces right to each other:</p>
<pre class=""lang-none prettyprint-override""><code>my_gitlab_instance
├── group1
│   └── main_project
└── group2
    └── subgroupA
        ├── filter_lib
        └── helper_funcs
</code></pre>
<h3>Problem</h3>
<p>I want to <code>init</code> all submodules.<br />
First, I tried with this code at the beginning of my <code>.gitlab-ci.yml</code>:</p>
<pre class=""lang-yaml prettyprint-override""><code>variables:
  GIT_SUBMODULE_STRATEGY: recursive
</code></pre>
<p>This CI failed with the following error before attempting to run my scripts:</p>
<pre class=""lang-none prettyprint-override""><code>Updating/initializing submodules recursively with git depth set to 50...
Submodule 'app/filter_lib' (https://gitlab-ci-token:[MASKED]@my_gitlab_instance.com/group2/subgroupA/filter_lib.git) registered for path 'app/filter_lib'
Cloning into '/builds/group1/main_project/app/filter_lib'...
Submodule path 'app/filter_lib': checked out '28d6c0f2d0bc691c29a406f44ae9b69b4e00f2b2'
Submodule 'helper_funcs' (git@gitlab:group2/subgroupA/helper_funcs) registered for path 'app/filter_lib/helper_funcs'
Cloning into '/builds/group1/main_project/app/filter_lib/helper_funcs'...
error: cannot run ssh: No such file or directory
fatal: unable to fork
fatal: clone of 'git@gitlab:group2/subgroupA/helper_funcs' into submodule path '/builds/group1/main_project/app/filter_lib/helper_funcs' failed
Failed to clone 'helper_funcs'. Retry scheduled
Cloning into '/builds/group1/main_project/app/filter_lib/helper_funcs'...
error: cannot run ssh: No such file or directory
fatal: unable to fork
fatal: clone of 'git@gitlab:group2/subgroupA/helper_funcs' into submodule path '/builds/group1/main_project/app/filter_lib/helper_funcs' failed
Failed to clone 'helper_funcs' a second time, aborting
Failed to recurse into submodule path 'app/filter_lib'
</code></pre>
<p>It is kind of expected because <code>group1/main_project</code> doesn’t have read rights to any repo in <code>group2</code>.</p>
<p>So I tried another way, by changing the <code>GIT_SUBMODULE_STRATEGY</code> to normal and allowing <code>group1/main_project</code> to access <code>group2/subgroupA/filter_lib</code> and <code>group2/subgroupA/helper_funcs</code> the following way:</p>
<p>For <code>filter_lib</code>, I went into the repo <em>Settings &gt; Access Tokens</em> and generated a token with all available scopes and the <code>Maintainer</code> role. I then added this token in <em><code>main_project</code> &gt; Settings &gt; CI/CD &gt; Variables</em> as a masked variable named <em>FILTER_LIB_CLONE_KEY</em>.
I did the same for <code>helper_funcs</code>, with the variable named <em>HELPER_FUNCS_CLONE_KEY</em>.</p>
<p><strong>Please note all the following commands were executed through the <code>.gitlab-ci.yml</code> of <code>main_project</code>.</strong></p>
<p>I then sed the .gitmodules of <code>main_project</code> before attempting to <code>git submodule update</code>, so that it looked like this during the CI stage:</p>
<pre class=""lang-sh prettyprint-override""><code>$ cat .gitmodules
[submodule &quot;app/filter_lib&quot;]
    path = app/filter_lib
    url = https://gitlab-ci-token:[MASKED(FILTER_LIB_CLONE_KEY)]@my_gitlab_instance.com/group2/subgroupA/filter_lib.git
</code></pre>
<p>Running <code>git submodule update --init</code> in <code>main_project</code> successfully cloned the content of <code>group2/subgroupA/filter_lib</code>:</p>
<pre class=""lang-sh prettyprint-override""><code>$ cd app/filter_lib
$ ls -al
total 23
drwxrwxrwx    4 root     root          4096 May 17 10:51 .
drwxrwxrwx    3 root     root          4096 May 17 09:24 ..
-rw-rw-rw-    1 root     root            40 May 17 09:24 .git
-rw-rw-rw-    1 root     root           137 May 17 10:51 .gitmodules
drwxrwxrwx    2 root     root          4096 May 17 10:52 helper_funcs
drwxrwxrwx    6 root     root          4096 May 17 09:24 lib
</code></pre>
<p>I did the same for <code>app/filter_lib/.gitmodules</code>, which looked like this during the CI after the sed:</p>
<pre class=""lang-sh prettyprint-override""><code>$ cat app/filter_lib/.gitmodules
[submodule &quot;helper_funcs&quot;]
    path = helper_funcs
    url = https://gitlab-ci-token:[MASKED(HELPER_FUNCS_CLONE_KEY)]@my_gitlab_instance.com/group2/subgroupA/helper_funcs.git
    ignore = dirty
</code></pre>
<p>In <code>filter_lib</code>, I then did:</p>
<pre class=""lang-sh prettyprint-override""><code>$ git submodule update
Host key verification failed.
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@gitlab:group2/subgroupA/helper_funcs' into submodule path '/builds/group1/main_project/app/filter_lib/helper_funcs' failed
Failed to clone 'helper_funcs'. Retry scheduled
Host key verification failed.
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@gitlab:group2/subgroupA/helper_funcs' into submodule path '/builds/group1/main_project/app/filter_lib/helper_funcs' failed
Failed to clone 'helper_funcs' a second time, aborting
</code></pre>
<p>However, manually cloning the <code>helper_funcs</code> repo at the right place with <em>HELPER_FUNCS_CLONE_KEY</em> works.</p>
<p>Why is it possible to <code>git clone</code> but not to <code>git submodule update</code> with the same repo url?</p>
<p>Why does the <code>git submodule update</code> works on the first submodule but not on the second, even though access rights are the same?</p>
","4","11658471","",""
"54395666","7598461","2019-01-28 04:44:19","10","5648","<git><git-submodules>","Why does git say 'Changes not staged for commit' and indicate the submodule folder?","<p>I have a git submodule inside another module, added via <code>git submodule add &lt;...&gt;</code> (command issued from parent repo), so the <code>.gitmodules</code> file is automatically generated inside the parent repo.</p>

<p>Suppose I make a change to the submodule (edit: and do <em>not</em> commit those changes) and then navigate back out to the parent and do <code>git add -A</code> and then <code>git status</code>, it says ""Changes not staged for commit: <em>submodule dir name</em> ... etc"".</p>

<p>I thought git would read <code>.gitmodules</code> file (which the parent git generated!), realise its a git submodule directory and therefore not mention its unstaged status when I ask the parent for its status?</p>
","8","7598461","0","0"
"54455733","4255102","2019-01-31 07:54:26","0","210","<git><github><git-submodules>","How to understand workflow of git submodule function","<p>I'm working on git submodule as this:</p>

<p>1) create MASTER project git repo, do some commit </p>

<p>2) create SUB project git repo, do some commit </p>

<p>3) use git submodule function, add SUB into MASTER/somefolder/</p>

<p>4) Then Alice do 2 commit on SUB, branch Alice.</p>

<p>5) Then Bob do 2 commit, branch Bob.</p>

<p>6) Then I add Alice and Bob's commit into SUB and MASTER by submodule function.</p>

<hr>

<p>In this process, I have some confuse:</p>

<p>1) In init process, which add SUB into MASTER, how will MASTER remember add commits in SUB? </p>

<p>For example, if SUB have 2 branch, which commits of branch will be remembered in MASTER?</p>

<p>If it's use SUB's master branch? Or use SUB's HEAD?</p>

<p>If use HEAD, then if I point HEAD into SUB's another branch (NOT master), what will happen?</p>

<p>2) When I add Alice's 2 commits of SUB into MASTER, how will MASTER know I want to add Alice's 2 commit, not Bob's? </p>

<p>As it's said MASTER do NOT care SUB's branch, only care SUB's commit.</p>

<hr>

<p>This is my understand of implementation of git submodule function:</p>

<p>MASTER only remember ONE commit id like abcdefg123456.</p>

<p>Then if you do <code>git submodule update --init --recursive</code>, MASTER will download all commits in the branch of abcdefg123456 located, until abcdefg123456 commit.</p>

<p>Is it right?</p>

<hr>

<p>If above is right, then I'm confused, branch Alice and Bob all add commits, If I use abcdefg123456 in Alice, then how to add Bob's commits?</p>
","0","4255102","",""
"54497381","3716664","2019-02-02 20:49:17","6","1247","<git><git-merge><git-submodules><git-pull>","Merge submodule changes after git pull on parent repository","<p><em>How to fetch&amp;merge main repository and do the same for all submodules using <strong>single</strong> command?</em></p>

<p>I have a repository <em>A</em> which includes submodule <em>B</em>.
Submodule <em>B</em> is often updated and changes are not always up to date.</p>

<p>I can update and merge new changes by doing following</p>

<pre><code>cd A/B    &lt;-- enter submodule directory
git pull  &lt;-- run pull to fetch and !!merge!! submodule changes
</code></pre>

<p>What I want to do is to run single command to pull&amp;merge main repository and do the same with all submodules.</p>

<pre><code>cd A                           &lt;-- Now enter to parent directory
git pull --recurse-submodules  &lt;-- Fetch&amp;merge changes on main repository
                               &lt;-- and pull changes on all submodules 
</code></pre>

<p>What actually happens is:</p>

<ol>
<li>Changes on repository <em>A</em> are fetched and merged => <strong>OK</strong></li>
<li>Changes on submodule repository <em>B</em> are only fetched and not merged => <strong>NOK</strong></li>
</ol>

<p>Current solution is:</p>

<pre><code>cd A
git pull --recurse-submodules
cd B
git merge   &lt;-- Now merge fetched changes from submodule remote
</code></pre>

<p>or:</p>

<pre><code>cd A
git pull --recurse-submodules
git submodule foreach git merge origin master
</code></pre>

<p>Other questions I checked, without luck:</p>

<p><a href=""https://stackoverflow.com/questions/1030169/easy-way-to-pull-latest-of-all-git-submodules"">Easy way to pull latest of all git submodules</a></p>

<p><a href=""https://stackoverflow.com/questions/3497123/run-git-pull-over-all-subdirectories?noredirect=1&amp;lq=1"">Run git pull over all subdirectories</a></p>

<p>Running <code>git --help pull</code> on git version <code>2.20.1</code> I see this message:</p>

<blockquote>
  <p>BUGS Using --recurse-submodules can only fetch new commits in already checked out submodules right now. When e.g. upstream added a new submodule in the just fetched commits of the superproject the submodule itself can not be fetched, making it impossible to check out that submodule later without having to do a fetch again. This is expected to be fixed in a future Git version.</p>
</blockquote>

<p><em>Is this related to the issue?</em></p>
","0","3716664","0","0"
"73323365","15170120","2022-08-11 15:33:04","2","1134","<c#><.net-core><git-submodules><visual-studio-2022>","Visual Studio Pro 2022 add git submodule to solution","<p>I am trying to use git submodules to manage shared code between two projects written in C#. I have tried the solutions from these questions with no luck:</p>
<p><a href=""https://stackoverflow.com/questions/28273980/add-git-submodule-as-reference-to-existing-solution-in-vs"">Add git submodule as reference to existing solution in VS</a></p>
<p><a href=""https://stackoverflow.com/questions/54358339/how-to-add-a-git-submodule-for-vsts-for-use-with-visual-studio-2017"">How to add a GIT submodule for VSTS for use with Visual Studio 2017</a></p>
<p><a href=""https://stackoverflow.com/questions/26951252/workflow-for-using-git-submodules-in-visual-studio"">Workflow for using git submodules in Visual Studio</a></p>
<p>I can add the submodule using <code>git submodule add &lt;url&gt;</code> followed by <code>git submodule init</code> and git recognizes it, but Visual Studio does not. Adding the .csproj file as an Existing Item in Visual Studio doesn't lead to it recognizing the classes in the submodule exist either. <strong>What can I do to make Visual Studio recognize the classes in the submodule?</strong></p>
","0","15170120","",""
"73364189","12386300","2022-08-15 17:02:06","1","261","<git><git-submodules>","Hooking into ""git submodule update –init"" before fetching","<p>I have a configuration problem with scripting around Git submodule initialization. I need to apply some tuning on the LFS settings within some modules before the actual fetching process starts.</p>
<p>There is the <code>git submodule init</code> command but this does not do the real job, i.e. it does not initialize the actual submodule storage folders. Thus, I cannot set module specific Git options there. (Which is an evil trap BTW, the mount paths are created and you can chdir into them but calling git-config inside modifies the super repo and not the submodule).</p>
<p>OTOH there is the usual <code>git submodule update --init</code> method, but I cannot see any way to run extra code during its operation. I tried adding <code>--no-fetch</code> but this does not make any difference. I also cannot see a <code>--no-checkout</code> or <code>--no-clone</code> option which would just skip the checkout resp. cloning.
 </p>
<p>What am I overlooking? I cannot imagine that there is no convenient way of hooking into the SM initialization process, or splitting it somehow into two stage (one before fetching and the rest later).</p>
","0","12386300","",""
"73370682","7160574","2022-08-16 08:05:14","0","197","<git><phpstorm><git-submodules>","PhpStorm: Won't receive changes of git submodule due to missing git remote","<p>I have three projects (<code>Main</code>, <code>Submodule</code>, <code>Test</code>).</p>
<p>I added the <code>Submodule</code> project as <code>git submodule</code> in <code>Main</code> (which contains a lot of other code) and in <code>Test</code> (which is empty).</p>
<p>Afterwards, I make changes in the <code>Submodule</code> project, commit and push them.</p>
<p><a href=""https://i.stack.imgur.com/wdNu5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wdNu5.png"" alt=""enter image description here"" /></a></p>
<p>When I press the <kbd>Update Project</kbd>-Button in my IDE (PhpStorm) inside the <code>Test</code> project, it fetches all incoming changes of the project as well as the changes made to the <code>Submodule</code> project.</p>
<p>But when I press the <kbd>Update Project</kbd>-Button inside the <code>Main</code> project, it just fetches the incoming changes to the project but won't get the changes made to the <code>Submodule</code> project.</p>
<p><code>git status</code> also says that there are changes when used in the <code>Test</code> project but says &quot;up to date&quot; when used in the <code>Submodule</code> project</p>
<p>Terminal on <code>Test</code> project:</p>
<pre><code>PS C:\Users\USERNAME\PhpstormProjects\Test&gt; git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   aar-shared (new commits)

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
PS C:\Users\USERNAME\PhpstormProjects\Test&gt;
</code></pre>
<p>Terminal on <code>Main</code> project:</p>
<pre><code>PS C:\Users\USERNAME\PhpstormProjects\Main&gt; git status
On branch add-shared-repo                               
Your branch is up to date with 'origin/add-shared-repo'.
                                                           
nothing to commit, working tree clean                      
PS C:\Users\USERNAME\PhpstormProjects\Main&gt;
</code></pre>
<p>Does anyone have any idea what I'm doing wrong? How can I bring the submodule up to date?</p>
<p><strong>UPDATE:</strong></p>
<p>I just found a difference between my two projects <code>Main</code> and <code>Test</code>.</p>
<p>In the <code>Test</code> project the &quot;Manage Remotes&quot;-Window looks like this:</p>
<p><a href=""https://i.stack.imgur.com/FDVGm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FDVGm.png"" alt=""enter image description here"" /></a></p>
<p>In the <code>Main</code> project it looks like this:</p>
<p><a href=""https://i.stack.imgur.com/GrY0Z.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GrY0Z.png"" alt=""enter image description here"" /></a></p>
<p>I don't know why it wasn't added automatically like in the <code>Test</code> project but to all the PhpStorm people out there, does anyone know how to add those grouping to the remotes, so like in the first picture &quot;just-a-test&quot; and &quot;aar-shared&quot; above the corresponding remotes?</p>
<p>When I try to add a new remote manually I can just add the name (like origin) and URL.</p>
","3","7160574","",""
"55457955","3051029","2019-04-01 14:50:45","0","1263","<git><docker><git-submodules>","Cannot update git module within docker container","<p>I have got a project that has some dependencies. They are defined in <code>.gitmodules</code>. I want to make sure the modules are up to date.
So, here's what I do in the <code>Dockerfile</code>.</p>

<pre><code>RUN git submodule update --init --recursive
</code></pre>

<p>And it gives me the error: <code>fatal: Not a git repository (or any of the parent directories): .git</code>.</p>

<p>The directory is fine. I checked <code>ls -a</code> right before this line and the folder is correct.
The git is also up to date (<code>2.11</code>).</p>

<p>It just doesn't see <code>.gitmodules</code> no matter what I do. </p>

<p>Do you guys have any thoughts about what might cause this?</p>

<p><strong>EDIT:</strong> Here are the relevant parts of the <code>Dockerfile</code></p>

<pre><code>FROM python:3

RUN mkdir -p /usr/src/docker_container
ADD ./ /home/docker_container/
WORKDIR /home/docker_container/my-project

RUN git submodule update --init --recursive &amp;&amp; \
mkdir build &amp;&amp; cd build &amp;&amp; \
cmake .. &amp;&amp; cmake --build . &amp;&amp; cd ..
</code></pre>

<p>The the folder structure is like this:</p>

<p>| my_project:</p>

<p>|--- module1</p>

<p>|--- module2 </p>

<p>|--- some source code and <code>.gitmodules</code> file</p>
","4","3051029","",""
"55518417","2409793","2019-04-04 14:24:54","0","329","<git><git-submodules>","Re-establish git's submodule tracking branch after changes to remote","<p>I have a project with 4 submodules, as in:</p>

<pre><code>$ cat .gitmodules 
[submodule ""/submodules/sub1""]
    path = /submodules/sub1
    url = git@my-gitlab-server:namespace/sub1.git
[submodule ""/submodules/sub2""]
    path = /submodules/sub2
    url = git@my-gitlab-server:namespace/sub2.git
[submodule ""/submodules/sub3""]
    path = /submodules/sub3
    url = git@my-gitlab-server:namespace/sub3.git
[submodule ""/submodules/sub4""]
    path = /submodules/sub4
    url = git@my-gitlab-server:namespace/sub4.git
</code></pre>

<p>When i first cloned my project, it seems that e.g. for <code>sub2</code>, the remote tracking branch (and perhaps the project's default was <code>master</code>). </p>

<p>I was informed that this changed to <code>develop</code>.</p>

<p>So now I have this problem:</p>

<pre><code>$ git submodule update --remote
fatal: Needed a single revision
Unable to find current origin/master revision in submodule path '/submodules/sub2'
</code></pre>

<p>How can I remedy this?</p>
","0","2409793","",""
"55537614","4774963","2019-04-05 14:26:37","0","542","<git><git-submodules><git-status>","Git - in submodule 'git status' does not give ""is up-to-date"" info as in root repo","<p>I have a git repo with a submodule.
In the root repo, <code>git status</code> gives me the status of the branch in compare with remote branch. Eg: </p>

<pre><code>On branch develop
Your branch is up-to-date with 'origin/develop'.
</code></pre>

<p>But in the submodule repo, I dont have the second line. 
How can I get this information in all submodules? Thanks.</p>
","7","4774963","",""
"55569644","5359971","2019-04-08 08:57:46","3","1718","<git><git-submodules>","How to fix 'gitmodulesPath: disallowed submodule path' on 'git fsck'","<p>I have a very old git project, and i did a <code>git fsck</code> on it.
I am receiving the following output:</p>

<pre><code>git fsck --full
Prüfe Objekt-Verzeichnisse: 100% (256/256), Fertig.
Prüfe Objekte: 100% (35666/35666), Fertig.
error in blob 5ac33d03cc28290156dcd17cf8a4efd95adee7b9: gitmodulesPath: disallowed submodule path: --force
dangling blob dc3821dca2a21a6253c929915011e5b1be932203
</code></pre>

<p>After some digging in the current state I also checked the history of the <code>.gitmodules</code> file because the current version did not have an error.</p>

<p>I found a commit more than a year ago that has the following <code>.gitmodules</code> content:</p>

<pre><code>[submodule ""--force""]
    path = --force
    url = git@gitlab.mygitserver.com:mygroup/myproject.git
</code></pre>

<p>in the next commit this submodule was deleted again. so somebody clearly was trying something out how submodules work. the problem is now, that it is in the project history.</p>

<p>Is <code>git fsck</code> really checking every <code>.gitmodules</code> file in history if it had errors at any time?
And how can i fix this?</p>
","0","5359971","",""
"55568771","6336963","2019-04-08 08:03:44","2","982","<git><git-submodules><mount>","Add one part of git repo as submodule to another","<p>I need o duplicate one folder in my project o another. But when I try:</p>

<p><code>git submodule add ./first-folder ./second-folder/sumbodule</code></p>

<p>it fails with:</p>

<pre><code>fatal: clone of 'git@github.com:username/projectname.git/first-folder' into submodule path
</code></pre>

<p>Am I doing something wrong or it's impossible by default and I should just mount it somehow? Thanks.</p>
","0","6336963","",""
"55583688","11326185","2019-04-09 00:57:59","3","3528","<git><git-submodules><git-flow>","What is the best way to implement git flow with a project with many submodules","<p>We have build an Asp.net core micro-services project and organized the code into one super project and multiple Git submodules (each microservice is a submodule). Now we want to start using the Git Flow workflow. </p>

<p>What is the best way to initlize the gitflow? do we need to have one git flow per submodule OR we should have one global git flow at the super project level ?</p>

<p>Thanks!</p>
","3","11326185","0","0"
"55605604","2960788","2019-04-10 05:56:05","1","1563","<git><jenkins><jenkins-pipeline><git-submodules>","How to checkout git submodule with different deploy key in declarative pipeline","<p>I have a project hosted in a Enterprise GitHub instance. The project references a sub module in the same instance. </p>

<ul>
<li><p>For accessing the main project, I configured the ""DeployKey_1"" in Github repository. </p></li>
<li><p>For accessing the submodule project, I configured the ""DeployKey_2"" in Github repository.</p></li>
</ul>

<p>Note: I can't use the same deploy key on GitHub Enterprise: <a href=""https://help.github.com/en/articles/error-key-already-in-use"" rel=""nofollow noreferrer"">Key Already in Use</a></p>

<p>The Jenkins Job is defined as Multibranch pipeline and I use the <code>checkout</code> command in the Jenkinsfile:</p>

<pre><code>checkout([
    $class: 'GitSCM',
    branches: scm.branches,
    doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
    extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', trackingSubmodules: false]],
    userRemoteConfigs: scm.userRemoteConfigs
])
</code></pre>

<p>I tried both option: Set <code>parentCredentials: true</code> and <code>parentCredentials: false</code>, but both are resulting in this error when executing the job:</p>

<blockquote>
  <p>hudson.plugins.git.GitException: Command ""git submodule update --init
  --recursive my-submodule"" returned status code 1: stdout:  stderr: Cloning into
  '/private/tmp/workspace/project_develop/my-submodule'...
  git@github.mycompany.com: Permission denied (publickey). fatal: Could not
  read from remote repository.</p>
  
  <p>Please make sure you have the correct access rights and the repository
  exists. fatal: clone of
  'git@github.mycompany.de:myorga/my-submodule.git'
  into submodule path
  '/private/tmp/workspace/project_develop/my-submodule'
  failed Failed to clone 'my-submodule'. Retry scheduled Cloning
  into
  '/private/tmp/workspace/project_develop/my-submodule'...
  git@github.mycompany.de: Permission denied (publickey). fatal: Could not
  read from remote repository.</p>
  
  <p>Please make sure you have the correct access rights</p>
</blockquote>

<p>Both deploy keys are available on Jenkins. So, how can I checkout the submodules? How can I tell the <code>checkout</code> command to use a specific <code>credentials-id</code> when checking out the submodule?</p>
","0","2960788","",""
"55617199","12248433","2019-04-10 16:20:27","1","31","<git><github><git-submodules><git-subtree>","Can I share a subdirectory with other subdirectories in the same git repo?","<p>Let's say my repo structure is currently something like:</p>

<pre><code>ROOT
--LanguageA
----Project A-LangA
----Project B-LangA
----Project C-LangA
--Language B
----Project A-LangB
------SharedFile-1
------SharedFile-2
------SharedFile-3
----Project B-LangB
------SharedFile-1
------SharedFile-2
------SharedFile-3
----Project C-LangB
------SharedFile-1
------SharedFile-2
------SharedFile-3
</code></pre>

<p>Currently, if I need to update <code>SharedFile-1</code>, I need to do so within each <code>Project</code> directory. Is it possible to use <code>git submodule</code> or <code>git subtree</code> to create something like:</p>

<pre><code>ROOT
--LanguageA
----Project A-LangA
----Project B-LangA
----Project C-LangA
--Language B
----Project A-LangB
------SharedFile-1 (auto-updating clone)
------SharedFile-2 (auto-updating clone)
------SharedFile-3 (auto-updating clone)
----Project B-LangB
------SharedFile-1 (auto-updating clone)
------SharedFile-2 (auto-updating clone)
------SharedFile-3 (auto-updating clone)
----Project C-LangB
------SharedFile-1 (auto-updating clone)
------SharedFile-2 (auto-updating clone)
------SharedFile-3 (auto-updating clone)
----Language B Shared Files
------SharedFile-1
------SharedFile-2
------SharedFile-3
</code></pre>

<p>...such that I only have to make edits to <code>ROOT/Language B/Language B Shared Files/*</code> and the changes auto-update in each <code>ROOT/Language B/Project *</code> dir when a user clones the whole repo?</p>

<p>I know I can break it out into a separate repo. But is it possible to have the above structure? I also know I can create an automation script that does this, but I'm trying to use the above structure, to the extent possible.</p>
","2","12248433","",""
"55631116","1593077","2019-04-11 11:10:46","4","844","<git><git-submodules><git-checkout>","Can I make git automatically update submodules when checking out a branch?","<p>I'm working on a git repository with some submodules, which have different revisions on different branches. When I switch branches, I get a:</p>

<pre><code>M          path/to/subrepo
Switched to branch 'another-branch'
</code></pre>

<p>message. I then manually do:</p>

<pre><code>git submodule update --recursive
</code></pre>

<p>and that goes away.</p>

<p>I tried writing a git hook, in .git/hooks/post-checkout:</p>

<pre><code>#!/bin/bash

exec git submodules update --recursive
</code></pre>

<p>but this doesn't seem to do anything. I tried to add an exec echo hello from post-hook line - doesn't seem to work either.</p>

<p>My question: Can I configure git so that the branch checkout itself will also update the submodules, by default?</p>
","0","1593077","",""
"55647123","2085438","2019-04-12 08:06:26","0","82","<git><git-submodules>","choose git submodule depending on the target repo","<p>I have a project that I am pushing to 2 different repositories using the following in the <code>.git/config</code> file :</p>

<pre><code>    [remote ""origin""]
        url = the_main_repo
        fetch = +refs/heads/*:refs/remotes/origin/*
    [remote ""other_repo""]
        url = the_other_repo
</code></pre>

<p>The project itself also has a submodule. My <code>.gitmodules</code> file looks like :      </p>

<pre><code>    [submodule ""the_submodule""]
        path = the_submodule
        url = the_submodule_repo_url
</code></pre>

<p>I would like the <code>the_submodule_repo_url</code> to be different depending on which repo I'm pulling from so that I get the submodule repo from the same source (those are different servers in my network).</p>

<p>How to achieve this ?</p>
","0","2085438","",""
"55679246","226897","2019-04-14 19:31:31","1","104","<git><github><git-submodules>","How to add a git repository that is a subdirectory of an existing repository?","<p>I have a project with the following structure:</p>

<pre><code>ProjA
Controllers
Models
Subprojects
     /SubProject1
     /SubProject1
</code></pre>

<p>I want to make it so that when someone clones <code>ProjA</code> that it brings down the git repos for <code>SubProject1</code> and <code>SubProject2</code>.</p>

<p>I attempted to do this using <code>git submodule</code> like so:</p>

<pre><code>git submodule add https://github.com/myAccount/ProjA Subprojects/SubProject1
</code></pre>

<p>And that <em>seemed</em> to work but when I pulled down <code>ProjA</code> to a new directory my SubProjects were empty.  When I go back to the original and look at the results of <code>git status</code> it shows:</p>

<pre><code>modified:   Subprojects/SubProject1 (modified content)
modified:   teSubprojectst/SubProject2 (modified content, untracked content)
</code></pre>

<p>Doing a <code>git commit...</code> doesn't seem to change anything.  Have I missed a step along the way that would allow me to include those directories in the parent repo?</p>

<p><strong>NOTE</strong> I just noticed that when I try to navigate to the subprojects in github it throws a 404 error.  Not sure if I messed something up when I created them using <code>submodule</code>?  When I attempt to use <code>--recurse-submodules</code> I get a not found error.</p>
","1","226897","",""
"55709950","1983029","2019-04-16 13:56:46","0","27","<git><git-submodules>","Resolving the repositories referenced in .gitmodules","<p>I have a project with a number of submodules and I have a small issue resolving them on Jenkins, so ..</p>

<p>Is there any way conditionally resolve/specify submodules in.gitmodules file?</p>

<p>I've got scenario where repos on Jenkins resolve via ssh protocol and locally via https, </p>

<p>Please advise if there is any small tricks I could apply in relation to git.</p>

<p>I was thinking to apply git hooks etc, but I've got feeling this could be a bit of overkill.</p>
","6","1983029","",""
"55738700","691197","2019-04-18 03:24:07","1","1541","<git><github><git-submodules>","Unable to create git submodule - remote: Not Found","<p>When creating a git submodule using git bash, I am getting below error</p>

<pre><code>$ git submodule add  https://github.com/******/my-repo/my-app 
Cloning into 'D:/my-repo/my-app'...
remote: Not Found
fatal: repository 'https://github.com/*******/my-repo/my-app/' not found
fatal: clone of 'https://github.com/*******/my-repo/my-app' into submodule path 'D:/my-repo/my-app' failed
</code></pre>

<p>Below is my .git/config file</p>

<pre><code>$ cat .git/config
[core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
        symlinks = false
        ignorecase = true
[remote ""origin""]
        url = https://github.com/*******/my-repo.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
        remote = origin
        merge = refs/heads/master
</code></pre>

<p>I was able to clone my-repo from github, but when I try to add a submodule after cloning, I am seeing this error. Should I create a repo for my-app submodule separately in github to be able to add it as a submodule in another repo (my-repo) ?</p>

<p>Or, am I missing any configuration here ?</p>

<p>PS: I was following this link - <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow noreferrer"">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></p>
","0","691197","0","0"
"72695667","78000","2022-06-21 05:18:09","6","3111","<github><github-actions><git-submodules>","How to git clone a private repo with a private submodule in a GitHub Action?","<p>I have two private GitHub repositories within my organisation (or my user). One of them contains the other as a submodule. How can I clone this other private repository with its containing submodule?</p>
<p>I tried</p>
<pre><code>- uses: actions/checkout@v3
  with:
    submodules: true
</code></pre>
<p>However this failed with an error message on the submodule part, is there some permission I should add or other?</p>
<pre><code>Fetching submodules
  /usr/bin/git submodule sync
  /usr/bin/git -c protocol.version=2 submodule update --init --force --depth=1
  Submodule '.github/workflows/MYPROJECT1' (https://github.com/MYUSER/MYPROJECT1.git) registered for path '.github/workflows/MYPROJECT1'
  Cloning into '/home/runner/work/MYPROJECT2/MYPROJECT2/.github/workflows/MYPROJECT1'...
  remote: Repository not found.
  Error: fatal: repository 'https://github.com/MYUSER/MYPROJECT1.git/' not found
  Error: fatal: clone of 'https://github.com/MYUSER/MYPROJECT1.git' into submodule path '/home/runner/work/MYPROJECT2/MYPROJECT2/.github/workflows/MYPROJECT1' failed
  Failed to clone '.github/workflows/MYPROJECT1'. Retry scheduled
  ... more errors
</code></pre>
","1","78000","0","0"
"72705648","9608133","2022-06-21 18:36:22","0","450","<git><git-submodules>","""git submodule update"": how to choose value for the ""--jobs"" option?","<p>The official documentation <a href=""https://git-scm.com/docs/git-submodule#Documentation/git-submodule.txt---jobsltngt"" rel=""nofollow noreferrer"">has the following description</a>:</p>
<blockquote>
<p><strong>--jobs </strong></p>
<p>This option is only valid for the update command. Clone new submodules in parallel with as many jobs. Defaults to the
<code>submodule.fetchJobs</code> option.</p>
</blockquote>
<p>This description is not complete to understand what value to use.</p>
<ol>
<li>Do I need to set <code>--jobs</code> to be equal my Git submodules count? E.g. <code>--jobs $GIT_SUBMODULES_COUNT</code>.</li>
<li>Will I have a performance speed up if I will use a huge value, e.g. <code>--jobs 1000</code>? What are limitations and performance impacts?</li>
<li>What is <code>submodule.fetchJobs</code> option? I can not find its description in the documentation.</li>
</ol>
","2","9608133","",""
"72730809","12525284","2022-06-23 13:14:46","0","523","<git><git-submodules><pull>","Can't get git pull --recurse-submodules to work","<p>I'm trying to use submodules, but there's something I don't get.
I added the submodule :</p>
<pre><code>$ git submodule add ssh://git@git.bureautique.itm.lan:4242/sdc-sasi/dss.git
$ git config -f .gitmodules submodule.dss.update merge
$ git submodule init
$ git submodule update
$ git push --recurse-submodules=on-demand
$ git add -A
$ git commit -m &quot;Add submodule&quot;
$ git push
</code></pre>
<p>Then, someone else adds a file to the submodule, commits and push.
I can't get the update on my local repo :</p>
<pre><code>$ git pull --recurse-submodules
###############################################################Récupération du sous-module dss
###############################################################Depuis ssh://git.bureautique.itm.lan:4242/sdc-sasi/dss
   3999c9c..1362f93  master     -&gt; origin/master
</code></pre>
<p>But the link still points to the 3999c9c revision :</p>
<pre><code>$ git submodule status
 3999c9c966f6fd058e0ecf9a2f3e947b609a7932 dss (heads/master)
</code></pre>
<p>What am I doing wrong ?</p>
","1","12525284","",""
"55916278","4319615","2019-04-30 07:55:05","0","31","<git><git-submodules><git-bash>","gitmodules doesn't work on existing project","<p>I want to clone submodules on existing project. I don't want to remove and re-clone the project.</p>

<p>The .gitmodules is below:</p>

<pre><code>[submodule ""submodulename""]
    active = .
    path = submodulename
    url = https://name-surname@bitbucket.org/xxx-team/submodulename.git
    branch = master
</code></pre>

<p>The git version is 2.12.2</p>

<p>I run these commands:</p>

<pre><code>git pull --recurse-submodules
Already up-to-date.
</code></pre>

<p>But there is no folder called submodulename. How can I clone the submodules? How can I checkout a branch?</p>
","3","4319615","",""
"72781712","18844666","2022-06-28 06:34:18","1","1307","<git><github-actions><git-submodules><private-repository>","How to Add Private git repo as a submodule in another git repo","<p>How to add a private git repository as a submodule in another git repository?</p>
<p>locally when i do <code>git submodule update</code> it works fine, but in the github action runner, it fails with error stating <strong>url not found</strong> at the checkout step.</p>
<p>Here's how i have configured my workflow file.</p>
<pre><code>jobs:
  update_submodules:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      # - name: Clone submodule
      #   run: git submodule update --init --recursive

      - name: Pull &amp; update submodules recursively
        run: |
          git submodule update --init --recursive
          git submodule update --recursive --remote
</code></pre>
<p>It fails in the second step.</p>
","0","18844666","0","0"
"55937975","2190921","2019-05-01 14:39:12","17","8533","<git><git-submodules>","Can I ""uninitialize"" a git submodule?","<p>I'm developing for an embedded project that has the Linux source tree as a submodule. I'm currently working on a non-development machine, so I'll never build with this repository; it's just for reference.</p>

<p>At one point I initialized the linux submodule (bringing in about 2.5GB of data), but now I want to reverse the process, leaving the linux submodule uninitialized in this repository. To be clear, I don't want to check in any changes to the submodule as far as Git is concerned; I just want my disk space back.</p>

<p>How can I do this? I could delete the <code>./linux</code> and <code>.git/modules/linux</code> directories to get rid of all the unneeded data, but I suspect that will leave git righteously confused and annoyed.</p>
","0","2190921","0","0"
"55956832","7281447","2019-05-02 16:40:11","2","863","<git-submodules><amazon-ecs><circleci>","Circleci: Private git subdmodule with AWS ECR orb","<p>I have the following config.yml for a circleci build which works well 
it's using the aws-ecr and aws-ecs orbs. </p>

<pre><code>version: 2.1
    orbs:
      aws-ecr: circleci/aws-ecr@0.0.2
      aws-ecs: circleci/aws-ecs@0.0.3
    workflows:
      build-deploy:
        jobs:
          - aws-ecr/build_and_push_image:
              account-url: ""myaccount.amazonaws.com""
              repo: ""my/repo""
              region: us-east-1
              tag: ""${CIRCLE_BRANCH}""
              filters:
                branches:
                  only: mybranch
</code></pre>

<p>The problem is this repo contains a .gitmodules file which pulls in a private subdmodule.
I can't seem to figure out how to override/extend the orb to run additionally circleci equivalent of </p>

<p><code>git submodule update --init</code></p>

<p>I have tried adding this to the dockerfile, but then i get </p>

<pre><code>Permission denied (publickey).

fatal: Could not read from remote repository.
</code></pre>

<p>note: the dockerfile builds fine locally, since local docker inject my git key automagically</p>

<p>I tried reconfiguring the orb job into steps also, i.e. </p>

<pre><code>version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@0.0.2
  aws-ecs: circleci/aws-ecs@0.0.3
workflows:
  build-deploy:
    jobs:
      - lb_build_and_push_image:
        steps:
          - add_ssh_keys:
              fingerprints:
                - ""my:fin:ger:print""
          - aws-ecr/build_and_push_image:
              account-url: ""account.amazonaws.com""
              repo: ""my/repo-backend""
              region: us-east-1
              tag: ""${CIRCLE_BRANCH}""
              filters:
                branches:
                  only: mybranch
</code></pre>

<p>...where fingerprint is from the 'user key' in ssh checkout keys. 
I've tried various configurations of jobs/steps. </p>

<p>And schema always fails with usual message of:</p>

<pre><code>Error: ERROR IN CONFIG FILE:
[#/workflows/build-deploy/jobs/0] 0 subschemas matched instead of one
1. [#/workflows/build-deploy/jobs/0] expected type: String, found: Mapping
</code></pre>

<p>does anyone have pointers on how to proceed, what the right config might be, or just general pointers of how to move forward in troubleshooting?
any insight much appreciated.</p>
","2","7281447","0","0"
"72829674","8940086","2022-07-01 13:01:44","0","162","<android><git-submodules>","how to add a git non-android library project as a sub module, to android project","<p>I am working on project were I have to initialize this repo <a href=""https://github.com/livekit/protocol"" rel=""nofollow noreferrer"">https://github.com/livekit/protocol</a> as submodule in my android project. How can I achieve this?</p>
","0","8940086","",""
"72831208","19459964","2022-07-01 15:03:26","0","278","<c++><qt><git-submodules><qmake>","Why do I get a header inclusion error on git submodule","<p>I have taken another ones <a href=""https://github.com/ttlappalainen/NMEA2000/"" rel=""nofollow noreferrer"">library</a> and added it as a submodule to my repository.
I included the library like this.</p>
<pre><code>#include &quot;../NMEA2000/src/NMEA2000_CAN.h&quot;
</code></pre>
<p>I compile using a qmake generated makefile. The header file and its includes are referred to in the .pro file as well.
I still get the following error:</p>
<pre><code>In file included from ../NMEA2000/src/NMEA2000.h:50:0,
             from ../NMEA2000/src/NMEA2000_CAN.h:89,
             from MainWindow.cpp:15:
../NMEA2000/src/N2kCANMsg.h:26:10: fatal error: N2kMsg.h: file or directory not found
 #include &lt;N2kMsg.h&gt;
</code></pre>
<p>Apparently the file I included and the next one are being found but not another that is included there. If I change the file in question to <code>#include &quot;N2kMsg.h&quot;</code> instead. I will just run into the next one with a similar issue but pointing to another submodule.
I have a strong feeling that I am missing something about the way headers work. What am I doing wrong here? I would prefer not to touch the contents of the submodule.</p>
","5","19459964","",""
"56003856","3390810","2019-05-06 11:02:00","1","1221","<git><git-submodules>","git submodule has uncommited change but inside module nothing is changed","<p>I am not sure if I have followed the right procedure to set up my submodule. I think I initially did <code>git add url</code>, then <code>git submodule init</code> then <code>git submodule update</code>.</p>

<p>It seems that there is nothing in the submodule folder, then I find that the right command to do might be <code>git submodule update --init</code> which get me contents in submodule's folder, but in another situation, i still get nothing, so I went into the submodule's folder and executed <code>git pull origin master</code>, this time I got contents, but when i go back to the root project folder where the submodule lies in, I found when I run <code>git status</code>, there is uncommitted changes (but i did not change the submodule at all, I just pulled) something like  <code>modified:   submodule name (untracked content)</code>
, if I run <code>git checkout .</code>, the uncommitted changes does not disappear at all.</p>

<p>Anyone could show me what's wrong with the procedure and how should I solve the problem? (I do not want to have the uncommited changes since I did not change anything, and it seems that <code>git submodule update --init</code> does not work to get me the lastest commit from the submodule)</p>

<p>edit:
   If I go into the submodule folder and type </p>

<pre><code>git log
</code></pre>

<p>I got </p>

<pre><code>commit 268df2521e262d5ef1985db0e152cfd94542fe26 (HEAD -&gt; master, origin/master, origin/HEAD)   
</code></pre>

<p>If I go to the parent repository folder, and type <code>git ls-tree -r -t HEAD | grep commit</code>, I got</p>

<pre><code>160000 commit 268df2521e262d5ef1985db0e152cfd94542fe26
</code></pre>

<p>It seems that the two sha are the same?                       </p>
","6","3390810","",""
"72835958","8387766","2022-07-02 01:59:34","0","42","<git><git-submodules>","git pull from default branch (main or master) for each git submodule","<p>My git repository has many submodules and some submodules' default branches are <code>main</code> and others are <code>master</code>.</p>
<p>I would like to pull from remote default branches using a command without error.
If all submodules are using <code>main</code> or <code>master</code>, these commands works.</p>
<blockquote>
<p>$ git submodule for each git pull origin master</p>
</blockquote>
<p>or</p>
<blockquote>
<p>$ git submodule for each git pull origin main</p>
</blockquote>
<p>But,  if mixed, I don't know how to do it.
Does anyone know a good solution?</p>
","2","8387766","",""
"72859230","10888766","2022-07-04 15:42:21","1","330","<git><git-submodules><git-lfs>","How to use git LFS repo as submodule?","<p>I'm actually using git lfs to track some binary files I need in my project.
I have one repo dedicated to these files, and an another main repo with all of my source code.
I added the git lfs repo in my main repo as a submodule.</p>
<p>My problem is that now when I clone my main repo, and I run <code>git submodule update --init</code>, the command is really slow, and take a long time to download all my binaries. Why not, but it seems the main repo contains also binaris in <code>.git/modules/path/to/submodules</code>.</p>
<p>How can i avoid thay and only have my binary files in the dedicated submodule ?</p>
<p>Thanks !</p>
","0","10888766","",""
"56065404","202201","2019-05-09 18:18:53","2","461","<git><git-submodules>","Can `git status` report uninitialized submodules?","<p>Another user has added a new git submodule to my project, and pushed it to the remote. In my local repo, I have pulled that remote. I have not run <code>git submodule update --init --recursive</code>. The problem is, <code>git status</code> shows that everything is kosher:</p>

<pre><code>On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
</code></pre>

<p>But the new submodule directory is empty. This is at least very misleading and arguably just plain wrong. My working tree is not up to date.</p>

<p>Is there any git config setting that could make <code>git status</code> show me the truth about the uninitialized submodules? I've tried various settings of status.submoduleSummary to no effect.</p>

<p>I'm using git 2.18.0.</p>
","0","202201","",""
"56085016","2930156","2019-05-10 21:25:46","1","365","<git-submodules><gerrit>","Gerrit submit change to a git submodule","<p>I have a gerrit repo with a submodule:</p>

<pre><code>parent
  submodule
</code></pre>

<p>Now I make some change to submodule and want to push that to gerrit. Unfortunately the submodule is set up only as a git repo, not a gerrit repo, because gerrit repo has remote url that contains my username, thus cannot be checked into the .<code>gitmodules</code> file. So is there a convenient way to set up the submodule also as a gerrit repo when I clone <code>parent</code>? </p>

<p>So far my colleagues have all told me to patch whatever change in the submodule to a separate gerrit cloned copy of the submodule. But this seems rather inefficient. I see no reason why gerrit remote urls should not be propagated to all the submodules, recursively. Thanks!</p>
","0","2930156","0","0"
"56119844","2343847","2019-05-13 21:04:09","2","170","<git><git-submodules><git-worktree>","How could I deduplicate git submodules that are checking out the same repo?","<p>I would like to track two different branches of a large git repo as submodules in my own repo. For example, the <code>nixos-unstable</code> and <code>nixos-19.03</code> branches from <a href=""https://github.com/nixos/nixpkgs-channels"" rel=""nofollow noreferrer"">https://github.com/nixos/nixpkgs-channels</a> .</p>

<p>Is there a way to add the submodules so that git would avoid fetching the repo twice and avoid storing two copies of it locally?</p>
","0","2343847","",""
"56120982","6095883","2019-05-13 23:14:07","0","68","<git><git-submodules>","How to merge in changes from a git branch that contains submodules when the working branch doesn't use submodules","<p>Lets say there is a large repository that contains multiple submodules, and the main developers have decided that submodules shouldn't have been used, thus they removed the submodules and began tracking all the files within one repo. </p>

<p>Now imagine that some other developers checked out the code <em>before</em> the submodules were removed and made some useful changes. What is the best way to merge these changes into the main branch (which now tracks <em>all</em> files instead of using submodules)?</p>

<p>Is there anyway to do so beyond telling the developers working on the old branch that they need to patch their version so that the submodules aren't used, prior to merging?</p>
","5","6095883","",""
"72948681","9024436","2022-07-12 07:41:39","0","28","<git><jenkins><git-submodules>","Can I use git submodule without syncing gitmodules on Jenkins?","<p>I have a git repository, which has two different URL because of a security issue, <code>public/git/url</code> is for public and <code>private/git/url</code> is for private. It means that I can only access to <code>public/git/url</code> in a public network, and can only access to <code>private/git/url</code> in a private network. Most of development is done in private network, so saved <code>submodule.url</code> in <code>.gitmodules</code>  is <code>private/git/url</code>.</p>
<p>But Jenkins server is in public network, so I changed submodule url with <code>git config</code>.</p>
<p><code>.gitmodules</code>:</p>
<pre><code>[submodule &quot;SubmoduleName&quot;]
    path = SubmoduleName
    url = public/git/url/SubmoduleName.git
    branch = master
</code></pre>
<p><code>.git/config</code>:</p>
<pre><code>[submodule &quot;SubmoduleName&quot;]
    active = true
    url = private/git/url/SubmoduleName.git
</code></pre>
<p>When I run Jenkins build with this configuration, <code>git submodule update --init --recursive SubmoduleName</code> command uses the content of <code>.gitmodules</code> and <code>.git/config</code> is ignored.</p>
<p><a href=""https://i.stack.imgur.com/5ah9M.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5ah9M.png"" alt=""enter image description here"" /></a></p>
<p>Is there any way to init submodule using <code>.git/config</code> not <code>.gitmodules</code> on Jenkins? Any other suggestions to solve my problem is also fine.</p>
","0","9024436","",""
"72952716","9139930","2022-07-12 12:56:59","1","204","<git><ssh><gitlab><git-submodules><git-clone>","Permission denied while recursively clone git repo with submodules through ssh on MacOS","<p>I am trying to clone a repository with submodules from gitlab using ssh authentication from MacOS. I am able to read the main repository without a problem, but my authentication does not seem to be passed to the submodules, even though I should have access to them. I receive the following output on the <code>git clone --recursive</code> command:</p>
<pre><code>Cloning into '&lt;main repo name&gt;'...
remote: Enumerating objects: 3296, done.
remote: Counting objects: 100% (45/45), done.
remote: Compressing objects: 100% (37/37), done.
remote: Total 3296 (delta 23), reused 23 (delta 8), pack-reused 3251
Receiving objects: 100% (3296/3296), 154.40 MiB | 18.25 MiB/s, done.
Resolving deltas: 100% (493/493), done.
Submodule '&lt;submodule&gt;' (https://:@gitlab.cern.ch:8443/&lt;path to remote submodule&gt;) registered for path '&lt;submodule&gt;'
Cloning into '&lt;path to local submodule&gt;'...
remote: HTTP Basic: Access denied
fatal: Authentication failed for 'https://gitlab.cern.ch:8443/&lt;path to remote submodule&gt;'
fatal: clone of 'https://:@gitlab.cern.ch:8443/&lt;path to remote submodule&gt;' into submodule path '&lt;path to local submodule&gt;' failed
</code></pre>
<p>I also find that the <code>.gitmodules</code> file contains the following lines:</p>
<pre><code>[submodule &quot;&lt;submodule&gt;&quot;]
        path = &lt;submodule&gt;
        url = https://:@gitlab.cern.ch:8443/&lt;path to remote submodule&gt;
</code></pre>
<p>It seems that the main repository is accessed correctly through ssh, but the submodule wants to use HTTP authentication, which is not an option for me. The clone worked just fine on a separate Linux machine (I need the repository on both), so I also wonder if this is a Mac-specific issue.</p>
<p>Is there a way to force the submodule to be downloaded with ssh authentication? Or otherwise fix the download?</p>
","3","9139930","0","0"
"72954483","1586017","2022-07-12 15:04:34","1","115","<git><amazon-web-services><permissions><amazon-elastic-beanstalk><git-submodules>","Elastic Beanstalk with git submodules - deployed code has no execute permissions","<p>I Use Elastic Beanstalk to deploy a Python Django application over AWS Linux 2 machine. My git project includes another git repository integrated as git submodule.</p>
<p>I followed <a href=""https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-cli-git.html"" rel=""nofollow noreferrer"">these</a> instructions.</p>
<p>Specifically I configured:</p>
<p>.elasticbeanstalk/config.yml:</p>
<pre><code>global:
  branch: main
  include_git_submodules: true
</code></pre>
<p>.gitmodules file:</p>
<pre><code>[submodule &quot;MyFamousSubmodule&quot;]
    path = MyFamousSubmodule
    url = https://github.com/hoshmy/MyFamousSubmodule.git
    auto-update=yes
    branch=main
</code></pre>
<p>Once I <em>eb deploy</em> the whole git repo including the submodule files are deployed successfully to the machine and are visible under /var/app/current.
Testing the application throws exception indicating that a certain python module (py file) isn't available. I <em>eb ssh</em> to the machine and discovered that the whole submodules python files don't have execute permissions (-rw------- ).</p>
<p>Other py files, not under the submodule, has appropriate executable permissions (-rwxr-xr-x)</p>
<p><strong>My Question</strong>: How to properly set/configure the submodule within the repo and/or the eb for proper deployment?</p>
","1","1586017","0","0"
"56166922","10484775","2019-05-16 10:54:25","2","283","<python-3.x><git-submodules><python-packaging>","how to avoid to use pip install -e <submodule> everytime I git pull updates in <submodule>?","<p>I use Python 3.6 in my project.</p>

<p>My git repository contains a submodule that needs to be installed as a library for the project. To be able to make changes in this library, I install it in <em>editable</em> mode, that is with: <code>pip install -e.</code></p>

<p>But when I <code>git pull</code> the last modifications of this submodule, I need to install the library again, even if it was previously installed in editable mode.</p>

<p>Is there any way to install this library to avoid this problem (i.e. reinstall it every time after a pull) ?</p>
","0","10484775","0","0"
"72963011","3156459","2022-07-13 08:18:36","0","958","<git><git-submodules>","Remote git branch changed to `main' but `master' in local submodule","<p>I have a submodule repo, added to my project when the remote called its main branch <code>master</code>. Now they renamed it to <code>main</code> and when I try to pull I get error:</p>
<pre><code>Your configuration specifies to merge with the ref 'refs/heads/master'
from the remote, but no such ref was fetched.
</code></pre>
<p>I could nuke the submodule and re-add it, I suppose. But is there a more elegant solution?</p>
","0","3156459","",""
"72969911","16478131","2022-07-13 16:52:16","2","545","<rust><git-submodules><rust-cargo>","Cargo dependency conflict with multiple git submodules","<p>We have a Rust Cargo project under Git that we have divided into multiple submodules each under their own git repo to allow controlled access by different teams, some external. Some teams will just work on one sub-module. Here is a simplified structure:</p>
<pre><code>Project
   ---Module 1
   ---Sub-Module 1
   ---Sub-Module 2
   ---Sub-Module 3
</code></pre>
<p><code>Module 1</code> has a dependency on all 3 sub-modules; and <code>Sub-Module 1</code> and <code>Sub-Module 2</code> also have dependencies on <code>Sub-Module 3</code>.</p>
<p>The advantage of using sub-modules is that changes can be made to <code>Module 1</code> and the sub-modules together and compiled togeher, as opposed to just keeping the sub-modules as separate repos and developing them separately.</p>
<p>Since <code>Sub-Module 1</code> and <code>Sub-Module 2</code> are independent repos, they have no direct knowledge of <code>Sub-Module 3</code> and therefore must include it via the git repo.</p>
<p><code>Module 1</code> is including <code>Sub-Module 3</code> as a direct path. This causes the conflict in Cargo as Module 1 has two versions of <code>Sub-Module 3</code> - one direct dependency and one through <code>Sub-Module 1</code> / <code>Sub-Module 2</code>.</p>
<p>Solution A would be to include <code>Sub-Module 3</code> into <code>Module 1</code> via the git repo (instead of via a direct path), but this defeats the object of having it as a submodule as any coding changes to <code>Sub-Module 3</code> would have to be coded, committed and pushed to the repo before <code>Module 1</code> can see them.</p>
<p>Solution B would be to add <code>Sub-Module 3</code> in itself as a sub-module to <code>Sub-Module 1</code> and <code>Sub-Module 2</code> and this would then negate the need to define the depenency via the git repo. But then <code>Sub-Module 3</code> would appear twice in the Project and this might get confusing. Also, we have not tested this but suspect that Cargo would still have the same conflict as it will still have two versions of <code>Sub-Module 3</code>.</p>
<p>This is the type of error being produced by Cargo:</p>
<pre><code>    = note: expected struct sub_module_3::ExampleStruct
               found struct ExampleStruct
    = note: perhaps two different versions of crate `sub_module_3` are being used?
</code></pre>
<p>Any advice on how to solve this much appreciated.</p>
<p>Thanks</p>
","3","16478131","0","0"
"72972281","3007075","2022-07-13 20:29:45","0","90","<git><git-submodules>","git submodule specify commit","<p>I'd like to specify a specific commit for a submodule, so whenever any mother repository is cloned with <code>--recurse-submodules</code> of when someone does a  <code>git pull</code>, <code>git submodule init</code> and <code>git submodule update</code>, the version of these repositories are at a specified commit, and kept as such until someone changes said commit and pushes this change in the mother repository. I'd expect there to be something like having this content on the <code>.gitmodules</code>:</p>
<pre><code>[submodule &quot;my_submodule_w=that_is_broken_on_the_lastest_commit&quot;]
    path = path/to/my/submodule
    url = ../../relative/path/to/my/submodule
    branch = master
    commit = hash_of_the_commit_where_submodule_is_compatible
</code></pre>
<p>Is that or anything similar possible?</p>
","2","3007075","",""
"72974565","15491788","2022-07-14 02:32:05","1","284","<windows><git><batch-file><github><git-submodules>","Upload changes to git submodule automatically","<p>I want to push all of the changes in my submodule to my main repo. When running <code>&gt; git add *</code>, it adds all of the changes in my main repo and not the submodules.</p>
<pre><code>&gt; git add *

&gt; git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
        modified:   Limux/vendor/stb

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   Limux/vendor/assimp (modified content)
</code></pre>
<p>to add these submodules, I need to <code>cd</code> to those folders and git add from there. This is quite tedious to do it manually. Is there a way to automate this process? Maybe use something like bat commands or a git command that I don't know about? I am using a windows operating system so please give an answer that works for windows.</p>
","0","15491788","",""
"56267999","8237911","2019-05-23 04:15:29","0","1640","<git><git-submodules><githooks>","Is there a specific hook that is executed on git submodule update?","<p>I'd like to ask if there is a possible way that a hook is executed on git submodule update; possibly like a post-update hook? thanks! :)</p>

<p>I like to execute a script (for now it just contains echo msg) that is executed every time git submodule update is run.</p>

<p>I have tried post-update hook but it seems that submodule update does not trigger this. I'd appreciate help. thank you very much!</p>
","0","8237911","0","0"
"73089595","814570","2022-07-23 09:32:52","0","11","<git><version-control><git-submodules>","How do I add a git submodule which is already in the filesystem?","<p>So I have been working on a project which deals with multiple git repos, and until now it's just existed on my local filesystem:</p>
<pre><code>/workspace
    /repo1 &lt;- git repo
    /repo2 &lt;- git repo
</code></pre>
<p>I would like to convert the workspace directory to a git repo, with the contained directories as submodules, like so:</p>
<pre><code>/workspace &lt;- git repo
    /repo1 &lt;- submodule
    /repo2 &lt;- submodule
</code></pre>
<p>So I understand that with git submodules, I can add a module like so:</p>
<pre><code>git submodule add &lt;repo1 url&gt;
git submodule add &lt;repo2 url&gt;
</code></pre>
<p>But my assumption is that this will clone these repos to my system, possibly over-writing the local versions.</p>
<p>Is there a way to tell git: <em>&quot;this directory is already a git repo: turn it into a submodule&quot;</em>?</p>
","2","814570","",""
"56338304","8656972","2019-05-28 08:46:58","5","5644","<git><version-control><git-submodules>","Is it possible to connect a git submodule to a specific commit on a branch on the main project?","<p>I have this situation with <code>git version 2.8.0.windows.1</code>.</p>

<p>I have one ""<strong>release</strong>"" branch of the main project and I push there everytime I've a new release.</p>

<p>This project has a submodule that is developed in parallel, so I expect many commits there.</p>

<p><strong>Project Master</strong> branch and <strong>Submodule Master</strong> branches goes ahead (almost) in parallel.</p>

<p><em>Master Commit 1 => Master Commit 2 => Master Commit 3 => Master Commit 4<br>
Submodule Commit 1 => Submodule Commit 2 => Submodule Commit 3 => Submodule Commit 4</em></p>

<p>In this case <em>Master Commit 4</em> is aligned with <em>Submodule Commit 4</em>.</p>

<p>The issue arises when someone tries to get the <strong>release</strong> branch too late.<br>
So if I push the <strong>release</strong> branch at <em>Master Commit 1</em> and someone pull release branch when we are at <em>Master Commit 4</em> we have a misalignment (because <strong>release</strong> is related to <em>Master Commit 1</em>, while now we are on <em>Submodule Commit 4</em>).</p>

<p>The solution I see is to coerce somehow <em>Submodule Commit 1</em> to <strong>release</strong> branch, but I don't know how yet.</p>

<p>I know that a great solution would be just to add a branch or tag on the submodule as explained <a href=""https://stackoverflow.com/questions/1777854/how-can-i-specify-a-branch-tag-when-adding-a-git-submodule"">here</a>.</p>

<p>But I've no authority over the submodule repository, so it won't be easy for me to set branches or tags there.</p>

<p>Are there any workarounds to coerce a <strong>specific submodule commit</strong> on my release branch and <strong>not just a submodule branch/tag</strong>?</p>
","0","8656972","0","0"
"73104159","2641038","2022-07-25 04:45:35","0","95","<python><package><setuptools><git-submodules><setup.py>","Install a folder with __init__.py in a python package downloaded as a git submodule","<p>In my python project, there is another python project <a href=""https://github.com/centreborelli/s2p"" rel=""nofollow noreferrer"">s2p</a> downloaded as a git submodule. How can I install my project and only the <code>s2p</code> folder in s2p project without running <code>s2p/setup.py</code> in s2p project.<br />
Eg:</p>
<pre><code>myproject
    - setup.py
    - mypackage
        - __init__.py
    - s2p
        - setup.py
        - s2p
            - __init__.py
        - many other files ...
</code></pre>
<p>As you can see, there are two <code>setup.py</code> in <code>myproject/</code> folder. One is the <code>setup.py</code> of <code>myproject</code> and another <code>setup.py</code> is in a git-submodule <code>s2p</code>.</p>
<p>The <code>myproject/setup.py</code> looks like:</p>
<pre><code>packages=(find_packages(include=[&quot;mypackage.*&quot;]) + find_packages(where=&quot;./s2p/s2p&quot;)),
</code></pre>
<p>Explanation: I want it to install <code>mypackage</code> and only the folder <code>s2p</code> under s2p submodule without using <code>s2p/setup.py</code>.</p>
<p>Installation: the following is run</p>
<pre><code>~/myproject$ pip install -e .
</code></pre>
<p>But s2p is still not installed correctly:</p>
<pre><code>$ python
&gt;&gt;&gt; import s2p
&gt;&gt;&gt; print(s2p.__file__)
None
</code></pre>
<p>Note: the <code>myproject/setup.py</code> installs all required packages to run s2p.</p>
","0","2641038","",""
"73119269","478091","2022-07-26 07:25:34","0","109","<git><git-submodules>","git submodule update checks out multiple times, how can I avoid or fix this issue?","<p>$ git.exe submodule update --init --recursive --remote ABC_SDK</p>
<pre><code>Cloning into 'D:/somedir/ABC_SDK'...
Submodule path 'ABC_SDK': checked out '27b8794752812baa55a9845f48c60438173f8cd9'
Submodule 'ABC_SDK' (RepoLink) registered for path 'ABC_SDK/ABC_SDK'
Cloning into 'D:/somedir/ABC_SDK/ABC_SDK'...
Submodule path 'ABC_SDK/ABC_SDK': checked out '27b8794752812baa55a9845f48c60438173f8cd9'
Submodule 'ABC_SDK' (RepoLink) registered for path 'ABC_SDK/ABC_SDK/ABC_SDK'
Cloning into 'D:/somedir/ABC_SDK/ABC_SDK/ABC_SDK'...
</code></pre>
","3","478091","",""
"56371564","6580788","2019-05-30 04:19:51","3","3914","<git><git-submodules>","A git submodule is stuck at wrong commit ('submodule update' doesn't work)","<p>I have a parent project with a submodule (no nested submodules). The submodule has a new commit (let's call it <code>new-sha</code>), and the parent refers to that commit in remote repo (I can see <code>submodule @ new-sha</code> when viewing the repo in web browser). 
I have pulled the parent project, and it also refers to the right commit in the working directory, as seen in <code>git show</code> output:</p>

<pre><code>--- a/submodule
--- b/submodule
@@ -1 +1 @@
-Subproject commit old-sha
+Subproject commit new-sha
</code></pre>

<p>I.e. the latest commit in parent project has changed the submodule to <code>new-sha</code>. However, neither <code>git submodule update</code> nor <code>git pull --recurse-submodules</code> update to <code>new-sha</code> in the submodule, they always check out <code>old-sha</code>.</p>

<p>Why, and how to fix it?</p>

<p>git version 2.21.0.windows.1</p>

<p>Some additional information: the submodule has <code>sha-new</code> locally, but its HEAD is stuck at <code>sha-old</code>.</p>

<p><code>sha-new</code> is immediately derived from <code>sha-old</code>, and here are the last 3 commits, maybe this can give a clue:</p>

<pre><code>sha-new  == the top of submodule's branch used by parent project
sha-old  == HEAD
sha-xyz  == origin/HEAD
</code></pre>

<p>The <code>origin/HEAD</code> line worries me. Even after manually pulling the submodule (<code>cd submodule; git pull origin branch-name:branch-name</code>) <code>origin/HEAD</code> stayed at third commit from top.</p>
","5","6580788","0","0"
"56453578","11548535","2019-06-05 02:31:30","4","1746","<gitlab><git-submodules>","Is there any automatic way to update the parent git repo to point to the latest commit of its submodule?","<p>Every time I push a commit to the submodule I need to update the parent repo to the latest commit in the submodule. Is there any automatic way to do that in the remote?</p>

<p>Every time push a commit in the submodule repo i want the parent to automatically point to the latest commit of the child repo. Please suggest if its possible and how?</p>
","0","11548535","0","0"