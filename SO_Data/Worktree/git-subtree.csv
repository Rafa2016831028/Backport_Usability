Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
19516689,985949,10/22/2013 11:32,1,144,<git><web-deployment><dvcs><branching-and-merging><git-subtree>,Deploying/Pushing subdirectory from one git repository to another one,"<p>I own two git repositories:  <strong>A</strong> and <strong>B</strong>, both mainly used on their own master branch.</p>

<p><strong>A</strong> contains these folders: </p>

<ul>
<li><strong>folder1</strong></li>
<li><strong>folder2</strong></li>
</ul>

<p><strong>B</strong> contains this folder:</p>

<ul>
<li><strong>folder3</strong></li>
</ul>

<p>In order to deploy <strong>A</strong> containing <strong>folder3</strong>, I want to push <code>folder3</code> from <strong>B</strong>, to <strong>A</strong>.
I want this kind of relationship as only unidirectional, meaning <strong>A</strong> updates <strong>B</strong> but no <code>pull</code> from <strong>B</strong> to <strong>A</strong>.</p>

<p>I would end up with A containing these files:</p>

<ul>
<li><strong>folder1</strong></li>
<li><strong>folder2</strong></li>
<li><strong>folder3</strong> (pushed)</li>
</ul>

<p>Of course, concerning the first deployment, <strong>A</strong> was unaware of the existence of <strong>folder3</strong>.</p>

<p>Therefore, I found the command <a href=""http://makingsoftware.wordpress.com/2013/02/16/using-git-subtrees-for-repository-separation/"" rel=""nofollow"">git subtree</a> on the web that seems to achieve this tasks nicely.</p>

<p>So the whole procedure I did to try achieving this task on the <strong>B</strong> repository's directory is: </p>

<pre><code>git remote add A https://githubAdressOfA
git subtree prefix --folder3 --squash A master 
</code></pre>

<p>However, I came across this kind of error:</p>

<pre><code>Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first merge the remote changes (e.g.,
hint: 'git pull') before pushing again.
</code></pre>

<p>According to me, <code>pull</code> on <strong>B</strong> repo should not be needed with the concept of ""subtree"" in case of my unidirectional scenario explained above.</p>

<p>How to deal efficiently with this case? Perhaps I misused <code>subtree</code> command...</p>
",1,985949,0,0
19569352,759123,10/24/2013 14:54,2,95,<git><git-submodules><git-subtree>,How to rename/relocate directory on git clone/fetch and preserve the history?,"<p>On remote master there is a folder <strong>/config/samples/</strong> (it also contains sub dirs) which contains sample configuration files; these files are good enough to be used in real environment w/o any changes. The application is located in the same repository and can read the files from <strong>/settings/</strong> directory only.</p>

<p>How to make that each clone of the master will rename locally this folder to the desired one AND will keep the history for these files (so If I add file there, it will be placed to the right folder on the master on git pull)?</p>

<p>The symlinks and hardlinks are not available on the filesystem.</p>

<p>Thanks in advance!</p>
",0,759123,,
44530508,1916754,6/13/2017 20:02,8,1073,<git><git-subtree><git-lfs>,Is there a better way to do `git subtree pull` while using git-lfs?,"<p>I have two repositories: <code>parent</code> and <code>child</code>.  They both use git-lfs.  I am trying to import <code>child</code> as a subtree into <code>parent</code>.</p>

<p>When in the <code>parent</code> directory, I try adding it and I get the following:</p>

<pre><code>&gt; git subtree add --prefix child [child_url]
git fetch [child_url] master
From [child_url]
* branch            master     -&gt; FETCH_HEAD
Downloading [child_binary_file_path] (12.55 KB)
Error downloading object: [child_binary_file_path] ([sha])

Errors logged to .git\lfs\objects\logs\20170613T115607.1992713.log
Use `git lfs logs last` to view the log.
error: external filter git-lfs smudge -- %f failed 2
error: external filter git-lfs smudge -- %f failed
fatal: [child_binary_file_path]: smudge filter lfs failed
</code></pre>

<p>In the log file, I see</p>

<pre><code>Error downloading object: [child_binary_file_path] ([sha]): Smudge error: Error downloading [child_binary_file_path] ([sha]): [[sha]] Object does not exist on the server: [404] Object does not exist on the server

%+v
Smudge error: Error downloading [child_binary_file_path] ([sha]): [[sha]] Object does not exist on the server: [404] Object does not exist on the server
</code></pre>

<p>Which I guess makes sense, since the binary files for <code>child</code> <em>wouldn't</em> be on the server for <code>parent</code>.</p>

<p>So, I tried adding the <code>child</code> lfs files to <code>parent</code> like this, from the <code>parent</code> directory:</p>

<pre><code>git remote add child [child_url]
git fetch child
git lfs fetch 
git lfs fetch child --all
git lfs push origin --all
</code></pre>

<p>Everything works fine until the last command.  The <code>git lfs push</code> doesn't push anything:</p>

<pre><code>&gt; git lfs push origin --all
Git LFS: (0 of 0 files, 1 skipped) 0 B / 0 B, 210 B skipped
</code></pre>

<p>It appears that it's only pushing to <code>parent</code> files that exist on <code>parent</code> branches.</p>

<p>The only way I could figure out how to add these lfs files to <code>parent</code> was to add the <code>child</code> branch to the <code>parent</code>.</p>

<pre><code>git checkout -b temp_branch child/master
git push origin
</code></pre>

<p>This then lets me successfully call <code>git subtree add --prefix child [child_url] master</code>.</p>

<p>But, since I don't want <code>temp_branch</code> on <code>parent</code>, I must immediately delete it.</p>

<pre><code>git branch -D temp_branch
git push origin --delete temp_branch
</code></pre>

<p>This works, but it feels <em>really</em> kludgey.</p>

<p>Is there a better way to call <code>git subtree add</code> when the subtree repository is using git-lfs?</p>
",0,1916754,0,0
49961984,244000,4/22/2018 2:33,1,170,<git><git-subtree>,How to cache processed history with git subtree split,"<p>Given my history is
<code>commit1 -&gt; commit2 -&gt; commit3 (HEAD, master)</code></p>

<p>Now I want to do a subtree split, git need to run from <code>commit1</code>, then <code>commit2</code>, then <code>commit3</code>, which is fine.</p>

<p>Later I add commit4, so now my history is:
<code>commit1 -&gt; commit2 -&gt; commit3 -&gt; commit4 (HEAD, master)</code></p>

<p>Now I do another subtree split, git is running all the way through form <code>commit1</code> again, where as it can just continue from <code>commit3</code> instead.</p>

<p>Is that something can be achieved?</p>
",1,244000,0,0
54591345,4563885,2/8/2019 11:22,1,174,<git><git-subtree>,"""git subtree add"" failed with ""Unlink of file""","<p>We want to go away from submodules and try on subtree system.</p>

<p>We have two repositories:</p>

<pre><code>Qt-Integration
 - UEPlugin

Cos-Sim
 - CosmetologyTrainer
</code></pre>

<p>I want to add <em>Qt-Integration/UEPlugin</em> as subtree to <em>Cos-Sim/CosmetolgyTrainer</em> at <strong>Plugins/Qt</strong> </p>

<pre><code>my@DESKTOP-I1D3N52 MINGW64 /c/my/5vid/Test/Cos-Sim(CosmetologyTrainer)
$ git subtree add --prefix=Plugins/Qt --squash git@github.com:5Vid/Qt-Integration.git UEPlugin
git fetch git@github.com:5Vid/Qt-Integration.git UEPlugin
From github.com:5Vid/Qt-Integration
 * branch            UEPlugin   -&gt; FETCH_HEAD
Unlink of file 'Plugins' failed. Should I try again? (y/n)
</code></pre>

<p>But i get <em>Unlink of file...</em></p>

<p>In explorer I can see, that git has created path <strong>Plugins/Qt</strong>, and only .gitignore from <em>Qt-Integration/UEPlugin</em> exists.</p>

<p>If answer ""n"" and make <em>git status</em>, then you'll get this:</p>

<pre><code>my@DESKTOP-I1D3N52 MINGW64 /c/my/5vid/Test/Cos-Sim (CosmetologyTrainer)
$ git status
On branch CosmetologyTrainer
Your branch is up to date with 'origin/CosmetologyTrainer'.

Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        new file:   Plugins/Qt/.gitignore
        new file:   Plugins/Qt/Qt.uplugin
        new file:   Plugins/Qt/README.md
        new file:   Plugins/Qt/Source/Qt/Private/GameWithQtAppInstance.cpp
        new file:   Plugins/Qt/Source/Qt/Private/Qt.cpp
        new file:   Plugins/Qt/Source/Qt/Private/QtPrivatePCH.h
        new file:   Plugins/Qt/Source/Qt/Public/ConvertTemplate.h
        new file:   Plugins/Qt/Source/Qt/Public/GameWithQtAppInstance.h
        new file:   Plugins/Qt/Source/Qt/Public/Qt.h
        new file:   Plugins/Qt/Source/Qt/Public/QtConverters.h
        new file:   Plugins/Qt/Source/Qt/Qt.Build.cs

Changes not staged for commit:
  (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        deleted:    Plugins/Qt/Qt.uplugin
        deleted:    Plugins/Qt/README.md
        deleted:    Plugins/Qt/Source/Qt/Private/GameWithQtAppInstance.cpp
        deleted:    Plugins/Qt/Source/Qt/Private/Qt.cpp
        deleted:    Plugins/Qt/Source/Qt/Private/QtPrivatePCH.h
        deleted:    Plugins/Qt/Source/Qt/Public/ConvertTemplate.h
        deleted:    Plugins/Qt/Source/Qt/Public/GameWithQtAppInstance.h
        deleted:    Plugins/Qt/Source/Qt/Public/Qt.h
        deleted:    Plugins/Qt/Source/Qt/Public/QtConverters.h
        deleted:    Plugins/Qt/Source/Qt/Qt.Build.cs
</code></pre>

<p>I followed this <a href=""https://gist.github.com/kvnsmth/4688345"" rel=""nofollow noreferrer"">example</a></p>

<p>In order to eliminate side effects, I did this all on the repository I've just cloned.</p>

<p>Can you help pls. 
I've spent too much time on this issue</p>
",3,4563885,,
76413891,265521,6/6/2023 10:52,0,8,<git><git-subtree>,Tell git subtree to use destination path for squashed commits,"<p>When you add a subrepo using <code>git subtree add --prefix third_party/libfoo upstream_libfoo master --squash</code> it will:</p>
<ol>
<li>Create a new root commit containing the contents <code>master</code> from the <code>libfoo</code> repo.</li>
<li>Create a merge commit with <code>HEAD</code> and that new root commit as parents. In this merge commit all of the files from the root commit are moved from <code>/...</code> to <code>/third_party/libfoo/...</code>.</li>
</ol>
<p>The fact that the files are moved during the merge commit creates some issues:</p>
<ol>
<li>You can't rebase the root commit &amp; merge. Even with <code>--rebase-merges</code> Git will get confused because it tries to create a normal merge, not a merge that also moves files.</li>
<li>You can't easily diff between <code>master</code> and the root commit (or a later squashed commit). It <em>kind of</em> works, but the fact that all the files have moved confuses things massively. Especially if you've also added/removed files.</li>
</ol>
<p>Is there any way to make <code>git subtree</code> store the files in its squashed commits at the same path that they will be merged into? It seems like such an obvious thing to do.</p>
",0,265521,,
76532797,6008062,6/22/2023 14:10,0,31,<git><git-subtree><git-filter-repo>,git subtree while keeping history,"<p>I have multiple git repositories that I want to combine under one single git repository while keeping all of their commit histories, but do that gradually so I can still pull changes before completely abandoning those old repositories. I am able to use <code>git subtree add</code> to add those but the history on individual files is lost.</p>
<p>I want my combined repository will have the following structure:</p>
<pre><code>.
-─ src
   └── stores
       |── storeA
       |   ├── README.md
       |   ├── package.json
       |   ├── src
       |   │   ├── index.ts
       |   │   ├── models
       |   │   │   └── index.ts
       |   │   └── stores
       |   │       ├── FileA.ts
       |   │       ├── FileB.ts
       |   └── yarn.lock
       └── storeB
           ├── README.md
           ├── package.json
           ├── src
           │   ├── index.ts
           │   ├── models
           │   │   └── index.ts
           │   └── stores
           │       ├── FileA.ts
           │       ├── FileB.ts
           └── yarn.lock
</code></pre>
<p>I start by going into the git repository and saying</p>
<pre><code>git subtree add --message=&quot;old repo - storeA&quot; --prefix src/stores/storeA git@ssh.XXX/storeA main
</code></pre>
<p>and this will bring the git repository where I want it and also all the commits</p>
<pre><code>// git log --graph --oneline
*   8e276e5 (HEAD -&gt; main) old repo - storeA
|\
| * 2b59054 fix 2
| * 70ede5a feat 2
| * 57041d5 fix 1
| * de39054 feat 1
| * 85d213b Added README.md
* 49942fb init
</code></pre>
<p>But when I try to get the history of a specific file I only see one commit and the rest is lost:</p>
<pre><code>// git log --graph --oneline src/stores/storeA/src/stores/FileA.ts
* 8e276e5 (HEAD -&gt; main) old repo - storeA
</code></pre>
<p>although I know that there are more commits for this file in the old git repository. I suspect it has something to do with the paths because <code>git blame</code> shows the different commits and <code>git show 57041d5</code> (one of the commits from the old repository)
shows</p>
<pre><code>diff --git a/src/stores/FileA.ts b/src/stores/FileA.ts
--- a/src/stores/FileA.ts
+++ b/src/stores/FileA.ts
</code></pre>
<p>but these are the old paths.</p>
<p>I have tried using <code>git-filter-repo --path-rename src/stores/:src/stores/storeA/src/stores/FileA.ts</code> and it seems to be working although it rewrites the history and it can only work for one (the first) repository. If I try to re-run it again on the other git repositories that have the same structure it will mess up all the paths.</p>
<p>Is there any alternative or have I misused the git-subtree command in any way?</p>
",0,6008062,,
57485689,6322678,8/13/2019 21:44,1,127,<git><git-subtree><git-subrepo>,Using git subrepo or tree like SVN external,"<p>We are transitioning from SVN to git finally, thank the gods and little fishes.  </p>

<p>But we have a very extensive library system that lives in SVN externals.  </p>

<pre><code>--Libraries 
--|--Lib1
--|--Lib1.project
--|--libs
--|--|--Lib1
--|--|--|--Lib1ForDistro.lib
--|--UnitTests
--|--DebuggingCode
--|--Lib2
--|--Lib2.project
--|--libs
--|--|--Lib2
--|--|--|Lib2ForDistro.lib
--|--UnitTests
--|--DebuggingCode


--Projects
--|--Proj1
--|--|--libs
--|--|--|--Lib1
--|--|--|--Lib1ForDistro.lib
--|--|--|--Lib2
--|--|--|--Lib2ForDistro.lib
</code></pre>

<p>Everything has lots of relative paths use between the tools, unit test framework and such.  </p>

<p>What I ideally want is a way to put all of our libraries as subrepos (or possibly subtrees) and keep the same relative path scheme that we have going now.  </p>

<p>I have only come up with the one possible way to do this.  Each library has two repos, one for development and the other contains the test code and the first repo as a subrepo. Then use the subrepo as normal.  </p>

<p>Is there a way to not use a whole repo as a subrepo but instead use only one folder?</p>
",2,6322678,0,0
21500722,252428,2/1/2014 16:46,5,3507,<git><git-subtree>,"Why am I told that ""'master' does not refer to a commit"" when I use git-subtree?","<p>When I enter <code>&gt; git subtree add --prefix=&lt;some dir&gt; --squash &lt;some repo&gt; master</code> I receive the message <code>'master' does not refer to a commit</code>. If I change 'master' to a sha I still get a warning. The repo is valid and master exists in the repo that I am trying to pull in.</p>
",0,252428,0,0
40599982,3731837,11/15/2016 0:09,-1,187,<git><git-submodules><git-subtree>,Why does git subtree prevent init-ing embedded submodules?,"<p>I have a git repository that I keep my vim configuration in. This tree includes a number of git submodules that refer to other people's repos which contain plugins.</p>

<p>As I'm interested in setting up a proper dotfiles repo with GNU stow, I thought the best way to integrate the vim repo was to just subtree it into the dotfiles repo. As my vim config is forked from someone else, I figured this way I could easily merge in changes made upstream while preserving my own plugins and config.</p>

<p>I've succesfully added the subtree to my repo, using <code>git subtree add -P vim/.vim-files https:\\xx master --squash</code>. The resulting tree looks like this:</p>

<pre><code>dotfiles/
├── .git
└── vim/
    ├── .vimrc
    └── .vim-files/   &lt;= THE SUBTREE
        ├── .gitmodules
        └── plugins/
            └── submodule1/
</code></pre>

<p>When I perform <code>git submodule init</code> from <code>dotfiles/</code> after that, it fails with <code>fatal: No url found for submodule path 'vim/.vim-files/plugins/submodule1' in .gitmodules</code>. Even though the URL is there and the subtree repo has no problems with submodules when used standalone.</p>

<p>The stranger part is, when I cd into <code>.vim-files</code> and run the command there, the error looks like this: <code>fatal: No url found for submodule path 'vim/.vim-files/vim/.vim-files/plugins/submodule1' in .gitmodules</code>.</p>

<p>Can anyone explain what causes this behaviour? Are subtrees and submodules incompatible or have I stumbled upon a bug?</p>
",0,3731837,0,0
21622327,2948832,2/7/2014 8:01,8,997,<git><git-submodules><git-subtree>,How do I append one git history to another?,"<p>I have a repository that contains the code for an old version of a website that is no longer being used on <code>master</code>. The site was completely redesigned in a new repository, and the code and history from that repository was copied over into a branch in the repo of the old site, let's call it <code>new_site</code>. I can't merge <code>new_site</code> into <code>master</code>, since the histories are entirely different. </p>

<p>I've investigated both submodules and subtree merges a bit, but both seem to only be relevant when you're trying to keep code from one project contained in a subdirectory of another project, not when you want to stick two working trees on top of each other.</p>

<p>At this point, I would like to have the old code remain where it is, and just append <code>new_site</code> on top of the current HEAD. Any idea how I can accomplish this, or alternate suggestions for cleaning up this mess without blowing away the old code?</p>
",0,2948832,0,0
22069364,2473846,2/27/2014 13:03,1,69,<git><cordova><git-subtree>,Use git to track your Cordova App for various devices,"<p>I have a Cordova App which I use for practically 4 ""devices"":</p>

<ol>
<li>The test environment</li>
<li>Android build</li>
<li>iOS build (on a different machine)</li>
<li>Web- build</li>
</ol>

<p><strong>Practically, I want to clean up the code and track the main project from a single source, and track only adaptions of the other code- bits</strong></p>

<p>Currently I use git to track changes on the test environment, then pull in the changes via rsync (from a remote server - which practically acts as a backup, too). I have some files which are different (e.g. cordova.js and another .js file which is contains some different routines for mobile/test/webapp).
So here I go:</p>

<ol>
<li>~/Project/&lt; myhtmlfiles ></li>
<li>/otherpath/ProjectAndroid/platforms/android/assets/www/&lt; myhtmlfiles > (e.g. with Cordova 3.3)</li>
<li>me@othermachine:/ProjectiOS/platforms/ios/assets/www/&lt; myhtmlfiles > (e.g. with Cordova 3.0)</li>
<li>/otherpath/ProjectWeb/&lt; myhtmlfiles ></li>
</ol>

<p>So I want the common &lt; myhtmlfiles > to be pulled in from 1., but also have 2-3 files which I would need to handle separately (e.g. ./cordova.js and ./scripts/global.js) - same name, different content each time - and obviously not being overridden each time I pull changes.</p>

<p>I have seen a few hints with sub-trees, but I'm not really getting my head around it what the best approach is, <strong>especially</strong> when having <strong>certain files</strong> which are ""within"" the main project, <strong>but with different content</strong> to each sub- or sideproject.</p>

<p>I hope solving this can help others others too to organize their code...</p>
",0,2473846,,
22485673,492649,3/18/2014 16:43,3,1264,<git><git-subtree>,Get the upstream branch from a git subtree,"<p>While trying to figure out a good workflow with git subtree, I would like to track the upstream branch (generally different than <code>master</code>) that has been used when adding a git sub-tree. </p>

<p>More specifically, assuming your defined the following remotes and used to fetch them: </p>

<pre><code>  $&gt; git remote add -f easybuild-easyblocks https://github.com/ULHPC/easybuild-easyblocks.git
  $&gt; git remote add -f easybuild-easyconfigs https://github.com/ULHPC/easybuild-easyconfigs.git
  $&gt; git fetch easybuild-easyblocks
  $&gt; git fetch easybuild-easyconfigs 
</code></pre>

<p>You can see the different remote branch: </p>

<pre><code>  $&gt; git show-ref | grep -v tags | grep easybuild
  f4b4752bcadd5dd44aa74ee03f4bd19b75810bdb refs/remotes/easybuild-easyblocks/develop
  49a1e893160c6c1d2ad50109265e55586c377c1e refs/remotes/easybuild-easyblocks/master
  173aa5cabddf998e2ad672135752a33875095f8b refs/remotes/easybuild-easyblocks/v1.8.x
  49a1e893160c6c1d2ad50109265e55586c377c1e refs/remotes/easybuild-easyblocks/v1.9.x
  770c5246667d7741c02d4e1f4d4a50fb8cd3fcbe refs/remotes/easybuild-easyconfigs/develop
  d8422c6f7aace405f1089f178edabb9316629d4b refs/remotes/easybuild-easyconfigs/master
  5f3be9e2d5cbb2844ebf74ede15e2c30a8b12705 refs/remotes/easybuild-easyconfigs/uni.lu
  0382ff527360f1baa192bb92597552cc379bba68 refs/remotes/easybuild-easyconfigs/v1.8.0.x
  d8422c6f7aace405f1089f178edabb9316629d4b refs/remotes/easybuild-easyconfigs/v1.9.x
</code></pre>

<p>Now assumes that you define two new git subtree to track the upstream branch <code>develop</code> for the remote <code>easybuild-easyblocks</code> (respectively <code>v1.8.0.x</code> for the remote <code>easybuild-easyconfigs</code>): </p>

<pre><code>  $&gt; git subtree add --prefix easybuild/easyblocks  --squash easybuild-easyblocks/develop
  $&gt; git subtree add --prefix easybuild/easyconfigs --squash easybuild-easyconfigs/v1.8.0.x
</code></pre>

<p>You end with a clean directory layout where <code>easybuild/*</code> hold in separate directories the latest version of the corresponding repository. </p>

<p>I can now check the head commit hash of all branch by running:</p>

<pre><code> $&gt; git branch -v -r --abbrev=40                                                                                                                                                                                                                                                 
 easybuild-easyblocks/develop   f4b4752bcadd5dd44aa74ee03f4bd19b75810bdb Merge pull request #314 from boegel/version_bump
 easybuild-easyblocks/master    49a1e893160c6c1d2ad50109265e55586c377c1e Merge pull request #312 from hpcugent/develop
 easybuild-easyblocks/v1.8.x    173aa5cabddf998e2ad672135752a33875095f8b Merge pull request #281 from boegel/1.8.2_release_notes
 easybuild-easyblocks/v1.9.x    49a1e893160c6c1d2ad50109265e55586c377c1e Merge pull request #312 from hpcugent/develop
 easybuild-easyconfigs/develop  770c5246667d7741c02d4e1f4d4a50fb8cd3fcbe Merge pull request #500 from fgeorgatos/contrib_qtop
 easybuild-easyconfigs/master   d8422c6f7aace405f1089f178edabb9316629d4b Merge pull request #544 from hpcugent/develop
 easybuild-easyconfigs/uni.lu   5f3be9e2d5cbb2844ebf74ede15e2c30a8b12705 add Allinea-4.2-34164-Ubuntu-10.04-x86_64.eb
 easybuild-easyconfigs/v1.8.0.x 0382ff527360f1baa192bb92597552cc379bba68 Merge pull request #473 from boegel/v1.8.0.x
 easybuild-easyconfigs/v1.9.x   d8422c6f7aace405f1089f178edabb9316629d4b Merge pull request #544 from hpcugent/develop
</code></pre>

<p>Now I wish to pull the latest changes from the subtrees. Thus I run: </p>

<pre><code> $&gt;git fetch easybuild-easyblocks    # fetch latest changes of the remote before merging
 $&gt; git subtree pull --prefix easybuild/easyblocks easybuild-easyblocks develop --squash

 $&gt; git fetch easybuild-easyconfigs
 $&gt; git subtree pull --prefix easybuild/easyconfigs easybuild-easyconfigs v1.8.0.x--squash
</code></pre>

<p>Is there a simple way to guess/check the upstream branch that has been used to setup the subtree such that I can make a generic command following the format: </p>

<pre><code>   git subtree pull --prefix &lt;path/to/subtree&gt; &lt;subtree-remote&gt; &lt;subtree-branch&gt; --squash
</code></pre>

<p>???</p>
",0,492649,,
41735992,2141043,1/19/2017 7:21,15,6627,<git><github><git-submodules><git-subtree>,How can I mirror a directory in a git repo into another git repo?,"<p>I have a directory <code>/amp</code> in <code>RepoA</code> and a <code>RepoB</code> (populated with the contents of /amp initially). I want to mirror any changes to the  <code>/amp</code> in RepoA into RepoB. </p>

<p>Is it possible ?</p>

<p>P.S: RepoA contains many other directories. I only want to mirror the /amp dir. Whereas RepoB is only going to have the /amp contents not any other.</p>
",1,2141043,0,0
19616787,2924714,10/27/2013 9:59,1,440,<git><share><git-submodules><git-subtree>,git subtree from one branch to several locations of same project,"<p>I have a git repository A with contents:</p>

<pre><code> &lt;shared files dir&gt;/
        sharedFile1
        sharedFile2
</code></pre>

<p>And I have additional git repository B with 2 projects, each of them has to use the shared files from repository A. So that the file structure will be similar to this:</p>

<pre><code>Project_X
   &lt;shared files dir&gt;/
      sharedFile1
      sharedFile2
   &lt;project X dirs&gt;

Project_Y
   &lt;shared files dir&gt;/
      sharedFile1
      sharedFile2
   &lt;project Y dirs&gt;
</code></pre>

<p>I would like the shared files to be updated only in the repository A, and I need to allow project_X and Project_Y to get those updates easily.</p>

<p>Actually, symbolic link could be the exact solution I need, but unfortunately, the filesystem I use doesn't support it.</p>

<p>Git subtree also looks as suitable solution, but the problem is that I couldn't find how to merge a subtree from same branch to 2 locations in same repository. I succeeded to create the file structure I need:</p>

<pre><code>git read-tree --prefix=Project_X/shared_files_dir/ -u shared_remote_branch
git read-tree --prefix=Project_Y/shared_files_dir/ -u shared_remote_branch
</code></pre>

<p>Creates the required filestructure (exactly as I described at the top of the question), but trying to merge updates brings me the changes only to the last subtree I created:</p>

<pre><code>git merge --squash -s subtree --no-commit shared_remote_branch
</code></pre>

<p>Updates only the Project_Y/shared_files_dir/, and not the Project_X/shared_files_dir/ with the changes from shared_remote_branch.</p>

<p>I would appreciate any ideas. On how to merge the subtree from one branch to 2 locations (Project_X/shared_files_dir/) and (Project_Y/shared_files_dir/) or how to make it in any other methodology</p>
",0,2924714,0,0
38714443,5933490,8/2/2016 7:37,3,954,<git><git-subtree>,Does git subtree have no choice but to have duplicated Commits?,"<p>I just started using git subtree and I got confused. </p>

<ol>
<li>I have ""main"" repo and ""subtree"" repo.</li>
<li>The ""main"" repo includes ""subtree"" repo. </li>
</ol>

<p>On this situation, my question is 
'Does ""main"" repo have no choice but to have duplicated Commits?'. </p>

<p>For example, let's assume that I pushed some commits to ""main"" repo, and made 'subtree push' to ""subtree"" repo.</p>

<p>After that, when I hit 'git subtree pull ~' command on ""main"" repo, all commits, even what I pushed from ""main"" to ""subtree"" are pulled to ""main"" repo, and ""main"" repo get duplicated commits.</p>

<p>Is it unavoidable? Or Did I made mistakes?</p>
",0,5933490,0,0
19697968,663948,10/31/2013 3:29,2,3420,<git><git-subtree>,"How to make an existing subdir as subtree for another git repo, with squashed commit?","<p>First I wrongly copied another repo source straight to one bigger project, in a subdir. The original repo and subdir were changed both ever since that time. Now I have knowledge of git-subtree, I want to make the subdir as a real subtree so that I can easily sync the change from original repo.</p>

<p>I tried 'git-subtree split', then pull latest source from original repo, it just worked. However, I don't want the whole history, but '--squash' didn't work for 'split', here's my commands</p>

<pre><code>git subtree split -P xxx-dir --onto==1940032
git remote add xxx https://github.com....
git fetch xxx
git subtree pull -P xxx-dir xxx master
# the pull worked, but whole history of xxx was imported too. '--squash' didn't work for above 'pull'

git subtree merge -P xxx-dir xxx/master --squash
# Can't squash-merge: 'xxx-dir' was never added. 
</code></pre>

<p>Looked like squash only works for subtree added but not split.</p>

<p>Any idea? Thanks.</p>
",0,663948,0,0
49269602,301513,3/14/2018 4:04,1,226,<git><git-subtree><git-filter-branch><git-rewrite-history>,After using git filter-branch --subdirectory-filter how do I still use old repo and reclaim git space?,"<p>I use <code>git filter-branch</code> to split a subfolder out into a new repository, refer to <a href=""https://help.github.com/articles/splitting-a-subfolder-out-into-a-new-repository/"" rel=""nofollow noreferrer"">https://help.github.com/articles/splitting-a-subfolder-out-into-a-new-repository/</a> and <a href=""https://stackoverflow.com/a/45983384/301513"">https://stackoverflow.com/a/45983384/301513</a> </p>

<p>My question is, according to the steps in the article, I need to create a new repo and <code>git pull the-subdirectory-filter-result</code> into the new repo. But is it possible I can still use old repo and reclaim the git space, i.e to make the old .git only has that subdirectory related metadata? If I can, I don't need to create a new repo, after all the old one does not have much use now.</p>

<p>I tried the step #5 in Paul's answer at <a href=""https://stackoverflow.com/a/359759/301513"">https://stackoverflow.com/a/359759/301513</a>, but it did not work. And <code>git gc</code> won't reclaim the git history for those un-related commits. </p>
",0,301513,0,0
49351225,979325,3/18/2018 18:04,0,121,<git><cmake><git-subtree>,Handle cmake duplicated git subtrees,"<p>I have a cmake git repository with a library that I use in many project, named <code>core</code>.</p>

<p>I've another cmake git repository that includes <code>core</code> as dependency in a subtree. This project creates a library <code>plot</code>.</p>

<p>Now I have a new git repository that needs both <code>plot</code> and <code>core</code> as dependencies, and I've included them as subtrees as well. Now the structure of my project is:</p>

<pre><code>myproject
|
|-Thirdparty-subtrees
  |
  |-core
  |-plot
    |
    |-Thirdparty-subtrees
      |
      |-core
</code></pre>

<p>Now when I want to build <code>myproject</code> with cmake it tells me that I've two project with the same name <code>core</code>, because the project is defined twice.</p>

<p>I can remove the first-level <code>core</code> subtree, but then it will became an hidden dependency, and if for some reason <code>plot</code> will erase the <code>core</code> subtree, I will have problems. I'd like to maintain the explicit dependency in the first level subtree folder.</p>

<p>So I'd like to know how can I check with CMake is two targets with the same name exists, and in this case notify it with a message and build only one project discarding the other (I suppose that if two targets have the same name, they are the same project).</p>

<p>How can I build <code>core</code> correctly only once?</p>
",1,979325,,
15353858,674039,3/12/2013 5:19,8,7895,<git><git-submodules><git-subtree>,git init in a git subdirectory,"<p>I have a git repo which has some subdirectories:</p>

<pre><code>  ~/src
  ~/src/.git
  ~/src/mystuff
  ~/src/otherstuff
</code></pre>

<p>Now I want to share <code>otherstuff</code> with a friend, I was planning to do this with bitbucket.  They should be able to clone it and push changes in <code>otherstuff</code> but I don't want them to be able to access <code>src</code>, <code>mystuff</code> (nor even see that they exist).  </p>

<p>How do I go about this?  I almost went into <code>cd ~/src/otherstuff</code> and did <code>git init</code>, <code>git remote add origin ssh://git@bitbucket.org/wim_glenn/...</code> but something doesn't smell right about doing git init again when it's already under version control.  </p>
",7,674039,0,0
15393104,535328,3/13/2013 18:06,4,507,<git><git-subtree>,Keeping track of external git repos merged through `git subtree`,"<p>I'm trying to establish a good pattern for managing shared code and external dependencies across several projects.  For reasons well documented elsewhere, using submodules has enough pitfalls that I'm inclined to stay away from it.  As of git 1.8 the subtree command is built in and seems to cover a lot of what I care about, but there are still a few core scenarios that seem to be missing.  I was hoping someone has written some scripts on top of the official subtree feature that fills the gaps.</p>

<p>What I want that seems to be missing is:</p>

<ul>
<li>Keep track of what has been added through a subtree, and what branch was specified</li>
<li>The ability to do <code>git subtree pull-all</code> and <code>push-all</code></li>
<li>As part of the last, the ability to specify whether a subtree should be locked to a specific commit or to the latest commit in a branch.</li>
</ul>

<p>Are these things built into the command and I'm just missing something in how they're used?
I also have the requirement that this needs to work on Windows, in case that affects anything.</p>

<p>Thanks,</p>
",6,535328,0,0
19546800,1366578,10/23/2013 16:06,1,269,<git><perforce><git-submodules><git-subtree><perforce-client-spec>,Remap dirs and files in git? Kind of clientspec in P4?,"<p>There is a <em>large</em> project which is stored in a remote GIT repository in the way:</p>

<pre><code>root/
   |
   *
   module1/
         |
         * include/
         |       |
         |       * lib1/
         |       |     header1.h
         |       |     headerN.h
         |       * libN/
         |             headerX.h
         * sources/
                 | 
                 * lib1/
                 |     file1.cxx
                 |     fileN.cxx
                 * libN/
                 ...
</code></pre>

<p>The product is built from these libraries. Build system automatically downloads the sources, remaps each folder in the way that each library's sources directory is put near the corresponding header files on a disk, i.e.:</p>

<pre><code> lib1/
   include/
       header1.h
       headerN.h
   sources/
       fileN.cxx
   CMakeList.txt
</code></pre>

<p><strong>When the library is mapped to disk in this way it could be built</strong>. This structure is due to historical reasons (Perforce aka P4); it worked in Perforce because of <strong>Clientspec.txt</strong> file where it was possible to define such remap rules on repository clone.</p>

<p>Currently when the repository is cloned from <em><strong>origin/master</strong></em> it is not possible to build only one library in the project w/o preliminary step to create corresponding symlinks manually. When such symlinks are created it is not possible to modify the source code there because the connection between files and .git is lost.</p>

<p><strong>Question:</strong> is it possible to clone <em>origin/master</em> to local directory with remapping directories on the fly <strong>and</strong> with ability to preserve theirs connection with git (= being able to modify/rename/move files correctly?</p>

<p>I have researched <em>git submodule</em> and <em>git subtree</em> but seems they do not feet since they are for different purposes. </p>

<p>Thanks!</p>

<p>P.S. Currently it is not possible to affect on <em>origin/master</em> and on the server side at all.</p>
",0,1366578,,
19640582,360811,10/28/2013 16:51,2,626,<git><git-subtree>,Reverse of git subtree split in certain context,"<p>Say, I have repo A which contains folder ""foo"".
There is also an already inited yet empty repo named B.</p>

<p>Here's what I've done:</p>

<ol>
<li><code>git subtree split --prefix foo split-master</code></li>
<li><code>cd B &amp;&amp; git pull ../A split-master</code></li>
<li><code>… a bunch of commits …</code></li>
<li><code>git remote add bigA ../A</code></li>
<li><code>git push bigA split-master</code></li>
</ol>

<p>OK, so now I have a splitted branch split-master in A with all that commits from B.
The question is - what is the reverse of split in this context?
How can I reintegrate this split-master into a ""big"" repo?</p>

<p>Or is this something I actually shouldn't do? I mean, may I missing something?
May be, I should pull everything from repo B? </p>
",0,360811,0,0
38735205,5915500,8/3/2016 5:36,14,3570,<git><git-subtree><git-filter-branch>,Difference between git filter branch and git subtree?,"<p>Was searching throw SO for an answer to this. Came across this older thread which didn't seem to give any answers. Retriggering this thread hoping someone may know! </p>

<p>Can someone tell me the difference b/w git subtree and git filter-branch?
I'll use the same example in the original question for this:</p>

<pre><code>git subtree split --prefix=some_subdir -b some_branch

git filter-branch --subdirectory-filter some_subdir some_branch
</code></pre>
",0,5915500,0,0
57752371,2981610,9/2/2019 6:35,0,670,<git><git-subtree>,How to properly update git subtree,"<p>Let's say I have a repositiory Repo and now I want to add folder Common which is separate repository. So the structure should be as following:</p>

<pre><code>Repo
    myfile.txt
    Common
        anotherfile.txt
</code></pre>

<p>As I know there are at least 2 ways to do that: <em>subtrees</em> and <em>submodules</em>. After reading some git tutorials and manuals I came to the conclusion that <em>subtree</em> is what I want.</p>

<p>Ok, so I've added the folder to my repo:</p>

<pre><code>git subtree add --prefix Common https://github.com/my/Common.git master --squash
</code></pre>

<p>Ok, now it looks as expected. After some time I want to update the subtree folder. But unfortunately the only way I've found so far is:</p>

<pre><code>git subtree pull --prefix Common https://github.com/my/Vommon.git master --squash
</code></pre>

<p>Why should I again enter the repository Url? Isn't that stored somewhere in the git structure? What if I have several subtrees? I don't think that someone remember all the urls.</p>

<p>Is there a way to do that in some simple way? Maybe I'm missing something?</p>
",2,2981610,,
33179085,1036658,10/16/2015 20:31,3,370,<git><merge><git-subtree>,Why git subtree merge doesn't delete files?,"<p>I have one branch ('other') attached as subtree to another ('master'). When I perform subtree merge from 'other' to 'master' it doesn't delete files which were deleted in 'other'.</p>

<p>Steps to reproduce on a clean repo:</p>

<pre><code>$ touch master.txt
$ git add master.txt
$ git commit -m 'Initial master'
[master (root-commit) e2f5ffd] Initial master
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 master.txt
$ git checkout --orphan other
Switched to a new branch 'other'
$ touch other.txt
$ git add other.txt
$ git status
On branch other

Initial commit

Changes to be committed:
  (use ""git rm --cached &lt;file&gt;..."" to unstage)

        new file:   master.txt
        new file:   other.txt
$ git commit -m 'Initial other'
[other (root-commit) 408ee95] Initial other
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 master.txt
 create mode 100644 other.txt
$ git checkout master
Switched to branch 'master'
$ git read-tree --prefix=other/ -u other
$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        new file:   other/master.txt
        new file:   other/other.txt
$ git commit -m 'Other subtreed'
[master f9ba0db] Other subtreed
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 other/master.txt
 create mode 100644 other/other.txt
$ git checkout other
Switched to branch 'other'
$ git rm master.txt
rm 'master.txt'
$ git commit -m 'master.txt removed'
[other 1feef18] master.txt removed
 1 file changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 master.txt
$ git checkout master
Switched to branch 'master'
$ git merge --squash -s subtree --no-commit other
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
$ git status
On branch master
nothing to commit, working directory clean
</code></pre>

<p>So after merge of deleted file - there is nothing to commit. Is it correct behavior? And how to make merge with deleted files?</p>
",0,1036658,,
17349096,2476417,6/27/2013 17:00,2,181,<git><gitignore><git-subtree>,Make branches of git-subtrees that don't contain gitignore files,"<p>I recently started using git-subtree to keep a few github sub-projects inside a parent repository that syncs to a private server. I'm having trouble managing .gitignore files in my subproject branches. </p>

<p>I need to be able to make branches of the sub-projects, which will then be pushed to github, and to be able to pull down branches of the sub-projects from github as well. I've tried this both by using the ""git subtree split -b"" command and by making branches directly from the github repo and then pulling them down into my parent repository. </p>

<p>However, I've been having trouble with the files listed in .gitignore because I don't want them to be inside these branches. I saw this Stack Overflow post (<a href=""https://stackoverflow.com/questions/2503816/git-subtree-not-properly-using-gitignore-when-doing-a-partial-clone"">Git subtree not properly using .gitignore when doing a partial clone</a>), which describes a similar situation, but I can't just use git clean as suggested because I don't want to delete the files entirely, just to make sure they are not committed or pushed to github. I also don't want to put gitignore files in each of the subtrees, because I don't want the public github repos to contain the names of my private files. </p>

<p>Is there a way to make branches that won't include the ignored files?</p>
",0,2476417,0,0
34107214,720077,12/5/2015 15:29,10,728,<git><merge><git-submodules><git-subtree><pretzo>,How to merge a git repository with submodules into another with subtree merge?,"<p>I have a dotfiles repository. I want to merge another one with submodules (<a href=""https://github.com/sorin-ionescu/prezto"">prezto</a>) into it, so I can conveniently have everything in one repository without the inconvenience of submodules.</p>

<p>How can I subtree merge prezto into my dotfiles repository with all its submodules?</p>

<p>I can use submodules, I can split and merge subtrees either the ""old fashioned"" way or with the newer git subtree tool. </p>

<p>I just don't know how to do this specific case.</p>
",2,720077,0,0
50774251,6057448,6/9/2018 12:22,0,20,<git><github><git-submodules><git-subtree>,using git-submodule without repository structure modification,"<p>I have two github repository similar to the below structure as an example:</p>

<p>repo1:
[folder_X]
fileA
<strong>fileB
fileC</strong>
fileD
[folder_Y]
fileE
fileF</p>

<p>repo2:
[folder_M]
<strong>fileB
fileC</strong>
fileK
[folder_N]
fileO
fileP</p>

<p>as you see in both repository we have some common files in folder_X and folder_M which are fileB and fileC.  I need to have a common source for these files, so I don't need to modify them in two repository always. These common files (B and C) can be stored in a separate branch in repo1 as an example.</p>

<p>Is there any solution for it without modifying the repo structure?</p>
",0,6057448,,
17797328,,7/22/2013 20:59,45,19351,<git><ubuntu><git-subtree>,Why is the `git subtree` not working even though I have git 1.8.3.2 installed on Ubuntu 12.10?,"<p>I am about to deploy my AngularJS based static site as a Github Page with Yeoman. Step 3 of the deployment instructions tell me to do</p>

<p><code>git subtree push --prefix dist origin gh-pages</code></p>

<p>but when I enter that I get </p>

<p><code>git: 'subtree' is not a git command. See 'git --help'.</code></p>

<p>This <a href=""https://stackoverflow.com/questions/14409639/unable-to-update-git-on-ubuntu/17312327#17312327"">SO answer provided me instructions</a> on how to upgrade to the latest git-core and ensure it  always get upgraded to the latest stable release. </p>

<pre><code>sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git
</code></pre>

<p>After running those commands I did <code>git --version</code> to make sure I had the latest version and apparently I did since <code>git version 1.8.3.2</code> was the output. Now when I tried running </p>

<p><code>git subtree push --prefix dist origin gh-pages</code> </p>

<p>again I still got the same following error </p>

<p><code>git: 'subtree' is not a git command. See 'git --help'.</code> </p>

<p>Finally I just restarted Ubuntu 12.10 and tried to run the command again but once again, I got the same error. </p>

<p><strong>How come the <code>git subtree</code> command is still not working even though I have upgraded to the current stable release?</strong></p>
",2,,0,0
17821486,,7/23/2013 21:34,1,1112,<angularjs><github><yeoman><github-pages><git-subtree>,I try to deploy my Yeoman AngularJS static site to Github pages but the git subtree command always gets rejected,"<p>I am trying to deploy my AngularJS static site (which I began with Yeoman) as a Github page and was following the steps provided in the <a href=""http://yeoman.io/deployment.html"" rel=""nofollow"">Yeoman deployment guide</a>. I succeed in steps 1 and 2 but when I arrive at step 3, things go bad. Step 3 tells me to run </p>

<pre><code>git subtree push --prefix dist origin gh-pages
</code></pre>

<p>When I run this is what I see</p>

<pre><code>$ git subtree push --prefix dist origin gh-pages
git push using:  origin gh-pages
To git@github.com:siddhion/maxmythic_angular.git
 ! [rejected]        5db3233d7c0822eedc5500409ce6a2d4b73ad427 -&gt; gh-pages (non-fast-forward)
error: failed to push some refs to 'git@github.com:siddhion/maxmythic_angular.git'
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. Check out this branch and merge the remote changes
hint: (e.g. 'git pull') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>I then I follow the hint and try</p>

<pre><code>$ git pull origin master
From github.com:siddhion/maxmythic_angular
 * branch            master     -&gt; FETCH_HEAD
Already up-to-date.
</code></pre>

<p>and then tried <code>git subtree push --prefix dist origin gh-pages</code> again but got the same error as before.</p>

<p>At the Yeoman deployment page I see under the <strong>Some common errors</strong> section </p>

<blockquote>
  <p>You might get an error like this Updates were rejected because the tip
  of your current branch is behind. You can solve this by force pushing
  to the remote (be careful though, it will destroy whatever is already
  there).</p>
</blockquote>

<p>I am apprehensive to force the <code>subtree push</code> because I am new to git in general and not sure what is going to be destroyed. I mean, I currently do not have a <code>gh-pages</code> branch at my maxmythic_angular <code>origin</code> remote so I am not worried about that but I have my <code>master</code>, <code>gh-pages-old</code> and <code>gh-pages-v1</code> branches there. Will they be destroyed if I run <code>git subtree push --prefix dist origin gh-pages</code>? </p>

<h2>UPDATE</h2>

<p>I went ahead and copied my work to another folder to be safe and I added <code>--force</code> to my <code>git subtree push</code> command and ran it. This is what I got </p>

<pre><code>$ git subtree push --prefix dist origin gh-pages --force
error: unknown option `force'
usage: git subtree add   --prefix=&lt;prefix&gt; &lt;commit&gt;
   or: git subtree add   --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;commit&gt;
   or: git subtree merge --prefix=&lt;prefix&gt; &lt;commit&gt;
   or: git subtree pull  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;refspec...&gt;
   or: git subtree push  --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;refspec...&gt;
   or: git subtree split --prefix=&lt;prefix&gt; &lt;commit...&gt;

    -h, --help            show the help
    -q                    quiet
    -d                    show debug messages
    -P, --prefix ...      the name of the subdir to split out
    -m, --message ...     use the given message as the commit message for the merge commit

options for 'split'
    --annotate ...        add a prefix to commit message of new commits
    -b, --branch ...      create a new branch from the split subtree
    --ignore-joins        ignore prior --rejoin commits
    --onto ...            try connecting new tree to an existing one
    --rejoin              merge the new branch back into HEAD

options for 'add', 'merge', 'pull' and 'push'
    --squash              merge subtree changes as a single commit
</code></pre>

<p><strong>How can I get the</strong> <code>git subtree push --prefix dist origin gh-pages</code> <strong>command to work so I can deploy my site to gh-pages?</strong></p>

<h2>UPDATE</h2>

<p>I wanted to see if this issue was to do with the instructions or just something fishy with my repo so I set up a new Angular app with <code>yo angular</code> and followed the deployment instructions. <code>git subtree push</code> worked this time. I still have no idea what happened to the gh-pages repo of mine. I will have to really learn <code>git</code> in and out.   </p>
",2,,0,0
17842966,2409941,7/24/2013 19:18,11,6444,<git><repository><git-subtree>,How can I create a gitsubtree of an existing repository?,"<p>I'm trying to create a gitsubtree of an existing repository, for example:</p>

<p>-> projectA/projectB</p>

<p>Project A is the parent, i want to add project B as a git subtree.</p>

<blockquote>
  <p>git subtree -P projectB ssh://git@github.com/projectB.git master</p>
</blockquote>

<p>But it fails, and shows the following message:</p>

<blockquote>
  <p>prefix 'projectB' already exists.</p>
</blockquote>

<p>I don't want to download all the repository again, I just want to add this directory to my gitsubtree.</p>

<p><strong>This directory project B isn't tracked by Project A git.</strong></p>

<p>thanks in advance</p>
",2,2409941,0,0
69318268,3957413,9/24/2021 16:19,1,216,<git><git-subtree>,Push only part of git repository to second remote repository,"<p>I have an existing git repository (e.g. in my organisation's private repository) consisting of several sub-projects organised in specific folders. It there a way to clone each of these sub-projects to specific second remote repositories (e.g. on github)? I'm aware of git subtrees which seems to be convenient the other way around (having existing subprojects as dependencies in a new overall project). However, using subtree would require me to remove the sub-projects from the existing overall project and add them as subtrees again, if I understand correctly.</p>
<p>A requirement is to be able to push the entire project including its sub-projects to the private organisation's remote repository, to achieve a working version there.</p>
",2,3957413,,
23818624,62571,5/22/2014 23:19,0,362,<git><github><yeoman><git-subtree>,Reduce git subtree commit log noise,"<p>I use Yeoman for deployment of my web app. As per the suggestion of <a href=""http://yeoman.io/deployment.html"" rel=""nofollow"">the Yeoman docs</a>, I deploy my site using <code>git subtree</code>, doing something like this:</p>

<ol>
<li><code>grunt build</code></li>
<li><code>git add -A dist</code></li>
<li><code>git commit -m ""New release""</code></li>
<li><code>git subtree push --prefix dist origin deploy</code></li>
</ol>

<p>Then, on the staging server, the very first time I do:</p>

<ol>
<li><code>git init</code></li>
<li><code>git remote add -t deploy -f origin git@github.com:cdmckay/example.git</code></li>
<li><code>git checkout deploy</code></li>
</ol>

<p>Then, every time after that I do:</p>

<pre><code>git pull
</code></pre>

<p>However, this causes a couple things I don't like.</p>

<p>Firstly, my <code>master</code> branch now has <code>dist</code> folder, which I think is ugly.</p>

<p>Secondly, my git history gets chocked full of <code>New release</code> messages, as every time I want to push the Yeoman app to my staging server, I have to make another commit.</p>

<p>Is there a better way to set up my deployment such that I can keep the <code>dist</code> folder out of the <code>master</code> branch and get rid of the deployment commit messages?</p>
",0,62571,,
32407634,33311,9/4/2015 22:54,121,58990,<git><git-subtree>,When to use git subtree?,"<p>What problem does <code>git subtree</code> solve?
When and why should I use that feature?</p>

<p>I've read that it is <a href=""https://makingsoftware.wordpress.com/2013/02/16/using-git-subtrees-for-repository-separation/"">used for repository separation</a>. But why would I not just create two independent repositories instead of sticking two unrelated ones into one?</p>

<p>This GitHub tutorial explains <a href=""https://help.github.com/articles/about-git-subtree-merges/"">how to perform Git subtree merges</a>.</p>

<p>I kind of know <em>how</em> to use it, but not <em>when</em> (use cases) and <em>why</em>, and how it relates to <a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules""><code>git submodule</code></a>. I'd use submodules when I have a dependency on another project or library.</p>
",4,33311,0,0
33363529,2685984,10/27/2015 8:58,0,140,<git><git-subtree>,Ignore subproject's history with git-subtree,"<p>I want to import a new ""module"" library into my project using subtree, but when I imported using these commands:</p>

<pre><code>git remote add module git@111.111.11.1:serverUrl/module.git
git subtree add --prefix=libraries/module/ module master
</code></pre>

<p>it brings into git commit history all the history of the ""module"".</p>

<p>How to ignore ""module"" history from my project history when adding subtree?</p>
",0,2685984,,
50845919,5670078,6/13/2018 20:38,3,547,<git><atlassian-sourcetree><git-subtree><gitkraken><github-desktop>,Trying to use git subtree but getting an errors,"<p>I want to use a few repositories as a sub-directory in my project. I chose to use git subtree, but unfortunately, I can't get it work. I use Github Desktop, SourceTree, and GitKraken - but only for SourceTree, I see an option to use git subtree properly.</p>

<p>I added a new repository to as a git subtree, but when I try to pull this remote repository with squash commits option or without it, it gives me an errors no matter what:</p>

<p>1) When squash commits enabled it says - ""Can't squash-merge: 'my-project\Project.Application\Examples\Projects' was never added."".</p>

<p>2) When squash commits disabled it says: ""fatal: refusing to merge unrelated histories"".</p>

<p>My current branch is a new branch (not a master branch).</p>

<p>I have no ideas what's wrong here, someone can see a problem here? Maybe have I to use another git client?</p>

<p>Thank you very much for reading this.</p>
",0,5670078,0,0
19245827,2406861,10/8/2013 10:55,1,312,<git><git-subtree>,How can I track changes against a subdirectory of a git repository?,"<p>I am working on some client modifications to a module within a PHP web application. I have access to the upstream source in a git repo, and I would like to track our changes in our own git repo.</p>

<p>The full source repo is huge (in comparison to the module) so I would prefer to extract the module (contained in two subdirectories) in our repo... but I would like to be able to merge in any upstream changes in the future.</p>

<p>If I was in control of the upstream repo I would spin the module off into a subtree. But I'm not, so I can't!</p>

<h2>My best solution so far</h2>

<p>Initialise my own repo:</p>

<pre><code>mkdir myrepo
cd myrepo
git init .
git touch .gitignore
git add .gitignore
git commit -m ""Initialise repo""
</code></pre>

<p>Then add the upstream repo as a remote:</p>

<pre><code>git remote add -f upstream /path/to/upstream/repo
</code></pre>

<p>Track (and checkout for good measure) the upstream code as a branch:</p>

<pre><code>git checkout -b upstream upstream/master
</code></pre>

<p>Merge the upstream branch, as a subtree, into my master branch:</p>

<pre><code>git checkout master
git subtree add --prefix vendor/upstream upstream --squash
</code></pre>

<p>Then create my own src directory with symlinks to the upstream directories I want to work on:</p>

<pre><code>mkdir src
cd src
ln -s ../vendor/upstream/path/to/directory1 .
ln -s ../vendor/upstream/path/to/directory2 .
</code></pre>

<h2>Why do it this way?</h2>

<p>I now have a src directory which just represents the module I want to work on. I can commit my changes to my repo, yet still merge in upstream changes (by refreshing the vendor subtree).</p>

<p>However, this does not seem very elegant. I am carrying the entire upstream codebase in my repo even though I only care about two subdirectories.</p>

<h2>What else have I tried?</h2>

<p>I initially tried using sparseCheckout to restrict the directories pulled in from upstream. It appeared to do exactly what I wanted on my box, but the repo still contained all of the upstream code. What is more, the sparseCheckout settings do not replicate when the repo is cloned.</p>

<h2>What I want</h2>

<p>Is there a better/more elegant solution to this problem? I realise the ideal is to spin out a sub-repo upstream, but I can't do that. I don't really need to track upstream version history... apart from the fact I want to easily merge in upstream changes.</p>
",0,2406861,,
19385565,464773,10/15/2013 15:48,4,3456,<git><merge><git-filter-branch><git-subtree>,fix broken git history after merging other repo into subdir,"<p>I had the following git repositories</p>

<ul>
<li>repoA</li>
<li>repoB</li>
<li>repoC</li>
</ul>

<p>which I combined into </p>

<ul>
<li>repoAll where each repo was moved into a subdir</li>
</ul>

<p>so this looks like</p>

<ul>
<li>repoAll

<ul>
<li>dirA</li>
<li>dirB</li>
<li>dirC</li>
</ul></li>
</ul>

<p>I have followed the instructions on <a href=""http://jasonkarns.com/blog/merge-two-git-repositories-into-one/"" rel=""nofollow noreferrer"">http://jasonkarns.com/blog/merge-two-git-repositories-into-one/</a> to make this happen. Which essentially means</p>

<pre><code>git remote add -f repoA /path/to/repoA
git merge -s ours --no-commit repoA/master
git read-tree --prefix=dirA/ -u repoA/master
git ci -m ""merging repoA into dirA""
...
</code></pre>

<p>So now however the history for the files is no longer connected since </p>

<pre><code>git log --follow dirA/pom.xml
</code></pre>

<p>shows nothing.</p>

<p>However,</p>

<pre><code>git log --follow pom.xml
</code></pre>

<p>does show the correct (old) history for that file. This is not really good enough since no tool such as eclipse or other git clients will be able to show the full history.</p>

<p>To make matters worse, there have been already new commits on the combined repo so doing the merge again is not really an option (I now know that I should have moved <code>repoA/*</code> into <code>repoA/dirA</code> before doing the merge).</p>

<p>I have thought about inserting a commit that would do the move before the initial merge on repoAll but that would require me to rebase all the changes (which are now a 100+) and resolve the changes.</p>

<p>The question/solution <a href=""https://stackoverflow.com/questions/13060356/git-log-shows-very-little-after-doing-a-read-tree-merge"">Git log shows very little after doing a read-tree merge</a> and <a href=""https://stackoverflow.com/questions/4042816/how-can-i-rewrite-history-so-that-all-files-are-in-a-subdirectory"">How can I rewrite history so that all files, except the ones I already moved, are in a subdirectory?</a> seem to only work for the whole repository, not for a specific subdir (or at least not if you have already new commits on repoAll).</p>

<p>I think that there should be some way to rewrite the history of a specific subdir (such as dirA) but I cannot seem to figure out how.</p>
",0,464773,0,0
51215154,1349754,7/6/2018 17:22,0,365,<git><repository><git-submodules><git-subtree>,"Is it possible to keep several git repositories under ""umbrella"" one?","<p>Here is situation:</p>

<pre><code># Want this folder to be ""umbrella"" in order not to spawn 
# a lot of github repos later on (you can consider it 
# dotfiles-like repository with a lot of remotely pulled 
# projects where each should be occasionally updated 
# and ""custom"" patches applied) 
mytoolbox/
  .git/
  proj1/ 
    .git/
    ..
  proj2/
    .git/
    ..
  proj3/
    .git/
    ..
  file1
  file2
  ..
</code></pre>

<p>After some googling I stambled upon <code>git submodule</code> and <code>subtrees</code>. The first one seems like just keep tracking the last commit and reference to the remote (list of links without actual content under <code>.gitmodules</code>). And - after several attempts - I didn't get the idea of the second one if it fits my purposes. May be someone can suggest a better solution in general. 
<em>Frankly speaking, a while ago I used Dropbox for this purpose :)</em></p>
",1,1349754,0,0
51219843,1223975,7/7/2018 4:15,9,27305,<git><git-clone><git-subtree>,Cloning subtree/subdirectory of git repo,"<p>I have a git repo on Github, looks like so:</p>

<pre><code>.git/
assets/
  tools/
    a.sh
    b.sh
    c.sh
</code></pre>

<p>of course the .git folder is not in version control, but you get the idea. And I want to copy the tools/*.sh to a local directory, at this path:</p>

<pre><code>./scripts/git/tools
</code></pre>

<p>My current directory is a git repo that shares a totally different history than the remote git repo, I just want to copy some files from the remote, I don't want to merge anything.</p>

<p>I figure I could do something like this:</p>

<pre><code>git clone --path assets/tools/*.sh ""$remote_repo""  ./scripts/git/tools
</code></pre>

<p>but that command is not real, is there some command I can use to do this?</p>

<p>the only other way I can think of doing it, is cloning the whole repo to some temp directory and then copying the files over, but that's not as much fun.</p>
",3,1223975,0,0
73798298,2883770,9/21/2022 9:19,0,55,<git><git-subtree>,"Git submodule, subtree or simply nested git?","<p>Here is my directory structure</p>
<pre><code>main folder (git repo 1)
   subfolder 1 (git repo 2)
   subfolder 2
</code></pre>
<p>I have a bigger project and I keep track of all changes in the main and child folders in repo 1. However, for subfolder 1 I have a common repo 2 with a co-author. An important detail is that some files in subfolder 1 are versioned in repo 2 but not in repo 1, and viceversa.</p>
<p>Is it possible to simply init the main folder on repo 1 and subfolder 1 on repo 2, as if they were independent projects, or are there any shortcomings to this solution?</p>
<p>Are there any advantage from using submodule or subtree? Notice that I don't care having the same log/hostory in repo 2 and repo 1, I am happy to commit to the two repos independently.</p>
",0,2883770,,
73936781,4196726,10/3/2022 14:16,1,112,<git><git-subtree>,git: merging commits from remote repository into subtree following renaming,"<p>So I've used git subtree strategy to incorporate a repository branch into another as a subdirectory.
First I used <code>git subtree add -P some/dir1 myremote dev</code>.
Then I renamed the subtree directory to <code>some/dir2</code>. That was a mistake, since renaming seems to break git's knowledge of the subtree integration, and now I can't use <code>git subtree</code> commands to merge remote changes, and other subtree-related operations won't take into account the commits preceding the rename.</p>
<p>The <code>newrepo</code> branch:</p>
<pre><code>(create subtree some/dir1 from remote/C0) - C1 - (rename some/dir1 some/dir2) - C2 - HEAD
</code></pre>
<p>Here C1 and C2 stand in for a number of commits.
The <code>oldrepo</code> from which the subtree was created:</p>
<pre><code>C0 -- C1 - HEAD
</code></pre>
<p>The remote branch from <code>oldrepo</code> contains a number of commits since the initial incorporation into <code>newrepo</code>.
If these were branches in the same repository:</p>
<pre><code>(oldrepo) C0 - C1 ------------------------------------ HEAD
(newrepo)  \ 
            D0 - D1 - (rename some/dir1 some/dir2) - D2 - HEAD
</code></pre>
<p>(here D0 is the commit generated by the initial <code>git subtree add</code> operation, so it corresponds to C0. If this were branches in the same repo, C0 and D0 would be the same commit.)
Now, <code>git subtree pull -P some/dir2 oldrepo dev</code> fails because of unrelated histories.</p>
<p>Is there some way to merge changes from <code>oldrepo</code> into the <code>newrepo</code> subtree, considering all commits since the initial incorporation, both before and after the rename?</p>
<p>Basically, is there a way to tell git that D0 is a common ancestor to the commits from <code>oldrepo</code>, and that the rename of the subtree directory doesn't affect the commits from oldrepo?</p>
<p>Thanks!</p>
",4,4196726,,
57195209,,7/25/2019 5:57,2,270,<git><git-submodules><git-subtree>,What's the difference between git subtree and just git cloning in a subdirectory?,"<p>I am starting to get the feeling that a git subtree is just a git clone in a subfolder.</p>

<p>For example:</p>

<pre><code>project/
   .git
   foo/
   bar/
   subtree/    # this could be a git subtree or just a git clone folder
   .gitignore
</code></pre>

<p>would I not get the same effect of a subtree, if I just put subtree in .gitignore, and then just git cloned my other project in the subtree folder? What are the effective differences between git cloning in a subfolder and git subtree?</p>
",0,,,
74493349,1254812,11/18/2022 17:28,3,413,<git><git-subtree>,Why was `git-subtree` removed from the git-scm book?,"<p>When looking for documentation on <code>git-subtree</code> my search engine will show links to <a href=""https://git-scm.com/docs/git-subtree"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-subtree</a>, however when I visit that link I'm redirected to <a href=""https://git-scm.com/docs"" rel=""nofollow noreferrer"">https://git-scm.com/docs</a>.</p>
<p>What happened to subtree? Is is deprecated or is this just a mistake? If it's deprecated, is there an announcement with rationale and a suggestion for what might replace it (e.g. are there plans to bring in <a href=""https://github.com/ingydotnet/git-subrepo"" rel=""nofollow noreferrer""><code>git-subrepo</code></a>)?</p>
",2,1254812,,
74791216,6614344,12/13/2022 21:45,1,161,<git><git-subtree>,Fixing a git subtree with a bad split,"<p>I have a git repo with a subtree that was set up years ago with a bad split commit that's throwing errors when I try to do a <code>git subtree push</code>. The error I get looks something like this:</p>
<pre><code>git push using:  &lt;remote&gt;
fatal: ambiguous argument '&lt;sha&gt;^{commit}': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'
could not rev-parse split hash &lt;sha&gt; from commit &lt;sha&gt;
</code></pre>
<p>When I look at the commit the error is complaining about, it's referring to:</p>
<ul>
<li>a <code>git-subtree-dir</code> which is the name of the git prefix (fine)</li>
<li>a <code>git-subtree-split</code> which refers to a hash that isn't there anymore(<strong>not</strong> fine).</li>
</ul>
<p>I can assume that the initial split was made on a branch that was never merged back, and that any subsequent subtree pulls/pushes were done on another branch. That commit is gone.</p>
<p>The behavior of <code>git-subtree</code> when doing a push changes depending on git version:</p>
<ul>
<li>When I ran it with git 1.8, it would throw an error and delete the branch you're trying to push into  on the remote repo(!).</li>
<li>When running a somewhat later version (I don't know exactly which since I recently upgraded it), it would throw an error and work anyway. It would, however, take a very long time to run since it would go through the entire git repo history.</li>
<li>When running the latest git version, it just throws the error and refuses to push.</li>
</ul>
<p>I tried running another split hoping to create another split and fix the issue:</p>
<p><code>git subtree split --prefix=&lt;prefix&gt; --rejoin --ignore-joins</code></p>
<p>It created the new split, but I still get the same error when I try to do a subtree push. It looks like the subtree command is still looking at the old split, and throwing an error.</p>
<p>I'm running out of ideas, and I can't <code>git subtree push</code> anymore at all with the latest version of git. The only thing that comes to mind is to change the commit message from the old broken split, but it was made in 2018 and I don't think rebasing from a commit that old is a good idea.</p>
",1,6614344,,
74855698,8469294,12/19/2022 20:31,0,84,<git><git-subtree><git-squash>,Using squash-merge with git subtree,"<p>I'm try ing to set up git subtrees ti mage shared utils and TS types in a couple repos. I'm confused on how git handles squash-merges in subtrees and right now I'm runnning into errors.</p>
<p>Let's say I have a repo <code>project</code> and have set up another repo <code>utils</code> I'm using as a subtree. My main project looks like this:</p>
<pre><code>project/
├── fileOne.ts
├── utils/
│   ├── fileTwo.ts
</code></pre>
<p>Then I make some changes so my project's commit history appears as follows</p>
<pre><code>ddddddd (HEAD -&gt; main, origin/main) edit fileTwo
ccccccc edit fileOne
bbbbbbb add fileTwo
aaaaaaa add fileOne
</code></pre>
<p>I push these up directly to <code>main</code> in <code>project</code>. I also push to a new branch in my <code>utils</code> repo using</p>
<pre><code>git subtree push -P utils utils-remote my-new-branch
</code></pre>
<p>The commit history for <code>my-new-branch</code> is</p>
<pre><code>ggggggg (utils-remote/my-new-branch) edit fileTwo
fffffff add fileTwo
eeeeeee (utils-remote/main) some older commit
</code></pre>
<p>Then, I squash merge <code>my-new-branch</code> into <code>utils/main</code> so the commit history looks like</p>
<pre><code>hhhhhhh (utils-remote/main) add and edit fileTwo
eeeeeee some older commit
</code></pre>
<p>Now the subtree in <code>project</code> and the <code>utils</code> remote have diverged in that the remote contains a squashed commit, but the subtree in <code>project</code> has the 2 original commit. Does git do anything handle this discrepancy? If not how can I as a developer get the subtree in project back into sync with the subtree remote so I can pull new changes?</p>
<p>Using git pull in this case (with or without the <code>squash</code> option) seem to be giving errors.
<code>Can't squash-merge: 'utils' was never added.</code> and <code>fatal: refusing to merge unrelated histories</code> respectively.</p>
",1,8469294,,
74957291,2023370,12/30/2022 0:55,2,235,<git><version-control><git-subtree>,How to use git subtree to create a new repo from a subdirectory,"<p>I have a git repository, and would like to use a subdirectory of it, to create a new repository.  I would then like the new repository to be able to pull in changes from the parent repository subdirectory periodically; as if from an upstream repo as a repository fork. Can someone please explain the steps involved? For simplicity, let's assume I would like to use <code>git subtree</code> to accomplish this.</p>
",0,2023370,,
75045930,734036,1/8/2023 6:41,0,21,<git><github><git-subtree>,How to revert `git subtree push`?,"<p>So I have to main project:</p>
<p><code>MyProject</code></p>
<p>and a folder which is a subtree of another repo:</p>
<p><code>MyProject/Dependency</code></p>
<p>I need to change something in the subtree folder and push the change to its own repo, so I did:</p>
<blockquote>
<p>git remote add -f dependency git@DependencyPath/Dependency.git<br />
git remote add -f dependency-fork git@DependencyPath:myname/Dependency.git<br />
git checkout -b branch-mychange<br />
[MADE CHANGES and commited]<br />
git subtree push --prefix Dependency dependency-fork branch-mychange</p>
</blockquote>
<p>But there's something wrong in my change, and now Github complains:</p>
<blockquote>
<p>We found potential security vulnerabilities in your dependencies.</p>
</blockquote>
<p>So I want to revert the <code>push</code> that I did earlier, even better, reset it to a state before I made the change. I can make the change directly in my fork of the <code>dependency</code> repo, but is there anyway to do it in <code>MyProject</code> repo? Furthermore, is there a way I can see what repo/branch the <code>Dependency</code> folder points to (as in the <code>dependency</code> repo)?</p>
<p>Thanks!</p>
",0,734036,,
75070134,472245,1/10/2023 12:40,0,29,<git><git-subtree>,How to switch with git subtree to a different branch for one of the subtree projects,"<p>When I have a container project with bunch of <code>git subtree</code> directories, each tracking their respective <code>main</code>, how can I switch (and even create) a branch in one of the subtrees?</p>
<p>The setup being:</p>
<pre><code>.\container-proj       # branch main
   .\sub-proj-1            # branch main
   .\sub-proj-2            # branch main
   .\sub-proj-3            # branch main
</code></pre>
<p>Now I want to ake changes and when I do</p>
<p>(.\container-proj) $ git checkout -b new-branch</p>
<p>I get</p>
<pre><code>.\container-proj       # branch new-branch
   .\sub-proj-1            # branch main
   .\sub-proj-2            # branch main
   .\sub-proj-3            # branch main
</code></pre>
<p>Now I make changes</p>
<pre><code>(.\container-proj) $ touch README.md
(.\container-proj) $ cd sub-proj-1
(.\container-proj\sub-proj-1) $ touch README.md
</code></pre>
<p>I can commit and push these changes with</p>
<pre><code>(.\container-proj) $ git commit -m MyChange -a ; git push
</code></pre>
<p>but of course they ony get into my <code>container-proj</code>s branch <code>new-branch</code>.</p>
<p>I can publish the changes upstream into the <code>sub-proj-1</code> with</p>
<pre><code>(.\container-proj) $ git subtree push --prefix sub-proj-1 sub-proj-1 main
</code></pre>
<p>but that will only push it into the <code>main</code> branch of the project.</p>
<p>I would like to have those changes in a branch <code>sub-new-branch</code> in that project.</p>
<p>Basically, that I have the setup</p>
<pre><code>.\container-proj       # branch new-branch
   .\sub-proj-1            # branch sub-new-branch
   .\sub-proj-2            # branch main
   .\sub-proj-3            # branch main
</code></pre>
<p>for a while, but can easily switch back to <code>main</code> for <code>sub-proj-1</code>.</p>
",0,472245,,
75137229,1497454,1/16/2023 16:45,0,89,<git><git-subtree>,How to clone only a specific folder when doing git subtree?,"<p>I'm trying to utilize git subtree to add another repo into my existing repo. Problem is I don't want all the files from the repo. I only want to clone the files within a specific folder.</p>
<p>So for example, my main repo is like this</p>
<pre><code>/
 /public
 /server
 /books
</code></pre>
<p>And the other repo (which I want to clone into the above is)</p>
<pre><code>   /
    /booksrepo/info.json
              /info2.json
              /info3.json
    settings.json
    config.json
</code></pre>
<p>If I clone the whole repo, I get everything including the config/settings files. Instead I only want to target the <code>booksrepo</code> folder. So in the end, I want it to look like</p>
<pre><code>/
 /public
 /server
 /books/info.json
       /info2.json
       /info3.json
</code></pre>
<p>This tutorial <a href=""https://gist.github.com/SKempin/b7857a6ff6bddb05717cc17a44091202"" rel=""nofollow noreferrer"">https://gist.github.com/SKempin/b7857a6ff6bddb05717cc17a44091202</a> doesn't seem to mention about picking from only a subfolder. Is there a way to achieve this?</p>
<p>Thanks</p>
",4,1497454,,
75220931,9046804,1/24/2023 11:37,0,52,<git><git-submodules><git-subtree>,Different git submodules on different Folders on the same git repository,"<p>I'll explain the mission.
I have a core git repository with my main software.
I have to use this software for different clients for which I have to specialize.</p>
<p>My goal is to have as many folders locally as my clients.
Within all folders I want to clone the CORE repository and I want to hook a submodule of specializations for that customer of that folder.</p>
<p>By doing so I can continue to make the core evolve even from different folders and at the same time I keep the specializations of the various customers distinct and isolated</p>
<p>I hope I explained myself, but I also leave an image for greater clarity</p>
<p><a href=""https://i.stack.imgur.com/IT7Pw.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IT7Pw.jpg"" alt=""enter image description here"" /></a></p>
<p>As an initial idea I had to manage a single local folder with the core and use the branches to specialize the various clients, but especially for Laravel I didn't want to versione the Storage folder so I find files from all the clients together.
That's why I would prefer to manage clients in separate folders locally</p>
",2,9046804,,
75425606,3746069,2/12/2023 7:58,0,95,<git><git-submodules><gitignore><git-subtree>,"Nested folder structure with multiple git repos: submodules, subtrees or .gitignore?","<p>I have set up a set of large Repositories (interlinked HTML-Documentation) and have these requirements:</p>
<ol>
<li>since they are large, i needed to split them up into multiple Repos</li>
<li>Repos need to be checked out into a fixed Folder structure so the relative Links work</li>
<li>users should be able to pick and check out individual repos</li>
<li>all Repos have a simple, linear history with usually only 'main' branch</li>
<li>The actual Version of each repo is not critical (unlike with Code), as long as the files are not moved (which is forbidden, users are asked to leave a forwarding tombstone)</li>
<li>List item</li>
</ol>
<p>This is what I have tried:</p>
<ol>
<li><p>nested submodules: these quickly created conflicts with me, because they track the individual version of each sub-repo which is different in each clone. (Sub-question: are these conflicts 'normal'? Does this ever work in a distributed environment where submodules constantly change or it it a bad idea to use submodules?)
We have started to no longer check in the upper/downstream Repos to avoid conflicts, but one result is that it is always 'dirty'</p>
</li>
<li><p>nested repositories in Folders marked as .gitignore: This seems to works and is sufficient, because the versions between individual repos are not critical. I wonder though if this is a good practice. Mind that cloning all sub-repos is a hassle, but individual users must be able to pick sub-sections. I think about checking in scripts to clone and pull whole sub-directories of repos, but is there maybe a better way?</p>
</li>
<li><p>subtrees: AFAIK these track the full history of the nested repos within the upper/root repo, which would be way too huge. Can someone comment on this?</p>
</li>
</ol>
",3,3746069,,
75439295,2580815,2/13/2023 17:30,0,6,<git-subtree>,Available alternative for `git subtree push-all`,"<p>Some articles mentions a command line option <code>git subtree push-all</code> to push for each subtree project to its own repository.</p>
<p>However, it seems that the latest git does not support such command.
FYI, I am using git on Windows.</p>
<p>What happened to <code>git subtree push-all</code> command and how can I push all subtree repositories at once?</p>
",0,2580815,,
75482964,1328439,2/17/2023 10:19,0,13,<git><git-subtree>,use git-subtree to move a folder from one repository to another preserving history,"<p>I have two repos <code>git@remote:fruit.git</code> and <code>git@remote:veg.git</code> and the Fruit repo contains a folder that does not belong there logically.</p>
<pre><code>fruit
 |-.git
 |-apples
 |  |-royal_gala
 |-oranges
 |  |-tangerine
 |-beetroot
    |-sugar_beets
</code></pre>
<p>git-subtree seems to be the tool for the job, so I did the following:</p>
<pre class=""lang-bash prettyprint-override""><code>git clone git@remote:fruit.git
git clone git@remote:veg.git

pushd fruit
git subtree split -P beetroot -b beetroot
popd

pushd veg
git subtree add -P beetroot ../fruit/ beetroot
git push
popd

pushd fruit
git rm -rf beetroot
git push
popd
</code></pre>
<p>This accomplished the task of moving the files but did not move the history. Is it possible to modify this procedure to move the history of beetroot changes or should I abandon git-subtree altogether?</p>
",1,1328439,,
75662785,21349258,3/7/2023 13:45,0,30,<git><git-submodules><git-subtree>,nested but communicating git repositories,"<p>let <code>upper</code>, <code>left</code>, and <code>right</code> be directories as in the following diagram.</p>
<pre><code>upper
├── left
└── right
</code></pre>
<h3>question</h3>
<p>how do i best manage these with git as local git repositories such that</p>
<ul>
<li>each <code>upper</code>, <code>left</code> and <code>right</code> has a separate git repository,</li>
<li>histories from the repositories of <code>left</code> and <code>right</code> can be somehow propagated to the repository of <code>upper</code>,</li>
<li>histories from the repository <code>upper</code> can be somehow propagated to the repositories of <code>left</code> and <code>right</code>,</li>
</ul>
<p>both of the latter preferably being done without changing the corresponding work-trees <code>upper</code>, <code>left</code>, and <code>right</code>?</p>
<h3>example</h3>
<p>for clarity, call the git repositories of <code>upper</code>, <code>left</code> and <code>right</code> just <code>upper.git</code> <code>left.git</code> and <code>right.git</code> respectively. (you can imagine them as bare repositories entirely outside the mentioned directory structure.) first</p>
<ul>
<li>i work on <code>left</code> and commit to <code>left.git</code>; then</li>
<li>i somehow propagate the history from <code>left.git</code> to <code>upper.git</code>, so the latter knows about all the work i have done; then</li>
<li>i work on <code>upper</code>, sometimes working on files in <code>right</code>, and commit to <code>upper.git</code>; then</li>
<li>i somehow propagate the history from <code>upper.git</code> to <code>right.git</code>, so the latter knows about all the work i have done on files in <code>right</code>.</li>
</ul>
<h3>thoughts</h3>
<p>initially i thought that i could realise this by using git subtree. but when i try to include the repository for <code>left</code> in <code>upper</code> using <code>git subtree -P left add ⟨left.git⟩ master</code>, i - perhaps unsurprisingly - get:</p>
<pre><code>fatal: prefix 'left' already exists.
</code></pre>
<p>i have searched similar questions on stackoverflow, regarding nested repositories, but i quite don’t see how they relate to my problem. i probably don’t understand git subtrees well enough and perhaps i’m a bit too simple-minded in general. i have not looked deeply into git submodules; it seems to me that they are meant for something else.</p>
",0,21349258,,
75936290,13757726,4/5/2023 6:31,0,47,<github><github-actions><workflow><git-subtree><subtree>,git subtree push complications in github workflow,"<p>I have a two repositories named '<strong>Car</strong>' and '<strong>Tyre</strong>' in GitHub. Repository 'Tyre' is implemented as a subtree in Repository '<strong>Car</strong>' inside a folder named as '<strong>common</strong>'. Now when I change something in the '<strong>common</strong>' folder of '<strong>Car</strong>' which is nothing but Repo '<strong>Tyre</strong>', I manually do '<strong>git subtree push</strong>' or '<strong>git subtree pull</strong>' commands in my local terminal to push or pull the changes. It works fine.</p>
<p>But to avoid doing this manually everytime, I created a GitHub Workflow file that can automate this. However, the github actions fails with error <em>&quot;updates were rejected because the remote contains works that you don't have locally <strong>(though there isn't any)</strong>, fetch first before push&quot;</em></p>
<p>I tried 'git subtree pull' in the workflow file and it shows 'can't merge unrelated histories'.</p>
<p>I tried giving <strong>--allow-unrelated-histories</strong> at the end of git subtree pull, but git subtree doesn't have that command.</p>
<p>Why is it that git subtree push never requires a pull when done in local machine and everything works perfectly in local terminal, whereas it fails in actions ?</p>
<p>This is the workflow file I used (Car Repository),</p>
<pre><code>name: Update common

on:
  push:
    branches:
      - main
    paths:
      - &quot;src/common/**&quot;

jobs:
  update-common:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.TOKEN }}
      - name: Update TYRE repository
        run: |
          git config user.name &quot;username&quot;
          git config user.email &quot;useremail&quot;
          git subtree push --prefix src/common https://github.com/username/TYRE.git main
</code></pre>
",1,13757726,,
25886008,501,9/17/2014 8:44,4,1664,<git><tfs><git-subtree><git-tfs>,How to manage two TFS projects in one git repository?,"<p>We are using TFS as main source control and I would like to use git as a ""frontend"" together with <a href=""https://github.com/git-tfs/git-tfs"" rel=""nofollow"">git-tfs</a> <a href=""https://github.com/git-tfs/git-tfs/blob/master/doc/commands/rcheckin.md"" rel=""nofollow"">rcheckin</a> command but I have problems importing my repositories into git.</p>

<p>I have a two projects in my TFS </p>

<pre><code>$/ProjectA
$/ProjectB
</code></pre>

<p>and I would like to manage them in one git repository.</p>

<p>How I can clone those two into one git repository so I can commit and push changes to both projects as one TFS changeset?</p>

<p>I tried using <a href=""https://github.com/git-tfs/git-tfs/blob/master/doc/commands/subtree.md"" rel=""nofollow"">git tfs subtree</a> but somehow I cannot figure out workflow with this. My approach was to init git repo like shown below but I got errors I cannot recover from:</p>

<pre><code>&gt; git init
Initialized empty Git repository in c:/somedir/.git/

&gt; git tfs subtree add --prefix=ProjectA  http://tfs_server:8080/tfs/ $/ProjectA
executing subtree add
-&gt; new owning remote default
-&gt; new remote default_subtree/ProjectA
Fetching from TFS remote 'default_subtree/ProjectA'...
C3779 = 7e532464ef6120ac0b19aa3c7651ceae915dc366
C3780 = 16f4636fc53d729767f65213ed047c11d1a707ee
fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'
error running command: git subtree add --prefix=ProjectA ""-m Add 'ProjectA/' from commit '16f4636fc53d729767f65213ed047c11d1a707ee'

git-tfs-id: [http://tfs_server:8080/tfs/];C3780"" refs/remotes/tfs/default_subtree/ProjectA
Command exited with error code: 1
</code></pre>
",2,501,0,0
26184140,2241384,10/3/2014 17:53,1,225,<git><deployment><git-subtree>,'does not appear to be a git repository' error when deploying subtree to remote,"<p>I'm trying to use git subtree to deploy site files to a remote server at dreamhost, but it goes sideways at the end. Here's what I did.</p>

<p>Made a directory for the repo:</p>

<pre><code>mkdir iliumsite.git
</code></pre>

<p>In that directory, made a new bare repo:</p>

<pre><code>git init --bare
</code></pre>

<p>Set up the post-receive hook. Still in this directory, created a new post-receive file in nano, with the following content:</p>

<pre><code>#!/bin/sh
GIT_WORK_TREE=~/f.ilium.com git checkout -f
</code></pre>

<p>Made the hook executable:</p>

<pre><code>chmod +x hooks/post-receive
</code></pre>

<p>Added the remote on local machine:</p>

<pre><code>git remote add dreamhost ssh://ilium_shell@ilium.com/~/iliumsite.git
</code></pre>

<p>So now I should be ready to push my /dist folder with subtree:</p>

<pre><code>git subtree push --prefix dist/ dreamhost master
</code></pre>

<p>This causes the following output:</p>

<pre><code>Computer:bootstrap mattk$ git subtree push --prefix dist/ dreamhost master
git push using:  dreamhost master
-n 1/      90 (0)
-n 2/      90 (1)
-n 3/      90 (2)
-n 4/      90 (3)
-n 5/      90 (4)
-n 6/      90 (5)
-n 7/      90 (6)
-n 8/      90 (7)
-n 9/      90 (8)
-n 10/      90 (9)
… MORE OF THIS…
-n 86/      90 (85)
-n 87/      90 (86)
-n 88/      90 (87)
-n 89/      90 (88)
-n 90/      90 (89)
ilium_shell@ilium.com's password: 
fatal: '~/iliumsite.git' does not appear to be a git repository
fatal: The remote end hung up unexpectedly
Computer:bootstrap mattk$ 
</code></pre>

<p>It starts to execute, but then suddenly determines this isn't a git repo. Can't seem to pinpoint where things went wrong. Any suggestions?</p>
",2,2241384,,
26224260,598093,10/6/2014 20:22,2,578,<git><merge><git-subtree>,re-do git subtree pull after revert,"<p>I have a main repo called <code>mainrepo</code> and an external one called <code>auxrepo</code>.
Routinely, I do a git subtree pull of <code>auxrepo</code> into a directory within <code>mainrepo</code>, like so:</p>

<p>First I created a new branch in <code>mainrepo</code> called <code>aux-update</code> and then:</p>

<pre><code>git remote add auxrepo git@git.example.com:example/auxrepo.git
git subtree add --squash --prefix=lib/auxrepo auxrepo auxrepo-branch
git subtree pull --squash --prefix=lib/auxrepo auxrepo auxrepo-branch
git commit
</code></pre>

<p>and then I will merge in the <code>aux-update</code> branch into <code>mainrepo</code>.</p>

<p>However, yesterday I did a pull of bad code from <code>auxrepo</code>, and had to push a revert of the changes to <code>mainrepo</code>. I did this via <code>git revert -m 1 $SHA</code> where <code>$SHA</code> was the sha from the merge of the <code>aux-update</code> branch.</p>

<p>Now today <code>auxrepo</code> has been fixed with new commits, and I want to pull in everything again with a subtree pull.</p>

<p>The problem is, when I just simply do my usual <code>git subtree pull --squash --prefix=lib/auxrepo auxrepo auxrepo-branch</code>, it only gets the new commits from today, and not the old commits that were reverted.</p>

<p>How can I subtree pull all the commits from <code>auxrepo</code>, including yesterday's commits and the new commits from today?</p>
",0,598093,,
9777564,673759,3/19/2012 20:37,31,19496,<git><merge><git-subtree>,git-subtree pull complications,"<p>We have been trying to get <a href=""https://github.com/apenwarr/git-subtree"" rel=""noreferrer"">git-subtree</a> working on a project (with git version 1.7.9.4) and have run into a bit of a complication. Someone else previous added the subtree with this command some months ago: </p>

<pre><code>git subtree add --prefix=foo git@example.com:foo.git master
</code></pre>

<p>Now there have been substantive changes to <code>foo</code> and we'd like to merge in those changes, ideally squashing them in. None of the files have been modified since they were imported. </p>

<p>I've tried three things to try and merge in the changes.</p>

<p>First:</p>

<pre><code>git subtree pull --squash -P foo git@example.com:foo.git master
</code></pre>

<p>Which throws the exception: <code>Can't squash-merge: 'foo' was never added.</code></p>

<p>Second:</p>

<pre><code>git subtree pull -P foo git@example.com:foo.git master
</code></pre>

<p>This works (sort of), but has the issue of pulling in all of the commits and has conflicts with the files that have been modified. </p>

<p>Finally, I tried this:</p>

<pre><code>git pull --squash -s subtree git@example.com:foo.git  master
</code></pre>

<p>This gives me the desired result, with the output <code>Automatic merge went well; stopped before committing as requested</code> and all of the files showing up as modified (with the correct content).</p>

<p>Ideally I'd like to continue using first <code>git-subtree</code> version and get an output close to the last version.  If we have to use the last version consistently going forward, we will, but I am a little confused as to why the last one doesn't produce merge conflicts while the middle one does.</p>

<p>Any help is appreciated.</p>
",0,673759,0,0
28593584,740860,2/18/2015 20:46,5,9946,<git><git-subtree>,"What is the difference between ""git subtree pull"" and ""git pull -s subtree""","<p>We are having an issue where the command:</p>

<pre><code>git subtree pull --prefix=Root squash root master
</code></pre>

<p>is pulling code from the root repository into the . directory of our repository instead of the Root directory.  </p>

<p>This command has worked fine in the past.  The only difference is it has been a while since we have done a pull, so there are quite a few changes to merge.</p>

<p>I can't seem to find any official documentation on ""git subtree"", but there is a lot on the subtree merge strategy used with ""git pull -s subtree"".  What is the difference (if any)?</p>
",2,740860,0,0
47222686,4532134,11/10/2017 12:20,6,2249,<git-subtree>,"pull git subtree, working tree has modification","<p>I've a remote repository let's call it <em>subrepo</em>. I want to include it as subtree in local repository, let's call it <em>mainrepo</em>. I'll put <em>subrepo</em> under the path 'subrepofold/'.</p>

<p>I added as usually the remote using:</p>

<pre><code>git remote add subrepo git@remote.subrepo.git
</code></pre>

<p>On <em>mainrepo</em> I've only a branch (master). I added and committed all:</p>

<pre><code>git add --all
git commit -m ""message""
git status
</code></pre>

<blockquote>
  <p>On branch master
      nothing to commit, working directory clean</p>
</blockquote>

<pre><code>git diff-index HEAD --exit-code --quiet
</code></pre>

<p>Give me no output. Running:</p>

<pre><code>git subtree pull --prefix=""subrepofold"" subrepo master --squash
</code></pre>

<p>I get the following message:</p>

<blockquote>
  <p>Working tree has modifications.  Cannot add.</p>
</blockquote>

<p>I know it seems to be the exact problem described <a href=""https://stackoverflow.com/questions/3623351/git-subtree-pull-says-that-the-working-tree-has-modifications-but-git-status-sa"">here</a>, but none of the replies seems to resolve the problem.</p>
",0,4532134,,
47255480,8067213,11/13/2017 0:17,1,78,<git><git-merge><git-subtree>,Merge git repositores,"<p>I have three GIT repositories:</p>

<ul>
<li>Repo1</li>
<li>Repo2</li>
<li>Repo3</li>
</ul>

<p>and i want to unify them into a single repo, like so:</p>

<p><code>mainRepo/Repo1</code></p>

<p><code>mainRepo/Repo2</code></p>

<p><code>mainRepo/Repo3</code></p>

<p>where every old repository is a subfolder of the new one. The <code>mainRepo</code> is a new repository, without anything inside.</p>

<p>The old repositories will be deleted, so there is no need to keep the remote, and i need to keep file history. I have tried to do it with subtree and manually merging, but didnt succeed.</p>
",4,8067213,,
47643453,9053347,12/4/2017 23:07,1,70,<git><composer-php><git-merge><git-subtree>,git add repositories into subdirectory preserving history,"<p>I have to add one git repository into a subfolder into another repository preserving history of both repositories (merge a composer package repository into the main repository to require with type 'path'). The goal is to have just one repository with all project specific packages in one repository at the end. </p>

<p>I tried the subtree workflow, but with the merge command </p>

<pre><code>git merge -s ours --no-commit repo/branch
</code></pre>

<p>I get the following error:</p>

<pre><code>fatal: refusing to merge unrelated histories
</code></pre>

<p>How can I manage this?</p>

<p>Thank you for your answers!</p>

<p>Sebastian</p>
",0,9053347,,
19737004,1190861,11/1/2013 23:22,1,105,<git><version-control><git-subtree>,git subtree changes the package directory,"<p>I'm using git subtree to split specific package of a java project into another repository (retaining the history) as the following</p>

<pre><code>$ git subtree split -P src/main/java/com/company/package -b moved_package_branch
</code></pre>

<p>then when switch to this branch I find that all the content of the package is moved to the root of the project not to it original place (src/main/java/com/company/package)</p>

<p>Any idea about how to fix it?</p>
",0,1190861,,
20102594,1013628,11/20/2013 17:19,10,5165,<git><push><git-push><git-subtree><squash>,git subtree push --squash does not squash,"<p>I am using <code>git subtree</code> to organize my git repositories. Let's say I have a main repository called <code>repo</code> and a library called <code>lib</code>.</p>

<p>I successfully ""imported"" the <code>lib</code> repository by squashing its history. I would now like to contribute back to <code>lib</code> by squashing the history too. This does not seem to work: I specify the <code>--squash</code> option to <code>git subtree push</code> but when looking at the history I still send all the commits.</p>

<h1>How to reproduce</h1>

<p>Here is a script showing the minimal commands needed to reproduce the problem:</p>

<pre><code>#!/bin/bash
rm -rf lib lib-work repo

# repo is the main repository
git init repo
# lib is the 'subtreed' repository (bare to accept pushes)
git init --bare lib

git clone lib lib-work
cd lib-work
# adding a bunch of commits to lib
echo ""v1"" &gt; README
git add README
git commit -m 'lib commit 1'
echo ""v2"" &gt; README
git add README
git commit -m 'lib commit 2'
echo ""v3"" &gt; README
git add README
git commit -m 'lib commit 3'
git push origin master
cd ..

cd repo
# adding initial commit to have a valid HEAD
echo ""v1"" &gt; README
git add README
git commit -m 'repo commit 1'
git remote add lib ../lib
git subtree add --prefix lib lib master --squash
echo ""v4"" &gt; lib/README
git add lib/README
git commit -m 'repo commit 2'
echo ""v5"" &gt; lib/README
git add lib/README
git commit -m 'repo commit 3'
echo ""v6"" &gt; lib/README
git add lib/README
git commit -m 'repo commit 4'
#git log --all --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s%Creset' --abbrev-commit
# ""not working"" command :
git subtree push --prefix lib lib master --squash

# pretty print the history
git log --all --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s%Creset' --abbrev-commit
cd ../lib
echo
git log --all --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s%Creset' --abbrev-commit
</code></pre>

<h1><code>git log</code> showing the problem</h1>

<p>The output of the two <code>git log blabla</code> commands are:</p>

<pre><code>* b075d5e - (HEAD, master) repo commit 4
* ebdc7c7 - repo commit 3
* 9f1edab - repo commit 2
*   3d48bca - Merge commit '34e16a547819da7e228f3add35efe86197d2ddcb' as 'lib'
|\
| * 34e16a5 - Squashed 'lib/' content from commit 2643625
* 3f1490c - repo commit 1
* 1f86fe3 - (lib/master) repo commit 4
* 9f1639a - repo commit 3
* 8bd01bd - repo commit 2
* 2643625 - lib commit 3
* 3d64b8c - lib commit 2
* aba9fcb - lib commit 1
</code></pre>

<p>and :</p>

<pre><code>* 1f86fe3 - (HEAD, master) repo commit 4
* 9f1639a - repo commit 3
* 8bd01bd - repo commit 2
* 2643625 - lib commit 3
* 3d64b8c - lib commit 2
* aba9fcb - lib commit 1
</code></pre>

<p>As you can see, lib sees the <code>""repo commit 2,3,4""</code> although I specified the squash option.
The other way around worked hence the <code>Squashed 'lib/' content from commit f28bf8e</code>.</p>

<p>I tried on windows with git version 1.8.1.msysgit.1 and on linux with git version 1.8.3.4.</p>

<p>So why doesn't the <code>--squash</code> option do a squash?</p>

<h2>Side question</h2>

<p>Why does lib/master appears in the log of the <code>repo</code> repository ?
Knowing it appears <em>only</em> after the ""failed"" <code>git push</code>: if you uncomment the first <code>git log blabla</code> you get the following output showing the stashed history but no sign of lib/master :</p>

<pre><code>* b075d5e - (HEAD, master) repo commit 4
* ebdc7c7 - repo commit 3
* 9f1edab - repo commit 2
*   3d48bca - Merge commit '34e16a547819da7e228f3add35efe86197d2ddcb' as 'lib'
|\
| * 34e16a5 - Squashed 'lib/' content from commit 2643625
* 3f1490c - repo commit 1
</code></pre>
",7,1013628,0,0
20174364,591137,11/24/2013 12:19,3,5101,<git><git-submodules><git-subtree>,fatal: Not a git repository: git status works. But git add . doesn't,"<p>I've had a gitsubmodule which I failed to properly uninstall. (Guessing here). I added a subtree with the same name. And everything went fine until I should stage my files. </p>

<pre><code>$git status /*Shows unstaged files just fine*/
$git add . /*Prints error message*/

fatal: Not a git repository:MyProject/SLibrary/../.git/modules/SLibrary
</code></pre>

<p>Any ideas how I can get rid of the error message so I can stage my files with git add -a/.</p>
",4,591137,0,0
39281079,1726805,9/1/2016 21:23,22,18149,<git><git-subtree>,"git subtree error ""fatal: refusing to merge unrelated histories""","<p>I'm trying to figure out how 'git subtree' works. I've followed all directions on <a href=""https://help.github.com/articles/about-git-subtree-merges/"" rel=""noreferrer"" title=""About subtree merges"">this page</a>, but I always get an error trying to merge the subtree project in my own repo ('Step 2'): <code>fatal: refusing to merge unrelated histories</code>. </p>

<p>I've read <a href=""https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories"">this post</a>, and when I use the <code>--allow-unrelated-histories</code> option, it seems to work fine. However, I'm not sure whether I should use this...My impression is that the whole point of subtrees is to have unrelated histories within one repository, so it feels strange to have to add the option. Should I add it nevertheless, or am I doing something wrong?</p>

<p>I'm using git v2.9.3 on osx 10.11.6</p>
",3,1726805,0,0
21205297,401196,1/18/2014 14:17,0,616,<git><github><refactoring><git-submodules><git-subtree>,Splitting out a sub directory in a git repo into it's own repo,"<p>I have the following structure:</p>

<pre><code> my_main_project/
    my_lib/
       file1
       dir2/
           file2
    my_other_files
</code></pre>

<p>And now, the <code>my_lib</code> has got to the point where it really should be it's own library, and should be a submodule in <code>my_main_project</code></p>

<p>IE:</p>

<pre><code>my_main_project/  (is repo)
    &lt;my_lib&gt;  (is sub module)
    my_other_files/

my_lib/ (is repo)
    file1
    dir2/
    file2
</code></pre>

<p>I ideally wish to keep the git history for <code>my_lib</code> for obvious reasons.</p>

<p>Anyway, I tried the following: <a href=""https://stackoverflow.com/questions/12514197"">Convert a git folder to a submodule retrospectively?</a></p>

<p>However, it fielded this error </p>

<pre><code>$ git filter-branch --subdirectory-filter '../my_main_project/my_lib' --prune-empty -- --all
&gt; fatal '../my_main_project/my_lib' is outside repository
</code></pre>

<p>What, am I doing wrong and what needs to be done to get this working. I should point out that my_main_project is on branch master, and that is the branch of the subdir I wish to port.</p>

<p>Please let me know if there is an supplementary information you need.</p>
",1,401196,,
40308709,3518599,10/28/2016 15:47,7,886,<git><git-subtree>,Can't use git subtree pull,"<p>I'm trying to pull from a remote into a folder in my repo. When using:</p>

<p><code>git subtree pull --prefix my-local/folder my-remote master</code></p>

<p>I'm getting the following error:</p>

<p><code>fatal: refusing to merge unrelated histories</code></p>

<p>I read in an other <a href=""https://stackoverflow.com/questions/39281079/git-subtree-error-fatal-refusing-to-merge-unrelated-histories"">post</a> that I can use the option <code>--allow-unrelated-histories</code> but when I do I get <code>error: unknown option --allow-unrelated-histories</code> 
(I put the option last)</p>

<p>I'm using git version 2.10.1 and Windows 10</p>

<p>Any help or ideas on how to move forward with this is greatly appreciated!</p>
",1,3518599,,
39488940,110976,9/14/2016 11:08,0,276,<git><github><bitbucket><git-submodules><git-subtree>,how to use git repos inside another git project without Gitsubmodule or subtree,"<p>I have two git repositories <code>main-pro</code> and another git repo <code>plugins</code>
I use main-pro as my core and <code>plugin</code> to components. </p>

<p>I don't want to use the git-submodule anymore because every change in the <code>plugin</code> repo will show in the <code>main-pro's</code> change list. I don't want to keep any relationship between these two repos, because the <code>plugin</code> repo is only for the development environment so I have many things to push pull on both repos, sometime it shows conflict from the plugin repo in the main-pro.</p>

<p><strong>I dont want to keep the latest commit-id of the plugin repo in main-project.</strong></p>

<p>What is the best way? if am not using submodule or subtree. how can I achive this.</p>

<p>when I tried to clone a plugin  in to my main projects subfoler, it automaticaly convert to submodule. how to detach that plugin folder from the main project. </p>

<p>I tried to exclude using gitignore, but that fails. </p>

<p>Does anyone have an Idea about this situation?</p>
",2,110976,,
20757601,1520502,12/24/2013 8:40,31,8799,<git><git-submodules><git-subtree><git-filter-branch>,git splitting repository by subfolder and retain all old branches,"<p>I have a git repo with 2 directories and multiple branches, I want to split them and create all branches</p>

<pre><code>`-- Big-repo
    |-- dir1
    `-- dir2

Branches : branch1, branch2, branch3 ...
</code></pre>

<p><strong>What I want</strong></p>

<p>I want to split dir1 and dir2 as two separate repos and retain branches branch1, branch2 ... in both repositories.</p>

<pre><code>dir1
Branches : branch1, branch2, branch3 ...

dir2
Branches : branch1, branch2, branch3 ...
</code></pre>

<p><strong>What I tried:</strong></p>

<p>I am able to split them into 2 repos using </p>

<pre><code>git subtree split -P dir1 -b dir1-only 
git subtree split -P dir2 -b dir2-only 
</code></pre>

<p>But, it is not creating any branches after separation.</p>

<p>To get all branches: </p>

<pre><code>git checkout branch1 (in Big-repo)
git subtree split -p dir1 -b dir1-branch1

git checkout branch2 (in Big-repo)
git subtree split -p dir1 -b dir1-branch2

And push these branches to newly created repo.
</code></pre>

<p>This involves more manual effort and I am sure there might be a quick way to achieve this?</p>

<p>Any ideas???</p>
",0,1520502,0,0
40003831,955273,10/12/2016 16:35,12,5261,<git><git-subtree>,Push changes from git subtree to a branch for a pull request,"<p>How can I create local changes to a <code>git subtree</code> and then push those changes to a branch in the subtree's repo so that I can then create a pull request to merge the changes from that branch into the subtree's <code>master</code>?</p>

<p>Assume I have two repos, <code>project</code> and <code>protocols</code>, both of which are under my control.</p>

<p><strong>Step 1: add <code>protocols</code> as a <code>subtree</code> in the <code>project</code> repo</strong></p>

<pre><code>$ git remote add protocols git@bitbucket.org:corp/protocols.git

$ git remote
origin
protocols

$ git subtree add --prefix=protocols protocols master --squash
...
From bitbucket.org:corp/protocols
 * branch            master     -&gt; FETCH_HEAD
 * [new branch]      master     -&gt; protocols/master
Added dir 'protocols'
</code></pre>

<p><strong>Step 2: make some changes in the <code>project</code> repo to files that are in the <code>protocols</code> subtree</strong></p>

<pre><code>$ cd protocols
$ echo ""foo"" &gt; some_file
$ git commit -a -m ""added foo""
</code></pre>

<p><strong>Step 3: create a branch in the <code>protocols</code> repo and push my local changes from <code>project/protocols</code> subtree to that branch</strong></p>

<p>??</p>

<p>I'm unsure as to how best to achieve this...</p>

<p>Once my <code>subtree</code> changes have been successfully pushed to a branch in the  remote <code>protocols</code> repo, I can then create a pull-request to merge those changes back into the <code>protocols</code> <code>master</code>.</p>

<p><strong>Questions:</strong></p>

<ul>
<li><p>I have a local copy of <code>protocols</code>. Should I change to that repository, create a branch, and then change back to <code>project</code> and push the <code>subtree</code> changes to my local <code>protocols</code> repo?</p></li>
<li><p>Can I push the <code>subtree</code> changes <em>directly to a new branch</em> (as of yet uncreated) in my <strong>local</strong> <code>protocols</code> repo?</p></li>
<li><p>Can I push the <code>subtree</code> changes <em>directly to a new branch</em> (as of yet uncreated) in the <strong>remote</strong> <code>protocols</code> repo?</p></li>
<li><p>Is this a recommended workflow?</p></li>
</ul>
",0,955273,0,0
20980565,492336,1/7/2014 19:53,5,1015,<git><git-subtree><git-tag>,git subtree split - the tags are not transferred,"<p>I have a git project that has one big root directory:</p>

<pre><code>C:\MyProject\MyProject
C:\MyProject\.git
</code></pre>

<p>And then all the files and subdirectories are inside <code>C:\MyProject\MyProject</code>. I want to remove that redundant root directory, so I used this command:</p>

<pre><code>git subtree split -P MyProject -b MyBranch
git checkout MyBranch
git branch -D master
git branch -m MyBranch master
</code></pre>

<p>There is a problem with this solution, however - <strong>the tags are still attached to the now-deleted</strong>, original master branch:</p>

<p><img src=""https://i.stack.imgur.com/xj8Rw.png"" alt=""enter image description here""></p>

<p>The gray branch is the original master branch, the red branch is the new one without the redundant directory, but the tags are still attached to the old branch's checkins.</p>
",2,492336,0,0
21531490,969,2/3/2014 15:41,1,300,<git><git-svn><git-merge><git-filter-branch><git-subtree>,"Convert svn projects to git, but allow merging of bugfixes made in svn","<p>I have a svn repository with many projects—but I am only interested in some (parts of server and full-client). </p>

<pre><code>trunk
  server
    src
      src-that-should-be-in-client
      other-src-that-belongs-to-server
    cfg
      cfg-that-should-be-in-client
      other-cfg-that-belongs-to-server
  client
  docs
  foo
  bar
</code></pre>

<p>In the process of transforming the build system of the client I want to convert the project to git. But all support branches where bugfixes will happen stay in svn.</p>

<p>I want to be able to merge bugfixes made in the support svn branches to git (and possibly vice versa as well). OK, this is easy, I know how to do this (I am not interested in the old branches and tags):</p>

<pre><code># create mirror of client
git svn clone --prefix=svn/ --trunk=trunk/client http://svn-server client
cd client
git remote add mirror path_to_remote_mirror
crontab -e # automatically call git svn rebase and git push mirror
# repeat for server
</code></pre>

<p>Work would be done on a fork of the remote mirror. To merge bugfixes made in svn, just add the mirror as remote and continue as described elsewhere (e.g. github). Cherry-Picking in the other direction is a little bit more advanced, but possible.</p>

<p>But I want to move parts of the server over to the client after transitioning to git—Without loosing the history and being able to merge bugfixes. </p>

<p>One way I thought of was to alter the <code>git svn clone</code> command using <code>--trunk=trunk</code> and adding <code>--include-paths=(?:server|client)</code>. Now I have a mirror of both the server and client in one git repository. I would fork it, move the parts that belong to the client, delete the server folder and finally move everything under client to the root (with intermediate commits, of course).</p>

<p>Another way of doing this would be to create a fork of the client, and <a href=""http://git-scm.com/book/ch6-7.html"" rel=""nofollow"">subtree merge</a> parts of the server over.</p>

<p>I see one problem with the first approach, which is files added in svn in the server code will be merged as well, and files changed in the server code (and deleted in git) might result in merge conflicts. Workaround: use <code>git merge --no-commit</code> inspect the server-dir if created during merge, if it contains files that belong in the client, move them over, delete the server-dir, commit. But other than that, it seems easy enough to be done by non-git-wizzards. Maybe it can be improved by calling filter-branch afterwards?</p>

<p>For the second approach I am not sure, if merges will even work. At least it seems to be more advanced and might not be doable by non-git-wizzards.</p>

<p>Which approach is better? Or is there a better approach?</p>
",0,969,,
29901431,1000282,4/27/2015 16:40,1,406,<git><merge><git-subtree>,git diff-tree showing changedset already merged,"<p>Just starting out with git subtree's. I've followed <a href=""http://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging"" rel=""nofollow"">the official beginners tutorial</a>.</p>

<p>In my working copy in directory <code>A</code> of repository <code>A</code>, I've added a subtree at subdirectory <code>B</code> for the repository <code>B</code>. The branch name I've used for checking out <code>B</code>'s master is also <code>B</code>.</p>

<p>I've made a commit in branch <code>B</code> and checked out <code>A</code>'s master, <code>git diff-tree -p B</code> has presented a diff corresponding to the last commit in <code>B</code>.</p>

<p>I've then applied the following command:</p>

<pre><code>git merge --squash -s subtree --no-commit B
</code></pre>

<p>And commited.</p>

<p>I've checked the merge went well, but the same <code>diff-tree</code> command from before is still presenting the same diff corresponding to the last commit in <code>B</code>, even though checking through <code>git log</code> and normal <code>git diff</code> I can see the commit was applied to master, I dunno why the previous <code>diff-tree</code> is persisting.</p>

<p>Why and what I'm doing wrong?</p>
",0,1000282,0,0
58232573,2589553,10/4/2019 8:26,1,67,<git><git-merge><git-pull><git-subtree>,`git subtree pull` yields weird change list in main project?,"<p>I use <code>dai-client-matcher</code> as a <code>subtree</code> in a main project. I recently made a small commit to <code>dai-client-matcher</code> and tried to <code>git subtree pull</code>, as what I have always done so far, to the main project. The pulling &amp; merging process seemed to go well until I manually checked each commit and found that the merging commit was saying that I had done a lot of changes (including lots of deletions) in my main project.</p>

<p>Here is two last commits in <code>dai-client-matcher</code>:</p>

<p><a href=""https://i.stack.imgur.com/iTDFE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iTDFE.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/pedqA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pedqA.png"" alt=""enter image description here""></a></p>

<p>As you can see, in the last commit I only made a single change in one single file namely <code>src/dcm_refdb_mnger.hpp</code>.</p>

<p>Current status of the main project:</p>

<p><a href=""https://i.stack.imgur.com/eZQ6D.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eZQ6D.png"" alt=""enter image description here""></a></p>

<p>The second line from the bottom shows the last merge of <code>dai-client-matcher</code> (commit <code>5e822365</code>) to the main project.</p>

<p>Now I <code>git subtree pull</code> the last commit of <code>dai-client-matcher</code> to the main project:</p>

<pre><code>duong2179-mbpro:main-project duong2179$ git fetch dai-client-matcher test-subtree
From git.abc.xyz.com:dai-client-matcher
 * branch              test-subtree -&gt; FETCH_HEAD
duong2179-mbpro:main-project duong2179$ git subtree pull --prefix subtrees/dai-client-matcher dai-client-matcher test-subtree --squash
From git.abc.xyz.com:dai-client-matcher
 * branch              test-subtree -&gt; FETCH_HEAD
Merge made by the 'recursive' strategy.
 subtrees/dai-client-matcher/src/dcm_refdb_mnger.hpp | 1 -
 1 file changed, 1 deletion(-)
</code></pre>

<p>Things seem to go well until I manually check the merge commit in the main project:</p>

<p><a href=""https://i.stack.imgur.com/CFIGR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CFIGR.png"" alt=""enter image description here""></a></p>

<p>The right side shows that I have done a lot of changes to the code base of main project.</p>

<p>Have I done anything wrong here? Why does the merge commit show a lot of changes like this?</p>
",0,2589553,,
30550559,536299,5/30/2015 19:37,2,2125,<git><git-subtree>,Is a git fetch necessary before git subtree pull?,"<p>I am in reference to the following article: <a href=""http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/"" rel=""nofollow"">git subtree blog entry</a>.</p>

<p>Amongst other, the following commands are listed:</p>

<pre><code>git remote add -f tpope-vim-surround https://bitbucket.org/vim-plugins-mirror/vim-surround.git
git subtree add --prefix .vim/bundle/tpope-vim-surround tpope-vim-surround master --squash
git fetch tpope-vim-surround master
git subtree pull --prefix .vim/bundle/tpope-vim-surround tpope-vim-surround master --squash
</code></pre>

<p>My question is: </p>

<blockquote>
  <p>what is the need for the <code>git fetch tpope-vim-surround master</code>?<br>
  Is it not redundant with the git pull listed next line below?</p>
</blockquote>
",0,536299,,
12978260,1098524,10/19/2012 16:10,11,7870,<git><cherry-pick><git-subtree>,How do I go to a specific commit using git-subtree?,"<p>I am using Avery Pennarun's git-subtree which is an extension to git. </p>

<p>How do I cherry-pick a commit from a sub-repo into my main repo using git subtree? Also how do I go to a specific commit in the history of the sub-repo after I have already done a git subtree pull on that prefix?</p>

<p>I am primarily running this in the squash commits mode. </p>
",0,1098524,0,0
20356076,1597435,12/3/2013 16:10,1,436,<git><github><merge><git-subtree>,git merge in wrong folder,"<p>I have <code>mainProject</code> on git, with a <code>shared library</code>.
This <code>shared library</code> is also in <code>subProject</code>.</p>

<p><strong>my workflow</strong></p>

<p>I start my project by cloning the project and create a branch :</p>

<pre><code>git clone https://github.com/user/mainProject.git main-project
git checkout -b fix
</code></pre>

<p>I worked on my <code>mainProject</code>, and added a awesomeClass.php in the folder <code>lib/</code> (the root of the <code>shared library</code>)</p>

<p><strong>The new file structure:</strong></p>

<pre><code>/index.php 
/page1.php
/lib/form/contact.php
/lib/awesomeClass.php*
</code></pre>

<p>*=new</p>

<p>after this I add and commit my changes.</p>

<pre><code>git add lib/awesomeClass.php
git commit -m ""added new awesome class that will blow your mind""
</code></pre>

<p>Add the remote location of the <code>shared library</code>, fetch it and connect remote to local branch</p>

<pre><code>git remote add sharedlib https://github.com/user/sharedlib.git
git fetch sharedlib
git checkout -b sharedlib sharedlib/master
</code></pre>

<p>this switches my branch to <code>sharedlib</code> where I try to merge my changes to, to get the same changes of the <code>shared library</code> to my subProject.</p>

<pre><code> git merge --squash -s subtree --no-commit fix
</code></pre>

<p>This is where it goes wrong, The file structure was(seen from <code>sharedlib</code> branch perspective): </p>

<pre><code>/lib/form/contact.php
/lib/awesomeClass.php
</code></pre>

<p>after merge :</p>

<pre><code>/lib/form/index.php*
/lib/form/page1.php*
/lib/form/lib/form/contact.php*
/lib/form/lib/awesomeClass.php*

/lib/form/contact.php
/lib/awesomeClass.php
</code></pre>

<p>*=new</p>

<p>Can anyone explain how I can merge only the <code>shared library</code> and not the full <code>mainProject</code> into a wrong folder? 
Thanks!</p>
",3,1597435,0,0
58337351,6330106,10/11/2019 8:39,0,355,<git><gerrit><git-subtree>,Is git subtree compatible with Gerrit?,"<p>Our git repositories are hosted in Gerrit. A colleague maintains 2 repos <code>main</code> and <code>sub</code>. He wants to include <code>sub</code> inside <code>main</code> as a subtree. Here's so far what we have tried:</p>

<pre><code>git clone repo_url_main -b dev main
cd main
git subtree add -P foo/bar repo_url_sub master
touch foo/bar/baz.txt
git add .
git commit -m 'foo.bar.baz.tt'
git subtree push -P foo/bar repo_url_sub master
</code></pre>

<p>The first problem is that <code>git subtree push</code> fails because his account does not have the permission to directly push the commits without review. The review is what he wants.</p>

<p>For a non-subtree repo, we use <code>git push origin HEAD:refs/for/master</code> to create a review change. So we try <code>git subtree push -P foo/bar repo_url_sub master:refs/for/master</code> and it fails too. Git complains that <code>master:refs/for/master</code> is not a valid ref. I find <code>git subtree push  -P &lt;prefix&gt; &lt;repository&gt; &lt;ref&gt;</code> in the manual. The last part is <code>ref</code> instead of <code>refspec</code>. So <code>master:refs/for/master</code> is not expected here.</p>

<p>And then we try <code>git subtree push -P foo/bar repo_url_sub refs/for/master</code>. The push succeeds but the result is not expected. A branch <code>refs/for/master</code> instead of a review change is created. After several tries, we find it seems whatever the last ref is, it's always expanded to <code>refs/heads/...</code>. Even <code>refs/heads/master</code> is expanded to <code>refs/heads/refs/heads/master</code>.</p>

<p>The workarounds we've thought of so far:</p>

<ol>
<li><p>Use Google's REPO tool to manage the 2 repos as it's done for AOSP, which needs extra skills and is a bit of overkill.</p></li>
<li><p>Use <code>git submodule</code>, which is more troublesome.</p></li>
<li><p>Include a local transfer <code>sub</code> repo as the subtree in <code>main</code>. First <code>git subtree push</code> to update <code>master</code> in the transfer repo, and then in the transfer repo use <code>git push repo_url_sub HEAD:refs/for/master</code> to create review changes. But we can foresee the chaos when many maintainers are involved.</p></li>
</ol>

<p>Are there any git options or configs that can instruct <code>git subtree push</code> to correctly create review changes in Gerrit? Thanks for any ideas.</p>
",0,6330106,,
39838718,4934640,10/3/2016 19:07,2,840,<git><github><git-subtree><git-tag>,How to pull all my tags using the git subtree from another repository?,"<h3>How to pull all my tags using the git subtree from another repository?</h3>
<p>I just created a new repository and added another with git subtree using this command:</p>
<pre><code>git subtree add --prefix=Galileo https://github.com/username/Galileo master
</code></pre>
<p>But it comes without any of the tags on the repository <code>username/Galileo</code>. You may see it on <a href=""https://github.com/username/AlliedModdersFiles"" rel=""nofollow noreferrer"">https://github.com/username/AlliedModdersFiles</a>. How to get them?</p>
<p>There is this other answer <a href=""https://stackoverflow.com/questions/34411468/checkout-a-specific-tag-with-git-subtree"">checkout a specific tag with git subtree</a>, and I got this error:</p>
<pre><code>git subtree pull --prefix=Galileo https://github.com/username/Galileo tags/3.2.3
Working tree has modifications.  Cannot add.
</code></pre>
<p>My working tree is clean/there is modifications. Also, I need to handle the tag name conflicting as several subtrees will get tags with the same name as 1.0.0, 1.0.1, from the repository main_repo/SubtreeA, main_repo/SubtreeB, main_repo/SubtreeC, etc.</p>
<p>There is other question <a href=""https://stackoverflow.com/questions/2124044/git-subtree-tags"">Git subtree tags</a>, but I do not get what does mean:</p>
<pre><code>git merge -s ours --no-commit v0.1.2 # instead of: Bproject/master (2)
git read-tree --prefix=dir-B/ -u v0.1.2 # instead of: Bproject/master (3)
</code></pre>
<p>And how could I use it to fetch my tags. Somehow this is related to:</p>
<ol>
<li><a href=""https://stackoverflow.com/questions/34994409/git-subtree-fetch-unwanted-remote-tags"">git subtree fetch - unwanted remote tags</a></li>
<li><a href=""https://stackoverflow.com/questions/17911466/how-to-push-tags-with-git-subtree"">How to push tags with git subtree?</a></li>
</ol>
",0,4934640,,
20859806,353612,12/31/2013 15:54,1,103,<git><git-subtree>,Merging git repositories and preserving history,"<p>I've been using a symfony1 plugin repository in a project repository, using <a href=""https://raw.github.com/git/git/master/contrib/subtree/git-subtree.sh"" rel=""nofollow"">git-subtree</a>, but I can't always see my history.</p>

<p>Basically, the plugin project has a composer.json file 
I merged the plugin under the <code>plugins/MyPlugin</code> subtree.</p>

<p>When I do <code>git log</code>, I can see the history. However, when do <code>git log -p plugins/MyPlugin/composer.json</code> or <code>git log plugins/MyPlugin/composer.json</code>, I only see a merge commit. Why ?</p>

<p>But maybe subtree isn't really the right tool. What I want to do is forget completely about the plugin repository and pretend that its commits actually happened in the project repository, modifying files in the plugins/MyPlugin directory.</p>

<p><strong>EDIT</strong> Ok, I solved my problem by rewriting the plugin history with a <code>filter-branch</code>, and merging the result in the project repository. Still the first question remains. For science.</p>
",0,353612,0,0
20860607,433253,12/31/2013 16:51,1,177,<git><git-submodules><git-subtree>,Possible workflow with git submodules,"<p>I would like to use swagger (<a href=""https://github.com/wordnik/swagger-ui"" rel=""nofollow"">https://github.com/wordnik/swagger-ui</a>) as part of my project. Using swagger requires editing one file. Can I add a submodule and make edits to certain files, commits and push to my public repo instead of upstream?</p>

<p>I used to use subtrees for that but out of a sudden subtrees stopped to work (another issue, identical to <a href=""https://jira.atlassian.com/browse/SRCTREE-2000"" rel=""nofollow"">https://jira.atlassian.com/browse/SRCTREE-2000</a>)</p>
",0,433253,0,0
18802156,313115,9/14/2013 13:16,7,1562,<git><git-submodules><git-subtree>,Split a git repository to work on two projects at the same time,"<p>I am developing a <strong>framework</strong> to use on my projects; however, the developing of a framework can go so far without context: i.e. I need to start using it in real-life projects and see specifically what <strong>I need to add, fix, or adjust</strong> (maybe things that worked on a testing environment don't work for real-life situation, or some things don't make sense, or I want to add features).</p>

<p>First of all, since <strong>Framework</strong> is obviously a work in progress, I need to be sure that it is kept updated within <strong>Real-life project</strong> as a different part of it, so I can go back to Framework, edit it, commit, go back to Real-life project update Framework within, go on working with the project.</p>

<p>Second, I would actually like a way to achieve this without doing the project switching. What I mean is that I would like to be able to edit <strong>Framework</strong> within <strong>Real-life project</strong> and push those commits to the <strong>Framework</strong> repository.</p>

<p>Now, I know that the tools to achieve this are most likely <code>git submodule</code> and <code>git subtree</code>, but both of them are pretty confusing. Submodule, especially, seems it is more oriented towards a <em>read-only</em> approach (e.g. keep your libraries always updated): this would satisfy my first requirement, but not the second.</p>

<p>Any pointers on how to achieve this with Git and how the workflow would look like?</p>
",3,313115,0,0
18823942,807397,9/16/2013 8:52,5,2743,<git><github><translation><git-submodules><git-subtree>,Grant access to a single file on github,"<p>I'm just searching for a possibility to grant access to another developer to one single file in my git-repository. Is there any way except of submodules/subtrees? </p>

<p>It's just the localization-file which should be translated by an other person. </p>

<p>Looking forward for your responses!</p>

<p>Thanks!</p>

<p>Sebastian</p>
",0,807397,,
69379435,7609915,9/29/2021 15:35,1,103,<git><git-subtree>,Properly add a sub directory in a project using git subtree,"<p><strong>How to properly add a sub directory in a project using git subtree, make changes in it, and update back the main remote with the subtree?</strong></p>
<p>I have a main repository, that I'd like to add a third-party repository to it.</p>
<p>I've read that one way to do it is using git <a href=""https://www.atlassian.com/git/tutorials/git-subtree"" rel=""nofollow noreferrer"">sub-tree</a>, expecting it to be managed as a stand-alone repo that you may choose to update/ignore when ever needed - perfect for my use!</p>
<p><strong>What I've done so far:</strong></p>
<ol>
<li>I cloned the main repo locally.</li>
<li>I then wrote this command to add the remote folder locally to my main project <code>git subtree add --prefix &lt;my-dir-name&gt; &lt;remote-url&gt; &lt;#commit&gt; --squash </code></li>
</ol>
<p><strong>What I need help with:</strong></p>
<p>When I type <code>git status</code> the sub-directory I just created isn't tracked for some reason and it won't show me it was added and needs to be pushed. Is that normal? If yes, then how do I track it? I'd like to push it to the remote of the main project.</p>
<p><strong>What is this sub-directory used for:</strong></p>
<ol>
<li>It's a node project used to build a file using the project every once in a while, and update its files when needed by the version I choose to update to.</li>
<li>My co-workers to download the main repository with the sub-directory in it.</li>
</ol>
<p><strong>Extra Question:</strong></p>
<ol start=""3"">
<li>If I never want to push to the subdirectory original remote, but only to pull from it and update the code every once in a while, do I ever need to use the <code>git subtree split</code> command?</li>
</ol>
<p>I've read the <a href=""https://manpages.debian.org/testing/git-man/git-subtree.1.en.html"" rel=""nofollow noreferrer"">git subtree manual</a>, and 2 guides about the subject, plus watched a <a href=""https://www.youtube.com/watch?v=sC1sfoCo5qY"" rel=""nofollow noreferrer"">youtube video</a>, and still I rather asking to be safe than sorry.</p>
",0,7609915,,
48471530,9274805,1/27/2018 0:48,1,118,<git><git-subtree>,"git subtree split into new repo, meanwhile commits to old repo","<p>We are using two long scripts, which move a bunch of files in our repository using <code>git mv</code>. Files from <code>src</code> are moved into <code>src/dir1</code> and <code>src/src_public/dir2</code>,where <code>src/src_public/dir2</code> is a submodule.
One line in such script would for example look like this:</p>

<pre><code>git mv src/file1 src/dir1/; git subtree split -P dir1 -b branch_dir1
</code></pre>

<p>Then we pull the new order from the old repository into our new one with</p>

<pre><code>git pull /path/to/old/repo branch_dir1
</code></pre>

<p>Now a coworker pushed new commits to the old repository using the old directory structure. I want to migrate those commits the the new repository with the new structure.</p>

<p>That coworker changed files in <code>src</code> that are supposed to go in the submodule <code>dir2</code>. How do I merge these new commits into the submodule?  </p>
",4,9274805,0,0
9394832,1177813,2/22/2012 12:34,5,1575,<git><git-subtree>,Pushing subtrees in a git repo,"<p>I'm quite new to Git: I come from SVN and there I found really powerfull the :external feature. Here in Git I haven't find something similar:</p>

<ul>
<li><strong>submodules</strong> are perfect for adding project modules that are not always required. They must be initialized after the repo cloning and you can't include only a subdir of the original project.</li>
<li><strong>subtrees</strong> are really good for adding libraries (they also allow subdir inclusion), but pushing them is a real pain.</li>
</ul>

<p>So the scenario is this: I have a project, in which I want to include some libraries. I want the possibility to change all these libraries and pushing them in their own repos. Moreover some of this libraries are subdirs of bigger projects (for example if a project includes also demos or readme files, I won't include those dirs in my project).</p>

<p>How can I do that?</p>

<p>I've tried:</p>

<ul>
<li><a href=""http://progit.org/book/ch6-7.html"" rel=""nofollow"">http://progit.org/book/ch6-7.html</a> + <a href=""http://posterous.timocracy.com/git-sub-tree-merging-back-to-the-subtree-for"" rel=""nofollow"">http://posterous.timocracy.com/git-sub-tree-merging-back-to-the-subtree-for</a> (merging only a subdir isn't allowed, or I can't just see it);</li>
<li><a href=""http://www.tipstank.com/2011/02/21/git-subtree-notes-and-workflows/"" rel=""nofollow"">http://www.tipstank.com/2011/02/21/git-subtree-notes-and-workflows/</a> (same as above, do not handle subdir inclusion);</li>
<li><a href=""http://psionides.eu/2010/02/04/sharing-code-between-projects-with-git-subtree/"" rel=""nofollow"">http://psionides.eu/2010/02/04/sharing-code-between-projects-with-git-subtree/</a> (can't see nothing about pushing);</li>
<li><a href=""http://h2ik.co/2011/03/having-fun-with-git-subtree/"" rel=""nofollow"">http://h2ik.co/2011/03/having-fun-with-git-subtree/</a> (can't see nothing about pushing)</li>
</ul>

<p>Well, if you've reached this point, thanks for your patience, now I'd like something else to try, because right now my conclusion is: ""subtree pushing isn't allowed in Git"" ç_ç</p>
",5,1177813,0,0
45021755,633318,7/10/2017 21:19,1,66,<git><git-remote><git-subtree>,How to keep remote of git subtree in repository?,"<p>I have a repository where one directory is a subtree from somewhere else. I know I can add a remote in my local repository, but this gets lost when I push to another repository. </p>

<p>I would like to have knowledge of the subtree remote stored in the super repository. Is this possible?</p>
",0,633318,,
27255046,117188,12/2/2014 17:09,14,1446,<git><git-flow><git-subtree>,git subtree merged on root of repository (w. git-flow),"<p>We have a repository, git-flow based, where we added an external library as a subtree (using Atlassian SourceTree's git subtree) on the development branch.</p>

<pre><code>Project/
  Library/
    X/
    Y/
    Z/
</code></pre>

<p>Later we did a <code>git flow release</code>, merging the changes from develop into master (release).</p>

<p>The problem is when checking out master, the contents of Library get placed on the root of the repository instead of inside Library, like it had lost the <code>git subtree</code> prefix during the merge.</p>

<pre><code>Project/
  X/
  Y/
  Z/
</code></pre>

<p>Any idea what's gone wrong?</p>
",7,117188,0,0
27611995,272608,12/22/2014 23:27,4,2344,<git><git-subtree>,Removing invalid git-subtree-split hash,"<p>I'm having an issue with a subtree in our repository. I can pull just fine, but when trying to push it chugs along and finally shows me this:</p>

<pre><code>fatal: bad object 9775d8fba16f51e14cba873f78129d3d166f5888
</code></pre>

<p>I did some searching in my <code>.git</code> folder and found this:</p>

<pre><code>.git/subtree-cache/81555/549ffeaa00e89a145f24ccdb0735c07d8d84b2ff
1:9775d8fba16f51e14cba873f78129d3d166f5888
</code></pre>

<p>Commit <code>549ffeaa00e89a145f24ccdb0735c07d8d84b2ff</code> is an older commit where I did a pull of the subtree. The pull was a squash (as is the preference on the project) and had no issues at the time.</p>

<p>Looking at the commit itself I see this:</p>

<pre><code>git-subtree-split: 9775d8fba16f51e14cba873f78129d3d166f5888
</code></pre>

<p>Which is that bad object causing me issues. This is the only reference to this hash I can find. <code>git show 9775d8fba16f51e14cba873f78129d3d166f5888</code> reports bad object and searching the <code>.git</code> folder shows only the commit above. So it appears to me that this is the only place where the hash is recorded.</p>

<p>Is there any way to cull this reference out in some way to enable me to push again? I've tried cleaning the repo, re-cloning, deleting the subtree out of my repo and re-pulling it. Nothing seems to remove the reference so I'm guessing there's a deeper issue going on here.</p>
",0,272608,,
64338164,13123882,10/13/2020 15:21,3,2497,<git><git-subtree>,How to view history of git subtree?,"<p>I have two repos (let's call them oldrepo1 and oldrepo2).  These two repos have 20k and 21k commits respectively in their current history.  I'm merging them together in a new repo, each one under a subdir:</p>
<p>newrepo/oldrepo1</p>
<p>newrepo/oldrepo2</p>
<p>I've used these commands to populate the new repo</p>
<p><code>git subtree add --message=&quot;Migrate oldrepo1&quot; --prefix=oldrepo1 &lt;oldrepo1 url&gt; master</code></p>
<p><code>git subtree add --message=&quot;Migrate oldrepo2&quot; --prefix=oldrepo2 &lt;oldrepo2 url&gt; master</code></p>
<p>when I go into the root of newrepo, and run &quot;git --no-pager log --graph --oneline&quot; I get 41k commits, as expected, but if I drill down to any level underneath and run git log all I get is the &quot;Migrate oldrepoX&quot; commit:</p>
<p>For instance, I have a file that has had 60 changes in the original repo, but when I run git log on that same file in the new repo, all I get is:</p>
<pre><code>commit &lt;commitid&gt;
  Author: Me &lt;me@myselfandi.com&gt;
  Date:   Fri Sep 18 23:17:28 2020 -0700

      Migrate oldrepo1

      git-subtree-dir: oldrepo1
      git-subtree-mainline: &lt;somecommitid&gt;
      git-subtree-split: &lt;somecommitid&gt;
</code></pre>
<p>I didn't squash any history when I migrated, so why can't I see the 60 commits to this file in the new repo?</p>
",0,13123882,,
27947141,1326585,1/14/2015 15:56,2,365,<git-subtree><gitblit>,Create Gitblit proposal ticket using git subtree,"<p>I have a project <code>ProjectA</code> that uses shared library <code>LibB</code>. <code>LibB</code> is added to <code>ProjectA</code> using git subtree:</p>

<pre><code>git remote add rm_LibB  ssh://user@127.0.0.1:222/LibB.git
git subtree add --prefix=libs/LibB --squash rm_LibB/master
</code></pre>

<p>According to this <a href=""https://dev.gitblit.com/blob/gitblit.git/refs!tickets!01!1!6/src!site!tickets_using.mkd"" rel=""nofollow"">documentation</a> to create a proposal ticket you should do:</p>

<pre><code>git checkout -b mytopic
...add a single commit...
git push origin HEAD:refs/for/new
</code></pre>

<p>However in case of subtree I'm usually using:</p>

<pre><code>git subtree push --prefix=libs/LibB rm_LibB master
</code></pre>

<p>if I want to push changes made in <code>LibB</code>(being in <code>ProjectA</code>) to a master branch on remote LibB reposioty.</p>

<p>So far I've tried to</p>

<p><code>git subtree push --prefix=libs/LibB rm_LibB refs/for/new</code></p>

<p>which results in creating a new branch <code>refs/for/new</code> on remote LibB repository with no ticket created.</p>

<p>My current solution is to create proposal ticket from web interface and then</p>

<p><code>git subtree push --prefix=libs/LibB rm_LibB ticket/N</code> </p>

<p>where N is the ticket ID.</p>

<p>But I would like to be able to create proposal tickets automatically.</p>
",0,1326585,,
46907716,5085260,10/24/2017 10:07,2,2217,<git><git-submodules><git-subtree><git-subrepo>,Creating multiple git sub repos inside parent git repository,"<p>I want to create a parent git repo inside which there will be multiple git repos, but I do not want parent git repo to track all commits of sub repos. Commit history can be placed in individual sub repos. I just want that <strong>When I pull from parent repo, I want all sub repos to be pulled and when I push parent repo, all subrepos committed changes should be pushed to their respective repos in server. Also it should be able to push and pull individual git repos when we make some changes to any of subrepos and next time pull of parent repo should give the updated repos</strong>.</p>

<p>I am trying to use submodules/subtree but couldnot achieve it. I have heard of <strong>git subrepo</strong> but have not been able to find good tutorial on it</p>
",0,5085260,0,0
46270420,1223975,9/18/2017 1:33,1,24,<git><git-submodules><git-subtree>,Publish git subtree to subfolder of different git repo,"<p>I have a project <code>suman-types</code></p>

<p>I want to publish a git subtree of the <code>suman-types</code> Git repo to <code>DefinitelyTyped/types/suman</code>.</p>

<p>Normally with a Git subtree, you publish a subtree of a Git project as the root of another Git project. But in this case I am wondering if I can publish a git subtree of a project (suman-types) to a subfolder of existing Git repo (my fork of DefinitelyTyped here: </p>

<p><a href=""https://github.com/ORESoftware-team/DefinitelyTyped"" rel=""nofollow noreferrer"">https://github.com/ORESoftware-team/DefinitelyTyped</a></p>

<p>so what I want to do is something like this:</p>

<pre><code>cd suman-types &amp;&amp; 
git subtree push --prefix types my-remote master/types
</code></pre>

<p>where master/types is a subdirectory in the master branch. I don't think this is the right syntax, but hopefully you get the idea.</p>

<p><em>Perhaps I need to use git submodules instead of git subtree.</em></p>
",0,1223975,0,0
10003692,56786,4/4/2012 1:15,1,375,<git><git-subtree>,I git-subtree add'ed to the same prefix multiple times from unrelated repos and now I can't subtree push,"<p>I'm using git-subtree (https://github.com/apenwarr/git-subtree) to manage vendor repos in my project.</p>

<p>A while back I reworked the layout of my project and part of that involved deleting some vendor code and readding it using git-subtree from a new copy of the vendor repo.  The new copy of the vendor repo was the same code, but because I recreated it from scratch there were no common commits.</p>

<p>Here are the relevant commits (read from bottom to top):</p>

<pre><code>commit df47ba0d6437737473aba206fdc9f2b902fbb073
Merge: 4bc6a27 80b6bb7
Author: User &lt;user@user.com&gt;
Date:   Fri Dec 2 01:48:30 2011 -0500

    Merge commit '80b6bb7ae01fdda2fe7e0c545004136724cbf059' as 'External/Libraries/stlsoft'

commit 80b6bb7ae01fdda2fe7e0c545004136724cbf059
Author: User &lt;user@user.com&gt;
Date:   Fri Dec 2 01:48:30 2011 -0500

    Squashed 'External/Libraries/stlsoft/' content from commit 03149e3

    git-subtree-dir: External/Libraries/stlsoft
    git-subtree-split: 03149e3a4c3289b5a88fc3f7ae17fb11c44c4d68

# Repo containing 6324cb1724fcdf87294b2e4f438dedf5920a3156 is deleted, External/Libraries/stlsoft 
# is deleted and re-'git subtree add'ed from a new repo in the commits above.

commit e235b6c46d10b83c56d5c9f70d2b00df1137fbb3
Merge: 98ee319 79b7a31
Author: User &lt;user@user.com&gt;
Date:   Mon Apr 11 16:09:54 2011 -0400

    Merge commit '79b7a31fe4bc2d5beaca64cd6be0be4d0c971e4a' as 'External/Libraries/stlsoft'

commit 79b7a31fe4bc2d5beaca64cd6be0be4d0c971e4a
Author: User &lt;user@user.com&gt;
Date:   Mon Apr 11 16:09:54 2011 -0400

    Squashed 'External/Libraries/stlsoft/' content from commit 6324cb1

    git-subtree-dir: External/Libraries/stlsoft
    git-subtree-split: 6324cb1724fcdf87294b2e4f438dedf5920a3156
</code></pre>

<p>Now if I try to 'git subtree push' back to the vendor repo (the ""new"" one containing 03149e3a4c3289b5a88fc3f7ae17fb11c44c4d68), I get the following error:</p>

<pre><code>$ git subtree push -P ""External/Libraries/stlsoft/"" /f/vendor/stlsoft mod2
git push using:  f:/vendor/stlsoft mod2
fatal: bad object 6324cb1724fcdf87294b2e4f438dedf5920a3156
Couldn't push, 'git subtree split' failed.
</code></pre>

<p>because the git-subtree-dir matches my given prefix, but there is no longer any commit 6324cb1724fcdf87294b2e4f438dedf5920a3156 and I can't fetch it in because that repo no longer exists.</p>

<p>Any recommendations for how I can fix this?  I can see two options right now:
1. Re-add under a new directory (I don't really want to do this on principle).
2. Manually erase the subtree data in the previous commit that's causing breakages (not recommend to do this in general, but I think I can get away with it in this case since there aren't a whole lot of other copies of this repo).</p>
",0,56786,,
46288232,81504,9/18/2017 21:07,0,104,<git><git-subtree>,update a subfolder that was introduced via git subtree. apply patch isn't working,"<p>I want to get 5 more changesets from the remote that I subtree'd into a subfolder and &quot;git apply patch&quot; isn't working, possibly because git apply treats the subtreed folder as a submodule? I got the patches via &quot;git-format-patch&quot;.</p>
<p>I'm working on Windows, so I don't have access to the Linux &quot;patch&quot; command. I could spin up a VM and try this on Linux, I could also start googling for &quot;git subtree cherry-pick&quot; (if that's a thing) but I'd sooner get apply working. Any clues? Does it just not work?</p>
",0,81504,,
65232147,12146796,12/10/2020 9:50,0,281,<git><git-subtree><gitlab-ce>,git pull all prefix in subtrees,"<p>I want to do a <code>git pull subtree --prefix local/path http://mygitlab.domain/user/repo.git master --squash</code>. but I have multiple subtrees, I want to update all subtrees at once, but I can't find a reference to do that.</p>
<p>the way I do it now, update one by one subtrees then I push it to the main repository, but that method is less effective. I've also created an automatic script but I don't think it's reliable, because if I deploy on a different machine I have to adjust the script.</p>
",4,12146796,,
28751575,770127,2/26/2015 19:56,10,9609,<git><git-subtree><subtree>,How to remove git subtree reference,"<p>I added a subtree via </p>

<pre><code>git subtree add --prefix=path/to/example --squash git@github.com:johndoe/example.git master
</code></pre>

<p>and want to remove it. <a href=""https://github.com/git/git/blob/master/contrib/subtree/git-subtree.txt"" rel=""noreferrer"">There's no <code>git subtree rm</code> command.</a> I already deleted all files in <code>path/to/example</code> but <code>path/to/example</code> still appears when I <a href=""https://stackoverflow.com/a/27298572/770127"">list subtrees</a> via</p>

<pre><code>git log | grep git-subtree-dir | awk '{ print $2 }'
</code></pre>

<p>How can I remove the subtree <em>reference</em> from git such that it can no longer be pushed/pulled/etc.?</p>
",0,770127,0,0
10918244,91365,6/6/2012 16:26,18,6226,<git><git-subtree>,git-subtree without squash: view log,"<p>I merged a tree onto a my repository by using git subtree add without the squash option.  A git log shows that the commits were successfully added to the repository.   However, if I do a <code>git log --follow filename</code>, the history stops at the merge and does not show previous commits.   I tried using <code>-M</code> instead of <code>--follow</code> and that doesn't work either.   How can I get a log of the commits for a specific file or files from before the merge?</p>
",0,91365,0,0
29209471,279712,3/23/2015 11:49,3,140,<git><git-submodules><gitignore><subdirectory><git-subtree>,Completely independent Git project within another project using only gitignore,"<p>Is it possible to work with two <strong>independent</strong> git projects, one within another in the directory tree and separate them using only gitignore (<em>without <a href=""https://stackoverflow.com/questions/1811730/how-do-i-work-with-a-git-repository-within-another-repository"">submodules</a> or <a href=""https://stackoverflow.com/questions/720669/projects-within-projects-using-git"">subtrees</a></em>)?</p>

<p>Here is the folder structure:</p>

<pre><code>repo_a     &lt;-- repository A folder
   /.git
   /folder_1
   /folder_2
   /repo_b    &lt;-- repository B folder (to be ignored by repository A)
       /.git
       /folder_3
       /folder_4
</code></pre>
",2,279712,,
29965058,267073,4/30/2015 10:16,7,1103,<git><git-submodules><git-subtree>,How to integrate build output from one git repo into another,"<p>I am working on a 2 projects which are stored in 2 git repos Project1 and Project2</p>

<p>Project1 is a javascript project. It has its own repo (for example <a href=""https://github.com/gandra/project1.git"">https://github.com/gandra/project1.git</a>)<br>
Project2 is a java maven project. It has its own repo (for example  <a href=""https://github.com/gandra/project2.git"">https://github.com/gandra/project2.git</a>)</p>

<p>Here is a current workflow which I want to improve:</p>

<ol>
<li>Commit changes in a Project1 and push it to origin</li>
<li>Run grunt in a Project1. This generates Project1/build directory</li>
<li>Manually copy Project1/build contents into Project2/libs/project1-lib directory</li>
<li>Commit changes(Project2/libs/project1-lib) in Project2</li>
<li>Runk jenkins build and deploy</li>
</ol>

<p>I want to somehow to avoid step 3 (manual copy of Project1/build contents into Project2/libs/project1-lib directory)
I thought about integrate Project1 into Project2 as a subtree but the problem with this approach is beacuse it gets all Project1 directory structure into Project2/libs/project1-lib and I want only to take subdirectory of a Project1 (Project1/build/*)</p>

<p>Some important note:
Project1 changes occurs only in its own repo(<a href=""https://github.com/gandra/project1.git"">https://github.com/gandra/project1.git</a>) and this change should be propagated to Project2. So there is no update of Project1 from Project2/libs/project1-lib
In other words:<br>
- Commits in Project1 affect Project2<br>
- commits in Project2 not affects Project1</p>
",2,267073,0,0
12349931,6236,9/10/2012 10:37,1,459,<git><history><git-submodules><git-subtree>,What came first: git subtree merge strategy or git submodule?,"<p>What is more recent invention — git subtree merge strategy (not the new git-subtree command) or git submodule command (or maybe underlying mechanism if there was a separate one symmetrical to git subtree command vs. merge strategy).</p>

<p>What was included in Git distribution release first? </p>

<p>Bonus points for links to relevant Git ML posts.</p>

<p>I tried do dig that info from Git commit history, but got lost somewhere in 2007-2008 for both features.</p>
",0,6236,0,0
66476635,316408,3/4/2021 14:04,0,29,<git><git-subtree>,Subtree repository and main repository both inlcude same file. Is that normal git behaviour?,"<p>When using git subtree, is it normal that the files reside in both the subtree repo and the main repo?</p>
<ul>
<li><p>First, I added a remote <code>git remote add -f somename https://tmee@bitbucket.org/ssatr/somename.git</code></p>
</li>
<li><p>added a new file @ /somename/test.txt and then did a <code>git add . &amp;&amp; git commit &quot;added test file&quot;</code></p>
</li>
<li><p>Then I pushed to the subtree <code>git subtree push --prefix somename somename master</code>  (this adds the file in the subtree repo)</p>
</li>
<li><p>However when I later did a <code>git push</code> on the main repo, the added
file also shows up on the main repo.</p>
</li>
</ul>
<p>Is this normal behaviour?</p>
",3,316408,,
16402326,1870481,5/6/2013 15:45,5,3717,<git><git-subtree>,Moving a git subtree into different repository,"<p>I try to move a directory and all its history from repository to another repository.</p>

<p>Extracting the complete history of the directory is easy with <code>git subtree split</code>.</p>

<p>This creates a new branch, which can easily be fetched to the other repository.</p>

<p>Now I used <code>git subtree add</code> to paste the directory back into the second repository.</p>

<p>If I look at <code>gitk</code> or <code>git log --decorate --graph</code> everything looks fine. All commits are present as expected. Also all the files are present as expected.</p>

<p>But when I try to see the history of a transplanted file using <code>git log -- transplanted_dir/somefile</code>, I only see the one ""merge"" commit, resulting from the <code>git subtree add</code>.</p>

<p>Why do I see the commits in gitk above, but not in the log of a single file?</p>

<p>If I do a simple <code>git merge</code>, I can see the history of each file, but the files will, of course not live in a subfolder.</p>

<p>What is the right way to integrate the moved commits into the other repository?</p>

<p>Detailed example commands to reproduce situation:</p>

<pre><code>#create two repositories:
git init a
git init b

# create directory dir with some history
cd a
mkdir dir
echo 1 &gt; dir/file
git add .
git commit -am 1
echo 2 &gt; dir/file
git commit -am 2
echo 3 &gt; dir/file
echo 3 &gt; otherfile
git add .
git commit -am 3

#split subtree
git subtree split --prefix dir -b split

#create a commit on repo b
cd ../b
mkdir otherdir
touch otherdir/file
git add .
git commit -am init

#fetch split branch of repo a
git fetch ../a split
git co -b split FETCH_HEAD
git log --decorate --graph --name-status 
git co master

# add commits to repo b
git subtree add --prefix somedir split

# this looks fine:
git log --decorate --graph --name-status

# no history here - Why?
git log --decorate --graph --name-status somedir/file
git log --decorate --graph --name-status --follow somedir/file
</code></pre>
",4,1870481,0,0
47923889,453785,12/21/2017 11:23,4,2451,<git><git-subtree>,How do I share common files in between repositories in git?,"<p>I have 2 components (A &amp; B) in my project which have their own GIT repositories. These components A &amp; B share a interface (just a single header file interface.h ,lets say). In SVN it is pretty straightforward to share this interface file between 2 repositories without duplicating, by using SVN external properties. How do I achieve the same in GIT. I want to be able to update the interface file from both the repositories in a seamless manner.</p>

<p>I have read about git subtrees, which would involve creating third repo just for one interface file. Such approach is overkill for my scenario. Can anyone suggest easiest solution similar to SVN::external for git ?</p>
",2,453785,,
40266785,3789362,10/26/2016 15:51,10,8305,<git><git-subtree>,How can I add a specific folder when using git subtree?,"<p>I have a complicated Ionic project I'm developing. Many of the components and providers I'm developing are generic and can be used in other projects my company is doing. This is common in software development. This is the Git workflow I have come up with (this graph shows branches):</p>

<pre><code>my-company-library-repo ----
                            |_ component 1 feature branch
                               |_ company component 1 feature branch testbed
                            |_ component 2 feature branch
</code></pre>

<p>The final component code (just a <code>.ts</code> or <code>.js</code> file) developed in the testbed is pushed to component feature branch. The testbed code stays in the testbed branch. Also in the feature branch goes any docs that might accompany the component.</p>

<p>Now in the application repo I add the feature branch as a subtree using this command:</p>

<pre><code>git subtree add -P &lt;destination-dir/feature&gt; --squash &lt;my-company-library-repo-url&gt; &lt;feature-branch-name&gt;
</code></pre>

<p>And that gave me the following (this graph shows folder structure):</p>

<pre><code>my-app-repo-------
                  |_ company-library-feature-subtree
</code></pre>

<p>This should only contain the <code>.js</code> or <code>.ts</code> and it's docs in it's subfolder. I get this only to work part way. When it pulls the subtree, it does only pull the component and it's doc files, but the files get pulled into a very long list of sub-directories like this:</p>

<pre><code>my-app-repo/src/feature-branch/feature/src/app/providers/...
</code></pre>

<p>This makes it hard to use the library because the files are put so many directories (unused directories) deep.</p>

<p>So, when I push my 2 files from the feature-testbed branch to the feature branch, how can I not pull that whole directory structure with them?</p>
",3,3789362,0,0
21262259,1654794,1/21/2014 15:25,0,108,<git><git-subtree>,Using git subtree for asset swapping,"<p>I'm working on an Android project which has several skins/graphics packs.
I have created several folders of assets which are named identically, but are different graphics (for different brands).</p>

<p>Initially I thought that I could create a main project which includes all source code, and then just create a subtree for each brand, containing the different assets. I have had issues though, adding the subtree to the original project.</p>

<p>How should I setup a working git main project and different assets subtrees?</p>
",2,1654794,,
21676570,2409752,2/10/2014 11:56,0,231,<git><git-submodules><git-remote><git-subtree>,How to use a git sub repository pushing to a private remote but pulling also from its original origin,"<p>I need to setup a repository like this:</p>

<ul>
<li><em>rep</em> (pull &amp; push from/to <em>private remote</em>)
<ul>
<li>normal stuff</li>
<li><em>sub-rep</em> (pull from <em>private remote</em> &amp; <em>public remote</em> and push to <em>private remote</em>)
<ul>
<li>stuff in <em>sub-rep</em></li>
<li><em>sub-module</em> (pull from <em>private remote</em> &amp; <em>public remote</em> and push to <em>private remote</em>) 
<ul>
<li>stuff in <em>sub-module</em></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p><em>rep</em> is the repository I'd like to set up</p>

<p><em>private remote</em> is my own remote repository.</p>

<p><em>sub-rep</em> is the inclusion (<code>submodule</code> or <code>subtree</code>) of another repository fetched from <em>public remote</em> as a sub folder in <em>rep</em>. As I read that there are two ways of including another repository I simply write ''sub repository'' instead of <code>submodule</code> or <code>subtree</code>.</p>

<p><em>sub-module</em> is a <code>submodule</code> inside <em>sub-rep</em></p>

<p>The requirement is that all commits I make in <em>rep</em>, <em>sub-rep</em> and <em>sub-module</em> can be pushed to my <em>private remote</em>, so that I can continue my work from somewhere else. But I still want to be able to receive updates from the <em>public remote</em>. And at this point, no commit I make should be pushed to the <em>public remote</em>.</p>

<p>The key should be to use multiple remotes, but I'm not sure how to handle the repository inside repository (inside repository...) thing right. As the setup will be relatively complex (I think) an additional workflow example would be very helpful.</p>
",5,2409752,,
28705190,770127,2/24/2015 20:02,1,131,<git><git-subtree>,Multiple git subtree of same repo,"<p>In a repo called <code>apps</code> I'm stuck with using a folder structure like</p>

<pre><code>/apps
 - /app1
   - /shared
 - /app2
   - /shared
 - /app3
   - /shared
</code></pre>

<p>where <code>shared</code> is a separate repo. How do I use git subtree such that changes to any <code>app1/shared</code>, <code>app2/shared</code>, <code>app3/shared</code> take effect in each other and can be pushed back to the <code>shared</code> repo?</p>
",3,770127,,
47332819,1507546,11/16/2017 14:58,3,576,<git><gitlab><git-subtree>,subtree merge requests with [git subtree],"<p>We have six projects which use some common <strong>subprojects</strong> that was handled by <a href=""/questions/tagged/submodule"" class=""post-tag"" title=""show questions tagged &#39;submodule&#39;"" rel=""tag"">submodule</a>, and now we have chosen to use <a href=""/questions/tagged/git-subtree"" class=""post-tag"" title=""show questions tagged &#39;git-subtree&#39;"" rel=""tag"">git-subtree</a>.</p>

<p>These <strong>subprojects</strong> are not standalone and each on has one branch,  <strong>master</strong>.</p>

<p>For instance, here is what <strong>projectA</strong> &amp; <strong>projectB</strong> projects look like:</p>

<pre><code>projectA:
  |_.git/
  |_src/
  |_app/
  |_plugins
        |__subproject1
        |__subproject3
        |__subproject12

projectB:
  |_.git/
  |_src/
  |_app/
  |_plugins
        |__subproject3
        |__subproject8
</code></pre>

<p>We can see here that <strong>subproject3</strong> is common between <strong>projectA</strong> and <strong>projectB</strong>.</p>

<blockquote>
  <p>Usecase1</p>
</blockquote>

<p><strong>projectA</strong> has made evolve <strong>subproject3</strong> from <strong>v1.3.0</strong> to <strong>v1.4.0</strong>.</p>

<p><strong>subproject3</strong> is still on <strong>v1.3.0</strong> in the project <strong>projectB</strong> and should remain like that for a while. </p>

<p>However, a bug has been discovered in the <strong>v1.3.0</strong> inside <strong>projectB</strong>. So <strong>projectB</strong> should be fixed without retrieving <strong>v1.4.0</strong> of <strong>subproject</strong>. In the same time, <strong>v1.4.0</strong> should get the same fix as <strong>v1.3.0</strong>.</p>

<blockquote>
  <p>With <a href=""/questions/tagged/submodule"" class=""post-tag"" title=""show questions tagged &#39;submodule&#39;"" rel=""tag"">submodule</a></p>
</blockquote>

<p>We used to :</p>

<ol>
<li>create new branch <strong>hotfix/bla</strong> in <strong>subproject3</strong></li>
<li>fix the bug</li>
<li>create a tag <strong>v1.3.1</strong> based on the fix commit</li>
<li>merge the hotfix into master</li>
<li>create the tag <strong>v1.4.1</strong></li>
<li>switch to <strong>v1.3.1</strong></li>
<li>commit the new <strong>subproject3</strong> version in <strong>projectB</strong></li>
<li>After that, we set the version of <strong>subproject3</strong> to <strong>v1.4.1</strong> in the project <strong>projectA</strong>.</li>
</ol>

<p>Here is what <code>git log --decorate --all --graph</code> in <strong>subproject3</strong> (inside <strong>projectB</strong>) gives.</p>

<pre><code>*   f923c0d (tag: v1.4.1, origin/master, origin/HEAD, master) Merge branch 'hotfix'
|\
| * cb8213d (HEAD, tag: v1.3.1, origin/hotfix, hotfix) fix #4.1
* | bfb3008 (tag: v1.4.0) [plug1] #8
* | 25ccbbd [plug1] #7
* | ff22c34 #6
* | cb9f3ab #5
|/
* 1e750fe (tag: v1.3.0) #4
</code></pre>

<blockquote>
  <p>With <a href=""/questions/tagged/git-subtree"" class=""post-tag"" title=""show questions tagged &#39;git-subtree&#39;"" rel=""tag"">git-subtree</a></p>
</blockquote>

<p><strong>projectB</strong> has <strong>subproject3</strong> set to <strong>master^^^^</strong>, while <strong>projectA</strong> has <strong>subproject3</strong> set to <strong>master</strong>. (no need for tags on plugins with <a href=""/questions/tagged/git-subtree"" class=""post-tag"" title=""show questions tagged &#39;git-subtree&#39;"" rel=""tag"">git-subtree</a>)</p>

<p>So, we:</p>

<ol>
<li>Fix the bug inside <strong>projectB</strong></li>
<li>create a <a href=""/questions/tagged/git"" class=""post-tag"" title=""show questions tagged &#39;git&#39;"" rel=""tag"">git</a> commit for <strong>projectB</strong></li>
<li>push to master fails which is normal, so we push to a new branch <strong>hotfix</strong></li>
<li>create a merge request on <a href=""/questions/tagged/gitlab"" class=""post-tag"" title=""show questions tagged &#39;gitlab&#39;"" rel=""tag"">gitlab</a> ( <strong>hotfix -> master</strong>) and accept it manually :(</li>
<li>Now master is safe again</li>
</ol>

<p>This surely works, but what annoys us is that we can't avoid processing <em>step 4</em> manually. AFAIK, there is no way to automate it in <a href=""/questions/tagged/git-subtree"" class=""post-tag"" title=""show questions tagged &#39;git-subtree&#39;"" rel=""tag"">git-subtree</a>.</p>

<p>So to summarize, we're very happy with <a href=""/questions/tagged/git-subtree"" class=""post-tag"" title=""show questions tagged &#39;git-subtree&#39;"" rel=""tag"">git-subtree</a> because it allows us to (almost) not take care of the plugins in terms of git commits etc, as we automated <code>git subtree push</code> through <a href=""/questions/tagged/git-hooks"" class=""post-tag"" title=""show questions tagged &#39;git-hooks&#39;"" rel=""tag"">git-hooks</a>.</p>

<p>However, the manual <strong>step 4</strong> is left and we can't automate it so far. Sometimes, some of our developers forget to create merge requests, so <strong>master</strong> remains vulnerable.</p>

<p>Is there a way to automate <strong>step 4</strong> (through <a href=""/questions/tagged/git-subtree"" class=""post-tag"" title=""show questions tagged &#39;git-subtree&#39;"" rel=""tag"">git-subtree</a> ideally)? What're our options?</p>
",0,1507546,0,0
11741249,220474,7/31/2012 13:29,14,5913,<git><git-merge><git-subtree>,What is the difference between git subtree merge and git-subtree,"<p>I've just found git-subtree tool that some time ago became a part of main git repo
<a href=""https://github.com/apenwarr/git-subtree/"" rel=""noreferrer"">https://github.com/apenwarr/git-subtree/</a></p>

<p>However I don't fully understand what functionality does this tool provide over the already existing ""git read-tree"" + ""git merge -s subtree"". Is the only purpouse of git-subtree - making the resultant commit history look better or does it have more functionality that I've overlooked?</p>
",0,220474,0,0
11741681,220474,7/31/2012 13:49,2,509,<git><git-merge><git-subtree>,How to tell git to ignore certain folders and files during a subtree merge?,"<p>I have master branch with the following directory structure</p>

<pre><code>templates/something.lib
templates/libs/1.lib
</code></pre>

<p>And I also have a templates_master branch with the following files (right in the root)</p>

<pre><code>a.html
b.html
</code></pre>

<p>Then I go to master and load the templates into master templates folder</p>

<pre><code>git read-tree --prefix=templates/ -u templates_master
</code></pre>

<p>which results into this master structure now</p>

<pre><code>templates/something.lib
templates/libs/1.lib
templates/a.html
templates/b.html
</code></pre>

<p>Then I stay on master and introduce some changes into templates/a.html making several commits. Now I want this modified templates/a.html to go back into its original branch. I switch to templates_master branch and run this command</p>

<pre><code>git merge -s subtree master
</code></pre>

<p>However this command not only copies the master:templates/a.html to templates_master:a.html but also copies those libs files so basically now my templates_master branch has everything that the original master templates/ had. Is it possible to tell git to keep certain files and folders in the master branch only or is this logic hardcoded on the git level, i.e. during subdirectory merge it uses treeish pointing to templates/ and everything inside templates/ is and can only be the child of templates/ ?</p>
",1,220474,,
29530893,99379,4/9/2015 6:01,2,170,<git><git-push><git-subtree>,git parent tree accidentally pushed into subtree,"<p>I split one repository into 3, a tracking repository with git subtree, and two repositories I was splitting into modules. Somehow I managed to push the version with the subtrees on to one of the children repositories, which messed up the structure. </p>

<p>Here they are for reference:</p>

<ul>
<li><p><a href=""https://github.com/ahundt/grl"" rel=""nofollow"">child1</a>, which is now messed up</p></li>
<li><p><a href=""https://github.com/ahundt/robone"" rel=""nofollow"">child2</a>, this seems ok</p></li>
<li><p><a href=""https://github.com/ahundt/robonetracker"" rel=""nofollow"">parent</a>, this should hold the other two</p></li>
</ul>

<p>How can I restore the repositories?</p>
",3,99379,,
11991088,1243323,8/16/2012 15:55,8,1506,<git><configuration><git-flow><git-subtree><multiple-repositories>,Using git flow with git subtree,"<p>I just migrated a large svn repo to git and started using gitflow. It worked like a charm but now I'm thinking about splitting that big repo into a number of smaller ones. </p>

<p>Let's supposse the repo directory tree is as follows:</p>

<pre><code>/repo
  - libs
  - apps
    -- app 1
    -- app 2
</code></pre>

<p>And we want to split it into three repos, one with the core structure (libs and apps directories) and the other two with the apps directories.</p>

<p>If I use git subtree to split like that will I be able to use git flow individually in each part or I'll have to use it globally?</p>

<p>PS: This is my first question in stackoverflow, please be kind :)</p>
",0,1243323,,
29663986,1505939,4/16/2015 1:48,0,410,<git><git-subtree>,How to convert monolithic project to use git subtree,"<p>I have an existing project that uses a single repository. The directory structure looks like:</p>

<pre><code>* MyProject
  * client
  * server
  * tester
  * documentation
  * deployment
  * graphics
</code></pre>

<p>I would like to modify it so that <code>client</code>, <code>server</code>, and <code>tester</code> are individual repositories; and <code>MyProject</code> still exists with the other subdirectories in it, and it hosts <code>client</code> etc. via <code>git subtree</code>.</p>

<p>So the end result will be that I have the same directory structure, but I can perform version control on <code>client</code> etc. individually without disturbing the rest of the repo.</p>

<p>What commands should I use to achieve this? I have access to log into the remote repo's server and issue <code>git</code> commands directly on the repo.</p>

<hr>

<p>Bonus extra: Currently I have got all of the commits for <code>client</code> together in the history of <code>MyProject</code>; if possible I would like to keep this history for the new subtree project.</p>
",0,1505939,,
12590839,1009825,9/25/2012 20:50,11,6704,<git><git-subtree>,Make existing folder a git subtree,"<p>Following my question <a href=""https://stackoverflow.com/questions/12590546/git-subtree-export-and-re-import-woes"">Git subtree export and re-import woes</a> I wanted to ask how I would convert a folder to a subtree.</p>

<p>Imagine I have a repository A where I have code that should now be shared with another project (and possibly more), so I put all shared code in folder ""sub"". This folder now should be extracted (without history if possible) to bare repository C. Afterwards ""sub"" should become a subtree from C, however without losing the history in A (very important). I also want to be able to make changes in ""sub"" and push these back to C.</p>
",0,1009825,0,0
12634373,1705267,9/28/2012 5:58,1,170,<git><git-tag><git-subtree>,git subtree tag browsing,"<p>I have a project that uses two library that are maintained seperately.  To avoid the mess of manually copying files over every time the library changes, I managed to create two subtree using <a href=""https://help.github.com/articles/working-with-subtree-merge"" rel=""nofollow"">this example from github</a>.</p>

<p>I have my own code in the root of this working directory.  I also have <code>foolib/</code> and <code>barlib/</code> as subtrees from two other repos.  Suppose I want to see if I can use version 1.20 of foolib instead of the master because I know that one's good and won't change.  Then maybe I want to see if 1.21 is any better.  My thinking is that if I do <code>git checkout foolib-1.20</code> will put version 1.20 code in <code>foolib/</code> for me.  That doesn't happen.  Instead the whole working directory is replaced with foolib 1.20.  This is not very helpful and seems to negate the usefulness of <code>git subtree</code>.</p>
",0,1705267,,
18868769,1871238,9/18/2013 9:38,6,1751,<git><heroku><git-subtree>,Deploy git subdirectory on heroku,"<p>I have to deploy a git subdirectory from a non master branch. I have looked at <a href=""https://stackoverflow.com/questions/7539382/how-can-i-deploy-from-a-git-subdirectory"">this answer</a> and to <a href=""https://devcenter.heroku.com/articles/multiple-environments#advanced-linking-local-branches-to-remote-apps"" rel=""nofollow noreferrer"">the docs on Heroku</a>, but when I issue</p>

<pre><code>git subtree push --prefix visualizations heroku develop:master
</code></pre>

<p>I get the following error</p>

<pre><code>error: src refspec d02911f4e410256fae0760f87f186289436ff98b:refs/heads/develop does not match any
</code></pre>

<p>And I really don't know how to proceed.</p>
",2,1871238,0,0
18906928,511184,9/20/2013 0:06,14,3356,<git><github><git-merge><git-subtree>,How to include part of another git repository using git subtree and merge updates in both directions,"<p>I have two git repositories show below. The first is structured like a typical python project.</p>

<pre><code>foo_repo/
    .git/
    setup.py
    foo/
         __init__.py
         some_code.py
    tests/

bar/
    .git/
</code></pre>

<p>I would like to include the <code>foo_repo/foo/</code> directory in <code>bar/</code> as a subtree and I want to be able to merge updates to <code>foo_repo/foo/some_code.py</code> both from the foo_repo repository to bar and vice versa.</p>

<p>The initial setup isn't too bad.  From the <code>foo/</code> directory I use:</p>

<pre><code>git subtree --prefix=foo/ split -b export
</code></pre>

<p>Then I have a new branch in foo_repo with only the contents of the <code>foo_repo/foo/</code> directory.  To bring this into bar, I just go to the <code>bar/</code> directory and:</p>

<pre><code>git subtree --prefix=foo/ add ../foo_repo/.git export
</code></pre>

<p>Now that I'm all set up, I'd like to do some code development and keep <code>foo/</code> up to date in both repos.  Pushing from bar I think I have figured out.  From <code>bar/</code> directory:</p>

<pre><code>touch foo/more_code.py
git add foo/more_code.py
git commit -m ""more code""
git subtree --prefix=foo/ push ../foo_repo/.git export
</code></pre>

<p>Then from the <code>foo_repo/</code> directory:</p>

<pre><code>git checkout master
git subtree --prefix=foo/ merge export
</code></pre>

<p>Merging the other way is where I'm stuck.  From <code>foo_repo/</code>:</p>

<pre><code>git checkout master
touch foo/yet_more_code.py
git add foo/yet_more_code.py
git commit -m ""yet more code""
???
</code></pre>

<p>Where the <code>???</code> is a command that merges the <code>foo/</code> directory with the <code>export</code> branch. Then from <code>bar/</code>:</p>

<pre><code>git subtree --prefix=foo/ pull ../foo_repo/.git export
</code></pre>

<p>So I'm basically looking for the line that goes in the <code>???</code> spot, or a different workflow that does the same thing.  I've tried repeating <code>git subtree --prefix=foo/ split -b export_foo</code> by that doesn't work.</p>
",0,511184,0,0
21702996,2836370,2/11/2014 13:19,7,2860,<git><git-subtree>,git subtree add: change prefix preserving local commits,"<p>is there an easy way to move a subtree added using the following cmd</p>

<pre><code>git subtree add --prefix=&lt;prefix&gt; &lt;repository&gt; &lt;commit&gt;
</code></pre>

<p>in other terms, is it possible to change prefix from <code>dir1</code> to <code>dir2</code>.</p>

<p>the answer to <a href=""https://stackoverflow.com/questions/18536279/git-subtree-possible-to-change-subtree-branch-path-in-a-forked-repository"">git subtree: possible to change subtree branch/path in a forked repository?</a> suggests to remove the subtree then add it back. </p>

<p>It doesn't work for me because I need to preserve local commits, is there another way?</p>
",1,2836370,0,0
40796289,1423254,11/25/2016 0:54,1,95,<git><repository><git-submodules><git-subtree>,How to automatically download the same 8 repos for every from another 4 repos in a git?,"<p>We have 4 repos with executables and when I clone any 1 of them, I want to also clone all of the 8 repos with libraries to the folders next to the executable folder. The executables are something like services, all 4 of them will use the latest versions from main repositories of the libraries. I also want to clone all of the 8 library repos when I clone any 1 of them. </p>

<pre>So I can for example 
clone executable1 and have folders: 
executable1-library1-..-library8
or clone library1 and have folders: 
library1-..-library8
or end up cloning all of the executables and have folders: 
executable1-..-executable4-library1-..-library8. </pre>

<p>So I don't want to download all of the executables everytime, but I want to download all of the libraries everytime. </p>

<p>I have been thinking about submodules, but their documentation is terrible, maybe the whole feature is poor, I don't know. Then I have been thinking about subtrees and other structures from git. There is also a possibility that I will always just clone all of the 8 libraries separately manually, that would be sad. </p>

<pre>So what is the best way to 
1) automatically download all of the 8 libraries to their folders (next to the folder of the executable if it was caused by cloning executable)?
2) automatically download all of the 8 libraries to their folders next to the folder of the executable during the cloning of the executable?</pre>

<p>The first option is more basic - to have it done in 2 steps (1.executable+2.libraries), the second is way better for me, to just have it done in 1 step(executable&amp;libraries together). </p>

<p>Part of my question was solved here: <a href=""https://stackoverflow.com/questions/27379818/git-possible-to-use-same-submodule-working-copy-by-multiple-projects"">Git: Possible to use same submodule working copy by multiple projects?</a></p>

<p>I also want to make changes to the libraries even if they were downloaded with the executable and push those changes to their repositories. </p>

<p>EDIT: I added last sentence and added that also 1 library should also download other libraries. </p>
",2,1423254,0,0
41159852,881272,12/15/2016 8:47,0,85,<git><git-submodules><git-subtree>,Segment git project into submodules,"<p>I have a git project that is currently growing and several parts are starting to become projects in their own right.</p>

<p>So, I want to create submodules for them, but preserve the history of the files. There were moves between the different folders (eG from <code>partThatIsNotItsOwnProject</code> to <code>partThatIsItsOwnProject</code> and I'd like to have the history for that move too.)</p>

<p>Before:</p>

<pre><code>/.git
/someFiles
/partThatIsItsOwnProject
--/subdirectory
/partThatIsNotItsOwnProject
--/subdirectory
</code></pre>

<p>I'd like to have:</p>

<pre><code>/.git
/someFiles
/partThatIsItsOwnProject
--/.git
--/subdirectory
/partThatIsNotItsOwnProject
--/subdirectory
</code></pre>

<p>So, I guessed <code>git subtree</code> would do that, but it seems to keep the original git repository and only display a part of it. <code>git submodule</code> seems to be the target of this setup, but how do I do the transition?</p>
",0,881272,,
21745569,1069083,2/13/2014 4:54,1,102,<android><git><git-submodules><project-organization><git-subtree>,How to manage several projects with git,"<p>I want to organize all my java, C and Android projects with Git.</p>

<p>I have several folders:</p>

<pre><code>something_like_gdlib
example_library1
example_library2
...
example_project1
example_project2
...
</code></pre>

<p>In each of those projects I use some of those libraries. But if I update a library, I want all projects to get the changes for that library.</p>

<p>Usually I work alone on those projects and I just want to have a change history.</p>

<p>Now I want to work together with another programmer, that should get access to only one project and the corresponding libraries.</p>

<p>How should I set up git? I heard of subtrees or submodules? Or is there a better solution?</p>
",0,1069083,,
42026669,773263,2/3/2017 14:36,26,24398,<git><git-subtree><subtree>,How to push to git subtree?,"<p>I added a subtree on git which seems to be working. I went into the directory and made some changes and then pushed. </p>

<p>I noticed these changes show up in the parent project but the repository which I used as the source hasn't been updated.</p>

<p>I tried <code>git subtree push</code> which returns:</p>

<blockquote>
  <p>You must provide the --prefix option.</p>
</blockquote>

<p>Also <code>git subtree push --prefix=my/folder git@mygitrepo.com</code> which returns:</p>

<blockquote>
  <p>You must provide <code>&lt;repository&gt; &lt;ref&gt;</code></p>
</blockquote>

<p>What is the correct way to push changes to the origin repo for my git subtree?</p>

<p><strong>Edit:</strong> it was suggested that I do:</p>

<pre><code>git subtree push --prefix=my/folder origin master
</code></pre>

<p>When I run the above it starts the process but ends up saying the branch is behind. So I run:</p>

<pre><code>git subtree pull --prefix=my/folder origin master
</code></pre>

<p>Which returns ""Already up to date""</p>
",12,773263,0,0
21975081,3005034,2/23/2014 21:50,6,415,<git><github><git-subtree><ghost-blog>,git subtree simplifications if never contributing upstream?,"<p>What optimisations exist (including even alternatives to git subtree) if you wish to include a subproject in your main project but never contribute changes upstream?</p>

<p>Actual use case: I am embedding <a href=""https://github.com/TryGhost/Ghost"" rel=""noreferrer"">Ghost</a> into an existing express.js website, e.g. into lib/Ghost. I will need to make a few hacks to it, the type they would not want contributed upstream anyway. Any normal contributing to the Ghost project would be done via a typical forking on GitHub, instead of from within my other project.</p>

<p>Therefore after the initial embedding of Ghost into my project, the only things happening would be the occasional local source code change, plus sometimes fetching from upstream for updates from their master branch.</p>

<p>In such a scenario, is git subtree still a suitable approach, and if it is then are there either any gotchas or simplifications which would apply, due to this need to never contribute upstream? And would it therefore also be possible to have the main TryGhost/Ghost repository as my subtree upstream, rather than first forking Ghost and then having the fork as the project's upstream?</p>
",0,3005034,0,0
21976922,1704917,2/24/2014 0:49,14,5691,<git><git-diff><git-subtree>,How to get a git subtree diff?,"<p>I have a repository that has mounted another repository with</p>

<pre><code>git subtree add -P some/path  otherremote otherbranch
</code></pre>

<p>development has gone on with some local changes, but also with a few rounds of merges done with:</p>

<pre><code>git fetch otherremote
git subtree merge -P some/path otherremote/otherbranch
git commit
</code></pre>

<p>Now I want to get a diff between the HEAD of otherremote/otherbranch and the tree at some/path. How can I do this?</p>
",0,1704917,0,0
22114249,1707076,3/1/2014 12:19,1,81,<git><git-subtree>,Propagating changes to git subtrees using read_tree without network connection,"<p>I am using <code>read-tree</code> in git to include ProjectA in ProjectB. I have both projects cloned to my computer.</p>

<pre><code>/ProjectA

/ProjectB
    /remote/ProjectA
</code></pre>

<p>When I am making changes to ProjectA from inside ProjectB (<code>/ProjectB/remote/ProjectA</code>), currently what I do to propagate all the changes is the following:</p>

<p>1) commit project B (from ProjectB's root directory) :</p>

<pre><code>git push origin master
</code></pre>

<p>2) push ProjectA to its remote repository:</p>

<pre><code>git subtree split --prefix=remote/ProjectA --onto temp_branch --branch temp_branch
git push -f https://github.com/myUserName/ProjectA.git temp_branch:master
git branch -D temp_branch;
</code></pre>

<p>3) update ProjectA (from ProjectA's root directory) :</p>

<pre><code>git pull origin master
</code></pre>

<p>This works fine when I have a network connection.</p>

<p>The thing I love about git is that I can work locally without having to push to my remote repository. When working with <code>read-tree</code>s though, I haven't figured out a way to propagate the changes i make inside <code>ProjectB/remote/ProjectA</code> to <code>ProjectA</code> without doing two pushes and a pull. <strong>How can I keep local repositories that are connected by the <code>read-tree</code> feature synchronized, without having to have a network connection?</strong> What I am hoping go make work somehow is by committing ProjectA from inside ProjectB, the changes would get committed to all projects that use ProjectA, and to ProjectA itself.</p>
",0,1707076,,
22263592,2315602,3/8/2014 1:03,2,55,<git><git-subtree>,git-subtree: several occurrences of a subproject,"<p>Suppose that I have a project A, a project B that depends on A, and a project C that depends on A and B.</p>

<p>I use git-subtree for dealing with subprojects; the project C contains a subtree corresponding to project A, and another subtree for project B; the last has a subtree for it's own copy of project A.</p>

<p>I got stuck with the following problem: calling something like <code>git merge -s subtree A/master</code> in C causes the B/A be updated (the A that lies inside B subproject), not the A that is a direct dependency of C. Why is this happening and how can this be fixed?</p>

<p>Note that I consider having only one A in the whole tree (and using B/A in C) a bad idea: I do not want to depend on the fact, that B depends on A; there can also be version issues and so on.</p>
",0,2315602,0,0
23095230,939467,4/15/2014 21:52,3,941,<git><twitter-bootstrap><merge><git-subtree>,"Incorporating Bootstrap into a git repo, using subtree merging","<p>I'm working on a project where we'd like to edit the LESS files that came with Twitter Bootstrap. The <a href=""https://stackoverflow.com/a/10505295/939467"">standard advice</a> is to leave those files untouched, to make it easier to upgrade Bootstrap. But that advice isn't working for us; our code is becoming fragile and hard to maintain.</p>

<p>It seems like it should be possible to solve this with git subtree merging: We could edit Bootstrap's LESS files to have clear, maintainable code, then use git's merge tools to bring in new versions of Bootstrap.</p>

<p>We've come up with a plan for using subtree merging. But before we put the plan into action, I'd like to get some feedback: <strong>Are there significant drawbacks that we've overlooked? Is there a better/simpler approach?</strong></p>

<h2>Approaches with significant drawbacks</h2>

<p>In the <a href=""http://nuclearsquid.com/writings/subtree-merging-and-you/"" rel=""nofollow noreferrer"">simplest approach</a> to subtree merging, all the commits from the subtree (i.e., Bootstrap) are merged into your project's <code>master</code> branch. The drawback is that Bootstrap has so many commits, our commits get lost in the noise. We'd like to keep their commits off our <code>master</code> branch. </p>

<p>In theory, we could use <code>git rebase -i</code> to squash all the Bootstrap commits into one commit, that we then merge into <code>master</code>. But <code>rebase -i</code> <a href=""https://stackoverflow.com/a/3143485/939467"">does not work well with merges</a>. </p>

<p>@Sigi <a href=""https://stackoverflow.com/a/23331968/939467"">helpfully suggested</a> that we use squash merges to go from <code>bootstrap-upstream</code> to <code>master</code>. Grabbing the initial version of Bootstrap (v3.1.0) worked OK. But when we merged in the next version (v3.1.1), we over 100 merge conflicts. Every Bootstrap change between 3.1.0 and 3.1.1 was flagged as a conflict. (Our exact steps are in <a href=""https://gist.github.com/evan-dickinson/11407758"" rel=""nofollow noreferrer"">this gist</a>.)</p>

<h2>The plan</h2>

<p>Our plan is to use a branch, <code>merge-from-bootstrap</code>, for pulling Bootstrap commits into our repository. When merging changes <em>in to</em>  <code>merge-from-bootstrap</code> (either our changes on <code>master</code>, or Bootstrap's changes), always record the merge. When merging <em>out from</em> <code>merge-from-bootstrap</code> to <code>master</code>, use <code>git merge --squash</code> so that the merge is not recorded. </p>

<p>Our hope is that:</p>

<ol>
<li><code>master</code> stays managable, because the Bootstrap commits never become part of that branch.</li>
<li>Git has as much information as possible when merging in a new version of Bootstrap, since the <code>merge-from-bootstrap</code> branch has the full history of our changes and the Bootstrap team's changes.</li>
</ol>

<h2>Proof of concept</h2>

<p>In the following steps, we grab Bootstrap v3.1.0, make some changes, and then upgrade to v3.1.1. The POC seems to work well (as did my tests with our real repo), but I'd like to know if we're setting ourselves up for trouble down the line.</p>

<p>Start with a new repo, where the only file is <code>README.md</code> (i.e., the new repo that GitHub gives you).</p>

<pre><code># Add bootstrap as a remote
git remote add bootstrap https://github.com/twbs/bootstrap.git
# Only fetch the master branch; don't fetch tags
git config remote.bootstrap.fetch +refs/heads/master:refs/remotes/bootstrap/master
git config remote.bootstrap.tagopt --no-tags
git fetch bootstrap

# Start with Bootstrap v3.1.0
git checkout -b merge-from-bootstrap
# SHA is the commit tagged v3.1.0 from the bootstrap repo
git merge -s ours --no-commit 1409cde7e800ca83fd761f87e5ad8f0d259e38d1
git read-tree -u --prefix=bootstrap/ 1409cde7e800ca83fd761f87e5ad8f0d259e38d1
git commit -am ""Bootstrap v3.1.0""

# Merge Bootstrap 3.1.0 to master
git checkout master
git merge --squash merge-from-bootstrap
git commit -am ""Merge bootstrap v3.1.0 to master""

# Make some changes on master, so that we have something to
# be merged
sed -e 's/= space/= force-merge-conflict/g' -i '' bootstrap/.editorconfig
git commit -am ""Force a merge conflict""
sed -e 's/""Helvetica Neue""/""Comic Sans""/g' -i '' bootstrap/less/variables.less 
git commit -am ""Comic Sans""

# Get ready to upgrade to the new version of Bootstrap
git checkout merge-from-bootstrap
git merge -s recursive -Xtheirs master

# Merge in Bootstrap v3.1.1 from bootstrap/master to
# merge-to-bootstrap. (SHA is for v3.1.1 from the bootstrap repo)
git merge -s recursive -X subtree=bootstrap --no-commit a365d8689c3f3cee7f1acf86b61270ecca8e106d

# Fix the merge conflict, then do:
git commit -am ""Merged in Bootstrap v3.1.1""

# Merge back to master
git checkout master
git merge --squash merge-from-bootstrap
</code></pre>
",0,939467,0,0
23330931,694331,4/28/2014 0:52,2,168,<git><svn><migration><git-svn><git-subtree>,Doing git svn rebase after using git-subtree,"<p><strong>Introduction</strong></p>

<p>We are moving from Git to SVN using <code>git-svn</code>.</p>

<p>We have a single SVN repository with a large directory tree. A project links to other subprojects using relative paths. The simplified example below has a <code>MainProject</code> that is dependent on <code>SharedProject1</code> and <code>SharedProject2</code></p>

<pre><code>SVN
└── trunk
    ├── MainProject 
    ├── SharedProject1
    └── SharedProject2
</code></pre>

<p>Moving over to Git, we will have one repository per project. We will handle dependencies using <code>git-subtree</code>. So the structure for the <code>MainProject</code> repository would look like:</p>

<pre><code>MainProject
└── Depend
    ├── SharedProject1
    └── SharedProject2
</code></pre>

<p><strong>How the git -> svn move is performed</strong></p>

<p>Each project is cloned to Git repositories using:</p>

<pre><code>git svn clone http://server/svn --trunk=""trunk/MainProject"" MainProject
git svn clone http://server/svn --trunk=""trunk/SharedProject1"" SharedProject1
git svn clone http://server/svn --trunk=""trunk/SharedProject2"" SharedProject2
</code></pre>

<p>In the <code>MainProject</code> we add the SharedProject's with git-subtree:</p>

<pre><code>git subtree add --prefix ""Depend/SharedProject1"" path/to/SharedProject1 master --squash
git subtree add --prefix ""Depend/SharedProject2"" path/to/SharedProject2 master --squash
</code></pre>

<p>After changing the links in MainProject, everything works fine!</p>

<p><strong>The problem with git svn rebase</strong></p>

<p>When some of our developers updates the <code>MainProject</code> in the SVN repository, I want to add the changes to the Git repository for MainProject using:</p>

<pre><code>git svn rebase
</code></pre>

<p>But I get the following error:</p>

<pre><code>First, rewinding head to replay your work on top of it...
Applying: Squashed 'Depend/SharedProject1/' content from commit fdabd7b
Applying: Squashed 'Depend/SharedProject2/' content from commit 38e8c6f
...
Falling back to patching base and 3-way merge...
Auto-merging Properties/AssemblyInfo.cs
CONFLICT (add/add): Merge conflict in Properties/AssemblyInfo.cs
Failed to merge in the changes.
Patch failed at 0002 Squashed 'Depend/SharedProject2/' content from commit 38e8c6f
...
rebase refs/remotes/trunk: command returned error: 1
</code></pre>

<p>Both <code>SharedProject1</code> and <code>SharedProject2</code> (but not <code>MainProject</code>) has a file <code>Properties/AssemblyInfo.cs</code> that git seems to try to merge even though they are not in the same folder.</p>

<p>What am I doing wrong, and how can I get it to work properly?</p>
",0,694331,,
23331756,765382,4/28/2014 2:49,1,219,<git><git-submodules><git-subtree>,git subtree or submodule for surrounding directories,"<p>We commonly work on projects that share a similar directory structure to CodeIgniter, where there is a framework surrounding our application code (in parent and sibling directories).  We have two main workflows that we need to manage:</p>

<ol>
<li>maintain our local application code (e.g. the <code>/application</code> directory) in a private (non-github) repository</li>
<li>pull upstream changes from the outer framework, submit pull requests, etc.</li>
</ol>

<p>The closest approach I've found in my research would be to use <a href=""http://debuggable.com/posts/git-fake-submodules:4b563ee4-f3cc-4061-967e-0e48cbdd56cb"" rel=""nofollow"">fake submodules</a>, with a dash of <code>.gitignore</code> or some sort of related voodoo, however that seems very fragile. Is there a better approach to setting up our repositories and directories?</p>
",0,765382,,
12801936,550979,10/9/2012 14:08,16,22434,<git><git-subtree>,git-subtree: Push changes from an cloned repo,"<p>I'm using git-subtree(from Avery Pennarun). In my current git repo I have of course
all my project files/folders and a subtree called ""lib"".
If I now clone this git repo using <code>git clone</code> I get all of the project files and
the subtree ""lib"" (everything as it should be).
What I tried now: I changed something within the subtree ""lib"" in the cloned
repo and tried to push the changes back to the remote repo of the subtree ""lib"" using
<code>git subtree push</code>, but it didn't work. What is the problem? Do I have to add it
as subtree first with git subtree add?</p>

<p>Thx in advance</p>
",3,550979,0,0
30444555,4937887,5/25/2015 19:05,2,186,<git><git-subtree>,git subtree pull with missing directories,"<p>I've got an existing git repo that I want to import a subset of into another git repo.  Initially I added in the whole repo:</p>

<pre><code>git remote add -f coda-oss_remote https://github.com/mdaus/coda-oss.git
git subtree add --prefix externals/coda-oss coda-oss_remote master --squash
</code></pre>

<p>This worked fine.  Then I wanted to get rid of some of the unneeded directories (necessary for a variety of reasons).  This was actually simpler than I expected; I just removed them similar to this:</p>

<pre><code>git rm -r externals/coda-oss/modules/drivers/pcre
</code></pre>

<p>In subsequent pulls...</p>

<pre><code>git subtree pull --prefix externals/coda-oss coda-oss_remote master --squash
</code></pre>

<p>git was smart and just pulled in updates to that other repo and didn't try to recreate the removed directories.  Everything worked exactly like I wanted it to.</p>

<p>The other day was the first time that I've tried to pull when there's been a modification to one of the files in a directory that I've removed in this second repo.  I got a merge conflict because git saw that the file had been modified in the original repo but wasn't present in my repo.  This was simple enough to resolve - I just had to do another 'git rm' of the file - but I'd like this process to be something I can script up and automatically merge everything in.</p>

<p>Is there a better way to accomplish what I'm trying to do or at least an automatic way to do it so I can script it (I could parse the merge conflicts and run the 'git rm' off of that I suppose).</p>
",0,4937887,,
12858199,153718,10/12/2012 11:35,79,17110,<git><git-rebase><git-subtree>,How to rebase after git-subtree add?,"<p>I'm trying to learn the new <a href=""https://github.com/apenwarr/git-subtree"" rel=""noreferrer"">git-subtree</a> command which was added in Git 1.7.11. I seem to lose ability to rebase after I add a subtree. I have the primary repository with README file and a library repository which also has a README file. I add it to lib directory with <code>subtree add</code>:</p>

<pre><code>$ git subtree add -P lib/mylib myliborigin master
</code></pre>

<p>This works fine, but now the history looks like this:</p>

<pre><code>*   22c1fe6 (HEAD, master) Merge commit 'b6e698d9f4985825efa06dfdd7bba8d2930cd40e' as 'lib/mylib' - 
|\                                                                                                                
| * b6e698d Squashed 'lib/mylib/' content from commit d7dbd3d
* b99d55b Add readme
* 020e372 Initial
</code></pre>

<p>Now when I want to rebase my repo against <code>origin/master</code> and it fails because the squash commit is applied directly against its parent commit which does not apply, because it is applied to the root of the repo and not the prefix I gave it to it when adding the subtree.</p>

<p>The reason for this is pretty clear if I look at the squash commit. There is no information about the prefix. It is just the original mylib commits squashed together. Only the next merge commit knows anything about it, but rebase does not take it to account here.</p>

<p>Are there any workarounds (besides never rebasing over the subtree commits)?</p>
",2,153718,0,0
31098462,29246,6/28/2015 10:03,1,529,<git><alias><git-subtree>,How to make an alias for git subtree push command with repository and refspec,"<p>I want to define a shortcut (alias) for the following command:</p>

<pre><code>    git subtree push --prefix=_site git@github.com:mertnuhoglu/blog_datascience.git gh-pages
</code></pre>

<p>I want to be able to use the shortcut such that I won't need to specify the repository name. Even when using it in different repos. </p>

<p>Is this possible? How can I do this?</p>
",0,29246,0,0
31211870,156042,7/3/2015 17:31,9,3672,<git><git-submodules><git-subtree><git-repo><git-slave>,Best practices for multiple git repositories,"<p>I have around 20 different repositories. Many are independent and compile as libraries but some others have dependencies among them. Dependency resolution and branching is complicated.</p>

<p>Suppose that I have a <em>super project</em> that only aggregates all other repositories. It is used exclusively to run tests -- no real development goes here.</p>

<pre><code>/superproject  [master, HEAD]
    /a         [master, HEAD]
    /b         [master, HEAD]
    /c         [master, HEAD]
    /...
</code></pre>

<p>Now, to develop specific features or fixes for each one (<code>a</code>), especially one of those that require specific versions of projects to compile or run (<code>b v2.0</code> and <code>c 3.0</code>) I have to create a new branch:</p>

<pre><code>/superproject  [branch-a, HEAD]  &lt;-- branch for 'a' project
    /a         [master]  &lt;-- new commits here
    /b         [v2.0]
    /c         [v3.0]
</code></pre>

<p>For <code>b</code>, it might be required something else, like <code>a v0.9</code> and <code>c v3.1</code>:</p>

<pre><code>/superproject  [branch-b, HEAD]  &lt;-- branch for 'b' project
    /a         [v0.9]   &lt;-- older version than 'a'
    /b         [master] &lt;-- new commits go here
    /c         [v3.1]   &lt;-- newer version than 'a'
</code></pre>

<p>This becomes even more complex and complicated when implementing common git workflows involving feature branches, hotfix branches, release branches, etc. I was advised to (and advised against) using <code>git-submodules</code>, <code>git-subtree</code>, google's <code>git-repo</code>, <code>git-slave</code>, etc.</p>

<p>How can I manage <strong>continuous integration</strong> for such a complex project?</p>

<p><strong>EDIT</strong></p>

<p>The real question is how to run tests without having to mock all other dependent projects? Especially when all projects might use different versions.
<a href=""https://stackoverflow.com/questions/31214483/trigger-jenkins-tests-after-commits-in-git-submodules"">Trigger Jenkins tests after commits in git submodules</a></p>
",3,156042,0,0
48062584,1507546,1/2/2018 14:17,1,55,<git><git-subtree>,How do I disable git subtree pull if nothing is new,"<p>I have a git repository <strong>subtools</strong> that I handle through <a href=""/questions/tagged/git-subtree"" class=""post-tag"" title=""show questions tagged &#39;git-subtree&#39;"" rel=""tag"">git-subtree</a> inside my main project <strong>sf-parent</strong>.</p>

<p>I have a problem with the following command</p>

<pre><code>git subtree pull -P subtree/subtools subtools v3.0.3 --squash
</code></pre>

<p><code>v3.0.3</code> is a git tag.</p>

<p>The problem is that the command never tells me that nothing's new to pull, however is pulls anyway and thus adds new commits to my <strong>sf-parent</strong> project.</p>

<p>This is very weird because it hasn't happen before.</p>

<p>How do I tell <a href=""/questions/tagged/git-subtree"" class=""post-tag"" title=""show questions tagged &#39;git-subtree&#39;"" rel=""tag"">git-subtree</a> to pull only if something's changed?</p>

<p><strong>UPDATE</strong></p>

<p>Maybe should I leave <code>git subtree</code> and use <code>git read-tree</code> instead?</p>
",4,1507546,0,0
13854066,1160887,12/13/2012 6:16,2,289,<git><version-control><development-environment><git-submodules><git-subtree>,How to track separate projects with same core files in git,"<p>I use git version controll and I have multiple projects that uses same base directory, although some changes are made project specific.</p>

<p>Is there a way I could track with same git repo the superfolder (root/private/core in my case) and both public and private project specific directories aswell. 
Also, if I make changes in one project to core files, I would like that changes are made in other projects git repo aswell.</p>

<p>The way i have came up is to make a git repo in the root folder and then make branches for project, and not track other project files. But with this method I have to merge core changees in other projects and there is kind of a logic error aswell, because in this case branch would be used as project.</p>

<p>I have looked into submodules aswell, but that seems not to be the best solution aswell. If there is a solution that requires me to change my project directory system I am able to do it, although i would like to keep public, private and core directorys separately.  </p>

<p>Simplified example of my directory at the moment:</p>

<ul>
<li>root
<ul>
<li>private
<ul>
<li>core</li>
<li>projects
<ul>
<li>project1</li>
<li>project2</li>
</ul></li>
</ul></li>
<li>public
<ul>
<li>project1</li>
<li>project2 </li>
</ul></li>
</ul></li>
</ul>

<p>In private project folder there are core php extensions that are project specific and in public project folder is only stylesheets, javascript and index.</p>
",0,1160887,0,0
13865660,345918,12/13/2012 17:58,1,594,<git><git-submodules><git-subtree><sparse-checkout><pootle>,git sparsecheckout - how to pull into a different directory,"<p>I'm using pootle to allow people to translate the .po files in a PHP Yii project.</p>

<p>Pootle can pull and push translations once a translator has updated the .po file.
Separately we have developers working on the site, who may also update the translation files to add more text to be translated.</p>

<p>Yii requires the .po files to be located in:</p>

<blockquote>
  <p>yii-project/protected/messages/en_gb/messages.po</p>
</blockquote>

<p>Pootle requires the directory structure to be:</p>

<blockquote>
  <p>pootle/yii-project/en_GB/messages.po</p>
</blockquote>

<p>In order for pootle to pull &amp; push, the .git directory needs to be in pootle/yii-project/.git.</p>

<p>I have tried using git sparse checkout, but that will pull the files into pootle/yii-project/protected/messages/en_gb/messages.po which unfortunately pootle does not pick up.</p>

<p>I can't do a pull of the repository elsewhere and then softlink, as then pootle will not be able to find the .git directory.</p>

<p>What I would really like to be able to do is a sparse checkout of a directory and map the result to another directory, i.e. checkout:</p>

<blockquote>
  <p>pootle/yii-project/protected/messages/ -> pootle/yii-project</p>
</blockquote>

<p>I don't want to use git-subtree, as I want the files to be able to be updated either by the developers or the translators.  I don't want to use submodules, as I don't like the extra pull overhead, and we would like the developers to include all changes to do with a new feature in a single commit (instead of one commit on the main project and one on the submodule).</p>

<p>Any suggestions?</p>
",3,345918,,
14266010,112741,1/10/2013 19:45,1,550,<git><git-merge><git-pull><git-subtree>,When does git pull cause merge between multiple branches?,"<p>I'm trying to understand the circumstances that caused git to merge a feature branch I was working on into the main develop branch after switching to the develop branch.</p>

<p>I was able to revert the merge but it took the better part of a day to fully resolve and I'd like to avoid it in the future.</p>

<p>Here is the workflow:</p>

<p>After working on my feature branch I need to work on a bug fix.
My feature branch (refs/heads/feature/uploader/90) has been kept up with the main develop branch with:</p>

<pre><code>git merge origin/develop
</code></pre>

<p>Then I need to switch to the develop branch:</p>

<pre><code>git checkout develop
</code></pre>

<p>git outputs:</p>

<p><em>Switched to branch 'develop'
Your branch is behind 'origin/develop' by 88 commits, and can be fast-forwarded.</em></p>

<p>Then when I issue a pull:</p>

<pre><code>git pull origin refs/heads/develop
</code></pre>

<p>For some reason it looks like git has decided to merge my feature branch into develop, the output looks like this: </p>

<pre><code>branch develop -&gt; FETCH_HEAD
Fast-forwarding to: 102301bcc51fc6d7978e5287df9d031d82e53bc9
Trying simple merge with d139bab0a96df01408f82110e38b6e0b6b98e6e6
Merge made by the 'octopus' strategy.
</code></pre>

<p>And my commit log shows me committing:
<em>Merge branches 'feature/uploader/90' and 'develop' of github.com:MakerStudios/dashboard into develop</em></p>
",2,112741,0,0
31533361,40498,7/21/2015 7:57,2,698,<git><split><git-subtree>,Splitting a Project into multiple repos using git subtree,"<p>I have a large multi-module project that I am trying to split up into multiple GIT repos. I used the following sequence of commands as suggested by <a href=""https://lostechies.com/johnteague/2014/04/04/using-git-subtrees-to-split-a-repository"" rel=""nofollow noreferrer"">this link</a>.</p>

<pre><code># Preparing the Split Temp Branch
cd modules\bigproject
git subtree split -P ""bigproject.core"" -b ""subtree-bigproject-core"" #rejoin wasn't used

# Pushing into a Bare Repo for the split subtree
git branch --track subtree-bigproject-core origin/subtree-bigproject-core
git push --all origin
mkdir ..\subtree-bigproject-core
cd ..\subtree-bigproject-core
git init --bare
cd ..\bigproject
git push ..\subtree-bigproject-core subtree-bigproject-core:master

# Pushing the subtree repo to remote
cd ..\subtree-bigproject-core
git remote add origin git@ssh-git-xxx.domain.com:grp/module-bigproject-core.git
git push --all origin

# Back into the main repo, including the subtree using `subtree add`
cd ..\bigproject
git rm -r ""bigproject.core""
git add -A &amp;&amp; git commit -am ""replacing bigproject.core with subtree""

git subtree add -P ""bigproject.core"" --squash \
    -m ""adding bigproject.core repo as subtree"" \
    git@ssh-git-xxx.domain.com:grp/module-bigproject-core.git master

# Adding subtree remote repo to allow subtree push/pull/merge
git remote add subtree-bigproject-core \
    git@ssh-git-xxx.domain.com:grp/module-bigproject-core.git
</code></pre>

<p><strong>Please note that I did <em>not</em> use ""--rejoin"" during the split command execution</strong></p>

<p>Now I am able to make changes to the main project as well as to the core subtree independently. </p>

<p>However, when I try to push changes from the container ""bigproject"", for the subtree, by executing the following <code>git subtree push</code> command, it starts reading the whole commit history of the main container again, without recognizing that the subtree was actually created from the history of that very container and then added back in using ""add"".</p>

<pre><code>git subtree push -P ""bigproject.core"" subtree-bigproject-core/master
</code></pre>

<p><a href=""https://stackoverflow.com/a/12819896/40498"">Roger</a> suggests that a ""pull""/""merge"" is necessary after adding the subtree, but that did not work either. The <code>git subtree</code> documentation seems to suggest that <code>git subtree split --rejoin</code> is required even after doing a <code>add</code>, but when I execute a <code>subtree split --rejoin</code> again for that prefix, it starts reading the whole commit history again. With over 10K commits in my repo history, the split is very time taking, and I would like to leverage on the ability of subtree commands to move forward from the point of split.</p>

<p>What am I missing? After adding the ""bigproject.core"" subtree back into the container repo, I need the ability to:</p>

<ol>
<li>Push changes from the container into the subtree repo.</li>
<li>Pull changes from the remote subtree repo into the container. I would be OK to squash these changes in, as long as the changes recognize that the subtree has already been squashed during a previous ""subtree add"" or ""subtree pull"" of this subtree.</li>
</ol>

<p><strong>Update</strong>: The subtree documentation was confusing to me. The example did not cover my exact scenario and I was not able to make it work for the case described above.</p>

<ol>
<li>It says that --onto is not required if one has used add, and that if add was used, the intelligent merges from the subtree will happen successfully after that. But in my case, the ""add"" does not seem to have that effect of recognizing that the subtree was created from the original big repo in the first place.</li>
<li>It says that the --squash is used, --rejoin is not recommended. Does it mean that if ""--squash"" is used during ""add"", one will not be able to leverage on intelligent history reconstruction for subsequent pull/push/merge of subtree?</li>
</ol>
",0,40498,,
22029501,1520502,2/26/2014 0:55,0,100,<git><git-filter-branch><git-subtree>,git split repo but have same commit-ids,"<p>I have a big git repo and I want to split that into 2. I am able to do this using ""git filter-branch"" or ""git subtree split"" but both methods are creating completely new commits-ids (SHAs). I know we are rewriting history and it will change commit-ids. </p>

<p>But my requirement needs to have same commit-ids even after splitting repos. Is it possible?</p>

<p><strong>Example:</strong></p>

<p>Have a git repo foo-bar.git with below commits</p>

<pre><code>*foo-bar.git*
1fd3dsg refs #1 change-1 to foo
4sad2as refs #2 change-1 to bar
3edsads refs #3 change-2 to foo
5adsggh refs #4 change-2 to bar
</code></pre>

<p>Now we split repo foo-bar.git into foo.git and bar.git. Now foo.git will get all commits made for foo and bar.git will get all commits made for bar, but their commit-ids have changed.</p>

<p><strong>What I got:</strong></p>

<pre><code>*foo.git*
s43dfsa refs #1 change-1 to foo
a234s2f refs #3 change-2 to foo

*bar.git*
1s3ds3q refs #2 change-1 to bar
3re2ef2s refs #4 change-2 to bar
</code></pre>

<p><strong>What I am expecting.</strong></p>

<pre><code>*foo.git*
1fd3dsg refs #1 change-1 to foo
3edsads refs #3 change-2 to foo

*bar.git*
4sad2as refs #2 change-1 to bar
5adsggh refs #4 change-2 to bar
</code></pre>
",0,1520502,,
49374797,2244907,3/20/2018 1:00,1,153,<github><git-submodules><git-subtree><git>,How to include git submodules and their physical files in parent repository?,"<p>The story starts from a git repository. Let's call it pet-shop.
The pet-shop has 2 folders containing different projects.</p>

<pre><code>--pet-shop          &lt;== this is a repository
  --web             &lt;== subfolder angular project
  --rest-api        &lt;== subfolder python project
</code></pre>

<p>Due to within the same git repository, there is an issue that when developers commit changes to either <strong>pet-shop/web</strong> or <strong>pet-shop/rest-api</strong> the history logged to pet-shop. This makes no sense. Like as someone working within <strong>web</strong>, he/she doesn't need to know what's happend in <strong>rest-api</strong>.</p>

<p>Therefore, I was trying to split them out. I noticed git submodule feature.
After spending an hour on googling. It now ends up 3 git-repositories.</p>

<pre><code>--pet-shop                            &lt;==== this is a git repository
  --web @9se5082                      &lt;==== refer to git repo pet-shop-web
  --rest-api @defs02d                 &lt;==== refer to git repo pet-shop-rest-api


--pet-shop-web                        &lt;==== this is a new git repository


--pet-shop-rest-api                   &lt;==== this is another new git repository
</code></pre>

<p>This meets the initial requirement now. I could commit changes separately.</p>

<p>Logically they are connected; Physically they are stored respectively.</p>

<blockquote>
  <p>My question now is, the way of doing this consumes 3 git repositories, could it be done by 1 repository? </p>
</blockquote>
",1,2244907,,
60143485,1733478,2/10/2020 2:45,2,631,<git><gitignore><git-subtree>,"How do I ""reverse"" a gitignore file pattern in a subtree subdirectory?","<p>I have a repo that contains a subtree that has some build and config files. </p>

<pre><code>main
├── .gitignore
└── build (subtree)
    ├── .gitignore
    └── config.user.json
    └── config.site.json
└── index.js
</code></pre>

<p>I would like to <strong>ignore</strong> the <code>config.user.json</code> from both the <code>main</code> repo and <code>build</code> subtree, but <strong>keep</strong> <code>config.site.json</code> in the main repo, but <strong>ignore</strong> it in the <code>build</code> subtree.</p>

<h3>main/.gitignore</h3>

<pre><code>!build/config.site.json # (this is supposed to reverse the ignore)
build/config.user.json
</code></pre>

<h3>build/.gitignore</h3>

<pre><code>build/config.site.json
build/config.user.json
</code></pre>

<p>Is this possible, or should I put my config files in a different folder that the <code>build</code>. I have a feeling that the .gitignore in the subtree will override the .gitignore in the main repo and not the other way around.</p>

<p>REF: <a href=""https://stackoverflow.com/questions/38923530/git-subtree-specific-ignoring"">Git Subtree Specific Ignoring</a></p>

<p>Cheers</p>
",2,1733478,0,0
14331038,214373,1/15/2013 4:09,0,513,<git><git-subtree>,Create new repository out of git subtree,"<p>When using <code>git subtree</code> an entire new tree, including a new first commit, is created in the same repository in which it was created. This means that at that point the repository contains two completely independent trees inside it, with no common parent at all.</p>

<p>What would be a good way to move this new tree to its own repository?</p>
",0,214373,,
60423947,11858583,2/26/2020 23:07,-1,378,<git><heroku><git-push><git-subtree>,Heroku - problem with git subtree push to a remote Heroku app,"<p>Per advise from <a href=""https://stackoverflow.com/questions/44087837/heroku-push-subtrees-to-different-apps"">Heroku - push subtrees to different apps</a> 
I'm trying to push a local dist folder to one of my Heroku Node apps. </p>

<p>However, I can't get it to work for my case. I issued first the command:</p>

<pre><code>git remote add myherokuapp https://git.heroku.com/myherokuapp.git
</code></pre>

<p>(<a href=""https://git.heroku.com/myherokuapp.git"" rel=""nofollow noreferrer"">https://git.heroku.com/myherokuapp.git</a> is the git URL for my app from the Heroku dashboard) </p>

<p>followed by the command:</p>

<pre><code>git subtree push --prefix dist myherokuapp master 
</code></pre>

<p>which supposedly should push a local dist folder to the root of the myherokuapp file system. </p>

<p>I see in the console that this last command pushes over 500 files to some destination and completes without error. But when I check through bash the file system for myherokuapp, it is empty - no dist folder. </p>

<p>What could be the reason for this problem?</p>
",0,11858583,,
49635394,8649261,4/3/2018 16:54,1,483,<version-control><local><git-submodules><git-subtree><django-apps>,How to manage Django Project and its modules with git?,"<p>I've been looking for a solution how to manage my project with git for quite some time now. I want to have one instance as the main repo for connecting the entire project. Each app should be its own git instance. 
During my search I found both <strong>git submodule</strong> and <strong>git subtree</strong>. For both tools I found an instruction how to insert an existing reppo. However, I am interested in how to proceed from the beginning. I mean here from the command <pre>$ django-admin startproject myproject</pre> Where do I enter the <code>git init</code>? When I create a new app </p>

<p><pre><code>$ django-admin startapp new-app</code></pre> and how do I use this as subtree/submodule?</p>

<p>Until now I have always found instructions that refer to a remote repo. Is this always necessary? I am not sure if I want to publish every Django app on Github. But I want a version control system just for me. Is this possible?</p>

<p>I have to say that so far it has been enough to manage my ""projects"" locally. Now I want to work together with others and I don't want to install the whole Django Project locally but only provide me with single functions or modules.</p>

<p>It would be a great help if you could explain to me how that works.</p>

<p>TL;DR<br>
How to manage (start and expand) a Django Project with git. The apps should be their own git repos.</p>
",0,8649261,,
67264736,301513,4/26/2021 10:12,0,99,<git><git-rebase><git-subtree>,git subtree pull --squash bug if the pulled codes rebase before?,"<p>I found <code>git subtree pull</code> seems to have a bug with rebase. But when I google it I can't the related information (in fact there isn't much information about git subtree).</p>
<p>Let me first show my subtree setup, I have 3 subtrees added as 3 sub-directories:</p>
<pre><code>ws ➤ ls -d */                                                                                                                            
ccfront/  wsclient/ wsserver/
ws ➤ git remote -v                                                                                                                       
ccfront ssh://git@xxxxx/webcc/cc-frontend.git (fetch)
ccfront ssh://git@xxxxx/webcc/cc-frontend.git (push)
origin  ssh://git@xxxxx/webcc/ws_all.git (fetch)
origin  ssh://git@xxxxx/webcc/ws_all.git (push)
wsclient    ssh://git@xxxxx/webcc/bs-front.git (fetch)
wsclient    ssh://git@xxxxx/webcc/bs-front.git (push)
wsserver    ssh://git@xxxxx/webcc/ws_redis.git (fetch)
wsserver    ssh://git@xxxxx/webcc/ws_redis.git (push)
</code></pre>
<p>Normally <code>git subtree pull</code> works fine, but I find that if I rebase the result code in &quot;parent” repository and later run <code>git subtree pull</code> again to get the latest code from subtree, <code>git subtree pull</code> works unexpectedly. Following is an example,</p>
<pre><code>//The result should only pull the latest code as the committed message shows 
//Squashed 'wsserver/' changes from 5e997710..1cc96493

git subtree pull --prefix=wsserver wsserver v4 --squash -m 'test'
</code></pre>
<p><a href=""https://i.stack.imgur.com/y0jU0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/y0jU0.png"" alt=""git subtree pull"" /></a></p>
<p>The pulled codes should be the change between 5e997710..1cc96493 in wsserver as such, only 4 files changed</p>
<pre><code>git diff --name-only 5e997710 1cc96493
&quot;doc/\347\242\260\345\210\260\344\270\200\344\272\233\351\227\256\351\242\230.md&quot;
src/test/ccbackend/Pipfile
src/test/ccbackend/Pipfile-bak
src/test/ccbackend/Pipfile.lock
(END)
</code></pre>
<p>But it is NOT as here show. The subtree <code>ccfront</code> files are also added. I don't know why. But that only happens when I rebase the result codes in &quot;parent” repository. So I feel it seems a bug.</p>
<p>Has anyone also experienced that ?</p>
<pre><code>git show --stat --name-only e5e7f5cd
commit e5e7f5cdc8e6a385fbf98788ad0f0e1994864d6a
Author: qiulang@macbook3 &lt;qiulang2000@126.com&gt;
Date:   Mon Apr 26 17:18:05 2021 +0800

Squashed 'wsserver/' changes from 5e997710..1cc96493

1cc96493 过去开发文档整理
18f68394 3.8
d13ece2a test

git-subtree-dir: wsserver
git-subtree-split: 1cc96493f7fac9ecb2e2fe4bf4436586345cc182

.env
.gitignore
.prettierrc
.vscode/launch.json
Dockerfile
builder.py
ccfront/.babelrc
ccfront/.dockerignore
ccfront/.editorconfig
ccfront/.env
ccfront/.eslintignore
ccfront/.eslintrc.js
ccfront/.gitignore
ccfront/.postcssrc.js
ccfront/.vscode/launch.json
ccfront/.vscode/settings.json
ccfront/Dockerfile
ccfront/README.md
&quot;ccfront/api.js review\346\204\217\350\247\201.md&quot;
ccfront/build/build.js
ccfront/build/check-versions.js
ccfront/build/sed.js
ccfront/build/utils.js
ccfront/build/vue-loader.conf.js
ccfront/build/webpack.base.conf.js
</code></pre>
",4,301513,,
16641057,647380,5/20/2013 0:43,53,29328,<git><git-subtree>,How can I list the git subtrees on the root?,"<p>For example, you can do a <code>git remote --verbose</code> and git will show all the remotes you have on your project, <code>git branch</code> will show all the branches and signal the current branch, but how to list all subtrees, without any destructive command? <code>git subtree</code> will give the usage examples, but won't list anything. subtree only have <code>add</code>,<code>pull</code>,<code>push</code>,<code>split</code>,<code>merge</code>.</p>
",6,647380,0,0
23344763,2910092,4/28/2014 15:14,1,878,<git><git-subtree>,how to migrate multiple branches of a subfolder to another repo with git subtree,"<p>I like to migrate a subfolder with full history from repository 1:</p>

<pre><code>a -&gt; b -&gt; c (branch 1)
      \-&gt; d (branch 2)
</code></pre>

<p>to the same target folder in repository 2:</p>

<pre><code>          old -&gt; merged_subfolder (master)
              /
a* -&gt; b* -&gt; c* (branch 1)
        \-&gt; d* (branch 2)
</code></pre>

<p>with * denoting the limitation to subfolder.</p>

<p>So far I have used</p>

<pre><code>git subtree split -P subfolder -b branch_1
git subtree split -P subfolder -b branch_2
git subtree add -P target_folder repo_1 branch_1
</code></pre>

<p>Then I created branch 2 at b* in repository 2, but</p>

<pre><code>git subtree add -P ./ repo_1 branch_2
</code></pre>

<p>does not work, because</p>

<pre><code>prefix './' already exists.
</code></pre>

<p>Any suggestions to solve the problem?</p>

<p>And later, how to merge branch 2 with master in repository 2?</p>
",0,2910092,,
60646092,1067598,3/12/2020 0:23,1,111,<git><git-subtree>,git subtree split exporting everything BUT the prefix,"<p>I want to export a directory from a git repository into a new repository using git subtree split.</p>

<p>According to the examples in e.g. here</p>

<p><a href=""https://lostechies.com/johnteague/2014/04/04/using-git-subtrees-to-split-a-repository/"" rel=""nofollow noreferrer"">https://lostechies.com/johnteague/2014/04/04/using-git-subtrees-to-split-a-repository/</a></p>

<p>the command</p>

<p><code>git subtree split --prefix=lib -b split</code></p>

<p>splits out the directories under lib into a new branch. I can reproduce this in a newly created repo fine.</p>

<p>When I use the command on my repo that has a directory /firmware that I would like to split out, the command below creates a branch with everything BUT /firmware. </p>

<p><code>git subtree split --prefix=firmware -b split</code></p>

<p>Is this a bug in git subtree, or am I using git subtree the wrong way?</p>
",0,1067598,0,0
22686886,971592,3/27/2014 11:56,5,1838,<git><merge><git-subtree>,git subtree pull -P whatever <repo> <ref> always merge conflict,"<p><strong>The problem</strong>: I'm getting a merge conflict every time I try to pull into my subtree even when I have no changes.</p>

<p><strong>What I'm doing</strong>:</p>

<p>In <strong>subtree-repo</strong></p>

<pre><code># Make some changes

$ git commit -am 'Changes made'

$ git push origin master
</code></pre>

<p>In <strong>main-repo</strong></p>

<pre><code>$ git subtree add --prefix public/common {{subtree-repo}} master --squash

# Make some changes

$ git commit -am 'Changes made'

$ git subtree push --prefix public/common {{subtree-repo}} master
</code></pre>

<p>In <strong>subtree-repo</strong></p>

<pre><code>$ git pull origin master

# Make some changes

$ git commit -am 'Changes made'

$ git push origin master
</code></pre>

<p>In <strong>main-repo</strong></p>

<pre><code>$ git subtree pull --prefix public/common {{subtree-repo}} master --squash
</code></pre>

<p>And this is where things blow up. The pull gives me:</p>

<pre><code>remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From {{subtree-repo}}
 * branch            master     -&gt; FETCH_HEAD
   a53e6fc..c078461  master     -&gt; {{subtree-repo}}/master
Auto-merging public/common/README.md
CONFLICT (content): Merge conflict in public/common/README.md
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>So why am I getting a merge conflict when I haven't made any changes?</p>

<p><strong>What I'm trying to accomplish</strong>: I have a web project and a mobile project I'm building on Cordova. Because they're both using JavaScript I have several components and models I want to share between the two. I'd like to put these common things in a shared folder between the two of them so I don't have to copy paste. I looked into the pros/cons of submodules and subtrees and decided on subtrees. This is a one-man project right now, but I would like to do things the right way so it can scale.</p>

<p><strong>Note</strong>: If you have a suggestion for a better way to accomplish what I'm trying to do, that would be awesome :-)</p>
",0,971592,0,0
41650240,6800982,1/14/2017 13:00,1,457,<git><git-subtree>,include directory of git repository into own with full functionality,"<p>We have recently decided to split a subproject foo from our main project. We don't want to include all of foo, e.g. all foo-related tests can safely be kept in foo/.</p>

<p>Now, I have got two repositories:</p>

<pre><code>main/
   include/folder1
   include/foo/
   Test/

foo/
    include/...
    Test/...
</code></pre>

<p>and I would like to replace main/include/foo by foo/include. This is possible using <code>git subtree split</code>. The problem is that this rewrites history and I am unsure how changes of main/include/foo can be pushed to /foo/include. <code>git subtree push -P include/foo/ foo</code> gives horrible results.</p>

<p>Anyone knows how to do it right?</p>
",0,6800982,,
24451965,692810,6/27/2014 12:33,1,596,<git><git-submodules><git-subtree>,Is git-subtree appropriate for me?,"<p>I have a 3rd party library included in my project. It is important that the ""subproject"" code should be included in the main/parent one, because the objective is when other people makes git pull, they could will download the code with no extra-effort (or minimal).</p>

<p>But I want the possibility to download updates from the library own repo.</p>

<p>Previously, that library was downloaded directly into his directory and updates were managing by commits in the main project.</p>

<p>Now I'm thinking in use git-subtree or git-submodule. Is git-subtree are useful for that purpose. Is git-submodule better?</p>
",0,692810,0,0
68761778,548558,8/12/2021 17:20,3,1258,<git><git-subtree><subtree>,git subtree cache exists,"<p>I started to using subtree but ended in mess now. Googling and the man page didn't help that I can find out how to solve this error. Anyone an idea?</p>
<ul>
<li>Repo: <a href=""https://github.com/Azd325/gitkraken"" rel=""nofollow noreferrer"">https://github.com/Azd325/gitkraken</a></li>
<li>OS: macOS 11.5.1</li>
<li>git: git version 2.32.0</li>
</ul>
<p>Error:</p>
<pre><code>➜ git subtree split -P gitkraken --rejoin
cache for 12d7b0ee9414ebd0414070d22fb40db7446badd9 already exists!
</code></pre>
<p>Example to reproduce it, externally.</p>
<pre><code>mkdir test
cd test
git init
touch readme.md
git config --global user.email &quot;you@example.com&quot;
git config --global user.name &quot;Your Name&quot;
git add readme.md
git commit -m &quot;add readme&quot;
git subtree add --prefix gitkraken &quot;aur@aur.archlinux.org:gitkraken.git&quot; master
git subtree split -P &quot;gitkraken&quot; --rejoin
</code></pre>
<p>Currently, in my repo I switched the folder to <code>gitkraken-aur</code> and so it works for the moment again.</p>
<p>Attempt from the first answer to remove the subtree folder.</p>
<pre><code>test on  main [?]
➜ rm -rf .git/subtree-cache

test on  main [?]
➜ git subtree split -P &quot;gitkraken&quot; --rejoin

cache for 12d7b0ee9414ebd0414070d22fb40db7446badd9 already exists!

test on  main [?]
➜ git subtree pull -P gitkraken &quot;aur@aur.archlinux.org:gitkraken.git&quot; master -m &quot;Merge subbtree gitkraken&quot;
From aur.archlinux.org:gitkraken
 * branch            master     -&gt; FETCH_HEAD
Already up to date.

test on  main [?]
➜ git subtree push -P gitkraken &quot;aur@aur.archlinux.org:gitkraken.git&quot; master
git push using:  aur@aur.archlinux.org:gitkraken.git master
cache for 12d7b0ee9414ebd0414070d22fb40db7446badd9 already exists!

test on  main [?]
➜ rm -rf .git/subtree-cache

test on  main [?]
➜ git subtree push -P gitkraken &quot;aur@aur.archlinux.org:gitkraken.git&quot; master
git push using:  aur@aur.archlinux.org:gitkraken.git master
cache for 12d7b0ee9414ebd0414070d22fb40db7446badd9 already exists!
</code></pre>
<p>More debug information to attempt one.</p>
<pre><code>test on  main [?]
➜ rm -rf .git/subtree-cache

test on  main [?]
➜ tree .git
.git
├── COMMIT_EDITMSG
├── FETCH_HEAD
├── HEAD
├── ORIG_HEAD
├── branches
├── config
├── description
├── hooks
│   ├── applypatch-msg.sample
│   ├── commit-msg.sample
│   ├── fsmonitor-watchman.sample
│   ├── post-update.sample
│   ├── pre-applypatch.sample
│   ├── pre-commit.sample
│   ├── pre-merge-commit.sample
│   ├── pre-push.sample
│   ├── pre-rebase.sample
│   ├── pre-receive.sample
│   ├── prepare-commit-msg.sample
│   ├── push-to-checkout.sample
│   └── update.sample
├── index
├── info
│   └── exclude
├── logs
│   ├── HEAD
│   └── refs
│       └── heads
│           └── main
├── objects
│   ├── 0c
│   │   └── ce20ac9c41edfaafd245059b066f4e644b6c84
│   ├── 23
│   │   └── 9ec593c6a2192e76c005435f748b2ad28be832
│   ├── 69
│   │   └── 3d7dd0cbe326ad51fffad7408c2c6cc8af7e0d
│   ├── 74
│   │   └── 11ec84b161eba98f6ae09d2210c231393c977c
│   ├── 84
│   │   └── a5dcf23e618a493da589f95f2c57da22603e2a
│   ├── 99
│   │   └── 03d6d6b962b96143f3e2c0b75550561de14c06
│   ├── b3
│   │   └── 5caa9cbb57f55fb05260b3dd767f92c62a20ba
│   ├── bf
│   │   └── 52649a7b94057b0da0a7f1bb20c55b395717be
│   ├── e4
│   │   └── 22b2b19b0c80773ccbad0822130158a024ef59
│   ├── e6
│   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   ├── eb
│   │   └── 4c7f2ebf6596f7e3c40b2355bc11e7a1badf58
│   ├── info
│   └── pack
│       ├── pack-542055b17c2fb18100e23d143d0f824b0c5ee19f.idx
│       └── pack-542055b17c2fb18100e23d143d0f824b0c5ee19f.pack
└── refs
    ├── heads
    │   └── main
    └── tags

23 directories, 37 files

test on  main [?]
➜ git subtree split -P &quot;gitkraken&quot; --rejoin

cache for 12d7b0ee9414ebd0414070d22fb40db7446badd9 already exists!

test on  main [?]
➜ tree .git
.git
├── COMMIT_EDITMSG
├── FETCH_HEAD
├── HEAD
├── ORIG_HEAD
├── branches
├── config
├── description
├── hooks
│   ├── applypatch-msg.sample
│   ├── commit-msg.sample
│   ├── fsmonitor-watchman.sample
│   ├── post-update.sample
│   ├── pre-applypatch.sample
│   ├── pre-commit.sample
│   ├── pre-merge-commit.sample
│   ├── pre-push.sample
│   ├── pre-rebase.sample
│   ├── pre-receive.sample
│   ├── prepare-commit-msg.sample
│   ├── push-to-checkout.sample
│   └── update.sample
├── index
├── info
│   └── exclude
├── logs
│   ├── HEAD
│   └── refs
│       └── heads
│           └── main
├── objects
│   ├── 0c
│   │   └── ce20ac9c41edfaafd245059b066f4e644b6c84
│   ├── 23
│   │   └── 9ec593c6a2192e76c005435f748b2ad28be832
│   ├── 69
│   │   └── 3d7dd0cbe326ad51fffad7408c2c6cc8af7e0d
│   ├── 74
│   │   └── 11ec84b161eba98f6ae09d2210c231393c977c
│   ├── 84
│   │   └── a5dcf23e618a493da589f95f2c57da22603e2a
│   ├── 99
│   │   └── 03d6d6b962b96143f3e2c0b75550561de14c06
│   ├── b3
│   │   └── 5caa9cbb57f55fb05260b3dd767f92c62a20ba
│   ├── bf
│   │   └── 52649a7b94057b0da0a7f1bb20c55b395717be
│   ├── e4
│   │   └── 22b2b19b0c80773ccbad0822130158a024ef59
│   ├── e6
│   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   ├── eb
│   │   └── 4c7f2ebf6596f7e3c40b2355bc11e7a1badf58
│   ├── info
│   └── pack
│       ├── pack-542055b17c2fb18100e23d143d0f824b0c5ee19f.idx
│       └── pack-542055b17c2fb18100e23d143d0f824b0c5ee19f.pack
├── refs
│   ├── heads
│   │   └── main
│   └── tags
└── subtree-cache
    └── 24098
        ├── 12d7b0ee9414ebd0414070d22fb40db7446badd9
        ├── 9903d6d6b962b96143f3e2c0b75550561de14c06
        ├── e9aad069b8e1e49f8cbb54cb91e3f226e4949712
        └── notree

26 directories, 40 files
</code></pre>
",3,548558,0,0
15890047,387018,4/8/2013 22:20,4,3504,<git><git-commit><git-subtree>,How to remove history of deleted git subtree folder?,"<p>I added a git repository using git-subtree. The problem is that I did a hard reset back to before the repository was added with git-subtree. Now the commit history is still in the repository but it's disconnected from master. </p>

<p>Any idea how to remove it? I tried git rm --cached with no luck. </p>
",2,387018,0,0
16112836,202292,4/19/2013 20:16,9,6861,<git><push><git-push><git-subtree>,Pushing git subtree changes to upstream repository fails,"<p>I'm trying to ensure that git's subtrees will work for me before I incorporate it into my project.  I encountered a problem when pushing subtree changes to the upstream repository.</p>

<p>The setup is that I have two repos, <code>sub</code> and <code>main</code>, and that <code>main</code> includes the <code>sub</code> repo as a <code>subtree</code>.</p>

<p>Then I do the following:</p>

<ol>
<li>Initialize both repos with an initial commit.</li>
<li>Update the <code>sub</code> repo directly (i.e. outside of <code>main</code>).</li>
<li>Update the <code>sub</code> repo from within the <code>main</code> repo.</li>
<li>Split the changes to <code>sub</code> (using <code>git subtree split</code>) into a separate branch, which I then checkout.</li>
<li>Attempt to push upstream to the <code>sub</code> repo.  Naturally, this push is rejected because it would lose the direct update to <code>sub</code>.</li>
<li>Pull the new change from the <code>sub</code> repo.</li>
<li>Attempt to push upstream to the <code>sub</code> repo.  This time, it should work, but it doesn't.</li>
</ol>

<p>I've written a script that encapsulates this problem.  I'm using git version 1.8.2.1 with the <code>subtree</code> module enabled.  Here's the script:</p>

<pre><code>#!/bin/bash

echo -n ""Wiping old repositories...""
rm -rf main sub sub-home
echo ""done""

echo -n ""Initializing main and sub repositories...""
mkdir sub-home
( cd sub-home ; git init -q --bare )
git clone sub-home sub &gt; /dev/null 2&gt;&amp;1
( cd sub ; echo subfile &gt; subfile ; git add subfile ;
  git commit -qm ""adding root-level file to sub-project"" ;
  git push -q origin master )
mkdir main
( cd main ; git init -q ; echo file &gt; file ; git add file ;
  git commit -qm ""adding root-level file to main-project"" )
echo ""done""

echo -n ""Adding sub project as a subtree into main project...""
WD=$PWD
( cd main ; git remote add sub-remote file://$WD/sub-home ;
  git subtree add -P sub sub-remote master &gt;/dev/null 2&gt;&amp;1 )
echo ""done""

echo -n ""Committing to sub-project directly...""
( cd sub ; date &gt; the-date ; git add the-date ;
  git commit -qm ""adding the-date to sub-project""
  git push -q origin master )
echo ""done""

echo -n ""Committing to sub-project from within main project...""
( cd main ; echo 'subfile what?' &gt; sub/subfile ; git add sub/subfile ;
  git commit -qm ""changing sub-project from within the main project"" )
echo ""done""

cd main
git subtree split -q -P sub -b split-branch &gt;/dev/null
git checkout -q split-branch
echo -e ""\nPushing from main subtree to sub project, which should fail:""
git push sub-remote master
echo -e ""\nBut if we pull first...""
git pull -q --no-edit sub-remote master
echo ""...then a push *should* work (but it doesn't):""
git push sub-remote master
cd ..
</code></pre>

<p>And here's the output:</p>

<pre><code>$ ./test.sh
Wiping old repositories...done
Initializing main and sub repositories...done
Adding sub project as a subtree into main project...done
Committing to sub-project directly...done
Committing to sub-project from within main project...done

Pushing from main subtree to sub project, which should fail:
To file:///tmp/git/sub-home
 ! [rejected]        master -&gt; master (fetch first)
error: failed to push some refs to 'file:///tmp/git/sub-home'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first merge the remote changes (e.g.,
hint: 'git pull') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

But if we pull first...
...then a push *should* work (but it doesn't):
To file:///tmp/git/sub-home
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'file:///tmp/git/sub-home'
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. Check out this branch and merge the remote changes
hint: (e.g. 'git pull') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>Further <code>git pull</code> commands (from the <code>split-branch</code> branch of <code>main</code>) simply say ""Already up-to-date"".</p>

<p>The thing that's really confusing to me is that, as far as I can tell, the <code>git push</code> command should really be giving the upstream repo a fast-forward commit, as demonstrated by the following <code>git log</code> output:</p>

<pre><code>$ ( cd main ; git log )
commit 357fe9fb42f5d122338940eb4f22d3ca9d276318
Merge: 472904f cb5d1d3
Author: Jeff Terrell &lt;jeff.terrell@acm.org&gt;
Date:   Fri Apr 19 16:03:03 2013 -0400

    Merge branch 'master' of file:///tmp/git/sub-home into split-branch

commit 472904f432c3a0a89acde02691b8281ac5246fd1
Author: Jeff Terrell &lt;jeff.terrell@acm.org&gt;
Date:   Fri Apr 19 16:03:02 2013 -0400

    changing sub-project from within the main project

commit cb5d1d34ce56374f78c98c5b3f3daa314907b62d
Author: Jeff Terrell &lt;jeff.terrell@acm.org&gt;
Date:   Fri Apr 19 16:03:02 2013 -0400

    adding the-date to sub-project

commit 7d1942203d30e0d9e8663517e6d594545bc50640
Author: Jeff Terrell &lt;jeff.terrell@acm.org&gt;
Date:   Fri Apr 19 16:03:02 2013 -0400

    adding root-level file to sub-project
$ (cd sub ; git log )
commit cb5d1d34ce56374f78c98c5b3f3daa314907b62d
Author: Jeff Terrell &lt;jeff.terrell@acm.org&gt;
Date:   Fri Apr 19 16:03:02 2013 -0400

    adding the-date to sub-project

commit 7d1942203d30e0d9e8663517e6d594545bc50640
Author: Jeff Terrell &lt;jeff.terrell@acm.org&gt;
Date:   Fri Apr 19 16:03:02 2013 -0400

    adding root-level file to sub-project
</code></pre>

<p>Here are my questions (finally):</p>

<ol>
<li>Why is this push rejected?</li>
<li>What can I do about it?  (If using the <code>--force</code> option is the answer, how can I be certain I am not doing something destructive?)</li>
<li>Is there a better way to use the <code>subtree</code> module to avoid this problem?  (Note: I'm not willing to use submodules.)</li>
</ol>
",3,202292,0,0
50498600,3798373,5/23/2018 22:57,1,90,<git><repository><git-subtree><packagist><subtree>,Sync tags in slave repos using git subtree,"<p>I have a repository on github that is made up by different modules. I prefer to have all these modules under the same repository (it's easier to work, for me), however I also need to be able to mantain a ""separate copy"" of these modules, because I need to submit them separately on packagist.</p>

<p>After a bit of research on git subtree I found this tool <a href=""https://www.github.com/splitsh/lite"" rel=""nofollow noreferrer"">splitsh-lite</a>, that was able to solve my problem.</p>

<p>Anyway, versioning on packagist is achieved with tags. What I would like to do is ""pushing"" the tag along with the commit when issuing a command like <code>git subtree push -P lib/ lib_remote master</code>. Is this possible?</p>
",0,3798373,0,0
32837660,1900714,9/29/2015 7:02,5,5747,<git><git-subtree><git-filter-branch>,git filter-branch with --subdirectory-filter removes all files,"<p>I would like to to a pretty standard repository split-up.
The original repository has to following structure:</p>

<pre><code>root
|-AAA
|-BBB
  |-BBB1
  |-BBB2
|-CCC
</code></pre>

<p>I tried to extract the directory BBB1 and all its contents into an individual repository using the command</p>

<pre><code>git filter-branch --subdirectory-filter BBB/BBB1 -- --all
</code></pre>

<p>which leads to git rewriting a bunch of commits and ends with git's final statement</p>

<pre><code>Ref 'refs/heads/master' was rewritten
</code></pre>

<p>So this seems perfectly fine for me.
But when I take a look into the <em>root</em> directory after git has finished, the repository no longer contains any source files but only the <em>.git</em> folder at <em>root</em>. Browsing this repository with SourceTree I can see in the log the (probably) correct commits which would have affected <em>BBB1</em> only, <strong>but each commit no longer references any files as they are all gone!</strong></p>

<p>What am I doing wrong? Why are all the files gone, even the ones I actually filtered for?</p>

<p>Thanks in advance!</p>

<p>Simon</p>
",0,1900714,0,0
17069081,2478808,6/12/2013 15:13,2,1342,<git-subtree>,git subtree: add different branches from a project at different prefixes,"<p>I have a <em>module</em> repository with some branches <em>branchA</em>, <em>branchB</em> etc. I would like to import these branches into a <em>project</em> repository using git subtree. I set up my <em>project</em> repository like this:</p>

<pre><code>git remote add module /path/to/module.git
git fetch module
git subtree add -P folderA module/branchA
git subtree add -P folderB module/branchB
</code></pre>

<p>This seems to work as expected, and I've got files and history from the correct branches in <em>folderA</em> and <em>folderB</em>.</p>

<p>Now I have changes in the <em>master</em> branch of <em>module</em>, which I apply to both <em>branchA</em> and <em>branchB</em> (by rebasing <em>branchA</em> and <em>branchB</em>) and want to update <em>project</em>.</p>

<pre><code>git fetch module
</code></pre>

<p>fetches these changes into <em>project</em>. However, when I then do</p>

<pre><code>git subtree pull -P folderA module branchA
git subtree pull -P folderB module branchB
</code></pre>

<p>only <em>folderA</em> gets updated. For <em>folderB</em>, I get the following message:</p>

<pre><code>From /path/to/module.git
 * branch            branchB -&gt; FETCH_HEAD
Already up-to-date.
</code></pre>

<p>and the changes are not merged. Apparently, git is not correctly taking into account that the changes had been applied to path <em>folderA</em>, but not <em>folderB</em>. Does anyone have an idea what I could do to make this scenario work? </p>
",0,2478808,,
17242063,2509951,6/21/2013 18:31,15,4818,<git><git-subtree>,git-subtree conflict when pulling from central repo,"<p>I have several projects that depend on the same library, for which I'd like to maintain a separate git repository to be managed with git-subtree within each project. So for example, within each project I can do:</p>

<pre><code>project1$  git subtree add --prefix=lib1 /path/to/lib1.git master
project2$  git subtree add --prefix=lib1 /path/to/lib1.git master
</code></pre>

<p>Now in the course of working on project1, I make some changes to lib1, say lib1/file1.c, and push this back to the central repo:</p>

<pre><code>project1$  git add lib1/file1.c
project1$  git commit -m ""updates to lib1""
project1$  git subtree push --prefix=lib1 /path/to/lib1.git master
</code></pre>

<p>So far, so good. But now I'd like to update project2's copy of lib1. So I try:</p>

<pre><code>project2$  git subtree pull --prefix=lib1 /path/to/lib1.git master
Auto-merging lib1/file1.c
CONFLICT (content): Merge conflict in lib1/file1.c
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>What's going on? I know for certain that no changes were made to any of the lib1 files under project2, so why should there be a conflict here?</p>

<p>The conflicts are half-empty, like those reported in <a href=""https://stackoverflow.com/questions/8672095/git-reports-merge-conflict-with-no-changes-empty-lines-using-git-subtree"">this question</a>. Everything is being pulled/pushed within a single system (OS X), so I know there's no issue with line endings as suggested there.</p>

<p>Surely this is a common use case for git-subtree, and has a simple answer I just can't see. Please help!</p>

<p><strong>EDIT:</strong> I found an unsatisfying workaround: immediately after pushing changes to the subtree, I need to re-run subtree pull:</p>

<pre><code>project1$  git subtree push --prefix=lib1 /path/to/lib1.git master
project1$  git subtree pull --prefix=lib1 /path/to/lib1.git master
</code></pre>

<p>Even though there were no changes, it will find something, and do a merge commit. Then, after making some changes elsewhere, the conflict won't happen the second time I pull from the central repo. But if I forget to run pull immediately after pushing, the next pull will get this conflict.</p>

<p>So now my question is, why does this work? Is there a bug in the way git-subtree tracks pushes, or am I missing something?</p>
",4,2509951,,
33832046,444244,11/20/2015 16:55,18,6922,<git><git-subtree>,"git subtree split ""No new revisions were found""","<p>I've been using <code>git subtree split</code> to divide up one huge repository, imported to Git from another VCS, into smaller repositories. </p>

<pre><code>$ git subtree split -P ./path/to/folder/ -b folder-only
</code></pre>

<p>This has been working and I've moved a couple of folders out into new repositories but attempts on their siblings, after running through all the available commits, have <strong>no branch created</strong>. </p>

<p>The final message is </p>

<blockquote>
  <p>""No new revisions were found""</p>
</blockquote>

<p>I don't know if this is important or not but running with <code>--debug</code> gives messages like the following</p>

<blockquote>
  <p>Processing commit: ca9d25944cf34bbe7aa356248a166ac1fb813f2a<br>
    parents: fc0e5a621ab871b8a11071eec321f4b40b8dcce0<br>
    newparents:<br>
    tree is:</p>
</blockquote>

<p>Why has <code>git subtree split</code> failed and what can I do about it?</p>
",2,444244,,
17309094,56149,6/25/2013 23:13,1,219,<git-subtree>,Why git subtree pull overwrites top directory?,"<p>I added subtree using:</p>

<blockquote>
  <p>git subtree add -P WLContainerControllers
  <a href=""https://github.com/an0/WLContainerControllers.git"" rel=""nofollow"">https://github.com/an0/WLContainerControllers.git</a> master</p>
</blockquote>

<p>The resulting commit is:</p>

<pre><code>commit bb77fe3c8244a42454b23285f174798116a5eaf8
Merge: 6686d73 755c342
Author: Ling Wang &lt;xxx@gmail.com&gt;
Date:   Tue Jun 25 17:20:29 2013 -0500

    Add 'WLContainerControllers/' from commit '755c342622fc6470e034f1b27e764329d7b8a01c'

    git-subtree-dir: WLContainerControllers
    git-subtree-mainline: 6686d73b438fc22514b36cdf76adf7ea9c35b558
    git-subtree-split: 755c342622fc6470e034f1b27e764329d7b8a01c
</code></pre>

<p>Then after some upstream updates, I did a subtree pull using:</p>

<blockquote>
  <p>git subtree pull -P WLContainerControllers <a href=""https://github.com/an0/WLContainerControllers.git"" rel=""nofollow"">https://github.com/an0/WLContainerControllers.git</a> master --squash</p>
</blockquote>

<p>The output:</p>

<pre><code>From https://github.com/an0/WLContainerControllers
 * branch            master     -&gt; FETCH_HEAD
Removing WLPageViewController/main.m
Removing WLPageViewController/en.lproj/InfoPlist.strings
Removing WLPageViewController/damping.m
Removing WLPageViewController/WLPageViewController.m
Removing WLPageViewController/WLPageViewController.h
Removing WLPageViewController/WLPageViewController-Prefix.pch
Removing WLPageViewController/WLPageViewController-Info.plist
Removing WLPageViewController/PageViewController.xib
Removing WLPageViewController/PageViewController.m
Removing WLPageViewController/PageViewController.h
Removing WLPageViewController/ModelController.m
Removing WLPageViewController/ModelController.h
Removing WLPageViewController/Default@2x.png
Removing WLPageViewController/Default.png
Removing WLPageViewController/Default-568h@2x.png
Removing WLPageViewController/DataViewController.xib
Removing WLPageViewController/DataViewController.m
Removing WLPageViewController/DataViewController.h
Removing WLPageViewController/AppDelegate.m
Removing WLPageViewController/AppDelegate.h
Removing WLPageViewController.xcodeproj/project.pbxproj
Removing WLContainerControllers/WLContainerControllers/README.md
Removing WLContainerControllers/WLContainerControllers/LICENSE
Removing WLContainerControllers/WLContainerControllers.xcodeproj/xcuserdata/an0.xcuserdatad/xcschemes/xcschememanagement.plist
Removing WLContainerControllers/WLContainerControllers.xcodeproj/xcuserdata/an0.xcuserdatad/xcschemes/WLContainerControllers.xcscheme
Removing WLContainerControllers/WLContainerControllers.xcodeproj/project.xcworkspace/xcuserdata/an0.xcuserdatad/WorkspaceState.xcuserstate
Removing WLContainerControllers/WLContainerControllers.xcodeproj/project.xcworkspace/contents.xcworkspacedata
Removing WLContainerControllers/WLContainerControllers.xcodeproj/project.pbxproj
Removing WLContainerControllers/WLContainerControllers.xcodeproj/an0.perspectivev3
Removing WLContainerControllers/WLContainerControllers.xcodeproj/an0.pbxuser
Removing WLContainerControllers/WLContainerControllers.xcodeproj/an0.mode1v3
Removing .gittrees
Merge made by the 'recursive' strategy.
 .gittrees                                                                                                   |    4 -
 WLContainerControllers/WLContainerControllers/AppDelegate.h =&gt; AppDelegate.h                                |    0
 WLContainerControllers/WLContainerControllers/AppDelegate.m =&gt; AppDelegate.m                                |    0
 WLContainerControllers/WLContainerControllers/Default-568h@2x.png =&gt; Default-568h@2x.png                    |  Bin
 WLContainerControllers/WLContainerControllers/WLContainerController.h =&gt; WLContainerController.h            |    0
 WLContainerControllers/WLContainerControllers/WLContainerController.m =&gt; WLContainerController.m            |    0
 .../WLContainerControllers/WLContainerControllers-Info.plist =&gt; WLContainerControllers-Info.plist           |    0
 WLContainerControllers/WLContainerControllers.xcodeproj/an0.mode1v3                                         | 1403 ---------------------------------
 WLContainerControllers/WLContainerControllers.xcodeproj/an0.pbxuser                                         |  542 -------------
 WLContainerControllers/WLContainerControllers.xcodeproj/an0.perspectivev3                                   | 1530 ------------------------------------
 WLContainerControllers/WLContainerControllers.xcodeproj/project.pbxproj                                     |  308 --------
 WLContainerControllers/WLContainerControllers.xcodeproj/project.xcworkspace/contents.xcworkspacedata        |    7 -
 .../project.xcworkspace/xcuserdata/an0.xcuserdatad/WorkspaceState.xcuserstate                               | 2264 ------------------------------------------------------
 .../WLContainerControllers.xcodeproj/xcuserdata/an0.xcuserdatad/xcschemes/WLContainerControllers.xcscheme   |   76 --
 .../WLContainerControllers.xcodeproj/xcuserdata/an0.xcuserdatad/xcschemes/xcschememanagement.plist          |   22 -
 WLContainerControllers/WLContainerControllers/LICENSE                                                       |   27 -
 WLContainerControllers/WLContainerControllers/README.md                                                     |    4 -
 .../WLContainerControllers/WLContainerControllers_Prefix.pch =&gt; WLContainerControllers_Prefix.pch           |    0
 .../WLContainerControllers/WLMultiContentContainerController.h =&gt; WLMultiContentContainerController.h       |    0
 .../WLContainerControllers/WLMultiContentContainerController.m =&gt; WLMultiContentContainerController.m       |    0
 WLPageViewController.xcodeproj/project.pbxproj                                                              |  372 ---------
 WLPageViewController/AppDelegate.h                                                                          |   15 -
 WLPageViewController/AppDelegate.m                                                                          |   52 --
 WLPageViewController/DataViewController.h                                                                   |   14 -
 WLPageViewController/DataViewController.m                                                                   |   37 -
 WLPageViewController/DataViewController.xib                                                                 |  236 ------
 WLPageViewController/Default-568h@2x.png                                                                    |  Bin 18594 -&gt; 0 bytes
 WLPageViewController/Default.png                                                                            |  Bin 6540 -&gt; 0 bytes
 WLPageViewController/Default@2x.png                                                                         |  Bin 16107 -&gt; 0 bytes
 WLPageViewController/ModelController.h                                                                      |   17 -
 WLPageViewController/ModelController.m                                                                      |   89 ---
 WLPageViewController/PageViewController.h                                                                   |   16 -
 WLPageViewController/PageViewController.m                                                                   |   68 --
 WLPageViewController/PageViewController.xib                                                                 |  133 ----
 WLPageViewController/WLPageViewController-Info.plist                                                        |   45 --
 WLPageViewController/WLPageViewController-Prefix.pch                                                        |   29 -
 WLPageViewController/WLPageViewController.h                                                                 |   48 --
 WLPageViewController/WLPageViewController.m                                                                 | 1098 --------------------------
 WLPageViewController/damping.m                                                                              |   53 --
 WLPageViewController/en.lproj/InfoPlist.strings                                                             |    2 -
 WLPageViewController/main.m                                                                                 |   18 -
 WLContainerControllers/WLContainerControllers/main.m =&gt; main.m                                              |    0
 42 files changed, 8529 deletions(-)
 delete mode 100644 .gittrees
 rename WLContainerControllers/WLContainerControllers/AppDelegate.h =&gt; AppDelegate.h (100%)
 rename WLContainerControllers/WLContainerControllers/AppDelegate.m =&gt; AppDelegate.m (100%)
 rename WLContainerControllers/WLContainerControllers/Default-568h@2x.png =&gt; Default-568h@2x.png (100%)
 rename WLContainerControllers/WLContainerControllers/WLContainerController.h =&gt; WLContainerController.h (100%)
 rename WLContainerControllers/WLContainerControllers/WLContainerController.m =&gt; WLContainerController.m (100%)
 rename WLContainerControllers/WLContainerControllers/WLContainerControllers-Info.plist =&gt; WLContainerControllers-Info.plist (100%)
 delete mode 100644 WLContainerControllers/WLContainerControllers.xcodeproj/an0.mode1v3
 delete mode 100644 WLContainerControllers/WLContainerControllers.xcodeproj/an0.pbxuser
 delete mode 100644 WLContainerControllers/WLContainerControllers.xcodeproj/an0.perspectivev3
 delete mode 100755 WLContainerControllers/WLContainerControllers.xcodeproj/project.pbxproj
 delete mode 100644 WLContainerControllers/WLContainerControllers.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 delete mode 100644 WLContainerControllers/WLContainerControllers.xcodeproj/project.xcworkspace/xcuserdata/an0.xcuserdatad/WorkspaceState.xcuserstate
 delete mode 100644 WLContainerControllers/WLContainerControllers.xcodeproj/xcuserdata/an0.xcuserdatad/xcschemes/WLContainerControllers.xcscheme
 delete mode 100644 WLContainerControllers/WLContainerControllers.xcodeproj/xcuserdata/an0.xcuserdatad/xcschemes/xcschememanagement.plist
 delete mode 100644 WLContainerControllers/WLContainerControllers/LICENSE
 delete mode 100644 WLContainerControllers/WLContainerControllers/README.md
 rename WLContainerControllers/WLContainerControllers/WLContainerControllers_Prefix.pch =&gt; WLContainerControllers_Prefix.pch (100%)
 rename WLContainerControllers/WLContainerControllers/WLMultiContentContainerController.h =&gt; WLMultiContentContainerController.h (100%)
 rename WLContainerControllers/WLContainerControllers/WLMultiContentContainerController.m =&gt; WLMultiContentContainerController.m (100%)
 delete mode 100644 WLPageViewController.xcodeproj/project.pbxproj
 delete mode 100644 WLPageViewController/AppDelegate.h
 delete mode 100644 WLPageViewController/AppDelegate.m
 delete mode 100644 WLPageViewController/DataViewController.h
 delete mode 100644 WLPageViewController/DataViewController.m
 delete mode 100644 WLPageViewController/DataViewController.xib
 delete mode 100644 WLPageViewController/Default-568h@2x.png
 delete mode 100644 WLPageViewController/Default.png
 delete mode 100644 WLPageViewController/Default@2x.png
 delete mode 100644 WLPageViewController/ModelController.h
 delete mode 100644 WLPageViewController/ModelController.m
 delete mode 100644 WLPageViewController/PageViewController.h
 delete mode 100644 WLPageViewController/PageViewController.m
 delete mode 100644 WLPageViewController/PageViewController.xib
 delete mode 100644 WLPageViewController/WLPageViewController-Info.plist
 delete mode 100644 WLPageViewController/WLPageViewController-Prefix.pch
 delete mode 100644 WLPageViewController/WLPageViewController.h
 delete mode 100644 WLPageViewController/WLPageViewController.m
 delete mode 100644 WLPageViewController/damping.m
 delete mode 100644 WLPageViewController/en.lproj/InfoPlist.strings
 delete mode 100644 WLPageViewController/main.m
 rename WLContainerControllers/WLContainerControllers/main.m =&gt; main.m (100%)
</code></pre>

<p>It messed up the who directory.</p>

<p>The related logs are:</p>

<pre><code>commit 0eaebf9a4842e53a19d0ffbddf1dadee69ef4e11
Merge: 3093049 1efe88d
Author: Ling Wang &lt;xxx@gmail.com&gt;
Date:   Tue Jun 25 18:02:27 2013 -0500

    Merge commit '1efe88dd79cb6fd550fceaaa10d4b22dc44fb9df'

commit 1efe88dd79cb6fd550fceaaa10d4b22dc44fb9df
Author: Ling Wang &lt;xxx@gmail.com&gt;
Date:   Tue Jun 25 18:02:27 2013 -0500

    Squashed 'WLContainerControllers/' changes from 755c342..2f2ca9a

    2f2ca9a Update project after moving LICENSE and README.md.
    d052945 Move LICENSE and README.md to top folder.

    git-subtree-dir: WLContainerControllers
    git-subtree-split: 2f2ca9ac87a7eebcac590ffba32577dc93c4963f
</code></pre>

<p>I'm using git 1.8.3.1 installed via homebrew on OS X 10.8.4.</p>

<p>What's wrong with my usage of git subtree? How to correctly use it? Thanks.</p>
",3,56149,0,0
17332311,2476417,6/26/2013 23:49,4,1052,<git><git-subtree>,Is it possible to create branches of git subtrees while maintaining parent repo structure?,"<p>We are looking to put sub-projects within a Git repository. The repo, i.e. ParentRepo, will need to sync with our private server, and then a few subdirectories will need to also push to a company github repo and pull from upstream github repos. We also need the ability to make branches from those subdirectories (not the entire parent repo) that will be pushed to github.</p>

<p>So our hierarchy is something like: </p>

<ul>
<li>ParentRepo/Dir1/GitHubProj1 </li>
<li>ParentRepo/Dir1/GitHubProj2</li>
<li>ParentRepo/Dir1/PrivateProj</li>
</ul>

<p>GitHubProj1 and GitHubProj2 are forks from community github repos. We need to be able to grab upstream changes from the community github repos and branch from our github repos. PrivateProj will not push or pull from any github repos. Everything gets pushed to our ParentRepo on our private server.</p>

<p>We considered using submodules, but there seem to be many complaints about them so we decided to try using subtrees instead. We made subtrees using the company github account URLs and added remote tracking branches for the outside github accounts. </p>

<p>However, when we tried making a branch of a subtree using the git subtree split command with --branch option, the subtree's contents were put at the root of the parent repo.</p>

<p>When we create a branch of each subtree, we would like to maintain its original directory structure within the parent repo. Aside from using special nomenclature, is there any way to make branches in this way or to set up our repo differently so this is possible?</p>
",0,2476417,0,0
18235339,2251131,8/14/2013 15:04,1,1114,<git><deployment><workflow><web-deployment><git-subtree>,Using git subtree to deploy a build directory,"<p>I'm using the Ant Build Script in my project to create a build directory called “publish”
Once I run the build and update my publish folder with the new build I add and then commit and finally push this to my remote repo on github.</p>

<p>Once the publish folder has been added to the project I run this command suggested by Yeoman on my local machine.</p>

<pre><code>git subtree push --prefix publish origin deployment
</code></pre>

<p>On the initial execution it deploys my publish folder to its own branch called “deployment.”</p>

<p>Anytime I run the build again, add files, commit files and push files to remote repo and then run that subtree command again locally I get rejected.</p>

<pre><code>! [rejected]        22cd5e0605fcc771615bdacbde9bd95582705c17 -&gt; deployment (fetch first)
error: failed to push some refs to 'git@github.com:[org]/[repo].git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first merge the remote changes (e.g.,
hint: 'git pull') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>What's the best approach with this kind of workflow?</p>
",3,2251131,,
34839804,3140927,1/17/2016 15:04,1,172,<ios><git><git-submodules><git-subtree>,"How to modify third party code imported with git (subtree, submodules, etc)?","<p>I have a project that needs to support iOS7. I want to use a lib (let's call it LIB) that does not support iOS7 but could be easily modified to do so. I also expect LIB will change quite often.</p>

<p>What will be an ideal solution:</p>

<ol>
<li><p>I include LIB's code into my project (tag with the last
release) </p></li>
<li><p>I modify LIB to support iOS7 (usually only one commit). I <strong>do not</strong> want to push this commit to LIB's original repository but want to save it in my projects repository.</p></li>
<li><p>When new LIB's version is released I update it in my project and
merge with changes from point 2 or just redo these changes.</p></li>
<li><p>I do not want to have LIB's full history in my project history (as git subtree do AFAIK). Only something like ""LIB changed to 1.2.42;  LIB updated to support iOS7;""</p></li>
</ol>

<p>I can copy LIB's code myself or maintain LIB's fork with iOS7 support but it is time consuming and not very ""automagically"". I have checked git submodules and git subtree but as far as I understand it is impossible to have point 2, is it?.</p>

<p>What is a best approach to solve this?</p>
",0,3140927,,
18436624,2327283,8/26/2013 4:28,2,1373,<git><repository><git-submodules><git-subtree><atlassian-sourcetree>,is git submodules what I need?,"<p>I have two repositories for two websites, but those two websites share the same framework.</p>

<p>I wanted to make a dedicated repository for the framework itself but I'm not sure how would that work.</p>

<p>What I currently do is that I develop the framework within website1 and then copy it to website2 each time I add new features. As you can see it's not very effective...</p>

<p>I would like a separate repository for the framework, but I still need it to be within one of the two websites so I can keep working on it. <strong>The most important part is that I need to be able to deploy it to the other website in a simple way</strong></p>

<p>What is the best solution for me? How can this be achieved?</p>

<p>PS: <em>I'm using SourceTree with Bitbucket quit intensively for the past months so I'm fairly familiar with git, but I have never used the command line.</em></p>
",0,2327283,0,0
18465867,438249,8/27/2013 12:47,1,322,<git><git-subtree><subtree>,How to work around 'git subtree split' failing on revert commits?,"<p>I'm running into the problem described in <a href=""http://thread.gmane.org/gmane.comp.version-control.git/202645"" rel=""nofollow"">this mailing list post</a>. 'git subtree split' fails to reconstruct the history when a revert commit is followed by a merge commit. I have slightly adjusted the test script provided by Fabien in his mailing list post:</p>

<pre><code>git init

# create a directory that is going to be split
mkdir doc
echo ""TEST"" &gt; doc/README
git add doc
# commit A
git commit -a -m""first version""

# create a branch with a new commit (Z)
git checkout -b test
echo ""TEST"" &gt; doc/README1
git add doc/README1
git commit -a -m""added README1""
git checkout master

# modify the README file (commit B)
echo ""TEST_"" &gt; doc/README
git commit -a -m""second version""

# revert the change (commit C)
echo ""TEST"" &gt; doc/README
git commit -a -m""revert second version""
# or use git revert HEAD^

# split
git subtree split --prefix=""doc"" --branch=TARGET

# add another commit (to a file *not* in the subtree dir)
echo ""BLA"" &gt; BLA
git add BLA
git commit -a -m""third version""

# adding another commit to a file in the subtree dir will ""fix"" things
#echo ""MEH"" &gt; doc/MEH
#git add doc
#git commit -a -m""fourth version""

# the log will show the 3 commits as expected (including B and C)
GIT_PAGER= git log --oneline TARGET

# merge the test branch
git merge -m""merged test"" test

# attempt to re-split; this will fail
git subtree split --prefix=""doc"" --branch=TARGET

# see what history split generates
git subtree split --prefix=""doc"" --branch=TARGET2
</code></pre>

<p>I have discovered that if the revert commit is followed by another commit that makes changes in the subtree directory, the split will work as expected (see ""fourth version"" above). This looks like a bug in git-subtree.</p>

<p>However, in my case, the merge has already been performed of course, so I cannot fix things by adding a dummy commit. Is there any other way around this? Perhaps a quick-fix patch to the git-subtree source code?</p>
",0,438249,,
60462824,4523359,2/29/2020 7:11,2,992,<git><split><git-subtree>,git subtree split error: You need to run this command from the toplevel of the working tree,"<p>I have a git repo in /srv/git/mysite.git. </p>

<p>Workdir is set to</p>

<pre><code>/srv/www/mysite
</code></pre>

<p>in git /srv/git/mysite.git/config:</p>

<pre><code>[core] repositoryformatversion = 0
filemode = false
bare = false
worktree = /srv/www/mysite

[receive] denyCurrentBranch = updateInstead
</code></pre>

<p>I would like to split with subtree the directory content at:</p>

<pre><code>/srv/www/mysite/mysubsite
</code></pre>

<p>to branch mysubsite. </p>

<p>When I execute:</p>

<pre><code>cd /srv/git/mysite.git
git subtree split --prefix=mysubsite -b mysubsite
</code></pre>

<p>I get error </p>

<blockquote>
  <p>You need to run this command from the toplevel of the working tree.</p>
</blockquote>

<p>It seems this thread has related info about my problem:
<a href=""http://git.661346.n2.nabble.com/git-users-Problem-using-detached-worktrees-with-commands-implemented-in-scripts-td7597786.html"" rel=""nofollow noreferrer"">http://git.661346.n2.nabble.com/git-users-Problem-using-detached-worktrees-with-commands-implemented-in-scripts-td7597786.html</a></p>

<p>I tried the following:</p>

<pre><code>export GIT_WORK_TREE=/srv/www/mysite

export GIT_DIR=/srv/git/mysite.git

cd /srv/www/mysite

git subtree split --prefix=mysubsite -b mysubsite
</code></pre>

<p>I get error again:</p>

<blockquote>
  <p>You need to run this command from the toplevel of the working tree.</p>
</blockquote>

<p>How can I fix this? </p>
",0,4523359,0,0
34994647,246724,1/25/2016 14:10,3,131,<git><git-log><git-subtree>,git log --all to ignore disconnected parts of history graph,"<p>A regular <code>git log</code> only lists the ancestors of the current commit.</p>

<p>With the <code>--all</code> parameter (preferably combined with <code>--graph</code>), it lists the ancestors of all refs. Usually these other refs and commits are somehow connected to the current commit. They can be ancestors, descendants, or some kind of direct or indirect ""siblings"". Or in other words, you could find a path through the graph from the current commit to any other commit shown with <code>git log --all</code>.</p>

<p>If you start playing with <code>git subtree</code>, and fetch from other subtree remotes, you will get commits that are not in any way connected to the main history. These are still listed with <code>git log --all</code>. And this can get confusing.</p>

<p>Questions:</p>

<ul>
<li>Is there a trick to exclude disconnected commits from history display?</li>
<li>Is there a trick to have a better visual distinction between connected and disconnected pieces of the history graph?</li>
</ul>

<hr>

<p>Note: I am using the following aliases for git log:</p>

<pre><code>lol = log --graph --decorate --pretty=oneline --abbrev-commit
lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
</code></pre>
",0,246724,0,0
34994409,246724,1/25/2016 13:58,1,121,<git><git-subtree>,git subtree fetch - unwanted remote tags,"<p>I am getting started with git subtree.</p>

<p>When fetching from a subtree remote, one thing I notice is that after a git fetch, I have all the tags from this remote. These tags could be something like <code>v1.0.5</code>, and it is impossible to distinguish tags from different remotes.</p>

<p>This behavior is technically not surprising. But it is still undesirable.</p>

<p>One solution could be to omit the tags with <code>git fetch -n</code>.</p>

<p>I wonder if this is the recommended way to do things, or if there is something smarter that people do. The <code>-n</code> option is not mentioned in the tutorials I read so far.</p>

<hr>

<p>Note: I am using git subtree as described <a href=""https://medium.com/@porteneuve/mastering-git-subtrees-943d29a798ec#.nqmwebixd"" rel=""nofollow"">here</a>, the ""manual"" approach.</p>

<p>Note: An answer that simply confirms the <code>git fetch -n</code> can be perfectly valid and acceptable - ideally with a link or two.</p>
",0,246724,,
35018992,3498094,1/26/2016 16:37,0,539,<git><ansible><git-subtree>,Multiple projects in git (subtrees),"<p>I have a git repository that I use for our ansible configuration. The directory structure is this:</p>

<pre><code>ansible
|---Site
`---Roles
      |---Common
      `---other_project
</code></pre>

<p>This is in git, and it is private as only my team needs access to this. </p>

<p>I would like to make <code>other_project</code> a separate repository so that it can be uploaded publicly. I think what I need is subtrees, and I have got this working.  My problem is with the workflow.  Normally I follow a work flow pattern like <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">this</a>. </p>

<p>The main point of this is that I have a development branch and a master branch.  Once a set of code is stable it is pushed into master with a <code>--no-ff</code> so that in master you only see stable releases and nothing in between.  </p>

<p>How can I do this with the <code>other_project</code>. Is there a way to use branches for the subtree? How do I then merge one branch into another and swap between them?</p>
",0,3498094,,
18536279,201863,8/30/2013 15:14,24,19673,<git><merge><repository><git-subtree>,git subtree: possible to change subtree branch/path in a forked repository?,"<p>In a repository <code>A</code> the folder <code>sub</code> is included as git subtree of the repository <code>S</code> - pointing to <code>master</code> branch.</p>

<p>I have forked repository <code>A</code> into <code>F</code>. Now I want to do one of the following in <code>F</code>:</p>

<ul>
<li>change <code>sub</code> to use a different branch of <code>S</code> (ie <code>develop</code> branch)</li>
<li>or: change <code>sub</code> to use a different repository altogether</li>
</ul>

<p>Is either one of these possible, and if so, how? Will there be any side effects I should know of?</p>

<p>And how can I make sure my subtree change won't be updated in repository <code>A</code> when I merge my changes (pull request)? I mean besides isolating commits.</p>
",0,201863,0,0
22991650,1175327,4/10/2014 14:55,0,283,<git><github><git-subtree>,Cant see new repository after git subtree split,"<p>I have a project which uses a few self made ""modules"". I want to put these modules in separate (read only) repositories. I tried to do this with the <code>subtree split</code> command. But I don't see my new branched repository anywhere.</p>

<p>I first ran this command:</p>

<pre><code>git subtree split --prefix=src/Modules/Infra --branch=infra --annotate='Infra folder split' --rejoin master
</code></pre>

<p>Then with the Github GUI client (I'm on Windows) I synced the changes that where pending.</p>

<p>But I don't see any difference. Shouldn't there be a new Repository in my Github account named <code>infra</code>? That's what I'm trying to accomplish with this... Is there anything else I have to do to get this to work?</p>
",0,1175327,,
42793618,7000031,3/14/2017 18:18,5,2921,<git-svn><git-submodules><git-subtree><svn-externals><git-subrepo>,svn to git migration with nested svn:externals,"<p>Migrating from svn with svn externals, to git. 
Each svn externals may have it's own svn:externals. There is no guide how to migrate svn with externals to git here that I found useful.
Each branch may have it's own branches tags trunk. 
What's the best way to migrate the whole repository?
I am looking at git svn clone of the main repository adding git submodules, of each one external cloned as well. But Since the externals are nested, I don't know what's the best solution.
Script used till now:</p>

<pre><code>https://github.com/eneroth/git-externals
https://github.com/eneroth/git-externals
</code></pre>
",4,7000031,0,0
62552794,12680409,6/24/2020 10:19,0,177,<git><git-submodules><git-subtree>,How to read .git/index file for submodules,"<p>I have <code>test</code> folder in which I'm adding a submodule and after that I manually delete the <code>.gitmodules</code> file from the folder and then again want to add the submodule but facing error like  <code>'test' already exists in the index</code> if I have multiple submodules and they don't have <code>.gitmodule</code> file how we will identify that they are submodules or not? If this question is silly please sorry because I'm very new to git. I suggested by someone for <a href=""http://%20https://git-scm.com/docs/git-ls-files"" rel=""nofollow noreferrer"">link</a> but not able to make a command which identifies this. Can anybody help me in this?</p>
",0,12680409,,
43895608,297032,5/10/2017 14:36,1,610,<git><git-submodules><githooks><git-subtree>,How to assign different git per-folder permissions while you maintain the commit binding?,"<h2>Background</h2>

<p>I've searched a lot and I am aware that <em>different folder permissions under the same repository</em> is something that is not supported by git. However, I still haven't found a satisfactory git model for my infrastructure although I've studied both <code>submodules</code> and <code>subtree</code></p>

<p><strong>References</strong></p>

<ul>
<li><a href=""https://stackoverflow.com/questions/3131912/why-are-git-submodules-incompatible-with-svn-externals/3132221#3132221"">Why are git submodules incompatible with svn externals?</a></li>
<li><a href=""https://stackoverflow.com/questions/2065559/using-two-git-repos-in-one-folder/2065749#2065749"">Using two git repos in one folder</a></li>
<li><a href=""https://stackoverflow.com/questions/31769820/differences-between-git-submodule-and-subtree"">Differences between git submodule and subtree</a></li>
<li><a href=""https://stackoverflow.com/questions/769786/vendor-branches-in-git/769941#769941"">Vendor Branches in Git</a></li>
</ul>

<p>In this point have to thank <a href=""https://stackoverflow.com/users/6309/vonc/"" title=""VonC"">@VonC</a> for his immense contribution to my understanding of those models</p>

<h2>Infrastructure</h2>

<p>I maintain a highly configurable application so most of my <strong>commits affect both the source and the configuration</strong> so I have placed them under a single git repository which structure looks like this:</p>

<pre><code>.
└── myapp
    ├── README.md
    ├── source
    └── conf
</code></pre>

<h2>Issue</h2>

<p>My issue is that my <strong>conf directory needs to be exposed to the client</strong>  (<em>part of what makes my product highly configurable</em>) who wants to perform a <code>git-pull</code> but for obvious reasons I don't want my client to get the source directory as well.</p>

<h2>Workaround</h2>

<pre><code>.
└── myapp-conf
    └── ""configuration""
.
└── myapp-source
    ├── README.md
    └── ""sources""
</code></pre>

<p>This structure assumes two distinct repositories with no connection between them whatsoever, which doesn't meet my exact needs by saves me from the hustle <code>submodules</code> and <code>subtree</code> introduce,</p>

<h2>Need</h2>

<p>A way to:</p>

<ul>
<li><strong>associate a single commit ID to changes in both</strong> <em>source</em> <strong>and</strong> <em>conf</em> <strong>directories</strong></li>
</ul>

<p><em>while at the same time</em></p>

<ul>
<li><strong>being able to prevent the client from pulling my source code</strong>.</li>
</ul>

<p>Sorry for the long question and thank you all in advance.</p>
",0,297032,0,0
25294227,1066647,8/13/2014 19:08,24,10422,<git><git-subtree>,git-subtree pull merge conflict,"<p>So I used git-subtree to have various branches of repoB in sub-directories of repoA, like so</p>

<pre><code>git clone repoA
cd repoA
// some commits to repoA here
git subtree add --prefix=src/dirA repoB branchA
</code></pre>

<p>I did a few commits in repoA using</p>

<pre><code>git subtree push --prefix=src/dirA repoB branchA
</code></pre>

<p>Some time later, I committed something to repoB/branchA from another repoC, where branchA was added using git-subtree, too.</p>

<p>Now, I try</p>

<pre><code>git subtree pull --prefix=src/dirA repoB branchA
</code></pre>

<p>However, I'm getting a merge conflict for no apparent reason. The changes are simple and don't conflict at all -- as confirmed by patch.</p>

<p>I'm unsure how to fix this error. I already found <s>two</s> four other threads that deal with the same/similar issue:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/9777564/git-subtree-pull-complications"">git-subtree pull complications</a></li>
<li><a href=""https://stackoverflow.com/questions/22686886/git-subtree-pull-p-whatever-repo-ref-always-merge-conflict"">git subtree pull -P whatever &lt;repo&gt; &lt;ref&gt; always merge conflict</a></li>
<li><a href=""https://stackoverflow.com/questions/17242063/git-subtree-conflict-when-pulling-from-central-repo"">git-subtree conflict when pulling from central repo</a></li>
<li><a href=""https://stackoverflow.com/questions/15823730/git-subtree-merging-reports-conflict-when-merging-a-simple-upstream-change"">Git Subtree Merging reports conflict when merging a simple upstream change</a> (this one is about subtree merge strategy though, see below)</li>
</ol>

<p>I'm not sure this is related to different SHA-1s as I did not rebase my commits nor did I edit them; links 1 thru 3.</p>

<p>My problem is more like link 4, where git magically fails to do a simple merge. However, link 3 talks about the subtree merge strategy, not git-subtree in particular, so I'm not sure if this is applicable at all in my situation.</p>

<p>Situation looks to be the same though:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
// changes from commit I try to pull from repoB/branchA
&gt;&gt;&gt;&gt;&gt;&gt;&gt; {commit SHA-1 from commit I try to pull from repoB/branchA}
</code></pre>

<p>So I noticed that BASE is blatantly wrong in a three-way merge window (kdiff3). However, if that's the case, why doesn't git try to apply all earlier commits since base? Issuing </p>

<pre><code>git log --oneline
</code></pre>

<p>after the failed merge but before merging/trying to merge shows no duplicated commits prior to the offending commit.
The version of the file that's shown as BASE is the file as it was when I first issued</p>

<pre><code>git subtree add --prefix=src/dirA repoB branchA
</code></pre>

<p>inside repoA.</p>

<p>So what's going on? It seems to be related that git subtree cannot find my commits for some reason, yet it does not try to apply the commit from BASE to HEAD~1, but only the commit I'm actually missing, HEAD.</p>

<p>How can I fix this error without screwing up either repository's history? Why can't git pull this simple commit and instead thinks it's a merge conflict?</p>

<p>Any insight will be much appreciated.</p>
",1,1066647,0,0
26068474,761963,9/26/2014 21:17,2,729,<git><git-push><assertion><git-subtree><subtree>,What are git subtree push assertions?,"<p>I know git subtree is a shell script and I can see the assert() function in it (<a href=""https://raw.githubusercontent.com/git/git/master/contrib/subtree/git-subtree.sh"" rel=""nofollow"">https://raw.githubusercontent.com/git/git/master/contrib/subtree/git-subtree.sh</a>). But I don't really know what it's doing and the one thing I know is every time I use git subtree push there's more and more of these ""assertions"". It's taking longer and longer just to push to my subtrees which seems ridiculous! </p>

<p>So, questions:</p>

<ul>
<li>What exactly are these assertions doing, and why does it have to start from the beginning of the assertion count every time I subtree push? * assuming these numbers are assertions.</li>
<li>Is there a way to limit the number of these things? Something like git subtree pull --squash perhaps. I don't want to wait this much or that it'll break at some point when there's just too many.</li>
</ul>

<p>Here's a sample output of a git subtree push command (notice how it does the endless assertions before checking that the repo even exists):</p>

<pre><code>$ git subtree push -P prefix remote branch
git push using:  remote branch
1/    226 (0)2/    226 (1)3/    226 (2)4/    226 (3)5/    226 (4)6/    226 (5)7/
    226 (6)8/    226 (7)9/    226 (8)10/    226 (9)11/    226 (10)12/    226 (11
)13/    226 (12)14/    226 (13)15/    226 (14)16/    226 (15)17/    226 (16)18/
   226 (17)19/    226 (18)20/    226 (19)21/    226 (20)22/    226 (21)23/    22
6 (22)24/    226 (23)25/    226 (24)26/    226 (25)27/    226 (26)28/    226 (27
)29/    226 (28)30/    226 (29)31/    226 (30)32/    226 (31)33/    226 (32)34/
   226 (33)35/    226 (34)36/    226 (35)37/    226 (36)38/    226 (37)39/    22
6 (38)40/    226 (39)41/    226 (40)42/    226 (41)43/    226 (42)44/    226 (43
)45/    226 (44)46/    226 (45)47/    226 (46)48/    226 (47)49/    226 (48)50/
   226 (49)51/    226 (50)52/    226 (51)53/    226 (52)54/    226 (53)55/    22
6 (54)56/    226 (55)57/    226 (56)58/    226 (57)59/    226 (58)60/    226 (59
)61/    226 (60)62/    226 (61)63/    226 (62)64/    226 (63)65/    226 (64)66/
   226 (65)67/    226 (66)68/    226 (67)69/    226 (68)70/    226 (69)71/    22
6 (70)72/    226 (71)73/    226 (72)74/    226 (73)75/    226 (74)76/    226 (75
)77/    226 (76)78/    226 (77)79/    226 (78)80/    226 (79)81/    226 (80)82/
   226 (81)83/    226 (82)84/    226 (83)85/    226 (84)86/    226 (85)87/    22
6 (86)88/    226 (87)89/    226 (88)90/    226 (89)91/    226 (90)92/    226 (91
)93/    226 (92)94/    226 (93)95/    226 (94)96/    226 (95)97/    226 (96)98/
   226 (97)99/    226 (98)100/    226 (99)101/    226 (100)102/    226 (101)103/
    226 (102)104/    226 (103)105/    226 (104)106/    226 (105)107/    226 (106
)108/    226 (107)109/    226 (108)110/    226 (109)111/    226 (110)112/    226
 (111)113/    226 (112)114/    226 (113)115/    226 (114)116/    226 (115)117/
  226 (116)118/    226 (117)119/    226 (118)120/    226 (119)121/    226 (120)1
22/    226 (121)123/    226 (122)124/    226 (123)125/    226 (124)126/    226 (
125)127/    226 (126)128/    226 (127)129/    226 (128)130/    226 (129)131/
226 (130)132/    226 (131)133/    226 (132)134/    226 (133)135/    226 (134)136
/    226 (135)137/    226 (136)138/    226 (137)139/    226 (138)140/    226 (13
9)141/    226 (140)142/    226 (141)143/    226 (142)144/    226 (143)145/    22
6 (144)146/    226 (145)147/    226 (146)148/    226 (147)149/    226 (148)150/
   226 (149)151/    226 (150)152/    226 (151)153/    226 (152)154/    226 (153)
155/    226 (154)156/    226 (155)157/    226 (156)158/    226 (157)159/    226
(158)160/    226 (159)161/    226 (160)162/    226 (161)163/    226 (161)164/
 226 (162)165/    226 (163)166/    226 (164)167/    226 (165)168/    226 (166)16
9/    226 (167)170/    226 (168)171/    226 (169)172/    226 (170)173/    226 (1
71)174/    226 (172)175/    226 (173)176/    226 (174)177/    226 (174)178/    2
26 (175)179/    226 (176)180/    226 (177)181/    226 (178)182/    226 (179)183/
    226 (180)184/    226 (181)185/    226 (182)186/    226 (183)187/    226 (184
)188/    226 (185)189/    226 (186)190/    226 (187)191/    226 (188)192/    226
 (188)193/    226 (189)194/    226 (190)195/    226 (191)196/    226 (192)197/
  226 (193)198/    226 (193)199/    226 (194)200/    226 (195)201/    226 (196)2
02/    226 (197)203/    226 (198)204/    226 (199)205/    226 (200)206/    226 (
200)207/    226 (201)208/    226 (202)209/    226 (202)210/    226 (203)211/
226 (203)212/    226 (204)213/    226 (205)214/    226 (206)215/    226 (207)216
/    226 (207)217/    226 (208)218/    226 (209)219/    226 (209)220/    226 (21
0)221/    226 (211)222/    226 (212)223/    226 (213)224/    226 (214)225/    22
6 (215)226/    226 (216)fatal: 'remote' does not appear to be a git
repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>Note: the command will only work if a subtree is already setup.</p>

<p><strong>Update:</strong></p>

<p>As suspected by @AndrewC and myself, these numbers (x)y/ may or may not indicate assertions. I may be assuming they do but in fact may very well be part of the git subtree split command fired by git subtree push. Whatever they are, the problem/question is the same: why do they keep increasing and how can I limit this because it's going to become unsustainable soon. I can't wait for 1000 or more <em>whatever-these-are</em> to complete every time I push a subtree!</p>
",5,761963,0,0
23173499,2689570,4/19/2014 17:55,2,393,<git><git-subtree>,What is the output of git subtree push and how can I make it faster?,"<p>When executing git subtree push, the application outputs a series of numbers, which seem to continuously increase as the number of commits to the repo increase. The problem that this causes is that pushing subtree changes take a really long time since there have been so many commits to them. Is there any way of speeding this process up?</p>
",0,2689570,,
34411468,4295389,12/22/2015 8:30,8,8258,<git><git-subtree><git-tag>,checkout a specific tag with git subtree,"<p>Can I use tags in subtrees? Following a specific issue:</p>

<p>I have a git repository which includes an external repository as a subtree.
I could add this external repository and checkout a specific branch from this repo. With <code>git subtree pull --prefix=&lt;dir&gt; --squash &lt;remote&gt; &lt;branch&gt;</code> the update from the selected branch works well. </p>

<p>Now is it possible to checkout a specific tag? I couldn't find some information about tags in subtrees...</p>
",0,4295389,,
17887825,145080,7/26/2013 17:50,11,1183,<git><git-subtree>,"git subtree push and split adding ""-n<newline>"" to commit messages","<p>Whenever I split a subdirectory into a branch via <code>git subtree split</code> or (consequently?) when I push a subtree upstream, the commit messages in the new branch/upstream commits have ""-n"" and a newline prepended to them.</p>

<p>It's easiest to demonstrate with split:</p>

<pre><code>git init repo
cd repo
mkdir splitme
touch splitme/foo
git add splitme/
git commit -m 'Add foo'
git subtree split -P splitme -b splitme-only
</code></pre>

<p>From this, I get:</p>

<pre><code>$ git log master
commit 6d5164076bd88d1dab8963d91ec013372e58a444
Author: me
Date:   Fri Jul 26 12:22:27 2013 -0500

    Add foo
</code></pre>

<p>and </p>

<pre><code>$ git log splitme-only 
commit 6ce8124a0b5e52d4bba198144d2f3f664d7b19e7
Author: me
Date:   Fri Jul 26 12:22:27 2013 -0500

    -n
    Add foo
</code></pre>

<p>As you can see, the ""splitme-only"" branch has ""-n"" prepended to the commit message.
This is particularly bad as github collapses everything but the first line by default. Hence, you can't easily skim these commit messages on github.</p>

<p>I've tried using <code>--annotate</code> to maybe get something more readable, but that just appends something to the ""-n"" line.</p>

<p>The behavior is identical for <code>subtree push</code>.</p>

<p>Is there any way to prevent the ""-n"" line from being added? I could rebase the line out, but when I played around with that it broke subtrees merging. Am I doing something wrong?</p>

<p>Using git 1.8.3.4 on OS X 10.8.4.</p>
",0,145080,0,0
17911466,934439,7/28/2013 18:33,4,2927,<git><git-subtree>,How to push tags with git subtree?,"<p>I have successfully created a big repo made of a few subrepos with git-subtree, let's say Master contains Slave1 and Slave2.</p>

<p>Master/
  Slave1/
  Slave2/</p>

<p>Now I want to tag on Master and push each tag to the slave repos, how can I do it?</p>

<p>If I ""git push Slave2 --tags"" the entire tag is transferred, but I only want the files related to Slave2 to be transferred.</p>

<p>You can achieve it with git-subsplit, but it's honestly a bit unpractical and slow.</p>

<p>Any suggestion? </p>
",0,934439,0,0
34455905,3430986,12/24/2015 17:07,1,75,<git><git-submodules><git-subtree>,git subtree/submodule a file from a repository and update it,"<p>Let's say that I am keeping my zsh dotfiles in a repo:</p>

<pre><code>$  tree -a -F .
.
├── .zlogin
├── .zsh/
│   ├── some-dir/
│   │   └── another-script.zsh
│   └── some-script.zsh
└── .zshrc
</code></pre>

<p>and I am interesting in using a subdirectory from another project, for example directory <code>lib</code> from <a href=""https://github.com/robbyrussell/oh-my-zsh/tree/master/lib"" rel=""nofollow"">oh-my-zsh</a> and put it in my <code>.zsh</code> folder.</p>

<p>The ending result should be something like this:</p>

<pre><code>$  tree -a -F .
.
├── .zlogin
├── .zsh/
│   ├── lib/
│   │   ├── bzr.zsh
│   │   ├── clipboard.zsh
│   │   ├── compfix.zsh
│   │   ├── completion.zsh
│   │   ├── correction.zsh
│   │   ├── diagnostics.zsh
│   │   ├── directories.zsh
│   │   ├── functions.zsh
│   │   ├── git.zsh
│   │   ├── grep.zsh
│   │   ├── history.zsh
│   │   ├── key-bindings.zsh
│   │   ├── misc.zsh
│   │   ├── nvm.zsh
│   │   ├── prompt_info_functions.zsh
│   │   ├── spectrum.zsh
│   │   ├── termsupport.zsh
│   │   └── theme-and-appearance.zsh
│   ├── some-dir/
│   │   └── another-script.zsh
│   └── some-script.zsh
└── .zshrc
</code></pre>

<p>but I don't want to just download &amp; copy the directory, I want to be able to automatically update it without having to keep the whole oh-my-zsh repo on my project. How can I do that?</p>
",0,3430986,0,0
17950831,912144,7/30/2013 15:12,3,1633,<git><git-subtree>,git subtree merge ignoring --prefix,"<p>I'm having a weird error with git 1.8.3 on Windows. Using <code>git subtree</code>, I took a file to be shared between two projects and pushed it to another repository.</p>

<p>So, in repo1 I did this:</p>

<pre><code># push script
git subtree split --prefix=shared-dir --rejoin --branch split
git push shared-repo split:master
git branch -D split
</code></pre>

<p>In both repos, <code>shared-repo</code> refers to the remote containing the shared code. The shared code would reside in a directory with the same name.</p>

<p>In repo2 I did this:</p>

<pre><code># pull script
git fetch shared-repo
git subtree merge --prefix=shared-dir shared-repo/master
</code></pre>

<p>What I expect it to do is to fetch the shared file and put it in repo2 under the directory <code>./shared-dir/</code>. What happens is that the file is put in the root of the repository!</p>

<p>Moving the file to the correct folder, committing and executing something similar to the push script of repo1 results in a rejection in the push because it says that the push is not fast-forward. Running the pull script again says that everything is up-to-date.</p>

<p>I'm stomped and searching the internet didn't reveal anyone else having a similar problem. What's wrong and what can I do?</p>

<hr>

<p>Update: the same happens with git 1.7.9.5 on Ubuntu 12.04 with the <code>git-subtree</code> script taken from the git repository some two weeks ago. I also changed the command to say <code>--prefix=./shared-dir/</code> to no avail.</p>

<p>Interestingly, <code>git subtree</code> makes the <code>shared-dir</code> directory, but puts the shared file in the root directory instead of inside that directory.</p>
",0,912144,,
42658548,102181,3/7/2017 21:19,0,533,<git><github><github-pages><git-subtree>,cannot update github pages with subtree push,"<p>I'm having trouble pushing to my <code>gh-pages</code> branch.</p>

<p>I have an organization account, with both server and client code in it (though I think this should not really matter). So the structure is like so:</p>

<pre><code>my-org
   my-repo
      client
         src
      server
         src
</code></pre>

<p>This is how I am reproducing the issue:</p>

<ul>
<li>create a new directory on my machine, just to be sure everything is clean</li>
<li>clone the repo into it</li>
<li>build the static angular app - this creates a directory /client/dist</li>
</ul>

<p>My directory now contains this:</p>

<pre><code>my-repo
   client
      src
      dist &lt;-- this is what I want to go into gh-pages branch
   server
      src
</code></pre>

<p>The files in this directory are want to serve via github pages. So I run</p>

<pre><code>git subtree push --prefix client/dist origin gh-pages
</code></pre>

<p>This however outputs:</p>

<pre><code>git subtree push --prefix client/dist origin gh-pages
git push using:  origin gh-pages
To github.com:my-org/my-repo.git
 ! [rejected]        c7ac6936acbe0f5751755d60776074b98dae54d6 -&gt; gh-pages (non-fast-forward)
error: failed to push some refs to 'git@github.com:my-repo/my-repo.git'
hint: Updates were rejected because a pushed branch tip is behind its remote
hint: counterpart. Check out this branch and integrate the remote changes
hint: (e.g. 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>I really don't understand this message (how can anything be behing its remote counterpart in this situation?), and also following the advice (git pull) does nothing,</p>

<p>git pull on master and on gh-pages returns the expected:</p>

<pre><code>Already up-to-date.
</code></pre>

<p>What am I missing? (I'm on git version 2.10.1)</p>
",2,102181,,
61368333,634874,4/22/2020 15:01,1,107,<git><git-branch><git-subtree>,Recommendation on how to use git subtrees/branches to exclude directories when publishing new versions,"<p>I'm developing a C++ library that multiple customers will consume via git subtree.  The directory structure of my repo looks like this:</p>

<pre><code>foo/
├── extra
├── Makefile
├── src
└── tests
</code></pre>

<p>The customers will only be interested in consuming what's in the ""src"" directory, so I'd like for them to be able to subtree the Makefile as well as the ""src"" directory and exclude everything else.  I have a few ideas but I'm not sure if they're practical.  Here's my list so far:</p>

<ol>
<li><p>Maintain a customer branch where I would manually delete the unwanted files and directories every time I merge from master.</p></li>
<li><p>Have customers use git <a href=""https://github.com/newren/git-filter-repo"" rel=""nofollow noreferrer"">filter-repo</a> to delete the unwanted directories after a subtree add/pull</p></li>
<li><p>Split my repo into ""foo-testing"" and ""foo"" where foo would only have the customer visible files ""foo-testing"" would have the rest.</p></li>
</ol>

<p>Option 1 seems like the most straightforward but I'm worried that it may turn into a big headache.  Option 2 could work but it requires users to run commands post-subtree.  Finally, option 3 seems like it makes the most sense but it requires maintenance of 2 repos.  Has anyone here had similar requirements?  Any recommendations on the best way to deal with this that won't turn into a maintenance headache down the road?</p>
",2,634874,,
5760331,56786,4/22/2011 21:38,18,8660,<git><git-subtree>,"git-subtree is not retaining history so I cannot push subtree changes, how can I fix this/avoid this issue in the future?","<p>I've been using the git-subtree extension (<a href=""https://github.com/apenwarr/git-subtree"" rel=""noreferrer"">https://github.com/apenwarr/git-subtree</a>) to manage sub-projects within our main project.  It's doing exactly what I want other than the fact that it fails when I try to split out changes made to a sub-project from our main project.</p>

<p>e.g. earlier on I had done</p>

<pre><code>git subtree add -P Some/Sub/Dir --squash git@gitserver:lib.git master
</code></pre>

<p>to bring in the library code to Some/Sub/Dir in our main project.  Everything here went great so I then pushed my changes to our central main project bare git repo.  I then decide to make a change to my local version of the lib in Some/Sub/Dir, commit it, then split it out to push it back to the lib.git repo</p>

<pre><code>git subtree split -P Some/Sub/Dir -b some_branch
</code></pre>

<p>everything works as expected.  No longer needing the local copy of the repo I deleted it.</p>

<p>After cloning a new copy of the repo from our central repo I made some changes to the lib in Some/Sub/Dir and decided I wanted to split those changes out and push them back to the lib.git repository.  I attempt to use the same subtree split command as before, however this time I end up with the following output:</p>

<pre><code>1/      3 (0)
2/      3 (1)
3/      3 (1)
fatal: bad object d76a03f0ec7e20724bcfa253e6a03683211a7bb1
</code></pre>

<p>d76a03f0ec7e20724bcfa253e6a03683211a7bb1 comes from when I added the subtree:</p>

<pre><code>commit 43b3eb7d69d5eb64241eddb12e5bd74fd0215083
Author: Ian Bond &lt;ibond@onezero.com&gt;
Date:   Fri Apr 22 15:06:50 2011 -0400

    Squashed 'Subtree/librepoLib/' content from commit d76a03f

    git-subtree-dir: Subtree/librepoLib
    git-subtree-split: d76a03f0ec7e20724bcfa253e6a03683211a7bb1
</code></pre>

<p>which actually refers to a commit in the lib.git repo.</p>

<hr>

<p>What I've been able to piece together (and I'm a git noob so I may be wrong, overlooking something, or using incorrect terminology here), is that 'git subtree add --squash' will bring in the entire history from the remote lib.git repo into the current repo, squash it down into a separate commit, then add that commit into the working branch.  The lib.git commit history remains in the current repo, however they're dangling commits since they're not actually referenced other than through the text of the squash commit.  As long as those dangling commits remain, git-subtree can use them to perform splits, however since a push or pull doesn't contain dangling objects (or if I run a gc and fully prune dangling objects), those dangling commits are lost and git-subtree no longer has the necessary information to perform the split.</p>

<p>I've added <a href=""http://pastebin.com/0yV8thAk"" rel=""noreferrer"">a script</a> that will fully reproduce the issues I've been having.</p>

<hr>

<p>My questions are:</p>

<p><strong>1)</strong> What can I do to handle the existing situation where I now have subtrees that I want to merge back to their origin repo, but no longer have any sort of history that links them together.  My current thought is to do something like:</p>

<pre><code>git subtree split -P Some/Sub/Dir 43b3eb7^.. --ignore-joins -b splitBranch
</code></pre>

<p>to split out all of the history since the 'git subtree add' and merge it back into the origin repo (which thankfully has not had any changes since the add).  Is this the best way to go?  Any recommendations for how I should perform the merge?</p>

<p><strong>2)</strong> Is there anything I can do to make git-subtree work as expected?  I believe if I omit the --squash parameter on 'git subtree add' then everything will work, however that causes a bunch of unrelated history to be injected into my repo.  Is there some way to keep the needed commits around (preferably without keeping the entire history of the library around)?</p>
",3,56786,0,0
23588082,391986,5/11/2014 1:43,2,391,<git><git-subtree>,git subtree push lost my commit message,"<p>I have a git subtree <code>my-subtree</code> in my main repo <code>my-repo</code> that links to a remote repo.
I made a commit to files belonging to <code>my-subtree</code> in <code>my-repo</code>. </p>

<p>Then I wanted to push these changes back to the remote repo so I ran this command</p>

<pre><code>git subtree push --prefix=remote_repos/my-subtree --squash git@github.com:my-userame/my-subtree master
</code></pre>

<p>It pushed the changes fine but the git commit message was lost! And I got this message instead</p>

<pre><code>Merge commit '64cda2e4fd5e166e79cfc8e3c1edffa3fae40308'
</code></pre>

<p>How can I get my original git message into the remote repo when I perform the <code>git subtree push</code>? sintead of getting <code>Merge commit</code> message?</p>
",1,391986,0,0
42762393,7640269,3/13/2017 11:21,0,280,<git><git-subtree><git-filter-branch>,How to create a git release branch from a directory that is not checked in remote master,"<p>I am wondering how to achieve my goal, I want to create a new branch from the master directory, but the directory is autogenerated and it is not checked in.</p>

<p>I want my release branch contains only the final binaries. </p>

<p>Thiis the tree of my master:</p>

<pre><code>$ (master):
        |------&gt;FolderA
        |------&gt;FolderB
        |------&gt;bin  &lt;----- This is autogenerated directory not checkedin
</code></pre>

<p>What I want to achieve: new release branch has only bin folder</p>

<pre><code>$(release_branch):
        |------&gt;bin
</code></pre>

<p>I tried two methods to do but I'm not able to.</p>

<p><strong>Method 1</strong></p>

<p>I tried to used git subtree:</p>

<pre><code>$git subtree split --prefix=baking/bin/ -b split_libs
</code></pre>

<p>No new revisions were found. </p>

<p>I know why I got this error because my autogenerated directory is not checked-in.</p>

<p>Method 2:
Split the directory bin into new branch but I wasn't able to do it.</p>

<pre><code>$git filter-branch --prune-empty --subdirectory-filter baking/bin/ test_release
</code></pre>

<p><strong>Question:</strong>
Is it really possible to create a branch from the auto-generated directory which contains only libs?</p>
",4,7640269,,
23923212,179878,5/28/2014 22:57,14,1687,<git><version-control><open-source><git-subtree>,"Can I use `git subtree split` to maintain a ""fork"" of a project's subdirectory?","<p>In short, I want to ""fork"" a subdirectory of another project (not under my control) to the top-level of a new repository and make enhancements to the code in that subdirectory while preserving the ability to merge in changes from the subdirectory in the upstream project.</p>

<p>I've been reading up on this topic for a while now but can't find a sure answer for my situation. Most of the uses of <code>git subtree</code> break down into these cases:</p>

<ul>
<li>A subdirectory of a project is being spun off as its own separate project. The parent project is removing the subdirectory entirely and the new project lives its own life.</li>
<li>A maintainer of a parent project wants to allow maintenance of a subdirectory on its own terms and spins it off into its own repository, which is added back to the main project using <code>git subtree add</code></li>
</ul>

<p>These use cases don't apply to me: I'm not forking-and-forgetting, and I don't own both sides of this fork, so the <code>git subtree add</code> flow isn't applicable.</p>

<p>So let's say the original module lives in <code>contrib/foo</code> in the main project. My current idea is to:</p>

<ul>
<li>Use <code>git subtree split -P contrib/foo -b upstream_vx.y</code> to create a new history that ""hoists"" the subdirectory up to the top-level of a repository</li>
<li>Create a <code>master</code> branch from my project with enhancements from this point</li>
<li>Keep updating <code>upstream_vx.y</code> by running <code>git subtree split</code> occasionally</li>
<li>When I need a bug fix or whatnot from upstream, merge <code>upstream_vx.y</code> into my <code>master</code></li>
</ul>

<p>This doesn't feel ""git-like"" to me. Specifically, I'm basically creating a parallel history of the upstream project's subdirectory and maintaining my own ""hoisted"" branch for each major upstream branch (to say nothing of being able to reference upstream tags).</p>

<p>Is there a better way to go about this?</p>
",1,179878,0,0
61127751,136785,4/9/2020 18:23,1,463,<git><git-subtree><git-filter-branch>,Difference between git filter-branch subdirectory-filter & git subtree split -P,"<p>I'm trying to understand the difference between git subtree split &amp; git filter-branch for a particular use case.  This question is similar to <a href=""https://stackoverflow.com/questions/38735205/difference-between-git-filter-branch-and-git-subtree"">Difference between git filter branch and git subtree?</a>, but not exactly the same.</p>
<p>Given a repo with /sub/folder, execute these commands:</p>
<pre><code>git checkout master
git checkout -b subtree-branch-1
git filter-branch --subdirectory-filter sub/folder
</code></pre>
<p>You end up with a branch that has just the commits that apply to /sub/folder.  Now let's start again:</p>
<pre><code>git checkout master
git subtree split -P sub/folder -b subtree-branch-2
git checkout subtree-branch-2
</code></pre>
<p>To me, it looks like I end up with the exact same.  TortoiseGit's Revision Graph looks the same:</p>
<p><a href=""https://i.stack.imgur.com/1b05l.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1b05l.png"" alt=""screenshot"" /></a></p>
<p>...the logs for these two branches look the same, &amp; the working directory looks the same.  I've found a number of questions/posts that try to explain the difference between filter-branch &amp; subtree split, but based on the above, I'm just not seeing it.  And if they do really yield identical results, what was the point of introducing subtree split -P? Is it basically just an alias for filter-branch --subdirectory-filter?</p>
",5,136785,,
23937436,880367,5/29/2014 15:49,64,19783,<git><git-subtree>,Add subdirectory of remote repo with git-subtree,"<p>Is there a way to add a subdirectory of a remote repository into a subdirectory of my repository with git-subtree?</p>

<p>Suppose I have this <strong>main</strong> repository:</p>

<pre><code>/
    dir1
    dir2
</code></pre>

<p>And this <strong>library</strong> repository:</p>

<pre><code>/
    libdir
        some-file
    some-file-to-be-ignored
</code></pre>

<p>I want to import <strong>library</strong>/libdir into <strong>main</strong>/dir1 so that it looks like this:</p>

<pre><code>/
    dir1
        some-file
    dir2
</code></pre>

<p>Using git-subtree, I can specify to import into <em>dir1</em> with the <code>--prefix</code> argument, but can I also specify to only take the contents of a specific directory in the subtree?</p>

<p>The reason for using git-subtree is that I can later synchronize the two repositories.</p>
",0,880367,0,0
42926185,4676712,3/21/2017 11:44,4,2432,<git><git-subtree>,"git subtree: split sub-project, work on it, and merge back","<p>I was trying to make a ""sub-project"" out of a directory of files in my ""super-project"" to work with other people, but I have been struggling to make it work in git subtree.
Ideally, other people can work on the sub-project, then I pull from the upstream changes, and push my updates.</p>

<p>Here is a MWE for this purpose.
I create a ""super-project"" which contains a ""sub-project"" then <code>git subtree</code> the sub-project to a remote repo ""sub-project"":</p>

<pre><code>$ mkdir subtree-test &amp;&amp; cd subtree-test

# create super-project
$ mkdir super-project &amp;&amp; git init super-project &amp;&amp; cd super-project
$ echo ""foobar"" &gt;&gt; super.txt
$ git add super.txt &amp;&amp; git commit -m ""add file""

# create sub-project
$ mkdir sub-project
$ echo ""foobar"" &gt;&gt; sub-project/sub1.txt
$ git add sub-project/sub1.txt &amp;&amp; git commit -m ""add file""

# prepare a bare subtree repo named ""sub""
$ git init --bare ../sub-project
$ git subtree push --prefix=sub-project/ ../sub-project master
</code></pre>

<p>Then clone ""sub-project"" to ""sub-live"", do some work, and push upstream:</p>

<pre><code>$ cd ../
$ git clone sub-project sub-live
$ cd sub-live
$ echo ""foobar"" &gt;&gt; sub2.txt
$ git add sub2.txt &amp;&amp; git commit -m ""add file""
$ git push
</code></pre>

<p>Then attempt to merge back to super-project:</p>

<pre><code>$ cd ../super-project
$ git subtree pull --prefix=sub-project/ ../sub-project master
</code></pre>

<p>and there is the error:</p>

<pre><code>warning: no common commits
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 5 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (5/5), done.
From ../sub-project
* branch            master     -&gt; FETCH_HEAD
fatal: refusing to merge unrelated histories
</code></pre>

<p>I have read articles regarding <code>git subtree</code> usage.
However in most situations, the sub-project is added to the super-project later.
In my case, the sub-project originates from the super-project, which might have created these complications.</p>

<p>What have I done wrong? And how should I proceed from here?</p>
",0,4676712,0,0
24252355,2525699,6/16/2014 21:16,6,704,<git><deployment><version-control><yeoman><git-subtree>,Why is git subtree missing commits?,"<p>I just ran <code>git subtree split</code> on my master branch but the subtree(<code>dist</code> branch) is missing the last two commits that are on the <code>master</code> branch. I'm not sure what to do here. I haven't run into this before. It's always worked without issue.</p>

<p>Here's what my github network graph looks like(excluding <code>dist</code>):</p>

<p><img src=""https://i.stack.imgur.com/NHnAC.png"" alt=""github network graph""></p>

<p>From the master branch I ran <code>git subtree split -P dist -b dist</code>.</p>

<p>If I run <code>git log</code> from the <code>dist</code> branch it shows the most recent commit is <code>6d1620a</code>. Where is <code>17c1f31</code> and <code>33dfc67</code>?</p>

<p>Anyone know what's going on here?</p>

<hr>

<h2>More Details Specific to my Scenario</h2>

<p>I am using the deployment method used by Yeoman generated projects. Basically meaning that I have an overall project folder within which there is a <code>dev</code>(or <code>app</code>) directory where all development is done and a <code>dist</code> directory which is where the project is built to(via gulp build process). So to deploy I just split the <code>dist</code> directory off into it's own branch and push that to the live server.</p>

<p>Which looks something like this:</p>

<pre><code>gulp
git checkout master
git merge --no-ff dev
git subtree split -P dist -b dist
git push
</code></pre>

<p>Alternately <code>git subtree push -P dist origin dist</code> also works.</p>
",0,2525699,,
61633054,3292567,5/6/2020 10:36,0,143,<git><gerrit><git-push><git-subtree>,Git push to main project repo throws an error after git subtree add,"<p>Trying to use git subtree to share common library files across multiple projects. Here's the problem I keep encountering.</p>

<p>1) Add subtree so ""jquery_treetable"" subdirectory of my project.</p>

<pre><code>$ git subtree add -P jquery_treetable ssh://epedgov@gerrit.ericsson.se:29418/global_share/3pp/foss/jquery_treetable master --squash
</code></pre>

<p>gitk looks like below after subtree add</p>

<p><a href=""https://i.stack.imgur.com/mg9R9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mg9R9.png"" alt=""gitk""></a></p>

<p>2) push updates to main project repo(Gerrit)</p>

<pre><code>$ git push origin HEAD:refs/for/master
remote: Resolving deltas: 100% (1/1)
remote: Processing changes: refs: 1, done    
remote: ERROR: [36fb8f5] missing Change-Id in commit message footer
remote: 
remote: Hint: To automatically insert Change-Id, install the hook:
remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 epedgov@gerrit.ericsson.se:hooks/commit-msg ${gitdir}/hooks/
remote: And then amend the commit:
remote:   git commit --amend
remote: 
To https://gerrit.ericsson.se/a/lte/tools/mkdoc
 ! [remote rejected] HEAD -&gt; refs/for/master ([36fb8f5] missing Change-Id in commit message footer)
</code></pre>

<p>3) git log looks like below</p>

<p><a href=""https://i.stack.imgur.com/QHKbq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QHKbq.png"" alt=""enter image description here""></a></p>

<p>4) I think, I get this rejection because of change-id is missing in 2nd commit in git log (Squashed one). But how to add Change-id for this Squashed subtree. </p>
",2,3292567,,
6403715,600500,6/19/2011 16:45,24,6356,<git><git-submodules><git-filter-branch><git-subtree>,"git: How to split off library from project? filter-branch, subtree?","<p>So, I've a bigger (closed source) project, and in the context of this project created a library which could also be useful elsewhere, I think.</p>

<p>I now want to split off the library in its own project, which could go as open source on github or similar. Of course, the library (and its history there) should contain no traces of our project.</p>

<p>git-subtree seems like a solution here, but it does not completely fit.</p>

<p>My directory layout is something like this (since it is a Java project):</p>

<ul>
<li>fencing-game  <em>(git workdir)</em>
<ul>
<li>src
<ul>
<li>de
<ul>
<li>fencing_game
<ul>
<li><strong>transport</strong>   <em>(my library)</em>
<ul>
<li><strong>protocol</strong>  <em>(part of the library)</em></li>
<li>fencing <em>(part of the main project interfacing with the library)</em></li>
<li>client <em>(part of the main project interfacing with the library)</em></li>
<li>server <em>(part of the main project interfacing with the library)</em></li>
</ul></li>
<li>client <em>(part of the main project)</em></li>
<li>server <em>(part of the main project)</em></li>
<li>...  <em>(part of the main project)</em></li>
</ul></li>
</ul></li>
</ul></li>
<li><em>other files and directories (build system, website and such - part of the main project)</em></li>
</ul></li>
</ul>

<p>After the split, I want the library's directory layout look like this (including any files directly in the bold directories):</p>

<ul>
<li>my-library <em>(name to be determined)</em>
<ul>
<li>src
<ul>
<li>de
<ul>
<li>fencing_game
<ul>
<li><strong>transport</strong>   <em>(my library)</em>
<ul>
<li><strong>protocol</strong>  <em>(part of the library)</em></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p><strong>The history should also contain just the part of the main project's history which touches this part of the repository.</strong></p>

<p>A first look showed me <code>git-subtree split --prefix=src/de/fencing_ame/transport</code>, but this will</p>

<ol>
<li>give me a tree rooted in <code>transport</code> (which will not compile) and</li>
<li>include the <code>transport/client</code>, <code>transport/server</code> and <code>transport/fencing</code> directories.</li>
</ol>

<p>The first point could be mitigated by using <code>git subtree add --prefix=src/de/fencing_ame/transport &lt;commit&gt;</code> on the receiving side, but I don't think git-subtree can do much against exporting also these subdirectories. (The idea really is to just be able to share the complete tree here).</p>

<p>Do I have to use <code>git filter-branch</code> here?</p>

<p>After the split, I want to be able to <em>import back</em> the library in my main project, either using git-subtree or git-submodule, in a separate subdirectory rather than where it is now. I imagine the layout this way </p>

<p><ul>
<li>fencing-game  <em>(git workdir)</em>
<ul>
<li>src
<ul>
<li>de
<ul>
<li>fencing_game
<ul>
<li>transport   <em>(empty)</em>
<ul>
<li>fencing <em>(part of the main project interfacing with the library)</em></li>
<li>client <em>(part of the main project interfacing with the library)</em></li>
<li>server <em>(part of the main project interfacing with the library)</em></li>
</ul></li>
<li>client <em>(part of the main project)</em></li>
<li>server <em>(part of the main project)</em></li>
<li>...  <em>(part of the main project)</em></li>
</ul></li>
</ul></li>
</ul></li>
<li>my-library
<ul>
<li>src
<ul>
<li>de
<ul>
<li>fencing_game
<ul>
<li><strong>transport</strong>   <em>(my library)</em>
<ul>
<li><strong>protocol</strong>  <em>(part of the library)</em></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li><em>other files and directories (build system, website and such - part of the main project)</em></li>
</ul></li>
</ul>
<strong>What would be the most pain-free way to do this?</strong> Are there other tools than git-subtree and git-filter-branch for this goal?</p>
",2,600500,0,0
62488984,9644179,6/20/2020 17:02,0,167,<git><github><git-submodules><git-subtree><git-worktree>,How to create different github repos if I have one large folder with many files in it,"<p>I have a folder called coursework on my machine with many files like: file 1, file 2, file 3, file 4, file 5, and file 6. On Github, I want to create repo1 with ONLY file 1, file 2 and file 3. Also, I want to create repo 2 with ONLY files file 4, file 5 and file 6 from that same coursework folder.</p>
<p>Someone recommended me to use submodules but I am not entirely sure how to use them in this case. Is there an easier approach to accomplish this task? Thanks!</p>
",7,9644179,0,0
24829343,3853600,7/18/2014 16:00,0,225,<git><git-subtree>,Can I clone a git repos with subtrees and re-link the subtrees without knowledge of the original linked branch or tag?,"<h1>The Problem</h1>

<p>I'm migrating a legacy CVS repo into Git, and have run into a problem with our planned strategy involving subtrees.</p>

<p>We're developing several different products that, in some cases, share a common library that we're also developing. I'm going to put each product in its own git repo, since they go through their own independent development lifecycles.</p>

<p>For using the common library, I was planning on having that in a separate repo as well, and then pulling the library into the products that need them using subtrees. Our problem is that different products will pull in different versions of the library.</p>

<p>I can link the subtree to a specific tag or branch, no problem, but then how do other developers know what tag/branch I used when they clone the repo and re-link the subtree?</p>

<h1>The Example</h1>

<p>We're developing the Guncho product in the Guncho repo.</p>

<p>I link it to the Filfre library against the tag <code>v2.1</code> using subtree.</p>

<p><code>git subtree add --prefix=filfre ssh://stephen@gitserver:filfre v2.1</code></p>

<p>Then my co-worker Jane clones the Guncho repo to help out on it.</p>

<p><code>git clone ssh://jane@gitserver:guncho</code></p>

<p>Is there any way she can know to re-link the <code>filfre</code> subtree to the <code>v2.1</code> tag short of me telling her?</p>
",0,3853600,,
25103074,917938,8/3/2014 8:51,10,2730,<git><git-subtree>,git subtree add does not accept pathspec,"<p>I'm trying to add a vim plugin in my settings repo as a git subtree. No matter where I try to pull the subtree to, git replies with an <code>error: pathspec</code></p>

<p>I'm using the command below while at repos root directory:</p>

<pre><code>git subtree add --prefix .vim/bundle/powerline powerline master --squash
</code></pre>

<p>which results in output:</p>

<pre><code>git fetch powerline master
From git://github.com/Lokaltog/powerline
 * branch            master     -&gt; FETCH_HEAD
error: pathspec '.vim/bundle/powerline' did not match any file(s) known to git.
</code></pre>

<p>I'm using git version 2.0.3</p>
",4,917938,0,0
7140321,236564,8/21/2011 18:48,6,1274,<python><git><git-submodules><buildout><git-subtree>,How to structure a python projects with shared sub apps using git and buidout without symbolic links,"<p>I have multiple <strong>projects</strong> that shares child <strong>apps</strong> with other <strong>projects</strong>.
When working within the <strong>project</strong> directory I want to be able to make changes to the <strong>app</strong>, update it, and pull those updates into the second <strong>project</strong>.</p>

<p>Requirement:</p>

<ul>
<li>No use of <strong><em>symbolic links</em></strong> (my IDE's debugger doesn't work well with them)</li>
<li>No compiling/rerun a script. I would like to make changes to the <strong>app</strong> without having to rerun a script/buildout. </li>
<li>Apps must be within the project folder.</li>
</ul>

<p>Here's the structure:</p>

<pre><code>app_one (git repo)
  |-- app_one (actual app uses by projects)
  |   +-- models.py
  |-- README.md
  +-- setup.py

project_one  (git repo)
  |-- project_one
  |   |-- apps
  |   |   |-- app_one
  |   |   |   +-- models.py
  |   |   | -- app_two
  |-- setup.cfg
  +-- setup.py

project_two  (git repo)
  |-- project_two
  |   |-- apps
  |   |   |-- app_one (same app as project_one)
  |   |   |   +-- models.py
  |   |   | -- app_two
  |-- setup.cfg
  +-- setup.py
</code></pre>

<p>Currently I'm using git-submodules for this; the downside is there is no way to link to a subfolder of a repo. I recently read about subtree, would this work better?</p>

<p>Ideally I would like to use <strong>buildout</strong>, but I haven't found a good way to accomplish this without the use of symbolic links. If there's a way to to do this please let me know. </p>

<p>Any suggestions would be greatly appreciated.</p>
",0,236564,0,0
36051686,2659145,3/17/2016 4:27,2,383,<git><merge><git-subtree>,git merge from subtree folder in master to branch root,"<p>Actually my question is:<br>
<strong>Is there a way to merge from folder in <em>master</em> to root in <em>branch</em>?</strong></p>

<p><strong>What i want is:</strong></p>

<ol>
<li>read-tree from <em>branch</em> to folder in <em>master</em> branch</li>
<li>make some changes (add files in subtree folder) under <em>master</em> branch</li>
<li>merge theese changes (added files) from subtree folder in <em>master</em> to <em>branch</em> root</li>
</ol>

<p>I've tried this tutorial: <a href=""https://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging"" rel=""nofollow"">https://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging</a><br>
But results are unexpected:</p>

<p>I did:</p>

<pre><code>    $ git init
    $ touch fileInMaster
    $ git add -A
    $ git commit --all -m 'initial commit'
    $ git checkout master
    $ git remote add rack_remote https://github.com/schacon/rack.git
    $ git fetch rack_remote
    $ git checkout -b rack_branch rack_remote/master
    $ git checkout master
    $ git read-tree --prefix=rack/ -u rack_branch
    $ git add -A
    $ git commit --all -m 'After read-tree to rack folder'
    $ echo 0 &gt; rack/fileInRack
    $ git add -A
    $ git commit --all -m 'Add fileInRack file to rack folder'
    $ git merge --squash -s subtree --no-commit rack_branch
</code></pre>

<p>What i'm expect is:</p>

<ul>
<li>New file 'fileInRack' in <em>master</em> branch in <em>rack</em> folder</li>
<li>New file 'fileInRack' in root of <em>rack_branch</em></li>
</ul>

<p>But after subtree merging git notice me:</p>

<blockquote>
  <p><strong>Deleting rack/fileInRack</strong><br>
  Squash commit -- not updating HEAD<br>
  Automatic merge went well; stopped before committing as requested</p>
</blockquote>

<p>But i need adding, not deleting.  </p>

<p>So, what am i doing wrong?<br>
Is there other way to merge from folder in <em>master</em> to root in <em>branch</em>?</p>
",0,2659145,0,0
36175383,473368,3/23/2016 10:18,2,365,<git><github><git-submodules><github-pages><git-subtree>,Can a github repo be made to always refer to the latest version of its submodule repos?,"<p>I'm making a webapp that does version control of files using git and it has the option of being hosted on GitHub Pages with some missing features (features not supported by a git-only backend).</p>

<p>Now the ""app"" itself is separated from the users content, the user content is version controlled but the app is not (or at least doesn't need to be for the functionality of the app itself), but both need to be uploaded to github pages and to isolate the content's version control, and to have different permissions for the app vs content, I host the app itself in gh-pages and the content as a git <strong>submodule</strong> inside the gh-pages repo.</p>

<p>This works, the app/site is built and gets exposed on <code>username.github.io/sitename/</code> with everything accessible, except there is a catch.</p>

<p>The catch is that for some reason <strong>the submodule content repo is referred to at a specific commit</strong> instead of just the latest version of the repo, which means I can't just update the content repo and have everything work but also have to update the app repo to refer to the latest version of the submodule, on <em>every content repo commit</em>.</p>

<p>Which gets a bit tedious since I almost never actually have to update the app repo unless there is a new version of the app but I update the content repo daily, as well as the fact that the content repo should be editable by many people but the app repo by few.</p>

<p>So my question is:</p>

<ul>
<li>How can I define a submodule to always refer to the latest commit of a repo?</li>
<li>How can I trigger a build of the site by only updating the submodule repo?</li>
<li>How can the gh-pages repo always reflect the latest version of its submodules, so that the gh-pages site is always serving the latest content?</li>
</ul>

<hr>

<ul>
<li>Example repos:

<ul>
<li><a href=""https://github.com/01AutoMonkey/app"" rel=""nofollow"">https://github.com/01AutoMonkey/app</a></li>
<li><a href=""https://github.com/01AutoMonkey/app-content"" rel=""nofollow"">https://github.com/01AutoMonkey/app-content</a></li>
<li>Combined running at: <a href=""http://01automonkey.github.io/app/"" rel=""nofollow"">http://01automonkey.github.io/app/</a></li>
</ul></li>
<li>Git Submodules:

<ul>
<li><a href=""https://git-scm.com/docs/git-submodule"" rel=""nofollow"">https://git-scm.com/docs/git-submodule</a></li>
<li><a href=""https://git-scm.com/book/en/v2/Git-Tools-Submodules"" rel=""nofollow"">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></li>
<li><a href=""https://help.github.com/articles/using-submodules-with-pages/"" rel=""nofollow"">https://help.github.com/articles/using-submodules-with-pages/</a></li>
</ul></li>
</ul>

<h2>How I create the submodule</h2>

<pre><code># Create app master + app-content master, then:
git init
git remote add origin https://github.com/01AutoMonkey/app.git
git submodule add https://github.com/01AutoMonkey/app-content ./wiki
cd wiki
git remote add origin https://github.com/01AutoMonkey/app-content.git
# And then push to both repos and create a gh-pages branch.
# The site is now running but if I update app-content the update isn't reflected on the site until I refer to the new commit in the app repo.
</code></pre>
",0,473368,0,0
52266672,953496,9/10/2018 23:13,2,1488,<git><visual-studio><git-subtree>,How to properly interpret git subtrees in visual studio?,"<p>I am able to add subtrees to my visual studio project via command line, but when I do it requires me to add a prefix. When I do this it adds a sub directory in the root directory. When I add the subtree's projects to my solution, all the references are not available because the packages are in the root directory/packages. If I update the paths, the paths are now messed up in the original subtree repo. How do you properly set up two projects with one being reference via subtrees?</p>
",0,953496,0,0
63117662,1135950,7/27/2020 14:38,1,24,<git><git-submodules><git-subtree>,git subtree of repository that uses git submodules,"<p>Is it possible or recommended to add as a git subtree, a project that has .gitmodule dependencies(It was meant to be used with git submodule)?</p>
<p>If yes, is there a command to download recursively when adding git subtree?</p>
<p>This is different than the git submodule project nested in another git  submodule project because it's a git submodule project nested in a git subtree project.</p>
",3,1135950,,
52305049,1223975,9/13/2018 0:23,1,130,<git><git-subtree>,git subtree command adds files to parent tree,"<p>I ran this command:</p>

<pre><code>git subtree add --prefix=config --squash git@github.com:user/repo.git master
</code></pre>

<p>in the root folder I committed changes and pushed to remote.
The subtree files in the config folder were included.</p>

<p>Should I .gitignore the config directory? Why does it include the subtree files in parent git repo?</p>
",0,1223975,0,0
36287021,4654583,3/29/2016 14:18,0,210,<git><git-subtree>,Squash on default when using git subtree,"<p>I'm often running </p>

<pre><code>git subtree pull -P shared shared master
</code></pre>

<p>but I usually forget to put <code>--squash</code> at the end which ends up duplicating most of my git history. Is it possible to make git use that by default?</p>

<p>Thanks!</p>
",0,4654583,,
7011113,472245,8/10/2011 12:57,5,5541,<git><git-push><git-subtree>,git push a sub-directory into another main repo,"<p>I have a big main project with several directories as <strong>subtrees</strong>.</p>

<p>I want to <strong>push</strong> the changes in one specific subtree to its origin, which is a separate repository.</p>

<p>The trouble seems to be, that the current <strong>subtree</strong> I want to push does not originally came from the repository I want to push into. It came from a different repo, via the <em>subtree guides</em> I found by googling. It just looks very similar.</p>

<p>Big project layout, where <code>important_subtree</code> is the thing I am worried about.</p>

<pre><code>~/devel/bigproject
  .git/
  some_subtree/
  other_subtree/
  important_subtree/
    abc.txt
    efg.txt   &lt;--- new version
    hij.txt
</code></pre>

<p>And the <code>important_subtree</code> is ""strongly related"" to that repo:</p>

<pre><code>~/devel/important
   .git/
    abc.txt
    efg.txt   &lt;--- old version
    hij.txt
</code></pre>

<p>Now <code>~/devel/bigproject/important_subtree/efg.txt</code> has changed and I want to <strong>push the important_subtree</strong> onto the repo <code>~/devel/important</code>. So afterwards <code>~/devel/important/efg.txt</code> also has the changes.</p>

<p>The only thing I managed to do is to push push <em>everything</em> in <em>bigproject</em> into <em>important</em>, which is obviously not what I want. Only the changes in the subtree should be pushed.</p>
",0,472245,,
25773967,761963,9/10/2014 19:54,6,1694,<git><git-branch><git-subtree>,Which remote branch is my git subtree tracking?,"<p>Let's say there was a remote with a master, as well as a dev branch, and I added it into a subtree:</p>

<pre><code>$ git remote add rem [URL]
$ git fetch rem
$ git subtree add -P=./sub rem/dev
</code></pre>

<p>Now every time I run <code>git subtree pull -P sub</code>, the branch rem/dev will be fetched and merged into sub. Ok</p>

<p>But lets say later on <strong>I forgot</strong> whether I added from the master or dev branch. Other than inferring by comparing git logs, is there a way git will tell me which branch of rem is the subtree in sub/ tracking?</p>

<p>Subtrees are tricky...</p>
",5,761963,0,0
26107798,633318,9/29/2014 19:54,30,37267,<git><git-subtree>,How to remove previously added git subtree and its history,"<p>Many moons ago I added a subtree to my <code>git</code> repository. This subtree included several folders and files. I added the subtree instead of creating a submodule (as recommended). Now I realize I only want one of the files in the subtree and none of the rest. Even worse, when others <code>clone</code> my repository, what they get is not what is expected—there is some conflict with the subtree and the other code that I've created.</p>

<p>I can get ride of the files/folders with </p>

<pre><code>git rm subtree–folder1 subtree_folder2 subtree_files.*
</code></pre>

<p>however, I'm still left with a lengthy commit history from the subtree. </p>

<p>I've done a fair amount of development since I originally added the subtree and can't lose the commit history that I've generated.</p>

<p>In short this is what I would like:</p>

<ol>
<li>Remove all the subtree files/folders.</li>
<li>Forget the history of all the subtree commits.</li>
<li>Left with only my code and my history.</li>
</ol>

<p>Is this possible?</p>

<p>PS. One possible complication is that I moved the single header file I wanted to keep from the subtree to some folder in my code. I hope this is not what is keeping me from forgetting the subtree history. </p>

<h1>An Attempt</h1>

<p>After a fresh checkout from the remote server I have the following:</p>

<pre><code>$ ls
.git             CMakeLists.txt   Read.cpp         logging.conf
.gitignore       ENDF6            TestData         src
.sparse-checkout LICENCE          doc              test
.travis.yml      README.md        include          tools
</code></pre>

<p>Where <code>.gitignore</code> only has:
    build/
    debug/</p>

<p>When I try the command as suggested I don't get a very happy response:</p>

<pre><code>$ git filter-branch --index-filter 'git rm --cached -rf test tools src doc LICENCE README.md .travis.yml' HEAD
Rewrite 2fec85e41e40ae18efd1b130f55b14166a422c7f (1/1701)fatal: pathspec 'test' did not match any files
index filter failed: git rm --cached -rf test tools src doc LICENCE README.md .travis.yml
</code></pre>

<p>I'm not sure why it says it has a problem with <code>test</code> when it is clearly there. I'm baffled.</p>
",9,633318,0,0
26361651,1188008,10/14/2014 13:07,1,56,<git><repository><git-subtree>,Can a folder be part of two git repositories?,"<p>I started working on a project and I realized that part of the project would be a great library to put up on Bitbucket/Github for others to use. The problem is that the entire project is under a personal repository so I'm not sure how I would make part of my personal repository a new repository that points to the public repository so I can make the change in one place and have it update both repositories. Please note that the public repository is only <em>part</em> of the personal repository, so I cannot simply add the public repository as a remote because that will push the entire project to the public repository, which I don't want. </p>

<p>Any help/ideas/tips would be appreciated. I've tried using git subtrees before, but have always gotten confused by the intent of subtrees and also how to use them properly. If this scenario is possible using the subtree technique, I would love to know. Thanks.</p>
",1,1188008,,
8672095,106553,12/29/2011 18:52,18,4076,<git><subtree><git-subtree>,"git reports merge conflict with no changes, empty lines (using git-subtree)","<p>I'm testing the use of <a href=""https://github.com/apenwarr/git-subtree"" rel=""noreferrer"">git-subtree</a> to merge a library repo into a bigger project. It seems great in principle. Sometimes when I do a ""git subtree pull"" I get merge conflicts like this:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
An inserted line from the lib repo
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4d348903449ebb584ab224cb34c6038fbf6b352d
</code></pre>

<p>That's for a change that was made in the library repo, merging into a file that has not been modified locally. Or another example, where I added a line in the local project repo, but in a file that is part of the subtree being merged:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Another inserted line
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 4d348903449ebb584ab224cb34c6038fbf6b352d
</code></pre>

<p>Why would git report these as merge conflicts, but the region reported as the conflict is empty? Any way to prevent it?</p>

<p>These are easy enough to resolve, but it messes up the git-subtree workflow</p>
",2,106553,0,0
26502970,2058954,10/22/2014 8:13,27,19306,<git><github><merge><git-branch><git-subtree>,"Merge multiple git repositories into one, keeping branches history","<p>I have four separate projects. They have their own git repository. and the same name of branches for all projects.</p>

<pre><code> /project/
 /project/projA/
 /project/projA/.git/
 /project/projB/
 /project/projB/.git/
 /project/projC/
 /project/projC/.git/
 /project/projD/
 /project/projD/.git/
</code></pre>

<p>All git repositories have the same name of branches, and of course their own master branch.</p>

<h1>Question</h1>

<p>I would like to merge all projects into one like so:</p>

<pre><code>  /Project/.git/
  /project/projA/
  /project/projB/
  /project/projC/
  /project/projD/
</code></pre>

<h2>But</h2>

<p>i want to keep the history of all branches. </p>

<p>ps -> i have the same name of branches for all repo.
for exemple: a branche name used for all four project: V6-004</p>

<h2>Details</h2>

<p>I tried <strong><em>submodule</em></strong> and <strong><em>subtree</em></strong> but the both doesn't solve the issue.</p>

<p>I tried also this.</p>

<pre><code>  $ mkdir new_parent_project
  $ cd new_parent_project
  $ git init
  # Now we need to create the initial commit. This is essential.
  $ touch README.md
  $ git add README.md
  $ git commit -am ""initial commit""
</code></pre>

<p>after</p>

<pre><code>  # merge project ProjA into subdirectory ProjA
  $ git remote add -f ProjA http://GitUrl
  $ git merge -s ours --no-commit ProjA/V6-006
  $ git read-tree --prefix=ProjA/ -u ProjA/V6-006
  $ git commit -m ""merging ProjA into subdir: ProjA""
</code></pre>

<p>after</p>

<pre><code>  # merge project ProjB into subdirectory ProjB 
  $ git remote add -f ProjB http://GitUrl
  $ git merge -s ours --no-commit ProjB/V6-006
  $ git read-tree --prefix=ProjB/ -u ProjB/V6-006
  $ git commit -m ""merging ProjB into subdir: ProjB""
</code></pre>

<h2>but</h2>

<p>the projects are merged but i have only the history of V6-006. but i don't have history for the others branches.</p>
",6,2058954,0,0
26304941,324284,10/10/2014 17:29,20,1913,<git><git-subtree>,Follow renames when performing git subtree split,"<p>I have a number of subdirectories that I want to pull out into a separate repo. In order to extract these with a single command I move (rename) them to a single subdirectory inside the root.</p>

<p>I then run: <code>git subtree split -P my_new_subdir -b newbranch</code></p>

<p>If I then checkout this new branch and run <code>git log --follow someoldfile</code> it only shows me the log entries pertaining to the move into the temporary subdirectory. I want to carry over the full history of those files.</p>

<p><strong><em>Is there a way to preserve full history, including renames when doing a subtree split? Is there another means of achieving the desired outcome?</em></strong> </p>

<p>I have considered using filter-branch on a clone of the repo but I know that will be very slow.</p>
",2,324284,0,0
37524946,6400103,5/30/2016 11:47,1,87,<git><git-subtree>,Moving part of git repo into new repo with reference to the old one,"<p>I have a repository which contains both my main project and an optional module which should really be in a repo of its own.  What I'd like to do is move this module into its own repo, ideally preserving its history, and have a reference back to the main repository so the latest code can still be pulled into it.</p>

<p>To illustrate, my repo looks like something this</p>

<pre><code>Main repo
├── Core code
├── Mandatory module
├── Optional module dependencies
└── Optional module core
</code></pre>

<p>And I'd like it to look like this</p>

<pre><code>Main repo
├── Core code
└── Mandatory module

New repo
├── Optional module dependencies
├── Optional module core
└── &lt;reference to Main repo&gt;
</code></pre>

<p>I've managed to gather that git subtree seems to be the way to go, but the guides and examples I've found instruct how to move a project out into a new repo, and have a reference to it still exist in the main one, which isn't quite what I'm trying to do.</p>
",3,6400103,,
37775092,4645653,6/12/2016 13:59,6,3450,<git><git-subtree>,How to use git subtree to add local repo?,"<p>Say I have a dir that is already a git repo ""sub"", now I want it to be a subtree of my newly created super directory ""sup"".</p>

<p>I've searched the document, but all the tutorials are about adding a remote repo or split from the existing commits. How can I add the existed git repo to the main git repo?</p>

<p>Using <code>git subtree add --prefix=sub sub</code> would give the warning sub already exists.</p>
",0,4645653,0,0
37821564,18149,6/14/2016 20:31,2,21,<git><git-subtree>,Commiting changes to the sub-tree repo rather than the local one in git?,"<p>After one has created sub-tree repos in git, and re-checked out the code from all of the repos again, how do they do a commit and make sure that the changes get committed to their remote, but still keep them in sync with the local project?</p>
",0,18149,0,0
9248356,1204972,2/12/2012 11:14,6,1743,<git><git-subtree>,Split Up Folders in a git repository into separate branches,"<p>I have finally migrated our CVS repository to git. Unfortunately we didn't use branches in CVS but different versions/branches were separated into different subdirectories.</p>

<p>I.E. we have the following directory structure:</p>

<pre><code>/root
    /lib
    /tools
    /src
        /v1.0
        /v2.0
        /v3.5
</code></pre>

<p>Is there a way to separate the 3 versions in the src subdirectory into separate branches instead of keeping the directory for each version?</p>

<p>I have found the same question here on Stack Overflow <a href=""https://stackoverflow.com/questions/4877053/how-to-split-folders-of-a-git-repo-into-separate-branches"">Question 4877053</a>, where the use of git-subtree is proposed, but even after reading the manual for git-subtree, I didn't understand how to use it to solve my problem.</p>

<p>Can someone give me a more detailed explanation or even another solution?</p>

<p>I'm quite new to git, perhaps that's why I didn't understand the subtree manual ;-)</p>

<p>Thanks very much for all your anwers!</p>
",1,1204972,0,0
63508646,1611356,8/20/2020 15:42,2,33,<git><git-subtree>,git subtree: inner project includes the entire history of the outer project. Is that expected?,"<p>My starting point was a large private project, of which some parts I'd like to make public. I arranged for all the public parts to be located
within one subdirectory. I thought I'd make that available as a separate repo with commits pulled out using <code>git subtree split</code>. The initial split
gave me what I expected: a new disconnected branch with a few commits rooted on the subdirectory.</p>
<p>Then, following some possibly dubious advice, I removed the subdirectory and added it back with <code>git subtree add</code>. Later I performed a second split and that linked the initial disconnected branch with the commit caused
by <code>git subtree add</code>. I pushed the result to the subtree repo, and found that it now contains a complete history of the outer project. The image shows the structure I see within the subtree repo.</p>
<p>Is this expected? Is there a way to avoid it?</p>
<p><a href=""https://i.stack.imgur.com/Th0Q1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Th0Q1.png"" alt=""enter image description here"" /></a></p>
",0,1611356,,
27109525,2204868,11/24/2014 16:30,11,2912,<windows><git><cygwin><git-subtree>,How do I install git-subtree with Cygwin in Windows 7?,"<p>I'm struggling to install git-subtree with Cygwin and there hasn't been any good tutorials online focused on building from source in Windows. Have you ever had this issue, and what is the best strategy to tackle it?</p>
",0,2204868,0,0
28233077,619962,1/30/2015 9:43,1,1974,<git><git-subtree>,Using gitignore only for a subtree,"<p>I have the following (simplified) git repo for a project using SpecFlow:</p>

<pre><code>/repo
    /code
        /code.cs
    /specifications
        /spec.feature
        /spec.feature.cs
</code></pre>

<p>I'd like to have two repos, with the new one just containing the *.feature files. This would then be included in the original repo as a subtree. This is so that only testers need to worry about the code, and every else can use the project with just the *.feature files.</p>

<p>I've managed to get a subtree set up, but the last hurdle is ensuring that only *.feature files are committed to the subtree repo. A .gitignore file applies to both projects (unless I'm mis-using it) and so doesn't help. Is there a way I can ignore all but *.feature files for the subtree only?</p>
",2,619962,0,0
28234815,1888593,1/30/2015 11:21,0,45,<git><git-subtree>,How can you see what branch is selected with git subtree?,"<p>I have created a repository ""droid_fun"", one called ""droid_per"" and another one called ""droid_common"".</p>

<p>Now, I have added a subtree from droid_fun to droid_common to the branch ""master"". How can I know in the future what branch I have selected? I will create separated branch (fun, per, etc.) in the common library, so it will be useful to know it.</p>

<p>Thanks :)</p>
",1,1888593,,
65358214,979325,12/18/2020 13:49,1,303,<bash><git><git-subtree><git-merge-conflict>,Check conflict after git pull in script,"<p>I've the following script in a git repository, that allows me to add a subtree and performing push and pull in automatic way.</p>
<pre><code>#!/bin/bash

# The script will update subtrees of the repository. Subtrees are stored in
# thirdparty folder.
#
# Since in a fresh clone subtrees are missing, the script at first will check if
# corresponding remotes are present. If they are missing then remotes will be
# created. Then, it starts the synchronization. Subtree repositories will be
# pulled, synchronized, with the current conflict resolution, and then pushed.

# Remotes
SUBTREELIB_REMOTE=name-of-subtree-remote
SUBTREELIB_URL=git@remote-git-address.git
SUBTREELIB_BRANCH=branch-that-must-be-checked-out
SUBTREELIB_PATH=path/where/subtree/is/stored

###############################################################################
# FUNCTIONS SECTION                                                           #
###############################################################################

# Exit if the tree is not clean.
RequireCleanWorkingTree () {
    # Update the index
    git update-index -q --ignore-submodules --refresh
    err=0

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --
    then
        echo &gt;&amp;2 &quot;cannot $1: you have unstaged changes.&quot;
        git diff-files --name-status -r --ignore-submodules -- &gt;&amp;2
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --
    then
        echo &gt;&amp;2 &quot;cannot $1: your index contains uncommitted changes.&quot;
        git diff-index --cached --name-status -r --ignore-submodules HEAD -- &gt;&amp;2
        err=1
    fi

    if [ $err = 1 ]
    then
        echo &gt;&amp;2 &quot;You need to commit or stash changes before updating subtrees.&quot;
        exit 1
    fi
}

# Function for syncronyzing a remote
#
# It needs 4 arguments:
#
# - The name of the remote that will be used in the repository
# - The url of the remote where it can be fetched
# - The branch of the remote that must be syncronized
# - The path where it must be stored in the repository.
function SyncronizeRemote {
  # Check if remote is present and add it if missing.
  echo &quot;Testing if $1 is present&quot;
  git ls-remote --exit-code $1
    if test $? != 0; then
      echo &quot;Adding missing remote $1&quot;
      git remote add -f $1 $2
      echo &quot;Adding subtree for $1&quot;
      git subtree add --prefix $4 $1 master --squash
  fi

  # Fetching remotes
  echo &quot;Fetching remotes for $1&quot;
  git fetch $1 $3

  # Pull remotes
  echo &quot;Pulling remotes for $1&quot;
  git subtree pull --prefix $4 $1 $3 --squash

  # Push remotes
echo &quot;Updating remotes for $1&quot;
git subtree push --prefix=$4 $1 $3
}

###############################################################################
# EXECUTION SECTION                                                           #
###############################################################################

# Ask ssh key password only once.
eval `ssh-agent -s`
ssh-add ~/.ssh/*_rsa

RequireCleanWorkingTree
SyncronizeRemote $SUBTREEIB_REMOTE $SUBTRELIB_URL $SUBTREELIB_BRANCH $SUBTREELIB_PATH
</code></pre>
<p>It works, but it has the problem than if I've a merge conflict after the pull, it doesn't stop and it does the push. For example if I have a conflic the output is:</p>
<pre><code>Agent pid 1825
Enter passphrase for /c/Users/myuser/.ssh/id_rsa:
Identity added: /c/Users/myuser/.ssh/id_rsa (/c/Users/myuser/.ssh/id_rsa)
Testing if name-of-subtree-remote is present
a38faec39bf7f5515f570eb2835dfa80555e9be1        HEAD
8aa678cdca32b2fe6d91edb8d0097a6e0b6eeea9        refs/heads/develop
a38faec39bf7f5515f570eb2835dfa80555e9be1        refs/heads/master
Fetching remotes for name-of-subtree-remote
remote: Enumerating objects: 19, done.
remote: Counting objects: 100% (19/19), done.
remote: Compressing objects: 100% (10/10), done.
remote: Total 10 (delta 7), reused 0 (delta 0)
Unpacking objects: 100% (10/10), 3.58 KiB | 85.00 KiB/s, done.
From 192.168.100.236:loginlib
 * branch            develop    -&gt; FETCH_HEAD
   00d5585..8aa678c  develop    -&gt; name-of-subtree-remote/develop
Pulling remotes for name-of-subtree-remote
From 192.168.100.236:name-of-subtree-remote
 * branch            develop    -&gt; FETCH_HEAD
CONFLICT (add/add): Merge conflict in path/where/subtree/is/stored/src/File1.hpp
Auto-merging path/where/subtree/is/stored/src/File1.hpp
CONFLICT (add/add): Merge conflict in path/where/subtree/is/stored/src/File2.hpp
Auto-merging path/where/subtree/is/stored/src/File2.hpp
CONFLICT (add/add): Merge conflict in path/where/subtree/is/stored/src/File3.hpp
Auto-merging path/where/subtree/is/stored/src/File3.hpp
Automatic merge failed; fix conflicts and then commit the result.
Updating remotes for name-of-subtree-remote
git push using:  name-of-subtree-remotedevelop
219/475 (212) [13]
</code></pre>
<p>I want that the script stops if I've a merge conflict with the pull, so I can solve the merge conflict and re-run the script in order to avoid problems.</p>
<p>How can I modify the script in order to check if there's a merge conflict and exit if there is?</p>
",4,979325,,
54920366,11126816,2/28/2019 7:18,2,1083,<git><merge><git-subtree><monorepo>,Merge two git repositories with history into subdirs and pretend the files where always there,"<p>I need to merge two git repositories into one new repository without losing the history and preserve the feature branches and tags.</p>

<p>This seems like a pretty common question which already has been solved many times (e.g. <a href=""https://github.com/unravelin/tomono"" rel=""nofollow noreferrer"">https://github.com/unravelin/tomono</a> or <a href=""https://stackoverflow.com/questions/13040958/merge-two-git-repositories-without-breaking-file-history"">Merge two Git repositories without breaking file history</a>).</p>

<p>But what none of the solutions managed to solve is, that i can jump back in time and view all files from a specified commit, where both subdirs are present.</p>

<p>So I wonder if something like this is even possible with git.</p>

<p>This is my current setup: 
Two repositories which were seperatly developed:</p>

<ul>
<li>apprepo </li>
<li>librepo</li>
</ul>

<p>These are both cloned and bundled into a rpm by our build-system (including some config and data-directories)</p>

<ul>
<li>/app/ -> from apprepo</li>
<li>/lib/ -> from librepo</li>
<li>/data/</li>
<li>/config/</li>
</ul>

<p>Now I want to migrate both repositories into one ""monorepo"" where I could also store the config, and other basic required subdirs.</p>

<p>If I use one of the many ""merge x repos to a single repo""-solutions i will end up with one of two states when looking at the directory-tree of that commit:</p>

<ul>
<li>Files not moved in the history - Commit in apprepo: only files that were in the apprepo are visible and show up under the root directory. Commit in librepo: only files that were in the apprepo are visible and show up under the root directory </li>
<li>Files moved in the history - Commit in apprepo: Only subdir app with all the files that were in the apprepo are visible. Commit in librepo shows only subdir lib with all files that were in the librepo.</li>
</ul>

<p>This also make the tags pretty much useless.
I would like to have both app and lib visible at any commit. </p>

<p>A long time ago, when migrating from SVN to git I managed something like this by reading both histories and ""replaying"" the commits as if the subdirectories where always there.</p>

<p>Is there a way for this particular problem, or do I realy have to live with the lost tags and ""incomplete"" history?</p>
",2,11126816,,
46030383,5705247,9/4/2017 4:44,1,137,<git><merge><branch><git-subtree>,"git subtree, view commit","<p>When I merge project into another with <code>git subtree add</code> add command, the history is merged with target branch similarly to normal three-way merge.</p>

<pre><code>*   375c6d0 Add 'somestuff/' from commit '428761aea39560d87f4dd096366f7324bde728f5'
|\
| * 428761a Add new line to Readme
| * 15b1175 Edit Readme
| * c418c7d Initial commit
* 3782cdd fixes
* bed10f8 parent
* c3dd312 resources filtering
* db3cbd2 property
* 7cc3bc3 submodules
* 3bb1296 Initial commit
</code></pre>

<p>In this example the branch is the history is from another project merged with <code>git sutbree add</code>. What the command does is place the project in new subfolder under main project. However, when I view commits, file paths are shown relatively to the merged project, not relatively to the main project (in which under the merged project now resides, thus all paths should get prefixed with that folder name).</p>

<pre><code>$ ls -la
total 29
drwxr-xr-x 1 tuoppi 197121    0 Sep  4 06:28 ./
drwxr-xr-x 1 tuoppi 197121    0 Sep  4 06:22 ../
drwxr-xr-x 1 tuoppi 197121    0 Sep  4 06:29 .git/
-rw-r--r-- 1 tuoppi 197121  391 Sep  2 16:14 .project
drwxr-xr-x 1 tuoppi 197121    0 Sep  2 16:14 .settings/
drwxr-xr-x 1 tuoppi 197121    0 Sep  4 06:26 bar/
drwxr-xr-x 1 tuoppi 197121    0 Sep  4 06:26 common/
drwxr-xr-x 1 tuoppi 197121    0 Sep  4 06:26 foo/
-rw-r--r-- 1 tuoppi 197121 1243 Sep  4 06:26 pom.xml
drwxr-xr-x 1 tuoppi 197121    0 Sep  4 06:28 somestuff/

git show c418c7d

commit c418c7d17ae70248e5e56a821b84ffaee6e8bdf5
Author: Your Name &lt;you@example.com&gt;
Date:   Mon Sep 4 06:23:21 2017 +0200

Initial commit

diff --git a/README.mf b/README.mf
new file mode 100644
index 0000000..e69de29
</code></pre>

<p>Why git doesn't refactor those commits in respect to new file paths? Is there some argument to do so?</p>
",3,5705247,0,0
64037100,3288346,9/23/2020 22:26,1,163,<git><git-subtree>,Making sure a fresh git subtree is available everytime,"<p>I have a repo say <code>A</code> and I want to add a new repo B in it using <code>git subtree</code></p>
<p>From inside the repo <code>A</code>, I can run the following command</p>
<pre><code>git subtree add --prefix=.github/workflows &lt;my-repo&gt;.git master --squash
</code></pre>
<p>and the new repo is cloned inside <code>.github/workflows</code> folder</p>
<p>Now I run some find and replace commands on <code>.github/workflows</code> using <code>sed</code>.
For this reason, it's important that it's a fresh <code>git subtree add</code> so that my variables which need to be replaced are present.</p>
<p>So, I can do something like this</p>
<pre><code>rm -rf .github/workflows/*
git subtree add --prefix=.github/workflows &lt;my-repo&gt;.git master --squash
sed -i '' -e 's/MY_LABEL/MYTAG/g' .github/workflows/*.yml
</code></pre>
<p>This will do the job, but it will unnecessarily create commits everytime I do subtree add.
However, can this be achieved using just git commands (not using rm -rf)</p>
<p>I plan to use this in a <code>pre-commit</code> hook so that it's always run before a user commits.
What's the correct way to do it?</p>
",1,3288346,,
10081681,,4/10/2012 0:45,13,4306,<git><subtree><git-subtree>,git subtree push changes back to subtree project,"<p>The short of what's below: I want to push commit messages to a subtree, but only the messages that apply to that tree.  How do I do this?</p>
<hr />
<p>I have two projects, <code>Master</code> and <code>Slave</code>.  <code>Slave</code> is checked out as a subtree of <code>Master</code> checked out to <code>lib/slave</code> via <code>git subtree merge --prefix=lib/slave --squash projects/slave</code> where <code>projects/slave</code> is a branch that <code>Slave</code> is checked out into:</p>
<p>Branches:</p>
<p>master
projects/slave → slave</p>
<p>Now I'm working on my <code>master</code> branch, making commits to files that are part of both projects, everything is going smoothly.  Now I want to push changes back to <code>Slave</code>:</p>
<ul>
<li>git checkout slave</li>
<li>git merge ??? master</li>
</ul>
<p>If I do a normal merge I get commits for every commit to master, whether or not any files in <code>lib/slave</code> were modified.  Or I can do a <code>--squash</code> and only get a single commit, but I lose the log messages.</p>
<p>So how do I get the appropriate log messages?  e.g. if my <code>master</code> log history is:</p>
<ul>
<li>added images to master</li>
<li>modified files in slave only</li>
<li>more changes to master only</li>
<li>modified files in master and slave</li>
</ul>
<p>I'd want this added to <code>Slave</code>:</p>
<ul>
<li>modified files in slave only</li>
<li>modified files in master and slave</li>
</ul>
",4,,0,0
28126309,1725165,1/24/2015 14:05,5,406,<git><git-subtree>,How can I do what was once called 'git subtree pull-all' today?,"<p>I see some references that there was initially a ""git subtree pull-all"" functionality in git subtree (before it was merged into the main git branch). Like <a href=""http://rentzsch.tumblr.com/post/22061209807/apps-i-love-git-subtree"" rel=""noreferrer"">http://rentzsch.tumblr.com/post/22061209807/apps-i-love-git-subtree</a></p>

<p>What I'd need is a quick way to fetch subtrees (and the subtrees of subtrees, recursively...) present in the current repo. What is the advised way of doing this today?
  push-all would also be handy.
  I wouldn't want to use submodules. </p>

<p>Thanks!</p>
",0,1725165,0,0
28144800,1843805,1/26/2015 4:27,1,580,<git><git-subtree>,git subtree pull rebase error,"<p>I added one repo as subtree, when I run <code>git pull -s subtree projectB master</code>, everything is as expected, but get fatal when switch to <code>rebase merge</code> with <code>git pull --rebase -s subtree projectB master</code>. Log:</p>

<pre><code>First, rewinding head to replay your work on top of it...
fatal: Could not parse object 'd2c2b2d5548fab404e1fccfa1fc22da3d5a6151c^'
Unknown exit code (128) from command: git-merge-subtree d2c2b2d5548fab404e1fccfa1fc22da3d5a6151c^ -- HEAD d2c2b2d5548fab404e1fccfa1fc22da3d5a6151c
</code></pre>

<p>Any ideas?</p>
",0,1843805,,
28518339,77464,2/14/2015 17:42,0,59,<windows><git><git-subtree><svn2git>,git subtree split issues after svn2git migration,"<p>I have just converted a large nested SVN repo to git using the git2svn command line tool and now have a git repo at <code>D:\project</code></p>

<p>Repo folder structure as follows:</p>

<pre><code>\web\projectA
\web\projectB
\winforms\projectD
\winforms\projectE
</code></pre>

<p>I want to extract <code>\web\projectA</code> into a new git repo to upload to github.</p>

<p>After some research I have used <code>git subtree split --prefix=web\projectA -b justprojectA</code></p>

<p>However the new branch after running the subtree command still contains all the folders from the root of the repo and doesn't seem to have worked at all.</p>

<p>I am using git shell on WIndows 7.</p>
",3,77464,,
47102565,478176,11/3/2017 18:44,1,111,<git><git-subtree>,git-subtree not finding latest squash,"<p>With <a href=""https://github.com/w3c/web-platform-tests.git"" rel=""nofollow noreferrer"">this repository</a>, <code>git subtree merge --squash --prefix=resources/webidl2 8a7ff70664</code> where that commit comes from <a href=""https://github.com/w3c/webidl2.js.git"" rel=""nofollow noreferrer"">this repository</a>, it fails with a merge conflict.</p>

<p>Adding <code>-d</code> to enable debug output, we discover:</p>

<pre><code>Squash found: 5353ef707674e9d894f207581d7dffab2609b832 bd216bcd5596d60734450adc938155deab1e1a80
</code></pre>

<p>However, this isn't the latest squash, and running the <a href=""https://github.com/git/git/blob/v2.15.0/contrib/subtree/git-subtree.sh#L299"" rel=""nofollow noreferrer"">log call</a> manually and changing the <code>--grep</code> option it becomes apparent that <code>--grep=""^git-subtree-dir: resources/webidl2/*\$""</code> isn't matching <a href=""https://github.com/w3c/web-platform-tests/commit/960a3d21bab0293630da8919847f87f4af3a3198"" rel=""nofollow noreferrer"">960a3d21bab0293630da8919847f87f4af3a3198</a> for no apparent reason (it does match <code>--grep=""^git-subtree-dir: resources/webidl2/*""</code>, but the lines containing <code>git-subtree-dir</code> in both commits that match that are byte-for-byte identical, hence it doesn't make sense why one is matched by the previous <code>--grep</code> option but not the other).</p>

<p>Given that <code>git-subtree</code> is failing to find this previous squash, how can I do a new squash without it thinking everything in that is a local change and hence ending up with conflicts?</p>
",0,478176,,
47138610,1507546,11/6/2017 13:57,0,42,<git><shell><git-subtree>,git subtree useless merge,"<p>I added a <strong>subtree</strong> into my project <strong>demo</strong> this way</p>

<pre><code>$ git subtree add --prefix=plugins/plugone plugone master --squash
$ tree .

demo
|___.git
|___plugins
       |___plugone

$ git log --oneline --all --graph --decorate

* 200e94c (HEAD -&gt; master, origin/master) Merge commit 'f9a745bb60b3e5816f918c0ec736714bd362bce7' as 'plugins/plugone'
| \
|  * f9a745b Squashed 'plugins/plugone/' content from commit 5c4a153
* 947ebfe bla bla
</code></pre>

<p>So far so good, I'm happy with <strong>subtree</strong>. Then I edited a file into the <strong>subtree</strong> plugone and committed and <strong>subtree push</strong>ed</p>

<pre><code>* 07b3046 (HEAD -&gt; master, origin/master) plugone append #1
* 200e94c Merge commit 'f9a745bb60b3e5816f918c0ec736714bd362bce7' as 'plugins/plugone'
| \
|  * f9a745b Squashed 'plugins/plugone/' content from commit 5c4a153
* 947ebfe bla bla
</code></pre>

<p>I noticed that after I updated <strong>plugone</strong> from my project <strong>demo</strong> through <code>git subtree push --prefix=plugins/plugone plugone master</code>, when I run</p>

<pre><code>$ git subtree pull --prefix=plugins/plugone plugone master --squash
</code></pre>

<p>I expected this to do <strong>nothing</strong>, but I noticed new commits in the <strong>demo</strong> project:</p>

<pre><code>*   a5ab686 (HEAD -&gt; master) Merge commit 'c8cd6206950dc45196cf6fd1f17e8587a115fee6'
|\
| * c8cd620 Squashed 'plugins/plugone/' changes from 5c4a153..1fd84fe
* | 07b3046 (origin/master) plugone append #1
* |   200e94c Merge commit 'f9a745bb60b3e5816f918c0ec736714bd362bce7' as 'plugins/plugone'
|\ \
| |/
| * f9a745b Squashed 'plugins/plugone/' content from commit 5c4a153
* 947ebfe blabla
</code></pre>

<p>This is very embarrassing because it means that my colleagues and I have to run <strong>git subtree pull</strong> after every <strong>git subtree push</strong> which IMO doesn't make much sense.</p>

<p>How to prevent this behavior ?</p>
",0,1507546,,
47532846,6467822,11/28/2017 13:32,1,381,<git><git-subtree>,update a specific tag with git subtree,"<p>the similar question is <a href=""https://stackoverflow.com/questions/34411468/checkout-a-specific-tag-with-git-subtree"">checkout a specific tag with git subtree</a> . howere what I do is 
<code>
git remote add next https://github.com/iissnan/hexo-theme-next
git subtree add --prefix=themes/next  next tags/v5.1.0 --squash
</code>
till now everythin is ok, but when I want to update the subtree to 5.1.3 using
<code>
git subtree pull --prefix=themes/next  next tags/v5.1.3
</code>
I get
<code>
From https://github.com/iissnan/hexo-theme-next
 * tag               v5.1.3     -&gt; FETCH_HEAD
Already up-to-date.
</code>
I am sure there is tag 5.1.3, so how can I update to it?</p>
",0,6467822,,
30089207,757888,5/6/2015 23:10,2,199,<git><git-subtree>,Rename the git-subtree squashed commit,"<p>I'm trying to add a subtree to my project. And it works just as it should. But the remote I am pushing to has a pre-receive hook that validates if a commit has a JIRA number in front of it. This is unfortunate because when subtree squashes the history, it removes the previous messages and leaves a generic ""Squashed  'prefix' content from..."" message.</p>

<p>Alas, though I'd like to simply remove this asinine hook, I have to somehow work around it. Here's what my tree looks like:</p>

<pre><code>*   90285a0edac Merge commit '4c2e69861591fada9f5c752857ec871f84adf145' as 'prefix'
|\  
| * 4c2e6986159 Squashed 'prefix/' content from commit 4ffbd12 
* 34f9e457b68 JIRA-1234: Add some feature
</code></pre>

<p>The subtree works as expected, but I need to rename commit 4c2e6986... to include a JIRA number in front of it to circumvent a hook on the remote.</p>

<p>I am able to easily rename the Merge commit using <code>rebase -i -p</code>, but I'm unsure how to rename the Squash commit.</p>
",2,757888,0,0
13447705,13760,11/19/2012 4:30,11,2130,<git><git-svn><git-subtree>,Is git svn compatible with git subtree?,"<p>Now that git subtree has been merged into the core git distribution (its also on Msysgit as of 1.8.0), does anyone know if git svn works with git subtree?</p>

<p>Note: I am not talking about the subtree merge strategy, but about <a href=""https://github.com/gitster/git/blob/634392b26275fe5436c0ea131bc89b46476aa4ae/contrib/subtree/git-subtree.txt"" rel=""nofollow noreferrer"">this</a>.</p>

<p><a href=""https://stackoverflow.com/questions/4519679/using-git-submodules-in-a-git-svn-project"">Git submodules cannot be used directly when you are using git svn</a>. Instead, it requires <a href=""http://fredericiana.com/2010/01/12/using-svn-repositories-as-git-submodules/"" rel=""nofollow noreferrer"">another level of indirection</a>. In addition, the git subtree workflow is <a href=""https://stackoverflow.com/questions/1596822/git-submodules-workflow"">more convenient when you're tracking third party respositories</a>, which is something that happens when you use svn too.</p>

<p>My question is, how do I find out if git subtree has any issues when used with git svn?</p>
",5,13760,0,0
30999406,2791584,6/23/2015 9:49,4,195,<git><nested><git-submodules><git-subtree>,Commiting changes in nested git subtrees,"<p>I have been reading a lot on git subtrees as an alternative submodules and was wondering what is the best way to handle nested subtrees with regards to committing changes:</p>

<p>Say you have project A with a subproject B as a subtree (so A is the parent). <br> If I make changes to B while working in A, I need to use <strong>git subtree push</strong> to push the changes onto B. <br>
Similarly, If I make changes to B whilst working in B, to bring these updates in A I need to use <strong>git subtree pull</strong></p>

<p>My question is how do you handle committing changes if you add another subproject C which is a subtree in B (ie B is the parent of C). As far as I understand, the below is how you would do it. Is there a better way?</p>

<p>So say you are working in project A and then make changes to C. In order to bring these changes to C, you need to use <strong>git subtree push</strong> twice:<br> 
1. <strong>Git subtree push</strong> from A to B, then <br>
2. <strong>Git subtree push</strong> from B to C</p>

<p>Similiary, the reverse is true when making changes in C whilst working within C and <strong>git subtree pull</strong></p>

<p>This is a bit repetitive, so I was wondering if there is another way to go about it. Perhaps a better way  would to not use subtrees at all? If not, what would be an alternative?</p>
",0,2791584,0,0
48986726,9412732,2/26/2018 10:50,0,113,<git><git-subtree>,"How to push all files and folders, including other git repositories?","<p>I am using a github repository that I have modified to my purposes. This repo is now part of a bigger project, that I want to publish. The github repository and all its files shall be committed. It would also be desirable if others who pull the project see the history of the github project to modify or rebase it when necessary. Basically others should be able to get exactly what I am working on locally.</p>

<p>My research told me that git subtree is what I would be looking for. Yet all advice I could find was about how to include a project as subtree. I instead already have all the folders and files locally and I am now looking for a way to declare the subdirectory a subtree afterwards.
For clarification, here is my folder structure:</p>

<pre><code>/MyProject //its history shall contain all the files from every folder below
    /Stuff
    /MoreStuff
    /GitHubProject //with the official history and my changes
</code></pre>

<p>Is there a way to do this? I am in no way limited to the use of git subtree if there is another, better option I do not know yet.</p>

<p>Edit:
I first finished my adaptations on the GitHub project and then wanted to push it together with the rest of the project in the remote repository of MyProject. It uploaded the following:</p>

<pre><code>/MyProject
    /Stuff
    /MoreStuff
</code></pre>

<p>The GitHub repository is missing and this is what I would like to change. It should appear online so that everyone who pulls the repo gets everything she needs.</p>
",4,9412732,,
31769820,25645,8/2/2015 8:05,402,121522,<git><git-submodules><git-subtree>,Differences between git submodule and subtree,"<p>What are the conceptual differences between using git submodule and subtree?</p>

<p>What are the typical scenarios for each?</p>
",3,25645,0,0
55215953,5306703,3/18/2019 6:51,1,995,<git><git-subtree>,git subtree custom message for squashed commit,"<p>I am trying to add a subtree to my git project. Using <code>git subtree add --prefix &lt;prefix&gt; &lt;repo.git&gt; trunk --squash --message ""JIRA: xyz""</code> I could modify the commit message for the merge-commit that subtree add generates.</p>

<pre><code>*   4795f8f (HEAD, currbranch) JIRA xyz 
|\
| * 66d3640 Squashed 'prefix path' content from commit blah
* 9bd5f02 (origin/master) JIRA def:
</code></pre>

<p>However, I also need to edit the commit message for the <em>squashed</em> commit 66d3640 that git subtree add generates. I can't figure out any way to edit that commit's msg to add ""JIRA: abc"" (and without JIRA in commit message, bitbucket throws error).</p>

<p>Any help would be awesome! Thanks!</p>
",0,5306703,,
36894522,1331501,4/27/2016 15:38,1,786,<git><git-subtree>,git-subtree checkout specific folder under other name,"<p>Hi I'm trying to setup a git-repo with two upstreams.</p>

<ul>
<li><p>upstream-jointswp: (<a href=""https://github.com/JeremyEnglert/JointsWP/"" rel=""nofollow"">https://github.com/JeremyEnglert/JointsWP/</a>)</p>

<ul>
<li>The entire root-folder / goes to my repo at root /. (no problem)</li>
</ul></li>
<li><p>upstream-woocommerce: (<a href=""https://github.com/woothemes/woocommerce"" rel=""nofollow"">https://github.com/woothemes/woocommerce</a>)</p>

<ul>
<li>The subdir of this repo /templates should go under /woocommerce in my repo.</li>
<li>I was able to achive that the /templates goes as only folder/tree in my repo by using a sparseCheckout.</li>
<li>I try to use git-subtree to keep track of the commits.</li>
</ul></li>
</ul>

<p>When I use git-subtree. How do I checkout the stuff at /templates from my upstream to /woocommerce in my repo?</p>

<p><em>If my question isn't as straigth forward as I hope, plz give me a sign ;)</em></p>
",0,1331501,0,0
52939727,3338893,10/23/2018 1:10,1,123,<git><git-log><git-subtree><git-mv>,How to move multiple directories from another repo and preserve git log directory behavior?,"<p>I've read <em>several</em> threads on moving directories between git repositories, and the one I've settled on using is <a href=""https://stackoverflow.com/questions/359424/detach-move-subdirectory-into-separate-git-repository/17864475#17864475"">this one</a>, which makes use of <code>git subtree</code>.</p>

<p>Following the steps, everything seems to work well, but the problem comes at the end.</p>

<p>I'm left with a new repo where all of the contents of the directory I wanted to move is in the root. If I do a <code>git mv</code> of the contents into the subdirectory I want, when I do a <code>git log -- sub\dir\1</code>, the history is NOT viewable from there. The history is only visible from the root.</p>

<p>I plan to move multiple directories in this fashion, so it dampers things a bit because now I have to use <code>git log --follow</code> on every single file I look up the history for.</p>

<p>Is there another way, or something that I am doing wrong, so that I can preserve the history under the right subdirectory? If it helps, the folder structure I want in my new repo is actually the same as the one in my old repo (well, at least before the <code>git subtree</code> command).</p>

<p>To be explicit, here is what I am starting with:</p>

<pre><code>\old-repo
   \sub\dir\1
   \sub\dir\2
   \sub\dir\3
</code></pre>

<p>Here is where I am now:</p>

<pre><code>\new-repo (subdir1 history viewable from here)
   \sub\dir\1 (subdir1 history is NOT viewable, besides the most recent git mv)
</code></pre>

<p>Here is what I actually want:</p>

<pre><code>\new-repo
   \sub\dir\1 (subdir1 history viewable from here)
   \sub\dir\2 (subdir2 history viewable from here)
   \sub\dir\3 (subdir3 history viewable from here)
</code></pre>
",1,3338893,0,0
69917897,457059,11/10/2021 17:46,4,352,<git><git-submodules><git-subtree>,Hide contents of git repository from subcontractors,"<p>I have an application that has a lot of UI, DB, ... and also a background processing part. I want to keep the background processing part hidden from my contractors so they can't disclose the clever algorithm I came up with.</p>
<p>What's the right way to do that with git?</p>
<p>I started out with submodules:
I have the main repo with all the UI, DB, ... in there and a secret repo which I included via a git submodule.
After I change stuff in the processing part of the app, I minify it (it's JS), and save it to the main repo, so it can be used by the rest of the application.
This way the contractor can pull my minified file as part of the main repo. Then run the app without the need for the secret code. So far so good.</p>
<p>However, the problems are:</p>
<ol>
<li>The contractor gets errors when checking out the main project because the submodule is not accessible for him</li>
<li>The contractor has accidentally created a &quot;remove processing submodule&quot; commit, because the submodule folder is not there, and if he does <code>git add .</code> and then commits, git assumes that he wanted to delete the submodule.</li>
</ol>
<p>So all in all it seems that's not the right strategy. I read that git subtree can be used, but I didn't find any example on how to use it for that use case.</p>
<p>Any help is highly appreciated!</p>
",5,457059,0,0
36957809,521757,4/30/2016 17:11,3,72,<git><git-subtree>,How can I stop git subtree split from un-squashing everything?,"<p>The main repo has a subdirectory that contains code from both the main repo and another repo using subtree. I squashed every merge from the other repo to keep the main repo's history clean.</p>

<p>Now I want to split the main repo's branch into two branches, one for each top directory. That means the subtree's prefix will change to <code>/</code>, which is okay.</p>

<p>I ran <code>git subtree split -P=subdirectory/ -b newbranch</code> and everything seems to be perfect except that each squash merge has turned into a full merge, bringing along all history from the other repo! Why does it do this and how can I preserve my main repo history, including only squashes from the other repo like it is today?</p>
",0,521757,,
53202389,1150462,11/8/2018 6:16,0,88,<git><git-subtree>,I have accidently push a commit which modified a git subtree. What to do now?,"<p>I have pushed a commit which modified a git subtree (not by pulling from the repository where the subtree was initially pulled). What is a clean way to restore the subtree to be what it used to be?</p>
",0,1150462,,
69958555,2125837,11/13/2021 21:51,1,420,<git><git-subtree>,Turn a git subtrees to a plain regular directory and preserve the history,"<p>Parallel the same ask in <a href=""https://stackoverflow.com/questions/52224200/"">Convert a git submodule to a regular directory and preserve the history in the main tree?</a>
but on git subtrees.</p>
<p>So I've added a git subtrees, it's content and history is now in my main tree,
and now I want to turn such git subtrees to a complete plain regular directory, removing the git's knowledge that such directory belongs to a subtrees. How can I do that?</p>
",4,2125837,0,0
70628381,1772066,1/7/2022 23:45,2,170,<git><git-submodules><git-subtree><git-detached-head><git-subrepo>,git submodule replacement that doesn't detach heads,"<p><strong>My situation</strong>: I have a large number of computers that I use for various tasks.  I have a large number of libraries, each in its own git repo.</p>
<p><strong>My desire</strong>: I want to be able to modify one of the libraries on any computer, do a git commit/push; then go to another computer, do a <code>git pull</code>, and have all the libraries updated.  Then I modify one of these libraries, commit/push, and everything works when I get tot he next computer.</p>
<p><strong>My current attempt</strong>:  I have a top-level git project that incorporates all the other library repos as submodules.  This includes a .gitmodules file that specifies the working branch of each module by using</p>
<pre><code>git config -f .gitmodules submodule.modulename.branch develop
</code></pre>
<p>I have <a href=""https://stackoverflow.com/questions/18770545/why-is-my-git-submodule-head-detached-from-master""><code>update = merge</code></a> set for each module.
I have <code>submodule.recurse</code> set to true, so <code>git pull</code> at the top level does <em>something</em> to each module.</p>
<p><strong>How it is broken</strong>: Heads become detached.  I wrote a script that parses the <code>.gitmodules</code> file and does a <code>checkout</code> of the appropriate branch of each module. I then <code>commit</code> and <code>push</code> the top module.  Whenever I modify things and try to do a pull, e.g. on another machine, heads become detached.  If I don't notice that the head is detached before I start modifications, I have to carefully unscramble the wreckage before I can commit my changes.</p>
<p>There are literally 3.6k stack overflow questions about git detached heads over the past decade, and most seem to be from the submodule capability.  I haven't gone through all of them, but what I have tried isn't working.</p>
<p>I forget why I rejected <code>git-subtree</code>, but <code>git-subrepo</code> hasn't been touched in over a year and has 153 issues and 25 pull requests pending, so I think it's dead.</p>
<p>Does anyone have a working solution to this?</p>
<hr />
<h1>Accepted answer from @vonC looks good.</h1>
<p>I could probably streamline this a bit, but my readme for the top-level project now says:</p>
<h2>Recommended checkout:</h2>
<pre><code>git clone --recursive --jobs=8 *mysuperproject_clone_url*
cd *mysuperproject*
git config alias.pullall 'submodule foreach git pull'
git config alias.statusall 'submodule foreach git status'
git config alias.switchall \
    &quot;submodule foreach --recursive 'git switch \$(git config -f \${toplevel}/.gitmodules submodule.\${sm_path}.branch)'&quot;
git switchall
</code></pre>
<h3>Updating from repository</h3>
<pre><code>git pullall
</code></pre>
<h3>If heads become detached, fix with</h3>
<pre><code>git switchall
</code></pre>
<h3>To add a module</h3>
<p>Module named <code>newmodule</code> working on path <code>develop</code> in the following example.</p>
<pre><code>cd /path/to/mysuperproject
git submodule add git@github.com:myaccount/newmodule
git config -f .gitmodules submodule.newmodule.branch develop
git config -f .gitmodules submodule.newmodule.update merge
</code></pre>
<p>If the submodule is on the default <code>master</code> branch, you still have to config the branch.</p>
<p>If you switch a submodule to a different branch, then in the top level you must config again</p>
<pre><code>git config -f .gitmodules submodule.newmodule.branch newbranch
</code></pre>
<p>And push both the submodule and the top level project.</p>
<p>On a different working directory (such as on a different machine), you must</p>
<pre><code>cd /path/to/mysuperproject
git pull
git switchall
git pullall
</code></pre>
",4,1772066,0,0
70651804,1468388,1/10/2022 11:38,1,74,<git><git-subtree>,Using git-subtree to merge multiple upstream patches,"<p>Let's say I have a monorepo where I added a subtree like this:</p>
<pre><code>&gt; git subtree add --prefix vendor/odoo https://github.com/odoo/odoo.git 15.0 --squash
git fetch https://github.com/odoo/odoo.git 15.0
From https://github.com/odoo/odoo
 * branch                    15.0       -&gt; FETCH_HEAD
Added dir 'vendor/odoo'
</code></pre>
<p>Now I want to premerge a PR there. My git muscle memory tells me that the logical way to do it is:</p>
<pre><code>&gt; git subtree pull -P vendor/odoo/ https://github.com/odoo/odoo.git refs/pull/82307/head --squash
From https://github.com/odoo/odoo
 * branch                    refs/pull/82307/head -&gt; FETCH_HEAD
Merge made by the 'ort' strategy.
[...]
</code></pre>
<p>However, that pull reverted many commits that were in the <code>15.0</code> branch but were not yet in <a href=""https://github.com/odoo/odoo/pull/82307"" rel=""nofollow noreferrer"">https://github.com/odoo/odoo/pull/82307</a> (and probably will never be, because the PR is meant to be merged into <code>15.0</code> and not the other way around). The git log shows that:</p>
<pre><code>&gt; git log --graph --decorate
*   commit faab88e03651b074f031a15821239e0058f379aa (HEAD -&gt; main)
|\  Merge: 35fa4a52e44 4669930bd67
| | Author: Yajo &lt;Yajo@users.noreply.github.com&gt;
| | Date:   Mon Jan 10 12:23:13 2022 +0100
| | 
| |     Merge commit '4669930bd67c925c9492a04996139e3b94907a2c'
| | 
| * commit 4669930bd67c925c9492a04996139e3b94907a2c
| | Author: Yajo &lt;Yajo@users.noreply.github.com&gt;
| | Date:   Mon Jan 10 12:23:13 2022 +0100
| | 
| |     Squashed 'vendor/odoo/' changes from c7b292f7b86..99794e1b4bc
| |     
| |     99794e1b4bc [FIX] pos_restaurant: distinguish product variants
| |     REVERT: c7b292f7b86 [FIX] payment_authorize: show detailed transaction error messages
| |     REVERT: 04f01c58849 [FIX] website: do not translate code
| |     REVERT: 43f9431e71d [I18N] Update translation terms from Transifex
| |     REVERT: 73a51cd0c70 [FIX] {purchase_}stock, product: base product name on supplier
| |     REVERT: ff7368a4d14 [FIX] payment: hide toaster notification for token deletion error
| |     REVERT: aea3a7ff092 [FIX] l10n_it_edi: for foreign invoices without VAT, we need the country code
| |     REVERT: e281bd0850e [FIX] web: visual separation of search items
| |     REVERT: ddafb7fa5af [FIX] project: show 'View Task' in subtask when same project than parent
| |     REVERT: e3d66913502 [FIX] mrp: backport performance fix
| |     REVERT: 0dae344a345 [FIX] web: Add word-break to kanban_content
| |     REVERT: 22bbf43eba0 [FIX] mrp: Context irrelevant of hidden parameters for stock_mrp
| |     REVERT: 97fd5d0229f [FIX] pos_restaurant: distinguish product variants
| |     REVERT: 9fae154ed7a [FIX] l10n_it_edi_sdicoop: avoid tracebacks when no file, batching
| |     REVERT: 1131f8113d8 [FIX] payment: allow the user to archive the tokens he sees
| |     REVERT: 00965df4be5 [FIX] mail : Remove double signature on invoice email
| |     REVERT: 227a639b34f [FIX] stock_account: fix user group check
| |     REVERT: e6bcc77c58d [FIX] stock: traceability report traceback with productions
| |     REVERT: 2dc556f766f [CLA] Add Corporate Moduon CLA
| |     REVERT: 5fab4027cb1 [FIX] account: soften duplicate ref constrains
| |     REVERT: 9bc197fcf6c [FIX] hr_holidays : allow user to submit past sick days
| |     
| |     git-subtree-dir: vendor/odoo
| |     git-subtree-split: 99794e1b4bc04de147f9b05f576321e995af05a2
| | 
* | commit 35fa4a52e44664a6bdbacea14aa92cff7f1697f9
|\| Merge: da1be735a4c a97c519d635
| | Author: Yajo &lt;Yajo@users.noreply.github.com&gt;
| | Date:   Mon Jan 10 12:22:29 2022 +0100
| | 
| |     Merge commit 'a97c519d63500935afe040a303065c3d45334b49' as 'vendor/odoo'
| | 
| * commit a97c519d63500935afe040a303065c3d45334b49
|   Author: Yajo &lt;Yajo@users.noreply.github.com&gt;
|   Date:   Mon Jan 10 12:22:29 2022 +0100
|   
|       Squashed 'vendor/odoo/' content from commit c7b292f7b86
|       
|       git-subtree-dir: vendor/odoo
|       git-subtree-split: c7b292f7b86679b11527a68093ed70b36dc2fd1a
| 
* commit da1be735a4cc352cd4d1e6055f747abb44d07ae0
  Author: Yajo &lt;Yajo@users.noreply.github.com&gt;
  Date:   Mon Jan 3 13:45:16 2022 +0100
  
      build: bare bones pyproject.toml
</code></pre>
<p>To my eyes, it behaved more like a <code>git reset</code> than like a <code>git pull</code>, where changes are usually merged with whatever you have locally.</p>
<p>Why did <code>git subtree pull</code> revert those changes? How can I achieve a normal merge instead?</p>
",0,1468388,,
37986917,733748,6/23/2016 9:02,2,124,<git><svn><git-subtree>,subtree naming convention in git,"<p>We are starting with GIT as a substitute for SVN. Our product portfolio has common Core proprietary libraries that were once in one SVN repo per product.
The maintenance of CORE libraries was done by merging changes across the products, so the code was tripled. We then stepped up to ""externals"" in SVN and kept the Core code only in one branch and with our Jenkins have a job that builds the DLLs and commits it to the LIB repository that is externally connected in other product repositories and they use only the dlls.</p>

<p>That is not pleasant for debugging the dlls and code changes as it takes a while when propagating a change from the code into dlls. Plus it requires a Symbol server to have debugging available.</p>

<p>So we want to separate the code now in GIT per Core / Product repositories and include it as subtrees. </p>

<p>Is there a naming convention for the subtree in GIT?</p>

<p>lets say we have a dir:</p>

<pre><code>.
Core - external/subtree
Modules
Server
Libs - external/subtree
Web
AllInOne.sln
</code></pre>

<p>Note: the code is C# solutions + some frontend JS/TS</p>

<p>I would say <strong>Core_subtree</strong> or <strong>_subtree/Core</strong> is one idea.</p>
",0,733748,,
38070585,1723578,6/28/2016 8:11,14,5453,<git><git-submodules><git-subtree><git-slave><git-subrepo>,"git submodules , gitslave, git subtree or a simpler solution","<p>We have a git repository with N folders.</p>

<pre><code>Repo
|-Folder1
|-Folder2
|- ...
|-FolderN
</code></pre>

<p>With different collaborators we would like to share different folders. Each collaborator should have access only to his allowed subset of folders. What is the ""good"" way to achieve this using git?</p>

<hr>

<p>An answer was to use <code>git submodules</code>. But after I read this article: 
<a href=""https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/"" rel=""noreferrer"">https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/</a>
I understood that you need to have a good mastery of git (which is not the case of our collaborators) in order to not have problems when using <code>git submodules</code>.</p>

<p>I read about some possible alternatives like <code>gitslave</code>, and <code>git subtree</code>. <code>gitslave</code> seemed to be a good solution but still a complex solution in my opinion.</p>

<p>Here is my simple solution and I would like to know if it can have some very bad drawbacks : </p>

<p>-Having a simple repository for each Folder and a repository for Repo. Then add all the files in Folder1, ..., FolderN in the main Repo. </p>

<p>-globalpush script:</p>

<pre><code>function globalpush(){
REPOS=""$HOME/Repo/
       $HOME/Repo/Folder1
       $HOME/Repo/Folder2
       $HOME/Repo/Folder3
       # ...
       $HOME/Repo/FolderN""   

#do not show untracked files
git config status.showuntrackedfiles no

read -p ""Commit description: "" description

for repo in ${REPOS}
do
    # if the repo folder exists
    if [ -d $repo ]
    then
        # Go inside the repo
        cd $repo
        echo ""-----PUSHING REPO : ""$repo""-----""

        #add all modified all deleted TRACKED files
        git add -u .

        git commit --allow-empty -m ""$description""
        git push                
    else
        echo ""-----COULD NOT FIND : ""$repo""-----""
    fi
done

#show untracked files again
git config status.showuntrackedfiles normal
}
</code></pre>

<p>-globalpull script:            </p>

<pre><code>function globalpull(){
REPOS=""$HOME/Repo/
       $HOME/Repo/Folder1
       $HOME/Repo/Folder2
       $HOME/Repo/Folder3
       # ...
       $HOME/Repo/FolderN""           

for repo in ${REPOS}
do
    # if the repo folder exists
    if [ -d $repo ]
    then
        # Go inside the repo
        cd $repo
        # pull the modifs.
        echo ""-----PULLING REPO : ""$repo""-----""
        git pull                        
    else
        echo ""-----COULD NOT FIND : ""$repo""-----""
    fi
done
}
</code></pre>

<p>The advantages of this solution are:</p>

<p>1 - Simple solution that everyone can understand.</p>

<p>2 - Possibility to give the access rights for each Folder independently.</p>

<p>3 - For the main developers (who have access to Repo) the repository Repo is self-contained, and contains all the history (in case something goes wrong with the repositories of Folder1, ..., FolderN).</p>

<p>4 - when a main developer makes a commit with a given description, a commit with the same description will be created for all the Folders repositories, even those without a modification (--allow-empty), which of course isn't perfect but helps tracking versions that are submitted by main developers.</p>

<p>EDIT : </p>

<p>There seems to be a new command I was not aware of <code>git subrepo</code> ...</p>
",2,1723578,0,0
38288743,1420186,7/10/2016 4:58,1,238,<git><github><git-subtree>,Rebase Git history after git subtree,"<p>I was using git subtree for the <code>gh-pages</code> deployment from <a href=""https://gist.github.com/cobyism/4730490"" rel=""nofollow noreferrer"">this guide</a>:</p>

<pre><code>git subtree push --prefix build origin gh-pages
</code></pre>

<p>I have never use git subtree before, it actually does the job that my app is deployed to <code>gh-pages</code> successfully, but when I check the git history, it's totally a mess with a lot of strange ""branches"".</p>

<p><a href=""https://i.stack.imgur.com/HsjAA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HsjAA.png"" alt=""enter image description here""></a></p>

<p>I want to mention that during the deployment, sometimes I have to pull the subtree with <code>git subtree pull --prefix build origin gh-pages</code> to resolve some conflicts that at the time I wasn't sure why.</p>

<p>Now I trying to clean up the history by reset it to the moment before the subtree, here is what I see:</p>

<p><a href=""https://i.stack.imgur.com/i1OAs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/i1OAs.png"" alt=""enter image description here""></a></p>

<p>I trying to remove all those strange-anonymous ""branches"" and get a clean, nice and meaningful history on master branch.</p>

<p>Any help or useful document where I can read to understand this is highly appreciated.</p>

<p>Thanks!</p>

<p><strong>EDIT:</strong></p>

<p>This is <code>git log --graph --oneline --decorate --all</code>:</p>

<p><a href=""https://i.stack.imgur.com/mzEjx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mzEjx.png"" alt=""git log --graph --oneline --decorate --all""></a></p>

<p>This is <code>git branch -vv</code></p>

<p><a href=""https://i.stack.imgur.com/8Z7Q7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8Z7Q7.png"" alt=""git branch -vv""></a></p>
",4,1420186,0,0
73263713,18207598,8/6/2022 22:39,0,64,<github><git-submodules><rebase><git-subtree>,How to rebase through a git add subtree?,"<p>I have a repo called A that I have cloned and am developing on. I have done some development on this repo on my own branch and rebase from master branch to get the most recent version. I can resolve my conflicts relatively easy.</p>
<p>Later on I have added a repo B as a subtree in a folder in repo A's root directory, which relies on repo A. I have to do some development on B as well to match changes on repo A so I have added it as a subtree. I am making changes to both of these repos and doing the commits normally as I would without having a subtree, from root of repo A.</p>
<p>Now, I want to do 2 things.</p>
<ol>
<li>I want to rebase repo A, so that I can pull the most recent changes. I am trying <code>git rebase -i --rebase-merges master</code> after pulling new changes and am getting weird conflicts. Seems that the subtree is trying to commit changes to my root dir, as the repo B README gets dumped into the repo A README causing a conflict.</li>
<li>I want to also be able to rebase my subtree and get the new changes there as well.</li>
</ol>
<p>How do I go about managing this workflow?</p>
",0,18207598,,
67544126,2545197,5/15/2021 7:06,0,223,<git><github><git-subtree>,"Using git, upload new directory after deleting the existing subdirectories to Github without removing the currently deleted dir. from Github","<p>I have <strong>folder A</strong> (git initialized) which has two more <strong>folders 1 and 2</strong>, and these two folders have some files in them. very first time I did <code>add commit push</code> to the master branch and everything is visible on Github.</p>
<p><a href=""https://i.stack.imgur.com/2aFxb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2aFxb.png"" alt=""enter image description here"" /></a></p>
<p>Now, I deleted <strong>folder 1</strong> (from local) and created another <strong>folder 3</strong> (with some files inside it).</p>
<p>My question is, <strong>How to push only folder 3 to GitHub without deleting folder 1 from there?</strong> I was hoping to use subtree but forcing the push with subtree command leads to overwriting of folders/files in the GitHub and only content of <strong>folder 3</strong> is visible.</p>
<pre class=""lang-rb prettyprint-override""><code>git push origin `git subtree split --prefix 3 master`:master --force
</code></pre>
<p><a href=""https://i.stack.imgur.com/Lzpq4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Lzpq4.png"" alt=""enter image description here"" /></a></p>
<p><strong>UPDATE</strong></p>
<p>As mentioned in the comments, this is not how Git works and it is not possible through Git.</p>
",3,2545197,,
32008818,790993,8/14/2015 11:19,2,1122,<git><github><git-subtree>,Update a git subtree branch with new commits from the original branch,"<p>I'm working on dividing part of my main repository into another one. I'm using git subtree to do the work.</p>

<p>So I created a subtree branch with the following command:</p>

<pre><code>git checkout master
git subtree split -P ./Foo -b subtreeBranch
</code></pre>

<p>A new branch is created with the content of Foo, named as <code>subtreeBranch</code>.</p>

<p>But later some changes have been added into the original branch(<code>master</code>), onto the files inside <code>Foo</code>.</p>

<p>How can I update the <code>subtreeBranch</code> with the new commits?</p>
",0,790993,0,0
49859023,9637260,4/16/2018 13:53,1,286,<git><refactoring><git-subtree><git-filter-branch>,How to restructure a git repository into branches,"<p>I have a git repository with a structure like this:</p>

<pre><code>.git\
AB1\
AB2\
CD1\
EF1\
EF2\
</code></pre>

<p>and want to remodel it so that it is contained in three branches:</p>

<p>branchA with folders <code>AB1\ and AB2\</code>, branchB with the folder <code>CD1\</code> and branchC with folders <code>EF1\ and EF2\</code>. So that each branch contains only the folders of this branch but if I merge them back together no folder gets deleted. The history of each folder should be accessible separately and not intermingled like in the original repo. Yet they share a common ancestor as they are the same content in different programming languages.</p>

<p>Finally the history should look like this:</p>

<pre><code>O--A------B--C   &lt;-- branchA
    \
     D--E--F     &lt;-- branchB
         \
          G-H    &lt;-- branchC
</code></pre>

<p>I tried using the <strong>subtree split</strong> and the <strong>filter-branch</strong> methods, but they are either not re-mergeable or destroy the history of folders completely.</p>

<p>Is there any possibility to do this or at least a tool for restructuring git history?</p>
",4,9637260,,
14546990,668767,1/27/2013 11:42,2,514,<git><git-subtree>,git-subtree stable for repos with lots & deeply nested subtrees?,"<p>I'm maintaining a repo of a CMS/framework which currently uses quite a few (25) submodules. Due to all the downsides of submodules, I'd rather switch to Avery Pennarun's git-subtree (note: <em>not</em> the git subtree merge strategy), but I'm hesitant at this point, as i wonder if git-subtree is really stable in a ""<em>large repo/lots of subtrees/deeply nested/lots of flux</em>"" scenario like mine. </p>

<p>Since i had to learn the hard way, that <code>git subtree merge strategy</code> is totally <em>not</em> capable of dealing with my repo/szenario, i'd like to evaluate my odds with git-subtree beforehand.</p>
",0,668767,,
67990094,15237388,6/15/2021 16:26,5,1367,<git><git-subtree>,The library is not added to the git via the git subtree,"<p>I added the GLFV library to the project, through the git subtree, but this warning came out &quot;It looks like either your git installation or yourgit-subtree installation is broken&quot;. Several reasons have also been described why this may be:</p>
<ul>
<li><p>If<code> git --exec-path</code> does not print the correct path to your git install directory, then set the GIT_EXEC_PATH environment variable to the correct directory.</p>
</li>
<li><p>Make sure that your <code>git-core \ git-subtree</code> file is either in your PATH or in your git exec path (<code>C: / Program Files / Git / mingw64 / libexec / git-core</code>).</p>
</li>
<li><p>You should run git-subtree as <code>git core \ git-subtree</code>, not as <code>git-core \ git-subtree</code>.</p>
</li>
</ul>
<p>I checked the link to the library is correct, the file &quot;git-subtree&quot; is there, why then the error pops up.</p>
",1,15237388,0,0
68004876,9761768,6/16/2021 14:39,0,474,<git><git-lfs><git-subtree>,How can I add a git subtree repository without LFS files to a container repository with tracking LFS files?,"<p>I have a repository with tracked files do git-lfs (e.g. files with pattern *.png).</p>
<p>Then I want to add a subtree repository that also contains *.png files, but I don't want to track that files to git-lfs, to keep the subtree repository intact.</p>
<p>How can I do that?</p>
<h4>EDIT:</h4>
<p>As pointed by bk2204 in the comments below, subtrees seems to have problems with git-lfs. Specially when the subtree node has lfs files. The two issues <a href=""https://github.com/git-lfs/git-lfs/issues/1948"" rel=""nofollow noreferrer"">here</a> and <a href=""https://github.com/git-lfs/git-lfs/issues/854"" rel=""nofollow noreferrer"">here</a> bring some information.</p>
<p>I've tried the following procedure with a subtree node <strong>without</strong> lfs inside a repository with lfs.</p>
<p>I would like to know if someone could confirm this simple procedure really works. I'm not having troubles so far (but I made backups)</p>
<hr />
<ol>
<li>First, I edited the <code>.gitattributes</code> file including a line to not track files inside a future folder, that will contain the subtree node.</li>
</ol>
<pre><code>*.png filter=lfs diff=lfs merge=lfs -text
futurefoldername/** -filter=lfs -diff=lfs -merge=lfs -text
</code></pre>
<ol start=""2"">
<li>Then, I add the subtree in that folder:</li>
</ol>
<pre><code>git remote add &lt;remote-name&gt; &lt;url&gt;
git subtree add -P futurefoldername &lt;remote-name&gt; master
</code></pre>
<ol start=""3"">
<li>Now, LFS does not change files inside <code>futurefoldername</code> and it seems to be fine to pull and push with <code>git subtree</code> without LFS files.</li>
</ol>
<hr />
",3,9761768,,
15077570,494150,2/25/2013 22:17,4,589,<git><git-subtree>,git pull subtree deletes everything,"<p>I'm trying to take advantage of the subtree feature in git where I can have a repo that reference an other repo and thus appears to have all the files of both repos.  I have read a couple of intros <a href=""http://www.kernel.org/pub/software/scm/git/docs/howto/using-merge-subtree.html"" rel=""nofollow""><strong>here</strong></a> and <a href=""http://git-scm.com/book/en/Git-Tools-Subtree-Merging"" rel=""nofollow""><strong>here</strong></a> and have tried to follow them.</p>

<p>So I have two repos in git hub.  I do this </p>

<pre><code>git checkout testBranchA
git pull origin testBranchA
git remote add external git@github.com:reharik/repoB
git fetch external
git checkout -b external external/testBranchB
git read-tree --prefix=src/ -u external
git commit -m ""added subtree""
</code></pre>

<p>so now I look at my file sys and I see all the files from both repos and everything is great.  Then I do </p>

<pre><code>git pull -s subtree external testBranchB 
</code></pre>

<p>and it seems that everything in both local repos is deleted.  infact first it does </p>

<pre><code>removing src/...
</code></pre>

<p>on all files, then it seems to do a merge where you see all the files with red and green +'s and -'s, then it does </p>

<pre><code>delete mode 100644 src/...
</code></pre>

<p>for all files</p>

<p>So i'm not sure what I'm doing wrong but clearly it's something. </p>

<p>Any help would be appreciated</p>

<p>=== edit sorry to keep changing the commands, I'm a bit fried at this point but I think this is the syntax I'm using</p>
",1,494150,0,0
15097555,345345,2/26/2013 19:25,1,181,<git><git-subtree>,can git subtree include a subtree?,"<p>I am writing and R package that needs some java classes. We found those java classes in a python project (licenses are compatible, original author supportive). We don't want to include the whole python project, only one subdirectory that luckily has all we need. Can git subtree do such a thing in a way that makes it push/pull from original (python) repo possible? I know one solution would be to factor out the java part in a separate project and have both python and R project subtree that one. Unfortunately we don't have that kind of control on the original project. Thanks</p>
",0,345345,0,0
16829401,2418959,5/30/2013 6:30,20,11510,<git><git-subtree>,Adding git subtree from a branch,"<p>I'm trying to add a repo (called cow) to my project using <code>git subtree add</code>.  In particular, I'd like to add the branch <code>stable</code> (which is not the <code>master</code> branch).  I tried:</p>

<pre><code>git subtree add -P cow https://github.com/geoffryan/cow.git stable
</code></pre>

<p>But this returned the error</p>

<pre><code>'stable' does not refer to a commit.
</code></pre>

<p>I also tried:</p>

<pre><code>git subtree add -P cow https://github.com/geoffryan/cow.git cow/stable
'cow/stable' does not refer to a commit.
</code></pre>

<p>And:</p>

<pre><code>git subtree add -P cow https://github.com/geoffryan/cow.git ca26d248a12c21264e32a2c212381cafb578c9fb
'ca26d248a12c21264e32a2c212381cafb578c9fb' does not refer to a commit.
</code></pre>

<p>The hash was that for the latest commit in the <code>stable</code> branch.  The examples of use I've seen online all use <code>master</code> for the commit, is it possible to use <code>subtree add</code> on a non-master branch?</p>
",0,2418959,0,0
17988378,2641087,8/1/2013 8:05,0,67,<git><git-subtree><sparse-checkout>,"multiple git subtrees from multiple repos, offsetting the directory layout","<p>say I have 2 different git repos:</p>

<pre><code>repo-1:
 /dir11
 /dir12
 /dir13

repo-2:
 /dir21
 /dir22
 /dir23
</code></pre>

<p>so far I only managed the following (with sparsecheckout):</p>

<pre><code>work-repo:
  /repo-1
    /dir11
  /repo-2
    /dir22
    /dir23
</code></pre>

<p>But I'd really like to be able to assemble them in the following fashion:</p>

<pre><code>work-repo:
 /dir11
 /dir22
 /dir23
</code></pre>

<p>and still be able to commit changes in work-repo/dir11 back to repo-1/dir11, ditto for /dir22 and /dir23.</p>

<p>is it possible to achieve such a thing with git-subtree ? (or any other git extension/command)</p>
",2,2641087,,
51613799,1773705,7/31/2018 12:49,2,396,<git><git-subtree>,How to remove a git subtree prefix?,"<p>Meanwhile removing a subtree folder :</p>

<pre><code>git rm -r my-subtree-folder
</code></pre>

<p>All the fines are gone but the subtree prefix is still there.</p>

<p>Ho do I tell git I don't want this prefix anymore?</p>
",0,1773705,0,0
51734782,772309,8/7/2018 20:19,0,89,<git><git-checkout><git-subtree>,Remote git branch checkout from within a git subtree,"<p>We've been using Heroku's review apps to help us better QA our Github issues but recently we switched from one app to two (1 backend, 1 frontend). Often times an issue in one repo will have two PRs (one from each repo) and both will be needed to test the issue.</p>

<p>This has caused me to rethink how we get a single ""review app"" to work with two separate repos and still have a review app that is unique for each individual Github issue we have.</p>

<p>My current plan is to use <a href=""https://docs.gitlab.com/ee/ci/review_apps/"" rel=""nofollow noreferrer"">Gitlab's review apps feature</a>. I'll leave out some of the details for brevity but the problem I'm struggling with right now is how do have one repo that contains two children sub-repos? </p>

<p>I've looked into <code>git subtree</code> but I'm struggling with pulling in the remote branches and running <code>git checkout</code> on the remote branches I need. When I run checkout from within a subtree it replaces all the contents of the folder.</p>

<pre><code>+-- parent-repo &lt;git checkout 14-parent-branch&gt;
|   +-- child-repo-frontend &lt;git checkout 142-frontend-branch&gt;
|   +-- child-repo-backend &lt;git checkout 22-backend-branch&gt;
</code></pre>

<p>^^^ This is ideally what I want. The frontend subtree is checking out a remote branch from the remote frontend repo, same for the backend, and the parent-repo is in its own branch to save that state essentially.</p>

<p>I realize this might be a little long and tough to describe, please let me know if I can better clarify anything.</p>
",0,772309,,
37269796,5575361,5/17/2016 7:30,1,189,<github><github-pages><git-subtree>,git subtree push failed for behind its remote counterpart,"<p>I have a github repository and wanted to make a mockup live with my domain.</p>

<p>Since the index.html is located inside a folder named ""development"" (but not directly in the root), what I did was</p>

<p>a. Create another github repo called ""USERNAME.github.io""</p>

<p>b. Add the remote-url by</p>

<pre><code>git remote add demo-origin git@github.com:USERNAME/USERNAME.github.io.git
</code></pre>

<p>c. push the repo subtree ""development"" by</p>

<pre><code>git subtree push --prefix development demo-origin master
</code></pre>

<p>d. create ""CNAME"" file in my ""USERNAME.github.io""</p>

<p>e. update the DNS to match the CNAME</p>

<p>Now everything works fine. However when I want to push updates again, I got the error message:</p>

<pre><code>git push using:  demo-origin master
To git@github.com:SMARTEDU/SMARTEDU.github.io.git
! [rejected]        a5f0176dc6e0b10fa77a88cffe89a67d087d1f96 -&gt; master (non-fast-forward)
error: failed to push some refs to 'git@github.com:SMARTEDU/SMARTEDU.github.io.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>This was due to the CNAME file added in ""USERNAME.github.io"" repo, but even if I pull it to local, it is still failed when I want to do <code>git subtree push --prefix development demo-origin master</code> again.</p>

<p>Any idea on how to fix it? Very appreciate!</p>
",0,5575361,,
37271130,133747,5/17/2016 8:40,1,492,<version-control><git-subtree><git-subrepo>,Remove git subtree to add git subrepo,"<p>I had a Git repo with the <code>model</code> (the <code>M</code> in <code>MVC</code>) of the project removed and deposited into a separate repo. Then I merged it back with <code>git-subtree</code>. So I have a </p>

<p><code>models</code> branch and what I think are remote tracking branches <code>remotes/models/master</code> <code>remotes/models/models</code>. </p>

<p>Now I just want to obliterate this subtree thing altogether, so I can move it back to a regular full repo. So I can start to use git-subtree. Now how do I remove any relics of the git-subtree?</p>

<p>I tried to delete local branches and remote branches. But I cannot remove remotes/models/master by <code>git push models --delete master</code>. It said:</p>

<pre><code>remote: error: refusing to delete the current branch:
refs/heads/master To https://XXX@bitbucket.org/XXX/XXXXXmodels.git 
! [remote rejected] master (deletion of the current branch prohibited)
</code></pre>

<p><strong>EDIT:</strong></p>

<p>I think I just want to remove a reference to that <code>model</code> repo. I can manually remove that remote project from Bitbucket later.</p>
",0,133747,,
71115723,7927036,2/14/2022 17:16,1,184,<flutter><gitlab><git-subtree>,Unable to add git subtree,"<p>I am trying to establish a git subtree in my project and for some reason I keep getting a message saying <code>You must provide the --prefix option.</code> I am making a Flutter project and the project repo (as well as sub repo) are both on gitlab.</p>
<p>Below is the command that I am running in the console while in my root project directory.</p>
<pre><code>git subtree add —-prefix=subtrees/mysubtree https://git.company.com/subdirectory/subtree_repo.git master — squash
</code></pre>
<p>I have experimented a little with the command. For instance I tried <code>—-prefix subtrees/mysubtree</code> (sans <code>=</code>), as well as <code>git config alias.sba 'subtree add --prefix subtrees/mysubtree / https://git.company.com/subdirectory/subtree_repo.git master —-squash'</code>.</p>
<p>The last command doesn't throw any errors and it actually triggers <code>pub get</code> but no files change and no directories are added (at least not to the root which is where I am running the command).</p>
<p>I am not really sure what I am doing wrong and the messages (when there are messages) aren't very informative. I have checked my syntax and referenced it with <a href=""https://docs.gitlab.com/ee/topics/git/subtree.html"" rel=""nofollow noreferrer"">Gitlab</a> as well as with <a href=""https://www.netways.de/en/blog/2016/01/14/working-with-git-subtree/#:%7E:text=Purge%20a%20subtree,unlike%20known%20from%20git%20submodules."" rel=""nofollow noreferrer"">this</a> post.</p>
",0,7927036,,
71118955,3263659,2/14/2022 22:20,1,1533,<git><github-actions><git-submodules><git-subtree>,How to have the .github workflows sharable or reusable,"<p>We have a repo that contains a bunch of workflows that we want to share amongst all of our dev repositories.</p>
<pre><code>github-common-workflows repository:
  workflows/build.yml
  workflows/test.yml
</code></pre>
<p>Is there a way to import the repo above as a submodule or subtree within our dev repos, e.g.:</p>
<pre><code>dev-repo repository:
  .github/&lt;point to the github-common-workflows repo&gt;
</code></pre>
<p>BECAUSE - when using submodules, github actions will not recognize any workflows at all Hence no github workflow will be triggered (e.g. upon push)</p>
<p><strong>Any ideas how to achieve a single place that contains all the workflows and shared amongst all repos?</strong></p>
",1,3263659,0,0
38476378,6155053,7/20/2016 8:41,2,279,<git><repository><gitlab><code-organization><git-subtree>,Managing an imported subtree in a git repository,"<h2><strong>tl,dr version:</strong></h2>

<p>Is it to be expected that code added to a repo via ""git subtree add"" shows in that (server side) repo as if it had been added as regular files? Are the files showing a copy or (as hoped) just a reference?</p>

<h2><strong>full version:</strong></h2>

<p>I'm pretty new to git (used SVN and Perforce excessively before, but in my new job, we're using gitlab now) and recently decided to move out part of the code I have in my current software project's repository to a separate repo, since that seemed to make more sense structurally. 
To be precise, I stripped out a folder 'Infrastructure' from my current project (let's call that 'DynamicDisplays') via ""subtree split"".</p>

<p>I followed these guides</p>

<ul>
<li><a href=""https://makingsoftware.wordpress.com/2013/02/16/using-git-subtrees-for-repository-separation"" rel=""nofollow noreferrer"">https://makingsoftware.wordpress.com/2013/02/16/using-git-subtrees-for-repository-separation</a></li>
<li><a href=""https://stackoverflow.com/a/17864475"">https://stackoverflow.com/a/17864475</a></li>
<li><a href=""https://lostechies.com/johnteague/2014/04/04/using-git-subtrees-to-split-a-repository/"" rel=""nofollow noreferrer"">https://lostechies.com/johnteague/2014/04/04/using-git-subtrees-to-split-a-repository/</a></li>
</ul>

<p>to the best of my knowledge.</p>

<p>I removed and re-added the folder from the ""DynamicDisplays"" GitLab project (their extended version of the server side repository. I'm not too saddle fast in git's terminology yet) via  </p>

<pre><code>git subtree add --prefix=Infrastructure Infrastructure master
</code></pre>

<p>as described in the tutorials.</p>

<p>I <em>do</em> have the separate project (""Infrastructure"") for the repo I wanted to split off now, and I do see the commit about the removal of the split off code in the ""DynamicDisplays"" GitLab project. </p>

<p>But the ""DynamicDisplays"" GitLab project still seems to contain that content (everything in the ""Infrastructure"" subfolder) as well — at least the project's file/folder structure view still shows it). </p>

<p>The GitLab project shows a commit ""Merge commit '018973f3' as 'Infrastructure'"" from when I did the ""subtree add"". Did that re-introduce the content (as opposed to ""just a reference"")?</p>

<p>I also see no way to distinguish the subtree contents from 'native' repository contents in the local file browser (Explorer in my case, since I'm on Windows 8.1 here at work).</p>

<p>Should this be the case? Do I just see the referenced contents and everything worked as expected? Do you know of a way to check and maybe visualize this (as it might make a difference for future users of the project)?</p>

<p>Unfortunately, noone here knows git either, the one person that introduced it has since moved on again (before I even joined), and before that, they didn't use any RCS at all (most even still don't). So there's nobody here that I could ask.</p>

<p><strong>Edit:</strong></p>

<p>After some more experimentation (and commits &amp; pushes to the 'Infrastructure' repository), I get no notice in the repo containing the subtree that files have changed in the master 'Infrastructure' repo. Which was kinda part of what I was after.</p>

<p>Does anyone have an idea about how I can reference another repo like that? Will I have to use submodules instead (or are they not able to provide that either?)?</p>

<p>I went with subtree because of many recommendations to use that in submodule's stead for easier management, but I currently don't see it having <em>any</em> advantage over just copying the code over… which is a total shame, and I'm pretty sure I only missed something somewhere.</p>
",2,6155053,0,0
71533343,1782553,3/18/2022 21:26,0,169,<git><git-submodules><git-remote><git-subtree>,git push specific files to another remote,"<p>I have a git repository containing several linked projects like</p>
<pre><code>|-- configs
|   |-- A.py
|   `-- B.py
|-- datasets
|   |-- a.py
|   |-- b.py
|   `-- c.py
|-- models
|   |-- x.py
|   `-- y.py
`-- projects
    |-- A.py
    |-- B.py
    `-- common.py
</code></pre>
<p>I would like to publish a subset of those files with a new remote. From reading the documentation, it's seems not possible. What alternative would you suggest?
I'm thinking of:</p>
<ul>
<li>copy-pasting to a new repository (but if code is updated on one side, I won't benefit from the changes on the other side</li>
<li>pushing the whole repository to the new remote (but I'm not sure I want to share everything)</li>
<li>Restructuring repo and use submodules or git subtree (but it gets complicated for the common files, that would mean creating 3 repositories (one for each project + one for common things, which is messy to maintain, especially for very few files)</li>
</ul>
<p>Any advice on how to address this problem?</p>
",1,1782553,,
71730329,368599,4/3/2022 22:29,1,47,<git><git-subtree>,Share the remotes that are added locally to make working with git subtree a bit easier,"<p>Going through the tutorial here: <a href=""https://www.atlassian.com/git/tutorials/git-subtree"" rel=""nofollow noreferrer"">https://www.atlassian.com/git/tutorials/git-subtree</a></p>
<p>On the surface it seems that <code>subtrees</code> are more work than <code>submodules</code> with multiple members on the team.</p>
<p>For example, if I have 10 submodules and add an 11th one the submodule remote url is added to the repository itself. All my colleagues have to do is run <code>git submodule update --init --recursive</code> and things work as expected. They don't need to know the submodule details.</p>
<p>With subtree, I have to either add a script or ask all my colleagues to manually add the remotes. From the tutorial: <code>git remote add -f tpope-vim-surround https://bitbucket.org/vim-plugins-mirror/vim-surround.git</code>. This is tedious and error prone (or requires us to maintain a script to add the remotes - which <em>could</em> lead to conflicts if there is a remote name that already exists).</p>
<p>This becomes even more painful when a new maintainer joins the group and now has to setup all 11 remotes. I hope I am missing something here that makes subtrees easier to use in a large team?</p>
",1,368599,,
71780264,1900720,4/7/2022 10:12,1,32,<git><git-subtree>,Customize git subtree merge,"<p>I'm trying to merge a sub-repo into a main-repo in GIT.</p>
<p>my sub-repo file explorer</p>
<p><a href=""https://i.stack.imgur.com/F6qik.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/F6qik.png"" alt=""my sub-repo file explorer"" /></a></p>
<p>While doing the merge, I'm providing a specific folder for each of my sub-repo files &amp; folders, for example my sub-repo/scripts folder to be moved under super-repo/test2-scripts. I'm able to do this using the git read-tree command. But the same cannot be done for files like readme.md, package.json and other such files. Is there any way to do this?</p>
<p>Here are the list of commands I executed in the super-repo.</p>
<pre><code>git remote add -f test2 ssh://git@bitbucket.trimble.tools/twc/test2.git

git merge -s ours --no-commit --allow-unrelated-histories test2/master

git read-tree --prefix=src/test2-src/ -u test2/master:src

git read-tree --prefix=test2-config/ -u test2/master:config

git read-tree --prefix=test2-scripts/ -u test2/master:scripts

git read-tree --prefix=test2-public/ -u test2/master:public
</code></pre>
<p>my super-repo current file explorer</p>
<p><a href=""https://i.stack.imgur.com/hmD3E.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hmD3E.png"" alt=""my super-repo current file explorer"" /></a></p>
<p>I also want to know how do I fetch and merge the latest changes from sub-repo to super-repo? It is possible if I just put the entire sub-repo under a single directory using
<code>git pull -X subtree=src/test2/ test2 master</code>. But when I specify a separate folder for each sub-repo folder in super repo how do I mention those different folders in pull?</p>
",1,1900720,0,0
54033506,1495342,1/4/2019 5:28,1,45,<git><git-submodules><git-subtree>,How to link a subfolder from one git repository into another?,"<p>I have 2 git repositories in following structure.</p>

<pre><code>Repository1 -&gt; src
            |
            -&gt; res


 Repository2 -&gt; src
             |
             -&gt; res
</code></pre>

<p>I want to link subfolders in Repository2 to Repository1, so that final folder structure would look something like : </p>

<pre><code>Repository1 -&gt; src -&gt; Repository2src
            |
            -&gt; res -&gt; Repository2res
</code></pre>

<p>Is there any way I could do this?</p>
",0,1495342,0,0
72019163,1642344,4/26/2022 18:56,3,393,<git><git-subtree>,git subtree to add the files directly under root folder,"<p>I want to add a source repo B into a target repo A directly under the parent folder '<code>application</code>' of A by using:</p>
<pre><code>git subtree add --prefix=application &lt;remote name of B&gt; &lt;branch name of B&gt;
</code></pre>
<p>while being at the parent folder of A.</p>
<p>By doing the above, the result is to create a folder 'application' under the parent folder 'application'. What I want is not to create any child folder, just to append everything under parent folder. I have tried anything like <code>--prefix, --prefix=./</code>
Nothing works. Is there a way to do that?</p>
",2,1642344,,
54172820,1987629,1/13/2019 20:18,1,212,<git><git-submodules><git-subtree><git-subrepo>,"git submodules, subtrees or else","<p>Probably, i misunderstood how git works, I have my directory structure as follows:</p>

<pre><code>project (git-repo)
  project 1 (git-repo)
  project 2 (git-repo)
  common scripts (git-repo)
</code></pre>

<p>All these folders have their own repositories where the main <code>project</code> can have child repositories such as <code>project 1</code>, <code>project 2</code>, <code>child scripts</code>. They can be submodules or subtree. The problem, the <code>common scripts</code> contain some of the codes that is common and essential to build both <code>project 1</code> and <code>project 2</code>. What can be best strategy to maintain this so that each project can be independent as well as no need to keep common scripts in two places.</p>
",1,1987629,,
56589094,2870769,6/13/2019 22:02,3,616,<git><git-subtree>,How can I add a subdirectory of another git repository?,"<p>I'd like to add a subfolder of a public github repository into a subfolder of my own repository.
I found a few solutions with git-sub-tree but there seems to be no way to pull changes from the original repository.</p>

<p>Is there a solution where I can merge changes from upstream?</p>
",1,2870769,,
55617199,12248433,4/10/2019 16:20,1,31,<git><github><git-submodules><git-subtree>,Can I share a subdirectory with other subdirectories in the same git repo?,"<p>Let's say my repo structure is currently something like:</p>

<pre><code>ROOT
--LanguageA
----Project A-LangA
----Project B-LangA
----Project C-LangA
--Language B
----Project A-LangB
------SharedFile-1
------SharedFile-2
------SharedFile-3
----Project B-LangB
------SharedFile-1
------SharedFile-2
------SharedFile-3
----Project C-LangB
------SharedFile-1
------SharedFile-2
------SharedFile-3
</code></pre>

<p>Currently, if I need to update <code>SharedFile-1</code>, I need to do so within each <code>Project</code> directory. Is it possible to use <code>git submodule</code> or <code>git subtree</code> to create something like:</p>

<pre><code>ROOT
--LanguageA
----Project A-LangA
----Project B-LangA
----Project C-LangA
--Language B
----Project A-LangB
------SharedFile-1 (auto-updating clone)
------SharedFile-2 (auto-updating clone)
------SharedFile-3 (auto-updating clone)
----Project B-LangB
------SharedFile-1 (auto-updating clone)
------SharedFile-2 (auto-updating clone)
------SharedFile-3 (auto-updating clone)
----Project C-LangB
------SharedFile-1 (auto-updating clone)
------SharedFile-2 (auto-updating clone)
------SharedFile-3 (auto-updating clone)
----Language B Shared Files
------SharedFile-1
------SharedFile-2
------SharedFile-3
</code></pre>

<p>...such that I only have to make edits to <code>ROOT/Language B/Language B Shared Files/*</code> and the changes auto-update in each <code>ROOT/Language B/Project *</code> dir when a user clones the whole repo?</p>

<p>I know I can break it out into a separate repo. But is it possible to have the above structure? I also know I can create an automation script that does this, but I'm trying to use the above structure, to the extent possible.</p>
",2,12248433,,
55816955,2061905,4/23/2019 18:00,0,147,<git><git-subtree>,Missing commits when using 'git subtree split',"<p>I had a task which is about extracting a folder from a repo and create a repo with the history of the folder extracted. I've searched the internet and I found people talking about <code>git subtree</code> and I used it as follows : 
<code>git subtree split -P &lt;PATH_TO_FOLDER&gt; -b BRANCH_NAME</code></p>

<p>After finishing the process, I found that the commits in the branch created less than the commits when I <code>git log PATH_TO_FOLDER</code> and I don't know why this happens. </p>

<p>Is there any way to do this without missing any commits?</p>
",4,2061905,,
55831031,6208896,4/24/2019 13:18,1,1555,<angular><git><npm><git-subtree><angular-library>,How to publish an Angular Shared library to private a git server,"<p>I've made an angular 6 library using <code>ng generate library my-lib</code>, and now I need to publish it, however it cannot go to NPM since its a private code.</p>

<p>At my company we have a private git server and I need to publish there, we already have some NPM Node.js libraries published there but publishing the Angular one giving us trouble.</p>

<p>I've managed to build the library with <code>ng build my-lib</code> then <code>cd dist/my-lib</code> and packing it with <code>npm pack</code> that gives me a the <code>.tgz</code> bundled library that can be installed directly to another project. </p>

<p>However this is not a good solution for distributing controlled versions.</p>

<p>So after some research I've found the best candidate so far, that is using <code>git subtree</code>, in order to place the <code>dist/my-lib</code> into another repo, then it can be installed to another project easily with <code>npm install git+ssh://git@server:/git/my-lib-dist.git</code>
Based on this guide <a href=""https://medium.com/@sunnysun_5694/share-angular-6-library-between-multiple-apps-275c11757ffc"" rel=""nofollow noreferrer"">Share Angular 6 Library between Multiple Apps</a></p>

<p>So I created a secondary repo, and then with:
<code>git subtree add --prefix dist/my-lib MY-REMOTE master</code></p>

<p>And push the changes with:
<code>git subtree push --prefix dist/my-lib MY-REMOTE master</code></p>

<p>This works fine, but there is a problem, I had to remove the <code>/dist</code> folder from my <code>.gitignore</code> in order for it to work, and now git tracks the changes of the built library, and I have to commit and push it to the repo, and the built libraries are quite heavy.</p>

<p>How can I have the <code>dist/my-lib</code> folder pushed to the dist repository, and not have it tracked or pushed to the source repository?</p>

<p>Is this the best approach to my question or is there a better alternative.</p>
",4,6208896,0,0
73158171,2161941,7/28/2022 19:20,0,61,<git><git-subtree>,What is the technique/process for doing a temporary git checkout into another directory of the current checkout without messing up my current checkout,"<p>The scenario is that I'm in the middle of a task, in a feature branch, and then I've been asked to do a quick hot fix, or do some tests on another branch.</p>
<p>And so, one approach is to close up my current work, either stashing (and hope I remember that I've stashed it), or commit it to my local repo, with then the option of pushing that with a &quot;WIP&quot; prefix (Work In Progress).</p>
<p>All of which are really annoying and can take time.</p>
<p>What I would like to happen is that I run something like:</p>
<pre><code>git fetch
git something to clone the required branch, or create a new branch for the required hotfix into a separate directory with that directory not needing to have the full .git folder
cd to other folder
do the work
git add .
git commit -m 'Some sarky comment that no one reads'
git push
cd back to my main checkout
git something to make it forget all about the other directory and maybe even delete it!
and just carry without needing to unstash or any other waste of time stuff
</code></pre>
<p>Of course, this could all be wrapped up into a shell function or script, and so be simplified.</p>
<p>I had thought sub-trees where the thing, but I couldn't get the subtree created.</p>
<p>As an example, working with <code>app</code> and wanting to look at master:</p>
<pre><code>$ git subtree add -d --prefix=../app-master/ origin master
command: {add}
quiet: {}
dir: {../app-master}
opts: {origin master}

git fetch origin master
From bitbucket.org:digitickets/app
 * branch                  master     -&gt; FETCH_HEAD
Adding ../app-master as 'b03a1ea06e26cfae0d49483c9027ecd6aab210c8'...
error: invalid path '../app-master/.babelrc'
</code></pre>
<p>At this point in time, the <code>../app-master</code> directory doesn't exist.</p>
<p>If I create that directory:</p>
<pre><code>$ git subtree add -d --prefix=../app-master/ origin master
prefix '../app-master' already exists.
</code></pre>
<p>The error that git-subtree is making is in response to:</p>
<pre><code>git read-tree --prefix=../app-master b03a1ea06e26cfae0d49483c9027ecd6aab210c8
</code></pre>
<p>which sort of suggests that the content of <code>../app-master</code> should already be populated.</p>
<p>And so, I think I've misunderstood what Git's SubTrees are all about or that I'm attempting to misuse them and so not going to work.</p>
<p>Any suggestions?</p>
",2,2161941,,
