Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,AnswerCount,FavoriteCount
"19669078","1302408","2013-10-29 21:04:03","0","41","<git><git-svn>","Git-SVN: How to configure git to ignore SVN URL in SHA1 computation","<p>Following is my SVN server setup where development team is on serverA which is being mirrored on ServerB, now thegitweb is pulling latest information from SVN ServerB which means SHA1 are different from what we see in the history.</p>

<pre><code>SVN ServerA --- Mirror ---&gt; SVN ServerB
     |                           |                          
     |                           |
  Development                  GitWeb 
(Using git-svn)             
</code></pre>

<p>Is there anyway I can keep SHA1 in development and GitWeb in sync? I have tried svn-remote config rewriteRoot= SVN ServerA but it didn't help here.</p>
","0","1302408",""
"19489935","2886923","2013-10-21 08:50:25","1","1333","<git><git-svn>","""git svn fetch"" creates index.lock file then complains about it","<p>I'm migrating a large subversion repository, with history, to git. I started by cloning the svn repo using 'git svn clone' command. This crashed while cloning, however, I resumed the migration by executing 'git svn fetch'. The migration had been running successfully for a couple of days - occasionally it crashed and I had to delete the index.lock file as detailed here - <a href=""https://stackoverflow.com/questions/16602544/fatal-unable-to-create-git-index-lock-file-exists"">fatal: Unable to create &#39;/.git/index.lock&#39;: File exists</a>. After deleting this file a couple of times it successfully continued until I ran into the same error:</p>

<pre><code>    fatal: Unable to create '/path/index.lock': File exists.

If no other git process is currently running, this probably means a
git process crashed in this repository earlier. Make sure no other git
process is running and remove the file manually to continue.
read-tree f49b2a08d26076d9cb2828b9aba5fde30d46f73b: command returned error: 128
</code></pre>

<p>However, this time deleting the index.lock file did not work and 'git svn fetch' continues to complain. Here is what is happening:</p>

<p>I get the above error<br>
I delete the index.lock file<br>
I restart 'git svn fetch'<br>
'git svn fetch' process recreates the index.lock file<br>
'git svn fetch' errors again with the above error<br></p>

<p>So 'git svn fetch' appears to be in some bad loop where it's re-creating the index.lock file then then complains about it existing. So:</p>

<p>I've deleted the index.lock file.<br>
I've ensured that the machine has enough disk space.<br>
I've tried rebooting the machine in case there was an old git processing hanging around that was holding on to the lock file.<br>
I've done a git gc and a git prune as advised here <a href=""https://stackoverflow.com/questions/1356233/fatal-git-write-tree-error-building-trees/1436386#1436386"">fatal: git-write-tree: error building trees</a><br></p>

<p>None of the above has worked and I'm new to git. I don't want to re-start the migration as it takes days to run. Can anyone suggest something else I could try?</p>
","0","2886923",""
"19712735","470769","2013-10-31 17:11:14","28","11558","<git><git-svn>","git-svn: Cannot setup tracking information; starting point is not a branch","<p>In git 1.7.9.5 I could run the following lines without error:</p>

<pre><code>export SVNPASS=readonly
git clone git@github.com:dtenenbaum/RGalaxy.test.git
cd RGalaxy.test/
git config --add svn-remote.hedgehog.url https://hedgehog.fhcrc.org/bioconductor/trunk/madman/Rpacks/RGalaxy
git config --add svn-remote.hedgehog.fetch :refs/remotes/hedgehog
# the following is a shortcut to avoid fetching every commit since antiquity, since I happen to know the commit number
# where this folder was added to svn:
echo $SVNPASS | git svn fetch --username readonly hedgehog -r 65762:HEAD
git checkout -b local-hedgehog -t hedgehog
</code></pre>

<p>In git 1.8.3.4 and 1.8.4.1 that last line results in:</p>

<pre><code>fatal: Cannot setup tracking information; starting point 'hedgehog' is not a branch.
</code></pre>

<p>The comments to <a href=""https://stackoverflow.com/questions/17852249/svn2git-cannot-setup-tracking-information"">this question</a> suggest downgrading, but I'd like to know why this is happening: is it a bug? And if so, has it been reported? Or is there a better way to do this and if so, what is it?</p>

<p>Incidentally, ""git branch -a"" returns:</p>

<pre><code>* master
  remotes/hedgehog
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>
","0","470769","0"
"19584385","2918979","2013-10-25 08:05:14","1","194","<git><git-svn><rebase>","where is git-svn's git-svn TAG?","<p>I am using git-svn in order to practice with git. I mean I am by no means a git expert. In the beginning I found git daunting but I am getting fascinated by git's design and power. I have a question I could not answer searching on internet, perhaps because it is difficult to search for.</p>

<p>After some days of development on a feature branch using git (after cloning with git-svn), I want to rebase the commits before I <em>git svn dcommit</em>. I do not want to flood the svn integration branch with dozens of small, meaningless commits. For that I know I can use <em>git rebase -i</em>.</p>

<p>This command needs to have a commit specified. I have read I can use a (tag?) called <em>git-svn</em>. Indeed, such a commit/tag exists, I can <em>git log git-svn..</em>, or <em>git rebase -i git-svn</em>.</p>

<p>So far so good, this works. Now, after this introduction, my question:</p>

<p>What is this <em>git-svn</em> reference? A tag? A commit? Command <em>git tag --list</em> shows nothing, and <em>git-svn</em> as a tag does not exist on the other git clones I have used to work.</p>

<p>Another question: After I <em>git svn dcommit</em>, will that reference be changed? Can it be changed manually?</p>

<p>Thanks.</p>
","0","2918979",""
"267101","13989","2008-11-05 23:11:16","6","355","<git><version-control><git-svn>","git-svn: is there a way to get it to play nice with submodules, or ignore them?","<p>once you have a commit that contains a submodule object, you pretty much cannot get git-svn to commit past it.</p>

<p>Any ideas, workarounds, anything that is not ""don't use submodules with git-svn""?</p>

<p>So far the answer seems to be a big NO.</p>

<p>Is there any way to at least allow existing git commits containing submodule data to be committed to svn without the submodule data? Even if it means rewriting the tree.</p>
","1","13989","0"
"268736","13989","2008-11-06 13:44:19","90","20738","<git><version-control><git-svn>","git-svn: what's the equivalent to `svn switch --relocate`?","<p>An svn repository I'm mirroring through git-svn has changed URL.</p>

<p>In vanilla svn you'd just do <code>svn switch --relocate old_url_base new_url_base</code>.</p>

<p>How can I do this using git-svn? </p>

<p>Simply changing the svn url in the config file fails.</p>
","2","13989","0"
"7505660","469956","2011-09-21 19:39:39","4","496","<git><git-svn>","How to create git remote branch for svn repository","<p>I am using GIT on top of one centralized SVN repository. The SVN repository only contains trunk, no tags and branches. What I did before is using git svn to clone the remote repository to my local git workspace, I am the only developer works on it so everything works well.</p>

<p>Now, few more developers come in and we should work on this svn repository, what I want to create remote git branches for the subversion trunk, so that all developers can work together on these git branches. I do not want to create subversion branches because they are too heavy. But after doing some search, it seems like git svn does not support this feature, or am I missed something?</p>

<p>I've been also thinking that make my git local branch remote to share with other developers, but not sure if this works either.</p>
","4","469956","0"
"14641483","1581090","2013-02-01 07:18:07","1","143","<git><git-svn><svn-externals>","How did git(-svn) set correct links to svn:externals?","<p>This is not a question about something not working, it is a question to understand why something is working. Here is my setup:</p>

<pre><code>projects
   |
   |--- mylibs
   | 
   |--- main
</code></pre>

<p>I have two different, unrelated <code>git-svn</code> checkouts <code>mylibs</code> and <code>main</code>. They were clones from very different places in the repositories. Now, a <code>svn commit</code> was made by someone else in which an external has been added in <code>main</code> to point to <code>mylibs</code> (i.e. a <code>svn</code> checkout of <code>main</code> would contain a directory <code>mylibs</code>, which is an external to <code>mylibs</code>). </p>

<p>Just out of curiosity I changed into <code>main</code> and did a <code>git svn rebase</code> just to see what git would do with the externals. <code>git</code> created a link as follows:</p>

<pre><code>mylibs -&gt; ../mylibs
</code></pre>

<p>which is what I want , but I do not know how this is possible. Because the local git checkout of <code>main</code> does not know that in the upper directory is a checkout of <code>mylibs</code>. </p>

<p>Is this a new feature? Does git know of all local clones/checkouts on my local disk/home directory? </p>
","4","1581090",""
"76174843","79125","2023-05-04 15:24:57","0","18","<git><svn><version-control><git-svn>","How should I set git's autocrlf on a git-svn repository?","<p>How can I safely configure git-svn so I don't unintentionally change line endings when dcommitting to svn?</p>
<p>I'm currently using git's <code>autocrlf=false</code> and Unix <code>file</code> shows a mix of line endings:</p>
<pre><code>&gt; file *
actionbutton.lua:         ASCII text, with CRLF line terminators
animbutton.lua:           ASCII text
</code></pre>
<p>And not all files have <code>svn:eol-style</code> set:</p>
<pre><code>&gt; git svn propget svn:eol-style actionbutton.lua
`actionbutton.lua' does not have a `svn:eol-style' SVN property.

&gt; git svn propget svn:eol-style animbutton.lua
native
</code></pre>
<p>This project uses the <a href=""https://editorconfig.org/"" rel=""nofollow noreferrer"">editorconfig</a> setting <code>end_of_line = crlf</code> which causes my editor to change line endings in files I edit. I didn't experience this problem when using svn directly (without git-svn).</p>
<p>The <a href=""https://svnbook.red-bean.com/en/1.7/svn.advanced.props.file-portability.html"" rel=""nofollow noreferrer"">svn docs</a> say that <code>svn:eol-style=native</code> stores line endings as LF:</p>
<blockquote>
<p>by default, Subversion doesn't pay any attention to the type of end-of-line (EOL) markers used in your files...</p>
</blockquote>
<blockquote>
<p>native:</p>
<p>Note that Subversion will actually store the file in the repository using normalized LF EOL markers regardless of the operating system. This is basically transparent to the user, though.</p>
</blockquote>
<p>So I guess git-svn is skipping the LF-&gt;CRLF process that svn does because I've disabled autocrlf?</p>
<p><a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration"" rel=""nofollow noreferrer"">git docs for autocrlf</a> say:</p>
<blockquote>
<p>If you’re a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to false</p>
</blockquote>
<p>Everyone's on Windows, so we all expect CRLF. That describes my project, but I can't tell how it's going to interact with svn.</p>
","3","79125",""
"76174880","79125","2023-05-04 15:28:46","0","17","<git><svn><version-control><git-svn>","How do I fetch additional history in a git-svn clone?","<p>I've already done <code>git svn clone</code> to create a repo. It has one year of history. I want to extend how far back my history goes. How can I do that?</p>
<p>I tried using fetch with my start revision, but it did nothing and had no output:</p>
<pre><code>git svn fetch -r 100000
</code></pre>
<p>I have existing branches with work that's not yet dcommitted to svn, so I don't want to create a new clone.</p>
","0","79125",""
"76426089","16249564","2023-06-07 18:21:14","-1","10","<git><svn><git-branch><git-svn><git-push>","I have converted a Subversion(svn) repo to git repo. I want to push a branch from it to a already created branch in git","<ol>
<li>svn has branchA-&gt;converted to git branchA(along with history).</li>
<li>created a git repo in bitbucket-&gt; created a branch B from master.</li>
<li>Now, I want to push all changes of branchA to branchB.
(Note: If I directly push branchA to git repo, it's showing as detached head. no relation between master and the pushed branch)</li>
</ol>
<p>(Note: If I try to merge branchB to master, it's saying cann't merge unrelated branches. No common ancestor)</p>
","1","16249564",""
"76455182","15582009","2023-06-12 09:17:56","0","4","<git-svn>","using git-svn with XCode to commit and fetch","<p>we are using svn in our company and since XCode doesn't support that anymore i have been looking at svn-git. But i didn't fully understand it. Can i make it so, that committing from XCode will also commit the changes to the svn repository or would i still have to run commands from terminal aftwerwards?</p>
","0","15582009",""
"76502989","264822","2023-06-19 00:25:15","0","18","<git><svn><git-svn>","Update old git repo from Subversion","<p>I started working with gSOAP and found a git version of the source code in <a href=""https://github.com/stoneyrh/gSOAP"" rel=""nofollow noreferrer"">Github</a>. But it turned out this repo hasn't been updated for 10 years. Since it's the top entry for &quot;gsoap source code&quot; in Google I wanted to update it, but I have no idea how it was originally created. Is it possible to update it using git svn?</p>
","0","264822",""
"40503254","4328594","2016-11-09 09:11:05","2","294","<git><svn><version-control><git-svn>","What svn command is used by ""git svn fetch <svn-remote>""?","<p>I have an svn repository, I have created its svn-remote in an existing Git repository. I use ""git svn fetch "" command to fetch the data from svn repository.</p>

<p>In svn we create a working copy by checking out the required path/folder/project.</p>

<ol>
<li>An svn repository can be accessed only using subversion tools ?</li>
<li>If so, So how does git svn download/fetch the svn data, which svn command it uses ? I see some subversion related dll files under ""C:\Program Files\Git\usr\bin"", msys-svn_client-1-0.dll must be the svn agent used by Git.</li>
<li>does git svn maintain any working copy or it uses some different mechanism to fetch the data, If so then what is it ?</li>
</ol>
","7","4328594","0"
"2676912","81491","2010-04-20 16:35:20","127","25430","<git><git-svn>","Resuming git-svn clone","<p>I started cloning an SVN repository using the git-svn's clone operation.  After about 6 hours of importing (it's a big repo), my computer went and slept on me.  Is there a way to resume the operation without redoing all of the initial work?</p>
","0","81491","0"
"40517784","2374478","2016-11-09 23:35:35","2","523","<git-svn><sparse-checkout>","Unignore directories in git-svn (adding directories to a sparse checkout)","<p>When using git svn, a sparse checkout of the central repository may be achieved by something along the lines of</p>

<pre><code>git clone -s URL-to-root --include-paths 'dir1|dir2|dir3'
</code></pre>

<p>After using this setup for some time, I would like to add another directory dir4 to those tracked. This directory has existed in many commits that I have already checked out. Editing the variable svn-remote.svn.include-paths by running</p>

<pre><code>git config --edit
</code></pre>

<p>does not have the desired  effect on <code>git fetch</code> (only files changed in future commits will be checked out as they are changed; not immediately), and the following also does not check out dir4:</p>

<pre><code>git svn fetch --include-paths dir4
</code></pre>

<p>I think the following would work but would be very ineffective due to refetching all revisions since the first revision at which dir4 appeared for the first time (let's call it REV):</p>

<pre><code>git svn reset -r REV
git svn fetch --include-paths dir4
git svn rebase
</code></pre>

<p>What would be a better way of tracking dir4? What if I do not care about the history of dir4?</p>

<p>Is there a better way to do the initial sparse checkout with git-svn if I suspect I will want to change the list of tracked directories later? I have also tried starting by listing the directoreis that are not to be fetched in the original commit, but I do not know how to unignore them later:</p>

<pre><code>git svn fetch --ignore-paths dir4
</code></pre>

<p>But how do I tell git to stop ignoring <code>dir4</code> when I decide I want to check it out as well?</p>
","1","2374478","0"
"2795620","82733","2010-05-08 21:05:49","13","2280","<svn><git><github><git-svn>","Tracking upstream svn changes with git-svn and github?","<p>How do I track upstream SVN changes using git-svn and github?</p>

<p>I used git-svn to convert an SVN repo to git on github:</p>

<pre><code>$ git svn clone -s  http://svn.osqa.net/svnroot/osqa/ osqa
$ cd osqa
$ git remote add origin git@github.com:turian/osqa.git
$ git push origin master
</code></pre>

<p>I then made a few changes in my git repo, committed, and pushed to github.</p>

<p>Now, I am on a new machine. I want to take upstream SVN changes, merge them with my github repo, and push them to my github repo. <a href=""http://github.com/guides/import-from-subversion"" rel=""noreferrer"">This documentation</a> says: ""If you ever lose your local copy, just run the import again with the same settings, and you’ll get another working directory with all the necessary SVN metainfo.""</p>

<p>So I did the following. But none of the commands work as desired. How do I track upstream SVN changes using git-svn and github? What am I doing wrong?</p>

<pre><code>$ git svn clone -s  http://svn.osqa.net/svnroot/osqa/ osqa
$ cd osqa
$ git remote add origin git@github.com:turian/osqa.git
$ git push origin master
To git@github.com:turian/osqa.git
 ! [rejected]        master -&gt; master (non-fast forward)
error: failed to push some refs to 'git@github.com:turian/osqa.git'
$ git pull
remote: Counting objects: 21, done.
remote: Compressing objects: 100% (17/17), done.
remote: Total 17 (delta 7), reused 9 (delta 0)
Unpacking objects: 100% (17/17), done.
From git@github.com:turian/osqa
 * [new branch]      master     -&gt; origin/master
From git@github.com:turian/osqa
 * [new tag]         master     -&gt; master
You asked me to pull without telling me which branch you
want to merge with, and 'branch.master.merge' in
your configuration file does not tell me either.  Please
name which branch you want to merge on the command line and
try again (e.g. 'git pull &lt;repository&gt; &lt;refspec&gt;').
See git-pull(1) for details on the refspec.
...
$ /usr//lib/git-core/git-svn rebase
warning: refname 'master' is ambiguous.
First, rewinding head to replay your work on top of it...
Applying: Added forum/management/commands/dumpsettings.py
error: Ref refs/heads/master is at 6acd747f95aef6d9bce37f86798a32c14e04b82e but expected a7109d94d813b20c230a029ecd67801e6067a452
fatal: Cannot lock the ref 'refs/heads/master'.
Could not move back to refs/heads/master
rebase refs/remotes/trunk: command returned error: 1
</code></pre>
","0","82733","0"
"2808253","283952","2010-05-11 05:19:26","2","1085","<svn><git><merge><git-svn>","Merging in git: via git-svn, says Already Up-to-date, but git-diff says there are differences","<p>I'm using git-svn to work with a codebase and I need to merge changes in trunk to my branch.</p>

<p>I have both branches fetched in git, and when I run git diff trunk while in my branch, I can see all the changes.</p>

<p>When I run git merge heads/trunk, however, I get a message ""Already up-to-date"".</p>

<p>It's clearly not up to date.  What am I doing wrong?</p>
","1","283952",""
"21713729","281545","2014-02-11 21:46:24","2","146","<git><git-svn><dcommit>","dcommit to sourceforge - how do I tweak my .git/config and authors file?","<p>Here are the relevant parts of my config:</p>

<pre><code>$ cat .git/config
[svn-remote ""svn""]
        ignore-paths = ^(?:Releases|Projects|Scripts|Games|)/|^Programs/(?:Nif S\
canner|Nif Viewer|Raziel23x's Oblivion Toolset|Shader Disasm|Shader Editor)/
        url = svn://svn.code.sf.net/p/oblivionworks/code
        fetch = Programs/Wrye Bash:refs/remotes/svn/trunk
        branches = Branches/Wrye Bash/*:refs/remotes/svn/*
        tags = Tags/Wrye Bash/*:refs/remotes/svn/tags/*
[svn]
        authorsfile = authors_with_emails.txt
</code></pre>

<p>Tried:</p>

<pre><code>MrD@MRSD /c/dropbox/eclipse_workspaces/python/git_svn_WB (master)
$ git svn dcommit --username MYUSERNAME
Committing to svn://svn.code.sf.net/p/oblivionworks/code/Programs/Wrye%20Bash ...

ERROR from SVN:
Authorization failed: Authorization failed
W: 083f21d9aa799b62e325b5bb348f1ee82f9d7085 and refs/remotes/svn/trunk differ, u
sing rebase:
:040000 040000 f8e70f1f4670274788def25b32bd5d7246206b7b f05b3db6f8d2ea5ff54cd040
c4ef685cdd453233 M      Mopy
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
</code></pre>

<p>As you see I am at master (where I just cherry picked one commit from a git branch - no fancy merging and stuff)</p>

<p>I have two questions:</p>

<ul>
<li>How do I tweak the url in the config - or what <code>&lt;URL&gt;</code> should I pass to <code>--commit-url &lt;URL&gt;</code> flag ? I don't want to mess anything up and end up committing in the wrong branch (as you see the svn layout is non standard)</li>
<li><p>Actually I am committing another's changes. I edited the commit message to add:</p>

<pre><code>Subject

Body

Signed-off-by: AUTHOR &lt;EMAIL&gt; # added
</code></pre>

<p>where <code>AUTHOR</code> matches the name in the SVN config but <code>EMAIL</code> does not. Is this enough for the author to be recorded properly ? I believe the email won't make a difference in the SVN side</p></li>
</ul>

<p>I just want to be extra sure cause I don't want to mess up the SVN repo. I'd rather push over <code>https</code>.</p>

<p></p>
","0","281545",""
"2917727","90801","2010-05-27 00:19:51","2","729","<git><git-svn><patch>","git format-patch < everything since last svn rebase >","<p>I'm trying to mash all my changes since I last pushed to the svn server into one big patch that I can email to my coworker for review. Can I do this with <code>git format-patch </code>?</p>
","0","90801",""
"2922059","291244","2010-05-27 14:34:12","10","3414","<git-svn>","How to recover from an unwanted rename using git-svn: ""Transaction is out of date""","<p>I'm using git-svn. I've moved file 'A' to 'B' and I'm up to date with the svn HEAD (using <code>git svn rebase</code>). I can commit all other changes without problems. Now I've decided that I want to move 'B' back to 'A' and commit that change.</p>
<p>When I do the move and commit to my local master it works fine, but I get the following when doing a <code>git svn dcommit</code>:</p>
<pre><code>Transaction is out of date: Out of date: 'A' in transaction '3652-1' at /opt/local/libexec/git-core/git-svn line 570
</code></pre>
<p>So I tried to copy and delete in a separate commit which resulted in:</p>
<pre><code>Item already exists in filesystem: File already exists: filesystem '/usr/svn/db', transaction '3652-1', path 'A' at /opt/local/libexec/git-core/git-svn line 4735
</code></pre>
<p>I've recovered from this situation with plain svn by using the workarounds like the one described in the <a href=""https://svn.haxx.se/subusers/archive-2005-02/0096.shtml"" rel=""nofollow noreferrer"">documentation</a>, but I don't know how to recover with git-svn. What is going on and how do I fix it?</p>
","0","291244","0"
"2923859","90801","2010-05-27 18:36:13","1","486","<git><git-svn>","How can I push to a git-svn repo?","<p>I cloned an svn repo with <code>git svn clone ...</code> and now I want to push changes to it. after that I will use this repo to rebase everything and commit back to svn. The problem that pushing to a non-bare repo seems to not be a good idea, and git svn seems unhappy about working with a bare one?</p>
","0","90801",""
"21732607","373077","2014-02-12 15:44:36","0","66","<git><git-svn>","Uploading to subversion using git","<p>How do I upload a local git repository to an empty (new) subversion remote repository?</p>

<p>I don't need to preserve my commit history, I just need the files to be uploaded to the remote server.</p>

<p>I've tried setting up a remote repository and committing with git svn:</p>

<pre><code>git svn init https://path.to.subversion/project/trunk

git svn dcommit
</code></pre>

<p>However I get the error:</p>

<pre><code>""Unable to determine upstream SVN information from HEAD history.""
</code></pre>

<p>Please can someone advise? </p>
","1","373077",""
"2945842","174284","2010-05-31 20:31:12","28","4005","<svn><merge><git-svn><hgsubversion><svk>","Using git-svn (or similar) *just* to help out with an svn merge?","<p>Some complex subversion merges are coming up in my project: big branches that have been apart for a long time. Svn gives too many conflicts - and some of them seem spurious.</p>

<hr>

<p>Given that <code>git</code> is praised for a superiour merge experience,
Would it be any good to use <code>git-svn</code> <em>just for</em> the benefit of making the merge more manageable?</p>

<hr>

<p>Can you recommend other alternatives (eg. <code>svk</code>, <code>hgsvn</code>) to lessen the merge pain?</p>

<p>Some conflicts are easy enough to resolve (e.g java imports, whitespaces) - so I'm also  wondering if there is any automated solutions for those.</p>

<p>A full switch to DVCS might happen in the future (some of us would love that), but not right now. (UPDATE: this isn't true any longer - the team switched fully recently and are happy about it).</p>

<p>Thanks in advance.</p>

<p>PS: there are posts that seem to be related (eg. <a href=""https://stackoverflow.com/questions/2693771/git-svn-merge-2-svn-branches"">git-svn merge 2 svn branches</a>) but they don't fully answer this question.</p>

<p>Update: see my -novice- answer after going down (and up:) this road.</p>
","4","174284","0"
"40835780","25702","2016-11-28 01:05:52","2","664","<git-svn>","git svn branch results in ""Server SSL certificate verification failed""","<p>Using <code>git svn</code> works without issue for all operations except when I try to use <code>git svn branch</code>.</p>

<p>When I try <code>git svn branch newbranch -m ""another branch""</code> from a local repo that was previously successfully cloned using <code>git svn clone --stdlayout</code>, I get the following error:</p>

<blockquote>
  <p>Can't create session: Unable to connect to a repository at URL '<a href=""https://mysvnserver.blah/path/to/svn/project/trunk"" rel=""nofollow noreferrer"">https://mysvnserver.blah/path/to/svn/project/trunk</a>': Server SSL certificate verification failed: issuer is not trusted at C:\Program Files\Git\mingw64/libexec/git-core\git-svn line 1199.</p>
</blockquote>

<p>The error doesn't make a lot of sense as <code>git svn</code> works correctly with other commands (eg. <code>rebase</code>, <code>dcommit</code> etc). And <code>dcommit</code> does successfully write changes back to the remote subversion repository.</p>

<p>I am using git version 2.10.2.windows.1</p>
","1","25702","0"
"40839813","1189424","2016-11-28 08:21:31","1","507","<git><git-svn>","Unable to create git .lock file - File name too long","<p>I need to convert large svn repo into git. I run <code>git svn clone</code>, it works about 30 hours, and then this error occurs:</p>

<pre><code>fatal: update_ref failed for ref 'refs/remotes/svn/trunk@26379------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------': cannot lock ref 'refs/remotes/svn/trunk@26379------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------': Unable to create '/usr/local/svn2git_branches/repo/.git/refs/remotes/svn/trunk@26379------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.lock': File name too long
update-ref -m r23592 refs/remotes/svn/trunk@26379------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ a68b4ec92e6f0033997c7d6242770567274c5d84: command returned error: 128
</code></pre>

<p><code>git svn fetch</code> leads to same result.</p>

<p>Workaround?</p>

<p><em>Upd.</em> I run this in Ubuntu in docker container.</p>
","6","1189424","0"
"3208115","275196","2010-07-08 21:23:41","5","1495","<svn><git><git-svn>","Use git-svn with an existing repo lacking .git/svn/","<p>I've cloned a project's sources using Git, which is converted on the server from a SVN repo. The problem with this Git repository is that it lacks tags, branches, and some revisions are missing. The number of revisions is enormous (~20000) for me to use git-svn clone, and it'd be a waste of bandwidth and time as I already have most objects in my local repo. Because of this, I'd like to know:</p>

<ul>
<li>How can I convert my Git repository to a git-svn repo to update directly from the SVN repo instead of the broken Git repo.</li>
<li>Can I fetch the missing revisions without having to clone everything?</li>
<li>Is it possible to download tags with Git directly?</li>
<li>Will those branches be an extra problem?</li>
</ul>
","0","275196",""
"3211842","31667","2010-07-09 10:42:44","1","76","<git><git-svn>","git-svn updates not visible","<p>I created a mirror of an <code>svn</code> repository via <code>git-svn</code>. The first time I did <code>fetch</code> from svn, I got revisions 1-7001, which I pushed to the github.</p>

<p>Now that there are 7007 revisions in svn, I did <code>git-svn</code> fetch, which appears to have downloaded the missing revisions, but:</p>

<ul>
<li>I can't see them in <code>git log</code> (last one is 7001)</li>
<li>they don't get pushed into github when I do the standard <code>git push ... master</code></li>
</ul>

<p>Is there some step I'm missing?</p>
","0","31667",""
"21952350","1581090","2014-02-22 09:25:57","0","48","<git><git-svn>","How to fix git messup after 'git svn rebase'?","<p>I had a clean working git(-svn) repository with a lot of new commits. Let's label this the 'original' state. </p>

<p>Then I made a <code>git svn rebase</code> which gave a lot of conflicts and the choices: </p>

<pre><code>When you have resolved this problem run ""git rebase --continue"".
If you would prefer to skip this patch, instead run ""git rebase --skip"".
To check out the original branch and stop rebasing run ""git rebase --abort"".
</code></pre>

<p>Also, all the commits I have made are gone (i.e. <code>git log</code>) does not show them anymore. </p>

<p>How can I get to the above described 'original' state? I.e. the state I have been in BEFORE I typed the command <code>git svn rebase</code>? I do not quite understand what the mentioned choices really mean...</p>
","3","1581090",""
"21954049","2225100","2014-02-22 12:02:53","1","611","<git><version-control><hash><merge><git-svn>","Merging two git-svn repositories with regular git commits on top","<p>I'm using git version 1.8.5.3 from the Arch Linux repository at home, and git version 1.8.1.2 from Ubuntu 13.10 at work. At work, we're use svn, so I deal with it using git svn.</p>

<p>I checked out the svn repository using git svn, at work and at home. The commit messages containing the git-svn-id are the same. Same goes for the author and the date. However, the resulting commit hash is not the same.</p>

<pre><code>git svn fetch &amp;&amp; git svn rebase 
</code></pre>

<p>works fine. However, if I try to merge some commits I made on one of the repositories via git between the two, git naturally fails to detect parents and spits out merge errors.</p>

<p>I'm thinking, this can only be due to changes in hash calculations. This would also break other git repositories so probably this is a problem connected to git svn. </p>

<p><strong>first edit</strong></p>

<pre><code>git log --pretty=raw
</code></pre>

<p>shows different parents for all commits. That explains the different hashes but how did this happen in the first place? Turns out, that if I go all the way back to the first commits, they indeed have the same parents and thus the correct hashes. So somewhere  along the way, something must have changed...</p>

<p><strong>second edit</strong></p>

<p>Found the last common commit hash using</p>

<pre><code>git merge-base branch1 branch2
</code></pre>

<p>The commit following is a svn merge branch. Is this expected behavior?</p>

<p><strong>third edit</strong></p>

<p>What does work is to use</p>

<pre><code>git cherry-pick hash
</code></pre>

<p>and apply the commits one by one...</p>

<p><em><strong>update</em></strong></p>

<p>All my fault. I checked out the entire svn repo at work but only the trunk at home. That's why the commit hashes were different starting from a merge of two svn branches.</p>
","5","2225100",""
"3354973","20789","2010-07-28 16:17:29","5","1309","<git><scripting><git-svn><dvcs><git-filter-branch>","Using git filter-branch to rewrite authors/committers and commit messages simultaneously","<p>I have a Git repository originally imported from Subversion.  Parts of the author/committer information are wrong, which is not Git's fault but mostly due to sloppy committing with Subversion.</p>

<p>I would like to use <a href=""http://git-scm.com/docs/git-filter-branch"" rel=""noreferrer""><code>git filter-branch</code></a> to rewrite the history of the repository, fixing the committer and author information.</p>

<p>The trouble is... I need to slurp author information out of the commit <em>messages</em>.  As far as I can tell, <code>git filter-branch</code> allows you to filter and alter the author information (with <code>--env-filter</code>) and/or to filter the commit messages (with <code>--msg-filter</code>), but <strong>not</strong> to do both simultaneously, with information shared between the different filters.</p>

<p>So I'm kind of stumped about how to do this... the best I can think of is to do it in multiple passes: first, collect allllll the commit messages, then make a script to go through and filter all the author/committer info.  This seems quite inelegant and error-prone, so I'm wondering if anyone else has figured out a do this kind of work more smoothly.</p>
","0","20789","0"
"3358298","289004","2010-07-28 23:15:13","1","105","<git><git-svn>","Git confusion - getting git repo on server after switch from svn","<p>I have a 3 year old svn repo I just converted to git using git-svn.  Then I cloned the new repo and want to copy it to a our main server (running ssh).</p>

<p>The git project is organized like this:</p>

<pre><code>~/server.com/
~/server.com/.git
~/server.com/htdocs
~/server.com/includes
etc.
</code></pre>

<p>Following the instructions in the gitpro book, it says to use scp -r to copy it to the server, but I'm ending up copying the checked-out/cloned files, not just the git stuff, which I don't want (according to the book it should be ""bare"").  Do I just do ""> scp -r ~/server.com/.git user@other.server:/path/to/git-files""? And then clone via ""> git clone user@other.server:/path/to/git-files/server.com/.git""?</p>

<p>Also, the repo's they toss around in the gitpro book are like ""server.git""; is that just a naming convention?  </p>

<p>Links:</p>

<p><a href=""http://www.jonmaddox.com/2008/03/05/cleanly-migrate-your-subversion-repository-to-a-git-repository/"" rel=""nofollow noreferrer"">http://www.jonmaddox.com/2008/03/05/cleanly-migrate-your-subversion-repository-to-a-git-repository/</a>
<a href=""http://progit.org/book/ch4-2.html"" rel=""nofollow noreferrer"">http://progit.org/book/ch4-2.html</a></p>

<p>TIA,
Hans</p>
","0","289004",""
"3376283","131433","2010-07-31 00:35:36","6","869","<git><git-svn>","what does it mean when git svn clone runs for a long time, completes, and accomplishes nothing","<p>I upgraded git on my mac to 1.7.2. I can no longer get git svn clone or git svn fetch to succeed.</p>

<p>With GIT_TRACE=2, the last words on the subject are:</p>

<pre><code>trace: built-in: git 'config' 'svn-remote.svn.branches-maxRev' '12912' 
trace: built-in: git 'config' 'svn-remote.svn.tags-maxRev' '12912'
trace: built-in: git 'config' 'svn-remote.svn.branches-maxRev' '12912' 
trace: built-in: git 'config' 'svn-remote.svn.tags-maxRev' '12912'
trace: built-in: git 'gc' '--auto'
</code></pre>

<p>git branch -a has nothing to say, nothing is checked out. But no error messages, either.</p>

<pre><code>git svn clone -s https://gate.svn.sourceforge.net/svnroot/gate 
</code></pre>

<p>In case someone else care to try this.</p>

<p>I suppose I should ask a question: ""Anyone know a way around this?""</p>

<p><strong>EDIT</strong></p>

<p>There is a bug here, but it's completely different from what I claimed. I doubt it has anything to do with the git version.</p>

<p>The URL above is <strong>not</strong> a stdlayout svn url. If you add another /gate to the end, you will be looking at a stdlayout url. The bug is that git svn should be printing a message to the effect that it cannot find trunk, tags, <em>or</em> branches.</p>
","4","131433",""
"3380217","214545","2010-07-31 23:47:07","4","933","<workflow><git-svn>","looking for ideal git-svn workflow","<p>The company that I'm working is working with SVN but I would like to start working with git to take advantage of the light branching and stashing features (disclaimer, I'm pretty new to git).  I've started with git-svn and I'm trying to figure out the ideal git-svn workflow for what I'm trying to do (and suggestions if what I'm trying to do needs tweaking).  </p>

<p>I've read through <a href=""https://stackoverflow.com/questions/1129688/git-svn-workflow-feature-branches-and-merge"">git svn workflow - feature branches and merge</a> and a few other posts but its still not clear how I should approach it.</p>

<p>How I plan to work:
I plan on having my master branch be clean from development and only used for merging/rebase/dcommit.</p>

<p>I would like break apart each new feature/bug into separate git branches so they can be worked on independently.  Meaning, I can work on one feature for a few hours, then put it aside and work on the next issue.  When I was in SVN it was a problem when I had two different features/bugs in one file because when it came time to commit, I would remember that it had both changes and temporarily take out what I didn't want to commit now - a pain.
And the are some features which are while I might want to work on now, will not be added to the main repo for some time.</p>

<p>After a feature is ready to be shared/tested in the main repo, I'll merge/rebase into my master branch and then dcommit to the svn-repo.  I only want to have one SVN commit message for each dcommit - I want to be committing in more often with comments more specific to me and then dcommit to svn with a message for the rest of the team.  I assume for this I'll either be using a git merge --squash or a git rebase --interactive for this.</p>

<p>The basic git flow I've envisioned is like this:</p>

<ol>
<li><p>// it begins...<br>
<code>git svn clone &lt;repo&gt;</code></p></li>
<li><p>//<br>
<code>git checkout -b feature 1</code><br>
// work commit, work commit</p></li>
<li><p>//<br>
<code>git checkout -b bug-123</code><br>
// work commit, work commit<br>
// bug-123 finished - ready to send back  </p></li>
<li><p>// got back to master for step 5<br>
<code>git checkout master</code></p></li>
<li><p>// get whatever changes other devs did<br>
<code>git svn rebase</code></p></li>
<li><p>//<br>
<code>git checkout bug-123</code></p></li>
<li><p>// rebase branch so I have fewer smaller changes. not sure here..<br>
<code>git rebase master || git svn rebase</code><br>
// Assuming I'm doing a FF rebase so my commits are just addons to the current repo<br>
// I don't know if I rebase the master or svn repo or it doesn't matter.</p></li>
<li><p>// need to get my changes back to master to send off<br>
<code>git checkout master</code></p></li>
<li><p>// add my changes to master<br>
<code>git rebase bug-123 (--interactive?) || git merge --squash bug-123</code><br>
// do I add a new commit message here?  </p></li>
<li><p>// push my changes back out to the team<br>
<code>git dcommit</code> </p></li>
</ol>

<p>So there are a few questions:</p>

<ol>
<li><p>How should I get the changes into the branch I want to commit - by rebasing the master or the svn branch </p></li>
<li><p>how do I get the changes back into the main branch - rebase or merge - remember, I want only one commit for each commit - unless this is going to complicate things - I really would prefer to keep my git commits separate from the SVN commits because I might start something - it's half-working, and want to commit it so I could try something else - but I don't want to commit these broken steps. </p></li>
<li><p>would it make sense to dcommit directly from the working branch (eg bug-123)?</p></li>
<li><p>how do I get the changes from bug-123 back now into feature-1?  I'm assuming I'll do it via the SVN repo - meaning the changes that I added will get merged in when I do the rebase when it's time to add feature-1 to the repo - but maybe not.</p></li>
</ol>
","0","214545","0"
"3523972","420334","2010-08-19 16:34:00","0","1067","<svn><git><git-svn>","""git svn fetch"" leads to ""RA layer request failed""","<p>I just ran</p>

<pre><code>git svn fetch
</code></pre>

<p>and got</p>

<blockquote>
  <p>RA layer request failed</p>
</blockquote>

<p>How can I resume the <code>fetch</code>?</p>
","2","420334","0"
"3525718","242853","2010-08-19 19:59:46","1","917","<git><git-svn>","Using git-svn with an unconventional repo layout that includes a directory that should be accessible to any branches","<p>Where I work, we use a slightly unconventional svn repo layout for projects. It looks like this:</p>

<pre><code>project/
  branches/
  tags/
  trunk/
  utils/
</code></pre>

<p>We're a pretty small company, and most of our projects are relatively small. Each developer working on a project usually has a checkout of the whole repo, and there are some post-commit hooks that prevent changes being made to multiple branches at once. The utils folder contains some scripts that are useful for each project, including things like automating HOSTS and apache vhost directive creation for a developers local machine when the repo is first pulled, a few svn shortcuts, and some project-specific stuff. </p>

<p>This layout works pretty well for us.</p>

<p>Now, I'd like to use git-svn, but I'm having trouble figuring out how the addition of that utils folder that is accessible to a developer regardless of what branch they're working on would translate into git.</p>

<p>The only possible way to deal with this that I've been able to figure out would be to <code>git svn clone</code> the whole repo, and then set up some aliases for <code>git svn fetch --ignore-paths</code> so that if I'm working on a specific branch, I wouldn't be fetching changes from other branches, and then create local topic branches for each remote branch.</p>

<p>The downside of doing this is <em>mostly</em> having to set up those aliases -- it's a somewhat ugly solution, in my opinion -- but it seems like it should work at least. As for using the branch detection/integration capabilities of <code>git-svn</code>, I don't think that it could work here because checking out a branch is ""destructive"", and that utils folder exists at the top level of the repo.</p>

<p>So, is there either a better way of restricting <code>git-svn</code> stuff to the directory that represents the current branch, or a cleaner way of handling this scenario in general?</p>
","0","242853",""
"3531500","296328","2010-08-20 13:53:19","3","7129","<svn><git><git-svn>","Problem cloning a single SVN Branch via git svn","<p>I have tried the following command on my SVN Repository to clone only a single branch via git.</p>

<pre><code>git svn clone  http://svn.supose.org/supose/branches/B_0.7.1
</code></pre>

<p>but got the the following error message:</p>

<pre><code>Initialized empty Git repository in /Users/km/workspace-supose/git/B_0.7.1/.git/
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no    item: '/supose/!svn/bc/100/branches/B_0.7.1' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
error: git-svn died of signal 10
mac:git km$ 


mac:git km$ git --version
git version 1.7.1
</code></pre>

<p>Does someone has an idea what is going wrong ?</p>

<p><strong>Update:</strong>
I turned on trace via environment variable. Tried it and it failed as well. Updated to git 1.7.2 with the same result.</p>

<pre><code>mac:git km$ git svn clone  http://svn.supose.org/supose/branches/B_0.7.1
trace: exec: 'git-svn' 'clone' 'http://svn.supose.org/supose/branches/B_0.7.1'
trace: run_command: 'git-svn' 'clone' 'http://svn.supose.org/supose/branches/B_0.7.1'
trace: built-in: git 'config' '--bool' '--get' 'svn.noauthcache'
trace: built-in: git 'config' '--bool' '--get' 'svn.nometadata'
trace: built-in: git 'config' '--get' 'svn.revision'
trace: built-in: git 'config' '--get' 'svn.rewriteuuid'
trace: built-in: git 'config' '--bool' '--get' 'svn.usesvmprops'
trace: built-in: git 'config' '--bool' '--get' 'svn.nocheckout'
trace: built-in: git 'config' '--get' 'svn.authorsprog'
trace: built-in: git 'config' '--bool' '--get-all' 'svn.branches'
trace: built-in: git 'config' '--bool' '--get' 'svn.usesvnsyncprops'
trace: built-in: git 'config' '--bool' '--get' 'svn.followparent'
trace: built-in: git 'config' '--get' 'svn.prefix'
trace: built-in: git 'config' '--bool' '--get' 'svn.useSvmProps'
trace: built-in: git 'config' '--get' 'svn.authorsfile'
trace: built-in: git 'config' '--get' 'svn.username'
trace: built-in: git 'config' '--bool' '--get' 'svn.stdlayout'
trace: built-in: git 'config' '--get' 'svn.repackflags'
trace: built-in: git 'config' '--bool' '--get' 'svn.localtime'
trace: built-in: git 'config' '--int' '--get' 'svn.repack'
trace: built-in: git 'config' '--get' 'svn.template'
trace: built-in: git 'config' '--get' 'svn.ignorepaths'
trace: built-in: git 'config' '--bool' '--get' 'svn.minimizeurl'
trace: built-in: git 'config' '--get' 'svn.rewriteroot'
trace: built-in: git 'config' '--bool' '--get' 'svn.quiet'
trace: built-in: git 'config' '--int' '--get' 'svn.logwindowsize'
trace: built-in: git 'config' '--get' 'svn.shared'
trace: built-in: git 'config' '--get' 'svn.configdir'
trace: built-in: git 'config' '--bool' '--get' 'svn.addauthorfrom'
trace: built-in: git 'config' '--bool' '--get' 'svn.noMetadata'
trace: built-in: git 'config' '--bool' '--get' 'svn.useSvnsyncProps'
trace: built-in: git 'config' '--bool' '--get-all' 'svn.tags'
trace: built-in: git 'config' '--get' 'svn.trunk'
trace: built-in: git 'config' '--bool' '--get' 'svn.uselogauthor'
trace: built-in: git 'init'
Initialized empty Git repository in /Users/km/workspace-supose/git/B_0.7.1/.git/
trace: built-in: git 'config' '--bool' 'svn.useSvmProps'
trace: built-in: git 'config' '-l'
trace: built-in: git 'config' '--get' 'svn-remote.svn.url'
trace: built-in: git 'config' '-l'
trace: built-in: git 'config' 'svn-remote.svn.url' 'http://svn.supose.org/supose/branches/B_0.7.1'
trace: built-in: git 'config' '--add' 'svn-remote.svn.fetch' ':refs/remotes/git-svn'
trace: built-in: git 'config' '--bool' 'svn.useSvmProps'
trace: built-in: git 'config' '-l'
trace: built-in: git 'config' '--get' 'svn-remote.svn.fetch' ':refs/remotes/git-svn$'
trace: built-in: git 'config' '--get' 'svn-remote.svn.url'
trace: built-in: git 'config' '--get' 'svn-remote.svn.uuid'
trace: built-in: git 'config' 'svn-remote.svn.reposRoot' 'http://svn.supose.org/supose'
trace: built-in: git 'config' '--get' 'svn-remote.svn.usesvmprops'
trace: built-in: git 'config' '--add' 'svn-remote.svn.uuid' 'd38d36a4-06d2-11df-b1fb-6b773c2c1a53'
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: '/supose/!svn/bc/100/branches/B_0.7.1' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
trace: built-in: git 'config' '--get' 'svn-remote.svn.nometadata'
trace: built-in: git 'config' '--get' 'svn-remote.svn.followparent'
trace: built-in: git 'config' '--bool' '--get' 'svn.brokenSymlinkWorkaround'
trace: built-in: git 'config' '--get' 'svn-remote.svn.ignore-paths'
trace: built-in: git 'update-index' '-z' '--index-info'
trace: built-in: git 'config' 'svn-remote.svn.reposRoot' 'http://svn.supose.org/supose'
error: git-svn died of signal 10
</code></pre>
","1","296328","0"
"22229219","1870481","2014-03-06 15:44:04","13","4785","<git><svn><git-svn><msysgit><git-bash>","How to set upstream branch in git-svn?","<p>While working on a usual git repository a local branch usually tracks a corresponding remote upstream branch. This way I can easily see, whether I am ahead or behind of my upstream branch and therefore if I need to push or pull to bring them in sync. Also my prompt immediately shows this state, which is very convenient.</p>

<p>Now I am working on a SVN repository using <code>git-svn</code>. I used <code>--prefix=svn</code> for the clone, therefore <code>git branch -r</code> lists <code>svn/trunk</code> as a remote branch, but (although <code>git svn rebase</code> works without problems) it is not configured as an upstream branch for my master branch.</p>

<p>I tried to set the tracking information manually but it failed:</p>

<pre><code>$ git branch -r
  svn/trunk
$ git branch --set-upstream-to=svn/trunk
fatal: Cannot setup tracking information; starting point 'svn/trunk' is not a branch.
</code></pre>

<p>Is there some way to track an svn upstream branch?</p>

<p>Is there some other easy way to know whether I am ahead or behind to that branch? (Looking at <code>gitk --all</code> is currently the only way I am aware of.)</p>

<p>Is there even some way to make my (bash <code>__git_ps1</code>) prompt show that information?</p>

<hr>

<pre><code>$ git --version
git version 1.9.0.msysgit.0
</code></pre>
","1","1870481","0"
"3681080","374953","2010-09-09 22:41:59","4","609","<branch><git-svn><repository-design>","How do I access svn branches using git-svn with a non-standard svn repo layout?","<p>The standard repo layout in svn is as follows.</p>

<pre><code>/trunk
/branches
    featureX
    featureY
/tags
    1.0
    2.0
</code></pre>

<p>The repository I'm working with is a much flatter structure.</p>

<pre><code>trunk
featureX
featureY
</code></pre>

<p>Essentially, trunk is at the same level as the other branches.  I can't use the -s or -b option with <code>git svn init</code> because of this.</p>

<p>How would I pull in <code>trunk</code> as the git branch <code>master</code> and pull in <code>featureX</code> as a git branch of the same name?  I don't care about any other branches or tags.</p>

<p>I've seen similar questions and people have suggested restructuring the svn repository.  This is off the table as far as this question is concerned.</p>
","0","374953",""
"3856405","131433","2010-10-04 14:55:13","3","811","<git><git-svn>","git and git-svn and multiple branches and push and fetch","<p>A <code>git svn clone</code> with <code>--stdlayout</code> get me multiple branches if the source SVN repo has multiple branches (and tags).</p>

<p>I want to push <em>all</em> of them to another git repo.  The <code>git svn clone</code> did seem to have retrieved all the history for all the versions. Is this a matter of giving better instructions to git push?</p>

<p>Here's my possibly misguided workflow intention.</p>

<ol>
<li>run git svn to clone svn into a private repo.</li>
<li>push it to a shared repo managed with gitosis</li>
<li>make a shared work branch</li>
<li>various people the gitosis-managed repo, make private branches, and merge into
the shared work branch.</li>
<li>I pull from the shared repo back to the one I created in step 1, merge to trunk, and dcommit.</li>
</ol>

<p>Here's the output of <code>git branch -a</code> after running the <code>git svn clone</code>.</p>

<pre><code>/Users/benson/x/tsk/tsk_git_svn git branch -a
* master
  remotes/origin/master
  remotes/sleuthkit-3.0
  remotes/sleuthkit-3.1
  remotes/tags/sleuthkit-3.0.0
  remotes/tags/sleuthkit-3.0.1
  remotes/tags/sleuthkit-3.1.0
  remotes/tags/sleuthkit-3.1.0b1
  remotes/tags/sleuthkit-3.1.1
  remotes/tags/sleuthkit-3.1.2
  remotes/tags/sleuthkit-3.1.3
  remotes/tags/sleuthkit-3.1.3b1
  remotes/tags/sleuthkit-3.2.0b1
  remotes/tags/sleuthkit-3.2.0b2
  remotes/trunk
</code></pre>
","0","131433",""
"3864934","10612","2010-10-05 15:02:15","13","3438","<git><git-svn>","How do I re-integrate a svn and git repository without a common history?","<p>I have a github-based git repository that represents development up to a certain point, and then a svn repository, not initialized with git svn, that has further development.  I want to bring the svn changes into the git repository, start using the git repo for development, and push changes using git svn dcommit.  Is this possible?  Is it advisable?</p>

<p>Here's my specifics:</p>

<p>We started development on a WordPress plugin here:</p>

<p><a href=""http://github.com/mrdoornbos/wpconfidentcaptcha"" rel=""nofollow noreferrer"">http://github.com/mrdoornbos/wpconfidentcaptcha</a></p>

<p>Master is at ef82b94a1232b44aae3e, and no further changes were made in github. </p>

<p>When our application to wp-plugins.org was accepted, an empty svn repo was created for us: </p>

<p><a href=""http://svn.wp-plugins.org/wp-confident-captcha/trunk@278927"" rel=""nofollow noreferrer"">http://svn.wp-plugins.org/wp-confident-captcha/trunk@278927</a></p>

<p>Somewhat modified files were then copied in (r256425).  Further changes were made, the last being r278935.</p>

<p>What I want is for the SVN changes to be applied to master, along with the git svn metadata.</p>

<p>Here's what I have so far (takes about 4 minutes):</p>

<pre><code>git clone git://github.com/mrdoornbos/wpconfidentcaptcha.git github_cc
cd github_cc
git svn init --stdlayout --prefix=""svn/"" http://svn.wp-plugins.org/wp-confident-captcha
git svn fetch --revision 256362:278935
</code></pre>

<p>This puts my github tree in origin/master, and my svn tree in svn/trunk (and all the tags in their own /svn branches as well).  There is no common ancestor between origin/master and svn/trunk.  I'm not sure where to go from here, or if there is a way to get the changes from svn/trunk onto origin/master, so that the head of the two repos have identical files, and let git svn dcommit work from origin/master.</p>

<p>Starting over with a new github repo seems like the most straightforward way, and I wouldn't be sad about losing the early history.  But, it seems like there should be a way to make this work with the existing github repo.</p>

<p>(Edit: it looks like this was already asked as <a href=""https://stackoverflow.com/questions/1488753/how-to-merge-two-branches-without-a-common-ancestor"">How to merge two branches without a common ancestor?</a>, but without the <code>git filter-branch</code> example needed to make it work.  Unlike that question, these are public svn and git repos, so an answer with a working script is possible.)</p>
","0","10612","0"
"3876651","126352","2010-10-06 20:36:44","1","635","<git><github><git-svn>","race conditions if two clients git svn rebase and git push to the same git repo?","<p>Is svn-rebasing-and-pushing from multiple clients to the same Git repo vulnerable to race conditions if both clients try to svn-rebase and push concurrently? </p>

<p>Here's more info:  I'm setting up a GitHub-hosted mirror of an SVN project. To do the mirroring, I'll run this cron job every few minutes (per <a href=""http://www.fnokd.com/2008/08/20/mirroring-svn-repository-to-github/"" rel=""nofollow"">this article</a>):</p>

<pre><code>git svn rebase
git.exe push origin master
</code></pre>

<p>For redundancy, I'd like to have another server running the same cron job. But will this break in the face of race conditions like these? </p>

<ul>
<li>Both servers rebase at almost the same time. One will <code>git push</code> the changes and the other will try to push the same changes.</li>
<li>One server rebases, then there's an SVN checkin, then the other server rebases and quickly pushes the new checkin, then the first, slower server tries to push one checkin behind.</li>
</ul>

<p>It's desired if the later operation simply returns a no-op (aka ""Everything up-to-date""). It's also OK if the conflicting push fails, as long as if its cron job runs again later at a non-conflicting tmie, then it will work OK.</p>

<p>What's not OK is if the local repo on either server can get into a failed state where manual intervention is needed. If that kind of failure is possible, how should I change the commands above to make them self-recovering?</p>
","2","126352",""
"3887736","90025","2010-10-08 04:38:04","57","15540","<git><history><git-svn>","Keep git history when splitting a file","<p>I want to take a function out of one file and put it into another, but keep the blame history.</p>

<pre><code>cp a.php b.php

vim b.php
# delete everything but 1 function

vim a.php
# delete the 1 function

git add a.php b.php
git commit
</code></pre>

<p>But if I run <code>git blame b.php</code> I only see it blaming to this new commit.</p>
","1","90025","0"
"4050530","118644","2010-10-29 09:18:06","4","2601","<git-svn>","How can I do a git svn reset to HEAD revision without specifying the revision number?","<p>How can I do a git svn reset to HEAD revision without specifying the revision number?</p>
","2","118644","0"
"4073956","338913","2010-11-01 23:27:13","31","20515","<git><svn><indexing><git-svn><rebase>","How do I resolve a git-svn index mismatch?","<p>When I did a git svn rebase it stopped at one point saying:</p>

<p><code>Index mismatch: SHA key of a tree != SHA key of another tree.</code> (I come to know that these SHA keys corresponds to a tree and not a commit from git show of the above two sha keys.)</p>

<pre><code>re-reading &lt;sha index of a commit in svn/trunk&gt;
... list of files ...
fatal: bad object &lt;SHA1 index of the bad object&gt;
rev-list -1 &lt;SHA1 index of the bad object&gt; --not &lt;SHA1 index of the revision it was trying to re-read&gt;: command returned error: 128
</code></pre>

<p>I am not very experienced in the internal workings of git, so is there a sequence of steps to follow to dissect problems like these and possibly resolve them?</p>
","5","338913","0"
"22664593","558672","2014-03-26 14:47:56","1","1581","<git><git-svn>","git svn rebase always requires force push","<p>I'm currently in the process of migrating my team from SVN to GIT.</p>

<p>Rather than clone the whole entire subversion repo, I opted for...</p>

<pre><code>git svn clone http://foo.com/svn/branches/dev --no-minimize-url --authors-file=users.txt foo
</code></pre>

<p>This currectly pulls down the <code>dev</code> branch for me.</p>

<p>Then I added a git repo with</p>

<pre><code>git remote add origin git@github.com:foo/bar.git
</code></pre>

<p>So, the issue I am having is keeping the GitHub repo up to date w/ what's in SVN.</p>

<p>I had to make some changes to .gitattributes (which may require another question), because I'm running the import process on OSX and since most of the code is written in Windows I kept running into line ending issues.</p>

<p>What I've been doing to update GitHub is...</p>

<pre><code>git svn fetch
git svn rebase
</code></pre>

<p>For whatever reason, every time that I do this, I end up having to do a <code>git push --force</code> because my <code>remote/origin/master</code> is diverged off.</p>

<p>So, should I not be rebasing and simply be fetching and have an actual local <code>git-svn</code> branch and merging that into <code>master</code>? Or is there something else I'm missing?</p>
","0","558672",""
"4271636","444472","2010-11-24 21:16:20","1","216","<git-svn>","Why would git merge set my svn url to the branch","<p>On my master checkout I can do a <code>git svn info</code> and the url is <code>svn://myrepo.com/trun</code>k
when on my new_feature checkout the svn url is <code>svn://myrepo.com/branches/new_feature</code>.</p>

<p>After running a <code>git merge new_feature</code> on my master checkout the master url is changed to <code>svn://myrepo.com/branches/new_feature</code>. This makes both my master and new_feature pointing to the some place and I can no longer <code>git svn dcommit</code> to trunk.</p>

<p>NOTE: This was working last week, and the only thing I can think of that could be different is that I needed to update the branch to trunk. I ran <code>git merge trunk</code> on my branch. Perhaps it git will no longer let me merge my branch back to trunk now?</p>

<p>I would like to know why this is and how to keep that from happening or fix it after it has happened.</p>
","0","444472",""
"4291347","143585","2010-11-27 11:15:19","2","2692","<git><git-svn>","git-svn import only branch","<p>I want to import only 1 branch from my svn repo as a git repository. So I want the contents of that branch to become the master. I don't want anything else in the repository. I also don't really want to be able to commit to the original svn repo. Actually, I don't want anything to happen to my svn repo.</p>

<p>Example:</p>

<pre><code>branches
  branch1
  branch2
  some-branch
    project
</code></pre>

<p>so I want content of the <code>project</code> folder to become my master branch. How can I do that?</p>

<p>Thank you.</p>

<p><strong>EDIT</strong> </p>

<p>looks like there are branches that were merged into my branch, and git-svn can not find history because it looks in</p>

<p>branches/some-branch/project/branches/branch1</p>

<p>it thinks that my remote branch is the root. How can I fix it?</p>
","0","143585","0"
"87224","14690","2008-09-17 20:24:46","1","2890","<perl><git-svn><slackware>","Make git-svn work on Slackware 12.1","<p>It is obviosly some Perl extensions. Perl version is 5.8.8.</p>

<p>I found Error.pm, but now I'm looking for Core.pm. </p>

<p>While we're at it: how do you guys search for those modules. I tried Google, but that didn't help much. Thanks.</p>

<hr>

<p>And finally, after I built everything, running: </p>

<pre><code>./Build install
</code></pre>

<p>gives me:</p>

<pre><code>Running make install-lib 
/bin/ginstall -c -d /usr/lib/perl5/site_perl/5.8.8/i486-linux-thread-multi/Alien/SVN --prefix=/usr
/bin/ginstall: unrecognized option `--prefix=/usr'
Try `/bin/ginstall --help' for more information.
make: *** [install-fsmod-lib] Error 1
installing libs failed at inc/My/SVN/Builder.pm line 165.
</code></pre>

<p>Looks like Slackware's 'ginstall' really does not have that option. I think I'm going to Google a little bit now, to see how to get around this.</p>
","0","14690","0"
"190431","5179","2008-10-10 07:38:52","135","37008","<svn><git><merge><branch><git-svn>","Is git-svn dcommit after merging in git dangerous?","<p>My motivation for trying out git-svn is the effortless merging and branching. Then I noticed that man git-svn(1) says: </p>

<blockquote>
  <p>Running git-merge or git-pull is NOT recommended on a branch you plan
  to dcommit from. Subversion does not represent merges in any
  reasonable or useful fashion; so users using Subversion cannot see any
  merges you've made. Furthermore, if you merge or pull from a git
  branch that is a mirror of an SVN branch, dcommit may commit to the
  wrong branch.</p>
</blockquote>

<p>Does this mean I cannot create a local branch from svn/trunk (or a branch), hack away, merge back into svn/trunk, then dcommit? I understand that svn users will see the same mess that merges in svn pre 1.5.x have always been, but are there any other drawbacks? That last sentence worries me, too. Do people routinely do these kinds of things?</p>
","2","5179","0"
"19572014","2710225","2013-10-24 16:55:40","2","538","<git><svn><git-svn>","git svn, how should I init my svn repo and synchronise with my existing git repo","<p>I have currently working git repo at url_git and new svn repo at url_svn.</p>

<p>I want to use svn repo with git svn -plugin and I've cloned repo with:</p>

<pre><code>git svn clone --username user url_svn/project_svn
</code></pre>

<p>and when I use for example</p>

<pre><code>git svn rebase
or
git svn dcommit
</code></pre>

<p>It works just fine</p>

<p>And when I try to push my git repo to svn</p>

<pre><code>git clone git_url/project_git
cd project_git
git svn init url_svn/project_svn
</code></pre>

<p>Fetch:</p>

<pre><code>git svn fetch
        A       initial_commit
r1 = c9e1ab586b658f3f5518e3ed36e87ded675a4685 (refs/remotes/git-svn)
</code></pre>

<p>Rebase / dcommit:</p>

<pre><code>git svn rebase
Unable to determine upstream SVN information from working tree history

git svn dcommit
Unable to determine upstream SVN information from HEAD history.
Perhaps the repository is empty. at /usr/lib/git-core/git-svn line 856.
</code></pre>

<p>What do I need to do to get this working?</p>
","0","2710225",""
"296975","4203","2008-11-17 21:19:50","202","78656","<git><git-svn>","How do I tell git-svn about a remote branch created after I fetched the repo?","<p>I'm using <code>git-svn</code> to work against my company's central Subversion repository. We've recently created a new feature branch in the central repo. </p>

<p>How do I tell Git about it? When I run <code>git branch -r</code> I can only see the branches that existed when I ran <code>fetch</code> against the Subversion repo to initialize my Git repo?</p>
","1","4203","0"
"19637664","2928427","2013-10-28 14:39:10","0","2622","<git><svn><git-svn>","git svn already set ... wanted to set to:","<p>I am trying to clone/fetch svn branch with git-svn:</p>

<pre><code>git config --add svn-remote.stable-2012-03-29.url https://some_host/branch
git config --add svn-remote.stable-2012-03-29.fetch :refs/remotes/stable-2012-03-29
git svn fetch stable-2012-03-29
</code></pre>

<p>which gives me this error message:</p>

<pre><code>svn-remote.stable-2012-03-29.url already set: https://some_host/branch/ wanted to set to: https://some_host/
</code></pre>

<p>I know that I probably can fix this by re-fetching all svn-repo from scratch, but it will take months or even years (due to size of repo).</p>

<p>So, is there any solutions?</p>
","0","2928427","0"
"352692","37984","2008-12-09 13:25:10","5","2795","<git><git-svn>","How do I revert a git-svn branch to SVN HEAD?","<p>I have a local git repository which tracks a remote SVN repository via <code>git svn</code>. I have made and committed some changes in the local git repository, but now I'd like to create a branch that reflects SVN HEAD in order to make some changes to the code as it stands in SVN, because  I don't want to propagate the changes in my git master to SVN just yet. How can I go about this?</p>

<p>Immediate follow-up: I will need to make and commit changes to SVN HEAD, then merge them back into my git master. How do I go about this? Do I <code>git merge</code> the 'svn-edits' branch into master, or do I do a <code>git svn rebase</code>? </p>
","2","37984","0"
"413924","","2009-01-05 17:51:56","4","784","<git-svn><commit>","Commits missing after incomplete ""git svn dcommit""","<p>I'm missing a few important commits after my computer lost power in the middle of a ""git svn dcommit"" operation, and I'm unsure of how to get them back. ""git log"" doesn't show the commits, any ideas?</p>
","0","","0"
"445500","1357024","2009-01-15 03:05:00","3","315","<git><version-control><git-svn>","Can you specify which svn branches with git svn?","<p>I think my question is somewhat similar to <a href=""https://stackoverflow.com/questions/258590/how-do-i-import-svn-branches-rooted-in-different-directories-into-git-using-git-s"" title=""How do I import svn branches rooted in different directories into git using git-svn?"">CaptainPicard's</a> but dissimilar enough that I feel compelled to ask so here goes.</p>

<p>I have an old SVN repository with around 7500 revisions and part of those 7500 revisions are some pretty large .fla files. And these .fla files exist in a number of the branches which have been created. As a result of this my .git directory after import is pretty large, something like 3.5 GB if I get the whole trunk, all the branches and all the tags. In an effort to pair this down some I did another svn clone of just the directory in trunk I wanted to work with but including all branches obviously pulls down all the history and objects for those.</p>

<p>So my question is this, is there some way to tell git to only fetch certain branches. For example only fetch branches starting with some identifier (e.g. mybranch)?</p>

<p><strong><em>Update for clarity:</em></strong> I know I can point git svn init/clone at a single specific branch. What I want to be able to do is point it at a set of branches. For example, instead of matching branches/* only branches matching mybranchset*</p>
","0","1357024",""
"540565","65458","2009-02-12 09:05:15","4","2175","<git><svn><git-svn><google-code>","How to partially export a git repository?","<p>My company uses git internally and we publish some of our work as an open source on Google Code which uses svn. (Should it support git, the problem would be probably the same.)</p>

<p>The problem is that we publish only <em>part</em> of our repository, so using git-svn as described on <a href=""http://code.google.com/p/support/wiki/ImportingFromGit"" rel=""nofollow noreferrer"">http://code.google.com/p/support/wiki/ImportingFromGit</a> will not work.</p>

<ul>
<li>How to publish part of the repository? (For the first time I just copied files we want to publish.)</li>
<li>How to synchronize the changes between published files and Code's repository?</li>
</ul>
","0","65458","0"
"540784","22668","2009-02-12 10:40:02","14","1273","<svn><git><version-control><git-svn>","How much of the power of git is lost by using git-svn and a shared subversion mainline?","<p>I'm evaluating various options for getting our team away from CVS. We have another large team on another site using Subversion, and some of our developers work with the Subversion server. Therefore, Subversion is an obvious choice for our team. However:</p>

<ol>
<li>Operations involving the Subversion
server can be coffee-break slow
(although we have a good connection
between sites).</li>
<li>Many of us our sold
on the idea of distributed version
control, and use Mercurial or git
extensively (and then merge and commit to CVS and grab changes from</li>
</ol>

<p><a href=""http://git-scm.com/docs/git-svn"" rel=""noreferrer"">git-svn</a> looks <a href=""http://utsl.gen.nz/talks/git-svn/intro.html"" rel=""noreferrer"">interesting</a> but what I'd like to know is how much of the power of a DVCS such as git is lost by having a handful of centralised branches in Subversion. In particular, I'd still like to be able to keep the kind of workflow we have with Mercurial, such as:</p>

<ol>
<li>Can we pull the repositories of other team members and merge, and thus collaborate on feature branches before they go to our main stable trunk on Subversion?</li>
<li>Can we expect the wealth of trickery possible with git to generally work, or do we need to be careful to avoid confusing git-svn?</li>
<li>Can we use git to speed up checkouts from Subversion by pulling it across the connection from the other site once and then pulling it into individual repositories once.</li>
<li>If someone commits to Subversion, can we arrange that other git users via git-svn still see the full development history?</li>
<li>Can we basically avoid having to wait for interactive operations on the Subversion server despite it having half a world of latency?</li>
</ol>

<p>Many of us are used to the idea of a main fairly stable shared branch with a simple linear history which everyone can push to, and so they merge to the tip regularly. It isn't clear to me how to support this work flow well with git (or Mercurial or Bazaar).</p>
","0","22668","0"
"31806817","746346","2015-08-04 10:27:13","5","5384","<git><svn><git-svn>","How to choose --prefix for git svn clone","<p>When I try <code>git-svn clone</code>, I get a warning:</p>

<blockquote>
<pre><code>WARNING: --prefix is not given, defaulting to empty prefix.
     This is probably not what you want! In order to stay compatible
     with regular remote-tracking refs, provide a prefix like
     --prefix=origin/ (remember the trailing slash), which will cause
     the SVN-tracking refs to be placed at refs/remotes/origin/*.
</code></pre>
</blockquote>

<p><code>--prefix</code> is not mentioned in the git book <a href=""https://git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git"" rel=""nofollow"">chapter on <code>git-svn</code></a>.
Various web pages recommend using <code>--prefix</code> (<a href=""http://blog.tfnico.com/2013/08/always-use-git-svn-with-prefix.html"" rel=""nofollow"">tfnico</a>, <a href=""https://objectpartners.com/2014/02/04/getting-started-with-git-svn/"" rel=""nofollow"">objectparters</a>), but fail to explain what I should call it. Is it just an arbitrary name, or should it match something in the SVN repository?</p>
","0","746346",""
"31815656","1879835","2015-08-04 17:29:10","-2","38","<git><svn><git-svn>","How to migrate or move multiple modules in a given branch from svn to git?","<p>I've the following hierarchy in my svn repository -</p>

<ul>
<li><p>branches    </p>

<ul>
<li><p>Branch1</p>

<ul>
<li><p>folder1</p>

<ul>
<li>module1</li>
<li>module2</li>
<li>module3</li>
</ul></li>
<li><p>folder2</p>

<ul>
<li>module1</li>
<li>module2</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>tags </p></li>
<li>trunk</li>
</ul>

<p>I need to migrate the Branch1 to git. Is it possible to migrate?
Appreciate your help.</p>
","0","1879835",""
"68201893","1823076","2021-06-30 21:41:55","0","71","<git><git-svn>","How to re-import single SVN branch to git?","<p>So... I goofed. I lost the git-svn repository I was using to mirror commits from SVN to git during a transition. I <em>should</em> have backed up my stuff, but I didn't.</p>
<p>Now there are a few commits on an old SVN branch that did not make their way over to the git repository.</p>
<p>Is there anything I can do now to transfer the commits on that SVN branch to the correct branch in the git repository? The branch already exists in the git repo, it's just out of date. It would not be an issue if I had to recreate or rewrite the history on that branch, so long as the main branch doesn't need to be changed and the branching-off-point is maintained in the history.</p>
","4","1823076",""
"49992758","8860495","2018-04-24 02:53:59","2","218","<git><svn><git-submodules><git-svn><dcommit>","How to ignore submodule in ""git svn dcommit""?","<p>'git svn dcommit' fails with the following error</p>
<blockquote>
<p>6aa885dabeb4f7d78ffcf45f6eb720c60a3e5b50 doesn't exist in the repository at /build/git/share/perl5/Git/SVN/Editor.pm line 440</p>
<p>Failed to read object 6aa885dabeb4f7d78ffcf45f6eb720c60a3e5b50 at /build/git/libexec/git-core/git-svn line 1017</p>
</blockquote>
<p>Found out the issue is because of the submodules later added to the git repo.
Is there a way to ignore submodule commits during <code>git svn dcommit</code> without impacting git repo.</p>
<p><strong>Note:</strong></p>
<p>Found a solution to rewrite history avoiding the sub-modules with Filter-branch option, but I guess that will tamper the repo which is already on production environment.</p>
","1","8860495","0"
"14683786","1711159","2013-02-04 09:28:33","2","2539","<git><git-svn><execution-time>","git svn take long time","<p>While migrating from SVN to GIT, <code>git svn clone ...</code> command took almost 54 hrs on RHEL5, 4GB RAM, 2-CPU each@2.67GHz</p>

<p>Is there any way the git-svn cloning time can be reduced?</p>

<p>PS: git-svn checkout data was around 25+ GB. And final bare git repo space is: 939M</p>
","3","1711159",""
"14694106","2040701","2013-02-04 19:32:17","1","140","<git-svn>","git svn and do not download some files","<p>I would like to clone a SVN repository with <code>git-svn</code>, and without downloading some -- unuseful for me -- 'huge' files (recognized by the extension because they are not all in the same folder).</p>

<p><code>git-update-index --assume-unchanged</code> or <code>git-gc</code> allow to compress the local repository, but the files are downloaded.</p>

<p>Is it possible to use something like <code>sparse-checkout</code> with <code>git-svn</code> ?
or what is a solution to avoid to download some files with <code>git-svn</code> ?</p>
","0","2040701",""
"15374353","882906","2013-03-12 23:36:56","42","65666","<git><clone><git-svn>","git - how can I clone local svn repository?","<p>I am completely unable to find any explanation how I should specify location of existing svn repository.</p>

<p>In other words - what should be used as URL in </p>

<pre><code>git svn clone URL
</code></pre>

<p>when svn repository is local?</p>
","0","882906","0"
"15385813","350103","2013-03-13 12:49:09","5","1328","<git><git-svn>","What is the best way to clone branches after cloning just trunk in git-svn?","<p>Given a large Subversion repository with many branches, I want to start using <code>git-svn</code> by cloning <code>trunk</code> first and adding specific branches later. I saw at least three ways to do this, but are any of them ""official"" or is there a best way?</p>

<p>Assume the following layout:</p>

<pre><code>https://svn-repo.com/svn/company
   +--core
   |  +--trunk
   |  +--branches
   |  |  +--fastboot
   |  |  +--playground
   |  +-tags
   +--mobile
      +--trunk
      +--branches
      +--tags
</code></pre>

<p>So, to clone only the trunk (no branches) revision 12345 of project <code>core</code>:</p>

<pre><code>$ git svn clone --username=svnuser -r 12345 -Ttrunk https://svn-repo.com/svn/company/core
</code></pre>

<p>This will clone project <code>core</code> into a directory of the same name and running <code>git svn rebase</code> will pull in all the changes (after revision 12345). At this point <code>.git/config</code> should have something like this in it:</p>

<pre><code>[svn-remote ""svn""]
  url = https://svn-repo.com/svn/company
  fetch = core/trunk:refs/remotes/trunk
</code></pre>

<p>So far so good. Now, let's say I want to add the <code>playground</code> branch. This is where it gets a bit hazy.</p>

<hr>

<p><strong>Option 1</strong>: Update the existing remote in <code>.git/config</code> by adding the branch there:</p>

<pre><code>[svn-remote ""svn""]
  url = https://svn-repo.com/svn/company
  fetch = core/trunk:refs/remotes/trunk
  branches = core/branches/{playground}:refs/remotes/branches/*
</code></pre>

<p>At this point, I was able to do:</p>

<ol>
<li><p>Pull in revision 23456 of branch <code>playground</code></p>

<p><code>$ git svn fetch -r 23456</code></p></li>
<li><p>Create a local branch and switch to it</p>

<p><code>$ git checkout -b playground branches/playground</code></p></li>
<li><p>Pull in the latest changes:</p>

<p><code>$ git svn rebase</code></p></li>
</ol>

<hr>

<p><strong>Option 2</strong>: Add a new remote in <code>.git/config</code> (in addition to the existing one):</p>

<pre><code>[svn-remote ""playground""]
  url = https://svn-repo.com/svn/company
  fetch = core/branches/playground:refs/remotes/playground
</code></pre>

<p>From here, the steps are similar to the ones from <strong>Option 1</strong>:</p>

<pre><code>$ git svn fetch playground -r 23456
$ git checkout -b playground remotes/playground
$ git svn rebase
</code></pre>

<hr>

<p><strong>Option 3</strong>: I've also seen someone add a new fetch in the existing remote:</p>

<pre><code>[svn-remote ""svn""]
  url = https://svn-repo.com/svn/company
  fetch = core/trunk:refs/remotes/trunk
  fetch = core/branches/playground:refs/remotes/branches/playground
</code></pre>

<p>I'm not completely certain if that's correct or if it will even work. I can't find where I saw that.</p>

<hr>

<p>Currently, I'm sticking with <strong>Option 1</strong>, but I would really like to know the most appropriate way to do this.</p>
","2","350103","0"
"15391829","743290","2013-03-13 17:05:17","0","314","<git><git-svn>","Download big git repo in parts","<p>I am trying to download the <a href=""http://gcc.gnu.org/wiki/GitMirror"" rel=""nofollow"">GCC Git repo</a> and it is taking too much time due to download due to limited speed available.  I Just want to know that is it possible to download the repo in parts.</p>

<p>I have read many articles and questions relating to download single folder or part of repo specifically. But didn't find any article or question for downloading repo in parts. So, that I have all the commits available to me and Git on the same time can be update future commits. </p>
","0","743290",""
"15442231","987846","2013-03-15 21:17:05","0","761","<git><version-control><branch><git-svn><merge-conflict-resolution>","git svn: Avoid large-scale conflicts in branching, merging, and rebasing","<p>I work on two machines (Mac and Windows) with git-svn. My remote repo is an svn. I use the Mac as master repo, and the Windows as a slave. So all git-svn operations are done on the Mac, and the Windows machine only ""git pull"" or ""git push"" with the Mac.</p>

<p>My workflow which looks like the following often puts me into the situation where I need to resolve hundreds of conflicts:</p>

<ol>
<li>I mainly work on the Mac and then let Windows ""git pull"" and make tests.</li>
<li>Sometimes I need to work on Windows a bit and commit to a feature branch. </li>
<li>Then I ""git push origin"" to push the branch back to Mac.</li>
<li>Then on Mac I ""git merge windows_branch"" into my master branch.</li>
<li>Finally I ""git svn rebase"" and ""git svn dcommit"".</li>
</ol>

<p>At step 5, <strong>Here come the conflicts!!</strong> And I once spent 3 hours going through each and every conflict using ""git mergetool"", ""git rebase --continue"", ""git rebase --skip"", and ""git rebase --abort"" workflow. If I'm lucky, I can figure out all of them; but sometimes, there are just way too many of them, <strong>and worse,</strong> the rebasing goes through the same set of conflicts repeatedly as it traverses the history (git knows only changes, not files); eventually I get confused, mis-resolve some of them, and cause bigger nightmares. Some scripts I learned can help me do something like ""git accept-ours"" or ""git accept-theirs"", but this doesn't work too well with history that involves deleted files, and I still need to accept repeatedly.</p>

<p>This was such a nightmare to the point where I really start to hesitate to use branching-and-merging workflow. The problem remains that I don't know exactly why there can be so many conflicts. But if there are recommended workflows or practice that can help me either prevent such conflicts or easily batch-resolve, it would be great.</p>

<p>Thanks for you help!</p>
","3","987846","0"
"15476013","924954","2013-03-18 11:44:15","6","1519","<git><git-svn>","git-svn stops with no error message when trying to clone","<p>I'm running the git-svn clone command against the subversion server as follows:</p>

<p>git svn clone svn: --no-metadata -A users.txt --stdlayout ~/temp</p>

<p>The message 'Checked through r0000' appears and the revision number increases up to r8200 and then pauses. After about 30 seconds the commands prompt re-appears and I have the makings of a git repository in the temp directory but it contains no actual source code files.</p>

<p>How can I get more information on what is happening?</p>

<p>I have tried the git-svn from both a windows and a linux client. On windows it is version 1.8.1, on linux it is 1.7.10.4</p>
","4","924954",""
"15487258","270628","2013-03-18 21:26:09","3","1501","<git><svn><version-control><git-svn>","git-svn single svn server, multiple svn directories as multiple git remotes","<p>Is it possible to have a single subversion server with multiple directories for branches that are each mapped as remotes in a git repository created using git-svn?</p>
<h3>Existing Setup</h3>
<ul>
<li>Trunk: <code>http://svn.example.com/trunk</code></li>
<li>My branches: <code>http://svn.example.com/developers/luisgo/branches</code></li>
<li>My tags: <code>http://svn.example.com/developers/luisgo/tags</code></li>
<li>My scrum team's branches: <code>http://svn.example.com/teams/scrum-01/branches</code></li>
<li>My scrum team's tags: <code>http://svn.example.com/teams/scrum-01/tags</code></li>
<li>Company's branches: <code>http://svn.example.com/branches</code></li>
<li>Company's tags: <code>http://svn.example.com/releases</code></li>
</ul>
<p>This is legacy and in the process of being migrated to git BUT I am trying to prove we can use git-svn and have:</p>
<ul>
<li>one &quot;personal&quot; remote point to my personal subversion directory on the server</li>
<li>one &quot;scrum&quot; remote point to my scrum team's subversion directory on the server and</li>
<li>one &quot;company&quot; remote point to the company's subversion directory on the server</li>
</ul>
<p>Note that I don't mind it if my remote's names have to be <code>personal/branches</code>, <code>personal/tags</code>, <code>scrum/branches</code>, <code>scrum/tags</code>, <code>company/branches</code> and <code>company/tags</code> respectively.</p>
<p>Ultimately I want to be able to create a branch off of trunk (aka company/master) that is not only local but pushed to <code>personal/branches/some-feature-branch</code> and later can be pushed to a different remote (say <code>scrum/branches/some-feature-branch</code> for collaboration and finally pushed to <code>company/some-feature-branch</code> for release. Note that I understand tagging but intentionally omitting that for the purposes of this discussion.</p>
<p>I thought this would work:</p>
<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
    precomposeunicode = false
    warnambiguousrefs = false
[svn-remote &quot;svn&quot;]
    url = https://svn.example.com
    fetch = trunk:refs/remotes/trunk
    branches = developers/luisgo/branches/*:refs/remotes/svn/personal/branches/*
    tags = developers/luisgo/tags/*:refs/remotes/svn/personal/tags/*
    branches = teams/scrum-01/branches/*:refs/remotes/svn/scrum/branches/*
    tags = teams/scrum-01/tags/*:refs/remotes/svn/scrum/tags/*
    branches = branches/*:refs/remotes/svn/company/branches/*
    tags = releases/*:refs/remotes/svn/company/tags/*
</code></pre>
<p>But it doesn't.</p>
<h3>EDIT ===========================================</h3>
<p>I think I explained myself wrong. Technically that example above works. What I am trying to achieve is to have one &quot;remote&quot; create per branching directory so:</p>
<pre><code>git push personal feature-branch
</code></pre>
<p>Results in:</p>
<pre><code>https://svn.example.com/developers/luisgo/branches/feature-branch
</code></pre>
<p>And...</p>
<pre><code>git push scrum feature-branch
</code></pre>
<p>Results in:</p>
<pre><code>https://svn.example.com/teams/scrum-01/branches/feature-branch
</code></pre>
<p>And...</p>
<pre><code>git push company feature-branch
</code></pre>
<p>Results in:</p>
<pre><code>https://svn.example.com/branches/feature-branch
</code></pre>
<p>In essence <code>personal</code>, <code>scrum</code> and <code>company</code> are remotes with different branches/* in the same svn server.</p>
<p>When I try to do this:</p>
<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
    precomposeunicode = false
    warnambiguousrefs = false
[svn-remote &quot;company&quot;]
    url = https://svn.example.com
    fetch = trunk:refs/remotes/trunk
    branches = branches/*:refs/remotes/svn/company/branches/*
    tags = releases/*:refs/remotes/svn/company/tags/*
[svn-remote &quot;personal&quot;]
    url = https://svn.example.com
    fetch = trunk:refs/remotes/trunk
    branches = developers/luisgo/branches/*:refs/remotes/svn/personal/branches/*
    tags = developers/luisgo/tags/*:refs/remotes/svn/personal/tags/*
[svn-remote &quot;scrum&quot;]
    url = https://svn.example.com
    fetch = trunk:refs/remotes/trunk
    branches = teams/scrum-01/branches/*:refs/remotes/svn/scrum/branches/*
    tags = teams/scrum-01/tags/*:refs/remotes/svn/scrum/tags/*
</code></pre>
<p>It tells me I need to resolve an ambiguous setting where I have the same url specified for more than one remote. I get that it is but these do share one trunk.</p>
<h3>END EDIT ===========================================</h3>
<p>Any ideas? Is this even possible?</p>
<p>Thank you,</p>
<p>Luis</p>
<p>PS: My apologies if this is not being posted in the right place. I am happy to move it. No need to flame.</p>
","3","270628","0"
"15502284","234405","2013-03-19 14:31:20","10","13268","<regex><git><git-svn><ignore>","git-svn clone ignore-paths regular expression for folders","<p>Am trying to do a git-svn clone to import all the files in SVN to GIT. The command that was given was this;</p>

<pre><code>git svn clone --stdlayout --ignore-paths='(/cache|/tmps|/file/conf/setting.xml)' --authors-file=../authors.txt file:///svnFolder/local-repos/PRG PRG.git
</code></pre>

<p>The above clones but the issue is it ignores all the files and folder that has cache and tmps. Like for instance it ignores even these</p>

<pre><code>new/folder/cache
meta/files/sets/tmps.html
</code></pre>

<p>Can anybody please help me out to set the regular expression to give in the ignore-paths to ignore files and subdirectories that is there in the root folder's cache and tmps directories.</p>
","0","234405","0"
"38611428","3949925","2016-07-27 11:15:53","0","74","<git><git-svn>","How to keep git in synch with svn and simultaneously be able to make changes to git repo","<p>I have migrated my svn repository to a git repository on a local developer machine. So master is now tracking svn trunk. I wanted <code>svn trunk</code> to be <code>develop</code> branch in git which I have accomplished by renaming the branch in git. </p>

<p>I keep synchronizing the changes made in svn trunk to git by issuing <code>git svn fetch</code> and <code>git svn rebase</code>. This is working really well. </p>

<p>The folder structure in svn repo and hence in git repo is as below</p>

<pre><code>    s-online/
    ├── .git
    └── Online            
        ├── config
        │   ├── build
        │   ├── dataload
        │   ├── export
        │   ├── http
        │   ├── search
        │   ├── web
        │   └── webservice
        └── workspace
            ├── data
            ├── logic
            ├── site
            ├── stores
            └── tools
</code></pre>

<p>I want to modify the folder structure in my git repo to look like the one below. So, essentially, move everything inside workspace folder under Online folder.</p>

<pre><code>    s-online/
    ├── .git             
    └── data
    ├── logic
    ├── site
    ├── stores
    └── tools
    ├── config
        ├── build
        ├── dataload
        ├── export
        ├── http
        ├── search
        ├── web
        └── webservice
</code></pre>

<p>Some developers want to start using git as of today for new development whereas other developers who are still committing to svn will take a while to transition to git completely. </p>

<p>Until then, the challenge is to be able to synchronize commits from svn trunk to my git repo (modified folder structure) for some time.</p>

<p>When I perform <code>git svn fetch</code> followed by <code>git svn rebase</code>, the rebase takes a while (understandably because my changes to the folder structure needs to be applied on top of the svn commits). However, for all the files that are committed to svn (since the folder restructure in git), I am getting conflicts for all those files during rebase. </p>

<p>I am not sure why there are conflicts on all files committed to svn in the first place as all I have done is to reorganize the folder structure in git?</p>

<p>Is there something I am missing?</p>
","0","3949925",""
"173621","5179","2008-10-06 08:59:02","1","779","<branch><git-svn>","Is it possible to make git svn ""relocate"" branch files on checkout?","<p>Our svn repository has lots of branches that are branches off of sub-trees. This works OK with svn because I can check out that sub-tree in the correct spot in my working copy. However, if I check out the same branch using git, I get a working copy with only the branch sub-tree. Is it possible to make git relocate the branch so that my working copy structure is identical whether I am on trunk or a branch?</p>

<p>I realize that our svn practices clash with git's philosophy of always working on the whole tree. How do people deal with this?</p>
","0","5179",""
"192736","4203","2008-10-10 19:26:44","61","31180","<git><svn><repository><branch><git-svn>","How do I make git-svn use a particular svn branch as the remote repository?","<p>A word of warning: I'm a n00b to <code>git</code> in general. My team uses feature branches in <code>svn</code>, and I'd like to use <code>git-svn</code> to track my work on a particular feature branch. I've been (roughly) following <a href=""http://andy.delcambre.com/2008/03/04/git-svn-workflow.html"" rel=""noreferrer"">Andy Delcambre's post</a> to set up my local <code>git</code> repo, but those instructions seem to have led <code>git</code> to pick the <code>svn</code> branch that had changed most recently as the remote repository; the problem is that's not the branch I care about. How do I control which branch <code>git-svn</code> uses? Or am I approaching this completely wrong?</p>

<p>UPDATE: I did use the <code>-T</code>, <code>-b</code>, and <code>-t</code> options (in my case because the <code>svn</code> repo has multiple projects, but I want the <code>git</code> repo to contain only the project I'm working on).</p>
","0","4203","0"
"258590","15203","2008-11-03 13:13:55","12","4461","<svn><git><git-svn>","How do I import svn branches rooted in different directories into git using git-svn?","<p>I have an SVN repository structure like below. We are using multiple levels under branches for various release maintenance branches, plus a directory for feature branches.</p>

<p>git-svn init seems to work with a single --branches argument, i.e. it seems to expect all of the branches to be in a single location.</p>

<pre><code>trunk
branches
  1.1
    1.2.1
    1.2.2
  1.2
    1.2.1
    1.2.2
    1.2.3
  features
    feature1
    feature2
</code></pre>

<p>Any ideas on how to handle this?</p>

<p>Thanks</p>
","1","15203","0"
"279144","","2008-11-10 20:58:19","7","2246","<git><git-svn>","Clone multiple SVN projects with git-svn","<p>I have a large Java app that is split up into multiple projects.  Each project has its own folder in a Subversion repository like so:</p>

<p>AccountingCore</p>

<ul>
<li>trunk</li>
<li>branches</li>
<li>tags</li>
</ul>

<p>Common</p>

<ul>
<li>trunk</li>
<li>branches</li>
<li>tags</li>
</ul>

<p>WebCommon</p>

<ul>
<li>trunk</li>
<li>branches</li>
<li>tags</li>
</ul>

<p>etc...</p>

<p>I want to start using <strong>git-svn</strong> locally instead of subversion. </p>

<p>This may be a stupid question, but is there a way to checkout <em>all the projects</em> in the repository at once (including branches and all) instead checking out each project individually?</p>

<p>Thanks,
Tony</p>
","0","","0"
"12102836","351614","2012-08-24 03:41:17","4","1958","<git><svn><git-svn><gitignore>","git svn ignore paths use ignore file","<p>I am converting a svn repo to a git repo and we have a number of binary files that have been checked in over the years that shouldn't have, along with images and other files, I don't really want these files present in the git repo taking up space.</p>

<p>I have played around with git-svn to convert the repo and have used its -ignorepaths property but I'd like to be able to feed a list into the ignore paths rather than having to specify a ignorepaths for each pattern/directory I want to exclude, if I could use a svnignore/gitignore file during the conversion that would take out this junk that would be even better.</p>

<p>Is there a way to do this or do I just have to bit the bullet and specify each pattern/path individually?</p>

<p>EDIT: updated question to be more clear as to what I was asking</p>
","2","351614",""
"425766","9594","2009-01-08 20:27:27","18","4556","<git><git-svn><rebase>","Why does git svn dcommit lose the history of merge commits for local branches?","<p>I have a local git repository created with <code>git svn clone</code>.  I make a local branch, make some changes, switch back to master, <code>git svn rebase</code> and if it's all good, I merge my branch back into master.  Then the tree looks something like this:</p>

<p><a href=""http://img.skitch.com/20090108-cjguu3hcci9x2k17mcftamw8f1.jpg"">alt text http://img.skitch.com/20090108-cjguu3hcci9x2k17mcftamw8f1.jpg</a></p>

<p>Sometimes, later when I <code>git svn rebase</code> again and get some remote changes, it loses the fact that a_branch was merged into the mainline and the tree looks like this:</p>

<p><a href=""http://img.skitch.com/20090108-kn3bn1qgi5ijw8ja5ijkd75pa3.jpg"">alt text http://img.skitch.com/20090108-kn3bn1qgi5ijw8ja5ijkd75pa3.jpg</a></p>

<p>Why is that?  Can I stop it?  Is there an easy way to tell that a branch was merged, or should I delete my branches when I'm done so I don't forget what has and hasn't been merged?</p>
","0","9594","0"
"19725045","271746","2013-11-01 10:35:05","3","233","<version-control><git-svn>","How should I structure my git-svn workflow to avoid ""revision1 is merged into revision2, but does not have git-svn metadata""","<p>I am using git-svn in my workplace since our current version control server is subversion and switching completely to git does not seem to be on the horizon for now (*cry*)</p>

<p>My workflow is as follows
I have the following branches</p>

<ul>
<li>master tracks remotes/trunk</li>
<li>local/0.4 tracks remotes/0.4</li>
<li>work is my development branch for the master branch</li>
<li>work-0.4 is my development branch for the local/0.4 branch</li>
</ul>

<p>I work in my work branches, then I merge to master and local/0.4 using</p>

<pre><code>git merge --no-ff &lt;branchname&gt;
</code></pre>

<p>After that I check in to svn via </p>

<pre><code>git svn dcommit
</code></pre>

<p>and I use </p>

<pre><code>svn.pushmergeinfo=true 
</code></pre>

<p>to update the svn:mergeinfo properties so my colleagues won't get angry with me messing up that metadata for them :)</p>

<p>However, I just had the following problem which stumps me.</p>

<p>I had done two commits on the work-0.4 branch, then I merged these to my local/0.4 branch with git merge --no-ff work-0.4. After this, I did git svn dcommit and recieved the following message</p>

<pre><code>Committing to https://svn-server ...
e138050f6ebd2f2ca99cbefc5e48acae412e1f86 is merged into revision f5f2345e8e5fc64
20423bdc00397b5853b3759c4, but does not have git-svn metadata. Either dcommit the
branch or use a local cherry-pick, FF merge, or rebase instead of 
an explicit merge commit.
</code></pre>

<p>After some rebasing and reset'ing of branches I managed to push everything to svn, but my solution entailed doing a rebase of my local/0.4 branch to the work-0.4 branch which in turn meant that I did not get to squash my two git-commits into one svn-commit :/</p>

<p>I feel that I'm probably doing something wrong with my workflow here, and it might be related to svn.pushmergeinfo. The docs for svn.pushmergeinfo says</p>

<pre><code>config key: svn.pushmergeinfo
+
This option will cause git-svn to attempt to automatically populate the
svn:mergeinfo property in the SVN repository when possible. Currently, this can
only be done when dcommitting non-fast-forward merges where all parents but the
first have already been pushed into SVN.
</code></pre>

<p>and to be honest, I'm not quite sure that I understand that correctly? Am I doing something weird here that makes svn.pushmergeinfo not work correctly? How should I structure my workflow to optimally work with git-svn correctly (setting proper mergeinfos etc)?</p>
","1","271746",""
"12161541","709646","2012-08-28 14:29:24","31","30914","<git><svn><git-svn>","Work-around for failing ""git svn clone"" (requiring full history)","<p>I want to convert a Subversion repository sub-directory (denoted by <code>module</code> here) into a git repository with full history. There are many <code>svn copy</code> operations (Subversion people call them branches) in the history of my Subversion repository. The release policy has been that after each release or other branches created, the old URL is left unused and the new URL replaces the old one for containing the work.</p>
<p>Optimally, by my reading, it seems like this should do the trick:</p>
<pre><code>$ git svn clone --username=mysvnusername --authors-file=authors.txt \
    --follow-parent \
    http://svnserver/svn/src/branches/x/y/apps/module module
</code></pre>
<p>(where <code>branches/x/y/</code> depicts the newest branch). But I got an error, which looks something like this:</p>
<pre><code>W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: '/svn/src/!svn/bc/100/branches/x/y/apps/module' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
</code></pre>
<p>(<strong>Update:</strong> Adding option <code>--no-minimize-url</code> to the above does not remove the error message.)</p>
<p>The directory <code>module</code> get created and populated, but the Subversion history past the newest <code>svn copy</code> commit is not imported (the git repository created ends up having just two commits when I expected hundreds).</p>
<p>The question is, how to export the full Subversion history in the presence of this situation?</p>
<h2>Possible Cause</h2>
<ol>
<li><p>Searching for the error message, I found this: <a href=""https://stackoverflow.com/questions/1493052/git-svn-anonymous-checkout-fails-with-s"">git-svn anonymous checkout fails with -s</a>
which linked to this Subversion issue: <a href=""http://subversion.tigris.org/issues/show_bug.cgi?id=3242"" rel=""noreferrer"">http://subversion.tigris.org/issues/show_bug.cgi?id=3242</a></p>
<p>What I understand by my reading, something in Subversion 1.5 changed about how the client accesses the repository. With newer Subversion, if there is no read access to some super directory of the URL path (true for me, <code>svn ls http://svnserver/svn</code> fails with <code>403 Forbidden</code>), then we fail with some Subversion operations.</p>
</li>
<li><p>Jeff Fairley in his answer points out that spaces in the Subversion URL might also cause this error message (confirmed by user Owen). Have a look at his solution to see how he solved the case if your <code>git svn clone</code> is failing for the same resson.</p>
</li>
<li><p>Dejay Clayton in his answer reveals that if the deepest subdirectory components in branch and tag svn urls are equally named (e.g. <code>.../tags/release/1.0.0</code> and <code>.../branches/release-candidates/1.0.0</code>) then this error could occur.</p>
</li>
</ol>
","9","709646","0"
"582348","1665","2009-02-24 16:03:50","24","14841","<git><merge><git-svn>","Using git-svn: Pull, Merge or Rebase?","<p>I've been fighting the git/git-svn learning curve and last night, as part of that learning curve, I did something very, very bad. I've since gotten it corrected, but I'm hoping to understand the error my ways.</p>

<p>I have an svn repository from which I've cloned the trunk and branches (tags I ignored since we don't work on those).  Using git, I created local branches for each of the branches that I currently need to work with:</p>

<pre><code>$ git checkout -b trunk svn/trunk
$ git checkout -b feature1 svn/branches/development/feature1
$ git checkout -b maint svn/branches/maintenance/previous-version
</code></pre>

<p>I made feature1 my active branch and made a few changes before getting pulled away for a few days. I cam back to it yesterday wanted to integrate any changes that had been made to the trunk so that I was working with the latest and greatest. What I did was a complete update of all brances first, via <strong>git svn rebase</strong> (no one else had worked on the feature1 branch). With everything up to date from my svn repository, I tried to rebase.</p>

<p>With feature1 as my active branch, I did a ""git rebase trunk"" thinking that I would be pulling changes from the trunk <em>into</em> the feature1 branch. Turns out I was very, very wrong. After merging all of the conflicts, I did a <strong>git svn dcommit</strong> and found that my changes had been applied to the trunk.</p>

<p>My first question is simply where was the core error in my thought process? My second is, after much reading and Googling, I see people espousing pulls, merges and rebases. Given the fact that I want to merge the changes applied in one local branch to another local branch, what <em>should</em> I have done? What's the best practice for this scenario?</p>

<p>Thanks for your help.</p>
","0","1665","0"
"29815295","1879749","2015-04-23 06:22:07","0","1086","<git><github><git-svn>","git go back to a previous commit before reset hard","<p>I changed some code, then ran</p>

<pre><code>git add .
git commit -m ""message1""
</code></pre>

<p>But after that, I did</p>

<pre><code>git reset hard
git pull
git push
</code></pre>

<p>(The push actually did nothing, of course.)</p>

<p>Now I want to retrieve the state of my files at the point of commit ""message1"". How can I do that?</p>
","6","1879749","0"
"29817960","4823214","2015-04-23 08:36:44","0","129","<git><tfs><git-svn>","how to override code in git when pull code","<p>When I pull code from TFS server <code>git tf pull --deep</code>, I met a error as below:</p>

<pre><code>git-tf: Checkout conflict with files:....
</code></pre>

<p>How to overrride code on local to get new code from server.</p>

<p>Thanks!</p>
","0","4823214",""
"655243","","2009-03-17 17:27:00","207","97685","<git><git-svn><ignore>","Ignore modified (but not committed) files in git?","<p>Can I tell git to ignore files that are modified (deleted) but should not be committed?</p>

<p>The situation is that I have a subdirectory in the repo which contains stuff I'm not interested in at all, so I deleted it to prevent it showing up in auto-completions and the like (in the IDE).</p>

<p>But now, if I add that folder to .gitignore, simply nothing changes, all the stuff is shown as deleted by git status.</p>

<p>Is there a way to make git ignore it either way?</p>

<p>(Alternatively, as I'm using git-svn, could I commit the changes to the local git and ensure they are not passed on to the svn repo?)</p>
","1","","0"
"19871000","376767","2013-11-09 00:43:29","5","828","<git><version-control><merge><git-svn><git-merge>","git merge against an arbitrary base revision (git-svn)","<p>I'm using git-svn for offline development against my company's Subversion repository, which is the project's repository of record. To enable management visibility I'm required to maintain my feature branches in SVN. Sometimes I need to merge changes from our trunk to a feature branch multiple times over the lifetime of the branch. Since I'm required to keep the branch up-to-date in SVN I have to merge; I can't rebase commits once they're pushed to SVN. Further, <code>git svn dcommit</code> removes the second parent from merge commits. That means on merges after the first <code>git merge</code> identifies the branch root as the merge base instead of the most recent merge parent. It therefore tries to re-merge changes that have already been merged, which pretty much guarantees nasty conflicts.</p>

<p>When I merge in SVN I manually specify the base revision:</p>

<pre><code>svn merge -r 49262:49608 $svn/trunk
</code></pre>

<p>Is there a way in git to do a merge with a manually specified base revision like that?</p>

<h3>Update:</h3>

<p>Note that I need to specify two revisions, both the base and the parent revision. I have a history like</p>

<pre><code>trunk: A -- B -- C -- D -- H -- I
             \         \
    feature:  E -- F -- G -- J -- K
</code></pre>

<p>but <code>git svn dcommit</code> has removed the parent relationship between <code>G</code> and <code>D</code>. I need to run a merge of <code>I</code> on to <code>K</code> with a base of <code>D</code>. Simply running</p>

<pre><code>$ git checkout feature
$ git merge trunk
</code></pre>

<p>will try to merge <code>I</code> on to <code>K</code> with a base of <code>B</code> instead of <code>D</code>, which re-applies <code>C</code> and <code>D</code> resulting in extreme merge conflicts. With SVN I would run a command like</p>

<pre><code>$ svn switch $svn/feature
$ svn merge -r D:I $svn/trunk
</code></pre>

<p>but <code>git merge</code> does not have an option to specify the base revision <code>D</code>. I'm looking for something like</p>

<pre><code>$ git merge --base D trunk
</code></pre>

<p>but such an option doesn't appear to exist.</p>
","0","376767",""
"16485898","20723","2013-05-10 15:39:06","1","237","<git><svn><version-control><git-svn>","Make a git commit unpushable to Subversion?","<p>I use git locally, and git-svn to work with a shared Subversion repository. I have a local branch with some parameter changes that are relevant to my test environment, but that I would never want to share with everyone else. Right now the way I'm doing that is by having a local branch with that parameter commit. However, I'd like to make sure I never accidentally commit that branch to SVN.</p>

<p>Is there a way I can flag this commit (or branch) to make git svn dcommit yell at me first? Or maybe a hook that would check so that, say, I can only git svn dcommit from master? </p>
","1","20723","0"
"33095105","5427432","2015-10-13 05:54:28","2","381","<git><github><bitbucket><git-svn><bitbucket-api>","Report of bitbucket and github pull and push","<p>I need a report of all pull and push by all team members.</p>
","1","5427432","0"
"16524730","26286","2013-05-13 14:37:58","2","591","<maven><git-svn>","Can I use the Maven release plugin directly with git-svn?","<p>At work, most people still host their code in Subversion.  If I want to work with one of these projects, I usually check it out with git-svn.  The only catch is that if I want to cut a release with Maven, I have to pull a separate SVN release and build from that directly, because (as far as I can tell) <a href=""http://jira.codehaus.org/browse/SCM-623?page=com.atlassian.jira.plugin.system.issuetabpanels%3achangehistory-tabpanel"" rel=""nofollow"">Maven doesn't understand git-svn</a>.</p>

<p>It looks like this has been <a href=""http://mail-archives.apache.org/mod_mbox/maven-users/200902.mbox/%3Ca6b2caf40902151235l121bb607oa33d8f5913515e52@mail.gmail.com%3E"" rel=""nofollow"">on the radar for many years</a>, without forward movement.  Is there any kind of alternative, that doesn't involve a complete separate (native SVN) copy of the entire repository just for cutting releases?  It seems like it would be common enough that somebody would have made a workaround by now.</p>
","1","26286","0"
"33115508","1677041","2015-10-14 02:18:47","0","3213","<git><svn><git-svn>","git svn clone: Error from SVN, (220001): Item is not readable","<p>I got this error when trying to build a git repo from remote svn server, it seems many people encountered this with different cause. All the google results didn't work for me, I just fixed the error with fuzzy solution.</p>
<p>Error:</p>
<blockquote>
<p>git svn fetch</p>
<p>W: Item is not readable at /Applications/Xcode.app/Contents/Developer/usr/share/git-core/perl/Git/SVN.pm line 154.</p>
<p>Error from SVN, (220001): Item is not readable</p>
</blockquote>
","0","1677041",""
"16549874","1749895","2013-05-14 18:04:16","1","46","<git><git-svn>","Export svn to git without a folder","<p>I would like to migrate svn solution but without a specified files/folder.</p>

<p>My problem is such because I commited a big library (50 mb) into svn which I do not need now, and I do not need project which use it. But the rest of solution is still important.</p>
","0","1749895","0"
"33129126","4050498","2015-10-14 15:11:01","0","720","<git><svn><git-svn><rebase>","git svn rebase conflicts","<p>Hi we are doing one way synchronisation from svn to git. We are following some steps by searching through the internet.
  Developers commit code to the svn. We need to synch all the changes to Git from svn. No one commits to git and the git branch is empty initially. We are using git-svn to do this process.</p>

<p>the steps are:</p>

<p>1) git svn clone</p>

<p>2) git add remote origin</p>

<p>3) git pull </p>

<p>4) git push</p>

<p>Upto here everything is fine and no issues.</p>

<p>Now we want to push the new changes from svn to git. Then we do</p>

<p>git svn rebase</p>

<p>it is showing conflicts. We don't want to do resolve conflicts manually. Whatever committed to svn should be pushed to git. Please help us is there any other way that it can push changes from svn to git without conflicts means auto merge from svn because we want to do this process automate.</p>

<p>And also if there are any particular steps do we need to follow to work the sync without any conflicts.</p>

<p>Thank You.</p>
","0","4050498",""
"16565991","611901","2013-05-15 13:13:23","5","6522","<git><svn><git-svn><git-merge><git-rebase>","Keep svn repository in sync with git one","<p>my team mate and I are struggling to get our svn repository in sync with our git one.
We are working on a project and we are requested to share our code on an svn repository (hosted by the assembla.com site).
Since we are used to version control our code with git, we decided to make good use of the git svn feature git provides.
To share all our work and keep it divided in the right branches, we have a remote repository for git too (bitbucket).</p>

<p>So far all our work committed with git haven't gave us problems, but when it comes to sync the svn repository errors after errors are coming up.</p>

<p>I followed this answer <a href=""https://stackoverflow.com/questions/661018/pushing-an-existing-git-repository-to-svn/772881#772881"">Pushing an existing git repository to SVN</a> to connect the svn repository to the git one, but after a few merges and commit, i'm getting errors and i'm not able to dcommit the changes anymore.</p>

<p>Right now i have a branch which is the copy of svn/trunk</p>

<pre><code>$ git checkout -b assembla_copy -t svn/trunk
  Branch assembla_copy set up to track local ref refs/remotes/svn/trunk.
  Switched to a new branch 'assembla_copy'

$ git svn rebase svn/trunk
Current branch assembla_copy is up to date.
</code></pre>

<p>To sync it with my master branch i both tried to</p>

<pre><code>git merge master
</code></pre>

<p>and</p>

<pre><code>git rebase master
</code></pre>

<p>But while <code>git rebase master</code> start to apply all the changes since the first commit and giving lots and lots of conflicts(when i already have this changes in the svn/trunk instead, since in some way i managed to push some changes to the online repository; we are ar r46 at the moment ), <code>git merge master</code> goes fine but then when i dcommit, all the changes are summed up in only one commit where it states that ""Merge branch 'master' into assembla_copy"", while i would prefer that it would commit all the separate commits (like it did at the beginning..).</p>

<p>If i dcommit from the master branch, all the commits are separated, but then the master branch is rebased, so all the branches that have a master commit as parent shows as separated form the master branch..</p>

<p><strong>Could you explain to me the right workflow to have an svn repository that mirrors a git repository, where all the work is done (the svn one is just a copy)?</strong>
Could you use just standard git commands and not intricate bash scripts as i have seen in some answers while searching for a solution in the last week?</p>

<p>Thank you!</p>
","0","611901","0"
"68897399","1888444","2021-08-23 18:27:33","0","735","<windows><ubuntu><svn><git-svn>","git svn clone -> Conversion of huge repository crashes all the time - is there a remedy?","<p>In the last couple of days I've been unsuccessfully trying to clone our huge SVN repository to GIT.</p>
<p>All the time, sooner or later, I'm running into the following error:</p>
<pre><code>Software caused connection to abort: Error running context: Software caused connection abort at: C:/Program Files/Git/mingw64/share/perl5/Git/SVN/Ra.pn line 312.
</code></pre>
<p><img src=""https://i.stack.imgur.com/uOysH.png"" alt=""Timeout error"" /></p>
<p>I couldn't find any log entry on my Windows 10 client nor on the Ubuntu server giving details on the reason for this error.</p>
<p><a href=""/questions/53157918/git-svn-fetch-error-running-context-software-caused-connection-abort-at"">StackOverflow question #53157918</a> suggested to increase the Apache server timeout value. I increased the Apache timeout value to 10 times the original timeout value - but, apparently, this didn't help.</p>
<p>Following the StdOut output, reading each of the files is a snap, so I don't suggest it's a transmission timeout issue, anyway.</p>
<h1>Edit</h1>
<p>I just tried again ... This time the error is Out of Memory:</p>
<pre><code>libsvn: Out of memory - terminating application.
      1 [main] perl 735 cygwin_exception::open_stackdumpfile: Dumping stack trace to perl.exe.stackdump
</code></pre>
","1","1888444",""
"16578465","2252692","2013-05-16 03:20:54","20","14436","<macos><git-svn>","On OSX using sourcetree / git-svn getting ""Can't locate SVN/Core.pm in @INC ""","<p>I'm using OSX and want get a svn repo into a local git repo using <code>sourcetree</code>. </p>

<p>When I add a bookmark using sourcetree using SVN URL, thus <code>sourcetree</code> knows it's a SVN url, but when I  click the clone button, it reports an error like following:</p>

<pre><code>Can't locate SVN/Core.pm in @INC (@INC contains: /usr/local/git/lib/perl5/site_perl /Applications/SourceTree.app/Contents/Resources/git_local/lib/perl5/site_perl /Library/Perl/5.12/darwin-thread-multi-2level /Library/Perl/5.12 /Network/Library/Perl/5.12/darwin-thread-multi-2level /Network/Library/Perl/5.12 /Library/Perl/Updates/5.12.4 /System/Library/Perl/5.12/darwin-thread-multi-2level /System/Library/Perl/5.12 /System/Library/Perl/Extras/5.12/darwin-thread-multi-2level /System/Library/Perl/Extras/5.12 .) at /Applications/SourceTree.app/Contents/Resources/git_local/lib/perl5/site_perl/Git/SVN/Editor.pm line 5.
BEGIN failed--compilation aborted at /Applications/SourceTree.app/Contents/Resources/git_local/lib/perl5/site_perl/Git/SVN/Editor.pm line 5.
Compilation failed in require at /Applications/SourceTree.app/Contents/Resources/git_local/libexec/git-core/git-svn line 81.
BEGIN failed--compilation aborted at /Applications/SourceTree.app/Contents/Resources/git_local/libexec/git-core/git-svn line 81.
</code></pre>

<p>I don't how to get it through. Can anyone give me a pointer on how to do this? </p>
","4","2252692","0"
"33154790","1904815","2015-10-15 17:23:12","0","316","<git><perl><svn><git-svn>","""git svn"" commands fail with ""Value is not a string (or undef) at /usr/share/perl5/vendor_perl/Git/SVN/Ra.pm line 96""","<p>I have a git repository created with <code>git svn clone</code> from an upstream SVN repository. The repository was created and configured some time ago (1 or 2 years). Pulling (<code>git svn fetch</code>/<code>git svn rebase</code>) and pushing (<code>git svn dcommit</code>) worked fine before. I stopped using the repository for a couple of months and using any of these commands now fails with:</p>

<pre><code>Value is not a string (or undef) at /usr/share/perl5/vendor_perl/Git/SVN/Ra.pm line 96
</code></pre>

<p>So I am not able to use git-svn. How can I make it work again?</p>

<p>I am running Arch Linux so there is a good chance there was an update to either Subversion or Git that somehow broke my setup. However, I didn't find anything related when searching for the error message.
The perl line in question looks like this in my current git version (since line 96 might be different in other versions):</p>

<pre><code>SVN::_Core::svn_auth_set_parameter($baton,
    $SVN::_Core::SVN_AUTH_PARAM_DONT_STORE_PASSWORDS,
    bless (\$dont_store_passwords, ""_p_void""));
</code></pre>

<p>I am currently using subversion 1.9.2 and git 2.6.1</p>

<p>EDIT: The same problem is tracked in <a href=""https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=797705"" rel=""nofollow"">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=797705</a></p>
","1","1904815",""
"17340286","1937646","2013-06-27 10:05:08","1","121","<git><version-control><git-svn><git-merge>","git-svn: merging two svn branches - add/add conflicts with no local changes","<p>I have my repository setup with git-svn and two branches with an svn remote.
I want to merge changes from svn-trunk into the svn-branch1 and then propagate those to my local git only branches.</p>

<p>I am using:</p>

<pre><code>git checkout branch1
git merge master
</code></pre>

<p>The merge always results in add/add conflicts for every file edited in trunk, even when branch1 does not have any local changes. Why does this happen and how can I avoid it?</p>

<p>How do you suggest propagating the changes to the git branches? I am using:</p>

<pre><code>git checkout branch1_gitlocal
git rebase branch1
</code></pre>
","0","1937646",""
"17349871","2529180","2013-06-27 17:43:43","2","47","<git-svn>","Forbid git svn local branch from committing to the remote svn repository","<p>I'm using git-svn to handle and commit to a svn repository.
I also have created a local branch with commits that I don't want to be committed to the repository.  </p>

<p>For safety, I want that branch to be able to do ""git svn rebase"" but ""git svn dcommit"" should fail (it doesn't have to be a pretty solution, I just want to make sure that the commits in that branch do not get committed by mistake).</p>

<p>Is there a way to setup the local branch like this ?</p>
","0","2529180",""
"50725556","4527515","2018-06-06 16:44:16","0","941","<git><svn><gitlab><git-svn>","How to migrate svn commit history or svn logs to gitlab","<p>Objective: Migrate the SVN logs or SVN commit history to gitLab.</p>

<p>[Please note: Working in Windows]
Successfully migrated the code from SVN to GIT via the following steps:</p>

<pre><code>$ mkdir svn-migration
$ cd svn-migration
$ svn co &lt;SVN-URL&gt;
</code></pre>

<p>Retrieved the authors of SVN and stored into a file author.txt.</p>

<p>Format of authors.txt:</p>

<pre><code>Pratim = Pratim &lt;email-id&gt;
</code></pre>

<p>Followed the following commands: </p>

<pre><code>    $ git config --global user.name ""PratimS""
    $ git config --global user.email ""SPratim@company.com""
    $ git config --global svn.authorsfile authors.txt
    $ git svn init &lt;svn-url&gt; --stdlayout
    $ git svn fetch
</code></pre>

<p>With this, the trunk source code folder from svn will be downloaded into my local directory.</p>

<pre><code>$ git pull origin master
$ git remote add origin &lt;git-url&gt;
$ git push -u origin master
</code></pre>

<p>So I have successfully pushed all the source code to the Gitlab from the local repository.</p>

<p>Any suggestion on the procedure to fetch the svn logs or the commit history of the files in svn and then push it to the Gitlab, will be very helpful.</p>
","1","4527515",""
"17413476","281545","2013-07-01 20:51:38","3","3968","<git><svn><git-svn>","git svn specify branches and tags on a non standard svn repository layout","<p>The layout is :</p>

<pre><code>Branches\
    Project1/
        Branch11/
        ...
        Branch1N/
    Project2/
        Branch21/
    ProjectX/   # not anywhere else
Excluded1\
Excluded2\
Excluded3\
Excluded4\
Programs\
    Excluded11\
    ...
    Excluded1N\
    Project1/   # the main one
    Project2/
    ...
    ProjectN/
Tags\
    Project1/
        Release1/
        ...
        Release69/
</code></pre>

<p><em>Excluded</em> I managed to exclude - but I am completely unable to understand how can I map branches/tags to git branches/tags - preferably after the fact (each clone takes ~5 hours).</p>

<p>Please bear in mind I am new to SVN - I know not nor do I understand the branching/tagging system.</p>

<p>I am on <em>windoz</em> - svn2git is no option (anyway I am interested in how I do this after the clone or at worse cloning again but with vanilla git <em>only</em>)<br>
Also I do not intend this as a permanent migration, it will function as a bridge between the SVN and the new git repo used in dev - so I want to keep as much info as possible - but no more than needed. At some point it might become permanent - where upon I will need to filter out empty commits (to the excluded projects) I guess (?)</p>

<p><a href=""https://sourceforge.net/p/oblivionworks/code/3008/tree/"" rel=""nofollow"">Repo</a></p>

<p>Command :</p>

<blockquote>
  <p>$ git svn clone --ignore-paths=""^(?:Releases|Projects|Scripts|Games|)/|^Programs/(?:Nif Scanner|Nif Viewer|Raziel23x's Oblivion Toolset|Shader Disasm|Shader Editor)/"" --authors-file=authors_with_emails.txt svn://svn.code.sf.net/p/oblivionworks/code/ .</p>
</blockquote>

<p>After the clone I have :</p>

<pre><code>$ git branch -r
  git-svn
$ git branch
* master
</code></pre>

<p><br/></p>

<p><strong>Recap</strong> : I have <a href=""https://github.com/Utumno/wrye_bash_refactoring"" rel=""nofollow"">cloned the thing</a> excluding what I wanted to exclude - now I want to say to git ""create a git branch for each of those svn branches - a real git branch that calculates the deltas and compresses them and deletes the folder <code>Branches</code> -  and track them - and this (700 mb) tags directory is just tags - what could you do about that (they do <del>not</del> correspond to commits) ?""<br>
I see no <del>evil</del> trunk</p>

<p>My <code>config</code> :</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
    hideDotFiles = dotGitOnly
[svn-remote ""svn""]
    ignore-paths = ^(?:Releases|Projects|Scripts|Games|)/|^Programs/(?:Nif Scanner|Nif Viewer|Raziel23x's Oblivion Toolset|Shader Disasm|Shader Editor)/
    url = svn://svn.code.sf.net/p/oblivionworks/code
    fetch = :refs/remotes/git-svn
[svn]
    authorsfile = authors_with_emails.txt
[gui]
    wmstate = zoomed
    geometry = 787x377+54+59 305 1127
[remote ""github""]
    url = https://github.com/Utumno/wrye_bash_refactoring.git
    fetch = +refs/heads/*:refs/remotes/github/*
[branch ""master""]
    remote = github
    merge = refs/heads/master
</code></pre>
","0","281545",""
"17426182","1007758","2013-07-02 12:53:57","9","1708","<git><svn><git-svn><fetch><rebase>","Git: git svn rebase failed. RA layer request failed","<p>I did a <code>git svn rebase</code> and I got this:</p>

<pre><code>r58087 = a2530aabd7ce119d35f63954e075b1c86067809d (refs/remotes/git-svn)

RA layer request failed: REPORT request failed on '/svn/path/to/repo': REPORT of '//default': Could not read chu
nk delimiter: Secure connection truncated (https://svn.local) at /usr/lib/perl5/site_perl/Git/SVN/Ra.pm line 282
</code></pre>

<p>Everytime I do a <code>git svn rebase</code> again I get </p>

<pre><code>Index mismatch: 4c97d1eea751f79ddf4e58f48f41e89dc8d254bd != 35962f4b5051693558a975b48ff903f061908235
rereading a2530aabd7ce119d35f63954e075b1c86067809d
</code></pre>

<p>I can't update my <code>git-svn</code> repository, anyone know what to do? I also did a <code>git reflog</code> and reverted to the version I was before the first <code>git svn rebase</code> and I get the same thing.</p>

<p>Please help!</p>
","0","1007758",""
"17427162","1198692","2013-07-02 13:40:14","1","1925","<maven><intellij-idea><git-svn>","Using Intellij to import existing git project","<p>I'm currently using svn, and I'm using git-svn to checkout the project. I then tried to import the project into Intellij, and it kinda worked, but all the .iml files were red in color (don't know why, no errors as far as I could see).</p>

<p>I then tried what was suggested in this post -
<a href=""https://stackoverflow.com/questions/15571451/import-an-existing-git-repository-into-intellij-idea"">Import an existing Git repository into IntelliJ IDEA</a></p>

<p>ie, opening the directory as a project and configuring the git root, same problem again.</p>

<p>When I try compiling the project I get manifest errors that just says - -manifest while reading manifest file(invalid header field)</p>

<p>My project is a multi-module maven project. Any ideas would be helpful cuz I'm stumped!</p>
","3","1198692","0"
"17429442","1007758","2013-07-02 15:19:36","18","23447","<git><git-svn><git-merge><git-rebase><git-fetch>","Git: How does git svn fetch work?","<p>How does <code>git svn fetch</code> work? Where is that branch which is fetched so that I can merge or rebase with my master or other branch? Where is the data fetched because <code>git remote</code> doesn't give me anything on my <code>git svn</code> repository?</p>
","0","1007758","0"
"17459861","98247","2013-07-03 23:44:38","5","4527","<git><svn><git-svn>","How can I checkout a specific revision of my svn codebase using git svn","<p>I am trying to checkout a specific revsion of my svn codebase.
Normally, to checkout, I just type<br>
<code>git svn clone svn+ssh://path_to_codebase</code>. I need to checkout an older version of the codebase. How do I do that?</p>
","0","98247","0"
"50746949","3256139","2018-06-07 17:22:47","1","1451","<git><svn><git-svn>","git svn clone specific branches and merge","<p>I am looking to migrate my codebase from svn to git. There are too many branches in my svn repo. I only wish to clone couple of branches and merge them together and push it to git. 
I want to avoid cloning all branches as it takes long time. How do I achieve this?</p>

<p>After it's done, I want to periodically get update from those svn branches, merge them and update the git repo and the svn will be active for certain period of time. It would be waste of time if I have to clone it again. Is there a way to do what I require?</p>
","0","3256139",""
"17479302","276457","2013-07-04 23:40:35","2","909","<git-svn>","Create a svn branch from git when directory structure differs","<p>I created a local git copy of an svn repo with the following commands:</p>

<pre><code>$ git svn init svn://host/path/to/repo/PROJECT/trunk workingcopy
$ cd workingcopy
$ git svn fetch
</code></pre>

<p>Now I'm trying to create an svn branch without success:</p>

<pre><code>$ git svn branch -n mybranch -m ""Branch for my things""
Multiple branch paths defined for Subversion repository.
You must specify where you want to create the branch with the --destination argument
</code></pre>

<p>In <code>.git/config</code> I do not have any entries under <code>[svn-remote ""svn""]</code> as suggested in <a href=""https://stackoverflow.com/a/2980284/276457"">this answer</a>. I tried adding <code>branches = branches/*:refs/*</code> but this tries to create the branch under the trunk:</p>

<pre><code>Copying svn://host/path/to/repo/PROJECT/trunk at r6684 to svn://host/path/to/repo/PROJECT/trunk/branches/mybranch
</code></pre>

<p>What do I need to do to create a branch in the correct location?</p>
","0","276457",""
"34045907","1771055","2015-12-02 15:00:48","0","452","<git><git-svn>","git svn keeps downloading deleted branch","<p>I have a git clone of a svn repository that does not include all of the svn commits. I have created a branch on the main SVN repository. I then did a git svn fetch to get the data of the remote branch. I did this often before. But for some reason git started getting info for this branch from commit 1. I didn't know what to do, so I deleted the branch via SVN. I then deleted the remote branch from git (using <code>git branch -d -r accounts@5075</code>). However, after doing git svn fetch, git keeps downloading the now deleted branch. </p>

<p>Does anyone have any idea what is going on and how I can fix it? </p>

<p>Note: I am on windows and I use Tortoise git :)</p>

<p>Edit [git config file]:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
    hideDotFiles = dotGitOnly
[svn-remote ""svn""]
    url = url/svnroot/
    fetch = firmware/trunk/mainUnit/trunk:refs/remotes/trunk
    branches = firmware/trunk/mainUnit/branches/*:refs/remotes/*
    tags = firmware/trunk/mainUnit/tags/*:refs/remotes/tags/*
[svn]
    rmdir = true
</code></pre>
","6","1771055",""
"17530990","1581090","2013-07-08 15:56:17","1","151","<git><svn><diff><git-svn>","How to create a list of consecutive git diffs between two branches in svn format?","<p>I have a git repository (actually a git-svn repository), I created a new branch and made several commits. on the local branch. Now I would like to get diff between all commits made on the branch. Lets say I have 5 commits between the original state and the current state:</p>

<pre><code>2792959ffd30fc54f56f82fa786b3bd9396e607a
c006fcd294957761dcced3c88760c357af1c3613
05d16d49def746b24f74e1306e16999f13e90027
2d87f52dbe82df507a29a725b0f954c6d7abfc82
66af1018d4f5621a7d021f98dc392e80ca826d35
</code></pre>

<p>Then I want to have a listing of all four (4) indicidual diffs between each commit, in SVN version (i.e. as if you had createed the diffs with svn diff). </p>

<p>To be precise: I want to see</p>

<ol>
<li>The commit message for each commit</li>
<li>The differences made in the various files that has changed</li>
<li>Optionally: git commit hash</li>
</ol>
","4","1581090",""
"17553880","1231331","2013-07-09 16:52:54","1","11563","<git><svn><git-svn><linux-mint>","How to install git-svn on Linux Mint 15 (Olivia)","<p>I am required to interface with SVN at work, but prefer to run Git locally to allow me to have multiple local branches open at any given time. After making the switch from Windows 7 to Linux Mint 15 (Olivia) Cinnamon, I'm finding that git-svn doesn't appear to be available for this release of Linux Mint.</p>

<p>So far, I've tried installing it from <a href=""http://community.linuxmint.com/software/view/git-svn"" rel=""nofollow"">http://community.linuxmint.com/software/view/git-svn</a>, but the install returns an error message:</p>

<pre><code>    Package 'git-svn' is virtual
</code></pre>

<p>I can find no solution for this error.</p>

<p>I've also attempted to install it directly in a terminal window:</p>

<pre><code>    sudo apt-get install git
</code></pre>

<p>While I successfully installed Git, it is not current (1.8.1.2 vs. 1.8.3.2) and this implementation of Git doesn't appear to have a ""git svn"" command, but does have a ""git clone"" command. This ""git clone"" command doesn't appear to have any ability to talk with SVN.</p>

<p>I have tried using the following:</p>

<pre><code>    sudo git clone https://&lt;username&gt;@&lt;domain&gt;/svn/&lt;projectname&gt;/trunk &lt;folder_to_checkout_to&gt;
</code></pre>

<p>After providing the SVN server password, it attempts to clone the SVN repository, but returns with the following error:</p>

<pre><code>   fatal: hhttps://&lt;username&gt;@&lt;domain&gt;/svn/&lt;projectname&gt;/info/refs?service=git-upload-pack not found: did you run git update-server-info on the server?
</code></pre>

<p>I don't know what this means. In searching on Google and StackOverflow, I've found that the SVN path may be bad or not exist, but I've verified the path is valid as I can access the same path by placing it in a browser and signing in. </p>

<p>I thought this error might be caused by the folder_to_checkout_to not existing yet, but when I create the folder and call a ""git init"" and then re-execute the git clone command above from the parent directory, it returns:</p>

<pre><code>    fatal: destination path '&lt;folder_to_checkout_to&gt;' already exists and is not an empty directory
</code></pre>

<p>Using Mysysgit in Windows, the syntax that worked to clone and checkout an SVN repository using Git was as follows:</p>

<pre><code>   git svn clone &lt;path_to_repository&gt; -T trunk &lt;folder_to_checkout_to&gt;/
</code></pre>

<p>With my install of Git on Linux Mint, it doesn't have the command ""git svn"" at all. Any help will be appreciated.</p>

<p>How do I get git-svn installed? </p>
","2","1231331",""
"17555517","142074","2013-07-09 18:24:39","0","456","<git><git-svn>","git svn rebase fails with clean working directory","<p>Attempting to do a <code>git svn rebase</code> -- it complains I have uncommitted changes though nothing is showing in <code>git status</code>.</p>

<pre><code>$ git svn rebase
Cannot rebase with uncommited changes:
# On branch local/dev
nothing to commit, working directory clean

$ git status
# On branch local/dev
nothing to commit, working directory clean
</code></pre>

<p>I've cleared the stash, deleted <code>.git/svn/.caches</code>, tried <code>git reset --hard HEAD</code>, run <code>git clean -xfd</code> (though not in that order). Not sure what I'm missing here or what I should try next; as far as I can tell, this is as clean of a working copy as I can have. (And there are no changes that need to be <code>git svn dcommit</code>ed.)</p>
","0","142074",""
"17693255","2590198","2013-07-17 07:02:02","17","4938","<git><svn><cygwin><git-svn>","git svn dcommit fails because of assertion error ""svn_fspath__is_canonical(child_fspath)"" (cygwin)","<p>I hope anybody can help me. </p>

<p>When I try to push my local git branch to the svn server this will always result into this error:</p>

<pre><code>$ git svn dcommit
Committing to http://.../Dev_Stream/01_workspace ...
    C      path/to/file/AbstractSystemThread.java =&gt; other/path/to/file/Thread/AbstractThread.java
assertion ""svn_fspath__is_canonical(child_fspath)"" failed: file ""/usr/src/subversion/subversion-1.8.0-1/src/subversion-1.8.0/subversion/libsvn_subr/dirent_uri.c"", line 2502, function: svn_fspath__skip_ancestor
</code></pre>

<p>Preconditions:</p>

<ul>
<li>clean local git repository (no staged or unstaged changes)</li>
<li>called git svn rebase before</li>
</ul>

<p>Cygwin installation contains these packages:</p>

<ul>
<li>git, git-svn 1.7.9-1</li>
<li>subversion, subversion-perl 1.8.0-1</li>
</ul>

<p>When searching for this problem in the internet, I found several errors like this where a path could not be canonicalized. But I did not find a solution for exactly this problem.</p>

<p>Has anybody an idea how to solve it? Is any information missing?</p>
","2","2590198","0"
"17750731","78642","2013-07-19 16:09:44","2","1653","<git><git-svn>","Why does 'git' work, but 'git-svn' does not, and how do I fix it?","<p>I am using 64-bit Windows 7 with git 1.8.3.msysgit.0 installed.</p>

<p>The command <code>git</code> works fine, from wherever:</p>

<pre><code>PS C:\dev&gt; git --version
git version 1.8.3.msysgit.0
</code></pre>

<p>However, the command <code>git-svn</code> does not:</p>

<pre><code>PS C:\dev&gt; git-svn
The term 'git-svn' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:8
+ git-svn &lt;&lt;&lt;&lt;
    + CategoryInfo          : ObjectNotFound: (git-svn:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
</code></pre>

<p>The example given above is using PowerShell, but running Git bash gives a similar error:</p>

<pre><code>$ git-svn
sh.exe"": git-svn: command not found
</code></pre>

<p>Git is installed at <code>C:\Program Files (x86)\Git</code></p>

<p>My Windows Path system variable contains <code>C:\Program Files (x86)\Git\cmd;</code></p>

<p>It appears that <code>git-svn</code> lives at <code>C:\Program Files (x86)\Git\libexec\git-core\git-svn</code> with no file extension, which is confusing to me since other files in that directory carry <code>.exe</code> extensions, although those are generally larger files, suggesting that perhaps <code>git-svn</code> is supposed to be an alias of sorts for another command, but Windows does not know that it can be executed.  I'm just guessing there.</p>

<p>Anyway, how do I fix this?</p>
","0","78642",""
"34334187","495776","2015-12-17 12:05:14","0","342","<git><svn><merge><git-svn><svn-reintegrate>","git-svn: Rename branch and use it as new SVN 'trunk' instead of using ""merge --reintegrate""?","<p>I have a Ruby on Rails project that I am working on which uses SVN (1.6.17, Debian) for version control. Locally I am using Git (2.5.4, OS X) with git-svn and I have been working on a branch (called ""ruby22rails42"") for a major update to the project (using a new framework version) and regularly pulling in changes from SVN ""trunk"" to keep up to date with the project. Recently, I have created a mirror branch (""/branches/v8.5-ruby22rails42"") on our online SVN server, pushed my local Git branch there and merged again with trunk for other developers to take a look.</p>

<p>Now I basically want ""/branches/v8.5-ruby22rails42"" to be the new 'trunk' and keep the old SVN trunk as a versioned branch (let's call it ""/branches/v8.4-ruby19rails3""). Unfortunately, 'svn merge --reintegrate' seems to fail with ""mergeinfo not supported"" errors:</p>

<pre><code>/opt/trunk$ svn merge --reintegrate ^/branches/v8.5-ruby22rails42
svn: Abfrage der Zusammenführungsinformationen wird von »file:///.../branches/v8.5-ruby22rails42« nicht unterstützt
</code></pre>

<p>Would a <code>svnadmin upgrade</code> fix this error? I do not want to update the SVN utilities on the server right now because the SVN repo is accessed by a lot of other tools too.</p>

<p>If not:</p>

<p>(How) can I just rename trunk both on the SVN server and my git-svn local repository and use my branch as the new 'trunk' and so avoid the tedious merge process in SVN altogether? How would I tell my local Git repo to keep track of this renaming process?
This may require all clients to discard local checkouts and re-check out the new trunk, but that would be acceptable.</p>

<p>If this is not possible or desirable, how do I avoid the mergeinfo error above using Subversion 1.6.17 and successfully merge my branch into trunk? I can then create a new branch from the last commit before the merge and keep this as my ""v8.4-rails3ruby19"" branch.</p>
","0","495776",""
"19511044","2905898","2013-10-22 06:54:41","9","1755","<git><git-svn>","git svn rebase index file open failed : Invalid argument","<p>I use git-svn on windows for the first time , <code>git svn rebase</code> show error:  </p>

<p><code>fatal: index file open failed: Invalid argument</code>  </p>

<p>Why it happened and how can i fix it ?  </p>

<p>Thanks.</p>
","0","2905898","0"
"158514","446328","2008-10-01 16:31:22","42","15866","<svn><git><git-svn>","Is it possible to make git svn dcommit result in a single svn commit?","<p>According to <a href=""http://git-scm.com/docs/git-svn"" rel=""noreferrer"">the manual</a>, <code>git dcommit</code> “will create a revision in SVN for each commit in git.” But is there a way to avoid multiple Subversion revisions? That is, to have git merge all changes prior to performing the <code>svn commit</code>?</p>
","2","446328","0"
"338164","42927","2008-12-03 18:10:58","15","7557","<git><git-svn>","Fatal error unpacking a tree object during a git svn fetch","<p>When running get svn fetch to pull the latest new branches from the upstream svn repository I got this error:</p>

<pre><code>$ git svn fetch
fatal: failed to unpack tree object 5ecb324e8b8fcb918acb253f33edc6ce49e49e0d
read-tree 5ecb324e8b8fcb918acb253f33edc6ce49e49e0d: command returned error: 128
</code></pre>

<p>Now every attempt at git svn on that local repo results in the same error.  Originally I was running git version 1.5.6.4_0 and after the error I tried updating to 1.6.0.2_2 and the problem still persists.</p>

<p>Is there any way to clean up this corruption?  A fresh git svn clone of the upstream repository is fine, but I'd like to preserve my existing setup.  I've looked through the docs and googled for the problem with no luck.</p>
","0","42927","0"
"371682","46695","2008-12-16 15:45:57","18","4759","<linux><git><version-control><git-svn>","Is there an acceptable Linux targeted GUI client for git-svn?","<p>My employer uses subversion for version-control, and this is unlikely to change. I'm interested in learning more about git, and using git-svn to interface with my employer's subversion repositories. My question is: if I were to begin using git-svn, would I need to do some or all of my version control work from the command-line? Or is there a (linux) GUI client that can perform all the git-svn-related tasks that I will need?</p>

<p>Update: Based on the answers so far, there doesn't appear to be a GUI client for git-svn. However, I would like to call attention to <a href=""http://bugzilla.gnome.org/show_bug.cgi?id=566293"" rel=""noreferrer"">this feature request</a> for the Giggle GUI client as proof that there is some interest in a feature like this. Hopefully a positive answer to this question can be added sometime in the coming months. (In fact, I think that in the near future, the best way to interact with subversion might be to use a GUI client for git!)</p>

<p>Update 2: The recently released 2.1 version of SmartGit does fully support Git/SVN integration. This proves that there is at least one GUI client allowing Git and SVN to be used together. There may be more.</p>
","1","46695","0"
"400822","39933","2008-12-30 16:54:09","4","976","<svn><git><shell><git-svn><visual-c++>","Programmatically tell difference between git-svn and git repos?","<p>I've got some shell stuff set up that dynamically defines aliases depending on what sort of VC repo the CWD contains -- so, for example, 'd' runs 'svn diff' or 'git diff', depending. (Based on <a href=""http://muness.blogspot.com/2008/06/stop-presses-bash-said-to-embrace.html"" rel=""nofollow noreferrer"">this blog post</a>, if anybody is interested...)</p>

<p>I'd like to define some aliases differently depending on whether I'm in a git repo versus a git-svn repo. Is there an easy way to tell the difference between the two? </p>
","0","39933",""
"527037","1256","2009-02-09 03:04:33","124","77980","<svn><git><git-svn>","git-svn not a git command?","<p>While attempting to get an old svn dump of a project under git control, I ran into an interesting problem.  Whenever I run <code>git svn</code>, I get an error saying it isn't a git command, yet there is documentation for it that I can pull up using <code>git help</code>.  Is there something wrong with my install, or am I just missing something here?</p>

<p>Edit:  I should probably also mention that I am running msysGit version 1.6.1.9.g97c34 under Windows XP, and the error I get is:</p>

<pre>$ git svn 
git: 'svn' is not a
git-command. See 'git --help'.

Did you mean one of these?
        fsck
        show</pre>
","0","1256","0"
"624956","4161","2009-03-09 03:52:41","2","722","<git><git-svn>","Can I make git-svn more like git?","<p>Is it possible (or desirable?!) to set up <code>git svn</code> to behave more like <code>git</code>? For example, instead of writing</p>

<pre><code>git svn dcommit
</code></pre>

<p>why can't I just write</p>

<pre><code>git push
</code></pre>

<p>Similarly, instead of  </p>

<pre><code>git svn rebase
</code></pre>

<p>why not just </p>

<pre><code>git pull 
</code></pre>
","0","4161","0"
"629111","26366","2009-03-10 06:28:57","7","2832","<svn><git><github><git-svn>","Is there a way to import svn history into git after the fact?","<p>I already have a svn read only repo checked out (svn co and not git svn). I have made some changes and commits using git which is then pushed up to github. </p>

<p>At this point, git does not have all of the history from svn. I was wondering if there was a way to extract and import this at this point.</p>

<p>The various git-svn guides show how to import a clean repo and transfer the history but not one that I can find that is already in use.</p>
","0","26366","0"
"630723","42882","2009-03-10 15:12:40","1","972","<svn><git><git-svn>","How do I import multiple branch-type directories into git-svn which aren't exclusive children of the same parent?","<p>Sorry for the long title, but I wanted to make clear the distinction between this question and <a href=""https://stackoverflow.com/questions/258590/how-do-i-import-svn-branches-rooted-in-different-directories-into-git-using-git-s"">The one asked by CaptainPicard</a></p>

<p>I have a svn structure like:</p>

<ul>
<li>trunk/</li>
<li>branches/*</li>
<li>tags/*</li>
<li>Release Candidate/*</li>
</ul>

<p>for all intents and purposes Release Candidates are used exactly like branches. So, I can tell git-svn to use Release Candidates as branches, but then I don't get the branches, or I can tell it to use branches, but don't get the Release Candidates.
Can I have both?
I would like something like</p>

<pre><code>   [svn-remote ""svn""]
      url = svn://server/repo
      fetch = trunk:refs/remotes/trunk
      branches = branches/*:refs/remotes/*
      branches = Release Candidate/*:refs/remotes/*
      tags = tags/*:refs/remotes/tags/*
</code></pre>

<p>To work, but it doesn't (as far as I can tell)</p>

<p>Also in the tried-but-it-doesn't-work camp is something like</p>

<pre><code>[svn-remote ""svn""]
  url = svn://svnserve/repo
  fetch = trunk:refs/remotes/trunk
  branches = Release Candidate/*:refs/remotes/RCs/*
  tags = tags/*:refs/remotes/tags/*
[svn-remote ""svnbranches""]
  url = svn://svnserve/repo
  fetch = &lt;What the heck do I put here???&gt;
  branches = branches/*:refs/remotes/*
</code></pre>

<p>But I don't know what to put for the fetch of svnbranches (copying the fetch of svn makes git-svn error, leaving it out or putting in a nonexistant branch makes git error)</p>

<p>How can I have both types of branches pulled into git-svn?</p>

<p>Thanks,</p>
","2","42882","0"
"632724","11722","2009-03-10 23:44:28","14","6085","<git><ubuntu><svn><git-svn>","svn to git conversion","<p>I am trying to convert a SourceForge project from Subversion to Git. According to some Googling, it should be possible to use this command:</p>

<pre><code>git svn clone http://PROJECT.svn.sourceforge.net/ PROJECT.git
</code></pre>

<p>Where <code>PROJECT</code> is the project name at SourceForge, to get a SVN project checked out into a local git repository.</p>

<p>However this just gives the following error message:</p>

<blockquote>
<pre><code>Initialized empty Git repository in /home/user/git/PROJECT.git/.git/
Use of uninitialized value in concatenation (.) or string at /usr/lib/perl5/SVN/Core.pm line 584.
XML data was not well-formed:  at /usr/bin/git-svn line 1385
</code></pre>
</blockquote>

<p>I am using Kubuntu 8.10 and Git is version 1.5.6.3.</p>

<p>I found a <a href=""https://bugzilla.redhat.com/show_bug.cgi?id=464797"" rel=""nofollow noreferrer"">bug</a> reported on Fedora that seem to be similar, but it has not been resolved, so I do not know where the problem is. Am I using the command incorrectly, or is it a bug?</p>
","0","11722","0"
"50966807","1100135","2018-06-21 10:56:01","0","249","<git><git-svn><cvs><git-cvs>","git cvsimport: what does 'remote' refer to?","<p>i copied files from old cvs repo locally. when i do </p>

<pre><code>git cvsimport -C . -d path-to-cvs-folder some-module
</code></pre>

<p>it creates a git repo with branches so then i can push the whole repo into github:</p>

<pre><code>git push --mirror git@github.com:xxx.git
</code></pre>

<p>but the <code>cvsimport</code> creates <code>master</code> branch and also <code>origin</code> branch pointing to the same commit as <code>master</code>. there are no remotes created: <code>git remote -v</code> returns nothing</p>

<p>the question is: what is the purpose of the <code>origin</code> branch? in the manual there is <code>-r</code> switch to let me name that branch. but what for? there is no remote repo at the of migration - just locally copied cvs files. what's the idea behind it?</p>
","3","1100135",""
"746151","31278","2009-04-14 02:38:59","49","27543","<svn><git><git-svn>","Add svn repo to existing git repo?","<p>I know you can track a svn repo with git by using git svn init, however that is for if you want to create a brand new repo.</p>

<p>My situation is that I currently already have an existing git repo and want to track the trunk of a svn repo by making it a remote branch in my current git repo.</p>

<p>Any suggestions?</p>
","2","31278","0"
"747075","33311","2009-04-14 10:58:07","329","150208","<git><svn><git-svn><git-clone><svn-checkout>","How to git-svn clone the last n revisions from a Subversion repository?","<p><strong>Problem</strong></p>

<p>How do you create a shallow copy with git-svn from a Subversion repository, e.g. how do you pull only the last three revisions?</p>

<p>The <code>git clone</code> command can get the last n revisions from a Git repository if you use the option <code>--depth</code>, i.e. you get a shallow copy of the repository. Example:</p>

<pre><code>git clone --depth 3 git://some/repo myshallowcopyrepo
</code></pre>

<p>Is there a similar option for git-svn?</p>

<p><strong>My discoveries so far</strong></p>

<p>So far I've only found the <code>-rN</code> option where <code>N</code> is the revision to pull. Example:</p>

<pre><code>git svn clone -rN svn://some/repo
</code></pre>

<p>According to the documentation there is the possibility to use <code>-r$REVNUMBER:HEAD</code>. I tried the following to get the last 3 revisions which returned an error message.</p>

<pre><code>$ git svn clone --prefix=svn/ -s -rHEAD~3:HEAD http://some/svn/repo .
revision argument: HEAD~3:HEAD not understood by git-svn
</code></pre>

<p>So I replaced <code>HEAD~3</code> with the actual number of the third but last revision 534. That worked, but that requires me to first figure out the revision number of the third but last commit.</p>

<pre><code>$ git svn clone --prefix=svn/ -s -r534:HEAD http://some/svn/repo .
</code></pre>

<p><strong>Documentation</strong></p>

<p><a href=""http://git-scm.com/docs/git-clone"" rel=""noreferrer"">git-clone</a></p>

<p><a href=""http://git-scm.com/docs/git-svn"" rel=""noreferrer"">git-svn</a></p>
","2","33311","0"
"750120","34924","2009-04-15 02:49:33","15","8783","<git-svn>","RA layer request failed while git-svn fetch","<p>I use git svn to sync with the subversion repos:</p>

<pre><code>$ mkdir prj &amp;&amp; cd prj
$ git svn init http://url/to/repos/branches/experimental
$ git svn fetch
</code></pre>

<p>and got the error message:</p>

<pre><code>RA layer request failed: OPTIONS of 'http://url/to/repos/branches/experimental':
Could not read status line: connection was closed by proxy server 
(http://url/to/repos) at /usr/bin/git-svn line 1352
</code></pre>

<p>Why and how can I fix this?</p>
","0","34924","0"
"832427","32124","2009-05-07 00:37:42","14","4428","<svn><git><macos><git-svn><osx-leopard>","Can't find git-svn on Mac OS X Leopard after installing via MacPorts","<p>Okay people, I'm sure someone has had this issue and can help me out.</p>

<p>I'm trying to get git-svn working on OSX Leopard (10.5.6). Using MacPorts I've run the install thus : sudo port install git-core +svn</p>

<p>However, git-svn has not been installed and is not available. No errors came up during the lengthy dependency installation and so I'm at a loss.</p>

<p>Thoughts would be greatly appreciated.</p>
","1","32124","0"
"20010631","862193","2013-11-15 21:09:12","0","67","<git><svn><git-svn>","Configuring git-svn","<p>I'm an svn user with a requirement to mirror my svn code to a git repository. Users of git will not have access to the svn repository, so the solution cannot rely on checking out the code directly from svn as some kind of external repository.</p>

<p>I'm trying to use git-svn such that I can make changes in svn, then update and sync them to git.</p>

<p>I've cloned the git repo into which I want to sync my svn code, then I do something like:</p>

<pre><code>git svn clone svn+ssh://path/to/my/code --trunk my_module --prefix mirror/
</code></pre>

<p>I can see my svn repo being cloned. If I try to switch to the trunk branch like this:</p>

<pre><code>git checkout mirror/trunk
</code></pre>

<p>I'm told that I'm in a <code>detached HEAD state</code> (a suitable error message for how I feel right now.)</p>

<p>So my question is, how do I get my locally checked out svn code to upload into a remote git repository. And secondly, how would I go about doing periodic updates of that code?</p>
","0","862193",""
"98400","9700","2008-09-19 00:41:23","4","660","<git><git-svn>","How do I examine the configuration of a remote git repository?","<p>I've got a git-svn clone of an svn repo, and I want to encourage my colleagues to look at git as an option. The problem is that cloning the repo out of svn takes 3 days, but cloning from my git instance takes 10 minutes.</p>

<p>I've got a script that will allow people to clone my git repo and re-point it at the original SVN, but it requires knowing how I set some of my config values. I'd prefer the script be able to pull those values over the wire.</p>
","0","9700","0"
"1415631","17404","2009-09-12 17:17:32","1","461","<svn><git><git-svn>","How can I use git as an intermediate code review stage before pushing out the remote subversion?","<p>I would like to be able to review code checked into the internal subversion repository before pushing those changes to the remote subversion server. How can I use git to stage the development subversion for review? </p>

<p>I have already fetched the internal subversion into git on my machine. How do I now push the changes into the remote subversion server? </p>

<p>Update: I am looking for a solution that allows me to pull from one subversion repository, review the code and push into a different subversion repository. Is this possible with git-svn?</p>
","2","17404","0"
"3196814","10738","2010-07-07 16:26:45","2","357","<git><git-svn>","Git with two remote repos, one git, one svn","<p>So I'm using git-svn  to keep in sync with our main svn repo. I also have created a remote git repo to push branches for safekeeping off of my machine until the changes are ready to be merged into svn. The problem is when I have a commit that needs to go to both svn and git, I have to git svn dcommit first. dcommit rewrites the SHAs of commits. If I've pushed, git then views the commit, rightly, as two commits as they have differing SHAs but the same content. Sometimes, I forget to svn dcommit first. How can I deal with this if I do? I need to remove the commit from the remote branch without removing it from the local repo. What I've been doing is whacking the git repo since at the moment, I'm the only one using it, but this is clearly not a satisfactory solution.</p>

<p>EDIT: I forgot to mention that the remote git repo is bare.</p>
","0","10738","0"
"22196724","2002029","2014-03-05 11:41:51","3","287","<linux><git><linux-kernel><git-svn><git-branch>","Sending email by using git-send-email","<p>I am supposed to be using git-send-email command to send out patches to the community. I am not sure how to use it properly. I have to send around 5 patches to the linux-wireless mail forum. Do I need to commit the code via git first  and then send out a mail using git-send-email? I am also supposed to send a cover letter along with this. Not sure of what the cover-letter means and how to do it. Can someone help me out?</p>
","2","2002029","0"
"14242025","1556590","2013-01-09 16:41:38","0","95","<git><svn><git-svn>","git-svn multiple git repositories to same svn repository","<p>I have two separate git repositories - git1 and git2. Due to my advisor's recommendation, I need to copy them to the university's svn repository such that all git repo contributors can simultaneously update the university SVN repo along with the git repos.</p>

<p>git-svn looks like a good solution. I followed instructions in the top answer in <a href=""https://stackoverflow.com/questions/661018/pushing-an-existing-git-repository-to-svn"">Pushing an existing git repository to SVN</a> and was able to link one git repository. Is it possible to link both git repos as two folders in the same svn repo? </p>

<p>The folder structure might look like: </p>

<ul>
<li>SVN-repo

<ul>
<li>project1 #links git1 using git-svn

<ul>
<li>trunk</li>
<li>branches</li>
<li>tags</li>
</ul></li>
<li>project2 #links git2 using git-svn

<ul>
<li>trunk</li>
<li>branches</li>
<li>tags</li>
</ul></li>
</ul></li>
</ul>

<p>Can someone point how this can be achieved? Indicating some actual instructions might be helpful. </p>
","0","1556590",""
"19205668","1201321","2013-10-06 05:15:17","1","502","<github><git-svn>","Imported svn repo, not getting pushed to github","<p>I imported an existing svn-repo into my preset git repo using the <code>git svn clone http://svn/repo/here/trunk</code> command. Now I can see all the logs of the svn commits done after firing the <code>git log</code> command.</p>

<p>I want to push these files to github, but <code>git add</code> and <code>git commit</code> do not show any files for the same.</p>

<p>So which command will add and commit these files to the remote git repo?</p>
","0","1201321","0"
"19252167","643605","2013-10-08 15:37:32","4","1322","<git><git-svn>","Adding another directory for branches in git-svn","<p>According to <a href=""https://stackoverflow.com/questions/296975/how-do-i-tell-git-svn-about-a-remote-branch-created-after-i-fetched-the-repo"">this question</a>, you can edit your <code>.gitconfig</code> and tell git-svn where to go about to push your latest code change.</p>

<p>In my case, I have a special case where nor the Tags and nor the Branches can be used. So, if you look at the SVN repo, you see something like this:</p>

<pre>
trunk
branches
tags
xtra
</pre>

<p>I am new to git-svn and up to know I was fine with working directly with the trunk. Things changed and I need to work with xtra folder and create subfolders in there e.g. <code>xtra/Job1234/</code>  and push into it. How can I do such change ?</p>

<p>If I type <code>git svn info</code>, I get:</p>

<pre>
URL: https://some.net/repositories/myproject/base/trunk
</pre>

<p>Clearly, any <code>git svn dcommit</code> pushes things to the trunk. Any leads ?</p>
","0","643605","0"
"19321186","199746","2013-10-11 14:52:51","1","35","<git><svn><git-svn>","Pushing revisions of a single file via git-svn","<p>I am developing a small project in git: it is actually a single XML file plus a couple of scripts for testing purposes. I need to submit that XML file to a third party who keeps a several such XML files (no scripts) in an SVN repo.</p>

<p>Is it possible (and how) to setup git-svn so that I could push new revisions of that single XML file to the SVN repo, but discarding the script files I have in git? I sill want to have the scripts version-controlled in git.</p>
","0","199746",""
"19328428","134547","2013-10-11 22:49:30","1","339","<git><svn><version-control><github><git-svn>","Completely remove an empty git commit from Subversion history","<p>So I migrated a SVN repository to GitHub. I checked out the migrated repository using SVN, and I accidentally made an empty commit (r75 in SVN history). In order to remove the empty commit, I checked out the repository again, this time using git directly, and removed the commit with:</p>

<p><code>git rebase -i HEAD~2</code></p>

<p>After forcing a push to master, GitHub now properly displays only 74 commits, but when I look at the SVN log, I can still see the commit as r75.</p>

<pre>zmurray@zmurray-linux:~/blah$ svn log -r 75
------------------------------------------------------------------------
r75 | zachary.murray | 2013-10-11 15:05:05 -0700 (Fri, 11 Oct 2013) | 2 lines

Blah blah blah, I'm a dumb stupid SVN commit message I can't seem to kill.

------------------------------------------------------------------------</pre>

<p>I just want to expunge this stupid message once and for all. There are no other commits past r75, and I just really want to make r74 the HEAD again. Is there no hope? Help!</p>
","2","134547","0"
"19347256","327702","2013-10-13 16:07:48","0","173","<linux><git><svn><git-svn><git-flow>","How git-svn or git-flow commands are executed without dash in between","<p>When installing git-flow I realized it is just putting files in /usr/local/bin mainly git-flow which is the executable, I'm able to invoke the script git-flow by running <code>git flow</code> (without dash in between). I then realized it is the same with git-svn as well where the commands are run with <code>git svn</code>. </p>

<p>Am I overlooking something basic or does <code>git</code> itself actually delegate the commands somehow?  </p>
","0","327702",""
"19375422","478015","2013-10-15 07:23:19","5","3920","<git><git-svn>","Convert existing SVN working copy to git repository","<p>I have SVN working copy on machine and I want to create git local repository from it. After that I want to be able to push my changes from newly created local git repository to svn repository. My idea is to avoid cloning svn repository via git-svn because it would take some amount of time.</p>
","0","478015",""
"1284247","","2009-08-16 12:58:08","4","2350","<git-svn>","git svn repository changed domain name, how to fix?","<p>I'm using git to track a SVN repository. It's all working fine, but now the domain name of the repository changed and I need to commit my changes back to SVN. Except for git svn rebase &amp; git svn dcommit wont work since the domain name has changed. How can I change the repository to track the new location? I already tried editing .git/config SVN URL, but that won't work.</p>
","1","",""
"2105064","71581","2010-01-20 21:22:27","7","2628","<svn><git><git-svn>","I need to un-fetch some revisions from git-svn","<p>We use svn, and I use git-svn to maintain sanity. At one point, our svn server decided to return a 403 for a certain folder. It happened to everybody, not just me. </p>

<p>Because of this, I'm unable to do a git-svn rebase. I see this error:</p>

<pre><code>Index mismatch: 164adbb93408bed4ff0bdbcbf07bdfb2c49ed0ce != 64443edc6089f7f737e51cf8ea5ff3680c95a7e9
rereading 0f2fa25d15a35ac3fe311e3e0142f1d9e5a3be18
    M   test/system-tests/src/test/java/com/garmin/elevation/ElevationManagerSystemTest.java
    M   test/activity-test/src/test/java/com/garmin/elevation/ElevationManagerIntegrationTest.java
    M   test/activity-test/src/test/java/com/garmin/mb/activity/service/ActivityServiceManagerIntegrationTest.java
    M   system/deployment/src/main/resources/oracle/releases/2.9-SNAPSHOT/110-preference/4-data.dml.sql
    M   pom.xml
service/activity-service-1.2/src/main/java/com/garmin/activity/service/impl/ActivityServiceImpl.java was not found in commit 0f2fa25d15a35ac3fe311e3e0142f1d9e5a3be18 (r8845)
</code></pre>

<p>The file that it's complaining about at the end is in the folder that was returning a 403 when we had the error. On my file system, the service/activity-service folder doesn't exist. I believe it's trying to modify the file (that's what the change in svn looks like), but since the file doesn't exist, it just blows up.</p>

<p>So I think if I'm able to remove past revisions, and then re-fetch them, it might just work. I'm just not sure how to do that. I tried rebasing interactively and then deleting a bunch, but that didn't work. </p>

<p>So, anyone know how to un-fetch already fetched versions?</p>
","0","71581","0"
"41060948","3945245","2016-12-09 12:52:34","0","650","<git><git-svn>","Can not push to the SVN repo using git svn","<p>I'm going to push new changes to the SVN repo, which was not modified after the last <code>git svn dcommit</code>. I have 4 commits on top in my local version since the last push to the repo. And now I'm always getting this error, when trying to do <code>git svn dcommit</code> again:</p>

<pre><code>ERROR from SVN:
Connection reset by peer: Can't read from connection: Connection reset by peer
W: 30d2c8bdab2d4cdd860b6ba1b45db55967232d1c and refs/remotes/git-svn differ, using rebase:
:040000 040000 bcb0b926dcd6608b8f243578e44ff0ab32457e32 2040ef070e43df814825c9a9c7708741a3395c9a M  android
:040000 040000 d453457cac2fd97f7ff92bfa849f73edb19ab41d 5b8dd84f1bcf9d136cd410c238750965b3615787 M  ios
Current branch svn-3 is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
</code></pre>

<p>There are no any messages about conflicts. <code>git svn rebase</code> returns:</p>

<pre><code>Current branch svn-3 is up to date.
</code></pre>

<p>Why does this happen and how can I fix that?</p>
","0","3945245",""
"3843978","222517","2010-10-02 01:29:45","4","192","<git><git-svn>","Is there a way to ignore some (but not all) remote branches using git-svn?","<p>I'm working with an svn repo that has about 10 branches that are each about 4 gigs in size, and it seems that when I run fetch using git-svn it wants to fetch ALL of these branches. I really only personally work with two of them, so how can I just fetch those two branches and ignore the rest?</p>
","0","222517","0"
"8542102","200295","2011-12-17 02:16:08","1","93","<git-svn>","git-svn : rebase fails multiple times then works","<p>We are rolling out git on our clients to interact with a central SVN repository. On most work stations it works fine, but we have one work station where the person has to run git svn rebase 3-4 times before it completes. Each time there is no error, but random files are marks as modified or new. The files seem to be a commit that was pulled down from the central svn repository but not completed. Rerunning git svn rebase again a few times clears this up. The computer is top of the line with plenty of hard drive space and 16 gigs ram. Has anyone else ran into issues like this?</p>
","0","200295",""
"9177495","8220","2012-02-07 13:55:36","7","2462","<git><git-svn>","How to synchronise remote branches with trunk using git-svn","<p>I'm using git-svn to work against svn repository. The layout is standard, and I have created the local repository with:</p>

<pre><code>$ git svn clone -s http://mysvnrepo
(master)$ 
</code></pre>

<p>I need to work on a remote (svn) branch - MyBranch, so I created a local branch to track the remote one:</p>

<pre><code>(master)$ git checkout -b localMyBranch remotes/MyBranch
(localMyBranch)$
</code></pre>

<p>I keep working and committing to the local branch as I go, and occasionally I do dcommit:</p>

<pre><code>(localMyBranch)$ git svn dcommit
</code></pre>

<p>Meanwhile other people are working on the trunk, and from time to time I want to merge back the changes from trunk to my branch to keep them in sync. That's where I get really confused, as I could not find a good information how to perform this. So far I know that I need to do:</p>

<pre><code>(localMyBranch)$ git svn dcommit
(localMyBranch)$ git checkout master
(master)$ git svn rebase
</code></pre>

<p>Now what? I read that this is NOT the right way to go:</p>

<pre><code>(master)$ git checkout localMyBranch
(localMyBranch)$ git rebase master
</code></pre>

<p>As it's going to mess the merge info for svn.</p>

<p>So what is the best way to ""rebase"" my remote svn branch to the remote trunk, preserving the merge info for svn?</p>
","0","8220","0"
"12544318","1542339","2012-09-22 13:47:33","13","7842","<git><svn><version-control><git-svn>","Why git svn cannot clone a bare repo?","<p>This issue is not the same as <a href=""https://stackoverflow.com/questions/10307142/merge-svn-repo-with-git-repo"">this</a> or <a href=""https://stackoverflow.com/questions/2923859/how-can-i-push-to-a-git-svn-repo"">this</a>.</p>

<pre><code>git svn clone -s --bare https://ctags.svn.sourceforge.net/svnroot/ctags
Unknown option: bare
</code></pre>

<p>What is wrong?</p>

<p>Can I use git svn to clone a bare repo?</p>

<p>I have read man git-svn, and cannot find a method to clone a bare repo.</p>

<p><strong>Edit 1</strong></p>

<p><strong>My tags on git svn repo:</strong></p>

<pre><code>git branch -r
  origin/master
  tags/Ctags-5_1
  tags/Ctags-5_1_1
  tags/Ctags-5_2
  tags/Ctags-5_2_1
  tags/Ctags-5_2_2
  tags/Ctags-5_2_3
  tags/Ctags-5_3
  tags/Ctags-5_3_1
  tags/Ctags-5_4
  tags/Ctags-5_5
  tags/Ctags-5_5_1
  tags/Ctags-5_5_2
  tags/Ctags-5_5_3
  tags/Ctags-5_5_4
  tags/Ctags-5_6
  tags/ctags-5.7
  tags/ctags-5.8
  tags/test
  trunk
</code></pre>

<p>Why I cannot push these tags into the git repository?</p>
","0","1542339","0"
"17973074","869790","2013-07-31 14:24:24","2","19450","<linux><git><github><git-svn>","Unable to install git","<p>I ran the following commands on linux mint 12 lisa:</p>

<pre><code>1). sudo rm -rf /var/lib/apt/lists/* -vf
2). sudo apt-get update
3). sudo apt-get install git
</code></pre>

<p>I am getting the following error on running 3. That is, installing git:</p>

<pre><code>Reading package lists... Done
Building dependency tree       
Reading state information... Done
E: Unable to locate package git
</code></pre>

<p>My /etc/apt/sources.list file contains the following content:</p>

<pre><code>deb http://packages.linuxmint.com/ lisa main upstream import
deb http://archive.ubuntu.com/ubuntu/ oneiric main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ oneiric-updates main restricted universe multiverse
deb http://security.ubuntu.com/ubuntu/ oneiric-security main restricted universe multiverse
deb http://archive.canonical.com/ubuntu/ oneiric partner
deb http://packages.medibuntu.org/ oneiric free non-free

# deb http://archive.getdeb.net/ubuntu oneiric-getdeb apps
# deb http://archive.getdeb.net/ubuntu oneiric-getdeb games
</code></pre>

<p>sudo apt-get upgrade shows the following:</p>

<pre><code>Reading package lists... Done
Building dependency tree       
Reading state information... Done
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
</code></pre>
","6","869790","0"
"56773082","553735","2019-06-26 12:40:25","1","109","<git><svn><git-svn>","How to rename upstream trunk in git-svn?","<p>I have a local it repository that was fetched from upstream git-svn repository with git-svn. At some moment, upstream repository's trunk (it has nonstandard layout) was renamed there.</p>

<p>From that moment i can no longer dcommit or fetch new commits. If i try and change (manually) svn-remote.remotename.url, i get error ""Unable to determine upstream SVN information from working tree history"", which kind of makes sense but helps me none.</p>

<p>Is there a way to solve the issue that doe not involve fetching again?</p>

<p>I have tried setting rewriteRoot property (to new url), also without any discernible result.</p>
","0","553735","0"
"56831277","3075384","2019-07-01 07:04:42","1","40","<git><svn><git-svn>","Migrate complex svn into git (keep history, trunk and branches are not on the right places)","<p>I looked for almost all similar questions, but none are match my ""strange"" structure of svn which I need to migrate. </p>

<p>So I need to migrate:</p>

<p>svnrepo: </p>

<pre><code>ver_1.0/    
    | 
         trunk/
            | 
               Module_A
               Module_B
ver_1.5/
    |
         trunk/
            |
               Module_A  (svn copy from ver_1.0)
               Module_B  (svn copy from ver_1.0)
</code></pre>

<p>(Yes, it's strange and wrong)
So instead of branches - modules were just copied, to keep the history. 
If you open a history for ver1.5 Module_A - you will changes from ver1.0 and ver1.5.</p>

<p>Now I need to migrate all this into git but in correct way, so git repo looks like:</p>

<pre><code>gitrepo:
Module_A
Module_B
</code></pre>

<p>with <em>history</em> (I assume that in this case I should recreate branches manually)</p>

<p>So what is the best way to achieve it ?</p>

<p>Should I migrate each version in local git repo and then merge it ? 
Can git svn handle this kind of config ? I tried to set ""--trunk"" - to latest version and version-folders as ""--branches"" but that didnt work.</p>
","2","3075384","0"
"39120546","2966326","2016-08-24 10:18:33","5","4562","<git><svn><git-svn>","Git svn fetch and then commit to remote git","<p>My customer has a  SVN repo and I would like to use git on my side instead. I used git-svn to create a git from my customer's svn and created a gitlab for it. If my customer changes something on his side I would like to fetch the changes and then update my gitlab to keep everything in sync.</p>
<p>Currently I'm using:</p>
<pre><code>git svn fetch 
</code></pre>
<p>And if something was changed, I get a few changes. After receiving the changes I am still not able to push said changes to my git.</p>
<pre><code>git commit -am &quot;Changed something&quot;
</code></pre>
<p>returns:</p>
<blockquote>
<p>Your branch is up-to-date with xxx</p>
<p>nothing to commit, working directory clean</p>
</blockquote>
<p>Clearly something changed but my git won't notice.
What am I missing?</p>
","0","2966326","0"
"3198261","73004","2010-07-07 19:44:28","1","129","<git><branch><git-svn>","How do I import one specific SVN branch to a git repository?","<p>We recently moved from SVN to Git, but there's a single legacy branch that I need to bring in to the Git repository. The SVN and Git repositories are the same logical code (i.e. they're both called foo-lib), but the Git one has newer revisions from after we switched to Git.</p>

<p>Is there a way we can use git-svn to grab the history of a specific branch and graft it into the history of the git tree?</p>
","2","73004",""
"4638901","419735","2011-01-09 11:33:22","5","2580","<git><git-svn>","git-svn cannot create a branch to follow SVN branching","<p>I'm struggling with the following issue. When I continue fetching revisions from SVN with</p>

<pre><code>git svn fetch
</code></pre>

<p>I'm getting the following error:</p>

<pre><code>Found possible branch point: https://somecompany.com/product/trunk
=&gt; https://somecompany.com/product/branches/deep/branches/product-001, 72666 
Found branch parent: (refs/remotes/deep/branches/product-001) b685b7b92813885fdf 6b8e2663daf884bf504b14
Following parent with do_switch 
Successfully followed parent 
error: 'refs/remotes/deep' exists; cannot create 'refs/remotes/deep/branches/product-001'
fatal: Cannot lock the ref 'refs/remotes/deep/branches/product-001'.
update-ref -m r72667 refs/remotes/deep/branches/product-001 df51920e8f0a53f26507 c2679eb6a9dbad91e0d6: command returned error: 128
</code></pre>

<p>This happened because I was fetching revisions using the default filter for SVN branches:</p>

<pre><code>[svn-remote ""svn""]
    url = https://somecompany.com/someproduct
    fetch = trunk:refs/remotes/trunk
    branches = branches/*:refs/remotes/*
    tags = tags/*:refs/remotes/tags/*
</code></pre>

<p>Now, I have the line below added, but it's too late:</p>

<pre><code>branches = branches/deep/branches/*:refs/remotes/deep/branches/*
</code></pre>

<p>I have tried to fix this by using git svn reset to remove all the commits. Actually I can see from the error message that git is trying right thing, but cannot because of the branch remotes/deep being existing.</p>

<p>I have tried to search for 2 possible solutions:
1. Remove that branch (remotes/deep), but as it is tracked by git as a remote, I was not able to find any solution for that.
2. Remove the whole history related to that branch. No success too :(</p>

<p>Does anybody know how to deal with my issue?</p>
","0","419735",""
"10177579","512652","2012-04-16 15:59:34","1","140","<migration><git-svn>","Splitting large svn repository into multiple git repositories and tracking history across ""svn mv""","<p>I've got a large svn repository which I'm splitting and migrating to several git repositories.</p>

<p>So this single svn repository,</p>

<pre><code>software/project_1/
        /project_2/
        /project_X/
</code></pre>

<p>will become these git repositories:</p>

<pre><code>repositories/project_1.git
            /project_2.git
            /project_X.git
</code></pre>

<p>I'm having trouble preserving the history for files that cross multiple git repositories due to an <code>svn mv</code> sometime in their history.</p>

<p>For example, consider the following repository:</p>

<pre><code>software/project_1/&lt;core_stuff&gt;
                  /project_X/
</code></pre>

<p>Development happened under <code>software/project_1/project_X/</code> for a while before it was <code>svn mv</code>'ed into a standalone <code>software/project_X/</code></p>

<p>Now, for all of my <code>project_X</code> history, <code>project_1.git</code> has the pre-<code>svn mv</code> stuff, and <code>project_X.git</code> has the post-<code>svn mv</code> stuff.</p>

<p>Is this situation common? Is it possible to meaningfully track the history of files in such a situation?</p>
","0","512652",""
"18076456","1904009","2013-08-06 09:30:41","1","243","<git-svn>","How do I clone a git repo from a local svn repo","<p>I want to learn to use <code>git-svn</code>. I have an svn local repository on my disk that I've checked out a while ago using something like this:</p>

<pre><code>svn co http://myserver.com/mysvnrepo/trunk/ /mysvnrepo/
ls -a /mysvnrepo/
.     ..     .svn     foo     bar
</code></pre>

<p>This <code>/mysvnrepo/</code> is HUGE, so I want to avoid re-downloading or copying the files at all costs.</p>

<p>I'm wondering if there's a way to <code>git clone</code> this local repo without downloading / copying anything (because it's already there).</p>

<p>I have <a href=""https://stackoverflow.com/questions/5198331/how-can-i-use-git-svn-to-checkout-a-local-svn-repository"">this</a> which seems to be what I'm looking for, but when I do that it doesn't quite give me what I expect.</p>

<pre><code>cd /mysvnrepo/
git svn clone file://mysvnrepo/
ls /mysvnrepo/
.     ..     .git     .svn     foo     bar
git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   .svn/
#   foo/
#   bar/
</code></pre>

<p>I would expect <code>git</code> to detect <code>foo</code> and <code>bar</code> as ""versioned and up-to-date"".</p>

<p>According to the <a href=""http://git-scm.com/docs/git-svn"" rel=""nofollow noreferrer"">docs</a> it seems that I need to use <code>git svn init</code> because <code>git svn clone</code> runs a <code>fetch</code>, which I certainly don't want. So I tried </p>

<pre><code>git svn init --trunk=file:///mysvnrepo/
</code></pre>

<p>...but no luck.</p>

<p>I'm completely new to <code>git</code>, so my confusion is off-the-charts... am I doing something utterly wrong?</p>

<p>Thanks in advance</p>
","0","1904009","0"
"37435121","1603480","2016-05-25 11:00:11","3","4813","<git><svn><git-svn><tortoisegit>","Using TortoiseGit with svn-git to clone specific branches of SVN repository","<p>I have a SVN project with following architecture (empty <code>trunk</code> and <code>tags</code>)</p>

<pre><code>https://svn-repo.com/svn/company
   +--my_project
   |  +--trunk (empty)
   |  +--branches
   |  |  +--my_branch
   |  |  +--my_branch2
   |  |  +--temp_branch1
   |  |  +--temp_branch2
   |  |  +--temp_branch3
   |  +-tags (empty)
</code></pre>

<p>I would like to use TortoiseGit to clone this repository into a git repository with branches <code>my_branch</code> and <code>my_branch2</code> and being able to commit changes back to SVN.</p>

<p>I have been able to clone a single branch by not checking any boxes related to Trunk, Tags, Branch and putting the URL to the branch (e.g. <code>https://svn-repo.com/svn/company/my_project/branches/my_branch</code>) and specifying the first SVN revision of the branch.</p>

<p><a href=""https://i.stack.imgur.com/q09DE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/q09DE.png"" alt=""TortoiseGit clone of SVN single branch""></a></p>

<p>I have tried to put the URL <code>https://svn-repo.com/svn/company/my_project</code> and checking all the boxes but this failed each time.</p>

<p><strong>Question 1</strong>: How to clone the SVN repository with all its branches to Git through TortoiseGit?</p>

<p><strong>Question 2</strong>: What is the way (if it exists) to only keep certain branches in the Git repository (namely, removing all the branches <code>temp_branchN</code>)?</p>

<p>I found a bit of if using git-svn CLI (like this <a href=""https://stackoverflow.com/questions/15385813/what-is-the-best-way-to-clone-branches-after-cloning-just-trunk-in-git-svn"">related topic</a>) but nothing relevant for TortoiseGit.</p>

<p>Thanks a lot</p>
","0","1603480","0"
"73686227","8743463","2022-09-12 08:07:25","1","16","<github><svn><git-svn><git-lfs>","How to remove the large file commit in history from the repo genrated by git svn clone operation?","<p>I created a repo &quot;test-repo&quot; on Github enterprise site and run following commands to push the local repo (c:\mytempdir) generated by git svn clone operation.</p>
<pre><code>cd c:\mytempdir
git remote add origin https://PAT@github.azc.ext.xx.com/liang-ming/test-repo
git push --set-upstream origin master
</code></pre>
<p>It failed with the error about some sdf files are larger than 100M.</p>
<pre><code>remote: error: Please visit https://www.yammer.com/xx.com/#/threads/inGroup?type=in_group&amp;feedId=6603278
remote: error: File HH.sdf is 104.75 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File HHx.sdf is 113.50 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File HH/xxx.sdf is 117.44 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
To https://github.azc.ext.xx.com/liang-ming/test-repo
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'https://PAT@github.azc.ext.xx.com/liang-ming/test-repo'
</code></pre>
<p>I searched the sdf files in c:\mytempdir, did not find any sdf file larger than 100M, so I guess it was the large file in the SVN commit history.</p>
<p>So I tried the BFG, it said it did not find any file larger than 100M.
<a href=""https://rtyley.github.io/bfg-repo-cleaner/"" rel=""nofollow noreferrer"">https://rtyley.github.io/bfg-repo-cleaner/</a></p>
<pre><code>java -jar bfg-1.14.0.jar --strip-blobs-bigger-than 100M C:\mytempdir
</code></pre>
<p>I also tried to use LFS to track &quot;*.sdf&quot; files as mentioned in the following link, but it did not resolve the error.</p>
<p><a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial"" rel=""nofollow noreferrer"">https://github.com/git-lfs/git-lfs/wiki/Tutorial</a></p>
<p>Any solution to solve this problem? Thanks.</p>
","1","8743463",""
"57020992","6555213","2019-07-13 16:35:22","0","470","<git><svn><git-svn>","Copying a git-svn repo from Linux(wsl) to Windows","<p>Currently, I want to import an svn repo onto my local disk. This takes a day and a half on WSL using the standard git-svn command. </p>

<p>However, when I try and copy this to windows (/mnt/c), it copies it, but fails for three files with: can't copy file, file already exists. This I believe is probably due to the case-insensitive nature of windows. </p>

<p>I have tried several times to use git-svn on windows unsuccessfully. It takes much longer and always crashes in strange way, such that re-running git svn fetch no longer works (often complaining about .lock files existing, which sometimes can be fixed by deleting them) or memory leaking. </p>

<p>Is there a way to make git-svn fetch a case-insensitive repo in WSL?</p>
","0","6555213",""
"73891394","18037004","2022-09-29 06:53:35","2","400","<git><svn><gitlab><git-svn>","Using git svn inside a GitLab CI/CD pipeline","<p>I am facing the following situation: A SVN repository should be available in GitLab and a CI/CD pipeline should be created in GitLab CI/CD for it.</p>
<p>The difficulty is to synchronize SVN and Git. The requirement is that the tools used are free. Therefore I have to use &quot;git svn&quot; for this and tools like SubGit are out. Ideally the synchronization takes place within the pipeline. Furthermore the last SVN changes should be recognized in the pipeline. (&quot;change&quot; trigger)</p>
<p>Therefore my idea was the following:</p>
<p>initial: Clone via git svn the SVN repository. This will automatically create a master branch that tracks the svn repository. Then create an empty GitLab project and add it to the git svn repository as remote. Then use it to push the changes to GitLab.</p>
<p>In the pipeline: before the automatic git checkout (pre-clone step) clone the git repository, use &quot;git svn rebase&quot; to get the current SVN changes and then push the new state of the repository back to GitLab. (the .gitlab-ci.yml checked into SVN). Afterwards, the automatic checkout takes place and the rebased changes can be recognized in the &quot;change&quot; trigger.</p>
<p>The initial step works so far. The problem is that the .git folder is not pushed of course. Now when I use &quot;git svn&quot; commands inside the pipeline, it doesn't find the git svn remote. I already tried to trick around by manually copying the .git/config and the .git/svn/ folder of the initial step into the workingcopy of the GitLab runner as a pipeline step. But that just messes up the whole repository.</p>
<p>I explained the problem in such detail because otherwise this might be an XY problem. Do any of you have any ideas on how to approach this?</p>
","0","18037004",""
"74050076","20227476","2022-10-13 03:11:36","0","50","<git><svn><git-svn>","How to use git-svn for svn update？","<p><strong>Problem Background:</strong> I use git-svn for project management because my company uses SVN for its projects, but I want to use git locally because he has easy branch management and many good tools. <strong>Problem:</strong> Some of the code managed by SVN is set with access rights, before, I didn't have access to some of the code, but with the development of the features later, my supervisor opened up the access to the code so that I can access the code, in SVN I can use <code>svn update</code> to update the code down, but for git-svn I use <code>git svn rebase</code> doesn't bring the code down, does anyone know how to fix it, thanks a lot!</p>
","0","20227476",""
"57413686","5012102","2019-08-08 13:23:36","-1","50","<git><svn><tortoisesvn><git-svn><svn2git>","git svn -r <REVSION NUMBER> does not fetches the SVN repo till that revision","<p>I want to migrate a folder in SVN to GIT with full commit history. However, the folder was deleted prior to migration.</p>

<p>In this case, I thought of cloning the revision of the project that still had the folder intact.</p>

<p>For this, I tried  </p>

<pre><code>git svn clone -r &lt;REVISION NUMBER&gt; &lt;SVN URL&gt;
</code></pre>

<p>No branch/commit history is fetched</p>

<p>Then I tried</p>

<pre><code>git svn clone -s -r &lt;REVISION NUMBER&gt; &lt;SVN URL&gt;
</code></pre>

<p>ERROR received: HEAD revision does not exists.</p>
","0","5012102",""
"74784992","7163845","2022-12-13 12:38:38","0","67","<git><svn><diff><git-svn>","Taking (patch) the delta from svn to git","<p>We have a Gerrit repository which was in sync with similar svn repo till some point in time. Now gerrit is behind by 4 commits. I need to take those 4 commits from svn to gerrit.</p>
<p>I tried multiple options I found here.</p>
<p>What I tried:</p>
<p>cd to svn repo and</p>
<pre><code>svn diff -r r844:r944&gt; myfile.patch
</code></pre>
<p>(Is there any other way to get all changes after a particular revision r844? )
copied that patch to a common location and</p>
<pre><code>patch -p0 &lt; myfile.patch
</code></pre>
<p>But what happened was - the changes were applied, but the commit history was not copied. This change was showing as one commit in the git after I did  <em>git add, git commit</em> locally.</p>
<p>Is there a way where we can replicate the commit history as well from svn to gerrit(the delta changes)</p>
","0","7163845",""
"74901543","11656240","2022-12-23 15:49:43","1","32","<git><svn><git-svn>","git svn fetch is separating branch's subfolders into their own remote branches","<p>I'm trying to migrate my SVN repo into a git repo, with a non-standard layout. I have my trunk and branches in the same folder in the SVN repo. My SVN repository's structure is like so:</p>
<pre><code>branches/
  releases/
    1.0/
      back_end/
      front_end/
    2.0/
      back_end/
      front_end/
    ...
    trunk/
      back_end/
      front_end/
</code></pre>
<p>So I'm trying to set the git repo's trunk as the branches/releases/trunk folder, and the branches as each of the versioned folders within the branches/releases/ directory. My commands are:</p>
<pre><code>git svn init -T /branches/releases/trunk --branches=&quot;/branches/releases/{1.0,2.0}&quot; [repo_url]
git svn fetch --authors-file=authors.txt
</code></pre>
<p>This is almost working as intended, and the trunk looks to be correctly migrated. However the remote branches that are created to mimic the svn branches are divided up into each subfolder (front_end, back_end). Looks like this when running <code>git branch -r</code>:</p>
<pre><code>origin/1.0/front_end
origin/1.0/back_end
origin/2.0/front_end
origin/2.0/back_end
origin/trunk
</code></pre>
<p>Does anyone know why the branches might be separated like this?</p>
","0","11656240",""
"74928694","7163845","2022-12-27 11:26:51","0","23","<git><svn><migration><gerrit><git-svn>","Update the new tags into git-svn repo and push to the gerrit","<p>I did a migration from svn to Gerrit using the git-svn way. Everything went well and I have that workspace intact.
Now in svn some commits happened recently and a tag was generated. The same commit was done to gerrit also by the developer but the tag creation is not yet enabled.</p>
<p>Now, how can I take the newly created tags in svn to Gerrit? Can I use the same workspace and do something like <code>git svn fetch</code> or something?</p>
","0","7163845",""
"75216921","21069695","2023-01-24 02:30:23","0","48","<git><svn><git-svn>","How to migrate multiple branches in git-svn?","<p>The structure of the SVN configuration is as follows.</p>
<pre><code>https://hogehoge/svn/
    trunk/
        hoge/
            release01/
            release02/
    tags/
        hoge/
    branches/
        project1/src
        project2/src
</code></pre>
<p>Now, I would like to migrate branch/project1/ and branches/project2/ with git-svn.
I want it to be like this in local repo.</p>
<pre><code>c:Sample/sampleForGit
    branches/
        project1/src
        project2/src
</code></pre>
<p>I have edited config as follows, but it does not work.</p>
<pre><code>[svn-remote &quot;svn&quot;]
    url = https://hogehoge/svn/
    fetch = branches/project1:refs/remotes/git-svn/branches/project1
    fetch = branches/project2:refs/remotes/git-svn/branches/project2
    branches = branches/project1/*:refs/remotes/git-svn/branches/project1/*
    branches = branches/project2/*:refs/remotes/git-svn/branches/project2/*
</code></pre>
<p>The branches of project1 and project2 are not separated.</p>
<pre><code>c:Sample/sampleForGit
    branches/
        src
</code></pre>
<p>How can I import separate branches?</p>
","2","21069695",""
"266395","13989","2008-11-05 19:54:48","198","49814","<git><version-control><git-svn>","git-svn: how do I create a new svn branch via git?","<p>I have a git repository which tracks an svn repository. I cloned it using <code>--stdlayout</code>.</p>

<p>I created a new local branch via <code>git checkout -b foobar</code></p>

<p>Now I want this branch to end up in <code>…/branches/foobar</code> in the svn repository.</p>

<p>How do I go about that?</p>

<p>(snipped lots of investigative text. see question history if you care)</p>
","1","13989","0"
"1916936","","2009-12-16 19:11:07","4","1457","<svn><git><git-svn>","git-svn, how to use a directory in trunk as local trunk","<p>i'm inheriting a codebase that has a lot of directories in trunk that really should live in separate repos. all of my development happens in one specific directory, what should be the only thing in trunk.</p>

<p>e.g: /path/to/repo/trunk/true_trunk</p>

<p>all the tags and branches in the repo refer exclusively to this 'true_trunk' directory. </p>

<p>problem is: i can't get git-svn to act like this sub directory of trunk is really trunk. and as a result my checkouts of trunk populate my working directory with the entire contents of trunk, some dozen or so other unrelated code bases.</p>

<p>is there any way to get git-svn to talk only to this 'true_trunk' directoy?</p>

<p>any attempt at specifying this directory yields the following out: 
Using higher level of URL: svn://path/to/trunk/true_trunk => svn://path/to/repo</p>
","1","",""
"21116153","157971","2014-01-14 14:33:43","0","50","<git><git-svn>","What branch to git svn rebase on?","<p>Does it matter which local GIT branch I'm on when I do <code>git svn rebase</code>? A lot of times I'm on a local-only branch (like <code>trunk_work</code>) that I keep in sync with my local <code>trunk</code> branch, which maps to the upstream SVN branch. I always have to switch to <code>trunk</code> and then do the rebase, but I'm wondering if it works inside <code>trunk_work</code> too? It seems like this rebase isn't your typical rebase because git-svn is smart enough to know which local branches map to SVN branches and updates them all. But I want to make sure. Thanks.</p>
","0","157971",""
"21941714","200985","2014-02-21 17:55:08","1","212","<git><version-control><commit><git-svn><git-log>","git-svn -- Why are other branches' commits mixed in with trunk commits on master?","<p>I'm tracking a svn repository using git. A merge was done on 2014-01-09 (producing commit <code>A</code>) and another on 2014-02-12 (producing commit <code>B</code>). When I <code>git checkout master; git log</code>, I see the commits for the merges, but I also see, for instance, a commit on 2014-02-04 (<code>C</code>) made against a branch (which was merged as part of <code>B</code>).</p>

<p><strong>Why would a commit made against a branch show up when running <code>git log</code> on trunk ?</strong></p>

<p>I discovered this while trying to rewind my master and branches to a particular date in time to try to execute merge <code>B</code> again to see what conflicts exist. I had assumed that I could <code>git checkout master; git reset --hard B^; git merge branch;</code>, but that didn't work, then I saw these extra commits from branches in my trunk log and got confused.</p>

<p>Any help you can offer on the subject will be much appreciated!</p>
","0","200985",""
"3676094","11236","2010-09-09 11:30:57","4","1027","<windows><git><svn><git-svn>","Best tooling/methodology to work with a git client and an SVN repository","<p>I've used SVN for about two years now (mostly via TortoiseSVN and IntelliJ), and experimented with git (mostly via TortoiseGIT ... detect a pattern here?)</p>

<p>Our company is using SVN for the repository, and they're not thinking of switching any time soon. What is the recommended best practices and tooling to use git locally and work with the remote SVN server?</p>

<p>As you probably gathered by now, I prefer a simple shell-extension/IDE GUI to command line tools. Also, I'm working on Windows (see this <a href=""https://stackoverflow.com/questions/350907/git-svn-on-windows-where-to-get-binaries"">related yet outdated question</a>).</p>
","1","11236","0"
"3845558","464557","2010-10-02 11:57:04","15","2715","<svn><git><git-svn>","git svn gatekeeper repository","<p>I have beem using git for quite some time now, mainly git-svn. Now I want to convince my colleagues to switch from svn to git. But unfortunaly the precondition is that the svn repository keeps on living quite some time. So I searched for an solution and came up with the book:</p>

<p>Jon Loeliger's ""Version Control with Git"". I bought it and it is really good but I don't fully understand the guide to set up a git svn gatekeeper repo.</p>

<blockquote>
  <p>In Chapter 16, he describes a
  situation in which there is a
  Subversion repository, and at least a
  couple users that want to be using
  Git.  He proposes a single
  ""gatekeeper"" git repository which is
  the only interface to subversion. 
  After git svn cloneing the subversion
  repo (with --prefix=svn/), all the
  branches are then pushed to a bare
  repository (git push ../svn-bare.git
  'refs/remotes/svn/<em>:refs/heads/svn/</em>',
  and other git users are told to clone
  this repo, which now contains local
  branches of all the svn remotes.</p>
</blockquote>

<p>This part works and I think I fully understand it. But I don't get the next part:</p>

<p>If a developer that clones the bare repository pushes changes back from his repo to the bare repository and then I dcommit this in the bare repo to svn, the commits the user pushed are lost for good reason because of the replaced commits git-svn creates. Or am I wrong? How does this work? </p>

<p>The book says</p>

<blockquote>
  <p>Then, to merge back to subversion, in
  the gatekeeper repo, you do</p>
  
  <p>git checkout svn/trunk (or other
  branch - this is checking out a
  detached head as svn/trunk is a
  remote) 
  git merge --no-ff new-feature
  git svn dcommit</p>
</blockquote>

<p>How can I checkout a branch in a bare repository? I don't think this works</p>

<blockquote>
  <p>This results in a merge commit on a
  detached head, and then the modified
  commit (after the git-svn-id line is
  added) is put on the real svn/trunk
  branch.  </p>
</blockquote>

<p>What is meant by real svn/trunk ?</p>

<blockquote>
  <p>The commit on the detached
  head is ""worse than redundant.  Using
  it for anything else eventually
  results in conflicts.  So, just forget
  about that commit.  If you haven't put
  it on a branch in the first place,
  it's that much easier to forget"" (Jon
  Loeliger).</p>
</blockquote>

<p>I'm a little confused. Has someone a better explanation for creating a git svn gatekeeper repo? I have searched the web and this site but I haven't found anything that seems suitable for me.</p>

<p>I'm so tired of wasting so many time with svn branching and merging, when collaborating with my colleagues.</p>
","4","464557","0"
"7357624","575284","2011-09-09 05:50:15","1","71","<linux><git><git-svn>","How to get the removed branches in git","<p>I merge my all of the branches to a wrong branch and deleted all of the branches.
Is it possible to recover all of these branch and unmerge them.
I also resolved conflict at the time of merging</p>
","0","575284",""
"7362280","731262","2011-09-09 13:23:04","1","118","<git><git-svn>","Specify explicit fetch ref when doing ""git svn init""","<p>When doing <code>git svn init</code>, the fetch ref will always be <code>:refs/remotes/git-svn</code>. This can be changed by hand, but in the hope of automating git as much as possible, it would be great if there was a command-line option that changes this value to something else.</p>

<p>E.g. running this:</p>

<pre><code>git svn init url1 -R r1
</code></pre>

<p>populates <code>.git/config</code> with:</p>

<pre><code>[svn-remote ""r1""]
    url = url1
    fetch = :refs/remotes/git-svn
</code></pre>

<p>Is there an option to force the fetch line to something like:</p>

<pre><code>[svn-remote ""r1]
    url = url1
    fetch = :refs/remotes/branch1
</code></pre>
","0","731262",""
"25583436","820676","2014-08-30 14:28:35","2","1335","<git><svn><git-svn>","How to find the git hash for an svn revision when git mirror of an svn repo is used?","<p>I would like to use git when experimenting with llvm and clang code.
Therefore I already cloned the source files from the git mirror:</p>

<pre><code>% git clone http://llvm.org/git/llvm.git
% cd llvm/tools
% git clone http://llvm.org/git/clang.git
</code></pre>

<p>Now I would like to use 3.4.2 as a base of my work. 
I've found that it is svn Revision 216818 for <a href=""http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_342/final/"" rel=""nofollow"">llvm</a> and for <a href=""http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_342/final/"" rel=""nofollow"">clang</a>. But I am lost how to find the appropriate git hash for that so I could do this:</p>

<pre><code>% git checkout -b myexperiment githash_of_svnrelease_342_final_of_LLVM
% cd tools/clang
% git checkout -b myexperiment githash_of_svnrelease_342_final_of_CLANG
</code></pre>
","0","820676","0"
"7689577","73475","2011-10-07 15:40:51","1","2630","<git><git-svn><rebase><git-rebase>","git svn rebase always rebases master?","<p>I'm trying to create a git repository that has several branches which each track a different svn repository. I want master to be a git-only branch, not one of the svn branches.</p>

<p>Here's my initial setup:</p>

<pre><code>$ mkdir repo
$ cd repo
$ git init
$ touch README
$ git add .
$ git commit -m ""Initial Commit""
$ git svn init -Rsvn1 --prefix svn1/ svn://...
$ git svn fetch svn1
$ git checkout --track -b svn1 svn1/git-svn
</code></pre>

<p>So far, so good: git branch -a shows me a local branch named master (which just contains the README file), a local branch named svn1 (which contains my svn repo clone), and a remotes/svn1/git-svn branch. I can create svn2, svn3, etc by repeating the last three commands.</p>

<p>The problem is getting updates: if I run ""git svn rebase"" while I have svn1 checked out, master gets rebased instead of svn1. This happens even if I use ""git svn rebase svn1"" or ""git svn rebase svn1 svn1"". </p>

<p>Is there a way to make git svn rebase leave my master alone? </p>
","1","73475",""
"44418294","1668622","2017-06-07 16:34:29","1","222","<git><git-svn><git-rewrite-history>","In git or git-svn, how do I modify history to only contain files which exist on my current HEAD?","<p>Five years ago <a href=""https://stackoverflow.com/users/692303/niklas-schnelle"">Niklas</a> asked <a href=""https://stackoverflow.com/questions/10676128/remove-deleted-files-from-git-history"">this quite similar question</a> - I'll give it another try with different wording.</p>

<p>I want to migrate an existing Subversion repository to git and use the chance to get rid of all history that doesn't affect my current <code>trunk</code>/<code>master</code> HEAD before I share it with my colleagues (all other history should stay intact of course).</p>

<p>My idea was to first <code>git svn clone</code> the repository (without the branches intentionally):</p>

<pre><code>git svn clone http://my/old/svn/repo/trunk new-git-repo
</code></pre>

<p>.. and then to remove all files I don't need any more with some magic like this:</p>

<pre><code>for f in $(all_deleted_files) 
do
    git filter-branch --tree-filter 'rm -f ${f}' HEAD
done 
</code></pre>

<p>Of course the big question is now: how do I get <code>all_deleted_files</code>?</p>

<p>I could write a nice Python script and collect all files in all commits and subtract those which still exist on HEAD. But is this the only possible way?</p>

<p>Has someone done this before and wants to impress me with his/her script?</p>

<p>With a different (Subversion specific) approach - might it possible to not clone files which later got deleted anyway in the first place?</p>
","4","1668622",""
"7732157","281566","2011-10-11 20:35:43","1","584","<git><svn><tags><branch><git-svn>","Output from 'git ls-remote' shows tags not found in 'git tag -l'","<p>I am converting a SVN repository to a Git repository following guidance from Pro Git (found here: <a href=""http://progit.org/book/ch8-2.html"" rel=""nofollow"">http://progit.org/book/ch8-2.html</a> ).</p>

<p>After pushing to my newly created remote, I did a clone from said remote. New clone did not have any information about my tags. I then did a 'git push --tags' from the original. However, when doing a 'git pull' in the clone, only a few of the tags come down. </p>

<p>From inside the clone, 'git ls-remote' shows all of my tags (and branches). I removed the hashes for clarity:</p>

<pre><code>HEAD
refs/heads/STABLE-1.0
refs/heads/UNSTABLE-1.0
refs/heads/master
refs/tags/RELEASE-0.4
refs/tags/RELEASE-0.9
refs/tags/RELEASE-1.0
refs/tags/STABLE-1.0
refs/tags/UNSTABLE-1.0
</code></pre>

<p>However, doing a 'git tag -l' only shows:</p>

<pre><code>RELEASE-1.0
UNSTABLE-1.0
</code></pre>

<p>Remote branches seem to be tracking fine. Only artifact I noticed there is the orignal git-svn repo has the local and remote branches still. That should not matter since I will be working in a clone, and once I confirm all data is migrated, the git-svn repo can be decommissioned. </p>

<p>So why do the remote and local tags not match? </p>
","1","281566",""
"25899906","4066","2014-09-17 20:36:51","0","62","<git><svn><git-svn>","git svn ignore bad commit while fetching (pretending it wasn't a merge)","<p>My question is similar to this one: <a href=""https://stackoverflow.com/questions/7430645/git-svn-can-i-ignore-some-svn-commits-while-fetching-into-git"">With &quot;git svn&quot;, Can I Ignore Specific Git Commits While Fetching?</a></p>

<p>I'm using git-svn with a standard svn repo:</p>

<pre><code>trunk
branches
tags
</code></pre>

<p>Then a co-worker accidentally branched the root into a project branch, so it looked like this:</p>

<pre><code>trunk
branches
   badProject
      trunk
      branches
      tags
tags
</code></pre>

<p>If the branch had died, I'd probably be able to use <code>--ignore-paths</code> to ignore it</p>

<p>However, having realized the error, the developer committed changes to the bad project in   <code>/branches/badProjects/trunk</code> and later merged this into <code>/trunk</code></p>

<p>git-svn fetch dies. How can I pretend this bad branch didn't happen?  </p>

<p>Is there a way to convince git-svn that there wasn't a branch and treat the merge into trunk as if it was a normal checkin instead of a merged branch?</p>
","0","4066",""
"7752930","83100","2011-10-13 10:44:44","2","750","<git><git-svn>","Fix history of a remote git-svn branch that is missing its branch point","<p>I'm using <code>git-svn</code> to interact with a remote <code>svn</code> repsitory that follows the traditional layout of trunk, tags, and branches.</p>

<p>There's a branch in <code>svn</code> that <code>git</code> has missed the history of. I know the history to be:</p>

<pre><code>r0--r1--r2---r4---r6 remotes/trunk
         \
           r3---r5-- remotes/BRANCH_NAME
</code></pre>

<p>But git seems to have missed the branch point and thinks the history is:</p>

<pre><code>r0---r1---r2-----r4---r6 remotes/trunk

r0'--r1'--r2'--r3--r5--- remotes/BRANCH_NAME
</code></pre>

<p>Where <code>r0'</code>, <code>r1'</code>, and <code>r2'</code> are copies of <code>r0</code>, <code>r1</code>, and <code>r2</code> that appear in git, but not in svn. In svn there is exactly one <code>r0</code> commit.</p>

<p>The first entry in <code>.git/svn/refs/remotes/BRANCH_NAME/unhandled.log.gz</code> may offer the experts a clue:</p>

<pre><code>r3
  +dir_prop: . svn:mergeinfo /product/trunk/src_py:371-436%2C438-532
</code></pre>

<p>How do I get git to realise that <code>r3</code> was branched from <code>r2</code> and do away with <code>r2'</code>, <code>r1'</code>, and <code>r0'</code>?</p>

<hr>

<p>For extra credit: Is there a general way to rewrite git's view of svn history, that won't get clobbered by <code>git svn fetch</code> et al?</p>
","0","83100",""
"7752361","740018","2011-10-13 09:56:09","0","52","<git><github><git-svn>","GIT newbie: git fetch does not yet pull data to local?","<p>The remote repository has two branches: <strong>master</strong>, <strong>develop</strong>. </p>

<p>Then, I checked my local branch by <code>git branch</code> , I notice I have only <strong>master</strong> branch, so I run command <code>git fetch origin</code>.  </p>

<p>After this, when I run ""<code>git branch</code>"" again, I still see only <strong>master</strong> branch, why, isn't ""<code>git branch</code>"" supposed to list all <strong>local</strong> branches?</p>

<p>Does it mean the <code>git fetch origin</code> does not yet make the <strong>develop</strong> as my local branch? Then what <code>git fetch</code> actually doing?</p>

<p>(But I can see <strong>develop</strong> branch with <code>git branch -r</code>)</p>
","0","740018",""
"44697957","1128110","2017-06-22 11:22:21","1","216","<git><svn><git-svn>","Migrating two svn paths to a new single git repository","<p>I'm trying to plan a migration from SVN to git to be done this weekend, and am struggling on migrating all of our history.</p>

<p>Our code is currently in SVN as <a href=""http://server/svn/repos/projectName/trunk/"" rel=""nofollow noreferrer"">http://server/svn/repos/projectName/trunk/</a></p>

<p>I'm able to get most of what we want doing the following:</p>

<pre><code>git svn init http://server/svn/repos/projectName/trunk/ --no-metadata
git config svn.authorsfile users.txt
git svn fetch
</code></pre>

<p>We are permanently migrating to git and don't have references to any revision numbers yet, hence --no-metadata, also we don't care about migrating branches either. </p>

<p>This works for the most part, however our project was originally in <a href=""http://server/svn/repos/trunk/oldProjectName"" rel=""nofollow noreferrer"">http://server/svn/repos/trunk/oldProjectName</a></p>

<p>The repository contains several other projects and we are only interested in migrating one.
Is there a way to create new git repository that contains the commits from <a href=""http://server/svn/repos/trunk/oldProjectName"" rel=""nofollow noreferrer"">http://server/svn/repos/trunk/oldProjectName</a> followed by <a href=""http://server/svn/repos/projectName/trunk/"" rel=""nofollow noreferrer"">http://server/svn/repos/projectName/trunk/</a> ?</p>

<p>I'm aware this won't work, but it demonstrates what I would like to achieve:</p>

<pre><code>git svn init http://server/svn/repos/trunk/oldProjectName
git config svn.authorsfile users.txt
git svn fetch
git svn init http://server/svn/repos/trunk/oldProjectName
git svn fetch
</code></pre>

<p>I believe the answer lies in manually creating two remotes, one for the old svn path and one for the new svn path. I'm managed to get this far, and think the next step involves something along the lines of rebasing one on the other?</p>

<p>(Although I'm on windows, I'm still able - and comfortable - to use bash if required)</p>
","0","1128110",""
"8330511","8220","2011-11-30 17:48:48","0","98","<branch><git-svn>","git-svn create svn branch from svn branch","<p>With git-svn If I have cloned svn repository with all trunk, branches and tags, how do I create a new svn branch out of a svn branch?</p>

<p>I know I can create a new branch from trunk (master) with git svn branch, but how do I handle this from a branch?</p>

<p>SHould I first create a local tracking branch from the branch, and out of it invoke git svn branch?</p>
","0","8220",""
"8333870","546561","2011-11-30 22:27:34","32","13159","<git><svn><version-control><git-svn>","Is there an advantage to using --no-metadata in git svn clone?","<p>I'm doing a one-way convert from an SVN repository to a Git repository using <code>git svn clone</code>.  Most examples do this with the <code>--no-metadata</code> flag - is there an advantage to using this flag?</p>

<p>I understand that the flag removes the SVN revision numbers.  I can think of reasons why it may be useful to keep these around (such as referring back to specific commits mentioned in bug tracking software).  </p>

<p>What are the arguments <strong>for</strong> using the <code>--no-metadata</code> flag?  Is there any benefit other than a sensation of breaking all ties?</p>
","1","546561","0"
"8376029","200295","2011-12-04 14:37:55","0","204","<git><svn><git-svn>","git svn unignore trunk after init","<p>We have a central svn repository and are starting to have people use git locally to manage work items.</p>

<p>When I first set up my local git repository, I set ignore-path to ignore trunk so I could just work on one branch. My coworker did not ignore trunk. This was fine until we started to use a third bare repository to push/pull branches to each other.</p>

<p>When I pull their git branch, it treated trunk as an add and now its a mess.</p>

<p>When I run git svn I now do want it to sync the trunk. How do I re-add/unignore trunk from my local repository? </p>
","0","200295",""
"8375359","885386","2011-12-04 12:44:02","1","500","<git><svn><git-svn><git-checkout><svn-checkout>","How to download the project using the git-svn-id?","<p>The question might seem too simple or might be irrelevant here. But i need some help immediately.</p>

<p>I got the git-sv-id of the library required in this link
<a href=""http://code.google.com/p/vncj/updates/list"" rel=""nofollow"">http://code.google.com/p/vncj/updates/list</a></p>

<p>I do not know how to download such files. When i tried the svn checkout option in an empty folder it did not work</p>

<p>I need the files of that project. Anyone with some basic info kindly help.</p>
","0","885386",""
"8389693","356895","2011-12-05 17:59:54","3","497","<git><svn><version-control><git-svn><revision>","How to run svn update in a loop to import commits to git?","<p><strong>Current setup</strong><br>
I am running a local <em>git</em> repository in parallel to a <em>svn</em> checkout in the same folder. Whenever something new happens on the <em>svn</em> server I run <code>svn update</code> to download the commits. Then I <code>git add &amp;&amp; git commit</code> the whole set of changes to the <em>git</em> repository.</p>

<p><strong>Task</strong><br>
I want to checkout each commit separately to being able to <code>git add &amp;&amp; git commit</code> the change with the corresponding commit message from <em>svn</em>.</p>

<p><strong>Ideas</strong><br>
I already found out that I can use <code>svnversion</code> to retrieve the revision numbers of the working copy and the server.</p>

<pre><code>// svnversion -h
usage: svnversion [OPTIONS] [WC_PATH [TRAIL_URL]]

  Produce a compact 'version number' for the working copy path
  WC_PATH.  TRAIL_URL is the trailing portion of the URL used to
  determine if WC_PATH itself is switched (detection of switches
  within WC_PATH does not rely on TRAIL_URL).  The version number
  is written to standard output.  For example:

    $ svnversion . /repos/svn/trunk
    4168

  The version number will be a single number if the working
  copy is single revision, unmodified, not switched and with
  an URL that matches the TRAIL_URL argument.  If the working
  copy is unusual the version number will be more complex:

   4123:4168     mixed revision working copy
   4168M         modified working copy
   4123S         switched working copy
   4123P         partial working copy, from a sparse checkout
   4123:4168MS   mixed revision, modified, switched working copy

   ...
</code></pre>

<p><strong>Note</strong><br>
I would be happy to discuss ideas with you to solve the task.<br>
A later setup would also include <em>svn externals</em> which is why I cannot checkout the <em>svn</em> repository via <em>git-svn</em>.</p>
","0","356895",""
"8433372","506114","2011-12-08 15:29:18","1","213","<git><svn><git-svn>","I created a branch off of the wrong branch in git and already merged the old branch into master, how do I remove the commits from the other branch?","<p>When I created a branch, I accidentally created it off of an experimental branch which I do not want any of those changes commited to our SVN repository.  The branch that I created was already merged into master and the old branch discarded.  I just realized what I was about to commit prior to running git svn dcommit.</p>

<p>How can I commit the single commit from the original branch?  I have singled it out in git log.</p>
","0","506114","0"
"26860291","802362","2014-11-11 08:08:17","0","211","<git><github><git-svn>","Fix parentless commits after git svn clone","<p>I  have converted a Subversion repository into a git one with:</p>

<pre><code>git svn clone --no-metadata --stdlayout --prefix svn/ 
</code></pre>

<p>it worked well, but I have some holes in the repository, I think that it means that git svn was not able to find the parents: </p>

<pre><code>A----B---C---D (2.0)      E --- F --- G (2.1)
</code></pre>

<p>Here, the first commit of the 2.1 branch has no parent, but it should have the 2.0 branch as parent. </p>

<p>I tried rebasing, but it failed with conflicts, is there a way of fixing these links ? </p>

<p>I think here that it is not working because E also gets all the commits prior it. The content seems to be correct, but the history is not. </p>
","2","802362",""
"9085596","743464","2012-01-31 19:24:04","6","1270","<git><svn><bash><git-svn>","How to tell if you're in a git-svn repo command line?","<p>I'm trying to modify my bash prompt to print out if I'm in a git-svn repo. I see that git svn repos have a .git/svn folder, so I could check with:</p>

<pre><code># Find the top level git folder
_git_dir=`git rev-parse --show-toplevel 2&gt; /dev/null`
# Find svn folder
_gsvn_check=`cd $_git_dir; ls .git/svn 2&gt; /dev/null`
</code></pre>

<p>But then I noticed that my normal git repo has a .git/svn folder. Is there any way to know for sure that you're in git-svn?</p>
","2","743464","0"
"9103803","164165","2012-02-01 21:44:25","1","224","<git><svn><git-svn>","Using git-svn for an already checked out svn repository","<p>I have checked out an svn repository of an open source project. Now I have made some custom changes and I would like to store these changes in a git repository.</p>

<p>As far as I have understood, this can be accomplished with git-svn. However, as I have already checked out the svn and modified my working copy, is it still possible to start with git-svn here?</p>

<p>All resources about git-svn that I have found start with a clone/checkout of the svn.</p>

<p>Thanks for your help!</p>
","0","164165",""
"9535938","971741","2012-03-02 15:31:51","1","515","<php><git><github><git-svn><phpfog>","how to up my project files to my git hub using phpfog","<p>I am trying to host my php application over phpfog cloud services, this is my first ever try with any GIT client; following the procedure as defined in PHPfog documentations, I am done with creating keys and adding it.</p>

<p>Now I want to know how I can add my project to the cloud, in simple words I have a folder which has all my project file .php, images etc. I want them up over my domain?</p>

<p>How to do that?
Do I have to follow GIThub documentation or phpfogs?</p>

<p>Ive been trying for very long now and confused between all this, kindly help with it.</p>
","0","971741",""
"9537628","13356","2012-03-02 17:23:42","1","128","<git><branch><git-svn>","in git-svn, how do I change the svn branch that a git branch is tracking?","<p>My normal git-svn workflow is to do my work on a local branch, then merge to master and <code>git svn dcommit</code> from there to record my commits onto the svn trunk.</p>

<p>However, in my current local branch (<code>foo</code>) I'm realizing that this work is going to be around for a while before I feel comfortable committing it to the trunk, and other developers might be involved in it before then. I would like to ""back it"" by a svn branch, so that my work is on the server.</p>

<p>I've created a new svn branch (<code>svnFoo</code>) from the current trunk and I basically want to ""move"" <code>foo</code> so that when I <code>svn dcommit</code> from it all of its commits get recorded on <code>svnFoo</code> instead of <code>trunk</code>.</p>

<p>What is the best way to do this?</p>
","0","13356",""
"9542549","79252","2012-03-03 01:26:04","0","205","<git><git-svn><git-rebase>","Why would a git branch shared with two committers have many commits twice? (possible interaction with git-svn)","<p>When I setup my branch I did:</p>

<pre><code>git svn rebase
git checkout -b branch-a
</code></pre>

<p>Then I pushed that branch to the remote git repository and a colleague and I did work on it using <code>git commit</code>, <code>git pull</code> and <code>git push</code>.</p>

<p>Now, I wanted to pull in all the new changes from subversion so I did:</p>

<pre><code>git checkout master
git svn rebase
git checkout branch-a
git rebase master
</code></pre>

<p>At this point I'm confused. What appeared to happen was that git would get to a commit with 1 or more conflicts and force me to resolve them. However, what the conflicts appeared to be was git having HEAD point to the tip of the tree (with the very latest code) and then attempting to apply every change one by one on top <em>as if it were applying them to the original branch point</em>. </p>

<p>It felt like I was re-writing all the code again and most of the resolution was to keep the HEAD chunk and get rid of the commit chunk.</p>

<p>My expectation was that the <code>git rebase master</code> command would start at the commit before the branch, add every commit from master and then add every commit on the branch. This would then yield a tip on the branch almost identical to what it was before the rebase.</p>

<p>So, can anybody explain what I'm failing to understand.
Failing that, can anybody suggest how to find out why git is deciding to do that. What would I be looking for in a <code>git log</code> to see why it was doing that.</p>

<p><strong>Edit: 2012-03-06</strong>
Further research has shown that we seem to have multiple copies of a couple of commits in our branch and a branch structure, from <code>git log --graph</code> which shows multiple branches when we thought there was only one.</p>

<p>A snippet (identifying details removed and commit messages have been replaced with message-<em>n</em>. Message-<em>n</em> refers to identical messages):</p>

<pre><code>| * | commit f5c48df66ed9d733364562d8f125866aa6483c1e
| | | Author: commiter-b
| | | Date:   Mon Feb 27 16:18:05 2012 -0800
| | | 
| | |     Message-4
| | |    
| * | commit e6115229e629c237b08d0b2e149353f33ff66bd1
| | | Author: commiter-a
| | | Date:   Mon Feb 27 15:49:02 2012 -0800
| | | 
| | |     Message-3
| | |    
| * | commit f85981736c59231dc34a7cef4fceab5cffdbdff2
| |/  Author: committer-a
| |   Date:   Mon Feb 27 14:20:56 2012 -0800
| |   
| |       Message-2
| |   
| * commit b09ba82e6290f5905d4c98fdcfbe2220d221e762
|   Author: committer-a
|   Date:   Mon Feb 27 14:04:13 2012 -0800
|   
|       Message-1
|  
* commit 4d2892c239acfab5c9845518fde98ba551f273e6
| Author: committer-a
| Date:   Mon Mar 5 09:13:19 2012 -0800
| 
|     UN-3710 Fixes after merge from svn

---8&lt;----- snip

* commit 8307d1ae8214ebe3eac5bdc5b835c21f89d727bd
| Author: committer-b
| Date:   Mon Feb 27 16:18:05 2012 -0800
| 
|     Message-4
|  
* commit 859acc56de59877cb721914443c63ad97882cb41
| Author: committer-a
| Date:   Mon Feb 27 15:49:02 2012 -0800
| 
|     Message-3
|  
* commit 93e15921d735333194970cefc673a8b953e80838
| Author: committer-a
| Date:   Mon Feb 27 14:20:56 2012 -0800
| 
|     Message-2
|  
* commit 7a863bb44be5c5019a0e0958460324dc3cfb2e6b
  Author: committer-a
  Date:   Mon Feb 27 14:04:13 2012 -0800

      Message-1
</code></pre>

<p>Our git workflow is conservative, I believe. We use <code>git-svn</code> to maintain <code>master</code> which is pushed to a remote git repository. We branch <code>master</code> and two or more committers work on it using <code>git pull origin branch-a</code> and <code>git push origin</code>.</p>

<p>Now that we've noticed this feature of the problem we will be carefully watching in future for what event proximately causes it.</p>
","2","79252",""
"9546071","174284","2012-03-03 12:16:37","21","12916","<eclipse><git><git-svn><git-gui><git-flow>","Is there any IDE/GUI support for git-flow on Windows/Linux?","<ol>
<li>Are there any GUI frontends for Git with <a href=""https://github.com/nvie/gitflow"" rel=""nofollow noreferrer"">git-flow</a> support?</li>
</ol>
<p>Our team uses Eclipse IDE on Windows and Linux.
Managed to gradually <a href=""https://stackoverflow.com/questions/2945842/using-git-svn-or-similar-just-to-help-out-with-an-svn-merge"">infect</a> them with git-svn, now looking for the next steps to harness the power of real branching (rather than git-svn-rebase/dcommit). Git-flow seems more or less what we need now. However some of us still depend on GUI, and it makes everything easier to sell and ramp-up.</p>
<p>So, ideally, I'm looking for an easy way to access it from Eclipse. It does <a href=""https://bugs.eclipse.org/bugs/show_bug.cgi?id=348610"" rel=""nofollow noreferrer"">not seem to support it yet</a>—I'm considering adding them as external tools.
Ideas are welcome—in or outside Eclipse.</p>
<ol start=""2"">
<li>If the answer to the above is no, can that be an issue for GUI addicts?</li>
</ol>
<p>I understand the git-flow tooling is actually very thin, it's easy to actually skip it by doing the 'raw' commands manually with or without GUI (eg. I found it handy to manipulate branches in git).</p>
<p>On one hand, I'd prefer to minimize manual work and reduce room for errors (again considering the team's experience).
OTOH, my guess is that we can start just using only the develop/release/hotfix branches (introducing feature branches later), and in this setting, folks would just have to pull/push normally. They would not see much of git-flow - it would merely act as a helper for the guys set up releases and stuff (mostly me:). Does this make sense?</p>
<p>Note: Actually the git-svn/trunk is still there—for more occasional, non-git users. Am planning to keep that in sync with 'develop' (obviously ignoring the merge history by squash merges). Hope this will go smooth—famous last words?</p>
","4","174284","0"
"9552297","289324","2012-03-04 04:24:20","5","1077","<git><migration><branch><git-svn>","How do I remove fake remote branches I have after migrating from git-svn to git?","<p>I've been using git-svn for a while (everyone else on my team has been using svn directly). We decided that we will all start using git. In order to do this, I used the git repo that is my ""side"" of git-svn like such:</p>

<pre><code>$ git remote add origin git@github.com:mycompany/myproject.git
$ git push -u origin master
</code></pre>

<p>This went fine, but when the process was complete I had retained all these ridiculous branches that git-svn had created when I first started using it, with one little kink; git would no longer even acknowledge that they were branches. Here's what my list looked like:</p>

<pre><code>$ git branch -r
domain_integration
dot-org
dot-org@1977
email-edit-page
origin/account-integration
origin/master
origin/stable
prototype_to_jquery-1.1.0
stable@1976
tags/development-1.1.0.0
tags/pre-2011-02-08
tags/production-1.0
tags/stable-1.0.0
tags/stable-1.0.1
tags/stable-1.1.0
tags/stable-1.1.0.1
trunk-stash
</code></pre>

<p>These were annoying, though I knew where they came from (mostly), but now I can't even delete them. This happens:</p>

<pre><code>$ git branch -d trunk-stash
error: branch 'trunk-stash' not found.
</code></pre>

<p>I was able to fix some of these by going into .git/refs/remotes and just deleting them, but there were only a few there. The only other place i can find them is in .git/info/refs. Which looks something like the following:</p>

<pre><code>...
7788d300f0d4370d65a3ccf3e47d90f7fb16b0b4        refs/remotes/tags/stable-1.0.0
aace34d6745080ce2b6b29e927f5d1b050b99511        refs/remotes/tags/stable-1.0.1
58bd2ac23d5979ff61bd6305df18f8a5da50f888        refs/remotes/tags/stable-1.1.0
644fd55fcdf2569305cdbe0b6fefb9f247625658        refs/remotes/tags/stable-1.1.0.1
bc8e9f9177c9612aceb55624adea1b02e9e8620f        refs/remotes/trunk
69493e14345e6a7a4db324935bccd6393f201da4        refs/remotes/trunk-stash
25b7024f6c1d38c10400b2c2e7b446aae1e84e06        refs/stash
...
</code></pre>

<p>I assume this is just associated the branches with their last commits. Does it make sense to delete the ""fake"" ones? Will this break something? (Will it work?)</p>
","3","289324","0"
"27324652","1684463","2014-12-05 21:03:42","5","18651","<linux><git><bash><github><git-svn>","How do I completely uninstall git from my Linux Machine","<p>I had installed git by downloading the tar ball and then doing the following steps</p>

<pre><code>./configure --prefix=/scratch/custom/git

make 

make install
</code></pre>

<p>But after running these commands, I still see that git is created under <code>/usr/local</code> as below</p>

<pre><code>bash-4.1$ whereis git
git: /usr/bin/git /usr/local/git /usr/share/man/man1/git.1.gz
</code></pre>

<p>I would like to remove and reinstall again how do i do the same?</p>
","3","1684463",""
"9592497","191438","2012-03-06 21:51:38","38","10242","<git><git-svn>","git-svn ""Couldn't find revmap""- what does it mean?","<p>When running <code>git svn clone</code> and often during subsequent <code>git svn fetch</code> operations I get this message for a number of folders:</p>

<pre><code>Couldn't find revmap for &lt;SVN folder URL&gt;
</code></pre>

<p>My repository <em>seems</em> to work fine. What does this message mean? Should I be concerned about it?</p>
","2","191438","0"
"9596412","72721","2012-03-07 05:42:17","3","1098","<git><git-svn>","How do I remove a working copy created via git-new-workdir without hosing the original repo?","<p>I'm using the git-new-workdir script present in contrib section of git's codebase: <a href=""https://github.com/git/git/tree/master/contrib/workdir"" rel=""nofollow"">https://github.com/git/git/tree/master/contrib/workdir</a> to work with multiple branches of the same code base simultaneously. This is on windows, using msysgit and the repo is a git svn repo and not pure git. 
I have no problem creating working copies using this command by saying:</p>

<pre><code>git-new-workdir original-working-copy new-working-copy branch-name-to-checkout
</code></pre>

<p>But when I'm no longer interested in the branch and I want to get rid of the working copy, doing an <code>rm -rfR new-working-copy</code> also hoses the original-working-copy. </p>

<p>In hind sight, that is kinda obvious, given that git-new-workdir uses hard links to share the same .git repo between multiple working copies. </p>

<p>What is a good way to clean up working copies created this way, which I no longer want on my machine?</p>
","0","72721",""
"9611837","28038","2012-03-08 01:44:50","1","404","<git><svn><git-svn>","git-svn produces different hashes on windows and osx","<p>I've got a bit of a messy situation. My company uses svn, but I develop locally using git-svn on my Windows and OSX computers. I'm trying to allow the Windows machine to push and pull from the OSX laptop, and I hit the ""No common commits"" when pulling the OSX local branch. <strong>The basic facts are</strong>:</p>

<ul>
<li>Both Windows and OSX have a git-svn repo tracking SVN trunk</li>
<li>Both repos are up-to-date and show rev 10 as the newest log message</li>
<li><code>git log</code> shows the message as the same, with the same author hash, but the commit hash is different</li>
</ul>

<p>This is what's causing the ""No common commits"" problem, but why are the hashes different? If it's a line-ending problem, or a case-sensitive filename problem, how can I make git find me the differences.</p>

<p>Note: This is a giant (1.8GB) repo, so I likely can't manually fix or compare files.</p>
","4","28038",""
"9620360","313141","2012-03-08 15:39:16","3","873","<git><git-svn><gitignore><svnignore>","Can I commit a file with git, but automatically ignore it when doing a git svn dcommit?","<p>I'm starting now to adopt Git for my personal workflow at an SVN office, so git-svn is a tool I'm going to be relying on heavily.  One issue I've come across that I don't know how to resolve is how to ignore in one direction.</p>

<p>The specific use case for me is that our ant build file references things like svn and svnversion.  Obviously, if I'm using git-svn, I'm not planning on using either of those.  I have replaced them in my local build.xml with git equivalents, which are working just fine.</p>

<p>However, I clearly don't want to commit that change in a git svn dcommit.  I want to keep this change locally, and commit it locally so I don't lose it, but I don't want it to ever get committed back to the main SVN repo, because it will break pretty much the entire company's use of SVN, if I do.  A similar case using SVN alone is presented in <a href=""https://stackoverflow.com/questions/895548/subversion-ignore-modifications-to-a-file-locally-on-one-client-only"">this question</a>.</p>

<p>Is there any solution that would allow me to commit build.xml locally, continue to take build.xml changes from SVN (which has a lot of stuff not related to SVN as well), and never commit it back up using dcommit, without jumping through hoops every time I try to commit?</p>
","0","313141","0"
"27367041","1149924","2014-12-08 21:13:47","0","38","<git-svn>","Track selected remote directories in git-svn","<p>I have a large SVN repository with a pretty messy history. I want to use git locally to track a few selected directories from this repository. Also, I need the local folder structure be different from that of the SVN, so this is not only about the tracking being sparse. My local layout should look like this:</p>

<pre><code>git directories      remote svn path
---------------      ---------------
/                      (not tracked)
+-/Core              https://svn/main/Core/dev
+-/Apps                (not tracked)
  +-/Foo             https://svn/main/Apps/Foo/dev
  +-/Bar             https://svn/main/Apps/Bar/dev
</code></pre>

<p>There is only a handful of directories under <code>Apps</code> that I want to track. Also, later in life of the local git repository, I must be able to start tracking another app(s) from the same remote SVN repository.</p>

<p>Is this doable more or less cleanly? I am thinking about tracking each directory as a separate svn remote, but I am not sure if there is not a simpler solution.</p>
","0","1149924",""
"27384393","2219133","2014-12-09 16:53:07","5","453","<git><git-svn><msysgit>","git-svn folder from existing custom SVN","<p>I would like to use git-svn to work on an existing SVN repository having the following structure:</p>

<pre><code>http://thesvn/project
  branch1
  branch2
  ...
</code></pre>

<p>I can't configure the svn remote to fetch the branches correctly. At the moment I have this config:</p>

<pre><code>[svn-remote ""svn""]
    url = http://thesvn/project
    branches = *:refs/remotes/branches/*
</code></pre>

<p>And when I try to <code>git svn fetch svn</code>, I get the following:</p>

<pre><code>ref: 'refs/remotes/' ends with a trailing slash; this is not permitted by git or Subversion
</code></pre>

<p>Note that I'm working on Windows with msysgit. Any advice?</p>
","1","2219133",""
"27394243","49202","2014-12-10 06:02:03","2","755","<git><svn><git-svn>","git svn command crashes in the middle of cloning svn repo. How to fix that?","<p>I have a svn repo with following structure </p>

<pre><code>ProjectX
 -&gt; trunk
 -&gt; tags
     -&gt; 1.0.x
     -&gt; 1.1.x
 -&gt; branches
     -&gt; 1.1.1
</code></pre>

<p>I am trying to use git svn to convert this repo into a git repo but git svn crashes in the middle with following error:</p>

<pre><code>Use of uninitialized value $resolved in scalar chomp at /Applications/Xcode.app/Contents/Developer/usr/libexec/git-core/git-svn line 1764.
Use of uninitialized value $resolved in scalar chomp at /Applications/Xcode.app/Contents/Developer/usr/libexec/git-core/git-svn line 1764.
error: there are still refs under 'refs/remotes/svn/tags'
fatal: Cannot lock the ref 'refs/remotes/svn/tags'.
update-ref -m r133452 refs/remotes/svn/tags 819b5012690ffe22208d5727ad26673e2670560e: command returned error: 128

command failed:
git svn fetch
</code></pre>

<p>I am not sure what's happening but it crashes right where it starts getting the tags which were done on the 1.1.x branch. How to fix this?</p>
","1","49202",""
"27407154","4346775","2014-12-10 17:24:40","-1","58","<git><svn><github><version-control><git-svn>","Push files from svn to git server","<p>I'm new to stack overflow, so if I do something wrong just tell me. I've been looking for an answer for 3 hours and still nothing have worked for me, so I think it's time to ask. I need to checkout my svn repo and then push it to git server... However I have no idea how to do it. For now I've used git-svn to get the repo:</p>

<pre><code>git svn clone mysecreturl -T trunk -b branches -t tags B
</code></pre>

<p>B is the folder I wanted copied repo to be in. Then I added B to git:</p>

<pre><code>git add B
git commit -m ""Added svn repo""
git push origin master
</code></pre>

<p>However I can't add the files from that directory to git server and they haven't been added recursively... Also when I try:</p>

<pre><code>git add B/*
</code></pre>

<p>I get an error message <strong>fatal: Pathspec 'B/main.c' is in submodule 'B'</strong>.</p>
","0","4346775","0"
"9642551","109696","2012-03-09 23:55:16","3","2354","<git><svn><import><branch><git-svn>","Import separate SVN directories as git branches","<p>I want to convert an existing SVN repository with a nonstandard layout that looks like this:</p>

<pre><code>/ (root)
    /trunk
        regular trunk stuff that I would like to make the ""master"" branch
    /folder1
        files that I would like to make a separate branch ""folder1""
    /folder2
        files that I would like to make a separate branch ""folder2""
    /folder3
        files that I would like to make a separate branch ""folder3""
</code></pre>

<p>... to a git repository, preserving history.</p>

<p>The catch is that <code>folder1</code>, <code>folder2</code>, and <code>folder3</code> are not branched off from some point in <code>trunk</code>; they are a separate set of files, and they are not rooted in some convenient subdirectory (which is what makes this question differ from <a href=""https://stackoverflow.com/questions/258590/how-do-i-import-svn-branches-rooted-in-different-directories-into-git-using-git"">that one</a>).</p>

<p>The desired git branch layout would look like:</p>

<pre><code>master -----+------(trunk r1)------(trunk r2)----...
            |
folder1     \-----(folder1 r1)----(folder1 r2)---...
            |
folder2     \-----(folder2 r1)----(folder2 r2)---...
            |
folder3     \-----(folder3 r1)----(folder3 r2)---...
</code></pre>

<p>(Those revision numbers aren't actual svn revision numbers, just the number of the commit in that particular folder)</p>

<p>I've tried using <code>git svn</code> but it seems to want the branches to be in a single directory, containing one subfolder per branch. The problem is that if I do this, I would have to use <code>/</code> (the root directory) as branches directory, which would make <code>trunk</code> a separate branch (while I want to use it as the <code>master</code> branch).</p>
","0","109696",""
"45675331","674044","2017-08-14 13:11:46","0","47","<git><version-control><git-svn>","How can I use git-svn to work with disparate parts of an svn repository?","<p>I've got the following svn repository structure:</p>

<pre><code>branches
    branch-1
    branch-2
trunk
    system-a
        component-0
        component-1
    system-b*
        component-0
        component-1*
    shared*
    site_scons*
    SConscript*
</code></pre>

<p>I have a team that needs to develop <code>component-1</code> of <code>system-b</code> but they need to use git locally since they don't have direct access to our svn server. <code>git-svn</code> appears to be just what I'm looking for, as it allows me to create their git repo and manage the synchronization via <code>git svn dcommit</code> and <code>git svn rebase</code>.</p>

<p>I can easily replicate the entire svn repo for them with <code>git svn clone https://svn-repo</code>, but this will also give them everything under <code>system-a</code> as well as everything other than <code>component-1</code> under <code>system-b</code>. There's several reasons not to do this, least of which is that it's not sensible to replicate (and track changes on) vast amounts of the repository that don't affect the <code>system-b/component-1</code> team.</p>

<p>The starred directories shown above are the only ones they really need to get updates from and make changes to. It would also be great to make it impossible for them to accidentally make changes to things they don't need to access.</p>

<p>How can I accomplish this with <code>git-svn</code>? I was thinking I could create a few separate git repos, a la:</p>

<pre><code>git svn clone https://svn-repo/trunk/SConscript
git svn clone https://svn-repo/trunk/site-scons
git svn clone https://svn-repo/trunk/system-b/component-1
git svn clone https://svn-repo/trunk/shared
</code></pre>

<p>But this looks and sounds like it will be a headache for the git team since, to my understanding, this creates four actually distinct git repositories. Is there a way to have this 'sparse checkout' structure within a single git repo using <code>git-svn</code>?</p>
","0","674044",""
"9775719","60628","2012-03-19 18:24:48","21","10747","<git><svn><git-svn>","How to see 'git svn dcommit' changes before dcommitting?","<p>With <code>svn-git</code>, how can I see what is about to be committed
with <code>git svn dcommit</code>?</p>

<p>Here are the commands I run:</p>

<pre><code>git svn  clone file:///svn/test1 test1-git
cd test1-git
echo ""first line"" &gt; test1.txt 
git add test1.txt 
git commit 
</code></pre>

<p>Now it's committed to the git repository -- good. But before I run <code>git svn dcommit</code> I'd like to see a diff that contains the changes that would be committed to the SVN repository.</p>
","1","60628","0"
"9805645","132931","2012-03-21 13:31:07","1","2025","<git><svn><git-svn>","Index mismatch error when performing 'git svn fetch'","<p>I've been working with a remote SVN repository using git svn for a while without any problems.  The other day, I typed <code>git svn fetch</code> and got the following index mismatch error.  I tried the solution in <a href=""https://stackoverflow.com/questions/4073956/how-to-resolve-a-git-index-mismatch-problem"">this question</a>, but it didn't work.</p>

<p>Here's the error:</p>

<pre><code>$ git svn fetch
W: Ignoring error from SVN, path probably does not exist: (175002): RA layer request failed: REPORT request failed on '/clients/!svn/bc/50511/foo/devsite': REPORT of '/clients/!svn/bc/50511/foo/devsite': 200 OK (https://svn.example.com)
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
Index mismatch: 2b1371fbceb67b54e6afb805bcc65483e7eb381a != 99c95d43e7a473492b738ccc1f413911c43f195e
rereading c69879814b55f39121372a395fe15896e749b46a
        M       trunk/email-landing/landing-looking.html
        M       trunk/email-landing/landing-nurture.html
        A       trunk/email-landing/images/register-now-screenshot.png
        A       trunk/email-landing/images/dark-checkmark.png
        A       trunk/email-landing/images/logo.jpg
        A       trunk/email-landing/images/logo.png
        M       trunk/email-landing/landing-event.html
RA layer request failed: REPORT request failed on '/clients/!svn/vcc/default': REPORT of '/clients/!svn/vcc/default': 200 OK (https://svn.example.com) at C:\Program Files (x86)\Git/libexec/git-core\git-svn line 5653
</code></pre>

<p><strong>EDIT:</strong> I have tried re-installing cygwin (and thus git-svn).  I have also tried cloning a new repository via <code>git svn clone</code> -- same error.</p>
","0","132931",""
"9807463","96588","2012-03-21 15:16:09","9","6853","<git><git-svn>","How to git svn fetch + rebase in one operation?","<p>I just discovered that even though the <code>rebase</code> section in <code>git help svn</code> says</p>

<blockquote>
  <p>This <strong>fetches</strong> revisions from the SVN parent of the current HEAD and
  rebases the current (uncommitted to SVN) work against it.</p>
</blockquote>

<p>(my emphasis) it doesn't mean that <code>rebase</code> <em>includes</em> a <code>git svn fetch</code>. Naming aside, is there some way to run a <strong>single <code>git svn</code> command to do both</strong>?</p>

<p>The reason I want to do this is that I only <em>write on one branch</em>, so I want to <code>rebase</code> that one and I frequently <em>read other branches</em>, so I want to <code>fetch</code> those.</p>
","3","96588","0"
"45870666","8507706","2017-08-24 20:51:40","0","29","<git><migration><workflow><git-svn>","git-svn migration and git workflow","<p>I have migrated a project from svn to git.
svn had 1)trunk 2)branch1 3)branch2
trunk in svn was a useless and it been out of sync for years with branch1 and branch2.(I am not responsible:))</p>

<p>branch1 is being merged to branch2 on weekly basis.</p>

<p>Project using branch2 want to migrate to GIT.
So I did git-svn clone and have a git repo that is having master=svn trunk, banch1=svn branch1 and branch2= svn branch2.</p>

<p>I will have to keep rebasing branch 1 from svn and merge it to branch2 on a weekly basis.MY understanding is that trunk in svn should be same as master in git for the rebase to work. So I believe the only option left to me is to merge branch 2 to trunk in svn (remember my svn trunk is useless) and rebase it will my git master.Delete branch2 in git (as master is my branch2) , Rebase branch1 from svn on a weekly basis and merge branch1 to master in git.Is there any better way?</p>

<p>If some git gurus are patient enough to read this and respond I will be grateful:)</p>
","0","8507706",""
"45872859","730346","2017-08-25 00:45:19","0","52","<git><git-svn>","How to make branch on 'git svn' with multiple source?","<p>There three source repository which is provided by SVN, I want to send back them my patches by 'git svn'.  To save the clone time here is my clone method</p>

<pre><code>mkdir myprj
cd myprj
git svn clone -r HEAD http://repo/libFoo
git svn clone -r HEAD http://repo/libBar
git svn clone -r HEAD http://repo/src
</code></pre>

<p>When I want to add a new feature, I must enter three directories and do 'git branch'.  Is there any better method to make one global git branch?
The three repositories comes from the same base <a href=""http://repo"" rel=""nofollow noreferrer"">http://repo</a></p>
","0","730346",""
"9831129","971741","2012-03-22 21:52:44","3","19264","<git><heroku><git-svn>","failed to push some refs to git@heroku.com:myapp.git","<p>I am getting this error when I am trying push my files into heroku rep.
Ive tried following solutions but none helped:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/5669209/why-do-i-get-error-failed-to-push-some-refs"">this</a></li>
<li>Tried <code>git pull heroku master</code> (results below)</li>
<li>Tried trying <code>git push heroku -f</code> (results below)</li>
<li>set autocrlf = false</li>
</ol>

<p>Kindly guide me through this.</p>

<p>Thank you</p>

<pre><code>C:\myapp&gt;git init
Reinitialized existing Git repository in C:/myapp/.git/
C:\myapp&gt;git add .
C:\myapp&gt;git add -u

C:\myapp&gt;git commit -m ""ic""
# On branch master
nothing to commit (working directory clean)

C:\ myapp&gt;git push heroku
To git@heroku.com:myapp.git
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'git@heroku.com:myapp.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<hr>

<p>while trying <code>git pull heroku master</code></p>

<pre><code>warning: no common commits
remote: Counting objects: 215, done.
remote: Compressing objects: 100% (147/147), done.
remote: Total 215 (delta 82), reused 132 (delta 62)Receiving objects:  79% (170/

Receiving objects: 100% (215/215), 1.49 MiB | 107 KiB/s, done.
Resolving deltas: 100% (82/82), done.
From heroku.com:myapp
 * branch            master     -&gt; FETCH_HEAD
Auto-merging start.php
CONFLICT (add/add): Merge conflict in start.php
Auto-merging src/appinfo.txt
CONFLICT (add/add): Merge conflict in src/appinfo.txt
Auto-merging result.php
CONFLICT (add/add): Merge conflict in result.php
Auto-merging landhere.php
CONFLICT (add/add): Merge conflict in landhere.php
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<hr>

<p>while trying <code>git push heroku -f</code></p>

<pre><code>F:\myapp&gt;git remote add heroku git@heroku.com:myapp.git
F:\myapp&gt;git push heroku -f

Counting objects: 41, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (40/40), done.
Writing objects: 100% (41/41), 1.36 MiB | 12 KiB/s, done.
Total 41 (delta 0), reused 0 (delta 0)

-----&gt; Heroku receiving push
 !     Heroku push rejected, no Cedar-supported app detected

To git@heroku.com:myapp.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'git@heroku.com:myapp.git'
</code></pre>
","5","971741","0"
"65386846","14843079","2020-12-21 02:26:27","1","45","<git-svn>","I try 'git svn clone http://host/svn/projectpath/ --trunk=trunk --branches=branches', but nothing download into my folder","<p>I try <code>git svn clone http://host/svn/projectpath/ --trunk=trunk --branches=branches</code>, but nothing download into my folder. <code>git svn clone http://host/svn/projectpath/trunk</code> works , but it can't manage branches.</p>
","4","14843079",""
"10660081","147535","2012-05-18 21:40:39","7","2573","<git><git-svn>","Retaining svn copy history when converting to git","<p>I'm trying to convert an SVN repo over to multiple git repos. So far I have been using <code>git svn clone svn_repo_project_path</code> for each project in SVN. I have noticed that git does not seem to follow svn copy operations so the resulting history is much briefer than I expect. Suppose my SVN repo looked like this:</p>

<p><em>root</em></p>

<ul>
<li>a</li>
<li>b</li>
<li>c</li>
<li>parent-proj

<ul>
<li>b</li>
<li>c</li>
</ul></li>
</ul>

<p>Projects <code>b</code> and <code>c</code> were recently copied under <code>parent-proj</code> as part of a restructuring effort with the intention of eventually deleting them from their old locations under root. When I do <code>git svn clone http://svnhost/parent-proj</code> the resulting git repo is missing all of the history that originated from <code>/b</code> and <code>/c</code> before the move.</p>

<p>Is this a limitation of git-svn or is there some way to get this history to show up in my repo? From my limited research it seems that using the <code>filter-branch</code> command as described in <a href=""https://stackoverflow.com/questions/6514611/getting-complete-history-of-an-svn-repo-thats-been-renamed-using-git-svn"">Getting complete history of an SVN repo that&#39;s been renamed using git-svn</a> may work although in my case there are multiple parents which probably complicates things. Could cloning the entire repo first and then splitting out new repos from it (using filter-branch?) be a better approach?</p>
","8","147535","0"
"10673627","447594","2012-05-20 13:01:10","1","861","<git><git-svn>","Clone a git repository into subdirectory of a subversion repository","<p>I have an existing SVN repository, which has a ""common"" directory containing modules shared by different projects.
The layout is like this:</p>

<pre><code>http://example.com/svn/trunk/common/module_1
http://example.com/svn/trunk/common/module_2
...
http://example.com/svn/trunk/common/module_X
</code></pre>

<p>For various reasons, I'm managing some other projects with git.
I need to use <strong>module_X</strong> in both SVN and git projects, so I'm planning to use git-svn.
However, the following problem occurs:</p>

<pre><code>user@host:/repos$ git svn clone http://example.com/svn/trunk/common/module_X destination
</code></pre>

<p>This command will create a new git repository in <strong>/repos/destination</strong> and fetches <strong>module_X</strong> content into it.
What I need to accomplish is to put <strong>module_X</strong> in in <strong>/repos/destination/module_X</strong>, not to fetch it's content directly into <strong>/repos/destination/</strong>.</p>

<p>What seemed an option in the beginning was to use</p>

<pre><code>user@host:/repos$ git svn clone =--ignore-paths='^((?!module_X).*)$' http://example.com/svn/trunk/common/ destination
</code></pre>

<p>which will make a repository in <strong>/repos/destination</strong>, and a subdirectory <strong>/repos/destination/module_X</strong>.
But the problem is that my SVN repository has a rather large revision history and opreations on the whole <strong>common/</strong> path are rather slow.</p>

<p>Does anyone have idea how to accomplish this?</p>
","0","447594",""
"10676982","1027169","2012-05-20 20:35:23","1","1389","<git><git-svn>","Adding SVN author file to git repo after a conversion and commit with git-svn","<p>I recently switched over to using git and followed <a href=""http://help.github.com/import-from-subversion/%20%22these%20instructions"" rel=""nofollow"">these instructions</a> to convert my SVN repository. However, I failed to follow the instructions to make the authors file, and I have already committed my converted repository and have been working on it, adding further commits.</p>

<p>My old SVN repo is now outdated, but I would like to do get the author names to match up now, I already created the authors file. How can I do so without messing up my most recent commit history? </p>
","0","1027169",""
"10681937","67505","2012-05-21 08:38:22","4","2957","<git><git-svn>","git-svn with git extensions stuck on Authentication realm","<p>I'm trying to checkout svn repository through git, in git extensions app, on the input screen I specify an http url for the svn repo, and an authors file that map my svn user to the git user.
I get stuck on ""Authentication realm:  Subversion Repository""</p>

<p>What did I miss?</p>
","0","67505","0"
"10687382","243248","2012-05-21 14:40:09","3","1485","<git><svn><git-svn><svn-externals><svnignore>","Why is git svn show-ignore / show-externals so slow?","<p>I'm in the process of writing a general-purpose svn <code>-&gt;</code> git migration script, which allows for a lot more than the standard <code>git svn clone</code>, and during one stage of my script I'm checking the output of <code>git svn show-externals</code> and <code>git svn show-ignore</code> for every branch in the migrating repository, and taking various steps depending on the output of those commands.</p>

<p>My problem now is that while the rest of my script follows through pretty fast, these two commands in particular seem to be taking up the vast majority of my running time. In some cases, <code>git svn show-externals</code> is taking upwards of 10 minutes to run (on a repo containing around 5000 files). When running on a repository of this size with 10 or more branches, you can imagine this adding up considerably. </p>

<p>Why does this operation take so long to execute? Is there anything I can do to speed up it's execution?</p>
","0","243248","0"
"10690825","514553","2012-05-21 18:46:17","1","628","<git><svn><layout><import><git-svn>","Importing non standard layout svn into git","<p>I have a local svn repo on my hard-drive which has directory structure as follows :</p>

<pre><code>[root]
Project1/
Project2/
Project3/
Project4/
</code></pre>

<p>As you noticed this not at all a standard SVN layout. </p>

<p>Now I want to <strong>create a new git repo</strong> importing all these projects. I won't mind directory strucutre changes unless all of these projects are in single folder.</p>

<p>I have TortoiseSVN and TortoiseGit installed.</p>

<p>I have tried following but I am not able to figure out the inner workings of these or I am just way too new for this.</p>

<ul>
<li><a href=""http://www.gitshah.com/2010/11/how-to-use-git-with-non-standard-svn.html"" rel=""nofollow noreferrer"">http://www.gitshah.com/2010/11/how-to-use-git-with-non-standard-svn.html</a></li>
<li><a href=""https://stackoverflow.com/questions/3910237/importing-a-subversion-repository-with-a-non-standard-layout-into-git"">Importing a Subversion repository with a non-standard layout into Git</a></li>
<li><a href=""https://stackoverflow.com/questions/3681080/how-do-i-access-svn-branches-using-git-svn-with-a-non-standard-svn-repo-layout"">How do I access svn branches using git-svn with a non-standard svn repo layout?</a></li>
<li><a href=""https://stackoverflow.com/questions/5394335/convert-non-standard-svn-to-git"">Convert non standard svn to git</a></li>
<li><a href=""https://stackoverflow.com/questions/572893/cloning-a-non-standard-svn-repository-with-git-svn"">Cloning a Non-Standard Svn Repository with Git-Svn</a></li>
</ul>

<p>Please help me out here.</p>

<p>Thanks,</p>
","0","514553","0"
"11061472","18091","2012-06-16 06:54:00","1","249","<git><git-svn>","How to keep local branch history with an atomic git-svn dcommit operation?","<p>I do my development of various features in git branches.  When I want to check my code into SVN via git-svn, I do the following:</p>

<pre><code>git co feature_branch
git svn rebase
git co master
git svn rebase
git merge --no-ff feature_branch
git commit --amend
git svn dcommit
</code></pre>

<p>This works reasonably well, unless another developer commits to SVN any time during this process, in which case either:</p>

<ul>
<li>If a SVN commit is made between the time I rebase feature_branch and master, I get a log that looks like the following:</li>
</ul>

<p><pre><code>*   4e6992a BUG-003 My SVN commit (containing cdb40ba and 3b18ea4)
|\
| * cdb40ba local commit 1
| * 3b18ea4 local commit 2
* | cf8a028 BUG-002 Another developer's SVN commit
|/
* 940c613 BUG-001 Another developer's SVN commit</pre></code></p>

<ul>
<li>If a SVN commit is made between the time I rebase master and <code>svn dcommit</code>, the latter fails due to merge issues (in which case I do a hard reset and start over)</li>
</ul>

<p>How can I accomplish this in a single atomic operation?</p>
","2","18091","0"
"11081407","471149","2012-06-18 10:57:25","1","197","<git><svn><git-svn>","git svn preserve deleted branches","<p>I have noticed that deleted branches in svn is not preserved in git. I know that branches in git and svn is rather different in the way they are processed. However that seems to be dangerous that svn to git cloning looses some information.</p>

<p>Is it possible to preserve branches from svn in git that do not exists in svn HEAD revision?</p>
","0","471149",""
"11103733","984781","2012-06-19 14:58:29","2","1599","<git><svn><tortoisesvn><git-svn>","Using svn2git to convert a local Tortoise SVN repo","<p>I'm trying to convert a Tortoise SVN repo which lives on a partition which is shared by my Windows/ Ubuntu dual boot machine to a git repo.  I've created a new directory for the git repo, and tried <code>svn2git svn://media/mpoint/School/OLD_SVN_DIR</code> on the Ubuntu machine with no luck.  </p>

<p>I've seen lots of examples where the SVN repo is server based, but I haven't seen any local examples.  IE: <code>svn2git svn://localhost/name-of-repo</code>.  If it helps, on the Windows side (where the SVN repo was made) the address was <code>https:/John-T60/svn/OLD_SVN_DIR/</code>.  I've tried this using the command <code>svn2git https://John-T60/svn/OLD_SVN_DIR</code> with no luck.</p>

<p>My SVN repo isn't very complicated, maybe 50-100 commits and just the master branch.  Any examples?</p>
","3","984781",""
"11106229","98050","2012-06-19 17:31:17","11","2892","<git><svn><merge><git-svn><mergeinfo>","git-svn workflow for merging using svn.pushmergeinfo","<p>What is the correct workflow for merging svn tracked branches using git-svn. I've read a little about the git-svn svn.pushmergeinfo config key, and the caveats are:</p>

<p>From <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-svn.html"" rel=""noreferrer"">http://www.kernel.org/pub/software/scm/git/docs/git-svn.html</a>:</p>

<blockquote>
  <p>config key: svn.pushmergeinfo </p>
  
  <p>This option will cause git-svn to
  attempt to automatically populate the svn:mergeinfo property in the
  SVN repository when possible. Currently, this can only be done when
  dcommitting non-fast-forward merges where all parents but the first
  have already been pushed into SVN.</p>
</blockquote>

<p>So my normal workflow is:</p>

<p>Assuming I have an SVN branch ^/branches/feature_branch</p>

<pre><code># Ensure git-svn is configured to populate svn:mergeinfo
git config --global svn.pushmergeinfo true   

# Update my local svn remotes state
git svn fetch

# Track a local branch against a remote SVN backed ^/branches/feature_branch 
git checkout -b local_feature_branch remotes/feature_branch

# Modify files and commit to local git repo
git commit -a -m ""changes""
# Push changes to SVN branch ^/branches/feature_branch
git svn dcommit
</code></pre>

<p>Then to merge up ^/trunk into my local_feature_branch I assume I do something like?</p>

<pre><code># Sync to the latest SVN
git svn fetch
# Rebase ""master"" which is tracking the remote SVN ^/trunk
git checkout master
git svn rebase

# Checkout the local_feature_branch
git checkout local_feature_branch

# Merge ""master"" into ""local_feature"" which is tracking ^/trunk
git merge --squash master
git commit -m ""merge master which is tracking SVN ^/trunk""

# Dry run the dcommit to SVN which should include svn:mergeinfo property changes
git svn dcommit --dry-run

# Commit merge to trunk
git svn dcommit 
</code></pre>
","1","98050","0"
"11115829","15108","2012-06-20 08:43:02","15","2940","<git><git-svn><gitignore>","How to permanently prevent specific part of a file from being committed in git?","<p>I have cloned a remote SVN repository with git-svn. I have modified a pom.xml file in this cloned repo in a way that the code compiles. This setup is exclusive for me. Thus I don't want to push the changes back on the remote repo.</p>

<p>Is there a way to prevent this (partial) change of a file from being committed into the repo? I'm aware of the fact, that I could use a personal branch, but this would mean certain merging overhead. Are there other ways?</p>

<p>I've looked into this <a href=""https://stackoverflow.com/questions/655243/ignore-modified-but-not-committed-files-in-git"">question</a> and this <a href=""https://stackoverflow.com/questions/10220063/git-how-to-prevent-committing-files-that-were-modified-just-for-debugging-purpo"">one</a>, but they are for rather temporal changes.</p>

<p>Update: I'm also aware of the .gitignore possibilities, but this would mean to exclude the file completely.</p>
","3","15108","0"
"29041204","277826","2015-03-13 20:17:45","0","377","<git><git-svn>","git svn dcommit committing wrong file?","<p>Ok, I have a bit of a convoluted setup, where I use git version 1.7.9.5,  and have a git repository, which on the git side is a clone of a bare repo; and on the svn side, should be a clone of a remote SVN repository. On the other hand, there are no branches, and everything is done in master. </p>

<p>The remote repository was offline for a while; it just came back, and I seemingly managed to upload all outstanding commits via <code>git svn dcommit</code>. </p>

<p>The problem is now, I tried making a new change/commit after this; and seemingly <code>dcommit</code> wants to upload the wrong file - and fails with 'Transaction out of date'; I saw <a href=""https://stackoverflow.com/questions/2922059/how-to-recover-from-an-unwanted-rename-using-git-svn-transaction-is-out-of-dat"">How to recover from an unwanted rename using git-svn: &quot;Transaction is out of date&quot;</a>, but that doesn't seem to answer this.</p>

<p>The setup is somewhat like this:</p>

<pre><code>$ git config -l
svn-remote.svn.url=svn+ssh://user@myserver/remotepath/to/repo_svn
svn-remote.svn.fetch=:refs/remotes/git-svn
..
remote.origingit.url=file:///local/path/to/repo_bare.git
remote.origingit.fetch=+refs/heads/*:refs/remotes/origingit/*
</code></pre>

<p>Then I pull from the local bare repo git:</p>

<pre><code>$ git svn fetch
user@myserver's password: 
$ git pull --rebase origingit master
From file:///local/path/to/repo_bare
 * branch            master     -&gt; FETCH_HEAD
Current branch master is up to date.

$ git status -uno
# On branch master
nothing to commit (use -u to show untracked files)
</code></pre>

<p>I check to see if there is a difference from the SVN version:</p>

<pre><code># https://stackoverflow.com/questions/2426654/git-svn-status-showing-changes-that-are-not-committed-to-svn

$ git diff git-svn HEAD
diff --git a/folder/file.tex b/folder/file.tex
index 7201cc7..3df14bc 100644
--- a/folder/file.tex
+++ b/folder/file.tex
@@ -299,7 +299,7 @@ Test


-%  test
+% test
 % still testing

$ git diff --name-status remotes/git-svn
M       folder/file.tex
</code></pre>

<p>... and there is - and it is the right change, in the file <code>folder/file.tex</code>; so I'm trying to push/upload that to svn using <code>dcommit</code>:</p>

<pre><code>$ git svn dcommit --verbose
Committing to svn+ssh://user@myserver/remotepath/to/repo_svn ...
user@myserver's password: 
    M   notes.txt
Transaction is out of date: File '/notes.txt' is out of date at /usr/lib/git-core/git-svn line 922
</code></pre>

<p>Now, the file I expected to be uploaded is <code>./folder/file.tex</code>; yet git svn dcommit tries to upload <code>./notes.txt</code> - which indeed, does exist, but there haven't been changes to it in this commit?!</p>

<p>Interestingly, if I do here:</p>

<pre><code>$ git svn rebase 
user@myserver's password: 
First, rewinding head to replay your work on top of it...
$ git diff --name-status remotes/git-svn
$ git svn dcommit 
Committing to svn+ssh://user@myserver/remotepath/to/repo_svn ...
$ 
</code></pre>

<p>... that is if I do <code>git svn rebase</code> instead of <code>git svn fetch</code> first, then there are no differences recognized between the git side and the svn side, and thus I can get nothing <code>dcommit</code>ed (and so I don't even get a password prompt). EDIT: note that if I do <code>git pull --rebase origingit master</code> after the <code>git svn rebase</code>, the same as before happens (i.e. <code>git diff --name-status</code> sees the right change, but <code>git svn dcommit</code> fails with ""Transaction is out of date:"")</p>

<p>So my question is - why does <code>git svn dcommit</code> insist on uploading this wrong file (in case <code>git svn fetch</code> is ran first) - instead of the right file, which is otherwise correctly reported by <code>git diff --name-status</code> ?? How can I inspect that? </p>

<p>And how can I force <code>git svn</code> to correctly synchronize the local git changes to the remote SVN?</p>
","0","277826",""
"29050377","277826","2015-03-14 15:04:45","1","297","<git><svn><git-svn>","Unexpected merge error in a git svn system?","<p>I have a somewhat convoluted setup (as in <a href=""https://stackoverflow.com/questions/29041204/git-svn-dcommit-committing-wrong-file"">git svn dcommit committing wrong file?</a>) that looks something like this (produced in Dia, <a href=""https://gist.githubusercontent.com/anonymous/3a81678c99f14d557a4e/raw/testrepo.dia"" rel=""nofollow noreferrer"">testrepo.dia</a>, posted in <a href=""https://gist.github.com/anonymous/3a81678c99f14d557a4e"" rel=""nofollow noreferrer"">this gist</a>) - and is simulated with the script below, <code>testrepo.sh</code>:</p>

<p><img src=""https://i.stack.imgur.com/xgMlE.png"" alt=""/tmp/testrepo.png""></p>

<p>Basically, I've had an SVN repository on a web server (<code>myrepo_svn_WS</code>), which at first I worked with through an SVN working copy on my local PC (<code>myrepo_svnco</code>). After a while, I stopped with that, and I moved to <code>git-svn</code>; but instead of using it directly from my local PC - I had set up a <code>myrepo_gitsvn</code> on my local server; from it a bare git repo is made on the local server, <code>myrepo_git_LS.git</code>, which is added as a remote origin of the <code>myrepo_gitsvn</code>. The idea is then that I can work from local PCs in respect to <code>myrepo_git_LS.git</code>, and keep the local network work in sync - even if the svn web server goes temporarily offline.</p>

<p>The below script, <a href=""https://gist.githubusercontent.com/anonymous/3a81678c99f14d557a4e/raw/testrepo.sh"" rel=""nofollow noreferrer""><code>testrepo.sh</code></a>, simulates this process locally - including the <code>myrepo_svn_WS</code> going offline. If you use the script as is, you'll notice that the system can ""recover"" from the SVN ""WS"" server going offline, and the log in that case is <a href=""https://gist.githubusercontent.com/anonymous/3a81678c99f14d557a4e/raw/testrepo_nofail.log"" rel=""nofollow noreferrer"">testrepo_nofail.log</a>. However, if you uncomment the <code>#~</code> commented lines, which do a <code>git fetch origingit</code>, you will notice that the process fails, for which the log is <a href=""https://gist.githubusercontent.com/anonymous/3a81678c99f14d557a4e/raw/testrepo_fail.log"" rel=""nofollow noreferrer"">testrepo_fail.log</a>:</p>

<pre class=""lang-none prettyprint-override""><code>remote: Using index info to reconstruct a base tree...
remote: Falling back to patching base and 3-way merge...
remote: Auto-merging folder/file.txt
remote: CONFLICT (content): Merge conflict in folder/file.txt
remote: Failed to merge in the changes.
remote: Patch failed at 0001 5th git commit
remote: 
remote: When you have resolved this problem run ""git rebase --continue"".
remote: If you would prefer to skip this patch, instead run ""git rebase --skip"".
remote: To check out the original branch and stop rebasing run ""git rebase --abort"".
</code></pre>

<p>What confuses me here (and why I find this unexpected) - is that I am the <em>only</em> user here, and thus I don't even use branches at all! In that case, how could I possibly get a ""merge conflict""?</p>

<p>The thing is - now the system has actually ended up in this failed state; so my question is: how can I recover the system back to proper working state, such that when I do a commit and push from the local <code>myrepo_git_wc</code>, the SVN web sever <code>myrepo_svn_WS</code> properly updates?</p>

<p>A few notes from comparing the logs with <code>meld</code>:</p>

<p>Note that right after the ""Simulating merge conflict via git fetch"" part, the process seems to go on properly - except that there is now a <code>origingit/master</code> branch (click for full size):</p>

<p><a href=""https://i.stack.imgur.com/Js8RV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Js8RV.png"" alt=""testrepo_meld_01.png""></a></p>

<p>I didn't think much of this, because I didn't think of <code>git-svn</code> as a branch; but here is a subquestion: of <code>git-svn</code> and <code>origingit/master</code>, which one is a branch?</p>

<p>That part ends here:</p>

<p><a href=""https://i.stack.imgur.com/mF882.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mF882.png"" alt=""/testrepo_meld_02.png""></a></p>

<p>Notice that in the end, the non-failed process shows the log graph tree as ""compacted"" or ""flattened"" (i.e. no branches are sticking out) - while the failed process at that point doesn't complain of errors, but shows the log graph tree as branched. </p>

<p>The problem occurs only after the '6th git commit':</p>

<p><a href=""https://i.stack.imgur.com/dRJTW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dRJTW.png"" alt=""testrepo_meld_03.png""></a></p>

<p>The failed process actually starts, for some reason 'Applying 5th git commit', which at that point should have already been handled; and at that point, the merge conflict occurs.</p>

<p>So, provided my system (or rather, <code>myrepo_gitsvn</code>) is in this failed state, what can I do to recover it? </p>

<p>Here is the <code>testrepo.sh</code> code:</p>

<pre class=""lang-bash prettyprint-override""><code>set -x

rm -rf /tmp/myrepo*
cd /tmp

echo ""simulating svn web server repo""

svnadmin create myrepo_svn_WS
# svn co file:///tmp/myrepo_svn_WS myrepo_svnco
read -s -p ""Enter ssh pass [note, you will be prompted again via GUI for the same]: "" SSHPASS
export SSHPASS
# note: the next command will again prompt for sshpass in GUI once, regardless of the SSHPASS variable
sshpass -e svn co svn+ssh://localhost/tmp/myrepo_svn_WS myrepo_svnco
cd /tmp/myrepo_svnco

echo ""Adding first commits via svn""

echo aaa &gt; AA.txt
svn add AA.txt
sshpass -e svn ci -m 'first svn commit'

echo bbb &gt; BB.txt
svn add BB.txt
sshpass -e svn ci -m '2nd svn commit'

echo ccc &gt; CC.txt
svn add CC.txt
sshpass -e svn ci -m '3rd svn commit'

echo ddd &gt; DD.txt
svn add DD.txt
sshpass -e svn ci -m '4th svn commit'

echo eee &gt; EE.txt
svn add EE.txt
sshpass -e svn ci -m '5th svn commit'

cd /tmp
echo ""Cloning svn as git""

sshpass -e git svn clone svn+ssh://localhost/tmp/myrepo_svn_WS myrepo_gitsvn

echo ""Cloning a bare git local server""

git clone --bare myrepo_gitsvn myrepo_git_LS.git

echo ""Adding a git local server remote to the gitsvn""

cd /tmp/myrepo_gitsvn
git remote add origingit file:///tmp/myrepo_git_LS.git

cd /tmp
cat &gt; /tmp/myrepo_git_LS.git/hooks/post-update &lt;&lt;EOF
#!/usr/bin/env bash
export SSHPASS=${SSHPASS}
#export GIT_DIR="".""
git update-server-info
export GIT_DIR="".git""
echo ""post-update kicking in""
cd /tmp/myrepo_gitsvn
git pull --rebase origingit master
git log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order
sshpass -e git svn rebase
sshpass -e git svn dcommit
sshpass -e git svn rebase
git log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order
EOF
chmod +x /tmp/myrepo_git_LS.git/hooks/post-update

cd /tmp
echo ""Cloning a git local server to git local working copy""

sshpass -e git clone ssh://localhost/tmp/myrepo_git_LS.git myrepo_git_wc

cd /tmp/myrepo_git_wc
echo ""Working from git local working copy now""
git config user.name me
git config user.email me@myself.com

mkdir folder
echo hhh &gt; folder/file.txt
git add folder/file.txt
git commit -m ""1st git commit""
sshpass -e git push origin master

echo iiii &gt;&gt; folder/file.txt
git add folder/file.txt
git commit -m ""2nd git commit""
sshpass -e git push origin master

echo ""Simulating svn server offline; git wc commits get added""
mv /tmp/myrepo_svn_WS /tmp/.myrepo_svn_WS

echo jjj &gt;&gt; folder/file.txt
echo jjj &gt; folder/file2.txt
git add folder/file*.txt
git commit -m ""3rd git commit""
sshpass -e git push origin master

echo kkkk &gt;&gt; folder/file.txt
echo kkkk &gt;&gt; folder/file2.txt
git add folder/file*.txt
git commit -m ""4th git commit""
sshpass -e git push origin master

echo ""Simulating svn server back online; git wc commits get added""
mv /tmp/.myrepo_svn_WS /tmp/myrepo_svn_WS

#~ echo ""Simulating merge conflict via git fetch""
#~ (cd /tmp/myrepo_gitsvn; git fetch origingit)

echo lll &gt;&gt; folder/file.txt
git add folder/file.txt
git commit -m ""5th git commit""
sshpass -e git push origin master

echo mmm &gt;&gt; folder/file.txt
git add folder/file.txt
git commit -m ""6th git commit""
sshpass -e git push origin master
</code></pre>
","1","277826",""
"11148755","10638","2012-06-22 00:33:39","15","6785","<git-svn>","How to import local git repository into svn?","<p>I am working on local git repository and I need to push my local git into <em>existing</em> svn repository. My git repository is pure local git repository, it was <strong><em>not</em></strong> init using <code>git svn clone</code>.</p>

<p>How can I import this local git repo into svn?</p>

<p>Preferably I'ld like to keep the git history being imported into SVN.</p>

<p>Currently the SVN repository is structure as:</p>

<pre><code>https://svnrepohost
           /branches
           /tags
           /trunk
                  /projectA
                  /projectB
                  /newProject
</code></pre>

<p>What I need it is to import my git repository into the <code>https://svnrepohost/trunk/newProject</code> above, assuming the <code>newProject</code> folder is empty.</p>
","4","10638","0"
"29055811","277826","2015-03-15 00:13:55","1","294","<git><svn><git-svn>","git svn rebase misses/loses commits (on rebase --continue due merge conflict)?","<p>I have a problem with missing commits, in a setup very similar to the one described in <a href=""https://stackoverflow.com/questions/29050377/unexpected-merge-error-in-a-git-svn-system"">Unexpected merge error in a git svn system?</a> (click for full size):</p>

<p><a href=""https://i.stack.imgur.com/xgMlE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xgMlEm.png"" alt=""testrepo.png""></a></p>

<p>Unfortunately, I cannot reproduce this problem in an example, so I'll try to provide the information that I think is relevant. I work locally in <code>myrepo_git_wc</code> and so it represents the ""original source""; currently it has this state of the last few commits (all of which have ""null edit"" in the name, so I'm grepping after that):</p>

<pre><code>$ git log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order | grep 'null edit'

* 03ed433 (HEAD, master) : damnit, null edit again
* de3bd53 (origin/master, origin/HEAD) : previous null edit passed
* 65bf738 : again null edit - no improvement
* 62ab3f6 : still bad; trying again w null edit
* 14f5aba : another null edit; previous was bad
* f0ef194 : null edit - starter
</code></pre>

<p>I push my work here to <code>myrepo_git_LS.git</code> bare repo; which then using a <code>post-update</code> hook updates the <code>myrepo_gitsvn</code> - which ultimately <code>dcommit</code>s to <code>myrepo_svn_WS</code>. </p>

<p>So, at the moment, <code>myrepo_git_LS.git</code> shows the following (with the same <code>git log --graph...</code> command as above):</p>

<pre><code>* 03ed433 (HEAD, master) : damnit, null edit again
* de3bd53 : previous null edit passed
* 65bf738 : again null edit - no improvement
* 62ab3f6 : still bad; trying again w null edit
* 14f5aba : another null edit; previous was bad
* f0ef194 : null edit - starter
</code></pre>

<p>So, <code>myrepo_git_LS.git</code> has the same commits as <code>myrepo_git_wc</code>, as expected - so far so good.</p>

<p>At first, <code>myrepo_gitsvn</code> shows this for the <code>git log --graph ...</code></p>

<pre><code>* 964b300 (HEAD, git-svn, master) : null edit - starter
</code></pre>

<p>So <code>myrepo_gitsvn</code> is at the oldest ""null edit"" commit (although the hash is not the same); which is the same revision where the <code>myrepo_svn_WS</code> is at. I'd like to add the new commits in <code>myrepo_gitsvn</code> repo too -- so, from <code>myrepo_gitsvn</code>, I do:</p>

<pre><code>git pull --rebase origingit master
</code></pre>

<p>... which should pull in the commits from <code>myrepo_git_LS.git</code>. Now, the <code>myrepo_gitsvn</code> shows this <code>git log --graph...</code>:</p>

<pre><code>* 03ed433 (HEAD, master) : damnit, null edit again
* de3bd53 : previous null edit passed
* 65bf738 : again null edit - no improvement
* 62ab3f6 : still bad; trying again w null edit
| * 964b300 (git-svn) : null edit - starter
...
* | 14f5aba : another null edit; previous was bad
* | f0ef194 : null edit - starter
...
</code></pre>

<p>It's kinda weird that here I get the oldest ""<em>null edit - starter</em>"" commit <strong>twice</strong>; also the original commit SHAs are shown here. At this point, the graph tree is shown as split (i.e. git and SVN commits are shown separately). </p>

<p>So, I'm thinking, if I do here <code>git svn rebase</code> (as I usually do in my workflow, with which I haven't had problems previously) then the repo would be able to ""compact"" these commits. Unfortunately <code>--verbose</code> doesn't reveal here much detail, but this is the output when running this command in <code>myrepo_gitsvn</code>:</p>

<pre><code>$ git svn rebase
user@ssh.server's password:
First, rewinding head to replay your work on top of it...
Applying: : still bad; trying again w null edit
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging folder/file.tex
CONFLICT (content): Merge conflict in folder/file.tex
Failed to merge in the changes.
Patch failed at 0001 : still bad; trying again w null edit

When you have resolved this problem run ""git rebase --continue"".
If you would prefer to skip this patch, instead run ""git rebase --skip"".
To check out the original branch and stop rebasing run ""git rebase --abort"".

rebase refs/remotes/git-svn: command returned error: 1
</code></pre>

<p>Since it says it failed at ""<em>still bad; trying again w null edit</em>"", which is commit 62ab3f6 - I simply checkout that revision of the file (although the same happens if I edit the file manually in a text editor); and then ask <code>rebase</code> to <code>--continue</code> in <code>myrepo_gitsvn</code>:</p>

<pre><code>$ git checkout 62ab3f6 folder/file.tex 
$ git add folder/file.tex
$ git rebase --continue
Applying: : still bad; trying again w null edit
Applying: : again null edit - no improvement
Applying: : previous null edit passed
Applying: : damnit, null edit again
</code></pre>

<p>It almost looks good; but if I do the <code>git log --graph ...</code> command now in the <code>myrepo_gitsvn</code>, I get:</p>

<pre><code>* eef9e50 (HEAD, master) : damnit, null edit again
* 9b2af2d : previous null edit passed
* 380b0f9 : again null edit - no improvement
* a41db2b : still bad; trying again w null edit
* 964b300 (git-svn) : null edit - starter
</code></pre>

<p>If you compare with the original state -- besides the commit SHA hashes not being the same, there is another problem: the commit ""<em>another null edit; previous was bad</em>"" (which should have been between ""<em>null edit - starter</em>"" and ""<em>still bad; trying again w null edit</em>"") is <strong>not present anymore</strong>?!! Basically, I could <code>git svn dcommit</code> this state now - and it would be uploaded to the SVN server without errors; but I'd lose one of the commits - which then will possibly cause problems during rebasing later!</p>

<p>Thus, at this point I delete the latest commits in <code>myrepo_gitsvn</code> by resetting like this:</p>

<pre><code>git reset --hard 964b300
git svn reset -r446
git svn rebase
</code></pre>

<p>... which brings about the state with which this post started (and so I can loop with this procedure indefinitely).</p>

<p>My question is - what can I do, so all of the commits present originally in the git side, are recognized and integrated by the svn side as well; or in other words, how can I force <code>git svn</code> to also pick up this lost/missing commit? </p>
","4","277826",""
"11151325","538901","2012-06-22 06:43:33","3","1958","<svn><github><git-svn>","svn2git error: [svn-remote ""svn""] unknown","<p>Trying to convert my local SVN repo to Git using <code>svn2git</code> as suggested by github.</p>

<p>I ran this code:
<code>svn2git http://localhost/repo-name</code></p>

<p>And I got this error:</p>

<pre><code>RA layer request failed: OPTIONS of 'http://localhost/repo-name': 200 OK (http://localhost) at /usr/bin/git-svn line 1923

[svn-remote ""svn""] unknown
</code></pre>

<p>Google and a fairly thorough search in SO yielded no results.</p>

<p>Can anyone shed some light here?</p>
","1","538901",""
"29386926","2541","2015-04-01 09:13:13","2","366","<git-svn>","git svn command to get remote HEAD revision number","<p>is there a <code>git svn</code> command that will tell me the HEAD revision on the svn <strong>remote</strong> repositiory <em>before</em> I perform a <code>git svn fetch</code>?</p>

<hr>

<p><strong>Use case</strong> (Since someone asked why I'd want to do this.)</p>

<p>I want to check if there has been a large number of commits to the remote repository before I start the fetch, so I know whether to do something else* before it finishes, or just sit staring at the console because it will be done quickly.</p>

<p>* something else = go and make a coffee</p>
","7","2541","0"
"11520623","461992","2012-07-17 10:28:37","13","11170","<git><svn><git-svn><svn-externals>","git svn - clone repo with all externals","<p>I want to use git to clone a svn repository, but unfortunately, where <code>svn checkout</code> gets the repo with all externals, <code>git svn clone</code> only gets the repository without externals. How can I get the externals from the svn repository via <code>git svn</code>? I don't want to do any fancy stuff, just get the the complet repo with externals.</p>
","1","461992","0"
"11527755","1387769","2012-07-17 17:30:46","0","1590","<git><git-svn>","git failed to read object error","<p>Due to heavy power cuts, my computer was getting powered off every now and then. Now when I try ti give a git status command in one of the repositories, I get an error:</p>

<pre><code>fatal: failed to read object bbf5a710cc9d8ad557355f43fafb6ec4652370da: Invalid argument
</code></pre>

<p>I search for this issue, but all my attempts failed. Can anybody help me, as I need to submit this project by this weekend :(</p>
","3","1387769",""
"47612390","3938403","2017-12-02 20:41:43","4","864","<git><svn><version-control><git-svn>","Make `git svn find-rev` search the whole repository","<p>When I want to get a local hash of a commit based on SVN revision id, I usually run <code>git svn find-rev</code>. However, the one big inconvenience is that this command will only look for the commit in the current branch, or in the branch explicitly specified in the command after the revision.</p>

<p>Sometimes, I only know the revision id, and I want to find a local hash without knowing the branch name. Is there a way to do it with <code>git svn find-rev</code>? It would make sense, knowing that SVN revisions are unique.</p>

<p><strong>EDIT:</strong></p>

<p>Turns out, there is no good way to do it.
I accepted the answer, which provides a solution, but it takes too long to search a repository with huge number of branches, like mine. I ended up writing my own shell function and using a regular <code>svn</code> in combination with <code>git svn</code>, which works much faster:</p>

<pre><code>gitrev()
{
  if [ -z ""$1"" ]; then
    echo ""${FUNCNAME[0]} &lt;revision&gt; [git_args]""
    return 1
  fi
  local rev b
  rev=""$1""
  shift
  b=""$(svn log -v -c ""$rev"" ""$SVN_BRANCHES_URL"" | grep -m1 -Po '/branches/\K[^/]+')"" &amp;&amp;
  git svn find-rev ""r${rev#r}"" ""origin/$b"" ""$@""
}
</code></pre>

<p>If you use it, you may need to replace <code>grep -P</code> part if you're not on GNU/Linux. Revision can be specified with or without ""r"" prefix.</p>
","0","3938403",""
"11604958","699700","2012-07-22 23:53:52","2","229","<git><git-svn>","How do I SVN-commit multiple git-svn repositories simultaneously?","<p>I work at a company that tracks what could be viewed as multiple projects under one SVN repository.  Therefore, when I git-svn cloned said repository, I did it into multiple git-svn repositories.  However, sometimes it would be better to SVN-commit a single logical change that spans multiple projects.  Is there a way to do this?</p>

<p>For example, given the git-svn repositories:</p>

<ul>
<li>project-a => svn://svn.server/project-a</li>
<li>project-b => svn://svn.server/project-b</li>
</ul>

<p>I would like to be able to do <code>git svn dcommit-simultaneously project-a project-b</code> or something and have it commit only once to SVN.</p>
","2","699700","0"
"11611337","699700","2012-07-23 11:09:52","1","78","<git><git-svn>","Can (git svn dcommit) output which SVN commands it would run?","<p>I know about <code>git svn dcommit --dry-run</code>.  However, due to (rename detection/folder deletion/other complicated issues that I can't conveniently predict), I would like to be able to view a dry run that actually outputs the SVN commands it would run, rather than just telling me which commits it's translating.</p>

<p>Example of desired behavior:</p>

<pre><code>$ git svn dcommit --svn-dry-run

Commit 03cfd743661f07975fa2f1220c5194cbaff48451:
svn propset svn:executable ""*"" script
svn rm something

Commit 7b18d017f89f61cf17d47f92749ea6930a3f1deb:
svn propset svn:mergeinfo /branches/something-else:12345-12346
</code></pre>
","0","699700",""
"11642487","128511","2012-07-25 03:57:10","1","407","<git-svn>","auto update svn from git","<p>Here's what I would like to do. Is it possible</p>

<ul>
<li>have project in git. Lots of people pushing, pulling, merging etc. Normal it workflow</li>
<li>have ONE AND ONLY ONE of those git repo's push changes in it's master branch to svn.</li>
</ul>

<p>No one else will ever commit to the svn repo. It's one direction only. From git to svn. It will only ever take changes to master on git and add them to svn. svn is basically an svn version of a master branch.</p>

<p>I thought I could just do</p>

<pre><code>git svn dcommit
</code></pre>

<p>over and over as in</p>

<pre><code>..edit, push and or pull files..
git commit -a -m ""foo1""
git svn dcommit
..edit, push and or pull files..
git commit -a -m ""foo1""
git svn dcommit
..edit, push and or pull files..
git commit -a -m ""foo1""
git svn dcommit
</code></pre>

<p>But that doesn't seem to work. I keep getting conflicts and messages like </p>

<pre><code>$ git svn dcommit
Committing to https://my.svn.repo/svn/ ...
        M       README.md
Committed r18619
        M       README.md
r18619 = 8f00073a3f1987e97a0f0f194798b6e02e9b0345 (refs/remotes/git-svn)
No changes between current HEAD and refs/remotes/git-svn
Resetting to the latest refs/remotes/git-svn
Unstaged changes after reset:
M       README.md
        M       README.md
Committed r18620
        M       README.md
r18620 = 47313477c1e38959fadd43d0001ff55210637669 (refs/remotes/git-svn)
No changes between current HEAD and refs/remotes/git-svn
Resetting to the latest refs/remotes/git-svn
</code></pre>

<p>That seems fishy. git status gives me</p>

<pre><code># On branch master
# Your branch and 'origin/master' have diverged,
# and have 2 and 2 different commits each, respectively.
#
</code></pre>

<p>I feel like I'm fundamentally missing something. Like maybe I shouldn't be using git-svn at all. In fact if all I did was this</p>

<pre><code>cd ~/git-folder
..edit files..
git commit -a -m ""foo""
cd ~/svn-folder
cp -r ~/git-folder .
svn commit -m ""foo""
</code></pre>

<p>It would actually work, I'd just lose all the commit messages and individual commits.</p>

<p>Can someone point out what I'm missing</p>
","0","128511",""
"11641553","474330","2012-07-25 01:42:04","0","449","<git><svn><git-svn>","svn external to include a git branch","<p>I have legacy projects that is using a submodule which resides on git.</p>

<p>There are a lot of ways and tools that supports migrating to git and/or submoduling a svn project from git, but what I need is exactly the opposite.
Since they are legacy projects beyond my control, I cannot migrate them to git.
What I need is just whenever I push to origin/master on the git, I'd like the svn-projects to be able to grab that changes automatically whenever they do ""svn up"" or ""svn co""</p>

<p>Is there any way to achieve this?</p>

<p>I have tried svn:externals but they dont support git submodule... any clues will be appreciated. Thanks!</p>
","2","474330",""
"11654591","9279","2012-07-25 16:41:41","1","53","<git><git-svn>","How do I find the differences between two git remotes","<p>In my local copy of our svn repo (created using git-svn), I have multiple remotes representing a series of releases of our project: remotes/tags/release1 remotes/tags/release2 etc. How can I use git to show me the changed revisions and/or the diffs between releaseN and releaseN-1?</p>

<p>I have tried <code>git diff remotes/tags/releaseN-1 remotes/tags/releaseN</code>  and <code>git log remotes/tags/releaseN-1 remotes/tags/releaseN</code>, but both of these just give me the ""unknown revision or path not in the working tree"" error message.</p>
","3","9279",""
"11659669","1552991","2012-07-25 22:32:52","4","1393","<git><svn><git-svn><revision-history>","How to retain git authorship and commit date when using git-svn to push to a subversion repo?","<p>We begin with a new, empty subversion repository and an existing git repository that I would like to 'push' to and retain all history and authorship (even just the username if possible).</p>

<p>Using ""git svn dcommit"" I'm able to see revision comments in subversion repo's history but the author detail defaults to my username in subversion and the commit date becomes <em>todays</em> date, the date of the push rather than the initial commit in git.</p>

<p>Is there are method to override these properties of interest much like BZR->SVN, with the bazaar.conf override and modification to the pre-revprop-change hook, but this time for Git?</p>

<p>Thanks.</p>
","0","1552991","0"
"11661745","561309","2012-07-26 03:06:22","2","2043","<git><svn><directory><git-svn><trunk>","Using git-svn without ""trunk"" sub-directory","<p>I'm using git-svn to checkout a standard SVN repository such as this one:</p>

<pre><code>http://example.com/
    - trunk
    - branches
    - tags
</code></pre>

<p>with this command:</p>

<pre><code>git svn clone -s http://example.com/
</code></pre>

<p>The problem is that git-svn is creating a ""trunk"" sub-directory in the target folder. Instead of having this kind of directory structure:</p>

<pre><code>c:\www\example
</code></pre>

<p>I'm having this:</p>

<pre><code>c:\www\example\trunk
</code></pre>

<p>So how to prevent git-svn from putting everything in this trunk folder, while still using the standard SVN layout? Basically, I would want ""c:\www\example"" to contain whatever I'm currently working on, whether it's the trunk, a branch or a tag. On the other hand, I also need git-svn to correctly map the git branches and tags to the correct SVN folders. Can this be done with git-svn or am I missing something?</p>
","2","561309",""
"11674649","592392","2012-07-26 17:21:47","2","795","<git><git-svn><jgit>","git svn fetch with jgit","<p>I use jGit to automate my interactions with git on my projects. There is an API corresponding to <code>git fetch</code> but I need here to execute <code>git svn fetch</code> and could not find anything about svn in the jGit project <a href=""http://jgit.info/javadoc/"" rel=""nofollow"">javadoc</a>. </p>

<p>So I am afraid it is not possible but maybe there is a trick to achieve this, any idea how to?</p>

<p>My alternative is to call the shell command <code>git svn fetch</code> but its a lot less clean than using jGit so I would like to avoid it.</p>
","0","592392","0"
"11694065","1558493","2012-07-27 18:59:36","18","19928","<git-svn>","git-svn migration fatal: not a valid SHA1 update-ref refs/heads/master refs/remotes/trunk: command returned error: 128","<p>Trying to migrate a large but linear svn repository to git. The svn repository does not have the standard layout (trunk, branches, tags)...just one directory with the trunk.</p>

<p>Ubuntu 12.4 LTS,git 1.7.9.5.</p>

<pre><code>$ git svn clone https://coawstmodel.sourcerepo.com/coawstmodel/COAWST --authors-file=../users.txt COAWST

...

    D   WPS/metgrid/storage_module.F
    D   WPS/metgrid/process_domain_module.F
W: -empty_dir: WPS/metgrid/gridinfo_module.F
W: -empty_dir: WPS/metgrid/input_module.F
W: -empty_dir: WPS/metgrid/interp_option_module.F
W: -empty_dir: WPS/metgrid/module_date_pack.F
W: -empty_dir: WPS/metgrid/process_domain_module.F
W: -empty_dir: WPS/metgrid/storage_module.F
r635 = c19181c9718e701788b540ed0cc559e4fbddf413 (refs/remotes/git-svn)
    M   Tools/Docs/COAWST_User_Manual.doc
r636 = 1b7849c3e5a20856c9ddb909a5f53ddf8501ad33 (refs/remotes/git-svn)
Auto packing the repository for optimum performance. You may also
run ""git gc"" manually. See ""git help gc"" for more information.
Counting objects: 14143, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (14039/14039), done.
Writing objects: 100% (14143/14143), done.
Total 14143 (delta 8350), reused 0 (delta 0)
fatal: refs/remotes/trunk: not a valid SHA1
update-ref refs/heads/master refs/remotes/trunk: command returned error: 128
</code></pre>

<p>I have tried variants with combinations of -s, -t Trunk, -t COAWST, --preserve-empty-dirs (which I would like to do), --no-meta-data (per Pro Git)...always the same final error.</p>

<p>Thanks for any suggestions!</p>
","5","1558493","0"
"8778916","2874","2012-01-08 15:52:57","6","2877","<git><svn><git-svn>","Push an existing git repository to an existing SVN repository","<p>I have been asked for a school project to submit my work by pushing it to an <strong>existing</strong> SVN repository. It is an existing repository with some files already there. I have no need for these files or the previous commits.</p>

<p>I have been working on my assignment with a git repository on my. I would like to push my work to the SVN repository without losing any history. How can I do this?</p>
","7","2874","0"
"8787444","1104390","2012-01-09 11:07:32","2","2285","<svn><github><git-svn>","importing exsiting svn project to github repo","<p>this is my first time trying to use github so please bear with me..</p>

<p>Currently, I am managing my project through tortoise SVN.</p>

<p>I have created a repository on github and tried to uploaded a readme file through instructions given on github help</p>

<p>Iam tryin to import existing svn project to github repository and its giving me errors.
Since Iam new to github, I am unable to figure it out...</p>

<p>any idea????</p>

<p><img src=""https://i.stack.imgur.com/E3V5r.jpg"" alt=""erros while git svn clone to github repo""></p>
","0","1104390","0"
"8786279","1066839","2012-01-09 09:32:23","0","896","<git><git-svn>","run git update-server-info on the server?","<p>I am trying to download a source code from code.google.com using git command but getting the following error</p>

<pre><code> git clone https://code.google.com/p/dolphin-player/

 Initialized empty Git repository in /afs/.cpiv.com/techhome/john.f/Desktop/dolphin-player/.git/

  fatal: https://code.google.com/p/dolphin-player//info/refs not found: did you run git update-server-info on the server?

 john.f@4wing13:~/Desktop$ git update-server-info

 fatal: Not a git repository
</code></pre>

<p>Any one please help</p>
","0","1066839",""
"8851242","218635","2012-01-13 13:21:33","0","1108","<git><intellij-idea><git-svn><git-branch>","How to assign shortcuts to git svn in intellij?","<p>Anyone know a way to assign a shortcut to git svn dcommit in intellij ? Even better to be able to combine it with the commit altogether. </p>

<p>Actually come to think of it perhaps a branch specific commit hook is the way to go, not sure how to do that either though</p>
","2","218635",""
"44789194","6136634","2017-06-27 20:21:12","3","49","<ruby-on-rails><git><git-svn>","Risks of adding a remote git repository to current git svn repository","<p>I'm working in a rails project which uses <em>SVN</em> as central repository, but i'm working (locally) with <em>git-svn</em>, and I want to add a remote where i will only push <em>master</em> for testing purposes (i will push to Heroku).</p>

<p>I've read this from <a href=""https://git-scm.com/book/en/v2/Git-and-Other-Systems-Git-as-a-Client#Git-and-Subversion"" rel=""nofollow noreferrer"">chapter 9.1 of Pro Git</a> (my emphasis):</p>

<blockquote>
  <p>Don’t rewrite your history and try to push again, <strong>and don’t push to a
  parallel Git repository to collaborate with fellow Git developers at
  the same time</strong>. Subversion can have only a single linear history, and
  confusing it is very easy. If you’re working with a team, and some are
  using SVN and others are using Git, make sure everyone is using the
  SVN server to collaborate — doing so will make your life easier.</p>
</blockquote>

<p>I won't be collaborating with other Git developers (everyone else is using <em>SVN</em>), but before setting it up, i just want to be sure if there are any associated risks in doing this, and if so, what should/could i do about it.</p>
","0","6136634",""
"8855963","469717","2012-01-13 19:16:52","0","454","<git><svn><git-svn>","git svn rebase erroring out all of a sudden","<p>We have a relatively standard SVN server in our office, and I've been using Git-SVN with it on my local machine for the past several months without a problem. Nothing in the configuration (both on the server and on my computer) has changed in some time. This morning I went to do a <code>git svn rebase</code>, just like I do each morning, and was met with this error message:</p>

<pre><code>Use of uninitialized value in concatenation (.) or string at /System/Library/Perl/Extras/5.12/darwin-thread-multi-2level/SVN/Core.pm line 584.
Network connection closed unexpectedly: To better debug SSH connection problems, remove the -q option from 'ssh' in the [tunnels] section of your Subversion configuration file.:  at /usr/local/Cellar/git/1.7.8.3/libexec/git-core/git-svn line 2693
</code></pre>

<p><code>git svn fetch</code> returned the same message as well. Other people in my office (using plain SVN) are still able to connect to it without a problem.</p>

<p>I'm using Lion (10.7.2), git 1.7.8.3, svn 1.6.16, all installed through homebrew. Googling turned up next to nothing useful on this.</p>
","0","469717",""
"8868853","312288","2012-01-15 09:55:15","1","266","<merge><git-svn>","git-svn:update my local copy with changes in the 'trunk'","<p>We have a git-svn repository.
I had no troubles to update the trunk with my local changes (commit + push or commit + merge), however sometimes my colleagues make some fixes in the code and update the git-svn and i want to take his changes without committing mine, since the code is not yet ready for commit (even locally, i might want to revert some of it). I can;t find a way to get his code and merge conflicting changes (i work with 'tower' git client on mac os x).</p>

<p>Any way to do the same action an svn 'update' command will do ?</p>

<p>10x.</p>
","0","312288",""
"8933791","191438","2012-01-19 21:45:34","2","67","<git><git-svn>","How can I find what SVN branch my git branch will dcommit to?","<p>How can I check what branch ""svn dcommit"" from my currently checked out branch is going to push to?</p>
","0","191438",""
"8943335","439688","2012-01-20 14:58:07","0","327","<git><github><git-svn>","How do I get back deleted files after running git reflog then git reset HEAD@{1}?","<p>I messed up with git after running <code>git reset --hard HEAD~3</code> and lost 2 hours worth of work. I then found a post on here that explained git reflog.</p>

<p>When I want to return to ""<code>git reset HEAD@{1}</code>"", how do I not only return, but have all files that were removed put back in their directories?</p>
","1","439688","0"
"8964666","802281","2012-01-22 21:01:26","39","56863","<git><git-svn><commit>","how do I find a list of files committed to a git branch?","<p>How do I list all the files that I committed to a specific branch? I've committed about 40+ files to a branch, and I need to find the file names because I am trying to debug something, hard to do when I don't remember the file names.</p>

<p><code>git log</code> only gives me a long list of commits but not the actual files.</p>
","0","802281","0"
"26751974","982238","2014-11-05 07:44:08","2","1241","<git-svn><git-tag>","Remove svn tags/branches from git repository, after removing svn remote","<p>I've removed svn remote from my git repo, by removing it from <code>.git/config</code> and deleting <code>.git/svn/</code> according to <a href=""https://stackoverflow.com/questions/12013788/how-to-remove-subversion-remote-in-git"">How to remove subversion remote in git?</a></p>

<p>Now the problem is that output of branch command is:</p>

<pre><code>git branch -a
* master
  remotes/origin/master
  remotes/tags/0.1
  remotes/tags/0.1.1
  remotes/trunk
</code></pre>

<p>How can I remove <code>remotes/trunk</code>? And <code>remotes/tags/0.1.1</code>? This is obviously from svn-related stuff, but I have no idea how to remove that.</p>
","0","982238",""
"8987018","224667","2012-01-24 12:44:36","0","280","<git-svn>","Fail to convert svn to git. It justs stops","<p>I am following <a href=""http://www.albin.net/git/convert-subversion-to-git"" rel=""nofollow"">this guide</a>
On step 2 the clone/checkout just stops with no error. If I rerun the command it stops again. Any idea what is the problem? I have trunk, tags, branches, everything standard for SVN.</p>

<p>EDIT: Is it possible to migrate only the trunk and after that to migrate each branch one by one? If yes please give me a hint or link.</p>
","3","224667",""
"8992031","33689","2012-01-24 18:27:41","6","635","<git><svn><git-svn>","Is it possible to keep .gitignore files out of SVN?","<p>I'm using <code>git svn</code> to merge changes from my local git repository to an SVN server.  However, when I issue <code>git svn dcommit</code> it will actually commit any .gitignore files that I have in my source tree.  This is even after I've checked out the SVN repository locally (using SVN), set the svn:ignore property (recursively, listing .gitignore as one of the files to ignore), and then committing that property change directly to SVN.</p>

<p>Is this intended behaviour?  A bug?  Is there a work around that anyone knows of to keep .gitignore out of SVN?</p>

<p>I just know a non-git user on my team is going to see these files and start deleting them, then the next time I go to <code>rebase/dcommit</code> a lot of unwanted files are going to wind up in SVN.</p>
","0","33689","0"
"9013929","1059219","2012-01-26 04:25:46","1","373","<svn><github><git-svn>","Push cloned git-svn repository to Github to facilitate offline development?","<p>My company uses Subversion; I prefer Git.  I have cloned the Subversion repository on my work machine using git-svn and am relatively comfortable using Git as a Subversion client.  Now I would like to take the arrangement a step further and leverage the decentralized nature of Git to be able to work on this project from outside the office.  Ideally, I would like to mirror all change to my local (office) working copy to my Github account and also the reverse - have all changes to my Github repository made while out of the office be synced/pushed/mirrored to the working copy on my work machine (which is the cloned Subversion repository).  Is this possible?  How would I begin?  Is there another arrangement which will allow me to work away from the office yet still have the working copy at the office be my primary workspace?</p>
","0","1059219",""
"9057111","938005","2012-01-29 21:51:10","2","1595","<linux><proxy><git-svn>","git-svn ignores http proxy (debian)","<p>Searching how to use git with a proxy I found two solutions:</p>

<ul>
<li>the http_proxy environment variable</li>
<li>the git config http.proxy</li>
</ul>

<p>Since <code>export http_proxy=http://proxy.fqdn:8080</code> made <code>wget</code> work, but not <code>git-svn</code>, I tried the second option additionally: <code>git config --global http.proxy <a href=""http://proxy.fqdn:8080"" rel=""nofollow"">http://proxy.fqdn:8080</a></code>. But to no success. Wireshark still tells me that git-svn contacts the remote repository directly. Alas:</p>

<pre>git svn clone -s http://svn.wp-plugins.org/yak-for-wordpress 
ZM-Schicht Anforderung gescheitert: OPTIONS von »http://svn.wp-plugins.org/yak-for-wordpress«: Konnte keine Verbindung zum Server herstellen (http://svn.wp-plugins.org) at /usr/lib/git-core/git-svn line 1916</pre>

<p>Am I missing something, or is this a bug in git-svn? Did anyone try successfuly to clone a svn repo through a proxy?</p>
","0","938005","0"
"570945","39933","2009-02-20 19:39:21","17","6501","<svn><git><workflow><git-svn>","git clone of git-svn tree?","<p>I've got a 'git-svn' working tree. I'd like to clone a ""pure"" git repo off this, and then use git push/pull to move changes between the git-svn tree and the git tree, while also using 'git svn dcommit/rebase' to move changes between the git-svn tree and the SVN repo it's based on.</p>

<p>This seems to work okay as far as moving things back and forth between the git trees using git methods, but as soon as I interact with the SVN repo in the git-svn tree, things get wonky -- either I get errors when pushing or pulling between the git trees, or I lose commits in the git-svn tree, or other oddness.</p>

<p>Is this type of SVN &lt;-> git-svn &lt;-> git workflow supported at all or should I just quit barking up this tree?</p>
","0","39933","0"
"572640","47422","2009-02-21 08:34:01","10","1440","<svn><git><version-control><git-svn>","Avoiding conflicts while using git-svn","<p>Folks I'm facing repeated code conflicts while pulling from the shared git repo in the following scenario:</p>

<ol>
<li><p>There is a common svn repository</p></li>
<li><p>There are several developers who track/sync this common svn repo with their own local git repos using git-svn bridge(via git svn rebase/dcommit)</p></li>
<li><p>From time to time these developers using git need to share their changes without affecting the svn repository. For this purpose they setup a shared git repo and exchange their work using pull/push commands</p></li>
<li><p>It turns out these developers may face conflict problems due to usage of “git svn rebase” for syncing with the main svn repo. This happens because rebase operation rewrites history of the local git branch and it becomes impossible to push into the shared git repo and pulling from it often leads to conflicts.</p></li>
</ol>

<p>Anybody having the same problem?</p>
","0","47422","0"
"573585","61728","2009-02-21 19:13:43","57","35235","<git><svn><git-svn><git-checkout><svn-update>","What's the git equivalent of ""svn update -r""?","<p>I'm a recent git convert. It's great to be able to use git-svn to keep my branches locally without disturbing the svn server. There was a bug that existed in the latest version of the code. I wanted to establish a time when it worked so that I could use git bisect. I couldn't find the right command to move back in time. Thanks.</p>
","0","61728","0"
"636332","76886","2009-03-11 20:56:41","7","904","<svn><git><git-svn>","How do I track local-only changes/change sets with git-svn?","<p>I want to have files that I track in my local git repository that do not get checked in to the central svn repository when I run git-svn dcommit.  I often have long-lived local-only changes to files tracked in the repository.  Sometimes it's for debugging code.  I also have project IDE files that I'd like to track.  With plain old svn, I would just put those files into a changelist labelled ""XYZ: DO NOT CHECK IN,"" and then just manually deal with the problem when I actually DO have changes that I need to commit.</p>

<p>Ideally, I would like to check my changes into my master branch but set something that prevents those specific changes from propagating to the svn repo.  I would use git and git-svn in the conventional way, but certain commits never get pushed up.  Obviously, I can do this manually every time I make a commit, but that's a pain.</p>

<p>I've considered and discarded a couple of things.  I don't want to exclude these files, because sometimes I need to make changes that DO get dcommitted.  Also, I'd like these files to appear in any local-only branches I create, like in the case of IDE files.  However, I can't isolate these changes to a single branch because I will want them in every branch, as with the IDE files.  It looks like something like guilt or stgit may do what I want, but it's not obvious, as they add their own layer of complexity on top of git, which I'm still learning.</p>
","0","76886","0"
"674540","68573","2009-03-23 18:03:31","0","344","<git-svn>","How can I copy my git revision history into svn?","<p>I use Git, but some of my colleagues are unable to move away from SVN right now. We want the integration between the two systems to be seamless -- all of our development has been in git so far, so we need to copy that over into svn with complete revision history. </p>

<p>I've been able to jigger this such that it copies the repository in a single commit, but I would like it to copy <em>all</em> of the history. I would imagine that this should be pretty easy with git svn dcommit, etc., but it hasn't worked out that way -- merges seem to only go in as a single commit, rebasing kills git-svn, and pull just merges.</p>

<p>So, I've been trying things for the last couple of hours, but can't seem to get it. Tailor almost works, but dies amidst import with what appears to be a bug.</p>

<p>All help is appreciated, and thanks again.</p>
","0","68573",""
"677753","","2009-03-24 14:54:11","30","9649","<svn><git><git-svn>","Mapping between git committers and SVN users","<p>I'm using git-svn to store a ""staging"" version of some SVN repo, where other users are allowed to pull from this staging repo and commit there changes back to it, then the commits on the staging repo are periodically committed the upstream SVN repo. </p>

<p>I want to know if there's a way to map between the git committers' names and SVN usernames, so that their information would be kept intact when committing back to the SVN repo?</p>
","0","","0"
"678710","80731","2009-03-24 18:52:30","3","1292","<svn><git-svn>","Why doesn't git-svn use the Subversion repositories UUID instead of its URL","<p>Relocating a git-svn mirror of a Subversion repository isn't trivial:</p>

<p><a href=""https://stackoverflow.com/questions/268736/git-svn-whats-the-equivalent-to-svn-switch-relocate"">git-svn: what’s the equivalent to <code>svn switch —relocate</code>?</a></p>

<p>So why doesn't git-svn use the repository's UUID instead of its URL in the git-svn-id?  The UUID uniquely identifies the repository, so it seems a natural identifier to use and would handle relocatations much easier.</p>
","0","80731","0"
"714589","65778","2009-04-03 16:03:02","32","6618","<svn><git><merge><git-svn>","Can git-svn correctly populate svn:mergeinfo properties?","<p>I am evaluating git-svn and trying to determine how well it will play with a particular svn repository. I am mostly concerned with getting git-svn to perform merges in such a way that the svn:mergeinfo property is correctly set in the subversion repo. Is this possible?</p>

<p>Here is what I have done so far:</p>

<pre><code># Checkout the SVN repo.
$ git svn clone svn://server/project1 -T trunk -b branches -t tags

# Make sure we are working on trunk.
$ git reset --hard remotes/trunk

# Modify the working copy.
$ vim file.txt

# Commit locally to the git repo.
$ git commit -a

# Push the commits back to the SVN server.
$ git svn dcommit
Committing to svn://server/project1/trunk ...
    M   file.txt
Committed r178
    M   file.txt
r178 = b6e4a3a0c28e7b9aa71d8058d96dcfe7c8a2b349 (trunk)
</code></pre>

<p>Now how would I go about merging that particular commit into one of the subversion branches?  Again, it is very important to me that git properly set the svn:mergeinfo property when committing the change.</p>
","0","65778","0"
"19954485","1870481","2013-11-13 12:59:31","27","11998","<git><git-svn><git-rebase><git-filter-branch>","extract multiple directories using git-filter-branch","<p>I have a big repository which currently contains multiple projects in top level subfolders, say <code>/a</code>, <code>/b</code>, <code>/c</code>, and <code>/d</code>.</p>

<p>Now I want to split up that repository into two different repositories: one containing <code>/a</code> and <code>/b</code> and the other containing <code>/c</code> and <code>/d</code>.</p>

<p>I am aware of <code>git filter-branch --subdirectory-filter</code>, which is perfect for extracting a single directory, but it seems not to be able to extract multiple directories at once.</p>

<p>I am also aware of <code>git filter-branch --prune-empty --tree-filter</code>, which would allow me to delete everything, but the two wanted directories. This feels not completely right, as I have to manually specify all toplevel directories that might exist.</p>

<p>Is there a better way to extract two directories out of a big repository?</p>

<p>PS: Of course any good solution using something other than <code>git filter-branch</code> is fine. ;)</p>
","3","1870481","0"
"20014761","388325","2013-11-16 04:41:08","5","317","<git><svn><merge><git-svn><branching-and-merging>","git-svn: Is there a good branching and merging pattern?","<p>I'm running the git-svn client on my machine.  I'd like to have a pattern similar to a standard git branching and merging pattern, wherein you have a development branch which was branched from trunk, and you have several feature or bug-fix branches that have extended from the development branch.</p>

<p>The problem I'm having is that I can't figure out how to make that all work with git-svn.  I know that merging is a pain with vanilla subversion and that it's nice with vanilla git, but it's also turning out to be a pain with git-svn.</p>

<p>So.... what is the best practice?  How can you branch and merge confidently and easily with git-svn?  What is the development practices with it?</p>

<p>I would like to follow this pattern:</p>

<pre><code>* Master
|\
| * Development
| |\
| | * Feature
| | |
| | * a commit to feature
| |\|
| | * merge Development into Feature
| | |
| |/|
| * | merge Feature into Development
 ... etc
</code></pre>

<p>Any help would be greatly appreciated!!</p>

<p><strong>EDIT</strong></p>

<p>Just to clarify - each git branch should correspond with an svn branch.  This is a team workflow, where team members should be able to work on feature and bug fix branches.</p>
","4","388325","0"
"894360","1343","2009-05-21 18:26:05","40","43575","<windows><svn><tortoisesvn><git-svn>","Is there a git-svn windows client something like TortoiseSVN?","<p>I like TortoiseSVN's Windows integration. Is there something like that for dealing with git-svn? I'd even go with a less integrated GUI if it is quick enough to access. What I don't want is a CLI as I rarely would have a command prompt sitting in the correct directory.</p>

<hr>

<p><a href=""https://stackoverflow.com/questions/371682/is-there-an-acceptable-gui-client-for-git-svn"">This is a related question</a> but for Linux</p>
","1","1343","0"
"898568","","2009-05-22 15:47:13","7","4292","<git-svn>","Multiple svn projects into one git repository?","<p>I have started to use git-svn for some of my work to be able to do local commits. This works great for projects that use standard svn layout. Recently I started working on a Java project that is split into multiple connected modules (20-25), and each module have its own root folder in the same svn repo with its own trunk/branches/tags.</p>

<pre><code>svnrepo/    
  module-1
    trunk
    branches
    tags
  module-N
    trunk
    branches
    tags
</code></pre>

<p>I have cloned each and every module with git svn clone -s /path/to/svnrepo/module[1-N]. The ""problem"" is that when I want to do git svn rebase on all modules i have to do it N times.</p>

<p>I have tried to do git svn clone /path/to/svnrepo/ do avoid doing the rebase operation N times, but that leaves me with a directory layout that is the same as in the svn repo.</p>

<p>Is there a way that I can track all the trunks of all modules in one git repo? So that I get a directory layout like this within my git repository:</p>

<pre><code>module-1
module-2
module-N
</code></pre>
","2","","0"
"20060363","862193","2013-11-18 23:45:45","6","9459","<git><svn><git-svn>","git-svn: Unable to determine upstream SVN information from working tree history","<p>I'm trying to sync my svn repository to git on a daily basis. After much reading, I was able to make this work by manually creating the following in my .git/config:</p>

<pre><code>[svn-remote ""svn""]
url = svn+ssh://svn.myserver.com/project/trunk
fetch = apps/ios/project:refs/remotes/mirror/project
</code></pre>

<p>I then created a branch based on this code and pushed it to the git repo with:</p>

<pre><code>git checkout -b mirror/project mirror/project
git svn rebase
git push
</code></pre>

<p>I was very happy until I thought I'd really make sure this actually worked by deleting the cloned repo from disk and cloning it again, then trying to push some updates from svn.</p>

<pre><code>git clone git@myrepo.com:myproject
git checkout mirror/project
git svn rebase
</code></pre>

<p>This gives me the following error: <code>Unable to determine upstream SVN information from working tree history</code></p>

<p>I've read the myriad posts on stackoverflow about this message, but I've yet to understand any of the solutions. Is it possible to explain in terms a git newbie could understand why git has chosen to forget all about my svn config?</p>
","1","862193","0"
"901980","1452","2009-05-23 17:23:45","2","801","<git><merge><git-svn>","Why doesn't git know I merged? Is there a way to tell it?","<p>I'm using git-svn; I typically create a topic branch, make commits to it, then checkout master, git svn rebase, git merge --squash topic_branch, git commit -m ""summary comment"", then git svn dcommit.</p>

<p>That works fine, but git doesn't seem to know I merged the branch changes into master. I tried this without svn involved:</p>

<pre><code># Make a repository, add a couple files
$ mkdir gittest
$ cd gittest
$ git init
$ touch foo bar
$ git add .
$ git commit -m ""initial version""

# Make a branch, change a file, commit.
$ git checkout -b a_branch
$ vi foo # make a change
$ git commit -am ""a change""

# Merge changes into master
$ git checkout master
$ git merge --squash a_branch
$ git commit -m ""merged a_branch""
</code></pre>

<p>and gitk --all shows this, which would indicate that it's not a git-svn problem:</p>

<p><a href=""https://i.stack.imgur.com/Xwt8N.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Xwt8N.png"" alt=""gitk picture showing apparently unmerged branch""></a><br>
<sub>(source: <a href=""http://selfamusementpark.com/pic/hosted/gittest.png?sekrit=NADEU6"" rel=""nofollow noreferrer"">selfamusementpark.com</a>)</sub>  </p>

<p>In my main (git-svn) project, I see some changes early on that do appear to have been merged, but I don't know what I'm doing differently now that I didn't do then. (This is git 1.6.0.4 on Ubuntu Jaunty, if that matters.)</p>
","0","1452",""
"942665","68788","2009-06-03 01:08:11","0","358","<macos><git-svn>","Can't see repo after ""git svn clone <url>"" on Mac Leopard","<p>We use SVN here at the office and I'm experimenting with using git-svn for myself.</p>

<p>I created a directory in /usr/local/code/git and did my checkout to /testco.</p>

<p>I used the commands given in the man page, git svn clone , where  is my repo.</p>

<p>It goes through a few hundred lines of all the files in the SVN trunk, but when its done the directory only contains a .git file. None of the other files are there. Anyone know what's going on?</p>
","0","68788",""
"949512","1174","2009-06-04 09:36:14","1","1721","<svn><git><git-svn>","Can I make git-svn import a Subversion repository which itself contains git repositories","<p>I have a project in SVN which has a plugins folder.  Several of the plugins folders are git repositories -- I added them to my plugins folder using <code>git clone</code>.</p>

<p>This has been working well for me but now I'm looking to migrate my SVN repository to git using <code>git-svn</code>:</p>

<pre><code>git svn init http://path/to/my/repo --no-metadata 
git config svn.authorsfile ~/authors.txt
git svn fetch
</code></pre>

<p>This works fine for all my early revisions which didn't have the git repos in my plugins folder, but when it hits the first revision containing a git repository it fails with the following error:</p>

<pre><code>trunk/plugins/my_plugin/.git/HEAD was not found in commit 
ae9ad0ab7cebd144c823d90d43cdab2b30d13f9e (r2259)
</code></pre>

<p>Is there a way around this to allow me to fully import my repository, perhaps by excluding any .git folders which reside in the SVN repository?</p>
","0","1174","0"
"58097294","2116252","2019-09-25 11:25:17","2","119","<git><svn><git-svn>","git log --since <any date prior to svn migration> shows commits from the migration date onwards, but without ""--since"" shows all of them","<p>We've migrated from svn to git a couple of months back at March, 2019 and everything has been good since.
Now, I need to export a commit log of a specific directory in the repository and for some reason when trying to specify since when i want the logs like so : </p>

<pre><code>    git log --first-parent master --since ""01-01-2018"" Directory/Subdirectory
</code></pre>

<p>Then I only get commits since March 26, 2019 (the SVN to GIT migration date) with the first commit in this log being the LAST SVN commit from that day.
I get the same result no matter what date or date format I use, as long as the date is earlier than March 26, 2019 - I will get the exact same result.</p>

<p>If, however - I only drop the: "" --since  "" part and go with:</p>

<pre><code>    git log --first-parent master Directory/Subdirectory
</code></pre>

<p>Then I get the entire master commit log, going back to way before 2014 even, and including all of the commits that were migrated from SVN (instead of just the last one and the consequent git commit that followed)</p>

<p>I can export the entire log and manually remove the excess commits from the exported txt file - no problem here, but I would like to figure out why git behaves this way.
What metadata remained after the migration that causes the log to behave like this and how can I fix it.</p>

<p>The AuthorDate and CommitDate are identical (to each other per commit) for all commits in the master branch.
This includes the migrated svn commits - these have sequential timestamps that match their original svn commit timestamps, and the same goes for all the git commits that came after - everything is sequential and in logical order, and yet 
for some reason if adding '--since ' to the command line - it behaves as stated above (showing only commits from march 26, 2019, starting with the LAST migrated commit from svn)</p>

<p>If it matters this was exactly how we migrated from svn to git:</p>

<p>Initial clone:</p>

<pre><code>    git svn clone http://svn.local/server/trunk RepoName --authors-file=authors.txt
</code></pre>

<p>Increments of svn commits on top of the initial clone: </p>

<pre><code>    git svn fetch
</code></pre>

<p>Finally: merged the git-svn default migration branch to the master branch and reset --hard:</p>

<pre><code>    git merge remotes/git-svn 
    git reset --hard 
</code></pre>

<p>And finally, pushed the newly migrated git repository to its new origin server (which was blank at the time)</p>
","0","2116252","0"
"999500","6335","2009-06-16 03:57:34","16","6783","<svn><git><version-control><git-svn>","Expected FS format '2' found format '3 git-svn","<p>I was just checking out git-svn and thought I would give it a try with one of my existing repository.  When I ran git-svn I got this error.</p>

<p>Couldn't open a repository: Unable to open an ra_local session to URL: Unable to
 open repository '{MyFilePath}': <strong>Expected FS format '2';
found format '3'</strong> at C:/Program Files/Git/bin/git-svn line 1358</p>

<p>I ran a version check on git-svn that I am using and it printed out:</p>

<pre><code>git-svn version 1.5.5.1015.g9d258 (svn 1.4.6)
</code></pre>

<p>I noticed that it's using svn version 1.4.6 but I created the repositry using TortoiseSVN with Svn version Subversion 1.5.1.</p>

<p>My main question is how do I update git-svn so that it will use 1.5?</p>
","3","6335","0"
"1051163","26630","2009-06-26 20:36:27","0","430","<git><git-svn>","How do I re-fetch svn:log changes in git-svn?","<p>SVN permits the ability to update an old commit message via hook. How can I go about updating my git-svn copy's version of the commit message? The only reference I could find was a bug report <em>requesting</em> this feature about a year ago on <a href=""http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=469298"" rel=""nofollow noreferrer"">debian.org</a>.</p>

<p>Is this possible in the current version of Git v1.6.3.*?</p>

<p>If not, what's the most intelligent way to go about updating the local copy? The dumbest method that occured to me was brute-force; repeating a <code>git svn clone</code> operation.</p>
","0","26630",""
"1109069","131667","2009-07-10 11:40:05","159","38340","<git><version-control><git-svn>","git selective revert local changes from a file","<p>In my git repo which is tracking a svn repo I have made a number of edits to a single file.</p>

<p>Now I want to revert those changes(like svn revert), but only portions of the file.</p>

<p>I want to be able to view the diffs on the file, discard(revert) the changes that I don't want and retain the changes I want.</p>

<p>the </p>

<pre><code>git add -i 
</code></pre>

<p>command seems to have an option to do that but I don't want to stage this yet.</p>
","0","131667","0"
"1112073","774","2009-07-10 21:26:48","3","1409","<git><version-control><git-svn>","git-svn: how to copy git commits from one SVN branch to another?","<p>I've got a git-svn checkout of my entire repo (initialized in the standard <code>git svn init -t tags -b branches -T trunk $repo_url</code> fashion, then <code>git svn fetch</code>ed). I manually <code>svn copy $repo_url/branches/branch1 $repo_url/branches/branch2</code>. I then ran <code>git svn fetch</code>, <code>git checkout -b local-branch2 branch2</code>, made a few commits to <code>branch2</code>, <code>dcommit</code>ed them back to the SVN repo, and am done with my work on <code>branch2</code>. (Why branch a branch? I wanted to  hack at this branch locally in git, but still commit back to SVN and get help from a couple of coworkers while I was working on it).</p>

<p>What I haven't done is merge the <code>branch2</code> work back into <code>branch1</code>. If I <code>git checkout -b local-branch1 branch1</code>, then <code>git merge branch2</code>, it simply fast-forwards my <code>local-branch1</code> pointer to where <code>branch2</code> is.</p>

<p>Instead, I want git to replay all commits made since starting <code>branch2</code> onto branch1, so that I can dcommit each of them to the SVN repo. It seems like there's a way to do this, but I can't think of it. Maybe <code>git rebase</code>, or a <code>git cherry-pick</code> of each commit made on <code>branch2</code>? (though the latter is a bit tedious). I'd rather not svn merge the two URLs together, as that's a big bucket of hurt.</p>

<p>Ideas? Any parts of this need more explanation?</p>
","1","774","0"
"1112515","136562","2009-07-11 00:05:12","3","400","<svn><git><version-control><git-svn>","Migrating odd subversion layout to git with history","<p>I have a subversion repo with an odd layout:</p>

<p>trunk</p>

<pre><code>Project1

Project2
</code></pre>

<p>tags</p>

<pre><code>Project1-0.2.4

Project2-1.9.0
</code></pre>

<p>branches</p>

<pre><code>Project1-crazyidea
</code></pre>

<p>I know, I know, this was stupid.  I should have had a trunk, tags, and branches directory underneath each Project.  However, is there anyway to convert this to git (for a particular project) with history?</p>

<p>Most of the git-svn tutorials assume the standard layout, and do not cover this particular situation.</p>

<p>Thanks!</p>
","0","136562","0"
"1170221","120204","2009-07-23 07:35:32","7","5139","<svn><git><version-control><git-svn>","Squashing or editing some commits before doing git-svn dcommit?","<p>I am working on a project in a subversion repository with a strict check-in policy which includes: Every commit to the trunk has to be reviewed by another developer and this must be mentioned in the commit message.</p>

<p>While working with git-svn I am making many incremental git check-ins that aren't reviewed. Their git commit messages reflect this.</p>

<p>What's the best way in which to use git-svn but follow the rules for the svn repository? Should I just squash all commits into a single svn commit? Can I rewrite the commit messages for each revision with the reviewer information? Could I ""manually"" move each individual change to the git master branch and modify the commit message of each before doing a git-svn dcommit?</p>
","0","120204","0"
"1225725","120204","2009-08-04 04:27:56","6","1395","<windows><git><git-svn><case-insensitive>","How to recover from git-svn putting a different cased dulplicate file in the repository?","<p>Git-svn allowed for a duplicate filename, just with different case, to be added to our subversion repository.</p>

<p>On Windows this meant that subversion could not checkout the file, complaining of a duplicate.</p>

<p>Another developer deleted the incorrectly cased version from the repository. Now when trying to do a git-svn rebase I get a ""could not detach HEAD"" message and a complaint about the file name in question being untracked and needing to be overwritten. Deleting the file makes git-svn complain that the file needs to be updated.</p>

<p>Is the only solution to copy the repository to a machine with a case sensitive filesystem do the rebase then move it back?</p>

<p>I understand that git-svn isn't ready for real world work on Windows but I'd like to recover from this mess it has created.</p>
","0","120204","0"
"1289602","76487","2009-08-17 18:29:32","2","718","<git><git-svn>","Checking out an SVN repository using Git - Fatal: unable to run 'git-svn' error","<p>I'm trying to check out a svn repository using git. </p>

<p>I'm using the following command:</p>

<p>git.exe svn clone ""<a href=""https://svn.outserver.net:8443/svn/someProject"" rel=""nofollow noreferrer"">https://svn.outserver.net:8443/svn/someProject</a>""</p>

<p>I accept the certificate, and the repository transfer starts. After a while, say 15min, I get a ""fatal: unable to run ""git-svn"""". I have tried pulling down multiple times, but I always get this error message. (When it happens .. seems to be completely random). </p>

<p>Also, I cannot continue a transfer after it has failed, instead of have to delete the .git directory and start over. (Or else I get a ""error: More that one value for the key svn-remote.svn.fetch"").</p>

<p>Any suggestions, other then not using https? (I'm assuming that that's the problem). </p>

<p>Also I was unable to determine a solution from the following post: 
<a href=""https://stackoverflow.com/questions/1084816/fatal-unable-to-run-git-svn"">fatal: unable to run &#39;git-svn&#39;</a></p>

<p>Thanks!</p>
","0","76487",""
"1292531","90551","2009-08-18 08:21:51","1","1241","<svn><git><git-svn>","When converting from svn to git using git-svn or svn2git, how can I change the base path of the repository and possibly still keep branches/tags?","<p>I'm moving a project from SVN to git (completely, so no need for git svn's SVN interop features) and I've tried using both <code>git svn</code> and <code>svn2git</code> (<a href=""http://github.com/nirvdrum/svn2git/tree/master"" rel=""nofollow noreferrer"">nirvdrum's fork on github</a>) and one problem I've got is that our repository layout in SVN was like so: </p>

<p><code>example.com/website/trunk|branches|tags/base/code</code>,</p>

<p>and so when I import it into git, the root directory of the repository contains one directory, base (not the real name) and then all the stuff. This is kind of a problem for us, as it adds a few complications.</p>

<p>Is there a good and easy way to change the root of the repository to be base, either during the import or retroactively with git's mad history-changing powers? Otherwise, a directory that shouldn't be the root of the repository and contains other unrelated code will have to be the root of the repository in git, which is strange, and for some reason, with SVN this was not the case (i.e. the root of the repository was base, and the parent directory did not have any svn stuff).</p>

<p>Hopefully this is a quick question that someone can answer easily.</p>

<p>Oh, by the way, I do sort of have branches and tags I want to import, but again these should be rooted at base, not the parent directory of base. It's not a biggie if these aren't possible to be imported like that because they are pretty much useless and the team was kind of half-heartedly using SVN before, but it would be nice to have them.</p>
","0","90551",""
"1299629","3306","2009-08-19 12:32:10","0","713","<git><automation><git-svn><lazy-evaluation><git-rebase>","detect conflicts after git-svn rebase","<p>I'm using so many git-svn repositories (at the same time) that it's becoming a chore to update them all. I'd like to write a script that automates this, so I can just run it every morning while I fetch a coffee.</p>

<p>Basically my workflow is like this</p>

<pre><code>cd ~/module1
git svn fetch
git checkout master
git svn rebase

git checkout topicbranch
git svn rebase

cd ~/module2
git svn fetch
git checkout master
git svn rebase
</code></pre>

<p>I've already automated the <code>git svn fetch</code> part, which can be safely done anytime. But it's not so safe to do git svn rebase automatically as there might be conflicts. </p>

<p>How can a script figure out if there was a conflict after a rebase? Then I could run git rebase --abort, and write a line to a log file so I can review the failures when I get back with my coffee :)</p>
","0","3306",""
"20426269","747050","2013-12-06 14:26:02","0","66","<git><branch><git-svn>","2 svn -> 1 git. How to map two svn repositories into one git with two branches with common origin?","<p>The project I work on was divided on 2 projects one year ago. For this svn repository was copied to another location and work was continued into 2 different svn repositories.</p>

<p>Now I have to merge these 2 projects into one. For these I would like to have a local git repository with 2 branches, each of those mapped to one of svn repositories.
Is it possible?</p>

<p>I know that I can create 2 remotes branches in git, but <strong>how to explain git that these branches have a common origin?</strong></p>
","4","747050","0"
"1356233","30703","2009-08-31 07:25:38","21","14595","<git><git-svn><corruption><msysgit>","fatal: git-write-tree: error building trees","<p>I'm trying to import a large subversion repository into git using git-svn (so that I can work in git but still dcommit to subversion from time to time). After importing more than 4000 revisions I'm now getting the following error whenever I run <code>git svn fetch</code> or <code>git svn rebase</code>, which I don't manage to get rid of:</p>

<pre><code>$ git svn fetch
error: invalid object 100644 1f2....742 for 'src/path/.../file.cs'
fatal: git-write-tree: error building trees
write-tree: command returned error: 128
</code></pre>

<p>What I've tried so far:</p>

<ul>
<li><code>git fsck --full</code> doesn't report anything, neither does <code>git fsck --unreachable</code> or <code>git fsck --no-reflog</code></li>
<li><code>git gc --aggressive</code> doesn't help</li>
<li>moving the single pack file away and reimporting it with <code>git unpack-objects</code> doesn't help</li>
<li><code>git svn reset -rXY</code> with XY a bit lower than the latest imported revsion doesn't seem to help either, neither does manually removing the latest entries from the <code>reflog</code> up to XY.</li>
<li>reboot. Sounds silly, but I did observe some weird issues while importing the first ~4000 revision, as if something was leaking a lot of kernel resources (most likely in windows subsystem), might be related to msys/mingw (or the avira virus scanner, which I disabled for testing).</li>
</ul>

<p>I also didn't find out what error 128 really stands for. Any ideas? Thanks in advance!</p>

<p>Might be related to <a href=""https://stackoverflow.com/questions/338164/fatal-error-unpacking-a-tree-object-during-a-git-svn-fetch"">this question</a> which is about error 128 as well but with different error messages, and without a solution.</p>

<p>msysgit version <code>1.6.4.msysgit.0</code> with bash on xp sp3 </p>
","1","30703","0"
"1425030","76516","2009-09-15 03:47:49","11","3254","<git-svn>","How to update 'git log' after 'git svn fetch' on a bare repo?","<p>I have a bare git-svn repository and did a 'git svn fetch' on it.</p>

<p>Running 'git log' doesn't show the updates. I'm sure there are updates as it displayed the files changed after 'git svn fetch' and 'git svn log' shows them also.</p>

<p>Please note that I purposely made this a bare repo so 'git rebase' will not work. 
What is the appropriate command to get the fetched changes?</p>
","0","76516","0"
"1493052","120398","2009-09-29 14:52:33","4","3346","<authentication><https><git-svn><anonymous>","git-svn anonymous checkout fails with -s","<p>I'm trying to use git to clone an svn repository with std layout (using the <code>-s</code> option). The repository uses <code>https</code> anonymously (the repository is at <a href=""https://secure.simplistix.com/svn/xlwt/"" rel=""nofollow noreferrer"">https://secure.simplistix.com/svn/xlwt/</a>). I can check the repository out fine using <code>svn</code>, but with <code>git-svn</code> I get password prompts and then cannot check out (I don't have an account for this repository):</p>

<pre>
Authentication realm:  Simplistix Subversion Server
Password for 'davidf': 
Authentication realm:  Simplistix Subversion Server
Username: 
Password for '': 
Authentication realm:  Simplistix Subversion Server
Username: 
Password for '': 
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: '/svn/!svn/bc/100/xlwt' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
</pre>

<p>The resulting repository is entirely empty</p>

<p><code>git-svn</code> seems to assume that if the repository starts with <code>https</code>, authentication is required. Is there a way to work around this?</p>
","3","120398","0"
"1494523","28804","2009-09-29 19:41:24","5","537","<git><github><git-svn>","Publishing a ""git svn"" repo","<p>I'm modifying an open-source project that's stored in an SVN repo. Since my changes will likely take a while to complete, I've checked the project out as a Git repo using the git-svn bridge. I don't have access to the project's Subversion repo so I can't push changes back to it, but I'd like to publish my Git repo (on GitHub) so others can track development of my modifications.</p>

<p>To update a ""git svn"" repo, you use <code>git svn rebase</code>, which, as the name suggests, <em>rebases</em> any changes on top of the new changes from the Subversion repo. Of course, it's not a good idea to push any branches you've rebased into a public Git repo, so in regards to a repo cloned from an SVN repository, I have a couple of related questions:</p>

<ol>
<li>Is it safe to publish a rebased branch (using <code>git-svn rebase</code>) to a public repo?</li>
<li>I'm of the understanding that, assuming your master branch in Git is the one onto which you are rebasing changes from the SVN repo, you shouldn't do any real development in that repo; i.e., if you merge changes into master, you should push them into the SVN repo (using <code>git svn dcommit</code>). If you adhere to this policy, is it okay to publish the rebased master branch to a public repo?</li>
</ol>
","0","28804","0"
"1582392","105132","2009-10-17 15:04:13","8","1453","<svn><git><version-control><git-svn>","Start tracking branches/tags on a git-svn repo that was tracking only trunk","<p>I've started tracking an svn repository with git by cloning only its trunk directory. Now I want to track the other stuff, but I don't want to have to clone it again just to use <code>--stdlayout</code> since it takes a long time to download and I already have most of the code locally. How do I change the repository layout to match svn trunk/branches/tags scheme without having to clone again?</p>
","0","105132","0"
"1584675","5264","2009-10-18 11:43:10","17","13679","<svn><git><git-svn>","Converting svn to git, how to get the branches not to be just remote in the svn repo?","<p>I'm quite new to git and I'm trying to move a svn repository to git. I followed the guide below so now I have a git repo on my server<br>
<a href=""http://pauldowman.com/2008/07/26/how-to-convert-from-subversion-to-git/"" rel=""noreferrer"">http://pauldowman.com/2008/07/26/how-to-convert-from-subversion-to-git/</a></p>

<p>So, if I do ""git branch"" git replies ""* master"" and if I do ""git branch -r"" i get a list of all the branches in the svn repository.</p>

<p>My last svn-checkins have been in one of the branches, but when I did the ""git svn clone""-stuff my commits in that branch (they have not been merged into the trunk yet) are visible in my (git) master branch. What am I missing here?</p>

<p>Also, if I on my development machine do ""git clone "" I get the files alright. But if I do ""git branch -r"" I can only see the master branch and not the remote branches"".  </p>

<p>Since we're getting rid of the svn-repo all together I would like to have all the svn branches in the git-repo so that they can be accessed from the developer clients.</p>

<p>Again, I'm not a total git newbie but not far from it. So if there is something fundamental I'm missing here please tell me.</p>

<p><strong>Update</strong><br>
After doing some RTFM (man git-svn) I solved the first problem with branch stuff present in the master branch  </p>

<blockquote>
  <p>reset --hard remotes/trunk</p>
</blockquote>

<p>Now the trunk and the master branch are the same. Now, next is to figure out how to get the branches from the development clients.</p>

<p><strong>Update 2</strong><br>
I got it working by combining the url above and the url that Scott pointed to. So, from the beginning.</p>

<p>I first created an empty repository on the server, they are kept in /usr/local/git-repos on our server:  </p>

<pre><code>server&gt; cd /usr/local/git-repos
server&gt; mkdir my_project.git
server&gt; cd my_project.git
server&gt; git init
</code></pre>

<p>Then i cloned the svn-repository to my dev-machine (note, that on our svn server the ""branches"" dir is called ""branch"" <strong>witout</strong> the 's'):  </p>

<pre><code>dev&gt; git svn clone http://&lt;svn.server&gt;/my_project --no-metadata -A authors.txt -t tags -b branch -T trunk my_project
</code></pre>

<p>Then some clean-up to get the tags and branches in order:</p>

<pre><code>dev&gt; cp -Rf .git/refs/remotes/tags/* .git/refs/tags/
dev&gt; rm -Rf .git/refs/remotes/tags
dev&gt; cp -Rf .git/refs/remotes/* .git/refs/heads/
dev&gt; rm -Rf .git/refs/remotes
</code></pre>

<p>Now add my server as a remote repository:</p>

<pre><code>dev&gt; git remote add origin jorgen@&lt;our_server&gt;:/usr/local/git-repos/my_project.git
</code></pre>

<p>Finally, push all branches and tags up to the server:</p>

<pre><code>dev&gt; git push origin --all
</code></pre>

<p>Phew, now there you have it, now I can get rid of that svn-repo.</p>

<p><strong>Update 3</strong><br>
Checkout <a href=""https://stackoverflow.com/questions/1584675/converting-svn-to-git-how-to-get-the-branches-not-to-be-just-remote-in-the-svn-r/1592090#1592090"">ebneters post</a> below for an easier way of doing it...</p>
","0","5264","0"
"1737275","211391","2009-11-15 11:20:54","24","14029","<git><git-svn>","Can't invoke git-svn from command line","<p>I just installed git on my linux machine (Kubuntu distro) by running the following command:</p>

<pre><code>sudo apt-get install git-core git-doc gitweb git-gui gitk git-email git-svn
</code></pre>

<p>I would like to migrate a project which currently uses subversion to git. But if I run git-svn I get the message : <strong>git-svn: command not found</strong></p>

<p>Any way to fix this?</p>

<p>Thank You.</p>
","0","211391","0"
"1839606","78598","2009-12-03 12:30:31","64","14775","<git><git-svn>","Delete a svn-Branch via git?","<p>I'am using git as scm of choice but have to use a svn-repo. I can create a svn-remote-branch like this:</p>

<pre><code>git svn branch the_branch
</code></pre>

<p>But how can i delete the remote branch?</p>
","0","78598","0"
"20894859","3155548","2014-01-03 01:12:07","4","70","<git><version-control><github><versioning><git-svn>","Correct process for performing multiple git remote pushes","<p>My project consists of:</p>

<ul>
<li>A git repository stored on bitbucket</li>
<li>A local copy</li>
<li>A development copy on a server</li>
</ul>

<p>On my server, I ran the following command to create a bare repo</p>

<pre><code>git init --bare project.git
</code></pre>

<p>To create the ability to push to my server, I ran the following commands out of the repository on my local machine:</p>

<pre><code>git remote add serverrepo username@serverip:/path/to/repo/project.git
git remote set-url serverrepo --push --add username@serverip:/path/to/repo/project.git
</code></pre>

<p>If I try to push to the server by executing </p>

<pre><code>git push serverrepo master
</code></pre>

<p>I get a </p>

<pre><code>fatal: '/path/to/repo/project.git' does not appear to be a git repository
fatal: Could not read from remote repository.
Please make sure you have the correct access rights and the repository exists. 
</code></pre>

<p>I've been searching for days, and I can't seem to figure out what the issue is. Can anybody help me?</p>
","4","3155548","0"
"2014422","119005","2010-01-06 16:28:19","14","6484","<git><version-control><git-svn><hook>","Hooks for git-svn","<p>Can I set hooks for ""pull""/""push""ing from/to a <code>git-svn</code> managed repository?</p>

<p>The situation is that I have a project host on <em>Google Code</em>, and use git to manage the local working copy. I want to set some <em>hooks</em> so that when checking in/out data from/to the SVN repository with <code>git svn fetch</code> and <code>git svn dcommit</code>, I can do some modification to the commit. Since I do not host the SVN repository, I can't set hooks on the server side.</p>

<p>Is there any hook I could use? Or is there a way to ""mark"" an ordinary branch, so that <code>git pull</code> and <code>git push</code> on that branch will check in/out from/to a SVN repository instead, therefore the normal git hooks could be used?</p>

<p>Thanks in advance.</p>
","0","119005","0"
"2111331","255997","2010-01-21 17:24:05","0","172","<svn><git><merge><branch><git-svn>","Merging existing git branch with formerly unknown SVN","<p>My project I am working on is version controlled under SVN. I had to do a large number of refactorings. For this purpose I took my workspace and created a new git repository. Afterwards I made the refactorings and committed to my local git repository as often as possible, made branches etc..</p>

<p>Meanwhile someone made commits to the SVN. Now I would like to commit my changes also into the SVN. 
Adding the SVN via git-svn clone doesnt help, because the clone and the existing branches cant be merged (missing common ancestor) even if the tracked files are the same.</p>

<p>Is there a possibility to add a SVN link and/or create this ancestor?</p>
","1","255997",""
"21039423","2096566","2014-01-10 08:34:27","0","385","<git><github><git-svn>","Migration from svn to git with change in folder structure","<p>We are in process of migrating from svn to git and started with small projects. We are using <code>git svn clone</code> for migration. For a while, we would like to have both svn &amp; git. We use <code>git svn rebase</code> to get latest code changes from subversion. In one of our svn project, we would like to clone into a different directory/folder structure in git. I tried doing this</p>

<p>1) First cloned the entire project from svn, and had put into our github.<br>
2) Made my desired folder structure in git, by moving folders around.<br>
3) Re-based from SVN. When I did this, along with existing new folder structure, older folder structure restored which  don`t want to have.  </p>

<p>Prior to this, I tried cloning each svn folder, but given up thought as each svn clone leading to create a new git repo. Can anybody help with this? Thanks!</p>

<p><strong>P.S</strong>: The major reason we want to change folder structure is, we have ant as a build tool until now where we have a non-conventional folder structure. We are migrating to gradle and would like to have a conventional folder structure</p>
","2","2096566","0"
"21040553","324969","2014-01-10 09:31:50","29","38291","<svn><passwords><git-svn>","git svn clone --password pass gives “Unknown option: password”","<p>I want to clone a svn repository using git, with a username and password given on the command-line.</p>

<p>I can write:</p>

<pre><code>svn checkout --username user --password pass svn://server/repo
</code></pre>

<p>But I can't use <code>--password</code> with <code>git svn clone</code>:</p>

<pre><code>git svn clone --username user --password pass svn://server/repo
Unknown option: password
</code></pre>

<p><strong>How can I give the password to <code>git svn clone</code> on the command-line?</strong></p>

<p><strong>Alternatively, is there a kind of <code>--svn-options</code> switch to git-svn?</strong></p>

<p>P.-S. Note that I need to specify it on the command-line, because there are multiple repos on this server with different user/pass, and svn stupidly assumes that all repos use the same username/password, so half of the time I get <code>svn: Authorization failed</code>, without it asking for the password, even if I use <code>--username</code> (it seems to ask for the password sometimes, but it's not robust enough to be used in a script).</p>
","2","324969","0"
"21051874","1302408","2014-01-10 18:36:58","23","9148","<git><perl><dll><git-svn><msysgit>","git svn fetch/rebase error: unable to remap msys-ssl-0.9.8.dll to same address as parent -- 0x678F0000","<p>I recently started getting the following git error on <code>git svn fetch</code> or <code>git svn rebase</code>, but other local git commands are working fine:</p>

<p><strong>Following is the detailed error message:</strong></p>

<pre><code>C:\Git\bin\perl.exe: ** unable to remap C:\Git\bin\msys-ssl-0.9.8.dll to same address as parent -- 0x678F0000
      0 [main] perl 1300 sync_with_child: child 7092(0x324) died before initialization with status code 0x1
    567 [main] perl 1300 sync_with_child: *** child state child loading dlls
</code></pre>

<p><strong>Environment:</strong></p>

<ul>
<li>git version 1.8.5.2.msysgit.0 </li>
<li>OS: Windows7 64 bit </li>
<li>SVN: 1.8.4-SlikSvn-1.8.4-X64 </li>
<li>Cygwin: I don't have cygwin installed on my machine</li>
<li>Path: C:\Program Files (x86)\RSA SecurID Token Common;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Program Files (x86)\Enterprise Vault\EVClient\;C:\Program Files (x86)\1E\SMSNomad\;C:\Pro
gram Files (x86)\WinMerge;C:\work\tools\SlikSvn\bin;C:\Program Files\TortoiseSVN\bin;</li>
</ul>

<p>I have tried multiple solutions including upgrading mysysgit from 1.8.2 to latest 1.8.5.2 but no luck yet.</p>
","4","1302408","0"
"2127429","23691","2010-01-24 14:52:03","18","4004","<git><git-svn>","Can I make git-svn handle svn:eol-style?","<p>A lot of svn repositories require new files to have an svn:eol-style attribute. Is there any way to ensure that this happens with git-svn ?</p>
","0","23691","0"
"2221623","210620","2010-02-08 12:51:44","0","134","<svn><apache><repository><git-svn><live-preview>","Is there a svn or git solution that enables live preview","<p>I would like to know if there is a solution (open source project or webservice) available that offers a svn or git repository together with an apache server and database. I am searching for such a solution because I would like to get the benefits of developing with a subversion system. On the other side I need a preview of the final result to see what the code looks like on different browsers.</p>

<p>Hope anybody can help me!
regards,
Markus</p>
","0","210620",""
"2310080","55562","2010-02-22 10:01:42","2","969","<svn><git><git-svn><commit><git-amend>","How to remove a file from a git commit to push to svn","<p>I replaced a folder and all its contents with a symlink. That is removed the folder and added a symlink, in a single git commit.</p>

<p>Git commit happened normally. However when I try to push to the upstream svn, it complains that the file exists.</p>

<p>Now, how do I amend my commit to not contain the git add of the new symlink and make it a new commit, so SVN can understand to remove and replace the folder; or can I use the svn commit force via git amend.</p>

<p>This is the error I get: </p>

<pre><code>RA layer file already exists: File '/svn/uswaretech_zobpress/site_media/frontend' already exists at /usr/lib/git-core/git-svn line 508
</code></pre>
","0","55562","0"
"2314019","55562","2010-02-22 20:44:45","1","300","<svn><git><version-control><git-svn>","SVN update and commit problem used with git-svn","<p>I can't svn up or commit. :(</p>

<p>There is a svn centrally and I use git locally using git-svn.</p>

<p>Basically, somehow, I added a folder that had .svn folders into the git and committed it to svn. Both git and central svn happily committed the .svn as the content folder, without complaining.</p>

<p>Now, I can't svn up to the existing folder as, once a folder is created, .svn is automatically added and it complains, ""there is an unversioned .svn within the folder"". For the same reason I cannot even clone the svn repo again. (The clone stops at that particular point, infinitely.)</p>

<p>I can't svn commit because the working copy within .svn (content folder) doesn't exist.</p>

<p>Because <code>git-svn</code> was able to put the .svn inside the svn, it should be able to remove it, I thought. I earlier renamed this folder and committed, so now the git thinks there is no such folder, whereas the svn shows 2 folders one of them with the old .svn folders. So, git cannot exactly delete this folder either.</p>

<p>What is the way to remove the .svn out of the central svn repo.</p>

<p>I tried to reverse merge the commit that introduced .svn within the svn. The local copies get updated, but the svn commit reports exactly the same problem.</p>
","0","55562",""
"2327868","55562","2010-02-24 17:03:32","0","958","<svn><git><version-control><git-svn>","Working with git-svn: Proper workfllow","<p>I created a topic branch from the master; made some commits.</p>

<p>Then checked out the master; rebased it on the svn and merged the topic branch.</p>

<p>There were no commits on the master itself, so the merge was fast-forward.</p>

<p>Now, when I try to <code>svn dcommit</code> it gives me merge conflicts! wtf? Clearly there is a linear history on the master.</p>

<p>The workflow I follow is:</p>

<ul>
<li>create topic branches from the master,</li>
<li>svn rebase the master,</li>
<li>(generally) fast-forward merge the topic branches,</li>
<li>git svn dcommit.</li>
</ul>

<p>Is there a better way to deal with git-svn. I am not sure, I am using it rightly to create any distinctive advantage over using svn alone.</p>
","0","55562","0"
"2327917","55562","2010-02-24 17:10:20","5","4385","<svn><git><version-control><git-svn>","git svn windows linux whitespace problems","<p>I use git (with git-svn) on linux and a colleague uses svn on windows.</p>

<p>So many times, git reports whitespace issues. In fact it fails to commit a linear history because of these problems and creates merge conflicts.</p>

<p>What is the simplest way to configure svn/git and git-svn on windows and linux so that there are now whitespace issues?</p>

<p>Following is a reported merge conflict, in a linear history on master:</p>

<pre><code>error: patch failed: frontend/templates/frontend/base.html:38
error: frontend/templates/frontend/base.html: patch does not apply
error: patch failed: frontend/templates/frontend/footer.html:1
error: frontend/templates/frontend/footer.html: patch does not apply
error: patch failed: frontend/templates/frontend/index.html:1
error: frontend/templates/frontend/index.html: patch does not apply
Using index info to reconstruct a base tree...
&lt;stdin&gt;:15: trailing whitespace.

&lt;stdin&gt;:20: trailing whitespace.
          &lt;a href=""{% url frontend_index %}""&gt;
&lt;stdin&gt;:22: trailing whitespace.
          &lt;/a&gt;
&lt;stdin&gt;:24: trailing whitespace.
        &lt;span class=""companyname""&gt;
&lt;stdin&gt;:25: trailing whitespace.
          &lt;a href=""{% url frontend_index %}""&gt;
warning: squelched 74 whitespace errors
warning: 79 lines add whitespace errors.
Falling back to patching base and 3-way merge...
Auto-merging frontend/templates/frontend/base.html
CONFLICT (content): Merge conflict in frontend/templates/frontend/base.html
Auto-merging frontend/templates/frontend/index.html
CONFLICT (content): Merge conflict in frontend/templates/frontend/index.html
Failed to merge in the changes.
Patch failed at 0001 template changes

When you have resolved this problem run ""git rebase --continue"".
If you would prefer to skip this patch, instead run ""git rebase --skip"".
To restore the original branch and stop rebasing run ""git rebase --abort"".
</code></pre>

<p>How do I solve the whitespace issues?</p>
","0","55562","0"
"2426654","2030","2010-03-11 16:20:31","22","7886","<git-svn>","git svn status - showing changes that are not committed to svn","<p>I'm looking for a command in git-svn that will show me the changes I have committed to my git repository but that aren't yet committed to the central svn repository.  I'm looking for something that works like svn status, but I'm using git-svn, and unfortunately, <code>git svn status</code> is not a valid command.</p>

<p>I tried <code>git status</code> but it does not solve this problem, as it shows changes that haven't been committed to my local git repo.</p>

<p>I also tried <code>git svn dcommit --dry-run</code>, but it doesn't tell me which files are ready to be dcommitted - it only shows the repository URL.</p>
","0","2030","0"
"2537901","98810","2010-03-29 12:44:29","4","1019","<svn><git><git-svn><rebase><git-rebase>","How to resync git with svn tree?","<p><strong>Background</strong></p>

<p>I'm adding some features to a project that uses subversion - I'm using git-svn to clone it to my local repository, git-svn rebase to keep with the recent changes in the official trunk and keep the history linear. </p>

<p>Recently I've forgot myself and made a few merges which messed my rebasing - long story short I needed to spend some time with cherry-pick to make the history linear again. After that 1 rebase went fine, but now trying to make git-svn rebase shows conflict between subversion commits from 2008 (about 700 commits back) even though history seems to be linear.</p>

<p><strong>Question</strong></p>

<ol>
<li>Is there a way to rebuild / resync my git repository with svn trunk?</li>
<li>If I clone my git repository on a different computer (without .git/svn folder) - is it possible to rebase it with the svn, knowing the repo url and last rebased revision?</li>
</ol>
","2","98810",""
"2538533","115462","2010-03-29 14:16:36","5","1814","<git><branch><git-svn>","create a new svn branch with git-svn","<p>While working with git-svn, and a 'typical' svn repo  /trunk, /branches/..., /tags/...
How do I push a local branch to a new branch inside of /branches ?</p>
","0","115462","0"
"40419989","1709708","2016-11-04 10:10:07","1","2412","<git><branch><git-svn>","How to git clone an SVN repository where all branches are located in root?","<p>My SVN structure is like this:</p>

<pre><code>/
|-- Branch1
|-- Branch2
|-- Branch3
...
</code></pre>

<p>How can I clone this into a git repository preserving the branches (i.e. not flat history)?</p>

<p>Bonus question: How to clone only a subset of the SVN branches into a new git repository?</p>
","2","1709708","0"
"40496891","263306","2016-11-08 21:39:38","3","205","<git><git-svn>","last_rev is higher? with git svn rebase","<p>I use </p>

<pre><code>git svn fetch
git svn rebase
git filter-branch -f --tag-name-filter cat --prune-empty -- --all
git push origin master
</code></pre>

<p>to maintain a git mirror of an svn repo.</p>

<p>The mirror is one way so nothing should flow back from git into svn.</p>

<p>Recently I started seeing the following:</p>

<pre><code>Partial-rebuilding .git/svn/refs/remotes/git-svn/.rev_map.7211e2ad-34f8-b74a-be6e-23ccad239578 ...
Currently at 83725 = f638db2f388f295dc4d7da0df9ffe8cfb74a1dd1
last_rev is higher!: 83725 &gt;= 83699 at /usr/libexec/git-core/git-svn line 570.

Rebuilding .git/svn/refs/remotes/git-svn/.rev_map.7211e2ad-34f8-b74a-be6e-23ccad239578 ...
r30469 = 30ef2b7272b91dd6d436e46f1c8447818a52dbfb
r30479 = fc195960e09726deef537e942bc1880cffb44525
r30592 = 1071bbb7f352d21f1ed76c48645617b5913c6abc
...
...
r83699 = 841e6c8de9d649be040b3ea9e97ea145c40e083f
r83722 = 0c93f70e36fe9928f49a207d9a73cef5dcb0e192
r83725 = 7b9bab1644d3fa69999169fd0b7909b4d3c5d6e4
Done rebuilding .git/svn/refs/remotes/git-svn/.rev_map.7211e2ad-34f8-b74a-be6e-23ccad239578
    A           somepath/somefile.xml
r83739 = 2e7078cbad311f57e8648031d3454525076f049a (refs/remotes/git-svn)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/git-svn.
Rewrite 5b462f2a2cc89120068fd6d17fdfe5775461fa1e (2785/2971) (2788 seconds passed, remaining 186 predicted)
WARNING: Ref 'refs/heads/master' is unchanged
WARNING: Ref 'refs/remotes/git-svn' is unchanged
WARNING: Ref 'refs/remotes/origin/master' is unchanged
Counting objects: 9, done.
Delta compression using up to 16 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 1.51 KiB | 0 bytes/s, done.
Total 9 (delta 6), reused 0 (delta 0)
To git@github.company.com:uname/repo.git
   7b9bab1..2e7078c  master -&gt; master
Current branch master is up to date.
</code></pre>

<p>What does this mean?</p>

<p>Did someone monkey with the svn changelog somewhere?</p>

<p>Should I start the mirror over from scratch?</p>

<p>or</p>

<p>Is there a way to make the current mirror state happy again?</p>

<p>Is my script for maintaining the mirror flawed in some way?</p>
","3","263306","0"
"40497279","542270","2016-11-08 22:08:34","0","1020","<git><svn><git-svn>","What is git checking through while cloning svn repo?","<p><a href=""https://stackoverflow.com/a/3972103/542270"">Here</a> is a short manual on rewriting SVN repo to git. After executing the this command:</p>

<pre><code>git svn clone --stdlayout --no-metadata --authors-file=users.txt svn://hostname/path dest-dir
</code></pre>

<p>the following messages can be seen in console:</p>

<pre><code>This may take a while on large repositories
Checked through r89900
</code></pre>

<p>What is git checking through exactly? Is it possible to count it somehow?</p>
","0","542270","0"
"609872","73593","2009-03-04 09:36:46","2","2065","<git><git-svn>","How can I use two SVN projects and corresponding git-svn branches with a single working directory?","<p>I'm relatively new to Git, but I want to give it a try (vs SVN and Bazaar).</p>

<p>Can anyone recommend me a workflow for a situation similar to the following:</p>

<ul>
<li>1 SVN repo, with several projects</li>
<li>1 working copy ""src""</li>
</ul>

<p>The ideea is that in ""src"" I need to checkout project A or sometimes project B. Both projects have several branches.</p>

<p>For now, I have made 2 git clones of the SVN repo, one for each project. (I would have preferred --bare repos, but it does not work with <code>git svn clone</code>)</p>

<p>Then, I made a git repo in ""src"", and <code>git remote add projA ..a_repo_git</code>, ""<code>git remote add projB ..b_repo_git</code>"".</p>

<p>Now, I can see both of them from ""src"" using ""git remote"", and I can see their branches with ""git remote show projA""</p>

<p>And now the trouble.. </p>

<ul>
<li>How can I get in ""src"" any of the branches in projA/projB ?</li>
<li>How can I modify them, and then be able to push them back (first to the git_repos, or directly to the SVN repo)?</li>
<li>Is this ""workflow"" ok, or do you have a better idea?</li>
</ul>

<p>I did try in src: <code>git checkout --track -b work_branch projA branch_in_A</code>
and after some fiddleing with ""fetch"" I managed to get the things. But then, I had problems pushing it back to the <code>a_repo_git</code>, and then to SVN. It was mostly trial and error.</p>

<p>I have to admit, I still have problems with remote branches! (and I get lost when I have to use ""<code>origin local_branch:origin_branch</code>"" or ""<code>origin origin_branch:local_branch</code>"", or ""<code>origin origin_branch</code>"" or ""<code>origin/origin_branch</code>""! Back to the Git manual for some more reading.)</p>
","2","73593","0"
"57886791","2952454","2019-09-11 10:06:36","0","99","<git><svn><version-control><git-svn>","Having issues with git svn clone a non-standard repository","<h2>Background</h2>

<p>I am working with a huge SVN repository (full clone is ~20Gb), it has the following top-level strucuture:</p>

<pre><code>stuff
stuff/branches
stuff/tags
stuff/trunk
stuff/archive
stuff/build
stuff/machines
stuff/releases
</code></pre>

<p>First point: I have no clue what stuff is contained in the [archive, machines, build &amp; releases] directories and to be honest - I don't really care - I just know I don't need them stored locally to do development work.</p>

<p>Second point: Other than the silly directories for storing artifacts, on the surface this seems like a standard SVN layout. However, when you dig deeper, it's bizzare as the trunk directory contains multiple projects, for example:</p>

<pre><code>stuff/trunk/mars
stuff/trunk/earth
stuff/trunk/venus
stuff/trunk/saturn
stuff/trunk/pluto
...
</code></pre>

<p>And the branches folder has been organised as described:</p>

<pre><code>stuff/branches/&lt;project&gt;-&lt;name of project branch&gt;
</code></pre>

<p>Where each branch has been branched from one of the projects in:</p>

<pre><code>stuff/trunk/&lt;project&gt;
</code></pre>

<h2>What am I trying to achieve?</h2>

<p>I only want to clone stuff from the pluto project (~20Mb). For example  when doing this in SVN, I would issue the following command:</p>

<pre><code>svn checkout https://svn.example.com/svn/stuff/trunk/pluto
...
Checked out revision 3505
</code></pre>

<p>My issue is that I am unable to replicate this using git-svn. I've tried numerous times with different options to ""git svn clone"" and every time I end up cloning the entire repo (~20Gb) or nothing. Surely it shouldn't be this difficult so I must be doing something wrong.</p>

<p>If I'm able to git-svn clone just the pluto project, when I create a new branch with git-svn I also want it to create me an SVN branch, for example, I want the following commands to be equivalent:</p>

<pre><code>svn copy https://svn.example.com/svn/stuff/trunk/pluto \
    https://svn.example.com/svn/stuff/branches/pluto-1234 \
    -m ""Making branch pluto-1234 from /stuff/trunk/pluto""

git svn branch -m \
    ""Making branch pluto-1234 from /stuff/trunk/pluto"" \
    pluto-1234
</code></pre>

<p>So that a new SVN branch is created at the following location:</p>

<pre><code>stuff/branches/pluto-1234
</code></pre>
","0","2952454",""
"728931","26366","2009-04-08 07:49:23","22","16012","<svn><git><git-svn>","How to switch svn branches using git-svn?","<h3>Duplicate</h3>

<blockquote>
  <p><a href=""https://stackoverflow.com/questions/192736/how-do-i-make-git-svn-use-a-particular-svn-branch-as-the-remote-repository"">How do I make git-svn use a particular svn branch as the remote repository?</a></p>
</blockquote>

<p>I am using git-svn to track development by someone else on svn. I'm trying to figure out how to use gti-svn to switch from one svn branch to another. All the examples I have able to find talk about using svn switch as method to switch location instead of actual branches. </p>

<p>Essentially, I would like to start pulling from /svn/branch/1.3 instead of /svn/branch/1.2
using svn fetch.</p>
","3","26366","0"
"861995","35364","2009-05-14 07:25:04","176","86408","<git><merge><git-svn><line-endings><eol>","Is it possible for git-merge to ignore line-ending differences?","<p>Is it possible for <code>git merge</code> to ignore line-ending differences?</p>

<p>Maybe I'm asking the wrong question ... but:</p>

<p>I tried uisng <code>config.crlf input</code> but things got a bit messy and out of control, specially when I applied it <em>after the fact</em>.</p>

<p>For one thing, applying this config after the fact doesn't seem to affect files that were committed to the repository before applying this option. Another thing is that suddenly all commits now result in lots of annoying warning messages about CRLF being converted to LF.</p>

<p>To be honest, I don't really care what line-ending is used, I personally prefer the Unix style <code>\n</code>, but whatever. All I care about, is for <code>git merge</code> to be a bit smarter and ignore the differences in line-endings.</p>

<p>Sometimes I have two identical files, but git would mark them as being in conflict (and the conflict is the <em>whole</em> file) simply because they use a different line ending character.</p>

<h3>Update:</h3>

<p>I found out that <code>git diff</code> accepts a <code>--ignore-space-at-eol</code> option, would it be possible to let <code>git merge</code> use this option as well?</p>
","6","35364","0"
"964802","82673","2009-06-08 13:02:20","2","1809","<svn><git><git-svn>","git-svn: revert a commit from a not master branch","<p>Well.. I did some headless committing and merging and now I am deep in the ....</p>

<p>Here's what I did:</p>

<ol>
<li>fetched trunk with git-svn</li>
<li>branched off work</li>
<li>git commit ed stuff to work</li>
<li>git svn dcommit ted the cnanges to svn, (yes, this i where it gets interesting)</li>
<li>git checkout master</li>
<li>git merge work</li>
</ol>

<p>In this situation, git doesn't seem to understand that the changes to svn 
are the same as in itself. It is now up to date, but when I try to </p>

<pre><code>git svn rebase master
</code></pre>

<p>I get Invalid upstream</p>
","2","82673","0"
"1065539","42595","2009-06-30 19:27:34","4","3792","<svn><git><git-svn>","git svn clone not checking out all directories","<p>I have a project in SVN and I tried to clone it with git-svn. I followed the example in the <a href=""http://git-scm.com/docs/git-svn"" rel=""nofollow noreferrer"">git-svn docs</a>.</p>

<pre><code>git svn clone  svn+ssh://host/path/trunk  project_name
</code></pre>

<p>The command completed with no error msg, but the cloned project does not contain all the directories as the project in SVN.</p>

<p>At the top level, my SVN project has...</p>

<pre><code>$ svn ls  svn+ssh://host/path/trunk
README
Rakefile
app/
config/
db/
doc/
lib/
log/
public/
script/
test/
tmp/
vendor/
</code></pre>

<p>After cloning, locally I have...</p>

<pre><code>README
Rakefile
app
config
doc
public
script
test
</code></pre>

<p>There are also subdirs missing.</p>

<hr>

<p>UPDATE</p>

<p>Experimentally cloned another project on same host. Seemed to work fine. What's special about this one? Nothing I can think of except that I just created it and imported it into SVN before cloning. Would that make a difference?</p>

<hr>

<p>Tried creating a completely new project, importing to SVN and cloning. Got same result, same missing dirs.</p>
","0","42595",""
"1066914","120204","2009-07-01 01:35:12","10","4474","<svn><git><git-svn><newline><eol>","Can git-svn be made to handle CRLF like native subversion clients?","<p>I have a subversion repository hosted on Linux but only ever accessed via windows clients as it's for the source of a large Windows application.</p>

<p>It would be awesome if I could work on this repository using git-svn (provided by msysgit).</p>

<p>I'm having a heck of a time trying to get the repository to not get itself in a jam over the windows style line endings.</p>

<p>After <code>svn clone</code> a checkout of the git repository with: </p>

<ul>
<li><code>core.autocrlf = true</code> shows modifications to any file which actually does use <code>LF</code> in the repository.</li>
<li><code>core.autocrlf = input</code> shows modifications to any file which actually does use <code>LF</code> in the repository.</li>
<li><code>core.autocrlf = false</code> shows modifications to everything.</li>
</ul>

<p>What's the best option here? Should I use <code>core.autocrlf = true</code> and commit the <code>LF</code> to <code>CRLF</code> changes for affected files?</p>

<p>I'm very close to throwing in the towel and just putting my Subversion working copy into a git repository. This would be a poor solution but would at least allow local branches and stashes. It will obviously become a huge pain to keep adding files when they are added to subversion.</p>

<p><strong>EDIT:</strong> For those who are interested. <code>git-svn</code> is a royal pain if you are on Windows. hasen j's answer below is probably the right one but I can't follow his advice without attracting the ire of the other developers in my team.</p>

<p>I'm essentially abandoning this question since it isn't going to lead to a reasonable outcome. Hopefully the next Google Summer of Code will attract someone who wants to pickup their ""Proper git-svn support on Windows"" project. See <a href=""http://git.or.cz/gitwiki/SoC2009Ideas#Propergit-svnsupportonWindows"" rel=""noreferrer"">http://git.or.cz/gitwiki/SoC2009Ideas#Propergit-svnsupportonWindows</a></p>
","1","120204","0"
"20193003","899092","2013-11-25 12:23:46","0","892","<git><svn><git-svn>","git clone svn to split folders into separate git repositories","<p>I have some old dump of a SVN repo with a straightforward structure:</p>

<pre><code>trunk/src/
  folder1/
  folder2/
  folder3/
  ...
</code></pre>

<p>I know that each <code>folder</code> is in fact a separate project, so I would like to clone this svn repo into git but splitting each <code>folder</code> into separate git repository and preserving history. How can I do that?</p>

<p>I don't need magic loop-scripts. I can name each folder manually. I would only like to know how to clone specific folder from svn into new git repository preserving history.</p>

<p><strong>[Update]</strong></p>

<p>I have only a dump of SVN repo, no SVN server. So I cant do</p>

<p><code>git svn clone svn://path/to/my/trunk/src/folder1</code></p>

<p>Instead I'm using</p>

<p><code>git svn clone file://path/to/my/dump</code></p>

<p><strong>[What I tried]</strong></p>

<p>I've used <code>svnadmin</code> to create a svn dump file, then used <code>svndumpfilter</code> to filter out only folders that I need. I managed to split the original svn dump into separate files, one for each <code>folder</code>.</p>

<pre><code>svnadmin dump /svn/old_repos &gt; ./repository.dump
svndumpfilter include /trunk/scr/folder1
      --drop-empty-revs
      --renumber-revs
      --preserve-revprops
    &lt; ./repository.dump &gt; ./folder1.dump
</code></pre>

<p>I tried to use <code>git svn clone file:///path/to/my/folder1.dump</code> but I got this error:</p>

<pre><code>Couldn't open a repository:
    Unable to open an ra_local session to URL:
        Unable to open repository `file://path/to/my/filtered/dump/folder1.dump`
           at /usr/lib/git-core/git-svn line 2143
</code></pre>

<p>This looks like the dump file is corrupted. I tried <code>svndump load /repos/folder1 &lt; /path/to/my/folder1.dump</code> but I got another error, this time from svnadmin:</p>

<pre><code>svnadmin: File not found: transaction `0-0`, path `trunk/src/folder1
</code></pre>

<p>Any ideas?</p>
","3","899092",""
"1129688","131667","2009-07-15 06:17:36","27","10597","<git><version-control><git-svn>","git svn workflow - feature branches and merge","<p>I am using git-svn with the following workflow now</p>

<pre><code>git clone &lt;SVN TRUNK URL&gt; #done once
</code></pre>

<p>subsequently when I work on a feature</p>

<pre><code>git branch featureZ
git checkout featureZ
#make edits for featureZ
git commit

git checkout master
git svn rebase # fetch changes from server

git checkout featureZ #go back to branch
#git merge master 
git rebase master #get the changes from SVN-&gt;master onto the branch now. Optional if I want the branch to be current. (EDITED: Got from the answer given below)

#make edits for featureZ
git commit #featureZ completed

git checkout master
git merge featureZ #getting featureZ onto master. Prepare to send to SVN

git svn dcommit #push featureZ back to SVN
</code></pre>

<p>Now some points of note when I do git merge of feature onto master, all the individual commits in featureZ branch gets merged as one which is fine with me.</p>

<p>The commit message is replaced as ""merged with featureZ"". That can be fixed with <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-fmt-merge-msg.html"" rel=""noreferrer"">merge fmt msg</a>.</p>

<p>Now my question is
Is there anything that can go wrong with this workflow or needs to be taken care of. I read in <a href=""http://git-scm.com/docs/git-svn"" rel=""noreferrer"">git-svn manual</a> that merge should not be done when working with git svn. Is what I am doing in my workflow is what that they are referring to? if so what kind of problem will it cause? One thing is I don't want to do something that messes with the SVN mainline.</p>
","1","131667","0"
"1251895","22383","2009-08-09 18:15:51","4","2618","<git><git-svn>","Can't commit a delete using git-svn: Your file or directory is probably out of date","<p>I've been looking over <a href=""https://stackoverflow.com/questions/629048/git-svn-dcommit-error-restart-the-commit"">this</a> post, but still can't figure out how to solve my particular issue.</p>

<p>I'm using git-svn locally against a svn repository.  I usually do the following:</p>

<ol>
<li>git svn rebase (to get the latest from the repo).</li>
<li>git checkout local-dev</li>
<li>git merge master (to merge this into my local branch)</li>
<li>make changes, committing locally as I go</li>
<li>git checkout master</li>
<li>git merge local-dev </li>
<li>git svn dcommit (to sent it all back upstream)</li>
</ol>

<p>Usually works fine, until I tried to commit my latest batch from the merged master back to the repository:</p>

<blockquote>
  <p>$ git svn dcommit</p>
  
  <p>Committing to <a href=""http://mysvnrepository"" rel=""nofollow noreferrer"">http://mysvnrepository</a>    ...
         D       PROJECT/Content/js/dp/jquery-1.3.2.js</p>
  
  <p>Merge conflict during commit: Your file or directory 'PROJECT/Content/js/dp' is probably 
  out-of-date: resource out of date; try updating at C:\Program Files\Git/ libexec/git-core/git-svn line 508</p>
</blockquote>

<p>I deleted this ""/dp"" folder sometime in my operations and git appeared to handle everything fine, but now it won't send to to svn.  </p>

<p>Any suggestions on how to fix this?</p>
","0","22383","0"
"1302287","13989","2009-08-19 19:56:24","0","434","<svn><git><migration><git-svn><svk>","How to migrate an svk repository to git, with history?","<p>I have an svk repo that was full of mirrors and locals etc, I cleaned it up in steps, because I'm trying to get rid of it, and evaluating what should stay. There's only one project there that I want to keep working on, and for that I want to migrate it to git so I can be done with svk for good.</p>

<p>It's located in <code>//local/foo</code>, it has no svn repository.</p>

<p>So, what I think I want to do is create a local empty svn repository and push the changes from svk to it, and then use <code>git svn</code> to clone it.</p>

<p>But it's been so long since I last used <code>svk</code> I have no longer any idea how to go about that.</p>

<p>If one svk user would be so kind to point me the way…</p>

<p><a href=""http://svk.bestpractical.com/view/LocalSVKtoRemoteSVNHowto"" rel=""nofollow noreferrer"">This</a> is almost helpful, but it doesn't commit with history to svn, it just does a single commit.</p>
","0","13989",""
"1310572","6258","2009-08-21 07:50:18","6","9343","<svn><git><git-svn>","What are pros and cons of using git-svn?","<p>I'm tired of subversion, it keeps corrupting its own repository. As I was for a long time curios of git and always wanted to try it out, I've decided to give it a go and use git-svn. But reading through documentation I realized that you can't use much of git awesomeness with it. You can't use git-pull, it is not recommended to create local branches and there are tons of limitations. Looks like it is not much better than using subversion directly. Or is it? What pros and cons git-svn has over just plain svn?</p>

<p><strong>PS</strong>. I'm sorry but I'm not asking you how to fix my subversion repository, I don't care that much. Deleting all .svn and checkout in the same directory overnight works fine. I just was wondering what benefits could git-svn bring to the table.</p>
","10","6258","0"
"1312990","125440","2009-08-21 16:36:52","0","1081","<git><git-svn><macports>","How to check if I have 'svn' bridge install in my git","<p>I have 'git' install, but I am not sure if I have the 'svn' bridge install as well (""the part to run 'git svn').</p>

<p>So I tried to do <code>sudo port install git-core +svn</code> on Mac.
But I end up getting:</p>

<pre><code>---&gt;  Activating git-core @1.6.3.3_0+doc+svn
Error: Target org.macports.activate returned: Image error: Another version of this port   (git-core @1.6.3.3_0+bash_completion+doc+svn) is already active.
Error: Status 1 encountered during processing.
</code></pre>

<p>So how can I check if I have 'svn' bridge installed in my git?</p>

<p>Thank you.</p>
","1","125440",""
"1315016","128983","2009-08-22 03:12:05","2","300","<git><git-svn>","Remove a directory from git locally","<p>I am creating my working directory using this git command:
    git clone git://git.webkit.org/WebKit.git WebKit</p>

<p>Is it possible to remove a directory and its subdirectories locally and yet it won't screw up my future 'git svn rebase' when I try to sync up to a newer version of webkit?</p>

<p>Thank you.</p>
","1","128983","0"
"39600121","628012","2016-09-20 17:15:02","1","49","<clone><git-svn><offline>","git-svn on two isolated machines","<p>I have trouble with my development flow..</p>

<p>I have two machines, F and O, both are offline and isolated. F is the main development machine and is connected to and SVN repo. O is also a development machine but without any form of version control. Code developed in F is tested in F then copied in O, tested again and modified, then again copied in F and committed to SVN.</p>

<p>This is done every week. It's tedious, prone to errors, and I lose every edit done on O.</p>

<p>My idea is perform git-svn on F, git clone that repo in a bare repo on usb, and use this bare repo to track changes on O, then pull from this updated bare on F and dcommit con the SVN.</p>

<p>I know it's not good but I have no better idea... Any suggestions?</p>
","3","628012","0"
"1519154","139990","2009-10-05 09:58:02","1","538","<svn><git><git-svn>","remove data from a svn synchronized git repository","<p>we have a fairly huge svn repository that i access using git. so far everything was working fine. now someone accidentally added some huge chunks of binary data to the svn repository. (hundreds of MB!)
of course git also sucked in those chunks (using git-svn).</p>

<p>Is there a way to <strong>selectively remove some files from git</strong> <em>without</em> disturbing the synchronization with the svn repository?</p>
","0","139990",""
"1669419","201991","2009-11-03 18:55:37","11","697","<svn><git><git-svn>","Questions on workflow for a team using a git-svn repo","<p>I've bee reading up on git and git-svn. I'm pretty new to git but I've been able to create some basic repos. However, I'm a bit confused on how the workflow would go for git-svn being used by a team. The goal is to convert svn to git for branching and sharing purposes, then commit back to the main svn repo when ready to push to production. Here are my questions:</p>

<p>Should each member of the team create a git repo from the svn repo? Would this approach work when merging back to svn / pulling from each other?</p>

<p>-or-</p>

<p>Should one git repo be created from svn, then that repo is pushed 'publicly' for team members to clone? Then would changes be pulled back to the original git repo for rebasing and pushing to svn?</p>

<p>-or-</p>

<p>Can we do the same as above except just pull changes from each other's working copy repo?</p>

<p>-or-</p>

<p>Am I adding too much complexity to the workflow and should just keep using svn, since it's not an option to just convert entirely to git?</p>
","0","201991","0"
"20680133","1926343","2013-12-19 11:09:23","0","83","<git><version-control><github><git-svn>","Set git repository in online web server","<p>I am absolutely a starter with <code>git</code> and <code>github</code>. Now I have an ubuntu system which have git installed, and a shared remote web-server space for my domain with <code>cpanel</code> access.</p>

<p>Now I need to setup and use a git repo in this online server for using with my team. Can anyone help me to setup and use this?</p>

<p>I need to commit my local developments to this online private repo.</p>

<p>For example I have a project <em><code>abc</code></em> in my <em><code>public_html</code></em>, I can access this by <code>http://www.mydomain.com/abc/</code>. I need to see my local commits here.</p>
","2","1926343","0"
"1680582","156572","2009-11-05 13:27:07","17","8669","<git><passwords><git-svn>","git-svn password change","<p>I'm using TortoiseGit on Windows XP.</p>

<p>My team all use a central svn server as our central ""canonical"" code repository. It's all run on a windows network.</p>

<p>I work locally with git, then use git-svn dcommit to commit regularly to the svn server.</p>

<p>Our network enforces a regular password change - which changes my password for the svn server as well. Now I can't dcommit any more, as Tortoise is attempting to use my old password - I've googled, and I've hunted thru menus and docs - but I can't figure out where to change the password that Git uses to connect to SVN. Anyone help?</p>
","0","156572","0"
"1752570","","2009-11-17 23:18:03","2","243","<git><branch><git-svn>","git-svn and a large project","<p>I've scoured the web and found a lot about working with git-svn and branches, but nothing that fits my situation.</p>

<p>I'm working on a large project, and I work on several of many branches throughout the week. Standard ways of handling git branching wouldn't work for me here... just because of the size of the code involved. It takes about an hour to compile from the ground up, so I can't be switching back and forth between branches in that way. I want to use git-svn so I can use local branches. The svn branches might as well be considered separate projects, with common code in certain places.</p>

<p>All I want to be able to do is merge changes from one svn repo to another using git-svn, but I haven't found a way to do it from google or the git-svn docs. I handle this in svn by maintaining a separate svn checkout it its own directory for each branch, and just use the merge command to pull changes. I expected to be able to do something similar using git-svn, but I haven't found the way to pull changes from another svn branch. Is there a way to do this?</p>
","1","",""
"20748643","446491","2013-12-23 17:51:25","2","60","<git><svn><git-svn>","Is this workflow possible with git-svn?","<p>I'd like to be able to do the following:</p>

<ul>
<li>Create a git branch off of a remote.</li>
<li>Locally, create a new branch off of that local version of the remote.</li>
<li>Do my dev work within that branch.</li>
<li>Create a pull request from that branch into the original git remote.
<ul>
<li>At this point, the pull request can be reviewed, giving us a bit of a code review along the way.</li>
</ul></li>
<li>When that's okayed, pull that into the original remote.</li>
<li>From there, sync that up with my svn trunk.</li>
</ul>

<p>Is that possible with git-svn or something similar? I know that I can do a local git repo, do my own branching and such via git-svn, but I need that remote so that others can create pull-requests and such. Really just wanting a good code review solution and in the past, using just git, pull requests were a great way to go. Unfortunately we are using SVN at work, so we need to take that into consideration.</p>

<p>Thanks for any ideas on this :).</p>
","0","446491","0"
"58635202","1527576","2019-10-30 23:59:37","1","757","<git><git-branch><git-svn><git-clone>","Cloning a git-svn repository leads to ""disappearing"" branches","<p><strong>Foreword</strong></p>

<p>We have a big SVN repository (200k+ commits and hundreds of branches and tags). A big, ominous, unmaintainable, frustrating mess. To work more efficiently, about a year ago I did a git svn clone on my development machine, so I locally develop on GIT and then push to SVN.</p>

<p>We're now thinking about splitting up the repository and move the main development branches to git, or at least to move our development branch on git.</p>

<p>Since I have my local git repository, I wanted to do some test by cloning a part of it and push it to our company's GitLab, but without much success, probably because I lack the knowledge of some Git mechanisms</p>

<p><strong>Let's start</strong></p>

<p>In order to do some quick tests without pushing the entire 30GB repository, I wanted to do a shallow clone of my local Git repo and push the clone using the following command:</p>

<pre><code>git clone --depth=1 --no-single-branch file:///path/to/repo
</code></pre>

<p>I wanted to clone the HEAD revision of every branch, but the clone included only the master branch and our development branch, nothing else (I'm not sure about the tags, I didn't check). After a while I realised that the clone included only our dev branch because it was the only one that I ever checked out (even though the git svn repository is a full clone of the SVN repository).</p>

<p>I then tried to do a</p>

<pre><code>git clone file:///path/to/repo
</code></pre>

<p>and I again got only the master and my development branch, nothing else.</p>

<p>In these two attempts I noticed that the clone was much smaller (200-700MB) than the original git repository (30GB). In the second try I was expecting a repository of the same size of the original. </p>

<p>So I realised that git is cloning only the checked out branches, not the remote ones (remotes/svn/*). Why, since the git svn repo is a full copy of the svn repo? Why is it not cloning all the branches? They are there (otherwise the git svn repo wouldn't be so big), they just aren't checked out. And... How we can talk of ""remote"" branches? Aren't they part of the git svn repo, and should be considered local?</p>

<p>So how could I tell git to consider all those branches when cloning the git svn repo? I wouldn't like to to a massive checkout of all the branches in the git svn repo, it sounds to me like a clumsy and messy solution. </p>

<p><strong>Update</strong></p>

<p>Thanks for your reply. I'm sorry for not replying you sooner, but you left me quite a lot of documentation to read, plus I had to do some other research on my own!</p>

<p>So, if my understanding is correct, my git-svn repository contains all the commits of the original svn repository and it's aware that the svn repository contains branches and tags, but locally it doesn't have the association between the commit's SHA1 and the label which is the branch name, and I have to add those associations manually.</p>

<p>Your snippet is a very useful starting point, thanks!</p>

<p>I also discovered the magic argument <code>--mirror</code> for the clone command, which imported also the remotes, so I didn't have to touch the git-svn repo, but I later created the branches directly on the cloned git repo.</p>
","0","1527576",""
"1859522","61342","2009-12-07 11:48:41","3","471","<git><version-control><git-svn>","How to git svn fetch older history?","<p>I have checkout'ed svn repo through git, but not from the first svn commit.
Now I would like to extend the history a little back into past. Is it possible?</p>
","0","61342",""
"1872215","64406","2009-12-09 07:34:18","2","173","<svn><git-svn>","restricting git-svn activity to a single git branch","<p>I'm using git-svn to work with an svn repository. I have my git master branch tracking svn, and several local git branches. Is there any way to set up things so that if I run <code>git svn rebase</code> or <code>git svn dcommit</code> on a git branch other than <code>master</code> it will simply do nothing?</p>
","0","64406","0"
"1954062","233992","2009-12-23 17:06:52","8","2732","<bash><git-svn>","Emulate subwcrev when using git-svn","<p>I use git-svn to interact with an existing SVN repository that contains some C++ projects. subwcrev.exe is used as a pre-build event to update some strings in a C++ header (svnversion.h). These strings get hardcompiled to form some version information for the resulting binary.</p>

<p>Since subwcrev requires .svn metadata to work, the pre-build event is going to fail when used on the git-svn working copy. So I came up with the following bash script which I use as post-commit and post-checkout hooks for my git repository. The script tries to do the same thing as subwcrev based on the output of git svn info (cached in a local file). </p>

<pre><code>#!/bin/sh
if [ ! -f svninfo ] ; then
    git svn info &gt; svninfo
fi

revision=`sed -e ""/Revision/!d"" -e ""s/Revision: \(.*\)/\1/"" svninfo`
lastchange=`sed -e ""/Last Changed Rev/!d"" -e ""s/Last Changed Rev: \(.*\)/\1/"" svninfo`
# Get the last changed date, extract timestamp, replaces dashes with slashes
changedate=`sed -e ""/Last Changed Date/!d"" -e ""s/Last Changed Date: \(.\{19\}\).*/\1/"" -e ""s!-!\\\\\\/!g"" svninfo`
now=`date ""+%Y\/%m\/%d %H:%M:%S""`

gitcommit=`git show --abbrev-commit | sed -n -e ""s/commit //p""`

for entry in $( find -name svnversion_template.h ); do
    newname=`echo $entry|sed -e ""s/_template//""`
    sed -e ""s/\\\$WCRANGE\\\$/${revision}/"" \
        -e ""s/\\\$WCREV\\\$/${lastchange}-${gitcommit}/"" \
        -e ""s/\\\$WCDATE\\\$/${changedate}/"" \
        -e ""s/\\\$WCNOW\\\$/${now}/"" \
        -e ""s/\\\$WCURL\\\$/local git repo/"" \
        -e ""s/\\\$WCMODS.*\\\$/(true)/"" \
        -e ""s/\\\$WCMIXED.*\\\$/(false)/"" \
        $entry &gt; `echo $entry|sed -e ""s/_template//""`
done
</code></pre>

<p>What I cannot really emulate so far is the automatic detection of a local uncommitted changes (based on the last checked out SVN revision) that makes subwcrev so useful.</p>

<p>I am replacing <code>$WCREV$</code> with the revision number of the SVN repository (as subwcrev would do) but this time I add my abbreviated git commit hash to identify the code I compiled. My question now is: Is there a way to distinguish in a shell script whether my current HEAD differs from the last fetched SVN revision so that I could omit adding the <code>-${gitcommit}</code> part and set <code>$WCMODS$</code> to false?</p>

<p>If there were some thing like a <code>post-""git svn dcommit""</code> hook, my problem would be solved, too, since then that special hook would create the svnversion.h differently. Can such hook be added somehow?</p>
","0","233992",""
"20975754","157971","2014-01-07 15:40:40","1","380","<git><git-svn>","Which remote branches are my local git-svn branches bound to?","<p>I have the following <code>.config</code> file in my clone repo using git-svn:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
    hideDotFiles = dotGitOnly
[svn-remote ""svn""] 
    url = https://svn.domain.com:8443/svn
    fetch = trunk:refs/remotes/trunk
    branches = branches/{some_branch}:refs/remotes/branches/*
</code></pre>

<p>When I do <code>git branch -a</code>, I get:</p>

<pre><code>$ git branch -a
* master
  remotes/branches/some_branch
  remotes/trunk
</code></pre>

<p>How do I know which remote the local <code>master</code> branch is bound to (tracking)? Note that it seems this answer must be specific to git-svn since the normal git solutions (e.g. <code>git remote show origin</code>) do not work.</p>

<p><strong>EDIT</strong><br>
After reading my question more closely I am not sure it makes sense. Basically I just want to know which SVN branch 'master' is bound to. I assumed remotes were branches, but they are actually just URLs to other repos AFAIK. So, what I really want is the mapping between remote SVN branch &amp; local branch.</p>
","0","157971","0"
"2042033","101186","2010-01-11 13:17:05","5","1353","<git><git-svn>","How to reinitialize a git-svn repository","<p>Following the advice of <a href=""http://www.viget.com/extend/effectively-using-git-with-subversion/"" rel=""noreferrer"">this tutorial</a>, I cloned an svn repository which did not have the standard layout.</p>

<blockquote>
<pre><code>git-svn clone -s http://example.com/my_subversion_repo local_dir
</code></pre>
  
  <p>The -s is there to signify that my Subversion repository has a standard layout (trunk/, branches/, and tags/.) If your repository doesn’t have a standard layout, you can leave that off.</p>
</blockquote>

<p>Being completely new to git, I did not realize that simply leaving off the -s option without supplementing the --trunk, --branches, and --tags options would leave me not only with a branchless repository but also with the entire head of the repository checked out (instead of just the head of the trunk).</p>

<p>Is there a way to ""fix"" my local git repository to behave as though I had created it with knowledge of the svn repository layout?  Can I use git-svn init to reinitialize my repository?  Because of the length of time involved, I'm hoping to avoid having to reclone from scratch.</p>
","0","101186",""
"2135601","4657","2010-01-25 21:01:09","29","12862","<git><svn><branch><git-svn>","Update git-svn list of remote branches","<p>When I have to use svn, I use git-svn to talk to svn. I cloned the repo with the standard git svn clone -s line, and all the remote branches at the time were there.</p>

<p>Since then, a new branch has been created, but not by me. I want to checkout/track this branch locally. I can track a branch that I can see (with git branch -r) like so:</p>

<pre><code>git checkout -t -b dev remotes/development
</code></pre>

<p>But this doesn't work with the other branch, since it doesn't show up in git branch -r</p>

<p>How can I track this missing branch?</p>
","1","4657","0"
"2236403","55562","2010-02-10 11:29:06","0","123","<svn><git><version-control><merge><git-svn>","Merge an SVN subfolder and a git project changes","<p>There is an internal SVN repository on which many changes have been made. This contains not only the project of interest, but also many other folders.</p>

<p>There is an external git repository, on which many changes have now been applied.</p>

<p>What is the best way to merge these 2 sets of changes.</p>

<p>I was thinking, take the diff of the git HEAD and svn latest changes and manually edit it to make it a patch. Is there a simpler/better alternative?</p>
","0","55562","0"
"2244252","241161","2010-02-11 12:05:14","74","62389","<svn><git><git-svn>","How to import svn branches and tags into git-svn?","<p>I have got a central SVN repository I must commit to, but I've got a passion for git (like any other developer I know). The case is well known.</p>

<p>Then I read about git-svn and gave it a try. Since I don't need the full history, just from two months or so, I did like this:</p>

<pre><code>git svn clone -r 34000 -s https://svn.ourdomain.com/svn/repos/Project/SubProject
</code></pre>

<p>SubProject had, as usual, the subdirectories <code>trunk</code>, <code>tags</code> and <code>branches</code>. Great.</p>

<p>Then, in order to get the last revision, I did</p>

<pre><code>git svn rebase
</code></pre>

<p>Some downloads later, great. Last revision, logs, etc. Ok, now I'll switch to my feature branch. </p>

<pre><code>$ git branch 
* master
</code></pre>



<pre><code>$ git branch -r  
  trunk
</code></pre>



<pre><code>$ git branch -a  
* master
  remotes/trunk
</code></pre>

<p>The questions are: Where are my branches? Have I done something wrong? How should I do in order to get my branches in the new git repo? </p>

<p>git-svn, wherever I have read about it, dealt wisely with branches and tags, but the behaviour is not what I expected. Thanks!</p>

<p><strong>EDIT</strong>: I have just found out that <code>git svn fetch</code> will do it. But it will get all revisions, which is something I wouldn't like.</p>
","5","241161","0"
"21155763","2431113","2014-01-16 07:28:47","3","181","<git-svn>","failed to clone repo by using command ""git svn clone -s svn+ssh://repo_url""","<p>Initialization is done but then gives following error</p>

<pre><code>Authorization failed: generic failure at /usr/lib/git-core/git-svn line 1928
</code></pre>
","0","2431113","0"
"2336398","281414","2010-02-25 18:02:34","2","424","<git><git-svn>","git-svn guestion about creating local branches","<p>Is there a way to create a local branch, or modify an existing local branch, in such a way that it cannot be dcommit'ed to the svn repo?  Here's a description of the scenario.</p>

<pre><code>git checkout -b local.farBranch remotes/farBranch
git checkout -b patched.local.farBranch
git merge local.patches

&lt;work on patched branch &amp;&amp; test&gt;
&lt;do not commit onto patched.local.farBranch&gt;

git checkout local.farBranch
git commit -am ""some changes""

git rebase local.farBranch patched.local.farBranch

&lt;another work test cycle&gt;

git checkout local.farBranch
git commit -am ""last changes""

git svn dcommit
</code></pre>

<p>Now, I never want to dcommit patched.local.farBranch (which is tracking remotes/farBranch) because that would put my local patches into the SVN repository.  This is not a fatal problem but it is a pain in the keester because the patch has to be removed when the SVN farBranch is eventally (SVN) merged onto the trunk.  So what I am looking for is a way to prevent this</p>

<pre><code>git checkout patched.local.farBranch
git svn dcommit                         &lt;&lt;== ERROR

git checkout local.farBranch
git svn dcommit                         &lt;&lt;== OK
</code></pre>
","0","281414",""
"2335993","281435","2010-02-25 17:11:53","0","129","<git><git-svn>","Migrating svn repository to another git repository(as a part of it)","<p>I'm trying to migrating a svn repository to another git repository. I read all the documents as well. But they are talking about how to migrate a svn repository to a NEW git repostory. What I want to do is let the svn repository as a part of the old git repository with the svn log.</p>

<p>I have a git repository and a svn repository</p>

<p>Files in git directory:</p>

<pre><code>drwxr-xr-x 2 root root 4096 2010-02-26 00:58 a
drwxr-xr-x 8 root root 4096 2010-02-24 14:46 .git
</code></pre>

<p>SVN repository(after run git svn clone):</p>

<pre><code>drwxr-xr-x 2 root root 4096 2010-02-26 00:58 b
-rw-r--r-- 1 root root    0 2010-02-26 01:00 readme.txt
drwxr-xr-x 8 root root 4096 2010-02-24 14:46 .git
</code></pre>

<p>As you see, I got two .git directories. That means I got two different git repositories. I just want them to be one like this:</p>

<p>Files git directory:</p>

<pre><code>drwxr-xr-x 2 root root 4096 2010-02-26 00:58 a
drwxr-xr-x 2 root root 4096 2010-02-26 00:58 b
-rw-r--r-- 1 root root    0 2010-02-26 01:00 readme.txt
drwxr-xr-x 8 root root 4096 2010-02-24 14:46 .git
</code></pre>

<p>git svn clone will create a new git repository. Is there any way to migrate the two git repository as one?(Do NOT miss svn and git logs)</p>
","0","281435","0"
"2337235","128983","2010-02-25 20:08:54","1","139","<git><git-svn>","Can I use git svn in a repository which I cloned using git?","<p>I am using git to get my Webkit repository by following this:
<a href=""https://trac.webkit.org/wiki/UsingGitWithWebKit"" rel=""nofollow noreferrer"">https://trac.webkit.org/wiki/UsingGitWithWebKit</a></p>

<p>So I did:</p>

<pre><code>git clone git://git.webkit.org/WebKit.git WebKit
</code></pre>

<p>I have been upgrading my repository using ""git pull""</p>

<p>My question is: Can I do ' git svn rebase' in my repository? Or I can only do that if I create my repository using this?</p>

<pre><code>git svn init -T trunk http://svn.webkit.org/repository/webkit
</code></pre>
","0","128983",""
"2342131","74198","2010-02-26 14:08:34","41","29661","<git><git-svn><clearcase>","How to bridge git to ClearCase?","<p>I've recently used <code>git svn</code> and enjoyed it very much. Now I'm starting a new project at a different customer. At that site the SCM of choice is ClearCase. I haven't found a baked equivalent of <code>git svn</code> for ClearCase. Is there anybody who has tried to use git locally as a front-end to ClearCase using some tricks, configuration or scripting with any measure of success? If so can you please explain the method used?</p>
","1","74198","0"
"21236687","39188","2014-01-20 14:37:10","0","73","<git-svn>","git-svn branching when all submodules on same level","<p>My project uses svn and I went git along time ago. I've been using git-svn for quite a while with a lot of success. But now at a new employeer, I'm having some problems.</p>

<p>The layout in SVN is:</p>

<pre><code>http://path/to 
             /trunk/
                     submodule1
                     submodule2

             /branches/
                       branch1
                                   submodule1
                       branch2 
                                   submodule1
                                   submodule2
</code></pre>

<p>I checked-out my git-svn to track each submodule (which I think is the right way to go).</p>

<pre><code>          git svn clone http://path/to/trunk/submodule1 
          git svn clone http://path/to/trunk/submodule2
</code></pre>

<p>Which gives me trunk, but I can't figure out how to track each branch. I want to think that --prefix would help me, I don't think that it will.</p>

<p>Anyone have ideas?                        </p>
","0","39188",""
"2352935","10638","2010-02-28 22:26:22","2","246","<git><git-svn>","dcommit to SVN in 1 commit after cherry-picking in git","<p>I would like to know if there is a clean way to do git-svn dcommit of multiple local commits as 1 commit into subversion.</p>

<p>The situation that I have is I am cherry picking some bug fixes changes from our trunk into the maintenance branch. The project preference is to have the bug fixes to be committed as 1 commit in subversion, but I would like to keep the history of changes that I had cherry-picked on my local git for references.</p>

<p>Currently what I do is to do all cherry-picking on <strong>branch X</strong> and then do a <em>squash merge</em> into <strong>new branch Y</strong>. The dcommit will then be done from <strong>branch Y</strong>.</p>

<p>Is there a better way to do it without using an intermediary branch?</p>
","0","10638",""
"2458706","141463","2010-03-16 22:46:42","0","628","<git><git-svn>","Shared Git repo syncing to svn causing git svn rebase to pollute repo with a log of no-op merge problems","<p>This wasn't so bad at the beginning, but now I have hundreds of no-op merge problems (solved by <code>git rebase --skip</code>).</p>

<p>I have setup a shared git repo for my group because it is easier to deal with.  But the company uses SVN so I have to keep SVN in sync with GIT.  Worked like a dream at first, but after weeks of doing this GIT is giving me a lot of the following errors.</p>

<pre><code>Applying:  * making all config actions work
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging app/controllers/vulnerabilities_controller.rb
CONFLICT (content): Merge conflict in app/controllers/vulnerabilities_controller.rb
Auto-merging public/javascripts/network_analysis_vulnerability_config.js
CONFLICT (content): Merge conflict in public/javascripts/network_analysis_vulnerability_config.js
Failed to merge in the changes.
Patch failed at 0046  * making all config actions work
</code></pre>

<p>My workflow:</p>

<pre><code>git co master
git pull origin
git svn rebase
... deal with no-op merge problems ...
git svn dcommit
git pull origin
git push origin
</code></pre>

<p>The problem is that what is in SVN is the correct so I use <code>git rebase --skip</code>, but I have to do that hundreds of times before I can dcommit.</p>

<p>How do I clear these merge problems permanently?</p>
","2","141463","0"
"21334923","339733","2014-01-24 14:17:51","2","1598","<git><git-svn>","Incomplete data: Delta source ended unexpectedly while git svn fetch","<p>I have cloned my svn repo into git and everyday i am doing git svn fetch (i only do changes in SVN) but i am planning to move to git and i keep the git repo in sync for the day since the svn clone tooke me 2 weeks (yeah it's a big repo). </p>

<p>Anyway the git svn fetch has worked fine every day until 2 days ago where i now get </p>

<pre><code>Incomplete data: Delta source ended unexpectedly at /usr/lib/perl5/site_perl/Git/SVN/Ra.pm line 290
</code></pre>

<p>at a specific revision. I tried the different suggestions online about git svn reset and going back some revisions and i went about 20 revisions back with no luck. I also tried to run :</p>

<pre><code>git config --get core.autocrlf
</code></pre>

<p>which gave <code>true</code>.</p>

<p>I know that the svn repo is working good, i have no issues doing svn up.</p>

<p>Any ideas how i can get back on track to sync again ? I am stuck without ideas what to try.</p>

<p>I might reveal one issue. I don't recall but before running the issue i might have had a disk full on the disk where the repo is when i tried the fetch. Maybe that destroyed something ?</p>

<p>/donnib</p>
","1","339733",""
"2468703","28388","2010-03-18 09:37:04","4","430","<svn><git><version-control><git-svn>","Using git-svn with existing svn project","<p>I'm currently working on a project that has a svn repository. I'm used to git and love the way it allows me to have a local repository, so I would like to use git-svn with this project.</p>

<p>I would like to know how to use git-svn from a svn project already in my computer. Do I really need to make a clone and start from there? Or can I just do something like <code>git svn init</code> in the current project folder and proceed from there?</p>

<p>Also I would like to know about any big issues using git-svn, since this is a serious project and I shouldn't mess around with the repo.</p>

<p>Thanks in advance.</p>
","0","28388","0"
"2564445","16883","2010-04-02 00:23:05","4","1400","<cygwin><git-svn>","error 127 when running ""git svn init"" on cygwin","<p>I'm trying to convert a local SVN repository to git using git-svn under cygwin and failing. This is what happens:</p>

<pre><code>$ git svn init -t tags -b branches -T trunk  file:///cygdrive/e/repository/project
init: command returned error: 127
</code></pre>

<p>Any ideas?</p>
","0","16883",""
"2568321","69993","2010-04-02 18:10:21","42","12900","<git><repository><git-svn><git-clone>","Cloning git repository from svn repository, results in file-less, remote-branch-less git repo","<h2>Working SVN repo</h2>

<p>I'm starting a git repo to interact with a svn repo.  The svn repository is set and working fine, with a single commit of a basic README file in it.</p>

<p>Checking it out works fine:</p>

<pre><code>tchalvak:~/test/svn-test$ 
svn checkout --username=myUsernameHere http://www.url.to/project/here/charityweb/
A    charityweb/README
Checked out revision 1.
</code></pre>

<h2>Failed git-svn clone of svn repo</h2>

<p>When I try to clone the repository in git, the first step shows no errors...</p>

<pre><code>tchalvak:~/test$ 
git svn clone -s --username=myUserNameHere http://www.url.to/project/here/charityweb/
Initialized empty Git repository in /home/tchalvak/test/charityweb/.git/
Authentication realm: &lt;http://www.url.to/project/here:80&gt; Charity Web
Password for 'myUserNameHere': 
</code></pre>

<p>...but results in a useless folder, containing no files, no branches, and no commits:</p>

<pre><code>tchalvak:~/test$ ls
charityweb
tchalvak:~/test$ cd charityweb/
tchalvak:~/test/charityweb$ ls
tchalvak:~/test/charityweb$ ls -al
total 12
drwxr-xr-x 3 tchalvak tchalvak 4096 2010-04-02 13:46 .
drwxr-xr-x 4 tchalvak tchalvak 4096 2010-04-02 13:46 ..
drwxr-xr-x 8 tchalvak tchalvak 4096 2010-04-02 13:47 .git
tchalvak:~/test/charityweb$ git branch -av
tchalvak:~/test/charityweb$ git status
# On branch master
#
# Initial commit
#
nothing to commit (create/copy files and use ""git add"" to track)
tchalvak:~/test/charityweb$ git fetch
fatal: Where do you want to fetch from today?
tchalvak:~/test/charityweb$ git rebase origin/master
fatal: bad revision 'HEAD'
fatal: Needed a single revision
invalid upstream origin/master
tchalvak:~/test/charityweb$ git log
fatal: bad default revision 'HEAD'
</code></pre>

<p>How do I get something I can commit back to?  I expect I'm doing something wrong in this process, but what?</p>
","0","69993","0"
"21430359","492620","2014-01-29 11:53:01","2","4088","<git><svn><git-svn>","git-svn local branch tracking remote svn branch","<p>I checkout my own private branch on svn like this:</p>

<pre><code>git svn clone svn://server/cfe/project/branches/fb_oz_3173_email
</code></pre>

<p>Now I am on the branch <code>master</code>. </p>

<p>I would like to:</p>

<ul>
<li>rename this branch to <code>fb</code></li>
<li>add branch called master which tracks the remote <code>svn://server/cfe/project/trunk</code></li>
</ul>

<p>I can't get it right. Can someone give me a lead?</p>

<h2>update</h2>

<ul>
<li>the first part is easy: 
<code>git branch -m fb</code></li>
</ul>
","0","492620","0"
"2588470","92694","2010-04-06 21:27:40","2","495","<svn><git><git-svn><dvcs><commit>","Fetch from svn. Commit to remote git","<p>I'm new to git and I'm trying to understand if it can solve my problem.</p>

<p>A project has a public read-only svn repo.  I want to make and track my own changes to its source over time.  While still fetching changes from the svn repo.  Of course I can do this easily with <code>git-svn</code>.  I just never performing a <code>dcommit</code>.</p>

<p>The added issue is that I work from multiple locations.  Thus I use a remote repo to sync files between these locations.  This is also another thing I can do easily with git, using a remote git repo.</p>

<p>But put them together and I have:</p>

<ul>
<li>fetch from remote svn</li>
<li>commit to local git</li>
<li>pull/push to remote git.</li>
</ul>

<p>Is this a reasonable workflow with git?  When, over time, my own changes/commits will be interlaced with updates from the svn repo. If so, how should I set it up.</p>

<p>Meaning, Should I have each working location have its local git fetch from the remote svn directly, in a fully decentralized fashion.  Or should I go out of my way to have the single remote git repo do the svn fetch itself.  To make it easier on the various local gits to coordinate the changes from svn, i.e. make them look like their just changes from the remote git repo.</p>

<p>I can run <code>git-svn</code> only on the remote git repo host if I need to.</p>
","1","92694",""
"2683302","322325","2010-04-21 13:31:44","0","480","<svn><git-svn><hgsubversion>","git-svn on subset of large svn repo","<p>repo layout:
a/1
a/2
a/3
...
b/1
b/2
...
c/1
c/2
...</p>

<p>git-svn works perfect for me if I work on 1 svn repo subdir.
But right now I'm facing the need to work on several subdirs (like, a/1, a/2, and b/1), and there's much shit in repo besides them.
I've managed to write a regexp for this, but git-svn with --ignore-paths seems to check <em>each</em> file's name against this regexp, instead of skipping entire folders, so it's too slow. /* Probably I should file a bug report about this */</p>

<p>So -- any ideas of handling this? If some Mercurial svn agent can do selective clones, it's OK too, but I'd better stick with git.
My another idea was some selective svn proxy, but I haven't succeeded in googling anything like that.
Thanks!</p>
","0","322325",""
"40529309","1233661","2016-11-10 13:54:02","3","2369","<git><git-svn><git-filter-branch><bfg-repo-cleaner>","git svn fetch gives ""Invalid revision range"" ""error: 128"" after bfg cleanup","<p>I have a Git repo in migration from SVN with git-svn.
I used <code>git svn fetch</code> to get the latest commits from SVN. I wanted to push the repo to GitHub, but there were some files in the history larger than 100 MB <a href=""https://stackoverflow.com/questions/2100907/how-to-remove-delete-a-large-file-from-commit-history-in-git-repository"">that I had to remove</a>, so I used <a href=""https://rtyley.github.io/bfg-repo-cleaner/"" rel=""nofollow noreferrer"">bfg repo cleaner</a> to get rid of them.</p>

<pre><code>$ java -jar bfg-1.12.14.jar --strip-blobs-bigger-than 100M
...
In total, 10235 object ids were changed. Full details are logged here:
...
BFG run is complete! When ready, run: git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive
...
$ git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive
Counting objects: 204963, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (171827/171827), done.
Writing objects: 100% (204963/204963), done.
Total 204963 (delta 91547), reused 106805 (delta 0)

$ git svn fetch -A authors-transform.txt
fatal: Invalid revision range b156a7b66be002c3bf38987ea503f5c852146343 
rev-list --pretty=raw --reverse b156a7b66be002c3bf38987ea503f5c852146343..refs/remotes/git-svn --: command returned error: 128
</code></pre>

<p>How can I make it work without reinitialising the whole repository, as I don't want those files again in the history (they exceed GitHub's limit)? Any way to recalculate the hash or to make it ignore the mismatch?</p>
","0","1233661",""
"2693771","135960","2010-04-22 19:20:44","6","6918","<svn><git><merge><git-svn>","git-svn merge 2 svn branches","<p>I'm using svn. I have two branches and on both of them were performed a lot of changes.
In addition of one of the branches a lot of files were renamed, so now svn can not help me merge changes in those files (well know svn limitation).</p>

<ol>
<li>Is it possible using git-svn to perform the merge of the branches?</li>
<li>Will git-svn handle renamed files too?</li>
</ol>

<p>Thanks</p>
","2","135960","0"
"2695119","62163","2010-04-22 23:01:37","15","3903","<git><git-svn>","Is git svn rebase required before git svn dcommit?","<p>I'm reading about using git as an svn client here:</p>

<p><a href=""http://web.archive.org/web/20130605141626/http://learn.github.com/p/git-svn.html"" rel=""nofollow noreferrer"">http://learn.github.com/p/git-svn.html</a></p>

<p>That page suggests that you do git svn rebase before git svn dcommit, which makes perfect sense; it's like doing svn update before doing svn commit. Then, I started looking at the documentation for git svn dcommit (I was wondering what the 'd' is about):</p>

<p><a href=""http://git-scm.com/docs/git-svn"" rel=""nofollow noreferrer"">http://git-scm.com/docs/git-svn</a></p>

<p>You have to scroll down a bit to see the documentation on dcommit, which says this:</p>

<blockquote>
  <p>Commit each diff from a specified head directly to the SVN repository, <em>and then rebase or reset (depending on whether or not there is a diff between SVN and head)</em>.</p>
</blockquote>

<p>This confuses me, because if you do as the first page says, there will be no changes to pull down from svn once the first part of dcommit finishes.</p>

<p>I'm also confused by the part that talks about reset; isn't git reset for removing changes from the staging area?</p>

<p>Why would rebase or reset follow (the first part of) a dcommit?</p>
","0","62163","0"
"21531490","969","2014-02-03 15:41:20","1","300","<git><git-svn><git-merge><git-filter-branch><git-subtree>","Convert svn projects to git, but allow merging of bugfixes made in svn","<p>I have a svn repository with many projects—but I am only interested in some (parts of server and full-client). </p>

<pre><code>trunk
  server
    src
      src-that-should-be-in-client
      other-src-that-belongs-to-server
    cfg
      cfg-that-should-be-in-client
      other-cfg-that-belongs-to-server
  client
  docs
  foo
  bar
</code></pre>

<p>In the process of transforming the build system of the client I want to convert the project to git. But all support branches where bugfixes will happen stay in svn.</p>

<p>I want to be able to merge bugfixes made in the support svn branches to git (and possibly vice versa as well). OK, this is easy, I know how to do this (I am not interested in the old branches and tags):</p>

<pre><code># create mirror of client
git svn clone --prefix=svn/ --trunk=trunk/client http://svn-server client
cd client
git remote add mirror path_to_remote_mirror
crontab -e # automatically call git svn rebase and git push mirror
# repeat for server
</code></pre>

<p>Work would be done on a fork of the remote mirror. To merge bugfixes made in svn, just add the mirror as remote and continue as described elsewhere (e.g. github). Cherry-Picking in the other direction is a little bit more advanced, but possible.</p>

<p>But I want to move parts of the server over to the client after transitioning to git—Without loosing the history and being able to merge bugfixes. </p>

<p>One way I thought of was to alter the <code>git svn clone</code> command using <code>--trunk=trunk</code> and adding <code>--include-paths=(?:server|client)</code>. Now I have a mirror of both the server and client in one git repository. I would fork it, move the parts that belong to the client, delete the server folder and finally move everything under client to the root (with intermediate commits, of course).</p>

<p>Another way of doing this would be to create a fork of the client, and <a href=""http://git-scm.com/book/ch6-7.html"" rel=""nofollow"">subtree merge</a> parts of the server over.</p>

<p>I see one problem with the first approach, which is files added in svn in the server code will be merged as well, and files changed in the server code (and deleted in git) might result in merge conflicts. Workaround: use <code>git merge --no-commit</code> inspect the server-dir if created during merge, if it contains files that belong in the client, move them over, delete the server-dir, commit. But other than that, it seems easy enough to be done by non-git-wizzards. Maybe it can be improved by calling filter-branch afterwards?</p>

<p>For the second approach I am not sure, if merges will even work. At least it seems to be more advanced and might not be doable by non-git-wizzards.</p>

<p>Which approach is better? Or is there a better approach?</p>
","0","969",""
"2700012","208525","2010-04-23 15:55:56","9","1675","<svn><git><git-svn>","Mirror git to svn","<p>I have a primary git repository for an opensource project</p>

<p>I want to mirror all commits to a svn repository (on code.google.com), is it possible ?</p>
","0","208525","0"
"2710073","220216","2010-04-25 21:35:59","4","2307","<svn><git><git-svn>","Can I recover lost commits in a SVN repository using a local tracking git-svn branch?","<p>A SVN repo I use git-svn to track was recently corrupted and a backup was recovered. However, a week's worth of commits were lost in the recovery. Is it possible to recover those lost commits using <code>git-svn dcommit</code> on my local git repo? Is it sufficient to run <code>git-svn dcommit</code> with the SHA1 of the last recovered commit in SVN? eg.</p>

<pre><code>&gt; svn info http://tracked-svn/trunk | sed -n ""s/Revision: //p""
252
&gt; git log --grep=""git-svn-id:.*@252"" --format=oneline | cut -f1 -d"" ""
55bb5c9cbb5fe11a90ec2e9e1e0c7c502908cf9a
&gt; git svn dcommit 55bb5c9cbb5fe11a90ec2e9e1e0c7c502908cf9a
</code></pre>

<p>Or will the <code>git-svn-id</code> need to be stripped from the intended commits?</p>

<p>I tried this using <code>--dry-run</code> but couldn't tell whether it would try to submit all commits:</p>

<pre><code>&gt; git svn dcommit --verbose --dry-run 55bb5c9cbb5fe11a90ec2e9e1e0c7c502908cf9a
Committing to http://tracked-svn/trunk ...
dcommitted on a detached HEAD because you gave a revision argument.
The rewritten commit is: 55bb5c9cbb5fe11a90ec2e9e1e0c7c502908cf9a
</code></pre>

<p>Thanks for your help.</p>
","0","220216","0"
"2814828","128581","2010-05-11 22:17:23","5","2846","<git><git-svn>","View a git diff-tree in a reasonable format","<p>I'm about to do a git svn dcommit to our svn repo -- and as is recommended in a number of places, I wanted to figure out exactly what I was going to be committing with a dry run. As such I ran:</p>

<pre><code>git svn dcommit -n
</code></pre>

<p>This produced output:</p>

<pre><code>Committing to http://somerepo/svn/branches/somebranch
diff-tree 1b937dacb302908602caedf1798171fb1b7afc81~1 1b937dacb302908602caedf1798171fb1b7afc81
</code></pre>

<p>How do I view this in a format that I can consume as a human? A list of modified files comes to mind. This is probably easy, but running git diff-tree on those hashes gives me a reference to a directory and a some other hashes, as well as some numbers. Not quite sure what to make of it.</p>

<p>Thanks very much,
Josh</p>
","1","128581","0"
"734256","4508","2009-04-09 13:35:04","9","1761","<git><git-svn>","Is there a way to ""git svn dcommit"" from a cloned git-svn repository :","<p>Is there a way to ""git svn dcommit"" from a cloned git-svn repository :</p>

<p>I have several branches in my svn, sometimes it is very small branch and it is nice to have it in the same directory, but sometimes these branches grow big and it is nice to move the whole thing to another folder.</p>

<p>But when I do a git clone from this local repository to another place on my disk git-svn lost all its information and I don't known how to connect it back. I suppose I could just make a copy of the folder, but doing it through git would be nicer.</p>
","0","4508","0"
"739923","4936","2009-04-11 11:43:54","0","2263","<svn><git><git-svn>","git svn dcommit to sourceforge fails but it works via svn directly","<p>I'm working on a Open Source project on SourceForge that uses Subversion. A few days ago I did a <code>git svn clone</code> and started tracking my changes using Git.</p>

<p>After a while I tried to <code>dcommit</code> my changes back upstream. But that failed with the following error:</p>

<p><code>Autorisierung schlug fehl: MKACTIVITY von »/svnroot/housebot/!svn/act/b8dbd0ff-f224-4899-b6fe-06a514fa2dbf«: Autorisierung schlug fehl: Could not authenticate to server: rejected Basic challenge (https://housebot.svn.sourceforge.net) at /sw/lib/git/git-svn line 3649
</code></p>

<p>(Please ignore the german. It says something like ""Authorization failed"".). So I thought that my SSH key was setup incorrectly, but when I try to commit changes through svn it works perfectly fine.</p>

<p>So I'm at a loss to what's actually going wrong here. I would have assumed that it would either work in both svn and git svn or not at all.</p>
","2","4936","0"
"826865","55223","2009-05-05 20:52:48","32","10032","<git><svn><git-svn><git-checkout><svn-checkout>","Convert an SVN checkout to use git (git-svn)","<p>I work with software that is kept in svn for version control. I would like to use git (git-svn) however the software requires lots of setup and configuration before it can be used. There are tools that take care of all of the setup, including checking out all the code via svn.</p>

<p>All the documentation for git-svn (I've been able to find) requires a fresh checkout, using git-svn. </p>

<p>Is there a way to convert an existing svn checkout so it can use git-svn?</p>
","0","55223","0"
"12264108","724357","2012-09-04 13:05:52","2","58","<git><svn><hook><git-svn><svn-hooks>","git not receiving post commit results from svn server","<p>I'm using git to commit to an svn server, which has a post commit hook. This post commit hook is supposed to return some text to the client. The hook works fine when I use pure svn, but git svn does not display the text.</p>

<p>Googling around, I have been unable to find any details regarding issues with git-svn integration. Has anyone else run into this problem, and if so, how do I fix it? </p>
","0","724357",""
"12274464","1542339","2012-09-05 04:23:38","0","42","<git><version-control><git-svn>","is git svn an git module, or it is build into git command?","<p>the following is the pmap of an  git svn clone process:</p>

<pre><code>pmap 22308
22308:   git svn clone http://code.xxx.xxx/svn/xxx/
08048000   1172K r-x--  /home/mirror/ins_git/bin/git
0816d000     20K rw---  /home/mirror/ins_git/bin/git
08172000    304K rw---    [ anon ]
0948d000    132K rw---    [ anon ]
b7bee000    236K r----  /usr/lib/locale/en_US.utf8/LC_CTYPE
b7c29000      8K rw---    [ anon ]
b7c2b000     12K r-x--  /lib/libdl-2.5.so
b7c2e000      4K r----  /lib/libdl-2.5.so
b7c2f000      4K rw---  /lib/libdl-2.5.so
b7c30000   1352K r-x--  /lib/libc-2.5.so
b7d82000      4K -----  /lib/libc-2.5.so
b7d83000      8K r----  /lib/libc-2.5.so
b7d85000      4K rw---  /lib/libc-2.5.so
b7d86000     12K rw---    [ anon ]
b7d89000     84K r-x--  /lib/libpthread-2.5.so
b7d9e000      4K -----  /lib/libpthread-2.5.so
b7d9f000      4K r----  /lib/libpthread-2.5.so
b7da0000      4K rw---  /lib/libpthread-2.5.so
b7da1000      8K rw---    [ anon ]
b7da3000   1192K r-x--  /lib/libcrypto.so.0.9.8e
b7ecd000     80K rw---  /lib/libcrypto.so.0.9.8e
b7ee1000     12K rw---    [ anon ]
b7ee4000     72K r-x--  /usr/lib/libz.so.1.2.3
b7ef6000      4K rw---  /usr/lib/libz.so.1.2.3
b7ef7000      4K rw---    [ anon ]
b7ef8000     28K r--s-  /usr/lib/gconv/gconv-modules.cache
b7eff000      4K r----  /usr/lib/locale/en_US.utf8/LC_MESSAGES/SYS_LC_MESSAGES
b7f00000    108K r-x--  /lib/ld-2.5.so
b7f1b000      4K r----  /lib/ld-2.5.so
b7f1c000      4K rw---  /lib/ld-2.5.so
bffad000     84K rw---    [ stack ]
 total     4972K 
</code></pre>
","0","1542339",""
"20117159","2844815","2013-11-21 09:34:44","15","497","<git><svn><version-control><github><git-svn>","Update git-svn git mirror without redownloading everything","<p>I made a git mirror of a svn repository using </p>

<pre><code>    git svn clone svn://svn.svnrepo.com
</code></pre>

<p>I uploaded it to github and was able to update the local repo using</p>

<pre><code>    git svn rebase svn://svn.svnrepo.com
</code></pre>

<p>and push the updates to github</p>

<p>Later after I had deleted the local copy I wanted to update the remote again</p>

<p>So I cloned the git repo</p>

<pre><code>    git clone git://git.gitrepo.com
</code></pre>

<p>But when I tried to rebase I got an error</p>

<pre><code>    git svn rebase svn://svn.svnrepo.com

    Data from a previous version of git-svn exists, but

    (required for this version (1.8.3.2) of git-svn) does not exist.

    Done migrating from a git-svn v1 layout
</code></pre>

<p>then it gives an Unable to determine upstream SVN information from HEAD history error</p>

<p>Ive tried:</p>

<pre><code>    git svn init svn://svn.svnrepo.com
</code></pre>

<p>with:</p>

<pre><code>    git svn fetch
</code></pre>

<p>but that starts a re-download of the entire svn repo which takes over 24 hours
The current svn revision is marked by the git-svn-id in the commit log and seems fine, how do I stop git svn fetch from re-fetching files that already exist or rebase it without an entire re-download? This mirror never had commits that would make it different from the svn upstream.</p>
","4","2844815","0"
"974371","30958","2009-06-10 08:43:26","2","298","<git><git-svn>","How to handle IDE project files with git-svn","<p>I'm using git-svn and there are IDE project files in the svn repository. Everytime I start my IDE it modifies project files a bit and they are marked as changed in the status display. And then if I try to do a git svn rebase to update my working tree to have the latest changes from the svn it fails as I have local modifications on the project files and I have to stash the changes. How can I ease my workflow so I wouldn't have to stash/stash apply everytime I haven't really modified anything? </p>
","0","30958",""
"977195","7446","2009-06-10 17:55:23","10","2223","<git-svn>","How to dcommit only selected patches with git svn?","<p>I have a number of locally committed patches in my git-svn repo which I haven't yet commited to our svn repo.  A normal ""git svn dcommit"" will commit all of these patches to svn.  I would like to commit only some of my patches (simple bug fixes), but not others (untested major changes).  How can I do this with git svn?</p>
","0","7446","0"
"12903905","478513","2012-10-15 21:00:23","1","161","<svn><version-control><git-svn>","Moving from git to subversion (yes, that way round): Using the trunk","<p>I have been using git for 2 years now and love it.  However, I am doing some work for a company that insist in using svn so I need to port my git way of doing things to svn.</p>

<p>This is what I have learned so far:  </p>

<pre><code>svn co https://the.remote.repo
touch myrepo/trunk/mytest.c
svn add myrepo/trunk/mytest.c 
cd myrepo/
svn commit -m ""added test file""
</code></pre>

<p>which checks out my repo, adds a file, commit it and then pushes it.</p>

<p>I already have a non-svn project (non-git too, it's not under version control yet (awful I know)).  How can I turn my existing project into a svn repo ?  I can do this:</p>

<pre><code>svn co https://the.remote.repo my_existing_non_svn_directory
</code></pre>

<p>which creates a <code>trunk</code> sub-directory in <code>my_existing_non_svn_directory</code>.  With <code>git</code> there is no <code>trunk</code> so this would work but with <code>svn</code>, do I have to move all my code into the trunk ?  Is there some way round this or is it just an <code>svn</code> thing ?</p>

<p>Many thanks.</p>
","1","478513","0"
"1077131","112377","2009-07-02 23:07:18","0","148","<version-control><git-svn>","How do you check your database in and out of svn (or git)","<p>Currently I go into phpMyAdmin, export my database as a text file and then save it with the application files before I commit things to svn (or git).  Then of course, I've got to import it to production.</p>

<p>Is there a better way?</p>
","0","112377",""
"1084816","1665","2009-07-05 20:56:39","1","689","<git><git-svn>","fatal: unable to run 'git-svn'","<p>I've never seen this one before. I'm creating a development on a new Mac by cloning several svn repositories to local git repositories. Several pulled just fine, but one is being stubborn. They're all being pulled from the same svn server and there are no differences that I know of. I've tried to clone this one particular repository 4 times now and it's always the same result:</p>

<pre><code>r3378 = 0b759d82e55df2e54fdbcb74859e56cc4f40eb5c (svn/trunk)
Auto packing your repository for optimum performance. You may also
run ""git gc"" manually. See ""git help gc"" for more information.
Counting objects: 11253, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (11087/11087), done.
Writing objects: 100% (11253/11253), done.
Total 11253 (delta 7955), reused 0 (delta 0)
Removing duplicate objects: 100% (256/256), done.
fatal: unable to run 'git-svn'
</code></pre>

<p>None of the other output appears out of the ordinary or seems to indicate any kind of problem; the process just aborts. If I do a <code>git br -r</code>, not all of my branches appear (though it looks like my trunk and some of the branches import fine).</p>

<p>Has anyone ever seen this before? I need to get this repository cloned to be productive at home, but I need at least one of them maintenance branches that isn't being pulled. FWIW, the command I'm running is:</p>

<pre><code>me@mine [project-root] $ git svn clone https://svn.myserver.com/myproject my-project --trunk=trunk --branches=branches/*/* --prefix=svn/
</code></pre>

<p>I'm running git 1.6.3.3 and svn 1.4.4, both installed via MacPorts. Any thoughts would be much appreciated.</p>

<p><strong>UPDATE:</strong> I'm seeing the same problem on my Linux machine (Ubuntu 8.10) running git 1.6.3.2 and Svn 1.5.1.</p>

<p><strong>UPDATE:</strong> This may have something to do with the SSL location. If I do a <code>git clone</code> using the internal, non-SSL URI of the repository things seem to shake out fine. That means more use of VPN than I'd like, but at least it will work.</p>
","0","1665",""
"20246554","1668622","2013-11-27 15:32:31","2","327","<linux><git><svn><git-svn>","'git svn' does not start git-svn any more","<p>On my linux system (Centos 5.9) 'git svn' stopped working and I don't know why and how.</p>

<p>output is:</p>

<pre><code>$ git svn
git: 'svn' is not a git command. See 'git --help'.
</code></pre>

<p><code>/usr/libexec/git-core/git-svn</code> exists and is fully working ( I can start it manually). And all other git sub commands seem to work (at least the ones I tried).</p>

<p>I'm not aware of any action which can have impact on git-svn like this (e.g. no updates/restarts)</p>

<p>How does git 'find' the git-svn script? Is there a mapping which might be broken or does git look into <code>/usr/libexec/git-core</code>?</p>

<p>What has happened?</p>
","4","1668622",""
"30531272","2889642","2015-05-29 13:46:02","3","379","<git><svn><merge><git-svn>","Push git repository to remote subversion with history","<p>I'd like to push my existing git repository with its' complete history into a remote subversion repository via <code>git-svn</code>. Is this possible without losing the commit history? I already rebased my changes so, there is only a master branch up to date.</p>
","0","2889642","0"
"1140428","139781","2009-07-16 21:29:45","36","7413","<git><git-svn>","git svn fetch retrieves the same Subversion revision multiple times for branches","<p>I am seeing git svn fetch repeatedly retrieve the same Subversion
revisions when it finds branches in my Subversion repository.  We are
using the standard Subversion repository layout, with top level
/trunk, /tags, and /branches directories (and the git repository was
created with 'git svn init -s').  However, the problematic branches are
often copies made from a subdirectory inside of trunk, instead of
trunk.</p>

<p>The git svn fetch output typically looks something like this:</p>

<pre>
r2537 = d5b22e956157af036d4112e42e8fb927e45758c8 (trunk)
        M       Enterprise/VC/libgc/SymbolVenue.cpp
r2538 = cfed4ca0491da0b732f32bfff72ba678450a0915 (trunk)
Found possible branch point: http://repo/prod_repos/trunk/Enterprise/VC => http://repo/prod_repos/branches/file_conversion, 2523
W: Refspec glob conflict (ref: refs/remotes/scripter@832):
expected path: branches/scripter@832
    real path: trunk/Enterprise/Python
Continuing ahead with trunk/Enterprise/Python
W: Refspec glob conflict (ref: refs/remotes/trunk):
expected path: branches/trunk
    real path: trunk
Continuing ahead with trunk
Initializing parent: file_conversion@2523
        A       gc/QuoteService.cpp
        A       gc/TestSuite.h
        A       gc/quote_svc.pro
        A       gc/QuoteService.h
.....

r1 = d349ed8cb2d76596fe2b83224986275be4600fad (QuoteSvcFix442@2698)
        D       gc/FixMessageLogger.h
.....
r5 =
r19 =
r20 = 
.....

</pre>

<p>And we are back at revision 1.  git svn fetch then
continues to fetch revisions until it reaches the revision that
created the branch. </p>

<p>What am I doing wrong? Is there anyway for me to tell git svn fetch to
not retrieve revisions it has already pulled?</p>
","2","139781","0"
"12946096","184367","2012-10-18 02:11:02","2","376","<git><git-svn><git-rebase>","Why do I have to do a git rebase --skip (git svn)","<p>I did a <code>git svn rebase</code> to merge in remote changes and get a conflict. Resolved the conflict manually and tried <code>git rebase --continue</code>, however it didn't let me do it.</p>

<p>Then I found <a href=""http://tech.hickorywind.org/articles/2008/06/10/larry-vs-the-git-rebase-merge-conflict"" rel=""nofollow"">this</a>:</p>

<blockquote>
  <p>If it complains about ""did you forget to call 'git add'?"", then
  evidently your edit turned the conflict into a no-op change. Do a ""git
  rebase --skip"" to skip it. (Very weird, but true.)</p>
</blockquote>

<p>Can anyone explain to me why <code>git rebase --continue</code> didn't work and I had to do a <code>git rebase --skip</code>?</p>
","0","184367",""
"1256189","10738","2009-08-10 17:35:10","27","6858","<git><git-svn>","git-svn dcommiting a single git commit","<p>Given multiple unpushed <code>git</code> commits, is it possible to <code>git-svn dcommit</code> only one of those commits?</p>

<p>e.g. I have commit foo, bar, and baz, but right now I only want to have bar end up in the svn repo. Is this possible?</p>
","2","10738","0"
"1319319","75995","2009-08-23 19:20:16","6","1028","<svn><git><git-svn><branch>","git-svn isn't committing to branches, only trunk","<p>I'm working with an SVN repository that is laid out like this:</p>

<pre>
$SVN/[project]/trunk
$SVN/[project]/branches/[user]/[branch]
$SVN/[project]/tags/releases/[tag]
</pre>

<p>My .git/config looks like this:  </p>

<pre>
[svn-remote ""svn""]
  url = $SVN   
  fetch = project/trunk:refs/remotes/trunk   
  branches = project/branches/*/*:refs/remotes/*  
</pre>

<p>When I look at git branch -a, I see all the remote branches. Let's say I want to check one out, work on it, then commit the changes back. Here's is what I am trying to do:</p>

<pre>
git checkout -b comments erik/comments
.... work, commit locally ....
git svn dcommit
</pre>

<p>However, dcommit always pushes to $SVN/project/trunk. <code>git svn info</code> always reports the URL as $SVN/project/trunk</p>

<p>I've tried using --track, I've tried reseting with --hard. I'm out of ideas here. I suspect it's my [svn-remote], but that's just a hunch.</p>
","0","75995","0"
"1384962","75995","2009-09-06 05:45:26","3","2841","<svn><git><merge><git-svn><rebase>","Am I doing it wrong? Merging SVN changes from trunk into a git branch. Using merge --squash","<p>We use branches to do our work and keep trunk pristine for the most part. Before merging my changes from my branch into trunk, I want to make sure that I've got the latest changes from svn/trunk into my local branch. It's taken me a bit to figure it out but here's the workflow I've come up with, and I'd like to know if there's a better way of doing it.
(In this example I'm the only one on this branch, so there's no need to git svn rebase for changes to this branch)</p>

<pre>
git svn fetch
git co -b feature_branch svn/kastner/feature_branch
....work....commit...work...commit
git svn fetch
git merge svn/trunk --squash
git commit -m 'forward merge of svn/trunk'
git svn dcommit
</pre>

<p>The reasons I'm doing it this way:</p>

<ul>
<li>git merge without squash will add a git-svn-id pointing to trunk, so dcommit would push there</li>
<li>rebasing to svn/trunk would take this branch totally off the tracks</li>
</ul>
","0","75995","0"
"1453416","49032","2009-09-21 08:27:31","44","16096","<git-svn>","git-svn clone checkouts wrong repo?","<p>So I am trying to switch to git, by using git-svn. I am having a svn repo called <strong>myrepo</strong> from which I want to clone just the project called <strong>myproject</strong>. The thing is that by running the following command:</p>

<p><code>git svn clone path-to-repo/myrepo/myproject --stdlayout --prefix=svn myproject</code> </p>

<p>the whole repo <strong>myrepo</strong> is cloned rather than just myproject. I tried using -T, -t, -b as well to let git know about the layout of the project, but without any success. I always get the following output: </p>

<p><code>Using higher level of URL:  path-to-repo/myrepo/myproject =&gt;   path-to-repo/myrepo</code></p>

<p>and tries to clone that one. Am I doing something wrong? It might be that the svn repo layout could be broken or git incompatible ?</p>
","0","49032","0"
"13044117","1687651","2012-10-24 06:44:51","5","270","<git-svn>","Is there a hook for git-svn that prevents from dcommit'ing branches?","<p>I need some way to prevent myself from accidentally dcommitting local branches - except for master branch, of course. Is there an easy way to do that?</p>
","4","1687651","0"
"1534715","124497","2009-10-07 23:07:57","7","1248","<git><git-svn>","Find out if a particular commit exists on a git branch","<p>I see a commit in <code>foo</code> branch's log.  I'd like to determine if that commit has been cherry-picked onto branch <code>bar</code>.</p>

<p>If I were in a pure git environment I think the hashes would be the same, but the branch in question was pulled in using git-svn.</p>
","1","124497","0"
"1540496","21239","2009-10-08 21:07:20","5","6380","<svn><git><git-svn>","Svn -> git migration with several trunk/branches/tags","<p>I have a single SVN repository with the following <strong>current</strong> structure:</p>

<ul>
<li>project1

<ul>
<li>branches</li>
<li>trunk</li>
<li>tags</li>
</ul></li>
<li>project2

<ul>
<li>branches</li>
<li>trunk</li>
<li>tags</li>
</ul></li>
</ul>

<p>which <strong>originally</strong> had this structure:</p>

<ul>
<li>project

<ul>
<li>branches</li>
<li>trunk

<ul>
<li>proj1</li>
<li>proj2</li>
</ul></li>
<li>tags</li>
</ul></li>
</ul>

<p>That is, the project was split into two separate ""subrepositories"" (or whatever you want to call that)</p>

<p>Is there any way to migrate this to git <strong>without losing history</strong>?
Would svn2git be better that git-svn for this scenario? Is there any other migration tool?</p>

<p><strong>EDIT</strong>: I tried git svn clone as suggested but, as I thought, it didn't follow the move from the old structure to the new one. It only imported the revisions from the new structure.</p>
","2","21239","0"
"58521911","5338600","2019-10-23 11:32:27","0","270","<git-svn>","Are svn usernames in authors file for git svn --authors-file case sensitive?","<p>I want to use <code>git svn</code> with <a href=""https://git-scm.com/docs/git-svn#Documentation/git-svn.txt---authors-fileltfilenamegt"" rel=""nofollow noreferrer"">--authors-file=authors-file.txt</a>, with <code>authors-file.txt</code>:</p>

<pre><code>joe1 = Joe User &lt;user@example.com&gt;
Joe1 = Joe User &lt;user@example.com&gt;
JOE1 = Joe User &lt;user@example.com&gt;
</code></pre>

<p>Is the svn username case sensitive regarding <code>git svn --authors-file</code>? Will it still work if I omit the different variants?</p>
","0","5338600",""
"13091955","115612","2012-10-26 17:55:15","2","2208","<git><svn><git-svn><subgit>","Idea to mirror an svn to git","<p>Today, at my work we host our source code at a public svn repository that we don't admin access. Now, we want to use git (github) to host our source. For some internal reasons, the svn repository we use must mirror the git one. </p>

<p>Apparently, Subgit is the best tool to do this work, because the svn &lt;-> git is very smooth and stress-free (what it really seems to be according to my tests). So, the layout I've been thing is this one:</p>

<p>svn-repo &lt;- subgit-repo &lt;- github &lt;-> local git-repo from each developer.</p>

<p>The svn-repo will be read-only, i.e., it'll be only possible to commit using git.</p>

<p>Reading the Subgit blog I saw this <a href=""http://blog.subgit.com/readonly-subversiongit-mirror-with-subgit-and-svnsync/"" rel=""nofollow"">post</a>. In this post, the svnsync is used to synchronize the subgit-repo with the svn-repo, but the synchronization is one-way only, from svn-repo to subgit-repo :(</p>

<p>So, I've discovered svnadmin dump and load and I can use them to keep svn-repo synchronized with the subgit-repo. For example:</p>

<p>svnadmin dump --incremental subgit-repo | svnadmin load svn-repo</p>

<p>My question is: Is it a good idea to use svnadmin dump and load to keep my repositories synchronized?</p>

<p>Thanks!</p>
","0","115612",""
"13130351","836384","2012-10-29 22:06:48","5","694","<git><svn><git-svn>","How do I get git svn diff to use svn's internal diff engine?","<p>I need to make git svn diff produce diffs that are basically line-for-line equivalent to a diff produced by svn diff.  </p>

<p>I'm quite familiar with various scripts, like <a href=""https://gist.github.com/833214"" rel=""noreferrer"">git-svn-diff.sh</a>, that will make the patch compatible with svn, but where the diff is ambiguous, the two diff engines often differ, and I need to normalize this.  Basically, I need git svn diff, svn diff, and svnlook diff (for a svn pre-commit hook) to all produce exact-same patches (modulo translation), and as far as I can tell, since I can't override svnlook's diff engine, I am stuck using the internal diff engine for svn.  </p>

<p>That's fine, except there doesn't seem to be a tool that comes with svn that will let you diff two files with the internal engine.  I see that the source code has a tools/diff/diff.c, but no binary is distributed.  Am I stuck distributing this tool myself, does it exist and I missed it, or can I make a pre-commit hook produce a patch for a transaction using a different diff engine?</p>
","4","836384",""
"1705731","162877","2009-11-10 05:06:46","11","3690","<git><git-svn>","How do I fix checking out HEAD^ in git","<p>Okay so I made some changes in my project that resulted in a huge mess. I had already committed the changes so I could go back to it later, and then used git checkout HEAD^ to checkout the previous commit. Now as I'm making commits to my project it shows the SHA-1 on the command line as the working branch (instead of master)</p>

<p>I don't know everything there is to know about git but I'm guessing HEAD is still pointing to my broken copy as I'm going off in a tangent and have resolved the problem. How can I point HEAD to the latest commit I'm working from?</p>

<p>I'm guessing it has to do with rebase but I'm not 100% sure.</p>

<p>Thanks.</p>
","0","162877","0"
"13139133","1542339","2012-10-30 12:37:15","3","1394","<git><svn><version-control><cygwin><git-svn>","why git svn clone failed when using cygwin?","<pre><code> git svn clone https://192.168.11.115/svn/xx/test/
Initialized empty Git repository in /cygdrive/d/xx/test/.git/
Can't load '/usr/lib/perl5/vendor_perl/5.14/i686-cygwin-threads-64int/auto/SVN/_Core/_Core.dll' for module SVN::_Core: No such file or directory at /usr/lib/perl5/5.14/i686-cygwin-threads-64int/DynaLoader.pm line 190.
 at /usr/lib/perl5/vendor_perl/5.14/i686-cygwin-threads-64int/SVN/Base.pm line 59
BEGIN failed--compilation aborted at /usr/lib/perl5/vendor_perl/5.14/i686-cygwin-threads-64int/SVN/Core.pm line 5.
Compilation failed in require at /usr/lib/git-core/git-svn line 41.
</code></pre>

<p>it is confusing...</p>
","0","1542339","0"
"47912817","282585","2017-12-20 19:06:50","0","38","<git><svn><git-svn>","How to push local git repository to svn","<p>I have following setup:</p>

<p>1) Network drive location is the bare git repo (lets say it is ""X:\Projects\MyProject"")</p>

<p>2) My local location where my development is happening is C:\Projects\MyProject</p>

<p>3) My svn repo that doesn't follow standard layout of branches, tags, etc (not my decision) is at <a href=""http://mysite:8081/svn/MyProject"" rel=""nofollow noreferrer"">http://mysite:8081/svn/MyProject</a></p>

<p>My question is how do I push MyProject from 1 or 2 to SVN repo keeping all the history stored at 1? </p>

<p>I tried steps advised in <a href=""https://stackoverflow.com/questions/661018/pushing-an-existing-git-repository-to-svn"">Pushing an existing git repository to SVN</a> but on the step I am getting to git svn rebase I am getting error ""Unable to determine upstream SVN information from working tree history""</p>
","0","282585",""
"39815877","69537","2016-10-02 10:05:33","2","2315","<git><svn><migration><git-svn><version-control-migration>","How to import svn branch to git with trunk history","<p>This is the svn <code>trunk</code> path:</p>
<pre><code>http://svn/path/libs/trunk/mylib
</code></pre>
<p>And here is the <code>branch</code> path:</p>
<pre><code>http://svn/path/libs/branches/mylib/mylib-feature-branch
</code></pre>
<p>I need to migrate only the branch to git, but I also need its trunk history before the branch was created.</p>
<p>The following command fetches only the branch history:</p>
<pre><code>git svn clone http://svn/path/libs/branches/mylib/mylib-feature-branch
</code></pre>
<p>I have read <a href=""https://stackoverflow.com/a/15169641/69537"">this answer</a>, but could not figure out how I should change the <code>git svn clone</code> command to have the full history of the branch.</p>
","2","69537","0"
"13155875","1195496","2012-10-31 10:30:43","1","240","<git><svn><github><git-svn><git-branch>","git branches for SVN and Github","<p>Here is a simple path of what I'm doing:</p>

<pre><code>$ cd /newdir
$ git clone git@github.com:... .
$ git branch -m master github
$ git svn clone svn+ssh://... .
$ git branch -m master SVN
</code></pre>

<p>Then I have some scripts that do what is needed before pushing to Github.</p>

<p>I need the SVN and github branches because the files on both branches are the same but with different content. Before pushing files to Github I add some header. The two branches are also used to allow not all files on SVN go to Github.</p>

<p>All updates are from SVN branch to github branch. Occasionally I would add something on github branch that is not on SVN. I'll never send files/updates from github branch to SVN branch.</p>

<p>My problem 1 is that every time I do git svn fetch, a new master branch is created. How can I tell git svn fetch to use SVN local branch instead of master local branch?</p>

<p>After every:</p>

<pre><code>$ git svn fetch
</code></pre>

<p>I could:</p>

<pre><code>$ git checkout SVN
$ git merge master
$ git branch -d master
</code></pre>

<p>But does not look as a smart way of doing it.</p>

<p>Then I have a problem telling my local git that the local github branch is the remote/master branch at Github. The command</p>

<pre><code>$ git push git@github.com:...
</code></pre>

<p>That worked perfectly before renaming local branches, now is not doing what I want.</p>

<p>So my 2 questions:</p>

<pre><code>1 - Telling git svn to always use local SVN branch when getting updates from SVN server
2 - Telling git that local github branch is remote master branch at github
</code></pre>
","0","1195496",""
"935638","12006","2009-06-01 16:40:08","8","1446","<git-svn>","Why does git-svn dcommit leave duplicate commits in my git repo? Can I stop it doing that?","<p>My typical git-svn workflow is:</p>

<pre><code>git checkout -b story-xyz
git commit -a -m ""work""
git commit -a -m ""more work""
git checkout master
git svn fetch
git merge remotes/trunk
git checkout story-xyz
git rebase master (sometimes with -i)
git checkout master
git merge story-xyz
</code></pre>

<p>At this point I have my <code>master</code> and <code>story-xyz</code> branches pointing to the same commit, one or more commits ahead of <code>remotes/trunk</code>. Everything since <code>remotes/trunk</code> is in one linear history. </p>

<pre><code>last svn commit [remotes/trunk] &lt;--- work &lt;--- more work [master, story-xyz]
</code></pre>

<p>I then run </p>

<pre><code>git svn dcommit
</code></pre>

<p>I expected to see the commits between <code>remotes/trunk</code> and <code>master</code> become Subversion revisions, and end up with a single linear history with <code>remotes/trunk</code>, <code>master</code> and <code>story-xyz</code> all pointing to the latest revision, like so:</p>

<pre><code>last svn commit &lt;--- work &lt;--- more work [master, story-xyz, remotes/trunk]
</code></pre>

<p>My Subversion revisions go in fine, but I end up with a two-branched structure. The common root of the branch is the Subversion HEAD before I committed. Both branches contain the same series of commits, in the sense that they contain the same diffs. The branch <code>story-xyz</code> is at the head of one branch, <code>remotes/trunk</code> and <code>master</code> at the other:</p>

<pre><code>last svn commit &lt;--- work &lt;--- more work [master, remotes/trunk]
                  |
                  \- work &lt;--- more work [story-xyz]
</code></pre>

<p>The git commits that I had before running <code>git svn dcommit</code> are on the lower branch (<code>story-xyz</code>), with my git commit messages, git user name and email, and git commit timestamps. The commits on the upper branch are new git commits. They use my Subversion username, the timestamp when I ran the <code>dcommit</code>, and the commit messages have the <code>git-svn-id</code> field appended to them.</p>

<p>This is all OK, and I can carry on working. The problem is that I look in <code>gitk</code> and see what looks like an unmerged branch <code>story-xyz</code>. It's pretty hard to tell the difference between a story branch that I have merged back into <code>master</code>, and one that I haven't. The most obvious way to spot it is the duplicate commit messages. I could delete the <code>story-xyz</code> branch, but that feels like I'm not using git properly and I've lost some of my history.</p>

<p>Am I missing something that would stop <code>git-svn</code> from doing this? Or is this just one of the ways that interacting with Subversion dilutes the power and freedom of git?</p>
","0","12006","0"
"938041","8570","2009-06-02 05:44:38","5","669","<git><merge><git-svn>","How to fool git-svn to recognize merges made with svn?","<p>We have an SVN setup with stable trunk and unstable development branch. Dev work is (mostly) done on the branch and then merged to trunk before deployment. </p>

<p>I use git-svn as my SVN client. My merge process from unstable to trunk is as follows:</p>

<pre><code>git svn fetch
git co -b trunk svn/trunk 
git merge --no-ff svn/unstable
git svn dcommit
</code></pre>

<p><code>svn/*</code> are the remote SVN branches. </p>

<p>This of course requires that no one commits anything to the trunk before I am done, but this is not a problem in practice.</p>

<p>The benefits of this process is that git now records the parents of the merge commit in my local repository. This does not benefit my coworkers, but it does allow git to compute the common ancestor when <em>I</em> do the merge. This is very desirable.</p>

<p>And here is the rub. When someone else makes a merge, git doesn't know about it. Here is an example:</p>

<pre><code>  o-...-A---o---C--- unstable
 /
X--...--B---o---o--- stable
</code></pre>

<p>The unstable branch was created at point X. At point A we decide to merge changes from the unstable branch into the stable branch at point B. The common ancestor is correctly X.</p>

<p>Because the merge is not recorded in the git history, the following merge at C again assumes X is the common ancestor. I would like it be A, as in the following graph:</p>

<pre><code>  o-...-A---o---C--- unstable
 /       \
X---...---B---o---o--- stable
</code></pre>

<p>It is not absolutely necessary to get a graph that looks exacly like the one pictured. Any graph, which would recognize A as the common ancestor is fine by me.</p>

<p>I have some options in mind, such as a proper use of git-filter-branch or a ""fake"" commit which is never dcommited to SVN. However none of my attempts have worked sufficiently so far.</p>

<p>I am grateful for any ideas you can present. The procedure does not have to be automatic. The merges are pretty rare and I can live with the pain of doing it ""by hand"".</p>
","0","8570","0"
"20257485","3044274","2013-11-28 04:04:12","0","46","<git><svn><git-svn>","Use git-svn to work on an SVN repository with a non-standard layout","

<p>I am working on an SVN repo, <code>/path/to/svn/repo</code>, with this layout:</p>

<pre class=""lang-none prettyprint-override""><code>|--aaa/ #empty
|--branches/ #currently on r35, continuing...
|--|--file1
|--|--file2
|--|--file3
|--|--dir1/
|--|--dir2/
|--|--dir3/
|--tags/ #empty
|--trunk/ #empty
</code></pre>

<p>I use this command:</p>

<pre class=""lang-none prettyprint-override""><code>$ git svn clone -s /path/to/svn/repo
#some outputs...
#git checkout master to track r1 (or something like that).
</code></pre>

<p>Then I get a directory <code>repo</code>, which contains only <code>.git/</code>.</p>

<p><code>git branch -ra</code> outputs:</p>

<pre class=""lang-none prettyprint-override""><code>* master
  remotes/dir1
  remotes/dir2
  remotes/dir3
  remotes/trunk
</code></pre>

<p>Now I can checkout <code>dir1</code>, <code>dir2</code>, and <code>dir3</code>, but there is no <code>file1</code>, <code>file2</code>, <code>file3</code>, etc.</p>

<p>How can I checkout files <em>and</em> directories under the <code>branches/</code> directory as a whole branch That is, how can I use git-svn working with others who still use SVN?</p>

<p>Part of <code>./git/config</code>:</p>

<pre class=""lang-none prettyprint-override""><code>[svn-remote ""svn""]
    url = /path/to/svn/repo
    fetch = trunk:refs/remotes/trunk
    branches = branches/*:refs/remotes/*
    tags = tags/*:refs/remotes/tags/*
</code></pre>
","0","3044274",""
"1153633","27641","2009-07-20 13:35:09","6","1091","<svn><git><repository><git-svn>","How does git-svn behave with svn repositories that have changed layout?","<p>This question is similar to <a href=""https://stackoverflow.com/questions/540087/converting-non-standard-subversion-repository-to-git"">this one</a> and <a href=""https://stackoverflow.com/questions/572893/cloning-a-non-standard-svn-repository-with-git-svn"">this one</a>, but the scenario is slightly more complex.</p>

<p>I started out a few years ago with a private svn repository (which I use mainly for shared config files and the like between various machines). I wasn't too careful with the layout of the repository (where branches, go, etc.), so it changed quite a lot over time. This was, of course, a mistake, but it's too late now. More recently, I've migrated it to a more standard svn trunk/branches/tags layout, mainly with svn move commands, but of course the old history is still present in the repository (and is, frankly, a bit of a mess).</p>

<p>I'd now like to convert this permanently to a git repository. I've tried using git-svn, but it only seems to handle situations where a consistent trunk/branch/tag convention has been followed (yes, you can provide alternative names, but only one for each, it appears). Quite a lot of the history of my repository has trunk effectively in the root of the repository, for example, with tags/ and branches/ as sub-dirs.</p>

<p>What's the best way to handle all of this? Ideally I'd like the git repository I end up with to at least have all the history accessible in some way, even if the branches and tags aren't properly represented as first-class concepts in git.</p>

<p>More specifically, how will svn-git handle files outside the trunk/branches/tags subdirectories it's provided with? My observations so far are that it misses them out sometimes (definitely not OK), and other times adds them to the new repository.</p>

<p>Any thoughts would be appreciated.</p>
","3","27641","0"
"1271708","23691","2009-08-13 12:39:12","1","124","<git><git-svn>","Removing redundant repo directories when importing with git-svn?","<p>I am trying to import a svn repository that follows the standard svn convention (trunk/branches/tags). The ""problem"" is that below each copy there are two totally useless directories that I'd really like to eliminate in my git repo. My svn structure looks like this:</p>

<pre><code>trunk/redundantdir1/redunddantdir2/realstuff
branches/b1/redundantdir1/redunddantdir2/realstuff
tags/t1/redundantdir1/redunddantdir2/realstuff
...
</code></pre>

<p>In svn those two directories didn't hurt as much, because most users would just check out from ""realstuff"" and down. With git I'd really like to keep redundant-dirs out of the repo. I'm not prepared to start changing the svn structure, and I need to be able to keep the git repo in synch with subversion for (a short) time. Suggestions ?</p>
","0","23691",""
"1271449","25234","2009-08-13 11:36:05","35","10248","<svn><git><git-svn><collaboration>","How to set Subversion properties with git-svn","<p>Is there a way to set subversion properties on a git repository that was created by git-svn?</p>

<p>In my case, I want to edit the version of <code>svn:external</code>, <code>svn:ignore</code> and
<code>svn:executable</code>.</p>

<p>However, the only way to do so seems to involve a check-out with the subversion client. Is there a way to edit svn properties without having to check out the repository twice (one time for git and one time with svn for the properties)?</p>
","1","25234","0"
"1408381","83679","2009-09-11 00:07:24","28","8669","<git-svn><commit><dcommit>","Combine local Git commits into one commit for git-svn","<p>Currently, when I run <code>git svn dcommit</code> git creates a separate commit in SVN for every local commit I've made since last syncing with SVN. Is there any way for <code>dcommit</code> to instead combine all my recent local commits into one commit for SVN?</p>
","0","83679","0"
"20474891","1235802","2013-12-09 15:57:37","1","1430","<xcode><git-svn><osx-mavericks>","git-svn broken on Mac OS X Mavericks","<p>I am having some serious issue with git-svn. Until I did not update to Mac OS X Maverick, it all worked fine (source tree and git svn command line) but now there are following errors while I try to checkout a svn repository:</p>

<p>On command line : </p>

<pre><code> dyld: lazy symbol binding failed: Symbol not found: _Perl_Gthr_key_ptr
 Referenced from: /Applications/Xcode.app/Contents/Developer/usr/../Library/Perl/5.12/darwin-thread-multi-2level/auto/SVN/_Core/_Core.bundle
Expected in: flat namespace

dyld: Symbol not found: _Perl_Gthr_key_ptr
Referenced from: /Applications/Xcode.app/Contents/Developer/usr/../Library/Perl/5.12/darwin-thread-multi-2level/auto/SVN/_Core/_Core.bundle
Expected in: flat namespace

error: git-svn died of signal 5

http://undefinedvalue.com/2013/08/21/solving-symbol-not-found-perlgthrkeyptr-when-running-git-svn-certain-unnamed-operating-sy
</code></pre>

<p>When trying to checkout using Sourcetree:</p>

<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree svn clone SVN_PATH /Users/myusername/XCodeWorkspace/NewFolder 
Can't locate SVN/Core.pm in @INC (@INC contains: /usr/local/git/lib/perl5/site_perl     /Applications/SourceTree.app/Contents/Resources/git_local/lib/perl5/site_perl     /Library/Perl/5.16/darwin-thread-multi-2level /Library/Perl/5.16 /Network/Library/Perl/5.16/darwin-thread-multi-2level /Network/Library/Perl/5.16 /Library/Perl/Updates/5.16.2 /System/Library/Perl/5.16/darwin-thread-multi-2level /System/Library/Perl/5.16 /System/Library/Perl/Extras/5.16/darwin-thread-multi-2level /System/Library/Perl/Extras/5.16 .) at /Applications/SourceTree.app/Contents/Resources/git_local/lib/perl5/site_perl/Git/SVN/Editor.pm line 5.
BEGIN failed--compilation aborted at /Applications/SourceTree.app/Contents/Resources/git_local/lib/perl5/site_perl/Git/SVN/Editor.pm line 5.
Compilation failed in require at /Applications/SourceTree.app/Contents/Resources/git_local/libexec/git-core/git-svn line 81.
BEGIN failed--compilation aborted at /Applications/SourceTree.app/Contents/Resources/git_local/libexec/git-core/git-svn line 81.
Completed with errors, see above
</code></pre>

<p>Has anyone encountered this issue and managed to solve it? I tried the following solution:
<a href=""http://undefinedvalue.com/2013/08/21/solving-symbol-not-found-perlgthrkeyptr-when-running-git-svn-certain-unnamed-operating-sy"" rel=""nofollow"">http://undefinedvalue.com/2013/08/21/solving-symbol-not-found-perlgthrkeyptr-when-running-git-svn-certain-unnamed-operating-sy</a>
But it did not solve the issue.</p>

<p>P.S. I have 2 XCodes installed. /Application/XCode.app and /Application/XCode5 and in command line I have selected first path which is Xcode 4.6.3 (using xcode-select). </p>
","0","1235802",""
"39569097","3176004","2016-09-19 08:55:45","2","1039","<git><svn><git-svn>","How to ignore certain tag from svn to git migration","<p>I have standard SVN layout. I am doing migration from SVN to git on Windows.</p>

<p>Following is command i am using.</p>

<pre><code>git svn clone --stdlayout &lt;svn-repo-url&gt;
</code></pre>

<p>I want to ignore certain tags whose folder name has "":"" or colon special character using <code>--ignore-path</code>.</p>

<p>i tried to edit/update config, but still its tries to fetch all branches and tags.</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[svn-remote ""svn""]
    url = svn-url
    fetch = trunk:refs/remotes/origin/trunk
    branches = branches/{branch_a}:refs/remotes/origin/*
    tags = tags/{tag_a}:refs/remotes/origin/tags/*
</code></pre>

<p>i just wanted to get branch_a and tag_a
Please help, dont downvote as i am not able to understand it.</p>
","4","3176004","0"
"39577165","1668622","2016-09-19 15:48:58","0","99","<git><svn><merge><git-svn>","git-svn undo a non-dcomitted merge","<p>On a <code>git-svn</code> checkout I accidentally merged a branch onto <code>trunk</code>:</p>

<pre><code>git checkout -b my_branch
# make and commit changes
git checkout trunk
git svn rebase
git merge my_branch
# resolve conflicts
</code></pre>

<p>I did not <code>dcommit</code> yet but to me it looks like now I've lost the original <code>trunk</code> and have a shuffled commit history:</p>

<pre><code>$ tig
2016-09-19 15:09 other-dev  o {trunk} remote changes
2016-09-19 15:01 me         o changes on my_branch
2016-09-19 14:55 other-dev  o remote changes
2016-09-19 14:33 me         o changes on my_branch
2016-09-19 13:58 me         o changes on my_branch
2016-09-19 13:44 other-dev  o remote changes
2016-09-19 11:48 me         o changes
2016-09-16 07:41 other-dev  o changes
</code></pre>

<p>I now think bad things will happen if I try to <code>dcommit</code> this state.</p>

<p>I'd like to 'undo' the whole merge, go back to <code>my_branch</code>, rebase <code>trunk</code> and re-do the merge.</p>

<p>The only idea I come up with is to checkout <code>remote/trunk</code>, delete <code>local/trunk</code> and re-branch <code>local/trunk</code> from <code>remote/trunk</code>. </p>

<p>Is there an easier way to 'undo' a merge in this case?</p>
","0","1668622",""
"18693377","1957265","2013-09-09 07:29:02","5","642","<git><svn><git-svn><git-clone>","How to clone a nonstandard svn repo to git?","<p>I try to clone a svn repo to git, but some of the branches are in the svn root dir like follows.</p>

<p>I've tried </p>

<pre><code>$ git clone svn://url/svn-root -T trunk -b branches -b branch1 -b branch2
</code></pre>

<p>and</p>

<pre><code>$ git clone svn://url/svn-root -T trunk -b branches -b .
</code></pre>

<p>Both are failed to clone the <code>branch1</code> and <code>branch2</code> correctly. Please help.</p>

<pre><code>svn-root
├── branch1
├── branch2
├── branches
│   ├── branch3
│   └── branch4
└── trunk
</code></pre>
","0","1957265","0"
"1712956","150172","2009-11-11 04:12:45","4","7726","<git><git-svn>","git-svn problem","<p>Is it possible to clone a git repository which has more than one revisions? We tried to do it, and after the 1000'th commit it does a GC and exits leaving the clone in a unusable state.</p>

<pre><code>r998 = a5cb4f6a377b0ca80cd95d73b0e32f0552b9cdfd (git-svn)
M   trunk/asdf/asdf.java
r999 = a87b06ae8aa497bb28c294b7ff8668ce2e4c8fcc (git-svn)
D   tags/sdafasdf/asdfasdf.java
r1000 = 20b383d138499eee4f121079ae059458f3facc94 (git-svn)
Auto packing your repository for optimum performance. You may also
run ""git gc"" manually. See ""git help gc"" for more information.
Counting objects: 18103, done.
Compressing objects:  61% (10590/17116)      7116)   
Compressing objects: 100% (17116/17116), done.
Writing objects: 100% (18103/18103), done.
Total 18103 (delta 9301), reused 0 (delta 0)
Removing duplicate objects: 100% (256/256), done.
root@host:~#
</code></pre>

<p>Attempting to continue the checkout by typing the command again results in the following:</p>

<pre><code>root@host:~/repo# git svn clone https://host/svn/repo
Remote ref refs/remote/git-svn is tracked by
  ""svn-remote.svn.fetch=:refs/remotes/git-svn""
and
  ""svn-remote.svn.fetch=:refs/remotes/git-svn""
Please resolve this ambiguity in your git configuration file before continuing
</code></pre>
","0","150172","0"
"20713812","61624","2013-12-20 23:59:59","0","37","<git><svn><version-control><git-svn>","Using git svn, I just rebased feature branch onto master and fast forwarded master. How do I check that my master's history is linear?","<p>I'm using git svn and I have two local branches: master and feature.  My feature is done and now I want it to be part of the master branch.  I think I'm supposed to do this: </p>

<pre><code>git checkout feature
git rebase master
git checkout master
git merge feature --ff-only
</code></pre>

<p>Assuming that's right, I <em>should</em> be able to <code>git svn dcommit</code> master back to the svn repo.  But, is there a way to make sure my master is in the correct state before I attempt that?  Specifically, I want to make sure my master's history is linear.  How can I do that?</p>

<p>I tried running </p>

<pre><code>git log --decorate --graph --oneline
</code></pre>

<p>But the output is massive and I'm not sure how to interpret it.  I think it may contain all the history of my svn repo.  All I want to see is the history of my local master to make sure it's linear.  </p>
","0","61624",""
"1720753","96588","2009-11-12 08:32:44","0","161","<svn><git><git-svn>","git svn clone result cannot be cloned","<p>I've got several Subversion repositories for which I'm the only committer. Based on Paul Dowman's excellent <a href=""http://pauldowman.com/2008/07/26/how-to-convert-from-subversion-to-git/"" rel=""nofollow noreferrer"">instructions</a>, I did the following:</p>

<pre><code>$ git svn clone https://localhost/svn/settings --no-metadata -Aauthors.txt
Initialized empty Git repository in .git/
...
r1000 = 8655353158ef2e7be84c0115b16a14d327e9e842 (git-svn)
Running git repack -d ...
Counting objects: 5598, done.
Compressing objects: 100% (4646/4646), done.
Writing objects: 100% (5598/5598), done.
Total 5598 (delta 3023), reused 0 (delta 0)
Done repacking
</code></pre>

<p>I know there are more than 1000 revisions in the repo; how do I clone all of them?</p>

<p>Edit: Tried adding <code>-r 1:HEAD</code>, but it didn't make any difference.</p>

<p>Edit 2: Tried adding <code>--repack=0</code>, still doesn't work.</p>
","1","96588","0"
"1724602","201991","2009-11-12 19:08:36","0","112","<git-svn>","How do you view the status of your svn-git repo?","<p>I understand how to initialize a git-svn repo, create a branch, do some work, merge branch, then use <code>git svn rebase</code> and <code>git svn dcommit</code> to push back to the svn repo. But between these two commands, how can you get a status of what is different between the two repos? Something like a <code>git status</code> that tells you that you have x number of files that have been changed.</p>
","0","201991",""
"1727076","95195","2009-11-13 04:07:10","0","218","<git-svn>","Best way to import a svn repo to git that has trunk, tags, branches and releases","<p>I run a project on <a href=""http://sf.net"" rel=""nofollow noreferrer"">sourceforge</a> called <a href=""http://www.sf.net/mqmanager"" rel=""nofollow noreferrer"">mqmanager.NET</a> that I inherited from the original author. Long story short I want to migrate this, and the rest of, my sourceforge projects to github. The problem here is that the typical import process assumes you have trunk, tags, and branches. I have these plus a <strong>releases</strong> folder. The particular command I am currently using is:</p>

<pre><code>git.exe svn clone ""https://mqmanager.svn.sourceforge.net/svnroot/mqmanager""  ""C:\src\mqmanager"" -T trunk -b branches -t tags
</code></pre>

<p>Now, I'm mainly concerned by trunk and releases, but I'd like to keep everything. Is there another version of the command I should be using?</p>
","0","95195",""
"20788062","261052","2013-12-26 16:39:45","1","1977","<git><svn><git-svn>","svn2git or git svn import","<p>I'm about to migrate my SVN repo to GIT.
I'm going to use svn2git which uses the git-svn.</p>

<p>Is there any way the process modifies the SVN repo? Since obviously this is very sensitive to change, I want to be sure that the original SVN will not be affected in any way.</p>
","1","261052","0"
"1892133","78720","2009-12-12 03:12:07","6","5010","<svn><git><branch><git-svn>","How do I fetch/clone only a few branches using git-svn?","<p>The SVN repository that I am working with has a rather large number of branches.  I am only interested in working with three of them and maybe another new SVN branch that will be created in the future.  What I have figured out so far is that the command <code>git svn clone URL -T trunk -b branches -t tags</code> will clone all SVN branches and subsequent <code>git svn fetch</code> commands will also operate on all SVN branches.</p>

<p>Is there a way for me to specify the few branches that I want to work with? I most likely don't have enough disk space for all the SVN branches on my dev machine and  I'd like to avoid an extremely time-consuming <code>git svn clone</code> operation.</p>
","0","78720",""
"1899612","17382","2009-12-14 08:17:52","3","5373","<git><git-svn>","git svn fetch fatal: write error: Invalid argument","<p>Odd situation is happening when I try to clone a remote svn repository.</p>

<p>When I type:<br>
git svn fetch<br>
<br>
Git will fetch the first 20 revision of the remote repository then at some point after 20 revisions it fails and just prompts the following error message.</p>

<p>fatal: write error: Invalid argument</p>

<p>Then just sits there doing nothing else. Repeating the same git init and then re fetching again, results in exactly the same place it reporting the fatal error.</p>

<p>Any idea what may be causign this to happen? I'm currently running the following versions:</p>

<p>TortoiseGit 1.2.1.0 <br>
git version 1.6.4.msysgit.0 </p>
","1","17382",""
"39893101","1798015","2016-10-06 10:04:32","2","1932","<git><git-svn><git-push>","How to set a maximum commit count on git push","<p>I am in the process of migrating an existing SVN repository (only trunk) with over 10000 commits to a hosted Git solution (in my case BitBucket).</p>

<p>Converting the SVN repo to a local Git was no problem but now I want to push all revisions into an empty Git repo online.</p>

<p>But doing the push from TortoiseGit, it stops with this output:</p>

<pre><code>git.exe push -v --progress ""origin"" master

Counting objects: 198817, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (83858/83858), done.
POST git-receive-pack (chunked)
Writing objects: 100% (198817/198817), 1.54 GiB | 460.00 KiB/s, done.
Total 198817 (delta 130510), reused 178506 (delta 112822)
fatal: The remote end hung up unexpectedly
fatal: The remote end hung up unexpectedly
error: RPC failed; curl 52 Empty reply from server
Pushing to https://__removed__@bitbucket.org/__removed__/__removed__.git
Everything up-to-date


git did not exit cleanly (exit code 1) (3644609 ms @ 06.10.2016 11:16:23)
</code></pre>

<p>I think the only solution to my problem is only to push 1000 commits at a time. But how can I limit to the first 1000 commits that aren't already on the server?</p>

<p>I dont want to specify each commit to push (like in <a href=""https://stackoverflow.com/questions/604399/how-do-you-push-only-some-of-your-local-git-commits"">this question answered</a>). I simply want to set a maximum count.</p>
","4","1798015","0"
"35206317","3983424","2016-02-04 16:26:57","0","200","<svn><makefile><git-svn>","'SVN_REV' undeclared when build the target in git-svn environment","<p>I use the following command to get the repository from the svn server:</p>

<pre><code>git svn clone ...
</code></pre>

<p>However when build the specific target, the stdout shows the following:</p>

<pre><code>error: 'SVN_REV' undeclared here (not in a function)
__attribute__((used)) u32 sys_fw_info = SVN_REV;
</code></pre>

<p>Here is the simplified makefile:</p>

<pre><code>haha: dirs revision
    -$(MAKE) -C ./src

revision:
    -$(SVNVERSION) . version.tmp build/svnrev.h
</code></pre>

<p>I have tried the following: </p>

<ol>
<li><p>If I copy the .svn folder from the normal checkout repository in svn server [since folder I got from git-svn only has .git folder], then I can build the target of haha in the git-svn environment.</p></li>
<li><p>If I manually do the following command and don't copy the .svn folder:</p>

<pre><code>SubWCRev.exe . version.tmp  build/svnrev.h
</code></pre></li>
</ol>

<p>The building process still fail... 
Have the following two questions:</p>

<ol>
<li>I don't know if the .svn folder has some dependency with building process? </li>
<li>How can I use the git-svn elegantly locally?</li>
</ol>

<p>Thanks in advance!!!  </p>
","0","3983424",""
"20931689","520957","2014-01-05 08:45:18","1","63","<git><git-svn><tortoisegit>","How to list committed git files per size?","<p>Is it possible to list the set of committed files in a git repository, per file size? </p>

<p>I am using TortoiseGit under windows 7.</p>
","0","520957","0"
"39965621","541686","2016-10-10 19:43:42","1","611","<git><git-svn>","How to trim a git-svn repository to remove branches and tags WITHOUT re-cloning?","<p>If I forgot to only check out the <code>trunk</code> of an SVN repository and instead checked out everything, is there any way to trim my git-svn repository afterwards <strong>without</strong> re-cloning it?</p>
","14","541686","0"
"21014722","2146996","2014-01-09 08:06:13","1","1216","<git><github><git-svn><bitbucket>","git add is adding files to staging area","<p>I am trying to commit some modified files to my git staging area with command <code>git add</code>. However the files are not adding to the staging area.</p>

<p>The below is the output of <code>git status</code>:-</p>

<pre><code>  :~/Desktop/production-18-12-2013$ git status
    # On branch master
    # Changes not staged for commit:
    #   (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
    #   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
    #
    #   deleted:    app/assets/javascripts/application.js~
    #   deleted:    app/assets/javascripts/controllers/app.js~
    #   deleted:    app/assets/javascripts/menu.js~
    #   deleted:    app/assets/javascripts/services/userAPI.js~
    #   deleted:    app/assets/stylesheets/application.css~
    #   deleted:    app/assets/stylesheets/safariwindows.css~
    #   deleted:    app/assets/stylesheets/windowsapplication.css~
    #   deleted:    app/controllers/appi_controller.rb~
    #   deleted:    config/initializers/event_machine.rb~
    #   deleted:    public/assets/application-042a070a3832c680df06e7ea031766e7.js
    #   deleted:    public/assets/application-042a070a3832c680df06e7ea031766e7.js.gz
    #   deleted:    public/assets/application-17a2431c4f2227103425cec76c5b4507.js
    #   deleted:    public/assets/application-17a2431c4f2227103425cec76c5b4507.js.gz
    #   deleted:    public/assets/application-26253c7e7241dfc73bddea7e43ece04c.js
    #   deleted:    public/assets/application-26253c7e7241dfc73bddea7e43ece04c.js.gz
    #   deleted:    public/assets/application-321c36234afb9e931f847afc9e15356a.js
    #   deleted:    public/assets/application-321c36234afb9e931f847afc9e15356a.js.gz
    #   deleted:    public/assets/application-432a3132331e44e99dc825681de186fc.js
    #   deleted:    public/assets/application-432a3132331e44e99dc825681de186fc.js.gz
    #   deleted:    public/assets/application-4ce91df18f6d02b72a2d4fd6288b7e27.js
    #   deleted:    public/assets/application-4ce91df18f6d02b72a2d4fd6288b7e27.js.gz
    #   deleted:    public/assets/application-53f94195fd52dfe8bf42d8ce6f1d34ed.js
    #   deleted:    public/assets/application-53f94195fd52dfe8bf42d8ce6f1d34ed.js.gz
    #   deleted:    public/assets/application-5a7c32b4917ea37959fce75e96cda547.css
    #   deleted:    public/assets/application-5a7c32b4917ea37959fce75e96cda547.css.gz
    #   deleted:    public/assets/application-8c5483b4973e96b28612ecb18e4c3942.js
    #   deleted:    public/assets/application-8c5483b4973e96b28612ecb18e4c3942.js.gz
    #   deleted:    public/assets/application-a81a1274e455dbead72c22762b3c2a34.js
    #   deleted:    public/assets/application-a81a1274e455dbead72c22762b3c2a34.js.gz
    #   deleted:    public/assets/application-ceed710b515059aeb59a02f72b0b4dc3.js
    #   deleted:    public/assets/application-ceed710b515059aeb59a02f72b0b4dc3.js.gz
    #   deleted:    public/assets/application-ddabc637f1d7ed563483b991094b9692.js
    #   deleted:    public/assets/application-ddabc637f1d7ed563483b991094b9692.js.gz
    #   deleted:    public/assets/application-e47883af638c3eaeb828901746dc14a0.js
    #   deleted:    public/assets/application-e47883af638c3eaeb828901746dc14a0.js.gz
    #   deleted:    public/assets/application-e6c199f7b655bba181fdbabb83702335.js
    #   deleted:    public/assets/application-e6c199f7b655bba181fdbabb83702335.js.gz
    #   deleted:    public/assets/application-f546c5ac258ae2f4b2051bd5c09ad581.js
    #   deleted:    public/assets/application-f546c5ac258ae2f4b2051bd5c09ad581.js.gz
    #   deleted:    public/assets/application-f813e11ed5210d25e039736f7300b550.css
    #   deleted:    public/assets/application-f813e11ed5210d25e039736f7300b550.css.gz
    #   deleted:    public/assets/application.css
    #   deleted:    public/assets/application.css.gz
    #   deleted:    public/assets/application.js.gz
    #   deleted:    public/assets/application2-6a76bc78fbb8e38bfeb101cd769b3978.css
    #   deleted:    public/assets/application2-6a76bc78fbb8e38bfeb101cd769b3978.css.gz
    #   deleted:    public/assets/application2.css
    #   deleted:    public/assets/application2.css.gz
    #   deleted:    public/assets/ie-6051136603bde9acd2baf93c330af904.css
    #   deleted:    public/assets/ie-6051136603bde9acd2baf93c330af904.css.gz
    #   deleted:    public/assets/ie.css
    #   deleted:    public/assets/ie.css.gz
    #   deleted:    public/assets/jquery.min-2df7da5d7895835e8cc10130711ba4a6.map
    #   deleted:    public/assets/jquery.min.map
    #   deleted:    public/assets/manifest.yml
    #   deleted:    public/assets/rails-aa8aea913cd3b23f0cdf2a950a48069a.png
    #   deleted:    public/assets/rails.png
    #   deleted:    public/assets/safariwindows-64111c331f7b5da9cc8cbb61b70edba5.css
    #   deleted:    public/assets/safariwindows-64111c331f7b5da9cc8cbb61b70edba5.css.gz
    #   deleted:    public/assets/safariwindows.css
    #   deleted:    public/assets/safariwindows.css.gz
    #   deleted:    public/assets/safariwindows2-54679b90e662ef9657c0bac13cbfca79.css
    #   deleted:    public/assets/safariwindows2-54679b90e662ef9657c0bac13cbfca79.css.gz
    #   deleted:    public/assets/safariwindows2.css
    #   deleted:    public/assets/safariwindows2.css.gz
    #   deleted:    public/assets/untitled
    #   deleted:    public/assets/windowsapplication-ef6d76bdf635d72d487ee4c51cea9b27.css
    #   deleted:    public/assets/windowsapplication-ef6d76bdf635d72d487ee4c51cea9b27.css.gz
    #   deleted:    public/assets/windowsapplication.css
    #   deleted:    public/assets/windowsapplication.css.gz
    #   deleted:    public/assets/windowsapplication2-85d68c3cd237247123bb47428dc8a138.css
    #   deleted:    public/assets/windowsapplication2-85d68c3cd237247123bb47428dc8a138.css.gz
    #   deleted:    public/assets/windowsapplication2.css
    #   deleted:    public/assets/windowsapplication2.css.gz
    #
    no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>and then write the command <code>git add</code></p>

<p>But this is not helping me and <code>git status</code> is giving me the above output(same)</p>

<p>Is this because of <code>git-update-index-assume-unchange</code> command which i had put before git status</p>

<p>If so then how to solve this issue.I have gone to various forums but not getting the output.</p>

<p>Please help me with this</p>
","1","2146996",""
"18749072","388325","2013-09-11 18:53:57","0","38","<git-svn><remote-branch>","Command to show branch being tracked and revisions behind by git svn","<p>I just want to know to what I am pushing when I use <strong>git svn dcommit</strong> and from what I am pulling when I <strong>git svn rebase</strong>.</p>

<p>Is there a commandline command I could execute that would give me that information?  I just want the branch name.</p>

<p>Also, is there any way to see how many revisions I'm behind or ahead with git svn?</p>

<p>Thanks!</p>
","0","388325",""
"2086644","233992","2010-01-18 14:27:45","6","1285","<git><git-svn>","Is git push --mirror sufficient as a backup for repository that is used with git-svn?","<p>I would like to create a backup of a git repository that I use for tracking a svn repository (with git-svn). Can I use git push --mirror for that purpose or would I lose any git-svn related information when I needed to restore the backup?</p>
","0","233992","0"
"2097737","","2010-01-19 22:39:40","4","881","<git><git-svn>","Command (or script) similar to git status to show all local commits since last git svn dcommit?","<p>This python script is the best I have come up with so far. I just hacked it together and on a cursory first couple uses, seems to be acting correctly, but I can't help but feel there is an easier way to do this or even something built in (though I have searched and searched).</p>

<p>Thanks for the help.</p>

<pre>
#!/usr/bin/env python                                                                            
import sys
import subprocess

s = subprocess.Popen(""git svn log --show-commit --oneline"".split("" ""),
                     stdout=subprocess.PIPE)

# Grab the last svn commit's data                                                                
revision, sha, message = s.stdout.readlines().pop(0).split("" | "")

# Grab display of commits since svn rebase                                                       
s = subprocess.Popen((""git log %s..HEAD --oneline"" % sha).split("" ""),
                     stdout=subprocess.PIPE)
log = s.stdout.read().strip()

if len(log.splitlines()) > 0:
    print (""%d commits ahead of svn. To push them to svn, use 'git svn dcommit'.\n""
               % len(log.splitlines()))
    print log
else:
    print ""No local commits that need 'git svn dcommit'""
sys.exit(0)
</pre>
","0","","0"
"40113612","6776","2016-10-18 16:36:03","0","634","<git><git-svn>","Append command result to git log pretty format","<p>I have a bunch of pretty <code>git log</code> aliases using pretty-format, like such:</p>

<pre><code>lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit
</code></pre>

<p>which gives me this:</p>

<pre><code>* cb847da - (HEAD -&gt; master, origin/trunk) foo (4 hours ago) &lt;thomasb&gt;
* 2117663 - bar (8 hours ago) &lt;thomasb&gt;
</code></pre>

<p>I'm actually using git-svn, and I have a different command to list the SVN revisions:</p>

<pre><code>slg = svn log --oneline --show-commit
</code></pre>

<p>I want to insert the SVN revision inside my <code>git lg</code> output. I have found <a href=""https://stackoverflow.com/a/2870979/6776"">how to get the SVN revision of a commit</a> (<code>git svn find-rev $(git log --max-count 1 --pretty=format:%H)</code>), but I can't find how to insert a command result inside a pretty-format, so I would get something like this for instance:</p>

<pre><code>* cb847da - r1234 - (HEAD -&gt; master, origin/trunk) foo (4 hours ago) &lt;thomasb&gt;
* 2117663 - r1233 - bar (8 hours ago) &lt;thomasb&gt;
</code></pre>

<p>Any idea?</p>
","0","6776",""
"2202135","83100","2010-02-04 18:24:07","2","263","<git><git-svn><git-merge>","Merge two identical git-svn branch HEADs without losing link with git-svn remote branch?","<p>I've got a pair of git-svn branches which have been <em>manually</em> kept in sync by applying patches and what-not; <code>git-merge</code> has not been used. The branches are now in sync, which is to say that <code>git diff A B</code> has no output at all. </p>

<pre><code>[A] +----+--+--+--+--------+---+--------+-+---+-&gt;
     \  /  X  /  /   \ \  X   /        / / \ X
[B] --+-----+---------+-+--+----------------+-+-&gt;
</code></pre>

<p>How can I get git to consider the two branches as merged, such that a future <code>git merge</code> will use today's HEAD as the merge-base, <em>without</em> losing the git-svn association to SVN?</p>

<h2>What I've tried</h2>

<ol>
<li><p><code>git checkout A; git merge B</code></p>

<p>This selects the SVN branch point as the merge-base, and then attempts to resolve years of duplicated cross-merging that was done manually.</p></li>
</ol>

<p>(This list expected to grow)</p>
","0","83100",""
"2286297","139685","2010-02-18 04:29:12","7","1541","<git><git-svn>","What are the advantages of git over git-svn?","<p>The advantages of using git-svn over git are obvious(svn compatibility), but what are the advantages of git over git-svn?</p>
","1","139685","0"
"2286107","275763","2010-02-18 03:30:04","0","206","<git-svn>","Using git and svn both as shared repositories","<p>We have multiple teams working on a common svn repository. Is there a way to have one of the teams to work on git and other teams continue using svn.</p>

<p>What I like to do is have a shared (central) git repository for one of the ""GIT"" team (multiple developers). The ""GIT"" team Developers clone from shared git repository to dev. machines and push changes to shared git repository.</p>

<p>Merge the changes from shared Git repository to SVN periodically.(we could call this as promoting code to central SVN repository).</p>
","0","275763",""
"2399273","194306","2010-03-08 04:23:19","5","3228","<git><cygwin><git-svn>","Git pull cygwin not a git-command","<p>Hi I just installed git cygwin on my windows pc at work, but somehow git pull doesn't seems to be working.</p>

<p>the out put is :</p>

<p>git: 'pull' is not a git-command. See 'git --help'.</p>

<p>Did you mean this?
pull</p>

<p>Cant seem to figure this one out, this works fine using the msysgit version.</p>
","0","194306","0"
"2405314","226020","2010-03-08 22:34:17","4","2140","<git><git-svn>","git-svn error importing repository: fatal: Not a valid object name","<p>I'm getting the following error attempting to clone an svn repository.<br>
Anyone seen this before? </p>

<pre><code>$ git svn clone -s https://npanday.svn.codeplex.com/svn npanday

Initialized empty Git repository in /home/kurtharriger/npanday/.git/

fatal: Not a valid object name 
ls-tree -r --name-only -z : command returned error: 128

$ git --version

git version 1.7.0.1
</code></pre>
","0","226020","0"
"18808207","10631","2013-09-15 01:58:15","0","59","<git-svn><branching-and-merging><git-remote>","Use git-svn with multiple svn repos and branches","<p>I have a svn branch that I had been working on and decided to start using git-svn to work locally. Now I have two problems. I want to move my work into another svn repository (on the same host) but I'd first like to merge the latest work from trunk. How would I do this with git-svn? Also, how would I continue my work in a separate svn-repo while continually merging work from the original repo? Also, I don't want to checkout the entire history from the original trunk because the project is rather huge. I am new to git and to git-svn, though I've taken a crash course in git branching and I feel confident enough to use advanced commands like rebase and cherry-pick. I mainly need to know how to apply these concepts thru git-svn. Do the svn repos get setup as a git remote somehow? Are there good resources on the net explaining how it works? Any guidance is much appreciated.</p>
","0","10631",""
"18812536","717822","2013-09-15 12:46:32","0","163","<git><svn><git-svn>","Checkout a specific svn release in the local git repository","<p>I would like to checkout a specific check-in just by knowing the <code>svn</code> release number. For example, when I clone a subversion repository to a local git using <code>git-svn clone</code>, I get the following message:</p>

<pre><code>r5119 = 1563c2dcb9f456d5ba1ba2c277bf7969c452d18b (refs/remotes/git-svn)
    M   check-svn.c
    M   Makefile
r5127 = 1b656753fe46287f52f29359793b2d8671137f4b (refs/remotes/git-svn)
    M   check-svn.c
r5129 = edd06d73d270769cc46db58d9a1a0a4683c95be1 (refs/remotes/git-svn)
    M   check-svn.c
r5132 = 39bf8333113f1ccc6b839cf944dd88c560509065 (refs/remotes/git-svn)
Checked out HEAD:
  https://svn.myserver.net/check-svn r5132
</code></pre>

<p>So, we can see that the <code>svn</code> release tags are known (<code>r5119</code>, <code>r5127</code>, ...).</p>

<p>What I would like to do is to get back to an old release of the <code>svn</code> repository on my local <code>git</code> clone just by knowing the <code>svn</code> release number. For example, to do something like:</p>

<pre><code>git checkout r5129
</code></pre>

<p>And get the code of the <code>svn</code> release <code>r5129</code> in my local <code>git</code> clone.</p>

<p>My problem is that I don't see how to do this even if I see that the tags are well positioned. For example, when I do a <code>git shortlog</code> as follow:</p>

<pre><code>  git-svn-id: https://svn.myserver.net/check-svn@5119 bb18-a6e4ad0ded21
  git-svn-id: https://svn.myserver.net/check-svn@5127 bb18-a6e4ad0ded21
  git-svn-id: https://svn.myserver.net/check-svn@5129 bb18-a6e4ad0ded21
  git-svn-id: https://svn.myserver.net/check-svn@5132 bb18-a6e4ad0ded21
</code></pre>

<p>So, how to do such feature easily (if possible without extra manipulation at the initial cloning) ?</p>
","2","717822",""
"31601705","3333603","2015-07-24 03:27:45","1","71","<git><svn><tortoisesvn><git-svn><tortoisegit>","git checkout from network fileshare","<p>I have install git and tortoisegit
successfully create a bare repo</p>

<p>location of my network folder
<code>X:\Test\Test_Source\Test_repo\Test_Repo.git</code>  --> <code>bare repo</code></p>

<p>These are the folder in my repo</p>

<p><code>1. A</code>
<code>2. B</code>
<code>3. C</code></p>

<p>How to checkout only folder <code>B</code>?</p>
","4","3333603",""
"18836343","584676","2013-09-16 20:02:21","1","1329","<git><git-svn>","git svn rebase not working but git svn fetch does","<p>I'm having an issue where when I run</p>

<pre><code>git svn rebase
</code></pre>

<p>or</p>

<pre><code>git svn rebase -l
</code></pre>

<p>nothing happens. However,</p>

<pre><code>git svn fetch
</code></pre>

<p>brings down new revisions successfully. This started happening when I used 'gitk' to revert my working copy to a previous revision, then accidentally ran ""git reset --hard HEAD"" without switching back over to my master branch. Any ideas on how to fix this without re-cloning?</p>

<p><em><strong>EDIT</em></strong></p>

<p>'git status' output</p>

<pre><code># On branch master
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       several untracked files
nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>'git branch -avv' shows all of my local and remote branches available to me. There is a lot of output, so what exactly should I be looking for?</p>

<p>It is worthy to note that I can fetch new revisions from another branch, it seems that my master branch is what is screwed up.</p>
","4","584676",""
"9072256","191438","2012-01-30 23:16:26","5","1189","<git><git-svn>","git-svn trying to commit to wrong branch","<p><code>git-svn dcommit</code> is trying to push to the wrong SVN branch. Here's what I did:</p>

<pre><code>git checkout -b branch_a svn/branch_a  # git-svn clone prepended all remote SVN branches with svn/
git svn branch -m ""a message"" branch_b
git checkout -b branch_b svn/branch_b

&lt;make some commits&gt;

git svn dcommit
git checkout branch_a
git svn rebase
git checkout branch_b
git rebase branch_a
</code></pre>

<p>This is the ""correct"" branching/merging strategy I interpret from <a href=""https://stackoverflow.com/questions/1129688/git-svn-workflow-feature-branches-and-merge"">this</a> StackOverflow question. </p>

<p>Now I'm in a pickle. <code>git svn dcommit</code> from <code>branch_b</code> attempts to push to the SVN URL for <code>svn/branch_a</code>. This is confirmed by the output of <code>git svn info</code>. This is also not what I want or expect. </p>

<p>Interestingly, <code>git log --grep='^git-svn-id:' --first-parent -1</code> shows the correct SVN branch, the URL for <code>svn/branch_b</code>. I've read that this command is <em>supposed</em> to reveal where git-svn will dcommit to.</p>

<p>So: </p>

<ol>
<li>What did I do wrong?</li>
<li>How can I fix it (i.e., push <code>branch_b</code> to <code>svn/branch_b</code></li>
</ol>
","1","191438",""
"27169442","720297","2014-11-27 11:19:54","1","163","<git><svn><branch><git-svn>","Can't checkout new local branch after successfull git svn fetch","<p>I am using git locally with an SVN repository, with the script ""git-svn"" that makes the translation. I have no choices about this since my colleagues are still using svn and don't plan on switching to git.</p>

<p>Today I wanted to report a commit on a new remote branche, so I used the command <code>git svn fetch</code> and got something like</p>

<pre><code>Found possible branch point: http://subversion.mycompany.fr/svn/svnroot/myprog/tags/10.225 =&gt; http://subversion.mycompany.fr/svn/svnroot/myprog/branches/BR_10.225_PROD, 58136
Found branch parent: (refs/remotes/branches/BR_10.225_PROD) 184efd022c6930cb1890a5701b43ddcb1a2972df
Following parent with do_switch
Successfully followed parent
r58137 = 36565c46d9e522268ebceeca30528bee088c3091 (refs/remotes/branches/BR_10.225_PROD)
</code></pre>

<p>Now I wanted to switch to this new branch so I used the command <code>git co BR_10.225_PROD</code>. But I got the error </p>

<pre><code>error: pathspec 'BR_10.225_PROD' did not match any file(s) known to git.
</code></pre>

<p>I don't understand because this is not the first time I do this kind of operation, and it used to work easily.</p>

<p>Any hint?</p>
","0","720297",""
"9429922","471149","2012-02-24 11:23:43","36","4889","<git><git-svn>","git svn cherry pick ignored warning","<p>When I run <code>git svn fetch</code> it sometimes prints following warning:</p>

<pre><code>W:svn cherry-pick ignored (/path/in/svn:&lt;svn revision number list&gt;) missing 55 commit(s) (eg 9129b28e5397c41f0a527818edd344bf264359af)
</code></pre>

<p>What this warning is about?</p>
","3","471149","0"
"9438966","551713","2012-02-24 22:29:02","6","1470","<git-svn>","How to have a  trailing space character in authors file for git svn","<p>Authors in my svn repo are as follows:</p>

<blockquote>
  <p>$ svn log --xml | grep author | sort -u | perl -pe 's/.>(.?)&lt;./$1 = /'</p>
</blockquote>

<p>Output:</p>

<pre><code>&lt;author&gt;ashfame&lt;/author&gt;
&lt;author&gt;clean&lt;/author&gt;
&lt;author&gt;clean &lt;/author&gt;
&lt;author&gt;rocketweb&lt;/author&gt;
</code></pre>

<p>But while cloning the repo for import using <code>git svn clone</code>, it halts in between saying <code>Author: clean  not defined in /home/ashfame/fun/authors-transform.txt file</code></p>

<p>Notice the double space after clean, which means its the 3rd user <code>""clean ""</code>.</p>

<p><strong>How do I format my authors file to have a space in username?</strong> My current contents are as follows:</p>

<pre><code>ashfame = Ashfame &lt;mail@example.com&gt;
clean = Yogesh Tiwari &lt;yogesh.tiwari@example.com&gt;
clean = Yogesh Tiwari &lt;yogesh.tiwari@example.com&gt;
""clean\ "" = Yogesh Tiwari &lt;yogesh.tiwari@example.com&gt;
""clean "" = Yogesh Tiwari &lt;yogesh.tiwari@example.com&gt;
rocketweb = rocketweb &lt;rocketweb@rocketweb.com&gt;
(no author) = Yogesh Tiwari &lt;yogesh.tiwari@example.com&gt;
(no author) = no_author
</code></pre>

<p><strong>Interesting discovery:</strong> I tried importing the svn repo into git without any user mapping and I couldn't see anything related to ""clean "" user, only ""clean"" exists, so I am guessing this is some hiccup on svn repo. Any pointers on what can be done about it?</p>
","9","551713",""
"45068497","159145","2017-07-12 22:26:18","0","53","<git><svn><git-svn>","I made a git svn dcommit before a pull - how can I fix my repo?","<p>My scenario has:</p>

<ul>
<li>My local-machine git repo</li>
<li>A remote on GitHub</li>
<li>An SVN server on the LAN</li>
</ul>

<p>The SVN server is still canonical, but is kept in parity with the GitHub repo. Other users exclusively use SVN, and I am the only git+SVN user (which simplifies things).</p>

<p>When I'm working on other computers (e.g. my laptop, from home, when abroad) I use git and I push/pull my commits with the GitHub repo. My commits are not put into SVN until I'm in the office.</p>

<p>When I'm in the office I'll do a <code>git pull</code> to bring-in any new commits from GitHub then do <code>git svn dcommit</code>, followed by a <code>git push -f</code> back to GitHub so the newly SVN-annotated commits become canon on GitHub and match SVN perfectly.</p>

<p>However, today I had some pending commits on my office computer - but I also had non-pulled commits too - and I don't know how to fix it.</p>

<p>At 9AM this morning, before running any commands anyhere, my repos looked like this:</p>

<pre><code>o = Normal Git commit, lacking SVN annotation
* = SVN-annotated Git commit

GitHub
*---*---*---*---o---o---o---o---o
A   B   C   D   E   F   G   H   I

Local computer git repo
*---*---*---*---o---o
A   B   C   D   E   F

SVN
*---*---*---*
A   B   C   D
</code></pre>

<p>Explanation: I had two commits, <code>E</code> and <code>F</code> that were in my local computer repo that were previously pulled from GitHub, these commits were not yet <code>dcommit</code>'d to SVN.</p>

<p>I made a mistake this morning in that I immediately ran <code>git svn dcommit</code> on my local computer without first running <code>git pull</code>. Running <code>git svn dcommit</code> caused the repos to enter this state:</p>

<pre><code>GitHub
*---*---*---*---o---o---o---o---o
A   B   C   D   E   F   G   H   I

Local computer git repo
*---*---*---*---*---*
A   B   C   D   E'  F'

SVN
*---*---*---*---*---*
A   B   C   D   E'  F'
</code></pre>

<p>Note that <code>E</code> and <code>F</code> are now <code>E'</code> and <code>F'</code> because they have been modified by <code>git svn</code> to be an SVN-annotated commit (so it has a different commit hash, even though it represents the same codebase state). My original <code>E</code> and <code>F</code> remain unchanged in GitHub.</p>

<p>My computer does a <code>git fetch</code> in the background anyway so I now have the GitHub commits <code>E</code> through <code>I</code> on my computer, and GitKraken shows me how I now have side-by-side branches that diverge after commit <code>D</code>:</p>

<pre><code>Local computer git repo:

*---*---*---*---*---* (master)
A   B   C   D   E'  F'
             \
              \-o---o---o---o---o (remote-master)
                E   F   G   H   I
</code></pre>

<p>How can I fix this? (As Git-SVN annotated commits are effectively immutable).</p>

<p>I think what I want to do is reparent <code>G</code> after <code>F'</code> and so ignore <code>E</code> and <code>F</code>, then run <code>git svn dcommit</code> and then do a <code>git push -f</code> back to GitHub.</p>

<p>...problem is, I don't know how to reparent <code>G</code> - I'm looking at commands like <code>cherrypick</code> but that doesn't seem to be what I'm after, and GitKraken won't let me <code>rebase</code> (it isn't a menu option for anything in the <code>remote-master</code> branch).</p>
","0","159145",""
"45070401","417721","2017-07-13 02:18:18","0","115","<git><bitbucket><git-svn>","Why is git svn making new branches and how can I fix?","<p>My team agreed to migrate from svn to git. So I created a repository xxwin then I ran something similar to this:</p>

<pre><code>git svn clone --stdlayout --no-metadata --authors-file=users.txt svn://hostname/path xxwinRepository
cd xxwinRepository
git remote add origin https://bitbucket.org/xxxxx/xxwin.git
git push
</code></pre>

<p>It took a really long time but it seemed to work fine.</p>

<p>Then one developer said he had committed some more changes to svn since migrating.</p>

<p>Instead of restarting I thought I could just run</p>

<pre><code>git svn fetch
git push
</code></pre>

<p>It seems to have pushed everything to new branches. Unfortunately this happened a couple of times before I realized what was happening. Now we have hundreds of branches..</p>

<p>For example we had a branch called <code>v2_5_working</code> in svn and now in git there are branches called <code>origin/v2_5_working</code> <code>xxwin/origin/v2_5_working</code> <code>xxwin/xxwin/origin/v2_5_working</code></p>

<p>Is there some way to easily merge all these branches? In case there is a next time is there a way to make it merge as part of the <code>git svn fetch</code>?</p>
","0","417721",""
"45071672","6010930","2017-07-13 04:53:49","1","315","<git><svn><git-svn>","Keep author history when doing a git svn dcommit","<p>I've seen old posts but I think it is too outdated to apply now. I am wondering how to keep the authors and time the same as all the git commits. </p>

<p>Basically what happens currently is, we commit to a branch on git. I merge that to my svn branch and then use dcommit to push all that to SVN repo. The commits are there but they are all committed by the person who did the dcommit command and all the commits are at the same time. </p>

<p>What I want is, doing git svn dcommit, it should use the time from the git commit and also use the author from git commit as well.</p>

<p>Is there anyway to do this? Hope someone can help, thanks!</p>
","3","6010930","0"
"9478433","","2012-02-28 08:15:07","0","375","<git><diff><git-svn>","How to use diff command on git repo","<p>How can I use the 'diff -u' command to generate patches that can be applied to a 'git/sv', repository? I am intending to run the diff command on a 'git-svn' repo.</p>
","0","",""
"9485734","976723","2012-02-28 16:26:06","3","1156","<git><svn><git-svn>","git-svn clone with weird svn tags organization","<p>I want to clone a SVN tree into a git repo using git-svn. I'd like to make a complete clone, including tags and branches, but I hit a problem with the tags organization.</p>

<p>the SVN tags folder looks like this:</p>

<pre><code>tags/
|-- Backup
|   |-- 20080212
|   `-- 20080217
|-- V4.0.1
|-- V4.0.2
`-- V4.0.3
</code></pre>

<p>I know about <code>git svn clone -T trunk -b branches -t tags/Backup -t tags</code> with twice the <code>-t</code> option, but this is not entirely satisfying:</p>

<pre><code>$ git branch -r
  tags/20080212
  tags/20080217
  tags/Backup
  tags/V4.0.1
  tags/V4.0.2
  tags/V4.0.3
  trunk
</code></pre>

<p>As you can see, all the tags are here, but one is too much: the <strong>Backup</strong> tag is actually not a tag but a folder containing tags. The problem is that it creates an orphan branch which duplicate the content of all the backup branches.</p>

<p>The question is: How do I make git-svn ignore the backup folder but know about the backup subfolders as tags, keeping the classical tags available?</p>

<p>And as a bonus: how to automatically name the Backup tags as <code>Backup/20080217</code> instead of <code>20080217</code>?</p>

<p>Thanks!</p>
","0","976723","0"
"9494341","1239497","2012-02-29 06:09:13","6","2257","<git><version-control><git-svn>","git-svn rebase error","<p>I am getting the following error after running git svn rebase: 'update-index --refresh: command returned error: 1'</p>

<p>Any ideas?  Below is the entire output.</p>

<pre><code>$ git svn rebase --dry-run
xxx-iphone/xxx_prototype2/xxx_prototype2.xcodeproj/project.pbxproj: needs update
xxx-iphone/xxx_prototype2/xxx_prototype2.xcodeproj/project.xcworkspace/xcuserdata/xxx.xcuserdatad/UserInterfaceState.xcuserstate: needs update
xxx-iphone/xxx/xxx_prototype2/CouponBookViewController.h: needs update
xxx-iphone/xxx_prototype2/xxx_prototype2/CouponBookViewController.m: needs update
xxx-iphone/xxx_prototype2/xxx_prototype2/EmailListViewController.m: needs update
xxx-iphone/xxx_prototype2/xxx_prototype2/HomeViewController.h: needs update
xxx-iphone/xxx_prototype2/xxx_prototype2/ParentCategoryTableViewCell.xib: needs update
xxx-rails/.rvmrc: needs update
xxx-rails/Gemfile: needs update
xxx-rails/app/controllers/admin_page/categories_controller.rb: needs update
xxx-rails/app/controllers/application_controller.rb: needs update
xxx-rails/app/controllers/categories_controller.rb: needs update
xxx-rails/app/controllers/service_provider_profiles_controller.rb: needs update
xxx-rails/app/models/category.rb: needs update
xxx-rails/app/models/like.rb: needs update
xxx-rails/app/models/service_provider_profile.rb: needs update
xxx-rails/config/application.rb: needs update
xxx-rails/db/development.sqlite3: needs update
update-index --refresh: command returned error: 1
</code></pre>
","1","1239497",""
"9516125","42580","2012-03-01 12:20:12","3","1732","<git><svn><git-svn>","How do I add branches to .git/config?","<p>NOTE: This question is inspired by the <a href=""https://stackoverflow.com/questions/2974016/git-svn-branching"">git-svn branching</a> question and <em>NOT</em> a duplicate! </p>

<p>Without doing anything extraordinary when I checked out our svn-repo I got the following <em>.git/config</em> file:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    autocrlf = false
[svn-remote ""svn""]
    url = svn+ssh://my_server/opt/subversion/main/trunk
    fetch = :refs/remotes/git-svn
[color]
    ui = true
</code></pre>

<p>When I try to use <em>git svn branch</em> I get the message:</p>

<pre><code>Unknown branch destination
</code></pre>

<p>The reason for this is that branches is missing in <em>.git/config</em>. I whant the branches to go into a directory parallel to trunk. So for example a branch named <em>foo</em> should be found at this path:</p>

<pre><code>svn+ssh://my_server/opt/subversion/main/branches/foo
</code></pre>

<p>If I am working in a separate branch made inside of git with <em>git checkout -b foo</em>, I then want to create the branch in subversion with:</p>

<pre><code>git svn branch foo
</code></pre>

<p>How do I update <em>.git/config</em> to get this working? I would be expecting a message like the following from <em>git svn branch foo</em>:</p>

<pre><code>Copying svn+ssh://my_server/opt/subversion/main/trunk at r8507 to svn+ssh://my_server/opt/subversion/main/branches/foo...
</code></pre>

<p><strong>Edit:</strong>
What if I update the <code>svn-remote</code> section to:</p>

<pre><code>[svn-remote ""svn""]
    url = svn+ssh://my_server/opt/subversion/main
    fetch = trunk:refs/remotes/git-svn
    branches = branches/*:refs/remotes/branches/*
</code></pre>

<p>It looks like its the right thing to do and seems to be working when I have tried to do <em>git svn rebase</em> and <em>git svn branch</em>. Is this a working solution or will I mighty pile of mess if I work with this new <em>config</em> a while?</p>
","2","42580",""
"9716816","482519","2012-03-15 09:16:45","0","376","<git><version-control><git-svn><dropbox>","Is there a `git-dropbox` or equivalent?","<p>I know there are many tutorials to use Dropbox as a Git repository, but I do want to know is how to recommend non-technical staffs to commit their changes.</p>

<p>So it would be nice if I can <code>git-fetch</code> all change history from Dropbox, merge/resolve conflicts and then commit them back to Dropbox as well as what <code>git-svn</code> does.</p>

<p>Does this make sense?</p>

<p>I am almost ready to give up convincing all co-workers to use VCS.</p>
","0","482519",""
"45462839","6311832","2017-08-02 13:51:59","0","441","<git><svn><migration><git-svn><svn2git>","migrating svn to git: checksum mismatch on merged file","<p>I'm trying to migrate a SNV Repo to Git manually and run into a problem:</p>

<p>I initialized my (odd) branch/trunk/tag structure with <code>git svn init...</code> and then tried to fetch the files while preserving history &amp; logs. But <code>git svn fetch</code> fails when it reaches a revision including a merge between to svn branches, because of a checksum mismatch error. </p>

<p>I already tried different solutions presented on SO, but most of them have to do with an existing Git repo, which I don't have (yet) so e.g. git svn log won't work because the HEAD revision isn't fetched yet. Nothing worked...</p>

<p>My guess is, that the file was merged AND modified with one commit. Is there any way I can get around the checksum check? Or another solution?</p>
","0","6311832",""
"45482729","4227169","2017-08-03 11:21:16","0","841","<git><svn><git-svn>","ignoring some branches git svn fetch","<p>I'm working with svn repositories, when i run git svn fetch command i receive error:</p>

<pre><code>Found possible branch point: https://svn.host.ru/repo/trunk =&gt; https://svn.host.ru/repo/branches/branch_name, 13439
Found branch parent: (refs/remotes/origin/branch_name) a081660107eb24a999957a6874bdf4dd53568436
Following parent with do_switch
Successfully followed parent
fatal: update_ref failed for ref 'refs/remotes/origin/branch_name': refusing to update ref with bad name refs/remotes/origin/branch_name
update-ref -m r13440 refs/remotes/origin/branch_name 5858b0838db06456ae1de9395a46d1d3fe3c2017: command returned error: 128
</code></pre>

<p>i understand its because name <code>branch_name</code> actually something like <code>~titanbig\-?\d+\.ru</code> - contains bad symbols - how can i solve this problem? Maybe some options to skip such bad branches?</p>
","1","4227169",""
"27706999","417642","2014-12-30 14:13:25","0","117","<git><git-svn>","Delete git branch with -rD without deleting remote svn branch","<p>I have a local branch whose remote mirrors an svn branch. If I delete the local branch using git branch -D, will it physically delete the remote svn branch as well?</p>

<p>Appreciate your help.</p>
","0","417642",""
"45572832","6111390","2017-08-08 15:50:32","2","4076","<git><svn><version-control><fetch><git-svn>","git svn fetch specific directory","<p>Is it possible to fetch specific directories using git svn? I am trying to fetch multiple directories that match a name ""XYZ"" in ""trunk/Path"". ""XYZ"" is in multiple paths. </p>

<pre><code>git svn init --stdlayout --no-minimize-url --trunk=trunk/Path

git svn fetch  --revision 1234:HEAD --authors-file=authors.txt --include-paths=""^.*trunk\/subdirpath1/XYZ"" 
git svn fetch  --revision 1234:HEAD --authors-file=authors.txt --include-paths=""^.*trunk\/subdirpath2/XYZ"" 
git svn fetch  --revision 1234:HEAD --authors-file=authors.txt --include-paths=""^.*trunk\/subdirpath3/XYZ"" 
</code></pre>
","3","6111390",""
"27944764","2761849","2015-01-14 14:02:28","-1","44","<git><svn><version-control><repository><git-svn>","How to work with git on a SVN repository","<p>I have the following problem. </p>

<p>I am working on a SVN repository and I am making changes to it but I don't want to commit them because the owner told me to not change anyhthing on the remote repository. </p>

<p>For other stuff I am using GIT and I like it more than SVN. </p>

<p>How can I do to have the SVN folder I am interested in, without moving it, to be version controlled through GIT? </p>

<p>Thanks in advance for your kind replies.</p>
","0","2761849",""
"46228398","4645334","2017-09-14 21:19:37","2","982","<git><svn><git-svn>","How to convert a local checkout of a Subversion repo with local modifications with git-svn?","<p>I checked out some SVN repositories and created a project out of them. After some changes and configuration I found out that I can use git for my SVN repositories. But the only way I found was to clone the repositories with git-svn. Since I already checked out the repositories and worked on them, I'd like to convert the existing repositories. Is it possible? What is the best way?</p>
","0","4645334",""
"27963864","220155","2015-01-15 12:48:40","8","4879","<git><svn><git-svn><svn-propset>","Repairing git-svn repository after historical Subversion revision changed","<p>I use git-svn to keep a clone of a shared Subversion repository. Recently someone edited the commit message of a revision (<em>a la</em> <a href=""https://stackoverflow.com/questions/304383/how-do-i-edit-a-log-message-that-i-already-committed-in-subversion/304390#304390"">this SO question</a>) after I had <code>git svn fetch</code>ed that revision. How can I correct my Git clone to have the correct commit message?</p>

<p>I had expected <code>git svn reset</code> followed by <code>git svn fetch</code> to refetch this commit and update things, leaving me to only need to fix up my local branches, but that doesn't actually seem to do anything; the <code>git svn fetch</code> doesn't refetch the commits I reset to.</p>

<p>(Yes I think changing the commit message was a bad idea, but that's not something I have control over.)</p>

<p><strong>Update</strong>: I tried the process that sleske suggested (in fact, I'd tried it before asking the question, but I just tried again just in case), but with no luck. I get output like the below:</p>

<pre><code>me_and@centos ~/code ((358a2dd...)) Fri 16 Jan 15:31:27
$ git svn reset -p 55102
r55094 = 25d126219f7eeddfc7d0842704c7efcc0443dd70     (refs/remotes/origin/branchname)

me_and@centos ~/code ((358a2dd...)) Fri 16 Jan 15:33:06
$ git svn fetch

me_and@centos ~/code ((358a2dd...)) Fri 16 Jan 15:33:08
$ 
</code></pre>

<p>There's no output from <code>git svn fetch</code> (or there is if there has been commits since I last ran it, but it's just fetching the new commits, not refetching the  old ones), and in particular there's no <code>rereading</code> message as in sleske's example.</p>

<p>In case it's relevant, I'm using Git v2.0.4.</p>

<p><strong>Update 2</strong>: Slightly redacted <code>.git/config</code> below:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = http://server/repos/repo
    fetch = trunk:refs/remotes/origin/trunk
    branches = branches/*:refs/remotes/origin/*
    tags = tags/v10/*:refs/remotes/origin/tags/*
    tags = tags/v11/*:refs/remotes/origin/tags/*
    tags = tags/v12/*:refs/remotes/origin/tags/*
    tags = tags/v13/*:refs/remotes/origin/tags/*
</code></pre>

<p>I'll not post the full output of <code>git branch -avv</code>, because there's a lot of it, but that's where it gets really interesting, so I'll post a list of everything I did:</p>

<ol>
<li><p>I had a checkout of a branch other than the branch with the error. Running <code>git svn reset</code> made no difference: <code>remotes/origin/branchname</code> continued to point at a more recent commit. Unsurprisingly, <code>git svn fetch</code> did nothing.</p></li>
<li><p>I checked out <code>remotes/origin/branchname</code> and ran <code>git svn reset</code> again. This worked: <code>remotes/origin/branchname</code> pointed at the parent of the duff commit.</p></li>
<li><p>I ran <code>git svn fetch</code>. This did absolutely nothing: no commits were fetched and <code>remotes/origin/branchname</code> didn't move.</p></li>
<li><p>I created a couple of dummy commits on that branch in the Subversion repository (one added an empty file, the next deleted it again), then ran <code>git svn fetch again</code>.</p>

<p>Here's where it gets really odd: the duff commit wasn't refetched. Instead, the fetch started at the commit where I added the dummy file, reported an ""Index mismatch"" in the process.Running <code>git show</code> on the commit that added the dummy file shows it with all the diffs between the commit I reset to and the dummy commit.</p>

<p>Now, running <code>git log --graph --decorate --pretty=oneline --abbrev-commit HEAD origin/branchname</code> looks like this:</p>

<pre><code>* 7b12bbc (origin/branchname) Remove dummy file
* 730c2ab Add dummy file  # But `git show 730c2ab` includes the diffs between b89af06 and 93920f9 as well
| * 93920f9 (HEAD) Uninteresting commit
| * 91c7163 Uninteresting commit
| * ce51022 Commit with the changed commit message
|/
* b89af06 Uninteresting commit
</code></pre>

<p>Note that, other than <code>HEAD</code>, there is now nothing pointing to some of the commits on this branch.</p></li>
</ol>

<p>I'm rapidly coming to the conclusion that at least some of this behaviour is simply a bug in <code>git svn</code>.  Certainly what I saw in point 4 above is not something that should happen at all, at least by my understanding.</p>
","3","220155","0"
"10281072","248000","2012-04-23 13:02:10","2","2256","<git><svn><version-control><git-svn><dvcs>","git-svn rebase ""File name too long""","<p>I'm running</p>

<pre><code>$ git svn rebase
</code></pre>

<p>After couple of minutes it's finished fetching and started rebasing.
And I have got next error message:</p>

<pre><code>First, rewinding head to replay your work on top of it...
error: cannot stat '$73_chars_4_deep_levels_path_with_spaces/$180_chars_file_name_looks_cutted_with_spaces_too': File name too long
error: cannot stat '$73_chars_4_deep_levels_path_with_spaces/$180_chars_file_name_looks_cutted_with_spaces_too': File name too long
error: cannot stat '$73_chars_4_deep_levels_path_with_spaces/$180_chars_file_name_looks_cutted_with_spaces_too': File name too long
could not detach HEAD
rebase refs/remotes/git-svn: command returned error: 1
</code></pre>

<p>I read the following question
""<a href=""https://stackoverflow.com/questions/6114301/git-checkout-index-unable-to-create-file-file-name-too-long"">git checkout-index: unable to create file (File name too long)</a>""</p>

<p>It is closely relative to me, but doesn't solving my problem.</p>

<p>Nor </p>

<pre><code>git ls-files --stage
</code></pre>

<p>nor</p>

<pre><code>git ls-files
</code></pre>

<p>doesn't found problem ""$180_chars_file_name_looks_cutted_with_spaces_too"" file.
Also I can't rename files (by some kind of politic decisions) as said by bdonlan in his solution.</p>

<p>Is there are any workarounds or solutions except download each folder to separate SVN-repo and merge through grafts?</p>

<p><strong>UPDATE</strong></p>

<p>I have tried all of above at</p>

<pre><code>MacOsX 10.6
git version 1.7.9.6
svn, version 1.7.4 (r1295709)
</code></pre>

<p>And commiters are doing they job from Windows with NTFS</p>

<p><strong>UPDATE 2</strong></p>

<p>I did some research.
I think the problem lies in UTF-8 chars.
I've tried to create new file</p>

<pre><code>$ touch ""$180_chars_file_name_looks_cutted_with_spaces_too""
$ ls
132_chars_file_name_with_numbers_at_the_end
</code></pre>

<p>File looks corrupted. It has some numbers at the end. You may reproduce it, for example:</p>

<pre><code>$ touch ""яяяяяяяяя яя яяяя яя яяяяяяяяяя яяяяяяяяя я яяяяяя я яяя яяяяяяяяя яяяяяяяяяяяяя яяяяяяяя я яяяяяяяяяяяяяяяяяя яяяяяя яя яяяяяя яяяяяяяяяяяяя яяяяяяяя яяяяя яяяяяя я яяя яяяяя яяя""
$ ls
яяяяяяяяя яя яяяя яя яяяяяяяяяя яяяяяяяяя я яяяяяя я яяя яяяяяяяяя яяяяяяяяяяяяя яяяяяяяя я яяяяяяяяяяяяяяяяяя яяяяяя яя яяяяяя яяяя#464CDD8
</code></pre>

<p>When successfully opened ""132_chars_file_name_with_numbers_at_the_end"" by vim editor and edited it.
But when I entered "":wq"" file disappeared.</p>

<p>Now I think I found the root of my problem, but life doesn't going easier after that )</p>
","2","248000",""
"10288921","52479","2012-04-23 21:59:02","2","995","<git><github><git-svn>","Best way to merge/patch changes between different git repos","<p>I've been unable to find an adequate solution to this problem, so any help would be appreciated. Here is the setup:</p>

<ol>
<li>We have an SVN repo. That repo is also mirrored to a git repo <code>git_svn_mirror</code>.</li>
<li>A branch <code>svn_branch</code> was created in the SVN repo.</li>
<li>Work was done in <code>svn_branch</code>, including merging up from trunk several times.</li>
<li>A new git repo <code>git_from_svn_branch</code> was created from <code>svn_branch</code>.</li>
<li>Work was done in <code>git_from_svn_branch</code>.</li>
<li>We now need to merge HEAD of <code>svn_trunk</code> into <code>git_from_svn_branch</code>.</li>
</ol>

<p>Diagram:</p>

<pre><code>[git_svn_mirror] [SVN]                [git_from_svn_branch]
      |  &lt;-mirror  |
      |  &lt;-mirror  |
      |  &lt;-mirror  |-\                        \
      |  &lt;-mirror  | |                        |
      |  &lt;-mirror  |-|                        |
      |  &lt;-mirror  | |  --&gt; (move to git) --&gt; | (kept branch history only)
      |  &lt;-mirror  |                          |
      |  &lt;-mirror  |                          |
      |  &lt;-mirror  |                          |
      |  &lt;-mirror  |                        HEAD    &lt;----
      |  &lt;-mirror  |                                    |
    HEAD         HEAD                                   |
                                                        |
     ^            ^                                     |
     |____________|__ how do we get one of these, into  |__ this (or vice-versa)
</code></pre>

<p>Ignoring the issues that caused us to arrive at this situation (""why was a 2nd git repo created"", etc) what is the best solution to the problem?</p>
","0","52479","0"
"46540784","1028276","2017-10-03 08:56:59","0","91","<git><svn><git-svn>","git svn is only converting the last commit","<p>I have a repository which is structured as follows:</p>

<pre><code>project/trunk
project/branches
project/tags
project/cms
</code></pre>

<p>If I do:</p>

<pre><code>git svn clone svn://svnurl/svn/project/cms --no-metadata -A ~/tmp/tools/gitsvn_authors/master_gitsvn_format.txt cms
</code></pre>

<p>It converts ok, but it only takes the last commit of the 'cms' project. There is no history past the last commit. cms does not have a standard layout. It doesn't have any trunk/branches/tags.</p>
","0","1028276",""
"10323233","256853","2012-04-25 20:28:11","1","227","<git><import><git-svn>","Import git repo with multiple initial commits into svn","<p>I basically have the following git repo layout</p>

<pre><code>x ---- a -------------- b  -------------- c  ----&gt;
         y -- 1 -- 2 -- ┛  z -- i -- j -- ┛
</code></pre>

<p>where <code>x</code>, <code>y</code>, <code>z</code> are initial commits. I have these multiple initial commits because I merged multiple git repositories into one big repositories using </p>

<pre><code>git fetch git://github.com/&lt;user&gt;/&lt;repo&gt;.git refs/heads/master:refs/heads/&lt;repo&gt;
git merge --no-commit &lt;repo&gt;
git read-tree --reset -u HEAD
git read-tree -u --prefix=lib/&lt;repo&gt; &lt;repo&gt;
git commit -m ""Pulling &lt;repo&gt;""
git branch -d &lt;repo&gt;
</code></pre>

<p>multiple times. All submodules basically had the same file layout. </p>

<p>To import the git repo into svn I initialized an empty svn repository and cloned it via</p>

<pre><code>git svn clone http://some/svn/repo/my-project
</code></pre>

<p>then I tried</p>

<pre><code>cd my-project
git remote add dev /path/to/working/git/big-repository
git pull dev master
git svn rebase
</code></pre>

<p>But the rebase fails because of some merge errors that appear to happen because all submodules had an identical file in their top-level (<code>pom.xml</code>)</p>

<p>Is there any any way I can import the git repository into svn keeping the history?</p>
","0","256853",""
"10345277","1268651","2012-04-27 05:35:45","8","4913","<git><git-svn>","Difference between git pull --rebase, git rebase and git merge","<p>Could anyone explain this with keeping even the remote repositories in mind?</p>
","1","1268651","0"
"65126090","1917520","2020-12-03 12:35:12","1","53","<git-svn>","git-svn: How to prevent ""dcommit"", ""rebase"" when not on master","<p>I am using <code>git-svn</code>.</p>
<p>My problem is, I <strong>never</strong> want to be able to do a <code>git svn rebase</code> or even worse a <code>git svn dcommit</code> while I am on a local branch. I <strong>only</strong> want to do this while I am on the <code>master</code> branch.</p>
<p>How I can make sure that <code>git</code> prevents these operations ?</p>
<p>I tried to give dummies via <code>git config branch.&lt;name&gt;.remote</code> but this does not help for <code>git svn rebase</code> and <code>git svn dcommit</code>.</p>
<p>Any other ideas ?</p>
","0","1917520",""
"10350877","5377","2012-04-27 12:47:57","0","285","<git><git-svn>","git rebase from git-svn bridge","<p>I've got a git repo that imported a subdirectory of an svn repo a couple weeks ago.  I tried to pull in changes from the svn repo and got the following:</p>

<pre><code>$ git svn fetch
    M   data/tree.js
Author: merger not defined in /Users/astacy/work/static_authors file

$ git svn rebase 
Index mismatch: 0415f543471e6a8f9b3ec787020bbe395c44d4f4 != a6767586c9e4f74cd279b0b42cc2545eac190704
rereading 76a26e5c064f05d26fa51aa2b2b715d50a7651b4
    M   data/tree.js
Author: merger not defined in /Users/astacy/work/static_authors file
</code></pre>

<p><code>git status</code> says the working directory is clean, but the <code>data/tree.js</code> file is not updated in my git repo.  <strong><em>How do I pull this change in?</em></strong></p>

<h3>more info:</h3>

<p>I don't remember how I originally did the import, but I think it was something like:</p>

<pre><code>$ git svn init &lt;url&gt;
</code></pre>

<p><code>.git/config</code> has this:</p>

<pre><code>[svn-remote ""svn""]
    url = svn+ssh://astacy@example.com/var/svn/siq_repo
    fetch = my/path/to/directory/gloss:refs/remotes/trunk
[svn]
    authorsfile = /Users/astacy/work/static_authors
</code></pre>

<p>Also, the file in question, <code>data/tree.js</code> was moved immediately after the initial import to <code>src/data/tree.js</code>.</p>
","0","5377",""
"46595655","6458830","2017-10-05 22:23:39","1","120","<git><svn><git-svn>","SVN revprop in git-svn","<p>I have repository in SVN (due to some business reasons I cannot switch fully to git) but I locally prefer to use git with git-svn. But because of CI configuration I need to set custom revprops during commit</p>

<pre><code>svn ci --with-revprop ARG=value
</code></pre>

<p>It seams git-svn does not support it, I would like to ask if someone have any clever workaround? Is it possible add revprops to dcommit like:</p>

<pre><code>git svn dcommit --with-revprop ARG=value
</code></pre>
","1","6458830","0"
"10717571","691226","2012-05-23 09:57:25","19","12328","<ruby><git><svn><git-svn>","Trying to get svn2git working on Windows","<p>I'm migrating an SVN repository over to Git. The git-svn command doesn't handle the branches and tags properly but I stumbled across a tool called svn2git which seems to resolve this (https://github.com/nirvdrum/svn2git).</p>

<p>I've tried setting up this tool to work on Windows but I've not had much success. </p>

<p>I started off by copying the svn2git installation to C:\svn2git and downloading Ruby for Windows (http://rubyinstaller.org/) and saved it at C:\Ruby193.</p>

<p>Running svn2git came back with </p>

<pre><code>/bin/env: ruby: No such file or directory
</code></pre>

<p>I then copied Ruby's bin and lib folders to svn2git's bin and lib folders respectively.</p>

<p>Running the svn2git then came back with </p>

<pre><code>&lt;internal:gem_prelude&gt;:1:in `require': cannot load such file -- rubygems.rb (LoadError) from &lt;internal:gem_prelude&gt;:1:in `&lt;compiled&gt;'
</code></pre>

<p>Does anyone know how to get this working on Windows environment? Thanks</p>
","2","691226","0"
"10735627","1414725","2012-05-24 10:26:03","2","1069","<python><git><git-svn><command-line-interface>","git svn dcommit -> pass password through stdin","<p>I'm trying to run ""git svn dcommit"" command from python script and deal with password which I have to specify manually.
The standard output of this command is:</p>

<pre><code>Committing to http://svn/trunk ...
Authentication realm: &lt;http://svn:80&gt; Active Directory credentials for users. Specific name and password for remote
Password for 'username':
</code></pre>

<p>at this moment, I have to specify password. Okay, there are three lines I need to read from stdout.</p>

<pre><code>proc = subprocess.Popen(' git svn dcommit --username=""username"" ', shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
out = proc.stdout.readline()
print "":""+out
out = proc.stdout.readline()
print "":""+out
out = proc.stdout.readline()
print "":""+out
proc.stdin.write('password\n')
</code></pre>

<p>But I get </p>

<pre><code>:Committing to http://svn/trunk ...
Authentication realm: &lt;http://svn:80&gt; Active Directory credentials for users. Specific name and password for remote
Password for 'username':
</code></pre>

<p>and after this, the script is waiting for the output which is not provided by the ""git svn dcommit"". It reads only first line, that's it. How can I get the rest output?</p>

<p>Thank you.</p>
","6","1414725",""
"28684351","10608","2015-02-23 22:02:33","6","5288","<git><git-svn>","what is the git-svn-id?","<p>Here is an example git-svn-id from a local test repo.</p>

<pre><code>git-svn-id: file:///tmp/svnrepo/branches/foobar@6 0f7bc949-3f51-4b04-a2a6-16f580a5904d
</code></pre>

<p>What is the last part? The ""@6"" means that it is svn revision number 6, but after that looks to be some hash. It seems to be the same on every single commit.</p>

<p>How is that last part generated? I am assuming it is a hash algorithm applied to the first commit of the git repo. That way the git-svn-id can also guarantee that the total ancestry of that commit is the same or different given another git-svn-id.</p>
","1","10608","0"
"10742190","60628","2012-05-24 17:10:39","5","1341","<git><repository><git-svn>","How to get the latest SVN HEAD in git-svn?","<p>I'm using <code>git-svn</code> and I'd like to update to the latest SVN HEAD.</p>

<p>When I type <code>git pull</code> it says:</p>

<pre><code>fatal: No remote repository specified.  Please, specify either a URL or a
remote name from which new revisions should be fetched.
</code></pre>

<p>I read <a href=""https://stackoverflow.com/questions/352692/how-do-i-revert-a-git-svn-branch-to-svn-head"">here</a> that I should do something like:</p>

<pre><code>git checkout -b real-trunk remotes/trunk
</code></pre>

<p>But I don't understand the command. What's <code>remote-trunk</code>? In any case, <code>git</code> gives an error:</p>

<pre><code>fatal: git checkout: updating paths is incompatible with switching branches.
Did you intend to checkout 'remotes/trunk' which can not be resolved as commit?
</code></pre>

<p>Here is my <code>.git/config</code>:</p>

<pre><code>$ cat .git/config 
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[svn-remote ""svn""]
        url = http://name.xyz.com/svn/trunk/project
        fetch = :refs/remotes/git-svn
</code></pre>

<p>Also, can anyone tell me how to revert all changes that I made in my git checkout? I want to be back at the fresh SVN HEAD version.  </p>
","0","60628","0"
"64506822","12875055","2020-10-23 20:22:24","3","274","<git><svn><git-svn><svn-externals>","One-time migration from svn to git: how to replace externals with a source dump?","<p>I'm trying to do a permanent migration of my codebase from svn to git, and hit a wall due to externals.</p>
<p>I make liberal use of svn externals. I couldn't have anticipated one day wanting to migrate to something that is less flexible, as git submodules are. I have hundreds of svn externals accumulated over the years, not just pointing to a subdirectory in an external related repo (also my own code), but sometimes to a subdirectory in a different branch/path of the same repo, sometimes by relative path and sometimes by absolute path. Sometimes the pointed target is at a specific revision, sometimes the tip.</p>
<p>I've given up on migrating the svn externals, you can't fit a square peg into a round hole. It only works if you're using svn externals in a very simple way that was already in line with git submodules' limitations. To migrate and keep a valid history, I don't see any solution other than removing all externals and replacing them with local changes. I'll have code duplication, but that's an acceptable for valid history, as I have to support more than just the latest snapshot of the codebase.</p>
<p>Pseudocode of what I hope to achieve:</p>
<pre><code>for each branch:
    for each revision in that branch, from first to last, migrate it to a git commit (as 'git svn clone' does)
        if the revision has any svn externals, copy the directory/file content as is and commit it as if it were local changes, using the same commit message, ('git svn clone' can't do this)
        if the contents of the externals were modified in a later revision, then modify the local files in a git commit too

Final result: a standard git repo with my desired branches and their full history. If git commit 
abcdef123 == svn rev 123, then I get the same file tree from 
&quot;git clone git.example.com/gitrepo &amp;&amp; git checkout abcdef123&quot; as I do from 
&quot;svn checkout svn://example.com/svnrepo --revision 123&quot;.
If 2 branches evolved from the same ancestor, then that should be reflected in git.
</code></pre>
<p>After the migration, I would start doing things the git-appropriate way: manually replace the local files with new git submodules pointing at the external repos, and update the project's filepaths accordingly.</p>
<p>How can I achieve this?</p>
","4","12875055",""
"27987037","4107809","2015-01-16 15:14:50","0","64","<git><svn><merge><git-svn>","merging svn-based fork of git project back into git","<p>I am developing a project in git. Someone else has taken a snapshot of my project and continued development in svn. Now I want to merge changes from svn back into git. </p>

<p>Is there an easy way to merge changes from svn into git? The best I can come up with is creating a new git branch and manually adding all of the files in. </p>

<p>My understanding of git-svn is that it creates a new git repo based on the svn repo. The documentation also says ""don’t push to a parallel Git repository to collaborate with fellow Git developers at the same time"", which sounds exactly like what I want. The only simplification is that I do not need to write anything into svn; changes are moving from svn to git only. </p>
","0","4107809",""
"27992169","3482128","2015-01-16 20:20:05","0","36","<git><git-svn><branching-and-merging>","git svn create a new svn branch based on a git branch","<p>Is it possible to create an svn branch off of a git branch? That is, I currently interact with an svn repository using git-svn. I've created a new git branch into which I've merged some new changes. Now I want to push this branch to the svn repository, albeit into it's own svn branch so others may download this. Plus I'd like to keep tracking that branch via my git branch.</p>

<p>Is this possible? I tried git svn branch, but it creates the branch off of the master, not my off of my branch...</p>

<p>thanks to all!
Rodrigo</p>
","0","3482128",""
"10015131","1017787","2012-04-04 16:13:52","2","293","<git><svn><merge><git-svn><rebase>","How to resolve a git-svn rebase with moved files?","<p>I have a problem rebasing my long-lived branch (called 'metrics') onto the latest version of my 'trunk' branch. The goal is to get my changes rebased, and then committed back to SVN.</p>

<p>The rebase has 75 steps right now, and step 40 is applying significant source code changes onto files that were relocated in svn.</p>

<p>Specifically, I made lots of changes to files in /java/**/*.java. Meanwhile, these files were relocated to: /src/main/java/**/*.java.</p>

<p>git status shows:</p>

<pre><code># Not currently on any branch.
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#
# Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   added by them:      java/StripesResources.properties
.... (many files like this)
#   both deleted:       src/StripesResources.properties
.... (many files like this)
#   added by us:        src/main/java/StripesResources.properties
.... (many files like this)
</code></pre>

<p>There are over 900 files in this state, what do I do to merge them? Not all of them have substantial changes.</p>

<p>I tried moving / copying the 'them' versions of the files (my changes) onto the 'us' locations (where they should be), but that didn't seem to work.</p>

<p>Should I use 'git mv' in this case?</p>

<p>Thanks.</p>
","3","1017787",""
"10381028","702264","2012-04-30 09:05:47","12","21937","<xcode><git><xcode4.2><git-svn>","removing local git repositary from Xcode Project?","<p>I had selected local git repositary when I created xcode Project.
But when import to SVN and commit, it commits locally not in SVN.
How can I resolve this problem? I want to remove all hidden local git files from the Xcode project without affecting source code? any help please?</p>
","0","702264",""
"46643434","1749713","2017-10-09 09:45:52","-1","50","<git><svn><git-svn>","git - restore deleted svn branch without rereading svn history","<p>I've accidentaly removed svn branch from my local git repo. Branch is still on the server, and I still have git branch which was tracking this svn branch.</p>

<p>I'd like to restore this branch where it was. If I do something like <a href=""https://stackoverflow.com/questions/296975/how-do-i-tell-git-svn-about-a-remote-branch-created-after-i-fetched-the-repo"">this</a> 
git starts fetching this branch as a new, independent branch with no common ancestor and duplicated history entries. That's what I was afraid of. </p>

<p>Is there any way I could tell git to create svn branch at given commit-ish so it's history will be integrated with what I already have?</p>
","0","1749713",""
"10448431","47552","2012-05-04 11:58:43","6","6200","<regex><git><git-svn><ignore>","How is ignore-paths evaluated in git svn?","<p>I have a simple repo structure like this:</p>

<pre><code>trunk
    code
    othercode
    doc
    misc
branches
    b1
        code
        othercode
        doc
        misc
    b2
tags
    t1
    t2
</code></pre>

<p>I'm trying to use <code>git svn</code> to clone it, but want to omit <code>doc</code> and <code>misc</code> on trunk + all tags and branches.  However, the <code>ignore-paths</code> option isn't acting like I'd expect.</p>

<pre><code>ignore-paths = (doc|misc)
</code></pre>

<p>Seems to work, but I'm worried that it would also exclude a path like <code>trunk/code/proj1/doc/</code>, which I want to keep.</p>

<pre><code>ignore-paths = ^(doc|misc)
</code></pre>

<p>Does not work -- <code>doc</code> and <code>misc</code> are pulled in by the initial <code>git svn fetch</code> command.  How do I get a working regex that'll only match against directories at the root like this?  The man page does not say whether <code>ignore-paths</code> matches against the ""relative"" path that'll end up at the root of the git clone (<code>doc</code>, etc.) or the ""full"" path as seen in the SVN remote (<code>branches/b1/doc</code> etc.), or something else.</p>
","0","47552","0"
"65223806","8486037","2020-12-09 19:44:05","-1","51","<git><svn><git-svn>","Merge repo git svn clone with other git repo","<p>For years my team has been using SVN.
A few months ago we switched to Git by doing a simple push of an SVN branch, without the history and continued to develop on Git.
Today we need to get the SVN history back before it is lost.
So I used git svn clone to turn SVN into Git.</p>
<p>So I end up with a SVN project, are equivalent in Git project (proj_with_history) and a Git project having the same initial commit as the last commit of one of the branches (proj_without_history) of the proj_with_history.</p>
<p>The question is, how do you link/merge the proj_with_history with the proj_without_history, knowing that new branches and tags have been created on proj_without_history ?</p>
<p>If possible, we would like to make this migration transparent in the graph of the commits, even if the history is rewritten, as long as conflicts are avoided.</p>
<ul>
<li>proj_with_history : ... - f30ab - 98ca9</li>
<li>proj_without_history : 34ac2 - h20a5 - ...</li>
<li>98ca9 and 34ac2 have the same code</li>
</ul>
","2","8486037",""
"28437768","4064650","2015-02-10 17:15:59","35","37672","<github><git-svn><git-branch><git-flow>","Git flow command error: 'flow' is not a git command","<p>I am very new to Git and am starting to learn the command line version. I believe my git flow is not installed correctly. I am running this from a pc. </p>

<p>When i run following command:</p>

<pre><code>git flow feature start JamesTest
</code></pre>

<p>I get the following error:</p>

<blockquote>
  <p>git: 'flow' is not a git command. See 'git --help'<br>
  Did you mean any of these?</p>
</blockquote>

<p>Looks like the git flow command is not being recognized from all paths? How do I fix this? </p>
","3","4064650","0"
"10821920","27358","2012-05-30 18:13:31","2","1373","<git><svn><git-svn>","git-svn and unfortunate svn pre-commit hooks","<p>I have a git repository with about 30 revisions that I want to import into an existing SVN repository. Unfortunately the SVN repository has a bunch of pre-commit hooks requiring certain information in commit messages, certain SVN keywords in certain file types, and so on. None of these are really relevant to to the stuff I'm checking in, or at any rate, they're not as important as keeping the existing revision history.</p>

<p>In a perfect world, I maybe could do something like:</p>

<ol>
<li>hijack the first git revision (and any other revisions that introduce new files) to make it include the necessary SVN keywords and set the corresponding svn:keywords property</li>
<li>mass-edit all 30 git commit messages to prepend the required commit-message strings</li>
</ol>

<p>In a somewhat less perfect world, I could get git-svn to somehow prepend skip-pre-commit-checks (? -- I've never used it before), and then I'd at least have all the revision history in there.</p>

<p>Thoughts?</p>

<hr>

<p><strong>Updated to add:</strong> skip-pre-commit-checks isn't actually a thing; I was misled by a specific hack at a particular project.</p>
","3","27358",""
"10878976","1060205","2012-06-04 09:20:12","37","12736","<git><git-svn>","Why does ""git svn fetch"" command seem to be stuck and does nothing?","<p><strong>EDIT: Workaround.</strong>
Now we understand the issue, here is the solution: do</p>

<pre><code>git svn fetch -r REVISION:HEAD
</code></pre>

<p>where REVISION is the number of the svn commit of the branch creation.</p>

<hr>

<p>I've been happy using git svn to work on the trunk of my project for a while, but now I need to track branches also.</p>

<p>I've tried to initialize a new repository to do that with</p>

<pre><code>git init
git svn init https://svnserver/svn/repository
</code></pre>

<p>Then I edit the local configuration file to reflect the structure of my svn repository:</p>

<pre><code>[svn-remote ""svn""]
    url = https://svnserver/svn/repository
    fetch = path/to/trunk:refs/remotes/trunk
    branches = path/to/branches/*:refs/remotes/branches/*
</code></pre>

<p>Then I run </p>

<pre><code>git svn fetch
</code></pre>

<p>And this command just does nothing:</p>

<ul>
<li>It does not terminates</li>
<li>It does not write anything in the console output</li>
<li>It does not use any CPU, nor create files</li>
</ul>

<p>I gave up after 10 minutes</p>

<p>I've checked that the svn repository is working, because <code>git svn fetch</code> works perfectly on my git repository where I track only the trunk.</p>

<p>Is this a bug or am I missing something here ?</p>
","1","1060205","0"
"10886784","284529","2012-06-04 19:03:59","11","3948","<git><git-svn>","Updating a git mirror of an SVN repository","<p>I created a git mirror of an SVN repository by doing:</p>

<ul>
<li>Create a new repo on github</li>
<li>mkdir mirror &amp;&amp; cd mirror</li>
<li>git svn init [svn url]</li>
<li>git svn fetch -rHEAD</li>
<li>git remote add origin [github url]</li>
<li>git svn rebase</li>
<li>git push origin master</li>
</ul>

<p>This works great, and I can update it with simply:</p>

<ul>
<li>git svn rebase</li>
<li>git push origin master</li>
</ul>

<p>However, if I move to a different computer and want to update it, I tried:</p>

<ul>
<li>git clone [github url]</li>
<li>git svn init [svn url]</li>
<li>git svn fetch -rHEAD</li>
<li>git remote add origin [github url]</li>
<li>git svn rebase</li>
</ul>

<p>but here I get:</p>

<p>""Unable to determine upstream SVN information from working tree history""</p>

<p>Can anyone explain the correct way to do this?</p>
","1","284529","0"
"10901652","27358","2012-06-05 17:06:16","4","592","<git><svn><git-svn>","Continuing partial git svn dcommit after failed pre-commit hook","<p>Trying to import an existing git repository into SVN per <a href=""https://stackoverflow.com/a/772881/27358"">this answer</a>; went smoothly for a couple of commits, but then I hit a failed precommit hook.</p>

<pre><code>r180827 = 444fa1c75e5a31fe8d887637a7fbd3fc62b34354 (refs/remotes/trunk)
No changes between current HEAD and refs/remotes/trunk
Resetting to the latest refs/remotes/trunk
Unstaged changes after reset:
M       [some file]
M       [another file]
M       [...etc...]
        A       [problem file]
A repository hook failed: 'pre-commit' hook failed with error output:
[error description]
  at /usr/libexec/git-core/git-svn line 922
</code></pre>

<p>I fixed the hook so I could get past it; but when I tried just <code>git svn dcommit</code> again (clearly wrong), I got</p>

<pre><code>[some file]: needs update
[another file]: needs update
[...etc...]
</code></pre>

<p>When I do 'git status', I get:</p>

<pre><code>#       modified: [some file]
#       modified: [another file]
#       modified: [...etc...]
#
# Untracked files:
#   (use ""git add&lt;file&gt;..."" to include in what will be committed
#       
#       [problem file]
#       [other file modified in the commit that created the problem file]
#       [yet other files modified in that commit]
#       [...etc...]
</code></pre>

<p>I suppose I could blow the whole SVN tree away and start over, but I'd really rather not. How do I recover from this and continue the dcommit?</p>
","0","27358","0"
"10902684","26197","2012-06-05 18:21:54","1","2500","<git><svn><git-svn><commit>","How can I do a force commit using git-svn?","<p>I have a dev branch I'm working on and want to commit it.  However through an unfortunate series of events which I won't get into, my git svn thinks its already up to date and there is nothing to commit.</p>

<p>Essentially right now I want to clobber the remote contents of my branch with the local version of my branch.  Similar to a <code>git push --force</code>, except with git svn.  Something like <code>git svn dcommit --force</code>.</p>

<p>I realize there are other ways such as checking out another copy and copy/pasting the repo's contents.  But I'm hoping for a simple ""forcing"" solution like the one that exists with pure git.</p>
","0","26197",""
"10922518","1083453","2012-06-06 21:22:52","1","1845","<php><symfony><git-svn>","Symfony 2 and gits : How do i install that vendors library ?? I got errors","<p>I'm trying to set up a Symfony dev platform on webfactionnal.
I'm using Git so when I download S2 I took th ""without vendors"" version and followed those <a href=""http://symfony.com/doc/current/cookbook/workflow/new_project_git.html#cookbook-managing-vendor-libraries"" rel=""nofollow"">instructions.</a></p>

<p>So everything went fine until step 8 :<code>$ php bin/vendors install</code></p>

<p>I got several error messages when trying to execute this line on my server : </p>

<blockquote>
  <p>Warning: Wrong parameter count for parse_ini_file() in /home/quantum/webapps/quantumnetworks/bin/vendors on line 74</p>
  
  <p>Warning: Invalid argument supplied for foreach() in
  /home/quantum/webapps/quantumnetworks/bin/vendors on line 79 sh:
  ./vendor/bundles/Sensio/Bundle/DistributionBundle/Resources/bin/build_bootstrap.php:
  No such file or directory</p>
  
  <p>Parse error: syntax error, unexpected T_STRING, expecting
  T_CONSTANT_ENCAPSED_STRING or '(' in
  /home/quantum/webapps/quantumnetworks/app/console on line 13</p>
  
  <p>Parse error: syntax error, unexpected T_STRING, expecting</p>
</blockquote>

<p>all the files are originals.</p>

<p>By the way, in the the /config.php I had that error : unable to read logs file, I've put it on 777 on my server and realize that it was named as log instead of logs ... why ?</p>

<p>Thanks !</p>

<blockquote>
  <p>T_CONSTANT_ENCAPSED_STRING or '(' in
  /home/quantum/webapps/quantumnetworks/app/console on line 13</p>
</blockquote>

<p>EDIT : I run php54 command to use php 5.4 as my hosting company advised me. But i still have some errors ,It download evrything, then i have  </p>

<blockquote>
  <p>Installing/Updating AsseticBundle</p>
</blockquote>

<p>and then come the error : </p>

<blockquote>
  <p>Receiving objects: 100% (1918/1918), 251.85 KiB | 447 KiB/s, done.
  Resolving deltas: 100% (1164/1164), done.
  61c9f363e73b4ecbb72f81eb62675260a1132048 HEAD is now at 41b5913 Merge
  pull request #27 from stof/disable_profiler</p>
  
  <p>Parse error: syntax error, unexpected T_STRING, expecting
  T_CONSTANT_ENCAPSED_STRING or '(' in
  /home/quantum/webapps/quantumnetworks/vendor/bundles/Sensio/Bundle/DistributionBundle/Resources/bin/build_bootstrap.php
  on line 35</p>
  
  <p>Parse error: syntax error, unexpected T_STRING, expecting
  T_CONSTANT_ENCAPSED_STRING or '(' in
  /home/quantum/webapps/quantumnetworks/app/console on line 13</p>
  
  <p>Parse error: syntax error, unexpected T_STRING, expecting
  T_CONSTANT_ENCAPSED_STRING or '(' in
  /home/quantum/webapps/quantumnetworks/app/console on line 13</p>
</blockquote>

<p>So yeah were making progress, almost done :)</p>

<p>EDIT2 :</p>

<p>I called my host company, they said , when you execute a script in php, even if you type php54, the script itself, if it starts another script, won't call it with the 5.4 version. TO fix that, here are the 4 steps :</p>

<pre><code>cd ~/webapps&lt;your application&gt;
ln -s /usr/local/bin/php54 ./php
export PATH=./:$PATH
php54 bin/vendors install
</code></pre>

<p>need to do all of them</p>
","4","1083453",""
"65953294","10691072","2021-01-29 11:07:23","-1","28","<git><svn><tortoisesvn><git-svn>","How to handle additional space got appended in svn directories during svn-git migration?","<p>SVN Url : <a href=""https://svn.tech.boom/test/my%20repo"" rel=""nofollow noreferrer"">https://svn.tech.boom/test/my%20repo</a></p>
<p>if i clone above url it is throwing following error and started scanning the svn repo.</p>
<p>File not found /test/my%20repo path, test/my%20repo</p>
","1","10691072",""
"11315049","62811","2012-07-03 16:15:48","5","221","<git-svn>","Is git svn dcommit atomic?","<p>In my company we have a subversion server and everyone is using subversion on their machines.
However I'd like to use git, committing changes locally and then ""push"" them when I'm ready.</p>

<p>However, I can't understand what happens in the following situation.
Let's say that I made 3 git commits locally and now I'm ready to ""push"" everything on the subversion server. If I understand correctly, <code>git svn dcommit</code> should basically make 3 commits sequentially on the server, right? But what happens if in the meantime (let's say between the second and the third commit) another colleague of mine issues a commit?
The scenarios I can think of are:</p>

<p>1) git kind of ""locks"" (is that even possible?) the subversion server during commits so that my commits are doing atomically and my colleague's one is done after mine</p>

<p>2) The commit history on the server becomes mine1-mine2-other-mine3 (even if 'other' should fail since my colleague doesn't have an updated working copy at that point).</p>

<p>I think it's #2, but perhaps the committing speed is so high that this seldom becomes an issue. So which one is, #1 or #2?</p>
","1","62811",""
"11326301","520162","2012-07-04 09:32:00","12","2922","<git-svn><msysgit>","msysgit broken from 1.7.11?","<p>After updating msysgit to 1.7.11, I get the following error when calling git-svn:</p>

<pre><code>$ git svn rebase
Can't locate Git/SVN/Editor.pm in @INC (@INC contains: /lib 
/usr/lib/perl5/5.8.8/msys
/usr/lib/perl5/5.8.8
/usr/lib/perl5/site_perl/5.8.8/msys
/usr/lib/perl5/site_perl/5.8.8 /usr/lib/perl5/site_perl .) 
at C:\Program Files\Git/libexec/git-core\git-svn line 81.
BEGIN failed--compilation aborted at C:\Program Files\Git/libexec/git-core\git-svn line 81.
</code></pre>

<p>Does anyone else experience this problems?</p>
","1","520162","0"
"11331480","216021","2012-07-04 14:57:26","0","100","<git><svn><branch><git-svn>","Create an svn tag from an existing git tag","<p>I am trying to create a proper SVN tag from an annotated git tag. I presumed that what I have to do is :</p>

<ul>
<li>checkout the tag -> done</li>
<li><strong>git svn branch -tm ""version x""</strong></li>
</ul>

<p>Calling the branch command results in the following error message : </p>

<pre><code>Unknown option: t
Unknown option: m

git-svn - bidirectional operations between a single Subversion tree and git
Usage: git svn &lt;command&gt; [options] [arguments]

Available commands:
  blame            Show what revision and author last modified each line of a file
                     --git-format
  clone            Initialize and fetch revisions
                     --add-author-from
  ...
</code></pre>

<p>surprisingly, neither <code>branch</code> nor <code>tag</code> commands are listed among the available commands. Calling <strong>git svn branch</strong> results in the same help page, without the ""Unknown option"" part.
I have no idea what is going wrong and how to fix it.</p>

<p>I am using git 1.6.0.2, git-svn 1.6.0.2 with svn 1.6.13</p>

<p>Unfortunately I don't have the rights to update and to check whether it's a version-related issue</p>

<p>Thank you</p>
","0","216021","0"
"11333918","24063","2012-07-04 18:25:30","5","1431","<git><git-svn>","How to keep a backup git repository in sync with a local one, ""git push --mirror"" or ""git remote update""","<p>At work we use svn on the server but I am using git locally (via git-svn) to make use of the speed/branching/commits that aren't ready to share etc.</p>

<p>This is working fine but I'm uncomfortable having changes just one my computer for days on end in case something goes wrong, and would like to have a private backup repo on our file share.</p>

<p>I have created a copy of my local repo using a command like this:</p>

<pre><code>git clone --mirror MyRepo z:/MyRepo.git
</code></pre>

<p>and have added this as a remote to my local with this:</p>

<pre><code>git remote add backup z:/MyRepo.git
</code></pre>

<p>What is the best way of keeping the backup repository in sync with my local one at the end of the day? </p>

<p>I think its one of the following but don't know if they are equivalent or if not what the trade offs are.</p>

<ol>
<li><p>In local repository: <code>git push --mirror backup</code></p></li>
<li><p>Or in backup repository: <code>git remote update</code></p></li>
</ol>

<p>Or indeed if there is a better way?</p>
","4","24063","0"
"11339411","187503","2012-07-05 07:11:40","-1","75","<git><git-svn>","defining public key for git on a pc","<p>I am trying to set up my pc as a testing machine. I am part of a distributed team using git, but I am very new to using git. I have copied my public and private keys from my mac os x machine ~/.ssh directory in to the pc ~/.ssh directory and tried to clone the remote repository in the same way I would on the mac, but using git bash. It is asking for a password when it should not be..... I have even removed the other keys from my pc that could possibly require a password and only left the ones created for this project (that work on my mac without a password). I have also chmod 777 the ~/.ssh directory.</p>

<p>Any ideas?</p>
","0","187503",""
"29239202","4708421","2015-03-24 17:30:02","0","175","<git><svn><git-svn><dcommit>","General workflow for git-svn bridge for 2 teams","<p>Lately I read many things about GIT-SVN bridge, tried it myself but somehow I fail when things get rough.</p>

<p><strong>The environment</strong>
We are 2 teams: once uses SVN, the other is rebel and uses GIT. In order to sync, I created a bridge between the 2 repos. 
The SVN team has x developers pushing 10 times a day and having mostly a red build, GIT team has 6 developers and they want to fetch only once a week or when they have something to commit so they keep the build mostly green.</p>

<p><strong>Use case:</strong>
The ""bridge"" is not automated (yet), therefore it is on my computer so I am responsible to merge branches and dcommit them correctly.
So, the GIT team is splitted in 2: some of them working on branch ""branch1"" and the rest working on ""branch2"". They always work in pairs so when ""branch1"" is done, we create another branch for next task.</p>

<p><strong>What I tried to do:</strong>
In order to keep it clear, I created a branch from master called ""masterSpace"". I do git-svn rebase on master every morning, then I merge the changes into masterSpace. A developer creates from masterSpace ""branch1"" when needed where devs commit stuff. When they are done, I have to commit everything on SVN. I tried like this</p>

<pre><code>merge ""branch1"" into ""masterSpace"".
checkout master
git svn rebase
git rebase masterSpace
git dcommit
git checkout masterSpace
merge ""master"" into ""masterSpace"". 
</code></pre>

<p>Then a developer would create a new branch from this masterSpace having everything up-ti-date and the process repeats itself </p>

<p><strong>Problem:</strong>
I tried this with branches that had a single commit and worked great, but things got rough after like 2 weeks of work ... then my workflow failed.
After I decommited , the same commits had different IDs on master and on ""masterSpace"" so next time I was trying to dcommit I got hell of a lot of conflicts. Even after I merged master into masterSpace.
I even tried a simple scenario where:</p>

<pre><code> I have a ""branchX"" with changes
 I merge them on ""masterSpace""
 rebase them on master and finally dcommit them.
 Then I made a single change on ""masterSpace"" 
 I rebased it into ""master""
</code></pre>

<p>After this, I was like 10 commits ahead (because of the IDs of the previous commits I guess). So...dead end</p>

<p><strong>Q1: Solution?</strong>
What would be the correct workflow for our environment and usecases so that both GIT and SVN teams can sync and work peacefully ? I decided that the ""masterSpace"" is redundant and it will never work as I imagined. Still,  I have to find a fast solution for the dcommits so my team won't lose time or code. Some helpful information: we change a branch every 2 weeks aprox. After we finish, we can throw away the used branch and create another one from the master</p>

<p><strong>Q2: How to make everything automatically?</strong>
In the near future I plan to move my ""bridge"" on Jenkins. Would it be possible to find a solution to make it work automatically? Something like merging a branch on ""jenkinsbranch"". Jenkins automatically builds this branch, if its green it dcommits it, if not, waits for another push that will fix the build</p>

<p>In my initial scenario, I planned to have the ""masterSpace"" as ""master"" on jenkins. A developer would merge his branch into ""masterSpace"", jenkins  would make a svn-rebase and build it automatically, if it is green then dcommits all the changes. Else, it waits for a dev to fix the build. But... seems like I was wrong.</p>

<p>TL:DR
What would the normal workflow be when a team works on 2 different branchs for a couple of weeks and wants to dcommit them in SVN (and be in sync with SVN) ?</p>
","1","4708421",""
"11345868","1504208","2012-07-05 13:56:37","2","7620","<git><svn><git-svn>","How to use git-svn with svn+ssh url","<p>I like to use in cygwin the <code>git svn clone</code> command with our company svn repository.</p>

<p>The url for this is <code>svn+ssh://svn.&lt;url&gt;.com/repo</code></p>

<p>under this I can see with e.g. eclipse the repository with trunk/tags/branches</p>

<p>Running <code>git svn clone svn+ssh://svn.&lt;url&gt;.com/repo</code></p>

<blockquote>
  <p>No such file or directory: Unable to connect to a repository at URL
  'svn+ssh://svn..com/repo': Error in child process: exec of 'ssh'
  failed: No such file or directory at /usr/lib/git-core/git-svn line
  2299</p>
</blockquote>

<p>Any one can help me what and how to do this ?</p>
","3","1504208","0"
"11356901","930618","2012-07-06 06:24:01","27","6855","<git><git-svn><git-branch>","git-svn clone | spurious branches","<p>I used the following command to clone svn repo into git and after executing it, i see some spurious branches.</p>

<p><code>git svn clone [SVN repo URL] --no-metadata -A authors-transform.txt --stdlayout ~/temp</code></p>

<p><code>git branch -a</code></p>

<pre><code>*(no branch)
  master
  remotes/abc-1.3.x
  remotes/abc-1.3.x@113346
  remotes/abc-1.3.x@541512
  remotes/branch_test_script
  remotes/tags/modules-1.2
  remotes/tags/modules-1.2@113346
  remotes/tags/modules-1.2@516265
  remotes/tags/release-1.1
  remotes/tags/release-1.1@113346
  remotes/tags/release-1.1@468862
  remotes/trunk
</code></pre>

<p>Actual branches created in svn were abc, branch_test_script, modules and release.
Can someone help in understanding what 'abc-1.3.x@113346' , 'abc-1.3.x@541512' ... 'release-1.1@468862' etc are ?</p>

<p>How can we get rid of these spurious branches / what do they signify ?</p>

<p>Thanks,<br>
Gayathri</p>
","7","930618","0"
"11365317","141284","2012-07-06 15:37:19","18","12748","<git-svn>","git-svn clone fails ""fatal: Not a valid object name""","<p>Whilst doing <code>git svn clone -s https://svn.example.com/repo/</code> I received the following output:</p>

<pre><code>r3073 = a6132f3a937b632015e66d694250da9f606b8333 (refs/remotes/trunk)
Found possible branch point: https://svn.example.com/repo/trunk =&gt; https://svn.example.com/repo/branches/v1.3, 3073
W: Refspec glob conflict (ref: refs/remotes/trunk):
expected path: repo/branches/trunk
    real path: repo/trunk
Continuing ahead with repo/trunk
W: Refspec glob conflict (ref: refs/remotes/trunk):
expected path: repo/branches/trunk
    real path: repo/trunk
Continuing ahead with repo/trunk
W: Refspec glob conflict (ref: refs/remotes/trunk):
expected path: repo/branches/trunk
    real path: repo/trunk
Continuing ahead with repo/trunk
W: Refspec glob conflict (ref: refs/remotes/trunk):
expected path: repo/branches/trunk
    real path: repo/trunk
Continuing ahead with repo/trunk
fatal: Not a valid object name refs/remotes/tags/Sync Controllers
cat-file commit refs/remotes/tags/Sync Controllers: command returned error: 128
</code></pre>

<p>Running <code>git branch -a</code> gives:</p>

<pre><code>remotes/tags/Sync%20Controllers
remotes/tags/v1.1
remotes/trunk
remotes/v1.2
</code></pre>

<p>I think the problem is that ""remotes/tags/Sync Controllers"" != ""remotes/tags/Sync%20Controllers"".</p>
","2","141284","0"
"12305131","702627","2012-09-06 17:13:17","4","3758","<git><svn><git-svn>","git-svn clone failure, perl.exe failed assertion","<p>My work has an absolutely massive and ancient code base that is very quickly becoming untenable for merging multiple projects together.  I am attempting to pull the repository - WITH its entire history - into git to solve some of these problems.</p>

<p>However, git svn is causing many problems when attempting to specify commands to ensure the entire history is pulled.</p>

<p>The svn repository and the client machine doing the pulling are both Windows 7-based (the svn repository is on a Server 2008 machine, but same core really).</p>

<p>These are the commands I have tried so far: </p>

<pre><code>git svn clone ""https://path/to/svn/"" ""local/repository/""
</code></pre>

<p>Issue: This retrieves a functional repository, but only pulls roughly 1/4th of the history associated with the repository, due to some major upgrade roughly a year ago that nobody can give me too many details on.  I do not know why this break occurs.  Some of the branches that are part of the repository, confusingly, have no commits in common with the main line trunk.  This very seriously compromises the merging benefits git brings.</p>

<pre><code>git svn clone -T ""https://path/to/svn/trunk/"" ""https://path/to/svn/"" ""local/repository""
</code></pre>

<p>Issue: No branches argument, doesn't properly retrieve the branches.</p>

<pre><code>git svn clone --b=""https://path/to/svn/branches"" -T ""https://path/to/svn/trunk/"" ""https://path/to/svn/"" ""local/repository""
</code></pre>

<p>Issue: The following error:</p>

<pre><code> subversion/libsvn_subr/path.c:115: failed assertion `is_canonical(component, clen)`.
 0 [sig] perl.exe"" 4432 open_stackdumpfile: Dumping stack trace to perl.exe.stackdump
</code></pre>

<p>The stack trace is an incomprehensible collection of pointer locations that provides no useful information.  An example:</p>

<pre><code>Frame       Function      Args
028F668     74F21194      (000000EC, 0000EA60, 00000000, 0028F6BC)
</code></pre>
","1","702627","0"
"29981000","4840020","2015-05-01 02:53:00","52","110079","<git><github><bitbucket><git-svn>","How to clone a specific branch in git bitbucket","<p>I want to clone a specific branch. I don't want download the <code>master</code> branch.</p>

<p>How do I clone the whole project and then switch to <code>validations</code> branch?</p>
","0","4840020","0"
"13346322","232282","2012-11-12 15:16:53","2","136","<git><git-svn>","A git-svn checkout peculiarity","<p>My git-svn work flow is as follows:</p>

<p>Production code goes in master, off which I do my git svn dcommits/rebase.  I work on feature/topic branches, and continue to rebase -i to master and merge until I'm ready to bring those into master and subsequently push to svn trunk using dcommit.  </p>

<p><em>I can usually do <code>git checkout -</code> to checkout the previous branch I was on.</em></p>

<p>For some reason though, when I do <code>git svn rebase</code>, and then try to git checkout to my previous branch, it does not work (it just stays in master).  That is, lets say I do:</p>

<pre><code>(master)$ git checkout -b my-feature-branch
</code></pre>

<p>I do some work on that branch, then commit</p>

<pre><code>(my-feature-branch)$ git commit -am ""Some work""
</code></pre>

<p>I then want to bring in the latest changes, and the quickly change back to my branch:</p>

<pre><code>(my-feature-branch)$ git checkout master
(master)$ git svn rebase
</code></pre>

<p>This brings in the latest svn trunk changes into master.  Now I just want to quickly change back to my topic branch.</p>

<pre><code>(master)$ git checkout -
</code></pre>

<p>At this point, the branch checkout stays as master.  I'm guessing some sort of operation is popping off the last branch I worked on, but I don't know about the internals to know this for sure.</p>

<p>So my question is, does anyone know why this is?</p>
","0","232282","0"
"30923169","2675420","2015-06-18 18:36:57","0","155","<git><svn><git-svn><codeplex><migrating>","Migrating Codeplex SVN to Git with git svn clone","<p>In the past (2013), I was able to migrate a repository from Codeplex (under SVNBridge) to a Git repository.</p>

<p>I'm trying to do this again, with the same repository, and the 'git svn clone' method is not working.</p>

<p>Basically, it creates the .git folder and it's all. No code is downloaded, no message is issued...</p>

<p>I'm trying to execute this line of command:</p>

<blockquote>
  <p>git svn clone <a href=""https://mohid.svn.codeplex.com/svn"" rel=""nofollow"">https://mohid.svn.codeplex.com/svn</a> -s mohid_code</p>
</blockquote>

<p>As I said, no code is downloaded, but no messages are issued.</p>

<p>Am I missing something? 
Have someone tried to do this operation recently?</p>

<p>I noticed that Codeplex, for our project have been a little ""unresponsive"" in the last couple of days.</p>

<p>Any other ideas to get all the history and put on a git repository?
I've being trying to avoid using svn2git, but maybe I'll give it a try.</p>

<p>Thanks!
Eduardo</p>
","0","2675420",""
"13376917","135665","2012-11-14 10:19:55","18","4071","<git><svn><git-svn>","Add git branch after initial fetch in the same svn-remote","<p>I'm using git-svn to work with a svn repo. I don't want the whole repo, sine it contains a lot of legacy, with binaries in it. I'm only tracking some directories.</p>

<p>Here is my current <code>.git/config</code>, which is working fine.</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = https://svn.example.com/repository
    fetch = trunk/Python:refs/remotes/trunk
    branches = branches/{stage,prod,stage_with_proxy}/ucapi/:refs/remotes/*
    branches = branches/{active}/Python/:refs/remotes/*
</code></pre>

<p>Now I want to add a new branch:</p>

<pre><code>    branches = branches/{fuze_node}/:refs/remotes/*
</code></pre>

<p>but when doing <code>git svn fetch</code> the new branch is not visible to git. It acts as if the line is not in the config.</p>

<hr>

<p><em>I know this could be done with a new svn-remote, but I would prefer not to take that road.</em></p>
","2","135665","0"
"13377446","1077272","2012-11-14 10:54:47","0","278","<git><github><git-svn>","How to update user email in git repo cloned from SVN","<p>I cloned my SVN repo to GIT. When I did it I pointed file with user names. </p>

<pre><code>user1 = User1 &lt;user1@mail.com&gt;
user2 = User2 &lt;user2@mail.com&gt;
</code></pre>

<p>Then I updated to github. All users are recognised except one. I discovered that I made speling mistake in email.</p>

<p>I used this method <code>git --filter-branch</code>.</p>

<p><a href=""https://stackoverflow.com/questions/750172/how-do-i-change-the-author-of-a-commit-in-git"">Change the author and committer name and e-mail of multiple commits in Git</a></p>

<p>And it changed this user mail successfully. But now when i push to github it sais it is up-to-date and do not want to update user email on github.</p>

<p>How do I update it?</p>
","1","1077272",""
"13381669","750216","2012-11-14 15:20:19","1","1003","<git-svn><tortoisegit>","How to set username on tortoisegit dcommit?","<p>I set up a svn server using <code>svnserve</code> to test how svn-git works.</p>

<p>When trying to <code>dcommit</code> I run into the problem that the tortoise gui does not give the option to choose the username, it just prompts for the password:</p>

<p><a href=""http://img1.uploadscreenshot.com/images/orig/11/31810164510-orig.png"" rel=""nofollow noreferrer"">http://img1.uploadscreenshot.com/images/orig/11/31810164510-orig.png</a></p>

<p>Initially the username shown by the prompt used to be the windows authentication user (Razvan).</p>
","0","750216","0"
"13385355","745236","2012-11-14 18:53:41","1","995","<git><svn><git-svn>","git svn sync failure","<p>I am following this thread
<a href=""https://stackoverflow.com/questions/661018/pushing-an-existing-git-repository-to-svn"">Pushing an existing git repository to SVN</a>
to sync a git repository to svn. However I am stuck at git svn fetch</p>

<pre><code>git svn fetch
RA layer request failed: REPORT of '/svnrepos/my_git/!svn/vcc/default': Could not read chunk size: Secure connection truncated (https://my.svn.net) at /usr/libexec/git-core/git-svn line 5061
</code></pre>

<p>Anybody has an idea of how to work around this...</p>

<p>[Additional information]: I am behind a corporate proxy, but the svn url is reachable without proxy. Anyway I already tried set and unset http-proxy-host and http-proxy-host, http-proxy-port, http-proxy-username, http-proxy-password, none of which worked.</p>

<p>[Additional information 2] I can use both ""svn co"" and ""git svn clone"" to checkout the svn url</p>
","2","745236","0"
"13404005","843431","2012-11-15 18:39:56","4","322","<git><svn><git-svn>","Using git within an svn checkout? (without git-svn)","<p>I did a number of searches, but couldn't find an answer to this question. Apologies if it is a duplicate.</p>

<p>I'd like to know if there are any problems initializing a <code>git</code> repo (for local usage) within an existing <code>svn</code> checkout, but <strong>without</strong> using <code>git-svn</code>.</p>

<p>Here's my scenario:</p>

<ul>
<li>My team uses <code>svn</code> and is not familiar with <code>git</code>.</li>
<li>I'm still learning <code>git</code>; I'm not nearly as familiar with it as I am with <code>svn</code>.</li>
<li>I'd like to make use of the powerful <strong>local</strong> features of <code>git</code> (like branching, stashing, etc).</li>
<li>I do not want to learn <code>git-svn</code> at this time (though I plan to in the future).</li>
<li>I will be using an <code>svn</code> client exclusively to interact with the repository. (So I clearly understand what I'm doing from the <code>svn</code> side and don't get any strange interactions).</li>
</ul>

<p>I'm thinking that I would always do <code>svn update</code> and <code>commit</code> from the <code>git</code> master branch. As I work on features, I'd merge to and from master.</p>

<p>Has anyone tried this? Are there any nasty drawbacks or side effects? Tips?</p>
","0","843431","0"
"48400562","8974067","2018-01-23 11:25:52","0","84","<svn><tortoisesvn><git-svn><kde-plasma><svn2git>","Can I write KDE rules for svn2git without using svneverever","<p>I want to start writing KDE rules for my SVN to Git migration. Can I simply see the SVN structure using 'repo-browser' (TortoiseSVN) and write the rules accordingly instead of installing <code>svneverever</code> to help determine the structure?</p>
","0","8974067",""
"33033196","94102","2015-10-09 08:12:31","2","278","<git><svn><git-svn>","How to remove duplication in git tree from git-svn","<p>I am using git-svn to track a canonical subversion repository.  My local repository had the commits from the svn, but also additional branches that I was working on concurrently, that were <em>not</em> in the subversion respository.  </p>

<p>My old computer died, and so I'm trying to duplicate that setup on my new computer.  Luckily I backed up my git repository to a server, which I can clone from to get all of my git commits (including the ones not part of the SVN).  However, this tree cannot interact with git-svn because it doesn't have the right metadata.  I also can use git-svn to init a /new/ git tree which matches the SVN commits, but git-svn creates a duplicate tree that is unconnected from the rest of my git commits.  This means that I cannot simply use the new tree, because I would lose all git commits that aren't a part of the SVN.</p>

<p>In short, my tree looks like this:</p>

<p><code>
A D   A'
|/    |
B E   B'
|/    |
C     C'
</code></p>

<p>where ABC are the git-svn commits from my old computer, A'B'C' are the duplicate commits that git-svn creates on my new computer, and DE are various commits that only exist in the git repository from the old computer (they are not part of the SVN).</p>

<p>How can I deduplicate these trees, so that I get a single tree with the extra commits properly attached, and that will interact with the svn repository properly?</p>
","0","94102","0"
"1789887","109305","2009-11-24 12:51:42","3","1801","<git><git-svn>","git-svn rebase gone horribly wrong","<p>Is there a way to redo a git-svn rebase. or reset any effects by it.</p>

<p>In my +8000 commit git-svn repository, something went wrong after merging a branch. My local ""master"" does not reflect anything near a complete log of trunk.</p>

<p>And running <code>git svn rebase</code> correctly fetches new revisions but then tries to apply what looks like all 8000+ commits from the svn trunk.</p>

<p>Are there ways to reset and make sure the HEAD of master points to HEAD of trunk?</p>
","0","109305","0"
"30751113","1326430","2015-06-10 08:33:06","2","542","<git><svn><version-control><tags><git-svn>","git-svn problems creating tags","<p>First off, I have no problems at all pushing updates to the origin trunk. If I try creating tags or branches, I get the following error:</p>

<p><code>git svn tag 4.0.6</code></p>

<blockquote>
  <p>Copying <a href=""http://plugins.svn.wordpress.org/xxx/trunk"" rel=""nofollow"">http://plugins.svn.wordpress.org/xxx/trunk</a> at xxx to <a href=""http://plugins.svn.wordpress.org/xxx/tags/4.0.6"" rel=""nofollow"">http://plugins.svn.wordpress.org/xxx/tags/4.0.6</a>...
  Authorization failed: POST of '/!svn/me': authorization failed: Could not authenticate to server: rejected Basic challenge (<a href=""http://plugins.svn.wordpress.org"" rel=""nofollow"">http://plugins.svn.wordpress.org</a>) at /usr/local/Cellar/git/2.4.1/libexec/git-core/git-svn line 1196.</p>
</blockquote>

<p>I have tried resetting my password, but since I have no problems pulling/pushing updates to/from the trunk, im pretty sure this is not related to my login credentials.</p>

<p>Does anyone have experience with this specific problem? If it is of any relevance of all, Im sitting on OSX Yosemite.</p>

<p>Thank you in advance.</p>
","3","1326430","0"
"1880405","3744","2009-12-10 11:35:18","34","5892","<svn><git><git-svn><code-sharing>","Can different git-svn clones of the same svn repository expect to be able to share changes then git svn dcommit?","<p>I've read a great deal of ""go from svn to git"" and other ""git-svn workflow"" articles on the web, and still I think they often deal with overly simple situations. They are often targeted at guys who just want to use git and hack locally, without using the full power of git, like pull, fetch, merge and the like between multiple developers who would all have cloned the svn repository with git-svn, then still expect to be able to push their changes any time to the (official) svn repository, and get back to working in git and sharing their stuff etc.</p>

<p>Whenever these articles admit you can't do everything you'd do in pure git, the consequences and possible screw ups are never clearly explained (or maybe it's just me ?). Even the git-svn man page mentions caveats, but not really in an extensive manner.</p>

<p>Based on what I've read, I feel there could be problems when git-svn is used in that specific way, which I'll describe below. Can someone tell me if I'm right about this ?</p>

<p>Here is the ""wanted"" way of doing things:</p>

<ol>
<li>We have a project in a svn repository</li>
<li>Developer A git-svn-clone's the svn repo. He begins to hack things locally</li>
<li>Developer B git-svn-clone's the same svn repo. He begins to hack things on his own.</li>
<li>After doing that for some time, possibly adding devs C/D/..., and having other developers who do ""standard"" svn commits to the original repo, the git users would want to share their code and do all kinds of git magic.</li>
<li>Any one of those git users would like to be able to push the now merged changes to svn (dcommit?)</li>
</ol>

<p>My question is: am I dreaming? I read some time ago, in a git book I think, that git-svn-clone could create git repositories that are of course a ""mirror"" of the svn repo, but that git repos created that way by different developers would have different ""ids"" and commits would have different hashes. So my understanding was that those git repos wouldn't share any common git ancestor, and thus wouldn't be able to use all the git commands you need to share, merge, and so on. Is it true, are we going to face problems with this workflow ?</p>

<p>Sometimes I read this could be done, using at least an ""official"" bare git repository, that would be the only one to be git-svn-cloned, and all git users would have to start form this one. Then you need someone who is in charge of this central git repo, and gathers the changes between the git devs, before dcommiting everything to the svn repo. This would be the only way for git users to be ""unaware"" that the original git repo comes from svn, and would let them use all git commands as they like. The only person who would need to be fluent in both git and svn (and know about git-svn caveats) would be the ""merge manager"" (or whatever he's called).</p>

<p>Am I completely misunderstanding git-svn caveats ? Is there any simpler way of doing this ?</p>
","0","3744","0"
"13183534","1060205","2012-11-01 18:45:06","9","855","<git><svn><git-svn><git-rebase><git-stage>","Why does ""git rebase"" leave opposite sets of modifications in the stage and the working copy?","<p>I'm using git-svn as an svn client. From time to time I encounter the following issue.</p>

<ol>
<li><p>I start with a couple of commits in my local git branch, a empty stage and a clean working copy.</p></li>
<li><p>I type ""git svn rebase"" in windows command line to fetch the team's modifications and put my commit after them to keep a linear history (this is required to use git-svn)</p></li>
<li><p>Everything goes fine, team's content is fetched and my commits are rebased after then, but... </p>

<p><em>I end up with modifications in the working copy, and modified files in the stage, and the modifications of the working copy are the exact oposite of the modifications in the stage.</em></p></li>
</ol>

<p>I Usually work around this by just unstaging everything that's in the stage, which reverts the modifications in the working copy, which is fine, but I would really like to understand what's happening here. </p>

<p><strong>Question: Is that a bug, or is it something that I don't understand with git rebase?</strong></p>

<p>Note: I had the issue while using ""git svn fetch"" and ""git rebase"" later.</p>

<p>Note: I use git on windows with a large svn repository (10000+ files, 150000+ revisions), and I also use git-extensions. <strong>Edit:</strong> I use it only explore the repository and commit. I do anything else from windows command line.</p>

<p><strong>Edit:</strong> As requested by one of the comment, here are two screenshot to help understand the problem. The first is the content of the working copy, the second is the content of the stage. You can easily see the both are the exact oposite:</p>

<p>Working copy:
<img src=""https://i.stack.imgur.com/bWe12.png"" alt=""enter image description here""></p>

<p>Stage (reverts working copy modifications, very visual: same image, red and green are swapped):
<img src=""https://i.stack.imgur.com/elmRW.png"" alt=""enter image description here""></p>

<p><strong>Edit:</strong> I just reproduced the issue in a very simple case: My commit modifies only one file, very few new commits were fetched during the ""git svn rebase"", and none of them affected the modified file.
I checked with ""gitk --all"". It says exactly the same thing than git-extensions and ""git status""
Here is the output of gitk. We see from bottom to top:</p>

<ul>
<li>The last 3 lines are the 3 commits tha were fetch when rebasing. None of them touches my file.</li>
<li>The 3rd line from top show my commit after rebase: it's all good, it adds what it's supposed to add and removes what it's supposed to remove.</li>
<li>The 2nd line shows the content of the index: it contains modifications that <strong><em>revert my commit</em></strong></li>
<li>The 1st line shows the content of the working copy: it contains the same modifications that my commit does, IE reverts the modification in the index.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/C3Y4S.png"" alt=""enter image description here""></p>

<p><strong>Edit:</strong> Here is the content of my <code>.git</code> dir after a ""git svn rebase"" where the problem occured:</p>

<pre><code>17/02/2012  04:57                 0 ArmuazEm5Z
05/04/2012  02:28                 0 BeMzRLwWcu
06/11/2012  14:37                90 COMMIT_EDITMSG
01/11/2012  15:42               628 config
15/02/2012  04:21                73 description
16/02/2012  13:22                 0 fuMhUevkYu
05/11/2012  15:53         1 703 279 gitk.cache
05/07/2012  03:49                 0 gJfUbdRuG9
06/11/2012  14:42                23 HEAD
11/07/2012  03:14    &lt;DIR&gt;          hooks
21/02/2012  03:22                 0 II5HPacSJd
06/11/2012  14:42         5 439 960 index
15/10/2012  13:18    &lt;DIR&gt;          info
16/02/2012  08:16                 0 jerS1GtBYS
17/02/2012  04:57                 0 Kg64sq9pzS
15/02/2012  23:36                 0 lbe0yALJYy
15/10/2012  13:17    &lt;DIR&gt;          logs
19/10/2012  16:58    &lt;DIR&gt;          objects
06/11/2012  14:42                41 ORIG_HEAD
25/10/2012  11:02             2 795 packed-refs
05/07/2012  03:49                 0 PpxYa5z0Hc
02/11/2012  10:00    &lt;DIR&gt;          refs
15/02/2012  23:36                 0 sm6ociDGGF
06/11/2012  14:42    &lt;DIR&gt;          svn
21/02/2012  03:22                 0 vEqtL0Yiqd
05/04/2012  02:28                 0 VFwn3laTEV
16/02/2012  13:22                 0 XYoiLqY5BM
16/02/2012  08:16                 0 z9vL8lRT7t
              22 File(s)      7 146 889 bytes
               6 Dir(s)  54 105 219 072 bytes free
</code></pre>

<p><strong>Edit:</strong> If you are interested in tracking this issue, I reported a bug on git@vger.kernel.org mailing list with ""[git-svn] [bug report] Index in strange state after git svn rebase"" in the subject.</p>
","12","1060205","0"
"1888969","25050","2009-12-11 15:51:49","4","1061","<git><git-svn><gitignore>","git: ignoring files in the origin","<p>Is there a way to tell git to ignore a file that's stored in its origin?  Since the files in question are in the upstream repository, just adding them to .gitignore or .git/info/exclude don't work.</p>

<p><strong>Background</strong>:</p>

<p>My upstream repository has some generated files in it.  Every time I do a local rebuild, these generated files are changed and differ from the committed version.  The generated files are in the repository because many users don't have the software to generate them (and I don't have the power to change this).   These generated files are never generated by hand and I never want to commit them to my git repository.  I have a separate mechanism to push them to the master repository (and I have no control over this separate mechanism).</p>

<p>I'm using a private git repository for making edits to an upstream subversion repository.  To do this, I have a git repository just for pulling commits from subversion.  That git repository is periodically synced via a cronjob.  I then have private git repositories that are clones of the upstream git repository.  I want git to not bug me about the generated files.  I'm happy with either of these two results: the files are no longer tracked by my local git repository (but they should be tracked by the one that syncs with svn), or git will silently update my generated files but it will never commit my changes and the files will never show up in the ""Changed but not updated:"" section of ""git status"".</p>
","0","25050","0"
"30780678","1945981","2015-06-11 12:23:00","4","170","<git><svn><git-svn>","Adding older history from svn project with git svn","<p>I downloaded an svn repository with</p>

<pre><code>git svn clone -s svn+ssh://svn.dummy.com -r666666:HEAD
</code></pre>

<p>Now I'd like to add older history to the project. Can I do this later on or do I have to download the whole project again?</p>

<p>What I basically want to achieve is checking out a huge package with its history. <code>git svn</code> always crashes at some point. <code>SubGit</code> doesn't work at all (for me) with svn+ssh. Alternatives are welcome.</p>
","6","1945981","0"
"20993468","244010","2014-01-08 10:52:17","1","313","<git><git-svn>","git svn returns ""out of date"" on push and sync in SmartGit and ""unable to determine upstream svn information from working tree history"" on dcommit","<p>I try to push my changes from my local git repro to my company's SVN-repro.</p>

<p>After pull and merge all changes from svn i try to dcommit my changes.</p>

<pre><code>git svn dcommit
</code></pre>

<p>but i get this error:</p>

<pre><code>unable to determine upstream svn information from working tree history
</code></pre>

<p>or</p>

<pre><code>Unable to determine upstream SVN information from HEAD history.
Perhaps the repository is empty. at C:\Program Files (x86)\Git/libexec/git-core\git-svn line 852.
</code></pre>

<p>.. so i try SmartGit but i get another error</p>

<pre><code>Push: svn: E160024: File or directory 'trunk' is out of date; try updating svn: E160024: resource out of date; try updating svn: E175002: CHECKOUT of '/svn/entwicklung/!svn/ver/21045/trunk': 409 Conflict (http://le-svn)
$ git.exe update-index --refresh
$ git.exe diff-files --quiet --ignore-submodules
$ git.exe diff-index --cached --quiet --ignore-submodules HEAD --
$ git.exe update-index --refresh
$ git.exe diff-files --quiet --ignore-submodules
$ git.exe diff-index --cached --quiet --ignore-submodules HEAD --
$ git.exe checkout -q 09fc6832ef3111c2c69d29ba3329b20a365c38b3
$ git.exe merge -q --squash 09fc6832ef3111c2c69d29ba3329b20a365c38b3 8b230b96baecb4a2bfbc48f7ba68d42ef2bbba20 0ff6eca016d2b00ab3ab58fffd59a2379c839d6a
Trying simple merge with 8b230b96baecb4a2bfbc48f7ba68d42ef2bbba20
Trying simple merge with 0ff6eca016d2b00ab3ab58fffd59a2379c839d6a
Automatic merge went well; stopped before committing as requested
Squash commit -- not updating HEAD
$ git.exe commit -q --message Message --allow-empty
$ git.exe checkout -q 6820736762c3fac3c942db0f8e54f150e062e49c
$ git.exe merge -q --squash 6820736762c3fac3c942db0f8e54f150e062e49c cf4da94860388a444028bdece93e421d8cf30102 231bad85bd61cbce1a1a381b9275ed3309f37779
Trying simple merge with cf4da94860388a444028bdece93e421d8cf30102
Trying simple merge with 231bad85bd61cbce1a1a381b9275ed3309f37779
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
$ git.exe commit -q --message Message --allow-empty
$ git.exe checkout -q --force refs/heads/trunk
$ git.exe reset --hard refs/heads/trunk --
HEAD is now at 3c1dc41 Merge branch 'svn/trunk'
</code></pre>

<p>What i'm doing wrong?</p>
","14","244010",""
"30802367","823101","2015-06-12 11:50:05","0","63","<git><git-svn><gitattributes>","How to completly turn off git line endings auto correction","<p>I'm writing a script that migrates our SVN repos to GIT. I have discovered that one repo contains a <code>.gitattributes</code> file (with content like <code>* type=text</code>). That unfortunately means that all files are modified (line endings are auto corrected).</p>

<p>I don't want that because as a next step we are doing branch filtering (using <code>git filter-branch</code>) and it can't proceed with unstaged changes/uncommitted changes (and I also don't want to commit them).</p>

<p>How can I avoid changing endline characters on migration?</p>
","3","823101",""
"13245376","1542339","2012-11-06 06:10:13","9","3994","<git><svn><version-control><git-svn>","why git-svn failed with signal 13?","<p>it is confusing that i failed for many times to clone a svn repo using git svn, why?</p>

<pre><code>$ git svn clone -s https://192.168.2.145/svn/myprojects/Search/

Following parent with do_switch
Successfully followed parent
r362 = 6be745be496f98f96ac66fccead8211734cf6455 (refs/remotes/tags/8-22)
Found possible branch point: https://192.168.2.145/svn/myprojects/demo/trunk =&gt; https://192.168.2.145/svn/myprojects/Search/trunk, 368
Initializing parent: refs/remotes/trunk@368
**error: git-svn died of signal 13**


$ echo $?
141
</code></pre>
","0","1542339","0"
"2155764","261076","2010-01-28 15:47:11","6","1409","<svn><git><git-svn>","How to create a git clone with branches of a ""subproject""?","<p>Here's the situation: We've got a huge svn repository, which is the ""master"" (can't change this because it's actually ""owned"" by another company). We would prefer to work locally in git to get the branching flexibility and speed that git offers. But we don't want to clone the whole repository.</p>

<p>The repository structure looks roughly like this:</p>

<pre><code>/trunk/project1/*
      /project2/*
/branches/branch/project1/*
                /project2/*
/tags/tag1/tag1a/project1/*
          /tag1b/project1/*
     /tag2/tag2a/project2/*
</code></pre>

<p>I'm only interested in project1, but I would like to have both trunk and branches (tags are not so important, but it would be nice to get them, too). </p>

<p>I'm able to get a single branch cloned with these svn-remote settings:</p>

<pre><code>[svn-remote ""svn""]
    url = https://svn.company.com/svn/branches/branch1/project1
</code></pre>

<p>but I really want to get the branching structure, too. I have thought about using ignore-paths:</p>

<pre><code>[svn-remote ""svn""]
    ignore-paths=^project2|^project3|...
</code></pre>

<p>but I would have to update the ignore-paths every time a new top-level ""project"" directory is added, which is not really sustainable.</p>

<p>Secondarily, we really need only the tags in /tags/tag1 (if we need tags at all). Any thoughts on how to do that would be appreciated.</p>
","0","261076","0"
"2159567","28445","2010-01-29 02:43:26","17","32834","<git><git-svn><codeplex>","What is the format of an authors file for git svn, specifically for special characters like backslash or underscore?","<p>I am trying to clone <a href=""http://papercut.codeplex.com/"" rel=""noreferrer"">Papercut, an smtp server emulator</a></p>

<p>I'm getting the list of SVN authors with <code>svn log -q https://papercut.svn.codeplex.com/svn | grep -e '^r'| awk 'BEGIN {FS=""|""};{print $2}'|sort|uniq</code> which is giving me</p>

<pre><code>RNO\_MCLWEB
SND\krobertson_cp
</code></pre>

<p>I created an authors.txt with the <code>SVN_User = UserName &lt;Email&gt;</code> format, but when I run</p>

<pre><code>git svn clone --no-metadata -A authors.txt https://papercut.svn.codeplex.com/svn papercut
</code></pre>

<p>it complains ""Author: RNO\_MCLWEB not defined in authors.txt file""</p>

<p>I've tried with putting a \ before the '\' and '_' to try to escape them, and adding quotes around the name, but neither worked.</p>

<p>I can't find any better description of the authors.txt file format than <code>SVN_User = UserName &lt;Email&gt;</code></p>
","1","28445","0"
"21084160","1185460","2014-01-13 04:57:58","3","2008","<git><version-control><git-svn><git-rebase>","Git SVN, Unable to determine upstream SVN information from working tree history after git rebase","<p>We're doing a two way synchronization of one single branch ""basic"" </p>

<p>I've been able to <code>git svn dcommit</code> before</p>

<p>When I do (in order to do the git -> svn part ,  for svn -> git , git svn fetch works like a charm)</p>

<pre><code>git checkout -b svntrunk trunk 
git rebase basic svntrunk
git svn dcommit 
</code></pre>

<p>the last command end with </p>

<pre><code>Unable to determine upstream SVN information from working tree history 
</code></pre>

<p>If I do the rebase directly on <code>basic</code>  I finish with basic being messed up with the svn version of the commit (when we've 'dcommit' before on top of the actual commits) which seems to tell me that's not the way to go</p>

<p>Am I missing a step ?</p>
","1","1185460",""
"13279427","1592545","2012-11-07 22:33:01","2","270","<git-svn>","Adding files to .gitignore doesn't remove them from ""untracked files""?","<p>I recently started using git-svn, and tried to tell Git to ignore any files that the Subversion repo ignores (mostly binaries and object files), by running ""git svn show-ignore >> .gitignore""</p>

<p>Then I ran git status, and saw that many of those files that are now on my .gitignore list, are still showing up under ""untracked files"". Why? What do I need to do to fix this?</p>

<p>Or am I going about this the wrong way? I just want to be able to run ""git add ."" without it adding in all that junk to the commit.</p>

<p>Thanks.</p>
","0","1592545","0"
"2178779","129322","2010-02-01 17:43:56","13","2470","<svn><git><git-svn>","The svn repository I've imported into git using git-svn has moved","<p>I'm working with a git repository using git-svn. Everything went fine until the day the maintainers of the svn repository decided to move the repository to a different URL.</p>

<p>How can I tell my git-svn client to fetch from the new svn repository?</p>

<p>I've changes the svn URL in the <code>svn-remote</code> of <code>.git/config</code> but now I get the following error:</p>

<pre><code>svn-remote.svn.url already set: https://old.svn.repo
wanted to set to: https://new.svn.repo
</code></pre>
","1","129322","0"
"13284762","663028","2012-11-08 07:54:13","8","2920","<git><svn><git-svn>","possible to recreate svn repository from (full) git-svn clone?","<p>As title, is there any way to reconstruct a svn repo from a full clone with git-svn (containing every single commit starting from r1)?</p>

<p>Edit:</p>

<p>I probably should add that I am looking for a practical means to do it (near-perfect copy is okay as long as it remains usable just as the original svn repository)</p>
","0","663028","0"
"13291121","43681","2012-11-08 14:38:33","2","176","<git><svn><tags><git-svn>","git-svn creates duplicate tags with ""@"" (at sign) in name","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/11356901/git-svn-clone-spurious-branches"">git-svn clone | spurious branches</a>  </p>
</blockquote>



<p>When cloning an SVN repository, <code>git svn</code> creates funny tags: For many (but not all) tags in the SVN repository, two git tags are created, one with an at sign. For example:</p>

<ul>
<li>release-1.0</li>
<li>release-1.0@1523</li>
<li>release-1.1</li>
<li>release-1.1@1783</li>
</ul>

<p>etc.</p>

<p>The number is different for each tag, but apparently it is the SVN revision  when the tag was created, minus 1.</p>

<p>Funnily enough, the tags created point to different commit objects, but the two commit objects have the same tree (i.e. the tags contain the same files).</p>

<p>This is rather annoying, because a) it messes up the list of tags, and b) it crashes EGit in Eclipse (looks like <a href=""https://stackoverflow.com/questions/12727333/jgit-egit-crashing-on-branch-deletion-creation"">JGit/EGit crashing on branch deletion/creation</a> is the same problem).</p>

<p>I have not found any info on this in the git-svn docs, or by googling. Any idea where these tags come from, and how to avoid them?</p>

<hr>

<p>Some more info: There are funny log entries for each funny tag in the git-svn output (somewhat sanitized):</p>

<pre><code>Found possible branch point: [...]
Initializing parent: refs/remotes/tags/release-1.0@1523
W: Ignoring error from SVN, path probably does not exist: (160013): 
Filesystem has no item: File not found: revision 101, path [...]
</code></pre>
","2","43681",""
"2359861","82723","2010-03-01 23:22:47","5","322","<git><git-svn><git-stash><quilt>","Maintain set of local commits working with git-svn","<p>I am using git to develop against a project hosted in subversion, using git-svn:</p>

<pre><code>git svn clone svn://project/
</code></pre>

<p>My general workflow has been to repeatedly edit-and-commit on the master branch, then commit to the svn repository via:</p>

<pre><code>git stash
git svn dcommit
git stash apply
</code></pre>

<p>One of the local modifications that 'stash' command is preserving, that I don't want to commit to the svn repository, is a changed database connection string.  What's the most convenient way to keep this local change without the extra 'stash' steps?</p>

<p>I suspect that something like 'stash' or 'quilt' is what I'm looking for, but I'm still new enough to git that I think I'm missing some terminology that would lead to the exact incantation.</p>

<p><em>Update</em>:  The only solution I found that seems to avoid the <code>git stash</code> + <code>git-svn action</code> + <code>git stash apply</code> series was to update the git-svn ref manually:</p>

<pre><code>(check in local-only change to 'master', then...)
$ cat .git/refs/master &gt; .git/refs/remote/git-svn
$ git svn fetch (with at least one new SVN revision)
</code></pre>

<p>And that leaves the local-only commit as a weird (probably unsafe) commit between two svn revisions.</p>
","0","82723","0"
"2371399","55562","2010-03-03 13:04:55","7","5794","<svn><git><version-control><git-svn>","git svn clone except a particular folder","<p>I want to git clone an svn repository except for one folder in the root folder of svn.</p>

<p>How do I do it?</p>

<p>I could do <code>git svn clone svnrepo/dir/sb-dir/</code> if I needed only <code>sb-dir</code> but I need all folders (and files) within the <code>dir</code> except the <code>design</code> folder</p>
","0","55562","0"
"13879252","874660","2012-12-14 13:03:59","1","53","<git-svn>","Enabling SVN tracking in a git clone of a git-svn clone that didn't start at revision 1?","<p>Suppose I have a <code>git svn clone</code> that I created like this:</p>

<pre><code>$ mkdir foo
$ cd foo
$ git svn clone -s -r 100:HEAD http://svn.example.com/project
</code></pre>

<p>and then I <code>git clone</code> it like this:</p>

<pre><code>$ cd ..
$ git clone foo bar
$ cd bar
</code></pre>

<p>So now <code>bar</code> has <code>foo</code> as its origin. </p>

<p>How do I make <code>bar</code> track the original SVN server? The <code>git-svn</code> man page provides an example of the case where the original <code>git svn clone</code> includes the full revision history, but this doesn't seem to cover the case that the original <code>git svn clone</code> doesn't start from <code>r1</code>. When I try the various things I see described, what <code>git svn fetch</code> does is always start a disconnected history starting at <code>r1</code>.</p>
","1","874660",""
"31400800","5114081","2015-07-14 07:51:09","3","149","<git><svn><version-control><git-svn>","git-svn clone file integrity","<p>I am responsible for moving some projects from a svn repository to git. I found out the workflow is fairly easy, its not more than a simple</p>

<pre><code>git svn clone --stdlayout &lt;svn-repo&gt; &lt;git-repo&gt;
cd &lt;git-repo&gt;
java -jar ~/svn-migration-scripts.jar clean-git --force
</code></pre>

<p>The svn-migration-scripts.jar can be found at <a href=""https://www.atlassian.com/git/tutorials/migrating-overview/"" rel=""nofollow"">Atlassians Git Migration Guide</a>, it converts the remote branches and tags to normal git branches and tags.</p>

<p>However, can I be sure that after performing these steps the local git repository really contains the same files as the svn repo? Especially after reading <a href=""https://stackoverflow.com/questions/10187580/files-missing-after-git-svn-clone"">Files Missing after svn clone</a> I'd really like to be sure there are no differences in both repositorys. A colleague suggested writing a script that checks out every branch in git and svn, and then compares a hash sum of every file. I searched for a tool which does this, but I couldn't find one.</p>

<p>Is there a tool out there that compares the repositories against each other? Or is this functionality already built-in in git-svn? I'd be thankful for any suggestion or idea you have.</p>
","0","5114081","0"
"2473920","198757","2010-03-18 22:59:07","3","1364","<svn><git><version-control><git-svn>","I need git-svn to act as a Subversion v1.5+ client","<p>I'm running git 1.7 on Mac OSX, installed via Homebrew. I'm trying to use <code>git svn</code> to work with a Subversion server that requires Subversion 1.5 clients (a restriction enforced via a pre-commit hook.)</p>

<p>Running <code>git svn --version</code> reveals that as far as git is concerned, <code>git svn</code> is equivalent to svn v1.4.4.</p>

<p>I can't establish whether <code>git svn</code> is a total clone of subversion, and thus needs to be updated to meet subversion v1.5 functionality, or if git is compiled against or just points to some version of subversion under the hood.</p>

<p>I've struggled finding anyone else trying to upgrade the version of <code>git-svn</code>, and I'm guessing this client version restriction is unusual, but I'm stuck with it (corporate environment.)</p>

<p>Is it possible to have git operate as svn 1.5?</p>
","0","198757",""
"2476787","50939","2010-03-19 11:26:09","5","786","<git><workflow><git-svn><cherry-pick>","Cherry-picking from git to svn (or, How to keep a project history in git and releases in svn)","<p>I'm in a position where I'm the only one using git, everybody else is using svn. I've used 'git svn' to connect to the team svn and mostly it works just fine. Lately, I've started a project initially on my own, separate git repo and now I need to merge stuff from it to the svn. However, I still would like to keep tweaking the implementation in my own privacy between releases.</p>

<p>So, what would be the most straightforward way to cherry-pick some commits from my private repo to the svn-cloned repo? Requirement is to keep full local history and have only one svn commit for each pick. Or is there some squashing to be done?</p>

<p>As a method to achieve this, is there a way to get the private repo as another origin for the svn-cloned repo?</p>
","0","50939","0"
"13916036","444107","2012-12-17 14:28:51","0","449","<git><git-svn>","Preserve SVN history of copied TAG when 'git svn clone'ing","<p>I am migrating some SVN projects to git.</p>

<p>I want to clone a certain tag to its own git repository.</p>

<p>By doing a git svn clone on the TAG path I loose all the history that happened before the svn copy, that created the tag in the first place.</p>

<p>Is there a way to preserve the original history in the new git project? (I can browse the SVN history in the IDE of my choice, so SVN seems to be able to provide the needed information)</p>

<p>Reminder: I do NOT want a trunk project with branches and tags resembling the SVN structure. I want a separate project with just the TAG and all the history attached (including revisions before the tag creation)</p>
","0","444107",""
"21442615","770019","2014-01-29 21:03:51","0","156","<version-control><git-svn>","Revert central SVN repo from git-svn","<p>Basically, I would like to <a href=""https://stackoverflow.com/questions/814433/how-do-i-return-to-an-older-version-of-our-code-in-subversion"">revert a central SVN repository back to a previous commit</a>, kinda like this:</p>

<pre><code>svn update
svn merge -r 150:140 .
svn commit -m ""Rolled back to r140""
</code></pre>

<p>But I'm using <code>git-svn</code> and cannot seem to find an equivalent. </p>

<p>I've tried setting everything up locally on a new branch by checking out an earlier commit that was an ancestor of <code>trunk</code> (the current commit of the central repo). I made a few additional changes and now I cannot <code>git svn rebase</code> or <code>git svn dcommit</code> without getting an error from SVN.</p>

<p>I tried checking out that same commit without making the additional changes and then running <code>git svn dcommit</code>, this says it is committing to the central repo but doesn't actually seem to do anything.</p>

<p>How do I go back to a previous commit and then start making new changes?</p>
","0","770019",""
"21457212","1163054","2014-01-30 12:57:23","2","3089","<git><svn><clone><git-svn>","git svn clone creates empty git repository?","<p>I'm trying to use this command to pull the last 100 revisions from an SVN repo into a local git repo (on Windows).</p>

<blockquote>
  <p>git svn clone http://... -r 100</p>
</blockquote>

<p>For some reason, the resulting checkout is empty other than the .git folder.</p>

<p>But without the -r parameter it works fine (although checks out everything since the dawn of time).</p>

<p>Does anyone know what's happening?</p>

<p>Thanks!</p>
","1","1163054","0"
"48176963","4525141","2018-01-09 21:33:01","0","537","<git><svn><git-svn><git-clone>","git svn clone is skipping revisions","<p>I am converting our svn repository to git. However, when I run ""git svn clone"" on our current svn repo, many revisions are getting skipped.</p>

<p>For example, svn revision 2 is skipped, but when I run ""svn log -r 2"" in our svn repo, there is an entry for it. </p>

<p>It's worth noting that when I just run ""svn log"" in our svn repo, revision 2 is not listed. It's only shown when referenced directly.</p>

<p>I'm assuming svn history was sort of deleted, but not really, at one point in the past.</p>

<p>How can I do the git svn clone and get all revisions even when deleted from svn, assuming that's the issue?</p>
","0","4525141",""
"48178179","9195725","2018-01-09 23:31:34","1","863","<git-svn>","I'd like to move over a branch from an svn location and use it as the master in the github location","<p>I'd like to move over a branch from an svn location and use it as the master in the github location. Can anyone tell how to do this?</p>
","1","9195725","0"
"31463511","4738833","2015-07-16 20:03:06","1","549","<git><svn><git-svn>","Failure in passing an authors option to svn2git","<p>I'm in the process of migrating from svn to git (on a local repo) where I'm trying to convert all our svn authors to git format by creating a text file under <code>~/.svn2git/authors.txt</code>,  for example:</p>

<pre><code>jcoglan = James Coglan &lt;jcoglan@never-you-mind.com&gt;
stnick = Santa Claus &lt;nicholas@lapland.com&gt;
</code></pre>

<p>Then pass an authors option to <code>svn2git</code> pointing to that file:</p>

<pre><code>$ svn2git http://svn.example.com/path/to/repo --trunk trunk --authors ~/.svn2git/authors.txt
</code></pre>

<p>I'm getting below error:</p>

<pre><code>Initialized empty Git repository in /home/developer/mygitrepo/.git/
Author: system not defined in /home/developer/mygitrepo/.svn2git/authors.txt file
command failed:
git svn fetch
</code></pre>

<p>What does this mean?</p>
","0","4738833",""
"13956772","82668","2012-12-19 16:27:31","6","1317","<git><svn><git-svn>","""git rebase <branch>"" on git svn repo changed remote tracking destination?","<p>I have a git svn repo. I have multiple release branches in here. I was preparing a new release and as part of it, I figured I'd do a ""git rebase"" from the previous release to pull over any changes that hadn't been merged.</p>

<p>So I set up my branches...</p>

<pre><code>git branch new_release remotes/svn-branches/new_release
git branch old_release remotes/svn-branches/old_release
</code></pre>

<p>And then I did the rebase...</p>

<pre><code>git checkout new_release
git rebase old_release
# watch it pull a bunch of commits
git svn dcommit
    Committing to https://svn.mysvn.net/repo/releases/old_release ...
</code></pre>

<p>After I did the ""svn dcommit"" I almost crapped my pants. It was hosing my old release branch in Subversion!</p>

<p>Why did the remote tracking branch change as a result of doing the rebase?</p>

<p>How do I fix the situation I've gotten myself into?</p>

<p>EDIT: Okay, for getting myself out I believe I can do the following: <a href=""http://svnbook.red-bean.com/en/1.5/svn.branchmerge.basicmerging.html#svn.branchmerge.basicmerging.undo"" rel=""nofollow"">http://svnbook.red-bean.com/en/1.5/svn.branchmerge.basicmerging.html#svn.branchmerge.basicmerging.undo</a></p>

<p>Since there are only a handful of commits that were on the new_release branch that were pulled to old_release, I can revert them by hand individually on the SVN repo. I'm still confused at what happened here though.</p>

<p>EDITx2: Yep, here are some steps to verify.</p>

<ol>
<li>Set up two git branches tracking remotely to SVN branches</li>
<li>Check out one of the branches</li>
<li>Run <code>git svn info</code> and observe the URL points to the correct location in SVN</li>
<li>Run <code>git rebase &lt;other_branch&gt;</code></li>
<li>Run <code>git svn info</code> again and observe the URL changed to point to the other branch location in SVN</li>
</ol>
","0","82668","0"
"59362705","2115825","2019-12-16 18:54:14","0","35","<git><git-svn>","How do I add new SVN remote branch to the existing git-svn repository","<p>I have cloned SVN repository using git-svn and hand-picked some of branches. Now I need to add one more branch from SVN to Git. Can this be done? I Updated the .git/config file to add it but <code>git svn fetch</code> does nothing.</p>

<p>We have huge repository with non-standard layout and moving everything would not be great. So I am hoping to move only stuff I know we immediately need at the cost of some history loss (still keeping years of work). I am worried though that at some point patch for some historical release will be needed and we will not be able to add the missing branch from read-only SVN...</p>
","0","2115825",""
"13963010","209107","2012-12-19 23:34:39","2","659","<git><svn><git-svn>","Fork remote SVN repo to git","<p>Apologies if this question is a duplicate, or if I've missed something, but in all my searching of the interwebz, I can't find any information on this.</p>

<p>I want to fork someone else's SVN project, and then turn it into a local git repo (hopefully preserving all of the SVN commits).  All the examples I've found have only talked about how to turn <strong>your own</strong> SVN repo into a git repo via <code>git svn</code>.</p>

<p>For example, I occasionally write some Adobe AIR apps, and I like to use the open-source <a href=""http://code.google.com/p/alivepdf/source/checkout"" rel=""nofollow"">AlivePDF</a> library for PDF generation.  The SVN repo URL is <code>http://alivepdf.googlecode.com/svn/trunk/</code>.  Since I have made some changes to the source code that I use locally in my PDF generation, I want to then turn my local fork into a git project.  I've tried to just do <code>git svn clone http://alivepdf.googlecode.com/svn/trunk/ alivepdf-read-only --no-metadata --stdlayout .</code> (from the directory where I want to store it).  However when I look at the git repo history (<code>gitx</code> on Mac), it appears to be empty, i.e., no history of the original AlivePDF author's commits.</p>

<p>Am I doing something wrong?  Do I need to SVN fork the project first, <em>then</em> change it into a git project?  Please advise.</p>
","1","209107",""
"13968413","342843","2012-12-20 08:59:00","2","1465","<git><certificate><git-svn>","git-svn doesn't work with certificates","<p>I have access to SVN repository. Access is through HTTPS, I'm using certificate which was imported on my Windows machine and right now I'd like to use git-svn to clone that repository, do my work and push changes to that SVN, but I just get perl error: </p>

<pre><code>Client certificate filename: Use of uninitialized value in chomp
</code></pre>

<p>Is there any way to show git where are my certificates? I think the main cause is that certificate and git just can't authenticate to that SVN, but maybe I'm wrong and it's something completely different. Any tips?</p>
","0","342843",""
"48195235","4525141","2018-01-10 20:05:04","0","27","<git><svn><git-svn><git-clone>","Cloning complex svn branch setup with git svn clone","<p>In our svn repo, I have branches located in <code>/branches</code>. I also have branches located in <code>/branches/subdir1</code> and <code>/branches/subdir2</code>. I have tried passing <code>--branches=/branches</code> but that doesn't get what is inside <code>subdir1</code> &amp; <code>subdir2</code>. I have tried passing <code>branches=/branches branches=/branches/subdir1 branches=/branches/subdir2</code>, but that still treats <code>subdir1</code> &amp; <code>subdir2</code> as their own branch. I have also tried <code>branches=/branches/*/*</code> but that had similar behavior. How can I get all of my branches?</p>
","1","4525141",""
"13977814","1031087","2012-12-20 17:57:03","11","5717","<git><git-svn>","How do I debug git error: ""Your local changes to the following files would be overwritten by checkout"" when there's nothing to stash?","<p>I'm using git-svn, and I'm trying to run <code>git svn rebase</code>.</p>

<p>I get the error:</p>

<pre><code>Your local changes to the following files would be overwritten by checkout:
&lt;filename&gt;
Please, commit your changes or stash them before you can switch branches.
</code></pre>

<p>I have previously run <code>git update-index --assume-unchanged &lt;filename&gt;</code>, and made changes to the file, but I've now run <code>git update-index --no-assume-unchanged &lt;filename&gt;</code> to get rid of that.</p>

<p><code>git status</code> doesn't report any changes and <code>git stash</code> says there's nothing to stash.</p>

<p>I have checked that the file is not in <code>.gitignore</code> or <code>.git/info/exclude</code></p>

<p>How can I debug this problem further?</p>
","0","1031087","0"
"2861338","90801","2010-05-18 21:39:04","4","427","<git><git-svn>","How can I rate limit git-svn?","<p>I'm looking to git-svn a large repo on a busy and underpowerd svn server. I would like to tell git-svn to be polite and not lag the server for people doing real work. Can I do this?</p>
","2","90801",""
"10776574","239532","2012-05-27 19:14:14","1","821","<git><git-svn>",".gitignore is out of date in git-svn","<p>I wanted to do </p>

<pre><code>git svn dcommit
</code></pre>

<p>but I am getting</p>

<pre><code>Merge conflict during commit: File or directory 
'.gitignore' is out of date; try updating: resource
 out of date; try updating at /usr/lib/git-core/git-svn line 922
</code></pre>

<p>how to update from svn repo only the <code>.gitignore</code>? </p>
","2","239532",""
"10803926","370421","2012-05-29 17:31:36","2","535","<branch><git-svn><cherry-pick><dcommit>","`git svn dcommit` failing on a branch","<p>I have been using <code>git-svn</code> to communicate with my company’s svn repo for a while now without any major headaches.</p>

<p>Today, the “headache”-part changed dramatically:<br>
I’ve been working on <code>master/trunk</code> pretty exclusively, and needed to merge most (but not all!) of those change-sets into a new svn-branch, that originated from a pre-existing svn-branch.</p>

<p>Basically this:</p>

<pre><code>🍒---💩---💩---💩--1🍒--1🍒---💩--1🍒---💩---💩--1🍒--1🍒--1🍒---💩  master/trunk
 \
  \
   2🍒--2🍒--2🍒--2🍒--2🍒                                        versioned-release
</code></pre>

<p>Should have become this:</p>

<pre><code>🍒---💩---💩---💩--1🍒--1🍒---💩--1🍒---💩---💩--1🍒--1🍒--1🍒---💩  master/trunk
 \
  \
   2🍒--2🍒--2🍒--2🍒--2🍒                                        versioned-release
                         \
                          \
                           1🍒--1🍒--1🍒--1🍒--1🍒--1🍒           new-versioned-release
</code></pre>

<p>Where <code>💩</code> are commits that shouldn’t be in the <code>new-versioned-release</code>, and <code>x🍒</code> the wanted commits from the respective branches <code>x</code>.</p>

<p>So I did the following:</p>

<ol>
<li><code>git checkout -b versioned-release-svn remotes/versioned-release</code></li>
<li><code>git svn branch new-versioned-release -m ""Preparing for merge of XXX""</code></li>
<li><code>git checkout -b new-versioned-release-svn remotes/new-versioned-release</code></li>
<li><code>git cherry-pick ...</code> for every <code>1🍒</code>, resolving any conflicts on the way.</li>
</ol>

<p>Because I wanted to be sure I was really going to target the correct branch on the repo, I then ran <code>git svn dcommit --dry-run</code> which did not yield any errors or warnings, but told me…</p>

<pre><code>Committing to svn://username@$repo-host/$repo-name/$path/branches/new-versioned-release ...
</code></pre>

<p>…followed by a couple of <code>diff-tree</code> lines.</p>

<p>So I attempted to omit the <code>--dry-run</code> and half way through the commits ended up with…</p>

<pre><code>Item already exists in filesystem: File already exists: filesystem '/data/subvroot/$repo-name/db', transaction '20856-g3m', path '/$path/branches/new-versioned-release/some-directory' at /usr/libexec/git-core/git-svn line 862
</code></pre>

<p>…and a <strong>bunch</strong> of unstaged changes.</p>

<p>Apart from the obvious — “WTF?!?” and “How do I get out of this mess without losing everything I did?” — I have two questions:</p>

<ol>
<li>Assuming I was back to before <code>git svn dcommit</code>: How do I get my local branch dcommit to its planned destination?</li>
<li>By now it seems obvious, that this wasn’t the right way to achieve what I wanted…but <em>how</em> should I have done it, instead?</li>
</ol>

<p>Everything I found for the error-message, that somehow resembled my situation, so far was <a href=""https://stackoverflow.com/questions/2922059/how-to-recover-from-an-unwanted-rename-using-git-svn-transaction-is-out-of-dat"">this other stack overflow question</a> and the proposed solution of “somehow […] to blow away the <code>.git/svn</code> metadata directory” doesn’t resonate quite <em>that</em> well with me…</p>
","0","370421",""
"29063907","277826","2015-03-15 17:34:11","1","87","<git><git-svn>","Debugging why git (svn) rebase does not detect patch (noop)?","<p>I have a <code>git-svn</code> repository (<a href=""https://stackoverflow.com/questions/29050377/unexpected-merge-error-in-a-git-svn-system"">Unexpected merge error in a git svn system?</a>); it has a remote called <code>origingit</code> referring to another git repo, in addition to <code>git-svn</code> which refers to an SVN repo. </p>

<pre><code>$ git branch -a
* master
  remotes/git-svn
$ git remote show 
origingit
$ tree .git/refs/{heads,remotes}
.git/refs/heads
└── master
.git/refs/remotes
├── git-svn
└── origingit
</code></pre>

<p>Here is the problem: when I do </p>

<pre><code>git pull --rebase origingit master
</code></pre>

<p>... <code>git</code> splits the tree, so that all commits from origingit that have not been part of the original <code>git svn clone</code> lose their <code>git-svn-id</code> (are ""local"", see <a href=""https://stackoverflow.com/questions/12571730/git-svn-id-is-missing-from-some-commits"">git-svn-id is missing from some commits</a>); in this case, the relevant commits look like this (they all have ""null edit"" in the name):</p>

<pre><code>$ git log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order | grep 'null edit'
* cae158d (git-svn) : null edit A06
* 8f79edf : null edit A05
* 0c7373e : null edit A04
* b4bf336 : null edit A03
* e05cfc6 : null edit A02
| * e0c6823 (HEAD, master) : null edit A07
| * 03ed433 : null edit A06
| * de3bd53 : null edit A05
| * 65bf738 : null edit A04
| * 62ab3f6 : null edit A03
* | 964b300 : null edit A01
| * 14f5aba : null edit A02
| * f0ef194 : null edit A01
</code></pre>

<p>Note that <code>master</code> has picked up the latest ""null edit A07"", which came in from origingit. </p>

<p>When I do </p>

<pre><code>git svn rebase
</code></pre>

<p>... all those commits present in the SVN repository should get a <code>git-svn-id</code>, and those not yet comitted to SVN don't - but are listed after (in time, or first in order) the <code>git-svn-id</code> ones in <code>git log</code>; so on the next <code>git svn dcommit</code>, those local would be comitted to SVN. However, in this particular case, I get the <code>log --graph</code> as:</p>

<pre><code>* cae158d (HEAD, git-svn, master) : null edit A06
* 8f79edf : null edit A05
* 0c7373e : null edit A04
* b4bf336 : null edit A03
* e05cfc6 : null edit A02
* 964b300 : null edit A01
</code></pre>

<p>In fact, here <code>git svn rebase</code> outputs to stdout just ""First, rewinding head to replay your work on top of it..."" and exits; otherwise, it usually says ""Applying: ..."" which apparently refers to patches (and ... is the commit message for those local), and in that case, the expected log would be: </p>

<pre><code>* xxxxxxx (HEAD, master) : null edit A07
* cae158d (git-svn) : null edit A06
* 8f79edf : null edit A05
* 0c7373e : null edit A04
* b4bf336 : null edit A03
* e05cfc6 : null edit A02
* 964b300 : null edit A01
</code></pre>

<p>So - even if <code>null edit A07</code> is clearly a valid commit in the origingit repo, and comes after <code>null edit A06</code> one (which is also present in SVN), <code>git svn rebase</code> fails to apply this patch. Why - and how is it even possible?</p>

<p>In any case, from this point, I can do <code>git pull --rebase ...</code> and get to the previous state shown. </p>

<p>Here it would be very nice if there was some debugging facility, which could tell you how <code>git rebase</code> goes through each commit and decides what to do - but unfortunately, <code>--verbose</code> just dumps a list of files changed between the last git-svn-id commit and the latest HEAD, so it doesn't help much. </p>

<p>Adding some printouts to <code>/usr/lib/git-core/git-svn</code>, I could see that <code>git svn rebase</code> ultimately calls <code>git rebase refs/remotes/git-svn</code>; so I tried to add interactive to it:</p>

<pre><code>$ git pull --rebase origingit master
...
$ git rebase --interactive  refs/remotes/git-svn
</code></pre>

<p>... and it shows:</p>

<pre><code>noop

# Rebase cae158d..e0c6823 onto cae158d
#
# Commands: [...]
</code></pre>

<p>So, applying patches doesn't happen during rebase, because it doesn't find that any patches should be made. But how is that possible - noting that  cae158d is the SHA of ""null edit A06"" within <code>git-svn</code> (and is present both on SVN and in origingit), while e0c6823 is the SHA of ""null edit A07"" which came in from origingit - where it stands unequivocally and without a problem as a commit (meaning, there must be an actual change from previous revision) after the ""null edit A06""??</p>

<p>So, how can I inspect why this happens - and ultimately, how can I force git to recognize during <code>git svn rebase</code> that there is indeed a patch there?</p>
","1","277826",""
"11159711","233428","2012-06-22 15:49:33","29","9102","<git><svn><git-svn>","Unable to convert svn repository (without trunk) to git","<p>I'm trying to convert my svn repo to git, but I'm not having much success.
The repository in question does not have anything like a ""trunk"".
The layout is the following:</p>

<pre>
/home/svn/
      |--- /project1/
      |--- /project2/
      |--- /repos/project3/
</pre>

<p>And underneath those project folders are the files. No trunk, no branches, no nothing special. At the time that was all I needed, and now it's biting me in the ass.</p>

<p>I'm following this guide: <a href=""http://john.albin.net/git/convert-subversion-to-git"">http://john.albin.net/git/convert-subversion-to-git</a></p>

<p>When I run this command:</p>

<pre><code>git svn clone svn+ssh://skerit@host.com/home/svn/repos/kiflea --no-metadata -A authors-transform.txt --stdlayout ~/kiflea
</code></pre>

<p>It says it has created an empty git repository... But I don't really want it to be empty.</p>

<p>I also have no idea what the following commands should look like, since my repository has a different layout.</p>

<p>Commands like <code>git symbolic-ref HEAD refs/heads/trunk</code> or <code>git config remote.bare.push 'refs/remotes/*:refs/heads/*'</code></p>
","4","233428",""
"29087850","398861","2015-03-16 22:08:34","2","170","<git><git-svn>","Which layout to use for git-svn in a project with standard layout currently and non standard layout in past","<p>Should I use standard layout param (<code>-s</code>) for git svn when our subversion repository adheres to standard layout currently although it was not the case for most of the history? </p>

<p>I'm trying to import the subversion repository into git with while history.</p>

<p>More details</p>

<p>First few years the main project folders were in the root instead of trunk folder</p>

<pre><code>/ - project folders in root
  '- e.g. apps
  '- components
/branches
/tags
/trunk - empty
</code></pre>

<p>After many years a migration branch was introduced and used for few additional years</p>

<pre><code>/ - project folders in root
  '- e.g. apps
  '- components
/branches
  '- migration - a long living branch used as main project work for some time
      '- e.g. apps
      '- components
  '- few other branches (&lt;3)
/tags
  '- many tags for releases
</code></pre>

<p>For the past one year the current state conforms to standard layout</p>

<pre><code>/ - no files, no folders in root (except trunk, branches, tags)
/branches
  '- oldMigration - migration branch renamed (moved)
      '- e.g. apps
      '- components
  '- few other branches (&lt;5)
  '- oldRoot - folders from the root moved here
/tags
  '- around 150 tags for releases
/trunk
  '- e.g. apps
  '- components
</code></pre>

<p><strong>UPDATE</strong> Just to clarify, going forward we do not plan to work (commit/checkout) with the oldMigration and oldRoot anymore. It is just that we want the history to reflect the situation how it was for the purposes of reading history log and see who changed which files and why. </p>
","0","398861",""
"11225320","351049","2012-06-27 11:38:30","3","316","<git><import><git-svn><svn-trunk>","Can git svn init handle sibling directories of trunk/branches/tags that should be part of base checkout","<p>The macports svn repository looks like this:</p>

<pre><code>  branches/
  contrib/
  distfiles/
  downloads/
  tags/
  trunk/
  users/
</code></pre>

<p>I want to import this using git svn and use the standard features to correctly interpret the branches and tags.</p>

<p>What I would like to see is a single git repo that has directories</p>

<pre><code>  trunk/ 
  contrib/
  distfiles/
  downloads/
  users/
</code></pre>

<p>In other words I want to retain the branches in the branches directory as branches (for trunk I presume) and the tags as git tags.  However, I want to be able to see both the contents of trunk, contrib, distfiles, downloads and users without switching branches.</p>

<p>This is similar to <a href=""https://stackoverflow.com/questions/898568/multiple-svn-projects-into-one-git-repository?lq=1"">this question</a> however it differs in that these extra directories (contrib, distfiles, downloads, users) don't have their own tags or branches.  Seems to me they should be subdirectories of trunk so an alternative solution would be to somehow check out trunk with these extra subdirectories appearing under trunk.  However, it may be impossible for the reason.</p>

<p>If not any suggestion how to easily deal with this so I can easily browse contrib and trunk at the same time without doing anything really difficult?  I could jury rig it with submodules but that seems to be asking for trouble.</p>
","1","351049",""
"47360567","4214892","2017-11-17 23:05:22","-1","85","<git><svn><version-control><bitbucket><git-svn>","local git repository to bitbucket repository","<p>I am on migration process from svn repo to bitbucket repo.</p>

<p>At this moment i have all svn repo as local git repo.  i can show commits and  users logs of all svn repo history on my local git repo. </p>

<p>On next step try to upload local git repo to remote bitbucket repo with command</p>

<pre><code>git push -u origin master
</code></pre>

<p>after some hours, there is a error with users does not match.</p>

<pre><code>  Please ensure that the commit contains the correct Committer EMail
</code></pre>

<p>it's mandatory create all commiters users as users on bitbucket repo before 
push, all users are linked to jira. </p>

<p>This is a huge svn repo there are old commiters, does not work in company now and they are not jira users,  how i should handle this?
Thanks. </p>
","2","4214892","0"
"11735652","471149","2012-07-31 08:02:45","2","518","<git><git-svn><msysgit>","git svn dcommit with different user","<p>I tried to perform <code>git svn dcommit</code> with different svn username using <code>--username</code> option, however it did not help. Commit was authored as default user (user which I used to clone svn repository).</p>

<p>Is it possible to perform <code>git svn dcommit</code> with specific svn user?</p>
","5","471149",""
"11793497","471149","2012-08-03 10:01:10","1","344","<git><git-svn>","git reset branch","<p>Is it possible to reset branch that is not currently checked out?</p>

<p>I want to create a cron script that will perform <code>git svn fetch</code> and then update all local branches tracking svn remote branches with new changes.</p>
","3","471149",""
"11795430","353563","2012-08-03 12:06:34","0","240","<svn><git-svn>","git-svn: branches and tags inside trunk. Can it work?","<p>We use subversion repository with following layout:</p>

<pre><code>myrepo
-project1
-project2
-projectn
-branches
--project1-test
-tags
--
etc. 
</code></pre>

<p>I want to use git on my computer, so I found git-svn tool. I can not extract only one project because some of them are libraries and I need them all. <strong>The problem is that branches and tags folders are at same level as other project (there is no trunk folder).</strong> </p>

<p>Can I still somehow use this with git-svn? I tried to export it with git-svn using following options</p>

<pre><code>git svn clone svn://myrepo -T . -b branches -t tags
</code></pre>

<p>but it fails.</p>
","2","353563",""
"29472922","1011174","2015-04-06 14:07:57","5","1190","<git><svn><git-svn><codeplex>","git svn clone: <file> was not found in commit <sha>","<p>I am trying to <code>git svn clone</code> the SSH.NET repository from Codeplex. My command is:</p>

<pre><code>git svn clone https://sshnet.svn.codeplex.com/svn/
</code></pre>

<p>But it always stops with an error message. This is my first time got an error during <code>git svn clone</code>, I don't know how this SVN repository is special.</p>

<p>I have tried to google for an answer, but nothing I found was working for me.
I have read:</p>

<ul>
<li><a href=""https://stackoverflow.com/q/4330202/1011174"">git svn - &lt;file&gt; was not found in commit &lt;hash&gt;</a></li>
<li><a href=""https://stackoverflow.com/q/4073956/1011174"">How do I resolve a git-svn index mismatch?</a></li>
<li><a href=""http://orville.thebennettproject.com/articles/git-troubleshooting/"" rel=""nofollow noreferrer"">http://orville.thebennettproject.com/articles/git-troubleshooting/</a></li>
</ul>

<p>Here's the error message:</p>

<pre><code>r9445 = e8eb2162b4e5cc6b5b5129f0739c4f60cc42a58a (refs/remotes/git-svn)
        M       Renci.SshClient/Renci.SshNet/Sftp/SftpFileStream.cs
        M       Renci.SshClient/Renci.SshNet/Sftp/SftpFile.cs
        M       Renci.SshClient/Renci.SshNet/SshCommand.cs
        M       Renci.SshClient/Renci.SshNet/Shell.cs
        M       Renci.SshClient/Renci.SshNet/SftpClient.cs
        M       Renci.SshClient/Renci.SshNet/PrivateKeyFile.cs
        M       Renci.SshClient/Renci.SshNet/ConnectionInfo.cs
r9486 = 91aea22d35ad41f70fa583d262438cf00a0a117d (refs/remotes/git-svn)
        M       Renci.SshClient/Renci.SshNet/Security/Cryptography/Ciphers/RsaCi
pher.cs
        A       Renci.SshClient/Renci.SshNet/Security/Cryptography/RsaKey.cs
Renci.SshClient/Renci.SshNet/Security/Cryptography/RsaDigitalSignature.cs was no
t found in commit 91aea22d35ad41f70fa583d262438cf00a0a117d (r9486)
</code></pre>
","2","1011174","0"
"11851423","656188","2012-08-07 17:53:41","7","4553","<version-control><git-svn>","How do I undo a git svn dcommit?","<p>I made a mistake in a <code>git svn dcommit</code> and would like to undo the commit. (I was actually trying to push to a branch, but pushed to trunk instead.) How can I do this with git-svn?</p>
","3","656188","0"
"29519684","4764903","2015-04-08 16:02:17","4","1135","<git><fetch><git-svn>","When running git svn fetch --all, what does the --all option do?","<p>I've been researching how to use Git with an SVN repo, and there are many references that use the following command:</p>

<pre><code>git svn fetch --all
</code></pre>

<p>However, I haven't found any reference that definitely tells me what <code>--all</code> does differently to <code>git svn fetch</code>, and I haven't noticed any difference when running <code>git svn fetch</code> with or without the <code>--all</code> option.  Is there any difference?</p>

<p>I am using Git 1.9.5.</p>
","0","4764903",""
"11884394","78928","2012-08-09 13:19:38","9","3814","<git><newline><git-svn><eol><core.autocrlf>","How do I avoid git-svn and svn CRLF problems such as this one?","<p>I am using git svn and today I ran into some trouble.</p>

<p>I did an <code>git svn clone</code> and worked on my project for a while. After a few days, I've pushed my work to the svn remote (<code>git svn dcommit</code>). Then I've tried to checkout the project with TortoiseSVN and see if everything is right. Unfortunately, everything was converted to Unix line endings, and VC6 failed to open the project.</p>

<p>So, my git working copy was CRLF, but my svn working copy was LF. I'm assuming git converted it either during <code>git commit</code> or <code>git svn dcommit</code>.</p>

<p>Am I right to assume that I can avoid all this trouble if I set <code>core.autocrlf = false</code> for my git working copy? Will this force git to leave newlines alone? Is there anything else that needs to be done to make git svn easy to use without causing problems for my coworkers?</p>

<p>(It may also be interesting to mention that I have used git svn on the same machine before, without touching the settings, and this was the first time something like this happened.)</p>
","0","78928",""
"11886220","1270259","2012-08-09 14:56:55","0","302","<git><git-svn>","git svn clone confusion","<p>I have a project in <em>svn</em> that is set up as:</p>

<pre><code>project
 branches/
 tags/
 trunk/
</code></pre>

<p>when ever I do a</p>

<pre><code>git svn clone -s -r ##:HEAD path/to/svn
</code></pre>

<p>All I get is a series of file and folders that I believe comes from <code>trunk</code> and when I do a</p>

<pre><code>git branch
</code></pre>

<p>all I see is <code>master</code> when I should see <code>master</code> and <code>clean</code> (<code>clean</code> is under <code>branches/</code>)</p>

<p>So whats going on?</p>

<p>If I do:</p>

<pre><code>git svn clone -r ##:HEAD path/to/svn
</code></pre>

<p>then I get my layout of:</p>

<pre><code>project
 branches/
 tags/
 trunk/
</code></pre>

<p>but <em>git</em> doesn't recognise the branches under <code>branches</code>. Also <code>trunk</code> is also a <code>branches</code>....</p>

<p>Any ideas?</p>
","5","1270259",""
"11939942","1411247","2012-08-13 18:14:46","18","14786","<git><git-svn><svn-externals>","A true, robust, git svn externals solution?","<p>When you check out a git repository that contains svn externals, it will simply ignore them. What people have done is create many scripts, many of them mentioned in this question <a href=""https://stackoverflow.com/questions/350651/how-do-i-keep-an-svnexternal-up-to-date-using-git-svn"">How do I keep an svn:external up to date using git-svn?</a>. The problem is that while numerous scripts are floating on the internet, I have yet to find one that was actually robust. By robust, I mean specifically:</p>

<ol>
<li>It can handle svn externals pegged to a particular revision</li>
<li>It can handle svn externals that point to a file instead of a directory</li>
</ol>

<p>Because these are 2 issues with my repository that seem to bring most scripts down. I have no interest in using smartgit. </p>

<p>Is there such a script? Does anyone have a script that is ""almost there"" that could be adapted to these 2 things rather quickly?</p>
","3","1411247","0"
"11955730","987846","2012-08-14 15:28:32","3","72","<git><svn><git-svn>","git-svn: How to know current SVN revision of a git-svn working copy?","<p>I have a git-svn working copy and git log gives me no direct info about which SVN revision I'm on. I understand that once I rebase I should have all upstream logs converted into git log, but that still doesn't seem to give a REVISION NUMBER to me and I'd have to do text mining to find out.</p>

<p>Is there a simple command that I'm missing?</p>
","0","987846",""
"11956986","436853","2012-08-14 16:44:00","5","6202","<git-svn>","git-svn: how to change the svn username on dcommit?","<p>I cloned a SVN repository into a git repository using <code>git svn clone</code>. At that point in time, I did not have a username at that site and hence didn't use the <code>--username</code> option of <code>clone</code>. As I can now commit to the SVN repository with my new username, I would like to add that username. Without it, <code>dcommit</code> simply fails:</p>

<pre><code>% LANG=C git svn dcommit 
Committing to &lt;THE URL&gt; ...
RA layer request failed: Server sent unexpected return value (405 Method Not Allowed) in response to MKACTIVITY request for '/svn/!svn/act/0ceca4c5-f7b4-4432-94be-0485559a6040' at /usr/lib/git-core/git-svn line 945.
</code></pre>

<p>Is there a way to tell git about a new username? The <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-svn.html"" rel=""noreferrer"">git-svn manual</a> doesn't seem to help: adding a username is only allowed on <code>init</code> and <code>branch</code>. I don't know how git works with SVN internally, but I guess there should be a way to add a username afterwards.</p>

<p>Note that I am using SVN over http.</p>
","0","436853","0"
"11957167","1280289","2012-08-14 16:54:45","1","440","<git><git-svn><magento>","Basic git workflow understanding","<p>I have some basic git questions, which i do not understand yet I hope someone can help me. Lets say I'm working on a Magento project, I run it local but i want to bring it online. So i push my shop to my server using git. Everything works fine until Magento provides an update. So here is my question: </p>

<p>I make any changes in my local directory and git add + git commit them, but when i update my Magento Shop through Magento Connect from 1.7 to 1.7.1 I will have a different setup on my server then I have on my local computer, right?</p>

<p>So what do I have to do, do make them equal? Do I have to make a checkout from the version runed on my server and replace it with my local magento?</p>
","0","1280289","0"
"11979634","336920","2012-08-16 01:46:29","4","1402","<git><git-svn><gitignore>","How do I keep my local version of files, without using .gitignore?","<p>Don't want to change .gitignore because other people want the files in the repo. But I have my own copy that I want to use.</p>

<p>I edited <code>.git/info/exclude</code> and added the following:</p>

<pre><code>/Gemfile
/Gemfile.lock
/config/database.yml
/spec/spec_helper.rb
</code></pre>

<p>This doesn't seem to do anything. <code>git status</code> still shows:</p>

<pre><code># Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   Gemfile
#       modified:   Gemfile.lock
#       modified:   config/database.yml
#       modified:   spec/spec_helper.rb
</code></pre>

<p>What is the best way to keep my local versions of files without using .gitignore?</p>
","1","336920","0"
"11998782","1542339","2012-08-17 01:44:36","1","618","<git><svn><version-control><centos><git-svn>","what i can do after git svn clone fails?","<p>my issue is not the same as this <a href=""https://stackoverflow.com/questions/11398415/git-svn-clone-fails-unexpectedly"">git-svn clone fails unexpectedly</a>, since it can be solved by remove --no-metadata option, i have no such option in my command, my commad is simply as:</p>

<pre><code>git svn clone -s svn://xxx.xxx
</code></pre>

<p>times amd times again, i failed to clone code from svn repo:(
the error message is as follows:</p>

<pre><code>r506 = 82a01de65882f5bd800aca5a6f3556ba940ea3f5 (refs/remotes/trunk)
Found possible branch point: svn://svn.nginx.org/nginx/trunk =&gt; svn://svn.nginx.org/nginx/tags/release-0.1.27, 506
Found branch parent: (refs/remotes/tags/release-0.1.27) 82a01de65882f5bd800aca5a6f3556ba940ea3f5
Following parent with do_switch
Use of uninitialized value in concatenation (.) or string at /usr/lib/perl5/vendor_perl/5.8.8/i386-linux-thread-multi/SVN/Core.pm line 584.
Network connection closed unexpectedly:  at /usr/libexec/git-core/git-svn line 3136


real    8m13.819s
user    0m24.079s
sys     0m44.250s
[root@home git-test]# echo $?
1
</code></pre>

<p>what i can do after i fails to clone code from svn repo:(
start from the beginning? and fail again?
why this happens, is this the problem of git, svn, or git-svn?</p>
","1","1542339","0"
"11999914","1542339","2012-08-17 04:45:53","2","373","<version-control><nginx><centos><git-svn>","git svn interrupted, then i lost all the tags, how to fix it?","<p>i am about to clone code from svn repo (on centos) using git svn clone -s svn://xxx, then it is interrupted for strange problems, the error message is as follows:</p>

<pre><code>Following parent with do_switch
Successfully followed parent
Use of uninitialized value in concatenation (.) or string at /usr/lib/perl5/vendor_perl/5.8.8/i386-linux-thread-multi/SVN/Core.pm line 584.
Network connection closed unexpectedly:  at /usr/libexec/git-core/git-svn line 2693
</code></pre>

<p>then i continue this clone process using</p>

<pre><code>    time git svn fetch -r HEAD
</code></pre>

<p>all the things seems goes well, and succeed to clone that svn repo at last:</p>

<pre><code>W: -empty_dir: trunk/src/os/win32/ngx_gui.c
W: -empty_dir: trunk/src/os/win32/ngx_gui.h
W: -empty_dir: trunk/src/os/win32/ngx_gui_resources.h
W: -empty_dir: trunk/src/os/win32/ngx_shared.h
W: -empty_dir: trunk/src/os/win32/ngx_types.h
r4817 = 7b58fc00b5b8ebb0544053ecf63e53b28935f15b (refs/remotes/trunk)
Auto packing the repository for optimum performance. You may also
run ""git gc"" manually. See ""git help gc"" for more information.
Counting objects: 12449, done.
Compressing objects: 100% (12177/12177), done.
Writing objects: 100% (12449/12449), done.
Total 12449 (delta 9475), reused 0 (delta 0)
Checked out HEAD:
  svn://svn.nginx.org/nginx/trunk r4817

real    0m9.630s
user    0m6.015s
sys     0m1.870s
</code></pre>

<p>the strange issue is that there is no tags in my local git repo which is cloned from svn repo:</p>

<pre><code>[root@home nginx]# git branch
* master
[root@home nginx]# git tag   // no tags at all:(

[root@home nginx]# svn ls svn://svn.nginx.org/nginx/branches | wc -l
7
[root@home nginx]# svn ls svn://svn.nginx.org/nginx/tags | wc -l
388
</code></pre>

<p>in fact there are 388 tags in the svn repo, so how to fix my local .git repo? </p>

<p>should i have to restart to git clone from the remote svn server?  </p>

<p>i have tried many times, with the same problem:(</p>
","0","1542339","0"
"12011312","515187","2012-08-17 18:33:05","1","584","<ubuntu><git-svn>","git-svn revert locally committed delete","<p>git-svn is currently driving me mad.</p>

<p>I ran:</p>

<pre><code>git rm &lt;file&gt;
git commit
</code></pre>

<p>The file is still in the svn repo, but I have no idea how to check it back out so that it is in revision control.  I want to do the equivalent in svn to:</p>

<pre><code>rm &lt;file&gt;
svn update
</code></pre>

<p>Thank you</p>
","0","515187",""
"12013788","633318","2012-08-17 22:05:28","55","18630","<git><git-svn>","How to remove subversion remote in git?","<p>I have a git repository that was originally created using git-svn. Now I have a git server that I push to and the svn repository has been lost. Can I remove the svn remote? How?</p>
","0","633318","0"
"29671606","4795356","2015-04-16 10:11:58","3","1127","<git><git-svn>","Keeping all history when moving from svn to git","<p>Can all history be kept when moving from svn to git?
I find that history prior to an <strong>svn copy</strong> is lost.</p>

<p>I have the following svn repository:</p>

<ul>
<li>project1/trunk/A</li>
<li>project2/trunk/dir/B</li>
<li>project3/trunk
<ul>
<li>A  <em>- copied from project1</em></li>
<li>dir/B  <em>- copied from project2</em></li>
</ul></li>
</ul>

<p>If I git svn clone project3, there is no history for A and B from project1 and project2.</p>

<p>Here's a demonstration of the problem:</p>

<pre><code>&gt; svn co https://localhost/svn/test
&gt; cd test
&gt; mkdir -p project1/trunk project1/branches project1/tags
&gt; mkdir -p project2/trunk/dir project2/branches project2/tags
&gt; mkdir -p project3/trunk project3/branches project3/tags
&gt; touch project1/trunk/A project2/trunk/dir/B
&gt; svn add project1 project2 project3
&gt; svn ci -m 'initial commit'
&gt; svn copy project1/trunk/A project3/trunk/
&gt; svn copy project2/trunk/dir project3/trunk/
&gt; svn ci -m 'project restructure'
</code></pre>

<p>Running <strong>svn log</strong> for each shows both revisions: </p>

<pre><code>&gt; svn log project3/trunk/A 
 ------------------------------------------------------------------------
 r2 | tanderson | 2015-04-16 19:37:33 +1000 (Thu, 16 Apr 2015) | 1 line

 project restructure
 ------------------------------------------------------------------------
 r1 | tanderson | 2015-04-16 19:37:32 +1000 (Thu, 16 Apr 2015) | 1 line

 initial commit
 ------------------------------------------------------------------------
&gt; svn log project3/trunk/dir/B 
 ------------------------------------------------------------------------
 r2 | tanderson | 2015-04-16 19:37:33 +1000 (Thu, 16 Apr 2015) | 1 line

 project restructure
 ------------------------------------------------------------------------
 r1 | tanderson | 2015-04-16 19:37:32 +1000 (Thu, 16 Apr 2015) | 1 line

 initial commit
 ------------------------------------------------------------------------
</code></pre>

<p>Now for the clone:</p>

<pre><code>&gt; git svn clone --stdlayout --follow-parent https://localhost/svn/test/project3 gittest
  Using higher level of URL: https://localhost/svn/test/project3 =&gt; https://localhost/svn/test
  r1 = 1bc0768d6d823b49305978d227df6834d2787fdc (refs/remotes/origin/trunk)
       A       A
       A       dir/B
  r2 = c71c15ec116a7ada952d8457d50902c970616ef5 (refs/remotes/origin/trunk)
  Checked out HEAD:
      https://localhost/svn/test/project3/trunk r2
</code></pre>

<p>I'm hoping to see both revisions of A and B, but in both cases only the final revision is shown. E.g.</p>

<pre><code>&gt; cd gittest
&gt; git log --follow A
   commit c71c15ec116a7ada952d8457d50902c970616ef5
   Author: tanderson &lt;tanderson@897fde24-c897-6841-ad7f-93f2e7295302&gt;
   Date:   Thu Apr 16 09:37:33 2015 +0000

    project restructure

    git-svn-id: https://localhost/svn/test/project3/trunk@2 897fde24-c897-6841-ad7f-93f2e7295302
</code></pre>

<p>I've tried the following tools:</p>

<ul>
<li><a href=""https://github.com/nirvdrum/svn2git"" rel=""nofollow"">https://github.com/nirvdrum/svn2git</a> </li>
<li><a href=""https://github.com/fragglet/agito"" rel=""nofollow"">https://github.com/fragglet/agito</a></li>
<li><a href=""http://www.subgit.com/"" rel=""nofollow"">http://www.subgit.com/</a></li>
<li><a href=""http://www.catb.org/esr/reposurgeon/"" rel=""nofollow"">http://www.catb.org/esr/reposurgeon/</a></li>
</ul>
","0","4795356",""
"12039205","471149","2012-08-20 14:06:35","2","315","<git><git-svn>","concurrent access to git repository","<p>There is a git repository which is updated from svn (<code>git svn fetch</code>) in fixed periods of time (1 hour for example). After fetch is finished every branch from <code>refs/heads</code> is updated with its corresponding branch from <code>refs/remotes</code>. Svn branches in <code>refs/heads</code> are only updated during this update process and nobody else has write access to them.</p>

<p>I wonder if it is possible to corrupt repository accessing it during svn update process? For example cloning whole repository, fetching from it latest changes or pushing (not to svn branches).</p>
","2","471149",""
"12064290","1542339","2012-08-21 23:05:56","10","2272","<git><svn><git-svn>","why git-svn should search aggressively for old history?","<p>Something strange happened when I ran git svn clone -s, though the following information tells  us to not be alarmed, I wonder why that is kind of svn error? </p>

<p>Why this path does not exist, is it deleted by others?</p>

<p>If yes, why git svn should search  aggressively for old history?</p>

<pre><code>Initializing parent: refs/remotes/tags/sequentialInformationalBottleneckClusterer-1.0.1@8400
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: File not found: revision 101, path '/trunk/packages/internal/sequentialInformationalBottleneckClusterer'
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
Checked through r1501
</code></pre>
","1","1542339","0"
"12065245","1542339","2012-08-22 01:30:36","3","969","<git><svn><git-svn>","what's wrong with my git-svn command? cannot fork git.pm, why?","<p>I was cloning a opensource project using git-svn, but failed.</p>

<p>this issue is different from <a href=""https://superuser.com/questions/266338/git-svn-fails-with-fatal-error"">https://superuser.com/questions/266338/git-svn-fails-with-fatal-error</a> since i am not using cygwin this time:(</p>

<p>The error message is different as before, it just cannot fork:(</p>

<pre><code>r6686 = f7adf2ab3ed10abac505b6ee5c88f983f3080e28 (refs/remotes/tags/NaiveBayes-1.0.1@8503)
Can't fork at /usr/lib/perl5/vendor_perl/5.8.8/Git.pm line 1262.


real    550m4.292s
user    17m12.441s
sys     52m29.003s
</code></pre>

<p>git svn failed after 10 hours hardworking, what i can do after that?</p>
","4","1542339","0"
"12065852","1542339","2012-08-22 03:08:26","4","2756","<git><svn><git-svn>","RA layer request failed? what git-svn did to the repo?","<p>not the same as this <a href=""https://stackoverflow.com/questions/750120/ra-layer-request-failed-while-git-svn-fetch"">RA layer request failed while git-svn fetch</a>, no network issues</p>

<p>a bit similar with this <a href=""https://stackoverflow.com/questions/8451480/ra-layer-request-failed-report-request-failed-during-git-svn"">&quot;RA layer request failed: REPORT request failed&quot; during git-svn</a>, but i am not using git-svn in cygwin</p>

<p>the error message is as follows:</p>

<pre><code>RA layer request failed: Server sent unexpected return value (403 Forbidden) in response to REPORT request for '/repos/asf/!svn/vcc/default' at /usr/libexec/git-core/git-svn line 5669
</code></pre>

<p>it's 403 error:(</p>

<p>what happened?</p>

<p>There is no directory named !svn in fact (by clicking <a href=""http://svn.apache.org/repos/asf/!svn"" rel=""nofollow noreferrer"">http://svn.apache.org/repos/asf/!svn</a> you may know this directory does not exists, so how did git-svn generate such a absurd directory name), </p>

<p>so why git-svn want to find this directory? </p>

<p>The behavior of git-svn is confusing:( what it want to do to svn repo?</p>

<p>and why there is 403 error?</p>

<p>how to avoid this?</p>
","0","1542339","0"
"30193290","2518618","2015-05-12 14:04:34","1","96","<git-svn><tortoisegit><git-clone>","Using ""git svn"" with two working trees","<p>I am starting to use git as a Subversion client at work. For now I've been using  TortoiseGit, more or less how I used to use TortoiseSvn, but with <em>local</em> commits, branches, merges, rebases, cherry picking.</p>

<p>It is a big project and switching a branch and recompiling everything takes too long. This is why I want to have two (or more) working trees corresponding to two branches of the Subversion project.</p>

<p>I wonder if it is possible to share the .git folder for the two working trees (its 5GB), or I need to clone the repository or maybe checkout it again from subversion (it took several hours).</p>

<p>From the <a href=""https://git-scm.com/book/en/v2/Git-and-Other-Systems-Git-as-a-Client"" rel=""nofollow"" title=""git book"">git book</a> it seems that interaction between two git repositories will not work well if they interact with svn as well (I don't know if this applies to my case):</p>

<blockquote>
  <p>Don’t rewrite your history and try to push again, and don’t push to a parallel Git repository to collaborate with fellow Git developers at the same time. Subversion can have only a single linear history, and confusing it is very easy. If you’re working with a team, and some are using SVN and others are using Git, make sure everyone is using the SVN server to collaborate – doing so will make your life easier.</p>
</blockquote>

<p>I would like to have a single repository with all svn branches and all my local branches and I would like have several working trees to avoid the need to rebuild everything after switching branches. Is that possible?</p>

<p>I don't know much about ""bare"" or ""shared"" repos, remotes and clones, a basic example to set this up would be very helpful.</p>
","3","2518618",""
"12568248","1694893","2012-09-24 15:34:46","2","37","<git><git-svn>","git-svn from the point of view of a git native user","<p>Are there any tutorials for git-svn <em>from the native git user's perspective</em>? My new workplace uses svn; I know git, and would like to continue using the branching and rebase workflow I am comfortable with, while eventually committing to svn repos. All of the tutorials for git-svn I can find are from the point of view of people switching <em>to</em> git from svn, which is not exactly helpful.</p>
","0","1694893",""
"12571730","46768","2012-09-24 19:39:01","3","1363","<git><heroku><git-svn>","git-svn-id is missing from some commits","<p>I have an old SVN repository that I checked out using <code>git-svn</code> in order to work on it and push to Heroku. I was doing a pretty standard <code>git push heroku master</code>, <code>git svn rebase</code>, <code>git svn dcommit</code> dance and things were fine.</p>

<p>However, recently I've been doing a fair bit of git work and hadn't done a <code>git svn rebase</code> in a while. Now when I try to do a rebase it fails because of merge conflicts, despite me being the only person committing to the repo and only working on master.</p>

<p>Figuring that it might be the working copy that's the problem I did a new <code>git svn clone</code> and then a <code>git remote add heroku</code> and <code>git pull heroku master</code>. The pull does a fast-forward merge with no problems, but <code>git svn rebase</code> still fails.</p>

<p>I did a simple <code>git log</code> and I see that I have some old commits missing <code>git-svn-id</code>s:</p>

<pre><code>commit def8bab861314c67d4e8227e03775d19045d21d1
Author: peterr
Date:   Fri Sep 21 16:17:33 2012 +0000

    PHP Cedar support.

    git-svn-id: http://vcp.unfuddle.com/svn/vcp_bbsit@24 b6b24ac3-8b7a-4c11-a811-49c5d0334e85

commit f51bd78fb07dde6ec1dc4e0ba51a48f2b6bd1bd6
Author: pr1001
Date:   Mon Aug 20 19:39:42 2012 +0200

    Specify port correctly

commit 153bb2929080898dcab46142120def0f4964dfab

...

commit 5a416fa3af9f64aa353d5171bedfaa563115ff62
Author: pr1001
Date:   Mon Aug 20 17:22:58 2012 +0200

    PHP Cedar support.

commit e0b35588d03082a3a4ab49a7b590f206346046c0
Author: j
Date:   Fri Aug 3 08:13:33 2012 +0000

    change email

    git-svn-id: http://vcp.unfuddle.com/svn/vcp_bbsit@23 b6b24ac3-8b7a-4c11-a811-49c5d0334e85
</code></pre>

<p>From <a href=""https://stackoverflow.com/a/9889025/46768"">an SO answer</a> I gather that I might be able to rewrite the commit messages to add the missing information, but I wonder whether that wouldn't be even worse.</p>

<p>Looking at the messages, it looks like I have some duplicate commits, such as the 'PHP Cedar support' one. I'm really perplexed why I have these duplicates, though I suspect that they may be relayed to the failed <code>git push heroku master</code> I had the other day in which I was told the repositories were out of sync. <code>git pull heroku master</code> seemed to bring in absolutely no changes and fixed the issue, but perhaps it brought in the duplicate commits.</p>

<p>So, given all this my question is simply, how might I proceed? I have a working app on Heroku and an older working code base in the SVN repo, but I don't see any easy way how to cleanly get the newer commits into SVN. Should I cherry-pick them? Would I then need to nuke the Heroku app in order to not have the duplicates come back?</p>
","0","46768","0"
"12578702","71208","2012-09-25 08:07:51","1","276","<git><git-svn>","git svn fetch on revisions does not align the history","<p>I'm trying to migrate a very large svn repository and initially I just started a fetch from revision 13989.</p>

<p>This gave me the chance of having an uptodate git mirror which was awesome - but it took weeks to create.</p>

<p>Now I would like to get the full history in there (i.e. r1-13989) and tried doing:</p>

<p>svn git fetch -r 0:13989</p>

<p>(as described in <a href=""https://stackoverflow.com/questions/1554222/git-svn-clone-how-to-defer-fetch-of-revision-history"">Git svn clone: How to defer fetch of revision history</a>)</p>

<p>This seemed to work (it was fetching for 3 days) but the files that before had their history abruptly end at 13989 before still has this abrupt end.</p>

<p>The new fetched revisions are not aligned into the history.</p>

<p>Any way to fix this other than having to start doing a full complete giv svn init/fetch again ?</p>
","0","71208",""
"12588564","1698135","2012-09-25 18:00:49","8","970","<git-svn>","How do I change ignore-paths on an existing git-svn repo?","<p>I have an already existing git-svn repo with an ignore paths in my .config file that looks like this:</p>

<pre><code>ignore-paths = ^(?!(Path1/Proj1|Path1/Proj2|Path2/Proj3))
</code></pre>

<p>This works well.</p>

<p>Someone added a new project in svn that I now need in my git repo.</p>

<p>If I change ignore-paths to what's below and issue a fetch or a rebase, I never see Path2/Proj4</p>

<pre><code> ignore-paths = ^(?!(Path1/Proj1|Path1/Proj2|Path2/Proj3|Path2/Proj4))
</code></pre>

<p>In the past, I've always given up and blasted away my git repo and recreated it.  Is there a better way?</p>
","2","1698135","0"
"12617547","356895","2012-09-27 08:52:45","19","5920","<svn><git-svn><svnignore><svn-propset>","How to configure svn ignore settings with git svn?","<p>I know I can configure folders and files for being ignored by subversion using the following commands:</p>

<pre><code>svn propset svn:ignore build . // Ignores the build folder.
svn propedit svn:ignore . // Opens an editor.
</code></pre>

<p>Though, I use <code>git svn</code> to checkout a repository stored on a subversion server. I could not find a command to do the configuration this way. The following list shows all commands that are suggested by <code>zsh</code> completion for <code>git svn</code>:</p>

<pre><code>$ git svn
blame           -- show what revision and author last modified each line of a file:
branch          -- create a branch in the SVN repository
clone           -- same as init, followed by fetch
commit-diff     -- commit diff of two tree-ishs
create-ignore   -- recursively finds the svn:ignore property and creates .gitignore files
dcommit         -- commit diffs from given head onto SVN repository
fetch           -- fetch revisions from the SVN remote
find-rev        -- output git commit corresponding to the given SVN revision's hash
info            -- show information about a file or directory
init            -- initialize an empty git repository with additional svn data
log             -- output SVN log-messages
propget         -- get a given SVN property for a file
proplist        -- list the SVN properties stored for a file or directory
rebase          -- fetch revs from SVN parent of HEAD and rebase current work on it
set-tree        -- commit given commit or tree to SVN repository
show-externals  -- show the subversion externals
show-ignore     -- output corresponding toplevel .gitignore file of svn:ignore
tag             -- create a tag in the SVN repository
</code></pre>

<p><strong>Question:</strong></p>

<ul>
<li>Do you know if there is any way to edit the subversion ignore configuration via <code>git svn</code>?</li>
</ul>
","0","356895","0"
"35345227","755798","2016-02-11 16:48:19","0","40","<git><svn><git-svn>","How to add a SVN server as a second origin of a git repository","<p>I have a local git repository with an already set up git origin.</p>

<p>Now the client is asking to have the project stored in their internal svn repository.</p>

<p>I'd like to keep the current git infrastructure for the development and to push to the svn server only some branches (eg. release branch).</p>

<p>Is git-svn bridge the correct solution in this case?</p>
","0","755798",""
"2757188","6851","2010-05-03 09:40:25","2","582","<svn><git><branch><git-svn>","svn (with git frontend) branch merging with different directory structure","<p>I have a subversion repository with a directory structure:</p>

<pre><code>frontend
backend
  + a
  + b
</code></pre>

<p>In a other branch, someone had put the sub-folders a and b in the root directory and delete the other stuff (frontend, backend).</p>

<pre><code>a
b
</code></pre>

<p>Now i have to merge this branch back into the trunk (backend-folder). How can I do that to dont lose the history from the branches? I use git to access and work with the subversion repository.</p>
","1","6851",""
"2765023","37935","2010-05-04 11:56:19","12","1676","<svn><git><git-svn>","Import a svn repo to git from a given point in time","<p>What can I do to import a SVN repository into git but only from a (known) revision number and onwards?</p>

<p>I've tried with:</p>

<pre><code>git svn clone --authors-file=/home/ubuntu/svn-git-users.lst --revision=4151 -T trunk -b branch -t tags file://`pwd`/../svn-server-sync/MyRepo MyRepo 
</code></pre>

<p>But it fails with: </p>

<blockquote>
  <p>r4151 = e80c7c5923700d6c7594c91f172779af63a8511b (refs/remotes/snapshots)
  fatal: refs/remotes/trunk: not a valid SHA1</p>
</blockquote>

<p>Can someone help me with this?</p>

<p>Thanks in advance.</p>
","2","37935","0"
"2771033","77339","2010-05-05 06:28:19","16","2515","<git><git-svn>","git-svn - #object# doesn't exist in the repository at /opt/local/libexec/git-core/git-svn line 4706","<p>on</p>

<pre><code>git svn dcommit
</code></pre>

<p>it starts commiting and then I get this</p>

<pre><code>A   spec/controllers/authenticated_system_spec.rb
A   spec/controllers/sessions_controller_spec.rb
A   spec/controllers/users_controller_spec.rb
A   spec/fixtures/users.yml
A   spec/helpers/users_helper_spec.rb
A   spec/models/user_spec.rb
A   vendor/plugins/haml/init.rb
A   vendor/plugins/restful_authentication
7235d9150e8beb80a819923a4c871ef4069c6759 doesn't exist in the repository at /opt/local/libexec/git-core/git-svn line 4706
Failed to read object 7235d9150e8beb80a819923a4c871ef4069c6759 at /opt/local/libexec/git-core/git-svn line 570
</code></pre>

<p>any ideas how one goes about fixing this one?</p>

<p>tried inspecting with <code>git fsck --full</code> but git repo and all git commands seem to work fine just can't dcommit.</p>
","0","77339","0"
"14083395","24949","2012-12-29 16:00:49","2","842","<git><svn><git-svn>","svn to git - Import only trunk with full history","<p>I am currently migrating my WordPress Plugins from SVN to git using <code>git-svn</code> by issuing the following commands</p>

<pre><code>git svn clone -r12345 -A AUTHORS_FILE --no-minimize-url --username=SVN_USERNAME http://plugins.svn.wordpress.org/posts-by-tag
git svn fetch
</code></pre>

<p>It is working, but the problem is that it is very slow because the repo is huge and I have lot of tags. <code>git-svn</code> tries to retrieve all the tags and it is taking very long (around 3-4 hours for 15-20 tags)</p>

<p>I don't need the tags and I am not going to commit back to svn using <code>git-svn</code>. So I am trying to see if it would possible to retrieve only the trunk (leaving the tags and branches) but with full history?</p>
","0","24949","0"
"3018983","90551","2010-06-10 22:24:41","1","315","<svn><git><git-svn>","Using git-svn with slightly strange svn layout","<p>I'm doing an internship and they are using SVN (although there has been some discussion of moving to hg or git but that's not in the immediate future). I like git so I would like to use git-svn to interact with the svn repository and be able to do local commits and branches and stuff like that (rebasing before committing to svn of course). However, there is one slight wrinkle, the svn repository layout is a little weird. It basically looks like this</p>

<pre><code>/FOO
  +-branches
  +-tags
  +-trunk
    +-FOO
    +-myproject
</code></pre>

<p>Basically, my project has been stuck into a subdirectory of trunk, and there is another project that is also a subdirectory of the trunk. If I use git-svn and only clone the directory for my project instead of the root, will it get confused or cause any problems? I just wonder because the commit numbers are incremented for the entire repository and not just my project, so would commits be off or anything like that? I probably wouldn't push any branches or tags to SVN because I'd prefer to just do those locally in git and I don't know how git-svn deals with branches and tags anyway, and no one else uses them so I find little point in doing so. Thanks for the help!</p>
","0","90551","0"
"3031602","141639","2010-06-13 08:39:20","1","290","<svn><git><migration><git-svn>","How to import a svn repository underneath a git repository?","<p>I have a svn repository that I migrated to git using the tool svn2git. Now I would like to push this git layout to a remote repository underneath an existing directory. But, I would like to keep the svn history (tags and branches).
  For instance:</p>

<p>Git remote repository layout:</p>

<p>git-repository/dirA<br>
  git-repository/dirB<br>
  git-repository/dirC/svn-repository-migrated-to-git</p>

<p>Makes sense? Is it possible??</p>

<p>Thanks</p>
","0","141639","0"
"48611971","1357553","2018-02-04 19:09:57","2","1126","<git><gitlab><git-svn><gitlab-ci>","Mirror gitlab repo to SVN","<p>I have gitlab repository that I want to mirror it to a (read-only) SVN using gitlab continuous integration. Every time I create a tag, I want gitlab CI to run a script to commit the master branch to SVN.
I am pretty familiar um gitlab CI, but so much with git-svn tool.</p>

<p>Is there a easy way to achieve that?</p>
","6","1357553",""
"3043968","346851","2010-06-15 09:29:00","1","406","<git><git-svn>","Could git do not store history of specific folders when working with git-svn?","<p>In short: Is there a way to disable storing full history for specific folders in git-svn repo?</p>

<p>We have pretty large SVN repo with big checkout. I would like to migrate it to Git for my local development, because Git speeds up <code>update</code> and <code>status</code> commands orders of magnitude.</p>

<p>When I simply do <code>git svn clone</code> it creates very big repo. Big enough to be bigger then my whole HDD. The problem lies in binary directories for which history is too large.<br>
Latest binaries are required for proper local build, but history is not required at all for my development process. I will never change them myself.<br>
I would like to store only latest versions for specific folders, or may be a history, but for no more than a week.</p>

<p>I could only found <code>filter</code> for <code>git svn fetch</code>, which excludes specific folders at all. This is not exactly what I need.</p>

<p>It's OK with me to have Cron task which deletes history from specific folders, but I do not know how to make one. Also Cron does not solve problem of first <code>git svn clone</code>.</p>

<p>P.S. SVN repository structure could not be changed by any means.</p>
","0","346851",""
"48647520","1032235","2018-02-06 16:24:45","1","53","<git-svn>","How to properly handle a discontinuity in git-svn","<p>I am in a situation where (say) commit 666 is dodgy, i.e</p>

<pre><code>git svn clone [REPO] -r665 #works
git svn clone [REPO] -r666 #Malformed XML
git svn clone [REPO] -r667 #works
</code></pre>

<p>but even weirder</p>

<pre><code>git svn clone [REPO] -r665
cd [REPO_NAME]
git svn fetch -r667 #Malformed XML
git svn fetch -r668 #Malformed XML
git svn fetch -r669 #Malformed XML
...
</code></pre>

<p>(this also happens with analogous commands in SVN)</p>

<p>currently, the only way I know around this is either</p>

<ul>
<li>forgo having any history before r666</li>
<li>using 2 svn repos pointing to the same remote and hacking around with rebase/cherry pick</li>
</ul>

<p>Is there a more proper way to do this?</p>
","3","1032235","0"
"21922770","422489","2014-02-21 00:34:50","1","251","<linux><git><bash><svn><git-svn>","How to make git-svn use specific version of SVN?","<p>On my Linux machine I use both SVN and Git.</p>

<p>To make my life easier I added
    source /opt/svn/linux64/ix86/svn_1.8.5/interface/startup/svn_1.8.5_64.env
to my <code>.bashrc</code> and thus writing
    svn –version
shows 1.8.5 as expected.</p>

<p>But when having this <code>git-svn</code> fails upon checkout. This happens in Git 1.7.10.1 and is an already known incompatibility (<a href=""http://trac.macports.org/ticket/39986"" rel=""nofollow"">see for example here</a>).</p>

<p>I can easily work around it by <code>source</code>ing SVN version 1.7.9. But that requires me to restart SSH connection. And then after performing <code>git-svn</code> operation restarting again. (In both cases <code>.bashrc</code> has to be edited!)</p>

<p>I could also just switch to SVN 1.7.9 but that would require me to downgrade all SVN tools I use including TortoiseSVN which I have on my Windows machine (and which I use from time to time on checkouts made on shared network drives).</p>

<p>So is there a “non-intrusive” way (so I can do it only for myself – the Linux is on a shared server!) to make <code>git-svn</code> use the 1.7.9 version while command line will still use 1.8.5?</p>

<hr>

<p><code>/opt/svn/linux64/ix86/svn_1.8.5/interface/startup/svn_1.8.5_64.env</code> contains following:</p>

<pre><code>add_to_env()
{
old_value=`eval echo '$'${1}`
eval ${1}=`echo ${old_value}|awk '{ n=split($1,parts,"":""); printf ""%s"", toadd ;
for (i = 1; i &lt;= n; ++i) if ( toadd != parts[i]  ) printf "":%s"", parts[i]; }' toadd=${2}`
}

if [ -n ""$SVN_STARTUP"" ]; then
  SVN_TMP=$SVN_STARTUP
  unset SVN_STARTUP
  . $SVN_TMP
else
  # setum and setmake can overrule SVN_VERSION
  if [ -z ""$SVN_VERSION"" ]; then
    export SVN_VERSION=svn_1.8.5
  fi
  export SVN_HOME=/opt/svn/linux64/ix86/$SVN_VERSION
  add_to_env PATH $SVN_HOME/bin
  export PATH
  add_to_env MANPATH $SVN_HOME/share/man
  export MANPATH
  add_to_env LD_LIBRARY_PATH $SVN_HOME/lib
  export LD_LIBRARY_PATH
fi
</code></pre>

<hr>

<p>As to Perl:</p>

<ul>
<li><code>perl --version</code> shows 5.8.8,</li>
<li><code>which perl</code> shows <code>/usr/bin/perl</code> which is not a link, <code>/usr/bin</code> contains also <code>perl5.8.8</code> which seems (by <code>diff</code>) to be the same,</li>
<li><code>find / -name Ra.pm</code> finds (so far…) <code>/usr/lib64/perl5/vendor_perl/5.8.8/x86_64-linux-thread-multi/SVN/Ra.pm</code>.</li>
</ul>
","3","422489",""
"35481861","1529709","2016-02-18 12:44:55","2","2902","<git><svn><logging><git-svn>","Map of all svn revision numbers <=> git SHA-1 commit hashes","<p>When <code>git-svn</code> needs to rebuild its internal map, it outputs the wanted information to <code>STDERR</code>:</p>

<pre><code>Rebuilding .git/svn/refs/remotes/origin/trunk/.rev_map.XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
r38601 = 28d3a624c5c96db9a1f45d8f261a9b0de1f6f288
r38652 = 74c55b8dff798e5ae1bc2ad00d8ec6eee4f2646b
r38744 = eb457e1949ecf854816ba9cf64b4bace710a7302
r38745 = 5bca99a37fbc6db72d2d50a75301185f4297926c
(...)
</code></pre>

<p>The file <code>.git/svn/refs/remotes/origin/trunk/.rev_map.XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX</code> is unfortunately binary, thus can't be parsed easily. Is there a way to have <code>git-svn</code> output the above information by a specific command? I'm on <code>git 2.7.0</code>, by the way.</p>

<p><strong>Edit:</strong> I'm aware of <code>git svn find-rev</code>, but this will only allow me to find out the SHA-1 commit hash of a <strong>single revision</strong> and I have to provide a specific SVN revision. What I would like to get, though, is the mapping of <strong>all revisions</strong>. Preferably without brute-forcing my way through or using an external datasource (the SVN repo, namely) to provide SVN revisions as input. Most preferably, without providing anything, as this information is stored in the repository after git-svn has built its revision map - or is it not?</p>
","0","1529709","0"
"21928479","392805","2014-02-21 07:54:46","6","4949","<git><github><merge><git-svn><rebase>","git rebase fails with Unknown exit code (128) from command: git-merge-recursive","<p>Consider the following scenario:
- upstream repository with 2500 is stored in SVN
- git user A imports the repository into git and commits 1 patch
- git user B imports the repository into git and commits 1 patch
- git user A wants to merge the patch from git user B</p>

<p>In this case, if user A uses <code>git merge</code>, then the git history will be polluted with the common svn commits (i.e. instead of 2502 commits, history will contain 2501+2501 = 5002 commits!)</p>

<p>If user A uses <code>git rebase</code>, then git history will be correct (2502 commits). This works fine in this simple scenario, but if user A and user B had not 1 but 1000 commits each then a strange complication arises: <code>git rebase -Xours</code> fails with the following message:</p>

<pre><code>First, rewinding head to replay your work on top of it...
fatal: Could not parse object '98d7cd83de321e737b22240752cd178622d29406^'
Unknown exit code (128) from command: git-merge-recursive 98d7cd83de321e737b22240752cd178622d29406^ -- HEAD 98d7cd83de321e737b22240752cd178622d29406
</code></pre>

<p>You can e.g. reproduce this issue using the following github repositories:</p>

<pre><code>git clone https://github.com/opentk/opentk
cd opentk
git remote add mono https://github.com/mono/opentk
git fetch mono
git checkout -b integrate
git rebase -Xours mono/rodo-consolidate-opentk
</code></pre>

<p>Does anyone know why this happens? Any ideas how to resolve this issue?</p>
","4","392805",""
"3187658","27474","2010-07-06 15:24:01","5","800","<svn><git><version-control><git-svn>","Using git and svn with multiple developers","<p>I have a svn repository (with no TLB structure if it matters) which I want to use along with git. I can do a git-svn clone, work on my changes in the git repo and commit back to the svn repo whenever I am done. It's clear until this point. </p>

<p>I'm not sure how to extend this workflow model to multiple developers. I need my dev team to be able to work on a single git repo (the one cloned from the svn repo) which should behave like a normal git repo for all of us. At some point, any developer must be able to commit back to the svn repo. Is this possible? Thanks.</p>
","0","27474","0"
"3188634","6691","2010-07-06 17:25:54","2","80","<git><git-svn><branch>","git: branching removed some commits","<p>I had a weird situation today.. I'll try and recreate what I think happened.</p>

<p>I wanted to move a speculative change (made to <code>a_file</code>) to a new branch and continue working on the main branch without it.</p>

<p>On master with <code>a_file</code> and <code>b_file</code> <strong>dirty</strong> I did:</p>

<pre><code>git checkout -b saved_feature

git commit a_file -m ""Putting this modification on a different branch""

git checkout master
</code></pre>

<p>At this point git complained that b_file was dirty - this was a warning sign but I didn't recognise it.</p>

<p>I was still on branch <code>saved_feature</code> so I thought I could do:</p>

<pre><code>git stash save

git checkout master
</code></pre>

<p>So far so good</p>

<pre><code>git stash pop
</code></pre>

<p>At this point I get an error saying that the stash couldn't be merged.</p>

<p>I examine the log - <strong>for some reason there are about 6 days worth of commits that were originally committed to the <code>master</code> branch but which were not in the log</strong>. These commits were <em>only</em> on the new branch that I had created (I checked in case I had been committing them to a different branch).</p>

<p>After examining the log of the <code>saved_feature</code> branch, I can see that they are all there.</p>

<p>What happened?</p>

<p>I next tried on <code>master</code>:</p>

<pre><code>git merge saved_feature
</code></pre>

<p>But the fast forward option failed with a ton of conflicts.</p>

<p>I also use git-svn to push changes to an external repository so on <code>master</code> again I did:</p>

<pre><code>git svn rebase
</code></pre>

<p>This recovered some of the previously pushed commits from svn.</p>

<p>I then cherry-picked the rest of the most recent commits from the <code>saved_feature</code> branch, 
I then did a <code>git stash pop</code>, fixed the conflicts that should have been automatically merged, but were not, and finally had my <code>master</code> in the state it was originally.</p>

<p>Could anyone point out in this sorry tale where my mental model and git parted ways &amp; how I can avoid getting into messes such as these again?</p>
","0","6691",""
"3315883","94895","2010-07-23 06:46:47","0","144","<git><git-svn>","git-svn vcs switch: where are my branches?","<p>I converted a very large svn repository to a git repository with</p>

<pre><code>git svn init svn/server/project --no-metadata
git svn fetch
</code></pre>

<p>This took the better part of two days to finish. </p>

<p>This repo should have quite a few branches but when I do ""git branch"" I get nothing but the master. They are listed under the branches directory, but shouldn't I see them with ""git branch"" as well? </p>

<p>""git branch -a"" only shows master and remotes/git-svn.</p>

<p>Was it the --no-metadata switch that did this?</p>
","0","94895",""
"48712773","13140","2018-02-09 19:24:02","0","1226","<linux><git><git-svn>","What dependencies does running ""git svn"" need to have installed in order to run correctly?","<p>I've been struggling with getting a Subversion to Git migration to work on a corporate-IT managed Red Hat 6.4 Linux workstation.  Our IT organization provides several versions of most of the OTS packages they think we'll need by mounting them under an ""/apps"" directory on our local workstations.  <em>I do not have root or sudo on my box</em>, or this would probably be easier.  Following some blog posts (such as <a href=""http://jmoses.co/2014/03/21/moving-from-svn-to-git.html"" rel=""nofollow noreferrer"">this one</a>), and trying to set up my PATH and LD_LIBRARY_PATH correclty, I've gotten to the point where I've done a successful <code>git svn init &lt;my/svn/path&gt;</code>, but running the <code>git svn fetch</code> yields errors such as:</p>

<pre><code>Can't load '/apps/subversion_1.9.4/lib/site_perl/5.14.2/x86_64-linux-thread-multi-ld//auto/SVN/_Core/_Core.so' for module SVN::_Core:
/apps/subversion_1.9.4/lib/site_perl/5.14.2/x86_64-linux-thread-multi-ld//auto/SVN/_Core/_Core.so:
undefined symbol: svn_swig_pl_thunk_config_enumerator at /usr/lib64/perl5/DynaLoader.pm line 200.
</code></pre>

<p>at /apps/subversion_1.9.4/lib/site_perl/5.14.2/x86_64-linux-thread-multi-ld//SVN/Base.pm line 59
BEGIN failed--compilation aborted at /apps/subversion_1.9.4/lib/site_perl/5.14.2/x86_64-linux-thread-multi-ld//SVN/Core.pm line 5.</p>

<p>I've tracked down the library that contains this symbol (seems like this could be an issue with compilation paths) to be <code>libsvn_swig_perl-1.so</code>.  I set the LD_PRELOAD env variable in bash to the path to that library, but then running the <code>git svn fetch</code> gives me a new error:</p>

<pre><code>/apps/git_2.9.3/bin/git: symbol lookup error: 
/apps/subversion_1.9.4/lib/libsvn_swig_perl-1.so: undefined symbol: PL_thr_key
</code></pre>

<p>I have not yet been able to successfully locate what package and library ""PL_thr_key"" comes from.  Any hints on where I can get a full list of dependencies (or at least where PL_thr_key is defined) to hopefully get my svn-to-git migration finished?</p>
","0","13140",""
"3322105","30453","2010-07-23 20:27:15","4","579","<svn><git><merge><git-svn>","Easy merging in svn using git-svn","<p>At work we are using a lot of branches in SVN and there are problems in merging. I heard that a good idea is to use git better merging with git-svn. I try to play with it using msysgit, however its not as easy as it seems.</p>

<p>I know I can checkout the whole project using <code>git svn clone -s</code>, however it does not see branches(as normal git branches). I find git-svn very hard to use compare to git or svn.</p>

<p>Could you describe in steps how to do that kind of merging?</p>
","0","30453","0"
"35786548","1541330","2016-03-04 01:48:21","10","1393","<git><git-svn>","git svn clone fails with ""Failed to strip path""","<p>I am using git in a shop that is all Subversion.  When I check out a repo using</p>

<p><code>git svn clone -s --preserve-empty-dirs https://&lt;subversion-server&gt;/svn/&lt;repo&gt; &lt;folder-name&gt;</code></p>

<p>All seems well as the cloning process begins, but at some point during the process, git fails with</p>

<p><code>Failed to strip path '&lt;path-to-some-file&gt;' ((?^:^trunk(/|$)))</code></p>

<p>Anyone know what's wrong or how to fix this?</p>
","1","1541330","0"
"14137692","279362","2013-01-03 11:08:02","3","1121","<git><svn><version-control><git-svn>","git svn fetch not working","<p><code>git svn fetch</code> doesn't fetch any new revisions from the remote SVN server, even though I know that my local version is out of date.</p>

<p>When doing <code>git log</code>, the last revision happens on the 5th of December, whereas when I type in <code>git svn log</code> the latest revision is yesterday (not mine).</p>

<p>Any idea what is going on?</p>
","0","279362",""
"3343896","403410","2010-07-27 13:06:37","1","550","<git-svn><dcommit>","git-svn pushing existing repository mapping usernames the other way","<p>My team and I are currently working on a university project. We were given the project but it hadn't officially started, so we began work in GIT to get a head start. The coordinator of the project has now forced us to use SVN so I am attempting to use git-svn to interface the two repositories.</p>

<p>I can move our commits into the svn repository by .git/info/grafts so that is not the issue.</p>

<p>My problem is that in our course we are given participation marks which are based on our commit histories. However obviously all of our commits have my svn username because I moved them across (which im not sure would please my team mates very much). </p>

<p>I have looked into the git authors file, but as far as I can tell it is only used for the reverse lookup.</p>

<p>Now I understand that with ssh+svn I would obviously need their ssh logins (we may be willing to go to this extreme though) to spoof this information, however I have access to the repository via file:// if that helps.</p>

<p>So to summaries: </p>

<p>I need ""git svn dcommit"" to map git authors to their respective svn usernames and if possible (less important) have the date information correct.
One caveat on that is a few authors on git have multiple git authors (which have already made commits) so I need to be able to map multiple git authors to a single svn username.</p>

<p>Thanks in advance for any help provided :)</p>

<hr>
","0","403410",""
"3348889","90801","2010-07-27 23:52:41","0","115","<git><git-svn><push><rebase>","How to push from an often rebased git-svn repo","<p>I do all my daily work through git-svn, queuing up checkins and rebasing like a mad-man :)
the down side to this is I often have a couple days work queued up (tisk tisk i know) and it makes me a little nervous that its only in one place. If I was not using git-svn and rebasing all the time i would just push my changes to another computer and clone it if i do something stupid and loose data.   </p>

<p>What is your advice on pushing often-rebased git repos?</p>
","1","90801",""
"41170695","348081","2016-12-15 18:09:44","1","235","<git-svn>","Get svnversion with git-svn","<p>with <code>git svn</code> I can use a svn repository with git. In svn, I can get version of revision with </p>

<pre><code>svnversion
</code></pre>

<p>how I can get the version of svn revision with <code>git svn</code>?</p>
","0","348081",""
"3495109","170443","2010-08-16 16:19:18","1","706","<git><timeout><git-svn><performance>","How to detach the local git repository from its working directory?","<p>Is this feasible?</p>

<p>I would like to have the <code>.git</code> directory on another drive than the checkout directory.
I could not find a way to detach both.</p>

<p>The reason is: there is an exchange area on a very slow network drive and limited space and this is a real nightmare with timeouts. At least the repository operations (synchronization with a svn repository) could then be done fast enough to avoid the timeouts and file copy can be done afterwards on checkout with the poor performance. I could not find any way to cope with this situation (which is out of my control)</p>

<p>I would not like to but if there is no better suggestion I would replace it by a local git repository and rsync'ing the checkout dir in both directions to and from the slow drive.</p>

<p>I bet you have a better idea!</p>
","0","170443","0"
"48813180","8974067","2018-02-15 17:36:45","-1","81","<linux><git><svn><git-svn><svn2git>","svn2git kde rules errors - converting tags","<p>I am using svn2git all fast export and I am getting the following error:</p>

<p><a href=""https://i.stack.imgur.com/YejfU.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YejfU.jpg"" alt=""Error 1""></a>
- I had my rules for tags along these lines:</p>

<pre><code>match /(&lt;folder&gt;/Source/&lt;folder&gt;/[^/]+/)tags/
  repository repo
  prefix \1
  branch refs/tags/\2
end match
</code></pre>

<p>How can I correct these rules?</p>
","0","8974067",""
"3503219","46768","2010-08-17 14:00:49","1","961","<git><svn><macos><git-svn>","git-svn died of signal 10 on OSX","<p>I asked this question <a href=""https://superuser.com/questions/176840/git-svn-died-of-signal-10-on-osx"">originally on SuperUser</a>, but it looks like I'm much more likely to get an answer here. I have git and git-svn installed via <a href=""http://www.finkproject.org/"" rel=""nofollow noreferrer"">Fink</a>. I try to do the following:</p>

<pre><code>$ git svn init http://myserver/myrepo
Initialized empty Git repository in checkout/.git/
$ git svn fetch
error: git-svn died of signal 10
</code></pre>

<p>Why is git-svn failing? How can I fix this? I have the repo already checked out via vanilla SVN, so there shouldn't be any access or permissions issues.</p>
","2","46768",""
"35840624","5497303","2016-03-07 09:54:28","1","110","<git><svn><jenkins><jenkins-plugins><git-svn>","How to get latest tag from SVN using git svn through shell script","<p>how to retrieve latest svn tag using git svn client from origin through shell script. </p>

<p>Basically would like to automate getting latest tag from remote SVN and sync with local git repo. So I use ""git svn"" and would like to introduce hudson/jenkins job to perform this step.</p>

<p>thanks in advance</p>
","0","5497303",""
"51941802","10252959","2018-08-21 04:57:19","1","35","<git><gitlab><git-svn>","SVN to Git Migration: additional commits found in gitlab","<p>I had a repository in SVN, which i moved to Git using the ""Git SVN Clone"" command.</p>

<p>After Migrating repository, when checking the history of some of the files, we could see additional commits.</p>

<p>For example, lets say I have a file File.txt in SVN with 3 commits (lets say commit ids are r4, r5 and r6). After the migration, history of File.txt in GitLab shows more commits i.e (2dcdb6 corresponds r4, 5fgefd3 corresponds r5, 6sdsdr2 corresponds r6 and also 3jdhes5 corresponds r1, 1sdfer4 corresponds r2)</p>

<p>In r1 and r2, File.txt is not modified. When opening the commits 3jdhes5 and 1sdfer4 in GitLab it does not show the File.txt changes => which is expected.</p>

<p>But the History of File.txt is displaying the commits 3jdhes5 and 1sdfer4.</p>
","0","10252959","0"
"31706932","649524","2015-07-29 17:10:59","1","56","<git><svn><github><git-svn>","How to use git svn clone on any random folder in svn repository","<p>Our SVN repository has grown very big and due to malpractice, we are now working on one of the branch deep down.</p>

<p>Our structure is</p>

<pre><code>Repo/
   tags/
   branches/
   trunk/
</code></pre>

<p>What i want is to create git repository for following folder only</p>

<pre><code>Repo/
  branches/identifier1/identifier2/src/
</code></pre>

<p>I do not want any other folders (as tags/ is very big, trunk/ is very big, and other folders are also very big in size).</p>

<p>I am not able to achieve that. I have tried following (and various other combinations) </p>

<pre><code>git svn clone &lt;Repo&gt;/&lt;path to branch&gt; 
git svn clone &lt;repo&gt; -branches &lt;path to branch&gt;/*
git svn clone &lt;repo&gt; -T &lt;path to branch?
</code></pre>

<p>In all my attempt, either there is error or empty repository with warnings. 
Once it seems succeeded when i tried to clone entire repository, but then stopped due to size/time constraints.</p>

<p>Once i get over this initial hump, my plan is to work on git locally, and push to svn repo instead of usual svn commit.</p>
","3","649524","0"
"60009188","147356","2020-01-31 18:10:26","2","938","<git><svn><git-svn><sourceforge>","Cloning a large svn repository from sourceforge with ""git svn clone""","<p>I'm trying to clone a <a href=""https://sourceforge.net/p/vice-emu/code/HEAD/tree/"" rel=""nofollow noreferrer"">large subversion repository</a> from sourceforge using <code>git svn clone</code>. The cloning process periodically gets stuck: SF just stops sending data. Eventually it times out, but it takes <em>forever</em>.  After this, it's a cycle of:</p>

<ul>
<li>Run <code>git svn fetch</code></li>
<li>Wait for it to timeout</li>
<li>Repeat as necessary</li>
</ul>

<p>Looking at the <code>git svn</code> man page, there doesn't appear to be an obvious way to set a timeout for i/o operations.</p>

<p>Is there any way to make this process more efficient?</p>
","0","147356",""
"35858027","385024","2016-03-08 02:51:01","1","79","<git><visual-studio><svn><git-svn>","Using git-svn when project already checked into SVN and git","<p>We have a project (Visual studio solution actually) which has been checked into a svn repo and a git repo separately.  They're ""in sync"" at the moment but I would like to start using git and git-svn to keep them both up to date. </p>

<p>I've read various guides to git-svn but they either seem to assume you're starting with an existing svn and want to create a new git repo, or import a branch of the svn repo into an existing git repo or similar. None that I've found seem to exactly match this scenario. </p>

<p>What is the best way to get started when both repos already exist?</p>

<p>EDIT:</p>

<p>Just an edit to clear up my intention with this, and where I started:</p>

<p>1) I created an initial git repo and have been working in there. I don't want to lose this as it has the ""history"" of this solution.</p>

<p>2) I created an svn repo and checked the solution into that, since there are people on my team who are reluctant to learn git.</p>

<p>3) I want to keep working day to day in the git repo (local and remote)</p>

<p>4) Occasionally I want to push the current state of the git repo into the svn repo, but I would like to do this with git-svn or some other method that doesn't require switching between git and svn. The svn repo doesn't have to be completely in sync with the git repo.</p>

<p>So given I have an existing git repo with checkins that I don't want to lose, how do I ""hook up"" my local git repo to the svn repo for use with git-svn? </p>

<p>This seems to be the reverse of how poeple usually get started with git-svn so most tutorials I've found aren't of much help.  I did find this, which looked hopeful, but it doesn't actually seem to work (and there's not much detail in what each step is actually doing, so I'm not sure where it's going wrong)</p>

<p><a href=""http://ivanz.com/2009/01/15/selective-import-of-svn-branches-into-a-gitgit-svn-repository/"" rel=""nofollow noreferrer"">http://ivanz.com/2009/01/15/selective-import-of-svn-branches-into-a-gitgit-svn-repository/</a></p>

<p>EDIT2:  As I was making the edit above, I realized that what I actually want to do is push an existing git repo into a new svn repo. By googling for this, it looks like this has already been answered, and my question has ended up being a duplicate of this one:</p>

<p><a href=""https://stackoverflow.com/questions/661018/pushing-an-existing-git-repository-to-svn"">Pushing an existing git repository to SVN</a></p>

<p>I'll probably delete this question once I've tried and confirmed that approach...   </p>
","5","385024",""
"51958076","746461","2018-08-21 23:40:07","1","65","<git><git-svn>","Can git-svn not rewrite git history?","<p>I commit changes to git-svn repository, the SHA of my commit is AAAA. After I dcommit, the SHA becomes BBBB.</p>

<p>I understand the SHA changes because git-svn stores SVN metadata.</p>

<p>Is it possible for git-svn not to change SHA but still able to svn rebase and dcommit?</p>
","0","746461",""
"3645467","212971","2010-09-05 08:29:39","0","168","<svn><git><git-svn><conflict><git-add>","git-svn problem with git add --patch resulting in conflicts","<p>Basically when i want to commit two separate changes in the same file that resulted from an <code>git add --patch &lt;file&gt;</code> operation, git svn rebase later on throws 1-2 conflicts upon comitting the second change when using <code>git add</code> for the second change.</p>

<p>so i'm basically doing this (i'm on master branch and have fetched the svn repository):</p>

<pre><code>git checkout -b feature
... make two unrelated changes to file test.txt...
git add --patch test.txt
... add first change but ignore second one
git commit -m ""change1""
git stash
git checkout master
git merge feature
git svn rebase
git svn dcommit
git checkout feature
git stash apply
</code></pre>

<p>now here there's two ways to do it, first the one that works:</p>

<pre><code>git add --patch test.txt
... select everything (which is the second change in this case)
git commit -m ""change 2""
git checkout master
git merge feature
git svn rebase
git svn dcommit
</code></pre>

<p>here's the one that doesn't work:</p>

<pre><code>git add test.txt #notice there's no --patch
git commit -m ""change 2""
git checkout master
git merge feature
git svn rebase #yields a conflict
</code></pre>

<p>So why is it that when using <code>git add --patch</code> for the second change, I can commit to the svn repository without problems, but when just using <code>git add</code> for the second change, it results in a conflict? I'm quite new to git, so this might be a stupid question, but as I see it, both commandsets should do exactly the same.</p>
","0","212971","0"
"14172446","928769","2013-01-05 13:57:56","1","1192","<git><svn><git-svn><branching-and-merging>","git-svn commits to wrong branch / how to merge svn branch via git-svn","<p>I have a SVN repository which I checked out with git-svn, using the <code>--stdlayout</code> option (at that time, the repo was empty).</p>

<p>I then worked on the master branch for a while. When using <code>git svn dcommit</code>, it would svn-commit my changes to <code>https://my.host/repo/trunk</code> like it should.</p>

<p>At some point I created a branch named ""arithmetics"" with git. Later I wanted to create that branch in svn too, so I did a <code>git svn branch arithmetics</code> and then a <code>git branch --set-upstream arithmetics remotes/arithmetics</code> as suggested by a website. I suppose this is where things went wrong, as I got a warning about <code>--set-upstream</code> being deprecated.</p>

<p>When calling <code>git svn dcommit</code>, it would commit to <code>https://my.host/repo/branches/arithmetics</code>, so far so good. But then I noticed, that <code>dcommit</code> would commit to that branch regardless of the currently checked out branch in the git repository, when I tried merging the branch back into master.</p>

<p>I even tried creating a new clone from svn, merging the branch into master there. I also tried checking out <code>trunk</code> explicitly with <code>git checkout -b local/trunk remotes/trunk</code>, then merging the branch into that and then <code>git svn dcommit</code>. It would always commit to the branch again.</p>

<p>How can I fix this?</p>

<p>PS: I used <code>git rebase</code> for merging, as I read, that merge-commits were problematic with git-svn, so I don't have any of those.</p>
","1","928769",""
"69726181","14436123","2021-10-26 15:45:47","0","129","<github><svn><git-svn>","Migrating from svn to github enterprise without loosing commit history","<p>We were using SVN for quite a long time in our office and now recently it is decided that we should move to GitHub enterprise and all source code should be maintained there. Our current SVN server is an on premises windows 2012 R2 server in our private network. We are already maintaining new project on GitHub enterprise but these are few project for which we cannot take risk of loosing our commit history and branches tags etc. For migrating a quick google search brings</p>
<p><code>git svn clone &lt;svn-repository-url&gt;</code></p>
<p>but this is not possible as our SVN server is behind a corporate firewall and there is no change that network and Infosec guys will allow the server to available on public internet. Is there any other way by which we migrate all our project to GitHub. Something like export SVN repo as .zip or .tar and then upload it to GitHub or any other possible solution would be greatly appriciated.</p>
","0","14436123",""
"3662114","34910","2010-09-07 19:45:41","16","4109","<svn><git><version-control><git-svn>","RW Access git repository using svn (git-svnserver)?","<p>Is there a program that does what git-svn does, but in a situation where the repository on the server is git, and the developer uses svn? </p>

<p>I know that github.com allows svn access to the git repositories they host, but it doesn't look like they've released this project open source (yet?), and using their servers is not an option for me (not even their private repositories). </p>

<p>EDIT: I think what I am looking for is a parallel to 'git-cvsserver' -- git-svnserver. In a bit of searching, I found some 2-3 year old threads on the git mailing list, but it doesn't look like anyone has made significant progress. I hope someone can correct me on that.</p>

<p>Are there any git-svnserver projects currently underway? I'd hate to have duplicate effort, but it seems that <a href=""http://github.com/blog/644-subversion-write-support"" rel=""noreferrer"">GitHub is the farthest along</a>, but nobody else can have it.</p>
","0","34910","0"
"2821608","69993","2010-05-12 18:20:17","10","1329","<svn><git><git-svn><gitignore><svnignore>","How can you indicate files to ignore in svn when using git and the git-svn bridge?","<p>There is a master subversion repository that I've cloned a git repo from.  I've got a lot of ignored files in my .gitignore that I'd like the svn repository to know about.</p>

<p>I know that I can use <code>git svn show-ignore</code> to pull the ignored list from subversion, but how can I do the reverse?  Send a list of files to be ignored back to the svn repo?</p>

<p>Git version (and git-svn is at the same version):</p>

<pre><code>git --version 
git version 1.7.0.5
</code></pre>
","0","69993","0"
"2835791","30478","2010-05-14 16:23:35","28","10733","<svn><git><merge><git-svn>","git-svn: reset tracking for master","<p>I'm using <code>git-svn</code> to work with an SVN repository. My working copies have been created using <code>git svn clone -s http://foo.bar/myproject</code> so that my working copy follows the default directory scheme for SVN (trunk, tags, branches).</p>

<p>Recently I've been working on a branch which was created using <code>git-svn branch myremotebranch</code> and checked-out using <code>git checkout --track -b mybranch myremotebranch</code>. I needed to work from multiple locations, so from the branch I <code>git-svn dcommit</code>-ed  files to the SVN repository quite regularly.</p>

<p>After finishing my changes, I switched back to the master and executed a merge, committed the merge, and tried to dcommit the successful merge to the remote trunk.</p>

<p>It seems as though after the merge the remote tracking for the master has switched to the branch I was working on:</p>

<pre><code># git checkout master
# git merge mybranch
... (successful)
# git add .
# git commit -m '...'
# git svn dcommit
Committing to http://foo.bar/myproject/branches/myremotebranch ...
#
</code></pre>

<p><strong>Is there a way I can update the master so that it's following <code>remotes/trunk</code> as before the merge?</strong></p>

<p>I'm using git 1.7.0.5, if that's any help.</p>

<p>It would be useful if you could also explain <em>why</em> this happened, so I can avoid the problem happening again. Thanks!</p>

<p><strong>Edit:</strong></p>

<p>Here is my current <code>.git/config</code>:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    autocrlf = false
[svn-remote ""svn""]
    url = http://foo.bar/myproject
    fetch = trunk:refs/remotes/trunk
    branches = branches/*:refs/remotes/*
    tags = tags/*:refs/remotes/tags/*
[branch ""mybranch""]
    remote = .
    merge = refs/remotes/myremotebranch
</code></pre>

<p>So it seems that the trunk is pointing to the correct place. However, switching to the branch then back to the master doesn't help; <code>git svn dcommit</code> in the master still tries to push to <code>myremotebranch</code>.</p>
","0","30478","0"
"2949738","330777","2010-06-01 12:33:47","85","61795","<git><git-svn>","git merge different repositories?","<p>I've been using SVN for all my projects.
Sometimes project B is originating as a copy from project A.
When project A has a generic change, I can use <code>svn merge A</code> within directory B and it will merge those changes.</p>

<p>Now, if I wanted to use git. I don't like having all my projects in the same repository since I then have to clone <em>everything</em> and can't pick just one project like in SVN.
But having one repository for each project, how do I go about doing the same like I did earlier with SVN?</p>

<p><strong>The question is:</strong>
What's the best way to structure it if I want several subprojects that really all relates to one original project and to keep them in sync? And that I also want to be able to check them out separately</p>
","3","330777","0"
"2952291","234277","2010-06-01 18:32:40","2","166","<svn><git><git-svn>","Should .git folders be stored in my SVN repo?","<p>I have a svn repo that has all my projects/main codebase. There are some dependencies on some external/third party code that will sometimes have a git repo along with it.</p>

<p>My question is should I add the .git folders to my svn repo when I am commiting? I haven't figured out git-svn yet and I'm not sure what the workflow is, but just checking in a local git clone to a svn repo, is that best practice?</p>
","0","234277",""
"22767825","1377300","2014-03-31 17:07:31","2","760","<windows><svn><config><git-svn>","git-svn ignoring subversion configuration file (auto-props) on Windows","<p>This is my first question here, I hope am not doing anything wrong.</p>

<p>As the title suggests, I am trying to work with git-svn on a project which has a central SVN repository. The SVN repository uses auto-props, and if these are not properly set in the local SVN configuration file, the commit is rejected.</p>

<p>I have read everywhere, including here on StackOverflow, that git-svn is smart enough to read and honor the svn configuration file, so if I already configured my Subversion client properly, git-svn should just work. Unfortunately this is not being the case for me.</p>

<p>Here is the content of my SVN config file, the location if which is <strong>C:\Users[myusername]\AppData\Roaming\Subversion\config</strong>. I removed all the comments (and only the comments).</p>

<pre><code>[auth]

[helpers]

[tunnels]

[miscellany]
global-ignores = *.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* *.swp ~*
enable-auto-props = yes
use-commit-times = yes

[auto-props]
*.e = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.c = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.h = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.cpp = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.y = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.py = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.ecf = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.xace = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.ace = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.ge = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.eant = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.bm = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.bat = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.sh = svn:keywords=Author Date ID Revision;svn:eol-style=native
*.xeb = svn:keywords=Author Date ID Revision;svn:eol-style=native
Mak* = svn:keywords=Author Date ID Revision;svn:eol-style=native
tcf = svn:eol-style=native
output = svn:eol-style=native
output? = svn:eol-style=native
</code></pre>

<p>Committing with SVN works perfectly, and it stops working (the server rejects it saying that a required auto-prop is not set) if I edit this file and set <code>enable-auto-props</code> to <code>no</code>, so this is the right file to edit and it is being parsed. Sadly, git-svn ignores this entirely, and Dcommitting always fail with the same error message, which is the following:</p>

<pre><code>ERROR from SVN:
A repository hook failed: MERGE request failed on '/[url omitted]/Src': Commit blocked by pre-commit hook (exit code 1) with output:
Props 'svn:keywords=author date id revision' missing (or not expected)
Props 'svn:eol-style=native' missing (or not expected)
Props issue on: /[url omitted]/some_file.cpp
</code></pre>

<p>this message is repeated several times for all the files with relevant extension that I am trying to commit.</p>

<p>I read in a comment to a StackOverflow answer somewhere that on Windows there might be another copy of the Subversion config file, located in ""C:\Users[myusername].subversion\config"", but this wasn't the for me. Just to be sure, I copied the config file to this path and nothing changed.</p>

<p>I am surprised that this doesn't seem to be a common problem. I was expecting to find loads of people asking the same question on the Internet, but this doesn't seem to be the case. When people ask about auto-props, the answer is always just that git-svn should be honoring the SVN config file, usually followed by ""thank you, it works!"", so it is likely to depend on something in my installation, but I don't honestly have a clue of how I can troubleshoot that.</p>

<p>Thank you for reading and thank you in advance for your help.</p>
","0","1377300","0"
"2959443","182781","2010-06-02 16:05:37","98","42577","<git><git-svn>","Why is the meaning of “ours” and “theirs” reversed with git-svn","<p>I use git-svn and I noticed that when I have to fix a merge conflict after performing a <code>git svn rebase</code>, the meaning of the <code>--ours</code> and <code>--theirs</code> options to e.g. <code>git checkout</code> is reversed. That is, if there's a conflict and I want to keep the version that came from the SVN server and throw away the changes I made locally, I have to use <code>ours</code>, when I would expect it to be <code>theirs</code>.</p>

<p>Why is that?</p>

<p>Example:</p>

<pre><code>mkdir test
cd test
svnadmin create svnrepo
svn co file://$PWD/svnrepo svnwc
cd svnwc
echo foo &gt; test.txt
svn add test.txt
svn ci -m 'svn commit 1'
cd ..
git svn clone file://$PWD/svnrepo gitwc
cd svnwc
echo bar &gt; test.txt 
svn ci -m 'svn commit 2'
cd ..
cd gitwc
echo baz &gt; test.txt 
git commit -a -m 'git commit 1'
git svn rebase

git checkout --ours test.txt
cat test.txt 
# shows ""bar"" but I expect ""baz""

git checkout --theirs test.txt
cat test.txt 
# shows ""baz"" but I expect ""bar""
</code></pre>
","2","182781","0"
"22768387","3482128","2014-03-31 17:37:24","0","209","<git><svn><git-svn>","git-svn checkout checks files out to wrong folder","<p>At work we have an svn repository that uses a somewhat standard folder structure that looks like the following:</p>

<pre><code>remote-repo/
   tags/
   branches/
      branch_to_proj1_A/
         proj_1_1
         proj_1_2
   trunk/
      proj1/
         proj1_A/
            proj1_1
            proj1_2
      proj2/
      proj3/
</code></pre>

<p>After I do a git-svn clone (using the -s option) I get the following checked out folder structure</p>

<pre><code>local-gitsvn/
   proj1/
      proj1_A/
         proj1_1
         proj1_2
   proj2/
   proj3/
</code></pre>

<p>Now I'm interested in working with the svn branch 'branch_to_proj1_A' that someone else created. Looks like this is a branch for only the folder proj1_A... thus I do</p>

<pre><code>$ git-svn checkout -b local-branch_to_proj1_A branch_to_proj1_A
</code></pre>

<p>After checkout, I have the following folder structure in the git repo</p>

<pre><code>local-gitsvn/
   proj1_A/
      proj1_1
      proj1_2
</code></pre>

<p>Note that the rest of the projects are gone, and only proj1_A is there. </p>

<p>My question is, is it possible to checkout the branch to the right folder? So that after the 'git svn checkout' I get the same folder structure as in the original cloned repo?</p>

<p>Thanks for the help!</p>
","0","3482128",""
"4330202","208","2010-12-01 23:27:26","25","8506","<git><git-svn>","git svn - <file> was not found in commit <hash>","<p>In the middle of pulling down a (rather large) svn repo with git-svn, I encountered the following error message (generic info substituted for real info):</p>

<pre><code>Found possible branch point: svn://server/project/trunk/dir =&gt; svn://server/project/branches/branchname, &lt;revision&gt;
Initializing parent: refs/remotes/branchname@&lt;revision&gt;
project/trunk/dir/file was not found in commit &lt;hash&gt; (r&lt;revision&gt;)
</code></pre>

<p>I have read in <a href=""https://stackoverflow.com/questions/2105064/i-need-to-un-fetch-some-revisions-from-git-svn"">other posts</a> that it is possible to ""un-fetch"" this info through some tinkering.  However, I would rather not lose the history and go forward as painlessly as possible.</p>

<p>How can I get <code>git-svn fetch</code> to continue?</p>
","1","208","0"
"4341159","71581","2010-12-02 23:39:24","13","9203","<svn><git><macos><git-svn>","How to upgrade the SVN version used by git-svn","<p>I've been using git-svn and love it. But we just switched our repo to one that requires a svn version of 1.5.0 or greater. Currently, I've got this:</p>

<pre><code>triedsound-lm:android holmesj$ git svn --version
git-svn version 1.7.3.1 (svn 1.4.4)

triedsound-lm:android holmesj$ svn --version
svn, version 1.6.15 (r1038135)
   compiled Nov 29 2010, 13:32:56
</code></pre>

<p>So, when I try to dcommit, I get this error message:</p>

<pre><code>...
...
A repository hook failed: Commit blocked by start-commit hook (exit code 1) with output:
Only clients &gt;= 1.5.0 may commit to this repository.
For upgrade instructions please see:
    http://twiki.corp.yahoo.com/view/Subversion/SubversionFAQ#Upgrade
 at /usr/local/git/libexec/git-core/git-svn line 573
</code></pre>

<p>This really sucks, I don't want to stop using git-svn. That would seriously just be awful. It's going to suck if I just have to lump all my git commits into one big svn commit.</p>

<p>Anyone know how to update the svn version that git-svn uses? I'm running this on OSX 10.5</p>
","2","71581","0"
"2973798","11410","2010-06-04 11:51:57","1","462","<git-svn>","Getting started with git-svn, I'm missing something","<p>OK, so I've managed to </p>

<pre><code>git svn clone http://repository/project MyProj
</code></pre>

<p>And that gives me this hierarchy</p>

<pre><code>Project 
 |
 |____branches
 |
 |____tags
 |
 |____trunk
</code></pre>

<p>I was kind of hoping that in <code>gitk --all</code> I would see those branches translated into git branches. Was I expecting too much?</p>

<p>The question is, where do I go from here? Do I just work inside one of the branch folders?</p>

<p><strong>UPDATE</strong></p>

<p>For others hit by this problem, the reason it wasn't working for me is that I thought that the path to my SVN project was <code>http://repository/project</code>, where as actually it was <code>http://repository/project/subproject</code>, so git-svn wasn't finding the branches/tags/trunk in the expected place.</p>
","0","11410",""
"2974016","218484","2010-06-04 12:22:48","27","11274","<svn><git><git-svn><branch>","git-svn branching","<p>I am using git with an svn repository everything is going fine I did all my branching with git so I did not branch on svn but I branched with git and pushed those branches to a separate location. Then I commited changes from the branch when needed.<br>
But now I want to create some branches that actually exist on svn I tried:</p>

<pre><code>$ git svn branch someFeature -m ""message"" 
</code></pre>

<p>,and I got this:</p>

<pre><code>$ git svn branch someFeature -m ""message""  
Multiple branch paths defined for Subversion repository. 
You must specify where you want to create the branch with the 
  --destination argument.
</code></pre>

<p>How should I specify the destination I can't figure this out and the man page isn't that clear also.</p>
","0","218484","0"
"4348238","90801","2010-12-03 17:36:59","1","91","<git><git-svn>","how to not lose branches when cloning a cloned git repo","<p>we have a git svn repo that fetches from svn and shows all the branches.
we then have a bare clone of that which people can push to which only shows branches that have tracking branches on the git-svn repo. it's a pain having to make a tracking branch for everything.</p>

<p>is there some way to keep all the branches when cloning?</p>
","0","90801",""
"4371044","19370","2010-12-06 21:17:03","9","1099","<git><git-svn>","Will this git-svn workflow work?","<p>I'm experimenting with <code>git-svn</code>, and am trying to come up with a relatively non error-prone workflow. I think the following should work, and is pretty simple, but I've seen <a href=""https://stackoverflow.com/questions/190431/is-git-svn-dcommit-after-merging-in-git-dangerous/190447#190447"">people using far more complicated workflows</a>, so I want to see why.</p>

<ol>
<li><code>(master) $ git svn init &lt;path&gt;</code></li>
<li><code>(master) $ git svn fetch</code></li>
<li><code>(master) $ git svn rebase</code></li>
<li><code>(master) $ git checkout -b topic-branch</code></li>
<li><code>(topic-branch) $ # HACK HACK COMMIT HACK HACK HACK COMMIT HACK COMMIT</code></li>
<li><code>(topic-branch) $ git checkout master</code></li>
<li><code>(master) $ git merge topic-branch</code> -- this is a fast-forward merge, so no merge commit</li>
<li><code>(master) $ git svn rebase</code></li>
<li><code>(master) $ # fix conflicts</code></li>
<li><code>(master) $ git svn dcommit</code></li>
<li><code>GOTO 4</code></li>
</ol>
","1","19370","0"
"3095611","162325","2010-06-22 17:37:08","9","7804","<git-svn>","git-svn dcommit error: unable to determine upstream SVN information","<p>I m trying out git-svn and I am getting the following error. What I've done so far is </p>

<pre><code> git svn init -T &lt;my svn repo&gt; 
</code></pre>

<p>then I've been committing to my repository with</p>

<pre><code> git commit -a
</code></pre>

<p>then once I did a few of those I did a</p>

<pre><code> git svn fetch
</code></pre>

<p>and then I tried a </p>

<pre><code> git svn dcommit
</code></pre>

<p>However, that fails with </p>

<blockquote>
  <p>Unable to determine the upstream SVN information from HEAD history.
  Perhaps the repository is empty</p>
</blockquote>

<p>I can also see that the files in my file system are not marked as being used by svn (not sure if this should happen or not) though. If I browse the svn repository (with repo browser) I can see that the original files are there.</p>

<p>After this original failure I tried <strong>rebasing</strong> without much success (it throws some other error).</p>
","1","162325","0"
"4381814","15842","2010-12-07 21:32:53","22","5535","<git><git-svn>","git-svn rename tracking branch","<p>My current svn cloned branches (using the -s 'standard layout') option are called:</p>

<pre><code>$ git branch -r
branch1
branch2
</code></pre>

<p>I would like to rename those, such that they are:</p>

<pre><code>$ git branch -r
svn/branch1
svn/branch2  
</code></pre>

<p>As though I had called $ git-svn clone --prefix svn   originally.  I don't need to change any names on the remote side.</p>
","0","15842","0"
"4384419","168143","2010-12-08 05:19:57","12","7594","<git><git-svn>","How can I make git-svn get rid of remote branches that don't exist anymore?","<p>Is there a handy way to get my local git repo to forget about remote branches that have been deleted? <code>git svn fetch</code> doesn't ""re-sync everything"" like I hoped it might. My local repo was set up with using an import of the standard svn repo layout (<code>git svn -s …</code>).</p>

<p>related: <a href=""https://stackoverflow.com/questions/4169017/why-does-git-remote-not-list-anything-on-my-git-svn-repo"">Why does <code>git remote</code> not list anything on my git-svn repo?</a></p>
","2","168143","0"
"4386658","311635","2010-12-08 10:57:03","1","142","<git><mercurial><git-svn><hgsubversion>","How to import a deleted path in a svn repositroy into git or mercurial","<p>I need to do some research about sources in a svn-deleted path in our company svn repository. Since I need to work a lot with annotate, I want to have the history in mercurial or git. I tried so far:</p>

<ul>
<li><strong>hgsubversion</strong> and <strong>git-svn</strong>: For both programs I can't find a way to specify that I need a older revision where the path existed, both try the svn HEAD and fail since the path is deleted there.</li>
<li><strong>hgsvn</strong>: It finds the old path (with a peg revision), but fails to do the initial update, since it wants to get the log from the svn HEAD revision, where the wanted path doesn't exist anymore.</li>
</ul>

<p>So is there a way to import a deleted svn path into git or hg?</p>
","1","311635",""
"4388952","439592","2010-12-08 15:05:43","1","628","<git><commit><git-svn>","How to use git-svn as intermediate review tool for a SVN repository?","<p>In the company I work for, we have the policy that all code should be reviewed before it is checked in into the SVN repository. Normally, before I commit, I just ask a collegue to review, but at this moment there is nobody around for a couple of days, and I have several tasks to do with the same class.</p>

<p>I installed git, and used git-svn to make a local repository. I committed every change I am going to propose after some time, and with <code>git-svn dcommit</code>, I can sync my stuff inside the master repository.</p>

<p>The question now is: what happens if my co-worker that will review my stuff in a few days disagrees with one commit, or wants me to make some additional changes (e.g. code comments)? How do I do that without having to do an extra commit, that will eventually show up in my SVN master repository?</p>

<p>Example, let's say - for the sake of understandibility - that I am working on one file.</p>

<ul>
<li>SVN fetched rev 1000</li>
<li>Added code change A, git commit.</li>
<li>Added code change B, git commit.</li>
<li>Added code change C, git commit.</li>
</ul>

<p>Now, my co-worker accepts changes A and C, but disagrees with change B, and wants more comments to go in along with change B. The result I want to end up with eventually is:</p>

<ul>
<li>SVN rev 1001 - Code change A</li>
<li>SVN rev 1002 - Modified code change B + addtitional comments</li>
<li>SVN rev 1003 - Code change C.</li>
</ul>

<p>I am not very familiar with <code>git</code>, and am quite familiar with SVN. How do I change the contributions I committed into code change B without making a fourth commit?</p>
","1","439592",""
"4394288","305340","2010-12-09 02:20:42","1","1849","<git><osx-snow-leopard><git-svn>","Why does git svn init create an empty repository?","<p>i am trying to follow <a href=""http://www.jonmaddox.com/2008/03/05/cleanly-migrate-your-subversion-repository-to-a-git-repository/"" rel=""nofollow"">this guide</a> in order to move a project from svn to git. i don't particularly care about merging things upstream so this seems like the cleanest solution of those i've explored.</p>

<p>my issue is that when i execute <code>git svn init file:///Users/Ankur/path/to/repository --no-metadata</code></p>

<p>i get the message <code>Initialized empty Git repository in /Users/Ankur/path/to/repository/.git/</code> which is supposed to be the first line of the output anyway, but its supposed to be followed by individual messages about commits. i don't get anything else (and this executes pretty quickly).</p>

<p>i've verified the path that i am using is correct by doing <code>svn co file:///Users/Ankur/path/to/repository</code> with the same repository to make sure i can checkout the repository normally.</p>

<p>details about my system: Mac OS X 10.6.5, <code>which git</code> returns <code>/usr/bin/git</code> (which i think means it was installed with Xcode because i removed the version i got with the git-osx-installer thinking it might have been the culprit initially). <code>git --version</code> returns
<code>git version 1.7.2.3</code></p>
","4","305340",""
"4407498","214620","2010-12-10 09:47:11","1","615","<git><git-svn>","git svn fetch became slow (up to 30 seconds waiting before every revision fetch)","<p>after some system reconfiguration on my new Ubuntu 10.10 <code>git svn fetch</code> became very slow waiting for up to 30 seconds every time it is trying to get a new svn revision. </p>

<p>I am using <code>git-svn version 1.7.1 (svn 1.6.12)</code></p>

<p>It fetches the files of the revision normally fast, but then waits very long to get the next revision. On other machines git svn fetching from the same SVN repository is working blazingly fast as it used to do just some days before on my machine. </p>

<p>I dropped <code>auth</code> folder in the <code>~/.subverion</code>. I reinstalled all packages that related to git and to subversion including libraries. It does not help.</p>

<p>So I did some <code>strace</code>, when it fetches revisions, and waits, I can see in the process tree something like this:</p>

<pre><code> % ps fxx | egrep '(git|svn)'
 5154 pts/0    S+     0:00  |   \_ strace -fc git svn fetch
 5155 pts/0    t+     0:00  |       \_ git svn fetch
 5156 pts/0    tL+    0:00  |           \_ /usr/bin/perl /usr/lib/git-core/git-svn fetch
 5217 pts/0    S+     0:00  |               \_ git hash-object -w --stdin-paths --no-filters
 5219 pts/0    S+     0:00  |               \_ git cat-file --batch
 5253 pts/0    S+     0:00  |               \_ git update-ref -m r75 refs/remotes/trunk 8a79cacd6d3c36eb338f6ed5f23269a163600d0f
</code></pre>

<p>and the output of the <code>strace</code> is something like:</p>

<pre><code>% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 59.28    0.048312         156       309           waitpid
 39.99    0.032594         104       313           clone
  0.18    0.000149           0      7443      3296 access
  0.11    0.000088           0      5936       692 open
  0.09    0.000071           0      2285           munmap
  0.06    0.000046           0       228           send
  0.05    0.000040           0      5761           read
  0.04    0.000036           0      1962           brk
  0.04    0.000032           0      4366           fstat64
  0.04    0.000031           0      1304           write
  0.03    0.000021           0      6972           close
  0.02    0.000019           0      6502           mmap2
  0.02    0.000015           0       131           recvfrom
  0.01    0.000012           0       335           pipe
  0.01    0.000011           0       863           recv
  0.01    0.000010           0      1662       636 stat64
  0.01    0.000009           0       894           fcntl64
</code></pre>

<p>so what kind of <code>waitpid</code> it is doing? I want my fast <code>git-svn</code> back :)</p>
","1","214620",""
"4644380","31118","2011-01-10 06:54:24","49","19961","<git><branch><git-svn><ambiguity>","warning: refname 'xxx' is ambiguous when using git-svn","<p>I am using git as a frontend to Subversion (via git svn).</p>

<p>So, for every svn trunk/branch I have remote branch in git named ""remotes/xxx"". For example ""remotes/trunk"", ""remotes/coolfeature"".</p>

<p>Now I want have one ""default"" local branch for every remote branch, to use it for dcommit. The problem is that I want such branches to be named after Subversion branches, like ""trunk"", ""coolfeature"", so I have the following branches in git:</p>

<pre><code>trunk
coolfeature
remotes/trunk
remotes/coolfeature
</code></pre>

<p>The problem is that every time I reference ""trunk"" or ""coolfeature"" git complains branch name is ambiguous. Not a big deal, but I feel uncomfortable.</p>

<p>The question is, how can I deal with that warning, assuming that simply renaming branches is not what I want to do. What are the best practices for such cases?</p>
","2","31118","0"
"4645337","228589","2011-01-10 09:35:30","6","1033","<git><git-svn><subgit>","decentralized development using git and git-svn","<p>We have 2-3 small teams of 2-3 people. We all use git for local and svn for central repository and git-svn got sync. This is works all the time except when we want to share our code between the team it self.</p>

<p>So we have tried out git pull, this creates lots of conflicts and it does not detect that we are on the same tree. It fetches all the changes (same as clone then pull) 
Of course i dont want to clone full repo. every time I want to share.</p>

<p>Please suggest a better flow.</p>

<ol>
<li>We can't get rid of central svn.</li>
<li>We can't clone every time. </li>
</ol>
","0","228589","0"
"4650336","419735","2011-01-10 18:55:28","4","112","<git><git-svn>","How to specify overlapping rules in git-svn","<p>I need to fetch revisions from SVN into GIT.
I have two types of branches under SVN:</p>

<ol>
<li>Standard branches located in /branches folder under SVN</li>
<li>Some specific branches located under /branches/devs/ folders</li>
</ol>

<p>To fetch both types of branches i have specified the following configuration in svn-remote section:</p>

<pre><code>[svn-remote ""svn""]
    url = https://somecompany.com/product

    fetch = trunk:refs/remotes/trunk
    fetch = tools:refs/remotes/root/tools

    branches = branches/*:refs/remotes/*
    branches = branches/devs/*/*:refs/remotes/devs/*/*

    tags = tags/*:refs/remotes/tags/*
</code></pre>

<p>Unfortunately, for the second type of branches fetch is executed twice.
Once treating devs as an ordinary branch and second time in a right way: working with individual branches of developers.</p>

<p>So far, I manually comment either first or second ""branches"" and specify what revisions to fetch based on what branches were affected by commits.</p>

<p>Could anybody suggest a way to automate (fix) the above somehow?</p>

<p>Thanks,</p>

<p>Serhiy Y</p>
","0","419735","0"
"4651402","570357","2011-01-10 20:53:20","6","2552","<svn><git><git-svn><rebase>","git svn dcommit without rebasing","<p>Our company uses (and supports!) SVN, but I tend to use git. What I want to try is to have git repository - one per project, project developers will be able to pull from this repository (and of course pull from each other if they will want to). But I still want to push all the changes to the SVN, because SVN is being maintained by our tech-support.</p>

<p>I was testing the scenario with following repositories: </p>

<ol>
<li>SVN-repository - this one is maintained by our company and our team should push all changes there at some point  </li>
<li>git-svn-clone - this is git repository cloned from SVN above - all project developers should push their commits here  </li>
<li>git-dev-clone - this is developer's git repository.</li>
</ol>

<p>The only issue with straightforward usage of 'git svn rebase' and 'git svn dcommit' that I've noticed is that after each push from developer's git repository to the git-svn-clone repository I have to rebase developer's repository as soon as changes will be propagated to SVN and rebased. What I want to achieve is to avoid rebasing after each push. </p>

<p>Please note that I'm assuming that every project developer will use only git repository and nobody will use SVN directly.</p>

<p>I was able to achieve this behavior manually by checking out every git commit one by one in 'git-svn-clone' repository after push and committing those changes to the SVN using SVN client. I believe that 'git svn dcommit' does the same but it also syncs back from SVN and changes commit SHA identifiers which forces me to rebase.</p>

<p>P.S.: <code>--no-rebase</code> option for <code>git svn dcommit</code> didn't help since after first commit propagated to SVN <code>git svn dcommit</code> didn't allow me committing more changes to the SVN until previous one was rebased. I've tried this behavior once and probably could overlook something.</p>
","0","570357","0"
"3239759","181150","2010-07-13 17:31:41","191","119557","<git><git-svn>","Checkout remote branch using git svn","<p>I have checked out a svn repository using git svn. Now I need to checkout one of the branches and track it. Which is the best way to do it?</p>
","0","181150","0"
"4664490","339698","2011-01-12 01:12:23","7","4240","<git-svn>","How to fix ""file not found"" on git svn dcommit?","<p>I'm trying to do <code>git svn dcommit</code>, however, one directory continues to fail on me and therefore stops my commit and continue to get this error:</p>

<blockquote>
  <p>Filesystem has no item: File not found: transaction '43999-6', path '/path/to/folder' at /usr/local/git/libexec/git-core/git-svn line 572</p>
</blockquote>

<p>I tried adding the folder back in but i continue to get that error.  can I remove a commit from the tree to bypass this?  Not sure what else to do here.</p>

<p><strong>edit</strong><br>
some of the following don't fully answer my question, but they seem to be in the right direction:</p>

<ul>
<li>issue about <a href=""https://stackoverflow.com/questions/471300/git-switch-branch-without-detaching-head"">tracking</a> and not detaching the HEAD</li>
<li>issue about <a href=""https://stackoverflow.com/questions/4436427/git-svn-rebase-and-dcommit-problem"">rebasing</a></li>
<li>issue about <a href=""https://stackoverflow.com/questions/2710073/can-i-recover-lost-commits-in-a-svn-repository-using-a-local-tracking-git-svn-bra"">recovering commits</a></li>
</ul>

<p>The last issue seems to be what I wanted, but with the size of my repo (last time, took me around a whole work day to checkout the entire thing), and the little amount of work I would have lost by just doing a <code>hard</code> reset (which ultimately seemed to do the trick), I went for the <code>hard</code> reset option.</p>
","2","339698","0"
"4681493","574416","2011-01-13 15:04:21","1","240","<php><git><git-svn><msysgit>","Problem importing project into git","<p>I am new to web development. I just managed to develop an application using cakephp on shared hosting. I am trying to import the project into git. I am new to git. I have all php files. I read through the documentation on importing to git. I have successfully installed git on the local machine. And I am stuck, it says </p>

<blockquote>
  <p>Assume you have a tarball
  project.tar.gz with your initial work</p>
</blockquote>

<p>I assume it is a zipped folder of the project. I have not used svn before. I have all the files in folders. Should I just zip the folders and import it.</p>
","6","574416",""
"3273480","394880","2010-07-17 22:11:57","8","4756","<git><github><git-svn><branch>","Connecting git branch to GitHub fork","<p>I came to git via terminal, not GitHub and I am wondering how I make a connection between the two. </p>

<p>From a checkout I have, I created a branch in terminal by running this command: 
<code>git checkout -b newbranchname</code></p>

<p>From my understanding, GitHub calls this ""forking"". How do I connect the branch on my box to a fork of a checkout on GitHub? </p>

<p>(Thanks ahead of time for your help. My background is about 1.5 years of subversion.)</p>
","0","394880","0"
"4694623","179321","2011-01-14 18:35:35","5","2738","<svn><git-svn>","git-svn after an SVN repository is moved?","<p>We recently moved our SVN server from one data center to another, and the IP of the server has changed.  I used <code>svn switch --relocate old_url new_url</code> to update my actual working copy, and that was happy.</p>

<p>However, I do most of my work in a local git version of the repository (using git-svn, obviously).  After moving the SVN server, I updated the URL for the repo in <code>.git/config</code>, but when I try to use <code>dcommit</code>, I receive this error:</p>

<pre><code>Unable to determine upstream SVN information from HEAD history.
Perhaps the repository is empty. at /home/me/libexec/git-core/git-svn line 520.
</code></pre>

<p>What am I missing?</p>
","0","179321","0"
"4718248","18542","2011-01-17 21:45:40","2","433","<git-svn>","git svn fetch does not fetch a Subversion commit message modified after initial clone","<p>I cloned a large SVN repository (nearly 8,000 commits) and it seems to be OK.</p>

<p>Since then, the commit messages of about 20 Subversion commit messages have been changed to correct a typo.  This was done legitimately.  However, git svn fetch does not pull the updated commit messages.  It still displays the old outdated commit message.</p>

<p>Is there a way to fix this?  Preferably in a clean way and without hacking my local git repository too much?</p>

<p>I've tried git svn fetch -r 1234 (where 1234 is a known revision number).  But no luck.</p>
","1","18542",""
"41119085","7290028","2016-12-13 10:41:59","1","166","<windows><cygwin><git-svn><git-bash><git-extensions>","Unable to authenticate when creating upstream branch using git-svn","<p>I am unable to use git-svn to create a branch on an svn server, using the <code>git svn branch &lt;branchname&gt;</code> command on windows using either git-bash, cygwin or git extensions.</p>

<p>I would like some guidance/suggestions on how to diagnose and debug this issue.</p>

<p>The output on git-bash and cygwin:</p>

<pre><code>$ git svn branch upstream-branch-name
Copying https://***redacted*** at r132578 to https://***redacted***/branches/upstream-branch-name...
Can't create session: Unable to connect to a repository at URL 'https://***redacted***': No more credentials or we tried too many times.
Authentication failed at C:\Program Files\Git\mingw64/libexec/git-core\git-svn line 1199.
</code></pre>

<p>For information, I have cygwin, and TortoiseSVN installed as svn providers on my system.</p>

<p>EDIT1: Additionally, I am able to do <code>git svn rebase</code> and <code>git svn dcommit</code> without any error</p>
","2","7290028","0"
"4729204","5978","2011-01-18 21:22:31","4","361","<git><git-svn>","Incomplete history of a file in git (git-svn)","<p>How should one go about viewing full history of a file's content in git?</p>

<p>A file has a very short history in git, repository synced over git-svn, but a long history in svn. The history in git reaches to the point where the file was moved. To view the history I use the following command:</p>

<pre><code>git log PATH_TO_FILE
</code></pre>

<p>Am I doing it right? Git is supposed to track content not files, I was imagining it would be good at tracking history of files across renames.</p>
","0","5978","0"
"4731529","580871","2011-01-19 03:42:32","4","808","<git><git-svn>","git-svn branching without copying every subdirectory","<p>Our project's trunk looks something like:</p>

<pre><code>trunk/foo
trunk/bar
trunk/baz 
</code></pre>

<p>The subdirectories foo, bar, and baz are actually unrelated to each other, and bar and baz are actually quite huge. How do I create a branch with just foo, such that my branches would look something like: </p>

<pre><code>branches/branch1/foo
branches/branch2/foo
</code></pre>

<p>Right now, what I'm doing is branching the whole trunk, then deleting bar and baz, but I think that would be problematic during the merge since it would try to delete bar and baz. What I'd like is for it to be intelligent enough to know that I just want to work with foo and not do anything with bar or baz.</p>

<p>Secondary question, not as important, what if I want a branch with foo and bar, like:</p>

<pre><code>branches/branch1/foo
branches/branch1/bar
</code></pre>

<p>Would the process for branching these two folders without branching the others be harder?</p>

<p>Edit: 
It's been pointed out to me that I can use svn cp. This works, but I was hoping to work from a git svn repo, and as far as I can tell, the closest analogue git-svn has to svn cp is git svn branch, which automatically handles the copying. Unfortunately, I can't find any option in there that lets me branch just a specific subdirectory.</p>
","0","580871","0"
"22871813","3277112","2014-04-04 19:47:38","5","7551","<git><svn><version-control><git-svn><svn2git>","How do I migrate a flat svn repo to git repo","<p>I have a flat svn repository which looks like:</p>

<pre><code>my_repo/
├── file1.c
├── file2.c
├── file3.c
└── README
</code></pre>

<p>This repo has no branches, or tags and all I am trying to do is convert it to a git repository and maintain the commit history.</p>

<p>I have tried:</p>

<p><code>git svn clone --trunk=/ -A users.txt svn+ssh://user@svn.example.com/projects/my_repo dest_dir</code></p>

<p>Which I assumed would work, however, when I navigate into <code>dest_dir</code> and perform <code>git svn fetch</code>, it doesn't seem to fetch anything. Using <code>git log</code> yields: </p>

<p><code>fatal: bad default revision 'HEAD'</code></p>

<p>If I use <code>svn checkout svn+ssh://user@svn.example.com/projects/my_repo</code>
it returns:</p>

<pre><code>A    my_repo/file1.c
A    my_repo/file2.c
A    my_repo/file3.c
A    my_repo/README
Checked out revision 57.
</code></pre>

<p>So the repository is alive and accessible. </p>

<p>I have tried various tools including <code>subgit</code> which was giving me this error: <code>svn: E170003: 'stat' not implemented</code> and I think this is because the server hosting the repository is using an old version of subversion. I have <strong>no</strong> control over the server so cannot perform an update.</p>

<p>I have also tried using the <code>svn2git</code>, using the command</p>

<p><code>svn2git svn+ssh://user@svn.example.com/projects/my_repo --rootistrunk -authors users.txt --verbose</code></p>

<p>but this was giving me another error:</p>

<p><code>E: 'svn+ssh:/user@svn.example.com/projects/my_repo' is not a complete URL and a separate URL is not specified command failed</code></p>

<p>This stumped me, and I've no idea why it's not working. Basically I was wondering how I go about turning my svn repo into a git repo while maintaining the history. Hope someone can help me out, or point me in the right direction. Never realised it would be so difficult to transfer this simple repo to git! </p>

<p>Thanks</p>
","2","3277112","0"
"3559315","296328","2010-08-24 17:40:45","3","407","<svn><git><git-svn>","git svn imported repository using svn branches","<p>I've cloned a replicated svn repository (svnsync to local file system). All the branches etc. are now available in git.
Now i would like to start working on svn branches </p>

<pre><code>git checkout remotes/B_XYZ
</code></pre>

<p>and doing some commits via git. 
Now i want to change to a different SVN branch via</p>

<pre><code>git checkout remotes/B_ABC
</code></pre>

<p>and doing some changes as well.</p>

<p>And now the final question is: Is it possible to commit the changes i made on the branches (in git) to the original Subversion repository back on the appropriate branches?</p>
","0","296328",""
"22241929","272742","2014-03-07 05:05:23","1","131","<git><svn><git-svn>","Rewrite git-svn repository with '--ignore-paths' after clone","<p>I have big svn repository cloned with <code>git-svn</code> without any excluding/ignoring directories.</p>

<p>Now, I want to exclude one folder from cloned repo.</p>

<p>It is possible to add <code>--ignore-paths</code> to existing git-svn repository? Need to rewrite history to increase free space and accelerate <code>fetch</code>.</p>
","0","272742",""
"3572074","745","2010-08-26 04:36:41","3","3305","<git><git-svn>","git svn dcommit always fails with ""Cannot dcommit with a dirty index.""","<pre><code>$ git --version
git version 1.7.0.3
</code></pre>

<p>I clone an SVN repository, and make a commit:</p>

<pre><code>$ git svn clone --stdlayout http://svn/example/project
$ echo test &gt;&gt; blah.txt
$ git commit -m ""Something""
</code></pre>

<p>When I try and <code>dcommit</code> back to the SVN, I get the following error:</p>

<pre><code>$ git svn dcommit
Cannot dcommit with a dirty index.  Commit your changes first, or stash them with `git stash'.
 at .../git/1.7.0.3/.../libexec/git-core/git-svn line 497
</code></pre>

<p>..despite the branch being seemingly clean:</p>

<pre><code>$ git status
# On branch master
nothing to commit (working directory clean)
</code></pre>

<p>The only place I can see the non-existent ""unstaged changes"" is in <code>gitk</code>, where it says ""Local uncommitted changes, not checked in to index""</p>

<p>Running <code>git stash</code> allows the <code>dcommit</code> to work for some reason:</p>

<pre><code>$ git stash
No local changes to save
$ git svn dcommit
Committing to http://svn/example/project ...
        M       blah.txt
Committed r65913
        M       blah.txt
r65913 = a5547d761108d233211f115429e23ddca73bf4bc (refs/remotes/trunk)
No changes between current HEAD and refs/remotes/trunk
Resetting to the latest refs/remotes/trunk
</code></pre>

<p>I have an alias to run <code>git stash; git svn dcommit; git stash apply</code> - but this is not the best workaround, as it causes merge errors when using actually using the stash</p>
","2","745",""
"4932622","608042","2011-02-08 11:47:05","1","844","<git-svn><conflict><git-rebase>","git rebase --onto causes conflict — why?","<p>I'm trying a</p>

<pre><code>git rebase --onto master myremote/master~21 myremote/master
</code></pre>

<p>to add the latest 21 commits from a remote repository on mine.</p>

<p>What git tells me is that there's a conflict — but how's that possible?</p>

<p>In my understanding it's just taking that 21 commits and applying them on top of my master. How can there be conflicts?</p>

<p>Thanks for help!</p>

<p>I'm doing that btw because somehow I messed up my git-svn repository (the remote), and there's 21 commits which I don't manage to commit to subversion. So I'm trying with a fresh git-svn clone, in which I'm adding those 21 commits.</p>
","0","608042",""
"3585106","430603","2010-08-27 14:24:55","2","701","<branch><git-svn><tracking>","How to recreate a git svn remote tracking branch?","<p>I'm using git as an interface to an SVN repository. Now I've created a SVN branch:</p>

<pre><code>git svn branch my_branch
</code></pre>

<p>This created the directory in my SVN repository, and also created a branch called remotes/my_branch. Then I've deleted that remote tracking branch:</p>

<pre><code>git branch -r -d my_branch
</code></pre>

<p>Now the directory is still there in the SVN repository, but I can't seem to find a way to get the remote tracking branch back. Any idea? I tried</p>

<pre><code>git svn branch my_branch
=&gt; branch test_new_mod_named already exists
</code></pre>

<p>and played around with git svn reset, etc. to no avail.</p>
","2","430603",""
"4947975","60531","2011-02-09 16:56:20","19","3997","<git><git-svn><remote-branch>","How to tell which remote svn branch is a local git branch tracking?","<p>I'm a bit confused about how to commit on several svn branches from different local git branches. In particular, even though I've read many of the relates questions on this topic, there's one specific thing that nobody seems to have explained so far:</p>

<p><em>if I already have a few local branches, how can I tell which remote svn branch they are tracking (if any)?</em></p>

<p>From <a href=""https://stackoverflow.com/questions/192736/how-do-i-make-git-svn-use-a-particular-svn-branch-as-the-remote-repository/696304#696304"">this answer</a> it seems that you can change the branch you want to be tracking, but how to <em>query</em> it?</p>

<p><code>git branch -v</code> doesn't seem to be particularly helpful in this (i.e. no additional information is given). I've also looked into all textual files in <code>.git/</code> but couldn't find anything in there as well.</p>
","0","60531","0"
"3722672","53529","2010-09-15 23:42:59","20","1723","<git><git-svn><dcommit>","What is the origin of the name 'dcommit' in git svn dcommit?","<p>Does <code>dcommit</code> stand for Distributed Commit? Something else?</p>
","0","53529","0"
"3728112","11755","2010-09-16 15:18:49","0","236","<git><git-svn>","Manually Migrating from svn to git","<p>I am trying to migrate my svn repo from svn to git and it keeps on failing, it stops with the following output:</p>

<p>W: -empty_dir: trunk/ncontinuity2.core/extensions</p>

<p>When I do a <code>git branch -a</code>, it shows that it has not moved all the branches and indeed displays some branches that have been previously delted.</p>

<p>I have decide I can live without the history.</p>

<p>Is there anyway I can do this move manualy and recreate my branch structure in git?</p>

<p>I have tried git-svn and git2svn and both do not import my repo correctly, I just want to do it manually now.</p>
","3","11755",""
"4966876","529977","2011-02-11 08:16:25","7","2290","<git><git-svn><git-branch>","restricting git svn to branches","<p>Using git-svn it is quite beautiful to use my local git as a svn client.</p>

<p>Unfortunately it seems not to be possible to restrict git svn to some branches?</p>

<p>got
<code>One '*' is needed in glob: 'branches/v10'</code></p>

<p>when setting up two <code>branches</code> lines in gitconfig with fixed branch paths</p>

<pre><code>url = https://example.com/svn/reps/test
fetch = trunk:refs/remotes/trunk
branches = branches/v10:refs/remotes/v10
branches = branches/v09:refs/remotes/v09
</code></pre>

<p>Is there a way to get around WITHOUT using different SVN remotes (which causes, index will blow up cause branch points are not just ""patches/copies"" from trunk and all the ""trunk"" history will come in again ;(</p>

<hr>

<p><em><strong>EDIT:</em></strong>
<em>To clearify what I intend:
There is a huge SVN repository with n branches. In SVN, I'll checkout just two branches in two different workspaces I need to work for.
In Git, the DVCS aspect will ""clone"" the whole SVN repository, including ALL informations of ALL SVN branches (think about a repository with > 50.000 changesets).
I intended to keep the disk usage as small as possible on my local machine.
Therefore I thought about, set up git for just two specific branches I need (v10 and v09). So I still have the great merge features within this git repository but doesn't need to clone all the stuff I don't need (and never will need to).
Another aspect than ""Disc usage"" is the problem, that cloning the complete SVN repository takes very, very... (did I say very) long!</em></p>

<hr>
","0","529977","0"
"3732179","174584","2010-09-17 01:54:24","5","808","<git-svn>","How can you use git-svn to clone parts of an SVN repo, but still get all the branches","<p>Is there any way to use git-svn to clone only some folders of an SVN repo structure.  I'm trying to clone a repo that has some crazy big binary files and a number of subfolders that are just plain useless.  I've tried using the --ignore-paths option, but my clone seemed to just stall out doing nothing for an extremely long time.  Have any of you managed to make --ignore-paths work?  I can't find much on the webs where anyone else is running into this.  Maybe I'm the only one.</p>
","0","174584","0"
"3733524","11755","2010-09-17 07:48:51","6","1700","<git><git-svn>","git-svn clone or svn2git unexpectedly stopping","<p>I am trying to migrate from git to svn with the following command:</p>

<pre><code>git svn clone --stdlayout https://my_sourcecontrol
</code></pre>

<p>or with git2svn</p>

<pre><code>svn2git --notags https://sourcecontrol -v
</code></pre>

<p>During the migration, it just stops with the following statement:</p>

<pre><code>W: -empty_dir: directory
</code></pre>

<p>When I do a git branch -a</p>

<p>I see it has imported the tags and a number of branches that were deleted some time ago.  Also, it has not imported any of the existing branches only the ones that were deleted some time ago.</p>

<p>Can anyone shed any light on what is going on?</p>
","0","11755","0"
"22395638","251946","2014-03-14 03:35:09","0","669","<git><svn><git-svn><svn2git>","svn to git migration fails","<p>I have a subversion repository that has about 45000 revisions. I am trying to convert it to git but it keeps failing.</p>

<p>I have tried git svn clone, subgit, svn2git and the atlassian provided svn-migration-scripts.jar</p>

<p>git svn clone and the atlassian provide jar usage result in similar errors - perl.exe.dump</p>

<p>subgit gives me an out of memory error</p>

<p>svn2git gives a different error</p>

<p>I am not sure if I am doing something wrong/ if I am not allocating enough resources for the migrtation (memory/CPU etc...). Or, if there is something wrong with my SVN repo that is causing these to fails. </p>

<p>Any suggestions/ ideas on how to troubleshoot these issues? Also, does 45000 revisions make it a large repository?</p>

<p>Thanks</p>
","6","251946",""
"3747574","452151","2010-09-19 21:38:33","1","259","<linux><git><git-svn><clone><fetch>","Clone a git-svn repo by getting all of the svn part from the original svn repo","<p>How can I clone a git repo from my laptop (at home) to a server (at university) while getting most of the repo from a third (svn) repo at another uni that is the main codebase.  I'd like to minimise the amount of home&lt;->uni traffic by maximising uniOne&lt;->uniTwo traffic.  </p>

<p>this is what I have now on Laptop:  </p>

<pre><code>--o--o--o---o---o---o git-svn trunk  
         `--o--o-o--o git mybranch  
</code></pre>

<p>this is what I would like to get on uniOne:  </p>

<pre><code>--o--o--o---o---o---o git-svn trunk &lt;-- from uniTwo  
         `--o--o-o--o git mybranch  &lt;-- from Laptop
</code></pre>

<p>After cloning the repo should be able to pull branches from Laptop.</p>

<p>I have tried: on uniOne: git-svn clone uniTwo, git remote add Laptop, but then git fetch wants to get the whole thing from Laptop.  I thought maybe using git clone --depth x Laptop and then graft them together might work but it still requires all of the source files to be transfered Laptop->uniOne, not just the changes.  I could try to export all patches from Laptop and apply them on top of a fresh svn checkout then get it to track the branch on my Laptop (if that is possible) but it would be easier to wait until I am next at uni and then just clone normally.</p>
","2","452151","0"
"4991304","616069","2011-02-14 10:55:25","4","432","<svn><git><git-svn><ignore>","Using git-svn to ignore a file just in the svn repo?","<p>I'm new to git-svn and I'm trying to mirror an SVN repo in git. However, I'd like to add a readme.txt file for the git repo (show it shows up in places like github) but ignore that file in the SVN repo. Is that possible without making the mirror process (which is currently a simply bash script doing git-svn rebase and git push) really messy?</p>
","1","616069","0"
"4994018","1248","2011-02-14 15:35:07","3","407","<git><zend-framework><git-svn><vendor-branch>","How to replace svn's sub directory vendor branch with git's subtree merge","<p>The old process was the normal <a href=""http://svnbook.red-bean.com/en/1.1/ch07s05.html"" rel=""nofollow"">svn vendor branch</a>, however I only ever copied a sub-directory to the main codebase. So for:</p>

<pre><code>vendors/Zend_Framework/current/library/Zend
</code></pre>

<p>was copied to:</p>

<pre><code>trunk/library/Zend
</code></pre>

<p>I'd then add the new version, tag it and merge the differences between the two library/Zend folders into trunk/library/Zend</p>

<p>How do I do this in Git? </p>

<p>My first thoughts where to create a git clone of the subversion repo using git-svn and then use subtree merge, but I'm not sure how that can be achieved when the target is actually a sub directory of the external repo. To be honest, I'd rather not merge in all the other directories as well, such as documentation and tests.</p>

<p>Am I going to have to create my own git repo based on the <a href=""http://framework.zend.com/svn/framework/standard/tags/release-1.10.7/library/Zend/"" rel=""nofollow"">sub directory of a tag</a>, subtree merge that in, and then manually update that git repo by downloading the new version on top, dealing with new dirs, deleted dirs/files manually myself?</p>
","0","1248","0"
"23124987","1383785","2014-04-17 05:02:47","1","250","<git><svn><git-svn>","Ignore files in SVN using git-svn","<p>I'm on a team who's using SVN, and I'm using git, and so I used <code>git-svn</code> to pull down the repository and do my changes. To take care of ignoring in git, I made a <code>.gitignore</code> file in the main directory of the branch. How do I accomplish the same thing with <code>git-svn</code> such that I tell SVN to ignore certain files and directories, like <code>.gitignore</code>, <code>.git/</code>, etc.? </p>

<p>I did not pull down using SVN, so there is no <code>.svn/</code> directory; I pulled using <code>git svn fetch</code> after initailizing the repo. </p>
","0","1383785",""
"3756169","124486","2010-09-20 23:09:41","10","3193","<svn><git><git-svn>","Why is git-svn is randomly changing my root directory to the parent?","<p>I'm trying to <code>git-svn</code> to work on a private shadowcat svn server.</p>

<pre><code>git svn clone -s http://dev.catalystframework.org/repos/Catalyst/Catalyst-Plugin-ConfigLoader/
Initialized empty Git repository in /home/ecarroll/code/perl/foo/Catalyst-Plugin-ConfigLoader/.git/
Using higher level of URL: http://dev.catalystframework.org/repos/Catalyst/Catalyst-Plugin-ConfigLoader =&gt; http://dev.catalystframework.org/repos/Catalyst
</code></pre>

<p>What doesn't that work? It looks like <a href=""http://dev.catalystframework.org/repos/Catalyst/Catalyst-Plugin-ConfigLoader/"" rel=""noreferrer"">http://dev.catalystframework.org/repos/Catalyst/Catalyst-Plugin-ConfigLoader/</a> has the standard layout.</p>

<p>Is there a sane simple way to get git to pull from an svn repo?</p>
","1","124486",""
"5198331","616727","2011-03-04 19:27:15","15","15033","<svn><git><git-svn>","How can I use ""git-svn"" to checkout a local svn repository?","<p>I'm practicing how to use svn and git.</p>

<p>I created a svn repository on my computer, at ""/Users/name/svnRepo/test"". I am able to use the svn commands to work on this repository.</p>

<p>Then, I tried to use command <strong>""git-svn clone FILE:///Users/name/svnRepo/test/ .""</strong>, and got an error:</p>

<p><strong>Initialized empty Git repository in ...
Bad URL passed to RA layer: Unable to open an ra_local session to URL: Local URL 'FILE:///Users/name/svnRepo/test' does not contain 'file://' prefix at /usr/local/git/libexec/git-core/git-svn line 1775</strong></p>

<p>Could anyone help?</p>
","1","616727","0"
"5202687","261718","2011-03-05 08:42:12","0","79","<git><git-svn>","Is it possible/reasonable to convert a git repo into sub-folder of another git repo?","<p>Say, I got 2 git repos: A and B. Both repos have its own commit history. Now, I would like to embed the whole history of A into B, sub-foldered as BA, and then delete the repo A. That is, the newly repo B now has the full history of A and B in one. Can I do that?</p>

<p>The reason I would like to do this is to merge 2 repos into one by put one repo as another repo's package (the python way), but I also like to have the complete committing history of both repos for tracking~</p>
","0","261718",""
"22527867","178331","2014-03-20 08:55:34","16","10263","<git><git-svn>","Adding svn-remote to existing git repo","<p>I have a git repo, and my company assigned me an empty svn repo to store my code in. So what I'd like to do is just add that svn repo as a remote to my existing git repo and then push to it.</p>
<p>Now, all git-svn tutorials start with &quot;first clone the svn repo, then add code&quot;. That doesn't work for me, since I already have an existing git repo.</p>
<p>I also found some tutorials for importing of svn branches to git repo, but that also is not what I need, I need to import git repo into a svn repo.</p>
<p>I tried to simply do a <code>git svn init http://remote-repo</code>, and then <code>git svn rebase</code>, but that ended with &quot;Unable to determine upstream SVN information from working tree history.&quot;</p>
<p>I guess <a href=""https://stackoverflow.com/questions/19572014/git-svn-how-should-i-init-my-svn-repo-and-syncronise-with-my-existing-git-repo"">this guy</a> had the same problem, but he got no answers. Any ideas on how to do this?</p>
<p>edit:</p>
<p>I did some additional fiddling, but to no avail. I grafted git history onto svn history and did rebase, but it did not fix the problem. Strange. Here is what I did.</p>
<p>After <code>git svn init</code> I did:</p>
<pre><code>git svn fetch # so now I see the svn history in my git repo - I have two unconnected histories in my repo
git checkout svn-git #checking out svn remote
git checkout -b voracle_svn # putting content of the remote to a branch
</code></pre>
<p>Then in gitk I created branch named &quot;graft_child&quot; pointing to my initial git commit (start of my git history) and grafted that onto HEAD of svn branch:</p>
<pre><code>git checkout graft_child # checking out the start of git repo
git reset --mixed voracle_svn #positioning myself to the HEAD of svn remote
git commit -am &quot;Grafting git repo onto svn&quot; #as the message said
</code></pre>
<p>Then I added SHA1 IDs of child and parent commits to .git/info/grafts and restarted gitk. Gitk now shows a single history (albeit with messed up dates), graft was successful. I then rebased the svn branch:</p>
<pre><code>git checkout voracle_svn # checking out the branch which points to the HEAD of svn repo
git rebase master
</code></pre>
<p>This successfully Fast-forwarded voracle_svn to master, which means I should be able to push my repo to SVN. Or so I thought, because</p>
<pre><code>git svn rebase
</code></pre>
<p>again gave me &quot;Unable to determine upstream SVN information from working tree history.&quot;</p>
<p>Now I'm really out of ideas.</p>
","1","178331","0"
"3906012","472259","2010-10-11 12:06:36","0","161","<ruby-on-rails><git><git-svn>","Installing Git - '$ man git' works, but '$ git' returns 'command not found'","<p>Hey there,<br/>
I'm a first time stackoverflow poster, long time reader.</p>

<p>I'm dipping the toes into Rails and I'm trying to get git working.
I've installed git using the OSX git installer, and can see the manual with $man git. But I can't for the life of me get any other commands to work. I've restarted the terminal as well.</p>

<p>I'm on 10.5 if that's any help.</p>

<p>Any suggestions would be fantastic, and <em>very much</em> appreciated, thanks.  </p>
","0","472259",""
"3911496","334019","2010-10-12 03:32:17","0","298","<cron><git-svn>","Unable to rebase git svn repo through cron job","<p>I tried to update git svn repo (git svn rebase) with cron job, but I get this error.</p>

<pre><code>usage: git-cat-file [-t|-s|-e|-p|&lt;type&gt;] &lt;sha1&gt;
error closing pipe: Broken pipe at /usr/local/libexec/git-core//git-svn line 4290
cat-file --batch: command returned error: 129
</code></pre>

<p>I've added git path in cron script, seems not helping.</p>

<pre><code>export PATH=$PATH:/usr/local/libexec/git-core/
</code></pre>

<p>git svn rebase is working properly when I login with bash. What else should I do to make it run as cron job?</p>
","0","334019",""
"23330931","694331","2014-04-28 00:52:24","2","168","<git><svn><migration><git-svn><git-subtree>","Doing git svn rebase after using git-subtree","<p><strong>Introduction</strong></p>

<p>We are moving from Git to SVN using <code>git-svn</code>.</p>

<p>We have a single SVN repository with a large directory tree. A project links to other subprojects using relative paths. The simplified example below has a <code>MainProject</code> that is dependent on <code>SharedProject1</code> and <code>SharedProject2</code></p>

<pre><code>SVN
└── trunk
    ├── MainProject 
    ├── SharedProject1
    └── SharedProject2
</code></pre>

<p>Moving over to Git, we will have one repository per project. We will handle dependencies using <code>git-subtree</code>. So the structure for the <code>MainProject</code> repository would look like:</p>

<pre><code>MainProject
└── Depend
    ├── SharedProject1
    └── SharedProject2
</code></pre>

<p><strong>How the git -> svn move is performed</strong></p>

<p>Each project is cloned to Git repositories using:</p>

<pre><code>git svn clone http://server/svn --trunk=""trunk/MainProject"" MainProject
git svn clone http://server/svn --trunk=""trunk/SharedProject1"" SharedProject1
git svn clone http://server/svn --trunk=""trunk/SharedProject2"" SharedProject2
</code></pre>

<p>In the <code>MainProject</code> we add the SharedProject's with git-subtree:</p>

<pre><code>git subtree add --prefix ""Depend/SharedProject1"" path/to/SharedProject1 master --squash
git subtree add --prefix ""Depend/SharedProject2"" path/to/SharedProject2 master --squash
</code></pre>

<p>After changing the links in MainProject, everything works fine!</p>

<p><strong>The problem with git svn rebase</strong></p>

<p>When some of our developers updates the <code>MainProject</code> in the SVN repository, I want to add the changes to the Git repository for MainProject using:</p>

<pre><code>git svn rebase
</code></pre>

<p>But I get the following error:</p>

<pre><code>First, rewinding head to replay your work on top of it...
Applying: Squashed 'Depend/SharedProject1/' content from commit fdabd7b
Applying: Squashed 'Depend/SharedProject2/' content from commit 38e8c6f
...
Falling back to patching base and 3-way merge...
Auto-merging Properties/AssemblyInfo.cs
CONFLICT (add/add): Merge conflict in Properties/AssemblyInfo.cs
Failed to merge in the changes.
Patch failed at 0002 Squashed 'Depend/SharedProject2/' content from commit 38e8c6f
...
rebase refs/remotes/trunk: command returned error: 1
</code></pre>

<p>Both <code>SharedProject1</code> and <code>SharedProject2</code> (but not <code>MainProject</code>) has a file <code>Properties/AssemblyInfo.cs</code> that git seems to try to merge even though they are not in the same folder.</p>

<p>What am I doing wrong, and how can I get it to work properly?</p>
","0","694331",""
"30264826","47552","2015-05-15 16:52:34","5","1202","<git><git-svn>","How to recover from ""unordered stage entries in index"" error in git","<p>I've just upgraded my <code>git</code> from <code>2.0.5</code> to <code>2.3.6</code>, and I'm now unable to run <code>git svn fetch</code> in one of my repositories:</p>

<pre><code>$ git svn fetch
fatal: unordered stage entries in index
write-tree: command returned error: 128
</code></pre>

<p><code>git status</code> shows a few untracked files but is otherwise clean.</p>

<p>I located the change where this check was introduced, with the summary ""<a href=""https://git.kernel.org/cgit/git/git.git/commit/?id=15999d0be8179fb7a2e6eafb931d25ed65df50aa"" rel=""noreferrer"">read_index_from(): catch out of order entries when reading an index file</a>"" (first appearing in <code>2.2.0</code>), and some <a href=""http://git.661346.n2.nabble.com/PATCH-read-cache-c-Ensure-unmerged-entries-are-removed-td7616733i40.html"" rel=""noreferrer"">mailing list discussion</a> of it that says among other things:</p>

<blockquote>
  <p>I think we have been discussing how to protect broken index file left
  by tools other people wrote, so I wouldn't be so surprised if our
  current toolset does not let you recreate certain breakages ;-)</p>
</blockquote>

<p>I don't recall running any other tools on this repo; it doesn't do much day-to-day other than a long series of <code>git svn fetch</code>es.  (But it's been around for a couple of years so who knows.)</p>

<p>At any rate, what can I do to recover from this situation?  I tried to locate a path with multiple index entries like this but got no results:</p>

<pre><code>$ git ls-files -s | cut -f 2-100 | sort | uniq -c | grep -v '^[ \t]*1 '
</code></pre>
","0","47552",""
"12686027","71208","2012-10-02 07:22:07","4","816","<git><git-svn>","How to find empty branches and tags in git","<p>I've migrated a big svn repository with hundreds of branches and tags, split them into multiple repositories and now i'm looking to check if there are any empty* branches/tags in these repositories that should be deleted before pushing the migration live.</p>

<p>Is there a faster way to find this than having to go to every repository and checkout every branch ?</p>

<hr>

<p>*For the purpose of this question, ""empty branch"" or ""empty tag"" means a branch or tag that points to a commit that contains no files.</p>
","4","71208",""
"12683681","601099","2012-10-02 02:13:25","2","1410","<git><git-svn>","Endless conflict between remote git repo and svn","<p>I'm at my wit's end here with a git-to-svn setup I just created. I've setup a repository with two remote repos, one svn based and the other a remote git:</p>

<pre><code>svn-remote.svn.url=https://subversion.acme.com/svn/sales/portal/trunk
svn-remote.svn.fetch=:refs/remotes/git-svn
remote.origin.url=mottinger@git.tkknow.com:/gitroot/acme-gtm-2-0.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>Once I set this up, I was able to move commits from the git repo to the svn repo like this:</p>

<pre><code>git fetch origin
git rebase origin/master (linearizes commits to svn)

git svn rebase
git svn dcommit
</code></pre>

<p>Everything was all fine, until I decided to test how I'd handle conflicts. I created a foo.dat file and added a line in it from the svn side and made a corresponding file on the git side with a line indicating something to the effect it was from git. I ran <code>git fetch origin</code> and <code>git rebase origin/master</code> to bring the foo.dat file down. That was fine, but an attempt to run <code>git svn rebase</code> resulted in a conflict. Perfectly expected, so I go through the steps of editing the conflict and using svn rebase --continue. But then the chaos begins. After an attempt to run <code>git rebase origin/master</code> to pull down other changes from the repo, I conflict on that same foo.dat file. I've gotten it into a state where if I resolve the conflict for svn, it'll fail for git and vice versa. The most frustrating thing of all, I can't seem to find a way to get the repositories back into a state to revert this mess. For now, I have the luxury of being able to completely blow away repos and try again, but in the future as developers use this, if I get myself into a state like this I'd really like to know how to get out. Any tips on what's going on and how to end the constant merges would be hugely appreciated.</p>

<p>Thanks!</p>
","1","601099","0"
"30313951","1445153","2015-05-18 22:44:34","3","1271","<git><svn><git-svn><smartgit><cherry-pick>","How to preserve original author on cherry-pick smartgit","<p>I'm using smartgit to manage an SVN repo. We have 2 branches, trunk, and release. We are cherry-picking commits from trunk to release as they are ready. How do I set up smartgit to retain the author of the original commit on the cherry pick? Thank you in advance!</p>
","2","1445153","0"
"12700575","586597","2012-10-03 00:58:24","5","7268","<git><project-management><git-svn>","git multiple repository management","<p>I am working on a project where we manage external libs/headers and qa with git. Here is what every developers' directory structure looks like:</p>

<pre><code>~/dev/proj 
~/dev/ext 
~/dev/qa
</code></pre>

<p>proj, ext and qa are <em>different</em> git repositories. Under svn, synchronization of these dirs was simple: a single update under ~/dev would update all of them recursively. With git, we need to do 'git pull' separately for each dir. This is not nice; someone will always forget to update (git pull) one of these dirs and his project will be out of sync (e.g. new qa will not pass with old code). I looked into 'git submodules' and it doesn't provide a single point for 'git pull' to update these three separate modules at the same time [Correction: I was wrong here but please read my answer <a href=""https://stackoverflow.com/a/12715654/281545"">below]</a>.</p>

<p>You could argue that we should have put proj, ext and qa under the same git repository but I thought that would have been against the git philosophy of keeping different concepts in different repositories.</p>

<p>Does anyone have a solution (other than writing a script to do git pull on every dir under ~/dev) to this trivial problem?</p>

<p>Thanks,</p>

<p>Altan</p>
","0","586597","0"
"12710789","795053","2012-10-03 14:37:52","0","665","<git><git-svn>","git svn dcommit one file","<p>I have a git checkout of an svn repository created via git svn clone. I have a complicated series of changes to my local git repository, which I am delaying pushing to the central svn repo. I would like to push a small change to one file. When using the svn client I would do</p>

<pre><code>svn commit foobar.c
</code></pre>

<p>Is there a way to get similar functionality with git?</p>
","0","795053",""
"12718581","130758","2012-10-04 00:02:15","0","132","<eclipse><git><svn><version-control><git-svn>","Regarding git svn with Eclipse projects","<p>Here's the configuration of my svn repo:</p>

<pre><code>branches
  jack
    proj1
    proj2
  hobbes
    proj1
    proj2
trunk
  proj1
</code></pre>

<p>Both <code>proj1</code> and <code>proj2</code> are Eclipse projects. 
I've done a <code>git svn -s clone</code> successfully.
There's a problem, though. <code>git-svn</code> considers <code>trunk</code> to be my main directory (when in the <code>trunk</code> git branch, that is), meaning that having my <code>.gitignore</code> inside <code>proj1</code> won't work. But I need to have <code>.gitignore</code> inside <code>proj1</code>, otherwise when someone checks out from <code>proj1</code> (through <code>svn</code>), <code>.gitignore</code> won't be included!</p>

<p>How to solve this issue?</p>
","0","130758",""
"12742842","1472001","2012-10-05 08:56:10","3","313","<wordpress><git-svn>","How to add a header image to my Wordpress plugin using git-svn?","<p>I'm trying to use the <a href=""http://make.wordpress.org/core/2011/12/21/been-giving-a-lot-of-thought-to-how/"" rel=""nofollow"">header image customization trick</a> that allows a wordpress plugin developer to display a customized header image on his Wordpress directory plugin page.</p>

<p>For that, I need to create a ""assets"" directory in my plugin root directory under svn (at the same level than trunk and branches), and put my image there. You can see the structure in place for <a href=""http://plugins.svn.wordpress.org/wordpress-seo/"" rel=""nofollow"">SEO by Yoast plugin</a>. The problem is that I want to achieve this using git-svn, not svn. </p>

<p>I have setup a git/svn repo and successfully pushed on svn trunk and even created a tag. I can see that the <a href=""http://plugins.svn.wordpress.org/grayscale/"" rel=""nofollow"">assets</a> directory has been created for me on the svn repo, but I cannot figure out how to add a file on the directory.  </p>

<p>The issue is that the ""assets"" directory is outside the svn standard layout and cannot be reached by branching. I think I will have to specify a non-standard layout somehow ?</p>
","4","1472001","0"
"12763789","19347","2012-10-06 20:53:15","3","790","<git><svn><git-svn><msysgit><sasl>","Using git-svn over svn + SASL with encryption","<p>Is it possible to launch git-svn over svn + SASL with encryption? </p>

<p>I've got an error can't establish connection.</p>

<pre><code>C:\a\trunk&gt;git svn clone svn://url/trunk 
Initialized empty Git repository in c:/a/trunk/trunk/.git/ 
Authorization failed: Cannot negotiate authentication mechanism at C:\Program Files (x86)\Git/libexec/git-core\git-svn line 2167
</code></pre>

<p><strong>UPDATE</strong> The issue presents only under Windows.</p>

<p><strong>UPDATE 2</strong> The issue presents only with <a href=""http://msysgit.github.com/"" rel=""nofollow"">msysgit</a>. If you'll <a href=""http://www.celinio.net/techblog/?p=818"" rel=""nofollow"">install git via plain cygwin</a> everything will works fine</p>
","4","19347",""
"12813427","88821","2012-10-10 06:40:54","3","314","<git><svn><git-svn>","git svn workflow: how to use svn remote branches?","<p>I have cloned my svn repo using git, specifying branches and trunk (no tags involved). Then, I ran fetch for a limited range of revisions. Now, I have:</p>

<pre><code>$ git branch
* master
</code></pre>

<p>and</p>

<pre><code>$ git branch -r
  version-2.3.1
  version-2.3.2
  version-2.3.3
  trunk
</code></pre>

<p>So, I understand that these branches are remote branches, and I did read <a href=""http://git-scm.com/book/en/Git-Branching-Remote-Branches"" rel=""nofollow noreferrer"">http://git-scm.com/book/en/Git-Branching-Remote-Branches</a> , but because remote branches are new to me, I'm having a hard time understanding how to use that knowledge in a svn context. One person at this link <a href=""https://stackoverflow.com/questions/728931/how-to-switch-svn-branches-using-git-svn"">How to switch svn branches using git-svn?</a> said to just do:</p>

<pre><code>git reset --hard remotes/branch
git checkout branch
etc
</code></pre>

<p>but the 2nd command, ""git checkout branch"" doesn't apply to me since I don't have any local branches..... </p>

<p>So, now that I've got a bunch of remote branches that correspond to svn branches, what is the recommended workflow for ""svn switch""ing to one of the branches, dcommit'ing, then ""svn switch""ing back to a different branch? I never use trunk, I'm always working on branches.</p>
","0","88821","0"
"12862302","1220606","2012-10-12 15:25:07","4","369","<git><git-svn><patch><msysgit>","msysgit git-am can't apply it's own git format-patch sequence","<p>I'm using <em>msysgit</em> git on windows to operate on central svn repository. I'm using git as
I want to have it's awesome little local branches for everything and rebasing on each other.</p>

<p>I also need to update from central repo often, so using separate svn/git is not an option.</p>

<p>Problem is - <code>git svn --help</code> (man page) says that it is not a good idea to use <code>git merge</code> into <em>master</em> branch (which is set to track from svn's <em>trunk</em>) from local branches, as this will ruin the party and <code>git svn dcommit</code> would not work anymore.</p>

<p>I know that it's not exactly true and you may use <code>git merge</code> if you are merging from 
branch which was properly rebased on <em>master</em> prior merge, but I'm trying to make it safer and actually use <code>git format-patch</code> and <code>git am</code>. We are using code review, so I'm making patches anyway. I also knew about <code>git cherry-pick</code>, but I want to just <code>git am /reviewed/patches/dir/*</code> without actually recalling what commits was corresponding to this patches (without reading patches, that is).</p>

<p>So, what's wrong with <code>git svn</code> and <code>git am</code>? It's simple - <code>git am</code> for a few very hard points is doing <em>CRLF</em> into <em>LF</em> conversion for patches supplied (<code>git-mailsplit</code> is doing this, to be precise), if not rebasing. <code>git format-patch</code> is also producing proper (LF-ended) patches.</p>

<p>As my repo is mostly <em>CRLF</em> (and it should remain so), patches are, obviously, failing due to wrong EOL. Converting diffs to <em>CRLF</em> and somehow hacking <code>git am</code> to prevent it from conversion is not working, too. It will fail if any file was removed or deleted - <code>git apply</code> will complain about expected /dev/null (but he got <code>/dev/null^M</code>).</p>

<p>And if I'm applying it with <code>git am --ignore-space-change --ignore-whitespace</code> that it will
commit LF endings straight to the index, which is also weird. I don't know if it will preserve over commiting into svn (via <code>git svn dcommit</code>) and checking it out and I don't want to try out.</p>

<p>Of course, it's still possible to try hacking around patches to convert only actual diffs, but this is too much hacks for simple task.</p>

<p>So, I wonder, is there really no established way to produce patches and apply them to the same repo on the same system? It just feels weird that <em>msysgit</em> can't apply it's own patches.</p>
","1","1220606",""
"66496273","393748","2021-03-05 16:36:27","1","316","<git><svn><git-svn>","git svn fetch repeatedly fails for no apparent reason","<p><strong>Background</strong></p>
<p>We are planning to do a one-way migration of SVN to Git in Azure DevOps so that we can keep our commit history of messages. As you might expect we did a trial run, after much hair pulling and standing on the shoulders of other colleagues who came before we came up with the list of commands that finally worked after 26 hours of processing.</p>
<p>Those commands are:</p>
<p>Run in Git Bash to get list of all authors from SVN in Git format:</p>
<pre><code>svn log -q | awk -F '|' '/^r/ {sub(&quot;^ &quot;, &quot;&quot;, $2); sub(&quot; $&quot;, &quot;&quot;, $2); print $2&quot; = &quot;$2&quot; &lt;&quot;$2&quot;&gt;&quot;}' | sort -u &gt; authors-transform.txt
</code></pre>
<p>Run in Windows cmd shell as admin, note the copying done is because after many attempts these were created using git ignore commands and git lfs track commands so saved for reuse. Same goes for the git config file, where I tell it explicit SVN tags to process:</p>
<pre><code>git svn init --prefix &quot;&quot; --no-metadata --trunk=Trunk --branches=Branches --tags=Tags https://jeeves/svn/ResourceDirectoryPortal/
git lfs install
copy ..\.gitattributes
copy ..\.gitignore
copy ..\authors-transform.txt
copy ..\config .\.git
git add .gitattributes
git add .gitignore
git commit -m &quot;Preparation&quot;
git svn fetch --log-window-size=2500 -A authors-transform.txt
</code></pre>
<p>Run in Git Bash to create Git tags:</p>
<pre><code>for t in $(git for-each-ref --format='%(refname:short)' refs/remotes/tags); do git tag ${t/tags\//} $t &amp;&amp; git branch -D -r $t; done
</code></pre>
<p>Run in Windows cmd via batch file a series of the following commands to get rid of incorrectly created tags as it was easier to do this than try and fix it and wait another 26 hours of migration time:</p>
<pre><code>git tag -d NameOfTagHere
</code></pre>
<p>We then remove the &quot;SVN&quot; section from /.git/config and delete the /.git/svn folder. After which we run from a Windows cmd shell as admin:</p>
<pre><code>git remote add origin https://AzureDevops.url.here/for-empty-git-repo
git config http.version HTTP/1.1
git push origin --all
git push origin --tags
</code></pre>
<p><strong>Problem</strong></p>
<p>Because we had some SQL Server compressed .BAK files in the repo, for restoring as part of build test, automated integration tests etc... the Azure Git repo took about 11 minutes to clone. Was hoping using Git LFS might make the impact of these files more acceptable, but decided to do another test where by:</p>
<ul>
<li>**/*.bak was added to the .gitignore file</li>
<li>*.bak LFS tracking line was removed from the .gitattributes file</li>
<li>Ran the same set of commands as above but after a random amount of time, but typically in the 1 to 2 hour range, I get one of the following 3 errors that appear with different SVN revisions/files shown as the last line before they occur in the output:</li>
</ul>
<pre><code>ls-tree, command error 127
error closing pipe: Broken pipe at C:/Program Files/Git/mingw64/share/perl5/Git/IndexInfo.pm line 32. at /usr/lib/perl5/vendor_perl/SVN/Ra.pm line 623
rev-parse --git-path svn: command returned error: 127
config svn-remote.svn.tags-maxRev 2062: command returned error: 127
</code></pre>
<p><strong>Theories Tested</strong></p>
<ul>
<li><p>The one thought I had was it might be the AzureDevops workaround I
used for Git LFS to be able to work correctly with larger files, that
is the following command: <code>git config http.version HTTP/1.1</code></p>
<p>I tried again without running that command and still got one of the
above 2 errors.</p>
</li>
<li><p>Subsequent attempts I was just running the git svn fetch command from above in case it was just some transient issue - nope it wasn't!</p>
</li>
<li><p>Latest attempt I emptied the folder and started over, skipped the Azure devops line, it hasn't failed again, yet, but it's only been about an hour.</p>
</li>
</ul>
<p><strong>Stumped</strong></p>
<p>I'm fairly noob-ish when it comes to using Git. I know that it's distributed and that is fundamentally different to SVN. I just don't understand how the same commands can randomly blow up without a more detailed error. The only difference in the SVN repo is that there have been 50-100 more commits</p>
<p><strong>UPDATE:08/03/2021</strong>
Tried running the entire thing via Git Bash as opposed to just some, started getting the 3rd error reported now. I was clutching at straws here. I even tried reducing the log-window-size parameter down from 2500 to 1000 and then to 500. Still no joy.</p>
<p><strong>UPDATE:09/03/2021</strong>
One of our sysadmins looked at the SVN logs and it seems it was being hammer by the same generic user from 2 different machines. I contacted the relevant people responsible for those machines and got one of those maachines stopped from what it was it was doing, so in theory cutting down about 50% of sustained traffic to the SVN server tried again and got error 4 that I added to the list of errors above. So it seems it isn't a timeout issue.</p>
","0","393748",""
"31069316","1574439","2015-06-26 09:14:56","56","60649","<git><github><git-svn><rebase><git-rebase>","Error with git rebase (""could not apply..."")","<p>I'm the administrator of the GitHub repository <a href=""https://github.com/plison/opendial"">https://github.com/plison/opendial</a>. I would like to reduce the number of commits on the repository, since the repository already has a few thousand commits, many of whom are minor debugging changes that could easily be squashed together (especially the ones that are a few years old).</p>

<p>I'm therefore trying to apply rebasing in order to squash together part of my commits. However, I've experience the following issue:</p>

<ol>
<li>When I type e.g. <code>git rebase -i HEAD~10</code>, I get a quite long number of commit lines (much more than 10) in the interactive editor. What could be the reason?</li>
<li>More importantly, once I close the interactive editor to start the rebasing, I systematically get the error message ""error:could not apply ', <strong>even when I do not make any change to the commits</strong> (i.e. if I leave all lines as 'pick', without any modification or reordering).</li>
</ol>

<p>How can I solve these issues? It should be noted that the repository was automatically imported from a previous (SVN) repository hosted on Google Code. The conversion seemed so far to have worked well, but I'm wondering why I get these errors when trying to rebase my commits.</p>
","1","1574439","0"
"13571944","397991","2012-11-26 19:44:14","14","14319","<git><svn><git-svn>","git svn - Unrecognized URL scheme error","<p>I'm getting the following error on attempt to clone svn rep with git svn:</p>

<pre><code>eugene$ git svn clone https://my.site/svn/ here
Initialized empty Git repository in /Users/eugene/Documents/workspace/test/here/.git/
Bad URL passed to RA layer: Unrecognized URL scheme for 'https://my.site/svn' at /usr/local/git/lib/perl5/site_perl/Git/SVN.pm line 148.
</code></pre>

<p><code>svn checkout https://my.site/svn/</code> works just fine.</p>

<p>I've re-run </p>

<pre><code>cpan SVN::Core
</code></pre>

<p>and install finished fine, but still getting the error.</p>
","6","397991","0"
"13594233","1267368","2012-11-27 22:21:53","0","94","<git><svn><merge><git-svn>","git sometimes loses track of 2nd svn merge parent","<p>G'day,</p>

<p>I am using git, svn and git-svn.</p>

<p>I have been using subversion to merge topic branches.</p>

<p>Occasionally, I notice that when I subsequently perform a git svn fetch, the merge info for the second parent is lost to git so in the git history the merge looks like a single, large commit instead of a merge commit which preserves the reference to the second parent. This doesn't always happen, but I haven't been able to determine the precise circumstances that causes it to happen.</p>

<p>Can anyone explain why this happens and what steps can be done to prevent it?</p>
","2","1267368",""
"13606977","279362","2012-11-28 14:07:58","3","2545","<svn><version-control><git-svn>","Fixing git-svn ""File or directory is out of date; try updating""","<p>I'm using git svn to be able to keep on working with Git locally, but push changes to an SVN server remotely.</p>

<p>I did a <code>git svn fetch</code> before doing <code>git svn dcommit</code>. </p>

<p>However, now the latter command gives back </p>

<p><code>Merge conflict during commit: File or directory 'src/path/to/Images' is out of date; try updating: resource out of date; try updating at /usr/libexec/git-core/git-svn line 939</code></p>

<p>I'm working in the Terminal application.</p>

<p>Any ideas about what I could do? Thanks.</p>
","0","279362",""
"13607946","1031087","2012-11-28 14:55:24","10","2060","<git><svn><git-svn>","How to run git svn rebase on all branches","<p>I'm using git-svn to manage a Subversion repository using git. I usually have a large number of git branches at any one time.</p>

<p>I often need to update them to match the latest code in the repository, but find it a pain to run <code>git checkout &lt;branch&gt;; git svn rebase</code> for every branch.</p>

<p>Is there a simpler way of doing this than writing a script (which would need to deal with conflicts)?</p>

<p><strong>EDIT</strong>: Since the slowest part of the process is contacting the subversion server and downloading the updates, it's faster to run <code>git svn rebase</code> on one branch and then <code>git svn rebase --local</code> on the rest. </p>

<p>Is there an even better way?</p>
","2","1031087",""
"13637637","153225","2012-11-30 01:17:49","1","188","<git><git-svn>","""git svn clone"" from almost-standard svn layout","<p>We have a subversion repository that we're migrating to git.</p>

<p>The layout of the svn repository is <em>almost</em> standard, but at some point in the history some idiot developer (okay, it was me) accidentally created a directory, call it ""/foo"", in the repository root instead of trunk.  </p>

<p>""foo"" lived there for a few weeks before being moved to ""/trunk/foo"" where it should have been all along.</p>

<p>Now when I do a ""git svn clone --stdlayout [...]"", I miss the parts of the history that occurred outside the trunk.</p>

<p>Is there a way of ""merging"" the early changes to ""/foo"" into the history of master on git?</p>

<p>*<em>edit *</em> alternatively, is there a way of getting those missing revisions onto a branch?</p>
","0","153225","0"
"66524130","6607220","2021-03-08 04:00:58","3","944","<git><macos><svn><git-svn><apple-m1>","Does Anybody successfully run git-svn on M1 CPU Mac?","<p>I've tried so many ways posted on Homebrew issues.Always fail to run git-svn</p>
<blockquote>
<pre><code>Can't locate SVN/Core.pm in @INC (you may need to install the
SVN::Core module) (@INC contains:
/opt/homebrew/Cellar/git/2.30.1/share/perl5
/Applications/Xcode.app/Contents/Developer/Library/Perl/5.28/darwin-thread-multi-2level
/Library/Developer/CommandLineTools/Library/Perl/5.28/darwin-thread-multi-2level
/Users/admin/perl5/perlbrew/perls/perl-5.32.0/lib/site_perl/5.32.0/darwin-2level
/Users/admin/perl5/perlbrew/perls/perl-5.32.0/lib/site_perl/5.32.0
/Users/admin/perl5/perlbrew/perls/perl-5.32.0/lib/5.32.0/darwin-2level
/Users/admin/perl5/perlbrew/perls/perl-5.32.0/lib/5.32.0) at
/opt/homebrew/Cellar/git/2.30.1/share/perl5/Git/SVN/Utils.pm line 6.
BEGIN failed--compilation aborted at
/opt/homebrew/Cellar/git/2.30.1/share/perl5/Git/SVN/Utils.pm line 6.
Compilation failed in require at
/opt/homebrew/Cellar/git/2.30.1/share/perl5/Git/SVN.pm line 25. BEGIN
failed--compilation aborted at
/opt/homebrew/Cellar/git/2.30.1/share/perl5/Git/SVN.pm line 32.
Compilation failed in require at
/opt/homebrew/Cellar/git/2.30.1/libexec/git-core/git-svn line 23.
BEGIN failed--compilation aborted at
/opt/homebrew/Cellar/git/2.30.1/libexec/git-core/git-svn line 23.
</code></pre>
</blockquote>
<p>Git-SVN do not support M1 Mac?</p>
","0","6607220",""
"13672500","1142881","2012-12-02 18:45:42","2","120","<git><svn><git-svn>","project structure from subversion to git","<p>I have a typical trunk/tags subversion repository structure and now moving to git was wondering what the typical/conventional/known structure is, the same as in subversion? </p>
","0","1142881",""
"13687379","144765","2012-12-03 16:19:01","1","669","<git><git-svn>","How do I continue pulling from subversion from a git clone which was not originally pointing to svn","<p>Given I have created a git repo on machine1 by pointing to svn with <code>git svn clone --trunk=http://foo/project</code><br>
And I keep pulling in new revisions from svn on machine1 with 'git svn rebase'<br>
When I clone the git repo from machine1 to machine2<br>
How do I repoint to svn my git repo on machine2 ???</p>

<p>So far I have done this:<br>
Given I have repointed to svn with <code>git svn init --trunk=http://foo/project</code> on machine2<br>
When I do 'git svn rebase' 
Then nothing happens, prompt just hangs.</p>

<p>When I do 'git svn fetch' 
Then git wants to reimport all of svn revisions as if it's brand new and that takes me 2 hours, but after that <code>git svn rebase</code> works fine.</p>

<p>When I do 'git svn fetch -r XXX' where XXX is the last svn revision id visible in last commit then I get some files from svn but after that <code>git svn rebase</code> just hangs and nothing happens. </p>

<p>I am looking for a procedure to repoint to a subversion trunk to keep pulling in new changes. I do not plan to commit back to SVN at all.</p>

<p>Any ideas?</p>

<p>My env setup:<br>
git-svn version 1.7.9.5 (svn 1.6.17)<br>
git version 1.7.9.5<br>
on linux mint 13</p>
","2","144765","0"
"13699872","427545","2012-12-04 09:40:22","2","178","<git><svn><git-svn>","How can I keep a local svn-git repo in sync with .svn?","<p>I am working on a project that uses SVN as repository which I use in combination with the Netbeans SVN plugin. I found Netbeans SVN diff lacking on showing several diffs below each other and therefore wanted to use <code>git-svn</code> for being able to use <code>git gui</code>.</p>

<p>The problem is now keeping both repositories in sync. My current workflow is:</p>

<ul>
<li><p>Updating (with no local changes):</p>

<pre><code>svn up
git stash -u # include new files too
git svn rebase
git stash drop
</code></pre></li>
<li><p>Comitting:</p>

<pre><code>git commit
git commit ...
git svn dcommit
</code></pre></li>
</ul>

<p>These base cases do work, but it does not work nicely if I have local unstaged/uncomitted changes.</p>

<p>What is a better way to keep the local git-svn and .svn in sync?</p>
","2","427545",""
"13720332","321973","2012-12-05 09:49:58","0","290","<git><git-svn><keyword-expansion>","How to quickly substitute svn keywords in a git-svn repository?","<p>I'm using <code>git-svn</code> on a repository which uses svn keywords like <code>$Revision$</code>, <code>$Id$</code> and <code>$Date$</code>. While in general they don't have to be substituted, it would be helpful to have e.g. the correct SVN revision (obtainable via <code>git svn find-rev $(git log FILENAME | head -n1 | awk ' { print $2 } ')</code> if it's an actual SVN commit) put in a compiled binary. How to achieve this easily?</p>
","5","321973",""
"31261607","585701","2015-07-07 06:47:50","1","66","<git><ssh><git-svn>","Local git repository - are SSH keys needed?","<p>I am using Windows 7, and interested in using git-svn locally, with a remote svn server.</p>

<p>I've installed Git, and found <a href=""http://guides.beanstalkapp.com/version-control/git-on-windows.html"" rel=""nofollow"">this tutorial</a> on working with Git on Windows.</p>

<p>Is the part about SSH keys in the tutorial relevant for me, given that I do not intend to access a remote Git repository?</p>
","2","585701",""
"13731144","422489","2012-12-03 09:59:21","18","5814","<git><svn><git-svn>","How to get a single .gitignore after git svn create-ignore","<p>I have imported SVN repository with Git using:</p>

<pre><code>git svn clone --preserve-empty-dirs --stdlayout svn+ssh://... SVN.git
</code></pre>

<p>It did succeed in the end although on the way it did fail few times and I had to ""restart"" with</p>

<pre><code>git svn fetch
</code></pre>

<p>Yet it seems in the end everything is fine. (Although now when writing I start to wonder whether I should have provided <code>--preserve-empty-dirs</code> in the additional <code>fetch</code>es as well? <strong>EDIT:</strong> <em>No, I should not. See my comment bellow.</em>)</p>

<p>Then I wanted to create <code>.gitignore</code> and so I did with</p>

<pre><code>git svn create-ignore
</code></pre>

<p>And this succeeded as well.</p>

<p>But the end result is less than satisfying. It did generate lots of <code>.gitignore</code> files in many folders. It seems that each time when SVN had a <code>svn:ignore</code> property Git created corresponding <code>.gitignore</code> file.</p>

<p>While I would like to have them merged into a single root <code>.gitignore</code> file. This is possible with git since its far more flexible with ignores allowing to ignore in sub-directories with wildcards (or without them). Any way I think it is possible to automatically transform those ""sub-<code>.gitignore</code>s"" into a single one at the root.</p>

<p>And I would like to have that because ""SVN people"" would not be happy with me committing over twenty <code>.gitignore</code> files...</p>
","2","422489","0"
"13740165","23118","2012-12-06 09:04:26","3","318","<tags><automation><git-svn>","git-svn: automatically importing/creating svn revisions as git tags","<p>I am using git-svn to work with a svn repository. The git <code>master</code> branch is mirroring the svn <code>trunk</code> branch (the only svn branch in use), i.e. there is a one to one relation between elements on the master branch and the trunk branch.</p>

<p>I want to have git tags that corresponds to svn revisions, so that I can do things like for instance <code>git diff r123 workbranch</code> to see what I have done compared to svn revision 123.</p>

<p>The revisions are not tagged when I do <code>git svn rebase</code>, so I have created the following script that I run post svn rebase:</p>

<pre><code>#!/usr/bin/perl 

use strict;
use warnings;

open(PIPE, ""git log master |"");
# Format for the pipe output:
# ...
# commit 6b24b8fdc6a25d35b01140dc1ac054697133423d
# ...
#      git-svn-id: https://server.example.com/svn/project/trunk@594 164096ca-3471-41d1-a9ce-9541462a8c31
# ...
my $commit = """";
my $i = 0;
foreach my $line (&lt;PIPE&gt;) {
    if ($line =~ /^commit ([\da-f]+)/) {
        $commit = $1;
        next;
    }
    next unless $line =~ /^\s+git-svn-id: .*\/trunk\@(\d+) /;
    my $git_svn_id = $1;
    run(""git"", ""tag"", ""-f"", ""r$git_svn_id"", $commit);
    last if $i++ == 20;
}
close(PIPE);

sub run {
    print join(' ', @_), ""\n"";
    return system(@_);
}
</code></pre>

<p>This script gets the job done, but I have to run it manually every time, and I have (arbitrarily) capped it at checking the last 21 revisions so there is a theoretical risk of missing some (but I will see that from the printing).</p>

<p>The question: Is there any way I can automate this so that I just run <code>git svn rebase</code> and all imported revisions will be tagged in git? Any <a href=""http://git-scm.com/book/en/Customizing-Git-Git-Hooks"" rel=""nofollow"">hooks</a> I can use?</p>

<p>PS
Yes, I am aware of svn find-rev, but I want in absolutely no way having to write commands as complicated as <code>git diff $(git svn find-rev r123) $(git svn find-rev r124)</code> instead of just <code>git diff r123 r124</code>.</p>
","2","23118",""
"13766007","760757","2012-12-07 15:24:54","0","325","<git><svn><ldap><git-svn>","Accessing SVN via git-svn, both LDAP-authenticated","<p><a href=""https://stackoverflow.com/questions/7709474/using-ldap-as-auth-method-to-manage-git-repositories"">this question</a> explains how to setup LDAP authentication for git.</p>

<p>Now, is it possible for git-svn script to somehow pass the LDAP authentication token to SVN, which is also using LDAP-backed authentication?</p>

<p>What I would like to achieve is when a git user pushes to git-svn repository (authenticating via LDAP), it automatically commits the change to SVN using the same authentication data.</p>

<p>I don't have access to SVN server-side configuration (would be possible, but it is not trivial).</p>

<p>Our current setup uses git user.name and git-svn server stored passwords to authenticate to SVN, but that is troublesome due to the corporate password change policy (users need to update passwords manually, which they keep forgetting about).</p>
","4","760757",""
"31317357","2889642","2015-07-09 12:20:53","0","83","<git><svn><git-svn>","git svn wont rebase anymore after svn repo renaming","<p>I recently renamed my svn repository with which I was working via git-svn. I thought if I rename the folder in which my git project is living and update the git config where it says <code>url = svn://foo/bar</code> to the new name it would just work, but instead I get following error: </p>

<p><code>Unable to determine upstream SVN information from working tree history</code></p>

<p>What is left to do, to get it working again??</p>
","0","2889642",""
"13839658","1310275","2012-12-12 12:20:21","4","85","<git><git-svn>","No relation between branches after using svn2git","<p>I have converted a SVN project to git using svn2git.
Everything went o.k. except there is no relation between the branches. Each branch starts with the same commits (same SHA1 hash value as the master up to the point, where the branch takes its own commits).</p>

<p>This is how it schould look like:</p>

<pre><code>master branch1  branch2   
  |       |       |
  |       |       |
  |       |-------'
  |       |  
  |-------'
  |
  |
  |     
</code></pre>

<p>This is how it looks right now:</p>

<pre><code>master branch1  branch2   
  |       |       |
  |       |       |
  |       |       |
  |       |       |
  |       |       |
  |       |       |        (same commit hash)
  |       |       |        (same commit hash)
  |       |       |        (same commit hash)
</code></pre>

<p>How can I fix this?</p>

<p>Thank you.</p>

<p>Stefan</p>
","4","1310275","0"
"31793111","324827","2015-08-03 17:18:24","0","123","<git><git-svn>","git svn rebase while others work on my files","<p>I am new to git and I am trying to work with it against my SVN server.
I don't understand the reason to ""git svn rebase"" to get updated. From what I understand, if I update my local repository with the SVN server, commit to GIT (locally) my changes, and than ""git svn rebase"", I might overwrite other users changes on the files I work on.</p>

<p>Do I understand correctly? and if I do, why would I want to use rebase and take such risk (I understand the idea of fast forward, but it sounds really risky)?</p>

<p>Hope I am not missing something basic!</p>
","0","324827",""
"2870506","836","2010-05-20 01:31:11","31","22931","<git><git-svn>","How do I show the SVN revision number in git log?","<p>I'm customizing my git log to be all in 1 line. Specifically, I added the following alias:</p>

<pre><code>lg = log --graph --pretty=format:'%Cred%h%Creset - %C(yellow)%an%Creset - %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
</code></pre>

<p>So, when I run <code>git lg</code>, I see the following:</p>

<pre><code>* 41a49ad - zain - commit 1 message here (3 hours ago)
* 6087812 - zain - commit 2 message here (5 hours ago)
* 74842dd - zain - commit 3 message here (6 hours ago)
</code></pre>

<p>However, I want to add the SVN revision number in there too, so it looks something like: </p>

<pre><code>* 41a49ad - r1593 - zain - commit 1 message here (3 hours ago)
</code></pre>

<p>The normal <code>git log</code> shows you the SVN revision number, so I'm sure this must be possible. How do I do this? </p>
","0","836","0"
"31531432","3983424","2015-07-21 06:01:16","3","332","<git><cygwin><git-svn>","the command git branch for svn-git on cygwin","<p>I use the svn git supported by the Cygwin packages[i.e. setup.exe ].</p>

<p>I tried to create a second local branch on the local repo, and add a new file on the second branch. This new file should be only in the second branch since I haven't merge this branch to the master branch. </p>

<p>however after I checkout to the master branch, the file is there!!??
Any Ideas? Any help will be appreciate~~</p>

<p>my steps are:</p>

<pre><code>git br haha
git co haha
touch a.txt
git add a.txt
git ci a.txt
git co master 
</code></pre>

<p>[I see a.txt is there...]</p>
","0","3983424","0"
"2987389","360091","2010-06-07 06:05:52","4","574","<svn><git><permissions><git-svn>","Using git svn with some awkward permissions","<p>Due to some funky permissions on our client's side that we can't change, we have a project whose hierarchy looks something like:</p>

<ul>
<li><p><strong>projectname/trunk</strong>: foo/, bar/, baz/</p></li>
<li><p><strong>projectname/branches</strong>: branch1/, branch2/ </p>

<ul>
<li><em>(where branch1 and branch2 each contain foo, bar, and baz.)</em></li>
</ul></li>
</ul>

<p>The thing is, I have no permission to access <strong>trunk</strong>, so I can't just do a clone of <strong>project/trunk</strong>. I do have permission to access <strong>branches</strong>.</p>

<p>What I am currently doing is checking out each subdirectory individually via <em>git svn clone</em>, so that each one has their own git repo. I use a script to update/commit them all, but what I would prefer to do is to check them all out under a single repo, and be able to commit changes with a single call to <em>git svn dcommit</em>. Is this possible?</p>

<p>I mentioned the branches hierarchy because if possible, I'd also like to be able to track the branches the way I could if the permissions were more sane.</p>

<p>I've tried permuting a lot of options that sounded useful, but I haven't found one that gives me exactly what I want. I sense that the solution may have something to do with <em>--no-minimize-url</em>, but I'm not even sure about that, as it didn't help me when I tried it.</p>
","0","360091","0"
"2997337","133374","2010-06-08 12:45:14","0","246","<git><merge><git-svn><rebase><dcommit>","git: correct way to merge/rebase with respect to svn dcommit","<p>I have the following situation (mostly because I didn't really thought it through in the beginning -- or more exactly, I thought it shouldn't be a problem the way I did this but now I am stumbled):</p>

<pre><code>... --- A --- B1 --- ... --- Bn

... --- git-svn
</code></pre>

<p>Whereby <code>A</code> and <code>git-svn</code> are at the same state (exactly the same files and file content) but they don't have any common point in history.</p>

<p>And I want:</p>

<pre><code>... --- git-svn --- B1 --- ... --- Bn
</code></pre>

<p>Or at least, when I do the svn dcommit, I want exactly to get the commits <code>B1</code> to <code>Bn</code> and nothing else.</p>

<p>I am not exactly sure how dcommit works. So if I would get something like this:</p>

<pre><code>... ------------ A --- B1 --- ... --- Bn
                  \                    \
... --- git-svn -- A' ----------------- B'
</code></pre>

<p>would the dcommit behave in the way I want? Because if so, that would be easy to get (merging <code>A</code> into <code>git-svn</code> does work just fine because they are content-wise the same).</p>

<p>Or should I do some sort of rebase? But I don't want to rebase <code>A</code> on <code>git-svn</code>, just <code>B1</code> to <code>Bn</code>.</p>
","0","133374","0"
"3002268","15842","2010-06-09 00:08:46","3","369","<git><git-svn>","Recover history from foolish git-svn merge","<p>the players:</p>

<p>master:  the svn branch (actual, not local trackign)
mybranch:  a local branch</p>

<p>My mistake:</p>

<pre><code>[master] git svn rebase
[master] git merge mybranch
[master] git svn dcommit
</code></pre>

<p>I did this <em>twice</em>.</p>

<p>Is there a way I can remedy all this?  I was thinking something like:</p>

<ol>
<li>git checkout --hard [commit before the merging]</li>
<li>git dcommit # that to the svn?</li>
<li>git rebase mybranch</li>
<li>git dcommit</li>
</ol>

<p>But this doesn't seem to work.  </p>

<p>(I know I should a. working from a local tracking branch  and b. have rebased rather than merged)</p>

<p>I'm in the frantic / willing to send beer to respondents stage :)</p>
","0","15842",""
"3009738","123254","2010-06-09 20:36:43","31","11479","<svn><git><git-svn>","What does this svn2git error mean?","<p>I am trying to import my repository from svn to git using svn2git, but it seems like it's failing when it hits a branch. What's the problem?</p>

<pre><code>Found possible branch point: https://s.aaa.com/repo/trunk/project =&gt; https://s.aaa.com/repo/branches/project-beta1.0, 128
Use of uninitialized value in substitution (s///) at /opt/local/libexec/git-core/git-svn line 1728.
Use of uninitialized value in concatenation (.) or string at /opt/local/libexec/git-core/git-svn line 1728.
refs/remotes/trunk: 'https://s.aaa.com/repo' not found in ''

Running command: git branch -l --no-color
* master
Running command: git branch -r --no-color
  trunk
Running command: git checkout trunk
Note: checking out 'trunk'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at f4e6268... Changing svn repository in cap files
Running command: git branch -D master
Deleted branch master (was f4e6268).
Running command: git checkout -f -b master
Switched to a new branch 'master'
Running command: git gc
Counting objects: 450, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (368/368), done.
Writing objects: 100% (450/450), done.
Total 450 (delta 63), reused 450 (delta 63)
</code></pre>
","2","123254","0"
"3124593","291609","2010-06-26 16:25:57","1","128","<git><workflow><git-svn>","Needing a git-svn workflow suggestion to keep personal files away from svn","<p>I am starting to read about git-svn now to use it with a project that use SVN.</p>

<p>I would like to have some files just for me (todo files, scratch code, etc), and I will like to keep track of them in the Git repository. Is it possible to have some files in the Git but not in the SVN repository?</p>

<p>I though about having a branch <code>master</code> that will be synchronized with the SVN repository and keep my work into another branch (<code>work</code>), but then I will need to merge/rebase <code>work</code> into <code>master</code> before pushing changes to SVN and remove these files and commits/log messages related to them... seems unpractical (and I don't know how to do it).</p>

<p>I am also thinking about adding a lot of comments into the code as I am understanding it, but most of them I should keep just for me.</p>

<p>Does anyone have a workflow suggestion to keep some files away from the SVN repository?</p>

<p>Or should I just forget this idea and have another git repository for this?</p>
","0","291609",""
"3127097","158701","2010-06-27 10:40:43","6","4430","<svn><git><authentication><https><git-svn>","git svn: password for svn is not stored","<p>I'm using git against a central remote svn repository using 'git-svn'. The SVN repository uses https with a self-signed certificate. Everything works fine, with one nasty exception. As long as I use directly with  svn, the password is remembered, so it has to by typed only on the first command.</p>

<p>When using git-svn operations (e.g. dcommit, rebase), the password is no longer remembered and manual input is required. After a git-svn oparation, direct svn commands do no longer remember the password too, also prompting each time.</p>

<p>What's going on here? Any hints?</p>

<p>My environment: Ubuntu 10.04 64 bit, git-core and git-svn 1.7.0.4-1</p>
","0","158701",""
"40882979","2516697","2016-11-30 07:53:32","0","33","<git><svn><git-svn>","Two git-svn repository clones, new commits doesn't appear","<p>I have a SVN server <code>S1</code>. I fetched repository on two computers <code>PC1</code> and <code>PC2</code>. I added git commits on <code>PC1</code> thanks to <code>git commit</code> and then put them to server through <code>svn dcommit</code>. Everything looks fine. Changes are on server. Next i went to <code>PC2</code> and tried 'git svn fetch'. It fetched last commit(I hope so because terminal output looked like it fetched), but i don't see last commit in log. Also i doesn't see new changes in files.</p>

<p>Maybe the problem is connected with way that i've made my two repositories. Repository on <code>PC1</code> was made thanks to <code>git svn</code>. But repository on <code>PC2</code> was a hardcopy(through <code>scp -rf</code>) from <code>PC1</code>.</p>

<p>What it's wrong ?</p>
","1","2516697",""
"3131912","1288364","2010-06-28 11:26:18","14","7959","<svn><git><git-svn><git-submodules><svn-externals>","Why are git submodules incompatible with svn externals?","<p>There are lots of webpages out there suggesting <a href=""http://fredericiana.com/2010/01/12/using-svn-repositories-as-git-submodules/"" rel=""nofollow noreferrer"">hackish ways to make svn externals look like git submodules</a>. I have read <a href=""https://stackoverflow.com/questions/571232/svn-external-in-git"">some accounts</a> of what the difference is, but this doesn't seem very fundamental:</p>

<blockquote>
  <p>Git submodules link to a particular commit in another project's repository, while svn:externals always fetch the latest revision.</p>
</blockquote>

<p><strong>Why does this difference make them so fundamentally incompatible?</strong> Isn't there a reasonable default we can assume, such as that most svn:externals point to tags that never move?</p>
","1","1288364","0"
"3135477","338913","2010-06-28 19:23:57","22","3588","<perl><git-svn><compatibility><rebase><endianness>","git svn rebase resulted in ""byte order is not compatible"" error","<p>Following is the error I am getting when I tried 'git svn rebase':</p>

<pre><code>Byte order is not compatible at ../../lib/Storable.pm (autosplit into ../../lib/auto/Storable/_retrieve.al) line 380, at /usr/lib/perl5/5.10/Memoize/Storable.pm line 21
</code></pre>

<p>The version of perl I am running is:</p>

<pre><code>$ perl --version

This is perl, v5.10.1 (*) built for i686-cygwin-thread-multi-64int
(with 12 registered patches, see perl -V for more detail)
</code></pre>

<p>When I searched the web for ""<em>Byte order is not compatible</em>"" and I get numerous hits that shows the Perl doc that says:</p>

<blockquote>
  <p>What this means is that if you have
  data written by Storable 1.x running
  on perl 5.6.0 or 5.6.1 configured with
  64 bit integers on Unix or Linux then
  by default this Storable will refuse
  to read it, giving the error Byte
  order is not compatible. If you have
  such data then you you should set
  $Storable::interwork_56_64bit to a
  true value to make this Storable read
  and write files with the old header.
  You should also migrate your data, or
  any older perl you are communicating
  with, to this current version of
  Storable.</p>
</blockquote>

<p>What I don't know is, how to set this '<code>$Storable::interwork_56_64bit</code>' to true. Can you please let me know how to do it?</p>
","1","338913","0"
"21890862","61624","2014-02-19 19:49:47","1","82","<git><svn><git-svn>","I'm using git-svn and I accidentally typed 'git svn rebase' on my feature branch, what are the ramifications?","<p>I'm using git-svn and I accidentally typed <code>git svn rebase</code> on my feature branch, what are the ramifications?  </p>

<p>Normally I type <code>git svn rebase</code> on master, then I'll type <code>git rebase master feature</code> to update the feature branch.  Is it safe to checkout master, do a <code>git svn rebase</code> and skip the second step?  I'm hoping that will be equivalent to what I normally do.  </p>

<p>I'm afraid I'll cause issues once I <code>merge --ff-only</code> from feature back into master and <code>dcommit</code> master.  </p>
","0","61624",""
"3139934","223977","2010-06-29 10:51:10","20","14782","<git><git-svn><svn>","Per-directory permissions on git","<p>We are considering switching our VCS to either git or subversion. I'd prefer switching to git, but subversion has a nice feature that I don't see in git : per directory access control.</p>

<p>We currently have project1, project2 repositories in cvs, with different permissions.
We'd like to have one single repository, with two directories project1 &amp; project2 with different permissions. Is it doable with git as it is with svn ?</p>

<p>I'm aware of submodules, which could probably achieve that, but the goal for us is to be able to do one single commit with changes in project1 &amp; project2.</p>

<p>We mainly have IP issues, and want to be sure that some people can't read (not just push) some directories.
So, is git up for the challenge or will I have to use git-svn ?</p>

<p>Thanks</p>
","0","223977","0"
"3142418","179438","2010-06-29 15:54:26","2","663","<ruby-on-rails><git><git-svn>","Files in gitignore","<p>I have a repository with a rails app in the production Server.</p>

<p>In the repo there is the .gitignore file:</p>

<pre><code>...
    config/database.yaml 
...
</code></pre>

<p>Every developing client have a cloned repo with different config/database.yaml.</p>

<p>My problem is this:</p>

<p>database.yaml is in .gitignore, then when I run git clone (on the server) the database.yaml will not be created, but I need it.</p>

<p>I thought than I am doing wrong something.
Can you see where is my mistake ?</p>

<p>thank you,
Alessandro</p>
","0","179438",""
"3143333","379282","2010-06-29 17:47:33","7","2953","<git><git-svn>","How can I re-fetch the revisions of a newly specified branch with git-svn","<p>I've fetched a whole repository from SVN up through revision 15000. I realized that I had an extra branch stashed away in a different location. Is there any way to update the .git/config file with the location of this new branch and re-fetch only the revisions pertaining to that branch?</p>
","0","379282","0"
"3159282","336307","2010-07-01 15:30:42","2","453","<svn><git><git-svn>","migrate svn to subdirectory of git","<p>I'd like to replace my svn repository with git. Unfortunately I can't do this in one shot and to cut a long story short, I need to move an svn repository, with history, into a subdirectory of a pre-existing git repository. So I currently have:</p>

<pre>
svn:
svn1/
svn2/

git:
git1/
  .git/
  gita/
</pre>

<p>And I want:</p>

<pre>
svn:
svn1/

git:
git1/
  .git/
  gita/
  svn2/
</pre>

<p>Any ideas on the best way to do this?</p>
","0","336307","0"
"3160976","119592","2010-07-01 19:18:28","79","20897","<svn><git><git-svn>","Should I have to add files to git every time I want to commit?","<p>I'm new to git, coming from SVN world. So far, it seems a lot more useful, but I am still working out the kinks. </p>

<p>Currently, my workflow is like this: </p>

<p>make changes > git add . > git commit > enter log message</p>

<p>What I don't understand is why I seem to have to add all of my files before I commit. They are under version control already? Why does git commit tell me there are no changes added to the commit, but also point out that I have modified files? It says ""Changed but not updated:"". What does this mean??</p>

<p>Sorry if this is easy, I feel like I am missing some overarching point</p>
","1","119592","0"
"3282377","395948","2010-07-19 15:18:35","14","4015","<git><git-svn>","git-svn fetch/rebase failing after trying to repair a corrupted file","<p>I recently had a corrupted object in my repository, pointing on my HEAD (the object was empty) . It happened after interrupting a git-svn command.  Then, I restored my repository by changing manually the refs on this object.</p>

<p>Now, I want to synchronize my git repository with SVN, but git svn fetch returns:</p>

<pre><code>fatal: Invalid revision range 5a5dc92cd3083960fb4828ae387a32cda0554fa8..refs/remotes/a-branch
rev-list --pretty=raw --no-color --reverse 5a5dc92cd3083960fb4828ae387a32cda0554fa8..refs/remotes/a-branch --: command returned error: 128
</code></pre>

<p>5a5dc92cd3083960fb4828ae387a32cda0554fa8 refers to the corrupted object, I would like to say git-svn not to consider this object but another one, but I do not know how to hack this. </p>

<p>If anyone knows where/how git-svn internally stores this value it would be great.</p>

<p>Thank you</p>
","0","395948","0"
"3289811","184326","2010-07-20 12:20:46","5","9006","<svn><git><git-svn><branch><git-branch>","git-svn branching: how to configure git config","<p>a few months ago i configured a git with an svn repository. Until now i only used the svn repository to keep up-to-date with the supplied application on it. But now i also want to commit stuff back. To do this every feature i'm going to commit needs to be in a separate branch. I read about how you should create a new branch etc. But i think i mis-configured my git, i don't have any branch information etc i think i only have the trunk info. This is how my svn repository has been set up in my git config:</p>

<pre><code>[remote ""origin""]
    url = url-of-git-repository
    fetch = +refs/heads/*:refs/remotes/origin/*
[svn-remote ""svn""]
    url = url-of-svn-repository/trunk
    fetch = :refs/remotes/git-svn
[branch ""master""]
    merge = refs/heads/master
    remote = origin
... other branch information below (these are git branches)
</code></pre>

<p>Now as you can see my svn-remote url goes directly to trunk. I read about adding this:</p>

<pre><code>branches = branches/*:refs/remotes/*
</code></pre>

<p>but when i create a new branch then it will be adding it to trunk/branches/. When i don't add the line then it doesn't know what the destination is of the branch. </p>

<p>Any idea how to solve this without breaking the existing branches, code, etc.?</p>

<p>greets,
Daan</p>
","0","184326","0"
"22018328","311420","2014-02-25 15:12:55","0","136","<git><git-svn><git-branch>","push from git/svn repo into a git/branch at specific commit","<p>At one time, the SVN repo was cloned at commit c75e75c. One team worked on git/master, another team worked on SVN. </p>

<ul>
<li>We are using git-svn on the svn repo.</li>
<li>I could merge <code>svn/trunk</code> into <code>git/master</code> but this would terribly
awful. So I prefer to push  all the commits after c75e75c into the <code>branch/app_v2</code></li>
<li>The git/branch is simply a copy of svn/trunk after commit c75e75c.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/zJSDT.png"" alt=""enter image description here""></p>

<p>Tried with <code>git push &lt;remotename&gt; &lt;commit SHA&gt;:&lt;remotebranchname&gt;</code> <a href=""https://stackoverflow.com/questions/3230074/git-pushing-specific-commit"">How can I pushing specific commit to a remote, and not the previous commits?</a> . I created a remote branch/app_v2. But the commits SHA on git-svn and git repo are not the same. Even they have a common history.</p>

<p>How to push a a range of commits ( between c75e75c and HEAD) and push to remote branch ( branch/app_v2 ) ?</p>
","3","311420",""
"3294295","90801","2010-07-20 20:57:23","1","952","<svn><git><git-svn>","git svn clone an entire svn repository","<p>When I clone our svn repo using <code>git svn</code> i pass it arguments to tell it where the head, branches, tags... etc are and it pulls the main code base properly. in addition to trunk and branches we also have directories for: </p>

<ul>
<li>the website, </li>
<li>and one for 3rd-party apps </li>
<li>the build system</li>
<li>a bunch of others. </li>
</ul>

<p>How do I get git-svn to pull these also?  </p>

<p>can I run something like  </p>

<pre><code> git svn clone -T Dev -T website -T build -T other -b Branches -t Tags
</code></pre>

<p>and have the end result end up like:</p>

<pre><code>/git-repo/Dev/
             /productA/
             /projectX/
         /website/
             /http-root/
             /.../
         /build
         /other/ 
             /3rdParty/
</code></pre>

<p>could I do this by creating one new repo and creating sub-projects?<br>
how about making separate repos and then merging them somehow? If I do this what would I put for the branches and tags directory for the ones that are not Dev (Dev is Trunk)?</p>
","5","90801",""
"3295046","174620","2010-07-20 22:56:55","8","4633","<svn><git><git-svn>","Ignore revision on git-svn fetch?","<p>I am trying to move one of my Subversion repositories to Git and am running into an interesting error... In the middle of the git-svn fetch step, I receive the following error:</p>

<pre><code>r9 = d0eff6b2d1eda7fcced16227dbc613732e956f0b (refs/remotes/git-svn)
RA layer request failed: PROPFIND request failed on '/baytn/baytn/trunk': PROPFI
ND of '/baytn/baytn/trunk': 500 Internal Server Error (https://1three.svn.codeba
sehq.com) at C:\Program Files\Git/libexec/git-core/git-svn line 5047
</code></pre>

<p>When I go look at the revision history for the SVN repository I see that Revision #9 was an empty commit, how this happened, I am not sure.</p>

<p>Is there any way for me to get around this error?</p>

<p>Best regards,<br>
Andrew</p>
","1","174620",""
"3299636","363424","2010-07-21 13:20:28","1","284","<git><git-svn>","git-svn-rebase is commiting to an SVN tag","<p>I'm just starting with git and using it to interact with an SVN repository.  The svn repo is in a standard format so I configured my sandbox as</p>

<pre><code>git svn clone &lt;repo&gt; -s
</code></pre>

<p>All seemed fine initially but after several rebases, dcommits and tags I appear to be always commiting to an SVN tag.  Doing a dcommit dry run returns:</p>

<pre><code>$ git svn dcommit --dry-run
Committing to http://proj.badc.rl.ac.uk/svn/badc/users/spascoe/metaconfig/tags/0.1.1 ...
diff-tree a1265119164b79cfb12d28a7059d453fb4eb13f7~1 a1265119164b79cfb12d28a7059d453fb4eb13f7
</code></pre>

<p>My .git/config is:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    autocrlf = false
[svn-remote ""svn""]
    url = http://proj.badc.rl.ac.uk/svn/badc
    fetch = users/spascoe/metaconfig/trunk:refs/remotes/trunk
    branches = users/spascoe/metaconfig/branches/*:refs/remotes/*
    tags = users/spascoe/metaconfig/tags/*:refs/remotes/tags/*
</code></pre>

<p>Poking around in .git isn't helping.  Any idea what's going wrong?</p>
","3","363424",""
"3300626","212376","2010-07-21 14:56:42","2","825","<git><migration><git-svn><git-submodules><git-filter-branch>","How to modify git repository to add submodules in ALL the past revisions?","<p>I migrated my SVN repository successfully with Tags into Git using <code>git svn-clone</code>. However, <code>git svn-clone</code> does not migrate <code>svn:externals</code>. Hence, I decided to modify branch tree using <code>git filter-branch</code>.</p>

<p>For <code>svn:externals</code>, first I created a separate Git repository for each svn:externals and then I tried using the following, but it didn't work.</p>

<pre><code>$ git filter-branch --tree-filter ""git submodule add git@github.com:myAcc/mySubmodule.git mySubmodule"" HEAD
Rewrite a013a219e4294d4ee66b323cf1db9c170d90130a (1/4)fatal: working tree '.' already exists.
Clone of 'git@github.com:myAcc/mySubmodule.git' into submodule path 'common' failed
tree filter failed: git submodule add git@github.com:myAcc/mySubmodule.git mySubmodule
rm: cannot remove `c:/myRepo/.git-rewrite/revs': Permission denied
rm: cannot remove directory `c:/myRepo/.git-rewrite': Directory not empty
</code></pre>

<p>Any idea how to accomplish this? Thanks a lot in advance.</p>
","2","212376","0"
"59770939","3419508","2020-01-16 13:41:30","1","499","<git><svn><git-svn><arcanist>","How to use arc land with a git-svn repository?","<p>There is a svn repository located in <code>https://host:port/codebase/project</code>, without <code>tags</code> or <code>branches</code> subdirectories. Normally using with SVN, people <code>svn checkout https://host:port/codebase/project</code> to get working copy, and using <code>arc diff</code> and <code>arc commit</code> to lunch a code-review or commit changes onto remote SVN server.</p>

<p>I <code>git svn clone https://host:port/codebase/project</code> the repository recently, and got a Git working copy. After coding on the branch named <code>dev-foo</code>, I used <code>arc diff</code> to start a code-review. Arcanist reported an error when I was <code>arc land</code>ing the commits on the branch <code>dev-foo</code>, which had passed the code-review.</p>

<pre class=""lang-sh prettyprint-override""><code>Landing current branch 'master'.
 TARGET  Landing onto ""master"", the default target under git.
 REMOTE  Using remote ""origin"", the default remote under Git.
 Exception 
No pushable remote ""origin"" exists. Use the ""--remote"" flag to choose a valid, pushable remote to land changes onto.
(Run with `--trace` for a full exception trace.)
</code></pre>

<p><code>arc land --trace</code> showed more information, but still did not help me:</p>

<pre class=""lang-sh prettyprint-override""><code> ARGV  '/home/user/.local/opt/arcanist/bin/../scripts/arcanist.php' 'land' '--trace'
 LOAD  Loaded ""phutil"" from ""/home/user/.local/opt/libphutil/src"".
 LOAD  Loaded ""arcanist"" from ""/home/user/.local/opt/arcanist/src"".
Config: Reading user configuration file ""/home/user/.arcrc""...
Config: Did not find system configuration at ""/etc/arcconfig"".
Working Copy: Unable to find .arcconfig in any of these locations: /home/user/gitrepo/project/.arcconfig.
Working Copy: Path ""/home/user/gitrepo/project"" is part of `git` working copy ""/home/user/gitrepo/project"".
Working Copy: Project root is at ""/home/user/gitrepo/project"".
Config: Did not find local configuration at ""/home/user/gitrepo/project/.git/arc/config"".
&gt;&gt;&gt; [0] (+0) &lt;http&gt; http://phab.host/api/user.whoami
&lt;&lt;&lt; [0] (+1,872) &lt;http&gt; 1,871,961 us
&gt;&gt;&gt; [1] (+1,876) &lt;exec&gt; $ git symbolic-ref --quiet HEAD
&lt;&lt;&lt; [1] (+1,884) &lt;exec&gt; 7,125 us
&gt;&gt;&gt; [2] (+1,885) &lt;exec&gt; $ git rev-parse --symbolic-full-name 'master'@{upstream}
&lt;&lt;&lt; [2] (+1,892) &lt;exec&gt; 6,814 us
&gt;&gt;&gt; [3] (+1,892) &lt;exec&gt; $ git --version
&lt;&lt;&lt; [3] (+1,898) &lt;exec&gt; 6,057 us
&gt;&gt;&gt; [4] (+1,899) &lt;exec&gt; $ git ls-remote --get-url 'origin'
&lt;&lt;&lt; [4] (+1,905) &lt;exec&gt; 6,534 us
&gt;&gt;&gt; [5] (+1,906) &lt;exec&gt; $ git symbolic-ref --quiet HEAD
&lt;&lt;&lt; [5] (+1,913) &lt;exec&gt; 6,532 us
Landing current branch 'master'.
&gt;&gt;&gt; [6] (+1,914) &lt;exec&gt; $ git rev-parse --symbolic-full-name 'master'@{upstream}
&lt;&lt;&lt; [6] (+1,921) &lt;exec&gt; 6,660 us
&gt;&gt;&gt; [7] (+1,921) &lt;exec&gt; $ git rev-parse --symbolic-full-name 'master'@{upstream}
&lt;&lt;&lt; [7] (+1,928) &lt;exec&gt; 6,803 us
&gt;&gt;&gt; [8] (+1,929) &lt;exec&gt; $ git symbolic-ref --quiet HEAD
&lt;&lt;&lt; [8] (+1,936) &lt;exec&gt; 6,536 us
&gt;&gt;&gt; [9] (+1,939) &lt;exec&gt; $ git rev-parse --symbolic-full-name 'master'@{upstream}
&lt;&lt;&lt; [9] (+1,946) &lt;exec&gt; 6,509 us
 TARGET  Landing onto ""master"", the default target under git.
&gt;&gt;&gt; [10] (+1,947) &lt;exec&gt; $ git rev-parse --symbolic-full-name 'master'@{upstream}
&lt;&lt;&lt; [10] (+1,954) &lt;exec&gt; 6,478 us
&gt;&gt;&gt; [11] (+1,954) &lt;exec&gt; $ git rev-parse --git-dir
&lt;&lt;&lt; [11] (+1,961) &lt;exec&gt; 6,400 us
 REMOTE  Using remote ""origin"", the default remote under Git.
&gt;&gt;&gt; [12] (+1,961) &lt;exec&gt; $ git remote get-url --push -- 'origin'
&lt;&lt;&lt; [12] (+1,968) &lt;exec&gt; 6,300 us

[2020-01-16 13:39:03] EXCEPTION: (PhutilArgumentUsageException) No pushable remote ""origin"" exists. Use the ""--remote"" flag to choose a valid, pushable remote to land changes onto. at [&lt;arcanist&gt;/src/land/ArcanistGitLandEngine.php:34]
arcanist(head=master, ref.master=cc850163f30c), phutil(head=master, ref.master=cc2a3dbf5903)
  #0 ArcanistGitLandEngine::parseArguments() called at [&lt;arcanist&gt;/src/workflow/ArcanistLandWorkflow.php:253]
  #1 ArcanistLandWorkflow::run() called at [&lt;arcanist&gt;/scripts/arcanist.php:394]
</code></pre>

<p>Would you please let me know how to <code>arc land</code> with a <code>git-svn</code> repository?</p>

<hr>

<p><strong>update for a new clue</strong></p>

<p><a href=""https://secure.phabricator.com/T13293"" rel=""nofollow noreferrer"">This thread</a>, found in <a href=""https://secure.phabricator.com/"" rel=""nofollow noreferrer"">https://secure.phabricator.com/</a>, might help, but I'm not quite understand.</p>
","4","3419508",""
"3309795","30478","2010-07-22 14:15:13","4","861","<git><branch><git-svn>","How to make an existing git branch track a remote SVN branch?","<p>Similar to <a href=""https://stackoverflow.com/questions/520650"">this question</a>, how can I make an existing Git branch track a remote SVN branch?</p>

<p>I often find that I start work in a local branch that I then need to push to an SVN server. Is this possible?</p>
","0","30478",""
"14311594","1975229","2013-01-14 02:22:11","3","120","<git><git-svn>","What to do if I forgot to do a git svn rebase before merge?","<p>I'm using git-svn and have been working on a local topic branch for a series of commits and have run into some trouble merging my changes back into the master.  </p>

<p>These are the steps that have gotten me to where I'm at:</p>

<pre><code>git commit  (on topic branch)
git checkout master
git svn fetch (numerous files pulled down from origin)
git merge &lt;topic branch&gt;
</code></pre>

<p>At this point I had a merge conflict which I fixed and then did a <code>git add &lt;file&gt;</code> to add my fixed file.</p>

<p>Now my <code>git status</code> reports that all of the files (included all those fetched from the server) are changes to be committed.  I forgot to do a <code>git svn rebase</code> which I'm thinking is my problem.</p>

<p>I'm fairly new git in general so I'm not even sure if what I'm seeing is expected behavior but it seems suspect.  Did my forgotten <code>git svn reabse</code> get me into trouble?  What do I do to get out of this potential mess?</p>
","0","1975229","0"
"41141814","3801887","2016-12-14 11:46:34","1","1881","<git><svn><tags><bitbucket><git-svn>","git tag: fatal: Failed to resolve 'refs/remotes/my_tag_name' as a valid ref","<p>I'm currently cloning a svn repo that has standard layout. It currently contains the code corresponding one iOS app and one Android app. Tags indicates when we  froze the code and released it.</p>

<p>I cloned the repo using (the SVN server runs locally on the machine) : </p>

<pre><code>git svn clone --trunk=/trunk --tags=/tags --branches=/branches --authors-file=authors.txt http://localhost/svn/MY_PROJECT MY_PROJECT
</code></pre>

<p>Then in MY_PROJECT,</p>

<pre><code>git remote add origin ssh://git@my_bitbuket_repo.com:7999/test/MY_PROJECT.git
git push -u origin master
</code></pre>

<p>And now, the problematic part. Now I wan't to push the tags.</p>

<pre><code>mylogin@MY_MACHINE MINGW64 ~/workspace/svn2git/MY_PROJECT (master)
$ git branch -a
* master
  remotes/origin/master
  remotes/tags/android_v1.4.2
  remotes/tags/android_v1.5
  remotes/tags/iOS-1.4.1
  remotes/tags/iOS-1.5
  remotes/tags/iOS_Android_1.3
  remotes/tags/ios_v1.6
  remotes/trunk
</code></pre>

<p>So I run the script given <a href=""http://www.sailmaker.co.uk/blog/2013/05/05/migrating-from-svn-to-git-preserving-branches-and-tags-3/#convert-tags"" rel=""nofollow noreferrer"">on this useful page</a>, and here is what I get :</p>

<pre><code>mylogin@MY_MACHINE MINGW64 ~/workspace/svn2git/MY_PROJECT (master)
$ sh convert_remotes_to_tags.sh
fatal: Failed to resolve 'refs/remotes/android_v1.4.2' as a valid ref.
fatal: Failed to resolve 'refs/remotes/android_v1.5' as a valid ref.
fatal: Failed to resolve 'refs/remotes/iOS-1.4.1' as a valid ref.
fatal: Failed to resolve 'refs/remotes/iOS-1.5' as a valid ref.
fatal: Failed to resolve 'refs/remotes/iOS_Android_1.3' as a valid ref.
</code></pre>

<p>So I tested what is given <a href=""https://stackoverflow.com/a/21217914/3801887"">on this particular answer</a> :</p>

<pre><code>mylogin@MY_MACHINE MINGW64 ~/workspace/svn2git/MY_PROJECT (master)
$ cd .git/svn/refs/remotes/tags/android_v1.4.2/

mylogin@MY_MACHINE MINGW64 ~/workspace/svn2git/MY_PROJECT/.git/svn/refs/remotes/tags/android_v1.4.2 (GIT_DIR!)
$ git config --bool core.bare true
</code></pre>

<p>and</p>

<pre><code>mylogin@MY_MACHINE MINGW64 ~/workspace/svn2git/MY_PROJECT (master)
$ cd .git/svn/refs/remotes/tags/

mylogin@MY_MACHINE MINGW64 ~/workspace/svn2git/MY_PROJECT/.git/svn/refs/remotes/tags (BARE:master)
$ git config --bool core.bare true
</code></pre>

<p>But this won't work either (running the same convert-tags-script)...</p>

<p>I tested another script to migrate the tags, here it is :</p>

<pre><code>for tag in `git branch -r --sort=committerdate | grep ""tags/"" | sed 's/.*tags\///'`; do
  git fetch --tags # must fetch tags before pushing more
  git tag -a -m ""Convert Subversion tag"" $tag refs/remotes/origin/tags/$tag
  git push origin $tag
done
</code></pre>

<p>But this won't work as well, having such logs :</p>

<pre><code>fatal: Failed to resolve 'refs/remotes/origin/tags/android_v1.4.1' as a valid ref.
error: src refspec android_v1.4.1 does not match any.
error: failed to push some refs to 'ssh://git@my_bitbuket_repo.com:7999/df/my_project.git'
fatal: Failed to resolve 'refs/remotes/origin/tags/iOS-1.4' as a valid ref.
error: src refspec iOS-1.4 does not match any.
error: failed to push some refs to 'ssh://git@my_bitbuket_repo.com:7999/df/my_project.git'
fatal: Failed to resolve 'refs/remotes/origin/tags/android_v1.4.2' as a valid ref.
error: src refspec android_v1.4.2 does not match any.
error: failed to push some refs to 'ssh://git@my_bitbuket_repo.com:7999/df/my_project.git'
fatal: Failed to resolve 'refs/remotes/origin/tags/iOS-1.4.1' as a valid ref.
error: src refspec iOS-1.4.1 does not match any.
error: failed to push some refs to 'ssh://git@my_bitbuket_repo.com:7999/df/my_project.git'
</code></pre>

<p><strong>Do you have any clue about how to migrate those tags ?</strong></p>
","3","3801887",""
"3460234","303","2010-08-11 15:48:08","3","560","<svn><git><git-svn>","How do I sync a git repository to subversion?","<p>We use several open source libraries that are hosted on github. I want to be able to clone the git repositories and basically push them into our local subversion repository so I can start a CI build internally for them.</p>

<p>How do I set up the connection to the svn server in a git repository that I cloned from github? I understand how to clone out of subversion.. but how do I push a new project into it?</p>
","0","303","0"
"3462345","374953","2010-08-11 20:04:20","1","276","<git><version-control><workflow><git-svn>","Using git-svn, if I have multiple commits not in svn, how do I only push selected commits to svn?","<p>Let's say I have multiple commits in my local git repository that have not been pushed to svn.  For example, these four commits on master.</p>

<pre><code>A &lt;-- B &lt;-- C &lt;-- D
</code></pre>

<p>A is the oldest commit not in svn and D is the newest commit.</p>

<p>How do I use <code>git svn dcommit</code> to only push A and B to svn, but keep C and D only in my local git repository?</p>

<p>Alternate workflows welcome.</p>
","0","374953","0"
"22160660","203118","2014-03-04 00:45:35","5","860","<git><svn><version-control><git-svn>","I want to use git svn to track two remote branches in a Subversion repository. How?","<p>I've been trying all day to configure by hand a git repository locally based on a very large remote subversion repository. It has the default configuration (trunk, branches, tags) but I only want a small portion of the data. </p>

<p>I don't fully understand Git's :refs/remotes/* syntax in .git/config, even though many posts online have explanations for editing it and fetching.  </p>

<p>I have my svn repo stored to an <code>$SVNR</code> environment variable. It's roughly equal to  <code>https://svn.ourserver.com/svn/</code></p>

<p><strong>I want a git <code>master</code> branch to track $SVNR/branches/production and a <code>development</code> branch to track the remote svn trunk.</strong> </p>

<p>I have a huge repo and only want a few revisions, and to construct my git repo to be much smaller subset of the remote SVN repo, like so. Following lots of other sites and posts about doing this, I ended up with this so far as my clone command:</p>

<p><code>git svn clone -r2000:HEAD --prefix=svnrepo/ --authors-file=/Users/phpguru/Sites/authors.txt $SVNR/branches/production gitrepo</code></p>

<p>Now I can <code>cd gitrepo</code> and see my <code>.git/config</code></p>

<pre><code>[svn-remote ""svn""]
    url = https://svn.ourserver.com/svn/projectfoo/branches/production
    fetch = :refs/remotes/svnrepo/git-svn
[svn]
    authorsfile = /Users/phpguru/Sites/authors.txt
</code></pre>

<p>Now lets take that apart for a moment. Why isn't <code>master</code> listed here? Where did <code>git-svn</code> come from? That doesn't exist in my SVN repo. I don't understand why the fetch ref doesn't say <code>fetch = master:refs/remotes/svnrepo/branches/production</code> ? Can I change ""svn"" to ""projectfoo"" as so many examples show? </p>

<p>When I do a <code>git svn info</code> and <code>git branch -a</code> I do see a master branch. It appears that master is properly tracking branches/production as I wanted. </p>

<p>My question is, how do I now create a <code>development</code> branch that is tracking the remote trunk?</p>

<p>I've tried a dozen different ways, including editing .git/config with some logical fetch lines:</p>

<pre><code>fetch = branches/*:refs/remotes/svnrepo/branches/*
fetch = development/*:refs/remotes/svnrepo/trunk/*
</code></pre>

<p>but nothing worked.  </p>

<pre><code>$ git branch --track development remotes/svnrepo/trunk
error: the requested upstream branch 'remotes/svnrepo/trunk' does not exist
hint: 
hint: If you are planning on basing your work on an upstream
hint: branch that already exists at the remote, you may need to
hint: run ""git fetch"" to retrieve it.
hint: 
hint: If you are planning to push out a new local branch that
hint: will track its remote counterpart, you may want to use
hint: ""git push -u"" to set the upstream config as you push.
</code></pre>

<p>Or, </p>

<pre><code>$ git branch development --track remotes/git-svn-trunk
fatal: Cannot setup tracking information; starting point 'remotes/git-svn-trunk' is not a branch.
</code></pre>
","4","203118",""
"3470711","38140","2010-08-12 18:16:37","2","341","<svn><git><git-svn>","Getting git svn to dcommit master to trunk again","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2835791/git-svn-reset-tracking-for-master"">git-svn: reset tracking for master</a>  </p>
</blockquote>



<p>I have a git clone of a Subversion repository that has the standard trunk/branches/tags layout. I cloned the repository using the <code>--stdlayout</code> option. I created a branch using</p>

<pre><code>git svn branch -m ""Creating new branch."" mybranch
</code></pre>

<p>And then checked it out using</p>

<pre><code>git checkout --track -b mybranch remotes/mybranch
</code></pre>

<p>I made a few commits and merged in changes from <code>master</code> (equal to <code>remotes/trunk</code>). I did <code>svn dcommit</code> and it properly committed to the SVN branch <code>branches/mybranch</code>.</p>

<p>I switched back to master using</p>

<pre><code>git checkout master
</code></pre>

<p>I merged in the work from <code>mybranch</code> using</p>

<pre><code>git merge mybranch
</code></pre>

<p>I then tried to push the merge into trunk using <code>svn dcommit</code>, however, git is stuck attempting to push only to <code>branches/mybranch</code> instead of <code>trunk</code>, even though <code>master</code> should be pushing to <code>trunk</code>.</p>

<p>I tried making a small change to <code>master</code>, committing it locally, and then trying <code>svn dcommit</code> again, but it <em>still</em> wants to push to <code>branches/mybranch</code> instead of <code>trunk</code>.</p>

<p>I don't understand what has happened, because <code>master</code> used to be following and would push to <code>trunk</code>, but no longer does after merging in <code>mybranch</code>. How can I get <code>master</code> to once again synchronize with <code>trunk</code> in the SVN repository, and what can I do in the future to avoid <code>master</code> un-following the SVN <code>trunk</code>?</p>
","4","38140",""
"3598355","423912","2010-08-30 06:33:33","15","44994","<git><github><git-svn>","I am not able to push on git?","<p><code>git push origin master</code> shows an error</p>

<blockquote>
  <p>failed to push some refs to '<code>git@github.com:xyz/abc.git'</code>
  To prevent you from losing history, non-fast-forward updates were rejected
  Merge the remote changes before pushing again.  See the 'Note about
  fast-forwards' section of '<code>git push --help</code>' for details.</p>
</blockquote>

<p>What is this? How to recover this?</p>
","1","423912","0"
"59985980","2777063","2020-01-30 12:23:06","0","67","<git><svn><version-control><git-svn>","How to push specific commits to svn using `git svn dcommit` instead of entire set of commits?","<pre><code>commit5 master
commit4
commit3
commit2 git-svn
commit1
</code></pre>

<p>If this the scenario, <code>git-svn</code> is where svn is at. What if I want to push only commit 3 but not commit 4 and 5 yet, how do i achieve this?</p>

<p><code>git svn dcommit --interactive</code> doesn't help. It stops if i say no for commit 4</p>

<p>then it should later look like:</p>

<pre><code>commit5 master
commit4
commit3 git-svn
commit2
commit1
</code></pre>
","0","2777063",""
"3616363","80911","2010-09-01 08:49:48","1","568","<svn><git><git-svn><svn-externals>","Getting started with git-svn with multiple users","<p>In our project we have to commit all changes to the clients svn repository.</p>

<p>I want to move our team to git. So I'm thinking I'll need a central git repository that uses git-svn to push to the svn server.</p>

<p>My questions:</p>

<ul>
<li>Is there a way I can get the central git repository to automatically push to the svn repository, or would a simple cronjob be best?</li>
<li>What's a good way to have the central git repository deal with svn:externals, so that the teammembers don't have to worry about it.</li>
</ul>

<p>Lastly: am I taking the right approach, or is there a better way altogether?  </p>
","0","80911","0"
"3623075","68589","2010-09-02 00:38:13","12","5355","<svn><git><workflow><git-svn>","git-svn and a remote git repo sync","<p>At my workplace we use SVN for version control. I switched to git-svn when I found out about it, and recently I decided to sync some of my private branches to another remote git repo. The workflow, then, consists of rebasing from and pushing to the SVN repo via git-svn, while working on separate private feature branches that are pushed to the remote git repo so I can work on them at home if necessary.</p>

<p>Now, every time I rebase from git-svn, my remote git repo asks to be pulled first. Sometimes, the changes don't merge cleanly when doing a pull, even though, supposedly, the remote repo should contain the same commits that my local one that's synced with svn. Lately I resorted to deleting the remote branches before pushing them again to the remote repo, but that can't be right.</p>

<p>Is git just not set up for this sort of workflow, or am I doing something wrong?</p>

<p>Thank you!</p>
","0","68589","0"
"14729771","916440","2013-02-06 13:02:51","1","296","<git><git-svn>","How to revert multiple revisions with git-svn","<p>I need to revert multiple revisions (e.g. 28693, 28756, 28747) which are already in svn repo.</p>

<p>With svn I can achieve this with one command:</p>

<pre><code>svn merge -c -28693,-28756,-28747 https://repository/trunk
</code></pre>

<p>How to make the same with git-svn?</p>
","0","916440",""
"22410166","3420565","2014-03-14 16:04:27","1","72","<git><git-svn>","How can I add git to an existing project which hasn't been tracked but git has a full history","<p>I have some projects that were tracked in SVN, and then imported to git with a full history. </p>

<p>I would like to be able to use the existing project locally, which only uses svn, while starting to track in git. The versions should be identical, minus any ignored files. I have done the following, but wondered if there was a better way to do this:</p>

<pre><code>git init
git add .
git commit -m ""backing up""
git branch -m backup
git checkout -b master
git remote add origin {repo}
git fetch
git reset --hard origin/master
</code></pre>
","6","3420565","0"
"41405046","4272816","2016-12-31 03:00:32","10","12986","<git><svn><repository><git-svn>","'Can't create session Unable to connect to repo' when trying to migrate svn to git","<p>I'm trying to migrate my local svn repo to git. I've been following the steps on this post: <a href=""https://stackoverflow.com/questions/79165/how-to-migrate-svn-repository-with-history-to-a-new-git-repository?noredirect=1&amp;lq=1"">How to migrate SVN repository with history to a new Git repository?</a></p>

<p>More specifically, <a href=""https://stackoverflow.com/a/79188/365237"">this answer</a> (seemed like the simplest). The problem is whenever I try and fetch from my svn repo I keep getting the :</p>

<p><em>Can't create session: Unable to connect to a repository at URL 'file:///mypathtorepo'</em> </p>

<p>My repo is currently sitting on my local computer which is why I'm using the 'file:///' directory path. I've also tried 'svn://localhost/mypathtorepo' to no avail. How do I fix this? </p>
","5","4272816","0"
"60115341","2660758","2020-02-07 14:24:41","0","105","<git><visual-studio><svn><azure-devops><git-svn>","how to merge svn repos into one git repo with clean history?","<p>I'm trying to merge several svn repo into one git repo and push it on a new remote azure repo. I achieved to do that with git svn and  git subtrees but when I browse the history on Azure DevOps it's messy. All the svn commits are visible on the global history of my repo but not on the files history itself.
If I check one file history, I can't find the related svn commits.
However if I clone my remote azure repo on my local, I can find the proper history in visual studio.
What I see on Azure is different from what I see on my local. How can I get the history right on Azure DevOps ? Hope my problem is understandable.
Thanks.</p>
","2","2660758",""
"3782112","456601","2010-09-23 20:02:00","3","263","<git><svn><git-svn>","How can I recover a Subversion repository from a git-svn copy?","<p>I am pretty sure I have tried everything, figured I would ask all the gurus on here.</p>

<p>Background:
I had an SVN repository on an old linux box.
I accessed this SVN repo with git-svn.
The system's hard drive crashed and the SVN repo was lost.</p>

<p>Question:</p>

<blockquote>
  <p>Since I have an entire backup of the SVN repository on my local machine through me using GIT, I would like to figure out how to publish everything, including previous commits from my local machine to the new SVN server (that now is on a RAID 5 array).</p>
</blockquote>

<p>Currently the projects still have the old SVN information in them, so I need to figure out how to get rid of that as well as migrating the GIT repo to the new SVN repo I set up.</p>

<p>I have contemplated setting up a remote GIT repo, but none of my co-programmers know/want to learn how to use GIT because currently they use the SVN plugin for eclipse and it is ultra easy, even though I am the one who saved everyone by using GIT.</p>
","0","456601","0"
"60121617","2891724","2020-02-07 21:55:33","0","79","<git><git-svn><git-log><git-show>","Switching from svn to git: Can searching logs for svn commit and showing commit in git be done in a one-liner?","<p>I know that you can search for an <code>svn commit</code> after running <code>git svn</code> using the <code>git log</code> command.</p>

<p>Example searching for svn commit r88843:</p>

<pre><code>git log --grep=git-svn-id:.*@88843
</code></pre>

<p>Then you can use the git commit hash  to pass into <code>git show</code></p>

<p>Can this be done in a one-liner?</p>

<p>Similar to (in Linux):</p>

<pre><code>git show &lt; git log --grep=git-svn-id:.*@88843 --pretty=format:%H
</code></pre>
","2","2891724",""
"3788761","117238","2010-09-24 15:46:33","2","673","<svn><git><git-svn>","How do I import an svn repository with a changing directory structure to git?","<p>I have an svn repository where the original structure looked something like:</p>

<pre><code>features/
   trunk/
   branch1/
</code></pre>

<p>But then over time moves to the standard svn structure of:</p>

<pre><code>trunk/
branches/
tags/
</code></pre>

<p>etc.</p>

<p>Is there any way for svn2git or git svn to work with this? Alternatively, is there any way to re write svn history in a non-destructive way so that the repo has the default structure from the start? </p>

<p>It feels like I'm going to have to do this manually (i.e. identify the revisions where the directories change structure and write scripts that apply changes up to those point with a certain structure, and repeat until I have the whole history in the git repo). </p>

<p>That doesn't sound like much fun at all. HELP!</p>
","1","117238","0"
"14773602","2005684","2013-02-08 13:26:18","0","208","<git><svn><git-svn>","Trying to clone SVN repository to local machine using the git svn clone command","<p>Trying to clone <code>SVN</code> repository to local machine using the <code>git svn clone</code> command below:</p>

<pre><code>git svn clone http://svn/java mirror.git`
</code></pre>

<p>But I am getting this error:</p>

<pre>
Did you mean one of these?
        fsck  
        show
</pre>
","5","2005684",""
"50063993","2511938","2018-04-27 13:57:51","0","28","<git><svn><git-svn><legacy>","Git svn - one git repo per folder (pull once)","<p>I have a very old svn repository in front of me and need to commit it to git.
The issue is that I'm looking for a way to create a git per remote folder.</p>

<p>The basic structure of svn is the following :</p>

<ul>
<li><a href=""https://remote-svn/svn/project"" rel=""nofollow noreferrer"">https://remote-svn/svn/project</a></li>
<li>------Project1</li>
<li>-----------------Branches</li>
<li>-------------------------------Branche1</li>
<li>-------------------------------Branche2</li>
<li>-------------------------------Branche3</li>
<li>-----------------Tags</li>
<li>-------------------------------Tag1</li>
<li>-------------------------------Tag2</li>
<li>-------------------------------Tag3</li>
<li>-----------------Trunk</li>
<li>------Project2</li>
<li>...</li>
<li>------Project3</li>
<li>...</li>
<li>------Project4</li>
<li>...</li>
<li>------Project5</li>
<li>...</li>
</ul>

<p>Is is possible to create one git per remote folder with the underlying branches ?</p>
","1","2511938",""
"60033774","2777063","2020-02-03 05:53:35","1","102","<git><svn><version-control><git-svn>","How to Rewrite/Reorder/Squash svn commit history with git svn?","<p>This is after <code>git svn dcommit</code>:</p>

<pre><code>commit5 master git-svn
commit4
commit3
commit2
commit1
</code></pre>

<p>Now I do <code>git rebase -i</code> (using emacs magit but it's the same thing).</p>

<p>I want to squash commit5 with commit3:</p>

<pre><code>pick commit1
pick commit2
pick commit3
squash commit5
pick commit4
</code></pre>

<p>Then once this is done. I get: </p>

<pre><code>Recent commits:
commit4
commit3+5
commit2
commit1

Unpulled svn commits:
commit5
commit4
commit3

Unpushed svn commits:
commit4
commit3+5
</code></pre>

<p>Now if I do <code>dcommit</code> or <code>git svn rebase</code> both end me in the same situation as before:</p>

<pre><code>commit5 master git-svn
commit4
commit3
commit2
commit1
</code></pre>

<p>How do I solve this?</p>
","1","2777063",""
"48905694","102587","2018-02-21 12:15:22","1","467","<git><migration><git-svn>","Recommendations for migrating 10 year old project from svn to git on Windows","<p>I have a repo with 80k commits. Ideally I would like to just keep the last two branches and there related tags. Repo is in standard layout. When using git svn I let it run for 3 days and it was still working on tags directory around 20/250 tags.</p>
","2","102587",""
"48924755","183704","2018-02-22 10:13:23","1","700","<git><git-svn>","How to reset to git-svn remote ""branch""?","<p>How can I reset my local Git branch to the <code>git-svn</code> remote ""branch""?</p>

<p>In Git I can execute the command <code>git reset --hard origin/master</code> to reset my local <code>master</code> branch back to the <code>origin/master</code> remote branch.</p>

<p>How does this work if you use the Git-SVN bridge?</p>
","3","183704",""
"3816869","338913","2010-09-28 20:39:19","0","345","<git><branch><git-svn>","How to create a svn branch from local git branch?","<p>I am using git version 1.7.2.3 and I have the following situation:</p>

<pre><code>  Clone git repo from svn
  |
  *
  * (&lt;= commits to master &amp; corresponding commit to svn)
  *
  *
  |
  master (points to svn HEAD)
  |
  |___ my-branch (no equivalent svn branch)
        |
        *
        * (multiple commits to this branch)
        *
        *
        |
        (Current head of my-branch)
</code></pre>

<p>I would like to know how to push the ""<code>Current head of my-branch</code>"" branch in git on to svn (where it doesn't exist yet).</p>
","3","338913",""
"22460799","720297","2014-03-17 17:09:49","0","210","<git><git-svn>","Undo symbolic ref in git","<p>I am working in local with git and my remote repository is svn so I use the ""git svn"" script to interract with the distant repo.</p>

<p>On the repo there is a ""trunk"" who correspond to my git ""master"", no problem. There are also different branches which refer to various states of stability of the project, here I will just take one and refer to it as ""candidate_vX.Y"". I have local git aliases for this svn branches, which is basically ""candidate"".</p>

<p>Now since candidate_v10.2 had been put in production, a branch for v11.0 had been made on the trunk which was candidate_v11.0 and I needed to redefine my local git alias to make it point to the new branch. I simply applied an internal documentation, which told me to do:</p>

<pre><code>git symbolic-ref refs/heads/candidate_v11.0 refs/heads/candidate
</code></pre>

<p>But I realized afterwards that it was a mistake, the documentation of symbolic-refs says</p>

<pre><code>git symbolic-ref [-m &lt;reason&gt;] &lt;name&gt; &lt;ref&gt;
</code></pre>

<p>and I did the opposite, so how to undo that?</p>
","0","720297",""
"3983334","90801","2010-10-21 00:15:45","10","3162","<svn><git><branch><git-svn>","how to use nested branches through git-svn","<p>our svn server has a trunk called Dev and Branches live in </p>

<pre>
/Branches/Release/1.0/
                 /2.0/
                 /2.3.4/
</pre>

<p>i cloned it with something like <code>git svn clone -T Dev ... -b Branches ...</code><br>
when I run <code>git branch 2.1 remotes/Release/2.1</code> i get:<br>
<code>fatal: Not a valid object name: 'remotes/Release/2.1'.</code></p>

<ul>
<li>How do I refer to the remote branch?</li>
<li>Do I need to re-clone with different args?</li>
</ul>
","3","90801","0"
"60275255","8314501","2020-02-18 06:48:20","1","785","<git-svn>","git svn fetch - Session URL does not match expected session URL","<p>I try to execute git svn fetch on a ubuntu machine that host a svn server. (transfering svn repo to git) git svn response with the error:</p>

<pre><code>Session URL does not match expected session URL: Repository moved permanently to 'http://localhost/svn/repo' at /usr/share/perl5/Git/SVN.pm line 148.
</code></pre>

<p>I am able to access the svn repository over the browser:</p>

<p><a href=""https://i.stack.imgur.com/XUMT1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XUMT1.png"" alt=""enter image description here""></a></p>

<p><code>svn co http://localhost/svn/repo/trunk</code> also works.</p>

<p>The config of my git repository look like:</p>

<pre><code>[svn-remote ""svn""]
    url = http://localhost/svn/repo
    fetch = trunk:refs/remotes/origin/trunk
    branches = branches/branchA/*:refs/remotes/branchA/*
</code></pre>

<p>Last year I do the exact same process without any issues. What should the error message tell to me?</p>

<p><strong>GIT_TRACE=1:</strong></p>

<pre><code>07:30:19.957480 git.c:576               trace: exec: git-svn fetch
07:30:19.957508 run-command.c:646       trace: run_command: git-svn fetch
06:30:20.264901 git.c:344               trace: built-in: git rev-parse --git-dir
06:30:20.270689 git.c:344               trace: built-in: git rev-parse --show-cdup
06:30:20.280345 git.c:344               trace: built-in: git config --bool --get svn.useSvmProps
06:30:20.282850 git.c:344               trace: built-in: git config --get svn.ignorerefs
06:30:20.284977 git.c:344               trace: built-in: git config --bool --get svn.uselogauthor
06:30:20.289744 git.c:344               trace: built-in: git config --int --get svn.logwindowsize
06:30:20.296912 git.c:344               trace: built-in: git config --get svn.repackflags
06:30:20.302913 git.c:344               trace: built-in: git config --bool --get svn.parent
06:30:20.308843 git.c:344               trace: built-in: git config --bool --get svn.noMetadata
06:30:20.313303 git.c:344               trace: built-in: git config --get svn.authorsprog
06:30:20.315443 git.c:344               trace: built-in: git config --bool --get svn.fetchall
06:30:20.325453 git.c:344               trace: built-in: git config --get svn.configdir
06:30:20.327644 git.c:344               trace: built-in: git config --int --get svn.repack
06:30:20.336702 git.c:344               trace: built-in: git config --get svn.includepaths
06:30:20.339225 git.c:344               trace: built-in: git config --get svn.username
06:30:20.341358 git.c:344               trace: built-in: git config --bool --get svn.localtime
06:30:20.350228 git.c:344               trace: built-in: git config --bool --get svn.useSvnsyncProps
06:30:20.352446 git.c:344               trace: built-in: git config --bool --get svn.nocheckout
06:30:20.361053 git.c:344               trace: built-in: git config --get svn.authorsfile
06:30:20.365090 git.c:344               trace: built-in: git config --get svn.ignorepaths
06:30:20.367110 git.c:344               trace: built-in: git config --bool --get svn.followparent
06:30:20.376769 git.c:344               trace: built-in: git config --get svn.revision
06:30:20.378979 git.c:344               trace: built-in: git config --bool --get svn.addauthorfrom
06:30:20.384743 git.c:344               trace: built-in: git config --bool --get svn.noauthcache
06:30:20.389012 git.c:344               trace: built-in: git config --bool --get svn.quiet
06:30:20.391455 git.c:344               trace: built-in: git rev-parse --symbolic --all
06:30:20.444247 git.c:344               trace: built-in: git rev-parse --git-path svn
06:30:20.453089 git.c:344               trace: built-in: git config -l
06:30:20.465201 git.c:344               trace: built-in: git config -l
06:30:20.468112 git.c:344               trace: built-in: git config --bool svn.useSvmProps
06:30:20.474744 git.c:344               trace: built-in: git config -l
Session URL does not match expected session URL: Repository moved permanently to 'http://localhost/svn/repo' at /usr/share/perl5/Git/SVN.pm line 148.
</code></pre>
","3","8314501",""
"49552887","2194007","2018-03-29 09:47:30","0","27","<git><svn><migration><windows-10><git-svn>","How can I migrate a git-svn codebase to another device?","<p>We've been assigned new laptops at work and I'm looking to move my git-svn repository to the new device. The svn server URL or my credentials haven't changed.</p>

<p>The problem is <code>git svn rebase</code> doesn't want to work any more - it just hangs, and <code>git svn fetch</code> fetches everything from revision one. It's an old codebase of over 70k commits and re-importing everything takes at least 3 working days (doing about 20k commits a day), as I've had to rediscover.</p>

<p>I'm aware of shallow cloning but I'm interested in migrating the existing local repository.</p>

<p>Things I've tried:</p>

<ul>
<li>Copy the git repo from the old laptop to the new laptop</li>
<li><code>git clone</code> the old git repo from the new laptop</li>
</ul>

<p>In both cases I made sure my global git config is the same and that svn-remote points to the correct URL.</p>

<p><strong>Clarification</strong>:</p>

<ul>
<li>The code is hosted on svn. I use git-svn privately</li>
<li>I'm looking to migrate my personal copy of the codebase, not the svn repository</li>
</ul>
","0","2194007",""
"49574174","5541331","2018-03-30 12:09:04","-1","281","<git><github><gitlab><bitbucket><git-svn>","Git file commit history rewrite - git rev-list as git log","<p>I have just converted an svn repositry in to git with all history ,all things goes fine.
when I try to get changes in a specific file using  </p>

<pre><code>git log --follow -p -- WEB-INF/pages/search.html
git rev-list --all --full-history --pretty=oneline WEB-INF/pages/search.html
</code></pre>

<p>it show changes in 19 commits. </p>

<p>when I try to look commits without --full-history
    git rev-list --all --pretty=oneline WEB-INF/pages/search.html
or file history in bitbucket or in IntelliJ Idea it show 2 commits. </p>

<p>trying to rewrite history using git-filter-branch and git rev-list to be shown all 19 commit</p>
","0","5541331",""
"4227528","341459","2010-11-19 17:10:05","3","2175","<svn><git><version-control><git-svn>","Why does git-svn clone set 'master' to a random branch?","<p>I'm trying to move our existing svn repository to git. We don't need to do any syncing between the two (so no <code>git svn fetch</code>es or <code>dcommit</code>s) -- we're just moving over and that's it.</p>

<p>I issued this command to create the git repository:</p>

<pre><code>git svn clone -s https://server/repos/my_repo
</code></pre>

<p>This ran fine. However, when I <code>cd</code>'d into the new <code>my_repo</code> directory, the files that were in there were part of one of the branches (not the trunk).</p>

<p>Doing a <code>git branches -a</code> yields:</p>

<pre><code>* master
  modelExperimentalTrunk
  modelExperimentalTrunk@719
  dRefactoring
  reorganise
  stableV396
  tags/v1.0
  trunk
</code></pre>

<p>I am on the master branch, but the files that are in my sandbox are actually from the <code>dRefactoring</code> branch (one of our more obscure branches).</p>

<p>Questions:</p>

<ul>
<li>Why was the <code>master</code> branch not connected to <code>trunk</code>?</li>
<li>Is there a way to reconnect it to <code>trunk</code>? Or can that be done during the <code>git svn clone</code> stage?</li>
<li>Also, given that this is going to be on a server, is there any way <code>git svn</code> can create a --bare repository?</li>
</ul>
","0","341459",""
"4228033","41044","2010-11-19 18:08:21","2","400","<git><git-svn><kerberos>","git-svn dcommit from post-commit with Kerberos","<p>I'd like to have git automatically push local changes to the upstream subversion repo when a commit is made. The SVN repo authenticates using Kerberos, so there's no need to hardcode a password or anything into the commit hook.</p>

<p>The obvious way to do this is to put ""git svn dcommit"" into the post-commit hoook, but unfortunately, git appears to be stripping environment variables (like <code>KRB5CCNAME</code>, which Kerberos needs) before calling the hooks.</p>

<p>So the question is: how do I change the environment variables that are passed to the commit hook?</p>
","5","41044","0"
"4238876","366856","2010-11-21 16:23:32","7","884","<svn><git><git-svn>","git-svn fails to dcommit, even after clean checkout","<p>I'm trying to use git-svn with the following project:</p>

<p><a href=""https://svn.apache.org/repos/asf/commons/sandbox/gsoc/2010/scxml-js/trunk/"" rel=""noreferrer"">https://svn.apache.org/repos/asf/commons/sandbox/gsoc/2010/scxml-js/trunk/</a></p>

<p>Which I've checked out using the standard <code>git svn clone https://svn.apache.org/repos/asf/commons/sandbox/gsoc/2010/scxml-js/trunk/ -T trunk -b branches -t tags</code> invocation.</p>

<p>I started having trouble using git-svn dcommit with git-svn after branching with <code>git checkout -b</code> and not <code>git svn branch</code>, and then merging that local branch back into master, and trying to dcommit. Now, strangely, even after doing a clean checkout, I am still having errors when I attempt to dcommit.</p>

<p>The following rather long trace is representative of my current workflow with git-svn:</p>

<pre><code>jacob@jacob-laptop:~/workspace/gsoc2010/scxml-js$ git svn dcommit
Committing to https://jbeard@svn.apache.org/repos/asf/commons/sandbox/gsoc/2010/scxml-js/trunk ...
        M       build-common.xml
        M       src/xslt/backends/js/StateTableStatechartGenerator.xsl
        M       src/xslt/backends/js/SwitchyardStatechartGenerator.xsl
        M       src/xslt/ir-compiler/appendTransitionInformation.xsl
        M       src/xslt/ir-compiler/copyEnumeratedEventTransitions.xsl
        M       src/xslt/ir-compiler/flattenTransitions.xsl
        M       src/xslt/ir-compiler/nameTransitions.xsl
        M       src/xslt/ir-compiler/numberStatesAndTransitions.xsl
        M       src/xslt/ir-compiler/splitTransitionTargets.xsl
        M       src/xslt/util/language-frontend-module-generators/sh-from-topo-sort-list-generator.xsl
        M       src/xslt/util/topo-sort.xsl
Committed r1037491
W: 502073c202cb1fbe089f0e8b7100304f0aa74729 and refs/remotes/trunk differ, using rebase:
:100644 100644 7930fd690be01a5716490704b5556e2b5cab5ba6 51047f2c8cf1daaa94ae44433a9aa2acc222ae43 M      build-common.xml
:040000 040000 59251941b33bda1376881b33bb2263ea87b1b947 2f5e2586e26bc7d05def065cfcf05327982b81d7 M      src
Current branch master is up to date.
# of revisions changed
before:
 39c6f7e2d7b82cc782b8770d1ddb0ecb4f86e780
c5f360feb3a6bdaab2fb2f48d05e8691824e3231

after:
 502073c202cb1fbe089f0e8b7100304f0aa74729
39c6f7e2d7b82cc782b8770d1ddb0ecb4f86e780
c5f360feb3a6bdaab2fb2f48d05e8691824e3231
 If you are attempting to commit  merges, try running:
         git rebase --interactive --preserve-merges  refs/remotes/trunk
Before dcommitting
jacob@jacob-laptop:~/workspace/gsoc2010/scxml-js$ git svn rebase
        M       build-common.xml
        M       src/xslt/ir-compiler/nameTransitions.xsl
        M       src/xslt/ir-compiler/copyEnumeratedEventTransitions.xsl
        M       src/xslt/ir-compiler/appendTransitionInformation.xsl
        M       src/xslt/ir-compiler/flattenTransitions.xsl
        M       src/xslt/ir-compiler/numberStatesAndTransitions.xsl
        M       src/xslt/ir-compiler/splitTransitionTargets.xsl
        M       src/xslt/backends/js/SwitchyardStatechartGenerator.xsl
        M       src/xslt/backends/js/StateTableStatechartGenerator.xsl
        M       src/xslt/util/language-frontend-module-generators/sh-from-topo-sort-list-generator.xsl
        M       src/xslt/util/topo-sort.xsl
r1037491 = e8d820cfdca882a57fbfa003b9673313be6c9621 (refs/remotes/trunk)
First, rewinding head to replay your work on top of it...
Applying: Changed some paths around so python fronend works.
Applying: Removed test_with_xsltproc.sh. This file no longer needed, as we now generate a bash backend module.
jacob@jacob-laptop:~/workspace/gsoc2010/scxml-js$ git svn dcommit
Committing to https://jbeard@svn.apache.org/repos/asf/commons/sandbox/gsoc/2010/scxml-js/trunk ...
        M       src/python/scxml/cgf/backends/js
        M       src/python/scxml/cgf/xslt
Committed r1037493
W: 8563b885bfca77ccb33a87f56f78e6323af022a9 and refs/remotes/trunk differ, using rebase:
:040000 040000 c33b3d66ecc6735af3241d7f9cee383d2736f614 59251941b33bda1376881b33bb2263ea87b1b947 M      src
Current branch master is up to date.
# of revisions changed
before:
 574e2e495fa12cf3d81004638a06e3315d0abba5

after:
 8563b885bfca77ccb33a87f56f78e6323af022a9
574e2e495fa12cf3d81004638a06e3315d0abba5
 If you are attempting to commit  merges, try running:
         git rebase --interactive --preserve-merges  refs/remotes/trunk
Before dcommitting
</code></pre>

<p>I basically need to do a <code>git svn dcommit</code> followed by a <code>git svn rebase</code> for every commit since the last dcommit. This usually works cleanly, but sometimes fails and requires more manual work.</p>

<p>What could be causing this problem with dcommit, such that even using a clean checkout does not resolve it?</p>
","1","366856","0"
"4243274","323189","2010-11-22 07:37:21","3","6729","<svn><git><git-svn>","Using git svn can I import to git repository last 100 revisions?","<p>I am trying to clone big svn repository to my git repository.
The problem is that rep. is too big and svn clone works too slow.
Is there way to clone only last N revisions?</p>

<p>Something like that:  </p>

<pre><code>git svn clone http://svn/svn/test . (from 200 to 400 revision)
</code></pre>

<p>or maybe something like that:</p>

<pre><code>git svn fetch (20,30,40-50 revisions)
</code></pre>
","1","323189","0"
"4243482","323189","2010-11-22 08:10:00","2","578","<svn><git><git-svn>","Code page using git-svn","<p>When i am cloning repository using git svn i get something like ""єС‚СѓР°Р»СЊРЅРѕРµ"" instead of national characters (russian) in file names .... (i cant read this...) I think git is trying to use UTF-8 instead of UTF-16 while saving files, while windows is using UTF-16. Is there any solution? Can i specify code page to git svn? </p>
","0","323189","0"
"14371839","963396","2013-01-17 03:35:43","2","688","<git><svn><git-svn><wget><git-clone>","How to use git-svn with an SVN repository already on disk?","<p>I'd like to work with a remote SVN repository using git-svn. I've been trying to download it with <code>git svn clone -s REPO_URL</code> but because my network connection isn't great and the repo is quite big, it times out.</p>

<p>So, instead, I plan to checkout the entire repo using an SVN client, and then get git-svn working with it after the fact. But is that possible? <code>git svn clone -s</code> takes takes care of all that stuff (i.e. setting remote URL, importing history, identifying remote branches, etc.), but since I'm downloading the repo another way, I don't know what commands I would need to run to set it up.</p>
","0","963396",""
"14379292","389499","2013-01-17 12:37:17","5","2975","<git><svn><repository><git-svn>","Converting a subversion repository to git, why am I seeing ""fatal: not a valid object name""?","<p>I am seeing the following output while converting a subversion repo to git.</p>

<pre><code>&gt; Found possible branch point: &lt;repo-url&gt;/trunk =&gt; &lt;repo-url&gt;/branches/CMT_PHASE3, 18441
&gt; fatal: Not a valid object name refs/remotes/BlueSimViewer 5.0 20110316 Branch
&gt; cat-file commit refs/remotes/BlueSimViewer 5.0 20110316 Branch: command returned error: 128
</code></pre>

<p>The command I am running to convert the repo is</p>

<pre><code>&gt; git svn clone &lt;repo-url&gt; -A authors-transform.txt --stdlayout converted-git &gt; svnlog
</code></pre>

<p>This process has already converted 117 branches, some with spaces in their names. I first found <a href=""https://stackoverflow.com/questions/11365317/git-svn-clone-fails-fatal-not-a-valid-object-name"">this SO question</a>, which helped me move forward from a previous issue solved by git 1.8.x.x.</p>

<p>Any insight as to the cause of this problem and possible ways of fixing it are greatly appreciated.</p>

<p>I am running git version 1.8.1.1 on an Ubuntu 12.10 server. I am happy
to provide any other information that would be helpful.</p>
","6","389499","0"
"31922894","1161494","2015-08-10 14:58:47","2","895","<git><git-svn><subgit>","During svn to git migration commit authors have wrong email","<p>I have migrated my svn repo to local git. For some reason all authors look like:</p>

<pre><code>userid &lt;userid@localhost&gt; 
</code></pre>

<p>Is there way to change all authors rewriting <strong>""localhost""</strong> to <strong>""myorg.org""</strong> </p>

<pre><code>userid &lt;userid@myorg.org&gt; 
</code></pre>

<p><strong>UPDATE</strong></p>

<p>userid is not fixed.</p>
","7","1161494",""
"67324890","14933312","2021-04-29 20:51:30","1","19","<git><svn><git-svn>","git svn fetch has been running for over 3 weeks but does not show revisions in logs","<p>I have been running <code>git svn fetch</code> for almost a month now and its does show that it is running because it is indeed generating the logs and continuously, however, I do not see any revision numbers in the logs to find out what is it that it's actually fetching. All the previous conversions I did always showed the current revisions that they were fetching but not this one and it has been running for over 3 weeks now.</p>
<p>Below is a snippet from several thousands line of logs it has generated since:</p>
<pre><code>        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/test/test_re_match.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/add_expected_results.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/boostbook_log.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/common.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/dump_toolsets.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/expected_to_1_33_format.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/html/issues_legend.html
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/html/library_developer_legend.html
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/html/library_user_legend.html
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/html/make_tinyurl.html
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/html/master.css
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/html/summary_developer_legend.html
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/html/summary_user_legend.html
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/issues_page.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/links_page.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/produce_expected_results.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/result_page.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/runners.xsl
        D       EP1C/EP1C_0x00010024/Library/Boost/boost_1_56_0/tools/regression/xsl_reports/xsl/v2/summary_page.xsl
        D       EP1C/EP1C_0x00010024/Tools/ELF_To_FW_Image/.cproject
        D       EP1C/EP1C_0x00010024/Tools/ELF_To_FW_Image/.project
        D       EP1C/EP1C_0x00010024/Tools/ELF_To_FW_Image/elf_to_fw_image.cpp
        D       EP1C/EP1C_0x00010024/Tools/LLAC_Serial_Tunnel/Doc/Sequence_Diagram.asta
        D       EP1C/EP1C_0x00010024/Tools/LLAC_Serial_Tunnel/Doc/Sequence_Diagrams.pdf
        D       EP1C/EP1C_0x00010024/Tools/LLAC_Serial_Tunnel/Doc/Serial_over_LLAC-Draft_with_notes.pages
        D       EP1C/EP1C_0x00010024/Tools/LLAC_Serial_Tunnel/Doc/Serial_over_LLAC-Draft_with_notes.pdf
        D       EP1C/EP1C_0x00010024/Tools/LLAC_Serial_Tunnel/Doc/Test_Virtual_Serial_Port/virtual_terminal_application.py
        D       EP1C/EP1C_0x00010024/Tools/LLAC_Serial_Tunnel/Doc/Test_Virtual_Serial_Port/virtual_terminal_host.py
        D       EP1C/EP1C_0x00010024/
        A       EP1C/0x00010024/Tools/LLAC_Serial_Tunnel/Doc/Sequence_Diagram.asta
</code></pre>
<p>When I run <code>ps -ef | grep git</code>, this is what I get as output:</p>
<pre><code>root      8142 20342  0 02:06 ?        00:00:00 git svn fetch
root      8143  8142  0 02:06 ?        00:00:01 /usr/bin/perl /usr/lib/git-core/git-svn fetch
root      8196  8143  0 02:06 ?        00:00:00 git cat-file --batch
root      8365  8143 99 02:07 ?        00:04:12 git update-index -z --index-info
root      8372  8143  0 02:07 ?        00:00:00 git ls-tree -r --name-only -z 042a8d9e3c80f2bdf354ee35a452e38b38958e4a
root      8588  5750  0 02:11 pts/8    00:00:00 grep git
</code></pre>
<p>P.S. I have gone through enough answer till now to know that git-svn is not the best of the tool to use for one time migration from SVN to GIT and I should have used some other tool(s) like sv2git as mentioned in the answer <a href=""https://stackoverflow.com/a/41864351/14933312"">here</a>. So, lets not go to suggestions on that as I don't want to use a new tool and wait for another week or so.</p>
<p>Any help is appreciated. Thanks in advance!</p>
","1","14933312",""
"14862672","2005684","2013-02-13 20:39:42","-2","70","<git><git-svn>","How to i remove a folder from my project in git for good?","<p>How to i remove a folder from my project in git for good?</p>

<p>I keep deleted this folder and I want it removed from the repo</p>

<p>but it keeps coming back... how do I tell git to remove a folder for good</p>
","0","2005684",""
"32309556","1048630","2015-08-31 10:50:54","1","48","<git><svn><github><version-control><git-svn>","Migrating svn subfolder from multiple branches to different git branches","<p>I am facing a problem migrating subfolders in an svn branch to a git branch with its history my hierarchy looks something like this:</p>

<pre><code>/temp
    /project1
        trunk/
        branches/
            /subfolder1
                /subfolder1.1
                    /want-to-migrate-folder
                /subfolder1.2
                    /same-want-to-migrate-folder
            /subfolder2
        tags/
    /project2
    /project3
</code></pre>

<p>I tried using this command:</p>

<p>git svn clone --branches=/subfolder1.1/want-to-migrate-folder --authors-file=authors.txt path/to/svn/repo/project1/branches/subfolder1 git-repo-name</p>

<p>But I ended up with a branch for every subfolder in the ""want-to-migrate-folder""
and what i expected is the whole ""want-to-migrate-folder"" to be there and change when i switch branches according to each branch configuration.</p>

<p>I've been looking online but I couldn't manage to find an appropriate configuration to allow me to do so, any suggestions?</p>
","3","1048630",""
"14877493","1536485","2013-02-14 14:52:35","32","1842","<linux><git><svn><git-svn><vpn>","git-svn rejected Basic challenge now that VPN is required","<p>I have been using <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-svn.html"" rel=""noreferrer"">git-svn</a> for a few months now as an interface to the SVN repository for my company.</p>

<p>However, about a week ago my company changed their policy such that SVN is only reachable if connected by way of Cisco VPN.</p>

<p>I have no trouble connecting to VPN on my Linux Mint VM (which is where I do my coding), but I am now no longer able to pass authentication when I, for example, run <code>git svn dcommit</code> to checkin code changes.</p>

<p>I have tried:</p>

<ul>
<li><code>rm -rf ~/.subversion</code>, to get rid of any saved SVN authentication credentials and force it to take new ones, but this seems to have no effect, nor does it ever prompt me for fresh credentials, surprisingly.</li>
<li>starting in a freshly created directory and running <code>git svn clone</code> to initiate a new link to the SVN repository, but with the same authentication failures.</li>
</ul>

<p>Here is what I see when running <code>git svn dcommit</code> or <code>git svn clone</code>:</p>

<pre><code>$ git svn dcommit
Committing to https://&lt;redacted&gt;:2443/svn/LS/branches/PRODUCTION-SUPPORT-1/ls-policygen ...
WARNING: gnome-keyring:: couldn't connect to: /tmp/keyring-wCQwzG/pkcs11: No such file or directory
Authorization failed: OPTIONS of 'https://&lt;redacted&gt;:2443/svn/LS/branches/PRODUCTION-SUPPORT-1/ls-policygen': authorization failed: Could not authenticate to server: ignored NTLM challenge, rejected Basic challenge (https://&lt;redacted&gt;:2443) at /usr/local/libexec/git-core/git-svn line 943
</code></pre>

<p>The <code>gnome-keyring</code> warning has always been present, and never stopped commits before VPN was required.</p>
","6","1536485","0"
"14875658","2005684","2013-02-14 13:12:26","8","10723","<git><git-svn>","How to use git-svn clone to only get the HEAD revision from a Subversion repository?","<p>How to use <code>git svn clone</code> to only get the HEAD revision from a Subversion repository?</p>

<p>I been trying </p>

<pre><code>git svn clone -s http://svn/java/&lt;projectname&gt;
</code></pre>

<p>but I been getting a lot of empty directory and I tried everything. So know I would like to do a clone of just the head in subversion... Can this be done?</p>
","0","2005684","0"
"32315402","2588486","2015-08-31 16:04:23","2","860","<git><git-svn>","git: checkout work-tree branch from outside","<p>Git Version:  2.5.1.<strong>windows</strong>.1 (via git-scm.com)</p>

<p>Setup:</p>

<pre><code>Main Repo:    Branch_A -&gt; commit -&gt; commit -&gt; commit -&gt; commit
                             \
Worktree:                     -&gt; Branch_B -&gt; commit -&gt; commit
                                     \
                                      -&gt; local Branch_C -&gt; commit
</code></pre>

<p>I created a second work-tree via</p>

<pre><code>git worktree add /C/repos/testbranch Branch_B
</code></pre>

<p>which worked fine</p>

<p>Now what I want to do is switch the worktree's branch back to branch Branch_B from outside after creating local branches (like Branch_C) in the worktree and commiting to them.
Following <a href=""https://stackoverflow.com/questions/6073507/git-checkout-branch-from-outside"">this</a> I've tried the following:</p>

<p>Checked out branch is Branch_C with one additional commit over Branch_B</p>

<pre><code>git --work-tree=/C/repos/testbranch/ --git-dir=/C/repos/testrepo/.git/ checkout Branch_B
</code></pre>

<p>But the output I get is:</p>

<pre><code>error: Your local changes to the following files would be overwritten by checkout:
    bla &lt;-- My test file which is COMMITTED and UNCHANGED in Branch_C
Please, commit your changes or stash them before you can switch branches.
Aborting
</code></pre>

<p>I tried doing this from different directories, tried adding/omitting --git-dir and some other things - nothing seems to work. What am I doing wrong?</p>

<p>Edit: Checking out the branch via</p>

<pre><code>git checkout Branch_B
</code></pre>

<p>while in /C/repos/testbranch/ works fine.</p>

<hr>

<p>Background: The repo I'm using is cloned from an SVN repo. What I'm trying to achieve is automating the process of ""svn rebase""ing with ANT (&lt;exec&gt; task). The first step is to checkout the branch that points to a branch on the SVN repository. Unfortunately, just using <code>checkout</code> in the ANT task fails with <code>not a git repository: $SECOND_WORKTREE_DIR</code>.</p>

<p>Steps: </p>

<ol>
<li>checkout $orig_branch</li>
<li>git svn fetch</li>
<li>(optional) git svn find-rev revision of latest build (might not be the last commit)</li>
<li>git rebase $svn-branch_build-rev $orig_branch</li>
</ol>
","0","2588486","0"
"50151449","6155053","2018-05-03 09:24:59","1","87","<version-control><gitignore><git-svn><ignore>","Exclude .git* files from git-svn dcommit","<p>I've just started using <code>git-svn</code> to allow for more fine-grained branching and committing than I'd be able to use with the remote, controlled-by-another-company svn repo we're working in.</p>

<p>I've now set up my <code>.gitignore</code> and <code>.gitattributes</code> files for the branch, in my workspace, and I would prefer to be able to submit (and thus track) them in my local git repo. However, when <code>dcommit</code>ting my changes -/hardback to svn, those files must not be submitted back into the svn repo.<br>
I can't just ignore the folder they're in either, however, because of course they're in the root of the workspace.</p>

<p>Does anyone have a solution? (apart from ignoring them in the git-svn branch, sym-/hardlinking them in from another location and adding them to a git repo there--it's overcomplicated and they're not in their corresponding branch anymore then, so I'd rather try to find a different solution in that case). </p>
","3","6155053","0"
"14896481","42968","2013-02-15 14:07:48","3","229","<git><git-svn><multiple-repositories>","Can one git repository track subversion and git remotes?","<p>I am going to set up extra repositories for our partners, while our official repository is svn, I am free to pick the repositories for our partners.</p>

<p>My idea is to clone our repo with git-svn(let's call this repo1), create git repositories for our partners and track partner repositories with repo1. Is this possible without making git-svn confused?</p>
","0","42968",""
"14942068","102441","2013-02-18 17:34:15","0","198","<git><git-svn>","Unable to git svn fetch, with a custom tunnelling scheme, after a branch is created","<p>I'm trying to fetch the lastest svn history, where a branch was created. This is what happens:</p>

<pre><code>$ g svn fetch
Found possible branch point: svn+xyz://.../trunk =&gt; svn+xyz://.../branches/etc, 24743
Found branch parent: (refs/remotes/svn/etc) dd98917ae2e94e414a2a70cf7dfb032aadf89d43
Following parent with do_switch
Malformed network data: Malformed network data at /usr/lib/perl5/site_perl/Git/SVN/Ra.pm line 307
</code></pre>

<p>Looking near line 307 of <code>lib/perl5/site_perl/Git/SVN/Ra.pm</code>, I see the comment:</p>

<pre><code># this requires SVN 1.4.3 or later (do_switch didn't work before 1.4.3, and
# svn_ra_reparent didn't work before 1.4)
</code></pre>

<p><s>It's fairly likely my company's SVN server is older than 1.4.3 - What can I do to persuade git to fetch this branch?</s> <strong>EDIT:</strong> Nope, we're on 1.4.4. So why doesn't this work?</p>
","0","102441",""
"14962978","1906287","2013-02-19 16:52:21","0","310","<git><branch><git-svn><fetch>","Files of new SVN branch are fetched with wrong path when running git svn fetch","<p>I have a git repository cloned from SVN with std layout a while ago. (It was done with git svn init and git svn fetch). Now I am using git 1.7.9.
My svn-remote config section looks like this:</p>

<pre><code>[svn-remote ""svn""]
        url = https://myhost/svn/myProject
        fetch = trunk:refs/remotes/trunk
        branches = branches/*:refs/remotes/*
        tags = tags/*:refs/remotes/tags/*
</code></pre>

<p>All branches that were initially fetched work correctly, subsequent fetches are also correct on these branches and on trunk.
The directory structure looks like this under each branch:</p>

<pre><code>subProject1\src\myPackage
subProject2\src\
subProject3\src\
</code></pre>

<p>Now a new branch called 2_7_1 was created with matching the directory structure of all other branches and the trunk.</p>

<p>Now when I run <em>git svn fetch</em> it starts fetching each revision from r1 instead of only fetching it from the revision where 2_7_1 branch was created from trunk.
The reason seems to be that it assumes: <em>src\myPackage</em> directory structure instead of <em>subProject1\src\myPackage</em>, so it starts fetching all revisions starting from r1.</p>

<p>When I browse the SVN repo in a browser I see no difference in the directory structure.
I noticed only one difference that the new branch is called 2_7_1@18813 (18813 is the start revision number of the new branch) where all other branches do not contain the revision, only the branch name.</p>

<p>I do not want to do a use the solution provided here: <a href=""https://stackoverflow.com/questions/296975/how-do-i-tell-git-svn-about-a-remote-branch-created-after-i-fetched-the-repo"">How do I tell git-svn about a remote branch created after I fetched the repo?</a> , because it would lose the common parent for trunk and 2_7_1 branch.</p>

<p><strong><em>Edit:</em></strong>
After doing a full <em>git svn fetch</em> it has become clear for me that my git svn sees two branches: 2_7_1 and 2_7_1@18813. 2_7_1@18813 was fetched from revision #1. And this messed up my master branch earlier tracking the SVN trunk.</p>

<p>Now my branch structure looks like this (a complete mess):</p>

<pre><code>------------------------------------------- X -- Y -- Z  ==  masterNew/trunk

-- A -- B -- C -- D -- E -- F -- G ----  == 2_7_1@18813
                                    \  \
                                     \  \ - J - K - L == master (old trunk)
                                      \
- A' - B' - C' - D' - E' - F' - G' -- H -- I == 2_7_1
</code></pre>

<p><strong><em>Edit #2:</em></strong>
After doing a full clone of the SVN repo with git svn clone the problem still persist.</p>
","0","1906287",""
"14968002","2088881","2013-02-19 21:41:18","3","653","<git><svn><git-svn><rebase>","difference between 'git svn rebase' and 'git rebase trunk'","<p>I am using git-svn for my project.</p>

<p>What is the difference between <code>git svn rebase</code> and <code>git rebase trunk</code>? </p>

<p>Is <code>git svn rebase</code> run on master basically the same as <code>git rebase trunk</code> run on master?</p>
","0","2088881",""
"14969400","1419731","2013-02-19 23:14:07","2","288","<perl><git><svn><git-svn>","git-svn fetch fails on file whose size > LONG_MAX","<p>I am trying to use git-svn to migrate from subversion.</p>

<p>right now I am blocked by the failure of</p>

<pre><code>$ git svn fetch 
</code></pre>

<p>fails on line 900 of Git.pm (from the git-svn package)</p>

<pre><code>...
    my $read = read($in, $blob, $bytesToReadd);
</code></pre>

<p>in the sub called cat_blob()
The problem is that the file is 2567089913 bytes, and when git-svn gets to 2147484672 it chokes with a message ""Offset outside of string"".
cat_blob tries to hold the entire file in a variable before writing it to disk.</p>

<p>I tried moving the writing of the file from the end of the sub to inside the read loop,</p>

<p>(here is what my modified code looks like)</p>

<pre><code>890         my $size = $1;
891 
892         my $blob;
893         my $bytesRead = 0;
894 
895         while (1) {
896                 my $bytesLeft = $size - $bytesRead;
897                 last unless $bytesLeft;
898 
899                 my $bytesToRead = $bytesLeft &lt; 1024 ? $bytesLeft : 1024;
900                 print $size, "" "", $bytesLeft, "" "", $bytesRead, ""\n"";
901                 my $read = read($in, $blob, $bytesToReadd);
902                 unless (defined($read)) {
903                         $self-&gt;_close_cat_blob();
904                         throw Error::Simple(""in pipe went bad"");
905                 unless (print $fh $blob) {
906                         $self-&gt;_close_cat_blob();
907                         throw Error::Simple(""couldn't write to passed in filehandle"");
908         }
909 
910                 }
911 
912                 $bytesRead += $read;
913         }
</code></pre>

<p>but now I get a new error:</p>

<pre><code>Checksum mismatch: root/Instruments/MY_DIR/MASSIVE_FILE.exe bca43a9cb6c3b7fdb76c460781eb410a34b6b9ec
expected: 52daf59b450b82a541e782dbfb803a32
     got: d41d8cd98f00b204e9800998ecf8427e
</code></pre>

<p>I'm not a perl guy.  Does perl put extra crap onto the print statement there? 
Any ideas how I can pass the checksum?</p>
","2","1419731",""
"16682691","706360","2013-05-22 02:48:16","4","206","<svn><git-svn>","line endings in files which are checked out by svn and commited by git-svn","<p>The team is using subversion as a version control system. I love git. So I cloned it with git-svn.</p>

<p>autocrlf setting:</p>

<pre><code>$ git config core.autocrlf
true
</code></pre>

<p>So files changed by me will have LF as line ending. </p>

<p>When the files are checked out by other members with SVN, they will have LF as line-ending even on Windows.</p>

<p>Setting autocrlf to false can solve the problem. It tells git not to change CRLF to LF. </p>

<p>Can the problem be solved by configuring subversion client? </p>
","0","706360",""
"33256531","5470871","2015-10-21 10:10:43","3","113","<git><svn><version-control><git-svn>","Replay local git-svn history to new svn server (lost access to old svn server)","<p>I had an old svn server and used <code>git-svn</code> to maintain a local copy of the entire history on my machine. I have since lost access to the old svn server but I still have a working git-svn repo on my local machine.</p>

<p>Now I would like to export my local repository to a new svn server. The server is set up and ready to go but I can't find a way to get the full history on there. </p>

<p>I already tried following a procedure for <a href=""https://stackoverflow.com/questions/661018/pushing-an-existing-git-repository-to-svn"">pushing an existing git repository to svn</a>, but I get the following errors when doing <code>git svn fetch</code>:</p>

<pre><code>Done rebuilding .git/svn/refs/remotes/git-svn/.rev_map.4c33e94a-e75c-4361-a8fc-dfd8a39081c9
Done rebuilding .git/svn/refs/remotes/git-svn/.rev_map.4c33e94a-e75c-4361-a8fc-dfd8a39081c9
Done rebuilding .git/svn/refs/remotes/git-svn/.rev_map.4c33e94a-e75c-4361-a8fc-dfd8a39081c9
Done rebuilding .git/svn/refs/remotes/git-svn/.rev_map.4c33e94a-e75c-4361-a8fc-dfd8a39081c9
Done rebuilding .git/svn/refs/remotes/git-svn/.rev_map.4c33e94a-e75c-4361-a8fc-dfd8a39081c9
Invalid filesystem revision number: No such reported revision '1568' found in the repository. at /usr/share/perl5/Git/SVN/Ra.pm line 300.
</code></pre>

<p>I think the problem is related to the ""git-svn-id"". Since my local copy is a <code>git-svn</code> repository, each commit is identified by a ""git-svn-id""  that includes the URL and revision number of the old svn server. It seems that the revision number must match on the new server (which of course it doesn't). It might be related to the problem described <a href=""https://stackoverflow.com/a/4694927/5470871"">here</a>, but the workaround this refers to requires that you still have access to the old svn repository (which I don't).</p>

<p>I'm stuck so any ideas are much appreciated.</p>
","3","5470871",""
"33258096","820657","2015-10-21 11:25:21","3","2527","<git><svn><git-svn><git-clone>","Missing branches cloning a non-standard svn repository using git-svn clone","<p>I am a complete git newbie and I want to clone my svn repository using git-svn. However, the branches are missing after the clone command is run.</p>

<p>The repo layout is as follows:</p>

<pre><code>trunk/
branches/team/releases/release-1
branches/team/releases/release-2
...
branches/development/user1/feature1
branches/development/user1/feature2
branches/development/user2/feature3
branches/development/user2/feature4
...
tags/release1
tags/release2
</code></pre>

<p>The command I'm using is:</p>

<pre><code>git svn clone --trunk=/trunk --branches=branches/*/* --tags=tags/*/* --prefix=svn/ --authors-file=authors.txt &lt;my-repo&gt; &lt;git-repo-name&gt;
</code></pre>

<p>I've tried modifying the branches option to <code>/branches/development/user1/*</code> and <code>/branches/development/user1/*/*</code> (and also using both together) and running the <code>clone</code> command again to see if any additional branches are picked up but they're not. </p>

<p><strong>Is it OK to run <code>clone</code> again or to I have to start from scratch and delete the git repo?</strong></p>

<p>All I can see if I run <code>git branch -r</code> after cloning is:</p>

<pre><code>svn/development/user1
svn/development/user1
svn/team/releases
svn/trunk
note that all the tags are present but omitted for brevity
</code></pre>

<p>How do I get the missing branches?</p>

<p>This is not a duplicate of <a href=""https://stackoverflow.com/q/572893/820657"">Cloning a Non-Standard Svn Repository with Git-Svn</a> or <a href=""https://stackoverflow.com/q/3983334/820657"">how to use nested branches through git-svn</a>.</p>
","0","820657",""
"16712449","799046","2013-05-23 11:13:42","2","1143","<git><github><git-svn>","Tried clone files from Git repo. Only (.git) folder is downloaded and it has nothing","<p>I am new to <code>Git</code>.</p>

<p>I am in <code>Windows7</code> and using <code>CygWin</code>. Below us the clone command I tried.</p>

<pre><code> git clone http://git.fadv.com/abg/abg.git GIT1/
</code></pre>

<p>I got only HEAD files.  Below are the folders and files I have got..</p>

<pre><code>hooks
info
objects
refs
confil - file
description-file
HEAD-file
</code></pre>

<p>I Googled the issue. No where I find the what is the issue and what is the solution.</p>
","6","799046","0"
"22554727","2024888","2014-03-21 09:23:09","1","142","<git><github><git-svn>","Setting up git on the Centos Linux server","<p><img src=""https://i.stack.imgur.com/wMqCY.png"" alt=""enter image description here"">I am new to git. I have installed git on the server and set up the repository there. But I am facing problem in cloning that repository on my local windows machine.
On my windows machine I am using Tortoise Git for cloning.
Could anyone help what url I need to provide to clone that repository on my local machine ? 
Below is the message I am getting </p>

<p><strong>git did not exit cleanly (exit code 128) (25381 ms @ 21-03-2014 14:51:54),</strong>
Attached is the screenshot for the same ...</p>
","3","2024888","0"
"14778617","34315","2013-02-08 18:01:27","1","1051","<git><bash><svn><powershell><git-svn>","Convert All Subversion Branches to Git Tags Using PowerShell After a git svn","<p>There are lots of examples of converting Subversion <em>branches</em> to Git <em>tags</em> after performing <code>git svn clone</code> in Linux and Unix. I was able to use the steps from this blog <a href=""http://john.albin.net/git/convert-subversion-to-git"" rel=""nofollow noreferrer"">post</a> up to this step (step 6 in the <a href=""http://john.albin.net/git/convert-subversion-to-git"" rel=""nofollow noreferrer"">post</a>). I need to port the script to PowerShell. Here's the Linux version:</p>

<pre><code>git for-each-ref --format='%(refname)' refs/heads/tags |
cut -d / -f 4 |
while read ref
do
  git tag ""$ref"" ""refs/heads/tags/$ref"";
  git branch -D ""tags/$ref"";
done
</code></pre>

<p>Here's what I have so far for the PowerShell version:</p>

<pre><code>git for-each-ref --format='%(refname)' refs/heads/tags |
# not sure how to replace ""cut""
do {
    git tag ""$ref"" ""refs/heads/tags/$ref"";
    git branch -D ""tags/$ref"";
} while (&lt;# I'm assuming I'm iterating a collection but I'm not sure what or how. should this be a foreach instead? #&gt;)
done
</code></pre>
","1","34315",""
"14792906","2005684","2013-02-09 23:40:42","1","4256","<macos><git><git-svn>","Using Git on Mac? I cant find git-svn","<p>I am trying to use git on the Mac OS X and I can't find <code>git-svn</code> to do something like</p>

<pre><code>git-svn clone -s http://example.com/my_subversion_repo local_dir
</code></pre>

<p>is </p>

<pre><code>git svn clone -s http://example.com/my_subversion_repo local_dir
</code></pre>

<p>The same?</p>
","0","2005684",""
"14793063","2005684","2013-02-10 00:00:43","3","4448","<git><intellij-idea><git-svn>","How do I use IntelliJ with Subversion, Git and ""git-svn""","<p>How do I use IntelliJ with Subversion, Git and ""git-svn"".</p>

<p>My firm is using subversion for the main    repository but I like to use git so I use the command line and issue the following commands</p>

<p>git-svn clone -s <a href=""http://example.com/my_subversion_repo"" rel=""nofollow"">http://example.com/my_subversion_repo</a> local_dir</p>

<p>but at the end I have to issue a git-svn dcommit can this be done from within IntelliJ</p>

<p>git-svn dcommit</p>
","2","2005684",""
"14799483","2005684","2013-02-10 15:47:20","1","229","<macos><git><git-svn>","Is ""git-svn clone"" on linux the same as ""git svn clone"" on the mac?","<p>Is ""git-svn clone"" on linux the same as ""git svn clone"" on the mac?</p>

<p>On Linux I know I can do the following command to clone a svn repo</p>

<pre><code>git-svn clone -s http://example.com/my_subversion_repo local_dir
</code></pre>

<p>but on my MAC I can't find git-svn so will the following command work</p>

<pre><code>git svn clone -s http://example.com/my_subversion_repo local_dir
</code></pre>
","1","2005684",""
"3962784","167435","2010-10-18 19:47:50","1","242","<svn><git><version-control><git-svn><google-code>","Is there any way of specifying a different author name on Google Code with git-svn?","<p>My Gmail/Google username is not a username I generally go by, and one I'd rather forget. I don't seem to be able to change my Google username, but I contribute to a Google Code project using git svn.</p>

<p>In Git, I can specify my name and e-mail address using my ~/.gitconfig file in the [user] section. Same with Mercurial and hgrc.</p>

<p>But the moment I push it up to Google, my name becomes my (rather arbitrary) Google username and my e-mail address becomes that followed by a long hash. Is there any way of telling Google Code and svn or git-svn to let me use my real name rather than my (arbitrary) Google username in the svn repostiory?</p>
","0","167435","0"
"14813292","2005684","2013-02-11 13:46:32","1","604","<git><svn><git-svn>","Why is git creating empty directory: build","<p>Why is git creating empty directory: build.</p>

<p>I am cloning a SVN repo with the following commands</p>

<pre><code>git svn clone -s http://svn/java/project project
</code></pre>

<p>and I see that git created a empty directory that I don't see in SVN, I keep removing it but everytime I do a </p>

<pre><code>git svn rebase
</code></pre>

<p>it comes back.. can someone please tell me why and how to stop it</p>
","6","2005684",""
"3919962","67707","2010-10-13 00:11:33","41","14180","<svn><git><git-svn>","Speeding up the initial git-svn fetch","<p>I have a big repository, 100,000+ revisions with a very high branching factor.  The initial fetch of the full SVN repository using git-svn has been running for around 2 months and it's only up to revision 60,000.  Is there any way to speed this thing up?</p>

<p>I'm already regularly killing and restarting the fetch due to git-svn leaking memory like a sieve.  The transfer is occurring over the local LAN, so link speed shouldn't be an issue.  The repository is on a dedicated machine backed by dedicated fiber channel arrays so the server should have plenty of oomph.  The only other thing that I can think of is do the clone from a local copy of the SVN repository.  </p>

<p>What have other people done in similar circumstances?</p>
","1","67707","0"
"5226168","131433","2011-03-07 22:43:35","2","93","<git-svn>","git svn as a crutch for svn merging woes","<p>Consider an svn repository that has branches that are not necessarily located in the usual trunk/tags/branches layout. I want to persuade git-svn to take two of those branches on board, plus whatever else it needs, so that I can use git as a merge tool to avoid various levels of heck that have been plaguing us with svn merging. If the branches are all in one place, there's <code>--branches</code>, but is there a way if they are not?</p>
","0","131433",""
"5233058","114216","2011-03-08 13:23:16","10","15434","<git><git-svn><msysgit><gitolite>","gitolite push error -> remote: ENV GL_RC not set","<p>I am trying to push content from a workstation to a server. But it gives me an error. Please look at the following for command and error:</p>

<pre><code>Administrator@ganesh ~/testing  
$ git push origin master  
Counting objects: 3, done.  
Writing objects: 100% (3/3), 241 bytes, done.  
Total 3 (delta 0), reused 0 (delta 0)  
remote: ENV GL_RC not set  
remote: BEGIN failed--compilation aborted at hooks/update line 20.  
remote: error: hook declined to update refs/heads/master  
To git@ganesh:repositories/testing  
 ! [remote rejected] master -&gt; master (hook declined)  
error: failed to push some refs to 'git@ganesh:repositories/testing'  
</code></pre>

<p>It seems that I need to set the environment variable <code>GL_RC</code>. Is this so?</p>

<p>Can anyone here tell me what the problem might be and how I can solve it? I am using gitolite on Windows Server 2003.</p>
","2","114216","0"
"3932306","112671","2010-10-14 10:46:29","4","1490","<svn><git><git-svn>","Using git-svn without appending git-svn-id","<p>Can I use <code>git-svn</code> without having the <code>git-svn-id:</code> entries appended to my commit message?</p>

<p>I have found the <code>svn.noMetadata</code> option comes with a warning (emphasis mine): </p>

<blockquote>
  <p>This gets rid of the git-svn-id: lines
  at the end of every commit.</p>
  
  <p>If you <strong>lose your
  .git/svn/git-svn/.rev_db file</strong>, git svn
  will not be able to rebuild it and you
  won't be able to fetch again, either.
  This is fine for one-shot imports.</p>
  
  <p>The git svn log command will not work
  on repositories using this, either.
  Using this conflicts with the
  useSvmProps option for (hopefully)
  obvious reasons.</p>
</blockquote>

<p>Is there a danger of data corruption by just relying on the <code>.rev_db</code> file or is the warning just placed to signal that there is the danger of losing the mapping? </p>
","0","112671",""
"5235284","123695","2011-03-08 16:27:05","3","674","<git><git-svn><dcommit>","git svn dcommit fails with ""Incomplete data: Delta source ended unexpectedly""","<p>I'm working with a remote team using an SVN repository. Mostly because of the high latency I experienced when contacting the repository, I decided to use git-svn. Everything is working great until I attempt to dcommit.</p>

<p>I have several local commits, and only one of them I want to push to SVN. I did <code>git rebase -i HEAD~4</code> to mark the commit I needed for editing. <code>git svn dcommit -n</code> confirms that this is the only revision which will be committed.</p>

<p>However, running <code>git svn dcommit</code> gives the error</p>

<pre><code>Incomplete data: Delta source ended unexpectedly
</code></pre>

<p>from line 572 of <code>git-svn</code> which is</p>

<pre><code>if (!SVN::Git::Editor-&gt;new(\%ed_opts)-&gt;apply_diff) {
</code></pre>

<p>I'm not sure if committing via SVN directly works yet as it takes hours to checkout the repository (even just the portion I'm interested in) so I can attempt a commit.</p>

<p>Any help is appreciated. Thanks in advance!</p>
","2","123695",""
"22549055","39531","2014-03-21 02:27:39","1","224","<git><git-svn>","Re-establishing a git svn clone on a separate machine","<p>I've got a git repository cloned from an external SVN repository through <code>git svn clone</code>. On a separate machine, I'd like to get this clone set up again, so I can update the git repository with recent SVN changes. How do I do this?</p>

<p>It seems using <code>git svn clone</code> or <code>git svn init</code> creates an empty repository, and <code>git svn fetch</code> uses a predefined URL. I don't want to have to reset my Git repository - I just want to pull the existing remote, re-link it to the same SVN, and continue with the <code>git svn rebase</code> to update Git with recent SVN changes.</p>
","0","39531",""
"22551273","2636776","2014-03-21 05:54:31","0","283","<git><git-svn>","Ignore certain files from git-svn dcommit","<p>Is there a way to keep a file in local git-svn repo, but ignore it in git-svn dcommit?
I have few scripts/batch files which I had like to keep in local git-svn repo but not dcommit to central SVN repo.</p>

<p>is that possible?</p>
","0","2636776",""
"5247435","651753","2011-03-09 14:46:55","6","809","<svn><git><git-svn>","Can I use git-svn and look like I was using SVN, if yes how?","<p>I'm used to git and I like it very much, but one of my client is (still?) using subversion, I don't really now about svn, but I know there a git-svn package.</p>

<p>I know it's possible to fetch a repo from svn with git, but can i use git instead of svn and still commit, and ""push"" to the central svn server?</p>

<p>I want to use git and not svn if I can can you point me any tutorial to do so?</p>

<p>Thank you</p>

<p><strong>EDIT:</strong></p>

<p>I actually don't care to fetch ALL the commits, only the 10/20 previous one would be enough as the application is in a working state and that's only about doing improvements so I will only fetch all the commit history if it's actually needed.</p>
","1","651753","0"
"4096437","497123","2010-11-04 12:04:09","0","1592","<security><git><ssh><git-svn>","where does git-svn save ssh credentials?","<p>I am using git-svn to develop code that is hosted on a SVN+SSH repository. I do not have to input my ssh password on the server every time I dcommit/update/rebase, so I assume it is cached somewhere.</p>

<p>Where are my credentials saved? Inside the .git directory, or globally in some dot-file in my home directory?</p>

<p>I ask because my git repository is public-readable on my home directory (we have a homes-are-readable policy in our laboratory), and I am afraid that this might leak my ssh credentials to all the lab.</p>

<p>Thanks.</p>
","0","497123",""
"42534064","1689284","2017-03-01 14:15:52","9","10675","<git><git-svn>","git svn clone fails with ""error: git-svn died of signal 11""","<p>I am trying to move my huge SVN repository into Git using a Ubuntu 16.4 machine. For this purpose I am following this tutorial:</p>

<p><a href=""https://www.atlassian.com/git/tutorials/svn-to-git-prepping-your-team-migration"" rel=""noreferrer"">https://www.atlassian.com/git/tutorials/svn-to-git-prepping-your-team-migration</a> </p>

<p>I have installed the latest Git, SVN and git-svn tools.</p>

<p>My problem is that each time I rung the 'git svn clone' command I am getting this error 'error: git-svn died of signal 11' without any further information.</p>

<p>Searching a bit in this forum I found another post:</p>

<p><a href=""https://stackoverflow.com/questions/5282405/git-svn-clone-died-of-signal-11-under-cygwin"">git svn clone died of signal 11 under cygwin</a></p>

<p>That took me to this web site for a solution:</p>

<p><a href=""http://pwizardry.com/devlog/index.cgi/2010/03/29#svn2git"" rel=""noreferrer"">http://pwizardry.com/devlog/index.cgi/2010/03/29#svn2git</a></p>

<p>Asking to resume the process using 'git svn fetch'. I did so and it seemed to work as the process went on for one more day. Unfortunately it has stopped again with the same error and the 'git svn fetch' doesn't seem to help any.</p>

<p>I would like to know if someone has experienced this problem or how could I find any traces because all i get is this error without any further explanation.</p>

<p><strong>EDIT:</strong></p>

<p>So I continued searching regarding this issue and I found that you could get some more information if using 'valgrind', and so I did, and now the 'git svn fetch' stops in another point with this message:</p>

<pre><code>==17006== Warning: invalid file descriptor -1 in syscall close()
==17006== 
==17006== HEAP SUMMARY:
==17006==     in use at exit: 43,779,830 bytes in 71,103 blocks
==17006==   total heap usage: 7,178,701 allocs, 7,107,598 frees, 2,123,468,574 bytes allocated
==17006== 
==17006== LEAK SUMMARY:
==17006==    definitely lost: 156,556 bytes in 40 blocks
==17006==    indirectly lost: 156,338 bytes in 51 blocks
==17006==      possibly lost: 43,394,719 bytes in 70,805 blocks
==17006==    still reachable: 72,217 bytes in 207 blocks
==17006==                       of which reachable via heuristic:
==17006==                         newarray           : 53,032 bytes in 1,637 blocks
==17006==         suppressed: 0 bytes in 0 blocks
==17006== Rerun with --leak-check=full to see details of leaked memory
==17006== 
==17006== For counts of detected and suppressed errors, rerun with: -v
==17006== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)
</code></pre>

<p>Any idea what is this?</p>

<p><strong>EDIT 2:</strong></p>

<p>I see now that running my normal 'git svn fetch' says all is done... I don't see how the use of 'valgrind' affected but it seems that it helped finishing the job.</p>
","1","1689284","0"
"23519906","2067448","2014-05-07 13:58:42","0","62","<git><git-svn><git-revert>","Can I go to an older revision of the branch in git using revision number?","<p>I have updated my view to the latest revision using <code>git svn fetch</code>. Then I realized the recent revisions have corrupted files. </p>

<p>I know the revision number at which my build was successful.</p>

<p>I do not find rev number in <code>git log</code>. So I can not exactly go to specific revision using commit id.</p>

<p>How do I go back to this revision using the revision number (last successful)?</p>
","0","2067448",""
"4411561","2680449","2010-12-10 17:25:25","2","502","<svn><git><github><git-svn>","Push a specific folder to github from a svn repository","<p>I have a svn repository that I need to push a SDKs' folder to a github repository. The catch is that I need to preserve the svn history related to the SDKs' folder and push it, with their respectives commit messages, to github.</p>

<p>I've created a git repository using git-svn but I'm stuck on what to do next. I've also tried to add a submodule, for the SDKs folder, but for some reason I can't push it back to the svn repository.</p>
","2","2680449","0"
"5464343","38140","2011-03-28 19:55:52","5","1102","<svn><git><git-svn>","Relative paths for git-svn SVN authors file?","<p>I have cloned an SVN repository from work using git-svn. During the initial cloning, I provided an SVN authors file. When I did the initial clone, git set the <code>authorsfile</code> as an absolute path. However,  I keep copies of this git repository on a work machine and a laptop, and keep the copies in sync using <a href=""http://www.cis.upenn.edu/~bcpierce/unison/"" rel=""noreferrer"">unison</a> (they are not two different clones, but the same clone).</p>

<p>The paths to my git repository are different on the work machine and the laptop, which means that the authors file won't be found on the work machine, where the absolute path is invalid. Will git-svn accept a relative path for the <code>authorsfile</code>, instead, so that the authors file will always be found and I can safely run <code>git svn rebase</code> and <code>git snv dcommit</code> from either machine?</p>
","0","38140","0"
"4436427","70942","2010-12-14 06:16:00","8","7409","<svn><git><git-svn>","git-svn rebase and dcommit problem","<pre><code>git version 1.7.1
svn, version 1.6.12
Ubuntu 10.10
</code></pre>

<p>I have just git and I have used svn. But I haven't used then together. I had a git repository, and I had to more my repository to a subversion one. So I have been using git-svn. Which works ok, most of the time. However, I find going round in circles.</p>

<p>I am the only one working on this project.</p>

<p>I make some changes to my branch. I then stage them:</p>

<pre><code>git stage gateway.c
</code></pre>

<p>Then commit them locally to git:</p>

<pre><code>git commit m""Made some changes""
</code></pre>

<p>Then I want to commit them to subversion. Get the latest updates:</p>

<pre><code>git svn rebase
</code></pre>

<p>Then I get the following message:</p>

<pre><code>It seems that I cannot create a rebase-apply directory, and
I wonder if you are in the middle of patch application or another
rebase.  If that is not the case, please
        rm -fr /home/joe/projects/gateway/.git/rebase-apply
and run me again.  I am stopping in case you still have something
valuable there.
rebase refs/remotes/trunk: command returned error: 1

I then doing the following:
rm -fr /home/joe/projects/gateway/.git/rebase-apply
</code></pre>

<p>Then I do a rebase again:</p>

<pre><code>git svn rebase
</code></pre>

<p>The message is this:</p>

<pre><code>First, rewinding head to replay your work on top of it...
Applying: Issue with getting the port from the user context.
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merging driver.c
Auto-merging gateway.c
CONFLICT (content): Merge conflict in gateway.c
Failed to merge in the changes.
Patch failed at 0001 Issue with getting the port from the user context.

When you have resolved this problem run ""git rebase --continue"".
If you would prefer to skip this patch, instead run ""git rebase --skip"".
To restore the original branch and stop rebasing run ""git rebase --abort"".

rebase refs/remotes/trunk: command returned error: 1
</code></pre>

<p>Which puts me on a branch called, and what is this branch and what is it for?:</p>

<pre><code>*(no branch)
</code></pre>

<p>I then resolve the conflicts to that branch. I then checkout my play_video branch. I try to make a another:</p>

<pre><code>svn git dcommit
</code></pre>

<p>And I end up going round in circles again.</p>

<p>Before I start pulling my hair out, can some offer me some advice,</p>

<p>Many thanks for any suggestions,</p>
","1","70942","0"
"60828905","1757475","2020-03-24 10:11:29","0","132","<git-svn><subgit>","Can I map svn externals with subgit?","<p>I am working  with subgit and I don't understand well how it deals with svn externals. I found this in <a href=""https://subgit.com/documentation/config-options.html#translate"" rel=""nofollow noreferrer"">the help</a></p>

<blockquote>
  <p>[translate]</p>
  
  <p>externals = [true|false]</p>
  
  <p>a boolean value, can be set to true or false. SubGit does not support translating svn:externals to Git submodules and back. However,
  when this option is set to true, SubGit creates special
  .gitsvnextmodules files in the root of every Git commit; these files
  store information on all the svn:externals definitions found in a
  given SVN branch. When false, SubGit ignores any svn:externals
  properties. Default is false.</p>
</blockquote>

<p>Does this mean that the externals are not processed at all but just logged into a file so that you are aware of?</p>

<p>Could I create a hook with subgit to the external repo and make that new git repo as a sub-module for git ?</p>

<p>THanks in advance,</p>
","0","1757475",""
"42122020","2777253","2017-02-08 19:30:31","2","695","<asp.net><git><iis><git-svn><bonobo>","Local git server (Bonobo git server) trying to clone a repository throw me an error","<p>On my machine, the git client version is 2.11.1.windows.1
and the server is Bonobo Git Server 5.2.0.0</p>
<p>In the command prompt commands show me this error <i>&quot;/info/rafs not valid: is this a git repository&quot;</i> after trying to clone a repository.</p>
<p>I went to the official site in the question section and find this</p>
<blockquote>
<p>fatal: http: /info/refs not valid: is this a git repository?</p>
<p>This is a git client way of saying that it didn’t receive git stream as a response from a server. That usually means, that there has been an error on the server side.</p>
<p>To determine what type of error it is, view the log file located at App_Data/Bonobo.Git.Server.Errors.log.</p>
</blockquote>
<p>Inside the errors.log.txt file i see the error:</p>
<pre><code>w3wp.exe Error: 0 : Error occured and caught in Global.asax - System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
Parameter name: length
   at System.String.Substring(Int32 startIndex, Int32 length)
   at Bonobo.Git.Server.MvcApplication.Application_AcquireRequestState(Object sender, EventArgs e)
   at System.Web.HttpApplication.SyncEventExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()
   at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean&amp; completedSynchronously)
</code></pre>
","3","2777253","0"
"4756996","204814","2011-01-21 08:59:45","2","322","<svn><git><branch><git-svn><trunk>","git-svn: replacing trunk branch with another","<p>How to replace the trunk branch with another in svn repository using git-svn tool?</p>
","2","204814","0"
"22898020","1383785","2014-04-06 18:19:53","0","326","<git><svn><git-svn>","How to make SVN trunk head the git master?","<p>I'm creating a git repository from a SVN repository, and after running the necessary commands to fetch the SVN repo, I have the SVN <code>trunk</code> branch checked out as <code>master</code> in git. However, I don't want the entire <code>trunk</code> directory, but just the <code>head</code> directory to be the master in git. How can I set the master branch in git to point to the <code>trunk/head</code> directory in SVN?</p>
","0","1383785",""
"42758754","1028276","2017-03-13 07:54:52","7","2551","<git><git-svn><bitbucket-server><svn2git>","Is there any way to speed up git svn?","<p>I am trying to convert an SVN repository to Bit Bucket, with 18 years of history, over 6000 branches and over half a million commits.</p>

<p>Git svn went through the first 50k commits in about 6 hours and has spent 3 days converting the next 40k. It has crashed twice and stopped twice because of missing authors which somehow managed to evade svn log. </p>

<p>It has reached the part of the repo where branches started to be used more widely. It has now slowed to a crawl. The branches are causing it serious grief. It is down to maybe one commit for every 2-3 minutes. Each new branch seems to slow the whole operation down even more. </p>

<p>I'm not sure where it's spending time. Is it an i/o or cpu intensive operation? Atlassian recommends running the operation where SVN is; on the local disk - no network trip. I don't if that would help though as it's not spending time pulling down files from SVN. Is it running commits on the branch and that is not shown on the console? </p>

<p>I don't think it's feasible to pull this into Bit Bucket. I think it would be better to move all new development to Bit Bucket and continue running SVN. At the current rate of conversion it will take several years to complete.</p>
","4","1028276","0"
"5807321","696184","2011-04-27 16:20:14","1","2038","<git-svn>","Accessing a mixed branches folder layout using git-svn","<p>I am trying to use git svn to connect to our company repository. We have a slightly non-standard branches directory. How to access this using git svn has been discussed before, however, we seem to have a slight twist in our branch names that seems to keep me from getting them all.</p>

<p>Let's consider an example svn repo:</p>

<pre><code>trunk/
tags/
branches/
    rootbranch/
    tku/subbranch
</code></pre>

<p>We have branches at the root level of the branches directory. But we have branches in nested folders, as well. The same goes for the tags dir, but I think that is just a second example of the same problem.</p>

<p>If I use <em>git svn clone file:///tmp/gitsvn/svnrepo git-clone -s</em>, I get only the root branches, as expected:</p>

<pre><code>/tmp/gitsvn/git-clone$ git branch -r
  rootbranch
  tku
  trunk
</code></pre>

<p>But if I clone using _git svn clone file:///tmp/gitsvn/svnrepo git-clone2 -b branches/<em>/</em>_, I get only the sub-branches:</p>

<pre><code>/tmp/gitsvn/git-clone2$ git branch -r
  tku/subbranch
</code></pre>

<p>Is there a way to have both?</p>
","0","696184","0"
"42908829","4751585","2017-03-20 16:22:32","0","89","<git><svn><git-svn><git-rewrite-history>","Does git-svn renaming preserve SVN history?","<p>I need to rename a file via Git while using git-svn. Will the history of the file in SVN be preserved after <code>dcommit</code>?</p>

<p>I know it will be if I'm using just Git or just SVN but I'm not sure if there is some history-preserving forwarding in between.</p>

<p>Currently cannot try it myself.</p>
","0","4751585",""
"5813608","632951","2011-04-28 04:23:24","5","4976","<git><github><git-svn><move><mv>","git: mv command","<p>i've read that the <strong>mv</strong> command is basically the same as </p>

<pre><code>$ mv README.txt README
$ git rm README.txt
$ git add README
</code></pre>

<p>just to be sure, is it exactly the same if i do it this way:</p>

<pre><code>$ git rm --cached README.txt
# [rename file using right click rename]
$ git add README
</code></pre>
","2","632951","0"
"61754543","201722","2020-05-12 14:36:50","-1","91","<git><svn><git-svn><git-clone>","git svn clone for a non-standard layout","<p>I have a SVN repo that I need to move to GIT. For historical reasons that predate my role and that I cannot resolve, the layout is as follows (let's call the project ""project"" for lack of a better term):</p>

<pre><code>project/trunk
project/tags
project/branches
</code></pre>

<p>Standard layout. The problem is that the trunk was never updated, not in a long time. Neither tags, so that's useless.</p>

<p>The real meat and potatoes is under project/branches, as follows:</p>

<pre><code>project/branches/branch1 (starts at revision r1)
project/branches/branch2 (starts at revision r2)
... 
project/branches/branch_W (starts at revision r_w)
...
project/branches/branch_X (starts at revision r_w)
...
project/branches/branch_Y (starts at revision r_y)
...
project/branches/branch_Z (starts at revision r_z)
</code></pre>

<p>The way branches were created was by branching (<code>branch_child</code>) directly from another branch (<code>branch_parent</code>), rather than branching from trunk (after trunk being updated/rebased with <code>branch_parent</code>).</p>

<p>Also, <code>branch_parent</code> might have been deleted, and there are a lot of dead-end branches.</p>

<p>In this example, I want to get branch_W ... branch_Z, with branch_W at revision_w as the start of the revision range. In my case, I need to do this with about a dozen branches created in such a fashion.)</p>

<p>Anyone that could suggest an efficient (or at best, least pain-inducing) way to get git svn clone to accomplish this?</p>

<p>Worst come to worst, I'd just git svn clone the most recent branch (I can do that.) But I find it extremely important to bring all the history from the branches I'm interested in.</p>

<p>Thanks.</p>
","2","201722",""
"24409844","1813569","2014-06-25 13:18:59","0","35","<git><git-svn>","Subsequent switch between remote branches, tracked by git-svn","<p>I'm with git-svn on top of a customers SVN branch ('trunk') </p>

<p>trunk -> master -> feature </p>

<p>Simplified workflow is:</p>

<pre><code>master: git-svn rebase
git rebase master feature [working here...]
git checkout master
git merge feature
git svn-dcommit 
</code></pre>

<p>Now, the customer would like to have my work on an up to now non-existing svn branch ('feature_svn'). 'feature' progressed a lot and hasn't been dcommited for a while. The customer would likely avoid having these developments in his trunk for the moment.</p>

<p>What would be the best way to migrate my work? Can I simply track 'feature_svn' with a new git branch (say 'track_feature_svn'), merge/rebase(?) 'feature' into 'track_feature_svn' and dcommit the result to 'feature_svn'. Are there any possible pitfalls?</p>
","0","1813569",""
"6038829","147937","2011-05-18 01:06:13","13","1916","<svn><git><git-svn><commit>","How to see what has been checked into git, but hasn't been committed to svn via dcommit?","<p>I'm using git-svn. How can I get a list of what I've committed into git, but haven't yet committed to the SVN repository since the last <code>git svn dcommit</code>? That is, how can I verify what is about to be sent if I do a dcommit?</p>
","0","147937","0"
"43089859","2496464","2017-03-29 09:41:20","1","57","<git><svn><version-control><git-svn>","git-svn: re-link git-svn cloned repo to svn","<p>I have on my gitlab a git repo which was originally cloned using <code>git svn clone https://svn.url.com/project/trunk</code>. I used to <code>dcommit</code> to the svn as well as <code>git push</code> to the gitlab from my local copy. But now I have now lost the original local copy where I do the git-svn clone from.. I do <code>git clone</code> from my gitlab but now I lost the capability to fetch from the svn and dcommit again.. Is there any way I can restore it? I've never back up the .git/svn folder under the git directory... :(</p>
","1","2496464",""
"43313692","7842233","2017-04-10 01:17:11","2","952","<git><svn><git-svn>","Move/rename directory with git-svn","<p>My company uses SVN repository but I would like to use Git. At the moment I'm using git-svn, but when I move or rename a directory with a several of files in Git and ""git svn dcommit"" such change, in SVN repository this results into individual files moves:</p>

<pre><code>Changed paths:
  D /directory/file1
  D /directory/file2
  D /directory/file3
  D /directory/file4
  ...
  A /renamedDirectory
  A /renamedDirectory/file1 (from /directory/file1:67918)
  A /renamedDirectory/file2 (from /directory/file2:67918)
  A /renamedDirectory/file3 (from /directory/file3:67918)
  A /renamedDirectory/file4 (from /directory/file4:67918)
  ....
</code></pre>

<p>Instead I would expect to see something like that:</p>

<pre><code>Changed paths:
  D /directory
  A /renamedDirectory (from /directory:67918)
</code></pre>

<p>i.e. full directory rename. Is there any way to solve the problem?</p>
","3","7842233","0"
"6365938","77939","2011-06-16 00:35:56","3","385","<git><git-svn><git-branch>","How do you rebase a git-svn branch and keep the metadata intact?","<p>I recently used <code>git svn branch</code> to create a branch (in both Subversion and git).</p>

<p>I noticed that (for some reason I'm not sure about; maybe a bug or maybe I created the branch incorrectly?) the git commit for the branch creation has two parents: one at the top of the tree at the time I created the branch (incorrect since I branched from a previous revision) and one at the (expected) previous revision. </p>

<p>This ""second parent"" causes all kinds of grief for me, since I'm now trying to merge from another branch to the new branch, and git's idea of the common ancestor is incorrect.</p>

<p>I found <a href=""https://stackoverflow.com/questions/3810348/setting-git-parent-pointer-to-a-different-parent"">this question</a> which explains how to force the git branch to have the correct parent by using a rebase. The problem is, the rebase only affected my local branch HEAD, not the remote tied to the git-svn repository. Normally, this would be a very bad thing, but since I'm the only one using this git-svn repository, I don't care: I just want to move the remote branch to the adjusted commit now.</p>

<p>So my question is: now that I've got the parent for the local branch pointed at the correct commit it branched from, is there a way for me to move the remote branch to the same HEAD, so that I can (for example) run <code>git svn rebase</code> without it getting confused? (I'm afraid that if I change it by hand, the <code>.git/refs/remotes/&lt;mybranch&gt;/.rev_map...</code> file won't match up with SVN any more...?)</p>

<hr>

<p><strong>Edit</strong>: To address the question posed in the comment, yes, the branch is checked out. I'm going to change the names of my branches to protect the innocent, but let's imagine it looks like this:</p>

<pre><code>$ git branch
* git_mysvnbranch
  git_releasebranch
  master

$ git branch -r
  trunk
  mysvnbranch
  releasebranch
</code></pre>

<p>Now, when I created the branch, <code>mysvnbranch</code> had a parent of both trunk, and the arbitrary point off of trunk that I branched from. Now I want to take <code>releasebranch</code> and merge it into <code>mysvnbranch</code>, which is when I see a problem. If I launch <code>gitk</code> it looks like this:</p>

<pre><code>o [git_mysvnbranch] [remotes/mysvnbranch]
|\ &lt;--- bad pointer here
| o [remotes/trunk]
| |
| o 
| | o [git_releasebranch] [remotes/releasebranch]
| | |
| o o
| |/
| o
| |
| o
| |
| o
|/
o [arbitrary branch point]
</code></pre>

<p>So you can see the problem if I want to merge in <code>[remotes/releasebranch]</code>. If I do a rebase, I can make it look like this:</p>

<pre><code>o [git_mysvnbranch]
|
| o [remotes/mysvnbranch]
| |\ &lt;--- bad pointer here
| | o [master] [remotes/trunk]
| | |
| | o 
| | | o [git_releasebranch] [remotes/releasebranch]
| | | |
| | o o
| | |/
| | o
| | |
| | o
| | |
| | o
| |/
|/
o [arbitrary branch point]
</code></pre>

<p>And now I want to git rid of the version of <code>[remotes/mysvnbranch]</code> with the bad parent, and make it point to where <code>[git_mysvnbranch]</code> points to instead.</p>

<p>But here's a curious thing that I just found out: the svn metadata might indeed be intact. I just did this:</p>

<pre><code>$ git svn rebase -n
Remote Branch: refs/remotes/mysvnbranch
SVN URL: svn://subversionrepo/branches/mysvnbranch
</code></pre>

<p>So maybe I'm worrying about nothing. I will test this a little more to try to find out.</p>

<hr>

<p><strong>Edit 2</strong>: I'm not worrying about nothing. As soon as I tried <code>git svn rebase</code> from the rebased branch, it tried to re-merge changes that had already been merged into the git branch.</p>
","2","77939","0"
"6598610","4189","2011-07-06 15:04:42","5","6058","<git><git-svn>","git-svn ""Couldn't find revmap for""","<p>I followed this tutorial:
<a href=""http://www.beletsky.net/2011/06/how-to-start-using-git-in-svn-based.html"" rel=""nofollow noreferrer"">http://www.beletsky.net/2011/06/how-to-start-using-git-in-svn-based.html</a></p>

<p>I did this and it worked fine for a while i could rebase and dcommit and all.</p>

<p>But then I got an error when doing ""git svn rebase"":
""Couldn't find revmap for""
It seems that git-svn suddenly thinks that my branch is the svn trunk...</p>

<p>This might be the answer:
<a href=""https://stackoverflow.com/questions/4291347/git-svn-import-only-branch"">git-svn import only branch</a></p>

<p>But I am simply not smart enough to unserstand it.</p>

<p><strong>Edit</strong>
What I did between the ""git svn rebase"" that worked and the one giving an error was create a branch and stash a little...</p>

<p>**Edit 2 **
This looks useful as well:
<a href=""https://stackoverflow.com/questions/5965486/git-svn-clone-git-svn-rebase-unable-to-determine-upstream-svn-information-fro"">git svn clone &gt; git svn rebase &gt; Unable to determine upstream SVN information from working tree history</a></p>
","1","4189","0"
"24904329","2685462","2014-07-23 07:30:01","4","943","<git><svn><git-svn>","git svn clone failed due to Svndiff backward-sliding source view","<p>I am in the process of migrating svn repositories to git, using git svn clone, then pushing the clone to a remote origin to act as the new git repository.</p>

<p>Using this process I have successfully migrated 34 svn repos so far, but during the git svn clone process, 4 have failed due to the following error</p>

<p>Command:</p>

<pre><code>git svn clone --authors-file=authors.txt svn+ssh://git@server/path/to/SVN/project/trunk/repo_name repo_name.git
</code></pre>

<p>Resulting in the error:</p>

<pre><code>Svndiff data contains backward-sliding source view: Svndiff has backwards-sliding source views at /usr/libexec/git-core/git-svn line 5061
</code></pre>

<p>Has anyone encountered this error before and found a way around it, either forcing the git svn clone to ignore the error and continue, or to repair the SVN repo first?</p>

<p>I should probably add a little more background to this issue.
I've been pointed in the direction of various tools to assist with the svn to git migration, but unfortunately most of these are a one way conversion and are not suitable for the task.</p>

<p>I have approximately 100 individual code bases to convert, and each of these are live systems in active development, so the migration will be a phased approach.</p>

<ol>
<li>Create live git clone of each svn repo -> keep in sync using git svn rebase, then push to remote origin master branch. git in read-only mode (for developers).</li>
<li>Begin using git repo for code reviews rather than svn</li>
<li>Start branching git repo for changes rather than svn, sync changes back to svn. svn in read only mode (for developers).</li>
</ol>

<p>SVN will likely be used for the deploy/build process, so I cannot do a one time conversion and need to maintain the sync using git svn dcommit to push back at all stages.</p>
","1","2685462",""
"6629380","344286","2011-07-08 19:20:46","0","821","<git><git-svn>","git-svn commit a single directory?","<p>Using TortiseSVN you can update/commit a single directory by right clicking the directory and selecting update or commit.</p>

<p>I really like the branching power of git, but if I use <code>git svn dcommit</code> it will try to update the entire repository, which in our case has several projects in it.</p>

<p>So how can I commit only specific files/directories?</p>

<p>Thanks!</p>

<p><strong>EDIT</strong></p>

<p>To clarify what the SVN repos look like:</p>

<pre><code>+- Trunk
|
+-+- Project 1
| |
| +- Project 1 files...
|
+-+- Project 2
| |
| +- Project 2 files..
|
+-+- My Project
  |
  +- My Project files...
</code></pre>

<p>And when I run <code>git svn dcommit</code> it tries to update everything in <code>Project 1, 2</code>, and <code>My Project</code>.</p>

<p>Project 1 and 2 are completely unrelated, and under development by others. How do I avoid updating/committing to the other projects? Do I simply add those dirs to <code>.gitignore</code>? What about if I later need to work on those other projects? Alternatively, is there a better way to use <code>git svn</code> to work with this type of Subversion repository?</p>
","1","344286",""
"6637105","83982","2011-07-09 19:49:35","10","1076","<git><svn><version-control><git-svn>","Re-enable mirroring with git-svn","<p>For some time now I've been mirroring a Subversion repository to a Git repository. Which has always worked fine. However, due to a crash of a virtual server and not having a backup I've got to setup the mirror again. The repository I need to track is almost 1200 commits big and contains a lot of files (which is the main reason for the Git mirror, as it's so much faster to checkout a copy of the repo).</p>

<p>What I need to do now is make my freshly cloned Git mirror make track the Subversion repository again. I've got no problems adding the new remote ref but can't seem to figure out how to be able to pull svn commits into the Git branch again.</p>

<p>One error I seem to receive is <code>Unable to determine upstream SVN information from working tree history</code>.</p>

<p>How can I re-enable mirroring a Subversion repository on a existing Git branch that's only behind a couple commits from the Subversion repository?</p>
","1","83982","0"
"14820178","2005684","2013-02-11 20:22:32","1","361","<git><git-svn>","Why am I getting this error trying to use git with svn","<p>Why am I getting this error trying to use git with svn. I am doing the following steps and getting some crazy errors.</p>

<pre><code>git svn clone -s http://svn/java/project project
cd project
git svn show-ignore &gt; .gitignore
git checkout -b dev
</code></pre>

<p>I get the following outpput</p>

<pre><code>M   src/main/java/app.properties
M   src/main/java/messages.properties
M   src/main/java/org/xxxxx/enrollment/dao/projectDao.java
M   src/main/resources/app.properties
M   src/main/webapp/WEB-INF/flows/start/footer.jsp
M   src/main/webapp/WEB-INF/flows/start/header_edit.jsp
M   src/main/webapp/WEB-INF/flows/start/tobe.jsp
M   src/main/webapp/WEB-INF/spring/mvc.xml
M   src/main/webapp/index.jsp
M   src/test/resources/app.properties
M   src/test/resources/messages.properties
M   src/test/resources/mvc.xml
Switched to a new branch 'dev
</code></pre>

<p>'</p>

<pre><code>git svn rebase
</code></pre>

<p>I get this output</p>

<pre><code>src/main/java/app.properties: needs update
src/main/java/messages.properties: needs update
src/main/java/org/xxxx/enrollment/dao/projectDao.java: needs update
src/main/resources/app.properties: needs update
src/main/webapp/WEB-INF/flows/start/footer.jsp: needs update
src/main/webapp/WEB-INF/flows/start/header_edit.jsp: needs update
src/main/webapp/WEB-INF/flows/start/tobe.jsp: needs update
src/main/webapp/WEB-INF/spring/mvc.xml: needs update
src/main/webapp/index.jsp: needs update
src/test/resources/app.properties: needs update
src/test/resources/messages.properties: needs update
src/test/resources/mvc.xml: needs update
update-index --refresh: command returned error: 1
</code></pre>

<p>please help me</p>
","2","2005684","0"
"14827811","32030","2013-02-12 07:50:08","2","700","<git-svn><git-flow>","Does git-flow work together with git-svn","<p>As I'm currently bound to a subversion repository, but using git-svn fine, I was wondering if this setup could also be used together with git-flow?
What benefits would git-flow bring? What drawbacks or issues would arise?</p>
","0","32030","0"
"4150944","105698","2010-11-11 02:35:29","16","30810","<git><github><git-svn>","How can I commit to an old git tag?","<p>So two months ago I migrated our codebase in SVN into Git with the complete changeset history. Immediately after that, we tagged a new release and continued working. So while we've continued working in the new tag, some people have continued fixing bugs in the old tag in SVN and now I'd like to pull all those changes into that tag in Git.</p>

<p>I can clone the tag and make Git will let me make commits into it, but I can't push anything back up with git-push. Checking git-log, the commit is there but git-st tells me that I'm not currently on any branch.</p>

<p>So Internet, how can I commit to an old git tag? </p>
","0","105698","0"
"14839169","2005684","2013-02-12 18:23:02","0","64","<git><git-svn>","Working in git branch. Can I rebase to keep branch updates?","<p>My firm is using Subversion but I am turned on with git right now so I am doing the following:</p>

<pre><code>git svn clone -s http://svn/java/&lt;project&gt; &lt;project&gt;
cd &lt;project&gt;
git svn show-ignore &gt; .gitignore
git checkout -b dev
</code></pre>

<p>Now if I am working in my dev branch overnight and I want to see if anyone changed the trunk of svn can I just issue a </p>

<pre><code>git svn rebase
</code></pre>

<p>in my dev branch?</p>
","0","2005684",""
"4168411","168143","2010-11-12 19:40:44","21","11742","<svn><git><git-svn>","How does git-svn know which branch to dcommit to?","<p>My repo is SVN, and I do all development with git. We have a standard layout, and I initialized my local repo with <code>git svn init -s &lt;url to repo&gt;</code></p>
<p>Here's my workflow for working with branches:</p>
<pre><code># creates a new branch remotely
git svn branch new-branch-name

# switches to a branch or trunk locally
git reset --hard name-of-branch
git reset --hard trunk

# merge changes from trunk into a branch
git reset —hard name-of-branch
git merge trunk
git svn dcommit
</code></pre>
<p>That last command above will commit the changes to the branch name-of-branch. My question is, how does git know this? When I do <code>git reset --hard foo</code>, what exactly happens?</p>
<p>This might just come down to a general question about git. Every time I try to research an answer I get confused about if svn integration is a special case or not.</p>
","0","168143","0"
"4169017","168143","2010-11-12 21:03:21","23","3213","<svn><git><git-svn>","Why does `git remote` not list anything on my git-svn repo?","<p>After doing <code>git svn init -s &lt;url to repo&gt;</code>, <code>git remote</code> doesn't list any remotes. Why?</p>
","0","168143","0"
"15530704","2187425","2013-03-20 17:32:20","0","319","<git><svn><git-svn><subgit>","Accessing a git server with git or svn commands","<p>Here´s my problem. I manage a git server with gitolite. I want to access this server using git or svn commands, the clients don´t even need to know whether that´s a git or svn server. </p>

<p>When accessing the server from svn I use user authentication (with the files authz, passwd and svnserve, adn then runnig svnserve), and when accessing from git, I use user authentication with public keys (just like gitolite manage this). The server works under RHEL6.</p>

<p>Any Ideas? I´ve read a lot of information about using git-svn, but -according what I've read- the client should use some git-svn command, and I don't want this. I´ve read this thread <a href=""https://stackoverflow.com/questions/661018/pushing-an-existing-git-repository-to-svn"">Pushing an existing git repository to SVN</a> , but I still dont know how to push/pull into/from the server, and make other operations.</p>

<p>Thanks a lot for your help.</p>
","4","2187425",""
"15534646","710802","2013-03-20 21:02:07","2","794","<git><git-svn>","git svn branch history missing","<p>I am using ""git svn"" to clone a SVN repo. The SVN repo I am working with does not follow the standard convention for SVN branch (puts branch in say folder called ""bugs"", rather than ""branch""). Developers like me are suppose to work on branches created in this bug folder.</p>

<p>To be able to develop against these bug plus to be able to test if it merges fine, Here is what I do.</p>

<ol>
<li>I clone the svn trunk as master branch.</li>
<li><p>I then checked out a branch that tracks the SVN branch (svn/bugs).</p>

<p>I followed the instruction in this link to create a git branch on my local. </p></li>
</ol>

<p><a href=""https://stackoverflow.com/questions/296975/how-do-i-tell-git-svn-about-a-remote-branch-created-after-i-fetched-the-repo"">How do I tell git-svn about a remote branch created after I fetched the repo?</a> </p>

<p>On master (svn trunk), when I do ""git log"", see the entire svn history. Which I want.
But, in my bug branch, when I do ""git log"", it only shows the last commit that was done for creating the branch.  If I import the same svn branch directly (not using git), I do see all the other commit history.</p>

<p>Can anyone tell me How I can link the history on this ""git svn branch"" (bug branch) so I get the entire history? (i want be able to do git blame to find all the changes)</p>
","5","710802","0"
"16307535","565660","2013-04-30 19:28:58","0","148","<git><git-svn>","Tried to do a git pull and there were merge conflicts. Tried git mergetool but no tool started","<p>I tried to do a git pull origin develop and it tried merging but there were some conflicts.
I tried git mergetool but it doesn't start up a tool. This is first time I've tried to merge
How do I merge my changes?</p>

<pre><code>CONFLICT (content): Merge conflict in .classpath
Automatic merge failed; fix conflicts and then commit the result.
....Tool (develop|MERGING)
$ git mergetool
merge tool candidates: tortoisemerge emerge vimdiff
No known merge resolution program available.
</code></pre>
","1","565660",""
"32893505","1161952","2015-10-01 17:34:49","1","605","<git><svn><git-svn>","git svn clone error message (author name not defined and Index mismatch)","<p>I am trying to convert a svn.dump file to a git repo and I get the following error message after it started the process and it stops at r1648 with the following error message.</p>

<p>Index mismatch: 050a0cc9f86e0ba2453d3baed3f069e1d1fe1477 != c321ff4e94b18147619ce9fbd0324ea0f4323d29 rereading 06ed9207b02ea9e7d8af270c71c6012311a275c9
D   sites/voices/css/ie-only.css W: -empty_dir: trunk/sites/voices/css/ie-only.css`
Author: Vish Chou  not defined in /Users/vc/Sites/voices/authors.txt file</p>

<p>Here are the contents of the author.txt file which I got after running the following command:</p>

<pre><code>svn log -q | awk -F '|' '/^r/ {sub(""^ "", """", $2); sub("" $"", """", $2); print $2"" = ""$2"" &lt;""$2""&gt;""}' | sort -u &gt; authors.txt
</code></pre>

<p>authors.txt content</p>

<p>Brian = Brian &lt;Brian&gt;</p>

<p>Jlanglo = Jangle &lt;Jlanglo&gt;</p>

<p>Vish Chouh = Vish Chou &lt;Vish Chou&gt; - <strong>This user is causing the issue.</strong></p>

<p>admin = admin &lt;admin&gt;</p>

<p>chiudesign = chiudesign &lt;chiudesign&gt;</p>

<p>clarkk = clarks &lt;clarkk&gt;</p>

<p>When I run the following command:</p>

<pre><code>svn log | sed -n '/Vish Chou/,/-----$/ p'
</code></pre>

<p>to see the log submitted by this specific author I get the following message</p>

<blockquote>
  <p>r1648 | Vish Chou  | 2013-12-02 14:27:43 -0500 (Mon, 02 Dec 2013) | 1
  line</p>
</blockquote>
","5","1161952","0"
"15690560","1975229","2013-03-28 19:32:36","3","4838","<git><git-svn>","Single git-svn command not caching password for multiple svn actions","<p>I'm using git-svn to connect to a subversion repository that authenticates via https.  I'm using the git command line client on Linux (Ubuntu 12.04).  When I perform any command that requires interaction with the subversion server, I must enter my svn password, as expected.  However, if the command requires multiple interactions with the svn server (e.g. git svn dcommit with multiple local commits) I must enter the password multiple times.  </p>

<p>On another workstation, I have a similar setup which gives me the expect behavior of asking for the password once for the entire series of commits.</p>

<p>I've found similar questions <a href=""https://stackoverflow.com/questions/3127097/git-svn-password-for-svn-is-not-stored"">here</a> and <a href=""https://stackoverflow.com/questions/605519/does-git-svn-store-svn-passwords"">here</a> but in both cases the OP wanted the svn credentials cached between git-svn commands.  I do not have subversion configured to cache my password and want to keep it that way if I can.</p>

<p>My git-svn version is 1.7.9.5 (svn 1.6.17)</p>
","0","1975229",""
"32571065","374198","2015-09-14 18:03:17","1","560","<git><svn><git-svn>","How to use git-svn when SVN repository really contains multiple ""repositories""?","<p>Supposed I have an umbrella SVN repo, ""CompanyName"". Within this repo, there are many projects, ""Project1"", ""Project2"", ..., ""ProjectN"". E.g. the SVN repo houses multiple projects instead of a single repo per project. I want to ""move"" Project1 to Git, so I tried to do this:</p>

<pre><code>git svn clone --no-metadata --authors-file=users.txt --prefix=origin/ --trunk=Trunk --branches=Branches svn+ssh://me@svn.dev.companyname.biz/svn/CompanyName/Internal/Project1/
</code></pre>

<p>To which, git-svn responds:</p>

<pre><code>Initialized empty Git repository in c:/Projects/CompanyName/Internal/Project1/.git/
Using higher level of URL: svn+ssh://me@svn.dev.companyname.biz/svn/CompanyName/Internal/Project1 =&gt; svn+ssh://me@svn.dev.companyname.biz/svn/CompanyName
</code></pre>

<p>Note that git has correctly moved up to the root of the repository, although I want it to focus on the path I specified. Moving into <code>Project1</code>, running <code>git branch -r</code> gives me no output, so this did not appear to work.</p>
","0","374198",""
"15729243","53420","2013-03-31 12:13:11","2","93","<git><svn><git-svn>","How can i push a git history to svn","<p>I have an existing git repository with a long history. For business reasons i have to mirror that repository to a svn server. I tried several ways but always failed so far.</p>
","0","53420","0"
"15837519","655316","2013-04-05 15:17:02","0","151","<git><github><git-svn>","git: Merge branch logs","<p>How can I merge history of my git project so that all commits histories are considered to be parts of one branch? </p>

<p><strong>Currently I have this:</strong></p>

<pre><code>* 465a83a Highlight search
* 37a367d Tab=3; AutosaveSession (Not using yet)
*   9f2559c Merge branch 'master' of github.com:shahverdy/.vim
|\  
| * 6bf7783 SaveSession was added.
| |\  
| | * 6cdd383 Some changes with path allocation
| | |\  
| | | * de535b2 Update README.md
| | | * cb78dae Update README.md
| | | * 6664428 Update README.md
| | | * b6f3869 Some extra modifications + README.ms
| | | * 0924e77 Oops! vimrc was not included in the last commit
| | | * c030172 sweeping away ...
| | | * d67280e bundle installer was added, some extaras was sweeped away
| | | * 10a669c Cursors fixed...
| | | * 9dfd01f Cursors was edited ...
| | | * 0b5d8aa Syntax for PHP and Javascript was added
| | | * dd5a21d A bug fixed
| | | * ad5b9f2 Syntax for PHP and Javascript was added
| | | * 99e5595 Fixed code folding+ search highlighting
| | | * 69c7f77 File Explorer fixed
| | | * ba5fbf7 .vimrc was added
| | * f875ee1 A totel reset
| * 9edf692 Update
* 9c71074 new plugins
</code></pre>

<p><strong>And I want this:</strong></p>

<pre><code>* 465a83a Highlight search
* 37a367d Tab=3; AutosaveSession (Not using yet)
* 9f2559c Merge branch 'master' of github.com:shahverdy/.vim
* 6bf7783 SaveSession was added.
* 6cdd383 Some changes with path allocation
* de535b2 Update README.md
* cb78dae Update README.md
* 6664428 Update README.md
* b6f3869 Some extra modifications + README.ms
* 0924e77 Oops! vimrc was not included in the last commit
* c030172 sweeping away ...
* d67280e bundle installer was added, some extaras was sweeped away
* 10a669c Cursors fixed...
* 9dfd01f Cursors was edited ...
* 0b5d8aa Syntax for PHP and Javascript was added
* dd5a21d A bug fixed
* ad5b9f2 Syntax for PHP and Javascript was added
* 99e5595 Fixed code folding+ search highlighting
* 69c7f77 File Explorer fixed
* ba5fbf7 .vimrc was added
* f875ee1 A totel reset
* 9edf692 Update
* 9c71074 new plugins
</code></pre>

<h2>Edit</h2>

<p>I tried <code>git rebase</code>, the output was <code>Current branch master is up to date.</code>, and still history is shown like before.</p>

<p><strong>Thanks</strong></p>
","4","655316",""
"15841081","9316","2013-04-05 18:33:14","1","50","<git><git-svn>","Pushing from git into a subversion repository","<p>I have my work in a git repository, some of my coworkers want to incorporate it into their subversion repository. I'm going to keep working with git, but it would be nice have a subversion repo as a remote that I can push to once in a while. </p>

<p>I don't plan on pulling from it ever. If this is doable, we'll have an understanding that the subversion remote is write-only from my point of view and read-only from theirs. They already have access to the git repo, and will be working there anyway (yes, it's a bit ridiculous, but I cannot change that).</p>

<p>Is this something that git-svn can handle? </p>
","0","9316",""
"15843674","172157","2013-04-05 21:13:41","4","3372","<git><git-svn>","How to use git when pair programming","<p>I am working on an Apache project. I am seeking advice on how best to use git to support our slightly unusual workflow. I'm familiar with the main git commands but inexperienced in using it on a group project. </p>

<p>On my team we usually pair-program and, for various reasons, swap which developer's machine we're working on several times per day. </p>

<p>The central source code repository is SVN but a read-only git mirror exists. </p>

<p>I'd like my partner and I to be able to frequently pull commits from each other's local repositories, and (less frequently) fetch updates from the server and commit to it. </p>

<p>It seems that this won't play nicely with ""git svn"", as stated on <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-svn.html"" rel=""nofollow"">https://www.kernel.org/pub/software/scm/git/docs/git-svn.html</a>:</p>

<p>""it is recommended that all git svn users clone, fetch and dcommit directly from the SVN server, and avoid all git clone/pull/merge/push operations between git repositories""</p>

<p>What's the best way to use git to support our workflow? For example, would it be easier if we clone from the read-only git repository instead of using git svn, and occasionally commit to the svn repo by applying patches to a separate 'git svn clone'-d repo? </p>

<p>Any advice gratefully received. </p>
","1","172157",""
"15883291","710802","2013-04-08 15:36:47","2","620","<git><svn><git-svn>","git svn branches in a large repository","<p>I am using ""git svn"" to interact with a large SVN repo with non-standard branching convention.
I see that there are multiple ways to clone the svn repo / branches as pointed out <a href=""https://stackoverflow.com/questions/1638478/git-svn-with-multiple-branch-locations"">here</a></p>

<p>I am seeing really different behaviors:</p>

<p>Say the SVN repo is as follows:</p>

<pre><code>http://svn.mycom.com/svn/Project
--&gt;trunk
--&gt;defects
--&gt;uat
</code></pre>

<p>Production is in ""trunk"", branches are in ""defects"", current development is in ""uat"". </p>

<p>So that being said I could do the following</p>

<p><strong>1. clone direct uat..</strong> </p>

<pre><code>$ git svn clone http://svn.mycom.com/svn/Project/uat
</code></pre>

<p>when I do this my .git/config file looks like:</p>

<pre><code>[svn-remote ""svn""]
    url = http://svn.mycom.com/svn/Project/uat
    fetch = :refs/remotes/trunk
</code></pre>

<p>I then added branches as described <a href=""https://stackoverflow.com/questions/296975/how-do-i-tell-git-svn-about-a-remote-branch-created-after-i-fetched-the-repo"">here</a> 
    My .git/config looks similar to:</p>

<pre><code>[svn-remote ""svn""]
    url = http://svn.mycom.com/svn/Project/uat
    fetch = :refs/remotes/trunk
[svn-remote ""task1""]
    url = http://svn.mycom.com/svn/Project/defects/task1
    fetch = :refs/remotes/task1
</code></pre>

<p>Now when I run</p>

<pre><code> $git log --decorate --all --graph
</code></pre>

<p>I see that my new branch has only 1 commit, ie. branch creation it does not relate to the actual history to master. it shows its own history line without any connection to prior commits. </p>

<p><strong>2. Clone with -T then adding branches</strong>
   Alternative solution I found was:</p>

<pre><code>$git svn clone http://svn.mycom.com/svn/Project/ -T uat Project --no-minimize-url
   Since the ""Defects"" has lot many branches, and it would take hours, i then did:

[svn-remote ""svn""]
    url = http://svn.mycom.com/svn/Project
    fetch = uat:refs/remotes/trunk
    branches = defects/{task1}:refs/branches/*
</code></pre>

<p>This seems to work nice and I do get the history. I am wondering what is the better way of the two, if there is anything I need to think about going from one vs the other option.
In this option though, if I have to add another branch, I cannot simply edit the branches section and new branch name in the comma separated list like branches = defects/{task1,task2}. This does not work feels like a GIT defect. 
I then just add another fetch line below the branches</p>

<pre><code>[svn-remote ""svn""]
    url = http://svn.mycom.com/svn/Project
    fetch = uat:refs/remotes/trunk
    branches = defects/{task1}:refs/branches/*
    fetch = defects/task2:refs/branches/task2
</code></pre>

<p>This works fine, i get the branch history and able to switch w/o issues. but just feels like a hack. I wish there was a way to just append it to branches list which would look clean.</p>
","0","710802","0"
"15906391","1031573","2013-04-09 15:41:22","6","3364","<git><svn><git-svn>","git-svn ignore large binary files","<p>I'm working with a large svn repository (30,000+ revisions).
I am using git-svn with limited success.</p>

<p>My major problem is that the svn repository contains frequent updates to large binary files (~30MB).  I do not care about the history of these files but I do care about the current versions of these files.  </p>

<p>git svn rebase runs very slowly if there have been multiple updates to the large binary files since my last svn rebase (which is common).  My git database also grows very quickly.  I'm looking to resolve these two key issues.</p>

<p>Ideally, what I would like to do is completely ignore these large files from svn and then run a script that fetches only the latest version which I would then block with my .gitignore.  I'm very open to other options though.</p>
","2","1031573","0"
"15919273","320681","2013-04-10 07:12:07","5","1097","<ruby><perl><git><svn><git-svn>","How to include other folders within the @INC for Perl? (Was: `Can't locate Git.pm in @INC` for svn2git)","<p>I am attempting to import an svn repo into git via <code>svn2git</code>.  When I run <code>svn2git --verbose https://url_to_repo</code> I end up getting the following output:</p>

<pre><code>Running command: git svn init --prefix=svn/ --no-metadata --trunk=trunk --tags=tags --branches=branches https://url_for_repository
Can't locate Git.pm in @INC (@INC contains: /usr/lib/perl5/site_perl/5.8.8 /home/cpdirect/perl5/lib/perl5 /usr/local/lib/perl5/5.8.8/x86_64-linux /usr/local/lib/perl5/5.8.8 /usr/local/lib/perl5/site_perl/5.8.8/x86_64-linux /usr/local/lib/perl5/site_perl/5.8.8 /usr/local/lib/perl5/site_perl .) at /usr/libexec/git-core/git-svn line 80.
BEGIN failed--compilation aborted at /usr/libexec/git-core/git-svn line 80.
command failed:
2&gt;&amp;1 git svn init --prefix=svn/ --no-metadata --trunk=trunk --tags=tags --branches=branches https://url_for_repository
</code></pre>

<p>It is obvious that Perl is unable to find the module within the path, however everything I've tried so far on CentOS 5.9 has not yielded results.  For example, the following are installed:</p>

<pre><code>git-1.7.11.3-1.el5.rf
git-svn-1.7.11.3-1.el5.rf
cpanel-git-1.7.11.3-1.cp1136
</code></pre>

<p>Any ideas of how to resolve this issue?</p>

<p>So it turns out that for some reason Perl doesn't know how to look at <code>/usr/lib/perl5/vendor_perl/5.8.8/</code>.  If I make links to every module that it needs within <code>/usr/lib/perl5/site_perl/5.8.8</code> it works seemingly fine and without error.  </p>

<p>So the real question here is HOW do you force Perl to look under that <code>vendor_perl</code> folder?</p>
","7","320681","0"
"15919359","320681","2013-04-10 07:17:02","0","36","<git><svn><github><git-svn>","How to discover the layout of an svn repo for an svn2git conversion?","<p>I'm attempting to convert an <code>svn</code> repo over to <code>git</code>, however I'm not entirely sure of the layout the current <code>svn</code> repo is using.  As I'm not adept with <code>svn</code> I am not sure how to peak inside of <code>svn</code> and ascertain exactly what I should be using for the proper conversion string for <a href=""https://github.com/nirvdrum/svn2git#usage"" rel=""nofollow""><code>svn2git</code> usage</a> </p>

<p>If I can determine this I would then be able to easily pick the option from those listed there.  Would appreciate any help knowing how to find this out in svn!</p>
","0","320681",""
"15974658","2274906","2013-04-12 14:58:30","0","44","<git><git-svn>","Using git/git-svn, how can I get out from remotes/trunk","<p>My directory structure was like this:</p>

<pre><code>feipu123/
feipu123/trunk
feipu123/trunk/work
feipu123/tags
feipu123/branch
</code></pre>

<p>I used this command:</p>

<pre><code>git reset --hard remotes/trunk
</code></pre>

<p>My directory structure became:</p>

<pre><code>feipu123/
feipu123/work
</code></pre>

<p>What can I do to make the file folders become the former look?</p>
","0","2274906",""
"15979801","584676","2013-04-12 19:53:14","0","29","<git><git-svn>","When using git-svn, is there a way to make a commit that 'git svn dcommit' will ignore pushing to its remote?","<p>I want to know if there is a way to tell git-svn to ignore a commit in history, and never push it to the remote server.</p>
","4","584676",""
"32638993","5347913","2015-09-17 20:01:42","4","4118","<git><svn><version-control><git-svn><git-clone>","Clone a specific svn branch alone into git with the version history for that branch alone","<p>I have a massive svn repository with trunk and multiple branches. I want to clone one specific branch, the most recent one alone into a git repo. I do not want the revision history for the whole svn repository but only from the time the branch was created. my svn repo have a standard structure, like branches,tags and trunk. I tried cloning a specific repo using the command similar to </p>

<pre><code>git svn clone https://{path to SVN repo}/branches/{my branch name}  
</code></pre>

<p>This works but considering how huge my repo is, the process is taking at-least a week if I leave my machine running non stop. I figured this is because, GIT is trying to get the version history from the very first commit into the repo. I wanted to check if it would be possible to clone just one branch into GIT with the version history for that branch alone? Sorry for the long question and any help would be appreciated.</p>

<p>When I try the solution using the --single-branch command I get an unknown command error. I assumed since I am using the GIT-SVN bridge, there might be a different command?</p>
","0","5347913",""
"16078772","310662","2013-04-18 09:07:59","0","771","<git-svn>","how to revert changes only for one file with git-svn?","<p>I've corrupted one file and I'd like to revert it back. My project is using git-svn.
So how can I revert this one particular file? Or even better if I could view whole change set of this file.</p>

<p>Detailed steps would be appreciated. </p>
","0","310662",""
"16092660","1000738","2013-04-18 20:40:45","0","314","<git><git-svn>","git-svn cloning repo that has been moved?","<p>We're in the process of switching from svn to git in a project. </p>

<p>Now one of the svn repos that we want to move, has quite a long history that we want to keep. 
So I've tried doing git-svn clone on it, and it works out fine. </p>

<p>However, the svn repo has been moved three times during its history. </p>

<p>The layout of the whole repo is something like this; </p>

<pre><code>repo_root/
trunk/
    projA_v1 (existed in the beginning)
    projA_v2 (then moved to v2)
    projA_v3 (and finally to v3)
    projB
    projC
branches/
    projA_b1
    projA_b2
    projB_b1
    projC_b1
tags/
    projA_t1
    projB_t1
    projC_t1
</code></pre>

<p>The project was at first called projA_v1, then moved to v2 and finally to v3. </p>

<p>Now when we do git-svn clone, we only get the history since the last move from 2 to 3. 
If we check the logs in svn we see the whole history correctly. </p>

<p>Is there anything I can do to get the whole history? There's about 3 years of lost history there, we'd rather keep it if we could. </p>

<p>Update:
I've tried to do git-svn clone on the whole repo now, from <code>repo_root</code>. I thought I could do that and then prune the resulting git repo with the instructions in <a href=""https://stackoverflow.com/questions/359424/detach-subdirectory-into-separate-git-repository"">Detach (move) subdirectory into separate Git repository</a>, it seems to work well. (the pruning bit at least)</p>

<p>There's still problems though. The branches won't behave correctly.. I guess it's because git-svn doesn't recognize them as branches, since the content in one of the branches isn't a copy of the whole trunk, but rather just a portion of the trunk. Any ideas? </p>

<p>In an ideal world I'd end up with a repo consisting of projA only, with the history from projA_v1 and v2, and the history in the projA branches and tags. </p>
","0","1000738",""
"16091953","980607","2013-04-18 19:57:10","5","5562","<git-svn><osx-mountain-lion>","How do I fix ""git-svn died of signal 6"" during clone?","<p>I'm trying to clone a new SVN repository with little more than trunk/branches/tags in it, but it fails with relatively little information:</p>

<pre><code>git svn clone --stdlayout https://mydomain.com/svn/myrepo
Initialized empty Git repository in /Users/datguy/myrepo/.git/
Authentication realm: &lt;https://mydomain.com&gt; (null)
Password for 'datguy': 
error: git-svn died of signal 6
</code></pre>

<p>I thought I was using the default versions of git &amp; svn that came with OSX 10.8.3, but I noticed that the svn version reported by the following two commands was different:</p>

<pre><code>$ git svn --version
git-svn version 1.7.10.2 (Apple Git-33) (svn 1.6.18)

$ svn --version
svn, version 1.7.7 (r1393599)
</code></pre>

<p>I apparently installed a newer version of svn with homebrew (in <code>/usr/local/bin/svn</code>). I am able to work with this repository using svn, including import, checkout, etc.  How do I figure out what's going wrong with git-svn, or update the svn bindings?</p>

<p><strong>EDIT</strong> - I dug into the console and found this perl crash report.  Unfortunately, I don't have enough experience reading these reports to know what it's trying to tell me. </p>

<pre><code>Process:         perl5.12 [13309]
Path:            /usr/bin/perl5.12
Identifier:      perl5.12
Version:         77.2
Code Type:       X86-64 (Native)
Parent Process:  git [13308]
User ID:         501

PlugIn Path:       /Library/Perl/5.12/darwin-thread-multi-2level/auto/SVN/_Ra/_Ra.bundle
PlugIn Identifier: _Ra.bundle
PlugIn Version:    ??? (52)

Date/Time:       2013-04-18 15:20:16.512 -0400
OS Version:      Mac OS X 10.8.3 (12D78)
Report Version:  10

Crashed Thread:  0  Dispatch queue: com.apple.main-thread

Exception Type:  EXC_CRASH (SIGABRT)
Exception Codes: 0x0000000000000000, 0x0000000000000000

Application Specific Information:
__abort() called

Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
0   libsystem_kernel.dylib          0x00007fff977d0d46 __kill + 10
1   libsystem_c.dylib               0x00007fff968b6ec0 __abort + 193
2   libsystem_c.dylib               0x00007fff9687877d __chk_fail + 35
3   libsystem_c.dylib               0x00007fff968787f0 __memset_chk + 41
4   libneon.27.dylib                0x000000010e0b2cf1 ne__ntlm_authenticate + 1018
5   libneon.27.dylib                0x000000010e0b1455 ntlm_challenge + 171
6   libneon.27.dylib                0x000000010e0afd17 ah_post_send + 1400
7   libneon.27.dylib                0x000000010e0a8a10 ne_end_request + 100
8   libneon.27.dylib                0x000000010e0a8bbc ne_request_dispatch + 70
9   libsvn_ra_neon-1.0.0.0.dylib    0x000000010e0729fd svn_ra_neon__request_dispatch + 404
10  libsvn_ra_neon-1.0.0.0.dylib    0x000000010e06d357 svn_ra_neon__exchange_capabilities + 186
11  libsvn_ra_neon-1.0.0.0.dylib    0x000000010e071156 0x10e063000 + 57686
12  libsvn_ra-1.0.0.0.dylib         0x000000010df4d096 svn_ra_open3 + 1170
13  libsvn_ra-1.0.0.0.dylib         0x000000010df4c483 svn_ra_open + 175
14  _Ra.bundle                      0x000000010e0db65b _wrap_svn_ra_open + 675
15  libperl.dylib                   0x000000010dc36abd Perl_pp_entersub + 2456
16  libperl.dylib                   0x000000010dc2eee1 Perl_runops_standard + 38
17  libperl.dylib                   0x000000010dbdff26 perl_run + 453
18  perl5.12                        0x000000010dbc5d54 main + 221
19  libdyld.dylib                   0x00007fff9685b7e1 start + 1
</code></pre>
","3","980607",""
"16128118","1441076","2013-04-21 04:59:18","2","2237","<git><svn><git-svn><smartgit>","Does SmartGit support git-svn?","<p>If SmartGit even supports git-svn, how would I go about using it? Would I clone my svn repository first then somehow link it to my git repository or vise versa? I found git-svn mentioned very briefly in the SmartGit documentation but it doesn't describe how to use it in the actual client.</p>
","0","1441076",""
"16129669","714495","2013-04-21 09:20:59","0","232","<git><svn><git-svn>","Modified files after git svn fetch. What does it mean and how to fix that","<p>We're going to use git instead of SVN and doing some research at the moment. I've tried to create git repository based on our SVN one. <code>git svn</code> is perfect. But after clone/fetch I've seen modified files in few repos (2 of 4 actually).</p>

<p>What is that? How to overcome that?</p>

<p>UPDATE: in both of repos that have modified files we could see same: files that are modified has upper case letter in name. For example: <code>paid.gif</code> and <code>Paid.gif</code> exists in SVN, and also in GIT, and <code>Paid.gif</code> becomes modified somehow. Also not only images, but other files that are named same (but differs with letter case) becomes modified.</p>

<p>Also svn repo is on Linux, but git is on my Mac, maybe it's important.</p>
","2","714495",""
"16132382","350810","2013-04-21 14:49:11","0","473","<git><git-svn>","git release management model : releases always from master branch?","<p>I am reading up <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">http://nvie.com/posts/a-successful-git-branching-model/</a> which seems very promising. </p>

<p>I am looking for a few clarifications which are kind of missing from this piece: </p>

<ol>
<li>Releases are always made from master - is that right? I may have a hotfix branch or release branch but the release is made from the master. So before a release get the branch merged to master, tag it and then make the release. Keeps life simple for me but I am not sure that's what gitflow is recommending too.</li>
<li>Tags always exist on the master branch for this precise reason. Each tag marks a release point. Is that OK too? </li>
</ol>
","0","350810","0"
"16138575","1533690","2013-04-22 02:33:23","2","2088","<git><svn><git-svn>","git-svn dcommit fail for ""URL access forbidden for unknown reason""","<p>When I type git svn dcommit, I got this</p>

<pre><code>Committing to https://some.server.com/proj1/v3 ...
URL access forbidden for unknown reason: access to '/proj1/!svn/bc/579/v3/path/to/a.php' forbidden at /usr/lib/git-core/git-svn line 922
</code></pre>

<p>I've verified <code>git svn rebase</code> works, which suggest that my account is right. Is there any advice or any documentation about how git-svn works?</p>
","1","1533690",""
"16142698","2306565","2013-04-22 08:36:09","2","549","<perl><git-svn>","git-svn fetch error ""0 [main] ?4828 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3 2 error 6, handle io_handle<0x0>""","<p>When I ran <code>git svn fetch</code>, I got the following error message. How do I fix it? Thanks very much.</p>

<pre>F:\gitsvntest>git svn fetch
      0 [main] ?4828 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    272 [main] ?4828 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   4902 [main] ?4828 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   5005 [main] ?4828 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   5079 [main] ?4828 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
      0 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x67
604000..0x67604014, done 0, windows pid 4828, Win32 error 487
      0 [main] ?1672 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    256 [main] ?1672 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   4911 [main] ?1672 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   5015 [main] ?1672 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   5078 [main] ?1672 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
5028759 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x67
604000..0x67604014, done 0, windows pid 1672, Win32 error 487
      0 [main] ?4636 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    200 [main] ?4636 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   4700 [main] ?4636 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   4761 [main] ?4636 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   4816 [main] ?4636 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
10058702 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 4636, Win32 error 487
      0 [main] ?2372 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    207 [main] ?2372 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   4974 [main] ?2372 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   5036 [main] ?2372 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   5092 [main] ?2372 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
15090148 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 2372, Win32 error 487
      0 [main] ?3928 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
-   4876 [main] ?3928 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.p
m - Win32 error 6, handle io_handle
   1204 [main] ?3928 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   1506 [main] ?3928 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   1608 [main] ?3928 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
20135923 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 3928, Win32 error 487
      0 [main] ?2188 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    205 [main] ?2188 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   4821 [main] ?2188 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   4882 [main] ?2188 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   4938 [main] ?2188 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
25169941 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 2188, Win32 error 487
      0 [main] ?3924 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    207 [main] ?3924 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   5118 [main] ?3924 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   5698 [main] ?3924 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   5821 [main] ?3924 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
30219728 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 3924, Win32 error 487
      0 [main] ?4480 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    273 [main] ?4480 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   6263 [main] ?4480 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   6597 [main] ?4480 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   6682 [main] ?4480 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
35259447 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 4480, Win32 error 487
      0 [main] ?1500 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    208 [main] ?1500 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   5733 [main] ?1500 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   5811 [main] ?1500 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   5876 [main] ?1500 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
40306890 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 1500, Win32 error 487
      0 [main] ?3356 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    260 [main] ?3356 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   1361 [main] ?3356 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   6935 [main] ?3356 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   7092 [main] ?3356 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
45360601 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 3356, Win32 error 487
      0 [main] ?1284 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    698 [main] ?1284 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   6959 [main] ?1284 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   7059 [main] ?1284 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   2267 [main] ?1284 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
50404771 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 1284, Win32 error 487
      0 [main] ?4120 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    317 [main] ?4120 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   6634 [main] ?4120 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   6699 [main] ?4120 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   6755 [main] ?4120 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
55449698 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 4120, Win32 error 487
      0 [main] ?3440 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    207 [main] ?3440 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
    852 [main] ?3440 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   6945 [main] ?3440 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
   7040 [main] ?3440 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
61057400 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 3440, Win32 error 487
      0 [main] ?5460 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    474 [main] ?5460 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
   5882 [main] ?5460 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
   7563 [main] ?5460 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
  12664 [main] ?5460 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
66108342 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 5460, Win32 error 487
      0 [main] ?3084 fhandler_base::fork_fixup: /libexec/git-core/git-svn - Win3
2 error 6, handle io_handle
    304 [main] ?3084 fhandler_base::fork_fixup: /usr/lib/perl5/5.8.8/Term/Cap.pm
 - Win32 error 6, handle io_handle
    699 [main] ?3084 fhandler_base::fork_fixup: /dev/pipew - Win32 error 6, hand
le io_handle
    843 [main] ?3084 fhandler_base::fork_fixup: /f/gitsvntest/.git/bk7BX7R03b -
Win32 error 6, handle io_handle
    929 [main] ?3084 fhandler_base::fork_fixup: /f/gitsvntest/.git/aA7kR4Avx4 -
Win32 error 6, handle io_handle
71155467 [main] perl.exe"" 3860 fork_copy: loaded dll data/bss pass 0 failed, 0x6
7604000..0x67604014, done 0, windows pid 3084, Win32 error 487</pre>
","0","2306565",""
"32773692","3983424","2015-09-25 02:10:36","1","978","<git><svn><git-svn><git-clone>","git-svn clone with multiple repositories to multiple branches in local machine","<p>I have a svn remote repo as follows:</p>

<pre><code>SW
    branches
        A
        B
        C
    tags

    trunk
</code></pre>

<p>Initially I was working on Branch A, so I treat it as a repository and use the following command to get it on my local machine</p>

<pre><code>git svn clone --no-minimize-url rHEAD /path/to/svn-server/branches/A
</code></pre>

<p>so my local repository will be like this:</p>

<pre><code>A [Folder]
    master       [branch]
    my_devlop    [branch]
</code></pre>

<p>But now I also have to work on branch C, I need to merge some of my code in my_devlop to branch C.</p>

<p>So I use the following command to get all of the branches under SW:</p>

<pre><code>git svn clone --no-minimize-url rHEAD /path/to/svn-server/branches
</code></pre>

<p>However, this will treat each branch as a single repository under branches.</p>

<p>Like the following in my local machine</p>

<pre><code>branches [folder]
    A    [folder]
    B    [folder]
    C    [folder]
</code></pre>

<p>But what I want is the following </p>

<pre><code>branches [folder]
    A [branch]
    B [branch]
    C [branch]    
</code></pre>

<p>So that I can merge each branch in my local machine.
Is this possible? Or my workflow has some mistake?</p>

<p>Any tips will be appreciate.</p>
","0","3983424",""
"16236133","1654825","2013-04-26 12:11:05","1","132","<git><configuration><git-svn>","How to make git to clone svn settings also?","<p>I'd like to create a read-only Git mirror of a SVN repository. I don't need to setup the Git->SVN direction and I've already done the SVN-Git synchronization. </p>

<p>Now I would like to somehow ""clone"" the git-svn setup from the Git server to a local Git repository as I would like to have a possibility to commit to the SVN repository directly, not via the Git mirror. For instance, after cloning my Git repository with <code>git pull</code> and committing some changes, I'd like to do <code>git svn dcommit</code> and the commit should be correctly written to the SVN repository. I don't need to fetch the changes directly from SVN, though it'd be nice to have such possibility. Obviously, I don't want to clone the SVN repository (which has about 45.000 revisions) from scratch to my local disc.</p>

<p>Is this somehow possible or is there any easy script that would solve my problem? Or is there any better way to solve the whole Git mirroring? Unfortunately, I don't have admin access to the SVN repository.</p>
","2","1654825",""
"16265162","135630","2013-04-28 16:42:22","3","331","<git><git-svn>","Migrating a git-svn branch to a git branch","<p>My project (which is rather large, at ~2 million lines of code and tens of thousands of commits) is currently switching from git-svn to git. Many users have git-svn branches with history that would be nice to have in the new pure git repository. The basic scenario is like this</p>

<p>The old git-svn repo:</p>

<pre><code>A-B-C-D-E-F (master)
</code></pre>

<p>I have a branch on this repository that has merged master in several times, eg:</p>

<pre><code>    G-H---I-J-K (feature)
   /     /
A-B-C-D-E-F (master)
</code></pre>

<p>I want to move this branch to the new pure-git repository and maintain my history. To make things more complex, the directory structure of the pure-git repository and svn repository is slightly different. Specifically, the base directory structure in this repository has two directories, e.g:</p>

<p><Code>
foo/
bar/
</Code></p>

<p>In the new git repository, <code>bar/</code> has been moved to a new repository.</p>

<p>How can I move this branch to the new repository and end up with something like this in the pure-git repo?</p>

<pre><code>    G'-H'----I'-J'-K' (feature)
    /       /
A'-B'-C'-D'-E'-F' (master)
</code></pre>

<p>I thought the following would work:</p>

<p>From the feature branch on the git-svn repo:</p>

<pre><code>git filter-branch -f --index-filter ""git rm -rf --cached --ignore-unmatch bar"" B..HEAD
</code></pre>

<p>Which should remove all modifications to the foo directory, which is non-existent in the new repo.
Then, add the git-svn repo as a remote for the pure git repo and do this from the pure-git repo:</p>

<pre><code>git checkout -b B' feature
git rebase --preserve-merges --onto feature remotes/old_git_svn_repo/master remotes/old_git_svn_repo/feature
</code></pre>

<p>Unfortunately, this doesn't seem to work. I'm still required to manually resolve all of the merge-conflicts that I've already resolved in my feature branch. Is there a way to do what I want?</p>
","3","135630",""
"32858595","5391600","2015-09-30 05:41:35","10","8646","<git><svn><git-svn>","""git svn"" command fails with error ""git: 'svn' is not a git command. See 'git --help'.""","<p>I am trying to execute this command on my redhat 6.5 box and it throws the error ""git: 'svn' is not a git command. See 'git --help'."" I have git 1.7.1 installed on this box. Please help.</p>

<p>git svn clone <a href=""http://yourcompany.com/path/to/svn/project-abc"" rel=""noreferrer"">http://yourcompany.com/path/to/svn/project-abc</a> project-abc</p>
","0","5391600","0"
"32951242","797963","2015-10-05 14:36:27","0","113","<git><svn><version-control><git-svn>","git svn not updating all branches when using revision range","<p>I'm seeing some really odd behavior in git svn where it isn't updating all branches when passing in revision ranges. </p>

<p>My repo is HUGE, so I'm converting in 5k revision chunks. An example of the commands is below.</p>

<pre><code>git svn clone --trunk=/trunk --branches=/branches --authors-file=authors.txt -r 75000:80000 https://svn.prod.oldcompany.com/repo/backend backend_conversion
git svn fetch 80000:85000
git svn fetch 85000:90000
git svn fetch 90000:HEAD
</code></pre>

<p>Most of my branches do get all of their history and revisions converted, but trunk for example only picks up the first revision range (trunk in svn, it's master in git). All other revisions are missing. I've tried resetting HEAD and re-syncing, but git svn won't pick up the later revisions on trunk. I'm starting to think it is because we at one point did have a master branch in svn under /branches/master, but I don't see why it would really make a difference due to the difference in refs for branches and trunk. Any ideas as to why? </p>
","0","797963",""
"33549034","3896997","2015-11-05 15:50:56","5","7948","<linux><git><git-svn><yum><apt-get>","Install git or update git without apt-get or yum","<p>I have some linux boxes that do not allow me to use yum to install packages. Instead I need to download the zip or tar and then use a package manager to install the items on my linux boxes.</p>

<p>When you go to the <a href=""https://git-scm.com/download/linux"" rel=""noreferrer"">git-scm</a> page, the only way they provide to install git is to use yum, apt-get, etc from the command line. </p>

<p>Why is there not just a zip file?
Where can I find the package to install?
Has anyone else had this same issue?</p>
","6","3896997",""
"17018267","742173","2013-06-10 06:49:17","2","249","<git><git-svn><internals><git-notes>","Why parent is stored in git notes?","<p>The way git store notes:</p>

<ul>
<li>Git only store one note per commit for single namespace. One can have multiple namespace. Default namespace is commit.</li>
<li>.git/refs/notes/ contain one hash (say, <code>MainHash_2</code>), which is a tree object. Whenever you create a note the hash get changed. </li>
<li>This tree object contain two more hashes. One to another tree structure (the notes tree structure, say <code>NOTES_2</code>) and one to parent tree object(the one in the the .git/refs/notes/ before creating this note, say <code>MainHash_1</code> )</li>
<li>The notes tree structure contains one entry for each note. Each entry have two hash: one to note content and other to specified commit.</li>
</ul>

<p>As mentioned in third point why the parent is stored? As this parent(its type is same what is mentioned in point two) also contain another tree which contain one entry per note.</p>

<p>Suppose currently you have three notes. <code>MainHash_2</code> contains a hash to <code>NOTES_2</code>, which contain three entries for each note. <code>MainHash_1</code> contains a hash to <code>NOTES_1</code>, which contain two entries(for all the remaining notes except the one created now). <strong>Why storing these two entries twice and so on??</strong></p>
","0","742173","0"
"33618762","3896997","2015-11-09 21:37:23","3","3730","<git><git-svn><yum><rhel6>","git-svn package not found for RHEL.6 linux server","<p>I am doing the command <code>yum install git-svn</code> and I am getting the error message <code>No package git-svn available</code>.</p>

<p>This is an internal RHEL.6 linux server. When my company built the RHEL.5 linux boxes, we had the git-svn repo put on their by default. However, now it is not on RHEL.6 by default :(</p>

<p>What I have tried:</p>

<ol>
<li>Plenty of <a href=""https://www.google.com/search?client=safari&amp;rls=en&amp;q=yum%20install%20git-svn%20package%20not%20found&amp;ie=UTF-8&amp;oe=UTF-8"" rel=""nofollow noreferrer"">Googling</a>. I have tried everything on page 1.</li>
<li><a href=""https://stackoverflow.com/questions/8653531/installing-building-git-svn-for-rhel-6"">Installing/building git-svn for RHEL 6</a></li>
<li><code>yum install url</code> from <a href=""http://www.rpmfind.net/linux/rpm2html/search.php?query=git-svn"" rel=""nofollow noreferrer"">rpm find</a> but I don't see a valid url</li>
</ol>

<p>Is there a url I can pull this from using <code>yum</code>?</p>

<p>Any more options that I do not know about?</p>

<p>Server information:</p>

<p><code>$ git --version
git version 1.7.1</code></p>

<p><code>$ rpm -q git
git-1.7.1-3.el6_4.1.x86_64</code></p>

<pre><code>$ yum repolist

Loaded plugins: rhnplugin, security
This system is receiving updates from RHN Classic or RHN Satellite.
repo id repo name status
rhel-x86_64-server-6-datacenter RHEL6 Server Datace 16167
rhel-x86_64-server-6-datacenter-epel RHEL6 Server Datace 22013
rhel-x86_64-server-6-datacenter-hpsa RHEL6 Server Datace 101
rhel-x86_64-server-6-datacenter-pe-3-8-2 RHEL6 Server Datace 65
rhel-x86_64-server-6-datacenter-puppet-pe-agent-3-8-2 RHEL6 Server Datace 24
rhel-x86_64-server-6-datacenter-spacewalk-client RHEL6 Server Datace 22
rhel-x86_64-server-6-datacenter-company-tools RHEL6 Server Datace 150
rhel-x86_64-server-6-datacenter-tools RHEL6 Server Datace 184
rhel-x86_64-server-6-datacenter-zero-day RHEL6 Server Datace
</code></pre>

<p>Just to show what happens when I do <code>git svn</code>:</p>

<pre><code>$ git svn
git: 'svn' is not a git command. See 'git --help'.

Did you mean one of these?
    fsck
    show
</code></pre>
","8","3896997",""
"33666997","798406","2015-11-12 08:20:23","1","150","<git><svn><git-svn>","Git move from SVN: Where does git 2.6 store svn tracking branches?","<p>I have the task to move a project from SVN to Git and I followed the tutorial in <a href=""https://git-scm.com/book/it/v2/Git-and-Other-Systems-Migrating-to-Git"" rel=""nofollow"">https://git-scm.com/book/it/v2/Git-and-Other-Systems-Migrating-to-Git</a>. The good point: it worked! The sad point, the tutorial seems to be out-dated when it comes to moving the remote refs for tags and branches.</p>

<p>The tutorial states, that they are stored in</p>

<p><code>.git/refs/remotes/origin/tags/*</code></p>

<p>however, in my svn clone, this directory is empty. They seem to be stored in</p>

<p><code>.git/svn/refs/remotes/origin/tags/*</code></p>

<p>Same for branches, I expected them in</p>

<p><code>.git/refs/remotes/</code></p>

<p>but found them in</p>

<p><code>.git/svn/refs/remotes/</code></p>

<p>So, my question to you is now: is it safe to follow the tutorial but replace the corresponding paths with the one, I found?</p>

<p><strong>Edit 1:</strong></p>

<p>Assuming that it is indeed safe, I copied the references to their new destination. Unfortunately, that doesn't work for me:</p>

<pre><code>$ git tag --list

$
</code></pre>

<p>Even though, the folder <code>.git/ref/tags/</code> is not empty. There I find tag-named folders with the following files:</p>

<pre><code>-rw-r--r-- 1 delo 1049089   96 Nov 12 10:00 .rev_map.9585454d-0aa9-4b53-3453-ca0f383a6637
-rw-r--r-- 1 delo 1049089 247K Nov 12 10:00 index
-rw-r--r-- 1 delo 1049089   24 Nov 12 10:00 unhandled.log
</code></pre>

<p>Same for the branches. I think, this is not what it is supposed to be...</p>

<p>How do I fix that?</p>
","0","798406",""
"17123951","1007758","2013-06-15 13:03:46","2","2967","<git><git-svn><git-merge>","Git: Use git-merge-file to resolve conflicts using theirs/ours","<p>I have don a <code>git svn rebase</code> and I got a conflict. I want to use <code>git-merge-file</code> to merge the two versions of the file by choosing the version on the server. <code>git-merge-file</code> has this option called <code>--theirs</code> but <code>git-merg-file</code> takes 3 parameters. How can I pass it just my file that contains the conflict markers and make it choose their version?</p>

<p>I also tried <code>git merge -Xtheirs file.cpp</code> but it doesn't work.</p>
","0","1007758","0"
"17153766","1373600","2013-06-17 17:56:53","0","1669","<git><svn><version-control><git-svn>","git-svn clone dying with signal 6","<p>So I have been cloning a bunch of projects in my repository in order to migrate over to Git. I have been able to successfully clone all of them except for one. It happens to be the largest project, but I am not sure if this is relevant. During the clone, I am getting a 'git-svn died of signal 6' error. Specifically</p>

<pre><code>""Assertion failed: (svn_uri_is_canonical(child_uri, NULL)), function uri_skip_ancestor, file subversion/libsvn_subr/dirent_uri.c""
error: git-svn died of signal 6.
</code></pre>

<p>It is failing the Assertion that checks if a URI is canonical. Unfortunately it takes about 4 hours to reach the point where it fails, so making changes and re-cloning is extremely impractical. I read all about URI's needing to be canonical because of the way that SVN handles URI's internally. I read all about changing the .git/config file by removing double slashes or trailing slashes... which I don't have any of. I just cannot figure out why only this project is failing. Does anyone have any ideas as to what specific about a project could be causing this when all of my 16 other projects cloned with no problem? Also, the project is in a very standard trunk-branches-tags format.</p>
","0","1373600",""
"17186341","236639","2013-06-19 08:24:11","2","130","<git><git-svn>","Different authentication for different branch in git","<p>At our company, we are evaulating to migrate to <code>GIT</code> from <code>SVN</code>. Here we are following a process in which we have the following branch and access control.  </p>

<pre><code>-----------------------------------------------
| Branch    | Purpose          | ACL          |  
-----------------------------------------------
| `master`  | live copy        | AGM          |  
-----------------------------------------------
| `staging` | staging copy     | AGM, TL      |
-----------------------------------------------
| 'dev`     | development copy | AGM, TL, Devs|
-----------------------------------------------
</code></pre>

<p>Now all devs create a feature branch from the <code>dev</code> branch and again merge it in <code>dev</code> when they have finished working and push it. Now TL review the work and cherry pick or merge <code>dev</code> in staging, depending on the sencario. If everything is well they push the changes on <code>staging</code>. Same is done by AGM's for <code>master</code> branch.<br>
We want that devs will be able to pull the changes from <code>staging</code> and <code>master</code> branch, but will not be able to push. </p>

<p>So the questions are:<br>
- How can we setup a authentication system where only the allowed one will be able to push.?<br>
- Any pointer or guidelines while migrating ?</p>
","0","236639","0"
"17282387","162325","2013-06-24 18:26:31","1","108","<git><svn><git-svn>","git-svn cloning a repo that lives in git but fetches from svn","<p>I am a bit lost on what is the correct workflow for the following scenario.
I'm using an open source project that's hosted on google code in a subversion repo. I prefer to use git so I've used git-svn to clone the svn repo to a git repo.
The original author still commits to the svn repo (yay!) and me and my team commit to the git repo.</p>

<p>I need to be able to
 - Clone the git repo (that contains the svn history) 
 - Configure git so that it can fetch from the svn repository
 - configure git-svn so that it fetches from a particular revision number </p>

<p>Note: when you clone the git repo all links to svn are lost. </p>
","2","162325",""
"33860409","2554021","2015-11-22 21:26:37","1","25","<git><git-svn>","""git svn"" showing many removed svn tags","<p>A svn repository I cloned, had old useless tags deleted, but now after cloning repo with git svn, I can see every of these removed tags in remote tags. </p>

<p>How can this be possible ? Is there a way to tell git svn to not create references to deleted remote svn tags ?</p>
","0","2554021",""
"17319673","1671066","2013-06-26 12:12:34","3","906","<git><svn><git-svn>","How to repair git-svn history when the commit message of a svn commit changes?","<p>I use <code>git-svn</code> to connect to a subversion server. It seems to be possible to change the subversion commit message (of an old commit). See the accepted answers <a href=""https://stackoverflow.com/questions/304383/how-do-i-edit-a-log-message-that-i-already-committed-in-subversion"">here</a> or <a href=""https://softwareengineering.stackexchange.com/questions/105226/why-cant-i-edit-an-svn-commit-message"">here</a>. However <code>git svn rebase</code> does not notice such change.</p>

<p>How can I tell <code>git svn</code> to ""repair"" such changes in its history?</p>

<hr>

<p>At first I did not notice that my history was broken by still containing the old commit message until I added a remote. This remote is another <code>git-svn</code> checkout of the same server. When one of the two checkouts updates (using <code>git svn rebase</code>) before the commit message in svn is changed and the other updates after the change, then the <code>git-svn</code> branch will point to different SHA-1 hashes in my repository and the remotes repository. That is one of the <code>git-svn</code> branch pointer is wrong and needs to be resynchronized/repaired:</p>

<pre><code>            / C  - D  - E  - F
.... - A - B
            \ C' - D' - E' - F'
              ^
         commit-message
         later changed
</code></pre>
","0","1671066",""
"17326281","584676","2013-06-26 17:05:14","2","50","<git><git-svn>","Is it possible to merge a branch in git and preserve the history?","<p>I use git-svn to interface with our Subversion repository at work. I created a branch (let's call it FeatureBranch) to work on a new feature, but had to switch back to the master branch to work on something else. When I began work on what was supposed to be done on FeatureBranch, I forgot to check out FeatureBranch again and made several commits to the master branch before realizing what I had done.</p>

<p>I had originally planned on doing the following to fix this (I have not yet dcommitted my changes to Subversion, so they are all grouped together as the most recent commits I've made):</p>

<pre><code>git checkout FeatureBranch
git merge master
git checkout master
git reset --hard HEAD~n
</code></pre>

<p>where <em>n</em> is the number of commits I want to remove from the master branch since they would be in FeatureBranch now. However, <em>git merge</em> does not seem to retain history when merging to another branch (it shows as a single commit). How do you merge only certain commits in git to another branch, while retaining history? I've heard the term <em>cherry-pick</em> before, is this the functionality I should be looking into?</p>
","0","584676",""
"34614083","4403070","2016-01-05 14:30:14","0","40","<git><github><git-svn>","Incorporate existing project into existing git repo","<p>Here's the scenario:</p>

<p>My company is updating a website for one of our clients. Until recently we would develop on a local machine and then commit our changes on their SVN account. In order to access their SVN account we needed to be connected to their VPN. My boss told me the client gets upset if I commit changes while a project is still in progress as they used a ""waterfall"" development model. Therefore, I currently have a few dozen files that have uncommitted changes.</p>

<p>I don't know much about SVN or ""waterfall"" development but that doesn't matter because last week, while my company was shut down for the holidays, they ditched their VPN as well as their SVN account and switched over to gitHub and an agile development model. Now I can't commit my changes to their project's SVN account because neither it nor the VPN exist anymore.</p>

<p>My question is, once I get access to their gitHub account and I clone a repo of the project, how can I incorporate my existing changes? Do I just need to remember each of the several dozen files I worked on and manually copy them over to the repo and commit? That seems like a pain. Is there an alternate way to do this?</p>

<p>Thanks</p>
","0","4403070",""
"34620655","126978","2016-01-05 20:29:19","13","2851","<git><svn><version-control><git-svn>","SVN-Git migration: clean-git branch error","<p>I'm following the SVN to Git <a href=""https://www.atlassian.com/git/tutorials/migrating-overview"" rel=""noreferrer"">migration guide</a>, the <code>git svn clone</code> goes fine but when I run the cleanup command I get this error, I'm not even sure what this means. How do I solve this ?</p>

<pre><code>java -Dfile.encoding=utf-8 -jar ~/svn-migration-scripts.jar clean-git
Could not retrieve the config for the key: svn-remote.svn.branches
</code></pre>
","0","126978","0"
"34623108","124069","2016-01-05 23:27:01","8","2693","<git-svn>","git svn branch results in Authentication failed","<p>I'm trying to do all of my branching and merging via <code>git-svn</code>, however I'm hung up on the branching in subversion.</p>

<p>Our admin tells me that I have full read/write permissions on the repo, and I CAN fetch the latest code.</p>

<p>For a test, I deleted my <code>~/.subversion/svn.simple</code> directory and ran this.</p>

<pre><code>04:13 pm [214423L] C:\Dev\MyFooApp.Bar [master]
$ git svn fetch
Authentication realm: &lt;https://code:443&gt; VisualSVN Server
Password for 'cflorell': {my password}

04:14 pm [214423L] C:\Dev\MyFooApp.Bar [master]
$ git svn fetch

04:14 pm [214423L] C:\Dev\MyFooApp.Bar [master]
$
</code></pre>

<p>Also, if I clone the repo using Tortoise, and then create a branch using <code>svn</code> it appears to work.</p>

<pre><code>04:43 pm [214423L] C:\Dev\MyFooApp.Bar
$ svn copy https://code/svn/MyFooApp.Bar/trunk https://code/svn/MyFooApp.Bar/branches/test-branch -m ""test branch""
Committing transaction...
Committed revision 93.
</code></pre>

<p>But upon trying to create a branch using <code>git-svn</code>, it still says my auth is invalid.</p>

<pre><code>04:14 pm [214423L] C:\Dev\MyFooApp.Bar [master]
$ git svn branch develop
Copying https://code/svn/MyFooApp.Bar/trunk at r92 to https://code/svn/MyFooApp.Bar/branches/develop...
Authentication failed: Unable to connect to a repository at URL 'https://code/svn/MyFooApp.Bar/trunk': No more credentials or we tried too many times.
Authentication failed at C:\Program Files\Git\mingw64/libexec/git-core\git-svn line 1196.

04:14 pm [214423L] C:\Dev\MyFooApp.Bar [master]
$
</code></pre>

<p>My <code>config</code> file is <em>I believe</em> correct.</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
    hideDotFiles = dotGitOnly
[svn-remote ""svn""]
    url = https://code/svn/MyFooApp.Bar
    fetch = trunk:refs/remotes/svn/trunk
    branches = branches/*:refs/remotes/svn/*
    tags = tags/*:refs/remotes/svn/tags/*
</code></pre>

<p>Where might I be going wrong with all of this?</p>
","6","124069","0"
"34632731","1695569","2016-01-06 12:04:30","1","27","<git><git-svn>","Why does git-svn make branches with names like trunk@34663","<p>I am writing a SVN to Git migration script. When I run <code>git svn clone</code> git-svn creates a handful of remote branches that ends in <code>@svnrevision</code> (for example <code>trunk@34663</code>).</p>

<p>Why are these branches created and what are they used for?</p>
","0","1695569",""
"34718558","1648645","2016-01-11 09:58:06","0","49","<git><svn><version-control><merge><git-svn>","Generating git tree from git svn linear hierarchy with tags in subject","<p>So I have a problem, which I'm guessing is common to people who have migrated from svn to git, and I'm hoping someone has written a script to solve it, so I don't have to.  </p>

<p>So when we used svn as our primary repo, branching/tagging was much more expensive, so we had 3 branches, development, qa and production, and tagged each production release.  So in day to day development, jira tickets were worked on on the current development head, and committed to that head with a title beginning 'JIRA: ABC-123' where ABC-123 identifies the ticket, where ABC is the functional grouping and 123 the ticket number.  In our model, functional elements from development would be merged into qa for testing (the tactical commits in development, became a larger strategic commit in qa), and the bug fixes to those strategic commits are added back to dev before being merged into a 'release branch' which was them merged back into qa and then production.  </p>

<p>The git svn clone of development has (correctly) created a single long chain of commits leading back from the development branch.  </p>

<p>However, I'd like to restructure that, such that all of the various modular commits, are separated into branches, which are periodically merged back into development, such that I should be able to go back and find a point in the development branch history, which is common to the current qa, production and development branches, from which I can rebuild qa and production branches, which ought to be basically development less a few feature branches.  </p>

<p>I've manually gone back about a month, reverting tickets and comparing what I've got with the commit we created by manually diffing the files in the development branch with the qa branch, but that diff is just too big, for git to generate meaningful auto-merges.  I suspect my problem is there was active development in module A in november/december which went from dev into qa and so was released, whereas module B which was also being developed when into dev, but not qa/prod, and so I need to remove A and B from origin/master to create a common ancestor so I can add back in A generate qa, or A and B to get to the current development branch.  </p>

<p>Now I accept there will be a degree of manual conflict resolution required, where commits A and B apparently in different areas, happen to change the same file, but I'm hoping git can cope with most things.  I've found in most cases when I ignore whitespace, diff's can be separated out, as long as they're done in sequence.  </p>

<p>I suspect I need to use <code>git log --date-order --date=iso --format=:format:%H\ %cd\ %s</code> to generate something which I can read and from that script generating the instructions to split out all the commits into branches by module, from a common point, but having spent 2 days on this already, so I'm hoping someone else has solved this problem.  If not, I'll just have to solve it myself, and post the solution here so the next person can use it :-)</p>

<p>Edit</p>

<p>So looking at git rebase, I thought perhaps a diagram might help:-</p>

<p>I guess what I currently have is like this (with the ticket module/numbers underneath)</p>

<pre><code>A---------B---------C---------D---------E---------F---------G
ABC-123   DEF-111   GHI-165   ABC-124   DEF-111   DEF-112   GHI-166
</code></pre>

<p>What I ideally want is </p>

<pre><code> C'--------G'
 GHI-165   GHI-166
/
A---------D'
ABC-123   ABC-124
\
 B---------E'--------F'
 DEF-111   DEF-111   DEF-112
</code></pre>

<p>And ultimately</p>

<pre><code> C'--------G'
 GHI-165   GHI-166
/
A---------D'
ABC-123   ABC-124
\
 B---------E'
 DEF-111   DEF-111
 \
  F'
  DEF-112
</code></pre>

<p>So that I can create a production branch, based on A(ABC-123), which only contains the B---E' branch (the DEF-111 ticket)</p>
","1","1648645",""
"18327426","566279","2013-08-20 05:15:38","1","278","<git-svn><smartgit>","How do I switch to git-svn compatibility mode in SmartGit on Windows","<p>The documentation on the SmartGit website and in their shipped documentation pdf file talks about having a <a href=""http://www.syntevo.com/smartgithg/documentation?page=concepts-svn"" rel=""nofollow"">Normal mode and a git-svn compatibility mode</a>.</p>

<p>My question is: How do I switch to git-svn compatibility mode in SmartGit on Windows?</p>
","0","566279",""
"18331554","1237653","2013-08-20 09:28:29","4","823","<git><git-svn>","Slow git-svn rebase reporting ""W:unknown path/rev"" and ""W:svn cherry-pick ignored""","<p>I'm using git-svn on top of a Subversion repository with a standard layout. </p>

<p>Since we started to use branches, <code>git svn rebase</code> has become slow as hell (especially on windows machines) and reports tons of the following warnings:</p>

<pre><code>[...]
W:unknown path/rev in svn:mergeinfo dirprop: /branches/2.0.x:3152
W:unknown path/rev in svn:mergeinfo dirprop: /branches/2.0.x:3157
W:unknown path/rev in svn:mergeinfo dirprop: /branches/2.0.x:3159-3196
[...]
W:svn cherry-pick ignored (/branches/2.0.x:852-853,855-861,865-884,3078,3081-3082,3102,3105-3109,3111,3119,3121,3125-3126,3129,3131,3133-3135,3138,3143-3144,3146-3147,3150,3152,3157,3159-3196,3198-3201,3208-3219) - missing 1 commit(s) (eg 606cd9303f245a6c93cea57ecf4d6faf585616cf)
r3222 = 240a0faa016ce74d708832a1d88e32b5f939bfb5 (refs/remotes/trunk)
</code></pre>

<p>What are they all about (<em>unknown path/rev</em> and <em>missing commits</em>) and how can I resolve them to avoid the slowdown of the synchronization with the subversion repository? </p>

<p>We really stick to a standard Subversion repository layout and carefully merge from branches. So the <code>svn:mergeinfo</code> properties are correct and all do make sense.</p>

<p>P.S.: I noticed that using <code>git svn fetch</code> at least seems to minimize the unknown-path warnings. But what are all thos ""missing commit"" warnings about?</p>
","0","1237653","0"
"18337062","2558706","2013-08-20 14:01:52","1","155","<git><github><git-svn>","git commit not working on directory","<p>First of all, I am new to git and I'm sorry in advance if my question seems foolish to you.</p>
<p>I'm working on the files inside a directory say</p>
<p>FrmMain/FrmMain/Forms/ [Has approx 100 files]</p>
<p>I have initialized the git at the Parent Directory i.e. first FrmMain</p>
<p>Now when I try to <code>git commit</code> the modified files inside the Forms directory, after I have applied the <code>git add .</code>, it doesn't commit the changes.</p>
<p>To be further clear, here is the sequence of commands that I'm applying:</p>
<p><img src=""https://i.stack.imgur.com/mClLB.png"" alt=""enter image description here"" /></p>
<p>What I'm getting is: It doesn't bring the folder to staging area. Any Idea how may I get this to work?</p>
","2","2558706","0"
"34879226","126978","2016-01-19 14:21:59","3","2877","<git><git-svn>","Exclude files from git svn clone","<p>I'm migrating an SVN repo to Git and I have 7000+ binary files I would like to exclude from being imported and becoming part of the Git history from the start, as opposed to cleaning them up after (ref this <a href=""https://stackoverflow.com/questions/34777228/convert-git-rm-to-git-rm-cached"">question</a>). The location of the files doesn't follow a very regular pattern so I'd have to supply a rather long list of locations to git, and I have ~8000 commits to take into consideration. </p>

<p><strong>If my goal is to avoid bloating the repo with unnecessary files, what is the best approach to do that ?</strong></p>

<p>Is there a way I can exclude these from the start, perhaps as a flag to git svn clone ? Would adding them to a <code>.gitignore</code> before clone prevent them from being added ?   </p>

<p>The other option would be to import all, then rewrite the whole history with <code>git filter-branch</code> to remove all those files before sharing the repo with others.</p>
","2","126978",""
"4491258","70942","2010-12-20 15:50:47","3","447","<svn><git><git-svn>","Git svn work flow, making branchs in git-svn","<pre><code>git version 1.7.3.3
</code></pre>

<p>I had a project that was using git.</p>

<p>Our company changed its policy and wanted everyone to switch to svn.</p>

<p>So I imported my project in subversion using the standard layout (trunk, branchs, and tags).</p>

<p>So my current workflow is the following:</p>

<p>Make some changes, put them in the staging area, then commit them to git. However, I get a little confused when it comes to svn. First I rebase to get the latest changes from subversion. Then I do a dcommit.</p>

<p>i.e.</p>

<p>Stage the change files</p>

<pre><code>git stage app_driver.c
</code></pre>

<p>Commit them to git</p>

<pre><code>git commit -m""Added some changes""
</code></pre>

<p>Get the latest changes from svn</p>

<pre><code>git svn rebase
</code></pre>

<p>commit the my latest changes to svn</p>

<pre><code>git svn dcommit
</code></pre>

<p>push the changes to my git repository</p>

<pre><code>git push upstream my_project
</code></pre>

<p>However, the real confusion comes when I make a new branch in git, and how I can commit to that branch in subversion.</p>

<pre><code>git checkout -b add_new_feature
</code></pre>

<p>Then how do I make the new branch in svn and commit it?</p>

<p>Many thanks for any suggestions,</p>
","1","70942","0"
"41901209","3597669","2017-01-27 19:02:30","1","153","<git><svn><github><git-svn>","Is there a way to have media in subversion and code in git?","<p>There is a project which I have recently become part of. The project is listed in sourceforge.net and they have been using its services for last several years. The project has been using sourceforge.net for 17 years and it has lot of graphical assets, music etc. Now they want to migrate the project to github.com. </p>

<p>Now github.com isn't that great for providing free space even if its an open-source project. It conks out at 1 GB for free space and it isn't great with images, audio, video etc. (only exception is using <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">git-lfs</a> which has its own limitations). Git itself makes a <a href=""https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-sourcecode-an-analysis-of-alexas-1m-28-07-2015/"" rel=""nofollow noreferrer"">copy</a> of the repo. inside .git which doesn't help its case especially with big media files. So even a single 500 MB repo. will top 1 GB easily. </p>

<p>I have seen some repos. where the code part is kept at github.com or any git repository, while the images/animation etc. is kept at sourceforge or some place which has svn. </p>

<p>How to go about doing about doing that. I am guessing the way to do that is using git-svn but how should it be approached ? </p>

<p>I did read <a href=""https://stackoverflow.com/questions/465042/is-it-possible-to-have-a-subversion-repository-as-a-git-submodule#"">Is it possible to have a Subversion repository as a Git submodule?</a> but that's so old so would hope in the interim period something new has come along </p>
","1","3597669","0"
"4503915","550496","2010-12-21 21:07:37","2","340","<git><git-svn>","Merge and push all git branches","<p>I've cloned an whole std-layout subversion repository with git-svn. My git config is defined as:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = https://firebird.svn.sourceforge.net/svnroot/firebird
    fetch = firebird/trunk:refs/remotes/trunk
    branches = firebird/branches/*:refs/remotes/*
    tags = firebird/tags/*:refs/remotes/tags/*
[remote ""origin""]
    url = git@github.com:asfernandes/firebird.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/tags/*:refs/tags/*
    push = +refs/heads/*:refs/heads/*
    push = +refs/tags/*:refs/tags/*
</code></pre>

<p>I'm pushing all branches to this github with the below bash script. I've local branches tracking the remote ones.</p>

<pre><code>#!/bin/sh
git svn fetch
for x in `echo B1_5_Release B2_0_Release B2_1_Release B2_5_Release`; do git reset --hard; git checkout $x; git merge remotes/$x; done
git push --all
</code></pre>

<p>Isn't there a better way to do this, without checking out and merge each branch?</p>

<p>Even better would be if I can directly push the git-svn remotes branches without having local branches.</p>
","0","550496",""
"4519679","127013","2010-12-23 14:37:04","16","2790","<git><git-svn><git-submodules>","Using git submodules in a git-svn project","<p>In our git-svn managed project, we have 3 upstream projects that are all kept in native git repositories on GitHub. Since the source code of those upstream projects is under our control and changes frequently, our current solution, namely re-deploying the build artifacts to the super-project everytime we change something is quite cumbersome.</p>

<p>What I'd like to have is this:</p>

<pre><code>parent project (git-svn):
    --&gt; submodule 1 (git)
    --&gt; submodule 2 (git)
    --&gt; submodule 3 (git)
</code></pre>

<p>That way, the source code for submodules 1-3 is compiled along with the sources for the super project, but I can push changes to submodules separately.</p>

<p>The question is: what happens when I <code>git svn dcommit</code> on the parent project? Does this even work?</p>

<p><strong>UPDATE</strong>
Hm, I just set up a simple project structure, trying to resemble this scenario, and I receive this error message when trying to dcommit on the superproject: </p>

<pre><code>a0301b11f3544a1e71067ff270eded65e4c8afbd doesn't exist in the repository at /opt/local/libexec/git-core/git-svn line 4775
Failed to read object a0301b11f3544a1e71067ff270eded65e4c8afbd at /opt/local/libexec/git-core/git-svn line 574
</code></pre>

<p>Any ideas/suggestions?</p>
","3","127013","0"
"18465094","2186897","2013-08-27 12:13:36","0","120","<git><svn><git-svn><code-sharing>","Is it possible to add svn commits made after the svn repo was converted to git?","<p>Last week, I converted our svn repository to git, which took about 4 days to run. Our initial plan was to run the script during the weekend and switch to git on monday, but due to the size of our repository this proved to be impossible.</p>

<p>We're now thinking about keeping the test-run online and just adding the latest svn commits to the git, but I'm running into some problems. I don't have that much experience with either, so all of the commands I found were thanks to SO and Google.</p>

<p>The last commit that was converted to git was 69488 so I would have to get every commit since 69489. The first thing I did was (thank to <a href=""https://stackoverflow.com/questions/747075/how-to-git-svn-clone-the-last-n-revisions-from-a-subversion-repository"">this thread</a>):</p>

<pre><code>git svn clone -r69489 svn-repo
cd repo
git svn rebase
</code></pre>

<p>But now I'm pretty much stuck. The logical next step (in my head) seems to be to tell the new local git repo where the remote bitbucket repository is and merge the two:</p>

<pre><code>git remote add origin bitbucket-path
git pull origin master
git push origin master
</code></pre>

<p>But when I do this, I get merge conflicts that can't be automatically resolved, which seems strange to me since git should know what to do... Am I missing something or am I going to have to go through a ton of files manually to remove the conflicts?</p>
","0","2186897",""
"18475604","2723161","2013-08-27 21:14:45","2","233","<git-svn>","git svn rebase -i mess up. Can it be fixed?","<p>I have two local git branches that track two remote svn branches.</p>

<p>I had those setup in a way that master was tracking the svn trunk and 'branch' tracked the svn 'branch'.</p>

<p>recently I was doing some local work on the local 'branch' and due to speed I entered </p>

<p>git svn rebase -i HEAD~2</p>

<p>instead of </p>

<p>git rebase -i HEAD~2.</p>

<p>in the command line after doing two local commits</p>

<p>git did something weird then, it fetched and rebased commits from svn trunk into my local 'branch'. When I went back to master, and tried git svn rebase, those commits that got merged into 'branch' were missing from the master tree. This means that not only is merging between the two branches broken but essentially I can't do work on master because it is not synchronized with trunk. Is there a way to remedy this situation?</p>
","0","2723161",""
"4603108","563644","2011-01-05 10:37:15","6","6239","<svn><git><version-control><git-svn><corruption>","git svn: Delta source ended unexpectedly","<p>I'm using <code>git svn</code> for svn repo. My colleague commited to repo some native libraries and i can't rebase my trunk after that:</p>

<pre><code>    D       native/libVal.so.v8.0.38za
    A       native/libHelpVAL.so
    A       native/libValuation.so.v9.0.36l
</code></pre>

<p><code>Incomplete data: Delta source ended unexpectedly at /usr/lib/git-core/git-svn line 5117</code></p>

<p>I've tryed to set core.autocrlf to false (<a href=""https://stackoverflow.com/questions/211025/git-svn-rebase-incomplete-data-delta-source-ended-unexpectedly"">as suggested</a>) and do the clone but it didn't help to me.
I'm using git 1.7.3.3 under cygwin(win xp). </p>

<p>Thx for any help.</p>
","2","563644","0"
"18521755","1000011","2013-08-29 22:08:41","0","179","<git-svn>","DCommit As A Different User Using git svn","<p>I have an svn feature branch that came from trunk but was supposed to have come from a production branch. The result is that there are commits in this branch that shouldn't be there since the production branch is long lived and there are commits in trunk that have not gone to production.</p>

<p>I need to create a new branch from production then apply the commits one by one from the old feature branch to the new one and resolve conflicts as I go.</p>

<p>(Lets ignore the issue of staircase branching for this question. I am actually trying to fix it by squashing trunk with production and then branching from this updated trunk).</p>

<p>I figured it would be easier to do this with git than svn as I can see where I am offline before finishing.</p>

<p>As I go along I realise that the commits I make in this new branch locally in git are going to be under my username then when I dcommit it will look like I did all the work in this feature branch in svn.</p>

<p>Is there any way to make dcommit use different svn users as it pushes the commits to svn?</p>
","3","1000011",""
"18525540","1443889","2013-08-30 05:23:31","1","242","<git><git-svn><egit>","How to find newly added, deleted and modified files in git repository","<p>Is there a command that would generate a list of every deleted file,added and modified files in the repository.Pls suggest.</p>
","0","1443889","0"
"35009547","4449067","2016-01-26 08:25:32","1","320","<git><svn><version-control><git-svn>","git-svn: commit whole history of an existing git repository into an empty Subversion sub-directory","<p>I've been working on some code locally on my computer, tracking modifications using git (no remote).
That code is now to become a module in a larger project, the code base of which is stored in Subversion (so something like <code>https://svnserver/svnroot/project/trunk/module_x</code>), so I thought I could use git-svn to manage the Subversion repository as a remote. I remember doing that before for another project but could not find the modus operandi (changed computers in-between).</p>

<p>Here is what I tried:</p>

<pre><code>cd ~/mygitrepo/
git svn init https://svnserver/svnroot/project/trunk/module_x
git svn fetch
git svn rebase
</code></pre>

<p>The last command yields the following error message:</p>

<pre><code>Unable to determine upstream SVN information from working tree history
</code></pre>

<p>I read somewhere that it might be because the directory was empty in Subersion so I tried committing a dummy file to SVN separately then ran:</p>

<pre><code>git svn fetch
    A   dummy.txt
r10744 = 89294ba713c6fed368f3b879c8dc7744b1015308 (refs/remotes/git-svn)
</code></pre>

<p>However, I cannot find the <code>dummy.txt</code> file in my git repo and both <code>rebase</code> and <code>dcommit</code> will  continue to show the same error message.
What did I do wrong?</p>
","0","4449067",""
"4814762","7581","2011-01-27 09:43:47","4","1999","<branch><git-svn>","git-svn branch - How to keep branch in sync with trunk?","<p>There are plenty of questions about git-svn workflow, but I haven't been able to figure this one out: </p>

<p><a href=""http://svnbook.red-bean.com/en/1.5/svn.branchmerge.basicmerging.html#svn.branchemerge.basicmerging.stayinsync"" rel=""nofollow noreferrer"">This section of the svn book</a> talks about a common practice with SVN: you make a branch, and you keep merging changes from the trunk as the trunk gets updated, so that the branch always includes the latest changes.</p>

<p>I did <code>git svn branch</code> to create a branch on svn and then set up a tracking branch to work on it. <a href=""https://stackoverflow.com/questions/266395/git-svn-how-do-i-create-a-new-svn-branch-via-git"">These</a> <a href=""https://stackoverflow.com/questions/192736/how-do-i-make-git-svn-use-a-particular-svn-branch-as-the-remote-repository"">questions</a> cover the process pretty well.</p>

<p>Now suppose there were changes made to the trunk, which I now want to merge into the branch. What is my best option? Note that I need to keep git-svn happy, and not mess up the work of people using the branch with subversion, so just doing a rebase would probably not work.</p>

<p><a href=""https://stackoverflow.com/questions/582348/using-git-svn-pull-merge-or-rebase"">This question</a> seems to talk about a similar situation, although it's pretty old, and I'm not sure what the bottom line there was - it seems to suggest I should <code>git checkout master</code> and then <code>git rebase mybranch</code>, but that can't be right.</p>

<p>I suspect the the answer should be something that has the effect of <code>svn merge</code>, preferably with setting the <code>mergeinfo</code> property, but alas, there is no <code>git svn merge</code>...</p>
","0","7581","0"
"4824478","581205","2011-01-28 03:11:42","3","332","<git-svn><guava>","Can't get Guava using git-svn","<p>The command</p>

<pre><code>git svn clone http://guava-libraries.googlecode.com/svn/trunk/ guava
</code></pre>

<p>fails after downloading about 20MB with the message</p>

<p><code>r32 = 686b2497ca24c1a04fdc5c18aea1a02d03902d24 (refs/remotes/git-svn)
RA layer request failed:
  Server sent unexpected return value (502 Bad Gateway)
  in response to REPORT
 request for '/svn/!svn/vcc/default' at /usr/lib/git-core/git-svn line 5117</code></p>

<p>I get no master branch, nothing (which is understandable given the way git works). I'm using git version 1.7.3.3 under cygwin, XP64.</p>

<h3>UPDATE:</h3>

<p>I tried</p>

<pre><code>git checkout 686b249
git branch master
git fetch
</code></pre>

<p>and it continues (currently r98).</p>

<h3>UPDATE:</h3>

<p>It finally finished. I myself vote for closing.</p>

<p>The only useful information:</p>

<pre><code>Doing simply `git fetch` for resuming is the way to go.
</code></pre>
","1","581205","0"
"4858221","419059","2011-02-01 02:14:31","1","277","<git><git-svn>","Importing a git project into a subdirectory of a Subversion repository while maintaing history","<p>Is there a preferred way to take a git repository and import it into an existing Subversion repository as a new (arbitrarily-deeply-nested) directory while maintaining the commit history?</p>

<p>For example, if I have a subversion repo with the following (simplified) directory structure:</p>

<pre><code>backends
backends/A
backends/B
</code></pre>

<p>and I've been working on a new backend C in a git repo, I now want to add the contents of the git repo to the svn repo as <code>backends/C</code>.</p>

<p>Most information I've found seems to focus on importing at the top-level (generally to a newly created or otherwise empty svn repo).</p>

<p>My current approach is to use the following snippet from the git-filter-branch man page to push the existing top-level of the git repo down to <code>backends/C</code></p>

<pre><code>git filter-branch --index-filter \
        'git ls-files -s | sed ""s-\t\""*-&amp;newsubdir/-"" |
                GIT_INDEX_FILE=$GIT_INDEX_FILE.new \
                        git update-index --index-info &amp;&amp;
         mv $GIT_INDEX_FILE.new $GIT_INDEX_FILE' HEAD
</code></pre>

<p>then use git svn and git rebase to get the files into the svn repo. Is this how most people would do it, or is there a ""better"" way?</p>
","0","419059",""
"42228942","433670","2017-02-14 14:40:14","3","2592","<svn><git-svn>","git svn takes forever, svn takes an hour","<p>I <strong>have</strong> to use svn in a large project. I can checkout the trunk of the project without any problem. It takes between 30min / 1 hour. I do it like this:</p>

<pre><code>    svn checkout https://myrepo.com:port/svn/trunk/
</code></pre>

<p>but if I try to use git, it takes forever. I've been doing <code>git svn fetch</code> for like two days after getting errors doing the checkout as I read in some answers to similar questions, but nothing. The command I use is</p>

<pre><code>    git svn clone https://myrepo.com:port/svn/trunk/
</code></pre>

<p>The issue (I think) is that git is trying to clone <strong>EVERYTHING</strong> (all branches) plus other stuff which I don't want. On the directory svn, there is trunk and branches but also other directories which I don't need. I want only the trunk.</p>

<p>Is this the normal behavior? </p>
","0","433670","0"
"4883453","55562","2011-02-03 07:28:49","20","5131","<svn><git><version-control><git-svn>","Seamless git svn setup","<p>I am a power git user and a happy one at that.</p>

<p>Now, I'm forced to use svn and I am not exactly happy to do so. Not so comfortable using <code>git svn</code> yet.</p>

<p>So, here is the setup I'd like and want.</p>

<ul>
<li>I use a git repo, that is git in all ways with many local branches.</li>
<li>I create multiple branches in git regularly and merge, let git handle all of it.</li>
<li>I want to send selected git branch as an svn branch with everything mirrored.</li>
<li>When I delete a local svn mirrored git branch, the svn branch gets deleted too.</li>
</ul>

<p>The underlining point is that, I want git to do all the hard work of merge and branch and just push to the svn and make it a store.</p>

<p>Sounds like I'm asking for a git-svn tutorial. Except I have gone thro them many times, and yet, I face errors while I do <code>git svn rebase</code> and <code>git svn commit</code> very often and it always seems to talk to trunk alone.</p>

<p>What I want is mirrored svn commands sent and mirrored branches.</p>
","1","55562","0"
"42407440","2841279","2017-02-23 05:02:47","3","133","<git-svn>","Make each one svn commit as one git commit","<p>I organize one repository with both git and svn.  svn is for collaboration.  git is my own management because I like to make many many commits and branches but do not want to intefere with other people.</p>

<p>With say 10 git commits, I svn commit once manually.  So never need to sync git => svn. </p>

<p>Currently when I see new svn commits, I update svn, then make a commit in git.  This one git commit may include several svn commits.</p>

<p><strong>I would like to do:  sync every svn => git</strong>.  </p>

<p>That is, to make EACH ONE svn commit as one git commit.</p>

<p>Ideally with the same commit log.  </p>

<p>More ideally each git commit comes with a tag or extra log stating the svn commit number.</p>

<p>Can it be done?  With git-svn?</p>
","1","2841279","0"
"5098815","456974","2011-02-23 23:51:24","2","343","<git><git-svn>","How to I update the path to a moved git-svn remote branch","<p>I have been using git and git-svn for a while now but we have moved out svn repository server to another location. So what i am wondering is what to I need to do for git to look at the new remote path so i can continue like before. I have tried changing the url in config to look at the new repo but then when i try git svn rebase I just get : </p>

<p><code>Unable to determine upstream SVN information from working tree history</code></p>

<p>The svn repo is exactly the same but has just moved locations to another url.</p>

<p>Thanks in advance.</p>
","0","456974","0"
"5109279","465887","2011-02-24 19:09:31","1","119","<svn><git><tags><git-svn>","Does git-svn support different revisions for each subdirectory?","<p>I have a repository that is currently using Subversion, but I'd like to use Git locally. So I've checked it out with git-svn:</p>

<p><code>git svn clone <a href=""http://localserver/svn/repo"" rel=""nofollow"">http://localserver/svn/repo</a></code></p>

<p>Now, inside repo, I have a few directories:</p>

<pre><code>repo/
    trunk/
        A/
        B/
        C/
    tags/
    branches/
</code></pre>

<p>The repository is currently at revision 100. I'd like to checkout revision 90 inside <code>repo/trunk/B</code> and then make a tag for the whole repo, so that <code>repo/trunk/A</code> is rev 100, <code>repo/trunk/B</code> is rev 90, and <code>repo/trunk/C</code> is rev 100.</p>

<p>In svn I'd do</p>

<pre><code>cd repo/trunk/B
svn update -r90 .
</code></pre>

<p>Is there an equivalent using git-svn, and can I then make a tag that captures the state of the entire repository at that moment?</p>

<p>I tried this:</p>

<pre><code>cd repo/trunk/B
git svn find-rev r90      # yields 18376729f51b71212d94dcba239a2482cda9f3c8
git checkout 18376729f51b71212d94dcba239a2482cda9f3c8 .
</code></pre>

<p>And as far as I can tell, the files in <code>repo/trunk/B</code> have changed according to <code>git status</code>, but files in other subdirectories have not changed. Is this the right way to go about it, or is there a more ""correct"" way?</p>
","0","465887",""
"42429730","60075","2017-02-24 02:30:30","1","365","<git><git-svn>","Edit svn:externals with git svn","<p>Is it possible to set <code>svn:externals</code> property using <code>git svn propset</code>?</p>

<p>I have successfully used <code>git svn propset</code> to set the <code>svn:eol</code> property. However, for <code>svn:externals</code> I am unsure if/how it can be done because <code>svn:externals</code> is a multi-line property, and I'm not sure if/how multiple lines of the property value may be expressed on the command line.</p>

<p>For <code>svn:externals</code>, it would be ideal if the <code>git svn propset</code> command had an <code>--edit</code> option, which would allow the property to be edited in the text editor (similar to editing commit text or git config).</p>

<p>I'm using git version 2.11.1 on Windows.</p>
","0","60075",""
"5136048","339698","2011-02-27 21:17:27","2","202","<git-svn><logging>","Ignore git-svn files from `git log`","<p>Is there a way to ignore git-svn updates?  my usual workflow: </p>

<ul>
<li>doing stuff in my <code>dev</code> git branch</li>
<li>checking out my master</li>
<li><code>git svn rebase</code> on master</li>
<li><code>cherry-pick</code> from <code>dev</code></li>
<li><code>git svn dcommit</code></li>
<li>checkout dev again</li>
<li><code>git merge master</code></li>
</ul>

<p>the only problem with this is that after i <code>git merge master</code>, i do <code>git log -n ###</code>, and i get all the <code>git-svn</code> updates as well.  Can i limit it just the latest <code>git</code> commits?</p>
","1","339698",""
"23263814","1500648","2014-04-24 08:34:57","0","78","<git><svn><github><git-svn><tortoisegit>","Create git repository using tortisegit","<p>I am facing the issue to create the git repository using tortisegit and git gui tool. Can any one help me to provide the steps to create the git repository using GUI tools.</p>

<p>I have checked in stackoverflow for same and found enough.</p>
","0","1500648","0"
"5340790","366856","2011-03-17 14:56:35","26","9698","<git><git-svn>","Easiest way to replay commits on new git repository","<p>I've been using git-svn, and recently, I've been getting errors when trying to commit (I think this is due to a bug in libneon, but this is beyond the scope of this question). The solution has been to re-clone my git repository using <code>git svn clone</code>. However, I have changes on the master branch in my old git repository that I was not able to commit to svn using <code>git svn dcommit</code>. I'd like to replay these changes on the new repository cloned with git svn. I think I could probably export a patch-set using <code>git format-patch</code>, and then replay these changes on the new repository but I'm not entirely sure how to do this, and I wonder if there's an even easier or more elegant way to accomplish this.</p>
","0","366856","0"
"5339838","55094","2011-03-17 13:42:24","23","6881","<svn><git><git-svn>","Cloning a git-svn repository with svn metadata","<p>I've cloned my main repository with <code>git-svn clone svn://url/trunk --stdlayout</code>. Now I want to clone the repository, with the svn meta data. So that I'll be able to <code>git-svn rebase</code> it to the main server.</p>

<p>Note, I don't want to push commits between two <code>git-svn</code> clones, I simply want to add all the <code>git-svn</code> metadata to the newly cloned repository, so that the new clone will be able to communicate with the main subversion server as well.</p>
","0","55094","0"
"5361386","11236","2011-03-19 10:01:17","6","432","<svn><git><git-svn>","When cloning an svn repository into git, should I clone only trunk, or the entire repo?","<p>What is the best practice here? </p>

<p>The repository in question is here: <a href=""http://svn.osqa.net/svnroot/osqa/"" rel=""noreferrer"">http://svn.osqa.net/svnroot/osqa/</a></p>
","0","11236","0"
"5361559","11236","2011-03-19 10:33:15","20","14816","<svn><git><git-svn>","What does the --stdlayout do in git svn clone?","<p>I just spotted <a href=""https://stackoverflow.com/questions/4249129/recover-from-git-svn-clone-without-stdlayout"">this question</a> about recovering from a clone done without --stdlayout. I didn't find documentation of this flag - what does it do?</p>
","3","11236","0"
"5367734","11236","2011-03-20 09:44:11","18","12563","<svn><git><git-svn>","Error rebaseing/updating a git-svn repository","<p>Hoping this is not a dup, I didn't find any concise information on how to update a git-svn repo. I used git svn clone to import an SVN repo into git. Then, after doing some commits, I wanted to rebase with regards to the original SVN repo.</p>

<pre><code>C:\Work\osqa&gt;git svn rebase
Migrating from a git-svn v1 layout...
Data from a previous version of git-svn exists, but
        .git/svn
        (required for this version (1.7.3.1.msysgit.0) of git-svn) does not exis
t.
Done migrating from a git-svn v1 layout
forum/views/readers.py: needs update
update-index --refresh: command returned error: 1
</code></pre>

<p>When I repeated the git svn rebase command a second time, I got just the tail of the last message:</p>

<pre><code>C:\Work\osqa&gt;git svn rebase
forum/views/readers.py: needs update
update-index --refresh: command returned error: 1
</code></pre>

<p>I'm not sure what the error message means. Can you help resolve it?</p>
","0","11236","0"
"5586686","223267","2011-04-07 19:44:17","2","527","<svn><git><git-svn><gitignore>","Storing .gitignore files for empty directories under Subversion","<p>As mentioned in <a href=""https://stackoverflow.com/questions/115983/how-do-i-add-an-empty-directory-to-a-git-repository"">this question</a> (and in the Git FAQ), you can't store empty directories in Git.</p>

<p>I have a <code>git-svn</code> clone, and I want to use Git in it to work against my project's Subversion repository.</p>

<p>The problem is that there are some empty directories that are stored under Subversion and are necessary for compiling the project.</p>

<p>So far, I've been doing what was suggested in the FAQ: I added a <code>.gitignore</code> file in each directory that should stay empty, and committed that addition to Git, so whenever I clone from this <code>git-svn</code> repository, I get all the empty directories and I can compile.</p>

<p>The minor trouble is that whenever I want to <code>git svn dcommit</code> back to the Subversion repository, I need to do that from a separate Git branch without the commit in which all the <code>.gitignore</code> files were added, so that they don't get added to Subversion as well.</p>

<p>But I thought about it, and it might not be that bad - so my questions is, is there any reason why I should not commit the addition of the <code>.gitignore</code> files for each empty directory to Subversion?</p>
","0","223267",""
"5665953","506114","2011-04-14 15:50:15","0","90","<git-svn>","git svn - why can I not update to the latest revision?","<p>I just started to use git-svn and am having a few problems.  The one I can't seem to figure out is that whenever I setup my working copy, it stops a few revisions shy of the latest.  For instance, there are 9094 revisions in SVN and in git, I have 9080.</p>

<p>git svn init <a href=""http://svn.repository"" rel=""nofollow"">http://svn.repository</a> trunk</p>

<p>git svn fetch</p>

<p>git svn info</p>

<p>Thanks,</p>

<p>Walter</p>
","0","506114",""
"42793618","7000031","2017-03-14 18:18:00","5","2921","<git-svn><git-submodules><git-subtree><svn-externals><git-subrepo>","svn to git migration with nested svn:externals","<p>Migrating from svn with svn externals, to git. 
Each svn externals may have it's own svn:externals. There is no guide how to migrate svn with externals to git here that I found useful.
Each branch may have it's own branches tags trunk. 
What's the best way to migrate the whole repository?
I am looking at git svn clone of the main repository adding git submodules, of each one external cloned as well. But Since the externals are nested, I don't know what's the best solution.
Script used till now:</p>

<pre><code>https://github.com/eneroth/git-externals
https://github.com/eneroth/git-externals
</code></pre>
","4","7000031","0"
"24285498","1069083","2014-06-18 12:21:51","1","344","<git><svn><git-svn><smartgit>","Benefit of migrating to GIT from git-over-svn","<p>I am thinking about converting my svn repository on my server to git, but I am not sure what would be the benefit for me, since I already use <a href=""http://www.syntevo.com/smartgithg/"" rel=""nofollow"">SmartGit/hg</a> which creates a local git repository and commits all local git commits through to svn already.</p>

<p>As far as I can see, there is no real need for me here to migrate over to git.</p>

<p>So what would be the benefit for me and my collegues that all use only SmartGit/hg?</p>
","0","1069083",""
"24310808","371228","2014-06-19 15:45:31","-1","45","<git><git-svn>","Can I use git-svn to create a Git repository from a single directory in a Subversion repository?","<p>I will be tracking a new project in a Git repository. The project has a dependency on an older library; the library is stored in a directory in a branch in a Subversion repository. The library’s directory has many sibling directories—other projects—that I’m not interested in. What I’d like to do is to bridge <em>just this single directory</em> into a Git repository using git-svn. (I’ll be including this repository as a submodule in the new project’s directory, although I don’t think that’s germane to my question.) Is it possible to bridge just part of a Subversion repository like this?</p>
","1","371228","0"
"5938045","234780","2011-05-09 14:09:01","2","1054","<git><git-svn><commit>","Import previous commits using git-svn","<p>What I have done so far:</p>

<pre><code>git svn init http://example.com/svn/trunk
</code></pre>

<p>(latest revision is 1000)</p>

<pre><code>git svn fetch -r1000
git svn rebase
</code></pre>

<p>My repo is up to date and I have in the logs all commits since rev. 1000.</p>

<p>How to import the history since revision 800?<br>
How to checkout to the revision 800?</p>
","0","234780","0"
"5956190","22383","2011-05-10 20:40:34","6","314","<git><git-svn>","I tagged in git-svn, and now my master always commits to the svn tag!","<p>I've got a basic git-svn setup:</p>

<pre><code>   [core]
           repositoryformatversion = 0
           filemode = false
           bare = false
           logallrefupdates = true
           symlinks = false
           ignorecase = true
           hideDotFiles = dotGitOnly
           autocrlf = true
   [svn-remote ""svn""]
           url = https://svnserver:8443/svn/Project
           fetch = trunk:refs/remotes/trunk
           branches = branches/*:refs/remotes/*
           tags = tags/*:refs/remotes/tags/*
</code></pre>

<p>I created a tag off the trunk (master in git) by issuing the following:</p>

<pre><code>git svn tag -m ""3.6.1"" 3.6.1
</code></pre>

<p>This created a new tag in svn at /tags/3.6.1.  In addition, I saw a new /remotes/tags/3.6.1 listed in my remote branches.</p>

<p>At some point, I'd checkout out a local branch from the 3.6.1 remote and made some changes.  Then I merged them into the master (I think this was a big mistake).  So my master seems to think it has some history from the 3.6.1 tag.</p>

<p>Now every time I commit something to my master then dcommit, they're going to the 3.6.1 tag!</p>

<pre><code>jakes@mymachine /cygdrive/d/Projects/Project (master)
$ git svn dcommit
Committing to https://svnserver:8443/svn/Project/tags/3.6.1 ...
    M       fileThatChanged.js
Committed r6027
</code></pre>

<p>Is there an easy way I can set things straight again?</p>
","1","22383","0"
"43188556","498500","2017-04-03 15:27:04","1","1477","<git><git-svn><git-clone><svn2git>","git svn clone fails when called with --preserve-empty-dirs argument","<p>I'm migrating our SVN to Git. Our Jenkins job expects a specific folder, which in some branches can be empty. Thus, I have provided the --preserve-empty-dirs argument to the <code>git svn clone --preserve-empty-dirs --prefix """" ...</code>.</p>

<p>Unfortunately this fails always at the same revision with the following message:</p>

<pre><code>Found possible branch point: http://&lt;svn&gt;/tags/2008-03-26-1000-BINDING, 656
Found branch parent: (refs/remotes/tags/2008-03-26-1000-BINDING) cc93e7405337b31d9fce7ec28ab67a9ac3af3811
Following parent with do_switch
couldn't truncate file at /usr/share/perl5/Git.pm line 1410.
</code></pre>

<p>Without the --preserve-empty-dirs flag, I can clone it successfully. Is there any workaround for this issue?</p>

<p>git version 2.11.0,
svn version 1.9.5</p>
","3","498500",""
"6209344","697461","2011-06-02 00:55:06","0","220","<git><github><repository><git-svn>","Local git repo creation","<p>I have code base checked out from svn. (<code>code_base</code>). I want to create a local git repo from this code base and then use git branches to play with it. So, I am expecting a structure like follows: </p>

<p>currently available code = <code>c:/code_base</code><br>
git repo on same machine = <code>c:/repo_head</code>  (Based on <code>c:/code_base</code>)<br>
git clients from newly repo = <code>c:/repo_client1 c:/repo_client2</code>  </p>

<p>I am trying to create a bare repo (<code>repo_head</code>) and then trying to add <code>code_base</code> but it does not seem to work. I am getting lot of errors. 
What is the best way to go about it?</p>
","1","697461",""
"6229274","427447","2011-06-03 15:37:49","0","3684","<git><git-svn>","How doyou Amend the last commit message in git?","<p>I am using <code>git-svn</code> and I know that svn does not support changing commits</p>

<p>if I haven't yet run <code>git svn dcommit</code> can i still change the last commit message, i left something out of it.</p>

<p>If so, how do you amend the last commit message?</p>

<p>EDIT:</p>

<p>i figured out i can do <code>git commit --amend</code> but is there any problem doing this using svn backend?</p>
","5","427447",""
"6230432","66536","2011-06-03 17:17:54","3","2254","<git><git-svn><mirror>","Is there a way to use git-svn to mirror a Git repo to SVN and have the Git tags/branches become SVN tags/branches?","<p>I've played around with using git-svn to mirror a Git repo to an SVN repo, but I can't seem to do more than push the master changes to the SVN repos trunk.</p>

<p>Essentially what I've done so far is create an SVN repo with the standard layout (project-name/trunk, project-name/tags, project-name/branches) and then do a 'git svn init --stdlayout <a href=""http://server/svn/project-name"" rel=""nofollow"">http://server/svn/project-name</a>'. This sets up git-svn for the current Git repo and then I make any changes I want to in the Git repo and then push those to SVN via 'git svn dcommit', but this only seems to work for the pushing the current branch (usually master) to the SVN project's trunk folder.</p>

<p>What I'd like to be able to do is create Git tags and then push those to the SVN project's tags folder. I'd like to do the same for all of the branches, but that's not required. I need the SVN mirror to have trunk mirror the Git master branch and the tags mirror the Git tags.</p>

<p>Note: the SVN mirror would be read-only</p>
","1","66536",""
"6452113","537554","2011-06-23 09:43:06","6","1184","<directory><git-svn>","How to prevent git svn rebase to create empty directories","<p>In short the problem is, when I run git svn rebase, I got a bunch of ""creating empty directory: ...""</p>

<p>At the svn side, in trunk, there's a directory named TOD(Trunk Only Dir), with a lot of files in it. in another branch, there's no such directory at all.</p>

<p>When I cloned this svn repository with git svn, on master things are all right, but on the branch, I got the TOD directory and the same directory structure except there's no files in it. </p>

<p>If I rm the TOD directory (safe because git doesn't track directories), and switch to master and run git svn rebase, I got the ""creating empty direcotry"" messages, then when I checkout the branch, the TOD directory comes back.</p>

<p>All in all, the question is, how to prevent git svn from creating empty TOD directories on the branch?</p>
","2","537554","0"
"24754938","2038581","2014-07-15 09:47:07","1","597","<git><svn><git-svn>","Why git pull for specific folder doesn't work? Which one is better alternative fetch/merge for git pull remote in this case?","<p>I'm currently unable to find a substitute for <code>$ git pull origin /path/to/dir/or/file</code>. And apart of this I've tried these two steps but no luck.</p>

<ol>
<li><code>git fetch origin</code></li>
<li><code>git checkout HEAD /path/to/dir/</code></li>
</ol>

<p>In this manner I've fetched the whole directory but while checking out the repo/branch it doesn't do anything. Why? I'm concerned about this because I simply don't want to pull the whole repository.</p>
","3","2038581","0"
"6457490","427447","2011-06-23 16:30:05","5","1572","<svn><git><workflow><git-svn><branching-and-merging>","git merge vs rebase using git svn","<p>I am very confused, I have read several posts, blogs and articles and don't know where to go. I am using an svn server repo that I pull down with git svn and work on. I am currently the only person developing this ( i.e. no upstream changes ) .</p>

<p>So i have a local git topic branch <code>vacation</code>, which i need to merge back into master to dcommit, but i don't want to squash all the commits into one big one. </p>

<p>I tried to do a git <code>rebase -i master</code> and it erased 90% of my changes. </p>

<p>do i do a </p>

<pre><code>git checkout master
git rebase vacation
git svn docmmit
</code></pre>

<p>Or a </p>

<pre><code>git checkout vacation
git rebase master 
git checkout master 
git merge vacation --ff-only 
git svn docmmit?
</code></pre>

<p>I am afraid of that way b/c what happened when i tried before
can someone please briefly explain what I should do and why I have to do it that way?</p>
","0","427447","0"
"24773284","1617169","2014-07-16 06:01:53","3","1339","<git><version-control><git-svn>","Git - Remove remote branches after git-svn clone","<p>I have cloned a SVN repo with the command <code>git svn clone ... --trunk=trunk --tags=tags --branches=branches</code>.</p>

<p>The operation have been correctly executed, and now when I list my branches I have all the past tags such as :</p>

<pre><code>$ git branch -a
* master
  remotes/tags/1.0
  remotes/tags/2.0
</code></pre>

<p>I can easily checkout the branches and creates real git tags, but how can I remove the remote branch <code>remotes/tags/1.0</code> when I'm done?</p>
","1","1617169","0"
"6494219","148381","2011-06-27 14:13:00","5","4433","<svn><git><clone><git-svn><dvcs>","git-svn clone error: error: there are still refs under 'refs/remotes/tags'","<p>I am trying to clone a Subversion repository to git, but it keeps giving me an error that I don't really understand:</p>

<pre><code>error: there are still refs under 'refs/remotes/tags'
fatal: Cannot lock the ref 'refs/remotes/tags'.
update-ref -m r1649 refs/remotes/tags 16630eb01aa7abb331cdaa7ca07c1736656a058e: command returned error: 128
</code></pre>

<p>The subversion project has a lot of tags and about 15 branches.  It seems to fail at a different point each time.  I have cloned a number of other projects just fine, just seems to get stuck at this one.</p>

<p>Any ideas what this error means and how I might fix the issue?</p>

<p>Update:</p>

<p>I have found what is probably the cause of the problem, now I just need a solution.  First of all it is not a different point each time it fails, it is failing at a particular revision each time.  And I have checked the subversion logs at that revision and I have found that I mistakenly create a tag in branches/tags rather than in tags.  This was fixed immediately, but it seems to be causing problems in git-svn.</p>

<p>Any ideas what I can do to get around this?</p>
","7","148381","0"
"6509514","261159","2011-06-28 16:05:27","1","296","<svn><git><git-svn>","git svn master to branch to master - still tries to commit to branch","<p>I followed <a href=""https://stackoverflow.com/questions/2490794/git-svn-create-push-a-new-branch-tag"">this</a> post on how to create and checkout a branch using git svn so that the branch was actually created on the svn repos.  This worked great.</p>

<p>When I was done with my branch, I did a checkout on master and did a git merge.  This worked fine.  I then went to commit the merge back to the trunk on the svn repos so issues a git svn dcommit.</p>

<p>And it tried to commit to the branch.  Even though I now have the master branch checked out.  What am I missing?</p>

<pre><code>$ git svn branch -m ""test branch"" test_branch
$ git checkout --track -b test_branch remotes/test_branch
$ Hack hack hack...
$ git svn dcommit --dry-run    # Make sure you're committing to the right SVN branch
$ git svn dcommit              # Commit changes to ""test_branch"" branch in SVN
$ git checkout master
$ git merge test-branch
$ git svn dcommit # why is this committing to the branch instead of trunk??
</code></pre>

<p>This is my .git/config in case it matters</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
[svn-remote ""svn""]
    url = mysvnrepos.com/svn/project
    fetch = trunk:refs/remotes/git-svn
    branches = branches/*:refs/remotes/*
[branch ""test_branch""]
    remote = .
    merge = refs/remotes/test_branch
</code></pre>
","0","261159",""
"6514611","5758","2011-06-29 00:39:20","9","4396","<git><git-svn>","Getting complete history of an SVN repo that's been renamed using git-svn","<p>I have an SVN repository which was renamed from ""Project"" to ""Project v1"".</p>

<p>I then did a <code>git svn clone</code> to create a git version of the renamed SVN folder.</p>

<p>When I <code>git log</code> the newly created git repository, I only see a single history item. It's the commit message which I gave the SVN repository when I renamed the folder.</p>

<p>Is there a way for the git repository to have all of the SVN history prior to the folder being renamed (or any other possible renames prior to that one)?</p>
","0","5758","0"
"24999718","2739786","2014-07-28 16:24:02","1","736","<git><git-svn>","Cannot fetch branch from git-svn repo","<p>I wanted to create a new branch on the svn server and then create a local branch to track this new branch.</p>

<p>But I think something went wrong during this process because a branch is created on the svn server, but I am not able to fetch it.</p>

<pre><code>$git svn branch -m ""new-branch-message"" new-branch
Copying http://pathtorepo/project/trunk at r28074 to http://pathtorepo/project/branches/new-branch...
Found possible branch point: http://pathtorepo/project/branches/BRANCH-2-2-11-0 =&gt; http://pathtorepo/project/tags/VER-2_2_11-1, 27365
Found branch parent: (refs/remotes/tags/VER-2_2_11-1) 243dea0687bd6721621ab4f7287dec7e121489e8
Following parent with do_switch
Invalid filesystem path syntax: Cannot replace a directory from within at /usr/libexec/git-core/git-svn line 5097

$cat .git/config
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = http://pathtorepo
    fetch = project/trunk:refs/remotes/trunk
    branches = project/branches/*:refs/remotes/*
    tags = project/tags/*:refs/remotes/tags/*

$git svn --version
git-svn version 1.7.1 (svn 1.6.11)
</code></pre>

<p>Any thoughts on what that 'Invalid filesystem path syntax' error means? Did I set up the git repo correctly?</p>
","6","2739786",""
"6755817","584676","2011-07-20 00:49:26","0","53","<git-svn><tortoisegit>","Which branch should I run dcommit on when using git-svn?","<p>I have just started using TortoiseGIT to work with my SVN repository at work (I have to jump between branches quite a bit so this saves on quite a bit of down time). However, I've only used Git or SVN, but not git-svn. Should I merge my local branch with remotes/trunk first or is just doing a dcommit from the master sufficient enough to get my changes into the trunk?</p>
","0","584676",""
"25039079","826068","2014-07-30 14:11:50","3","924","<git><svn><git-svn><password-encryption>","How to disable pinentry-qt in fedora 20 for git-svn ?","<p>I use git-svn command line client to synchronize my projects to an svn repository. 
Since I moved to fedora 20 (I was on fedora 17 before), when I synchronize with the svn repository (with git svn rebase, for instance) I have, very often, a  pinentry-qt window pop-up. 
  The  pinentry-qt popup message looks like ""Enter your Subversion password for  2bb3333-jhgw3jkh23-abac-9e876hjid"".  If I enter a password it asks me to enter it again to confirm. If I just click ""cancel"" the git-svn command runs just fine. </p>

<p>Is there a way to completely disable this pinentry-qt tool from my machine ? </p>
","3","826068",""
"6804340","584676","2011-07-24 01:07:57","4","1434","<git-svn><gitignore><svnignore>","Do the entries in .gitignore get applied to the SVN repository when using git-svn?","<p>If I tell git to ignore x amount of files and never add them to the repository, will those files also make it into the svn:ignore property? And if so, how can I keep .gitignore local to only my local git repository?</p>

<p><em>EDIT</em> Sorry about the duplicate, I searched on here and couldn't find anything on it.</p>
","0","584676",""
"43897126","4375983","2017-05-10 15:39:43","-2","68","<git><svn><git-svn>","git-svn...more like snail mail","<p>Today at work I needed to clone a certain project with git-svn due to certain constraints and the command I used to do that is <code>git svn clone -T --no-minimize-url URL_OF_THE_REPO</code>. Long story short... this has been PAINFULLY SLOW, and also keeps failing reliably because of some error in git... which naturally makes me continue the cloning by restarting the command, I can't just leave it and know it will complete the clone job when I come back. So making it a night job is out of the question.</p>

<ol>
<li>Why in the name of god is it so slow,</li>
<li>How can I speed the (checkout) process,</li>
<li>How can I planify night-jobs to do these heavy clone jobs and be confident they would have completed in the morning(I reiterate, I have to keep a watchful eye over the checkout in case it fails)</li>
</ol>
","1","4375983",""
"7067015","72176","2011-08-15 15:36:21","2","3591","<git><svn><git-svn>","svn2git with --exclude, any way to ignore the empty/blank commits?","<p>I'm converting a big SVN repository into multiple git repositories (one for each project).</p>

<p>I am running svn2git for each repo with all unwanted directories <code>--exclude</code>d this works well to keep the tags and branches (I delete all the unrelated tags &amp; branches after the conversion)</p>

<p>The only problem is I have loads of empty commits (commits relating to the excluded directories).</p>

<p>Is there any way to exclude these empty commits during the svn2git process?</p>

<p><a href=""https://stackoverflow.com/questions/5324799/git-remove-commits-with-empty-changeset-using-filter-branch/5324929#5324929"">This solution</a> is a fine way to remove them after the fact, but <code>filter-branch</code> only affects the current branch, and not all the other branches and tags.</p>
","2","72176",""
"7069241","","2011-08-15 18:50:13","2","201","<git><git-svn>","git-svn checkout project not working with -s","<p>I'm trying to checkout an SVN repo via <code>git-svn</code> and am having issues getting git to play nice with trunk/branches/tags directories.</p>

<p>This works fine:</p>

<pre><code>git svn clone https://svn-repo-base/projects/path/to/my/project/trunk
</code></pre>

<p>however when I try:</p>

<pre><code>git svn clone -s --no-minimize-url https://svn-repo-base/projects/path/to/my/project/
</code></pre>

<p>I just get an empty directory with no files cloned.  (the <code>--no-minimize-url</code> is there because git was trying to do a checkout on <code>https://svn-repo-base/</code> without it)</p>

<p>Any ideas what I'm doing wrong here?</p>
","0","","0"
"43917947","5203673","2017-05-11 14:14:08","0","934","<git><svn><migration><git-svn>","git svn clone without knowing the svn layout","<p>I am doing SVN to Git migration and for which when I use <code>git svn clone</code> command, I need to mention the <code>--stdlayout</code> option. My query is as an admin I should not be concerned about the layout of SVN. So is there any way how I can use <code>git svn clone</code> command without knowing the SVN layout.</p>

<p>What I am using now if SVN has a standard layout: </p>

<pre><code>git svn clone --stdlayout --authors-file=authors.txt &lt;svn-repo&gt;/&lt;project&gt; &lt;git-repo-name&gt;
</code></pre>

<p>if not standard layout: </p>

<pre><code>git svn clone --trunk=/trunk --branches=/branches --branches=/bugfixes --tags=/tags --authors-file=authors.txt &lt;svn-repo&gt;/&lt;project&gt; &lt;git-repo-name&gt;
</code></pre>

<p>Any help appreciated. Thanks.</p>
","2","5203673",""
"7083122","391411","2011-08-16 18:27:07","7","1804","<netbeans><git-svn>","Using git-svn from within netbeans","<p>Is there any way to use git-svn from within Netbeans. I'm currently working on a project that uses svn, and I'd like to at least use git locally.</p>
","0","391411","0"
"43922763","4799747","2017-05-11 18:09:54","0","3040","<git><svn><version-control><git-svn>","merge from svn to git, commit by commit","<p>Our company has two repositories, svn repository(trunk) used for development of one product and git repository(master) used for deployment of several products(teams). Our team wants to merge from svn subdirectory ""trunk/web"" to git subdirectory ""master/product-a/web-dev"". </p>

<p>Those repositories have different source codes with a different tree structure, but two subdirectories we want to merge have almost same source codes inside. Also, they're not linked in any way, and we need to merge manually for now. Git repository is shared by other teams and we cannot build it from scratch(cannot make big changes that might stop daily development&amp;deployment).</p>

<p>Is it possible to merge from svn subdirectory to git subdirectory, commit by commit, in specified revision rage automatically(by a few commands or a long program)? We need to merge commit by commit with commit comments, so that we can trace changes on git by redmine issue number used in svn.</p>

<p>I'd appreciate any help, thank you.</p>
","3","4799747",""
"25137439","2583701","2014-08-05 11:14:18","1","112","<git><svn><git-svn>","How to deal with a git that has git-svn and pure git remotes","<p>I have two repositories, one is still an <em>svn</em> and acts as the main place, and another is pure <em>git</em> where is the daily work. I've my local clone using <code>git svn clone svn+ssh://...</code> and adding a remote using <code>git remote add git@...</code>.</p>

<p>After a refactoring with its commits and branches, the <em>git</em> master has the directory structure modified and when I try to <code>git svn dcommit</code> a bunch of conflicts arise in what looks like a rebase to the <em>svn</em>. It's like the <em>mv</em> of files and directories to rename and relocate are lost.</p>

<p>The solutions I'm reading looks that comes from scenarios where both remote are being committed at the same time, and even this can cause issues. Is there a way to tell <em>git-svn</em> to act like <em>strategy is to convert the svn to what git has</em>?</p>

<p><strong>Update @ 20140821</strong></p>

<p>After a while I've found how it can work for me, but I'm not sure this would be enough generic.</p>

<p>In my case I'm having both remotes with the same commits, that is when I do a <code>push</code> just before or after I'll do a <code>dcommit</code>. Then I can force myself to always start by the git and then continue with svn.</p>

<p>It looks like:</p>

<pre><code>git svn fetch
git fetch gitremote
git add file1 file2
git commit -m ""something descriptive but concise""
git push gitremote branch
git svn dcommit
</code></pre>

<p>The only way I've found sending the commit first to svn, is to use the option <em>--force</em> in the push, because otherwise the <code>status</code>command was including a message:</p>

<pre><code># Your branch and 'gitremote/branch' have diverged,
# and have 3 and 2 different commits each, respectively.
</code></pre>

<p>And any try to merge shows all the changes made in the <code>commit</code> like new. But this <em>force</em> looks to have a big issue if there are other changes in the git repository (for example another developer has already pushed something there), then this force may overwrite those changes.</p>
","0","2583701",""
"6896121","813803","2011-08-01 08:54:25","1","5793","<git><git-svn>","How to delete a commited patch from local git repository?","<p>I am a git beginner and I need to delete one local commit before preparing the final patch.
This is the list of my branches:</p>

<pre><code>[me@myhost]$ git branch -l
  master
* devel
</code></pre>

<p>I did some fixes and committed the patches with {{{git commit -a}}} and now these are the patches I have:</p>

<pre><code>[me@myhost]$ git log --pretty=oneline -3
dddb36d2124b221997f6fd0489ce4c8d4617fbc7 Patch3
78ca669b137be2d3602907b52d5d6c0eb8fefda2 Patch2
1f7453c62a674544a38df556f7e6ced245841fd7 Patch1
</code></pre>

<p>Now, let's say I want to remove the Patch3 which is not yet in the svn repository. Which is the cleanest/simplest way to do it?</p>
","0","813803",""
"6898018","708217","2011-08-01 11:52:02","1","220","<git><svn><wordpress><git-svn><git-rebase>","How can I use git-svn together with Github, and avoid conflicts?","<p>I am using Git for my SCM of a WP Plugin. But of course I then have to commit it to an svn repo for it to be displayed in the WordPress Plugin Directory.  I have written <a href=""http://catn.com/wordpress/using-git-for-wordpress-development-scm-instead-of-subversion/"" rel=""nofollow"">a guide</a> on how to do this so you can see the steps I am using for it.</p>

<p>Whenever I am about to commit to the svn, I do a <code>git rebase trunk</code> to update the svn trunk before the <code>git svn dcommit</code>.  However, if I pull from GitHub and then do the rebase I get conflict errors on all of the commits that have been done by someone else.</p>

<p>What is the reason, and what can I do here?</p>

<p>Because the conflicts are always on all of the commits by another author this gives me the idea that there should be another command (something like rebase) that I should run before <code>git rebase trunk</code> that will merge these files properly or something.</p>
","2","708217",""
"6915418","875044","2011-08-02 16:34:27","3","4802","<git><git-svn><git-branch>","How to git svn fetch only branches/tags with certain patterns?","<p>I want to check out Boost library using git-svn, and I only want to checkout trunk and tags starting from version 1.35, i.e. tags/release/Boost_1_35 and up.  My config looks like this:</p>

<pre><code>[svn-remote ""svn""]
    ignore-paths = ^tags/release/(?i:(?!boost)|[^/]*(?:beta|rc)|boost_(?:0|1_[1-2]|1_3[0-4]))[^/]*/
    url = https://svn.boost.org/svn/boost
    fetch = trunk:refs/remotes/svn/trunk
    tags = tags/release/*:refs/remotes/svn/tags/*
</code></pre>

<p>However, git fetch still fetches tons of unrelated tags such as svn/tags/version_0-9-10 or svn/tags/version_0-9-10@44215.  I wonder what's the correct way of specifying ignore-paths to achieve this effect.</p>

<p>BTW: I've read <a href=""https://stackoverflow.com/questions/1892133/how-do-i-fetch-clone-only-a-few-branches-using-git-svn"">How do I fetch/clone only a few branches using git-svn?</a> but doesn't sounds a scalable solution.</p>
","3","875044","0"
"25402907","13860","2014-08-20 10:55:51","13","7869","<migration><git-svn>","How can I recover after a checksum mismatch with 'git svn clone'?","<p>I'm cloning an SVN repository to git as part of our migration plan. I've hit various snags along the way, forcing me to continue the clone with a <code>git svn fetch</code> command. The most recent failure I can't figure out how to solve:</p>

<pre><code>$ git svn fetch
Checksum mismatch: dc/trunk-4632-jh/dc-smtpd/lib/Qpsmtpd/Address.pm.t 8ce3aea3f47dc115e8fe53bd62d0f074cfe93ec6
expected: 59de969022e46135fa6dc7599fc2f3b4
     got: 4334926a01c905cdb7fce71265e370c1
</code></pre>

<p>I found <a href=""https://stackoverflow.com/a/8418829/13860"">this related answer</a>, however that solution doesn't work because <code>git svn log</code> is not yet functional, as the repo is not fully in place:</p>

<pre><code>$ git svn log dc/trunk-4632-jh/dc-smtpd/lib/Qpsmtpd/Address.pm.t
fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions
log --no-color --first-parent --pretty=medium HEAD: command returned error: 128
</code></pre>

<p>How can I proceed?</p>
","0","13860","0"
"7194445","297440","2011-08-25 17:11:53","3","3038","<git-svn><ssl-certificate>","configure SSL cert for git svn","<p>How can I configure git svn to use my .p12 client cert when connecting to the SVN repo?</p>

<p>If I try to run git svn dcommit, I am asked for my 'Client certificate filename' for each revision and there are a lot of revisions.</p>

<p>thanks</p>
","0","297440",""
"7195275","14720","2011-08-25 18:19:21","26","14459","<git><svn><git-svn>","git-svn fetch isn't pulling in the latest versions","<p>When I execute a</p>

<p><code>
git svn fetch
</code></p>

<p>from my repository, it returns nothing and doesn't update even though there are new commits
under svn.</p>

<pre><code>[root]# svn log -l 1  http://example.com/trunk/client-resources/resource-pa
    r12958 | ing | 2011-08-22 18:29:57 -0500 (Mon, 22 Aug 2011) | 1 line
    SRGENERAL-1468 adding more arrays for pa
[root]# git-svn fetch
[root]# git log -1
    commit be19ae4c7d1a3c3da6dd90389aebd6d76792cc71
    Author: sltin &lt;sltin@44b83e5a-25ef-0310-8dbe-ee0aa4f92a64&gt;
    Date:   Wed Jun 22 14:30:53 2011 +0000

    Fixing the classpath.

    git-svn-id: http://example.com/trunk/client-resources/resource-common@12406 44b83e5a-25ef-0310-8dbe-ee0aa4f92a64
</code></pre>

<p>Note the version differences.  The svn log lists 12958 and the git log lists the latest 
svn version as 12406.</p>

<p>I can do a reset to 12406 and then a new fetch:</p>

<pre><code>[root]# git svn reset 12406
    r12406 = be19ae4c7d1a3c3da6dd90389aebd6d76792cc71 (refs/remotes/git-svn)
[root]# git svn fetch
        M       src/test/java/csl/resource/ioc/AbstractResourceIocTest.java
    r12977 = 1b21f560b0354b28fe1a272d7723b1e6fa90a99c (refs/remotes/git-svn)
        M       src/test/java/csl/resource/ioc/AbstractResourceIocTest.java
    r12978 = bf22ea0151a364eb1ca1af37a7a907d5b5cc7420 (refs/remotes/git-svn)
        M       src/test/java/csl/resource/ioc/AbstractResourceIocTest.java
    r12987 = ce922c2eae07f6c12dbbd4175a9c61055b563ee3 (refs/remotes/git-svn)
</code></pre>

<p>And when I check the log versions, they are unchanged.</p>

<p>How do I get git-svn to pull in the latest versions from svn?</p>

<p><strong>Edit:</strong></p>

<p>I found the answer, the svn data is loaded in to an inactive thread that would normally be merged in to the active branch, which doesn't exist in a bare repository.  I tried to do a reset, but that needs an active branch too.  The final answer was:</p>

<pre><code>git reset --soft refs/remotes/git-svn
</code></pre>
","3","14720","0"
"44021807","1147577","2017-05-17 10:07:30","0","2189","<git-svn>","git svn clone without cloning tags","<p>I would like to skip import of all tags. is this the correct syntax?</p>

<pre><code>git svn clone ""http://svn/svn/IT_Udvikling"" git-DataLicense --revision 37000:HEAD --trunk=""/FID/DataLicense/trunk"" --branches=""/FID/DataLicense/branches""  --no-minimize-url --authors-file=../authors-transform.txt   
</code></pre>

<p>I am trying to skip import of tags because the git svn clone process takes forever. it has been running for 3 days now.</p>
","2","1147577",""
"7233686","347411","2011-08-29 17:39:23","4","675","<workflow><git-svn>","git-svn: How do I avoid 'Merge branch <branchname>' commit messages?","<p>This is my current git-svn workflow:</p>

<pre><code>git checkout -b feature master
# hack commit hack commit
git checkout master
git svn rebase
git merge feature
git svn dcommit
</code></pre>

<p>This usually works fine, git replays at the trunk all the commits from the local branch, and the only 'lost data' are the original commit's timestamps, no big deal.</p>

<p>But it looks like today there was something different about the merge and dcommit that caused the commit message on the SVN repo to be simply ""Merge branch 'feature'"", maybe because the feature was 'smaller', with only 2 or 3 commits.</p>

<p>How can I avoid this to happen and ensure that all commits and commit messages from git are replayed on the SVN repo?</p>
","0","347411","0"
"25453340","13860","2014-08-22 18:21:38","1","68","<git><svn><migration><git-svn>","How can I import part of an SVN repo into an existing git repo, retaining history?","<p>I have an old SVN repository which contains a sub-directory of files I would like to import into an <strong>existing</strong> git repository, retaining history.  How can this be done?</p>

<p>Suppose I have the existing SVN layout:</p>

<pre><code>file:///svn
  trunk
    foo
    bar
  branches
</code></pre>

<p>And the following git layout:</p>

<pre><code>file:///git
  *master
    baz
    qux
</code></pre>

<p>And I want to import <code>svn:///file/trunk/foo</code> into git, such that I have the following result:</p>

<pre><code>file:///git
  *master
    foo
    baz
    qux
</code></pre>
","0","13860",""
"7258213","34759","2011-08-31 14:11:13","4","959","<git><svn><git-svn>","Keeping revision history from before copy/rename in svn -> git","<p>I recently moved an SVN repository into Git (following <a href=""http://www.jonmaddox.com/2008/03/05/cleanly-migrate-your-subversion-repository-to-a-git-repository/"" rel=""nofollow"">http://www.jonmaddox.com/2008/03/05/cleanly-migrate-your-subversion-repository-to-a-git-repository/</a>) but found a bit of a limitation - some of the files being imported have a long history prior to a SVN copy, but doing a git log --follow on any of these files only gives the history after the copy.</p>

<p>Is there a way of importing from SVN to Git that includes a revision history that follows SVN Copy/Rename?</p>
","0","34759","0"
"44266216","2437508","2017-05-30 15:24:58","1","463","<git><svn><git-svn><blame><git-blame>","git blame when a line comes from two branches","<p>How does <strong>git-blame</strong> blame a line that is coming from 2 different revisions on 2 branches that were merged?</p>

<p><strong>Context</strong></p>

<p>I'm working with git-svn and I'm sick of seeing lines on blame that only point to a ""merge"" revision where there was no, say, <em>real merge</em> performed. I want to see what would happen if I hacked the revision with commit-tree so that I can force the merge to be a real merge (let's not consider git-svn's peculiarities for the time being and let's consider this a pure git problem). I tried blaming a file to see if now git is able to see where the line is really coming from (after having the ""real"" parent now included thanks to commit-tree) but I still get the same output as if there was no merge of the other branch.</p>

<p>Thanks in advance.</p>
","3","2437508","0"
"7522237","916811","2011-09-22 22:32:33","3","1500","<git><git-svn>","Updating a bare git repository from a git-svn cloned remote repository","<p>I have a remote SVN repository (X) where a freelance developer is committing his work. However, in my company we work with GIT and are using git-svn to interoperate GIT and SVN. That's ok!</p>

<p>So, I've cloned the SVN repository (X) into a GIT local repository (A). After this, I've made a clone of the local git repository (A) into a local GIT bare repository (B) to be able to pull it from everywhere through SSH.</p>

<p>The problem is: everytime the developer commits to his SVN repository, I do ""git svn fetch &amp;&amp; git svn rebase"" in order to get updates local repos (A) , but I can't update my local bare repository (B) from A. From B, I ran ""git fetch"", so it fetched changes from (A) into FETCH_HEAD, but I want to ""merge"" these changes to the bare repository (B) HEAD, so that I can pull changes from a remote repos.</p>

<p>Any ideas?</p>

<p>I hope I've been clear enough. Thanks!</p>
","1","916811","0"
"44323646","125540","2017-06-02 07:55:16","1","112","<git><svn><version-control><interop><git-svn>","Using SVN commands alongside git-svn: Possible? Advisable?","<p>I was able to do the following without any problems:</p>

<ol>
<li>Clone a remote SVN repo via <code>git svn clone</code>.</li>
<li>Make commits to the local git repo via <code>git add</code> and <code>git commit</code>.</li>
<li>Push git commits to the remote SVN repo via <code>git svn dcommit</code>.</li>
</ol>

<p>But because I noticed <code>svn status</code> not reflecting the <code>dcommit</code>'ed changes in my local <code>.svn/</code> repo, AND because I wanted to <em>""have a nice, clean feeling about SVN-git interoperability""</em> as far as my local <code>.svn/</code> and <code>.git/</code> repos are concerned, I tried doing an <strong><code>svn update</code></strong> also (following the <code>git svn dcommit</code>). <strong>This, however, resulted in SVN conflicts!</strong></p>

<p>In the articles on the web talking about <code>git-svn</code> usage, I'm seeing no mention of <code>svn update</code> following a <code>git svn dcommit</code>. It seems no one wants to use SVN once <code>git-svn</code> is working.</p>

<p><strong>Question: Does use of <code>git-svn</code> specifically forbid you from using SVN commands (like <code>svn update</code>)? If no, how do I easily bring by local <code>.svn/</code> repo up-to-date?</strong></p>

<p>Other than a mere <em>""nice, clean feeling of SVN-git interoperability""</em> that I mentioned above, I would also like to be able to switch to the SVN command-set if needed, say, when troubleshooting SVN revisions with a colleague at my disk who's not using <code>git-svn</code> (like everyone else in the team!).</p>
","0","125540",""
"44546769","2701069","2017-06-14 13:51:10","1","182","<git><svn><git-svn><binaries>","Handle large repository with binaries in git-svn","<p>At my workplace there is a large svn repository (+80.000 revisions) with lots of binary files. I am experimenting with git-svn over it, but it seems impractical to clone the whole history (it takes more than 100 GB and nearly a week to complete the process).</p>

<p>I have tried cloning a subset of revisions (last ~10.0000) and that works reasonably well. The main drawback of this approach is that blames only go up to the oldest revision I fetched.</p>

<p>Ideally, I would like to clone the whole history for source files and only the last thousand revisions for binaries. Is that somehow possible? Any other suggestions?</p>
","5","2701069",""
"7866387","599912","2011-10-23 13:22:59","2","3271","<windows><linux><git><svn><git-svn>","git mingw32 and long path/file names under windows","<p>I have a production SVN repository that i want to clone with git. when I try to <code>git svn clone</code> it I get error that has to do with some files that have a long combination of path filename. </p>

<p>I figure that this is a limitation caused by the GNU shell mingw32 that git uses to run since neither windows or unix has this kind of limitation.</p>

<p>Is there anyway to overcome this limitation ? I don't want to start changing the filenames/paths before i'm sure that I want to move to git.</p>

<p>Thanks.</p>
","1","599912",""
"7879099","564083","2011-10-24 16:57:33","15","7225","<git><svn><git-svn>","Why is git svn fetch so slow?","<p>I'm trying to <code>git svn fetch</code> my repo to perform a <code>git rebase -i</code>  I'm performing the fetch locally why is it so slow?  Should it really take so much time to create 1000 revisions?  It seems like the process just ""falls a sleep"" on a file then suddenly there is a flurry of activity.</p>
","4","564083",""
"7892940","21322","2011-10-25 16:59:33","4","810","<git><git-svn>","git-svn with file-based access to repository","<p>I get the following error when I try to git clone an SVN repository:</p>

<pre><code>$ git svn clone ""file:////stevenagefs/Projects/6500-6999/6792/DesignSVNRepos"" 
""DesignGit"" -T trunk -b branches -t tags -r 0:HEAD
Couldn't open a repository: Unable to open an ra_local session to URL: Unable to
 open repository 'file:///stevenagefs/Projects/6500-6999/6792/DesignSVNRepos' at
  C:\Apps\Git/libexec/git-core\git-svn line 2210
</code></pre>

<p>Is there something I'm doing wrong or is it not possible to use git-svn like this?</p>

<p>Note that I know that file-based access to SVN repositories is considered harmful, but that's all I have.</p>
","0","21322",""
"26046698","605436","2014-09-25 19:37:21","86","72001","<git><git-svn>","git refname 'origin/master' is ambiguous","<p>I have a git repository that is tracking several remote branches:</p>

<pre><code>$ git branch -a
* master
  remotes/git-svn
  remotes/origin/master
  remotes/trunk
</code></pre>

<p>When I try to setup a default one I get the following error:</p>

<pre><code>$ git branch --set-upstream-to=origin/master master
warning: refname 'origin/master' is ambiguous.
fatal: Ambiguous object name: 'origin/master'.
</code></pre>

<p>I would like to kremove some of the remote master branches but the master references are still there. How can I remove them to be able to set the default upstream branch to <code>origin/master</code>?</p>

<pre><code>$ git show-ref master
cba97a58c99743c355b569bbf35636c8823c2d96 refs/heads/master
6726b4985107e2ddc7539f95e1a6aba536d35bc6 refs/origin/master
d83f025cd3800ed7acd76b2e52ae296e33f1cd07 refs/original/refs/heads/master
cba97a58c99743c355b569bbf35636c8823c2d96 refs/remotes/origin/master
</code></pre>
","3","605436","0"
"63231872","7556646","2020-08-03 14:59:00","7","461","<windows><git><svn><version-control><git-svn>","Migrate SVN repository with multiple projects and svn externals to git","<p>I'm aware how to migrate a SVN repository which has the following structure</p>
<pre><code>SVN Repo1
  + trunk
  + branches
  + tags
</code></pre>
<p>I could use the following command</p>
<pre><code>git svn clone svn://hostname/Repo1/ --prefix=svn/ --no-metadata --authors-file &quot;authors-transform.txt&quot; --stdlayout c:\mytempdir
</code></pre>
<p>see <a href=""https://learn.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git"" rel=""noreferrer"">https://learn.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git</a> and <a href=""https://stackoverflow.com/a/3972103/7556646"">https://stackoverflow.com/a/3972103/7556646</a>.</p>
<p>But when my SVN repository has the following structure</p>
<pre><code>SVN Repo2
  + Project1
      + trunk
      + branches
      + tags
  + Project2
      + trunk
          + Project1 &lt;-- external to ^/Project1/trunk
      + branches
      + tags
  + Project3
      + trunk
          + Project1 &lt;-- external to ^/Project1/trunk
      + branches
      + tags
</code></pre>
<p>I've no idea how to convert it to git.</p>
<p>Should I migrate each project in <code>Repo2</code>? In that case the svn externals are missing.
Or is there a way to migrate the hole <code>Repo2</code>?</p>
<p>Remark: A SVN client user was just checking out <code>Project2</code> or <code>Project3</code> and not <code>Project1</code>.</p>
","1","7556646","0"
"22907326","1180556","2014-04-07 08:33:58","2","2128","<git><git-svn><git-branch>","Branch name starting with '-' in git","<p>I am moving from svn to git using git-svn, and some of my branches names started with '-'. Now with help form <a href=""https://stackoverflow.com/questions/20034705/how-do-i-delete-a-branch-with-the-name-starting-with"">this</a> question and <a href=""http://git-scm.com/book/en/Git-and-Other-Systems-Migrating-to-Git"" rel=""nofollow noreferrer"">this</a> migration documentation I am able to pass parameters starting with '-'. but on creating branch git returns an error stating:</p>

<blockquote>
  <p>fatal: '-CLOSED-mybranch' is not a valid branch name.</p>
</blockquote>

<p>I am using gitlab. The command that I am running to create branches is: </p>

<pre><code>git for-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | while read branchname; do git branch -- ""$branchname"" --""refs/remotes/$branchname""; git branch -r -d -- ""$branchname""; done
</code></pre>

<p><a href=""https://wincent.com/wiki/Legal_Git_branch_names"" rel=""nofollow noreferrer"">This</a> articles explains legal branch names and I think my branch name is Legal. Can anyone tell me where the problem could be?</p>

<p>PS: branch name not starting with '-' are successfully imported.</p>
","0","1180556",""
"4777681","572233","2011-01-24 00:59:13","8","4399","<git><github><git-svn><git-config>","How to enable multiple usernames for git? ie. Specific project can have specific username","<p>I am working with 2 projects in same time. One is for my work and another is my personal project. I'd like to use git as version control software.</p>

<p>I have configured .gitconfig under my my directory as follows. </p>

<pre><code>  1 [user]
  2   name = gladder
  3   email = gladder
</code></pre>

<p>So git can pickup my user settings automatically.
however, I am just wondering that is it possible to get this setting in small scope?</p>

<p>So the project's user settings can override global user settings.</p>
","1","572233",""
"4790001","473872","2011-01-25 04:30:01","2","358","<git><git-svn>","No longer track branches with git-svn","<p>I have cloned a svn branch using git-svn and am tracking all folders and branches. I would like to drop everything and only track web/trunk/* (for rebase, dcommit, etc.)</p>

<p>Is there any way to do this without reinitializing the repository?</p>
","1","473872",""
"22931404","2523860","2014-04-08 08:19:24","2","7612","<git><svn><git-svn>","Import svn repo to git WITHOUT history","<p>I need to import svn repo (trunk, branches, tags) to new empty git repo WITHOUT history.
Svn history is very large, because many branches and tags exist. </p>

<p>Svn's trunk must get into git's master. Svn's branches must get into git's branches. And svn's tags must get into git's tags. All without history.</p>

<p>This command will import with history:</p>

<pre><code>git svn clone http://server.ru/myrepo/ --stdlayout --preserve-empty-dirs .
</code></pre>

<p>Do branches and tags import by hands (checkout each from svn and commit to git) is too laborious.</p>
","1","2523860",""
"4807874","217325","2011-01-26 17:38:33","2","811","<git><git-svn>","Importing only specific files from a svn repository to git","<p>I'm trying to import a few files from SVN to a new git repository.</p>

<p>For Example, I have the following in SVN:</p>

<pre><code>  files/file1
  files/file2
  files/file3
  files/image1
  files/image2
</code></pre>

<p>I want to import only the <code>files/image*</code> files.</p>

<p>Is this possible?</p>
","0","217325",""
"5003935","46375","2011-02-15 13:00:01","10","11261","<git><branch><git-svn><git-branch>","git-svn - Checkout a remote branch that already exists in svn when my master is already a branch.  Explain this .git/config","<p>This is a bit of an oddball question given how the team I've joined is using SVN.  Basically, the svn repository follows a standard layout, but trunk really hasn't been touched in 1.5 years or so and work tends to happen in branches and branches of branches only.  As such, I've used git-svn to clone from the branch that represents the active branch for our next release and that is what master tracks in my local git repository.  Let's call this branch in svn 'release' from here on out.   Using git-svn for this purpose is just hunky dory.</p>

<p>Now, someone has created a feature branch off of 'release', that I'm going to call 'feature', that I'd like to pull down to a local branch of mine, and commit to as well.  Sure, I can get away with just cloning that branch off into another directory/git repository locally, but what I'd really like to do is have 'feature' mirrored in a local branch within my local git repository as well to make merging between the two as straightfoward as possible.  I've seen other stackoverflow.com posts show how this works assuming you've used <code>git svn init</code> with <code>--stdlayout</code>, but I didn't do that in my case for the reasons stated above.</p>

<p>Here is my .git/config</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = https://our.svn.server/svn/root/branches/release
    fetch = :refs/remotes/git-svn
</code></pre>

<p>I'm assuming what I need in my <code>[svn-remote]</code> section is a <code>branches = $something</code> but I don't know what that $something is in this case nor what incantation of git checkout and other commands I need after I make that change to .git/config.</p>

<p>Any suggestions?</p>

<hr>

<p><strong>Edit - The following works:</strong></p>

<p>So I started from scratch and did the following clone command:</p>

<p><code>git svn clone <a href=""https://my.svn.server/svn/root"" rel=""noreferrer"">https://my.svn.server/svn/root</a> -T branches/branch_I_want_as_master -b branches</code></p>

<p>Which, after about 16 hours, finally pulled everything down that it needed to.  The resultant .git/config looks like this:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = https://my.svn.server/svn/root
    fetch = branches/branch_I_want_as_master:refs/remotes/trunk
    branches = branches/*:refs/remotes/*
</code></pre>

<p>So I know this works - I can <code>git checkout -b name-of-a-branch name-of-a-branch</code> and it gives me the remote branch in my local git repo.   The previous answers weren't the exact answers I needed, but I've upvoted since they were helpful.  </p>

<p>At this point, I'll accept answer that just explains why this works and perhaps a useful link that breaks down how to do things properly with .git/config.  </p>
","0","46375","0"
"5016324","449613","2011-02-16 12:18:57","3","1603","<svn><git><git-svn>","git svn dcommit not work","<p>I'm to migrate a extent git repository to a new svn repository,.
I'm follow this steps: <a href=""http://sandrotosi.blogspot.com/2010/02/migrate-git-repo-to-svn-one.html"" rel=""nofollow"">http://sandrotosi.blogspot.com/2010/02/migrate-git-repo-to-svn-one.html</a></p>

<p>The problem is, when I run the command</p>

<pre><code>git svn dcommit
</code></pre>

<p>The error message is:</p>

<pre><code>digger$ git svn dcommit
Committing to http://repository_url_path/trunk ...
A   .gitmodules
A   vendor/rails
6ce13429cbc1359d85e1dc99c84561840e89d455 doesn't exist in the repository at /opt/local/libexec/git-core/git-svn line 4277
Failed to read object 6ce13429cbc1359d85e1dc99c84561840e89d455 at /opt/local/libexec/git-core/git-svn line 558
</code></pre>

<p>How can'i fix it?</p>

<p>Thanks!</p>
","8","449613","0"
"42347647","543735","2017-02-20 14:53:10","2","296","<git><git-svn><git-clone><git-remote>","Is there a way to clone a git repository including its remote repositories?","<p>Is there a way to use some <strong>git clone / fetch</strong> mechanism to keep the repo in my clone up to date including all <strong>refs/remotes/ from the remote</strong>?</p>

<p>This has nothing to do with <code>git fetch --all</code>, <code>git pull --all</code> or <code>git svn</code>. It's just about copying the remotes of a remote to a clone.</p>

<p>A command like this would be great:</p>

<pre><code>git clone --include-remote-remotes git@linuxmachine:TheGitSvnClone
</code></pre>

<p>And then periodically</p>

<pre><code>git fetch --update-remote-remotes origin
</code></pre>

<p><strong>Some Details:</strong></p>

<p>The remote has its own remote named <em>svn</em> which contains some branches:</p>

<ul>
<li>refs/heads/master</li>
<li>refs/remotes/svn/trunk</li>
<li>refs/remotes/svn/branch1</li>
<li>refs/remotes/svn/branch2</li>
</ul>

<p>As a result of the clone I'd expect a normal git repository including a working copy (checked out files) and the following refs:</p>

<ul>
<li>refs/heads/master</li>
<li>(refs/remotes/origin/master)</li>
<li>refs/remotes/svn/trunk</li>
<li>refs/remotes/svn/branch1</li>
<li>refs/remotes/svn/branch2</li>
</ul>

<p>I can't use <code>git clone --mirror</code> because that creates a bare repository.</p>

<p><strong>Why so complicated?</strong></p>

<p>Our company is currently using svn. Meanwhile I'm preparing the migration from svn to git. </p>

<p>Unfortunately <code>git svn fetch</code> takes forever on my windows machine so I'm using a linux machine that does the <code>git svn fetch</code> periodically and then I copy the resulting git repo using FileZilla. </p>
","6","543735","0"
"5026796","434893","2011-02-17 08:54:38","0","2395","<git><git-svn>","git repositiory adding files","<p>I had creating git repository <strong>Test</strong> on git and installed git on my windows machine and </p>

<pre><code>Global setup:

 Download and install Git
  git config --global user.name ""Rahul Mehta"" // i put here my name 
  git config --global user.email rahul23134654@gmail.com


Next steps:

  mkdir Test //done 
  cd Test // ..
  git init // done 
  touch README // 
  git add README // 
  git commit -m 'first commit' // running tthi give me erro 
  git remote add origin git@github.com:rahul23134/Test.git
  git push origin master
</code></pre>

<p>Running after comming  what errors are coming .</p>

<pre><code>Administrator@RAHUL ~/Test (master)
$ git commit -m 'first commit'
[master (root-commit) 3787ebd] first commit
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README

Administrator@RAHUL ~/Test (master)
$  git remote add origin git@github.com:rahul23134/Test.git

Administrator@RAHUL ~/Test (master)
$ git push origin master
The authenticity of host 'github.com (207.97.227.239)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
Host key verification failed.
fatal: The remote end hung up unexpectedly

Administrator@RAHUL ~/Test (master)
$ git push origin master
The authenticity of host 'github.com (207.97.227.239)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of know
n hosts.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly

Administrator@RAHUL ~/Test (master)
$ cd existing_git_repo
sh.exe"": cd: existing_git_repo: No such file or directory
</code></pre>

<p>how my readme file will be commited and i can see that file <a href=""https://github.com/rahul23134/Test"" rel=""nofollow"">https://github.com/rahul23134/Test</a> here in browser in listing of files.</p>

<p>Please suggest what should be do. </p>

<p>and Please also suggest the basic step to learn the git .</p>
","3","434893",""
"23201297","751","2014-04-21 16:21:39","3","771","<git><svn><git-svn><unfuddle>","git-svn fails to commit back to svn repo despite clean rebase","<p>I've been using git-svn for what feels like years now without any issues. My typical workflow is <code>work, commit, ..., work, commit, rebase, dcommit</code></p>

<p>All of a sudden I started getting this error today:</p>

<pre><code>$ git svn rebase
Current branch master is up to date. 

$ git svn dcommit
Assertion failed: (svn_uri_is_canonical(child_uri, NULL)), function uri_skip_ancestor, file /SourceCache/subversion/subversion-62/subversion/subversion/libsvn_subr/dirent_uri.c, line 1519.
error: git-svn died of signal 6
</code></pre>

<p>Just in case it's version related:</p>

<pre><code>$ git --version
git version 1.8.3.4 (Apple Git-47)
</code></pre>

<p>I do have one change in git stash, but that's never been a problem before. Could it be now?</p>

<p>Another thing that changed recently was that our Unfuddle repo (where the central SVN repo is hosted) recently ran out of space and we had to pay for a larger plan; but I was able to dcommit to it Friday afternoon, after increasing the plan size. I can't think of anything else that's changed.</p>

<p>I did find some other people on SO having issues with dcommit but nobody with this particular error message.</p>

<p>What should I do?</p>
","0","751",""
"23374676","377816","2014-04-29 20:30:49","0","141","<git><svn><git-svn>","Migrating git svn commits with moved and relocated commits","<p>We are trying to migrate our main source repository from svn to git
My first try was to simply do an git svn clone. After cloning was done I find that the first commit is in november 2012. I know for a fact that the code is a couple of years old
Examining the svn repo it looks like the first commit to the main directory took place in november 2012, while several files inside the repo have been committed years before that. So how can files inside a directory be committed before the parent directory..</p>

<p>I asked around as I'm new in the company, and no one knows for sure, but this repo has experienced a couple of svn relocate and svn move in an unusal way, for example they developed into a branch then moved that branch as a directory inside trunk, or developed into a branch, then renamed that branch as trunk and so on.</p>

<p>I picked one of those old commits that happened before november 2012 and can be queried using git log and tried </p>

<pre><code>svn up -r 599 http://myrepo/trunk
</code></pre>

<p>and received the error:</p>

<pre><code>svn: E195012: Unable to find repository location for 'http://myrepo/trunk' in revision 559
</code></pre>

<p>This error is reproducible for all committs before november 2012, i.e. those that can be queried using svn log, but cannot be checked out</p>

<p>The good news is that I'm able to do something like:</p>

<pre><code>svn diff -r 599 http://myrepo/trunk
</code></pre>

<p>My next approach is to run through all commits using svn diff, create patches and applies them to git using the original author, date, etc...</p>

<p>Any better ideas how to extract such corrupted commits?</p>

<p>I do not have physical access to the repo, and I can't use svnadmin</p>

<p><strong>Edit 1:</strong></p>

<p>It turned out I was not querying the root directory, but one level down the tree, that's why I was getting such errors. 
Anyways I did an svnrdump and succeeded in dumping the whole repository (> 32K commits), also the repo contained corrupted commits which I had to skip. </p>

<p>Further it has been imported locally. This helped me further understand what has happened</p>

<p>Basicaly, the repo used to have a very chaotic structure, something like</p>

<pre><code>svn 
   |_Project1 
         |_subproject1 
               |_branches 
                      |_branch1 
                      |_branch2 
               |_trunk 
               |_tags 
                      |_tagv1 
   |_Non-JavaProject 
         |_subproject 
   |_Project2 
          |_AnotherSubproject 
               |_SubSubproject 
          |_Subproject2 
               |_branches 
               |_tags 
          |_Subproject3 
               |_trunk 
          |_Subproject4 
               |_Subsubproject 
                       |_branches 
                       |_tags 
                       |_trunk
</code></pre>

<p>What happened afterwards, is that using a mixture of svn mv and copy, the structure was refined a bit</p>

<p>svn 
    |_mainProject
         |_trunk
         |_branches
         |_tags</p>

<p>So now we have paths like</p>

<pre><code>mainProject/trunk/_Project1
mainProject/trunk/_Project1/subproject1
mainProject/trunk/Project2/AnotherSubproject/SubSubproject 
</code></pre>

<p>and the same goes for branches/tags</p>

<p>In other words, I need to to define in .git/config in the fetch and other headers a method so that different directories from mainProject will follow different (multiple) old paths</p>

<p>Is this possible?</p>
","5","377816",""
"5270243","114798","2011-03-11 07:39:44","5","7276","<git><filter><git-svn><gitattributes>","How to setup gitattributes to filter part of a file?","<p>I am using Visual Studio 2010 and git (git svn). My coworker uses pure svn with the Ankhsvn plugin.</p>

<p>When i try to open the file with the Git Source Control Provider enabled, Visual Studion complains:</p>

<blockquote>
  <p>Source Control Plug-in<br>
  The active solution or project is controlled by adifferen source control plug-in than the one you have selected. If you change the source control plu-in, the active solution or project will be closed.<br>
  Do you want to continue?</p>
</blockquote>

<p>When i click yes an empty solution is opened.
When i click no, all the git specific icons next to the solution items are missing (i still see the branch name in the solution explorer) and i get prompted about the Source Control Plug-in every time i open the solution.</p>

<p>When i clone the svn repository which my coworker created the solution sln file contains the following</p>

<blockquote>
  <p>GlobalSection(SubversionScc) = preSolution<br>
        Svn-Managed = True<br>
        Manager = AnkhSVN - Subversion Support for Visual Studio<br>
    EndGlobalSection  </p>
</blockquote>

<p>I have deleted this section and now the solution opens without problems when the Git Source Control Provider is activated but complains when you select the Ankhsvn Provider - the situation is reversed.</p>

<p>I would like to tell git to remove this part of the .sln file during a pull (git svn fetch) and add it when i commit (git svn dcommit). Is this possible through gitattributes and how to do it?</p>

<p>EDIT:</p>

<p>I have now added </p>

<blockquote>
  <p>solutionname.sln filter=ankhsvn  </p>
</blockquote>

<p>to $GIT_DIR/info/attributes</p>

<p>and</p>

<pre><code>[filter ""ankhsvn""]
  clean=sed '/^Global$/ r ../ankhsvnsection '
  smudge=sed '/GlobalSection(SubversionScc)/,/EndGlobalSection/d '
</code></pre>

<p>to my .git/config file.</p>

<p>ankhsvnsection contains the secton that is removed by the smudge operation.
I does not seem to do anything?!</p>
","0","114798","0"
"5279981","616727","2011-03-12 00:47:00","7","1286","<svn><git><git-svn>","git equivalent of ""svn -v status""","<p>I want to know the list of files that are known to version control.</p>

<p>I know that in SVN, you can do something like:</p>

<pre><code>svn -v status
</code></pre>

<p>then you get a list of </p>

<blockquote>
  <p>""[rev#1] [rev#2] [creator] [file
  name]""</p>
</blockquote>

<p>rev#1 is the last revision that has this file and rev#2 is the first revision that has this file.</p>

<p><strong>This list contains all the files that are tracked by svn other than only the ones that have local changes.</strong></p>

<p>I wonder how to do this using <strong>GIT</strong></p>
","0","616727","0"
"5282405","67814","2011-03-12 12:13:00","11","7287","<git><cygwin><git-svn>","git svn clone died of signal 11 under cygwin","<p>I have a problem with <code>git svn</code> under <code>cygwin</code></p>

<pre><code>user@comp /cygdrive/c/repositories/git/repo $git svn clone --username=username ""https://host/svn/repos/repo"" .
Initialized empty Git repository in /cygdrive/c/repositories/git/repo/.git/
error: git-svn died of signal 11
</code></pre>

<p>How to handle this?</p>

<pre><code>user@comp ~ $svn --version
svn, version 1.6.15 (r1038135)
   compiled Nov 29 2010, 14:09:28

user@comp ~ $git --version
git version 1.7.4
</code></pre>
","3","67814",""
"5294516","338204","2011-03-14 03:45:53","15","10415","<xcode><svn><git><git-svn><xcode4>","Good practice to use git together with svn","<p>Subversion was popular several years ago, now git is becoming popular and more and more people want to replace Subversion with git. </p>

<p>Problem is that a lot projects were based on Subversion. So question is how to use git together with Subversion. Do not replace svn completely, and use git.</p>

<p>The simplest way I can figure out is to create git based on the Subversion branch code you have already checked out. Then use git to control locally. After modifications, submit to local git server, then check out to remote server with Subversion. Subversion is just like container to contain git. </p>

<p>BTW, I am coding with xcode 3.x , try xcode 4 before, but disappointed. ( Xcode 4 has come out now, but no retry yet)</p>

<p>How do you think ? Or any better choices ?</p>

<p>Thanks</p>
","3","338204","0"
"5302712","78182","2011-03-14 18:25:28","1","194","<svn><git><git-svn><svnadmin>","svn repo borked by git svn remove and add?","<p>I had a directory, <code>Dir</code>, that I removed with git svn, and then I added <code>dir</code>. By checking this two-commit in, svn is no longer able to update, hanging on the inability to add a directory which already exists.</p>

<p>Is there a way to remove the svn commits themselves that does not require access to the filesystem on which the repository sits?</p>

<pre><code>org.tmatesoft.svn.core.SVNException: svn: Failed to add directory 'dir': a versioned directory of the same name already exists
</code></pre>
","0","78182","0"
"42574332","4076565","2017-03-03 08:47:23","1","605","<git><svn><version-control><git-svn>","git-svn: git svn rebase does not update repo","<p>I can successfully fetch the svn repo via <code>git init</code> + <code>git svn fetch</code>.  But when I try to update or pull the svn repo updates to my local git-svn repo via <code>git svn rebase</code> I keep getting <em>Current branch trunk is up to date</em>.</p>

<p><strong>EDIT</strong>
Does it make a difference if I've already pushed modifications to a git repo?</p>

<p>Below is my <code>.git/config</code> file.</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
    hideDotFiles = dotGitOnly
[svn-remote ""svn""]
    url = https://server/svn/Project
    fetch = SubProject/trunk:refs/remotes/origin/trunk
    tags = SubProject/tags/{1.03.000,1.02.000}:refs/remotes/origin/tags/*
</code></pre>
","2","4076565","0"
"16772945","1581090","2013-05-27 12:11:45","0","254","<git><git-svn>","Repeated git log entry after merge failed","<p>I have a git-svn repository and wanted to merge a branch onto master. To do so, I performed the following steps, starting on the branch: </p>

<pre><code>git commit -m ""my commit message""    # commit the changes on the branch
git checkout master                  # change to the branch I want to changes to be merged in
git svn rebase                       # update the repository
git merge --no-ff -m ""my commit message"" # merge the branch onto master
</code></pre>

<p>But at this phase I got the following error:</p>

<pre><code>Auto-merging &lt;file&gt;
CONFLICT (content): Merge conflict in home/httpd/html/data/php/includes/Processes.inc.php
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>Then I went to fix the conflict on one offending file (several other files were merged fine), and repeated the last command, i.e.</p>

<pre><code>git merge --no-ff -m ""my commit message"" # merge the branch onto master
</code></pre>

<p>But got the following error:</p>

<pre><code>fatal: You have not concluded your merge (MERGE_HEAD exists).
Please, commit your changes before you can merge.
</code></pre>

<p>Ok, so then made a commit as the error message suggest,</p>

<pre><code>git commit -m ""my commit message""
</code></pre>

<p>After that, I looked in <code>git log</code> and saw my given commit message twice in the output! </p>

<p>The very last commit does not contain ANY change, while all the changes (including the file with the conflict) are part of the second-to-last commit. </p>

<p>I have three questions: </p>

<ol>
<li>What has happened above exactly to create TWO identical commits with the identical commit message?</li>
<li>Is there a 'simple' way to safely fix that? (Could I just do a <code>git reset HEAD~1</code> to get rid of the last, empty commit?)</li>
<li>What is the 'standard' procedure/list of commands in case a conflict occurrs after a merge? Should I do a <code>git merge</code> then, or a <code>git commit</code> or something else?</li>
</ol>

<p>If something is unclear, please provide comments so I can update the question and make it clearer. </p>
","2","1581090",""
"16795254","15371","2013-05-28 14:57:26","9","4450","<git><git-svn>","Can I make a file in git read-only?","<p>I'm writing an iOS app that uses a versioned Core Data model.<br>
I just very nearly released a version of the app which crashed on upgrade because I'd accidentally edited the <em>old</em> version as well as creating a new one.</p>

<p>To stop this happening again, I'd like to flag the old versions in some way that prevents any check-in that modifies those files without first removing the flag.</p>

<p>To make things more complicated, I'm using git-svn, so having a read-only repo as a submodule won't work.</p>
","1","15371","0"
"17866684","2620122","2013-07-25 19:07:30","3","324","<git><git-svn>","Grab the svn HEAD git commit number?","<p>In regular git I can run </p>

<pre><code>git rev-parse HEAD
</code></pre>

<p>to get the git HEAD revision number. How would I get the svn HEAD revision number instead?</p>

<p>I know I can manually grab it by looking at the git log for the last commit with a git-svn-id. 
Also, looking through the manual for log pretty-format there's a way to get the ref name (%d) which in the case of the HEAD svn commit shows up as git-svn.</p>

<p>Thanks. </p>
","4","2620122",""
"17865386","86803","2013-07-25 17:57:53","41","33346","<git><svn><version-control><git-svn>","git svn clone of a single directory of SVN repository","<p>I am attempting to use <code>git svn</code> to clone a single directory of a SVN repository into a Git repository.</p>

<p>If I use <code>git svn clone svn+ssh://path/to/repo/trunk/directory</code>, I get a Git repo without branches that mirror the branches in the source SVN repo.</p>

<p>If I use <code>git svn --stdlayout svn+ssh://path/to/repo/trunk/directory</code>, I get an empty Git repo. The following is the output of the command:</p>

<pre><code>Initialized empty Git repository in /directory/.git/
Using higher level of URL: svn+ssh://path/to/repo/trunk/directory =&gt; svn+ssh://path/to/repo
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: File not found: revision 100, path '/trunk/directory'
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
</code></pre>

<p>I had read that the way to fix the above was to add a revision range like <code>-r 1000:HEAD</code>, this still produces an empty repo. The output is:</p>

<pre><code>Initialized empty Git repository in /directory/.git/
Using higher level of URL: svn+ssh://path/to/repo/trunk/directory =&gt; svn+ssh://path/to/repo
</code></pre>

<p>Any ideas on how to clone a subdirectory of an SVN repository using git-svn that still grabs all of the branches &amp; tags from the source SVN respository?</p>
","0","86803","0"
"17865615","781743","2013-07-25 18:09:35","15","7169","<git><svn><git-svn>","How can I remove empty directories in git-svn?","<p>I have a specific problem I did not find a solution for, here or anywhere else. I have a Subversion repository and I am using git-svn to access it and work on it.</p>
<p>Some time ago, there were some empty directories in the Subversion repository (empty, only subfolders). Git does not track those. Then they were deleted from the Subversion repository. But I still have them even after running this command:</p>
<pre><code>git svn rebase
</code></pre>
<p>And when I delete them by hand, they are recreated during the next command:</p>
<pre><code>git svn rebase
</code></pre>
<p>How can I get rid of them?</p>
<p>I checked using pure Subversion and they are not in the repository.</p>
","7","781743","0"
"17899173","452385","2013-07-27 15:02:47","0","66","<git><svn><git-svn>","git looses the history trail between SVN tags","<p>My git repo is tracking an SVN repo. One of my git branch, let's call it 'latest_tag', points to the source code as it is in the latest SVN tag. When a new SVN tag is created, I want to merge the changes in 'latest_tag'. When I try to do this, git complains about merge conflicts, as though it had no understanding of the SVN history.</p>

<p>The SVN repo is using the standard structure.</p>

<pre>trunk/
tags/
 - v1
branches/</pre>

<p>I created my git repo the usual way.</p>

<pre><code>git svn clone --stdlayout url_to_svn_repo git_repo
</code></pre>

<p>I created git branches for each SVN tag, and a 'latest_tag' branch.</p>

<pre><code>git branch v1 tags/v1
git branch latest_tag v1
</code></pre>

<p>When a new tag is added in the SVN repo (e.g., v2), I can import it in my git repo.</p>

<pre><code>git svn fetch
git branch v2 tags/v2
</code></pre>

<p>But if I try to fast-forward the 'latest_tag' branch from v1 to v2, I get an error.</p>

<pre><code>$ git checkout latest_tag
$ git merge v2
Auto-merging source.py
CONFLICT (add/add): Merge conflict in source.py
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>When I look at the conflict, it looks like git considers all changes between v1 and v2 as unrelated, though they have a common history.</p>

<p>Here is a minimal script that recreates the issue.</p>

<pre><code># Create the svn repo and its first tag.
svnadmin create svn_repo/
svn checkout ""file:///${PWD}/svn_repo/"" svn_working_copy
( cd svn_working_copy ; mkdir -p trunk tags branches ; svn add * ; svn commit -m 'Initialize SVN repo' ; cd trunk ; echo ""print 'Hello v1'"" &gt;source.py ; svn add * ; svn commit -m 'Development for v1' ; cd .. ; svn cp trunk/ tags/v1 ; svn commit -m 'Tag v1' ; sed --in-place 's/v1/v2/' trunk/* ; svn commit -m 'Development for v2' ; )

# Create a git repo from the svn repo.
git svn clone --stdlayout ""file://${PWD}/svn_repo/"" git_repo
( cd git_repo ; git branch v1 tags/v1 ; git branch latest_tag v1 )

# Create tag v2 in svn.
( cd svn_working_copy ; svn cp trunk/ tags/v2 ; svn commit -m 'Tag v2' )

# Merge or rebase 'latest_tag' git branch on svn tag v2.
( cd git_repo ; git svn fetch ; git branch v2 tags/v2 ; git checkout latest_tag ; git merge v2 )
</code></pre>

<p><strong>EDIT</strong>
I confirm git seems to have no sense of the common history between two SVN tags.</p>

<pre><code>$ git log --oneline master
bd050cd Development for v2
373f808 Development for v1
3b92703 Initialize SVN repo
$ git log --oneline remotes/tags/v1
31f9fff Tag v1
3b92703 Initialize SVN repo
$ git log --oneline remotes/tags/v2
b717759 Tag v2
3b92703 Initialize SVN repo
</code></pre>

<p>If git understood the SVN history, it would output this.</p>

<pre><code>$ git log --oneline remotes/tags/v1
31f9fff Tag v1
373f808 Development for v1
3b92703 Initialize SVN repo
$ git log --oneline remotes/tags/v2
b717759 Tag v2
bd050cd Development for v2
373f808 Development for v1
3b92703 Initialize SVN repo
</code></pre>
","0","452385",""
"17910674","281545","2013-07-28 17:10:04","1","770","<git><svn><git-svn>","extra branches created by git svn clone","<p>Continuing from my <a href=""https://stackoverflow.com/questions/17413476/git-svn-specify-branches-and-tags-on-a-non-standard-svn-repository-layout"">previous question</a> I decided to go ahead and reclone the <a href=""https://sourceforge.net/p/oblivionworks/code/3008/tree/"" rel=""nofollow noreferrer"">thing</a> :</p>

<pre><code>$ git svn clone --branches=Branches/Wrye\ Bash/* \
--tags=Tags/Wrye\ Bash/* \
--trunk=Programs/Wrye\ Bash/ --prefix=svn/ \ 
--ignore-paths=""^(?:Releases|Projects|Scripts|Games|)/|^Programs/\
(?:Nif Scanner|Nif Viewer|Raziel23x's Oblivion Toolset|Shader Disasm|Shader Editor)/"" \
--authors-file=authors_with_emails.txt \
svn://svn.code.sf.net/p/oblivionworks/code/ . &gt;&gt; 2013.07.28 2&gt;&amp;1
</code></pre>

<p>So now I only cloned a particular project with its branches and tags</p>

<p>Results :</p>

<pre><code>$ git branch -a
* master
  remotes/svn/291-fixes
  remotes/svn/294.2%20bugfixes
  remotes/svn/294.2-3329021
  remotes/svn/295-3329021
  remotes/svn/295-fixes
  remotes/svn/296-unicode
  remotes/svn/302-fixes
  remotes/svn/dev-sharlikran
  remotes/svn/tags/274
  remotes/svn/tags/276
  remotes/svn/tags/288
  remotes/svn/tags/289
  remotes/svn/tags/290
  remotes/svn/tags/291
  remotes/svn/tags/291.1
  remotes/svn/tags/292
  remotes/svn/tags/293
  remotes/svn/tags/294
  remotes/svn/tags/294.1
  remotes/svn/tags/294.1.test
  remotes/svn/tags/294.2
  remotes/svn/tags/295
  remotes/svn/tags/295.1
  remotes/svn/tags/295.2
  remotes/svn/tags/295.3
  remotes/svn/tags/295.4
  remotes/svn/tags/295.5
  remotes/svn/tags/296
  remotes/svn/tags/297
  remotes/svn/tags/297.1
  remotes/svn/tags/298
  remotes/svn/tags/299
  remotes/svn/tags/300
  remotes/svn/tags/301
  remotes/svn/tags/302
  remotes/svn/tags/302.1
  remotes/svn/tags/302a
  remotes/svn/tags/303
  remotes/svn/tags/304
  remotes/svn/trunk
</code></pre>

<p>But the <a href=""http://sourceforge.net/p/oblivionworks/code/3049/tree/Branches/Wrye%20Bash/"" rel=""nofollow noreferrer"">Branches/Wrye\ Bash/</a> folder only contains :</p>

<pre><code>291-fixes
294.2-3329021
295-fixes
302-fixes
dev-sharlikran
</code></pre>

<p>So where did the <code>remotes/svn/294.2%20bugfixes</code>, <code>remotes/svn/295-3329021</code> and <code>remotes/svn/296-unicode</code> pop from ?</p>

<pre><code>r1947 = 435203c3dc4c8a608e3a33d325afd2013549fd34 (refs/remotes/svn/trunk)
Found possible branch point: svn://svn.code.sf.net/p/oblivionworks/code/Programs/Wrye%20Bash =&gt; svn://svn.code.sf.net/p/oblivionworks/code/Branches/Wrye%20Bash/296-unicode, 1947
Found branch parent: (refs/remotes/svn/296-unicode) 435203c3dc4c8a608e3a33d325afd2013549fd34
Following parent with do_switch
Successfully followed parent
r1948 = c5e6069b46f9501478e0f354c9956092be3e407f (refs/remotes/svn/296-unicode)
    M   Mopy/bash_default.ini
# etc
</code></pre>

<p>The <a href=""https://www.dropbox.com/s/7exwhhnaqnhffek/2013.07.28_the_dump_of_the_clone"" rel=""nofollow noreferrer"">complete log</a>.</p>

<p>EDIT :
Another question : Should I create local branches for those ?<br>
Forgot to mention I intent this as a git-svn bridge for now but eventually as a complete migration - so I want to do it as correctly as possible</p>

<p>Notice I am not talking about the <a href=""https://stackoverflow.com/a/13394122/281545"">@branches</a></p>
","0","281545",""
"69184073","16635201","2021-09-14 20:18:52","23","3474","<git><perl><github><svn><git-svn>","Not able to run git svn command in windows","<p>git svn command is not working in windows. I have downloaded the latest stable version(2.33.0.2) of git for windows. I'm getting the following error while executing the git svn command.
It is strange to see that it is looking for Perl libraries in unix style path while on windows.
Please help me resolve the issue.</p>
<p>Error message after executing <strong>git svn</strong>:</p>
<blockquote>
<p>Can't load '/usr/lib/perl5/vendor_perl/auto/SVN/_Core/_Core.dll' for
module SVN::_Core: No such file or directory at
/usr/lib/perl5/core_perl/DynaLoader.pm line 193.  at
/usr/lib/perl5/vendor_perl/SVN/Base.pm line 59. BEGIN
failed--compilation aborted at /usr/lib/perl5/vendor_perl/SVN/Core.pm
line 5. Compilation failed in require at C:/Program
Files/Git/mingw64/share/perl5/Git/SVN/Utils.pm line 6. BEGIN
failed--compilation aborted at C:/Program
Files/Git/mingw64/share/perl5/Git/SVN/Utils.pm line 6. Compilation
failed in require at C:/Program
Files/Git/mingw64/share/perl5/Git/SVN.pm line 32. BEGIN
failed--compilation aborted at C:/Program
Files/Git/mingw64/share/perl5/Git/SVN.pm line 32. Compilation failed
in require at C:/Program Files/Git/mingw64/libexec/git-core\git-svn
line 64. BEGIN failed--compilation aborted at C:/Program
Files/Git/mingw64/libexec/git-core\git-svn line 64.</p>
</blockquote>
","1","16635201","0"
"17948394","2578874","2013-07-30 13:27:37","1","105","<git-svn>","git-svn: Follow SVN-Repo with partial read access","<p>I would like to follow a SVN-Repo via git-svn, that has a restriction on it's root node.
Precisely that is:
* SVN with standard layout (trunk, branches, tags)
* anonymous read access on the above directories
* no read access on the root dir</p>

<p>The classic approach with ""git svn clone -s ..."" doesn't work here, because it requires read access on the root node.</p>

<p>Is there any possibility to circumvent this?
The goal for a solution would be to follow trunk, branches and tags within a common git repository.</p>
","0","2578874",""
"19048890","457125","2013-09-27 10:47:26","2","5535","<git-svn>","Git clone from svn repo with no trunk directory and place files in root of git repo","<p>I'm importing code from a svn repository with a structure as follows:</p>

<pre><code>Repo/
  branches/
  tags/
</code></pre>

<p>The repository doesn't have a trunk.</p>

<p>Code is kept in the subdirectory ProjectName, so when it's checked out I see        </p>

<pre><code>Repo/
  ProjectName/
    Files
</code></pre>

<p>When I execute: </p>

<pre><code>git svn clone -t tags -b branches https://servername/svn/Repo GitRepo
</code></pre>

<p>I get a git repository at GitRepo and everything imports correctly, the problem is that whenever I check out files in git it checks them out into the ProjectName subdirectory like:</p>

<pre><code>GitRepo/
  ProjectName/
    Files
</code></pre>

<p>My question is, is there any way way to tell git svn to clone the repo in such a way that I get:</p>

<pre><code>GitRepo/
  Files
</code></pre>

<p>So, what I'm asking is if I can tell git to use a folder that only appears when a branch is checked out as the root for the repository.</p>
","1","457125",""
"51073661","2924482","2018-06-28 02:01:37","3","2799","<git><github><git-svn>","Git:Adding error adding a second github account ""ssh: Could not resolve hostname github-secondUser""","<p>I'm following the instructions on this <a href=""https://www.youtube.com/watch?v=fnSRBRiQIU8&amp;feature=youtu.be"" rel=""nofollow noreferrer"">video</a> of how add second github account. But I'm getting this error:</p>

<pre><code>ssh: Could not resolve hostname github-secondAccount: nodename nor servname provided, or not known
fatal: Could not read from remote repository.
</code></pre>

<p>Here is what I have done. </p>

<p>I add it a second sshkey:</p>

<pre><code>id_rsa
id_rsa.pub
id_rsa_secondAccount
id_rsa_secondAccount.pub
</code></pre>

<p>And also created a config:</p>

<pre><code>#first account
        Host github.com
        HostName github.com
        User git
        IdentityFile ~/.ssh/id_rsa

#secondAccount account
        Host github-secondAccount
        HostName github.com
        User git
        IdentityFile id_rsa_secondAccount


echo ""# myNewRepo"" &gt;&gt; README.md
git init
git add README.md
git commit -m ""first commit""
git remote add origin git@github-secondAccount:myUSer/myNewRepo.git
git push -u origin master
</code></pre>

<p>But at the moment of <code>git push -u origin master</code> I'm getting this error:</p>

<pre><code>ssh: Could not resolve hostname github-secondAccount: nodename nor servname provided, or not known
fatal: Could not read from remote repository.
</code></pre>

<p>Any of you knows what I doing wrong or how can fix this?</p>

<p>I'll really appreciate your help.</p>
","0","2924482","0"
"19067489","1275997","2013-09-28 13:26:37","0","815","<git><github><git-svn>","I recently installed cygwin but when i run any command in it, it says ""-bash: git: command not found""","<p>I recently got a brand new computer with decent configuration.
Today I have installed cygwin, and when I open it and run any command like ""<strong>git status</strong>"" by visiting my htdocs directory <strong>c:/xampp/htdocs/testapp</strong></p>

<p>Then, always it returns ""-bash: git: command not found"".</p>

<p>After that I installed the Git Bash for Windows from <a href=""http://git-scm.com/"" rel=""nofollow"">http://git-scm.com/</a>, where I can run the Git commands and it works fine, but not the cygwin again.</p>

<p>Is there any clue, what should be done to get cygwin working?</p>
","1","1275997",""
"51090017","3460029","2018-06-28 19:24:42","0","1329","<git><svn><git-svn>","Is one off svn to git migration without prefix safe?","<p>I have a number of repositories in subversion that I want to migrate to git.
Once the migration is complete, the svn repos will be marked read only and never committed to again.
In the specific case I'm working on, there are two active branches, let's call them <code>BranchA</code> and <code>BranchB</code>.
Once the migration is done, I would prefer to have them look like ""regular"" git branches without a prefix.</p>

<p>Currently I'm using the command:</p>

<pre><code> git svn clone --prefix=svn/ --stdlayout http://repos-url/ &lt;git-name&gt;
</code></pre>

<p>In which case my branches ends up being called <code>svn/BranchA</code> and <code>svn/BranchB</code></p>

<p>But I would rather use </p>

<pre><code> git svn clone --prefix="""" --stdlayout http://repos-url/ &lt;git-name&gt;
</code></pre>

<p>And have them being called <code>BranchA</code> and <code>BranchB</code> in git.</p>

<p>However, <a href=""https://git-scm.com/docs/git-svn#git-svn---prefixltprefixgt"" rel=""nofollow noreferrer"">the docs</a> warn against this saying </p>

<blockquote>
  <p>Setting a prefix (with a trailing slash) is strongly encouraged in any case...</p>
</blockquote>

<p>But I'm not sure I understand why. It also says that the SVN url will be added as a ""remote"", but that's not really what I want. </p>

<p>I'm worried that by using <code>--prefix=""""</code> I will run into some trouble at a later point, because I don't really understand the warning.</p>

<p>So I guess my questions are:</p>

<ul>
<li>What are the downsides to using <code>--prefix=""""</code> ?</li>
<li>Can I prevent svn-git from keeping a reference to the SVN repos?</li>
</ul>
","0","3460029",""
"35900710","1207539","2016-03-09 19:20:16","8","7022","<git><svn><gitlab><git-svn><svn2git>","svn to git conversion: Correct remote ref must start with 'refs/' error","<p>(I'm posting this question with the intention of answering it myself as I could not find the answer elsewhere. Hopefully it will help others who run into the same issue and it will help me next time I'm trying to do it.)</p>

<p><strong>The Challenge</strong></p>

<p>I want to convert an SVN repository to a locally hosted gitlab GIT repository and maintain history.</p>

<p><strong>The Setup</strong></p>

<p>Gitlab 8.5, Ubuntu 14.04 LTS, subversion 1.8.8</p>

<p><strong>The Problem</strong></p>

<p>Initial attempts to convert from svn to git using git-svn or svn2git resulted in the following error.</p>

<p><strong>Error</strong></p>

<p><code>svn-remote.svn: remote ref '//example.com:81/svn/myrepository/trunk:refs/remotes/trunk' must start with 'refs/'</code></p>

<p><strong>What I've tried</strong></p>

<p>I've followed both guides in the external references below.</p>

<p><strong>External References used</strong></p>

<ul>
<li><a href=""http://doc.gitlab.com/ce/workflow/importing/migrating_from_svn.html"" rel=""noreferrer"">http://doc.gitlab.com/ce/workflow/importing/migrating_from_svn.html</a></li>
<li><a href=""http://john.albin.net/git/convert-subversion-to-git"" rel=""noreferrer"">http://john.albin.net/git/convert-subversion-to-git</a></li>
</ul>
","1","1207539","0"
"23286758","1746434","2014-04-25 07:27:57","1","248","<git><svn><github><workflow><git-svn>","git-svn always generates unique hashes","<p>I'm working on a project for a long time was hosted in SVN repository, and now is in the process of transitioning to GitHub.</p>

<p>Currently I'm the only developer who works primarily in Git, others work with SVN. My workflow is as simple as: gitsvn clone , git commit , git-svn dcommit, git push . But if someone else also worked in Git, we would get conflicts when pushing to GitHub, because `git svn clone' generates unique hashes each time you run it, so for two distinct clones histories are completely different.</p>

<p>Is it possible to force git-svn to generate equal hashes for same SVN revisions? Or is there any other workflow scheme allowing to work on the same code base in Git and SVN simultaneously?</p>
","0","1746434",""
"5170741","114798","2011-03-02 16:57:10","0","183","<git><git-svn><git-branch><remote-branch>","How to integrate svn branches into git branches with git-svn?","<p>i have not much svn experience but i am used to work with git.</p>

<p>I have the following svn repository structure and revisions.</p>

<blockquote>
  <p><a href=""https://server/svn/solution/trunk/solution.sln"" rel=""nofollow"">https://server/svn/solution/trunk/solution.sln</a> @r100<br>
  <a href=""https://server/svn/solution/trunk/project1/project1.csproj"" rel=""nofollow"">https://server/svn/solution/trunk/project1/project1.csproj</a> @r150<br>
  <a href=""https://server/svn/solution/trunk/project2/project2.csproj"" rel=""nofollow"">https://server/svn/solution/trunk/project2/project2.csproj</a> @ r160</p>
  
  <p><a href=""https://server/svn/solution/branches/solution.sln"" rel=""nofollow"">https://server/svn/solution/branches/solution.sln</a> @r100<br>
  <a href=""https://server/svn/solution/branches/project1/project1.csproj"" rel=""nofollow"">https://server/svn/solution/branches/project1/project1.csproj</a> @r200<br>
  <a href=""https://server/svn/solution/branches/project2/project2.csproj"" rel=""nofollow"">https://server/svn/solution/branches/project2/project2.csproj</a> @ r350  </p>
</blockquote>

<p>When i clone the repository</p>

<blockquote>
  <p>git svn clone <a href=""https://server/svn/solution"" rel=""nofollow"">https://server/svn/solution</a> --stdlayout</p>
</blockquote>

<p>I get everything</p>

<pre><code>(master)$ git branch -a  
* master  
  remotes/project1  
  remotes/project2  
  remotes/trunk  
</code></pre>

<p>When i want to create a local branch for a remote one</p>

<pre><code>(master)$ git checkout -b local-project1 project1
</code></pre>

<p>all i get when i checkout the branch is project1. The branch does not contain anything from </p>

<blockquote>
  <p><a href=""https://server/svn/solution/branches/solution.sln"" rel=""nofollow"">https://server/svn/solution/branches/solution.sln</a> @r100  </p>
</blockquote>

<p>To solve the problem i tried the following:</p>

<pre><code>(local-project1)$ git checkout master
Switched to branch 'master'.
(master)$ git branch local-project1 -D
Deleted branch local-project1 (was 1111a11).
(master)$ git checkout -b local-project1
Switched to new branch 'local-project1'.
(local-project1)$ pwd
/c/workingcopies/solution
(local-project1)$ cd project1
(local-project1)$ pwd
/c/workingcopies/solution/project1
(local-project1)$ git branch --set-upstream local-project1 remotes/project1
Branch local-project1 set up to track local ref refs/remotes/project1.
(local-project1)$ git svn fetch
(local-project1)$ git reset --hard ae8e9b1a ;# go to last commit of the remote branch
</code></pre>

<p>The fetch gets the last revision from the branch in the repository and the HEAD is set to the last commit but i still only get project1 in the branch, not the solution. Any advice and help is appreciated.</p>
","0","114798",""
"5368819","11236","2011-03-20 13:37:45","6","616","<svn><git><git-svn>","Is there a way to ""persistently"" synchronize a git repository with SVN?","<p>From what I could find around the web, it seems that using <code>git svn</code> is not ""persisted"". </p>

<p>Meaning, if I <code>git svn clone</code> a repository, then push to master and repull a fresh copy in a separate folder, the fresh copy is not aware of svn at all, and cannot be used to synchronize with SVN without reapplication of <code>svn clone</code>.</p>

<p>Is there a way around this issue?</p>
","1","11236","0"
"5390191","663957","2011-03-22 11:05:17","5","1628","<svn><git><git-svn><git-branch>","git-svn and local branches","<p>I usually using git for versioning, but right now I am stuck with sources in a svn repository, so I am using git-svn to access that repository. However this seems to lead to some trouble, when I try to use local branches.</p>

<p>I usually only commit my local repositories about once a day, so I might have commits in my local master, that I have not yet send upstream. When I create a branch at this point, and then someone else commits to the upstream repository, all commits between the current one and the last one that was synced upstream get duplicated.</p>

<p>To make this clearer here a short picture:</p>

<pre><code>A-B-C-D-E  
     \  
      \-F
</code></pre>

<p>The upstream repository is at A and the two branches are at E and F respectively. Doing a git svn rebase leads to:</p>

<pre><code>A-G-H-B-C-D-E
 \
  \-B-C-F
</code></pre>

<p>Where G and H are the commits that were taken from the upstream repo. I already tried to get the two commits to the other branch as well by switching there and doing another git svn rebase. But this leaves me there:</p>

<pre><code>A-G-H-B-C-D-E
 \
  \-G-H-B-C-F
</code></pre>

<p>So this leads to even more duplication of commits. Is there a clean way to handle this situation?</p>
","0","663957","0"
"5391573","114798","2011-03-22 12:55:30","3","1301","<git><branch><git-svn>","Why did git svn remote tracking stopped working?","<p>I have the following setup</p>

<p>svn repository</p>

<pre><code>application
 |
 |-branches
 |  |
 |  |-develop-svn
 |
 |-trunk
</code></pre>

<p>local git repository</p>

<pre><code>master
 |
 |-develop
</code></pre>

<p>master tracks remotes/trunk</p>

<p>develop tracks remotes/develop-svn</p>

<p>For some reason develop stopped tracking develop-svn.</p>

<p>When i checkout develop from master i get the following message.</p>

<pre><code>$ (master) git checkout develop
Switched to branch develop
Your branch is ahead of 'develop-svn' by 59 commits.
</code></pre>

<p>When i try to commit to the svn repository, it tries to update the remote trunk.</p>

<pre><code>$ (develop) git svn dcommit -n
Committing to https://servername/svn/application/trunk ...
...
</code></pre>

<p>It used to commit to <a href=""https://servername/svn/application/branches/develop-svn"" rel=""nofollow"">https://servername/svn/application/branches/develop-svn</a></p>

<p>I already tried this command, which did not help:</p>

<pre><code>$ (master) git branch --set-upstream develop develop-svn
Branch develop set up to track local refs/remotes/develop-svn.
$ (master) git checkout develop
Switched to branch develop
Your branch is ahead of 'develop-svn' by 59 commits.
$ (develop) git svn dcommit -n
Committing to https://servername/svn/application/trunk ...
...
</code></pre>

<p>My config looks like this</p>

<pre><code>[svn-remote ""svn""]
  url = https://servername/svn/application
  fetch = trunk:refs/remotes/trunk
  branches = branches/*:refs/remotes/*
  tags = tags/*:refs/remotes/tags/*
</code></pre>
","0","114798","0"
"42646901","1343979","2017-03-07 11:17:29","0","651","<git><svn><version-control><git-svn>","cherry-picking an individual commit using git-svn","<p>Let's assume I have cloned an existing SVN repository using <code>git svn clone</code> and want to push the changes I make to the new (""forked"") upstream Git repository.</p>

<p>At the same time, I want to be able to ""pull"" any changes from the upstream SVN repository and push them to the upstream Git (the repositories may diverge, but conflicts are unlikely).</p>

<ol>
<li>How do I do that w/o creating a patch file for every SVN commit (with <code>svn diff</code>) and applying it to the Git repository?</li>
<li>Is it possible to merge a range of commits from SVN (w/o cherry-picking them one by one) and rebase the resulting branch on top of my Git <code>master</code> <em>in a single step</em>?</li>
</ol>
","1","1343979","0"
"5394335","314745","2011-03-22 16:13:34","4","301","<svn><git><git-svn>","Convert non standard svn to git","<p>We've got a non-standard svn setup which looks like this:</p>

<pre><code>Root
|-----&gt;Trunk
|      |----&gt;Projects
|      |      |---&gt; Project 1
|      |      |---&gt; Project 2
|      |      |---&gt; Project 3
|      |----&gt;Libraries
|      |      |---&gt; Library 1
|      |      |---&gt; Library 2
|-----&gt;Tags
|      |----&gt;Projects
|      |      |---&gt; Project 1
|      |      |      |----&gt; 1.0.0.0
|      |      |      |----&gt; 1.0.0.1
|      |      |---&gt; Project 2
|      |      |      |----&gt; 1.0.0.2
|      |      |      |----&gt; 1.0.0.3
|      |----&gt;Libraries
|      |      |---&gt; Library 1
|      |      |       |----&gt; 1.0.0.0
|      |      |       |----&gt; 1.0.0.1
|      |      |---&gt; Library 2
|      |      |       |----&gt; 1.0.0.0
|      |      |       |----&gt; 1.0.0.1
</code></pre>

<p>I've already done a git-svn clone, but of course none of the tags work (we have no branches in svn).
Is there anyway to untangle this mess into multiple git repos?</p>
","0","314745","0"
"5412599","2192","2011-03-23 22:44:24","16","2837","<git><git-svn>","git is stating a branch is not merged after rebasing - why?","<p>I'm using git-svn to manage my bugfix branches, but it tells me that I have unmerged changes, even though if I review the SVN repo directly, I can see they have been committed too. It's like the rebase of the bug fix is not setting the branch as merged.</p>

<p>What am I doing wrong, here?</p>

<pre><code>git checkout -b fix_bug_1234

git add .
git commit -m ""first change""
git add .
git commit -m ""second change""

git rebase -i HEAD~2 // squash the two changes together

git svn rebase // fetch any changes from svn

git checkout master
git rebase fix_bug_1234
git svn dcommit

git branch -d fix_bug_1234
error: The branch 'fix_bug_1234' is not fully merged.
</code></pre>
","0","2192","0"
"5673297","185398","2011-04-15 06:52:39","2","252","<git><git-svn>","Retaining topic branch commits with git-svn dcommit","<p>I started using git-svn recently. My git work flow is like this.<br>
git checkout master<br>
git svn rebase<br>
git checkout -b topicbranch<br>
..changes<br>
git commit<br>
git checkout master<br>
git merge topicbranch<br>
git svn rebase<br>
git dcommit  </p>

<p>Problem is that, whenever I do dcommit the only final merge commit of topic branch is seen in svn repository. I want to see the svn commits corresponds to individual git commits made in topic branch.</p>

<p>Is their any way to do it. Or this is the recommended default behavior.</p>
","1","185398","0"
"24074208","441652","2014-06-06 04:33:41","9","1356","<git><git-svn>","git svn fetch: Could not unmemoize function `check_cherry_pick', because it was not memoized to begin with","<p>I'm hitting the following error while running <code>git svn fetch</code>:</p>

<pre><code>Complex regular subexpression recursion limit (32766) exceeded at /usr/share/perl5/vendor_perl/YAML/Loader.pm line 517, &lt;$IN&gt; line 1.
YAML Error: Can't parse double quoted string
   Code: YAML_PARSE_ERR_BAD_DOUBLE
   Line: 2
   Document: 1
 at /usr/share/perl5/vendor_perl/YAML/Loader.pm line 523.

Could not unmemoize function `check_cherry_pick', because it was not memoized to begin with at /usr/share/perl5/vendor_perl/Git/SVN.pm line 1639.
END failed--call queue aborted at /usr/libexec/git-core/git-svn line 49.
</code></pre>

<p>Previously <a href=""http://spectlog.com/content/Index_mismatch_error_git-svn"" rel=""noreferrer"">something similar happened</a> and solution was <code>git svn reset -r N</code> which is not applicable in this case.</p>
","0","441652","0"
"5682760","377303","2011-04-15 22:00:38","0","489","<git><git-svn>","git push to bare repository then pull dont work","<p>I have hosting that give me ssh access. </p>

<p>I created bare repository. Where I push before leaving work. But when I pull changes from there it is not working.</p>

<pre><code>nerkn@nerkn-laptop ~/www/project $ git push
Everything up-to-date
</code></pre>

<p>config is:</p>

<pre><code>nerkn@nerkn-laptop ~/www/project $ git config -l
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=ssh://user@domain.com/~/project.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
</code></pre>

<p>Then home computer:</p>

<pre><code>nerkn@nerkn-desktop /var/www/project $ git pull
Already up-to-date.


nerkn@nerkn-desktop /var/www/project $ git config -l
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
remote.origin.url=ssh://usre@domain.com/~/project.git
branch.master.remote=origin
branch.master.merge=refs/heads/master
gui.wmstate=normal
gui.geometry=962x330+284+384 207 192
</code></pre>

<p>If every thing is uptodate and already upto date then why are they different? How I can use this setup. Should I open both of them to sync, without help of my hosting ssh access?</p>
","2","377303",""
"61401179","5762496","2020-04-24 04:29:28","0","224","<git><svn><git-svn>","git svn clone stops with the error : Index mismatch","<p>While running the command git svn clone, I get the below error and migration stops :</p>

<pre><code>Index mismatch: 168586039d6b675e5ba51706ea759f8ee701a538 != 45485a0f950096c26425196ab7e7fd54c042d4cc
rereading 284599fe3bd0720c7c516191d67031d855d6a3c6
Svndiff data contains backward-sliding source view: Svndiff has backwards-sliding source views at C:/Program Files/Git/mingw64/share/perl5/Git/SVN/Ra.pm line 312.
</code></pre>

<p>I tried to find the solution almost everywhere. But no luck. 
Anyone else has faced this problem?</p>
","2","5762496",""
"5712088","714595","2011-04-19 05:41:46","0","483","<svn><git><git-svn>","How to get a new data in an existing repository of git and commit to svn?","<p>I am using git-svn to get a data in svn repo from git. I successfully did import data from git to svn with submodules (I converted submodules as sub-tree of git) using some around work, and it worked fine.</p>

<p>But now I am getting stuck. If I want get a git pull a update data of existing repos of git, it gives me all updated data on my local branch, but I am not able to dcommit to svn using git svn dcommit command it gives me error message as follows:</p>

<pre><code>Unable to determine upstream SVN information from HEAD history 
Perhaps the repository is empty. at /usr/libexec/git-core/git-svn line 521. 
</code></pre>

<p>Any instructions on how to do this would be very much appreciated!</p>
","0","714595",""
"5733581","9947","2011-04-20 16:28:21","6","627","<svn><git><git-svn>","What are the advantages of using git-svn over the normal svn client?","<p>I've seen a number of posts recently suggesting that if you have to do team development with an SVN repository, git is a better client than svn:</p>

<ul>
<li><a href=""http://www.objectpartners.com/2011/03/17/a-successful-git-svn-workflow/"" rel=""noreferrer"" title=""A successful workflow with git"">a successful workflow with git</a></li>
<li><a href=""http://maymay.net/blog/2009/02/24/how-to-use-git-svn-as-the-only-subversion-client-youll-need/"" rel=""noreferrer"">how to use git-svn as the only subversion client you'll ever need</a></li>
</ul>

<p>These articles seem to focus on the how, and skimp on the why. <strong>Help me convince myself, boss, and peers that there's advantages to using git-svn over the official svn client!</strong></p>

<p>Note: The relative merits of git and svn are well addressed. I'm more concerned in this question with which client to use on a stipulated SVN repository.</p>
","0","9947","0"
"5746566","22383","2011-04-21 15:52:14","2","419","<git><git-svn>","Why is git-svn trying to use an old branch point?","<p>I'm trying to rely more heavily on git-svn for all my tasks, rather than just use git locally and then svn to handle server branches and tags.  </p>

<p>I did a brand new clone of my svn repository.  I had to start from a fairly recent (300 revisions or so back) revision to prevent it taking days to clone.  git svn fetch and git svn dcommit are all working fine.</p>

<p>I'm trying to tag with our latest build number, 3.6.1.  So to do a dry-run I issue:</p>

<pre><code>$ git svn tag -n -m ""3.6.1 build"" 3.6.1
Copying https://svnserver:8443/svn/TheProject/trunk at r5735 to https://svnserver:8443/svn/TheProject/tags/3.6.1...
branch_from: /tags =&gt; /tags/3.3.5
Found possible branch point: https://svnserver:8443/svn/TheProject/tags/3.3.5 =&gt; https://svnserver:8443/svn/TheProject/tags/3.3.5, 5726
Initializing parent: refs/remotes/tags/3.3.5@5726
Found possible branch point: https://svnserver:8443/svn/TheProject/trunk =&gt; https://svnserver:8443/svn/TheProject/tags/3.3.5, 2309
...I cancel as it starts listing all the files it'll add to svn...
</code></pre>

<p>I don't really get what's happening here.  Why is it going back so far to determine a branch point?  Is there something wrong?</p>
","0","22383",""
"5961848","201498","2011-05-11 09:13:13","3","233","<git><git-svn>","git-svn creates a lot of branches appended with @rev","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/11356901/git-svn-clone-spurious-branches"">git-svn clone | spurious branches</a>  </p>
</blockquote>



<p>I converted an SVN repo to git with git-svn.</p>

<p>Everything seems to be fine, but there a lot of branches named <code>branch-name@rev</code> (i.e. <code>remotes/release-1.0@10920</code>), which are not in SVN.</p>

<p>Does anybody know where they come from?</p>
","3","201498","0"
"5965486","558180","2011-05-11 14:01:15","3","2505","<git><git-svn>","git svn clone > git svn rebase > Unable to determine upstream SVN information from working tree history","<p>I am trying to keep a read-only checkout of ,http://googleappengine.googlecode.com/svn/trunk/python into a git repository, which is stored as remote in github.</p>

<p>1) $git svn clone <a href=""http://googleappengine.googlecode.com/svn/trunk/python"" rel=""nofollow"">http://googleappengine.googlecode.com/svn/trunk/python</a>.</p>

<p>2) $git svn rebase</p>

<p>-- Unable to determine upstream SVN information from working tree history</p>

<p>So I started reviewing the .git/config file to fix this problem, and this where I am at:</p>

<p>[svn-remote ""svn""]<br>
   fetch = :refs/remotes/git-svn<br />
   url = <a href=""http://googleappengine.googlecode.com/svn/trunk/python"" rel=""nofollow"">http://googleappengine.googlecode.com/svn/trunk/python</a></p>

<p>[remote ""origin""]<br>
   fetch = +refs/heads/<em>:refs/remotes/origin/</em><br>
   url = git@github.com:...PRIVATE_URL...<br></p>

<p>[branch ""master""]<br>
   remote = origin<br>
   merge = refs/heads/master</p>

<p>My only need is to fetch and merge last commit, and then push the changes to github.
I've been looking for solutions and none seem to work for me so far, any pointers would be helpful.</p>

<p>Thanks in advance :)</p>
","3","558180","0"
"5975667","12149","2011-05-12 09:01:11","27","9637","<git><svn><git-svn>","How to switch svn repositories using git-svn?","<p>I have a number of git projects created as clones of SVN repositories using git-svn. We have migrated our SVN repositories to a new provider so the URL has now changed. How can I update the remote SVN URL of my git clone? </p>

<p>One possibility is that I re-clone from the new SVN repository but I'd prefer not to do that as the process can take days when pulling in the entire history.</p>

<p>Another way to put this question would be, where does git store information about the location of the remote SVN repository you're working with? I.e. where does the URL information come from when you type 'git svn info'?</p>
","3","12149","0"
"24563787","1658999","2014-07-03 21:48:43","1","886","<git><git-svn><bitbucket-server><subgit>","subgit user mapping from git to svn uses wrong usernames","<p>I am using subgit as svn mirror for our team. user mapping works correctly for all commits done to svn repo (Shows up as same ""Author"" on git repo), but commits done to git repo show up as different ""Author"" in svn logs.</p>

<p>I followed the instructions and enabled following properties in my config file:</p>

<pre><code>[core]
    shared = true
    authorsFile = subgit/authors.txt
[auth ""default""]
   passwords = subgit/passwd
</code></pre>
","0","1658999","0"
"6237782","288190","2011-06-04 15:58:16","3","659","<git><git-svn><svnignore>","git aware but (remote) svn ignore","<p>I have a publicly hosted svn repository on google code, however locally I switched to git because of various reasons. I'm currently the only developer with access to the googlecode repo so no need to do fetches. All commits go via a dev branch, to the master branch to svn, with <code>git svn dcommit</code>. All well. Now i'm in the situation that I've some files locally in version control with git, but I do not EVER want them to make public available.</p>

<p>So I had an idea: I create a directory private and add a svn:ignore ""private/*"" property to my svn repo. But than after</p>

<pre><code>git svn dcommmit
</code></pre>

<p>I get an error: Merge conflict during commit: File or directory '.' is out of date; try updating: resource out of date; try updating at /usr/local/git/libexec/git-core/git-svn line 574</p>

<p>I tried importing the svn:ignore property into .git/info/exclude but that excludes all my git files in the 'private' from git which is definitely not what I want. </p>

<p>[08-06-2011]</p>

<p>I think the error is not because of the svn:ignore, it seems that git svn completely ignore the svn:ignore, but due to some other yet unknown reason. The question becomes: is it possible to exclude paths from <code>git svn dcommit</code> in the same way as it is possible to exclude paths from <code>git svn fetch</code> with --ignore-path</p>
","4","288190",""
"6268907","417501","2011-06-07 17:01:22","4","923","<svn><git><git-svn>","Strange error while trying to clone a SVN repo via git","<p>I tried to clone the repository of the Linux Libertine project. It is a SVN repo, but I wanted to use git as my personal backend. Now, I got a strange error message:</p>

<pre><code>$ git svn clone -s  http://linuxlibertine.svn.sourceforge.net/svnroot
Initialized empty Git repository in /home/robert/svnroot/.git/
Repository has been moved: Repository moved temporarily to 'http://linuxlibertine.svn.sourceforge.net/svnroot'; please relocate at /usr/lib/git-core/git-svn line 1923
</code></pre>

<p>Can anybody help me?</p>
","1","417501","0"
"6275998","110963","2011-06-08 08:18:49","5","1878","<svn><git><git-svn>","Using git with svn","<p>I have to use svn as source code management tool, but I want to use git branches locally. I wonder if it works without problems and what's the best approach. I read about 'git svn', but it looks like I would have to sync the whole svn repositoy to use it. That's not an option. Assuming I'm the only developer (not git push/pull between developers) and want to use git only 'locally'. What's the best approach? Just 'git init' on my local checked out project? And to use both tools in the same folder? Are there better approaches? </p>
","2","110963",""
"5310849","167166","2011-03-15 11:11:59","4","522","<git><git-svn><rsync>","how to synchronize git-svn repositories","<p>I've been using git-svn for the past three weeks.</p>

<p><strong>Currently my work flow is like this.</strong></p>

<ol>
<li>ssh into my development box,</li>
<li>create/edit/delete files there(git svn rebase, git checkout -b topic branch)</li>
<li>check whether the web app is working fine.</li>
<li>commit to svn.(git rebase master, git checkout master, git merge topic branch, git svn dcommit)</li>
</ol>

<p><strong>Problems</strong></p>

<ol>
<li>this workflow is very easy for quick edits on the dev box(ssh). But as the remote editing becomes slow overtime, it becomes difficult.</li>
<li>Note: I can't setup the exact copy of my web application in my local machine(since it pulls data from various sources, and lot of other configurations)</li>
</ol>

<p><strong><em>What I want is to edit files locally , move the files to the server, test, commit.</em></strong></p>

<p>What could be a good workflow for this?</p>

<p><strong>My previous attempts include,</strong></p>

<ol>
<li>edit files locally, scp files, test, dcommit </li>
<li>edit files locally, rsync with dev box, test, dcommit</li>
<li>edit files locally, git push to dev box, test, dcommit  (git pull from local box to dev box   is not possible because local box is behind a router)</li>
</ol>

<p>I haven't tried the last step, since the git-svn mentions it is dangerous to push/pull/merge from another git repo if you are using git-svn.</p>

<p>Can you please suggest some efficient workflow with sample commands?</p>

<p>Thanks</p>
","0","167166",""
"23412383","1362","2014-05-01 16:51:17","1","380","<git><git-svn><gitlab>","how to ensure svn branches are pushed to gitlab origin","<p>Our main repo is stored in svn and I'm using git-svn to create a local git clone of it. I've created a gitlab repo that I want to push to, for use as a mirror or a starting point for others to clone from.</p>

<p>I have 900+ branches in the svn repo and they all show-up in my git clone if I do <code>git branch -av</code>. When I push to the gitlab repo, however, none of the branches are shown there. Is there some way to get all of my svn branches to show-up at the origin without explicitly checking out/tracking each of the branches in my local svn clone? At this point, I'm not sure if it's an issue of changing the way I push or of changing the way I init/clone from svn.</p>
","0","1362",""
"5315632","428735","2011-03-15 17:31:45","4","579","<svn><git><git-svn>","git-svn upstream status check","<p>in a git-svn repo,</p>

<pre><code>git status
</code></pre>

<p>doesn't show the usual</p>

<pre><code># On branch master
# Your branch is behind 'origin/git-svn' by 1 commits.
#
nothing to commit (working directory clean)
</code></pre>

<p>is there a way to configure the upstream differently so that the status will reflect the remote?</p>

<p>currently, i just consistently run</p>

<pre><code>git svn rebase
</code></pre>

<p>to check for changes, but it would be nice to know if I have to rebase or not in advance.</p>
","0","428735",""
"5319538","329781","2011-03-16 00:08:49","7","2254","<svn><git><git-svn>","Use git svn to roll back some changes on the svn server?","<p>If I use <code>git svn dcommit</code> to commit a change, and then make a few changes and call <code>git svn dcommit</code> again, what is the simplest way to roll back the changes to the first version. If I were working only locally, then <code>git reset --hard HEAD^</code> would be fine, but I need this to work on the svn server.</p>
","0","329781","0"
"5318976","18091","2011-03-15 22:44:16","1","463","<git><git-svn>","git-svn: Keep single merge commit after svn rebase","<p>I am following this pattern to check in my code in feature-branch to Subversion with git-svn:</p>

<pre>git checkout master
git svn rebase
git checkout feature-branch
git rebase master
git checkout master
git merge --no-ff feature-branch
git commit --amend
git svn dcommit</pre>

<p>(master is my remote Subversion tracking branch)</p>

<p>This creates a single merge commit on master (regardless of how many git commits I have done on feature-branch) which I can check into Subversion.</p>

<p>However, someone checks code into Subversion after I merge feature-branch into master, when I execute the command <code>git svn rebase</code> the new changes are applied and each individual commit from feature-branch is applied on top.  At this point I no longer have a single merge commit but every commit that I performed on feature-branch in master.</p>

<p>What is the best way to deal with this?</p>
","1","18091","0"
"42716182","7000031","2017-03-10 10:33:24","6","987","<git><git-svn><git-submodules><svn-externals>","Migrate from svn to git keeping svn-externals","<p>I am migrating from an svn repository to git.
This svn repository has svn-externals, to be kept on svn repositories. These external are versioned and tagged in the history, and are read only.
How I can properly migrate and have the svn-externals in the new git repository properly set?</p>

<p>I am looking in ""git svn propset"", git submodules, subtree merges. But How I can set up such a repository?  </p>
","2","7000031","0"
"5508583","636917","2011-04-01 02:32:54","14","6032","<svn><git><git-svn>","Can I git-svn clone an svn repo with multiple standard directory layouts","<p>I have an SVN repo with a layout like<br>
project1/trunk<br>
project1/branches<br>
project1/tags<br>
project2/trunk<br>
project2/branches<br>
project2/tags<br>
etc.</p>

<p>For a number of reasons, I'd like a git-svn repo that allows me to work on any of these projects and fetch/dcommit from/to all of them at once. Is this kind of thing possible? I know I could just git-svn clone the whole thing without specifying branches, tags, and trunk, but then I'd lose a lot of the advantage of using git.</p>
","0","636917","0"
"5515030","4110","2011-04-01 14:51:23","3","340","<svn><git><git-svn>","How to set up a heterogeneous multiuser git/svn environment","<p>I work for a team which uses Subversion as the main VCS but almost everyone has started using git locally via git-svn. Now we are considering switching fully to git. </p>

<p>As an intermediate step, it would be nice to use both of them simultaneously for a while. The problem is not so much the users who are mostly glad to switch to git, it's the continuous integration/build infrastructure we've built around Subversion. Management of course isn't thrilled about any downtime a big bang change would cause, we release new features every two weeks and bug fixes and other minor stuff almost daily. Ideally running these systems in parallel would make the final switch a non-issue. </p>

<p>The problem seems to be that there can be no shared git repository which originates from the Subversion repository. Each parallel git svn merge/rebase creates new git commits which are duplicates. By parallel I mean two developers doing a merge or rebase in their own clones of the same git repository. Even worse, the git svn dcommits seem to change the git commit's ids. </p>

<p>So is this kind of environment even possible, or is git-svn really only meant to be a single-user tool? </p>
","0","4110","0"
"60869682","3911422","2020-03-26 14:36:02","14","9422","<git><git-svn>","git: svn is not a git command - Mac","<p>I had no issues yesterday but today I cannot run <code>git svn</code> anymore. It says:</p>

<pre><code>git: 'svn' is not a git command. See 'git --help'.

The most similar commands are
    fsck
    mv
    show
</code></pre>

<p>I don't know if it's relevant but since yesterday I updated <code>npm</code>(6.14.4) and <code>node</code> (v12.6.0).</p>

<p>I'm on macOs Catalina</p>
","3","3911422","0"
"5532449","325418","2011-04-03 20:54:53","3","1591","<git><git-svn><visualsvn-server>","Is using VisualSVN server + Git clients (using git svn) a good solution for hosting repositories?","<p>Because I had VisualSVN already set up on Windows 7 as SVN server, and Git can support Git SVN, so will using these two be a good solution</p>

<p>1) for now<br>
2) for the long term?</p>

<p>(that is, as opposed to setting up a Git repo with a machine running ssh daemon, which is non-standard on a PC)</p>
","2","325418",""
"23617308","2543290","2014-05-12 19:30:00","1","376","<git><github><git-svn>","Add only top level folder with git sparsecheckout","<p>I'm versioning only a repo folder with git sparsecheckout. I followed the instructions on <a href=""http://jasonkarns.com/blog/subdirectory-checkouts-with-git-sparse-checkout/"" rel=""nofollow"">this</a> blog. I already had the repo, so what I did was:</p>

<pre><code>git config core.sparsecheckout true

echo api/ &gt;&gt; .git/info/sparse-checkout

git read-tree -mu HEAD
</code></pre>

<p>It worked, but it also added other <code>api</code> folders inside the project, but I only want to add the top level <code>api</code> folder, not all <code>api</code>folders in the project.</p>

<p>Any idea how to make this work?</p>
","3","2543290","0"
"5549385","140176","2011-04-05 08:50:59","3","1764","<visual-studio-2010><svn><git><git-svn><line-endings>","Inconsistent line endings using git-svn with commits from both VCS","<p>I have a remote SVN repository and a local git repository. Using git-svn I have linked git to SVN and am successfully using <code>git svn rebase</code>, <code>git svn dcommit</code> to pull and push to the remote SVN repository. </p>

<p>However, when other people check out my previously-git-edited files with <code>SVN</code> and try to open them in VS2010, they receive a dialog telling them the line endings are inconsistent. </p>

<p>I've read a few things about the <strong><code>core.safecrlf</code></strong> option in git config, but would that fix my issue? I have a number of other people checking in, but we're all running windows - I figured the line endings would be the same?</p>

<p>Would setting <code>core.safecrlf</code> preserve the same type of line ends on checkout and on commit? </p>
","1","140176",""
"5551200","15497","2011-04-05 11:39:31","2","1799","<git><git-svn>","""git svn clone"" chokes on moved directories?","<p>I've been trying to use <strong>git svn clone</strong> in order to use Git with SVN. I am running the clone command on the whole SVN repository and I chose to disable tracking the standard trunk/tags/branches layout.</p>

<p>However, the process of initial ""git svn clone"" operation always stops at the same revision (28) every time I run it:</p>

<p><em>Connection reset by peer: Can't read from connection: Connection reset by peer at C:\Program Files\Git/libexec/git-core/git-svn line 5131</em></p>

<p>The SVN log indicates that there were some <strong>directories moved to another location</strong> within the SVN repository in the previous revision (27).</p>

<p>I attempted to get on with the process by running ""git svn fetch"" afterwards but that fails as well. I am doing something wrong or is it a limitation of ""git svn"" command that it cannot handle moved directories?</p>

<p>I am on Windows, using the latest Git-1.7.4-preview20110204</p>
","0","15497","0"
"5634099","55562","2011-04-12 10:58:01","12","1177","<svn><git><version-control><git-svn>","Overcome git svn caveats","<p>I am reading the <a href=""http://git-scm.com/docs/git-svn#_caveats"" rel=""nofollow noreferrer"">CAVEATS of git-svn</a>. via <a href=""https://stackoverflow.com/questions/5294516/good-practice-to-use-git-together-with-svn/5294929#5294929"">this SO question</a>.</p>

<p>What I understand is that:</p>

<p>If you are mirroring svn trunk, branches etc on git repo, don't merge or rebase anything locally on those branches. Specifically <code>master</code> points to the <code>trunk</code>.</p>

<p>My point is that, this would make <code>git-svn</code> crippled. What's the point of git, if I can't branch from master and then merge that changed branch back into the master? Perhaps I am missing some caveat in the caveat that says it is ok to merge certain branches that have the same parent without any rebases.</p>

<p>Can anyone point to me exactly what needs to be avoided and what is allowed. I'd want the local branches, if necessary, those need to be mirrored and merged and most importantly git should do the merges than the svn.</p>

<p>If I am using git branches to mirror svn branches and I cannot merge git branches, whats really the point of git-svn anyway?</p>
","0","55562","0"
"5635227","703982","2011-04-12 12:33:24","10","605","<windows><git><cygwin><git-svn>","mysterious git behaviour","<p>I have since fixed this problem. But I still don't know why what I did worked.</p>

<p>We have an svn repository for our code at work. I have a local git-svn repository because I &lt;3 Git. :) We use Windows, so I use Cygwin. I think the latest version in Cygwin is Git 1.7.0.4. On Friday, I dcommitted my code without a problem, went home. Monday morning I came back, and tried to 'git svn rebase' because someone had committed code over the weekend (overachievers).</p>

<p>It began normally, and then suddenly decided it couldn't find the trunk. Unfortunately, I lost the exact error message, but it was yelling about not being about to find /refs/remotes/trunk ...and I was very scared. Luckily, though, I had no uncommitted code. Nothing to lose. Nevertheless, every time I tried to 'git svn rebase' after that, it would hang forEVER, and then I would get the following error:</p>

<blockquote>
  <p>Unable to determine upstream SVN information from working tree history</p>
</blockquote>

<p>I researched it for a whole day. I tried changing the svn-remote url from <a href=""https://xxx.xxx.xxx/xxx/xxx"" rel=""nofollow noreferrer"">https://xxx.xxx.xxx/xxx/xxx</a> to <a href=""https://xxx.xxx.xxx/xxx/xxx"" rel=""nofollow noreferrer"">https://xxx.xxx.xxx/xxx/xxx</a><strong>/</strong> as ridiculous as that seems. I then did a 'git svn fetch' ... and it re-fetched the whole trunk (all 1682 commits). But the rebase still wouldn't work. So I gave up for the day, and decided that the next day I would just create a new repository and start over (which would take a whole day). This morning, I went to ask the question on here before I went unabashedly deleting my repository. I came across this:</p>

<p><a href=""https://stackoverflow.com/questions/1789887/git-svn-rebase-gone-horribly-wrong"">git-svn rebase gone horribly wrong</a></p>

<p>which wasn't <em>exactly</em> my problem, but I decided to try 'git reset --hard trunk' because that's what I wanted. And it worked. Everything is fine now.</p>

<p>However.</p>

<p>Why did it do that in the first place? I didn't <em>change</em> anything as far as I know, as I was not at work over the weekend. What kind of things would have caused that error? I assume I absent-mindedly did something awful, but I need to know what so I don't do it again. :)</p>

<p>Thanks in advance.</p>
","0","703982","0"
"23963232","776839","2014-05-30 20:49:01","1","477","<git><svn><migration><git-svn>","SVN-to-git: How can I preserve history for files moved in SVN repo when migrating to git?","<p>I have a situation similar to the following:</p>

<ul>
<li>SVN Revision 1
<ul>
<li>FolderA/FileA.ext</li>
</ul></li>
</ul>

<p>('svn move' used to move folder underneath a new folder)</p>

<ul>
<li>SVN Revision 2
<ul>
<li>NewParent/FolderA/FileA.ext</li>
</ul></li>
</ul>

<p>Using SVN, I can verify the history is present for both revisions.</p>

<p>When I use 'git svn clone', the target folder contains both FolderA/FileA.ext and NewParent/FolderA/FileA.ext, and there is no history link between them.</p>

<p>How can I preserve the history link and only end up with the newer folder structure? I only need to migrate once (no link to SVN repo is needed).</p>
","1","776839","0"
"5652521","702867","2011-04-13 16:31:08","7","2696","<svn><git><git-svn>","Does git-svn handle moved files","<p>Git doesn't explicitely track copied or moved files, but detect them for example with <code>git log --follow</code>. When using Git on an SVN Repo and pushing my changes with <code>git svn dcommit</code>, will SVN recognize those as copied files?</p>
","0","702867",""
"5829932","144302","2011-04-29 08:45:09","2","795","<svn><git><git-svn>","Syncing existing git with existing SVN repository","<p>Okay, I made a mess. I have a SVN repository with my code and I have a local git repository in which I usually work, branch, etc.. I used to commit things from time to time from git into SVN using git-svn. Now I got a new computer and cloned my git repository from one to the other. I tried to use git-svn afterwards, but due to a new version and me being not careful enough the configuration was somehow lost. So I used <code>git svn init</code> and <code>clone</code> to get back my history in SVN, but now the situation looks like this: </p>

<pre><code>o--Z--o--....--X--o--o....--o  (master)
   |
   o--o--o--....--X (remotes/git-svn)
</code></pre>

<p><code>X</code> is marking a state in which both repositories are in the same state (as master and git-svn where in sync on my old machine). Now, I'd like to commit everything from X to HEAD from <code>master</code> into my SVN repository, but when I use <code>git svn dcommit -n</code> it shows diffs way back to Z. How can I sync git-svn and git and svn again (so that I can use simply <code>dcommit</code> to commit stuff again)? </p>

<p>Is it possible to go back to <code>X</code> and use <code>git svn set-tree X</code> (because the current SVN holds exactly that version) and than go back to HEAD to do the <code>git svn dcommit</code>? I don't want to (blindly) try stuff on the SVN, as there is a lot of more stuff in it (by many other people) which I don't want to screw up. </p>
","1","144302","0"
"5843350","590083","2011-04-30 17:09:31","3","587","<svn><git><git-svn>","I can init and fetch file with git-svn, but can't clone","<p>I read the manual and it said <code>clone</code> is <code>Runs init and fetch</code>.</p>

<p>But I tried this:</p>

<pre><code>git svn clone -T http://svn.felspar.com/public/m-intercept/trunk/
</code></pre>

<p>then got:</p>

<blockquote>
  <p>fileparse(): need a valid pathname at /usr/lib/git-core/git-svn line 405</p>
</blockquote>

<p>And not any file was downloaded.</p>

<p>But when I used:</p>

<pre><code>git svn init http://svn.felspar.com/public/m-intercept/trunk/
git svn fetch
</code></pre>

<p>All right. It works perfectly. I use the exact same URL.  </p>
","0","590083",""
"5869559","632326","2011-05-03 12:39:06","0","994","<git><git-svn>","Delete a file from a SVN repo managed by git svn","<p>I have an SVN repo managed by git-svn . I can't delete a file and send my commits to SVN server. Here is what I am doing:</p>

<p>git rm myfile.txt
git commit -m ""removed not necessary file""
git svn dcommit 
throws:
Can't open myfile.txt No such file or directory</p>

<p>I had to hard reset HEAD in order to be able to pull from SVN. Anyone else had this problem ? How did you fixed it ?</p>
","2","632326",""
"42953843","4087306","2017-03-22 14:00:47","1","468","<git><svn><git-svn><svn2git>","Is git svn clone still performing work?","<p>I'm running 'git svn clone' on a non-standard repository and it appears stuck somewhere in the process.  It did perform work on locating all of the branches and tags but when getting to a certain revision it has stopped outputting anything and has been utilizing 1 core of my CPU for approx 20 hours now.</p>

<p>The last line output is:</p>

<pre><code>r2007 = f4ccc32aa2c1c504d7baca98a4efe628be3d6485 (refs/remotes/origin/MySVNRepo)
</code></pre>

<p>Is there any way of determining if it is still doing meaningful work or if it's futile to keep waiting?  Or even what might be causing it to be stuck?</p>

<p>I've tried running <code>du -s</code> on the <code>.git</code> folder but it doesn't seem to be changing size.</p>
","2","4087306",""
"61637163","13483355","2020-05-06 14:02:04","12","8711","<macos><perl><git-svn>","git-svn Can't locate SVN/Core.pm after fresh installation of macOS Catalina 10.15.4","<p>Recently I reinstalled <code>macOS Catalina 10.15.4</code>. After I installed <code>Command_Line_Tools_11.4.1</code>, it told me svn is no longer working with Xcode. Then I installed both git and svn by brew, hopefully git-svn would work. Unfortunately got this error message:</p>

<blockquote>
  <p>Can't locate SVN/Core.pm in @INC (you may need to install the SVN::Core module) (@INC contains: /usr/local/Cellar/git/2.26.2/share/perl5 /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi-2level /Library/Developer/CommandLineTools/Library/Perl/5.18/darwin-thread-multi-2level /Library/Perl/5.18/darwin-thread-multi-2level /Library/Perl/5.18 /Network/Library/Perl/5.18/darwin-thread-multi-2level /Network/Library/Perl/5.18 /Library/Perl/Updates/5.18.4 /System/Library/Perl/5.18/darwin-thread-multi-2level /System/Library/Perl/5.18 /System/Library/Perl/Extras/5.18/darwin-thread-multi-2level /System/Library/Perl/Extras/5.18 .) at /usr/local/Cellar/git/2.26.2/share/perl5/Git/SVN/Utils.pm line 6.</p>
</blockquote>

<p>Both git &amp; svn are the latest version.</p>

<p>Please help me out.</p>
","2","13483355","0"
"5886993","665372","2011-05-04 16:52:29","1","568","<git><git-svn>","Can I specify a ""chunk size"" for git svn fetch?","<p>I'm cloning an SVN repo with git and everything seems to be working fine. The very last revision I need to download contains a ~220MB zip file.</p>

<p>I know this isn't an issue for git, however the school's server I'm downloading it from hangs up half way through the file which invalidates the entire index requiring that it re-download the revision again.</p>

<p>Is there a way to tell git-svn fetch to get an index in multiple chunks of a particular chunk-size or to retain the partial index if the server hangs up?</p>

<p>Spec info:<br>
Win7 with Cygwin 1.7.9-1<br>
git &amp; git-svn 1.7.4-1<br></p>
","3","665372","0"
"6155006","185708","2011-05-27 16:15:34","0","2037","<svn><git><git-svn><multiple-projects>","Cannot setup Git with Subversion repository using git svn","<p>I am trying to use Git with Subversion via <em>git svn</em> with a Subversion repository that has multiple projects in it.  The project structure looks like this:</p>

<blockquote>
  <p>Root/</p>
  
  <blockquote>
    <blockquote>
      <p>*Project1/</p>
      
      <blockquote>
        <blockquote>
          <p>trunk/</p>
          
          <p>tags/</p>
          
          <p>SpecificBranchName1/</p>
          
          <p>SpecificBranchName2/</p>
        </blockquote>
      </blockquote>
      
      <p>Project2/</p>
      
      <blockquote>
        <blockquote>
          <p>trunk/</p>
          
          <p>tags/</p>
          
          <p>SpecificBranchName1/</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>

<p>etc.</p>

<p>I'm able to get Project1 into a git repo by doing <code>git svn clone -s <a href=""http://path/to/repo/Root/Project1"" rel=""nofollow"">http://path/to/repo/Root/Project1</a> --no-follow-parent</code>. However the <em>trunk</em>, <em>tags</em>, and <em>SpecificBranchName1</em> and <em>SpecificBranchName2</em> are in my tree structure.</p>

<p>If I remove the <em>--no-follow-parent</em> flag, I get an error message saying, <em>""Couldn't find revmap for <a href=""http://path/to/repo/Root/Project1/SpecificBranchName1"" rel=""nofollow"">http://path/to/repo/Root/Project1/SpecificBranchName1</a>"".</em>  I get the same message if I try: <code>git svn clone -T trunk -t tags -b . <a href=""http://path/to/repo/Root/Project1"" rel=""nofollow"">http://path/to/repo/Root/Project1</a></code></p>

<p>I don't really need the branch in my git repo, so I tried skipping it with: <code>git svn clone -s --ignore-paths=""^SpecificBranchName1"" <a href=""http://path/to/repo/Root/Project1"" rel=""nofollow"">http://path/to/repo/Root/Project1</a></code>, but got the same error.</p>

<p>From what I can tell, this Subversion file structure is odd.  Usually branches are under <em>./branches</em>, but for some reason they are included in the same file path as <em>tags</em> and <em>trunk</em>.  Is there anyway to get past this?</p>
","0","185708","0"
"24507209","495796","2014-07-01 09:47:47","3","243","<git><git-svn>","git svn fetch & rebase broken after connection failure","<p>I lost my network connection during <code>git svn dcommit</code> when it was trying to rebase. I tried to <code>git svn rebase</code> again, but again lost my network connection.</p>

<p>Now, after sorting out my network connection problems, I am left with a situation in which <code>git svn rebase</code> and <code>git svn fetch</code> both do nothing.</p>

<p>I know that the SVN commit did indeed happen because a successful Jenkins build was triggered from SVN. But the SVN version of the commit doesn't show up in <code>git log trunk</code> after doing a <code>git svn fetch</code>!</p>
","0","495796","0"
"24691660","2451238","2014-07-11 06:49:36","0","83","<git><svn><git-svn><git-branch>","dcommit only a certain local (i.e. git) branch with git-svn","<p>I am developing using <code>git</code> but I have to publish via <code>svn</code>.
That's why I've set up <code>git-svn</code> (by <code>git svn clone</code>).</p>

<p>My usual workflow is like this:</p>

<pre class=""lang-sh prettyprint-override""><code>git svn rebase  # get local git repository up-to-date
git add file    # add some code
git commit      # commit code to local git repository
git svn dcommit # push changes from local git repository to public svn repository
</code></pre>

<p>So far this works fine.</p>

<p>However, I would like to create a branch (say <code>secret</code>) in my local <code>git</code> repository that is completely ignored by <code>git-svn</code>.</p>

<p>I guess I have to do something like this:</p>

<pre class=""lang-sh prettyprint-override""><code>git svn rebase      # get local git repository up-to-date
git branch secret   # create secret branch in local git repository
git checkout secret # switch to secret branch in local git repository
git add secret.file # add some secret code
git commit          # commit secret code to secret branch of local git repository
git checkout master # switch back to public branch in local git repository
git svn rebase      # get public branch of local git repository up-to-date
git add public.file # add some public code
git commit          # commit public code to public branch of local git repository
git svn dcommit     # push public changes from local git repository to public svn repository
</code></pre>

<p>Would this workflow keep <code>secret.file</code> completely hidden from <code>svn</code>?
If so, I guess I could just <code>git merge</code> it into <code>master</code> and <code>git svn dcommit</code> it to the <code>svn</code> it once it gets <em>'un-classified'</em>. Is that correct?</p>

<p>Also, would it be possible to rename <code>master</code> to <code>public</code> for clarity?
If so, how? Note that there is already a history for that branch in both repositories.    </p>
","0","2451238",""
"6395065","804387","2011-06-18 09:21:44","0","571","<svn><git><git-svn>","How to convert an svn reposirory with illegal branch names to git using git-svn?","<p>I am trying to load out company svn repo into git using git-svn, but sadly one of my coworkers created a branch with illegal characters (\) in the branch name. Now, when I'm trying to import the whole history, git exits with an error:</p>

<pre><code>fatal: Cannot lock the ref 'refs/remotes/feature-\\-bar'.
update-ref -m r4 refs/remotes/feature-\\-bar 471d9622546803b3712a436c2e2ed6b1490c829a: command returned error: 128
</code></pre>

<p>I could do without the branch since it is way in the past anyway, but I do not want to loose all the history up to the point where the branch was merged. I tried the --ignore-path option, but I cannot get it to work, mainly because I suspect it only addresses paths inside the branch/trunk path (??).
Does anyone know by any chance a way to resolve this issue?</p>
","0","804387",""
"6407480","283561","2011-06-20 06:18:57","0","299","<git-svn>","Commit git-svn changes to SVN repo","<p>we have a central SVN repo in our company. I use git-svn on my laptop to be able to use a repo, when I'm not connected to the company network.
Now I was 3 weeks on a business trip and committed a lot to my local Git repo. There were also many commits to the SVN repo.
When I try ""SVN Rebase"" I have to edit conflicts in each of my Git changesets. What I would like to do is just to commit all of my local changes at once and then edit conflicts only once. </p>

<p>I'm fairly new to Git, so I don't know how this is done properly and if this is the best way. 
I use TortoiseGit on Windows, so up to now I didn't really care about the command line.</p>

<p>Thanks for your help.</p>
","0","283561",""
"6426086","834","2011-06-21 13:32:36","1","431","<svn><git><character-encoding><git-svn>","git-svn dcommit fails on directory with umlauts","<h1>My Setup</h1>

<p>I'm working on Windows XP 32bit (german). I installed</p>

<pre><code>$ git --version
git version 1.7.4.msysgit.0
</code></pre>

<p>and created a git-svn repository where I successfully commited a bunch of files and directories from a previous SCM.</p>

<h1>The Problem</h1>

<p>But on the 2nd <strong>git-svn dcommit</strong> I got this error:</p>

<pre><code>$ git svn dcommit
Committing to http://mysvnserver/repos/myrepo/trunk ...
RA layer request failed: PROPFIND request failed on '/repos/myrepo/trunk/path/with/weird/%DC%20f%FC%20umlauts': \
 PROPFIND of '/repos/myrepo/trunk/path/with/weird/%DC%20f%FC%20umlauts': 207 Multi-Status (http://mysvnserver) at C:\Programme\Git/libexec/git-core/git-svn line 4529
</code></pre>

<p>The directory has <em>german umlauts</em> in its name and I think the problem is a wrong conversion between <strong>msysgit</strong>, <strong>svn</strong> and <strong>windows</strong>. I can not delete the directory directly in the svn repository browser of <strong>TortoiseSVN</strong> nor can I check out the directory on <strong>cygwin</strong> because the directory is missing at all there.</p>

<p>I'm now stuck with a broken directory in SVN and can not <strong>git-svn dcommit</strong> the deletion of the directory because I then get the <strong>RA layer request failed</strong> error.</p>

<h1>My Question</h1>

<p>Any tips? Do I have to clone the whole repository from SVN again?</p>
","0","834",""
"6686120","843584","2011-07-13 21:48:59","0","226","<git><git-svn>","Git. svn dcommit analog for git repos","<p>I want to use next typical workflow:</p>

<ol>
<li>create new branch for feature, and checkout it</li>
<li>do commits in feature branch</li>
<li>checkout master</li>
<li>merge with feature branch.</li>
<li>push changes</li>
</ol>

<p>It is very typical use case.
However, there is one thing that anoying me - I dont want to show my branch commits to public. I just want to push only merge commit, without feature developing history.</p>

<p>One can propose to use git rebase with commits squashing. But in fact, such squashing is just workaround, not a real solution. I want to have all my commits localy, merge graph, for history purposes.</p>

<p>I want to get simmilar that I get with git svn dcommit - only merge commit is pushed onto the remote, but I see localy whole history of development, with feature commits, with two-parents merge node and appropriate merge graph.</p>
","7","843584","0"
"43606970","451492","2017-04-25 09:39:10","0","2702","<git><svn><git-svn>","Error after cloning 50% of a 50k+ commit svn repository to git","<p>When trying to migrate an svn repository with 50k+ commits to git using the following commands:</p>

<pre><code>git init
git svn init https://10.10.10.10:8443/svn/rep --stdlayout
git svn fetch --fetch-all --log-window-size=1000 --authors-file=..\authors-transform.txt
</code></pre>

<p>the following error is reported:</p>

<pre><code>Connection reset by peer: Error running context: Connection reset by peer at /mingw64/share/perl5/site_perl/Git/SVN/Ra.pm line 312.
</code></pre>

<p>I've already tried to fetch again, but the error persists.</p>

<ul>
<li>git: 2.12.12</li>
<li>svn: 1.8.11</li>
<li>os: windows 7 x64</li>
</ul>

<p>Any help would be appreciated.</p>
","4","451492",""
"6699471","190767","2011-07-14 20:23:08","11","3215","<git><svn><git-svn>","git-svn hangs on clone","<p>When attempting to clone n SVN repository, git-svn appears to search through the SVN history (I see <code>r[NNNNN] = [UUID] (refs/remotes/git-svn)</code> and a lot of <code>[A|M|D] &lt;FilePath&gt;/&lt;FileName&gt;</code> output) and then it hangs and never finishes. Any idea what would cause this?</p>
","0","190767",""
"6702806","464997","2011-07-15 04:51:07","4","282","<git><svn><github><git-svn>","how do I export svn repository to git when I don't have svn credential?","<p>I have a full checkout of svn repository in a folder. But I don't have the credentials of the svn repository(hosted in Unfuddle). I want to move this folder to a new git repostitory ( Github) with all its history and changes intact . If possible I would like to keep the commiters .
How do I export my exiting svn folder to Github ?</p>
","0","464997",""
"24993289","1783163","2014-07-28 10:30:23","0","74","<git><svn><version-control><git-svn>","Using git and svn on the same working tree independently","<p>I am in a classical situation: my company system is based on svn, and probably it won't be ever change. But I like git much better because of its extended functionality, stability, flexibility and speed.</p>

<p>Thus I try to use git on my development machine, but I want to make it invisible for the svn-centered software development (partially human-) infrastructure.</p>

<p>Yes, I know there is gitsvn to bridge over the gap between git and svn. But the hard truth is that I am really not satisfied with gitsvn, and the more doc I learn, I am more and more unsatisfied.</p>

<p>Currently I think it were better to me to simply abandon my git project and only use svn.</p>

<p>I have an idea, which makes things a little bit complexer, but at least it will do exactly what I want. My idea were to simply use svn and git on the same working tree independently. I am thinking on this layout:</p>

<pre><code>.git/
    .gitignore (&lt;- of course .svn here)
.svn/
    .svnignore (&lt;- of course .git will be also ignored)
dir1/
dir2/
...
</code></pre>

<p>And I entirely ignored gitsvn. I simply leaved it out from everything. Of course, .git and .svn need to be invisible for both systems.</p>

<p>I think, it were a hard in the sense, that I needed to keep in my brain the state of both VCS-s, but I think, I will use some type of in-house standards to do that. For example, I used mainly git, and used svn only for the commits/updates to the central repository.</p>

<p>I know, eclipse (and most IDE) weren't able to handle a such structure, but I think I could live with that.</p>

<p>Anybody did the same already? What are the experiences?</p>
","0","1783163",""
"6730068","55562","2011-07-18 07:58:43","6","1688","<git><svn><git-svn><branching-and-merging>","Switch the svn branch git dcommits to","<p>I had <code>master</code> <code>dcommit</code> to (and <code>rebase</code> from) the Subversion <code>trunk</code>.</p>

<p>I created an intermediate Subversion branch <code>tc</code>, to merge changes from 2 different branches, using:</p>

<pre><code>git branch master
git svn branch tc -m ""Branch for merging""
git checkout -b tcl --track tc
git merge cat #Another branch, whose changes I merged here
git commit -m 'Merged changes from cat branch'
git svn dcommit
</code></pre>

<p>Since everything was fine, I wanted to promote this to the <code>trunk</code>. I followed doing:</p>

<pre><code>git branch master
git merge tcl
git svn dcommit
</code></pre>

<p>Now, because <code>master</code> was merged from another branch that was pointing to a different Subversion branch, it tries to commit to the Subversion branch <code>tc</code>. I want it committed to the Subversion <code>trunk</code>.</p>

<p>Is there a <code>git svn switch</code> or something like that?</p>

<p>I know my workflow is not the optimal and any suggestions to improve it are welcome too.</p>
","1","55562","0"
"6967379","202538","2011-08-06 14:13:03","0","33","<git-svn>","Working around unneeded subdirs with git-svn in order to save space","<p>I've started using git-svn for an SVN-based project, so that I can make local commits.</p>

<p>However, the SVN repository contains a lot of directories that I don't need to work with. When I solely used SVN, I was able to partly check-out stuff with:</p>

<pre><code>svn co &lt;repos-url&gt; --depth empty 
</code></pre>

<p>and then update the needed directories:</p>

<pre><code>svn up &lt;repos-dir&gt;/&lt;subdir&gt;
</code></pre>

<p>As far as I've understood, partly checking out a project isn't an option with Git, so I'm looking for alternative way of saving some space. Any suggestions?</p>

<p>Edit: what I am thinking myself is something in the lines of creating a branch thatonly contains the files I need. I'd then want to be able to push the changes to these files without pushing any removal of the files I don't need. But I am not too deply into the way Git works to figure out if this is possible?</p>
","0","202538",""
"6988954","26286","2011-08-08 21:39:04","1","470","<git><git-svn><ssh-agent>","Can I make git-svn use my existing ssh-agent for credentials?","<p>ETA: Turns out I may have the wrong end of the stick.</p>

<p>Collabnet SVN stores its client certificate credentials not by using <code>ssh-agent</code>, but with <code>gnome-keyring</code> (or <code>kwallet</code>, or other platform-specific keyrings).  This, in turn, leads to a <a href=""http://git.661346.n2.nabble.com/git-svn-always-prompted-for-passphrase-with-subversion-1-6-td3520498.html"" rel=""nofollow"">longstanding open bug</a> in Git where it won't try to use some of the various Subversion authorization providers that are available.  This is a problem <a href=""https://bugs.launchpad.net/ubuntu/+source/git/+bug/637974"" rel=""nofollow"">all over</a>, and I'm not even sure who would actually be responsible for getting it fixed.  So for now, it's not a SO problem.</p>

<hr>

<p>I'm using git-svn to work against a subversion repo that uses client certificate authentication over HTTPS.  I've got SVN set up properly to use certs, and command-line svn always prompts for my certificate password when I do a remote operation (because I could never figure out how to have it use ssh-agent to access credentials).</p>

<p>Now that I'm using git-svn, remote operations (like <code>git-svn fetch</code>) still prompt for a password each time, but this time using an X dialog titled ""OpenSSH"", which is identical to the ssh-agent dialog I get when I first log on each day.  So it looks like git-svn is trying to use ssh-agent (yay!) but for some reason can't get access to the one that runs at session level (boo!) and thus needs to start its own... for each invocation of git-svn.</p>

<p>Is there something I'm missing that lets me ""point"" git-svn at the running agent and thus avoid typing a password every time I want to fetch?</p>
","2","26286",""
"62508274","11264645","2020-06-22 06:01:39","-1","258","<git><svn><migration><git-svn>","SVN to GIT migration - can we ignore git-svn-id in Migrated commit messages","<p>I have migrated  one repository from svn to Git using git-svn tool. After migration, commits history include SVN mapping information as part of the commit messages. Would it be possible to exclude the git-svn-id info in the messages of migrated commits?</p>
<p>Commit message coming after migration -
git-svn-id: https://svn-url/svn/repo-name/@163121 c3204716-b836-0410-8dec-96a83ff3a94f</p>
<p>We need only this part in commit message &quot;163121 c3204716-b836-0410-8dec-96a83ff3a94f&quot; As git-svn-id: https://svn-url/svn/repo-name/@ is added by git-svn tool while converting the repository.</p>
<p>Thanks in advance.</p>
","3","11264645",""
"6519400","356895","2011-06-29 10:45:16","8","20795","<git><hash><branch><git-svn><git-rebase>","How to git rebase using the hash instead of the branch name?","<p>I use <code>git rebase --onto target source foo</code> to move the branch <code>foo</code> from the branch <code>source</code> onto the branch <code>target</code>. Do you know if it is possible to use <strong>hash values</strong> instead of branch names (if not given) like this: <code>git rebase --onto ab91c f4242 foo</code>?<br>
As a workaround I temporarily added branch names to the relevant commit objects. But this can be a pita if you have many branches to being rebased.</p>

<p>Example situation:</p>

<pre><code>° bb42a
° ab91c
° 979c2
          /° fb648 foo
° f4242 --
° 333c9
</code></pre>

<p>After <code>git rebase --onto ...</code></p>

<pre><code>° bb42a
          /° fb648 foo
° ab91c --
° 979c2
° f4242
° 333c9
</code></pre>

<p>Background:<br>
The explained problem is very common if you use an svn-server as you remote repository. All you commit objects get rewritten since the <strong>svn-id</strong> will be added every time you <code>git svn dcommit</code> to the svn-repository. This detaches all other branches from their former <em>master</em>.</p>
","3","356895","0"
"43471649","79230","2017-04-18 12:05:21","1","978","<git><svn><github><bitbucket><git-svn>","git svn clone fails because of deleted branch","<p>I am migrating some SVN repos to Bitbucket using <code>git svn clone</code>. It seems that the clone fails when the revision that it is going to clone doesn't exist because the branch it affected doesn't exist anymore in Subversion.</p>

<p>I did</p>

<pre><code>git svn clone -authors-file=authors.txt https://my.svn.com/project001 project001
</code></pre>

<p>The logs shows</p>

<pre><code>{...}    
    r12 = f16b3d1014109ccd1c7e24dd70bfa9df45362e48 (refs/remotes/git-svn)
            M       trunk/xx.java
            M       trunk/xx.java
    r13 = 9e61cda58fb2f5afa0a97277a10fd92365f3d1e3 (refs/remotes/git-svn)
            M       trunk/xx.java
            M       trunk/xx.java
    r14 = f9964ce0a8081cf0bf22ee8a5ba32afe725323c3 (refs/remotes/git-svn)
            M       trunk/xx.java
    r15 = ac1f5c4a61346601dd85fbca55bd585ce5fc358d (refs/remotes/git-svn)
    fatal: .git\svn\refs\remotes\origin\https;C:\Program Files\Git\index: index file open failed: Invalid argument
            (in cleanup) update-index -z --index-info: command returned error: 128
    W: +empty_dir: branches/https:/my.svn.com/project001/branches
</code></pre>

<p>Exploring the SVN repo it seems that the revision #16 refers to the creation of a branch (wrongly named <code>https:/my.svn.com/project001/branches</code>) that doesn't exist anymore (it was deleted it revision #18). </p>

<p>I guess the problem is caused by this but after reading the docs and browsing SO I dind't find a way to make the git svn clone ignore this. I am looking for an <em>automated</em> way if possible because I have to write a script to migrate several GBs of SVN repos.</p>
","2","79230",""
"6536677","770126","2011-06-30 14:51:26","2","643","<git><git-svn>","git-svn merging between multiple remotes","<p>I have git-svn setup to track two remote svn locations, say <a href=""http://svnserver/develop/project"" rel=""nofollow"">http://svnserver/develop/project</a> and <a href=""http://svnserver/release/project"" rel=""nofollow"">http://svnserver/release/project</a> .</p>

<p>I also created local branches of the remotes in order to make changes and dcommit to them. However, when I try to merge a change from a local branch of develop to a local branch of release, I get conflicts which needs to be resolved in a text editor.</p>

<p>Example workflow</p>

<pre><code># Setup the repos
git svn init http://svnserver/develop/project -R develop -i svn-develop
git svn init http://svnserver/release/project -R release -i svn-release
git svn fetch develop
git svn fetch release
git checkout svn-release
git checkout -b release
git checkout svn-develop
git checkout -b develop

# Make changes to develop branch and commit to svn
git commit -a -m ""Changes""
git svn dcommit

# I'd like to bring changes to release branch
git checkout release
git merge develop --squash

# Ack! Conflicts :&lt;
</code></pre>

<p>Why can't git simply apply the diff to the release branch? Did I setup my remotes incorrectly? Is it because they are not tracked from a single parent?</p>

<p>Appreciate the help!</p>
","2","770126",""
"6541959","821812","2011-06-30 22:49:52","3","555","<svn><git><git-svn>","How to synchronize two git-svn repos","<p>i have to use a subversion repository and i'd like to use git-svn. I switch the computer sometimes and at the moment i need to commit my changes and update the other computer. Sometimes the changed code wouldn't work, so my idea would be to create two git-svn repos and synchronize them with push/pull, and sometimes sync them (or one of them) with the svn repository. Would that be possible?
Switching the repository to git is no option. (Sadly)</p>
","0","821812","0"
"62168371","10143388","2020-06-03 08:30:30","35","5012","<git><git-svn>","Assertion failed on git-svn checkout","<p>I'm trying to checkout a svn repository with git using the following command on Windows 7:</p>

<pre><code>git.exe svn clone ""https://..."" ""D:\repo""
</code></pre>

<p>However, no matter what other options I try to use, the following error occurs:</p>

<blockquote>
  <p>svn: E235000: In file 'subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.c' line 1666: assertion failed (get_current_pool_cb != NULL)</p>
</blockquote>

<p>I am using the newest git version 2.27.0</p>

<p>Any ideas what could be the issue here? 
Is ist possible, that the https authentication of the svn link is the reason for this?</p>

<p>I also have svn version 1.13.0 installed. Can there be incompatibel cross references between svn and git?</p>
","0","10143388","0"
"6814933","74152","2011-07-25 10:48:38","0","881","<git><git-svn>","Can I remove git-svn metadata from specific commits?","<p>I'm working in a git-svn cloned repository.  I've got a git branch tracking a Subversino feature branch, which I've made a load of commits to, and have <code>dcommit</code>ed them to Subversion.  Merging that Subversion branch is proving to be really painful, so I'd like to just rebase that branch onto master (or cherry-pick the commits I care about), and get rid of the Subversion branch.  (I don't mind losing the Subversion merge history).</p>

<p>If I hadn't pushed the commits to Subversion it would be fine, but if I rebase/cherry-pick the commits to master, they come complete with the <code>git-svn-id</code> which I presume will cause the <code>dcommit</code> process to explode spectacularly (although I'm too afraid to try it).</p>

<p>Is there a way to strip out the <code>git-svn-id</code> (and any other less-obvious metadata that might cause problems) for those commits that I want to bring across?</p>
","0","74152","0"
"52011334","10247440","2018-08-24 20:31:38","0","135","<git><svn><git-svn>","git svn authors duplicate error","<p>I have to migrate our SVN repos to Git (FINALLY !). I don't know SVN very well, so maybe my lack of knowledge on this point is problem. Nevertheless, for now I plan to use <code>git svn</code>.</p>

<p>But I have a little issue with authors remapping. I exported all authors list from SVN and created a <code>authors.txt</code> file as described by documentation. Example :</p>

<pre><code>johnD = John Doe &lt;john.doe@company.ch&gt;
andrewS = Andrew San &lt;andrew.san@company.ch&gt;
rogerF = Roger Federer &lt;roger.federer@company.ch&gt;
johnDAdmin = John Doe &lt;john.doe@company.ch&gt;
</code></pre>

<p>When I try to convert ours repos with a <code>authors.txt</code> file similar to this I one, <code>git svn</code> throws the following exception : </p>

<blockquote>
  <p>Option authors is ambiguous (authors-file, authors-prog)</p>
</blockquote>

<p>Thats probably beacause I want to map 2 SVN authors to 1 git author (<code>johnD</code> and <code>johnDAdmin</code> are the same person but 2 differents accounts).</p>

<p>I know I could migrate this with by mapping them to 2 git authors and after rewrite history to update authors in git history, but I have tens of duplicates accounts and hundreds of repos to migrate and that would be very fastidous to rewrite history for all those repos and authors.</p>

<p>So, does anyone have an idea on how to do to avoid this error ?</p>

<p>Regards,
Selmir</p>
","0","10247440",""
"6875966","869708","2011-07-29 16:11:24","2","572","<git><svn><version-control><git-svn><dvcs>","Convert svn to git using git svn clone","<p>I am attempting to convert a svn repository to git.  The layout of the svn repo has the branch/tag/trunk.  When I do the conversion to git (git svn clone) I have the exact same layout.  I get the branch, tag and trunk folders.</p>

<p>I have noticed that many of the recommendations for converting to git state we must clean up the tags to make them git tags.  They state that the tags and branches are viewed as remote branches, tags are prefixed with ""tag/"".</p>

<p>However my ref/remotes folder is completely empty.  I see all of my tags located under my ""tag' folder.  Along with the underlying folder structure and classes.</p>

<p>After a git svn clone what should my git repo look like?  Should it in fact have the tags/branch/trunk structure just like my svn repo?  Any idea on why I am not getting the tags to come across as others have?</p>

<p>Thanks for your help.</p>
","0","869708","0"
"7126640","455449","2011-08-19 19:47:49","2","326","<git><svn><git-svn>","How to use git-svn properly, svn-ers checkout svnrepo and git-ers clone gitrepo, committing carelessly","<p>In my company we use SVN, but want to <em>seamlessly</em> switch to GIT in future. That's why I started to learn git-svn, which promises to serve as a frontend for svn repository.</p>

<p>I tried to use it with following setup:</p>

<ul>
<li>SVNREPO - the master svn repository</li>
<li>GITREPO - git-svn clone of SVNREPO</li>
<li>REPO1,REPO2,... - git clones of GITREPO representing git-ers</li>
</ul>

<p>The requirements are:</p>

<ul>
<li><code>[ManyGitUsers]</code> many giters can clone from/push to GITREPO</li>
<li><code>[ManySvnUsers]</code> many svners commit to SVNREPO</li>
<li><code>[SyncHook]</code> synchronization between GITREPO and SVNREPO can be done by hook, or manually by admin before the hook is developed</li>
<li><code>[NoInteraction]</code> giters don't want to know anything about SVNREPO and vice versa</li>
<li><code>[NoProactivity]</code> users solve all problems (conflicts) when they happen; they don't sync with others to avoid them</li>
</ul>

<p>Questions:</p>

<ol>
<li>Is this setup possible with git-svn ? Suggest other if there is a better one</li>
<li>How should I configure the GITREPO ?</li>
<li>Will giters need to be aware of the special backend, or is everything transparent ?</li>
</ol>

<p>So far, my experiments showed that it <em>moreless</em> works, but commit into SVNREPO breaks the possibility to synchronize with git. I just believe that the reason is me issuing bad commands...</p>
","0","455449",""
"25351213","3543449","2014-08-17 16:30:57","5","27152","<git><bash><terminal><git-svn>","My shell prompt looks like this: ➜ ~ git:(master) ✗. How can I get my normal prompt back?","<p>My normal terminal command line has suddenly disappeared and has been replaced by this git command line <code>➜  ~ git:(master) ✗</code>.</p>

<p>How do I get rid of this and go back to my normal command line in Terminal? I on Mac OS X.</p>

<p>I have tried typing <code>exit</code>, <kbd>Ctrl</kbd>+<kbd>c</kbd>, <kbd>q</kbd>, etc. but nothing helped.</p>
","2","3543449","0"
"52076138","7986808","2018-08-29 11:15:18","1","519","<git><svn><git-svn>","git for-each-ref does not match the actual number of tags","<p>I'm following this instruction to try to migrate an existing svn repository to git. 
<a href=""https://john.albin.net/git/convert-subversion-to-git"" rel=""nofollow noreferrer"">https://john.albin.net/git/convert-subversion-to-git</a>  </p>

<p>I cloned the repository using the command</p>

<pre><code>git svn clone https://urltorepository.com/svn/repos-itservices/apps --no-metadata --authors-file=authors.txt --stdlayout testing
</code></pre>

<p>When I do <code>git for-each-ref</code> i get following:</p>

<pre><code>f98b1954059631270b44ed3037d3d08127ab051a commit refs/remotes/tags/RE.15.03.00.00
181a447b465c34857c1091b06173d30f467c9941 commit refs/remotes/tags/RE.15.03.00.01
cfca76149b8f79749ef0e978b3628fdcf43955d0 commit refs/remotes/tags/RE.15.04.00.00
bc19d96df3a95ae82368ac2083dc1cb77b39a2e9 commit refs/remotes/tags/RE.15.05.00.00
9cdf10ed94bcd5f88f121cb7977da79551918a7f commit refs/remotes/tags/RE.15.11.00.00
3d51a5ca903965b6043744c4995b3c17268c516b commit refs/remotes/tags/RE.16.03.00.00
83e65bbc68435b5622691acbaeba7e575bed08e4 commit refs/remotes/tags/RE.16.04.00.00
281e7aab7adc0d73fc678a39524cd8b64130fdfa commit refs/remotes/tags/RE.16.05.00.00
...
...
0cbf2d48633b5c8d691bf4b93208f02de0cd94fa commit refs/remotes/tags/RE.17.11.00.00
b57de4c3bc4caf4c77f2deb5eb10121193d39122 commit refs/remotes/tags/RE.17.11.10.00
1be3ba34cc0c0f556f972c6407605b560ad32f57 commit refs/remotes/tags/RE.18.01.00.00
56199738b9b4c523c7fc5daf00a3b7bd111f34f7 commit refs/remotes/tags/RE.18.02.00.00_IRIS-MIG
436823909e35cc78813042e1a2181048628e006d commit refs/remotes/tags/RE.18.03.00.00
f4edf4871858f180de3bae7c6dd04d1281e7a0f0 commit refs/remotes/tags/RE.18.03.00.00_ROLLBACK
4e38260f293ceb77281f0f87bd5816b48d0df174 commit refs/remotes/tags/RE.18.04.00.00
fcd58a4f0abf1b8dbb7d9edc846a831b964b09e4 commit refs/remotes/tags/RE.18.05.00.00
4e8936901052fd84804c7587cdb9c21ab980fc0e commit refs/remotes/tags/RE.18.06.00.00
18d443117221769ebccd42a1b22b06e039984c81 commit refs/remotes/tags/RE.18.08.00.00
8bfcb5f9c0b8d27f84e00ed5a2c4574cf726b357 commit refs/remotes/tags/RE18.06.00.00
6bb64c124aa47361c1fb951e6f6132ca09900b3f commit refs/remotes/tags/backup
b84d777d172d56bb43a18f9216cdfd48715cc76f commit refs/remotes/tags/backup@15657
a071ef00e51484338d1d8ee378f63a891d5e327b commit refs/remotes/tags/mod-security-2.2.7-test
5b0bd14307822551d65f1eabf06a229ac80cb0f2 commit refs/remotes/tags/mod-security2.2.7-testing
80b983c042b9ce5ce4c4b79fe02f1e4dec4785c5 commit refs/remotes/tags/package
568bf833abe733ebed65a0f2274826745c1c20bd commit refs/remotes/tags/package@15657
67155be3306148cc726711ec69092af4eba10845 commit refs/remotes/tags/props
f14622fc103a2c6ad1836c8a5d747f13936f5f7a commit refs/remotes/tags/props@15657
2c44a37dd69f45c58aabca388266232cfbbf108a commit refs/remotes/tags/rp
720d43aba7666cd9727d049dc3e04bc9827e4523 commit refs/remotes/tags/rp@15657
6bb64c124aa47361c1fb951e6f6132ca09900b3f commit refs/remotes/tags/tmp
b84d777d172d56bb43a18f9216cdfd48715cc76f commit refs/remotes/tags/tmp@15657
12d372c97e17f10ec5daba08debaf3e0fa887356 commit refs/remotes/trunk
</code></pre>

<p>But when I check this folder I see only few tags in it</p>

<pre><code>$&gt; ls -a .git/refs/remotes/tags/
.   RE.17.08.00.00  RE.17.11.10.00  RE.18.01.00.01  RE.18.02.00.00_IRIS-MIG  RE.18.03.00.00_ROLLBACK  RE.18.05.00.00  RE18.06.00.00
..  RE.17.10.00.00  RE.18.01.00.00  RE.18.02.00.00  RE.18.03.00.00           RE.18.04.00.00           RE.18.06.00.00  RE.18.08.00.00
</code></pre>

<p>Can some one tell me  why is there this difference?</p>

<p><strong>UPDATE</strong></p>

<p>I added this tags to my git and then did <code>git push --tag</code></p>

<pre><code>$&gt; git for-each-ref --format='%(refname)' refs/remotes/tags | egrep ""RE*"" | cut -d / -f 4- | while read ref; do git tag -a ""$ref"" -m ""$ref""; done
$&gt; git tag
RE.12.04.00.00
RE.12.05.00.00
RE.12.06.00.00
RE.12.07.00.00
...
...
RE.18.02.00.00
RE.18.02.00.00_IRIS-MIG
RE.18.03.00.00
RE.18.03.00.00_ROLLBACK
RE.18.04.00.00
RE.18.05.00.00
RE.18.06.00.00
RE.18.08.00.00
RE18.06.00.00
</code></pre>

<p>Then in my git repository I have following:</p>

<p><a href=""https://i.stack.imgur.com/LQhvA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LQhvA.png"" alt=""enter image description here""></a><a href=""https://i.stack.imgur.com/z5mTI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/z5mTI.png"" alt=""enter image description here""></a></p>

<p>As you can see all tags are related to the last commit</p>
","0","7986808",""
"25358645","2451238","2014-08-18 07:58:01","0","268","<git><svn><git-svn><git-branch>","unlink git branch from svn origin","<p>This is a follow-up to <a href=""https://stackoverflow.com/q/24691660/2451238%20this%20previous%20question"">this previous question</a>.
So there you can find what I did so far.</p>

<p>In short, I created a new <code>git</code> branch branching from a branch that is dcommit'ed to a remote <code>svn</code> repository.
This new <code>git</code> branch is intended to only be used locally and never to be synchronized with the <code>svn</code>.
While I can ensure this manullay as explained in <a href=""https://stackoverflow.com/q/24691660/2451238"">this answer</a>, the new <code>git</code> branch 'remembers' its <code>svn</code> origin:</p>

<pre><code>$ git svn info
Path: .
URL: [path-to-host]/[svn-repo]/trunk
Repository Root: [path-to-host]/[svn-repo]
Repository UUID: [repository-uuid]
Revision: [revision]
Node Kind: directory
Schedule: normal
Last Changed Author: sg-lecram
Last Changed Rev: [revision]
Last Changed Date: [date]
</code></pre>

<p>So assume if I checkout the new <code>git</code> branch and commit some changes to the local <code>git</code>, I could run <code>git svn dcommit</code> sending the changes to the <code>svn</code>. While I do not plan to do this, all it needs is to forget for a split-second on which branch I am on to publish all the secret changes in the secret git branch.</p>

<p>I would like to be able to unlink the new <code>git</code> branch from the <code>svn</code> so that trying to dcommit from that branch results in an error.
How can I do this?</p>
","3","2451238",""
"36008661","5288281","2016-03-15 10:30:24","1","1547","<git><svn><git-svn>","git svn fetch - Unable to find .git directory","<p>I have migrated the SVN repository to a local Git repository by using following <strong>git svn clone command</strong> </p>

<pre><code>git svn clone &lt;svn-repo&gt;/&lt;project&gt; &lt;git-repo-name&gt;
</code></pre>

<p>Now I want to synchronize the new local Git repository when the SVN repository changes(new commit). I used following command to fetch any new commits from the original SVN repository:</p>

<pre><code>git svn fetch
</code></pre>

<p>But nothing is fetched after executing above command. It displays as : </p>

<pre><code>$ git svn fetch
</code></pre>

<p>Instaed it shows as :</p>

<pre><code>$ git svn fetch
fatal: Not a git repository (or any of the parent directories): .git
Unable to find .git directory
at D:\Program Files\Git\mingw64/libexec/git-core\git-svn line 347.
</code></pre>
","0","5288281",""
"7153772","237117","2011-08-22 21:23:35","0","287","<git><git-svn><rebase>","git-svn cannot rebase because of files that exist only in git repository, not in svn","<p>When I do a git svn rebase, it tells me that it had a CONFLICT (add/add) in a file that's not even in the SVN repository, I added it after my initial git clone. When I fire up meld, my favorite merge tool, I see two versions of the file, one more recent than the other. So I resolve the merge conflict by taking all the changes for the more recent version, and do a 'git add' on the file. Git status does not show the change staged for commit, and git rebase --continue says:
No changes - did you forget to use 'git add'?</p>

<p>What's going on? What have I done wrong? Why won't this merge?</p>
","0","237117",""
"52094217","814206","2018-08-30 09:58:37","3","6023","<git><git-svn>","What is the cause of loose objects? Can they safely be removed by `git prune`?","<p>I'm using a local Git repo that uses our company's SVN repo as origin.</p>

<p>I often receive the message:</p>

<blockquote>
  <p>error: The last gc run reported the following. Please correct the root cause and remove .git/gc.log.
  Automatic cleanup will not be performed until the file is removed.</p>
  
  <p>warning: There are too many unreachable loose objects; run 'git prune' to remove them.</p>
</blockquote>

<p>Indeed removing <code>.git/gc.loc</code> and calling <a href=""https://git-scm.com/docs/git-prune"" rel=""nofollow noreferrer""><code>git prune</code></a> fixes the issue.<br>
However, in a comment to <a href=""https://stackoverflow.com/users/6309/vonc"">VonC</a>'s <a href=""https://stackoverflow.com/a/1108084/814206"">answer</a> to <a href=""https://stackoverflow.com/q/1106529/814206"">How to skip &quot;Loose Object&quot; popup when running &#39;git gui&#39;</a> by <a href=""https://stackoverflow.com/users/75204/michael-donohue"">Michael Donohue</a>, <a href=""https://stackoverflow.com/users/75204/michael-donohue"">Michael Donohue</a> states:</p>

<blockquote>
  <p>[...] I do like the safety aspect of keeping the loose objects around for two weeks, should I want to go back and look at some old revisions [...]</p>
</blockquote>

<p>In an <a href=""https://stackoverflow.com/a/38052190/814206"">answer</a> (also by <a href=""https://stackoverflow.com/users/6309/vonc"">VonC</a>) to <a href=""https://stackoverflow.com/q/37732141/814206"">Whole team gets &#39;too many unreachable loose objects&#39; messages</a> — a question about<a href=""/questions/tagged/gitlab"" class=""post-tag"" title=""show questions tagged &#39;gitlab&#39;"" rel=""tag"">gitlab</a>issue with loose objects after moving from SVN to git — by <a href=""https://stackoverflow.com/users/282677/jlengrand"">jlengrand</a>, <a href=""https://stackoverflow.com/users/6309/vonc"">VonC</a> writes:</p>

<blockquote>
  <ul>
  <li>ran git prune and prayed it didn't break things (which it thankfully didn't)</li>
  </ul>
</blockquote>

<p>So, I assume <a href=""https://git-scm.com/docs/git-prune"" rel=""nofollow noreferrer""><code>git prune</code></a> is a dangerous operation that can destroy things.</p>

<p>To safely deal with the ""too many unreachable loose objects""-message I have the following questions:</p>

<p>What causes these loose objects (see <a href=""https://git-scm.com/docs/git-fsck"" rel=""nofollow noreferrer""><code>man git-fsck</code></a> about unreachable object and see <a href=""https://stackoverflow.com/users/1256452/torek"">torek</a>'s <a href=""https://stackoverflow.com/a/50141014/814206"">answer</a> — about the inner workings of git objects and hashes and <code>git gc</code>, <code>git prune</code>, and <code>git repack</code> — to <a href=""https://stackoverflow.com/q/50135844/814206"">What does git do when we do : git gc - git prune</a> by <a href=""https://stackoverflow.com/users/9317830/lyes-chioukh"">Lyes CHIOUKH</a>)?<br>
Is it only <a href=""https://git-scm.com/docs/git-svn"" rel=""nofollow noreferrer""><code>git svn push</code></a> that:</p>

<ol>
<li>reads the git commit object,</li>
<li>sends it to the SVN server,</li>
<li>retrieves the stored SVN revision,</li>
<li>creates a fresh git commit object that reflects the SVN revision,</li>
<li>replaces the HEAD pointer to the commit from step 1 with one pointing to the commit of step 4, and</li>
<li>leaves the original commit as a loose object.</li>
</ol>

<p>Does this indeed cause the loose commits?<br>
Does this cause all loose commits (I also do some git tree manipulation of stuff not yet in SVN such as <code>git stash</code>, <code>git cherry-pick</code>, <code>git rebase</code>, and <code>git reset</code>)?</p>

<p>When may I need these loose objects?
What is a good policy for using <a href=""https://git-scm.com/docs/git-prune"" rel=""nofollow noreferrer""><code>git prune</code></a> on my personal git repo?</p>
","0","814206","0"
"7154244","237117","2011-08-22 22:15:46","2","539","<git-svn>","How can I tell what svn version my git-svn repository is based on?","<p>I've cloned an SVN repository into git using git-svn, but I'm having <a href=""https://stackoverflow.com/questions/7153772/git-svn-cannot-rebase-because-of-files-that-exist-only-in-git-repository-not-in"">trouble rebasing</a> and I thought to work around it by using svn to generate a patch between the old SVN revision I'd used to clone my git repo in the first place and the current version. That way I could just apply the patch and call it rebased.</p>

<p>Any idea how I can find the SVN revision number my current git-svn clone is based on?</p>
","0","237117",""
"36038031","6071947","2016-03-16 14:06:13","4","2752","<git><svn><migration><git-svn>","git-svn crashing on big repo migration","<p>I've been struggling for a couple of days to migrate a big SVN repo to GIT. It contains about 25000 commits, includes some bad history (moving huge amounts of files due to wrong attempts of branching), non-standard layout (no trunk folder, branches which are not branches in fact so I treat them as part of trunk, no tags...) 
I started with Atlassian tutorial (<a href=""https://www.atlassian.com/git/tutorials/migrating-overview"" rel=""nofollow"">https://www.atlassian.com/git/tutorials/migrating-overview</a>)
so basically what I'm doing is migrating SVN to GIT repo on my own computer for now. I'll push it to central repo later.</p>

<p>GIT version is 2.7.2.</p>

<p>I tried git svn directly and indirectly with svn2git (based on Ruby)</p>

<p>I've tried multiple approaches but I always sooner or later get: </p>

<pre><code>couldn't truncate file at /mingw64/share/perl5/site_perl/Git.pm line 1393.
</code></pre>

<p>or </p>

<pre><code>0 [main] perl 12640 cygwin_exception::open_stackdumpfile: Dumping stack trace to perl.exe.stackdump
</code></pre>

<p>Any ideas are welcome... :)</p>

<p>Thanks!</p>
","1","6071947",""
"52114802","553735","2018-08-31 11:46:00","0","850","<git><svn><git-svn>","How to properly initialize git-svn clone of a repository with nonstandard layout?","<p>I am trying to work using git with svn repository that has the following rough layout:</p>

<blockquote>
  <p>RepositoryHone</p>
  
  <ul>
  <li>-> Documents</li>
  <li>-> ExtraDocuments</li>
  <li>-> playground</li>
  <li>-> playground_dev</li>
  <li>-> playground_balance_change</li>
  <li>-> Tools</li>
  </ul>
</blockquote>

<p>where playground contains main development branch (trunk), and playground_dev, playground_balance_change and others not shown are branches.</p>

<p>In branches, layout goes like this:</p>

<blockquote>
  <ul>
  <li>-> build</li>
  <li>-> lib</li>
  <li>-> bin</li>
  <li>-> src</li>
  </ul>
</blockquote>

<p>I mostly wanted to work with playground and playground_dev, so i have run:</p>

<blockquote>
  <p>git svn init svn::/server.address:port/RepositoryHome -T playground -b playground_dev</p>
  
  <p>git svn fetch</p>
</blockquote>

<p>However, when i have run <code>git branch -r</code> to check how branches were imported, i found with my growing horror, that there were, besides ""origin/trunk"", ""branches"" like ""origin/bin"", ""origin/lib"", "" origin/src"" and so on.</p>

<p>How can i ensure correct mapping of branches between local working copy/git repository and the server?</p>

<p>Is it possible to fix the situation without fully fetching, as process takes a lot of time (roughly 16 hours)?</p>
","0","553735",""
"25381966","747030","2014-08-19 11:14:35","3","63","<git><git-svn>","git svn ""unable to chdir up to '.'""","<p>I use a local git with a SVN remote server, everything works fine but after my last reboot I get the following error with everything related to git svn.</p>

<pre><code>unable to chdir up to '.'
</code></pre>
","0","747030",""
"7426871","90025","2011-09-15 06:46:24","2","168","<git><workflow><git-svn>","Remove already committed git branches","<p>My normal pattern is to branch from master, do a ton of work, then rebase and <code>git svn dcommit</code>. How can I clean up all my old branches?</p>

<p>Basically I want to find any branches that have <code>git-svn-id:</code> in the message and <code>git branch -D</code> those.</p>

<p>NOTE: <code>git branch --no-color --no-track --merged</code> gets me most of the way, but if I ever get into a situation where I need a <code>git fetch -f</code> (because of a crazy git-svn bug) I would have to go and rebase all the branches myself.</p>
","3","90025","0"
"7430645","946754","2011-09-15 12:16:36","7","3461","<git><git-svn>","With ""git svn"", Can I Ignore Specific Git Commits While Fetching?","<p>I am using <code>git svn</code> on my local machine to sync with a SVN repo.</p>

<p>Recently, someone in my team added some experimental stuff (he was trying to add some tags) to the SVN repo and deleted it later in the next commit. After this my git svn refuses to fetch. It just gets to a certain point and stays stuck there.</p>

<p>I would not want to fetch all that experimental stuff into my local machine anyway. So, I would like to <strong>ignore certain commits</strong> in the SVN repository. Is that possible with <code>git svn</code>?</p>
","0","946754","0"
"36080736","882697","2016-03-18 09:31:48","2","391","<git><bash><mingw><git-svn><line-endings>","How to preserve line endings when extracting git commit messages in a bash script?","<p>I am using git svn to access a SVN server.
I am trying to write a script that converts and copy all SVN tags into git tags.</p>

<p>I found this:
<a href=""http://gitready.com/advanced/2009/02/16/convert-git-svn-tag-branches-to-real-tags.html"" rel=""nofollow noreferrer"">http://gitready.com/advanced/2009/02/16/convert-git-svn-tag-branches-to-real-tags.html</a></p>

<p>And this:
<a href=""https://stackoverflow.com/a/3357357/882697"">https://stackoverflow.com/a/3357357/882697</a></p>

<p>To create that:</p>

<pre><code>git for-each-ref refs/remotes/origin/tags | cut -d / -f 5- |
while read ref
do
    msg=`git log --format=%B -n 1 origin/tags/""$ref""`
    echo $msg
done
</code></pre>

<p>The <code>git log</code> command works well in the mingw bash (from git install). 
But when launching the script from the same mingw bash, the line endings are stripped.
I tried to added <code>\r</code>:</p>

<pre><code>msg=`echo $msg | sed 's/\n/\r\n/'`
</code></pre>

<p>But it doesn't work either...</p>

<p>Could someone help me please? Thanks!</p>
","0","882697","0"
"36087027","882697","2016-03-18 14:32:24","1","85","<git><git-svn><git-commit>","How to remove duplicated commits in a git svn tree?","<p>I am working with a SVN server using git SVN.
I struggled to created a tag so I had a look at the tree.
I noticed that my tree is messed up: all commits appear twice. Once in the red &quot;branch&quot; and once in the purple on:</p>
<p><a href=""https://i.stack.imgur.com/AdHMr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AdHMr.png"" alt=""enter image description here"" /></a></p>
<p>Before posting this I cleaned a lot of branches using:</p>
<pre><code>git branch -D useless_remote_branch
git gc
</code></pre>
<p>But for this one I don't know what to do to get a clean history.</p>
<p><strong>How could I get back to a linear history with only the red &quot;branch&quot;?</strong></p>
<p>I can delete the tag on the SVN side if needed.</p>
<p>Thank you!</p>
<hr />
<h2>EDIT</h2>
<p>Here is what I got after the solution suggested by @VonC and a <code>git svn tag</code> command:</p>
<p><a href=""https://i.stack.imgur.com/2gBbO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2gBbO.png"" alt=""enter image description here"" /></a></p>
","0","882697","0"
"7436438","339925","2011-09-15 19:32:39","11","2586","<git><svn><git-svn>","Does git svn support svn:needs-lock?","<p>To access our SVN repository I'm using git svn and other team members are using svn.</p>

<p>When they set the needs-lock property it appears that git svn ignores this and allows me to update the files anyway.</p>

<p>Is that accurate?</p>

<p>Also, is it possible to manage the needs-lock property using git svn?</p>
","0","339925","0"
"7442574","529977","2011-09-16 09:22:43","2","227","<git><git-svn>","Changing remote tracking branches in git(-svn) after clone with restricted branches","<p>When restricting remote branches to a list of 2 or three (editing the .git/config as seen in {^1}), refetching, carbage collectioning and cleaning all ""refs"" directories I still get a full list of all remote branches with <code>git branch -avv</code> {^2}</p>

<p>I expected to see v2 and v3 only as branches in the list of remote branches.
Any ideas how to fix this? Or is that the ""git way"" to present all remote branches either we might work with or not?</p>

<p>{^1}</p>

<pre><code>[svn-remote ""svn""]
url = https://example.com/svn/repos/MyRepo/SubPath
fetch = trunk:refs/remotes/trunk
branches = branches/{v2,v3}:refs/remotes/*
</code></pre>

<p>{^2}</p>

<pre><code>* master         1234 [trunk: ahead 1] last msg master
  remotes/v1     2345 last msg svn branch v1
  remotes/v2     3456 last msg svn branch v2
  remotes/v3     4567 last msg svn branch v3
  remotes/v4     5678 last msg svn branch v4
  remotes/trunk  6789 last msg svn trunk
</code></pre>
","0","529977",""
"7445593","930271","2011-09-16 13:41:05","0","173","<git><git-svn>","Push a git-svn local repo to a different svn remote repo that already exists","<p>I'm trying to integrate two svn repos. One is a kind of fork of the other. But it's not exactly a fork so i can't find a common point.</p>

<p>I've cloned both repos in one local git-svn repo, each repo in one branch, and i have already integrated both repos but know i need to push the changes to one of the original repos. I trying to figure the best workflow for upload the changes maintaining the history. I think that it should be something like this:</p>

<pre><code># Move the trunk of the remote repo to a branch
$ svn move svn+ssh://host.example.com/repos/project/trunk svn+ssh://host.example.com/repos/project/branches/NAME_OF_BRANCH -m ""Creating a branch of project""

# Make a commit that explains the change that is going to happen

# Change to the branch that tracks the remote repo, and fetch the changes
$ git checkout myBranch
$ git svn rebase

# The folder should be empty at this point

# Upload the local changes to the trunk of the remote repo
$ git merge integrationBranch

# ¿rewrite the history?

# Upload it
$ git svn dcommit
</code></pre>

<p>I can't find a <a href=""http://kerneltrap.org/mailarchive/git/2010/2/10/22879"" rel=""nofollow"">better explanation</a> but i think that git svn dcommit uses git-svn-id of the last commit to figure which is the url to push, so i guess that in some point i should rewrite the history, but i don't know how.</p>

<p>Also if anyone can provide a way to make a test before really upload the changes will be great.</p>
","0","930271",""
"25633493","3738356","2014-09-02 22:38:55","2","28","<git><svn><github><git-svn><google-code>","Convert two subversion repos on googlecode to a single git repo on github","<p>(1) How do I convert two subversion repos, one of which is an external of the other to a single git repo on github?  I want the history to be interleaved so that the gitk output makes sense!</p>

<p>(2) Why would I want to use svnadmin dump instead of just <code>git clone</code>ing them and then moving them?</p>

<p>(3) How can I test my new repository to see that it matches the old pair of repositories?</p>

<p>For the sake of answering the questions, suppose the two subversion repositories are at <a href=""http://acl2-devel.googlecode.com/svn"" rel=""nofollow"">http://acl2-devel.googlecode.com/svn</a> and <a href=""http://acl2-books.googlecode.com/svn"" rel=""nofollow"">http://acl2-books.googlecode.com/svn</a>, and that both repositories were setup with the standard svn layout (trunk, branches, tags).  Also, assume that I want a clean break and want a fresh start for branches and tags.</p>
","0","3738356",""
"7460285","43679","2011-09-18 08:15:32","1","971","<git><svn><git-svn>","git svn partial subversion tree","<p>I'm using git for developing a current project on my local machine.
There exists a subversion server which I have to update from time to time, based on my current master branch.</p>

<p>Lets say my directory in the svn is:</p>

<pre><code>project/module/
</code></pre>

<p>In this directory there is one general directory and my svn structure</p>

<pre><code>project/module/aDirectory
project/module/myGitDirectory/trunk
project/module/myGitDirectory/branches
project/module/myGitDirectory/tags
</code></pre>

<p>Following git-svn I setup my git to use the directory as a upstream:</p>

<pre><code>[svn-remote ""svn""]
        url = https://mygit.test.com/project
        fetch = module/myGitDirectory/trunk:refs/remotes/trunk
        branches = module/myGitDirectory/branches/*:refs/remotes/*
        tags = module/myGitDirectory/tags/*:refs/remotes/tags/*
</code></pre>

<p>I worked normally in git and committed my changes just with</p>

<pre><code>git svn dcommit
</code></pre>

<p>to the partial svn tree</p>

<p>This worked quite fine, until someone else committed in </p>

<pre><code>project/module/aDirectory
</code></pre>

<p>which is not in my local git repo.</p>

<p>The failure for <code>git svn dcommit</code> was: </p>

<pre><code>Unable to determine upstream SVN information from HEAD history.
</code></pre>

<p>I googled that problem and found some solutions here in so, but the solutions didn't really help me out. Either it didn't work at all or I had to handmerge dozens of files, which I don't want.
My current workaround is checkout the complete svn, copy changes from git to svn repo and just commit them.</p>

<p>So my question is, is it possible to use such a partial svn tree within git-svn, the way I do?
Did I made any mistake by specifying wrong directories for git-svn?
Or is git-svn not an appropriate solution for my scenario.</p>

<p>And if I can do this the way I started, what happens with the svn commits to files which are not tracked in my local git? </p>

<p>I'm using the combination of svn and git in some other projects and never ran into any trouble, but there the whole svn tree is also managed in git. So each commit to svn has an appropriate place in my git repo :)</p>
","0","43679",""
"7465706","159346","2011-09-19 01:41:02","1","113","<git><git-svn>","git ignores files unexpectedly","<p>I have git repo migrated from svn. There is a problem about git ignoring files unexpectedly.
It ignores ALL <code>png</code> files I add to the project, although there is no rule at <code>.gitignore</code> file</p>

<p>A little more info (this maybe irrelevant), I used to ignore ""some"" <code>png</code> files when I was working with svn and this is specified in <code>.gitignore</code> file. Something like; <code>/project/web/images/white/.*png</code> So this should be aplying to one folder right? I don't know if this is anything to do with my problem, since even I remove this line, the problem persists.</p>

<p>Thanks in advance</p>
","1","159346",""
"52214581","5384623","2018-09-07 02:46:38","2","1308","<git><git-svn>","Timeout setting on git svn fetch operation","<p>I need to set the timeout on git svn fetch command. The fetch process should be timed out if it takes more than specific time interval(say 10 mins).Is it possible do like this in git command itself ? Or any other possible way to do this ?</p>
","2","5384623","0"
"25681142","569547","2014-09-05 07:59:04","0","1422","<git><github><git-svn><collabnet>","git push of other user's changes from my branch to master failed","<p>We have a master branch and a diverged XXX branch.
Some changes are made to Master branch.
Some changes are made to XXX branch.
Now, the requirement is that both should be up-to date with each other.
Problems are: Multiple people works on the branch.
My plan was cherry-pick the XXX branch changes and push it to Master and then rebase my XXX to Master.
I tried cherry-picking the changes from XXX branch to Master and then tried pushing it but unfortunately it din't work **
 [remote rejected] master -> refs/for/master (invalid author)
Problem was, commit ids with other user email ids are not matching my email id.</p>

<p>Please suggest an approach.</p>
","0","569547",""
"36191822","4701555","2016-03-24 01:39:46","16","11542","<git><git-svn>","git svn clone failed","<pre><code>git svn clone url

Initialized empty Git repository in D:/code/Androi
d/ProjName/.git/
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem h
as no item: '/svn/Projects/!svn/rvr/100/Android/ProjName' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively
 for old history.
This may take a while on large repositories
      4 [main] perl 8428 child_info_fork::abort: unable to map d:\Program Files\
Git\usr\bin\msys-svn_subr-1-0.dll, Win32 error 1114
open2: fork failed: Resource temporarily unavailable at /mingw64/share/perl5/sit
e_perl/Git.pm line 411.
</code></pre>

<p>after the command was executed, nothing was got from server.</p>

<p>If use the following commands, get the same result after the second command ""git svn fetch""</p>

<pre><code>$ git svn init url
Initialized empty Git repository in D:/code/Android/try1/.git/

johnliao@john-toshiba MINGW64 /d/code/Android/try1 (master)
$ git svn fetch
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: '/svn/Projects/!svn/rvr/100/Android/ProjName' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
      4 [main] perl 5472 child_info_fork::abort: unable to map D:\Program Files\Git\usr\bin\msys-svn_subr-1-0.dll, Win32 error 1114
open2: fork failed: Resource temporarily unavailable at /mingw64/share/perl5/site_perl/Git.pm line 411.
</code></pre>
","7","4701555","0"
"7772485","446140","2011-10-14 19:16:29","6","2783","<git><svn><git-svn>","git svn dcommit does not find changes and reset head","<p>I have a big problem with git-svn: I need to just push my git repo to a svn server, so I made the following</p>

<pre><code>svn mkdir --parents http://host/path/to/repo/{trunk,tags,branches} \
    -m ""Standard layout for $project""
git svn init -s http://host/path/to/repo/
git svn fetch
git rebase trunk master
git svn dcommit
</code></pre>

<p>This worked great and everything is both on git and svn!</p>

<p>Now I got the message that my git master branch is 31 commits behind the origin/master, so I made a git pull.
Now I changed some things in my repo (basicily its a eclipse java project) and commited it. Now I want also to push it on the svn repo and made a 
    git svn dcommit
but thats not working:</p>

<pre><code>Committing to https://..../trunk ...
No changes
38b194cb2860b8bb73924cb05f9830dbdb70cf82~1 == 38b194cb2860b8bb73924cb05f9830dbdb70cf82
No changes between current HEAD and refs/remotes/trunk
Resetting to the latest refs/remotes/trunk
Unstaged changes after reset:
M       Product/Abgabe.tex
Unable to extract revision information  from commit daf483ad1333f3589386b87054f4c27fb7ff23cf~1
</code></pre>

<p>What I did wrong? The master is now reseted to the commit before, now I need to <code>git checkout -- Abgabe.tex</code> and <code>git pull</code> to have the right version here...</p>

<p>Edit: If I do a <code>git svn rebase</code>, I get for every commit a long list of CONFLICTS, so I made <code>git rebase --skip</code> to the end, and then dcommted, this was working, but it seems to be a bloody hack :/</p>
","0","446140","0"
"7797368","469717","2011-10-17 17:34:20","3","260","<git><git-svn>","Proper git procedure for changed files that shouldn't be committed?","<p>I just inherited an existing codebase that has multiple configuration files in it. These configuration files are all generic, meant to be edited and customized for each machine they are downloaded to. Git is (obviously) telling me that they have been edited and is always showing them under ""changes not staged for commit"" every time I do a <code>git status</code>. How can I ignore these files under git? Adding them to .gitignore doesn't work because they are already being tracked by git. I don't want to commit anything to the repo, but at the same time I want to tell git not to track these files anymore on my local machine. Is there a way of doing this that I'm not aware of? I know I can <code>git stash</code> them and they won't be shown anymore, but I feel that is not really what it was meant for... Am I wrong?</p>

<p>Not sure if this changes anything, but I am using git-svn on my local machine to interact with the SVN server.</p>
","0","469717","0"
"7798587","79513","2011-10-17 19:32:44","1","2521","<git><svn><git-svn>","git-svn fetch authorization failure","<p>I'm trying to clone an svn repository with git, but I get an authorization failure on the fetch step.  I'm only trying to get the trunk of the project currently:</p>

<pre><code>$ git svn clone svn://some/repo --trunk=svn://some/repo/trunk/project/ --username afoglia .
Initialized empty Git repository in /home/afoglia/projects/new_repo/trunk.git/project/.git/
Using higher level of URL: svn://some/repo/trunk/project =&gt; svn://some/repo
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: File not found: revision 100, path '/trunk/project'
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
Authorization failed: Authorization failed at /home/afoglia/.local/stow/git-1.7.7/libexec/git-core/git-svn line 3099
</code></pre>

<p>I've tried fetching only the most recent revisions, and that fails with the same message.</p>

<p>git is successfully accessing the repository in the first step; I can see the counter of revisions incrementing as it approaches the first revision with this directory.  So I don't know why there is a failure.  Note that the layout is multiple projects under a single trunk directory, and I only have permissions to read that project and below.</p>

<p>I'm unfamiliar with Perl, but line 3099 is an unless with a different die message, and the string ""Authorization failed"" is nowhere in the script.</p>

<p>Also, I had to install git under my own account, and compile and install svn as well, so this might be the result of a missing perl library.  (But I have successfully cloned an unsecured svn repository, so it's not something obvious.)</p>
","0","79513","0"
"7023519","777855","2011-08-11 09:18:44","2","825","<git><svn><git-svn>","Trouble pushing from git to subversion using git-svn","<p>I'm trying to push the existing git repo into svn. </p>

<p>There are solutions described <a href=""https://stackoverflow.com/questions/661018/pushing-an-existing-git-repository-to-svn"">here</a> and <a href=""http://draconianoverlord.com/2010/03/05/existing-git-into-svn.html"" rel=""nofollow noreferrer"">here</a>.
That's what I'm doing:</p>

<p>1.Creating git repo:</p>

<pre><code>$ mkdir /blabla/git_repo
$ cd /blabla/git_repo
$ git_init
$ touch hello.c
$ git add hello.c
$ git commit -m ""init""
</code></pre>

<p>2.Creating svn repo:</p>

<pre><code>$ svnadmin create /blabla/svn_repo
$ cd /blabla/svn_repo
$ vim conf/*
... making initial configuring ...
$ svnserve --daemon --root /blabla/svn_repo/
</code></pre>

<p>So, now I have pure svn repository and existing git repository.</p>

<p>3.Pushing git into svn</p>

<pre><code>$ cd /blabla/git_repo
$ svn mkdir --parents svn://localhost/GIT/trunk -m ""git import""
$ git svn init svn://localhost -T GIT/trunk
$ git svn fetch
Error from SVN, (220001): Item is not readable: Item is not readable
$ git branch -av
* master 54ab8bf init
</code></pre>

<p>So, the SVN branch is not apperaing!</p>

<p>If on step 3 I try to do this:</p>

<pre><code>$ cd /blabla/git_repo
$ svn mkdir --parents svn://localhost/GIT/trunk -m ""git import""
$ git svn init svn://localhost          &lt;--  **no ""-T"" flag here**
$ git svn fetch
Authentication realm: &lt;svn://localhost:3690&gt; 1d926320-a80a-43d5-9e77-9dc2a43fc4f0
Password for 'arsen': 
W: +empty_dir: GIT/trunk
r1 = 8d3e31cf67f29846660ef20faf3454005101e012 (refs/remotes/git-svn)
$ git branch -av
* master          18cbfbd init
  remotes/git-svn 8d3e31c git-svn-id: svn://localhost@1 1d926320-a80a-43d5-9e77-9dc2a43fc4f0
</code></pre>

<p>then everything goes OK, except that I can't push git repository into GIT svn project, I can push it only into svn root.</p>

<p>So, what am I doing wrong?</p>
","0","777855",""
"25254694","1394393","2014-08-12 01:04:14","28","10322","<git><git-svn><gitignore><msysgit><svnignore>","git svn show-ignore gives error ""command returned error: 1""","<p>I'm trying to migrate a project from SVN to git. This is the command I use:</p>

<pre><code>$ git svn clone http://oursvnserver/ --no-metadata -A ../authors-transform.txt --trunk=path/to/trunk --branches=path/to/branches --tags=path/to/tags . --username=mysvnusername --prefix=origin/
</code></pre>

<p>The current directory is the directory that I want to become a repository. <code>authors-transform.txt</code> is most definitely in the right location. The project uses the standard layout, but it does not exist at the root of the repository. (Unfortunately, someone long ago started the practice of just stuffing all projects into the same repository. That's why I specify <code>--trunk</code>, <code>--branches</code>, and <code>--tags</code>.) It seems to check out fine. Then I try to generate an ignore file and get this incredibly cryptic error:</p>

<pre><code>$ git svn show-ignore
config --get svn-remote.svn.fetch :refs/remotes/git-svn$: command returned error: 1
</code></pre>

<p>It appears to be running some other command in the process, so I made some guesses:</p>

<pre><code>$ git config --get svn-remote.svn.fetch :refs/remotes/git-svn || echo $?
1
$ git config --get svn-remote.svn.fetch :refs/remotes/git-svn$ || echo $?
1
</code></pre>

<p>So maybe I'm guessing right about what command it's calling? But that doesn't really help.</p>

<p>What does this error actually mean? What can I try to resolve it?</p>

<p>Using msysgit 1.9.4.</p>
","0","1394393","0"
"7278335","187584","2011-09-02 01:14:35","10","3627","<git><git-svn>","How do I use git-svn to merge changes from trunk to a branch in svn?","<p>I've seen people suggest to use git-svn to do the merge and commit it back to svn.</p>

<p>I'm looking for a good step by step guide.</p>

<ul>
<li>Is it worth the trouble or should I just use svn to do it.</li>
<li>Will people see I've used git and is there any meta data about the merge in svn?</li>
<li>Can I do a clone of trunk and 1 branch I select?</li>
<li>Do I need a full clone or can I import it from the point where the branch was made?</li>
</ul>
","3","187584","0"
"7277663","103934","2011-09-01 23:13:44","5","571","<git><git-svn>","git-svn: branch renamed in svn repository, how do I tell git-svn?","<p>I'm using git-svn to track an svn repository with several branches.  One of the server branches I've been working with has been renamed in the svn repository.  Git-svn doesn't seem to understand what's happened.  How can I tell git-svn what happened?</p>
","2","103934",""
"7280073","90033","2011-09-02 06:49:01","0","312","<git-svn>","Team using git/git-svn to share work and only occasional svn commits","<p>I am new to git but read this <a href=""http://martinfowler.com/bliki/VersionControlTools.html#MultipleVcs"" rel=""nofollow"">article</a> by Martin Fowler where he describes a setup where a team works using git/git-svn and only occasionally commit to the central svn repo. 
Can somebody point to an article or screen-cast (or off course answer how to do this) describing the workflow, commands and pitfalls?  </p>
","0","90033","0"
"7283049","391826","2011-09-02 11:56:03","2","2192","<git><git-svn><git-submodules>","Git submodule not updating from a git-svn repository","<p>I have a projectx which includes a git submodule </p>

<pre><code>/projectx/foo/bar/submodule
</code></pre>

<p>The submodule repository is itself a git-svn repo which tracks an svn repository.</p>

<p>In the standalone submodule repo, I've pulled in some new updates:</p>

<pre><code>git svn fetch
</code></pre>

<p>and I see some revisions come in. So I run:</p>

<pre><code>git svn rebase master
</code></pre>

<p>and when I call:</p>

<pre><code>git status
</code></pre>

<p>It all looks fine. So in the root of my projectx I run:</p>

<pre><code>git submodule update
</code></pre>

<p>and nothing happens. What am I doing wrong? I've definitely run:</p>

<pre><code>git submodule add
git submodule init
</code></pre>

<p>on the submodule, and when I run:</p>

<pre><code>git submodule status
</code></pre>

<p>I see the hash for its status.</p>

<p>So why does <code>git submodule update</code> not cause any update to happen?</p>
","0","391826","0"
"7307529","928782","2011-09-05 11:40:46","2","1344","<git><github><git-svn><git-annex>","git annex with bup","<p>Can any one tell me how to use git annex with bup. </p>

<pre><code>git annex initremote mybup type=bup encryption=none buprepo=example.com:/big/mybup
</code></pre>

<p>is not working for me.
if I type</p>

<pre><code>git annex
</code></pre>

<p>it will list all commands, but in this initremote command is not there. what could be the problem.</p>
","0","928782",""
"25785104","1190979","2014-09-11 10:29:16","0","86","<git><github><git-svn>","git know what commit number my branch is on","<p>In Git how can I know what commit number is my branch on?</p>

<p>Git status just shows the difference between the files</p>

<pre><code>  git status 
</code></pre>

<p>I want to know the commit number my branch is on</p>
","1","1190979",""
"7631661","202431","2011-10-03 06:26:20","5","427","<git><merge><git-svn><rebase>","git svn and working with private branches?","<p>new git user here. I want to use git, but i'm in an SVN environment.  From some books I've read and some simple experimenting, I've hit some troubling pitfalls and am hoping to get clarification on how to get starting without my colleagues wanting to kill me.</p>

<p>I want my workflow to be:</p>

<ul>
<li><p>a master git branch that stays in step with svn's trunk.</p></li>
<li><p>local git branches that i do my feature and bug work in.</p></li>
<li><p>I want to frequently bring the feature branches up to date with master.</p></li>
<li><p>When i'm ready I want to merge a feature branch in with master and commit that back to svn.</p></li>
</ul>

<p>Is this a typical workflow?</p>

<p>Initially I was using git merge to merge my master branch and feature branches. This led to all kinds of conflicts and problems.  I later read to avoid using git merge alltogether and stick with git rebase.  Would the following git commands, then, be correct?</p>

<ul>
<li>git svn rebase (to pull down latest changes to master)</li>
<li>git checkout -b myAwesomeFeature (to make a feature branch to work on)</li>
<li>... do some work, make commits to my feature branch</li>
<li>&lt;&lt;&lt; TIME GOES BY >>></li>
<li>git checkout master</li>
<li>git svn rebase (to pull down new stuff)</li>
<li>git checkout myAwesomeFeature</li>
<li>git rebase master ( to get svn trunk's stuff into my feature branch)</li>
<li>&lt;&lt;&lt; READY TO PUSH MY FEATURE BRANCH >>></li>
<li>git checkout master</li>
<li>git rebase myAwesomeFeature (to fast forward masters head to get my feature stuff in)</li>
<li>git svn dcommit (to finally publish)</li>
</ul>

<p>Any advice or suggestions to help an aspiring git user live in an svn world would be really appreciated.  Thanks</p>
","0","202431","0"
"25805698","356895","2014-09-12 10:02:06","1","29","<git><svn><git-svn>","How to avoid subfolder creation when using git svn?","<p>I am trying to clone the <a href=""https://code.google.com/p/achartengine/source/checkout"" rel=""nofollow"">achartengine subversion repository</a> running the following command:</p>

<pre><code>git svn clone http://achartengine.googlecode.com/svn -s achartengine
</code></pre>

<p>However, after process finished a unneeded subfolder is created:</p>

<pre><code>├── achartengine
│   └── achartengine
│       ├── AndroidManifest.xml
│       ├── assets
│       ├── bin
│       ├── build.xml
│       ├── demo
│       ├── extra
│       ├── lib
│       ├── lint.xml
│       ├── pom.xml
│       ├── project.properties
│       ├── res
│       ├── src
│       └── test
└── .git
</code></pre>

<p>Is there a way to avoid the subfolder creation?</p>
","0","356895",""
"7642996","434414","2011-10-04 03:31:47","14","8130","<git><svn><tags><git-svn><tortoisegit>","Using git-svn, how do I dcommit tags?","<p>I was using Git to retain a history of my project locally.  I was later asked to commit the entire git project into a remote, empty svn project folder (the usual trunk, tags, branches structure, in that case and spelling).  I was able to commit to the trunk perfectly fine, but none of the tags seemed to have been dcommitted.  Is there a way to commit tags, preferably through a single command?</p>

<p>P.S. I am using TortoiseGit, but command line is fine, too.</p>
","0","434414","0"
"7647841","663028","2011-10-04 12:25:31","1","223","<git><git-svn><revision-history>","Updating git svn info/revision number for git repo (A) cloned from git-svn repo (B)","<p>Okay, I am <em>not</em> asking how to synch the changes back and forth between the two repos (I am able to do that via normal push and pull), but a way to update the git svn info (particularly the revision number) for (A) from (B)</p>

<p>Currently I can do that not-so-elegantly by taking the first line with ""git-svn-id:"" from the output of <code>git log</code>, but looking for better ideas that possibly address the root cause that I may not be aware of..</p>

<p>Update:</p>

<p>For the revision number I can obtain that via <code>git log --grep=git-svn-id: -1</code> and use of filterchains in ant, so my immediate problem is solved. </p>

<p>As for the question itself, based on information from <a href=""http://blogs.coreboot.org/blog/2010/08/27/git-svn-info-unable-to-determine-upstream-svn-information-from-working-tree-history/"" rel=""nofollow"">here</a>, it seems that there is no point in doing what I want to do, so I may have to close this question after some time.</p>
","6","663028",""
"7672131","111786","2011-10-06 08:57:39","2","699","<git><svn><git-svn>","When I do ""git svn rebase"" it fetches the svn author names instead of the git author names","<p>I have used <code>git svn clone -A authors.txt ...</code> to clone an svn repository.
My <code>authors.txt</code> had entries like this:</p>

<pre><code>svnid = Firstname Lastname &lt;Firstname.Lastname@example.com&gt;
</code></pre>

<p>That worked fine and in <code>git log</code> the authors look like:</p>

<pre><code>Author: Firstname Lastname &lt;firstname.lastname@example.com&gt;
</code></pre>

<p>Now when I do <code>git svn rebase -A authors.txt</code> the authors for the new entries look like this:</p>

<pre><code>Author: svnid &lt;svnid@12345678-1234-1234-1234-123456789abc&gt;
</code></pre>

<p>I used the accepted answer from  ""<a href=""https://stackoverflow.com/questions/392332/retroactively-correct-authors-with-git-svn"">Retroactively Correct Authors with Git SVN?</a>""
  to fix it, but after the next <code>git svn rebase -A authors.txt</code> the authors are destroyed again. </p>

<p>What can I do to preserve the proper author names?</p>

<p><strong>EDIT:</strong> I'm using git version 1.7.6.msysgit.0
on Windows obviously.</p>
","3","111786","0"
"63041393","1055644","2020-07-22 19:00:27","0","68","<git><github><git-svn>","Do i need to git checkout a remote branch created from a svn conversion before pushing to github","<p>I'm converting a 10GB svn repo to a private github.com repo.  The <code>git svn clone</code> command worked and left me with 66 remote branches, 10 of which I need to maintain and sync to github until we can complete the cutover.</p>
<p>What do I need to do to push the git repo to github including those 10 specific branches?</p>
<p>Github has said I cannot push the repo with one push because of how large it is.  They said to use git log, pick a sha and push them in batches like this.</p>
<pre><code>git log --pretty=oneline 
git push &lt;remotename&gt; &lt;commit SHA&gt;:&lt;remotebranchname&gt;
</code></pre>
<p>Since that syntax appears to be picking out specific commits by their sha code how do I ensure branches get pushed as well?</p>
<p>After I complete this initial refspec push dance, will the standard <code>git svn --fetch all</code> followed by <code>git push --all</code> maintain this repo?</p>
","0","1055644",""
"7930550","","2011-10-28 14:26:40","1","182","<git><svn><git-svn>","How to push a git repo to an existing SVN repo while maintaining history?","<p>I have a git repo of a project that was started before an official SVN repo had been established. The git repo has a directory structure of something like:</p>

<pre><code>docs/
src/
  herp/
  derp/
</code></pre>

<p>I want to push this into the existing SVN repo (in which others are working), so that the directory structure in SVN would look something like:</p>

<pre><code>branches/
tags/
trunk/
  ... (other stuff) ...
  fizzbot/
    docs/
    src/
      herp/
      derp/
</code></pre>

<p>(since fizzbot is essentially a separate sub-project)</p>

<ol>
<li>I imagine this would be doable using git-svn, but I don't know exactly how.</li>
<li>If I can do #1, is there a way to do it while preserving the history of all the revisions I made in the git repo?</li>
</ol>

<p>Thanks in advance.</p>
","3","","0"
"7932092","3191","2011-10-28 16:31:04","1","714","<git><svn><git-svn>","Can I add a string to my commit messages before sending them to SVN in git-svn?","<p>My org has some silly requirements that you must put ""admin"" at the end of every SVN commit message in order to get around some decision made by the SVN gatekeepers that every commit should have an associated bug number. (Everyone on the team bypasses this requirement similarly.)</p>

<p>I'm trying to use git SVN, but I'd like to avoid putting ""admin"" at the end of my frequent git-svn commits.</p>

<p>Is there a way to have git SVN do this for me?</p>
","0","3191",""
"7943394","127589","2011-10-30 05:02:48","5","1018","<git><git-svn><egit>","egit and git unstaged files show different  status","<p>i use git svn fetch svn repo,and do clone->branch->rebase->merge->dcommit step.with eclipse egit and cygwin client,do some days developing all is ok.</p>

<p>but one day ,after a merge/dcommit step,i found eclipse egit stage view status is different from git status in cygwin command line.when some files unstaged changes in eclipse,cygwin 'git status' show nothing changes;if commit with egit in elcipse,the cygwin command 'git status' show the  unstaged files changed that what just commited with egit.and if commit changes with cygiwn git client,egit show the same staged files changed.the problom files is always some files.</p>

<p>i've use blow method,but useless
git reset --hard.
reclone the svn repo .importing new cloned repo from svn to eclipse project,it show the file changed at start,and always those files.</p>

<p>anybody help!!</p>
","1","127589",""
"44619435","2585092","2017-06-18 20:52:03","-1","239","<git><svn><github><git-svn>","Possible to migrate an SVN repo to git that is a local copy only?","<p>I have a clone of an SVN repo on my machine for which the SVN server is unreachable. The program used for cloning is Tortoise SVN for Windows.</p>

<p>Is there any way to import the commit history of the repo into a git repository on github?</p>

<p>I tried</p>

<pre><code>svnadmin dump repo/.svn &gt; svn.dump
</code></pre>

<p>Resulting in</p>

<pre><code>svnadmin: E165005: Expected repository format '3' or '5'; found format '12'
</code></pre>

<p>Which seems to be misleading, meaning I cannot dump that copy. But are there options other than dumping?</p>
","1","2585092","0"
"7977982","31610","2011-11-02 09:19:33","0","1024","<git><git-svn>","How should I switch to trunk after I cloned an entire SVN repository with git-svn?","<p>I cloned an entire SVN repository ( including all the branches ), using git-svn. The problem is, if I run <code>git branch</code> I don't get anything back. If I run <code>git branch -a</code> I get:</p>

<pre><code>git-svn
</code></pre>

<p>What should I do now to start working on SVN's <code>trunk</code>?</p>

<p>EDIT: The repo is organized in the standard layout, but when I pulled I did it like:</p>

<pre><code>git svn clone http://server/repo ( without any other options )
</code></pre>

<p>and not like</p>

<pre><code>git svn clone http://server/repo/trunk
</code></pre>

<p>My gitconfig looks like this:</p>

<pre><code>[svn-remote ""svn""]
    url = svn_url
    fetch = :refs/remotes/git-svn 
</code></pre>
","1","31610",""
"7982737","584676","2011-11-02 15:15:33","0","78","<git><svn><git-svn>","Is it possible to add a branch to a git svn repository that was cloned from the Subversion repository's trunk?","<p>I have a git-svn repository I had originally cloned from an svn repo's trunk, like so:</p>

<pre><code>http://server/svn/MxProject/trunk
</code></pre>

<p>Since I cloned only the trunk and didn't grab the branches directory, is there a way I can access the branch without doing a full clone?</p>
","1","584676",""
"8046628","131433","2011-11-08 06:13:23","2","337","<git-svn>","what's pending in git svn?","<p>I'd like to use git rebase -i to squash the commits that I have pending before dcommitting. It's not really obvious to me, however, which commits are hanging out there. Is there a git svn option I'm missing, or some other recipe?</p>
","3","131433",""
"8048584","475850","2011-11-08 09:55:06","693","726906","<git><git-svn>","See changes to a specific file using git","<p>I know that I can use the <code>git diff</code> command to check the changes, but, as far as I understood, it is directory based. This means it gives all the changes of all files on the current directory.</p>

<p><em>How can I check only the changes in one specific file?</em> Say, I have changed files <code>file_1.rb</code>, <code>file_2.rb</code>, ..., <code>file_N.rb</code>, but I am only interested in the changes in the file <code>file_2.rb</code>. How do I check these changes then (before I commit)?</p>
","3","475850","0"
"8051991","439592","2011-11-08 14:32:44","31","7350","<git><directory><git-svn>","How to have git-svn take care of empty directories gracefully?","<p>I am very happily using git-svn, though I noticed that git has a different approach when it comes to empty directories as SVN. I need a way to get around the following particular situation:</p>

<p>I have in my project's SVN repository several empty directories that belong in there and should not be touched. Due to some refactoring, I had to delete another directory that used to have files in it. <code>git svn dcommit</code> deletes the files, but leaves the directory. It strikes me that git's ignorance of empty directories is resulting in inconsistency in my SVN repo. </p>

<p>I would like to have that particular directory removed from my SVN repository. Can git-svn do that? And if not, how should I be doing that? (And - eventually - how can I do that while committing other files with them as well in the same changeset?)</p>
","0","439592","0"
"8261112","261718","2011-11-24 18:08:50","3","1002","<git><git-svn>","After ""git svn clone"", I still don't have fantastic branch-merging commit?","<p>After I did the <strong>git svn clone --stdlayout ...</strong>, everything looks good and I have converted remote branches. But when <strong>git log --graph</strong>, I don't see any branch merging graph. Is it normal?</p>
","1","261718","0"
"8262337","1064612","2011-11-24 20:48:33","2","638","<git><active-directory><git-svn>","Unable to perform git-svn clone on a sub-repository requiring AD authentication","<p>I am trying to use git-svn via mysysgit in front of an entreprise subversion repository. This svn repo uses the http protocol, and requires an Active Directory authentication. I can't read on the entire content of the repo, I am just authorized to see my team's projects.</p>

<p>So I am trying the following command :</p>

<p>$ git svn clone <a href=""http://enterprise:12345/svn/my_team/my_project1/module1"" rel=""nofollow"">http://enterprise:12345/svn/my_team/my_project1/module1</a> module1 -s --prefix=svn/</p>

<p>where http...my_team is the base url I can access usually with an svn client.</p>

<p>And here is the response from Git :</p>

<p><em>Authentication realm <a href=""http://enterprise:12345"" rel=""nofollow"">http://enterprise:12345</a> Subversion repository needs authentication against AD
Password for 'yanflea':</em></p>

<p>At this step I enter my password and… nothing relevant happens. It keeps warning me about the needed AD authentication, and asks me again and again for my username and password. </p>

<p>I read on several forums that in such a case, the option --no-minimize-url was required. I tried to add it in the command but it didn't change anything. I am surprised because people who explicitly encountered this issue had a more verbose warning than me. Something like </p>

<p><em>Using higher level of URL: path-to-repo/myrepo/myproject => path-to-repo/myrepo</em>
(http://stackoverflow.com/questions/1453416/git-svn-clone-checkouts-wrong-repo)</p>

<p>which indicates clearly that the --no-minimize-url could change something. In my case, first I don't have such a message, and second, the short url seems to be used whatever I add --no-minimize-url option or not. I really don't get it. Any advice is more than welcome.</p>

<p>Yannick. </p>
","4","1064612",""
"8078467","125804","2011-11-10 11:00:00","1","555","<git><svn><git-svn><appharbor>","Pushing an existing svn repository to git","<p>I'm using SVN and I'm not planning to migrate to Git for now. I'd like to try out AppHarbor but currently you must use Git to deploy code to AppHarbor.</p>

<p>I'd like to continue using SVN but push to AppHarbor's git repository from time to time. Is there an easy way to achieve this?</p>
","1","125804",""
"8111250","989105","2011-11-13 11:37:22","6","566","<git><git-svn>","git svn error after change the svn repo address","<p>I cloned a repo using <code>git svn -s clone</code> first from</p>

<pre><code>svn+ssh://savannah.psi.ch/afs/psi.ch/project/meg/svn/elog
</code></pre>

<p>But the repo laterly has been changed to</p>

<pre><code>svn+ssh://svn@savannah.psi.ch/repos/meg/elog
</code></pre>

<p>Then I edit the <code>.git/config</code> file, just change the line below <code>[remote-svn ""svn""]</code>. Then <code>git svn fetch</code> works fine, but any other <code>svn</code> commands, such as <code>svn info</code>, <code>svn rebase</code>, fail in the error:</p>

<blockquote>
  <p>Unable to determine upstream SVN information from working tree history</p>
</blockquote>

<p>I searched stack overflow, someone got the same error before, but the answer does not work for me. What should I do after changing the svn-repo address?</p>

<p>Platform: archlinux; git: 1.7.7.3; svn: 1.6.17</p>
","0","989105",""
"26133722","883115","2014-10-01 03:36:57","2","594","<git-svn>","git svn fetch (after clone) getting stuck","<p>I've cloned a large SVN repository with many branches and tags. ""git svn fetch"" is stalling when it hits a certain commit where someone goofed and copied the root of the repository to a new tag instead of copying trunk. So the tag itself contains trunk, tags, and branches.</p>

<p>I tried simply excluding paths under such tags via ""ignore-paths"", and I can tell that this filter is working because when ""fetch"" reaches the problem revision, instead of spewing every file (in every branch and tag) that it's following, it just sits there for hours.</p>

<p>tcpdump shows lots of data coming from the server. du shows the .git folder staying exactly the same size.</p>

<p>Maybe I need to bypass this revision (and others like it) more aggressively? How? I'd prefer not to resort to --no-follow-parent. Thanks.</p>
","0","883115",""
"26139351","3766533","2014-10-01 10:33:22","1","941","<git><svn><git-svn>","git svn clone ignores files","<p>I'm trying to migrate my svn repository to git repository using Atlassian tutorial (<a href=""https://www.atlassian.com/git/tutorials/migrating-overview"" rel=""nofollow"">https://www.atlassian.com/git/tutorials/migrating-overview</a>) and I'm failing to checkout my svn repository correctly. After cloning, it has all the history available when using <code>git log</code> but I don't see any of the files. I've tried to checkout one of the remote branches with <code>git checkout -b trunk remotes/trunk</code> but still no files on newly created branch trunk.</p>

<p>The migration script beginning looks like this:</p>

<pre><code>#!/bin/sh
#$1 - remote svn repo
#$2 - local git repo name
java -jar svn-migration-scripts.jar authors $1 &gt; authors.txt
git svn clone --stdlayout --authors-file=authors.txt $1 $2
</code></pre>

<p><strong>What I've figured out</strong></p>

<p>I can get hold of files without history by using git svn command:</p>

<pre><code>git svn clone -rHEAD $1 $2
</code></pre>

<p>The files checked out with this command will have svn-like structure (<code>trunk</code>, <code>branches</code>), so that's not what I'm looking for.</p>

<p><strong>Another try...</strong></p>

<p>I've tried using <code>svn2git</code> from GitHub, but it's using the same mechanisms, so it also fails... The command:</p>

<pre><code>svn2git https://svn/xxx --trunk trunk/src --branches branches --notags --authors ../authors.txt 
</code></pre>

<p>Output:</p>

<pre><code>Checked out HEAD:
https://svn/xxxx r149793
</code></pre>

<p>Still no files, only <code>.git</code> folder. I've tried fetching, pulling etc.</p>

<p><strong>Another interesting observations</strong></p>

<p>I've found one weird repository. There is folder structure like this:</p>

<pre><code>* branches
  * as usual...
* tags
  * as usual...
* trunk
  * src
    * src
    * pom.xml
</code></pre>

<p>The output is as follows:</p>

<pre><code>svn2git https://svn/xxx --trunk trunk
svn2git https://svn/xxx --trunk trunk/
</code></pre>

<p>Doesn't work...</p>

<pre><code>svn2git https://svn/xxx --trunk trunk/src
</code></pre>

<p>Works. That's at least very weird.</p>
","2","3766533",""
"26148941","61624","2014-10-01 19:20:45","3","845","<git><performance><git-svn><git-log>","This git log command is takes a longer to run the more I use it, how do I make it run faster?","<p>I happen to be using the <code>git svn</code> bridge, I'm not sure if that's relevant.  In my "".gitconfig"" I have an alias for <code>git lg</code> that's defined like this:</p>

<pre><code>[alias]
        lg = log --max-count=100 --branches --color --graph --pretty=format:'%Cred%h%Creset - %C(bold blue)&lt;%an&gt;%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)' --abbrev-commit
</code></pre>

<p>When I first cloned this repository, running <code>git lg</code> would be near instantaneous, but this command seems to get slower and slower as time goes by.  Now <code>git lg</code> takes at least 30 seconds.  What is causing this to be slow and how can I make it run faster?</p>
","4","61624","0"
"8253086","506613","2011-11-24 06:42:23","1","2030","<git><git-svn>","Unable to determine upstream SVN information from HEAD history in some of git-svn commands","<p>I have a problem with <code>git svn</code> </p>

<p>For this one, it occurs when try to <code>git svn dcommit</code></p>

<pre><code>Unable to determine upstream SVN information from HEAD history.
Perhaps the repository is empty. at C:\Program Files (x86)\Git/libexec/git-core\git-svn line 780.
</code></pre>

<p>I also have a problem with <code>git svn info</code> which show the same error message.</p>

<p>I try many ways as another topic provided but it never work. :(</p>

<p>I already try <code>git fsck</code>, <code>git svn rebase -l</code> also.</p>

<p>My repository is about 20,000 revisions. I fetched from <a href=""http://localhost"" rel=""nofollow"">http://localhost</a> which sync from the original url, and after that, I change the url to the original one (in .git/config), after change I can run <code>git svn fetch</code> without problem. after that I follow <a href=""http://theadmin.org/articles/git-svn-switch-to-a-different-a-svn-url/"" rel=""nofollow"">this blog</a>.</p>

<p>The problem still occurs.</p>
","5","506613",""
"8592417","200295","2011-12-21 15:43:27","1","134","<git><git-svn>","git-svn : prevent commit if svn rebase is needed","<p>Two people are running git locally and using git-svn to sync with a remote master SVN server.</p>

<p>Person A does an SVN REBASE and modifies their local git file.
Person B also does a SVN REBASE and modifies the same file locally in their git for a different issue.</p>

<p>Person B commits using GIT SVN DCOMMIT.</p>

<p>Person A commits using GIT SVN DCOMMIT but since they are missing the Person B commit, the Person B's commit is rolled back.</p>

<p>Is there any way to flag GIT SVN DCOMMIT if the remote SVN server needs to be rebased?</p>
","0","200295",""
"8639777","711628","2011-12-26 23:05:58","2","353","<version-control><tortoisesvn><git-svn><issue-tracking>","git svn dcommit bug id","<p>One of the new features of SVN is issue tracker integration. These let you add commit hooks to make SVN parse log messages for bug or issue numbers, and relate them to your issue tracking system. </p>

<p><img src=""https://i.stack.imgur.com/sHe5J.jpg"" alt=""enter image description here""></p>

<p>I'm using git-svn to work with SVN through git.
Is three any possibilitty to make commits with bug id, using </p>

<pre><code>git svn dcommit
</code></pre>

<p>? Many thanks.</p>
","0","711628",""
"8653531","731262","2011-12-28 08:27:53","3","6000","<git><git-svn><rhel>","Installing/building git-svn for RHEL 6","<p>I do not have access to the RHEL6 repo, so what wouold be the best approach to building and/or installing the git-svn tool on RedHat Enterprise Linux 6?</p>

<hr>

<p>Managed to install git &amp; git-svn 1.7.9 by uninstall the existing one (yum erase git) and make installing the latest one from source. Worked on 64-bit too.</p>
","1","731262",""
"8690238","277186","2011-12-31 19:52:45","1","3450","<git><git-svn><githooks><gitolite>","can't push with gitolite - ENV GL_RC not set","<p>I've got a similar problem to this post here: <a href=""https://stackoverflow.com/questions/5233058/gitolite-push-error-remote-env-gl-rc-not-set"">gitolite push error -&gt; remote: ENV GL_RC not set</a></p>

<p>I've installed gitolite successfully as a non-root method with no warnings or errors.  Hoever I can't push since I get ENV GL_RC not set errors.  (If I try to manually assign that in my ENV I get a load of trouble.)</p>

<p>I can clone if I use:</p>

<pre><code>git clone git@server:repositories/gitolite-admin
</code></pre>

<p>The solution from the link above is to use the following which I can not do.  I can't clone if I use:</p>

<pre><code>git clone git@server:gitolite-admin
</code></pre>

<p>That renders a error of: </p>

<pre><code>Cloning into gitolite-admin...
fatal: 'gitolite-admin' does not appear to be a git repository
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I can't do a package install since I'm on Ubuntu 10.04 LTS which doesn't have it in its repository list.</p>

<p>I've looked through the documentation from <a href=""http://sitaramc.github.com/"" rel=""nofollow noreferrer"">http://sitaramc.github.com/</a> however I can't seem to get it.  Any ideas how I can resolve this?</p>
","0","277186",""
"8451480","21322","2011-12-09 20:44:04","14","10518","<git><svn><git-svn>","""RA layer request failed: REPORT request failed"" during git-svn","<p>I've been trying to Git clone a Google Code SVN repository using the following command:</p>

<pre><code>git svn clone --stdlayout https://wtorrent-project.googlecode.com/svn/ wtorrent-git
</code></pre>

<p>It gets as far as r11, then gives the following error message:</p>

<pre><code>r11 = 6e04c0fb14aa3f6ab4d871eeed4a0526dc0e54d8 (refs/remotes/trunk)
RA layer request failed: REPORT request failed on '/svn/!svn/vcc/default': REPORT
of '/svn/!svn/vcc/default': 200 OK (https://wtorrent-project.googlecode.com) at
C:\Apps\msysgit/libexec/git-core\git-svn line 5653
</code></pre>

<p>This error message was generated by the latest msysgit (v1.7.8), but I get the same error message from my Gentoo box too.</p>
","1","21322","0"
"36322398","1142129","2016-03-31 00:57:49","0","127","<git><git-svn><sourcetree>","How to push two git branches to seperate svn repositories？ Especially using sourcetree","<p>I have a local git repositories which initialized with </p>

<pre><code>git svn init http://abc.xxx/svn/trunk/topic_A
</code></pre>

<p>And then I create a local branch topic_B, and want to  put it under the svn URL <a href=""http://abc.xxx/svn/branches/topic_B"" rel=""nofollow"">http://abc.xxx/svn/branches/topic_B</a>. The svn branch is created with svn client.
So I don't need to create svn branch in git.</p>

<p>How should I modify the .git/config file to add this?</p>

<p>I have tried to add with:</p>

<pre><code>[svn-remote ""topic_B""]
url = https://abc.xxx/branches/topic_B/
fetch = :refs/remotes/topic_B

[branch ""topic_B""]
remote = .
merge = refs/remotes/topic_B
</code></pre>

<p>However when using git from the console, <code>git commit</code> always choose the trunk URL as the push destination？</p>

<p>And in sourcetree, the GUI seems to have difficulty to fetch the newly added remote svn branch. </p>

<p>And it seems there is noway you can change the push destination of subversion.</p>

<p>Any one can figure out a correct way? Thanks a lot!</p>
","0","1142129",""
"8459715","316847","2011-12-10 20:41:32","1","361","<git><svn><cruisecontrol.net><git-svn><appharbor>","How to get msysgit to clone a repository where I want it to go?","<p>New to git, not new to svn.</p>

<p>Attempting to clone an svn repository to push to appharbor as part of a build process, per something like <a href=""https://stackoverflow.com/questions/8078467/pushing-an-existing-svn-repository-to-git"" title=""this thread"">this thread</a>.</p>

<p>However, msysgit always works from whatever directory the app starts in it seems.</p>

<p>I understand </p>

<pre><code>git svn clone --stdlayout &lt;my URL&gt;
</code></pre>

<p>but is there an optional parameter to tell msysgit where to put this clone in my directory structure?</p>

<p>Similarly, is there a way to work the location into the ""rebase"" command?</p>

<p>Can't seem to find a reference for msysgit <code>git svn clone</code> syntax and hoping this is just a philosophical misunderstanding on my part about how git/msysgit works.</p>

<p>Thanks for any help!</p>
","0","316847",""
"8459972","316847","2011-12-10 21:20:34","2","2676","<git><svn><git-svn><msysgit>","""git svn clone"" only clones trunk? (Expected to clone entire repository)","<p>I have a SVN repository that looks something like this:</p>

<ul>
<li>branches
<ul>
<li>...various branches (none yet)</li>
</ul></li>
<li>tags
<ul>
<li>...various tags (none yet)</li>
</ul></li>
<li>trunk
<ul>
<li>common</li>
<li>doc</li>
<li>extlib</li>
<li>proj</li>
</ul></li>
</ul>

<p>I run:</p>

<pre><code>git svn clone --stdlayout https://[SVN URL]/svn/MyProject ""C:\_build\WorkingFolders\Myproject_gitcopy""
</code></pre>

<p>The command appears to execute successfully.</p>

<p>I expect to see the ""branches"", ""tags"" and ""trunk"" folder in the cloned directory since we cloned the entire repository. Instead, I see ""common"", ""doc"", ""extlib"", and ""proj"".</p>

<p>It appears that git has only cloned the trunk of my repository. Does anyone know why this might be, and how to fix it? Or am I just seeing it incorrectly?</p>

<p>Thanks in advance for any help!</p>
","1","316847",""
"26252584","1000738","2014-10-08 08:41:34","1","481","<jenkins><git-svn>","Set up git-svn proxy with jenkins","<p>Ok, this is kinda related to a previous question i asked; <a href=""https://stackoverflow.com/questions/15095561/cannot-do-git-svn-fetch-behind-proxy"">Cannot do git-svn fetch behind proxy</a></p>

<p>But this time I need an automated jenkins script that does <code>git svn fetch</code> to a repository that's outide our proxy. </p>

<p>As I found out in the other question, git-svn uses the proxy settings that's specified in the file <code>servers</code>. And <code>servers</code> is located at ~/.subversion. </p>

<p>Jenkins is set up on a machine running Windows server 2008, and I've searched for every <code>servers</code> file on the machine and modified them all, but I still isn't able to do <code>git svn fetch</code> without failing at the proxy. </p>

<p>I've tried to put a <code>.subversion</code> folder in the workspace, since ~ evaluates to the current workspace (I think) in jenkins, but that didn't work either. </p>

<p>Any other ideas?  </p>
","0","1000738","0"
"26253707","4120529","2014-10-08 09:39:03","1","66","<git><svn><migration><git-svn>","Migrate SVN repo with history over two projects to git","<p>We have the problem that we moved several files from one project to another in our svn repo and we want to migrate the new project with full history to git.</p>

<p>SVN looks something like this:</p>

<pre><code>|- project-old
   |- branches
   |- tags
   |- trunk (deleted)
       |- file.txt (moved to project new)
|- project-new
   |- branches
   |- tags
   |- trunk
       |- module
          |- file.txt 
</code></pre>

<p>Where we have moved all files from the old project to the new (in sub-folders).</p>

<p>When we only migrate project-new, the history in git starts when the file was moved to project-new and everything is lost before.
Is there a way to preserve to complete history of the files over both (svn) projects?</p>
","4","4120529","0"
"36336037","745903","2016-03-31 14:17:58","2","17","<git><svn><git-svn><svn-merge>","Can I make git-svn aware of an SVN merge?","<p>I use git to work on an existing SVN repository, which has now &ndash; conceptually &ndash; the following history:</p>

<pre><code>A  -&gt;  B  -&gt;  C  -&gt;  D  -&gt;  E  -&gt;  F  -&gt;  G  -&gt;  H  __
        \                                ➚             trunk
         ➘                              /
           M  -&gt;  N  -&gt;  O  -&gt;  P  -&gt;  Q  ___
                                              feature
</code></pre>

<p>Of course, <em>really</em> SVN doesn't have branches that one could merge, i.e. <code>G</code> is actually just a huge commit which reintegrates all the changes from <code>B..Q</code> into <code>trunk</code>.</p>

<p>So, right now, my git mirror looks just like this:</p>

<pre><code>A  -&gt;  B  -&gt;  C  -&gt;  D  -&gt;  E  -&gt;  F  -&gt;  BMNOPQ  -&gt;  H  __
        \                                                    trunk
         ➘                              
           M  -&gt;  N  -&gt;  O  -&gt;  P  -&gt;  Q  ___
                                              feature
</code></pre>

<p>Unlike svn though, git <em>has</em> proper merging, and could represent the history much clearer.</p>

<p>Is there some way to get the layout to look like it should in git &ndash; i.e., having the <code>feature</code> commits as explicit ancestors of <code>trunk</code> &ndash; while still allowing all new work (i.e. <code>dcommitting</code>) to be handled just like now?</p>
","0","745903","0"
"8472599","47278","2011-12-12 10:02:13","2","84","<svn><repository><git-svn>","Is it safe to delete SVN repositories after switching to Git via git svn clone?","<p>I recently changed some repositories over to Git from SVN by using git svn clone and then setting up the repository.  With a full switch to Git, is it necessary to retain the original SVN repository at all or is it safe to delete it?</p>
","1","47278",""
"8483724","131433","2011-12-13 02:44:47","0","200","<git><git-svn>","new code preserved on git branch, how to merge it back to trunk","<p>Sequence:</p>

<ol>
<li>commit some code on trunk</li>
<li>discover that it's got a nasty problem.</li>
<li>make a branch</li>
<li>delete code on trunk (deleting entire files)</li>
<li>fix code on branch</li>
</ol>

<p>Now I want to bring the whole business back onto the trunk. A merge won't do it, I think. What will?</p>
","5","131433",""
"26279367","140925","2014-10-09 13:14:21","2","52","<git><svn><git-svn><keyword-expansion>","How to make git-svn act like the keyword expansion of SVN?","<p>Git has limited keyword expansion capabilities. I know that I should write some scripts that actually do the expansion, because git itself won't. Right now I'm not that worried about the expansion actually being done.</p>

<p>My problem is that I have to work with an SVN repository and I would like to use it with git-svn. However, this specific SVN repository (that I have no control over) has some pre-commit hooks set which requires the files having keyword expansions.</p>

<p>How can I at least trick SVN to believe that I have those keyword expansions set?</p>
","0","140925","0"
"36396216","2944265","2016-04-04 06:52:11","0","275","<git><svn><git-svn>","git-svn HEAD differs from master","<p>Sometimes I end up in following state, where the HEAD is not to be shown on the same commit as the master. </p>

<p>I suppose the HEAD must be checked out and following commits must go to HEAD.   But how do I level both pointer on the same commit?</p>

<p><a href=""https://i.stack.imgur.com/eJzHP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eJzHP.png"" alt=""enter image description here""></a></p>
","4","2944265",""
"8537334","304364","2011-12-16 16:45:24","1","749","<git><git-svn><git-merge><git-patch>","git merge between different repositories","<p>I created a repository with git-svn from a big svn repository (git svn clone).
I've several local commits in my git repository that I don't need to push to svn but I will need to get updates from it.</p>

<p>Now I realized that I don't need the entire svn history in my local repository, since it's using too much space (some Gb) and that I should have used the -r option in the clone command to select a starting point.</p>

<p>I'd linke to start over with a new repository and then merge all the local commits from the old repository, but I'm not sure there is a simple way to do this.</p>

<p>The situation is this:</p>

<p>log of the old repository:</p>

<ul>
<li>local commit 10</li>
<li>local commit 9
...</li>
<li>local commit 1</li>
<li>svn revision X</li>
<li>svn revision X-1
...</li>
<li>svn revision 1</li>
</ul>

<p>the new repository has just one commit, corresponding to the contend of the revision X of the svn repository.</p>

<p>I tried to use format-patch and apply commands but I'm not sure on how to do this.</p>

<p>Is there a way to do what I need?</p>

<p>Thanks for any help</p>
","0","304364",""
"52475096","8132066","2018-09-24 08:12:16","1","282","<git><svn><version-control><git-svn>","git svn - ""Couldn't find revmap"" - too long path with repeated directories","<p>I use git-svn to track and work on multiple svn branches using git. I use following configuration in <code>.git/config</code> file:</p>

<pre><code>[svn-remote ""svn""]
    url = https://example.com/svn/some-dir/project-name/
    fetch = trunk:refs/remotes/svn-trunk
    fetch = branch/Topic:refs/remotes/svn-topic
</code></pre>

<p>This tracks two branches, trunk sometimes merged into the topic and <strong>usually</strong>, it works just fine. But with <strong>one, particular svn repository</strong>, <code>git svn fetch --fetch-all</code> produces following error: <code>Couldn't find revmap for https://example.com/svn/some-dir/project-name/some-dir/project-name/trunk</code>. And, of course, in merges are not reflected in git history.</p>

<p><strong>The main, primary problem:</strong> obviously, the path is wrong - ""<code>some-dir/project-name/</code>"" is repeated twice. But as I wrote, for in-house svn, this works just fine.</p>

<p>So, what's causing this problem and how can I fix it?</p>

<p>I tried to change configuration to following:</p>

<pre><code>[svn-remote ""svn""]
    url = https://example.com/svn/
    fetch = some-dir/project-name/trunk:refs/remotes/svn-trunk
    fetch = some-dir/project-name/branch/Topic:refs/remotes/svn-topic
</code></pre>

<p>In this case, the <code>git svn fetch --fetch-all</code> command produces following error: <code>W: Item is not readable: Item is not readable at /mingw64/share/perl5/site_perl/Git/SVN.pm line 153.</code>.</p>

<p>As a workaround, I use <code>git replace --graft</code> (and modify <code>.git/refs/remotes/svn-topic</code> file accordingly) to manually keep merge history, but it's obviously hack.</p>

<p><strong>My environment:</strong></p>

<ul>
<li>Windows 10 64 bit</li>
<li>git version 2.14.2.windows.3</li>
<li>svn: unknown (it's not under my control)</li>
</ul>
","0","8132066",""
"9148834","13627","2012-02-05 11:26:34","2","218","<git><svn><git-svn>","git-svn - cloned a single branch, now dcommit to another branch?","<p>I have been using git-svn to work remotely on a spike for a new feature. Now I want to commit my changes to SVN, but on a <em>different SVN branch than the one I first cloned</em>. How do I do that ? </p>

<p>The original branch has changed, and I am not ready to merge the two. I would like to create a new SVN branch from the original branch, and commit the changes I have in git.</p>

<p>I have a shallow clone of just the one SVN branch:</p>

<pre><code>git svn clone -r:HEAD svn://***/branches/main
git branch MySpike
git checkout MySpike
// Did some work, a lot of commits.
</code></pre>

<p>How do I commit my changes back to another SVN branch ? Is it possible ? </p>
","1","13627",""
"52548138","1483620","2018-09-28 04:08:07","0","450","<git><bitbucket><git-svn>","Moving branches from svn to git","<p>I have 2 branches in SVN - trunk and release(branches from trunk).
The intention is to migrate them into a SINGLE repository in GIT.</p>

<pre><code>SVN(trunk)-----&gt;GIT(master)
SVN(release)----&gt;GIT(release) - where GIT(release) has been branched from GIT(master)
</code></pre>

<p>Thereafter,we refresh the corresponding SVN source->GIT destination branches daily for a temporary intervening window of migration.</p>

<p>Is this possible?<br>
If so,How to achieve this?</p>
","3","1483620",""
"45978162","730346","2017-08-31 09:37:15","0","33","<git-svn><git-rebase><git-merge-conflict>","Update my git branch followed by svn repository changes in git-svn","<p>I'm using 'git svn' to clone source from svn repository.
And use a branch to create new features.
The git log graph like</p>

<pre><code>S1-S2+S3-S4-S5-S6-S7 (master)
     +B1-B2-...-B9   (new-feature)
</code></pre>

<p>The newest svn version is 'S7' and the latest local branch is 'B9'.  I want the graph be rebased like</p>

<pre><code>S1-S2+S3-S4-S5-S6-S7+     (master)
                    +B2-B9 (new-feature)
</code></pre>

<p>My operation commands:</p>

<pre><code>git checkout master
git svn rebase     # it updated master to S7
git checkout new-feature
git rebase master  
</code></pre>

<p>It will occurs many blank space conflicts, as I know that's because B1,B3...B8 have already checked in svn by other people. Is there smarter method to let me just keep some my patches which is not just space conflict?  Here the B2,B9 are just examples. In fact,  I don't know which patches should be replaced or merged or skipped in advanced. I just know, some of the svn check in are duplicate with some of Bx patches.</p>
","0","730346",""
"45983121","4065999","2017-08-31 13:49:09","3","801","<git><git-svn>","How to create empty directories using git-svn?","<p>I am trying to create a git repository from a part of an existing svn repo. I absolutely need to preserve empty directories. I have used the <strong>--preserve-empty-dirs</strong> options but it has not worked as I expected.</p>

<p>Here is the command that I used :</p>

<pre><code>git svn clone --stdlayout --no-metadata --no-minimize-url --preserve-empty-dirs --authors-file=users.txt http://&lt;url-to-svn-repo&gt;/path/to/myproject/ myproject
</code></pre>

<p>After this finished running, I can see that no empty directories were created.
However looking in .git/config seems to indicate that the process successfully detected empty directories :</p>

<pre><code>...
[svn-remote ""svn""]
    noMetadata = 1
    preserve-empty-dirs = true
    placeholder-filename = .gitignore
    ...
    added-placeholder = &lt;path-to-empty-directory-1&gt;/.gitignore
    added-placeholder = &lt;path-to-empty-directory-2&gt;/.gitignore
    added-placeholder = &lt;path-to-empty-directory-3&gt;/.gitignore
    etc
</code></pre>

<p>Is there a way to tell git explicitly to create the directories that it listed and the .gitignore file inside each of them ?</p>
","0","4065999",""
"9841547","886","2012-03-23 15:05:15","5","3929","<git><svn><ssl><git-svn>","Unknown protocol error when using git-svn over HTTPS through a proxy server","<p>I've been encountering some problems attempting to access a Subversion repository via HTTPS using git-svn.</p>

<p>When I type <code>git svn init --username=&lt;my username&gt; --trunk=https://&lt;host&gt;/&lt;project&gt;/trunk</code>, I get the following error message:</p>

<pre><code>RA layer request failed: PROPFIND request failed on '/&lt;project&gt;/trunk':
PROPFIND of '/&lt;project&gt;/trunk': SSL negotiation failed: SSL error: unknown
protocol (https://&lt;host&gt;) at C:\Program Files (x86)\Git/libexec/git-core\git-svn
line 2299
</code></pre>

<p>A couple of other points to note:</p>

<ol>
<li>I'm using msysgit 1.7.9.0 on Windows 7 x64. I also have the Subversion 1.7.1 command line client and TortoiseSVN 1.7.1 installed.</li>
<li>I am connecting through a proxy server, which I have specified through both the HTTP_PROXY environment variable and <code>git config http.proxy</code>.</li>
<li>I am able to clone Github repositories over HTTPS on the same machine without problems.</li>
<li>The plain Subversion client checks out the same project without problems. I have also been able to clone it successfully with Mercurial and hgsubversion, although it did fail to recognise the server's SSL certificate, so I had to specify it explicitly in my mercurial.ini file. Because of this, I am using <code>git config http.sslVerify=false</code>. However, this does not make any difference.</li>
<li>One-way workarounds such as using svnsync (as e.g. suggested <a href=""https://stackoverflow.com/questions/4838834/svn-to-git-import-problem-using-git-svn-clone"">here</a>) are not an option.</li>
</ol>

<p>Anything else that I haven't tried?</p>
","7","886",""
"52593190","6312046","2018-10-01 14:20:37","2","139","<git><svn><git-svn>","git-svn: Migrating a SVN repository with branches in different hierarchical levels","<p>I'm migrating a lot of Git repositories in my company and everything was fine until I faced a repository with a very specific layout for branches:</p>

<pre><code>/trunk/
/branches/
/branches/lvl1branch1
/branches/lvl1branch2
/branches/lvl1branch3
/branches/lvl2/lvl2branch1
/branches/lvl2/lvl2branch2
/branches/lvl2/lvl2branch
/branches/lvl2/lvl3/lvl3branch1
/branches/lvl2/lvl3/lvl3branch2
/branches/lvl2/lvl3/lvl3branch3
/tags/
</code></pre>

<p>As you can see, we have branches not only in the top level of <strong>/branches/</strong> (e.g. <strong>lvl1branch1</strong>), but only in other two levels (e.g. <strong>lvl2/lvl2branch1</strong> and <strong>lvl2/lvl3/lvl3branch3</strong>).</p>

<p>This is my <strong>.git/config</strong>:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[svn-remote ""svn""]
    url = https://myrepourl/
    fetch = test/trunk:refs/remotes/origin/trunk
    branches = test/branches/*:refs/remotes/origin/*
    branches = test/branches/lvl2/*:refs/remotes/origin/lvl2/*
    branches = test/branches/lvl2/*/*:refs/remotes/origin/lvl2/*/*
</code></pre>

<p>And I get this error when I try to run the <strong>git svn fetch</strong> command:</p>

<p><em>fatal: update_ref failed for ref 'refs/remotes/origin/lvl2/lvl3/lvl3branch1': cannot lock ref 'refs/remotes/origin/lvl2/lvl3/lvl3branch1': 'refs/remotes/origin/lvl2/lvl3' exists; cannot create 'refs/remotes/origin/lvl2/lvl3/lvl3branch1'
update-ref -m r1638 refs/remotes/origin/lvl2/lvl3/lvl3branch1 e421f7d976832aa2efe84da02378e7f89eb55c26: command returned error: 128</em></p>

<p>I can see I can create the branch <strong>lvl2/lvl3/lvl3branch1</strong> because Git is considering <strong>lvl2/lvl3</strong> is a branch, which is not true. Probably the line below in .git/config is causing the problem:</p>

<pre><code>branches = test/branches/RT-Delivery/*:refs/remotes/origin/lvl2/*
</code></pre>

<p>How can I tell Git to avoid reading <strong>lvl2/lvl3</strong> as a branch? I believe I will also face the same problem with <strong>lvl2</strong>, which is not a branch. Is there a way to add exceptions?</p>
","0","6312046",""
"37453367","6322310","2016-05-26 06:41:51","1","31","<git><svn><git-svn>","Clone an Ordner from git, commit the changing in the same ordner into git","<p>I have now a Problem between git and svn.<br>
For project intern we use git as repository.<br>
But our customer uses svn as repository. </p>

<p>We have periodically released for our customer. We must commit 4 Modules (actually 4 Ordner) in Customer svn.<br>
The 4 ordner have the same structure in git and svn.</p>

<p>My question: Can I clone these ordner from our git and then commit them to svn basically? If yes, how can I do this?</p>

<p>I heard that there is Git-SVN in git command. Can I use this tool?</p>
","0","6322310","0"
"37597891","3803452","2016-06-02 16:57:39","1","1450","<git><svn><git-svn>","git svn clone [with Single File]","<p>I know I can use git-svn to clone a directory into a new Git Repo, but how can I use git-svn to clone a <strong><em>single file</em></strong> into a new Git repo?</p>

<p>I have a requirement to split up my SVN repository into several GIT repos and I need to clone certain directories into new Git Repositories.  Using git-svn I am able to use the following command for directories:</p>

<pre><code>git svn clone ""svnRepo/folderName/"" ""C:/newGitRepo/FolderName""
</code></pre>

<p>but when I try:</p>

<pre><code>git svn clone ""svnRepo/folderName/style.css"" ""C:/newGitRepo/FolderName""
</code></pre>

<p>it does not work, it gives me the following output:</p>

<pre><code>Initialized empty Git repository in C:/newGitRepo/FolderName/.git/
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: '...trunk/folderName/style.css' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
Invalid filesystem path syntax: Cannot replace a directory from within at /mingw64/share/perl5/site_perl/Git/SVN/Ra.pm line 308.
</code></pre>

<p>Is there anyway to clone a single file into a new Git Repo?</p>

<p>(I am using this version of GIT: <a href=""https://github.com/git-for-windows/git/releases/download/v2.8.3.windows.1/Git-2.8.3-32-bit.exe"" rel=""nofollow"">https://github.com/git-for-windows/git/releases/download/v2.8.3.windows.1/Git-2.8.3-32-bit.exe</a>)</p>
","0","3803452",""
"37647592","589329","2016-06-05 22:55:39","6","775","<git><svn><version-control><git-svn><svn2git>","Why does `git-svn` hang at `Found possible branch point:`","<p>Since a few days, my <code>git-svn</code> hangs at <code>Found possible branch point: .../trunk =&gt; .../branches/foo, 8809</code> when I do <code>git svn fetch</code>.</p>

<p>The clone acutally is at revision <code>163671</code> already.
My box had a freeze lately, so it might be that something got stuck during a <code>git svn fetch</code> when it froze and I had to reboot my Windows machine.</p>

<p>I tried to move <code>.git/svn/</code> out of the way and let <code>git svn</code> recover, but it just rebuilds <code>trunk</code> and some others and then hangs at the exact same position again.</p>

<p>Does anyone have any idea why it might hang there suddenly and how to recover besides of a fresh git svn clone which would need a week or so. I'd prefer if there would be another way.</p>
","7","589329","0"
"70421334","17697150","2021-12-20 11:49:43","0","56","<git><svn><git-svn>","How to handle duplicated SVN tags in with git-svn?","<p>I am trying to clone/migrate an SVN repository with layout like below</p>
<pre><code>trunk/
dev-branches/  # branches stored here
branches/      # tags stored here
  some-duplicated-tag
releases/      # tags stored here (as well)
  some-duplicated-tag
</code></pre>
<p>So the command for initialization was:</p>
<pre class=""lang-sh prettyprint-override""><code>git svn init https://mycompany.com/svn/project \
  --trunk=trunk \
  --branches=dev-branches \
  --tags=branches \
  --tags=releases
</code></pre>
<p>This repo history is very long and convoluted, so there are duplicating tag names under <code>releases/</code> and <code>branches/</code> (illustrated above). But their history (log) is different.</p>
<p>The the fetching process of git-svn did stumble on some (but not all) these refs:</p>
<pre><code>fatal: Invalid revision range 968311febed061cac3a0ee2cd767b97558963987..refs/remotes/repo-svn/tags/some-duplicated-tag
rev-list --pretty=raw --reverse 968311febed061cac3a0ee2cd767b97558963987..refs/remotes/repo-svn/tags/some-duplicated-tag --: command returned error: 128
</code></pre>
<p>I removed a revmap for that tag and fetch went on (by rebuilding the revmap and creating the Git ref):</p>
<pre class=""lang-sh prettyprint-override""><code>rm .git/svn/refs/remotes/repo-svn/tags/some-duplicated-tag/.rev_map.${SVN_REPO_UUD}
</code></pre>
<p>After the checkout these refs only contain history from one of the sources (either from <code>releases/</code> or <code>tags/</code>). How do I preserve both?</p>
","2","17697150",""
"37749263","1345655","2016-06-10 13:14:25","0","42","<git><git-svn>","Why does this older git commit appear on the top?","<p>Consider the following git log. The commits are ordered by date. Yet there's one commit that is clearly older than others but still appears on the top.</p>

<pre><code>commit f9afb9e89918faaff09686ce1df4a36f12e82693
Author: Kshitiz Sharma
Date:   Fri May 20 11:59:00 2016 +0100

    Deleted tags

commit f3b90300799878178c09841ccac7ffcd4c9cc4d9
Author: Kshitiz.Sharma
Date:   Fri Jun 10 13:00:32 2016 +0000

    Refactor some code

    git-svn-id: svn://1.1.1.1/myrepo@29029 ca623f4c-c864-0410-95d3-a40aa24e21c6

commit c98ad952b84403908ba656ab2f18af9a18a4f95c
Author: Kshitiz.Sharma
Date:   Wed Jun 8 14:35:29 2016 +0000

    Handle nullpointer exception

    git-svn-id: svn://1.1.1.1/myrepo@29010 ca623f4c-c864-0410-95d3-a40aa24e21c6
</code></pre>

<p>Why is it so?</p>
","0","1345655",""
"53702772","9714336","2018-12-10 09:31:18","0","29","<git><svn><git-svn>","Setting up git-svn repository where svn trunk/tags/branches are organized in module subfolders","<p>I want to set up git locally (using git-svn) on my companies svn that has the following structure:</p>

<ul>
<li>Module1

<ul>
<li>trunk</li>
<li>branches</li>
<li>tags

<ul>
<li>tag1</li>
<li>tag2</li>
</ul></li>
</ul></li>
<li>Module2

<ul>
<li>trunk</li>
<li>branches</li>
<li>tags</li>
</ul></li>
<li>...</li>
</ul>

<p>I tried to use <code>git svn clone /remote/path/to/svn/repo -s</code> but the trunk/brances/tags structure is not standard. I guess I could specify all trunk/branches/tags by explicitly writing <code>-T /local/path/to/module1/trunk -T /local/path/to/module2/trunk</code> etc, which would be pretty cumbersome as there are many modules in the project. Is this the right way  to go? </p>

<p>My question is related to <a href=""https://stackoverflow.com/questions/43095525/git-svn-clone-with-complex-structure"">this one</a> but I didn't find the answers satisfactory.</p>
","0","9714336",""
"8712112","214545","2012-01-03 12:12:30","0","900","<git><git-svn><gitolite>","how to migrate from git-svn to gitolite and retain history","<p>We have been using SVN and slowly the developers have been migrating to git-svn.  Now we're ready to make the plunge and completely move to git (using gitolite).  I am not sure how to migrate our repository into gitolite and maintain history.  I don't know if I should try to convert the svn repo directly or use my local git-svn copy and push that.</p>

<p>What's the best approach?</p>
","0","214545",""
"8730797","1046587","2012-01-04 17:03:47","1","607","<git><svn><git-svn>","svn to git conversion no refs in common","<p>I am trying to convert an svn repository to git following the instructions at <a href=""http://www.albin.net/git/convert-subversion-to-git"" rel=""nofollow"">http://www.albin.net/git/convert-subversion-to-git</a>.  I've done this once before following the same instructions, and it worked, but this time at step 4 in the instructions ""git push bare"" I get the following error.</p>

<pre><code>No refs in common and none specified; doing nothing.
Perhaps you should specify a branch such as 'master'.
fatal: The remote end hung up unexpectedly
error: failed to push some refs to '/Users/[ME]/new-bare.git'
</code></pre>

<p>Anyway to get past this error? or is there a better way to convert from svn to git?</p>
","2","1046587",""
"8735093","9279","2012-01-04 22:36:03","8","1903","<git><git-svn>","Why does this series of git-svn commands result in a detached HEAD?","<p>I do this:</p>

<pre><code>$ git svn clone http://monsterdebugger.googlecode.com/svn/ -s --prefix=svn/ monsterdebugger
$ cd monsterdebugger
$ git branch -a
* master
  remotes/svn/trunk
$ git co remotes/svn/trunk
Note: checking out 'remotes/svn/trunk'.

You are in 'detached HEAD' state. &lt;And so on...&gt;
</code></pre>

<p>I guess I'm not fully understanding what's going on under the hood here. Shouldn't remotes/svn/trunk be a tracking branch against the svn repo? Why did I end up with a detached head?</p>
","3","9279",""
"26975463","4152703","2014-11-17 14:58:51","3","965","<bitbucket><git-svn>","Git - fatal: Unable to create '/path/my_project/.git/index.lock': No such file or directory read tree xxxx command returned error: 128","<p>I'm converting my SVN repo into git (bitbucket) following this tutorial: <a href=""https://www.atlassian.com/git/tutorials/migrating-convert/"" rel=""nofollow"">https://www.atlassian.com/git/tutorials/migrating-convert/</a></p>

<p>But I keep getting this message when runing the command : git svn clone --stdlayout --authors-file=authors.txt --prefix=origin/  </p>
","4","4152703","0"
"9211206","709911","2012-02-09 12:54:49","1","255","<git><svn><git-svn>","Keeping code in multiple SVN repositories with git locally","<p>I am working on a project where there are two SVN repositories. One is for external use, and our interfacing with partners on the project, and the other if for purely internal use.</p>

<p>I have a folder (src) which exists on the external repository. My desire is to keep that code in a second src folder on the internal repository so as to be able to commit internally, and when the code is stable, commit to the external repository.</p>

<p>In addition to this I want to manage code locally on my machine with git.</p>

<p>To this end, I have looked at git-svn.</p>

<p>Could anyone explain the best way to manage this? I am leaning toward having a branch for each svn repo, ( localsvn and externalsvn ) and working with local as the default, merging into external when I want to commit to it, and keeping git running in the background.</p>
","0","709911",""
"9217102","986005","2012-02-09 19:04:34","0","498","<git-svn>","How to properly preserve all branches using svn-git (standard layout) then svn-clone with --bare option","<p>I'm attempting to move an svn repository to a git repository.  I don't want to use svn anymore so I am using the no-metadata option.  I'm curious why, after doing git svn fetch there are only remote refs created to my branches.  I'm creating the repo using:</p>

<pre><code>git svn init -s --username=$SVNUSER --no-metadata http://URLTOSVN/$REPO
git config svn.authorsfile ../$USERFILE
git svn fetch
</code></pre>

<p>after running the fetch, if I look at the branches I have:</p>

<pre><code>prompt$ git branch -a
* master
remotes/BRANCH_1
remotes/BRANCH_2
remotes/trunk
</code></pre>

<p>I need BRANCH_1 and BRANCH_2 branches but it doesn't seem to be creating them.  Now when I clone this using the --bare option so I can host it in my central repo it ignores those remote refs and my resulting git repo has no knowledge of those branches as far as I can tell.  I need those branches in my resulting repo.  What am I missing?  </p>
","0","986005","0"
"9224754","313842","2012-02-10 08:21:51","439","489758","<git><git-svn>","How to remove origin from git repository","<p>Basic question: How do I disassociate a git repo from the origin from which it was cloned?</p>

<p><code>git branch -a</code> shows:</p>

<pre><code>* master
  remotes/origin/HEAD -&gt; origin/master
</code></pre>

<p>and I want to remove all knowledge of origin, and the associated revisions.</p>

<p>Longer question: I want to take an existing subversion repo and make a number of smaller git repos from it. Each of the new git repos should have the full history of just the relevant branch. I can prune the repo to just the wanted subtree using:</p>

<pre><code>git filter-branch --subdirectory-filter path/to/subtree HEAD
</code></pre>

<p>but the resulting repo still contains all the revisions of the now-discarded subtrees under the origin/master branch.</p>

<p>I realise that I could use the -T flag to git-svn to clone the relevant subtree of the subversion repo in the first place. I'm not sure if that would be more efficient than later running multiple instantiations of <code>git filter-branch --subdirectory-filter</code> on copies of the git repo but, in any case, I would still like to break the link with the origin.</p>
","0","313842","0"
"9236720","143269","2012-02-11 00:35:38","3","848","<git><git-svn>","Preventing local .gitignore from being pushed to svn repo with git-svn","<p>I'm using git-svn to use git locally and deploy a client's svn repo. However, after migrating the svn ignore entries to the .gitignore, I have to commit those to git. </p>

<p>But I don't want that file being pushed as a commit to the svn repo everytime I do a <code>git svn dcommit</code></p>

<p>Any advice?</p>
","0","143269","0"
"9255717","25201","2012-02-13 04:45:35","9","3160","<git-svn>","Repoint git-svn master branch back to trunk","<p>I'm not sure how I got into this state, but my <code>master</code> branch on my local git-svn repo seems to be pointing to the remote UAT branch.</p>

<pre><code>git status
# On branch master nothing to commit (working directory clean)
git svn dcommit Committing to https://svn...com/MyRepo/branches/UAT ...
</code></pre>

<p>how do I fix this?</p>
","1","25201","0"
"27061290","21499","2014-11-21 12:21:18","0","78","<git><version-control><git-svn><version-control-migration>","After git-svn migration: migrate unmigrated branch later?","<p>We recently migrated from SVN to git. Unfortunately, only the trunk was migrated, but the branches for bugfixes on production revisions were not migrated. 8-{ Is it possible to migrate the missing branches now, months later? Unfortunately, doing the full migration again would be annoying, since we have been working on the repository for a while.</p>
","0","21499",""
"9303810","","2012-02-16 00:29:31","2","950","<git><svn><repository><git-svn>","Create a master git repository for multiple git-svn repositories","<p>I have a project which consists of several services, 
each in their own SVN repository and a build script that checks out each SVN repository as a folder in a single <code>/project</code> directory along with a <code>/project</code> level <code>Makefile</code> to recursively build the whole project.</p>

<p>Visually it looks something like this:</p>

<pre><code>/project
  Makefile
  /service1    # First service (SVN repository)
    /.svn
  /service2    # Second service (SVN repository)
    /.svn
  ...
</code></pre>

<p><strong>I am trying to convert the project into a <em>single</em> shareable git repository to collaborate with teammates on without removing the ability to commit back to the original SVN repositories.</strong>     </p>

<p>My current idea is to check out each SVN repository (<code>/service1</code>, <code>/service2</code>, etc.) using git-svn and then create a master git repository at the <code>/project</code> level to group them into a single repository. The hypothesized project structure would look something like this:</p>

<pre><code>/project
  /.git      # Master git repository
  Makefile
  /service1    # First service (SVN repository)
    /.git      # .git directory for git-svn checkout of service 1
  /service2    # Second service (SVN repository)
    /.git      # .git directory for git-svn checkout of service 2
  ...
</code></pre>

<p><strong>Will this work? Is there a simpler solution?</strong></p>

<p>Note: I <em>do not</em> have the authority to redefine the project structure or the structure of the SVN repositories.</p>
","2","","0"
"9331024","352740","2012-02-17 15:31:50","0","202","<git><svn><deployment><git-svn>","Using git as a deployment mechanism for a codebase managed in svn?","<p>I'm currently looking at <a href=""http://www.phpfog.com"" rel=""nofollow"">phpfog</a> as a platform for a bunch of apps maintained by a small team. I love git, and really like the fact that they let you push to the phpfog platform over git.</p>

<p>The apps I'm looking at hosting are all currently being version controlled in SVN. Unfortunately, this cannot change, for lots of boring reasons I have no control over.</p>

<p>I'm trying to find a good workflow to allow continuous integration between this SVN repository and the phpfog platform. Essentially, the buildserver should check if there's modifications in SVN, if so then pull those down, and then do a <code>git push</code> over to phpfog with the changes. I have a buildserver that's got both git and svn installed, but I'm running into some issues.</p>

<p>The main thing I've tried so far is to do a <code>git svn clone</code> on the svn repo, add phpfog as a remote and then pushing to that. However, this fails with this:</p>

<pre><code>$ git push phpfog master
To git@git01.phpfog.com:example.phpfogapp.com
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'git@git01.phpfog.com:example.phpfogapp.com'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>I think the issue is that phpfog have a git repository that I'm expected to clone out first, and yet <code>git svn</code> creates its own repository.</p>

<p>I tried it the other way round, cloning the empty repo from phpfog and trying to then do some sort of <code>git svn clone</code> into the repo, but this didn't seem to work either.</p>

<p>What's the best way of doing this?</p>
","0","352740",""
"9359220","380734","2012-02-20 09:59:43","2","94","<git><git-svn>","Why do I have multiple branches of a similar name after setting up git-svn","<p>I have just created a new Git repository backed by Subversion, using git svn.</p>

<p>On inspection of the branches created, there are several branches with a similar name, suffixed <code>@{number}</code>:</p>

<pre><code>$ git branch -r
tags/project-0.0.1.0
tags/project-0.0.1.0@175525
tags/project-0.0.1.0@178802
tags/project-0.0.1.0@179205
trunk
trunk@175525
trunk@179205
</code></pre>

<p>What do these mean?</p>
","0","380734",""
"27131502","4292392","2014-11-25 16:08:38","0","16","<git><svn><version-control><tortoisesvn><git-svn>","Migrate local git-svn repo to a new svn branch","<p>My place of work uses svn and I have been using git-svn for the past few months to work in a git environment and interface with the svn repo as a remote.</p>

<p>The svn repo looks like this (Nnnn is the version number)</p>

<p>//path/../ApplicationName/Nnnn/all_the_code</p>

<p>When we start a new release it branches to a new version number.  Our svn gui (tortoise SVN) knows how to branch somehow (I never looked into the internals)</p>

<p>I synced the remote svn repo up to the version number.  When svn branches, how can I tell git to pull whenever I 'git svn update' from the new branch?  Has anyone done this before?</p>

<p>Thanks, and sorry for any ignorance</p>
","0","4292392",""
"9678357","17007","2012-03-13 04:25:59","3","473","<git><git-svn>","Equivalent of ""svn switch"" for git-svn?","<p>(RHEL 6.2, git 1.7.6.4)</p>

<p>I'm using git-svn to access an SVN repository. I've done the initial checkout with the commands</p>

<pre><code>git svn init -s https://svn.myhost.com/svn/myrepo/
git svn fetch
</code></pre>

<p>I can checkout the latest on the trunk  fine, but I can't find a way to switch to a branch without destroying and recreating the entire local copy of the code and starting from scratch using the desired branch.</p>

<p>What is the appropriate git-svn command to change from <a href=""https://svn.myhost.com/svn/myrepo/trunk/"" rel=""nofollow"">https://svn.myhost.com/svn/myrepo/trunk/</a> to <a href=""https://svn.myhost.com/svn/myrepo/branches/mybranch"" rel=""nofollow"">https://svn.myhost.com/svn/myrepo/branches/mybranch</a> ?</p>
","0","17007",""
"9690913","1082431","2012-03-13 19:43:01","0","325","<xcode><macos><git><git-svn>","Git command ""git svn rebase"" not working with XCode 4.3.1","<p>I have cloned few SVN Project on my system, I used to do ""git svn rebase"" to sync them up with SVN Repositories. Now after updating XCode to version 4.3.1, this command stopped working. </p>

<p>Executing ""git svn rebase"" on my mac (v 10.7.3) gives me error ""git: 'svn' is not a git command"". </p>

<p>I suspect, Apple is no longer installing git-svn with new XCode. Do anybody has any idea, how to fix this issue?</p>

<p>Thanks.</p>
","2","1082431",""
"9693176","287403","2012-03-13 22:29:29","8","2156","<git><svn><git-svn>","git svn rebase always conflicts with my own commits","<p>I'm using git svn to work with a client who has an svn repository (our stuff is in github).</p>

<p>So I follow the instructions and do a git svn rebase and then git svn dcommit</p>

<p>That worked the very first time, but ever since then rebasing always conflicts on almost every commit. It seems like it doesn't realize which commits are mine, and complains that things are conflicting. Every time I have to git rebase --skip my way through until it passes those and successfully applies my latest commits. It never figures out where I was the last time I did a rebase (which I believe is what is supposed to happen).</p>

<p>First of all... why? Then can I get around this somehow?</p>

<pre><code>First, rewinding head to replay your work on top of it...
Applying: Deleting their old build management stuff as its pretty crappy. Will re-build at some point.
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
No changes -- Patch already applied.
Applying: Added some error checking around Android specific calls
Using index info to reconstruct a base tree...
&lt;stdin&gt;:16: space before tab in indent.
            Android.hideKeyboard();
&lt;stdin&gt;:31: space before tab in indent.
                    Android.launchNewAccount();
warning: 2 lines add whitespace errors.
Falling back to patching base and 3-way merge...
CONFLICT (modify/delete): src/LoginForm.js deleted in HEAD and modified in Added some error checking around Android specific calls. Version Added some error checking around Android specific calls of src/LoginForm.js left in tree.
Auto-merging src/ChildPanel.js
CONFLICT (content): Merge conflict in src/ChildPanel.js
Failed to merge in the changes.
Patch failed at 0002 Added some error checking around Android specific calls

When you have resolved this problem run ""git rebase --continue"".
If you would prefer to skip this patch, instead run ""git rebase --skip"".
To check out the original branch and stop rebasing run ""git rebase --abort"".
</code></pre>
","0","287403","0"
"9695303","313141","2012-03-14 02:56:44","4","1205","<git><version><git-svn><upgrade>","How can I upgrade the SVN version used by git svn in Windows?","<p>My company is in the process of upgrading SVN to 1.7.  Checking <code>git svn --version</code> shows that the SVN version being used is 1.4.6.  I'd like to get the version of SVN that git svn uses up closer to 1.7.  However, I've seen no instructions for updating the version of SVN that git svn uses (in Windows).</p>

<p>The <a href=""https://stackoverflow.com/questions/4341159/how-to-upgrade-the-svn-version-used-by-git-svn"">other thread</a> I found looking for answers seems to be oriented to a Mac OSX user.  I haven't seen Windows instructions for this upgrade, however.  Does anyone know how to properly update the SVN version for git svn in Windows?</p>
","0","313141","0"
"45406300","301218","2017-07-31 01:20:09","1","677","<git><svn><git-svn>","git svn clone, mergeinfo are lost","<p>We have a SVN setup which branch merge happens quite often. And I am currently trailing migrate to git. I am using svn2git for the migration, but I think the same does apply to git svn.</p>

<p>It seems that svn git clone will not retain mergeinfo from svn, as the result of svn and git merge working differently? For example, after dong <code>git svn clone</code> to migrate a svn trunk repositoy (with or without the feature branch). doing <code>git log --full-history</code> will only show the commit in the trunk where the branch been merged into, but all the commit history inside the branch which this merge introduced into trunk are not there anymore, but it does shows in svn repo if using TortoiseSVN and enable the 'Include merged reversions'. It seems that all the mergeinfo inside svn are not retained/copied into git master/trunk repository? Is it what supposed to happened? </p>

<p>I've read thatthat SubGit can handle that(I haven't tried it yet). But just want to make sure that git svn clone indeed not retain the mergeinfo propertiy/information from svn repository in git.</p>
","8","301218","0"
"9909604","88374","2012-03-28 14:27:12","36","6179","<git-svn><newline><eol><core.autocrlf>","How does git-svn handle line endings?","<p>I'm pretty happy with how Git itself handles line endings, via <code>core.autocrlf</code>, <code>core.eol</code> + gitattributes (<a href=""http://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/"">Tim's post is excellent</a>).</p>

<p>I have a Windows Git repo that has <code>autocrlf</code> set to <code>true</code>. So, all text files are stored in the repo as <code>LF</code> and live in the working directory as <code>CRLF</code>. This repo was cloned from an SVN repo, which we still use to push from / pull to (the SVN repo is our central, blessed repo for triggering CI etc).</p>

<p>But I don't know how <code>git-svn</code> handles line endings during the push / pull operations.</p>

<p>Can anyone explain what <code>git-svn</code> does in this instance?</p>
","0","88374","0"
"64278683","1235227","2020-10-09 10:58:18","1","143","<git-svn>","Get SVN URL of removed git-svn file","<p>I would like to track a removed file as far back in history as possible, while using git-svn on a <em>subdirectory</em> of the SVN repository.</p>
<ol>
<li>Using <code>git log --full-history -- path/to/removed_file.py</code>, I can get see the history starting with the time the file was moved into the subdirectory I checked out using git-svn.</li>
<li>I can see which SVN revision that was in the git-svn commit message postfix, so I would now like to use <code>svn log &lt;full_url&gt;@revision</code> to see the rest of the history.</li>
<li>I know that I could use <code>git svn info --url path/to/existing_file.py</code> to see the required full SVN url, but what is a quick (ideally scriptable) way of <strong>getting the SVN URL of a file that is no longer in the repository</strong>?</li>
</ol>
","0","1235227",""
"10220374","527489","2012-04-19 01:20:12","16","7576","<git-svn><rebase>","Can I git svn rebase to a certain svn revision? (Similar to svn up -r ...)","<p>Short question: what is the git-svn equivalent of <code>svn up -r r1130</code> to update only to a numbered commit (with the svn number)?</p>

<p>I am using git-svn so I can both use git and manage (many) local branches of my team's svn repository.  I have a version of the software that I hack up to work with a particular hardware setup.  Since I last worked with it, the svn repo has moved forward past a stable, good point for this work.  I want to update the local branch to a numbered revision that represents the stable commit.  I could do this in svn with <code>svn up -r r1130</code>, but I prefer git.</p>

<p>I keep forgetting how I have done this in the past and finding myself searching SO and the help pages trying to find the best way.  Perhaps there is a differently worded Q&amp;A that I'm missing?</p>

<p>It is easy enough to just check out the older revision on a clean tree, but when I am carrying commits on top of the tree, the ""rewinding head to replay your work on top of it..."" part that I usually love means that I will be going to a point in the tree before my changes were added!</p>

<p>For now, I am going to <code>git svn rebase</code> and then rebase interactively to back out the commits I don't want, but I am having trouble believing this is the best or even a good way of doing this.</p>
","0","527489","0"
"10234862","26197","2012-04-19 18:54:30","1","81","<git><svn><git-svn><rebase><dcommit>","Any way to default git svn dcommit to fail if code is out of date?","<p>I like how (normal) git won't let me push if I haven't rebased with the latest code.  However with git svn, when I do git svn dcommit it automatically rebases (i.e. git svn rebase) and then commits.  Is there a way I can have it throw up an error message if there is new stuff to rebase?</p>
","1","26197",""
"28228016","3213313","2015-01-30 01:52:43","13","6706","<git><svn><git-svn><osx-yosemite>","git svn clone died of signal 11 on OSX","<p>I'm trying to migrate a project from svn to git. I was using the osx svn package, but I also tried installing with homebrew. I keep getting this same error.</p>

<pre><code>git svn clone http://myserver/myrepo
error: git-svn died of signal 11
</code></pre>

<p>Version information:</p>

<pre><code>git --version
git version 2.2.1

svn --version
svn, version 1.7.17 (r1591372)
   compiled Sep 18 2014, 13:06:44
</code></pre>

<p>I'm running Yosemite. </p>
","3","3213313",""
"46483485","730346","2017-09-29 07:04:33","0","55","<git><svn><git-svn>","Is my ""git svn"" repository ahead of subversion repository?","<p>For normal git process, I can use 'git status' to get a similar message like:</p>

<pre><code>$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
nothing to commit (working directory clean)
</code></pre>

<p>Is there any git svn command could let me know what's require to dcommit?</p>
","0","730346",""
"46807090","277826","2017-10-18 09:37:26","0","807","<git><svn><version-control><git-svn>","git svn - get missing svn commits?","<p>I'm on Ubuntu 14.04, git-svn version 1.9.1 (svn 1.8.8). I tried to clone <a href=""https://sourceforge.net/p/searchmonkey/code/HEAD/tree/"" rel=""nofollow noreferrer"">https://sourceforge.net/p/searchmonkey/code/HEAD/tree/</a>, using:</p>

<pre><code>git svn clone https://svn.code.sf.net/p/searchmonkey/code -T trunk -b branches -t tags --prefix=origin/ searchmonkey-code-svngit
</code></pre>

<p>That process ended like this:</p>

<pre><code>...
r850 = 3b98c1c32c0043184313828780c02ed7c2d85a7e (refs/remotes/origin/shawno)
    M   searchmonkey_2_x_x/util.h
    M   searchmonkey_2_x_x/mainwindow.ui
    M   searchmonkey_2_x_x/tab.cpp
    M   searchmonkey_2_x_x/mapped.cpp
    M   searchmonkey_2_x_x/find.h
    M   searchmonkey_2_x_x/grep.cpp
    M   searchmonkey_2_x_x/matcher.cpp
    M   searchmonkey_2_x_x/matcher.h
    M   searchmonkey_2_x_x/mainwindow.cpp
r851 = b3fe25fdacad270432f1a2f7b5876b83b54d2387 (refs/remotes/origin/shawno)
Checked out HEAD:
  https://svn.code.sf.net/p/searchmonkey/code/trunk r365
error closing pipe: Bad file descriptor at /usr/lib/git-core/git-svn line 0.
error closing pipe: Bad file descriptor at /usr/lib/git-core/git-svn line 0.
</code></pre>

<p>Now, when I <code>cd searchmonkey-code-svngit</code> and issue <code>gitk --all</code>, I see the latest commit is r851, to which I've reset <code>master</code>. So now, the status is:</p>

<pre><code>$ git svn info
Path: .
URL: https://svn.code.sf.net/p/searchmonkey/code/branches/shawno
Repository Root: https://svn.code.sf.net/p/searchmonkey/code
Repository UUID: 937bcc44-791b-0410-a411-b6e56c9656c8
Revision: 851
Node Kind: directory
Schedule: normal
Last Changed Author: shawno
Last Changed Rev: 851
Last Changed Date: 2011-05-06 04:01:08 +0200 (Fri, 06 May 2011)
$ git status
On branch master
nothing to commit, working directory clean
$ git log -1
commit b3fe25fdacad270432f1a2f7b5876b83b54d2387
Author: shawno &lt;shawno@937bcc44-791b-0410-a411-b6e56c9656c8&gt;
Date:   Fri May 6 02:01:08 2011 +0000

    minor changes before move working copy to non-system drive

    git-svn-id: https://svn.code.sf.net/p/searchmonkey/code/branches/shawno@851 937bcc44-791b-0410-a411-b6e56c9656c8
$ git svn log -1
------------------------------------------------------------------------
r851 | shawno | 2011-05-06 04:01:08 +0200 (Fri, 06 May 2011) | 2 lines

minor changes before move working copy to non-system drive

------------------------------------------------------------------------
</code></pre>

<p>... however, the sourceforge page says:</p>

<blockquote>
  <p>tags     2011-05-07  shawno  [r852] 2.0.1 never got released </p>
</blockquote>

<p>... so, basically, I'm missing r852 from this project's Sourceforge svn, as the last one cloned by <code>git svn</code> is r851. I tried doing:</p>

<pre><code>$ git svn fetch
$ git svn rebase
Current branch master is up to date.
creating empty directory: install_msi/cache.upx/tmp
creating empty directory: sm_no_gui/release
$ git svn rebase
Current branch master is up to date.
</code></pre>

<p>... and still, the latest commit is r851.</p>

<p>How can I get the missing r852 commit into this git svn repository?</p>
","0","277826",""
"10623498","1060205","2012-05-16 17:21:11","27","24100","<git><encoding><character-encoding><git-svn><git-extensions>","What can cause git to mess with character encoding?","<p><em><strong>Edit:</em></strong> git does not mess with character encoding. This is still here to share knowlege and avoid others making the same mistake.</p>

<hr>

<p><strong>The context</strong>: My enterprise uses an svn repository. I'm using git-svn as a client to interact with this repository. All text files in the project are (and must be) encoded with windows default encoding (cp-....). I use git-extensions, and sometimes the command line to pilot git.</p>

<p><strong>What I did</strong>: During the last 3 days, I was working on a new feature, and I did a number of local commits. Finally i squashed all these commits into a single one using an interactive rebase, then i used git svn dcommit to push everything on the svn repository in a single commit.</p>

<p><strong>What happened then</strong>: A collegue told me that all accents were messed up in the files that I modified, and in the new files after my commit. I had already commited text files with accents in the same repository with my installation of git + svn before, and it's the first time I face this issue.</p>

<p><strong>My investigation</strong>:I did the following things to investigate: opened the files with notepad++, and tried the most current encodings (including windows default and UTF-8) to view them: none of them could display accents properly, and different accents are always rendered by the same sequence of strange glyphs.</p>

<p><strong>The temporary workaround</strong>:I quickly created a revert commit with git extension and ""dcommited"" it. </p>

<p><strong>The question</strong>:My enterprise svn repository is OK, but now i have the two following problems to solve:</p>

<ol>
<li>Understand what happened with the characters with accents</li>
<li>Retrieve my work from the SVN history and commit it in a proper way (if possible without reviewing manually all the characters with accents)</li>
</ol>

<p>Can anybody provide some clues (i'm rather new to git) ?</p>
","8","1060205","0"
"72350029","589206","2022-05-23 14:11:55","1","148","<git><svn><git-svn>","git svn keeps telling files need update","<p>I have checked out an SVN repository using <code>git svn</code> with git 2.35.1. It has worked for a long time, but as of recently I get ghost-diffs:</p>
<pre><code>$ git status
On branch master
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    modified:   tools/a.cpp
    modified:   tools/b.cpp
    modified:   tools/c.cpp
    ...
</code></pre>
<p>If I <code>git checkout .</code> I get:</p>
<pre><code>$ git checkout .
Updated 28 paths from the index
</code></pre>
<p>But nothing changes, i.e. <code>git status</code> keeps showing the same differences. I cannot <code>git svn rebase</code> from the remote <code>SVN</code> server:</p>
<pre><code>$ git svn rebase
tools/a.cpp: needs update
tools/b.cpp: needs update
tools/c.cpp: needs update
...
</code></pre>
<p>When I use <code>git diff</code> I get full differences for all the files in this list. Using <code>git diff -w</code> says</p>
<pre><code>$ git diff -w
warning: LF will be replaced by CRLF in tools/a.cpp.
The file will have its original line endings in your working directory
</code></pre>
<p>I understand this is caused by whitespace changes between the local <code>git</code> checkout and the <code>SVN</code> server. I just cannot figure out any combination of options or configuration settings that will fix the problem.</p>
<p><em>EDIT:</em></p>
<p>I actually found a solution to update the repository: I checked out the revision before <code>tools/a.cpp</code> and friends were committed, and from there do a <code>git svn rebase</code>. This updates to the latest revision. But the problem is there again, and if I want to update further I have to repeat this revert and rebase process, so this is not a real solution, especially for large histories.</p>
","3","589206","0"
"54722218","1727039","2019-02-16 10:40:49","7","1011","<windows><git><perl><svn><git-svn>","git svn clone stuck on perl.exe","<p>I have executed command (Windows 10, Git BASH):</p>

<pre><code>$ git svn clone &lt;svn app-url&gt;/trunk
Initialized empty Git repository in C:/TEMP/svn-git/trunk/.git/
</code></pre>

<p>and after it got stuck. No further logs, nothing.</p>

<p>The only thing i can see is that perl.exe is using loads of resources:</p>

<p><a href=""https://i.stack.imgur.com/tsO5r.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/tsO5r.png"" alt=""perl.exe using lots of processor""></a></p>

<p>I have tried the same command on other windows PC in same network and it worked fine - started to get all revisions from r100 etc and finished in about an hour without problems. </p>

<p>Should I just be patient with this one?</p>
","3","1727039",""
"54887830","1152596","2019-02-26 14:31:59","3","294","<git-svn>","Error when cloning a svn repository using git-svn","<p>I am trying to migrate a SVN repo to a git. For this I am using git-svn tool. I'm running the command:
<code>git svn clone [SVN repo URL] --no-metadata -A authors-transform.txt --stdlayout ~/temp</code></p>

<p>and I'm getting the following error:</p>

<p><code>Name does not refer to a filesystem directory: Can’t get entries of non-directory at /Applications/Xcode.app/Contents/Developer/usr/share/git-core/perl/Git/SVN/Ra.pm line 312.”</code></p>

<p>Line 312 of that script is:</p>

<p><code>$reporter-&gt;finish_report($pool);</code>
So I understand that finish_report is failing, but I don't understand why.</p>
","0","1152596","0"
"54894687","10067512","2019-02-26 21:49:41","1","309","<git><svn><git-svn>","git-svn clone all history but only what's currently in HEAD revision","<p>Im trying to convert an SVN repo into a Git repo using git-svn but it's cloning everything that was ever in SVN at any point.</p>
<p>For example a branch that was created, merged into trunk and deleted is being cloned as a new Git branch.</p>
<p>How can I get all the commit history but only clone into master what is currently in the HEAD revision.</p>
<p>I have tried running <code>git svn clone</code> with <code>-r HEAD</code>, but that gave me the error:</p>
<blockquote>
<p>fatal: refs/remotes/svn/trunk: not a valid SHA1 update-ref HEAD</p>
<p>refs/remotes/svn/trunk: command returned error: 128</p>
</blockquote>
","0","10067512","0"
"55031902","1320081","2019-03-06 20:49:26","0","168","<git><svn><version-control><git-svn>","Moving from git-svn to git","<p>We keep our project's main repository at SVN. Then, to make work easier, each of us did <code>git svn clone</code> SVN's trunk to git's master and we work using git flow. When our work is done within feature branch, we merge it into master and do <code>git svn dcommit</code> to push changes to SVN repository.</p>

<p>But now we need to abandon SVN repository and switch completely to git. How can we achieve it if we want to keep history and branches which haven't merged into master yet?</p>

<p>I thought it that way: we make a clean copy of current SVN repository with <code>git svn clone</code> and place it on our server - it will be our ""central"" repository. Now, we'll add this repository as remote to our existing repositories. But how can I do it? Can I change old master with the new one? Can I then merge old, not yet merged feature branches to new master without unnecessary conflicts?</p>
","3","1320081",""
"45999961","5675425","2017-09-01 12:05:07","0","178","<git-svn><svn2git>","Can't svn2git public repos","<p>I need to migrate a customer from SVN to Git, so I wanted first to try svn2git on a public SVN repository.</p>

<p>I have found several public repos, e.g., <a href=""https://svn.alfresco.com/repos/alfresco-open-mirror/alfresco"" rel=""nofollow noreferrer"">https://svn.alfresco.com/repos/alfresco-open-mirror/alfresco</a> and <a href=""http://svn.apache.org/repos/asf/spamassassin"" rel=""nofollow noreferrer"">http://svn.apache.org/repos/asf/spamassassin</a>. There is no problem of doing <code>svn co</code>, but when I try svn2git, I get the following problem:</p>

<p><code>D:\Documents\work\svn2git\apache&gt;svn2git http://svn.apache.org/repos/asf/spamassassin
Initialized empty Git repository in D:/Documents/work/svn2git/apache/.git/
Using higher level of URL: http://svn.apache.org/repos/asf/spamassassin =&gt; http://svn.apache.org/repos/asf
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: REPORT request failed on '/repos/asf/!svn/bc/100': File not found: revision 100, path '/spamassassin'
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
Checked through r100
Checked through r200
Checked through r300
</code></p>

<p>It ran the whole night, and ended with:</p>

<p><code>Checked through r22000
Checked through r22100
W: Ignoring error from SVN, path probably does not exist: (175002): RA layer request failed: PROPFIND request failed on '/repos/asf': PROPFIND of '/repos/asf': could not connect to server (http://svn.apache.org)
W: Do not be alarmed at the above message git-svn is just searching aggressively  for old history.
This may take a while on large repositories
Checked through r477700
Path 'spamassassin' was probably deleted:
RA layer request failed: PROPFIND request failed on '/repos/asf': PROPFIND of '/repos/asf': could not connect to server (http://svn.apache.org)
Will attempt to follow revisions r477601 .. r477700 committed before the deletion
r477601 .. r477679 OK
Checked through r748600
Path 'spamassassin' was probably deleted:
RA layer request failed: PROPFIND request failed on '/repos/asf': PROPFIND of '/repos/asf': could not connect to server (http://svn.apache.org)
Will attempt to follow revisions r748501 .. r748600 committed before the deletion
Checked through r748700
Checked through r748800
Checked through r748900
Checked through r749000
Checked through r749100
Checked through r749200
Checked through r749300
Checked through r749400
W: Ignoring error from SVN, path probably does not exist: (175002): RA layer request failed: PROPFIND request failed on '/repos/asf/!svn/vcc/default': PROPFIND of '/repos/asf/!svn/vcc/default': could not connect to server (http://svn.apache.org)
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
Checked through r805700
Path 'spamassassin' was probably deleted:
RA layer request failed: PROPFIND request failed on '/repos/asf/!svn/vcc/default': PROPFIND of '/repos/asf/!svn/vcc/default': could not connect to server (http://svn.apache.org)
Will attempt to follow revisions r805601 .. r805700 committed before the deletion
Checked through r805800
Checked through r805900
Checked through r806000
Checked through r806100
Checked through r806200
Checked through r806300
Checked through r806400
Checked through r806500
Checked through r806600
Checked through r806700
command failed:
git checkout -f master
</code></p>

<p>Why does it happen? Is it a permission problem?</p>
","0","5675425","0"
"46046857","730346","2017-09-05 04:03:49","1","786","<git><git-svn>","git svn clone for subset of svn repository shows error message","<p>The svn repository is</p>

<pre><code>http://example.com/svn/a/b/c
http://example.com/svn/b/c
http://example.com/svn/c/d/e
http://example.com/svn/d/e/f
</code></pre>

<p>I want to clone the subset,</p>

<pre><code>git svn clone -r HEAD -t http://example.com/svn --include-paths '(a/b/c|b/c|d/e/f)'
</code></pre>

<p>It shows the following error message:</p>

<pre><code>SVN repository location required as a command-line argument
</code></pre>
","0","730346",""
"9864590","599912","2012-03-25 22:16:55","1","893","<git><svn><git-svn>","git-svn clone server sent unexpected return value (303 see other)","<p>I am trying to clone my project on google code svn into a local git repository.</p>

<p>when running <code>git svn clone http://dobberman.googlecode.com/svn -s dobberman</code> i get the following error message:</p>

<blockquote>
  <p>RA layer request failed: Server sent unexpected return value (303 See
  Other) in response to OPTIONS request for
  'http://dobberman.googlecode.com/svn' at /usr/lib/got-core/git-svn
  line 1923</p>
</blockquote>

<p>Anyone familiar with this ?</p>
","0","599912","0"
"64068337","2019606","2020-09-25 16:53:51","0","52","<git><azure><directory><devops><git-svn>","why does git svn init xxxxx creates a new directory called Floor and initializes there and how to fix","<p>We are moving from CloudForge SVN hosting to Azure dev ops GIT and I am moving all my repositories.    I moved 3 of them and then I get to a .net C# SFP project and its doing things differently and I don't know why.</p>
<p>Steps that I am following:</p>
<ol>
<li>Create SFP project in devops</li>
<li>create new directory on D:\projects</li>
<li>Put authors file into directory - open in notepad++ and change to UDF8 format</li>
<li>Open GIT CMD</li>
<li>git svn init ##CloudForgeRepoAddressHEre## --no-metadata</li>
<li>git config svn.authorsfile authors.txt</li>
<li>git svn fetch</li>
<li>git svn rebase - errors but run it anyways</li>
<li>git push --set-upstream https://HorizonsQES@dev.azure.com/HorizonsQES/CSLS/_git/CSLS master</li>
</ol>
<p>Normally in step 5 the process would initalize the empty directory in the directory I am sitting in but instead it's creating a Floor directory instead.</p>
<p>At this moment I'm attempting to continue onwards but I'm not sure if it's going to work properly.</p>
<p>Does anyone know why it's creating the floor directory?   When I do the fetch it is erroring out.</p>
<p>I may have to manually add this project into devops without any comments and such which for this one is not the end of the world.</p>
<p><a href=""https://i.stack.imgur.com/qy0OF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qy0OF.png"" alt=""directoryimage"" /></a></p>
","0","2019606",""
"28023186","1180442","2015-01-19 11:06:00","0","158","<git><svn><git-svn>","Managing staging and production servers using git","<p>I've just started working on a website that I've inherited from someone who used SVN to manage their code and I want to switch it over to using Git.</p>

<p>I've figured out how to the actual SVN->Git conversion so that's sorted and I'm looking in to how best to arrange the branching to future proof it in case we take on any more developers and have to work in parallel.</p>

<p>However, the part I need some clarification on is the way I should be using Git to work the staging and production servers.</p>

<p>Currently, the process is to put new code on to the staging server using svn update on there. We then do an svn copy to create a new release branch, then an svn switch to use that branch.</p>

<p>When the changes are shown to be working on there, we move to the production code and svn switch to the new release branch in production.</p>

<p>If I want to use git, is it correct to do the following?</p>

<p>1) Make local code changes</p>

<pre><code>$ git add &lt;whatever&gt;
$ git commit -m 'Something'
$ git push origin master
</code></pre>

<p>2) ssh to web server</p>

<pre><code>$ cd &lt;staging dir&gt;
$ git pull
</code></pre>

<p>3) Test changes on staging site</p>

<p>4) Once changes are working</p>

<pre><code>$ cd &lt;production dir&gt;
$ git pull
</code></pre>

<p>?</p>

<p>Or do I need to do a git checkout in there somewhere or something?</p>
","1","1180442",""
"64675544","8466686","2020-11-04 07:10:29","1","88","<git><svn><migration><git-svn>","Git svn difference between directories .git/logs/refs/... and .git/refs/","<p>I'm doing a migration from <strong>svn</strong> to <strong>git</strong> with <strong>git svn</strong> command.</p>
<p>After the command does its job I, have two simmilar directories:</p>
<ul>
<li><code>*.git/logs/refs/remote/origin*</code> and</li>
<li><code>*.git/refs/remote/origin.*</code></li>
</ul>
<p>My question is what is the difference between them?<br />
Because in the <code>*.git/refs/remote/origin*</code> I'm missing the <code>trunk</code> branch which is visible in <code>*.git/logs/refs/remote/origin*</code>.</p>
","0","8466686","0"
"10094128","97120","2012-04-10 18:11:25","4","4352","<git><svn><branch><git-svn>","Can I use git-svn to clone a specific branch of a remote SVN repo and commit back to it?","<p>I have a very large codebase with many tags and branches on a remote SVN server.</p>

<p>I'd like to use git to clone a specific branch to work on, then eventually merge it back to the remote SVN. Is this possible? Most documentation I've seen doesn't directly say this is supported.</p>
","0","97120",""
"10107677","1904","2012-04-11 14:11:41","0","1000","<git-svn>","git svn clone fails with HTTP path not found on moved svn trunk","<p>I'm using git svn to access an svn repository. The svn repository was recently re-organised, with the trunk and a branch being swapped around i.e. trunk was moved to branches/old-trunk, and branches/foobar was moved to trunk.</p>

<p>Running <code>svn co http://path/to/svn/trunk</code> works fine on the new trunk, and I can add, update, and commit files without any problems.</p>

<p>However, when I do <code>git svn clone http://path/to/svn --stdlayout</code> I get the following error:</p>

<blockquote>
  <p>HTTP Path Not Found: The path was not part of a repository: PROPFIND request failed on '/': '/' path not found at C:\Program Files (x86)\Git/libexec/git-core\git-svn line 2299</p>
</blockquote>

<p>Does anyone know how to get git svn working again?</p>
","0","1904",""
"10108169","244431","2012-04-11 14:38:21","1","193","<git><git-svn>","git-svn with strict permission","<p>I am working on a svn repository out of my control. It uses a standard layout with very strict permissions.</p>

<p>I have't read permission to the parent folder.</p>

<pre><code>svn://foo.bar/project/
svn://foo.bar/project/branches
</code></pre>

<p>But I can read <code>svn://foo.bar/project/trunk</code> and <code>svn://foo.bar/project/branches/x</code>.</p>

<p>If I use multiple remotes with git-svn, I can fetch and commit these branches. But the git-svn will not find the branch's parent.  Multiple remotes will be treated as different repositories.</p>

<p>It seems I can modify the git-svn to correct the follow parent source.  But I don't known perl.
Is it possible to write a script fix the branch's parent hash.  Or can I use a simple script to create new remote branch then let git-svn to fetch it.</p>
","0","244431",""
"46414983","850771","2017-09-25 22:15:00","0","412","<git><svn><git-svn>","git svn migration failing to pull the older history","<p>I am trying to migrate Project 'A' from svn to git. Unfortunately, the migration is pulling only the commits until 5 years ago when this project 'A' in subversion is moved from a different svn location to its current location. So all the history until that point of relocation is migrating fine but the history before that is visible in svn repository explorer in eclipse but not being able to fetch beyond that. Is there anything we can do to fetch that information as well?</p>
","1","850771","0"
"10485654","971741","2012-05-07 16:28:38","0","798","<git><github><git-svn><smartgit><phpfog>","Unable to pull changes from git repo","<p>I ve developed a php/Facebook app and I’ve hosted it over phpfog, the main functionality of the app is asking user for some information and then putting it csv format into a notepad file.</p>

<p>To access phpfog repository I am using a git-ui called Smart-Git 3, things are cool and fine as far as post changes are concerned.</p>

<p>But when I am trying to pull the changed made like updated and new entered information i am not getting it the .txt files remains the same and is not showing me the updated records added.</p>

<p>I am pretty confused with it as my whole app is completed an d people have entered info into it but I’m unable to retrieve that info.</p>

<p>Kindly help.</p>
","5","971741",""
"10510495","475345","2012-05-09 05:50:18","3","143","<git><git-svn>","git workflow with main svn repository using git-svn","<p>I'm in a big team which uses SVN as the revision control. </p>

<p>I'm in a subgroup of the big team which try to use git for some integration test of the codes from this subgroup.</p>

<p>Following is what we want to do for dailay work.</p>

<ol>
<li>A,B,C(people in the small group) do their coding work.</li>
<li>A,B,C check in the work to a git branch <code>integration-test</code>.</li>
<li>Rebase the latest change from <code>SVN trunk</code> to <code>integration-test</code> </li>
<li>Build image and do integration test.</li>
<li>Test pass, A,B,C check in their codes to 'SVN'</li>
<li>Goto step 1 </li>
</ol>

<p>The problem is: because our change has been committed into the git branch <code>integration-test</code> in step 2. and we committed the change to <code>SVN</code> in step 5. So, in step 3 of next round, the merge will have conflict for all the changes.</p>

<p>So, is there a good practice for this scenario? </p>
","0","475345","0"
"10513057","1265464","2012-05-09 09:12:43","1","377","<git><git-svn>","git-svn not working, reporting ""fatal: cannot exec 'git-svn': Not a directory""","<p>I am trying to migrate an svn repo to git. but i am stucked at </p>

<pre><code>git svn clone https://svn.xxx.com/repos/xxx/trunk ~/temp
</code></pre>

<p>which throws a ""fatal: cannot exec 'git-svn': Not a directory"" error</p>

<p>say i'm in directory ~/temp, even i run just ""git svn"", I got the same error message.</p>

<p>tried </p>

<pre><code>man git-svn
</code></pre>

<p>works well.</p>

<p>What's the problem please?</p>
","7","1265464",""
"28496850","1235010","2015-02-13 09:57:39","1","113","<git><svn><merge><git-svn>","""git-svn dcommit"" got an error after merged a git-svn repository whose remote svn repository is different","<pre><code>| Step# | svnA                  | svnB                  | gitA               | gitB                     |
|-------|-----------------------|-----------------------|--------------------|--------------------------|
|     0 | svnadmin create svnA  | svnadmin create svnB  |                    |                          |
|     1 | svn commit -m ""svnA1"" | svn commit -m ""svnB1"" |                    |                          |
|     2 |                       |                       | git svn clone svnA | git svn clone svnB       |
|     3 |                       |                       | git merge gitB     |                          |
|     4 |                       |                       | git svn dcommit    |                          |
|     5 |                       |                       |                    | git merge gitA           |
|     6 |                       |                       |                    | git svn dcommit [ERROR!] |

[ERROR!] = 
Unable to determine upstream SVN information from HEAD history.
Perhaps the repository is empty. at /usr/libexec/git-core/git-svn line 856
</code></pre>

<p>I'm trying to use 2 difference subversion repository [svnA] and [svnB] which is almost empty (Step0 and Step1).
And they have each git-svn repository [gitA] and [gitB] (Step2).</p>

<p>Merging [gitB] to [gitA] (Step3), [gitA]'s history includes commit ""svnA1"" and commit ""svnB1"". 
After dcommit (Step4), [svnA]'s history also includes commit ""svnA1"" and commit ""svnB1"".</p>

<p>At last, [gitB]'s will also include the two commit after merging [gitA] to [gitB] (Step5) and [svnB]'s after dcommit (Step6).
But I got ""Unable to determine upstream SVN information from HEAD history"" error while Step6.</p>

<p>What does this error mean? How can I resolve?</p>

<p>Thanks.</p>
","2","1235010",""
"10940213","305644","2012-06-07 21:34:14","2","223","<git><workflow><git-svn>","git: more efficient way to do this","<p>This is my normal workflow with git-svn:</p>

<ol>
<li>create a branch for an issue</li>
<li>commit after doing some work on branch</li>
<li>checkout master</li>
<li>svn rebase</li>
<li>checkout branch</li>
<li>rebase master</li>
<li>checkout master</li>
<li>merge branch</li>
<li>dcommit</li>
</ol>

<p>My goal here is to keep my history in a straight line, and also trying to minimize the headache of merges.</p>

<p>Is there a way to do this with less steps?</p>
","0","305644",""
"65655849","12875055","2021-01-10 16:51:33","0","254","<git><svn><git-svn><git-clone>","How do I use git svn to clone more than one branch, but not all?","<p>Cloning an entire svn repo is simple: <code>git svn clone svn://somesvnrepo --std-layout (or use --branches=/branches)</code>.</p>
<p>Cloning a single branch is also simple, <code>git svn clone svn://somesvnrepo/branches/mybranch</code></p>
<p>But how can I <em>git svn clone</em> multiple specific branches? Say I wanted to grab <code>/branches/red</code>, <code>/branches/green</code> and <code>/branches/blue</code>.</p>
","1","12875055",""
"47130778","3651937","2017-11-06 06:11:16","2","884","<git><git-svn>","How to fix 'git-svn' branch and 'origin/master' have diverged","<p>At work I use Git as a client to SVN, using <code>git svn</code>. Also I push my Git repository to a remote.
The SVN repository is used by a team of people in my office, while the Git remote repository is used only by me at the moment. This is all part of the process of moving from SVN to Git.</p>

<p>My workflow consist of committing my changes to my local Git repo, then updating my working copy from the SVN changes by other people, committing to SVN, and finally pushing to the Git remote. Something like this:</p>

<pre><code>$ git commit
$ git svn rebase
$ git svn dcommit
$ git push origin
</code></pre>

<p>This has worked without issues.</p>

<p>But today, by mistake, I swapped those two last steps around, so I pushed to origin, and then I did <code>git svn dcommit</code>.
This has caused the <code>origin/master</code> to diverge from <code>master</code>, but more importantly to diverge from the <code>git-svn</code> remote. Now a <code>git log</code> looks like this:</p>

<pre><code>$ git log --oneline --decorate --graph --all -5
* 613ffa60 (HEAD -&gt; master, git-svn) Fix typo on message displayed to user
| * db2e67ef (origin/master) Fix typo on message displayed to user
|/
* 24d8fab9 Commit C
* c0c1b598 Commit B
* e31c07c0 Commit A
</code></pre>

<p>For simplicity I have modified the commit messages above, but note that the two last divergent commits in <code>master</code> and <code>origin/master</code> actually contain the same change.
How can I fix this?</p>

<p>I have tried various things like <code>git rebase origin/master</code>, or <code>git reset --hard origin/master</code>, but all I get with that is <code>master</code> and <code>origin/master</code> to point at the same commit. Like this:</p>

<pre><code>$ git log --oneline --decorate --graph --all -5
* 613ffa60 (git-svn) Fix typo on message displayed to user
| * db2e67ef (HEAD -&gt; master, origin/master) Fix typo on message displayed to user
|/
* 24d8fab9 Commit C
* c0c1b598 Commit B
* e31c07c0 Commit A
</code></pre>

<p>Those would be solutions if you are not using <code>git-svn</code>, but how do I get <code>git-svn</code> to also point at the same commit? Will I need an extra commit where everything is merged?</p>

<p>As I said before, currently I am the only user of the Git remote, so I won't mind re-writing history in the remote if necessary.</p>
","0","3651937",""
"10982285","1449166","2012-06-11 14:39:41","2","724","<git><svn><git-svn>","Missing revisions after ""git svn clone""","<p>After running:</p>

<pre><code>git svn clone https://svn.mycompany.eu/project/trunk
</code></pre>

<p>There are some missing revisions (for exemaple 500 from 4700 of total revisions). It's a problem, because we have joined a number of commits with a number of tasks in Trac. Can anybody help, please?</p>
","2","1449166","0"
"47152858","4741053","2017-11-07 08:10:26","1","798","<git><svn><version-control><git-svn>","Migrate multiple svn repositories as branches of one git repository","<p>My team is currently working on two projects, each having a separate svn repository with standard layouts like this:</p>

<pre><code>Project1/
   Trunk
   Branches/
     module1
     module2(ext)
   Tags
 Project2/
   Trunk/
   Branches/
     module1
     module2(ext)
   Tags
</code></pre>

<p>Each project originated from a common ancestor at some point in time. It seems to me that using git as version control would be natural, since some bug fixes and modules should be applied to both projects. Today the best we can do is share some external modules (as module2 seen in the example), and manage those as separate svn repositories. This is fine as long as we make our externals perfectly generic, but it won't allow sharing changes in all other - different but not so different - modules (like module1).</p>

<ol>
<li><p>Is there a way to migrate both projects to one git repository, having the trunk and branches of each as a branch like this:</p>

<pre><code>COMMON_PROJECT_REPO
  Ancestor
     |____________
     |            \
  Project1     Project2
     |             |
     |             |
  __/|             |\__
 |   |             |   |
 |   |             |   |
br1  |             |  br2     
</code></pre>

<p>And would you consider this the right layout?</p></li>
<li><p>How would I include my externals as folders in my git repository?</p></li>
<li>Am I approaching the situation in the wrong way?</li>
</ol>

<p>Thank you!</p>
","4","4741053",""
"28927049","1046387","2015-03-08 13:36:52","0","192","<git><svn><git-svn>","git-svn: Losing author in svn log after git svn dcommit","<p>I'm learning git-svn currently and it looks like SVN loses the author after I do <code>git svn dcommit</code>. When I look in the svn log, the commit is there but with no author.</p>

<p>I've read about this <code>authors.txt</code> file, and learnt how to tell git about it but my efforts didn't work.</p>

<p>My global <code>.gitconfig</code> file contains:</p>

<pre><code>[svn]
    authorsfile = C:\\path\\to\\authors.txt
</code></pre>

<p>And my <code>authors.txt</code> file contains:</p>

<pre><code>Joe = Joe Bloggs &lt;joe.bloggs@example.com&gt;
</code></pre>
","0","1046387",""
"11012280","78310","2012-06-13 09:46:57","3","625","<git><git-svn>","git svn fetch does not update a recently created branch","<p>I just recently created a branch in our subversion repository. Running git-svn does not see the branch for some reason. The only thing that I can think of is that the trunk is behind the branch because there have been no commits on the trunk since the branch was created.</p>
","6","78310","0"
"65703336","7319534","2021-01-13 13:52:13","0","169","<git><svn><gitlab><git-svn>","svn to git migration of a branch with history","<p>I have a SVN branch which I want to move to git but with all the history of the branch. I tried a lot of permutations and combinations as below but none of them worked. Could someone please help me? I am new to git. I have tried svn to git migration without history and it has worked properly.</p>
<pre><code>      svn log -q &lt;SVN_BRANCH_REPO&gt; | awk -F '|' '/^r/ {sub(&quot;^ &quot;, &quot;&quot;, $2); sub(&quot; $&quot;, &quot;&quot;, $2); print $2&quot; = &quot;$2&quot; &lt;&quot;$2&quot;&gt;&quot;}' | sort -u &gt; users.txt

    git svn clone --stdlayout --no-metadata --authors-file=users.txt &lt;SVN_BRANCH_REPO&gt; tmp
</code></pre>
<p>the tmp here returns an empty directory. I tried :</p>
<pre><code>     git svn clone -r HEAD --no-metadata --authors-file=users.txt &lt;SVN_BRANCH_REPO&gt; tmp1
</code></pre>
<p>Post this I did the following steps:</p>
<pre><code>    cd tmp1
    git svn fetch
    git remote add origin git@gitlab.com:mehtakar/gitexample.git
    git commit --amend --reset-author
    git push -u origin master
</code></pre>
<p>this also does not commit the history in the master branch. Could someone please let me know what am I missing?</p>
","8","7319534",""
"28935674","3001356","2015-03-09 05:21:43","-1","540","<git><git-svn><version-control-migration><svn2git>","SVN to git migration only creates .git folder","<p>I am trying to migrate from svn to git. I tried doing so using the following tools</p>

<pre><code>git-svn
svn2git
</code></pre>

<p>However both tools only created a <code>.git</code> folder, without checked out files and folders (speaks a working copy). </p>

<p>With <code>git-svn</code> I tried to execute the following</p>

<pre><code>git svn clone REMOTE_SVN_REPO
svn2git REMOTE_SVN_REPO
</code></pre>

<p>What exactly am I doing wrong? </p>

<p>p.s. I tried googling but all the blogs claim that both of these commands should have made a local repository with all the files and folders. Also once I'd converted svn project to mercurial project  using hg convert. After converting svn project to mercurial project I'd done hg up or something like that which brought all files and folders of the project and I could easily push that project to the mercurial server. Here All I have is a .git folder . What step am I missing or what exactly am I doing wrong?</p>
","1","3001356",""
"65705995","9237139","2021-01-13 16:30:13","0","12","<git><svn><git-svn>","Can a SVN repo path be used on a ""git-svn clone"" instead of a SVN URL?","<p>High level,  I am tasked with converting a svndump file to a GIT repository on a linux RHEL-7 box.  The linux box does not have apache installed so I don't have ability to use a SVN URL in my git-svn commands.  I have run &quot;svnadmin load&quot; command have created a SVN repository.</p>
<p><strong>Bottom line,  how do I run the &quot;git-svn clone&quot; command locally on the linux box without using any SVN URL.</strong></p>
<p>Right now svn repo is located at /usr/data/</p>
<p>I looked at all other svn-git related stackoverflow entries, but none address this particular issue I am having.   Thanks for any help.</p>
","2","9237139",""
"11021804","337582","2012-06-13 19:15:57","6","1913","<git><path><git-svn><homebrew>","How does git decide which version of svn to use in git-svn?","<p>I have installed <code>git</code> and <code>svn</code> with homebrew on my mac running 10.7.4. There is a version of <code>svn</code> on my machine in <code>/usr/bin</code> which appears to be the version that <code>git svn</code> is using. </p>

<pre><code>$ git --version
git version 1.7.10.4

$ svn --version
svn, version 1.7.5 (r1336830)

$ git svn --version
git-svn version 1.7.10.4 (svn 1.6.17)

$ /usr/bin/svn --version
svn, version 1.6.17 (r1128011)
</code></pre>

<p>So, can I change the version of svn that git-svn uses? If so, how do I go about it?</p>

<p>Thanks for reading.   </p>

<p>--Updated for comment--</p>

<pre><code>$ which git svn
/usr/local/bin/git
/usr/local/bin/svn

$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/usr/local/git/bin
</code></pre>
","1","337582","0"
"11028840","51197","2012-06-14 07:48:48","17","9875","<git><svn><git-svn>","Use git on existing SVN repo","<p>I work with a legacy <code>svn</code> repo. However, I would like to enjoy the benefits of <code>git</code> on my local machine.</p>

<ul>
<li>The first option is <code>git init</code> the root of my current repo, write code, and independently commit code locally (<code>git commit</code>) and remotely (<code>svn commit</code>). </li>
<li>The second option is <a href=""http://schacon.github.com/git/git-svn.html"" rel=""noreferrer""><code>git-svn</code></a>, but I don't know if it's worth the troube of learning the nuances of a new tool.</li>
</ul>

<p>How should I go about this?</p>
","0","51197","0"
"29281518","1709708","2015-03-26 14:48:21","1","42","<git><version-control><git-svn>","What is going wrong in my git svn workflow?","<p>Since I prefer git over svn I've tried to clone the svn repository of my company and work on it over git svn. So far this works fine. I can receive svn updates and commit my changes as usual.</p>

<p>However I'm having serious issues when changes overlap. I.e. I've been working on a feature which is not fully completed yet, so I have committed one part of it into my private git working copy but now can't go for a SVN rebase to update and merge my version with the svn head. When I try to do so, it tells me that my working copy isn't clean and that I need to stash my changes. Then svn fetch is running and a window pops up (I'm using TortoiseGit) where I can configure the rebase process. I select the master branch at the state of my partial feature and remotes/git-svn as upstream. Clicking 'start rebase' it again asks me to stash my changes twice in a row which is already very strange. Doing so it outputs an error message: 'your local changes to the following files would be overwritten by merge: my_modified_partial_features_files.foo'. Why is this a problem? I thought that's why I stashed before? If I then abort the rebase, it asks me to stash pop and again fails, telling me the merge would fail for all files now changed in the last svn commit.</p>

<p>Where is my mistake? Right now I can't get even push my changes into the svn repository because I have to update and merge first. So basically I can't get back and forth at all.</p>
","4","1709708","0"
"29284063","2267151","2015-03-26 16:37:57","1","385","<git><svn><version-control><git-svn><bitbucket-server>","Mirror git branch to svn repo","<p>I'm looking for a way of setting up an existing git repository (cloned from a central repo hosted on Atlassian stash) so that changes from a specfic branch are synchronised to a path on an SVN repository. I'm not particularly interested in fetching changes back from SVN or synchronising branches and tags; I just want to have an SVN ""mirror"" of one of my branches.</p>

<p>After reading the git-svn man page and various other sources I got as far as setting up the svn repo with git svn init, but it will refuse to dcommit anything:</p>

<pre><code>$ git --version
git version 1.9.5.msysgit.0
$ git clone ssh://git@stash-server.mydomain.com:4321/myproject/playground.git
Cloning into 'playground'...
$ cd playground
$ svn mkdir --parents https://svn-server.mydomain.com:5432/svn/playground/trunk -m ""Importing git repo"" 
Committed revision 15900.
$ git svn init https://svn-server.mydomain.com:5432/svn/playground/trunk
$ git svn fetch
W: Ignoring error from SVN, path probably does not exist: (175007): HTTP Path Not Found: REPORT request failed on '/svn/145273/!svn/bc/100/playground/trunk': '/svn/145273/!svn/bc/100/playground/trunk' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
r15900 = 1ad941791edb06c4df8281cd31e69ce5d508e728 (refs/remotes/git-svn)
$ git svn dcommit
Unable to determine upstream SVN information from HEAD history.
Perhaps the repository is empty. at C:\Program Files (x86)\Git/libexec/git-core\git-svn line 856.
</code></pre>

<p>""Perhaps the repository is empty"" -> of course it is, I'm trying to ""clone"" a git branch into svn. Any idea what I'm doing wrong here?</p>
","0","2267151",""
"47495413","1397945","2017-11-26 11:06:04","2","691","<git><git-svn><svn2git>","""git pull <remote> master"" into a sub-directory","<p><strong>Background</strong>:</p>

<p>I'm trying to move a package from an SVN repo to a GIT repo, while preserving it's history. </p>

<p><strong>Steps</strong>:</p>

<ul>
<li>I've used <code>git-svn</code> to generate a GIT repository for the SVN one. </li>
<li>I'm following the steps mentioned <strong><a href=""http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/"" rel=""nofollow noreferrer"">here</a></strong> to move the code from one GIT repository to the other, while preserving history.</li>
</ul>

<p>I'd like to move that package into it's own sub-directory in the destination git repository. However, I'm stuck at this step: <code>git pull &lt;remote&gt; master --allow-unrelated-histories</code> </p>

<p>This pulls the code into the top level git directory. How do I pull that code into a sub-directory instead? </p>

<p>I've tried the following based on some SO answers, but that didn't work:</p>

<ul>
<li><code>git pull -work-tree &lt;working_dir&gt; -git-dir &lt;working_dir&gt; &lt;remote&gt; master</code></li>
<li><code>git pull -s subtree -Xsubtree=&lt;path_prefix&gt; &lt;remote&gt; master</code></li>
</ul>

<p><strong>Clean up step:</strong></p>

<p>The package will be maintained in the destination GIT repo, so I intend to:</p>

<ul>
<li>delete it from the SVN repo. </li>
<li>And, also delete the intermediate GIT repo which will not be required once the package has been moved. </li>
</ul>
","0","1397945","0"
"11398415","204900","2012-07-09 15:37:26","7","2420","<git><git-svn>","git-svn clone fails unexpectedly","<p>I run the following:</p>

<pre><code>git svn clone --stdlayout --no-metadata -A users.txt -r 3760:4662 svn://kumquat.geoplan.ufl.edu/Projects/S4-Geocoding S4-Geocoding-SVN.git
</code></pre>

<p>It begins running and runs fine for a while, then bombs:</p>

<pre><code>...
        M       S4.Geocoding.Client/App.xaml.cs
        M       S4.Geocoding.Client/MainPage.xaml.cs
        M       S4.Geocoding.Client/CodingPage.xaml
        M       S4.Geocoding.Client/CodingPage.xaml.cs
r4163 = 498dad8ce3730390393fc13b183fdbbff7108e6b (refs/remotes/trunk)
        M       S4.Geocoding.Client/CodingPage.xaml.cs
r4164 = 728b706b27d60d91659c144c3fac98cdbd1b09b2 (refs/remotes/trunk)
Found possible branch point: svn://kumquat.geoplan.ufl.edu/Projects/S4-Geocoding/trunk =&gt; svn://kumquat.geoplan.ufl.edu/Projects/S4-Geocoding/branches/auto-advance-crash-report-viewer, 4160
Use of uninitialized value $u in substitution (s///) at /usr/libexec/git-core/git-svn line 1728.
Use of uninitialized value $u in concatenation (.) or string at /usr/libexec/git-core/git-svn line 1728.
refs/remotes/trunk: 'svn://kumquat.geoplan.ufl.edu' not found in ''
</code></pre>

<p>What could be going on? I don't know where to start to troubleshoot this.</p>
","2","204900","0"
"11417005","584676","2012-07-10 15:43:50","0","92","<svn><git-svn>","git svn error happens on dcommit, but not on fetch or rebase","<p>I am receiving the following error when I run 'git svn dcommit' on a branch of the repository:</p>

<pre><code>HTTP Path Not Found: PROPFIND request failed on '/svn/Project/branches/3.34': '/svn/Project/branches/3.34' path not found at C:\Program Files (x86)\Git/libexec/git-core\git-svn line 4970
</code></pre>

<p>However, 'git svn fetch' and 'git svn rebase' work fine. And the main trunk dcommits just fine as well. Any suggestions?</p>

<p>Oh, worthy to note, the svn actual path should be /svn/Project/branches/v3.34, not just 3.34. But as noted above the other commands I regularly use still work fine with the part that breaks dcommit.</p>
","2","584676",""
"11446376","520162","2012-07-12 06:50:08","5","636","<git><svn><proxy><git-svn><ntlm>","Could I use interactive proxy authentication with git-svn?","<p>I'm behind an authenticating proxy and need to access a remote SVN repo over https using <code>git svn</code>.</p>

<p>The proxy is defined in my <code>~/.subversion/servers</code> file.</p>

<p>When I start with <code>git svn fetch</code>, I get an error message:</p>

<blockquote>
  <p>RA layer request failed: OPTIONS of '<a href=""http://url/to/repos/branches/experimental"" rel=""nofollow noreferrer"">http://url/to/repos/branches/experimental</a>'</p>
</blockquote>

<p>Ok. <a href=""https://stackoverflow.com/a/5430368/520162"">No problem.</a> Let's write down the credentials to <code>~/.subversion/servers</code> &rarr; everything works fine.</p>

<p>However, I'm a <em>little</em> bit uncomfortable having my domain credentials stored in a plain text file on my hard disk.</p>

<p>Are there other ways (<strong>especially interactive ones</strong>) to authenticate at my proxy when using <code>git svn</code> over https?</p>

<p><strong>Info:</strong> The PC where this should be accomplished is in a Windows domain and authentication is done with NTLM.</p>
","3","520162","0"
"11473382","18321","2012-07-13 15:18:25","0","440","<git><merge><branch><git-svn>","git branches show diffs but merge does nothing","<p>I have two branches, ""svnbranch"" that's updated via ""git svn rebase"" and ""master"" used by other git users that push their changes.</p>

<p>Right now when I do ""git diff master"" I see some changes in master that I want to merge into svnbranch so I can ""dcommit"" them. However, when I do ""git merge master"" nothing happens:</p>

<p>git checkout svnbranch</p>

<p>git diff master</p>

<p>... some changes are shown</p>

<p>git merge master</p>

<p>Already up-to-date</p>

<p>Why don't the changes get merged in?</p>

<p>[Note: What I'm really trying to do is generate a git repo that's a mirror of our SVN repo and manually merge changes both ways. I tried automating that but can't get that running smoothly so I manually merge every few days]</p>
","3","18321",""
"12445153","150826","2012-09-16 07:29:53","2","1523","<git><svn><git-svn>","git svn move directories","<p>I'm working localy with git while our remote server is svn.
I had to move many files and folders within the working copy.
What I did:</p>

<ol>
<li><code>git mv SRC_FOLDER DST_FOLDER</code></li>
<li><code>git svn dcommit</code></li>
</ol>

<p>Now, the SVN repository contains the new files with all the old history.
However, since git doesn't track empty directories, and since I didn't use <code>git svn dcommit --rmdir</code>, all of the old directories were left empty in the svn reposirtoy and the new directories does not contain the old history.</p>

<p>Is there any way to move the old directory history to the new one AFTER I commited the changes.</p>
","0","150826",""
"12517138","290284","2012-09-20 16:45:01","5","831","<git><svn><git-svn><codeplex>","using git to clone a CodePlex project that uses SVN","<p>I have a project hosted in CodePlex, I chose SVN when I created this project.
Now I try to use Git to clone this project.</p>

<p>I tried: ""git svn clone the_url""</p>

<p>But it just hangs forever. It did not ask me for username or password or anything, just hangs.</p>

<p>Any idea how to get this to work?</p>
","5","290284",""
"12520140","234240","2012-09-20 20:08:46","1","434","<wordpress><git><svn><deployment><git-svn>","What's the correct way to deploy a git repo to Wordpress SVN?","<p>I've seen a hundred different outdated, makeshift scripts that either use git-svn or do all of the hard work behind the scenes, but I still don't feel like I've found the right way to do this.</p>

<p>I have a local git repo that I want to deploy to my Wordpress-hosted SVN repo. The ideal functionality would be that I develop locally, push to github when I'm ready, then send all of the changes I've made to the wordpress repo. </p>

<p>My remote wordpress repo would update accordingly, removing files and folders that may not longer exist due to refactoring and tagging the branches accordingly. My github repo should act as usual, tagging the incoming versions.</p>

<p><a href=""https://github.com/deanc/wordpress-plugin-git-svn"" rel=""nofollow"">https://github.com/deanc/wordpress-plugin-git-svn</a></p>

<p><a href=""http://danielbachhuber.com/2010/09/29/how-to-properly-use-git-with-wordpress-org-subversion/"" rel=""nofollow"">http://danielbachhuber.com/2010/09/29/how-to-properly-use-git-with-wordpress-org-subversion/</a></p>
","0","234240","0"
"30151005","312725","2015-05-10 11:46:33","0","58","<git><svn><git-svn><git-config>","Understanding git-svn configuration","<p><code>git-svn</code> man page has this example:</p>

<pre><code>[svn-remote ""project-a""]
        url = http://server.org/svn
        fetch = trunk/project-a:refs/remotes/project-a/trunk
</code></pre>

<p>So, as I understand it, it configures the svn to fetch changes from <code>http://server.org/svn/trunk/project-a</code>, which is a result of concatenation of the relative path of <code>trunk/project-a</code> and the root url, which is <code>http://server.org/svn</code>. Is this correct?</p>

<p>Also, I am confused by the <code>:</code> separator in the <code>fetch</code>. Does it serve as a separator of elements in the list, or a tuple?</p>

<p>And finally, why is <code>trunk/project-a</code> repeated twice in this list, and why does it have <code>refs/remotes</code> the second time?</p>
","0","312725",""
"30162834","312725","2015-05-11 08:26:16","1","25","<git><svn><version-control><git-svn>","Setting up git-svn to follow a non-standard svn repo","<p>Here's the structure of my SVN repo:</p>

<ul>
<li><code>http://server.net:8080/svn/CompanyName</code> — svn root</li>
<li><code>http://server.net:8080/svn/CompanyName/ProjectBranch3</code> — current branch of the project</li>
<li><code>http://server.net:8080/svn/CompanyName/ProjectBranch2</code> — previous branch of the project</li>
<li><code>http://server.net:8080/svn/CompanyName/ProjectBranch1</code> — first branch of the project</li>
<li><code>http://server.net:8080/svn/CompanyName/SomeRandomProject</code> — another project in the same root that I <strong>don't want to check out</strong>. There are lot of them</li>
<li><code>http://server.net:8080/svn/CompanyName/Tags/ProjectName/</code> — tags for the project</li>
</ul>

<p>Project was developed as <code>ProjectBranch1</code> at first, then copied into <code>ProjectBranch2</code>, and <code>ProjectBranch3</code> in the end. I want to fetch the project with all of it's history, and I want git to understand that each branch started where previous one finished.</p>

<p>Now, the <code>git init</code> command has a <code>-b</code> option to specify a subfolder that is used for branches. However, the svn branches are not contained to a subfolder; as described above, they are located right in the root as individual sub-directories.</p>

<p>How can I configure <code>git-svn</code> to achieve this?</p>
","1","312725",""
"13417643","1156561","2012-11-16 13:31:26","4","132","<git><git-svn>","Get remote git-svn branch for current local branch","<p>I'm looking for a snippet that will give me the ""pseudo-remote"" upstream branch used by git-svn for the currently checked out branch.</p>

<p>Let's say my local repository was cloned from svn with <code>git svn clone -s --prefix=my-svn/ ...</code> and I'm on some local branch <code>topic/foo</code> based on svn branch <code>bar</code>.</p>

<p>How can I figure out which branch under <code>refs/remotes/</code> would be updated by a <code>git svn fetch --parent</code>? (Preferrably without hard-coding any layout information configured in the initial clone.)</p>
","0","1156561",""
"30976493","4997872","2015-06-22 09:32:09","2","552","<git><svn><migration><git-svn><gitattributes>","How to tell git-svn that files are NOT binary","<p>I am converting a large SVN-repo (~28k Commits) into Git using git-svn.
When the process was through (~ 1 1/2 weeks) I encountered some .ps1-files being treated as binary in the diffs.
I have commited a .gitignore file on master (after the conversion of course) that tells git to treat the files as text:</p>

<pre><code>* -text
*.snk binary
*.ico binary
*.chm binary
and so on...
</code></pre>

<p>Note: -text just tells it to treat line endings as is (not storing them with Unix line endings in its database)</p>

<p>However I was only able to add the .gitattributes AFTER the conversion of course.</p>

<p>The .gitattributes does not quite work out in Git-extensions for previous commits/diffs but that might be another problem that I don't want to discuss right now. The main problem is the files that are stored binary in git.</p>

<p>I read somewhere that you could store a gitattributes under .git/INFO. I could do this before the conversion process but I haven't given that another try since the conversion takes more than a week and I would like to get it right at the first strike.</p>

<p>So basically my question is now the following:
With the converted repository in mind: Can I convert existing binary files in an existing git repository to text files?</p>

<p>If not: How would I tell git-svn which files are to be treated as text/binary using gitattributes for the whole conversion procedure?</p>

<p>EDIT:
The problem was not anything in the conversion (git treating files as binary on purpose) but files being treated as binary by 'git diff' or Git-extensions. (see answer)
When using a diff tool (for example BeyondCompare) you can still work with those files. It is then only a little annoying in the history. The conversion worked flawless since the files were migratet as is. (UTF-16 that is)</p>
","0","4997872",""
"13447705","13760","2012-11-19 04:30:50","11","2130","<git><git-svn><git-subtree>","Is git svn compatible with git subtree?","<p>Now that git subtree has been merged into the core git distribution (its also on Msysgit as of 1.8.0), does anyone know if git svn works with git subtree?</p>

<p>Note: I am not talking about the subtree merge strategy, but about <a href=""https://github.com/gitster/git/blob/634392b26275fe5436c0ea131bc89b46476aa4ae/contrib/subtree/git-subtree.txt"" rel=""nofollow noreferrer"">this</a>.</p>

<p><a href=""https://stackoverflow.com/questions/4519679/using-git-submodules-in-a-git-svn-project"">Git submodules cannot be used directly when you are using git svn</a>. Instead, it requires <a href=""http://fredericiana.com/2010/01/12/using-svn-repositories-as-git-submodules/"" rel=""nofollow noreferrer"">another level of indirection</a>. In addition, the git subtree workflow is <a href=""https://stackoverflow.com/questions/1596822/git-submodules-workflow"">more convenient when you're tracking third party respositories</a>, which is something that happens when you use svn too.</p>

<p>My question is, how do I find out if git subtree has any issues when used with git svn?</p>
","5","13760","0"
"31749455","263306","2015-07-31 15:05:00","6","196","<git><git-svn>","Filter Deletes during git svn clone?","<p>Problem: Legacy svn repo has a directory that is synced from user config on a prod server.</p>

<p>The sync effectively:</p>

<ul>
<li>deletes all files</li>
<li>commits</li>
<li>copies all files</li>
<li>commits</li>
</ul>

<p>Is it possible to filter out all of the file deletes during a git svn clone of this repo?</p>

<p>And subsequent git svn fetches as well?</p>

<p>I don't necessarily want to filter the entire commit just the parts that delete files.</p>

<p>This would mean changing the subsequent add files to become modify files.</p>
","0","263306","0"
"14216864","1463042","2013-01-08 14:16:01","0","2289","<git><git-svn>","Error while pushing with git (error: cannot lock existing info/refs)","<p>I've been working on a project with Subversion and we have recently decided to use git instead.</p>

<p>I used git-svn to create a new git local repository and on the server, I ran:</p>

<pre><code>mkdir myproject.git
cd myproject.git
git init --bare
git update-server-info
</code></pre>

<p>I ran git update-server-info because I'm using HTTP.</p>

<p>On my local repository on my computer, I ran:</p>

<pre><code>cd myproject
git remote add origin http://url.to.my.server/git/repositories/myproject.git
git push origin --all
</code></pre>

<p>Then I get this error message from my last command:</p>

<pre><code>Unable to create branch path http://path.to.my.server/git/repositories/myproject.git/info/
error: cannot lock existing info/refs
fatal: git-http-push failed
</code></pre>

<p>Any ideas?</p>

<p>Thanks.</p>
","0","1463042",""
"49054148","9429759","2018-03-01 16:19:59","2","223","<git-svn><git-filter-branch>","reconcile git svn after git filter-branch","<p>I am attempting to convert a SVN repository into git. The SVN repository is being actively used, while we work out the details of converting.</p>

<p>I followed all the guides and created an author mapping file and cloned the SVN repository.</p>

<p><code>&gt; git svn clone https://host/svn/Project --trunk=trunk -A svn-author-map.txt</code></p>

<p>Concurrently with this switch to git, I would also like to atone for some of the sins of the SVN past (stored passwords, etc).  However as soon as I alter any of the history with <code>git filter-branch</code> or BFG, I seem to break the ability to incorporate any updates from SVN.</p>

<p><code>&gt; git svn fetch --fetch-all
fatal: Invalid revision range [sha from clone]..refs/remotes/trunk</code></p>

<p>Is there a way to refresh the git-svn ids to the post filter-branch ids? Or is there no going back after changing any history?</p>
","0","9429759",""
"67364853","7266218","2021-05-03 07:14:31","0","481","<git-svn>","Why my git svn with error ""dyld: lazy symbol binding failed: Symbol not found: _svn_ra_make_callbacks""","<p>I got this problem when I use git svn to checkout my svn repos.Then I follow some suggestions from website and try to reinstall svn:core by</p>
<pre><code>sudo cpan SVN:Core
</code></pre>
<p>but I still got following error when I try to check out a svn repos.</p>
<pre><code>dyld: lazy symbol binding failed: Symbol not found: _svn_ra_make_callbacks
Referenced from: /usr/local/Cellar/perl/5.32.0/lib/perl5/site_perl/5.32.0/darwin-thread- 
multi-2level/auto/SVN/_Ra/_Ra.bundle
Expected in: flat namespace

dyld: Symbol not found: _svn_ra_make_callbacks
Referenced from: /usr/local/Cellar/perl/5.32.0/lib/perl5/site_perl/5.32.0/darwin-thread- 
multi-2level/auto/SVN/_Ra/_Ra.bundle
Expected in: flat namespace

error: git-svn died of signal 6
</code></pre>
<p>I check from website that the function is declared in the library header:</p>
<pre><code>libsvn_swig_perl/swigutil_pl.h
</code></pre>
<p>But I didn't find error message related this lib (I did see some warning) when I install SVN:Core.
Are there something I need to setup or check for this issue when I install SVN:Core to make my git svn check out work properly?</p>
<p>Thank you~~</p>
<p>Eric</p>
","0","7266218",""
"55216886","1259360","2019-03-18 08:03:29","-1","354","<git><svn><git-svn>","""git svn init"" hangs and does not create valid repo","<p><code>git svn init &lt;https://...&gt; -T trunk -b branches -t tags --username &lt;login&gt;</code> outputs</p>

<pre><code>Initialized empty Git repository in &lt;path&gt;
</code></pre>

<p>and then it always hangs. The created <code>.git</code> directory is configured incorrectly, in particular, the <code>.git\config</code> file is missing the <code>[svn]</code> section with paths to trunk and branches directories. Even when I fill in the <code>.git\config</code> manually, the subsequent <code>git fetch</code> hangs again. I suspect this might be caused by the wrong authentication?</p>

<p>Concerning the authentication, I followed <a href=""https://stackoverflow.com/a/44641961/1259360"">https://stackoverflow.com/a/44641961/1259360</a>, and it seems to me that <code>git</code> actually reads these copied credentials.</p>

<p><strong>Edit:</strong> Concerning possible duplicate questions: They are related to <code>fetch</code>, not <code>init</code>, which assumes the git repo has been already created.</p>

<p>Any idea what might be wrong?</p>

<p>Windows 7 Pro x64, Git for Windows v2.20.1 (Dec 2018)</p>
","5","1259360",""
"72551830","2965321","2022-06-08 20:28:15","1","171","<git><svn><version-control><git-svn>","git svn rebase errors","<p>When I do <code>git svn rebase</code> on <code>trunk-svn</code> (which is my local copy of the SVN repo's <code>trunk</code> branch), I get the following error:</p>
<pre><code>fatal: invalid upstream 'refs/remotes/origin/trunk'
rebase refs/remotes/origin/trunk: command returned error: 128
</code></pre>
<p>On a different branch, I get a different error:</p>
<pre><code>Unable to determine upstream SVN information from working tree history
</code></pre>
<p>Checking out a new local copy of a different remote branch (which I had never checked out before) works fine, both the <code>git checkout -b ...</code> and the <code>git svn rebase</code> (with subsequent <code>git svn rebase</code> saying &quot;up to date&quot;).</p>
<p>As far as I know, nothing changed about my local repository or the remote—this just started happening one day.</p>
<p>Here is what the SVN bit of <code>.git/config</code> looks like:</p>
<pre><code>[svn-remote &quot;svn&quot;]
    url = svn://foo.bar.com/svn
    fetch = REPONAME/trunk:refs/remotes/origin/trunk
    branches = REPONAME/branches/*:refs/remotes/origin/*
    tags = REPONAME/tags/*:refs/remotes/origin/tags/*
</code></pre>
<p>This is the same as what I see when I do a fresh <code>git svn clone -s</code> of the repo. (I don't want to just use the fresh clone because I have a LOT of unmerged work in my old copy.)</p>
<p>And here are the relevant bits of <code>.git/config</code> for the branches in question:</p>
<pre><code>[branch &quot;trunk-svn&quot;]
    remote = gitlab
    merge = refs/heads/trunk-svn
[branch &quot;bugfix-svn&quot;]
    remote = gitlab
    merge = refs/heads/bugfix-svn
[remote &quot;gitlab&quot;]
    url = git@gitlab.company.com:user.name/repo_name.git
    fetch = +refs/heads/*:refs/remotes/gitlab/*
</code></pre>
<p>Previous troubleshooting attempts have failed:</p>
<ol>
<li><code>git update-ref refs/remotes/git-svn refs/remotes/gitlab/trunk-svn</code>: No apparent output of this command; same error happens with <code>git svn rebase</code> on <code>trunk-svn</code>.</li>
<li><code>git fsck</code> (suggested <a href=""https://stackoverflow.com/questions/4073956/how-do-i-resolve-a-git-svn-index-mismatch#comment4378841_4073956"">here</a>) shows only dangling trees, commits, and blobs—i.e., nothing appears to be missing.</li>
<li>Removing <code>.git/svn/.caches</code> (idea derived from a suggestion <a href=""https://vitalidze.github.io/2013/06/27/Git-SVN-command-error-128/"" rel=""nofollow noreferrer"">here</a>) makes no difference.</li>
<li>Adding <code>rewriteRoot</code> and <code>rewriteUUID</code> as suggested <a href=""https://stackoverflow.com/a/4061493/2965321"">here</a> makes no difference.</li>
</ol>
<p>Any ideas would be much appreciated! Let me know if I can provide any more info that might be useful.</p>
","3","2965321",""
"52747582","9220132","2018-10-10 19:35:02","0","24","<git><svn><git-svn>","git-svn merging when branches don't line up","<p>I suspect this may simply be an impedance mismatch between <code>git</code> and <code>svn</code>, but I wanted to ask the SO community for advice.</p>

<p>I am working on a project that uses <code>svn</code> for version control. That's not going to change, and I have no control over it. I've happily been doing my work on my branch using <code>git-svn</code>. However, I ran into an odd problem related to the strange way the SVN project was set up.</p>

<p>In SVN, the project looks like this:</p>

<ul>
<li><em>project root</em>

<ul>
<li>branches

<ul>
<li>MyBranch 

<ul>
<li>Dir1</li>
<li>Dir2</li>
<li><em>etc.</em></li>
</ul></li>
</ul></li>
<li>trunk

<ul>
<li>Proj_Main

<ul>
<li>Dir1</li>
<li>Dir2</li>
<li><em>etc.</em></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p>.git/config:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = http://svn-repo
    fetch = project/trunk:refs/remotes/trunk
    branches = project/branches/*:refs/remotes/*
    tags = project/tags/*:refs/remotes/tags/*
</code></pre>

<p>When the branches were created, they were created one level below <code>trunk</code>. I had no control over this either.</p>

<p>When I try to merge from <code>MyBranch</code> to <code>trunk</code>, my tree merges one level up. That is, <code>MyBranch/Dir1</code> has no relationship to <code>trunk/Proj_Main/Dir1</code>. In <code>svn</code> natively, it does understand this relationship, and I can merge using <code>svn</code> tools, but <code>git</code> is lost.</p>

<p>Is there a way I can tell <code>git</code> that <code>master</code> points to <code>trunk/Proj_Main</code> instead of just <code>trunk</code>?</p>
","3","9220132",""
"52752995","730346","2018-10-11 05:43:03","1","30","<git><svn><git-svn>","How to checkout some directories by ""git svn""?","<p>My official repository is under svn, I want to use <code>git svn</code> to commit back svn.</p>

<p>My original process</p>

<pre><code>git svn -q ""http://r/svn/libRelease"" lib
git svn -q ""http://r/svn/appRelease"" app
</code></pre>

<p>Is it possible to combine these two command into one?</p>
","0","730346","0"
"52948659","589206","2018-10-23 12:04:28","0","225","<git><svn><git-svn>","git-svn, trunk-only checkout and remote branch that contains a hash mark in name","<p>I'm using a trunk-only checkout of a Subversion repository with non-standard layout. I need to checkout a remote branch to work on an issue. The branch has the name <code>#4711</code> at <code>branches/issues/#4711</code>. I am trying to use the solution described <a href=""https://stackoverflow.com/a/3240146/589206"">here</a>:</p>

<pre><code>[svn-remote ""svn""]
    url = https://example.com/repos/projectname/trunk/sources
    fetch = :refs/remotes/git-svn
[svn-remote ""svn-issue-4711""]
    url = https://example.com/repos/projectname/branches/issues/#4711
    fetch = :refs/remotes/git-svn-issues-#4711
</code></pre>

<p>Unfortunately I get an error message:</p>

<pre><code>W: Filesystem has no item: '/repos/projectname/!svn/rvr/6221/branches/issues' path not found at /usr/share/perl5/Git/SVN.pm line 153.
W: Ignoring error from SVN, path probably does not exist: (160013): Filesystem has no item: '/repos/projectname/!svn/rvr/600/branches/issues' path not found
W: Do not be alarmed at the above message git-svn is just searching aggressively for old history.
This may take a while on large repositories
</code></pre>

<p>It seems the parser aborts at the hash mark, so I also tried to use some escaping, for example <code>\#4711</code> or <code>&amp;234711</code> or <code>&amp;0434711</code>, but these yield the error as well. What can I do to checkout this branch using <code>git-svn</code>? How to escape the branch name properly?</p>
","0","589206",""
"52970399","3270760","2018-10-24 13:34:06","2","1220","<git><svn><git-svn>","How to remove remote origin from branch name after converting from svn to git","<p>I am trying to convert an svn repository to git and I have mostly accomplished what I needed by doing the following:</p>

<pre><code>git svn init https://svn.server.com/repos/my_repo --stdlayout
git svn fetch
</code></pre>

<p>I also found a way to convert all SVN branches to local Git branches:</p>

<pre><code>for branch in `git branch -r | grep -v tags`; do
    git branch $branch $branch
done
</code></pre>

<p>However, now I am stuck with a list of branches that look like this:</p>

<pre><code>origin/1.3
origin/1.4
origin/1.5
origin/1.6
origin/1.7
origin/1.8
origin/2.0
</code></pre>

<p>What I'd really like to end up with is branch names that look like this:</p>

<pre><code>1.3
1.4
1.5
1.6
1.7
1.8
2.0
</code></pre>

<p>I've tried looking into git filter-branch, but I'm not sure if that is exactly what I want. I also tried to specify my layout more manually like this:</p>

<pre><code>git svn clone --trunk=/trunk --branches=/branches --tags=/tags https://svn.server.com/repos/my_repo
</code></pre>

<p>but this did not work either. It gave me the same results with <code>origin/</code> before every branch name. I just wanted to know if it's possible to make these branch name changes without having to re-clone the entire repo again.</p>

<p>Here is the output of running <code>git branch -a</code>:</p>

<pre><code>git branch -a
* master
  origin/1.3
  origin/1.4
  origin/1.5
  origin/1.6
  origin/1.7
  origin/1.8
  origin/2.0
</code></pre>
","5","3270760","0"
"36940083","5219300","2016-04-29 13:48:06","0","462","<git><svn><git-svn><dcommit>","What is wrong in my syntax?(batch file to migrate from git to svn)","<p>I need to migrate some git repositories to subversion.</p>

<p>Some of the projects have a lot of history which i want to preserve.
Also the author names have to stay the same.</p>

<p>After tinkering around and searching for other ways to achieve this, i still cant seem to get it to work properly.</p>

<p>The git repository i need to migrate is a local repository on my c drive.
The svn server i need to migrate these repositories to is on the local network.</p>

<p>This is what i came up with so far:</p>

<pre><code>svn mkdir --parents  SVNSERVER/DestinationRep
git svn clone -sA authors.file  svn://LocalSourceFolder
cd LocalSourceFolder
git remote add origin localSourceFolderPath
git fetch origin
git checkout -b old_master origin/master
git rebase --onto master --root
git svn dcommit

pause
</code></pre>

<p>when i try to execute, its also shows this error:</p>

<p>""Unable to determine upstream SVN information from HEAD history.""</p>

<p>now, before people tell me, i know similar questions have been asked here before, i read a lot of them, but they dont seem to provide the missing ´key´ that would make this work.</p>

<p>Any help is appreciated.</p>

<p>Console output:</p>

<pre><code>svn mkdir --parents  h
ttp://192.168.10.106/svn/Itp-tools/BackupUploader
svn: E205007: Konnte keinen externen Editor zur Eingabe der Logmeldung bestimmen
. Setzten Sie entweder die $SVN_EDITOR Umgebungsvariable oder verwenden Sie die
--message (-m) oder --file (-F) Optionen
svn: E205007: Keine der Umgebungsvariablen SVN_EDITOR, VISUAL oder EDITOR ist ge
setzt und keine Laufzeitkonfigurationsoption »editor-cmd« wurde gefunden

git svn clone -sA auth
ors.file  svn://BackupUploader
Can't open authors.file No such file or directory
-- i can handle this when other errors are resolved

cd BackupUploader

git remote add origin C:\Users\msc\Desktop\git-tf-2.0.2.20130214\BackupUploader

git fetch origin
From C:\Users\msc\Desktop\git-tf-2.0.2.20130214\BackupUploader
 * [new branch]      master     -&gt; origin/master

git checkout -b old_master origin/master
Branch old_master set up to track remote branch master from origin.
Switched to a new branch 'old_master'

git rebase --onto master --root
First, rewinding head to replay your work on top of it...
Fast-forwarded old_master to master.

git svn dcommit
Unable to determine upstream SVN information from HEAD history.
Perhaps the repository is empty. at C:\Program Files\Git\mingw64/libexec/git-cor
e\git-svn line 866.
</code></pre>
","0","5219300",""
"52979645","1411457","2018-10-25 00:22:34","1","60","<git><svn><git-svn>","Is it safe to 'git svn dcommit' commits out of order","<p>I am working in a project that has a master subversion repository. </p>

<p>I have started to use a local git repo together with the git-svn bridge. My workflow is:</p>

<ul>
<li>Take updates into master using git svn rebase</li>
<li>Before working on a bug, make a branch with <code>git checkout -b XXXXX</code></li>
<li>Commit changes to the branch</li>
<li>Merge the branch into master</li>
<li><code>git svn dcommit</code> to push changes from master back to the remote SVN repo</li>
</ul>

<p>At the moment, I have a couple of changesets that have been merged into master but not yet dcommitted back to SVN. I can't push these just yet because they are waiting on other dependencies, but meanwhile I need to push out another urgent fix.</p>

<p><code>git log</code> in my master now looks something like this:</p>

<pre><code>* 5ac10e3 (HEAD, master, b11859) Bug#1234: Urgent Bug Fix
* 2c0f704 Bug#1001 Some Large Feature
* beb3e0c Bug#1002 Another Large Feature
* c84efc2 (origin/trunk) Bug#1003 Already committed stuff
</code></pre>

<p>I want to dcommit <code>5ac10e3</code> but hold off on <code>2c0f704</code> and <code>beb3e0c</code> until sometime later.</p>

<p>It looks like I can could <code>git svn dcommit --interactive</code> and then answer 'yes' only for the commits I would like to make now. But would I be able to re-run that command and dcommit the earlier commits later? And would it be safe to do so?</p>

<p>If not, what is the best workflow to be using? I have a suspicion that I should not have merged those two commits into master until I was ready to dcommit them to svn.</p>

<p>I am wary of warnings I have read online about the need to maintain a linear git history to avoid messing up the svn repo.</p>

<p>I am working on Centos 7 with git 1.8.3.1.</p>

<p><strong>UPDATE</strong>: <code>git log --graph --decorate</code> (as requested by @schwern)</p>

<pre><code>* commit 5ac10e3937ef4e5b95823c73e03c893bd29b22f5 (HEAD, master, b11859)
| Author: harmic &lt;harmic@xxxxxxxxx&gt;
| Date:   Tue Oct 23 15:23:21 2018 +1100
|
|     Bug#1234: Urgent Bug Fix
|
* commit 2c0f7046282d4b84650b9d3a05382ad245755496
| Author: harmic &lt;harmic@xxxxxxxxx&gt;
| Date:   Tue Oct 23 13:36:58 2018 +1100
|
|     Bug#1001 Some Large Feature
|
* commit beb3e0c85d55450a248a277230f6a3fbbc5dc529
| Author: harmic &lt;harmic@xxxxxxxxx&gt;
| Date:   Mon Oct 22 12:12:17 2018 +1100
|
|     Bug#1002 Another Large Feature
|
* commit c84efc25bd9d526dafb9090a2b03fc7cfca46edd (origin/trunk)
| Author: eharmic &lt;eharmic@44605e08-610d-0410-9c87-3f595476ec80&gt;
| Date:   Wed Oct 24 03:38:39 2018 +0000
|
|     Bug#1003 Already committed stuff
|
|     git-svn-id: svn://svn.company.com/proj/trunk@13941 44605e08-610d-0410-9c87-3f595476ec80
|
</code></pre>
","3","1411457",""
"53000369","730346","2018-10-26 01:52:50","1","225","<git><git-svn>","How to combine multiple svn trunk sub-tree into one git-svn repository?","<p>I want to use git-svn to sync svn repository. The svn repository layout is</p>

<pre><code>svn/prjA/trunk
svn/prjA/branches
svn/prjB/trunk
svn/prjB/branches
</code></pre>

<p>Use the following commands will separate into two git repository.</p>

<pre><code>git svn clone https://host/svn/prjA/trunk prjA
git svn clone https://host/svn/prjB/trunk prjB
</code></pre>

<p>And the layout will be</p>

<pre><code>prjA/.git
prjA/...
prjB/.git
prjB/...
</code></pre>

<p>If it possible to combine these into one git repository and sync to two sub-directories of svn?
And the expected layout like following:</p>

<pre><code>.git
prjA/...
prjB/...
</code></pre>
","0","730346","0"
"53080889","5218590","2018-10-31 10:09:11","0","403","<git><svn><git-svn>","How to import a new tag from svn into git-svn?","<p>By @Vanuan's answer <a href=""https://stackoverflow.com/a/11918337/5218590"">How to import svn branches and tags into git-svn?</a> a svn repo with branches and tags are fetched into git-svn, but then how to import a new-upstream-created tag into git-svn?</p>

<hr>

<h2>Use Case: Mirroring an active-developed svn repo</h2>

<ol>
<li>No write permission to the <a href=""http://svn.pjsip.org/repos"" rel=""nofollow noreferrer"">svn repo</a>;</li>
<li>Sync new tags and branches with the svn repo;</li>
<li>Create new git-only branches, modify and commit to a <a href=""https://github.com/morris-stock/pjproject"" rel=""nofollow noreferrer"">git repo</a>;</li>
</ol>
","0","5218590",""
"37114691","","2016-05-09 11:31:28","0","133","<git><svn><git-svn><svn2git>","Svn2git Migration: Repository/Project Complication","<p>I have 3 svn repositories, each having 30~ projects in them. I want to convert these 3 svn repositories into Git repositories, with their respective projects kept inside. To give a clear idea, where is the representation of the structure I have:</p>

<pre><code>-Repository1
  -- project1
  -- project2
  -- project3
  -- project4
  -- project5
-Repository2
  -- project1
  -- project2
  -- project3
  -- project4
  -- project5
-Repository3
  -- project1
  -- project2
  -- project3
  -- project4
  -- project5
</code></pre>

<p>I tried a lot of tutorials so far, none worked for my purpose. Most of the tutorials suggest that I create a repository per project, which I find not-okay, as this is not the pattern I have with my svn.</p>

<p>When I execute a command like this:</p>

<pre><code>svn2git http://address/address/Repository1/project1 --authors ../authormap.txt --metadata
</code></pre>

<p>it creates a folder of the project as a git repository, which I don't want; because this is not the case with my svn structure.</p>

<p>So I need a command which converts my entire repository (along with the 30 projects in it) into a Git repository. I was told to remove the <code>projectName</code> at the end of the address, like this:</p>

<p><code>svn2git http://address/address/Repository1 --authors ../authormap.txt --metadata</code></p>

<p>however it did not work, I got:</p>

<pre><code>command failed:
git checkout -f master
</code></pre>

<p>I have been trying methods for almost a day, no luck so far. It should not be this frustrating and complicated to convert a repository. Anyone has a solid idea on the matter? </p>
","0","",""
"37117624","","2016-05-09 13:55:11","1","1557","<git><svn><git-svn><svn2git>","svn2git migration: Rules","<p>So I have decided to use the <a href=""https://techbase.kde.org/Projects/MoveToGit/UsingSvn2Git"" rel=""nofollow"">svn2git</a> tool after a solid recommendation. In order to migrate the repository, I need authors file and the rules file, along with the repository itself. I composed all these three, and put them under a directory, which I call myRepository_test for the time being. I expect my new git repository to be here after the migration. </p>

<p>Here is the repository structure I currently have:</p>

<pre><code>- myRepository
  -- myRepository.release
  -- myRepository.mapping
  -- myRepository.base
  -- ..
</code></pre>

<p>In total I have around 30 projects here.</p>

<p>Hereby I share my files which will be used:</p>

<p><strong>authormap.txt:</strong></p>

<pre><code>egent = Emma Gent &lt;emma.gent@someDomain.com&gt;
gstar = Gabriel Star &lt;gabriel.star@someDomain.com&gt;
.
.
</code></pre>

<p>For the time being, I wanted to try only for 2 projects, so:</p>

<p><strong>myRepository.rules:</strong></p>

<pre><code>create repository myRepository
end repository

# main history

match /trunk/myRepository/myRepository.release/
  repository myRepository
  branch master
end match

match /trunk/myRepository/myRepository.mapping/
  repository myRepository
  branch master
end match

# Ignore everything else
match /
end match
</code></pre>

<p>which makes the final command:</p>

<pre><code>./svn-all-fast-export --identity-map authormap.txt --rules myRepository.rules --add-metadata http://address/svn/myRepository
</code></pre>

<p>which ends as:</p>

<pre><code>Loading rules from: ""myRepository.rules"" 
Loading rules from ""myRepository.rules"" 
Could not read the rules file: myRepository.rules
Aborted (core dumped)
</code></pre>

<p>I am not very sure about the content of the rules file, would be nice if someone could help me regarding that.</p>

<p>Thanks in advance.</p>
","0","",""
"53187745","5558393","2018-11-07 10:36:39","0","51","<git><svn><branch><git-branch><git-svn>","Add (not create) remote branches to local repo using git-svn","<p>I am working on big SVN repository using <code>git-svn</code>. Pure <code>svn</code> is very slow. I should have cloned my repository using command:<br>
<code>git svn clone &lt;rep_url&gt; -T trunk/ -b branches/ --no-minimize-url css</code></p>

<p>but I did it by<br>
<code>git svn clone &lt;rep_url&gt; -T trunk/ --no-minimize-url css</code>
<br>or<br>
<code>git svn clone &lt;rep_url&gt; -b branches/ --no-minimize-url css</code>
<br>I don't know exact command I executed</p>

<p>Now I am facing issue because when I do <code>git branch -a</code> it shows me only trunk (master) branch:</p>

<pre><code>* master
  remotes/origin/trunk
</code></pre>

<p>I want to see all branches in <code>git branch -a</code> output. I have another copy of this same repository and I cloned it using both switches <code>-T</code> and <code>-b</code>. When I do <code>git branch -a</code> in this another repository it shows me list of branches also like:</p>

<pre><code>* master
  remotes/origin/trunk
  remotes/origin/branch1
  remotes/origin/branch2
  remotes/origin/branch3
  remotes/origin/branch4
  branch1
  branch2
</code></pre>

<p>How can I add remote branches to my repository?
Is it possible?</p>

<p>Note that typing <code>git branch branch1 remotes/origin/branch1</code> doesn't work</p>
","0","5558393","0"
"53265684","3838691","2018-11-12 15:52:15","1","108","<git><svn><git-svn>","Restoring a lost svn history for a git project","<p>I have a project, that was migrated from SVN to git some time ago.</p>

<p>WELL. Not really migrated. The last SVN revision was copied into the initial git commit. So basically all SVN history was squashed into the first git commit.</p>

<p>Many commits have now been added to the git repository.</p>

<p>Is there a way to way to rebase the new git commits onto a properly converted git repo? So we have the full history again?</p>

<h3>Edit:</h3>

<p>I now have two git branches, one with all the old history (<code>old</code>), another with all the new history (<code>new</code>). There is no diff between the last commit of <code>old</code> and the first commit of <code>new</code>. How do I merge those histories into one?</p>
","0","3838691",""
"53728529","","2018-12-11 16:35:17","0","786","<git><github><svn><git-svn>","git svn clone, only including the last n revisions","<p>I am migrating SVN to GitHub using git-svn, only migrating the master(trunk) and only including the latest n revisions.The following command might work:  </p>

<pre><code>git svn clone -s -r$HeadMinusN:HEAD some/svn/repo
</code></pre>

<p>however, instead of manually calculate the revision number by minus HEAD-Revision by N, do I have a way that acts like as the <code>--depth</code> option in git command. </p>

<p>Thanks</p>
","3","",""
"70662348","560784","2022-01-11 06:14:30","-2","463","<git><svn><migration><git-svn>","Migrating from svn to git does not include all revisions","<p>I am new to <code>git</code> and in the process of migrating from <code>SVN</code> to github. I have been using Visual SVN Server+TortoiseSVN on Windows for years.</p>
<p>I found a few guides like this <a href=""https://stackoverflow.com/questions/79165/how-do-i-migrate-an-svn-repository-with-history-to-a-new-git-repository"">How do I migrate an SVN repository with history to a new Git repository?</a> and <a href=""https://alastaircrabtree.com/converting-an-svn-repository-to-git-on-windows/"" rel=""nofollow noreferrer"">https://alastaircrabtree.com/converting-an-svn-repository-to-git-on-windows/</a></p>
<p>However, I have problems with the push command only submitting some of the SVN revisions and not all. In <code>&quot;MyProject&quot;</code>, the latest revision is 654 but <code>git</code> only <code>push'es</code> until rev. 633 and does not include all previous revisions (i.e. there are gaps in revisions).</p>
<p><strong>SVN log:</strong></p>
<p><a href=""https://i.stack.imgur.com/D2RqD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/D2RqD.png"" alt=""svn log"" /></a></p>
<p><strong>Repo browser:</strong></p>
<p><a href=""https://i.stack.imgur.com/wvRUs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wvRUs.png"" alt=""repo browser tortoise svn"" /></a></p>
<p><strong>Here is what I do in git bash (<a href=""https://git-scm.com/"" rel=""nofollow noreferrer"">https://git-scm.com/</a>):</strong></p>
<p>I have a main folder created to contain all source code, i.e. <code>c:\web\git</code>.
I run the following commands:</p>
<pre><code>$ git svn clone &quot;https://&lt;myip&gt;/svn/myproject/&quot; &quot;C:\Web\git\myproject&quot; 
  --stdlayout --authors-file=&quot;c:\web\authors.txt&quot;
</code></pre>
<p>Log says:</p>
<pre><code>  Initialized empty Git repository in C:/Web/git/myproject/.git/ 
  Found possible branch point: https://&lt;myip&gt;/svn/myproject/myproject =&gt; 
  https://&lt;myip&gt;/svn/myproject/branches/newdash, 630 
  Initializing parent: refs/remotes/origin/newdash@630
          A        somefile.txt
          A        somefile2.txt
  r1 = d6d733625726656a8e4f6a4fcc3394ee6dc6b5c9 (refs/remotes/origin/newdash@630)
  ...
  r629 = 020c46bbcd50ecefd57ed9f49cd0d2def8444af3 (refs/remotes/origin/newdash@630)
    Found branch parent: (refs/remotes/origin/newdash) 
    020c46bbcd50ecefd57ed9f49cd0d2def8444af3
    Following parent with do_switch
    Successfully followed parent
  r631 = 9564fcb7966649428ec7775cf6ccf4d66e1305c4 (refs/remotes/origin/newdash)
           M       Properties/launchSettings.json
           M       web.config
  r633 = 4ebce676525bfeb8f1d8d680c706b7d9c4e872c3 (refs/remotes/origin/newdash)
    branch_from: /branches =&gt; /branches/newdash
    Found possible branch point: https://&lt;myip&gt;/svn/myproject/branches/newdash =&gt;
    https://&lt;myip&gt;/svn/myproject/branches/newdash, 652
    Found branch parent: (refs/remotes/origin/newdash) 
    4ebce676525bfeb8f1d8d680c706b7d9c4e872c3
    Following parent with do_switch
    Successfully followed parent

  r654 = 336c75066b52c5d0a45e5e14e891a132d6e361e6 (refs/remotes/origin/newdash)
   fatal: refs/remotes/origin/trunk: not a valid SHA1
   update-ref HEAD refs/remotes/origin/trunk: command returned error: 128
</code></pre>
<p>As can be seen from above log, there is a jump from <code>r633 -&gt; r653</code>. In addition, there are other gaps in the clone process e.g. <code>r498 -&gt; 505</code> is also missing as well as others:</p>
<pre><code>            M       Startup.cs
            M       myproject.csproj
            M       web.config
   r497 = aba855a1c283a263d563ccec486c1042e6757cfb (refs/remotes/origin/newdash@630)
            M       Views/Shared/_Layout.cshtml
   r506 = b8f107ab597eb74549fa75e02cd980b367c61684 (refs/remotes/origin/newdash@630)
</code></pre>
<p>Anyways, I continue just to see what happens so I do:</p>
<pre><code>$ cd myproject

User@MyPC MINGW64 /c/Web/git/MyProject (master)
$ git branch -a
  remotes/origin/newdash
  remotes/origin/newdash@630
</code></pre>
<p>Then</p>
<pre><code>User@MyPC MINGW64 /c/Web/git/MyProject (master)
$ git for-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | while read branchname;
  do git branch &quot;$branchname&quot; &quot;refs/remotes/$branchname&quot;; git branch -r -d
  &quot;$branchname&quot;; done

User@MyPC MINGW64 /c/Web/git/MyProject (master)
$ git branch -a
  origin/newdash
  remotes/origin/newdash@630
</code></pre>
<p>And then finally pushing it to github (after I have created the repo at github.com).</p>
<pre><code>User@MyPC MINGW64 /c/Web/git/MyProject (master)
$ git remote add origin https://github.com/myuser/myproject.git
$ git branch -M master
$ git push -u origin master
</code></pre>
<p>The repo is pushed to github but as mentioned earlier not all the revisions are included. I figure this has something to do with branches but I am not sure how to fix this so that everything is uploaded to github (all revisions).</p>
<p>Hoping someone knows what is going on and how to fix it.</p>
","0","560784",""
"53752852","60075","2018-12-12 23:17:01","2","291","<git><git-svn>","Fatal error after power outage during git svn fetch","<p>I've had a <code>git svn fetch</code> of a large SVN repository (over 10,000 commits and 100 branches) going for several days and running overnight.</p>

<p>Overnight, there was evidently a power outage, so the computer was off in the morning, and when turned on gave the Windows message about an unexpected shutdown.</p>

<p>Now, when I try to resume the <code>git svn fetch</code> operation, I'm getting an error:</p>

<pre><code>fatal: bad config line 1 in file .git/svn/.metadata
fatal: bad config line 1 in file .git/svn/.metadata
fatal: bad config line 1 in file .git/svn/.metadata
fatal: bad config line 1 in file .git/svn/.metadata
config svn-remote.svn.reposRoot https://svn/svn/xxxxxx: command returned error: 128
</code></pre>

<p>Any idea what is the cause of this error, and a simple solution? (I don't want to have to start the fetch over again, since it will take several days.)</p>

<p>This is git 2.18.0.windows.1 running on Windows 7.</p>
","3","60075","0"
"38071052","5462450","2016-06-28 08:33:35","8","6115","<git-svn><svncommit>","Getting error while migrating code from svn to git repository: Malformed network data: The XML response contains invalid XML: svn2git","<p>Ran command git svn clone ""SVN URL"".</p>

<p>It works fine till 4568 commits, but then it gets after this commit giving the error stated in title.</p>
","5","5462450",""
"38154445","6509996","2016-07-01 22:09:10","1","442","<git><svn><github><git-svn>","""git svn rebase"" no associated commit metadata","<p>I am mirroring a svn repository on my local computer and I decided to push it to a remote git server. The reason I needed to do so was so I could then add another repository as a submodule. However, now when I run the command:</p>

<pre><code>    git svn rebase
</code></pre>

<p>I get:</p>

<pre><code>    refs/remotes/origin/master: no associated commit metadata
</code></pre>

<p>I want to be able to update my local mirror from the svn repo and then push it to the remote git repository so that other people can clone that as a git repository.</p>

<p>Thanks!</p>
","2","6509996","0"
"71013577","927190","2022-02-07 04:41:39","-1","74","<git><svn><version-control><git-svn>","Rebase on existing `git` history with `git svn`","<p>I have a <code>git</code> repo which I made some commits in. An existing group of developers copy/pasted its files into an <code>svn</code> repo, and then invited me onto their team to work. So, the <code>svn</code> history starts with the latest commit in my <code>git</code> history. I want to add the missing history.</p>
<p>Using <code>git svn</code>, I did this:</p>
<pre class=""lang-sh prettyprint-override""><code>git svn clone https://their-svn-repo.com/ theirs
cd theirs
git pull ../my-existing-git-repo
</code></pre>
<p>which works nicely, and inserts the missing history at the beginning of their repo.</p>
<p><a href=""https://i.stack.imgur.com/VuVVs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VuVVs.png"" alt=""gitk visualized history graph"" /></a></p>
<p>But, when I try to do <code>git svn dcommit</code> or <code>git svn rebase</code>, I get an error:</p>
<pre class=""lang-sh prettyprint-override""><code>$ git svn dcommit
Unable to determine upstream SVN information from HEAD history.
Perhaps the repository is empty. at C:\Program Files\Git\mingw64/libexec/git-core\git-svn line 870.


$ git svn rebase
Unable to determine upstream SVN information from working tree history
</code></pre>
<p><a href=""https://brandon.dimcheff.com/2009/01/04/commit-a-linear-git-history-to-subversion/"" rel=""nofollow noreferrer"">There's an article</a> which addresses a similar issue, although it assumes that the <code>svn</code> repo is empty and also uses the &quot;standard&quot; <code>svn</code> layout, which this repo doesn't.</p>
<p>I know it's a bit of a weird case, but anybody know how to get this fixed?</p>
","0","927190",""
"38257765","1023236","2016-07-08 01:39:17","0","33","<git><svn><git-svn>","How to synch to svn remote after restructuring the git code locally?","<p>I have checked out svn code to my local git via git-svn and made lots of restructuring on it. Now my current git master is clean and fine. Currently in the svn we are not having any trunk, branches, tag struture.  Now I want to clean my svn in the same way.</p>

<p>So to standardize that I created a folder struture like below in svn via svn client and deleted the contents on it.</p>

<pre><code>--My_Project_in_SVN
  --trunk
  --branches
  --tags
</code></pre>

<p>But previously we had our code just under <code>My_Project_in_SVN</code>. Now I removed all the contents under the project path. My objective is to commit my local git master code to <code>My_Project_in_SVN\trunk</code> And needs to create separate branches/tags in git which should go to respective branch under svn?</p>

<p>How can I achieve this?</p>
","0","1023236",""
"38267578","2966326","2016-07-08 13:10:14","0","559","<git><git-branch><git-svn>","git svn only use branches without trunk or tags","<p>I have an SVN repo with a normal trunk/branches/tags layout. For my git I want to ignore the trunk &amp; tags folder. I just want to have the branches as git branches nothing more. </p>

<p>Folders:</p>

<pre><code>/trunk (empty)
/tags (full of stuff I want to ignore)
/branches/folder1
/branches/folder2
</code></pre>

<p>I tried simply cloning the svn using</p>

<pre><code>git svn clone [REPO] -stdlayout
</code></pre>

<p>Unfortunately my client has not commited anything into the trunk so I get the error ""refs/remotes/origin/trunk not a valid SHA1""
I read that no commit into the trunk results in that error.</p>

<p>My question is: How can I only use the branches folder1 &amp; folder2 to create a new git with said branches.</p>

<p>Thanks,
Michael </p>
","0","2966326",""
"71049259","15137778","2022-02-09 12:02:49","0","226","<git><git-svn><git-filter-repo>","Remove all commits from git repository that have no changes (refer to same tree as parent commit) using filter-repo","<p>I cloned an svn repository using git-svn. But I exluded everything except one folder (let's say folder <code>A</code>) using <code>--include-paths</code>. Since the svn repository contains many commits for other files (outside of that folder), in the resulting git repository I now also have many commits that reflect the same state as their parent commit and are in that sense &quot;empty&quot;. How can I remove these commits from my git repository before pushing it for the first time?</p>
<p>I found the <code>--prune-empty</code> option in git-filter-repo, but I seems to only get active on those commits that are affected by other command options. At least</p>
<pre><code>git filter-repo --prune-empty auto
</code></pre>
<p>or</p>
<pre><code>git filter-repo --path 'A' --prune-empty auto
</code></pre>
<p>didn't change anything for me.</p>
<p>I found examples using filter-branch (<a href=""https://stackoverflow.com/a/5324916/15137778"">https://stackoverflow.com/a/5324916/15137778</a>), but I would like to avoid that as it is super slow (and also recommends filter-repo in it's docs). Is there a way to do it with filter-repo?</p>
<p><strong>Here is an example in case the explanation was not clear:</strong></p>
<p>Let's assume I have the following svn repository.</p>
<pre><code>root
  |-- A
    |-- 1.txt
    |-- 2.txt
  |-- B
    |-- 3.txt
    |-- 4.txt
  |-- C
    |-- 5.txt
    |-- 6.txt
</code></pre>
<p>Then I made a clone using git-svn only including the directory <code>A</code> which leads to this file structure in my new git repository:</p>
<pre><code>root
  |-- A
    |-- 1.txt
    |-- 2.txt
</code></pre>
<p>But the git repository still contains commits that changed for example <code>C/5.txt</code> in the original repository. So apparently all commits from the original svn repository were kept. But since that file was filtered out of my git repository, these commits refer to the exact same tree as their parent (no changes). So they are useless and I don't want to keep them. Thanks in advance for any help or advice.</p>
","10","15137778",""
"53812912","4655830","2018-12-17 10:06:56","0","319","<git><svn><git-svn>","Synchronize git-svn branch with git repository","<p>We have a client that has SVN as version control. We have to work with their repository and they don't want to create branches for us, only the branch they deploy, so we cannot create small commits, only a big one when the feature is ready to be deployed.</p>

<p>I've read about git-svn and I think it's almost the perfect solution. But is there a way of synchronizing locally created branches with an external repository? Both to backup and sync with other people.</p>

<p>I mean, you have the SVN repository. Clone it with Git and create a branch (locally, not allowed to do in the SVN repo). Is there a way of making that branch point to any newly created repository. Like a different repository created from that branch.</p>

<p>I hope I could explain it. Is this possible?</p>
","0","4655830",""
"38319441","3218116","2016-07-12 03:12:32","6","6118","<git><svn><github><git-svn>","How to do git-svn fetch and retain empty directory?","<p>I have created a simple script to migrate fairly large SVN repository. Instead of using <code>git svn clone</code>, I am using <code>git svn init</code> and <code>git svn fetch</code> so that I could specify the revision and fetch it chunk by chunk. More or less, it is something like this:</p>

<pre><code>while [ ""$CURRENT_REVISION"" -lt ""$MAX_REVISION"" ]; do
  END_REVISION=$((CURRENT_REVISION + 100))
  if [ ""$END_REVISION"" -ge ""$MAX_REVISION"" ] 
  then
    END_REVISION=$MAX_REVISION
  fi

  git svn fetch -r ""$CURRENT_REVISION"":""$END_REVISION""  --authors-file=""$AUTHORS_FILE"" 

  #increasing the current and end revision
  CURRENT_REVISION=$END_REVISION
  END_REVISION=$((CURRENT_REVISION + 100))
done
</code></pre>

<p>However, I understand that by default the behavior of the fetch/clone will not retain empty directories. Thus, I might need to manually check in those empty directories (*which I'm trying to avoid). </p>

<p>There is a <code>--preserve-empty-dirs</code> parameter in the <code>git svn clone</code> but not in <code>git svn fetch</code>.</p>

<p>Is there any workaround to trick this out?</p>

<p><strong>UPDATE</strong></p>

<p>Even though it is not mentioned in the official documentation that we can use the config key for the fetch, it is actually works</p>

<p>There is detailed explanation by @Vampire related to this question. So I'll simplify this.</p>

<p>After doing the init repository, I had to change the configuration of my remote branch:</p>

<p><code>git config svn-remote.&lt;remote name&gt;.preserve-empty-dirs ""true""</code></p>

<p><code>git config svn-remote.&lt;remote name&gt;.placeholder-filename "".gitkeep""</code></p>

<p>You can verify the configuration by looking at /.git/config. Just do normal fetch and your directory will be preserved.</p>
","2","3218116","0"
"14455919","1711159","2013-01-22 10:05:23","3","3952","<perl><git><svn><git-svn><swig>","git svn command; svn binding issue","<p>While executing &quot;git svn&quot; init/clone, I am getting following error:</p>
<blockquote>
<p>$ git svn init .</p>
<p>Can't load '/usr/lib64/perl5/site_perl/5.8.8/x86_64-linux-thread-multi/auto/SVN/_Core/_Core.so' for module SVN::_Core: libsvn_client-1.so.0: cannot open shared object file: No such file or directory at /usr/lib64/perl5/5.8.8/x86_64-linux-thread-multi/DynaLoader.pm line 230.<br />
at /usr/lib64/perl5/site_perl/5.8.8/x86_64-linux-thread-multi/SVN/Base.pm line 59<br />
BEGIN failed--compilation aborted at /usr/lib64/perl5/site_perl/5.8.8/x86_64-linux-thread-multi/SVN/Core.pm line 5.<br />
Compilation failed in require at /usr/local/lib/perl5/site_perl/5.8.8/Git/SVN/Utils.pm line 6.<br />
BEGIN failed--compilation aborted at /usr/local/lib/perl5/site_perl/5.8.8/Git/SVN/Utils.pm line 6.<br />
Compilation failed in require at /usr/local/lib/perl5/site_perl/5.8.8/Git/SVN.pm line 33.<br />
BEGIN failed--compilation aborted at /usr/local/lib/perl5/site_perl/5.8.8/Git/SVN.pm line 33.<br />
Compilation failed in require at /usr/local/libexec/git-core/git-svn line 25.<br />
BEGIN failed--compilation aborted at /usr/local/libexec/git-core/git-svn line 25.</p>
</blockquote>
<p>following packages are installed:</p>
<ol>
<li><p>git version 1.8.0</p>
</li>
<li><p>SWIG Version 2.0.9
Compiled with g++ [x86_64-unknown-linux-gnu]
Configured options: -pcre</p>
</li>
<li><p>svn, version 1.6.18 (r1303927)
compiled Jan 22 2013, 12:39:04</p>
</li>
<li><p>perl, v5.8.8 built for x86_64-linux-thread-multi</p>
</li>
</ol>
<p>Appreciate your suggestions in this.</p>
","0","1711159",""
"14489425","1492425","2013-01-23 21:09:25","4","481","<git><permissions><git-svn><mode><folder-permissions>","How can I get git to read mode changes?","<p>I've changed permissions on a folder and want to push it out to the repository. However, git doesn't recognize the permission changes.</p>

<p>Any idea why not and how to fix it? Thanks in advance.</p>
","0","1492425",""
"32029024","2270052","2015-08-15 20:25:39","0","39","<git><svn><git-svn>","Setting up git-svn without access to the SVN server","<p>I currently cannot connect to the SVN server of the company.
Therefore I'd like to use git-svn to be able to make local commits and later on push them into SVN when I recover access to the SVN server.</p>

<p><strong>My question is:</strong> is it possible to setup git-svn on my local copy of the repository (available on my machine), without having to re-checkout fresh sources from the SVN server? (since I don't have access to this server right now).</p>
","0","2270052",""
"14512292","203391","2013-01-24 22:49:52","4","990","<git><git-svn>","git svn clone prints hundreds of ""error: too many matches for svn-remote.svn.added-placeholder""","<p>I ran the following command to clone an SVN repository:</p>

<pre><code>git svn clone -s --preserve-empty-dirs --username=my_svn_username https://svn.repo/path projectname
</code></pre>

<p>This ran successfully for a few hours, but is now printing the following message many, many times per revision:</p>

<pre><code>error: too many matches for svn-remote.svn.added-placeholder
</code></pre>

<p>The clone process appears to continue; I can see revisions appear in the logs between these messages.  However, the number of times this error is printed seems to be increasing.  The first problematic revision resulted in the error being printed 39 times; the next 78; then 117 - the latest revision at time of writing caused the above error to be printed 13,604 times.</p>

<p>I'm cloning this repository from scratch because the existing repository from which I have been working successfully for many months has also encountered this error.  Everything was fine until I performed a <code>git svn fetch</code> which I believe caused git svn to discover a new branch which prompted this error.</p>

<p>I am able to checkout the first revision that displayed this error without problem when using SVN, and can update revision-by-revision successfully.</p>

<p>Has anyone seen this before?  Any clues to resolving the error?</p>
","0","203391","0"
"14558151","898111","2013-01-28 08:28:24","0","273","<git><git-svn>","How to override git author name in local settings?","<p>My git repository is imported from svn. And the username in <code>git log</code> is something like 0129. I want to override it with my setting like John instead of 0129. And I find this: </p>

<p><a href=""https://stackoverflow.com/questions/8878615/is-there-a-way-to-override-a-git-authors-display-name-in-local-repository-confi"">Is there a way to override a git author&#39;s display name in local repository config?</a> </p>

<p>The .mailmap solution works well in <code>git shortlog</code>, but <code>git log</code> still give the same output. Any suggestions?</p>

<p><em>EDIT</em>
I've check <a href=""https://stackoverflow.com/questions/750172/how-do-i-change-the-author-of-a-commit-in-git/870367#870367"">Change the author and committer name and e-mail of multiple commits in Git</a> too but I don't want to run <code>git filter branch</code> every time after <code>git svn rebase</code>.</p>
","2","898111","0"
"14558261","2017451","2013-01-28 08:36:37","1","72","<branch><git-svn><history><fetch>","git-svn new branch refetches the whole history","<p>I wanted to create a git clone of a big svn repo with git-svn.
My primary problem however is that whenever a new branch is created, the whole history is re-downloaded:
""Found possible branch point"" and it starts downloading from r1 ('til 40000...).
How can I (and why do I have to) tell git to skip the commits that were already fetched?</p>

<p>Thanks,
  Lőrinc</p>
","0","2017451",""
"14567906","1113598","2013-01-28 17:41:23","2","360","<git><svn><git-svn><git-remote>","Create a remote Git branch as mirror for a specific git-svn branch of a SVN repository","<p>I cloned an existing svn repo off a remote server locally using git-svn's <code>git svn clone &lt;orig_svn_repo_path&gt;</code>. I now want to setup a remote repo for only a particular branch out of several branches of the locally cloned repo say <code>&lt;cloned_repo&gt;/branches/&lt;branch_to_clone&gt;</code>. Is this possible to do? The rest of the repo is pretty humongous in terms of size and as there is only that particular branch that I have to work on, I'd rather just setup a remote mirror for it. Also if that is possible, how would I then update the original svn repo with the branch being worked upon and also push my changes to the remote git branch (repo) to keep it in sync with the local branch (that is updated onto the svn repo) ?</p>
","0","1113598","0"
"67931912","6332384","2021-06-11 05:58:05","0","173","<git><svn><git-svn>","git svn show-externals Output Interpretation","<p>I have an SVN repository that I cloned to Git using <code>git svn clone</code>. The repository has externals in SVN. When I use <code>git svn show-externals</code>, I get different external prefix prints for different commits. Examples of prints are:</p>
<pre><code>/^/library/branches/binary
</code></pre>
<pre><code>/^library/branches/binary
</code></pre>
<pre><code># /library/branches/test/
</code></pre>
<pre><code># /
</code></pre>
<pre><code>/subproject/^/library/tip
</code></pre>
<p>what is the interpretation of each of these prefixes?</p>
","0","6332384",""
"14585692","635162","2013-01-29 14:52:45","47","43989","<git><svn><git-svn>","How to use git-svn to checkout only trunk and not branches and tags?","<p>I'm working on a Java legacy project which has 20 modules connected to each other. So, each module has it's own branch and tag. The structure is like this: </p>

<pre>
<code>
/projects
   .svn
   - module1
       .svn
       -trunk
       -branch
       -tag
   - module2
       .svn
       -trunk
       -branch
       -tag
</code>
</pre>

<p>The projects folder is around 30 GB which is nearly impossible to use <code>git-svn clone</code> to checkout all the modules, but it's because it counts all the branches and tags. </p>

<p>Is it possible to just clone the project only trunk so I can start committing locally?</p>
","1","635162","0"
"14589654","2022565","2013-01-29 18:24:16","1","808","<cygwin><git-svn>","Cygwin: git svn complains about bad config file","<p>On Cygwin using git-svn performing remote operations such as:</p>

<ul>
<li>git svn rebase</li>
<li>git svn dcommit</li>
<li>etc.</li>
</ul>

<p>Causes one of many strange error messages to occur regarding bad config files</p>

<pre><code>$ git svn rebase
fatal: bad config file line 1 in /home/tj/.gitconfig
fatal: bad config file line 1 in /home/tj/.gitconfig
Cannot rebase: You have unstaged changes.
Please commit or stash them.
rebase refs/remotes/git-svn: command returned error: 1
</code></pre>

<p>There aren't actually any unstaged changes, that error message seems to be an artifact of the config file issue:</p>

<pre><code># On branch master
nothing to commit (working directory clean)
</code></pre>

<p>Occasionally it complains about other lines in the same file, or about lines in .git/config</p>

<p>My actual git config files are very simple, and the exact same ones work fine on other machines (which are also running Cygwin). For reference:</p>

<p>.gitconfig:</p>

<pre><code>[user]
        name = tj
        email = tj@example.com
</code></pre>

<p>.git/config:</p>

<pre><code>[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
        ignorecase = true
        preloadindex = true
[svn-remote ""svn""]
        url = https://url.to/repository
        fetch = :refs/remotes/git-svn
</code></pre>

<p>The octo-spacing is a tab in the file, and looking at the file in vim with set list shows no strange characters muddling around.</p>

<p>The strangest part of all is that sometimes it just works without issue. However, after a short period of time, it continues showing the error messages. If anyone knows that the issue may be, or how to resolve it, I would greatly appreciate it.</p>

<p>Thanks!</p>

<p>Edit:</p>

<p>What I've tried so far:</p>

<ul>
<li>Copying good config files from working machines running Cygwin</li>
<li>Running rebaseall in Cygwin</li>
<li>Reinstalling git-svn package</li>
</ul>

<p>What I might try:</p>

<ul>
<li>Reinstalling Cygwin (would rather not)</li>
</ul>

<p>Edit2: Success?</p>

<p>After fiddling around with this for a few hours, I tried removing things from the git configs one by one and seeing if it made a difference.</p>

<p>Removing preloadindex = true from the .git/config file seems to have resolved the issue, though it is difficult to say for sure.</p>
","0","2022565",""
"68011817","14012961","2021-06-17 01:35:29","1","379","<git><svn><migration><git-svn>","git-svn died of signal 11","<p>When using git-svn to checkout a large repository, the following error occurs.</p>
<blockquote>
<p>error: git-svn died of signal 11</p>
</blockquote>
<p>Most of the solutions on the internet didn't work for me.
But repositories larger than this are work.</p>
<p>My .git/config</p>
<pre><code>[core]
    repositoryformatversion = 0 
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
    hideDotFiles = dotGitOnly
    packedGitLimit = 256m
    packedGitWindowSize = 256m
    longpaths = true
[svn-remote &quot;svn&quot;]
    noMetadata = 1 
    url = svn://my_repository_url
    fetch = trunk:refs/remotes/svn/trunk
    branches = branches/*:refs/remotes/svn/*
    tags = tags/*:refs/remotes/svn/tags/*
[http]
    postBuffer = 524288000
[pack]
    deltaCacheSize = 512m
    packSizeLimit = 512m
    windowMemory = 2048m
</code></pre>
<p>Versions</p>
<p>perl: <code>v5.22.1</code><br>
git: <code>2.7.4</code><br>
svn: <code>1.9.3</code><br>
host: <code>Linux Mint 18.3 64x</code><br></p>
<p>What more should I add?
Thanks.</p>
","2","14012961",""
"32111573","907199","2015-08-20 07:02:28","0","862","<git><svn><version-control><git-svn>","bridging svn and git repos","<p>We've got two teams: internal team in the office behind a proxy using internal svn; external team out in the open internet using git and wanting to collaborate but not being able to access the internal svn. Internal team must remain on svn, office network can't allow external access. </p>

<p>The question: how can the office team relay their svn changes to external team's git repo and back from git repo into svn?</p>

<p>In the office we were quite successfully been using git svn so that all local development is on git with fetching and dcommitting from/to svn. But we can't quite figure out how to link a remote repo so we could do something like:</p>

<pre><code>git checkout gitmaster
git merge svntrunk
git push
git checkout svntrunk
git svn fetch
git merge gitmaster
git svn dcommit
</code></pre>
","2","907199",""
"14613465","174605","2013-01-30 20:48:05","2","89","<git><git-svn><githooks><git-status>","Is there a way to invoke a script on git status command?","<p>I am managing my svn repositories as a git repo through git-svn tool, but there is no way to handle my svn externals. This problem is solved by treating each external as a git-svn repo. This is done using a script and the result is something similar to this:</p>

<pre><code>&gt; src/
&gt; -- .git/
&gt; -- Source1.x
&gt; -- Source2.x
&gt; -- .git_external/
&gt; ---- git-svn_external1/
&gt; ------ .git/
&gt; ------ ExternalSource1.x
&gt; ---- git-svn_external2/
&gt; ------ .git/
&gt; ------ AnotherExternalSource1.x
&gt; ------ AnotherExternalSource2.x
</code></pre>

<p>With the lack of a tool to handle the svn externals, I need to verify each modification through a bash script that is executed manually and it is something like this:</p>

<pre><code>#!/bin/sh
for i in `ls .` do
  if [ -d $i ] then
    cd $i
    if [ -d .git ] then
      git status .
    fi
  cd ..
  fi
done
</code></pre>

<p>How can I achieve this automatically while executing the <code>git status</code> command on main git-svn repository?</p>

<p>I didn't find any hook related to this situation, so I think that I need to find a workaround to this problem.</p>
","4","174605",""
"14621585","1581090","2013-01-31 08:43:12","2","368","<git><git-svn>","How to remove files in my git-svn checkout, which are still present after dcommit?","<p>I have cloned a <code>svn</code> repository using the <code>git svn clone</code> command. On my local working copy I made some changes and removed a couple of files. After I checked in the changes locally with <code>git commit</code> it was time to push the changes to the repository, which I did with</p>

<pre><code>git svn dcommit
git svn rebase
</code></pre>

<p>All of the new files and directories have been pushed to the repository, but the removed files are still in the repository on the host system! In other words: Even after <code>git svn rebase</code> (which, as far as I know is the command to fetch all changes from the repository) my local copy and the repository are substantial different! </p>

<p>To make myself more clear: I have the repository on the remote/host computer which is the central place with many different repositories people have access to. I made a checkout of one of the repositories to my local computer, made some changes (i.e. removed files), and then wanted to push/send/save my changes to the central repository. New files were created, but file I have removed are still present on the central repository on the central host. </p>

<p>What do I need to do to make my local checkout and the repository on the host system equal? </p>
","4","1581090",""
"15095561","1000738","2013-02-26 17:34:38","19","12804","<git><svn><git-svn>","Cannot do git-svn fetch behind proxy","<p>I'm trying to mirror a svn repo using git-svn.</p>

<p>I'm doing </p>

<pre><code>git svn clone http://worldwind31.arc.nasa.gov/svn/trunk/WorldWind
</code></pre>

<p>And I'm getting</p>

<pre><code>Initialized empty Git repository in f:/gstest/WorldWind/.git/
RA layer request failed: PROPFIND request failed on '/svn/trunk/WorldWind': PROPFIND of '/svn/trunk/WorldWind': could not connect to server (http://worldwind31.arc.nasa.gov) at /usr/lib/perl5/site_perl/Git/SVN.pm line 148
</code></pre>

<p>If I do the same on another computer that isn't within the proxy it's ok. </p>

<p>I'm on a win7, and I've set  <code>$HTTP_PROXY</code>, <code>http.proxy</code> (the global one in git) and <code>$HOME/AppData/Roaming/Subversion/servers</code> to the correct proxy. </p>

<p>Doing <code>svn checkout [repo adress]</code> in a shell works.
Doing <code>wget [repo adress]</code> in a shell works.
But not <code>git svn clone [repo adress]</code></p>

<p>Any ideas? Most of the questions I've found on this points me to the <code>Subversion/servers</code> file, but now I've edited that one and the problem is still there... :/</p>
","0","1000738","0"
"15126889","508962","2013-02-28 03:27:51","2","628","<git><git-svn><git-bundle>","git bundle with git-svn","<p>I am trying to use git-bundle with a git-svn repo. Essentially, I need to create an offline git repo that has a clone of our production SVN system. The SVN repository is cloned through git-svn, which works great. It clones our code, and lists it under remotes/*.</p>

<p>Now the hard part. I need to keep this in sync with our offline repository. The offline environment has no internet access, and will only ever get updates via a one way method (ex. a cd, etc). It's a one way only deal. I want to do this with git-bundle. The problem seems to boil down to the fact that git-svn marks the svn repository as remotes. I had tried to check out a bundle using <code>git bundle create ____.bundle --all</code>...it works, but it only includes my master. It does NOT include the remotes refs. I need to get all of that information however.</p>

<p>Does this make sense? Any tips/suggestions? It should be made clear that we do NOT commit to the git repository on the SVN side, it will be read-only. On the offline side, we will branch the remote branches, and commit there.</p>

<p>Thanks!</p>
","0","508962","0"
"68596278","6673905","2021-07-30 19:34:23","0","220","<git><svn><git-svn>","Why does `git svn clone` not convert all SVN branches?","<p>I have an SVN repository that I'm converting to a Git repo using <code>git svn</code>.  The process does not consistently convert SVN branches to Git branches, and I'm trying to figure out why.</p>
<p>I start with an SVN repo in the directory <code>svn_source/</code>.  This is a proper repo, not a working copy.  If I checkout a working copy into <code>svn_wc/</code>, I can list its branches explicitly:</p>
<pre><code>~$ svn checkout file://~/svn_source/ ~/svn_wc/
~$ cd svn_wc/
~/svn-wc$ ls -A1h branches/
1.0
1.1
1.2
1.3
2.0
3.0
3.0-alpha
3.0-beta
3.1-test
</code></pre>
<p>When I then use <code>git svn clone</code> to clone the SVN repo (not the working copy) into a full Git repo,</p>
<pre><code>~$ git svn clone --stdlayout --no-metadata file://~/svn_source/  ~/git_full/
</code></pre>
<p>only three of the SVN branches are converted into remote branch references under <code>~/git_full/.git/refs/remotes/origin/</code>:</p>
<pre><code>~/git_full/.git$ tree refs/     
refs/
├── heads/
│   └── master
├── remotes/
│   └── origin/
│       ├── 2.0
│       ├── 3.0-beta
│       ├── tags/
│       └── 3.1-test
└── tags/

5 directories, 4 files
</code></pre>
<p>Why are only these three converted?  I've run the <code>git svn clone</code> three times, and it's always these.  There's nothing special about them that I know of.</p>
","3","6673905",""
"32455606","678977","2015-09-08 10:39:44","0","272","<git><svn><clone><fetch><git-svn>","Resuming a git svn clone from revision number without repeats","<p>Disclaimer: I understand I can specify a revision number to clone from in the format <code>git svn clone svn://svn.server.com/project -s -r N:HEAD</code>. I also understand that <code>git svn fetch</code> continues a <code>git svn clone</code> without a revision from where it left off. </p>

<p>I have several questions:</p>

<ol>
<li><p>If I do a <code>git svn clone</code> from a revision number and interrupt the clone, do I need to specify this revision number again in the fetch to continue? I'm concerned that if I don't the fetch will see I've missed history and start over.</p></li>
<li><p>If I specify a revision number in the fetch after interrupting the clone, will the fetch start again from that revision number or will it continue from where it left off?</p></li>
<li><p>Will I need to <code>rebase</code> when I'm done?</p></li>
</ol>

<p>Thanks in advance, I've spent a fair amount of time googling this.</p>
","1","678977",""
"32458698","5312935","2015-09-08 13:07:49","3","557","<git><svn><version-control><git-svn>","svn-git : git cat-file ""not a valid object name"" bad named file unfindable","<p>As you may have understood i am trying to put a SVN repo on Git, and i need to keep the history.
I use this command to do it :</p>
<blockquote>
<p>git svn clone $1  --no-metadata -A authors_git.txt --stdlayout ~/temp</p>
</blockquote>
<p>But sadly an error occurred, there is a tag with a space in his name and git cat-file doesn't really like it, i know that i have to replace it with &quot;%20&quot; but the file is not at the path given by git cat-file.</p>
<blockquote>
<p>fatal: Not a valid object name refs/remotes/tags/5.0.2 Mercanet</p>
<p>cat-file commit refs/remotes/tags/5.0.2 Mercanet: command returned error: 128</p>
</blockquote>
<p>So i did some researches (i am a trainee and i am doing it for the enterprise i am working for) and i discovered that this tag has been removed, but it is still in the history of the SVN repo (and the history is huge...) .</p>
<p>So here are some questions i have :</p>
<ol>
<li>How can i have access to this file ?</li>
<li>How can i change its name ? (does a simple rename or cp works?)</li>
<li>Do i have to change the name for each SVN revision ?</li>
</ol>
<p>Sorry for the bad english and thanks for reading (and maybe answering) ! Have a nice day !</p>
","1","5312935",""
"15214235","887030","2013-03-05 01:25:44","0","97","<git><svn><git-svn>","git-svn no longer creates branches for subversion tags","<p>I'm using <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-svn.html"" rel=""nofollow noreferrer"">git-svn</a> to manage code locally in Git that is stored centrally in Subversion. The Subversion repository uses the standard layout of ""trunks/branches/tags""; when I created the git repository I used the ""--stdlayout"" argument.</p>

<p>Whenever I would run <code>git svn rebase</code>, Git would correctly create branches whenever Subversion tags were created:</p>

<p><img src=""https://i.stack.imgur.com/l2jAz.png"" alt=""Annotated tag""></p>

<p>However, recently Git stop creating these branches, and now they simply appear as:</p>

<p><img src=""https://i.stack.imgur.com/shLFr.png"" alt=""Missing annotated tag""></p>

<p>How can I restore the original behavior of Git creating a branch whenever there is a new Subversion tag?</p>
","0","887030",""
"15214250","1136967","2013-03-05 01:27:14","2","287","<git><svn><github><git-svn><sourceforge>","git-svn and updated svn url","<p>I was using git-svn for working with a svn repository hosted on sourceforge. Recently, I updated the sourceforge project which resulted in changes to the svn repository. To be precise, the new svn repository can now be accessed using svn+ssh and the old repository has been made read-only.</p>

<p>Now, in my local git-svn clone directory, I updated .git/config to update the previous url with the new one. However, when I do git svn info or git svn rebase, I get the following error:
Unable to determine upstream SVN information from working tree history</p>

<p>Further, I created a fresh git-svn clone using the following command:
git svn init -T trunk -t tags -b branches svn+ssh://USER@svn.code.sf.net/p/dmtcp/code dmtcp-git</p>

<p>This clone works fine and there is no problem with it. However, the refs are different than the old clone.</p>

<p>To make things complicated, I maintain a git repository on github where I push changes once they have been committed to sourceforge svn (for historic reasons). This all used to work with the previous sourceforge svn url. But now with the updated repository, the refs got all messed up i.e. they don't match with the repository on github.</p>

<p>Of course, I can do a ""git push -f"" to update the refs, but wanted to know if someone has any thoughts/ideas on fixing the refs.</p>

<p>Thanks!</p>
","0","1136967","0"
"15296921","2815","2013-03-08 15:00:27","4","1563","<git-svn>","git-svn won't rebase or dcommit","<p>I've no idea exactly how this came to pass but my git-svn is now fubar.</p>

<pre><code>ERROR from SVN:
Transaction is out of date: File '/proj/some/file.java' is out of date
No changes between 61f2c8cfa5881aab335edc2c0807f288c420f624 and refs/remotes/svn/git-svn
Resetting to the latest refs/remotes/svn/git-svn
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
</code></pre>

<p>There was a <a href=""https://stackoverflow.com/q/2922059/2815"">similar question</a> on SO before, but neither solution worked for me - there are no merge conflicts, and moving aside .git/svn and running <code>git svn fetch</code> did not change the error from <code>git svn dcommit</code>. Running fetch did have one interesting statement:</p>

<pre><code>    M   proj/some/file.java
... [merge list] ...
Last fetched revision of refs/remotes/svn/git-svn was r8104, but we are about to fetch: r8102!
</code></pre>

<p>Not sure what that means.</p>

<p><strong>Edit:</strong>
When I looked at the tree in SourceTree, I could see that the SVN was ""ahead"" of the master branch and that commits after r8102 were ""duplicated"" in both trees. Reverting the master to before r8102 and attempting to move forward again did not resolve the problem.</p>

<p><strong>Edit 2:</strong>
The tree looks something like this:</p>

<pre><code>                 +-------D---E---F---G remote/svn/git-svn
                /
           A---B---C---D---E master
</code></pre>

<p>Before I attempt the suggested <code>git rebase remotes/svn/git-svn master</code> by @Ben what should I expect? There are a lot of commits (B &amp; C here) that aren't apparing in the remote, but are in the master, I noticed that the duplicates seem to be somehow related to my switching between different tunneling methods. I need to protect the svn here, this is more for my personal interest (and future avoidance of problems).</p>

<p>From my .subversion/config:</p>

<pre><code>[tunnels]
wlan = /usr/bin/ssh -F /dev/null -l petri -t -A wifi-gateway /usr/bin/ssh -F /dev/null -l svnremote -A
wan = /usr/bin/ssh -F /dev/null -l petri -t -A extern-gateway /usr/bin/ssh -F /dev/null -l svnremote -A
</code></pre>

<p>This results in different svn commit comments like</p>

<pre><code>git-svn-id: svn+wan://dev/svn/v9/trunk@8102 b9636cbc-3124-4d49-8704-a9669b6dc9bf
</code></pre>

<p>I'm wondering if there isn't some bad reference id problems here...</p>
","3","2815","0"
"16874815","1007758","2013-06-01 16:34:46","16","11766","<git><git-svn><git-status>","git status takes too long","<p>I'm working on a project where the version control system is SVN and I want to use git. I did a git svn clone but <code>git status</code> works terribly slow (around 8 minutes). The repository has around 63000 files and most of them are libraries ignored by git. Is this normal? I did a <code>git prune &amp;&amp; git gc</code> to perform a cleanup of unreachable objects and a garbage collect. I also did a <code>git repack -Adf</code> but this made things even worse. It takes even longer(more than 20 minutes).</p>

<p>What am I doing wrong? This is a visual studio project and I assume that the <code>.gitignore</code> file does not contain the right things. Is it possible to find out exactly which files are generated from a visual studio build and which have to be versioned?</p>

<p>If the <code>.gitignore</code> file is not the problem, how can I make my <code>git status</code> faster, is it normal for a project with 65000 files (around 10GB) to work that slow with git? </p>
","5","1007758","0"
"16939434","2455432","2013-06-05 12:01:52","1","330","<git><svn><git-svn><fetch>","git svn shows not correct merge graph","<p>I use git svn bridge and have created some branches that I merged back into master, the problem is if a co-worker fetches the same repo with git-svn, the merge is not shown in his log.</p>

<pre><code>git          svn
-------------------------
master       /trunk
branch1      /branches/branch1
branch2      /branches/branch2
</code></pre>

<p>Branches were based on 584..., a few commits to the master on fc80, 8f99, e0fd, 9df1, 536
after that some testcommits to branch1 (989...) and branch2(8b4...) were done.</p>

<p>After this, I merged branch 1 into master, commit id e1b. I worked some more and later on merged branch 2 into master, commit id 422.</p>

<p>All merging is fine, looks good so far.</p>

<p>Now the problem: if another developer fetches the changes using git-svn from svn server, the branches show no merge path.</p>

<p>How can I make sure that the other developers also know when a branch was merged into master?</p>

<p>All fine after merge on my computer:
<a href=""https://i.stack.imgur.com/HrRSn.png"" rel=""nofollow noreferrer"">http://i.stack.imgur.com/HrRSn.png</a>
<img src=""https://i.stack.imgur.com/HrRSn.png"" alt=""enter image description here""></p>

<p>Log shown on another computer after git-svn fetch
<a href=""https://i.stack.imgur.com/jLhYV.png"" rel=""nofollow noreferrer"">http://i.stack.imgur.com/jLhYV.png</a>
<img src=""https://i.stack.imgur.com/jLhYV.png"" alt=""enter image description here""></p>
","1","2455432",""
"16945508","162325","2013-06-05 16:46:27","0","1656","<git-svn>","git svn ""Unable to determine upstream SVN information from working tree directory""","<p>I have a git repo that was initially cloned from an svn repo. </p>

<p>When I tried a </p>

<blockquote>
  <p>git svn rebase</p>
</blockquote>

<p>I'm getting </p>

<blockquote>
  <p>Unable to determine upstream SVN information from working tree history</p>
</blockquote>

<p>I have read pretty much every post here about this error and I tried</p>

<blockquote>
  <p>git update-ref refs.remotes/git-svn refs/remotes/origin/master</p>
</blockquote>

<p>I have also tried </p>

<blockquote>
  <p>git svn rebase -l</p>
</blockquote>

<p>I'm getting </p>

<blockquote>
  <p>Unable to determine upstream SVN information from working tree history</p>
</blockquote>

<p>I am on git 1.7.11 msysgit.1</p>

<p>Thanks for the help :)</p>

<p>Any ideas?</p>
","0","162325",""
"16948558","1654778","2013-06-05 19:48:10","1","70","<git-svn>","Recover git-svn mirror after svn repository was ""rolled back""","<p>How can i repair my git-svn mirror repository?
It is set up with <code>git svn init ...</code>, then github remote was added. The cron job is doing <code>git svn rebase &amp;&amp; git push</code> periodically.</p>

<p>Everything was fine until upstream somehow ""uncommited"" several revisions from svn, which already was fetched into my git-svn and pushed to github. Then upstream added some new revisions to svn trunk, reusing revision numbers of ""uncommited"" revisions, which broke my syncronization process.</p>

<p>When i realized what hppened, i did <code>git svn reset</code> to last valid revision and commited reverse patch into git.</p>

<p>But since then, i can not pull upstream changes with <code>git svn rebase</code>, i have to do <code>git svn fetch &amp;&amp; git merge trunk</code> instead, resulting in awful history.</p>

<p>Can i somehow tell git-svn that i will not <code>git svn dcommit</code> anything, that it can forget about that reverse patch commit, so <code>git svn rebase</code> can work like it worked before all this happened?</p>
","0","1654778",""
"17992719","2279816","2013-08-01 11:24:04","4","431","<git-svn>","git svn clone: fatal: Reference has invalid format","<p>I'm using git svn clone to convert an svn repo to git and am facing issues with that. My first issue was - </p>

<pre><code>fatal: Not a valid object name refs/remotes/Customer Assistance
cat-file commit refs/remotes/Customer Assistance: command returned error: 128
</code></pre>

<p>I tried the solution mentioned <a href=""https://stackoverflow.com/questions/11365317/git-svn-clone-fails-fatal-not-a-valid-object-name"">here</a> but now it gives me the following error - </p>

<pre><code>fatal: Reference has invalid format: 'refs/remotes/Customer Assistance'
for-each-ref --format=%(refname) refs/: command returned error: 128
</code></pre>

<p>PS: I'm doing this on a Windows machine and I'm using git 1.8.3.</p>
","1","2279816","0"
"18006273","281545","2013-08-01 23:22:41","5","783","<git><git-svn>","how to share the git svn configuration?","<p>So I set up a git-svn repo and pushed it to github. But if one clones it there is no svn config in the clone.<br>
The diff between the repository I pushed and the one I cloned from github just after I pushed is :</p>

<p><img src=""https://i.stack.imgur.com/5uAfH.jpg"" alt=""enter image description here""></p>

<p>The one I pushed (the svn clone with the svn info) is on the right - the clone from github is on the left<br>
Which of those (folders/files (or config sections)) should I share to have people setup git-svn as I have ? In the sense that they clone and then copy paste those files (and possibly run git svn rebase) and they have the same setup as I have. I have cloned all the branches and tags of the svn repo as remote branches also and I would like to share those too. Ideally those files should still be valid even after I (we) start pushing/dcommiting between the git and svn repo</p>
","0","281545","0"
"18006757","2167531","2013-08-02 00:15:19","11","14897","<git><clone><git-svn><git-branch><mirror>","How to clone a git repo with all branches and tags from refs/remotes?","<p>I have a local git repo that I created from an svn repo:</p>

<pre><code>$ git svn clone -s svn:...
</code></pre>

<p>I then created a backup remote and pushed everything to it:</p>

<pre><code>$ git remote add backup git@myhost:mybackup.git
$ git push --mirror backup
</code></pre>

<p>Now, when I try to clone from my backup, it is missing all svn tags and branches.</p>

<pre><code>$ git clone git@myhost:mybackup.git
$ cd mybackup
$ git branch -a
* master
  origin
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>How do I clone the repo with all tags and branches?</p>

<p>The only way I have found is to mirror the repo:</p>

<pre><code>$ git clone --mirror git@myhost:mybackup.git
</code></pre>

<p>This creates a local <code>mybackup.git</code> directory, which knows about all tags/branches (I can use tab completion to get the entire list) but it is not a valid usable repo:</p>

<pre><code>$ git checkout mytag
fatal: This operation must be run in a work tree
</code></pre>

<p>There must be command line option to truly clone the repo with all branches/tags???</p>

<p>I have found several related questions here but none of the answers work for this situation. I assume the difference is that my clone was created with <code>--mirror</code>?</p>
","1","2167531","0"
"18034038","162325","2013-08-03 14:47:01","2","89","<git><git-svn>","An svn repo moved to git. I was using git","<p>So the situation is this.</p>

<ul>
<li>There was an svn repository (open source)</li>
<li>I cloned it using git-svn into my own repo (lets called B) and diverged a little, owner of svn repo wasnt interested in getting PR at the time.</li>
<li>Finally the owner of the svn repo does move to git, lets call this repo C. The owner didn't keep the history when importing :( [FYI I did offer to transfer ownership of my repo]</li>
</ul>

<p><strong>I need to be able to inform my repo (B) that now we can pull from C from now on?</strong> Is there any good way to do this? I had a look at graph but found it pretty confusing.</p>

<p>Thanks in advance for your help</p>
","1","162325","0"
"34593135","1912429","2016-01-04 14:16:07","1","65","<git><git-svn>","What is the advantage of git storing entire content instead of difference between files?","<p>I am reading about how git stores the data/files. I am not able to understand what is the advantage of storing the whole content of a file instead of the differences.</p>

<p>What I understand is, if git stores the differences between each file it will take time for git to reconstruct the original file. </p>

<p>At the same time, storing the entire content instead of the differences will increase the repo size.</p>

<p>Am I right? Can anyone please explain me in detail?</p>
","3","1912429","0"
"35726537","550496","2016-03-01 15:12:59","4","104","<git><git-svn><git-bare>","Track a branch in a bare git-svn","<p>When I run this command:</p>

<pre><code>git --git-dir=firebird.git branch -a
</code></pre>

<p>This is my output:</p>

<pre><code>  B1_5_Release
  B2_0_Release
  B2_1_Release
  B2_5_Release
* master
  remotes/B1_5_Release
  remotes/B2_0_Release
  remotes/B2_1_Release
  remotes/B2_5_Release
  remotes/B3_0_Release
  remotes/origin/B1_5_Release
  remotes/origin/B2_0_Release
  remotes/origin/B2_1_Release
  remotes/origin/B2_5_Release
  remotes/trunk
</code></pre>

<p>A <code>B3_0_Release</code> branch was created in Subversion after this git-svn tree was setup. I don't have a <code>B3_0_Release</code> tracking <code>remotes/B3_0_Release</code>, or something like this. This is a bare repository, so I can't do a ""git checkout -b ..."".</p>

<p>How can I add this new branch to this bare repository? </p>
","0","550496",""
"35733320","810830","2016-03-01 20:56:30","0","40","<git><svn><version-control><git-svn>","Mirroring git's master branch into SVN","<p>Our team is a big fan of git but unfortunately (for us) our company only uses SVN. I am aware of <code>git svn</code>'s existence, but it doesn't work well with many tools.</p>

<p>To avoid bringing over all our branches to SVN (we use gitflow, so a lot of branches), what I'm looking for is a solution that would mirror my git's repository's master branch (hosted on GitHub or similar) to SVN's trunk.</p>

<p>I am not concerned with my SVN being unaware of the branches we are currently working on.</p>

<p>Ideally, merging to the <code>master</code> branch from <code>develop</code> would result in the code and its history making it to SVN's trunk.</p>

<p>Any idea how to achieve this or something similar?</p>
","0","810830",""
"35738680","452210","2016-03-02 04:43:23","22","17046","<git><git-svn>","Avoiding ""warning: There are too many unreachable loose objects"" during git svn clone/fetch","<p>When running a <code>git svn clone</code> or <code>git svn fetch</code> against a large Subversion repository (100k+ commits), the fetch regularly stops with:</p>

<pre><code>Auto packing the repository in background for optimum performance.
See ""git help gc"" for manual housekeeping.
error: The last gc run reported the following. Please correct the root cause and remove .git/gc.log.
Automatic cleanup will not be performed until the file is removed.

warning: There are too many unreachable loose objects; run 'git prune' to remove them.

gc --auto: command returned error: 255
</code></pre>

<p>In order to recover I have to follow the instructions, run a more aggressive prune and gc, remove the log-file and continue, only to have it happen again after another batch of say 10k commits are read.</p>

<p>How can this problem be avoided?</p>
","0","452210","0"
"37278628","189186","2016-05-17 14:12:17","3","1987","<svn><git-svn>","git svn clone: branches moved from repo/ to repo/branches/ and ""Malformed XML: no element found""","<p>With git 2.8.2 and svn 1.9.4 under Cygwin, when cloning our repository with <code>git svn clone</code>, I hit a brick-wall at a certain commit:</p>

<pre><code>r3640 = eb94... (refs/remotes/svn/trunk)
Found possible branch point: https://.../repo/&lt;branchname&gt; =&gt; https://.../repo/branches/&lt;branchname&gt;, 3641
Initializing parent: refs/remotes/svn/&lt;branchname&gt;@3641
Error from SVN, (175009): Malformed network data: The XML response contains invalid XML: Malformed XML: no element found
</code></pre>

<p>Observation #1: When cloning with <code>-r3600:HEAD</code>, that is, from a recent-enough commit, the operation succeeds. Tedious experimentation indicated that the problem appears when starting to clone from around 100 revisions before the problematic commit.</p>

<p>Observation #2: This appears to happen only for branches of the above form: mistakenly created in the repo root <code>repo/&lt;branchname&gt;</code>, and then moved to <code>repo/branches/&lt;branchname&gt;</code></p>

<p>What is the problem and how to fix it?</p>
","0","189186",""
"53828192","57033","2018-12-18 07:27:23","0","57","<git><svn><version-control><git-svn>","git repo as intermediate between two SVN repos for syncing","<p>I am not quite good at GIT way of thinking - and kind of feel lost in the scenario I am thinking of. </p>

<p>To cut the long story short, I am trying to use an intermediate local Git repo to sync two separate SVN repositories on different machines/networks. I don't care about commits to the second repo - I want it to merely be a mirror of the first repo. Basically I will disallow commits to the second repo, so there should be no conflicts. So how would I do it?</p>

<p>I succeeded in cloning the existing SVN repo (git svn clone ..), but how do I specify this other mirror repo as a second remote to push to?</p>

<p>People <a href=""https://coderwall.com/p/vfop7g/add-an-svn-remote-to-your-git-repo"" rel=""nofollow noreferrer"">are talking</a> about modifying the .git/clone file directly to add a second ""remote"" - but then they are kind of connecting it to a new branch - I don't quite want to do that. I just want to push the changes I fetch from my main SVN repo to a second SVN remote. </p>

<p>Basically, to git svn fetch from SVN repo 1 and git svn dcommit NOT to SVN repo 1 but to SVN repo 2.</p>

<p>I understand that some kind of tracking for the second repo should be enabled. Oh gosh it seems to be possible, but I just can't figure this out. Help, anyone? Thanks.</p>

<p>The reason that got me stumped while looking at svnsync solution is that at a single point in time the two SVN repositories are isolated. I first need to VPN to the first repo, fetch changes, disconnect, then connect through VPN2 to second repo and push. That's why Git intermediate local repo appealed to me.. There's <a href=""https://stackoverflow.com/questions/10534405/synch-two-svn-repos-through-git"">this</a>, but again, I kind of find it complicated. Are there no simpler solutions? Weeell.. should I consider intermediate SVN repo or SVK repo as more natural solutions? Thanks again.</p>
","4","57033",""
"38395822","2966326","2016-07-15 12:11:52","0","96","<git><svn><git-svn>","git svn fetch - How to always ignore old revisions","<p>I checked out a big SVN into a git and saved time by ignoring old revisions.</p>

<pre><code>git svn fetch -r 220350:HEAD
</code></pre>

<p>Unfortunately if I want to update the git and get newer revisions after they where cmomited to the SVN and I simply use ""fetch"", git svn starts fetching the older revisions starting at 1 again. </p>

<p><strong>Question:</strong></p>

<p>How can I tell git svn to always ignore revisions earlier than 220350?
I would like to simply enter </p>

<pre><code>git svn fetch
</code></pre>

<p>and get the newest updates that where added after my last fetch.</p>

<p>Thanks in advance</p>
","0","2966326",""
"38508639","755798","2016-07-21 15:42:19","1","5711","<git><svn><git-svn>","git-svn clone within a specific revision range","<p>I'm trying to use git-svn to import a brunch of projects hosted in a svn server.</p>

<p>The repository structure looks as follows</p>

<pre><code>root
    [...]
    project 1
        trunk
        branches
        tags
    project 2
        trunk
        branches
        tags
    [...]
</code></pre>

<p>what I want to achieve is to import all the svn history of <em>project1</em> and <em>project2</em>.</p>

<p>Unfortunately the origin repository contains more than 2 million revisions... a full git-svn clone would last forever.</p>

<p>So I retrieved the first and last revision of my two projects and tried to run</p>

<pre><code>git svn clone -s https://svn.bansel.it/h2o/ \
    --include-paths='^[/](Project1|Project2)' \
    -r1788813:1792593
</code></pre>

<p>where <strong>1788813</strong> is the first revision and <strong>1792593</strong> is the last i'm intrested in.</p>

<p>When I exexute the command it runs withot error. I also notice some network traffic, but if later on i try a to run <code>git svn log</code></p>

<pre><code>$ git svn log
fatal: bad revision 'HEAD'
rev-list --first-parent --pretty=medium HEAD --: command returned error: 128
</code></pre>

<p>also the target repository seems completely empty.
Am I missing something?</p>

<p><strong>EDIT</strong></p>

<p>I will not be able to shut down the SVN repository after the import, so i will need a bidirectional synchronization</p>
","0","755798",""
"71514495","915869","2022-03-17 14:57:23","0","59","<git><svn><git-svn><subgit>","Subgit: Pattern is not empty and doesn't have format segment1/segment2/.../segmentN","<p>I am trying to convert a Subversion repository to Git using subgit. The SVN structure is roughly as follows:</p>
<pre><code>trunk
├── Projects
│   ├── Project1
│   │   └── src
│   ├── Project2
│   └── Project3
├── SomeOtherDir
└── YetAnotherDir
branches
├── Projects
│   ├── Project1
│   │   ├── Branch_1
│   │   │   └── src
│   │   └── Branch_2
│   ├── Project2
│   └── Project3
├── SomeOtherDir
└── YetAnotherDir
tags
... similar to branches structure
</code></pre>
<p>As all of this is old code and I don't want to split it into multiple small repositories, my idea was to set the mapping in the subgit config file like this:</p>
<pre><code>trunk = trunk:refs/heads/master
branches = branches/Projects/Project1/Branch_1:refs/heads/Project1_Branch_1
</code></pre>
<p>This worked for other repos and it seems to work on some branches here, however with other branches I get the following error:</p>
<pre><code>SubGit version 3.3.12 ('Bobique') build #4419

IMPORT FAILED

error: Failed to load Subversion configuration at '/path/to/subgit/config'
error: Invalid layout option 'svn.branches': Pattern &quot;/refs/heads/Project1_Branch_1&quot; is not empty and doesn't have format segment1/segment2/.../segmentN.
</code></pre>
<p>I don't really understand what the error means or how to fix it. Any ideas or suggestions would be much appreciated. Thanks!</p>
","0","915869",""
"71581067","9059776","2022-03-23 02:13:30","3","181","<git><github><svn><migration><git-svn>","Move SVN changes to git","<p>In the company where I work, we are currently in the process of migrating from SVN to git and also updating frameworks and languages version in the process. as a result i currently have 2 repositories, one in svn and another one git which both have received many commits after the initial migration.</p>
<p>Our git repository is GitHub and I used the GitHub migration tool to create the initial commit bringing all the history from svn to the Github repo.</p>
<p>My problem is that I need now to update the GitHub repository with the most recent bug fixes that have been applied to svn. is there any way to sync these 2 repos without doing it manually?</p>
<p>Any help would be appreciated since I'm applying commit by commit manually to the GitHub branch but there are so many changes that this is going to take forever.</p>
<p>My expectation is to be able to merge automatically the svn repo commits (history not needed) to the GitHub branch.</p>
","0","9059776","0"
"71798816","12966398","2022-04-08 14:31:43","0","88","<git><svn><version-control><git-svn>","Using git svn clone","<p>In One of the Project I am working, I have been tasked to <strong>migrate SVN repository to Git</strong>.</p>
<p>I have seen some Answers how to do it, I was trying to use <strong>git svn clone to clone svn repository to git</strong>. As Users are frequently using SVN repository I wanted to know using git svn clone will not hamper anything in the SVN repository and users will be able to use it while git svn clone is running. Also it will not break anything in the SVN and does it only clones the repository in git.
I know it might be a stupid question but I was bit apprehensive to using it.</p>
<p>Thanks in advance for any answers to this.</p>
","2","12966398",""
"54039714","4868978","2019-01-04 13:18:48","4","457","<git><svn><git-svn>","git svn clone get stuck after Initialized","<p>I am using tortoisegit to clone svn repository. Which get stuck after git initialization. I can see following command is running in logs:</p>

<pre><code>git.exe svn clone ""https://&lt;svn url&gt;"" ""E:\project"" -T trunk -b branches -t tags
</code></pre>

<p>When I tried this command in command line, then also same thing happening. So no issue with tortoisegit.</p>

<p>It works on my old laptop. But it doesn't work on my new system. It always give following error and no information after that:</p>

<pre><code>Initialized empty Git repository in E:/project/.git/
</code></pre>
","0","4868978","0"
"54224050","8396690","2019-01-16 19:30:50","0","50","<git><svn><git-svn>","SVN to git conversion: branch formation","<p>My SVN repo looks like following:<br>
     <code>branches/</code> <code>tags/</code> <code>trunk/</code> <br></p>

<p>Inside the branches folder, I have following:<br>
<code>branches/dev1/example1</code> <code>branches/dev2/example2</code> <code>branches/dev3/example3</code></p>

<p>I want to make <code>example1</code>,<code>example2</code> and <code>example3</code> as git branches during conversion.</p>

<pre><code>git svn clone https://myurl -T trunk -b branches/dev1/example1 -b branches/dev2/example2 -b branches/dev3/example3 -t tags -A authors-transform.txt
</code></pre>

<p>I am getting into an infinite loop in linux. It is working fine (without forming the desired git branch though!) if I don't give the option of different branches and just give <code>-b branches</code> </p>

<p>Can anyone suggest a way to make the branches during the git conversion?</p>

<p><strong>Solution:</strong></p>

<pre><code> git svn clone https://myurl -T trunk -b branches/dev1 -b branches/dev2 -b branches/dev3 -t tags -A authors-transform.txt 
</code></pre>
","0","8396690","0"
"54277632","1443496","2019-01-20 14:50:39","6","6377","<git><svn><git-svn><git-clone>","git-svn clone: unable to connect to a repository","<p>Environment information</p>

<pre><code>~$ git --version
git version 2.11.0
~$ git svn --version
git-svn version 2.11.0 (svn 1.9.5)
~$ svn --version
svn, version 1.9.5 (r1770682)
</code></pre>

<p>I'm attempting to clone an internally-hosted SVN repository, but I'm met with the following error:</p>

<pre><code>~$ git svn clone http://[server]/svn/dev1
Initialized empty Git repository in [~]/test/[root]/.git/
Can't create session: Unable to connect to a repository at URL \
  'http://[server]/svn/[root]' at /usr/share/perl5/Git/SVN.pm line 148.
</code></pre>

<p>SVN checkout works as expected.  I've tried using the <code>svn://</code> protocol, but then it does not recognize <code>[server]</code> as a known hostname.</p>

<p>If I separate <code>clone</code> into <code>init</code> and <code>fetch</code>, it's the <code>fetch</code> step that is failing.</p>

<p>I should add that solutions like SmartGit are sadly not an option for me; I work at a company with >1000 devs so the cost to support one developer would be astronomical.</p>

<hr>

<p><code>SVN.pm:148</code> reads <code>my $ra = Git::SVN::Ra-&gt;new($url);</code> – from elsewhere in my research (I can't find the post anymore), I believe this is a wrapper around an SVN function.  Here's the definition of <code>Ra-&gt;new</code>:</p>

<pre class=""lang-perl prettyprint-override""><code>sub new {
        my ($class, $url) = @_;
        $url = canonicalize_url($url);
        return $RA if ($RA &amp;&amp; $RA-&gt;url eq $url);

        ::_req_svn();

        $RA = undef;
        my ($config, $baton, $callbacks) = prepare_config_once();
        my $self = SVN::Ra-&gt;new(url =&gt; $url, auth =&gt; $baton,
                              config =&gt; $config,
                              pool =&gt; SVN::Pool-&gt;new,
                              auth_provider_callbacks =&gt; $callbacks);
        $RA = bless $self, $class;

        # Make sure its canonicalized
        $self-&gt;url($url);
        $self-&gt;{svn_path} = $url;
        $self-&gt;{repos_root} = $self-&gt;get_repos_root;
        $self-&gt;{svn_path} =~ s#^\Q$self-&gt;{repos_root}\E(/|$)##;
        $self-&gt;{cache} = { check_path =&gt; { r =&gt; 0, data =&gt; {} },
                           get_dir =&gt; { r =&gt; 0, data =&gt; {} } };

        return $RA;
}
</code></pre>

<p>I don't know Perl, so this is about as far as I can go on my own – I can't find the <code>SVN::Ra-&gt;new</code> this mentions.</p>
","2","1443496",""
"54453484","5691194","2019-01-31 04:50:51","1","1596","<git><svn><version-control><git-svn><svn2git>","How to clone local svn repository to local git repository?","<p>Recently I am working on migrating one of my <code>SVN</code> repository to Git. I am able to do so if I use my svn repository on internet. But the repository is too big (It has over <em>60000 commits</em>) so it is taking a very long time to do so. The internet gets disconnected in between then I have to start over. So, I thought to clone the svn repo onto my local and then clone the local svn repo to local git repo.
BUT I am only able to clone SVN repo to my local and unable to clone it to local git repo. I am using git-svn to do so. I am getting the following error.  </p>

<blockquote>
  <p><em>“Can't create session: Unable to connect to a repository at URL 'file:///c:/gitMigr/repo-svn': Unable to open repository 'file:///c:/gitMigr/repo-svn' at C:/Program Files/Git/mingw64/share/perl5/Git/SVN.pm line 310.”</em></p>
</blockquote>

<p>I already have the <code>authors.txt</code> file in my directory. I am using the following command:</p>

<pre><code>git svn clone file:///c:/gitMigr/repo-svn --no-metadata -A authors.txt --stdlayout temp
</code></pre>

<p>Note: <strong>""temp""</strong> is my local git repo name in which I want to clone the svn repo.
Please help me out. Thanks in advance.</p>
","0","5691194","0"
"54481948","346112","2019-02-01 14:56:20","0","420","<git><svn><git-svn>","git svn clone - How to convert Subversion remotes to Git locals (Windows)","<p>I've attempted to follow the <a href=""https://git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git"" rel=""nofollow noreferrer"">official Git instructions</a> on how to do a one-time, one-way migration of a project from Subversion to Git. I've attempted it a few times, with slightly different options, but I'm not getting the result that I expected.</p>

<p>The instructions suggest that the imported Subversion tags and branches should appear here in the newly created local Git repo after the import procedure is finished:</p>

<pre><code>my-new-local-git-repo\.git\refs\remotes
</code></pre>

<p>But the Subversion tags/branches actually exist here:</p>

<pre><code>my-new-local-git-repo\.git\svn\refs\remotes\origin
</code></pre>

<p>I suspect that's why the post-import cleanup instructions aren't working for me. I don't know if I've made a mistake in the command/options that I used to execute the import, if the instructions are out-of-date, or if I'm making a mistake elsewhere.</p>

<p>This is the command that I used to create this Subversion-to-Git migrated repo:</p>

<pre><code>git svn clone --stdlayout --authors-file=users.txt http://svn/repo/root/MyProjectInSVN/ new-local-git-repo
</code></pre>

<p>Here are some screenshots of what the resulting local Git repo remote references look like:</p>

<p><a href=""https://i.stack.imgur.com/SFFTW.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SFFTW.jpg"" alt=""screenshot 1""></a></p>

<p><a href=""https://i.stack.imgur.com/JVKzA.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JVKzA.jpg"" alt=""screenshot 2""></a></p>

<p>Any suggestions on how I can convert these imported Subversion remote branches and tags into local Git branches and tag would be greatly appreciated!</p>
","0","346112",""
"56560468","1600","2019-06-12 10:53:49","1","49","<git><svn><version-control><git-svn>","git-svn: add branches after the fact","<p>I've successfully imported a large Subversion repository into git using <code>git-svn</code>. It took over four days and I had to help it out by skipping a few revisions.</p>

<p>Unfortunately, I forgot some branches.</p>

<p>The reason is that their structure in the original Subversion hierarchy differs significantly. Here's how <em>most</em> branches are laid, roughly:</p>

<pre><code>/MainProject // this is the trunk
/MainProject_Branches/SomeBranch
/MainProject_Branches/AnotherBranch
</code></pre>

<p>This worked fine with <code>--branches=</code>.</p>

<p>But also, there's additional branches in an <code>old</code> subfolder in that <em>same</em> branches folder:</p>

<pre><code>/MainProject_Branches/old/AVeryOldBranch
/MainProject_Branches/old/AnotherOldBranch
</code></pre>

<p><em>And</em> then also, there's a completely different hierarchy:</p>

<pre><code>/Customers/SomeCustomer/MainProject_CustomerSpecificFork // this, too, is a branch
/Customers/AnotherCustomer/MainProject_AnotherCustomerSpecificFork // this, too, is a branch
</code></pre>

<p>I'd like to handle those two scenarios retroactively.</p>

<p>So, one, <code>git-svn</code> thought to import the entirety of <code>/MainProject_Branches/old</code> as a single branch, which of course doesn't make sense. This is no big deal, but ideally, <strong>I'd like for the incorrect ""old"" branch to be replaced with the real branches underneath.</strong> (Incidentally, it appears at least SourceTree considers a branch with a slash in its name to be a hierarchy. So even better would be if these could literally be imported in a collapsible sub-branch hierarchy!)</p>

<p>Second and more critically, all the customer-specific forks are missing altogether, since they're in a completely different hierarchy (but in the same SVN repository). I'd like those added after the fact.</p>

<p>Is this possible at all? Do I need a different tool than <code>git-svn</code>?</p>
","0","1600","0"
"56691020","3734640","2019-06-20 17:20:59","0","31","<git><git-svn>","git svn tool to migrate from SVN containing multiple duplicate repositories","<p>I am working on a project where <code>SVN</code> repo contains duplicate repositories</p>

<pre><code>/trunk/project_v1
/trunk/project_v2
/trunk/project_tomcat_migration_v3
/trunk/empService1
/trunk/empService2
/trunk/empService_random_string_v3

  .
  .
</code></pre>

<p><code>Tags</code> also contains duplicate repositories.</p>

<ol>
<li>I want to pick the latest version of project svn repository (say project_tomcat_migration_v3) and push it to git repository on master. Rest of the duplicate repositories (say v1 and v2), I want to push on a separate branch. is there any way to achieve this using <code>git svn</code> command.</li>
<li>If the above thing is not possible with <code>git svn</code> is there any way to clone SVN repo and it to the branch of existing git repo <br />
something around the line as below:<br /></li>
</ol>

<p><code>git svn clone http://url/trunk//trunk/project_v2 --separate_branch_on_existing_repo</code>  </p>
","0","3734640",""
"55623790","7841375","2019-04-11 02:23:52","0","33","<git><svn><git-svn>","Not dcommitting every change made to svn using git-svn","<p>I have an SVN repo that I have copied in my PC and I've been making some changes and commits. I make a commit for every code issue I solve (that I've been asked to solve). If I'm in the process of solving one, I just save the code and leave it on my computer (until I solve it, that I commit it). I'm using <code>git svn</code>.</p>

<p>Today I've solved three issues (and so made three commits) and I left the code in the process of solving another one. I want to push (<code>dcommit</code>) all commits I've made locally.</p>

<p>The thing is: I still have files that have not been committed and, when I try to <code>dcommit</code> I get ""needs update"" for every one of them.</p>

<p>How can I <code>git svn dcommit</code> only what I have done <code>git add</code> to in my local repo? I want to do just what <code>git push</code> does, and have all my unversioned files/diffs untouched.</p>

<p>I know this is probably malpractice or something, but there goes my workflow.</p>
","0","7841375",""
"55805526","6549517","2019-04-23 06:33:17","1","69","<git><svn><git-svn>","How to keep two svn branches still track after changing them into one git repository?","<p>Suppose I have a project root directory called Root, and there are two directories Root/A and Root/B under it. I used svn to manage this project before, and B is the svn branch of A (created using <code>svn cp</code>). Now the project has been migrated to git using <code>git svn</code>, while the entire Root directory becomes a git repository.<br>
I have encountered two problems which bother me for days:</p>

<ol>
<li>How can I make directory B continue to track A just like before, which means I can <code>cd B</code> and <code>merge</code> modifications of A?  </li>
<li>Another problem is that before the project was migrated to git, the A directory still has some svn commits that are not merged into the B directory. How should I find these changes now and merge them into the B directory?</li>
</ol>

<p>Thanks for your advice and help!</p>
","0","6549517","0"
"55814947","408496","2019-04-23 15:45:43","0","442","<git><git-svn>","Incomplete svn commit histories with git svn","<p>We are migrating an svn branch to git. </p>

<p>We failed in getting a complete commit histories from svn in git repo and need help to get the complete history correctly. </p>

<p>git svn clone didnt work for us because it keeps failing with</p>

<p>""warning: There are too many unreachable loose objects; run 'git prune' to remove them.""</p>

<p>Our repo has about r250000 commits</p>

<p>We have a repo root URL at <a href=""https://abc.xyz.com/svn/app1"" rel=""nofollow noreferrer"">https://abc.xyz.com/svn/app1</a></p>

<p>We have branch A containing folders (url: <a href=""https://abc.xyz.com/svn/app1/proj1/A/trunk"" rel=""nofollow noreferrer"">https://abc.xyz.com/svn/app1/proj1/A/trunk</a>)</p>

<p>tp</p>

<p>src</p>

<p>jrp</p>

<p>We have branch B created (from Branch A at r12000) containing folders (url: <a href=""https://abc.xyz.com/svn/app1/path/to/proj2/B/trunk"" rel=""nofollow noreferrer"">https://abc.xyz.com/svn/app1/path/to/proj2/B/trunk</a>)</p>

<p>tp</p>

<p>src</p>

<p>jrp</p>

<p>We want to migrate svn branch B to git as our trunk in git</p>

<p>We use non-standard SVN layout</p>

<p>We use git-svn version 2.18.0 (svn 1.7.14)</p>

<p>We do not use svn2git</p>

<p>What are we doing wrong ?</p>

<p>1st run</p>

<p>We tried </p>

<pre><code>cd svngitTrunkrepo
git config gc.pruneExpire now
git config gc.auto 1
git svn init  https://abc.xyz.com/svn/app1 -T path/to/proj2/B/trunk --prefix svn/ svngitTrunkrepo
git svn fetch

error: invalid object 100644 xxxyyyzzz111222333444555666 for 'src/to/file.java'
fatal: git-write-tree: error building trees
write-tree: command returned error: 128
</code></pre>

<p>2nd run</p>

<p>We tried</p>

<pre><code>cd svngitTrunkrepo2
git config gc.pruneExpire now
git config gc.worktreePruneExpire now
git config gc.reflogExpire now
git config gc.reflogExpireUnreachable now
git config gc.auto 1
git svn init https://abc.xyz.com/svn/app1 -T path/to/proj2/B/trunk --prefix svn/ svngitTrunkrepo2
git svn fetch -r 1:50000
git gc --aggressive
git svn fetch -r 50000:66813
git gc --aggressive
git svn fetch -r 66813:76813
git gc --aggressive
(continue)
git svn fetch -r 216813:220000
git gc --aggressive
</code></pre>

<p>The output of the run shows</p>

<pre><code>(continue)
r218237 = b9e6e8ee272fdaa2611f6c3e9ccc05d412ecdf48 (refs/remotes/svn/trunk@218238)
Auto packing the repository in background for optimum performance.
See ""git help gc"" for manual housekeeping.
Found branch parent: (refs/remotes/svn/trunk) b9e6e8ee272fdaa2611f6c3e9ccc05d412ecdf48
Following parent with do_switch
Successfully followed parent
r218239 = d4af17ac206cb4650f1aa0490dfdb4e1c00a5c16 (refs/remotes/svn/trunk)
Auto packing the repository in background for optimum performance.
See ""git help gc"" for manual housekeeping.
Checking out files: 100% (63293/63293), done.
Checked out HEAD:
  https://abc.xyz.com/svn/app1/path/to/proj2/B/trunk r218239
fatal: gc is already running on machine 'ppplwxzdw' pid 21345 (use --force if not)
</code></pre>

<p>We then check the commit history</p>

<pre><code>svngitTrunkrepo2]# git log -v
</code></pre>

<p>but we only saw 29 revisions as opposed to the expected 198312 revisions</p>
","2","408496",""
"72798823","19442132","2022-06-29 09:14:52","0","49","<svn><tags><git-svn><trunk>","How to git svn tag just some folders?","<p>I've a standard svn repo:</p>
<ul>
<li>branches/</li>
<li>tags/
<ul>
<li>0.1/</li>
<li>0.2/</li>
</ul>
</li>
<li>trunk/
<ul>
<li>devops/</li>
<li>code/</li>
</ul>
</li>
</ul>
<p>and i want to tag <em>devops</em> and <em>code</em> folders into <em>tags/0.3</em> by git-svn.
Use of <code>git svn tag 0.3</code> instead creates a new tag with all the repo inside, including <em>tags</em> and <em>branches</em>. How can i exclude them?</p>
","2","19442132",""
"72814333","1677617","2022-06-30 10:37:19","1","140","<git-svn>","Merge folders as branches when doing git svn clone","<p>How do we use the git svn clone to create multiple directories as branches and retain the branch name as is.</p>
<p>Here is the current svn structure</p>
<ul>
<li>svn/url/projectrootfolder/code
<ul>
<li>Subfolder1</li>
<li>Subfolder2</li>
</ul>
</li>
<li>svn/url/projectrootfolder/code_1</li>
<li>svn/url/projectrootfolder/code_2</li>
<li>svn/url/projectrootfolder/code_3</li>
</ul>
<p>Run the following command with branches parameter (ignore code_2 and code_3)</p>
<p><code>echo svnpassword | git svn clone &quot;svn/url/projectrootfolder&quot; --trunk=code --branches=code_1 --no-metadata --authors-file=&quot;authors.txt&quot; --prefix=&quot;svn/&quot; --preserve-empty-dirs --placeholder-filename=.gitkeep --username svnreader ProjectLocalFolder    </code></p>
<p>Check branch status</p>
<p><code>git branch -a</code></p>
<p>shows</p>
<pre><code>* Master 
remotes/svn/Subfolder1
remotes/svn/Subfolder2
remotes/svn/trunk
</code></pre>
<p>I have only about a weeks worth experience with git and I assumed that the comamnd would create local branch code_1. But I don't see code_1 anywhere and the subfolders within the main project folder as branches. All the documentations I read seemed to indicate that git svn clone would achieve the desired result.</p>
","0","1677617",""
"72902880","6298476","2022-07-07 18:52:58","1","174","<svn><git-svn>","svn: E235000:assertion failed (!""URI canonicalization failed"") error: git-svn died of signal 6","<p>Getting below error while converting svn local export data into git on Ubuntu.
Please help me to resolve this error.</p>
<p>svn: E235000: In file '/build/subversion-owKwd0/subversion-1.13.0/subversion/libsvn_subr/dirent_uri.c' line 1684: assertion failed (!&quot;URI canonicalization failed&quot;)
error: git-svn died of signal 6</p>
","0","6298476",""
"56129701","9568178","2019-05-14 11:46:07","0","71","<git><svn><git-svn>","I'd like to copy svn project to git with history","<p>I would like to copy svn project to git project on linux environment. Currently I'm having my project in svn repo with branches, tags and trunk folder structure. I need to copy everything to git repo including history. I thought of using svn2git but do not have a good idea on the steps that I need to follow.</p>
","2","9568178",""
"56168488","10754997","2019-05-16 12:23:54","0","866","<git><svn><git-svn><svn2git>","Why do a lot of revisions get lost in git-svn?","<p>I am currently trying to move a couple of projects from svn to git using git-svn. No matter which project I am trying to convert, there are many more svn revisions than git commits. I don't really know svn, so I have a hard time figuring out why that happens.</p>

<p>I have basically followed <a href=""https://stackoverflow.com/questions/79165/how-do-i-migrate-an-svn-repository-with-history-to-a-new-git-repository/3972103#3972103"">this</a> guide for conversion.
The loss on the way ranged from 18 revisions to 9 commits up to from 131 revisions to 10 commits in git. This happened in projects with many branches as well as ones without any branches.</p>

<p>So far I have tried using the option <code>--stdlayout</code> (<a href=""https://stackoverflow.com/questions/10982285/missing-revisions-after-git-svn-clone"">Missing revisions after &quot;git svn clone&quot;</a>).
I have also tried using <a href=""https://github.com/svn-all-fast-export/svn2git"" rel=""nofollow noreferrer"">svn2git</a>, however that failed as well, likely because my projects don't seem to have the infrastructure svn2git requires (format and db files are missing).
I guess I will eventually find a way to do this by using any of the other tools available (like <a href=""https://github.com/nirvdrum/svn2git#readme"" rel=""nofollow noreferrer"">this</a>) but I would just really like to know why this happens.</p>

<p>So: Does anyone know why so many revisions are not shown in the commit history when using git-svn for converting svn repositories to git? Is git-svn just buggy or are there some revision types which just aren't shown in a git commit history?</p>

<h2>Update</h2>

<p>I have since found out that <code>svn log</code> - contrary to <code>git log</code> - shows all revisions in the history, not just the ones to trunk/master. This means that many of the revisions I thought were missing, were actually just in branches. However, even so, not all revisions are in the commit history. The ones that are missing are those which are shown when calling <code>svn log</code> e.g. inside <code>\branches</code> (but not inside one of the branches). <code>git-svn</code> does probably not import them because they affect neither master nor any of the branches. While this is clear to me now, I'm still somewhat at a loss as to the significance of this. Are those revisions important or is the git history fine without them?</p>

<h2>Update 2</h2>

<p>The .git/config file</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    ignorecase = true
[svn-remote ""svn""]
    noMetadata = 1
    url = svn://TheURL/TheRepository
    fetch = trunk:refs/remotes/svn/trunk
    branches = branches/*:refs/remotes/svn/*
    tags = tags/*:refs/remotes/svn/tags/*
[svn]
    authorsfile = /a/file/path/svn/authors-transform.txt
[remote ""origin""]
    url = https://github.com/User/TheRepository.git
    fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>The file structure:</p>

<pre><code>TheRepository
|
+--branches
|  |
|  +--branchA
|  |
|  +--Readme_branch.txt
|
+--trunk
|
+--tags
</code></pre>
","12","10754997",""
"72968529","463023","2022-07-13 15:06:31","1","67","<git><git-svn>","Migrating a non standard layout svn repository to git","<p>I have a local svn repository with a non standard layout, i.e., without trunk, branches and tags and with many &quot;flat&quot; projects. It's like this:</p>
<pre><code>&lt;repo root&gt;/project1/&lt;source files&gt;
&lt;repo root&gt;/project2/&lt;source files&gt;
...
</code></pre>
<p>I want each project to get into a separate git repo.</p>
<p>I'm doing the authors conversion step <strong>1</strong> as described in <a href=""https://gist.github.com/epicserve/1219858/9f30d5ffca7d6b6e4130c4b9b300b8167c868a5f"" rel=""nofollow noreferrer"">this guide</a></p>
<p>and then using this command instead of the one in step <strong>2</strong>:</p>
<pre><code>cd &lt;repo root&gt;/project1/
git svn clone file:///&lt;path to root&gt;/project1 --no-metadata -T ./ --authors-file=authors-transform.txt ~/temp.git
</code></pre>
<p>I don't use the <code>--stdlayout</code>, because I don't have such layout, and I also use the <code>-T</code> option to denote where the trunk should be found for this repo. The step seems to run ok, and ~/temp.git contains the source files of the project. I can see the commit logs and the change in there with <code>git log</code>, <code>git diff</code>.</p>
<p>Then I'm executing next two steps as they are given in the guide.
Step <strong>4</strong> gives the following output:</p>
<pre><code>$ git push bare
Counting objects: 534, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (499/499), done.
Writing objects: 100% (534/534), 281.99 KiB | 2.82 MiB/s, done.
Total 534 (delta 261), reused 0 (delta 0)
remote: Resolving deltas: 100% (261/261), done.
To /home/thanos/new-bare.git
 * [new branch]      origin/trunk -&gt; origin/trunk
</code></pre>
<p>which I don't know if it's correct. Step <strong>5</strong> is then failing:</p>
<pre><code>$ git branch -m trunk master
error: refname refs/heads/trunk not found
fatal: Branch rename failed
</code></pre>
<p>Any clue what I 'm doing wrong? Is the use of <code>-T</code> in step <em><strong>2</strong></em> correct? And the no use of <code>--stdlayout</code>?</p>
","2","463023",""
"73154449","19640661","2022-07-28 14:23:13","1","55","<git><svn><git-svn>","Save svn properties (externals) during svn to git conversion to a file inside git repo","<p>I'm trying to migrate a complicated subversion repository to git with 20,000.  It has externals that change at least every 100 revisions.  It has (and sadly depends on) empty folders.</p>
<p>My main question is if there is a way to do the following.</p>
<p>As the conversion happens, for every revision, run <code>svn propget svn:externals -R</code> and put it in a file in the root of the newly created git repository.  That way it becomes possible to at least know how to recreate how they were hooked up on any given revision when checking out an older commit from before the conversion.</p>
<p>If there is a way to run an arbitrary command on each converted revision before it is committed, that would be enough to get me where I need to be, es (and be able to do a lot more.)</p>
","1","19640661",""