Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"436125","45978","2009-01-12 17:01:23","115","98810","<git><git-submodules><git-subrepo>","Two git repositories in one directory?","<p>Is it possible to have 2 git repositories in one directory?  I'd think not, but thought I'd ask.  Basically, I'd like to check in my home directory config files (e.g. .emacs) which should be common across all of the machines I work on, but have a second repository for local files (e.g. .emacs.local), which contains machine-specific configurations.  The only way I can think of to do that is to have the local config in a subdirectory and ignore that subdirectory from the main git repository.  Any other ideas?</p>
","2","45978","0","0"
"57485689","6322678","2019-08-13 21:44:56","1","127","<git><git-subtree><git-subrepo>","Using git subrepo or tree like SVN external","<p>We are transitioning from SVN to git finally, thank the gods and little fishes.  </p>

<p>But we have a very extensive library system that lives in SVN externals.  </p>

<pre><code>--Libraries 
--|--Lib1
--|--Lib1.project
--|--libs
--|--|--Lib1
--|--|--|--Lib1ForDistro.lib
--|--UnitTests
--|--DebuggingCode
--|--Lib2
--|--Lib2.project
--|--libs
--|--|--Lib2
--|--|--|Lib2ForDistro.lib
--|--UnitTests
--|--DebuggingCode


--Projects
--|--Proj1
--|--|--libs
--|--|--|--Lib1
--|--|--|--Lib1ForDistro.lib
--|--|--|--Lib2
--|--|--|--Lib2ForDistro.lib
</code></pre>

<p>Everything has lots of relative paths use between the tools, unit test framework and such.  </p>

<p>What I ideally want is a way to put all of our libraries as subrepos (or possibly subtrees) and keep the same relative path scheme that we have going now.  </p>

<p>I have only come up with the one possible way to do this.  Each library has two repos, one for development and the other contains the test code and the first repo as a subrepo. Then use the subrepo as normal.  </p>

<p>Is there a way to not use a whole repo as a subrepo but instead use only one folder?</p>
","2","6322678","0","0"
"75119732","21008076","2023-01-14 17:01:19","0","48","<amazon-web-services><aws-codecommit><git-subrepo>","git-subrepo: Failed to 'git ls-remote --symref https://git-codecommit.us-east-1.amazonaws.com/v1/repos/<repo-name>'","<p>I am failing to create a git subrepo inside of the AWS CodeCommit repository.</p>
<p>I managed to clone this repository without any problem, but when I run <code>git subrepo</code> or <code>git-subrepo</code> commands inside of the parent directory I am getting this:</p>
<pre><code>$ git-subrepo clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/&lt;repo-name&gt; &lt;dir-name&gt;
git-subrepo: Failed to 'git ls-remote --symref https://git-codecommit.us-east-1.amazonaws.com/v1/repos/&lt;repo-name&gt;'.
</code></pre>
<p>I also have tried to unset global <code>credential.helper</code> value or set a different value. And when I manually run <code>git ls-remote ...</code> it executes without any error.</p>
","0","21008076","",""
"66133116","4898202","2021-02-10 08:13:17","0","115","<git><gitignore><git-status><git-untracked><git-subrepo>","How do I remove untracked directory tree (submodule / sub-repository) from main git repository?","<p>For the life of me I can't seem to 'remove' an untracked sub-module/directory from the main git repository. I've tried various syntaxes, but I keep getting the 'pathspec' error stating there was no match, even though the folder is there in plain site. I added it to the <code>.gitignore</code> and it has not been added or committed to the main repository at all yet, but it keeps showing up in red under <code>Untracked files:</code> when I run <code>git status</code> and I can't get rid of it. <code>git clean -n</code> shows nothing either.</p>
<p>Any clues as to what I'm doing wrong here?</p>
<p><em><strong>To be clear:</strong> I <strong>don't want to delete</strong> the sub-repo, I merely want to <strong>track the sub-repo entirely separately</strong> and have the main-repo totally ignore it as if it does not exist.</em></p>
<pre class=""lang-git prettyprint-override""><code>### /home/user/  &lt;-- main/master repository (ACTUAL), separate git-directory

$pwd
/home/user


$cat .git
gitdir: /home/git-repositories/user-main


### /home/user/ntc-templates/   &lt;-- sub repository, separate git-directory

$cat ntc-templates/.git
gitdir: /home/git-repositories/ntc-templates


$git status
On branch master
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    modified:   .recently-used

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    ntc-templates/     ### &lt;&lt;------------------ how do I get rid of this line?

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)


$git rm -rf ntc-templates/
fatal: pathspec 'ntc-templates/' did not match any files


$git rm -rfn --cached ntc-templates/
fatal: pathspec 'ntc-templates/' did not match any files


$git rm -rfn --cached ntc-templates
fatal: pathspec 'ntc-templates' did not match any files


$git rm -rfn --cached ~/ntc-templates
fatal: pathspec '/home/user/ntc-templates' did not match any files


$ll ntc-templates/
total 168
drwxr-xr-x  6 user user  4096 Feb 10 11:49 ./
drwxr-xr-x 49 user user  4096 Feb 10 11:59 ../
-rw-r--r--  1 user user 29276 Feb 10 11:48 CHANGELOG
-rw-r--r--  1 user user 15443 Feb 10 11:48 development_scripts.py
-rw-r--r--  1 root root    45 Feb 10 11:49 .git
drwxr-xr-x  2 user user  4096 Feb 10 11:48 .github/
-rw-r--r--  1 user user    54 Feb 10 11:48 .github_changelog_generator
-rw-r--r--  1 user user  2622 Feb 10 11:48 .gitignore
drwxr-xr-x  3 user user  4096 Feb 10 11:48 lib/
-rw-r--r--  1 user user   601 Feb 10 11:48 LICENSE
-rw-r--r--  1 user user    29 Feb 10 11:48 MANIFEST.in
-rw-r--r--  1 user user   232 Feb 10 11:48 pyproject.toml
-rw-r--r--  1 user user 22240 Feb 10 11:48 README.md
-rw-r--r--  1 user user  1412 Feb 10 11:48 setup.py
drwxr-xr-x  2 user user 36864 Feb 10 11:48 templates/
drwxr-xr-x 37 user user  4096 Feb 10 11:48 tests/
-rw-r--r--  1 user user   243 Feb 10 11:48 tox.ini
-rw-r--r--  1 user user   101 Feb 10 11:48 .travis.yml
-rw-r--r--  1 user user   703 Feb 10 11:48 .yamllint


$git-ignore | grep ntc
ntc-templates/**
ntc-templates/CHANGELOG
ntc-templates/development_scripts.py
ntc-templates/lib
ntc-templates/LICENSE
ntc-templates/MANIFEST.in
ntc-templates/pyproject.toml
ntc-templates/README.md
ntc-templates/setup.py
ntc-templates/templates
ntc-templates/tests
ntc-templates/tox.ini


$
</code></pre>
<p>Thanks.</p>
","0","4898202","",""
"58693985","9167762","2019-11-04 13:01:09","1","539","<git><git-submodules><git-subrepo>","add modified git submodule which is not owned","<p>Is it possible to add a git submodule that you modified localy but of which you are not the owner and therefore can not push to remote. 
Currently my repo only adds a link to the original submodule, but without my modifcations to it. 
But i want the full content including my modifications to be pushed to my remote repo.</p>

<p>I did the following so far:</p>

<pre><code>cd my_repo
git submodule add git@mygithost:submodulue submodule
git submodule init &amp;&amp; git submodule update
cd submodule
&lt;changes, hacks&gt;
git commit -am 'modify submodule'
cd .. &amp;&amp; git status

&gt; On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

    modified:   submodule (untracked content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>
","0","9167762","",""
"46907716","5085260","2017-10-24 10:07:40","2","2217","<git><git-submodules><git-subtree><git-subrepo>","Creating multiple git sub repos inside parent git repository","<p>I want to create a parent git repo inside which there will be multiple git repos, but I do not want parent git repo to track all commits of sub repos. Commit history can be placed in individual sub repos. I just want that <strong>When I pull from parent repo, I want all sub repos to be pulled and when I push parent repo, all subrepos committed changes should be pushed to their respective repos in server. Also it should be able to push and pull individual git repos when we make some changes to any of subrepos and next time pull of parent repo should give the updated repos</strong>.</p>

<p>I am trying to use submodules/subtree but couldnot achieve it. I have heard of <strong>git subrepo</strong> but have not been able to find good tutorial on it</p>
","0","5085260","0","0"
"42793618","7000031","2017-03-14 18:18:00","5","2921","<git-svn><git-submodules><git-subtree><svn-externals><git-subrepo>","svn to git migration with nested svn:externals","<p>Migrating from svn with svn externals, to git. 
Each svn externals may have it's own svn:externals. There is no guide how to migrate svn with externals to git here that I found useful.
Each branch may have it's own branches tags trunk. 
What's the best way to migrate the whole repository?
I am looking at git svn clone of the main repository adding git submodules, of each one external cloned as well. But Since the externals are nested, I don't know what's the best solution.
Script used till now:</p>

<pre><code>https://github.com/eneroth/git-externals
https://github.com/eneroth/git-externals
</code></pre>
","4","7000031","0","0"
"61606259","2155605","2020-05-05 05:21:15","8","662","<git><git-subrepo>","Feature branching using git subrepos","<p>I have a project which is using git subrepo: <a href=""https://github.com/ingydotnet/git-subrepo"" rel=""noreferrer"">https://github.com/ingydotnet/git-subrepo</a> and I'm trying to figure out how to implement feature branching as a dev workflow.</p>

<p>Here is what I have so far:</p>

<ol>
<li>Create a branch in the monorepo</li>
<li>Make your changes in the monorepo</li>
<li>Make a pull request for your branch into master</li>
<li>After the pull request is merged into master, run <code>git subrepo push --all</code> to also push the commits to their respective repos</li>
</ol>

<p>Does this sound right? At no point have I had to use <code>git subrepo branch</code> or <code>git subrepo commit</code> so I feel like this workflow isn't actually the intended workflow for feature branching with git subrepos. If the workflow I've suggested is correct, what is the actual purpose of the subrepo branching and committing commands?</p>
","2","2155605","0","0"
"52447773","2030696","2018-09-21 16:26:14","5","964","<git><github><version-control><repository><git-subrepo>","Creating git submodule without a remote","<p>I want to have a <code>sub</code> repo inside my <code>main</code> repo which can push and pull from a completely different remote repo than my <code>main</code>. So I want a submodule. But I want to create the submodule locally, then push it to remote. It does not exist anywhere yet.</p>

<p>All the of the examples I have seen involve pulling a remote repo into a submodule, to the degree that this is how submodules are created to begin with </p>

<pre><code>git submodule add git@github.com:url_to/awesome_submodule.git path_to_awesome_submodule
</code></pre>

<p>Is there any way to create the submodule, make some commits, then push them to the remote repo in question? </p>
","0","2030696","0","0"
"70628381","1772066","2022-01-07 23:45:01","2","170","<git><git-submodules><git-subtree><git-detached-head><git-subrepo>","git submodule replacement that doesn't detach heads","<p><strong>My situation</strong>: I have a large number of computers that I use for various tasks.  I have a large number of libraries, each in its own git repo.</p>
<p><strong>My desire</strong>: I want to be able to modify one of the libraries on any computer, do a git commit/push; then go to another computer, do a <code>git pull</code>, and have all the libraries updated.  Then I modify one of these libraries, commit/push, and everything works when I get tot he next computer.</p>
<p><strong>My current attempt</strong>:  I have a top-level git project that incorporates all the other library repos as submodules.  This includes a .gitmodules file that specifies the working branch of each module by using</p>
<pre><code>git config -f .gitmodules submodule.modulename.branch develop
</code></pre>
<p>I have <a href=""https://stackoverflow.com/questions/18770545/why-is-my-git-submodule-head-detached-from-master""><code>update = merge</code></a> set for each module.
I have <code>submodule.recurse</code> set to true, so <code>git pull</code> at the top level does <em>something</em> to each module.</p>
<p><strong>How it is broken</strong>: Heads become detached.  I wrote a script that parses the <code>.gitmodules</code> file and does a <code>checkout</code> of the appropriate branch of each module. I then <code>commit</code> and <code>push</code> the top module.  Whenever I modify things and try to do a pull, e.g. on another machine, heads become detached.  If I don't notice that the head is detached before I start modifications, I have to carefully unscramble the wreckage before I can commit my changes.</p>
<p>There are literally 3.6k stack overflow questions about git detached heads over the past decade, and most seem to be from the submodule capability.  I haven't gone through all of them, but what I have tried isn't working.</p>
<p>I forget why I rejected <code>git-subtree</code>, but <code>git-subrepo</code> hasn't been touched in over a year and has 153 issues and 25 pull requests pending, so I think it's dead.</p>
<p>Does anyone have a working solution to this?</p>
<hr />
<h1>Accepted answer from @vonC looks good.</h1>
<p>I could probably streamline this a bit, but my readme for the top-level project now says:</p>
<h2>Recommended checkout:</h2>
<pre><code>git clone --recursive --jobs=8 *mysuperproject_clone_url*
cd *mysuperproject*
git config alias.pullall 'submodule foreach git pull'
git config alias.statusall 'submodule foreach git status'
git config alias.switchall \
    &quot;submodule foreach --recursive 'git switch \$(git config -f \${toplevel}/.gitmodules submodule.\${sm_path}.branch)'&quot;
git switchall
</code></pre>
<h3>Updating from repository</h3>
<pre><code>git pullall
</code></pre>
<h3>If heads become detached, fix with</h3>
<pre><code>git switchall
</code></pre>
<h3>To add a module</h3>
<p>Module named <code>newmodule</code> working on path <code>develop</code> in the following example.</p>
<pre><code>cd /path/to/mysuperproject
git submodule add git@github.com:myaccount/newmodule
git config -f .gitmodules submodule.newmodule.branch develop
git config -f .gitmodules submodule.newmodule.update merge
</code></pre>
<p>If the submodule is on the default <code>master</code> branch, you still have to config the branch.</p>
<p>If you switch a submodule to a different branch, then in the top level you must config again</p>
<pre><code>git config -f .gitmodules submodule.newmodule.branch newbranch
</code></pre>
<p>And push both the submodule and the top level project.</p>
<p>On a different working directory (such as on a different machine), you must</p>
<pre><code>cd /path/to/mysuperproject
git pull
git switchall
git pullall
</code></pre>
","4","1772066","0","0"
"38070585","1723578","2016-06-28 08:11:01","14","5453","<git><git-submodules><git-subtree><git-slave><git-subrepo>","git submodules , gitslave, git subtree or a simpler solution","<p>We have a git repository with N folders.</p>

<pre><code>Repo
|-Folder1
|-Folder2
|- ...
|-FolderN
</code></pre>

<p>With different collaborators we would like to share different folders. Each collaborator should have access only to his allowed subset of folders. What is the ""good"" way to achieve this using git?</p>

<hr>

<p>An answer was to use <code>git submodules</code>. But after I read this article: 
<a href=""https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/"" rel=""noreferrer"">https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/</a>
I understood that you need to have a good mastery of git (which is not the case of our collaborators) in order to not have problems when using <code>git submodules</code>.</p>

<p>I read about some possible alternatives like <code>gitslave</code>, and <code>git subtree</code>. <code>gitslave</code> seemed to be a good solution but still a complex solution in my opinion.</p>

<p>Here is my simple solution and I would like to know if it can have some very bad drawbacks : </p>

<p>-Having a simple repository for each Folder and a repository for Repo. Then add all the files in Folder1, ..., FolderN in the main Repo. </p>

<p>-globalpush script:</p>

<pre><code>function globalpush(){
REPOS=""$HOME/Repo/
       $HOME/Repo/Folder1
       $HOME/Repo/Folder2
       $HOME/Repo/Folder3
       # ...
       $HOME/Repo/FolderN""   

#do not show untracked files
git config status.showuntrackedfiles no

read -p ""Commit description: "" description

for repo in ${REPOS}
do
    # if the repo folder exists
    if [ -d $repo ]
    then
        # Go inside the repo
        cd $repo
        echo ""-----PUSHING REPO : ""$repo""-----""

        #add all modified all deleted TRACKED files
        git add -u .

        git commit --allow-empty -m ""$description""
        git push                
    else
        echo ""-----COULD NOT FIND : ""$repo""-----""
    fi
done

#show untracked files again
git config status.showuntrackedfiles normal
}
</code></pre>

<p>-globalpull script:            </p>

<pre><code>function globalpull(){
REPOS=""$HOME/Repo/
       $HOME/Repo/Folder1
       $HOME/Repo/Folder2
       $HOME/Repo/Folder3
       # ...
       $HOME/Repo/FolderN""           

for repo in ${REPOS}
do
    # if the repo folder exists
    if [ -d $repo ]
    then
        # Go inside the repo
        cd $repo
        # pull the modifs.
        echo ""-----PULLING REPO : ""$repo""-----""
        git pull                        
    else
        echo ""-----COULD NOT FIND : ""$repo""-----""
    fi
done
}
</code></pre>

<p>The advantages of this solution are:</p>

<p>1 - Simple solution that everyone can understand.</p>

<p>2 - Possibility to give the access rights for each Folder independently.</p>

<p>3 - For the main developers (who have access to Repo) the repository Repo is self-contained, and contains all the history (in case something goes wrong with the repositories of Folder1, ..., FolderN).</p>

<p>4 - when a main developer makes a commit with a given description, a commit with the same description will be created for all the Folders repositories, even those without a modification (--allow-empty), which of course isn't perfect but helps tracking versions that are submitted by main developers.</p>

<p>EDIT : </p>

<p>There seems to be a new command I was not aware of <code>git subrepo</code> ...</p>
","2","1723578","0","0"
"37271130","133747","2016-05-17 08:40:21","1","492","<version-control><git-subtree><git-subrepo>","Remove git subtree to add git subrepo","<p>I had a Git repo with the <code>model</code> (the <code>M</code> in <code>MVC</code>) of the project removed and deposited into a separate repo. Then I merged it back with <code>git-subtree</code>. So I have a </p>

<p><code>models</code> branch and what I think are remote tracking branches <code>remotes/models/master</code> <code>remotes/models/models</code>. </p>

<p>Now I just want to obliterate this subtree thing altogether, so I can move it back to a regular full repo. So I can start to use git-subtree. Now how do I remove any relics of the git-subtree?</p>

<p>I tried to delete local branches and remote branches. But I cannot remove remotes/models/master by <code>git push models --delete master</code>. It said:</p>

<pre><code>remote: error: refusing to delete the current branch:
refs/heads/master To https://XXX@bitbucket.org/XXX/XXXXXmodels.git 
! [remote rejected] master (deletion of the current branch prohibited)
</code></pre>

<p><strong>EDIT:</strong></p>

<p>I think I just want to remove a reference to that <code>model</code> repo. I can manually remove that remote project from Bitbucket later.</p>
","0","133747","",""
"71877540","5525496","2022-04-14 20:58:21","1","590","<git><git-for-windows><git-subrepo>","How to install git subrepo in Git for Windows running bash shell","<p>I know there are instructions to install <a href=""https://github.com/ingydotnet/git-subrepo"" rel=""nofollow noreferrer"">gitsubrepo</a> in Git for windows <a href=""https://github.com/ingydotnet/git-subrepo"" rel=""nofollow noreferrer"">here</a>.</p>
<p>I understand what I have to do, however, I do not know where to find the shell startup script. I have installed the Git Bash shell, and I am at a loss for where its shell startup script is located.</p>
<p>Does anyone know where the startup script is?</p>
","0","5525496","0","0"
"72004406","5525496","2022-04-25 18:53:48","1","482","<git><git-track><git-subrepo>","How to change git subrepo to track a differentt branch?","<p>I have a subrepo in an ext/[subrep] directory that I want to track a different branch.</p>
<p>I have followed the instructions for switching subrepo branches at <a href=""https://github.com/ingydotnet/git-subrepo/wiki/FAQ"" rel=""nofollow noreferrer"">https://github.com/ingydotnet/git-subrepo/wiki/FAQ</a> however, it does not seem to be working.</p>
<p>First, since the code in the subrepo and its parent are not production ready code, I want this subrepo to be on an independent branch.</p>
<p>For better reference tracking, I created a new branch, then  merged all of the existing work from the previously tracked branch into the new branch.</p>
<p>If I follow the instructions explicitly, that is without specifying the exact directory where the subrepo is located, I get a new directory instead simply changing the branch reference in the .gitrepo file.</p>
<p>After having merged my existing work with the new branch, if I then specify the remote URL, the branch I want to track, and the existing directory, the clone simply tells me that the subrepo is up-to-date without changing anything - even with the --force flag specified.</p>
<p>What I have had to do is to</p>
<ol>
<li>git subrepo clean ext/[subrepodir]</li>
<li>git rm -r -f ext/[subrepodir]</li>
<li>physically delete ext/[subrepodir] (cloning the subrepo here without first deleting the directory gives the directory not empty error even with the --force flag.</li>
<li>git commit</li>
<li>git subrepo clone [remoteURL] ext/[subrepodir] --force -b new_branch</li>
</ol>
<p>The result of the above is that the subrepo is properly tracking the new branch. However, from the FAQ it seems like I should not have to go through all of this just to switch the branch that the subrepo is tracking.</p>
<p>Is this a bug?</p>
","0","5525496","",""
"54172820","1987629","2019-01-13 20:18:00","1","212","<git><git-submodules><git-subtree><git-subrepo>","git submodules, subtrees or else","<p>Probably, i misunderstood how git works, I have my directory structure as follows:</p>

<pre><code>project (git-repo)
  project 1 (git-repo)
  project 2 (git-repo)
  common scripts (git-repo)
</code></pre>

<p>All these folders have their own repositories where the main <code>project</code> can have child repositories such as <code>project 1</code>, <code>project 2</code>, <code>child scripts</code>. They can be submodules or subtree. The problem, the <code>common scripts</code> contain some of the codes that is common and essential to build both <code>project 1</code> and <code>project 2</code>. What can be best strategy to maintain this so that each project can be independent as well as no need to keep common scripts in two places.</p>
","1","1987629","",""
"72717068","18336996","2022-06-22 14:08:09","0","116","<git><yocto><git-subrepo>","Using git subrepo of the master repo in BB recipes","<p>A BB recipe typically checkouts a (git) repo using the given hash.
This requires committing and pushing source code changes to a repository which is used by the BB recipe.</p>
<p>To prevent continuously committing and pushing, AND updating the hash in the BB recipe, I want to make the related git repo a sub repo of the application yocto repo.
This would allow using the BB recipe to use the local (edited) sources, though using the (current) git hash.
When functioning the subrepo can be commited when dev finished, and a new build will use this new hash, and the main repo is committed to store the state/hash of the sub-repo.</p>
<p>Also the relations between the repos is now part, maintained and stored by git.</p>
<p>I tried using next in a BB recipe but this clone does not contain the local changes in the subrepo:</p>
<p>SRC_URI = &quot;git://${TOPDIR}/../repos/lib-repo/;protocol=file&quot;</p>
<p>How to setup up a BB recipe [SRC_URI] and getting the git-hash (of the latest commit on current branch) [SRCREV]?</p>
","0","18336996","",""