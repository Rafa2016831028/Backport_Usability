Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"58997449","3164100","2019-11-22 15:39:34","3","469","<git><git-rebase><cherry-pick><git-cherry-pick>","Can you cherry-pick a hunk or hunks from within a git commit?","<p>When I do stage commits in my workspace I usually use the <code>-p</code> option to go through each hunk of the changes. I find this useful to confirm my changes and as a check on typos and other silly errors. </p>

<p>I usually <code>rebase</code> in my open source development work when a dev branch gets stale. However, sometimes I want to test out something on a throw away branch in my workspace and I don't want the entire branch because it is long and contains many commits that are not yet merged. I could <code>git cherry-pick</code> but that appears to grab the <strong><em>entire</em></strong> commit. Sometimes these commits are large and I don't want the entire thing. </p>

<p>Is there any way to grab the commit via <code>cherry-pick</code> but inspect the commit hunk by hunk as it is applied to a staging area before committing? </p>

<p>Presumably the user then stages only the components of the commit that they want. </p>
","0","3164100","",""
"57524184","15441","2019-08-16 11:52:49","1","742","<git><branch><cherry-pick><git-cherry-pick><branching-strategy>","Will git log --cherry-pick --right-only --no-merges ignore all commits correctly cherry-picked between branches?","<p>I work in a large software team doing large monthly releases. We work on a branch to release model (see diagram). 
<a href=""https://i.stack.imgur.com/7cImT.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7cImT.jpg"" alt=""enter image description here""></a></p>

<p>This model solves a lot of problems, but has some risks to manage. When I go to release branch 1.1 to production, I need to check that all the commits in 1.0 are in 1.1. </p>

<p>I can do this with the following command:</p>

<pre><code>git log --cherry-pick --right-only --pretty=""%h %ce %B"" --no-merges release/1.1/master...release/1.0/master &gt; missingcommits.log
</code></pre>

<p>Then I go an email this list to each of the developers concerned, and ask them to just do a careful second check. </p>

<p>This works fairly well, but I'm concerned about it picking up some false positives. </p>

<p>Now of course if you have checked in the same code in two different branches with two different commits, then this will fall afoul of this scan. </p>

<p>In theory, if you have cherry-picked your commit from 1.0 to 1.1 - then it should not show up in this scan (ie the same commit is in both branches). </p>

<p>Now my code works fine. Ie code in one branch, I cherry pick across, and then it doesn't show up in this scan. So I think it should work. </p>

<p>When I send the email out to the developer with just their 'missing commits in the new release branch', what I get is some of the developers coming back to me and saying:</p>

<blockquote>
  <p>No I definitely did a cherry pick to move my code over. </p>
</blockquote>

<p>Now this could be </p>

<p>(a) defensive behaviour, or </p>

<p>(b) a cherry-pick gone wrong, </p>

<p>(c) my misunderstanding of git, or </p>

<p>(d) a genuine problem with this process. </p>

<p>My question is: <strong>Will git log --cherry-pick --right-only --no-merges ignore all commits correctly cherry-picked between branches?</strong></p>
","0","15441","",""
"57525136","11733507","2019-08-16 13:00:29","-1","59","<git><cherry-pick>","How to create a pull request for a particular commit","<p>I am trying to create a pull request for a particular commit. I have already executed the following commands</p>

<pre><code>git push upstream issue-430 
</code></pre>

<p>There is a particular commit that I want to create a pull request. 
I tried to create another branch from issue-430 and cherry pick the particular commit but it is giving the error </p>

<pre><code>error: your local changes would be overwritten by cherry-pick.
hint: commit your changes or stash them to proceed.
fatal: cherry-pick failed
</code></pre>

<p>But I already committed all my local changes.</p>
","4","11733507","",""
"57550773","6767717","2019-08-19 05:09:19","7","1527","<git><github><cherry-pick>","Why does cherry-picking make the repo unstable?","<p>I'm not a developer.
On one of our projects, since a lot of tickets take time to complete, we have been cherry-picking our commits, and now we have to do it very often.
I was told by a developer that cherry-picking should be avoided as it makes the repo unstable. 
What does that mean, how does it make the repo unstable?
<strong>In other words,</strong> what are the negative consequences of cherry-picking?</p>
","2","6767717","0","0"
"449541","1146","2009-01-16 04:55:08","1767","1059184","<git><git-merge><git-cherry-pick><git-patch>","How can I selectively merge or pick changes from another branch in Git?","<p>I'm using Git on a new project that has two parallel -- but currently experimental -- development branches:</p>
<ul>
<li><code>master</code>: import of existing codebase plus a few modifications that I'm generally sure of</li>
<li><code>exp1</code>: experimental branch #1</li>
<li><code>exp2</code>: experimental branch #2</li>
</ul>
<p><code>exp1</code> and <code>exp2</code> represent two very different architectural approaches. Until I get further along I have no way of knowing which one (if either) will work. As I make progress in one branch I sometimes have edits that would be useful in the other branch and would like to merge just those.</p>
<p><strong>What is the best way to merge selective changes from one development branch to another while leaving behind everything else?</strong></p>
<p>Approaches I've considered:</p>
<ol>
<li><p><code>git merge --no-commit</code> followed by manual unstaging of a large number of edits that I don't want to make common between the branches.</p>
</li>
<li><p>Manual copying of common files into a temporary directory followed by <code>git checkout</code> to move to the other branch and then more manual copying out of the temporary directory into the working tree.</p>
</li>
<li><p>A variation on the above. Abandon the <code>exp</code> branches for now and use two additional local repositories for experimentation.  This makes the manual copying of files much more straightforward.</p>
</li>
</ol>
<p>All three of these approaches seem tedious and error-prone.  I'm hoping there is a better approach; something akin to a filter path parameter that would make <code>git-merge</code> more selective.</p>
","4","1146","0","0"
"38864884","4340261","2016-08-10 05:25:19","22","11109","<git><cherry-pick><git-cherry-pick>","Why does this cherry-pick have a conflict?","<p>I know <code>git cherry-pick</code> is a command that use to apply the changes of specified commit, but I think I just don't really understand the way it works.</p>

<p>Let's say a repo act like that:</p>

<pre><code>git init

echo a&gt;a
git add .; git commit -am 'master add line a'

git checkout -b dev
echo b&gt;&gt;a
git commit -am 'dev add line b'
echo c&gt;&gt;a
git commit -am 'dev add line c'

git checkout master

git cherry-pick dev
</code></pre>

<p>I thought <code>cherry-pick</code> command would work well and change file <code>a</code> into:</p>

<pre><code>a

c
</code></pre>

<p>but in fact I got the following message:</p>

<pre><code>error: could not apply 08e8d3e... dev add line c
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>And then I run:</p>

<pre><code>git diff
</code></pre>

<p>output:</p>

<pre><code>diff --cc a
index 7898192,de98044..0000000
--- a/a
+++ b/a
@@@ -1,1 -1,3 +1,6 @@@
  a
++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
++=======
+ b
+ c
++&gt;&gt;&gt;&gt;&gt;&gt;&gt; 11fff29... abc
</code></pre>

<p>So my question is: <strong>Why is there a conflict like git-diff shows? What are the details of cherry-pick working in this case？</strong></p>
","10","4340261","0","0"
"57802639","6607497","2019-09-05 09:41:12","3","94","<git><cherry-pick>","Trying to cherry-pick from a feature branch: No ""cherries""?","<p>(It's the first time I'm trying to use git's cherry picking, so maybe I misunderstood what it is or what it can do)</p>

<p>While working on some new feature in a feature branch (for simplicity let's call it just <code>next</code>), I discovered some bugs in the current <code>master</code> that I fixed ""on the fly"" (which may not have been the best idea). Now that I think the feature branch is complete, I'd like to cherry pick some or all of the bugs fixed in <code>next</code> to <code>master</code> to make a bug-fix release before a feature release.</p>

<p>So I checked out <code>master</code> and tried (after reading the git-cherry manual page):</p>

<pre><code>git cherry
git cherry next
git cherry -v next
git cherry -v next master
</code></pre>

<p>However none of the commands did output anything, even though there is a huge difference between <code>next</code> and <code>master</code>.</p>

<p>So what is the problem? Did I do something wrong, or did I misunderstand about cherry picking? The manual refers to some ""origin"" branch, while my branch is local.</p>

<p>If the cherry picking is the wrong tool, what would be the correct procedure to achieve what I'm trying to do?</p>
","3","6607497","",""
"19830464","2007533","2013-11-07 07:46:18","70","165095","<git><cherry-pick><git-cherry-pick>","Git Cherry-Pick and Conflicts","<p>There are two different git branches. In one the development is going in (Branch1).</p>

<p>In other branch some PoC work is going on (Branch2). Now, I want to cherry-pick the changes from Branch1 to Branch2, so that Branch2 is up to date.</p>

<p>Now, after cherry-picking 4 or 5 changes, I am getting some merge conflict and I am unable to proceed with further cherry-picks.</p>

<p>Do, I need to resolve all the conflicts before proceeding to next cherry -pick or Can I somehow postpone the conflict resolution till I cherry-pick all the changes (and resolve all conflicts together)?</p>

<p>Further, is it suggested to do cherry-pick or branch merge in this case?</p>
","1","2007533","0","0"
"57974777","12077919","2019-09-17 12:59:30","0","1063","<git><branch><git-merge><git-rebase><git-cherry-pick>","GIT merge just a range of commits","<p>I want to take over changes from a range of commits. </p>

<p>The situation is the following. I have the master and my feature branch. I fixed a bug  (with commits a to e) and bring this fix to the master. But there exists a release branch which should also become this bug fix. This release branch branched from the master several months ago and only gets new content for major bugs. </p>

<p>Usually, I take over the changes by hand into the release branch.<br>
Is there a technique to get merge the changes from the feature branch with the bug fix into the release branch without m1?</p>

<p>From my point of view, a merge will not be possible because of the commits between the commit r1 and m1. But has anybody an idea how to handle this situation?</p>

<p><a href=""https://i.stack.imgur.com/LIBxG.png"" rel=""nofollow noreferrer"">Branch Diagramm</a></p>
","1","12077919","",""
"39272748","1827295","2016-09-01 13:23:44","2","3920","<git><visual-studio><cherry-pick>","CherryPick: Mainline branch is not specified but b0c4de0c8e164d09efe73a24aec3f9096c860e1f is a merge commit","<p>I am in Visual Studio 2015 ""Team Explorer"" on my <code>master</code> branch and I am trying to get some bugfixes I accidentally did on the <code>development</code> branch back into the master branch. Someone told me I should cherry-pick them.</p>

<p>So I made sure there are no uncommitted changes, and both branches are up-to-date with the server (push &amp; pull &amp; fetch). I went into ""Branches"", where <code>master</code> is marked bold (= the current branch) and right clicked on <code>development</code> -> Cherry-Pick. The error I get is</p>

<blockquote>
  <p>An error has occurred. Detailed message: Mainline branch is not specified but b0c4de0c8e164d09efe73a24aec3f9096c860e1f is a merge commit</p>
</blockquote>

<p>I also tried to select Cherry-Pick on the remote branch (remotes/origin -> development), but this yields nearly the same error message:</p>

<blockquote>
  <p>An error has occurred. Detailed message: Mainline branch is not specified but d3e131d52e5af8aa0ff9bbd2e394da5232a66920 is a merge commit</p>
</blockquote>

<p>What am I missing here?</p>
","1","1827295","",""
"58203992","18149","2019-10-02 14:50:36","0","159","<git><git-rebase><git-remote><git-cherry-pick><git-mv>","Should I git mv or just mv the files I'm cherry-picking / rebasing from another directory?","<p>I have some <code>csv</code> files that I modify on a regular basis, they don't really contain any sensitive information, they are just used as imports into a program, and I modify them as requested.</p>

<p>Lately I've found what may be a more efficient way to process the changes, but I tested it on a temporary git repository outside of the project.  </p>

<p>Since this was successful I now want to <code>git cherry-pick</code> the <a href=""https://stackoverflow.com/questions/1994463/how-to-cherry-pick-a-range-of-commits-and-merge-into-another-branch"">range of changes</a> to it, so first I added the temporary git repo as a remote to my project.</p>

<pre><code># In my project I added a remote of the test repo with 
# a copy of the csv's in the HEAD of my main project.
git remote add tempchanges &lt;path-to-test-repo&gt;

# Created a new branch in my project to test this out in.
git checkout -b new/9_30_2019

# Cherry-picked the changes from the remote test repo, but they ended up in the root of the project.
git cherry-pick &lt;start-commit-in-test-repo&gt;..&lt;head-commit-in-test-repo&gt;

# Started a rebase
git rebase -i &lt;start-commit-in-test-repo&gt;~1

# (`edit`ed each commit in the rebase)
</code></pre>

<p><em>(In hindsight, I think this was a mistake, I should have just cut another branch in my existing project, but I digress)</em></p>

<p>The temporary repository only has a master branch, and everything has been done in the root of the project across a range of commits.</p>

<p>When I <code>cherry-pick</code> the changes into my project, and into the local branch, the <code>csv</code> files all end up in the root directory of my project but they belong in the <code>src/csv</code> file of my project instead, so I've decided to do an interactive <code>rebase</code> from the start of the range of commits (minus 1 commit) and edit each so that the changes show up in my project's repository in the <code>src/csv</code> directory instead of in the root.</p>

<p>But my question is, if I want to do this, should I use <code>git mv</code> to move the files or just a standard bash <code>mv</code> command and then reapply each of the changes with the rebase with the corresponding commit message added to the temp project.  </p>

<p>So far I've tried the <code>git mv -f</code> to move the files on the first commit and the changes weren't even mentioned when I went to commit them before running <code>git rebase --continue</code>.</p>

<p>Is there anything else I should be doing to make this process go smoother, and I'm assuming I should be using <code>mv</code> instead of <code>git mv -f</code> as the changes appear to show up that way prior to the commit.</p>

<p>I'd also like to preserve the commit messages without having to copy them from the logs in the old repo.</p>
","0","18149","",""
"39464276","1776255","2016-09-13 07:20:01","0","1202","<git><github><cherry-pick>","GIT cherry-pick giving error","<p>I am trying to cherry-pick one of the commit using the sha to my branch but its giving error.</p>

<p>Say I am on branch <code>x</code>, then I am running the command <code>git cherry-pick as560aad0138....</code> in my terminal.</p>

<p>The error I got is like this;</p>

<pre><code>error: Commit as560aad0138.... is a merge but no -m option was given.
fatal: cherry-pick failed
</code></pre>
","2","1776255","0","0"
"1391732","167646","2009-09-08 02:49:06","10","11913","<git><push><git-checkout><cherry-pick>","git says everything-up-to-date when pushing changes to a remote branch","<p>i have commits that are in a remote repository (origin/master) which i want to put in a branch created from that repository (origin/remote_branch).</p>

<p>when i checkout to that remote branch</p>

<pre><code>git checkout -b mybranch origin/remote_branch
</code></pre>

<p>then cherry-picked the commits that i made</p>

<pre><code>git cherry-pick 9df63616b0428cf6edc4261adb533a1ac516b9a0
</code></pre>

<p>git says everything-up-to-date when i try to push.</p>

<pre><code>git push
</code></pre>

<p>is there anything i'm doing wrong?</p>
","0","167646","0","0"
"58335319","5371153","2019-10-11 06:22:02","-1","45","<git><cherry-pick>","Is cherry-pick works from Master to Branch (Master commit --> Branch)?","<p>I know cherry works from Branch to Master(Branch commit -->  Master).  But, Is cherry-pick works from Master to Branch (Master commit -->  Branch)?</p>
","2","5371153","",""
"39620717","5353461","2016-09-21 15:26:41","8","1080","<git><git-rebase><git-revert><git-cherry-pick>","What is the .git/sequencer directory?","<p>I found a directory named <code>.git/sequencer</code></p>

<p>Here is its contents:</p>

<pre><code>$ ls
head  todo
$ cat head
d7d462cf3c0896aa09b3dec020cb21d4c4407d91
$ cat todo 
pick d7d462c Initailise repository
pick b88c8bb bash_funcs: add quote_args()
</code></pre>

<p>These <code>pick</code> lines make it look like it's the remnants of a <code>rebase</code> or <code>cherry-pick</code>, however:</p>

<pre><code>$ git rebase --abort
No rebase in progress?
</code></pre>

<p>Can I safely remove this directory?</p>
","1","5353461","0","0"
"20765030","2926641","2013-12-24 18:01:52","24","31435","<git><git-rebase><git-cherry-pick>","git remove a commit from pull request","<p>I'm newbie to open source contribution, so it one of my first tries.</p>

<p>I developed a library (gem) called <code>validates</code>: <a href=""https://github.com/kaize/validates/"">https://github.com/kaize/validates/</a></p>

<p>I made 2 branches through <code>git checkout -b branch_name</code>:</p>

<p>https://github.com/kaize/validates/pull/20 &amp; https://github.com/kaize/validates/pull/19, and make commits for them, but, you can see that ip-validator pull request have a commit <code>Blank validator</code> <code>399cdd7</code>.</p>

<p>What I need to do to remove it from this pull request (and still place in blank validator branch)?</p>

<p>Please help me with make world better, guys!</p>
","4","2926641","0","0"
"39855961","1364650","2016-10-04 15:14:12","6","1992","<git><merge-conflict-resolution><git-cherry-pick><git-merge-conflict>","During git cherry-pick, undo changes to a single file, reverting to my version","<p>I'm doing a <code>cherry-pick</code> for a large commit with multiple files. There are some conflicts, but for some of the conflicting files I'm sure that I don't need any of the changes. I'd just like to revert all changes applied to these files in that commit - a bit like 'resolve using mine' in svn, or <code>git checkout &lt;filename&gt;</code> to undo changes applied to a file (which doesn't seem to work here). </p>

<p>Is there a command to do this, without manually having to go through the diffs in these files?</p>

<p>FFR, feel free to also include the operation to resolve using <em>theirs</em>.</p>
","4","1364650","",""
"58718785","3251122","2019-11-05 20:14:59","2","5079","<git><git-merge><git-cherry-pick>","Git merge not applying all commits from branch","<p>I've been having allot of troubles with git merge lately. I'm finding that if it's a small branch with few changes then everything works as expected, but whenever I merge a branch that has touched allot of files and commits span days/ weeks I'm finding that when running 'git merge branch' all of the commits are not being applied so i have to go back through and determine what commits weren't applied and cherry-pick them. This seems wrong but I'm not quite sure what is going wrong with my work flow that makes me have to do this.</p>
<p>How do I make sure that all of my changes from a specified branch are &quot;applied&quot; when merging?</p>
<p>Any help would be appreciated!</p>
<p>Edit -</p>
<p>For those wondering git rebase was essentially what I was looking for. It wasn't that my changes were being overwritten or really anything that others were stating, my branch being so far behind master along with possibly my use of rebase -interactive to squash commits I think git was in a sense loosing reference to what had changed. Git rebase on my branch, checking out master then merging my branch to master fixed my problem of all changes not making it through a merge.</p>
<p>Update December 2020 -</p>
<p>I've updated my merge process to exclusively using the online github gui and creating pull requests, this has completely solved all merge issues I used to have.</p>
","6","3251122","0","0"
"20872829","3056233","2014-01-01 20:18:59","69","20147","<git><git-branch><sha><git-cherry-pick>","How to cherry-pick the last sha from another branch in Git with 1 command?","<p>I find myself doing this a lot when cherry-picking a commit from another branch.</p>

<pre><code>$ git log -1 another_branch
commit &lt;commit_sha&gt;
// copy &lt;commit_sha&gt;
$ git cherry-pick &lt;commit_sha&gt;
</code></pre>

<p>Can I do all of this in one command, if so, what is it?</p>
","0","3056233","0","0"
"58896370","990598","2019-11-17 00:04:00","0","114","<merge><git-merge><cherry-pick><git-cherry-pick>","Cherry-pick commit with its merge commit without solving conflict","<p>Here is my case:</p>

<p>├── (c0) ── (c1) ── (c2-merge-commit) ── (b0)── (b1-merge-commit)</p>

<p>I wanted to combine c0, c1 and c2 into one commit and have this: </p>

<p>├── (squashed : c0, c1, c2-merge-commit) ── (b0)── (b1-merge-commit)</p>

<p>So i carried my HEAD to c2, then back to c0 and squash merge to c2 (HEAD@{1})</p>

<pre><code>git merge --squash HEAD@{1}
</code></pre>

<p>This part went quite well and i had :</p>

<p>├── (squashed : c0, c1, c2) </p>

<p>Now i need to add 2 commits (b0) and (b1-merge-commit). I used cherry-pick, but in that case i need to resolve conflict for b0. But i dont want to resolve conflict again as i actually did it with (b1-merge-commit). </p>

<p>As a solution; I first squashed b0 and b1 into new commit; and then cherry-pick this one over (squashed : c0, c1, c2). But obviously this solution won't scale if i would do squashing +10 commits past with so many merge commits flying around.</p>

<p><strong>TLDR :</strong>
I wanna carry two commits on top of my branch; one of them is actual change(b0) with conflicts and other one is merge commit where conflicts are actually resolved. When i cherry-pick one by one, git asks me to handle conflicts of b0 where conflict actually resolved with merge commit on b1. I could only manage to do it with squashing b0 and b1 into one new commit, and cherry-pick it on my branch.</p>
","0","990598","",""
"74607261","2505567","2022-11-28 22:43:47","0","27","<gitlab><cherry-pick>","Undo or revert a single, earlier GitLab cherry-pick commit?","<p>I committed like 10 individual cherry-picked changes to my new release branch, and now after regression testing found that one of those commits in the middle may have broken something. I am prepared to release a new version of the code but exclude that commit. Must I start over cherry-picking into the new release branch to do this right, or is there a way I can simply copy my current branch into a new release branch and revert or undo the single offending commit without losing those that came before or after it?</p>
","0","2505567","",""
"57316337","6086575","2019-08-01 20:10:08","0","1361","<git><git-commit><git-cherry-pick><git-history><git-history-rewrite>","How to delete a commit with a password from BitBucket git repository history?","<p>I have accidentally committed a password to a BitBucket git repository some time ago, several commits behind the current master. While I removed the password later by committing without it, it still exists in several past commits.</p>

<p>I don't mind losing the history of changes during those commits. I'm also not worried about somebody having seen the password during the time it was committed, but I want to delete this history to avoid problems in the future.</p>

<p>What steps to take to ensure that, after those steps, nobody who gets access to this BitBucket repository in the future can find this password?</p>

<p>Lets say I have the commits (from oldest to newest) with the (fake) SHA1s:
c001
c002
c003
c004</p>

<p>c002 and c003 are hashes of ""bad"" commits that I want to delete entirely. I want master to stay on c004, but for c002 and c003 to no longer be accessible for anybody if I give them access to this repo.
I tried following the instructions of similar questions on SO that offer to reset or rebase, but could not get them to work; I either manage to delete the commits on my machine but then cannot push back to BitBucket, or fail to delete on my machine altogether after messing something up.</p>

<p>Can somebody please explain the steps needed to:
1. eliminate c002 and c003 from the repository's history
2. make sure it's saved on BitBucket, and that people cannot view those commits neither in BitBucket's GUI, or by cloning the repo to their machine</p>

<p>I would appreciate an answer that explains what the commands do, and not just write some magic git commands that either work or don't work for me.
Also, this question is specifically about BitBucket in case some things might be specific for it... I had trouble with ""Updates were rejected because the tip of your current branch is behind"" when trying to push changes back to BitBucket after making local repo changes with reset --hard. After several failed attempts and frustration with git's docs I decided to ask SO.</p>

<p>.</p>
","0","6086575","",""
"40344475","99834","2016-10-31 14:41:19","2","2301","<git><gerrit><cherry-pick>","How to always cherry pick the latest version of a review from gerrit?","<p>Is there a scriptable way to cherry pick the latest version of a gerrit patch review?</p>

<p>On Gerrit interface you can easile copy the code for a cherry pick but this code specifies a specific version and I am interested about some bash code that would pick the latest version instead of a specific one.</p>

<pre><code>git fetch https://review.gerrithub.io/org-name/project-name refs/changes/02/12345/5 &amp;&amp; git cherry-pick FETCH_HEAD
</code></pre>

<p>As you can see this will pick version 5.</p>

<h3>Update</h3>

<pre><code>git review -s
git review -x 123456
</code></pre>

<p>I tried the review -x approach locally and it worked but running the some from Jenkins failed:</p>

<pre><code>Could not connect to gerrit.
Enter your gerrit username: &lt;traceback object at 0x285ecf8&gt;
We don't know where your gerrit is. Please manually create a remote
named ""gerrit"" and try again.
</code></pre>
","0","99834","",""
"40677476","4237316","2016-11-18 12:43:58","24","9435","<git><git-cherry-pick>","git cherry-pick --continue, '--no-edit' option?","<p>I'm writing a script for migrating git repos. On cherry-pick conflicts I run</p>

<pre><code>git add .
git cherry-pick --continue
</code></pre>

<p>This brings up vim, prompting me to save the commit message and freezes the script. I am looking for a command-line option like <code>--no-edit</code> or <code>--porcelain</code> to get around this.</p>

<p>Ugly terminal hacks might be welcomed as well ;)</p>
","3","4237316","0","0"
"21684686","1157237","2014-02-10 18:04:38","7","785","<git><git-cherry-pick>","Cherry pick only commits that touch a particular file","<p>What is a concise way to request ""cherry pick from another branch only the commits that touch a particular file""?  i.e. the command <code>git log ..other-branch afile</code> gives a list of unmerged commits in other-branch that touch ""afile""; how can I request that this same set of commits be replayed on the current branch?</p>
","5","1157237","0","0"
"40943232","4237316","2016-12-03 01:12:13","1","362","<git><git-cherry-pick>","Git cherry-pick conflict creating tilde file","<p>I'm trying to create a bot for migrating a git repository from one form to another.</p>

<p>In this process I run <code>git cherry-pick $commit_hash -X theirs --no-edit --keep-redundant-commits</code> to cherry-pick changes from a staging branch to my master branch.</p>

<p>Both the HEAD of master and the cherry-picked commit are adding the same file but with different content. I would like the cherry-picked commit to overwrite, hence <code>-X theirs</code>.</p>

<p>However, I am getting a conflict, with git adding a second file called <code>path/to/first_file~[commit hash]...[truncated commit message]</code>. How can I get around this?</p>
","0","4237316","",""
"59829972","2951136","2020-01-20 19:48:08","0","1327","<git><version-control><cherry-pick>","How to cherry-pick a gerrit with all dependencies?","<p>Let's say there is are a few gerrits with dependencies :</p>

<pre><code>A &lt;- B &lt;- C
</code></pre>

<p>(C depends on B and B depends on A)</p>

<p>If I simply cherry-pick C, it will not work because the dependencies (A and B) will not be cherry-picked.</p>

<p>How can I <strong>easily</strong> cherry-pick C such that in my local tree, all its dependencies will be applied automatically in <strong>one command</strong> ?</p>
","2","2951136","",""
"41095143","7283226","2016-12-12 06:18:02","-2","1256","<android><git><github><cyanogenmod><cherry-pick>","Can't cherry pick (error)","<p>I'm trying to cherry-pick a commit from <em>CyanogenMod Github</em> and having issue, here's more info:</p>

<ul>
<li><p>Commit to cherry-pick: <a href=""https://github.com/CyanogenMod/android_device_lge_bullhead/commit/4c98c8df392dfb305d7ffe5deaf9a2bdf7824037"" rel=""nofollow noreferrer"">https://github.com/CyanogenMod/android_device_lge_bullhead/commit/4c98c8df392dfb305d7ffe5deaf9a2bdf7824037</a></p></li>
<li><p>Error occurring:<pre>
error: commit 4c98c8df392dfb305d7ffe5deaf9a2bdf7824037 is a merge but no -m option was given.
fatal: cherry-pick failed
</pre>
Please help me, my repo is based off CM, has a different branch and is modified for a different ROM.</p></li>
</ul>
","0","7283226","",""
"60100460","12076706","2020-02-06 17:24:49","0","1057","<git><splunk><git-cherry-pick>","Merge my required files from DEV branch to QA in Azure VSTS","<p>This is regarding Splunk Phantom playbook code deployment. </p>

<p>Whenever we create a new playbook, in the repository it creates two files for each playbook (.json, .py). We have 3 different branches associated with one Repository (DEV, QA, PROD).</p>

<p>In our DEV branch, development work would continue and it has around 300 files(JSON and Python files, that means 150 playbooks in Phantom dev GUI).</p>

<p>Now, I don't want to merge all these files to my QA, I just need a few files those undergone changes in DEV needs to push to QA (cause out of 300 files in DEV, we have around 160 files in QA with same code).</p>

<p>When any changes would happen to DEV files, I have to pick those specific files and raise the pull request then merge (that means only those files with changes in DEV should move to QA {kinda Cherry-picking}).</p>

<p>I have followed below process, but I'm getting merge conflicts.</p>

<p>Process:</p>

<ol>
<li><p>Create a new branch</p>

<pre><code>git checkout -b branch_name
</code></pre></li>
<li><p>Remove all files for this branch</p>

<pre><code>git rm -rf .
</code></pre></li>
<li><p>Commit changes</p>

<pre><code>git commit -m ""create new branch"" 
</code></pre></li>
<li><p>Retrieve some files from master branch</p>

<pre><code>git checkout master -- file1 file2 file3 file4    
</code></pre></li>
<li><p>Commit changes</p>

<pre><code>git commit -m ""create new branch"" 
</code></pre></li>
</ol>

<p>After doing this process, I navigate to my VSTS UI, and apply cherry-pick on ""commit"" which I have done at 4th, 5th steps (I am able to successfully create commit with my required files and at the time of performing cherry-pick, I'm running into issues).</p>

<p>Below is a screenshot when I tried to do the cherry-pick - error message looks like this:</p>

<pre><code>There were conflicts when cherry-picking commit 60625f. This operation needs to be done locally
</code></pre>

<p><img src=""https://i.stack.imgur.com/e51LP.png"" alt=""""></p>
","4","12076706","",""
"41219009","6049006","2016-12-19 09:03:00","1","401","<git><git-svn><cherry-pick><git-cherry-pick>","GIT Cherry-picking one commit X times","<p>I'm facing a strange behaviour with some commits on my SVN migrated GIT repository: 
I tried to cherry-pick onto a release branch a commit from the master that had been previously already merged onto the release branch with SVN. 
GIT did not detect it and added the code a second time in the source file modified. 
I was then able to cherry-pick it again and again and again and each time GIT added the commit code again !</p>

<p>In SVN, the merge property of the revision from master to the release branch is well saved.</p>

<p>This behaviour happens on only a few commit upon our 22K commits</p>

<p>Is there a direction onto which I should investigate to determine where this problem comes from ?</p>
","9","6049006","",""
"22292204","3400265","2014-03-10 04:41:38","1","6734","<git><git-push><git-cherry-pick>","git push error: not Signed-off-by author/committer/uploader in commit message footer","<p>I am working on an issue on my local repository, and I found that this bug was fixed in the kernel.org repository.</p>
<p>So now I am trying to pull this fix from the kernel.org branch and <code>cherry-pick</code> it to my local gerrit. And I am trying to maintain the commit message of the commit from the kernel.org branch.</p>
<p>When I try to push this fix on my local gerrit, I face the following error:</p>
<pre><code>To ssh://&lt;username&gt;@123.321.12.1:1234/mirror-sec/asdfgt/hjks
 ! [remote rejected] &lt;branch&gt; -&gt; refs/for/&lt;branch&gt; (not Signed-off-by author/committer/uploader in commit message footer)
error: failed to push some refs to 'ssh://&lt;username&gt;@123.321.12.1:1234/mirror-sec/asdfgt/hjks'
</code></pre>
<p>Following are the steps that I followed:</p>
<ol>
<li>Runned <code>git remote add 'tag' git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux</code></li>
<li>Runned <code>git fetch 'tag'</code></li>
<li>Searched for the commit in <code>git log 'tag'/master</code></li>
<li>cherry-picked the specific commit-id needed: <code>git cherry-pick &lt;commit-id&gt;</code></li>
<li>Runned <code>git commit --amend</code>, to get a new change-id for the cherry-picked commit-id</li>
<li>Funned <code>git push</code> to submit the change to the local gerrit: <code>git push ssh://&lt;username&gt;@123.321.12.1:1234/mirror-sec/asdfgt/hjks &lt;branch&gt;:refs/for/&lt;branch&gt;</code></li>
</ol>
<p>When I followed the above steps, I face the error mentioned above.</p>
<p>Is there anything that I am doing wrong? Any information that I am overlooking would help a lot.</p>
<p>Thanks.</p>
","0","3400265","0","0"
"41379874","1498827","2016-12-29 12:36:31","0","253","<git><git-filter-branch><cherry-pick><git-rm>","Remove specific file from specifc commit when 'git filter-branch' fails","<p>I can't commit in my working directory anymore because there are some huge files in the repo that weren't included in gitignore, so they have been carried over and over in many commits/revisions. </p>

<p>I've followed the instructions at :
<a href=""http://naleid.com/blog/2012/01/17/finding-and-purging-big-files-from-git-history"" rel=""nofollow noreferrer"">http://naleid.com/blog/2012/01/17/finding-and-purging-big-files-from-git-history</a>
but the <code>git filter-branch</code> part fails with </p>

<blockquote>
  <p>Cannot rewrite branches: You have unstaged changes. Additionally, your
  index contains uncommitted changes.</p>
</blockquote>

<p>Under these circumstances, how can I identify e.g. the largest file inside all commits, present or past, and then from a <strong>specific commit remove just the specific file</strong>?</p>
","0","1498827","",""
"3881486","178274","2010-10-07 12:13:36","18","9605","<git><cherry-pick><git-checkout>","Git: move changes between branches without working directory change","<p>Use-case: every time I want to move commit from one git branch to another I perform the following sequence of actions:</p>

<ol>
<li>[commit into working branch]</li>
<li><code>git checkout</code> <em>branch-to-merge-into</em></li>
<li><code>git cherry-pick</code> <em>target-commit</em></li>
<li><code>git push</code></li>
<li><code>git checkout</code> <em>working-branch</em></li>
</ol>

<p>That works fine with the only exception - every time I perform 'git checkout' git working directory content is changed (expected) and that causes my IDE (IntelliJ IDEA) to perform inner state update (because monitored file system sub-tree is modified externally). That really annoys especially in case of big number of small commits.</p>

<p>I see two ways to go:</p>

<ol>
<li>perform 'mass cherry picks', i.e. perform big number of commits; move them to another branch, say, at working day end;</li>
<li>have a second local git repository and perform cherry picks on it, i.e. every time actual commit and push is performed to the working branch, go to that second repository, pull the changes and perform cherry pick there;</li>
</ol>

<p>I don't like the first approach because its possible to forget to move particular commit. The second one looks a bit... unnatural.</p>

<p>Basically, it would be perfect if I could say git 'move this commit from branch with name branchX to the branch branchX+1' without working directory update.</p>

<p>Question: is it possible to perform the above?</p>
","7","178274","0","0"
"41532242","7390408","2017-01-08 11:35:07","6","4266","<git><cherry-pick>","git: unable to cherry pick","<p>I am caught up in a weird loop while trying to cherry pick. Here is what I do, and where the problem is.</p>

<p>I have two branches: <strong>mainline</strong>, and <strong>temp</strong>. I want to cherry-pick a specific commit from mainline to temp. I am doing this like follows.</p>

<ol>
<li><code>git checkout temp</code></li>
<li><code>git cherry pick &lt;commit sha&gt;</code></li>
<li>Now, I get: <code>Segmentation fault: 11</code></li>
<li><p>I rerun the command from 2), and get: <code>Unable to create ...git/index.lock': File exists</code></p>

<p>====================================================================</p></li>
<li><p>Now I run <code>rm -f ./.git/index.lock</code></p></li>
<li><p>Try again <code>git cherry pick &lt;commit sha&gt;</code></p></li>
<li><p>Now I get this: </p>

<p><em>error: The following untracked working tree files would be overwritten by merge:
    myfile.java</em></p></li>
</ol>

<p>... for a file which isn't even there. I had it before, but I renamed it, so file under that name is not in a repository.</p>

<ol start=""8"">
<li>I run <code>git status</code> and now I see the file <em>myfile.java</em> under <strong>untracked files</strong>. And now it even appears in the editor. I can delete it from the editor, but can't delete it from git repository. I get <code>pathspec 'myfile.java' did not match any files</code></li>
<li>OK, so I delete the file from editor, rerun <code>cherry-pick</code> and I am back to step <strong>3)</strong>. </li>
</ol>

<p>What is happening here, and how can I just do my cherry-pick? :D</p>
","8","7390408","",""
"4264104","11410","2010-11-24 06:41:12","15","21356","<git><cherry-pick>","git cherry-pick says local changes exist, but git status says nothing","<pre>$ git cherry-pick 5de83068
error: Your local changes to the following files would be overwritten by merge:
        Components/ApplicationEnums/Application.cs
Please, commit your changes or stash them before you can merge.
Aborting

$ git status
# On branch master
nothing to commit (working directory clean)
</pre>

<p><strong>UPDATE</strong> Sorry, I switched to another branch, and switched back again, and can't reproduce this anymore :(</p>
","3","11410","0","0"
"22819977","1215748","2014-04-02 18:28:15","0","2872","<android><git><git-cherry-pick>","How can I cherry-pick from ""Android Studio branch"" to ""Eclipse branch""","<p>Right now I'm working on a fork of a project and I need to cherry-pick some changes from the master branch to the forked branch.</p>

<p>The problem is that master is updated to the new project structure.</p>

<p>So source files are located in <code>./src/main/java</code> instead of <code>./src</code></p>

<p>Any suggestion how to cherry-pick changes from master?</p>
","0","1215748","",""
"6957441","259692","2011-08-05 13:55:20","4","292","<cherry-pick><pre-commit><git-checkout>","How to find out what commit a checked out file came from","<p>When I check out a file with <code>git checkout $commit $filename</code> and I forget <code>$commit</code> but still remember <code>$filename</code>, how do I find out what <code>$commit</code> was?</p>
","3","259692","0","0"
"62695473","13621035","2020-07-02 11:35:36","-2","111","<git><cherry-pick><git-cherry-pick>","Clarification of Git cherry-pick command?","<p>I have following Branches</p>
<blockquote>
<p>a) Master</p>
</blockquote>
<blockquote>
<p>b) Master/Test-1</p>
</blockquote>
<blockquote>
<p>c) Master/Test-2</p>
</blockquote>
<p>I have few commits on <strong>Master/Test-1</strong> branch.
I had cherry-pick on  <strong>Master/Test-2</strong> branch from above commit hash.
if i delete <strong>Master/Test-1</strong> branch.
Is cherry-pick changes will be present on <strong>Master/Test-2</strong> or not ?</p>
","1","13621035","",""
"62950272","366207","2020-07-17 08:39:33","4","322","<git><github><version-control><cherry-pick>","Cherry-picking a range of commits doesn't work, but individual cherry-picks work","<p>I'm having issues with cherry-picking a range of commits and keep having conflicts and can't figure out what's the problem. The conflicts shouldn't occur because the commits being cherry-picked add/modify code which isn't present in the receiving branch.</p>
<p><em><strong>Walkthough:</strong></em></p>
<p>The commits I'm cherry-picking come from a branch called <code>FeatureX</code>, and the commits look like this:</p>
<pre><code>&gt;&gt; git log --oneline

cbd0d94ca312 (HEAD -&gt; FeatureX) Version 6
e1da344f20b7 Version 5
a9875369a8e4 Version 4
44d7975d975f Version 3
6955a667be84 Version 2
c7c70076c435 Version 1
</code></pre>
<p>Now, I have another branch called <code>MainCode</code>, on which I'd like to cherry-pick the above commits from <code>FeatureX</code> branch. If I cherry-pick them individually:</p>
<pre><code>&gt;&gt;git cherry-pick c7c70076c435
[MainCode 7850ed1c4a4d] Version 1
 Date: Sat Jun 13 19:59:04 2020 -0700
 2 files changed, 321 insertions(+), 1 deletion(-)
 create mode 100644 STHelper.cs

&gt;&gt;git cherry-pick 6955a667be84
[MainCode df98023a9ac9] Version 2
 Date: Tue Jun 16 15:36:24 2020 -0700
 1 file changed, 68 insertions(+), 15 deletions(-)

&gt;&gt;git cherry-pick 44d7975d975f
[MainCode beede732db3f] Version 3
 Date: Tue Jun 23 14:34:27 2020 -0700
 1 file changed, 104 insertions(+), 23 deletions(-)

&gt;&gt;git cherry-pick a9875369a8e4
[MainCode 77664b1d36c2] Version 4
 Date: Wed Jul 8 21:25:27 2020 -0700
 1 file changed, 25 insertions(+), 15 deletions(-)

&gt;&gt;git cherry-pick e1da344f20b7
[MainCode 8eb1c3cf9828] Version 5
 Date: Fri Jul 10 03:39:47 2020 -0700
 1 file changed, 67 insertions(+), 19 deletions(-)

&gt;&gt;git cherry-pick cbd0d94ca312
[MainCode a07e9f4dbed9] Version 6
 Date: Fri Jul 10 14:28:10 2020 -0700
 3 files changed, 174 insertions(+), 35 deletions(-)
 create mode 100644 config_debug.xml
</code></pre>
<p>...it works fine. But if I try to cherry-pick them together ...</p>
<pre><code>&gt;&gt;git cherry-pick c7c70076c435^..cbd0d94ca312
error: could not apply 6955a667be84... Version 2
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'

&gt;&gt;git status
On branch MainCode
Cherry-pick currently in progress.
  (fix conflicts and run &quot;git cherry-pick --continue&quot;)
  (use &quot;git cherry-pick --abort&quot; to cancel the cherry-pick operation)

Unmerged paths:
  (use &quot;git add/rm &lt;file&gt;...&quot; as appropriate to mark resolution)
        deleted by us:   STHelper.cs

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>... there are conflicts. I also tried using <code>their</code> changes (i.e. changes from <code>FeatureX</code> branch) to try to resolve conflicts ...</p>
<pre><code>&gt;&gt;git cherry-pick c7c70076c435^..cbd0d94ca312 --strategy=recursive -X theirs
error: could not apply 6955a667be84... Version 2
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>
<p>... but it still doesn't work.</p>
<p>Can someone tell me what's the issue here ?</p>
<p>[edit] I'm using cmd.exe as a shell, on windows.</p>
","8","366207","0","0"
"44237491","8080233","2017-05-29 08:06:58","2","631","<git><merge><rebase><cherry-pick>","How to merge a repository copy","<p>At the beginning of the project we started REPO-A. That repo continued for several months until one of the engineers decided to fork the project. Now he did this by just duplicating the directory and starting a new repo. REPO-B. Now B has none of the history from A, and A hasn't had any further development. NOW we want to go back to A and merge everything from B back into A, and keep all the history of B while it was a separate repo. The only saving grace here is that since B started as a copy of A I should be able to graft on B's history right onto the end of A, and everything should be fine.</p>

<p>Unfortunately I've had a helluva time trying to do that.</p>

<p>I tried in (REPO-A):</p>

<pre><code>git add remote new REPO-B
git checkout -b mergeAttempt
git merge -X theirs --allow-unrelated-histories new/master
</code></pre>

<p>Now this seems to work slightly, only REPO-B's history now overwrites any of the history that existed from REPO-A on the files that were modified, so there's no true history. So I tried:</p>

<pre><code>git cherry-pick -X theirs &lt;REPO-B first commit&gt;..&lt;REPO-B last commit&gt;
</code></pre>

<p>This also fails because REPO-B has several merges between the branches that had been created in it and master. I also tried to create a branch in REPO-B that rebases the root of the repo to the last commit in REPO-A with hilarious consequences.</p>

<p>So I'm not sure where to go from here.</p>
","3","8080233","",""
"25444236","1603711","2014-08-22 09:52:18","0","1592","<git><git-rebase><git-cherry-pick>","How should I use git rebase to remove duplicate commits introduced by git cherry-pick?","<p>I'm a bit confused by <code>git rebase</code>.</p>

<p>I have a <code>develop</code> branch and a <code>staging</code> branch. I've merged <code>develop</code> into <code>staging</code></p>

<pre><code>git checkout staging
git merge develop
</code></pre>

<p>But there are a bunch of duplicate commits because of cherry picks; I want to remove the duplicates. Should I do the following?</p>

<pre><code>git checkout staging
git rebase develop
</code></pre>

<p>UPDATE: The <code>git merge develop</code> is local, so I haven't pushed it yet</p>
","1","1603711","",""
"25448388","698072","2014-08-22 13:37:54","8","11280","<git><git-tag><git-cherry-pick>","Will cherry-picking on a tag affect the latter?","<p>While doing a release, I checked out the previously released tag and cherry-picked the new items (using <code>git cherry-pick &lt;commit-id&gt;</code>) into it. Then, I created a new tag using <code>git tag &lt;tag-name&gt;</code>. </p>

<p>Will this  affect the old tag I cherry-picked the changes into?</p>
","0","698072","",""
"44509612","","2017-06-12 22:24:25","10","3087","<git><git-merge><git-cherry-pick>","If I cherry-pick a commit from a branch and then merge the whole branch later what happens to the git history?","<p>So I've got a situation where I only want a particular commit from branchA because other commits in that branch aren't ready to be merged. So if I cherry-pick commitX from branchA into master, and then later merge branchA into master (with some commits in between let's say), what happens to commitX as far as the git history is concerned? Does it get ignored since it's already present in master, or does some sort of duplication occur?</p>
","0","","",""
"26063872","1624933","2014-09-26 16:11:51","1","812","<git><version-control><merge><cherry-pick>","Git cherry-pick old commit","<p>I just encountered the following scenario:</p>

<p>Some commits in a branch [develop] (multiple people working on it) were causing issues and I wanted to copy them to a separate branch [feature1] so they could be fixed/added to (and the code removed from the current branch [develop]). They had already been pushed to remote [origin/develop] quite a while ago.</p>

<p>What I ended up doing was: 
1. creating a separate branch [feature1]
2. deleting the code from the [develop] branch</p>

<p>I then realised that if someone else did a git merge [develop] (to bring in any new desired changes) whilst on [feature1], the deletions would get pulled through (and they would lose the code). But I needed to keep these historical commits.
I then therefore thought I could:</p>

<ol start=""3"">
<li>merge in the deletion: git merge [develop] (whilst on [feature1])</li>
<li>cherry-pick the hash of the old commits I wanted to keep.</li>
</ol>

<p>I then realised I could not do that (it was saying my local changes would get overwritten, even though there were no local changes). I presume this is because the old commits were dated as older than the deletion I had just merged in.</p>

<p>There must be way of doing this, kind of like a cherry-pick force or something else! Any ideas what the best command would be for this scenario?</p>

<p>Thanks</p>
","0","1624933","0","0"
"26079677","4087000","2014-09-27 22:11:32","0","30","<git><version-control><git-merge><git-rebase><git-cherry-pick>","GIT public branch cleanup into new branch","<p>I have to cleanup a remote/public branch ""OLD"" because it contain some bad/huge commits.</p>

<p><strong>OLD - simplified graph</strong></p>

<pre><code>(...) -&gt; c234 -&gt; c235(huge to fix) -&gt; c236 -&gt; c237(huge to fix) -&gt; c238 -&gt; c239 -&gt; (...) -&gt; HEAD
</code></pre>

<p><strong>To do so I did:</strong></p>

<p>1) I created a ""NEW"" branch.</p>

<p>2) Get back before first huge commit (c234)</p>

<p>3) Cherry pick all commits before last huge commit. (c236)</p>

<p>4) Then I copied all changed files from ""OLD"" branch after last huge commit (c237)</p>

<p>5) And finally created many small commits reflecting changes (c235, c237)</p>

<p><strong>NEW now - simplified graph</strong></p>

<pre><code>(...) -&gt; c234 -&gt; c236 -&gt; (many commits reflecting state after c237) -&gt; HEAD 
</code></pre>

<p>Now in my opinion I have to rebase/cherry-pick all changes made after (c237) on ""OLD"" into top of the ""NEW""</p>

<p><strong>NEW expected - simplified graph</strong></p>

<pre><code>(...) -&gt; c234 -&gt; c236 -&gt; (many commits reflecting state after c237) -&gt; c238 -&gt; c239 -&gt; (...) -&gt; HEAD
</code></pre>

<p>I tried before this git-rebase -i but because this was a public repo, it contain many (there is almost 400 commits to HEAD of OLD) merges and from time to time I had to resolve conflicts - witch can take me many days.</p>

<p>Any ideas howto do deal with it.</p>
","2","4087000","",""
"26134701","1000341","2014-10-01 05:31:30","0","161","<git><commit><git-cherry-pick>","How to remove an old commit in none master branch after cherry-pick?","<p>In master branch I have below commits:</p>

<pre><code>A-B-C-D-HEAD
</code></pre>

<p>In branch ""test"" I have:</p>

<pre><code>A
</code></pre>

<p>I did:</p>

<pre><code>git cherry-pick &lt;SHA FOR COMMIT C&gt;
</code></pre>

<p>However, I don't want commit B on ""test"" branch. How can I ignore that? so that test branch end up like:
A-C</p>
","3","1000341","",""
"63536180","8919671","2020-08-22 12:27:36","2","2085","<git><gitlab><git-merge><git-bash><cherry-pick>","Merging/Cherry-Picking a range of Commits from Branch A to Branch B","<p>I have the following git history:</p>
<pre class=""lang-none prettyprint-override""><code>...--A--B--C--D---E--I--M--N--O--P   &lt;-- Branch-A
  \  \       /
   \  F--G--H
    \
     J--K--L   &lt;-- Branch-B (HEAD)
</code></pre>
<p>I want to Merge/Cherry-Pick commits (I .. P) to the branch (Branch-B)</p>
<p>I have tried git cherry-pick using following command:</p>
<pre class=""lang-bash prettyprint-override""><code>git cherry-pick I..P
</code></pre>
<p>But instead of merging from commit I to P. cherry-pick is being performed from I to A (i.e. backwards in the history).</p>
<p>Any Solutions? Solutions other than cherry-pick are also welcome.</p>
","1","8919671","",""
"8405966","628557","2011-12-06 19:56:28","14","8782","<git><rebase><gerrit><cherry-pick><git-flow>","Git workflow and Gerrit","<p>I am trying to implement a 'git-flow' kind of workflow using Gerrit but I can't seem to figure out the last piece of the puzzle. </p>

<p>There are two preconditions to my problem:</p>

<ul>
<li>Gerrit will only perform merging to one branch</li>
<li>I do not allow merge commits to be pushed to Gerrit. The merging has to be done by Gerrit after the changes are approved</li>
</ul>

<p>What I want to solve is the following. Consider this git situation:</p>

<pre><code>Master 0 
        \
         \
Develop   0-----0-----0-----0
</code></pre>

<p>There is a master branch with one commit and a develop branch which is forked from master with several additional commits. After a while the develop branch is merged back into master to create the next production release. The developers work with topic branches from develop and with strict rebasing. Their commits are always rebased on top of the latest upstream develop before pushing. This should result in linear history and only fast forward commits.</p>

<p>Now suppose someone creates a hotfix branch from master and merges back to master:</p>

<pre><code>Master 0--------0 HF 
        \
         \
Develop   0-----0-----0-----0
</code></pre>

<p>This commit is now only merged to the master branch but the developers need this commit in their develop branch to incorporate the bugfix in their changes. Normally you would merge the master branch to develop the develop branch but considering my preconditions this is not possible as it would create a local merge commit.</p>

<p>My question is: how do I incorporate the new commits from the master branch into the local develop branch so that any new changes by the devs will contain the bugfix? Ideally I would modify my script to first apply the bugfix changes to the local develop branch (merging but without a merge commit) and then rebase the dev's commits and push. This way the bugfix will be automatically added to their new changes and will be seen as such, as part of their new commits, not a seperate commit.</p>

<p>I've been thinking about possible solutions:</p>

<ul>
<li>Cherry picking the commit to the develop branch. I believe this will always result in a duplicate commit when develop is merged with master the next time. Is there any way around this?</li>
<li>Rebasing as described here: <a href=""http://davitenio.wordpress.com/2008/09/27/git-merge-after-git-cherry-pick-avoiding-duplicate-commits/"" rel=""nofollow noreferrer"">http://davitenio.wordpress.com/2008/09/27/git-merge-after-git-cherry-pick-avoiding-duplicate-commits/</a> . This probably causes problems since the develop branch is published, or won't it?</li>
</ul>

<p>I hope my question is clear. Please let me know if it needs further clarification. I know I'm being pretty rigid with my workflow, but it would be ideal in combination with Gerrit. If it can't be done then I will probably allow merge commits...</p>
","0","628557","0","0"
"8425373","967334","2011-12-08 02:24:10","1","245","<git><github><cherry-pick>","Working with git on two computer (with github)","<p>I'have a python project and I decide today put it on github.
I'm newbie with that. I see several tutorial. All work fine exept a thing I want to do:</p>

<p>I'm coding on my laptop in the day and on my computer I continue the work when I come back home.For now I create a repo on the laptop and I push it on my github. When I come back home on my computer I did a clone of the repo to continue working on the code. But when I push it on github again , all work fine exept I don't know how to ""download"" it on my laptop again to continue working in the next day.</p>

<p>The only things I find is to make a ""cherry pick"". I don't know if it's correct and how to process in this situation.</p>
","1","967334","0","0"
"38633277","6648733","2016-07-28 10:06:57","5","1325","<git><github><cherry-pick><git-cherry-pick>","git cherry-pick without fetching remote branch","<p>I am having a bit of a problem here, I want to cherry-pick a commit from a git repo that isn't locally present in my system. </p>

<p>For example : <a href=""https://github.com/DespairFactor/N6/commit/ecea4ab6d3d8bb4122522398200f1cd2a06af6d5"" rel=""noreferrer"">https://github.com/DespairFactor/N6/commit/ecea4ab6d3d8bb4122522398200f1cd2a06af6d5</a></p>

<p>A usual cherry-picking procedure includes doing </p>

<p>1) <code>git remote add &lt;RepoName&gt; &lt;repoURL&gt;</code></p>

<p>2) <code>git fetch &lt;RepoName&gt;</code> and it downloads a copy but isn't merged to your own local repo.</p>

<p>3) <code>git cherry-pick &lt;commit SHA&gt;</code> and cherry-pick is done.</p>

<p>I have a very slow download speed (1 mbps), and I don't have enough time to download whole repo for 1 commit. Sorry if this question was already asked and answered.</p>
","0","6648733","",""
"26849363","193601","2014-11-10 17:22:50","0","161","<git><git-merge><git-rebase><git-cherry-pick>","How to `git cherry-pick` a series?","<p>I want to cherry-pick a series of commits. This is because neither (1): --ff-only merge nor (2): rebasing off each other nor (3): rebasing both off a shared branch and retrying (1) work in my particular case because my branches are so widely diverged and different. The commits that I want to cherry-pick, however, are on a rarely touched part of the code-base so there is no merge collision risk here. How can I save time by not having to cherry-pick a whole bunch of commits one-by-one?</p>
","2","193601","",""
"45454879","6448094","2017-08-02 07:59:40","0","53","<git><patch><gerrit><cherry-pick><git-cherry-pick>","How to cherry pic and add a second patch to the first cherry picked patch?","<p>I have two branches branch A and branch B in GIT project.
where i have committed a code to branch A which is patch 1.
Then cherry picked patch 1 of branch A to branch B.
later i gave a second patch (patch 2) to the <strong>same commit</strong> in branch A.
How to add this patch 2 of branch A to branch B?</p>
","0","6448094","",""
"26885746","725937","2014-11-12 11:21:54","2","556","<git><git-cherry-pick><git-merge-conflict>","Commit only stage/index, ignoring conflicts","<p>I have a huge commit, which I cherry-picked. The pick now creates a sum of conflicts (in working-tree).
Now I would like to commit all the staged (successfully merged) changes without having to resolve all conflicts.</p>

<p>Naively I always thought, commit would only work on the stage, but when I try, I get the message, that I cannot commit without resolving the conflicts.</p>

<p>Can someone explain to me what is going on and how I could fix it.</p>
","0","725937","",""
"63978730","925913","2020-09-20 11:57:13","1","144","<git><rebase><git-rebase><cherry-pick><git-cherry-pick>","Is it correct to say that a git rebase is equivalent to a git cherry-pick of certain commits from the other direction?","<p>I'm trying to tighten up my understanding (and communication) of git commands.</p>
<p>Is it correct to say that</p>
<pre><code>git checkout A
git rebase B
</code></pre>
<p>is exactly equivalent to</p>
<pre><code>git checkout B
git cherry-pick &lt;all_commits_from_common_ancestor_of_&lt;A&gt;_and_&lt;B&gt;_to_&lt;A&gt;&gt;
</code></pre>
<p>And if not, in what scenario do they diverge?</p>
","2","925913","0","0"
"38925214","131930","2016-08-12 19:27:15","2","217","<cherry-pick><gitx>","How to use GitX to cherry-pick a commit from master to another branch?","<p>(Note:  I do know how to do this using the command line git client; this question is on behalf of a command-line-phobic co-worker who I am introducing to git via the GitX GUI application on his Mac)</p>

<p>I see that in GitX you can right-click on a commit in the commits-list and choose ""Cherry pick commit into master""; but what I want to be able to do is the opposite:  cherry-pick a commit from master into a (non-master) branch.</p>

<p>Is there a way to do this inside of GitX?</p>
","0","131930","",""
"57903463","9611","2019-09-12 09:15:32","2","2027","<git><cherry-pick>","force partial git cherry-pick?","<p>When I'm doing a <code>git cherry-pick</code> and there's a conflict, git stops short of making the commit and allows me to resolve the conflict.<br>
Is there a way to force this stop even if there are no conflicts?<br>
The reason I want to do that is that I have a change I want to cherry-pick but I don't want all of the files it changes. Having it stop just before making the commit allows me to remove the file from the commit and then do <code>git cherry-pick --continue</code> without it</p>

<p><code>git cherry-pick --no-commit</code> does something similar to what I want but not exactly.<br>
If you do <code>git cherry-pick --no-commit</code> and then <code>git commit</code> the result is different than what you get if you do <code>git cherry-pick</code>, resolve a conflict and then do <code>git cherry-pick --continue</code></p>
","2","9611","",""
"27235764","131889","2014-12-01 19:30:37","1","859","<git><merge><cherry-pick>","Git: merge branch into parent, excluding parent->branch merges?","<p>So, I've got a scenario that looks about like the following:</p>

<pre><code>A----B----C----D (master)
 \    \    \
  E-F--G--H-I (child)
</code></pre>

<p><code>C</code> and <code>D</code> in this case represents huge sets of changes, including lots of rearranging of directory trees.  <code>F</code> and <code>H</code> are much smaller, and generally limited to contents of files.  The individual files in <code>F</code> and <code>H</code> haven't changed much in <code>B</code>, <code>C</code>, or <code>D</code>.  All of these revisions exist in a shared upstream repository (so anything that edits history is out, as I understand it).</p>

<p>What's the easiest can I end up with a branch that contains <code>A, B, C, D, F</code>, and <code>H</code>?</p>

<p>Doing <code>git checkout master; git merge child</code> ends up reverting a large amount of the structural changes made in <code>C</code> and <code>D</code>, I'm assuming because it's picking up the changes from the merge commits <code>G</code> and <code>I</code>.  (Lots of the files that were relocated in <code>C</code> and <code>D</code> end up in the working tree twice.)</p>

<p>I can do a cherry-pick on <code>F</code> and <code>H</code> (though in my example, they represent about a dozen commits - enough to be annoying).  </p>

<p>Ideally what I'd like would be a <code>git merge --ignore-merge-commits</code> option.</p>

<p>I don't think I can <code>rebase</code> child onto <code>D</code>, because <code>E-I</code> are all already in a shared repo.</p>

<p>Any other suggestions, or should I just go cherry picking?</p>

<p>Thanks!</p>
","7","131889","",""
"9229301","566145","2012-02-10 14:26:50","830","580227","<git><merge><rebase><cherry-pick><git-cherry-pick>","git cherry-pick says ""...38c74d is a merge but no -m option was given""","<p>I made some changes in my master branch and want to bring those upstream. When I cherry-pick the following commits. However, I get stuck on fd9f578 where git says:</p>
<pre><code>$ git cherry-pick fd9f578
fatal: Commit fd9f57850f6b94b7906e5bbe51a0d75bf638c74d is a merge but no -m option was given.
</code></pre>
<p>What is git trying to tell me and is cherry-pick the right thing to be using here?  The master branch does include changes to files which have been modified in the upstream branch, so I'm sure there will be some merge conflicts but those aren't too bad to straighten out. I know which changes are needed where.</p>
<p>These are the commits I want to bring upstream.</p>
<pre><code>e7d4cff added some comments...
23e6d2a moved static strings...
44cc65a incorporated test ...
40b83d5 whoops delete whitspace...
24f8a50 implemented global.c...
43651c3 cleaned up ...
068b2fe cleaned up version.c ...
fd9f578 Merge branch 'master' of ssh://extgit/git/sessions_common
4172caa cleaned up comments in sessions.c ...
</code></pre>
","1","566145","0","0"
"27260369","2489461","2014-12-02 22:36:38","1","965","<git><commit><cherry-pick>","Cherry pick specific commit and recover only deleted files?","<p>I have a branch (Branch A) which added about 300 files, I then merged this into master. The merge broke master so I removed all 300 files and committed the removal of these files. I then proceeded to go back into Branch A and fix the override, but merging this branch will not bring these files over as they have not been updated since the commit that deleted them. Is there a way to cherry-pick only the deleted files from a commit so I can bring them back?</p>
","4","2489461","",""
"58119602","3450840","2019-09-26 14:58:42","0","1055","<git><atlassian-sourcetree><cherry-pick>","In sourcetree how can I avoid messages ""(cherry picked from xxx)""?","<p>In the last version of sourcetree (3.1.3), when I cherry-pick commits, the new commit includes a comment <code>(cherry picked from xxx)</code>.  I don't want that message.</p>

<p>I read somewhere else it is the result of option <code>-x</code> in <code>git cherry-pick</code>.  So probably there was a change in how sourcetree translates user actions to git commands.  It adds option <code>-x</code>.</p>

<p>Is there any way to tell sourcetree to do the cherry-pick the old way, without option <code>-x</code>?  Or without changing the commit message?</p>
","0","3450840","",""
"15526488","317110","2013-03-20 14:33:29","17","7682","<git><merge><cherry-pick><git-cherry-pick>","How can one determine the committer of a cherry-pick in Git?","<p>In Git, <code>cherry-pick</code> retains the original commit's author, timestamp etc, at least when there are no conflicts. But is there any way to determine what user performed the cherry-pick which brought that commit to the new branch? </p>
","0","317110","0","0"
"34572096","156458","2016-01-03 00:15:51","9","9205","<git><git-revert><git-cherry-pick>","How do cherry-pick and revert work?","<p>I am trying to understand what merge and rebase do, in terms of set operations in math.</p>

<p>In the following, ""-"" means <code>diff</code> (similar to taking set difference in math, but ""A-B"" means those in A but not in B and minus those in B not in A), and ""+"" means <code>patch</code> (i.e. taking disjoint union in math. I haven't used <code>patch</code> before, so I am not sure).</p>

<p>From Version Control with Git, by Loeliger, 2ed</p>

<ol>
<li><blockquote>
  <p>The command git cherry-pick commit applies the changes introduced by the named commit on the current branch. It will introduce a new,
  distinct commit. Strictly speaking, using git cherry-pick doesn’t
  alter the existing history within a repository; instead, it adds to
  the history.</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/vifoe.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/vifoe.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/UaLvn.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/UaLvn.png"" alt=""enter image description here""></a></p>

<p>Is it correct that F' = (F-B) + Z?</p></li>
<li><blockquote>
  <p>The  git  revert  commit  command  is  substantially  similar  to  the  command git cherry-pick commit with one important difference:
  it applies the inverse of the given commit. Thus, this command is
  used to introduce a new commit that reverses the effects of a given
  commit.</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/sKSs7.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/sKSs7.png"" alt=""enter image description here""></a> </p>

<p><a href=""https://i.stack.imgur.com/hiJVn.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/hiJVn.png"" alt=""enter image description here""></a></p>

<p>Is it correct that D' = G - D?</p></li>
</ol>
","1","156458","0","0"
"15537145","1031791","2013-03-21 00:07:16","10","3463","<github><commit><pull-request><git-cherry-pick>","How to cherry pick 2 out of 5 commits of a pull request on GitHub?","<p>I'm new to GitHub. Someone submitted a pull request with 5 commits. 3 of them have a little bug, though, so must wait. How can pick 2 of them for my project?</p>
","0","1031791","0","0"
"34584008","5741922","2016-01-04 02:39:14","0","49","<git><branching-and-merging><cherry-pick><git-cherry-pick>","How to recover from this Git setup","<p>My small team of database developers and I started using Git for version control 6 months ago. We have 1 development instance and 1 production instance right now.</p>

<p>When I set up Git for the team, I created the ""MASTER"" branch, then put everything that was installed on the production instance into the folders. Then I created a ""DEV"" branch and put the things that were installed on the development instance into the folders (overwriting the old file if there were duplicates). </p>

<p>Then we continued doing all of our development on the ""DEV"" branch, then when want to install things on production from the development instance, I cherrypick a ""DEV"" commit from the ""MASTER"" branch. Then it asks me to manually merge because there are merge conflicts... </p>

<p>What do I need to do so that we can install from development to production easier without having to do cherry picking each time? Or do we need to start another repository going forward?</p>

<p>Here is an example of what I'm looking for.</p>

<p>I have made changes to these files in the DEV branch:</p>

<pre><code>file1
file2
file3
file4
file5
...
</code></pre>

<p>Added these files in the DEV branch:</p>

<pre><code>file 80
file 81
</code></pre>

<p>But I would like to only merge into the MASTER branch these files:</p>

<pre><code>file2
file4
file80
</code></pre>

<p>Each file is a PL/SQL trigger or function or procedure.</p>
","0","5741922","",""
"34733946","861815","2016-01-12 01:05:09","3","1347","<git><github><merge><cherry-pick>","How to merge back cherry-picked commits in git?","<p>I have 2 main branches <code>master</code> and <code>development</code>. I recently had to push a hotfix that are commits already merged to <code>development</code>, and to do so I cherry-picked commits from <code>development</code>, created a new hotfix branch, added another commit for the fix, and merged that to <code>master</code>. My question is, how can I now merge the new commit to <code>development</code> without messing up the git commit history?</p>

<p>Roughly, what I did:</p>

<pre><code>git cherry-pick &lt;commit SHA&gt;
git checkout -b hotfix-branch
[make more changes]
git commit -m ""Fix issue""
git checkout master
git merge hotfix-branch
</code></pre>

<p>Now, if I look at <code>git diff</code> between <code>master</code> and <code>development</code>, the old commits from <code>development</code> is showing up because they're cherrypicked, therefore different commits with the same changes. What is the best way to merge back to <code>development</code> and ""fix"" these diff?</p>

<p>Edit to add: Alternatively, what should I have done in a situation like this, where a hotfix consists of commits in <code>development</code> branch?</p>
","4","861815","0","0"
"51096164","71062","2018-06-29 07:10:35","3","1777","<git><merge><git-merge><cherry-pick><git-cherry-pick>","Cherry-pick merge commit failing with empty commit","<p>I have a couple of branches, and I want the changes from the second branch to appear in the first branch.</p>

<p>It's probably best described with a diagram:</p>

<pre><code>          X - Y - Z    (branch-2)
         /         \
A - B - C - D - E - F  (master)
 \     
  G - H - I            (branch-1)
</code></pre>

<p>I want to merge <code>X</code>, <code>Y</code>, <code>Z</code> into <code>branch-1</code> without bringing <code>B</code> and <code>C</code>.</p>

<p>I tried to cherry-pick merge-commit <code>F</code>, and although I specify the correct parent (I think), the cherry-pick fails with: <code>The previous cherry-pick is now empty, possibly due to conflict resolution.</code></p>

<p>Should I cherry-pick the <code>X^..Z</code> range? Or is there a better way to do it?</p>
","3","71062","",""
"34899593","1737819","2016-01-20 12:04:53","0","3808","<git><sha1><cherry-pick>","Git cherry-pick and sha-1 value","<p>In <a href=""https://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project"" rel=""nofollow"">https://git-scm.com/book/en/v2/Distributed-Git-Maintaining-a-Project</a> is example that shows how to cherry pick on a branch. In this example the sha-1 value of commit is used in full length? </p>

<p><code>$ git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf</code></p>

<p>Doesn't the cherry-pick allow short sha-1 values like e43a6, so that the following is valid?</p>

<p><code>$ git cherry-pick e43a6</code></p>
","0","1737819","",""
"69685815","10421103","2021-10-23 06:49:43","0","1107","<git><cherry-pick><git-cherry-pick>","What use case is git cherry-pick useful for?","<p>Originally, I thought git cherry-pick does a diff on its parent, produces a patch file and then applies that patch onto your HEAD, which I think is far more interesting and unique and I haven't seen in a git command that does this yet. Such a command could be useful if you have simple fixes like you want two branches to produce the same log output but you only fixed it on one branch and you want to <code>cherry-pick</code> that ONE line change and apply it to your other branch so that you can now compare results. But if it is just bringing in the entire object onto your HEAD, then I don't see the point.</p>
<p>So my question is, what use case would I use cherry-pick for? Because it seems like its only for commit history management (i.e., not merging in all the parent commits of the cherry-picked commit into the current HEAD).</p>
","8","10421103","0","0"
"34994473","2641666","2016-01-25 14:01:45","0","1213","<git><merge><rebase><cherry-pick><hotfix>","How to merge specific git commits from a branch to another?","<p>Good day,</p>

<p>Here's the situation:</p>

<ul>
<li>I have a master branch which is similar to production.</li>
<li>I have a develop branch which contains all tested work and ready to be deployed in the next release.</li>
<li>I develop new features on feature branches, based on the develop branch.</li>
<li>Sometimes I have to hotfix the master branch, therefore I create hotfix branches.</li>
</ul>

<p>When I work on feature branches, if it takes too long or if important updates have been pushed to the develop branch, we merge the develop branch into our feature branch in order to fix possible conflicts on the feature branch.</p>

<p>When I have to hotfix the master branch, I create a child branch from it and work on this hotfix branch, before merging it back to the master and develop branches.</p>

<p><strong>The problem</strong> is that sometimes, I have to suddenly deploy a feature branch without deploying what's on the develop branch (even though it has been tested and approved, it might not be the right time to deploy it).</p>

<p>To do so, I can think of only one safe way: create a hotfix branch from master, cherry-pick commits from the feature branch and merge the hotfix branch back into master and develop.</p>

<p>I can't just merge the feature branch into the hotfix branch, as it might contain commits from develop (through the creation of the feature branch from develop, or through the merges of develop into the feature branch (to keep it up to date)).</p>

<p>I'm pretty sure there are nicer ways to proceed, but I can't get a hold of the way to do so. Maybe git rebase with interactive mode? but I can't make if work properly.</p>

<p>To summarize: how to hotfix a master branch with an existing feature branch that may contain unwanted commits.</p>

<p>Any ideas are welcome.</p>

<p>Regards.</p>
","3","2641666","",""
"51130544","380490","2018-07-02 06:54:16","0","716","<git><cherry-pick>","Find Git cherry pick parent","<p>I have done a cherry-pick from branch PRIVATE to branch MASTER.
Done without -x (since done from GUI).
It created a commit with conflict. Resolved and committed. </p>

<p>I want to see in the future that this commit is a cherry-pick from branch PRIVATE to branch MASTER.</p>

<p>There is no trace of that!
When I do: </p>

<pre><code>git log --cherry
</code></pre>

<p>I DO see this commit on MASTER, but I cannot find its parent (the private branch).</p>
","0","380490","",""
"51153183","6096034","2018-07-03 11:12:38","2","421","<git><cherry-pick><git-cherry-pick>","How to use cherry-pick from one Git branch to another?","<p>I am trying to cherry-pick a commit from one branch to another. Consider the below scenario.</p>

<p>Branch A -> commit1 -> commit message ""12345 Hello World""</p>

<p>I want to add a new message at the beginning of the commit message while doing cherry-pick. So after cherry-pick it should look like,</p>

<p>Branch B -> commit2 -> commit message ""98765 ........""</p>

<p>Here 98765 is the extra message I want to add. From Git documentation I found a command ""git cherry-pick --edit"" but I didn't find any example to understand its proper use.</p>
","0","6096034","",""
"52059153","4828248","2018-08-28 13:29:21","1","984","<git><cherry-pick><git-merge-conflict>","how to cherry-pick latest patch from the different developer without conflicts","<p>I have cherry-picked one commit from the other developers for some work. </p>

<p>After few hours one of the developer has updated his patch. </p>

<p>If i cherry-pick new patch then there are conflicts.</p>

<ol>
<li>Two added files: - in case new files are present in same 
 patch</li>
<li>Both Modified: - same file in old patch and new patch is modified.</li>
</ol>

<p>Is there any way to discard previous patch Or I have to manually resolve the conflict?</p>
","0","4828248","",""
"69988597","12889110","2021-11-16 11:48:31","0","78","<git><git-cherry-pick>","Commited a merge with master that accidentally deleted package-lock, deleted lines are now inflated","<p>So a while ago, I accidentally made a commit in which my package-lock file got deleted, resulting in 20,000 lines being deleted:</p>
<p><a href=""https://i.stack.imgur.com/UdyCm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UdyCm.png"" alt=""enter image description here"" /></a></p>
<p>This has resulted in my deleted lines for my pull request to be highly inflated, which I do not want:</p>
<p><a href=""https://i.stack.imgur.com/KAhlA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KAhlA.png"" alt=""enter image description here"" /></a></p>
<p>Is there any way to remove this commit and make it so that the deletions do not show up inflated like this? If the commit can't be deleted, is there another way to do this?</p>
","1","12889110","",""
"70027753","2739654","2021-11-18 22:52:19","2","211","<git><git-cherry-pick>","How to easily run git bisect with patches on top cleanly","<p>I'm trying to run git bisect to find a broken commit, but the problem I have is that the brokenness isn't apparent without an extra series of patches applied on top. I'm just cherry-picking those out of another branch, but the problem I have is that at some steps in the bisect they don't apply cleanly and require some fixup. That shouldn't be a problem, but I can't seem to move on after doing the fixup.</p>
<p>So for example...</p>
<pre><code>$ git bisect start
djrscally@valhalla:$ git bisect bad
djrscally@valhalla:$ git bisect good tags/v5.14-rc7
Bisecting: 13382 revisions left to test after this (roughly 14 steps)
[1ea3615b6168eaaf07445c8d32a4c6bc965d9579] iio: accel: sca3000: Use sign_extend32() instead of opencoding sign extension.
djrscally@valhalla:$ git cherry-pick --no-commit 820aca592e0c^..58915847b332
Auto-merging include/acpi/acpi_bus.h
Auto-merging drivers/acpi/scan.c
Auto-merging drivers/i2c/i2c-core-acpi.c
Auto-merging drivers/regulator/Makefile
CONFLICT (content): Merge conflict in drivers/regulator/Makefile
Auto-merging drivers/regulator/Kconfig
CONFLICT (content): Merge conflict in drivers/regulator/Kconfig
error: could not apply 6a7e459bf029... regulator: Introduce tps68470-regulator driver
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
</code></pre>
<p>At this point I need to fix drivers/regulator/Makefile and Kconfig; at which point I expect to be able to carry on, but I can't:</p>
<pre><code>djrscally@valhalla:$ git add .
djrscally@valhalla:$ git cherry-pick --continue
error: your local changes would be overwritten by cherry-pick.
hint: commit your changes or stash them to proceed.
fatal: cherry-pick failed
</code></pre>
<p>Aaaaaaaand I'm not really sure what to do at this point. <code>git cherry-pick --skip</code> seems to reset all the changes from the earlier cherry-picked commits. I can drop the <code>--no-commit</code>, but I'm not really sure how bisect will handle the fact that I suddenly dropped a ton of commits on top of the point it decided to bisect to.</p>
<p>How should I handle this?</p>
","0","2739654","",""
"52099579","6181692","2018-08-30 14:31:37","1","798","<git><git-merge><git-commit><git-cherry-pick><git-merge-conflict>","GIT: how to merge changes, which were earlier removed from the merged commit","<p>I have two branches, develop and master. I wanted to cherry pick some commits regarding one specific feature from develop into master. But the number of commits cherry pick able from dev to master were around 106, that means I had to go through all of them in order to filter out the relevant ones. To avoid having to go through the changes of each commit and then cherry pick individual ones or a range of those, I thought to take the short cut :D. I merged develop into master, there were around 115 file changes in the merge commit.</p>

<p>I went through each file and removed those changes which were not relevant to the feature. In case of some files I removed them altogether and for some I took only partial changes and removed the unnecessary changes. After going through all of the 115, there were around 55 filtered files left which were relevant to the feature which I then commited in the merge commit.</p>

<p>Now when I look at the git log of master, log appears as though all 106 commits were merged into the master and on the top appears my merge commit named 'merged develop into master'.
Now I want to merge develop into master in order to actually merge the remaining files which I removed earlier from the merge commit, git says there is nothing to merge although there are changes among both the branches but due to the fact that I removed those from the merge commit I am unable to move those changes into master now.
Do I need to remove the merge commit from the master or is there any way to force fully merge the differences?
what should be the right method here in order to avoid any future issues?</p>
","5","6181692","0","0"
"52119937","481061","2018-08-31 17:04:37","10","4125","<git><git-cherry-pick><git-patch><git-am>","What is the difference between git cherry-pick and git format-patch | git am?","<p>I sometimes need to cherry-pick a tag with a certain fix into my branch, and used to do so via</p>

<pre><code>git cherry-pick tags/myfix
</code></pre>

<p>This works, but cherry-picking takes an increasingly long time doing ""inexact rename detection"".</p>

<p>My hunch was that this could be faster with</p>

<pre><code>git format-patch -k -1 --stdout tags/myfix | git am -3 -k
</code></pre>

<p>In fact, this turned out to apply the fix instantly, leaving my branch in exactly the same state as cherry-picking.</p>

<p>Now my question is, what exactly does cherry-picking do differently? I thought cherry-picking was basically implemented as exactly this, but I must have been mistaken.</p>
","2","481061","0","0"
"70089501","7011860","2021-11-24 00:41:33","1","85","<git><merge><cherry-pick>","How to cherry-pick and merge only a subpath from a feature branch to master","<p>I have an interesting problem (at least to me.)</p>
<p>I have a <code>master</code> branch and a <code>feature</code> branch, which has been parted its way from <code>master</code> a while ago. Another team keeps updating the <code>master</code> branch and my team is only working on <code>feature</code> branch.</p>
<p>The <code>master</code> branch includes some changes that my team is not interested in. We only care about their <code>app</code> folder, that's it. Even in the <code>app</code> folder, we are not interested in everything, only the changes that we think we need. We are not merging our <code>feature</code> branch into their <code>master</code> because there is tech-stack changes that we are implementing and only thing we need from them is their JavaScript code.</p>
<p>Meanwhile, we are also making changes in the <code>feature</code> branch's <code>app</code> folder. So in the <code>app</code> folder, they have some changes that we don't have, we have some changes that they don't have. We want to keep all our changes, but only pick some of their changes.</p>
<p>How can I go about merging their <code>master</code> branch's <code>app</code> folder into our <code>feature</code> branch's <code>app</code> folder? I have been researching for hours, tried some VS Code extensions to preview the difference between the two folders. What I am looking for is an interface where I can <strong>Accept</strong> or <strong>Decline</strong> everything that comes from <code>master</code> branch's `app folder. Although this is my preference, I am open to any suggestions that would solve this problem.</p>
<p>This may sound like a messed up situation but my team lost some members over the past couple of months and the difference between branches grew bigger and bigger every week. Now we want to solve this once and for all.</p>
<p>Thanks for your help.</p>
","0","7011860","",""
"52169683","2073037","2018-09-04 15:28:23","1","561","<git><cherry-pick><git-cherry-pick>","git: cherry-pick a list of sibling commits","<p>Due to the workflow of my employer, I am in the situation where I have a parent commit with several child commits, with each child commit being the tip of a different branch:</p>

<pre><code>      ┌─── b &lt;- branch1
      ├─── c &lt;- branch2
      ├─── d &lt;- branch3
... ─ a ── e &lt;- branch4
</code></pre>

<p>I want to end up in the following state:</p>

<pre><code>      ┌─── b &lt;- branch1
      ├─── c &lt;- branch2
      ├─── d &lt;- branch3
... ─ a ── e &lt;- branch4
      └─── b'─ c'─ d'─ e' &lt;- branch5
</code></pre>

<p>Where the primed commits are clones. The order of these commits is not important, and I can manually resolve commits as each as applied if necessary.</p>

<p>Is there a way I can do this automatically without just creating a new branch and manually cherry-picking each commit one at a time?</p>
","2","2073037","",""
"19662564","242042","2013-10-29 15:29:45","0","847","<git><git-rebase><git-cherry-pick>","Manage a patched workspace in git without sharing the patches","<p>I use git with SVN and I have a commit that I don't want to be pushed via dcommit but I need to do my local development.</p>

<p>The way I do it right now is</p>

<pre><code>git checkout git-svn -B master
git cherry-pick ????..work
git svn dcommit
git checkout -B work
git cherry-pick mypatch^0
</code></pre>

<p>In the work branch, the commit after the git-svn tag has a commit containing <code>mypatch</code> after that is the work I actually do for the change set.</p>

<p>What I was wondering is whether it is possible to specify <code>????</code> as the second commit after <code>git-svn</code> on the <code>work</code> branch.  That way I don't have to go through the log and find the revision myself.</p>
","2","242042","0","0"
"32073125","","2015-08-18 12:58:44","2","37","<git><branching-and-merging><cherry-pick>","Git workflow to add the same functionality to diverged branches","<p>[<em>There seems to be a lot of similar information about related topics, but I still cannot find the answer.</em>]</p>

<p>Suppose we have two diverging branches: stable and master (aiming at becoming the next stable):</p>

<pre><code>----&gt; split --&gt; fix 1 --&gt;  [stable]
         \
           ---&gt; development --&gt; more development ----&gt; [master]
</code></pre>

<p>The branches diverged, for example, because fix 1 was done differently in master, as some development presented a better way to do it (but the development itself was too large in scope to merge it into the stable branch).</p>

<p>Now we have another bug 2, for which we need fix 2.  While the branches are already diverged, the affected files are absolutely the same in both stable in master and the fix would look exactly the same too.</p>

<p>What is the best way to apply identical changes to two diverged branches?  Fix in one, then cherry-pick?  Or is there a better solution?</p>
","0","","0","0"
"32099740","600360","2015-08-19 15:26:53","1","419","<git><git-merge><git-cherry-pick>","git cherry-pick being ancestor-aware, not just applying a patch?","<p>It sure would be nice if <code>merge</code>-like cleverness and awareness of common ancestors were available in <code>cherry-pick</code>. Is that possible?</p>

<p>Suppose we have this situation. We have a development where commits are made to <code>dev</code> and are cherry-picked to <code>release</code>. [1]</p>

<pre><code>X----Y---A1---A2---B---Z   dev
  \
   \----B'                 release

 A1: Remove function foo()
 A2: Re-add function foo() (ooops, it was needed) and change function bar()
     (A1 and A2 are listed together becuase they are two commits, attempts, to fix the same bug.)
 B:  Modify function foo()
 B': B is cherry-picked into the release branch
 X, Y, Z: changes touching unrelated files. No conflicts here.
</code></pre>

<p>Now we want to cherry-pick <code>A1</code> and <code>A2</code> into the release branch. Obviously, we cannot just cherry-pick them because
 there will be a conflict on the deletion/modification of <code>foo()</code>.</p>

<p>But a smart person could see how A1 and A2 delete and re-add <code>foo()</code> and how this can indeed be merged into the <code>release</code> branch. And you could even make an algorithm to do it where you take all commits to <code>dev</code> that occur after <code>A1,A2</code> that are already in <code>release</code>, go back to the commit before that, and then re-apply <code>A1, A2, B</code> in the order they were applied to <code>dev</code> then take that final state of files and put it after B' on the <code>release</code> branch. (Because on the <code>release</code> branch, no history modification is <em>ever</em> allowed.)</p>

<p>And that's all fine and well, but it gets hairy pretty quickly. It sure would be nice if <code>merge</code>-like cleverness and awareness of common ancestors were available in <code>cherry-pick</code>. Is that possible?</p>

<p>Steve</p>

<p>[1] I know you probably think this is ridiculous. Please don't bother telling me that. Honestly, it is more complicated than you think and there are good reasons for it. I have tried to keep things simple for this question and it's not in anybody's best interest to have a multi-page explanation of why, in this case, this is the right thing to do.</p>
","1","600360","",""
"50650952","5705572","2018-06-01 21:01:45","0","34","<git><git-branch><branching-and-merging><git-push><git-cherry-pick>","git automation - setup local branch to receive commit from working branch, auto-add a file, commit with default message & push without checkouts","<p>I have a fairly complex workflow. My working git branch is <code>master</code>. Assume that there exists a local branch called <code>push_branch</code>.</p>

<p>I'd like to automate the following steps whilst staying from within my working branch <code>master</code>.</p>

<ul>
<li><p>At a particular point in time, a commit to <code>master</code> is made with a user-specified commit message. This should trigger the following:</p>

<ol>
<li>An additional <code>side_effect_file</code> is generated.</li>
<li><code>push_branch</code> obtains the latest set of tracked files from <code>master</code>. It also receives the <code>side_effect_file</code> generated by the last commit made to <code>master</code> and adds to its staging index.</li>
<li>A commit is made in <code>push_branch</code> (i.e. the <code>side_effect_file</code> is now committed in <code>push_branch</code>. (can use the same commit message as step 0 above or use a default commit_msg, it doesn't matter).</li>
<li><code>push_branch</code> pushes to github (or a suitable remote repo).</li>
</ol></li>
</ul>

<p>Here is a pictorial description of the desired workflow:
<a href=""https://i.stack.imgur.com/1Z037.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1Z037.png"" alt=""complex_git_workflow""></a></p>

<p>In essence, all the working happens in <code>master</code>, which acts like a one-way feed to <code>push_branch</code>.  The real challenge is to automate the process seamlessly, whilst staying inside the working branch <code>master</code>  (or at-least appears seamlessly to the user by using a shell script which runs in the background).  </p>

<p>What I don't want to do is to manually checkout <code>push_branch</code>, do a manual commit after adding <code>side_effect_file</code>, issue a commit message, do a manual push and then checkout <code>master</code> again. That is tedious, and not a sustainable solution.  </p>

<p>Is this achievable? Maybe using <code>git-worktrees</code> (which I don't understand well)?</p>
","4","5705572","",""
"17183169","2499571","2013-06-19 04:58:45","0","58","<git><git-cherry-pick>","Git development cycle","<p>I have an application which is under git revision. I have created a module for this application. Both repositories share the same file structure though the module repository only contains files that are particular to it's function. Both are local. For development purposes I need to test on a remote site. Up until now I have:</p>

<p>1) Cloned the application repository locally
2) Added the module repository as a remote and fetched</p>

<p>My ideal solution would:</p>

<p>1) Push the changes to the local repository (without having to merge)</p>

<p>Right now I am creating a local branch to replicate the module repository and trying rebase it on top of the master branch and am receiving errors about ""cherry-picking"" my commits.</p>

<p>Does anybody have any ideas on how I would achieve this?</p>
","3","2499571","",""
"69221549","2163852","2021-09-17 10:07:09","1","205","<git><git-log><cherry-pick><git-cherry-pick>","Hiding cherry picked commits in git log between 2 branches","<p>Let's start with master branch</p>
<pre><code>m1 -&gt; m2 -&gt; m3
</code></pre>
<p>We create a branch now. Add b1 and b2, so my branch looks like this</p>
<pre><code>m1 -&gt; m2 -&gt; m3 -&gt; b1 -&gt; b2
</code></pre>
<p>Now master gets 2 more added</p>
<pre><code>m1 -&gt; m2 -&gt; m3 -&gt; m4 -&gt; m5
</code></pre>
<p>I cherry pick those 2 in my branch</p>
<pre><code>m1 -&gt; m2 -&gt; m3 -&gt; b1 -&gt; b2 -&gt; m'4 -&gt; m'5
</code></pre>
<p>Master has m6 and m7 added.</p>
<pre><code>m1 -&gt; m2 -&gt; m3 -&gt; m4 -&gt; m5 -&gt; m6 -&gt; m7
</code></pre>
<p>Now, I want to see everything in master that's not in branch. Easy syntax</p>
<pre><code>git log --oneline master ^branch
</code></pre>
<p>I want the above to <strong>only show m6 and m7</strong></p>
<p>Why, because <em>m4</em> already shows up in my branch (except it shows up as <em>m'4</em> because of the cherry pick) and <em>m5</em> already shows up in my branch (except it shows up as <em>m'5</em> because of the cherry pick)</p>
<p>I understand cherry-picks have different hashes, but is there a way for git log to somehow identify that <em>m4</em> == <em>m'4</em> and <em>m5</em> == <em>m'5</em> and  therefore when I ask &quot;what's in master that's not in my branch&quot; , it hides those 2?</p>
<p>None of the --cherry-mark, --cherry, --cherry-pick seem to do what I want.</p>
","4","2163852","",""
"33996308","5210353","2015-11-30 10:24:54","4","136","<git><git-merge><git-diff><cherry-pick>","git cherry-pick configuration","<p>need some help!
Have problems with cherry-pick.
I create *.sh file with the following sequencing (<strong><em>execute in empty folder!</em></strong>):</p>

<pre><code> #!/bin/sh

git init

echo ""init"" &gt;&gt; file.txt &amp;&amp; git add . &amp;&amp; git commit -m ""commit init"" 

git checkout -b develop

for i in $(seq 1 8)
do 
    echo $i &gt;&gt; file.txt &amp;&amp; git add . &amp;&amp; git commit -m ""commit $i"" &amp;&amp; git tag v$i 
done

git checkout master

git checkout -b some_other_branch

git cherry-pick v5
</code></pre>

<p>If you execute it, you find it in conficting state during the cherry-pick.
That fact is ok for me, but if you open file <strong>file.txt</strong> you find there all changes <strong>1,2,3,4,5</strong>, not as I expected only 5.</p>

<pre><code>init
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
1
2
3
4
5
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0ea6510... commit 5
</code></pre>

<p>But I want to see only <strong>5</strong> as a diff.</p>

<pre><code>init
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
5
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0ea6510... commit 5
</code></pre>

<p>How can I manage to do it? Maybe I shall set diff some additional properties?</p>
","10","5210353","0","0"
"35361843","2658266","2016-02-12 11:47:24","10","11519","<git><cherry-pick><git-cherry-pick>","Why does git cherry-pick not continue?","<p>I am trying to cherry-pick changes from two different working brachnes to each other namely I want to cherry-pick the last 5 commits from branch <code>linear</code> to branch <code>diagonal</code>.</p>

<pre><code>git cherry-pick -n -x linear~6..linear
</code></pre>

<p>As expected there are some merging conflicts for the first cherry-picked commit. I figure them out e.g. with <code>git status</code>, resolve them and update the index with <code>git add</code>.
Now I want to continue with the rest but</p>

<pre><code>git cherry-pick --continue`
</code></pre>

<p>leads to (sorry it is translated, english error message may be slightly different):</p>

<pre><code>error: Your local changes will be overwritten by ""cherry-pick"".
Note: Stash your changes by using ""stash"" in order to continue.
fatal: ""cherry-pick"" failed.
</code></pre>

<p>What did I do wrong? <strong>How do I resolve conflicts but still commit a cherry-pick from several commits in only <em>one</em> commit?</strong> This is important for me as several of these commits will be undone by following commits.</p>

<hr>

<p>This might be a duplicate of <a href=""https://stackoverflow.com/questions/25306597/how-to-do-git-cherry-pick-continue-in-sourcetree"">""How to do git cherry-pick --continue in SourceTree?""</a> but I do not see my question answered there.</p>
","0","2658266","0","0"
"51595773","6540193","2018-07-30 14:03:51","0","21","<git><git-branch><git-merge><git-rebase><git-cherry-pick>","How to share a fix between previous releases and current work in the cycle workflow?","<p>I am wondering which route should I take, a cherry-pick or something else?</p>

<p>I have this branching tree:</p>

<pre><code>          ReleaseX
       ^
      /
Master --&gt; ReleaseY
   |
   V
WorkInProgress
   |        |        
   V        V
FeatureX  FeatureY    .. etc
</code></pre>

<p>So <code>WorkInProgress</code> branches off of <code>Master</code>, and when <code>WorkInProgress</code> is ""done"", I do ""Pull Request"" from it to <code>Master</code>, and then I branch off of <code>Master</code> to a new Branch and call it <code>ReleaseX</code></p>

<p>This allows me to support releases and do hot-fixes on any Release branch separately.</p>

<p>I have two cases for my question here:</p>

<ul>
<li>Do a hotfix on <code>ReleaseX</code> and then apply it on <code>ReleaseY</code></li>
<li>Do a hotfix for <code>ReleaseX</code>, <code>ReleaseY</code> and also <code>WorkInProgress</code></li>
</ul>

<p>Is Cherry-Pick the way to go?</p>
","4","6540193","",""
"51738261","3016392","2018-08-08 03:33:55","1","565","<git><github><git-merge><git-cherry-pick>","Can I use git cherry-pick to take changes from a set of specific commits?","<p>I have branch say, <strong>develop</strong> which has following commits :-</p>

<p><strong><code>Commit A -&gt; Commit B -&gt; Commit C -&gt; Commit D -&gt; Commit E (where, E being the latest commit in this branch)</code></strong></p>

<p>Let us suppose that I want to merge the changes from this branch (<strong>develop</strong>) into another branch, <strong>master</strong> from <strong>commit id C to E (i.e. C, D and E)</strong>.
Can I use the cherry-pick method by picking up individual commits starting from C to E or if there is any better way to achieve it in doing merge in one shot.</p>

<p>Please advise, Thanks</p>
","1","3016392","0","0"
"52857995","3165737","2018-10-17 15:03:11","2","278","<git><merge><git-cherry-pick><denodo>","Git promotion/merging approach with 3rd party product","<p>I realize this is a very specific question, and some things might make even the hardened git user shudder, but bear with me…</p>

<p>We're implementing a virtual data warehouse, which generates metadata (SQL-like code). The product (<a href=""https://www.denodo.com/en"" rel=""nofollow noreferrer"">Denodo</a>) can be connected to VCS (e.g. git) to keep the changes under version control.</p>

<p>Internally, there are <em>virtual databases</em> and Denodo also organises its code into folders corresponding to these databases. Thus, in git you'll get something like:</p>

<pre><code>Root
 \- Orders
 \- Customers
 \- Invoices
</code></pre>

<p>Underneath each of those database folders, there will be a several code files that make up the metadata.</p>

<p>Committing and pushing your code within Denodo is always done on <em>database-level</em>, even though the git repo has no such distinction and a commit is global for the repo.</p>

<p>Developers work locally on their individual databases and will periodically commit code changes. All these changes are pulled into the development server. So far so good.</p>

<p>Sooner or later, changes introduced into development need to find their way into QA and production. However, if we were to merge the current status from our development branch (<code>develop</code>) into our QA branch (<code>release</code>), we might get some unwanted (breaking) changes which weren't ready for prime-time yet.</p>

<p>Thus, we need to <em>cherry-pick</em>. And using <code>git log</code>, we can see which commits are yet to be promoted to QA. But if we cherry-pick individual commits from the <code>develop</code> branch into the <code>release</code> branch, they will get a new SHA, and next time we do a <code>git log</code> to perform a comparison, the previously cherry-picked commits will still appear.</p>

<p>Also, remember that the repository is organised by database. That also means that:</p>

<ul>
<li>I have report the commits made in each database-related folder</li>
<li>Decide the last commit for each database to be promoted</li>
<li>For each database: cherry-pick the oldest commit since the last merge up to the one selected in the previous step.</li>
</ul>

<p>This range is not necessarily sequential. You might have something like this (ordered by date).</p>

<pre><code>| To be promoted | Commit | Database  | Change              |
|----------------|--------|-----------|---------------------|
|                | da39a3 | Orders    | Created views       |
|        X       | ee5e6b | Customers | Bug fix             |
|        X       | 4b0d32 | Invoices  | Removed data source |
|                | 053e2d | Invoices  | Updated credentials |
|        X       | 956018 | Orders    | Created data source |
</code></pre>

<p>In this example, we'd cherry-pick commits <code>ee5e6b</code> (customers), <code>4b0d32</code> &amp; <code>053e2d</code> (invoices) and <code>956018</code> (orders). The reason I have to pick <code>053e2d</code> for orders as well, is that the latest metadata may built upon changes checked-in earlier (due to intra-database dependencies). There are few to none inter-database dependencies.</p>

<p><strong>Requirements:</strong></p>

<ul>
<li><p>Each time there's a promotion planned, I have to be able to present an overview of commits which are in development but not in QA.</p></li>
<li><p>I have to be able to select certain changes (up-to) on database level, that can be merged to the <code>release</code> branch for promotion to QA.</p></li>
</ul>

<p><strong>Limitations:</strong></p>

<ul>
<li><p>The commits happen from within Denodo and VCS support isn't all that great (e.g. changing branches is not really supported). This also means that we can't implement <em>feature</em> branches in order to isolate breaking changes or long-term development.</p></li>
<li><p>While we evaluate what to promote on database level, those commits aren't sequential.</p></li>
</ul>

<p>My apologies for the long-winded question, but this isn't exactly a typical scenario and needed a bit more context. I'm also no git specialist (not by a long shot), so please, no pitchforks or torches. Thank you!</p>
","0","3165737","0","0"
"35877840","5603470","2016-03-08 20:55:44","0","77","<git><merge><git-cherry-pick><git-cherry>","How to copy (not move) one git branch with merges to another","<p>I am trying to reorganize GIT repository, which is full of unorganized branches. Now we want to make some structure there (devel, production, features, ...branches) and delete/squash many small changes too. But something is needed to keep yet as it is, as there are people working on it.</p>

<p>So I created the big structure, squashed old things together (nobody longer interested in small typo fixes years old) and basically fixed everything to begin of this year.</p>

<p>But now the problem came - some branches are active, cannot be squashed fully, cannot be deleted/moved (until new schema proves to work for some time) and contains a lot of small merges inside, like this:</p>

<pre><code>  jacks_branch   
    A-B-C-F-G-H-I-J-M-N-O-P ...
            \D-E/    \K-L/
</code></pre>

<p>I would like to COPY this on top of appropriate feature branch, like</p>

<pre><code>  feature_123
    XX-YY
  =&gt;
    XX-YY-C'-F'-G'-H'-I'-J'-M'-N'-O'-P' ...
                \D'-E'/     \K'-L'/
</code></pre>

<p>(the schema is more complicated, this is the problematic part)</p>

<p>I would like to do something like</p>

<pre><code>git checkout feature_123
git cherry-pick C..P
</code></pre>

<p>but it results on conflict on all those merges</p>

<pre><code>error: could not apply E
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>the <code>I</code> commit (merge) solves all those conflicts, but it is not applied and cherry-picking stops</p>

<p>What is the best way out (except having it good organized from the start) ?</p>

<hr>

<p>Edit - added example:</p>

<p>I have</p>

<pre><code>* 3b0a2b4 3.line Adam (HEAD, Adam)
*   c04efb0 Just fixed merge from other computer
|\
| * 3e5f111 2.line Adam_a
* | 897bfc3 2.line Adam_b
|/
* 308a3c5 1.line Adam
* 33f3119 === new year ==== (master)
* 436619b 1000.line
.............
* 0a12c01 4.line
* 41d763d 3.line
* dd1feb0 2.line
* 55aa2c2 1.line
* 84b12e9 Point zero
</code></pre>

<p>Please see, that the branch <code>Adam</code> have conflict in it (3e5f111 and 897bfc3 adds respectively line <code>Adam_a</code> and <code>Adam_b</code> to the same place), which the developer Adam somehow solved in c04efb0 (by writing there something totally different, like <code>Adam_* # it does not matter</code> or so)</p>

<p>and I want to add new branch <code>develop</code> - that is easy squash of <code>master</code></p>

<pre><code>* 75675e1 === new_year === squashed 1.000 lines (HEAD, develop)
* 84b12e9 Point zero
</code></pre>

<p>and now I want to add branch <code>feature_1</code> (over <code>develop</code>) with content from <code>Adam</code> (but not have to manually solving all those already solved conflicts, I want the merge (4444567) be just the same as on branch <code>Adam</code>)</p>

<pre><code>* 555567 3.line Adam (HEAD, feature_1)
*   4444567 Just fixed merge from other computer
|\
| * 3334567 2.line Adam_a
* | 2234567 2.line Adam_b
|/
* 1234567 1.line Adam
* 75675e1 === new_year === squashed 1.000 lines (develop)
* 84b12e9 Point zero
</code></pre>

<p>to get this:</p>

<pre><code>* 555567 3.line Adam (HEAD, feature_1)
*   4444567 Just fixed merge from other computer
|\
| * 3334567 2.line Adam_a
* | 2234567 2.line Adam_b
|/
* 1234567 1.line Adam
* 75675e1 === new_year === squashed 1.000 lines (develop)
| * 3b0a2b4 3.line Adam (Adam)
| *   c04efb0 Just fixed merge from other computer
| |\
| | * 3e5f111 2.line Adam_a (Adam_a)
| * | 897bfc3 2.line Adam
| |/
| * 308a3c5 1.line Adam
| * 33f3119 === new year ==== (master)
| * 436619b 1000.line
| * 0a12c01 4.line
| * 41d763d 3.line
| * dd1feb0 2.line
| * 55aa2c2 1.line
|/
* 84b12e9 Point zero
</code></pre>

<p>(and later I will delete <code>Adam</code> and <code>master</code> )</p>
","5","5603470","",""
"52929383","1903880","2018-10-22 12:27:35","6","3579","<git><git-cherry-pick>","what does git cherry-pick {commit-hash} do?","<p>Given that I have 3 commits in order</p>

<pre><code>c1
+ print(""A"")

c2
+ print(""B"")

c3
+ print(""C"")
</code></pre>

<p>then I checkout a new branch at c1.</p>

<pre><code>git checkout -b br c1
</code></pre>

<p>then I cherry-pick c3.</p>

<pre><code>git cherry-pick c3.
</code></pre>

<p>what I want is the file has</p>

<pre><code>print(""A"")
print(""C"") 
</code></pre>

<p>-- I just pick c3 and c3 just add the line print(""C"")</p>

<p>but the fact is I <strong>got conflicts</strong> and the result is</p>

<pre><code>print(""A"")
++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
++=======
+ print(""B"")
+ print(""C"")
++&gt;&gt;&gt;&gt;&gt;&gt;&gt; f1383aa... C
</code></pre>

<p>my question are:
1. why conflicts?
2. what shall i do if I want print(""A"") and print(""C"")?</p>

<p>I also tried even I </p>

<pre><code>git diff C^1 .. C &gt; 1.patch
git apply 1.patch
</code></pre>

<p>I got </p>

<pre><code>zhifan@zhifandeMacBook-Pro ~/g/demo&gt; git apply 1.patch
error: patch failed: 1.py:1
error: 1.py: patch does not apply
</code></pre>
","0","1903880","0","0"
"35952540","1869935","2016-03-12 01:11:56","0","956","<windows><git><vim><vi><git-cherry-pick>","How do I apply changes on this editor?","<p>While using GIT on the console and cherry picking this editor appeared. And I don't know how to apply/send the changes and move on</p>

<p><a href=""https://i.stack.imgur.com/v2z4V.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/v2z4V.png"" alt=""Git screen""></a></p>
","4","1869935","",""
"70943714","588195","2022-02-01 16:08:21","2","42","<git><cherry-pick>","How do I find other commits that touch the same code as a given commit?","<p>I'm looking to cherry-pick some code.  The code was squashed-on-merge, so I know it's just that one commit to get the feature or bugfix that I desire.</p>
<p>However, I'm worried that this commit may introduce its own bugs.  Presumably, those bugs were spotted and fixed on the main branch.  So I'd like to see a list of future commits in the same branch that touch the same code, to find bugfixes to the main commit.  How do I do that?</p>
<p><a href=""https://i.stack.imgur.com/b9K7Z.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/b9K7Z.png"" alt=""Quick doodle of commits/branches cherry pick desirted"" /></a></p>
","5","588195","",""
"36011966","3074280","2016-03-15 12:55:30","11","7688","<git><git-cherry-pick>","Git cherry pick a commit and place it below","<p>From what I know, by default the <code>cherry-pick</code> command takes a commit and places it on top of the current branch.
Is it possible to <code>cherry-pick</code> a commit in Git and place it below the current commit? </p>
","0","3074280","0","0"
"36012901","353652","2016-03-15 13:36:52","3","175","<git><version-control><git-rebase><git-cherry-pick>","Stitch two independent branch histories together","<p>I have two independent branches in my Git repository:</p>

<pre><code>A---B---C branch ""old""
X---Y---Z branch ""master""
</code></pre>

<p>I want to generate the following history:</p>

<pre><code>A---B---C---X---Y---Z
</code></pre>

<p>I tried this with the following rebase command (current branch is ""master""):</p>

<pre><code>git rebase --strategy=recursive --strategy-option=theirs old master
</code></pre>

<p>This fails with:</p>

<pre><code>First, rewinding head to replay your work on top of it...
fatal: Could not parse object 'fb56e6e20ea4a605503732df1f5a0a407808dffa^'
</code></pre>

<p><code>fb56e6</code> is the first commit of the ""old"" branch.</p>

<p>As an alternative I used the cherry pick command (current branch is ""master""):</p>

<pre><code>git rev-list --reverse old | git cherry-pick --stdin --keep-redundant-commits -X theirs
</code></pre>

<p>This works fine, but all commits get a new ""committer"". Is there a way to tell cherry pick that it should not set the committer? If not, is there a way to achieve what I want with rebase? </p>
","3","353652","0","0"
"70990199","600360","2022-02-04 17:05:26","0","93","<git><git-merge><git-cherry-pick>","git cherry-pick - option to fail if resulting diff is different?","<p>I have a situation where I'd like <code>git cherry-pick</code> to not &quot;quietly return 0 when some of the source commit's diffs are already present in the destination&quot;. Yes, it fails if the resulting commit is empty, but I don't see the option to fail if the resulting commit is not-empty-but-not-the-same-diff-as-the-original. I do not see an option to <code>cherry-pick</code> to do this, and a quick look at <code>git merge</code> which I assume provides the underlying functionality for it, also doesn't <em>seem</em> to provide this, though I'm less sure. Is this possible?</p>
<hr />
<p>Extra notes: yes, I can perform a diff between <code>git show &lt;sourcecommit&gt;</code> and <code>git show &lt;destcommit&gt;</code>. I do do that, in fact. But this can give a false failure if the cherry-pick picked up a change in a renamed file. I'd alternately be interested in a solution to this problem.</p>
","3","600360","",""
"71005100","17238035","2022-02-06 07:38:53","1","483","<git><commit><cherry-pick>","Git cherry picking and commits","<p>I'm trying to migrate <strong>parts</strong> of a feature branch into the main application. The feature branch was part of a prototype that had diverged from master a while back.</p>
<p>Feature --&gt; A --&gt; B --&gt; C --&gt; D ---&gt; E</p>
<p>Master --&gt; many changes on prototype --&gt; feature</p>
<p>e.g. <strong>I'm after C, D, E</strong>. I'm having a problem where there's were many commits of a file that requires many conflict resolutions. E.g. commits C, D, E are all for a file (let's call it file A). After reading the Atlassian page on git commits:</p>
<blockquote>
<p>&quot;Whereas SVN tracks differences of a file, Git’s version control model
is based on snapshots. For example, a SVN commit consists of a diff
compared to the original file added to the repository. Git, on the
other hand, records the entire contents of each file in every commit&quot;</p>
</blockquote>
<p>It seems that I can pull the last commit i.e. the commit E and receive all changes to file A? Without git cherrypicking C and D and having to fix merge conflicts three times?</p>
<p>The only down side I can see from this is if there were multiple file changes in the earlier commits e.g. Commit D had File A and File B but File B wasn't committed again in D or E. Then I could be missing File B.</p>
<p>Is my understanding correct? I'm am trying to complete this merge in a more efficient way.</p>
<p>Cheers</p>
","0","17238035","",""
"36063276","4216492","2016-03-17 14:20:21","3","2485","<git><github><version-control><git-cherry-pick><git-cherry>","Cherry-picked commits have different hashes","<p>Say I do <code>git log branch-A..branch-B</code>, I get a list of commits that are in <code>branch-B</code> but not in <code>branch-A</code>. I can also get a list of commits in <code>branch-A</code> but not in <code>branch-B</code> by reversing the order.</p>

<p>Almost every commit into <code>branch-A</code> is cherry-picked into <code>branch-B</code>, however I noticed that <code>git log</code> shows commits that have been cherry-picked. In particular I notice that the commit hash of the cherry-picked commit in <code>branch-B</code> is different from the one that is in <code>branch-A</code>. Does someone know why this could happen? If so how to perform the diff so that it does not capture these false positives?</p>
","1","4216492","0","0"
"71088601","10885511","2022-02-12 02:52:40","0","906","<git><cherry-pick>","git cherry-pick a commit, the commit updated later, how to get latest","<p>I cherry-pick a commit from another person's branch. Later the user updated his commit(maybe by squash), so the commit SHA changed. How do I cherry-pick to get latest commit?</p>
","2","10885511","",""
"71150576","6763212","2022-02-16 23:27:25","0","456","<git><git-branch><branching-and-merging><git-cherry-pick>","git cherry-pick all missing commits between two branches from the same master","<p>I have the following situation:</p>
<p>two branches were created from master at different times</p>
<pre><code>    T0                T1
----+-----------------+------&gt; master
    |                 |
    |                 |
    +---- BranchA     +---- BranchB
</code></pre>
<p>Development occurred on BranchA after time T0</p>
<p>Some, but not all of those commits were merged in master after time T0, but before time T1</p>
<p>I would like to now cherry-pick all the commits in BranchA that do not exist in BranchB into BranchB</p>
","6","6763212","",""
"53180837","80002","2018-11-06 22:10:50","1","53","<git><migration><tfvc><cherry-pick><git-cherry-pick>","How can I cherry pick from a TFVC repo to Git repo?","<p>We have just migrated from TFVC to Git and immediately we have a problem - how to cherry pick TFVC commits to Git? </p>

<p><strong>Given</strong></p>

<ul>
<li>TFVC branch <code>$/Alice</code></li>
<li>TFVC branch <code>$/Bob</code></li>
<li>Git repo with <code>$/Alice</code> migrated as the <code>alice</code> branch and <code>$/Bob</code> - as the <code>bob</code> branch.</li>
<li>The TFVC history was not migrated, so the entire TFVC history of '$/Alice' is just one Git commit. The same is true for <code>$\Bob</code>.</li>
</ul>

<p><strong>Problem</strong></p>

<p>Now we discover a TFVC commit in <code>$/Alice</code> that was not merged to <code>$/Bob</code> before the migration. Now after the migration we realize we need to have it in the <code>bob</code> branch. Major bummer.</p>

<p>I am talking about a big change - many files. Hence diffing the files manually and copying over the changes is not very feasible. I need to automate the process as much as possible.</p>

<p><strong>What I did so far</strong></p>

<p>I figured I should create a patch for the TFVC changeset in question. So, here is the code (assuming I need to cherry pick commit 123):</p>

<pre><code>$files = (tf changeset /noprompt 123 | sls '\$/') -replace '^[^$]+',''
$files |% { tf diff /version:C122~C123 /format:unified $_ } &gt;&gt; 123.diff
</code></pre>

<p>(I do it file by file, because it is much faster than running <code>tf diff</code> with <code>/r</code> flag) </p>

<p>Anyway, I get a patch file like this:</p>

<pre><code>File: BackgroundJobTests\BackgroundJobTests.csproj
===================================================================
--- Server: BackgroundJobTests.csproj;115493
+++ Server: BackgroundJobTests.csproj;389742
@@ -1,5 +1,6 @@
 &lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
-&lt;Project ToolsVersion=""4.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003""&gt;
+&lt;Project ToolsVersion=""14.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003""&gt;
+  &lt;Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" /&gt;
   &lt;PropertyGroup&gt;
     &lt;Configuration Condition="" '$(Configuration)' == '' ""&gt;Debug&lt;/Configuration&gt;
     &lt;Platform Condition="" '$(Platform)' == '' ""&gt;AnyCPU&lt;/Platform&gt;
===================================================================
File: BI\a8i\a8i.csproj
===================================================================
--- Server: a8i.csproj;342293
+++ Server: a8i.csproj;389742
@@ -1,5 +1,6 @@
 &lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
-&lt;Project DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" ToolsVersion=""4.0""&gt;
+&lt;Project ToolsVersion=""14.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003""&gt;
+  &lt;Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" /&gt;
...
</code></pre>

<p>A typical Git stash patch looks a bit differently:</p>

<pre><code>diff --git a/Yogi.txt b/Yogi.txt
index 056fd9e..1f73d44 100644
--- a/Yogi.txt
+++ b/Yogi.txt
@@ -1 +1 @@
-yaba daba do
+yaba daba doo
diff --git a/hello.txt b/hello.txt
index ce01362..980a0d5 100644
--- a/hello.txt
+++ b/hello.txt
@@ -1 +1 @@
-hello
+Hello World!
</code></pre>

<p>And here I feel I need some guidance. Maybe I am doing it all wrong and there is an off-the-shelf solution for my pain. Or maybe I am in the right direction and all I need is a way to ""fool"" Git into accepting my patch as a stash patch. But devil is in the details, and I am lacking them.</p>
","0","80002","",""
"71180092","21009","2022-02-18 21:32:52","0","136","<git><merge><removing-whitespace><cherry-pick>","git cherry-pick/merge without whitespace changes (but without conflicts)","<p>I'm trying to do a simple thing:</p>
<pre><code>git cherry-pick --no-commit &lt;commit with a lot of useless whitespace changes&gt; -Xignore-all-space
</code></pre>
<p>Perhaps I'm overlooking something obvious but I can't force git into ignoring any whitespace change from the given commit (mainly trimmed trailing spaces). My understanding is that it is because &quot;-Xignore-all-space&quot; works only for conflict resolution, not like a merge option.</p>
<p>So what works then? I can't be the first person with this issue. git is 2.35.1.</p>
","2","21009","",""
"53210565","4451732","2018-11-08 15:09:49","1","78","<git><version-control><cherry-pick><git-cherry-pick><commit-message>","Cherry-pick with customized old SHA-1 line automatically","<p>If I cherry-pick original commit <code>deadbeef</code> with <a href=""https://git-scm.com/docs/git-cherry-pick/#git-cherry-pick--x"" rel=""nofollow noreferrer""><code>-x</code></a>, Git would append a line like</p>

<pre><code>(cherry picked from commit deadbeef)
</code></pre>

<p>Is there any way to customize this message? Like I prefer</p>

<pre><code>Backported from: deadbeef
</code></pre>

<p>Maybe some custom Git alias?</p>
","2","4451732","",""
"53233783","10625548","2018-11-09 21:59:13","2","204","<git><github><rebase><git-cherry-pick>","Pull request on a branch which got cherry picked commits merged","<p>I initiated a feature development in BranchA, but I included some 'clean up' and 'tweaking' commits on it.  </p>

<p>In the middle of the process 'tweaking' commits needed to be merged into the master (by doing a pull request) so I created a BranchB with some new commits and cherry picked some of the commits done in BranchA.<br>
BranchB was merged with no conflicts. </p>

<p>My question is: How to handle the BranchA pull request?<br>
Is it safe to submit BranchA even if some of its commits were already merged? If not, how to go through this situation?</p>

<p><a href=""https://i.stack.imgur.com/4f8i1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4f8i1.png"" alt=""Situation""></a></p>
","0","10625548","0","0"
"53258473","3523343","2018-11-12 08:43:12","1","399","<git><cherry-pick><git-cherry-pick>","Efficient way to cherry pick commits in git","<p>We are following a process where we merge all the feature branches that needs to be released in a Release branch and merge it in master. Recently, we had some issues and we had to revert a release. After reverting, all feature in the release branch got reverted and since we want to release only specific features next, we need to cherry-pick commits. It was very difficult for us to cherry-pick the commit for every feature, since there were lots of commits and merge commits to consider. This situation is rare, but it had taken lots of effort and time from the development team to ensure every single commit were picked.</p>

<p>Is there an efficient way to reduce the time to cherry-pick the commits and also make sure all the commits related to feature are picked correctly?</p>
","2","3523343","",""
"53266792","80002","2018-11-12 16:57:46","1","97","<git><cherry-pick>","My cherry-pick deletes a single file, which does exist on the target, yet it does not auto complete. Why?","<p>I have a commit that deletes a single file:</p>

<pre><code>C:\xyz\tmp55 [55 ↑1]&gt; git show 17e645494
commit 17e6454949b44911bc42135e8f12c7f169ef835f
Author: Mark Kharitonov &lt;bla-bla-bla&gt;
Date:   Mon Nov 12 11:05:18 2018 -0500

    Some changes on MarkFeature

diff --git a/New Text Document.txt b/New Text Document.txt
deleted file mode 100644
index e69de29bb..000000000
</code></pre>

<p>The file exists on the target:</p>

<pre><code>C:\xyz\tmp55 [55 ↑1]&gt; dir '.\New Text Document.txt' -Name
New Text Document.txt
</code></pre>

<p>Yet the cherry-pick fails to auto complete:</p>

<pre><code>C:\xyz\tmp55 [55 ↑1]&gt; git cherry-pick 17e64549
warning: inexact rename detection was skipped due to too many files.
warning: you may want to set your merge.renamelimit variable to at least 7501 and retry the command.
error: could not apply 17e645494... Some changes on MarkFeature
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
C:\xyz\tmp55 [55 ↑1 +0 ~0 -0 !1 | +0 ~0 -1 !]&gt;
</code></pre>

<p>Why is that?</p>
","6","80002","",""
"36310901","1590751","2016-03-30 13:51:55","1","155","<git><git-cherry-pick>","cherry pick commit commits to a branch that has significantly changed","<p>Lets say while working on feature branch <code>A</code>, someone else merged a large pull request that significantly modifies the structure of the project (splits it into smaller Maven projects) </p>

<p>How can I cherry pick my work over to the master branch that has now changed into a particular folder?</p>
","3","1590751","0","0"
"53393742","1980337","2018-11-20 13:09:53","2","856","<git><github><cherry-pick>","How to cherry-pick selected set of commits?","<p>I want to select particular set of commits to be cherry-picked to a new branch.</p>

<pre><code>main-branch
* commit8
* commit7
* commit6
* commit5
* commit4
* commit3
* commit2
* commit1
</code></pre>

<p>I just want to create a release-branch with selected commits.</p>

<pre><code>release-branch
* commit7
* commit6
* commit4
* commit2
* commit1
</code></pre>

<p>Is it possible to associate a tag for needed commits and write a script to cherry-pick commits with the particular tag?</p>
","1","1980337","",""
"53309840","2145002","2018-11-14 22:43:44","1","63","<git><github><cherry-pick><git-cherry-pick>","Clarification regarding commit pulling terminology : Relationship with git cherry-pick and branches","<p>I am new to git related platforms, currently working primarily with github and gitlab on the side for project purposes. I have a confusion regarding an abstract terminology, it's related to fetching commits(perhaps unmerged or in different branch or from anywhere within a repo). </p>

<p>As far as I understand, we use cherry-picking when there are two branches(refactor,master) in a repository, and we want to pick a particular commit(X) out of one branch(refactor) and get in it another branch (master). (According to numerous sources out in the interweb)</p>

<p>Is it possible to cherry-pick within a same branch?  Is that even why cherry-pick exist? </p>

<p>Someone told me that cherry-pick does not have to do with branches at all, that abstractly ""cherry-pick"" in general stands for just picking any commit from anywhere (same or different branch) </p>

<p>Let me give an example scenario. </p>

<p>Let's say we have a master branch, and some people have sent some pull requests, which are yet to be committed, and someone wants to fetch those commits to test them before they get merged... I know how to fetch that commit, but my question is,  is doing that known as ""cherry-pick""? That cherry-pick does not have to do with branches?  </p>

<p>Thank you for reading. </p>
","2","2145002","0","0"
"71308169","5883177","2022-03-01 11:59:40","0","237","<git><git-cherry-pick>","Is there a way to make 'git cherry-pick -x' only record the most recent 'cherry-picked from' message?","<p>When we use <code>git cherry-pick -x &lt;commit&gt;</code>, it records the source commit in the commit message as follows <code>(cherry picked from commit 5f2662a29efaa91af6b356df2d5d1df69017cac1)</code></p>
<p>I have a bunch of commits which I need to keep migrating from one base branch to the next. If I use cherry-pick -x, it keeps adding the latest source commit to the message.</p>
<p>Suppose I have used cherry-pick -x to migrate the commit twice, my commit message looks like below:</p>
<pre><code>commit fb3bead084edc27267219d9a8e088ac613159f69 (my-new-branch)
Author: ----
Date:   Thu Feb 17 15:29:15 2022 +0530

    Test commit 1

    (cherry picked from commit 5f2662a29efaa91af6b356df2d5d1df69017cac1)
    (cherry picked from commit 11c6ca55b06cbf333fff9a3cfd50c6617adc2e77)
</code></pre>
<p>Is there way make cherry-pick -x overwrite the 'cherry picked from' message if there is already one?
I want to record only the most recent source commit.</p>
","2","5883177","",""
"36399770","417045","2016-04-04 10:07:19","0","77","<git><version-control><merge><cherry-pick>","git cherry picking showing previous revisions code in conflict","<p>When using git cherry pick to merge revisions via commits we encounter the following issue of git showing other peoples code as part of the conflict resolution options.</p>

<p>Let's say we have the following history in the develop branch</p>

<pre><code>A----B----1----2 develop
</code></pre>

<p>We want to merge the commit <strong>revision 1</strong> from develop to the release branch</p>

<pre><code>A----T release
</code></pre>

<p><strong>Revision A for both develop and release branch start</strong></p>

<pre><code>public interface Constants {
    String ConstantA = ""CONSTANT_A"";
}
</code></pre>

<p><strong>Revision B in develop</strong></p>

<pre><code>public interface Constants {
    String ConstantA = ""CONSTANT_A"";
    String ConstantB = ""CONSTANT_B"";
}
</code></pre>

<p><strong>Revision 1 in develop</strong></p>

<pre><code>public interface Constants {
    String ConstantA = ""CONSTANT_A"";
    String ConstantB = ""CONSTANT_B"";
    String Constant1 = ""CONSTANT_1"";
}
</code></pre>

<p><strong>Revision 2 in develop</strong></p>

<pre><code>public interface Constants {
    String ConstantA = ""CONSTANT_A"";
    String ConstantB = ""CONSTANT_B"";
    String Constant1 = ""CONSTANT_1"";
    String Constant2 = ""CONSTANT_2"";
}
</code></pre>

<p><strong>Revision T in release</strong></p>

<pre><code>public interface Constants {
    String ConstantA = ""CONSTANT_A"";
    String ConstantT = ""CONSTANT_T"";
}
</code></pre>

<p>When I switch to the release branch and cherry pick revision 1 I get conflicts as expected.</p>

<p>However the problem is how the conflict is shown, which is as follows</p>

<pre><code>public interface Constants {
    String ConstantA = ""CONSTANT_A"";
&lt;&lt;&lt;&lt;&lt;&lt;&lt; release
    String ConstantT = ""CONSTANT_T"";
=======
    String ConstantB = ""CONSTANT_B"";
    String Constant1 = ""CONSTANT_1"";
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 60dc0f9 Revision 1
}
</code></pre>

<p>The problem is the following line being present</p>

<pre><code>String ConstantB = ""CONSTANT_B"";
</code></pre>

<p>When I go back to my development branch and diff Revision B and Revision 1 I get ONLY the following</p>

<pre><code>String Constant1 = ""CONSTANT_1"";
</code></pre>

<p>Basically I am guessing this is because that Revision B commit is present before Revision A. In a real environment there can be lots more changes before the cherry pick commit that are not in the release branch (Imagine about 40 more constants added), how do I only get the actual diff of my cherry picked commit shown in the conflict. Note that I tried this with <code>rebase --onto</code> but got the same result.</p>

<p><strong>EDIT</strong></p>

<p>The following is the file after cherry picking with the conflict in the diff3 format. <code>git checkout --conflict=diff3 src/Constants.java</code></p>

<pre><code>public interface Constants {
    String ConstantA = ""CONSTANT_A"";
&lt;&lt;&lt;&lt;&lt;&lt;&lt; ours
    String ConstantT = ""CONSTANT_T"";
||||||| base
    String ConstantB = ""CONSTANT_B"";
=======
    String ConstantB = ""CONSTANT_B"";
    String Constant1 = ""CONSTANT_1"";
&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs
}
</code></pre>
","5","417045","0","0"
"17367215","623519","2013-06-28 14:34:54","0","231","<git><cherry-pick><git-cherry-pick>","weird git cherry-pick behaviour","<p>I have a commit on a different branch that simply adds a bunch of files in a new directory.</p>

<p>Let's say the commit has id <code>123456</code> and it adds a directory called <code>foo</code> full of stuff.</p>

<p>Now in my other branch, from a clean working tree, I do <code>git cherry-pick 123456</code>, expecting it to just add the <code>foo</code> directory.</p>

<p>But no! the cherry pick fails and includes loads of other changes to other files(!) giving me unmerged paths.</p>

<p>Surely the commit you're cherry-picking must contain some stuff you didn't know about/expect, then? Well, no, <code>git show --oneline --name-status 123456 | grep -v foo</code> returns nothing. i.e. all there are no changes that happen to any files outside of <code>foo</code>.</p>

<p><strong>What is happening and how can I cherry pick this commit properly?</strong></p>
","4","623519","",""
"69475086","325418","2021-10-07 03:30:08","0","125","<git><github><cherry-pick>","Using Git and Github, how to omit some commit(s) in master?","<p>Let's say,</p>
<ol>
<li>We made commit #100 to master.</li>
<li>We want to make commit #101 in a branch go to master</li>
<li>However, since there is potentially some issue with commit #100, so we want to go to commit #99 and then cherry-pick #101 and make a PR</li>
<li>But we found the PR (Pull Request) <em>does not</em> contain the &quot;reverse&quot; of commit #100.</li>
</ol>
<p>How can it be made to happen?</p>
<p>The exact steps we did:</p>
<pre class=""lang-sh prettyprint-override""><code>git checkout 3f6231        # the commit ID for commit #99
git checkout -b some_new_branch
git cherry-pick 523c62     # the commit ID for commit #101
git push --set-upstream origin some_new_branch
</code></pre>
<p>and created a PR. So now, we expect in the PR to have the changes of commit #101, but reversed the commit #100 (because we didn't cherry-pick it). However, we saw the PR only contain the changes for commit #101, without the reverse of #100.  If we merge it into master, then as expected, we still see the commit #100 changes.  How do we omit commit #100?  (or in real life it could be a series of them, such as #100a, #100b, #100c, and we'd like to skip them all and go to #101 directly).</p>
","7","325418","",""
"37237637","5501675","2016-05-15 11:21:06","9","20982","<git><version-control><merge><cherry-pick>","Git cherry-pick causes merge conflict while merging does not","<p>I am trying to learn how to use git cherry pick, I read the manual pages that <code>git</code> returns by doing <code>git cherry-pick --help</code> but that did not seem to help.  I will try and explain the problem below. I have two branches <code>master</code> and <code>other</code>. </p>

<p><strong>On branch <code>master</code></strong>
The commit history is </p>

<pre><code>0x2 Second commit from master branch
0x1 Initial commit
</code></pre>

<p>And the only file in the repository that I am tracking <code>readme</code> has the following contents</p>

<pre><code>Some text
</code></pre>

<p><strong>On branch <code>other</code></strong>
The commit history is </p>

<pre><code>0x5 CHECKPOINT, going to cherry-pick onto master
0x4 second commit from branch other
0x3 first commit from other branch:
0x2 Second commit from master branch
0x1 Initial commit
</code></pre>

<p>And the contents of the <code>readme</code> file are </p>

<pre><code>Some text.

Adding some text from other branch.  Adding some more text.

Going to cherry-pick this commit.
</code></pre>

<p>The working directory is clean on both branches with no untracked changes. From this point on when I switch to the master branch and merge with <code>git merge other</code> the merge happens gracefully with no merge conflicts.  But when I try <code>git cherry-pick 0x5</code> there is a merge conflict, I get the following output from <code>git</code></p>

<pre><code>error: could not apply 0x5... CHECKPOINT, going to cherry-pick onto master
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>And the <code>readme</code> file has the following contents</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Some text
=======
Some text.

Adding some text from other branch.  Adding some more text.

Going to cherry-pick this commit.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0x5... CHECKPOINT, going to cherry-pick onto master
</code></pre>

<p>Why is there this merge conflict?  I am trying to understand why it occurs.  Shouldn't <code>cherry-pick</code>ing be the same as trying to make all the edits made on the commit that is to be <code>cherry-pick</code>ed yourself and then commiting that change onto the branch (<code>master</code> in this case)?</p>

<p>Also when exactly is there a merge conflict in <code>git</code>?  I seem to get them at weird times.  Is this implementation dependent (for example dependent on the algorithm used to merge)? </p>

<p>Thank you!</p>
","0","5501675","0","0"
"72002192","2009594","2022-04-25 15:42:34","0","75","<git><cherry-pick>","Is there a way to select changes at a patch level in git's cherry-pick?","<p>I would like to be able to select which changes to include in the <code>cherry-pick</code> at a patch-level much like the <code>-p</code> option when adding changes to commit?</p>
","2","2009594","",""
"34032352","576050","2015-12-01 23:39:27","1","5515","<git><github><version-control><cherry-pick>","Unable to pick specific commit using cherry-pick command","<p><p>We have recently started using GIT for our corporate projects, one of the team member created a branch called ABC in his local Forked copy and sent me a PR in my corporate accounts ABC branch</p><p>Now as the PR contains multiple commits i just want to pick a specific commit from corporate REPO's ABC branch and merge it with development branch, so being in development branch i called below command:</p>

<pre><code>git cherry-pick 504f43aea6ad7b733434ef4510f3baaf3fc10d09
</code></pre>

<p>but this throws error <code>fatal: bad object 504f43aea6ad7b733434ef4510f3baaf3fc10d09</code>
<p>Could anyone tell me what i did wrong, long back i had tried cherry-pick and it didn't worked either that time it came out that i didn't had the commit in my remote REPO and hence it was not recognizing the commit hash, but now i have the commit in remote REPO but still same issue.</p>
","4","576050","",""
"37269050","4796606","2016-05-17 06:51:48","4","2321","<git><clone><commit><cherry-pick>","Is it possible to cherry-pick a commit from another repository without cloning the entire repository?","<p>I have very limited bandwidth,so I was wondering if it whether it would be possible to get a commit from another repository without actually cloning it. 
The two repositories have the same file structure but they do not share history at all. Both of them are independent of each other but I still want to cherry-pick a commit from one of them to other.
Is this possible ?</p>
","7","4796606","0","0"
"71441802","273527","2022-03-11 16:40:13","0","151","<git><azure-devops><merge><repository><cherry-pick>","What's the best way to selectively share changes between two Git repositories?","<p>We have a Git repository (in Azure DevOps) containing code for a library which is going to be refactored heavily in certain areas. However, some areas of the code will remain (almost) unchanged. As part of the changes, the library will get a new name. This is why we plan to create a new repository for these changes, so that the refactored library is clearly separated from the original library.</p>
<p>The refactoring will take some time, and during that time, we'll be forced to maintain the old version of the library and provide bugfixes and possibly new features. Since parts of the library will remain unchanged, we would like to be able to merge those bugfixes from the old repository to the new repository (and probably vice versa). However, we do not want to merge ALL changes, but only specific ones - kind of cherry-picks between two repositories. I know that this may not be possible forever since the two repositories will diverge more and more.</p>
<p>What's the best solution for such a scenario?</p>
<p>I have thought of the following solutions:</p>
<ol>
<li>Create a new repository, clone the old repository, change the remote of that clone to the new repository, and push everything to the new repository. Afterwards do the renaming and refactoring in the new repo, and do the bugfixing in the old repo. If a bugfix should be merged to the new repo, I would switch my working copy to the new repo, and cherry-pick the revision with the bugfix from the old repo by specifying the old repo as the remote.</li>
<li>Create a fork of the old repo, perform the renaming and refactoring in the fork, and do the bugfixing in the original repo. A bugfix from the original repo could be merged to the fork using a pull request, and also vice versa if required. I am unsure if this approach would support the selective cherry-picking. I fear that I would only be able to merge ALL changes from original to fork which is not what I want.</li>
</ol>
<p>As you can see, my experience with Git is limited and I would need some advice. Is one of the proposed options a viable solution, or is there a better way to approach this?</p>
","3","273527","",""
"69488500","7933257","2021-10-07 22:25:15","0","602","<visual-studio-code><azure-devops><azure-data-factory><git-cherry-pick>","Cherry pick or selective merge from dev branch to prod","<p>I have deployed Azure Data Factory pipelines and associated components to adf_publish branch in Azure Devops. Now I want to deploy those changes to the Prod branch, but the problem is that the Prod branch and adf_publish are not in sync. When I try to create a pull request I get 100 files and 100+ commits will be merged message which is not what I want. I want to merge only 1 Data Factory pipeline which was newly created and associated datasets (8) and Linked Service(1).
I tried the cherry pick method from the adf_publish branch but it still takes everything that is missing from Prod Branch. Is there an easy way to accomplish this either through the Azure Devops UI or through Visual Studio Code.</p>
<p>As per the screenshot below I see + next to multiple pipelines which indicates that they are not present in Prod branch, I just want to merge 1 pipeline and leave all the rest in adf_publish.</p>
<p><a href=""https://i.stack.imgur.com/b1VZI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/b1VZI.png"" alt=""enter image description here"" /></a></p>
<p>Any help would be highly appreciated. I have tried multiple things but nothing is working. Thanks</p>
","0","7933257","",""
"38993302","298622","2016-08-17 09:52:00","0","130","<git-cherry-pick>","Why git cherry-pick leaves uncommitted changes exits with non-zero","<p>Very often, my git appears like this:</p>

<pre><code> A &lt;- B &lt;- C &lt;- D &lt;- E &lt;- HEAD
</code></pre>

<p>It happens that I need to create a new branch based on <code>B</code> and only the changes in <code>D</code>. Here are the commands I do:</p>

<pre><code>git checkout B -q -f -b release
git cherry-pick D
</code></pre>

<p>The cherry pick commands exits with code 53 and leaves all the changes in <code>D</code> uncommitted in branch <code>release</code>.</p>

<p>More info: this is under Windows. The commands above are part of my release process which I run under PowerShell. When I do the same procedure in Git Bash, cherry pick works just fine. Is this (yet another) EOL issue? I tried adding <code>-Xignore-all-space</code> but error remains.</p>

<p>Context: as part of my release process, I pick a cut-off commit (e.g. <code>B</code>), modify version files to include build time, release author, etc. Just before I can commit my versioning changes, someone else introduces commit <code>C</code>. When I commit my versioning changes, it becomes <code>D</code>. My release process above is to ensure that binaries are compiled with <code>A &lt;- B &lt;- D</code>. How can I make that happen smoothly?</p>
","0","298622","",""
"72040736","7769052","2022-04-28 08:53:13","0","21","<git><git-cherry-pick>","git cherry-pick failed on a merge commit","<p>I tried to cherry-pick using</p>
<pre><code>git cherry-pick a00f63
</code></pre>
<p>but got a message</p>
<pre><code>error: commit a00f63... is a merge but no -m option was given.
fatal: cherry-pick failed
</code></pre>
<p><code>a00f63</code> is indeed a merge commit. After trying</p>
<pre><code>git cherry-pick -m a00f63
</code></pre>
<p>I got</p>
<pre><code>error: option `mainline' expects a number greater than zero
</code></pre>
<p>What should I do?</p>
","2","7769052","",""
"37448651","2350083","2016-05-25 22:24:26","2","837","<git><android-studio><intellij-idea><cherry-pick>","Incorrect Git Author Date on Commits Made via Android Studio","<p>This issue really threw me off and my searches didn't turn up any helpful info so I'm posting this to help any other poor soul who runs into this.</p>

<p>I was working on an Android repository today and made a number of commits and merges and all the regular stuff.</p>

<p>I noticed at one point that a commit listed under a ticket on our git server has a date of 8 days ago. The commit was not eight days old, I had created it from scratch and pushed it to the ticket less than 15 minutes before.</p>

<p><a href=""https://i.stack.imgur.com/niaKy.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/niaKy.png"" alt=""Git server showing date""></a></p>

<p>I thought, this is strange and wondered if the server time was wrong. Having confirmed it wasn't, I looked at the commits more closely. The dates all looked fine in SourceTree (a git gui I use). Knowing that a commit can have a separately set authoring date, I used <code>git log --pretty=fuller</code> to view and compare the dates.</p>

<pre><code>
C:\Users\Jonathan\StudioProjects\BTVehicle>git log --pretty=fuller -n 2

commit 29ee84b938c016ff747d088c9c8d038f5ed99e72
Merge: f462490 7a76ac3
Author:     Jonathan 
AuthorDate: Wed May 25 16:19:18 2016 -0500
Commit:     Jonathan 
CommitDate: Wed May 25 16:19:18 2016 -0500

    Merged #416 ""CursorIndexOutOfBoundsException: Index 1 requested, with a size of 1""

commit 7a76ac3903380d7e1bde693947da84cab328cc7a
Author:     Jonathan 
AuthorDate: Tue May 17 12:55:07 2016 -0500
Commit:     Jonathan 
CommitDate: Wed May 25 16:19:14 2016 -0500

    Added what could be a fix for the CursorIndexOutOfBoundsException as described in ticket #416.
</code></pre>

<p>The merge commit above was done on my server. The times are accurate. The other was done on my local machine (via Android Studio's source control integration) and has an incorrect authorship time.</p>

<p>How did this happen? How can I fix future dates? My findings are below.</p>
","0","2350083","",""
"23310309","1309841","2014-04-26 11:37:36","2","1276","<git><git-rebase><git-cherry-pick>","git rebase vs git cherry-pick of detached branch","<p>I have two branches:  </p>

<ol>
<li>master</li>
<li>tmp</li>
</ol>

<p><code>tmp</code> branch is detached<br>
I need to put <code>tmp</code> branch on top of <code>master</code> with resolving conflicts in priority of <code>tmp</code></p>

<p>When I do </p>

<pre><code>git checkout tmp
git rebase --strategy=recursive -X theirs master
</code></pre>

<p>I got error
First, rewinding head to replay your work on top of it...  </p>

<pre><code>fatal: Could not parse object '0a722ac51071ecb4d00b1ef45384aac227b942a0^'  
Unknown exit code (128) from command: git-merge-recursive 0a722ac51071ecb4d00b1ef45384aac227b942a0^ -- HEAD 0a722ac51071ecb4d00b1ef45384aac227b942a0  
</code></pre>

<p>When I do </p>

<pre><code>git checkout tmp
git cherry-pick --strategy=recursive -X theirs 0a722ac..384144a 
</code></pre>

<p>Works fine</p>

<p>What the difference or how can I do the same with rebase ?</p>
","0","1309841","0","0"
"37483375","3178797","2016-05-27 12:17:30","11","7684","<git><cherry-pick><git-cherry-pick>","How to cherry-pick changes from one file to another file?","<p>I have two files called <code>vvn.c</code> and <code>aqu.c</code> 
I did changes to <code>vvn.c</code> and I have that commit in my git.
How to cherry-pick the same changes to <code>aqu.c</code>
The only difference is the API's.</p>

<p><code>vvn.c</code> contains API's as <code>vvn_function_names()</code></p>

<p>whereas <code>aqu.c</code> contains API's as <code>unions_function_names()</code></p>

<p>I don't know how to do that.
I know about cherry-picking into the same file.
Is there any way to do that?</p>
","1","3178797","0","0"
"53857142","6595121","2018-12-19 18:21:48","-1","1413","<git><tags><cherry-pick>","Git: Using cherry-pick to copy tags from one branch to another","<p>I have a MASTER branch with several commits and tags. I would like to copy only the tags from MASTER into a RELEASE branch (and no other commits).  </p>

<p>I first created an empty MASTER branch, and committed it with message only. Then I created an empty RELEASE branch.  I added several commits to MASTER with the following contents: </p>

<ul>
<li>C1: file1  </li>
<li>C2: file1, file2</li>
<li>C3: file1, file2, file3 </li>
</ul>

<p>In MASTER, I created a tag T1 with C2 (which contains file1 and file2)  Now, I would like to copy tag T1 to RELEASE branch. It seemed like I need to use cherry-pick to do this.  </p>

<p>I first note the SHA-ID of tag T1 in MASTER. Then I do:  </p>

<ul>
<li>git checkout RELEASE</li>
<li>git cherry-pick [SHA-ID of T1]</li>
</ul>

<p>Success, but RELEASE branch now only shows file2. Shouldn't it be showing the contents of tag T1, i.e, both file1 and file2?  </p>

<p>Again, my goal is only to have tags from MASTER (and no other commits) showing in RELEASE. Is this possible?  Thanks in advance.</p>
","1","6595121","",""
"53857156","1495873","2018-12-19 18:22:45","1","59","<git><git-merge><git-rebase><git-cherry-pick>","git merge/rebase/cherrypick skipping commits on master","<p>I have the following situation:</p>

<pre><code>   _____________G ..myBranch
  /
 /
S---B---C1---C2---C3---C..---C230 .. master

S=working version
B=bad version of task
G=good version of task
C=commit after B
</code></pre>

<p>and I would like to commit and merge the master into myBranch without using B and then merge myBranch into master with the new commits. Is something like that possible with merge/rebase/cherrypicks?</p>

<p>Thanks!</p>
","0","1495873","",""
"37552643","189186","2016-05-31 18:01:07","1","411","<git><git-cherry-pick><git-bare>","git: cherry-pick in bare repo","<p>My server-side bare git repo needs to periodically cherry-pick commits from a special branch onto master (executed from a hook).</p>

<p>Is there any way to avoid a checkout and do this directly in the bare repo?</p>

<p>Edit: Since the cherry-picking procedure is non-interactive, it is okay to completely error out if the cherry-pick isn't trivial to apply.</p>
","3","189186","",""
"35437253","637811","2016-02-16 16:01:28","83","112849","<git><merge><git-cherry-pick>","How to git cherrypick all changes introduced in specific branch","<p><strong>Background info:</strong> </p>

<p>Due to restrictions in workflow with out existing systems, we need to set up a somewhat unorthodox git process. </p>

<pre><code>(patch)    A-B---F
             |   |
(hotfix)     C-D-E
                 |
(dev)      1-2-3-G
</code></pre>

<p>On the patch branch, there are some commits. The files here are similar but not identical to the ones on dev (sync scripts switch around the order of settings in many of the files, making them appear changed while they are functionally the same). </p>

<p>A fix is needed on this branch so a hotfix branch is created and worked on. This branch is then merged back into patch, so far, so good.</p>

<p>This same fix needs to be deployed to the dev branch so it stays relatively in sync with patch, but trying to merge the hotfix branch leads to git trying to merge all the unrelated and 'unchanged' files from A and B as well, rather than only C,D and E.</p>

<p><strong>Question:</strong></p>

<p>It seems that cherry-pick does what we want in terms of only getting changes from selected commits, but I would really like a way to cherry-pick all commits in a given branch at once, without having to look up the commit ids every time.  </p>
","3","637811","0","0"
"37642262","4015124","2016-06-05 13:07:20","0","296","<git><merge><branch><cherry-pick>","git strategy to merge different branches of same origin","<p>I need understand how to do following in GIT.
I have repository for one base project.
I created a branch (kind of master) for new project.
In the course of time, both the base project and new project has changed.</p>

<p>Now I need to merge specific changes or features from base project in new project and viceversa.</p>

<p>How can I do this with Git?</p>

<p>Here is my view on this scenario. 
Since both the base_project and new_project have parallel development going on, so a simple ff merge will either add additional change or overwrite existing one. So I will prefer to do cherry pick the stable versions from the source branch to target branch.</p>
","3","4015124","",""
"51870015","5698740","2018-08-16 05:14:39","1","954","<git><cherry-pick>","Git cherry-pick failed to pick the right changes","<p><strong>Note</strong>: It was a mistake from my side. I cherry-picked the parent hash. Please see the <code>update</code> section.<br/>
Original Question:<br/>
I have a file <code>vmu_hw_test</code> in a branch ""test_imu"" which has a change similar to seen below</p>

<pre><code>if( g_imu_spi.readFromFifo() == 0)
{
    //Find local maxima and minima event
    g_imu_spi.compute_event();
    //compute the euler
    g_imu_spi.compute_euler();
    //From the average values compute the max
    //g_imu_spi.compute_Max();
    g_imu_spi.compute_Max(buffer);
}
</code></pre>

<p>The <code>if</code> statement and the removal of comment were introduced on this commit.<br/> 
And <code>master</code> branch had</p>

<pre><code>//Find local maxima and minima event
g_imu_spi.compute_event();
//compute the euler
g_imu_spi.compute_euler();
//From the average values compute the max
g_imu_spi.compute_Max(buffer);
</code></pre>

<p><strong>Question</strong><br/>
1. As I've read <code>cherry-pick</code> takes a single commit change and applies it. Is there a problem if the branches are different (in commit history) <br/>
2. A Microsoft <a href=""https://blogs.msdn.microsoft.com/oldnewthing/20180312-00/?p=98215"" rel=""nofollow noreferrer"">document</a> says not to cherry pick. Is it a bad practice to cherry pick?<br/>
3. Why would have cherry pick failed? (<strong>Update</strong>: It did not.)</p>

<p><strong>Git Diff</strong><br/>
For the latest commit on <code>test_imu.c</code></p>

<pre><code>diff --git a/Src/vmu_hw_test.c b/Src/vmu_hw_test.c
index 14b0a67..1954d64 100644
--- a/Src/vmu_hw_test.c
+++ b/Src/vmu_hw_test.c
@@ -2694,14 +2694,16 @@ unsigned short  IMU_sendData(void)
                }
            }
    //Regular run
-                               g_imu_spi.readFromFifo();
-                               //Find local maxima and minima event
-                               g_imu_spi.compute_event();
-                               //compute the euler
-                               g_imu_spi.compute_euler();
-                               //From the average values compute the max
-//                             g_imu_spi.compute_Max();
-                               g_imu_spi.compute_Max(buffer);
+                               if( g_imu_spi.readFromFifo() == 0)
+                               {
+                                   //Find local maxima and minima event
+                                   g_imu_spi.compute_event();
+                                   //compute the euler
+                                   g_imu_spi.compute_euler();
+                                   //From the average values compute the max
+                                   g_imu_spi.compute_Max(buffer);
+                               }
+
</code></pre>

<p><strong>Update</strong><br/>Git cherry-pick did not fail. I tried looking into the diffs as suggested by <code>torek</code> and found that the diffs do state that a cherry pick should have included the <code>if</code> statement. <br/>
Here's the <code>git diff --find-renames &lt;hash-of-B&gt; &lt;hash-of-C&gt;</code> (please refer to torek's answer)</p>

<pre><code>unsigned short  IMU_sendData(void)    
{
@@ -2703,7 +2731,6 @@ unsigned short  IMU_sendData(void)
                                //compute the euler
                                g_imu_spi.compute_euler();
                                //From the average values compute the max
-//                             g_imu_spi.compute_Max();
                                g_imu_spi.compute_Max(buffer);

                    //Low pass filter for each axis
@@ -2741,28 +2768,8 @@ unsigned short  IMU_sendData(void)
        }
    }
</code></pre>

<p>And the <code>git diff --find-renames &lt;hash-of-B&gt; &lt;hash-of-A&gt;</code> is already provided in the <code>Git Diff</code> section. From this we can see that the <code>if</code> statement should be cherry picked.</p>

<p>What went wrong was that I cherry picked the wrong hash (I picked the parent hash). </p>
","9","5698740","",""
"37713325","5586607","2016-06-08 21:34:20","0","653","<git><rebase><cherry-pick>","GIT Rebase in a new branch","<p>I want to do a pull in GitHub and want to perform a GIT Rebase to clean up intermediate commits before issuing a pull request. I want to know if the following procedure is proper.</p>

<p>While I'm pretty sure no one is building on top of my branch, for future references, I want to avoid rewriting history (avoid pulling the rug out from under others). I'm thinking of a cherry-pick procedure like the following (assuming my feature branch is called ""feature_branch"").
Note that my intention for the original feature_branch is to note that it is now abandoned.</p>

<ol>
<li>Create a new branch from the head of master, something like ""feature_pull_rebase""</li>
<li>Replay all commits (cherry-pick) from the ""feature_branch"" onto the ""feature_pull_rebase""</li>
<li>Make pull request from the ""feature_pull_request"" onto master.</li>
</ol>

<p>Is this a proper way to handle this? Or is there some danger with this?</p>

<p>EDIT: The master branch is not under my control, it's a repository I want to contribute to.</p>
","7","5586607","",""
"69895304","615985","2021-11-09 08:58:50","7","2189","<git><cherry-pick><git-cherry-pick>","Git cherry-pick - How to display changes without actually doing anything","<p>Is there any way to display changes that would be applied by the 'git cherry-pick ' before actually doing anything?</p>
<p>I would like to see a 'git diff' type of list of changes that would be done by the command without actually doing the changes or modifying anything.</p>
","3","615985","",""
"34156632","1541115","2015-12-08 13:03:10","2","302","<git><cherry-pick><git-cherry-pick>","Undo local changes caused by failed git cherry-pick -n <hash>","<p>I'm trying to get several commits from my dev branch into my uat branch using ""git cherry-pick -n hash"" and then use just one git commit/push to send them to uat.</p>

<p>Let's suppose I have 5 commits I want, so I checkout and pull my uat branch and starts to cherry-pick from dev. The first 4 cherry-picks are successful, but the 5th fails with merge conflicts. How do I return to the previous state (after the 4th ""git cherry-pick -n 4th_hash"" ?</p>

<p>""git reset --merge"" undo all changes (including the first 4 ones that I want).
""git cherry-pick --abort"" says that there is no cherry-pick in progress.</p>

<p>Is there some way to accomplish this? I'm trying to create a bash script to do it automatically.</p>
","0","1541115","",""
"56208576","3668967","2019-05-19 14:06:45","1","195","<git><cherry-pick><merge-strategy>","Replace whole state of application with state of another commit","<p>I'd like to do ""the hardest version"" of cherry-pick/merge/rebase/checkout, what means that state of app on my branch begins to look exactly like in the cherry-picked commit (but with keeping history of my branch). In fact I could duplicate my repo, delete everything in my branch and next copy whole content from duplicated version set to needed commit. But well, that's not handy and I believe there's some easier way.</p>

<p>I already tried <code>git cherry-pick &lt;hash&gt; --strategy-option theirs</code>, but that's not perfect, because it doesn't remove files not existing in cherry-picked commit, what results in big mess in my case.</p>

<p>So, how can I do this?</p>

<p><strong>Edit:</strong> I clarified that I need also keep my history, what was not obvious first.</p>
","0","3668967","",""
"74441312","11624937","2022-11-15 06:19:25","1","112","<git><git-branch><rebase><cherry-pick>","What should I do when I’m working on my branch and some push changes on mainline","<p>it was the work flow,</p>
<ol>
<li>Created my branch using checkout.</li>
<li>Commit my changes on my branch 5 days ago.</li>
<li>Edit some of it on same branch and commit (not merged, on review). Found that there is version set issue because someone merged changes on main branch 3 days ago.</li>
<li>I need to keep working on same branch and need to commit. (Should be merged to main when review is approved) Before keep working on what should I do? should I do git pull origin mainline —rebase? on my branch? Cherry pick?</li>
</ol>
","1","11624937","",""
"74532421","6527049","2022-11-22 12:09:29","0","1987","<git><azure-devops><pull-request><cherry-pick>","Encountered conflicts when cherry-picking commit . This operation needs to be performed locally error in Azure DevOps","<p>I need to merge changes from one branch (this branch originated from the <code>demo</code> branch) let's say <code>feature1FromDemo</code> to another branch (<code>beta</code>).</p>
<p>There is a difference in the source code of the <code>beta</code> and <code>demo</code> branches, So I cannot raise a PR directly from <code>feature1FromDemo</code> to <code>beta</code> because it shows other changes as well.</p>
<p>So to merge only my changes I have thought to create PR only for my changes and cherry-pick that to the <code>beta</code> branch. So I have created a temporary branch from <code>demo</code> named <code>feature1FromDemoTemp</code> and raised PR to merge <code>feature1FromDemo</code> to <code>feature1FromDemoTemp</code> and then cherry-picked the changes.</p>
<p>It is giving the error .</p>
<blockquote>
<p>Encountered conflicts when cherry-picking commit &quot;00373b&quot;. This
operation needs to be performed locally.</p>
</blockquote>
<p><a href=""https://i.stack.imgur.com/h72hu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/h72hu.png"" alt=""enter image description here"" /></a></p>
<p>I have tried to cherry-pick this particular commit as well but still gives the same error.</p>
<p>So how to merge the changes I have made in<code>feature1FromDemo</code> the <code>beta</code> branch?</p>
","8","6527049","",""
"75892431","3768875","2023-03-30 19:53:27","3","104","<git><git-cherry-pick><azure-devops-server-2020>","Merged conflict cherry-picks still show as not merged in git cherry output","<p>tldr; Cherry-picking commit into another branch where a conflict exists, requiring manual resolution in a new branch, causes the original commit id to not show in the <code>git -cherry -v</code> output.  How can we get the commit id to show so we know the fix was applied to a branch?</p>
<p>I'm trying to determine whether a pull request on main was merged into a child branch.  There is more to it but let me first give you the setup of our system.</p>
<p>We are using Azure DevOps Server 2020 along with git.  Our branching is set up with three core branches, <code>main</code>, <code>preRelease</code>, and <code>currentRelease</code>, with all feature and bug branches being created off of the <code>main</code> branch.  Once a work item (i.e. bug or feature) is verified as passing all tests, each pull request associated with the work item gets cherry-picked from <code>main</code> into <code>preRelease</code>.</p>
<p>This setup works well for cherry-picked pull requests that don't have conflicts which require a manual reconciliation of the changes.  We are able to use the <code>git cherry -v origin/preRelease origin/main</code> command to see which commits and pull requests exist between the two branches.  We can then filter out all cherry listings that start with a <code>-</code> and then check the status of the work item associated with the pull request id to determine if it is in a state where it should be merged into the <code>preRelease</code> branch.  The branches that were already merged are filtered out because they start with a <code>+</code> in the <code>git cherry</code> output.  What is seen when there is a cherry-pick that has conflicts is that the connection back to the original commit and pull request is not available and not updating the log output from the <code>git cherry</code> command to show the commit was merged.</p>
<p>I thought that the problem might be how we are completing the pull request when we merge it into the <code>preRelease</code> branch.  However, attempting the different options in DevOps, Merge no fast-forward, Rebase fast-forward, and Semi-linear merge, all resulted in the commit not showing up as a part of the <code>preRelease</code> branch.  This leads us to believe that the work item isn't part of the branch when in fact it already is incorporated into the code.</p>
<p>So my question is whether it is possible to utilize git and the Azure DevOps Server 2020 API to determine whether a commit has been merged into a branch via cherry-pick, even if it was merged by a new branch because of merge conflicts.  If there is a better way to handle this whole process I am open to it.  I am by no means a git or DevOps guru.  If the <code>cherry-pick</code> process we have for migrating updates between <code>main</code> and <code>preRelease</code> is the way to go then is there a way to trace back the original commit from a cherry-pick that required a new branch to be created for the handling of merge conflicts.  Note, when we create a branch to handle the merge conflicts we start in the <code>preRelease</code> branch, pull down the latest code, then create a new branch off of <code>preRelease</code> and execute a <code>git cherry-pick &lt;commit id&gt;</code> to pull down the code for merging.  Also tried <code>git cherry-pick -m 1 &lt;commit id&gt;</code> but didn't see a difference in the resulting commit logs to show the original commit id.</p>
","0","3768875","",""
"75944897","6407935","2023-04-06 00:21:20","-1","38","<git><git-merge><git-cherry-pick>","How to update your local branch with all but the final commit of the remote branch?","<p>On a remote feature branch there are many commits. My local copy of the same branch is out-dated and I would like to update it with the remote feature branch. However, the final commit of that remote branch is problematic, and I want to disregard it during the update. How should I proceed while on my local copy of the branch?</p>
<p><strong>Note:</strong></p>
<p>My local branch is not the same as the remote branch. I had made a copy for myself with a different branch name.</p>
","0","6407935","",""
"76003008","6330106","2023-04-13 07:58:42","1","38","<git><git-cherry-pick>","How can I disable git cherry-pick from applying the diff of one file to another?","<p>The steps to reproduce my case,</p>
<pre><code>git init foo
cd foo

# add initial a.txt on &quot;master&quot;
echo hello &gt; a.txt
git add a.txt
git commit -mbase

# create branch &quot;new&quot;
git branch new

# on &quot;master&quot;, rename a.txt to b.txt
git mv a.txt b.txt
git commit -m'rename a.txt to b.txt'

# on &quot;master&quot;, modify b.txt
echo world &gt;&gt; b.txt
git commit -am'world b'

# on &quot;new&quot; rename a.txt to c.txt
git switch new
git mv a.txt c.txt
git commit -m'rename a.txt to c.txt'   # Anchor 1

# apply the commit in which b.txt is modified
git cherry-pick master
</code></pre>
<p>As on branch <code>new</code>, <code>b.txt</code> does not exist and it has only <code>c.txt</code>, I expected <code>git cherry-pick</code> to fail due to conflicts. However, it succeeded and applied the diff of <code>b.txt</code> to <code>c.txt</code>.</p>
<p>I guess it's related to the fact that <code>b.txt</code> and <code>c.txt</code> are considered as being copied from the same origin <code>a.txt</code>, and maybe also some git merge strategy. I had a try to solve the issue,</p>
<pre><code># remove foo, run the commands again, and pause at # Anchor 1

# introduce b.txt from &quot;master&quot; to &quot;new&quot;
git checkout master -- b.txt
git commit -m'add b.txt from master'

# apply the commit in which b.txt is modified
git cherry-pick master
</code></pre>
<p>This way, it complains <code>nothing to commit, working tree clean</code> as expected. But, in one of my projects the situation is very common, and I cannot abandon <code>git cherry-pick</code> in the workflow. As the creation and renaming are not under my control, I cannot ask other team members to always apply all new files to other branches where they are not necessary at all.</p>
<p>Is there any solution to disable <code>git cherry-pick</code> from applying the diff of one file to another without any bad side effect? Thanks.</p>
<p>I tried git 2.19.2, 2.24.1 and 2.39.0 on Ubuntu.</p>
","0","6330106","",""
"76011557","1039047","2023-04-14 04:17:46","0","32","<git><git-merge><git-reset><git-cherry-pick>","Git - Reset commit in master or cherry-pick / merge to sync up master's commit to other branch","<p>Initially I have <code>master</code> and <code>develop</code> branch at the same state, but I accidently make some commits directly to the <code>master</code>.</p>
<p>Now I'm going to sync the <code>master</code>'s commit to <code>develop</code>, but our practices is branch out <code>feature</code> from <code>develop</code> and make changes to the <code>feature</code> and then PR to the <code>develop</code>.</p>
<p>So I branched out a <code>feature</code> branch <em><strong>sync_up_develop_with_master</strong></em> and planned to cherry-pick the <code>master</code>'s commit into this feature branch.</p>
<p><a href=""https://i.stack.imgur.com/JGTbt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JGTbt.png"" alt=""enter image description here"" /></a></p>
<p>But I read some articles which says <strong>merge</strong> is preferable over <strong>cherry-pick</strong> (due to SHA1 identifier).
or should I just <strong>reset</strong> the commit in <code>master</code> since it's just minor changes.</p>
<p>Can anyone suggest me the correct approach on my case?
Thanks.</p>
","0","1039047","",""
"76018360","8435581","2023-04-14 19:28:57","0","37","<git><diff><cherry-pick>","How can I make a git commit that represents the diff between two other commits?","<p>I'm currently working on a git branch based off of branch <code>main</code> with a <code>HEAD</code> of commit <code>A</code>. I realized I wanted to split the work I was doing into two PRs, but I want to preserve the history properly.  An idea I had was to <code>git reset --soft main</code>, unstage the parts I want to separate out, and commit the remaining bits so <code>HEAD</code> is now one commit ahead of <code>main</code> on commit <code>B</code>.</p>
<p>Ideally, at this stage, I would like to <code>git reset --hard A</code> and make a commit on top of it that gets me to working state in commit <code>B</code>.  However, I can't figure out a way to add a commit that is the diff between <code>A</code> and <code>B</code>.</p>
<p>Does anyone have an idea for how I can make this commit, essentially removing all of the stuff from my branch that I wanted to separate out?</p>
","1","8435581","",""
"76090806","1419127","2023-04-24 10:13:34","0","98","<git><merge><git-merge><cherry-pick><git-cherry-pick>","Git : merge part of changes from branch","<p>We have been working on a work branch for some time now, with the intention of bringing it back to my main branch at some point.</p>
<p>In the mean time, that work branch has been kept up-to-date by frequent merges from the main branch.</p>
<p>Now it turns out we only want to bring some of the changes from that work branch, but not yet all, to the main branch.</p>
<p>What is difficult here, is that those changes are not at all nicely separated by commit or by file, because it was never expected to have to do this. Instead, individual commits bring changes we want on my main, as well as changes we don't want on my main branch. It possible to see instances of both kinds of changes within any given single file.</p>
<p>Now, there is still a possibility that in the end, we will want to merge that work branch definitively back in the main branch, as originally planned. So I need to keep this possibility open, and it needs to offer a good guarantee that everything has indeed been merged as planned - or at least a good way to check.</p>
<p>Because of that, it feels that <code>git cherry-pick</code> (assuming it can go down to the level of individual hunks within files) is not the option I want, because then all the original commits from the work branch on the one hand, and the commits generated by cherry-picking on the main branch on the other hand will all be dumb conflicts where it will look like both branches bring the same change. Also the log will look totally ugly with duplicate log comments.</p>
<p>I would much rather have a single commit saying &quot;Bring all changes related to X and Y but not Z from work branch.&quot;. And then sometime later, if we so choose, another commit saying &quot;Bring remaining changes from work branch, mainly about Z.&quot;. I guess ideally that last one would have the  two parents, but I don't know what would be ideal for the first one : should it have some commit in the work branch as its parent ? So <code>merge</code>-like rather than <code>cherry-pick</code>-like.</p>
<p>At the same time, if I decide to go for an actual <code>merge</code> to create the first commit, I will have to manually remove stuff in the code on the main branch to ignore changes about Z that would have come from the work branch via this <code>merge</code>. However, since that first commit would have the tip of the work branch as one of its parents (this being an actual <code>merge</code>), it would appear to git that that first commit contains all the changes from the work branch - but that wouldn't be true.</p>
<p>It may be that I put myself in a situation that git cannot solve cleanly or natively, and if that is the case, I would like to know, and I would be fine with it. I would still be interested in other degraded solutions which would break some of my requirements.</p>
","2","1419127","",""
"76125281","1186778","2023-04-27 23:27:02","1","102","<git><merge><rebase><cherry-pick>","Can I use rebase to update my feature branch to avoid polluting my commits even if the pull request may go stale?","<p>I have a Develop branch that is actively getting committed to a lot. Before I start my work I like to create a feature branch off of Develop. However, before I submit a pull request for it, I like to proactively resolve merge conflicts. So what I want to do is pull down the changes to the Develop branch and ultimately get those changes into my feature branch all nice and clean.</p>
<p>The problem is that after I submit my pull request, it may be weeks sometimes months before it gets merged in. Beyond that, the particular commits need to remain isolated as much as possible because it frequently gets cherry-picked into a test branch afterward due to requests for only certain features at certain times.</p>
<p>I believe that after I pull down updates for the Develop branch, if I merge the Develop branch into my feature branch, those commits become part of my feature branch's commits, and my feature commits become cluttered and dependent on the new ones merged in. I think..</p>
<p>Is this the time to use rebase? Or does rebase become a problem because my feature branch (fb1) will sit idle for a long time afterward? (I read that this is a problem somehow because more commits will be added to the development branch while the pull request waits)
Is my only option to create a new branch (fb2) off of the develop branch freshly updated and then merge my feature branch (fb1) into (fb2) and then make my pull request for (fb2) into the develop branch?</p>
<p>I'm sure this is a redundant question but I'm having a hard time finding anyone giving advice in a situation quite like this, considering the branch will most certainly become stale before it gets (attempted) to be merged in.</p>
<p>Maybe I am misguided about how I think merging works in the first place.</p>
<p>Thanks!</p>
","4","1186778","",""
"76131467","3510108","2023-04-28 16:19:01","1","37","<git><git-diff><git-log><cherry-pick><git-show>","Is there any way to see which commit is cherry-picked to a commit?","<p>Assume that there are two branch <code>develop</code> and <code>master</code>.</p>
<p>They are like this (alphabets are commits), master was created based on <code>develop</code> at B:</p>
<p>A — B — C — D (develop)</p>
<p>A — B — E — F — (C cherry-picked) — G — H (master)</p>
<p>How can I confirm <code>C cherry-picked</code> is picked from <code>C</code> from the upper part?</p>
<p>Fortunately I can recognize commits by commit messages so far. However, I wonder if it is possible to confirm like above.</p>
<p>I know that <code>commit</code> is not <code>difference</code> but like a snapshot.
and <code>cherry-pick</code> is calculated between commits.</p>
<p>In this case, I could compare the results of these below:</p>
<pre><code>git diff F (C cherry-picked)
git diff B C
</code></pre>
<p>or</p>
<pre><code>git show C
git show (C cherry—picked)
</code></pre>
<p>I hope there is a better way..</p>
","2","3510108","",""
"76167995","4951187","2023-05-03 21:07:29","0","67","<git><git-log><cherry-pick><git-cherry-pick>","How can git log --cherry-pick be parallelized?","<p>I've inherited some code that is using <code>git log --no-merges --right-only --cherry-pick --since='2 months ago' some_tag..origin/master -- path1, path2, ...</code> as an initial step in determining commits that are missing from <code>some_tag</code>. The main problem is it's slow and there is no status.</p>
<p>I can use git log <code>git log --since='2 months ago' origin/master -- path1, path2, ...</code> to get all the commits added for those paths in the specified time, which is fast. Then I'd like to spawn multiple threads to then check the commits individually, but I'm not sure what the equivalent would be for a single commit. Perhaps generating a patch file and using <code>git apply --check</code> and <code>git apply --reverse --check</code>, but I'm not sure that would be equivalent.</p>
<p>Or perhaps there is a more direct way to do it?</p>
","5","4951187","",""
"76181645","19598183","2023-05-05 11:22:55","0","89","<git><git-revert><git-cherry-pick><sirishortcuts><obsidian>","Switching between reverted and un-reverted states of a commit to apply old/new settings to config files","<p>I am wondering if it can be done the way I am imagining it could work.</p>
<p>I tried to find a solution to something that cannot be done within Obsidian or with URL schemes (neither with the Obsidian Advanced URI plugin): make changes e.g. in specific theme settings.<br />
I had more changes but settled on these for now, because they are easy to handle with 2 commands like that.<br />
I have 26 different temporary vaults because Obsidian finds the entirety of my 20000 files too large and exits on me when I open e.g. Zotero or Safari.<br />
Hence I temporarily move my subfolders up one level to figure as bone fide vaults on their own (with their own settings). I access any file (at any Heading level) in these temporary vaults with a single Shortcut.</p>
<p>I have made settings changes to 26 <code>[A-Z]</code> (sub-)vaults in Obsidian. If I wanted to undo those, I would need to write to 26 times 3-4 files in an iOS shortcut, but having the shortcut recursively search and replace data (with A-Shell) would take time on a large vault housing many many folders with their own settings.</p>
<p>I was thinking of just making note of the commit IDs of the commits made and using an iOS shortcut to practically switch between states to apply either set of settings.</p>
<p>Having looked up answers on StackOverflow, I have seen the <code>cherry-pick</code> command as an alternative.<br />
How would I go about using revert and/or cherry-pick to switch between two states (e.g. as in 'day' and 'night' settings)?</p>
<p>Well, the problems:</p>
<ul>
<li>A-Shell Libgit2 doesn't recognize the command <code>revert</code>;</li>
<li>NewTerm2 terminal (JB app) can execute <code>git revert &lt;commit-with-hash-ID&gt;</code> (after symlinking the repo/vault), but of course, there are merge conflicts to deal with (one needs changes on particular lines to undo, then it works);</li>
<li>Newterm2 doesn't have Siri Shortcut support.</li>
</ul>
","1","19598183","",""
"76241024","1559401","2023-05-13 04:08:48","1","46","<git><version-control><cherry-pick><git-cherry-pick>","Can git cherry picking last commit from throw-away branch damage the history in branch where data will be moved to?","<p>I've read about the unwanted side effects of cherry picking in regards to git history and ability to merge. However all examples I've come across assume that the branch, where a commit is cherry picked from, will continue to be actively developed-</p>
<p>In my case it is different. Since I am still learning about CICD (in particular in GitLab) I would often have the following approach:</p>
<ol>
<li>Create a project skeleton in my <code>master</code> or <code>develop</code> branch depending on how the project is managed</li>
<li>Checkout a new branch for the CICD pipeline setup</li>
<li>Experiment in that new branch until the pipeline is fully functional</li>
<li>Merge back into the source branch (<code>master</code> or <code>develop</code>)</li>
<li>Delete the branch for the pipeline</li>
</ol>
<p>The problem here is that my playground branch is filled with commits such as &quot;Added log message to debug error XYZ&quot; or &quot;Trying to adjust XYZ&quot;. The number of such commits can be astonishingly high (I am working on a Django project currently where this branch accumulated over 200 commits until the pipeline was finally working!). In the grand scheme of things this will create clutter in the git history, which I would like to avoid (not to mention it shows my incompetence in setting up a CICD pipeline :D).</p>
<p>I was thinking of using git cherry picking to just select the last commit and move it to the source branch thus leaving no trail behind. It is important to note that, while working on my pipeline setup branch, the source branch is not changed at all.</p>
<p>Will this break something in the git history of the branch that will receive the new data?</p>
","7","1559401","",""
"76371631","4451521","2023-05-31 08:36:06","0","36","<git><cherry-pick>","git cherrypicking with merged commits","<p>I haven't use cherry-picking that much in the past, but I need to use it today. So far the commits are linear so I got no problem</p>
<p>But what happen in the following situation</p>
<p><a href=""https://i.stack.imgur.com/sgbBw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sgbBw.png"" alt=""enter image description here"" /></a></p>
<p>I want to cherry pick all the commits from 1 to 7. But from commit 3 to 5 there was a merge (not fast forward)</p>
<p>I want to reproduce this in another branch (main for example)</p>
<p>Can I just cherry pick normally  1,2,3,4,5,6,7</p>
<p>or should I do 1,2,3,4,7,5,6?</p>
","6","4451521","",""
"76460697","893254","2023-06-12 22:32:03","-3","50","<git><cherry-pick>","git cherry-pick seems to picks up two commits from a single hash","<p>The below screenshot shows the result of running <code>git cherry-pick &lt;hash&gt;</code> while on branch <code>master</code>.</p>
<p>This operation is picking up two commits instead of a single commit. I don't understand why this is the case and wonder if this is a <code>git</code> bug. I am running version <code>2.30</code>.</p>
<pre><code>git cherry-pick a2a037f311 --no-commit
</code></pre>
<p><a href=""https://i.stack.imgur.com/A7Rw8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/A7Rw8.png"" alt=""git cherry-pick"" /></a></p>
<p>The next screenshot shows the commit log from the branch from which I am cherry-picking.</p>
<p><a href=""https://i.stack.imgur.com/p1TLc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/p1TLc.png"" alt=""git log"" /></a></p>
<p>Finally, here's a diff between two consecutive commits.</p>
<pre><code>git diff 2bad... a2a0...
</code></pre>
<p><a href=""https://i.stack.imgur.com/7nVWj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7nVWj.png"" alt=""git diff"" /></a></p>
<p>Here's some details about the branch being cherry-picked from.</p>
<p>It could be I've misunderstood something, but it seems to me the only thing that should be added from this single cherry-picking operation is the line</p>
<pre><code>Include this change!
</code></pre>
<p>The only possible thought I have is that by picking a commit in the middle of a branch history, this for some reason creates a conflict with the previous commit. But that explanation doesn't seem to really make much sense given the details of the conflict shown here.</p>
<p>I would have expected:</p>
<ul>
<li>No conflicts to occur from the cherry-pick</li>
<li>A single line <code>Include this change!</code> to be added to <code>master</code> branch</li>
</ul>
<p>Why didn't that happen?</p>
<hr />
<h3>Mergetool:</h3>
<p><a href=""https://i.stack.imgur.com/Qo95v.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Qo95v.png"" alt=""mergetool"" /></a></p>
","11","893254","",""
"9623577","1257831","2012-03-08 19:27:00","3","5734","<git><cherry-pick>","Git Cherry-Pick","<p>I'm a newbie to git, and I do understand how git cherry-pick works, but here is my problem:</p>

<p>Recently, someone in my team, changed the directory structure in master, but not the directory structure in another branch.</p>

<p>Now, when I do make changes to my code in branch, I want to bring them (cherry-pick) into master. This was fine until the directory structures in both master and the branch were same.</p>

<p>topDir/some/subdir/file -- master<br>
topDir/some/other/subdir/file -- branch</p>

<p>file, whose changes are to be brought into master is the same, but not the directory structure it is contained in. When I try to do a cherry-pick the usual way, I get an error along the lines of:</p>

<p>git checkout master
git cherry-pick commit
error: pathspec topDir/some/other/subdir/file does not exist</p>

<p>Now, what is the best way to go about cherry-picking in this scenario? Any pointers are highly appreciated.</p>

<hr>

<p>OK. I just noticed that, in the same scenario, when I do a cherry-pick, git is smart enough to actually pick one of the files correctly from the commit, but does not recognize the other.</p>

<p>To use the same example I mentioned in my original post:  In the same commit, 
topDir/some/subdir/file1,
topDir/some/subdir1/file2. </p>

<p>I go to master, which has ""file1"" and ""file2"", just in a different dir structure:
topDir/src/some/subdir/file1
topDir/src/some/subdir1/file2. </p>

<p>Now, if I do a cherry-pick, git is intelligent enough to pick up the changes in file1, even though this is in a different dir structure, but doesn't pick up the changes for file2. Any pointers? If anyone wants me to be more clear, I'll be happy to. </p>

<p>So, what I did to workaround the problem was do a cherry-pick, manually change the one git did not pick up, and ""git commit -C . </p>
","5","1257831","0","0"
"10143471","17507","2012-04-13 15:10:52","2","164","<git><cherry-pick>","Is there a way to apply git commits from one part of my tree into another?","<p>In the dim and distant past there was a decision to break compatibility with one of our configuration programs. However as there would still be remote units running older software we needed to keep a version of the old mgmt software around in the build. A short ""cp -a"" later we ended up with a directory structure containing:</p>

<pre><code>mgmt-app
mgmt-app.old
</code></pre>

<p>Development continued and mgmt-app accumulated a number of fixes, some to new functionality and some generic functionality. As you can probably guess it is now noted that mgmt-app.old doesn't have some of these fixes. It would be nice if I could cherry-pick the relevant fixes and keep useful stuff like comments but apply the commits to mgmt-app.old. Obviously they don't apply normally as they are already in the tree applied to the mgmt-app!</p>

<p>We are using git to version control the repository. Is there a way I could ""backport"" these commits to a different part of the tree? Is this just going to be solved by manually applying patches with ""patch -p ""?</p>
","3","17507","",""
"65470761","7766440","2020-12-27 21:44:00","0","52","<git><branch><conflict><cherry-pick>","Getting Cherry-Pick conflicts","<p>while doing cherry-pick of commits from branch development to master there is cherry-pick conflicts caused by missing commits in master (the order of commits matters).
So, I compare the log of commits in the two branches and I cherry-pick the missing ones.
this process is painful, especially when done on multiple commits.
Is there a git command or script to show the dependant commits that need to be cherry-picked before the one.</p>
","3","7766440","",""
"49820568","4676921","2018-04-13 15:34:05","2","296","<git><cherry-pick><git-cherry-pick>","Restrict cherry-picks to GIT","<p>We would like our developers to not make cherry-picks at all and follow the our standard branching strategy. We use bitbucket.
Is there a simple way to forbid making cherry-picks? Google didn't help there and the only way to do it is to develop a git hook - time-consuming option.</p>

<p>Thank you in advance!</p>
","1","4676921","",""
"49822532","114900","2018-04-13 17:44:11","2","185","<git><git-cherry-pick>","Conflict cherry-picking a commit range but not when picking each individually?","<p>I have a <code>develop</code> and a <code>release</code> branch.</p>

<p>I created a patch branch from <code>develop</code> with 6 commits A, B, C, D, E, F (with <code>A</code> being the oldest). It was reviewed and then three-way merged back into <code>develop</code>.</p>

<p>I then created a similar fix branch from <code>release</code> (for review) and cherry picked commits from my <code>develop</code>-based fix branch onto my <code>release</code>-based fix branch like so:</p>

<pre><code>git checkout release/patch/ticket1

git cherry-pick A^..F
</code></pre>

<p>This resulted in an unexpected merge conflict while applying patches.</p>

<p>I <code>git cherry-pick --abort</code>ed and instead tried</p>

<pre><code>git cherry-pick A
git cherry-pick B
git cherry-pick C
git cherry-pick D
git cherry-pick E
git cherry-pick F
</code></pre>

<p>And this worked without conflict.</p>

<p>I thought <code>cherry-pick</code> created a patch from each commit and applied them in sequence to the target branch?</p>

<p>So how is it possible that I have encountered a merge conflict when specifying a <em>range</em> but not when applying <em>individual</em> commits?</p>

<p>Related</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/7072013/git-cherry-pick-not-working/7072029#7072029"">git cherry-pick not working</a> </li>
<li><a href=""https://stackoverflow.com/questions/9339429/what-does-cherry-picking-a-commit-with-git-mean"">What does cherry-picking a commit with git mean?</a></li>
</ul>

<p>EDIT</p>

<p>I attempted tests suggested from the comments and could not reproduce my problem. As my understanding of the cherry-pick sequencer is correct, I'll have to assume the intervention of some other actor (IDE, locking watcher process?).</p>
","5","114900","",""
"4465710","125921","2010-12-16 21:51:19","3","336","<git><merge><cherry-pick><merge-conflict-resolution>","When someone has cherry-picked from my git commits and made commits of their own, how do I merge?","<p>Suppose I fork someone's git repo and make commits A, B, C, and D. The persom who I forked from then cherry-picks A and C, which therefore become A' and C'. He also makes commits X, Y, and Z of his own. So after all this, my branch has A B C D, and his has A' C' X Y Z. Assume that both branches are published, so rebase is not an attractive option. Also assume that X Y Z don't conflict with any of A B C D. How do I merge these two branches in a useful way? Should I simply merge and then manually resolve everything? Is there anything I can do about duplicate commit messages in the log of the merged head? Are these two branches doomed to sync only by cherry-picking each other's commits from now on?</p>
","0","125921","",""
"41717400","1465553","2017-01-18 10:49:52","0","256","<git><commit><git-cherry-pick>","Print list of ""git cherry-pick""ed commits on local branch which are not yet pushed","<p>After doing: </p>

<pre><code>git cherry-pick -n &lt;commit1&gt;
git cherry-pick -n &lt;commit2&gt;
git cherry-pick -n &lt;commit3&gt;
git cherry-pick -n &lt;commit4&gt;
</code></pre>

<p>I want to print the list of cherry-picked commits. These commits have not been <a href=""https://stackoverflow.com/questions/5717026/how-to-git-cherry-pick-only-changes-to-certain-files"">pushed</a> yet on the current branch as I am using <code>-n</code> option. How to do that?</p>

<p>Please note that I know, SHA1 gets changed after cherry-picking, so the commits should be identified by commit-message IMO.  </p>
","1","1465553","",""
"61136539","4779907","2020-04-10 08:24:40","-1","2965","<git><cherry-pick>","Can I cherry pick multiple commits from different branches?","<p>I have 3 branches, <code>m</code> being head of master, while <code>g</code> and <code>h</code> are single commit branches. I cannot do a rebase or merge at this point. What I want is to cherry pick the changes in <code>g</code> and <code>h</code> on top of master without commiting them, just having them unstaged. There are no conflicts between these 3. However, I can only cherry pick either <code>g</code> or <code>h</code>. When I try to cherry pick the other, the cherry pick fails:</p>

<pre><code>error: your local changes would be overwritten by cherry-pick.
hint: commit your changes or stash them to proceed.
fatal: cherry-pick failed
</code></pre>

<p>Is it possible to do <a href=""https://i.stack.imgur.com/x8N3H.png"" rel=""nofollow noreferrer"">this</a>?</p>
","2","4779907","",""
"23352127","2752843","2014-04-28 22:16:41","1","548","<git><github><merge><git-revert><git-cherry-pick>","Git revert cherry pick on pull request branch without reverting on master","<p>I read that I can use git revert to undo a cherry-pick. I tried to cherry-pick a commit from the master branch on a project, but not I realize I don't want to do it. Unfortunately for me, I've already pushed.</p>

<p>What I'm afraid of is if I use git revert, I don't know if it will revert the commit on master too when the PR is merged.</p>

<p>How can I undo the cherry-pick without messing up the master branch after a merge?</p>

<p>This is not intended to be a duplicate, I just want to undo it on the pull request branch and don't want to undo it on master. </p>
","0","2752843","",""
"42090072","559827","2017-02-07 12:35:46","5","1855","<git><cherry-pick><git-cherry-pick>","What difference does `.git/CHERRY_PICK_HEAD` make when committing?","<p><strong>NB:</strong> This is a rewording of an earlier post of mine (now deleted).  The rewording intends to give the post a different focus.</p>

<hr>

<p>Upon running <code>git cherry-pick</code>, <code>git</code> reported that there was a conflict.  I resolved the conflict, and then ran <code>git cherry-pick --continue</code>.  At this point, <code>$GIT_EDITOR</code> popped up a <code>COMMIT_EDITMSG</code> buffer pre-populated with the cherry-picked commit's original message along with some additional info, which included the warning:</p>

<pre><code># It looks like you may be committing a cherry-pick.
# If this is not correct, please remove the file
#   .git/CHERRY_PICK_HEAD
# and try again.
</code></pre>

<p>I checked to see what happened if I ""deleted"" (actually, just temporarily renamed) the <code>.git/CHERRY_PICK_HEAD</code> file.  The immediate outward effect this had was to remove the <code>|CHERRY-PICKING</code> indication from my <code>git</code>-aware prompt.</p>

<p>Other than this change in my prompt, and possibly some differences in the pre-populated information in the <code>COMMIT_EDITMSG</code> buffer, what difference would it make to perform the commit with or without the <code>.git/CHERRY_PICK_HEAD</code> file in place?</p>

<hr>

<p>To be more precise, I'm trying to compare two scenarios here.</p>

<p>In the first scenario, I run</p>

<pre><code>% git cherry-pick --continue
</code></pre>

<p>...and (disregarding the warning quoted earlier) I proceed with the commit as usual.</p>

<p>In the second scenario, I run</p>

<pre><code>% rm .git/CHERRY_PICK_HEAD
% git commit
</code></pre>

<p>...and proceed with the commit as usual.</p>

<p>(Assume that I use the same commit message in both scenarios.)</p>

<p>How would the <em>end results</em> of these two scenarios differ?</p>
","0","559827","0","0"
"5120038","634519","2011-02-25 16:47:41","1024","375677","<git><cherry-pick>","Is it possible to cherry-pick a commit from another git repository?","<p>I'm working with a git repository that needs a commit from another git repository that knows nothing of the first.</p>

<p>Typically I would cherry-pick using the <code>HEAD@{x}</code> in the reflog, but because this <code>.git</code> knows nothing of this reflog entry (different physical directory), how can I cherry-pick this, or can I?</p>

<p>I'm using <code>git-svn</code>. My first branch is using <code>git-svn</code> of the <code>trunk</code> of a Subversion repo, and the next branch is using <code>git-svn</code> on a Subversion branch.</p>
","0","634519","0","0"
"42099671","1197249","2017-02-07 20:46:05","8","2277","<git><git-branch><git-diff><git-log><git-cherry-pick>","Figure out dependencies of a commit we try to cherry pick","<p>Assume something like the following:  </p>

<pre><code>                            HEAD/master     
                             |
A&lt;--B&lt;--C&lt;--D&lt;--E&lt;--F&lt;--G&lt;--J  
        ^
        official 
</code></pre>

<p>Where <code>official</code> is a branch.<br>
I wanted to cherry-pick 2 commits to <code>official</code> branch e.g.<code>E</code> and <code>J</code><br>
Both these commits were fixes affecting the same 3 files.<br>
When I did <code>git cherry-pick E</code> it went fine but when I did <code>git cherry-pick J</code> I got some conflicts.<br>
Looking at the diffs I realized that I needed to also cherry pick commit F which did a change in two of those 3 files which change was basically a method definition change and <code>J</code> was done on top of that.<br>
So it was easy to fix by just doing <code>git cherry-pick F &amp;&amp; git cherry-pick J</code><br>
Question:<br>
If I wasn't aware of the changes done in those files and commit F was a big commit changing many files: Is there another way to figure out on which commit a commit we are trying to cherry pick depends on without manually doing a git log on the file and going commit by commit?</p>
","0","1197249","0","0"
"42106324","1647146","2017-02-08 06:39:32","0","43","<git><branch><commit><integrate><cherry-pick>","GIT: automation to integrate commits between branches","<p>My team has two GIT branches:</p>

<ul>
<li>'main' branch which services our production environment</li>
<li>'update_1' branch which was forked out of main branch</li>
</ul>

<p>The idea is that 'main' is our current production branch. We only allow small bug fixes to be added to this branch to resolve critical production issues. 'update_1' branch is the next release we are working on. This branch has larger feature items that take more time to develop and stabilize. Once development is complete in 'update_1', we will push this branch to production, and then fork a new 'update_2' branch out of 'update_1' branch to start working on the next update. 'main' branch will no longer be used once 'update_1' branch is pushed to production in its place. </p>

<p>Due to this branching model, any fix that is committed  into 'main' branch, must also be integrated into 'update_1' branch, so we do not lose the fix when 'update_1' branch is pushed to production. Similarly, we need to integrate all fixes from 'main' and 'update_1' branch into 'update_2' branch (once it is created), so we do not lose any of our in-production fixes once 'update_2' branch ships to production. </p>

<p>Currently, this is a manual process. We have our developers cherry-pick their changes into the needed branches. This has a lot of overhead and often times delays while we wait for the dev to integrate their fix into the needed branch. I am looking to automate this processes. </p>

<p>Is there any scripts or automation that can resolve this issue? I need to integrate all commits that are in branch 'main' into  branch 'update_1'. If there is a marge conflict, we would need to flag this commit for developer review.</p>

<p>Thanks!</p>
","5","1647146","",""
"23570382","479805","2014-05-09 17:11:21","1","5293","<git><git-cherry-pick>","Whats a good method to cherrypick all missing commits by an author in one branch to another","<p>Say I have made a bunch of changes in master. But, I want to cherrypick all the ones not in branch:release-5 onto to it.</p>
","3","479805","0","0"
"5377095","322683","2011-03-21 11:38:50","0","493","<git><merge><cherry-pick>","git-cherry seems like not working for disordered merges","<p>I tried to use git cherry-pick for merging some commits from master and then git-cherry to determine what commits currently merged. It works fine while I merge it in the order it's on master, but when I skip merging one of the commits it doesn't show me the next merged.
Example below:</p>

<pre><code>$ git branch
* branch
  master
$ git log --oneline
46aad17 comment4
56e43b0 comment3
26370b3 comment2
6192fa4 comment1

$ git cherry -v branch master
- 5c5e979707cd6a77ef3ae79627cdd211cad86a28 comment3
- ee0386c78d9e6d21dce7a8bac8e40beef73fb993 comment4
+ 9495c94ece440d9a05c3218f88d1b72a7fd67664 unmerged # this wasn't merged
+ 235b0822f08f351264071e7b2500caa9af997fb8 comment2
</code></pre>

<p>The question is why comment2 shown as unmerged while it's shown merged in log?</p>
","2","322683","",""
"42319703","1229612","2017-02-18 19:27:06","6","1687","<git><version-control><branch><gerrit><cherry-pick>","Check if all commits to one GIT branch have been cherry picked to another","<p>Is there some way, maybe using git log, that I can see if any of my commits in ""develop"" have not been cherry-picked to ""otherbranch"" yet?</p>

<p>For example I make 6 commits to develop, and cherry-pick 5 of them to otherbranch. What git log command could I execute to output the 1 commit I missed?</p>

<p>(All our commits are pushed through Gerrit, so any Gerrit based solutions would help too.)</p>
","0","1229612","0","0"
"5410742","86436","2011-03-23 19:44:23","5","6816","<git><date><merge><rebase><cherry-pick>","How can two branches be combined into a single branch based on the date of each commit?","<p>Let's say I have a git repository that looks like this:</p>

<pre><code>merge-base---A1--A2------A3------A4 (branchA)
          \
           ----------B1------B2 (branchB)
</code></pre>

<p>To make things simpler, let's say the commits on branchA are strictly modifications to fileA, and the commits on branchB are strictly modifications to fileB.</p>

<p>I want to combine these branches into a third branch, branchAB, where the commits will be ordered by date:</p>

<pre><code>merge-base---A1--A2------A3------A4 (branchA)
          \
           ----------B1------B2 (branchB)
            \
             A1--A2--B1--A3--B2--A4 (branchAB)
</code></pre>

<p>Is there a way to automatically do this with a single git command, or am I stuck with manual methods (e.g. cherry picking or rebase -i)?</p>

<p>BTW, <code>merge-base</code> is a tag.</p>
","0","86436","0","0"
"5413824","482433","2011-03-24 01:44:33","4","402","<git><performance><git-cherry-pick>","Git for development and live websites","<p>I'm using Git for both my development and live websites, and keep each in their own branches 'dev' and 'master'. When I finish testing on the 'dev' branch I merge my changes back to 'master', however there are several files which I need to keep specific to just the 'dev' branch / server. </p>

<p>I.e. index.php have a 'development server' message shown at top of all pages, and no Google Analytics tracking, and I want to keep it this way.</p>

<p>Also some config files which should not change when I merge.</p>

<p>I have been using cherry-pick, but this is slow and frustrating... is a better way to do this?</p>
","0","482433","",""
"5717026","321973","2011-04-19 13:22:54","849","427020","<git><github><cherry-pick>","How to git-cherry-pick only changes to certain files?","<p>If I want to merge into a Git branch the changes made only to some of the files changed in a particular commit which includes changes to multiple files, how can this be achieved?</p>

<p>Suppose the Git commit called <code>stuff</code> has changes to files <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code> but I want to merge only <code>stuff</code>'s changes to files <code>A</code> and <code>B</code>. It sounds like a job for <code>git cherry-pick</code> but <code>cherry-pick</code> only knows how to merge entire commits, not a subset of the files.</p>
","0","321973","0","0"
"5748930","350761","2011-04-21 19:35:41","2","319","<git><git-branch><git-rebase><git-merge><cherry-pick>","Merging changes from a branch based off a topic branch to a different topic branch in git","<p>My team is working on a shared topic branch in git which I will call ""topic1."" I was working on a refactor of some code on a branch made off of topic1, which I will call ""refactor."" I have been periodically merging topic1 into refactor so I can stay up to date with changes, but have not merged refactor back into topic1 because the refactor is still in progress.</p>

<p>There is another topic branch, which I'll call ""topic2"" which was recently created off of master. What I'd like to do is merge <em>only</em> the changes that I've made on ""refactor"" to a new branch made off of topic2, which I'll call ""topic2_refactor."" (I.E. the changes in the commits accessible only by refactor but not by topic1.)</p>

<p>I know how to see these just these changes:</p>

<pre><code>git log origin/refactor --not origin/topic1
</code></pre>

<p>So what I'd like to do is something like this - but this syntax is not correct:</p>

<pre><code>git checkout topic2
git checkout -b topic2_refactor
</code></pre>

<p>And then this:</p>

<pre><code>git merge origin/refactor --not origin/topic1
</code></pre>

<p>Or this:</p>

<pre><code> git cherry-pick origin/refactor --not origin/topic1
</code></pre>

<p>(The above seems to be causing merge conflicts that aren't neccessary, due to some changes which occured on master that was later merged back into the refactor branch.)</p>

<p>I was hoping that there is a clean way to do this and avoid unnecessary merge conflicts that were resolved later on in the history of the ""refactor"" branch. Might this be possible using git rebase, git filter-branch, etc?</p>
","0","350761","",""
"43084192","4257853","2017-03-29 04:13:16","9","6019","<git><github><git-cherry-pick>","Git cherry pick creates duplicate commits","<p>After cherry-picking some commits from one branch to another branch, i still see commits when a pull request is created later.</p>

<p>Say for example, There is a git project which has two branches : Dev , Release.</p>

<p>And commit history is in following order.</p>

<p>DEV : a1, a2, a3, a4, a5, a6</p>

<p>RELEASE : a1, a2</p>

<p>Now if i cherry-picked commits a3 and a5 alone from Dev to Release. Now the commit history will be as shown below. cherry-picked commits will have new SHA (b1 &amp; b2).</p>

<p>RELEASE : a1, a2, b1, b2.</p>

<p>Later if i try to create a pull request from Dev to Release branch, i stil see the commits a3 and a5.</p>

<p>But in this case how can i find difference in commits between these two branches? </p>

<p>I saw some articles stating 'rebase' but not able to understand the logic behind it.</p>
","1","4257853","0","0"
"4386230","912","2010-12-08 10:03:52","1","368","<git><cherry-pick>","git-log with an ""OR"" clause - or - how to merge git-log outputs?","<p>I'm currently trying to cherry-pick a feature from the trunk of an OSS project into a fork.  Both repositories use git and I have the trunk imported into the fork as a branch so it should make things nice and easy.  </p>

<p>The approach I'm taking is to try to cherry-pick all relevant commits from one branch to another as it's not possible for me to just do a straight merge: there are too many things that have diverged.</p>

<p>In order to generate the list of commits I should start with to cherry-pick I've identified two <code>git-log</code> commands to run:</p>

<pre><code>git log --branch project-trunk **/*Foo* 
</code></pre>

<p>This is intended to give me the log for any file with the word ""Foo"" in it on the <code>project-trunk</code> branch.  This is a pretty good starting point but I've found that there are other commits that are relevant: luckily they usually have an identifying work in the commit log.  So to find these I'm using:</p>

<pre><code>git log --branch project-trunk --grep Bar
</code></pre>

<p>This gives me any logs on the branch <code>project-trunk</code> which contain the work ""Bar"".  </p>

<p>The problem is that I really need a master list, ordered chronologically containing the union of both those commands.  I've read the <code>git rev-list</code> manual but I can't see any way of doing what I want.</p>

<p>Is it possible to union two seperate conditions like this? And if not, is there a simple way to union the output of two <code>git-log</code> commands chronologically? </p>
","0","912","",""
"61812648","13543943","2020-05-15 05:55:04","1","417","<c#><git><cherry-pick>","Git auto-merging removed some information while cherry-picking","<p>At work, I had to include a commit from a remote branch to my local branch.</p>

<p>Because I did not want to merge yet, I cherry-picked the remote commit to my local branch.</p>

<p>While cherry-picking, Git performed an auto-merge whithout prompting me for a conflict.</p>

<p>I then realized that some vital lines of code from the remote were missing from the resulting commit.</p>

<p>I put the case here:</p>

<p><a href=""https://github.com/apicoding/SimplePrj"" rel=""nofollow noreferrer"">https://github.com/apicoding/SimplePrj</a></p>

<p><strong>1.</strong>  My 'Initial commit' in master is missing the mandatory 'Print()' method implementation.</p>

<p><strong>2.</strong> The 'Print()' method is defined in 'Ready to merge' commit in remote.</p>

<p><strong>3.</strong>  After cherry-picking/auto-merge 'Ready to merge' commit to master,
    the 'Print()' method is still undefined.</p>

<p><strong>Do you have an explanation why git cherry-pick can choose to remove some information whitout raising a conflict and asking the user to choose ?</strong></p>
","0","13543943","",""
"4429089","13051","2010-12-13 13:07:07","9","7039","<svn><git><cherry-pick>","cherry-picking with git-svn","<p>I'm facing the problem of merging a subset of revisions from one topic-branch to another. Since I am using git-svn, I was curious to see if it is possible to use cherry-picking for this. Using Subversion, I would do:</p>

<pre><code>svn merge -c A
svn merge -c B
svn merge -c C
...
svn commit ...
</code></pre>

<p>what will happen if I try to do this?</p>

<pre><code>git checkout branch1
git cherry-pick A
git cherry-pick B
git cherry-pick C
git svn dcommit
</code></pre>

<p>If I read the git svn man-page, the answers is ""don't do that"", but I get the impression when googling around that git svn does a much better job now with these kinds of issues.</p>
","0","13051","0","0"
"15462217","","2013-03-17 15:01:06","0","1224","<git><git-branch><git-cherry-pick>","git cherry-pick SHA1 ID","<p>I am still new to git and I came across this cherry-pick command. Lets say I 
cherry-pick a commit (lets call it CA) from <em>devel</em> branch to the <em>master</em> 
branch and they now both have different sha1 id if what I interpret is correct. </p>

<p>So my question is, if later I want to check the ""differences"" between <em>devel</em> 
branch and <em>master</em> branch using  <code>git cherry</code>to find out which commits are 
eventually pushed to <em>master</em> and which does not, but since the commits (CA) I 
cherry-picked just now will have a different SHA1 id so when I execute <code>git 
cherry master devel</code> what does it tell me? Does it tell me CA is pushed to the 
<em>master</em>? Or does it tell me CA is NOT pushed to the <em>master</em> since they don't 
share the same SHA1 ID?</p>
","2","","",""
"32942721","43534","2015-10-05 06:47:42","4","42","<git><svn><git-svn><cherry-pick>","Git-svn unpicked cherries","<p>Given a repository that was previously in SVN and has now been fully converted to Git (ie. currently accessed via ""pure"" <code>git</code> and not <code>git svn</code>):</p>

<p>Given a mainline branch and a release branch that diverged from mainline prior to the Git conversion:</p>

<p>Is there any easy way (from Git) to tell which commits are present on the release branch and not on the mainline branch (ie. possible candidates to be cherry-picked back to mainline, when a fix has been made directly to the release branch)?</p>

<p>The problem I see is that commands like <code>git cherry</code> (which is apparently the right choice for branches that diverged <strong>after</strong> the Git conversion) expect that complete commits are kept intact, but merges made in SVN prior to the conversion tend to be roll-ups -- basically squashed cherries instead of intact cherries.</p>

<p>In SVN, this is accomplished by inspecting the <code>svn:mergeinfo</code> property (usually automatically via tools).  I don't know if this information was preserved during the conversion process, or if there are any tools that know to look for it in an apparently-native-Git repository.</p>
","0","43534","",""
"32945719","1581325","2015-10-05 09:55:21","0","192","<git><merge><git-remote><git-checkout><git-cherry-pick>","Copying file with its commits to another remote","<p>I am trying to copy the commits of one file to another remote branch. The flow is described in the picture below:</p>

<p><a href=""https://i.stack.imgur.com/qyUqq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qyUqq.png"" alt=""flow""></a></p>

<p>The important part is that I would like to keep the history of the commits (so not one merge commit without a reference to who made the changes in Remote 1) when ""copying"" the file from one remote to another.
Also, I don't want to copy other files as well, so only the file I want.</p>

<p>I have tried a git checkout but once I committed the merge, and pushed this to Remote 2, the commits from Remote 1 were gone and only the merge commit was there.</p>

<p>Could git cherry-pick be the answer here?</p>
","0","1581325","",""
"32985474","3796554","2015-10-07 06:48:44","9","6896","<git><git-cherry-pick>","Cherry-pick commits to a particular folder of git repo from other repo","<p>I am very much familiar with git cherry-pick. Currently i am trying to cherry-pick few commits from other git repository.
Scenario is as below:</p>

<blockquote>
  <p>A -> git repo (""A/foo/B"" where B is a directory inside foo)</p>
  
  <p>B -> git repo</p>
</blockquote>

<p>My intention is to cherry-pick/apply-patches/merge commits of git repo B to A/foo/B directory.</p>

<blockquote>
  <p>A/foo/B</p>
</blockquote>

<p>I know it can be done in many ways, like with merge, cherry-pick and applying patch.</p>

<p>I have also tried below command, which is fulfilling my intention:</p>

<pre><code>git --git-dir=../B/.git format-patch --stdout sha1^..sha1 | git am --directory='B/'
</code></pre>

<p>But is there any way to get the same thing with cherry-pick to get the intended solution Or any other perfect solution to make it up.</p>

<p>Please suggest!!</p>

<p>Thank you :)</p>
","9","3796554","0","0"
"32986219","5417162","2015-10-07 07:28:59","2","160","<git><git-cherry-pick>","How to cherry-pick the specific commits of a file?","<p>I have 2 branches: <code>FeatureBranch</code> and <code>ReleaseBranch</code>.</p>

<p>I did cherry-pick a file of commit <code>c1</code> from <code>FeatureBranch</code> to <code>ReleaseBranch</code>.
Later I did some modifications on the same file on <code>FeatureBranch</code> &amp; committed with id <code>c2</code>.</p>

<p>Again I did enhance the same file on <code>FeatureBranch</code> and committed with id <code>c3</code>.</p>

<p>Now I do not want <code>c2</code> onto <code>ReleaseBranch</code>, I only need <code>c3</code>. I tried to cherry-pick directly with the <code>c3</code> id but Git returned an error:</p>

<blockquote>
  <p>could not apply c3...</p>
</blockquote>

<p>I know Index in Git is incremental, as I do not want the <code>c2</code> changes and I need only <code>c3</code>. Is there any way to achieve this?</p>
","2","5417162","",""
"8223103","575284","2011-11-22 06:58:24","513","227650","<git><git-merge><git-cherry-pick>","Merge up to a specific commit","<p>I created a new branch named <code>newbranch</code> from the <code>master</code> branch in git. Now I have done some work and want to merge <code>newbranch</code> to <code>master</code>; however, I have made some extra changes to <code>newbranch</code> and I want to merge <code>newbranch</code> up to the fourth-from-the-last commit to <code>master</code>.</p>

<p>I used <code>cherry-pick</code> but it shows the message to use the right options:</p>

<pre><code>git checkout master    
git cherry-pick ^^^^HEAD newbranch
</code></pre>

<p>Can I use git <code>merge</code> to do it instead?</p>

<pre><code>git merge newbranch &lt;commitid&gt;
</code></pre>
","0","575284","0","0"
"12289458","781332","2012-09-05 20:44:13","3","762","<git><cherry-pick>","Is cherry-picking the right way to backport and consolidate topic branch fixes?","<p>Here's my scenario:</p>

<p>Let's say I want to make a fix to an open source project on github.  At a high level, I follow this workflow:</p>

<ul>
<li>fork the source project on github </li>
<li>clone the fork locally</li>
<li>create a topic branch off master</li>
<li>make my fix (hand waving irrelevant details here...)</li>
<li>push topic branch to github</li>
<li>submit pull request to original source project</li>
</ul>

<p>OK, now let's say I've done this a couple of times, so I have topic branches called issue#123 and issue#456.  The original source project, in addition to the master branch, has release branches, e.g. 1.0, 1.1, etc.</p>

<p>I have my own separate project that uses version 1.1 of this open source project.  I don't want to build against the open source project's ""master"", since it's not stable yet.  What I need is a local build of the open source project's 1.1 branch that also includes my fixes to issue#123 and issue#456.</p>

<p>Sorry for the lengthy setup...  anyway, what I'm currently doing is creating a local branch called my-1.1 (branched off 1.1), cherry picking the fixes from my topic branches into it, then building it and using the result in my separate, dependent project.</p>

<p>I'm not 100% sure that cherry-picking is the right way to go here, but merging doesn't seem right, since I don't want all the post-1.1 changes from master (which are present in my topic branches) to flow into the ""my-1.1"" branch.  Is this the best approach?  Any gotchas to be aware of?  </p>

<p>The only other approach I can think of is to create duplicate topic branches for each fix, one in a branch off master, and one in a branch off 1.1.  Then I could merge the 1.1-based topic branches into my-1.1, instead of cherry-picking the commits from the master-based topic branches.  But that seems like a major hassle.</p>
","0","781332","0","0"
"63586592","14166134","2020-08-25 20:26:51","0","393","<linux><git><devops><merge-conflict-resolution><git-cherry-pick>","Cherry-pick merge conflict in GIT","<p>I have created a file called test. in it i made two commits from master branch content inside the test file is 1(1st commit) &amp; 2(2nd commit), i have created a feature branch, in it i have made three commits as follows 3(3rd commit)),4(4th commit),5(5th commit).now there are 5 commits totally, 2 is in master branch &amp; 3 is in feature branch.</p>
<p>Now i need to pick only the fourth commit that i have in feature branch. as i have checked out to the master branch i am entering <strong>git cherry-pick commit-i'd</strong>. but its throwing the error which is</p>
<pre><code>git cherry-pick bb87e7b
error: could not apply bb87e7b... Fourth Commit
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>
<p>i sensed where the problem is...the master branch doesn't have third commit which feature branch do. so obviously the third commit content will be missing in the master branch. but as per cherry-pick's logic we should be able to do this action in one way or other.</p>
<p>If anyone knows the answer please explain in-detial or if you needed any supporting document to solve this error reply here. i will share that here. Thank you!</p>
","0","14166134","",""
"26668784","2884981","2014-10-31 06:36:10","1","678","<git><merge><git-cherry-pick>","Cherry picking a range of commits in Git","<p>I was hoping to get some ideas. I have three branches:</p>

<ul>
<li>master</li>
<li>specific</li>
<li>feature-branch</li>
</ul>

<p><code>master</code> contains the generic code base so that if I want to branch out later to create a new type of implementation, I can easily do so. But for now <code>specific</code> is my main development branch.</p>

<p>So I branched <code>specific</code> off into <code>feature-branch</code> to test a new feature, once I was satisfied I merged <code>feature-branch</code> back into <code>specific</code>.</p>

<p>But there are some commits which are implementation specific in <code>specific</code> which I don't want to merge back into master. Most of the code is generic changes, which I do want to merge back.</p>

<p>I merged about 30 changes from <code>feature-branch</code> into <code>specific</code>. Of those 30, probably about 20 I want to merge from <code>specific</code> into <code>master</code>.</p>

<p>What is the best way for me to do this?</p>

<p>Should I just cherry pick each of the commits I want to merge into <code>master</code>? If so, should I just go in reverse chronological order (ie. get the oldest commit I want to merge in, then the second oldest, and so on - cherry picking them all back into <code>master</code>).</p>

<p>Any ideas are welcome. Thanks</p>
","0","2884981","0","0"
"12397752","347339","2012-09-13 00:14:47","82","63168","<git><version-control><cherry-pick><git-cherry-pick>","How to Conclude a Git Cherry-Pick?","<p>Yesterday I cherry-picked two commits into my main branch, one of them caused merge conflicts and I resolved them, committed and pushed them to origin. Today I am attempting to pull from the server when I get the following error:</p>

<pre><code>$ git pull
fatal: You have not concluded your cherry-pick (CHERRY_PICK_HEAD exists).
Please, commit your changes before you can merge.
$
</code></pre>

<p>Git status reads:</p>

<pre><code>$ git status
# On branch main
# Your branch is behind 'origin/main' by 2 commits, and can be fast-forwarded.
#
$
</code></pre>

<p>I have tried the following to no avail:</p>

<pre><code>$ git cherry-pick --continue
usage: git cherry-pick [options] &lt;commit-ish&gt;
$
</code></pre>

<p>Any idea on how I could resolve this? Thanks in advance!</p>
","4","347339","0","0"
"8586110","112002","2011-12-21 06:55:36","4","2031","<git><merge><cherry-pick>","avoid repeat commits when cherry-pick from master to branch, then merge from branch back to master","<p>I've got two branches in git, master/ and 1.7/.   I backport some fixes from master/ into 1.7/, using cherry-pick. (I'm not using merge because I only want some of the changes.):</p>

<pre><code>$ git checkout 1.7
$ git cherry-pick -x &lt;initial commit SHA&gt;..&lt;master change 2 SHA&gt;
</code></pre>

<p>Then later on, I merge 1.7/ back to master/, because I want all changes that have gone into 1.7/ (except for the cherry-picks themeselves) to be merged back to the mainline:</p>

<pre><code>$ git checkout master
$ git merge 1.7
</code></pre>

<p>My problem is that this re-commits the cherry-picks (originally from master/) into master/ again:</p>

<pre><code>$ git log --oneline
8ecfe22 Merge branch '1.7'
fe3a60d master change 2 (cherry picked from commit f5cca9296e45d5965a552c45551157ba
9c25f53 master change 1 (cherry picked from commit 8fae2a68a356f5b89faa8629b9a23b23
f5cca92 master change 2
8fae2a6 master change 1
ffa10bf initial commit
</code></pre>

<p>In my real repository it even caused merge conflicts.</p>

<p>So my question is, can I avoid this (and if so, how)?</p>

<p>The full list of commands to reproduce this behavior:</p>

<pre><code>$ git init
&lt;create Dialog.js file&gt;
$ git add Dialog.js
$ git commit -am ""initial commit""
$ git branch 1.7

&lt;edit Dialog.js file&gt;
$ git commit -am ""master change 1""
&lt;edit Dialog.js file&gt;
$ git commit -am ""master change 2""
$ git log

$ git checkout 1.7
$ git cherry-pick -x &lt;initial commit SHA&gt;..&lt;master change 2 SHA&gt;

$ git checkout master
$ git merge 1.7
$ git log
</code></pre>
","0","112002","",""
"63829852","9236979","2020-09-10 12:38:04","0","62","<git><git-cherry-pick>","Am i using cherry-pick correctly","<p>I am not sure if i use Git correctly so i would like to know what you think about my way and how to make it better. <br>
I`m programming a website were i want to include new features. But for these features i don´t need the complete rest of the website. So what i do is this:</p>
<ol>
<li>on branch &quot;master&quot; i create a branch called &quot;justBasics&quot; were i deleted everything that is unnecessary (which is nearly everything).</li>
<li>on branch &quot;justBasics&quot; i create my feature Branch &quot;feature1&quot;. In &quot;feature1&quot; i can, for example, create a new file where i write my feature in.</li>
<li>Now i want to include feature1 to the master.
The bad thing is that the branch &quot;feature1&quot; also includes stuff that i just need to try out my feature and doesn´t belong to the master so cant merge it to master (Or can i use merge? I don´t know how.). For example some code for testing the feature or especially the stuff that i deleted to create &quot;justBasics&quot;.</li>
<li>To include the feature i go back to &quot;master&quot; and create the branch &quot;includeFeature1&quot;. In &quot;includeFeature1&quot; i get only the important commits of the feature by cherry-pick.</li>
<li>now i can merge &quot;includeFeature1&quot; to master</li>
</ol>
<p>This is how my repository would look at the end:</p>
<pre><code>* c9     (master) merging branch &quot;includeFeature1&quot;
|\
* | c8   some work on master to make this look better
| * c7   (includeFeature1)cherry picking commit c3 and c5 
|/
* c6     some work on master to make this look better
| * c5   (feature1) finished feature1
| * c4   some code that is necessary to test feature1. I don´t want this code at the end in my website.
| * c3   started feature1. add a file to work in
| * c2   (JustBasics) i deleted folders, features, preparing main.html to show nothing.
|/
* c1     website til this point. that includes other features
</code></pre>
<p>This way works for me but i get some problems with cherry-pick: Somehow when i want to checkout some other branch some old Hunks reappear. Especially when i am on master and i try to checkout &quot;JustBasics&quot;, the Hunks from c2 were i deleted all the folders and features reappear and i can´t switch branches. So i have to delete them before i can continue. <br> <br>
How do you work on complete new features were the rest of your code would disturb you? <br>
What do you think about my way?</p>
","2","9236979","",""
"12522640","1178659","2012-09-21 00:05:04","1","144","<git><git-merge><git-cherry-pick>","Two projects with common code","<p>I am assigned to two projects, both of which are derived from a common parent and targeted to be merged back to the parent around the same time.
To make it simple, let's call them master, projA and projB.</p>

<p>Let's say the folder structure of the source code is:<br/>
/src/main/UI<br/>
/src/main/backend<br/></p>

<p>Let's say there is a file and we want to add a new common error handler inside of it.<br/>
This function should be shared between projA and projB.<br/>
/src/main/backend/common/errorhandler.cpp</p>

<p>The branching is as follows (both branched from master and ultimately merged back to master.
aN/bN are project specific changes.
AN/BN are changes errorhandler.cpp</p>

<pre><code>       -- projA--a1-a2--A1--
      /                     \
------                       master
      \                     /
       -- projB--b1-b2--B1--
</code></pre>

<p>So at some point there may be changes in projA that are needed in projB, so the commits would look like this (say after cherry-picking A1 into projB).</p>

<pre><code>       -- projA--a1-a2--A1--a3---
      /                          \
------                            master -- projA' -- projB'
      \                          /
       -- projB--b1-b2--B1--A1'--
</code></pre>

<p>From what I read, I cannot merge just A1 into projB.  It would merge a1, a2, and A1.</p>

<p>I could use cherry-pick, which would then be A1' in projB, at the expense having A1` and A1 being treated as separate changes when both projA and projB are merged back to master.<br/></p>

<p>I was hoping someone might have a better plan where I could still use merge so that I do not end up with 'duplicate' changes.</p>
","8","1178659","",""
"12540446","1554346","2012-09-22 03:31:08","42","31944","<git><branch><cherry-pick>","How do I split up a large Git branch into lots of smaller branches?","<p>I have imported from SVN into Git, now I have one big branch, like this:</p>

<ul>
<li>work on feature C</li>
<li>work on feature B</li>
<li>work on feature C</li>
<li>work on feature C</li>
<li>work on feature B</li>
<li>work on feature A</li>
</ul>

<p>I want separate feature branches, for A, B, C. I'm cherry picking commits to new branches but this doesn't remove them from the original branch so I have to manually track which ones I have pulled out.</p>

<p>There are around 800 commits to split up, and maybe 50 features/bugfixes.</p>

<p>It would be nice to have the ones I have pulled out reflected this way somehow in the git log, so I know which ones I have already done. Is this possible?</p>

<p>I can rebase the entire branch, skipping the commits I have pulled out, but I'm worried this will cause lots of conflicts. I don't want to resolve 500 conflicts every time I pull a commit out. </p>

<p>What's the best method of pulling out commits from one uber branch onto smaller feature branches, whilst keeping track of your progress?</p>
","0","1554346","0","0"
"8979250","79475","2012-01-23 22:02:17","0","442","<git><merge><git-branch><cherry-pick>","How could cherry-pick other merge path?","<p>I have this structure:</p>

<pre><code>   B - C - D &lt;- feature
  /         \  
 A-----------E &lt;- master  
 ^ mytag
</code></pre>

<p>B, C and D commits are feature branch path. A is a common base. This feature is merged back into master as E commit. I have tagged (automatically) commit A.</p>

<p>I would like automatically without user intervention (from script), no matter how many commits are there in the feature branch to cherry pick ""mytag"" to ""master"" as A, E (in this case) in another branch.</p>

<p>Now if I do:</p>

<pre><code>git checkout other    
git cherry-pick mytag..master
</code></pre>

<p>it will pick A, B, C, D and E commits. I would like it to pick commits only from master branch, i.e. A and E. 
Note: I don't want to merge into E in the opposide way. I want it feature into the master. And A to E is not sure that is branching at all. It could be A --- E. Just I need something like "".."" operator, but to use other branch'es way.</p>

<p>Thanks for the help in advance!</p>

<p>In addition:
The third branch were I should cherry-pick, should look like that after: </p>

<pre><code>F - G - H - A - E &lt;- other 
</code></pre>

<p>i.e. A and E will be cherry-picked in ""other"" branch.</p>
","3","79475","",""
"45618692","7157496","2017-08-10 16:11:26","0","376","<git><git-commit><git-cherry-pick>","How to add one ""behind"" commit from Master to Dev where Dev is in head state?","<p>I'm actually learning Git and I'm wondering what would be the best practice to achieve the ""Desired state"" :</p>

<pre><code>Actual state:

Master A-----B------C
             \ 
              \
           Dev D------E------F


Desired state:
Master
A-----B------C
             |
             |
Dev          C------D------E------F
</code></pre>

<p>FYI : I'm in production on Master/Commit-B and I'm developping on Dev/Commit-D-E-F. I've seen that I want to commit a change on production but Dev/Commit-D-E-F are not ready to be merged in production.</p>

<p>I've read about the usefull stackoverflow post : <a href=""https://stackoverflow.com/questions/881092/how-to-merge-a-specific-commit-in-git"">How to merge a specific commit in Git</a> using <code>git cherry-pick</code> but I'm not too sure if i should be concern about <em>""This changing of commit IDs breaks git's merging functionality among other things""</em>? Should I need to change my commit vision to do not reproduce this scenario?</p>

<p>When my developpement will be finished I'm planning to merge the modification from Dev to Master as :</p>

<pre><code>Future desired state:
Master
A-----B------C------D------E------F
</code></pre>
","4","7157496","",""
"57692647","484558","2019-08-28 12:39:41","1","1092","<git><gitlab><git-cherry-pick>","Cherry picking a commit that was overwritten by a push force","<p>These are the commits on a branch on origin:</p>

<pre><code>A -&gt; B -&gt; C1
</code></pre>

<p>Locally, I had the branch when it only had <code>A -&gt; B</code> commits and I add a new commit. So the branch locally looks like:</p>

<pre><code>A -&gt; B -&gt; C2
</code></pre>

<p>I do a push force and overwrite the remote branch so it removes <code>C1</code> commit and replaces it with <code>C2</code>.</p>

<p>Is it possible to get <code>C1</code> back and add it back to the branch?</p>

<p>I tried with cherry pick, but I get <code>fatal: bad revision</code>. However, I was able to cherry pick it using gitlab's web interface. Is this possible without gitlab?</p>
","2","484558","",""
"39013870","88427","2016-08-18 08:55:04","1","38","<git><git-rebase><git-rewrite-history><git-cherry-pick>","Separating two Git repositories that were merged together","<p>I have a project I've been working on in Visual Studio for some time, and been saving my changes in a Git repository. Let's call this Project A, which has the following commit history</p>

<pre><code>A0-A1-A2-A3-A4-A5-A6
</code></pre>

<p>Later I start working on another project Project B, which is in another Git repository.</p>

<pre><code>B0-B1-B2-B3
</code></pre>

<p>At some point I decided that these two projects are really directly related to each other and I merge Project B into the Project A repository and add it to the Project A Visual Studio solution. The Project A repo now has two root commits A0 and B0.</p>

<pre><code>A0-A1-A2-A3-A4-A5-A6-M1
                     /
        B0-B1-B2-B3-
</code></pre>

<p>After this point I assume these projects are one and don't bother separating my work into independent Project A and Project B branches. Most of the commits are related to either Project A or Project B. Although, there are some commits where I made changed to both A and B.</p>

<pre><code>A0-A1-A2-A3-A4-A5-A6-M1-AB1-A7-B4-B5-AB2-B6-A8-A9
                     /
        B0-B1-B2-B3-
</code></pre>

<p>But now I've decided I was wrong to merge these projects and would like to split the history of the two projects back into separate respective git repositories.</p>

<pre><code>A0-A1-A2-A3-A4-A5-A6-A7-A8-A9

B0-B1-B2-B3-B4-B5-B6
</code></pre>

<p>Both these projects are totally private projects that only I have been working on. So rebasing/recreating all the commits is not an issue. I've been reading a lot of posts on SO and elsewhere on the web but still can't figure out the best was to approach splitting this up.</p>
","0","88427","",""
"39173456","9950","2016-08-26 19:26:20","0","645","<git-merge><git-cherry-pick>","How can I track git cherry-pick commits between branches","<p>I have a long standing patch branch and a develop branch.  I want to cherry-pick specific changes from develop to the patch branch.</p>

<p>When I do, I get new commits with no link to the old commit.</p>

<p>Is there a way to cherry pick and maintain the parental link to the branch for that commit?</p>

<p>is adding ""-x"" the best I can do?</p>

<p>Thanks</p>
","1","9950","",""
"39289336","817379","2016-09-02 09:44:32","3","1263","<git><cherry-pick>","Cherry picking bug fixes correctly","<p>So from my understanding cherry-picking a commit from one branch to another creates a <strong>completely new hash signature</strong> although the actual code changes are the same. I believe this is because the commit hash signature depends upon the branch name and commit time among other things.</p>

<p>Because of this I have been led to believe that if a bug fix has been made in a feature branch and another developer needs this fix, the correct solution is to cherry pick this fix into its own branch, and merge that branch into the common branch both the feature branches branched from. Then the original bufix commit in the feature branch should be deleted and finally both feature branches simply re-base on-top of the common branch which now contains the bugfix.</p>

<p>However, it seems this is not how others interpret using cherry-pick. I thought that if a commit is cherry-picked from one feature branch into another and both are <strong>merged back into common</strong>, then these separate commits cause one of three things to happen;</p>

<ul>
<li>'duplicate' commits in the history which introduce the same code changes </li>
<li>a merge conflict that has to be handled manually</li>
<li>introduction of duplicated lines of code.</li>
</ul>

<p>Have I interpreted cherry pick incorrectly?</p>
","2","817379","",""
"1241720","64313","2009-08-06 21:50:25","340","176605","<git><merge><cherry-pick>","Git Cherry-pick vs Merge Workflow","<p>Assuming I am the maintainer of a repo, and I want to pull in changes from a contributor, there are a few possible workflows:</p>

<ol>
<li>I <code>cherry-pick</code> each commit from the remote (in order). In this case git records the commit as unrelated to the remote branch.</li>
<li>I <code>merge</code> the branch, pulling in all changes, and adding a new ""conflict"" commit (if needed).</li>
<li>I <code>merge</code> each commit from the remote branch individually (again in order), allowing conflicts to be recorded for each commit, instead of grouped all together as one. </li>
<li>For completeness, you could do a <code>rebase</code> (same as <code>cherry-pick</code> option?), however my understanding is that this can cause confusion for the contributor. Maybe that eliminates option 1.</li>
</ol>

<p>In both cases 2 and 3, git records the branch history of the commits, unlike 1.</p>

<p><strong>What are the pro's and con's between using either <code>cherry-pick</code> or <code>merge</code> methods described?</strong> My understanding is that method 2 is the norm, but I feel that resolving a large commit with a single ""conflict"" merge, is not the cleanest solution. </p>
","0","64313","0","0"
"20434748","1004272","2013-12-06 22:32:53","3","218","<git><git-cherry-pick>","Can I 'git cherry-pick <sha>' and have 'git log foo..bar' recognize it?","<p>Background: I have two branches, master and stable, with many commits on master that aren't on stable.  I want to cherry-pick a number of those commits to stable, and then be able to use <code>git log --merges-only stable..master</code> to see what's left.</p>

<p>However, if I just cherry-pick, git treats them as two commits and thus the 'git log' command doesn't help.  E.g. given this:</p>

<pre><code># create a repo
mkdir cherry
cd cherry
git init

# add a commit on master
touch foo.txt
git add foo.txt
git commit -a -m 'commit 1'

# create a stable branch
git checkout -b stable

# add two more commits to master
git checkout master
touch bar.txt
git add bar.txt
git commit -m 'commit 2'
touch baz.txt
git add baz.txt
git commit -m 'commit 3'

# cherry-pick just one of those commits to stable
git checkout stable
git cherry-pick master
</code></pre>

<p>Then, I'd like to be able to see what commits are candidates for future cherry-picking on master, ideally using <code>git log</code>, but it doesn't really answer my question:</p>

<pre><code>&gt; git log stable..master --pretty=oneline --no-merges
01550adab8993ceb1eec7bbc7a0e3de3550d63fc commit 3
8a3ea27aa50c887b603296bb9d4a36ccbfa35311 commit 2
</code></pre>

<p>However, TIL about <code>git cherry</code>:</p>

<pre><code>&gt;  git cherry stable master
+ 8a3ea27aa50c887b603296bb9d4a36ccbfa35311
- 01550adab8993ceb1eec7bbc7a0e3de3550d63fc
</code></pre>

<p>Where the entries prefixed with '+' are the candidates for future-cherry picking.</p>
","1","1004272","0","0"
"39555056","6330106","2016-09-18 07:08:21","2","301","<git><git-cherry-pick>","How to raise a conflict for this git cherry-pick?","<p>Two branches <code>master</code> and <code>foo</code> point to the same root commit A. The work tree has only one file <code>bar.txt</code>.</p>

<pre><code>$cat bar.txt
11111
22222
33333
44444
55555
</code></pre>

<p>Make Commit B to <code>master</code>, adding a line in <code>bar.txt</code>.</p>

<pre><code>$cat bar.txt
11111
22222
33333
aaaaa
44444
55555
</code></pre>

<p>Then make Commit C to <code>master</code>, deleting <code>aaaaa</code> and adding <code>bbbbb</code> elsewhere in <code>bar.txt</code>.</p>

<pre><code>$cat bar.txt
11111
bbbbb
22222
33333
44444
55555
</code></pre>

<p>Run <code>git format-patch -1 C</code> to generate the patch for Commit C, assuming its name to be <code>0001-bbbbb.patch</code>.</p>

<p>Now checkout <code>foo</code>. <code>git am 00001-bbbbb.patch</code> or <code>git apply 00001-bbbbb.patch</code> will fail due to conflicts, as expected. However <code>git cherry-pick C</code> will succeed without any problem.</p>

<p>From this <a href=""https://stackoverflow.com/questions/30198013"">question</a> I learn that <code>git am</code> or <code>git apply</code> will succeed too with the argument <code>-3</code> or <code>--3way</code> in this case. However I cannot find any config or argument about three way merge for <code>git cherry-pick</code>. </p>

<p>Question:</p>

<p>How to disable the three-way-merge thing for <code>git cherry-pick</code> in this case, so that the cherry-pick will fail?</p>

<p>Thanks a lot.</p>
","5","6330106","0","0"
"39630191","4361073","2016-09-22 04:18:44","1","1492","<git><cherry-pick>","how to revert one latest cherry-pick and retain others on local copy?","<p><strong>current state:</strong><br>
<em>I have a checkout version, on top of which, I have cherry picked various other commits (lets say 4-5 commits), which are some fixes.<br>
Now, I have to validate other fix without loosing my last working state. I therefore have cherry picked a commit-id (let us say <code>X</code>). And after my validation, I would just want to undo commit-id-X cherry-pick, but other cherry picks should stay intact.</em></p>

<p>Please suggest, if Git supports some command to do this job directly.</p>
","4","4361073","0","0"
"20524535","1316620","2013-12-11 16:26:17","11","556","<git><git-cherry-pick><git-cherry>","What 'cherry' means in git-cherry?","<p>What is the meaning of the word <em>cherry</em> in <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-cherry.html"" rel=""noreferrer"">git-cherry</a>?</p>

<hr>

<p>Besides the fruit, I've only seem the word in the <em>cherry picking</em> expression (also present in git with <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html"" rel=""noreferrer"">git-cherry-pick</a>), that means selectively picking something (right?).</p>

<p>Doesn't look like to me that <em>cherry</em> in <code>git-cherry</code> is related to the fruit neither to <em>cherry pick</em>.</p>

<p>I'm Brazilian so subtleties of the English language are not quite so obvious sometimes.</p>
","5","1316620","",""
"39636925","1307832","2016-09-22 10:45:23","6","5075","<git><tfs><tfvc><cherry-pick><git-cherry-pick>","What is the equivalent in TFVC of git cherry-pick","<p>I'm sorry for my question but I'm TFS noob user, what is the equivalent in TFVC (Team Foundation Version Control) of git cherry-pick?</p>
","1","1307832","0","0"
"20531138","3014905","2013-12-11 22:20:52","0","1640","<git><merge><git-merge><git-cherry-pick>","Git conflicts generated by cherry-picks","<p>To start, I am new to git, but have been eating up <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-merge.html"" rel=""nofollow noreferrer"">documentation</a> and similar issues on the topic like <a href=""https://stackoverflow.com/questions/9710366/git-trying-to-merge-branches-but-there-are-tons-of-conflicts-and-most-of-them"">this</a> and <a href=""https://stackoverflow.com/questions/6964346/why-is-git-not-able-to-merge"">this</a> (I will be referring to this latter question later in the post).</p>

<p><strong>Summary:</strong> I was cherry-picking a commit from one branch to another, and after making a commit on one branch and then trying to merge them back together, I was receiving conflicts. See my answer below for what I think was going on.</p>

<p><strong>Scenario:</strong> I have two files, one on a ""master"" branch, and one on a ""secondary"" branch. The ""secondary"" branch contains some files we don't want in master, and is only used by a few people, but most of the files we have in both ""master"" and in ""secondary"" should be consistent (everything in master is in secondary, but everything in secondary is not in master). To accomplish this, I have been commiting changes made in ""master"", using <code>git checkout secondary</code> to checkout my ""secondary"" branch, and then running <code>git merge master</code>. Unfortunately, I raised a conflict once, and now my brain is churning away trying to figure out what the conflict is.</p>

<p><strong>Attempted Solution:</strong> At first, I thought it was because I had modified the files in both ""secondary"" and in ""master"", which I had. To solve this, I used <code>git cherry-pick [commit]</code> to pull the changes I had made in the secondary branch into the master branch. However, I still could not merge my master branch into the secondary branch. Git suggested using <code>git add/rm</code> (presumably <code>git add</code> or <code>git rm</code>, though that took me a bit to figure out) to mark which ones I wanted. So I deleted the version in the index and working tree in ""secondary"" using the <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-rm.html"" rel=""nofollow noreferrer"">git rm command</a>. After this, I went back to to my ""master"" branch, recommitted the files I wanted merged into ""secondary"", went BACK into ""secondary"", and then ran <code>git merge master</code> again. To my chagrin, conflicts.</p>

<p><strong>Question:</strong> Frankly, I think I have no idea what's going on. I thought that <code>git merge master</code> (when run on the secondary branch) would take all changes made in the git master commit and put those changes in the secondary branch. If that is what's happening, I don't understand the issue. I have deleted the files from secondary, and have committed my changes in master. Why can't I merge? The solution to the latter question I referred to earlier suggests it might be because the common ancestor contains something else, but I thought that the <code>git cherry-pick [commit]</code> would have taken care of that. Is the problem that a <code>cherry-pick</code> does not create a new merge base, and so even though the files in question were the same after the <code>cherry-pick</code>, they might still be different from their merge-base?</p>

<p>I apologize for the length of this question, I am trying super hard to understand, and feel like I'm running in circles. Any advice would be great.</p>

<p><strong>Edit:</strong> I guess I'm also confused because I don't understand why git won't let me change branches to try and resolve this problem. When I try <code>git checkout secondary</code> now to try and maybe <code>cherry-pick</code> the commit changes into secondary, I get <code>error: you need to resolve your current index first</code>. I assume there must be a reason git wouldn't allow this behavior, I'm just not sure I see what it is.</p>
","0","3014905","",""
"20698614","2412237","2013-12-20 07:42:09","33","39911","<git><git-cherry-pick>","Multiple commits cherry-picking","<p>I have 33 commits in the main branch that are meshed up. Now I need to maintain the record neatly. So now I have created feature branches and I'm trying to classify those 33 commits in different feature branches. So can it be possible to pick multiple commits at a time to copy in the relevant feature branch? And I am also facing its conflicts when I tried multiple commits with the cherry-pick command.</p>

<pre><code>git cherry-pick A B C
</code></pre>

<p>here A, B, C are the commits' hashcode.</p>
","5","2412237","0","0"
"58918906","6355591","2019-11-18 16:22:23","23","10831","<git><git-branch><cherry-pick><remote-branch>","Error pushing changes on GIT. Ref names must follow git ref-format rules","<p>I have one error using git on Sourcetree.
I've created a local branch called sprints/Mycompany_sprint_1 (because I want it in a category) and then I did multiple cherry picks to this branch from another one.
After that, I tried to push all the changes on my branch, but I am receiving next error:</p>
<blockquote>
<p>The Remote branch '' (Local branch = 'sprints/Mycompany_sprint-1') is invalid. Ref names must follow git ref-format rules:
<a href=""https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html"" rel=""noreferrer"">https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html</a>
Completed with errors, see above.</p>
</blockquote>
<p>But if I go to the link, I am following (as far I saw) all the rules, because looking at the first rule:</p>
<blockquote>
<p>They can include slash / for hierarchical (directory) grouping, but no
slash-separated component can begin with a dot . or end with the
sequence .lock.</p>
</blockquote>
<p>I check if the problem could be that the spring category already exists, but is not the case.
<br>Can anyone tell me what I am doing wrong, please? I'm affraid that cannot see the error here...</p>
","0","6355591","0","0"
"2166751","2147","2010-01-30 03:53:43","6","272","<git><branch><dvcs><cherry-pick>","Is it possible to apply a commit to all branches in git?","<p>I have a feeling I am asking something that can't be done in git, but I might as well ask.  Is there any way that I can make one change and commit it to all branches?  For instance, suppose I want to make a change to my AUTHORS file or LICENSE file.  I know I can commit the change to one branch and then cherry-pick it to each branch individually.  But is there an easier way to do it?</p>
","1","2147","0","0"
"58919729","4523359","2019-11-18 17:10:03","0","85","<git><git-submodules><git-cherry-pick>","Convert Git subdirectories into submodules","<p>Using Windows for development, Debian for servers and repos, Git Extensions as Git client. </p>

<p>I have the following repos:</p>

<p>REPO1:</p>

<pre><code>ROOT_OF_SITE1/
</code></pre>

<p>REPO2:</p>

<pre><code>ROOT/
    /SITE1/
    /SITE2/
    /SITE3/
</code></pre>

<p>SITE2 and SITE1 share the same code base, just SITE1 is a few commits ahead, but since the path is different can not cherry pick commits from SITE1 from REPO1 to SITE1 in REPO2. </p>

<p>I suppose one of the solutions is to convert SITE2 subdirectory to Git submodule, so then I could cherry pick commits from SITE1. </p>

<p>However each time I use git submodules, I'm facing problems in Git Extensions. </p>

<p>Unfortunately the Git Extensions Git client does not support subtree at this time.</p>
","4","4523359","0","0"
"40148442","404623","2016-10-20 07:47:48","57","50790","<git><cherry-pick><git-cherry-pick>","Mainline parent number when cherry picking merge commits","<p>Suppose this is my git history</p>
<pre>
  Z
 /
A -- C -- D
 \  /      
  B
</pre>
<p>My HEAD is currently at <code>Z</code>. I want to cherry-pick <code>B</code> and <code>C</code>. If my understanding is correct, I should do this:</p>
<pre><code>git cherry-pick B
git cherry-pick C -m 1
git commit --allow-empty
</code></pre>
<p>It worked in my case because <code>C</code> is a no-op (hence the empty commit afterwards, I needed the commit for other reasons), but I am wondering what the parameter after <code>-m</code> does. Here is what I read from <a href=""https://git-scm.com/docs/git-cherry-pick"" rel=""noreferrer"">the docs</a>:</p>
<blockquote>
<p><strong>-m parent-number</strong></p>
<p><strong>--mainline parent-number</strong></p>
<p>Usually you cannot cherry-pick a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows cherry-pick to replay the change relative to the specified parent.</p>
</blockquote>
<p>In my case, <code>C</code> has two parents but how do I know which one is 1 and 2, and more importantly when does  it matter when I pick 1 or 2?</p>
","4","404623","0","0"
"43132236","7795664","2017-03-31 04:02:01","0","628","<git><cherry-pick>","Git cherry-pick ,can't find ""<<<<<HEAD"" marker in conflict files","<p>I met a problem when I cherry-pick a commit on my branch. Below is what I did:</p>

<pre><code>$ git cherry-pick  50658
$ git status
</code></pre>

<p>Error messages:</p>

<pre><code>Not currently on any branch.
You are currently cherry-picking commit 5065872.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Unmerged paths:
  (use ""git add &lt;file&gt;..."" to mark resolution)

        both modified:      drivers/media/dvb-core/dvb_frontend.c
</code></pre>

<p>But when I input <strong>git diff</strong>. It tells below :</p>

<pre><code>diff --cc drivers/media/dvb-core/dvb_frontend.c
index 7023d5f,72fc718..0000000
--- a/drivers/media/dvb-core/dvb_frontend.c
+++ b/drivers/media/dvb-core/dvb_frontend.c
</code></pre>

<p>I didn't find any conflict massage, as <code>&lt;&lt;&lt;&lt;&lt;&lt;HEAD</code> in <code>dvb_frontend.c</code> files. Why it tells conflicts exiting ?</p>
","1","7795664","",""
"41774872","1489510","2017-01-21 01:34:15","3","1159","<git><git-merge><git-subtree><cherry-pick><monorepo>","Git commits that touch a subtree/subfolder","<p>I have a monorepo project <code>proj</code> using subtrees in a folder <code>sub</code> under <code>proj/sub</code>. I have made tons of commits that touch both <code>proj</code> and <code>sub</code>. How do I publish the relevant changes to upstream <code>sub</code> effectively?</p>

<p>Usually, I'd have to cherry-pick every commit using</p>

<p><code>git cherry-pick -x --strategy=subtree -Xsubtree=sub/ commit-ref</code></p>

<p>but I have made zillions of commits so this is unfeasible. How can I integrate the changes to <code>sub</code> at once? For instance, create one big squashed commit that would bring <code>sub</code> to the same state it is in my monorepo.</p>

<p>Related: <a href=""https://stackoverflow.com/questions/32002956/view-commits-that-make-changes-to-subfolder"">View commits that make changes to subfolder</a>, <a href=""https://stackoverflow.com/questions/1994463/how-to-cherry-pick-a-range-of-commits-and-merge-into-another-branch"">How to cherry pick a range of commits and merge into another branch</a></p>
","0","1489510","0","0"
"43332810","1104728","2017-04-10 20:59:55","17","12760","<git><git-cherry-pick><git-merge-conflict>","Git - how to automatically resolve ""deleted by us"" conflict when cherry-picking","<p>I run the following command:</p>

<pre><code>git cherry-pick SHA --strategy-option theirs
</code></pre>

<p>and get a conflict like this waiting for manual resolution:</p>

<pre><code>deleted by us: SOME_FILE
</code></pre>

<p>Is there a way to make git automatically resolve such conflicts by adding files <em>deleted by us</em>?</p>
","1","1104728","0","0"
"61006742","6518007","2020-04-03 07:10:57","2","9573","<git><github><cherry-pick><git-cherry-pick>","How to push a commit using git cherry-pick with a different commit comment","<p>I have used git cherry-pick to push a commit from branch a to branch b .</p>

<p>git checkout branch b</p>

<p>git cherry-pick commit-hash</p>

<p>Which worked fine but I couldn't find a way to update the push comment. Whatever comment was provided earlier for branch a same is reflecting for branch b as well. Is there a way I can modify push comment before actually pushing the commit to my origin branch?</p>
","3","6518007","",""
"62058692","4630198","2020-05-28 06:52:28","1","369","<git><commit><cherry-pick>","How to check git commit is from cherry-pick, and from which one?","<p>Can we know any git commit is from cherry-pick, and from which commit?</p>
","1","4630198","",""
"6282027","181556","2011-06-08 16:22:12","0","642","<tfs><merge><branch><cherry-pick><git-tfs>","Cherry-picking changesets after bulk merge into main","<p>Let's suppose that I have three branches:</p>

<pre><code>Main
+--Dev
+--Release
</code></pre>

<p>And several changesets in Dev: changeset 1, 2 and 3 and all three changesets affect some File. At some point I merge them all into Main and get changeset 4, that includes changes from all three changesets.</p>

<p>What should I do if at this point I have to merge changeset 2 also into Release branch? If I try to merge from Main into Release I'll have to merge changeset 4 and then manually include only necessary edits made on File. But in this case after checkin, TFS will mark whole changeset 4 as merged and will not offer it later for merge, despite the fact that changes from changeset 1 and 3 were not included.</p>

<p>I know I could have avoided this situation by merging each changeset from Dev into Main separately, but that's very tedious and doesn't seem like a right way.</p>

<p>I could also use baseless merge and go directly from Dev into Release, but that's something I consider to be an extreme measure.</p>

<p>Are there any other ways?</p>
","0","181556","",""
"23385387","2010259","2014-04-30 10:13:46","6","5955","<git><gerrit><cherry-pick>","Git cherry-pick: how to regenerate change id?","<p>We use Git together with Gerrit, and commit hook is used to generate change id for Gerrit. Now question is when cherry-picking commits, the commit hook is not triggered, hence same change id may exist for different commits in different branch. Any quick win to make change id being regenerated during cherry-picking?</p>

<p>Thanks.</p>
","0","2010259","",""
"43370349","2007533","2017-04-12 13:02:31","2","820","<git><github><release><pull-request><cherry-pick>","GitHub cherry-picking your change from master to release branch","<p>I have GitHub repository with two branches
-- master
-- release</p>

<p>master is where latest code resides. release branch is used to release the particular version of software to customer.</p>

<p>Every developer creates a new branch for his feature development and when it is done, a new pull request is created for merge to master.</p>

<p>On pull request all the tests are run. If it is green the PR is merged.</p>

<p>Now if some hot fix is to be delivered in release branch there are two options:
1) Cherry-pick the change to release branch
2) Create another pull request from dev branch to release branch</p>

<p>The first one has advantage of better history, as one can track if particular change is included in release or not.</p>

<p>But with cherry-pick no pull request is created so there is no place to run test before the changes reach release branch which at times can be risky.</p>

<p>What is better way to deal with this situation?</p>
","1","2007533","",""
"5156459","101616","2011-03-01 15:20:54","13","11818","<git><cherry-pick>","What are the differences between git cherry-pick and git show | patch -p1?","<p>I ran into a situation where <code>git cherry-pick X</code> would have some conflicts, but also created extra inserts (when verified with <code>git diff</code>).</p>

<p>I then re-ran <code>git show X &gt; my.patch</code>, and then did <code>patch -p1 &lt; my.patch</code> on my tree.
I got better results, some conflicts, but a much cleaner result.</p>

<p>What does git does special with cherry-picks? I use git 1.7.0.4.</p>

<p><strong>Edited:</strong>
By cleaner results, I mean the resulting tree matched a lot more the results of <code>git show X</code>, whereas the <code>git cherry-pick</code> included a lot more code.</p>
","2","101616","0","0"
"23590680","3625015","2014-05-11 08:47:58","1","90","<git><version-control><git-merge><git-cherry-pick>","How to commit only changes between two arbitrary commits to a branch?","<p>I have the problem that I have done my development on a wrong branch and now I want to take / cherry-pick my changes and put / rebase them on a different branch. I only want to take the text lines which has been changed, nothing more!</p>

<p>Here an example to illustrate my problem:</p>

<pre><code>C3 &lt;-- Branch 1
|
C2    C4 &lt;-- Master
|      |
C1 ----|
</code></pre>

<p>Each commit (C1,...,C4) contains a text file with the following content:</p>

<pre><code>C1:
A

C2:
A
B

C3:
A
B
C

C4:
A2
</code></pre>

<p>I want to put the changes between commit C2 and C3 onto commit C4. This means I want to take the line which has been changed (C) and put it on commit C4. The text file of the new commit C5 should look like this:</p>

<pre><code>C5:
A2

C
</code></pre>

<p>If I type in on the master branch</p>

<pre><code>git cherry-pick C2..C3
</code></pre>

<p>I get a conflict and meld opens which the following view:</p>

<pre><code>LOCAL:         BASE              REMOTE
A2                               A
                                 B
                                 C
</code></pre>

<p>This is not what I want. I only want to see the differences between C2 and C3. So it should look like this which is a lot easier to merge:</p>

<pre><code>LOCAL:         BASE              REMOTE
A2                               

                                 C
</code></pre>

<p>Is this possible in Git or is there a merge tool which supports this work flow? It makes things so much easier.</p>
","7","3625015","0","0"
"24790560","183147","2014-07-16 20:55:53","1","11847","<git><rebase><git-rebase><cherry-pick><git-cherry-pick>","Why can't I push the changes if I've cherry-picked","<p>I'm trying to remove two last commits via rebase/cherry-pick. After invoking <code>git rebase HEAD^^^ -i</code> I'm leaving only necessary commit (leaving everything up to <code>HEAD^^</code>, so I'm dropping <code>HEAD^</code> and <code>HEAD</code>). </p>

<p>After the <code>git push</code> I see the following:</p>

<pre><code>! [rejected]        dev -&gt; dev (non-fast-forward)
error: failed to push some refs to 'git@bitbucket.org:XXXXXX/YYYYYYYYY.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>But <code>git pull</code> just fast-forwards ho former HEAD commit. So, I'm ending up with what I've started with. What am I doing wrong?</p>
","2","183147","",""
"23850204","1302394","2014-05-24 22:21:11","0","1725","<git><git-cherry-pick>","Force git cherry-picks to update untracked files from nested repositories","<p>I'm currently working with a repository that has recently been broken up for the sake of close-sourcing - modules have been moved to their own repository away from the 'main' one.</p>

<pre><code>panel/
    file.a
    file.b
    module1/ [untracked by panel repository, instead tracked in own repository now]
        templates/
            base.html
            ...
        views.py
</code></pre>

<p>However, there is still work that was committed before this break-up, when the <code>module1</code> repository was still part of <code>panel</code>. My issue is working with the commits from before and after this break-up - I'm currently trying to <code>cherry-pick</code> a commit with changes to files in both <code>panel</code> and <code>module1</code>, a commit that was created when both repositories were part of <code>panel</code>. (No directory structure has changed, only <code>git</code>'s view of the repositories)</p>

<p>When I cherry pick while in the main repository's directory:</p>

<pre><code>nasonfish@nasonfish ~/P/P/p/panel2&gt; git cherry-pick 8b7316d1ebff49e95a7971f88e669f50d9cbbf86
error: refusing to lose untracked file at 'panel/module1/views.py'
error: refusing to lose untracked file at 'panel/module1/templates/module1/view-hdr.html'
error: refusing to lose untracked file at 'panel/module1/templates/module1/view-base.html'
error: refusing to lose untracked file at 'panel/module1/templates/module1/base.html'
error: could not apply 8b7316d... mybranch: This is my commit
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>I can see that I'm not looking to remove or add the files in the repository to the main repository because that just undoes the separation and combines the repositories - but I'm trying to make the <code>cherry-pick</code> apply that commit to the files in both the base and child repository without merging the two. So, <strong>is there a way to force git to act like the files in a separate nested repository are part of the main repository in some way that allows cherry-picking commits from before the repositories were separated?</strong></p>
","0","1302394","",""
"42421657","","2017-02-23 16:48:13","2","2458","<git><merge><gerrit><rebase><cherry-pick>","Cannot rebase git, merge and Gerrit","<p>I have done something really weird. And I don't know what to do know.</p>

<p>I am working with Gerrit, and it just showed me that it cannot merge because of a conflict, but there were no conflicts, but instead I guess it was because of detached <code>HEAD</code></p>

<p>And I started to do really random thing, firstly I <code>cherry-picked</code> 3 commits into one, and than I got the master branch again detached, that I tried to rebase, but got a merge conflict, so finally I got the following log </p>

<p><a href=""https://imgur.com/a/FnJqI"" rel=""nofollow noreferrer"">http://imgur.com/a/FnJqI</a></p>

<p>This is because I don't understand the difference between <code>merge</code> and <code>rebase</code></p>

<p>Could you please help me to fix the history (into one straight line) and answer the question :</p>

<p>What is the difference between <code>merge</code> and <code>rebase</code> if by default git uses <code>fast-forward</code> so the result looks exactly the same as rebase does. And in my case I couldn't make the rebase because of merge conflicts. So what is the purpose of <code>rebase</code> than ? </p>
","0","","0","0"
"44118195","4523359","2017-05-22 16:47:36","1","111","<git><git-branch><git-cherry-pick>","Git cherry pick diff between two commits, then result commit into another branch","<p>How can I cherry pick diff in branch A between commit 111 and 222, then result should be committed into branch B using git. </p>

<p>I have software release 
v1.0 (commit 111) + my custom changes (commit 222). 
I also have a release v2.0. </p>

<p>Now I would like to cherry pick changes between commit 111 and 222, and commit my custom changes over release v2.0. </p>

<p>How can I achieve this using git? </p>
","0","4523359","0","0"
"44119402","4523359","2017-05-22 18:08:02","2","502","<git><git-rebase><git-cherry-pick>","Git backward cherry-pick diff between two commits","<p>I have following commits:</p>

<pre><code>repo dev---(222)---v1.0(111)

repo orig---v2.0(333)---
</code></pre>

<p><strong><em>How can I cherry pick diff (reversely) in repo A between commit 111 and 222, then commit result into repo B using git?</em></strong></p>

<p><strong><em>I have a software repo (dev) with changes (commit 222), but the changes are done on unrelated history to original software repo (orig).</em></strong></p>

<p>I did the following (my development repo is ""dev"", original repo is ""orig""):</p>

<ul>
<li>added original repo as remote tracking to ""dev"" repo</li>
<li>checked out the ""orig"" repo commit ""v1.0(111)""</li>
<li>committed the changes to ""dev"" repo</li>
</ul>

<p>Now I have a reverse diff of my changes: 
<code>git diff v1.0(111) (222)</code></p>

<p><strong>I would like to cherry-pick those changes and rebase onto v2.0(333) in ""orig"" repo.</strong></p>

<p>However I did read in ""<a href=""https://stackoverflow.com/questions/1994463/how-to-cherry-pick-a-range-of-commits-and-merge-into-another-branch"">How to cherry pick a range of commits and merge into another branch</a>"", that 
<strong>""cherry-pick A..B"" form, A should be older than B.
If they're the wrong order the command will silently fail.</strong></p>

<p>How is it possible using git? </p>
","0","4523359","0","0"
"7197941","247372","2011-08-25 22:24:40","14","3433","<git><branch><commit><cherry-pick>","Copy 1 commit from one branch (dev) to another (stable) with clean working dir","<p>I tried to understand <a href=""https://stackoverflow.com/questions/2100851/how-to-undo-a-commit-and-commit-the-changes-into-the-other-branch-in-git"">How to undo a commit and commit the changes into the other branch in Git?</a> but I don't think it has to be that hard. (Answer is using <code>branch -f</code> and <code>stash</code> and I don't think I need those.)</p>

<p>I was working in my dev branch. Had two different commits in dirty working dir. Commit all changes in two different commits. Last commit is WIP (so dev material). Second to last is done and should be copied to <code>stable</code> branch.</p>

<p>I imagine something like</p>

<pre><code>$ git copy e87568fa stable
</code></pre>

<p>but I'm pretty sure that's not it.</p>

<p>Has cherry picking got something to do with it?</p>

<p>To be sure: I want the commit to stay on <code>dev</code>. So not <code>mv</code> it, but <code>cp</code> it.</p>

<p>I'm still baffled by all these GIT options and commands.</p>
","0","247372","0","0"
"42943810","7749478","2017-03-22 05:57:35","0","705","<git><github><git-merge><git-cherry-pick><gitattributes>","Git Merge (merge from one branch to another)","<p>I have two branch lets say one branch is <code>branch_one</code> and second one is <code>branch_two</code>. </p>

<p>Now both branches have been used paralleled for different set of developments. </p>

<p>Now, I want to merge some commits from <code>branch_two</code> to <code>branch_one</code>, but based on start of time. </p>

<p>I mean <code>branch_two</code> has around 100 commits we want to merge from 51 commit on-wards on <code>branch_one</code>.</p>
","2","7749478","",""
"25367298","3088045","2014-08-18 15:52:18","4","14707","<git><merge><branch><cherry-pick><git-merge-conflict>","Solve cherry-pick conflicts between diverged branches without committing","<p><em><strong>Edit:</strong> beware, this is a confused question. It starts with some wrong assumptions and figures that out, one <em>edit</em> after the other.</em></p>
<hr />
<p>I got two branches (<em>master</em> and <em>feature</em>) that diverged.</p>
<pre><code>master  - C1 - C3
            \
feature      C2 - C4 - C5
</code></pre>
<p>C2 and C4 are just dirty commits with temporary code, that I don't want to have into the final merge/rebase of the two branches.</p>
<p>I usually perform a:</p>
<pre><code>git checkout master
git cherry-pick C5 (last commit from the feature branch)
</code></pre>
<p>But this time I have C3 that conflicts and I cannot pick the commit.</p>
<p>What I tried is rebasing C3 into the <em>feature</em> branch, so to not have conflicts when cherry-picking.</p>
<pre><code>git checkout feature
git rebase master
</code></pre>
<p>Now I got this</p>
<pre><code>master  - C1 - C3
                \
feature          C2 - C4 - C5
</code></pre>
<p>Seems fine, but if I try to <em>cherry-pick</em> again onto master I still get conflicts (on some empty space I removed from some files).<br />
<em><strong>A posteriori:</strong> can't workaround git conflicts. Rebase does no magic on there.</em></p>
<p>Git is telling me to resolve the conflicts, to add the files, and commit.
I can solve the conflicts manually, but don't want to commit them just as a conflict resolution.</p>
<p><strong>I want to avoid commits in my history about something that is not related directly to implementations.</strong> I would not even know what to write as commit message.</p>
<ul>
<li>Why I still get conflicts after the <em>rebase</em>? <em>(<strong>A posteriori:</strong> because <code>rebase</code> just moves copies of commits, has no power to resolve conflicts)</em></li>
<li>And how can I get C5 to be merged/cherry-picked to <em>master</em> without additional commits? <em>(<strong>A posteriori:</strong> by solving the conflict in a previous commit)</em></li>
</ul>
<p><em>I usually prefer to cherry-pick cause I can avoid the 'useless' merge commit and have just commits regarding code changes. Then after that I delete the branch, after a while I'm sure I don't need it anymore.</em><br />
<em>(<strong>A posteriori:</strong> practically, a rebase workflow)</em></p>
<p><strong>[[ EDIT ]]</strong></p>
<p>The wierd behaviour is that C5 and C3 conflict on files that are not changed on C3.</p>
<p>Infact, all the detected conflicts are just empty on the master branch</p>
<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
[ added code ..................... ]
[ .......... from ................ ]
[ ............... 'feature' branch ]
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 581g52d... &quot;Commit message from 'feature' C5 &quot;
</code></pre>
<p>What I need to <em>'solve'</em> is just deleting the conflict tags from the conflicting files.</p>
<ul>
<li>I don't get the reasons of the conflicts  <em>(<strong>A posteriori:</strong> the highlighted lines of code that were added in C5 <code>581g52d</code> are removed in C3; git cannot decide which change has priority and was intended to stay)</em></li>
<li>I would like to solve it manually and then <em>merge/cherry-pick</em> without having to create a new additional (merge) commits</li>
<li>
<ul>
<li>cause the commit will just solve some conflicts with a branch that in the future will be deleted <em>(<strong>A posteriori:</strong> this is not bad, as it gives a hint of the workflow; although in the rebase workflow I follow usually the sequence of commit <em>appears</em> like it was a single flow of work with no branches used)</em></li>
</ul>
</li>
<li>
<ul>
<li>when deleted the branch, that commit will have no sense/position in the repository history  <em>(<strong>A posteriori:</strong> see previous point)</em></li>
</ul>
</li>
</ul>
<p><strong>[[ EDIT 2 ]]</strong></p>
<p>Moreover, if I try to <code>git cherry-pick</code> <em>master/C3</em> to <em>feature</em> I get:</p>
<blockquote>
<p>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
The previous cherry-pick is now empty, possibly due to conflict resolution.</p>
</blockquote>
<p>I don't get why I have conflicts in the opposite direction (from <em>feature</em> to <em>master</em>)</p>
<p><strong>[[ EDIT 3 - Retrying from the beginning! ]]</strong></p>
<p>Here is what I tried too.</p>
<ul>
<li><p>Made two copies of the <em>master</em> branch, with C3 as last commit, named: <em>master_copy</em> and <em>repeat_feature</em></p>
</li>
<li>
<ul>
<li><code>git checkout master</code> / <code>git branch master_copy</code> / <code>git branch repeat_feature</code></li>
</ul>
</li>
<li><p>Cherry-picked every commit from the <em>feature</em> branch, until C5, into <em>repeat_feature</em></p>
</li>
<li>
<ul>
<li><code>git checkout repeat_feature</code> / <code>git cherry-pick C2^..C5</code> (from <em>feature</em>)</li>
</ul>
</li>
<li>
<ul>
<li><em>(I got <strong>NO CONFLICTS</strong>)</em></li>
</ul>
</li>
<li><p>Tried to cherry-pick C5 into <em>master_copy</em>, from <em>repeat_feature</em></p>
</li>
<li>
<ul>
<li>remember that <em>repeat_feature</em> was started from C3 (so, if there were some conflict, those should be raised while cherry-picking from C2 to C5)</li>
</ul>
</li>
<li>
<ul>
<li><code>git checkout master_copy</code> / <code>git cherry-pick repeat_feature_C5</code></li>
</ul>
</li>
</ul>
<p>I still got the same conflicts!<br />
<em>(<strong>A posteriori:</strong> can't workaround it, don't avoid conflict resolution)</em></p>
<p><strong>Even if I was starting from the same C3 commit (when cloned the branch to <em>repeat_feature</em> branch) and trying to <em>cherry-pick</em> to the same C3 commit (into <em>master_copy</em>)!</strong></p>
<p>I totally don't get the point of what's happening and why I get these empty conflicts that prevent me from moving my feature to the master branch.</p>
<p>An expert's suggestion is needed here.</p>
","13","3088045","",""
"7222883","124303","2011-08-28 18:10:05","1","617","<git><merge><rebase><cherry-pick>","Can cherry-picking from a branch cause trouble rebasing this branch to master","<p><strong>Context</strong>: I have an experimental branch <code>crazy-idea</code> where I did some wild things in a dedicated sub-dir <code>madness/{src,docs}</code>. A ton of commits, with notes, pictures, hacky scripts to create plots.  Now that I have fully understood what I'm doing it's time to edit the actual source files in <code>src/</code> by adding new functions and alter existing ones.</p>

<p>Since the mess in <code>crazy-idea</code> would clutter the history of master, a new branch <code>good-idea</code> was created to merge the changes in <code>src/</code> into master.  Convince suggests that I alter the files in <code>src/</code> still being in <code>crazy-idea</code> and then cherry-pick the commits from within <code>good-idea</code>.</p>

<p><strong>Now my question</strong>: Given that <code>good-idea</code> was merged into master and some commits were done in master after this event.  When I go back to <code>crazy-idea</code> to further iron out some other aspect of my idea, is there trouble to be expected in <code>src/</code> while rebasing to master?</p>

<p>The alternative is to leave <code>src/</code> within <code>crazy-idea</code> alone, make a copy of the sub-dir and look at my notes this way while coding directly in <code>good-idea</code>. </p>

<p>What do you guys suggest is smarter?</p>

<p><strong>EDIT</strong> Well, as expected I got conflicts during </p>

<pre><code>git rebase master
</code></pre>

<p>in <code>crazy-idea</code>.  In future I will introduce changes only in exactly one branch and use cherry-picking only when I know that it's more or less abandoned.</p>

<p><strong>EDIT</strong> I solved my situation as follows:
There have been N commits with changes in <code>src/</code>.  Lets say the last non <code>src/</code> changing commit had the message 'foobar'.  After the rebase failed:</p>

<pre><code>$ git rebase --abort
$ git reset --hard HEAD^
HEAD is now at ...
# more hard resets, I think actually N
HEAD is now at ... foobar
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying ..
...
</code></pre>

<p>Done.  This evidently isn't as straight forward as I hoped, but not too bad either.  I think I will go this route instead of copying <code>madness/</code>.</p>
","0","124303","0","0"
"44179109","5806893","2017-05-25 11:11:11","0","1640","<git><tortoisegit><git-cherry-pick>","TortoiseGit cherry pick failed! Skip this commit?","<p>I have the problem using TortoiseGit:</p>

<p><a href=""https://i.stack.imgur.com/Dz2Fl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Dz2Fl.png"" alt=""enter image description here""></a>
<a href=""https://i.stack.imgur.com/iTLlf.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iTLlf.png"" alt=""enter image description here""></a></p>

<p>Why can this happen while doing fetch and rebase?
The <code>bundle.js</code> file is generated by webpack.</p>
","0","5806893","",""
"43181686","959734","2017-04-03 10:01:19","0","628","<git><github><git-cherry-pick>","revert back the branch","<p>I have a <strong>master</strong> branch and a <strong>feature</strong> branch.</p>

<p>I have some commits in <strong>feature</strong> branch, and I <code>cherry-pick</code>ed them to <strong>master</strong> branch.</p>

<p>So, now my <strong>master</strong> branch contains those commits already. I noticed then I shouldn't do those <code>cherry-pick</code>s.</p>

<p>Now, how can I revert my <strong>master</strong> branch back to the status before cherry-pick?</p>
","0","959734","",""
"43185334","1532168","2017-04-03 13:00:29","0","654","<git><git-merge><cherry-pick><git-cherry-pick>","Branch rescue: cherry-pick merge commits?","<p>I need to rescue a feature branch which got some duplicated commits due to a rebase fail. Currently the only way to fix it is to cherry-pick all commits off this feature branch into master (see background below).</p>

<p>We started with the most recent state of master and then started cherry-picking our feature-branch commits. However we sometimes merged master into our feature branch and I'm unsure if I also need to cherry-pick those merge commits. I think not, because I already resolved the conflicts when cherry-picking into the current master. Is that correct?</p>

<p>PS: Background</p>

<p>We discovered the duplicated commits too late and the feature branch already has 100 more commits on top. Due to our CI structure we can't just revert the duplicate commits. Our first try at rescuing was to rebase and just ommit the duplicate commits. This does not work as it changes revision ids of some commits which are not part of our feature branch (we can't change revison ids of commits already in master!). Therefore our current mode of rescue is to just cherry-pick all changes in this feature branch into master.</p>
","0","1532168","",""
"63159692","584714","2020-07-29 17:55:26","0","3821","<git><visual-studio><azure-devops><cherry-pick>","Visual Studio - unable to Create cherry Pick from grey commit in the graph","<p>In Visual Studio, I can pull latest from my source branch.</p>
<p>From the history graph, I can see all the commits.</p>
<p>From the &quot;train track&quot; graph, the nodes are colored, most are blue circles, but I have a few that are gray.</p>
<p>If I right-click on an entry that is blue, I can select the option to perform a cherry pick, but not when it's gray.</p>
<p>Why is this - what does &quot;gray&quot; signify?</p>
","1","584714","",""
"6334975","79125","2011-06-13 19:05:52","2","201","<git><git-submodules><cherry-pick>","Extracting git history for part of a git repo to create a git submodule -- cherry-pick?","<p><em>A similar question, <a href=""https://stackoverflow.com/questions/1670970/how-to-cherry-pick-multiple-commits"">How to cherry-pick multiple commits</a>, assumes that the commits are consecutive.</em></p>

<p>I have a module that I downloaded as a tarball. I've included it in my main project's git repo and made changes to it. These changes are interspersed with other commits for the main project.</p>

<p>I've realized the error of my ways and want to replace the module with a git submodule. I could just add the current state, but I want to keep my git history. </p>

<p>How can I move each individual commit into my new repo?</p>

<hr>

<p>I think I can do this with cherry-pick, but it's time-consuming. Here's what I have:</p>

<p>Setup my new repo with the main project as a remote (so I can cherry pick):</p>

<pre><code>cd ~/snippets
git remote add main ~/.vim/
git fetch main
</code></pre>

<p>I can see the relevant commits in the main project with <code>git log ~/.vim/snippets</code></p>

<p>I can make a script to cherry pick with </p>

<pre><code>cd ~/.vim/snippets
git log --oneline --reverse --format=""format:git cherry-pick %h #%s"" .
</code></pre>

<p>But if I run the script, there are merge conflicts. After I resolve a merge and commit, I need to remove the successful bits from my cherry pick script and run it again. I'd like to do this automatically, like git rebase.</p>
","0","79125","",""
"62135937","5593661","2020-06-01 15:51:07","0","257","<git><git-cherry-pick><git-cherry>","Git: Cherry-pick adding code that not in the commit","<p>I am using cherry pick to add commits from my branches on github. I have a branch with only one commit and that is related to creating a new function. when, I try to add that commit using cherry-pick, I got a conflict with 3 incoming funcitons!</p>

<pre><code> git cherry-pick 15sh -- no-commit
</code></pre>

<p>and the same commit in my PR on github is only adding one function, but got 3 function conflict!. It's imply adding two other funcitons from another PR!</p>
","1","5593661","",""
"63175269","6712810","2020-07-30 14:25:09","0","110","<git><merge><git-merge><git-cherry-pick><git-merge-conflict>","3-way git merge and manually picking each difference","<p>Regarding git: I have two branches b1 and b2 with a common ancestor a. Is it possible to merge b1 and b2 in such a way that i see all the diffs of b1 and b2 up until a, indicated with &lt;&lt;&lt; and &gt;&gt;&gt; inside the code so that I can choose for each diff which one I would like to have?</p>
<p><strong>Edit:</strong> This question is not primarily about conflict-resolution, but about seeing all the differences between two branches, highlighted inside the code, whether they are conflictual or not. So I can choose which changes I would like to keep. Currently those problematic changes are merged into our development branch without any conflict. During the merge I get two types of files: <em>modified</em> and <em>both modified</em>. The latter I can review and decide to stage. The former are somehow staged without my consent!</p>
","0","6712810","",""
"63188678","925913","2020-07-31 08:50:51","3","579","<git><pull-request><git-fork><git-cherry-pick>","How do I make a PR from a forked repo, for only certain files, but all commits on them?","<h2>tl;dr</h2>
<ul>
<li>I've forked a repo and made many commits on many files, all on the master branch.</li>
<li>Now I want to create a pull request for <strong>all</strong> commits on <strong>select</strong> files, to send back to the original repo's author. For example, I want to send back some improvements, but not files I've added.</li>
<li>I don't care if all the commits get squashed into a whole new one.</li>
</ul>
<h2>What I've tried...</h2>
<p>I used Perforce most of my career and am still getting used to git, so I think I'm either not realizing that my scenario doesn't match the scenarios in the following posts, or I'm missing some implicit steps that are obvious to regular git users but not to me.</p>
<ul>
<li><a href=""https://stackoverflow.com/q/12660839/925913"">Pull-Request for only certain files/commits</a></li>
<li><a href=""https://stackoverflow.com/q/1405030/925913"">Using GIT, how can I selectively merge changes from one commit on another &#39;fork&#39;?</a></li>
<li><a href=""https://stackoverflow.com/q/30875001/925913"">Cherry picking changes to specific files from a range of commits</a></li>
<li><a href=""https://stackoverflow.com/q/5717026/925913"">How to git-cherry-pick only changes to certain files?</a></li>
<li><a href=""https://stackoverflow.com/q/1670970/925913"">How to cherry-pick multiple commits</a></li>
</ul>
<h2>What I'm seeing...</h2>
<p>It seemed whenever I cherry-picked, I ended up with a branch with no changes (which makes sense though, since they're already committed to master, right?—then how do I create this &quot;topic branch&quot; I see being mentioned?) And now I have run several commands I don't fully understand (e.g. <code>git remote add ...</code>) and also possibly interchanging the original author's repo versus my forked repo in them, so it's becoming hard to tell whether things aren't working because I've messed my environment up.</p>
<h2>Cleaning Up</h2>
<p>@Omer's answer worked great. I then did a</p>
<pre><code>git reset --hard HEAD
</code></pre>
<p>to clean up. The original author merged the PR, and I sync'ed to it:</p>
<pre><code>git remote add upstream git://github.com/&lt;author&gt;/&lt;repo&gt;.git
git pull upstream master
</code></pre>
","2","925913","0","0"
"43642452","4933053","2017-04-26 18:59:22","0","123","<git><merge><rebase><cherry-pick>","How to linearize “splintered” merging history in Git?","<p>I have read through the basics of the <a href=""https://git-scm.com/book/en/v2/"" rel=""nofollow noreferrer"">git book</a> trying to linearize the  branch red from with the branch blue got merged into. To easier review the history I try to have only one branch and no junction. What options do I have to do this and what is best? </p>

<p><a href=""https://stackoverflow.com/questions/31121213/how-to-linearize-splintered-merging-history-in-git"">This</a> answer suggests to <code>reset --soft</code>, but here demo assumes it grew a lot since the merge.
It is ok to have the branch blue changes be added to red before <code>af</code>  or preferably after <code>9c</code> commit.</p>

<pre><code>* 5356e62 vimdiff solved
* c1ccf86 red forward
*   51fbd33 Merge branch 'blue' into red
|\  
| * 96575dc new file
| * 1d7f531 some line and blue branch 3
* | 9cc3291 new file
* | 92569c6 another commit
* | f8d3ab2 blue branch 3
|/  
* af8b651 init
</code></pre>
","0","4933053","",""
"6631649","258131","2011-07-08 23:38:52","5","228","<git><cherry-pick>","bookkeeping cleanup of equivalent changes across branches in git","<p>I'm attempting to cleanup a large number of topic branches, primarily so that the branch overview for <code>master</code> in github no longer displays spurious ""n ahead"" indicators in inactive topic branches due to the presence of identical changes.</p>

<p>Without these spurious indicators, this overview page would offer a great way to see at a glance if any commits from old topic branches were inadvertently missed and not merged back down into <code>master</code>.</p>

<p>In the diagram below, <code>Y</code> is a commit in branch <code>topic</code> that was later applied to <code>master</code> as <code>Y'</code> (so they have different sha1 hashes, but identical patch ids).</p>

<pre><code>A --- B --- C --- Y' --- E    &lt;-- master
       \ 
        X --- Y               &lt;-- topic
</code></pre>

<p><code>git cherry master topic</code> appropriately reports:</p>

<pre><code>- Y
</code></pre>

<p>But if I try to clean this up by issuing a <code>git merge topic</code> from <code>master</code>, I get a merge conflict since change <code>E</code> in <code>master</code> has since altered the context against which the patch applied.</p>

<p>Is there a way to tell <code>master</code> ""Hey, you really do have <code>Y</code> already, so you can stop reporting that you don't.""? (Being able to do this in such a way that it could be applied automatically/programmatically is key.)</p>
","4","258131","0","0"
"62386237","5534202","2020-06-15 10:26:00","0","99","<git><github><git-log><git-cherry-pick><git-rev-list>","git rev-list omit cherrypicked commits doesn't work","<p>I'm using <code>git rev-list</code> (because that's what GitPython's <code>iter_commits</code> is running behind the scenes) to obtain the changes present in one branch and not the other.</p>

<p>I want to omit all of the commits that were cherry-picked into the older branch.</p>

<p>This is the tree of commits before cherry-pick:
<a href=""https://i.stack.imgur.com/AAIyx.png"" rel=""nofollow noreferrer"">git log before cherry-pick</a></p>

<p>Now, I want to cherry-pick commit ""6"" into ""release-6.6"":</p>

<pre><code>git checkout release-6.6
git cherry-pick 24e0f0c
</code></pre>

<p>This is the tree of commits after cherry-pick:
<a href=""https://i.stack.imgur.com/kYL0O.png"" rel=""nofollow noreferrer"">git log after cherry-pick</a></p>

<p>Now I want to compare between branch <code>release-6.6</code> and branch <code>release-6.8</code> and get only commits <code>5,7,8</code>:</p>

<pre><code>git rev-list release-6.6..release-6.8
</code></pre>

<p>And the output is 4 commits which are: <code>5,6,7,8</code>.</p>

<p>I even try:</p>

<pre><code>git rev-list release-6.6..release-6.8 --cherry-pick
git rev-list release-6.6..release-6.8 --cherry-pick --right-only
git rev-list release-6.6..release-6.8 --cherry-pick --left-right
</code></pre>

<p>but none of them works. </p>

<p>What am I doing wrong? how can I get only commits <code>5,7,8</code>?</p>

<p>Thanks</p>
","2","5534202","",""
"43672881","2311182","2017-04-28 05:49:32","1","244","<git><git-cherry-pick>","How to cherry-pick a branch that contains merges","<p>We develop new features in feature branches that branch off <code>master</code>. Sometimes, such features shall be back-ported to a previous version of the software, and we'd like that preferably with the history intact.</p>

<p>I understand that I can use <code>git cherry-pick A..B</code> to pick the range of commits. However, long lived feature branches might contain merges to keep them up to date with master. When encountering merge commits, cherry-pick aborts.</p>

<p>Is there some (preferably canonical) way to do so? Something like</p>

<pre><code>git cherry-pick --ignore-merges master...feature
</code></pre>

<p>For reference, the branch setup looks somewhat like this. I'd like to cherry-pick the commits H, K and K from my feature branch, into version_old.</p>

<pre><code>A - B - C - D - E - L [master]
|       \       \
|        H - J - M - K [feature]
\
 F - G [version_old]
</code></pre>
","2","2311182","0","0"
"24870265","1795026","2014-07-21 16:40:35","0","124","<git><git-submodules><git-commit><git-cherry-pick>","How to update specific directory on a git repository?","<p>I have two repository, one is a bit outdated, but I use both during the development. (It has historical reason to do so, but it doesn't matter.)</p>

<p>I have a sub-directory which is an almost independent part of the project, a small application. I would like to update only this tool's directory from the newer repo. Practically, I need the same version from this application in the top of both repo.</p>

<p>Is there any way to move only the application related commits to the other repository?</p>

<p>The commits are not in a ""straight line"", I had tons of commits and some of them were patch for this application.</p>

<p>Maybe somehow with cherry-pick?</p>
","0","1795026","",""
"45626759","1084174","2017-08-11 04:00:55","1","151","<git><version-control><git-merge><git-cherry-pick><git-cherry>","Git - How to filter commits while using ""git cherry""","<p>I wonder if there is a way to filter only commits to be applied when we use,</p>

<pre><code>git cherry dev
</code></pre>

<p>On other words, lets assume above command produces output below,</p>

<pre><code>- 33d5713b613f56938f23f8f61c55e63c34a92720
+ fe77980a11d85ee3a14d45274b0b6db4af8b6574
- 8e642df428532339adee523234da3ce6c1def989
+ 0a747f984d3244e9b5f1b6922d77b0ea5c34f9e0
- 0e3a730cd57bd6898fd444c75bf802c0cbf8000a
+ 40f157ad996bc15b46aa0f25db4f1c4fa3bf3e29
</code></pre>

<p>But I am interested to see only outputs like below,</p>

<pre><code>+ fe77980a11d85ee3a14d45274b0b6db4af8b6574
+ 0a747f984d3244e9b5f1b6922d77b0ea5c34f9e0
+ 40f157ad996bc15b46aa0f25db4f1c4fa3bf3e29
</code></pre>

<p>that started with <code>+ sign</code>.</p>
","2","1084174","",""
"9000918","353612","2012-01-25 10:13:35","13","8317","<git><cherry-pick>","How to cherry-pick interactively","<p>I have hacked on a branch for a while, and this branch won't be merge before long. But there are some commits I'd like to merge in the master anyway.</p>

<p>Is there a way to get an interactive cherry-pick, that would show the commits and their changes, and then let me select the ones I'd actually like to cherry-pick?</p>
","0","353612","0","0"
"12626754","1270259","2012-09-27 17:16:12","93","92654","<git><cherry-pick><git-cherry-pick>","Git cherry-pick syntax and merge branches","<p>So I have done countless cherry picks before and it seems that I must fail at life with this right now, I am trying to cherry pick from one branch to another which should be easy, how ever I get an error about it being a merge but not -m was given?</p>

<pre><code>$ git cherry-pick a8c5ad438f6173dc34f6ec45bddcef2ab23285e0
error: Commit a8c5ad438f6173dc34f6ec45bddcef2ab23285e0 is a merge but no -m option was given.
fatal: cherry-pick failed
</code></pre>

<p>That looks wrong.......it should be:</p>

<pre><code>$ git cherry-pick a8c5ad438f6173dc34f6ec45bddcef2ab23285e0
</code></pre>

<p>Since when do I have to supply a -m function?</p>
","1","1270259","0","0"
"64179161","7309859","2020-10-02 23:03:31","0","239","<git><cherry-pick>","git cherry-pick isn't cherry-picking commits","<p>Excuse my bad git but I had a git log like this:</p>
<pre><code>commit fc9ab1fe1cfc2ac1e82e2de18a4244d94a7bb89f
Author: 
Date:   

    message 4

commit 3417248ab0953d715b3318f64635a825473bf73d
Author: 
Date:   

    message 3

commit da223a0b1e333a935b548a93f00263bb5b554cf7
Author: 
Date:   

    message 2

commit 1910a6cd9586e905258c6c9dcace2a7800a55f26
Author: 
Date:   

    message 1
</code></pre>
<p>I wanted to keep the earliest commit, do a different commit in place of the second commit and then put the third and fourth commits on top of that. e.g.</p>
<p>Old:
fc9ab1fe1cfc2ac1e82e2de18a4244d94a7bb89f
3417248ab0953d715b3318f64635a825473bf73d
da223a0b1e333a935b548a93f00263bb5b554cf7
1910a6cd9586e905258c6c9dcace2a7800a55f26</p>
<p>New:
fc9ab1fe1cfc2ac1e82e2de18a4244d94a7bb89f
3417248ab0953d715b3318f64635a825473bf73d
replacement_commit
1910a6cd9586e905258c6c9dcace2a7800a55f26</p>
<p>Here's how I got to &quot;Old&quot;</p>
<pre><code>#changes
git add .
git commit -m &quot;message1&quot;
#changes
git add .
git commit -m &quot;message2&quot;
#changes
git add .
git commit -m &quot;message3&quot;
#changes
git add .
git commit -m &quot;message4&quot;
git push
</code></pre>
<p>Here is how I tried to make my changes</p>
<pre><code>git pull
git reset 1910a6cd9586e905258c6c9dcace2a7800a55f26
git reset #removes all the later commits from staging
#make changes
git add .
git commit -m &quot;replacement_commit&quot;
#now to cherry pick the other two (which have already been pushed to a repository for this branch)
git cherry-pick 3417248ab0953d715b3318f64635a825473bf73d^..fc9ab1fe1cfc2ac1e82e2de18a4244d94a7bb89f
</code></pre>
<p>It doesn't work. Output:</p>
<pre><code>-&gt; % git cherry-pick 3417248ab0953d715b3318f64635a825473bf73d^..fc9ab1fe1cfc2ac1e82e2de18a4244d94a7bb89f
On branch my_branch
Cherry-pick currently in progress.

nothing to commit, working tree clean
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

and then use:

    git cherry-pick --continue

to resume cherry-picking the remaining commits.
If you wish to skip this commit, use:

    git cherry-pick --skip
</code></pre>
<p>Is there a way I can fix this or a better way I can be doing this?</p>
","0","7309859","",""
"45986228","284598","2017-08-31 16:30:23","2","2676","<git><azure-devops><git-cherry-pick>","VSTS git cherry picking and branch strategy","<p>In VSTS we use git cherry picking as recommended <a href=""https://www.visualstudio.com/en-us/articles/git-branching-guidance#port-changes-back-to-the-master-branch"" rel=""nofollow noreferrer"">here</a> to port changes back to the master branch. In short, we do exactly as recommended on that page (VSTS GUI does step 1 automatically as part of cherry picking):</p>

<ol>
<li>Create a new feature branch off the master branch to port the changes.</li>
<li>Cherry-pick the changes from the release branch to your new feature branch.</li>
<li>Merge the feature branch back into the master branch in a second pull request.</li>
</ol>

<p>With this process, we need to ensure that we haven't missed cherry picking anything back to master. All release branch changes are <em>supposed</em> to be cherry-picked back to master. However, that step has been forgotten on occasion (it's bound to happen with a manual process). So we cover the potential gap by manually comparing release branches to master as part of our development lifecycle.</p>

<p><strong>The pain that we're feeling is that the branch comparison tools in the VSTS web app don't understand that a changeset in one branch has been cherry-picked back to another branch.</strong> As a result, it takes a good bit of time to understand whether anything is out of sync.</p>

<p><strong>Is there a way of making the comparison tools understand that a changeset in one branch is the changeset that was cherry-picked to another branch?</strong></p>

<p>Ideally, this process would be done in the same interface, but we're open to other options.</p>
","5","284598","",""
"13587758","1285655","2012-11-27 15:41:36","1","141","<git><git-merge><git-cherry-pick>","git cherry-pick and merge","<p>My current branch is branch-X. I cherry-pick a commit Y from branch-Z and later plan to merge branch-Y into branch-X. Will commit Y be applied again during the merge?</p>

<p>Matthias</p>
","0","1285655","",""
"17560865","1104157","2013-07-10 01:08:51","5","3674","<github><merge><rebase><cherry-pick>","Github pull request loaded with empty file changes","<p>Ok, I've got a problem that I have no idea how to go about solving.  </p>

<p>First, a bit of history:</p>

<p>I pulled from my upstream to bring in changes and merged them with the branch I was working in.  At the time, I may have been using a console window with root access.  I say this because I noticed a day later I couldn't save to a lot of the files in my local repo.  I noticed the owner / group had been changed to root and permissions were 644.  After going through and hunting down all of the screwed up files, I then pushed some changes I had made back to my remote working branch.</p>

<p>A week later (now), and I've added several other commits to an open pull request from my remote branch.  In the middle of them was the commit I made after fixing my local repo file permissions.  I noticed it has some 1200 ""empty"" files (no changes).  I'm a little concerned that merging this pull request upstream could cause big problems and I have no idea how to remove this one commit or if it's even possible...</p>

<p>I tried creating a new branch and using cherry-pick to get all but the one commit, but I've removed files and couldn't merge the older commits that saw a ""conflict"" between the file that existed at the time and one that no longer exists in the local repo...</p>

<p>Anyway, any thoughts?</p>
","0","1104157","0","0"
"17582874","1165055","2013-07-10 23:53:43","1","349","<git><merge><git-cherry-pick>","Git: How do you merge a file with a version of itself from a previous commit?","<p>There are some changes I made to a file in a commit A, then I undid the changes by mistake and went on further to make changes in commits B and C.</p>

<p>I want the changes in commit A to be in my file, but the changes in B and C should not be lost either.</p>

<p>Let's say my branch is now at C.</p>

<p>I don't want to </p>

<pre><code>$ git checkout --patch 
</code></pre>

<p>because I want the file to contain the changes I made in B and C and doing a checkout of the file from commit A will rewrite the file in both the index and the working tree.</p>

<p>I can't do a cherry-pick because commit A is a merge commit(there are two contributors to the repository and I deleted the changes my mentor made by mistake in the subsequent commits after I merged them) and I might end up with a mess if I specified either parent. </p>

<p>Apart from manually copying the changes I want in the file, is there any other way to accomplish this?</p>
","0","1165055","",""
"64935577","1110590","2020-11-20 19:16:20","1","276","<git><cherry-pick>","How can I revert the master branch to an old commit and cherry-pick a commit that was in mater?","<p>I have a change that I commited to my master branch. Other devs have also merged other feature branches into master after I made my commit. How would I revert master to a commit before mine and then merge only my change into master?</p>
<p>Right now I was planning to do these steps:</p>
<pre><code>git checkout master
git reset --hard e3f1e37 
git push --force origin master
</code></pre>
<p>and then I would want to cherry-pick my change in. However, the branch that had my change has been deleted and only exists in the current master. Is there a way I can still cherry-pick this in?</p>
","0","1110590","",""
"9950466","5486","2012-03-30 21:10:56","15","9805","<git><git-rebase><merge-conflict-resolution><git-cherry-pick>","Why does git show a conflict between two apparently identical added files?","<p>I have a project that was started in TFS, then moved to Git.  Unfortunately, the guy who moved it to Git just checked in the current files instead of using git-tfs.  I'm trying to rebase his new commits in Git on top of the commits I pulled from TFS using git-tfs.</p>

<p>To do this, I'm simply rebasing his commits on top of the git-tfs commits.  (I realize this will mess up remote Git branches, but we're a small team and it'll be OK.  I've also tried cherry-picking instead but I hit the same problem.)</p>

<p>The problem I'm running into is a set of conflicts that look like this:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
namespace OurNiftyProject
{
    public enum CardType
    { 
        Visa = 0,
        MasterCard = 1
    }
}
||||||| merged common ancestors
=======
namespace OurNiftyProject
{
    public enum CardType
    { 
        Visa = 0,
        MasterCard = 1
    }
}
&gt;&gt;&gt;&gt;&gt;&gt;&gt; Add a bunch of stuff.
</code></pre>

<p>It appears that this is a conflict between a commit from the TFS side that added these files, and a commit on the Git side that added them (as the Git repo started out empty).</p>

<p>The logical thing would be to skip this commit, perhaps, but there are a few files in it (say ten out of a couple hundred) that are new.  Those don't cause conflicts, of course.</p>

<p>Why can't Git figure out on its own that the two files are identical?  Even if I use <code>--ignore-whitespace</code> when I rebase, Git still shows dozens of files like this that appear to be identical.  I'm at a loss for how to resolve this.</p>
","3","5486","0","0"
"33065110","2095511","2015-10-11 12:45:52","1","2270","<git><merge><revert><cherry-pick>","Git revert/cherry-pick to a commit beyond a merge","<p>This is my situation:</p>

<p>I am trying to place an <strong>exact</strong> copy of an earlier commit on top of my latest commit. However, </p>

<ol>
<li>I have already pushed to remote, so do not want to simply <code>git reset
--hard</code> (or, I would be happy to do so if I could somehow then add the earlier commit back on top of the latest commit)</li>
<li>in between my latest commit and the desired commit, I created and merged a branch, and this seems to give me problems/conflicts (otherwise would do a revert)</li>
<li>any solutions I have tried seem to retain additional changes from the other branch, which I do not want (I want my copy to look exactly like a checkout of the earlier commit)</li>
</ol>

<p>I know this is probably a simple problem, but after much searching/trial and error I still cannot find a solution. Any help would be greatly appreciated. </p>

<p>In case you're wondering why I want to do something like this, the original motivation was in order to easily use <code>git-latexdiff</code> to compare two versions separated by a merge. </p>

<h2>To reproduce this scenario/see an example:</h2>

<p>In order to make this scenario reproducible, the commands below will make a folder called <code>tryrevert</code> with the necessary structure:</p>

<pre><code>mkdir tryrevert; cd tryrevert; git init; echo 'line 1 commit 1' &gt; file1.txt; git add .; git commit -m 'commit 1'; echo 'line 2 commit 2 only want these two lines' &gt;&gt; file1.txt; git add .; git commit -m 'commit 2 - WANT THIS ONE'; git branch sidebranch; git checkout sidebranch; echo 'another file - only in sidebranch' &gt; sidefile.txt; git add .; git commit -m 'commit 3 - sidebranch work'; git checkout master; echo 'extra work' &gt;&gt; file1.txt; git add .; git commit -m 'commit 4 - some more work on master'; git merge sidebranch -m 'commit 5 - the merge'; echo 'final work after the merge' &gt;&gt; file1.txt; git add .; git commit -m 'commit 6 - latest commit '
git log --graph --all --decorate --oneline
</code></pre>

<p>and will output the following commit tree (excluding <code>origin/master</code>):</p>

<pre><code>* 7c4c7a1 (HEAD, origin/master, master) commit 6 - latest commit
*   5b0077c commit 5 - the merge
|\
| * 20a1164 (sidebranch) commit 3 - sidebranch work
* | 3a5a24f commit 4 - some more work on master
|/
* 925228b commit 2 - WANT THIS ONE
* 52af39e commit 1
</code></pre>

<p>(I left <code>sidebranch</code> where it is rather than moving it up to <code>master</code> for clarity.)</p>

<p>So <strong>what I want is</strong>:</p>

<pre><code>* abcdefg (HEAD, master) COPY OF commit 6 
* hijklmn COPY OF commit 2
* 7c4c7a1 (origin/master) commit 6 - latest commit
*   5b0077c commit 5 - the merge
|\
| * 20a1164 (sidebranch) commit 3 - sidebranch work
* | 3a5a24f commit 4 - some more work on master
|/
* 925228b commit 2 - WANT THIS ONE
* 52af39e commit 1
</code></pre>

<p>Notes:</p>

<p>i) <code>sidebranch</code> creates <code>sidefile.txt</code>, and all efforts I have at reverting to <strong>commit 2</strong> end up containing <code>sidefile.txt</code> (and I do not want <strong>COPY of commit 2</strong> to contain <code>sidefile.txt</code>). I would also like to avoid having to deal with merge conflicts in <code>file1.txt</code>.</p>

<p>ii) I've tried <code>rebase -i</code> and <code>cherry-pick</code>, but without success (perhaps I am doing it incorrectly) - I keep running into conflicts. </p>

<p>iii)  If I did not have the merge, something like:</p>

<pre><code>git revert --no-commit master...HEAD~3; git add .; git commit -m 'reverting to commit 2'
</code></pre>

<p>would work for me, but the merge seems stop this exact line from working.</p>

<p>iv) I have spent time looking at many posts on stackoverflow, but couldn't find one that dealt with this specific scenario...</p>

<h2>Edit:</h2>

<p>(apologies in advance for the long edit, but want to clarify the state of the two commits)</p>

<p>In response to @Juan's question, and to make it clear, commit 6 contains</p>

<p><code>file1.txt</code>:</p>

<blockquote>
  <p>line 1 commit 1<br>
  line 2 commit 2 only want these two lines<br>
  extra work<br>
  final work after the merge  </p>
</blockquote>

<p><code>sidefile.txt</code></p>

<blockquote>
  <p>another file - only in sidebranch</p>
</blockquote>

<p>On the other hand, in commit 2 <code>file1.txt</code> contains only the first two lines:</p>

<blockquote>
  <p>line 1 commit 1<br>
  line 2 commit 2 only want these two lines</p>
</blockquote>

<p><strong>and there is no</strong> <code>sidefile.txt</code> in commit 2.</p>

<p>@Juan's answer below works well for reverting/cherry-picking <code>file1.txt</code>, but the created commit still contains <code>sidefile.txt</code> (which I don't want).</p>

<p>After playing around with ""theirs"", ""ours"" and other flags, <a href=""https://stackoverflow.com/questions/2862590/how-to-replace-master-branch-in-git-entirely-from-another-branch/2862938#2862938"">the following post</a> provided a solution:</p>

<pre><code>git checkout master~1^1~1
git checkout -b commit2branch
git merge -s ours master -m 'revert to commit2'
git checkout master
git merge commit2branch
git branch -D commit2branch
</code></pre>

<p>which works, in terms of getting the files to be in the correct state (correct <code>file1.txt</code>, no <code>sidefile.txt</code> but then the commit history contains an extra branch:</p>

<pre><code>*   4236c61 (HEAD, master) revert to commit2
|\
| * 7c4c7a1 (origin/master) commit 6 - latest commit
| *   5b0077c commit 5 - the merge
| |\
| | * 20a1164 commit 3 - sidebranch work
| |/
|/|
| * 3a5a24f commit 4 - some more work on master
|/
* 925228b commit 2 - WANT THIS ONE
* 52af39e commit 1
</code></pre>

<p>while I do not want this extra branch...</p>

<h2>Final edit</h2>

<p>I have an answer, which I have posted below, and is based on @Juan's second solution. However, the solution uses several reverts, while <strong>I would really like a one-line solution</strong>.</p>
","0","2095511","0","0"
"13689448","762810","2012-12-03 18:31:36","1","1889","<git><cherry-pick>","Apply commit to multiple release branches - Git Rebase or Cherry-Pick?","<p>I am working on a project with a Master branch, of course :P and multiple release branches created over time. The version control I'm using is Git and I was looking for a way to apply bug fixes (for example) made in one release branch to the others, automatically if possible. I.e...</p>

<pre><code>--------------------------Master
|      |        |__v3
|      |__v2
|___v1
  |____bugfix
</code></pre>

<p>If I fix a bug found in v1, and need to apply the same fix (and only the fix) in v2 and v3, is there a way I can do this conveniently in Git? </p>

<p>I am new to Git but thought I might be able to Chery-pick the commit and apply it, but I was wondering if the branches need to be directly related in the hierarchy? Is it possible to cherry-pick or perhaps rebase from 'bugfix' under v1 to v2 and v3? (or v3 to v2 etc) Afaik, rebase will replay all commits, so I think cherry-pick is what im looking for, but I am unsure how to achieve this. Posts I have seen cherry-pick from child to parent branch. Is what im trying to do possible?</p>

<p>Cheers.</p>
","0","762810","0","0"
"20241741","22083","2013-11-27 11:52:12","1","58","<git><merge><branch><cherry-pick>","Git branch with ff merges from master - remove ff merges","<p>I have this situation in our codebase.</p>

<p>We created a branch but, mistakingly, we merged master into that a few times (which resulted in a few fast forward merges). Now we have a mix of commits done in the branch and code merged at some point during the branch life (which is just a week long though).</p>

<p>How can I remove the fast forward and just keep the commits we made in the branch?</p>

<p>I was thinking of doing this.</p>

<p>Create a brand new branch from the commit I created the other branch, then list all of the commits made in the previous branch:</p>

<pre><code>git rev-list BRANCH_NAME ^master
</code></pre>

<p>And then cherry picking the commits listed by that command into the new branch</p>

<pre><code>git cherry-pick be530cec7748e037c665bd5a585e6d9ce12bc8bc
</code></pre>

<p>Would this be the right way to do so? I am worried that I might get the fast-forward too (which obviously did not create a commit though).</p>

<p>I am fairly new to Git so I would appreciate any suggestions!</p>

<p>Thanks!
Roberto</p>
","0","22083","",""
"1670970","96823","2009-11-04 00:07:03","1441","954953","<git><git-rebase><cherry-pick>","How to cherry-pick multiple commits","<p>I have two branches. Commit <code>a</code> is the head of one, while the other has <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code> and <code>f</code> on top of <code>a</code>. I want to move <code>c</code>, <code>d</code>, <code>e</code> and <code>f</code> to first branch without commit <code>b</code>. Using cherry pick it is easy: checkout first branch cherry-pick one by one <code>c</code> to <code>f</code> and rebase second branch onto first. But is there any way to cherry-pick all <code>c</code>-<code>f</code> in one command?</p>

<p>Here is a visual description of the scenario (thanks <a href=""/users/356895/JJD"">JJD</a>):</p>

<p><img src=""https://i.stack.imgur.com/7k9Ev.png"" alt=""enter image description here""></p>
","1","96823","0","0"
"39840203","87427","2016-10-03 20:50:38","0","37","<git><cherry-pick>","Recommendations to fix work overwritten in a bad merge","<p>Consider the following situation:</p>

<p>git configuration has <code>rerere.enabled 1</code>, enabling resolution recording and replay. The following commit history exists:</p>

<pre><code>  B
 / \
A---C---E master 
 \   \ / 
  D   D'
</code></pre>

<ol>
<li><p>Commit <code>B</code> was merged in <code>master</code> with <code>--no-ff</code> to create commit <code>C</code>.</p></li>
<li><p>Commit <code>B</code> and <code>D</code> contain conflicting modifications to a file <code>Foo</code>.</p></li>
<li><p>Commit <code>D</code> was rebased to <code>C</code> creating commit <code>D'</code> - the conflict in <code>Foo</code> was erroneously resolved by taking the changes in <code>D</code> only. The correct resolution would have included changes from both <code>B</code> and <code>D</code>.</p></li>
<li><p>Commit <code>D'</code> was merged into master to create commit <code>E</code>, and changes to <code>Foo</code> due to commit <code>B</code> were lost without conflict.</p></li>
<li><p>A later inspection revealed the mistake. A attempt to recover was performed by executing <code>git cherry-pick B</code> on <code>master</code> with the intention of being able to manually resolve the conflict correctly using a mergetool. However, rerere kicks in and replays the bad resolution. No <code>git rerere</code> invocations seem to be able to show or clear the bad resolution.</p></li>
</ol>

<p>What's the best way to deal with this situation? Is it a bug in git that cherry-pick has no rerere override (I am on version 2.9.2)? It feels like something that would crop up often, yet I can't find examples of it being addressed in the documentation (which may be poor searching on my part).</p>

<p>Bear in mind this is a vastly simplified commit tree. In reality there were dozens more commits along the way between those shown, over the period of several days - but the essence of what happened is as captured above.</p>
","0","87427","",""
"20837080","1127094","2013-12-30 09:49:51","41","42429","<git><git-merge><git-cherry-pick>","git merge --no-commit vs git cherry-pick --no-commit","<p>Is there any difference between <code>git merge --no-commit</code> and <code>git cherry-pick --no-commit</code>?</p>

<p>And is there any difference in history if I commit after these two commands?</p>
","0","1127094","0","0"
"1994463","131404","2010-01-03 09:50:23","848","503168","<git><git-merge><git-cherry-pick>","How to cherry-pick a range of commits and merge them into another branch?","<p>I have the following repository layout:</p>
<ul>
<li>master branch (production)</li>
<li>integration</li>
<li>working</li>
</ul>
<p>What I want to achieve is to cherry-pick a range of commits from the working branch and merge it into the integration branch. I'm pretty new to git and I can't figure out how to exactly do this (the cherry-picking of commit ranges in one operation, not the merging) without messing the repository up. Any pointers or thoughts on this? Thanks!</p>
","0","131404","0","0"
"2109937","61342","2010-01-21 14:32:13","2","168","<git><cherry-pick>","How to get list of commits that touched a given line of code (git)","<p>I want to cherry pick from one branch to another, but they diverged strongly.
How can I get list of commits that modified a given part of the file?</p>
","0","61342","",""
"40016872","1603711","2016-10-13 09:15:33","2","96","<git><git-merge><git-cherry-pick>","Will files that are skipped in git cherry-pick be included in a later git merge?","<p>I'm working on a project using Moodle 2.9.4</p>

<p>There is some code I would like to cherry-pick from Moodle 3</p>

<p>but I don't want to include some of the files updated in the commits.</p>

<p>Eventually the project will be upgraded to Moodle 3 using git merge</p>

<p>Will the excluded files will be included in the merge?</p>

<p>If not, what's the best solution?</p>
","0","1603711","",""
"21051850","2195816","2014-01-10 18:35:29","87","54220","<git><git-cherry-pick>","force git to accept cherry-pick's changes","<p>I did cherry-pick from a gerrit review in my branch.
In gerrit code review, I have two patch sets and I cherry-picked patch one before, so now I want to do the second patch set, but there are conflicts, how can I force git to accept all changes?
Thanks!</p>
","0","2195816","0","0"
"40194059","6938303","2016-10-22 15:51:15","1","1084","<git><atlassian-sourcetree><git-cherry-pick>","Git completing cherry pick","<p>I'm currently trying to complete a cherry pick on Git and I have come to a point where I don't know what to do, and Google is not helping either :).</p>

<p>These are my steps:</p>

<ol>
<li>Started cherry-pick process in Sourcetree</li>
<li>Resolved my conflicts</li>
<li>Opened the terminal and did a git cherry-pick --continue</li>
<li>An editor opens, I added some comments however I have no idea what to do afterwards.  </li>
</ol>

<p>I click enter, esc and nothing happens.  Below is a screen shot of what I see, any help on how can I finish the cherry will be greatly appreciated.</p>

<p><a href=""https://i.stack.imgur.com/OxTWF.jpg"" rel=""nofollow""><img src=""https://i.stack.imgur.com/OxTWF.jpg"" alt=""terminal screen  shot""></a></p>
","3","6938303","",""
"59069648","712347","2019-11-27 11:54:06","4","1500","<git><git-commit><git-rebase><git-cherry-pick>","Git: How to cherry-pick a commit without all previous history","<p>I want to add some specific changes from a specific commit in my <code>current</code> repo to my <code>upstream</code> repo.</p>

<p>Running something like this:
<code>git push upstream &lt;commit SHA&gt;:&lt;remotebranchname&gt;</code></p>

<p>adds the commit plus all the previous changes</p>

<p>Running something like </p>

<pre><code>git checkout -b new-branch 
git pull &lt;remote&gt; &lt;upstream branch&gt; branch is
git cherry-pick &lt;commit hash&gt;
git push &lt;remote&gt; new-branch
</code></pre>

<p>Also writes all the previous changes.</p>

<p>I just want to write the specific changes of that commit into the <code>upstream</code> repo, so it does not include the changes made by the previous commits in my <code>current</code> repo, which are not in the <code>upstream</code>.</p>

<p>There's lots of info on StackOverflow about <code>cherry-pick</code> and <code>rebase</code> but none answers this very specific question.  </p>
","0","712347","0","0"
"2938301","184212","2010-05-30 10:57:28","447","660558","<git><commit><revert><cherry-pick>","Remove specific commit","<p>I was working with a friend on a project, and he edited a bunch of files that shouldn't have been edited. Somehow I merged his work into mine, either when I pulled it, or when I tried to just pick the specific files out that I wanted. I've been looking and playing for a long time, trying to figure out how to remove the commits that contain the edits to those files, it seems to be a toss up between revert and rebase, and there are no straightforward examples, and the docs assume I know more than I do.</p>

<p>So here is a simplified version of the question:</p>

<p>Given the following scenario, how do I remove commit 2?</p>

<pre><code>$ mkdir git_revert_test &amp;&amp; cd git_revert_test

$ git init
Initialized empty Git repository in /Users/josh/deleteme/git_revert_test/.git/

$ echo ""line 1"" &gt; myfile

$ git add -A

$ git commit -m ""commit 1""
[master (root-commit) 8230fa3] commit 1
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 myfile

$ echo ""line 2"" &gt;&gt; myfile

$ git commit -am ""commit 2""
[master 342f9bb] commit 2
 1 files changed, 1 insertions(+), 0 deletions(-)

$ echo ""line 3"" &gt;&gt; myfile

$ git commit -am ""commit 3""
[master 1bcb872] commit 3
 1 files changed, 1 insertions(+), 0 deletions(-)
</code></pre>

<p>The expected result is</p>

<pre><code>$ cat myfile
line 1
line 3
</code></pre>

<p>Here is an example of how I have been trying to revert</p>

<pre><code>$ git revert 342f9bb
Automatic revert failed.  After resolving the conflicts,
mark the corrected paths with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
and commit the result.
</code></pre>
","3","184212","0","0"
"40768873","2000907","2016-11-23 15:54:14","3","800","<git><git-branch><git-rebase><cherry-pick><branching-strategy>","How to merge a git branch to multiple release branches","<p>After a tfs migration (totally different concept of branches) I have to merge fixes to multiple release branches, but the branches are not identical, they are mostly similar, but different products(eg different branding, conn strings etc. ), so i can't use nvie gitflow one product branching strategy here.</p>

<p><a href=""https://i.stack.imgur.com/gTxZC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gTxZC.png"" alt=""enter image description here""></a></p>

<p><a href=""https://github.com/MrKekson/stackoverflow_question/network"" rel=""nofollow noreferrer"">https://github.com/MrKekson/stackoverflow_question/network</a></p>

<p>here you can find a greatly simplified branch structure, and basically I want to merge the hotfix1 branch from b1, to tesztb3, but without the previous commits on b1 (c3, c4).</p>

<p>Cherrypicking or rebase could help, but i did not managed to get it done, and i did not have a lot of experience in advanced git usage yet. So please advise me on how to do it, or what should i change to get it done.</p>
","1","2000907","",""
"59773227","11024939","2020-01-16 15:44:22","1","4257","<git><commit><gerrit><git-pull><cherry-pick>","How do I pull/cherry-pick a gerrit commit/patch to a branch using a http link to the commit?","<p>I'm trying to pull a particular gerrit commit/patch to a branch. I'm not too familiar with gerrit but it seems like for usual case there are things called ""patch"" which are like a group of commits lumped together. In most cases I see some steps something along the <a href=""https://stackoverflow.com/questions/28370567/how-to-git-pull-a-given-patch-set-from-gerrit"">lines of</a></p>

<pre><code>Clone       $git clone ssh:me@gerrit.server.com/potato
Checkout    $git checkout fried_branch
Fetch       $git fetch ssh:me@gerrit.server.com/potato refs/changes/01/23456/7
Cherry-pick $git cherry-pick FETCH_HEAD
Pull        $git pull ssh:me@gerrit.server.com/potato refs/change/01/23456/7
</code></pre>

<p>where the refs/changes is used to find the commit/patches. Instead I am given a http link to gerrit commit/patch along the line of</p>

<pre><code>http://gerrit.server.com:8080/#/c/12345/
</code></pre>

<p>I assume I need to change the <strong>Fetch and pull</strong> step of the clone, checkout, fetch, cherry-pick, pull but I'm not sure how to do this this with the http link instead of refs. How do I change the step to work with http?</p>
","0","11024939","",""
"59914500","190955","2020-01-26 00:10:49","1","186","<git><github><cherry-pick>","Git independent commits from fork to upstream","<p>I have a common issue but I don't see a solid best practice for how to solve this. I am contributing to someone elses GitHub repo. I forked the latest Development branch to my repo. Now I want to apply pull requests one by one, making it very easy for each one to be evaluated and merged separately.</p>

<p>Specifically, I'm contributing documentation where the upstream author may want to cherry-pick which documents he wants, rather than all of them. I've had the issue in the past where I wrote a lot of docs into a single PR and it was dismissed as being too much. So now I'm doing a separate commit into my repo/branch for each of my pre-written docs, and I'd like to submit them for individual evaluation.</p>

<p>With the example upstream MainRepo and branch main-dev, and my ContribRepo branch upstream-dev, I have several commits with one new file in each. What is a ""best practice"" which will allow each commit to be merged or rejected without forcing an all-or-nothing action?</p>

<p>I don't think GitHub supports this from the browser UI. I know about cherry picking, and how to use that to pull commits from my own branches. But I've read that the upstream author needs access to a contributor's repo to cherry pick commits back to his own repo/branch.</p>

<p>It almost seems like I need to create a new branch in my repo for each document that I want to submit, which in some ways seems appropriate given that I'm considering each file to be a separate project. I'll do this but it seems like we're consuming a huge number of resources for a tiny event.</p>

<p>If I'm asking the wrong question about how to get out of a box that I shouldn't be in, please suggest a better approach to this (common?) challenge.</p>
","1","190955","",""
"3452971","373710","2010-08-10 20:07:52","4","2621","<git><github><cherry-pick>","How do I share single files between multiple branches in git","<p>I have <a href=""http://github.com/nichtich/tkz-orm"" rel=""nofollow noreferrer"">a repository</a> that contains the software in branch <code>master</code> and its homepage in branch <code>gh-pages</code>. The project contains an <code>examples</code> directory with source files that should be contained in the <code>master</code> branch. The homepage should contain the compiled examples and possibly also the source files. How can I share the examples (that depend on the <code>master</code> branch to get compiled) between both branches? The desired workflow is:</p>

<pre>
$ git checkout gh-pages; ls examples/  # directory is empty
$ git checkout master;   ls examples/  # directory contains .tex source files
author.tex
$ make examples && ls examples/        # compiles .tex files to .png files 
author.tex author.png
$ $MAGIC_COMMIT_TO_BRANCH_SELECTED_FILES gh-pages author.png author.tex
$ git checkout gh-pages; ls examples/
author.tex author.png
</pre>

<p>Branch <code>gh-pages</code> may already contain the examples so just switching to this branch will overwrite the newly compiled files. The compiled files should not be committed to the <code>master</code> branch. I thought about creating another branch <code>examples</code> but this does not really make it easier. If git submodule could point to specific branches (can they?) I could create an <code>examples</code> branch that is used in the other branches as submodule. Moving the examples to another repository may work but I'd prefer to keep all in one repository. Maybe there is some merge manager or cherry-picking magic?</p>
","4","373710","",""
"20222730","633183","2013-11-26 16:35:49","11","4779","<git><git-merge><git-rebase><git-cherry-pick>","Git: How to merge upstream changes without causing a merge commit?","<p>I have (commits were created in alphabetical order)</p>

<pre class=""lang-none prettyprint-override""><code>origin/topic  A-B-C-D-W-X

topic         A-B-C-D-Y-Z
</code></pre>

<p>Is there a way i can get my <code>topic</code> branch to look like</p>

<pre class=""lang-none prettyprint-override""><code>A-B-C-D-W-X-Y-Z
</code></pre>

<p><strong>without</strong> introducing a merge commit?</p>

<hr>

<p>Ordinarily I'd just do</p>

<pre><code>$ git checkout topic
$ git fetch origin
$ git merge --ff-only origin/topic
</code></pre>

<p>But since <code>Y</code> and <code>Z</code> were committed after <code>W</code> and <code>X</code>, a fast forward will not work.</p>

<p>I suspect some clever rebasing or cherry picking might work but I can't wrap my
head around it :{</p>
","0","633183","0","0"
"64703401","2005490","2020-11-05 18:39:13","0","2084","<git><git-merge><git-cherry-pick>","How to merge 2 pull requests from one branch to another in git","<p>I have 2 branches, say master and feature.</p>
<p>Here is the actual git log of the <code>master</code> branch of which I need 2 pull requests (#174 and #173) to be merged into my feature branch.</p>
<pre><code>commit e6a35ad0b2363932ac190ec602a7fd0c8bf9f04f (HEAD -&gt; master, origin/master, origin/HEAD)
Merge: a922cb0 f45db00
Author: xyz
Date:   Wed Sep 2 17:55:32 2020 -0700

    Merge pull request #174 from xyz/v4upgrade
    
    readjust null values for string data type from v4

commit f45db00e1e4b1cce05eb1035b6bd3d3eab97f3bc
Author: xyz
Date:   Wed Sep 2 17:32:07 2020 -0700

    readjust null values for string data type from v4

commit a922cb0a5eb4bf2b7734af8041fb9cffcd2cee5f
Merge: 5f00c71 c9ab5c3
Author: xyz
Date:   Tue Sep 1 23:42:48 2020 -0700

    Merge pull request #173 from xyz/v4upgrade
    
    Implementation for UI fields for user info API
</code></pre>
<p>I want to merge <code>pull request #173</code> and <code>pull request #174</code> to <code>feature</code> branch.</p>
<p>I tried cherry picking commits but getting errors as follows:</p>
<pre><code>git checkout feature
git cherry-pick e6a35ad0b2363932ac190ec602a7fd0c8bf9f04f
error: commit e6a35ad0b2363932ac190ec602a7fd0c8bf9f04f is a merge but no -m option was given.
fatal: cherry-pick failed

git cherry-pick a922cb0a5eb4bf2b7734af8041fb9cffcd2cee5f
error: commit a922cb0a5eb4bf2b7734af8041fb9cffcd2cee5f is a merge but no -m option was given.
fatal: cherry-pick failed
</code></pre>
","6","2005490","0","0"
"64727116","7446971","2020-11-07 11:20:04","0","212","<git><cherry-pick><git-cherry-pick>","Cherrypick all commits from remote branch starting at a tag","<p>I'm working on an old project relying on a game, but the game updated a lot and I need to update my project to the newest version. I've tried simply merging both Repos, but there are so many changes, it's just chaos.</p>
<p>I'd like to cherrypick every commit (a few hundred) step by step to make sure no unwanted changes happen and maybe add a few changes on conflicts.</p>
<p>So the vanilla repo tags looks like:</p>
<pre><code> 0.7.0
 0.7.1
 ...
</code></pre>
<p>How can I cherry-pick every commit from each tag?</p>
","0","7446971","",""
"1526044","139990","2009-10-06 14:47:04","586","153087","<git><git-cherry-pick>","Partly cherry-picking a commit with Git","<p>I'm working on 2 different branches: <strong>release</strong> and <strong>development</strong>. </p>

<p>I noticed I still need to integrate some changes that were committed to the <strong>release</strong> branch back into the <strong>development</strong> branch.  </p>

<p>The problem is I don't need all of the commit, only some hunks in certain files, so a simple  </p>

<pre><code>git cherry-pick bc66559
</code></pre>

<p>does not do the trick.  </p>

<p>When I do a</p>

<pre><code>git show bc66559
</code></pre>

<p>I can see the diff but don't really know a good way of applying that partially to my current working tree.  </p>
","0","139990","0","0"
"58440577","10692636","2019-10-17 20:51:48","1","37","<git><merge><gerrit><rebase><cherry-pick>","git: cherry-pick fails to fix branch from master using Gerrit Code Review","<p>It turns out that another developer had avoided merging some changes until they could be vetted on master, so it was good that it got flagged.  However, I manually applied my changes.  I believe that I made a mistake here by not using merge, but rather applying a patch.</p>

<p>Now that those missing changes are applied (also via patch) and the files are identical, I am assuming that some git merge and/or rebase command needs to be executed to mark the files are now back in-sync between the master and fix branch?</p>

<p>Looking at the following tutorials, it is still not clear to me as to how to resolve this:</p>

<p><a href=""https://www.atlassian.com/git/tutorials/cherry-pick"" rel=""nofollow noreferrer"">https://www.atlassian.com/git/tutorials/cherry-pick</a></p>

<p><a href=""https://www.atlassian.com/git/tutorials/using-branches/git-merge"" rel=""nofollow noreferrer"">https://www.atlassian.com/git/tutorials/using-branches/git-merge</a></p>

<p><a href=""https://www.atlassian.com/git/tutorials/merging-vs-rebasing"" rel=""nofollow noreferrer"">https://www.atlassian.com/git/tutorials/merging-vs-rebasing</a></p>

<p>What does seem clear is that rebase will not work correctly, as there is development work on master that probably shouldn't be moved into the fix branch, but those changes are in directories that are not currently utilized by the fix branch.  Also, the fix branch should maintain a history of all commits.</p>
","2","10692636","0","0"
"10159044","804138","2012-04-15 02:20:59","2","80","<git><workflow><git-cherry-pick>","Techniques for selectively submitting to a main repo","<p>Say you have cloned a local repo from a remote open source project (on Github for example). You make changes in your local repo adding branches and so on. </p>

<p>You have in mind the following goal: some of the changes you make are for your own purposes and won't be contributed back to the main repo, other changes are of interest to the community such as bug fixes and feature adds and those you would like to contribute back to main repo.</p>

<p>So based on that let's assume two main branches: a dev-proj for all the changes, an a dev-comm with the subset to be contributed back to main repo.</p>

<p>In the general case you would know that a given set of changes would go into  dev-comm or not, so you can isolate them into a branch.</p>

<p>However, there are tangled cases where you don't want your branching to be dictated by whether the changes should be contributed upstream or not.</p>

<p>Take for example the case of localization of a web application - changes in translation and views and so on. You create a branch for it and you intend to keep it private, but while working on it you find out that there are i18n issues with the original code, so you fix those as part of your work on this branch. And these changes WRT to i18n that you would like to isolate and push back to main repo. </p>

<p>My question is: is cherry-picking the best way to handle this situation - I'm concerned
it would involve some distraction to try to granularize the commits, and what happens if I make by mistake a commit that involves a lump of private and community changes, then I would have to try to apply fixes for that. Or is there some better technique even if it involves some manual elements. </p>

<p><strong>Edit:</strong> I'll clarify with a rough sketch: p is for local project and c is for changes meant specifically to be pushed upstream for the community:</p>

<pre><code>                    Ep--Fc--Gp--Hc--Ipc(commit not granular!)--Jc topicA
                  /
   A--B--C devProj
       |
        \ Q--R devComm
                      |
                       \ Fc--Hc--I2c--Jc topicAcomm
</code></pre>

<p>While working on topicA, we don't want to be concerned about which parts are meant for the community. But at the end of it we would like to have something like topicAcomm that can be merged in devComm and pushed upstream. </p>

<p>My question is whether cherry-picking is the way to handle this, which seems to be a plausible way from checking the docs/tutorials. Or is there some other tricks like annotating the code later on maybe or some other tricks that I'm not aware of.</p>

<p>Having the accidental mingled commit is just one issue that could arise.</p>
","0","804138","",""
"27877226","1867082","2015-01-10 14:24:17","1","177","<git><git-cherry-pick>","Repeatable git cherry-pick","<p><code>git cherry-pick</code> is not idempotent in the sense that commit hash after cherry-picking depends on current time and current user (as commiter).</p>

<p>I'd like to have the idempotence propery, that means twice the sequence:</p>

<pre><code>git reset --hard BASE-COMMIT
git cherry-pick INTERESTING-COMMIT
</code></pre>

<p>and then again:</p>

<pre><code>git reset --hard BASE-COMMIT
git cherry-pick INTERESTING-COMMIT
</code></pre>

<p>results in exactly same commit hash at HEAD both times.</p>

<p>Is there a way to tell git to reuse Committer Name and Committer Date from the original commit?</p>
","0","1867082","",""
"10661655","1031689","2012-05-19 01:46:44","0","995","<git><cherry-pick><git-cherry-pick>","git cherry-pick causes branch ahead of origin/master","<p>I'm trying to merge specific commits from a branch into master, and push them to origin. </p>

<p>Here is what I'm doing:</p>

<pre><code>M4600 ~/git/plutext/docx4j (master)
$ git reset --hard origin/master
HEAD is now at 2b2d124 Image support in non-XSLT HTML export.

M4600 ~/git/plutext/docx4j (master)
$ git status
# On branch master
nothing to commit (working directory clean)

M4600 ~/git/plutext/docx4j (master)
$ git cherry-pick d89cc32b11d338c0874838a730f04f83c85021bd
[master cb6bf93] Make table output work again.
 1 files changed, 11 insertions(+), 11 deletions(-)

M4600 ~/git/plutext/docx4j (master)
$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
nothing to commit (working directory clean)
</code></pre>

<p>Where am I going wrong?</p>
","0","1031689","",""
"21012744","3176218","2014-01-09 06:05:17","0","697","<git><shell><git-cherry-pick>","shell script to resolve/cleanup git conflicts?","<p>Was trying to merge new commits from opensource and faced conflicts.
git introduced ""&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"" and ""======="" 
Thought of checking for any shell script to reduce the burden?</p>
","1","3176218","0","0"
"29778948","1157237","2015-04-21 17:15:29","1","72","<git><git-cherry-pick>","Cherry-pick this commit - but apply the patch to a differently-named file","<p>Initially there was <code>branchA:fileA</code>.  Then in <code>branchB</code>, <code>fileA</code> split into two components, <code>fileA</code> and <code>fileB</code>.  Then in <code>branchA</code>, <code>fileA</code> was edited.  I want to cherry-pick this change into <code>branchB</code>; the thing is, in that branch, the patch should be applied to <code>fileB</code>, not <code>fileA</code>, and git does not seem to be able to figure this out via a straightforward <code>git cherry-pick &lt;sha1&gt;</code> from <code>branchB</code>.</p>

<p>The commit I want to cherry pick touches only <code>fileA</code>.  Is there a way I can coerce git into applying it to <code>fileB</code>?</p>

<p>I believe this situation is common enough - picture a class hierarchy adding another layer in <code>branchB</code>, for example.</p>
","0","1157237","0","0"
"69302739","3797793","2021-09-23 15:17:37","1","135","<git><rebase><cherry-pick>","Git: Rebase to equal branch (with different history) conflicts, cherry-pick doesn't","<p>I've found an interresting GIT usecase, in which cherry pick of the set of commits does not produce any conflict, but the rebase of the exactly the same commits does result in conflits. I'm aware it's some specific case, but I would like to understand why that happens.</p>
<h1>Setup</h1>
<p>First of all: I'm working with specific <em>git flow</em>, which can be described as follows:</p>
<ul>
<li>there is a <em>development</em> branch and a <em>production</em> branch</li>
<li>the <em>development</em> branch collects the tasks, via the &quot;ugly&quot; merge commits of the <em>task branches</em>, but keeping the complete history</li>
<li>theese merge commits gets cherry-picked to the <em>production</em> branch</li>
</ul>
<p>For instance, the history can look like this:</p>
<pre><code>$ git log --all --oneline --graph
*   4035836 (development) Merge branch 'logging_in' into development
|\  
| * 016f383 created the login page
| * 55373c5 implemented the logging in logic
|/  
*   2cb0c46 Merge branch 'renamed_contacts' into development
|\  
| * 84dc37b updated the contacts page contents
| * 91acf76 renamed the contacts page file
|/  
*   2750381 Merge branch 'contacts_page' into development
|\  
| * f899247 added contacts page
|/  
*   3ca4134 Merge branch 'wellcome_page' into development
|\  
| * ac3095c added wellcome page
|/  
| * 60e684a (HEAD -&gt; master, production) Merge branch 'logging_in' into development
| * 65afa29 Merge branch 'renamed_contacts' into development
| * 2be22da Merge branch 'contacts_page' into development
| * d709e94 Merge branch 'wellcome_page' into development
|/  
* c4c7b06 created readme
</code></pre>
<p>As a result, there are two branches, <em>development</em> and <em>production</em>, with <em>exactly the same contents</em>:</p>
<pre><code>$ git diff development..production
$ 
</code></pre>
<h1>My problem</h1>
<p>In theory, rebase of sub-branch of the <em>development</em> branch to <em>release</em> should then work with no issues whatsoever. But it seems it doesn't.</p>
<p>I was working on some task (i.e. <em>task branch</em> branched of the <em>development</em> branch) and I've decided to <em>not</em> include the task in this &quot;release&quot;. Thus, I've merged the <em>production</em> branch to <em>master</em> to indicate the current version is completed, created new branch named <em>development_v2</em> off the <em>master</em>, and I wanted to rebase the <em>task branch</em> to the new <em>development_v2</em> branch:</p>
<pre><code>* c41d4a9 (rename_wellcome) renamed the wellcome to welcome
*   4035836 (development) Merge branch 'logging_in' into development
(...)
| * 60e684a (HEAD -&gt; master, production, development_v2) Merge branch 'logging_in' into development
(...)
|/  
* c4c7b06 created readme
</code></pre>
<p>However, when I tried to do the rebase, it produces conflicts:</p>
<pre><code>$ git checkout rename_wellcome
Switched to branch 'rename_wellcome'
$ git rebase development_v2 
CONFLICT (rename/delete): contacts.html deleted in HEAD and renamed to about-us.html in 91acf76 (renamed the contacts page file). Version 91acf76 (renamed the contacts page file) of about-us.html left in tree.
error: could not apply 91acf76... renamed the contacts page file
Resolve all conflicts manually, mark them as resolved with
&quot;git add/rm &lt;conflicted_files&gt;&quot;, then run &quot;git rebase --continue&quot;.
You can instead skip this commit: run &quot;git rebase --skip&quot;.
To abort and get back to the state before &quot;git rebase&quot;, run &quot;git rebase --abort&quot;.
Could not apply 91acf76... renamed the contacts page file
</code></pre>
<p>But, when I faked the rebase by creating new branch and cherry-picking the <em>rename_wellcome</em> branch contents to that new branch, it all works as expected:</p>
<pre><code>$ git checkout development_v2
Switched to branch 'development_v2'
$ git checkout -b rename_wellcome_v2
Switched to a new branch 'rename_wellcome_v2'
$ git cheery-pick c41d4a9
Removing wellcome.html
[rename_wellcome_v2 0068e97] renamed the wellcome to welcome
 Date: Tue Sep 21 20:48:23 2021 +0200
 2 files changed, 1 insertion(+), 1 deletion(-)
 create mode 100644 welcome.html
 delete mode 100644 wellcome.html
</code></pre>
<p>Resulting, as expected in:</p>
<pre><code>$ git log --all --oneline --graph
* 0068e97 (HEAD -&gt; rename_wellcome_v2) renamed the wellcome to welcome
* 60e684a (production, master, development_v2) Merge branch 'logging_in' into development
(...)
| * c41d4a9 (rename_wellcome) renamed the wellcome to welcome
| *   4035836 (development) Merge branch 'logging_in' into development
(...)
|/  
* c4c7b06 created readme
</code></pre>
<h1>My question</h1>
<p>I understand that renaming (and so with updating the contents) of files causes troubles as in some cases, there can get some file updated in one branch, while on the other does not exist, because it was replaced by the different one.</p>
<p>But I'm wondering, why this happens. <em>I thought rebase and cherry-pick works the same</em> (re-applying the commits/patches), so I'm surprised in one case it tells there are conflicts, but on the other one runs without any conflicts.</p>
<p>Could someone explain why the behaviour differs? And when exactly (what combination of renames/deletes/updates has to happen on each branch)?</p>
","2","3797793","",""
"29845096","1320170","2015-04-24 10:28:21","3","1363","<git><git-cherry-pick>","Git cherry-pick range","<p>How can I cherry-pick commit <code>C4</code> and <code>C5</code>?</p>

<p><img src=""https://i.stack.imgur.com/FfR2Z.png"" alt=""GitTree""></p>

<p>I’ve tried <code>git cherry-pick C4..C5</code> but I only get <code>C4</code>. 
I think I don’t really understand how this range thing works. </p>
","0","1320170","0","0"
"29847662","1320170","2015-04-24 12:32:57","0","377","<git><merge><tags><git-branch><git-cherry-pick>","Git merge/cherry-pick all commits of a branch","<p>Scenario: </p>

<pre><code>master
|
\
  dev
  |
  \
    feature1
    |
    |
    |
   /
  |
  /  
tagV1
  |
  \
    feature2
    |
    |
   /
  |
 /
tagV2
  |
  \
    fixForV1
    |
    |
   /
  |
  /  
tagV1_1
</code></pre>

<p>Description:</p>

<ol>
<li>Create repo</li>
<li>Create and checkout branch dev</li>
<li>Create and checkout branch feature1 .. implement the feature</li>
<li>Checkout dev and merge feature1, delete feature1</li>
<li>Checkout master merge dev</li>
<li>Create tagV1 (Will be delivered to the customer)</li>
<li>Checkout dev</li>
<li>Create and checkout branch feature2 .. implement the feature</li>
<li>Checkout dev and merge feature2, delete feature2</li>
<li>Checkout master merge dev</li>
<li>Create tagV2 (Will be delivered same or different customer)</li>
<li>Checkout dev</li>
<li>Create and checkout branch fixForV1 .. implement the fix</li>
<li>Checkout dev and merge fixForV1</li>
<li>???</li>
</ol>

<p>15…
We need to merge tagV1 and the commits made on fixForV1 (Without including the commits made on feature2). After the merge we will create a new tag tagV1_1 and deliver this to the customer. </p>

<p>I know I can achieve this by doing a cherry-pick {hash of first commit made on fixForV1} ^..{hash of last commit made on fixForV1}
Is there a better way to do this? </p>
","2","1320170","0","0"
"69314143","16834646","2021-09-24 11:18:06","0","301","<git><cherry-pick>","How to pull specific commit from remote repo","<p>I have 2 repos in my local project:</p>
<pre><code>1. remote        # this is my working area, where I want to push a commit from side_repo
2. side_repo     # this is remote repo, where I want to pull the commit from
</code></pre>
<p>I read the <a href=""https://stackoverflow.com/questions/34027850/how-to-pull-request-a-specific-commit"">question</a>, and try to repeat the steps:</p>
<pre><code>git remote add side_repo &lt;url_of_side_repo&gt;   # add remote repo
git fetch --all                               # fetch all chanches from remote and side_repo
git checkout -b backport side_repo/master     # create new branch based on master of side_repo
git cherry-pick &lt;hash_of_commit_in_side_repo&gt; # pull the commit from side_repo/master
</code></pre>
<p>After that I got this message:</p>
<pre><code>Auto-merging arch/riscv/include/asm/pgtable.h
warning: inexact rename detection was skipped due to too many files.
warning: you may want to set your merge.renamelimit variable to at least 2193 and retry the command.
On branch backport
Your branch is up to date with 'side_repo/master'.

You are currently cherry-picking commit cba43c31f14b.
  (all conflicts fixed: run &quot;git cherry-pick --continue&quot;)
  (use &quot;git cherry-pick --skip&quot; to skip this patch)
  (use &quot;git cherry-pick --abort&quot; to cancel the cherry-pick operation)

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

Otherwise, please use 'git cherry-pick --skip'
</code></pre>
<p>I checked if I got chanches, I need. And it is ok: now file <em>arch/riscv/include/asm/pgtable.h</em> is correct.</p>
<p>BUT, how do I push this changes to my remote repo into specific branch? I want to save all info about commit, I pulled through git cherry-pick. And, if it is possible, save the same hash of the commit like it is in side_repo.</p>
<p>I tried to do this:</p>
<pre><code>git commit --allow-empty
&lt;fix commit message&gt;
git push -u origin develop
</code></pre>
<p>and got message</p>
<pre><code>Branch 'develop' set up to track remote branch 'develop' from 'origin'.
Everything up-to-date
</code></pre>
<p>What am I doing wrong?</p>
","1","16834646","",""
"69314968","7262684","2021-09-24 12:24:45","-1","579","<git><azure-devops><cherry-pick><git-cherry-pick>","what happens to changes if I abort a cherry pick?","<p>I am using azure devops and I have made changes, but also added a commit message. The only option is to abort the cherry-pick. It will not let me commit even though I have a commit message and changes have been made. What happens to my current changes if I abort it?</p>
","1","7262684","",""
"50759211","3724636","2018-06-08 11:01:55","1","140","<git><merge><commit><tortoisegit><cherry-pick>","Merge specific change in a commit from another branch","<p>I want to merge a change in a commit of development branch to another branch using <code>git</code>. I tried <code>git cherry-pick</code> but it results change in the whole file, not the specific change. Can anyone help with that?</p>
","3","3724636","",""
"46671979","246724","2017-10-10 16:51:59","2","1413","<git><branch><rebase><cherry-pick>","git cherry-pick commits in range where commit message contains string / matches regex?","<h2>Background / scenario</h2>

<p>I have a local work flow where</p>

<ul>
<li>I always commit on a ""local"" branch (ancestor of ""master""), using commit messages beginning with issue number, such as ""#123: Some message"".</li>
<li>I create feature branches which are also ancestors of ""master"".</li>
<li>I then use rebase and/or cherry-pick to copy the commits from local onto the respective feature branch.</li>
</ul>

<p>E.g. one way to do this:</p>

<pre><code>git checkout local
git checkout -b 123-my-feature
git rebase -i master
</code></pre>

<p>In the interactive rebase editor, remove all commits where the message does not begin with #123.
This leaves a feature branch 123-my-feature which only contains commits from the issue #123.</p>

<p>Later, after the branch 123-my-feature already exists, subsequent commits on local also need to be picked / copied onto the 123-my-feature branch, if the message begins with #123. This is also possible with interactive rebase, or with individual cherry-picks. But the process is cumbersome.</p>

<h2>Question</h2>

<p>Is there a way to do this with cherry-pick, and automatically filter by commit message?</p>

<p>E.g.</p>

<pre><code>git checkout master
git checkout -b 123-my-feature
git cherry-pick master..local --commit-message-begins-with=""#123""
</code></pre>

<p>Or maybe even an interactive cherry-pick, where I can manually remove commits not beginning with ""#123"".</p>

<p>If there is another command which achieves this, why not. Doesn't have to be cherry-pick.</p>
","0","246724","",""
"29909685","815175","2015-04-28 03:18:45","0","57","<git><patch><cherry-pick>","Create patch from two commits not in sequence not at the head","<p>I have a repo with a single branch and 10 commits. I want to create a patch for all the commits affecting two of the files in the repo, say for example commits #3, 4, and 7, ie not the head, not in sequence, and not labeled. I've kept the scope of commits small so they don't affect unrelated files. </p>

<p>How should I do this?</p>

<p>I've looked at lots of examples online including cherry-pick, squash, and checking out a specific commit in a temp branch, but none of these appear to be close to my scenario, and my head is spinning at all the possibilities.</p>
","0","815175","",""
"13871810","1902729","2012-12-14 02:27:11","1","3442","<git><cherry-pick>","Add repo as your remote and cherry pick","<p>How to 
add this repo as a remote and cherry pick the incremental patches.
<a href=""https://github.com/adridu59/semc-7x30-kernel-ics/commits/master-V2?page=6"" rel=""nofollow"">https://github.com/adridu59/semc-7x30-kernel-ics/commits/master-V2?page=6</a></p>

<p>I need update kernel for android only from this repo (not from other sites)</p>

<pre><code>cd '/home/teru/android/system/kernel/semc/msm7x30'
git remote add zzz https://github.com/adridu59/semc-7x30-kernel-ics/commits/master-V2?page=6
git cherry-pick -n &lt;commit&gt;
</code></pre>

<p>(I know what enter to )
but have error </p>

<pre><code>fatal: bad revision &lt;commit&gt;
</code></pre>
","0","1902729","",""
"33269494","583535","2015-10-21 21:22:06","1","211","<git><version-control><merge><git-rebase><git-cherry-pick>","How to merge individual commits from another branch without side effects (aka without using cherry-pick)?","<p>A client wanted a customized version of our product, so we branched our <code>master</code> branch into a <code>client</code> branch. However, I ended up making important changes on <code>client</code>, and now I'd like to merge them back into <code>master</code>. These comprise approximately 20 commits (out of, say, 200), some adjacent but mostly spread randomly through the branch's commit log.</p>

<p>I know <code>git cherry-pick</code> was designed for this, but I get the impression it does not preserve commit history, and it seems to ignore commit logs, which I'd rather not copy &amp; paste 20 times. I would also like to avoid problems when merging any further <code>master</code> changes <strong>back</strong> into <code>client</code>, which I'm sure we will need to do as we develop our product and wish to merge those new features and bugfixes into the custom client version.</p>

<p>Is there a way to merge these 20 commits while preserving easy mergeability and retaining original commit messages?</p>
","0","583535","",""
"13878904","1904007","2012-12-14 12:40:10","33","11720","<git><branch><cherry-pick>","git cherry-pick to another branch","<p>I wonder if there is the way to copy one commit to another branch without checking out that branch.</p>

<p>For example, I have two branches: <code>master</code> and <code>parallel_version</code>.</p>

<p>I'm on <code>parallel_version</code> branch and I found a bug in file common for these branches.</p>

<p>I've fixed it and committed. How to duplicate this commit to another branch, assuming I'm using git-svn?</p>

<p>Normally I would do:</p>

<pre><code>$ git checkout master
$ git cherry-pick parallel_version
$ git checkout parallel_version
</code></pre>

<p>Is there better way of doing that?</p>
","0","1904007","0","0"
"65673588","14985394","2021-01-11 19:49:56","2","473","<git><merge><cherry-pick><git-cherry-pick>","Why does a cherry-pick cause git merge to discard part of my commit?","<p>So I'm trying to understand why when I <code>git merge master</code> into a branch, I lose some, but not all of my changes in a commit. It seems to do with a cherry-pick commit on my branch. Here's how to reproduce:</p>
<ol>
<li>init a repo with an initial commit</li>
<li>Add a line of text to a file and commit</li>
<li>Branch off this, call it &quot;test&quot;</li>
<li>On branch master, revert the second commit</li>
<li>Cherry-pick that commit into the test branch</li>
<li>Go back to master, create a new commit that restores that line of text, plus add additional changes</li>
<li>Go back to test, run <code>git merge master</code></li>
<li>Notice that the merge automatically removed that line of text (!!!), but kept the additional changes. I expect the merge to not drop that line, so that it matches <code>master</code>.</li>
</ol>
<p>I uploaded my results on github: <a href=""https://github.com/terryttsai/testRevertMerge/commits/test"" rel=""nofollow noreferrer"">https://github.com/terryttsai/testRevertMerge/commits/test</a></p>
<p>If I never cherry-picked that commit into my <code>test</code> branch, then <code>git merge master</code> does keep that line of text. So how come when I do have that cherry-pick commit, the merge removes it? How can I prevent this from happening in the first place?</p>
","0","14985394","",""
"13924115","879826","2012-12-17 23:39:49","1","449","<git><merge><branch><commit><git-cherry-pick>","How to pick a commit in sub-branch and merge it into main branch?","<p>So I have:</p>

<pre><code>master
+commit1
+commit2
+commit3

myBranch
+commitA
+commitB
+commitC
</code></pre>

<p>I want to pick commitB in myBranch and merge it to master branch, what should I do?</p>
","0","879826","",""
"33335725","5487098","2015-10-25 22:16:54","0","68","<git><cherry-pick><git-cherry>","git cherry shows a new commit as cherry-picked when an identical commit was cherry-picked in the past","<p>Assume that there are two branches branch1 and branch2 and there is a test.txt on both the branches with the following line ""opt:true"".</p>

<p>Change the value from ""true"" to ""false"" on both the branches.</p>

<p>On branch1, change the value from ""false"" to ""true"" and commit it.</p>

<pre><code>""git cherry branch2 branch1"" 
</code></pre>

<p>shows that the latest commit is not cherry-picked to branch2.  </p>

<blockquote>
  <p>+ dc703edb4cf0f90fa1b5294cc5bea5c63c849229</p>
</blockquote>

<p>On branch1, change the value from ""true"" to ""false"" and commit it.</p>

<pre><code>""git cherry branch2 branch1"" 
</code></pre>

<p>shows that the latest commit is cherry-picked (though it is not cherry-picked) as there is an identical commit already on branch2.  </p>

<blockquote>
  <p>/+ dc703edb4cf0f90fa1b5294cc5bea5c63c849229<br>
  /- 9d767893962c0dd0d957e2c038bb2ef06df2fee3</p>
</blockquote>

<p>Is there a way to git the true list of commits on branch1 that are not cherry-picked to branch2?</p>
","1","5487098","",""
"18871750","2214693","2013-09-18 12:02:25","2","1024","<git><git-merge><meld><mergetool><git-cherry-pick>","git cherry-pick: how consider only lines modified by the commit (i.e., not the surrounding context)?","<p>I have a project with two branches:</p>

<pre><code>     D---E branch1
    /
---A---C branch2
</code></pre>

<p>I want to apply commit E (but not D) on top of branch2.</p>

<p>I used <strong>git cherry-pick</strong> and <strong>git mergetool</strong> (with <strong>meld</strong>) for resolving conflicts. So far, so good. </p>

<p>However, suppose that the state of the file after commit C is</p>

<pre><code>lineC1
&lt;context C&gt;
lineC2
</code></pre>

<p>and the change introduced by commit E is</p>

<pre><code>-lineC1
+lineE1
&lt;context E&gt;
-lineC2
+lineE2
</code></pre>

<p>I would expect the result shown by default by the mergetool to be</p>

<pre><code>lineE1
&lt;context C&gt;
lineE2
</code></pre>

<p>(i.e., lines E1 and E2 changed according to commit E but internal context kept from the current branch).</p>

<p>Instead, the mergetool (i.e., meld) by default shows:</p>

<pre><code>lineC1
&lt;context E&gt;
lineC2
</code></pre>

<p>which really makes no sense.</p>

<p>How can I instruct git cherry-pick to keep the context from branch2 and only consider changes to the lines modified by commit E ?</p>
","0","2214693","0","0"
"34173704","4563974","2015-12-09 08:09:25","3","2151","<git><overriding><cherry-pick>","Overriding alternative to cherry-pick","<p>There is a cherry-pick command in the git which allows me to copy some commit on top of the current. However, it does some conflict resolution, that I do not care about. What is alternative to cherry-pick which just copies picked commit over on top of current commit?</p>

<p>I can do it manually: select desired commit, copy its files, save them into non-managed folder, select current commit which will be the base for new one, copy the archived files into the git working folder. Separately, I have to copy the commit message. This is huge hassle that I do currently to avoid the change conflicts. Which command can help me to achieve the goal automatically?</p>
","2","4563974","0","0"
"18896050","163394","2013-09-19 13:31:05","1","243","<git><branch><cherry-pick><hotfix>","Hotfixing in git","<p>Say I have two branches in Git: <code>development</code> and <code>qa-test</code>. Both of these branches contain different features - commits but also <code>A</code> is the latest common ancestor of these two branches:</p>

<pre><code>A---&gt;B---&gt;C---&gt;developent
\
 \
  D---&gt;E---&gt;qa-test
</code></pre>

<p>Now in some point we have found out that there was a bug in <code>A</code>, and we need to have fixed them both in <code>qa-test</code> and in <code>development</code>, i.e. we need to hotfix. One of the ways I can go is to create a new branch from <code>qa-test</code> names <code>hotfix</code>, fix there the bug, commit in into <code>qa-test</code> and then cherry-pick this into <code>development</code>. Is there a better way of doing this?</p>
","0","163394","0","0"
"34187857","4563974","2015-12-09 19:56:19","2","1408","<git><overriding><cherry-pick><git-cherry-pick>","Why doesn't git cherry-pick override modification in current branch if their is different?","<p>Look, I make a modification in a branch and then pick a commit from a similar branch, which does not have this modification. I wonder if modification must be rolled back or not.</p>

<p>Initially, both A and B branches have a full copy of the same file</p>

<pre><code>begin
 123
 456
 def f
 789
 klm
end
</code></pre>

<p>But they diverge. First, A moves <code>def f</code> into the end of file, producing refactored A</p>

<pre><code>begin
 123
 456
 789
 klm
end
def f
</code></pre>

<p>Now, if we cherry-pick B on top of this A, the original file is recovered (<code>def f</code> is back in the middle of the file). This is fine because I stated to ask this question once I was informed that <a href=""https://stackoverflow.com/questions/34173704"">cherry-pick with <code>-theirs</code> produces an overriding alternative to cherry-pick</a>. B is 'their' version of the file and it is what I expected because we see that B wins indeed: the only difference between A and B is in the place of A-refactoring and B version is preferred in this case. </p>

<p>I however started to ask this question because it is not always the case. If we add a bit of change to B, e.g rewrite the first line of the procedure for instance, 123 to <code>222</code> (I label this new version of B <code>C</code> in the bash code below) what will be the result of picking this C into A do you think? The result of picking A &lt;- C is puzzling</p>

<pre><code>begin
 222
 456
 789
 klm
end
def f
</code></pre>

<p>You see, the first line is 222 from C but <code>def f</code> is also in the end, which means that refactoring of A has preserved and C did not override it. That is a mystery of inconsistent behaviour IMO. You think that B is different from A by the whole file but it is not, once you further modify a little bit. The unrelated change stop the rollback or I just cannot figure out the git rules out. Which changes should I expect in the cherry-pick op?</p>

<p>I think that <a href=""https://stackoverflow.com/questions/34189779"">it is related situation</a> where picking B tells that whole file has changed whereas if you pick modified C, diff proceeds per normal detecting only single line change.</p>

<p>You can reconstruct the situation using </p>

<pre><code>mkdir preserving ; cd preserving
git init ; echo rrr &gt; root
git add root ; git commit -m root

git checkout -b B ; git checkout -b A

function makeABC {
    echo begin &gt; abc
    echo "" 123"" &gt;&gt; abc
    echo "" 456"" &gt;&gt; abc
    echo "" def f"" &gt;&gt; abc
    echo "" 789"" &gt;&gt; abc
    echo "" klm"" &gt;&gt; abc
    echo end &gt;&gt; abc
}

echo commiting ABC into branch A
makeABC ; git add abc ; git commit -m abc

echo refactoring A, def f moved into the end of file
git checkout A
sed -i -e '/def f/d' abc
echo ""def f"" &gt;&gt; abc
git add abc ; git commit -m ""refactoring 'def f'""

echo posting abc into B
git checkout B ; makeABC ; git add abc ; git commit -m ""abc in B""

echo choosing which branch to pick
picking=""B"" ; case $picking in
    ""B"") ;;
    ""C"") git checkout -b C ; sed -i -e 's/123/CCC/g' abc
        git add abc ; git commit -m CCC ;;
esac

git checkout A ; git cherry-pick $picking -Xtheirs 

echo observe if refactoring def f is in place in A
gitk --all &amp; 

echo 'preserving' folder created
</code></pre>

<p>Set value of <code>picking</code> variable to ""B"" or ""C"" to choose the branch that you want to pick upon A.</p>
","7","4563974","0","0"
"34189779","4563974","2015-12-09 21:58:13","3","299","<git><diff><git-cherry-pick>","Why does cherry-pick tell me that I have all lines changed?","<p>Updated</p>

<p>Consider file abc, identical in both commits A and B</p>

<pre><code>begin
 123
 456
 789
 klm
end
</code></pre>

<p>In A, we refactor first line <code>123 =&gt; AAA</code> and pick B on top of the result. Git tells that <code>all lines in the file have changed</code>. Its diff will operate normally however, if we modify B by updating any single line. Git will notice that only this one line of text has changed in this case, reporting a single-line conflict if it was the first line also. </p>

<p>Here is the code to reproduce</p>

<pre><code>mkdir full-shit ; cd full-shit
git init ; echo rrr &gt; root ; git add root
git commit -m root

git checkout -b A ; git checkout -b B

function makeABC {
    echo begin &gt; abc
    echo "" 123"" &gt;&gt; abc
    echo "" 456"" &gt;&gt; abc
    echo "" 789"" &gt;&gt; abc
    echo "" klm"" &gt;&gt; abc
    echo end &gt;&gt; abc
}

echo commiting ABC into branch B
makeABC ; git add abc ; git commit -m abc

echo will make a new file for A instead of 'git cherry-pick B'
git checkout A ; makeABC
echo 'git checkout A ; git cherry-pick B' would work equally well to make copy A = B
sed -i -e 's/123/AAA/g' abc
git add abc ; git commit -m ""A refactored""


echo observe that !!!PICKING B TELLS THAT ALL LINES BETWEEN A AND B ARE DIFFERENT!!!
echo whereas if we picked C instead of B this would not happen -- git would make the diff operation properly, detectinc collision at the frist line of abc
case ""B"" in
    ""B"") git cherry-pick B ;;
    ""B2"") git checkout B
        sed -i -e 's/123/BBB/g' abc
        git add abc ; git commit -m BBB
        git checkout A ; git cherry-pick B ;;
esac

git gui &amp; 

echo 'full-shit' folder created
</code></pre>

<p>Please note that Git Gui marked all lines as conflicting whereas EOL characters totally match in both commits because they were created in the same run, by the same code and you can even use cherry-pick from B to A to avoid file system operations for exact copy. </p>

<p>For this reason, I believe, this issue is more related to the <a href=""https://stackoverflow.com/questions/34187857"">previous one</a>, than to the EOL, which often causes a similar result. Likewise in that case, git starts to differentiate single lines if I add B2 change on top of first commit in B. What is the logic of git?</p>
","1","4563974","0","0"
"30875001","573432","2015-06-16 18:08:42","1","611","<git><cherry-pick>","Cherry picking changes to specific files from a range of commits","<p>I have a branch into which I accidentally merged other peoples changes a long time ago, and now hundreds of files show up on a pull request that are not mine.</p>

<p>I would like to create a separate branch into which I would like to cherry-pick changes to my own files over those several dozen commits, so that my new pull request only contains my changes.</p>

<p>I found out how to cherry pick commits, and how to cherry pick files from one specific commit, but <em>how do I cherry pick several files from a range of commits</em>?</p>

<p>Is there perhaps a simpler solution?</p>
","0","573432","",""
"47053377","2215147","2017-11-01 11:01:42","2","785","<git><git-cherry-pick><git-cherry>","git: Output of git cherry does not change after git cherry-pick","<p>I have two remotes in git, namely '<strong>origin</strong>' and '<strong>upstream</strong>'. origin was forked off upstream at some point, and both have had several commits since the fork. Now I want to bring over many (but not all) of the commits that have occurred on 'upstream' to 'origin'. So my sequence of operation is as follows:-</p>

<p>1- Fetch all the changes from the remote repositories and update local master (I'm on the master branch):-</p>

<pre><code>git fetch origin
git fetch upstream
git rebase origin/master
</code></pre>

<p>2- List the difference in commits between local master and upstream's master:-</p>

<pre><code>git cherry -v master upstream/master
</code></pre>

<p>After seeing that I see that there are many commits with the (+) sign:-</p>

<pre><code>+ abcdabcdabcdabcdabcdabcdabcdabcdabcd First different commit
+ 123412341234123412341234123412341234 Second different commit
+ efabefabefabefabefabefabefabefabefab Third different commit
+ 567856785678567856785678567856785678 Fourth different commit
+ a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1 Fifth different commit
</code></pre>

<p>3- I'm interested in cherry-picking the fourth commit, so I proceed with the following command (ensuring that I am on branch master first):-</p>

<pre><code>git cherry-pick 567856785678567856785678567856785678
</code></pre>

<p>4- At this point, I perform git cherry again as listed in step 2:-</p>

<pre><code>git cherry -v master upstream/master
</code></pre>

<p>I expected the output would be different because the Fourth commit would have (-). However, the output after this command is still the same:-</p>

<pre><code>+ abcdabcdabcdabcdabcdabcdabcdabcdabcd First different commit
+ 123412341234123412341234123412341234 Second different commit
+ efabefabefabefabefabefabefabefabefab Third different commit
+ 567856785678567856785678567856785678 Fourth different commit
+ a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1 Fifth different commit
</code></pre>

<p>I have double checked my log in master and I can see that the Fourth commit has been added. Is there something else I need to do in order to see the change in the git cherry output? What do I need to do in order to properly get the difference between <strong>origin/master</strong> and <strong>upstream/master</strong>?</p>

<p>I am using git on Windows version 2.11.0.windows.1.</p>
","3","2215147","0","0"
"28521034","837471","2015-02-14 22:31:26","2","276","<git><cherry-pick>","How to display the conflict resolution of a cherry-picked commit?","<p>If a commit was cherry-picked and required a conflict to be resolved:</p>

<pre><code>commit 7b8e5c99a4a40ae788ad29e36b0d714f529b12eb
Author: John Spray 
Date:   Tue May 20 16:25:19 2014 +0100
...
    Signed-off-by: John Spray 
    (cherry picked from commit 1d9e4ac2e2bedfd40ee2d91a4a6098150af9b5df)
    Conflicts:
        src/crush/CrushWrapper.h
</code></pre>

<p>is there a way to display the difference between the two commits (i.e. 1d9e4ac and 7b8e5c in the example above) to figure out how the conflict was resolved ?</p>
","0","837471","",""
"65737405","8182118","2021-01-15 13:58:49","3","55","<git><cherry-pick>","How to investigate ""inflateInit: out of memory"" in git cherry-pick?","<p>Background issue is that at $dayjob I've an automated process performing cherrypicks on a server (basically waits to be modified of branches of interest, cherrypicks them on various targets, and pushes those new branches out), on a pretty large repository (a few GBs, though the cherrypicks tend to be only a few commits at a time).</p>
<p>Usually this works fine, but from time to time a cherrypick will fail with a status 128 (which apparently means a <code>die()</code> call), and the only output of</p>
<blockquote>
<p>inflateInit: out of memory (no message)</p>
</blockquote>
<ul>
<li>I've seen no commonality between the failing cherry-picks, they touch different files, have a different number of commits, different authors, ...</li>
<li><code>fsck</code> on the repository (on the server) doesn't show anything suspicious</li>
<li>since there is no other output and <code>cherry-pick</code> has no <code>verbose</code> flag, there is no information coming from git</li>
<li>the memory load of the server is usually low (right now it's at 2.6GiB / 8GiB), it has plenty of headroom, and even with a serious repack (<code>-AbFd --window=500</code>) everything fits within physical memory with room to spare</li>
<li>there is no CPU or memory load warning on the monitoring, though that is unlikely as the cherry-pick process finishes very quickly (&lt;2s) and the monitoring doesn't poll anywhere near that fast</li>
</ul>
<p>I'm not quite sure how to try and investigate the issue to resolve it, whether it's a configuration error (missing configuration), a usage problem, ...</p>
","12","8182118","",""
"48445999","2323764","2018-01-25 15:05:46","0","777","<git><git-stash><git-reset><git-cherry-pick><git-rm>","GIT remove changes of specific commit from current HEAD","<p><strong>Assume</strong></p>

<p>I have recent changes added or not added to the index. Now I'm cherry-picking a specific commit without creating a new commit on my HEAD ...</p>

<pre><code>git cherry-pick -n &lt;commit&gt;
</code></pre>

<p>How do I remove the cherry-pick changes from the index? I could do a</p>

<pre><code>git reset HEAD
</code></pre>

<p>but I'd have to redo all changes I had added before.</p>

<hr>

<p><strong>The purpose</strong></p>

<p>If one does a stash the stash cannot be pushed to the remote. The current WIP cannot be pulled from the remote on a another system to work with. So I wrote shell functions to simulate the git-stash except I'm using branches for each stash.</p>

<p>An <code>apply</code> or <code>pop</code> normally would apply the stashed changes to the WIP but not the current index. While I'm using a cherry-pick to apply the changes from the stash branch all these changes would be added to the index and I need to remove them from the index afterwards.</p>

<hr>

<p><strong>Edit (2018-01-29)</strong></p>

<p>I read the answere of @torek and understand it. Nevertheless I like to share my bash functions I already used before.</p>

<pre><code>function git-stash {
    local gitbranch=""$( git branch | grep \* )""
    local currentbranch=""$( [ ""${gitbranch}"" == ""* (HEAD""* ] &amp;&amp; echo ""${gitbranch}"" | cut -d ' ' -f5 | cut -d ')' -f1 || echo ""${gitbranch}"" | cut -d ' ' -f2- )""
    local stashname=""stash/$( date +%s )""
    git stash save -u ${stashname}
    git checkout -b ${stashname}
    git stash pop
    git add .
    [ ${1} ] &amp;&amp; git commit -m ""WIP: ""$1 || git commit -m ""WIP""
    git checkout ${currentbranch}
}

function git-stash-apply {
    local stashbranches=""$( git branch | grep stash/ | cut -d ' ' -f3- | sort -r )""
    local stashbranches=(${stashbranches[@]})
    local lateststashbranch=""${stashbranches[0]}""
    git cherry-pick -n ""${lateststashbranch}""
}

function git-stash-pop {
    local stashbranches=""$( git branch | grep stash/ | cut -d ' ' -f3- | sort -r )""
    local stashbranches=(${stashbranches[@]})
    local lateststashbranch=""${stashbranches[0]}""
    git cherry-pick -n ""${lateststashbranch}""
    git branch -D ""${lateststashbranch}""
    git push origin :""${lateststashbranch}""
}
</code></pre>

<p>This isn't a proper solution yet, not to mention the missing error handling in the <code>stash pop</code>.</p>
","0","2323764","",""
"47081606","591182","2017-11-02 17:47:40","15","5604","<git><git-log><git-cherry-pick>","Can 'git log' ignore certain commits based on commit message?","<p>I'm using <code>git log</code> in order to generate a diff between two branches. The exact command I'm using is:</p>

<pre><code>git log --left-right --graph --cherry-pick --oneline sourceBranch...targetBranch
</code></pre>

<p>What I'm wondering is if I can exclude some of the log entries based on the commit message. For example, all of the commits by our test automation team contain a certain identifier, we'll call it <strong>TEST_AUTO</strong>. Currently, the output from my diff looks like this:</p>

<pre><code>&gt;   1e31b8x Merge pull request #1225 in base/project from feature/ABCD-1111 to master
|\  
| &gt; b2f0dfx [ABCD-1111] rework help tour // fixes
| &gt; 270072x [ABCD-1111] rework help tour // merge fixes
| &gt; 98ffeax [ABCD-1111] rework help tour // merge fixes
| &gt;   ff2e25x Merge branch 'master' into feature/ABCD-1111-rework-help-tour
| |\  
| &gt; | f0daf2x [ABCD-1111] rework help tour // new menu
| &gt; | c519a2x [ABCD-1111] rework help tour
| &gt; | 6873cax [ABCD-1111] rework help tour // animations
| &gt; | 944cc7x [ABCD-1111] rework help tour // fix phone fullscreen
| &gt; | 72b3ffx [ABCD-1111] rework help tour // phone animations
| &gt; | 7f7c50x [ABCD-1111] rework help tour // base logic
| &gt; | b6dccex [ABCD-1111] rework help tour
| &gt; | a30022x [ABCD-1111] rework help tour // code clean up and new icons
&gt; | |   c0a3e1x Merge pull request #11361 in base/project from TEST_AUTO-123-bring-automation-code-to to master
|\ \ \  
| |_|/  
|/| |   
| &gt; | 9837a4x [TEST_AUTO-123] Bring Android automation code to 123.X version
| &gt; | 41b33cx Merge branch 'feature/automation' into TEST_AUTO-951-bring-automation-code-to
| &gt; |   bb53f6x Merge branch 'feature/automation' into TEST_AUTO-951-bring-automation-code-to
| |\ \  
| | &gt; | aa1a90x [TEST_AUTO-123] Bring Android automation code to 123.X version
| | &gt; |   876ee8ex Merge pull request #12261 in base/project from bugfix/TEST_AUTO-789-android-fix to feature/automation
| | |\ \ \  
| | | &gt; | | ef3fa1x [TEST_AUTO-456] fixed test_508()
| | | &gt; | | a2d352x [TEST_AUTO-456] fixed test_186 and moved to PortfolioTest
| | | &gt; | | 1880b0x [TEST_AUTO-456] small fix test_493
| | | &gt; | | facc13x [TEST_AUTO-456] fixed test_493
| | | &gt; | | 9ebce6x [TEST_AUTO-456] fix test_31734 (test_493)
| | | &gt; | | 128890x [TEST_AUTO-456] fix test_31621 (test_384) and moved to common/MediaTest
| | | &gt; | | ab64b8x [TEST_AUTO-456] fix test_498()
| | | &gt; | | 7935aax [TEST_AUTO-456] fix test_31740 (test_498) (not ready)
| | | &gt; | | ffb930x [TEST_AUTO-456]fixed test_31751 (test_508) and moved to common/SideMenuTest
| | | | &gt; |   2b810ax Merge remote-tracking branch 'remotes/origin/feature/automation' into bugfix/TEST_AUTO-789-android-fix
</code></pre>

<p>These generate a lot of log noise that I'm not interested in.</p>

<p>Ideally, I'd like to exclude any commits from the compare that contain this <strong>TEST_AUTO</strong> string. I've tried piping the above command to 'grep -v' but that just eliminates the lines that contain it (obviously) and leaves weird gaps in the tree. I want to prevent them from being included at all.</p>
","3","591182","0","0"
"66797450","1324267","2021-03-25 10:22:45","0","60","<wordpress><git><cherry-pick>","Is it possible to cherry pick commits from a repository with different path?","<p>I have 2 repositories: a starter theme repository and a repository for a whole WordPress website.</p>
<p>At the beginning of development, I copied the starter theme to the /web/app/themes/themename in project repository. Then I started developing the site.</p>
<p>Now, there have been some useful changes to the theme that I would like to cherry pick to the starter theme.</p>
<p>But is it possible since the folder structures are different?</p>
","2","1324267","",""
"59142606","257820","2019-12-02 16:02:40","1","144","<git><cherry-pick><git-cherry-pick>","Can I cherry-pick back into git master/maser from a branch?","<p>On git I have two branches, Items and Master both of which are several commits ahead of the local master/maser which is in sync with the remove master/master. I want to cherry-pick my branch master F and add it to the local master/master B ready to be committed to the remote master/master. (I believe I understand cherry-pick.)</p>

<p>Do I have to start a new branch to cherry-pick to and then have to rebase the two branches or is there a better way to make this change?</p>

<p><a href=""https://i.stack.imgur.com/zX4G3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zX4G3.png"" alt=""enter image description here""></a></p>
","0","257820","0","0"
"65528981","7242554","2021-01-01 10:41:49","2","414","<git><command-line><branch><cherry-pick>","How to cherry-pick commit correctly","<p>I have to cherry-pick commit to issue-7044 from issue-7044a branch and when I run</p>
<pre><code>git cherry-pick &lt;commit-hash&gt;
</code></pre>
<p>I receive:</p>
<pre><code>On branch issue-7044
Your branch is up to date with 'origin/issue-7044'.

You are currently cherry-picking commit &lt;hash&gt;.
  (all conflicts fixed: run &quot;git cherry-pick --continue&quot;)
  (use &quot;git cherry-pick --skip&quot; to skip this patch)
  (use &quot;git cherry-pick --abort&quot; to cancel the cherry-pick operation)

nothing to commit, working tree clean
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

Otherwise, please use 'git cherry-pick --skip'
</code></pre>
<p>And no changes in repository folder, what should I do?
(I need to copy all files from that commit)</p>
","0","7242554","0","0"
"40273465","3965675","2016-10-26 22:59:33","0","795","<git><deployment><gitlab><git-flow><git-cherry-pick>","How to merge previous commits","<p>I've setup Gitlab and I'm trying to follow the workflow mentioned here: <a href=""https://docs.gitlab.com/ee/workflow/gitlab_flow.html#production-branch-with-gitlab-flow"" rel=""nofollow noreferrer"">Gitlab Production branch flow.</a></p>

<p>Now my repository looks like this:</p>

<p><a href=""https://i.stack.imgur.com/kah9b.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/kah9b.png"" alt=""enter image description here""></a></p>

<p>And I've been asked to merge only <code>commit A</code> of the <code>master</code> branch with the <code>production</code> branch. What is the best way to do this?</p>

<p>Should I use the <code>git cherry-pick</code> command? I read I'll loose the version history with the <code>cherry-pick</code>. </p>

<p>If I've this situation where I need to keep merging one of the previous commits from <code>master</code> branch to the <code>production</code> branch, how do I handle this?</p>

<p>I'm stuck at this. Any help is greatly appreciated.</p>

<p>Thanks,</p>

<p>Update: From master branch I can push only specific commits: 
<code>git push &lt;remotename&gt; &lt;commit SHA&gt;:&lt;remotebranchname&gt;</code></p>

<p>Found answer here: <a href=""https://stackoverflow.com/questions/3230074/how-can-i-push-a-specific-commit-to-a-remote-and-not-previous-commits"">How can I push a specific commit to a remote, and not previous commits?</a></p>
","5","3965675","0","0"
"21232614","996895","2014-01-20 11:18:48","7","1843","<git><rebase><git-rebase><cherry-pick>","Git move single commit from feature_branch to master","<p>What is the simplest way to achieve this? </p>

<p>from:</p>

<pre><code>--A--B         
      \
       1--2--3 
</code></pre>

<p>to:</p>

<pre><code>--A--B--2
         \
          1--3
</code></pre>

<p>I can't figure any simple way to achieve this (less than like 5 steps).</p>
","3","996895","0","0"
"2476183","286802","2010-03-19 09:32:34","0","74","<git><git-cherry-pick>","merge 1 commit from 1 branch to the master?","<p>I've read <a href=""https://book.git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"" rel=""nofollow noreferrer"">this book section</a> about git branches.</p>

<p>I have create a branch called 'experimental'. I switch to that branch and make 2 commits there.  So if it possible for me to merge the later commit (the 2nd of the 2 commits) of the experiment to the master branch?  </p>

<p>Thank you.</p>
","0","286802","",""
"2476787","50939","2010-03-19 11:26:09","5","785","<git><workflow><git-svn><cherry-pick>","Cherry-picking from git to svn (or, How to keep a project history in git and releases in svn)","<p>I'm in a position where I'm the only one using git, everybody else is using svn. I've used 'git svn' to connect to the team svn and mostly it works just fine. Lately, I've started a project initially on my own, separate git repo and now I need to merge stuff from it to the svn. However, I still would like to keep tweaking the implementation in my own privacy between releases.</p>

<p>So, what would be the most straightforward way to cherry-pick some commits from my private repo to the svn-cloned repo? Requirement is to keep full local history and have only one svn commit for each pick. Or is there some squashing to be done?</p>

<p>As a method to achieve this, is there a way to get the private repo as another origin for the svn-cloned repo?</p>
","0","50939","0","0"
"40383247","237718","2016-11-02 15:03:27","9","1432","<git><git-cherry-pick>","How can I tell, from a script, if ""git cherry-pick"" fails?","<p>If the cherry-pick fails due to a merge conflict, it just returns an exit status of 0.</p>

<p>Please don't tell me about <code>--abort</code>.  I need to detect, in a script, if the original cherry-pick command fails.</p>

<p>Using git version 1.8.3.1 on CentOS 7.2.</p>

<p>EDIT: my script was doing the cherry-pick in an <code>if !</code> and I didn't exit properly in the <code>then</code> clause with a non-zero exit.  Sorry for the noise.</p>
","4","237718","0","0"
"59259461","2609062","2019-12-10 02:44:59","0","78","<git><merge><branching-and-merging><git-flow><git-cherry-pick>","Select files/changes other git branches without losing git blame history","<p>It's simple to git cherry-pick other commits from other branches, all while maintaining a clean git blame history.</p>

<p>If I'm <code>UserA</code> working on <code>branch-A</code>, and then I know in an experimental <code>branch-B</code>, <code>UserB</code> and <code>UserC</code> had been hacking away over the course of hundreds of commits on <code>FunctionC</code> that I want to pull in. There are way too many commits to apply, and all those commits might have other changes I don't want to pull in.</p>

<p>Whats the most idiomatic way I can pull in <code>FunctionC</code> in a way that preserves the history that went into it?</p>

<p>I've been searching for quite awhile, but in the case the changes I want weren't cleanly available in a few commits, it didn't seem like there was a way. All other methods seem to lose track of history. 
In the meantime I've just been basically doing the equivalent of copy/pasting via <code>git checkout --patch branch-B</code> but it leaves no sense of the activity that went into it, or whom to check the git blame for it, other than UserA.</p>
","0","2609062","",""
"65560320","8990587","2021-01-04 09:27:10","0","8884","<github><git-cherry-pick>","'fatal: bad object error whicle cherry-picking a remote commit","<p>Is it possible to cherry-pick a commit from a remote that doesn't belong to any branch?
There is a commit in the remote which says:
&quot;This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.&quot;
When I am trying to cherry-pick it using: git cherry-pick commit_id, I am getting &quot;fatal: bad object&quot; error.</p>
","0","8990587","",""
"59269539","2166823","2019-12-10 14:32:00","-1","618","<git><merge><branch><rebase><cherry-pick>","How can I move a commit back to a location in history before a branch was merged while leaving the branch intact?","<p>After merging a branch into master,
I realized that I ideally should have made a minor commit
before the branch was merged,
because it is directly related to the commit before the merge.
I have tried to clarify what the desired outcome looks like
in the simplified example below,
where</p>

<ul>
<li>B is the merge commit of X and Y into master,</li>
<li>C is a commit that relates to the merged content,</li>
<li>D does not touch any of the newly merged content and is directly related to A.</li>
</ul>

<p>Current branch structure:</p>

<pre><code>A----B-C-D
    /
 X-Y
</code></pre>

<p>The desired outcome is to move D right after A,
while leaving the rest as is:</p>

<pre><code>A-D----B-C
      /
   X-Y
</code></pre>

<p>Rebase after picking all commits and moving D after A:</p>

<pre><code>A-D-X-Y-B-C
</code></pre>

<p>Rebase after dropping X and Y, and moving D after A:</p>

<pre><code>A-D-B-C
</code></pre>

<p>How can I keep the branch in my history?
Is rebase the wrong tool here?
I have looked at cherry-pick,
but I am not sure how I would use it to achieve the desired outcome.</p>

<p>In case it matters,
the branch did not origin from master,
but from an unrelated repo.
It added a couple of new files
while retaining their commit history from the previous repo.
This is for a local repo
where I am the only contributor.</p>
","0","2166823","",""
"2621610","208791","2010-04-12 11:23:43","387","75024","<git><merge><workflow><release><cherry-pick>","What Git branching models work for you?","<p>Our company is currently using a simple trunk/release/hotfixes branching model and would like advice on what branching models work best for your company or development process.</p>

<ol>
<li><p><strong>Workflows / branching models</strong></p>

<p>Below are the three main descriptions of this I have seen, but they are partially contradicting each other or don't go far enough to sort out the subsequent issues we've run into (as described below). Thus our team so far defaults to not so great solutions. Are you doing something better? </p>

<ul>
<li><a href=""http://www.kernel.org/pub/software/scm/git/docs/gitworkflows.html"" rel=""noreferrer"">gitworkflows(7) Manual Page</a> </li>
<li><a href=""http://nvie.com/git-model"" rel=""noreferrer"">(nvie) A successful Git branching model</a></li>
<li><a href=""http://reinh.com/blog/2009/03/02/a-git-workflow-for-agile-teams.html"" rel=""noreferrer"">(reinh) A Git Workflow for Agile Teams</a></li>
</ul></li>
<li><p><strong>Merging vs rebasing (tangled vs sequential history)</strong> </p>

<p>Should one <code>pull --rebase</code> or wait with merging back to the mainline until your task is finished? Personally I lean towards merging since this preserves a visual illustration of on which base a task was started and finished, and I even prefer <code>merge --no-ff</code> for this purpose. It has other drawbacks however. Also many haven't realized the useful property of merging - that it isn't <a href=""http://en.wikipedia.org/wiki/Commutativity"" rel=""noreferrer"">commutative</a> (merging a topic branch into master does not mean merging master into the topic branch).</p></li>
<li><p><strong>I am looking for a natural workflow</strong> </p>

<p>Sometimes mistakes happen because our procedures don't capture a specific situation with simple rules. For example a fix needed for earlier releases should of course be based sufficiently downstream to be possible to merge upstream into all branches necessary (is the usage of these terms clear enough?). However it happens that a fix makes it into the master before the developer realizes it should have been placed further downstream, and if that is already pushed (even worse, merged or something based on it) then the option remaining is cherry-picking, with its associated perils. What simple rules like such do you use? <em>Also in this is included the awkwardness of one topic branch necessarily excluding other topic branches (assuming they are branched from a common baseline). Developers don't want to finish a feature to start another one feeling like the code they just wrote is not there anymore</em></p></li>
<li><p><strong>How to avoid creating merge conflicts (due to cherry-pick)?</strong> </p>

<p>What seems like a sure way to create a merge conflict is to cherry-pick between branches, they can never be merged again? Would applying the same commit in revert (how to do this?) in either branch possibly solve this situation? This is one reason I do not dare to push for a largely merge-based workflow.</p></li>
<li><p><strong>How to decompose into topical branches?</strong> </p>

<p>We realize that it would be awesome to assemble a finished integration from topic branches, but often work by our developers is not clearly defined (sometimes as simple as ""poking around"") and if some code has already gone into a ""misc"" topic, it can not be taken out of there again, according to the question above? How do you work with defining/approving/graduating/releasing your topic branches?</p></li>
<li><p><strong>Proper procedures like code review and graduating</strong> would of course be lovely. </p>

<p>But we simply cannot keep things untangled enough to manage this - any suggestions?
integration branches, illustrations?</p></li>
</ol>

<p>Below is a list of related questions:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/143814/what-are-some-good-strategies-to-allow-deployed-applications-to-be-hotfixable"">What are some good strategies to allow deployed applications to be hotfixable?</a></li>
<li><a href=""https://stackoverflow.com/questions/1049917/workflow-description-for-git-usage-for-in-house-development/1050628"">Workflow description for Git usage for in-house development</a></li>
<li><a href=""https://stackoverflow.com/questions/1856241/git-workflow-for-corporate-linux-kernel-development"">Git workflow for corporate Linux kernel development</a></li>
<li><a href=""https://stackoverflow.com/questions/216212"">How do you maintain development code and production code?</a> (thanks for <a href=""https://stackoverflow.com/questions/216212/how-do-you-maintain-development-code-and-production-code/216219#216219"">this</a> PDF!)</li>
<li><a href=""https://stackoverflow.com/questions/1042400/git-releases-management"">git releases management</a></li>
<li><a href=""https://stackoverflow.com/questions/1241720/git-cherry-pick-vs-merge-workflow"">Git Cherry-pick vs Merge Workflow</a></li>
<li><a href=""https://stackoverflow.com/questions/1670970/how-to-cherry-pick-multiple-commits"">How to cherry-pick multiple commits</a></li>
<li><a href=""https://stackoverflow.com/questions/449541/how-do-you-merge-selective-files-with-git-merge"">How do you merge selective files with git-merge?</a></li>
<li><a href=""https://stackoverflow.com/questions/1994463/how-to-cherry-pick-a-range-of-commits-and-merge-into-another-branch"">How to cherry pick a range of commits and merge into another branch</a></li>
<li><a href=""https://stackoverflow.com/questions/855266/reinh-git-workflow"">ReinH Git Workflow</a></li>
<li><a href=""https://stackoverflow.com/questions/582015/git-workflow-for-making-modifications-youll-never-push-back-to-origin"">git workflow for making modifications you’ll never push back to origin</a></li>
<li><a href=""https://stackoverflow.com/questions/232771/cherry-pick-a-merge"">Cherry-pick a merge</a></li>
<li><a href=""https://stackoverflow.com/questions/2195826/proper-git-workflow-for-combined-os-and-private-code"">Proper Git workflow for combined OS and Private code?</a></li>
<li><a href=""https://stackoverflow.com/questions/2587721/maintaining-project-with-git"">Maintaining Project with Git</a></li>
<li><a href=""https://stackoverflow.com/questions/2588824/why-cant-git-merge-file-changes-with-a-modified-parent-master"">Why cant Git merge file changes with a modified parent/master.</a></li>
<li><a href=""https://stackoverflow.com/questions/2601967/git-branching-rebasing-good-practices"">Git branching / rebasing good practices</a></li>
<li><a href=""https://stackoverflow.com/questions/2590260/when-will-git-pull-rebase-get-me-in-to-trouble"">When will ""git pull --rebase"" get me in to trouble?</a></li>
<li><a href=""https://stackoverflow.com/questions/787638/how-are-dvcs-used-in-large-teams"">How are DVCS used in large teams?</a></li>
</ul>

<p>Also check out what Plastic SCM writes on <a href=""http://www.plasticscm.com/features/task-driven-development.aspx"" rel=""noreferrer"">task driven development</a>, and if Plastic is not your choice, study <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">nvie's branching model</a> and his <a href=""https://github.com/nvie/gitflow"" rel=""noreferrer"">supporting scripts</a>.</p>
","5","208791","0","0"
"65867521","2258530","2021-01-24 05:46:54","2","919","<git><git-revert><cherry-pick><git-cherry-pick>","Why does Git know it can cherry-pick a reverted commit?","<p>In a branch, say, there are 3 commits: <code>A &lt;- B &lt;- C</code>. If I cherry-pick <code>B</code> directly (<strong>Test A</strong>), Git says:</p>
<pre><code>The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty
</code></pre>
<p>I can understand that because <code>B</code> is already in this branch, it's no-op to cherry-pick it again.</p>
<p>Then I reverted <code>B</code> and <code>C</code> in a batch commit by:</p>
<pre class=""lang-sh prettyprint-override""><code>git revert -n B^..C
git commit -a -m &quot;xxx&quot;
</code></pre>
<p>This would be a new big commit <code>D</code> which reverts <code>B</code> and <code>C</code>, the branch should be like <code>A &lt;- B &lt;- C &lt;- D</code>.</p>
<p>Then I need to redo <code>B</code> and <code>C</code> due to some reason. I tried:</p>
<pre class=""lang-sh prettyprint-override""><code>git cherry-pick B^..C
</code></pre>
<p>I see two new commits <code>B'</code> and <code>C'</code> are appended to the branch: <code>A &lt;- B &lt;- C &lt;- D &lt;- B' &lt;- C'</code>.</p>
<p>My <strong>first question</strong> is, How can Git <strong>intelligently</strong> knows it should create <code>B'</code> and <code>C'</code>? I thought Git would find <code>B</code> and <code>C</code> are already in branch history, so it may just skip them like when I cherry-pick 'B' directly in <strong>Test A</strong>.</p>
<p>Then, after that, since the branch is already <code>A &lt;- B &lt;- C &lt;- D &lt;- B' &lt;- C'</code>, I run this command again:</p>
<pre class=""lang-sh prettyprint-override""><code>git cherry-pick B^..C
</code></pre>
<p>I expected Git can recognize this is a no-op operation. But this time Git complains confliction. My <strong>second question</strong> is, why does Git fail to recognize and skip this operation this time?</p>
","0","2258530","",""
"2627953","281121","2010-04-13 08:15:32","18","3407","<git><version-control><merge><cherry-pick>","Git cherry pick and datamodel integrity","<p>Given that two branches have diverged and a specific commit from one branch (and not everything) needs to be introduced to the other, git cherry pick achieves exactly that. </p>

<p>After some time there is the need to completely merge the two branches. How will git know that it has already the commit that was cherry picked in the past so that it won't reintroduce it? </p>
","1","281121","0","0"
"47213772","617822","2017-11-10 00:13:49","3","13192","<git><git-cherry-pick>","Revert cherry-pick --abort?","<p>I had cherry-picked over 70 commits over the past week from my master branch to another branch with commands:</p>

<pre><code>git cherry-pick -x -n &lt;commit-id&gt;
(made some modifications and then)
git commit
</code></pre>

<p>Status says <em>Your branch is ahead of 'origin/another-branch' by 76 commits.</em></p>

<p>Just a moment ago I thought I could continue my task and pick some commits. The very first commit for today was a wrong one and wanted to undo this cherry-picking, and used the command:</p>

<pre><code>git cherry-pick --abort
</code></pre>

<p>And boom, all the 70+ commits seem to be gone. Status says <em>Your branch is ahead of 'origin/another-branch' by 2 commits.</em></p>

<p>Reflog show these last 2 lines:</p>

<pre><code>c398477f HEAD@{0}: reset: moving to c398477fa2b2e0e78cb628c75df81b2c1ec411cd
8369312d HEAD@{1}: checkout: moving from master to another-branch
</code></pre>

<p>Please say there's <strong>somehow possible to revert the abort?</strong> These commits are/was only in my local branch. And, <strong>how the hell did it wipe all the cherry-picked commits, even after I explicityly commited each one of them?</strong></p>

<p>This is the reflog just when I started my cherry-picking a week ago:</p>

<pre><code>d8a71aca HEAD@{52}: checkout: moving from another-branch to dev
8369312d HEAD@{53}: commit: xxx
...
3bb1ff07 HEAD@{127}: commit: xxx
2b9b6542 HEAD@{128}: commit: xxx
c398477f HEAD@{129}: reset: moving to HEAD^
b373db60 HEAD@{130}: commit: xxx
c398477f HEAD@{131}: commit: xxx
8fb419aa HEAD@{132}: commit: xxx
844cbe24 HEAD@{133}: reset: moving to 844cbe2499aadcd0d014999ddb6f847c1d940440
844cbe24 HEAD@{134}: reset: moving to 844cbe24
41e7dbed HEAD@{135}: checkout: moving from 844cbe2499aadcd0d014999ddb6f847c1d940440 to aller-dev
844cbe24 HEAD@{136}: checkout: moving from another-branch to 844cbe24
41e7dbed HEAD@{137}: reset: moving to HEAD^
844cbe24 HEAD@{138}: reset: moving to HEAD^
81bf86ac HEAD@{139}: cherry-pick: xxx
844cbe24 HEAD@{140}: checkout: moving from dev to another-branch
</code></pre>

<p>And same with <code>reflog --all</code>:</p>

<pre><code>c398477f refs/heads/another-branch@{0}: reset: moving to c398477fa2b2e0e78cb628c75df81b2c1ec411cd
8369312d refs/heads/another-branch@{1}: commit: xxx
6a4da110 refs/heads/another-branch@{2}: commit: xxx
...
2b9b6542 refs/heads/another-branch@{75}: commit: xxx
c398477f refs/heads/another-branch@{76}: reset: moving to HEAD^
b373db60 refs/heads/another-branch@{77}: commit: xxx
c398477f refs/heads/another-branch@{78}: commit: xxx
8fb419aa refs/heads/another-branch@{79}: commit: xxx
</code></pre>

<p><strong>Can I just checkout to</strong> <code>8369312d</code> <strong>which is previous to that</strong> <code>reset: moving to c398477fa2b2e0e78cb628c75df81b2c1ec411cd</code>?</p>
","2","617822","0","0"
"47231332","8737016","2017-11-10 21:24:38","0","52","<github><request><repository><pull><git-cherry-pick>","Github pull request from a repository to another","<p>I have a branch (let's call it <strong>branch1</strong>) in a repository (<strong>repo1</strong>) and I want to push some of its files into another branch (<strong>branch2</strong>) of a repository (<strong>repo2</strong>).
How can I do this in GitHub? I don't want to upload files manually because I need to upload the commits also. Thank you  </p>
","0","8737016","",""
"65907063","865169","2021-01-26 18:23:11","1","661","<git><patch><cherry-pick>","How do I apply changes from a specific Git commit somewhere else in the commit tree?","<p>Say I have two branches in a git repo 'master' and 'feature'. The two branches have diverged from some point. Now I want to take the exact changes to 'script.py' from commit '0123456789abcdef' on the 'feature' branch and apply those changes to the corresponding lines of 'script.py' at the head of the 'master' branch.<br />
<code>git cherry-pick</code> seems like the obvious choice to me here, but it does not do exactly what I want. The trouble is that <code>git cherry-pick</code> brings the 'master' branch up to date with all the changes on 'feature' up to commit '0123456789abcdef'.<br />
I do not want all of those changes applied. I only want exactly the changes that occurred in commit '0123456789abcdef' - nothing more, nothing less.  I thought it would be smart if I could somehow exploit common history to figure out where the corresponding changed lines might have moved in 'master' relative to the commit from 'feature', yet without applying all those preceding changes on 'master'.<br />
How can I do this? Surely, I can copy-and-paste it from the output of a <code>git diff</code>, but knowing Git somewhat well it seems to me it must have a better way to do it that I just do not know yet.</p>
<p><strong>Edit:</strong> it seems the above behaviour must have been a result of a mistake I can no longer reproduce. Based on <a href=""https://stackoverflow.com/a/65911278/865169"">@torek's answer</a>, I have repeated the correct procedure of a cherry-pick and it produces the result I wanted.</p>
","5","865169","",""
"11243683","1470253","2012-06-28 11:32:51","5","5229","<git><git-cherry-pick>","Can anyone explain what git cherry-pick <sha> does?","<p>As my concern here is, I have old commit in my another local branch [contains abc.cpp, def.cpp].</p>

<p>Now after few months I want use those changes, but in my current branch abc.cpp is upgraded. So is it like if I cherry pick then it will integrate changes of old abc.cpp into new abc.cpp [recent working directory copy]?</p>
","2","1470253","0","0"
"59618564","5587106","2020-01-06 20:31:05","5","2479","<git><github><cherry-pick><git-cherry-pick>","Can I Remove the Branch that I have Git Cherry Picked From","<p>I cherry-picked a commit from a branch that I no longer want.</p>

<p>Is it bad form / will there be any issues if I have cherry-picked a commit that will no longer exist after I delete the branch?</p>
","0","5587106","",""
"40745781","4151858","2016-11-22 15:30:12","0","1284","<python><git><cherry-pick><git-cherry-pick>","Merge old branch to new branch GIT","<p>I have two branches namely old branch(currently working branch) and new branch. I want to push the old branch commit changes to new branch. Here what i followed the steps:`</p>

<pre><code>Clone old branch and changed head and refs to new branch
then executed git cherry-pick --strategy=recursive -X theirs commit_name
After executing above command i see few lines +added and deleted
(The commit_name has 6 files)
</code></pre>

<p>In commit, i see only 3 files which have been corrected by inserting and deleting lines, but i couldn't see the remaining files to push to gerrit.</p>

<p>Please could someone help me out here. Please note i am not familiar with git stuff.  </p>
","1","4151858","",""
"47272140","5609137","2017-11-13 19:34:20","0","48","<git><branch><atlassian-sourcetree><cherry-pick>","GIT - Group all the changes made in different branches","<p>sometimes the developers push the work related to a single ticket into different branches, the name of the branch always contain the ticket code (example: ""Ticket-002_added_objects"" (where ""Ticket-002"" is the code of the ticket). In sourceTree: if I search for ""Ticket-002"", it returns all the commits containing changes for the specific ticket. What I currently do to see all the changes is: create a new branch and cherry-pick the commits one-by-one (starting from the bottom).
Is there a smarter way to do that?</p>

<p>Thanks a lot!</p>
","3","5609137","",""
"59634858","1523238","2020-01-07 19:26:14","1","499","<git><cherry-pick>","Append custom line to cherry-picked commits in range","<p>When cherry-picking a range of commits I can use <a href=""https://git-scm.com/docs/git-cherry-pick#Documentation/git-cherry-pick.txt--x"" rel=""nofollow noreferrer""><code>-x</code></a> to append the line ""(cherry picked from commit [commit])"" to each commit message.</p>

<p>How do I customize this line to instead say ""Backport of [commit] from master"" ?</p>
","0","1523238","",""
"29016778","1674908","2015-03-12 17:46:53","1","1381","<git><cherry-pick><git-cherry-pick><mergetool>","Cherry-pick with manual 'merge'","<p>How can I use cherry-pick to get a commit from another branch, let git detect which files had change and then merge it manually (like with mergetool)?
Is it possible?</p>
","7","1674908","",""
"11898882","1563927","2012-08-10 09:29:18","0","657","<git><cherry-pick><git-log>","git shortlog: how to exclude ""(cherry picked from commit ____)"" blah?","<p><code>git shortlog</code> is handy for making a human-readable summary of changes. However, when I cherry-pick changes from the master branch I use the <code>-x</code> flag to <code>git cherry-pick</code> because it records which commit it picked from. This causes some ugliness in the shortlog:</p>

<pre><code>% git shortlog Version-3.5.3..3.5

Dan S (5):
  Fix typo that causes build fail on big-endian archs, thanks Felipe Sateler     (cherry picked from commit 4588258193072cd2fb845f7fb0b4670d6ad5edf2)
  fix build on ARM (where qreal==float); thanks Felipe Sateler     (cherry picked from commit 976d560060185c1e31c9f40660172f0054a4a05c)
  Strip gremlin characters from JITLib wrapForNodeProxy.sc     (cherry picked from commit d0842acae77a90b5eb9811d947ee2dad2282edff)
  choose clipping rather than wraparound for writing integer-format audio     files (libsndfile setting)
  arm build fix: another double-&gt;qreal in QcMultiSlider     (cherry picked from commit 548ad319dddf53e4edac1cfa44b3193027eefda2)
</code></pre>

<p>Is there an easy way to tell <code>git shortlog</code> that we don't want those cherry-pick lines (which are on new lines in the actual log)?</p>

<p>Of course, I know it's possible to filter them out, for example using <code>git shortlog Version-3.5.3..3.5 | sed 's/[(]cherry picked.*$//g'</code>. But it seems that git should be aware of its own annotations and be able to deal with them. Anything I've missed?</p>
","0","1563927","",""
"11905428","729403","2012-08-10 16:09:09","9","7841","<git><revision-history><git-cherry-pick>","Merge old git commit with HEAD at master","<p>I made some mistakes when merging commits of my colleagues. Now, we have discovered it and we need to apply old commit again, to choose manually the changes in the files. The situation looks like this:</p>

<pre><code>A--\       /--F--\
    C--D--E       H--I
B--/^      \--G--/   ^
    |                |
WRONG MERGE       MASTER
</code></pre>

<p>I need git to ask me again to merge B with I, like B had never been in the history. In other words, I need git to ask me to choose the merge for all the files which differs in B and I commits. What's the best approach to do such thing? Can I achieve this with cherry pick? How?</p>
","2","729403","0","0"
"40888809","261217","2016-11-30 12:49:03","1","330","<git><merge><cherry-pick>","How to override base during merge?","<h2>The problem</h2>

<p>See the image. I had a <code>master</code> branch. At commit <code>A</code>, I branched <code>dev</code> branch from it. At point <code>B</code> I synced <code>dev</code> with <code>master</code>, creating <code>M1</code>. At point <code>C</code> our team branched <code>release</code> branch from it. In future, I will need to merge <code>dev</code> back to <code>release</code>. </p>

<p>Unfortunately, I accidentally merged commit <code>D</code> from <code>master</code> to my <code>dev</code> branch, creating <code>M2</code>. Now I cannot merge <code>dev</code> to <code>release</code> since it contains commits <code>C..D</code>, which belong to <code>master</code> and should not go to <code>release</code>.</p>

<p>My development is not over, and I'm not going to merge <code>dev</code> to <code>release</code> right now. However, I want to stay synced and merge <code>release</code> to my <code>dev</code> branch. I expect such merges to happen several more times in future, before I finish development and merge <code>dev</code> to <code>release</code>.</p>

<p>Thus, at some point I would need to revert <code>M2</code> from <code>dev</code>. I want to do it as early as possible, since commits from <code>release</code> may conflict with changes in <code>M2</code>. Remember that some of these changes do not exist in <code>release</code>.</p>

<p>Since I want to revert <code>M2</code> as early as possible, I would like to do it before I merge from <code>release</code> to <code>dev</code>. That's where the problem actually begins. Thank you for reading to this point :)</p>

<p><a href=""https://i.stack.imgur.com/Rw3ph.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Rw3ph.jpg"" alt=""Problem""></a></p>

<p>I can revert <code>M2</code> in <code>dev</code>, this is not a problem. However, after that, when I merge <code>release</code> to <code>dev</code>, git computes merge base as <code>C</code>. While I want merge base to be <code>B</code>, to pretend like merge <code>M2</code> just didn't happen at all. Because of this incorrect base, changes <code>B..C</code> are actually automatically discarded by the merge. Git thinks, I manually removed them, since this is what he sees in revert commit of <code>M2</code>!</p>

<p>Let me clarify this. Imagine someone created file <code>foo.txt</code> in <code>C</code>. This file will be added to <code>dev</code> with <code>M2</code>. And it will be removed from <code>dev</code> once I revert <code>M2</code>. When I merge <code>release</code> to <code>dev</code>, git sees <code>foo.txt</code> in <code>release</code>, it sees <code>foo.txt</code> in base commit <code>C</code>, but it does not see <code>foo.txt</code> in <code>dev</code>. Thus git thinks I removed <code>foo.txt</code>. But I didn't do it.</p>

<p>There would be no problem if I specified <code>B</code> as the merge base. Is there a way to do it in git?</p>

<h2>My solution</h2>

<p>Since I found no way to override merge base, I did a little hack. I post it here because I had another related question.</p>

<p>See second image. I started new local branch <code>tmp</code> from <code>E</code>, commit before <code>M2</code>. I cherry-picked to this branch all changes from <code>dev</code> except for <code>M2</code>. I merged <code>release</code> to <code>tmp</code> and commited result <code>M3</code> with only one parent from <code>tmp</code> (note dashed line on the image).</p>

<p>I reverted <code>M2</code> in <code>dev</code>, commit <code>G</code>. I created ""fake"" merge from <code>release</code> to <code>dev</code>. This commit contained no changes, but had two parents: from both <code>dev</code> and <code>release</code>. I then cherry-picked <code>M3</code> to <code>dev</code> and squashed it with my empty fake merge. I thus created <code>M4</code>, with correct changes and with correct parents.</p>

<p><a href=""https://i.stack.imgur.com/ymhtM.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ymhtM.jpg"" alt=""enter image description here""></a></p>

<p>The question is: did I actually need this ""fake"" merge? Maybe there is a way to cherry-pick <code>M3</code> to <code>dev</code> and make it to have two parents? </p>

<h2>Questions</h2>

<p>I'll summarize questions here:</p>

<ul>
<li>Is there a way to manually set base during merge?</li>
<li>Is there a way to manually specify parents for a commit?</li>
</ul>

<p>Thank you if you were able to read through this!</p>

<h2>Update</h2>

<p>As I realized after the discussion, my solution (or any other solution to the stated problem) has a crucial defect. As I've said, at some point I will merge <code>dev</code> to <code>release</code>. As I have not said, at some point after that we will merge <code>release</code> to <code>master</code>. And at this point we will face exactly the same problem. The base for this merge will be resolved to <code>D</code>, not to <code>C</code>. And this will lead to the similar problem, but at a much greater scale.</p>

<p>Thus, the best solution to this problem is to continue development in <code>tmp</code>, and make it the new <code>dev</code>, effectively excluding bad merge <code>M2</code> from the history.</p>
","0","261217","",""
"40997260","1833960","2016-12-06 14:06:28","2","1024","<git><git-cherry-pick>","What is git cherry-pick equivalent in plumbing commands? How do I implement it in GitPython?","<p>My problem is to do <code>cherry-pick</code> in GitPython. I couldn't find this command and decided that I have to do that in some other way.</p>

<p>Also, I'm just interested in how it works internally.</p>

<p>I understand cherry-picking commit <code>A</code> as trying to apply diff between <code>A^</code> and <code>A</code> to <code>HEAD</code>. But I suspect it can be expressed in terms of merges somehow. That's why I ask for plumbing commands.</p>

<p>I tried to find something like <code>git-cherry-pick.sh</code> in Git repo on GitHub but couldn't find anything but tests and documentation.</p>
","0","1833960","0","0"
"21217342","574371","2014-01-19 13:26:14","2","5038","<git><git-branch><git-rebase><git-cherry-pick>","Git duplicate one branch to another","<p>I have the following case :</p>

<pre><code>                      K---L new-feature
                     /
            H---I---J---M dev-team1
           /
          E---F---G dev-main
         /
A---B---C---D master
</code></pre>

<p>And I want to move only the <em>new-feature</em> (K---L) branch in <em>dev-main</em> branch without (H---I---J) form <em>dev-team1</em>, however I want that <em>new-feature</em> (K---L) branch to remain as a separate branch. </p>

<p>Something like that :</p>

<pre><code>                      K---L new-feature
                     /
            H---I---J---M dev-team1
           /
          E---F---G---K'---L' dev-main
         /
A---B---C---D master
</code></pre>
","0","574371","",""
"21313252","224479","2014-01-23 15:58:50","2","1107","<git><git-branch><git-merge><git-cherry-pick>","Can I merge a branch from the future at a commit in the past without merging the shared commits between them, or without cherry-pick?","<p>Say I have a tag, <code>v1.5</code>. More commits were made and another branch <code>fix</code> was created at a point ahead of tag <code>v1.5</code>.</p>

<p>Now that the fix in <code>fix</code> has been made, it needs to be applied to the released version of the code represented by the tagged commit at <code>1.5</code>.</p>

<p><strong>Is it possible, without using <code>git-cherry-pick</code>, to merge a large set of commits from <code>fix</code> at a given point in the history?</strong></p>

<pre><code>o  ... (history)
|
o  tag v1.5
|
o (can not have in v1.5)
|
o (can not have in v1.5)
|
o (can not have in v1.5)
|\
| \ (`fix` branch)
|  \
|   o (needed at v1.5)
o   | -(can not have in v1.5)
|   o (needed at v1.5)
|   |
|   o (needed at v1.5)
o   | -(can not have in v1.5)
    o (needed at v1.5)
</code></pre>
","4","224479","",""
"40374564","5584928","2016-11-02 07:33:30","0","4542","<git><git-branch><git-commit><cherry-pick><git-add>","How to merge specific commit id from different branch in same repo","<p>I had two branches master &amp; trunk.</p>

<p>I have created one more branch in local using <code>git checkout -b new_branch origin/master</code> to take the master code in that branch.</p>

<p>I have added committed some changes in this new branch &amp; pushed as:</p>

<pre><code>git add --all
git commit -m ""my custom message""
git push origin new_branch
</code></pre>

<p>Now i have to merge only this commit id changes(In branch new_branch) in my trunk branch.</p>

<p>I know about <code>git cherry-pick</code>. <strong>Can any one confirm if below procedure is correct:</strong></p>

<p><strong>Step 1:</strong> I have to switch to trunk branch using <code>git checkout trunk</code><br/>
<strong>Step 2:</strong> Now merge that commit id using <code>git cherry-pick MY_COMMIT_ID</code><br/>
<strong>Step 3:</strong> Now push those changes to trunk using <code>git push origin trunk</code><br/>
<strong>Step 4:</strong> Now use <code>git pull origin trunk</code> in remote server</p>
","1","5584928","0","0"
"59360484","9677095","2019-12-16 16:21:00","5","656","<git-lfs><cherry-pick><git-cherry-pick>","Does cherry pick create new files with lfs","<p>I have a repo with a lot of branches and large files. I need to get a commit from another branch to my branch so I was going to use git cherry-pick but the commit includes a file that is being stored with git lfs. </p>

<p>What I want to know is that will cherry-picking that commit create a new file and store it with git lfs, balloon the size of my lfs storage or will it copy the reference to the old file.</p>
","0","9677095","",""
"3022409","55562","2010-06-11 11:46:09","4","3058","<git><rebase><git-rebase><cherry-pick>","Cherrypicking versus Rebasing","<p>The following is a scenario I commonly face:</p>

<p>You have a set of commits on <code>master</code> or <code>design</code>, that I want to put on top of <code>production</code> branch.</p>

<p>I tend to create a new branch with the base as <code>production</code> cherry-pick these commits on it and merge it to <code>production</code></p>

<p>Then when I merge <code>master</code> to production, I face merge conflicts because even tho the changes are same, but are registered as a different commit because of cherry-pick.</p>

<p>I have found some workarounds to deal with this, all of which are laborious and can be termed ""hacks"".</p>

<p>Altho' I haven't done too much rebasing, I believe that too creates a new commit hash.</p>

<p>Should I be using rebasing where I am cherrypicking. What other advantages does that have over this.</p>
","1","55562","0","0"
"40722050","134387","2016-11-21 14:03:51","6","5513","<git><git-merge><git-cherry-pick>","git cherry picking to a different base directory","<p>I have certain commits in a branch, 10.57, which I want to merge to another branch 10.58.</p>

<p>I would normally cherry-pick those commits from 10.57 to 10.58.</p>

<p>There is however a glitch. Certain files have changed their directory structure in 10.58. </p>

<p><strong>Example</strong>: The source dir <code>MAAS/ios-web-services</code> in 10.57 has moved to <code>MAAS/apple/ios-web-services</code> in 10.58.</p>

<p>If I cherry pick as before my changes would created afresh as new files/directories in <code>MAAS/ios-web-services</code> instead of getting merged to files in <code>MAAS/apple/ios-web-services</code>.</p>

<p>Is there a way I can ask git to factor in this change in directory structure?</p>

<p><a href=""https://stackoverflow.com/questions/9544801/git-cherry-pick-files-from-directory-a-to-directory-b"">Git cherry pick files, from Directory A to Directory B</a> seems to suggest editing patches and applying them manually. Is there no other easier way?</p>
","1","134387","0","0"
"59719800","5784831","2020-01-13 15:46:49","1","1704","<git><cherry-pick>","Why does cherry-pick not take all changes?","<p>I have the following situation in my commit history:</p>

<pre><code>A1-...-A2
         \
          B1-B2-...-B3----------B4-B5
                      \        /
                       C1-C2-C3
</code></pre>

<p>I then did (after <code>git checkout A2</code> and a clean <code>git status</code>) 
<code>git cherry-pick --no-commit C2..B5</code>.
Now, <code>C2</code> introduced an important line in <code>file1.txt</code>, say</p>

<pre><code>file1.txt
-line x
+line x with new part
</code></pre>

<p>and ""line x with new part"" exists in all commits C2 to B5.
But after the cherry-pick, the change does not appear and <code>file1.txt</code> still looks like</p>

<pre><code>...
line x
...
</code></pre>

<p>where I expected a line ""line x with new part"". 
I thought, I don't understand the changes and did </p>

<pre><code>git diff HEAD C2 file1.txt
file1.txt
-line x
+line x with new part
</code></pre>

<p>which shows the change as expected. I also checked
<code>git diff HEAD C3 file1.txt</code>, <code>git diff HEAD B4 file1.txt</code>
 and <code>git diff HEAD B5 file1.txt</code> with the same result.</p>

<p><code>git rev-parse HEAD</code> results in <code>A2</code> as intended and <code>git status</code>
says ""On branch A, Your branch is up to date with 'origin/A'. 
nothing to commit, working tree clean"".</p>

<p>What do I miss? Any ideas?</p>

<p>References:<br>
<a href=""https://stackoverflow.com/q/1994463/5784831"">How to cherry pick a range of commits and merge into another branch</a>,<br>
<a href=""https://stackoverflow.com/q/881092/5784831"">How to merge a specific commit in Git</a> and<br>
<a href=""https://stackoverflow.com/q/880957/5784831"">Pull all commits from a branch, push specified commits to another</a> (I hope, 
it is not an issue with a comment from the answer ""...Likewise, cherry picking a commit from one branch to another basically involves generating a patch, 
then applying it, thus losing history that way as well."" from the answer.).</p>

<p><strong>Edit @eftshift0:</strong> After <code>git cherry-pick --no-commit C1..B5</code> it looks correct at a first glance:<br>
The Diff shows</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
line x                         # current status of A2
||||||| parent of C2...
line x                         # common ancestors of C1 and A2
=======
line x with new part           # from merge (new stuff)
&gt;&gt;&gt;&gt;&gt;&gt;&gt; C2...
</code></pre>

<p>From the docs:</p>

<blockquote>
  <p>git-cherry-pick - Apply the changes introduced by some existing
  commits SYNOPSIS</p>
  
  <p>DESCRIPTION
  Given one or more existing commits, apply the change each one
  introduces, recording a new commit for each. This requires your
  working tree to be clean (no modifications from the HEAD commit).</p>
</blockquote>
","0","5784831","",""
"3710192","138841","2010-09-14 15:06:42","48","18862","<git><git-branch><git-cherry-pick>","How do I move a commit between branches in Git?","<p>I'm sure this is a simple thing that has been asked and answered, but I don't know what terms to search for. I have this:</p>

<pre><code>    /--master--X--Y
A--B
    \--C--D--E
</code></pre>

<p>Where I commited C, D, and E (locally only) on a branch, but then I realized that D and E are really independent of C. I want to move C to its own branch, and keep D and E for later.  That is, I want this:</p>

<pre><code>                   /--C
    /--master--X--Y
A--B
    \--D--E
</code></pre>

<p>How do I yank C out from under D and E?</p>
","0","138841","0","0"
"60298212","1084174","2020-02-19 10:29:52","0","105","<git><github><version-control><commit><cherry-pick>","How to see git cherry output in reversed order with size limit?","<p>I need to get the list of commits which have not been cherry-picked yet from other branch for specified time or size. Some of the <a href=""https://stackoverflow.com/a/7566523/1084174"">answers</a> in Stackoverflow suggest to use command like,</p>

<pre><code>git cherry main dev
</code></pre>

<p>However, when I run that above command, I see commit SHA are shown from the beginning of the project (~2/3 years backward) when I am only interested for the last month commits. I saw <code>git cherry</code> has no support for <code>--since</code>. <strong>How can I see last months cherry-pickable commit list?</strong></p>

<p><strong>Is there any way around which can serve my requirement?</strong></p>
","5","1084174","",""
"60299305","1084174","2020-02-19 11:26:12","2","70","<bash><git><filter><version><cherry-pick>","How can I filter `git cherry` output?","<p>I ran the below command,</p>

<pre><code>git cherry main dev
</code></pre>

<p>The output for above command is like,</p>

<pre><code>+ d86f3e25f42b546af008b774c2649d585cc48310
- 1d90a12b91b461f857eb373d69372a2864b9e651
+ 4194aa6d206225242e881d2128e59981b8826eeb
</code></pre>

<p>I want to see only commits which are not yet cherry-picked. <em>i.e. (+ signed sha only)</em>. </p>

<p>Expected output,</p>

<pre><code>+ d86f3e25f42b546af008b774c2649d585cc48310
+ 4194aa6d206225242e881d2128e59981b8826eeb
</code></pre>

<p><strong>How can I do so?</strong></p>
","4","1084174","0","0"
"41413357","7361787","2017-01-01 04:26:32","13","12589","<git><git-cherry-pick>","Cherry-pick Commit from a different repo","<p>I was trying to cherrypick this commits </p>

<ul>
<li><a href=""https://github.com/AICP/frameworks_base/commit/59ebfb7146616e57c15469d7ea85c4362c2fab3c"" rel=""noreferrer"">https://github.com/AICP/frameworks_base/commit/59ebfb7146616e57c15469d7ea85c4362c2fab3c</a></li>
<li><a href=""https://github.com/AICP/frameworks_base/commit/e24d0c250b4f80618f4b6064ad21d9c913890899"" rel=""noreferrer"">https://github.com/AICP/frameworks_base/commit/e24d0c250b4f80618f4b6064ad21d9c913890899</a></li>
</ul>

<p>from <a href=""https://github(dot)com/AICP/frameworks_base/"" rel=""noreferrer"">https://github(dot)com/AICP/frameworks_base/</a> to 
https:// github(dot)com/Gopinaidu7/android_frameworks_base</p>

<p>I created a new branch with name master and switched to it.<br>
I then did:</p>

<pre><code>git cherry-pick 59ebfb7
</code></pre>

<p>and it got </p>

<pre><code>fatal: bad revision '59ebfb7'
</code></pre>

<p>I also tried: </p>

<pre><code>git cherry-pick 59ebfb7146616e57c15469d7ea85c4362c2fab3c 
</code></pre>

<p>and got this error</p>

<pre><code>fatal: bad object 59ebfb7146616e57c15469d7ea85c4362c2fab3c.
</code></pre>

<p>I was doing wrong and did tried to pick those commits since last night.<br>
I was not able to do it, can someone point me with correct commands in sequence?</p>
","1","7361787","0","0"
"60314108","775964","2020-02-20 06:32:37","3","831","<git><github><git-merge><git-rebase><git-cherry-pick>","Merge bug fixes patches from release branch to master branch","<p>I have one <code>master</code> branch where i am pushing my latest development.</p>

<p>Now at some point, I do release and create new branch called <code>release1</code> from master branch.</p>

<p>Now i am doing new development on <code>master</code> branch</p>

<p>Meantime other team also perform some bug fixes on <code>release1</code> branch.</p>

<p>Now time come for release2. Here i need to include bug fixes done on release1 to the updated master branch and then fork <code>release2</code> branch.</p>

<p>New <code>release2</code> branch should have all bug fixes done on release1 branch  + latest development occurs after release1 on master branch.</p>

<p>What are the different possible workflow here.And based on that how to play with <code>git merge</code> and <code>git rebase</code> and <code>git cherry-pick</code> command here?</p>
","1","775964","",""
"22505056","940158","2014-03-19 11:55:42","1","197","<git><git-cherry-pick>","Cherry-pick-ing and smart diff-ing","<p>Situation: A local repository has branch <code>A</code> and branch <code>B</code>. Branch <code>B</code> is ahead of branch <code>A</code> by, let's say, 30 commits.</p>

<p>First question:
Can I list all the commits that are in <code>B</code> that are not in <code>A</code> ?</p>

<p>Second question: Let's say I cherry pick some (completely random) commits from <code>B</code> into <code>A</code>. What will happen if after that I try to merge <code>B</code> into <code>A</code>? Will I get duplicated commits? Can this be avoided somehow?</p>
","0","940158","",""
"60485200","7521901","2020-03-02 08:46:15","2","136","<git><git-rebase><git-cherry-pick><git-workflow>","Recover git history from legacy version of project","<p>Long story short:</p>

<ol>
<li>Project is getting migrated to new git repository server</li>
<li>Someone only copies project files and pushes whole project to new server as initial commit</li>
<li>Work continues starting at that new initial commit for quite some time</li>
<li>I managed to find an old local copy of legacy project (before the switch to new server) and want to insert the old git history into the current version of the project (before the start of the current history). There are a few extra unwanted commits on the old local project</li>
</ol>

<p>The branches essentially look like this:</p>

<pre><code>                 old_master
                /
A--B--C--D--E--F

                  origin/new_master
                 /
init--G--H--I--J
</code></pre>

<p>where commit: <code>new_master</code> -> <code>init</code> = <code>old_master</code> -> <code>D</code></p>

<p>So the end result would be something like:</p>

<pre><code>                       origin/new_master
                      /
A--B--C--D--G--H--I--J
</code></pre>

<p><a href=""https://stackoverflow.com/questions/37673813/how-to-rebase-commits-from-another-repository-with-a-different-history"">How to rebase commits from another repository with a different history?</a> has a similar dilemma history wise that is solved with cherry picking. In my situation there are a huge amount of commits with complex branching that might be difficult to cherry pick. Is there an efficient way to do this using <code>rebase</code> or <code>rebase --onto</code>?</p>
","1","7521901","",""
"41634002","3425536","2017-01-13 11:48:56","3","454","<git><github><pull-request><cherry-pick><git-cherry-pick>","Cherry-pick from closed pull request without fork branch","<p>I got a pull request that contains two commits, one of which I'd be willing to merge.</p>

<p>However, the pull request has already been closed (not merged) and the corresponding branch deleted from the fork repo.</p>

<p>Is there a way to cherry-pick that commit? Or more generally, is there a way to merge a closed pull request without access to the fork branch?</p>
","8","3425536","0","0"
"41703313","28290","2017-01-17 17:23:26","1","488","<git><github><branch><pull-request><cherry-pick>","How do I file one Pull Request per Commit after making multiple Commits?","<p>I've been working on a project and made good progress on several tasks. </p>

<p>I have been careful enough to keep all my changes for each task on their own individual commits.</p>

<p>Now, I want to issue pull requests for each commit individually, so there is only one commit per pull request.</p>

<p>What is the best way to go about this?</p>

<p>I've read it involves branches and cherry pick? I'd appreciate a tutorial, walkthrough or process flow.</p>

<p>Ideally I'd like to do this using a GUI, but first I'd appreciate the background of how and why.</p>
","0","28290","",""
"11462385","3640269","2012-07-12 23:55:50","0","330","<git><cherry-pick>","How to pick some files in a commit using Git","<p>In one of the commits that I want to <code>cherry-pick</code> from Branch B to Branch A, there are four files that changed, but I only want one of the files in that commit to be on Branch A. How do I get that file on Branch A?  Thanks!</p>
","0","3640269","0","0"
"69531779","1624911","2021-10-11 19:53:42","-1","244","<git><cherry-pick><git-cherry-pick>","How far back does git cherry-pick go?","<p>Suppose I have done the following:</p>
<ol>
<li>Create branch My-new-feature from master</li>
<li>My-new-feature code changes part 1</li>
<li>merge from (a recently pulled) master locally</li>
<li>My-new-feature code changes part 2</li>
<li>Create branch release-2 from master</li>
<li>merge from (a recently pulled) master locally</li>
<li>commit and push My-new-feature</li>
</ol>
<p>If I now want to cherry pick my changes from steps 2 and 4 into the release-2 branch, which step(s) commit numbers do I need to use?</p>
<p>a) Just from step 7 (because cherry-pick is smart enough to go all the way back to the branch from master), or</p>
<p>b) from steps 2 and 4 (to avoid bringing in recent changes to master), or</p>
<p>c) something else?</p>
","4","1624911","",""
"49171153","9096708","2018-03-08 10:43:19","1","1057","<git><git-commit><cherry-pick>","Git how to make an empty commit with two parents","<p>I’ve some issues finding the right git command for the job. </p>

<p>A place I work at is currently switching source control (TFVC -> Git). However, the old version in TFVC still needs bug fixing from time to time. </p>

<p>I’ve handled that by creating a build with some PowerShell scripts that ensure that my “tfvc-merge” branch contains those changes. </p>

<p>So here is what I do afterwards.</p>

<ul>
<li>Checkout from integration branch</li>
<li>I cherry-pick the commit from “tfvc-merge” branch to my
“mergerhandler” branch</li>
<li>(my Issue) Now I wanna make an empty commit that have 2 parents.
First parent is the last commit i have made on ""MergeHandler"" branch, next
parent is the commit of the “tfvc-merge” branch.</li>
</ul>

<p>I tried to draw it up. So basically, the empty commit at the pull request will have the parent of 1 and 2 in my drawing. </p>

<p><a href=""https://i.stack.imgur.com/fMCS9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fMCS9.png"" alt=""Cherry-Pick Strategy""></a></p>

<p>I've been searching around, for a few hours without finding the right way to do this. So it would be nice with a hint that could point me in the right direction. Thanks in advance.</p>
","0","9096708","0","0"
"49189038","9466248","2018-03-09 07:54:00","0","330","<git><cherry-pick>","git cherry-pick usage after pushing","<p>I did not realize I had messed up by not checking out master when creating new branches, so now I have a messed up git tree. </p>

<p>I experimented already with <code>git cherry-pick</code> but documentation was not enough to understand how to fix my issue, since I don't have much experience with git in general.</p>

<p><a href=""https://i.stack.imgur.com/shNj7.jpg"" rel=""nofollow noreferrer"">git tree</a></p>

<p>I added an adjusted screenshot to visualise - branches <code>182</code>, <code>183</code>, <code>184</code>, <code>188</code> and <code>189</code> are absolutely fine, that's how branches <code>185</code>, <code>186</code>, and <code>187</code> should look.</p>

<p>Since the code is already pushed, how do I <strong>properly</strong> move these commits around for all of the branches to look similar?</p>
","0","9466248","",""
"19040452","74568","2013-09-26 23:39:12","1","435","<git><github><cherry-pick><git-cherry-pick>","Git cherry-pick, github branch comparisons and SHA ids, oh my","<p>I have a question about cherry-pick. We have a project with two main branches: deploy and develop (that's a simplified but accurate view). Deploy is what we have deployed to our production servers and develop is what we're working on (with feature branches off of develop for individual features/fixes/etc). </p>

<p>We had a commit that was merged into develop from a feature branch (via a GitHub pull request from the individual developer's fork) that we needed to push into production. There were other commits on develop that we didn't want to put into deploy yet, so I did a <code>git checkout deploy &amp;&amp; git cherry-pick 049cae3 &amp;&amp; git push</code> to grab the one commit we needed. That all worked fine, and the code was pushed to production. However, we have a status dashboard that uses the GitHub API to do a comparison of deploy..develop to see how many commits we have piled up on develop that aren't on deploy. I noticed that the number didn't change, and when I looked at the comparison page on github my cherry-pick'd commit was still showing up in the diff. I'm guessing this is because cherry-pick applies the commit with a new SHA so GitHub doesn't see it as being in both branches - they're two different commits.</p>

<p>This probably isn't a big deal as at some point we'll merge develop into deploy, but then I'll probably have a duplicate commit, right? (and yes, we're doing merges, rebase scares me and I haven't really figured it out yet).</p>

<p>So: given the situation where I needed one specific commit, was cherry-picking the right way to go? If not, what is?</p>
","3","74568","0","0"
"19071453","64257","2013-09-28 20:41:29","2","854","<git><git-log><git-cherry-pick><git-rev-list>","""A..B"" (double-dot) vs ""--right-only A...B"" (filtered triple-dot) in Git commit ranges?","<p><em>Compare <a href=""https://stackoverflow.com/questions/462974/whats-the-difference-between-and-in-git-commit-ranges/"">What are the differences between double-dot &quot;..&quot; and triple-dot &quot;...&quot; in Git commit ranges?</a>, a more frequently useful question.</em></p>

<p>I'd like to clarify whether the following produce the same set of commits as <code>git log A..B</code>:</p>

<pre><code># version 1
git log --right-only A...B 

# version 2
#
# (The sed part keeps only the righthand lines, and strips the &gt; character)
git log --left-right --format=oneline A...B | sed -n ""s/^&gt;//p""
</code></pre>

<p>They would <em>seem</em> to be more roundabout ways of accomplishing the same thing.</p>

<p>The initial motivation was to get a deeper understanding of the meaning of these commands, which involve ignoring already-cherry-picked commits:</p>

<pre><code># version 1a
#
# Literally taken from the git-log help page, which explains what this means
git log --cherry-pick --right-only A...B 

# version 2a
#
# This is a simplified version of something in the git code. (In particular,
# in git-rebase--interactive.sh.)
git log --left-right --cherry-pick --no-merges --format=oneline A...B | sed -n ""s/^&gt;//p""
</code></pre>

<p>An extension of this question is to ask why symmetric difference (ie triple-dot) is required to do this sort of ""one-sided"" cherry-pick elimination. For example, to find the unique commits on B, including a correction for cherry picks, shouldn't one be able to do something as simple as</p>

<pre><code>git log --cherry-pick A..B
</code></pre>

<p>I suppose it's because git applies the cherry-pick-removing logic <em>after</em> it's filtered out all the A commits with <code>A..B</code>. (That is, in this hypothetical command git throws away anything related to A before trying to apply cherry-picking logic.)</p>
","0","64257","",""
"14676715","2037879","2013-02-03 20:04:42","88","49165","<git><commit><sha><cherry-pick>","cherry-pick a commit and keep original SHA code","<p>I would like to cherry-pick a commit on a fetched remote while keeping it's original SHA commit code (my current branch is based on this remote which I resetted to a previous state).</p>
","4","2037879","0","0"
"28947643","4650688","2015-03-09 16:58:02","1","337","<git><version-control><merge><git-diff><git-cherry-pick>","Merge folder from one branch into another with git","<p>I'm working with two branches in a git repository.</p>

<p>They are <code>rc</code> and <code>dev</code>.</p>

<p>I have a folder in <code>dev</code> <code>src/</code> that I need to merge into <code>rc</code>.</p>

<p>I've tried to use <code>git cherry-pick --strategy=recurisve --strategy-option=theirs &lt;commit&gt;</code> method by first creating a shell script to add a new line to all the files in the directory to trigger a change with git.</p>

<p>The script was as follows:</p>

<pre><code>#/bin/sh

SEARCH_FOLDER=""src/*""

for f in $(find $SEARCH_FOLDER);
do
    echo """" &gt;&gt; $f;
done;
</code></pre>

<p>What I did not realize is that <code>git cherry-pick</code> is only going to take the recognized changes vis-a-vis the aforementioned newlines.</p>

<p>Aside from just copying the folder over into a branch of <code>rc</code> and then creating a commit and merging, what are my options to push my changes that I've been working on in <code>dev</code> for two weeks into the <code>rc</code> branch.</p>

<p>I understand that the way I have been developing and using git is probably inappropriate and not intended use.</p>

<p>Ideally, I'd like to create a patch file using the diff on the two branches subfolders <code>src/</code> and apply it. Though, I'm not sure how to execute this approach.</p>
","0","4650688","",""
"68489520","1394168","2021-07-22 17:57:15","0","325","<git><merge><git-cherry-pick><git-cherry>","How to detect if a *merge commit* has already been picked in a branch?","<p>With <code>git cherry</code> it is possible to check which commits have been already applied to another branch, typically the upstream. However, this returns only non-merge commits. Also <code>git log --cherry ...</code> excludes merge commits, since it implies  <code>--no-merges</code>.</p>
<p>If a commit has been cherry-picked with <code>-x</code>, then the source revision is included in the commit message, so it is at least possible to <code>git log --grep</code> for a revision and check if it is already present.</p>
<p>If <code>-x</code> has not been used when cherry-picking, how can I robustly detect if a merge commit has been already picked to a branch?</p>
","1","1394168","",""
"34424543","5708771","2015-12-22 21:15:11","8","2635","<git><branch><cherry-pick><git-cherry-pick>","Git pull on non-working branch without switching","<p>We have a development branch which is our master and a separate maintenance branch. I frequently have to cherry-pick commits from the master to the maintenance or vice-versa when I fix bugs. Normally I accomplish this by performing the following procedure...</p>

<ol>
<li>Commit on the master branch</li>
<li>Push commit to remote</li>
<li>Switch/Checkout to maintenance branch</li>
<li>Cherry-pick the commit from step 1</li>
<li>Build and make sure everything is still working as intended</li>
<li>Push maintenance commit to remote</li>
</ol>

<p>The problem that I have is because the branches have become significantly divergent I have to rebuild the entire project each time I switch which takes up to 10 minutes. This is expected, but I'd like to not have to do this since I'm frequently switching between branches. So to avoid this I created a second working directory so that I have a directory for each branch. The problem with this is that I can't cherry-pick the original master commit into the maintenance directory until I've pulled that commit into the master branch of the maintenance directory from the remote. When I do this of course, I have to completely rebuild.</p>

<p>Is there a way to pull the commits into the master branch of my maintenance directory without switching? Or, is there a better way of doing this entirely? We recently switched to Git from CVS, so I'm not that familiar with it.</p>
","3","5708771","0","0"
"12978260","1098524","2012-10-19 16:10:15","11","7852","<git><cherry-pick><git-subtree>","How do I go to a specific commit using git-subtree?","<p>I am using Avery Pennarun's git-subtree which is an extension to git. </p>

<p>How do I cherry-pick a commit from a sub-repo into my main repo using git subtree? Also how do I go to a specific commit in the history of the sub-repo after I have already done a git subtree pull on that prefix?</p>

<p>I am primarily running this in the squash commits mode. </p>
","0","1098524","0","0"
"49995888","6124796","2018-04-24 07:35:34","20","40623","<git><merge><git-merge><cherry-pick><git-cherry-pick>","Git merge/cherry-pick avoiding staging","<p>I am trying to make a cherry-pick with some changes, but I do not want to commit them in this branch, I just want to have them locally.</p>

<p>For this purpose, I am using</p>

<pre><code>git cherry-pick &lt;hash&gt; --no-commit
</code></pre>

<p>However, this adds them automatically to the stage, and then, I have to manually reset them using</p>

<pre><code>git reset HEAD &lt;files&gt;
</code></pre>

<p>Is there no option with git to make cherry pick not commit, and not add to index?</p>

<p>something like:</p>

<pre><code>git cherry-pick &lt;hash&gt; --no-commit --no-stage
</code></pre>

<p><del>I know this trick would do what I want, but I would have to specify all the files in the commit:</del></p>

<p><strong>Edit</strong></p>

<p>Tried also this, but it is also added to the index.</p>

<pre><code>git checkout hash -- &lt;list of files&gt;
</code></pre>

<p>And this files, might not share the same common path. I am trying to automate it</p>
","2","6124796","0","0"
"13085961","714232","2012-10-26 11:19:48","16","13823","<git><git-revert><git-cherry-pick>","What is the Difference Between Git Cherry-Pick and Git Revert?","<p>I still find the behavior of git revert somewhat confusing. After significant pain and misunderstanding, I learnt that git revert <em>negates</em> a particular commit rather than reverting <em>to</em>  that commit. I have not used git cherry-pick so far.</p>

<p>Can you elaborate on each of these two git commands? When and how do you prefer to use them?</p>
","2","714232","0","0"
"47555023","245549","2017-11-29 14:22:43","2","791","<git><cherry-pick><git-fetch>","How to merge the result of a fetch into the master?","<p>I have just done a ""cherry picking"" by executing </p>

<pre><code>git fetch ssh://myname@something1 something2 &amp;&amp; git checkout FETCH_HEAD
</code></pre>

<p>After I execute <code>git branch</code> (to see what branch I am in), I see that I am in a branch with a strange name: <code>(HEAD detached at FETCH_HEAD)</code>:</p>

<pre><code>* (HEAD detached at FETCH_HEAD)
  master
</code></pre>

<p>When I go to master by executing <code>git checkout master</code> this ""strange"" branch disappears and, as far as I understood, the changes that I ""cherry picked"" from the remote repository disappear as well (because they are in the ""branch"" that has disappeared).</p>

<p>So, my questions is: How can I merge the strange ""branch"" into the master so that the changes in this branch do not disappear?</p>
","1","245549","",""
"59906069","11137422","2020-01-25 03:20:19","-1","653","<ruby-on-rails><git><github><cherry-pick>","If I create a pull request on a repository, if the admins decide to include only some of the commits, will that still count as a contribution for me?","<p>I want to make a contribution to the Rails repository in a very specific file. That contribution should be split on various commits. If I create the pull request and say the admins decide than only some commits are good to merge, will they be able to only merge some of the commits? And will that contribution count on my profile or should I split my contribution into several pull requests for them to choose the changes that are worth?</p>

<p>I've read about they could cherry-pick some of my commits but I'm not sure if that would count as a contribution on my profile.</p>

<p>Thanks for your answers</p>
","0","11137422","",""
"29393875","1897528","2015-04-01 14:45:55","16","31968","<eclipse><git><gerrit><cherry-pick>","How to cherry pick from branch A to branch B on a system without history?","<p>Suppose I have a new system with no git history and I take a fresh checkout of branch A. Branch A already has a commit C1 which I did yesterday from some other system.
Now I want to cherry-pick this commit C1 in branch B.
Issue:</p>

<ol>
<li>If I take checkout of branch A and go to commit C1 (in history in Git view) and click 'cherry pick', it says do you want to cherry pick in branch A? So, there is no discussion of branch B here.</li>
<li>If I take checkout of branch B it will not show commit C1 at all.</li>
</ol>

<p>Now, how do I cherry pick commit C1 of branch A into branch B?
I am using Gerrit, GitBlit and EGit in eclipse.</p>
","0","1897528","0","0"
"66502000","431698","2021-03-06 03:13:03","1","117","<git><cherry-pick>","How to do cherry-pick only if no other commits update the files updated by the cherry-picked commit?","<p>For example, consider the following directory:</p>
<pre><code>one
two
three
</code></pre>
<p>And the directory has the following commit history and branches:</p>
<pre><code>dev                           master
 |                              |
commit1 --&gt; other commits --&gt; commit-wanted
</code></pre>
<p><code>commit-wanted</code> updates files <code>two</code> and <code>three</code>.</p>
<p>After checking out <code>dev</code> branch, I want the cherry-pick of <code>commit-wanted</code> to succeed only if other commits between <code>commit1</code> and <code>commit-wanted</code> do not update <code>two</code> and <code>three</code> files.</p>
<p>Is it possible?</p>
","2","431698","",""
"41162960","789756","2016-12-15 11:23:41","1","41","<git><cherry-pick>","Stash changes during conflict resolution","<p>I am rebasing a complex feature to another branch using <code>git cherry-pick</code>. When trying to resolve conflicts in a big commit, I find out that I've missed some other commit that should be applied first.</p>

<p>I can't <code>stash</code> the current state, apply the other commit and then do <code>stash pop</code>.<br>
I could do <code>cherry-pick --abort</code>, apply the other commit and then cherry-pick it again, but I would lose those resolved conflicts.</p>

<p>What is the best way to deal with such situation?</p>
","3","789756","0","0"
"3757075","395202","2010-09-21 03:19:39","29","7160","<git><cherry-pick>","Merge tracking for Git cherry picking?","<p>For example, I have a <code>dev</code> branch and a <code>stable</code> branch.</p>

<p>In case I have cherry-picked several commit from <code>dev</code> to <code>stable</code>.</p>

<p>Is there any way to let Git aware of the cherry-picked commits, and avoid doubly-merging it if I later merge, rebase or cherry-pick an overlapped range, from <code>dev</code> back to <code>stable</code>? (for which is a basic merge tracking feature in SVN)</p>
","1","395202","0","0"
"13354328","1670893","2012-11-13 01:23:12","5","1246","<git><performance><git-cherry-pick>","Why git log --cherry-pick is so slow?","<p>I want to get the changes between two given tags, the command is:</p>

<pre><code>git log `Tag1...Tag2 --cherry-pick  --no-merges --right-only
</code></pre>

<p>but it is very slow. </p>

<p>I test parameters respectively one by one. ONLY when with <code>--cherry-pick</code>, git log is very slow.</p>

<p>Why? Anybody could help me out there?</p>
","0","1670893","",""
"3996876","362531","2010-10-22 12:44:54","4","1792","<git><patch><merge><cherry-pick>","Applying same file-rename changes to diverged GIT branches","<p>I've got a project which has a master branch and a stable branch - the branches diverged long time ago. Now I've got a couple commits on the stable branch, which I also want to have on the master branch (a bug fix). I cannot merge, as the branches diverged and there's loads of unmerged changes - I just want the 4 commits.</p>

<p>So I tried cherry-pick. However this fails since the top-level modules names changed from ""project-module"" scheme to ""module"". When cherry-picking, GIT creates the new files in the old directories (as on the old branch): the rename isn't detected. That's possibly because I get this warning:</p>

<pre><code>warning: too many files (created: 278 deleted: 5364), skipping inexact rename detection
</code></pre>

<p>I tried git format-patch + git am, but this again creates the files in the old directories.</p>

<p>How can I apply the commits to the master branch?</p>

<p>Thanks,
Adam </p>
","0","362531","",""
"41607784","3150716","2017-01-12 07:54:50","1","3731","<git><github><git-cherry-pick>","Difference between git reset and git cherry-pick","<p>I read from <a href=""https://github.com/blog/2019-how-to-undo-almost-anything-with-git"" rel=""nofollow noreferrer"">https://github.com/blog/2019-how-to-undo-almost-anything-with-git</a>  this :</p>

<blockquote>
  <p>If you want to restore the project's history as it was at that moment in time use git reset --hard 
  If you want to replay exactly one of those commits into your repository use git cherry-pick .</p>
</blockquote>

<p>I am a beginner and have not gone into branching yet. To me , the usage of cherry-pick here seems identical to of git reset.  I want to know what actually git cherry-pick does different from git reset , given I am working in one branch only.</p>
","0","3150716","",""
"60547270","619791","2020-03-05 14:10:37","2","39","<git><merge><branch><cherry-pick>","Howto share new git branches between two different branch trees?","<p>I have a repo where i have two main branches (one is a custom version of the standard product and the other is the standard). They share like 90-95% of the code, but there are vital differences on them.</p>

<p>What is the best way to create new features that i can merge into both those branches?</p>

<p>Up until now i have started a new branches from one or the other of the main branches and then cherry picked into the other...but it's starting to be a pain. And the git tree looks like sh!t :(</p>

<p>If i merge the branches the receiving branch will be corrupted and have a ton of conflicts, so that is why i have been using cherry-pick.</p>

<p>Is there a nice workflow for something like this? There must be a better way.
The reason i have the two main branches is because almost all of the code are identical, but there are minor,but significant, differences between the main branches.</p>
","3","619791","",""
"60557122","4266661","2020-03-06 03:28:46","3","9575","<git><visual-studio><github><visual-studio-2019><git-cherry-pick>","Cherry Pick Problem in Visual Studio 2019","<p>I just ran into a problem caused by cherry picking within VS2019 which caused me to have to blow away and recreate both my local and github repositories. No big deal as the code was reasonably stable and I'm not co-developing it with anyone.</p>

<p>But I'd like to know what I did wrong so I don't do it again.</p>

<p>I had two branches in the repository, master and dev. I had made one particular change in dev which I wanted to propagate back to master. So, following some directions I found online, I made master the active branch, right-clicked the dev branch and selected Cherry Pick. Thinking that I would be presented with a history list of commits on dev from which I would pick the one I wanted (which was the most recent one).</p>

<p>Only...nothing appeared to happen. Nothing showed up under Changes.</p>

<p>So, thinking I'd messed up somehow, I followed a different set of directions and brought up dev's history while still leaving master as the active branch. From within the history I right-clicked the commit I wanted and selected Cherry Pick.</p>

<p>Still nothing seemed to happen. But I noticed the code change (it was in one place in one file) >>had&lt;&lt; appeared in the master (active) branch.</p>

<p>But when I tried to sync the local repository to github I was told there was an error involving some inconsistency between github and the local repsitory (apologies, I didn't think to copy the error messages down). Things spiraled out of control from there (I think I tried pulling changes from github to cure the inconsistency and then ended up with another error about the local repository head being behind the github repository head or something like that).</p>

<p>If this poor description provides enough clues as to how I messed up, and what I should've done, I'd appreciate the info.</p>
","0","4266661","0","0"
"26257311","3057900","2014-10-08 12:49:03","0","1136","<git><gerrit><cherry-pick>","cherrypick some updates and then push to gerrit cause gerrit build failed","<p>I have a question about whether should push cherrypicked update to gerrit.</p>

<p>My code needs some other code in order to build, and those code is already pushed to gerrit but not merged. I cherrypicked that push and put my code on the top of it. And my code build successfully. Then I only pushed my code to gerrit, and this caused gerrit build failure, I am sure I did not miss any file from my code, what is the reason? Can someone help on this?</p>
","0","3057900","",""
"26579636","2570027","2014-10-27 00:37:22","2","249","<git><git-rebase><git-cherry-pick><tree-conflict>","git cherry-pick a range of commits to prevent history breakage","<h1>Short description of problem</h1>

<p>After a new developers group joined our project they initialized a new repo and copied (not merged!) <strong>snapshot of master</strong> into newly created repo. So in their branch old files lost history of commits which exist in <code>master</code>. After that they started typical git workflow with comitting, branching, merging updates from master etc. And now the problem is to merge their code into <code>master</code> or <code>dev</code> excluding first two commits and preserving our history (and preserving their history also would be good).</p>

<h1>Detailed problem description</h1>

<p>So we have branches: <code>master</code>, <code>dev</code> and <code>funny_developers</code>.</p>

<p>Here is our branch structure:</p>

<pre><code>I---A---B---C---D---Y...X      &lt;--(master/dev)
            \!\      \
       I'---IABC--G--DY..Z     &lt;--(funny_developers flow)
</code></pre>

<p><code>I...C...X</code> - is our main flow of developement (<code>master</code> and <code>dev</code> branches are syncronized now)  with history of commits. This flow has no imports from <code>funny_developers</code> branches</p>

<p><code>I'</code> - is a commit where <code>funny_developers</code> re-initilised a new repo with empty one (seems they made <code>git-init</code>?) . </p>

<p><code>IABC</code> - very dirty commit, where <code>funny_developers</code> copy all files existing in <code>master</code> at the moment of commit <code>C</code> as <strong>new files</strong>. Not merge from <code>C</code>, just recreate project's file structure! So they dropped out all history of changes made during <code>master</code> branch evolution).</p>

<p><code>G..Z</code> - is a bulk of commits where they made a lot of changes. During this flow they also had merged updates from master several times, had created their own branches, had merged them into <code>funny_developers</code> (sometimes with conflict resolution), etc.</p>

<p>So now I have problems with merging <code>G..Z</code> into <code>master</code> preserving our initial history of commits and their too (excluding <code>I'</code> and <code>IABC</code> commits). </p>

<h1>Question</h1>

<p><strong>Could you advice me the best method (if exist) to grab their commits into <code>master</code> and preserve commit history excluding first two ones?</strong></p>

<h1>My experiments for saving Queen and Kingdom at once</h1>

<p>I tried <code>git cherry-pick G..Z</code>. But they were coding in parallel branches and were doing a lot of merges into <code>funny_developers</code>. They resolved a lot of own-branches conflicts. It seems I need a lot of time to resolve them again if I decide to use this method.</p>

<p>I tried <code>git rebase --onto master IABC Z</code>, expecting it able to move branch buckets all within <code>G..Z</code> onto <code>master</code>. But I stucked with a bunch of conflicts related to commits which was a long time ago (even before 'funny_developers' was started). And I can not understand how they relate to actual rebase (may be it because they have reinitilized repo...).</p>

<p>Anyway if I find no solution preserving ""both histories"" I tend to make diff for all their work and provide it as single patch-commit for <code>master</code>. </p>
","8","2570027","0","0"
"63706669","9484203","2020-09-02 13:31:56","9","791","<git><cherry-pick><git-cherry-pick>","What git hooks can be executed on cherry-pick operation?","<p>I am trying to find a way to check commits when cherry-picking them. Unfortunately, I cannot find a git hook that works with <code>cherry-pick</code> operation. What would be a possible solution to execute a script on cherry-picked commit?</p>
","3","9484203","",""
"63727181","1739725","2020-09-03 15:44:04","0","76","<git><cherry-pick><git-cherry-pick>","How does git cherry-pick compute the patch?","<p>I understand how git cherry-pick works at a high level: It takes the changes introduced in one commit and applies them to another.</p>
<p>However, I’m trying to gain a better understanding of how git actually achieves this under the hood.</p>
<p>Suppose you run the following:</p>
<pre><code>$ git checkout main
$ git cherry-pick source-commit
</code></pre>
<p>My understanding is that since a commit is a snapshot, not a set of changes, that cherry-pick must first be computing some sort of diff, and then applying that patch/diff to the current branch (<code>main</code>). Is this patch just the diff of <code>source-commit</code> with its parent? Is the merge base of <code>source-commit</code> and <code>main</code> involved at all?</p>
","0","1739725","",""
"3469163","78259","2010-08-12 15:08:48","2","574","<git><merge><cherry-pick>","How to pull a series of commits in git one at a time?","<p>I have a series of commits in a fork that I want to apply or reject one at a time to my fork.  Should I use git cherry-pick for this?</p>
","4","78259","0","0"
"60224293","1208923","2020-02-14 10:15:26","4","424","<git><git-rebase><git-cherry-pick>","How to change the branching point in Git?","<p>Suppose I have the following structure in my git repo:</p>

<pre><code>          C'---D'---E'---F'    (dev)
        / 
A---B---C---D---E---F       (master)
</code></pre>

<p>I would like to pull <code>C'</code> into the master branch and change the branching point to <code>C'</code>, i.e., I want to turn the above into</p>

<pre><code>              D'---E'---F'     (dev)
             / 
A---B---C---C'---D---E---F  (master)
</code></pre>

<p>I believe I should use a combination of cherry-picking and rebasing, but I am confused about how to do so exactly.  Which sequence of operations should I perform?</p>

<hr>

<p><strong><em>Suggestion</strong> after comments for a clearer schema (since same-letter commits in the original were in fact unnecessary)</em></p>

<pre><code>          G---H---I---J   (dev)
         / 
A---B---C---D---E---F     (master)
</code></pre>

<p>with the associated expected result :</p>

<pre><code>              H---I---J    (dev)
             / 
A---B---C---G---D---E---F  (master)
</code></pre>
","5","1208923","0","0"
"60375865","2483271","2020-02-24 12:20:33","0","189","<git><rebase><cherry-pick>","Removing unnamed git branch","<p>Somehow, I've ended up with a project structure as such:</p>

<pre><code>&gt; git log --graph --oneline --all

* a72aed6 (master) feat(data:model:user): modified db service
* 099becd feat(data:model:user): added CRUD for user model
* 59ac87d refactor(): separating concerns
* dfb983f chore(data:api): removed graphql testing cruft
* aa92817 feat(data:db): setup pg pool connection and query in db/index.ts
* ee03d48 feat(wf): added express
* 184cef0 feat(data:db): added pg
| * 32aedba chore(data:api): removed graphql testing cruft
| * a6825d2 feat(data:db): setup pg pool connection and query in db/index.ts
| * 4a901b1 feat(wf): added express
| * e5753c5 feat(data:db): added pg
|/
* 94426bc (HEAD) feat(qc:test:jest): added test coverage script
* 6126689 feat(build:deploy): added webpack typescript integrations
* 172da85 feat(build:deploy): added webpack-cli
* bab6afa feat(qc): added husky
* c570f33 feat(vcs): added git
</code></pre>

<p>I have tried everything (<code>reset --hard</code>, <code>cherry-pick</code>, <code>rebase -i, drop</code>, etc) to remove commits <code>e5753c5</code> to <code>32aedba</code>, which have mistakenly appeared as duplicates of the 4 commits after while I was rushing part of the project for a deadline :) </p>

<p>What command can I perform to achieve the following output:</p>

<pre><code>&gt; git log --graph --oneline --all

* a72aed6 (master) feat(data:model:user): modified db service
* 099becd feat(data:model:user): added CRUD for user model
* 59ac87d refactor(): separating concerns
* dfb983f chore(data:api): removed graphql testing cruft
* aa92817 feat(data:db): setup pg pool connection and query in db/index.ts
* ee03d48 feat(wf): added express
* 184cef0 feat(data:db): added pg
* 94426bc feat(qc:test:jest): added test coverage script
* 6126689 feat(build:deploy): added webpack typescript integrations
* 172da85 feat(build:deploy): added webpack-cli
* bab6afa feat(qc): added husky
* c570f33 feat(vcs): added git
</code></pre>

<p>Example before and after of what I've tried:</p>

<pre><code>git checkout 32aedba
git rebase -i 94426bc
# `drop` to the above commits

git log --graph --oneline --all
# Returns as above, with HEAD at 94426bc
</code></pre>

<pre><code>git checkout 32aedba
git reset --hard HEAD~4
# `drop` to the above commits

git log --graph --oneline --all
# Returns as above, with HEAD at 94426bc
</code></pre>
","4","2483271","",""
"4184920","139289","2010-11-15 13:45:30","6","1267","<git><cherry-pick>","git cherry-pick -x: link in details instead of in summary","<p>Given a commit with the message ""foo"", i.e. with only a summary part, I do <code>git cherry-pick -x the_commit</code>. The result is a new commit with message <pre>foo<br>(cherry picked from commit eb42a6475d2c2e4fff7a1b626ce6e27eec21e886)</pre>
Now that's not good, because it is a two-line summary, which seems like a bug in git.</p>

<p>But how can I make git make the comment look like below without editing the comment manually?</p>

<pre>foo<br><br>(cherry picked from commit eb42a6475d2c2e4fff7a1b626ce6e27eec21e886)</pre>
","0","139289","0","0"
"60597006","1084174","2020-03-09 08:36:21","1","137","<git><version-control><git-branch><cherry-pick><git-cherry-pick>","Why `git log --reverse --left-only --cherry-pick` not working as expected?","<p>I am using this below command to see the list of commit hashes which have not been cherry picked from branch <code>dev</code> to <code>main</code>, since the <code>main</code> branch creation date from <code>dev</code> branch,</p>

<pre><code>git log --reverse --left-only --cherry-pick --oneline dev...main --since 24-oct-2019 --pretty='format:%H    %ae'
</code></pre>

<p>Output is like,</p>

<pre><code>6c4176c3e621ef9b83ccb4ff7635f0bd9ecd8d5c    a@xyx.com
91af2d1165d5b561af68824df37b07a520c5eb2f    b@xyx.com
a19a8eca5c5fe388a9ae9ce67f5f3592b9662012    a@xyx.com
...
</code></pre>

<p>However, I am seeing that some of the CLs are showing in the list which already have been cherry-picked. </p>

<p><strong>Why are they showing in the list?</strong></p>
","7","1084174","",""
"66871667","12899767","2021-03-30 13:14:39","0","235","<git><cherry-pick><git-cherry-pick>","Git cherry pick into a new subdirectory","<p>I often have to git cherry-pick from an old project to a new project. The new project hosts all files in a <code>/server/</code> subdirectory. This throws off all the cherry-picks as it thinks the files should be, e.g. <code>/path/to/project/myfile.php</code> rather than <code>/path/to/project/server/myfile.php</code></p>
<p>Is there a way to resolve this with Git?</p>
<p>Many thanks in advance.</p>
","0","12899767","",""
"31002979","3037258","2015-06-23 12:34:46","9","16292","<git><cherry-pick><git-cherry-pick>","Why does this cherry pick result in a merge conflict","<p>Edit: I added some Information I thought to be unnecessary, but is not.
I have two branches, A and B. After making three commits in A that changes file.c I want to cherry-pick them into B, there is also a file.h which was changed in A~1</p>

<pre><code>&gt; git cherry-pick A~2
Success
&gt; git cherry-pick A~1
error: could not apply 81e0723... 
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
&gt; git status
You are currently cherry-picking commit 81e0723.
Unmerged paths:
(use ""git add &lt;file&gt;..."" to mark resolution)

  both modified:   some/unrelated/file.txt
  both modified:   file.c
</code></pre>

<p>Now when looking at some/unrelated/file.txt it contains the changes to file.h somewhere right in the middle. So this looks like a bug in git. So I will now undo the changes some/unrelated/file.txt manually and add them to file.h.</p>
","4","3037258","",""
"31064051","3023269","2015-06-26 02:47:41","2","549","<git><git-cherry-pick>","git: different possible output of cherry-pick","<p>I am trying write a script that automate git cherry-pick. I need to be able to handle all possible failure of git cherry-pick. So far, I've counted 3 kind of outputs:</p>

<p>+Cherry-pick success, no merge conflict. Exit code is 0. The output look like this:</p>

<pre><code>git cp ed54dfc
[dev/nango/cp3_nocconflict 97f2dce] test cp1
1 file changed, 1 insertion(+)
create mode 100644 foo.txt
</code></pre>

<p>+Cherry-pick commit that already in the branch, or no code is committed. Exit code 1. The output look like this:</p>

<pre><code>You are currently cherry-picking commit 61ff477.


It took 3.90 seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
nothing to commit, working directory clean
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

git commit --allow-empty

Otherwise, please use 'git reset'
</code></pre>

<p>+Cherry-pick throws a merge conflict. Exit code 1: </p>

<pre><code>error: could not apply ed54dfc... test cp1
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>Is there any other possibility of cherry-pick? I take a look at the doc and there is not much mention about possible outcome of cherry-pick.</p>

<p>Thanks.</p>
","0","3023269","0","0"
"48619813","245549","2018-02-05 09:56:26","5","10815","<git><git-cherry-pick><git-fetch>","What is the difference between checkout and cherry-pick?","<p>I have fetched a particular bug fix from a remote repository. Now I have two options:</p>

<ol>
<li><code>git checkout FETCH_HEAD</code></li>
<li><code>git cherry-pick FETCH_HEAD</code></li>
</ol>

<p>and I am not sure what is happening in both cases. I have tried the first version and it looks to me that in this way I got the changes from the remote repository into my local repository but my local changes seem to be lost (I do not see them in the code). The second option, however, seems to do what I need (I see in the code both, my changes and changes from the remote repository).</p>

<p>Although it looks like I got what I needed, I still want to better understand what happen in both cases. </p>

<p>I have seen <a href=""https://stackoverflow.com/questions/26460415/gerrit-git-pull-vs-checkout-vs-cherrypick-which-is-for-what"">this</a> question and answers but I do not understand the answer because I do not know what the following phrases mean:</p>

<ol>
<li>""working directory reflects X""</li>
<li>""X fetches Y""</li>
</ol>
","0","245549","",""
"31083069","5054747","2015-06-26 22:31:00","2","288","<python><git><shell><cherry-pick>","How do I disable git cherry-pick's -e option?","<p>Whenever I type ""git cherry-pick --continue"", it always brings up an editor that I have to ""ctrl-x"" out of. This seems to resemble ""git cherry-pick""'s ""-e"" option, which appears to be automatically enabled. I would like to disable it. Alternatively, I would like to have a line in my Python program that can ""ctrl-x"" out of it as soon as it pops up. How can I do this?</p>

<p>I'm running Python code which finds the commits a commit you want to cherry pick depends on. In the process, I run code that deletes the ""&lt;&lt;&lt;"", ""|||"", ""==="" and "">>>"" lines, as well as the stuff between ""&lt;&lt;&lt;"" and ""==="" in merge conflicts caused by commits that need to be later be manually merged. This lets me continue cherry-picking other commits dependent on it: </p>

<pre><code> 85             if commit in divergentCommits:
 86                 problems = divergentConflicts[commit]
 87                 for problem in problems:
 88                     fileName = problem[0]
 89                     problemFixes = problem[1]
 90                     for fix in problemFixes:
 91                         print ""sed --in-place "" + fix + fileName
 92                         os.system(""sed --in-place "" + fix + fileName)
 93                     os.system(""git add "" + fileName)
 94                     os.system(""git cherry-pick --continue"")
</code></pre>
","0","5054747","",""
"66980881","2490398","2021-04-07 06:48:35","1","165","<git><gerrit><cherry-pick>","bring a change from gerrit to local workspace without recording commit id and message","<p>I want to bring (like cherrypick) a change but I don't want to record commit message and/or change-id. Is there any way to do so?</p>
<p>My command from a gerrit site for cherrypick the change looks as follows, which I ran in my project repository:</p>
<pre class=""lang-sh prettyprint-override""><code>git fetch ssh://review-androidsite.com:20000/xyz/project refs/changes/17/3442417/2 &amp;&amp; git cherry-pick FETCH_HEAD
</code></pre>
","4","2490398","",""
"15690261","280030","2013-03-28 19:14:02","5","4812","<git><cherry-pick>","git cherry-pick merge deleting file","<p>I'm trying to cherry-pick a commit in git, which adds a bunch of files, but also modifies a file that doesn't yet exist in my branch.</p>

<p>There is a conflict where the files to add are all staged, and the file that was changed in the commit but doesn't yet exist in the branch is not staged and and is listed as:</p>

<pre><code>deleted by us: app/changed_file.rb
</code></pre>

<p>If I just commit the staged files, will that cause issues when the <code>changed_file.rb</code> is eventually merged into the branch?</p>
","0","280030","0","0"
"48647746","2054434","2018-02-06 16:35:24","1","1416","<git><cherry-pick>","How to properly use Git cherry-pick","<p>I know that we use <code>cherry-pick</code> to get the content from a specific commit into our current branch. </p>

<p>I'll explain a situation and need some help to fully understand cherry-pick and be sure this is the right way to solve my problem.</p>

<p>Imagine we have two developers: Bob and Tom and they worked on same files. </p>

<p>Bob has a solid branch which is already in production.<br>
Tom has some work of future release that Bob does not have.<br>
Bob may also have some work that Tom does not have.<br>
Bob wants Tom's work, but he needs to get one by one and test it before sending to production.
Wouldn't 'cherry-pick` overwrite Bob's work ? If yes, what is the right way to proceed in this situation ?</p>
","4","2054434","",""
"48658299","245549","2018-02-07 07:37:18","0","130","<git><gerrit><git-checkout><git-cherry-pick>","In what way does ""checkout merge its dependencies"" and in what cases should it be used instead of cherry picking?","<p>I use gerrit. I have fetched a remote repository. Now I have two options <code>checkout</code> or <code>cherry-pick</code>. I have tried the second options (<code>cherry-pick</code>) and the result that I got this way looks to me as I wonted (in my local repository I see my changes of the code as well a the changes introduced by the commit that I have fetched and cherry-picked).</p>

<p>However, my colleague insist that I need to <code>checkout</code> because ""checkout also merges its dependencies"". I have tried to checkout but, as a result, I do not see my changes in the code (I see only the changes introduced by the remote commit, that I have fetched and checked out). This behavior is, kind of, makes sense to me as well (I just put the HEAD of the repository to another ""line of changes"", it is like I switch to completely another brunch and, as a consequence, I do not see there changes from my original branch, where I did all my changes).</p>

<p>Now, I want to understand what my colleague wants from me. Why should I checkout and how exactly should it be done (with what sequence of commands)? Should I first create a new branch for the remote changes that I will check out? Should I merge this new branch into my branch with my changes? </p>
","3","245549","",""
"31130672","216514","2015-06-30 06:00:37","1","505","<git><github><pull-request><git-cherry-pick>","Git Squash Cherry-Picked Commits","<p>Here is the scenario, I have two feature branches like below</p>

<pre><code>Feature_List                Feature_API
   \                           \    
    F-G-H-I-J-K                 L-M-N-O-P-Q
</code></pre>

<p>I have created a new branch from <code>Feature_API</code> and cherry-picked all the commits from <code>Feature_List</code> and add my changes into this new branch, now when i create PR on github i see all the cherry-picked commits which is obvious. What i want is that my PR should only show my commits not the cherry-picked commits.</p>

<p>What i want is to retain all changes from <code>Feature_List</code> and my own new commits in my new branch but i don't want to show cherry-picked commits on PR. The problem is PR shows a long(cherry-picked + my new commits) diff which is want to avoid. </p>

<p>Is this possible and How?</p>
","2","216514","",""
"67017606","840340","2021-04-09 08:26:39","6","815","<git><cherry-pick>","Find commits of a git branch, which were not cherry picked into another branch","<p>I have two branches in <a href=""https://git-scm.com/"" rel=""nofollow noreferrer"">git</a>, where one branch <code>master</code> contains all commits, and another branch, e.g., <code>release</code>, which contains some cherry-picked commits from the first branch <code>master</code>. Since the commits are cherry-picked in <code>release</code>, they have different commit hashes than the corresponding commits in <code>master</code>, but the commit messages are the same.</p>
<p>Now I want to find commits from <code>master</code>, which were not cherry-picked into <code>release</code>. Note that the cherry-picked commits might be different in code from original commits due to conflict resolutions.
How can I do it? Is there native support in <code>git</code> for this?</p>
<p>Example:</p>
<p><code>master</code> branch:</p>
<pre class=""lang-sh prettyprint-override""><code>git checkout master
git log --oneline -7
</code></pre>
<p>gives</p>
<pre><code>2cba4b1d (HEAD -&gt; master) Message subject for commit 7
f54fc16f Message subject for commit 6
4d871cbd Message subject for commit 5
a83ed44c Message subject for commit 4
48d0fb73 Message subject for commit 3
931da9a6 Message subject for commit 2
8553323b Message subject for commit 1
</code></pre>
<p><code>release</code> branch</p>
<pre class=""lang-sh prettyprint-override""><code>git checkout release
git log --oneline -5
</code></pre>
<p>gives</p>
<pre><code>d65a04c6 (HEAD -&gt; release) Message subject for commit 7
8aeecd92 Message subject for commit 6
2a54e335 Message subject for commit 4
99985f38 Message subject for commit 3
e76a9bb4 Message subject for commit 1
</code></pre>
<p>So the difference between the two branches will be two commits with message subjects:</p>
<pre><code>Message subject for commit 5
Message subject for commit 2
</code></pre>
<p>It is also OK if it shows commit hashes:</p>
<pre><code>4d871cbd Message subject for commit 5
931da9a6 Message subject for commit 2
</code></pre>
<h3>Additional clarifications and requirements:</h3>
<p>The above example returns the diff in the same order as commits were merged. Getting the same order in the result as in the original commit logs helps to identifier commits in the original commit log of <code>master</code>. It would be nice if it is possible to achieve too.</p>
<p>In my case both branches have linear history and there are no merge commits.</p>
","1","840340","",""
"31157220","3428756","2015-07-01 09:15:00","3","2550","<git><rebase><cherry-pick>","Git Rebase after Cherry-Pick","<p>Let's say i have to branches:</p>

<pre><code>dd2e86 - 946992 - 9143a9 - a6fd86 - 5a6057 [master]
           \
            76cada - 62ecb3 - b886a0 [development]
</code></pre>

<p>Now a commit from devel is required in the master branch, so i cherry-pick it:</p>

<pre><code>git checkout master
git cherry-pick 62ecb3
</code></pre>

<p>Assumed that some hotfixes are committed to master, can the development branch be safely rebased?</p>
","0","3428756","",""
"15756877","2234696","2013-04-02 05:36:57","1","5714","<git><git-cherry-pick>","GIT cherry-pick how to find out already cherry-picked or not","<p>I want to confirm whether SHA is cherry-picked or not before i cherry-pick into a repo, by anyone else? 
how to find out whether someone already cherry-picked a SHA or not?</p>
","1","2234696","",""
"67046645","15062103","2021-04-11 15:12:36","2","986","<git><cherry-pick><git-merge-conflict>","Cannot cherry-pick commit changing not-existing file","<p>I'm wondering why git doesn't allow cherry-picking a commit that introduces changes to a file that doesn't exist.
My understanding is that a commit represents a full snapshot of working directory. So cherry-picking a commit containing file that currently doesn't exist should simply create that file - but I can see that it's not the case.</p>
<p>Below is a couple of commands to reproduce the situation I'm talking about.</p>
<pre><code>$ git init
Initialized empty Git repository in /home/mzakrze/workspace/tmp/.git/
$ echo &quot;Hello world!&quot; &gt; first_file; git add first_file; git commit -m &quot;Init commit&quot;
[master (root-commit) 7f9478a] Init commit
 1 file changed, 1 insertion(+)
 create mode 100644 first_file
$ echo &quot;Fox jumps over the layz dog&quot; &gt; test; git add test; git commit -m &quot;Commit with a typo&quot;
[master 776387b] Commit with a typo
 1 file changed, 1 insertion(+)
 create mode 100644 test
$ echo &quot;Fox jumps over the lazy dog&quot; &gt; test; git add test; git commit -m &quot;Fix typo&quot;
[master 9ea19df] Fix typo
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log 
commit 9ea19dfe2597b28eb576e2682e745de3da74733f
Author: mzakrze &lt;xxxxxx@gmail.com&gt;
Date:   Sun Apr 11 17:01:13 2021 +0200

    Fix typo

commit 776387b563edba9df2a12c5d1a2fd5bffb10c643
Author: mzakrze &lt;xxxxxx@gmail.com&gt;
Date:   Sun Apr 11 17:00:53 2021 +0200

    Commit with a typo

commit 7f9478a83e3938bf57552c1b90ddc7322b1bf315
Author: mzakrze &lt;xxxxxx@gmail.com&gt;
Date:   Sun Apr 11 16:59:04 2021 +0200

    Init commit
$ git reset --hard 7f9478a83e3938bf57552c1b90ddc7322b1bf315
HEAD is now at 7f9478a Init commit
$ git cherry-pick 9ea19 # cherry-pick &quot;Fix typo&quot;
error: could not apply 9ea19df... Fix typo
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>
<p>INB4: I'm not looking for a &quot;solution&quot;, I just want to understand why git thinks it's a conflict.</p>
","1","15062103","0","0"
"67588350","9172066","2021-05-18 14:30:06","8","380","<git><githooks><git-cherry-pick><post-commit-hook>","Why doesn't `git cherry-pick` (without `--no-commit`) run my post-commit hook?","<p>How can I trigger a post-commit hook with the command <code>git cherry-pick &lt;commit&gt;</code>?</p>
<p>What I've tried:</p>
<ul>
<li>I tried the command <code>git commit -m '...'</code> . It triggered the post-commit hook normally.</li>
<li>In the githooks document, there are no hooks related to cherry-pick.</li>
<li>After viewing the source code of Git, I found it uses <code>git merge</code> in some cases, and <code>git commit</code> in others. But I'm not sure when to use which command.</li>
</ul>
<p>My questions are:</p>
<ol>
<li>Why don't post-commit hooks work when I use <code>git cherry-pick</code>?</li>
<li>Is there a hook that cherry-pick will run?</li>
</ol>
","0","9172066","0","0"
"67605145","711559","2021-05-19 14:23:07","1","478","<git><git-cherry-pick>","Unexpected behaviour when git cherry-pick and merge between branches","<p>I'm surprised that changes done after cherry-picking in git become obsolete when merging. Here is a full example.</p>
<p>The following is business as usual.</p>
<ol>
<li>Create a repo</li>
<li>Add a file with test &quot;rotums kanoner och krut&quot;</li>
<li>Check out a new branch, and add the text line &quot;mutors kanoner och krut&quot;</li>
<li>Check out master and cherry-pick the commit with &quot;mutors kanoner och krut&quot;</li>
</ol>
<pre><code>Mac:git user1$ mkdir myrepo; cd myrepo; git init
Initialized empty Git repository in /Users/user1/tmp/git/myrepo/.git/

Mac:myrepo user1$ echo &quot;rotums kanoner och krut&quot; &gt; rotum.txt

Mac:myrepo user1$ git add rotum.txt 

Mac:myrepo user1$ git commit -m &quot;Added file&quot;
[master (root-commit) 1044abb] Added file
 1 file changed, 1 insertion(+)
 create mode 100644 rotum.txt

Mac:myrepo user1$ git checkout -b mybranch
Switched to a new branch 'mybranch'

Mac:myrepo user1$ echo &quot;mutors kanoner och krut&quot; &gt;&gt; rotum.txt  

Mac:myrepo user1$ git commit -am &quot;Added mutor&quot;
[mybranch 19afeba] Added mutor
 1 file changed, 1 insertion(+)

Mac:myrepo user1$ git checkout master
Switched to branch 'master'

Mac:myrepo user1$ git cherry-pick 19af
[master cce2ca5] Added mutor
 Date: Wed May 19 16:12:04 2021 +0200
 1 file changed, 1 insertion(+)

Mac:myrepo user1$ cat rotum.txt  
rotums kanoner och krut
mutors kanoner och krut
</code></pre>
<p>Now is when the unexpected behaviour occurs.</p>
<ol start=""5"">
<li>I remove the line that was added and cherry-picked (I do this by overriding the file, unconventional method, but useful in this case).</li>
<li>Then I merge mybranch to master. I would expect the changes done in f63dc50, removal of a line, to remain, but it mysteriously vanishes. The line &quot;mutors kanoner och krut&quot; is back.</li>
</ol>
<pre><code>Mac:myrepo user1$ echo &quot;rotums kanoner och krut&quot; &gt; rotum.txt  

Mac:myrepo user1$ cat rotum.txt  
rotums kanoner och krut

Mac:myrepo user1$ git commit -am &quot;Removed mutor&quot;
[master f63dc50] Removed mutor
 1 file changed, 1 deletion(-)

Mac:myrepo user1$ git merge mybranch
Merge made by the 'recursive' strategy.
 rotum.txt | 1 +
 1 file changed, 1 insertion(+)

Mac:myrepo user1$ cat rotum.txt
rotums kanoner och krut
mutors kanoner och krut
</code></pre>
<p>Is this expected behaviour or a bug?</p>
","1","711559","",""
"15807522","441352","2013-04-04 09:33:21","24","10367","<git><git-log><cherry-pick><git-cherry-pick>","Why is git log --cherry-pick not removing equivalent commits?","<p>I have been trying to use </p>

<pre><code>git log --no-merges --cherry-pick --right-only master...my-branch
</code></pre>

<p>to generate a list of commits that are in the my-branch, but not in master (as per the git-log documentation). However, there are still many equivalent commits that are coming up in the list. If I show them and their patches, there is no difference apart from the commit id.</p>

<pre><code>git show 16cbd0e47406a4f7acbd6dc13f02d74d0b6a7621 &gt;patcha
git show c53c7c32dcd84bfa7096a50b27738458e84536d5 &gt;patchb

diff patcha patchb
1c1
&lt; commit 16cbd0e47406a4f7acbd6dc13f02d74d0b6a7621
---
&gt; commit c53c7c32dcd84bfa7096a50b27738458e84536d5
</code></pre>

<p>And even <code>git patch-id</code> shows them as being equivalent:</p>

<pre><code>git show c53c7c32dcd84bfa7096a50b27738458e84536d5 | git patch-id
2b5504fb9a8622b4326195d88c7a20f29701e62b c53c7c32dcd84bfa7096a50b27738458e84536d5
git show 16cbd0e47406a4f7acbd6dc13f02d74d0b6a7621 | git patch-id
2b5504fb9a8622b4326195d88c7a20f29701e62b 16cbd0e47406a4f7acbd6dc13f02d74d0b6a7621
</code></pre>

<p>How does <code>git log --cherry-pick</code> not pick these up as duplicates?</p>
","1","441352","0","0"
"49318654","244297","2018-03-16 10:36:48","0","510","<git><commit><git-cherry-pick>","How does 'git cherry-pick' find the file(s) to apply the changes to?","<p>I have two repositories with a similar structure, but no common commits. I've added them as remotes of each other to be able to <a href=""https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html"" rel=""nofollow noreferrer""><code>cherry-pick</code></a> commits between them.  </p>

<p>Recently, I've noticed that git correctly applies the commit's changes even if the files' paths in the repositories differ (and the files themselves differ). How does <code>git</code> find the file(s) to apply the changes to? Does it look through <em>all</em> the files in the current snapshot?</p>
","1","244297","",""
"49366387","2032514","2018-03-19 15:17:22","11","2324","<git><git-cherry-pick>","Why extra changes in git cherry-pick conflict?","<p>For <code>git cherry-pick</code> resulting in a conflict, why does Git suggest more changes than just from the given commit?</p>

<p>Example:</p>

<pre><code>-bash-4.2$ git init
Initialized empty Git repository in /home/pfusik/cp-so/.git/
-bash-4.2$ echo one &gt;f
-bash-4.2$ git add f
-bash-4.2$ git commit -m ""one""
[master (root-commit) d65bcac] one
 1 file changed, 1 insertion(+)
 create mode 100644 f
-bash-4.2$ git checkout -b foo
Switched to a new branch 'foo'
-bash-4.2$ echo two &gt;&gt;f
-bash-4.2$ git commit -a -m ""two""
[foo 346ce5e] two
 1 file changed, 1 insertion(+)
-bash-4.2$ echo three &gt;&gt;f
-bash-4.2$ git commit -a -m ""three""
[foo 4d4f9b0] three
 1 file changed, 1 insertion(+)
-bash-4.2$ echo four &gt;&gt;f
-bash-4.2$ git commit -a -m ""four""
[foo ba0da6f] four
 1 file changed, 1 insertion(+)
-bash-4.2$ echo five &gt;&gt;f
-bash-4.2$ git commit -a -m ""five""
[foo 0326e2e] five
 1 file changed, 1 insertion(+)
-bash-4.2$ git checkout master
Switched to branch 'master'
-bash-4.2$ git cherry-pick 0326e2e
error: could not apply 0326e2e... five
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
-bash-4.2$ cat f
one
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
two
three
four
five
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0326e2e... five
</code></pre>

<p>I was expecting just the ""five"" line between the conflict markers.
Can I switch Git to my expected behavior?</p>
","0","2032514","0","0"
"49425630","864113","2018-03-22 10:01:31","0","259","<git><merge><cherry-pick>","git cherry-picked commit, but files whole replaced, how can I recalculate difference?","<p>I made cherry-pick of a commit from the feature branch to the master branch.
But these changed files was moved to another folder in master-branch.
So I have used follow answer to merge moved files:
<a href=""https://stackoverflow.com/questions/24904653/git-merge-conflict-due-to-moved-files"">git merge conflict due to moved files</a></p>

<p>But now I have a problem:
instead of calculate the diff of replaced files git want to override them all.
How can I recalculate difference for a correct merge-commit?</p>
","0","864113","",""
"15937405","1264587","2013-04-10 22:11:22","1","2046","<git><git-rebase><cherry-pick>","Git: how to push changes made to only certain files?","<p>I recently ran into a problem where I need to select a few files to push to remote branches with git. <strong>My specific use case here is there is only one file created/modified in every single commit, and I need to programatically push the selected files (in their latest state).</strong> I did a bit of research and found 2 tricks that came close to what I need to do:</p>

<ol>
<li>I can use cherry-pick to pick certain commits into a new branch and merge that branch into the remote master.</li>
<li>I can use rebase -i to reorder the commits, I assume I can reorder so that the commits relating to those selected files are all in front and I can just push the last commit in that list.</li>
</ol>

<p>For cherry-pick it is a bit confusing. I can create a new branch without all the dirty commits and pick the file commits into that branch. However if the file already exists in the branch, it always throws a conflict that I have to fix manually, not ideal.</p>

<p>For rebase -i, from what I have read I need to goto an interactive editor where I need to manually reorder the commits, and after that I can do a git push origin  to apply everything up to the commit-SHA (which is reordered). Not ideal since I have to do manual work.</p>

<p>Overall I think rebase came closer to what I need, but I couldn't find an easy way to do it programatically. Can anyone come up with some git analogy operations that can accomplish my task?</p>
","2","1264587","0","0"
"50418096","3805131","2018-05-18 19:29:29","0","33","<git><range><revision><cherry-pick><git-cherry-pick>","how to spell git revision range with single endpoint","<p>I was lookin for range based on single commit to be able to do a <code>cherry-pick</code></p>

<p>In manual for <code>gitrevisions</code> I'm reading</p>

<pre><code>&lt;rev&gt;^-&lt;n&gt;, e.g. HEAD^-, HEAD^-2
           Equivalent to &lt;rev&gt;^&lt;n&gt;..&lt;rev&gt;, with &lt;n&gt; = 1 if not given.
</code></pre>

<p>But I cant use it. Any help?</p>

<p><strong>UPDATE</strong>:</p>

<p>I want to be able to do something like</p>

<pre><code>git cherry-pick &lt;rev&gt;&lt;some static tricks&gt;
</code></pre>

<p>to cherry pick giver  and its - say - three parents.</p>
","1","3805131","",""
"68978977","1123685","2021-08-30 04:35:13","2","704","<git><git-rebase><git-cherry-pick>","Using git rebase interactive to orchestrate series of git cherry-pick?","<p>git cherry-pick allows simple merges to be cherry-picked simply by indicating which of the merge parents should be used as the baseline.  For example:</p>
<pre><code>git cherry-pick -m 1 1234abcdef
</code></pre>
<p>I have a bunch of commits that I want to cherry pick, a few of which may be merges, and others will not be.  I would like to be able to use git rebase to cherry-pick all these commits with something like this:</p>
<pre><code>git rebase -i --onto myBranch myBranch 
</code></pre>
<p>and put the pick list into the interactive file:</p>
<pre><code>p 1234
p 3224
... a bunch more picks
p abcde
</code></pre>
<p>And, if git rebase encounters a merge in ones of those commits, I want to specify the equivalent of cherry-pick's <code>-m 1</code> option to indicate the change should be picked against the first parent.</p>
<p>I have tried a number of the merge-related options to rebase, but I always end up getting the error:</p>
<pre><code>commit 3c4ffe04532 is a merge but no -m option was given.
</code></pre>
<p>(even if I specify -m to rebase.)</p>
<p>I realize I could write a script using cherry-pick, but I like the existing behavior <code>rebase -i</code> (it runs through the command list and pauses if it gets to something it can't handle).  I'd very much like to leverage that logic directly, but I haven't been able to figure out the right way to finesse rebase's <code>pick</code> command to fill in this gap.</p>
<p>Is there a way to get rebase to adopt cherry-pick's <code>-m #</code> behavior for <code>pick</code>?</p>
<p>To state my goal another way and help clarify the question - I want to use git-rebase's <code>--i</code> capability to coordinate a series of <code>git cherry-pick</code>s so that any merge conflicts in the process can be resolved manually and then the process can be managed with <code>--continue</code>, <code>--abort</code> and/or <code>--skip</code>.</p>
<p>This would be useful because a simple script consisting of:</p>
<pre><code>git cherry-pick -m 1 e1bed15c97f3f
git cherry-pick -m 1 6b5e6060b0e99
....
git cherry-pick -m 1 1a625d6b45faa
</code></pre>
<p>is likely to abort with an error like this:</p>
<pre><code>error: could not apply 6b5e6060b0e99... Implement Something... 
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'

d:\src&gt;git cherry-pick -m 1   e1bed15c97f3f
error: Cherry-picking is not possible because you have unmerged files.
hint: Fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'
hint: as appropriate to mark resolution and make a commit.
fatal: cherry-pick failed
</code></pre>
<p>Thanks!</p>
","3","1123685","",""
"16069668","11827","2013-04-17 20:28:13","8","11038","<git><cherry-pick>","cherry-picking with git with a conflict","<p>I have two branches Z with some changed and M with some conflicting changes. I'd like to merge the first change on Z into M. When I try to see which changes are still out there.
(There are actually a few more changes but this already shows the problem)</p>

<pre><code>$ git checkout M
$ git cherry M Z
+ 153c2f840f2192382be1fc435ceb069f0814d7ff
+ 4a7979d5dd526245b51769db21acf4c286825036

$ git cherry-pick 153c2f840f2192382be1fc435ceb069f0814d7ff
error: could not apply 153c2f8... add Z
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
• (M|CHERRY-PICKING) $ git st
# On branch M
# Unmerged paths:
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both modified:      README.txt
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
• (M|CHERRY-PICKING) $ vim README.txt 
</code></pre>

<p>I fixed the conflict here</p>

<pre><code>• (M|CHERRY-PICKING) $ git add README.txt
• (M|CHERRY-PICKING) $ git ci -m'cherry picked'
  [M dc5de35] cherry picked
  1 file changed, 1 insertion(+), 1 deletion(-)
• (M) $ git cherry M Z
+ 153c2f840f2192382be1fc435ceb069f0814d7ff
+ 4a7979d5dd526245b51769db21acf4c286825036
</code></pre>

<p>So after I committed the change it still thinks that neither changes were cherry-picked
I was expecting:</p>

<pre><code>- 153c2f840f2192382be1fc435ceb069f0814d7ff
+ 4a7979d5dd526245b51769db21acf4c286825036
</code></pre>

<p>How am I going to know a week from now that I already merged 153c2f ?
How can I do the cherry-picking in a way that it will know about that merge?</p>
","0","11827","0","0"
"68574387","11976353","2021-07-29 10:36:49","2","520","<git><git-cherry-pick>","How to cherry pick range of commits from specific author?","<p>For example I have such commits:</p>
<pre><code>comit1 user1
comit2 user2
comit3 user3
comit4 user1
comit5 user1
comit6 user2
comit7 user1
</code></pre>
<p>How can I commit commits only from user1?</p>
<pre><code>comit1 user1
comit4 user1
comit5 user1
comit7 user1
</code></pre>
<p>If using cherry-pick is impossible, are there any other solutions using 1,2 commands?</p>
","5","11976353","",""
"50043480","1207818","2018-04-26 12:51:23","3","13044","<git><merge><cherry-pick>","Can't cherry pick one commit to a branch (bad object error)","<p>OK, so our general git structure is that we have a master branch, one or more release branches and then feature branches.  All the primary development happens in the feature branches but bug-fixes will sometimes get committed directly to the release branches.</p>

<p>While merging some features into a release branch, there was a bad merge but we didn't notice it until a couple bugfixes were committed afterwards.  Some of the feature branches were deleted after merging (something we will alter our workflow to only do after an actual release has occurred in the future).  If they hadn't been deleted, we would just scrap the release branch and redo it.</p>

<p>I'm now trying to eliminate this bad merge.  I created a new release branch from the release branch prior to the merge.</p>

<pre><code>git checkout &lt;hash prior to merge&gt;
git checkout -b new_release_branch
git merge feature_branch_which_resulted_in_bad_merge_before
</code></pre>

<p>This branch is now the way we want it but I still need to bring in the few (less than 5) commits that were made to release_branch after the bad merge.  But I can't figure out how to do it.  I thought that cherry-pick was the way to go but when I try I get:</p>

<p><s>$ git cherry-pick fa4a761<br/>
error: fa4a761: can't cherry-pick a blob<br/>
fatal: cherry-pick failed</s></p>

<pre><code>$ git cherry-pick 44923992349dae68d982dd305a289ba63f8f6d0b
fatal: bad object 44923992349dae68d982dd305a289ba63f8f6d0b
</code></pre>

<p>Note that the above hash is copy/pasted out of gitk but it doesn't show up in any git log for any of my branches.</p>

<p>I also went back and checked and all of the commits I'm trying to fix right now and they are all the same.  I'm not sure what that means or why they would show up in gitk but not in git log (where is gitk getting the information?).</p>

<hr>

<p>OK, Update time.  Here is the rest of the story that I left out.  When I discovered the broken merge, I created a new clone of the repo to ""play with"" from our central repo.</p>

<p>Turns out all of the problem commits were never pushed from the original copy of the repo to the central repo.  Once I pushed those commits, I was able to fix everything up just fine.</p>
","4","1207818","",""
"68584845","107762","2021-07-30 02:43:44","1","980","<git><azure-devops><pull-request><git-cherry-pick>","Azure DevOps Pull Request after Cherry Picking","<p>I'm working with Azure DevOps and running into a situation with git and a Pull Request I can't understand and looking for help.</p>
<p>Here is the scenario:</p>
<ul>
<li>I have two branches: dev, stage.</li>
<li>dev has numerous commits which have not been merged into stage.</li>
<li>file.txt exists in both branches; there are three commits (123,124,125) in dev which have mutated this file so it is content wise different than stage.</li>
</ul>
<p>I cherry pick commit 123 from dev with a target branch of stage into a topic branch. The topic branch is then pull requested into stage.</p>
<p>I then repeat this process for commit 124 and 125 from dev.</p>
<p>If I compare file.txt in the dev branch to file.txt in the stage branch they are now identical content wise.</p>
<p>If I submit a pull request in Azure DevOps from dev to stage on the Files tab of the pull request it is showing me the proposed changes to file.txt as if the dev commits had never been cherry picked into the stage version of file.txt.</p>
<p>I realize that when I cherry pick, a new commit is created within stage so the stage branch does not realize commits 123,124,125 from dev have been applied -- but shouldn't the Azure DevOps File view know the content of file.txt is the same?</p>
","0","107762","",""
"16112561","2125827","2013-04-19 19:54:16","17","8092","<gerrit><cherry-pick><git-cherry-pick>","error: addinfo_cache failed while cherrypicking","<p>I am getting the followinge error while cherry-picking a gerrit...does anyone have info on what this means and why would anyone see it?</p>

<pre><code>error: addinfo_cache failed for path 'ROE/NAS/src/abc.c
</code></pre>
","1","2125827","0","0"
"50089384","1246758","2018-04-29 17:25:35","1","214","<git><github><git-cherry-pick>","Merge single commit from pull request","<p>I'm the owner of repository A.</p>

<p>My Collage created a fork from my repository (AFork) and made a Pull request or Commits A, B and C (In that order).</p>

<p>I reviewed his changes and found that i only wont to merge the changes of commit C without the changes that parts of commit A and B.</p>

<p>I understand that i can not do that with GitHub website and i have to use the Git command line.</p>

<p>I investigated, and found something called ""cherry-pick"" but for some reason i can not figure out whats are the exact steps i have to do.</p>

<p>What i tried is:</p>

<ol>
<li>Connecting to the fork and pulling everything to a separate directory.</li>
<li>from the above directory (of the fork) i typed: git cherry-pick [long-hash of the C commit here]</li>
</ol>

<p>i got the following error:</p>

<p>The previous cherry-pick is now empty, possibly due to conflict resolution</p>

<p>How can i fix that or what should i do to accomplish what i want to do?</p>

<p>Will be help if someone will write the exact steps that i have to do including command line examples.</p>
","2","1246758","",""
"50490585","3628421","2018-05-23 14:10:07","3","2882","<eclipse><git><egit><cherry-pick><git-cherry-pick>","Cherry pick onto another branch in Eclipse git","<p>In Eclipse using egit, is it possible to cherry pick a commit (in my case on the currently checked out branch, e.g. master) onto another branch B without first having to check out B?</p>

<p>This would be quite a time saver...</p>

<p>NB, this is explicitly about cherry picking (involving merging) and not just fetching other branches as asked before</p>
","3","3628421","",""
"16353135","1064025","2013-05-03 06:43:14","1","334","<git><git-cherry-pick>","Restrict permissions to cherry-pick","<p>After a particular release, any bugfixes will go into 'master' branch and after it is thoroughly reviewed and tested, it will be cherry-picked to the release branch. However I want only the release manager(..one who manages the release) to have access to cherry-pick those changes to release branch. Is there a way to achieve this?</p>
","2","1064025","",""
"31979572","1043012","2015-08-13 04:34:17","1","1029","<git><deployment><branch><cherry-pick>","Git cherry-picking commits from one location to another on same branch","<p>I am confronted with a challenging situation.  The project I am working on has two git branches (master and develop).  I have been working on a number of issues on the develop branch.  All commits have been made directly on the develop branch (separate branches are not used for different issues).  Commits for a particular issue can be identified by the commit message, as each commit message starts with the issue id (e.g. all commit messages for issue #231 will begin with ""#231"").</p>

<p>After testing locally, the changes for these various issues have be deployed to the owner's <em>User Acceptance Testing</em> (UAT) server.  Since the project has no staging/testing branch, the develop branch has been merged into master and pulled into the master branch on UAT.  As a result the master branch on UAT contains all the latest changes from develop branch.  Further more this puts the master branch on UAT ahead of the Master branch on the production (PROD) server.</p>

<p>The site owner has now said that he would like to deploy all the changes for one of the issues (e.g. #231) onto PROD separately before deloying the rest. </p>

<p>The question I have is how best to achieve this?</p>

<p>The method I thought of was to create a new branch on PROD based on the current master branch on PROD (e.g. <code>git branch master_231</code>).  I could then pull this down to my local environment and cherry-pick the #231 commits into it.  Once this is done I could pull the changes to master_231 back into PROD.  Hopefully that would address the issue of deploying issue #231 changes to PROD.</p>

<p>In terms of bringing in the other changes on UAT server, I could log into PROD and checkout master branch (remembering we are currently on master_231).  I can then pull the latest master changes into PROD.  That would mean the master branches on UAT and PROD now match.  </p>

<p>Given that master branch already contains the same commits as those in master_231 branch (remember that all issue #231 commits were originally on master), do I still need to merge master_231 into master on PROD? And if I did, would I get merge conflicts?</p>

<p>I reaslize there are several questions in there but I would love to get some feedback on this overall approach. </p>
","4","1043012","",""
"60860947","10977462","2020-03-26 04:17:22","1","99","<git><merge><cherry-pick>","How to merge a single commit from one branch to another without changing the commit ID (SHA)","<p>I acknowledge that there are similar questions that have been asked and answered here. Since none of them give me definite answers, I thought asking this question here again. Hope you don't reject this question. With that said:</p>
<h2>Scenario</h2>
<p>We have a Bitbucket dev branch that stores content related to a specific release (Let's call the branch <strong>dev-release-1</strong>). Since the next release work starts before the current release is GR, we created another branch for the next release (let's call this branch <strong>dev-release-2</strong>). It means some people continue to work on the <strong>dev-release-1</strong> while working on the new branch. The new branch should have the changes being made in the current release branch as well. The changes in the <strong>dev-release-1</strong> branch are minimal and we want to avoid a full merge of <strong>dev-release-1</strong> to <strong>dev-release-2</strong>.</p>
<h2>Questions</h2>
<ol>
<li>Is cherry-pick a good option for this scenario? I tried this in our sandbox. Kind of works. Not sure if it will cause a lot of conflicts when we merge all branches into the master. Since cherry-pick results in an entirely new commit ID, I am not sure about it.</li>
<li>Is apply patch a good option? Tried this as well. Comparatively easier to do it with sourcetree. Since it results in an entirely new commit ID, I am not sure about it.</li>
<li>Is there an option to merge a single commit from one branch to another without changing the commit ID?</li>
</ol>
","0","10977462","0","0"
"23066116","702281","2014-04-14 17:10:08","0","53","<git><merge><cherry-pick>","Git is conflicting during merge, but the file looks the same. Why?","<p>I'm getting a merge conflict on a file that looks to be exactly the same in both branches.</p>

<ol>
<li>First the change was made to dev.</li>
<li>Second hand copied to mybranch.</li>
<li>Merge mybranch into dev</li>
</ol>

<p>I need to merge mybranch into dev, and this is what I get: (showing an internal requirejs like pkg system file)</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
/* requires /js/my.js */ 
=======
/* requires /js/my.js */
&gt;&gt;&gt;&gt;&gt;&gt;&gt; mybranch
/* requires /js/awesome.js */
</code></pre>

<p>git diff: Still confused :D</p>

<pre><code>index 84a44e6..11fa0ea 100644
--- a/src/main/js/pkgFile.js
+++ b/src/main/js/pkgFile.js
@@ -1,2 +1,2 @@
-/* requires /js/my.js */
-/* requires /js/awesome.js */
\ No newline at end of file
+/* requires /js/my.js */
+/* requires /js/awesome.js */
\ No newline at end of file
</code></pre>

<p>Why would I be getting any conflict at all when it looks like the exact same code?
Isn't git smart enough to figure things out?</p>
","1","702281","",""
"32009815","1432980","2015-08-14 12:12:20","3","3035","<git><cherry-pick>","git cherry pick from remote master branch without other remote changes","<p>Let's say I am working on my <code>master</code> in my own repository. My upstream for example is <code>main-upstream</code>. </p>

<p>But I need one specific commit from another remote - <code>special-upstream</code>. I don't want another changes from it - I do not need all commits from that remote and I don't want any changes from it - it's a different project - except one certain commit with certain hash from branch <code>master</code>. </p>

<p>Is it possible to <code>cherry-pick</code> it?</p>
","0","1432980","",""
"16443501","1443702","2013-05-08 14:36:47","28","61188","<git><cherry-pick>","'Fatal: cherry-pick failed' with Git","<p>I was working on a branch <code>X</code>. I made a commit and pushed it. </p>

<p>Then I wanted to <code>cherry-pick</code> it to branch <code>Y</code>. But due to some unmerged files present, I got the following message:</p>

<pre><code>error: 'cherry-pick' is not possible because you have unmerged files.
hint: Fix them up in the work tree,
hint: and then use 'git add/rm &lt;file&gt;' as
hint: appropriate to mark resolution and make a commit,
hint: or use 'git commit -a'.
fatal: cherry-pick failed
</code></pre>

<p>Now, I just want to delete my branch <code>Y</code>, then re-create the branch <code>Y</code> and then want to manually edit the file where I was trying to cherry-pick.</p>

<p>Currently, I'm unable to delete the branch as it is my working branch.
I cannot <code>checkout</code> any other branch. I'm getting the following error on trying to change the branch. </p>

<pre><code>mod/assign/locallib.php: needs merge
error: you need to resolve your current index first
</code></pre>

<p>I just need to delete the branch <code>Y</code>, without losing anything on branch <code>X</code>.</p>

<p><strong>EDIT #1</strong></p>

<p>I edited the file <code>mod/assign/locallib.php</code></p>

<p>On doing <code>git status</code>, I get:</p>

<pre><code># On branch MDL-38267_24
# Unmerged paths:
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both modified:      mod/assign/locallib.php
#
</code></pre>

<p>What file should I add in <code>git add ..</code> ?</p>
","0","1443702","0","0"
"16470165","1197775","2013-05-09 20:03:51","1","2414","<git><git-merge><git-rebase><git-cherry-pick>","Git - Merge a part of branch commits","<p>How could I merge several, selected commits from branch B into A. I did this but I am not sure if there is a one line solution for this:</p>

<pre><code>git log -p -1 B~~ | git apply
git log -p -1 B~ | git apply
git commit -m 'Merge penultimate and before penultimate B commits into A'
</code></pre>
","0","1197775","",""
"16512710","1082835","2013-05-12 22:32:34","2","564","<android><git><repository><cherry-pick>","Cherry picks from gerrit overwritten by repo sync","<p>Basically the title is my problem. I'm building Cyanogenmod while picking a few different things from their gerrit. I would like to save them permanently with my local source. I thought that <code>git add .</code> or <code>git add -A</code> would do the trick, but all my picks seem to be overwritten anytime I sync up.</p>

<p>I've failed at googling the answer as I'm just coming up with the same things telling me what I'm doing is correct.</p>

<p>Any help here?</p>
","1","1082835","",""
"32432350","5307710","2015-09-07 06:28:54","3","64","<git><merge><branch><cherry-pick>","Git - 2 separate develop branches - cherrypicking or not?","<p>I have 2 separate develop branches in Git, <em>develop1</em> and <em>develop2</em>.
These 2 branches have a common ancestor, commit <em>C1</em> on master. These 2 branches contain 2 product releasecycles will will be joined in about 6 months (both merged into master).</p>

<p>Before the big merge in 6 months, branches <em>develop1</em> and <em>develop2</em> will be kept separate, no merging between develop1 &lt;-> develop2 will be done.</p>

<p>However, some changes (like project structure, script changes) will be done on both branches.</p>

<p>My idea is to perform these changes on <em>develop1</em>, then cherry-pick them to <em>develop2</em>.</p>

<p>My questions:</p>

<ol>
<li>Is this wise to do?</li>
<li>Will this result in problems later when performing the big merge?</li>
</ol>

<p>The reason I'm asking this is because I've read that cherry-picking may result in problems because new commits are created.</p>

<p>One reference listing the possible problem:
<a href=""http://blog.founddrama.net/2013/07/git-cherry-pick/"" rel=""nofollow"">http://blog.founddrama.net/2013/07/git-cherry-pick/</a></p>
","1","5307710","0","0"
"16638195","1392584","2013-05-19 18:45:35","0","68","<git><cherry-pick>","Git Maintain two branches history and be able to git push","<p>I have two branches that look like this</p>

<pre><code>o--o--A--B-C--D env1 (master), cherry-picking from env2
       \
        X--C--D env2 
</code></pre>

<p>Only different between these two branches is environment settings. I want to maintain these two branches because it's quite easy for me to just git checkout to switch between environments.</p>

<p>Now the problem is, git push allows env2, but rejects env1(master). So how do other people get latest commits(mostly cherry-picked from env2) from env1?
P.S. I don't want to loose any history on either branches</p>
","0","1392584","",""
"16690187","1163698","2013-05-22 11:08:02","5","3499","<git><branch><rebase><cherry-pick>","How-to git backport (rebase/cherry-pick) an already merged branch","<p>In our Git process, ""master"" is the integration branch for topic and fix branches for the current release cycle, but we also maintain a ""stable"" branch where we have to backport carefully some of our fixes already successfully tested on master.</p>

<p><strong>All the difficulty is that the branch has already been merged back in ""master""</strong> (else it is really easy with rebase --onto)</p>

<ul>
<li>We don't want to change the process the other way because a) we don't want to fix everything in the ""stable"" branch, and b) we sometimes have to make some changes to the ""stable"" branch that we don't want to merge in ""master"".</li>
<li>Clearly, we cannot merge the fix into the ""stable"" branch because this will backports many unwanted features.</li>
</ul>

<p>Graph of the initial situation I describe :</p>

<pre><code>          I--J (stable)
         /
        /
       /
- A - B - C - D - E - F - G  (master) 
              \      /
               X -- Y (fix/123)
</code></pre>

<p>Graph of the kind of situation we want to reach :</p>

<pre><code>          I--J (stable)
         /    \
        /      X'- Y' (fix/123-stable)
       /
- A - B - C - D - E - F - G  (master) 
              \      /
               X -- Y (fix/123)
</code></pre>

<p>More complex cases are possible, such as multiple merge to complete a fix :</p>

<pre><code>- A - B - C - D - E - F - G - H (master) 
               \     /       /
                X - Y ----- Z (fix/123)
</code></pre>

<p>But we don't allow merge into a fix branch, so we shall never have something like this :</p>

<pre><code>- A - B - C - D - E - F - G (master) 
               \   \     /
                X - Y - Z (fix/123)
</code></pre>

<p>To achieve this, we can cherry-pick or rebase the fix branch :</p>

<p>1) cherry-pick (typicaly <a href=""https://stackoverflow.com/questions/1440181/how-do-i-backport-a-commit-in-git"">How do I backport a commit in git?</a>) :</p>

<pre><code>git checkout -b fix/123-stable stable
git cherry-pick X Y
</code></pre>

<p>This seems easy, but it is not when dealing with real life examples ; there is always a risk to forget some commits, or to pick wrong ones!</p>

<p>2) rebase --onto (<a href=""https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html"" rel=""nofollow noreferrer"">https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html</a>) :</p>

<p>2.a) the ""not working"" way :</p>

<pre><code>git rebase --onto stable master fix/123
</code></pre>

<p>This does nothing since fix/123 has already been merged to master!
 2.b) the ""not far better than cherry-pick"" way :</p>

<pre><code>git rebase --onto stable D fix/123
</code></pre>

<p>This is still kind of risky because you need to take the SHA of D (and NOT X for instance).</p>

<p>2.c) the ""use a temporary starting ref"" way :</p>

<pre><code>git tag begin D
git rebase --onto stable begin fix/123
git tag -d begin
</code></pre>

<p>This improve the previous situation, as the tag make it easier to do it or picture it in a graphical tool, but it is still lot of manual work.</p>

<p>3.d) the ""reset hard master before the merge"" (to the first branching point)
Hum, seems hard to describe and to do.</p>

<p>So, what I am looking for is a git <strong>portable</strong> (no bash/grep/cut/sed implied) way to either;</p>

<p>1) list all commits made on a branch already merged back into ""master"" (here X and Y, and also Z in the ""multi-merged"" case) to cherry-pick them easily </p>

<p>2) get the commit of the first branch point of a branch already merged back into ""master""</p>

<p>2.a) this cannot be done by the ""git merge-base"" command because the merge is already done (even multiple time)</p>

<p>2.b) I've found here <a href=""https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git/2373815#2373815"">Finding a branch point with Git?</a> the following bash command I tweaked a bit:</p>

<pre><code>git rev-list --boundary --date-order --reverse fix/123..master | grep -m 1 - | cut -c2-
</code></pre>

<p>but his is not a git easy nor portable command (ie not working without Bash or Cygwin tools)</p>
","0","1163698","0","0"
"32447323","1156245","2015-09-07 23:47:19","1","5868","<git><git-cherry-pick>","Applying a git patch - basic example","<p>A few questions on this, but none I can find with an unambiguous minimal example.  Let's say we want to apply a commit from a particular branch to multiple branches without the legacy commits that preceded the patch commit.  E.g.</p>

<pre><code>mkdir cherry_test
cd cherry_test
git init
printf ""one\ntwo\nfour\n"" &gt; file.txt
git add file.txt; git commit -m 'master: 1'
git branch dev
echo five &gt;&gt; file.txt
git add file.txt; git commit -m 'master: 2'
git checkout dev
echo FIVE &gt;&gt; file.txt
git add file.txt; git commit -m 'dev: 3'
echo SIX &gt;&gt; file.txt
git add file.txt; git commit -m 'dev: 4'
</code></pre>

<p>Now lets do a patch to fill the gap (insert the missing line for 'three'):</p>

<pre><code>perl -0777 -i -pe 's/two\nfour/two\nthree\nfour/igs' file.txt
git add file.txt; git commit -m 'dev patch'
</code></pre>

<p>At this point I'm unclear how to apply this patch to master without the additional uppercase number commits also patching.  Say..</p>

<pre><code>git log
commit d44425da786e161dd066b5db6db8b649b99ba575
author etc
    dev patch
</code></pre>

<p>Then <a href=""https://stackoverflow.com/a/6658352/1156245"">this answer</a> suggests we need to use <code>git format-patch -1 d44425da</code>.  But then how to merge this with <code>master</code> and other branches?  My efforts all seem to result in previous <code>dev</code> commits also merging across.</p>
","5","1156245","",""
"16760437","96213","2013-05-26 14:55:52","4","2838","<git><git-merge><git-cherry-pick>","Merging specific commits without cherry-pick?","<p>So, I've been using <code>git cherry-pick</code> for this but it's getting cumbersome and I wanted to know if there's a simpler way (or another approach).</p>

<p>Say I have 3 branches: <code>master</code> (stable, candidate for production), <code>develop</code> (working branch) and <code>production</code>.</p>

<p>Now, beside the stable milestones, <code>production</code> has some production-specific settings. Things I don't want to change every time I merge into it. I can't simply merge <code>develop</code> into <code>master</code> and then <code>master</code> into <code>production</code>, nor <code>develop</code> straight into <code>production</code>, because this would create a conflict with the production settings.</p>

<p>So far issuing <code>git cherry-pick commitA^..commitB</code> in <code>production</code> has worked, but I don't want to keep doing this every time.</p>

<p>Am I missing something obvious? Is there a simpler way to merge <em>just</em> the commits of a single branch?</p>
","0","96213","0","0"
"42030796","5347352","2017-02-03 18:31:05","1","443","<git><git-revert><cherry-pick>","Git reverts and cherry picks","<p>I'm puzzled by something, here's a summary.</p>

<p>Our repo has a master branch and a d2l_phase_4 branch. Since the d2l_phase_4 branch was created several new commits have been added to master.</p>

<p>Today someone incorrectly merged a pull request into master of a commit that should have been targeting the d2l_phase_4 branch.</p>

<p>Therefore I did this:</p>

<ol>
<li>Reverted the commit and pushed to fork/master</li>
<li>Made a pull request to the main repo/master.</li>
<li>Merged that pull request.</li>
</ol>

<p>At this point we've safely undone the effect of the commit on our master branch.</p>

<p>Then I did this:</p>

<ol>
<li>Checked out d2l_phase_4 branch</li>
<li>Cherry picked the original commit from master.</li>
<li>pushed to fork/d2l_phase_4</li>
<li>Made a pull request targeting the main repo/d2l_phase_4</li>
<li>Merged this pull request</li>
</ol>

<p>At this point the d2l_phase_4 branch has the desired changes from the original commit, so far so good.</p>

<p>Finally I wanted to bring the d2l_phase_4 branch up to date with all the other stuff on master since the d2l_phase_4 branch was created. So again on the d2l_phase_4 branch I merged in from master and that created a new merge commit.</p>

<p>I then push this updated d2l_phase_4 branch to my fork/d2l_phase_4 and finally created a pull request targeting the main repo/d2l_phase_4 and then merged that PR.</p>

<p>However - it dawned on me that Id now merged in the earlier revert from the master branch and so must have nullified the commit that I'd earlier cherry picked!</p>

<p>However when examining the state of files on the d2l_phase_4 there's no trace of the revert that was merged in from master - this is exactly what I want - but I do not understand.</p>

<p>Why was my cherry picked commit on d2l_phase_4 not nullified by the revert that was merged in from master? I'd expected that I'd need to revert my revert on the d2l_phase_4 branch but when I attempted this git seemed to tell me there was nothing to revert...</p>

<p>If I look at the histor one of the files involved, on the d2l_phase_4 branch then I see no trace of the revert or anything, all I can see if the cherry picked commit that I did.</p>
","0","5347352","",""
"42031856","555493","2017-02-03 19:41:38","0","1277","<git><git-merge><git-rebase><git-cherry-pick>","Merge features in Git in another branch?","<p>We use branches for features which we then merge into <code>master</code>. We also use branches for versions. However, I have a particular feature (merged into <code>master</code>) that needs to go into the version branch. Previously, I had been using <code>cherry-pick</code> for this (manually plucking commits one at a time), but this feature has too many commits to do one at a time. Is there a better way?</p>

<p>This feature has already been merged into <code>master</code>. The branch does not exist locally anymore. However, I do have the commit which resulted from merging it into <code>master</code>.</p>

<p>I am able to restore <code>feature-branch</code> (since we use GitHub). However, from the version branch, when I run <code>git merge feature-branch</code>, I get all sorts of conflicts unrelated to the feature. Same thing happens if I do <code>git rebase feature-branch</code> (from the <code>version-branch</code>).</p>
","2","555493","",""
"16820852","836205","2013-05-29 18:01:01","578","315997","<git><git-cherry-pick>","How to abort a cherry-pick?","<p>I ran <code>git cherry-pick &lt;hash&gt;</code> and had merge conflicts. I don't want to resolve the conflicts, I just want to abort the cherry-pick. When doing an actual merge (with <code>git merge</code>) there's the handy <code>git merge --abort</code>. What's the equivalent of cherry-picking?</p>
","0","836205","0","0"
"16861982","1454937","2013-05-31 16:36:21","37","21582","<git><cherry-pick>","How to cherry-pick from stash in git?","<p>I am wondering if cherry-picking from stash is possible.</p>

<pre><code>git stash save ""test cherry-pick from stash""

*git cherry-pick stash@{0}* --&gt; Is this possible?
</code></pre>

<p>I am getting the following <code>exception</code> when I tried above <code>command</code>:</p>

<p><code>Error</code>:</p>

<pre><code>~/Documents$ git cherry-pick stash@{0}
error: Commit 4590085c1a0d90de897633990f00a14b04405350 is a merge but no -m option was given.
fatal: cherry-pick failed
</code></pre>
","1","1454937","0","0"
"50631283","2208297","2018-05-31 19:13:37","1","194","<git><cherry-pick><git-cherry-pick><git-cherry>","git cherry master upstream vs upstream master","<p>I am a bit confused as to what the logical difference here is between <code>git cherry master upstream</code> and <code>git cherry upstream master</code>. I get that it former is probably the more correct one to apply, but I don't exactly get why the list is much longer the other way.</p>

<p>Say I have two branches <code>master</code> and <code>feature</code>. Now let's say that I have commits in <code>feature</code> but I also have some commits in <code>master</code> that I want in <code>feature</code> and vice versa, but can't (or won't) merge these two branches. The way to go about such peculiar management nightmare would be to cross-cherry-pick the commits I needed.</p>

<p>As a result, why do <code>git cherry feature master</code> and <code>git cherry master feature</code> produce different results and is there any way to get a complete and reliable list of the discrepancy between these branches?</p>
","1","2208297","0","0"
"5304391","286802","2011-03-14 20:53:33","246","273491","<git><cherry-pick><git-cherry-pick>","How to cherry pick from 1 branch to another","<p>I have 2 branches, <code>master</code> and <code>dev</code>.</p>

<p>I am on <code>dev</code> branch and I want to cherry-pick 1 commit from <code>master</code> to <code>dev</code>. So I did </p>

<pre><code>$ git cherry-pick be530cec7748e037c665bd5a585e6d9ce11bc8ad
Finished one cherry-pick.
</code></pre>

<p>But when I do <code>git status</code> and <code>gitx</code>, I don't see my commit <code>be530cec7748e037c665bd5a585e6d9ce11bc8ad</code> in git history.</p>

<p>How can I see my commit in the <code>dev</code> branch?</p>
","0","286802","0","0"
"17070293","899470","2013-06-12 16:07:32","52","31834","<git><rebase><cherry-pick><git-cherry-pick>","git apply changes from one commit onto another branch","<p>I want to do something similar to git rebase but without collapsing parallel commits.</p>

<p>Let's say I have the following commits:</p>

<pre><code>  B (bar)
 /
A-C-D (foo)
</code></pre>

<p>Now I want to take the changes that D introduced to C in branch foo, and apply them to B in branch bar. so that I end up with the following:</p>

<pre><code>  B-E (bar)
 /
A-C-D (foo)
</code></pre>

<p>Where the difference between commits B and E is equal to difference between commits C and D. Is this possible? Is there a way to do it without creating a patch?</p>
","1","899470","0","0"
"17944819","1823822","2013-07-30 10:41:24","2","120","<git><git-cherry-pick>","Merging commits together in a branch","<p>I am new to Git.</p>

<p>I have created a new branch <code>new_branch</code>. I have done all changes and commits in a different branch <code>old_branch</code>. Now I want to pick some commits from the branch <code>old_branch</code> to <code>new_branch</code> by <code>git cherry-pick</code>. For that I first need to know which commits are in that branch and then pick them and merge with <code>new_branch</code>. </p>

<p>How can I do this?</p>
","2","1823822","0","0"
"32574276","2605112","2015-09-14 21:31:13","3","253","<git><github><git-branch><git-commit><git-cherry-pick>","Is a new branch necessary before git cherry pick?","<p>I've been following this example <a href=""http://think-like-a-git.net/sections/rebase-from-the-ground-up/using-git-cherry-pick-to-simulate-git-rebase.html"" rel=""nofollow"">here</a>, and it shows that you create a temporary branch before you use <code>git cherry-pick</code>, and then you cherry pick onto that temporary branch.  </p>

<p>In the example, the temporary branch is called <code>newbar</code>, and it branches off from <code>foo</code>.  </p>

<p>Is it necessary to have the temporary branch?  Or can you just cherry pick from <code>foo</code>?  The example doesn't make it clear the purpose of this temporary branch.  </p>
","2","2605112","",""
"23749153","263004","2014-05-20 00:21:29","5","1278","<git><version-control><merge><rebase><cherry-pick>","Is it right to use git cherry-pick in these scenarios?","<p>I apologize if my notation or terminology is wrong. I have been using <code>git</code> for a while on my personal projects and haven't had to deal with complicated merging scenarios. We started using it at work and are running into more complex scenarios. I am still a <code>git</code> newbie so I'd like to figure out the best practices for cherry picking. </p>

<p><strong>Scenario One</strong></p>

<p><img src=""https://i.stack.imgur.com/RUo9B.png"" alt=""enter image description here""></p>

<p>Here, we have a <code>master</code>, <code>fix</code>, and <code>develop</code> branch. After we branched <code>fix</code>, we updated the version number to <code>1.0.1</code>. We did the same for <code>develop</code>, and changed the version number to <code>1.1.0</code>.</p>

<p>Let's say that fixes <code>F1</code>, <code>F2</code>, and <code>F3</code> were committed to <code>fix</code>. Out of these, we care about fixes <code>F2</code> and <code>F3</code>, but not about <code>F1</code> because it is a change to a deprecated feature. We also don't care about the change in version number to <code>1.0.1</code>. </p>

<p>Now we can merge these changes back into <code>master</code> from <code>fix</code> without a problem. But what if I want to merge those changes into <code>develop</code>? Right now I am using <code>git cherry-pick</code> to pick out <code>F1</code> and <code>F2</code>. Also, for a large number of commits, I am using a range of commits to cherry-pick and that seems to work fine. Is this the best way of doing things? </p>

<p>That brings me to the next scenario regarding <code>git cherry-pick</code>:</p>

<p><strong>Scenario 2</strong></p>

<p><img src=""https://i.stack.imgur.com/9HuNv.png"" alt=""enter image description here""></p>

<p>Again, I apologize if the terminology is incorrect, or if my graph does not make sense. This is as best as I could describe it. </p>

<p>So in this scenario, we have a <code>hotfix</code> branch in addition to the ones above. Let's say that someone committed hotfixes <code>H1</code> and <code>H2</code> into <code>hotfix</code>, and then merged those changes into <code>master</code>, <code>fix</code>, and <code>develop</code>. </p>

<p>At around the same time, someone else committed fixes <code>F1</code>, <code>F2</code>, and <code>F3</code> into the <code>fix</code> branch, but in a staggered manner (so <code>F1</code> was committed before <code>H1</code>, and <code>H2</code> was committed before <code>F3</code>. Now the person working on <code>fix</code> wants to sync up, so he runs a <code>git pull</code>, which brings those changes in order. Let us also assume that there were no conflicts.</p>

<p><em>Now</em>, let's say this person wants to merge all his fixes into <code>develop</code>. In this scenario, what will happen if he used <code>git cherry-pick</code> with a range of commits starting at the commit for <code>F1</code>, and ending at the commit for <code>F3</code>? Would those merges be ignored? As far as I know, you are unable to cherry-pick merges (because you need to specify the main line). So in this case, will <code>git cherry-pick</code> simply ignore those merges?</p>

<p>Also, to not have to deal with this scenario, is it better to <em>always</em> <code>rebase</code> instead of doing a <code>git pull</code>, so that your changes are applied after? That way you could specify the range of commits and it wouldn't include the merges.</p>

<p>Thank you, and I apologize if my question is stupid or if it does not make any sense.</p>
","3","263004","0","0"
"5660474","707553","2011-04-14 08:27:57","8","3861","<git><cherry-pick>","How to git cherry-pick from sibling directories?","<p>I would like to use git cherry-pick to apply a commit from one file to another without rename detection (to many similar files lead to wrong detections).</p>

<blockquote>
  <p>(master) directory1/file</p>
  
  <p>(master) directory2/file</p>
</blockquote>

<p>But I don't know how to tell cherry-pick the corresponding directory.</p>

<p>I had another case where it worked fine with <code>git-1.7.5.rc1</code> which now supports merge strategies aka <code>-Xsubtree=.</code></p>

<blockquote>
  <p>(master) directory1/file</p>
  
  <p>(branch) file</p>
</blockquote>

<p>I called</p>

<pre><code>git cherry-pick --no-commit -Xsubtree=directory1 branch~95
</code></pre>

<p>and it worked fine, taking the changes from (branch~95) file to (master) directory1/file without rename detection.</p>

<p>For the first case I tried calling <code>git cherry-pick</code> with -<code>Xsubtree=../directory1</code> but that did not work. I guess I would have to tell git cherry-pick somehow to leave the directory2 and then go to directory1 to apply the patches.</p>

<p>Does anyone have a solution for this problem ?</p>
","0","707553","0","0"
"35123108","246724","2016-02-01 04:41:43","120","58479","<git><git-cherry-pick><git-squash>","Cherry-pick and squash a range of commits into a subdirectory or subtree","<p>How can I tell cherry-pick to pick range of commits and squash it?</p>
<p>Or in other words, apply the diff between two commits to the current state of the repository?</p>
<p>The following does <em>not</em> work (cherry-pick has no --squash option):</p>
<pre><code>git cherry-pick --squash e064480..eab48b59c
</code></pre>
<p>Note: My use case is within a subtree scenario - before anyone starts arguing that I should not squash.</p>
<p>The following works, but then I have a range of separate commits. I can squash them manually with interactive rebase afterwards.</p>
<pre><code>git cherry-pick -X subtree=vendor/package e064480..eab48b59c
</code></pre>
<p>Is there any way to do the squashing as part of the cherry-pick?</p>
","0","246724","0","0"
"35123452","246724","2016-02-01 05:20:14","8","11038","<git><git-cherry-pick>","git cherry-pick a diff between commits without common history?","<p>Scenario: A repository with totally disconnected pieces of history. E.g. from different remotes that have no common git history. (This typically occurs in scenarios with git subtree.)</p>

<p>Is it possible to cherry-pick the diff between these two commits, even if they have no common history? (And the active commit has no common history with either of these two)</p>

<p>I tried this (into a subdirectory with <code>-X subtree=sub/dir</code> option):</p>

<pre><code>git cherry-pick -X subtree=vendor/package aaa/aaa..bbb/bbb
</code></pre>

<p>Without subtree, this would have been simpler:</p>

<pre><code>git cherry-pick aaa/aaa..bbb/bbb
</code></pre>

<p>Where aaa/aaa and bbb/bbb are two commits with disconnected history.</p>

<p>Unfortunately, this does not work: The aaa/aaa..bbb/bbb is not read as a diff, but something else.</p>

<p>The same can be shown with <code>git show aaa/aaa..bbb/bbb</code>, which is quite different from <code>git diff aaa/aaa bbb/bbb</code>. E.g. if both have identical files, then git diff will be empty, but git show a..b will show only b, but not a.</p>

<hr>

<p>Note: My personal use case is with a subtree background. I mention this to avoid an artificial use case, where people typically start debating the validity of the use case instead of the actual question.</p>

<p>An ideal answer will first address the general case, and then address the subtree case.</p>
","0","246724","0","0"
"65248501","6766879","2020-12-11 09:10:06","1","456","<gitlab><cherry-pick>","How to configure cherry-pick branch name?","<p>When we are creating cherry-pick by <a href=""https://docs.gitlab.com/ee/user/project/merge_requests/cherry_pick_changes.html"" rel=""nofollow noreferrer"">built-in function of GitLab</a> on merged MR, it gets name like <code>cherry-pick-c2deb506</code>.<br />
How to configure that name?  I can't find this setting.</p>
","0","6766879","",""
"46588120","8088360","2017-10-05 14:26:14","3","582","<git><merge-conflict-resolution><git-cherry-pick>","git cherry-pick conflict includes unwanted code","<p>My scenario: I have branch B which was created off of branch A. I make a few commits in branch B that I want to cherry-pick into branch C (which is similar to A). I don't want to do a merge of B into C because I don't want certain things from A to get in there.</p>

<p>My problem: When I do the cherry-pick of B's commits I have some spots where there is conflicts in branch C. This isn't an issue to resolve them, except that in branch B's block of changes in the conflict, some stuff from A is there. </p>

<p>So why am I seeing anything from A show up in C when it wasn't directly added in B and I'm cherry picking the commits? I'm guessing this is related to the conflict because nothing else from A is coming over, just the stuff around the conflict line.</p>

<p>In my screenshot below everything in the red bracket was originally in A but doesn't exist in C. The only line I actually want is the last one. This also happened in another file as well.</p>

<p><a href=""https://i.stack.imgur.com/tkANI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tkANI.png"" alt=""enter image description here""></a></p>
","0","8088360","0","0"
"10803926","370421","2012-05-29 17:31:36","2","535","<branch><git-svn><cherry-pick><dcommit>","`git svn dcommit` failing on a branch","<p>I have been using <code>git-svn</code> to communicate with my company’s svn repo for a while now without any major headaches.</p>

<p>Today, the “headache”-part changed dramatically:<br>
I’ve been working on <code>master/trunk</code> pretty exclusively, and needed to merge most (but not all!) of those change-sets into a new svn-branch, that originated from a pre-existing svn-branch.</p>

<p>Basically this:</p>

<pre><code>🍒---💩---💩---💩--1🍒--1🍒---💩--1🍒---💩---💩--1🍒--1🍒--1🍒---💩  master/trunk
 \
  \
   2🍒--2🍒--2🍒--2🍒--2🍒                                        versioned-release
</code></pre>

<p>Should have become this:</p>

<pre><code>🍒---💩---💩---💩--1🍒--1🍒---💩--1🍒---💩---💩--1🍒--1🍒--1🍒---💩  master/trunk
 \
  \
   2🍒--2🍒--2🍒--2🍒--2🍒                                        versioned-release
                         \
                          \
                           1🍒--1🍒--1🍒--1🍒--1🍒--1🍒           new-versioned-release
</code></pre>

<p>Where <code>💩</code> are commits that shouldn’t be in the <code>new-versioned-release</code>, and <code>x🍒</code> the wanted commits from the respective branches <code>x</code>.</p>

<p>So I did the following:</p>

<ol>
<li><code>git checkout -b versioned-release-svn remotes/versioned-release</code></li>
<li><code>git svn branch new-versioned-release -m ""Preparing for merge of XXX""</code></li>
<li><code>git checkout -b new-versioned-release-svn remotes/new-versioned-release</code></li>
<li><code>git cherry-pick ...</code> for every <code>1🍒</code>, resolving any conflicts on the way.</li>
</ol>

<p>Because I wanted to be sure I was really going to target the correct branch on the repo, I then ran <code>git svn dcommit --dry-run</code> which did not yield any errors or warnings, but told me…</p>

<pre><code>Committing to svn://username@$repo-host/$repo-name/$path/branches/new-versioned-release ...
</code></pre>

<p>…followed by a couple of <code>diff-tree</code> lines.</p>

<p>So I attempted to omit the <code>--dry-run</code> and half way through the commits ended up with…</p>

<pre><code>Item already exists in filesystem: File already exists: filesystem '/data/subvroot/$repo-name/db', transaction '20856-g3m', path '/$path/branches/new-versioned-release/some-directory' at /usr/libexec/git-core/git-svn line 862
</code></pre>

<p>…and a <strong>bunch</strong> of unstaged changes.</p>

<p>Apart from the obvious — “WTF?!?” and “How do I get out of this mess without losing everything I did?” — I have two questions:</p>

<ol>
<li>Assuming I was back to before <code>git svn dcommit</code>: How do I get my local branch dcommit to its planned destination?</li>
<li>By now it seems obvious, that this wasn’t the right way to achieve what I wanted…but <em>how</em> should I have done it, instead?</li>
</ol>

<p>Everything I found for the error-message, that somehow resembled my situation, so far was <a href=""https://stackoverflow.com/questions/2922059/how-to-recover-from-an-unwanted-rename-using-git-svn-transaction-is-out-of-dat"">this other stack overflow question</a> and the proposed solution of “somehow […] to blow away the <code>.git/svn</code> metadata directory” doesn’t resonate quite <em>that</em> well with me…</p>
","0","370421","",""
"46958121","1209216","2017-10-26 15:21:17","1","488","<git><merge><git-cherry-pick>","Merge single commit to master from other branch","<p>Let's say I have 2 git branches: develop and master. Master branch contains sources for stable version of my my app and develop is for unstable and not fully tested code.</p>

<p>After merging master to develop, there were some commits, then one single commit that changes project settings to make possible to build my app with recent Android Studio 3.0 (not backward compatible). After this, some more commits that I don't want to merge to master yet.</p>

<p>Now I don't have Android Studio 2 installed, so I am unable to compile stable version of my app anymore.
My idea is to merge (cherrypick) single commit from develop branch to master, so I will able to compile it with Android Studio 3.0. I don't want to merge any commit pushed before or after the one that I'm interested in (Android studio version bump). I also don't want any conflicts later, ehen merging develop into master.</p>

<p>I'm not sure if git cherry pick is right thing in this case, can you provide some tips for me?</p>
","1","1209216","",""
"65665588","14982805","2021-01-11 10:57:01","0","788","<python><git><repository><cherry-pick>","Python Script for Local Repository and Cherry-Pick for specific commit GIT","<p>I want to create a python script for making local repository and I have no idea how to do this, after local repository I want to do cherry-pick for specific commit. Any tips for me ?</p>
","0","14982805","",""
"65993151","1084356","2021-02-01 12:58:43","0","107","<git><git-merge><git-cherry-pick>","Git copy from branch to master and save all commits","<p><a href=""https://i.stack.imgur.com/chGoj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/chGoj.png"" alt=""enter image description here"" /></a></p>
<p>I want to copy <code>x-y-z</code> to master, so in result it would be <code>a-b-c-d-x-y-z</code></p>
<p>I've found two solutions:</p>
<ol>
<li><code>Git merge</code>, but my <code>x-y-z</code> become 1 merged commit, which isn't what I want.</li>
<li><code>Git cherry-pick</code>, but I need to do it for every commit in secondary branch. Cherry-pick x, then cherry-pick y and then z. Which is too complicated.</li>
</ol>
<p>So, is it way to do some &quot;copy&quot; method to achieve result as on scheme before?</p>
","2","1084356","",""
"47321902","587540","2017-11-16 04:56:37","3","789","<git><bash><cherry-pick><git-cherry-pick>","How to check for empty cherry-picks in a bash script?","<p>I have a bash script which runs following cherry-pick command:</p>

<pre><code>if git cherry-pick -x ""$commitId""; then
        ammed_commit ""$BRANCH"" 
  else
      #here I want to check if this resulted in empty commit
fi
</code></pre>

<p>I tried running the command again and getting output in a string and then compare the string, but the output is not what I see in console. I am testing with the following script:</p>

<pre><code>#!/bin/bash

READ_STATUS=$(git cherry-pick -x 001e6beda)
SUB_STRING=""The previous cherry-pick is now empty""

echo $READ_STATUS

stringContain() { [ -z ""${2##*$1*}"" ]; }

if stringContain ""$READ_STATUS"" 'The previous cherry-pick is now empty';then 
  echo yes
else 
  echo no
fi

exit
</code></pre>

<p>Below is the output I receive when I run this script:</p>

<pre><code>The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

git commit --allow-empty

Otherwise, please use 'git reset'
//READ_STATUS gets this value and not the one above this line???
On branch test-stage Your branch is ahead of 'upstream/test-stage' by 1 commit. (use ""git push"" to publish your local commits) You are currently cherry-picking commit 001e6beda. nothing to commit, working tree clean
no
</code></pre>

<p>So I have got two questions:</p>

<ol>
<li>Why my string is not getting the complete output?</li>
<li>How can I resolve this and successfully check if cherry-pick results in an empty commit?</li>
</ol>
","0","587540","",""
"47325770","3373967","2017-11-16 09:21:06","0","236","<git><merge><rebase><cherry-pick>","find the ""rebase -m"" starting point","<p>Recently I am using</p>

<pre><code>git checkout dev_branch -b merge_branch
git rebase -m merge_branch master
git checkout master
git rebase merge_branch
</code></pre>

<p>to do a merge rebase. As the help document indicates, merge_branch is first reset to HEAD of master and then the new commits in original dev_branch is played back one by one to the new branch.</p>

<p>Several days later I want to find where is the ""starting point"" of this rebase merge. I can find the first delta commit in dev_branch using</p>

<pre><code>git merge-base master dev_branch // Get an SHA_root of the common ancestor
git log --reverse -1 &lt;SHA_root&gt;..dev_branch  // Get an SHA_delta of the first delta commit
</code></pre>

<p>But I don't find a way to locate where is the merged version of 

<pre><code>git branch --contains &lt;SHA_delta&gt;
</code></pre>

<p>But find it is only in ""dev_branch"", not in ""master_branch"", though actually it has been merged.</p>

<p>In another word, the same commit with different parent (like the situation using cherry-pick) are with different SHA. Is there a way that git can recognize them as actually identical?</p>
","0","3373967","",""
"11428400","288703","2012-07-11 08:19:42","6","1629","<git><git-rebase><cherry-pick>","Does picking a range of commits with cherry-pick or rebase --onto end up with the same result?","<p>I sometimes want to pick a range of commits from a different repository. I know two ways to do that.</p>

<p>1.</p>

<pre><code>git checkout myBranch
git cherry-pick begin..end
</code></pre>

<p>or</p>

<ol start=""2"">
<li><code>git rebase --onto myBranch begin end</code></li>
</ol>

<p>I find the first version easier to remember. However, I read a lot about how cherry-picking is evil compared to merging because it kinda breaks the history. But what I haven't figured out yet is if there is a difference between cherry-picking a range of commits or rebasing them with <code>--onto</code></p>

<p>I tend to think that there shouldn't be a difference. Am I mistaken?</p>
","0","288703","0","0"
"12101245","933882","2012-08-23 23:10:45","1","374","<git><merge><cherry-pick><mergetool>","How can I get p4merge to recognize conflicts induced by `git cherry-pick`, just the way it does with `git merge`?","<p>I followed this <a href=""https://stackoverflow.com/questions/1526044/partly-cherry-picking-a-commit-with-git"">partly cherry-picking a commit with git</a>
to cherry-pick changes on only certain files.</p>

<p>after the cherry-pick, some files had conflicts, i.e. the files have sections like :</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
</code></pre>

<p>normally with git merge, I use my beloved p4merge to resolve the conflicts, which is very intuitive and error-free.</p>

<p>but with cherry-pick, when i use git mergetool, it says nothing needs to be merged, though the file has <code>&lt;&lt;&lt;&lt;&lt;&lt;</code> in it.
so I had to manually edit and resolve the conflicts.</p>

<p>so how could I let git know that the conflict exists?</p>

<p>thanks
Yang</p>
","1","933882","",""
"61055041","2982109","2020-04-06 07:40:37","3","6527","<git><git-cherry-pick>","git cherry-pick built in option to keep original committer & author","<p>Is there a built in option in git cherry-pick to keep the original Author &amp; Committer?
without using a script , especially needed when cherry-picking multiple commits.</p>

<p>i have found this <a href=""https://gist.github.com/dusenberrymw/c2cd64acb35e467100d86b385c71ff60"" rel=""nofollow noreferrer"">script</a> or <a href=""https://github.com/dingram/git-scripts/blob/master/scripts/git-cherry-pick-with-committer"" rel=""nofollow noreferrer"">this</a>
But both are over 2 years old </p>

<p>looking at the official <a href=""https://git-scm.com/docs/git-cherry-pick"" rel=""nofollow noreferrer"">documentation</a>  i did not see any option 
am i missing somthing?</p>
","5","2982109","",""
"41841543","141719","2017-01-25 00:42:11","1","1184","<git><version-control><cherry-pick>","""git cherry-pick"" adds ""Conflicts:"" line to commit message","<p>Whenever I use <code>git cherry-pick</code> and there are conflicts, after resolving the conflicts and running <code>git cherry-pick --continue</code>, the commit message has an added <code>Conflicts:</code> section, like so:</p>

<pre><code>&lt;The original commit message&gt;

Conflicts:
    &lt;path of first file that had a conflict&gt;
    ...
    &lt;path of last file that had a conflict&gt;

# The usual comment with instructions
</code></pre>

<p>The <code>Conflicts:</code> section is not commented out, so if left unchanged, it becomes a part of the actual commit message of the cherry-picked commit.</p>

<p>So, two questions about this:</p>

<ol>
<li><p><strong>Why is this section useful at all?</strong> If I resolved the conflicts, why is the fact that they existed relevant?</p></li>
<li><p><strong>Is there a way to disable this behaviour?</strong> I find it annoying to have to delete that section manually every time.</p></li>
</ol>

<p><strong>EDIT</strong>: Since a comment suggests that the behaviour may be dependent on the version of git: I'm using git 2.1.4, which is the version present in Debian stable's repositories.</p>
","1","141719","0","0"
"4987684","413606","2011-02-13 23:41:39","0","80","<git><repository><github><clone><cherry-pick>","GitHub: Bring a file into a separate repo","<p>I need a specific file from an online repo brought into the local clone of my current project. I'd also like the file in a specific directory in the current project. I don't want to go the easiest route (copy the file from the clone); I'd rather have the file be updatable from the online repo and have that file pushed to my current project's online repo.</p>

<p>Thanks,
DZ</p>
","0","413606","",""
"42025755","6459498","2017-02-03 13:46:48","6","6686","<git><merge><atlassian-sourcetree><cherry-pick>","Cherry Picking multiple commits","<p>We have recently migrated from SVN to GIT,our code is hosted on Atlassian Bitbucket and using Atlassian SourceTree as our desktop client.
Now we have a couple of projects with branches for our code base,ie. Integration branch for UAT and Release branch for Stage. The problem is that while migrating the code from UAT to Stage through SourceTree, we are using cherry pick for a huge number of commits and that is driving us insane.
Do we have an alternative for this tedious process in the source tree or do we have to write a script.
Thanks</p>
","3","6459498","",""
"23681754","2723202","2014-05-15 14:50:44","16","9699","<git><github><git-revert><git-cherry-pick>","How to cherry pick commits after they've been reverted?","<p>I was working on my <code>feature branch</code> and after review, merged it into <code>development</code> to be deployed. Later, a coworker decided to do a release and merged his and mine into <code>master</code>. While deploying he realized his code was buggy and reverted <code>master</code>.</p>

<p>In our fork-and-pull flow, that means that now <code>development</code> and <code>master</code> are both reverted. </p>

<p>When I came in this morning, I rebased from development per usual, to learn afterward there had been a revert. </p>

<p>Now I'm trying to <code>cherry-pick</code> my work from the original <code>feature branch</code> only to realize it gives me ""empty commit messages"" because of the revert. </p>

<ol>
<li>is this because revert is a mirror image of my previous commits? </li>
<li>is there a way to revert the revert? (makes my head hurt) </li>
<li>is there anyway to get my commits to show up in the diff now that my I have rebased </li>
</ol>

<p>Any help is greatly appreciated. </p>
","1","2723202","0","0"
"42530381","1015678","2017-03-01 11:22:20","15","13469","<git><cherry-pick><git-cherry-pick>","Issue with cherry pick: changes from previous commits are also applied","<p>In my project, I released a version several months ago. After that release, I have done many changes on the master branch.</p>

<p>If I encounter some bugs which were there in the last release, I fix them on the master branch, then cherry pick them to the branch I have created at the last release. Then I can provide a new release with only the bug fix, without releasing the unfinished work on master branch.</p>

<p>When I tried to cherry pick a certain bug fix to the release branch, I encountered a merge conflict.</p>

<p>As I understand, cherry picking a certain commit introduces a new commit to the target branch, with the changes done in the cherry picked commit.</p>

<p>But, when I tried to fix the merge conflict, it seems that git has applied changes on master branch which are not introduced by the cherry picked commit to my release branch. The cherry picked commit only introduced couple of lines to the conflicted file. But, when I try to resolve the conflicts, I see that several other lines are also introduced to the file, which were added to master branch with different commits.</p>

<p>Can someone explain why changes from commits other than cherry picked commit are introduced to my release branch?</p>
","2","1015678","0","0"
"42531657","819718","2017-03-01 12:24:26","4","441","<git><github><cherry-pick>","Find the direct ancestors (parents?) of a git commit","<h2>Start a new repo and add some commits:</h2>

<pre><code>#( 03/01/17@10:50am )( tim@tim ):~
   mkdir test &amp;&amp; cd test &amp;&amp; git init

Initialised empty Git repository in /home/tim/test/.git/
</code></pre>

<p>.</p>

<pre><code>#( 03/01/17@11:17am )( tim@tim ):~/test@master✔
   touch readme &amp;&amp; git add --all &amp;&amp; git commit -am ""readme""   

[master (root-commit) 1b7f299] readme
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 readme
</code></pre>

<p>.</p>

<pre><code>#( 03/01/17@11:17am )( tim@tim ):~/test@master✔
   touch howto &amp;&amp; git add --all &amp;&amp; git commit -am ""howto"" 

[master fd46c4c] howto
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 howto
</code></pre>

<p>.</p>

<pre><code>#( 03/01/17@11:19am )( tim@tim ):~/test@master✔
   touch la &amp;&amp; git add --all &amp;&amp; git commit -am ""add la""

[master 4680089] add la
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 la
</code></pre>

<p>.</p>

<pre><code>#( 03/01/17@11:20am )( tim@tim ):~/test@master✔
   ls
howto  la  readme

#( 03/01/17@11:20am )( tim@tim ):~/test@master✔
   echo ""hello"" &gt;&gt; readme &amp;&amp; echo ""hello"" &gt;&gt; howto

#( 03/01/17@11:20am )( tim@tim ):~/test@master✗✗✗
   git commit -am ""edit readme and howto""
[master 8969440] edit readme and howto
 2 files changed, 2 insertions(+)
</code></pre>

<h2>So now we have the following commits :</h2>

<pre><code>commit 8969440d52e578113f609d948e6ffd06cec96fa9
Author: Tim Richardson &lt;tim@x.com&gt;
Date:   Wed Mar 1 11:20:54 2017 +0000

    edit readme and howto

commit 4680089c7c1a0ead84f6b2973fd6d9e1356fd5c0
Author: Tim Richardson &lt;tim@x.com&gt;
Date:   Wed Mar 1 11:20:06 2017 +0000

    add la

commit fd46c4cf593752ec8163d8db21042c8dd336f529
Author: Tim Richardson &lt;tim@x.com&gt;
Date:   Wed Mar 1 11:18:09 2017 +0000

    howto

commit 1b7f299c5ad4fc50ce4913ab4cdbbdc761db0487
Author: Tim Richardson &lt;tim@x.com&gt;
Date:   Wed Mar 1 11:17:50 2017 +0000

    readme
</code></pre>

<h2>lets checkout a new branch called test and reset it to the initial commit:</h2>

<pre><code>#( 03/01/17@11:26am )( tim@tim ):~/test@master✔
   git checkout -b test
Switched to a new branch 'test'

#( 03/01/17@11:27am )( tim@tim ):~/test@test✔
   git reset --hard 1b7f299c5ad4fc50ce4913ab4cdbbdc761db0487

HEAD is now at 1b7f299 readme
</code></pre>

<h2>If i cherry pick commit 8969440 it fails because it relies on fd46c4c and 1b7f29 but not 4680089:</h2>

<pre><code>#( 03/01/17@11:27am )( tim@tim ):~/test@test✔
   git cherry-pick 8969440
error: could not apply 8969440... edit readme and howto
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<h2>however I can cherry pick 4680089c7 from 1b7f299c without any conflicts even though it is not a first degree descendant on the git log:</h2>

<pre><code>#( 03/01/17@11:28am )( tim@tim ):~/test@test✗✗✗
   git reset --hard 

HEAD is now at 1b7f299 readme

#( 03/01/17@12:10pm )( tim@tim ):~/test@test✔
   git cherry-pick 4680089c7

[test de3878f] add la
 Date: Wed Mar 1 11:20:06 2017 +0000
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 la
</code></pre>

<h2>So there is a dependency graph between the patches which looks like this:</h2>

<pre><code>+---------+
|         |
| 1b7f299 +--------+
|         |        |
+---------+        |      +----------+
                   +-----&gt;+          |
                   |      | 8969440  |
+---------+        |      |          |
|         |        |      +----------+
| fd46c4c +--------+
|         |
+---------+


+---------+
|         |
| 4680089 |
|         |
+---------+
</code></pre>

<h2>My question is given a larger repo how can I calculate the dependency graph in terms of patches? How can I use git to tell which commits rely on others?</h2>
","0","819718","0","0"
"42538057","3058742","2017-03-01 17:19:05","1","954","<git><git-cherry-pick>","How do I move local, unpushed, commits from a corrupt git repository to another repository?","<p>Normally I can move pushed commits to another repository using <code>cherry-pick</code>: I <code>fetch</code> the related branch from 'another' repository to my new repo and <code>cherry-pick</code> with commit's ID. </p>

<p>I want to do the same thing for local--unpushed--commits in a corrupt repository (something went wrong and I cannot push my changes, but I need to move them to another repo). </p>

<p>Is there any way to <code>cherry-pick</code> commits from the corrupt repo to another repo? </p>

<p>PS: Both repositories exist on the same machine. </p>
","0","3058742","0","0"
"42571654","1117663","2017-03-03 05:57:24","20","3766","<git><cherry-pick>","git cherry-pick does not just pick the diff of the commit","<p>I have two branches: <code>A</code> and <code>B</code>.</p>

<ul>
<li><code>A</code>'s commit history: <code>a &lt;- b &lt;- c</code>;</li>
<li><code>B</code>'s commit history: <code>a &lt;- h &lt;- i</code>;</li>
</ul>

<p>Assume that there is only one file here. </p>

<ol>
<li>In commit <code>b</code>, I adds some texts like ""foo"".</li>
<li>In commit <code>c</code>, I adds some texts like ""bar"".</li>
<li>Then I <code>git cherry-pick c</code> on <code>B</code> branch. I thought <code>cherry-pick</code> will only pick the changes in <code>c</code> to branch <code>B</code>. However, it will add both <code>foo</code> and <code>bar</code> to branch <code>B</code>. Which is obviously not what I want.</li>
</ol>

<p>Therefore, <code>cherry-pick</code> will pick all the changes of those files touched in commit <code>c</code> since the ancestor commit <code>a</code>. Is that right? What if I only want to pick the diff from <code>b</code> to <code>c</code> and apply it onto <code>i</code>?</p>

<h1>Update the exact steps</h1>

<ol>
<li>Init a git repo;</li>
<li><p>Add file <code>test.txt</code> and issue the first commit <code>init commit</code>. <code>test.txt</code> is now:  </p>

<pre><code>first line  
second line
</code></pre></li>
<li><p>Create a new branch <code>dev</code> but stay in branch <code>master</code>;</p></li>
<li><p>Add <code>added in commit b</code> to the file and issue the commit <code>b</code>. <code>test.txt</code> is now:</p>

<pre><code>first line
added in commit b
second line
</code></pre></li>
<li><p>Add <code>added in commit c</code> to the file and issue the commit <code>c</code>. <code>test.txt</code> is now:</p>

<pre><code>first line
added in commit b
added in commit c
second line
</code></pre></li>
<li><p>Check out <code>dev</code> branch and issue the commit <code>h</code>. <code>test.txt</code> is now:</p>

<pre><code>first line
second line

adding by commit h
</code></pre></li>
<li><p><code>git cherry-pick &lt;commit c SHA1 ID&gt;</code> to cherry-pick commit <code>c</code> onto commit <code>h</code>.</p></li>
<li><p>The conflict message:</p>

<pre><code>index 6a8dc57,594c6ec..0000000
@@@ -1,4 -1,4 +1,9 @@@
  first line
++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
++=======
+ added in commit b
+ added in commit c
++&gt;&gt;&gt;&gt;&gt;&gt;&gt; 06ce9b1... commit c adding another line
  second line
 +
 +adding by commit h
</code></pre></li>
<li><p>See? <code>cherry-pick</code> also brings the changed in commit <code>b</code>.</p></li>
</ol>

<p>Thanks!</p>
","5","1117663","0","0"
"24127263","482519","2014-06-09 19:12:06","1","540","<git><merge><rebase><revert><cherry-pick>","Why git gives priority to a cherry-pick commit over the revert commit?","<p>Assume that I have a following tree:</p>

<p><code>$ git log --graph --oneline --decorate --all</code></p>

<pre><code>* 7b261e3 (HEAD, master) Revert ""A""
* 32f08ae A
| * f0b008f (b) A
|/
* 83c0052 init
</code></pre>

<p><code>$ git log -p --graph --decorate --all</code></p>

<pre><code>* commit 7b261e3534e12446b75d286ef94556d077a9ee87 (HEAD, master)
| Author: Shin Kojima &lt;shin@kojima.org&gt;
| Date:   Tue Jun 10 03:13:29 2014 +0900
| 
|     Revert ""A""
|     
|     This reverts commit 32f08ae6e6a8036a7ed0a72568ac41b3e0fe806a.
| 
| diff --git a/test b/test
| index f16344d..26604dc 100644
| --- a/test
| +++ b/test
| @@ -1,3 +1,3 @@
|  foo
| -hoge
| +bar
|  buz
|  
* commit 32f08ae6e6a8036a7ed0a72568ac41b3e0fe806a
| Author: Shin Kojima &lt;shin@kojima.org&gt;
| Date:   Tue Jun 10 03:12:18 2014 +0900
| 
|     A
| 
| diff --git a/test b/test
| index 26604dc..f16344d 100644
| --- a/test
| +++ b/test
| @@ -1,3 +1,3 @@
|  foo
| -bar
| +hoge
|  buz
|    
| * commit f0b008f3da2426611b40560ce4b64be6e32707e5 (b)
|/  Author: Shin Kojima &lt;shin@kojima.org&gt;
|   Date:   Tue Jun 10 03:12:18 2014 +0900
|   
|       A
|   
|   diff --git a/test b/test
|   index 26604dc..f16344d 100644
|   --- a/test
|   +++ b/test
|   @@ -1,3 +1,3 @@
|    foo
|   -bar
|   +hoge
|    buz
|  
* commit 83c00525a1d8168ae251cf33c00178d398ef4b54
  Author: Shin Kojima &lt;shin@kojima.org&gt;
  Date:   Tue Jun 10 03:11:38 2014 +0900

      init

  diff --git a/test b/test
  new file mode 100644
  index 0000000..26604dc
  --- /dev/null
  +++ b/test
  @@ -0,0 +1,3 @@
  +foo
  +bar
  +buz
</code></pre>

<p><code>7b261e3</code> is a revert commit of <code>32f08ae</code> and <code>f0b008f</code> is a cherry-pick from <code>32f08ae</code>.</p>

<p>When I merge branch <code>b</code> into <code>master</code>, I found that git ignores the revert commit(<code>7b261e3</code>) silently and the result in a different outcome from rebasing method.  It seems like I still have to evaluate degradations and see for myself in this case.</p>

<pre><code>Merge made by the 'recursive' strategy.
 test | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>

<p><code>$ cat test</code></p>

<pre><code>foo
hoge
buz
</code></pre>

<p>Are there any ways to detect conflict?  What I have done wrong?</p>

<p>git version 2.0.0</p>
","1","482519","",""
"42967067","123594","2017-03-23 04:05:30","1","1112","<git><git-rebase><git-cherry-pick>","git cherry-pick and rebase fails","<p>I have the following commits in the history of my topic branch:</p>

<p>(<code>git lola</code> <a href=""http://blog.kfish.org/2010/04/git-lola.html"" rel=""nofollow noreferrer"">shortcut described here</a>)</p>

<pre><code>jochen@autolaptop4:~/projects/infoodle$ git lola
*   0c61616 (refs/stash) WIP on receipt_preview_sprint_to_finish: 3678770 progress
|\  
| * 332dc8a index on receipt_preview_sprint_to_finish: 3678770 progress
|/  
* 3678770 (HEAD -&gt; receipt_preview_sprint_to_finish, origin/receipt_preview, receipt_preview, integration) progress
*   ed2ca95 Merge branch 'receipt_preview' of bitbucket.org:richinnz/infoodle-web into receipt_preview
|\  
| * 0743777 preview stuff
| * 03a2279 be able to ahndle both rebatable and non-rebatable
| * 1ff3d6c better sample number for preview of receipts
| * 0a0f3ed handle missing {tax receipt} replacement
| * 0ce35c9 remove language files, should not be in git
| * 5cc2b61 identify first key of transaction detail correctly to get data out of transaction record
| * def1132 sort out preview spinner
| * 5622f85 typo when pasting code from master
* | 30ef79c (origin/receipt_search, receipt_search) merge transactiontranslator back into receiptconfigurator
* | 367685c progress transferring sql into configurator
* |   84c71b1 Merge remote-tracking branch 'origin/receipt_search' into receipt_search
|\ \  
| * | 149e5f0 Progress on receipt screen search/ sort/ detail
* | | e927458 processing receiptstodo query into receiptList class, process SQL where parts into ReceiptConfigurator
* | | 80c7c06 list loaded from ajax complete
* | | 99b6ed8 only use global.min when not in debug mode
* | | bf15181 rename
* | | 43fd17a re-indent
* | | 57e38a0 re-indent
* | | c4e7588 save work
| |/  
|/|   
* | 867c918 remove confusing commented out stuff
* | fec8c04 text tweak in phpdoc
|/  
* 75a78ce fix mismatch of function parameter typing after merge
</code></pre>

<p>Basically I have accidentally merged origin/receipt_search and we had a change of plan in regards to getting this feature branch finished.</p>

<p>I want to start now with commit 75a78ce (at bottom) and apply </p>

<pre><code>0743777 preview stuff
03a2279 be able to ahndle both rebatable and non-rebatable
1ff3d6c better sample number for preview of receipts
0a0f3ed handle missing {tax receipt} replacement
0ce35c9 remove language files, should not be in git
5cc2b61 identify first key of transaction detail correctly to get data out of transaction record
def1132 sort out preview spinner
867c918 remove confusing commented out stuff
fec8c04 text tweak in phpdoc
</code></pre>

<p>in reverse order onto a new branch.</p>

<p>1) I have tried git cherry-pick:</p>

<pre><code>git checkout 75a78ce
git checkout -b receipt_preview_sprint_to_finish
git cherry-pick fec8c04..0743777
</code></pre>

<p>This fails when applying the second commit: </p>

<pre><code>On branch receipt_preview_sprint_to_finish
You are currently cherry-picking commit 867c918.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Unmerged paths:
  (use ""git add &lt;file&gt;..."" to mark resolution)

        both modified:   code/classes/class.receipting.php
</code></pre>

<p>I don't understand why there would be a conflict.</p>

<p>2) Then I tried rebase:</p>

<pre><code>git branch -f integration 0743777
git rebase --onto receipt_preview_sprint_to_finish fec8c04~1 integration

    First, rewinding head to replay your work on top of it...
    Fast-forwarded integration to receipt_preview_sprint_to_finish.
    jochen@autolaptop4:~/projects/infoodle$ git log
    commit 3678770d92b2fd00797d2cda2875c090fc701a1e
    Author: Jochen Daum &lt;jd@automatem.co.nz&gt;
    Date:   Thu Mar 23 10:48:42 2017 +1300

        progress

    commit ed2ca95096690c4c419ef491ad65c3c5020120e5
    Merge: 30ef79c 0743777
    Author: Jochen Daum &lt;jd@automatem.co.nz&gt;
    Date:   Thu Mar 23 08:26:23 2017 +1300

        Merge branch 'receipt_preview' of bitbucket.org:richinnz/infoodle-web into receipt_preview

        # Conflicts:
        #   code/ajax/accountcode_functions.php
        #   code/ajax/subinclude/person.php
        #   code/styles/ennz/admin_donationreceipts.tpl.php
        #   code/styles/ennz/header.tpl
</code></pre>

<p>But these 2 commits I specifically did not want.</p>

<p>What am I doing wrong?</p>
","1","123594","",""
"42968431","2746089","2017-03-23 06:08:04","5","8793","<git><github><pull-request><cherry-pick><git-cherry-pick>","Can cherrypick all PR(pull request) from github?","<p>Is it possible to cherry-pick all pending PR from github?</p>

<p>Let's say I have 4 PR from 4 different forked repositories waiting for review.  I need to apply all of them to the latest source code.  </p>

<pre><code>PR#65 Do something
PR#61 Notify this
PR#55 Fix that
PR#42 Show there
</code></pre>

<p>I know that I can <code>git remote add</code> all repositories and cherry-pick them one by one.  However, I believe there would be easier/shorter way to <strong>cherry-pick all pending pull request</strong> which I don't know yet ;)</p>

<p>Thanks in advance  </p>
","3","2746089","0","0"
"24369322","3174320","2014-06-23 15:08:48","0","75","<git><git-branch><git-cherry-pick>","How to partly merge branches in git","<p>I have two branches in my project:</p>

<pre><code>master  |    develop 
------  |    -------
abcd    |    bcda7
        |    bcda6
        |    bcda5
        |    bcda4
        |    bcda3
        |    bcda2
        |    bcda1
</code></pre>

<p>How can I partly merge the branches?
Let's say merge commits <code>bcda2 - bcda4</code> to master (I don't need to merge commit bcda1), then merge commits <code>bcda5-7</code> to master? </p>

<p>I know how to use git-cherry-pick but I don't wanna use it as it creates new commits and there will be a mess in the future merging the branches. I'd like to retain the current commits ids and just partly merge the branches.</p>

<p>I tried to use </p>

<pre><code>git rebase -i 
</code></pre>

<p>I removed lines <code>pick bcda5 - pick bcda7</code> therefore It merged the branches but removed commits <code>bcda5-bcda7</code> completely. </p>

<p>Could you please advise on how to do that correctly?</p>
","3","3174320","",""
"43254946","7769805","2017-04-06 12:15:03","0","1540","<git><cherry-pick><git-cherry-pick>","I am trying to cherry-pick a commit but I get an error","<p><strong>I am trying to cherry-pick a commit but I get an error:</strong></p>

<pre><code>Packaging has failed due to cherry-picking (rebase) failure

Caused by: Commit refs/changes/26/1452826/9 cherry-picking failed due to
failing file(s): {build/folder_name/file_name.py=DIRTY_WORKTREE}
</code></pre>
","2","7769805","",""
"13460332","1370106","2012-11-19 19:00:02","3","50","<git><git-branch><git-rebase><git-cherry-pick>","Errors when moving a specific commit to a new branch with Git","<p>I have this: </p>

<pre><code>branch-1     a--b--c--d
</code></pre>

<p>I need this: </p>

<pre><code>branch-1     a--c--d
branch-2     b
</code></pre>

<p>I tried this: </p>

<pre><code>$git checkout -b branch-2
$git cherry-pick &lt;SHA-1 b&gt;
</code></pre>

<p>But I got this:</p>

<pre><code>error: could not apply &lt;SHA-1 b&gt;... [comment]
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>So I did <code>$git status</code> and got <code>Unmerged paths ... both modified: .gitignore</code>. I <code>git add</code>ed and <code>git commit</code>ted before trying again, only to get the same error msg again. </p>

<p>How do I move a particular commit onto a new branch?</p>
","1","1370106","",""
"62192333","8024926","2020-06-04 10:22:54","4","171","<git><git-merge><git-rebase><git-cherry-pick><git-merge-conflict>","Is it possible to merge after cherry-pick and rebase?","<p>Is it possible to merge at step 4 without conflict?</p>

<ol>
<li><p>cherry-pick commit 'E' from branch1 to branch2</p>

<pre><code> branch1 : A - B - C - D - E
                 \
 branch2 :         F - G - E(cherry-pick from 1)
</code></pre></li>
<li><p>The commits are added to branch2</p>

<pre><code> branch1 : A - B - C - D - E
                \
 branch2 :         F - G - E - H - I
</code></pre></li>
<li><p>Rebase interactively and squash commits because they are the solution to the same problem.</p>

<p>(Now, I think it was bad decision...)</p>

<pre><code> branch1 : A - B - C - D - E
                \
 branch2 :        F - G - I'
</code></pre></li>
<li><p>Cherry-pick squashed commit again to branch1...</p>

<p>(Would it be better to cherry-pick commit H, I to branch1?)</p>

<pre><code> branch1 : A - B - C - D - E - I'(conflict?)
                 \
 branch2 :         F - G - I'
</code></pre></li>
</ol>
","2","8024926","",""
"13522664","1031417","2012-11-23 03:17:18","10","4097","<git><git-cherry-pick><git-am>","git - cherry-pick - HOWTO / WHYTO","<blockquote>
  <p>Problem: You want to test a feature someone has developed, but it only
  exists in a remote branch which is woefully out of date.</p>
</blockquote>

<p><a href=""http://wiki.koha-community.org/wiki/Using_Git_Cherry_Pick"" rel=""nofollow noreferrer"">Source</a></p>

<ol>
<li>How does cherry-pick solve the problem?</li>
<li><strong>Why won't I use git am or git apply?</strong></li>
</ol>
","0","1031417","0","0"
"51245215","4488775","2018-07-09 12:07:07","0","235","<git><version-control><cherry-pick>","Git cherry pick issue while picking a range of commits","<p>Git version 1.7.1 - CentOS 6.6</p>

<p>I am trying to cherry pick a range of commits.</p>

<p>I am in my <code>feature</code> branch and the output of <code>git log</code> is like below</p>

<pre><code>commit: 111
Author: abc
time: xyz

commit: 222
Author: abc
time: xyz

commit: 333
Author: abc
time: xyz

commit: 444
Author: abc
time: xyz

commit: 555
Author: abc
time: xyz
</code></pre>

<p>And I go back to <code>master</code> branch to pick a few commits from <code>feature</code> branch.</p>

<p>I want to cherry pick from 444 to 222. So i pass the below command:</p>

<pre><code>git cherry-pick 444^..222
</code></pre>

<p>But I get an error like below:</p>

<pre><code>fatal: Cannot find '444^..222'
</code></pre>

<p>However, I can cherry pick a  single commit. I'm pretty sure that my syntax is correct. I want to include commits 444,333 and 222 to apply in my target branch.</p>

<p>I can successfully do <code>git show</code> for both the commits. Where am I going wrong?</p>
","7","4488775","",""
"51259177","1795463","2018-07-10 07:11:28","0","182","<git><git-branch><cherry-pick><git-cherry-pick><git-merge-conflict>","Git cherry-pick to integration branch and then revert the original commit from feature branch","<p>What would be the consequences of reverting the original commit while the same had been cherry-picked to the target branch?  </p>

<p>There is a branch (<em>say</em> <code>feature</code>) with some changes (commit: <strong>A</strong>), while this change was expected to be in another branch (<em>say</em> <code>integration</code>).<br>
So, I cherry-picked this change (commit: <strong>A</strong>) from <code>feature</code> branch to <code>integration</code> branch (resulting into a new commit: <strong>AC</strong>, in <code>integration</code> branch).  </p>

<p>However, due to testing needs, the <code>feature</code> branch is not expected to contain this change (commit: <strong>A</strong>) at all.<br>
Hence, I had to revert <strong>A</strong> from the <code>feature</code> branch (resulting in a revert commit <strong>AR</strong>, in the <code>feature</code> branch).</p>

<p>Now, if later I merge this <code>feature</code> branch into the <code>integration</code> branch, would there be any issues or conflicts in the changes that had been cherry-picked initially.<br>
[After this merge, integration will have all the 3 commits, <em>viz.</em> <strong>A</strong>, <strong>AR</strong>, <strong>AC</strong>]<br>
The commit <strong>AR</strong> will nullify the commit <strong>A</strong>, won't it nullify the commit <strong>AC</strong> too?</p>
","1","1795463","",""
"61780121","3619498","2020-05-13 16:40:41","0","75","<git><merge><branch><patch><cherry-pick>","Git revision range since last merge, including that merge","<p>Say I have the following situation in Git. </p>

<p>Basically, someone has branches out from master and then merged to their branch (one or more times).</p>

<pre><code>*   &lt;- 'master'
| * &lt;- 'topic'
| *
|/|
* |
| * &lt;- 'topic' created
|/
*
</code></pre>

<p>Can I use Git revision ranges to obain the commits on 'topic' since the last common ancester between 'master' and 'topic'. In this case, it would be 'topic' and 'topic~'.</p>

<p>Background: I'm trying to create one new (non-merge) commit on 'master' with all the changes from 'topic' while avoiding to resolve conflicts that have already been resolved on 'topic'. I'm thinking in the lines of ""format-patch"" and then ""am"" or maybe ""cherry-pick"" with ""--no-commit"". Rebasing gives me challenges because of the merge commits.</p>

<p>Thanks</p>
","1","3619498","",""
"61789845","4353991","2020-05-14 05:20:04","0","227","<git><continuous-integration><devops><branching-and-merging><cherry-pick>","Don't want to bring all features on the staging branch to master","<p>So our team always pushes code to the staging branch for our management to test the website.
And we used to work on a branch like this:</p>

<pre><code>Feature branches -&gt; Develop -&gt; Staging -&gt; Master (production)
</code></pre>

<p>The Develop, Staging, and Master are configured with CI, automated deploy to each environment server.</p>

<p>And once we finish our features and reach the staging branch, some of the features we developed and committed to staging are not ready yet to bring/merge to master, only some of the features are we want to merge to master (production).</p>

<p>For instance, management still testing or the test for certain features is taking longer.</p>

<p>How do we solve a problem like this?
I have read about <code>git cherry-pick</code>, but is it good for this scenario?
Or do you have any suggestions?
Thanks.</p>
","3","4353991","",""
"51299645","2786457","2018-07-12 07:27:25","0","123","<git><logging><patch><cherry-pick>","How to pick commits from another git repository, and keep or record the original hashes","<p>With reference to this thread:
<a href=""https://stackoverflow.com/questions/5120038/is-it-possible-to-cherry-pick-a-commit-from-another-git-repository"">Is it possible to cherry-pick a commit from another git repository?</a></p>

<p>.. and this answer provided in there (which is what I need):</p>

<pre><code>$ git --git-dir=../&lt;some_other_repo&gt;/.git \
 format-patch -k -1 --stdout &lt;commit SHA&gt; |
 \ git am -3 -k
</code></pre>

<p>Is there a possible variation of this which can automatically also record (add to the commit messages?) the relevant git hashes from where I'm patching from to where I'm applying to?</p>

<p>Manually editing is possible but very tedious for +100 commits ...</p>
","0","2786457","",""
"61982280","13605954","2020-05-24 06:12:32","0","339","<git><github><azure-devops><azure-devops-rest-api><cherry-pick>","Issue while using Cherry-pick api using PRid","<p>I am trying to use the Git-Cherry API, in power shell to automate the process of cherry-picking a PR by its PRid.</p>

<pre><code>$Body = @{
""generatedRefName"" = ""refs/test"";
""ontoRefName"" = $BranhcName;
""repository"" = $RepoName;
""source"" = $PRid #Prid is an integer value
}
#Cherr-Pick: https://learn.microsoft.com/en-us/rest/api/azure/devops/git/cherry%20picks/create?view=azure-devops-rest-6.0#gitasyncrefoperationsource
Invoke-WebRequest @req -Method POST -Uri ""${baseuri}/git/repositories/${RepoName}/cherryPicks?${api}"" -Body ($Body|ConvertTo-Json)
</code></pre>

<p>I get an issue as below when I try to cherry-pick this way,</p>

<blockquote>
  <p>Invoke-WebRequest :
  {""$id"":""1"",""innerException"":null,""message"":""Exactly one source for a
  cherry-pick must be 
  specified."",""typeName"":""Microsoft.TeamFoundation.Git.Server.GitAsyncRefOperationInvalidSourceException,
  Microsoft.TeamFo
  undation.Git.Server"",""typeKey"":""GitAsyncRefOperationInvalidSourceException"",""errorCode"":0,""eventId"":3000}
  At line:99 char:1
  + Invoke-WebRequest @req -Method POST -Uri ""${baseuri}/git/repositories ...
  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      + CategoryInfo          : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest],
  WebExce     ption
      + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand</p>
</blockquote>

<p>What is this error? - I am giving exactly one source as per my understanding.</p>
","0","13605954","",""
"18123107","2316912","2013-08-08 10:00:27","1","90","<git><cherry-pick>","Problems with reseting the git cherry-pick","<p>I made some code adjustments to evaluate some functionality in our software. This changes were made to a version of software let say dev_1. We have the official version of the software in CVS, so I checked out dev_1, initiated a git repo and made a few commits. Now my colleague comes and say ""hey, I made some adjustment in the algorithm and I would like to know how your evaluation looks like with my version of the code, my version is in CVS ad dev_2.""</p>

<p>So I checked out dev_2 from CVS and intialized the git repo. Now I need to apply my changes that I made to dev_1 to dev_2. I decided to cherrypick the commits from dev_1 repo and apply them to dev_2.</p>

<p>However I made some error during cherrypicking merge and now my dev_2 working directry seems to be changed and I don't know how to get to the state where it was before I attempted to cherry-pick.</p>

<p>Is there some way, how to get to the state before cherry-picking?
What is a difference between cherry-pick --abort and cherry-pick --quit (none seems to help)?
And finally, do you think that may approach to solve this problem is good or is there some more simple approach?</p>

<p>Thank you</p>
","0","2316912","",""
"18123233","863028","2013-08-08 10:07:19","1","1126","<git><git-log><cherry-pick><git-cherry-pick>","more verbose git cherry","<p>I'm looking for git cherry to behave more like <code>git log</code>.</p>

<p>I have two independent branches in my git repository (result of svn import). No common ancestor, no merges between them. I don't want these two branches to be ever connected, even though they concern the same project.</p>

<p>The two branches are:</p>

<p><code>master</code> (clean line, releasable code)</p>

<p><code>old_trunk</code> (junk development branch, with experimental commits as well as ones that I want to cherry pick)</p>

<p>Now, </p>

<pre><code>$ git cherry old_trunk -v
</code></pre>

<p>properly identifies changesets that were already applied to the master (as svn merge is working more like a cherry pick).</p>

<p>However git log:</p>

<pre><code>$ git log --cherry --cherry-mark master..old_trunk
</code></pre>

<p>shows all commits as not yet applied to master.
It's either broken or using different mechanism to find cherry picks.</p>

<p>I'm looking for a solution to navigate through <code>old_trunk</code> history to see the author, see the date of the commit, see full commit message, and most importantly to be able to distinguish cherry-picks already done.</p>

<p>Any thoughts?</p>
","0","863028","",""
"33541597","5493666","2015-11-05 10:02:17","1","530","<eclipse><git><git-cherry-pick>","How to move specific commit from git branch A history to git branch B from eclipse?","<p>I am using cherry-pick but it is telling me the change has been already included. </p>

<p>Example: I have total of 10 commits in branch A but I want to move only commits no 1, 7 and 9 to branch B.</p>

<p>How do I achieve this in eclipse?</p>
","6","5493666","",""
"43293669","1818935","2017-04-08 11:44:22","0","793","<git><git-cherry-pick>","Cherry-picking from a commit that is inconsistent with the current state of the repository","<p>Cherry-picking is applying a sequence of diffs, copied from an arbitrary commit, to the current state of the repository. What happens if some of these diffs are inconsistent with the current state of the repository? For instance, what if one of the diffs modifies a file f, but this file no longer exists in the current repository?</p>
","0","1818935","",""
"62021626","73237","2020-05-26 11:58:45","1","2299","<git><github><pull-request><cherry-pick><git-cherry-pick>","How to open GitHub PR for a proposed cherry-pick","<p>GitHub pull requests are all about <em>merging</em> two branches together:</p>

<ul>
<li>The ""remote"" branch, containing new changes you want to merge.</li>
<li>The ""local"" branch you want to merge into, which GitHub calls the ""base"" branch.</li>
</ul>

<p>Is there a way to create a branch that shows the same merge conflicts as a given cherry-pick, and that, when merged, is equivalent to performing that cherry-pick? In this instance we know the specific branch the cherry-pick will be applied to, if that makes any difference?</p>

<p>For example, is it sufficient to create a branch whose HEAD is the commit I want to cherry-pick, and open a PR for that branch?</p>
","0","73237","",""
"62023931","10515408","2020-05-26 14:02:48","0","707","<git><git-cherry-pick><meld>","Undestanding Meld 3 way merge change flow directions","<p>I am trying to complete a 3 way merge for a cherry picked commit, using Meld. However, I have difficulties understanding the directions in which changes flow between the 3 files shown by Meld. To give a better illustration, let's consider the following case:</p>

<p>On the master branch at commit 4e623e0, we have a tracked file, called test.c and it looks like this:</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
        printf(""Hello world!\n"");
        return 0;
}
</code></pre>

<p>We create branch 'other', and commit changes to test.c, so branch other is at commit 29771b0, and the test.c file looks like this:</p>

<pre><code>#include &lt;stdio.h&gt;
#include ""foo.h""
#include ""headerx.h""
#include ""headery.h""
#include ""headerz.h""

int main()
{
        printf(""Hello world!\n"");
        if (x(2) &gt; x(3))
                return -1; 
        else if (z(2) &gt; z(3))
                return 44; 
        return 0;
}
</code></pre>

<p>Now we go back to branch 'master', and commit changes to test.c, so branch master is at commit 02fd8c8, and the test.c file looks like this:</p>

<pre><code>include &lt;stdio.h&gt;
#include ""foo.h""
#include ""bar.h""

int main()
{
        printf(""Hello world!\n"");
        return bar_fun(2);
}
</code></pre>

<p>Finally, on the master branch, we attempt to do</p>

<pre><code>git cherry-pick 29771b0
git mergetool
</code></pre>

<p>and the following window shows up:
<a href=""https://i.stack.imgur.com/fK8U6.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fK8U6.png"" alt=""enter image description here""></a></p>

<p>My question is:</p>

<ol>
<li>What sense does the marked arrow, pointing to the ""LOCAL"" file make?</li>
<li>How can i turn off this ""feature"" (bug?)?
It is rather annoying when merging large files, when Meld marks a big block of the ""BASE"" code and wants to push it into the ""LOCAL"" file.</li>
<li>If it does make sense - why would I want to change, the ""LOCAL"" file?
According to this SO post: <a href=""https://stackoverflow.com/questions/11133290/which-version-of-the-git-file-will-be-finally-used-local-base-or-remote"">Which version of the git file will be finally used: LOCAL, BASE or REMOTE?</a>, the ""LOCAL"" pane should be open in read only mode. I have a rough understanding, of ""LOCAL"", ""REMOTE"", ""BASE"", and ""MERGED"" files, however the considered Meld option doesn't make sense to me.</li>
</ol>
","4","10515408","",""
"18176144","633183","2013-08-11 20:05:01","0","1163","<git><git-rebase><git-cherry-pick>","How to retroactively add commits to a Git repository?","<p>I am creating a module that ports a third party lib to another platform. The version of my module matches the version of the lib that it wraps.</p>

<p>For the purposes of this question, let's say that the lib is on version 10, therefore my module is also on version 10.</p>

<p>Git refs look like this:</p>

<pre><code>master === HEAD === v10 (tag)
</code></pre>

<p>However, for compatibility reasons, I wish to create versions 8 and 9 of the wrapper as well.</p>

<p>If I commit <code>v9</code>, it will become the new <code>HEAD</code>, but I want <code>HEAD</code> to stay on <code>v10</code>. I just want <code>v9</code> to be available option via</p>

<pre><code>// switch to version 9
git checkout v9
</code></pre>

<p>Is there anyway to do this?</p>

<p>Note, I'm sort of a git noob. I've heard of rebasing and cherry picking, but I don't understand either of them very well. The accepted answer will provide a solution <strong>as well as an explanation.</strong></p>
","4","633183","0","0"
"43312649","888715","2017-04-09 22:33:32","3","286","<git><version-control><merge><git-filter-branch><cherry-pick>","Git workflow for partial merges?","<p>I have a two branches <code>dev</code> and <code>a</code>.  I need to merge feature <code>a</code> into <code>dev</code>, but my teammate has made certain features in one file that is not ready for merge.  If I just merge and resolve using mine, git marks the changes in this file as invalid, and rather than permitting these changes to merge at a later time, just fast forwards if I try to re-merge the branch.  If I don't resolve conflicts, git refuses to perform the merge.</p>

<p>My strategy for working around this is to create a branch aside and suppress the broken feature, then merge in this branch.  The problem is that the git commands for this get somewhat complicated, so I need the help of an expert.</p>

<p>I would like if possible to generalize this type of action, into a git extension I would call something to the effect of <code>git-cherrymerge</code>.</p>

<p>The steps would be as follows:</p>

<ol>
<li>Replay commits specified by user (maybe this can be automated with some strategy) onto a temporary branch</li>
<li>Git filter-branch to remove the broken files</li>
<li>Squash temporary branch, adding automatic commit message</li>
<li>Merge temporary branch into target branch (here it's dev)</li>
</ol>

<p>I'm not quite an expert in <code>filter-branch</code> or <code>rebase</code> and it looks like I can quite seriously <strong>damage the history by misusing them</strong>.</p>

<p>I suppose my question is </p>

<ol>
<li>Will this work or is there a better canonical way to do this?</li>
<li>What git commands should I execute in what sequence to avoid accidentally damaging my repositories history.</li>
</ol>
","4","888715","0","0"
"6232394","168143","2011-06-03 20:34:51","6","191","<git><rebase><cherry-pick>","Move several commits from one branch to another?","<p>I started with branches master and develop. I made branch foo based off of develop. 7 commits later and now I realize I wish i made it off of master. I can cherry pick each commit, no big deal, but is there a slicker way?</p>
","0","168143","",""
"43524294","15809","2017-04-20 15:48:22","1","82","<git><git-cherry-pick>","Is git cherry-pick actually the same as git show + git apply?","<p>Could it be that</p>

<pre><code>git cherry-pick &lt;rev&gt;
</code></pre>

<p>is in fact exactly the same as</p>

<pre><code>git show &lt;rev&gt; | git apply -3 -
</code></pre>

<p>???</p>

<p>Since running either one causes exactly the same result for me and if I knew they are indeed equivalent, I could get a much better understanding of how  cherry-picking with GIT actually works, as it doesn't always give me the result I'd expect, but that's probably because the sole change cannot be applied and cherry-picking falls back to a three-way-merge (that's what <code>-3</code> does on the second command) and that would explain the unexpected result.</p>
","1","15809","0","0"
"33626874","4055389","2015-11-10 09:36:56","10","11669","<git><cherry-pick>","Git - Is cherry-picking a bad practice if I want to have a consistent workflow?","<p>I find <code>cherry-pick</code> particularly useful in some cases, e.g., when I have a <code>feature1</code> branch, and a <code>test-feature1</code> branch, and I want to apply corrections found in tests; or the other way, I want to test new functions, for which I need those new functions in the test branch.</p>

<p>The advantage of <code>cherry-pick</code> here is that I can choose the specific changes I want to apply in the other branch; maybe merging the whole branch is not interesting.</p>

<p>I've been using this in past projects but I think this practice leads to inconsistent workflows. Is <code>cherry-pick</code>-ing a not recommended and avoidable practice?</p>
","3","4055389","0","0"
"33627737","3319803","2015-11-10 10:21:25","2","715","<git><merge-conflict-resolution><cherry-pick><git-cherry-pick><git-merge-conflict>","Understanding Git Cherry Pick conflict","<p>We recently switched from SVN to GIT, and I'm having some trouble converting our previous workflow. Mostly everything works, but today I got a weird cherry-pick conflict. </p>

<p>I'm able to resolve the conflict, but I would like to know where this came from, because to my understanding there shouldn't be a conflict in this situation.</p>

<p><strong>Setup</strong></p>

<p>In our repository we have a <code>master</code> branch on which we develop. Four times a year we release a new version. We branch of of <code>master</code> into <code>Release-x</code> and this gets shipped after testing.</p>

<p>We have several release-versions in production at the same time. If a bug is found, this has to be fixed on all (supported) release branches. So a single release branch using tags to identify the different releases isn't a valid workflow.</p>

<p>So we currently have these branches: <code>master</code>, <code>Release-15Q1</code>, <code>Release-15Q2</code> and <code>Release-15Q3</code></p>

<p>Say for example we found a typo causing a bug in <code>master</code>, we would fix it and then <code>cherry-pick</code> it onto <code>Release-15Q1</code>, <code>Release-15Q2</code> and <code>Release-15Q3</code></p>

<p><strong>So, now onto the conflict I'm facing:</strong></p>

<p>The file <code>properties.dat</code> was changed in <code>master</code>, after branching <code>Release-15Q3</code></p>

<p><em>Properties.dat</em> (<code>Release-15Q3</code>)</p>

<pre><code>serverip=1.1.1.1
serverport=11
name=MyApp
</code></pre>

<p><em>Properties.dat</em> (<code>master</code>)</p>

<pre><code>serverip=2.2.2.2
serverport=22
name=BetterName
</code></pre>

<p>Development went on... all good. 
Then we noticed a bug where we needed to add an extra property to the file to disable the bug.</p>

<p><em>Properties.dat</em> (<code>master</code>)</p>

<pre><code>  serverip=2.2.2.2
  serverport=22
  name=BetterName
+ allowBug=false
</code></pre>

<p>This fix-commit also needs to be applied to the three other branches. So I go to each branch and use the cherry-pick command.</p>

<p>This is giving me conflicts on the first three lines, but I don't really understand why. </p>

<p>I was under the assumption that with cherry-picking you would only <em>replay</em> that specific commit, so only add the <em>allowBug=false</em> line at the right spot. It shouldn't matter if other changes were made, right?, because I'm not merging the branches?</p>

<p>Why is this giving a conflict? Shouldn't these other changes be ignored?</p>
","0","3319803","0","0"
"62258483","1146785","2020-06-08 08:59:55","1","456","<git><rebase><cherry-pick>","why does rebase always give merge conflicts?","<p>I'm trying a git rebase to squash some commits down. However each time I have to manually resolve conflicts on what seems like every step. Basically every single commit I made shows as a conflict and I have to resolve it.</p>

<p>Is it possible to use rebase when I have made some branches while working on a project?
These are just local branches that haven't been pushed to origin yet.</p>
","6","1146785","",""
"52219677","6204346","2018-09-07 09:36:31","0","109","<git><rebase><cherry-pick>","Rebase acts differently as expected","<p>Following situation: two branches, upstream-dev and personal-dev, which vary a lot due to not yet merged or rejected features.</p>

<p>I then create a new feature branch on personal-dev. I do some commits, testing etc. At the end, I want to rebase the feature branch onto upstream-dev to properly create a pull request on github.</p>

<p>But git drags along a lot of changes and differences between personal-dev and upstream-dev, too? Why is that? I though a rebase takes the commits of a branch and reapplies them on another branch.</p>

<p>I can though perfectly cherry-pick the list of commits from my feature branch. That works without further manual interaction.</p>

<p>Graphics:</p>

<p>K -> L -> M &lt;-- upstream-dev</p>

<p>K -> A -> L -> B -> M &lt;-- personal-dev</p>

<p>Feature branch:
[K -> A -> L -> B -> M ] -> C -> D -> E</p>

<p>Expected behavior when I'm rebasing:
[K -> L -> M] -> C -> D -> E &lt;-- feature branch</p>

<p>Actually happening:
[K -> A -> L -> B -> M] -> C -> D -> E
(I see on github that the PR tries to not only merge C, D and E to upstream, but personal commits like A and B aswell.</p>

<p>Can I do what I intend to do with rebase somehow? Or is rebase just to include newer commits from the branch, the feature branch was originally derivated of?</p>

<p>What did I get wrong with the rebase functionality?</p>

<p>Thanks for help!</p>

<p>Edit: Here a demonstration of what I'm trying to do. It's in German, but I from the commands you can see, what I do and that it's going wrong.</p>

<pre><code>$ git checkout develop 
Zu Branch 'develop' gewechselt
Ihr Branch ist auf demselben Stand wie 'mpw/develop'.
$ git status
Auf Branch develop
Ihr Branch ist auf demselben Stand wie 'mpw/develop'.

nichts zu committen, Arbeitsverzeichnis unverändert
$ git pull
Bereits aktuell.
$ git branch testrebase
$ git checkout testrebase 
Zu Branch 'testrebase' gewechselt
$ vim application/Controller/RunController.php 
$ git add application/Controller/RunController.php
$ git commit -m 'Testcommit'
[testrebase 184aae08] Testcommit
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git status
Auf Branch testrebase
nichts zu committen, Arbeitsverzeichnis unverändert
$ git checkout hotfix/v0.17.18 
Zu Branch 'hotfix/v0.17.18' gewechselt
Ihr Branch ist auf demselben Stand wie 'origin/hotfix/v0.17.18'.
$ git rebase hotfix/v0.17.18 testrebase 
Zunächst wird der Branch zurückgespult, um Ihre Änderungen
darauf neu anzuwenden ...
Erzeuge Patches: 100% (15/15), Fertig.
Wende an: remove psd files bloating application size
Wende an: merge commit
Verwende Informationen aus der Staging-Area, um ein Basisverzeichnis nachzustellen ...
M   application/Controller/RunController.php
M   application/Library/Functions.php
M   application/Library/Session.php
M   application/Model/Email.php
M   application/Model/Page.php
M   application/View/public/error.php
M   application/View/public/run/index.php
M   setup.php
.git/rebase-apply/patch:76: trailing whitespace.

warning: 1 Zeile fügt Whitespace-Fehler hinzu.
Falle zurück zum Patchen der Basis und zum 3-Wege-Merge ...
automatischer Merge von setup.php
KONFLIKT (Inhalt): Merge-Konflikt in setup.php
error: Merge der Änderungen fehlgeschlagen.
Anwendung des Patches fehlgeschlagen bei 0002 merge commit
Benutzen Sie 'git am --show-current-patch', um den
fehlgeschlagenen Patch zu sehen.

Lösen Sie alle Konflikte manuell auf, markieren Sie diese mit
""git add/rm &lt;konfliktbehaftete_Dateien&gt;"" und führen Sie dann
""git rebase --continue"" aus.
Sie können auch stattdessen diesen Commit auslassen, indem
Sie ""git rebase --skip"" ausführen.
Um abzubrechen und zurück zum Zustand vor ""git rebase"" zu gelangen,
führen Sie ""git rebase --abort"" aus.

$ git status
Rebase im Gange; auf adaffc5f
Sie sind gerade beim Rebase von Branch 'testrebase' auf 'adaffc5f'.
  (beheben Sie die Konflikte und führen Sie dann ""git rebase --continue"" aus)
  (benutzen Sie ""git rebase --skip"", um diesen Patch auszulassen)
  (benutzen Sie ""git rebase --abort"", um den ursprünglichen Branch auszuchecken)

Nicht zusammengeführte Pfade:
  (benutzen Sie ""git reset HEAD &lt;Datei&gt;..."" zum Entfernen aus der Staging-Area)
  (benutzen Sie ""git add/rm &lt;Datei&gt;..."", um die Auflösung zu markieren)

    von beiden geändert:    setup.php

keine Änderungen zum Commit vorgemerkt (benutzen Sie ""git add"" und/oder ""git commit -a"")
$ git rebase --abort
</code></pre>

<p>As you can see, it complains about ”setup.php“ which was edited by both although I only changed ”application/Controller/RunController.php“, where I added a single comment line.</p>
","0","6204346","",""
"50872420","2482441","2018-06-15 09:11:54","3","5562","<git><git-cherry-pick><git-merge-conflict>","How to resolve ""added by us"" git cherry-pick conflict?","<p>I ran into a problem with git, during a conflict resolution after a cherry-pick. Problem involved modification made on file that was <code>git mv</code> in a previous commit.</p>

<p>Here is an example of the full command to reproduce:</p>

<pre><code>mkdir git_repository &amp;&amp; cd git_repository
git init
echo ""foo"" &gt; myFooFile
git add myFooFile 
git commit -m ""First commit add myFooFile""

git checkout -b branch-a
rm myFooFile
echo ""bar"" &gt; myBarFile
git add -A
git commit -m ""rm myFooFile add myBarFile""

git checkout master
git mv myFooFile myBarFile
git add -u
git commit -m ""git mv myFooFile myBarFile""
</code></pre>

<p>Now lets get the modification made on branch-a</p>

<pre><code>git cherry-pick $(git show-ref branch-a)
&gt;error: could not apply 70c80f3... rm myFooFile add myBarFile
&gt;hint: after resolving the conflicts, mark the corrected paths
&gt;hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
&gt;hint: and commit the result with 'git commit'
</code></pre>

<p>Here is the conflict:</p>

<pre><code>git status
&gt;On branch master
&gt;You are currently cherry-picking commit 70c80f3.
&gt;  (fix conflicts and run ""git cherry-pick --continue"")
&gt;  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)
&gt;
&gt;Unmerged paths:
&gt;  (use ""git add &lt;file&gt;..."" to mark resolution)
&gt;
&gt;   added by us:     myBarFile
&gt;
&gt;no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Unfortunately doing <code>git add myBarFile</code> then <code>git cherry-pick --continue</code> isn't the solution as it creates an empty commit.</p>

<p>Going with <code>git rm myBarFile</code> during resolution is not better as it creates a commit removing foo from myBarFile.</p>

<p>How to properly fix the cherry-pick conflict <strong><em>added by us</em></strong> and end-up in a situation where I got these 3 commits on my master branch ?</p>

<ul>
<li>rm myFooFile add myBarFile</li>
<li>git mv myFooFile myBarFile</li>
<li>First commit add myFooFile</li>
</ul>

<p>With myBarFile containing bar ?</p>

<p>Note: I known that I could use <code>git checkout branch-a -- myBarFile</code> during git conflict resolution but this not the solution I'm looking for because I don't think it's the git way of doing it.</p>
","0","2482441","0","0"
"8882898","268673","2012-01-16 16:19:00","1","243","<git><cherry-pick>","apply cherry pick","<p>I got a simple question for you GIT masters:</p>

<p>in GIT man pages I've got this for</p>

<pre><code>man git-cherry-pick

...
git-cherry-pick - Apply the changes introduced by some existing commits
...
</code></pre>

<p>My doubt is: when I cherry-pick a commit to another branch, this commit is moved to the other branch or copied (applied in both branches)?</p>
","0","268673","",""
"64053333","2030532","2020-09-24 19:42:16","0","928","<git><git-cherry-pick>","How to cherry-pick a commit and only apply to certain files?","<p>Let say I have two git branches:</p>
<ol>
<li>branch <code>a</code> with files 1 and 2</li>
<li>branch <code>b</code> with file 2</li>
</ol>
<p>I have a commit in branch <code>a</code> which modified file 1 and 2.
I checkout branch <code>b</code> trying to cherrypick this commit but I only want the part of the commit that changes file 2 (because branch b does not have file 1).</p>
<p>How is this possible?</p>
","2","2030532","",""
"45604767","1084174","2017-08-10 04:55:35","11","17773","<git><commit><git-merge><merge-conflict-resolution><cherry-pick>","Git - Cherry picking with ours/theirs strategy","<p>I wonder if there is any way of cherry picking with ours/theirs strategy. On other words, I want to cherry pick multiple commits from dev branch into main branch with below commands,</p>

<pre><code>git cherry-pick HASH1 HASH2 HASH3 -n
</code></pre>

<p>This command is supposed to take all referred commits and prepare unstaged changes if no conflicts. However, if conflicts, I need to resolve and continue cherry-picking. For all conflicts, my intention is to pick whatever in the dev (which means, <code>--strategy-option = ours</code>).</p>

<p>Is there any way to provide such option while cherry-picking.</p>
","0","1084174","0","0"
"9289731","781662","2012-02-15 07:59:32","22","3929","<git><diff><cherry-pick><git-diff>","git stable branch: find not cherry-picked commits","<p>I have the following git history:</p>

<pre><code>A --- B --- C --- D' --- E' [master]
 \
  \ --- D --- E --- F [stable]
</code></pre>

<p>We have a policy to cherry-pick all changes from stable to master; D' and E' are cherry-picked commits from stable branch, F is not cherry-picked (has been forgotten).</p>

<p>How can I get a diff that bings up F (which was not cherry-picked into master)?</p>

<hr>

<p>We don't want use merge because:</p>

<ul>
<li>cleaner history without merge commits</li>
<li>commits to stable are rare</li>
<li>we have lots of different stable branches</li>
</ul>
","0","781662","0","0"
"45914846","517840","2017-08-28 08:33:48","0","602","<git><version-control><merge><cherry-pick>","How to exclude a specific merged branch's commit from the master branch in Git?","<p>I have a master and a develop branch. Feature and hotfix branches are merged into develop, and from time-to-time develop is merged into master. Now i have a request to exclude a specific hotfix from the master branch. Is this possible somehow? It was a relatively old hotfix branch, so since then i have more than 30 merges into develop. Or i should just create a new branch, reverting the changes manually and merge it to master? </p>
","2","517840","",""
"9339429","826610","2012-02-18 07:20:47","3213","2037289","<git><cherry-pick><git-cherry-pick>","What does cherry-picking a commit with Git mean?","<p>What does <a href=""https://git-scm.com/docs/git-cherry-pick"" rel=""noreferrer""><code>git cherry-pick &lt;commit&gt;</code></a> do?</p>
","2","826610","0","0"
"9369798","7708","2012-02-20 23:07:20","3","2646","<git><cherry-pick><merge-conflict-resolution>","git cherry-pick merge conflict pulling in other commits?","<p>For some reason, it looks like git cherry-pick pulls in other commits when flies have merge conflicts.  These go away when we use <code>git mergetool</code> but prevent us from manually editing the merge-conflicted file.</p>

<p>Does anyone know why this happens?</p>

<p>To show what I mean, let's take a fresh new git 1.7.4 repository with a single file <code>foo</code>:</p>

<pre><code>header

footer
</code></pre>

<p>Let's create a new branch at this point called <code>bar</code>.  Back in the master, let's add three changes to this file in separate commits.</p>

<p>Commit 1:</p>

<pre><code>header

+add something
+
footer
</code></pre>

<p>Commit 2:</p>

<pre><code>header

add something

+add something else
+
footer
</code></pre>

<p>Commit 3:</p>

<pre><code>header

add something

add something else

+important change!
+
footer
</code></pre>

<p>Since this last commit is important, after the fact we decide we want to pull this back to branch <code>bar</code> and <code>git cherry-pick &lt;commit&gt;</code> on that branch.</p>

<p>Unfortunately, this produces an interesting merge conflict in file <code>foo</code>:</p>

<pre><code>header

&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
add something here

add something else here

important change!

&gt;&gt;&gt;&gt;&gt;&gt;&gt; 356ca3c... important change
footer
</code></pre>

<p>Note that <code>git mergetool</code> seems to do the right thing and produces this:</p>

<pre><code>header

+important change!
+
footer
</code></pre>

<p>Why does the merge-conflicted file contain commits <em>previous to the one we tried to cherry pick</em>?</p>
","0","7708","",""
"9772598","438742","2012-03-19 15:07:05","26","5549","<git><cherry-pick>","Backport changes from renamed file","<p>I have two branches: trunk, production. I have found a problem in trunk, made fix and committed it, pushed it. Now it was tested and I need do merge changes into the production branch as a hot-fix. I try to use the cherry-pick. However it doesn't work because a changed file(s) in the fix was renamed in the trunk earlier during some refactoring which I don't want bring into production.</p>

<p>I don't want merge everything, but take only this commit. The cherry pick fails with ""deleted by us"" conflict (of course, the new file never even existed in the production branch).</p>

<p>What is the correct way to bring the changes into the old file?</p>
","0","438742","0","0"
"27633537","513413","2014-12-24 07:58:14","1","345","<git><github><pull-request><cherry-pick>","git, is it possible to send pull request from master branch?","<p>I guess my title does not self explanatory so let me explain little bit there.</p>

<ol>
<li>I forked a project from Github repo to my company repo.</li>
<li>Then I forked the project from my company repo into my personal repo</li>
<li>Then I cloned the project from my personal repo.</li>
</ol>

<p>By default I had/have a master branch. I fixed a lot of things(bugs) and added so many features on this branch. I'm done now and I want to send PR.</p>

<p>AFAIK, PR can be sent by having a branch (which is not exists on origin/upstream) then easily PR can be sent by click on that button on Github page.</p>

<p>Since, I only have master branch and I guess my only solution is cherry-pick from my first commit and then put all my changes on new branch and continue PR process.</p>

<p>I'm wondering is there any other better way to send PR from master branch (to original repo)? any suggestion would be appreciated. Thanks.</p>
","0","513413","0","0"
"9843252","204564","2012-03-23 16:53:20","1","166","<git><history><cherry-pick><reflog>","which commit was cherry-picked?","<p>How can you find out which commit was used in a cherry-pick operation? git reflog only seems to show the resulting commit Sha-1 after the cherry-pick is merged and commited. We need to find the original commit prior to that.</p>

<p>Why? It's because we mistakenly cherry-picked a large, but incorrect commit to a different branch. But noone realized it until after modifying it so that it compiles plus added other commits after it.</p>

<p>The goal here is to compare this resulting cherry-pick from the original one and use those differences either as a patch or to manually make the same changes to the correct cherry-pick.</p>
","4","204564","0","0"
"27960643","2545680","2015-01-15 09:46:56","1","272","<git><git-cherry-pick>","Does cherry-pick apply changes or try to merge the contents of the entire file?","<p>I'm reading <a href=""http://think-like-a-git.net/sections/rebase-from-the-ground-up/cherry-picking-explained.html"" rel=""nofollow noreferrer"">this article</a> about cherry-picking and there is the following picture there:</p>

<p><img src=""https://i.stack.imgur.com/Qfoib.jpg"" alt=""enter image description here""></p>

<p>However, this picture seems misleading to me. From my simple test, it appears that, not just the difference, but the entire file content is merged. Here is the experiment:
I have this commit graph:</p>

<pre><code>A--B
 \
  C
</code></pre>

<p>Commit <code>A</code> had this content in <code>file.txt</code>:</p>

<pre><code>l1
l2
l3
</code></pre>

<p>Commit <code>B</code> had small change:</p>

<pre><code>l1
l2-new
l3
</code></pre>

<p>Commit <code>C</code> had small change:</p>

<pre><code>l1
l2
l3-new
</code></pre>

<p>So now I'm trying to replay commit <code>B</code> on the commit <code>C</code> using cherry-pick,</p>

<pre><code>git cherry-pick B
</code></pre>

<p>and I get a conflict,</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
l2
l3-new
=======
l2-3
l3
&gt;&gt;&gt;&gt;&gt;&gt;&gt; C
</code></pre>

<p>which should not be there if only changes were applied. Since I didn't touch <code>l2</code> line in my <code>C</code> commit, it should have applied smoothly. Am I right?</p>
","2","2545680","0","0"
"10274359","263268","2012-04-23 03:09:08","1","662","<git><github><git-cherry-pick>","Cherrypick single revision from remote repository?","<p>Let's say there is the project repository (on GitHub) and my fork (also on GitHub). My fork is identical except contains one revision to a single file (a bug fix) which hasn't (yet) been accepted by the project repository. I'm trying to provide installation instructions to a third party about how to download the latest version of the software, including my bug fix.</p>

<p>As far as I know, they'll have to do this:</p>

<pre><code>git clone http://projectrepo
git remote add myrepo http://myrepo
git fetch myrepo
git cherry-pick a12345
git remote rm myrepo
</code></pre>

<p>(Assume I do not intend to maintain myrepo up to date - I would like my instructions to outlive my involvement with the project, which could end soon. Also assume that other changes could take place to this file, so simply downloading a copy of the whole file is not safe.)</p>

<p>A few suboptimalities with this:</p>

<ol>
<li>They need to transfer two whole Git repos</li>
<li>It's three extra commands just to get one file.</li>
</ol>

<p>Are there better solutions? Can you obtain a single revision a simpler way?</p>
","4","263268","",""
"65210198","301513","2020-12-09 03:26:45","-1","135","<git><merge><git-merge><cherry-pick><git-workflow>","How to reduce the merge-redundancy, which is used to make sure master is the root of all, in our Git workflow?","<p>We use the &quot;Git workflow&quot; by <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">Vincent Driessen</a>, 2 long lived branches master/dev. We believe we need 2 long lived branches instead of one in <a href=""https://guides.github.com/introduction/flow/"" rel=""nofollow noreferrer"">github flow</a> because we  do enterprise (2B) business. Our customer prefer a stable product over our latest features.</p>
<p>After each release (merge dev into master) our test team will identify a couple of bugs we need to fix in the next release, we then fix them in dev branch. The new features we develop are merged into dev branch too. The bug-fix branch and feature branch will be deleted after they are merge in to dev.</p>
<p>But suddenly the customer support team gets some angry call from the customer and tell us that we need a specific bug-fix/feature to be in product quickly. This situation interrupts our normal workflow and introduces the question I am asking.</p>
<p>Because the code changes our customer needs are already in dev branch, we cherry-pick the wanted commits into master (even though we are full aware of <a href=""https://devblogs.microsoft.com/oldnewthing/20180312-00/?p=98215"" rel=""nofollow noreferrer"">the problem that cherry-pick will introduce</a>). Cherry-pick seems the only option here.</p>
<p>But we always want to make sure the <strong>master branch is the base for all the other branches</strong>, we always do a merge from master to dev branch after that. The merge normally won't introduce code change in dev branch but just to show the branch tree to everyone that master is the root.</p>
<p>I know I can rebase dev branch on master to avoid that merge. But rebase is not ideal either for couples of reasons (I didn't list them here to avoid sidetracking my question)</p>
<p>So is there other way to make sure master is the root of all and also avoid duplicated/empty merge?</p>
","20","301513","",""
"65224262","242042","2020-12-09 20:18:29","42","14447","<git><git-cherry-pick>","How do you `git cherry-pick --continue` with `--no-verify`?","<p>How do you <code>git cherry-pick --continue</code> with <code>--no-verify</code> since <code>--no-verify</code> is not a valid option.  <code>git cherry-pick --no-commit --continue</code> does not work since those two parameters are mutually exclusive.</p>
","3","242042","0","0"
"65243834","14804231","2020-12-10 23:39:36","0","39","<git><merge><workflow><git-merge><cherry-pick>","Supporting major feature branches in Git when master disallows merge commits","<p>Regulations in my industry require strict linear development - therefore no merge commits in master. We also cannot lose authorship, so extreme squashing of commits is difficult.
We've spent a lot of time exploring options for maintaining features in branches and have hit a lot of speed bumps. I will summarize the solutions we've tried and the issues we've found with them. I also have an idea for a solution that I would love help fleshing out.</p>
<p>Solutions:</p>
<ol>
<li><p>Feature branches are regularly rebased onto the tip of master. No squashing.</p>
<ul>
<li><p>Drawbacks: Merge conflicts are resolved per commit. Time cost is high as feature branch grows large.</p>
<p>For example say commit A changes a file significantly, so you resolve a bunch of merge conflicts, then commit B reverts some changes and makes some more changes, so a bunch of those merge resolutions never really needed to happen. Finally commit C deletes the whole file and everything was a complete waste of time</p>
</li>
</ul>
</li>
<li><p>Feature branches are merged regularly. At the end of the release a soft reset to master is used to merge all changes.</p>
<ul>
<li>Drawbacks: Hit by regulations. Authorship of code must be maintained.</li>
</ul>
</li>
<li><p>(Unattempted) Feature branches are merged regularly. Fancy git tools allow us to imperfectly convert this branch into a rebase style branch at integration time.</p>
<ul>
<li><p>Idea: Say we have a branch <em>feature/branch</em> that is our &quot;merge style&quot; branch and we want it to be a &quot;rebase style&quot; branch on top of master. We then follow something similar to these steps:</p>
<ol>
<li><p>Get a list of all commits in <em>feature/branch</em> that are not in master using</p>
<p><code>git log  --pretty=format:%H %p --reverse feature/branch ^master</code></p>
</li>
<li><p>Do some text parsing on that list to get a list of cherry-pick commands</p>
<p><code>git cherry-pick &lt;hash&gt; -X theirs</code> (merge commits would have the argument <code>-m #</code> -- I'm not yet sure of which is better for <code>ours</code> vs <code>theirs</code> or which number is best for the <code>-m #</code> command )</p>
</li>
<li><p>Run this list as a batch file on master. This gets us to a point of having <em>possibly sufficient</em> history of authorship.</p>
</li>
<li><p>Checkout <em>features/branch</em> and perform a soft reset to the modified local master. Check all of these changes into the tip of master to get master to a good state.</p>
</li>
</ol>
</li>
<li><p>I'm currently stuck on step 3. Even with either strategy ours or theirs, I still get merge conflicts. I imagine I was being overly optimistic to expect the strategy to magically force a cherry-pick.</p>
</li>
</ul>
</li>
</ol>
<p>I'd really appreciate any feedback on the proposed solution - even if it's to ridicule it - and I'd love to hear any new ideas for managing this workflow.</p>
","2","14804231","",""
"30313951","1445153","2015-05-18 22:44:34","3","1270","<git><svn><git-svn><smartgit><cherry-pick>","How to preserve original author on cherry-pick smartgit","<p>I'm using smartgit to manage an SVN repo. We have 2 branches, trunk, and release. We are cherry-picking commits from trunk to release as they are ready. How do I set up smartgit to retain the author of the original commit on the cherry pick? Thank you in advance!</p>
","2","1445153","0","0"
"30322000","4912124","2015-05-19 09:41:55","1","213","<git><cherry-pick>","How to override cherry-pick conflicts","<p>Is there any method by which we can override the cherry-pick conflicts? My scenario is: If user provides three changeids, and one file is common in all the three changeids. It will result in cherry-pick conflicts. So over-riding means, the script should take that file from the third changeid.</p>
","0","4912124","",""
"43730940","1790598","2017-05-02 05:48:14","-1","763","<git><git-cherry-pick>","How to find the parent ID to use when using git cherry-pick -m (cherry picking a pull request)?","<p>TL;DR</p>

<p>I need to find the parent ID so I can cherry pick the pull request to another branch (not master).</p>

<hr>

<p>Long version</p>

<p>Several developers (example: coder1 and coder2) have forked dev branch and changed some files. They were finished and have created pull requests to be merge into our dev branch. I have approved all of them.</p>

<p>I want to cherry pick the changes included in the pull request created by coder1 only so I tried this:</p>

<pre><code> git cherry-pick my-hash-id-here
 error: commit my-hash-id-here is a merge but no -m option was given.
 fatal: cherry-pick failed
</code></pre>

<p>my-hash-id is the hash ID for the pull requests (at least looking at repo)</p>

<p>Any ideas on how to find the parent ID to use?</p>

<p>Thank you.</p>
","0","1790598","",""
"24928441","377393","2014-07-24 08:16:12","0","590","<git><git-rebase><git-cherry-pick>","How to rebase (cherry-pick) multiple commits with different number of parents in git?","<p>I want to rebase some commits from master branch to another orphaned branch. The history of the repo is quite messy and the master branch has commits with 1 or 2 parents.</p>

<p>If I try to do rebase: <code>git rebase --onto orphan commit1 commit2</code> - the git attempts to rebase some misty commits that are not on the range from <code>commit1</code> to <code>commit2</code>, and as a result a lot of conflicts.</p>

<p>If I try to do cherry-pick: <code>git cherry-pick commit1..commit2</code> - then I get error:</p>

<pre><code>Commit xxx is a merge but no -m option was given.
</code></pre>

<p>Or otherwise: <code>git cherry-pick -m1 commit1..commit2</code> - I get:</p>

<pre><code>Mainline was specified but commit yyy is not a merge.
</code></pre>

<p>Is there a simple way to achieve my goal?</p>
","6","377393","",""
"48015067","2938837","2017-12-28 22:17:04","1","1030","<git><cherry-pick>","How do I include my first commit in my cherry pick command?","<p><strong>Cliffnotes version</strong></p>

<ul>
<li>Assume I want to run this command: <code>git cherry-pick ABC..XYZ</code>. I want <code>ABC</code> to be included in my commits to the current branch. Do I have to reference the commit before <code>ABC</code>?</li>
</ul>

<p><strong>Long Version</strong></p>

<ul>
<li>So I have branches <code>master</code>, <code>Apple</code> and <code>NewApple</code>.</li>
<li><code>Apple</code> was built upon a very old version of <code>master</code> but only worked on a dozen files which were implemented on folders which the rest of the <code>master</code> did not really touch.</li>
<li><code>Apple</code> has commits <code>ABC</code>, <code>BCD</code>, and <code>XYZ</code>. These are commits unique to <code>Apple</code>. Please note there are about 10 commits between <code>BCD</code> and <code>XYZ. These commits were NEVER commited to</code>master`</li>
<li>So I made a new branch <code>NewApple</code> which is spun off of a newer versions of <code>master</code>, ones with newer commits.</li>
<li>Then I cherry-picked commits from <code>Apple</code> to put onto <code>NewApple</code> like so <code>git cherry-pick ABC..XYZ</code></li>
<li>However, when finished and committed to my remote repository, I noticed that <code>ABC</code> was not included. Everything after it and including <code>XYZ</code> were put onto <code>NewApple</code>.</li>
<li>I want to be able to commit <code>ABC</code> as part of my cherry-pick without referencing the commit that is before it in <code>Apple</code>. I am afraid that if I do, I won't get all the commits in <code>Apple</code> or it will try to merge in random older <code>master</code> commits on top of newer versions of master.</li>
</ul>
","0","2938837","",""
"48034938","7838700","2017-12-30 14:40:45","0","81","<git><merge><merge-conflict-resolution><cherry-pick>","Logic of conflict resolution","<p>I have simple test repository - just 1 file and several commits (creation of the repository is described at the end). I'm trying two variants of cherry-pick operations and I don't understand logic of conflict resolution:</p>

<p>If I do: 
<code>git cherry-pick test1</code></p>

<p>Git detects a conflict in string 1: 'change-1' &lt;-> 'test-1'.
It's clear.</p>

<p>If I do: 
<code>git cherry-pick test2</code></p>

<p>Git doesn't detect a conflict and makes a new commit! It seems string 'test-1' is lost in this case.</p>

<p>I wonder why doesn't Git detect a conflict in the second case?</p>

<hr>

<p>Creation of the repository</p>

<p>1.At the beginning I have an empty repositiory and one text file test.txt with the following content:</p>

<pre><code>delimiter
footer
</code></pre>

<p>2.</p>

<pre><code>git add test.txt
git commit test.txt -m 'v1'
</code></pre>

<p>3.
    test.txt is changed:</p>

<pre><code>change-1
delimiter
footer
</code></pre>

<p>4.</p>

<pre><code>git add test.txt
git commit test.txt -m 'v2'
git branch main HEAD
</code></pre>

<p>5.</p>

<pre><code>git checkout HEAD^
</code></pre>

<p>6.
    test.txt is changed:</p>

<pre><code>test-1
delimiter
footer
</code></pre>

<p>7.</p>

<pre><code>git add test.txt
git commit test.txt -m 'v1_1'
git tag test1 HEAD
</code></pre>

<p>8.
    test.txt is changed:</p>

<pre><code>test-1
delimiter
test-2
footer
</code></pre>

<p>9.</p>

<pre><code>git add test.txt
git commit test.txt -m 'v1_2'
git tag test2 HEAD
</code></pre>

<p>10.</p>

<pre><code>git.exe checkout main
</code></pre>

<p>The reporitory will look like:</p>

<pre><code>v1_2 (tag 'test2')
 |
 |
v1_1 (tag 'test1')
 |
 |     v2 (branch 'main')
 |       |
v1--------
</code></pre>

<p>Then I do the first OR the second variant of cherry-pick.</p>
","10","7838700","",""
"25177039","2123487","2014-08-07 07:54:17","1","261","<java><git><branch><push><cherry-pick>","GIT: how to commit in two branches using cherry-pick","<p>I have one local commit (for example, at <code>branch1</code> branch) and I need to apply it to another branch (eg. <code>branch2</code>). I know that I have to use the </p>

<pre><code>git cherry-pick
</code></pre>

<p>command but I really cant find out by myself how the command should finally look. Help me please and sorry for my English.</p>

<p><strong>UPD:</strong> I've read <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html"" rel=""nofollow"">this link</a>, but I still cant understand how to use it in my case.</p>
","0","2123487","0","0"
"62755851","6743883","2020-07-06 12:14:02","0","33","<git><git-merge><git-cherry-pick>","How to merge changes from a commit below certain line?","<p>I know you can merge/cherry-pick changes from a certain commit but is there a way to merge/cherry-pick changes from a commit but only below a certain line in code, e.g.: merge/cherry-pick changes from a commit 25gh4q1 but only below line 202?</p>
","2","6743883","",""
"7072013","293064","2011-08-15 23:33:21","168","123214","<git><branching-and-merging><cherry-pick>","git cherry-pick not working","<p>I'm trying to cherry-pick a commit from master and get it into the current production branch.  However, when I execute <code>git cherry-pick &lt;SHA-hash&gt;</code>, I just get this message:</p>

<pre><code># On branch prod_20110801
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#   site/test-result/
 nothing added to commit but untracked files present (use ""git add"" to track)
 The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

Otherwise, please use 'git reset'
</code></pre>

<p>Note: I've tried doing a reset and a reset --hard HEAD^, and neither seemed to change anything.</p>

<p>I'm confused as to why this isn't working for me.</p>

<p>Any insight, advice, or ideas on how to resolve this would be helpful~!</p>
","1","293064","0","0"
"44035917","6412942","2017-05-17 22:47:29","4","22561","<git><git-cherry-pick>","git cherry-pick does not work","<p>I get a strange error:</p>

<p><code>git cherry-pick a0cd8fe</code></p>

<p><code>fatal: bad revision 'a0cd8fe'</code></p>

<p>Why is that? </p>

<p>Note that the branch that <code>a0cd8fe</code> was merged to has been deleted. Is that why I get this error?</p>
","9","6412942","",""
"25471836","188108","2014-08-24 12:46:08","7","13406","<git><git-cherry-pick>","Why does git's cherry picking with more than one commit fail?","<p>I try to merge two repos, yielding a flat (aka interleaved) history. I do this along the lines of <a href=""https://stackoverflow.com/a/14839653/188108"">https://stackoverflow.com/a/14839653/188108</a>, under ""History rewrite:"".</p>

<p>The two branches to merge are in ""master"" and ""src/master"".  Then, I write:</p>

<pre><code>$ git checkout --orphan new-master
$ git cherry-pick 9d325d6d 3f4c52ba
error: a cherry-pick or revert is already in progress
hint: try ""git cherry-pick (--continue | --quit | --abort)""
fatal: cherry-pick failed
$ git cherry-pick 9d325d6d &amp;&amp; git cherry-pick 3f4c52ba
[new-master 10f0277] Initial revision.
 7 files changed, 194 insertions(+)
 create mode 100644 __init__.py
 create mode 100644 manage.py
 create mode 100644 samples/__init__.py
 create mode 100644 samples/models.py
 create mode 100644 samples/views.py
 create mode 100644 settings.py
 create mode 100644 urls.py
[new-master 08e083c] Fixed field name in SixChambersLayer.  Added Sample.current_place.
 1 file changed, 2 insertions(+), 1 deletion(-)
</code></pre>

<p>So, why does the first cherry pick command fail, but the split command works?  I use git 1.9.1.</p>
","1","188108","0","0"
"25482130","1482422","2014-08-25 08:46:59","0","1396","<git><git-rebase><cherry-pick>","Cherry picking problems","<p>Branches and commits</p>

<pre><code>mb: A -&gt; B -&gt; C -&gt; G -&gt; H -&gt; I
               \
db:             -&gt; D -&gt; E -&gt; F
</code></pre>

<p>Progress both on db (develop branch) and mb (master).
Rebasing is what I usually do. Always, actually. But, when on ""F"" rebasing against mb not possible (too many weird and strange conflicts).
Solution: cherry pick!</p>

<p>I created a new branch from ""<strong>mb</strong>"" - let's call it ""nmb"" (new master branch)
and in this branch I cherry picked commits D, E and F from ""<strong>db</strong>"". (This was the easy way around, since it was fewer commits in ""db"" than in ""mb"")</p>

<p>At this point, I didn't analyze the git log, which would probably have made my life easier.
All files where in place and the application working as expected so I kept on working...</p>

<p>Now - the exact same scenario is repeating.</p>

<p>I can't rebase ""nmb"" against ""mb"" and the log looks awkward:</p>

<pre><code>F' 10/6 -14 12:23:43
E' 10/6 -14 10:03:30
D' 10/6 -14 09:54:10
I  ...
H  ...
G  ...
F  10/6 -14 12:23:43
E  10/6 -14 10:03:30
D  10/6 -14 09:54:10
C  ...
B  ...
etc
</code></pre>

<p>The D' and D, E' and E, F' and F share the same date/time, message and files, but different commit hashes.</p>

<p>Is this the result of the cherry pick and expected? One commit for the original and one commit for the cherry pick?</p>

<p>Is git log showing the correct data?</p>

<p>I'm really lost in git land.</p>

<p>I should add I'm a newbie and not very familiar with gits all nice features. This is probably a huge lapsus on my side and the easiest thing would be to save the files elsewhere and start over...</p>
","1","1482422","",""
"30678217","155137","2015-06-06 02:01:31","3","346","<git><cherry-pick>","Git: cherry pick inserts changes from other commits","<p>I've been trying to cherry pick a specific commit from one brach into another. Lets say my history looks like this:</p>

<pre><code> A - B - C - D   (master)
      \
       X - Y     (feature)
</code></pre>

<p>Now, let's say I want to apply <strong>only</strong> the changes commit D on master to the feature branch, right after Y. When I try to do this, there are merge conflicts and I can see traces of commit C when merging, although I wanted only to cherry pick commit D.</p>

<p>What am I missing?</p>
","0","155137","",""
"25500207","3832066","2014-08-26 07:23:06","-1","123","<git><cherry-pick><git-reset>","How to add modification to a submitted change in Git?","<p>I have pushed a change in Git with a little mistake. How to add some modification in that same changelist? I heard that it's possible using cherrypick. I'm unable to find how.</p>
","3","3832066","",""
"18386921","1031417","2013-08-22 17:18:42","0","1506","<gerrit><cherry-pick><git-cherry-pick>","how to cherry pick a patch with all its dependencies?","<p>I have seen these 2 posts:</p>

<ol>
<li><a href=""https://code.google.com/p/gerrit/issues/detail?id=1123"" rel=""nofollow"">https://code.google.com/p/gerrit/issues/detail?id=1123</a></li>
<li><a href=""https://groups.google.com/forum/#!msg/repo-discuss/qlP-Yxlxg68/yWJxZVR9mnQJ"" rel=""nofollow"">https://groups.google.com/forum/#!msg/repo-discuss/qlP-Yxlxg68/yWJxZVR9mnQJ</a></li>
</ol>

<p>Is it enabled or not?</p>
","0","1031417","",""
"33762775","1995714","2015-11-17 16:58:53","5","1886","<git><cherry-pick><git-cherry-pick>","git cherry-pick without checkout?","<p>From the <a href=""https://stackoverflow.com/a/17722977/1995714"">accepted answer at Merge, update, and pull Git branches without using checkouts</a>,</p>

<blockquote>You cannot merge a branch B into branch A without checking out A first if it would result in a non-fast-forward merge. This is because a working copy is needed to resolve any potential conflicts.</blockquote>

<p>Would I be correct to extrapolate and say that you also can't <code>git cherry-pick</code> onto a destination that is not checked out?</p>
","2","1995714","",""
"25248020","2620348","2014-08-11 16:29:23","5","5532","<git><logging><cherry-pick><git-cherry>","Git: How to list cherry-picked commits?","<p>How to list commits that were cherry-picked in Git?
Let's suppose the following scenario:
cp = cherry-pick commit</p>

<pre><code>                         cp1         cp2          
master -----o------o------o-----o----o
            \            /          /
     branch1 \----o------o-----o---o---o
</code></pre>

<p>Is there a log command to list cherry-pick commits cp1 and cp2 ?</p>

<p>Thanks.</p>
","1","2620348","0","0"
"62807181","1738345","2020-07-09 03:56:39","1","37","<github><cherry-pick>","When can I cherry-pick","<p>I pose this scenario:</p>
<p>I have two branches in the upstream repo:</p>
<p>develop</p>
<p>master</p>
<p>My task is to create two pull requests, one against develop, and one against master.</p>
<p>So i create two branches in my local:</p>
<pre><code>git checkout -b develop-local
git checkout -b master-local
</code></pre>
<p>Now for some reason, I made the (identical) changes in both local repos manually, push to my origin and created pull requests for each.</p>
<p>If I am now required to create another change in develop-local on top of the already-made changes, can I cherry-pick this latest develop-local commit over to master-local?</p>
<p>How does cherry pick determine when cherry-picking is allowed?</p>
","0","1738345","",""
"50897690","2481793","2018-06-17 14:42:40","0","1388","<git><git-cherry-pick>","What does ""git cherry-pick origin/master"" mean?","<p>What does <code>git cherry-pick origin/master</code> mean? How does this instruction work?</p>
<p>When updating current local master branch from remote (i.e., fetch data from remote and merge with local files), we could use the following options:</p>
<ul>
<li><code>git pull origin master</code></li>
<li><code>git fetch origin master; git merge origin/master</code></li>
<li><code>git fetch origin master; git rebase origin/master</code></li>
<li><code>git fetch origin master; git cherry-pick origin/master</code></li>
</ul>
<p>But I cannot understand <code>git cherry-pick origin/master</code> and cannot find the explanation.</p>
<p>I am curious about the following things: when I use <code>git fetch origin master; git cherry-pick origin/master</code> to try to update current local master branch from remote, this action compares previous commits and brings the different parts as modified files, so I can use one commit to includes these modified parts. How does it work?</p>
","1","2481793","",""
"25306597","216867","2014-08-14 11:10:22","28","77395","<git><atlassian-sourcetree><git-cherry-pick>","How to do git cherry-pick --continue in SourceTree?","<p>How do I continue cherry picking using SourceTree after I resolved conflicts?</p>
<p>If I am doing rebase and I get conflicts then after resolving them when I click commit SourceTree lets me continue that rebase. But how to continue cherry pick operation?</p>
","0","216867","0","0"
"25594585","841562","2014-08-31 17:40:36","3","2414","<git><rebase><cherry-pick>","git rebase after git revert","<p>While working on an open source project I encountered the following issue with git. I made a few changes, and sent a pull-request. The PR was accepted at first. However, my changes turned out to have some subtle bugs and the maintainer reverted my commits again, asking me to send a new pull-request once I've fixed the issue. However, a lot of other commits have happened in between, so I need to update my pull-request. Unfortunately, I cannot get git to rebase or cherry-pick my old PR on top of the most recent state of <code>master</code>.</p>

<p>Let me clarify things with an example. Say, my original pull-request had commits <code>A</code>, and <code>B</code> and was accepted. Then, a few commits later my PR was reverted (<code>R</code>), and then a few more commits happened. The history looks like this:</p>

<pre><code>...--A---B--...--R--...--o master
</code></pre>

<p>Now, I want to transform it to the following form, in order to refine my pull-request on top of the most recent state of <code>master</code>:</p>

<pre><code>...--A---B--...--R--...--o master
                          \
                           A---B newPR
</code></pre>

<p>However, I failed to achieve this with both <code>rebase</code>, and <code>cherry-pick</code>. The problem seems to be, that git thinks that <code>A</code>, and <code>B</code> are already part of <code>master</code>, as they are already in the history. So, it doesn't apply these changes on top of <code>master</code>.</p>

<p>How can I force git to do this?</p>
","5","841562","0","0"
"44397519","3838233","2017-06-06 18:40:31","10","5798","<git><cherry-pick><git-cherry-pick>","How to git cherry-pick a commit with binary files","<p>I am trying to cherry-pick a commit from a different branch that is mostly binary files.  It seems it is mostly successful, except for one file where I get the message:</p>

<pre><code>warning: Cannot merge binary files: XXXX.so (HEAD vs. d8ef550... Add support for 32-bit apk)
error: could not apply d8ef550... Add support for 32-bit apk
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>I can do a 'git add' on that file, but the results are not what I was expecting.  I expected it to be a modification, but it turned out to remove that file in question.  The commit I am trying to cherry pick modifies some binary files as well as deletes a few.</p>

<p>So, the question is...what is the best way to cherry-pick a commit w binary files ?</p>
","0","3838233","0","0"
"7802252","475345","2011-10-18 03:57:44","10","1948","<git><cherry-pick>","Why cherry-pick pick change more than one commit?","<p>I have 2 branches here, say branch1 and branch2. There are lots of new feature added in branch1, and the branch2 is stable. Today, I want to merge just 1 feature from branch1 to branch2. So, I just run <code>git cherry-pick &lt;commit-for-feature1-in-branch1</code>. I suppose there should be only the change in <code>&lt;commit-for-featur1-in-branch1</code> will be merged into branch2. But I found there are more changes for other features are included.</p>

<p>I thought it will get the diff just for only that specified commit, right? </p>

<p>FYI, the commit in branch1 was merged from other development branch, does this possibly cause this issue?</p>

<p>Anything wrong I did?</p>

<p>Thanks.</p>
","2","475345","0","0"
"44693768","3301051","2017-06-22 08:12:22","0","56","<git><cherry-pick>","apply changes to other files via git?","<p>I have a git repo with lots of quite similar files (something like config files).
It often happens that I have to do a certain change to all of those files (change a parameter value or add a new parameter).<br><br>
Does anyone know a way of doing this change to only one of the files and then ""cherry pick"" it to the other files with git?<br><br>
I understand that git has the capability of doing this if the files are each in it's own git repo and all have the same name - so I was wondering if there is a (possibly scriptable) way of using this capability for files that have different names but are in the same repo...</p>
","2","3301051","",""
"45076018","90859","2017-07-13 09:01:30","0","5717","<git><version-control><cherry-pick>","Git cherry-pick fail","<p>I have a local brand new branch and I want to cherry pick some commits. A few picks ran OK but the next one produced a conflict:</p>

<pre><code>&gt;git cherry-pick 676b371
error: could not apply 676b371... fixed connection resolution.
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>So I tried to look what's wrong and got this: </p>

<pre><code>&gt;git status
On branch MyBranch
fatal: Could not open file .git/rebase-merge/done for reading: No such file or directory
</code></pre>

<p>What does it mean? My repo is broken? How do I fix that?</p>

<p><strong>Update:</strong>
ran as suggested:</p>

<pre><code>&gt;git cherry-pick --abort

&gt;git status
On branch MyBranch
fatal: Could not open file .git/rebase-merge/done for reading: No such file or directory
</code></pre>

<p><strong>Update2:</strong>
this is a content of .git/rebase-merge folder:</p>

<pre><code>git-rebase-todo
git-rebase-todo.backup
head-name
interactive
onto
orig-head
quiet
</code></pre>

<p>p.s.</p>

<p>git version 2.10.1.windows.1</p>
","7","90859","0","0"
"69765022","13217321","2021-10-29 07:19:23","1","861","<git><merge><rebase><cherry-pick><squash>","Git Rebase from a branch with Squashed merges","<p>So say I have commits my <code>dev</code> branch,</p>
<pre><code>a
b
c
</code></pre>
<p>I do a pull/merge request to the <code>main</code> branch, with squash merge option turned on.</p>
<p>So the <code>main</code> branch now looks like,</p>
<pre><code>merge from 'dev' to 'main'
squash: a, b, c
</code></pre>
<p>But my source branch <code>dev</code> remains to be three seperated commits. And that could be a problem when  I do <code>git rebase main</code> on <code>dev</code> branch, especially when the <code>main</code> branch is stuffed with other developers' squashed merges.</p>
<p><strong>Normally</strong>, I would <code>cherry-pick</code> my ahead commits onto a <code>dev_bak</code> branch. delete my current branch <code>dev</code> and republishes it by doing</p>
<pre><code>git switch [any-branch]
git branch -d dev   // delete dev branch
git checkout -b dev // re-create dev branch
git rebase main     // do rebase
git push --force    // force push to remote to overwrite
</code></pre>
<p>And cherry-picks my ahead commits back onto the <code>dev</code> branch.</p>
<p>So I was wondering if there is a quick way of doing this? Perhaps <code>git rebase --force</code> ?</p>
<p>Thanks!!</p>
","0","13217321","0","0"
"51431435","974380","2018-07-19 20:45:41","1","259","<git><commit><git-cherry-pick>","cannot cherry-pick a commit that needs an edit","<p>I can cherry-pick a commit without issues, however I need to edit the commit message , here is the command I used with error that I get.</p>

<pre><code>$ git cherry-pick 05f8ab05be965ed05c6drtad237a0oi6f607b71c -e ""ticket-548 My cars Module""
fatal: bad revision 'SCOS-818 My cars Module'
</code></pre>
","4","974380","",""
"51437676","3414980","2018-07-20 07:51:28","1","1278","<git><cherry-pick><git-cherry-pick>","GIT cherry pick all my commits that exists in one branch to another branch","<p>I have 2 branches A and B. Branch B was branched from branch A at some time and multiple users are committing to both branches. I want to cherry pick all my commits (that doesn't already exist in branch A) from branch B to branch A without the need to manually search for every single one. 
Is it somehow possible?</p>

<p>Thanks</p>
","4","3414980","",""
"70172074","13974562","2021-11-30 15:41:54","0","144","<linux><git><version-control><release><cherry-pick>","Git diff issue with cherry picked commits","<p>I am seeing an error in our release build process. Need your help/suggestions on it.</p>
<p>In our organization, we follow the release strategy like this:
our codebase has microservices/applications located on individual folders like this format</p>
<pre><code>MS-A
MS-B
MS-C
MS-D
</code></pre>
<p>Our release processes follow this workflow:</p>
<pre><code>branch-1 has made changes on MS-A and merged it to master
branch-2 has made changes on MS-B and merged it to master
from master we create Release branch R1 and did the release process, where only MS-A and MS-B gets deployed
</code></pre>
<p>afterwards similarly,</p>
<pre><code>branch-3 has made changes on MS-C and merged it to master
branch-4 has made changes on MS-D and merged it to master
then from from master we create Release branch R2 and did the release process, where only MS-C and MS-D gets deployed
</code></pre>
<p>During release, we basically do a git diff R2 R1 and calculate which folders got updated, and then start deployment of only those folders(i.e. microservices).</p>
<p>Now when there is any error during deployment - we create a bugfix branch from master(which naturally gets ahead of the release branch HEAD now), push the fixed codes there, merge it to master and then we just cherry pick that commit id on the release branch and redeploy it.</p>
<p>So as a result, we had been seeing an issue occuring - when git diff is calculating the changes on two release branches, it isn't taking into account the cherry-picked ids as a part of the previous release but considering it as a part of the next release branch itself.</p>
<p>a short example using the previously described relese workflow example will easily visualize this error:</p>
<p>Lets say, on R1 release MS-A and MS-B got deployed and there was some issue with MS-A for which we raise a bugfix branch B-1. we push the commits on B1 and merge it to master and cherry-pick those commits onto R1 branch. Then after the release R1 is completed, we made changes on MS-C and MS-D and merged it to master and create new release branch R2.
So if i do git diff R2 R1, i want the output to be MS-C and MS-D only, but here we get MS-A, MS-C and MS-D. Git is not considering cherry picked B-1 commits as a part of R1.</p>
<p>Considering the above scenario and keeping in mind I can't make any changes in the entire release workflow process whatsoever, is there any way to fix this issue?</p>
","8","13974562","",""
"70186978","756290","2021-12-01 15:32:08","1","292","<git><merge><tfs><tfvc><cherry-pick>","TFS/TFVC merge selected changeset vs git cherry-pick between branches","<p>We will be migrating our TFS/TFVC repository to Git.
In TFVC we used to have a trunk based development with long lasting release maintenance branches.
Bug fixes on release branches have to be merged back to the trunk.
Sometimes smaller features have to be carried over from trunk to a release branch.
In TFVC we did this by &quot;merging&quot; individual (or small groups of) changesets from one branch to the other.
The resulting changesets were marked as &quot;merge&quot;, although I don't exactly know what that implies for TFVC, especially considering future merge operations.</p>
<p>So I imagine the branch graph to look something like this:
(Although note that TFVC never displays any graphs)</p>
<pre><code>-A--B--C---D--E--F---    trunk
  \       /    \
   G--H--I--J---K--L-    release-x
</code></pre>
<p>(Here the release branch has been created from A, I-&gt;D is a bugfix merge, E-&gt;K is a feature-forward)
But maybe I'm wrong. In this case could someone explain what a TFVC merge changeset really does?</p>
<p>I've been told that an equivalent way of doing in Git is cherry-picking individual commits.
However, on the resulting branch graphs, I don't see any link between the branches following a cherry-pick commit.
I am aware that cherry-picking is not technically a merge operation and thus history relation between the branches is not carried over.
Is there something I am missing? Is there a better way of carrying over such small commits from one branch to another, yet still retain some merge information?
I DO NOT want to merge the entire branch. As for example changesets B,C or H must remain isolated from each other branch.</p>
","5","756290","",""
"52290661","1288365","2018-09-12 08:23:07","0","197","<git><git-revert><git-cherry-pick>","Move an misplaced commit to a new branch","<p><strong>Setup:</strong>
I have commited a code change to local and also to remote, but in the wrong branch.</p>

<p><strong>My solution:</strong></p>

<ol>
<li>Have checked out master and created a branch where the code change should be </li>
<li>Cherry-picked the commit from the wrong branch checkin and commited to new branch.</li>
<li>Check out the wrong branch. Reset to the first correct commit 
and then force push it again to remove the faulty commit on remote
branch.</li>
</ol>

<p><strong>Question</strong>: Is this the way to go? If I google it, I get that people use revert and I can't understand why as it seems more complicated and more dangerous.. Why should I use revert?</p>
","3","1288365","",""
"48281376","6599478","2018-01-16 12:31:50","1","579","<git><github><git-merge><githooks><cherry-pick>","Git auto merge commits from another repo","<p>I have 2 private <strong>repository</strong> (not branches) <code>A</code> and <code>B</code> of which I have full access to.</p>

<p>Whenever <code>A</code> makes a commit, I want <code>B</code> to <code>cherry-pick</code> or <code>merge</code> the new commit into it (assuming no merge conflicts), so that <code>B</code> will always be up-to-date with the latest changes from <code>A</code>.</p>

<p>How do I accomplish this with Git hook or something else?</p>

<p>A shell script is less flexible as it means you have to commit/push with command line rather than GUI (eg. with <a href=""https://www.sourcetreeapp.com/"" rel=""nofollow noreferrer"">SourceTree</a>).</p>
","4","6599478","",""
"14096244","1934146","2012-12-31 00:41:38","51","52659","<git><github><gerrit><git-cherry-pick>","Why is git-cherrypick saying nothing to commit?","<p>I searched a lot for the below issue but couldn't get any substantial info.</p>
<p>I created a temporary branch 202116 and am trying to do a cherrypick of gerrit 202116 and I get the below message. Why am I not able to cherry-pick this commit and why am I getting this error?</p>
<pre><code>&lt;&gt;git fetch ssh://company@company.com:29418/platform/vendor/company-proprietary/radio refs/changes/25/202116/1 &amp;&amp; git cherry-pick FETCH_HEAD
From ssh://company.com:29418/platform/vendor/company-proprietary/radio
 * branch            refs/changes/25/206025/1 -&gt; FETCH_HEAD
# On branch 202116
# You are currently cherry-picking.
#   (all conflicts fixed: run &quot;git commit&quot;)
#
nothing to commit, working directory clean
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty
</code></pre>
","1","1934146","0","0"
"63273341","3541320","2020-08-05 20:53:59","0","68","<git><github><git-cherry-pick>","git cherry-pick but is a merge","<p>At some point I decide to remove some files/folders from master because it was a unecesary development (at that point), but now I need those files/folders.</p>
<p>So, what I tried was to create a <code>newMaster</code> branch (from <code>master</code>) and to cherry-pick the commit where those files/folders were created and added to the project.</p>
<p>That commit was the &quot;XYZ&quot;</p>
<p>So I tried to do:</p>
<pre><code>user@local ±|newMaster|→ git cherry-pick XYZ
error: commit XYZ is a merge but no -m option was given.
</code></pre>
<p>These are the commits that surround the one that have the files that I need:</p>
<p><a href=""https://i.stack.imgur.com/1ejwA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1ejwA.png"" alt=""enter image description here"" /></a></p>
<p>If I look into the files of the commit <code>433801b</code> the files that I need are not there, they are added in the XYZ but is a Merge.</p>
<p>How can I pick those files of that commit to my newMaster?</p>
","3","3541320","",""
"30770505","284272","2015-06-11 02:23:26","57","55225","<git><git-merge><git-revert><git-cherry-pick><git-merge-conflict>","hint: after resolving the conflicts, mark the corrected paths","<p>git sometimes gives me this message on a conflict (during a revert or cherry pick)</p>

<pre><code>hint: after resolving the conflicts, mark the corrected paths
</code></pre>

<p>What does this mean?</p>
","0","284272","0","0"
"48331653","1159507","2018-01-18 22:56:08","5","6654","<git><cherry-pick><git-cherry-pick>","Cherry pick a range of commits with merge commits","<p>I need to cherry pick a range of commits, but it fails because in this range I have merge of some branches. 
Is it possible to do it without conflicts?</p>
","0","1159507","0","0"
"30789000","3779812","2015-06-11 18:47:16","4","225","<git><github><git-merge><merge-conflict-resolution><git-cherry-pick>","Git - coworker somehow overwrote my entire commit while resolving a conflict","<p>This is what he says he did:</p>

<blockquote>
  <p>There was a merge conflict so I chose mine.</p>
</blockquote>

<p>What I'm seeing is that my changes are totally gone. The commit is there, but if I go on GitHub and click 'history' for the file, there's nothing showing that my changes were ever there. I found the guilty commit but all it says about it is:</p>

<pre><code>Conflicts:
        .../&lt;file&gt;.js
</code></pre>

<p>What I saw that looked fishy is the commit is titled:</p>

<pre><code>Merge remote-tracking branch 'origin/development' into devenv
</code></pre>

<p>But <code>development</code> is our remote branch, so I'm guessing he merged to his local branch, goofed it up, and then accidentally pushed his local branch to <code>development</code>.</p>

<p>Would this cause the behavior I described? Any ideas on a clean way to fix this? </p>

<p>Edit: So it looks like a <code>cherry-pick</code> fixed the problem, I still don't quite get how it got into this state though. I couldn't find any evidence of a force push (Git not Star Wars).</p>
","4","3779812","0","0"
"30793859","195446","2015-06-12 01:11:05","0","48","<git><version-control><commit><rollback><cherry-pick>","Which git feature should I use for breaking big commit (pushed and reversed) into smaller commits?","<p>I use Atlassian SourceTree to work with git repository.</p>

<p>I committed and pushed big commit where desired and undesired changes were mixed.
I rolled it back by committing and pushing Reverse Commit.</p>

<p>Now I want to extract desired changes from that big commit and commit them as smaller commit or may be even sequence of smaller commits.</p>

<p>Which SourceTree or git feature is best for this ?
I guess it would be one of these: Cherry-pick, Patch, Merge or Reverse Commit of Reverse Commit with one of these 3 features.</p>

<p>I looked at <a href=""https://stackoverflow.com/questions/6217156/break-a-previous-commit-into-multiple-commits"">Break a previous commit into multiple commits</a> and <a href=""https://stackoverflow.com/questions/1241720/git-cherry-pick-vs-merge-workflow"">Git Cherry-pick vs Merge Workflow</a>, they are close, but don't directly answer my question.</p>
","0","195446","",""
"63324832","7483447","2020-08-09 09:46:00","0","100","<git><github><gitlab><git-rebase><git-cherry-pick>","do i need to use cherry-pick or rebase?","<p>I have a directory, in that I've two different type of features: <em>feature 1</em> and <em>feature 2</em>.
and I'm working on <em><strong>feature 2</strong></em> so I cloned from a commit from where <em>feature 1</em> is like 50% completed.</p>
<p>Later, I started working on my feature branch and completed development. In this mean time <em>feature 1</em> is also completed. Now I need to get that latest source of <em>feature 1</em> to my branch.</p>
<p>So, using which techniques I can achieve this in git command? cherry-pick or rebase or any other commands?</p>
","3","7483447","",""
"48408925","6433062","2018-01-23 18:57:45","2","313","<git><github><git-log><git-cherry-pick>","Maintaining multiple app versions with Git on GitHub","<p>As a preface, I want to say that <code>git-flow</code> will solve some of these problems. I would prefer to stick to using GitHub PRs to handle both feature and hotfix branches. I also prefer to rebase feature branches. I follow the mantra that every commit should have a full set of passing tests. If you merge a commit upstream, you cannot guarantee that all commits will have passing tests without re-running the tests on every commit.</p>

<p>I have branches PROD and DEV. PROD should always be upstream from DEV. If I have a fix that needs to go to PROD, here's what I would do:</p>

<ul>
<li>branch off of PROD and create a fix -> commit X</li>
<li>merge X into PROD and release a new tag with <code>git tag ...</code> (merge with GitHub PR so that the fix can be reviewed)</li>
<li>branch off of DEV &amp;&amp; git cherry-pick X then PR to DEV (no need to release a new tag here)</li>
</ul>

<p>Now the problem arises with the last step. What if I forget the last step? How can I check to see if X' (the cherry-picked commit) is on DEV? What's the best way to keep PROD and Dev up-to-date, or at least see if they differ with cherry-picks?</p>

<p>I've played around with git log --cherry-pick DEV..PROD, but commit X is still showing up.</p>

<p><a href=""http://gitster.livejournal.com/26540.html"" rel=""nofollow noreferrer"">This article</a> provides a couple good options but I'm trying to solve the scenario where I have to cherry-pick instead of maintaining another branch.</p>
","0","6433062","",""
"49018590","4383917","2018-02-27 21:56:10","0","991","<git><merge><git-cherry-pick>","Merge branch with cherry-picked commit from local branch without any conflict","<p>When I cherry-pick commits from another branch, and then try to merge it. If
more changed have been applied I have merge conflicts.</p>

<p>A good example, is if I have follow the 'gitflow' cliché way of doing git
(master, develop, feature/bugfix, hotfix). Here's the steps:</p>

<ul>
<li>I merge a <code>bugfix</code> into <code>develop</code></li>
<li>I merge some more feature into <code>develop</code></li>
<li>I cherry-pick my old <code>bugfix</code> and apply it as a <code>hotfix</code> onto <code>master</code></li>
<li>If I merge <code>master</code> back into <code>develop</code> I get a merge conflict.</li>
<li>If I checkout my <code>bugfix</code> merge commit, then merge <code>master</code> (thus creating this
""in-between"" merge), and then merge this ""in-between"" merge into <code>develop</code>
everything works without any conflict.</li>
</ul>

<p>Some how git figures out the cherry-pick if no change happen after. But if more
changes were added, it's the end of the world for git.</p>

<p>Here's an ascii schema of my problem C' is the cherry-picked C:</p>

<p>(keys: ✔ = no conflict, ✘ = conflict)</p>

<pre><code>     +--------------------&gt;✘ &lt;--+
     |                          |
     |                          |
     |              ✔&lt;--------+ |
     |              ^         | |
     |              |         +-+--+
     |              |         | M2 +&lt;-----+
     |              |         +-+--+      |
     |              +           ^       +-+-+
     | +-----------&gt;✔&lt;--------+ |       | D |
     | |                      | |       +-+-+
   +-+-++                     +-+--+      ^
   | Ma +&lt;----+         +----&gt;+ M1 +------+
   +-+--+     |         |     +-^--+
     ^      +-+--+    +-+-+     |
     |      | C' |    | C |     |
     |      +-+--+    +-+-+     |
     |        ^         ^       |
     |        |         |       |
     |      +-+--+    +-+-+     |
     |      | B' |    | B |     |
     |      +-+--+    +-+-+     |
     |        ^         ^       |
   +-+--+     |         |       |
   | A  +-----+---------+-------+
   +-+--+     |         |       |
     |        |         |       |
     |        |         |       |
     +        +         +       +

Master     Cherry-   Bugfix     Develop
           Picked
           Hotfix
</code></pre>

<p>Here's my script that create this situation:</p>

<pre><code>git init
echo -e ""foo\nbar\nbaz\nqux\nquux"" &gt; file
git add file
git commit -m ""Initial commit""
git checkout -b develop
git branch second-feature
git checkout -b first-feature
echo -e ""foo1\nbar\nbaz\nqux\nquux"" &gt; file
git commit -m ""First feature"" file
git checkout develop
git merge --no-ff -m ""Merge first feature"" first-feature
git checkout second-feature
echo -e ""foo\nbar\nbaz2\nqux\nquux"" &gt; file
git commit -m ""Second feature"" file
git checkout develop
git merge --no-ff -m ""Merge second feature"" second-feature
git tag before-bugfix
git checkout -b bugfix
echo -e ""foo1\nbar\nbaz2\nqux\nquux1"" &gt; file
git commit -m ""Bugfix (part I)"" file
echo -e ""foo1\nbar\nbaz2\nqux\nquux2"" &gt; file
git commit -m ""Bugfix (part II)"" file
git checkout develop
git merge --no-ff -m ""Merge bugfix"" bugfix
git checkout -b third-feature
echo -e ""foo1\nbar\baz2\nqux\nquux3"" &gt; file
git commit -m ""Third feature"" file
git checkout develop
git merge --no-ff -m ""Third feature"" third-feature
git checkout master
git cherry-pick -x before-bugfix..bugfix
</code></pre>

<p>If I do, I get:</p>

<pre><code>$ git checkout develop
$ git merge --no-ff master
Auto-merging file
CONFLICT (content): Merge conflict in file
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>If I do, I get:</p>

<pre><code>$ git checkout -b new-master bugfix
$ git merge --no-ff -m ""In-between Merge"" master
Merge made by the 'recursive' strategy.
$ git merge --no-ff -m ""Merge master"" new-master
Already up-to-date!
Merge made by the 'recursive' strategy.
</code></pre>

<p>Is there a way to solve this in one merge without any conflict?</p>

<p>I tried different merge startegies but it didn't work. I tried to merge master and
bugfix at the same time into develop, I still get a conflict.</p>
","4","4383917","0","0"
"26339608","1836143","2014-10-13 12:05:00","0","713","<git><range><git-commit><cherry-pick>","How to cherry-pick a range of commits but stop for amending?","<ul>
<li>To pick a single commit: <code>git cherry-pick A</code></li>
<li>To pick a single commit, but stop for ammending: <code>git cherry-pick A -n</code></li>
<li>To pick a range of commits: <code>git cherry-pick A..B</code></li>
</ul>

<p>However, what do I do if I want to pick a range of commits, but amend each commit? This doesn't work:</p>

<pre><code>git cherry-pick A..B -n
</code></pre>

<p>because it stops with all modified files from all commits staged together, so that if I amend and then commit, all changes will be merged into a single commit.</p>
","2","1836143","",""
"14237950","1521043","2013-01-09 14:54:31","1","2704","<git><merge><commit><duplication><cherry-pick>","Git is duplicating code","<p>We just switched from Subversion to Git.</p>

<p>The problem that came up this morning was that we cherry-picked a commit from a branch into master so maser would have a bug fix.  Then we merged master back to the branch.</p>

<p>When we tried to compile, all of the additions from the cherry-picked commit were in the code twice.</p>

<p>The cherry-picked commit consisted of the addition of a couple of lines of code, which ended up afterward being in the code twice.  Luckily they were entire functions so it threw a compiler error.</p>

<p>There was never a conflict raised.</p>

<p>How do we avoid this.  It's a major problem.</p>

<p>Thanks.</p>
","5","1521043","",""
"49134892","2400445","2018-03-06 15:49:33","3","1770","<git><cherry-pick><git-squash>","Cherry Pick a Squashed Commit","<p>I have two main branches, <code>staging</code> and <code>master</code>. I have a few commits and I have pushed those changes to a branch say <code>xyz</code> whose base branch is staging and have created a pull request for <code>staging</code> branch. All these commits has been squashed into a single commit. </p>

<p>Is it possible to cherry pick this squashed commit and apply this cherry pick to a new branch started from <code>master</code>, so that I can create the same pull request to <code>master</code> branch also.</p>
","2","2400445","0","0"
"68424139","14307566","2021-07-17 20:42:56","1","112","<git><git-rebase><git-cherry-pick><git-history-rewrite>","How to move git commits common to multiple branches earlier in the main branch history?","<p>I have a git repo that looks like this:</p>
<pre><code>   /C''-D''-F (featureB)
A-B-C---D---E (main)
   \C'--D'--G (featureA)
</code></pre>
<p>I would like to move the common commits <code>C</code> and <code>D</code> earlier in the <code>main</code> branch
history so that the repo looks like this:</p>
<pre><code>       /F (featureB)
A-B-C-D-E (main)
       \G (featureA)
</code></pre>
<p>It is important to note that the <code>C</code>/<code>C'</code>/<code>C''</code> and <code>D</code>/<code>D'</code>/<code>D''</code> commits modify the code identically, but due to being in different branches, they all have different commit hashes.</p>
","4","14307566","",""
"15220616","520567","2013-03-05 09:49:31","6","4269","<git><github><cherry-pick><git-cherry-pick>","how to git cherry-pick commit declaring our history contains it","<p>I did the following:</p>

<pre><code>git fetch upstream
git cherry-pick xyz
</code></pre>

<p>The picked commit had been applied cleanly except that in one of the files it had exactly the same changes I had already done in a previous commit so these changes were not reapplied.</p>

<p>Everything in terms of code is fine but I'd like to have the commit hash in my history. In my history it appears with a new name. Is this even possible? As far as I'm reading the git merge ""ours"" strategy it seems to be generally possible but how to do it for a single commit?</p>

<p>I want this so it is easier to identify later what commits does <code>upstream</code> has that I don't have. At the moment in github <code>network</code> view I see the cherry-picked commit as being something separate that I don't have.</p>

<p>Additional information:
What @CharlesB says makes sense to me. But how does <code>merge -s ours</code> do the magic then? In this case it was not important for me to <code>cherry-pick</code>. Because the change I wanted to take is only one and at the tip of the <code>upstream/master</code>. So just to try it out I did: <code>git merge -s ours upstream/master</code></p>

<p>Now doing <code>git log --graph --pretty=oneline --abbrev-commit</code> I see something like:</p>

<pre><code>*   9e8108b Merge remote-tracking branch 'mgencur/master' for better github netw
|\  
| * aa7117d Fix displaying watchers/watching for incorrect user // this commit magically appeared after merge -s ours
* | ff05f8c Fix displaying watchers/watching for incorrect user // this is commit from cherry-pick of aa7117d
* | b7ca8ec older commit in my fork
* | &lt;more commits in my fork&gt;
|/  
* 94d6870 Fix obtaining available users for testing purposes
* &lt;older commits of upstream/master&gt;
</code></pre>

<p>The same command <strong>before</strong> <code>git merge -s ours</code> was looking like:</p>

<pre><code>* ff05f8c Fix displaying watchers/watching for incorrect user // this is commit from cherry-pick of aa7117d
* b7ca8ec older commit in my fork
* &lt;more commits in my fork&gt;
* 94d6870 Fix obtaining available users for testing purposes
* &lt;older commits of upstream/master&gt;
</code></pre>

<p>As you can see after cherry-picking of commit aa7117d, there was no indication that aa7117d is already applied to my fork repo. But after a merge it is indicated it is in there although nothing in my files changed.</p>

<p>That makes me think that it is indeed possible to declare a number of commits included in a branch although they are not applied <strong>exactly</strong> as they were applied upstream.</p>

<p>update2: I see question <a href=""https://stackoverflow.com/questions/881092/how-to-merge-a-specific-commit-in-git"">How to merge a specific commit in Git</a> and its best answer. So an explanation why it is not possible or it is not implemented would also be appreciated. </p>
","4","520567","0","0"
"50281260","9773127","2018-05-10 20:45:16","0","815","<git><git-merge><git-cherry-pick>","cherry-pick a merge conflict resolution","<p>When two branches are merged and if there is conflict, after the conflict is resolved and committed, the change of this conflict resolution is recorded in the merge commit, as can be seen by <code>git show</code>. Now I need to cherry-pick just this conflict resolution, not the merge itself (which can be achieved by <code>git cherry-pick -m</code>). Is it possible?</p>

<p>The reason why I need to do this is, besides the diff in this merge commit, I also need to cherry-pick other commits, which depend on the change of this merge commit. If I don't cherry-pick the merge commit first, then subsequent cherry-picks will fail.</p>
","2","9773127","0","0"
"72569628","19164472","2022-06-10 05:53:28","1","33","<git><git-branch><branching-and-merging><cherry-pick>","git mess -- how to unscramble cherry picked branches","<p>I have inherited a repo with five or six branches that are not merged into master, and I have to figure out what is in them.  I have been using SourceTree to get a graphical view of the branching relationships.</p>
<p>Unfortunately, it looks like a LOT of commits have been cherry-picked from branch A to branches B and C, while others from branch C got picked into A, but not B.  And then, of course, a lot of them got cherry picked into master.   So ... there is no clear history or provenance, at least with any tool or log option I know of, and I really have no good way to determine what has made it into the master branch.</p>
<p>The good thing is that the cherry-pick preserves the commit message, and the ones I've spot checked, if the message matches the content of the commit matches.  My current plan of attack involves checking out each branch in turn, oing a git log with the format <strong>--format=&quot;ts=%ci;sha=%h;lbl=%d;c=%s&quot;</strong> into a file named with the branch name.  Then writing a perl script to go through each and every commit message, grep it from all of the branch-named files, to produce a list of the branches that commit appears in.</p>
<p>Unless there is some visualization tool that draws lines between cherry-picked commits in divergent branches?  That would be really helpful right about now.  Maybe a log format code that indicates that <strong>this</strong> commit was cherry-picked from <strong>that</strong> commit, maybe showing the sha of the origin commit.   Heck, just a mark that this was a cherry-picked commit instead of a manual one would help me identify which ones I need to look at!</p>
<p>Does anybody have any other suggestions on how to reconcile the commit histories when so much cherry picking has been going on?</p>
","0","19164472","",""
"54698213","11063998","2019-02-14 20:01:20","1","901","<git><repository><rebase><cherry-pick>","Isolate git changes from one branch to another by specific commit","<p>I've been looking around for a while and different options trying to find an answer but am struggling with how I can accomplish this function. We have a high volume of changes and sometimes certain changes don't get approved in cycles while others do and our group wants to move to an Agile methodology.</p>

<p>We have this current setup in our repository for git:</p>

<pre><code>Master  - C1           
 \         \ 
  \      Release1 - C1
   \        
Develop - C1 - C2 - C3 - C4 - C5 - C6
</code></pre>

<p>We have Develop created from Master at some point in time along with the first Release, all at the same commit level. Develop then gets a continuous flow of commits, some which pass testing and some don't. How can we individually move specific commits from Develop to Release1?</p>

<p>Something like this:</p>

<pre><code>Master  - C1 -   -    -    -    -  Master
 \         \                        /
  \      Release1 - C1 - C3 - C5 - C2 
   \        
Develop - C1 - C2 - C3 - C4 - C5 - C6 - C7 - C8 - C9
</code></pre>

<p>I've tried cherry pick on C3 for example but it brings C2 with it. Any help would be greatly appreciated.</p>

<p>Edit: From the comments here are the steps and the output. I am trying to pick one or two of the commits and always get the same result. Am I doing it wrong?</p>

<pre><code> ~/git/cherrypick_test (Develop)
$ git log
commit 9d296fb748731c9252b55bcb52a14d2638112bd1 (HEAD -&gt; Develop, origin/Develop)
         Change3 123
commit 3e01cdf9d11043fd58e4684742a3f69ee350b037
         Change 125
commit 62ab4c96a767113d22fb2f78d20b6d72587fff86
         Change 124
commit c28ce2ea753611f5f5b559f4f6598b2584f3e2f6
         Change2 123
commit 7763c4ef9c01b7b7c5189d9b9fa2cedaeff62d68
         Change 123
commit 2a60e37761ed3de745e760d5a472fd593c4c9b26 (origin/release/Sprint1, release/Sprint1)

$ git checkout release/Sprint1
Switched to a new branch 'release/Sprint1'
Branch 'release/Sprint1' set up to track remote branch 'release/Sprint1' from 'origin'.

~/git/cherrypick_test (release/Sprint1)
$ git log
commit 2a60e37761ed3de745e760d5a472fd593c4c9b26 (HEAD -&gt; release/Sprint1, origin/release/Sprint1)

~/git/cherrypick_test (release/Sprint1)
$ git cherry-pick 3e01cdf9d11043fd58e4684742a3f69ee350b037 62ab4c96a767113d22fb2f78d20b6d72587fff86
error: could not apply 3e01cdf9d... 
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>I don't understand why there would be conflicts as this is just added code to a single file for demonstration, but after opening up the file from SourceTree I see the following in merge conflict:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
//adding change 123
//second change 123

//change 124

//change 125

&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3e01cdf9d... SG7-125 test cherry picking function
</code></pre>

<p>In this example I should only get 124 and 125 but both 123s come along with them.</p>
","2","11063998","0","0"
"54699939","5170366","2019-02-14 22:19:05","4","551","<git><git-branch><cherry-pick>","A way to create an orphan branch without having to remove files","<p>When I create an orphan branch I have to remove all the files so the branch is completely empty. I want to be able to cherry-pick another commit on to the empty branch, but I get an error saying the file has been modified on one branch, but deleted on the other. I want to avoid having to manually resolve these conflicts, so I can eventually automate this process. Is there a way to automate conflicts to accept the modified versions of files?</p>
","0","5170366","",""
"54726994","11072470","2019-02-16 19:43:49","8","3543","<git><merge><move><rebase><cherry-pick>","Change parent of a commit","<p>I try to move a commit on top of another branch ignoring all changes done in target branch.</p>

<p>Current situation is:</p>

<pre><code>      master
        ↓
--A--B--C
   \
    D--E
</code></pre>

<p>I want to move commit E in front of C</p>

<pre><code>      master
        ↓
--A--B--C--E'
   \
    D--E
</code></pre>

<p>with E' being identical to E except parrent is C now instead of D (this means tree of E and E' should be identical).</p>

<p>To be more precides:</p>

<pre><code>""git cat-file -p E"" shows e.g.
tree b98c9a9f9501ddcfcbe02a9de52964ed7dd76d5a
parent D

""git cat-file -p E'"" should show
tree b98c9a9f9501ddcfcbe02a9de52964ed7dd76d5a
parent C
</code></pre>

<p>I tried rebase with differnt parameters as well as cherry-pick but all of them finally try to merge any changes done in C into the new E' commit :(</p>

<p>Only solution preventing massive merge I found so far is</p>

<pre><code>check out C
copy over all stuff from E to C
commit and get E'
</code></pre>

<p>Now the trees are identical and the parents are differnt but there must be a simpler and much faster way, since all that has to be done is creating a simple commit-object with existing tree-object.</p>
","1","11072470","",""
"54850630","5002986","2019-02-24 09:47:02","2","307","<git><cherry-pick>","What it means ""changes introduced by a commit"" in git","<p>Everywhere I see this: ""...cherry-pick applies changes introduced by a commit...""</p>

<p>I did this: created this file in master:</p>

<pre><code>** File 1 **

Content

** Footer **
</code></pre>

<p>then branched out to branch2 and committed a change:</p>

<pre><code>** File 1 **

Content
Edit 1

** Footer **
</code></pre>

<p>and then another one:</p>

<pre><code>** File 1 **

Content
Edit 2
Edit 1

** Footer **
</code></pre>

<p>Now I went back to master and tried to cherry-pick the latest commit from branch2. I expected that only 'Edit2' will get imported since isn't this a change introduced by that commit, compared to the previous one?</p>

<p>What I got instead is the following merge conflict:</p>

<pre><code>** File 1 **

Content
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
Edit 2
Edit 1
&gt;&gt;&gt;&gt;&gt;&gt;&gt; b634e53...
** Footer **
</code></pre>

<p>Now my obvious question is what is it that I misunderstand about how cherry-pick works, and concretely why there is a merge conflict here, which would be a fast-forward with git merge?</p>

<p>IMPORTANT NOTICE: This is NOT meant as a question about merge conflicts, what I'm interested in is what cherry-pick is actually doing here. And I'm not asking from curiosity/whatever, but because I'm running into troubles using git on my job.</p>
","10","5002986","",""
"8660883","75182","2011-12-28 20:27:53","2","598","<git><git-branch><cherry-pick><transplant>","How to achieve a private branch in git that ""floats"" when merging with upstream?","<p>I have a fork of another organization's repository.  I'm at the the latest tag in the repo, which is not the head, and I've created a branch from that tag which will never be pushed upstream.  That's why I consider the branch private.</p>

<p>I've made commits to my private branch and am using that code in my production environment.  When a new tag is made to the upstream repository, I want to be able to pull their changes.</p>

<p>However, I'd like to always keep my commits in a neat stack on top of their last tag.  I don't want to merge then, since my commits will end up living far back in the history and I want to see them right on top so I can work with them easily when I use certain tools on my repository.</p>

<p>So really, I want a ""floating"" branch, one that I can transplant to an arbitrary point when I bring the upstream changes to my repository.</p>

<p>[edits]
I don't believe I can use rebase, however, since that's a history-rewriting operation.  You see, I use my repository on two machines, my development and production.  I make my commits on the development machine, push to github, then pull to production.  All of this has nothing to do with the changes on the upstream repository that I originally forked from.</p>

<p>I'm not entirely clear on transplanting, cherry-picking or whatever other tool might be suited.  Whichever tool it is though, I gather it shouldn't rewrite history.  From my reading, I see that rewriting repo history is a no-no when pushing .  So I'm not sure what commands I should be using that will transplant a branch without rewriting history.</p>

<p>If I were using mercurial, I might consider something like a version-controlled mq.  I don't know the analogous solution for git, if there is one, or whether there is another, better-suited tool for git.</p>

<p>[edit]</p>

<p>After evaluating the responses I got here, I finally determined that cherry-picking was the right answer.  In all cases, rebase removes history, and since this is a shared repository, removing history is unacceptable, at least according to every source I've read.</p>

<p>Cherry-picking, however, copies the commit to my working tree without removing it from its original location.  So I can plant a copy of my changes on top of the latest tag and have them in a nice neat pile.</p>

<p>For the record, I also tried to do this with Mercurial, by using the hg-git extension which lets you use hg to clone a git repository.  This had pluses and minuses.  The biggest minus was that when I finished using it, it couldn't push.  hg-git works happily until that point, then tells you that it doesn't push with hg 1.9.  Bogus, to say the least.  The other minus was that cloning and pulling a large set of changes is extremely slow.  However, mq and TortoiseHg's merge conflict resolution tools are a vast improvement over git cherry-pick and Smartgit's merge conflict resolution.  I wish hg-git could have worked.</p>

<p>I guess that in the end, ""floating"" wasn't such a good description for my change branch, since the result is to copy it rather than move it.  Sorry for my perhaps poor description, I was still figuring out exactly what the options were.  Thanks for the help.</p>
","3","75182","",""
"45365501","","2017-07-28 05:29:27","0","46","<git><git-cherry-pick><git-am>","Unwanted stuff written in file when cherry-picked","<p>Recently I got to know about <code>cherry-pick</code> command in <code>git</code>, and it turns out to be a useful command. I learnt from the resources on how to use it to cherry-pick contents from other's repo. After I used the command, the contents got cherry-picked from other's repo branch, but alongwith them I also had few lines in different parts of the file,</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD

&gt;&gt;&gt;&gt;&gt;&gt;&gt; 53de559...
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0fa87af
</code></pre>

<p>(Such types of unwanted stuff were present wherever changes were made). I just want to know whether these lines would affect the file or are simply required by the <code>git</code>. If they are not required how do I remove them.</p>

<p>I followed steps that were described <a href=""http://voidcanvas.com/cherry-pick-format-patch/"" rel=""nofollow noreferrer"">here</a></p>
","7","","",""
"63891062","6142855","2020-09-14 19:56:30","1","52","<git><github><fork><git-merge><git-cherry-pick>","How to pick all the changes of a git repo fork F1 from same parent with the other fork F2","<p>Say there is a repo (L), for example, llvm. There are thousands of forks on it. Let's say someone forked from the repo L at commit Cx; let's call the forked repo F1. Over a period of time, features were added to F1 and it is still growing and let's say it is at rev Rx.</p>
<p>Similarly someone else forked the repo L at commit Cy; let us call the forked repo F2. Again this forked repo also grew in time and still growing and let's say it is at rev Ry</p>
<p>Now my question is I would like to have all the changes of Forked Repo F1 till R1 and all the changes of repo F2 till R1 in my own fork from the same parent L.</p>
<p><a href=""https://i.stack.imgur.com/4JXWb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4JXWb.png"" alt=""enter image description here"" /></a></p>
<p>Just to be more clear with my expectations.
Gray box is the Parent repo L. Blue box is a Fork F1 with different commits A1, B1... I1. Similarly Red box is Fork F2 with different commits A2, B2 ..F2.</p>
<p>Now the Green box is Fork which I'm expecting with the changes of fork F1 and F2. It doesn't matter to me where I create the fork from Parent. As long as I get all the changes available in F1 and F2 I'm okay with the expected fork of mine.</p>
<p>Is it possible to do such things in github?
I did try to cherry pick. But there are way too many commits in F1 or in F2. I'm not sure what is the best and easiest way to do a cherry-picking.
Or should I merge the fork F1 with F2 or F2 with F1? Not sure how to do that either.</p>
<p>Thanks in advance for your help and support.</p>
","0","6142855","0","0"
"45729399","8476571","2017-08-17 07:49:49","0","175","<git><cherry-pick>","Git cherry pick a feature consisted of discrete commits","<p>I'm very new to Git, so any excessively detailed explanation is appreciated : )</p>

<p>Say, I have a game application that is released in two countries. Actually I have two code repositories for this application, which have the same architecture but differs more or less on implementation level. Now we sometimes would want the two repositories to exchange code, such as moving the code of a feature to another repository, and I have two questions:</p>

<ol>
<li>What is the best practice for grouping all the commits of a feature (we manage tasks on Atlassian Jira and let's say we can always label all the tasks of a feature there correctly)? I'm thinking of labeling commits and filtering them by Jira issue id, but how exactly?</li>
<li>Once I get the list of all the commits I need, how do I apply them to the other repository, if there are many of them and they are discrete commits.</li>
</ol>

<p>Thanks!</p>
","0","8476571","",""
"64239711","13666856","2020-10-07 07:59:03","1","67","<git><gitlab><git-flow><cherry-pick><git-cherry-pick>","Git Cherry pick creates a diff in target","<p>Context:
I have 2 target branches named R1 and R2 (Release 2).
I did changes using F1.1 and merged it to R1.
R1 was moved to Production.
R2 was created after R1 was released.
In a hurry, instead of creating a new branch, I continued in F1.1 and merged my changes to R2.</p>
<p>Now I want those changes to be tracked using another new branch. I tried to create a new Branch F1.2 and cherry-pick the recent changes in F1.1 into F1.2.</p>
<p>When I raised a pull request with R2 as target and F1.2 as the merging branch, It still showed the changes as a diff. I never reverted the recent changes in R2.</p>
<p>Any ideas what is happening here?</p>
<p>What I expected was, no diff in the R2 branch or maybe a conflict might occur. Neither of these happened. I want to understand this. Someone, please help.</p>
<p>Thanks in advance.</p>
","5","13666856","",""
"64257207","8322066","2020-10-08 06:51:08","1","189","<git><cherry-pick>","How to cherry-pick a HISTORY commit and apply forcedly to current branch","<p>I wan to use a <strong>reverted history</strong> commit.</p>
<p>Let's say this is my commit tree</p>
<p><code>A -&gt; A' -&gt; B -&gt; C -&gt; D</code></p>
<p>I made a commit <code>A</code> and reverted it by <code>A'</code>. Now, I am at <code>D</code> and I want my commit tree to be like</p>
<p><code>A -&gt; A' -&gt; B -&gt; C -&gt; D -&gt; A''</code>, where <code>A''</code> is as same as <code>A</code>.</p>
<p><strong>To summarize, I want to use a history commit.</strong></p>
<p>I cannot simply checkout to <code>A</code> because I hope <code>B, C, D</code> be included.</p>
<p>I tried <code>git cherry-pick</code>, but <code>B, C</code> have conflicts with <code>A</code>.</p>
<p><strong>My question is</strong>: How should I use <code>cherry-pick</code> to transform my commit tree to <code>A -&gt; A' -&gt; B -&gt; C -&gt; D -&gt; A''</code>, without solving conflicts manually? (I tried <code>git cherry-pick -X ours</code> and <code>git cherry-pick cd003861 --strategy-option theirs</code> but failed.)</p>
","7","8322066","0","0"
"64571113","3535449","2020-10-28 10:39:11","0","1623","<git><azure-devops><git-cherry-pick>","Git - diff between branches when using cherrypicking","<p>We are currently using Azure DevOps. We have a repository with multiple branches depending on version, i.e. branch <em>version 1</em>, <em>version 2</em> and <em>version 3</em>.</p>
<p>When a bug is fixed in <em>version 1</em> then we would like to have the same fix in <em>version 2</em> and <em>version 3</em>. But <em>version 1</em> is not a subset of <em>version 2</em> so we cannot use merge command. Same between <em>version 2</em> and <em>version 3</em>. Hence we use cherry-picking for the fix.</p>
<p>There is a risk that a fix is not implemented in all versions. I want to see commits done in <em>version 1</em> but not in <em>version 3</em>. Excluding commits which have been cherry-picked to <em>version 3</em>. Is there a way to diff between branches which also handles cherry-picked commits?</p>
","2","3535449","0","0"
"9997702","546561","2012-04-03 16:41:34","2","121","<git><merge><branching-and-merging><git-merge><cherry-pick>","Are cherry pick merges appropriate in this scheme?","<p>Imagine a git repository that is structured as follows:</p>

<ul>
<li><strong>Main branch</strong> - development for the next major release is done here</li>
<li><strong>Release branches</strong> - development on patches for releases is done here</li>
<li><strong>Hotfix branches</strong> - hotfix branches are branched off from release branches to fix release bugs for patches.</li>
</ul>

<pre>
Main    -------------------------------->
                  \
Release            o--------o
                       \   /
Hotfix                  o--
</pre>

<p>So hotfixes are developed off the Release branch, and in order to bring hotfixes into my Main branch, my previous pattern has been to use cherry pick merges.  Now I'm questioning whether this is appropriate.</p>

<p>Would using regular merge to merge the Hotfix branch into the Main branch be more appropriate here?  Are there any ""gotchas"" in either scenario?</p>
","0","546561","0","0"
"27760257","1952558","2015-01-03 22:33:13","3","773","<git><cherry-pick>","cherry-picking commit - is commit a snapshot or patch?","<p>I have a question related to cherry-picking commits and conflicts.</p>

<p>The 'Pro Git' book <a href=""http://git-scm.com/book/en/v2/Getting-Started-Git-Basics"" rel=""nofollow"">explains</a> that commits are kind of snapshots and not patches/diffs.</p>

<p>But cherry-picking commit may behave as it was a patch.</p>

<hr>

<p>Example below, in short:</p>

<ol>
<li><p>create 3 commits, each time edit first (and single) line of the file</p></li>
<li><p>reset the branch to first commit</p></li>
<li><p>test1 : try to cherry-pick third commit (conflict)</p></li>
<li><p>test 2: try to cherry-pick second commit (OK)</p></li>
</ol>

<hr>

<pre><code>mkdir gitlearn
cd gitlearn

touch file
git init
Initialized empty Git repository in /root/gitlearn/.git/

git add file

#fill file by single 'A'
echo A &gt; file &amp;&amp; cat file
A

git commit file -m A
[master (root-commit) 9d5dd4d] A
 1 file changed, 1 insertion(+)
 create mode 100644 file

#fill file by single 'B'
echo B &gt; file &amp;&amp; cat file
B

git commit file -m B
[master 28ad28f] B
 1 file changed, 1 insertion(+), 1 deletion(-)

#fill file by single 'C'
echo C &gt; file &amp;&amp; cat file
C

git commit file -m C
[master c90c5c8] C
 1 file changed, 1 insertion(+), 1 deletion(-)

git log --oneline
c90c5c8 C
28ad28f B
9d5dd4d A
</code></pre>

<p>test 1</p>

<pre><code>#reset the branch to 9d5dd4d ('A' version)
git reset --hard HEAD~2
HEAD is now at 9d5dd4d A

git log --oneline
9d5dd4d A

#cherry-pick 'C' version over 'A'
git cherry-pick c90c5c8
error: could not apply c90c5c8... C
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'

#the conflict:
cat file
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
A
=======
C
&gt;&gt;&gt;&gt;&gt;&gt;&gt; c90c5c8... C
</code></pre>

<p>test 2</p>

<pre><code>#same for 'B' - succeeds
git reset --hard HEAD
HEAD is now at 9d5dd4d A

git cherry-pick 28ad28f
[master eb27a49] B
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>

<p>Please explain why test 1 failed  (I could imagine the answer if commits were patches, but snapshots?)</p>
","3","1952558","0","0"
"10057634","50676","2012-04-07 19:29:27","13","9232","<git><merge-conflict-resolution><git-cherry-pick>","Cherrypick commit orders ","<p>That might be a naive git question but here it is:</p>

<p>Before doing a pull-request, I usually create a new branch from the latest commits in the upstream and cherry-pick the important commits from my development branch. Then make a pull-request from my new branch to the remote repository.</p>

<p>But I hate the merge-conflicts (although the git mergetool helps a lot when they occur). I suspect that some of those conflicts caused by the order of cherrypicks. I usually cherrypick a set of commits from oldest to newest commit. Is this the correct approach. Or commit order doesn't matter for git? </p>

<p>Is there any other tricks for minimizing the merge conflicts during cherry-picking?</p>
","0","50676","0","0"
"10058068","64257","2012-04-07 20:26:49","38","9536","<git><cherry-pick><git-cherry-pick>","In a Git cherry-pick or rebase merge conflict, how are BASE (aka ""the ancestor""), LOCAL, and REMOTE determined?","<p>In a normal Git merge conflict, the three versions of a file in play for the three-way merge are roughly as follows:</p>

<ul>
<li>LOCAL: the version from my branch</li>
<li>REMOTE: the version from the other branch</li>
<li>BASE: the version from the common ancestor of the two branches (in particular, the common ancestor of my branch's HEAD and the other branch's HEAD)</li>
</ul>

<p>When a Git cherry-pick generates a merge conflict, there is no common ancestor, properly speaking, so how are these things determined? The same could be asked about rebase.</p>
","0","64257","0","0"
"46407960","1823822","2017-09-25 14:41:13","0","1271","<git><git-cherry-pick>","Misunderstanding git cherry pick","<p>I have a doubt in Git. We have been pushing our features to master where most recent commit is c2. Between c1 and c2 there are almost 10 commits. Today due to some issues, we had to create a branch from c1 commit in master that I have done like following:</p>

<pre><code> git branch bugfix c1
</code></pre>

<p>And in this bugfix branch the changes I have done as part of commit c2, has to be present. So I am going to do following:</p>

<pre><code> git checkout bugfix
 git cherry-pick -x c2
</code></pre>

<p>Is it safe? I mean from git perspective is there any way changes in commit from c1+1 to c2-1 may come to bugfix branch, because we don't want any of the changes between c1 and c2 from master come to bugfix branch.</p>
","3","1823822","0","0"
"10579977","1161152","2012-05-14 08:40:59","4","4407","<git><merge><cherry-pick>","Git merge with commit via cherry-pick","<p>following scenario: i have multiple branches (master/preview/release).
i am developing in master, doing periodic commits. let's call them ""experimental"" and ""fixes"".</p>

<p>now i want to merge selected fixes-commits to my preview-branch without the experimantal-commits. </p>

<p>the image should show what i mean. </p>

<p><img src=""https://i.stack.imgur.com/TCx3M.jpg"" alt=""schema of git-repository""></p>

<p>now i tried it with <code>cherry-pick</code> and <code>rebase</code> but i didn't figure out how to manage that.</p>
","4","1161152","",""
"46752601","4047084","2017-10-15 07:11:15","1","265","<git><git-branch><cherry-pick><git-cherry-pick>","Git cherry picking a range","<p>I have two branches that are very different from each other, however one branch contains some useful code that I would like to add to the other branch.  The branches diverged so long ago that i cannot merge them as many of their features are different and a merge is not viable. </p>

<p>The useful code from the donor branch was added in consecutive commits and I have the hashes of the commits I want to cherry-pick. When I give the command <code>git cherry-pick hash1 hash2</code>, I am told <code>nothing to commit, working tree clean. The previous cherry pick ous now empty, possibly due to conflict resolution.</code></p>

<p>Is there a way to run through all the cherry-picks allowing any commits that will produce no change to pass automatically? I would rather not sit here and have to manually continue through each empty cherry-pick.</p>
","0","4047084","0","0"
"70375414","4653906","2021-12-16 07:40:23","-1","362","<git><github><bitbucket><cherry-pick>","Managing GIT Flow when multiple developers are working on the same file","<p>I have been working on a large scale project which is causing conflicts when multiple developers end up working on the same file in the same repo.</p>
<p>Here is an example of the scenario:</p>
<p>Assume there are 2 developers, Foo and Bar. Foo needs to make changes on test.txt with 2 new lines of code. Sometime later Bar also wants to make changes on test.txt with 2 new lines (not the same as Foo's code) - What is the best way to handle this scenario?</p>
<p>Usually, a feature branch is created for every feature and once the branch has been fully tested, it gets merged into a release branch which is deployed into STG and PROD and then merged into master.</p>
<p>An added level of complexity, for some reason, we do not want to go ahead with the change that Foo made, we just want to go ahead with the changes that Bar made. How do we achieve that scenario? In this case, Foo made the commit first and Bar did it later, making cherry-picking difficult.</p>
<p>Assumptions:</p>
<ul>
<li>Both developers are working on the same feature branch.</li>
<li>Foo did the first commit on the feature branch</li>
<li>Bar did the second commit on the same file</li>
</ul>
","4","4653906","",""
"52428196","10309342","2018-09-20 15:06:17","9","700","<git><version-control><git-rebase><git-flow><git-cherry-pick>","Which git workflow to use for both product development and product customization","<p>We have been using <code>git-flow</code> for a while for the development of a software framework. We have the <code>master</code>and <code>development</code> branches in a single repository. </p>

<p>Recently, different customers became interested in buying the framework, which requires a customization of the framework per customer.</p>

<p>So far, we branched a new <code>feature-customerXYZ</code> branch for each customer from the master, did the customization there and kept the branch open, after the customization was finished (which prevents 'infection' of the product <code>master</code>/<code>development</code> branch from the customization). </p>

<p>Parallel to this, the development on the framework itself goes on using the usual git-flow workflow on the product <code>master</code>, <code>development</code>, <code>features</code>, <code>hotfixes</code> and <code>release</code> branches.</p>

<p>There are two common scenarios happening in this context for which I think our workflow cannot handle optimally:</p>

<ol>
<li><p>Development of the <code>feature-customerXYZ</code> branch can contain commits worthy of being implemented in the product <code>master</code>/<code>development</code> branch. Since the <code>feature-customerXYZ</code> branch will never be closed, those commits have to be <code>rebased</code> or <code>cherrypicked</code> to the product branches, which requires extra work after the customization and is error prone.</p></li>
<li><p>Hotfixes discovered while a <code>feature-customer</code> branch is open are handled by <code>git-flow</code> by merging the opened <code>hotfix</code> branches after the fix only to the product <code>master</code> and <code>development</code> branch, but are not merged into open <code>feature-customer</code> branches (to be more precise: they are not merged into all open <code>feature</code> branches).</p></li>
</ol>

<p>Is there a git workflow that can handle this in a concise way? Is there a clever alternative instead of <code>merge</code>, <code>cherrypick</code> or <code>rebase</code> of the commits to the product <code>master</code>/<code>develop</code> or the open <code>feature</code> branches, respectively?</p>
","3","10309342","0","0"
"52440305","8121800","2018-09-21 09:06:30","0","196","<git><branching-and-merging><git-cherry-pick>","Incorrect branch differences in TFS","<p>We see incorrect branch differences in TFS (git repository). We follow a typical scenario between dev and release branch:</p>

<ul>
<li>Create a ""release"" branch from current ""dev"" and deploy it for testing.</li>
<li>Fix a few bugs within ""release"" branch. Each bug is fixed by branching from ""release"" into its own hotfix branch and getting the code back via pull request. To ensure that every hotfix also gets back into ""dev"", we cherry-pick every completed PR from hotfix to ""release"", and PR it again into ""dev"".</li>
<li>Now ""release"" branch state is signed-off by QA as ready for production, and we need to ensure that ""develop"" contains all the changes and nothing is missing. We compare ""release"" and ""develop"" in TFS web, and try to create a PR from ""release"" to ""develop"".</li>
</ul>

<p>Expected behavior: no changes are needed to be pulled from ""release"" to ""develop"" as every single change was already pulled there in its own PR.</p>

<p>Actual behavior: every single hotfix we made into ""release"" displays as code difference between ""release"" and ""develop"" - even though actual code lines are THE SAME.</p>

<p>Questions:</p>

<p>1) Are we doing something wrong here?
2) How can we see the ACTUAL changes pending from ""release"" to ""develop"" due to the hotfixes?</p>
","8","8121800","",""
"70410915","11545271","2021-12-19 11:12:11","0","2693","<git><cherry-pick><git-cherry-pick>","why git cherry pick adds changes not included in the commit (but included in the source branch)","<p>I am trying to cherry pick a commit from <code>src-branch</code> to <code>dst-branch</code>.</p>
<p>for example I have a commit that changes <code>file1.txt</code>:</p>
<p><code>file1.txt</code> in <code>src-branch</code> <strong>before</strong> commit:</p>
<pre><code>hello world!
goodbye world!
</code></pre>
<p><code>file1.txt</code> in <code>src-branch</code> <strong>after</strong> commit:</p>
<pre><code>hello world!
goodbye world!

new changes here!
</code></pre>
<p><code>file1.txt</code> in <code>dst-branch</code> <strong>before</strong> performing <strong>cherry-pick</strong>:</p>
<pre><code>hello world!
</code></pre>
<p><code>file1.txt</code> in <code>dst-branch</code> <strong>after</strong> performing <strong>cherry-pick</strong>:</p>
<pre><code>hello world!
goodbye world!

new changes here!
</code></pre>
<p>But I expect that the file after the cherry pick will look like this (whithout <code>goodbye world!</code>):</p>
<pre><code>hello world!

new changes here!
</code></pre>
<p>because the line <code>goodbye world!</code> was not included in the commit changes, and as far as I know <code>cherry-pick</code> should only apply the changes of the specific commit.</p>
<p>I would like to now why this happends, and how can I prevent it. Thank you.</p>
","4","11545271","",""
"52482473","8622308","2018-09-24 15:17:23","0","52","<git><cherry-pick>","git cherry-pick not applying all modifications of a commit","<p>I have a commit with more than 14 files modified.</p>

<p>When I apply this commit in an other branch, the commit applied doesn't contain all these files but only 3 files.</p>

<p>The commands i'm using are:</p>

<pre><code>git checkout mybranch
git cherry-pick COMMIT_HASH
</code></pre>

<p>Could you please tell me what should I add to be able to get all the modifications?</p>
","3","8622308","",""
"70467992","14260770","2021-12-23 22:29:48","0","148","<git><version-control><cherry-pick>","Git cherry-pick picking all commits","<p>Let's say we have a branch called <code>Master</code> and another branch called <code>Dev</code> which is based on <code>Master</code>.</p>
<p>We have created several branches out of <code>Dev</code> for different features and it all got merged into <code>Dev</code>.</p>
<p>Then we merged <code>Dev</code> into <code>Master</code> , so now they are similar.</p>
<p>Later on , we had a branch <code>featureA</code> out of dev and then we merged it into dev.
Then also we had another branch <code>featureC</code> out of dev and it got merged into dev also.</p>
<p>So now <code>Dev</code> contains <code>featureA</code> &amp; <code>featureC</code> while <code>Master</code> is not</p>
<p>What we want to do is include <strong>only</strong> the changes made on <code>featureC</code> into <code>Master</code>.</p>
<p>So I thought of using <code>cherry-pick</code> on <code>Master</code>. However when I do so , it shows that there's a conflict and when I review it , it actually showing me all the changes made in <code>featureA</code> &amp; <code>featureC</code> on the source(dev) and I can only add them all to target (master)</p>
<p>You can see below pic for demonstration. I made a small example for better understanding , I can only check both of the commits</p>
<p><a href=""https://i.stack.imgur.com/gdff0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gdff0.png"" alt="""" /></a></p>
<p>So now I have to add all the changes (from A &amp; C) , then remove changes that were made in feature A , this is very risky to do , I believe</p>
<p>am I doing something wrong? because I don't see any benefits of using cherry-pick? The main usage of it is to pick a specific commit from one branch into another and that's not the case above.</p>
","2","14260770","",""
"52609071","4614840","2018-10-02 13:12:06","0","3361","<git><cherry-pick>","Git cherry-picking remote commit from upstream, in a branch that isn't master","<p>I have the following situation which is different than <a href=""https://stackoverflow.com/questions/13788945/how-to-cherry-pick-from-a-remote-branch"">this one</a>.</p>
<p>Here's my local repo:</p>
<pre><code>$ git branch
  branch1
  ...
  branchk
  master
* this-branch-where-fix-should-happen
</code></pre>
<p>What I want is to apply a commit that only exists in the <code>upstream:staging</code> branch.</p>
<p>I've tried to fetch upstream in a certain branch</p>
<pre><code>$ git fetch upstream staging:staging

From github.com:&lt;org&gt;/&lt;repo&gt;
 * [new branch]              staging    -&gt; staging
</code></pre>
<p>New output from <code>branch</code>.</p>
<pre><code>$ git branch
  branch1
  ...
  branchk
  master
  staging
* this-branch-where-fix-should-happen
</code></pre>
<p>Now trying to cherry pick into <code>fix-branch</code>:</p>
<pre><code>$ git cherry-pick -x &lt;sha-1&gt;
    fatal: bad object &lt;sha-1&gt;
</code></pre>
<p>Is there a correct way to cherry pick in this situation? Or am I doing it the completely wrong way?</p>
<hr />
<h1>Solution: Finding the problem and fixing it</h1>
<p>As instructed by Tim Biegeleisen</p>
<p>Fetching upstream</p>
<pre><code>$ git fetch upstream
</code></pre>
<p>This is where my mistake was, I was getting the commit number via the github site, however that was actually a <code>&lt;sha-1&gt;</code> for the merge. To get the correct commit number:</p>
<pre><code>$ git log --pretty=oneline --grep=&quot;&lt;some-info-about-the-commit&gt;&quot; upstream/staging
</code></pre>
<p>I've used <code>--grep=&quot;#pull-request-number&quot;</code> and got the correct commit id.</p>
<pre><code>&lt;correct-sha-1&gt; PR description (#PR-number)
</code></pre>
<p>Now trying to cherry pick into <code>fix-branch</code>:</p>
<pre><code>$ git cherry-pick -x &lt;correct-sha-1&gt;
</code></pre>
<p>And it works!</p>
","0","4614840","",""
"52622631","3956027","2018-10-03 08:13:44","1","315","<git><git-rebase><cherry-pick><git-hash>","How to get reference to commits in git","<p>Lets have a git master branch and at some moment lets fork branch for release (release branch will be called R1). Sometimes I need to push commit to both of them(master and R1). Usually I work on master branch, when I'm done I test it, cherry-pick to R1, test it there and push to both of them.</p>

<p>I would like to have in R1 commit reference to master branch. This is done by cherry-pick -x. However, this approach works ONLY when I push to master branch and then cherry-pick from master to R1. Let say that testing take too much time and I want to have master and R1 in sync as much as I can ( I want to minimize time gap between pushes), so I would like to push simultaneously. In this way I can not get reference (-x in cherry-pick), because hash will change while doing rebase in R1 (can not use merge).
Is there any way how to automatize this, so I will have correct hash in R1 description? Something like hash predicting?</p>
","12","3956027","",""
"52656588","80002","2018-10-04 23:59:16","1","163","<git><cherry-pick><git-cherry-pick>","What are the perils of cherry picking in git between two branches A and B if I am never going to merge between them?","<p>I have read the excellent series of posts by Raymond Chen titled <a href=""https://blogs.msdn.microsoft.com/oldnewthing/20180323-01/?p=98325"" rel=""nofollow noreferrer"">Stop cherry-picking, start merging</a></p>

<p>And I totally understand that cherry-picking is evil <strong>if we are going to merge the branches afterwards</strong>.</p>

<p>But suppose I never merge the two branches. Are there any perils of cherry-picking in this case?</p>
","1","80002","0","0"
"52681165","4474522","2018-10-06 16:39:19","6","1934","<git><git-commit><git-cherry-pick><git-workflow><git-worktree>","git compare two branches which contains some common commit with different hash","<p><strong>Context :</strong> 
We are a team of programmer who work on a project with severals branches 
: </p>

<pre><code>Master, Release, Develop
</code></pre>

<p>Sometimes we need to fix a bug on release, and we need to report this fix on develop, to report our bug fix we use : <code>git cherry-pick commit-SHA</code></p>

<p>With this command the bugfix is well reported on develop but the commit has a different hash</p>

<p><strong>What we need :</strong> </p>

<p>Sometimes we need to know the list of commits that has not been reported, to do so, we use the command who compare the two branches and give us the list of commit which exist in release but not in develop :   <code>git log develop..origin/release</code></p>

<p><strong>The ISSUE :</strong> </p>

<p>This command compare the hash of commits, but as i said before, when we report our commits, their hash changes, thus, we get some commits as if they were not been reported while they are</p>

<p>I'm lookin for a way to report our bugfix without changing the hash of commits, or a way to list the difference of commits between two branches, not by the hash but based on the message or another thing</p>

<p>Thanks</p>
","4","4474522","0","0"
"70655291","13122558","2022-01-10 15:57:00","1","190","<git><merge><git-flow><cherry-pick>","How to merge a branch with some sort of ""cherry-pick"" strategy","<p>I have a common git workflow, where you have two main branches: <code>develop</code> (for development) and <code>master</code> (for production). All other branches are created from these two and then merged back.</p>
<p>Normally, when there is a bug on production, I create a branch <code>bugfix-*version*</code> from the <code>master</code>, and than I merge it back into master. But I need to merge it also to <code>develop</code> branch to apply this &quot;patch&quot; to all future development as well.</p>
<p>But there are some differences in the code on production and development branches, mainly related to different environments (DB credentials, some variables, paths, etc).</p>
<ul>
<li>Now to the problem :</li>
</ul>
<p>When I merge <code>bugfix</code> branch (that was created from master) into <code>develop</code> it doesn't take only the diffs that were presented in that branch, but also all that specific branch-related and environment-related information that is different between the branches.</p>
<p>I could use <code>cherry-pick</code> to pick only diffs for each commit, but it would mean to copy every single commit from one branch to another. It's messy and doesn't preserve the clean history of changes.</p>
<p>I could use a <code>post-merge script</code> or somewhat to automatically change the differences between the environments, but it seems too difficult and bug-prone.</p>
<p>Or I could probably <code>merge without committing</code>, then manually correct all values, and afterwards commit... It seems to be such a common task, that I'm sure there must be a way, some sort of merge strategy, or I don't know what, to solve this problem with the power of git without any workarounds! Or maybe I misunderstood some conceptions and I shouldn't really try to merge these branches?</p>
<p>Thank you in advance!</p>
<p><strong>Example</strong></p>
<pre><code>       DEV branch                      |               PROD branch
                                       |
                             Differences between branches
1. $environment_path = &quot;/www/dev&quot;;     |     1. $environment_path = &quot;/www/prod&quot;;
2. $db_name = &quot;some_name&quot;;             |     2. $db_name = &quot;other_name&quot;;
...                                    |     ...
                         The modified lines (new commits)
200-205. &quot;some old lines with a bug&quot;   |     200-205. &quot;bugfix&quot;
...
</code></pre>
<p>So what do I need is to be able to merge modifications from one branch to another without touching those first lines.
&quot;the rest of the script&quot;</p>
","11","13122558","",""
"70660529","1888983","2022-01-11 01:02:37","2","125","<git><shortcut><rebase><cherry-pick>","git shortcut to rebase from another branch onto the current branch","<p>I want to rebase and checkout a branch onto the current branch without checking it out first. This saves time checkout out an old repository state and recompiling the files it touches.</p>
<p>For example, I have this:</p>
<pre><code>A -&gt; B -&gt; C (HEAD -&gt; main)
 \
  D -&gt; E (old)
</code></pre>
<p>I want the following. Basically checking out <code>old</code> and rebasing on top of <code>main</code>.</p>
<pre><code>A -&gt; B -&gt; C (main) -&gt; D -&gt; E (HEAD -&gt; old)
</code></pre>
<p>I would normally run:</p>
<pre><code>git checkout old
git rebase main
</code></pre>
<p>The problem is I was working on the <code>old</code> branch months ago. Checking it out will touch many files. The repository is huge and I'll need to spend hours recompiling if I do that. What I really want to do is the following:</p>
<pre><code># Don't update 'main'
git checkout --detach

# Automatically cherry-picks commits after the common ancestor,
# just like a 'rebase' from that branch would do.
git cherry-pick main..old

# Update the branch ref
git branch -f old HEAD

# Check out the &quot;rebased&quot; branch
git checkout old
</code></pre>
<p>Is there a shorter way of doing this?</p>
","4","1888983","0","0"
"70663044","1072187","2022-01-11 07:29:38","1","176","<git><git-cherry-pick>","how to ""release"" subset of PRs from dev branch to a test branch","<p>devs work against a dev branch, creating feature branches, then merging them back into the dev branch via devops PRs.  Any merged PRs get built and deployed to the dev server immediately.</p>
<p>In this case, the feature branch is a child of the dev branch, and result is merged back into dev branch.</p>
<p>We have a test branch, uat branch, prod branch etc, and each kicks off a different pipeline to build for a specific environment (As Adobe AEM cloud requires you rebuild from source for each env unfortunately).</p>
<p>Currently, we force push whatever is on dev to test, then force push onto UAT etc.</p>
<p>This is bad.</p>
<p>We only want to put some PRs (feature branches) onto test to form our release candidate, which then gets pushed to the other evs as testing progresses.</p>
<p>Presumably the options are</p>
<p>a) cherry pick the PR merge commits.
b) merge?</p>
<p>We seen advice that merge is better than cherry pick, but in this case we would be trying to merge a feature branch with a dev branch parent to the test branch - they are different parents.</p>
<p>A feature branch might consist of say 5 commits, plus an extra commit when it was merged back into the dev branch (assuming squashed).  We don't do rebase. Sometimes the devs squash merge.</p>
<p>If we want to cherry pick, it uses a commit.  If we pick the last commit of the feature branch (5th commit), will this include the changes in commit 1 to 4?    OR do we need to pick the 6th commit, the one where it was merged into dev branch?</p>
<p>Presumably if we use cherry picking, we have the issue that if file A was created in feature branch/PR 1, and modified in feature branch/PR 2, and we try to cherrypick PR2, its going to fail, with no easy solution (other than to also take PR1).  Presumably this is a common issue with creating a release candidate from a bunch of PRs?</p>
","0","1072187","0","0"
"52695530","380490","2018-10-08 04:48:29","0","38","<git><perforce><cherry-pick>","Git merge-edit between branches, compared to Perforce","<p>When I used <strong>Perforce</strong>, I did a compare between branches to see what CL was not merged. I used:</p>

<pre><code>p4 interchanges //depot/branches/$from_branch/... //depot/branches/$to_branch/...
</code></pre>

<p>It recognized it perfectly, even if there was a <strong>merge-edit</strong> (a merge and an edit before submit).</p>

<p>Now I use <strong>Git</strong>, and I use:</p>

<pre><code>git log origin/""$from_branch"" ^origin/""$to_branch"" --no-merges
</code></pre>

<p>We usually do a cherry pick (instead of a merge) between branches. We also do an edit before we commit and push (so it's kind of a <strong>merge-edit</strong>)
The command does not work, because the commits are different...</p>

<p>Any idea how I can still find what commits are missing between branches?</p>
","2","380490","",""
"70675927","3580786","2022-01-12 03:19:50","-1","34","<git><version-control><git-cherry-pick>","Can we do something like chery-remove in GIT","<p>We know we can do cherry-pick which is very useful.</p>
<blockquote>
<p>git cherry-pick &lt;commit-number&gt;</p>
</blockquote>
<p>But can we do something like cherry-remove in Git? Though not, can someone suggest a set of git commands to accomplish similar behavior?</p>
<p>Suppose we already committed a set of commits and at the end of the day, we realize that one of the commits was nonsense.</p>
<p>Note:
Given that, there is no chance of having conflict while reverting the code. Assume the commit is totally not linked with any other code changes.</p>
","2","3580786","",""
"71609509","6549254","2022-03-24 21:16:06","1","1497","<git><github><cherry-pick><git-cherry-pick><git-detached-head>","git cherry-pick says nothing to commit","<p>(note: this is not a duplicate question, see explanation below)</p>
<p>I first checkout master as a detached branch:</p>
<pre><code>% git checkout --detach master
HEAD is now at fff9e1e687 modserver/go: skip Spotlight automod aspect ratio check for cheerio vids
Your branch is up to date with 'origin/master'.
</code></pre>
<p>I then try to cherry pick my branch:</p>
<pre><code>% git cherry-pick my_branch
Already up to date.
HEAD detached at refs/heads/master
You are currently cherry-picking commit 65b12d9d32.
  (all conflicts fixed: run &quot;git cherry-pick --continue&quot;)
  (use &quot;git cherry-pick --skip&quot; to skip this patch)
  (use &quot;git cherry-pick --abort&quot; to cancel the cherry-pick operation)

nothing to commit, working tree clean
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

Otherwise, please use 'git cherry-pick --skip'
</code></pre>
<p>According to <a href=""https://stackoverflow.com/questions/14096244/why-is-git-cherrypick-saying-nothing-to-commit"">this</a> prior StackOverflow post, this suggests that the commit I'm cherry picking contains no new changes. But <code>git diff</code> says that it does:</p>
<pre><code>% git diff 65b12d9d32
diff --git a/ranking/acumen/datawizard/BUILD b/ranking/acumen/datawizard/BUILD
deleted file mode 100644
index 1d61abec2f..0000000000
--- a/ranking/acumen/datawizard/BUILD
+++ /dev/null
@@ -1,13 +0,0 @@
-load(&quot;//tools:go.bzl&quot;, &quot;go_library&quot;)
-
-go_library(
-    name = &quot;go_default_library&quot;,
-    srcs = [
-        &quot;handler.go&quot;,
-    ],
-    visibility = [&quot;//ranking/acumen:__subpackages__&quot;],
-    deps = [
-        &quot;//ranking/logging/log:go_default_library&quot;,
-        &quot;@com_github_valyala_fasthttp//:go_default_library&quot;,
-    ],
-)
diff --git a/ranking/acumen/datawizard/handler.go b/ranking/acumen/datawizard/handler.go
deleted file mode 100644
index 388104cf57..0000000000
--- a/ranking/acumen/datawizard/handler.go
+++ /dev/null
@@ -1,22 +0,0 @@
-package datawizard
</code></pre>
","1","6549254","",""
"71678591","254477","2022-03-30 13:57:20","2","278","<git><git-rebase><git-cherry-pick>","Is there sort of a reverse cherry-pick in Git?","<p><strong>tl;dr:</strong> How can I keep the current last couple of commits on a branch, and replace the history before that with that of another branch?</p>
<hr />
<p>I have a branch where I want to keep the existing last 3 commits but replace the history with that of another branch.</p>
<p>So I have:</p>
<pre><code>        E-F-G   :: my-branch
       /
A-B-C-D   :: main
  \
   B'-C'-D'     :: new-past
</code></pre>
<p>and I want</p>
<pre><code>A-B-C-D         :: main
 \
  B'-C'-D'      :: new-past
         \
          E-F-G :: my-branch
</code></pre>
<p>Currently I am doing this manually</p>
<pre><code>git checkout new-past
git pull
git checkout -b my-branch-temp
git checkout cherry-pick E
git checkout cherry-pick F
git checkout cherry-pick G
git branch -D my-branch
git branch -m my-branch
</code></pre>
<p>So is there some opposite of <code>cherry-pick</code> where you can insert the past commit or something or some flag on <code>merge</code> or <code>rebase</code> that would make this more elegant?</p>
<hr />
<p>PS- The case here is I am on a child branch of another branch that is getting regularly rebased and I'm trying to avoid having merge commits.</p>
<p>PPS- I'd just as soon script the existing process were there not frequent conflicts that need to be resolved</p>
","6","254477","",""
"53689669","4562156","2018-12-09 05:29:39","4","477","<git><git-rebase><git-cherry-pick>","Create a new Git repository from current HEAD, set it as a remote of the original, and mirror future changes to both repositories?","<p>The current repository has commits </p>

<pre><code>  A -&gt; B -&gt; C
            ^
            |
         HEAD
</code></pre>

<p>I want to create a new repository whose master branch begins at commit <code>C</code> (HEAD) of the current repository. </p>

<pre><code>  C
  ^
  |
HEAD
</code></pre>

<p>Additionally, if a new commit <code>D</code> is added to the current repository:</p>

<pre><code>  A -&gt; B -&gt; C -&gt; D
                 ^
                 |
                HEAD
</code></pre>

<p>The new repository will become:</p>

<pre><code>  C -&gt; D
       ^
       |
      HEAD
</code></pre>

<p>On the next push/mirror. </p>

<p>Due to learning to develop software while I committed changes to the project, the repository has gone in size due to large files being added and removed through it's long history (500 commits).</p>

<p>Can this workflow be easily achieved in git? (Using both GitHub and GitLab)</p>
","3","4562156","0","0"
"71758449","989577","2022-04-05 21:11:41","2","1820","<git><rebase><cherry-pick>","The previous cherry-pick is now empty when not cherry-picking","<p>I am trying to drop a list of commits by using <code>git rebase -i HEAD~19</code>. I have successfully used this method in the past, but when I try running and then quitting <code>vim</code> without any changes(<code>:q!</code>) I get this error:</p>
<pre><code>The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

Otherwise, please use 'git cherry-pick --skip'
interactive rebase in progress; onto dd0b851
</code></pre>
<p>I am not cherry picking and not sure why I'm getting an error to skip.</p>
","2","989577","",""
"36882766","1983854","2016-04-27 07:09:28","1","381","<git><git-commit><cherry-pick>","How to cherry pick uncommited changes in some files into a new branch?","<p>Say I have branch  and branch . In  I have been doing several changes in file1, file2. But, also, I ended up doing refactoring on things that were apparently fixed, say in fileA, fileB.</p>

<p>Now I would like to create a different branch that isolates these changes in <code>&lt;my_feature&gt;</code> to have say <code>&lt;my_updates&gt;</code> with commits to just fileA, fileB.</p>

<p>Currently I have changes not staged for commit in file1, file2, fileA and fileB.</p>

<p>I have been reading about <a href=""https://stackoverflow.com/q/16068186""><code>git cherry-pick</code> and <code>git apply</code></a> but it involves things that are already commited.</p>

<p>Now that none of these changes are commited, I don't know if I should be commiting this and cherry picking or if there is a better way to handle.</p>

<p>To make sure the picture is clear, let's make some visual out of it:</p>

<p>I wanted to do:</p>

<pre><code>master ------------------
    \--- my_feature ----/
          file1
          file2
</code></pre>

<p>But now I have</p>

<pre><code>master ------------------
         my_feature ----/
          file1
          file2
          fileA
          fileB
</code></pre>

<p>and I want to merge this (changes in fileA, fileB) before going ahead with <code>&lt;my_feature&gt;</code>:</p>

<pre><code>master ------------------
    \--- my_updates ----/
          fileA
          fileB
</code></pre>

<p>So that <code>&lt;my_feature&gt;</code> will just contain the changes in file1, file2.</p>
","2","1983854","0","0"
"36882772","4516726","2016-04-27 07:09:56","0","60","<git><merge><branch><diff><cherry-pick>","git merge branch - dont want commits before the remote branch base","<p>I have an issue with branching and merging in git. 
We have the following branches (which are our product, and are maintained in parallell as they all are installed and supported at customers)</p>

<pre><code>2015Edition1
2015Edition2
2016Edition1
2016Edition2
master
</code></pre>

<p>We can think of these branches as release branches. 
The problem is as follows. 
<code>2015Edition1</code> is branched and a fix is commited into branch <code>fix1</code>.</p>

<pre><code>2015Edition1
        fix1\-- bugfix
</code></pre>

<p>The fix is merged back into <code>2015Edition1</code> and released.</p>

<pre><code>2015Edition1--------------merge
        fix1\-- bugfix --/
</code></pre>

<p>However, the Branches <code>2015Edition2</code>, <code>2016Edition1</code>, <code>2016Edition2</code>differs quite heavily, due to binary help files, a lot of product dependent images and so on, and changes in sourcecode that is never merged back to master.</p>

<p>Is there any way to merge the <code>fix1</code> branch and only get the commits in <code>fix1</code></p>

<p>The result I want is as follows:</p>

<pre><code>2015Edition1--------------merge--
        fix1\-- bugfix --/
                         \
                ----------merge--
2016Edition2fix/
   2016Edition2 --
</code></pre>

<p>I know i can cherry pick the commits into the other branches. but this is a very simplified example. and i think i lose the ability to track in wich branches the commits are present. </p>

<p>Any comments and suggestions</p>
","2","4516726","0","0"
"36975986","3047113","2016-05-02 06:12:32","40","70343","<git><cherry-pick>","Cherry pick shows no -m option was given error","<p>I have two branch master and development</p>

<p>I need to get some commit id from development branch in master branch so I do it by cherry-pick but it shows me some error</p>

<pre><code>$&gt; git cherry-pick cf0d52b

error: Commit cf0d52b900f990300c3aa17936ddbae1476d461a is a merge but no -m option was given.
fatal: cherry-pick failed
</code></pre>

<p>I am not getting this error, why this error comes and how will I get rid of this.</p>
","1","3047113","0","0"
"28213090","2244240","2015-01-29 11:04:17","0","219","<git><cherry-pick>","Git cherry-pick doesn't work as expected (integrates more than one commit)","<p>I try to understand git cherry-pick command but it seems not to work as expected.</p>

<p>My git tree :</p>

<pre><code>A -- B -- C -- H -- I -- J       MASTER
            \
             D -- E -- F -- G    TEST
</code></pre>

<p>I just want cherry-pick F in master branch, so I did :</p>

<pre><code>git checkout master
git cherry-pick &lt;sha-F&gt;
</code></pre>

<p>The result is Git try to add not only F but also D and E.
Can somebody explain me why ? And what I'm doing wrong ?</p>

<p>Thx for help</p>
","3","2244240","",""
"10632813","476779","2012-05-17 09:14:42","1","133","<xcode><git><merge><branch><cherry-pick>","What relation do two branches have after a git merge (on Xcode)?","<p>Say I had a branch A. I then create branch B, make a bunch of changes and commit. I then merge B into A, but choose to keep the A-version for some parts of some files.
(I'm using Xcode to do these, and am not sure about the git command line equivalents)</p>

<p>What is the relation between A and B at this point, does git know that I didn't merge some of the changes in B? Later on, can I somehow make it merge the changes that I chose to ignore during the first merge of B into A?</p>

<p>(I think what I want is something similar to git cherry-pick, but ""cherry-pick""ing part of one misguidedly large commit)</p>
","0","476779","0","0"
"28564054","1030598","2015-02-17 14:46:36","1","347","<git><hashcode><cherry-pick>","How to retrieve the right commit hash?","<p>I had a <code>master</code> with a few commits, I moved back to the first commit, created a branch from there and used <code>cherry-pick</code> to apply one of the commits from the <code>master</code> branch. But due to some conflicts I got a message like:</p>

<pre><code>Automatic cherry-pick failed.  After resolving the conflicts,
mark the corrected paths with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
and commit the result with: 

    git commit -c some_hash_id
</code></pre>

<p>The problem is, resolving the conflicts took me a while and in the meantime I closed the terminal with the message and now I don't know what commit hash I should use when committing the resolved files. How do I find it out?</p>

<p><em>If I didn't provide enough details, please ask for them in the comments.</em></p>

<p>Edit:</p>

<pre><code>$ git status
# On branch upgrade
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   file1.php
#   new file:   file2.php
#
# Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both modified:      file3.php
#   both modified:      file4.php
#   both modified:      file5.php
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   [long list of files...]
</code></pre>

<p><code>file3.php</code>, <code>file4.php</code> and <code>file5.php</code> are the ones I had to resolve conflicts in.</p>

<pre><code>$ git cherry-pick --continue
error: unknown option `continue'
usage: git cherry-pick [options] &lt;commit-ish&gt;

    -n, --no-commit       don't automatically commit
    -e, --edit            edit the commit message
    -x                    append commit name when cherry-picking
    -r                    no-op (backward compatibility)
    -s, --signoff         add Signed-off-by:
    -m, --mainline &lt;n&gt;    parent number
    --rerere-autoupdate   update the index with reused conflict resolution if possible
    --ff                  allow fast-forward

$ git cherry-pick --abort
error: unknown option `abort'
usage: git cherry-pick [options] &lt;commit-ish&gt;

    -n, --no-commit       don't automatically commit
    -e, --edit            edit the commit message
    -x                    append commit name when cherry-picking
    -r                    no-op (backward compatibility)
    -s, --signoff         add Signed-off-by:
    -m, --mainline &lt;n&gt;    parent number
    --rerere-autoupdate   update the index with reused conflict resolution if possible
    --ff                  allow fast-forward
</code></pre>

<p>But the docs say:</p>

<pre><code>--continue

    Continue the operation in progress using the information in .git/sequencer. Can be used to continue after resolving conflicts in a failed cherry-pick or revert.
</code></pre>

<p>And I don't have such file (I checked) so maybe I can't use these commands now.</p>

<p>I'm using git version 1.7.1.</p>
","7","1030598","0","0"
"47109979","806963","2017-11-04 10:59:28","2","5279","<git><git-rebase><git-cherry-pick>","How git cherry-pick a range of commits?","<p>I saw that there is a connection between <code>rebase</code> and <code>cherry-pick</code> a range of commits.</p>

<p>I have failed to find any article/toturial which explain what exactly happands when one try to <code>cherry-pick</code> multiple commits.</p>

<p>Some questions (which I can think of) are:</p>

<ol>
<li>What <code>CHERRY_PICK_HEAD</code> ref is?</li>
<li>By running <code>git cherry-pick 2^..4</code>, what is the sequence of actions git does and <strong>exactly between which commits git use <code>diff</code></strong>?</li>
</ol>

<p><a href=""https://i.stack.imgur.com/ako3J.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ako3J.jpg"" alt=""enter image description here""></a></p>

<ol start=""3"">
<li>By running <code>git cherry-pick 1..8</code>, what git will do?</li>
</ol>

<p><a href=""https://i.stack.imgur.com/W0ahC.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/W0ahC.jpg"" alt=""enter image description here""></a></p>
","4","806963","0","0"
"28590238","369450","2015-02-18 17:42:23","1","4153","<git><git-cherry-pick>","Git cherry pick commit from branch A to B","<p>I have two branches <em>develop</em> and <em>master</em>. Say <em>master</em> is behind <em>develop</em> by ~20 commits. I want to merge only one of the commits (<em>07f5722</em>) from <em>develop</em> into <em>master</em>. How can I do that?</p>

<p><a href=""https://stackoverflow.com/a/881112/369450"">How to merge a specific commit in git</a> and <a href=""https://stackoverflow.com/a/6372513/369450"">How do I merge a specific commit from one branch into another in Git?</a> both say to use <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-cherry-pick.html"" rel=""nofollow noreferrer""><code>git cherry-pick</code></a> without much of an explanation as to how you should use it. I didn't really follow the examples from the man page either.</p>

<p>I tried doing the following:</p>

<pre><code>git checkout -b merge-07f5722 develop
git cherry-pick 07f5722
</code></pre>

<p>But received this message about the cherry-pick being empty:</p>

<pre><code>On branch merge-07f5722
You are currently cherry-picking commit 07f5722.

nothing to commit, working directory clean
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

If you wish to skip this commit, use:

    git reset

Then ""git cherry-pick --continue"" will resume cherry-picking
the remaining commits.
</code></pre>

<p>The answer to <a href=""https://stackoverflow.com/a/7072029/369450"">git cherry-pick not working</a> indicates that this means the cherry-pick is a no-op with no actual changes. <em>Okay, so how do I get the changes?</em></p>

<p>NOTE: My question is nearly identical to <a href=""https://stackoverflow.com/q/7072013/369450"">git cherry-pick not working</a>. However, I want to know how to accomplish what I intend to do instead of why the command I tried specifically failed.</p>

<hr>

<p>The sequence of commands I had to use was:</p>

<pre><code>git checkout -b merge-07f5722 master
git cherry-pick 07f5722 # commit from develop
git checkout master
git merge merge-07f5722
</code></pre>
","0","369450","",""
"65813880","9024680","2021-01-20 16:48:49","0","713","<git><bitbucket><cherry-pick><git-cherry-pick>","Git cherry-pick command is not working while adding the code from one branch to another","<p>I have 3 branches dev, backup, and release. backup was created from dev, the release was created from backup. Now I have new changes in dev. only one commit should go in the release branch. so I am trying to use cherry-pick from dev to backup and then new PR from backup to release but I am getting errors while doing the same.</p>
<p>I am trying to use cherry-pick from one branch to another but getting the following error</p>
<pre><code>E:\Java\Projects\Test-db\Test_db&gt;git cherry-pick 876c951b5012e4ab87a9be9521
error: Commit 876c951b5012e4ab87a9be9521 is a merge but no -m option was given.
fatal: cherry-pick failed
</code></pre>
<p>Then by looking at this link [https://stackoverflow.com/questions/12626754/git-cherry-pick-syntax-and-merge-branches/12628579] I tried -m with cherrypick command but getting following</p>
<pre><code>E:\Java\Projects\Test-db\Test_db&gt;git cherry-pick -m 1 876c951b5012e4ab87a9be9521
On branch Java-develop-backup-2021-01-20
You are currently cherry-picking commit 876c951.

Untracked files:
        mvn

nothing added to commit but untracked files present
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:

    git commit --allow-empty

Otherwise, please use 'git reset'

E:\Java\Projects\Test-db\Test_db&gt;
</code></pre>
<p>I tried git commit --allow-empty but it is opening following</p>
<pre><code>#
# It looks like you may be committing a cherry-pick.
# If this is not correct, please remove the file
#       .git/CHERRY_PICK_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# Author:    ABC Rokade &lt;ABC.rokade@testcompnay.com&gt;
# Date:      Wed Jan 20 14:49:10 2021 +0000
#
# On branch Java-develop-backup-2021-01-20
# You are currently cherry-picking commit 876c951.
#
# Untracked files:
</code></pre>
<p>I am not sure what needs to do further. Could you please help me to resolve the error while using a simple cherry-pick command?</p>
","6","9024680","",""
"65817103","3323455","2021-01-20 20:24:48","2","2364","<git><merge><rebase><cherry-pick>","get rebase --interactive just shows 'noop' and merges all commits","<p>dev branch is 5 commits ahead of master:</p>
<pre><code>ce30cbd (HEAD -&gt; dev, origin/dev) disabled debugs for libpid
678b1b2 split functionality to libpid and libaccel
6b3f9e2 direct logger test
f5d8841 dev build small changes
2a7c316 Revert &quot;remove Makefile from git&quot;
</code></pre>
<p>none of this commits are merge commits etc.</p>
<p>then do next:</p>
<pre><code>git checkout master
git rebase --interactive dev
</code></pre>
<pre><code>noop
  
# Rebase ce30cbd..e0bf1e6 onto ce30cbd (1 command)
#
...
</code></pre>
<p>I want to select just 3 commits instead of 5 but all of them get merged automatically.<br>
Why it doesn't work and how to handle it?</p>
<p>P.S. I dont want to use cherry-pick as it changes commit hash.</p>
","1","3323455","0","0"
"65830756","184546","2021-01-21 15:38:32","3","2718","<git><git-cherry-pick>","How to skip inexact rename detection with git cherry-pick","<p>I have a about 10 commits I need to cherry pick from an old branch to a current branch on a large repo. Every time I run the cherry-pick command I get the following:</p>
<pre><code>$ git cherry-pick -x 11a77a55bf
Performing inexact rename detection:   0% (438032/938483560)
</code></pre>
<p>I let it complete the first time, which took about about 10-15 minutes. But it does this for every commit I pick. Is there a way to prevent this, at least for the current command?</p>
<p>I tried setting a renameLimit but it didn't help:</p>
<pre><code>git -c diff.renameLimit=1 cherry-pick -x 11a77a55bf
Performing inexact rename detection:   0% (1259342/938483560)
</code></pre>
","1","184546","",""
"65842371","6691017","2021-01-22 09:19:10","1","185","<git><version-control><git-cherry-pick>","Add line to differnent position cause conflict by cherry-pick","<p>My branch structure is:</p>
<pre><code>0x1----&gt;0x2----&gt;0x3
/\              /\
|               |
master          dev
</code></pre>
<p>Common ancestors is 0x1.</p>
<p>I cherry-pick a feature to master.</p>
<p>Scene 1:</p>
<pre><code>Master branch have a.txt file.
0x1 first commit.
a.txt content:
1

Then I create a branch dev, I add &quot;2&quot; to a.txt,
0x2 second commit
0x1 first commit

a.txt content:
1
2

Then I add &quot;3&quot; to a.txt
0x3 third commit
0x2 second commit
0x1 first commit

a.txt content:
3
1
2

I cherry-pick 0x3 to master:
master&gt; git cherry-pick 0x3
</code></pre>
<p>It has no conflict.</p>
<p>Scene 2:
But I modify added position.</p>
<pre><code>0x3 third commit
0x2 second commit
0x1 first commit

a.txt content:
1
2
3
</code></pre>
<p>I apply 0x3 to master. It will have a conflict.</p>
<p>What's the difference between Scene 1 and Scene 2? I'm confused!</p>
","0","6691017","0","0"
"11158359","718180","2012-06-22 14:36:34","24","4482","<git><config><cherry-pick>","git cherry-pick -x default","<p>In the <a href=""https://git-scm.com/docs/git-cherry-pick#Documentation/git-cherry-pick.txt--x"" rel=""noreferrer"">man page for</a> <code>git cherry-pick</code>:</p>
<pre><code>...

-x
    When recording the commit, append a line that says &quot;(cherry picked
    from commit …)&quot; to the original commit message in order to indicate
    which commit this change was cherry-picked from. ...

-r
    It used to be that the command defaulted to do -x described above,
    and -r was to disable it. Now the default is not to do -x so this
    option is a no-op.

...
</code></pre>
<p>Is there a config setting to locally set the default back to <code>-x</code>, and allow <code>-r</code> to disable it?  I couldn't find one, but I may have missed it.</p>
","0","718180","0","0"
"28646873","4568847","2015-02-21 14:26:19","0","134","<android><git><cherry-pick>","Cherry-picking from github: pick only the commit's new code","<p>When I do cherry-pick from github, it usually adds code that is not from the commit, but that I don't have in my files.</p>

<p>Is there any way to tell cherry-pick to only add the code that is new from the commit I want to cherry-pick? </p>
","2","4568847","",""
"11639704","777998","2012-07-24 21:37:26","5","1768","<git><merge><conflict><eol><cherry-pick>","git cherry-pick and merge by ignoring EOL changes","<p>Recently in all of our repos, we added a git attribute file to all our repos. The idea was to force use the Unix EoL chars in all files. This created huge issues first day when you checkout to a new branch, it starts to show changes in the entire file. We simply committed it. </p>

<p>Now, the issue is if we merge from one branch to another (which we do quite often) or cherry-pick (we do more of it) the merge shows conflicts once again in all the files. </p>

<p>It would be ideal if git could ignore line endings or white space changes through a preference. Does anyone know if git contains something like this or if there is a workaround?</p>
","1","777998","0","0"
"66160272","11307635","2021-02-11 18:04:37","-3","51","<git><github><terminal><rebase><cherry-pick>","How can I start a new branch with squashed commits from an open PR?","<p>The problem: I have a PR with a tonne of commits. The branch name is also not accurate. I would like to start a new branch, and continue from the latest commit, without cherry picking each commit. I want all the work to be reduced to 1 commit that reflects its latest state.</p>
<p>I first tried rebasing, but the commits conflict with each other.</p>
<p>I then thought about cherry picking just the latest commit but I'm unsure of the syntax. (yes i read the docs but its not clear to me still).</p>
<p>I have checked out a new branch:</p>
<pre><code>git checkout -b &lt;new-branch&gt;
</code></pre>
<p>then I tried:</p>
<pre><code>git cherry pick &lt;commit-sha&gt; &lt;branch-name&gt;
</code></pre>
<p>The branch I want to 'correct' is an open PR.</p>
<p>This doesn't work as the terminal says &quot;Unknown commit pick&quot;.</p>
<p>Can anyone help me out?</p>
","3","11307635","",""
"11719926","1143032","2012-07-30 10:47:20","1","92","<git><cherry-pick>","which commits got cherry-picked","<p>a basic question probably. I have cherry-picked some commits across branches. Now I would like to get a list of the commits from branch A that got cherry-picked to branch B. Is there a way to do it?</p>
","2","1143032","0","0"
"28989018","4071486","2015-03-11 14:14:56","0","956","<git><git-cherry-pick>","Cherry-picking all commit history of a particular file","<p>Suppose I want to cherry-pick full commit history of a particular file of a repo but the repo has more than one file and the commits are not even i.e 1st commit is to the particular file I wanted to cherry-pick and 2nd and 3rd is to some other and 4th to the particular file and so.. </p>

<p>In this case how can my cherry-pick all the commits in one shot of that particular file excluding the commits that are done to other files..</p>

<p>I know,</p>

<pre><code>$ git cherry-pick abc^..xyz
</code></pre>

<p>the command above wont work as it would cherry-pick the other commits which i wanna exclude also..</p>

<p>So my question is, Is there any way to do my requirement in a single command??</p>
","2","4071486","",""
"11759953","704028","2012-08-01 13:06:32","3","319","<git><cherry-pick>","Are conflicts unavoidable when cherry picking a commit?","<p>I am working on a code and I found my self in a situation similar to one explained on <a href=""http://technosophos.com/content/git-cherry-picking-move-small-code-patches-across-branches"" rel=""nofollow"">this blog</a>. Basically, I have two versions of the code, that use completely different containers. This is done to compare the efficiency of the code when different containers are used. Because I am relying on the efficient container member functions, I cannot make the code generic with respect to containers, so I chose an approach where I have two git branches: one for optimized code and the other for not optimized code. </p>

<p>The problem is that after I have optimized a part of the code, I need to do some <strong>common work</strong> on two, now diverging, branches. Is it possible to do the work on an ""upstream"" (non-optimized) branch and then cherry pick the common commits to the optimized branch without resolving a lot of conflicts? </p>

<p>I have followed the tutorials found online, created a dummy repository with a single file (to test the conflicts) and some branches. </p>

<p>For <a href=""http://dl.dropbox.com/u/3316983/divergingBranch.tgz"" rel=""nofollow"">this git repository example</a>, is it possible to cherry pick say commit ""02 second"" on the branch ""second"" into the master branch without resolving conflicts? I have nothing against conflict resolving, but I am interested if it could be avoided.</p>

<p>What is the correct workflow in this situation? Should I apply changes that are common, commit, cherry pick + resolve conflicts, and that's it?</p>
","0","704028","0","0"
"11777101","1254743","2012-08-02 12:08:17","2","6292","<git><git-rebase><cherry-pick><renaming><git-cherry-pick>","Alternative to git cherry-pick when renamed files are common","<p>I'd like to cherry-pick single commits from on branch to another.
I expect file renames to be quite common but still want to be able to apply changes without human intervention.</p>

<p>Since the built-in cherry-pick command doesn't seam to detect renames (at least in my test cases), especially when combined with modification to the renamed file.</p>

<p>I tried a bit and finally came up with a solution involving two rebase operations.</p>

<p>Let's assume I have a branch named <strong>target</strong> pointing at the commit I want to apply the cherry-pick to.
The commit I want to cherry-pick is pointed to by a branch named <strong>source</strong>.</p>

<p>I then execute the following commands:</p>

<ol>
<li>create branch sourceTemp pointing at the same commit as source (since I want to retain the branch source )</li>
<li><code>git rebase --strategy=""recursive"" --strategy-option=""rename-threshold=30"" target sourceTemp</code> (maybe use another threshold; the test file was quite small and the changes therefore relatively large)</li>
<li><code>git rebase --onto target sourceTemp~ sourceTemp</code></li>
</ol>

<p>This applies only the changes introduced by the last commit in branch <strong>source</strong> to <strong>target</strong>.</p>

<p>I also put my test on github:</p>

<p><a href=""https://github.com/fraschfn/cherry-pick"" rel=""nofollow"">https://github.com/fraschfn/cherry-pick</a></p>

<p>What I like to know is, if this approach is feasible or if it only worked in my simple test setting!</p>

<p><strong>Update</strong>: Alternative method</p>

<p>I rebase the patch to the merge base of <strong>source</strong> and <strong>target</strong>:</p>

<p>start situation</p>

<pre><code>    A - B     &lt;--- target
   /
  M 
   \
    C - D     &lt;--- source
</code></pre>

<p>I want to cherry-pick D onto B.</p>

<ol>
<li><p>rebase D onto M after creating a new branch <strong>patch</strong></p>

<pre><code>  A - B     &lt;--- target
 /
M - D'      &lt;--- patch
 \
  C - D     &lt;--- source
</code></pre></li>
<li><p>merge C and D' to obtain a replacement for source</p>

<p>merge B and D' to obtain the patched version of target</p>

<pre><code>   A - B    &lt;--- target
  /     \
 /      E   &lt;--- patched target
/      / 
M -  D'     &lt;--- patch
 \    \
  \   F     &lt;--- new source (same snapshot as source different history)
   \ /
    C - D   &lt;--- source (will be discarded)
</code></pre></li>
</ol>

<p>The advantage is that E and F can now be merged without a problem.
Alternative way: Include the patch as early as possible in the hierarchy thus not creating D but directly D' and saving yourself the rebase.</p>

<p>The advantage above the previous version is that you can merge the two branches ""new source"" and ""patched target"" and it will work (if the merge of source and target would work of course) and not introduce the same changeset twice since git knows due to the merge operation which introduced the changeset into both branches.</p>
","1","1254743","0","0"
"72692786","4142875","2022-06-20 20:44:15","1","901","<azure-devops><salesforce><cicd><cherry-pick><git-cherry-pick>","Azure DevOps - Cherry-Picking Into master branch","<p>I have a scenario where I will sometimes need to cherry-pick some commits from our UAT branch into our MASTER branch. This is because the business sometimes will request that only specific &quot;features&quot; are moved from UAT to production. I need to be able to pick certain commits to move forward as PR.</p>
<p>The issue I am having is that when try to cherry pick from one the commits (from the UAT branch) to master, Azure DevOps give me the error...</p>
<p>&quot;Encountered conflicts when cherry-picking commit &quot;42af19&quot;. This operation needs to be performed locally.&quot;</p>
<p><a href=""https://i.stack.imgur.com/IZ8Ux.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IZ8Ux.png"" alt=""Screen Shot"" /></a></p>
<p>I am able to do this same pattern against my UAT, QA and Integration branches, I only have this issue against our master branch. I don't have any conflicts in the source branch so I don't believe its that. I also don't have any special rules for the master branch that should keep me from doing a UI based cherry-pick.</p>
<p>I really can't have our developers do this locally so I am hoping for some sort of option where they can use the UI for this.</p>
<p>We are using ADO to host the repo for our Salesforce code. We use another system that handles the CICD pipeline.</p>
<p>The high-level background for this is that we have may have 2 or more PR's that have been promoted and deployed to UAT, but the business may request that we only deploy certain ones. So some PR's might remain open against master for a few dev cycles. The issue is when other PR's move through and we need to promote them from UAT to master, ALL of the changes are getting added to the UAT &gt; MASTER PR due to the fact that the code in the PR's that are in the holding pattern have not been committed to master, so the subsequent PR's would pick up those changes and try to merge them in, and we don't want that.</p>
<p>The thought is that we could cherry-pick commits from UAT as a PR. These only only contain the files we actually want to deploy, not EVERYTHING.</p>
<p>Hopefully someone can help me out with this scenario as I am a little stuck.</p>
<p>Thank you all very much for your guidance!</p>
","2","4142875","",""
"13147373","169947","2012-10-30 20:49:20","0","83","<git><svn><cherry-pick>","Git: find new cherries","<p>I've set up a process, based on <a href=""https://stackoverflow.com/questions/12924001"">Adam Spiers' answer in a previous SO thread</a>, to periodically publish a Git repository to a path in an SVN repository.  Everything is working quite well, but there's one piece I haven't figured out.  When I'm grabbing subsequent Git changes using <code>cherry-pick</code>, how do I figure out which new changes have occurred on this Git side, needing to be cherry-picked into the SVN side?</p>
<p>To be more specific, after I do the initial push of the Git history into SVN, I'm now sitting on a <code>master</code> branch which has the same content &amp; patch history as the Git origin, but it's diverged from <code>origin/master</code> for basically its full history:</p>
<pre><code>% git --no-pager diff master git-svn
% git status
# On branch master
# Your branch and 'origin/master' have diverged,
# and have 3 and 2 different commit(s) each, respectively.
#
nothing to commit (working directory clean)
</code></pre>
<p>Now, I do a fetch of new upstream changes:</p>
<pre><code>% git fetch
remote: Counting objects: 5, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From /cygdrive/c/foo/git/testrep
   6d7dd94..08d3d19  master     -&gt; origin/master
</code></pre>
<p>At this point, I need to figure out which revisions need to be cherry-picked, then I'll cherry-pick them and do a <code>git svn dcommit</code>.  But I can't figure out how to get that list of cherries.  I've tried various <code>git cherry</code> commands, and both <code>git cherry origin master</code> and <code>git cherry master origin</code> report long lists of basically every change on each side.</p>
<p>Should I resort to parsing the last cherry-pick out of the log file?  I'm using <code>git cherry-pick -x</code>, so I do have a record there.</p>
","6","169947","",""
"13170263","243104","2012-11-01 02:50:56","9","3385","<git><merge><branch><pom.xml><cherry-pick>","What's the easiest way to merge all but one change from a branch in Git?","<p>It's kind of like I want to cherry pick all commits from the branch except for one, but I'd like to do that in one command...</p>

<p>• We cut a release, which creates a branch</p>

<p>• The release changes the version number in all our poms, on the branch to one number, and on master to a different number</p>

<p>• I've committed a number of other changes to the branch and want to copy those changes back onto master</p>

<p>• I've merged the branch back into master, which brought the code changes but also the version number changes, creating conflicts in every pom</p>

<p>Is there any easy way for me to revert all the pom files to their pre-merge content and then commit that as the result of the merge?</p>
","2","243104","",""
"55107413","3441194","2019-03-11 17:34:12","3","3510","<api><gitlab><cherry-pick>","MR for cherry picked commit through gitlab api","<p>Is it possible to make MR for cherry picked commit through gitlab API?
In the gitlab's doc there is only oppotunity to make MR from source branch to target branch.</p>
","0","3441194","",""
"13236634","1102141","2012-11-05 16:51:09","3","147","<git><cherry-pick>","How does one add patches from file X on branch1 to file X' on branch2 using Git - cherry-pick?","<p>Esteemed Git users,</p>

<p>These post's appear to answer my question, but either i'm too new to Git to grasp &amp; execute them correctly, or they don't in fact answer my question:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/1526044/partly-cherry-picking-a-commit-with-git"">partly cherry-picking a commit with git</a></li>
<li><a href=""https://stackoverflow.com/questions/5717026/how-to-git-cherry-pick-only-changes-to-certain-files"">How to git-cherry-pick only changes to certain files?</a></li>
<li><a href=""https://stackoverflow.com/questions/3872980/git-best-way-to-add-only-some-parts-of-a-file-from-another-branch"">Git: Best way to add only some parts of a file from another branch?</a></li>
</ul>

<p>As the title indicates, i have a file, X, on branch1 and file X' on branch2. File X' was branched a few commits ago (to both file's X &amp; X') from file X and i also changed the file name (i.e., from X to X'). The file's remain largely the same. What i'm trying to achieve is bring some of the changes made to file X over to X'. The changes are limited to two commits, commit_a and commit_b. Ideally (&amp; optionally) i'd like to invoke my merge tool to manually accept (or not) specific lines of code within each commit_a and commit_b when applying them to X'. Is this possible and if so how? FWIW, I'm only using Git locally; no interaction with other collaborators/repositories. Trying to apply answers from the aforementioned posts, i could not focus only on the files of interest (branch1 X &amp; branch2 X') - Git kept involving other files in the two branches, including files Y and Z (of both branches) as well as X in branch2, but never X' in branch2. I also want to keep branches1 &amp; 2 separate so i don't see how the merge command would work here.</p>

<p>Being new to Git (and version control) i also question if my workflow is some how responsible for failing to achieve my objective here. </p>

<p>Patient exampled answers greatly appreciated!</p>

<p>Karl</p>
","2","1102141","",""
"30198013","3796554","2015-05-12 17:47:23","3","4799","<git><git-cherry-pick>","What are the difference between Cherry-pick and patch apply?","<p>I am aware about git cherry-pick and git apply terminalogies. But today i came across with some issue. I was applying one patch by using the diff of two revisions. I used the below command:</p>
<blockquote>
<p>git diff HEAD  &gt; diff.patch</p>
<p>git apply diff.patch</p>
</blockquote>
<p>I got patch apply failed for one file.</p>
<p>Then i simply tried to <strong>cherry-pick</strong> the commit-id2. It is cherry-picked successfully.</p>
<p>What may be the reason? Anyone wants to throw some light on the same.</p>
","0","3796554","0","0"
"72818085","5253131","2022-06-30 15:05:44","1","212","<git><merge><cherry-pick>","How to merge/cherry-pick a single commit","<p>I've got a project (GitHub-based) with a branch structure like so</p>
<pre><code>master:   A - B - C - D
            \
release:      W - X - M
                    /
bugfix:       Y - Z
</code></pre>
<p>Thus once <code>bugfix</code> is merged, <code>release</code> will have <code>A - W - X - Y - Z - M</code>, where M is the merge commit and <code>Y</code> &amp; <code>Z</code> are the original commits from the <code>bugfix</code> branch. All pretty normal so far.</p>
<p>Now, what I want to do is get <code>M</code> along with <code>Y</code> and <code>Z</code> into <code>master</code>. But here's the caveat - I <em>do not</em> want <code>W</code> or <code>X</code> in master. Why? <code>W</code> and <code>X</code> are commits like &quot;Bump to our hotfix release version&quot; that have no place in <code>master</code>. So in the end, I want <code>master</code> to be <code>A - B - C - D - Y - Z - M</code>.</p>
<p>If I <code>git cherry-pick</code> on <code>M</code>, I just get <code>M</code> and I lose the history of <code>Y</code> and <code>Z</code>. This is what I <em>was</em> doing, but then I lose functionality in <code>git blame</code> in the future, and authors end up getting hidden (since GitHub commits a merge as authored by the person who merged it, not the original submitter).</p>
<p>If I <code>git merge</code> on <code>M</code>, I get the entire branch including <code>W</code> and <code>X</code> that I don't want.</p>
<p>How can this be accomplished?</p>
<hr />
<p>Let me clarify the X to my Y a bit more:</p>
<p>Our project is entirely GitHub based using a fork-and-PR model (as is normal there).</p>
<p>What's before A doesn't matter; our release branch is based on A and then we added W and X to it to make our release (the tag is on X).</p>
<p>So Random Contributor Alice makes a bugfix coming from and targeting our Release branch.</p>
<pre><code>release:      W - X
                    \
bugfix:               Y - Z
</code></pre>
<p>Our team member Bob merges that pull request into our Release branch.</p>
<pre><code>release:      W - X   - - -  M
                    \       /
bugfix:               Y - Z
</code></pre>
<p>And importantly, I, or anyone on the project, can't touch <code>bugfix</code> once it's merged. It's on Alice's fork of the project, and we have this in our Release branch:</p>
<pre><code>A - W - X - Y - Z - M
</code></pre>
<p>And since we made our Release branch, new commits (<code>B</code>, <code>C</code>, <code>D</code>) have been added to our Master branch.</p>
<p>Now, and this is the crux of my question: I want to get the entire history of that Pull Request - the original commits from Alice (<code>Y</code> and <code>Z</code>) and the merge details from Bob (via merge commit <code>M</code>) - into our <code>master</code> branch.</p>
<p>I was quite happy to just cherry-pick the merge, but because of the idosyncracies of how GitHub handles PR merges, that means that all trace of Alice (and her commits) are lost if I do so. This is what we want to avoid.</p>
","7","5253131","",""
"67071972","9914653","2021-04-13 09:13:05","0","94","<git><merge-conflict-resolution><cherry-pick>","Does history diverge in git if I use cherry picks or manually edit files?","<p>I have a development branch called <code>main</code>, a staging branch called <code>staging</code> and production branch called <code>production</code>. I want to push a hotfix to production branch.</p>
<p>First I created a new branch off <code>main</code>:</p>
<pre><code>git checkout main
git checkout -b hotfix
</code></pre>
<p>Then I merged the branch to <code>main</code>:</p>
<pre><code>git checkout main
git merge hotfix
</code></pre>
<p>then merged the branch to <code>staging</code> in order to deploy first to staging environment and check that the branch works:</p>
<pre><code>git checkout staging
git merge hotfix
</code></pre>
<p>Now I want to merge the hotfix branch to <code>production</code> however merging brings a lot of other changes not-related to the hotfix. These other changes were not checked in <code>staging</code> environment yet so I don't want to have them in <code>production</code>. Therefore I decided to just <code>cherry-pick</code> the commits related to the hotfix from the <code>hotfix</code> branch into <code>production</code>. I also had some conflicts when cherry-picking.</p>
<p>I'm wondering though if in the future there will be changes to the regions of code which I cherry-picked in <code>main</code> and <code>staging</code>, will they be reflected in <code>production</code>? I'm afraid that git will not reflect them because of the cherry-pick and conflicts.</p>
<p>Is there a better way to handle hotfixes in git so that the above issues don't occur?</p>
","2","9914653","",""
"55431768","1057485","2019-03-30 13:10:00","10","1793","<git><git-cherry-pick>","What's different between `--abort` and `--quit` as sequencer subcommands for `cherry-pick`?","<p>As per the <a href=""https://git-scm.com/docs/git-cherry-pick#_sequencer_subcommands"" rel=""noreferrer"">doc</a>, among the three sequencer subcommands for <code>cherry-pick</code>, we have these two which are, to me, oddly similar :</p>

<pre><code>--quit
</code></pre>

<blockquote>
  <p>Forget about the current operation in progress. Can be used to clear the sequencer state after a failed cherry-pick or revert.</p>
</blockquote>

<pre><code>--abort
</code></pre>

<blockquote>
  <p>Cancel the operation and return to the pre-sequence state.</p>
</blockquote>

<hr>

<p>So far I've always used <code>--abort</code>, and it works great. What would be a use-case where <code>--quit</code> is different/preferable?</p>
","0","1057485","",""
"72847713","13019451","2022-07-03 15:24:42","-1","604","<git><git-merge><cherry-pick>","How to make git cherry pick use fast forward technique","<p>By using git cherry-pick, I've been trying to specifically merge the last commit from one branch to another. But it always results in a merge conflict, when it actually shouldn't. Following is what I've been doing, and it always results in conflicts.</p>
<ol>
<li>Initiate a new repository, and commit a fresh new file on master branch. The file would have the following content -</li>
</ol>
<pre><code>MASTER - 1st commit
</code></pre>
<ol start=""2"">
<li>Checkout to a new branch called testing, and make the following changes to the file, and commit again.</li>
</ol>
<pre><code>MASTER - 1st commit : TESTING 1st commit
</code></pre>
<p>3.) Make further changes, on the same line of the file and commit again. So at the end, the file contents would look like the following.</p>
<pre><code>MASTER - 1st commit : TESTING 1st commit : TESTING 2nd commit
</code></pre>
<p>Now, this would leave us with 1 commit on master branch, and 2 commits on testing. So if we were to checkout master and do a <code>git merge testing</code>, then since, there's a direct path between the last commit from master and the last commit to testing, therefore, git will use the fast forward technique, and without any merge conflicts, it will directly incorporate changes from testing to master. So my question is why this isn't the case when I try <code>git cherry-pick testing</code> (i.e merging the last commit from testing to master, which in turn has a direct path to it). If I'm being wrong here, then please suggest, what would be the correct way to do this.</p>
","6","13019451","",""
"55465993","9351683","2019-04-02 02:13:26","-1","929","<git><jenkins><github><git-cherry-pick>","cherry pick changes from one branch to other branch","<p>Imagine I have 2 branches( Feature and Master). If I merge code to Feature branch, is there a way to automatically update those changes in master branch. I know we have cherry picking to do manual updates but I wanted to know if we have a way to automate this process. Please let me know your suggestions.
Thanks in advance!</p>
","1","9351683","",""
"72878253","12347371","2022-07-06 05:18:41","1","619","<git><gerrit><git-rebase><git-pull><git-cherry-pick>","How to update the cherry picked commit on gerrit?","<p>I made a commit <code>A</code> to a branch. It's not merged yet. My friend cherry picked my commit and made a new commit <code>B</code>. Now they form a relation chain right? So, If I amend my commit <code>A</code>, What is the best way to get my new changes in my friend's branch?</p>
<p>PS: On amending the commit, the commit hash will change and create a new patchset.</p>
","1","12347371","",""
"72993916","11239008","2022-07-15 12:20:07","-1","105","<git><git-cherry-pick>","git cherry-pick commit across linted code","<p>We recently linted out entire codebase. Yay! But now we're struggling to forward port patches across the linted commit. For example we have branches V1 and V2. V2 was created by linting V1 at some point in time. Now we want to cherry-pick a commit from V1 (orange) onto the head of V2. I'm struggling to get the commit to cherry-pick cleanly without a ton of conflicts. Any suggestions?</p>
<p><a href=""https://i.stack.imgur.com/Td2C3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Td2C3.png"" alt=""enter image description here"" /></a></p>
<p>Edit:
This is what I've tried</p>
<pre><code>git checkout orange
Apply lint
git commit --amend --no-edit
</code></pre>
<p>At this point I have a orange'
So far I've tried</p>
<pre><code>git rebase HEAD~ --onto origin/V2
AND
git checkout origin/V2
git cherry-pick orange'


</code></pre>
","4","11239008","",""
"55902339","865168","2019-04-29 11:24:06","3","661","<git><cherry-pick>","Why is git cherry-pick conflict including changes from a previous commit","<p>I have a staging branch where I made some commits for a feature, I need to make these commits from a master branch instead. I tried to checkout a branch from master branch using 
<code>git checkout -b branch_name</code>, then took the first commit that I wanted to cherry-pick from the staging branch with 
<code>git cherry-pick hash</code>. For some reason there is a conflict with the cherry pick but the conflict includes changes from a commit previous to the one that was cherry-picked, why is that?</p>
","0","865168","",""
"73031887","6429008","2022-07-19 06:06:34","2","195","<git><git-revert><git-cherry-pick>","Reverting multiple commits in the middle of master","<p><code>G1-B1-G2-G3-G4-G5-G6-G7-B2-G8-G9</code></p>
<p>I have above commit already in <code>master</code>.</p>
<p>What's the best way to revert <strong>B1</strong> and <strong>B2</strong> from above commit?<br />
And re-pushed to <code>master</code>.</p>
<p>Reset and cherry-pick seems quite a bit of jobs.<br />
Just want to find a better and simple option to do this.</p>
","3","6429008","0","0"
"73111052","1714692","2022-07-25 14:38:22","0","41","<git><cherry-pick><git-cherry-pick>","Git: how take modifications introduced by a bunch of commits into the branch without committing?","<p>I have a range of commits of another whose modifications I would like to import in my current branch without creating the commit.</p>
<p>I have seen that the <code>cherry-pick</code> command has the option <code>-n</code> to avoid commits. However, when conflicts arise, I do not know how to solve them since with cherry-pick normally one does <code>git add</code> and then <code>git commit -c &lt;hash&gt;</code>.</p>
<p>Is there a way to import the modifications introduced by these commits into the current branch without committing?</p>
<p>I was thinking about creating a patch somehow but I do not know if that's even possible.</p>
","1","1714692","",""
"73167148","18644471","2022-07-29 12:58:03","0","18","<git><merge><cherry-pick><git-cherry-pick>","How does git know how to ""apply a change"" when doing cherry pick?","<p>Let's say we want to cherry-pick commit A to HEAD. For each file f changed in A, if there are no other changes between A and HEAD, then it's easy to apply the change, just replace the file at HEAD with the file changed by commit A. But if there are other changes between HEAD and A, which means the change of f in A is based on another commit A^, not HEAD, it changes f from A^ to A, not from HEAD to A, then how does Git know how to apply this &quot;impending&quot; change to the HEAD?</p>
","1","18644471","",""
"73179539","19348492","2022-07-30 22:45:03","-2","65","<git><cherry-pick>","Official documentation describing the base used in the cherry-pick command","<p>This <a href=""https://stackoverflow.com/a/53974633/19348492"">answer</a> to a previous question on StackOverflow suggests the <em>base</em> used for the cherry-pick command is the parent of the commit to be cherry-picked. It makes a lot of sense to me, but I wanted to possibly verify it using the official documentation from git developers. Does anyone know where I can find the official documentation?</p>
","16","19348492","",""
"56118047","2092842","2019-05-13 18:34:28","1","96","<git><git-rebase><git-cherry-pick>","Can I represent a ""git rebase"" as a series of cherry-picks?","<p>It seems that ""git rebase"" has additional fallback logic to deal with merge failures:</p>

<pre><code>Falling back to patching base and 3-way merge...
</code></pre>

<p>What is it doing there, and how would I need to invoke my cherry-picks to get the same behavior?</p>

<p>Probably the right solution is to just not attempt to represent a rebase as a series of cherry-picks, but it would be nice if this were possible, since I can then deal with both rebases and arbitrary collections of changes using the same flow.</p>
","2","2092842","",""
"56138275","3078043","2019-05-14 20:38:37","1","263","<git><git-merge><git-commit><git-cherry-pick>","merging branch into master after a previous commit merged master then reverted it","<p>to provide some more context around what I'm trying to fix. a few developers were working in the same branch. at some point, one tried to merge master into the child branch, something went wrong (couldn't build project, etc. not 100% sure) but then immediately reverted the master merge commit. the child branch is now ""complete"" and ready for a pull request and now it won't merge cleanly into master. several of the <code>git</code> errors state something similar to the following?</p>

<p><code>CONFLICT (modify/delete): someFileName.cs deleted in HEAD and modified in master</code></p>

<p>we've tried the following</p>

<pre><code>(1)
- checked out/pulled latest master
- created a new branch
- cherry picked all relevant commits going forward

(2)
- performed a git reset to earliest commit
- cherry picked all relevant commits going forward
</code></pre>

<p>all result in the same type of error mentioned above when attempting to merge back into master.</p>

<p>what is the best way to fix this branch to get it to merge cleanly back into master?</p>
","1","3078043","0","0"
"73264522","19708935","2022-08-07 02:33:47","0","40","<git><github><pull-request><cherry-pick>","Handling pull-requests across parallel forks sharing a parent","<p>I have the following situation (<code>repo</code> had no activity in the last year):</p>
<pre><code> repo _
       |
       |_ Fork_1
       |_ Fork_2 ... commit_4 ... commit_5 ... commit_6
       |    
       |_ Fork_my ... commit_12 ... commit_13...

</code></pre>
<p>I'd like to get <code>commit_4</code> and <code>commit_6</code> from <code>Fork_2</code> into my fork (<code>Fork_my</code>). What I've done previously, but I feel is not the right approach:</p>
<ol>
<li>Create a branch from <code>Fork_my:main</code> (my repo:branch name) e.g.: <code>new_merge</code></li>
<li>Create a pull request  <code>new_merge</code> &lt;- <code>Fork_2</code></li>
<li>Resolve conflicts in Github desktop</li>
<li>Create a new branch with resolved conflicts e.g.: <code>new_merge_final</code></li>
<li>Pull request <code>Fork_my:main</code> &lt;- <code>new_merge_final</code> (or swap <code>new_merge_final</code> for <code>main</code> and rename)</li>
</ol>
<p>I'm looking into <code>cherry-pick</code>-ing but still unsure of the workflow.</p>
","0","19708935","",""
"73280909","19719660","2022-08-08 16:03:49","0","379","<git><cherry-pick><git-cherry-pick>","In git, why do I have a conflict when cherry picking only latest commit of binary file?","<p><strong>Setup:</strong> I have a main branch where a binary file has been modified multiple times. Every commit that changed the binary file only had that one file in the commit (no other files were changed in any of those commits). I am using SourceTree GUI for all of my git commands.</p>
<p><strong>Problem:</strong> I want to cherry pick that binary file into the release branch. Since binary files are checked in as single blocks, I thought I could just cherry pick the final commit that changed the file into the release branch. But that causes a conflict. If, on the other hand, I start at the earliest commit that changed the file and cherry pick them over one-by-one, there is no conflict.</p>
<p><strong>Question:</strong> Why can't I just cherry pick the last commit without getting conflicts? What exactly is conflicted? Is there a better way to do this cherry picking without having to find all the commits that touched that file?</p>
","3","19719660","",""
"74626049","5506301","2022-11-30 10:15:10","0","56","<git><merge><branch><cherry-pick>","Merge all commits from a branch to another","<p>At some point in our project we started a new development environment in which, in order to run properly, we were forced to make many changes in our code. Those changes are in a branch named &quot;dev-test&quot; that was created from &quot;master&quot;.</p>
<p>This environment (that started as a test) is actually becoming our development environment, so when a new feature has to be done, our flux would be:</p>
<ul>
<li>create a new branch from &quot;dev-test&quot; (let's call it &quot;feat1&quot;)</li>
<li>develop and test in local</li>
<li>merge to &quot;dev-test&quot;</li>
<li>test it in &quot;dev-test&quot; environment</li>
<li>if everything is OK -&gt; merge to &quot;master&quot; (and eventually deploy to production)</li>
</ul>
<p>Well, this last step is actually the problem. How could we get the changes from &quot;feat1&quot; without getting the changes from &quot;dev-test&quot;?</p>
<p>A small graphic to clarify:</p>
<pre><code>                 f1---f2             feat1
                 /      \       
      d1--(dn)--d2--d3--d4--(...)    dev
     /     
m1--m2--m3--m4--m5--m6--m7           master
</code></pre>
<p>What we want would be to add commits &quot;f1&quot; and &quot;f2&quot; to branch &quot;master&quot; (after &quot;m7&quot;).
If we just merge &quot;feat1&quot; to &quot;master&quot; we will have all &quot;dn&quot; commits on master (what we don't want).
We can always cherry-pick &quot;f1&quot; and &quot;f2&quot; from &quot;feat1&quot; to &quot;master&quot; but I'm afraid that in more complex cases we can miss some commits or messed up with merges.</p>
<p>There are any good solutions for this problem? Something like &quot;merge all commits from A branch to B branch&quot;?</p>
","1","5506301","",""
"57336084","2784544","2019-08-03 06:40:13","1","161","<git><git-merge><git-rebase><git-cherry-pick><git-merge-conflict>","Interesting git rebase scenario with two branches","<p>I was working with two git branches.</p>

<pre><code>a -- b -- c                  &lt;-- master
           \
            d                &lt;-- newbranch
</code></pre>

<p>After reaching <code>commit d</code>, I realized I need to change <code>commit c</code> a little bit. I went into master branch and amended <code>commit c</code>. Now, <code>commit c</code> became <code>commit e</code>. <code>c and e</code> has the same commit message.</p>

<pre><code>a -- b -- e                  &lt;-- master
      \     
       c -- d                &lt;-- newbranch
</code></pre>

<p>So, now my <code>commit c</code> is useless. Now <code>commit c</code> and <code>commit e</code> are conflicting in few files and in all the files they are conflicting I will prefer the changes of <code>commit e</code> to stay. Also, <code>commit d</code> has important changes that I don't wanna lose.</p>

<p>I want my final structure to be something like this. </p>

<pre><code>a -- b -- e -- f             &lt;-- master
</code></pre>

<p>where <code>commit f</code> is the amended version of <code>commit d</code>, having the same commit message.</p>

<p>I tried rebasing the master into newbranch first and was thinking of rebasing the newbranch into master later on. But as there lots of conflicts and after manually solving the conflicts I lost my way and became clueless and then lost all the manual correction and need to start rebase again.</p>

<p>If someone please guide me about the exact procedure to follow in my approach or have a better solution please share. Thank you.</p>
","3","2784544","0","0"
"74645378","7107078","2022-12-01 16:47:01","-1","170","<git><github><cherry-pick><git-cherry-pick><git-cherry>","GIT Cherry–Picking Commits Out Of Order","<p>I have 1 file</p>
<p>I modify code on one part of the file and do commit A</p>
<p>I modify code on another part of the file and do commit B</p>
<p><strong>If I cherry–pick Commit B from source to release first, and then Commit A at a later late, will the changes from Commit B be deleted after Commit A overrides it, or will changes from Commit A be merged into the file with changes from Commit B and both changes will stay?</strong></p>
","0","7107078","",""
"74646390","10608469","2022-12-01 18:10:49","0","43","<git><git-merge><git-cherry-pick>","Using GIT to migrate between dev, preproduction, and production","<p>What I think I am supposed to do is create a feature branch, then when it is ready I merge it into the development branch then push it to the centralized repository. Then once approved I merge it into preproduction. How do I keep the files from the feature branch together to merge them from development into preproduction and then merge them again to production.
What I really don't understand is how to know which files were from that no longer existing feature branch.</p>
","6","10608469","",""
"74704949","3054099","2022-12-06 15:21:20","4","206","<git><git-branch><cherry-pick>","Check if a commit in a branch was cherry-picked into master","<p>Let's suppose that we have two branches: <code>master</code> and <code>feature_branch</code>.</p>
<p>Is there a possibility to check if each commit to the <code>feature_branch</code> was cherry-picked into <code>master</code>?</p>
","1","3054099","",""
"57409062","4095859","2019-08-08 09:13:09","3","660","<git><merge><cherry-pick>","Git: Can I ""cherry-pick"" a merge conflict resolution when the exact same conflict occurs again?","<p>When I pull master into a branch, it may succeed, or it may conflict, depending on activity on both branches since they separated.</p>

<p>When it conflicts, I will go through and manually resolve the conflict, eg using git mergetool, and then I'll commit the merge (eg git commit -m ""Merge in latest master""). That gives a commit, merging two different commits which conflicted. I've got this so far. However this can be a lot of work to resolve that.</p>

<p>Shortly after on another feature branch, pulling master into that feature branch, I'll get the exact same conflict. Exact same files, exact same changes on both branches. How can I re-use the effort expanded to merge those two commits again?</p>

<p>Eg, I'd like a ""git apply-existing-merge"" option, as used below:</p>

<pre><code>git checkout JOB-12345
git pull origin master
CONFLICT (content): file1
CONFLICT (content): file2
CONFLICT (content): file3
(does much work to fix it)
git commit -m ""Massive complex merge of upstream code""
[JOB-12345 93697088ad0] Massive complex merge of upstream code

... Later that day

git checkout JOB-12346
git pull origin master
CONFLICT (content): file1
CONFLICT (content): file2
CONFLICT (content): file3
git apply-existing-merge 93697088ad0
[JOB-12346 93697088ad0] Merge in the latest upstream changes.
</code></pre>

<p>Attempting to graph it</p>

<pre><code>Master   :   X-----1--X----X
              \        \    \
Feature 1:     X-2-X-4--X-A  \
                    \         \
Feature 2:           X-3-------X-B
</code></pre>

<p>1 and 2 conflict. So pulling 1 into (2,4) creates the exact same conflict that pulling 1 into (2, 3)</p>

<p>How can I merge 1 and 2 in such a way that I can do it once, but apply it twice. (And without corrupting the feature branches, I need to ensure A only contains (1, 2, 4), and B only contains (1, 2, 3)?</p>

<p>I've tried messing around with cherry-pick and creating and applying patches, however I can't get anythiing working. I expect it must be possible.</p>
","2","4095859","0","0"
"57429091","11907177","2019-08-09 11:28:26","-6","66","<git><git-cherry-pick>","Who can help me in fixing the cherry-pick Git error?","<pre><code>fiqri@fiqri-X441UA:~/android_kernel_xiaomi_vince-4.9$ git cherry-pick 89a3491a2092de1d672644b273fcdfea46604319
error: commit 89a3491a2092de1d672644b273fcdfea46604319 is a merge but no -m option was given.
fatal: cherry-pick failed
</code></pre>
","3","11907177","",""
"74793038","20306881","2022-12-14 02:40:26","0","42","<git><repository><branch><commit><cherry-pick>","How to bring commits form another repository branch","<p>So I want to bring only commits from another repository branch to my local branch. How can I do that or can i do that using cherry-pick?</p>
<p>So i tried merging two branches but it brought unrelated histories as well</p>
","1","20306881","",""
"74942288","893159","2022-12-28 15:51:45","0","98","<git><github><cherry-pick>","Is it possible to cherry-pick a git commit without changing it?","<p>Situation:</p>
<ul>
<li>I have a repository with commits up to <code>1234</code></li>
<li>Someone forks it and adds a commit <code>abcd</code> and sends a PR</li>
<li>I like to rebase it instead of merge the branch as the branches are not diverged</li>
<li>I <code>git cherry-pick</code> the commit, but the new commit is now <code>wxyz</code> as git adds <code>Committer</code> and <code>CommitDate</code> fields and probably some other metadata</li>
</ul>
<p>My current workaround is to manually <code>git fetch</code> their repo and then <code>git reset --hard</code> onto commit <code>abcd</code>. Afterward I can push my branch to my repo.</p>
<p>It would be especially nice, if I could update the branch from a GitHub PR without resorting to manually fetching and pushing just to add a single commit from a GitHub PR to my repo.</p>
","7","893159","",""
"75101517","14920366","2023-01-12 19:41:54","0","27","<git><azure-devops><branching-and-merging><cherry-pick>","GIT Behind/Ahead Counter as a way to track deployed features","<p>I am working on a project, and we have many people working on it. We have 2 branches:</p>
<ul>
<li>main</li>
<li>develop</li>
</ul>
<p>When someone gets a task, they make a new branch for their task derived from develop and once they finish it it is approved via pull request to the develop branch using <strong>squash commit</strong>. This is important as feature might be worked on over few days and it can consist of many commits that we aren't particularly interested in. Once tested, the feature is approved to be transfered to the main branch.</p>
<p>We transfer the feature using cherry picking. This is why to us it is useful to have squash commit, because 1 feature becomes 1 commit that we cherry pick to main.</p>
<p>Suppose we have 5 new features on develop branch, all merged using squash commit.
When compared, <strong>behind counter is 0 and ahead counter is 5 compared to the main branch</strong>.
Perfectly logical. But if i want to cherry-pick 1 of those 5 commits from develop to the main i expected counter to show 0 for behind and 4 for ahead counter after it is done. This isn't the case unfortunately as cherry-picking makes new hash for the commit.</p>
<p>I expected i could use those counters to track features i have deployed to the main and it kind of bothers me that those counters stray away from each other by the day. How can i achieve what i expected?</p>
","0","14920366","",""
"75168199","9731658","2023-01-19 05:48:18","2","50","<git><command-line-interface><git-commit><git-cherry-pick>","How to list the commits of a branch which is now merged into main?","<p>I am looking to list all the commits that were merged to the main branch from feature branches:-</p>
<pre><code>    |
    v
    main branch
    |
    a  
    | \ 
    b  y
    |  |
    c  x
    | / -&gt; feature branch
    d
    |
</code></pre>
<p>Is it possible to list the commit x and y,
given the feature branch name and master main branch name?</p>
","0","9731658","",""
"75307059","12168397","2023-02-01 07:53:33","0","53","<git><unix><merge><cherry-pick><git-cherry-pick>","How cherry-pick from one branch to another branch without checkout on this branch","<p>I have 3 branches. <code>dev</code>, <code>master</code>, <code>master_copy</code>. Now I am on the <code>master</code> branch and a need cherry-pick commit from <code>dev</code> branch to <code>master_copy</code> <strong>WITHOUT</strong> checkout to <code>master_copy</code> or <code>dev</code>  branch. How I can do this?</p>
<p>I need like this <code>cherry-pick &lt;hash&gt; dev master_copy</code></p>
","2","12168397","",""
"75312614","16038501","2023-02-01 15:37:13","1","50","<git><git-cherry-pick>","After deletion of a local branch in git, will I be able to cherry-pick commits from the deleted branch by their IDs?","<p>If I have a local branch in git with commits A, B, C, D, E and I choose to delete it using</p>
<pre><code>git branch -D myBranch
</code></pre>
<p>but I save the commit IDs before deleting, will I be able to cherry-pick some of these commits to another branch by their IDs afterwards?</p>
","5","16038501","",""
"75313170","143931","2023-02-01 16:20:10","0","168","<git><git-cherry-pick>","What does git cherry-pick branch_name do?","<p>What does <code>git cherry-pick branch_name</code> do?</p>
<p>Does it <em>cherry-pick</em> only the latest commit from the branch with the name <code>branch_name</code> onto my current branch, or does it <em>cherry-pick</em> a range of commits from that branch, and if so what range? Bonus question: in the latter case, how would I <em>cherry-pick</em> all commits from a given branch?</p>
","9","143931","",""
"75456168","17747428","2023-02-15 06:24:28","0","30","<git><git-merge><git-rebase><git-cherry-pick>","Git merge of two commits with rename of a same file","<p>I was wondering how can I merge (or other action like cherry pick, rebase, ...) automatically (without manual resolving) two commits with a rename of a same file. More precisely, I've two commits which do:</p>
<ul>
<li>A.txt -&gt; B.txt</li>
<li>A.txt -&gt; folder/A.txt</li>
</ul>
<p>And I want automatically:</p>
<ul>
<li>A.txt -&gt; folder/B.txt</li>
</ul>
<p>Is it possible?</p>
<p>I searched solutions but I didn't find automatic ones. I tried merge, rebase, cherry pick. I tried arguments of merge strategies but it didn't work also.</p>
","4","17747428","",""
"48767783","7199843","2018-02-13 13:19:55","2","5969","<git><merge><cherry-pick>","Git cherry-pick vs merge branches","<p>I understand that cherry-pick was invented for apply some intermediate commits but does exist any difference between: </p>

<pre><code>git cherry-pick last_commit_from_branch
</code></pre>

<p>and</p>

<pre><code>git merge some_branch
</code></pre>

<p>As i understand, git will apply not only this one commit but also all previous commits starting with common commit?
If yes, the only difference in these lines will be that in case of merge the new commit will have two parent commits from these branches.</p>
","0","7199843","0","0"
"48836328","9371763","2018-02-16 23:32:09","-3","1712","<git><tfs><cherry-pick><git-cherry-pick><branching-strategy>","Git Cherry-pick branching strategy?","<p>So I joined a team that's recently (within the last year) moved from TFS to GIT.  The branching strategy is this.  Dev -> Release -> Master. When Dev is ready, merge to Release.  Build from Release and deploy to various environments.  Once it reaches the first production environment, merge to Master so master is always a preserved state of production.  If there's a hotfix needed, make the change in Dev, Cherry-pick to Release and once deployed to prod, cherry-pick to master.  Never merge backwards from Master to Release or Release to Dev, always flow the code one direction....  If we do need to merge backwards, it's either another cherry-pick (if you can find it) or a huge merge with tons of conflicts.</p>

<p>Pros:</p>

<ul>
<li>Simple</li>
</ul>

<p>Cons:</p>

<ul>
<li>Commit history is useless between branches as they won't match up.</li>
<li>Changes accidentally made directly to Release or Master and no Dev, will never make it back to Dev until someone notices the bug again after it's over-written or a merge conflict alerts someone (not likely since this is a mostly blind merging and people will be trained to ignore merge conflicts.)</li>
</ul>

<p>So, being this is a very TFS centralized way of doing things and I'm pushing for a two branch system.  Dev and Master.  When we're ready with a release, merge Master back to Dev to make sure everything is in sync, then Dev to Master tagging the commit for easy reference if needed.  in the event of a hotfix, branch from master, make fixes as needed, deploy as needed and merge back to master.  If needed in Dev, then merge Master back to dev, or wait for the next release.  </p>

<p>Pros:</p>

<ul>
<li>Commits only get lost if someone deploys from HF branch and forgets to merge back to Release (I argue deploy to prod ONLY from Master to force the merge... but builds take a LONG time so that's a sticking point...)</li>
<li>Commit History will match between branches so you KNOW things are in sync</li>
<li>Merge conflicts should be greatly cut down and/or handled by the person making the change so they better know how to handle them.</li>
</ul>

<p>Cons:</p>

<ul>
<li>More complex, especially if you're coming from TFS... I've been there before</li>
<li>If multiple hotfixes are going on at the same time, this can get messy.</li>
</ul>

<p>So, another developer on the team agrees that the Cherry-pick branching strategy has a few issues but argues it's simplicity should mean that changes not making it back to dev should almost never happen and commit history alone isn't worth the effort of the git strategy.</p>

<p>Problem is, I don't have a response to that.  Fundamentally the idea of not being 100% positive the code going to prod is what you tested in dev irks me to no end... but I can see how others it might especially at higher risk of forgetting something in a Hotfix branch by not merging it back into Master. Also, I like Git, though I'm no expert, but the git branching strategy makes sense to me.... however, having made the transition from TFS to GIT myself years ago, I can see how complex things look and that there will be many mistakes before it becomes second nature to everyone.   </p>

<p>My question is, are there more compelling reasons to use a get branching strategy?  I've searched quite a bit for ""Cherry Picking branching strategy"" and other variants and haven't come up with anyone suggesting it, so I'm hoping I'm missing something major here.</p>
","1","9371763","",""
"67215951","10467556","2021-04-22 15:06:53","1","449","<git><azure-devops><cherry-pick>","Cherry-pick to multiple branches","<p>I've been working on a project that has multiple environments (imagine two branches for tests, two for pre-production, and the other two for production, etc) using different database software. Sometimes the code is almost the same, but each one of these environments has its differences. Once it's necessary to make a change in a common file between all these branches, the cherry-picking process is just exhausting.</p>
<p>After a few hours of research, I've found an extension called <em><strong>PR Multi-Cherry-Pick</strong></em>, but the problem is that the extension not only creates the Pull Requests but publishes them. However, one of the team's policies is to only publish a pull request after it's approved in its lower layer (only publish in pre-production after it is approved in both test repositories and so on for production). Besides that, I read the merging solution in a similar question but there's no known common ancestor between all the branches simultaneously.</p>
<p>Is there a way to cherry-pick and create all those PRs as <strong>drafts</strong>? The use of the extension is not mandatory.</p>
","3","10467556","",""
"67936888","3705609","2021-06-11 12:16:28","2","1060","<git><git-cherry-pick>","Cherry-pick with changes in a non-existent file","<p>I have two repos with similar architectures:</p>
<pre><code>repo1:
 - file1
 - file2 *(this file is non-existent in repo2)
 - folder
    - file3
    - file4
    - file5
</code></pre>
<p>and</p>
<pre><code>repo2:
 - file1
 - folder
    - file3
    - file4
    - file5
</code></pre>
<p>Repo1 is remote for repo2:</p>
<pre><code>git remote add repo1 http://repo1.git
</code></pre>
<p>I need to cherry-pick commits from repo1 to repo2</p>
<pre><code>git cherry-pick &lt;commit_repo1&gt;
</code></pre>
<p>Usually everything is ok. But I've faced with problem if I want to cherry-pick changes to non-existent file.</p>
<p>Changes look like:</p>
<pre><code> folder/file4    | 9 ---------
 folder/file5    | 5 -----
 file1           | 5 -----
 file2           | 5 -----
 4 files changed, 24 deletions(-)
</code></pre>
<p>In the end: Cherry-pick merge changes from non-existent file to file3. Only for deleting changes</p>
<p>Someone knows how avoid to merge change to wrong file if needed file non-existent?</p>
<p>Attempts:</p>
<pre><code>git cherry-pick --strategy-option theirs &lt;commit_repo1&gt;
git cherry-pick --strategy-option ours &lt;commit_repo1&gt;
</code></pre>
<p>Give the same results:</p>
<pre><code>Auto-merging folder/file3 !!! this file was not changes (instead changed in file2)
Auto-merging folder/file4
Auto-merging file1
</code></pre>
","8","3705609","",""
"49670336","9601701","2018-04-05 10:40:12","18","32974","<gitlab><git-cherry-pick>","Gitlab: Sorry, we cannot cherry-pick this merge request automatically","<p>I got following error in the Gitlab:</p>

<pre><code>Sorry, we cannot cherry-pick this merge request automatically. This merge request may already have been cherry picked, or a more recent commit may have updated some of its content.
</code></pre>

<p>I have branch X from which I have to cherry pick commits to the branch Y. Maybe I have already done cherry pick, which is after this failed cherry pick. I have about 10 cherry picks to do.</p>

<p>What I should to do?</p>

<p>I was thinking if I create new branch Z (before Y) and try add cherry picks in the right order. Maybe that would be solution? What you think?</p>
","2","9601701","0","0"
"68126521","6546277","2021-06-25 06:38:59","1","947","<github><merge><gitlab><cherry-pick><git-cherry-pick>","Cherry-pick branches from one Repo to another","<p>I have two repositories Repo1 and Repo2. I have few new branches in Repo1 that should be moved to Repo2. How can I <code>cherry-pick</code> those branches(along with all the commits in it) and move it to second repo?</p>
<p>So far I have done:</p>
<pre><code>git remote add repo2 https://...repo1.git  
git fetch other
</code></pre>
<p>It listed out all the branches created in Repo1. But I'm not sure how can I cherry-pick those branches and push in Repo2.</p>
<p>Ps. I cannot do <code>git remote</code> since it will cause alot of conflicts as there's some difference in data in both the repositories.</p>
","0","6546277","0","0"
"68258070","8353201","2021-07-05 14:44:40","0","484","<git><git-cherry-pick>","GIT copy commit to another branch when I am in the original branch","<p>To move a commit from one branch to another I need to be on the target branch</p>
<p>The question is whether it is possible to copy a commit when I am in the original branch</p>
","1","8353201","",""
"14486122","999355","2013-01-23 17:50:15","237","49496","<git><git-merge><cherry-pick>","How does git merge after cherry-pick work?","<p>Let's imagine that we have a <code>master</code> branch.</p>

<p>Then we create a <code>newbranch</code></p>

<pre><code>git checkout -b newbranch
</code></pre>

<p>and make two new commits to <code>newbranch</code>: <em>commit1</em> and <em>commit2</em></p>

<p>Then we switch to master and make <code>cherry-pick</code></p>

<pre><code>git checkout master
git cherry-pick hash_of_commit1
</code></pre>

<p>Looking into <code>gitk</code> we see that <em>commit1</em> and its cherry-picked version have different hashes, so technically they are two different commits.</p>

<p>Finally we merge <code>newbranch</code> into <code>master</code>:</p>

<pre><code>git merge newbranch
</code></pre>

<p>and see that these two commits with different hashes were merged without problems although they imply that the same changes should be applied twice, so one of them should fail.</p>

<p>Does git really do a smart analysis of commit's content while merging and decide that changes shouldn't be applied twice or these commits are marked internally as linked together?</p>
","0","999355","0","0"
"32028449","442859","2015-08-15 19:21:43","2","58","<git><rebase><cherry-pick>","Rebase merge to have never happened","<p>Due to (very odd) circumstances I now have a git repository with 2 roots. I would like to delete the merge that causes the second root to appear. Technically each of these ""roots,"" is a commit with a parent of 0.</p>

<p>I want to get rid of the merge that causes there to be two roots.</p>

<p>I used git cherry-pick and that didn't work, it seems to not apply any changes.</p>

<p>To be clear I want a', b' and c' to all go away (they are broken copies of a, b and c caused by a bad rebase).</p>

<p><code>a  &lt;- b  &lt;- c  \     / g &lt;- h \
                 d -f           origin/master
a' &lt;- b' &lt;- c' /     \ i &lt;- j /</code></p>
","0","442859","0","0"
"50201837","3134055","2018-05-06 16:12:09","8","1633","<git><cherry-pick>","cherry-picking a commit includes previous commits?","<p>After finishing <a href=""https://learngitbranching.js.org"" rel=""noreferrer"">https://learngitbranching.js.org</a>, I thought I got the idea of cherry-pick, but turned out that I didn't, at all.</p>

<p>I created a file <code>abc.txt</code> and made the commits like below:</p>

<pre><code>(write a) ← (write b) ← (write c)[master][HEAD]
</code></pre>

<p>by which <code>abc.txt</code> became:</p>

<pre><code>a
b
c
</code></pre>

<p>Now, making a branch <code>from-a</code> on <code>(write a)</code>:</p>

<pre><code>(write a)[from-a][HEAD] ← (write b) ← (write c)[master]
</code></pre>

<p>and cherry-picking <code>(write c)[master]</code>, I thought that it would make <code>abc.txt</code> contain only a-line and c-line, i.e. like</p>

<pre><code>a
c
</code></pre>

<p>but it actually resulted as:</p>

<pre><code>a
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
b
c
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 3a0882d... write c
</code></pre>

<p>Here my confusion is two-folded. Why does it conflict but not just adding the line(s)? Why does it contain b-line even though I cherry-picked only <code>write c</code>?</p>
","3","3134055","0","0"
"31647797","5159547","2015-07-27 07:59:24","0","127","<git><gerrit><git-cherry-pick>","Do cherry-pick between 2 gerrit sites","<p>I have two gerrit sites.
Cherry-pick must be run in a work tree.
However, git repositories in gerrit are to be shared, which means cherry-pick is not allowed.
I hava many commits in both site.
How can I do cherry-picks daily without fetching to many codes locally.</p>

<p>For now I do the following to cherry-pick:</p>

<ol>
<li>Clone repository in gerrit A.</li>
<li>Fetch commit in gerrit B and do cherry-pick in the repository just cloned.</li>
<li>Push back to gerrit A.</li>
</ol>

<p>This is not what I want because not nice-looking and slow.</p>

<p>This is why I ask pointing ""without fetching to many codes locally"".</p>

<p>Note: I want to cherry-pick between bare repositories. A little bit confusing.</p>

<hr>

<p>This is the only part in my problem I can not explain or change.</p>

<p>One gerrit site has 3 parts: code part, gerrit part, database part. Code part contains all the git repositories presenting on the Gerrit. All of them are created by <code>git init --bare</code> cmds. These repositories, for most gerrit users, are so-called ""remote repositories"". Conveniently, you may run the following in bash <code>mkdir temp_dir; cd temp_dir; git init --bare; git status</code> to check the error print. </p>

<hr>

<p>Seems that I can do ""fetch"" in bare repositories.</p>

<pre><code>git fetch ssh://user@server:/project/path.git changes/xx/xxx/x:local_branch
</code></pre>

<p>But the change fetched can only been seen in gitweb. Can't review it cause it is not on refs/for branch. How can I fetch a change and get it on refs/for/ branch?</p>
","5","5159547","0","0"
"35497963","5686853","2016-02-19 05:31:06","0","271","<git><github><branch><git-cherry-pick>","Same commits between two branch after merge","<p>I have two branches <code>devel</code> and <code>next</code>. In <code>devel</code> I have a more or less huge amount of commits. Some of the commits are cherry picked into next. Also I added some commits to next and I have commits which are merged from <code>devel</code>.</p>

<p>Now I would like to see which commit is missing in next from <code>devel</code>, so I can cherry-pick the missed commit to next. My question is now,</p>

<p>How to check same commits between the <code>devl</code> and <code>next</code>
The commits from <code>devel</code> is there or not in <code>next</code>?
If not there I would have to cherry-pick to <code>next</code>.</p>
","2","5686853","",""
"37925189","2576903","2016-06-20 14:33:20","5","3640","<git><github><rebase><cherry-pick>","Git rebase fails because: Commit xxxx is a merge but no -m option was given","<p>I had a feature branch:</p>

<pre><code>feature
</code></pre>

<p>with lets say 10 commits</p>

<p>then some time ago I started doing experiments on it, but wanted to preserve the current functionality just in case, so I started a new branch:</p>

<pre><code>feature-experiment
</code></pre>

<p>and then did another 10 commits</p>

<p>today I decided to <code>merge</code> <code>feature-experiment</code> into <code>feature</code> and then I deleted <code>feature-experiment</code>. There were some merge conflicts which I resolved.</p>

<p>then, my 20 commits which were all using the same name and ending in <code>WIP</code> (work in progress), were very ugly, so I decided to</p>

<pre><code>git rebase -p -i HEAD~22
</code></pre>

<p>I changed <code>pick</code> to <code>s</code> to squash them all into the oldest commit for this feature, but I had some merge conflicts (the same as before). I resolved them and then</p>

<pre><code>git add -A &amp;&amp; git commit

git rebase --continue
</code></pre>

<p>but now I get the following error:</p>

<pre><code>error: Commit asd123qsd is a merge but no -m     option was given.
fatal: cherry-pick failed
Could not pick asd123qsd 
</code></pre>

<p>This is the last commit (the merge one)</p>

<p>I tried again, but this time I didnt change this particular commit's <code>pick</code> to <code>s</code>, but got the same error.</p>

<p>How can I carry out this dreadful rebase?</p>

<p>I was thinking, as a possible solution, I could I modify the last commit to add -m to it, but how do I do that and what do I do with this -m command? Are there any other options</p>
","4","2576903","",""
"37971433","758888","2016-06-22 14:45:26","0","92","<git><commit><cherry-pick>","Cherry-pick commit from a single git to multiple git","<p>I'm having a problem to move some commit from two projets, the details:
- Project 1: Have a single git that regroupe many directories
- Project 2: Have the same directories of project 1 but for every directory there is a separated git.
The issue is:
I have a commit in project one that touch files in 2 directories and plus, and I want to cherry-pick that commit and move every change of every file and commit them to project 2.</p>
","0","758888","",""
"53972594","4248083","2018-12-29 19:12:11","9","4016","<git><git-merge><git-cherry-pick>","what is the difference between a Git-merge and Git-cherry-pick for a specific commit?","<p>Is there a difference between a :
<code>git merge &lt;commit-id&gt;</code> and <code>git cherry-pick &lt;commit-id&gt;</code> ?
where ''commit-id'' is hash of the commit from my new branch that I want to get into master branch.</p>
","1","4248083","0","0"
"38002527","878514","2016-06-23 21:54:40","3","349","<git><git-cherry-pick>","Git cherry-pick commit that adds the same file","<p>Consider the situation created by the following commands:</p>

<pre><code>git init
git commit --allow-empty -m ""Initial commit""
git branch first
git branch second
git checkout first
echo 1 &gt; file
echo 2 &gt;&gt; file
echo 3 &gt;&gt; file
echo 4 &gt;&gt; file
git add file
git commit -m ""Commit file 1 to 4""
git checkout second
echo 1 &gt; file
echo 2 &gt;&gt; file
echo 3 &gt;&gt; file
echo 4 &gt;&gt; file
echo 5 &gt;&gt; file
echo 6 &gt;&gt; file
git add file
git commit -m ""Commit file 1 to 6""
git checkout first
git cherry-pick second
</code></pre>

<p>The <code>file</code> on branch <code>first</code> contains numbers from 1 to 4 (each in its own line). The same <code>file</code> on the branch <code>second</code> contains numbers from 1 to 6. The <code>file</code> has been added in both branches as a new one.</p>

<p>Now, if I try to cherry-pick one branch onto another, my dreamed result would be (the <code>file</code> contents):</p>

<pre><code>1
2
3
4
5
6
</code></pre>

<p>An acceptable result would be</p>

<pre><code>1
2
3
4
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
=======
5
6
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5c9d53e... Commit file 1 to 6
</code></pre>

<p>However, git always gives me:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
1
2
3
4
=======
1
2
3
4
5
6
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5c9d53e... Commit file 1 to 6
</code></pre>

<p>And I have to do all of the conflict resolution myself.</p>

<p>How to cherry-pick two commits that add the same file (with possibly similar content) on each other? How to make git try to analyze their contents and run into conflict only if it needs to? </p>

<p>Now it behaves like <em>Hey! These commits add the same file so I will throw a whole file conflict here! I'm too lazy to look inside them.</em></p>
","2","878514","0","0"
"38015433","4811873","2016-06-24 14:09:08","0","31","<php><git><cherry-pick>","Looking for git-workflow suggestions in handling an enormous PHP upgrade-project","<p>For the past several months, I've been working on a massive upgrade project on an 11-year old application that consists of well over 3,500 individual files. At one point in time, the files were copied <em>(they were being managed by SVN, then ...),</em> and conversion work began, in parallel to continuing work in support of the customer.</p>

<p>Within the conversion repository <em>(which is entirely unrelated to the ""other"" git repository which supplanted SVN),</em> about 314 commits have been done, and some of these are gigantic. (Conversion of <code>&lt;?</code> to <code>&lt;?php</code>, replacement of <code>mysql_</code> calls with calls to an interface library, and so on.)</p>

<p>Now, the task at hand is to bring the about-120 files that have changed in the ""other"" repo <em>(which eventually is to be abandoned ...)</em> into this one.  My approach so far has been to create a branch, copy the files into that new branch, and to re-apply ""basic"" changes such as the foregoing, using automatic code-analysis tools which I have developed for that purpose.</p>

<p>And here is where I am uncertain what to do next.  I want to re-make the changes that I made to those files, as reflected in the 300-odd commits now on the main branch of my conversion repo, and to do so as automatically as possible.  I have a file which contains a list of all the files in question.  My thought is to <code>cherry-pick</code> some of the older commits out of the main branch, and to apply these to the files in the new branch <em>(which might never be merged into the master)</em>.  To my way of thinking, only those commits which touch any of those files need to be reapplied.  (But, some of those commits touched thousands of files, including but not limited to the ones in play here.)</p>

<p>At this point, I'm standing on the cusp of a decision, having not yet done anything, and not quite certain how best to proceed.</p>

<p>Remember:  there are two separate <code>git</code> repos, but they are entirely unrelated to another. (The one used for production maintenance didn't even exist at that time.) So, I can use it ... and, did use it ... only to obtain a list of the files that have been touched, and to obtain their most-recent version.  When the conversion project is finished, the conversion-repo will be <em>discarded,</em> and the present production-repo will be frozen.  An entirely new repo will be created with which to move forward.</p>

<p>Advice earnestly sought . . . </p>

<p><strong>EDIT:</strong> <em>I have since considered a completely different approach, which would abandon the course that I started-on, throw away that branch entirely, and pursue a different strategy of going through the old repo, grabbing selected commits as patches, and trying to apply those patches to the existing (albeit, possibly very-changed) modules.  Or, if need be, doing the same thing by hand.  Only about 100, give-or-take, commits to do...  Comments are cordially (and, earnestly) requested about either strategy.</em></p>
","0","4811873","",""
"73466468","19164472","2022-08-24 01:17:31","0","69","<git><git-commit><git-cherry-pick>","git -- cross reference common commits across branches","<p>I have a git repo that has multiple unmerged branches, and need to get a handle on what is where.  SOME of them have had commits cherry-picked across, so if I do a list of commits using the top line of the log message, two of them would show the same text in different branches.</p>
<p>I have used git show-branch to show me all the commits and which branches they are in, and I can see some of them sharing the same text ... but I have to first pick a commit msg, then search (or grep) for that text to see if it appears in another branch.</p>
<p>Is there a way to automate this cross referencing of common commits across branches?  So that I can get a list of all branches that the commit &quot;this fixes the config problem&quot; is in?    Even better would be a list of cherry-picked commits and where their origin commit is, but I am not holding out hope for that.  Just a list that shows that commit X appears in branches A, B, and C would be a tremendous help.</p>
","1","19164472","",""
"73489618","7500028","2022-08-25 14:48:48","0","40","<git><git-log><git-cherry-pick>","How to see differences between branches, after cherrypicking commits?","<p>On a git repo, let's suppose I have a master and a developent branch.</p>
<p>There are some changes going on on development branch consisting on several commits. I want to apply some of those commits to master, but not all of them.</p>
<p>For that reason I did the following:</p>
<ul>
<li>Created a new branch dev-cherrypick</li>
<li>Cherry-picked some of the commits</li>
<li>merged dev-cherrypick into master</li>
</ul>
<p>However, If I now compare dev vs master with: <code>git log master..dev</code>, the output still shows the commits I already cherry-picked (I understand that this is because once cherry-picked, they get a new hash id)</p>
<p>Is there a way of being able to compare two branches to tell the <em>&quot;real&quot;</em> differences between them if some of those branches has cherry-picked commits?</p>
","1","7500028","",""
"38092877","3395967","2016-06-29 07:19:54","0","29520","<git><version-control><rebase><git-revert><git-cherry-pick>","GIT - undo specific past merge but need the commits made after that merge to be intact","<p>I was working simultaneously on a <em>Feature</em> branch and <em>Master</em> branch.</p>

<p>Few days ago I merged my <em>Feature</em> into <em>Master</em>. A few commits have been made on top of that too. </p>

<p>But later I realised that the feature is no more desired. So I need to remove the commits which have been incorporated due to the <em>Feature</em> branch. </p>

<p>On checking, I realised that I have 3 options <em>Rebase</em>, <em>Revert</em> and <em>Cherry-pick</em>.</p>

<p>I might need the commits of the <em>Feature</em> branch in future. Therefore, it's commits need to be visible in commit history/ git log etc, if I need them in the future. Hence, I am confused which option of the above three to pick. </p>

<p>Note: All the commits are pushed to master. So would that have any implications on the option I pick?</p>
","3","3395967","",""
"38093829","3553550","2016-06-29 08:08:18","3","244","<git><cherry-pick>","git cherry-pick: output resulting new commit sha","<p>I am using git cherry-pick as part of a bash script. For reporting purposes, I would like to output the resulting commit SHA of this cherry-picking to the console. However, there seems to be no option in the cherry-pick command that would return the commit SHA. </p>

<p>Is there a way to get the commit SHA of the commit that was created using a cherry-pick?</p>
","0","3553550","",""
"38102635","2966366","2016-06-29 14:29:03","0","254","<git><github><merge><pull-request><cherry-pick>","Cherry picking can result in some oddities in GitHub pull requests","<p>I have a project in GitHub with a master, branch-A and branch-B. I have a file, foo.txt in the master and both branches. branch-A and branch-b are both derived directly from master.</p>

<p>Master - foo.txt contains 'hello'
Branch B - foo.txt was changed by adding 'world' , committed and pushed, now containing 'hello world'</p>

<p>I then cherry picked the commit from Branch B to Branch A and pushed Branch A.</p>

<p>I modify master and add 'world!'.</p>

<p>I modify Branch-A and add a new line with 'goodbye world' on it and run git push for both master and Branch-A.</p>

<p>In GitHub, I submit a pull request to merge base: master .. base: Branch-A and the diff shows that 'world!' is not in master.</p>

<p>Master - foo.txt is now 'hello world!'
Branch-A - foo.txt is now 'hello world\ngoodbye world'</p>

<p>but pull request shows</p>

<p><a href=""https://i.stack.imgur.com/0hRcb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0hRcb.png"" alt=""enter image description here""></a></p>

<p>I see no ! in there either.</p>

<p>Why is 'hello world!' not seen on the left while it exists in master at the time of the pull request? What's going on underneath with the cherry pick that causes this? </p>
","3","2966366","",""
"73535685","5790862","2022-08-29 23:40:41","0","52","<git><cherry-pick><smartgit>","Cherry-pick multiple commits in smartGit but only first few commits are shown in the result of the target branch","<p>I am using smartGit as the tool, say, I checked out branch A and need to bring some commits in branch B to branch A and those commits are not adjacent and could be spread apart in time of commits in branch B. I noticed that after selecting multiple commits in branch B and clicking &quot;cherry pick &amp; commit&quot; button, I got a conflict, then, I resolved it using the &quot;conflict resolver&quot; button, then, staging the resolved file, then, after committing, at this point I can see only few commits that I selected in branch B were brought into branch A, not all commits I selected in branch B?</p>
<p>I am not sure if this has anything to do with the conflict or just too many commits have been selected: I also tried to select only 2 commits (these 2 commits are adjacent in branch B) from branch B and no conflict happened, and I am able to see both commits in branch A.</p>
<p>Any hints are highly appreciated!</p>
","3","5790862","",""
"56405732","8393409","2019-06-01 10:06:28","-1","1109","<git><gerrit><cherry-pick>","pushed code to gerrit after cherry-pick by mistake","<p>My code is based on a cherry-pick I have done to another patch.
I pushed it by mistake as the other patch is not ready yet. So in gerrit I see the other patch files as well.
How do I make now my pushed patch re-based without the other files that came in from the other patch?</p>
","0","8393409","",""
"72213918","12906674","2022-05-12 10:25:50","0","2027","<git><commit><cherry-pick>","cherry pick multiple commits as one without going through each one git apply patch","<p>I have branch <em>A</em> with a few commits I need to cherry-pick into branch <em>B</em>.
In the first cherry-picks I've added code that I've later removed in the last commits.</p>
<p>When I try to cherry pick them using <em>first_commit^..last_commit</em> it still cherry-picks the commits one by one - forcing me to solve conflicts between the code I added in the first commits and other developers code, even though I don't really need to solve these conflicts- as I've deleted this code in the last commits I'm trying to cherry-pick anyway!</p>
<p>So my question is: <strong>is there a way to cherry-pick a range of commits without going through them one by one</strong> (solving conflicts for each one of them)- <strong>but only the end result of their changes in code</strong> (solving conflicts, if any, between the changes after all the commits were applied and the rest of the code).</p>
<p><strong>P.S.</strong> I cannot pull A into B as it contains other content I don't want, and I think I've also tried rebasing with similar results..</p>
<p>Thanks!</p>
","2","12906674","",""
"38251859","379512","2016-07-07 17:36:09","11","1964","<git><git-rebase><git-cherry-pick>","Why would git cherry-pick produce fewer conflicts than git rebase?","<p>I rebase often.  Occasionally the <code>rebase</code> is particularly problematic (lots of merge conflicts) and my solution in such cases is to <code>cherry-pick</code> the individual commits onto master branch. I do this because nearly every time I do, the number of conflicts is considerably less.</p>

<p>My question is why this would be the case.  </p>

<p>Why are there fewer merge conflicts when I <code>cherry-pick</code> than when I <code>rebase</code>?  </p>

<p>In my mental model a <code>rebase</code> and a <code>cherry-pick</code> are doing the same thing. </p>

<p><strong>Rebase example</strong></p>

<pre><code>A-B-C (master)
   \
    D-E (next)

git checkout next
git rebase master
</code></pre>

<p>produces </p>

<pre><code>A-B-C (master)
     \
      D`-E` (next)
</code></pre>

<p>and then</p>

<pre><code>git checkout master
git merge next
</code></pre>

<p>produces </p>

<pre><code>A-B-C-D`-E` (master)
</code></pre>

<p><strong>Cherry pick example</strong></p>

<pre><code>A-B-C (master)
   \
    D-E (next)

git checkout master 
git cherry-pick D E
</code></pre>

<p>produces </p>

<pre><code>A-B-C-D`-E` (master)
</code></pre>

<p>From my understanding the end result is the same. (D and E are now on master with a clean (straight-line) commit history.)</p>

<p>Why would the latter (cherry picking) ever produce fewer merge conflicts than the former (rebasing)?</p>

<p><strong>UPDATE UPDATE UPDATE</strong></p>

<p>I was finally able to reproduce this problem and I realize now that I may have oversimplified the example above.  Here's how I was able to reproduce...</p>

<p>Say I have the following (notice the extra branch)</p>

<pre><code>A-B-C (master)
   \
    D-E (next)
       \
        F-G (other-next)
</code></pre>

<p>And then I do the following </p>

<pre><code>git checkout next
git rebase master
git checkout master
git merge next
</code></pre>

<p>I end up with the following</p>

<pre><code>A-B-C-D`-E` (master)
   \ \
    \ D`-E` (next)
     \
      D-E
         \
          F-G (other-next)
</code></pre>

<p>From here, I'll either rebase or cherry-pick</p>

<p><strong>Rebasing example</strong></p>

<pre><code>git checkout other-next
git rebase master 
</code></pre>

<p>produces </p>

<pre><code>A-B-C-D`-E`-F`-G` (master)
</code></pre>

<p><strong>Cherry picking example</strong></p>

<pre><code>git checkout master
git cherry-pick F G
</code></pre>

<p>produces the same result</p>

<pre><code>A-B-C-D`-E`-F`-G` (master)
</code></pre>

<p>but with far fewer merge conflicts than the rebasing strategy.</p>

<p>Having finally reproduced a similar example I think I see why there were more merge conflicts with the rebasing than with the cherry picking, but I'll leave it for someone else (who will likely do a better (and more accurate) job than I would) to answer.  </p>
","10","379512","0","0"
"72241559","16320156","2022-05-14 15:18:41","2","118","<git><fetch><gerrit><pexpect><cherry-pick>","Command executed via pexpect not taking effect","<p>I am trying to cherry-pick gerrit reviews using a python script. I already have the string required to cherry-pick a review. I have used pexpect to automate the password input step.</p>
<p>Here is an example. For each review I have to execute the following 2 commands:</p>
<ol>
<li>git fetch &quot;ssh://myusername@my-gerrit.server.net:34343/project&quot; refs/changes/45/255645/38</li>
<li>git cherry-pick FETCH_HEAD</li>
</ol>
<p>Only the first command asks for a password. Here is the code i have written:</p>
<pre><code>child = pexpect.spawn('git fetch &quot;ssh://myusername@my-gerrit.server.net:34343/project&quot; refs/changes/45/255645/38')
child.logfile_read = sys.stdout
child.expect(r'Enter passphrase for key(.*?):', timeout=10)
child.sendline('mypwd')
child.expect([pexpect.TIMEOUT, 'host$', pexpect.EOF])

child.sendline('git cherry-pick FETCH_HEAD')
child.expect([pexpect.TIMEOUT, 'host$', pexpect.EOF])
</code></pre>
<p>When i run the script i dont see any error. However the second command (git cherry-pick FETCH_HEAD) doesnt seem to be executed. I say this because when i run these commands manually the second command throws a git merge conflict. When i run the script i dont see cherry-pick in progress (git status shows all clean). I tried some variants but cannot get it to work. Please help.</p>
<p>Thanks in advance</p>
","3","16320156","0","0"
"54049236","4039431","2019-01-05 05:28:41","0","203","<git><merge><git-revert><cherry-pick>","How to get the changes from a revert commit in master branch","<p>Earlier I merged my feature branch in master which had a lot of commits and merging to master, created a merge commit in the master. </p>

<p>Later on, due to some issues, we had to revert the changes and this was done in another commit which says reverting merge commit of my feature branch.</p>

<p>Let suppose my merge commit is <code>m</code> and commit which reverted it is <code>r</code>. </p>

<p>Now again, I am starting my work on to resolve the issues which I had in my feature branch and I created a new feature branch from master and I want to get the code from my previous feature branch.</p>

<p>I tried doing <strong>cherry-pick</strong> but It gave me below error:-</p>

<blockquote>
  <p>error: commit  is a merge but
  no -m option was given. fatal: cherry-pick failed.</p>
</blockquote>

<p>I tried to do <code>git merge &lt;sha of my merge commit&gt;</code> in my feature branch but it says </p>

<blockquote>
  <p>Already up-to-date.</p>
</blockquote>

<p>I read a lot of git tutorial and SO answers but couldn't get a clear understanding of what would be the best in my situation.</p>

<p>Let me know If any additional information is required.</p>
","0","4039431","",""
"72256715","19125997","2022-05-16 09:09:06","2","124","<git><cherry-pick>","Cherry-pick binary merge conflict with text files","<p>When I cherry-pick from another repo I often get binary-conflict like this:</p>
<pre><code>`$ git cherry-pick -e 75fa3f
 Performing inexact rename detection:  97% (636400/652525), done.
 warning: Cannot merge binary files: src/Pippo.ext (HEAD:src/Pippo.ext vs. 75fa3f18... Aggiornamento.:othersrc/Pippo.ext)
 error: could not apply 75fa3f18... Aggiornamento.`
</code></pre>
<p>All files are ANSI/ASCII, no unicode.</p>
<p>In this case I should abort cherry-pick, manually copy file and then commit.</p>
<p>I also added in <code>.git/info/attributes</code>:<br />
<code>*.ext diff</code></p>
<p>but without luck.</p>
","2","19125997","",""
"38418643","301513","2016-07-17 06:48:29","1","313","<git><git-merge><git-rebase><git-cherry-pick>","Does a rebase the only way to fix a wrong cherry-pick?","<p>The branch #1 contains a bug fix C1. The branch #2 first <strong>cherry-pick</strong>ed C1, then the branch #2 owner realised the work done in C1 was <strong>wrong</strong> actually, so he committed the correct fix C2. </p>

<p>In C2 he basically removed the change in C1, replaced with the correct change. When the branch #1 owner wants to ""pick-up"" the fix, the merge <strong>won't work</strong>. Because with merge the result C3 will then contain C1 and the correct fix introduced in C2, i.e. C1 will be keep by merge.</p>

<pre><code>Because the branch #2 now does NOT contain C1 codes at all so merge won't work.

base -- C1'-- C2'(remove C1' change) -- C2''(add the correct fix) &lt;--branch #2


     /---- C1---------------C3 (merge won't do b/c C1 will be kept)  &lt;-- branch #1
base                       /
     \---- C1' ---- C2----/  &lt;--branch #2
</code></pre>

<p>Rebase will do because it will discard C1, <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html"" rel=""nofollow noreferrer"">""a patch already accepted upstream with a different commit message or timestamp will be skipped"".</a></p>

<pre><code>      /---- C1------ xxxxx  ----C3 (Rebase will discard C1) &lt;-- branch #1
base                       /
      \---- C1' ---- C2---/  &lt;--branch #2
</code></pre>

<p>My question is actually related this, <a href=""https://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge"">When do you use git rebase instead of git merge?</a> Although none of answers mentioned my case. So the question is if I know someone cherry-pick my commit I better rebase his branch instead of merge ?</p>

<p>Is there other way to avoid (or fix) the problem I mentioned here ?</p>

<p>------ update-------</p>

<p>I understand cherry-pick is the reason why this happened. But I have faced the situation several times that I just want a specific commit now, I don't want other commits in their branch yet. So I don't know if there is a better way to do it.</p>
","0","301513","0","0"
"38446493","1456948","2016-07-18 21:46:09","2","55","<git><rebase><cherry-pick>","Why do rebased commit ids differ from cherry-picked ids?","<p>This question stems from a nasty little merge conflict that I got myself into when I accidentally cherry-picked from my tracked branch into my tracking branch as opposed to rebasing it. Fixing it was quite easy, but still trying to wrap my head around why it was an issued in the first place.</p>

<p>Let's say I have the below branches(<code>tracking</code> is based off of <code>tracked</code>) with series of commits with hash in parentheses, and arrows pointing to parent commits.</p>

<p><code>tracked: a(123) &lt;- b(234) &lt;- c(345)</code></p>

<p><code>tracking: a(123) &lt;- b(234) &lt;- c(345)</code></p>

<p>Let's say a new commit <code>d</code> with commit id <code>456</code> gets into <code>tracked</code> so that the state of branches are as below:</p>

<p><code>tracked: a(123) &lt;- b(234) &lt;- c(345) &lt;- d(456)</code></p>

<p><code>tracking: a(123) &lt;- b(234) &lt;- c(345)</code></p>

<p>I now <code>cherry-pick</code> <code>456</code> onto <code>tracking</code> leading to the below state of tracking:</p>

<p><code>tracking: a(123) &lt;- b(234) &lt;- c(345) &lt;- d(somethingnot456)</code></p>

<p>However, if I was to just perform a <code>git rebase tracked</code> it would have had been:</p>

<p><code>tracking: a(123) &lt;- b(234) &lt;- c(345) &lt;- d(456)</code></p>

<p>So why do the ids differ above?</p>

<p>I have seen many questions about <code>rebase</code> vs <code>cherry-pick</code>, but I haven't managed to come across an answer for this specific question. Thanks.</p>
","1","1456948","",""
"38464546","6286694","2016-07-19 17:07:26","3","723","<git><git-rebase><git-cherry-pick>","Rebase/copy all missing commits from one branch on top of current branch","<p>ok, this looks so simple but I can't find an easy solution. Let's say there are two branches:</p>

<pre><code>a - b - c - d - e - f &lt;current_branch&gt;
         \
          g - h - i &lt;temp_branch&gt;
</code></pre>

<p>I simply want all missing commits in <code>&lt;temp_branch&gt;</code> to be on top of <code>&lt;current_branch&gt;</code> without touching <code>&lt;temp_branch&gt;</code> and without merge commit:</p>

<pre><code>a - b - c - d - e - f - g' - h' - i' &lt;current_branch&gt;
         \
          g - h - i &lt;temp_branch&gt;
</code></pre>

<p>What didn't work:</p>

<ul>
<li><code>git rebase</code> : I could first rebase <code>&lt;temp_branch&gt;</code> on top of <code>&lt;current_branch&gt;</code> and merge back fast-forward. But that's not what I want and it is too complicated.</li>
<li><code>git cherry-pick</code> : if there is no automatic way, manually looking up the commit-range is required</li>
</ul>

<p>A simple one-liner would be great, like</p>

<pre><code>git rebase --reverse-order temp_branch HEAD
</code></pre>

<p>Or some other command I don't know of?</p>
","2","6286694","",""
"54106186","2308319","2019-01-09 08:48:28","0","44","<git><git-cherry-pick>","Splitting a 'mixed' dirty branch into multiple clean branches","<p>I had a bad git workflow for a while -- I made changes regarding both subject A, subject B and subject C in the same <code>dirtybranch</code>, and in fact also in intermixed commits. </p>

<p>I want to clear this up, so that I have a clean <code>branchA</code>, <code>branchB</code> and <code>branchC</code> for each of these, so that I can later make separate merge requests for upstream.</p>

<p>I have already created branchA, used <code>git cherry-pick --no-commit master..dirtybranch</code> and then simply manually removed the changes regarding subjectB and C. This works although it is inelegant, and I could do the same for subjects B and C although it is looking to be more involved (because they are mixed up in the code more closely). </p>

<p>Therefore my question is:</p>

<ul>
<li>Is there a more elegant (ie. easier) way to do this, especially when you need to go through a file line by line to pick the changes you want to keep (gui?)? I know of eg. meld or kdiff but I am not sure how to apply them here.</li>
<li>As I have already 'picked out' changes for subject A into <code>branchA</code>, is there a way to cherry-pick the changes from <code>dirtybranch</code> into eg. <code>branchB</code> ""except for"" the changes I already put into <code>branchA</code>? (and likewise, <code>dirtybranch</code>-><code>branchC</code> ""except for"" <code>branchA</code> and <code>branchB</code>)</li>
</ul>
","2","2308319","",""
"54127975","5525721","2019-01-10 11:43:58","0","43","<git><github><pull-request><git-reset><git-cherry-pick>","Clarification with how GitHub's pull request works and merging in general. What must be done?","<p>Recently, we've been merging topic branches to our development branches. Here's the thing: right after a topic branch has been merged to development branch (thru a <code>pull request</code>), a new change needs to be introduced to that topic branch to fix some issue.</p>

<p>Is it okay to issue another <code>pull request</code> and let git do the rest (basically, said topic branch be merged 2x, even more, to development branch), or <code>reset</code>ting the PR and reissuing the PR is necessary in order to not mess things up? (Seems like we've taken this route, just want to clarify if this has some hidden side effect).</p>

<p>If <code>reset</code> is not possible, would <code>cherry-pick</code>ing be a much better solution?</p>

<p>Thanks.</p>

<p>EDIT#1:</p>

<p>Seems like <code>cherry-pick</code>ing works fine than usual process, but, I am concerned about its effects on the normal merging process.</p>
","2","5525721","",""
"72377977","10996165","2022-05-25 12:49:22","-2","1943","<git><github><git-merge><cherry-pick><git-cherry-pick>","Cherry pick specific commits from development branch to production branch","<p>I have two branches in the GIT GUI - Development and Production. When code is pushed onto development, in the CLI, I do git pull and then git merge and git push on the production branch.</p>
<p>If I have 3 commits on the CLI on development branch:</p>
<p>Commit1 - COMMIT HASH 1
Commit2 - COMMIT HASH 2
Commit3 - COMMIT HASH 3</p>
<p>How can I merge only Commit3 and Commit1 without using any additional branch?</p>
","2","10996165","",""
"54189161","505990","2019-01-14 21:04:10","0","52","<git><push><cherry-pick>","How to cherry pick commits OUT","<p>I need to remove code from my master branch...<br>
Currently, it looks like this:<br>
A->B->C->D->E->F</p>

<p>and i want to remove commits B to E, turning it to:</p>

<p>A->F</p>

<p>I tried to revert back to A and cherry pick F but it won't allow me to push because the tip of the branch is behind the remote counterpart...</p>

<p>How can I do this?</p>
","7","505990","",""
"54209215","80002","2019-01-16 01:26:32","2","205","<git><cherry-pick>","How to cherry-pick with a comment non interactively?","<p>I have a script which cherry-picks a commit while adding more information to the comment. Today I run <code>git cherry-pick</code> and then <code>git commit --amend</code> to modify the commit message.</p>

<p>I can see there is the <code>-e</code> flag, but it seems to be interactive. Is there a way to run <code>git cherry-pick</code> with a message non interactively? </p>
","0","80002","",""
"54213819","8204850","2019-01-16 09:22:04","1","119","<git><version-control><git-branch><git-cherry-pick><git-rewrite-history>","How to force changed master history to feature branches based on old history?","<p>My colleague changed history of our <code>master</code> and my <code>feature-branch</code> is based on old history of <code>master</code>s. Simple rebase didn't change my branchs' history to the new (changed) history.</p>

<p>Is cherry picking my only option or is there a simpler way to solve this? Creating a new branch would mess up our comment history on Gitlab about merge request. Also not sure what would happen with Gitlabs auto merge with differing histories.</p>

<p>Desired outcome would be similar history on <code>master</code> and <code>feature-branch</code> with <code>feature-branch</code> having my commits on top of it.</p>
","0","8204850","",""
"54233117","203515","2019-01-17 09:49:08","1","607","<git><cherry-pick>","git cherry-pick: manually accept ""our"" or ""their"" hunks in conflicted files","<p>I'm currently cherry-picking a number of commits into another (release) branch. I know about the <code>--strategy-option theirs</code> when cherry-picking, but I'm afraid that this option isn't suitable for every commit I'm picking.</p>

<p>I'd prefer running with the default strategy generating conflicts, then manually resolve those for each file.</p>

<p>However, there are some files where I'd like to batch-accept all <code>ours</code> or <code>their</code> hunks, which is getting cumbersome doing it by hand.
Is there a way to just accept all <code>ours</code> or <code>their</code> hunks in a conflicted file?</p>

<p>Note: <code>git checkout --ours/--theirs</code> seems unsuitable for cherry-picking as it checks out the whole file from the given branch. I only want to accept conflicting hunks from either version.</p>
","1","203515","",""
"54309584","964045","2019-01-22 13:39:37","2","185","<git><diskspace><git-cherry-pick>","Cherry picking commit in git: is large file data duplicated?","<p>I understand that if you cherry pick a commit in git, it creates a new copy of the commit (with new SHA etc).</p>

<p>But internally, if there is a large binary file, is the data duplicated, causing the repo to bloat? Or is it smart enough to understand that it's the same blob?</p>
","0","964045","",""
"73747745","11541268","2022-09-16 16:19:33","0","132","<git><git-commit><git-filter-branch><git-cherry-pick><git-filter-repo>","How do I change the author and author email for multiple commits?","<p>This was a problem I wanted to solve. When I searched up this question, I saw answers using <code>git filter-branch</code> and <code>git filter-repo</code>.</p>
<p>I can say with 100% confidence that <code>git filter-branch</code> is too slow and I don't like that it can change the same commit in multiple branches. Not a useful method.</p>
<p>Next is <code>git filter-repo</code>. It seems like a good solution but I'm using Ubuntu 20.04 LTS which doesn't seem to be supported. I would need to spend a little time to update to 22.04 LTS. So only useful on supported distros and versions.</p>
<p>Now here is my answer:</p>
<pre><code>initialCommit=$(git log original-branch --format=format:&quot;%h&quot; | tail -1)
readarray -t commitsArray &lt; &lt;(git log original-branch --author=&quot;Original Author &lt;originalauthor@email.com&gt;&quot; --format=format:&quot;%h&quot;)
startCommitIndex=$((&quot;${#commitsArray[@]}&quot;-1))

git checkout -b new-branch &quot;$initialCommit&quot;
if [[ &quot;$initialCommit&quot; == &quot;${commitsArray[$startCommitIndex]}&quot; ]]; then
    git commit --amend --author &quot;New Author &lt;newauthor@email.com&gt;&quot;
    startCommitIndex=$(($startCommitIndex - 1))
fi
for (( commitIndex=$startCommitIndex; commitIndex &gt;= 0; commitIndex-- )); do
    git cherry-pick &quot;${commitsArray[$commitIndex]}&quot;
    git commit --amend --author &quot;New Author &lt;newauthor@email.com&gt;&quot;
done
</code></pre>
<p>We learned that <code>git commit --amend --author &quot;New Author &lt;newauthor@email.com&gt;&quot;</code> <a href=""https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-a-single-commit/43231587#43231587"">modifies the latest commit</a>, also known as the HEAD commit (<code>git log -1 --format=format:&quot;%h&quot;</code>).</p>
<p>Regarding <code>--format=format:&quot;%h&quot;</code>, we can retrieve a commit's hash in two ways:</p>
<ol>
<li><code>--format=format:&quot;%H&quot;</code>: A long hash. Retrieves the full hash of the commit (40 characters long).</li>
<li><code>--format=format:&quot;%h&quot;</code>: A shortened version of the hash that uses the first 7 to 9 characters (<a href=""https://stackoverflow.com/questions/43665836/in-git-what-is-the-difference-between-long-and-short-hashes#comment117653573_43666045"">length varies depending on history length</a>). Git is smart enough to figure out what commit is meant with this hash.</li>
</ol>
<p>The <code>git cherry-pick</code> command allows you to pick a commit's hash from any branch and drop the contents of that commit into another branch. This creates a new commit hash in the branch with those contents, which becomes a HEAD commit.</p>
<p><code>git checkout -b new-branch &quot;$initialCommit&quot;</code> creates a new branch with <code>$initialCommit</code> becoming the HEAD commit.</p>
<p>In this way, we are able to change the author and author email for multiple commits (that we found with <code>readarray -t commitsArray &lt; &lt;(git log original-branch --author=&quot;Original Author &lt;originalauthor@email.com&gt;&quot; --format=format:&quot;%h&quot;)</code>).</p>
<p>Afterwards, we could choose to remove our original branch (<code>git branch -D original-branch</code>) and rename our new branch (<code>git branch -m new-branch original-branch</code>). Then if satisfied later decide to push our changes to GitHub, GitLab, or wherever your git project is stored in remotely. Done!</p>
","7","11541268","",""
"73805564","11584810","2022-09-21 18:45:11","0","59","<git><git-cherry-pick>","Is it possible to auto-continue on empty commits during git cherry-pick?","<p><em>Note: in thinking about this and looking over the git flow description again, I think I'm actually doing git flow wrong (making feature branches off of master instead of dev). Doesn't change my question, but before everyone starts jumping in to point out that I'm doing it wrong ;)</em></p>
<p>I am following something akin to <a href=""http://datasift.github.io/gitflow/IntroducingGitFlow.html"" rel=""nofollow noreferrer"">git flow</a>, where I have code in a <code>foo-release</code> branch off of master that I want to merge into my <code>foo-dev</code> branch off of a dedicated (and shared with other developers) dev branch used for testing.</p>
<p>I can't just <code>git merge foo-release</code> into my foo-dev because master has a bunch of unrelated commits that aren't in dev (I think this shouldn't be the case according to git flow, but for now it is), and those other commits would come with it if I tried to create a github PR after that (see <a href=""https://stackoverflow.com/questions/39048673/github-pull-request-shows-too-many-changes-commits"">here</a>)</p>
<p>I thought I'd found the answer in <code>git cherry-pick main...foo-release</code>, which just takes the commits native to my release branch and applies them to my dev branch.</p>
<p>But then say I merge my foo-dev into dev, deploy, find a problem, and then fix it in foo-release (in git flow you make all code changes in the release branch).</p>
<p>Now when I run <code>git cherry-pick main...foo-release</code>, some commits have already been applied, so in cherry-pick they are empty patches so it stops to complain about each one. If I run <code>git cherry-pick --continue</code> for each of those it seems to work ok, but that's really annoying.</p>
<p>What I want is something that cherry-picks a range, auto-skipping empties, and <code>--allow-empty</code> and <code>--keep-redundant-commits</code> don't seem to be it. Is there any way to do this?</p>
","3","11584810","",""
"73842712","19869556","2022-09-25 07:24:20","0","30","<git><gerrit><cherry-pick>","Cherry-pick is not happening , shows the fatal :not a git repository how do I solve this","<p>I want the latest changes from gerrit and need to pick the changes to putty. How can I pick Changes from gerrit to putty.</p>
","0","19869556","",""
"73850082","10853502","2022-09-26 05:57:44","0","633","<git><cherry-pick><git-cherry-pick>","How to grab a commit from another branch without a merge?","<p>At face value, this seems like a textbook use case for cherry pick.  Googling around, I find statements like:</p>
<blockquote>
<p>Cherry picking in Git means to choose a commit from one branch and apply it onto another.</p>
<p>The command git cherry-pick commit applies the changes introduced by the named commit on the current branch.</p>
</blockquote>
<p>So I go and try it... and half my file turns into merge conflicts (a regular merge turns a further 8 other files into merge conflicts, so that's not useful either).  The commit in question only changes ~5 lines or so, and not half the file.</p>
<p>For context, the 2 branches look roughly like:</p>
<ol>
<li>P -&gt; [20 commits] -&gt; A -&gt; B = other_branch</li>
<li>P -&gt; [30 unrelated commits] -&gt; C = my_branch</li>
</ol>
<p>The only thing commit B does is to change ~5 lines in foo.py
I want to cherry pick those changes into commit C, but apparently cherry pick hates me.</p>
<p>I found these other related questions:</p>
<p><a href=""https://stackoverflow.com/questions/69685815/what-use-case-is-git-cherry-pick-useful-for"">What use case is git cherry-pick useful for?</a></p>
<p><a href=""https://stackoverflow.com/questions/42530381/issue-with-cherry-pick-changes-from-previous-commits-are-also-applied"">Issue with cherry pick: changes from previous commits are also applied</a></p>
<p>They suggest that the above quotes are actually lies, and cherry pick is actually a fancy 3 way merge?  I think one of them (or another question) offers the following solution:</p>
<pre><code>git show commitB &gt; patch.txt
git apply patch.txt
</code></pre>
<p>I also tried</p>
<pre><code>git diff commitA commitB | git apply
</code></pre>
<p>but all I get is</p>
<pre><code>error: patch failed: foo.py:20
error: foo.py: patch does not apply
</code></pre>
<p>Is manual copy pasta my only solution?</p>
<p>On a related note, what/when is git cherry pick good for?  I can't think of any good use cases.  If 2 branches differ slightly, a plain old merge does almost the same thing.  If 2 branches differ greatly (my case), cherry pick just flops.</p>
","2","10853502","",""
"73872756","10497132","2022-09-27 19:14:09","0","54","<git><rebase><cherry-pick>","Remove two adjacent commits from history that cancel each other out. Why is this not simple?","<p>I have history like that:</p>
<pre><code>A &lt;- B &lt;- C &lt;- D &lt;- F
</code></pre>
<p>where F is newest.</p>
<p><code>B</code> and <code>C</code> cancel each other out (really its 3 commits: merge feature to master, revert the merge commit, merge pr containing the reverting commit), so that:</p>
<pre><code>git diff A D
</code></pre>
<p>shows no diff at all.</p>
<p>So it seems that applying D and F on top of A should be trivial. I want to get A &lt;- D &lt;- F (there's actually more commits after F).</p>
<ol>
<li>I've tried cherry-picking</li>
</ol>
<pre><code>git reset --hard A
git cherry-pick D F
</code></pre>
<p>and this is not trivial, as among D and F commits there's merge commits and <code>git cherry-pick</code> asks for additional info on which commit is to be treated as mainline.</p>
<ol start=""2"">
<li>I've tried rebasing</li>
</ol>
<pre><code>git branch -c branch_A A
git branch -c branch_D D
git rebase --onto branch_A branch_B branch_C
</code></pre>
<p>which based on git rebase docs should do exactly what I want. Yet still im getting conflicts to fix.</p>
<p>How do I do that and why is it hard?</p>
<p>I simply want the worktree after every re-applied commit to be exactly the same as worktree in the master branch at the same commit.Worktree's start from the same state at commits A or D and I want for every commit applied to D to do exactly the same as it was applied to A.</p>
<p>thanks in advance</p>
<p>EDIT: let me ask here a different but connected question.</p>
<p>As really the problem I have is to merge a reverted commit again to the branch. This is impossible now as the commit already exists in the history, so the merge results in no conflicts but no change at all, for git this is merged already in the past.</p>
<p>How do I do this merge? Maybe I shouldn't try to remove the commits from main branch, but rather modify a feature branch so that its no longer recognizable as something that was already merged? Will this route be easier?</p>
","3","10497132","",""
"73901696","11705021","2022-09-29 21:15:16","1","117","<git><bitbucket-server><git-cherry-pick>","How to identify in bitcuket if commit came from cherry pick or just copy","<p>I have git branch where a developer did cherry pick for one commit. After he pushed the commit, how can I know from bitbucket GUI (Pull request) if this commit came from cherry pick (as I expected) or he just copied the content and created new commit?</p>
","0","11705021","",""
"73928036","20144549","2022-10-02 17:43:36","1","170","<git><fork><branch><git-submodules><cherry-pick>","How can I track a subset of files from a remote repository?","<p>I'm trying to solve the following situation: I'd like to include a (not owned, public) project into mine, resizing a little bit the original file tree by removing redundant and/or not-needed files, and only leaving the bare minimum, BUT also retaining the possibility of tracking modifications to the original files.</p>
<p>I've tried making my own copy of said repository, adding the original as remote, but that only works up until I start deleting files from my own copy, at which point trying to fetch the remote changes fails as I'm missing files.</p>
<p>Is that normal? Did I mess something up in the process, and is there a more elegant way to accomplish this?</p>
","6","20144549","",""
"56744878","305118","2019-06-24 22:51:48","0","189","<git><rebase><git-rebase><git-log><git-cherry-pick>","Finding cherry-picked or rebased commits using hash of the original commit","<p>I have a large git repo with many branches (normally, I work only with a small subset of them, related to features owned by my team). Suppose I have a hash of a commit (e.g. copied from a pull request). This commit might have been merged into one of the branches I am interested in, or not. It might have been merged directly, or cherry-picked or rebased. In the two latter cases its hash in the log is different (because it is now actually a brand new commit, although with the same diff).</p>

<p>Provided that I know the hash of the original commit, how can I find all branches that contain it directly or contain it either in cherry-picked or rebased form?</p>
","1","305118","",""
"56798783","4296401","2019-06-27 21:42:29","3","495","<git><git-log><git-cherry-pick>","How to ignore cherry-picked commits when listing commits difference with a fully merged branch","<p>In a branching model where one branch A is always merged into another B, how can I list all commits in B but not in A while ignoring all cherry-picked commits and merges?</p>

<pre><code>     a1-------b2' -- A
   /    \       \
 b1--b2--m1--b3--m2--b4 -- B

b2': cherry-picked commit
</code></pre>

<p>In this case, it should list commits <code>b3, b4</code>.</p>

<p>Some research in the git manual:<br>
Ignoring merges and cherry-picked commits is already addressed by the <code>--no-merges</code> and <code>--cherry-*</code> options of the <code>git-log</code> command. But the <code>--cherry-*</code> ones use the commits symmetric difference (that is <code>A...B</code>) to match cherry-picks together. In this example, commit b2 is not part of it. <code>git log --cherry A...B</code> returns <code>b2, b3, b4</code>.</p>

<p>You can reproduce the example with:</p>

<pre class=""lang-sh prettyprint-override""><code>mkdir reprod; cd reprod; git init
git check-out -b B
git commit -m ""b1"" --allow-empty
git commit -m ""b2"" --allow-empty
git check-out -b A B^{/b1}
git commit -m ""a1"" --allow-empty
git cherry-pick --allow-empty B^{/b2}
git check-out B
git merge A^{/a1} --no-edit
git commit -m ""b3"" --allow-empty
git merge A^{/b2} --no-edit
git commit -m ""b4"" --allow-empty
git log A...B --cherry
</code></pre>
","0","4296401","",""
"74050232","4625189","2022-10-13 03:38:23","0","46","<github><cherry-pick>","github branch comparison show difference which are non-existing after cherry-pick","<p>There are two branches A, B, C. A was first merged into C. Then Using github desktop, I &quot;cherry-pick&quot; a few commits from A to B.</p>
<p>However, on github website, using branch comparison on A and B, I still see differences related to those &quot;cherry-picked&quot; commits. But if I open the file on both A and B, I see the contents are same.</p>
<p>Using git command line (Linux) to diff A and B, I don't see those difference (as expected).</p>
<p>Looking into the commit history of A and B, I found the SHA Id of each &quot;cherry-picked&quot; commit is different for  <em>same content</em> between A and B. It seems &quot;cherry-pick&quot; creates new SHA id for each commit(a big surprise to me).</p>
<p>Now, my question is: am I able to merge from B to C ? Pull Request shows differences at places where are supposed to be the same content. It also shows &quot;mergeable&quot;. I am worried I might run into merge conflict when I click the merge button.</p>
<p>What is the best solution as this point ?</p>
<p>Thanks,
Frank</p>
","0","4625189","",""
"56888983","6236042","2019-07-04 13:25:19","0","37","<git><git-revert><git-cherry-pick>","Undoing some merges/commits, but keeping some","<p>I have a bad merge, followed by a couple of good commits. I tried to revert the bad merge, however I do not want to loose these changes (i.e. I do not want a further commit, which undoes the changes), I just dont want them in my branch. </p>

<p>So my log looks something like this:</p>

<pre><code>7975c057 | Reverts bad merge
40a01d2f | Good commit
3b2c3825 | Good commit
1f3f1858 | Bad merge - code shouldnt be in this branch
37f71a89 | Good commit
... (more good commits...)
</code></pre>

<p>How can I remove <code>1f3f1858 | Bad merge</code> and <code>7975c057 | Reverts bad merge</code> from my branch?</p>
","0","6236042","",""
"74151874","134841","2022-10-21 09:52:57","0","17","<git><cherry-pick><git-cherry-pick>","How to cherry-pick changes to content extraced into a separate file to a version before the extraction?","<p>Suppose I have in the past split out a smaller file from a larger one. The larger one is still in place:</p>
<pre><code>large.txt   --&gt;     large.txt
            \-&gt;     excerpt.txt
</code></pre>
<p>Now, I've made a change to excerpt.txt that I'd like to cherry-pick back to a version of the repo before it was split out of large.txt.</p>
<p>Since large.txt was modified when excerpt.txt was extracted from it, I expected git to figure out where the excerpt.txt content came from an be clever enough to patch up the same content in large.txt instead. But it doesn't, creating a copy of excerpt.txt when cherry-picking and claiming it conflicts.</p>
<p>I have cranked up <code>merge.renamelimit</code> to an insanely high number, but it doesn't even attempt to use inexact rename detection, because I don't see the corresponding progress report (the repo is large enough for this to be slow enough for me to notice).</p>
<p>Anything else I can do to make git find the source of the content and patch it there?</p>
","0","134841","",""
"74163261","304209","2022-10-22 11:47:37","2","205","<git><githooks><pre-commit-hook><git-cherry-pick><git-rewrite-history>","How to recreate git commit history but with applying pre-commit hook?","<p>I'm trying to rewrite git repository history and apply new <code>pre-commit</code> hook:</p>
<ol>
<li>Take every commit</li>
<li>Apply <code>pre-commit</code> hook</li>
<li>Keep the original metadata (author, date, message)</li>
<li>Resolve conflicts manually, if any (the hook can alter the commit)</li>
<li>Commit to a new repo</li>
</ol>
<p>The end state is a new repo with a different commit history.</p>
<p>What I already found:</p>
<ul>
<li><code>cherry-pick</code> doesn't run <code>pre-commit</code> hook.</li>
<li>I can do</li>
</ul>
<pre><code>git cherry-pick --no-commit
git commit --no-edit
</code></pre>
<p>But it doesn't preserve the commit date. Also, not sure how to do that for each commit in history (unless I write a e.g. Python script for that).</p>
<p>Any ideas on how to do that efficiently?</p>
","2","304209","",""
"57001855","11706125","2019-07-12 07:10:48","1","164","<git><tortoisegit><git-cherry-pick>","How to incluce source branch name as part of message when use TortoiseGit Cherry Pick","<p>in TortoiseSVN, when merge commits from one branch to another branch path, it will auto generate message with source branch, E.g. ""Merge revision(s) [revision] from [branch path]:""</p>

<p>how i can get same feature in TortoiseGit Cherry Pick? 
currently in TortoiseGit Cherry Pick has one option ""add 'cherry picked from'"", if i check this option, it will add SHA-1 as part of message. 
E.g. (cherry picked from commit xxxxxxxx)</p>

<p>is any option make it be source branch? E.g. (cherry picked from [branch path]: commit xxxxx)</p>
","0","11706125","",""