Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"57492723","66191","2019-08-14 10:16:28","0","1938","<git><git-flow>","git-flow: how to handle version numbers from changes to released branch","<p>I'm new(ish) to git and the company I work for are moving from subversion to git.
We're looking at using the git-flow workflow and am reasonably happy with how this will work. However, I have one question regarding ""point"" releases from the release branch. Let me explain what I mean by this.</p>

<p>We decide to create a release so we create a new release branch, say 1.0. We continue development on the ""develop"" branch, adding new feature branches, etc.
The 1.0 release is issued to our test team and they find issues with it. As I understand, these issues are supposed to be fixed on the release branch, 1.0 and then when testing is finished, all changes are merged from the release 1.0 branch to master and develop, and tagged on master as an official release.</p>

<p>Hopefully I've got this right. </p>

<p>Now, during the testing of release 1.0 we may need to provide the test team with a new point release, i.e. 1.1 which includes the changes we've made to fix their issues. We need it to be called 1.1 for traceability, i.e so we can ensure they're actually testing 1.1. However, git-flow seems to suggest that this should be a separate release branch, i.e. 1.1.</p>

<p>I guess the question I'm asking is how to we ""mark"" the release branch as 1.1 even though it is called 1.0.</p>

<p>I'm prepared to accept that I may be coming at this incorrectly given we've previously only worked with svn, and would welcome any clarifcation offered. </p>
","0","66191","",""
"54597095","8456062","2019-02-08 17:00:38","10","6369","<git><git-flow><git-workflow>","Is a develop branch useless in git-flow?","<p>Everywhere I look for the right way to use GIT in a team, we always get referred to git-flow.</p>
<p>We started to use this scheme as our bible at the beginning:</p>
<p><a href=""https://i.stack.imgur.com/XgtXO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XgtXO.png"" alt=""image"" /></a></p>
<p>Time passed, and we finally found that keeping <code>master</code> as the stable branch with tagged commits was a waste of time.</p>
<p>Why would you <em>TAG</em> your stable commit and then <em>PUSH</em> to <code>master</code> the same version you already tagged? The tag exists, you may return to this commit any time. Why should I bother to keep this branch just to contain only the tags?</p>
<p>Here is the flow we use, and it works like a charm:</p>
<ul>
<li><p>Master : Is actually our development branch</p>
</li>
<li><p>Release: We create a release branch to do our last release test case then we add fix if needed.</p>
</li>
<li><p>Feature: We branch from Master to create a feature then we send the pull request to master.</p>
</li>
</ul>
<p>Actually, it's the <em>same</em> as git-flow, without a branch containing stable.</p>
<p>Another advantage of this, is that <code>master</code> is the <code>develop</code> branch. So when a new teammate comes in the project, he may start by cloning the project and his <code>master</code> is already up to date with the actual development.</p>
<p>In image:</p>
<p><a href=""https://i.stack.imgur.com/QakUq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QakUq.png"" alt=""image"" /></a></p>
<p>My question is, why would you use the original git-flow with 5 branches if you could manage only 4 branches with the <em>same</em> result?</p>
","1","8456062","0","0"
"54622686","11042853","2019-02-11 00:53:17","0","349","<git><git-flow>","looking for a git workflow that supports nested develop branches","<p>Here's my problem - I have a codebase that has to be deployed to three different environments. 90% of the code is common. The other 10% is unique to each environment. I would like to use the git-flow workflow (master, develop), but I feel like I need a second layer of ""develop"" branches (develop_a, develop_b, develop_c) that are branched from ""develop"". If I were to do that I could make common code changes in ""develop"" and then periodically merge the develop changes into develop_a, develop_b, and develop_c. At the same time I can be working on issues specific to develop_a, develop_b, and develop_c in branches off of those branches. </p>

<p>Using this approach makes the ""master"" branch pretty much meaningless from the perspective of it being the place to go for releasable software. develop_a, develop_b, and develop_c are the branches that contain the full complement of software to be released for each environment. I'm trying to find out if there is some establish workflow or best practice that supports this. I don't think different repositories for a,b,c makes sense because of the large amount of common code. </p>

<p>I think the better/longer term solution would be to refactor the code in such a way as to create interfaces and classes that support the uniqueness of develop_a, develop_b and develop_c, with the version (a,b,c) to deployed being resolved at runtime (there are other concerns and complicating factors which could make that impossible). I believe I have the luxury of exploring that approach in the long-term, but I also have a short term need to get a workflow established so people can begin working on these versions so we can get them out in the field for testing in the near future.</p>

<p>Any thoughts would be most appreciated.</p>
","2","11042853","0","0"
"21499405","359476","2014-02-01 14:42:23","5","14250","<git><git-flow>","git flow: fatal: Index contains uncommited changes. Aborting","<p>I want to finish a feature using git flow but I get a fatal error: <code>fatal: Index contains uncommited changes. Aborting.</code></p>

<pre><code>&gt;git --version
git version 1.8.3.msysgit.0

&gt;git flow feature list
* google-oauth

&gt;git branch
  develop
* feature/google-oauth
  master

&gt;git flow feature finish google-oauth
fatal: Index contains uncommited changes. Aborting.

&gt;git status
warning: LF will be replaced by CRLF in package.json.
The file will have its original line endings in your working directory.
# On branch feature/google-oauth
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   app.js
</code></pre>
","1","359476","0","0"
"59507140","3025856","2019-12-28 00:06:56","1","204","<git><git-merge><git-flow><git-history>","Establishing a ""clean"" git history for explicit merges","<p>I have a git repository that uses <strong>GitFlow</strong> (i.e., it has <code>master</code>, <code>develop</code>, <code>release-*</code>, and <code>feature-*</code> branches). The collaborators have not been using <em>explicit merges</em> (i.e., <code>git merge --no-ff</code>), however, and so e.g. <code>git log --first-parent</code> does not provide a simple roll-up of the merge history to date.</p>

<p>Moving forward, the collaborators will be using explicit merges. Before they do, however, I'd like to make sure that the history is ""clean"", so that no prior history is displayed when calling <code>git log --first-parent</code>. But, obviously, I want to maintain the <em>actual</em> commit history when calling an unfiltered <code>git log</code>.</p>

<p>My inclination is to do the following:</p>

<pre><code>$ git checkout develop
$ git checkout --orphan CleanSlate
$ git rm . -r -f
$ git commit --allow-empty -m ""Establish a clean slate for the develop branch""
$ git merge --no-ff --allow-unrelated-histories develop -m ""Introduce all legacy files""
$ git checkout develop
$ git merge CleanSlate
</code></pre>

<p>Basically, the idea is that we'll:</p>

<ol>
<li>Establish a fresh (<code>--orphan</code>) branch with no prior history</li>
<li>(<em>Optional</em>) Remove all files from the working tree so that we're not recommitting them</li>
<li>Establish an initial commit so that we have something to merge into</li>
<li>Perform an <em>explicit merge</em> (i.e., <code>--no-ff</code>) from the <code>develop</code> branch, acknowledging the unrelated histories</li>
<li>Fast forward <code>develop</code> to the <em>explicit merge</em> we just performed so that represents the history</li>
</ol>

<p><strong>My Question(s):</strong> Are there consequences to this approach that I should be aware of before applying it to a production environment? Are there alternative or simpler approaches that are preferable for accomplishing this type of scenario?</p>

<p>(In testing, this seems to achieve my objective with no adverse impact on existing branches or workflow. But, with git, I'm always wary of what I don't know I don't know.)</p>
","0","3025856","0","0"
"59711276","12351502","2020-01-13 06:03:36","1","1152","<git-flow>","Initializing git flow","<p>I already have an existing repository with a couple of branches. I try to initialize git flow here, using the source tree. But when I execute ""git flow"" command and it tries to initialize the git flow, I get the following error:</p>

<pre><code>E:\IdeaProject\IdeLab1&gt;git flow init
Fatal: Working tree contains unstaged changes. Aborting.
</code></pre>

<p>What's wrong?</p>
","0","12351502","0","0"
"60331972","1241692","2020-02-21 03:53:54","1","91","<git><git-flow>","merge code problem from develop to master on git flow","<p>On gitflow. After a hotfix commit on the master branch without merge to develop, what should we do when we merge code from develop to master next time?</p>

<ol>
<li>If we direct do the merge, code will be merged, and there will be a diff between master and develop.</li>
<li>Or we need a code review here? </li>
</ol>
","0","1241692","0","0"
"22659792","165345","2014-03-26 11:36:44","1","148","<git><git-flow>","enforce pull/push of master branch when releasing with git flow","<p>When releasing a new version using <code>git flow release finish 0.1.7</code> the local master branch gets updated regardless of whether it is up to date or not. Furthermore the new master branch does not get pushed to our central repository (gitlab) after the release.</p>

<p>This led us to some difficulties in the past. We had merge conflicts in the master branch when someone forgot to pull the master branch before releasing a new version and pushing it afterwards. Then the local history of the master branch looked something like this</p>

<pre><code>0.1.2 --&gt; 0.1.6 --&gt; 0.1.7
</code></pre>

<p>while the master branch on the central repository contained the following tags:</p>

<pre><code>0.1.2 --&gt; 0.1.3 --&gt; 0.1.4
</code></pre>

<p>So, the new versions 0.1.6 and 0.1.7 were missing in our central repository while the developer didn't see 0.1.3 and 0.1.4 in its local repository.</p>

<p>Is there a way to enforce the following commands before running <code>git flow release</code>:</p>

<pre><code>git checkout master
git pull
git checkout release-0.1.7
</code></pre>

<p>and calling this afterwards:</p>

<pre><code>git checkout master
git push
git checkout develop
</code></pre>

<p>Any idea?</p>
","0","165345","0","0"
"41739985","3758289","2017-01-19 10:52:03","4","1489","<maven><version-control><pom.xml><git-flow><release-candidate>","Maven and git-flow, version strategy for release candidates","<p>We are trying to apply the git-flow model to maven projects.</p>

<p>We use the <code>develop</code> and <code>feature/XXX</code> branches to work on <code>-SNAPSHOT</code> versioned artifacts, that are deployed in our <code>DEV</code> and <code>TST</code> environments.</p>

<p>When the apps are ""ready"", we have ""Release candidates"" : the code is pushed on the <code>release</code> branch, we edit the pom to update the version (replace the <code>-SNAPSHOT</code> by <code>-RC1</code>), this version is built and stored in the repository manager, and then deployed on our <code>UAT</code> env. </p>

<p>If some fixes are needed, we create others <code>-RCx</code> versions in the same <code>release</code> branch, these artifacts are archived in the repository manager, and deployed on the <code>UAT</code> env. So we can precisely track the bug fix in the different versions.</p>

<p>Once a <code>-RCx</code> version is approved, the <code>release</code> branch is pushed to <code>master</code>, the pom updated to remove the <code>-RCx</code>, built, and stored in the repository manager before being deployed in <code>PROD</code> env.</p>

<p>But with this way of doing things, the binaries that are deployed in <code>PROD</code> and in <code>UAT</code> are not strictly the same : the POMs are different in the 2 WARs, because of the <code>&lt;version&gt;</code> tag. <em>And it is not really a good practice.</em></p>

<p>If I correctly understood the git-flow model, the ""final"" version number (without a <code>-RCx</code>) should be set at the creation of the <code>release</code> branch, and the same version is ""alive"" until this branch is pushed to the <code>master</code>, right ? In this case:</p>

<ul>
<li>We lose the information of what version of the application is really deployed in <code>UAT</code> (as we lost the <code>-RCx</code> identifier, we may not know if the deployed version contains the last bugfixes or if it is an older version that is deployed...)</li>
<li>In the repository manager, we cannot know if an artifact has been built from the <code>release</code> branch or from the <code>master</code>, as there is no change of the version number anymore when pushing the <code>feature</code> branch into <code>master</code>.</li>
</ul>

<p>What is better ? What are the pros/cons of these 2 ways of doing ? (Not the same binaries on the different envs -vs- not having well-identified release candidates.)</p>

<p>How do you (or would you) manage <em>Release Candidates</em> with a Maven project in the git-flow model ?</p>
","0","3758289","0","0"
"38576452","1391441","2016-07-25 20:03:25","0","50","<git><git-flow>","Followed git-flow model, not sure if branches are correct","<p>I tried to follow the <a href=""http://nvie.com/posts/a-successful-git-branching-model"" rel=""nofollow noreferrer"">git-flow</a> branching model in my Github repo.</p>

<p>After following the instructions, I <a href=""http://nvie.com/posts/a-successful-git-branching-model/#finishing-a-release-branch"" rel=""nofollow noreferrer"">arrived at the point</a> of merging the <code>release</code> branch into the <code>develop</code> branch. I did that with no issues, and proceeded to remove the <code>release</code> branch (also with no issues).</p>

<p>Now I'm positioned in the <code>develop</code> branch, and when I do a <code>git status</code> it tells me there are commits that need to be pushed:</p>

<pre><code>$ Your branch is ahead of «origin/develop« by 3 commits.
</code></pre>

<p>These are the three commits I did on the, now merged and deleted, <code>release</code> branch.</p>

<p>At this point I'm not sure I should be getting that notice, but I <code>git push</code> anyway as <code>git</code> is asking me to.</p>

<p>Finally I got to Github and look at my network, which looks like this:</p>

<p><a href=""https://i.stack.imgur.com/gU5WC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gU5WC.png"" alt=""enter image description here""></a></p>

<p>Is this how it these two branches are supposed to look after following the git-flow model? The green line confuses me, as I would've expected to see only two lines: <code>master</code> and <code>develop</code>.</p>
","0","1391441","",""
"19636745","1360693","2013-10-28 13:59:24","4","2580","<git><version-control><merge><git-branch><git-flow>","Merge changed files from feature to a hotfix git flow","<p>I have 3 branches</p>

<p>develop, master and a feature branch which is made with git flow feature start. </p>

<p>Now I want to make the commits which are made from the feature to be merged into a separate hotfix so I can merge it into the master without merging the developer branch into the master how can I do that?</p>

<p>To clerify</p>

<p>develop has 100+ commits which are made for a separate release, </p>

<p>I made branch out of the dev, and want to make it into a separate hotfix.</p>

<p>The problem is a hotix is a master originating branch, so if I do git merge feature git will merge ALL of the developer commits with the few commits I amde on the feature. </p>

<p>The question is. how to cherry pick the feature?</p>

<p>EDIT:</p>

<p>@Pigueiras </p>

<p>I am more like in this situation, I draw a diagram.
<img src=""https://i.stack.imgur.com/dzylJ.png"" alt=""enter image description here""></p>

<p>I need to ONLY transfer the red noted commits from the feature to the hotfix. </p>
","1","1360693","0","0"
"19638292","1607660","2013-10-28 15:06:07","17","15519","<git><git-flow>","git flow - how to start working on existing feature branch","<p>I would like to start working on another developer's feature branch (we use git and git flow).
AFAIK The branch has been published (pushed). How can I get it to my local repository?</p>

<p>I tried:</p>

<pre><code>git flow feature pull origin/XXXXXX-1003b

fatal: 'origin/XXXXXX-1003b' does not appear to be a git repository
fatal: The remote end hung up unexpectedly
Failed to pull from remote 'origin/XXXXXX-1003b'.
</code></pre>

<p>And:</p>

<pre><code>git flow feature pull XXXXXX-1003b

fatal: 'XXXXXX-1003b' does not appear to be a git repository
fatal: The remote end hung up unexpectedly
Failed to pull from remote 'XXXXXX-1003b'.
</code></pre>

<p>Please advise. Thanks</p>
","0","1607660","",""
"31810287","4533188","2015-08-04 13:10:56","6","1662","<git><access-control><git-flow>","Git: How to protect develop/master branch in git-flow (from rookies) via access control?","<p>The previous days I read <a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow"" rel=""noreferrer"">https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow</a> to which I have a a question.</p>

<p>If one uses the Feature Branch or the Gitflow Branch Workflows in a project: Is there an option that a user pushes a feature branch as a tracking feature branch to origin issues a pull request and ONLY the maintainer of the project is able to merge the tracking feature branch into the master (Feature Branch Workflow) or the develop (Gitlow Branch Workflow)?</p>

<p>In other words: Is it possible to assign branches to users so that one does not have immediate need for the Forking Workflow if one does not want to over-complicate things but still have a guaranteed code review which secures the master/develop branch from rookies?</p>
","1","4533188","0","0"
"31812933","4533188","2015-08-04 15:09:52","1","757","<git><git-flow>","Git: Combining git-flow with forking workflow?","<p>The previous days I read <a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow"" rel=""nofollow"">https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow</a> to which I have a a question:</p>

<p>Is there a viable reason to combine the Gitflow Workflow and the Forking Workflow for a project and if so how would one do that in a useful manner?</p>
","0","4533188","",""
"31817210","685125","2015-08-04 19:03:10","36","19807","<git><git-branch><git-flow>","git - confusion over terminology, ""theirs"" vs ""mine""","<p>I'm completely confused about what mine vs theirs means. In this specific case, I've got a feature branch where I just squashed about 80 commits via <code>rebase -i</code> and am merging this back into <code>develop</code>. I got a few conflicts, and I just want to use whatever code is on my feature branch. I tried ""mine"" but that actually seemed to do the opposite.</p>

<p>Could someone shed some light on this terminology?</p>
","0","685125","0","0"
"50007298","613408","2018-04-24 17:05:09","7","2237","<bash><git><git-flow>","How do I get current git tag without git binary?","<p>I would like to get current branch or tag by reading only the content in <code>.git</code> folder. </p>

<p>I have read many solutions and they all depend on executing <code>git status</code>, <code>git branch</code>, <code>git describe</code>, or something similar and then parse the output. <strong>But what if we can't be sure that there is a <code>git</code> binary to call?</strong> We can't rely on that. </p>

<p>For a branch, it looks almost very straight forward: <code>cat .git/HEAD</code>, but for tags, it get's a little more complicated. I use <code>git-flow</code> to create my feature-branches and my tags.  When I switch to a tag I get:</p>

<pre><code>$ git checkout tags/v0.11.2 
Note: checking out 'tags/v0.11.2'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &lt;new-branch-name&gt;

HEAD is now at 86ce70a... Merge branch 'hotfix/0.11.2'
</code></pre>

<p>And now the content at <code>.git/HEAD</code> is just a hash: <code>86ce70a29fdb2c0bdb0b683d00ab61607d8531de</code>.</p>

<p>If I want to see the content of the object related to that hash I do:</p>

<pre><code>$ zlib-flate -uncompress &lt; .git/objects/86/ce70a29fdb2c0bdb0b683d00ab61607d8531de
commit 309tree 9d01f72a058e705a7bc6f9ffc5489096edd2e85a
parent 8c767a0d7538f735c5a537ed14f7f96eb8ae05f8
parent 67d98e0149c72856ddb07ff42197071a4c35fa87
author ####################################### 1520980212 -0600
committer #################################### 1520980212 -0600

Merge branch 'hotfix/0.11.2'
</code></pre>

<p>The last line is the message I put in the commit, but it doesn't mean I can get the tag version from there as the message is different on every commit.</p>

<p>I also tried to find any file containing that hash within the <code>.git</code> folder running: </p>

<pre><code>$ grep -ilr `cat .git/HEAD` .git/
.git/gitk.cache
.git/HEAD
.git/FETCH_HEAD
.git/logs/HEAD
.git/logs/refs/heads/master
.git/logs/refs/remotes/origin/master
</code></pre>

<p>But none of the files had anything that pointed me to the tag name.</p>

<p>I'm running out of ideas. Any light would be really appreciated. </p>
","7","613408","0","0"
"15440291","1036530","2013-03-15 19:06:25","6","3221","<git><git-flow>","Is there a way to make git flow show the commands it is executing behind the scenes?","<p>Is there any way to make git-flow tell me ahead of time the exact git commands it will execute when I do a flow command; or tell me as it is dong it?</p>

<p>All i can see the output and a summary?</p>
","0","1036530","0","0"
"38672977","5265463","2016-07-30 10:42:11","2","636","<git><merge><atlassian-sourcetree><git-flow><hotfix>","Long term support using git-flow to merge a hotfix to develop branched off the support branch","<p>Doing experimental learning of git flow for my new project.. I noticed the following:</p>

<p>The following scenarios: </p>

<ol>
<li><p>Normally git-flow workings:</p>

<p><code>git flow hotfix start 1.1.2</code></p>

<p>Will create a branch based on master and when done merges with master and develop. </p></li>
<li><p>Branching based on another branch</p>

<p><code>git flow hotfix start 1.1.3 support/1.x</code></p>

<p>But then the hotfix created based on support branch will merge back into that support branch and not back into develop nor master but will be tagged when finished.</p></li>
</ol>

<p><strong>Problem</strong></p>

<p>If my master branch is currently in <code>v3.2.0</code> but the hotfix was for an issue in a code section introduced in <code>v1.1</code> but still relevant and used in the current development branch, how do I go about merging them together?</p>

<p>The reason for this question is that some clients would need long term support of a specific older version even if your newer version is more superior.</p>

<p><strong>Possibly solution but not( using SourceTree)</strong></p>

<p>Atlassian SourceTree always only merge finish hotfix with master and develop but never with the support branch that is needed by clients <strong><em>(tested thrice)</em></strong></p>
","0","5265463","0","0"
"29760651","38765","2015-04-21 00:13:46","25","24006","<git><branch><git-flow>","Rename a branch in git flow","<p>Is it possible to rename a feature branch using git-flow?</p>

<p>I tried looking up <code>git flow help</code> and <code>git flow feature help</code>, and also the <a href=""http://danielkummer.github.io/git-flow-cheatsheet/"" rel=""noreferrer"">git-flow cheatsheet</a>, but couldn't anything.</p>

<p>Alternatively, is it safe to just use <code>git branch -m feature/new_name</code>?</p>
","1","38765","0","0"
"29793288","705602","2015-04-22 09:31:16","2","737","<ios><git><continuous-integration><continuous-deployment><git-flow>","Adhering to git flow rules while taking the App Store review times into account","<p>We've been using git flow for our iOS projects happily for a while now. However, something dawned on me today which means we're actually not following the git flow specification.</p>

<p>When we start doing the final testing of a release, we release a BETA version to several hundred people within our organization. Now, this BETA is basically a Release Candidate since no additional bugs may be found in which case it's ready for App Store release. Since there's 7+ days of review time we always upload this BETA to iTunes Connect and set it to wait for review.</p>

<p>We release this BETA from a tag on the master branch after merging in its release branch. However, git flow dictates that the master branch must reflect what is currently in production. Now, there will always be a wait time until it's actually in production (so we can't not break the git flow model), but if serious bugs are found in this BETA, we remove it from the review queue meaning it's not going to be released, and now the latest commit on master is not reflective of what's going to be in production.</p>

<p>How do you get around this in your workflow?</p>
","0","705602","0","0"
"16562469","209706","2013-05-15 10:19:41","5","1148","<git><git-flow>","Store git-flow branch naming configuration in the repository","<p>Currently, each user has to configure Git-flow first after having cloned the repository. How to store this branch naming configuration in a committable file (to be stored in the repository), so after having cloned the repository, it can be used with Git-flow out of the box?</p>
","0","209706","0","0"
"68902866","1596746","2021-08-24 06:42:42","1","267","<git><git-flow>","How to create a gitflow release with Pull Requests?","<p>Usually the checklist for a gitflow release would be something like:</p>
<ul>
<li>Create release branch off develop</li>
<li>Merge release branch into master</li>
<li>Merge release branch into develop</li>
</ul>
<p>I would like to introduce pull requests for each release, but I wonder how to handle merge conflicts, especially when merging <code>release/*</code> into master.
Right now I am doing the following:</p>
<ul>
<li>Create release branch off <code>develop</code> (<code>release/x</code>)</li>
<li>Create a PR from <code>release/x</code> into <code>develop</code></li>
<li>Create a &quot;target&quot; branch off <code>master</code> (let's call it <code>release/X-target</code>)</li>
<li>Merge <code>release/x</code> into <code>release/x-target</code> (<code>git merge -X theirs release/x</code>)</li>
<li>Create a PR from <code>release/x-target</code> into <code>master</code></li>
</ul>
<p>Would this be the right way to handle gitflow releases with PRs?</p>
","0","1596746","",""
"17393160","2352664","2013-06-30 17:49:16","9","3416","<git><testing><continuous-integration><workflow><git-flow>","git workflows: how to integrate and test feature branches without continuous delivery?","<p>I like the ""github flow"" workflow described by Scott Chacon very much: <a href=""http://scottchacon.com/2011/08/31/github-flow.html"">http://scottchacon.com/2011/08/31/github-flow.html</a></p>

<p>He describes why github does not use the git flow workflow described by Vincent Driessen (<a href=""http://nvie.com/posts/a-successful-git-branching-model/"">http://nvie.com/posts/a-successful-git-branching-model/</a>), and we don't use it for the same reasons, where the most important reasons are, that it does not work well with pull requests and it does not fit well to website development where you don't have ""officially released versions of a software product"" but continuously improve the website.</p>

<p>We are developing a large online community in a small team with a lot of old legacy code (some code is more than 10 years old) with bad test coverage. We are using a similar workflow as github, currently we use feature branches for developing, and use pull requests to integrate them into the master branch, do peer reviews, ask for feedback etc. When the feature has been finished and approved by others, it's merged into master. A few times a week we push master to a staging enviroment which is used by our testers, as well as beta users. We try to release the master branch to public every two weeks, so every feature branch which gets merged has to be tested good enough and ""more risky feature branches"" are not merged in the last few days, until the release to public is done.</p>

<p>Thats not a perfect workflow, because when merging of ""risky features"" to master starts again, we can't use master to deploy hotfixes to public anymore. </p>

<p>Github uses continuous delivery for deployment, which is not an option for us, we do need people to test a feature before we can release it to public. </p>

<p>A pull request can only be merged into one branch. So it's a straightforward workflow at github with only one long running branch which is master. Perhaps we should not release every two weeks, but release pull requests when they are merged to master? But that way it's hard to test, we could run the unit-tests we have on the feature branch before it is merged, and we could deploy the branch to staging for beta testers, but that's not always that easy, sometimes you have to do database changes manually (we can't do it automatically, it's too risky because our staging server for beta testers uses the production database), so you have to wait until this is done by admins. And the bigger problem is, if you release only feature branches to the beta users, they are not integrated, they will see new features, and features getting removed perhaps multiple times a day. Not to say that you cannot run integration tests, or you have run them very late just before release, when a feature branch is just merged to master...</p>

<p>On the other hand, if we use 2 long running branches like develop and master as described in git-flow, we can solve the hotfix problem, we could use pull-requests to merge feature branches to develop, we could use a pull request for a release branch for merging recent changes into master, but we can't merge back changes to develop using the pull request workflow.</p>

<p>As you can see in the github flow article (#6 – deploy immediately after review), github engineers can deploy not only to production, but also to a staging environment. And not only engineers can do that, but also support and designers. But how does it work with only one integration branch? You don't need a staging environment if the last pull request is going to production anyway in a few hours or minutes. Sometimes they seem to deploy feature branches to staging, that makes sense, but they are not integrated, so what I described above will happen, you see features coming and going in your staging environment, even if they merge changes from master before deploying a feature-branch to staging (do you think this would be a good idea?).  Or does it make sense to have multiple staging environments, one for every feature branch? But this way again you loose advantages from continuous integration. And as said, I don't think you can do this in a beta testing environment.</p>

<p>I see problems in both workflows, git flow and github flow, I like github flow better, but it seems difficult if you don't have a good test coverage and need more testing by people.</p>

<p><strong>So, how can I integrate and test feature branches, when they need more testing by people (qa and beta testers)?</strong></p>
","4","2352664","0","0"
"17401279","947166","2013-07-01 09:35:00","2","2171","<git><github><git-flow>","Should we push all local git branches on the remote repo?","<p>I am working on a project &amp; try to follow git-flow. Hence, I branch out quite often on my local machine. When I'm done, I would merge these branches into the <code>develop</code> branch and then delete the local branches. This happen for most bug fixes and small features. I do push important branches.</p>

<p>This is because I don't want to keep too many remote branch on my Github repo.</p>

<p>Is this an acceptable practice? I realize that by doing this, I might make it hard to find commits of a merged branch, since I no longer have a label pointing to it</p>

<p>Hope to hear your opinion. Thanks</p>
","3","947166","0","0"
"17432736","145319","2013-07-02 18:07:13","1","1621","<git><git-flow>","In git flow branching model, how can one create the release branch from master instead of develop?","<p>In the git flow branching model (as described in <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">this</a> post) states that one should create <code>release</code> branches by branching off of <code>develop</code>.</p>

<p>This can work nicely but as far as I can tell can also cause unintended changes to make it to the <code>release</code> branch. Let's say that you are working on features A, B and C and you merge them to <code>develop</code>. A few days later features A and B become stable enough for release but feature C is still behind. You don't want features A and B to be delayed because of feature C and you can't revert feature C from <code>develop</code> because other developers depend on it.</p>

<p>As a solution to this I thought branching the <code>release</code> off of <code>master</code> and then merging features A and C on to it.</p>

<p><em>(I'm still not 100% familiar with git so some of my statements below might be completely wrong so please do clarify.)</em></p>

<p>The problem with this is that because features A and B were in development together with feature C and the developers kept their feature branches up to date with the <code>develop</code> branch, some of C's code ended up in feature branches A and B. If I merge these branches on to the <code>release</code> branch then I might end up with code from C in there. I'm still getting used to the idea of rebasing but if I try using rebase instead of merge I get all these conflicts. Perhaps I could cherry pick the commits or something like that but this seems too complicated to do every time I want to put some code on the release branch.</p>

<p>Could you guys let me know if there is a easy way to achieve this?</p>
","0","145319","0","0"
"17436024","1830955","2013-07-02 21:20:13","21","12496","<git><deployment><release-management><git-flow>","Adapting the git-flow model for pre-production environments","<p>I am thinking of extending the git-flow model for my current workplace, due to a particular scenario. But my scenario is so common that I'm surprised no-one's done this before with the git-flow model, and this makes me think I've missed an obvious problem. My question is: Is my proposed extension flawed?</p>
<p>The scenario: I have a number of development teams who develop from a common codebase, and we push out releases through several (permanent) environments: first to the systems integration environment (SIT), then to the UAT environment, then to pre-prod, and finally to production. This is strictly sequential, although any release candidate may fail in any environment, and so not make it any further. Thus each later environment is simply a slower-moving version of the previous environment.</p>
<p>We are introducing git for source control, we need a workflow, and git-flow looks like a good start.</p>
<p>We asked ourselves how to capture (i.e. how to know) what's in each environment at any time. The git-flow model seems to have essentially two core states: <code>main</code> and <code>develop</code>. They have an &quot;infinite lifespan&quot;. Other branches are just <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">&quot;supporting branches&quot;</a> with a &quot;limited life time&quot;. They exist only to allow development and to go from development to production (via a temporary release state). The git-flow model is based around going from development to release.</p>
<p>However, this doesn't map logically onto our scenario, with its multi-stage release sequence. I'm fine with the <code>develop</code> branch, of course. And the <code>main</code> branch clearly does map to our production environment. The <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">original git-flow description</a> says this about <code>main</code>:</p>
<blockquote>
<p>Therefore, each time when changes are merged back into main, this is a new
production release <em>by definition</em>. We tend to be very strict at this, so that
theoretically, we could use a Git hook script to automatically build and roll-out
our software to our production servers everytime there was a commit on main.</p>
</blockquote>
<p>Since <code>main</code> is a continuous record of production, it seems consistent that we should <em>extend the git-flow model</em> to have corresponding branches for SIT, UAT, and pre-prod. After all, they are permanent environments, with strict release procedures. They just change a bit quicker than production.</p>
<p>These additional, permanent, branches sit between <code>develop</code> and <code>main</code>, just as their corresponding environments do.</p>
<p>This now means it's easy to track releases to each environment, and the state of each environment. And merges for each are easier, too: the SIT branch requires a merge from <code>develop</code>, the UAT branch requires a merge from the SIT branch, the pre-prod branch requires a merge from the UAT branch, and finally the <code>main</code> branch (for production) requires a merge from the pre-prod branch. Each later branch is simply a slower-moving version of the previous branch.</p>
<p>Have I missed something?</p>
","3","1830955","0","0"
"34018045","4031292","2015-12-01 10:26:27","0","53","<git><version-control><merge><git-flow>","git / git-flow: after reintegrating upstream changes via merges, reorganize branch with a rebase","<p>I have a branch Z that was based on some upstream version X, had some features A, B, C developed in feature branches and then merged back and at some points had upstream changes X', X'' reintegrated back into Z.</p>

<pre><code>X-----------X'-------X''
 \           \        \
  Z-------Z1--Z2---Z3--Z4------Z5
   \      / \      /    \      /
    A1--A2   B1--B2      C1--C2
</code></pre>

<p>I would like to port my branch Z with its features A, B, C to another branch Y (which is upstream, like X). To do this more easily, I would first like to untangle Z like this:</p>

<pre><code>X--X'--X''
        \
         Z-------Z1------Z2------Z3
          \      /\      /\      /
           A1--A2  B1--B2  C1--C2
</code></pre>

<p>My first thought was to use <code>git rebase --onto X'' X Z3</code>, which worked but killed all merges, so the result looked more like</p>

<pre><code>X''--A1--A2--B1--B2--C1--C2
</code></pre>

<p>My next attempt was <code>git rebase --preserve-merges --onto X'' X Z3</code>, which did ... nothing at all? Well, I guess I did tell it to preserve merges, but I wanted to keep my ""feature-merges"" and throw away the ""reintegration-merges"".</p>

<p>Any ideas on how to achieve this or did I do something wrong?</p>

<p>At the moment it looks like I have to recreate the branch manually by carefully cherry-picking and/or rebasing and re-merging my feature branches.</p>

<p>Another alternative would be to squash the feature branches together so I don't have to preserve merges.</p>
","2","4031292","",""
"17547529","892870","2013-07-09 11:50:56","0","188","<git><gerrit><git-flow>","git-flow & gerrit: editing on the release branch","<p>I'm using this fork of git-flow <a href=""https://github.com/RasmusVoss/gitflow"" rel=""nofollow"">https://github.com/RasmusVoss/gitflow</a> (exactly <a href=""https://github.com/m42e/gitflow"" rel=""nofollow"">https://github.com/m42e/gitflow</a> which I adapted to the REST api of gerrit).</p>

<p>My question is, how to handle changes in a release branch? Should everyone who has to do last minute changes a feature branch, based on the release branch? Will that work? Is that supported or recomended?</p>

<p>Or should all work directly on the release branch and submit all changes as review to gerrit?
Any suggestions?</p>

<p>Thanks a lot.
Bye,
m42e</p>
","0","892870","",""
"17805849","2608241","2013-07-23 09:05:03","1","84","<git><web><versioning><git-remote><git-flow>","setting up git and git-flow for 2 versions of a website. Remote access for some developers","<p>I'm looking for the best deal to setting up git with the way I work, my dev team and I :
We woold like to use git for a website versionning with a remote webserver and some local developers. But we would have 2 states of the website online : one for production and one for develoments. We have already done a cp -fr of the root production website dir to another new dir and make virtualHosts with Apache to these 2 dirs.</p>

<p>I've found good things with git-flow, but I d'ont know exactly how to ""link"" the 2 website versions  with git and remotely access them indenpendently :
Must I ""git init --bare"" my online root website production version (with eventually the good post hook to protect .git files from http access and separate the dir)
then, must I do same thing for the develop version in the other dir (that it must be online to in order to test it), or must I just make a branch or clone with git ?</p>

<p>And how the local machine can acces all those 2 remote confs ?</p>

<p>We need to make some corrections on the develop remote online version for testing, and when it clean, put changes from the dev version to the prod version.</p>

<p>All local git dev workstations are ready with ssh acces (with pub-ssh-rsa.key in remote server :in /home/git/.ssh/....)</p>
","0","2608241","0","0"
"34363916","335743","2015-12-18 21:01:16","0","1197","<git><git-flow>","Can I customize the tag when finishing a git-flow release","<p>I'm using the <code>git-flow-avh</code> version of the tool. We'd like name the release branch differently that the tag. We'd like the branch name to match our release cycle (<code>sprint-123</code>), but the tag should be <code>production_&lt;YYYYMMDDHHMMSS&gt;</code> with a timestamp.</p>

<p>I see a command line options to suppress tagging and to customize the message, but nothing to override the tag name.</p>

<p>Can I do this?</p>
","0","335743","",""
"19750996","2298092","2013-11-03 08:07:33","10","20851","<gitlab><git-flow>","How to use git flow in GitLab","<p>We're using GitLab for our project and we think it's great.
We're also using git flow to manage the changes in feature, develop, master branches.</p>

<p>Can you use the Merge Request build in GitLab to manage the branches in git flow style? </p>

<p>Meaning when accepting a Merge Request for a release branch, it will merge the release branch into master AND into develop.. 
Or should we always use git flow on our local machines to accept the Merge Requests.</p>
","0","2298092","0","0"
"19823250","1718717","2013-11-06 21:31:46","12","2482","<git><git-flow>","In the git flow model should I build from the merge commit in master to release?","<p>At my company we have a CI/Build server that we use to test and build releases (as well as features and the develop branch).
In the <a href=""http://nvie.com/posts/a-successful-git-branching-model/"">git flow</a> branching model when it is time to release you branch off develop and name it (for instance) release-1.4.  The CI/Build server would then automatically build the branch and we would deploy it to a staging server for manual integration testing.  Once we are satisfied with the build we would like to deploy it.  But in the git flow branching model we need to merge to master and tag first.  The question is, do we need to run another build and test cycle after this merge or what?</p>

<p>It seems weird to merge and tag ending up with the tag pointing at a different (technically) commit than the release was built off of.  It also seems bad to rebuild after we get into master because we would then feel compelled to test that build to make sure it is ok too.</p>

<p>The options I've come up with are:</p>

<ul>
<li>build in the release branch and then merge and rebuild and test in the master branch</li>
<li>build and test in the release branch then merge and trust that no new build is needed</li>
<li>Modify the git flow model to remove the step of merging to master and just tag the final commit in the release branch that we want to release.
<ul>
<li>What would be lost by not merging to master?</li>
<li>In this case we could probably just develop in master</li>
</ul></li>
</ul>
","1","1718717","0","0"
"57875192","","2019-09-10 16:49:25","0","831","<git><branch><git-branch><git-flow>","Forgot to do git flow feature start; what now?","<p>My local repository is on branch <code>develop</code>.</p>

<p>We're using Git Flow and I'm supposed to work on a new feature on a separate branch. Normally, I'd do <code>git flow feature start ""whatever""</code> before commiting my changes; this time, however, I forgot. Fortunatelly I didn't push this mess yet.</p>

<p>Now I can obviously rescue the situation by (a) copy-pasting my current work to another directory (b) undoing my last unpushed commits from <code>develop</code>; (c) issuing <code>git flow feature start ""whatever""</code>; (d) copy-pasting my work from this other directory onto my local git repo; (e) re-commiting.</p>

<p>I'm curious, however, if this can be avoided? That is: if I can create this branch I did not create on time and move my commits and current work to this branch without copy-pasting files? What git commands would I have to issue to achieve this?</p>
","0","","",""
"35048586","655560","2016-01-27 21:40:22","4","2785","<git><branch><git-branch><git-flow>","How can I switch git branches when there is an untracked file error?","<p>Using SourceTree when I try to switch back to master from a feature branch I created I get an error:</p>

<pre><code>Updating the following directories would lose untracked files in it
</code></pre>

<p>I want to switch back to master to make another feature branch but am unable to do so. </p>
","0","655560","",""
"35049836","280385","2016-01-27 23:03:45","1","320","<git><git-flow>","Demystify this git log graph","<p>Please help me understand why the git log shows an additional purple line for a merge into the develop branch. </p>

<p>We use gitflow so the blue line represents commits directly to develop.  The yellow line is the master branch were we merge in releases. The other lines are releases or hotfixes.</p>

<p>In this scenario the bright green line was a hotfix created off of the master branch.  There was one commit on the hotfix branch and then it was ""finished"" (i.e. merged into develop and master).  The commit for the merge in master makes sense to me since I see the bright green line merge into the yellow (master) line.  What doesn't make sense to me is the introduction of the pink line which shows the merge of the hotfix branch into the develop branch.  I would expect the bright green line terminate into the blue line.  The graph makes it look like develop was branched at the ""Throw exception"" commit when it wasn't.</p>

<p>git log looks similar (there is a dark blue line in there that's hard to see).</p>

<p><a href=""https://i.stack.imgur.com/l4cPW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/l4cPW.png"" alt=""enter image description here""></a></p>

<p>I have a theory but I wanted this to be confirmed.  When I committed the change ""Added Raygun integration"" locally, there was an outstanding change that I hadn't fetched and merged in from origin (the hot fix integration). I think the pink line shows a diverge because the ""Added Raygun integation"" commit was before I merged the hot fix commit.  The develop branch was then reintegrated when I merged origin into my local and pushed.  If this is the case, if I had pulled the outstanding commit from origin first, then committed my change, would the ""Merge branch 'hotfix/2.5.1' commit show merging to the blue line? </p>
","2","280385","",""
"30166996","3224058","2015-05-11 11:53:08","0","732","<git><version-control><git-flow>","How sync work using git-flow","<p>I and my co-worker are working to a project.
There is a <code>--bare</code> remote repo from which we have cloned to our pc.
Then we have both initialized own personal repos with git-flow.
Now I have develop and master branch. </p>

<p><strong>Which branch shoult I use to sync my work with my co-worker?</strong></p>

<p>If I not always commit all my changes in feature branches, my develop branch is dirty and I can't push it to sync.
The alternative that we use is create a new feature branch called <em>""sync release""</em> every time I want sync my work. Then the closure of the feature branch update the master branch and I can sync it (not the dirty develop branch).</p>

<p>This is our current workflow. What is the correct  git structure when all developer use git-flow and want share the work correctly?</p>
","0","3224058","",""
"16800989","613617","2013-05-28 20:33:30","2","2478","<git><git-merge><git-flow>","Have a feature branch in git and can't merge master after reverting a merge from a different branch","<p>We have implemented a kind of git flow workflow in our company but not everyone is actually using git flow yet so there are some hiccups. Here is one.</p>

<p>A colleague was working on a feature branch and needed some bug fixes that are currently in master and develop. However, he got confused and merged develop into his feature branch instead of master, thus getting a number of unwanted features. He pushed to our git server.</p>

<p>Now, I saw his error and we tried correcting it. We reverted the merge commit </p>

<pre><code>git revert -m 1 hismergecommit
</code></pre>

<p>and undid his merge. However, if he tries to merge master into his branch, he's told that there's nothing to merge! This appears to be due to the fact that master had previously been merged into development, prior to his gaff. </p>

<p><img src=""https://i.stack.imgur.com/NHLBJ.png"" alt=""enter image description here""></p>

<p>The picture gives an idea what it looks like.</p>

<p>Is there a way to merge in master to his feature without reseting his feature branch to before his bad merge or cherry picking all the commits in master?</p>

<p>EDIT:</p>

<p>I'd like to add that although he has pushed the branch to the server, nobody else has pulled it so it isn't ""dangerous"" to rewrite the history in this case, I'd just like to know if there's a good way to fix these kinds of issues should they arise.</p>
","0","613617","",""
"35559002","1084684","2016-02-22 16:40:07","0","88","<git-flow>","git flow: merge from remote develop branch, and see changes in feature branch?","<p>I'm using git flow.</p>

<p>We have develop branched from master, and I have feature/INF-824 branched from develop.</p>

<p>One of my coworkers has added a change to develop that's relevant to INF-824.</p>

<p>How can I merge his changes into my copy of develop, and see them in feature/INF-824?</p>

<p>Thanks!</p>
","0","1084684","",""
"19315182","232794","2013-10-11 09:51:27","7","744","<git><git-flow>","To avoid unintended merges, git-flow aborted","<p>We are using <a href=""https://github.com/petervanderdoes/gitflow/wiki"" rel=""noreferrer"">git-flow</a>.  We work on several different feature branches and keep getting this error:</p>

<pre><code>develop|✔ ; git flow feature pull origin RWT-6-valves
Trying to pull from 'feature/RWT-6-valves' while currently on branch 'develop'.
To avoid unintended merges, git-flow aborted.
Fatal: 
</code></pre>

<p>Generally, reverting to an earlier version of develop works.  However, this is a pain. Thus the question:</p>

<p><em><strong>How to avoid this message in the future?</em></strong></p>
","0","232794","0","0"
"19318913","2518489","2013-10-11 13:05:45","0","158","<git><git-flow>","How to set up a derived repo with git and git-flow?","<p>I've got a main repository that's the core game engine and now I need to make another repository that will end up being an actual game. Because I'll be using git-flow for both, I can't just fork the original and pull/push whenever I need the changes to the engine. What I need preferably is to be able to take the changes that are on the master branch in the engine repo and merge those changes to the develop branch in the derived project. How would I set this up?</p>
","0","2518489","",""
"19347256","327702","2013-10-13 16:07:48","0","173","<linux><git><svn><git-svn><git-flow>","How git-svn or git-flow commands are executed without dash in between","<p>When installing git-flow I realized it is just putting files in /usr/local/bin mainly git-flow which is the executable, I'm able to invoke the script git-flow by running <code>git flow</code> (without dash in between). I then realized it is the same with git-svn as well where the commands are run with <code>git svn</code>. </p>

<p>Am I overlooking something basic or does <code>git</code> itself actually delegate the commands somehow?  </p>
","0","327702","",""
"51185797","5352241","2018-07-05 07:41:55","1","442","<git><npm><git-flow>","How to fix the operation of a command `git flow` from a file `package.json`?","I'm opening this issue because:

<p>npm is producing incorrect or undesirable behavior.</p>

What's going wrong?

<p>The <code>git flow</code> command from the file <code>package.json</code> does not work.</p>

<p>File <code>package.json</code> contains:</p>

<p><code>json
  ""scripts"": {
      ""s1"": ""git flow release start v1"",
      ""s2"": ""git flow""
  },
</code></p>

How can the CLI team reproduce the problem?

<p>The command <code>npm run s1</code> does not work.<br>
The command <code>npm run s2</code> works correctly.<br>
The command <code>git flow release start v1</code> works correctly.  </p>

<pre><code>npm run s1

&gt; wsdl-xsd-parser@1.3.1 s1 C:\temp\temp2\wsdl-xsd-parser
&gt; git flow release start v1

git: 'flow' is not a git command. See 'git --help'.

The most similar commands are
        reflog
        show
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! wsdl-xsd-parser@1.3.1 s1: `git flow release start v1`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the wsdl-xsd-parser@1.3.1 s1 script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
</code></pre>

<p>The text of the error sometimes changes. For some unknown reason.</p>

<pre><code>npm run s1

&gt; wsdl-xsd-parser@1.3.1 s1 C:\temp\temp2\wsdl-xsd-parser
&gt; git flow release start v1

C:\Program Files\Git\usr\bin\git-flow: line 47: uname: command not found
C:\Program Files\Git\usr\bin\git-flow: line 76: sed: command not found
C:\Program Files\Git\usr\bin\git-flow: line 76: dirname: command not found
C:\Program Files\Git\usr\bin\git-flow: line 115: /gitflow-shFlags: No such file or directory
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! wsdl-xsd-parser@1.3.1 s1: git flow release start v1
npm ERR! Exit status 1
</code></pre>

<p>Versions:</p>

<pre><code>&gt;npm -v  
6.1.0

&gt;node -v  
v8.11.3

&gt;git --version  
git version 2.18.0.windows.1
</code></pre>

<p><a href=""https://github.com/npm/npm/issues/21152"" rel=""nofollow noreferrer"">https://github.com/npm/npm/issues/21152</a></p>
","6","5352241","0","0"
"63169151","324106","2020-07-30 08:26:54","1","152","<git><git-flow>","In git, how do I verify that bug fixes are in both the Release branch and in master","<p>We have created a release branch for our latest release. In the meantime, we have continued to work on new features on master.</p>
<p>We have continuously made bug fixes on the release branch. Typically we create a topic branch based on the release branch, fix the bug on the topic branch, and merge it to the release branch when done.</p>
<p>After this, we cherry-pick the merge commit from the release branch to master.</p>
<p>Now to the issue: We have quite a few bug fixes and it is starting to get hard to make sure that they are all cherry-picked. Is there a way to verify that all the fixes on the release branch are also included in master?</p>
","0","324106","",""
"16816838","241453","2013-05-29 14:36:43","2","764","<git><git-flow>","git-flow: why does ""git-flow feature finish -S"" still create a merge commit?","<p>I have locally developed a feature which consists of a couple of <em>""work in progress""</em> commits. When I'm going to finish this feature using <code>git-flow feature finish -S</code>, I would expect to get one clean commit in <code>develop</code>. However, I get an additional merge commit on top of the squashed commit which references my <em>""work in progress""</em> commits from the obsolete feature branch. What's the purpose of this behavior? Can this additional merge commit be skipped?</p>
","0","241453","",""
"51412544","38765","2018-07-19 00:05:04","1","39","<git><git-flow>","How to avoid doing git flow release when local master is behind remote master","<p>More than once, we've done a <code>git flow release 1.23</code> on a release branch, only to discover that <code>master</code> was behind <code>origin/master</code>, and now the new <code>master</code> and <code>origin/master</code> have now diverged.</p>

<p>I've created a <a href=""https://github.com/petervanderdoes/gitflow-avh/issues/378"" rel=""nofollow noreferrer"">feature request</a> to avoid this on git-flow, but apart from manually checking, is there any way to avoid finishing a release when the local master is behind the remote master?</p>
","0","38765","0","0"
"51445318","9019159","2018-07-20 14:58:02","2","603","<git><git-flow>","Undo a git flow feature finish which merged a feature into development","<p>I have accidentally just merged a feature branch into a master branch. </p>

<p>I ran git flow feature finish and forgot to put in the name of the feature branch. How can I undo this change.? </p>

<p>After doing this I got the following error: </p>

<pre><code>- [deleted]           feature/hidden_campaign
Deleted branch feature/hidden_campaign (was ab77e680).

Summary of actions:
- The feature branch 'feature/hidden_campaign' was merged into 'master'
- Feature branch 'feature/hidden_campaign' has been locally deleted; it has been remotely deleted from 'origin'
- You are now on branch 'master'
</code></pre>

<p>Any help would be really great </p>
","0","9019159","",""
"35683075","1174938","2016-02-28 13:24:35","6","2146","<git><git-flow><gitversion>","Build once, deploy many using gitflow and gitversion","<p>The gitflow fits our needs and the giversion seems to be fitting the gitflow. But there is one thing which I don't fully understand. Let me explain what bothers me.</p>

<ol>
<li>We do work on some functionality on develop branch - all the packages are marked like this 1.3.0-unstable.1, 1.3.0-unstable.2 and so on.</li>
<li>Every package is going though the pipeline - dev, test, uat, prod.</li>
<li>So when the dev is ready and everything is good, according to the gitflow we start the release branch.</li>
<li>No changes need to be done on release, we are finishing it right away - release branch merged into the master and into the develop.</li>
<li>Build server creates one more package 1.3.0 which is kind of prod ready.</li>
</ol>

<p>How to achieve build once, deploy many here? According to all the rules, we need to promote 1.3.0-unstable.x to the prod env, cause exactly this package was tested in dev and test, but the version looks a bit strange for prod, isn't it? When 1.3.0 which came from master branch was never deployed anywhere.</p>

<p>Question is similar to this: <a href=""https://stackoverflow.com/questions/19823250/in-the-git-flow-model-should-i-build-from-the-merge-commit-in-master-to-release"">In the git flow model should I build from the merge commit in master to release?</a></p>

<p>The answer is not really satisfying:</p>

<ol>
<li>We do -no-ff while merging to the master</li>
<li>It's still a different package</li>
</ol>
","12","1174938","0","0"
"73465266","7277550","2022-08-23 21:34:18","0","194","<devops><branch><local><git-flow>","Branch git flow, start, which branch?","<p>So i created a git flow with the command &quot;git flow init&quot;.</p>
<p>I'm on develop.</p>
<p>If i do &quot;git flow start feature MY_FEATURE&quot;, it's duplicate develop for a feature.</p>
<p>&quot;git flow start feature MY_FEATURE-2&quot; duplicate develop or the branch current?</p>
<p>Thanks you.</p>
","1","7277550","",""
"56769574","341091","2019-06-26 09:34:09","1","264","<git><git-flow><git-merge-conflict>","gitflow: how to make local develop follow remote develop — again?","<p>We use gitflow with pull requests so in theory the local and remote develop should always be identical. But in praxis there are merge conflicts.</p>

<p>I don't want to merge those conflicts as I would not be allowed to push them anyway.</p>

<p>Is there a way to just force the local develop branch to be the same as the remote develop branch?</p>
","3","341091","",""
"73534078","1366027","2022-08-29 19:59:08","0","280","<git><git-flow>","Why does git-flow create a merge commit for my rebased branch","<p>I'm using <em>git-flow</em> and have rebased my feature branch with the <em>develop</em> branch. However, when I try to finish the branch (<code>git flow feature finish tests</code>), git wants to create a merge commit. When I look at the git log, it clearly shows that I have two commits on the feature branch past the last commit on the <em>develop</em> branch, so I expected a fast-forward merge with no merge commit. Can some one explain why this isn't the case? And is there a way to avoid the merge commit?</p>
<p>Here's the feature branch log</p>
<pre class=""lang-bash prettyprint-override""><code>$ git log
commit 8e17db0ca47e265d546051c0a0c5ade5a725bbeb
Author: user &lt;user@nowhere.com&gt;
Date:   Mon Aug 29 15:12:43 2022 -0400

    feat: Unit test additions
    

commit 5d33db55b9366db0e92646471919aafa52cfb1e6
Author: user &lt;user@nowhere.com&gt;
Date:   Mon Aug 29 14:24:54 2022 -0400

    feat: Improvements to processor shutdown
    

commit 7bd8d62ac6757a6e5ed92ffa114f5367416a6dfd
Author: user &lt;user@nowhere.com&gt;
Date:   Mon Aug 29 12:06:43 2022 -0400

    fix: Fix warnings for unused parameters
</code></pre>
<p>And the <em>develop</em> branches log</p>
<pre><code>$ git log develop
commit 7bd8d62ac6757a6e5ed92ffa114f5367416a6dfd
Author: user &lt;user@nowhere.com&gt;
Date:   Mon Aug 29 12:06:43 2022 -0400

    fix: Fix warnings for unused parameters
</code></pre>
<p>The flow rebase command shows the feature branch as up to date.</p>
<pre><code>$ git flow feature rebase
Will try to rebase 'tests'...
Current branch feature/tests is up to date.
</code></pre>
<p>I'm using git version 1.8.3.1</p>
","2","1366027","",""
"73551703","","2022-08-31 06:30:14","1","58","<git><git-flow>","Gitflow practices: how to get the code from origin/develop to local/feature-x with respect to having good-looking git-history","<p>I have the following git structure: local/develop, local/feature-x, origin/develop, origin/feature-x, origin/feature-y... each local is tracking its corresponding origin, and there is another developer working on feature-y and pushes his code to origin/feature-y.</p>
<p>While I am working on feature-x and pushing my code to origin/feature-x for -let's say- several days, the other developer has done a Merge-Request to origin/develop, and now, I need his code to be able to continue my work on feature-x, I have 2 options to update my local/feature-x code but each one has a drawback (please note that this scenario implies that feature-x should appear as the most-recent feature when seeing the history of the commits in origin/develop):</p>
<ol>
<li><p><strong>merge origin/develop into local/feature-x</strong> -&gt; this will re-write the git-history and make feature-x commits appears behind feature-y commits and I want to avoid that.</p>
</li>
<li><p><strong>rebase local/feature-x onto origin/develop</strong> -&gt; this will make the history of local/feature-x differs from the history of its tracked version (i.e., origin/feature-x) then git will force me to pull origin/feature-x commits to local/feature-x and thus, having a duplicated of commits in local/feature-x and making the history looks ugly!</p>
</li>
</ol>
<p>What are the ways to update the local/feature-x branch w-r-t having a meaningful git-history?</p>
","0","","",""
"56874824","3112803","2019-07-03 16:51:25","3","2350","<git><git-flow>","git push to remote error: remote: warning: inexact rename detection was skipped due to too many files","<p>After I finish release on my machine... <code>git flow release finish 'X.X.XXX.X'</code> I then have to push the new release to origin. So I run these commands...</p>

<pre><code>$ git push origin --tags (this works, results omitted)
$ git checkout develop (this works, results omitted)
$ git push (this works, results omitted)
$ git checkout master (this works, results omitted)
$ git push (this is what fails)
Total 0 (delta 0), reused 0 (delta 0)
remote: warning: inexact rename detection was skipped due to too many files.
remote: warning: you may want to set your diff.renameLimit variable to at least 1804 and retry the command.
</code></pre>

<p>So, I have read a number of SO posts and the git-config documentation.  Based on what I read I set these values in my config...</p>

<pre><code>$ git config merge.renameLimit 999999
$ git config diff.renameLimit 999999
$ git config diff.renames copies
</code></pre>

<p>Which results in this in the config file...</p>

<pre><code>[merge]
    renameLimit = 999999
[diff]
    renameLimit = 999999
    renames = copies
</code></pre>

<p>But the same error happens.  I'm not sure what else to try.  Is <code>999999</code> too high of a value?  Is there a limit you can't exceed for it to work?  For <code>diff.renames</code> should it be <code>copies</code> or <code>""copies""</code> with double quotes?  I'll try all those options it just takes a long time to re-setup a test scenario.  <a href=""https://git-scm.com/docs/diff-config"" rel=""nofollow noreferrer"">The documentation</a> says <code>diff.renames</code> defaults to <code>true</code> but when I looked in my config it wasn't present that's why I added <code>copies</code>.</p>

<p>Here is my full config file in case it helps...</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[remote ""origin""]
    url = https://github.xxxxxx.com/gfrobenius/xxxxxx.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""develop""]
    remote = origin
    merge = refs/heads/develop
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[gitflow ""branch""]
    master = master
    develop = develop
[gitflow ""prefix""]
    feature = feature/
    bugfix = bugfix/
    release = release/
    hotfix = hotfix/
    support = support/
    versiontag = 
[gitflow ""path""]
    hooks = C:/Users/gfrobenius/Sites/gfrobenius/xxxxxx/.git/hooks
[merge]
    renameLimit = 999999
[diff]
    renameLimit = 999999
    renames = copies
</code></pre>
","0","3112803","",""
"43521538","7119847","2017-04-20 13:52:56","4","7698","<git><github><merge><workflow><git-flow>","Can we merge develop branch into Feature branch in git-flow?","<ol>
<li><p>Can we merge <strong>develop branch</strong> into <strong>feature branch</strong> in git-flow ? </p></li>
<li><p>As shown in image below, there are 2 feature branch (<code>A</code>(red) and <code>B</code>(blue) ), assigned by two developers. When <code>B</code> need some code from <code>A</code>, will it be <strong>allowed</strong> that <code>A</code> push to develop go on coding, then <code>B</code> pull it from the develop? </p></li>
<li><p>A merge develop branch, which didn't merge but overwrite, <strong>why</strong>, and how to solve it?  </p></li>
</ol>

<p><img src=""https://i.stack.imgur.com/9e15w.jpg"" alt=""""></p>
","0","7119847","0","0"
"74290611","20122390","2022-11-02 14:13:18","1","60","<git><version-control><github-actions><branch><git-flow>","Why does a new git branch have the old history?","<p>I'm studying design patterns in python and I'm doing version control in git.
The first thing I did was create a branch called &quot;Creational Patterns&quot;, in which I made a commit for each one (Factory, builder...etc)
Later I created a new branch called &quot;Structural Patterns&quot; and moved to it. I have been committing to this branch for these patterns. However when I went to see the history of my &quot;Structural Patterns&quot; branch, there are also the creational pattern commits!
I think git is doing fast-forward merges, however I have the following question: Is it possible to have this branch of structural patterns without the commits of the creational patterns branch? or git will always do this automatically.
Thank you very much!</p>
","1","20122390","",""
"56925676","2594524","2019-07-07 19:59:59","-1","869","<azure-devops><pull-request><git-flow>","Setup pull requests with git flow and azure pipelines","<p>I'm trying to setup a library project using DevOps. The branching strategy choosed is <strong>git-flow</strong> in order to have use git version and follow semver with releases and hotfixes.</p>

<p>So i tried was to <strong>protect both develop and release branches</strong> by activating pull requests. </p>

<p>Everything works fine unless a release is going to be closed. Here I see two problems:</p>

<ol>
<li>In git-flow the system try to realign develop from master, but devops doesn't know this is git-flow and just merges release to master.</li>
<li>Develop branch is protected, so if i want to realign manually i should create a new pull request, from master to a feature branch in order to solve conflicts</li>
</ol>

<p>I'm not sure about the correctnes of the implemented workflow. Is there a better way to accomplish this realignment?</p>

<p>Any suggestions are welcome</p>

<p>Thanks</p>
","0","2594524","",""
"57039356","","2019-07-15 12:02:32","0","1155","<git><git-flow>","The rules of git branching","<p>We have a big enterprise project and we have some stages of development. We use git. The branching looks like this:</p>

<p>DEV -> SIT -> PROD</p>

<p>DEV branch is development branch as is. When dev is done it's pushed to SIT branch, and the SIT source is used by QA for testing stage. For release the PROD is used.</p>

<p>So the question: if DEV is finished and SIT testing have been started and a bug was found, what is the correct flow?</p>

<p>1:</p>

<ul>
<li>create a branch for bugfix from SIT branch and push it directly from the branch to SIT</li>
<li>retest</li>
<li>in case the bug is fixed then the branch from DEV should be created and pushed to DEV with fix this    fix.</li>
</ul>

<p>2:</p>

<ul>
<li><p>Create a branch from DEV and push bugfix to DEV.</p></li>
<li><p>Push changes from DEV to SIT</p></li>
</ul>

<p>What flow is correct 1 or 2?</p>

<p>I want to know the best practice</p>
","2","","",""
"57038058","8950464","2019-07-15 10:43:04","0","93","<git><version-control><git-flow>","Is it possible or recommended to make the central repository as bare repository when git-flow initiated","<p>We're planning to have a git-flow to our projects. The git-flow will contains master branch (production), develop branch (staging) and feature branch (for tasks/bug fixes).</p>

<p>Master and develop branch shouldn't be able to commit and can only pull files, by doing so, we ended up agreeing to make the master and develop branch a bare repository.</p>

<p>Is it possible to make the master and develop branch a bare repository when git-flow initiated? If so, is there a cons and pros if we do that?</p>
","0","8950464","",""
"57116384","4354693","2019-07-19 16:27:34","5","1718","<git><git-flow>","How to name branch in gitflow for 'update/upgrade third-party packages'?","<p>I'm working on update npm libraries (third-party packages) but I dont know to name branch: feature, hotfix, another?.</p>

<p>What do you recommends me?</p>
","0","4354693","0","0"
"73962019","4661650","2022-10-05 14:34:05","0","491","<maven><git-flow>","mvn gitflow:release-finish with main-branch","<p>I'm getting the following errormessage:</p>
<pre><code>Failed to execute goal com.amashchenko.maven.plugin:gitflow-maven-plugin:1.18.0:release-finish (default-cli) on project parent: release-finish: error: pathspec 'master' did not match any file(s) known to git
</code></pre>
<p>That's because the branch is called main instead of master.
Renaming the branch to master is not an option.</p>
<p>Is there any way to pass the information about the main-branch to the maven-gitflow-plugin?</p>
<p>As stated in the errormessage I'm using the plugin version 1.18.0</p>
","0","4661650","",""
"57155798","9031418","2019-07-23 02:13:50","2","666","<git><git-flow>","Is git flow development and master branch never merge again(parallel forever)?","<p>I read this <a href=""https://datasift.github.io/gitflow/IntroducingGitFlow.html"" rel=""nofollow noreferrer"">gitflow</a> article.    </p>

<p>And it seems branch <code>develop</code> and branch <code>master</code> are parallel.<br>
They will never be merged again.<br>
(What I mean is:<br>
<code>git checkout master</code><br>
<code>git merge develop</code><br>
<code>git checkout develop</code><br>
<code>git merge master</code>)  </p>

<p>Is that right?<br>
If the two branch are parallel, the team leader need to make sure the two branch has same code by himself, right ?</p>
","0","9031418","0","0"
"73978250","4317683","2022-10-06 18:05:16","0","171","<maven><github><git-flow>","gitflow-maven-plugin with protected master branch: create PR","<p>My <code>master</code> branch at github is protected, changes can only be made via Pull-Requests. With gitflow-maven-plugin <code>gitflow:release</code> I'd like to create a PR from <code>develop</code> to <code>master</code> instead of a push to <code>master</code>.</p>
<p>As far as I understand I could use <code>&lt;gitPushOptions&gt;</code>. Current configuration is:</p>
<p><code>&lt;gitPushOptions&gt;merge_request.create merge_request.target=master&lt;/gitPushOptions&gt;</code></p>
<p>But I still get:</p>
<p><code>Failed to execute goal com.amashchenko.maven.plugin:gitflow-maven-plugin:1.18.0:release  on project ***: release: remote: error: GH006: Protected branch update failed for refs/heads/master.</code></p>
<p>Seems like I am missing something.</p>
","1","4317683","",""
"57310584","1725664","2019-08-01 13:49:40","0","447","<java><git><maven><git-flow><jgitflow-maven-plugin>","PackProtocolException: invalid advertisement when using the jgitflow-maven-plugin withing a jenkins job","<p>I am using the following jgitflow-maven-plugin(created and no longer maintained) by the Atlassian team. Whenever I try to execute a release-start from within a Jenkins job I get the following error: </p>

<pre><code>Caused by: org.eclipse.jgit.errors.PackProtocolException: invalid advertisement of &lt;!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""&gt;
</code></pre>

<p>The plugin is imported like this:</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;external.atlassian.jgitflow&lt;/groupId&gt;
    &lt;artifactId&gt;jgitflow-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.0-m5.1&lt;/version&gt;
&lt;/plugin&gt;
</code></pre>

<p>It is configured in the pom.xml as follows:</p>

<ol>
<li>SCM config</li>
</ol>

<pre class=""lang-xml prettyprint-override""><code>&lt;scm&gt;
    &lt;url&gt;https://myOwnRepo.com/test&lt;/url&gt;
    &lt;connection&gt;scm:git:https://myOwnRepo.com/test.git&lt;/connection&gt;
    &lt;developerConnection&gt;scm:git:https://myOwnRepo.com/test.git&lt;/developerConnection&gt;
    &lt;tag&gt;HEAD&lt;/tag&gt;
&lt;/scm&gt;
</code></pre>

<ol start=""2"">
<li>Plugin configuration</li>
</ol>

<pre class=""lang-xml prettyprint-override""><code>&lt;configuration&gt;
    &lt;flowInitContext&gt;
        &lt;masterBranchName&gt;master&lt;/masterBranchName&gt;
        &lt;developBranchName&gt;dev&lt;/developBranchName&gt;
        &lt;versionTagPrefix&gt;v&lt;/versionTagPrefix&gt;
    &lt;/flowInitContext&gt;

    &lt;pushFeatures&gt;true&lt;/pushFeatures&gt;
    &lt;pushHotfixes&gt;true&lt;/pushHotfixes&gt;

    &lt;username&gt;myRepoUser&lt;/username&gt;
    &lt;password&gt;myRepoPassword&lt;/password&gt;

    &lt;allowUntracked&gt;true&lt;/allowUntracked&gt;
&lt;/configuration&gt;
</code></pre>

<ol start=""3"">
<li>Other configurations</li>
</ol>

<pre><code>&lt;executions&gt;
    &lt;execution&gt;
        &lt;id&gt;release&lt;/id&gt;

        &lt;goals&gt;
            &lt;goal&gt;release-start&lt;/goal&gt;
            &lt;goal&gt;release-finish&lt;/goal&gt;
        &lt;/goals&gt;

        &lt;configuration&gt;
            &lt;scmCommentPrefix&gt;[RELEASE]&lt;/scmCommentPrefix&gt;
        &lt;/configuration&gt;
    &lt;/execution&gt;

    &lt;execution&gt;
        &lt;id&gt;feature&lt;/id&gt;

        &lt;goals&gt;
            &lt;goal&gt;feature-start&lt;/goal&gt;
            &lt;goal&gt;feature-finish&lt;/goal&gt;
        &lt;/goals&gt;

        &lt;configuration&gt;
            &lt;allowSnapshots&gt;true&lt;/allowSnapshots&gt;
            &lt;scmCommentPrefix&gt;[FEATURE]&lt;/scmCommentPrefix&gt;
        &lt;/configuration&gt;

    &lt;/execution&gt;

    &lt;execution&gt;
        &lt;id&gt;hotfix&lt;/id&gt;

        &lt;goals&gt;
            &lt;goal&gt;hotfix-start&lt;/goal&gt;
            &lt;goal&gt;hotfix-finish&lt;/goal&gt;
        &lt;/goals&gt;

        &lt;configuration&gt;
            &lt;scmCommentPrefix&gt;[HOTFIX]&lt;/scmCommentPrefix&gt;
        &lt;/configuration&gt;

    &lt;/execution&gt;
&lt;/executions&gt;
</code></pre>

<p>I have also tried changing the version of the following dependencies:</p>

<pre><code>&lt;groupId&gt;com.jcraft&lt;/groupId&gt;
&lt;artifactId&gt;jsch&lt;/artifactId&gt;

&lt;groupId&gt;com.jcraft&lt;/groupId&gt;
&lt;artifactId&gt;jsch.agentproxy.sshagent&lt;/artifactId&gt;

&lt;groupId&gt;com.jcraft&lt;/groupId&gt;
&lt;artifactId&gt;jsch.agentproxy.jsch&lt;/artifactId&gt;

&lt;groupId&gt;com.jcraft&lt;/groupId&gt;
&lt;artifactId&gt;jsch.agentproxy.usocket-jna&lt;/artifactId&gt;
</code></pre>

<p>The project is behind a proxy that is set using line arguments. It is cloned using https as per the scm configs. Also, in order to connect, it uses a token and not the password.</p>

<p>On my local machine, everything seems to be working and the only difference against the Jenkins job seems to be the proxy which is used.</p>
","0","1725664","",""
"57335728","8950464","2019-08-03 05:34:08","1","866","<git><bitbucket><git-flow>","How to execute git pull command automatically from server using post-receive script","<p>I have a working tree stored in the bitbucket server and it has a git-flow enabled. I have 2 branches which are <code>develop</code> (staging) and <code>master</code> (production). Staging and production are stored in a different server. I would like to automate the <code>git pull</code> command on server when I pushed files to the <code>develop</code> branch. I've created post-receive file in <code>/var/www/test-dev/.git/hooks</code>.</p>

<p><code>GIT_WORK_TREE</code> is clone repo from bitbucket</p>

<p><code>GIT_DIR</code> cloned files from bitbucket</p>

<p>I've tried to commit from my local and push it to the bitbucket, pull the updated files from local, but the post-script seems to be not working. I've also made the post-receive script executable by running the command <code>chmod u+x post-receive</code>.</p>

<p>Here's a sample post-receive:-</p>

<pre><code>GIT_WORK_TREE=""git@bitbucket.org:username/test.git""
GIT_DIR=""/var/www/test-dev""
DEPLOY_ALLOWED_BRANCH=""develop""

echo ""***** GIT_DIR: $GIT_DIR""
echo ""***** GIT_WORK_TREE: $GIT_WORK_TREE""

while read oldrev newrev refname
do

    BRANCH=$(git rev-parse --symbolic --abbrev-ref $refname)
    NEWREV=""$newrev""

    if [ ""$DEPLOY_ALLOWED_BRANCH"" == ""$BRANCH"" ]; then
        git checkout -f ""${BRANCH}"" || exit 1
        git reset --hard ""$NEWREV"" || exit 1
    fi

    echo ""githook: Will deploy '${BRANCH}' branch to the project '${GIT_DIR}'""
done

exit 0

</code></pre>

<p>I've tried to manually execute <code>post-receive</code>, but I'm getting empty string for branch. I expect the output would be the develop branch.</p>

<p>Here's the message I'm getting when executing post-receive</p>

<pre><code>***** GIT_DIR: /var/www/test-dev
***** GIT_WORK_TREE: git@bitbucket.org:username/test.git

githook: Will deploy '' branch to the project '/var/www/test-dev'
</code></pre>

<p>Is there something I missed or my setup is incorrect?</p>
","0","8950464","",""
"57414201","6057638","2019-08-08 13:50:26","2","453","<ios><git><workflow><git-flow>","How to use gitflow for one release","<p>I'll start working on iOS app from scratch that is simply a replication of an existing android app.</p>

<p>There're 7 modules in this app (Login, register...), the client want to test each module upon finished so the app will be published to the app store when all modules are completed and well tested.</p>

<p>I'll use git-flow in this project and it has many branches (master, develop, release, features...) </p>

<p>My question is how can I use ""release"" branch in that case when I have only one version (1.0) that will be published until the end of project ?</p>

<p>And how I can manage delivering an IPA for a module (feature) to test when a new module (feature) is already in development phase ?</p>
","0","6057638","0","0"
"74206964","11271427","2022-10-26 11:26:15","1","267","<git-flow>","git flow feature finish","<p>Hi I am new and I am not sure if this is a valid question or if the answer is  a simple &quot;it's the same&quot;</p>
<p>I am using git flow for my java project and I have been using</p>
<p><code>$ git flow feature start someFeature</code></p>
<p>and usualy to end my feature I used:</p>
<p><code>$ git flow finish someFeature</code></p>
<p>My friends now told me that git flow uses:</p>
<p><code>$ git flow feature finish someFeature</code></p>
<p>to finish the feature, now my question. What is the difference? if so are there any benefits to using <code>feature finish</code> ?</p>
<p>Like I said I have only been using Git for about 2 months.</p>
","0","11271427","",""
"57433934","2832282","2019-08-09 16:21:50","0","78","<git><github><pull-request><git-flow><release-management>","Find merge commits that will contribute to the next release in git and their top-level issue number","<p>Assuming the following tree and commit messages and issues</p>

<pre><code>         c---e---g--- feature
        /         
  -a---b---d---f---h--- dev
   |        \     /
production   i--j

Commit messages
b: Fixes #41
d: Some commit message that is not worth notifying
f: Add migration for #43
h: Merge pull request #42 from /feature/linkedin-registration 
i: Merge pull request #51 from /tk/oauth-service
j: Merge pull request #52 from /tk/linkedin-controller

Issues
#41
#42 (Composite issue that we call a ""Feature"")
-- #51 (issue of #42)
-- #52 (issue of #42)
#43

</code></pre>

<p>Here's the goal I ultimately want to achieve formulated as a user story</p>

<pre><code>As a (dev) Release Manager
When I open a new Release
I want to identify the issues corresponding to the commits of this release
So I am aware of which top-level issues will be a part of the next release 
and I can prepare notes of what is going to be released
</code></pre>

<p>We are using git flow, and because we've recently changed the way we split work (we are using epics and nested epics with zenhub wihch I represented above using a ""Composite issue"") it's become difficult to determine which features will be part of our next release. We want to be able to more easily determine what will be part of our next production release when opening a new release</p>

<p>So in the graph above : 
- our production branch is at <code>a</code> : this is the code that is live now
- opening a release branch means forking from the HEAD of our development branch (currently at <code>h</code>) 
  - while ignoring commits from unmerged feature branches (<code>c</code>, <code>e</code>, <code>g</code>) 
  - including the ones from merged feature branches (<code>i</code>, <code>j</code> with <code>h</code> being the merge commit)</p>

<p>I need to </p>

<ol>
<li><p>collect the relevant commits that will be part of the release branch I open from <code>h</code> and I need to collect the commit messages of
<code>b</code>, <code>d</code>, <code>f</code>, <code>h</code> (I do not need <code>i</code>, <code>j</code> since they are commits of the a feature branch but I only care about the final merge commit <code>h</code> or commits that were made directly in the <code>dev</code> branch</p></li>
<li><p>I want to extract issue numbers (when looking at the commit messages : <code>#41</code>, <code>#42</code>, <code>#43</code> so that I can manually open those issues, and by going up the epic chain find out what the code really was about (I don't want to extract <code>#51</code> and <code>#52</code>)</p></li>
</ol>

<p>Getting 2 shouldn't be a problem with a small <code>grep</code>, but how can I filter commits as described in <code>1.</code> ?</p>

<p>(Also I'm open to comments/answers that would suggest a completely different way of solving the ""release manager user story"")</p>
","0","2832282","",""
"74727900","10663180","2022-12-08 09:11:47","1","95","<maven><github-actions><git-flow>","Maven gitflow fails with: release: fatal: refusing to merge unrelated histories","<p>On github actions, am trying to release a version but it fails with error:</p>
<blockquote>
<p>release: fatal: refusing to merge unrelated histories</p>
</blockquote>
<p>Here is the command run:</p>
<pre><code>mvn -B gitflow:release -DreleaseVersion=${{ github.event.inputs.releaseVersion }} -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }}
</code></pre>
<p>Thanks</p>
","0","10663180","",""
"75012146","18275526","2023-01-04 22:45:15","-2","982","<git><gitlab><git-flow><hotfix>","how to fix ""Another git process seems to be running in this repository""","<p>start project by git flow
and in process bugfix not commit finish process see error to other order git:
Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.</p>
<p>remove index.lock and remove branches
delete repository
restart system
.
.
.
connot stop process git</p>
","0","18275526","",""
"75333505","6413614","2023-02-03 09:00:45","1","68","<git><git-branch><rebase><branching-and-merging><git-flow>","Keeping a semi-linear git history where some feature branches cannot be rebased?","<p>I have the following situation:</p>
<ul>
<li>The teams want to keep a linear git history so they are enforcing rebase and squash.</li>
<li>We have some feature branches with a long lifetime (months even) with multiple devs working on them. They cannot be rebased because it would really complicate things when the other devs try to merge their work to those feature branches.</li>
<li>These feature branches must be kept up to date by merging the main branches into them.</li>
<li>Once the feature branch is ready to be merged the only way to keep the linear history seems to be squashing the entire thing. Squashing months of work from several people. Uhh.</li>
</ul>
<p>Something tells me this is not the best solution. I'm also not a fan of spaghetti flow but I think there is a way to keep a semi-linear history where the large feature branches get merged without all the fuss.</p>
<p>It should be something that all developers can comfortably follow, without any 'hacky' strategies that might confuse juniors.</p>
<p>Any ideas?</p>
","5","6413614","",""
"75503742","17058884","2023-02-19 22:03:48","0","25","<bash><deployment><git-flow>","Deploying test and production branches of a git repository on two separate subdomains using a script","<p>I am currently working on a <strong>Linux bash script to deploy</strong> a specified branch of my git project on my website : <strong>the develop branch to a test subdomain and the main branch to the main domain</strong>.</p>
<p>To do so, I ask for a user input (the branch name) and <strong>execute my set of commands</strong> to deploy on the right subdomain. The only problem I have is that, <strong>these operations involve moving certain parts of the project</strong> and so, I don't really see how I could deploy the two versions. To me, the two options are :</p>
<ol>
<li>Have two repositories to be able to use the two branches separately. This would work fine. BUT, that means I will use double the amount of space which doesn't seem right. (and my project is quite big)</li>
<li>Find a way to deploy two branches of one same repository on two different subdomains independently. Meaning that updating one doesn't update the other.</li>
</ol>
<p>How could I use one repository from which I deploy two branches on two different subdomains ? Is it even possible ?</p>
<p>I thought that I could just switch to the choosed branch and then update but that changes the project for both versions, which seems logical now since the whole project is accessed.</p>
","2","17058884","",""
"75753324","12896112","2023-03-16 07:44:44","0","101","<git><git-flow><argocd>","How can I get ArgoCD to deploy an application for each feature branch for any git provider?","<p>I have installed ArgoCD v2.6.5 using the Helm chart <a href=""https://github.com/argoproj/argo-helm"" rel=""nofollow noreferrer"">here</a>, version <code>5.27.0</code>.</p>
<p>Our team uses <code>feature/</code> branches to perform independent development work, before merging to <code>develop</code>, and then <code>main</code>. This broadly follows git-flow.</p>
<p>While developing Helm charts, it would be really useful if we could use ArgoCD to continuously monitor all feature branches of our git repository, and deploy these to separate namespaces.</p>
<p>Ideally, I would like this to happen in an automated fashion, solely triggered by ArgoCD.</p>
<p>The developer workflow would look something like this:</p>
<ul>
<li>When a new <code>feature/*</code> branch is pushed to <code>origin</code>, a new <code>Application</code> is created, which tracks the feature branch, and is deployed to a new namespace based on the feature branch name.</li>
<li>When a <code>feature/*</code> branch is closed, the <code>Application</code> should be deleted.</li>
</ul>
<p>I have looked into <code>ApplicationSets</code>, more specifically the <a href=""https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/"" rel=""nofollow noreferrer"">Git generator</a>, and the <a href=""https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/"" rel=""nofollow noreferrer"">SCM Provider generator</a>.</p>
<p>Neither fulfil the requirement as far as I can tell:</p>
<ul>
<li>The Git generator only mentions <code>revision</code>, but no branch filtering or templating ability based on the revision</li>
<li>The SCM Provider generator <code>automatically discover[s] repositories within an organization</code>, which is too high-level. It does have <code>allBranches</code> and <code>branchMatch</code> but these run on <strong>all</strong> repositories for an org in an SCM provider, and is also constrained to only those particular SCM providers.</li>
</ul>
<p>Is is possible to scan a single git repository, fetch only the <code>feature/*</code> branches, and create <code>Applications</code> for each (deleting once the branch is closed)? Preferrably with an automated ArgoCD synchronisation, like <code>ApplicationSet</code> generators.</p>
","0","12896112","",""
"25562325","2038901","2014-08-29 05:45:10","0","221","<git><github><git-submodules><git-flow>","How do you develop along with a git submodule?","<p>Here is my project structure</p>

<pre><code>MainProject
|  README.md
|  src/
|  lib/      # this is a submodule
</code></pre>

<p>When I develop <code>MainProject</code>, I will also develop <code>lib/</code>, I mean <code>MainProject/lib/</code>.</p>

<p>When I do push, I will copy all changes in <code>MainProject/lib/*</code> into <code>MainProject/../lib/</code>, which is a separate  git directory, then push.</p>

<p>After that I will do a submodule update in <code>MainProject/lib/</code> to latest from remote. </p>

<p>Then I will commit and push changes in <code>MainProject</code>.</p>

<p>It suffers. How do you develop along with a git submodule?</p>

<p><strong>ADD</strong></p>

<p>I want all changes in <code>lib/</code> pushed to remote <code>lib</code> repository.
And all changes beside <code>lib/</code> in <code>MainProject</code> pushed to remote <code>MainProject</code>.</p>

<p>So if I directly put to remote <code>lib</code> repository inside <code>MainProject/lib</code>
And then add and commit and push changes beside <code>lib/</code> in  <code>MainProject</code> to remote.</p>

<p>If someone else clone <code>MainProject</code> and do <code>submodule update</code>, will he get the latest sources?</p>

<p>My <code>.gitmodules</code>:</p>

<pre><code> [submodule ""lib""]
    path = lib
    url = git@github.com:XXX/YYY.git
    branch = master
</code></pre>
","0","2038901","0","0"
"62813626","2691879","2020-07-09 11:16:31","2","83","<git><git-flow>","Adding an additional command to git flow","<p>If I understand correctly, whenever I perform <code>git flow feature finish {my_feature}</code>, it is equivalent as if I were manually running the following 3 shell commands:</p>
<p><code>git checkout develop</code>
<code>git merge --no-ff feature/{my_feature}</code>
<code>git branch -d feature/{my_feature}</code></p>
<p>Is there any way I could specify an additional custom command that should be run, when I use the <code>git flow</code> command?</p>
<p>I know that if I want to add new commands exactly before or after the 3 commands that the <code>git flow</code> command runs, I could write a separate shell script. But what if I would like to add an additional command between the first two of these commands? Or what if I would like to eliminate the third delete branch command from this git flow operation? Is there any way I can do this, without writing custom shell scripts, and replicating what git flow does?</p>
","0","2691879","",""
"25843636","507564","2014-09-15 08:22:13","0","49","<git><version-control><git-flow>","mark git commit as not transferable","<p>We have a feature branch F that syncs with develop branch D (daily merge D --> F , monthly merge F --> D).</p>

<p>I now have a case were I want to create source code change that should not be synced to D but I still want to sync easily F --> D. Can Git somehow mark a commit as not transferable?</p>

<p>By this mark, I mean Git should filter this commit with merge all changes from branch F to branch D. </p>
","0","507564","",""
"8301431","138883","2011-11-28 19:47:22","3","313","<git><git-flow>","Why does git reject on master when pushing to different branch","<p>We're using git flow. Here is the flow.</p>

<ol>
<li>git flow feature start myfeat   </li>
<li>git commit -a   </li>
<li>git checkout develop</li>
<li>git pull   </li>
<li>git flow feature checkout myfeat   </li>
<li>git flow feature rebase myfeat  </li>
<li>git flow feature finish myfeat   </li>
<li>git push</li>
</ol>

<p>error:</p>

<pre><code>Counting objects: 15, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (8/8), done.
Writing objects: 100% (8/8), 820 bytes, done.
Total 8 (delta 6), reused 0 (delta 0)
To git@github.com:blah/blah.git
   d675b35..d35f160  develop -&gt; develop
 ! [rejected]        master -&gt; master (non-fast-forward)
</code></pre>

<p>Why does it tell me that it's rejecting master when i'm pushing to develop (develop is a remote tracking branch if your not familiar with git flow)</p>
","0","138883","0","0"
"44699970","648247","2017-06-22 12:52:39","0","2509","<git><version-control><composer-php><git-merge><git-flow>","How to solve a merge conflict with composer.lock using git flow?","<p>I am working on a Laravel project and using git-flow to manage my changes. My <strong>develop</strong> branch is two commits ahead of a feature branch I recently completed named <strong>feature/registration-captcha</strong>. I want to merge this feature branch into the develop branch.</p>

<p><a href=""https://i.stack.imgur.com/1tGtd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1tGtd.png"" alt=""enter image description here""></a></p>

<p>The most recent commit I made which has since been merged into the develop branch was simply running <code>composer update</code> to update a package which had a bug in it. So, the <code>composer.lock</code> file has of course been modified.</p>

<p>The <strong>feature/registration-captcha</strong> feature branch consisted of adding a captcha package and the captcha UI to a registration page. So, this also modified the <code>composer.lock</code> file.</p>

<p>When sitting on the feature branch I have tried merging the commit, from Source Tree, by selecting <strong>Repository > Git Flow > Finish Feature</strong>, then selecting the following options on the <strong>Finish Feature</strong> pop up:</p>

<p><a href=""https://i.stack.imgur.com/Iung0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Iung0.png"" alt=""enter image description here""></a></p>

<p>I am then presented with the following message:</p>

<p><a href=""https://i.stack.imgur.com/c6oQo.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/c6oQo.png"" alt=""enter image description here""></a></p>

<p>This results in a <code>composer.lock</code> file with the merge conflicts which need resolving. I thought the best way to approach this would be to remove <code>composer.lock</code> and create a fresh updated copy by running <code>composer update</code> or <code>composer update --lock</code>, adding the unstaged <code>composer.lock</code> file and committing the change. After doing this my commits look like this:</p>

<p><a href=""https://i.stack.imgur.com/xs4Ng.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xs4Ng.png"" alt=""enter image description here""></a></p>

<p>When running <code>git status</code> from the command line I am shown the following:</p>

<pre><code>c:\my-project (HEAD detached at 2a9ff12)
λ git status
rebase in progress; onto 3070450
You are currently rebasing branch 'feature/registration-captcha' on '3070450'.
  (all conflicts fixed: run ""git rebase --continue"")

nothing to commit, working directory clean
</code></pre>

<p>So I thought the correct thing to do was to run <code>git rebase --continue</code>, after which I receive the following message: </p>

<pre><code>c:\my-project (HEAD detached at 2a9ff12)
λ git rebase --continue
Applying: add non captcha to registration page
No changes - did you forget to use 'git add'?
If there is nothing left to stage, chances are that something else
already introduced the same changes; you might want to skip this patch.

When you have resolved this problem, run ""git rebase --continue"".
If you prefer to skip this patch, run ""git rebase --skip"" instead.
To check out the original branch and stop rebasing, run ""git rebase --abort"".
</code></pre>

<p>If I run <code>git status</code> again I am shown the same message as the last time I ran <code>git status</code>.</p>

<p>So I am now wondering:</p>

<ul>
<li>What am I supposed to be doing here to finish the rebase/merge?</li>
<li>Am I doing it all wrong?</li>
<li>Should I be handling the conflicts that may arise from updating packages differently?</li>
</ul>

<p>Any help would be greatly appreciated, thank you!</p>
","1","648247","",""
"44708745","806802","2017-06-22 20:24:28","0","237","<git><git-flow>","Avoiding/minimizing git merge conflicts when 2 successive commits edit the same files","<p>I have a situation as follows [it's not a concrete programming problem, but something I foresee will happen to me shortly]</p>

<ol>
<li>I am assigned 2 tickets that require adding 2 closely related features, say feature 1 and feature 2 respectively, to a tool. There must 2 separate commits (or 2 distinct set of commits) associated with the addition of these features</li>
<li>The addition of both features necessitates editing around 95% of the same source files</li>
<li>The changes that need to be introduced to implement feature 2 depend on the changes of feature 1. i.e <code>if(feature1 flag enabled) foo; else bar;</code></li>
<li>I just implemented feature1 and sent out a code review, code review turn around is around 2-5 days.I'm sure there will be a few changes suggested by the reviewers</li>
<li>However while they are reviewing feature 1 I want to get started with implementing feature 2</li>
</ol>

<p>How would I go about doing this in a manner that avoid/minimizes painful merge conflicts ? I don't want to check-in/post for review stuff related to feature 2 in the process of addressing review comments for feature 1.</p>

<p>My team uses git, with git flow.</p>

<p>[Not a hypothetical question, actual problem] </p>
","0","806802","",""
"9546071","174284","2012-03-03 12:16:37","21","12916","<eclipse><git><git-svn><git-gui><git-flow>","Is there any IDE/GUI support for git-flow on Windows/Linux?","<ol>
<li>Are there any GUI frontends for Git with <a href=""https://github.com/nvie/gitflow"" rel=""nofollow noreferrer"">git-flow</a> support?</li>
</ol>
<p>Our team uses Eclipse IDE on Windows and Linux.
Managed to gradually <a href=""https://stackoverflow.com/questions/2945842/using-git-svn-or-similar-just-to-help-out-with-an-svn-merge"">infect</a> them with git-svn, now looking for the next steps to harness the power of real branching (rather than git-svn-rebase/dcommit). Git-flow seems more or less what we need now. However some of us still depend on GUI, and it makes everything easier to sell and ramp-up.</p>
<p>So, ideally, I'm looking for an easy way to access it from Eclipse. It does <a href=""https://bugs.eclipse.org/bugs/show_bug.cgi?id=348610"" rel=""nofollow noreferrer"">not seem to support it yet</a>—I'm considering adding them as external tools.
Ideas are welcome—in or outside Eclipse.</p>
<ol start=""2"">
<li>If the answer to the above is no, can that be an issue for GUI addicts?</li>
</ol>
<p>I understand the git-flow tooling is actually very thin, it's easy to actually skip it by doing the 'raw' commands manually with or without GUI (eg. I found it handy to manipulate branches in git).</p>
<p>On one hand, I'd prefer to minimize manual work and reduce room for errors (again considering the team's experience).
OTOH, my guess is that we can start just using only the develop/release/hotfix branches (introducing feature branches later), and in this setting, folks would just have to pull/push normally. They would not see much of git-flow - it would merely act as a helper for the guys set up releases and stuff (mostly me:). Does this make sense?</p>
<p>Note: Actually the git-svn/trunk is still there—for more occasional, non-git users. Am planning to keep that in sync with 'develop' (obviously ignoring the merge history by squash merges). Hope this will go smooth—famous last words?</p>
","4","174284","0","0"
"27368924","1089494","2014-12-08 23:27:18","3","1055","<git><release><git-flow>","how to make a release removing some features in git flow","<p>My current git flow <code>develop</code> branch contains many features, I would like to make a release with just some of them, and remove some others, which will be released later. </p>

<p>Usually I would do: </p>

<pre><code> git flow release start 1.1.0
</code></pre>

<p>but this would branch from <code>develop</code> with all the features already merged.</p>

<p>How can I do that? </p>

<p>thanks</p>
","0","1089494","",""
"27787518","3236325","2015-01-05 20:39:34","5","1434","<git><teamcity><git-flow>","Different TeamCity build counter per git branch","<p>We use gitflow and TeamCity to develop many of our products. We also need to support multiple releases at the same time and work on the next release. </p>

<p>We use support branches for previous releases and develop and master as our current and future releases which is pretty standard I think.</p>

<p>Is there an easy way to have a build counter set up in TeamCity for each branch without needing to check this into the repo or having different configs for each release?</p>

<p>For instance I want my version on one support branch I want 1.0.1.(count of builds for version 1), on develop/master I want 2.0.0.(count of builds for version 2).</p>

<p>I know I can check the version in at the end of the build but was hoping there was a nicer way, we don't check anything in at the moment.</p>
","1","3236325","",""
"63726036","3620376","2020-09-03 14:44:15","1","195","<git><dependencies><git-flow><release-management><feature-branch>","Test dependent git feature branches before integration to main - handle pre-releases","<p><strong>Key Point</strong>:
I'd like to ensure that no commits and changes are missed in the step of creating a software release, especially if some commits have been cherry-picked or rebased due to prior testing.</p>
<p>Edit: It's clear that - in the end - a human has to judge if the commits are correct. But having a list of non-included commits would help and I hope to get that from git.</p>
<p>We try to follow the <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">Git-Flow</a> workflow to develop small to medium-sized (a couple of 10k LOC) embedded projects. 5 people are in the core team for that. We have a Bitbucket/Jira backend to track issues and to review pull-requests.</p>
<p><em>We have a couple of branches:</em></p>
<ul>
<li><code>master</code>: Released and tested firmware</li>
<li><code>develop</code>: main integration branch, code here is compile-able and tested but not yet released</li>
<li><code>feature/...</code>: a lot of feature branches</li>
<li><code>bugfix/...</code>: a couple of bugfix branches</li>
<li><code>release/...</code>: release preparations, a &quot;safety&quot; barrier between develop and master where final adjustments and final tests can be made</li>
</ul>
<p>Ideally, one branch for one issue ticket is created, using a naming scheme to include the issue's key and description for proper tracking and traceability.</p>
<p><strong>Imagine this situation:</strong></p>
<ol>
<li><p>A feature request ticket &quot;Add FIR filter module&quot; with id &quot;FW-5&quot; in Jira is created and results in a feature branch &quot;feature/FW-5-add-fir-filter-filter-module&quot; in the corresponding git repository. Development is going well and the module is close to be ready. Probably a pull-request has already been openend to get this module reviewed by colleagues.</p>
</li>
<li><p>Then a second ticket comes in: &quot;Add 10 Hz lowpass filter&quot;. This clearly depends on FW-5 which has not made it into develop yet since the pull-requests have not been reviewed. That means, we <em>must</em> branch from &quot;feature/FW-5-add-fir-filter-filter-module&quot; instead from develop.</p>
</li>
<li><p>The manager comes in and wants a just-in-time release of the current state, including the 10 Hz filter. It must be now, because a time slot in a test machine became available by chance. So we need to compile a pre-release from develop (since some other stuff could be integrated in the meantime) and our two feature branches. I'd start with develop, create a release branch from there, integrate the two feature branches by <code>git rebase</code>, eventually fix conflicts, increase version number and flash it to hardware.</p>
</li>
<li><p>Everything went fine and the tests were successful. The pre-release is kept as it is and probably further development takes place. Then it's time for the &quot;real&quot; release. We know from step 3) that the hand crafted pre-release worked well. However the two feature pull requests have to be integrated to develop properly in the same way we've done this in the pre-release. Including fixing eventual merge conflicts in the same way. And that's the point I'm struggling with.</p>
</li>
</ol>
<p><strong>Question</strong>:
How do I ensure that the changes made in the pre-release were integrated to the release exactly the same way? I can't compare the file contents 1:1, since in meantime develop has evolved further and files might look differently due to further commits in develop.</p>
<p>I've read about <code>git branch --no-merged</code> and some <code>git rev-list</code> ideas, but these operate on commit SHAs. So the rebased parts from the pre-release would appear as non integrated.</p>
<p>Is <code>git cherry -v</code> the correct approach? It says (see: <a href=""https://linux.die.net/man/1/git-cherry"" rel=""nofollow noreferrer"">https://linux.die.net/man/1/git-cherry</a>)</p>
<blockquote>
<p>The changeset (or &quot;diff&quot;) of each commit between the fork-point and  is compared against each commit between the fork-point and . The commits are compared with their patch id, obtained from the git patch-id program.</p>
</blockquote>
<blockquote>
<p>...</p>
</blockquote>
<blockquote>
<p>Because git cherry compares the changeset rather than the commit id (sha1), you can use git cherry to find out if a commit you made locally has been applied  under a different commit id. For example, this will happen if you're feeding patches  via email rather than pushing or pulling commits directly.</p>
</blockquote>
<p>Which sounds great, especially the last point, but I'm not sure if its understood correctly.</p>
<p>Is that the right tool to find out, if anything that should be part of the release has not been integrated yet? If yes - why do I find so few information about <code>git cherry</code>? It's a killer tool.
If not - where's the missing point? And what's about the merge conflicts :)</p>
<p><strong>Follow-up questions</strong></p>
<ul>
<li>Is branching from the parent feature branch (step 2) okay or kind of smelly?</li>
<li>Is rebasing in 3) the proper approach? Or would you rather use merge or cherry-pick?</li>
<li>Should the child pull requests merge back to the parent or directly to develop?</li>
<li>What alternatives would you see? I know it would be better to complete the pull-requests first and integrate it properly to develop, but sometimes this just doesn't work.</li>
<li>Do you allow dependent feature branches in your workflow? Do you enforce an order when the pull-requests are integrated?</li>
<li>If dependent feature branches are allowed, you also must allow rebase of these feature branches to get rid of the parent commits in the child, right? And you have to rebase the child ontop develop after the parent has been integrated. Or do you merge the children back to it's parent first which would mean that all children pull-requests have to be closed first.</li>
</ul>
<p>Thank you!</p>
","2","3620376","0","0"
"45812695","3359296","2017-08-22 08:33:27","6","4034","<git><git-flow>","How to undo git flow release start with any changes commited","<p>Simply put, is there a command to revoke changes done by <code>git flow release start</code> and if there are any changes pushed to the release, what is the safest way to stop it, since we cannot have multiple release branches at a time?</p>
","0","3359296","",""
"45958187","7588314","2017-08-30 10:37:26","1","850","<node.js><jenkins><git-flow>","How do I automatically change my package.json version while using gitflow, Jenkins and Node?","<p>Is their a plugin or should I use Grunt? I can't seems to find anything online... any help would be very much appreciated</p>

<p>thanks</p>
","1","7588314","",""
"64478432","2179098","2020-10-22 08:39:45","1","177","<git><github><git-flow>","How to handle future work over unmerged features in git flow?","<p>I am using git flow - make feature branch, and merge them into develop, ... you know.</p>
<p>I made two features and made pull request to develop branch on GitHub. Call these as feature A and B.</p>
<p>Now I want to start work on latest commits - using A and B both. However, my code is not merged in GitHub because my reviewer didn't review it yet.</p>
<p>In this situation, how I handle this?</p>
","0","2179098","0","0"
"8807245","663957","2012-01-10 17:00:31","3","1038","<git><git-flow>","Does git-flow enforce linear histories on some branches","<p>I am still trying to move from git towards git-flow. I know I can use any kind of git feature within git-flow, but I am mostly interested in what it handles automatically.</p>

<p>Let's assume there are two developers Alice and Bob, working on feature A and B respectively. When Alice is done, she can do a <code>git flow feature finish A</code> to create a merge commit on her local <code>develop</code> branch based on commit C. Now if Bob finishes his feature at the same time, and he fetched the same stuff, his merge commit will also be based on C. Now if Alice pushes and then bob fetches again, he will have to merge or rebase and we end up with a non-linear history on the <code>develop</code> branch, in case he merges.</p>

<p>Is this correct so far, or does git-flow somehow handle this situation automatically? If there is some automatic mechanism, what will have to be set up for this to work?</p>

<p>The simplest solution would probably be to always fetch <code>develop</code> before finishing features. However I am not sure that this is actually possible, depending on the way the repository is shared (might not be available at that time).</p>

<p><strong>EDIT</strong> (clarifications of the problem):</p>

<p>As the answers suggest, my example was not clear. So first a picture of what I think is the problem:</p>

<p>C is the initial commit on the develop branch.</p>

<p>Alice creates some feature work on the feature branch:</p>

<pre><code>develop    feature/A
|           |
v           v
C-A1-A2-A3-A4
</code></pre>

<p>At the same time Bob also does work for another feature</p>

<pre><code>C-A1-A2-A3-A4
 \
  B1-B2-B3-B4
</code></pre>

<p>Now Alice finishes the feature and the merge commit is added to develop (I want that).</p>

<pre><code>  A1-A2-A3-A4
 /           \
C-  -  -  -   MA
</code></pre>

<p>Now Bob finishes the feature and again a merge commit is added to develop (I also want that, just at another place:</p>

<pre><code>  A1-A2-A3-A4
 /           \
C-  -  -  -   MA &lt;- develop for Alice
 \
  \ -  -  -   - MB &lt;-develop for Bob
   \           /
    B1-B2-B3-B4
</code></pre>

<p>However now either Alice or Bob has to merge develop, creating an additional commit:</p>

<pre><code>  A1-A2-A3-A4
 /           \
C-  -  -  -   MA-MAB &lt;- I don't want this MAB commit
 \               / 
  \ -  -  -   - MB &lt;-develop for Bob
   \           /
    B1-B2-B3-B4
</code></pre>

<p>What I would like to have instead would be something like this:</p>

<pre><code>  A1-A2-A3-A4
 /           \
C-  -  -  -   MA-MB
 \               / 
  B1-B2-B3-B4- -
</code></pre>

<p>As you can see, the history is still non-linear, however the main line of the develop branch only contains the merge commits from features (and no additional merge commits as in the other case).</p>

<p>What I like about this, is that you can easily follow changes in the history and see if they belong to former feature branches or if they were merges in develop. All this information can be derived directly from the DAG. </p>

<p>Also if you use good messages for your merge commits on develop, in the second case you can easily derive a changelog, by always following the first parent on develop. However in the second case you sometimes need to follow the first parent only and sometimes more than one parent. And I cannot see an easy way when to do which that I could code up.  </p>
","3","663957","0","0"
"8824706","212313","2012-01-11 18:34:51","4","278","<git><version-control><git-flow>","what does using gitflow offer a git user?","<p>We're transitioning to git, we need source control that handles branching and parallel development better. Our whole team has done a bit of research and we've decided to move to git. We also like the model of <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">gitflow</a>. I noticed there is also a gitflow extension for git. </p>

<p>What benefit does this extension have over standard git? It seems like it's mainly macros for bundling up commands. Should we bother with the gitflow extension (we do like the model)? Is it useful? How does it compare to standard git commands?</p>
","1","212313","",""
"8892985","452021","2012-01-17 10:25:18","8","2577","<git><bash><autocomplete><alias><git-flow>","How do I enable auto-complete for a git-flow alias?","<p>This is breaking </p>

<pre><code>alias f='git flow feature'
complete -F __git_flow_feature f
</code></pre>

<p>It works eventually (after 2 'tabs') but throws an error on each 'tab' press. </p>

<pre><code>-bash: [: 1: unary operator expected
</code></pre>

<p>Any ideas? </p>
","1","452021","0","0"
"38917083","1993366","2016-08-12 11:39:05","13","11578","<git><maven><branch><git-flow><branching-strategy>","git-flow: workflow for making ""release candidates"" / QA web artifacts","<p>We are developing several projects that consist of web artifacts, using the <code>git-flow</code> branching model.</p>

<p>Refer to: <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">Vincent Driessen's git flow branching model</a></p>

<p>We are using <code>develop</code> branch and <code>jenkins</code> to auto build and deploy <code>SNAPSHOT</code> web artifacts to test environment.</p>

<p>We manually run <code>git flow release start</code> and <code>git flow release finish</code> to build non-snapshot artifacts which are deployed to our artifactory and deployed eventually in prod.</p>

<p>(How to run <code>git flow xxx</code> commands? Here's a <a href=""http://danielkummer.github.io/git-flow-cheatsheet/"" rel=""noreferrer"">cheatsheet</a>)</p>

<p>My question: How should the workflow for QA work?</p>

<p><em>Given that:</em></p>

<ol>
<li>We don't want to deploy snapshots to QA</li>
<li>It's nice if the same artifact we tested in QA is deployed in PROD</li>
<li>We can use <code>git flow</code> scripts and branching model as closely as possible</li>
</ol>

<p>Looking at the branching model, my own best understanding is:</p>

<ol>
<li>Make a release branch (e.g. <code>release/1.1</code>).</li>
<li>Build artifacts from the release branch and test in <code>QA</code>.</li>
<li>Make changes in <code>release/1.1</code> branch and return to step 2 as necessary</li>
<li>When testing is complete, <code>finish</code> the release (merge into master)</li>
<li>Deploy artifact in prod.</li>
</ol>

<p>Does anyone have any experience with this, especially step <code>2</code> ? How should artifacts from the release branch be uniquely identified?</p>

<p>We are considering using a <em>release candidate</em> versioning, where maven version <code>1.1.RC1</code> indicates <code>release-candidate1</code>, following by <code>1.1.RC2</code>, and finally <code>1.1</code> (final version).</p>
","0","1993366","0","0"
"39087992","6233127","2016-08-22 20:16:00","2","4814","<git><git-flow>","Can git flow support multiple on-going releases?","<p>I'm wondering if/how git flow supports multiple on-going releases. Do I have to wait release-1.0 branch to be branched from DEV branch (which means all features are ready for release-1.0) before I start creating feature branches for the release-1.1? What if I also need to start release-1.1 and release-2.0 development in parallel?
To my understanding, a release branch will only be created when all the features for this release have been merged into DEV branch through PRs. I'm not exactly sure how concurrent releases can be handled in git-flow. I would assume git-flow should be mature enough to handle concurrent releases. But can't figure out how to do it. Your thoughts and suggestions are much appreciated!</p>
","1","6233127","",""
"58096933","11653799","2019-09-25 11:03:12","5","8559","<git><github><git-flow>","What is the difference between git feature, release and hotfix?","<p>I am new on git-flow. 
Want to know how the three topics are work actually and the difference between them?</p>

<p>On feature, I started it with: </p>

<pre><code>git flow feature start features_name
</code></pre>

<p>Is this important to <code>finish</code> it after the <code>start</code> then <code>publish</code> these features?</p>

<p>I found when I published it, It disappeared from GitHub branches, but why?</p>

<p>I think there are few topics on git-flow and these are main:</p>

<pre><code>+ Feature
+ Release
+ Hotfix
</code></pre>
","0","11653799","0","0"
"39902624","668630","2016-10-06 17:52:47","1","280","<git><git-flow>","Workflow for delivering code to a client using two git repositories (internal and external)","<p>I have a situation where the client will receive source code, under version control using Git.  Client wants the progress of weekly sprints to be tracked, diff'd and controlled into their repo.  Eventually, client personnel will also make commits into that repo.</p>

<p>My team (let's call internal team) is using Git as well, and the git-flow workflow.  So every <strong>release</strong> of the <strong>internal</strong> repo should translate into a <strong>commit</strong> on the <strong>client</strong> repo.  We don't want every commit on the internal repo to show on the client repo.</p>

<p>So my current thinking/solution is to have a script that uses rsync to copy the working directory from internal to client (on the local filesystem) then commit into the client repo.  This could be placed as a post-receive hook on the internal server or something similar.</p>

<p>The solution seems too clunky to me, and perhaps there are better ways to achieve what I need.  What are other thoughts?</p>

<hr>

<p><strong>EDIT to include accepted solution:</strong></p>

<p>As Scott Weldon pointed on the accepted response, <code>git-merge</code> allows to do this in a good workflow.  However, to make it work, other flags are needed.  One is to allow git to effectively merge the two stories, and the second one to give the appropriate strategy for resolving the conflicts.</p>

<p>So, assuming the reference that I'm merging from the <strong>internal</strong> repo is <code>release/x.x.x.</code>, the flow is</p>

<pre><code>git fetch internal
git merge --allow-unrelated-histories -s recursive -Xtheirs --squash internal/release/x.x.x
git commit
git push origin master
</code></pre>
","0","668630","",""
"39905007","","2016-10-06 20:21:45","0","240","<git><git-flow>","git-flow change default workflow","<p>Does anyone know if it is possible to change git flow to use more than 3 branches?</p>

<p>Currently we use the std workflow:</p>

<pre><code>dev -&gt; feature/*  -&gt;  dev
dev -&gt; release/* -&gt; master
master -&gt; hotfix/* -&gt; master &amp; dev
</code></pre>

<p>However our setup has now substantially expanded and are looking for the following workflow</p>

<pre><code>dev -&gt; feature/* -&gt; dev
dev -&gt; stage/* -&gt; staging
staging -&gt; bug/* -&gt; staging
staging -&gt; release/* -&gt; master &amp; dev
master -&gt; hotfix/* -&gt; master &amp; staging &amp; dev
</code></pre>

<p>The altered workflow will enable devs to continue building and sharing new features, even during the testing of a staged release. Also enabling other devs to bug fix any issues on the upcoming release.</p>
","2","","",""
"20895718","2438678","2014-01-03 02:52:50","1","634","<git><github><workflow><git-flow>","sharing features or not in git flow?","<p>In development, we often come across a scenario like this:</p>

<p>In a MVC web development, stuff A may mainly develop View, while stuff B may mainly develop Controller, then a feature branch like <code>feature/account</code> maybe shared by A and B to cooperate the development of account. </p>

<p>If we manage feature branches like above:</p>

<p>Question 1: Is it recommended that sharing feature branches between stuffs between stuffs?</p>

<p>There's another way to manage feature branches, like this:</p>

<ul>
<li>stuff A manage a branch named <code>feature/account-view</code></li>
<li>stuff B manage a branch named <code>feature/account-controller</code></li>
</ul>

<p>However, If we manage feature branches like <code>account-view</code> and <code>account-controller</code>, we need to merge these two feature branches first before doing some testing jobs. And it seems the workflow becomes more complicated. </p>

<p>Question 2: Which branch management is better? <code>feature/account</code> or <code>feature/account-view</code> <code>feature/account-controller</code></p>
","0","2438678","0","0"
"58823641","5594698","2019-11-12 17:18:54","1","595","<git><git-flow>","Git Branching strategy idea and git flow customization","<p>I have recently started using Git and have recently me &amp; my team have agreed on below workflow. We don't use CI/CD and there are no future plans for it yet. We have 3 environments for testing:</p>

<ol>
<li>Dev Test</li>
<li>UAT/Pre prod</li>
<li>Production</li>
</ol>

<p>Currently we are following feature branch workflow and our branching structure is as follows:</p>

<pre><code>master -&gt; integration

master -&gt; devtest

master -&gt; preprod
</code></pre>

<p>We are a team of 6 developers and at any point of time different features need to be available on dev test and preprod environments.</p>

<p>All features are checked out from master and after development is completed, for first round of testing we merge the feature into devtest branch.</p>

<p>Once this is approved by tester, feature is merged into preprod branch for UAT. After getting approval we merge this changes to integration branch and finally merge to master after deployment. Also create a tag after merging integration into master.</p>

<p>Q1. Since we are not advanced git users, I want opinion on this branching strategy, if there could have been a better alternative, flaws in this approach or improvements.</p>

<p>Q2. I am currently looking into <code>git flow</code> and <code>git flow avh</code>, but both of them do not support my branching strategy. Is there a way to configure those commands as per my need?</p>

<p>Thank you in advance.</p>
","0","5594698","",""
"40228639","1023812","2016-10-24 22:34:32","11","4036","<git-flow><oh-my-zsh>","How can I enable git-flow-completion in oh-my-zsh?","<p>I'm using <a href=""https://github.com/robbyrussell/oh-my-zsh"" rel=""noreferrer""><code>oh-my-zsh</code></a> and attempting to enable <a href=""https://github.com/bobthecow/git-flow-completion"" rel=""noreferrer""><code>git-flow-completion</code></a>. I'm following the instructions <a href=""https://github.com/bobthecow/git-flow-completion#installation-for-zsh"" rel=""noreferrer"">here</a> to install it as a plugin.</p>

<p>I cloned the plugin files as instructed:</p>

<pre><code>git clone https://github.com/bobthecow/git-flow-completion ~/.oh-my-zsh/custom/plugins/git-flow-completion
</code></pre>

<p>My plugin directory structure looks identical to the example in the installation instructions.</p>

<p>I've edited my <code>~/.zshrc</code> file to include:</p>

<pre><code>plugins=(git git-flow git-flow-completion)
</code></pre>

<p>However, git flow completion is not working. When I type <code>git flow</code> and hit <code>tab</code>, I get a list of files in the current directory instead of the <code>git flow</code> subcommands.</p>

<p>The built-in plugins work fine. I edited my <code>~/.zshrc</code> to include:</p>

<pre><code>plugins=(git git-flow git-flow-completion emoji emoji-clock)
</code></pre>

<p>When I open a new terminal, the <code>random_emoji</code> and <code>emoji-clock</code> functions produce the expected output, but git flow completion still does not work.</p>

<p>I've <a href=""https://stackoverflow.com/a/8224188/1023812"">added my existing PATH</a> to my <code>.zshrc</code> above the line that loads <code>oh-my-zsh.sh</code>. No luck.</p>

<p>I've <a href=""https://github.com/robbyrussell/oh-my-zsh/wiki/Customization"" rel=""noreferrer"">checked the value of <code>$ZSH_CUSTOM</code></a> and it is pointing to the directory where the <code>git-flow-completion</code> plugin is installed.</p>

<p>I wanted to know if custom plugins were being loaded at all, so I installed <a href=""https://gist.github.com/oshybystyi/475ee7768efc03727f21"" rel=""noreferrer"">this auto-stats plugin</a> and it worked correctly, so this problem seems to be isolated to the <code>git-flow-completion</code> plugin.</p>

<p>I've also tried loading the plugin file directly:</p>

<pre><code>source ~/.oh-my-zsh/custom/plugins/git-flow-completion/git-flow-completion.zsh
</code></pre>

<p>There was no output from this command, and completion still does not work.</p>

<p>How can I go about troubleshooting this issue?</p>
","0","1023812","0","0"
"20393475","551273","2013-12-05 06:59:05","6","14576","<git><github><git-flow>","git push error ""error: src refspec xxx does not match any."" using git flow","<p>I used to create an repo on my private git server</p>

<pre><code>git init --bare
Initialized empty Git repository in /home/poc/git_repo/local_display_multi_langs            .git/
</code></pre>

<p>Then I tried to <code>add remote</code> in my working copy on my mac.</p>

<pre><code>git remote add origin ssh://poc@172.19.16.101/home/poc/git_repo/local_display_multi_langs.git
</code></pre>

<p>Executed the following commands</p>

<pre><code>  514  git flow init
  519  git flow feature start read_xml
  524  git ci -am ""first ci""
</code></pre>

<p>Then tried to push all branches to my private git server's repo
and got the exceptions as following</p>

<pre><code>[src] $ git push origin feature
poc@172.19.16.101's password:
error: src refspec feature does not match any.
error: failed to push some refs to 'ssh://poc@172.19.16.101/home/poc/git_repo/local_display_multi_langs.git'
</code></pre>

<p>Did I miss or misuse some steps ?</p>

<p>How to push all the branches on my working copy to remote server ?</p>

<p>Then When I clone the project from my git server.</p>

<p>How to get the new cloned project and original project are identical.</p>

<h2>Thanks</h2>

<p>Thanks for @VonC </p>

<p>Now I can push all the branches on my local working copy to remote server by </p>

<p><code>git push origin --all</code></p>

<p>But When I do git clone <code>ssh://poc@172.19.16.101/home/poc/git_repo/local_display_multi_langs.git</code>
under another folder.</p>

<pre><code>[local_display_multi_langs] $ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/feature/read_xml
  remotes/origin/master
</code></pre>

<p>I saw the above branches which are strange to me.</p>

<p>Because I expect get the same results as the original working copy like the following.</p>

<p>Is there any way to get <code>clone from my remote server and restore the status as the original working copy</code></p>

<pre><code>[local_display_multi_langs] $ git br
  develop
* feature/read_xml
  master
</code></pre>
","0","551273","0","0"
"58909203","923290","2019-11-18 06:44:03","1","186","<git><git-flow>","Develop multiple versions parallel with git-flow","<p>i know this has been asked so much times, i couldn't find appropriate solution to my problem.</p>

<p>in my project, we can work on 3 version parallel. lets say 1.0, 2.0, 3.0. so version.
i will focus my question on the branching and merging from dev and back.
each version should not contain features from greater versions, and by merging back and forked from dev thats make a problem.</p>

<p>i had this idea where we have multiple dev branches, that will run our <code>CI</code> pipline for each commit merged into branch starts with <code>""dev""</code>. this way, the <code>dev-X</code> branch wont merged into <code>dev</code> (main) until the previous version has completed. that gives the flexibility for many versions, and maintain safety. </p>

<p><a href=""https://i.stack.imgur.com/Pt85L.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Pt85L.png"" alt=""enter image description here""></a> </p>

<p>feedback would be much appreciated
thanks! </p>
","0","923290","",""
"58912962","5298806","2019-11-18 10:56:22","1","383","<git><intellij-idea><git-branch><git-flow><intellij-plugin>","Intellij git branches - group them into folders","<p>I'm using <a href=""https://datasift.github.io/gitflow/IntroducingGitFlow.html"" rel=""nofollow noreferrer"">gitflow</a> for my project.<br>
I decided not to squash feature commit for the moment because it's an experimental project and I want fine grane control over modification. Hence I have many branches named <code>feature/&lt;some_feature_name&gt;</code>.  </p>

<p>The default behavior of the ""Branches..."" view of IDEA is to flatten them out displaying a long list that looks like:</p>

<pre><code>├─ master/
├─ develop/
├─ feature/f1
├─ feature/f2
├─ feature/f3
├─ [...]
├─ hotfix/h1
├─ hotfix/h2
└─ [...]
</code></pre>

<p>Many git GUIs graphically groups them into ""folders"", something like:</p>

<pre><code>├─ master/
├─ develop/
├─ feature/  
│   ├─ f1
│   ├─ f2
│   ├─ f3
│   └─ [...]
└─ hotfix/
    ├─ h1
    ├─ h2
    └─ [...]
</code></pre>

<p>Is there any plugin/setting to achieve that?</p>
","0","5298806","",""
"21072380","271150","2014-01-12 07:36:30","2","1679","<git><continuous-integration><git-flow>","CI: One git repository fits it all? Or: gitflow for multiple projects","<p>Until now my team and I do and did not have anything like an automated delivery process in production. Which may sound surprising to some folks, but it simply did not seem to be essential to our daily work. At least we thought so. I am very sure it is something like a car navigation system or an automatic dishwasher - stuff you would die for if you just started using it.</p>

<p>However, as we are planning to launch a not so small project in the next couple of weeks, I want to take care that we are able to not only produce but also deliver updates for it as fast and often as possible. And by often I don't have in mind once a week but multiple times a day.</p>

<p>What I am still uncertain about is the organization of the underlaying git repository/repositories. We currently use a single repository with gitflow as a branching model. The repository contains the following parts:</p>

<ul>
<li>API</li>
<li>CDN</li>
<li>Website</li>
<li>iPhone App</li>
</ul>

<p>Currently we are using tags to mark new releases within the master branch, as we can't say every commit into master results in a new version, because it could be related to the iPhone App or one of the server side applications as well. As you can't just publish a new version of the app to the universe, it will always be asynchronous.</p>

<p>The advantage of having all these applications in one repository is a very simple initial setup for all of us and the guarantee that the iPhone app and the API are working fine together, as long as the developer uses the same branch on both the server (Windows) and the app development environment (Mac) while developing/testing.</p>

<p>However, it doesn't feel right. As written above going that way we are forced to use git tags to distinguish new ""builds"" for the app and the server applications. And on top we always have to publish all three web applications, even if one only fixes or adds something in one of it.</p>

<p>What we propably could do is to introduce development and master branches for each of these applications. That would allow us to give up using tags (which doesn't scale anyway) and kick off a new delivery process with each commit into one of the master branches.</p>

<p>I fear that would lead directly into chaos, because of at least 8 ""base"" branches and the countless hotfix and feature branches.</p>

<p>So my preferred option is another one: splitting it up into 5 repositories. One for each of the apps, one for utilities and other stuff not directly related to one of it.</p>

<p><strong>What do you mean would make sense? How are you doing this? How does it work best for you? Thanks for feedback.</strong></p>
","0","271150","0","0"
"40529466","1190602","2016-11-10 14:00:58","0","1890","<git><version-control><git-branch><git-commit><git-flow>","How to compare two git branches and filter the differences by commit message?","<p>I have a release branch named <code>release/X.X.X.X</code> which contains all feature branches I want to deploy to production. The release branch is made on top of <code>master</code> which is the current state of production.</p>

<p>On every release day I make sure our release branch contains only those changes planned for the release. I use this command to compare the release and master branch: <code>git log release/X.X.X.X ^master --no-merges</code>. I then manually check the commits for keywords like ""SHR-1234"" which represent ticket numbers in our ticket management system. I need to compare each commit with a list of ticket numbers to identify unwanted changes.</p>

<p>How can I filter commits that are returned by <code>git log release/X.X.X.X ^master --no-merges</code> and <strong>do not contain</strong> keywords like ""SHR-1234""? This way I can identify the ticket number of unwanted changes.</p>

<p>I tried grep and awk but the results are not useful because they don't filter out the whole commit.</p>
","5","1190602","",""
"47751244","509565","2017-12-11 10:49:30","1","49","<git><git-flow>","Why there's no `git flow hotfix fetch`?","<p>Working with a geographically dispersed dev team from time to time happens that a colleague prepares a <code>git flow hotfix</code> and publishes it for review (or because he has no grants to <code>finish</code> it).</p>

<p>When I <code>git pull</code> the repo I cannot fetch the hotfix in a proper way: the branch is present in the local repo but it isn't marked as an hotfix.</p>

<p>How can I execute correctly this work-flow?</p>

<p>Riccardo:</p>

<pre><code>$ git pull
$ git flow hotfix start myhotfix
...
$ git commit -m ""Fixed!"" -a
$ git flow hotfix publish
</code></pre>

<p>Luca:</p>

<pre><code>$ git pull
$ git flow hotfix
No hotfix branches exist.
</code></pre>
","0","509565","0","0"
"29898906","1598840","2015-04-27 14:43:59","1","2133","<git><atlassian-sourcetree><git-flow>","git flow hotfix naming / versioning","<p>When thinking about the git flow I face a problem when it comes to creating hotfix branches.</p>

<p>When using git flow (at least with SourceTree) it seems that the tagged version for a hotfix has to be determined right before committing/pushing anything. So if our current version is <code>1.2.0</code> and we want to fix a bug the next version tag will be <code>1.2.1</code>. But how do I know that <code>1.2.1</code> will not be taken by another hotfix before I will finish and push my fix?</p>

<p>Am I thinking wrong or is this a problem that developers should be aware of?</p>
","0","1598840","",""
"39144620","1180442","2016-08-25 11:54:40","2","185","<git><git-flow>","Storing incomplete work with git flow","<p>I'm just getting to the stage where something like git flow is going to come in very handy with my project but I'm a bit unsure as to how to swap between features when the feature I'm currently working on isn't quite done.</p>

<p>So if I have a project and I do</p>

<pre><code>$ git flow feature start feature1
</code></pre>

<p>then do some work but not quite get it to the stage where I'm happy to commit it before I need to head off and work on another issue, what should I do with my work before I do</p>

<pre><code>$ git flow feature start feature2
</code></pre>

<p>?</p>

<p>Is git stash the correct way to go? It doesn't quite seem to do what I want it to do and looks like it could get quite messy quite quickly. But I definitely don't want to commit my changes and it seems silly to have re-clone the entire repo in another directory so I can work on it separately.</p>
","0","1180442","",""
"66402670","4747763","2021-02-27 19:25:57","0","129","<git><git-flow>","How to change the default git-flow remote server name in git-flow?","<p>I know how to rename a remote server, the question is I have to?</p>
<p>I am used to git, but I decided to try git flow.</p>
<p>The command I would use in git is <code>git pull feature/my-feature</code> and it would work since I already <code>git checkout -b feature/my-feature</code> and <code>git branch --set-upstream-to gitlab/feature/my-feature</code>, but when I try <code>git flow feature track my-feature</code> I got the following error <code>Fatal: Could not fetch branch 'feature/my-feature' from remote 'origin'</code>. I think it happens because git flow try by default to pull from origin. I would like to know if I can change this default behavior since I don't use the <strong>origin</strong> name.</p>
","3","4747763","",""
"12966566","692020","2012-10-19 02:34:07","2","2138","<git><git-flow>","Can't install git flow","<p>Trying to install git flow</p>

<p>Run: </p>

<pre>
brew install git-flow
</pre>

<p>Got:</p>

<pre>
Updating /Library/Caches/Homebrew/git-flow--git
error: could not lock config file .git/config: Permission denied
Error: Failure while executing: git config remote.origin.url https://github.com/nvie/gitflow.git
</pre>

<p>Also run: </p>

<pre>
wget --no-check-certificate -q -O - https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | sudo sh
</pre>

<p>Got:</p>

<pre>
Submodule path 'shFlags': checked out '2fb06af13de884e9680f14a00c82e52a67c867f1'
install: /usr/local/bin/git-flow: No such file or directory
install: /usr/local/bin/git-flow-init: No such file or directory
install: /usr/local/bin/git-flow-feature: No such file or directory
install: /usr/local/bin/git-flow-hotfix: No such file or directory
install: /usr/local/bin/git-flow-release: No such file or directory
install: /usr/local/bin/git-flow-support: No such file or directory
install: /usr/local/bin/git-flow-version: No such file or directory
install: /usr/local/bin/gitflow-common: No such file or directory
install: /usr/local/bin/gitflow-shFlags: No such file or directory
</pre>
","1","692020","0","0"
"58318765","10359630","2019-10-10 08:39:40","0","3720","<bitbucket><atlassian-sourcetree><git-flow>","using sourcetree and gitflow to do a release","<p>I am new to using <code>sourcetree</code> and my repository is in <code>bitbucket</code>.</p>

<p>If i am using the git-flow to do release do i need to have write permission on both master and develop because when i click the finish release button it creates changes to my local master and develop and i am not able to push these as i don't have write permission. </p>

<p>I can only make pull request. So i am not sure the sequence of events i need to do.
I have tried to create pull request from release to master and also release to develop, approve and merge but then when i click finish release to add the tag i still get same issue.</p>
","1","10359630","0","0"
"13058266","1213963","2012-10-24 21:44:36","3","6658","<git><git-flow>","Installing and Configuring git flow on an already existing project","<p>I'm really new to git (read the basics of the git pro book) and have few back-end knowledge.
As my project is expanding git flow seems to be the most appropriate and simple tool for what I need. Yet I'd like to be sure of the steps to follow before getting started.</p>

<p>My <code>\var\www</code> folder is as follows:</p>

<ul>
<li>myproject</li>
<li>myproject_preview</li>
</ul>

<p>Currently I'm doing the changes in myproject_preview, I'm doing tests and whenever it's ok to release I manually copy the changed file.</p>

<p>I still want to be able to preview the changes before pushing them to myproject.</p>

<p>From what I figured, I need to :</p>

<ol>
<li>create a repositoy using <code>git init -u</code> in myproject </li>
<li>clone it in myproject_preview</li>
<li><code>git flow init</code> in myproject_preview</li>
<li>do changes and commit</li>
<li>push commits to myproject (remotely ?)</li>
</ol>

<p>Is that the right way to do it ?</p>

<p>Writing this thread, I realize I'm not so sure I'm familiar with the git concept :/</p>
","0","1213963","",""
"13134841","855998","2012-10-30 08:01:20","1","385","<git><alias><git-flow>","how to alias git flow hotfix finish [current_hotfix_branch]","<p><strong>git flow</strong> only allows one hotfix branch at any one time. So rather than typing:</p>

<pre><code>git flow hotfix finish hotfix_branch
</code></pre>

<p>I'dl like to create an alias that uses the only existing hotfix branch name. Something like the following pseudocode:</p>

<pre><code>[alias]
  fix-done = flow hotfix finish `git_fetch_branch_beginning_with_hotfix`
</code></pre>

<p>Can anyone help? Thanks.</p>

<p>Update: I'm using zsh.</p>
","0","855998","0","0"
"20086669","1640653","2013-11-20 03:18:53","1","453","<git><version-control><merge><git-branch><git-flow>","How to merge ""develop"" branch from different people in git flow branching model?","<p>Is ""develop"" branch in git flow branching model shared by different people? So we have to manually push ""develop"" and pull it to merge?</p>

<p>Or each person have his ""develop"" branch and people need to get ""feature"" branch by ""git flow feature publish"" and ""git flow feature pull""?</p>

<p>Which way is correct in using git flow branching model?</p>
","0","1640653","",""
"18609060","418366","2013-09-04 08:35:52","2","340","<git><git-flow>","How to list the files commited using git/git flow","<p>I created a hotfix using git flow. Now I did that a while ago and committed few files to the development environment. Then I switched to another feature. Now I wish to see the list of files I changed/committed against this hotfix.</p>

<p>Could any one please give the command on how to list the files.</p>
","2","418366","0","0"
"58205848","18149","2019-10-02 16:44:52","0","82","<git><github><merge><git-flow>","Orientation of git flow feature merges?","<p>In <a href=""https://stackoverflow.com/a/16440520/18149"">this answer</a> the author talks about:</p>

<blockquote>
  <p>""You normally don't merge feature branches repeatedly into develop.
  You merge develop into the feature branches (i.e. the other way
  around) or rebase the feature branches onto the HEAD of develop
  (recommended).""</p>
</blockquote>

<p>Now when I've done feature branch merges without <code>git flow</code> in the past I've always just switched my <code>master</code> branch and then run <code>git merge &lt;latest-feature-branch-commit&gt;</code> and that merges it back into master after merging any conflicts and committing.  So in <code>git flow</code> assuming the same is true with the <code>develop</code> branch acting as the <code>master</code> branch in this case (or at least that's how I've always thought of it, since you branch your <code>feature/*</code> branches off of it in <code>git flow</code>), what does the author of that post mean about ""you merge develop into feature branches""?  Does he mean you should be in the <code>feature/n</code> branch and then merge <code>develop</code> from there?  That sounds a bit obsurd unless I'm missing something...</p>
","0","18149","",""
"39362994","3319210","2016-09-07 06:49:52","1","523","<git><gitlab><git-flow><sourcetree>","Cant create release with git flow in source tree","<p>I'm using gitflow to create a new release but in the final step when pushing to remote on gitlab I get this error message:</p>

<pre><code>fatal: could not read Username for 'https://gitlab.local': Device not configured
</code></pre>

<p>Have no idea why, may it be related to some settings on gitlab?</p>
","1","3319210","0","0"
"39519828","1391441","2016-09-15 20:29:09","4","42","<git><git-flow>","Will 'git push origin <branch>' remove <branch> remotely after removing it locally?","<p>I'm following the <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">git-flow</a> model and I have a doubt.</p>

<p>First, I add a new feature branch from 'develop':</p>

<pre><code># Checkout from develop branch
$ git checkout -b &lt;branch&gt;
# Push and track &lt;branch&gt;
$ git push --set-upstream origin &lt;branch&gt;
</code></pre>

<p>After the feature is finished, I follow <em>Incorporating a finished feature on develop</em>:</p>

<pre><code># Switch to 'develop'
$ git checkout develop
# Merge &lt;branch&gt; into 'develop'
$ git merge --no-ff &lt;branch&gt;
# Remove &lt;branch&gt; locally
$ git branch -d &lt;branch&gt;
# Remove &lt;branch&gt; remotely &lt;-- ???
$ git push origin develop
</code></pre>

<p>The last command is the one that I'm not sure about. Will it remove remotely the <code>&lt;branch&gt;</code> I just removed locally?</p>
","8","1391441","",""
"58433935","6071045","2019-10-17 13:32:25","0","379","<git><continuous-integration><git-flow>","git-flow: how to create a release branch without all features merged into develop?","<p>In a normal <strong>git-flow</strong> process, the life cycle expects to have one or more <strong>feature</strong> branches that are joined back into <strong>develop</strong> when features are completed.</p>

<p>Then a <strong>release</strong> branch is created from develop branch when features are completed.</p>

<p>But let's suppose that I have to create multiple releases where:</p>

<ul>
<li>a first release needed for a <strong>t0</strong> instant contains all features</li>
<li>another release needed for a <strong>t1</strong> instant contains some features (and not all of the t0 instant)</li>
</ul>

<p>How can I do that, by the moment that <strong>at t1 instant develop is already updated with all features implemented in t0</strong>?</p>

<p>Is git-flow still applicable to this kind of context, and how?</p>
","0","6071045","",""
"20586024","997156","2013-12-14 17:19:00","0","59","<git><git-flow>","Copying origin/master to a new trunk to use git-flow","<p>I'd like to make a copy of origin/master of a repo such that there are two side-by side trunks, with the second one, origin/develop. I want both trunks to have all of the same commits up to a certain point (which would the time origin/develop was created) but if you were to look at the very first commit, each trunk would have a different root. Is this possible?</p>

<p>Basically, my team has had one origin/master branch to work with but we'd like to move to something more like git-flow so there are multiple side by side trunks. Given that we've had all of this history we don't want to lose, how do you move to the git-flow model?</p>

<p>Here's the workflow:</p>

<pre><code>origin/master                              
-&gt; Initial Commit on origin/master         
-&gt; SHA1                                    
-&gt; SHA2                                    
-&gt; SHA3                                    
-&gt; SHA4                        

===&gt; create a duplicate of origin/master as origin/develop

                 origin/develop
                 -&gt;same initial commit that was on master
                 -&gt;SHA1
                 -&gt;SHA2
                 -&gt;SHA3
                 -&gt;SHA4
                 -&gt;SHA5: committed to origin/develop only
                 -&gt;SHA6: committed to origin/develop only

&lt;=== merge develop (SHA5 &amp; SHA6) into master at this point
</code></pre>
","0","997156","",""
"35177541","352841","2016-02-03 12:48:20","0","1428","<git><git-flow>","Not able to initialise a cloned repo for git flow","<p>I have some legacy visual studio projects that need to brought under source control and they seem ideal candidates for the git flow workflow.  However, I have hit a problem that I can't create any git flow branches as the resulting repo shows as not being git flow initialised and wonder if I've missed a step or done something incorrectly.</p>

<p>The steps I've used are as follows:</p>

<ol>
<li>Create  a git repo using Visual Studio (mostly VS2015 but some with VS2012 but the problem exists regardless of version.)</li>
<li>Open the repo in Source Tree (v1.7.0.32509) and hit the <em>Git Flow</em> toolbar button, accepting the default settings. This adds the expected <strong>develop</strong> branch in addition to the existing master branch.</li>
<li><p>Launch the terminal from within Source Tree and create a bare clone of the repo to act as a central team repo (I don't see an option to do this within the Source Tree menus but I'm happy with the command line :) .)</p>

<p>git clone --bare [current repo path] [bare repo path.git]</p></li>
<li><p>Clone the new bare repo for a local working copy.  This has a branch of  <strong>develop</strong> and remote branches of <strong>origin/master</strong> <strong>origin/develop</strong> <strong>origin/HEAD</strong></p></li>
</ol>

<p>Opening the *original repo ins Source Tree, the one from which the bare repo is created, and selecting Git Flow give the options to <em>Start a new feature</em>, <em>Start a new release</em>, etc, as expected.</p>

<p>The problem comes after opening the new local working copy <em>create from</em> the bare clone.  Source Tree doesn't recognise it as a git flow repository as it's missing a local master branch:</p>

<p><a href=""https://i.stack.imgur.com/Eqi26.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Eqi26.png"" alt=""full error message from Source Tree that the master branch is missing""></a></p>

<p>Adding a local master branch with:</p>

<pre><code>git branch master origin/master
</code></pre>

<p>and then reinitialising the local repo for git flow again <em>seems</em> to solve the problem.</p>

<p>My question is are these additional steps usual or have I misunderstood something?  I can't believe this is the normal process as git is usually simpler than that :-)</p>
","1","352841","",""
"20861819","799502","2013-12-31 18:34:37","2","475","<git><git-branch><bower><git-flow>","Is is possible to use to use git-flow (or vanilla git), to have different set of (build) files on master & develop branches?","<p>Is is possible to use git-flow (or a vanilla git chain of commands, or another gitXXX candy), to have a different set of files on <strong>master</strong> (i.e release) &amp; <strong>develop</strong> branches ?</p>

<p>Since git repos are used for deployment (see below), I want my <strong>develop</strong> branch to contain <em>strictly source files</em>, but when I merge it into <strong>master</strong>, I want master(release) branch to also contain release/compiled outputs, zip files, optimized resources etc. </p>

<p>NOTE: The question seeks for: </p>

<ul>
<li><p>an <strong>example scenario</strong> and the <strong>git/git-flow commands</strong> that would keep <code>develop</code> and other branches clean of compiled/build stuff, while only <code>master</code> has them in an extra <code>./build</code> directory. </p></li>
<li><p>The two branches should still remain in good sync and the whole branching/merging process should be automatic, painless and safe. Perhaps some day it becomes a standard git-flow feature &amp; practice.</p></li>
<li><p>I know this is not recommended, cumbersome, non optimal etc, but bear in mind that :</p>

<ul>
<li><p>git repos are increasingly used for deployment - eg see <a href=""http://bower.io"" rel=""nofollow"">http://bower.io</a> that uses strictly <strong>git repos</strong> and <strong>semver</strong> tags to deploy compiled stuff.</p></li>
<li><p>the question asks <strong>if its possible</strong>, not if <strong>its desirable</strong> or a <strong>good practice</strong>. If it is <strong>not possible</strong>, a good explanation is desirable.</p></li>
</ul></li>
</ul>
","4","799502","0","0"
"58881970","5682657","2019-11-15 17:28:20","3","4926","<azure-devops><azure-pipelines><azure-pipelines-release-pipeline><git-flow>","Azure DevOps release pipeline with git-flow","<p>I'm attempting to configure a release pipeline in Azure DevOps (on premises) to support a git-flow strategy.  What I'm trying to achieve:</p>

<ol>
<li>Commits to 'release/*' trigger a build of the software and publish to a location for QA</li>
<li>Commits to 'master' take the <strong>same</strong> software build (artifact) from step 1 and publish to Production location</li>
</ol>

<p>So when I do a git-flow 'start release' the software is made available for testing/QA and when I 'finish release' it's made available to users.</p>

<p>My build pipeline works fine, it's triggered by the release branch and concludes with a Publish Artifact task.  My release pipeline uses this artifact and has stages for QA and Production but the Production stage never triggers.  For QA I've got an artifact filter for 'release/*' and on Production for 'master'.</p>

<p>Is there a way to trigger my second release pipeline stage on a commit to 'master'?</p>
","0","5682657","",""
"18797561","402941","2013-09-14 02:03:42","8","6226","<git-flow>","How to do git-flow in TFS","<p>I have just started a new job and their code management is an undisciplined mess. Normally that's ok and I can cope with it but in this place it's ridiculously bad.</p>

<p>They use TFS...there is nothing I can do about this. There is no chance of introducing git but I have been reading about git-flow and I wondered if there is a set of tools the can manage branching and hotfixing like git-flow with the out of the box TFS tools.</p>

<p>At the very least I would appreciate being directed to any documentation, practices, cheat-sheets etc that make the task of teaching a team of programmers to use source control properly easier. This is more than just a software problem its a hearts and mind thing too.  </p>
","2","402941","0","0"
"40484929","7131095","2016-11-08 10:46:49","2","1642","<git><git-pull><git-flow>","Will a ""git-pull develop"" fetch all the commits reacheable from develop?","<p>I have a question regarding how git will pull the changes form the remote, and how many history.</p>

<p>I'm considering to follow a gitFlow workflow for my project. We are 80 developers, and we will be integrating our changes from feature branches to the develop branch - by means of pull requests to perform code review first. </p>

<p>We will need to (locally) rebase our feature branches on (top of) develop, so that we have all the latest develop changes integrated. Hence, we will be pulling develop often. Here, I don´t want to fetch other teammates' feature branches - nor their commit history.  </p>

<p>Now, if I pull develop, will this operation bring commit history that happen under other feature branches if they are reachable (through a merge commit) from develop?</p>

<p>Thanks in advance :-)</p>

<p><strong>EDIT</strong>:  I might not have been clear enough:</p>

<ol>
<li><p>We use rebase locally, so that pull request over develop branch are mergeable. We don't use merge as it might ""pollute"" feature branches when performing code-review. If the pulll request is accepted then, we will merge with a non fast forward commit. </p></li>
<li><p>I know I can ""git fetch origin develop"". Here is my question: will git pull origin develop just ""fetch"" the blue commits or also the  green ones? See figure <a href=""https://i.stack.imgur.com/zoyEE.png"" rel=""nofollow noreferrer"">git-pull-</a></p></li>
</ol>
","4","7131095","0","0"
"18859477","1975301","2013-09-17 20:39:53","1","2435","<git><github><git-flow>","How to checkout gitflow branches?","<p>Okay, so I have some repository and I create a feature branch using git flow...</p>

<pre><code> git flow feature start refactor
</code></pre>

<p>Now I hack around at it for a bit and decide to test code on another system...</p>

<pre><code> git add code
 git commit -m 'refactored stuff'
 git flow feature publish refactor
</code></pre>

<p>Now I have some branch in github named feature/refactor. Now I go to another machine and browse to the project folder. </p>

<p>How do I check that new branch out? I've tried...</p>

<pre><code> git checkout feature/refactor
</code></pre>

<p>... and git doesn't like it because there's a slash in the argument? I'm not sure what I'm doing wrong here. Can anyone point me in the right direction? I've also tried...</p>

<pre><code> git flow feature pull refactor
</code></pre>

<p>... but git doesn't seem to like that either.</p>
","0","1975301","0","0"
"45076026","1411083","2017-07-13 09:01:53","2","241","<git><git-flow>","Check if a git branch is properly rebased","<p>I'm looking to create a server hook that ensure a branch is properly rebased and look like this clean graph :</p>

<pre><code>*   883ffd1 (HEAD, origin/master, origin/HEAD, composer/master, master) Merge branch '...' into 'master'
|\  
| * 1062849 ...
|/  
*   becc0d5 Merge branch '...' into 'master'
|\  
| * 36abc00 ...
| * 6c2462a ...
| * c4c53a7 ...
|/  
*   021f4c4 Merge branch '...' into 'master'
|\  
| * cce9877 ...
|/  
*   2d3eed0 Merge branch '...' into 'master'
|\  
| * a6c1c5c ...
|/  
*   b1e9311 Merge branch '...' into 'master'
</code></pre>

<p>And should prevent this kind of graph :</p>

<pre><code>*   2c9fad0 Merge branch '...' into 'master'
|\  
| * 7bdf6c9 commit
| *   7de8146 Merge branch 'FEATURE-functional-tests' of ssh://... into FEATURE-functional-tests
| |\  
|/ /  
| * 8f8f3fb commit
* | f5a16e4 ...
* | c59a5c7 ...
* |   0e9979a Merge branch '...' into 'master'
|\ \  
| * | 697bb30 ...
|/ /  
* |   315eeb6 Merge branch '...' into 'master'
|\ \  
| * | 3035d50 ...
* | |   70515bb Merge branch '...' into 'master'
|\ \ \  
| |/ /  
| * | 4032719 ...
* | |   35d4a19 Merge branch '...' into 'master'
</code></pre>

<p>How can I check something like that?</p>
","0","1411083","",""
"27217061","211160","2014-11-30 19:08:50","2","1261","<git><git-flow>","Is git-flow supposed to see a more compressed history on master than develop?","<p>Pardon my ignorance here, but I'm attempting to put the <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">""git-flow""</a> model into practice (manually, without the git-flow toolset).</p>

<p>One concept I found interesting was the idea that there would be a master branch for which every commit was a bona-fide workable release.  So you have your v1.0.0 commit on master tagged, then your v1.1.0 tag, and that's a nice 2-commit-long log when viewing master.  But then you're ready to release v1.2.0 and your <code>develop</code> branch has 1000 intermediate commits, but you're ready to sign off and push the button to say <em>""all right, it's release time""</em>.</p>

<p>My goal is to add a third commit onto the master timeline.  I can see that the <code>--squash</code> option will let you add a single commit onto the master, so you view the master log and see your three commits: v1.0.0, v1.1.0, and v1.2.0.  As lengthy and verbose as the develop branch may be, the squashing gets you down to a neat history for master where each version is an official release...no chance of grabbing an intermediate development commit off that!</p>

<p>It works, but the thing that troubled me is that looking in the network graph this produces a ""disconnected"" commit.  There's no apparent relationship that Git understands tying this squashed third commit to all those thousands of additions to the develop branch.  It seems to float alone, unlike the git-flow diagrams which are hand-drawn and always point things to things.</p>

<p><img src=""https://i.stack.imgur.com/IVsnW.png"" alt=""git flow hand drawn""></p>

<p>Other options for merging which get the ""merge arrow"" (a.k.a. the multiple parents) seem to have the side effect of establishing a connection to the intermediate commits.  So suddenly master isn't just these 3 blessed commits...it has expanded to include the full history of all these 1000 commits on develop.  Kind of seems to defeat the purpose, if the point of master was to be a branch containing only releasable versions...but suddenly every intermediate state has a commit on master.  1003 instead of 3 master commits.</p>

<p>Git visualization is a bit sinister in that it glosses over duplication in branches.  So the diagrams I see drawn on git-flow are pictures and not terminal printouts of <code>git log</code> etc.   I am unsure what one is to expect from a statement like saying that master only consists of releasable versions.</p>

<p>Long story short: I can't find options that retain the ""arrow-looking"" relationship between develop and master at a release point unless they carry the full commit history.  Should this worry me if I look at git-flow diagrams which have lots of arrows?  In the scenario I outlined, should I look at the master history and see every intermediate develop version that was merged and a 1003 commit history, or the 3 commit history?</p>
","3","211160","0","0"
"27255046","117188","2014-12-02 17:09:37","14","1446","<git><git-flow><git-subtree>","git subtree merged on root of repository (w. git-flow)","<p>We have a repository, git-flow based, where we added an external library as a subtree (using Atlassian SourceTree's git subtree) on the development branch.</p>

<pre><code>Project/
  Library/
    X/
    Y/
    Z/
</code></pre>

<p>Later we did a <code>git flow release</code>, merging the changes from develop into master (release).</p>

<p>The problem is when checking out master, the contents of Library get placed on the root of the repository instead of inside Library, like it had lost the <code>git subtree</code> prefix during the merge.</p>

<pre><code>Project/
  X/
  Y/
  Z/
</code></pre>

<p>Any idea what's gone wrong?</p>
","7","117188","0","0"
"27684026","4337125","2014-12-29 05:51:57","4","3022","<git><git-flow>","What is the difference between ""git push origin <branch>"" and ""git flow feature publish""?","<p>Both of these commands will push the code to the respected branch so that the other developers can work on that branch. Then what is the exact difference between these two commands?</p>
","3","4337125","0","0"
"45541717","8211949","2017-08-07 07:43:23","2","163","<ruby-on-rails><database><git><schema><git-flow>","Database issue (orphaned migrations) when using git flow branches","<p>Have a git flow question if anyone can help. I'm not really comfortable with using the git flow approach to things so this may be a very stupid question, but here goes:</p>

<p>The way my company handles things is by naming each feature after a specific issue code that relates to the GitHub ""issues"" page. So, for example, I finished <code>feature/issue-3118</code> a short time ago. In that branch, I had to remove 2 columns from the user table and clear out (or change) anything that was trying to access it. This was completed, all tests passed etc so I pushed the branch. I then did a <code>git checkout develop</code> and started  a new feature branch for the next task assigned to me (called <code>feature/issue-3201</code>).</p>

<p>The problem I have now is that the current branch is failing a bunch of tests that were fixed in the last branch. Running <code>rake db:migrate:status</code> shows my 2 previous migrations as now being orphaned so methods etc. trying to access them are failing tests. </p>

<p>The <code>issue-3118</code> branch is still in review so I can not just update my master and be on my way. Rather than going through all the database changes again manually (or waiting for the master to be updated), is there an easy way to get over this issue? If I merge the branches, won't this cause conflict issues when I push the current branch?</p>

<p>(If this does indeed sound like a really stupid question, I am about as junior as junior devs get - started my first web development job on August 1st!)</p>
","3","8211949","",""
"10704922","1982991","2012-05-22 15:15:54","11","3597","<git><git-flow>","Move modifications made in develop branch into a new git-flow feature branch?","<p>I'm using git-flow for my projects, and have started a rather complicated set of changes in the develop branch, which appear to take longer than I expected first. </p>

<p>I wish I had done this in a feature branch, since I'd like to make a new release with other changes. How can I move these uncommitted changes into a new git-flow feature branch?</p>
","0","1982991","0","0"
"28653987","1018839","2015-02-22 02:56:07","0","332","<git><git-flow>","git flow: 2 feature branches that share components, how to sync them?","<p>I'm using git flow for my projects and I'm having a question in relation to finding the right approach to an issue I'm having.</p>

<p>I have my <code>develop</code> branch and started <code>feature/stores</code>. I've changed quite a few things in parts of the code that will be used in my next feature: <code>feature/user</code>.</p>

<p>However, my develop hasn't been updated with <code>feature/stores</code> yet (it's not yet finished), but <code>feature/user</code> will have to use some stuff I did in <code>feature/stores</code>.</p>

<p>Do I just branch off of the (outdated) <code>develop</code> branch and then resvolve the merge conflicts later (with the chance of not being 100% certain what's supposed to be there), or can I somehow use the unfinished <code>feature/stores</code> branch as a start for my <code>feature/user</code> branch and keep it updated?</p>
","3","1018839","",""
"65176429","7072691","2020-12-07 05:11:42","1","73","<git><git-flow>","Is Git-flow applicable? I think git-flow has flaw on the step merging to master before release","<p>Most people using the git-flow guide the release process after developing feature like below.</p>
<ol>
<li>Merge <code>feature</code> branch to develop</li>
<li>Create a new <code>release</code> branch from the <code>develop</code></li>
<li>Start QA on the <code>release</code> branch and commit to the <code>release</code> branch the fixs from QA. It also means the <code>release</code> version source runs on the QA env(aka. beta)</li>
<li>Merge the <code>release</code> branch to the <code>master</code> branch and tag <code>version</code> to the master branch after QA.</li>
<li>Create <code>hotfix</code> branch from the <code>master</code> branch if there is a bug in production env.</li>
</ol>
<p>I think step 4 is harmful because there is a step to resolve conflict in it.
During resolving conflict, bugs can occur.</p>
<p>Someone can say that the potential conflicts should be already resolved on the <code>release</code> branch to keep merging the latest <code>develop</code> branch to the <code>release</code> branch. The <code>develop</code> branch contains the latest other release versions.</p>
<p>But this argument is ridiculous. In my experience, merging other features could not be accepted during QA one feature. It's even impossible to merge over and over again. In this circumstance, it is impossible to merge the <code>develop</code> branch to the <code>release</code> branch over and over again. Then, the merging from the <code>release</code> branch to the <code>master</code> branch would produce many conflicts. After that, the manual work for resolving conflicts could produce other bugs that are not found in QA. The tagging immediately after merging to <code>master</code> branch is to be hasty.</p>
<p>My company does production env QA normally after beta QA which is done using the <code>release</code> branch. In this circumstance, so many hotfix branches could be produced, isn't it? Not only that, I think the name <code>hotfix</code> isn't fit for this case because it is not actually released before production env QA.</p>
<p><strong>[My Idea &amp; Suggestion]</strong></p>
<p>From this context, I think the release should be done on the <code>release</code> branch and also tagging on it. Because the <code>release</code> branch is verified during QA and there is no potential bug from merging it to another branch.</p>
<p>Someone can say that You're gonna get too many branches. It doesn't matter if I tag it on the commit and delete the branch.</p>
<p><strong>[Question]</strong></p>
<p>If my think is wrong or has flaws, please let me know and understand why the git-flow is better or flawless.</p>
<p>If you empathize with my context or agree with my thought, Is there a better idea?</p>
","3","7072691","",""
"28437768","4064650","2015-02-10 17:15:59","35","37672","<github><git-svn><git-branch><git-flow>","Git flow command error: 'flow' is not a git command","<p>I am very new to Git and am starting to learn the command line version. I believe my git flow is not installed correctly. I am running this from a pc. </p>

<p>When i run following command:</p>

<pre><code>git flow feature start JamesTest
</code></pre>

<p>I get the following error:</p>

<blockquote>
  <p>git: 'flow' is not a git command. See 'git --help'<br>
  Did you mean any of these?</p>
</blockquote>

<p>Looks like the git flow command is not being recognized from all paths? How do I fix this? </p>
","3","4064650","0","0"
"28836295","2723547","2015-03-03 16:02:11","7","2347","<git><maven><ssh><release><git-flow>","Release with maven + gitflow","<p>i am using Maven + gitflow to generate releases of my application, but when i try start release i got one error.</p>

<p>Command to start release:</p>

<pre><code>mvn jgitflow:release-start
</code></pre>

<p>Error:</p>

<pre><code>Caused by: org.eclipse.jgit.errors.UnsupportedCredentialItem:
ssh://git@127.0.0.1:10022: The authenticity of host '127.0.0.1' can't be established.
RSA key fingerprint is 7e:03:51:7b:55:a5:cd:de:4c:7a:0d:1b:43:75:08:68.
Are you sure you want to continue connecting?
      at  com.atlassian.maven.plugins.jgitflow.util.ConsoleCredentialsProvider.get(ConsoleCredentialsProvider.java:71)
</code></pre>

<p>If i change git url for using HTTP protocol, the build finish with success, the error appears only with ssh protocol.</p>

<p>ps: i already clone my repository through public/private key.</p>
","0","2723547","0","0"
"28841501","540718","2015-03-03 20:42:29","3","1217","<git><git-branch><git-flow><git-tag>","git-flow hotfixes with semantic versioning","<p>Following Jeff's tutorial at <a href=""http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/"" rel=""nofollow"">http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/</a>, I initialised git flow with the standard settings:</p>

<pre><code>[~/tmp/test]
$ git init
Initialized empty Git repository in /Users/nrm/tmp/test/.git/

[~/tmp/test (master)]
$ git flow init
No branches exist yet. Base branches must be created now.
Branch name for production releases: [master]
Branch name for ""next release"" development: [develop]

How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? []

[~/tmp/test (develop)]
$
</code></pre>

<p>I follow the tutorial up to the section ""Hotfixing production code"". There the hotfix branch is named ""assets"":</p>

<pre><code>$ git flow hotfix start assets
Switched to a new branch 'hotfix/assets'

Summary of actions:
- A new branch 'hotfix/assets' was created, based on 'master'
- You are now on branch 'hotfix/assets'

Follow-up actions:
- Bump the version number now!
- Start committing your hot fixes
- When done, run:

     git flow hotfix finish 'assets'
</code></pre>

<p>BUT, when the hotfix branch is closed the tutorial states <code>The hotfix was tagged '0.1.1'</code>. How come? I'm using <code>git-flow: stable 0.4.1</code>. </p>

<p>When I close the hotfix by <code>git flow hotfix finish 'assets'</code>, then the tag is equal to the hotfix branch name:</p>

<pre><code>$ git flow hotfix finish assets
                         ^^^^^^
Switched to branch 'master'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Switched to branch 'develop'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Deleted branch hotfix/assets (was 08edb94).    

Summary of actions:
- Latest objects have been fetched from 'origin'
- Hotfix branch has been merged into 'master'
- The hotfix was tagged 'assets'
                 ^^^^^^^^^^^^^^^
- Hotfix branch has been back-merged into 'develop'
- Hotfix branch 'hotfix/assets' has been deleted
</code></pre>

<p>Actually, I want to have both. Name a hotfix branch with some string (like ""assets"" in the example) independently from the tag name. Something like</p>

<pre><code>$ git flow hotfix finish assets --with-tag 1.0.1
</code></pre>

<p>resulting in</p>

<pre><code>$ git flow hotfix finish assets --with-tag 1.0.1

Switched to branch 'master'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Switched to branch 'develop'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Deleted branch hotfix/assets (was 08edb94).
               ^^^^^^^^^^^^^

Summary of actions:
- Latest objects have been fetched from 'origin'
- Hotfix branch has been merged into 'master'
- The hotfix was tagged '1.0.1'
                         ^^^^^
- Hotfix branch has been back-merged into 'develop'
- Hotfix branch 'hotfix/assets' has been deleted
                 ^^^^^^^^^^^^^
</code></pre>

<p>Any suggestions?</p>
","0","540718","",""
"29272058","3045103","2015-03-26 06:04:42","4","309","<git-flow>","Solving feature dependency in git flow branch model","<p>Git flow is an interesting idea and branch model to manage a big project. But, for example, I want to develop a big feature which contains some sub-features, or if two features in the model they have to depend on each other, what is the best way to manage these two features in this case?</p>

<p>Shall I just use one feature instead of two since they depend on each other. Or I should keep using git pull feature/other-feature to feature/this-feature to ensure the dependency is up to date.</p>

<hr>

<p>And a lot of time, my team member doesn't fully test the feature and marks the features as finished too early. This unfinished feature, says feature/unfinished, will be removed and merged into develop branch. After other features merged into develop, we find out there are some bugs in feature/unfinished. In this case, shall we start a new feature to fix the bug or I revert the merge of unfinished feature and restart it. The problem of restarting a feature is that, if the later merged features actually depend on this unfinished feature and I revert the merge of unfinished feature, then the develop branch will be broken. Then what is the best practice of this case?</p>

<hr>

<p>Thanks!</p>
","0","3045103","0","0"
"12317923","462948","2012-09-07 12:16:14","4","2020","<git><git-branch><git-flow>","How to deal with major version branch in git","<p>I'm just switching a development project from SVN to git and it's the first time we'll be using branching of any kind.  I'm wrapping my brain around the git-flow approach (based on <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">this great article</a>), but am stuck conceptualizing how to do one thing.</p>

<p>When we do a major version bump (say from 2 to 3) we still support version 2 for at least a year, including bug fixes and occasional new features.  Would I create a new permanent branch for version 2 to apply those changes to?  And if we get down the road developing for version 3 and decide that we want to add a new version 3 feature into version 2, is that possible, and how would you do it?  Would I have to cherry-pick commits from the develop branch into the version-2 branch, or could I do an actual merge?</p>

<p>(I'm using Tower for my Git client)</p>
","1","462948","0","0"
"29967055","1332764","2015-04-30 11:52:15","1","192","<git><latex><git-flow>","How to have several ""develop"" branches with git-flow?","<p>I guess this is common in software development for instance with paid/free versions, however I am having this need while building my CV on latex. Let me illustrate first.</p>

<p>I have 3 types of CVs: projects, management and technical, and I maintain them in at least 3 languages: english, portuguese and spanish.</p>

<p>I am used to git-flow and I really like it, however I have only used it using just one develop branch. In this case I would like to have 9 develop branches: en-proj, en-mgmt, en-tech, pt-proj, pt-mgmt, pt-tech, es-proj, es-mgmt and es-tech.</p>

<p>Each feature would be started from a specific branch and finished to that branch instead from/to develop. Furthermore, each CV submission would have their own details, so ideally each of these ""develop"" branches commits would be a submission version. I guess there is no need to have a master branch. </p>

<p>I read these resources <a href=""https://softwareengineering.stackexchange.com/questions/67568/how-can-one-use-git-flow-effectively-on-a-project-in-which-more-than-one-major-v"">1</a> and <a href=""https://stackoverflow.com/questions/8579056/multiple-development-branches-with-git-flow"">2</a> but I am looking forward to do this entirely using git-flow if possible.</p>

<p>Is there a way I can use git-flow as described? if so, how? From the links provided it is possible to create a feature from a branch using git instead of git-flow, but I guess it would be the same for finishing a feature and therefore git-flow would not be very useful, I would be ending using git alone.</p>

<p>If you could please answer with concrete examples of command-line snippets it would be <strong><em>very helpful!</em></strong></p>

<p>Thank you very much!</p>
","0","1332764","",""
"47781786","824434","2017-12-12 21:24:38","6","425","<git><branching-and-merging><git-flow>","handling release branches in gitflow","<p>The company I work for is using gitflow.</p>

<p>We follow a branch-per-feature approach where individual features are implemented, tested and then PR'd into develop. When it comes time for a release we create a release branch off develop - we trigger a build on the release branch and deploy this to a TEST environment. There might be some integration defects due to the multiple feature branches that were merged into develop. These are resolved directly against the release branch. Once we're happy with the state of the release branch we deploy (the exact <em>same</em> build that was signed-off by QA) to PROD.</p>

<p>At this stage we need to get our release branch code back to develop and into master, which are both protected branches. Assuming there were some commits against the release branch, we need to do 2 PRs i.e. one for release->develop and one for release->master.</p>

<p>Couple questions:</p>

<ol>
<li>How do people review commits directly against a release branch? We
<em>could</em> PR back to develop before the actual release, but this seems a bit out of order to me. </li>
<li>How do people approach gettting a release branch
merged into develop AND master. The PR to develop would just be
commits that were made directly against the release branch, while
the PR to master would also include all the features that were
already PRd into develop. The PR to master seems a bit obsolete.</li>
</ol>

<p>Thanks.</p>
","0","824434","0","0"
"30054654","1891451","2015-05-05 13:39:45","4","2931","<git><git-flow><git-workflow>","Is it possible/desirable to have a 'master', 'test' and 'develop' branch when using git-flow?","<p>I am currently working on a project where we are in the process of migrating to Git. We are trying to figure out what workflow to use. We are quite keen on git-flow, but have an issue.</p>

<p>As I understand git-flow, developers create <code>feature</code> branches off of <code>develop</code>, once they are done with a particular <code>feature</code> branch, the code gets merged into <code>develop</code>. When we want to release to live, <code>develop</code> is then merged into <code>master</code>. In our case, <code>develop</code> will be what is currently deployed to our <strong>Dev</strong> environment while <code>master</code> will be what is currently <strong>Live</strong>. This is all well and good.</p>

<p><strong>The thing</strong></p>

<p>The thing is that we have another environment that we need to deploy to before <strong>Live</strong>, ie. <strong>Test</strong>. We want to have a <code>test</code> branch that will always represent what is currently deployed to <strong>Test</strong>. </p>

<p>This how we envision this working:</p>

<ol>
<li>Developers work in <code>feature</code> branches, that are merged into <code>develop</code>, which get deployed to <strong>Dev</strong>.</li>
<li>When we are ready to promote to <strong>Test</strong>, <code>develop</code> is merged into <code>test</code> and taken to <strong>Test</strong>.</li>
<li>Once all is signed off in <strong>Test</strong>, we merge <code>test</code> into <code>master</code> and take that <strong>Live</strong>.</li>
</ol>

<p><strong>My Questions</strong></p>

<ol>
<li>Is this possible with git-flow, if so, how?</li>
<li>Should we even be doing this?</li>
<li>How else could this be achieved?</li>
</ol>
","2","1891451","",""
"13345667","19977","2012-11-12 14:39:51","39","11928","<svn><branching-and-merging><git-flow><trunk>","Is it possible to use the git-flow model with Subversion?","<p>We use Subversion and aside from a few individuals such as myself there is little to no experience with branching and merging in Subversion. My Subversion experience is limited to simple feature branches where merge and tree-conflicts, while not exactly rare, are not exceedingly difficult to resolve.</p>

<p>Given that, I am helping to manage a project where our current commit to trunk method is simply unsustainable for our needs. I introduced feature branching and merging to my localized team and we had some success. However simple feature branching was still not able to answer all our questions such as:</p>

<ol>
<li>How do we develop code in parallel for this release and subsequent releases?</li>
<li>What code is considered stable?</li>
<li>What (in development) code is going into the next release?</li>
<li>What (in development) code is going into a subsequent release?</li>
<li>What version of code is our Test, Acceptance, or Production environments?</li>
<li>How do we integrate concurrent development activities with a known stable release to reduce introducing bugs and incomplete work?</li>
<li>How do we provide hot-fixes to released code?</li>
<li>How do we know, from our source control, what development activity is currently ongoing?</li>
<li>How do we experiment or R&amp;D without disrupting the current code base while leveraging?</li>
</ol>

<p>It seems that  <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">git-flow as defined here</a> would go a long way to answer a lot of these questions. I experimented with this method in Mercurial and it seems like that it is possible to implement this method there as well. Sadly, migrating to a DVCS is off the table at this point.</p>

<p>However, my brief attempt to mimic this method in Subversion failed with many merge and tree conflicts. The merge options and edge cases are numerous and baffling.</p>

<p>Can Subversion be used to implement <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">git-flow</a> and if so what is the pain level?</p>
","2","19977","0","0"
"13360017","1820443","2012-11-13 11:32:40","3","1586","<git><branch><push><gerrit><git-flow>","Publishing a gitflow feature branch to gerrit","<p>I use Gerrit and gitflow, and I would like to push my giflow feature branches to Gerrit. When I use a simple</p>

<pre><code>git flow feature publish feature_name
</code></pre>

<p>Gerrit rejects the push because I'm trying to push to the <strong>feature/feature_name</strong> branch, which is not allowed. I would like to push to <strong>refs/for/feature/feature_name</strong> instead and create this remote branch if it does not exist.</p>

<p>In my git configuration, I tried to set</p>

<pre><code>[branch ""feature/feature_name""]
    merge = refs/for/feature/feature_name
</code></pre>

<p>but this setting is ignored when I publish using gitflow.</p>

<p>Is there a way to set the remote branch using gitflow's <em>feature publish</em> command?</p>
","0","1820443","0","0"
"39876749","6198692","2016-10-05 14:29:37","2","652","<git><cmd><git-bash><git-flow>","git flow release finish -m gives different behavior in cmd and Git Bash","<p>I am writing a Bash script for git-flow automation in Windows.</p>

<p>The issue is: when I call <code>git flow release finish MYRELEASE -m ""MESSAGE""</code> from cmd it runs without asking for inputs (desired behaviour). But when I do the same from Git Bash (MINGW64) it asks for merge messages (launching vim), which I want to avoid.</p>

<p>I tried to set the git-config to <code>git config --global core.mergeoptions --no-edit</code> in both consoles, but the outcome is the same: Git Bash always asks for mergemessages.</p>

<ul>
<li>Why do the consoles behave differently?</li>
<li>How do I get Git Bash to stop asking for merge messages?</li>
</ul>

<p>UPDATE:<br>
The output of <code>git flow release finish 1.1.4 -m ""v1.1.4"" --showcommands</code> in both consoles is</p>

<pre><code>git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
git merge --no-ff release/1.1.4
Already up-to-date!
Merge made by the 'recursive' strategy.
git tag -a -m v1.1.4 1.1.4 1.1.4
git checkout develop
Switched to branch 'develop'
Your branch is up-to-date with 'origin/develop'.
git merge --no-ff 1.1.4
Already up-to-date!
Merge made by the 'recursive' strategy.
git branch -d release/1.1.4
Deleted branch release/1.1.4 (was 0a774fe).

Summary of actions:
- Release branch 'release/1.1.4' has been merged into 'master'
- The release was tagged '1.1.4'
- Release tag '1.1.4' has been back-merged into 'develop'
- Release branch 'release/1.1.4' has been locally deleted
- You are now on branch 'develop'
</code></pre>
","2","6198692","",""
"30806787","3775915","2015-06-12 15:26:34","1","761","<git><version-control><git-flow>","Should git-flow branches be available on bare repository and its clone?","<p>I am attempting to start using git-flow. I have installed and initialised git-flow on my master repository. It is all correct and shows in git.config.</p>

<p>It is linked to a bare repository, and I/others clone the bare repository when working.</p>

<p>However, when I clone the bare repository, the develop branch does not show. And in the bare repository git.config there is no git-flow set up.</p>

<p>If I try to 'git flow init' inside the bare repository it just says 'fatal: This operation must be run in a work tree'.</p>

<p>Please help, I am confused! Should I not be seeing a develop branch on the clones?</p>
","2","3775915","",""
"58926906","9955682","2019-11-19 04:55:58","1","803","<git><intellij-idea><git-flow><jgitflow-maven-plugin>","How to setup or integrate gitflow in Intellij editor to start feature branch","<p>I am using Intellij editor so how can I setup or integrate gitflow in this to start feature branch as its showing No Gitflow.</p>
","0","9955682","0","0"
"21074908","253098","2014-01-12 13:02:32","1","300","<git><merge><rebase><git-flow>","Recreate a non-fast-forward merge with git rebase","<p>Since I heard that being a lazy programmer is a virtue, I delayed the creation of my git-flow feature branch like this:</p>

<pre><code>* dca9fae - Merge branch 'feature/refactor' into develop
|\
| * 9ca4bc3 - Delivery task
| * 8b2e03f - rf up Repo DSL attributes
|/
* e1ddb98 - access to self.views made private
* 0ab6725 - extract Repo#aggregate
* 9bf6ca0 - Merge branch 'feature/mapper'
</code></pre>

<p>I want to clean my commit history by moving up two of my refactoring commits, and get something like this:</p>

<pre><code>* dca9fae - Merge branch 'feature/refactor' into develop
|\
| * 9ca4bc3 - Delivery task
| * 8b2e03f - rf up Repo DSL attributes
| * e1ddb98 - access to self.views made private
| * 0ab6725 - extract Repo#aggregate
|/
* 9bf6ca0 - Merge branch 'feature/mapper'
</code></pre>

<p>My original though to edit my commit history was this:</p>

<pre><code>git rebase -i 9bf6ca0
</code></pre>

<p>Sadly that destroyed my nice non-fast-forward merge bubble and flattened the whole thing into something like this:</p>

<pre><code>* dca9fae - Merge branch 'feature/refactor' into develop
* 9ca4bc3 - Delivery task
* 8b2e03f - rf up Repo DSL attributes
* e1ddb98 - access to self.views made private
* 0ab6725 - extract Repo#aggregate
* 9bf6ca0 - Merge branch 'feature/mapper'
</code></pre>

<p>How can I make <strong>git rebase</strong> to preserve my non-fast-forward merges? </p>

<p>I am interested not only in how to obtain my second example starting from the first example, but also starting from the third one.</p>
","3","253098","",""
"47935457","7526308","2017-12-22 03:24:07","4","8326","<git><git-flow>","When to create release branch in git flow?","<p>Our team is using git flow and we are doing continuous release about every two months. I'm a little confused about when we should create release branch.</p>

<p>For example in following case, there is a bug at last release and it should be fixed at this release, should i create release branch firstly and create bugfix branch from release branch or just create it from develop, do all feature development and merge back to develop, then create release branch from develop? </p>

<p>Should I push little bugs to release branch directly without creating bugfix branch?</p>

<p>Should I just merge one single commit from develop which comes from feature branch or bugfix branch to release branch?</p>
","0","7526308","0","0"
"31396585","2038901","2015-07-14 02:21:08","2","168","<git><git-flow>","What is the normal process to fix two bug in git?","<p>For example, I'm now in <code>develop</code> branch, and have to fix two bugs,</p>

<p>so first I <code>git checkout -b hotfix/bug1</code>, and fix and commit and push to Github and pull request and wait for merge.</p>

<p>Where should I start to fix bug2?</p>

<ol>
<li><p>in <code>hotfix/bug1</code>, then <code>git checkout -b hotfix/bug2</code>, and fix and commit and push?</p></li>
<li><p><code>checkout develop</code> first and then <code>git checkout -b hotfix/bug2</code>, and fix and commit and push?</p></li>
</ol>
","2","2038901","",""
"13887454","371572","2012-12-14 23:03:22","18","4269","<git><agile><git-flow>","git flow releasing selected features","<p>I am trying to introduce Git flow to my team. We are a fairly small team and quite agile. We want to release once a day and this means we have limited time towards testing all the changes in the day. Business team wants to be able to control the features that are getting released although its not ideal.</p>

<p>Git flow doesn't seem to accommodate this very well. After cutting a release branch from develop what is the best way to merge selected features to master. Is cherry picking the only option? Is there a better way?</p>
","1","371572","0","0"
"13917395","414972","2012-12-17 15:49:24","0","225","<git><git-flow>","Add feature and release branches to git-flow","<p>We already have a couple of feature and release branches on the go that aren't currently being tracked by git flow (we've only just come across git-flow).</p>

<p>Is there any way to add these to git flow as they are? So they can be tracked and merged at a later date?</p>

<p>Thanks</p>
","3","414972","",""
"21442123","157971","2014-01-29 20:38:32","6","163","<git><git-flow>","In git-flow, why does master even exist?","<p>I was discussing git-flow with my coworkers and they brought up an interesting point. Why not tag releases off of develop instead of master? Master seems to exist for the sole purpose of tags. Maybe I missed something obvious when I read the entire article for git-flow.</p>
","1","157971","",""
"59259461","2609062","2019-12-10 02:44:59","0","78","<git><merge><branching-and-merging><git-flow><git-cherry-pick>","Select files/changes other git branches without losing git blame history","<p>It's simple to git cherry-pick other commits from other branches, all while maintaining a clean git blame history.</p>

<p>If I'm <code>UserA</code> working on <code>branch-A</code>, and then I know in an experimental <code>branch-B</code>, <code>UserB</code> and <code>UserC</code> had been hacking away over the course of hundreds of commits on <code>FunctionC</code> that I want to pull in. There are way too many commits to apply, and all those commits might have other changes I don't want to pull in.</p>

<p>Whats the most idiomatic way I can pull in <code>FunctionC</code> in a way that preserves the history that went into it?</p>

<p>I've been searching for quite awhile, but in the case the changes I want weren't cleanly available in a few commits, it didn't seem like there was a way. All other methods seem to lose track of history. 
In the meantime I've just been basically doing the equivalent of copy/pasting via <code>git checkout --patch branch-B</code> but it leaves no sense of the activity that went into it, or whom to check the git blame for it, other than UserA.</p>
","0","2609062","",""
"28695344","1993366","2015-02-24 12:04:09","4","13579","<git><intellij-idea><git-flow>","How does the git-flow plugin integrate into IntelliJ IDEA?","<p>For example,</p>

<pre><code>git flow feature start MYFEATURE
</code></pre>

<p>Is there a way <code>git-flow</code> operations like this can be done from within IntelliJ IDEA?</p>
","0","1993366","0","0"
"10779901","1150847","2012-05-28 05:52:58","12","13710","<git><git-flow>","git: 'flow' is not a git command. See 'git --help'","<p>I just tried to install git-flow, however, it does not seem to be integrated properly with git, what can I do to integrate gitflow with git? is there a way I can do this manually?</p>

<p>Thank you,
Jeffrey</p>

<pre><code>[root@sa 2]# wget --no-check-certificate -q -O - https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | sudo bash
### gitflow no-make installer ###
Installing git-flow to /usr/local/bin
Cloning repo from GitHub to gitflow
Cloning into gitflow...
remote: Counting objects: 2362, done.
remote: Compressing objects: 100% (957/957), done.
remote: Total 2362 (delta 1406), reused 2238 (delta 1316)
Receiving objects: 100% (2362/2362), 484.60 KiB, done.
Resolving deltas: 100% (1406/1406), done.
Updating submodules
Submodule 'shFlags' (git://github.com/nvie/shFlags.git) registered for path 'shFlags'
Cloning into shFlags...
remote: Counting objects: 454, done.
remote: Compressing objects: 100% (55/55), done.
Receiving objects: 100% (454/454), 101.19 KiB, done.
Resolving deltas: 100% (389/389), done.
remote: Total 454 (delta 389), reused 454 (delta 389)
Submodule path 'shFlags': checked out '2fb06af13de884e9680f14a00c82e52a67c867f1'
removed `/usr/local/bin/git-flow'
`gitflow/git-flow' -&gt; `/usr/local/bin/git-flow'
removed `/usr/local/bin/git-flow-init'
`gitflow/git-flow-init' -&gt; `/usr/local/bin/git-flow-init'
removed `/usr/local/bin/git-flow-feature'
`gitflow/git-flow-feature' -&gt; `/usr/local/bin/git-flow-feature'
removed `/usr/local/bin/git-flow-hotfix'
`gitflow/git-flow-hotfix' -&gt; `/usr/local/bin/git-flow-hotfix'
removed `/usr/local/bin/git-flow-release'
`gitflow/git-flow-release' -&gt; `/usr/local/bin/git-flow-release'
removed `/usr/local/bin/git-flow-support'
`gitflow/git-flow-support' -&gt; `/usr/local/bin/git-flow-support'
removed `/usr/local/bin/git-flow-version'
`gitflow/git-flow-version' -&gt; `/usr/local/bin/git-flow-version'
removed `/usr/local/bin/gitflow-common'
`gitflow/gitflow-common' -&gt; `/usr/local/bin/gitflow-common'
removed `/usr/local/bin/gitflow-shFlags'
`gitflow/gitflow-shFlags' -&gt; `/usr/local/bin/gitflow-shFlags'
[root@sa 2]# git flow
git: 'flow' is not a git command. See 'git --help'.

Did you mean one of these?
        reflog
        show
</code></pre>
","1","1150847","0","0"
"28722350","1993366","2015-02-25 15:02:41","1","1523","<git><git-flow>","Why does git-flow not delete remote *release* branches (when finished)?","<p>Referring to ""out of the box"" developer workflow via git-flow (version 0.4.2-pre).</p>

<p>For a release, we perform these steps:</p>

<pre><code>git flow release start 4.2.3
maven release:prepare release:perform
git flow release finish 4.2.3
</code></pre>

<p>Now, after the <code>release finish</code> command, <code>git flow</code> has deleted the local branch <code>release/4.2.3</code> (after merging into <code>master</code> and back merging into <code>develop</code>.</p>

<p>My question is: why isn't the remote branch <code>release/4.2.3</code> also deleted? (After all, we have the <code>tag</code> for <code>4.2.3</code>)</p>

<p>Even, going back a step, why was branch <code>release/4.2.3</code> pushed in the first place?</p>

<p>Or are we doing something wrong (?)</p>
","5","1993366","",""
"28739242","819355","2015-02-26 09:56:52","2","111","<git><git-merge><git-flow>","git-flow finish release - selective merge","<p>We've recently started using <code>git-flow</code> in our company, and we've came across the following issue:</p>

<p>We have a <code>DEV_MODE</code> boolean that controls the level of logging in the app, we want the develop branch to always have <code>DEV_MODE=true</code>.<br>
However, when releasing a version we change the <code>DEV_MODE</code> to <code>false</code>.</p>

<p>When I do finish-release in <code>git-flow</code>, it'll merge the <code>DEV_MODE=false</code> into the develop branch.</p>

<p>I there a hook I can use to prevent this, or maybe a way to tell git how to merge files from release branches to develop?</p>
","0","819355","0","0"
"29448491","1055637","2015-04-04 16:03:34","12","15221","<git><atlassian-sourcetree><git-flow><hotfix>","Unable to create a new hotfix in SourceTree gitflow","<p><img src=""https://i.stack.imgur.com/n11xC.png"" alt=""enter image description here""></p>

<p>Hello this is my git workflow. I'm trying to create by using Sourcetree a new hotfix. Unfortunately I get this error:</p>

<pre><code>There is an existing hotfix branch (issue-#001). Finish that one first.
</code></pre>

<p>I have already finished the <code>issue-#001</code>. Why I'm unable to create a new one?</p>
","0","1055637","0","0"
"11778413","537353","2012-08-02 13:26:18","73","39073","<git><git-flow>","Is there a command to undo git-flow feature start?","<p>I'm inexperienced with git-flow.</p>

<p>Is there a command to undo <code>git-flow feature start</code>?</p>
","1","537353","0","0"
"29504424","4485123","2015-04-08 01:40:52","0","1112","<github><atlassian-sourcetree><git-flow>","Not git flow enabled repo error on soucetree","<p>Trying to create a hotfix but keep getting this error:</p>

<p><img src=""https://i.stack.imgur.com/Tm2cZ.png"" alt=""enter image description here""></p>

<p>How do I fix this? </p>
","2","4485123","",""
"29606829","3224058","2015-04-13 13:41:51","1","138","<git><atlassian-sourcetree><git-flow><sapui5>","git-flow on more that one master","<p>I use git-flow on SouceTree to manage my project;
all worked well until now, but now I want redefine the interface with the backend (in summary I will replace the ajax call to the server to functions call to new oData object...)
Ok, my desire is to have two branches:</p>
<ol>
<li>&quot;legacy&quot; master and develop branches from which I can continue to to expand my project with the all ajax interface</li>
<li>&quot;new&quot; master and develop branches from which I can do a massive operation to connect with new oData object and other consequent changes.</li>
</ol>
<p>The first (bad)solution is to have a &quot;new&quot; release branch from the &quot;legacy&quot; develop.</p>
<p>Have you got any other solutions?</p>
<p>p.s.<br />
The fork cold be the solution, but I can't fork my repository.. I haven't a GitHub account and I have a remote bare repository on a network disk.
I have tried to clone the old_repo into fork_repo but when I try to push my local changes to remote fork_repo I have this message:</p>
<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false push -v --tags origin master:master
Pushing to G:\Sorgenti\SorgentiGIT\intra_fork

remote: error: refusing to update checked out branch: refs/heads/master[K
remote: error: By default, updating the current branch in a non-bare repository[K
remote: error: is denied, because it will make the index and work tree inconsistent[K

remote: error: with what you pushed, and will require 'git reset --hard' to match[K
remote: error: the work tree to HEAD.[K
remote: error: [K
remote: error: You can set 'receive.denyCurrentBranch' configuration variable to[K
remote: error: 'ignore' or 'warn' in the remote repository to allow pushing into[K
remote: error: its current branch; however, this is not recommended unless you[K
remote: error: arranged to update its work tree to match what you pushed in some[K
remote: error: other way.[K
remote: error: [K
remote: error: To squelch this message and still keep the default behaviour, set[K
remote: error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.[K
</code></pre>
","0","3224058","",""
"29614791","1143482","2015-04-13 20:47:11","0","45","<git><git-flow>","How to 'init' the code using gitflow?","<p>I am new using gitflow, I undertood it, read about it, watched the videos and everything looks great, I just have a doubt that few exercises explain and others start explaining when the repo already got a ""base code"" .</p>

<p>I have my Git server and I want to use gitflow with an existing code, my question is, when I create the repository, should, directly to the master, commit the code? or I should start the branches as develop and so on to commit the first realease with the base code?</p>

<p>Its not really clear for me, if you can gie me a clue I will be glad.</p>

<p>Thanks in advance,</p>
","0","1143482","",""
"11984338","321973","2012-08-16 09:31:03","23","5857","<git><tdd><workflow><git-flow>","What is a good git workflow for TDD?","<p>I quite like <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"" title=""A successful Git branching model"">Gitflow branching model<br>
<img src=""https://nvie.com/img/git-model@2x.png"" alt=""""></a><br>
but I'm not sure where to put the TDD cycle - should I simply use a feature branch and commit everytime I either wrote or passed a test (plus after refactoring)? Create a sub-branch and merge ""finished"" units into the feature branch? Should I commit each failing test or only after having it made pass?</p>

<p>Here's what I currently do, on a feature branch:</p>

<ol>
<li>Write a test, commit</li>
<li>The test may yield errors due to non-existing interfaces, fix this, amend commit</li>
<li>Make the (now only failing) test pass, amend commit</li>
<li>Refactor, new commit</li>
<li>goto 1</li>
</ol>
","2","321973","0","0"
"11991088","1243323","2012-08-16 15:55:20","8","1506","<git><configuration><git-flow><git-subtree><multiple-repositories>","Using git flow with git subtree","<p>I just migrated a large svn repo to git and started using gitflow. It worked like a charm but now I'm thinking about splitting that big repo into a number of smaller ones. </p>

<p>Let's supposse the repo directory tree is as follows:</p>

<pre><code>/repo
  - libs
  - apps
    -- app 1
    -- app 2
</code></pre>

<p>And we want to split it into three repos, one with the core structure (libs and apps directories) and the other two with the apps directories.</p>

<p>If I use git subtree to split like that will I be able to use git flow individually in each part or I'll have to use it globally?</p>

<p>PS: This is my first question in stackoverflow, please be kind :)</p>
","0","1243323","",""
"29671575","1143482","2015-04-16 10:10:39","7","3854","<git><git-flow>","should I make a git push after finish the feature using git flow?","<p>I am using bitbucket and managing with gitflow (or trying to).</p>

<p>My issue is this: I create my feature and i did a </p>

<pre><code>git-flow feature finish name
</code></pre>

<p>So, in a tutorial I read I had to do this</p>

<pre><code>git push origin :feature/name
</code></pre>

<p>Before that, at the bitbucket I could see the branch, after do the git push origin it was deleted, why? </p>

<p>After finish the feature , should I run that push origin command?</p>
","0","1143482","0","0"
"29672660","1143482","2015-04-16 10:58:21","4","749","<git><bitbucket><git-flow>","Is there a way to force people use git-flow by restricting direct commits to the master branch or something similar?","<p>I was wondering if there is any way to force people to use git-flow and let them push only if they are working under the git-flow patter? just to avoid developers to push directly to the master branch. I am using bitbucket (if it helps).</p>
","6","1143482","0","0"
"12028893","1152000","2012-08-19 18:24:46","3","1102","<git><git-flow>","How to retrieve a branch after finishing a branch in gitflow","<p>I know that when you start for example a feature branch, you type git flow feature start  [] and if you want to finish a branch, you type git flow feature finish .</p>

<p>But when you finish a branch, it merges it with develop and deletes the branch automatically.. How do i retrieve that branch?</p>
","2","1152000","0","0"
"30196474","2519119","2015-05-12 16:21:42","0","431","<git><git-flow>","git flow feature name isn't what it seems","<p>I create a feature branch in git bash (windows) with <code>git flow feature start myname</code>.
I get the message:</p>

<p><code>- A new branch 'feature/myname' was created, based on 'develop'
- You are now on branch 'feature/myname'</code></p>

<p>but when I type <code>git branch [tab][tab]</code> the name of the feature is FEATURE/myname. Why is the feature part uppercased and what can I do to fix it it?</p>
","3","2519119","",""
"12571507","1098873","2012-09-24 19:25:38","4","752","<git><git-flow>","Somehow my git develop branch got merged into my master branch","<p>I am using git-flow, but that's not important. My master branch is production and my develop branch is for development.</p>

<p>This morning, my master branch (this is my production release) hadn't been touched for weeks (since my last release). Now, when I look at my master branch, it has all of my commits from my develop branch.</p>

<p>I don't see a merge in the <code>git log</code> so I am confused how I can get my master branch back to its boring self.</p>

<p>How can I find this rouge merge to my master branch and reverse it without losing my development work?</p>

<p><strong>Edit:</strong></p>

<p>Does this provide enough information to know what happened?</p>

<p>Here is the output of <code>git reflog</code>:</p>

<pre><code>0fe067c HEAD@{0}: pull: Fast-forward
300ba32 HEAD@{1}: checkout: moving from develop to master
06f1dd9 HEAD@{2}: pull: Fast-forward
0fe067c HEAD@{3}: commit: Add back prefix.
815ffe8 HEAD@{4}: pull: Fast-forward
f4c3e23 HEAD@{5}: pull: Fast-forward
93d1037 HEAD@{6}: pull: Fast-forward
e027c53 HEAD@{7}: commit: Don't commit changes to Prefix
96e37a9 HEAD@{8}: commit: Update URLs based on current server
</code></pre>
","4","1098873","0","0"
"48490056","496406","2018-01-28 18:46:31","0","680","<git><git-flow>","git flow feature finish <branch> throwing ""Fatal: Could not check out branch 'develop'.""","<p>I asked this on the repo itself, but thought it might hit a wider audience here on SO.</p>

<p>I'm not sure why this is happening on an existing project that I added gitflow to.
When I run: git flow feature finish 
I do get ""Switched to branch 'develop'"" but then immediately followed by ""Fatal: Could not check out branch 'develop'.""
I then have to merge the branch manually and delete it.</p>

<p>I tried creating just a test project and I don't seem to get that error.
It seems to only happen with the ""feature"" option. If I use ""release"" or ""hotfix"" so far it has been working.</p>

<p>Any ideas what might be the problem?</p>

<p>UPDATE: seems this no longer works with releases either.</p>
","9","496406","",""
"14068126","1032130","2012-12-28 10:29:12","4","16153","<git><version-control><git-flow>","How do I Uncommit changes using git","<p>I'm using git flow, and without thinking, I've commited code to the wrong branch (feature), and then published it.</p>

<p>I need to take that code, remove it from say, branch 1, and move it into the correct branch, which is branch 2.</p>

<p>All the files are stored within one folder which could make things a lot easier, I'm just unsure on how to go about this.</p>

<p>eg.</p>

<pre><code>Branch 1 { 
  Commit That contains {
     ./path/to/files_that_should_be_here
     ./path/to/files_that_need_to_be_in_branch_2
  }
}

Branch 2 {
   No Commits.
}
</code></pre>
","0","1032130","0","0"
"48524221","1025311","2018-01-30 14:49:27","0","321","<git><githooks><git-flow>","git flow (avh edition) hooks are not executed","<p>I had the problem, that hooks that reside in my global hook directory <code>~/git-hooks</code> are not executed.</p>

<p>Namely the git-flow dependent hook <code>post-flow-release-start</code> just wasn't called, while the hook <code>pre-commit</code> was called without any problems.</p>
","0","1025311","",""
"48536343","1109345","2018-01-31 07:03:08","0","204","<eclipse><git><eclipse-plugin><egit><git-flow>","Eclipse Egit - Finish feature does not delete feature","<p>I am trying to create a new feature branch using Eclipse Egit Git flow and then merge this with develop branch after things are done. </p>

<p><strong>Issue: The feature branch does not get deleted after finish work flow is done.</strong> </p>

<p><strong>Using GIT Bash</strong> - when I create a new feature and finish and commit it. Everything works as expected. Codes are merged with develop branch and then the feature branch is deleted. </p>

<p><strong>Using Eclipse</strong> - I create a new feature, finish it and commit. The feature branch is getting committed to the git lab server.(No issues here) I also tried to merge the feature branch to develop and commit. The changes are committed to the server - No issues there. But the feature branch still exists on my local. According to normal git flow (bash flow), the feature branch is deleted when it is finished. </p>

<p>Is this a abnormal behavior with Eclipse git flow? I tried to uncheck this box, that should delete my feature branch. but it didn't happen. </p>

<p><a href=""https://i.stack.imgur.com/RkQ8L.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RkQ8L.png"" alt=""enter image description here""></a></p>
","3","1109345","",""
"66667380","13126651","2021-03-17 05:20:49","0","268","<git><git-flow>","Why can't i create feature branch using git flow?","<p>I want to create a feature branch but when i use git flow feature start feature-name it says it already exist.</p>
<p>if i try to delete it it says not found</p>
<p>git branch -a shows this</p>
<pre><code> *develop
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/feature/1.1
  remotes/origin/feature/1.2
  remotes/origin/feature/CM_DA_NEW_GRADUATES-82
  remotes/origin/feature/aws1.1
  remotes/origin/master
  remotes/origin/week_two_task
</code></pre>
<p>is there a way to delete this entry remotes/origin/feature/CM_DA_NEW_GRADUATES-82 locally so that i can make a feature branch</p>
","0","13126651","",""
"40692997","4632019","2016-11-19 12:40:21","2","147","<git><git-flow><git-completion>","How to create completion for `git flow feature checkout` alias?","<p>I have configured my <code>.bash_aliases</code> like:</p>

<pre><code>alias gc=""git checkout""
alias gcf=""git flow feature checkout""
source ~/.git-completion.bash
__git_complete gc  _git_checkout
source ~/.git-flow-completion.bash
__git_complete gcf __git_flow_feature
</code></pre>

<p>But when I try to complete I should select <code>checkout</code> and then I may select my branch:</p>

<pre><code>$ gcf 
checkout   diff       help       publish    rebase     track      
delete     finish     list       pull       start      

$ gcf checkout a
a_branch1 a_branch2
</code></pre>

<p>What should I do that <code>checkout</code> will be selected automatically when I write <code>gcf</code>+a<kbd>TAB</kbd></p>
","2","4632019","0","0"
"21708532","231957","2014-02-11 17:15:12","0","148","<github><jenkins><git-flow>","Continuous integration and deployment with several module developed with git-flow","<p>I have 5 separate modules developed using git-flow workflow.<br>
An additional module (still using git-flow) is used as a MQ module and enables all the modules to communicate with each other.<br>
=> The project is made up of those 6 modules working together</p>

<p>I have set up a Jenkins integration server where some unit / functional tests are performed on the develop branch of each of the 6 modules (source of develop branch is retrieved from github prior to run the build). I have added an additional build that is used to perform integration / functional tests on the whole project. This last build is triggered each time a build succeed on one of the module.</p>

<p>My main problem is to know how to tag and deploy the project as a whole (list of tags from each module) once all the builds are successful.</p>

<p>Any pointer on good practises ?</p>
","1","231957","",""
"18947652","1046810","2013-09-22 19:01:05","0","54","<git><git-flow>","git-flow same working directory for different branches?","<p>I'm new to <code>git-flow</code> but have worked in other version control systems (notably perforce) and used branching strategies very similar to git-flow. I'm not very familiar with the git CLI, so I use <a href=""http://www.syntevo.com/smartgithg/"" rel=""nofollow"">SmartGit</a> and of late <a href=""http://www.sourcetreeapp.com/"" rel=""nofollow"">SourceTree</a>. </p>

<p>I've set up git-flow on a client machine (remote/origin is a bare repo on a server) and I now see that there are two branches on my client - <code>develop</code> and <code>master</code>. But SourceTree never asked me for a working directory for the <code>develop</code>. From what I see it is dynamically switching branches (fetching from appropriate remote branch). </p>

<p>My question - Is this the right way of working with git? I mean what if I am working in a <code>feature/*</code> branch and need to work in a <code>hotfix/*</code> branch. My changes to the <code>feature/*</code> branch would get lost if I did not stash them before the switch.</p>

<p>In a past life the way we handled branches was to have a different <code>root/working</code> folders for each branch and work on them in isolation without affecting work in any other branch. </p>

<p>Can I do the same with git i.e. clone each branch at a different working folder. More importantly would this scheme work with git-flow as implemented in SourceTree/SmartGit?</p>
","5","1046810","",""
"66680310","","2021-03-17 19:53:54","0","68","<git><version-control><branch><git-flow>","Cannot implement gitflow","<p>I want to implement <a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"" rel=""nofollow noreferrer"">gitflow workflow</a>. So I need to create the develop branch first and only then if new release is detected to merge it into the master branch with a tagname of release. But it gives me an error. Any ideas?</p>
<p>NOTE: I don't have any master branch just yet, because I don't have any release</p>
<pre><code>git init
git branch develop
</code></pre>
<p><strong>error</strong>:</p>
<pre><code>fatal: Not a valid object name: 'master'.
</code></pre>
","0","","",""
"18963242","1098873","2013-09-23 15:32:44","3","677","<git><github><git-flow>","No releases in github when using git flow release","<p>I am using git flow and the release functionality. It is generally working but I am not seeing any tags created for each release. Is that expected? If so, does anyone have a suggestion for the best way to create a git tag for each <code>git flow release</code>?</p>
","0","1098873","",""
"35429219","5287506","2016-02-16 09:57:15","88","20231","<atlassian-sourcetree><git-flow>","Sourcetree - upgraded to latest version, git-flow missing","<p>Hey I just updated Sourcetree on my mac to the latest version (2.2).
Where did git-flow go? </p>

<p>And how do I re-enable this functionality?</p>

<p>I just lost myself without it!</p>
","7","5287506","0","0"
"21814536","9634","2014-02-16 17:10:35","1","150","<git><git-flow>","Might there be a better way for git-flow to finish a release","<p>I'm using <code>git-flow</code> through <a href=""http://www.sourcetreeapp.com/"" rel=""nofollow"">Atlassian's Sourcetree</a>.</p>

<p>When I finish a Release, it merges the release branch to the master branch, and again to the development branch. I have opted always to make a merge-commit, rather than allowing fast-forwarding.</p>

<p>It occurs me somehow that if git-flow were to merge the release branch into the master branch, and then merge the*master* branch into the development branch, the graph might be in some sense 'tidier'. </p>

<p>Are there reasons why this is a bad idea?</p>

<p>Please note that I'm still finding my way with this, so be gentle, if you can.</p>
","0","9634","",""
"48666362","652528","2018-02-07 14:33:29","2","284","<git-flow>","Do I have to re-init git-flow repository after every clone?","<p>I have a repository where I'm using git flow. I initialized the git flow, but when I clone it I need to run <code>git flow init</code> again. Is there an automated way of doing this!?</p>

<p>At initialization I have to setup:</p>

<ul>
<li>develop, production branches</li>
<li>features, releases and bugfix prefix</li>
<li>version prefix.</li>
</ul>

<p>I know this configuration by heart but another developers may not know and typing it by hand may be error prone.</p>
","2","652528","",""
"51856446","1595977","2018-08-15 09:46:27","0","223","<git><git-flow>","How to test a git flow feature in another feature","<p>So currently I am on a feature branch (let's say <code>f1</code>) and the <code>develop</code> branch is ahead of <code>f1</code>.<br>
Another developer is developing a new feature <code>f2</code> and commits to the <code>develop</code> branch. Now the <code>develop</code> branch has the feature <code>f2</code> plus other features that are not in <code>f1</code>.<br>
Now I want to test only the feature <code>f2</code> without all other features that are on <code>develop</code> but not in my branch <code>f1</code>. How can I achieve that?</p>

<p>Important: After I finish my test, I want <code>f2</code> to be out of my <code>f1</code> branch.</p>

<p>Now I'm doing this in the following way:</p>

<ol>
<li>stash all my unchanged changes (<code>git stash</code>), because I'm not sure I want to commit them  </li>
<li>cherry pick the commit in <code>f2</code> (<code>git cherry-pick f2</code>)  </li>
<li>unstash (<code>git stash pop</code>)  </li>
<li>test</li>
<li>stash all my unchanged changes (<code>git stash</code>)</li>
<li>revert cherry-picked commit on <code>f1</code></li>
<li>unstash the uncommited changes </li>
<li>commit on <code>f1</code> if all the changes are ok</li>
</ol>

<p>Is there a better way to do this?</p>
","8","1595977","",""
"22052760","3144963","2014-02-26 20:41:04","1","355","<git><git-flow>","git flow detached from release/v1.8","<p>I am getting into git flow on a project and trying to learn.</p>

<p>I had three features. I ran git flow feature finish on all three. Two gave me the commit message and one did not. All feature branches were merged into develop.</p>

<p>I pushed to the repo and pulled to staging.</p>

<p>When I checked out the release branch I got this message.</p>

<pre><code>You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

git checkout -b new_branch_name

HEAD is now at 69ca088... Merge branch 'feature/12485--change-views-fontcolor' into develop
394elmp02:docroot 394e ((69ca088...)) $ git branch
* (detached from origin/release/v1.8)
  develop
  feature/12437--Update-Media-Disease-lp
  master
394elmp02:docroot 394e ((69ca088...)) $
</code></pre>

<p>the feature shown above is the one that didn't pop up a commit message.</p>

<p>I have no idea how to progress. Can someone share some insight.
Thanks!</p>
","0","3144963","",""
"59886213","10399628","2020-01-23 19:59:47","6","3053","<git><bitbucket><git-branch><pull-request><git-flow>","How delete a local branch after merging it through a pull request? git-flow, bitbucket, sourcetree","<p>My environment in local:</p>

<ul>
<li><strong>Git</strong> connecting with <strong>Bitbucket</strong></li>
<li><strong>Sourcetree</strong> with <code>git-flow</code></li>
</ul>

<p>Steps</p>

<ol>
<li>I create a <code>feature x</code> in <strong>Sourcetree</strong> then I add the code.</li>
<li>I do a <code>commit</code> including the option to <code>create a pull request</code> and <code>push</code> the changes to <code>feature x</code> branch in <code>remote</code>.</li>
<li>In <code>pull request</code> I select the option for <code>Close {branch} after the pull request is merged</code>.</li>
<li>Within <strong>Bitbucket</strong> a member team approves the <code>pull request</code> then merges it into the <code>develop</code> branch.</li>
<li>I <code>pull</code> the new changes to my local <code>develop</code> branch.</li>
</ol>

<p><strong>NOTE</strong> It's important to review the code through <code>pull request</code> before merging it into <code>develop</code>, so the question is:</p>

<p>Is there any way to delete automatically the <code>feature x</code> branch in my local after made a <code>pull</code> in <code>develop</code>?</p>

<p>*I tried with a <code>fetch</code> but it does not work.</p>
","4","10399628","0","0"
"48769051","9355313","2018-02-13 14:26:27","1","42","<git><shell><git-flow>","git-flow stopped working on windows until echo statement added - why?","<p>I have happily been using git-flow on windows until it stopped working.  I'm not exactly sure why.  The error I get is the following:</p>

<pre><code>C:\Git\XXXXX&gt;git flow init help
C:\Program Files\Git\usr\bin\git-flow: line 116: /gitflow-shFlags: No such file or directory
</code></pre>

<p>Where XXXXX is just any cloned repository.  Using ""init help"" just to show the git-flow commands do not work.</p>

<p>This is where I don't understand... I started to debug the git-flow shell file by putting echo statements scattered through-out.  All of a sudden it works if I put an echo statement anywhere in this block:</p>

<pre><code>*MINGW*)
    export GITFLOW_DIR=$(dirname ""$(echo ""$0"" | sed -e 's,\\,/,g')"")
    #echo ""Here now?""
    pwd () {
        builtin pwd -W
    }
    ;;
*)
</code></pre>

<p>The ""Here now?"" is commented out, and I get the error above about the gitflow-shFlags missing.  When I uncomment that echo statement and retry, I get this:</p>

<pre><code>C:\Git\XXXXX&gt;git flow init help
Here now?
usage: git flow init

    Initialize a new git repo with support for the branching model.

    For more specific help type the command followed by --help
</code></pre>

<p>With that echo statement, all git-flow commands work.  without it, none of them work and I get the shFlags missing error... What am I missing?</p>

<p>I don't understand the shell script so I don't know why this is happening.  Probably a very easy explanation... </p>
","0","9355313","",""
"51962416","9562423","2018-08-22 08:07:55","-1","131","<git><merge><atlassian-sourcetree><git-flow>","git merge both directions crashes history","<p>I'm used to work with sourcetree and git-flow.
Before closing a feature branch I usually merge develop into it.</p>

<p>To do so I right click the develop branch within my feature branch and choose 'merge develop into feature/...'. Afterwards I use the git-flow tool to finish the feature.</p>

<p>Now I wanted to do this with the terminal only (no sourcetree).
Therefore, within the feature branch, I run 'git merge develop'.
Afterwards I checkout develop and run 'git merge feature/...'</p>

<p>What I expected was a similar result as the sourcetree/git-flow way.
But I ended up with a weird history!
I've got now only the commit 'Merge branch develop in...' which is now part of the develop branch line. The 2nd commit (merge feature into develop) has disappeared although the file changes are still present.</p>

<p>Does anyone know what's going on here?</p>

<p><strong>update</strong></p>

<p>Steps to reproduce:</p>

<pre><code>commit changes in feature branch
commit changes in develop branch
commit changes in feature branch
merge develop into feature branch (git merge)
merge feature into develop branch (git merge)
</code></pre>

<p>Afterwards the commit that merged feature into develop has disappeared (while the file changes are still present) and the history looks 'weird' meaning the feature branch commits become part of the develop branch history.</p>
","6","9562423","",""
"41305006","4333347","2016-12-23 16:42:49","1","109","<git><merge><git-flow>","Understanding git flow process","<p>I just recently started using git flow but I am running into issue all the time. I believe I do not fully understand the process of merging a feature. I am running into merge conflicts all the time and getting errors that my <code>develop</code> and <code>origin/develop</code> have diverged. This is my process...</p>

<p>I want to make changes to develop, so I create a feature...</p>

<pre><code>git flow feature start MYFEATURE
</code></pre>

<p>Now I am in feature <code>MYFEATURE</code> locally. So I make the changes I want and I <code>git add</code> then <code>git commit</code> then <code>git push</code> to my <code>MYFEATURE</code>.</p>

<p>Now I want to merge my feature to develop but in the meantime, other devs have pushed to develop branch so mine is not up to date. So to update it I do...</p>

<pre><code>git pull origin develop
</code></pre>

<p>This gives me lots of conflicts, so I fix them and then I <code>git push</code>. At this point I try to merge my feature and I get more errors, my steps must be wrong.</p>

<p>Anyways then I do...</p>

<pre><code>git flow feature finish MYFEATURE
</code></pre>

<p>and it tells me my local is ahead by x commits, so I do,</p>

<pre><code> git push
</code></pre>

<p>Can someone show me the right process of doing this, step-by-step? I think I am not entirely sure how this is working. </p>
","2","4333347","",""
"4317498","1975","2010-11-30 19:10:09","5","3468","<ubuntu-10.10><git-flow>","Installing git-flow on Ubuntu 10.10 fails silently","<p>I'm trying to install gitflow using the directions on the github <a href=""http://github.com/nvie/gitflow"" rel=""noreferrer"" title=""gitflow"">readme</a> a la : wget -q -O - <a href=""https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh"" rel=""noreferrer"">https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh</a> | sudo sh</p>

<p>And it's failing silently...just back to the prompt.  Any ideas?</p>
","0","1975","",""
"40869050","7059613","2016-11-29 14:59:50","2","615","<git><branch><rename><git-flow><sourcetree>","Fix a renamed git-flow branch","<p>I renamed my local git flow feature branch, using SourceTree.</p>

<p>Now I want to finish the feature, but git flow tells me that the branch doesn't exist. It does of course, but git flow doesn't recognise it.</p>

<p>How can I make git flow recognise the branch I'm on as a feature branch, so that I can finish it?</p>
","0","7059613","",""
"59635916","7859666","2020-01-07 20:54:02","1","117","<maven><git-flow>","Failed to execute goal com.e-gineering:gitflow-helper-maven-plugin:2.2.0:enforce-versions","<p>I have the below error when trying to make a release branch :</p>

<p>The maven project or one of its parents is currently a snapshot version. </p>
","1","7859666","",""
"23054660","784318","2014-04-14 07:45:29","4","766","<macos><git><unix><terminal><git-flow>","Non-interactive way to create a git flow release / hotfix","<p>From the <a href=""https://github.com/nvie/gitflow/wiki/Command-Line-Arguments#git-flow-hotfix-finish--fsumpkn-version"" rel=""nofollow"">docs of gitflow</a> I read the following:</p>

<blockquote>
  <h3>git flow hotfix finish [-Fsumpkn] </h3>
  
  <p><strong>-F</strong> fetch from $ORIGIN before performing finish<br>
  <strong>-s</strong> sign the release tag cryptographically<br>
  <strong>-u</strong> use the given GPG-key for the digital signature (implies -s)<br>
  <strong>-m</strong> use the given tag message<br>
  <strong>-p</strong> push to $ORIGIN after performing finish<br>
  <strong>-k</strong> keep branch after performing finish<br>
  <strong>-n</strong> don't tag this release<br>
  Finish hotfix   </p>
</blockquote>

<p>Now I want to create a hotfix without user interaction so I do the following: </p>

<pre><code>git flow hotfix finish '2.1.8' -m Hotfix
</code></pre>

<p>Despite the <code>-m</code> flag I get into the editor and I am asked to provide a tag message:</p>

<pre><code># File /Users/me/MyProject/.git/TAG_EDITMSG  

#
# Write a tag message
</code></pre>

<p>Am I using git flow in a wrong manner or is this a bug?</p>
","0","784318","0","0"
"42301670","4717072","2017-02-17 15:29:56","0","102","<git><git-flow>","Big changes on source code, handle this with git branching or forking?","<p>I have a question concering <code>git</code> and <code>git-flow</code>.</p>

<p>I am working on a bigger software development project and I am using git (with git-flow) for version control. All works fine...</p>

<p>However, in the next month we have to deal with a bigger migration to another application server and therefore we have to do <strong>a lot of</strong> application server specific changes in our source code.</p>

<p>The migration process will take longer and therefore I need to have the possibility to maintain (hotfixes,...) the source code for both application servers.</p>

<p><strong>Example (daily business):</strong></p>

<ul>
<li>Today: Rework on source code concerning the new server</li>
<li>Tomorrow: Hotfix for the current server </li>
<li>One day later: Small feature request for the current server</li>
<li>and so on...</li>
</ul>

<p>Now, I don't know which would be the best strategy to handle this? <strong>Branching</strong> or <strong>forking</strong> or something else?</p>
","0","4717072","",""
"30273320","291244","2015-05-16 08:09:42","21","12721","<git-flow>","How can I recover mistakes in git flow init?","<p>I've run <code>git init</code> and made a mistake selecting the first branch. Now I want to rerun it to change the settings, but it never asks the first question again.</p>

<pre><code>Which branch should be used for bringing forth production releases? 
   - develop

Branch name for production releases: [] develop

Which branch should be used for integration of the ""next release""?

Branch name for ""next release"" development: [develop] ^C
Lymnaea:boxes (develop) $ git flow init

Which branch should be used for integration of the ""next release""?

Branch name for ""next release"" development: [develop]
Production and integration branches should differ.
</code></pre>

<p>How can I undo the first init run so that I can set the branch to master?</p>
","0","291244","0","0"
"30344019","1834095","2015-05-20 08:18:25","3","1931","<git><version-control><git-flow>","gitflow: bugfixing an upcoming release","<p>I started to use the <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"" title=""gitflow"">gitflow</a> concept recently and I have a question about the release-* branches.</p>

<p>Whenever I make a new release(-branch), I perform some kind of a validation to verify that the essential parts of the software still function as expected. Every now and then, this reveals some bugs that need fixing before this code can be accepted as the new stable-release version.</p>

<p>If those bugs have a simple solution, I can make a single commit on that release-* branch, merge it to develop, and I'm done.<br>
However, I'm not quite sure what I should do when the bug is a bit more complicated.  </p>

<ul>
<li><p>I can't use a feature-branch:<br>
Those start from develop, which has moved on since the release was
initiated.</p></li>
<li><p>I don't think I should use a hotfix branch:<br>
I need to start from a release-branch instead of master, and I don't want the changes to be merged into master either (at least not before the complete release was properly validated).</p></li>
<li><p>I don't think I should work directly on the release-branch:<br>
This can generate broken code on the release-branch (code that is still under development is almost never good code)</p></li>
</ul>

<p>Maybe I should use a releasefix-* branch or something similar...? Any ideas?</p>
","3","1834095","0","0"
"30370162","117507","2015-05-21 09:45:48","5","4142","<git><merge><git-merge><git-flow>","Do I need to checkout and pull a remote git branch before I merge it in?","<p>My normal process for merging in <code>develop</code> to my <code>feature\my-feature</code> branch is:</p>

<pre><code>name@home ~/myRepo (feature/my-feature)
$ git checkout develop
$ git pull
$ git checkout feature/my-feature
$ git merge develop
$ git mergetool
</code></pre>

<p>Can this be replaced with:</p>

<pre><code>name@home ~/myRepo (feature/my-feature)
$ git fetch
$ git merge origin/develop
$ git mergetool
</code></pre>

<p>Does <code>fetch</code> retrieve enough information about the changes from the remote <code>origin/develop</code> to allow me to merge from <code>origin/develop</code> rather than <code>develop</code>?</p>

<p>Is it bad practice to have <code>feature/my-feature</code> ahead of <code>develop</code> with changes from the remote <code>origin/develop</code>?</p>
","1","117507","",""
"30372896","692560","2015-05-21 11:49:52","3","2210","<git><deprecated><git-flow>","Why is git flow feature checkout being deprecated? What should I be using instead?","<p>I'm running <code>git</code> version <code>2.3.6</code> and <code>git flow</code> version <code>1.8.0</code> and when I run commands like <code>git flow feature checkout &lt;branch&gt;</code> I get the message:</p>

<pre><code>The command 'git flow feature checkout/co' will be deprecated per version 2.0.0
</code></pre>

<p>Does anyone know why this would be deprecated and/or what I should be using instead?</p>
","1","692560","0","0"
"12833000","47825","2012-10-11 05:48:33","0","841","<git><zsh><git-flow>","Zsh and git-flow error","<p>I'm trying to use the oh-my-zsh git-flow plugin and getting the following error.</p>

<pre><code>➜  ~/www/ git:(develop) git flow feature feature
flags:FATAL zsh shwordsplit option is required for proper zsh operation
</code></pre>

<p>Is this an issue with the plugin? or a configuration issue?</p>

<p>EDIT: Using <code>setopt shwordsplit</code> doesn't help </p>

<pre><code>➜  ~/www/ git:(develop) ✗ setopt shwordsplit 
➜  ~/www/ git:(develop) ✗ git flow feature  
flags:FATAL zsh shwordsplit option is required for proper zsh operation
</code></pre>

<p>EDIT 2: Using <code>set -x</code> </p>

<pre><code>(k3)➜  ~  git flow feature
+_per-directory-history-addhistory:1&gt; print -sr -- git flow feature
+_per-directory-history-addhistory:2&gt; fc -p /home/gaurav/.directory_history/home/gaurav/history
+_per-directory-history-addhistory:1&gt; print -sr -- git flow feature
+_per-directory-history-addhistory:2&gt; fc -p /home/gaurav/.directory_history/home/gaurav/history
+_per-directory-history-addhistory:1&gt; print -sr -- git flow feature
+_per-directory-history-addhistory:2&gt; fc -p /home/gaurav/.directory_history/home/gaurav/history
+_per-directory-history-addhistory:1&gt; print -sr -- git flow feature
+_per-directory-history-addhistory:2&gt; fc -p /home/gaurav/.directory_history/home/gaurav/history
+_per-directory-history-addhistory:1&gt; print -sr -- git flow feature
+_per-directory-history-addhistory:2&gt; fc -p /home/gaurav/.directory_history/home/gaurav/history
+omz_termsupport_preexec:1&gt; emulate -L zsh
+omz_termsupport_preexec:2&gt; setopt extended_glob
+omz_termsupport_preexec:3&gt; local 'CMD='
+omz_termsupport_preexec:4&gt; title '' '%100&gt;...&gt;git flow feature%&lt;&lt;'
+title:1&gt; [[ '' == true ]]
+title:1&gt; [[ '' == *term* ]]
+title:4&gt; [[ xterm == screen* ]]
+title:6&gt; [[ xterm == xterm* ]]
+title:7&gt; print -Pn '\e]2;%100\&gt;...\&gt;git\ flow\ feature%\&lt;\&lt;\a'
+title:8&gt; print -Pn '\e]1;\a'
+/usr/bin/zsh:1310&gt; git flow feature
flags:FATAL zsh shwordsplit option is required for proper zsh operation
+omz_termsupport_precmd:1&gt; title '%15&lt;..&lt;%~%&lt;&lt;' %n@%m: '%~'                                                                                                                                                                           
+title:1&gt; [[ '' == true ]]
+title:1&gt; [[ '' == *term* ]]
+title:4&gt; [[ xterm == screen* ]]
+title:6&gt; [[ xterm == xterm* ]]
+title:7&gt; print -Pn '\e]2;%n@%m:\a'
+title:8&gt; print -Pn '\e]1;%15\&lt;..\&lt;%~%\&lt;\&lt;\a'
+/usr/bin/zsh:1311&gt; git_prompt_info
+git_prompt_info:1&gt; ref=+git_prompt_info:1&gt; git symbolic-ref HEAD
+git_prompt_info:1&gt; ref='' 
+git_prompt_info:1&gt; return
</code></pre>

<p>EDIT 2: More information about the set-up</p>

<pre><code>(k3)➜  K3 git:(feature/ebay_listings) ls -l /bin/sh
lrwxrwxrwx 1 root root 12 Oct  7 22:12 /bin/sh -&gt; /usr/bin/zsh
(k3)➜  K3 git:(feature/ebay_listings) ls -l /usr/bin/zsh 
lrwxrwxrwx 1 root root 28 Oct  2 13:49 /usr/bin/zsh -&gt; /etc/alternatives/zsh-usrbin
(k3)➜  K3 git:(feature/ebay_listings) ls -l /bin/zsh
lrwxrwxrwx 1 root root 21 Oct  2 13:49 /bin/zsh -&gt; /etc/alternatives/zsh
(k3)➜  K3 git:(feature/ebay_listings) ls -l /etc/alternatives/zsh-usrbin 
lrwxrwxrwx 1 root root 9 Oct  2 13:49 /etc/alternatives/zsh-usrbin -&gt; /bin/zsh4
(k3)➜  K3 git:(feature/ebay_listings) ls -l /bin/zsh4 
-rwxr-xr-x 1 root root 688656 Mar 30  2012 /bin/zsh4
(k3)➜  K3 git:(feature/ebay_listings) ls -l /etc/alternatives/zsh
lrwxrwxrwx 1 root root 9 Oct  2 13:49 /etc/alternatives/zsh -&gt; /bin/zsh4
(k3)➜  K3 git:(feature/ebay_listings) /bin/sh -c 'echo $0 B$BASH_VERSION Z$ZSH_VERSION'
/bin/sh B Z4.3.17
</code></pre>
","0","47825","",""
"30469782","2419628","2015-05-26 22:08:14","4","1241","<git><workflow><development-environment><git-flow>","How do you use git in ""solo-development"" (without team)?","<p>I work as a freelancer on small projects, and all of them I'm doing alone, without a team.</p>

<p>I tried to use the Git Flow. At first, all was well. There were branches for features, small commits with meaningful description, merges.</p>

<p>But the process always ends with enormously large commits direct to master branch, with descriptions like ""big update"", ""some update"".</p>

<p>How do you deal with it? Do I need Git Flow in my case or not?</p>
","3","2419628","",""
"13542929","252576","2012-11-24 16:08:28","1","207","<git><version-control><dvcs><release-management><git-flow>","git commit different set of files to develop and master","<p>I have recently started developing a new library, and use Git for revision control. I decided to follow the immensely popular blog post <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">A successful Git branching model</a> to manage branching. It is about time for me to make my first release, and I would like some advice on managing specific sets of files as I describe below. </p>

<p>On the develop branch and feature branches, I want all the ""supporting files"", such as the makefile used for compilation and the readme.md file used by doxygen to generate documentation. (Note these are just a couple of examples. I have many more ""supporting files"".)</p>

<p>The blog post also says that a commit to master branch is a release <em>by definition</em>. I want the release to include all the ""binary files"" (which includes, for example, the object files resulting from compilation and the html files containing the documentation). These files should be committed to the master branch, so that customers could just clone from the repository with the tag and get the required release.</p>

<p>I prefer not to have the ""supporting files"" in the release (since I don't want to give the customers heaps of files they don't want or cannot use). Similarly, I prefer not to have the ""binary files"" be version-controlled in the develop and feature branches. Thus, I want to commit one set of files to develop, and another set of files to master. (Of course, there's also a set of files which are ""common"" to both branches.) However, I am skeptical about keeping the master and develop branches out of sync as just described.</p>

<p>Does my proposed model sound good? If so, how should I deal with having different files committed to develop and master? Is there a better way to handle this situation? </p>

<p>I have gone through each one of the comments on the said blog page, searched the internet, and also searched here on StackOverflow. From the search results, this post <a href=""https://stackoverflow.com/questions/8713784/git-repositories-with-some-different-files"">GIT repositories with some different files</a> seems to be the only one anywhere close to my question. Neither of these helped me figure out the solution. </p>
","0","252576","",""
"13684265","1016265","2012-12-03 13:29:05","1","1112","<git><git-flow>","how to cut wrong commit [git]","<p>I'm trying to apply gitflow approach in our development process, theoretically I like it. But there is one point what is not covered anywhere...</p>

<p>Everyone pushing their results to <code>develop</code> branch. In plan, we have 10 issues which should be done and released to beta and then to production. 2 from 10 issues are not finally fixed, but partially it is already in develop branch, because developer thought he did it well, but after tests bugs are come again. And now decision we need not to wait while that 2 issues will be fixed and we need to make an upload, means make <code>release</code> branch and test it on beta.</p>

<p>In original gitflow article says:</p>

<blockquote>
  <p>The key moment to branch off a new release branch from develop is when
  develop (almost) reflects the desired state of the new release. At
  least all features that are targeted for the release-to-be-built must
  be merged in to develop at this point in time</p>
</blockquote>

<p>But what to do if in <code>develop</code> branch history we can see couple not required merges ? Do I need cut them somehow ? or do anything else ?</p>

<p>Thanks. </p>
","0","1016265","",""
"13725560","598445","2012-12-05 14:35:05","2","2754","<git><git-flow>","Merging git-flow hotfixes in sourcetree with fast-forward","<p>I am having difficulties understanding how to merge correctly hotfixes (in the git-flow sense) in SourceTree. The SourceTree website <a href=""http://blog.sourcetreeapp.com/2012/08/01/smart-branching-with-sourcetree-and-git-flow/"" rel=""nofollow noreferrer"">states</a>:</p>

<blockquote>
  <p>Once you’ve made your changes, the hotfix branch is then merged back into both the master branch (to update the released version) and the development branch (to make sure the fixes go into the next release too)</p>
</blockquote>

<p>But when I finalize a hotfix in SourceTree I get this:
<img src=""https://i.stack.imgur.com/Q4zUr.png"" alt=""""></p>

<p>Indeed Sourcetree did merge the hotfix into both master and develop but this apparently caused both those branches to diverge, which then forced me to merge develop into master again manually. The resulting structure is plain ugly.</p>

<p>Before the hotfix, both master and develop were on the same commit. Hence I expected that after the hotfix, SourceTree would merge both those branches with the hotfix branch through fast-forward, basically obtaining a simple layout like that:
<img src=""https://i.stack.imgur.com/WgVao.png"" alt=""enter image description here""></p>

<p>Here the hotfix ""fixing more..."" is visible just as a simple commit. Is there any option that would cause SourceTree to merge in a hotfix with such a simple fast-forward merge, basically moving ahead master and develop at the same time? Is there anything I may be missing aobut git or git-flow?</p>
","0","598445","",""
"31275868","4761302","2015-07-07 17:50:07","9","4890","<git><unit-testing><version-control><git-flow>","What git branch should I commit unit tests to?","<p>I'm currently following the ever-popular git workflow described <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">here</a>.</p>

<p>One thing it doesn't discuss is how to handle unit testing. Let's say I write some code and commit to <code>develop</code>. I want to write a test for it, but I don't want it in my <code>develop</code> history, I'd like to keep the tests separate so that when I look at <code>git log</code> I only see changes to the main code. However, if I commit the test to a separate <code>test</code> branch, I'll have to merge develop/test back and forth constantly, resulting in a ridiculous amount of merge commit clutter.</p>

<p>How do you manage unit testing in a git repository?</p>
","1","4761302","0","0"
"48048611","949704","2018-01-01 09:44:43","0","164","<npm><githooks><git-flow>","Configuring git-flow hook for pre-release using SourceTree?","<p>Is there a way that I can configure hooks to run a set of commands <em>before</em> a release is committed to a version when using Git Flow in SourceTree? I want to be able to make sure that when the last commit before a release is committed that <code>npm run prod</code> is ran to compile my Webpack assets instead leaving the results of <code>npm run dev</code>.</p>
","0","949704","",""
"40886315","736714","2016-11-30 10:45:42","1","583","<git><versioning><git-flow>","How do I combine versioning with merge-only to master git workflow?","<p>In a reasonable ""merge-only to master"" git workflow (e.g. gitflow) - all changes happen in branches, which in turn get merged (perhaps as part of a Pull Request) - how do I handle versioning?</p>

<p>For tagging, I easily can <code>git tag</code> the particular merge commit, no big deal.</p>

<p>But many app frameworks rely on a version file (e.g. <code>package.json</code> or <code>gemspec</code> or even custom files). </p>

<p>I see a few options:</p>

<ol>
<li>Modify the file as part of the branch. This isn't great, since you rarely know in advance which version will get merged in first, especially with a large team with many branches running in parallel.</li>
<li>Modify the file <em>after</em> commit. This isn't great, since a- I now commit to master, and b- automated CI/CD will grab the previous commit and release it, but it has the old version number and c- with 2 commits to master for one release, it is possible to check out the wrong version; easy human error.</li>
<li>Make the version file a template and auto-generate it from the git tag. This, too, isn't great, since local tooling will break on it (try running <code>npm &lt;anything&gt;</code> with an invalid <code>package.json</code>), and the repo no longer can stand on its own as an atomic unit.</li>
</ol>

<p>Is there a reasonably standard way to do this when versioning is in a file that is part of the commit? </p>
","0","736714","",""
"66914882","2548883","2021-04-02 05:32:20","0","559","<git><gitignore><git-flow><git-log><aws-codecommit>","aws codecommit repo folder override by git command run on local computer","<p>There was a folder name called <strong>profileimg</strong> in the local computer and the AWS codecommit repository. That folder fills with images when a user uploads images. However, when I change some code in the local computer repo and git push into remote repo ( AWS codecommit repo ), <strong>profileimg</strong> folder override with empty data and images are being disappeared. This was a Laravel 8 project hosted in the AWS beanstalk environment.</p>
<p>What I tried so far in the local git repo: <br/></p>
<ul>
<li>$ git rm -r --cached public/images/profileimg/*</li>
<li>$ git update-index --assume-unchanged public/images/profileimg/*</li>
</ul>
<p><strong>Folder structure:</strong>
<br/></p>
<ul>
<li>public
<ul>
<li>images
<ul>
<li>profileimg</li>
</ul>
</li>
</ul>
</li>
<li>.gitignore</li>
</ul>
<p><strong>.gitignore</strong>
<br/></p>
<pre><code>#exclude everything
public/images/profileimg/*
public/images/profileVerifyDoc/*

#exception
!public/images/profileimg/.gitkeep
!public/images/profileVerifyDoc/.gitkeep
</code></pre>
<br/>
<p><a href=""https://i.stack.imgur.com/C9tU2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/C9tU2.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/h7T2P.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/h7T2P.png"" alt=""enter image description here"" /></a></p>
<br/>
Moreover, I created .ebignore file in the AWS codecommit repo. The local computer also has .gitignore file. Any suggestion, please. 
","5","2548883","",""
"22137434","1131225","2014-03-03 01:58:47","46","63465","<git><repository><git-flow><atlassian-sourcetree>","delete a 'feature' branch using gitflow without merging into master branch","<p>I am using the Git GUI called 'Souretree' by Atlassian and in particular the 'Gitflow' module to manage various branches.</p>

<p>I just created a 'release' branch that I don't want to merge back into either the master or develop branches. How do I get rid of it ? Can I just delete it ? My concern is that I mess up the gitflow config.</p>

<p>I have only made one commit to this branch which i don't care about.</p>
","0","1131225","0","0"
"66983551","1454454","2021-04-07 09:47:26","2","31","<git><git-flow>","Are there significant differences between these 2 methods in git flow","<p>I often find I'm working on a gitflow feature branch, and I stumble across something that I later realise actually needs to be a small update to dev (e.g. a configuration change not connected with the feature, but is needed in all branches based on the current dev). But I've already saved the code, so git sees unstaged changes. I think I can resolve this in 2 ways:</p>
<ol>
<li><code>git stash</code>, switch back to dev, <code>git pop</code>, commit, switch back to feature, rebase</li>
<li>commit to feature, switch to dev, cherry-pick, switch back to feature</li>
</ol>
<p>Option 2 feels somehow easier, especially if there are other 'feature-only' changes involved in the initial set of commits needed to deal with all the unstaged changes. It also means I can finish whatever I was working on in feature before stepping aside to put whatever it was back into dev.</p>
<p>But, I'm new to git, and gitflow in particular, so not sure what else might be lurking waiting to bite me later. Is option 2 above a decent way to deal with this scenario? Are there others that would be better for any reason?</p>
","0","1454454","",""
"31852885","1231072","2015-08-06 10:07:29","2","679","<git><git-flow><smartgit><git-tag><git-describe>","git describe: inexplicable commit count","<p>Consider this excerpt of <code>git log --oneline --decorate --graph</code>:</p>

<pre><code>*   552485a (HEAD -&gt; master, origin/master) Finish v0.8.4
|\
| * c198066 (tag: v0.8.4) some commit message
* |   343af72 Finish v0.8.3
|\ \
| |/
| * 0267e30 (tag: v0.8.3) some commit message
* |   8f0ff57 some commit message
|\ \
| |/
...
</code></pre>

<p>(NB: the tag v0.8.4 is on a commit from branch 'develop')</p>

<p>How comes that when I run <code>git describe</code> I get this:</p>

<pre><code>v0.8.4-16-g552485a
</code></pre>

<p>that is, git counts 16 commits since tag v0.8.4. I'd expect it to return <code>v0.8.4-1-g552485a</code>.</p>

<p>More specifically (when using the --debug option):</p>

<pre><code>suche zur Beschreibung von HEAD
beendete Suche bei b53e85f9c8ee785c0ce50f727819b267107554fd
 annotated         16 v0.8.4
 annotated         17 v0.8.3
 annotated         18 v0.8.2
 annotated         22 v0.8
 annotated         49 v0.7
 annotated         60 v0.6
 annotated         85 v0.5
103 Commits durchlaufen
v0.8.4-16-g552485a
</code></pre>

<p>Interestingly, if I switch to my develop branch: </p>

<pre><code>0992f78 (HEAD -&gt; develop, origin/develop) Some commit message.
c198066 (tag: v0.8.4) Minor change.
0267e30 (tag: v0.8.3) Minor changes.
</code></pre>

<p><code>git describe</code> returns as expected: v0.8.4-1-g0992f78</p>

<p>Background: I'm using SmartGit and its Git-Flow functionality. </p>

<p>Here's a graphical view of the relevant commits (red: master, blue: develop):</p>

<p><a href=""https://i.stack.imgur.com/HX7fU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HX7fU.png"" alt=""enter image description here""></a></p>
","0","1231072","",""
"50033921","6496952","2018-04-26 02:26:31","6","2303","<git><git-flow>","gitflow why do we need master","<p>in gitflow all release branches are eventually </p>

<ol>
<li>merge to master</li>
<li>merge to develop</li>
<li>tag master </li>
<li>delete the release branch </li>
</ol>

<p>but why don't we just </p>

<ol>
<li>tag the release branch </li>
<li>merge to develop </li>
<li>delete the release branch </li>
</ol>

<p>in case of hotfix we can just</p>

<ol>
<li>branch of the latest tag</li>
<li>do the hotfix</li>
<li>tag that hot fix branch </li>
<li>merge to develop</li>
<li>delete the hotfix branch</li>
</ol>
","0","6496952","0","0"
"60126618","3936566","2020-02-08 12:07:13","0","292","<git><jenkins><branching-and-merging><git-flow><git-describe>","git describe not suitable for git flow process?","<p>I plan to migrate several services to a git repository. For releasing I want to go  with git flow process.
A Jenkins build will build artifacts from every existing branch. To track the version every build tags the version at the corresponding node, where the build was triggered.</p>

<p>Unfortunately I ran into troubles when merging back the master branch into develop after a release was finished.<br>
After the back merge <code>git describe</code> gives me the tag from the master branch, which is not the tag Jenkins should build the next version on develop (develop integrates the next release already with some other pre-release tags).</p>

<p>Is there a way to tell git describe not to track ""merged tags""? Or is there another git command I have to use in this situation?</p>
","0","3936566","",""
"14772161","121646","2013-02-08 12:04:15","0","181","<git><git-flow>","How to change a git repo to a git flow repo","<p>If I already have a git repo, how can I change it to a git flow style repo?</p>
","0","121646","",""
"31854922","108207","2015-08-06 11:45:31","2","56","<git><git-flow>","Failed to use git pull for a branch","<p>I get this error msg from git when I try to do git pull:</p>

<pre><code>$ git branch
  develop
  feature/add-extra-student-automatically-to-cround
* feature/adjust-my-settings-as-pm
  feature/change_order_course_code_name
  feature/link_my_settings_to_create_survey
  feature/moodle-turnitin-message
  feature/remove_wrong_text_in_notifications
  feature/survey-reports_show-coursename-better-in-survey
  feature/yellow-box-course-schedule
  master
dac@dac-Latitude-E7450:/etc/proj/social$ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; feature/adjust-my-settings-as-pm
</code></pre>

<p>How can I resolve the error?</p>
","1","108207","0","0"
"67025413","4185370","2021-04-09 17:06:13","0","111","<git><gitlab><git-merge><git-flow>","git merge develop and master Issue","<p>I'm using Gitflow for my project. my <code>develop</code> branch is ahead of <code>master</code> branch by many commits in a while. But when I tried to merge master with develop by:</p>
<pre><code>git merge develop
</code></pre>
<p>It says that <code>Already up to date</code>. Whats wrong with it or my operation?</p>
<p>Can anyone help?</p>
<p>Thanks</p>
","2","4185370","",""
"31885642","1223975","2015-08-07 19:55:51","10","4042","<git><github><git-flow>","Git branching / workflow model like ""nvie gitflow"" but without release branches","<p>Is there an official documented git workflow just like nvie's ""Gitflow"" workflow but without the release branches?</p>

<p><a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">http://nvie.com/posts/a-successful-git-branching-model/</a></p>

<p><a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"" rel=""noreferrer"">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></p>

<p>I guess I don't see the purpose of the release branches, why not just tag a release from master? (Maybe that's the same thing).</p>
","3","1223975","0","0"
"41716927","889580","2017-01-18 10:28:52","14","11243","<git><merge><branch><git-flow><hotfix>","How should gitflow hotfixes work?","<p>We use Gitflow for our web builds, and I have a question about how <code>hotfixes</code> are supposed to work. But first I should explain that we don't <em>quite</em> use the normal Gitflow workflow.</p>

<p>I understand that usually you would branch your <code>features</code>, they would merge into <code>develop</code> when finished, you would create your <code>release</code>, <code>release</code> gets merged into <code>master</code> and you deploy that, as an actual ""versioned release"".</p>

<p>However, as this is client work, we don't do ""releases"", instead features are deployed as and when they are required, so changes from our <code>feature</code> branches are merged into <code>master</code> on an ad-hoc basis.</p>

<p>This did cause problems as the <code>feature</code> branches were branched from <code>develop</code> which was way ahead of <code>master</code>; merging these <code>feature</code> branches into <code>master</code> would merge other changes into <code>master</code> (changes that were present in <code>develop</code> at the time the <code>feature</code> was branched that weren't yet in <code>master</code>). We were aware that this is not how Gitflow is designed, but we needed a branching model of some sort, so we (sort of) solved this by cherrypicking commits instead of merging branches.</p>

<p>So, I understand these issues, and I don't believe they're contributing to the issue I have now, but just in case, this is how we use it. However my question is:</p>

<p><strong>How are <code>hotfixes</code> <em>supposed</em> to merge in?</strong></p>

<p>In my head, the scenario is:</p>

<ul>
<li><code>master</code> is ""production""</li>
<li><code>develop</code> is ahead of <code>master</code></li>
</ul>

<p>You then want to patch an immediate issue with a <code>hotfix</code> branch. In Gitflow, this branches from <code>master</code>, and when you finish the <code>hotfix</code>, this gets merged into <code>master</code> <strong>and</strong> <code>develop</code></p>

<p>But how does this not cause massive problems?</p>

<p>Recently, I tried to create a <code>hotfix</code> to change a single line of copy in one file. I finished the <code>hotfix</code>, and the change merged into <code>master</code> with no problems, but when it tired to merge into <code>develop</code>, it created an enormous 35 file diff with several merge conflicts in files I hadn't touched, due to the disparity between <code>develop</code> and <code>master</code>.</p>

<p>I understand that this is because you are merging the <code>hotfix</code> <em>branch</em>, which was itself branched from <code>master</code>, into <code>develop</code>, not specifically the <em>change</em> or single <em>commit</em>, so I understand <em>why</em> there was the massive merge commit/conflict.</p>

<p>However, what I <em>don't</em> understand is, with this in mind, how <code>hotfixes</code> work at all ""in the real world"", considering they are branched from <code>master</code> and then merged into <code>develop</code>, which is, by design, way ahead of <code>master</code>. This is why I don't think the way we're using Gitflow is the issue, because <code>develop</code> would be ahead of <code>master</code> regardless of our non-standard deployment process - I can't see why this doesn't cause huge headaches regardless of the project or exact workflow.</p>

<p>What doesn't seem to make sense to me is that your <code>hotfix</code> could be something as simple as changing a <code>true</code> to a <code>false</code> or changing an email address, whatever, but to get it into <code>master</code>, you may have to wrestle with an enormous set of merge conflicts. Is this just standard behaviour? Is this just how <code>hotfixes</code> work, and if you have to sit and sort out a massive merge conflict, then so be it? Would it not be easier to just cheerypick a commit? It just seems like there is such massive scope to introduce an error for what could be such a tiny change - you're dealing with two branches that are, perhaps, several months and hundreds of commits away from each other.</p>

<p>I may just be misunderstanding the process of <code>hotfixes</code>, but if I am, I'm not sure which bit.</p>
","2","889580","0","0"
"42463257","4445648","2017-02-26 00:16:38","0","658","<github><git-flow><strategy-pattern>","Using pull request Instead of merge in working on feature branches. Is it git flow?","<h1>What i wondered</h1>

<p>I want to use pull request than merge in working on feature branches. Is it git flow too?</p>

<h2>Why this think is started?</h2>

<ol>
<li><p>I prefer to use pull request than merge for source code review.</p></li>
<li><p>Don't wanna remain 'commit history' of  my feature branches in master.</p></li>
</ol>

<h2>Please show any recommanded git repo. for examples</h2>

<p>I want to find repository that following git flow for study about git flow.</p>

<p>Would you recommand any repository on git flow? I will mark star and follow repository yours or others</p>
","0","4445648","",""
"31910224","1420752","2015-08-10 00:46:25","0","142","<git><version-control><git-branch><git-flow>","How can you tell who merged which branch into git?","<p>We are using <code>git</code> for a project, making use of <code>git flow</code> (<a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">http://nvie.com/posts/a-successful-git-branching-model/</a>) to manage hotfixes, features, etc.</p>

<p>However, somehow the changes in <code>develop</code> (which is weeks ahead of <code>master</code>) have been merged into <code>master</code>, and a recent <code>git push</code> has published the unstable <code>develop</code> branch!</p>

<ol>
<li>How can I find out who merged <code>develop</code> into <code>master</code> and when this was done?</li>
<li>How can I undo this, given that there will likely have been commits made <em>after</em> this merge, and also given that the new <code>master</code> has been pushed into production?</li>
</ol>

<p>Thank you, gurus.</p>

<p><strong>EDIT:</strong> It turns out that a <code>git flow feature</code> which should have been branched off of <code>develop</code> and merged back into <code>develop</code> was incorrectly merged into <code>master</code> as well (not by <code>git flow</code>, but manually done). I couldn't track it down because the <code>git log --oneline master</code> looked like this:</p>

<pre><code>abcdef Merged branch 'feature/1234' into branch 'master'
</code></pre>

<p><strong>EDIT:</strong> I've posted a follow up question. Thank you for the feedback thus far.</p>

<p><a href=""https://stackoverflow.com/questions/31910224/how-can-you-tell-who-merged-which-branch-into-git"">How can you tell who merged which branch into git?</a></p>
","2","1420752","",""
"67274641","2868465","2021-04-26 22:39:17","5","1434","<git><github><git-flow>","In github, how to merge one protected branch to another protected branch?","<p>Let's assume a project that follows <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">git-flow</a> and let's say I have protected <code>develop</code>, <code>release-*</code> and <code>master</code> branches. How do I update one of these branches with another protected branch. This is my protection settings:</p>
<p><a href=""https://i.stack.imgur.com/bvOtq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bvOtq.png"" alt=""Github Protection settings for both master and release-2.6.0 branch."" /></a></p>
<p>e.g. If I try to merge <code>master</code> into <code>release-2.6.0</code> and the branch is out of date, then I'd see this dialogue asking me to <code>Update branch</code>:</p>
<p><a href=""https://i.stack.imgur.com/vGAua.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/vGAua.png"" alt=""Branch update dialogue."" /></a></p>
<p>And, of course, I can't click on <code>Update branch</code> because <code>master</code> is a protected branch and I can't just change it. So, I would get an error saying <code>Update branch attempt failed.</code>.</p>
<p><strong>Potential Solution</strong>: One thing I guess I can do is first create a new (unprotected) branch from <code>master</code> and then try to merge this branch to <code>release-2.6.0</code>. However, I'm wondering if there's another elegant solution to follow <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">git-flow</a> without using this circumvention.</p>
","5","2868465","",""
"49759550","5867911","2018-04-10 17:18:56","4","4465","<git><visual-studio-code><git-flow><gitlens>","Does GitLens have support for git-flow?","<p>I desire to use GitLens to also manage the git-flow structure. 
Does GitLens have a integration for this Git extension? Or is there another extension that has it?</p>
","0","5867911","0","0"
"49779472","8647014","2018-04-11 15:50:54","0","92","<git><debian><git-flow><deb>","Using git-buildpackage together with git-flow","<p>I am using git-flow to manage my projects developments workflow. And I want to integrate the debian packaging in this workflow.
Looking at git-buildpackage, it seems to me that there is some overlap between both, especially for version tagging.</p>

<p>How is it possible to integrate git-buildpackage within the git-flow workflow, particularly in order to generate debian package for each release ?</p>
","0","8647014","",""
"32387201","3413058","2015-09-03 23:55:11","41","21129","<git><continuous-integration><git-flow><continuous-delivery>","Continuous integration and continuous delivery with git-flow","<p>We have been doing continuous integration and continuous delivery since a while with Subversion commits as the pipelines triggers. Recently, we started using git in some projects with <a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"" rel=""noreferrer"">git-flow</a> and we are trying to decide which of the branches of git-flow should we use to trigger the continuous integration and continous delivery pipelines.</p>

<p>Here are two approaches:</p>

<p><strong>1. Use develop branch</strong></p>

<p>Problem: With git-flow we are supposed to deploy the release (or master) branch in production, so we would have to build two different pipelines, one for continuous integration (branch develop)  and one for continuous delivery (branch master). This could introduce bugs in production because the version in production will not be the same that the one in other environments (integration, test, staging).</p>

<p><strong>2. Use master branch</strong>: </p>

<p>Problem: This way, we would not have a truly continuous integration, since changes to these branches are pushed not very frequently.</p>

<p>Which is the rigth branch to use in the pipelines?</p>
","2","3413058","0","0"
"14992778","2093560","2013-02-21 00:51:18","0","436","<git><git-flow>","Git-flow: why an 'unable to push to unqualified destination' with 'git flow release finish'?","<p>Why am I getting an error about pushing to unqualified destination in the following?</p>

<pre><code>$ git flow release start v1.03
Switched to a new branch 'release/v1.03'
</code></pre>

<p>(Followed by a bunch of other normal stuff.)</p>

<p>Then:</p>

<pre><code>git flow release finish -Fp v1.03
Switched to branch 'master'
Merge made by the 'recursive' strategy.
 .gitignore |    1 +
 1 file changed, 1 insertion(+)
Deleted branch release/v1.03 (was c08e706).
Everything up-to-date
Counting objects: 1, done.
Writing objects: 100% (1/1), 228 bytes, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:petertheyeti/myprivaterepo.git
   e0ef1dd..29a2667  master -&gt; master
Counting objects: 1, done.
Writing objects: 100% (1/1), 159 bytes, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:petertheyeti/myprivaterepo.git
 * [new tag]         v1.03 -&gt; v1.03
</code></pre>

<p>And then the error:</p>

<pre><code>error: unable to push to unqualified destination: release/v1.03
The destination refspec neither matches an existing ref on the remote nor
begins with refs/, and we are unable to guess a prefix based on the source ref.
error: failed to push some refs to 'git@github.com:petertheyeti/myprivaterepo.git'
Could not delete the remote release/v1.03 in origin.
</code></pre>

<p>Everything seems to be perfectly fine when looking at github... that is, master has the new bits.  But why this error?</p>

<p>Any clues?</p>
","0","2093560","",""
"60498656","560660","2020-03-03 00:58:22","0","144","<git><azure-devops><git-flow>","git error with branchs with 'cannot lock ref'","<p>I've somehow got myself into a git mess. (Hosted in visualstudio.com).</p>

<p>I have a basic repo with just 'master'.
I want to now have a gitflow scenario working.
So, I want to create 'develop'
And then branch off develop for features.</p>

<p>To check my local branches now, I execute <code>git branch -r</code></p>

<pre><code>origin/HEAD -&gt; origin/master
origin/develop
origin/master
</code></pre>

<p>This looks strange to me. It seems on the server, I have 3 branches. But not sure if it's right, as far as gitflow goes. Not sure what the HEAD one is doing.But maybe it's just saying that master is HEAD?</p>

<p>I run <code>git branch -l</code></p>

<pre><code>* develop
  master
</code></pre>

<p>That seems to indicate that locally, on my PC, I have two branches, and I am in develop. Again, seems OK to me. Not sure if it's 'tracked' though to the server.</p>

<p>Now, I want to do a feature called test.</p>

<p>So in source tree, as my command lines skills are junk, I try this:</p>

<p><a href=""https://i.stack.imgur.com/RPCor.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RPCor.png"" alt=""enter image description here""></a></p>

<p>But am faced with a shocker of an error:</p>

<blockquote>
  <p>git -c diff.mnemonicprefix=false -c core.quotepath=false
  --no-optional-locks branch develop/test fatal: cannot lock ref 'refs/heads/develop/test': 'refs/heads/develop' exists; cannot create
  'refs/heads/develop/test' Completed with errors, see above.</p>
</blockquote>

<p>I go to visualstudio.com to check what it thinks is happening, and my branches look like this:</p>

<p><a href=""https://i.stack.imgur.com/yovRr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yovRr.png"" alt=""enter image description here""></a></p>

<p>I am hopefully making a silly error, but how can I get a good flow of:</p>

<p>master, develop, and then develop/feature_name going... with pull requests into master?</p>

<p>Edit:
I think I've had a brain fart! I don't create a develop/my_branch branch!
I think I create a feature/my_branch OFF develop. And then I have this:</p>

<p><a href=""https://i.stack.imgur.com/31u9T.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/31u9T.png"" alt=""enter image description here""></a></p>

<p>And then I marge my feature branch into develop, and then can do a pull request from develop into master once develop goes live. Does this seem right?</p>
","6","560660","",""
"61094359","10465165","2020-04-08 06:15:40","1","166","<git><git-flow>","can you use git flow (the idea) without actually using the commands?","<p>How big is the advantage of using the git-flow command set (which need to be installed) vs. just working with master, develop and feature branches (i.e. following the <em>idea</em> of git flow except for release and hotfix branches)? </p>

<p>Are the commands (e.g.<code>git flow feature start feature_branch</code>) really just simplified versions of the longer regular git commands (in this case <code>git checkout develop</code> and <code>git checkout -b feature_branch</code>)? </p>

<p><em>Background: Team is used to git commands. Basically follows the idea of using master/develop/feature branch. Why would it switch to to the git-flow commands?</em> </p>
","1","10465165","",""
"24450955","592737","2014-06-27 11:40:58","0","1040","<git-flow>","git flow - how to merge feature branches with --no-ff","<p>I've just started using  <strong>git flow</strong> utility. As I see, when I'm finishing some feature, it merges it to the develop branch, without using --no--ff flag. 
I'd like to use it, so I can see all the development workflow/history in some git GUI tool (e.g. gitk).
Is  there some way to config it, or patch it, so it will merging feature branches with --no-ff flag?</p>
","1","592737","",""
"24649584","971392","2014-07-09 09:10:04","2","1828","<git><merge><gitignore><git-flow>","git merge and different gitignore for each branch","<p>I have 2 branches, <code>develop</code> and <code>master</code>. The <code>master</code> branch should not contain some development files and tools that are store in a directory called <code>boilerplate</code>. So far, so good, since I can more or less, manage with the following differences in the <code>.gitignore</code> file, between branches.</p>

<h2>develop</h2>

<pre><code># Dev tools
/html
/boilerplate/node_modules
/boilerplate/bower_components

/assets/dist/main.min.css
/assets/dist/main.min.js

.....
</code></pre>

<p>master</p>

<pre><code># Cleanup for live
/html
/boilerplate

/assets/dist/main.css
/assets/dist/main.js

.....
</code></pre>

<p>So, on commits on each branch all ok! Problem is when I merge from <code>develop</code> to <code>master</code>, or go for a <code>git flow hotfix</code> starting on <code>master</code> branch.</p>

<p>If I merge from <code>develop</code> to <code>master</code> the issue is that at some point it will fail the automatic process, and I will have to finish it manually by removing the <code>boilerplate</code> folder from git's index, because that's where the issue resides. So I just do <code>git rm -rf boilerplate/</code> and all done. This is not such a big issue.</p>

<p>But, if for some reason, I start a new branch just for a hotfix, based on master, either manually or through the <code>git flow hotfix start XYZ</code> process, my <code>boilerplate</code> directory goes to oblivion when the changes are merged to <code>develop</code> as well. All the content in it it's lost... empty, nada, nothing... because, in <code>master</code> is ignored completely.</p>

<p>So, I'm looking for a way, if possible, to avoid that issue. Boilerplate for <code>develop</code> remains as it should (90% untouched), and on <code>master</code> ignored completely, no matter the action performed on a branch. Anyway I can achieve that?</p>
","6","971392","0","0"
"24669579","384218","2014-07-10 06:12:24","7","5910","<git><github><git-flow><hubflow>","How to do add a fix in the release branch using git flow / hubflow","<p>In our project we are following repo model as per  <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">http://nvie.com/posts/a-successful-git-branching-model/</a> . </p>

<p>I had been adding features into the develop branch until now, however now our project has created a release branch and I need to add a fix on that release branch. From what I have read , adding a hotfix will add the fix to my master branch and not the release branch. So how do I add a fix on my release branch ?</p>
","0","384218","",""
"14827811","32030","2013-02-12 07:50:08","2","700","<git-svn><git-flow>","Does git-flow work together with git-svn","<p>As I'm currently bound to a subversion repository, but using git-svn fine, I was wondering if this setup could also be used together with git-flow?
What benefits would git-flow bring? What drawbacks or issues would arise?</p>
","0","32030","0","0"
"41871617","1703512","2017-01-26 10:39:06","1","5075","<git><git-branch><git-flow><git-workflow>","git-flow push non ready feature on remote git server","<p>I use git flow methodology and i need advice on how to push non ready feature on remote git server.</p>

<p>By default we can do it in such way (If feature has finished)</p>

<pre><code>git checkout -b feature develop
Do something...
git commit -am ""Message""
git checkout develop
git merge --no-ff feature
git push origin develop
git push origin feature
</code></pre>

<p>What if my feature is not ready, but i want push it on remote server?</p>

<p>I have tried to do it in such way:</p>

<pre><code> git checkout -b feature develop
 Do something...
 git commit -am ""Message""
 git push origin feature
</code></pre>

<p>But if i look at graphic scheme of commits it seems like develop and feature are the same branch (But of course they are not the same).</p>
","0","1703512","0","0"
"32532922","847480","2015-09-11 22:18:55","-1","131","<git><git-flow><git-stash>","developer vs release branch gitflow","<p>I'm new to gitflow so have a few questions.</p>

<p>Do we really need the <code>developer</code> branch? What purpose does it serve?</p>

<p>We can very well have a <code>master</code> branch where everything gets merged to production level. Then for each release we have release branches which get deployed to production for release. Feature branches are where developers code and then with a pull request merge to the relevant release branch. </p>

<p>What am I missing here?</p>
","1","847480","",""
"32599801","1887791","2015-09-16 04:29:05","0","46","<git><github><git-flow>","Is there a way to make git branch commit cleaner?","<p>I have a git commit questions. We are three developers usually working on sprint environment. Attached is a screenshot of our commits look like.</p>

<p>Usually we will create a feature/Jira-1212_ticket_name and work on it. Then commit and do a PR that one of the others will review , then either approve or work more.</p>

<p>Finally all these feature branches get merged to develop branch as you can see.</p>

<p>However, it gets really like a snake. Is there a way to make it cleaner?</p>

<p><a href=""https://i.stack.imgur.com/1xCG5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1xCG5.png"" alt=""enter image description here""></a></p>
","1","1887791","",""
"50432893","4359687","2018-05-20 08:13:42","1","297","<git><git-flow>","Should I delete the development branch after merging it back into the master in gitflow?","<p>I have a feature branch <code>feature/doX</code><br/>
And development branch <code>development</code> and master branch, <code>master</code>.<br/>
After finishing the implementation of the feature <code>doX</code>. I created a pull request from the feature branch into the development branch. My collegues reviewed the pull request, and did the merge.
After implementing many features, we did a pull request from the <code>development</code> branch into the <code>master</code> branch to prepare for our release build.<br/>
My question is: Should I delete the <code>development</code> branch after merging it back into the <code>master</code> branch and create new one for the next release features?</p>
","4","4359687","",""
"68789816","5790733","2021-08-15 08:17:02","0","107","<git><git-flow>","Question regarding merge/deploy strategy when working with git versioned content in stage/prod enviroments","<p>I have built a webproject with a flat file cms, which basically stores all content in .yaml markdown files instead if a database and I‘m therefore able to control all the content with git. That's great for production, it allows me to have a editing history for every entry and pull the content from my origin to my local machine. That's why I also don‘t want to gitignore the /content folder.</p>
<p>I further have a stage environment where I develop all new features and let them tested by my customer. When the feature is ready I merge it with a release branch into master/production (trying to implement the git flow).</p>
<p>The problem: The stage is full of dummy content from me and also my customer and I don‘t want to delete this content. Neither do I want to copy/paste the production content into the release branch every time I deploy a new version.</p>
<p>I‘m asking myself, what is a good way to keep the dummy content out of production? As far as I know, I can‘t have multiple .gitignore files in different branches, which which I would be able to exclude some directories in specific branches. And I also don‘t know a way to exclude folders during a merge.</p>
<p>Does anybody have a good idea or can point me into the right direction?</p>
","3","5790733","",""
"15979242","393254","2013-04-12 19:19:09","3","3373","<installation><git-flow>","git flow installer fails to install shFlags on the Mac OS X 10.8.3","<p>Tried this several times including nuking the previous download and manually getting the submodule.  Does anyone have a workaround?</p>

<pre><code>SilverFir-2:SRC mike$ sudo ./git-flow-installer 
### gitflow no-make installer ###
Installing git-flow to /usr/local/bin
Cloning repo from GitHub to gitflow
Cloning into 'gitflow'...
remote: Counting objects: 1407, done.
remote: Compressing objects: 100% (602/602), done.
remote: Total 1407 (delta 893), reused 1285 (delta 790)
Receiving objects: 100% (1407/1407), 358.18 KiB | 121 KiB/s, done.
Resolving deltas: 100% (893/893), done.
Updating submodules
Submodule 'shFlags' (git://github.com/nvie/shFlags.git) registered for path 'shFlags'
Cloning into 'shFlags'...
fatal: unable to connect to github.com:
github.com[0: 204.232.175.90]: errno=Operation timed out

Clone of 'git://github.com/nvie/shFlags.git' into submodule path 'shFlags' failed
install: gitflow/git-flow -&gt; /usr/local/bin/git-flow
install: gitflow/git-flow-init -&gt; /usr/local/bin/git-flow-init
install: gitflow/git-flow-feature -&gt; /usr/local/bin/git-flow-feature
install: gitflow/git-flow-hotfix -&gt; /usr/local/bin/git-flow-hotfix
install: gitflow/git-flow-release -&gt; /usr/local/bin/git-flow-release
install: gitflow/git-flow-support -&gt; /usr/local/bin/git-flow-support
install: gitflow/git-flow-version -&gt; /usr/local/bin/git-flow-version
install: gitflow/gitflow-common -&gt; /usr/local/bin/gitflow-common
install: gitflow/gitflow-shFlags: No such file or directory
SilverFir-2:SRC mike$ 
</code></pre>
","0","393254","0","0"
"16021169","1098873","2013-04-15 17:26:12","31","13011","<git><branching-and-merging><git-flow>","How do I use git flow with a staging environment?","<p>We are using git-flow to handle hotfixes &amp; features, with a develop branch &amp; the master branch (for production).</p>

<p>What is the easiest way to add a staging branch to the mix so that we can validate work that is on its way to production from develop while still keeping the helpfulness of git-flow?</p>
","0","1098873","0","0"
"32782948","1189880","2015-09-25 13:07:39","2","288","<git><git-flow>","Using gitflow - how to prepare release","<p>When using gitflow as a git workflow, considering all branches are branched from develop and merged into develop.  When coming to a release, how should failed branches be dealt with.</p>

<p>For example, feature/my-feature-1 was merged into develop ready to be q/a tested.</p>

<p>meanwhile, feature/my-feature-2 was created from develop and worked on.</p>

<p>feature/my-feature-1 failed testing and cannot be part of an upcomming release.</p>

<p>However, feature/my-feature-2 already contains all of the history of feature/my-feature-1 since it was created from develop.</p>

<p>Therefore, the only possible way of creating a release branch would be to cherry pick the commits from feature/my-feature-2.  Is this correct?</p>

<p>Is there a better way to do this or am i completely missing something?</p>
","0","1189880","",""
"16211304","66158","2013-04-25 09:37:36","14","13781","<git><version-control><git-flow>","Using git flow, how would I revert back to a previous release?","<p>I'm using git flow for my projects. When a release has been merged into the master branch it is tagged with the release version (e.g. 1.2.0) and deployed to my production servers.</p>

<p>Now I want to <strong>quickly revert to the previous release tag</strong> (e.g. 1.1.0) as the deployment should not have happened. </p>

<p>Elaboration: </p>

<ul>
<li>I merge the 1.2.0 release branch into the master branch.</li>
<li>I tag the master branch with 1.2.0.</li>
<li>I push my local repo to the origin.</li>
<li>I conclude that I released too early.</li>
<li>I want to revert back to the state of master where it was tagged as 1.1.0.</li>
<li>I want the master @ origin to revert back to the 1.1.0 state as well.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/HMERh.png"" alt=""enter image description here""></p>

<p><strong>How would I do this?</strong></p>
","11","66158","0","0"
"16386323","46194","2013-05-05 15:53:35","115","47368","<git><branch><git-flow><hotfix>","Following git-flow how should you handle a hotfix of an earlier release?","<p>If you try to follow the git-flow branching model, <a href=""http://nvie.com/posts/a-successful-git-branching-model/"">documented here</a> and with <a href=""https://github.com/nvie/gitflow"">tools here</a>, how should you handle this situation:</p>

<p>You have made a 1.0 release and a 2.0 release. Then you need to make a hotfix for 1.0. You create a hotfix branch off the 1.0 tag and implement the fix there. But what then?</p>

<p>Normally you would merge to master and put a 1.1 release tag there. But you can't merge 1.1 to a point after 2.0 on master.</p>

<p>I guess you could put the release tag on the hotfix branch, but that would create a permanent branch beside the master that would contain a release tag. Is that the right way?</p>
","1","46194","0","0"
"50643802","2729605","2018-06-01 12:47:57","0","77","<git><git-merge><git-flow>","git merge from branch didn't work, git merge using commit did, what happened?","<p>I was trying to follow the gitflow, so I created a branch named develop, then a branch named with my feature ticket, did some changes and commited them.</p>

<p>Now, after a checkout I perform</p>

<pre><code>$ git merge #611
</code></pre>

<p>And I get</p>

<blockquote>
<pre><code>Already up to date.
</code></pre>
</blockquote>

<p>However they were different:</p>

<pre><code>$ git branch -vv
  #611               ca944c8 refs #611 clean repo and create new user settings
* develop            ac605bd [origin/develop] Apk after sprint of November
</code></pre>

<p>I took note of the commit number and performed</p>

<pre><code>$ git merge ca944c8 
</code></pre>

<p>And everything worked as I was expecting.</p>

<p>What am I doing wrong? If I do several commits on a row, Shall I merge every individual commit?</p>
","4","2729605","",""
"33585927","531194","2015-11-07 17:56:28","0","146","<git><git-flow>","Is it possible (or advisable) to do a retrospective git flow release?","<p>I've been developing a project for more than a few releases now, before discovering git flow.</p>

<p>For consistency's sake with future development, I'd like to tag past commits as 1.0, 1.1, etc releases.</p>

<p>My Git-fu is not the greatest, so I'll be using Source Tree to assist me here. I see you can select a past commit when selecting ""New Release"" but will this do as I want?</p>

<p>It's also possible that I may misunderstand fundamentally misunderstand what releases are; from a git flow perspective I understand it as branches created from develop, then tagged, then merged back to both develop and master.</p>

<p>So say I'm about to release 3.0 here, but I want to release 1.0, 1.1, and 2.0 retrospectively:</p>

<pre><code>tags                1.0   1.1   2.0   3.0
master  __*__*__*____.__.__.__.__.__.__.  no commits for a long time
release             /     /     /     /  
develop __*__*__*__/\_*__/\_*__/\_*__/    commits all the way along
commits   a  b  c     x     y     z    
</code></pre>

<p>Can I / should I do this?</p>
","0","531194","",""
"50652784","9883645","2018-06-02 01:38:45","0","53","<git><git-flow>","Should small fixes to a website be a feature in git?","<p>I work for a small company and we are just implementing GIT. I'm trying to figure out what is the best practice for determining whether something is a hotfix or a feature. A lot of my time is spent fixing bugs on our website and I'm wondering if these fixes that may be under two hours of work should all be considered hotfixes.  </p>

<p>Thank you for your time.</p>
","7","9883645","",""
"69007195","16622595","2021-09-01 02:36:56","0","110","<git><branch><git-flow>","How to finish a branch in github","<p>I've <code>develop</code> and another branch with path spec : <code>remotes/origin/remotes/origin/feature/mobileapp</code>.</p>
<p>How do I finish this feature ?</p>
<pre><code>git checkout remotes/origin/feature/mobileapp   
Switched to branch 'remotes/origin/feature/mobileapp' 
</code></pre>
<p>but,</p>
<pre><code>git flow feature finish remotes/origin/feature/mobileapp  
Fatal: Branch 'feature/remotes/origin/feature/mobileapp' does not exist and is required.
</code></pre>
<p>I even switched to mobile app branch and tried</p>
<pre><code>root@ravi:/home/ravi/case/case-mobile-app# git flow feature finish 
The current HEAD is no feature branch.  
</code></pre>
<p>Please suggest a way to finish this mobile app branch.</p>
","3","16622595","",""
"33734731","4725679","2015-11-16 11:51:51","14","4300","<git><git-flow>","Stop git flow from creating a tag automatically","<p>When I found some bugs in my project,I created a hotfix branch:</p>

<pre><code>git flow hotfix start fixSomeBug
</code></pre>

<p>When I did some changes and commits,I wanted to merge these commits to master,so I typed</p>

<pre><code>git flow hotfix finish fixSomeBug
</code></pre>

<p>Next I needed to write three messages:</p>

<ul>
<li><p>Write a message for merging to master</p></li>
<li><p>Write a message for tag: fixSomeBug</p></li>
<li><p>Write a message for merging to develop</p></li>
</ul>

<p>That was fine,but I didn't want to create a tag named fixSomeBug automatically.</p>

<p>So what can I do to stop it?</p>
","0","4725679","0","0"
"17176115","1076964","2013-06-18 18:21:27","0","240","<git><workflow><git-flow>","git workflow for multi client web development","<p>I'm having a hard time figuring out a good workflow for the git development process in an agency. </p>

<p>I want to use git flow as it seems to fit our situation pretty good. 
Here's my problem with this approach :</p>

<p>We start developing feature a and feature b. Both inside individual feature branches. 
When work on the features is done, they get merged in develop. 
Now the client responsible for the QA takes a look at a test server which has the develop branch checked out. </p>

<p>The client decides: feature b can go live, feature a needs to be worked on again. </p>

<p>How can we roll back the changes done by feature a development and deploy feature b?</p>

<p>I also thought about having the QA on the individual feature branches before merging them to develop. 
But I don't know if that's a good way of dealing with this problem  </p>

<p>Any best practices for such problems?</p>
","0","1076964","",""
"33744998","1626687","2015-11-16 21:29:34","0","422","<git><merge><chef-infra><git-flow>","Chef release a cookbook from previous git branch","<p>I have multiple CHEF cookbooks that I deploy. Each one is versioned according to semantic versioning. </p>

<p>My production environment is using cookbook 0.1.1<br>
My stage environment is using cookbook 0.2.0</p>

<p>Version 2.0 has a large change that I can't deploy into production yet. A bug was found that needs to be hotfixed in 0.1.x. How would I create and deploy cookbook 0.1.2 to production, without merging in the big change in cookbook 2.0 into production? </p>

<p>Using git-flow. New releases are created off of the develop branch. Then merged back into develop and tested. After tests it is then merged to master, given a git tag and automatically deployed to the chef server.</p>

<pre><code>    0.1.1              0.2.0
   /      \           /      \
o-o--------o-o---X---o--------o-o-------- develop
 \            \                  \
  o------------o------------------o------ master
</code></pre>

<p>When a cookbook is released, the release branch is deleted. </p>

<p>I assume I need to checkout <code>X</code> and then create cookbook 0.1.2. However I find when I try and merge the cookbook 0.1.2 into the develop branch, the <code>metadata.rb</code> and <code>CHANGELOG.md</code> have merge conflicts (<code>Y</code>). While I could rebase <em>before</em> the 0.2.0 cookbook was released, that would change my entire history. </p>

<pre><code>                         _________________
                        /                 \
     0.1.1         0.1.2     0.2.0         \
   /      \       /         /      \        \
o-o--------o-o---X---------o--------o-o------Y-- develop
 \            \                        \
  o------------o------------------------o------- master
</code></pre>

<p><strong>Whats the best way to deploy a older cookbook?</strong></p>

<p>I know similar questions on backporting git commits have been asked on SO, but none of them cover how to handle the inevitable merge conflicts. Should I just accept that there will be conflicts and resolve them by hand?   </p>

<ul>
<li><p><a href=""https://stackoverflow.com/questions/1440181/how-do-i-backport-a-commit-in-git"">How do I backport a commit in git?</a></p></li>
<li><p><a href=""https://stackoverflow.com/questions/13275223/git-strategy-to-backport-bugfixes-into-older-branches-cherry-pick-vs-merge"">Git strategy to backport bugfixes into older branches (cherry-pick vs. merge)</a></p></li>
<li><p><a href=""http://glicksoftware.com/blog/backporting-a-topic-branch-with-git"" rel=""nofollow noreferrer"">http://glicksoftware.com/blog/backporting-a-topic-branch-with-git</a></p></li>
</ul>

<p><strong>Update</strong>  </p>

<p>To clarify, I already have a strategy for using different cookbook in different environments using an environments.json file and <a href=""https://docs.chef.io/cookbook_versions.html"" rel=""nofollow noreferrer"">version pinning</a>. </p>
","0","1626687","0","0"
"69033821","16816332","2021-09-02 16:14:23","0","1285","<git><github><bitbucket><git-flow>","`git flow release finish` does not merge code in `master` branch on remote repo","<p>Initially I am cloning a Git repo to my local and then doing:</p>
<pre><code>git flow init .
</code></pre>
<p>I am able to successfully create feature branch and merge to <code>develop</code> by creating pull request.</p>
<p>Now I use:</p>
<pre><code>git flow release start &lt;branch_name&gt;
</code></pre>
<p>and push the release branch to remote.</p>
<p>Changes are fine so I do:</p>
<pre><code>git flow release finish &lt;branch_name&gt; .
</code></pre>
<p>It executes fine on local and code is merged to <code>develop</code> and <code>master</code> branch, tag is cut and release branch is deleted, but on remote repo changes are not automatically merged to master branch but are back merged to develop branch only.</p>
<p>What is the possible issue it did not merge into <code>master</code> branch of remote repo?</p>
","0","16816332","",""
"33757227","1420625","2015-11-17 12:41:15","0","30","<tags><git-flow>","When I should create new tag, using semantic versioning and the git flow?","<p>Should I create tag any time I merge to master, and any time I merge in develop.</p>

<p>Inside master when version is like x.y.z, and inside develop when version could be x.y-feature-merged and/or x.y-(RC1|BETA|ALFA).</p>
","0","1420625","",""
"33757124","1420625","2015-11-17 12:36:23","0","270","<php><git><composer-php><git-flow>","When we must update version inside the composer.json file, when using the git flow","<p>I am trying to implement the git flow, inside a php project. I am adding a new feature. The last tag is 1.1.0.</p>

<p>Now, I am not in a 1.1.0 version (because I am adding a new feature). This means that I must not update version inside the composer.json file.</p>

<p>Should I update version, when a feature is added to develop? Lice 1.1-feature-name?</p>

<p>Should I update version, only inside the release branch? I think the right moment is the last one.</p>
","0","1420625","",""
"17272659","296433","2013-06-24 09:56:02","8","2481","<git><git-merge><git-flow>","git-flow: How to prevent some changes made at release branch from merging back to development","<p>The question is about some edge case of <a href=""http://nvie.com/posts/a-successful-git-branching-model/"">git-flow</a> methodology</p>

<p>I have some kind of typical git-flow history like this:</p>

<pre><code>      o---o---o---o [release-3.5.0]
     /
----o---o---o---o---o [development]
</code></pre>

<p>Git-flow told us to merge <strong>release-3.5.0</strong> branch into <strong>development</strong> then release is ready. So, eventually we'll get <strong>ALL</strong> changes, made at release branch into development branch.</p>

<pre><code>      o---o---o---o 
     /             \
----o---o---o---o---o [development]
</code></pre>

<p>Now imagine, we have a commit 'X' on release branch what we <strong>DO NOT</strong> want at development branch, for example it is some kind of hack/hotfix or else which is already fixed in development in more sane way (i.e. by commit Y)</p>

<pre><code>      o---X---o---o [release-3.5.0]
     /
----o---o---o---Y---o [development]
</code></pre>

<p>So, the main question is how to deal with such situations? How to prevent this commit (or commits) from getting back into development?</p>
","1","296433","0","0"
"33871162","1993366","2015-11-23 12:30:21","1","335","<git><jenkins><git-flow><continuous-delivery><autodeploy>","git flow branching model... how does 'qa' branch fit in, with jenkins auto deploy?","<p>We are using Vincent Driessen's <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">git flow branching model</a>, which is working well.</p>

<p>All projects build through CI (jenkins) and auto-deploy from <code>develop</code> branch to <em>test</em> servers (web applications, java applications, and so on).</p>

<p>Now, we want to set up deploy to a <em>QA</em> environment, and we have experimented with creating a <code>qa</code> branch for some of the applications, and corresponding jenkins builds which build off <code>qa</code> branch and deploy to <em>QA</em> servers.</p>

<p>Now, is this an acceptable approach, to set it up like this and <code>merge</code> or <code>rebase</code> into <code>qa</code> branch to trigger auto deploy?</p>

<p>Since in the past I have only used branches for <code>features</code>, <code>releases</code> and <code>hotfixes</code> (not ""environments"" like test, qa, stage) and scripts to deploy, e.g. <code>deploy_to_qa.sh myapp 1.2.3</code>.</p>

<p>Going forward we also want to deploy to <em>Stage</em> and <em>Prod</em> environments, and implement continuous delivery.</p>
","4","1993366","0","0"
"34632285","312444","2016-01-06 11:41:48","0","615","<git><unit-testing><jenkins><git-flow>","Using git-flow - Where does my unit/integration tests go?","<p>I am starting to learn about git-flow (<a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">http://nvie.com/posts/a-successful-git-branching-model/</a>).</p>

<p>I will put a webhook and start a jenkins job to make unit/integration test.<br>
After that Jenkins will deploy the project in production.</p>

<p>Which branch can I make unit / integration test and the deploy? develop or master? What is the best approach?</p>
","0","312444","",""
"18188492","135624","2013-08-12 13:39:22","149","79163","<gitlab><git-flow>","What are the pros and cons of git-flow vs github-flow?","<p>We have recently started to use GitLab.</p>

<p>Currently using a ""centralized"" workflow.</p>

<p>We are considering moving to the github-flow but I want to make sure.</p>

<p>What are the pros and cons of <a href=""http://nvie.com/posts/a-successful-git-branching-model/"">git-flow</a> vs <a href=""http://scottchacon.com/2011/08/31/github-flow.html"">github-flow</a>?</p>
","0","135624","0","0"
"18220663","2383778","2013-08-13 23:01:51","46","10857","<git><release-management><git-flow>","Advice on multiple release lines and git-flow, for git non-gurus","<p>Our software product line requires developing and maintaining multiple software versions concurrently.  We are relative Git newbies and recently adopted Git Flow to take advantage of <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">Driessen's branching model</a>.  We have a very small software team with few dedicated developers (we all wear many hats) and no ""integration guru.""</p>

<p>Much searching has turned up little specific advice on how to adapt Git and Git Flow to our needs.  What has turned up is that Git Flow is not well suited to supporting multiple versions concurrently.  One <a href=""https://stackoverflow.com/a/16386527/2383778"">related discussion on SO</a> has answers indicating separate branch names need to be used to track separate versions' histories.  This, and related strategies, eliminates Git Flow unless it is modified; see our team limitations above for a reason why this isn't practical for us.</p>

<p>The key question is what have others found to be a good approach for implementing Driessen's branching model as closely as possible while supporting multiple release lines?</p>

<p>UPDATES:</p>

<p>Distilling the answers below (particularly @Rasmus') with more targeted searching and internal discussions on a few options leads to the following solution that we are implementing, and which I offer as one approach that may be relevant to similar teams under similar conditions.</p>

<p>We won't continue to use Git Flow.  Instead, we will apply Driessen's model to each individual release line in a repo by prefacing each branch name with its intended release string, e.g.:</p>

<pre><code>r1.5/develop
</code></pre>

<p>All versions of a project are contained in the Git repository.  Starting a new project version consists of creating a small set of new long-lived branches prefaced by the release string (e.g. <code>r1.6/develop</code> and, in our case, <code>r1.6/release</code>; no <code>master</code> with its implication of the single current good buildable state).</p>

<p>We establish one central public repository per project on a server that will be the main avenue for sharing code through local repo <code>remote</code> links.  A push to this repository signifies code that is ready to be consumed by others.  Merging <code>RX.Y/develop</code> into and then pushing the <code>RX.Y/release</code> branch signifies code that is intended for release.  <code>feature</code>, <code>hotfix</code>, et. al. branches are handled similarly.  The branch merge/commit history for a given release line is clean and understandable.  We don't want the typical Git distributed repo strategy in favor of avoiding the complexity of merging such repos that, over time, are likely to diverge in structure.</p>

<p>In some Git GUIs (such as SourceTree for example) this branch structure is recognized and displayed as hierarchical, which helps understand the top-level history of a project from the branch structure.</p>

<p>Apologies for not up-voting any answers; my reputation on SO is not yet the minimum required to do so.</p>
","2","2383778","0","0"
"18355765","810067","2013-08-21 11:06:27","6","2483","<git><git-submodules><git-flow>","updating submodules with git-flow","<p>When making a release with git, using the git-flow model, I switch my repository to point to the latest commit in master, tag and then build from the tag. Is it good practice to merge changes into master for <em>all</em> the repository's submodules, and have them point to master (that is, the latest commit in master), or is it sufficient to leave all submodule commits unchanged?</p>
","0","810067","",""
"18393781","1024482","2013-08-23 02:38:21","-1","1415","<git><ubuntu><ubuntu-10.04><git-flow>","Couldn't install git-flow on ubuntu 10.04","<p>I am trying to install <code>git-flow</code> on Ubuntu 10.04 but I am getting the following error:</p>

<pre><code>eading package lists... Done
Building dependency tree       
Reading state information... Done
E: Couldn't find package git-flow
</code></pre>

<p>I have exected these instructions</p>

<pre><code>sudo apt-get update
sudo apt-get install git-flow
</code></pre>

<p>But didn't work. I got the above error. I am able to install using the following commands </p>

<pre><code>wget -P ~/Downloads http://launchpadlibrarian.net/84618376/git-flow_0.4.1-2_all.deb
sudo dpkg -i ~/Downloads/git-flow_0.4.1-2_all.deb
</code></pre>

<p>But I don't understand why the first set of commands doesn't work. What could be the possible issue.</p>
","2","1024482","",""
"18412750","954514","2013-08-23 22:19:41","19","8858","<git><git-flow>","Why doesn't ""git flow feature pull"" track?","<p>Lets say I've created a new feature with <code>git flow feature start FEATURENAME</code></p>

<p>then published it with <code>git flow feature publish FEATURENAME</code></p>

<p>Now my colleague wants to collaborate on this feature with me, so he does</p>

<p><code>git flow feature pull FEATURENAME</code></p>

<p>This creates a new branch on his local repo, based on the feature branch in the remote repo. This does not however set his local feature branch to track the remote feature branch, so now he has to track this branch manually.</p>

<p><strong>What is the reasoning behind this extra step? Why not have the <code>feature pull</code> command set to track as well?</strong></p>

<p>What's the workflow difference between <code>git flow feature pull</code> and <code>git flow feature track</code>. </p>

<p>In which cases would you use each of those?</p>
","2","954514","0","0"
"34948684","688237","2016-01-22 14:09:29","0","65","<git><debugging><branching-and-merging><git-flow><branching-strategy>","git workflow for deployment of code to production, when there is a need to change debugging related code in production?","<p>We use git with the <a href=""https://github.com/nvie/gitflow"" rel=""nofollow"">git flow</a> branching model for our project. In our codebase there is some debugging related code which we turn on by default in non-production code (debugging output / debugging flags). </p>

<p>Our current workflow for deploying a release to production (master branch) is to create a release branch off of our development code base (develop branch). On the release branch we disable debugging features (debugging flags), test, eventually make changes after testing, commit, push the release to master, merge master back to develop and change the debugging flags back on manually.</p>

<p>Is there a better workflow than setting debugging flags on and off manually when releasing and merging back to develop?</p>

<p>Edit on 24/01/16:
In reply to @Lazureus comment:
The used languages are: Python (backend). And Javascript (frontend). No makefile is used, because there is nothing to build. The IDE we're using for python is pycharm.</p>
","2","688237","",""
"41956230","3224058","2017-01-31 11:18:35","0","298","<git><version-control><versioning><git-flow>","How to align the versioned code by git with unversioned code?","<p>In my company we don't use a version control system.
Simply, we have a network folder <strong>G</strong> that contains the last stable version of code.</p>

<p>The developers copy that code to their local machine <strong>L</strong> for their projects, change files and copy them back from <strong>L</strong> to <strong>G</strong>.</p>

<p>An elect developer compiles the updated source in <strong>G</strong> and releases a new version of the application.</p>

<p>Now we try to start to use Git to manage sources. Me (D1) and an other developer (D2) use Git and it works very well! <strong>But</strong> at the same time, other developers D3, D4, D5, D6 continue to use the old method copying the code from and to the network directory.</p>

<p>At this moment, how can I align the code base in <strong>G</strong> with the one in Git, until all developers switch over to use Git?</p>

<p>We use git-flow, and my idea is to align the <code>master</code> branch from/to the G network folder ... but:</p>

<ul>
<li>When? On each release by D3-D5 developers or can I do it less frequently?</li>
<li>By whom? Must update be done by the developer who made the changes?</li>
<li>How? Merging files (thereby affecting the modification date) or replacing files when it is possible?</li>
</ul>

<p>Do you have others suggestions to manage this (hopefully) temporary situation?</p>
","0","3224058","",""
"18480923","1093026","2013-08-28 06:36:00","108","58349","<git-flow>","Is there a command to undo git flow init?","<p>After <code>git flow init</code>, how to remove the git flow model?<br />
How do I remove all related config from the <code>.git/config</code> file?</p>
<pre class=""lang-sh prettyprint-override""><code>$ git flow init
</code></pre>
<pre class=""lang-sh prettyprint-override""><code># force reset
$ git flow init -f
</code></pre>
<p>How to remove below content from the <code>.git/config</code> file?</p>
<pre class=""lang-default prettyprint-override""><code>[gitflow &quot;branch&quot;]
    master = master
    develop = develop
[gitflow &quot;prefix&quot;]
    feature = feature/
    release = release/
    hotfix = hotfix/
    support = support/
    versiontag = 
</code></pre>
","2","1093026","0","0"
"42230713","148397","2017-02-14 15:58:30","0","563","<maven><travis-ci><git-flow><sonatype>","travis gitflow java maven workflow","<p>I all,</p>

<p>working on a java project hosted on github.
I would like to push the code directly to sonatype on development and master branch.</p>

<p>currently only the <strong>develop</strong> branch works because I skipped the gpg signing</p>

<p>I use the <strong>setting.xml</strong> in .travis folder with my credentials</p>

<pre><code>&lt;settings xmlns=""http://maven.apache.org/SETTINGS/1.0.0""
          xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
          xsi:schemaLocation=""http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd""&gt;
    &lt;servers&gt;
        &lt;server&gt;
            &lt;!-- Maven Central Deployment --&gt;
            &lt;id&gt;ossrh&lt;/id&gt;
            &lt;username&gt;${env.SONATYPE_USERNAME}&lt;/username&gt;
            &lt;password&gt;${env.SONATYPE_PASSWORD}&lt;/password&gt;
        &lt;/server&gt;
    &lt;/servers&gt;
    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;ossrh&lt;/id&gt;
            &lt;activation&gt;
                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
            &lt;/activation&gt;
            &lt;properties&gt;
                &lt;gpg.executable&gt;gpg&lt;/gpg.executable&gt;
                &lt;gpg.passphrase&gt;${env.GPG_PASSPHRASE}&lt;/gpg.passphrase&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;
&lt;/settings&gt;
</code></pre>

<p>my <strong>travis.yml</strong> looks like this:</p>

<pre><code>language: java
jdk:
  - oraclejdk8

script:
 - mvn --settings .travis/settings.xml clean verify

deploy:
 -
  provider: script
  script:
   - mvn --settings .travis/settings.xml deploy -D gpg.skip -P release
  on:
    branch: develop
 -
  provider: script
  script:
   - mvn --settings .travis/settings.xml org.codehaus.mojo:versions-maven-plugin:2.3:set -D newVersion=$TRAVIS_TAG -P release
   - .travis/gpg.sh
   - mvn clean deploy --settings .travis/settings.xml -D skipTests=true --batch-mode --update-snapshots -P release
  on:
    tags: true
</code></pre>

<p>my release profile include the deploy plugins needed.</p>

<p>I am getting an error when I push a tag/release (like 0.0.2). I expect this to deploy a release using the tag.</p>

<p>The develop branch works fine and the snapshot is deployed to sonatype repo correctly.</p>

<p><a href=""https://github.com/effectus-io/effectus-parent"" rel=""nofollow noreferrer"">https://github.com/effectus-io/effectus-parent</a></p>

<p>thanks in advance</p>

<p>here is the travis log error.</p>

<p><code>
The command ""mvn --settings .travis/settings.xml clean verify"" exited with 0.
Skipping a deployment with the script provider because this branch is not permitted
dpl.0
Fetching: dpl-1.8.31.gem (100%)Fetching: dpl-1.8.31.gem (100%)
Successfully installed dpl-1.8.31
1 gem installed
dpl.1
Installing deploy dependencies
!!! Script support is experimental !!!
Preparing deploy
Cleaning up git repository with `git stash --all`. If you need build artifacts for deployment, set `deploy.skip_cleanup: true`. See https://docs.travis-ci.com/user/deployment/#Uploading-Files.
No local changes to save
dpl.3
Deploying application
No stash found.
/home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/lib/dpl/cli.rb:54:in `system': wrong first argument (ArgumentError)
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/lib/dpl/cli.rb:54:in `shell'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/lib/dpl/provider/script.rb:18:in `push_app'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/lib/dpl/provider.rb:146:in `block in deploy'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/lib/dpl/cli.rb:41:in `fold'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/lib/dpl/provider.rb:146:in `deploy'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/lib/dpl/cli.rb:32:in `run'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/lib/dpl/cli.rb:7:in `run'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/gems/dpl-1.8.31/bin/dpl:5:in `&lt;top (required)&gt;'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/bin/dpl:23:in `load'
    from /home/travis/.rvm/gems/ruby-1.9.3-p551/bin/dpl:23:in `&lt;main&gt;'
failed to deploy
</code></p>
","1","148397","",""
"42248144","1420625","2017-02-15 11:30:39","2","62","<symfony><git-flow>","When is next Major UPGRADE file during gitflow development?","<p>In symfony/symfony project, I see that the master (3.3-dev) exists a file called <code>UPGRADE-4.0.md</code>. 4.0 development is not yet started, but this file already exists. What's the reason?</p>
","0","1420625","0","0"
"42438054","1242646","2017-02-24 11:57:12","0","106","<git><release><git-flow>","Is it possible and how to manage multiple release variants (i.e. customized apps) with git-flow?","<p>For reasons long to describe (i.e. related to highly customized applications), I need to keep in parallel different variants of the same release for a product (i.e. .  </p>

<p>I haven't found any reference of such a requirement related to git-flow,
so my question is:
does git-flow include any hint/suggestion/procedure to managed this scenarios?<br>
Or should I just manage them outside the facilities provided by git-flow?</p>

<p>P.S. I know I could use other mechanism, such as <em><a href=""https://en.wikipedia.org/wiki/Feature_toggle"" rel=""nofollow noreferrer"">feature flags</a></em> to deal with customized versions, but unfortunately this would require a lot more effort right now.</p>
","0","1242646","0","0"
"42461007","4445648","2017-02-25 20:06:10","1","914","<merge><branch><release><git-flow>","Using git flow, it didn't change the master branch. Is that right?","<p>Why wasn't my master branch changed after I executed this command line?</p>
<pre><code>git flow release finish v0.0.1
# 1. Write merge message
# 2. Write tag name and message
git push --tags
</code></pre>
<p>Using <a href=""https://github.com/nvie/gitflow"" rel=""nofollow noreferrer"">git flow command(git flow)</a>, I tried to follow their strategy. My project's master branch wasn't changed by executing some command lines (Branch name release number). It only changed the develop branch and created a tag on the master branch. It did not merge the master branch.</p>
<pre><code>git flow release finish v0.0.1
# 1. Write merge message
# 2. Write tag name and message
git push --tags
</code></pre>
<p>The log below is the result of the above command lines:</p>
<pre><code>$ git flow release finish v0.0.1 
</code></pre>
<blockquote>
<p>Summary of actions:</p>
</blockquote>
<blockquote>
<ul>
<li>Release branch 'release/v0.0.1' has been merged into 'master'</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>The release was tagged 'v0.0.1'</li>
</ul>
</blockquote>
<ul>
<li><p>Release tag 'v0.0.1' has been back-merged into 'develop'</p>
</li>
<li><p>Release branch 'release/v0.0.1' has been locally deleted; it has been remotely deleted from 'origin'</p>
</li>
<li><p>You are now on branch 'develop'</p>
<p>$ git push --tags</p>
</li>
</ul>
<blockquote>
<p>Username for 'https://github.com': drake-jin
Password for 'https://drake-jin@github.com':
Counting the number of objects : 1, complete.
Writing objects: 100% (1/1), 188 bytes | 0 bytes/s, complete.
Total 1 (delta 0), reused 0 (delta 0)
To <a href=""https://github.com/drake-jin/%E2%99%A5"" rel=""nofollow noreferrer"">https://github.com/drake-jin/♥</a></p>
</blockquote>
<blockquote>
<ul>
<li>[new tag]         v0.0.1 -&gt; v0.0.1</li>
</ul>
</blockquote>
<p><a href=""https://i.stack.imgur.com/njLTh.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/njLTh.jpg"" alt=""git flow official document said that it will merge release branch and master branch"" /></a></p>
<p>This picture is part of an officially provided document from <a href=""http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/"" rel=""nofollow noreferrer"">git flow repository</a>.</p>
<p>I am not clear what this part of this picture means:</p>
<blockquote>
<p>Boom. git-flow pulls from origin, merges the release branch into master, tags the release and back-merges everything back into develop before removing the release branch.</p>
</blockquote>
<p>This part said that master branch is merged with release branch. Isn't it?</p>
<p>Actually, I can't still understand it. Why isn't my master branch changed? It just has a tag.</p>
","0","4445648","",""
"60730055","2504762","2020-03-17 20:53:03","2","3422","<git><github><git-branch><branching-and-merging><git-flow>","gitflow branching strategy - multiple releases","<p>currently, we are using the GitHub flow (feature branching) strategy. However, with that, the problem is sometimes features are queues in for releases
i.e. </p>

<ol>
<li>I have my featured merged in development (or master, we have only) branch and deployed to Test Environment for testing. </li>
<li>Meanwhile, we want to develop or fix some high priority bugs/features. I can't do that without reverting earlier code from develop branch. </li>
</ol>

<p>To solve this issue, I am trying to implement <strong>GitFlow Branching</strong> Strategy. However, I am thinking that very similar problem as above may arise as mentioned below.  </p>

<ul>
<li>I created a new feature branch, done my development and merged to develop </li>
<li>we merged few more feature to develop </li>
<li>Cut out a new release branch (let's called release-A) and then deploy it to Test Environment for testing. </li>
<li>meanwhile this feature is being tested, new feature request came which has a high priority</li>
<li>Now if I branch out of latest develop, it has other features (release-A) which I don'
t want to deploy to prod. (or merge with the master) </li>
</ul>

<p><strong>Questions:</strong> </p>

<ul>
<li>Rather, than branching of lastest, develop branch,  should I branch from the commit has which is in PROD? </li>
<li>if so, should I create a release from the feature branch? </li>
<li>how to deploy this in Test so that testing or both (release-A and this new feature can happen in parallel). The latter point is no so important. </li>
</ul>

<p><strong>Note:</strong>
I am using Microsoft Azure Data Factory, and so I need to merge some changes to develop branch ( related to Azure Data Factory) otherwise I won't be able to publish those changes (won't be able to create ARM template to deploy to other environments) </p>
","0","2504762","0","0"
"42999523","3453707","2017-03-24 12:28:59","0","1138","<git><git-flow>","Do I need use git in ""git flow"" locally?","<p>I have doubts how to use git flow locally and do i need to do this
at all. With remote git flow i guess all seems clear:</p>

<p>1)Create remote repository, this makes one master branch
2)Make devel branch from master
3)All developers clone remote repo to their local computers and make some staffs:
add, commit changes, and the push to the remote devel branch, then ""repository owner"" merges remote develop branch to the master time after time</p>

<p>But what about local repository? Do i need to create locally some sort of git flow? make my own develop and master branch, where i will commit changes to my local develop branch then merge it to local master, and only after that make push to remote develop branch.</p>

<p>What would be the right queue of actions to working with locally - remote repositories? </p>

<p>Cause I think if I would clone remote repo I would have master and develop branches like remote repo already has.</p>

<p>Thanks</p>
","0","3453707","0","0"
"24512718","121993","2014-07-01 14:25:44","0","1168","<git><release><git-flow><branching-strategy>","gitflow hot fix branch vs long lived release branch","<p>I've been looking at the gitflow workflow a bit <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">http://nvie.com/posts/a-successful-git-branching-model/</a>, and it makes sense and is very similar to what I've done in the past. I've done things a little differently when it comes to releasing and hot fixing and wanted to ask about the advantage or disadvantage of they way gitflow branches vs how I've proposed.</p>

<p>Typically when I create a release branch, say for release 1.0.0, I'll name the release branch release-1.0.x, not release-1.0.0. Once I create the branch (but before the code is released), the version will be 1.0.0-SNAPSHOT for any last minute fixes. When I release, I create release version of 1.0.0, tag it and merger to master. Now rather than deleting the release branch, I increment the version to 1.0.1-SNAPSHOT. This effectively becomes a long-lived hot fix branch for the release 1.0.x series. If I find a bug in production, I'll fix it on this branch, cut a 1.0.1 release version and increment the version to 1.0.2-SNAPSHOT, and so on.</p>

<p>The downside is that release branch exists for as long as this release is the current release. The upside is that I don't need to create new hot fix branches if there's a bug, and the branch already exists.</p>

<p>So my question is am I missing any major issues here by not having the hot fix branches and doing it this way?</p>
","1","121993","",""
"43205716","46183","2017-04-04 11:18:34","3","3804","<git><github><pull-request><git-flow>","Workflow for handling pull requests in a gitflow workflow (with infrequent releases)?","<p>Our previous workflow was similar to gitflow, everything is branched off master, master always reflects production. When a release is being prepared, the feature branches are merged into master, possible conflicts between different features fixed, create a tag for the release, push to master and that's it. </p>

<p>So now we'd like to integrate pull requests into this workflow, but let the developer of the branch remain responsible for fixing conflicts. The idea was then to still branch off master, and then do a pull request to a new branch, called releaseX, where all the new code that is going into the next release is. </p>

<p>The problem is that when there are conflicts in releaseX between the new feature and the other features, how does the developer fix them? Doing the merge in github itself is not acceptable, merging releaseX into the feature branch is not either (it would pull in unrelated features and it would make it harder for a feature not to go into production after all). </p>

<p>What we ended up with was creating a branch just for the merge, something like resolution/releaseX_my_beautiful_feature.</p>

<p>(For now, following more of a githubflow like model (instead of gitflow), with continuous deployment and no real concept of releases, is not the best solution for us.)</p>

<p>What workflow do you guys adopt when using both pull-requests and releases?</p>
","3","46183","0","0"
"24545967","757446","2014-07-03 05:58:01","2","426","<.net><version-control><tfs><git-flow><git-workflow>","Implement git flow workflow with tfs 2010 / tfs 2012?","<p>Currently we are using TFS 2010 and planning to migrate to TFS 2012. As part of our new project we would like adapt git flow workflow as our branching strategy.</p>

<p>This requires cross branch merge, I could do that in tfs with baseless merge. Then i loose the track of what all changes or items are merged.</p>

<p>Is there any way in TFS 2010 / 2012 to do delta merges for cross branches? just like push and pull in git?</p>
","0","757446","",""
"24754286","2260761","2014-07-15 09:15:44","56","37663","<git><git-flow><atlassian-sourcetree>","How to reset the git-flow configuration in SourceTree?","<p>In my team we are migrating from svn to git and we have agreed upon embracing the git-flow flow. I've been playing around a while with SourceTree and the Git-Flow extension. Now, we have decided that the develop branch will be called development/current instead, but I do not find in the SourceTree UI where to change the Git-Flow configuration.</p>

<p>Is it possible, once initialized, to change the Git-Flow configuration for a given repository?</p>
","0","2260761","0","0"
"43918831","1231111","2017-05-11 14:48:04","0","342","<git><git-flow>","Do we need to create a hotfix branch for every bug following git flow pricinples?","<p>I'm new to git and git flow, but I'm a little confused now that if we need to create a new hotfix branch for every single bug? After googling pretty much, I didn't find a good answer. You know , there could be tens of bugs coming each day after our project went live due to the bad quality of another them from global.</p>

<p>If following the pricinples of git flow strictly, we need to create tens of hotfix branch a day, I do not think it is practical.</p>

<p>So the question is <strong>if we can actually have only ONE hotfix branch to fix all the online bugs or if there is another  better workflow solution to handle such case</strong>? Thanks.</p>
","10","1231111","",""
"25299672","1075540","2014-08-14 03:39:34","0","205","<git><git-flow>","gitflow - make sure master branch stable","<p><strong>we use gitflow</strong></p>

<ul>
<li><p>when tester has tested our release branch, we merge
   release branch to master branch,  our tester not test on master, <strong>how
   to make sure master branch stable?</strong></p></li>
<li><p>tester has tested release branch name release1, tester has tested
   release branch name release2,  both release1 and release2 merge to
   master branch, our tester not test on master, <strong>how to ensure master
   branch stable?</strong></p></li>
</ul>
","0","1075540","",""
"7091599","518204","2011-08-17 10:52:29","2","2596","<git><gitolite><git-flow>","git default remote branch with gitolite","<p>I'm using <a href=""https://github.com/nvie/gitflow"" rel=""nofollow"">gitflow</a> branching model for some projects. For this reason when someone clone a repository I'd like that the default checked out branch would be the <code>develop</code> branch rather than <code>master</code>.</p>

<p>For public projects hosted on Github I can control this using the Admin section for that repository, but for private repository managed with gitolite the only working solution I found is to ssh into the hosting machine and use the <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-update-ref.html"" rel=""nofollow"">git update-ref</a> command directly in the bare repository.</p>

<p>Is there any way to do this remotely, i.e. without the need to ssh into remote machine?</p>
","0","518204","0","0"
"6913324","422073","2011-08-02 14:02:37","3","1254","<git><xcode4><git-flow>","Using Xcode4 git integration with git-flow","<p>Just wondering if anyone is using Xcode4's git integration to work with a project using git-flow?  If so, did you have to do anything in particular to get it set up and working?</p>

<p>Thanks</p>
","0","422073","0","0"
"7196489","103778","2011-08-25 20:01:33","8","1097","<rubygems><bundler><git-flow>","Using Bundler's rake release with git-flow","<p>I'm using git-flow for the development, and Bundler to release my gem.  My question is how to use both git-flow release and rake release together.  Both tag git, and since the tag is the same there is a conflict. </p>

<p>How should I handle this without having to delete tags.  Right now I'm on the develop branch (git-flow), and to move it to the master branch using git-flow, you use a git-flow release.</p>

<p>Thanks for your help,</p>

<p>-Damien</p>
","0","103778","0","0"
"62687451","4490081","2020-07-02 01:05:16","1","2013","<git><github><git-flow>","Usage of git flow init when team members clone the remote repository","<p>Suppose I have cloned a remote repository (which again belongs to me, say from <a href=""https://www.github.com"" rel=""nofollow noreferrer"">github.com</a>) and I have initialized git flow. As you may know, <code>git flow init</code> will create <code>develop</code>  branch and create the prefixes for feature, bugfix etc. So far fine.</p>
<p>If I try to execute <code>git flow init</code> again on the same repository, git already says that:
<code>Already initialized for gitflow.</code>
<code>To force reinitialization, use: git flow init -f</code></p>
<p>That means git stores the state of initialization within the git repository (in <code>.git</code> folder). Now, if I push the  <code>develop</code> branch, it reflects in the remote repository, which is as expected.</p>
<p>Now, if another team member clones from this remote repository in his local machine, he again has to initialize using <code>git flow init</code> (if he wants to use <code>git flow</code>).</p>
<p>I expected that it should have given the output: <code>Already initialized for gitflow.</code>
<code>To force reinitialization, use: git flow init -f</code> in his machine, but that is not the case.</p>
<p>Can you please clarify as to why every team member has to execute <code>git flow init</code> in his local machine after they clone from the remote repository?</p>
","0","4490081","",""
"7262148","537093","2011-08-31 19:11:12","24","4495","<git><deployment><git-flow>","Using git-flow in a multi-stage deployment","<p>Drawing a blank with finalizing my deploy scheme here. After posting this question: <a href=""https://stackoverflow.com/questions/5835997/migrating-a-production-site-with-no-vcs-at-all-to-git"">Migrating a production site with no VCS at all to Git</a>, I've got the gist of deploying to a local repo down.</p>

<p>My local development server has a git-flow repository on it that I can push to and it will update an external worktree.</p>

<p>I have my repo set up with git-flow and here's what my origin remote looks like: </p>

<pre><code>$ git remote show origin
* remote origin
  Fetch URL: ssh://user@host/var/git/dev/repo.git
  Push  URL: ssh://user@host/var/git/dev/repo.git
  HEAD branch (remote HEAD is ambiguous, may be one of the following):
    develop
    master
  Remote branches:
    develop tracked
    master  tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local refs configured for 'git push':
    develop pushes to develop (up to date)
    master  pushes to master  (up to date)
</code></pre>

<p>What I attempted to do, was set up 2 pseudo-environments. One for staging and one for production. I want to have them behave as follows:</p>

<pre><code>git push staging #pushes to remote staging repo with a post-receive hook ""git checkout develop -f""

git push production #pushes to remote production repo with a post-receive hook ""git checkout master -f""
</code></pre>

<p>This way, we can develop locally and push to our little internal development server and have all the history. Then when we're clear for staging/production, we just push out the appropriate branches.</p>

<p>I tried creating bare repos with separate work trees like I did with the development server (see my link at the beginning of the post), and simply did:</p>

<pre><code>git push staging develop
git push production master
</code></pre>

<p>And here are the remotes, respectively:</p>

<pre><code>$ git remote show staging
* remote staging
  Fetch URL: ssh://user@host/var/git/dev/staging.git
  Push  URL: ssh://user@host/var/git/dev/staging.git
  HEAD branch: develop
  Remote branch:
    develop tracked
  Local ref configured for 'git push':
    develop pushes to develop (up to date)

$ git remote show production
* remote produdction
  Fetch URL: ssh://user@host/var/git/dev/production.git
  Push  URL: ssh://user@host/var/git/dev/production.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local ref configured for 'git push':
    master pushes to master (up to date)
</code></pre>

<p>So, in theory, we can use git-flow internally, track the develop branch and push it out for other departments to view/QA. Then we can do our releasing internally, and push the changes to staging and then simply push the master branch to production.</p>

<p>I guess my question is - am I going about this the right way? I am a real novice when it comes to git and git-flow. I've pored over all the resources available and this is the best I could come up with so far.</p>

<p>Any insights from folks who are using git-flow in multi-stage deployment would be greatly appreciated. </p>
","2","537093","0","0"
"7854068","51795","2011-10-21 19:02:37","2","113","<git><git-flow>","How to start git flow upon trying it in the past...?","<p>Sorry for the bad title, but...</p>

<p>I tried git flow on a project I was creating a few months back and found it was nice, but as I was still hacking together the project to be, all distinction between what's main, develop or feature was a bit useless. So I finished the feature I started and continued hacking on <em>main</em>.</p>

<p>Now, the release is coming and I wanted to start a release branch, which upon closing would the serve of a git flow style workflow. When I ""git flow release start v1.0.0""ed, it created a release branch stemming from where I last tried flow, a few hundred commits back. Obviously, this is not what I had in mind...</p>

<p>So, how could I tell git flow to start the release branch from current HEAD (master)?</p>
","0","51795","0","0"
"63224305","14039923","2020-08-03 05:47:00","3","929","<git><git-flow><hotfix>","purpose of git hotfix branch","<p><a href=""https://i.stack.imgur.com/jIxuX.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jIxuX.jpg"" alt=""gitflow"" /></a></p>
<p>CMIIW, the famous git-flow workflow above suggests the step for conducting a hotfix is as followed:
stable branch: 'master'
working branch: 'develop'</p>
<ol>
<li>branch 'hotfix' out from 'master'</li>
<li>fix and commit to 'hotfix'</li>
<li>merge 'hotfix' into 'master'</li>
<li>merge 'hotfix' into 'develop'</li>
<li>del 'hotfix'</li>
</ol>
<p>My question is why do we need to create a 'hotfix' branch? What would be the [harm/drawback/lack of flexibilities] if we do this</p>
<ol>
<li>checkout 'master'</li>
<li>fix and commit to 'master' and call the commit like &quot;DEBUG: some fix&quot;</li>
<li>merge 'master' into 'develop'</li>
</ol>
<p>My guessing is that 'hotfix' branch is trying to follow the same paradigm as 'feature branch', where we don't directly commit to 'develop' and 'master'. But the 'hotfix' branch generally requires only little code changes in my case (eg. getting rid of an extra comma that causing SQL error), which I personally don't find it worse the effort of creating a new branch.</p>
<p>If both ways are fine, how do I judge when to use what? Based on the amount of fixes?</p>
<p>If my proposed way is not good, could you specify what issues it could potentially cause or what flexibilities it doesn't provide compared to the standard way?</p>
","0","14039923","0","0"
"42159628","4140732","2017-02-10 12:39:04","1","1261","<git><release-management><git-flow>","In gitflow if we have a release branch open for one week can we still merge feature branches into develop","<p>In gitflow if we have a release branch open for one week can we still merge feature branches into develop.</p>

<p>We have a release branch open for a while because we do the cut off from develop and we keep the release branch open for one week. But at the same time we need to merge things back to develop. Is that correct? or we should do it in another branch temporally or release branch should not be open for so long? any thoughts?</p>
","0","4140732","",""
"23131431","161957","2014-04-17 11:04:15","2","479","<git><git-flow><satis>","How can I control what git repository branches are included as releases in satis?","<p>We're currently using git flow to manage feature and hotfix branches in git, and satis to manage packages. Is there any way to tell satis to only list tagged branches as a release rather than listing every single branch that has been created?</p>
","0","161957","",""
"5054174","133623","2011-02-19 23:22:32","6","3213","<git><git-workflow><git-flow>","git-flow for multiple staging / production environments","<p>I am trying to apply git-flow for a project with multiple websites that share a same code base.</p>

<p>I currently use many feature branches, one develop branch, one support branch, and MANY production branches: one for each site, since some config files are customized per site.</p>

<p>The git flow tool does not propose many master/production branches, but a single one. 
<strong>What can I do?</strong></p>
","1","133623","",""
"42403057","533426","2017-02-22 21:57:22","0","59","<git><deployment><merge><git-flow>","A very simple git deployment, how to structure git?","<p>this is just an idea. I am thinking about it, not sure if this is optimal or not.</p>

<p>we are a tiny team. 1 person up to 3 persons. Generally just one person. So basically all that is written or almost all, say 99%, will be pushed to staging / production asap. There is no big long term feature development happening on the side.</p>

<p>we have 3 stages</p>

<ol>
<li>local</li>
<li>staging</li>
<li>production</li>
</ol>

<p>I created on git 2 branches:</p>

<ol>
<li>staging</li>
<li>production</li>
</ol>

<p>you locally develop, once happy with it, you push it to staging.</p>

<p>it works well? we merge it to the production branch.</p>

<p>Like this, it is very easy to see what is live, that is everything that is on the production branch.</p>

<p>Now <strong>what is the best way to merge from staging to production?</strong> to keep the commits, but as well, to see when the merge was done. So it is easy to revert to ""pre merge"" state.</p>

<p><strong>generally, is there a better way to do this?</strong></p>

<p><strong>how to correctly tag things?</strong></p>

<p>it must be simple, for a mostly one person team, or tiny team a big long complicated thing doesn't really make sense.</p>

<p>i was reading here:</p>

<p><a href=""https://datasift.github.io/gitflow/IntroducingGitFlow.html"" rel=""nofollow noreferrer"">https://datasift.github.io/gitflow/IntroducingGitFlow.html</a></p>

<p>it does not provide the commands, and it looks a bit too complicated to me</p>
","0","533426","",""
"42562222","2234770","2017-03-02 17:38:38","7","3009","<git><git-flow><gitkraken>","gitkraken doesn't automatically delete remote feature branches","<p>Using gitkraken with a gitflow-enabled repository and trying to figure out how to finish a feature branch in such a way so as to also delete from remote that feature branch if it exists. When you use the git-flow scripts this happens for you automatically. with gitkraken there doesn't seem to be any mentions on this in the manual. Am I missing something or is there no way to do this automatically with gitkraken? </p>
","2","2234770","0","0"
"16754597","2421226","2013-05-25 22:48:02","5","3942","<git><git-flow>","using git-flow with multiple git repositories per project/app?","<p>At my current place of work we are using git-flow, we use the standard buckets (develop in develop, release in master, feature this, feature that, etc).</p>

<p>We are using a large number of git repositories (per project) where often I have to start a 'feature' in more than one git. Typically around three git repos.</p>

<pre><code>myApp
    git: bitofcode1
    git: scripts
    git: library
</code></pre>

<p>I try to use the same feature name 'feature-change-whatever' across all the three git repos but it feels to me that the git-flow model is not appropriate for dealing with new features in a project spread across multiple repos.</p>

<pre><code>myApp
    git: bitofcode1 (feature-change-whatever)
    git: scripts  (feature-change-whatever)
    git: library  (feature-change-whatever)
</code></pre>

<p>My thoughts are that in order to use git-flow with 'myapp' I would be better merging my 3 different git repositories into a single larger one.
Are there any other ways of addressing this while using git-flow ?</p>
","1","2421226","0","0"
"16758476","537591","2013-05-26 10:47:22","6","7183","<git><git-flow>","How to clone a git-flow style git repository?","<p>I'm using a git repo using <a href=""http://nvie.com/posts/a-successful-git-branching-model/"">the git-flow branching model</a>. I have pushed it to a central repository. How can a new developer joining the project clone it?</p>

<p>Cloning the repository only gives the <code>master</code> branch. How can the new developer get the <code>develop</code> branch, as well as some feature branches of his choice?</p>
","2","537591","0","0"
"17853294","2545680","2013-07-25 08:51:49","4","726","<git><git-flow>","Implementing 'successful git branching model' step by step","<p>So I've started to implement <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">this model</a>.</p>

<p>I'm completely newbie to Git and software implementation process so I've listed everything I've done so far below. I need your help with some question that I've got and maybe some recommendations if you see that I don't understand something or move in the wrong direction. I believe that this could be a great help to others embarking on this path. So here is what I've done so far. I have the following structure of my website </p>

<pre><code>/var/www/mysite.com/
                kohana
                    kohana files
                www
                    index.php
                    other files 
</code></pre>

<p>To implement the model I've done the following:</p>

<ol>
<li><p>I initialized the repository to clone bare repository from and made initial commit:</p>

<pre><code>cd /var/www/mysite/
git init
git add .
git commit - 'initial commit'
</code></pre></li>
<li><p>I added shared user to place 'central repo' (shared bare repository) inside:</p>

<pre><code>- adduser git
- su git
- cd
</code></pre></li>
<li><p>I cloned repository to this user's folder. This will be the 'origin' repository.</p>

<pre><code>git clone --bare /var/www/mysite.com mysite.git;
cd mysite.git;
</code></pre></li>
<li><p>I added second main branch 'develop' and now there are two branches 'master':</p>

<pre><code>git branch develop;
git branch -a
    *master
    develop
</code></pre></li>
<li><p>I added users that will be developing the product:</p>

<pre><code>adduser maximus
adduser len4ik
</code></pre></li>
<li><p>I created ssh keys for them and put to .ssh directories:</p>

<pre><code>su maximus; 
mkdir .ssh;
cd ~/.ssh;
ssh-keygen -t rsa -C ""maximus@example.com"";
su len4ik; 
mkdir .ssh;
cd ~/.ssh;
ssh-keygen -t rsa -C ""len4ik@example.com"";
</code></pre></li>
<li><p>I created public repositories for each of them</p>

<pre><code>su maximus; cd;
git clone /home/git/mysite.git;
su len4ik; cd;
git clone /home/git/mysite.git;
</code></pre></li>
</ol>

<p>Now my developers will install TortoiseGit on Windows, set up ssh keys and pull from their public repositories to repositories created locally with TortoiseGit on Windows.</p>

<p>I have a few questions:</p>

<ol>
<li>At step 4 what branch should be selected? It's 'master' now, but do I need to switch it to 'develop' maybe?</li>
<li>I assume that users will be pushing to and pulling from their public repositories (<code>/home/user/mysite</code>). How their commits are going to end up in 'central repo' which is <code>/home/git/mysite.git</code> ?</li>
<li>How those users will be able to checkout branches and get updates from 'central repo'?</li>
<li>At what point do I need to create realease and feature branches? Do I need to create them on 'central repo' (<code>/home/git/mysite.git</code>)?</li>
</ol>
","2","2545680","0","0"
"34434751","433685","2015-12-23 11:32:25","0","724","<git><atlassian-sourcetree><git-flow>","Add custom rule to git flow","<p>I'd like to add some custom rules to my git flow enforce some important aspects of my workflow.</p>

<p>For example:</p>

<ul>
<li>each time a feature branch is merged into develop the changelog must be modified</li>
</ul>

<p>I'm using both command line git and <a href=""https://www.sourcetreeapp.com/"" rel=""nofollow"">SourceTree</a>, but any kind of solution could be available.</p>
","1","433685","",""
"34448849","1260778","2015-12-24 07:18:34","0","75","<git><maven><versioning><git-flow><jgitflow-maven-plugin>","How to work with git, maven and versioning correclty","<p>We are starting a first project with git (stash/bamboo). Before we used svn. We are building java projects with maven and have to maintain multiple staging environments before we go to production. And this is the difference to the examples I found on the web.</p>

<p>How do you use git together with maven and support multiple staging environments.
I think to use git together with maven the jgitflow plugin is nice. But there you cannot really support the staging environments. Everything I find is missing something to have a perfect integration of all our needs. But I think what we do is common for a lot of companies. </p>

<p>How do you do it?</p>
","2","1260778","0","0"
"17942522","6254","2013-07-30 08:57:54","7","1881","<git><jenkins><continuous-integration><git-flow>","How to build the latest git flow release branch in Jenkins?","<p>I'm trying to set up continuous integration in Jenkins for git flow style development. I thought I would create three jobs to build RPM packages: for master, develop and the latest release branch.</p>

<p>The problem is with the latest release branch, as I'm not sure it is possible to setup builds so that Jenkins polls my git repo, and only does a build if the change ocurrs in the latest release/* branch. Is it more usual for people to clone jobs and hardcore branch names or can what I intend be done?</p>
","0","6254","0","0"
"51085877","276128","2018-06-28 14:50:17","1","1558","<git><git-flow>","git flow release start when origin/develop is ahead of my local develop branch","<p>This happens to me from time to time; I want to create a release branch off of my develop branch, but I've already fetched the latest commits from origin (not merged the commits, just fetched them). My commit chain can look like this:</p>

<pre><code>a--b--c(develop, HEAD)--d(origin/develop)
</code></pre>

<p>I can view the ""d"" commit made by another developer and know that I don't want to include it in the new release, so I keep my repo checked out at the ""c"" commit and try to create a release branch. What I want is:</p>

<pre><code>a--b--c(develop)--d(origin/develop)
       \
        --e(release/1.1,HEAD)
</code></pre>

<p>But when I run <code>git flow release start 1.1</code>, it fails:</p>

<blockquote>
<pre><code>Branches 'develop' and 'origin/develop' have diverged.
Fatal: And branch 'develop' may be fast-forwarded.
</code></pre>
</blockquote>

<p>As far as I can tell I can't force the <code>git flow release start</code> to <a href=""https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-git-flow-release"" rel=""nofollow noreferrer"">create the release branch</a>, or target which commit to use as the base for the release branch. What are my options here?</p>

<p>Thanks,
Dan</p>
","0","276128","",""
"23723461","1574376","2014-05-18 15:15:46","9","5978","<git><git-flow>","How can I share a git configuration?","<p>I've initiated a new git repository using <code>git flow</code>, done a commit or two and pushed.</p>

<p>When I clone the repository in a new directory and run a <code>git flow</code> command I get the error:</p>

<pre><code>Fatal: Not a gitflow-enabled repo yet. Please run 'git flow init' first.
</code></pre>

<p>The reason for the error is that the <code>.git/config</code> file in the newly cloned directory doesn't contain the git flow configuration.</p>

<p><strong>How can I push/share the configuration so any clone of the repository will have the correct configuration?</strong></p>
","1","1574376","0","0"
"23790434","3004931","2014-05-21 17:49:50","0","1713","<git><workflow><git-flow>","Exclude file/folder form a release merge using git-flow","<p>I was wondering if there is any way to exclude a file/folder from develop to master branch merge when I finish a release using git-flow?</p>

<p>Example: I have index.html and Gruntfile.js on develop branch and I only want the index.html to be merge on the master branch.</p>

<p>I'm asking this because I have a dev folder on my develop branch that include files which are not necessary for the master branch (like gruntfile.js, scss file, etc) so I would prefer not to include it.</p>

<p>Any suggestions?</p>
","3","3004931","0","0"
"61300411","8701788","2020-04-19 06:28:27","0","53","<git><github><gitlab><analytics><git-flow>","is there a way to programmatically determine if a repository is following gitflow?","<p>so I'm working on a project that analyzes GitLab repositories, the task that is assigned to me right now is to find a way to determine if a GitLab repo is following Gitflow principles! I've looked on the web and it doesn't seem like there is a naming convention for the branches or a certain config or anything, should I try for example to analyze the repo activity to see if it resembles Gitflow or not? is there a better way to do so? thanks :)</p>
","2","8701788","",""
"42813634","706354","2017-03-15 15:08:45","0","611","<git><maven><git-flow><jgitflow-maven-plugin>","jgitflow and parallel releases while using GitFlow","<p>I am using jgitflow Maven plugin to make releases according to GitFlow. This works fine. Problems appear when my release is delayed, so I have to make 2 releases simultaneously.</p>

<p>Lets consider an example.</p>

<p>According to GitFlow I have to commit my production state to master branch. Thus I merge 1.0, 1.1, 1.2 releases to master.
Someday 2.0 release is started. I need to make 2.0 release committed to master. But what if 1.xx is still not finished?</p>

<p>Committing 1.xx after 2.0 looks like a bad practise and probably will result in merge conflicts. </p>

<p>So my idea is to</p>

<ol>
<li><p>create fake dev branch for 1.xx branched from last 1.xx release. Lets call it 1.11dev</p></li>
<li><p>run 1.xx jgitflow releases from that branch and merge them no longer to master, but to fake master branch created from last 1.xx release again, lets call it 1.11master</p></li>
<li><p>run 2.xx releases from master branch and merge them normally to master.</p></li>
</ol>

<p>This means my master branch will contain only part of 1.xx releases. Which is not good.
Also this means I have to merge fixes from 1.xxdev to 'true' dev separately.</p>

<p>Is my understanding correct?
Is there a better way?</p>
","0","706354","",""
"24107958","2755628","2014-06-08 15:56:11","3","276","<java><jboss><continuous-integration><git-flow>","Continuous integration - git flow","<p>I'm really nooby in 'Continuous integration'. And have a question about it.
Is it possible to create jar, ear or war file and deploy it on jboss every time I merge my develop branch (release) with master branch. I user gradle for build my project. I prefer something without user interface. My server runs on ubuntu server.</p>
","0","2755628","",""
"42869160","388916","2017-03-18 00:42:41","1","356","<git><git-flow>","Can I make git-flow use normal tags (not annotated tags)?","<p>When I finish a release I'm prompted for a commit message, then a message for the tag. I don't put messages in my tags (at least not in my release tags) so I leave it empty. The result is that no tag is created, and I have to create it manually, e.g.:</p>

<pre><code>git tag v1.15.3 master
</code></pre>

<h3>How can I tell git-flow not to use annotated tags?</h3>

<hr>

<p>I'm not interested in working around this by just putting something in the tag message. Annotated tags are for associating information with a tag. Using them in place of normal tags will drive me crazy.</p>
","0","388916","",""
"5531886","167916","2011-04-03 19:26:43","28","10659","<git><workflow><git-flow>","Who is successfully using git-flow?","<p>Are any large software projects using <a href=""https://github.com/nvie/gitflow"" rel=""noreferrer"">git-flow</a> and, if so, how is it going?</p>

<p>(See <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">http://nvie.com/posts/a-successful-git-branching-model/</a> and <a href=""http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/"" rel=""noreferrer"">http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/</a>)</p>
","5","167916","0","0"
"60902674","","2020-03-28 15:24:40","3","99","<git><gitlab><git-branch><branching-and-merging><git-flow>","how does branching works , using the gitflow workflow?","<p>I am working on a project and we are using gitflow workflow. Basically I am just new to gitflow workflow , I have just a question.</p>

<p>There were two branches from the repository which is the master and the development branch . I checked out the development remote branch since This branch will contain the complete history of the project.</p>

<p>Now I wanted to get the updates from the team the latest one ,should I pull it from the master branch ? or in the development branch ?</p>

<p>Another thing if i push my changes , should i push my changes on origin/master ? or origin development ?</p>

<p>By the way all of us developers checked out the development branch remotely. using the command
git checkout -b development origin/development</p>

<p>Bear with me just new to git workflow. Thank you.</p>
","0","","0","0"
"61125731","10515716","2020-04-09 16:23:49","1","361","<git><git-branch><git-flow>","Where is the best branch where install new package on git?","<p>I'm start using on a self-project git-flow, but I have got a doubt to do a good practise on it when I have two principal branch like  <strong><code>master</code></strong> and <strong><code>develop</code></strong>.</p>

<p><strong>Is it more correct to install the package on a new branch called e.g <em><code>FEATURE install react-redux</code></em>?</strong></p>

<p>Thanks in advance!</p>
","0","10515716","",""
"61243381","3007714","2020-04-16 05:36:33","1","136","<git><git-flow><git-config><gitkraken>","What is Gitkraken's default git-config esp. for gitflow","<p>Gitkraken does not follow the default Git settings. When I use <em>git</em> and <em>git flow</em> from the command line, the operations taken are different from what Gitkraken performs.  On the command line, doing <code>git merge</code> by default does a fast forward.  Gitkraken does not fast-forward when merging.  When using <em>git flow</em> from the command line, finishing a feature also does a fast forward by default.  When finishing a hotfix, if <em>nobackmerge</em> is false and <em>notag</em> is true, gitflow will merge master into develop, which seems at odds with the git flow workflow.  This does not happen in Gitkraken when a hotfix is not tagged.  I looked through Gitkran's <em>.gitkraken</em> directory and could not find any git settings.  I also looked in the <em>.gitconfig</em> directories where I used Gitkraken, hoping to find what settings it uses.  It appears Gitkraken passes built-in default arguments to the git commands that it runs without disclosing it, and ignoring any user Git settings. So far, by using <em>git flow</em> on the command line and Gitkraken in separate directories, and then looking at the <em>git reflog</em>, I've been able to find that these settings are being emulated:</p>

<pre><code>[merge]
    ff = false
[pull]
    ff = true
[gitflow]
    multi-hotfix = true
[gitflow ""hotfix.finish""]
    nobackmerge = true
    no-ff = true
[gitflow ""feature.finish""]
    no-ff = true
</code></pre>

<p>These options are selected interactively</p>

<pre><code>[gitflow ""hotfix.finish""]
    notag = true|false
    keep = true|false
[gitflow ""feature.finish""]
    notag = true|false
    keep = true|false
</code></pre>

<p>I am trying to set up .gitconfig so that command line Git's default behavior approximates Gitkraken's behavior.</p>
","0","3007714","",""
"5837921","187018","2011-04-29 22:11:35","16","25847","<git><git-branch><git-flow>","git-flow: how to checkout release branch from origin?","<p>What is the perferred workflow to pull a published release branch from the central repo using <a href=""https://github.com/nvie/gitflow"" rel=""noreferrer"">git-flow</a>?</p>

<p>eg:<br>
Mike made a release branch, he published it through ""git flow release publish 1.0""<br>
Jane would like to work on that release branch too, how does she pull it from the central repo to continue working with git flow on that particular branch?</p>

<ul>
<li>create the branch herself locally through <code>git flow release start 1.0</code> and then <code>git pull</code>?</li>
<li>create a tracking branch locally through git with <code>git checkout -b release/1.0 origin/release/1.0</code> and continue from there (does git flow work on the branch this way?)</li>
</ul>
","0","187018","0","0"
"43351496","3201592","2017-04-11 16:29:01","-1","685","<git><teamcity><git-flow><feature-branch>","Creating git feature branch using teamcity","<p>I want to create git feature branch using teamcity and also merge it to dev using teamcity. Is it possible and how? </p>
","0","3201592","0","0"
"24970485","1068746","2014-07-26 11:21:22","1","709","<git><git-flow>","gitflow - how to merge to master and keep dependencies working?","<p>I have a project with 2 repositories. Repository 1 depends on repository 2 using git urls. </p>

<p>We are using gitflow, but we don't understand how to do a release that works. </p>

<p>Our dependency between repository1 and repository2 is pointing to develop branch, and once we release, all the code moves to master branch, but the dependency is still looking at develop branch!</p>

<p>On the other hand, we cannot have the dependency looking at master branch all the time too.. </p>

<p>It seems as if we need to make a change in the code when releasing, one that will change the dependency url, but that is against git flow as <a href=""https://stackoverflow.com/a/23491475/1068746"">master should not have commits that are not merges</a></p>

<p>What are we doing wrong and how can we achieve a proper release?</p>

<h2>Example</h2>

<p>2 teams working on different git repositories for nodejs projects. </p>

<p>One team is dependent on the other, so in order to get all their latest changes every day, they write the following npm dependency</p>

<pre><code>""otherTeam"": ""git://github.com/sameProject/otherTeam.git#develop"",
</code></pre>

<p>see the develop at the end of the dependency url? </p>

<p>at the end of development, this should be master - the a tag name. </p>

<p>How can I achieve that without making commits directly to master during the release time? </p>

<h2>Different Release Cycle</h2>

<p>Thank you @Graham for this comment. </p>

<p>If I understand correctly - you suggest to release component1, and then update dependency version continuously on component2 to point to the new realse for 1. Then component1 should stop development for current version at some point - which means component2 does not need to update dependency anymore, and then component2 will eventually reach end of version and then we can release the entire product. </p>

<p>correct me if I misunderstood you. </p>

<p>This solution was raised in the company, but concerns were raised about this procedure not being automatic enough. The company wants all the components to be built together, have the same version etc... </p>
","3","1068746","",""
"43616033","2306363","2017-04-25 16:19:08","1","245","<git><git-flow><smartgit>","Start new feature with existing name using Smartgit","<p>When using GitFlow with SourceTree I was able to start a new feature using a name that was once a feature. But using SmartGit it restricts me from doing that.</p>

<p><a href=""https://i.stack.imgur.com/Gz9Od.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Gz9Od.png"" alt=""SmartGit restriction""></a></p>

<p>Is there a possible configuration flag I can alter so it will allow that or is this definitely not possible? </p>
","2","2306363","",""
"25074210","551273","2014-08-01 06:33:11","1","262","<git><git-merge><git-flow><git-log>","How to show all logs including the merged branches in git-flow","<p>I took <code>git-flow</code> to do my work,</p>

<p>But I wonder how to see the merged-branch logs after I merged the branch.</p>

<p>for example, when I finished the branch <code>feature/support_vadp</code></p>

<p>I can no see the logs in that branch anymore.</p>

<pre><code>584c054 - (HEAD, hotfix/fix_duplicated_partial_only_items) Ignore: experimental seeding files (24 minutes ago) &lt;poc7667&gt;
bbaffaf - (master) Merge branch 'develop' (31 minutes ago) &lt;poc7667&gt;
7bc6c17 - (develop) Merge branch 'feature/support_vadp' into develop (37 minutes ago) &lt;poc7667&gt;
</code></pre>

<p><img src=""https://i.stack.imgur.com/uDzhf.png"" alt=""enter image description here""></p>
","0","551273","0","0"
"62397784","990106","2020-06-15 22:07:11","1","991","<git><bitbucket><git-flow>","Master and develop branch never synced even follow git-flow process in bitbucket","<p>I am following git-flow branching model with my repo hosted on Bitbucket Cloud.</p>

<ul>
<li>contributions are done to <code>feature</code> branches (branched out from <code>develop</code>) which are merged into <code>develop</code> branch via PRs</li>
<li>when a release is needed:

<ol>
<li>create a <code>release</code> branch from latest <code>develop</code>;</li>
<li>merge <code>master</code> into <code>release</code>; <strong>(I will have to perform this step as explained later)</strong></li>
<li>increase version number;</li>
<li>merge <code>release</code> into <code>master</code> via PR.</li>
</ol></li>
<li>when a hotfix is needed:

<ol>
<li>create a <code>hotfix</code> branch from latest <code>master</code>;</li>
<li>increase patch version number</li>
<li>merge <code>hotfix</code> into <code>master</code> via PR.</li>
</ol></li>
<li>when a hotfix is done:

<ol>
<li>create a <code>bugfix</code> branch from latest <code>master</code>;</li>
<li>resolve a lot of conflicts;</li>
<li>merge <code>bugfix</code> back into <code>develop</code> via PR.</li>
</ol></li>
</ul>

<p>I have been following the above procedures strictly. However, the <code>master</code> and <code>develop</code> are never synced, even right after a release, the indicator on Bitbucket Cloud branches page tells me the <code>master</code> branch is ""99 commits behind develop"" and ""11 commits ahead of develop"".</p>

<p>Every time when doing a release, Bitbucket Cloud always tells me that the two branches are not in-sync (even I have not done any changes to the <code>master</code> branch after the previous release), hence I have to perform step 2 of the release procedures above. This step becomes harder and harder as it keeps adding back files that has been removed from <code>develop</code> (and should have been removed from <code>master</code> as well) during the merge process.</p>

<p>I'm not sure what I have done wrong. Can anyone suggest?</p>
","12","990106","",""
"52009903","3130371","2018-08-24 18:23:19","1","358","<git><push><git-push><git-flow>","git push ""src refspec refs/heads/feature/a-feature-branch does not match any""","<p>After a git flow command for finishing a feature branch <strong>git flow feature finish a-feature-branch</strong>, the <strong>git push -v</strong> command always gives me the following error msg, no matter the branch I am.</p>

<pre><code>Pushing to git@github.com:/repo/repo.git
error: src refspec refs/heads/feature/a-feature-branch does not match any.
error: failed to push some refs to 'git@github.com:/repo/repo.git'
</code></pre>

<p>Everything worked fine with the finish feature command, so it does not seems to be a problem with <strong>git flow</strong>.</p>

<p>If I manually sets the remote and branch name, it works, eg.:</p>

<pre><code>git push origin develop
</code></pre>

<p>It seems like git push is trying to push the deleted branch, like something is dirty with it's references. I've searched and tried a lot of things, but it seems that this old reference never give up.</p>

<p>It's not a new repository and every branch I'm trying to commit exists on remote. Past <strong>push</strong> and <strong>feature finish</strong> commands worked fine. The same thing happened with two other computers.</p>
","4","3130371","0","0"
"43955915","7823311","2017-05-13 17:19:09","0","924","<git><git-flow>","How should your project's very first commits/branches look like in git flow","<p>Almost all instruction and examples I was able to search about workflow says that I should start with a feature branch. But this isn't clear to me if it is applicable in the earliest stages of a project, leaving me with questions like:</p>

<ul>
<li>should my minimum viable product, or all work that is needed to create the first release-able product, be encapsulated in a single feature?</li>
<li>if so, is it really alright for it to include the setup of development environment (e.g. bundling, test environment) that aren't actually specific to that feature alone?</li>
</ul>
","2","7823311","0","0"
"35989039","1245911","2016-03-14 13:36:21","0","221","<git><maven><git-flow><archiva>","Maven gitflow repository versioning","<p>I am pretty new to using Maven, coming from a heavy ant background. I have been trying to figure out the ""correct"" way to handle how my Companies projects and release process works in Maven, but haven't really been able to get a straight answer. </p>

<p>We have our projects as a couple of core shared libraries, with the applications they process. So let's say:</p>

<pre><code>Library A -- produces library-a.jar
Library B -- produces library-b.jar
Project C -- produces project-c.war
</code></pre>

<p>We use a common gitflow feature branching methodology. To make my question make more sense I'm going to give an example workflow during a release. Let's say we are working on 2 tickets (at the same time).</p>

<pre><code>Ticket A (feature/A-Some-New-Thing).
&gt;&gt; Requires changes to Library A and Project C
Ticket B (feature/B-Some-Other-New-Thing).
&gt;&gt; Only requires changes to Project C
</code></pre>

<p>where each of the projects look like:</p>

<pre><code>- master
|- develop
 |- feature/A-Some-New-Thing
 |- feature/B-Some-Other-New-Thing
</code></pre>

<p>Where multiple features for the next release will be built on the branch. More often than not feature/A-Some-New-Thing will exist in both the Library A and Project C repositories. What is the best way to set up maven / external repository (we are looking at Archiva) to be able to have feature/A build using the Library A snapshot and the Project C snapshot, but having Project C use the latest from develop when building (last release, not the current snapshot).</p>

<p>The complete end goal is to have this working in a CI environment (bamboo) figuring out the proper dependency to build and test against</p>
","3","1245911","",""
"36024169","3657747","2016-03-15 23:26:24","2","844","<git><git-flow>","fetching a branch created with gitflow?","<p>I created a feature branch using SourceTree and git flow (pressing buttons). Then I tried to clone these branches into another local copy of the repo, but I cannot get these branches locally anymore. For instance if I issue:</p>

<p>git branch -v -a, I see this:</p>

<pre><code>gmmo@DESKTOP-GIMBJM0 MINGW64 /C/Dogwood (develop)
$ git branch -v -a
* develop                         de5e2f2 Updated to Build 4.1.6.37
  master                          0aa9613 Release 4.1.6.37
  remotes/origin/HEAD             -&gt; origin/master
  remotes/origin/develop          de5e2f2 Updated to Build 4.1.6.37
  remotes/origin/feature/cleanups ef035e9 Added alert dialog
  remotes/origin/master           0aa9613 Release 4.1.6.37
</code></pre>

<p>so the remotes/* were created by git flow. I only created develop and master manually</p>

<p>but how do I clone all the remotes back to my local drive easily?</p>

<p>I tried</p>

<pre><code>git fetch
</code></pre>

<p>but not sure what it did, since if I issue</p>

<pre><code>git branch
</code></pre>

<p>I only see on my drive the two main branches.</p>

<pre><code>* develop
  master
gmmo@DESKTOP-GIMBJM0 MINGW64 /C/Dogwood (develop)
</code></pre>

<p>Is there an easy way to clone all these branches, without re-cloning the entire repo?</p>

<p>thx!</p>
","1","3657747","",""
"62893913","245748","2020-07-14 11:15:38","2","2137","<azure-devops><yaml><azure-pipelines><git-flow>","How to update only the pipeline in Azure Devops when using YAML pipelines and gitflow?","<p>We're currently using the Classic Azure Pipelines (both build and release pipelines). They work well because if we need to make a change to a pipeline, it's easy just to modify the pipeline and schedule a build from the UI.</p>
<p>Now Microsoft is pushing the YAML pipelines and infrastructure-as-code so we're planning on using the YAML and multi-stage pipelines on our next project.</p>
<p>I haven't found a way to update only the pipeline now when the configuration is within source control. For example, say a pipeline for <em>test</em> environment breaks for some reason, and I need to fix it by making changes only to the YAML configuration. Would I make a change to a <code>Release</code> branch only and then merge it back to <code>develop</code> branch?</p>
<p>We used to have dedicated Build Pipeline and dedicated Release Pipeline in the Classic mode, so that a Build pipeline would create a package regardless of the branch it was triggered on. Then the Release Pipeline would be triggered and it would check the branch where the build artifact is coming from and deploy the package using the corresponding configuration.</p>
<p><a href=""https://i.stack.imgur.com/2MZUI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2MZUI.png"" alt=""Release Pipeline (classic)"" /></a></p>
<p>This gave us a lot of flexibility so that we could deploy versions automatically and manually whenever and where ever we wanted. I'm not seeing any benefit gained from a YAML pipeline.</p>
<p>For example we could make a production build (<code>master</code> branch) and use that build in a test environment to try to reproduce errors.</p>
<p>How would this work with YAML pipelines when I cannot just modify only the pipeline but have to take all changes that are coming from a development branch? Is it possible (or feasible) to use only YAML build pipelines and use the classic release pipeline?</p>
","3","245748","0","0"
"44470093","1381710","2017-06-10 05:58:56","17","7986","<git><git-flow>","Handle git branching for test and production","<p>When working with git (flow) and having a stage/test environment where the customer are doing their reviews of the things developed what is the best way of handling features that aren't approved along with features that are? </p>

<p>Consider the scenario that several developers working with different features in a sprint or in a continuous workflow. The features need to be reviewed by the customer and for the features to be able to be reviewed in the stage environment they have to be merged into the dev branch and deployed. </p>

<p>If, let's say, two features have been developed, considered done by the development team and been pushed to dev. The customer reviews them and approves ONE of them. But now the customer wants to release the approved feature to production. The dev branch is now ""polluted"" by a not approved feature code that can not be pushed to production. </p>

<p>What is the best way to handle such a scenario? Of course in reality it's more complex. Is cherry picking a solution or should the overall process and handling of branches be reconsidered? </p>
","2","1381710","0","0"
"63129442","1158595","2020-07-28 07:55:02","2","240","<git><atlassian-sourcetree><git-flow>","New to git, why I see my changes on develop branch even if I stage them on feature branch?","<p>I'm new to git.</p>
<p>I'm following the git-flow branching model so I have the branches master and develop and every time I need a new feature I open a new feature branch.</p>
<p>I did some changes to a couple of files in the feature branch and I staged them, not committed yet since the changes are not tested yet:</p>
<pre><code>$ git status
On branch feature/ParamConfigFaultCollection
Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
        modified:   IOLSE_User_Objs.h
        modified:   data.c
</code></pre>
<p>Now I need to work on the branch develop, so I switch to it, I use Sourcetree as git GUI and I double click on develop:
<a href=""https://i.stack.imgur.com/ArPkN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ArPkN.png"" alt=""enter image description here"" /></a></p>
<p>and I was expecting that the changes in the stashed files on feature branch would not be visible to develop, but it seems that the changes are present in develop too:</p>
<pre><code>$ git status
On branch develop
Your branch is up to date with 'origin/develop'.

Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
        modified:   IOLSE_User_Objs.h
        modified:   data.c
</code></pre>
<p>What am I doing wrong?</p>
","0","1158595","",""
"7785455","559492","2011-10-16 15:57:27","3","3172","<git><hudson><jenkins><git-flow>","How can I setup hudson (or jenkins) build from release/hotfix branches using the git-flow branching model?","<p>My company is switching from svn to git and I am researching various branching models.  The one I like the most so far is <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">git-flow</a> but I have one major unresolved issue with it.</p>

<p>We use hudson (soon to be jenkins) for our CI server.  There are 5 applications, with 3 environments each: development, qa, and production.  With git-flow, it would be obvious to point the development build to the ""develop"" branch and the production build to the ""master"" branch, but what is the best way to go about setting things up so that we can easily redirect the qa environment to the latest hotfix or release branch if one exists, or develop if not.  We currently just update the jenkins jobs manually, but its a pain (and error prone) to manually change 5 jobs.</p>

<p>Some things I've considered:</p>

<ol>
<li><p>Adding a qa branch and merging into it from release/hotfix branches.  This is a non-starter because we'd have to remember to merge into the qa branch anytime we make a change to release/hotfix and that gets old fast.</p></li>
<li><p>Creating a symbolic-ref ""refs/heads/qa"" and just updating it to point to whatever we want QA to test.  This is better than above, but doesn't work because we would need to update the sym-ref on our git server, and normal developers don't have permissions to do so.</p></li>
</ol>

<p>So far, neither of these options seem viable to me, are there some other options I am missing?  Thanks.</p>
","0","559492","",""
"36287615","4965552","2016-03-29 14:44:25","0","85","<git><github><git-flow>","In github gitflow workflow how to forbid team member to push to central repo master branch?","<p>In my team , we admit the gitflow workflow.</p>

<p>It works well but has one issue here:
Everyone can push to central repository's master branch.</p>

<p>I want to setup a policy:<br>
People can not push to central repo master branch, they can only launch a 
pull request in github and request the project maintainer to merge their code into master branch if approved by project manager. </p>

<p>How to implement that policy?</p>
","0","4965552","",""
"36296387","1956558","2016-03-29 22:40:22","3","1396","<git><git-flow>","is it posible to merge feature to release with git flow","<p>I'm using gitflow and Sourcetree.</p>

<p>By default, Sourcetree make me merge Feature to Develop, Develop to Release, and Release to Prod</p>

<p>Thing is sometimes, one merge Feature to Develop, and it fails, so it needs more work.</p>

<p>Then, If someone, want to make a release, git flow will merge those errors to Release.</p>

<p>I would prefer to merge the only Feature that has been validated to release.</p>

<p>Is it posible to do that with git flow?</p>
","2","1956558","0","0"
"62512387","1029469","2020-06-22 10:30:32","0","126","<git><github><branch><git-flow>","git: rename master to release, after having used git-flow for a while","<p>I want to change my <code>master</code> branch to <code>release</code>, both locally and remote (on github). I know there is a question exactly for this, here an stackoverflow. My case is different, I've used <code>git-flow</code>, and there seems some cruft on github/in the git...as:</p>
<pre><code>git branch -m master release
</code></pre>
<p>works like a charm. but then:</p>
<pre><code>git push -u origin release
</code></pre>
<p>gets me a</p>
<pre><code>Total 0 (delta 0), reused 0 (delta 0)
To github.com:benzkji/django-painless-redirects.git
 ! [remote rejected] release -&gt; release (cannot lock ref 'refs/heads/release': 'refs/heads/release/0.3.5' exists; cannot crea 'refs/heads/release')
</code></pre>
<p>As far as I can tell, either this was by my bad (pushing a release branch created by <code>git-flow</code> to github, somewhen in the past), or this is by design, because the tag <code>0.3.5</code> was on the <code>release</code> branch...anyway, I dont know a way to solve this (rename an already deleted branch?! woot)</p>
<p>Maybe important: <code>master</code> is currently not the default branch on github, this is <code>develop</code>.</p>
<p>Credits - I've got the two basic lines from Scott: <a href=""https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx"" rel=""nofollow noreferrer"">https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx</a></p>
","5","1029469","",""
"43860463","25847","2017-05-09 03:14:30","8","4224","<git><pull-request><git-flow>","Is there a gitflow process for branching and bug fixes with a release branch?","<p>In order to have make sure all code eventually goes through pull request code review, we've started creating branches for features and bug branches off of develop following the <a href=""https://datasift.github.io/gitflow/IntroducingGitFlow.html"" rel=""noreferrer""><strong>git-flow</strong> style</a>.  </p>

<p>The only problem is that once a bug is found in a release branch, we often have to make a branch off of the release branch in order to do a pull request back to the release branch.  But there doesn't seem to be an obvious git-flow process for handling branches off of the release branch when bug fixing a release branch.</p>

<p>What is the git-flow process for fixing release branch bugs and code review?</p>

<p>Are you supposed to fix the bug in develop and create a new release branch? 
Is branching off of a release branch still valid git-flow?
What's the best way to handle pull request code reviews on release branch bug fixes?</p>
","0","25847","0","0"
"62791900","2560685","2020-07-08 09:40:03","0","71","<git><git-flow><git-workflow>","which git worklfow is this?(Tag on master and hotfix-branch)","<p>in my previous job we  followed a git workflow who seem perfect:</p>
<ul>
<li><p>we had feature branch and a master like usual</p>
</li>
<li><p>each time we want to deliver we put a tag on the master with a major version name, then deploy the tag on our test env, then preprod, then prod.</p>
</li>
<li><p>If there was an issue in the tagged version we make an hotfix branch out of it, then create a new tag (with a minor version) of it, who will be deployed, and merge/cherrypick the &quot;hotfix branch&quot; into the master.</p>
</li>
<li><p>Basicaly, major version tag are on the master, while hotfix version tag are on the hotfix branch.</p>
</li>
</ul>
<p><strong>what is the name of this workflow ?</strong></p>
<p>I want to re-use it on my new mission, but I don't know how it's called and I need doc in order to convince my new team.</p>
","0","2560685","",""
"25796856","1095118","2014-09-11 21:00:07","0","218","<git><git-flow>","Merge multiple commits by different authors while maintaining author details in git blame","<p>Is there a way to merge several commits by different authors with Git.</p>
<p>So that a commit is used per feature that still allows others to see who wrote the each line of code.</p>
<p>Will using a tool like git-flow help facilitate this ?</p>
<p>ie;</p>
<h3>branch <em>NewFeature10</em></h3>
<ul>
<li>feature UI</li>
<li>feature Backend</li>
<li>feature Admin</li>
<li>feature AdminBackend</li>
</ul>
<p>squash and merge these commits to master so master follows</p>
<h3>branch <em>master</em></h3>
<ul>
<li>NewFeature10</li>
<li>NewFeature9</li>
<li>NewFeature8</li>
<li>...</li>
</ul>
","0","1095118","",""
"63270657","2940515","2020-08-05 17:38:44","1","169","<git-flow>","Please point out the disadvantage of my git flow","<p><a href=""https://i.stack.imgur.com/qZGF9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qZGF9.png"" alt=""enter image description here"" /></a></p>
<p>Hi guys! I'm new to git so this is something that keeps concerning me till now ...</p>
<p>As you guys already knew, below is the most popular git flow. But to me sometimes, I did have some problem with creating new feature branch from develop branch. Because if someone before me, who already committed and merged something bad into develop branch and after that, without knowing I create a new branch base on it, then I will work on a branch with potentially broken, right ?</p>
<p>Then in my new team, I saw a git flow like this:</p>
<ul>
<li><p>Every feature branch is created from master</p>
</li>
<li><p>When a feature is complete it is merged into the develop branch (testing env)</p>
</li>
</ul>
<p>If tester sees there's no problem with develop branch then:</p>
<ul>
<li><p>A release branch is created from master</p>
</li>
<li><p>Merge all the completed feature into the release branch. (and test 1 more time on STG env)</p>
</li>
<li><p>No need to merge back release branch into develop branch. If there's any problem, fix it on feature branch and merge it into develop branch (test again) and if it's ok, merge it into release branch.</p>
</li>
<li><p>Merge release branch into master.</p>
</li>
</ul>
<p>Doing it this way ensures that every time a new feature branch creates, it have already gone through 2 phase of testing or so I think...</p>
<p>Please give me advice on this one, is it good or not ? Or is there any disadvantage that I dont know. My new team has been working on this git flow for few years and there's no problem until now. But when I suggest it to my friend, they don't like the idea saying that I should have followed the popular one... I'm kinda confused right now. Thank you very much.</p>
","0","2940515","",""
"44649082","834219","2017-06-20 09:28:05","1","663","<git><git-flow>","Why does git flow release finish merge the tag onto develop as the last step","<p>I am trying to finish a release using git flow but am running into some strange issues. 
When i do a <code>git flow release finish -m ""msg"" &lt;release_version&gt;</code> it updates all branches fine but it does an additional step of merging the tag onto develop.</p>

<p>I used the following commands to replicate the scenario using plain git.</p>

<ol>
<li>git checkout master</li>
<li>git merge --no-ff release/1.2.0</li>
<li>git tag -a 1.2.0</li>
<li>git checkout develop</li>
<li>git merge --no-ff release/1.2.0</li>
<li>git branch -d release/1.2.0</li>
<li>git checkout master</li>
</ol>

<p>At the end of these commands i see everything is updated fine. 
However when i add a command <code>git merge [tag_name]</code> i land up in the same state as i do when doing the git flow.</p>

<p>I do have one machine where i do not see this problem. 
The only difference is i have git for 32 bit installed on that one.
All the ones that have git for 64 bit show the same error.</p>
","1","834219","0","0"
"8579056","663957","2011-12-20 16:59:23","22","14576","<git><version-control><git-flow><branching-strategy>","Multiple development branches with git-flow","<p>I am currently looking a lot into git-flow, and trying to figure out, how to use it for the projects I am involved on.</p>

<p>I have looked at the various git-flow tutorials and I am fairly familiar with git. Hence I do not need any tips on git alone, but directly on the workflow with git-flow.</p>

<p>Here is the situation:</p>

<p>When I relase a version (let's call it 1.0), this get's branched of develop, which is fine. Let's say now I start working on 2.0, adding new features. And of course I want to merge them back onto develop, once I am done. Now hotfixing on 1.0 is fine, so let's also say I produce several versions 1.0.1, 1.0.2 etc. All these will also update the develop branch, which is also nice. So far now hassle, I can develop features for 2.0 and hotfixes for 1.0.x independtly.</p>

<p>However let's say someone requests a new feature for a 1.1 release. Now I have a problem. If I create a feature branch, this will be based upon the develop branch, which might already contain 2.0 stuff, which I might not want in this 1.1 release.</p>

<p>Is there a simple way, to handle these 2.0 and 1.1 changes independtly? </p>

<p>There are several possibilities I see already:</p>

<ul>
<li><p>create a new branch at the last release position on develop. Rebase the develop onto this position and rename the other develop branch. However then this branch would not contain any hotfixes from 1.0.1 etc.</p></li>
<li><p>Do not merge back features for 2.0 before 2.0 is done. However then I would have to leave a lot of unmerged changes open until the last moment. Also this does not help, if 2.0 get's released and afterwards changes to 1.0.x are requested.</p></li>
</ul>

<p>Is this possible at all with git flow? I.e. basing releases upon an earlier release once the work for a newer release has been started or even finished?</p>
","2","663957","0","0"
"8581609","1108614","2011-12-20 20:33:36","54","17312","<git><git-flow>","git flow - how do I pause development on one feature to work on another","<p>I'm new to git and git flow. I've read all the various pages, blogs, and stackoverflow questions on it,and have been using it in my daily development.</p>

<p>But one issue has been bothering me, I just can't wrap my head around it. I know feature branches are supposed to be small, you start a feature, code a part of it, then finish the feature. This is a daily occurence, I get that. We just make sure that our develop branch is always buildable.</p>

<p>But what happens when I'm in the middle of a feature, it isn't ready to be finished, but work priorities change? I'd like to be able to switch to another feature. </p>

<p>For example, I start a new feature.</p>

<pre><code>$ git flow feature start yak-Speedup
</code></pre>

<p>I write code, commit files, etc... and am making good progress on it. But now I need to change what I am working on, mostly like because I need a resource that isn't available and the server coder won't have it ready for a day or two. I can't finish the feature because it will break the develop branch.</p>

<p>I'd like to do something like this:</p>

<pre><code>$ git flow feature pause yak-Speedup
$ git flow feature start alpaca-Sheering
#write code
$ git flow feature finish alpaca-Sheering
$ git flow feature resume yak-Speedup
</code></pre>

<p>Indeed, the existence of the ""git flow feature list"" command implies that I can have several features going at the same time. But I don't see how to create or switch between features. Indeed, I'm starting to think that this isn't a git flow issue at all, but a git issue.</p>

<p>I appreciate any help. Thanks!</p>
","0","1108614","0","0"
"8496358","210481","2011-12-13 21:24:28","7","26984","<git><git-branch><git-flow><remote-branch><feature-branch>","How to share a git feature (or topic) branch with multiple developers","<p>I'm following the the workflow described <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">here</a>, as I found many references pointing to this page as a good workflow. As mentioned in the article, ""feature"" branches are shared between developers, but do not go to the central repository. </p>

<p>Let's say a developer ""A"" starts a new feature branch with <code>git checkout -b newfeature develop</code>. Now let's say that developer ""B"" needs also to work on this feature. This is my problem.</p>

<p>What I did:</p>

<ol>
<li>developer ""B"" adds developer A's machine as a remote</li>
<li>developer ""B"" runs <code>git branch remoteA/newfeature</code></li>
<li>developer ""B"" works on this branch, commit his work and pushes the changes back to remoteA. </li>
</ol>

<p>Step 3 is not working, right now. I get a message:</p>

<blockquote>
  <p>remote: error: By default, updating the current branch in a non-bare
  repository is denied, because it will make the index and work tree
  inconsistent with what you pushed, and will require 'git reset --hard'
  to match the work tree to HEAD. </p>
  
  <p>remote: error: You can set 'receive.denyCurrentBranch' configuration
  variable to 'ignore' or 'warn' in the remote repository to allow
  pushing into its current branch; however, this is not recommended
  unless you arranged to update its work tree to match what you pushed
  in some  other way. </p>
  
  <p>remote: error:  To squelch this message and still keep the default
  behaviour, set receive.denyCurrentBranch' configuration variable to
  'refuse'.</p>
</blockquote>

<p>I have already set <code>sharedRepository = true</code>, but it did not help.</p>

<p>I have 2 questions:</p>

<ol>
<li>what's the correct way to share feature branches between developers?</li>
<li>how can I push back the changes in developer B's repository to developer A's original one?</li>
</ol>
","1","210481","0","0"
"52428196","10309342","2018-09-20 15:06:17","9","700","<git><version-control><git-rebase><git-flow><git-cherry-pick>","Which git workflow to use for both product development and product customization","<p>We have been using <code>git-flow</code> for a while for the development of a software framework. We have the <code>master</code>and <code>development</code> branches in a single repository. </p>

<p>Recently, different customers became interested in buying the framework, which requires a customization of the framework per customer.</p>

<p>So far, we branched a new <code>feature-customerXYZ</code> branch for each customer from the master, did the customization there and kept the branch open, after the customization was finished (which prevents 'infection' of the product <code>master</code>/<code>development</code> branch from the customization). </p>

<p>Parallel to this, the development on the framework itself goes on using the usual git-flow workflow on the product <code>master</code>, <code>development</code>, <code>features</code>, <code>hotfixes</code> and <code>release</code> branches.</p>

<p>There are two common scenarios happening in this context for which I think our workflow cannot handle optimally:</p>

<ol>
<li><p>Development of the <code>feature-customerXYZ</code> branch can contain commits worthy of being implemented in the product <code>master</code>/<code>development</code> branch. Since the <code>feature-customerXYZ</code> branch will never be closed, those commits have to be <code>rebased</code> or <code>cherrypicked</code> to the product branches, which requires extra work after the customization and is error prone.</p></li>
<li><p>Hotfixes discovered while a <code>feature-customer</code> branch is open are handled by <code>git-flow</code> by merging the opened <code>hotfix</code> branches after the fix only to the product <code>master</code> and <code>development</code> branch, but are not merged into open <code>feature-customer</code> branches (to be more precise: they are not merged into all open <code>feature</code> branches).</p></li>
</ol>

<p>Is there a git workflow that can handle this in a concise way? Is there a clever alternative instead of <code>merge</code>, <code>cherrypick</code> or <code>rebase</code> of the commits to the product <code>master</code>/<code>develop</code> or the open <code>feature</code> branches, respectively?</p>
","3","10309342","0","0"
"26911572","742755","2014-11-13 14:47:16","1","135","<git-flow><changelog>","What's a good way to compile client facing release notes for a git-flow managed software project?","<p>Very familiar with Git and git-flow (the paradigm and script to facilitate it), I recently took a shining toward git-extras changelog utility: it tags a landmark and updates a repo-tracked History.md file with raw commit messages since the previous changelog tagging.</p>

<p>What is the best way to administer and maintain this History.md using git-flow?  Right now I am issuing all the normal git-flow commands, but specifically just before a finish (of hotfix or release), I run:</p>

<pre><code>git changelog --tag 2014_Nov13
</code></pre>

<p>for instance, vim History.md to manually strip out any ""merged develop into master"" and even prune and consolidated developers' commit messages into something more digestible for posterity, then issue</p>

<pre><code>git commit -am ""Updates History.md""
</code></pre>

<p>followed by git flow release / hotfix finish.</p>

<p>Is there a more appropriate way?</p>
","0","742755","0","0"
"36442801","2385476","2016-04-06 06:05:34","1","851","<git-flow>","How to install git-flow 1.9.1 AVH in Ubuntu 14?","<p>Currently, I'm able to install git-flow using </p>

<pre><code>apt-get install git-flow
</code></pre>

<p>But, it's always installing version 1.6.0 AVH Edition.</p>

<p>Please help me install 1.9.0 AVH Edition. </p>
","0","2385476","",""
"52633751","24106","2018-10-03 18:42:01","0","1441","<git><branch><git-flow><hotfix>","How to hotfix a feature that's already in develop (git-flow)","<p>Scenario - using git-flow or similar:</p>

<p>While underway with a stream of work, we become aware that one of the features which has been developed (in a feature-branch and already merged to the develop branch) needs to be urgently hotfixed before the other work in develop will be ready.</p>

<p>What is best practice for achieving this?</p>

<p>In git-flow, hotfixes are typically done using a hotfix branch off master. To follow that model, I'm wondering whether cherry-picking from develop to the hotfix branch is best, or retaining the feature branches after they've been merged to develop and merging those branches to the hotfix branch (or master)? Or something else?</p>
","4","24106","",""
"53558336","3867776","2018-11-30 13:17:04","1","584","<maven><jenkins><git-flow>","gitflow-maven-plugin permission denied error (jenkins-gitlab)","<p>We have a job (java) on our Jenkins server, that gets trigger by a webhook from our Gitlab server, but during the build the gitflow maven plugin complains on the permission denied? That usually means that there is a problem with the ssh keys...</p>

<p>I checked the following:</p>

<pre><code>1.) jenkins can communicate with gitlab (the repo does get cloned)
2.) there is a user in gitlab that has developer rights and the project in question has a deploy key enabled (with write permissions)??
3.) The pom.xml file has the right scm connection.
</code></pre>

<p>The problem is that it should work :), I think the problem is with the gitflow-maven-plugin:</p>

<p>Stacktrace:</p>

<pre><code>[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 39.587 s
[INFO] Finished at: 2018-11-30T13:06:17+00:00
[INFO] Final Memory: 29M/197M
[INFO] ------------------------------------------------------------------------
Waiting for Jenkins to finish collecting data[ERROR] Failed to execute goal com.amashchenko.maven.plugin:gitflow-maven-plugin:1.10.0:release-finish (default-cli) on project template: release-finish: Permission denied (publickey).
[ERROR] fatal: Could not read from remote repository.
[ERROR] 
[ERROR] Please make sure you have the correct access rights
[ERROR] and the repository exists.
[ERROR] -&gt; [Help 1]
</code></pre>

<p>Any advice would be helpful.</p>

<p><strong>Update</strong>:</p>

<p>I found out the answer, if anybody else will have similar issuses, the quick solution is to use the ""ssh agent"" jenkins plugin that will persist the ssh key in the build process.</p>
","0","3867776","",""
"37492726","4806797","2016-05-27 21:48:00","1","913","<git><github><version-control><git-flow>","""Partially"" init a git flow repo","<p>I have a cloned repo I wanna commit to using git flow, but it's not initialized as a git flow repo and it has no branches like 'release' or 'hotfix'. </p>

<p>Can I somehow ""partially"" initialize it as a git flow repo?<br>
I mean, I actually need only '<code>develop</code>' branch and branches for my features, but when I run <code>git flow init</code> it also asks for release branch, hotfix branch (maybe smth more, don't remember) which I actually don't need and refuses to init the repo if some of those branches is absent. </p>

<p>I don't need those branches and I don't wanna create them, 'cause I don't wanna pollute the repo with branches created only to satisfy git flow.</p>

<p>Can I somehow init the git flow repo with only develop branch and features branches prefix?<br>
Or what is the common solution for such case?</p>
","0","4806797","0","0"
"53563856","5661749","2018-11-30 19:39:36","2","744","<git><merge><git-flow>","git flow merge down/left continously","<p>Git flow ensures the following way that changes to master and release eventually end up in develop:</p>

<ul>
<li><p>hotfixes branch from master and merge back to develop. If there is an
active release branch it merges there and only propagates to develop
once release is merged to master and develop.</p></li>
<li><p>changes to release are only merged to develop once the release is
finished</p></li>
</ul>

<p>I wonder why there is the delay until the release is completed. 
Wouldn't it be much easier to simply merge master to release and develop whenever a change to master occurs and release to develop when release changes?</p>

<p>This way I would get changes immediately reflected in all relevant branches and I would not need to think about what to merge where and when.</p>

<p>The only explanation I could think of is that git flow decided that having less frequent merges outweighs the benefit of having an up to date/synchronized codebase across branches.</p>
","0","5661749","0","0"
"70384648","1106238","2021-12-16 19:34:54","0","369","<git><atlassian-sourcetree><git-flow>","SourceTree - Cannot create branch names containing ""/"" with git-flow integration","<p>I'm trying to use SourceTree + git-flow.</p>
<p>I cannot create branch with names as Feature/Module/Marco using the git-flow integration starting a new feature.</p>
<p>If I manually create the branch, no problem at all.</p>
<p>If I use the &quot;start new feature&quot; of git-flow I get the following error:</p>
<pre><code>The name is invalid. Ref names must follow git ref-format rules:
https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html
Additionally Sourcetree does not support the use of '/' in Git-flow branch names
Completed with errors, see above.
</code></pre>
<p>how can I solve this?</p>
<ul>
<li>Windows 10 64 bit</li>
<li>SouceTree version 3.4.7</li>
<li>Git for windows 2.34.1</li>
</ul>
","6","1106238","",""
"28022043","3332168","2015-01-19 10:04:02","0","118","<git><hook><git-flow>","Is there a way to run an interactive shell command during a git(-flow) hook?","<p>I want to write a git hook for git flow, that starts an interactive rebase when finishing a feature branch and automatically squashes commits.</p>

<p>Currently what I have like looks like this:</p>

<pre><code>#!/bin/sh
#
# Runs before git flow feature finish
#
# Positional arguments:
# $1    The friendly name of the branch
# $2    The origin remote
# $3    The full branch name (including the feature prefix)
#
# The following variables are available as they are exported by git-flow:
#
# MASTER_BRANCH - The branch defined as Master
# DEVELOP_BRANCH - The branch defined as Develop
#
NAME=$1
ORIGIN=$2
BRANCH=$3

# Implement your script here.
`git rebase -i $DEVELOP_BRANCH`
# To terminate the git-flow action, return a non-zero exit code.
exit 0
</code></pre>

<p>However, this wont open the rebase window, but instead will stop anything from happening.</p>
","0","3332168","",""
"70533455","1831065","2021-12-30 15:13:59","0","341","<git><git-flow>","git flow command results in - ""Maybe git-flow is broken?""","<p>This git flow instructions video <a href=""https://www.youtube.com/watch?v=rX80eKPdA28&amp;t=302s"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=rX80eKPdA28&amp;t=302s</a> involves giving the command: &quot;<em>git flow release finish 0.2.0</em>&quot; which opens up the vi editor.
I messed up the commit message and ended up closing the command prompt.</p>
<p>After this the command &quot;git flow&quot; results in an error message saying: Maybe git-flow is broken?
I have tried uninstalling git and reinstalled to no avail. Any ideas ?</p>
<p>Using Windows 10 and Developer Command Prompt VS 2022</p>
<p><strong>UPDATE</strong>
I discovered that the issue was not related to <strong>git-flow</strong> but rather the ability to run a shell script such as <strong>submodule</strong> which didn't work either.
I haven't discovered the perfect solution but this is what I did.
My Windows account is not a local admin on my machine. I have another &quot;admin&quot; account. Previously I installed git using this admin account under c:\Program Files\Git.
Installing Git under my user account at c:\Users[myuser]\Document\Git fixed the issue.
I hope this helps someone.</p>
","4","1831065","0","0"
"70556604","15680975","2022-01-02 14:03:03","2","778","<django><git><django-migrations><git-flow>","django migrations and git branches while working on multiple features simultaneously","<p>In <strong>Django</strong>, when working on multiple new features simultaneously, what is the best way to handle database migrations with git?<br />
(as in <code>python manage.py makemigrations</code> , and <code>python manage.py migrate</code>  which are used to update the database after the <code>models.py</code> file has been changed)</p>
<p>I’m in middle of working on feature1, on its own branch.
Now I need to create feature2 and push it to production.</p>
<p>Should I:</p>
<ol>
<li><p>fork new feature2 branch off of production, create feature2, merge back to prod, migrate.</p>
</li>
<li><p>fork new feature2 branch off of production, create feature2, migrate, merge back to prod.</p>
</li>
</ol>
<p>Or some other way?</p>
<p>And when I go back to feature1, what do i do to insure everything will be up to date?</p>
","3","15680975","",""
"27012425","2208253","2014-11-19 08:48:18","1","199","<git><git-flow>","git-flow hotfix merges onto far ahead develop","<p>How should I handle situations where my develop branch is far ahead master and a release branch has been created from develop, but I still need to put a hotfix into production.</p>

<p>Should I just do it the normal way: branch hotfix from master and merge into master and develop? Is it legit to rebase my release branch onto develop after the hotfix merge?</p>

<p>Thanks</p>
","0","2208253","0","0"
"44874235","315763","2017-07-02 19:00:49","4","119","<git><git-flow>","In git, how does one roll back specific commits in a branch but not roll them back in the parent branch even after merging?","<p>Hopefully this will be an easy question. I'm relatively new to git, and there are some things I still don't...git.</p>

<p>Hypothetical situation:</p>

<p>Suppose the develop branch contains two commits, c1 and c2.</p>

<p>A release branch is created after c2, so the release branch also contains c1 and c2.</p>

<p>Then it's decided that c1 needs to be deferred to a later release.</p>

<p>What's the recommended way to remove c1 from the release branch without also then removing c1 from the develop branch when the release branch is merged back into develop?</p>
","4","315763","",""
"45377755","1376820","2017-07-28 15:55:15","0","287","<git><branch><branching-and-merging><git-flow>","gitflow with two development environments","<p>Is there a recommended approach to when working with GitFlow to accommodate multiple dev environments as well as a production environment?  </p>

<p>A project I'm working on has to maintain a production site along with two development environments.</p>

<p>The first dev environment reflects any changes that relate the the current live environment - these are mostly minor changes.</p>

<p>The second dev environment contains more significant changes and updates as part of a more long term project.</p>

<p>All three environments are set up  with local and remote hosting to cover long term development, testing/sign off and live. As an aside I'm also rolling out pipelines to build test and deploy each branch.</p>

<p>Thanks</p>
","0","1376820","",""
"27579481","325206","2014-12-20 10:53:38","2","682","<git><atlassian-sourcetree><git-flow>","Which branch to make a production package from in git flow","<p>We are using git flow atm in our team, and we keep coming back to one question.</p>

<p>Which branch to make a package to deploy to production from?</p>

<p>If you make a release branch, and test it on test environment, then it kind of makes sense to take that same build, and just deploy that to production. But if I understood git glow correctly, what you should do is merge the release branch into master first (creates a tag with version number), and deploy a new build from the master branch to production. That also makes sense, because we have our build system append last commit SHA from the branch to the version number, so we can easily find what version is currently live and the tag corresponds to currently deployed code.</p>

<p>Now I know that the codebase from the release branch and master branch should be 1:1 exactly the same, but the fact is you are deploying an untested package to production, which makes some people on the team a bit nervous :P</p>

<p>So I thought I would ask here, what do you think is the best approach to this?</p>

<p><img src=""https://i.stack.imgur.com/ipp1y.png"" alt=""figure 1""></p>
","0","325206","0","0"
"10197188","1050482","2012-04-17 18:48:20","75","97909","<git><git-flow>","git flow branches have diverged","<p>I'm using the git flow tools and I've gotten myself in a bit of problem. My git branches have diverged. I've read <a href=""https://stackoverflow.com/questions/2452226/master-branch-and-origin-master-have-diverged-how-to-undiverge-branches"">master branch and &#39;origin/master&#39; have diverged, how to &#39;undiverge&#39; branches&#39;?</a> and have tried to follow the steps, both attempting to merge and to rebase my local repository.</p>

<pre><code>    $  git flow feature finish showFindLogs
    Branches 'develop' and 'origin/develop' have diverged.
    And branch 'develop' may be fast-forwarded.
    $  git merge origin/develop
    Already up-to-date.
    $ git rebase origin/develop
    Current branch feature/showFindLogs is up to date.
    $ git status
    # On branch feature/showFindLogs
    nothing to commit (working directory clean)
</code></pre>

<p>How can I get out of this? I'm done with the git flow feature and I'd just like to get my changes up to the remote. Thanks!</p>
","0","1050482","0","0"
"64997405","872054","2020-11-25 01:44:51","1","261","<git><azure-devops><git-flow>","How to detect (and possibly auto-merge) git commits from a downstream branch back up to an upstream","<p>We use a GitFlow branching strategy where we have a permanent <strong>develop</strong> branch and a permanent <strong>master</strong> branch.  All work is done in temporary <strong>hotfix</strong> or <strong>feature</strong> branches.  We also have release branches, but in the interest of trying to keep this simple, I'll talk in terms of just the two permanent branches.</p>
<p>Whenever a production release issue comes up, we'll branch off <strong>master</strong> and create a <strong>hotfix</strong> branch.  After development and testing is complete, the changes are merged to <strong>master</strong>.  Now in a perfect world, after these changes are merged to <strong>master</strong>, they'd immediately be merged back up to <strong>develop</strong> as well - however people sometimes forget/make mistakes/&lt;insert desired excuse here&gt; and often times it'll be a day or two before we realize that someone forgot to merge their changes back up.</p>
<p>I'm curious how others deal with this scenario as I would think anyone following GitFlow would encounter this from time to time.  I know the obvious response is, well they should be responsible enough to remember to do it... but anytime we're depending on a human to remember to do something, we're just asking for trouble IMO.  I would think it'd be fairly straightforward to script something to possibly run every night and compare <strong>master</strong> to <strong>develop</strong> to check if there are commits that exist in <strong>master</strong> but <em>not</em> <strong>develop</strong> (as this should never happen).  At the very least, an email or some type of notification could be sent alerting us to the issue.  Or even taking it a step further, I would think you could potentially even go so far as to actually create the necessary pull request (as we require code reviews prior to merging).</p>
<p>I've searched around on the web and haven't really found anything, so I'm just wondering if maybe I'm not thinking about this correctly.  I would think this would be a fairly common issue, so I'm just surprised I'm not finding scripts or plugins to do this type of thing.  We are starting to try to develop something, I just want to make sure we're not reinventing the wheel or off in left field.</p>
<p>*We do use Azure DevOps for our SDLC by the way.</p>
<p>Any feedback or suggestions would be appreciated.</p>
","3","872054","",""
"10228073","236116","2012-04-19 12:27:58","20","21355","<git><bash><awk><git-flow><version-numbering>","Looking for a way automate the ""bump version"" with git flow","<p>I have been using git flow for a couple of months and it has worked very well.  I would like to automate the ""bump version"" operation.  </p>

<p>The project is PHP and the footer.php has a token to replace with the current release tag. I am certain that with some awk'ing of git log and the PHP file everything should work out, but I assume someone has done this before...</p>

<p>Any ideas?</p>
","1","236116","0","0"
"70601095","5437543","2022-01-06 00:17:20","2","317","<git><git-flow><semantic-versioning><gitversion><git-history>","Can gitversion be made to apply a unique tag to an existing tagged commit?","<p>Following the gitflow branching model on a project, my &quot;development branch&quot; is named <code>dev</code>, my release branches are prefixed with <code>release/</code>, and my &quot;production branch&quot; is <code>master</code>.</p>
<p>Our CI/CD process uses <strong>gitversion</strong> to apply an alpha-tag (e.g. <code>0.2.0-alpha.12</code>) to each commit to the <code>dev</code> branch.</p>
<p>When I am ready to make a release, I create a release-branch from a desired commit on the <code>dev</code> branch, push it to the remote, and our CI/CD process uses <strong>gitversion</strong> to apply a beta-tag (e.g. <code>0.2.0-beta.1</code>) to the commit.</p>
<p>We currently do not have any <code>GitVersion.yml</code> -- the problem description below is from the default behavior of <strong>gitversion</strong>.</p>
<p><strong>Problem:</strong><br />
When <strong>gitversion</strong> is applied to a commit that has an existing tag, it returns the existing commit, not a new one.<br />
E.g. the <code>dev</code> commit from which the <code>release/0.2.0</code> branch created, is tagged with <code>0.2.0-alpha.12</code>. When <strong>gitversion</strong> is run on the newly-created <code>release/0.2.0</code> branch, the tag it returns is <code>0.2.0-alpha.12</code>, instead of a new beta-tag.</p>
<p><strong>Desired result:</strong><br />
<strong>gitversion</strong> can be made to generate a unique tag for an existing commit with an existing tag.
E.g. When <strong>gitversion</strong> is run on the newly-created <code>release/0.2.0</code> branch, the tag it returns is <code>0.2.0-beta.1</code> regardless that the commit is already tagged with <code>0.2.0-alpha.12</code>.</p>
<p><strong>Question:</strong><br />
Can <strong>gitversion</strong> be configured to achieve the desired result, i.e. generate a new beta-tag if run on a release-branch that points to an existing alpha-tagged commit? (I have a decent -- probably not expert -- understanding of git branching and tagging: I understand that in the described scenario, two branches are pointing to the same commit).</p>
<p>As context to this question: our CI/CD process relies on the <code>&quot;SemVer&quot;</code> element of <strong>gitversion</strong>'s output to decide what tag to apply. When newly-pushed release-branches point to existing dev-branch commits (which will have existing alpha-tags), it trips (or desired behavior is not achieved) because the <strong>gitversion</strong>-generated tag for the release-branch is the existing alpha-tag, instead of the desired new beta-tag.</p>
<p>As illustration:</p>
<pre><code>$ git clone ssh://git@bitbucket.company.com:7999/prj/repo.git
$ git checkout dev
Switched to branch 'dev'
Your branch is up-to-date with 'origin/dev'.
$ git log --oneline -n 1 --decorate
0593fb2 (HEAD -&gt; dev, tag: 0.2.0-alpha.12, origin/dev, release/0.2.0) A useful comment.
$ docker run -u $(id -u ${USER}):$(id -g ${USER}) --rm -v &quot;$(pwd):/repo&quot; artifactory.company.com/gitversion:5.7.1 /repo
{
...
  &quot;SemVer&quot;: &quot;0.2.0-alpha.12&quot;,
...
}
$ git checkout -b release/0.2.0
Switched to a new branch 'release/0.2.0'
$ docker run -u $(id -u ${USER}):$(id -g ${USER}) --rm -v &quot;$(pwd):/repo&quot; artifactory.company.com/gitversion:5.7.1 /repo
{
...
  &quot;SemVer&quot;: &quot;0.2.0-alpha.12&quot;,
...
}
</code></pre>
<p><strong>What I've tried:</strong><br />
Typically, I make and commit a change on the newly-created release-branch, in order to generate a new commit that is unique to the release-branch, then run <strong>gitversion</strong> on this commit. This generates a desired beta-tag. E.g.:</p>
<pre><code>$ touch foo.bar &amp;&amp; git add --all &amp;&amp; git commit -m &quot;wip&quot; &amp;&amp; git log --oneline -n 2 --decorate
[release/0.2.0 98435eb] wip
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 foo.bar
98435eb (HEAD -&gt; release/0.2.0) wip
0593fb2 (tag: 0.2.0-alpha.12, origin/dev, dev) A useful comment.
$ docker run -u $(id -u ${USER}):$(id -g ${USER}) --rm -v &quot;$(pwd):/repo&quot; artifactory.company.com/gitversion:5.7.1 /repo
{
...
  &quot;SemVer&quot;: &quot;0.2.0-beta.1&quot;,
...
}
</code></pre>
<p>However, this is often undesirable because the dev-branch commit is perfect as-is, and I've needed to do contrived work.</p>
","0","5437543","0","0"
"72355561","5683645","2022-05-23 22:53:55","0","361","<git><merge><git-flow><fast-forward><git-history>","Fast forward merge after git flow hotfix","<p>I have three branches production , develop and a fix branch as shown below (A,B and C are commits) :</p>
<pre><code>  A (production,fix)
   \   
    B   (develop) 
</code></pre>
<p>I want to be able to only perform fast forward merges using the git flow strategy . However on the scenario where fix and develop have been moved to newer commit C this cant be done f.e.:</p>
<pre><code>    C (fix)                           C (fix,production)
   /                                /
  A (production)     ---&gt;&gt;         A 
   \                                \
    B (develop)                      B (develop) 


                   
</code></pre>
<p>I would avoid rebasing develop as it is a public branch . Is there a different way I can achieve only fast forward merges (thus keeping a clean history) without having to rebase the development branch ?</p>
","2","5683645","",""
"54924227","7852189","2019-02-28 11:05:05","2","1004","<github><workflow><git-branch><git-flow>","How to use git flow without using release branch?","<p>There are several branches available in <strong>git flow</strong>.
such as</p>

<ul>
<li><code>feature/</code></li>
<li><code>release/</code></li>
<li><code>support/</code></li>
<li><code>hotfix/</code></li>
<li><code>bugfix/</code></li>
</ul>

<p>I do not need <code>release/</code> branch and want to merge <code>staging</code> branch (<em>a development branch</em>) directly to <code>master</code>. 
What is the best way to achieve this using <strong>git flow</strong>?</p>
","0","7852189","",""
"46159648","460138","2017-09-11 15:50:19","2","263","<git><git-flow>","Is there a way to avoid manually configuring git flow?","<p>Scenario: the use of <code>git flow</code> is encouraged with a particular repository.  Now anyone who checks out the repository must run <code>git flow init</code> and hope that the default conventions/settings are correct for this repository.  </p>

<p>Is there a way to have the repository directly tell <code>git flow init</code> what settings it should use, without prompting the user?</p>
","0","460138","0","0"
"64670920","6716090","2020-11-03 21:24:13","-2","262","<git><dependencies><git-flow><branching-strategy>","How to handle dependecies between branches in git-flow?","<p>I've been working on feature_A while another dev works on feature_B. Now, the other dev needs a small functionallity that's implemented in my feature_A, but I've not finished the whole feature itself. How should I share the code to the other dev? Is it against git-flow branching model? Can I simply merge feature_A into feature_B?</p>
","0","6716090","",""
"64691460","7930117","2020-11-05 05:00:07","1","134","<git><gitlab><git-merge><git-flow><merge-request>","Why git log graph of merged branch from GitLab was inverted?","<p><a href=""https://i.stack.imgur.com/HozqT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HozqT.png"" alt=""git graph"" /></a></p>
<p>As you can see in the image, feature branch number <code>668</code> has been merged into <code>dev</code> branch. But why the git graph appears like <code>dev</code> branch was merged into branch number <code>668</code> instead?</p>
<p>This behavior seems to happen only when do a merge request from GitLab.com. It does not happen when manually merge in a local machine.</p>
<p>Thanks!</p>
<p><strong>EDIT: Added git graph from GitLab.com</strong>
<a href=""https://i.stack.imgur.com/Duoi8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Duoi8.png"" alt=""enter image description here"" /></a></p>
<p>This is my GitLab merge request setting:
<a href=""https://i.stack.imgur.com/V82Qk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/V82Qk.png"" alt=""enter image description here"" /></a></p>
","4","7930117","",""
"28464229","209107","2015-02-11 20:50:12","9","4563","<git-flow>","Programmatically determine if git-flow is initialized","<p>Is there any way to do this?  Is the repo considered initialized if it simply has the git-flow directives in <code>.git/config</code> like</p>

<pre><code>....
[gitflow ""branch""]
    master = master
    develop = develop
[gitflow ""prefix""]
    feature = feature/
    release = release/
    hotfix = hotfix/
    support = support/
    versiontag = v
</code></pre>

<p>?</p>
","0","209107","0","0"
"46729813","809881","2017-10-13 12:20:00","1","8035","<git><git-flow>","how to use a gitflow hotfix branch","<p>We started using Gitflow for our branching model.
But we are not sure how to use hotfixes.
Do we have to use 1 hotfix branch for a hotfix release (meaning multiple fixes in 1 branch) or do we have to use 1 branch for every hotfix.
So if there are 10 bugs, we have 10 hotfix branches.</p>
","0","809881","",""
"10941466","852366","2012-06-07 23:58:05","2","821","<git><git-flow>","git flow branching model branching","<p>I've been reading and re-reading the post about a successful git model (<a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">git flow</a>) and I'm confused about a couple things when working off a develop branch.  He says:</p>
<blockquote>
<p>When starting work on a new feature, branch off from the develop branch.</p>
<p>$ git checkout -b myfeature develop</p>
</blockquote>
<ol>
<li>What branch is he starting in? My checked out 'develop' branch?</li>
<li>Is the 'develop' after 'myfeature' track my local 'develop' branch or the remote 'origin/develop' branch?</li>
<li>If I start in my 'develop' branch when I create 'myfeature' do I need the 'develop' at the end?</li>
<li>Does 'myfeature' copy the current HEAD of the develop branch?</li>
<li>If I only wanted to see my changes on a dev server, do I need to merge into my local develop or remote develop?</li>
</ol>
<p>I'm trying to wrap my head around it - off to re-read it again and find some screencasts based on this model.</p>
","2","852366","",""
"10973335","852366","2012-06-11 00:01:41","1","1152","<git><revert><git-flow>","git revert deleted files in master, keep feature working files intact","<p>While working in a local 'myfeature' branch, I deleted some files and committed them locally.  Along the way, those commits were then merged with remote origin/master.  I needed to get those deleted files back, so I did a <code>git pull</code> for the latest on master and cut a 'hotfix' branch where I:</p>

<pre><code>git revert &lt;commit id&gt;
</code></pre>

<p>in reverse chronological order of those bad commits and got those deleted files back.  I'm basing on the git-flow branching model so correct me if I'm wrong, I should now merge the 'hotfix' into master, as well as any 'release' branches, develop, and any other 'feature' branches?  </p>

<p>Do I need to do anything to my currently still in-progress 'myfeature' branch where I want to keep those said files deleted?  Will those files stay deleted once I merge 'myfeature' or will those files resurrect when I merge?</p>

<p>I'm not using git-flow, just the model.</p>
","0","852366","",""
"65688805","555111","2021-01-12 17:19:27","0","99","<git><azure-devops><git-flow>","(gitflow) My feature branch contains previous commit not yet merged on other branches","<p>I'm working in a <code>master</code> <code>develop</code> <code>fb</code> branch way on git.</p>
<p>I create a <code>fb</code> feature branch from <code>develop</code></p>
<p>Once my work is done, I push <code>fb</code> to <code>origin/fb</code> and do a pull request (with azuredevops) on <code>fb</code> to <code>develop</code> then <code>fb</code> to <code>master</code></p>
<p>In the pull request to <code>master</code> I can see previous commits before the branch creation which are other merges on <code>develop</code></p>
<pre><code>Develop
---P0---P1---P2-------------------
             |               FB
             \----M1----M2--------

Master
---P0-----------------------------
</code></pre>
<p>I don't want <code>P1</code> and <code>P2</code> to be merged on master because other developers are waiting for tests before merging on<code>master</code></p>
<p>What are my options?</p>
<ul>
<li>Create a branch from <code>P0</code> (and cherry-pick my <code>fb</code>commits to fix my case), only <code>P1</code> and <code>P2</code> want to be merged too, but in the future if there are other previous non commited commits?</li>
<li>I saw a previous thread where you create a branch from <code>master</code>, cherry-pick <code>fb</code>'s commits into it and merge this branch to master... Seems complex.</li>
<li>Is there a way to merge only <code>fb</code>'s commits or is it anti-pattern?</li>
</ul>
<p>What is the correct gitflow for this? In general when do we create a feature branch?</p>
<p>Thank you in advance!</p>
","0","555111","",""
"47502078","38765","2017-11-26 23:20:12","2","1544","<git><terminology><git-flow>","What does ""diverged"" mean in git or git flow terminology?","<p>When doing <code>git flow feature start MYFEATURE</code> I recently got the message</p>

<pre><code>$ git flow feature start MYFEATURE
Branches 'develop' and 'origin/develop' have diverged.
And branch 'develop' may be fast-forwarded.
</code></pre>

<p>Is this use of ""diverged"" a git flow specific thing, or also used in git? And is one branch being an ancestor of another branch still sufficient for them to considered ""diverged""? My assumption about the term ""diverged"" based on the English language is that both branches would have to have commits that the other branch doesn't have.</p>

<p>When trying to find out what ""diverged"" means, I came across <a href=""https://stackoverflow.com/questions/2452226/master-branch-and-origin-master-have-diverged-how-to-undiverge-branches"">master branch and &#39;origin/master&#39; have diverged, how to &#39;undiverge&#39; branches&#39;?</a> , but that didn't involve git flow, and involved two branches that had commits that the other branch didn't have. The term ""diverged"" confused a high reputation user enough that they <a href=""https://stackoverflow.com/questions/2452226/master-branch-and-origin-master-have-diverged-how-to-undiverge-branches#comment2440284_2452226"">left a comment asking for clarification</a>.</p>
","2","38765","0","0"
"29301818","327301","2015-03-27 13:27:57","36","30480","<git><maven><versioning><git-flow>","How should I update the version inside my pom.xml when releasing using git flow?","<p>In maven projects the version of a project is contained in the <code>&lt;version&gt;</code> attritbute of the pom.xml file. When creating a new release in the git flow model I need to bumb the version number. <a href=""http://nvie.com/posts/a-successful-git-branching-model/#release-branches"" rel=""noreferrer"">This article</a> explains how this is done (without maven):</p>

<ol>
<li>Create a release branch</li>
<li>Change the version number and commit</li>
<li>Merge the release branch both to develop and master</li>
</ol>

<p>Additionally it says:</p>

<blockquote>
  <p>It is exactly at the start of a release branch that the upcoming release gets assigned a version number—not any earlier. Up until that moment, the develop branch reflected changes for the “next release”, but it is unclear whether that “next release” will eventually become 0.3 or 1.0, until the release branch is started. That decision is made on the start of the release branch and is carried out by the project’s rules on version number bumping.</p>
</blockquote>

<p>I see two problems in conjunction with maven here:</p>

<ol>
<li>The version under development in maven would be [next version]-SNAPSHOT. So we cannot really postpone the decision which version is next up to the moment we create a release branch. Of course if we can change our mind later, but we already need to enter /some value/ here earlier.</li>
<li>Before creating our release the version in the pom.xml was let's say <code>1.1-SNAPSHOT</code>. Now we have changed that to simply <code>1.1</code> on the release branch and merged that to master. Fine. But we should also merge that branch back to develop and for that we need to adapt the version to e.g. <code>1.2-SNAPSHOT</code>. And probably we should not have done that on the release branch because that commit should not be part of the release. Actually we probably should have made this change right after branching off develop because all future commits on develop will be for the next version.</li>
</ol>

<p>When googling for the problem I found some articles about maven-plugins that can automate the process, which may be interesting, but this question is really on how the git graph should look like and where the version bump commits should be and not how I can automate this using a maven-plugin.</p>
","1","327301","0","0"
"66104406","11917178","2021-02-08 15:21:59","0","362","<continuous-integration><gitlab-ci><git-flow>","Avoid Gitlab-CI build for develop branch on finish release (git-flow)","<p>We are using Git-Flow with automatic builds and releases using Gitlab-CI.</p>
<p>Every commit on the <code>develop</code> branch triggers the build stage.</p>
<p>Every commit on the <code>master</code> branch triggers first the build stage and then the <code>release</code> stage (which uses the artifacts from the build stage).</p>
<p>This works fine, there is only one drawback for which I couldn't find a solution:</p>
<p>Whenever we finish a release in the git repository, this means commits on both <code>develop</code> and <code>master</code> branch. That also triggers the build stage on both branches, building from the exact same source versions (at this point there are two different commits that contain the exact same code).</p>
<p>I would like to avoid the build on the development branch, but only in this special case.</p>
<p>I don't think this is possible using the logic inside <code>.gitlab-ci.yml</code>, but that's ok. I would be glad if I could recognize this situation and end the build script early.</p>
<p>I think this means the following conditions have all to be met:</p>
<ul>
<li>We are on the <code>develop</code> branch. (simple)</li>
<li>The current commit was merged from both <code>master</code> and <code>develop</code>.</li>
<li>The merged <code>master</code> commit has a tag attached to it.</li>
</ul>
<p>What git magic could I do to recognize if this is the case for a certain commit in the <code>develop</code> branch?</p>
<p>I am using Python for this, but I would appreciate helpful answers in any programming language :-)</p>
","0","11917178","",""
"66110627","4811392","2021-02-08 23:02:57","1","1079","<azure-devops><azure-pipelines><git-flow>","Azure DevOps and gitflow workflow: release to UAT","<p>I am implementing a <code>gitflow workflow</code> with <code>master</code> and <code>development</code> branches, and I have 3 environments: DEV, UAT, PROD.</p>
<p>Using <code>Azure DevOps</code>, when the PR completes and the feature branch is merged into <code>development</code>, I trigger the release to DEV environment.</p>
<p>I am unsure on how to deploy to UAT after that. My first approach was to automate the deployment to UAT after the deployment to DEV succeeded (sequentially, DEV and then UAT), but it doesn't feel right to automate the deployment to UAT.</p>
<p>Should I create another branch for UAT deployments, and automate the deployment to UAT when <code>development</code> merges into that branch?</p>
","0","4811392","",""
"30100985","4830983","2015-05-07 12:22:08","1","32","<git><git-flow>","the merge in git-flow","<p>There's a main branch called master, and I create new one called dev basic on master, basic on dev, there're three files in branch dev as following</p>

<p>a file with content <code>123456</code>
b file with content <code>34567</code>
c file with content <code>09783</code></p>

<p>I create another two branches basic on branch dev for two developers, one is called dev1, another is called dev2, each branch has the some files and contents with dev, and now dev1 change the a file's content to <code>2345</code>, and commit &amp; push to dev1(remote), and merge to dev, at the same time, dev2 change the b file's content to <code>87829</code>, and commit, and now dev2 wants to get dev1's changes, he do some steps as following</p>

<pre><code>git checkout dev
git pull
git checkout dev2
git rebase dev
</code></pre>

<p>yes, dev2 can get the dev1's change, here is the new a file's content <code>2345</code>, but his b file's content is changed to <code>34567</code>, not <code>87829</code> not he changed and commited's content, so which step am i wrong? thanks</p>
","1","4830983","",""
"30162659","942314","2015-05-11 08:16:40","0","1798","<git><git-flow>","git-flow how to have demo branches?","<p>We are a small team and work on a project using git and git-flow. Most of the time we develop towards one goal, so creating a feature and merging it when done to the develop branch works fine.</p>

<p>But now we are in the situation were we have multiple features, but we would want to only deploy a few features at a time and demo some other features.
I can't see a good way of doing this, so the only idea we have is to manually create a demo branch, merge the features we want to merge there and deploy it (for demo only). And once we decide that those features will be deployed, then we ""git flow feature finish xxx"" and do a deployment (as git-flow indicates).</p>

<p>We can do all that, but I was looking for best practices on how to approach this issue. I found this <a href=""https://stackoverflow.com/questions/22798684/git-flow-for-the-system-that-others-have-heavy-dependency-on"">stackoverflow</a> question which is similar to what I have but the answer is not satisfactory. So here I am.</p>

<p>Thanks in advance.</p>
","2","942314","0","0"
"13415990","784198","2012-11-16 11:47:38","8","4176","<git><github><git-flow>","Git flow with github - pushing to central repo","<p>I've setup a repository on Git hub and I'm using git flow. I know how to create features, releases and hotfixes, however from what I've read so far it doesn't seem clear how you push to the central repository (github), therefore I've got a few questions:</p>

<ol>
<li>Once a feature is finished and you have ran <code>git flow feature finish</code> how do you then push this to github? </li>
<li>Once it is pushed to Github do I ever need to pull from Github or do we never touch the central repo and simply use it so that other developers/servers can pull from it?</li>
<li>How do the developers pull from the central repo using git flow?</li>
</ol>

<p>Thanks</p>
","0","784198","0","0"
"13419997","787333","2012-11-16 15:54:08","0","179","<git><git-rebase><git-flow><git-stash>","git rebase with stash shows possible duplicate commits","<p>I am using git with git flow, and ""dev"" and ""branches"". I worked on a feature baaed on dev, then made some commits in dev. Now I want to rebase my feature on the dev HEAD. Rebase works perfectly, but I also have stashed changes in my feature. When I run gitk, everything looks fine, but when I tick ""All refs"" in view, it shows the feature branch twice - once correctly rebased on dev HEAD, but also on its old position in the branch tree. I assume that it has something to do with stashing, since that doesn't show up without a stash.</p>

<p>before rebase:</p>

<pre><code>A-B-E
   \
    C-D
</code></pre>

<p>after rebase</p>

<pre><code>A-B-E-C-D
</code></pre>

<p>after rebase with stash</p>

<pre><code>A-B-E-C-D-stash
   \
    C-D-stash
</code></pre>

<p>The actual question: are these commits really duplicate? And if yes, what can I do about it?</p>
","0","787333","",""
"13450039","517529","2012-11-19 08:28:47","43","19278","<git><git-branch><branching-and-merging><git-flow>","How to undo git flow feature finish?","<p>I am learning git-flow and I just did <code>git flow feature finish &lt;feature-name&gt;</code>, which merged my feature branch to develop and removed it.</p>

<p>Instead of this, I want to push the feature branch to github, so I can merge it after a peer review.</p>

<p>So the question is, how do I 'undo' this command. Or in other words , how can I move my last two commits from develop to my feature branch?</p>
","0","517529","0","0"
"13474044","1820443","2012-11-20 13:17:09","9","9659","<git><workflow><gerrit><git-flow>","Workflow with git-flow feature branches and Gerrit","<p>Is there a recommended workflow for working with git-flow feature branches in Gerrit? Any best practices?</p>

<p>We are starting a project with multiple developers and a central repository managed by Git. Playing around with git-flow, I'm stuck with the problem of pushing feature branches to Gerrit as a way of backing up the developer's work while the feature is unfinished:</p>

<p>We do not want feature branches to be reviewed while being developed so we allow all developers to push directly to refs/heads/feature/* , circumventing the magic review branch. We would like to do the review when the feature branch is merged into the develop branch, but when the developer pushes her work to Gerrit after this merge, there's only the merge commit to review. The changes made in the feature branch do NOT appear in this patch set. I assume that's because these changes were pushed directly to refs/heads/feature/* so Gerrit thinks they do not need review anymore.</p>

<p>Should the developer instead push the feature branch to Gerrit right before finishing the feature branch? To be able to do this, she would need the rights to push and create references on refs/heads/feature/* and on refs/for/refs/heads/feature/*, making sure she pushes only to the review branch.</p>

<p>Any help will be very much appreciated.</p>
","1","1820443","0","0"
"49083322","1658110","2018-03-03 10:47:10","0","1415","<git><git-flow>","Automate git flow initialization","<p>How can I automate git flow initialization by specifing my own branch names, version prefixes etc. I tried using shell script but wasnt able to send data to the script after I execute:</p>

<p><code>git flow init
</code></p>

<p>I don't want default values I want to specify my own but without having to write them each time.</p>
","0","1658110","0","0"
"55076175","5686261","2019-03-09 10:04:59","0","336","<git><gitlab><release-management><git-flow><github-codereviews>","Isn't git-flow a bit ambiguous when it comes to raising MR for code reviews?","<p>I am new to using <code>git-flow</code> and have got some queries.
Let's say I have <code>master</code> &amp; <code>dev</code> branches created upon <code>git flow init</code> and
<code>feature/master-api</code> branch made from <code>dev</code> branch.</p>

<p>Once I complete the feature I do <code>git flow feature finish master-api</code>. The feature branch gets merged into my local <code>dev</code> branch.</p>

<p>Are my team members supposed to create a new branch from <code>dev</code> and raise an MR to <code>dev</code>?</p>

<p>Same goes when doing <code>git flow release finish 1.0.0.1</code>. Code gets merged into local <code>master</code> branch and back-merged into local <code>dev</code>.</p>

<p><code>dev</code> and <code>master</code> (maybe <code>release/</code>) branches are supposed to be <code>protected</code> branches.</p>

<p>So how do we manage MR for code reviews?</p>
","3","5686261","",""
"72489108","14843373","2022-06-03 11:43:11","1","71","<git><github><branching-and-merging><git-flow>","How to maintain seperate files in dev and main branches and sub branches github","<p><strong>Question:</strong> When merging <code>dev</code> into <code>main</code>, how do I keep them <code>.ebextensions</code> and <code>.elasticbeanstalk</code> commited on their respective branches but never overwriting each other during merges?</p>
<p><strong>Requirement:</strong>
I wish to checkout new topic branches from <code>dev</code> and merge them back into <code>dev</code>, so these topic branches will need the same <code>.ebextensions</code> and <code>.elasticbeanstalk</code> folders to <em>come</em> with them.</p>
<p><strong>Landscape:</strong>
Working with Github on Flask project for Elastic beanstalk.</p>
<p>I have two primary <code>branches</code></p>
<ul>
<li>main</li>
<li>dev</li>
</ul>
<p>I have <code>dev</code> set up for one Elastic beanstalk environment, and <code>main</code> set up in another. This means I have <strong>two different</strong> versions of the <code>.ebextensions</code> and <code>.elasticbeanstalk</code> folders.</p>
<pre><code>.
├── application.py
├── .ebextensions
├── .ebignore
├── .elasticbeanstalk
├── .gitignore
├── main.py
└── .vscode
</code></pre>
<p>I keep messing up the files and having to write them back in locally and push to remote again to fix them.</p>
<p>Having read about a third of <code>git-scm.com's</code> book so I think the solution will involve <code>&quot;onbranch:&quot; includeIf</code> but the <a href=""https://www.git-scm.com/docs/git-config#_conditional_includes"" rel=""nofollow noreferrer"">example</a> is hard to follow.</p>
<p>Surely I've missed something, it can't be an uncommon requirement.</p>
","1","14843373","",""
"55223856","5427155","2019-03-18 14:37:43","0","268","<git><rebase><git-flow><git-rewrite-history>","Is it possible to rewrite very old git history for develop branch","<p>I am using git flow. I made some rules how to keep git history clean because I am generating changelog from these commits. </p>

<p>But some old commits (made directly to develop) or merged feature branches are not following these rules. Is it some easy way to squash these old commits without affecting all current branches (master, version tags, etc...)?</p>

<p>I am familiar with rebase inside feature branches, but I cannot imagine how to do it inside develop/master branch.</p>
","1","5427155","",""
"55263145","6270170","2019-03-20 14:26:50","4","7221","<git><git-flow>","git flow init -d default suggestions are empty","<p>I'm using Git flow on Windows. When I'm initializing my repo via</p>

<pre><code>git flow init -d 
</code></pre>

<p>I get the following output</p>

<pre><code>Which branch should be used for bringing forth production releases?
- develop
- master
 Branch name for production releases: [master]

Which branch should be used for integration of the ""next release""?
  - develop
Branch name for ""next release"" development: [develop]

How to name your supporting branch prefixes?
Feature branches? []
Bugfix branches? []
Release branches? []
Hotfix branches? []
Support branches? []
Version tag prefix? []
</code></pre>

<p>As can be seen, the default prefixes are empty. Can anyone tell me in which config file these prefixes are set?</p>

<p>The problem is that I'm using a PowerShell script to clone multiple repos and init the repos via <code>git flow init -d</code>, so I need the default values.</p>

<p>Thx</p>
","0","6270170","0","0"
"55270568","2410547","2019-03-20 21:36:52","2","7072","<git><git-flow>","Create a hotfix branch or a feature branch in gitflow model","<p>I'm using this model in my team: <a href=""https://i.stack.imgur.com/IZNch.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IZNch.png"" alt=""enter image description here""></a></p>

<p>Today my project stats is following:</p>

<ul>
<li>The stable version is running in production using master branch</li>
<li>We developed new functionalities that need to be tested before production, so we have a release branch be testing under <strong>SIT Environment</strong>. This new functionalities just can be merged with master after all tests in SIT Environment. </li>
</ul>

<p><strong>The problem:</strong> The <strong>Product Owner</strong> requested a new field in a Table in Production. So the team suggest two solutions:</p>

<ul>
<li><p>Create a hotfix branch from master , add the new field and deploy to a <strong>Test Environment</strong>. This hotfix can wait months until merge with master, because after <strong>test pass</strong> we need wait the <strong>Product Owner</strong> say that can go to production because this field depends on another system changes.</p></li>
<li><p>Create a feature branch from develop and add this new field and deploy to a <strong>Test Environment</strong>. <strong>I think this is worst solution</strong> because i have things in develop that can't be merged to master, so i will need a <strong>cherry-pick</strong> to pick-up only desired changed from release to master. Remember that team is validating others functionalities in <strong>SIT Environment</strong> (release branch).</p></li>
</ul>
","8","2410547","0","0"
"55330242","1420625","2019-03-25 01:27:10","1","1087","<git><go><git-flow>","""exit status 128"" trying to create git branches from golang","<p>I am trying to create a ""feature branch"" from golang. The following code is not working:</p>

<pre><code>reader := bufio.NewReader(os.Stdin)
fmt.Print(color.RedString(""New feature description: ""))
featureName, _ := reader.ReadString('\n')
featureName = strings.ReplaceAll(featureName, "" "", ""-"")
featureBranchName := ""feature/"" + featureName
cmdStartBranch := ""git""
arguments := []string{""checkout"", ""-b"", featureBranchName}
if _, err := exec.Command(cmdStartBranch, arguments...).Output(); err != nil {
    fmt.Println(color.RedString(err.Error()))
    os.Exit(1)
}
</code></pre>

<p>But hardcoding <code>featureBranchName</code> it works:</p>

<pre><code>cmdStartBranch := ""git""
arguments := []string{""checkout"", ""-b"", ""feature/ciaone-proprio""}
if _, err := exec.Command(cmdStartBranch, arguments...).Output(); err != nil {
    fmt.Println(color.RedString(err.Error()))
    os.Exit(1)
}
</code></pre>
","0","1420625","",""
"52713332","5924738","2018-10-09 04:20:32","1","282","<git><git-flow>","Why doesn't the git flow release finish command do its job completely?","<p>As explained <a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"" rel=""nofollow noreferrer"">here</a>, Git flow's <code>release finish</code> does two things - </p>

<ol>
<li>Merging the release branch into the development branch, and </li>
<li>Deleting itself.</li>
</ol>

<p>But since it is a <code>release</code> branch, shouldn't it also be merged to the master branch before it gets deleted? </p>

<p>Why do we have to merge it to master manually before doing a <code>git flow release finish ...</code>?</p>
","0","5924738","0","0"
"36785507","188475","2016-04-22 05:26:01","4","259","<javascript><node.js><git><npm><git-flow>","Is there a typical way of releasing npm modules, like gitflow but for small modules?","<p>Gitflow is good for large applications with long release branches and many contributors.</p>

<p>On the other hand, NPM modules are tend to be small and focused, often having a single contributor only. Gitflow looks like an overhead or even a significant dragger when a module does a series of <code>-alpha</code> releases (see <a href=""http://semver.org/"" rel=""nofollow"">Semver</a>).</p>

<p>What is the typical way to develop, maintain, and release NPM modules hosted in a git repo?</p>
","4","188475","",""
"52921906","10538332","2018-10-22 03:06:14","1","218","<git><homebrew><git-flow>","Error occurs when initializing git flow in mac","<p>I've been practicing git flow, so I installed <code>git-flow-avh</code> by <em>Homebrew</em>.</p>

<p>But error occurs when I try to initialize git flow by typing <code>git flow init</code> in terminal on my MacBook.</p>

<p>The error message is like in the photo below.</p>

<p>I deleted Sourcetree app and typed <code>git flow init</code> because the one of the errors mentioned Sourcetree but it was the same result. So I think it's not about Sourcetree.  </p>

<p>What can I do to initialize git flow?</p>

<p>By the way, <code>git init</code> is well done.</p>

<p><strong>Errors in terminal:</strong></p>

<p><img src=""https://i.stack.imgur.com/sRFho.png"" alt=""errors in terminal"">  </p>
","1","10538332","0","0"
"37010535","9950","2016-05-03 17:23:30","17","12897","<git><git-flow>","How does git flow handle hotfix to older release or point release of older release","<p>How does git flow handle a hotfix after master has move far beyond that release?</p>

<p><strong>Scenario</strong></p>

<ol>
<li>Work for 1.0 performed on develop, stabilized on releases/v1.0 release branch and pushed to master in fast-forward merge with tag v1.0 pointing to tip of master and tip of stabilization branch</li>
<li>Releases 1.1 - 3.2 take place in much the same fashion.</li>
<li><p>We need to hotfix a bug in 1.0</p>

<ul>
<li>branch from v1.0 tag</li>
<li>perform fix</li>
<li>merge to where?   </li>
</ul></li>
</ol>

<p>Master is far in the future and any merge wouldn't be a fast forward and for fun, let's say would conflict.</p>

<p>Would I merge to release stabilization branch and make new tag?  Is that what subsequent hotfixes would use as their starting point?</p>

<p><a href=""https://i.stack.imgur.com/kF7Uf.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/kF7Uf.png"" alt=""Git Flow Example""></a></p>
","3","9950","0","0"
"53073526","791022","2018-10-30 22:03:47","0","347","<git><git-flow>","Revert failed feature in the develop branch? git-flow development","<p>Let say Developers have been working on <code>A</code>,<code>B</code>,<code>C</code> and <code>D</code> features. </p>

<p><code>A</code>,<code>B</code>,<code>C</code> and <code>D</code> features branches has been merged into Develop branch but QA have not passed the test for <code>C</code> feature in the develop branch. Time is running out and need to be deployed, we are ok to merge everything from develop to master apart from <code>C</code> feature for deployment</p>

<p>What is git-flow procedure for a failed feature that it already merged in the develop? Should it be removed from the develop (git revert)?</p>
","0","791022","0","0"
"37084160","4934640","2016-05-07 03:22:33","2","1073","<git><hook><commit><git-flow><pre-commit>","How to pre-hook the gitflow hotfix finish?","<p>I think I am using the ""<a href=""https://github.com/nvie/gitflow"" rel=""nofollow noreferrer"">https://github.com/nvie/gitflow</a>"", if that is the one which comes within the Smartgit GUI program.</p>

<p>Every time I to commit something, I update the 'build' number. Example: 2.6.0-77 to 2.6.0-78</p>

<p>This is already implemented to hook the pre-commit and increment the build number, but how to create a hook to hook the gitflow hotfix finish and to increment the hotfix version number? Example: 2.6.0-70 to 2.6.1-70</p>

<p>The code to increment the hotfix version is already done. We just need to run:
<code>
githooks/updateVersion.sh patch
</code></p>

<p>Then, we got 2.6.0-70 to 2.6.1-70 over the project. This code is implemented here: <a href=""https://github.com/evandrocoan/.versioning"" rel=""nofollow noreferrer"">https://github.com/evandrocoan/.versioning</a></p>

<p>There, the pre-commit, post-commit hooks are implemented.</p>

<p>If it cannot to be done, we could to do it on the pre-commit hook? We just need to know when we are committing something ordinary, and when we are committing the gitflow finish hotfix.</p>
","0","4934640","",""
"53160480","1076111","2018-11-05 18:56:53","4","5817","<git><atlassian-sourcetree><git-flow><git-extensions>","git-flow is giving error: An item with the same key has already been added","<p>I'm running a git-flow process through source tree, trying to finish my branch. I get this error:</p>

<pre><code>sh.exe ""C:\Program Files\Git\usr\bin\git-flow"" feature finish -k XXX
fatal: ArgumentException encountered.
   An item with the same key has already been added.

fatal: ArgumentException encountered.
   An item with the same key has already been added.
</code></pre>

<p>Strangely enough, this happens against two different repo's.</p>

<p>Any suggestions?</p>

<p>More information: Using ""git extensions"" I was able to finish the both branches. I believe they were both created from source tree though.  The difference is, it seems source tree using git-flow, whereas git extensions seems to use ""git flow""</p>
","0","1076111","",""
"37142178","9950","2016-05-10 14:57:35","1","1045","<git-flow>","Why merge commits for git flow release finish instead of fast-forward HEAD update?","<p>Does git flow avoid fast forward merges for better reporting?</p>

<p>While testing git flow I see not only the commits from my release branch on master &amp; develop but also merge commits.  I thought I'd only see release branch commits and then a fast-forward as git adjusted master &amp; develop to point to the new commits.</p>

<p>As a very simple case, I expected no merge commit requirement since no other changes appeared between the time of release branch start and finish.</p>

<p><strong>What drives the merge commit requirement or did I miss something?</strong></p>

<p>Thanks</p>

<p>Peter</p>

<p><strong>Scenario: Release Stabilization</strong></p>

<ol>
<li>Create release branch (<strong>git flow release start 100.0.0 develop</strong>)</li>
<li>Push for collaboration (<strong>git flow release publish 100.0.0</strong>) (it's just me, so I'm collaborating with myself)</li>
<li>make and commit 1 change on release/100.0.0</li>
<li>Finish release (<strong>git flow release finish</strong>)</li>
</ol>

<p><strong>RESULT</strong></p>

<pre><code>local develop +3 commits to remote
  HEAD    merge tag to develop e191707
  HEAD -1 e0040cb merge from release branch
  HEAD -2 e7cdc02 release branch change

local develop +3 commits to remote
  HEAD    merge tag to develop e191707
  HEAD -1 e0040cb merge from release branch
  HEAD -2 e7cdc02 release branch change

local master + 2 commit to remote
  HEAD e0040cb merge commit 
  HEAD -1 e7cdc02 stabilization change 
</code></pre>
","0","9950","",""
"37246151","4490949","2016-05-16 03:06:24","8","1549","<git><version-control><git-rebase><git-pull><git-flow>","git pull --rebase origin master appears to rebase from the beginning every time","<p>We frequently branch out from master to work on large feature branches. These feature branches are usually worked on for days or even weeks before being merged with master (as much as best practice dictates that we need to merge as frequently as possible, practically it could be different). </p>

<p>As such, we try as much as possible to <code>git pull --rebase origin master</code> in order to remain updated with master. However, we'd occasionally encounter the situation where e.g.:</p>

<p>1) Branch out from <code>master</code> branch to <code>feature/new-branch</code></p>

<p>2) Make changes in <code>feature/new-branch</code> and commit changes.</p>

<p>3) <code>git pull --rebase origin master</code> to put commits on top on master. Fix any conflicts and <code>git add .</code> + <code>git rebase --continue</code></p>

<p>4) Make more changes in <code>feature/new-branch</code> and commit changes. </p>

<p>5) <code>git pull --rebase origin master</code> again. </p>

<p>However, at step 5), the process requires us to fix the same conflicts from step 3). Which can be tedious.</p>

<p>Is this the right best practice git flow and if not, what else can we do to make the process more efficient?</p>
","0","4490949","0","0"
"37889187","5277245","2016-06-17 19:38:21","20","10651","<git><git-flow>","what is support command in git flow","<p>I know what are bugfix, hotfix and feature branches.<br>
But the thing that I can't grasp is support command as <code>git flow support start &lt;version&gt; &lt;branch&gt;</code> </p>

<p>could someone explain this command with a simple scenario?</p>
","0","5277245","0","0"
"70656245","13628101","2022-01-10 17:05:40","4","925","<git><github><gitlab><git-branch><git-flow>","How to remove git remote branches locally which has been deleted online?","<p>After a successful merge request , the branch get's deleted on the gitlab but it still exist on my local machine so how can I remove that branch locally ?</p>
<p><a href=""https://i.stack.imgur.com/PsVdA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PsVdA.png"" alt=""enter image description here"" /></a></p>
<p>How can I remove config-tailwind branch locally only ?</p>
","0","13628101","",""
"70858482","17123424","2022-01-26 03:50:29","-1","149","<git><github><git-flow><github-flow>","What are the correct step by step commands for gitflow workflow?","<ul>
<li><strong>What does one complete lifecycle of gitflow look like?</strong></li>
<li><strong>Which branch is pushed to production: <code>release</code> or <code>main</code></strong>?
<br><br></li>
</ul>
<p>I have done deep research on this topic. But these were the questions whose answers I couldn't find.<br>
Any suggestion gratefully received. Thanks in advance.</p>
","5","17123424","",""
"38250866","2851157","2016-07-07 16:35:36","1","420","<java><xml><maven><git-flow><jgitflow-maven-plugin>","How to specify build options for automatic build triggered by jgitflow release-finish?","<p>When I do <code>mvn jgitflow:release-finish</code>, it triggers a project build which fails because it tries to fetch a plugin from <a href=""https://repo1.maven.org/maven2/"" rel=""nofollow"">https://repo1.maven.org/maven2/</a> and our network doesn't allow that; we need to use the organization's local maven repo.</p>

<p>Now I've specified the URL to this local maven in my settings.xml, and normal builds work fine because I specify the path to this settings.xml as follows: <code>mvn clean install -gs ~/settings.xml</code></p>

<p>But the automatic build triggered by the <code>jgitflow:release-finish</code> goal seems to use it's own build options. I want to know how can I change these build options? </p>

<p>The workaround I'm using right now is to set <code>noReleaseBuild = true</code> in the jgitflow plugin configs in order to skip the build altogether, but I don't want to keep doing this.</p>

<p>Please let me know if there's a way to specify which settings.xml file is to be used in the build triggered by <code>jgitflow:release-finish</code></p>

<p>TIA.</p>
","0","2851157","0","0"
"71107279","11689956","2022-02-14 04:50:02","1","113","<git><git-flow>","How do I hold feature to master with git flow","<p>I'm using git-flow workflow in my current project. Basically, I have 4 kinds of branches:</p>
<ul>
<li><code>master</code>: Main branch for production purpose</li>
<li><code>staging</code>: For testing features before production, similar with <code>release</code></li>
<li><code>development</code>: For development purposes. Feature branches are merged into this branch</li>
<li><code>feature</code>: For developing features</li>
</ul>
<p>Let's say my team is developing 2 features in 2 <code>feature</code> branches, i.e. <code>feature/login</code> and <code>feature/edit-profile</code> branch. Based on <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">this</a> site, <code>feature</code> branches must be merged to the <code>development</code> branch. And for release purpose, Here I merge <code>development</code> to <code>staging</code>, then <code>staging</code> to <code>development</code>.</p>
<p>These 2 features are done, and have been merged to <code>development</code> branch. But somehow, my team decide not to release the <code>feature/edit-profile</code> feature to the <code>staging</code> and <code>master</code>. Since the <code>development</code> branch is now having changes from that branch, the <code>feature/edit-profile</code> branch will be merged to <code>staging</code> and <code>master</code> if I merge from <code>development</code>. How should I do to kinda &quot;hold&quot; some feature?</p>
<p>Thanks in advance!</p>
","0","11689956","",""
"56494468","11613915","2019-06-07 12:35:56","3","187","<java><eclipse><git-flow>","How can I commit the class and the interface in two different features branches (git flow eclipse)","<p>I use Eclipse with Git Flow extension. I try to commit interfaces and classes in two different features branches. After the first commit of the interface in the first feature branch I want to do the same with classes. But the classes have mistakes because some part of code do not be recognized (for example variables, methods etc) because this part of code is in the other branch. What can I do?</p>
","7","11613915","",""
"56527482","719427","2019-06-10 13:34:02","1","710","<git><branch><git-flow><branching-strategy>","git flow with two master branches, is it possible?","<p>I am working in a project with a weird branching scheme. Let's say this is a shared project repository that holds a few websites (just an example below):</p>

<ul>
<li><a href=""http://web1"" rel=""nofollow noreferrer"">http://web1</a></li>
<li><a href=""http://web2"" rel=""nofollow noreferrer"">http://web2</a></li>
<li><a href=""http://web3"" rel=""nofollow noreferrer"">http://web3</a></li>
<li><a href=""http://web4"" rel=""nofollow noreferrer"">http://web4</a></li>
</ul>

<p>from the sites above web1, web2, web3 shares the same functionality, web4 shares the same as the other plus a few changes. The previous team ended building a master branch for web1, web2, web3 and a web4_master for web4. Here is an example in how the branching looks like:</p>

<pre><code>λ git branch
* web4_master
  master
  develop
</code></pre>

<p>I would like to use <code>git-flow</code> here as I do for the rest of the projects with a normal branching scheme (meaning only one master) but in this case I have to main master branches and sometimes code goes to master or to web4_master or both. Is there any way to handle this by using <code>git-flow</code>? Or do I have to be tied to the old way meaning merging changes to wherever they go manually?</p>
","2","719427","",""
"49803156","341878","2018-04-12 17:59:18","0","31","<git><merge><git-flow>","Retrospectively build a release history in the master branch in git","<p>I am trying retrospectively apply the principles of git flow to my repository.</p>

<p>I have all my releases tagged, and I would like to</p>

<ol>
<li>Create a new master branch</li>
<li>Merge each tagged release into the new master branch as a squashed commit.</li>
</ol>

<p>with the result being a master branch with a history containing only releases.</p>

<p>I tried to do the above, the first merge went as expected. And a diff confirmed that my master branch was identical to the tagged release. The second commit appeared to merge correctly, however a diff with the corresponding tagged release commit revealed many differences.</p>

<ol>
<li><p>What could account for the tagged release merge resulting in a commit that was different?</p></li>
<li><p>How do I ensure the result of the merge is exactly the same as the tagged release commit?</p></li>
</ol>

<p>Thanks</p>
","0","341878","",""
"14531054","48424","2013-01-25 22:03:10","7","4736","<git><git-flow>","git flow release finish with a message that contains spaces","<p>How can I provide a real message to <code>git flow release finish</code>?</p>

<p>This is what my attempt and it's output look like:</p>

<pre><code>&gt; git flow release finish -m 'Release 0.0.4 - Fixing a bug' 0.0.4
flags:FATAL the available getopt does not support spaces in options
</code></pre>

<p>The only way I can get it to work is when I don't use any spaces in the message.</p>
","4","48424","",""
"14531243","48424","2013-01-25 22:17:48","32","12101","<git><command-line><git-flow>","`git flow release finish` non-interactively","<p>How I can use <code>git flow release finish</code> in a manner that doesn't ask for merge commit messages? The <code>-m</code> flag doesn't provide this, as I expected.</p>

<p>The goal of course is to be able to script this in such a way that doesn't require interaction.</p>
","1","48424","0","0"
"14534558","398230","2013-01-26 06:36:39","3","213","<git><git-flow>","What is the difference between the following the git config","<p><strong>.git/config 1</strong></p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
[remote ""origin""]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = ssh://johndoe@example.com//repositories/plugins/myproject.git
[branch ""master""]
    remote = origin
    merge = refs/heads/master
</code></pre>

<p><strong>.git/config 2</strong></p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote ""origin""]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = ssh://johndoe@example.com//repositories/plugins/myproject.git
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[branch ""develop""]
    remote = origin
    merge = refs/heads/develop]
</code></pre>

<p>However, on both repositories, when I typed <code>branch -a</code>, both return</p>

<pre><code>git branch -a
* develop
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/master
</code></pre>
","0","398230","0","0"
"67786851","14385814","2021-06-01 10:07:57","0","384","<git-flow>","gitflow-shFlags: No such file or directory in Git","<p>I'm having a trouble when I use <code>git flow</code> the error comes up <code>shFlags no such file or directory</code>
<a href=""https://i.stack.imgur.com/2Zoyn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2Zoyn.png"" alt=""enter image description here"" /></a></p>
<p>what I tried is I've open up the file <code>C:\laragon\bin\git\usr\bin\git-flow</code> <code>git-flow</code> and change the dir from</p>
<pre><code>. &quot;$GITFLOW_DIR/gitflow-shFlags&quot;
</code></pre>
<p>to</p>
<pre><code>. &quot;$GITFLOW_DIR/shFlags/src/shflags&quot;
</code></pre>
<p>But nothing happens. It would be great if anybody could figure out, thank you so much in advance!.</p>
","3","14385814","",""
"67857207","10581494","2021-06-06 08:35:02","2","252","<git><git-branch><git-flow>","Can someone clarify the git workflow where there's a branch on the remote?","<p>I use sourcetree.</p>
<p>My usual workflow is normally:</p>
<ol>
<li>fetch and pull all changes from origin/main into my local</li>
<li>create a local branch - <code>branch-1</code></li>
<li>do the dev work</li>
<li>commit</li>
<li>pull (w/ rebase from <code>origin/main</code>)</li>
<li>push to <code>origin/branch-1</code></li>
<li>submit PR to merge <code>origin/branch-1</code> into <code>origin/main</code></li>
</ol>
<p>However, if the PR is declined and i need to make further changes, what should the process be?</p>
<p>I currently do the same as above, staying on <code>local/branch-1</code> then re-start from 3, except sourcetree seems to make me want to pull from <code>origin/branch-1</code> (at stage 5) instead of <code>origin/main</code>. I'm not sure that's quite right? Or should I be pulling from <code>origin/branch-1</code> and <code>origin/main</code> or something?</p>
<p>Thank you.</p>
","0","10581494","",""
"67930342","5235665","2021-06-11 01:49:10","3","2480","<git><github><merge><git-flow>","Managing changes from develop branch into feature prior to push (git)","<p>Most of the teams I've worked on in the past have followed the same workflow when using Git (with some tiny variations):</p>
<ol>
<li>Pull the <code>develop</code> branch (<code>git checkout develop</code>)</li>
<li>Create a new feature branch off of it (<code>git checkout -b feature/XYZ-123</code>)</li>
<li>Do your work</li>
<li>When you are ready to create a PR, add and commit your changes (<code>git add . &amp;&amp; git commit -m &quot;some commit message&quot;</code>), then check <code>develop</code> back out, pull it (<code>git checkout develop &amp;&amp; git pull</code>)</li>
<li>Switch back over to your feature branch and merge <code>develop</code> into it (<code>git checkout feature/XYZ-123 &amp;&amp; git merge develop</code>)</li>
<li>Finally push (<code>git push -u origin feature/XYZ-123</code>) and create a PR</li>
</ol>
<p>We'll call this the &quot;<strong>Merge Method</strong>&quot;. The benefits are that any changes to <code>develop</code> since you created the branch are now merged into your branch. And so by the time you create a PR, there are no merge conflicts with <code>develop</code> and the code reviewers can see a clean, conflict-free diff between your branch and <code>develop</code>.</p>
<p>I am now working on a team that has a similar flow up until the merge step, but then instead of merging <code>develop</code> into my feature branch, they ask for a rebase from <code>origin/develop</code>. So the actual steps are:</p>
<ol>
<li><code>git checkout develop</code></li>
<li><code>git checkout -b feature/XYZ-123</code></li>
<li>Do your work</li>
<li><code>git add . &amp;&amp; git commit -m &quot;some commit message&quot;</code></li>
<li><code>git checkout develop &amp;&amp; git pull</code></li>
<li><code>git checkout feature/XYZ-123</code></li>
<li>Rebase from <code>origin/dev</code></li>
<li><code>git push -u origin feature/XYZ-123</code></li>
</ol>
<p>We'll call this the &quot;<strong>Rebase Method</strong>&quot;. It too produces merge conflict-free PRs, but obviously it must have different pros/cons from the Merge Method explained up above.</p>
<p><strong>I'm wondering what those pros/cons are.</strong> What does the Merge Method lend itself to that the Rebase Method lacks, and vice versa? When should one method be used as opposed to the other?</p>
","0","5235665","0","0"
"67937806","3423750","2021-06-11 13:22:42","1","144","<git><git-flow>","git-flow prevent non-release commits from going into master","<p>I have started using git-flow branching model in my project.</p>
<p>During release time, I created a new release branch from develop and am allowing only release critical fixes to be committed back to master.</p>
<p>While merging the changes from release to develop branch is there are new commits on develop since release was created, they would have to be merged from develop to release branch first and then from release to develop.</p>
<p>So there is a possibility that these new commits could go to master(latest stable release) if release is is merged to develop first.</p>
<p>Currently, I have frozen the develop branch, so any release critical fixes will have to go to release branch.</p>
<p>But there are a number of feature branches that are waiting to be merged to development.</p>
<p>Is there a better way to handle this?</p>
","1","3423750","",""
"32100228","313115","2015-08-19 15:48:51","0","105","<git><version-control><workflow><git-flow>","Clean git deployment workflow","<p>We are trying to implement an automated workflow for deployment based on git. Currently, we have three environments: development/staging/production. The idea was to mark those environments as branches of the same name (except production=Master), we then have developed a small CLI which takes commands like this:</p>

<pre><code>cli deploy -e production -t patch
</code></pre>

<p>This runs a bunch of internal tasks and, as a final step, merges the local branch into the correct environment branch (in this case Master), then bumps the version in <code>package.json</code> according to SemVer specification (in this case, a patch level version will increment the major.minor.<strong>patch</strong> part) and tags the commit appropriately.</p>

<p>This works very well: we always know what is deployed in which environment, we can rollback easily and we have taken certain steps out of individual developers mistakes.</p>

<p>However, this also results in a less than pretty git log. First off, branch Master is comprised only of merge commits (<code>Merge branch 'hotfix'</code>, <code>Merge branch release-2.0.0</code>, etc.), since we decided to keep the branch history intact. Is this the way it is supposed to look like in the <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">Git Flow</a> Model?</p>

<p>Also, we bump the version after the merge, so really Master branch looks always like: <code>Merge branch 'hotfix'</code>, <code>Bumping version to 2.3.1</code>.</p>

<p>This looks quite ugly and, especially as the project grows, starts becoming more confusing. I'm sure there must be a cleaner way to do this, but I can't figure out what we could adjust.</p>
","2","313115","",""
"15084860","574187","2013-02-26 08:52:22","1","3164","<git><git-flow>","Simple gitflow model with multiple repositories without submodules/subtree?","<p>We have a structure similar to <a href=""https://stackoverflow.com/questions/5514739/best-practice-for-git-repositories-with-multiple-projects-in-traditional-n-tier"">Best Practice for Git Repositories with multiple projects in traditional n-tier design</a>, with the following repositories:</p>

<pre><code>  Shared
  ProjA
  ProjB
</code></pre>

<p>Where <code>ProjA</code> and <code>ProjB</code> are developed by separate teams of 2-3 people, using and sometimes contributing to <code>Shared</code>.</p>

<p>We thought of a simple model that doesn't require subtree or submodules, due to so many scares we read about those 2. Can you review and let us know if such a thing would work?</p>

<ul>
<li>Each <code>Proj</code> and also <code>Shared</code> each live in a separate repo, following the gitflow model</li>
<li>Jenkins will build with the latest from the <code>develop</code> branch of all 3 repos</li>
<li><code>release.sh</code> of a <code>Proj</code> would merge to <code>master</code> of both <code>Proj</code> and <code>Shared</code>, create a tag on both, and Jenkins would build and deploy from <code>master</code>.</li>
</ul>

<p>Can this work? Keep in mind we're only 8 people, and we're just migrating into git, so we would like to keep stuff as simple as possible, so if we can avoid the learning curve of submodules and subtree, we would be happier. Or would we?</p>
","3","574187","0","0"
"15243862","1065291","2013-03-06 09:48:20","5","4095","<git><workflow><git-flow>","git workflow + preproduction","<p>Need some help with organizing branches and workflow.<br>
Preconditions: 10 developers with git, 0 unit tests coverage, 10^5 lines of code.</p>

<p>In our repo with have <code>master</code> branch which acts as <code>production</code>.<br>
Each feature is developed on a different branch, which also creates a new domain (<code>branch.qa.com</code>)</p>

<p>When It's done, QA team goes through the changes on the <code>branch.qa.com</code> and then it's merged into master and automatically pushed to production server.</p>

<p><strong>The problem</strong>:<br>
branch A could have <code>css</code> changes. It gets uploaded to <code>A.qa.com</code> and being checked.<br>
Meanwhile the developer forks branch <code>B</code> from <code>master</code> and works on it, modifying the same <code>css</code>.   </p>

<p>Both changes seems to be legit for their branches, but it may happen that change on <code>B</code> actually crushes something on <code>A</code>.</p>

<p>Merging <code>A</code> into <code>master</code> will be ok. Then merging <code>B</code> into <code>master</code> will have bad impact on the changes made by <code>A</code>.</p>

<p><strong>Ho do you rule out this situations? How do you incorporate <code>pre production</code>?</strong></p>
","3","1065291","0","0"
"15326093","209706","2013-03-10 18:48:09","12","5438","<git><git-flow>","git-flow vs. normal git commands","<p>I've read a couple of information about git-flow, but still don't understand why it should be used instead of plain git commands. To me it looks like it propagates a (fairly complicated) branch-setup. OK, this should be easily adoptable. Git-flow also adds some higher-level commands around the lower-level, normal git commands.</p>

<p>Could someone please explain in only a few words the benefits of using git-flow over using plain git commands?</p>
","0","209706","0","0"
"16874053","973225","2013-06-01 15:05:22","2","346","<git><branch><git-flow>","How should I apply the git-flow paradigm to my project?","<p>I have started to use git flow and have some questions.</p>

<ol>
<li><p>In examples like <a href=""http://yakiloo.com/getting-started-git-flow/"" rel=""nofollow"">here</a> and <a href=""https://www.lucidchart.com/community/examples/view/4d454c50-6b0c-47eb-9238-11040ad09a4f"" rel=""nofollow"">here</a> I see a release branch started and then several commits done before the release branch gets finished. Why is that? 
Shouldn't everything be ready and then being released? In the first example there is even a new feature developed while the release branch is open.</p></li>
<li><p>I am about to do some refactoring to my current project. What branch should I use/create? A feature branch seems not right to me because it's no feature as per definition. Should I do it right in the development branch?</p></li>
<li><p>As far as I have seen and read, feature branches are local only but what if I want to develop a feature with a whole team?</p></li>
</ol>
","1","973225","",""
"33440103","46194","2015-10-30 15:58:10","0","136","<windows><git><windows-10><git-flow>","Strange folder showing up when using git flow on Windows","<p>I am new to git-flow. I am playing around with it to get a feel for it. I am running git 2.6.2 on Windows 10. Most things seem to work fine, but I have run into this problem:</p>

<p>I create two feature branches with conflicting content. Then I finish them both. When I finish the second, I naturally get a conflict, which I can then resolve. However, at that point git flow seems to have created a strange folder.</p>

<pre><code>&gt; git flow feature start PPLAN-0007_Doubles
    [make change to files]
&gt; git commit -am ""PPLAN-0007: overloaded add
    [make more change to files]
&gt; git commit -am ""PPLAN-0007: overloaded subtract""
&gt; git flow feature start PPLAN-0008_single
    [make conflicting change to files]
&gt; git commit -am ""PPLAN-0008: overloaded add""
    [make more change to files]
&gt; git commit -am ""PPLAN-0008: overloaded subtract""
&gt; git flow feature finish PPLAN-0007_Doubles
&gt; git flow feature finish PPLAN-0008_single --showcommands
Branches 'develop' and 'origin/develop' have diverged.
And local branch 'develop' is ahead of 'origin/develop'.
git checkout develop
Already on 'develop'
Your branch is ahead of 'origin/develop' by 3 commits.
  (use ""git push"" to publish your local commits)
git merge --ff feature/PPLAN-0008_single
Auto-merging Math.cs
CONFLICT (content): Merge conflict in Math.cs
Recorded preimage for 'Math.cs'
Automatic merge failed; fix conflicts and then commit the result.

There were merge conflicts. To resolve the merge conflict manually, use:
    git mergetool
    git commit

You can then complete the finish by running it again:
    git flow feature finish PPLAN-0008_single
&gt; git mergetool
    [fix merge conflict]
&gt; git status
On branch develop
Your branch is ahead of 'origin/develop' by 3 commits.
  (use ""git push"" to publish your local commits)
All conflicts fixed but you are still merging.
  (use ""git commit"" to conclude merge)

Changes to be committed:

        modified:   Math.cs

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        ""(cd .git \357\200\276/""
</code></pre>

<p>As you can see, I now have a strange untracked file. It is actually a folder structure that has been created. It looks like this in <code>GitExtensions</code>:</p>

<p><a href=""https://i.stack.imgur.com/FnUce.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FnUce.png"" alt=""enter image description here""></a></p>

<p>It looks like something a unix command would create.</p>

<p>None of the <code>git flow</code> commands report any errors. The file actually seems to have been created immediately after the second finish command. It doesn't really matter if I resolve the conflicts or not.</p>

<p>What is going on? Am I doing something wrong? Something that needs to be configured?</p>

<p>I do have what seems to be a workaround: I can delete the strange file, and then continue with <code>git flow feature finish PPLAN-0008_single</code>.</p>
","4","46194","",""
"16893104","539543","2013-06-03 08:54:45","5","2044","<git><git-flow>","missing changes in commits in git","<p>I have a team of a few people working on the same git repository, using the git flow method (master, develop, hotfixes, features, releases), and a remote bare repository.</p>

<p>We had a hotfix with a few commits that was merged successfully into master and all was good.
Now, a week later, and a lot of changes later, after continuing to work on develop, we had a release branch that was not merged into master as well.</p>

<p>We noticed that some files in the system got reverted back to the state they were <strong>before the hotfix</strong>. These files were only touched lately in the hotfix mentioned, and no further changes were made on them in the develop branch.</p>

<p>The weird part is that I can't find a merge in the git log history that shows a conflict on any of these files, which can indicate that a team member got a conflict and didn't resolve it correctly.</p>

<p>All I can see are the commits from the hotfix which added the desired changes, but I can't find a later commit that reverts those changes.</p>

<p>I tried using <code>git whatchanged -p -r -m -- myfile</code> and again, all I see are the commits from the hotfix.</p>

<p>How can I find out what happened to those files? Could it be a corruption in my repository?</p>
","6","539543","0","0"
"16958589","112451","2013-06-06 09:33:59","1","480","<git><laravel><laravel-4><git-flow>","Git tags from Laravel app with git-flow","<p>I'm building a Laravel 4 app, I began this with the skeleton app which I had downloaded and I was tracking the upstream for the frequent updates <a href=""http://niallobrien.me/2013/03/installing-and-updating-laravel-4/"" rel=""nofollow"">as per Niall O'Brien's instructions</a>.</p>

<p>I've just started using git-flow on the project and I was testing my first feature branch and release. My release was tagged and pushed to my remote Unfuddle repository and its pushed my tag (0.01) but also appears to have pushed all the tags from the laravel skeleton app. What should I do here to remove the tags from local and remote - if indeed I should remove them?</p>

<p>Thanks.</p>
","0","112451","0","0"
"16962737","1385067","2013-06-06 12:57:45","2","290","<git><web-deployment><git-merge><git-flow><git-log>","how to find git merge commits which merges into current branch","<p>At my company we are using <a href=""https://github.com/nvie/gitflow"" rel=""nofollow"">git flow</a> to manage the development of a number of sites.
All of these sites are forks of a base repo. It is easy enough to update the sites with updates from the upstream project.
But updating the base projects with features from the sites is giving me some headaches.</p>

<p>Each site has its own repository as origin and the base as a profile remote.</p>

<p>All the common stuff that these sites share are located under one directory, and we could properly use git subtrees, but we currently do not. </p>

<p>Currently I check out the develop branch from profile and checkout the shared directory from the local master, commit and push to profile/develop. This squashes all features into one commit.</p>

<p>What I would like to do is: pull individual features from the different sites into profile/develop.</p>

<p>The problem is: when features are tested, publish on the site and ready to be merged upstream, the feature is already merged into master by git flow, at this point.</p>

<p>I have not been able to find a way of finding already merged in features in the git history of the local sites.</p>

<p>I have come up with a script which can tell me the merge commits that bring in stuff to the current branch:</p>

<pre><code>git log --decorate --graph  --all|grep --before-context=1 --after-context=4 ""^|\\\\""|grep ^\*|awk '{for(i=1; i &lt;= NF; i++){if($i ~ /commit/){com = i + 1;print $com}}}'
</code></pre>

<p>When I run this this command in the local develop branch I can do a format-path on the different merges, and do a more granular update of the profile.</p>

<p>Could anybody please show me a more correct way of doing it.</p>
","0","1385067","0","0"
"18049556","1240896","2013-08-05 01:48:41","10","10998","<git><git-flow>","How can I see the git history of a deleted branch (used git flow)","<p>I used <a href=""https://github.com/nvie/gitflow"" rel=""noreferrer"">git flow</a> to create two branches with <code>git flow feature start &lt;feature name&gt;</code>.  I don't remember whether I finished by</p>

<ol>
<li>Using <code>git flow feature finish</code> on both branches,</li>
<li>Merging branch <code>A</code> into branch <code>B</code>, deleted branch <code>A</code>, and then running <code>git flow feature finish</code> from branch <code>B</code>, or</li>
<li>Merging branch <code>B</code> into <code>develop</code> with <code>git flow feature finish</code> and then merging branch <code>A</code> into <code>develop</code> with <code>git merge</code>, resolving the merge conflicts, and then deleting branch <code>A</code> with <code>git branch -d &lt;branch name&gt;</code></li>
</ol>

<p>Using <code>git reflog</code> the last trace of branch <code>A</code> I can find is <code>e553bf0</code> in the series:</p>

<pre><code>e553bf0 HEAD@{40}: checkout: moving from feature/a to develop
6b30050 HEAD@{41}: checkout: moving from develop to feature/a
e553bf0 HEAD@{42}: checkout: moving from feature/a to develop
6b30050 HEAD@{43}: checkout: moving from develop to feature/a
e553bf0 HEAD@{44}: commit (merge): resolved merge conflicts
7a0ad6b HEAD@{45}: checkout: moving from feature/a to develop
6b30050 HEAD@{46}: checkout: moving from develop to feature/a
7a0ad6b HEAD@{47}: merge feature/b: Merge made by the 'recursive' strategy.
921ae46 HEAD@{48}: checkout: moving from feature/b to develop
</code></pre>

<p>Also, <code>git log</code> shows</p>

<pre><code>commit e553bf07272ab2b1975917b736b37127636c0db1
Merge: 7a0ad6b 6b30050
Author: Eric Baldwin &lt;address-here&gt;
Date:   Thu Jul 25 14:58:49 2013 -0400

    resolved merge conflicts

commit 7a0ad6b2277c0c0a7599193829f68517ac708ca2
Merge: 921ae46 02558b6
Author: Eric Baldwin &lt;address-here&gt;
Date:   Thu Jul 25 14:03:56 2013 -0400

    Merge branch 'feature/b' into develop
</code></pre>

<p>The code from both features is currently in <code>develop</code>, but I don't know in order the merges happened.  Can someone tell me which of the three scenarios occurred based on the history?</p>

<p>Edit:</p>

<p>Output from <code>git log --oneline --graph develop</code>:</p>

<pre><code>* 2ebb938 misc
*   69f95f6 Merge 'feature/x' into 'develop' merge conflicts
|\  
| * 8b9b275 Merge 'develop' with feature/x; minor merge tweaks
| * eb89630 misc
| * 54884d2 misc
| *   76f02bb Merge branch 'develop' into feature/x
| |\  
| * | d06d673 misc
| * | 0ba5235 misc
* | | 5489590 misc
* | | a215bd2 misc
* | | 4aacaa7 misc
* | |   e553bf0 resolved merge conflicts
|\ \ \  
| * | | 6b30050 fixed test db error
| * | |   64909f9 Merge branch 'develop' into feature/a
| |\ \ \  
| * \ \ \   e7319e1 Merge branch 'develop' into feature/a
| |\ \ \ \  
| * | | | | 410786b misc
| * | | | | 67267f3 misc
| * | | | | ae4b800 misc
| * | | | |   9e281eb Merge branch 'develop' into feature/a
| |\ \ \ \ \  
| * | | | | | f8fa2ec misc
* | | | | | |   7a0ad6b Merge branch 'feature/b
|\ \ \ \ \ \ \  
| * | | | | | | 02558b6 ready to merge
| * | | | | | |   cc07f79 Merge branch 'develop' into feature/b
| |\ \ \ \ \ \ \  
| | | |_|_|/ / /  
| | |/| | | | |   
| * | | | | | | 4b6610f misc
| * | | | | | |   25e509b Merge branch 'develop' into feature/b
| |\ \ \ \ \ \ \  
| | | |_|_|/ / /  
| | |/| | | | |   
| * | | | | | |   df5640d merged with develop
</code></pre>
","3","1240896","0","0"
"51496954","3088045","2018-07-24 11:01:04","4","1604","<git><git-merge><redmine><rebase><git-flow>","How to keep a clean (rebased) history with 'git-flow'?","<p>I usually prefer rebase for having a clear history (at least on the <code>master</code> branch).</p>

<p>Taking a look at <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer""><code>git-flow</code></a> looks like it <strong>needs</strong> to work with merge commits. This feels ugly/untidy because of all the merge commits (I usually rebase), but also because of multiple merge commits related to the same code (<code>ui-feature1</code> merged to <code>ui-development</code>, then merged to <code>development</code>, then merged to <code>master</code>; the same even without at <code>ui-development</code> branch).</p>

<p>Rebase instead would be cleaner/prettier, but it creates replayed-duplicated commits, so:</p>

<ul>
<li>it is more complicated to understand where to branch from (cause of the risk of diverged branches)</li>
<li>requires to do additional maintenance (some branches will be always rebased in, while others will need to be deleted and recreated)</li>
<li>systems like Redmine (whose Issues/Tickets can list all the corresponding repository commits that refer them via <code>refs #redmine-issue</code> in the commit message) would show the <em>source</em> <strong>and</strong> the <em>rebased</em> commit, when <code>ref</code>erring the issue in the first source commit.</li>
</ul>

<p>Is there any middle way?
Any way to have a nice integration of <em>git-flow</em> but still having Redmine-issues referenced in commits' message?</p>

<p>How does <code>git rebase</code> play with <em>git-flow</em>? Are there other valid git workflows that favour <em>rebase</em> rather than <em>merge</em>? Is it possible to follow <em>git-flow</em> without having merge commits?</p>
","1","3088045","",""
"51515245","1972562","2018-07-25 09:17:46","1","1336","<git><bitbucket><git-flow><merge-conflict-resolution>","Fixing merge conflicts with git flow","<p>I'm using the following flow: There's master, test and feature branches. Feature branches are branched from master. Pull requests are made from feature branches to test and then (when approved) from the feature branch to master. Whenever I make pull request from feature to test, there's a chance a merge conflict occurs. I would like to fix this conflict locally..</p>

<p>My way of doing this is merging the test branch to my feature branch (locally), fix the conflict, and push the merge. Then the pull request is fixed. HOWEVER, this causes <strong>ALL changes (features) from the test branch to come along when I create a PR from that feature branch to master</strong>. This is of course not what I want, since some of those features haven't been tested yet.</p>

<p>What is the best way to fix merge conflicts (locally) without merging the test branch to my feature branch (causing this issue)? </p>
","0","1972562","",""
"51529600","1270789","2018-07-26 01:04:29","2","1357","<git><git-flow>","git flow feature finish doesn't push if origin/develop out of sync","<p>I just noticed that if we have local and <code>origin/develop</code> looking like</p>

<pre><code>local:          A---B
origin/develop: A---B
</code></pre>

<p>If I then do <code>git flow feature start Z</code> and work for a while I might end up with:</p>

<pre><code>local:          A---B
origin/develop: A---B---C---D
</code></pre>

<p>I now do <code>git flow feature finish Z</code> and I get a warning about:</p>

<blockquote>
  <p>Branches 'develop' and 'origin/develop' have diverged.<br/>
  And local branch 'develop' is ahead of 'origin/develop'</p>
</blockquote>

<p>I now have (no push):</p>

<pre><code>local:          A---B---Z
origin/develop: A---B---C---D---E
</code></pre>

<p>I try to do <code>git pull</code> and down comes a bunch of updates that git merges into <code>develop</code>, so I end up with:</p>

<pre><code>local:          A---B---Z-----------Z'
                     \--C---D---E--/
origin/develop: A---B---C---D---E
</code></pre>

<p>If I do a <code>git push origin/develop</code> I'm going to muck up our nice neat single <code>develop</code> stream, so after some googling I ended up doing:</p>

<pre><code>git pull --rebase --prune
git push origin develop
</code></pre>

<p>This restored me to:</p>

<pre><code>local:          A---B---C---D---E---Z
origin/develop: A---B---C---D---E---Z
</code></pre>

<p>Doing this I actually discovered that a previous feature had also failed because of the same problem... I thought we used <code>git flow</code> to hide all these common niggles and pitfalls.</p>

<p>So, am I using <code>git flow</code> wrongly? Is there some extra command one should always do before <code>feature finish</code> to ensure you don't get out of sync?</p>
","0","1270789","0","0"
"51561732","1670830","2018-07-27 16:08:01","5","1812","<atlassian-sourcetree><git-flow>","Can't initialise git-flow with SourceTree","<h1>My problem</h1>
<p>In the current project I'm working on, I'm not able to initialise <code>gitflow</code> with SourceTree. Can you help?</p>
<p>My version of SourceTree is <code>2.7.6</code>.</p>
<h1>Screenshots</h1>
<p>If I try to do</p>
<p><a href=""https://i.stack.imgur.com/wG3eK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wG3eK.png"" alt=""enter image description here"" /></a></p>
<p>then I have this dialog</p>
<p><a href=""https://i.stack.imgur.com/zrzM8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zrzM8.png"" alt=""enter image description here"" /></a></p>
<p>But when I confirm, I have the error</p>
<p><a href=""https://i.stack.imgur.com/HoOA1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HoOA1.png"" alt=""enter image description here"" /></a></p>
","0","1670830","0","0"
"51700410","1099211","2018-08-06 04:02:40","3","1790","<node.js><git><npm><version-control><git-flow>","Versioning of npm dependencies with standard gitflow","<p>I am following standard gitflow, and I have different environments for testing the dev builds, and release builds. master goes to production. </p>

<p>I also have my JS app divided into multiple private npm modules which goes into private npm repository.</p>

<h3>Q1</h3>

<p>Is there any way I can version my npm packages, against the branches they are built on in a standard way?</p>

<p>What I have tried is, I have <code>prerelease</code> <code>pre-ids</code> added to the versions. like<br>
<code>1.0.0-rc.0 //for master</code><br>
<code>1.0.0-beta.0 //for release</code><br>
<code>1.0.0-alpha.0 //for dev</code>  </p>

<p>But if I create a feature branch from master, it contains the master's version. When I try to raise a PR from it to dev, then it shows conflict, since dev has <code>-alpha.x</code> in its version. To resolve the conflict, I'll have to consume the target branch's versioning. Same issue when it goes for merging on release branch too. </p>

<p>And when it comes to merging to master, the release version (one with <code>-beta.0</code>) completely replaces the master.
So it becomes like this: on master, </p>

<pre><code>| It was        | After Merge   | After version bump  |
| ------------- |:-------------:| -------------------:|
| 1.0.0-rc.0    | 1.0.0-beta.0  | 1.0.0-rc.0          |
</code></pre>

<p>Ideally after the version bump i would have wanted it to be 1.0.0-rc.1</p>

<p>Is it possible to keep package JSONs out of versioning. </p>

<h3>Q2</h3>

<p>How do I control the versioning in the package JSON of the application where these NPM modules are consumed? It too is on <em>gitflow</em> and feature branching model, and I would want that the App, when it is building on <em>dev</em> branch, it builds with artifacts that are published from their respective <em>dev</em> branches.</p>

<p>Honestly, I might be misusing gitflow too, but as of now, too confused to figure out where I'm going wrong.</p>

<p>Any Help will be appreciated. </p>

<p>Thanks in Advance</p>
","2","1099211","0","0"
"51758359","73103","2018-08-09 03:24:37","4","2005","<git><git-flow>","Recommended git workflow that allows features to be deployed independently","<p>In our organization we're currently using the following flow.<a href=""https://i.stack.imgur.com/3gBWK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3gBWK.png"" alt=""enter image description here""></a></p>

<p>Feature branch is forked from the production branch. Feature is implemented in the feature branch on the developer machine. Then feature branch is merged into <code>develop</code> branch which is automatically deployed on staging server.</p>

<p>The feature is tested by users on the staging server and if the business decides that it is good and that it is time to deploy it on live server, feature branch is merged second time, this time into the <code>production</code> branch which is deployed on the production server then.</p>

<p>But some features are abandoned for various reasons. For example, business decides that it's not yet time to deploy the feature to the live server. Or maybe it's no longer required. Or maybe we'll return to it one year later. On my picture the <code>feature/1</code> is never merged into <code>production</code> branch but is merged into <code>develop</code> branch.</p>

<p>This means that <code>develop</code> branch diverge more and more from the <code>production</code> branch. Note that <code>develop</code> is <strong>never</strong> merged to <code>production</code> (in the canonical git flow, <code>develop</code> is merged to <code>production</code> by using <code>release</code> branches).</p>

<p>In my opinion this workflow requires a lot of manual labor. Because <code>production</code> and <code>develop</code> are different, manual merge is required when the feature branch is merged to <code>develop</code> for testing. This is also error-prone because we have old unused code from feature branches in <code>develop</code> that is never going away. Not only it makes merges complicated, but it also means that feature branch code may work differently in the <code>develop</code> and <code>production</code> branches because the old unmerged code can affect the feature code.</p>

<p>Also, I have a feeling that with every new feature this will make the work more and more complicated because amount of differences between <code>develop</code> and <code>production</code> will inevitably grow. There's no point in flow where <code>develop</code> and <code>production</code> are reconciled, so I'm afraid that one year later and maybe 10,000+ commits later the merges will become simply too complex to handle. Even now we have merge bugs. Some are evident, some are subtle and very hard to find.</p>

<p>I've raised the question several times to CTO that this flow is inherently inefficient and error-prone. But he insists that this flow is optimal because it allows business to choose when features are deployed to production. Also, he claims that he had used exactly the same flow at previous jobs in big companies.</p>

<p>I also have a lot of experience but I never had seen such flow and I never read about such flow in a book or blog article.</p>

<p>I have two questions:</p>

<ol>
<li>Is such flow (where <code>develop</code> and <code>production</code> are constantly diverging) indeed used in big teams?</li>
<li>If I'm right that it is suboptimal at best, what is the best way to persuade the CTO to migrate to a better flow (for example, canonical git flow)?</li>
</ol>
","11","73103","0","0"
"38542480","2509777","2016-07-23 13:45:56","0","38","<git><git-flow>","Fixing rebased commits in git flow develop/master branches","<p>I've messed up my commit history big time. I was testing some cron jobs, and I've commited with the wrong dates. So i have commits with time stamps 2 days in the future, then back to the present. Whats even worse, i have already merged the feature with the commits to both develop and master, and even based another feature on top of it :')
I've looked up that I can edit the dates of commits doing a <code>git rebase -i -p</code> and then amending the offending commits, but after I change all those commits into new ones, whats going to happen with the other branches that already have the 'old version' of the rebased commits? This has been already pushed, and i'm the only developer in this project.</p>
","2","2509777","",""
"53881918","7668817","2018-12-21 09:07:10","1","1334","<git><maven><maven-plugin><git-flow><jgitflow-maven-plugin>","Personalise jgitflow maven plugin","<p>i started using jgitflow in a java project, and i want to achieve something like below:</p>

<pre><code>&lt;plugin&gt;
   &lt;groupId&gt;external.atlassian.jgitflow&lt;/groupId&gt;
   &lt;artifactId&gt;jgitflow-maven-plugin&lt;/artifactId&gt;
   &lt;version&gt;1.0-m5.1&lt;/version&gt;
   &lt;configuration&gt;
      &lt;noDeploy&gt;true&lt;/noDeploy&gt;
   &lt;/configuration&gt;
   &lt;executions&gt;
      &lt;execution&gt;
         &lt;id&gt;execution1&lt;/id&gt;
         &lt;goals&gt;
            &lt;goal&gt;hotfix-start&lt;/goal&gt;
            &lt;goal&gt;release-start&lt;/goal&gt;
            &lt;goal&gt;feature-start&lt;/goal&gt;
            &lt;goal&gt;feature-finish&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
            &lt;allowSnapshots&gt;true&lt;/allowSnapshots&gt;
         &lt;/configuration&gt;
      &lt;/execution&gt;
      &lt;execution&gt;
         &lt;id&gt;execution2&lt;/id&gt;
         &lt;goals&gt;
            &lt;goal&gt;hotfix-finish&lt;/goal&gt;
            &lt;goal&gt;release-finish&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
            &lt;allowSnapshots&gt;false&lt;/allowSnapshots&gt;
         &lt;/configuration&gt;
      &lt;/execution&gt;
   &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p>when i start a new hotfix i should be able to create it, but i got this error:</p>

<pre><code>[ERROR] Failed to execute goal external.atlassian.jgitflow:jgitflow-maven-plugin:1.0-m5.1:hotfix-start (default-cli) on project jgitflow-test: Error starting hotfix: Error starting hotfix: org.eclipse.jgit.api.errors.TransportException: https://gitlab.audaxis.com/compiere-client/client-xxx/jgitflow-test.git: not authorized -&gt; [Help 1]
</code></pre>

<p>How can i fix this ?</p>

<p>and thank you </p>
","0","7668817","",""
"71822557","10686620","2022-04-11 03:54:21","3","911","<git><git-flow>","git flow for feature branch","<p>The current git flow for the team.<br/></p>
<p>3 branches in total</p>
<pre><code>main
develop
feature
</code></pre>
<p>When we're in the development stage<br/>
When there is a new jira ticket, we will create a feature branch from develop.<br/>
After completing the feature, we will merge the feature into develop.<br/>
When we want to update the main branch, we will merge develop into main branch.<br/></p>
<p>But the application is now open to public, we want to have better git flow.<br/>
As usual, if we finish the feature, we will merge it into develop branch.<br/>
Then the tester will test if the feature is completed without bug.<br/>
Once the testers've tested, they will ask us(developers) to deploy <strong>ONLY</strong> that feature, <br/>which is totally different from previous practice<br/></p>
<p>For example, if developers complete feature A and then the testers've verified it in develop branch, after that we have to merge only feature A into main branch.</p>
<p>Therefore I want to know if there is any suggested flow for this situation.<br/></p>
","6","10686620","0","0"
"71851544","827880","2022-04-13 03:34:07","0","405","<git><git-flow>","How to update git flow release branch name to reflect minor version increase?","<p>Lets say I started release using:</p>
<blockquote>
<p>git flow release start 1.5.0</p>
</blockquote>
<p>Then I published the release branch as part of CI/CD for bitbucket pipelines to build this release for testing team:</p>
<blockquote>
<p>git flow release publish 1.5.0</p>
</blockquote>
<p>Then I made a fix to a bug on this branch, but have not committed it yet. I feel like the version must be something like 1.5.1. Not necessarily, but even internally it would be nice to know that bug found in 1.5.0 have been closed in 1.5.1.</p>
<p>How do I update version to 1.5.1 using git flow? (I know how to create branches using plain git commands, but I am trying to use git flow technique). Or am I trying to use git flow the wrong way?</p>
","0","827880","",""
"71907389","14549200","2022-04-18 03:42:54","0","980","<github><github-actions><git-flow>","How to automate a git-flow with Github Actions?","<p>How to create jobs to control git-flow?</p>
<p>We know that in the git-flow process, we have specific branches to be used and at the right times, such as (develop, hotfix, feature) and we also know that when inserting the source code into main (which would be the last step) , the commit must be versioned.</p>
<p>That is, how to create a job to do this control of push's, following git-flow and also the automated versioning of the code?</p>
<p>EXAMPLE:
<a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"" rel=""nofollow noreferrer"">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></p>
","3","14549200","",""
"54126429","3804707","2019-01-10 10:17:36","1","132","<git-merge><git-flow>","Forcing merge commits with jgitflow-gradle-plugin","<p>Can I make <code>jgitflow-gradle-plugin</code> to create always a merge commit when I complete a feature (i.e. when I call task featureFinish)? I would like to avoid fast-forward merge of a feature branch to the develop branch.</p>

<p>When using Maven plugin <code>jgitflow-maven-plugin</code>, I can prevent fast-forward merging by the plugin property <code>suppressFastForward</code>. I am looking for analogous behavior with Gradle plugin <code>jgitflow-gradle-plugin</code>.</p>

<p>I have tried to set Git property <code>merge.ff</code> to <code>false</code> but it does not help.</p>
","0","3804707","",""
"54167743","1658005","2019-01-13 09:57:46","5","919","<macos><git-flow><hotfix>","How to make gitflow allow multiple hotfix creation?","<p>I'm struggling to set gitflow to allow multiple hotfixes creation...
I've run the commands:</p>

<pre><code>git config --add gitflow.multi-hotfix true
git config --global gitflow.multi-hotfix true
</code></pre>

<p>And when I run:</p>

<pre><code>git config --list
git config --global --list
</code></pre>

<p>I can see that it is set properly</p>

<pre><code>gitflow.multi-hotfix=true
</code></pre>

<p>But still... every time I try to create a new hotfix it asks me to first finish the current hotfix...</p>

<p>My mac book pro is running Mojave 10.14.1 (18B75)</p>

<p>Another detail that may help, I've noticed that every-time I run the adding command another line in the configuration is added with the exact same info gitflow.multi-hotfix=true. So, I've tried clearing all settings and start from scratch and run the following:</p>

<pre><code>git config --unset gitflow.multi-hotfix
git config --unset-all gitflow.multi-hotfix
</code></pre>

<p>But no matter how many times I try and run these commands the line of allowing multiple hotfixes remains, but I cannot actually create multiple hotfix branches..</p>
","1","1658005","0","0"
"54200818","3868032","2019-01-15 14:24:41","1","819","<git><workflow><git-flow>","With gitflow, which branch must be on local and which one must be on remote?","<p>I'm going to switch to gitflow ! i'm confused if i should create all branches on remote or there are branches that should be on local !
thank you for your help.</p>
","2","3868032","0","0"
"54205504","4143225","2019-01-15 19:19:41","0","222","<git><git-merge><git-rebase><git-flow><git-config>","Preventing a wrong-way git merge","<p>Right now at work, we have different git branches for different versions of our product. For example: branches called v1.0, v2.0, v3.0 and a master branch.</p>

<p>Different customers run different versions, but new features are only merged into the latest version branch and the master branch. Bugfixes however, are still merged in on lower version branches. Let’s say a bug was found on v1.0, then our current git workflow is:</p>

<ol>
<li>to make a feature branch from v1.0, </li>
<li>make the fix</li>
<li>Merge back into v1.0 and push</li>
<li>Merge v1.0 into v2.0 and push</li>
<li>Merge v2.0 into v3.0 and push</li>
<li>Merge v3.0 into master and push</li>
</ol>

<p>This causes bugfixes found on lower versions to be included in all versions upwards of the product.</p>

<p>V3.0 would thus contain all commits that v2.0 contains, plus additional feature commits made on version v3.0. Master would contain all commits that v3.0 contains, plus additional feature commits for the future release of the product etc.</p>

<p>Now we've had a few times where people made the merge the wrong way, downwards instead of upwards. So they merged v3.0 into v2.0 for example. This causes huge problems in the sense that whenever there is a new bugfix release of the product for customers on v2.0 of the software, they would actually get v3.0.</p>

<p>It’s actually quite easy to do these merges the wrong way, but the consequences can be quite big especially if the wrong merge stays undetected for a long time.</p>

<p>Is  there any way to prevent people from merging downwards in the version branches, and only upwards? (So from v1.0 to v2.0 etc.).</p>

<p>I should mention that we cannot define any custom git-hooks on the server side.</p>
","0","4143225","",""
"72257152","5059958","2022-05-16 09:41:58","1","535","<git><git-flow>","Using ""git flow release finish"" why merge master into develop not use the release branch?","<p>I have question about git flow operation. I watched <a href=""https://nvie.com/posts/a-successful-git-branching-model/#release-branches"" rel=""nofollow noreferrer"">the post</a> about the &quot;Release branch&quot;. Finally, the release branch merged into master and develop respectively.  I also followed the commands, and the commit graph had been correct.</p>
<p><a href=""https://i.stack.imgur.com/EG8hW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/EG8hW.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/rxDTk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rxDTk.png"" alt=""enter image description here"" /></a></p>
<p>I used <a href=""https://github.com/petervanderdoes/gitflow-avh"" rel=""nofollow noreferrer"">gitflow-avh</a> or sourcetree to same operations, but the commit graph was different. Why the master branch merge into the develop branch not use the release branch?</p>
<p><a href=""https://i.stack.imgur.com/Lx9BQ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Lx9BQ.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/rjyXe.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rjyXe.png"" alt=""enter image description here"" /></a></p>
","0","5059958","",""
"72260975","9962824","2022-05-16 14:37:58","1","150","<git><git-flow>","Is it a good practice to use git merge `ours` strategy in a git flow release process","<p>I've 3 branches: <code>Dev</code> (on which developers push their code), <code>Qa</code> (on which tests are done) and <code>Master</code> (production code).</p>
<p>When releasing, we <code>merge</code> (default merge) <code>Qa</code> into <code>Master</code> and <code>Dev</code> into <code>Qa</code>. I've also found people using <code>rebase</code> instead of <code>merge</code>.</p>
<p>But, what about using <code>merge -s ours</code> ?</p>
<p>This will ensure that the code of <code>Master</code> is exactly the one of <code>Qa</code> we just tested. We get rid of side effects of the default <code>merge</code> (like kept code of <code>Master</code> against <code>Qa</code> which shouldn't). Moreover, the automation tool can do the whole release for us because we don't get any merge conflict during the process.</p>
<p>Is it a good idea ? And what's the best practice ?</p>
","6","9962824","",""
"54298658","1762295","2019-01-21 22:31:00","2","961","<git><git-branch><git-flow>","git branch and checkout does nothing?","<p>I am a new to git workflow (used to a proprietary version control system at work). I followed some tutorial on how to make a branch locally, make changes there, all without affecting master. Here's what I did:</p>

<ol>
<li><code>git clone &lt;url&gt;</code></li>
<li><code>git checkout -b change_readme</code></li>
<li>make a random change to the <strong>Readme</strong> file.</li>
<li><code>git checkout master</code></li>
</ol>

<p>But the same change is seen in Readme now. </p>

<p>I thought I am back to master and there shouldn't be any change. Also, if I made a change in master, the same change is also there when I move back to the <code>change_readme branch</code>. It is as if I never did any branching. </p>
","1","1762295","",""
"56554355","11497070","2019-06-12 03:38:11","4","715","<git><gitlab><git-branch><git-flow>","git branch workflow policy","<p>I am new to git and understand a little bit about Git.<br>
My company is currently have 1 program and the program divides into 5 products. each product is handling by different team. </p>

<p>Currently my company git have 5 branches such as :</p>

<ul>
<li>dev = this branch is for developer to build program (dev.program.com)</li>
<li>test(alpha) = this branch is for tester to test the program (test.program.com)</li>
<li>staging(beta) = this branch is for tester test the program (double check of error ) and client test the program. (stg.program.com)</li>
<li>staging-trx = the duplicate of staging and for developer to make sure that no error conflict while cherry pick from staging before it is served to production. (stg-trx.program.com)</li>
<li>master = merge from staging-trx and ready for production (master.program.com)</li>
</ul>

<p><strong>This is our work flow.</strong></p>

<ol>
<li>developer finish building a program, the developer will commit and push the files into test branch then tester will do stress test into test environment.</li>
<li>after testers are finishing the stress test, developer do pull, cherry pick the committed file from test branch and push into staging branch. after that, tester will do flash test.</li>
<li>after testers are finishing the flash test, developer do pull, cherry pick the committed file from staging branch and push into staging-trx branch, after that developer will merge the staging-trx into master branch.</li>
</ol>

<p>But I have some problems.</p>

<p>Let say in one team have 2 developers (Andy and Robert) and responsible for product A.</p>

<ul>
<li>Robert is handling for new feature and bug fixed</li>
<li>Andy is handling bugs fixed</li>
</ul>

<p>Currently Robert is still building a new feature and that new feature will affect some files and major changes to the code. so Andy cannot do any revision of code to fix the bug because almost all of code has changed.</p>

<p>If I created new branch for every new feature, the tester would find it difficult to test, moreover there would be more websites to be created only for new feature. this means that not only for product A, but there are another products will face the same problem.</p>

<p>So, is there any solution for this case?</p>
","0","11497070","0","0"
"55583688","11326185","2019-04-09 00:57:59","3","3528","<git><git-submodules><git-flow>","What is the best way to implement git flow with a project with many submodules","<p>We have build an Asp.net core micro-services project and organized the code into one super project and multiple Git submodules (each microservice is a submodule). Now we want to start using the Git Flow workflow. </p>

<p>What is the best way to initlize the gitflow? do we need to have one git flow per submodule OR we should have one global git flow at the super project level ?</p>

<p>Thanks!</p>
","3","11326185","0","0"
"55688222","9114399","2019-04-15 11:27:56","3","1024","<git><git-flow>","Why git-flow is fast forwarding my feature branch merge?","<p>I'm starting to use and learn about git-flow. By reading this article <a href=""https://jeffkreeftmeijer.com/git-flow/"" rel=""nofollow noreferrer"">https://jeffkreeftmeijer.com/git-flow/</a> it states that every feature branch merge will use --no-ff parameter to <code>git merge</code> which makes every sense considering the purpose of a feature branch.</p>

<p>The problem is that I'm testing git-flow in an empty repo and I can't figure out why the merges from a feature branch using the command <code>git flow feature finish ""feature-name""</code> is always using fast forwarding.</p>

<p>I can't imagine a reason to why one should fast forward a feature branch. Am I missing something here?</p>
","0","9114399","0","0"
"72793273","5325012","2022-06-28 21:20:09","2","2098","<workflow><git-flow><release-management><release-candidate>","How to handle release candidates in git-flow","<p>We're working by the <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">git-flow</a> workflow. Typically we release some release candidates (RC, v1.0.0-rc.0) before we ship the final release (v1.0.0).</p>
<p>To do so, we have a release branch (<code>release/1.0.0</code>). The release candidates are just <em>tags</em> within that branch. The release branch is not merged into <code>main</code> until we have a final release.</p>
<p>Today we discussed whether we should open <em>a release branch for every release candidate</em> (e.g. `release/1.0.0-rc.0) and merge these into main whenever the candidate is released.</p>
<p>Any opinions on this one?</p>
","0","5325012","",""
"72795641","5325012","2022-06-29 03:57:05","2","97","<workflow><git-flow><release-management><semantic-versioning>","When to drop support for deprecations in git-flow / semantic versioning","<p>We work by the <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">git-flow</a> workflow and we stick to <a href=""https://semver.org/"" rel=""nofollow noreferrer"">semantic versioning</a>. Today we discussed how to handle deprecations. Two questions have arisen:</p>
<h2>A. Semver: Is it ok to gracefully deprecate a feature in a minor release (e.g. v1.12.0)?</h2>
<p>&quot;Gracefully&quot; means: The feature is still supported but a warning is shown in development environment. Support will be removed with a major release (in case of v1.12.0 with v2.0.0 or a subsequent major release).</p>
<h2>B. Git-flow: How do you properly drop support of a deprecated feature?</h2>
<p>Given we want to drop support for a feature in v3.0.0 while the last 2.x-release is v2.14.0. So 2.14.0 <em>must</em> support the feature while 3.0.0 <em>must drop support</em> for the feature, as any feature supported in 3.0.0 cannot be dropped before 4.0.0.</p>
<p>Subsequently we must remove the feature in the <code>release/3.0.0</code> branch. But according to git-flow, a release-branch should only accept bug fixes.</p>
<p>Any advice highly appreciated!</p>
","0","5325012","",""
"56036797","3699263","2019-05-08 08:44:18","4","2871","<git><versioning><git-flow><gitversion>","How to automatic increase patch version after bugfix with gitversion","<h3>Summary</h3>
<p>I'm setting up a new project and wanted to use GitVersion to calculate the current version of my app. What I need is semantic versioning with MAJOR.MINOR.PATCH where MAJOR and MINOR are increased with the release branch name and PATCH increases on every bugfix or hotfix merge.</p>
<p>At the moment I'm trying to implement GitFlow into my branching strategy, but I'll give you an explanation of what I'm doing.</p>
<ol>
<li>All development is done on <b>develop</b> branch (creating a <b>feature/*</b> branch and merging back in <b>develop</b>.</li>
<li>When I want to create a release I create a <b>releases/[version]</b> branch from <b>develop</b></li>
<li>When I find a bug in the release I create a <b>bugfix/*</b> branch and merge it back into <b>release/[version]</b> when done.</li>
<li>When no more bugs are found the <b>releases/[version]</b> will be merged in master and tagged with the correct version.</li>
</ol>
<p>The problem is situated in step 3. When I'm for example on <b>releases/0.1.0</b> GitVersion will not increase the PATCH version after a <b>bugfix/*</b> merge. It just stays on 0.1.0 instead of the wanted 0.1.1. It does increase the commit count!</p>
<h3>Steps taken so far</h3>
<p>At the moment I'm using the following gitversion.yml file (see next title). Which includes a hotfix branch that should increment the PATCH. For some reason, after I create the <b>bugfix/*</b> branch it does not increase the PATCH when you run GitVersion on the bugfix branch, so I think I'm missing something here.</p>
<p>The only thing that works is setting a tag on the last commit in the <b>bugfix/*</b> branch to the new version (0.1.1-test). But because of GitVersion calculates version 0.1.0 on the bugfix branch I can't automatically upgrade the PATCH and add the needed 0.1.1-test tag on the commit.</p>
<p>I also thought that GitVersion would increase the version when you have a merge back into the release branch. But that's not happening as well even when I set the increment to Patch. So here as well, I'm thinking I missed something or I just want something that GitVersion isn't made for.</p>
<h3>gitversion.yml</h3>
<pre><code>assembly-versioning-scheme: MajorMinorPatch
mode: ContinuousDeployment
branches:
  develop:
    tag: ''
  feature:
    tag: ''
  release:
    tag: test
    increment: Patch
    tracks-release-branches: true
    source-branches:
    - develop
    - bugfix
  bugfix:
    tag: ''
    increment: Patch
    prevent-increment-of-merged-branch-version: false
    regex: bugfix(es)?[/-]
    source-branches:
    - release
ignore:
  sha: []
</code></pre>
<h3>Expected result</h3>
<p>I would like to have the PATCH increased when I merge a <b>bugfix/*</b> branch back into my <b>releases/[version]</b> branch.</p>
<p>Example:</p>
<pre><code>7f8ef13 34 minutes ago  (HEAD -&gt; releases/0.1.0) [3]
|\
| * 3363677 34 minutes ago  (bugfix/TE-01) [2]
|/
* ac22ccb 36 minutes ago  (tag: 0.1.0-test, master, develop) [1]
</code></pre>
<p>[1] At this point I created the releases/0.1.0 branch so GitVersion should calculate 0.1.0 (which works!)</p>
<p>[2] Here the version doesn't matter really so it can stay 0.1.0-bug</p>
<p>[3] Here the version would need to be increased to 0.1.1 because we had a bugfix merge. (this is not happening!). At the moment it stays 0.1.0 but it does increase the commits count. So It will go from 0.1.0-test.0 to 0.1.0-test.2 between [1] and [3].</p>
<p>Maybe I'm trying to do something that's not even possible, I really don't know. So if anyone has an idea feel free to reply :)</p>
<p>I'm also aware that GitFlow by default doesn't have bugfix branches. But I think it's a strange idea to fix bugs directly on a release branch. Especially when you work in a larger team. That's why I'm trying to create a bugfix flow.</p>
<h3>Full gitversion -diag output</h3>
<pre><code>C:\Testig gitversion&gt;gitversion -diag
INFO [05/08/19 10:38:53:79] Dumping commit graph:
INFO [05/08/19 10:38:53:90] *   7f8ef13 49 minutes ago  (HEAD -&gt; releases/0.1.0)
|\
| * 3363677 49 minutes ago  (bugfix/TE-01)
|/
* ac22ccb 50 minutes ago  (tag: 0.1.0-test, master, develop)

INFO [05/08/19 10:38:53:90] Working directory: C:\Testig gitversion
INFO [05/08/19 10:38:53:91] IsDynamicGitRepository: False
INFO [05/08/19 10:38:53:93] Returning Project Root from DotGitDirectory: C:\Testig gitversion\.git - C:\Testig gitversion
INFO [05/08/19 10:38:53:94] Running on Windows.
INFO [05/08/19 10:38:53:94] IsDynamicGitRepository: False
INFO [05/08/19 10:38:53:94] Returning Project Root from DotGitDirectory: C:\Testig gitversion\.git - C:\Testig gitversion
INFO [05/08/19 10:38:53:94] Project root is: C:\Testig gitversion
INFO [05/08/19 10:38:53:94] DotGit directory is: C:\Testig gitversion\.git
INFO [05/08/19 10:38:53:95] IsDynamicGitRepository: False
INFO [05/08/19 10:38:53:95] Returning Project Root from DotGitDirectory: C:\Testig gitversion\.git - C:\Testig gitversion
INFO [05/08/19 10:38:53:98] IsDynamicGitRepository: False
INFO [05/08/19 10:38:53:98] Returning Project Root from DotGitDirectory: C:\Testig gitversion\.git - C:\Testig gitversion
INFO [05/08/19 10:38:54:07] Using latest commit on specified branch
INFO [05/08/19 10:38:54:08] Running against branch: releases/0.1.0 (7f8ef13e5f43d3827d30a25f936424210cefb2c8)
INFO [05/08/19 10:38:54:09] Begin: Calculating base versions
  INFO [05/08/19 10:38:54:10] Fallback base version: 0.1.0 with commit count source ac22ccb4dd8937a5ec46ad1504281aee490b4411 (Incremented: None)
  INFO [05/08/19 10:38:54:15] Git tag '0.1.0-test': 0.1.0-test with commit count source ac22ccb4dd8937a5ec46ad1504281aee490b4411 (Incremented: 0.1.0-test)
  INFO [05/08/19 10:38:54:17] Begin: Finding branch source of 'releases/0.1.0'
    INFO [05/08/19 10:38:54:18] Begin: Finding merge base between 'releases/0.1.0' and 'develop'.
      INFO [05/08/19 10:38:54:19] Found merge base of ac22ccb4dd8937a5ec46ad1504281aee490b4411
      INFO [05/08/19 10:38:54:19] Merge base of releases/0.1.0' and 'develop is ac22ccb4dd8937a5ec46ad1504281aee490b4411
    INFO [05/08/19 10:38:54:19] End: Finding merge base between 'releases/0.1.0' and 'develop'. (Took: 5.00ms)
    INFO [05/08/19 10:38:54:19] Begin: Finding merge base between 'releases/0.1.0' and 'master'.
      INFO [05/08/19 10:38:54:19] Found merge base of ac22ccb4dd8937a5ec46ad1504281aee490b4411
      INFO [05/08/19 10:38:54:19] Merge base of releases/0.1.0' and 'master is ac22ccb4dd8937a5ec46ad1504281aee490b4411
    INFO [05/08/19 10:38:54:19] End: Finding merge base between 'releases/0.1.0' and 'master'. (Took: 0.96ms)
    INFO [05/08/19 10:38:54:19] Begin: Finding merge base between 'releases/0.1.0' and 'releases/0.1.0'.
      INFO [05/08/19 10:38:54:19] Found merge base of 7f8ef13e5f43d3827d30a25f936424210cefb2c8
      INFO [05/08/19 10:38:54:19] Merge base of releases/0.1.0' and 'releases/0.1.0 is 7f8ef13e5f43d3827d30a25f936424210cefb2c8
    INFO [05/08/19 10:38:54:19] End: Finding merge base between 'releases/0.1.0' and 'releases/0.1.0'. (Took: 1.00ms)
    INFO [05/08/19 10:38:54:20] Multiple source branches have been found, picking the first one (develop).
This may result in incorrect commit counting.
Options were:
 develop, master
  INFO [05/08/19 10:38:54:25] End: Finding branch source of 'releases/0.1.0' (Took: 85.80ms)
  INFO [05/08/19 10:38:54:33] Version in branch name: 0.1.0 with commit count source ac22ccb4dd8937a5ec46ad1504281aee490b4411 (Incremented: None)
  INFO [05/08/19 10:38:54:35] Begin: Finding merge base between 'releases/0.1.0' and 'releases/0.1.0'.
    INFO [05/08/19 10:38:54:38] Found merge base of 7f8ef13e5f43d3827d30a25f936424210cefb2c8
    INFO [05/08/19 10:38:54:42] Merge base of releases/0.1.0' and 'releases/0.1.0 is 7f8ef13e5f43d3827d30a25f936424210cefb2c8
  INFO [05/08/19 10:38:54:45] End: Finding merge base between 'releases/0.1.0' and 'releases/0.1.0'. (Took: 106.84ms)
  INFO [05/08/19 10:38:54:47] Git tag '0.1.0-test': 0.1.0-test with commit count source ac22ccb4dd8937a5ec46ad1504281aee490b4411 (Incremented: 0.1.0-test)
  INFO [05/08/19 10:38:54:49] Found multiple base versions which will produce the same SemVer (0.1.0), taking oldest source for commit counting (Version in branch name)
  INFO [05/08/19 10:38:54:53] Base version used: Version in branch name: 0.1.0 with commit count source ac22ccb4dd8937a5ec46ad1504281aee490b4411 (Incremented: None)
INFO [05/08/19 10:38:54:53] End: Calculating base versions (Took: 448.82ms)
INFO [05/08/19 10:38:54:58] Skipping version increment
INFO [05/08/19 10:38:54:60] 2 commits found between ac22ccb4dd8937a5ec46ad1504281aee490b4411 and 7f8ef13e5f43d3827d30a25f936424210cefb2c8
INFO [05/08/19 10:38:54:64] Begin: Getting version tags from branch 'refs/heads/releases/0.1.0'.
INFO [05/08/19 10:38:54:68] End: Getting version tags from branch 'refs/heads/releases/0.1.0'. (Took: 46.60ms)
</code></pre>
<p>In the end, you can see it's skipping version increment. But I have no idea why.</p>
","5","3699263","0","0"
"72910086","343955","2022-07-08 10:29:23","2","1593","<git><git-flow>","How to deal with release branch when develop has progressed since release branch was created in git flow?","<p>I think I have a peculiar scenario. We follow standard git flow in our organisation. Except, the release branch takes a bit long to be ready to be merged back into master and develop.</p>
<p>We used to block all feature branch merges to develop until the release branch is merged back into master and develop. However, when the team size grew, this has become understandably unacceptable. So we want to allow developers to carry on merging their feature branches back to develop even before the release branch is merged.</p>
<p>Now the issue arises when it is finally the time to merge the release branch. Say features f1 and f2 were on develop before the release r1 was cut. Since then, f3 and f4 were merged back into develop. Now, if we merge the release branch r1, the develop's timeline looks like this:</p>
<pre><code>Merge commit of r1
Merge commit of f4
Merge commit of f3
Merge commit of f2
Merge commit of f1
</code></pre>
<p>This means when the next release r2 is cut, the commit history will include r1, f4 and f3. Something tells me this isn't right.</p>
<p>However, if we blocked merges to develop whilst the release branch was active, it would look a bit more organised with the release commit appearing exactly where it should be:</p>
<pre><code>Merge commit of f4
Merge commit of f3
Merge commit of r1
Merge commit of f2
Merge commit of f1
</code></pre>
<p>What are my options here? I don't want to do an interactive rebase of develop with last x commits so that I can re-order the commits as that will make me do a force push to the develop branch (scary!).</p>
","3","343955","0","0"
"72919457","10298339","2022-07-09 06:36:53","-1","153","<git><github><gitlab><git-flow>","how to get remote updates to my local working copy in git","<p>how do i update my local working copy of source code with current latest version of remote code?</p>
<p>This is the situation:</p>
<p>Suppose 2 people(<code>A,B,C</code>) are working on the project and they follows <code>git flow</code>..</p>
<p>There is <code>master</code> branch, and there is <code>develop</code> branch...everybody is pushing their updates to <code>develop</code> branch only..</p>
<p>Now <code>A</code> creates a feature branch (<code>featureA</code>) and does a commit and pushes it to remote..
<code>B</code> creates a feature branch(<code>featureB</code>) and commits and pushes it to remote..
<code>A</code>, and <code>B</code> continues their work in their remote branch...
while <code>C</code> created a new feature branch(<code>featureC</code>) and completed it and finished the feature and merged it to <code>develop</code></p>
<p>So how can A and B update their local code to get the work done by person-C?</p>
<p>Should a normal <code>PULL</code> will solve the issue?</p>
<p>Or should they specifically pull to the current feature branch?
will <code>VS-code</code> automatically update the files after the <code>PULL</code>?</p>
<p>Or is some other combination of <code>git</code> commands?</p>
<p>Can some git expert please solve this dilemma?</p>
","0","10298339","",""
"56454059","454488","2019-06-05 03:57:19","3","314","<git><release-management><git-flow>","Simplifying git flow workflow","<p>While trying to simplify :
<a href=""https://i.stack.imgur.com/APowr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/APowr.png"" alt=""enter image description here""></a></p>

<p>while having the requirements:</p>

<ol>
<li>Running Parallel masters</li>
<li>Running Feature branches, that might / might not be released</li>
<li>Handling Hot Fixes</li>
<li>Handling Vulnerability Fixes</li>
</ol>

<p>Looking at <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">A successful Git branching model</a></p>

<p>Can we do away with release branch as long as we tag the master branch after every release?</p>

<p>Can we also do away with develop branch?</p>

<p>Release branch can be branched off master at the start of the new sprint and devs can create their features branches off of that. If a hotfix merge to master (current release) happens in the middle of a sprint, the hotfix can also be merged to the current release branch at the same time as feature-branch-hotfix-</p>

<p>Code from feature/develop branches should be deployed to DEV environment</p>

<p>Feature branches by themselves should not be deployed at all. </p>

<p>Prefer my strategy in which a merge request from release-* to master kicks off the jenkins pipeline build via webhook, that will auto merge release-* to master, build from master and tag the merge commit.</p>
","0","454488","0","0"
"73212392","16335638","2022-08-02 18:51:22","1","34","<git><devops><git-flow>","Scalable Pattern for large Feature Splits in git-flow tracked project?","<p>I am in charge of infrastructure for a project that consists of a large repository including submodules.</p>
<p>The project team successfully implements git-flow (as described <a href=""https://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">here</a>) to support versioned releases. For shorthand reference, that's <code>develop</code>, <code>master</code>, and <code>staging-$version</code> branches. Day-to-day work feature branches out and into <code>develop</code>.</p>
<p>Sometimes multiple releases occur simultaneously, and often multiple versions require support simultaneously.</p>
<p>I now need to support a split in this model for a large hardware integrated feature (i.e. supporting a new wifi chip). For regulatory reasons, a feature toggle is insufficient. I need to support a version of this project where <strong>no wifi functionality is built or included in source</strong>. The source must be available and traceable to the final binary release. Is this dumb? Yes. Can I do anything about it? No. Negotiating with the FCC is above my paygrade.</p>
<p>Non-wifi related work must still be included in both the wifi and non-wifi versions of the project.</p>
<p>The naive solution is a set of branches like this:</p>
<ul>
<li><code>develop</code></li>
<li><code>develop-wifi</code></li>
<li><code>master</code></li>
<li><code>master-wifi</code></li>
<li><code>staging-$version</code> (can now branch from either <code>develop</code> or <code>develop-wifi</code>)</li>
</ul>
<p>With one-way only merges from <code>develop</code>-&gt;<code>develop-wifi</code> handling unrelated development.</p>
<p>Obviously this does not scale. What happens when in 6 months we need to support bluetooth, but that means a wifi-only, bluetooth-only, wifi+bluetooth, AND RF-free version of the project?</p>
<p>Against all odds :), I have carved out time to design for this problem in advance, but I am coming up short on a good scalable model to support large feature splits like this. Perhaps there isn't a good answer (this is pushing the scope of git). All my searching on this topic is turning up results confounded with git-flow tutorials and managing feature branches as typical where the expectation is everything moves upstream.</p>
<p>Can anyone recommend a good pattern for handling this in a more scalable fashion?</p>
","2","16335638","",""