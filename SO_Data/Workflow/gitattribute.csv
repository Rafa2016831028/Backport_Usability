Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"54592361","9966394","2019-02-08 12:20:12","0","684","<git><eol><gitattributes>","Why are files seen as modified after fresh clone? When is git add --renormalize . used?","<p>I have a problem with files which are seen as modified after a fresh git clone.<br></p>

Usecase in my repo:

<ul>
<li>all text files shall have <code>eol=LF</code>, except <code>*.txt</code> files which shall have <code>eol=CRLF</code>. <br></li>
</ul>

<p>Here's how <code>.gitattributes</code> looks like: <br></p>

<pre><code>*       text=auto
*.txt   text  eol=crlf
*.png binary
*.jpg binary
*.bmp binary
</code></pre>

<p>Here's my tests: <br></p>

Test 1

<ul>
<li>new repo with 2 .txt files (LF.txt and CRLF.txt)

<ul>
<li><code>LF.txt</code>: eol=LF (end of line is <code>LF</code> in the whole file)</li>
<li><code>CRLF.txt</code>: eol=CRLF (end of line is <code>CRLF</code> in the whole file)</li>
</ul></li>
<li>add, commit, push</li>
<li>add <code>.gitattributes</code> (with the content described above): <code>git add .gitattributes</code>, commit, push</li>
<li>fresh clone of repo

<ul>
<li><code>LF.txt</code>: eol is now <code>CRLF</code> (as expected)</li>
<li><code>CRLF.txt</code> is seen as modified, even if it still has <code>CRLF</code> as eol</li>
</ul></li>
</ul>

Test 2

<ul>
<li>new repo with 2 .txt files (LF.txt and CRLF.txt)

<ul>
<li><code>LF.txt</code>: eol=LF</li>
<li><code>CRLF.txt</code>: eol=CRLF</li>
</ul></li>
<li>add, commit, push</li>
<li>add <code>.gitattributes</code> (with the content described above): <code>git add --renormalize .</code>

<ul>
<li><code>CRLF.txt</code> is seen as modified and staged (but there are no content differences and eol is still <code>CRLF</code>)</li>
<li><code>.gitattributes</code> is still untracked</li>
</ul></li>
<li>track <code>.gitattributes</code>: <code>git add .</code></li>
<li>commit and push </li>
<li>fresh clone of repo

<ul>
<li><code>LF.txt</code>: eol is now <code>CRLF</code> (as expected)</li>
<li><code>CRLF.txt</code>: eol is <code>CRLF</code> (as in the beginning)</li>
<li>repo is clean</li>
</ul></li>
</ul>

<h3>Additional info</h3>

<ul>
<li>OS: Windows 10</li>
<li>git version: 2.20.1.windows.1</li>
</ul>

<h3>Questions</h3>

<ol>
<li>Test 1: why is CRLF.txt seen as modified after a fresh clone?</li>
<li>Test 2: what is <code>git add --renormalize .</code> actually doing? Why doesn't it stage <code>.gitattributes</code> also?</li>
<li>When setting up <code>.gitattributes</code> in a repo which already has some history, is it recommended to run <code>git add --renormalize</code> in order to avoid modified files after fresh clone?</li>
</ol>
","0","9966394","",""
"76410136","1732418","2023-06-05 21:33:25","0","64","<git><newline><gitattributes><core.autocrlf>","When committing a text file in git, why could it be violating `.gitattribute` file?","<p>In one of my git repository, I have added the following <code>.gitattribute</code> file to regulate LF/CRLF characters:</p>
<pre><code>*.bat text eol=crlf
*.cmd text eol=crlf
*.java text eol=lf
*.scala text eol=lf
*.xml text eol=lf
*.py text eol=lf
*.R text eol=lf

# mimicking apache spark

</code></pre>
<p>To test its effect, I manually change the line separator of one <code>bat</code> file from CRLF to LF, unfortunately, when committing &amp; pushing this change in git, it is accepted despite obviously violating the new <code>.gitattribute</code>:</p>
<p><a href=""https://github.com/tek/splain/commit/9344551a1b61f0bf725cc2d9b8aecdced1e71c8b#diff-33fbd7a182c496726227993443a3cfea58670618db831c51c273dcd8962c861a"" rel=""nofollow noreferrer"">https://github.com/tek/splain/commit/9344551a1b61f0bf725cc2d9b8aecdced1e71c8b#diff-33fbd7a182c496726227993443a3cfea58670618db831c51c273dcd8962c861a</a></p>
<p>How could it be possible? Is it a bug in git?</p>
","2","1732418","",""
"76409757","1732418","2023-06-05 20:21:54","4","143","<git><newline><gitattributes><core.autocrlf>","How to apply `.gitattribute` file to all files under a directory?","<p>In an arbitrary Git project set up locally, a <code>.gitattribute</code> file can be included in the root directory to control special characters depending on environments (using Apache Spark on GitHub as an example):</p>
<pre><code>*.bat text eol=crlf
*.cmd text eol=crlf
*.java text eol=lf
*.scala text eol=lf
*.xml text eol=lf
*.py text eol=lf
*.R text eol=lf
</code></pre>
<p>This file will only be used by Git when commiting new files, which may result in many fragmented commits that don't change file content except special characters (in particular, line separators).</p>
<p>Which Git command can I use to modify all files under a project in one run, regardless of whether it is committed?</p>
","1","1732418","",""
"76444534","1350400","2023-06-10 02:53:20","0","42","<git><github><git-lfs><gitattributes><git-lfs-migrate>","How to `git lfs migrate` all branches using .gitattributes","<p>We have a repository with multiple branches and merge commits. There was some disagreement at the start on whether we wanted to use LFS or not, and the result was that no files have yet been tracked with Git LFS. Now, however, we've run into issues and we would like to migrate the entire repository history, including all branches and merges, to use LFS for files specified in a new .gitattributes file. Note that this .gitattributes file is not part of the repository history.</p>
<p>So far, we've tried a  few variations on <code>git lfs migrate import --everything</code> without success. When using the <code>--fixup</code> option, the history is rewritten but nothing gets tracked by LFS. Without that option, the migration modifies our .gitattributes file and adds EVERY file type in the repo, plain text files included. We haven't yet been able to get it to respect our .gitattributes the way it was written, without modification. We tried committing our .gitattributes before the migration as well as not committing it, and also explicitly running <code>git lfs track</code> before the migration as well as not doing that.</p>
<p>We've looked at existing SO questions, but none of the answers seem to match our situation. Here are some of the others that we looked at:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/62014426/git-lfs-git-lfs-migrate-import-include-all-file-types-specified-in-gitattribute"">Git LFS git lfs migrate import include all file types specified in .gitattribute?</a></li>
<li><a href=""https://stackoverflow.com/questions/58163427/git-lfs-migrate-using-the-new-gitattributes-file"">Git-LFS migrate using the new .gitattributes file</a></li>
<li><a href=""https://stackoverflow.com/questions/76106119/how-to-use-git-lfs-and-re-write-history"">How to use Git LFS and re-write history</a></li>
</ul>
<p>Any help is greatly appreciated. Thank you!</p>
<p>Postscript: We understand that we could probably use the <code>--import</code> option repeatedly to make migrate re-create the desired .gitattributes, but I'd love to know if this is doable without that.</p>
","0","1350400","",""
"76560694","18301962","2023-06-26 22:56:09","0","34","<c><git><git-diff><git-log><gitattributes>","git see history of a specific c function that has a prototype above it in the source file","<p>I am trying to see the history of a c function using git log, but the function is static and the source code is organized with a block of function prototypes at the top, and their definitions are below in the source code.</p>
<p>Something like this:</p>
<pre class=""lang-c prettyprint-override""><code>/// @file foo.c

static void foo();

static void foo()
{
    // function body
}
</code></pre>
<p>I am trying to see the history like I would with an external function (the prototype would be in a separate header file):</p>
<pre><code>git log -L :foo:foo.c
</code></pre>
<p>However when I do this it only shows me the history for the prototype. I am only interested in the functions implementation. Is there a way I can see the history for the actual definition?</p>
<p>I have already done some searching and attempted to set up a <code>.gitattributes</code> file in the base directory of my repo with these contents:</p>
<pre><code>*.c diff=cpp
*.h diff=cpp
*.f diff=fortran
</code></pre>
<p>Any ideas what else I can try?</p>
","0","18301962","",""
"76578493","16783860","2023-06-29 06:21:20","1","37","<git><gitattributes>","How to ignore multiple lines of code in the same file type using gitattribute and git config?","<p>As an extension of this <a href=""https://stackoverflow.com/questions/6557467/can-git-ignore-a-specific-line"">post: Can git ignore a specific line?</a>, I am trying to ignore multiple lines in the same file type.</p>
<p>Is there a way to either;</p>
<ul>
<li>set multiple filters to the same <code>.gitattributes</code> filter for the same file or file types? (like below) OR</li>
</ul>
<pre><code>*.rs filter=filterA
*.rs filter=filterB

 // to something like
*.rs filter=filterA + filterB
</code></pre>
<ul>
<li>add multiple rules to the same filter in <code>.git/config</code>? (like below)</li>
</ul>
<pre><code>[filter &quot;filterA&quot;]
    clean = sed &quot;/abc/d&quot;
[filter &quot;filterB&quot;]
    clean = sed &quot;/def/d&quot;

 // to something like
[filter &quot;filterC&quot;]
    clean = sed &quot;/abc/d&quot;
    clean = sed &quot;/def/d&quot;
</code></pre>
<p>The above causes the last filter in <code>.gitattributes</code> to overwrite the changes made from the first filter. I have also attempted something like <code>clean = sed &quot;/abc*def/d&quot;</code>, but this did not work.</p>
","0","16783860","",""
"2788649","42973","2010-05-07 12:55:43","14","1484","<python><git><diff><gitattributes>","Is it possible to have all ""git diff"" commands use the ""Python diff"", in all git projects?","<p>When including the line</p>

<pre><code>*.py diff=python
</code></pre>

<p>in a local .gitattributes file, <code>git diff</code> produces nice labels for the different diff hunks of Python files (with the name of the function where the changes are, etc.).</p>

<p>Is is possible to ask git to use this diff mode for <em>all</em> Python files across <em>all</em> git projects?  I tried to set a global ~/.gitattributes, but it is not used by local git repositories.  Is there a more convenient method than initializing each new git project with a <code>ln -s ~/.gitattributes</code>?</p>
","0","42973","0","0"
"21828900","1563507","2014-02-17 12:17:13","4","2054","<linux><windows><git><eol><gitattributes>","Fixing the line-endings in a Git repository using the `.gitattributes` file","<h3>What needs fixing:</h3>
<p>I have a repository containing a single <code>.md</code> file, which contains an essay I am writing.</p>
<p>I edit the file from a few different computers, one running Linux and a couple running Windows.</p>
<p>Looking at a <code>git diff</code> in Windows now where I have made some changes, I can see my essay showing as nicely separated lines of text ... all about to be removed and replaced by one long line where what were paragraphs are separated by <code>^M</code>s.</p>
<p>I'm aware that <code>^M</code> refers to Windows' CLRF line endings.</p>
<p>The <code>diff</code> result implies that I started the file in Linux (entirely possible; I don't remember) and have since saved it in Windows and that all the line endings have been replaced.</p>
<p>I'd like to be able to open files across both OSs with lines displaying as they should, and have a <code>diff</code> result that shows line breaks (rather than <code>^M</code> placeholders) and only changes to the actual content.</p>
<h3>What I've tried:</h3>
<p>I have done some <a href=""http://schacon.github.io/git/gitattributes.html"" rel=""nofollow noreferrer"">background reading</a>, read a <a href=""http://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/"" rel=""nofollow noreferrer"">nice overview</a> of line-endings and Git settings, and even tried following the commands in <a href=""https://stackoverflow.com/questions/1510798/trying-to-fix-line-endings-with-git-filter-branch-but-having-no-luck/1511273#1511273"">another Stack Overflow question</a>.</p>
<p>As it stands I have one <code>.gitattributes</code> file at the top-level of repository which I've committed to the repository itself. It contains just two lines:</p>
<pre><code># These files are text and should be normalised (convert Windows' CLRF to LF)
*.md text
</code></pre>
<p>I've tried this (<a href=""https://help.github.com/articles/dealing-with-line-endings"" rel=""nofollow noreferrer"">source</a>):</p>
<pre><code>git rm --cached -r .
git reset --hard
git add .
git commit -m &quot;Normalize line endings&quot;
</code></pre>
<p>And this (<a href=""https://stackoverflow.com/questions/1510798/trying-to-fix-line-endings-with-git-filter-branch-but-having-no-luck/1511273#1511273"">source</a>):</p>
<pre><code>git rm --cached -r .
git config core.autocrlf input
git diff --cached --name-only -z | xargs -0 git add
git commit -m &quot;Fixed crlf issue&quot;
</code></pre>
<p>In the second case, the last command tells me there is nothing to commit. (I also don't like the idea of changing the <code>core.autoclrf</code> since I'm trying to do this purely through <code>.gitattributes</code>, but I'm getting frustrated.)</p>
<p>Happy to answer questions and provide more details. Any ideas where I could be going wrong? Am I missing a step?</p>
","2","1563507","0","0"
"21832151","348081","2014-02-17 14:51:34","12","11576","<git><gitattributes><git-archive>","git archive : export-ignore, ignoring directories","<p>I have a git repository with this <code>.gitattributes</code>:</p>

<pre><code>my_script.py export-subst
Makefile export-ignore
README.md export-ignore
.gitattributes export-ignore
.gitignore export-ignore
hooks/ export-ignore
tests/ export-ignore
*.pyc export-ignore
</code></pre>

<p>but when I make:</p>

<pre><code>git archive HEAD | tar -x -C ../archive_dir
</code></pre>

<p>in the <code>archive_dir</code> directory, I get the directories <code>hooks</code> and <code>tests</code>:</p>

<pre><code> ls ../archive_dir/
 hooks/  my_script.py tests/
</code></pre>

<p>Why?</p>

<p>My git version is 1.7.9.</p>
","2","348081","0","0"
"40847893","1421332","2016-11-28 15:27:48","36","5675","<git><comments><gitattributes>","Add comments/remarks to .gitattributes","<p>Is it possible to add comments or remarks to a .gitattributes file?</p>

<p>If yes, how exactly do comment lines look like?</p>
","0","1421332","0","0"
"60333113","10696946","2020-02-21 06:19:02","1","346","<gitattributes><github-linguist>","How can I remove a file from linguist in github?","<p>I have a golang project, but am using a bit of c++. I downloaded a header file dependency, <code>nlohmann/json</code>, and is 22875 lines long, so naturally my github languages is not showing the proper language (Go) and is instead showing c++. How can I remove the <code>json.hpp</code> from the github linguist? I know that the .gitattributes file exists and I can change the language of some files, but how can I remove a file entirely from the linguist?</p>
","0","10696946","",""
"66845434","13140508","2021-03-28 19:32:37","1","815","<git><repository><gitattributes>",".gitattributes linguist-language declaration","<p>I am currently working on a little python package, and the whole source is in my git repo. I have seen around that github doesn't track cython files in the repo statistics correctly. So i have just created a <code>.gitattributes</code> file, of which I found the documentation <a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">here</a>. At the end my file looks something like this:</p>
<pre><code># Specify Python source files. 
*.py linguist-language=python
*.pyi linguist-language=python

# Highlight Cython source files as C language, since it's hopefully better
# than nothing. This also affects repo statistics.
*.pyx linguist-language=C
*.pxd linguist-language=C

# Specify python binary files.
*.db binary
...

# Jupyter notebook
*.ipynb text

# Highlight C and C++ source files.
*.c linguist-language=c
*.cc linguist-language=cpp
*.cxx linguist-language=cpp
...

# Compiled Object files
*.slo binary
...

# Compiled Dynamic libraries
*.so binary
...
</code></pre>
<p>Is declaring all that bunch of extensions a common practice to do?<br />
And is <code>*.pyx linguist-language=C</code> something that can be done without giving the nearest python developer a heart attack?</p>
","1","13140508","0","0"
"68662530","7487871","2021-08-05 07:46:04","0","476","<git><gitattributes>","Excluding files from being considered text in .gitattributes","<p>I see a lot of repositories with <code>.gitattributes</code> files that normalise line endings with content like below:</p>
<pre><code>*.js text eol=lf
</code></pre>
<p>Which should only normalise <code>.js</code> text files, but they also explicitly exclude some binary files such as <code>.png</code> files:</p>
<pre><code>*.png -text
</code></pre>
<p>This doesn't seem necessary as the first rule is only  applied to text-based <code>.js</code> files. Is this correct? Or is this just considered best practice?</p>
","0","7487871","",""
"32506253","180813","2015-09-10 15:41:42","14","1101","<git><git-submodules><line-endings><gitattributes>","How can I force line endings to LF in submodules via .gitattributes in the parent project?","<p>I've got a repository that stores all of my Vim settings. It uses submodules to pull in plugins with Pathogen (I've looked at other plugin managers, not interested so far).</p>
<p>Due to the way MSYSGit handles line endings when opening Vim for commit messages, I need to have the repository stored with Unix line endings (eol=lf).</p>
<p>I've tried adding a .gitattributes file in the main repo with the content:</p>
<pre><code>* eol=lf
* text=auto
</code></pre>
<p>After refreshing the main repository using <code>git rm --cached -r .</code> and <code>git reset --hard</code>, the line endings in the main repo are now LF. Running the same commands inside of submodules, however, did not work.</p>
<p>How can configure my git repo so that submodules are checked out with LF line endings?</p>
","2","180813","0","0"
"66266742","9986220","2021-02-18 19:18:48","0","123","<git><eol><gitattributes>","EOL conversions disabled in .gitattributes only apply to new files","<p>I have disabled the automatic EOL conversion by pushing the following .gitattributes to master:</p>
<pre><code>   # disable automatic eol conversions
   * text=false
</code></pre>
<p>After that, pushed some files on Linux and pulled the changes from a Windows machine only to discover that the line endings of the files which where not changed had been converted from \n to \r\n.</p>
<p>I tried:</p>
<ul>
<li>removing the repo and doing a git clone (on Windows)</li>
<li>running the following on Linux and pushing again:
<pre><code>    git rm --cached -r .
    git add -A
</code></pre>
</li>
<li>editing all files and pushing them</li>
</ul>
<p>Replacing the .gitattributes is not possible, because when the repo gets cloned by GitHub Actions the line endings should be left untouched too.</p>
","2","9986220","",""
"57730171","3745022","2019-08-30 16:16:37","1","139","<git><gitattributes><git-ls-files>","git ls-files - undocumented syntax that queries files based on their .gitattributes - git ls-files ':(attr:filter=lfs)'","<p><a href=""https://stackoverflow.com/questions/54804333/is-comparing-git-lfs-ls-files-with-git-ls-files-attrfilter-lfs-a-reliable"">Is comparing git lfs ls-files with git ls-files &#39;:(attr:filter=lfs)&#39; a reliable way to detect lfs files that are not managed by lfs?</a> uses git ls-files syntax that queries files based on their .gitattributes (in that particular case on filter=lfs)</p>

<pre><code>git ls-files ':(attr:filter=lfs)'
</code></pre>

<p>The problem is that though it actually works without issues, it is not something that is explained in documentation - <a href=""https://git-scm.com/docs/git-ls-files"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-ls-files</a> </p>

<p>So, is it something that I miss in docs, or is it some undocumented feature?</p>
","0","3745022","",""
"34088711","245966","2015-12-04 12:42:45","6","2056","<git><bash><grep><gitattributes>","How to list all distinct extensions of tracked files in a git repository?","<p>I'd like to know <strong>all distinct extensions</strong> of files tracked by git in a given repo, in order to create appropriate <code>.gitattributes</code> file. </p>

<p>Example output expected:</p>

<pre><code>bat
gitignore
gradle
html
jar
java
js
json
md
png
properties
py
svg
webp
xml
yml
</code></pre>

<p>What command can I use for that?</p>
","0","245966","0","0"
"17640160","1031417","2013-07-14 14:14:08","3","5700","<linux><git><gitignore><gitattributes>","Is it possible to make .gitignore configurable based on environment variables?","<p>Is it possible to add to .gitignore rules depends on environment variables?</p>

<p>for example</p>

<pre><code>if -e $(ENV_VAR) ""AAA""
!liba.so
else
liba.so
</code></pre>

<hr>

<p>Basically what I want is to have a repository such that <code>if ENV_VAR = ""AAA""</code> the local repository will have <code>a.txt</code> and if <code>ENV_VAR</code> isn't set the a.txt will be removed. </p>
","12","1031417","0","0"
"69138814","12454866","2021-09-10 23:15:48","1","509","<git><encoding><decoding><utf-16><gitattributes>",".gitattributes UTF-16 to text or JSON by filename without extension","<p>I have many many files without extensions. I have one file called &quot;model&quot; and another file called &quot;schema&quot; which I know are both UTF-16. Both &quot;model&quot; and &quot;schema&quot; have no extension so are forced to binary when trying to <code>git diff</code>. I want to convert &quot;model&quot; to UTF-8 and &quot;schema&quot; to JSON using .gitattributes so I can compare diffs.</p>
<p><strong>Q1.</strong>
How can I specify individual filenames without extensions to be correctly decoded?</p>
<p><strong>Q2.</strong> I don't want to add bash scripts or change git --global settings so that its easier to use for others.</p>
<p>I could'nt find any example from <a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes"" rel=""nofollow noreferrer"">the docs</a>. I tried following <a href=""https://riptutorial.com/git/example/7327/diff-utf-16-encoded-text-and-binary-plist-files"" rel=""nofollow noreferrer"">this solution</a> except only using <code>*model diff=utf16</code> and git config file:</p>
<pre><code>[diff &quot;utf16&quot;]
textconv = &quot;iconv -f utf-16 -t utf-8&quot;
</code></pre>
<p>but this didn't work. I've tried this in both VScode and on bash (Ubuntu20.04).</p>
<p><strong>UPDATE:</strong>
@torek pointed me to helpful Git debugging <a href=""https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables"" rel=""nofollow noreferrer"">tool</a>. Here is my output from <code>GIT_TRACE=1 git diff</code></p>
<pre><code>09:58:09.927031 git.c:439               trace: built-in: git diff
09:58:09.951640 run-command.c:663       trace: run_command: unset GIT_PAGER_IN_USE; LESS=FRX LV=-c pager
</code></pre>
<p><strong>Q1 SOLUTION</strong>
Both @torek and @jthill helped confirm the issue was on my end. The solution above should have worked but my local git config wasn't pointing to the <code>.gitconfig</code> file. I updated the <code>.git/config</code> file and it worked.</p>
<p><strong>Q2 SOLUTION</strong>
You must edit global settings once for each repo to reference <code>.gitconfig</code>. I've tried following <a href=""https://stackoverflow.com/questions/18329621/how-to-store-a-git-config-as-part-of-the-repository"">this solution</a> but can't seem to get it to revert to the .gitconfig file in the repo worktree root.</p>
","4","12454866","",""
"57595420","9355850","2019-08-21 15:58:53","21","8874","<git><atlassian-sourcetree><git-lfs><gitattributes>","Can I exclude some files from git-lfs?","<p>I created a repo with some image files. I have .gitignore and .gitattributes that I want to exclude from lfs. So I need to track all files by lfs but not .gitignore and .gitattributes.</p>

<p>I' m using Sourcetree and I tried that in .gitattributes:</p>

<pre><code>.gitignore      text
.gitattributes  text
*               filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>But all of my files getting tracked by lfs.</p>
","1","9355850","0","0"
"57682267","11188084","2019-08-27 21:06:04","0","64","<github><bundle><gitattributes>","why is my .gitattribute function not taking out my generated js file","<p>Like many github users, I would benefit from being able to ignore a specific file from the language statistics. I'm generating/bundling a javascript file from react files and I want to exclude it from the statistics. Here's my .gitattributes file.</p>

<pre><code>BlueSlide/static/js/homepage_compiled.js linguist-generated=true
</code></pre>

<p>I'm having trouble finding many examples on this, but the few that I do find look like this (<a href=""https://help.github.com/en/articles/customizing-how-changed-files-appear-on-github"" rel=""nofollow noreferrer"">https://help.github.com/en/articles/customizing-how-changed-files-appear-on-github</a>) so I'm not sure why it's not working. Maybe it just takes time to update the statistics?</p>
","0","11188084","",""
"69321470","12078411","2021-09-24 21:57:07","0","64","<git><gitlab><gitattributes>",".gitattributes: apply attribute to text only","<p>I am trying to define <code>EOL=CRLF</code> in <code>.gitattributes</code> within a GitLabs instance, and apply that to text files only. Similar questions have been posted, but they all assume you can write the code as follows:</p>
<pre><code>* text=auto
*.filetypeA eol=crlf
</code></pre>
<p>The issue here is, I have both text and binary files for a given filetype. I need to use git's engine to first determine if the file is text or binary, then apply the attribute ONLY to the text files, while leaving binary files untouched.</p>
<p>I am also working under a number of limitations:</p>
<ul>
<li>Some solutions recommend modifying the text behavior in Git core files - I am limited to the contents of my repository. I am unable to modify the core behavior of my gitlabs instance, as it is a corporate system I lack access to.</li>
<li>My organization does not grant any degree of terminal access - I am limited to edits I can make through the Gitlabs UI</li>
</ul>
<p>The lowest solution would be to manually identify and list rules for specific files. I am looking/hoping for a more robust solution that will account for future files</p>
","2","12078411","",""
"67369505","765151","2021-05-03 13:10:19","0","846","<git><git-lfs><gitattributes>","Git LFS: How to make .gitattributes catch multiple extension-less files with the same name, but in different folders, without files with extension","<p>I'm trying to set up the .gitattributes for Git LFS to catch all extension-less files with a certain name. They are scattered out across different folders. And I don't want it to catch those with same name, but with an extension.
Example:</p>
<pre><code>A/B/C/D/Foo
A/B/C/D/Foo.meta
A/B/C/D/E/Foo
A/B/C/D/E/Foo.meta
A/B/F/Foo
A/B/F/Foo.meta
</code></pre>
<p>The three Foo files should be catched, but the three Foo.meta-files shouldn't.</p>
<p>More files of this kind might occur in automatically generated folders throughout production. So hardcoding the paths is not ideal.</p>
<p>I've tried adding the following to my .gitattributes:</p>
<pre><code>Foo diff=lfs merge=lfs -text
</code></pre>
<p>That almost works, but also catches the Foo.meta-files. The following is not allowed because “Negative patterns are ignored in git attributes”:</p>
<pre><code>Foo diff=lfs merge=lfs -text
!.meta diff=lfs merge=lfs -text
</code></pre>
<p>Any help would be much appreciated!</p>
","0","765151","",""
"35534232","5580651","2016-02-21 09:03:55","1","438","<git><shell><smarty><wildcard><gitattributes>","gitattributes: Match two files with almost identical names, differing only in an additional fixed string","<p><strong>Background</strong></p>

<p>When working with smarty templates, you can override files by creating a copy of a file and add the string <em>-USERMOD</em> to it, like this:</p>

<pre><code>original_file.html
original_file-USERMOD.html
</code></pre>

<p>Is there a way to target <em>both</em> files in my .gitattributes file?</p>

<p>Just targeting the 2nd type of file is easy:</p>

<pre><code>*-USERMOD* export-ignore
</code></pre>

<p>Literally speaking, the rule would be like this:<br>
""If there is a copy of any file that ends in -USERMOD.original_extension, ignore both, the copy <em>and</em> the original""</p>

<p>I can always add those files manually of course, but an automated solution would be nice.</p>

<p>The man page for gitignore(5) (which is referred to by gitattributes(5) for explanation of pattern matching) says:</p>

<blockquote>
  <p>Otherwise, Git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag</p>
</blockquote>

<p>As far as I know, shell globs can't do what I need. The final goal however is to tell git to export-ignore USERMOD-files and their originals, thus any solution that solves this will be accepted.</p>
","2","5580651","",""
"19305306","302550","2013-10-10 20:12:36","1","255","<php><git><symfony><composer-php><gitattributes>","error installing symfony/symfony via composer due to gitattributes","<p>I'm going to post this, then post the answer since it drove me crazy until I figured out the issue.</p>

<p>When installing symfony/symfony via composer, the process was repeatedly aborting due to this error:</p>

<pre><code>[RuntimeException]                                                                                                                        
  Failed to execute git checkout 'fc0a09a2052e9275c16b5ab7af426935fe432f39' &amp;&amp; git reset --hard 'fc0a09a2052e9275c16b5ab7af426935fe432f39'  

  error: Your local changes to the following files would be overwritten by checkout:                                                        
    src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf                                                                 
  Please, commit your changes or stash them before you can switch branches.                                                                 
  Aborting   
</code></pre>

<p>I know it has something to do with git changing whitespace or line-endings on clone, then when it tries to checkout the specific commit, it fails since the line-endings have now been changed. <code>git config core.autocrlf input</code> didn't help.</p>
","0","302550","",""
"69493382","1030598","2021-10-08 09:14:34","0","698","<git><gitattributes>","Does .gitattributes need to be on every branch?","<p>As a repo creator/admin I want to ensure that people working on both Windows and Linux won't have problems with line endings (CRLF vs LF). I've read that <code>.gitattributes</code> is a good way to do that. I've also read that I need to commit to my repo just like any other file at its root.</p>
<p>But since it's apparently just like any other file do I need to commit it to every branch? Do I need to watch out for this while creating branches (and possibly some other actions)?</p>
<p>I've really tried googling for that but just couldn't find anything.</p>
","6","1030598","",""
"69494079","4074201","2021-10-08 10:03:39","2","76","<git><checkout><gitattributes>","What happens to files that are checked out, when working-tree-encoding chanages in .gitattributes","<p>I assume if I had a <code>.gitattributes</code> file thus</p>
<pre><code>*.abc working-tree-encoding=ISO8859-1 text
</code></pre>
<p>And committed a file <code>123.abc</code> and then changed the <code>.gitattributes</code> file to</p>
<pre><code>*.abc working-tree-encoding=IBM-1047 text
</code></pre>
<p>A &quot;git checkout&quot; of the file will mean its encoding would be changed to IBM-1047.</p>
<p>But what if the original <code>.gitattributes</code> file was</p>
<pre><code>*.abc binary
</code></pre>
<p>and the <code>123.abc</code> file is committed and the <code>.gitattributes</code> file change to</p>
<pre><code>*.abc working-tree-encoding=IBM-1047 text
</code></pre>
<p>Would a <code>git checkout</code> of the file cause the file to come back as binary (because it was committed as binary) or would Git assume the file was stored internally as <code>UTF-</code> and attempt to create a <code>IBM-1047</code> encoded file.</p>
","3","4074201","",""
"69536462","13728475","2021-10-12 07:14:39","3","87","<git><git-config><gitattributes><assembla>","Modifying .git folder in a remote repo","<p>I needed to retain the current file in the master branch while merging the other changes from the branch. I used the <code>.gitattributes</code> file to specify a driver which only merges <code>ours</code>. It all worked fine locally but when I tried to merge in the git provider it throwed a merge conflict. I can't find a way to set the driver in the hosted remote repository. Then I added a <code>.gitconfig</code> file which will store the merge settings and I updated the <code>.git/config</code> file to include the custom <code>.gitconfig</code>. file I included int the root of the repo.</p>
<p>My local config path looks like this:</p>
<pre><code>[include]
path = ../.gitconfig
</code></pre>
<p>I need a way to replicate this in the remote repo. Is that even possible ?</p>
","3","13728475","0","0"
"30175486","18149","2015-05-11 18:56:15","1","117","<git><git-merge><gitattributes>","Where do custom git merge drivers get stored?","<p>I was reading <a href=""http://blog.joshhaas.com/2014/06/how-to-merge-json-files-using-git/"" rel=""nofollow"">this blog post</a>, since I needed a custom git driver to merge a few json files in my git repo.  </p>

<p>The instructions on the <a href=""https://gist.github.com/jphaas/ad7823b3469aac112a52"" rel=""nofollow"">script</a> mention editing <code>.git/config</code> to add the merge and also editing the git attributes in <code>.gitattributes</code> but do not mention where to place the actual custom driver.   Does it just have to be on the <code>$PATH</code>? </p>
","0","18149","",""
"73494661","12802110","2022-08-25 23:36:00","-3","123","<git><gitattributes><denial-of-service><git-describe>","How is expanding %(describe) during a git archive a denial-of-service (DOS) risk?","<p>The <a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer""><code>gitattributes</code> man page</a> says:</p>
<blockquote>
<h4>Creating an archive</h4>
<p><code>export-subst</code><br />
If the attribute <code>export-subst</code> is set for a file then Git will expand several placeholders when adding this file to an archive. [...] The placeholders are the same as those for the option <code>--pretty=format:</code> of <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow noreferrer"">git-log(1)</a>, except that they need to be wrapped like this: <code>$Format:PLACEHOLDERS$</code> in the file. E.g. the string <code>$Format:%H$</code> will be replaced by the commit hash. However, <strong>only one <code>%(describe)</code> placeholder is expanded per archive <em>to avoid denial-of-service attacks</em></strong>.</p>
</blockquote>
<p>The <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow noreferrer""><code>git log</code> man page</a> says:</p>
<blockquote>
<h3>PRETTY FORMATS</h3>
<p>[...]</p>
<ul>
<li><p><code>format:&lt;format-string&gt;</code></p>
<p>[...]</p>
<p>The placeholders are:</p>
<p>[...]</p>
<ul>
<li><p>Placeholders that expand to information extracted from the commit:</p>
<p>[...]</p>
<p><code>%(describe[:options])</code><br />
human-readable name, like <a href=""https://git-scm.com/docs/git-describe"" rel=""nofollow noreferrer"">git-describe(1)</a>; empty string for undescribable commits. The describe string may be followed by a colon and zero or more comma-separated options. Descriptions can be inconsistent when tags are added or removed at the same time.</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<p>In the event that I forgot to tag a recent commit and <code>git describe</code> has to resort to scanning trillions of past commits to find the most recent tag... <strong>I can just ^C to terminate <code>git archive</code></strong>.  So whose service is being denied in this so called &quot;<em>denial-of-service</em>&quot;.</p>
","5","12802110","",""
"73562674","18154951","2022-08-31 22:52:39","2","177","<gitlab><game-maker><gitattributes><github-linguist>",".gitattributes for linguist doesn't work correctly with gitlab","<p>I have a (private) project on Gitlab which uses GameMaker, and the .yy files were being detected as Yacc. I looked up how to change this, so I came across .gitattributes files, as described <a href=""https://github.com/github/linguist/blob/master/docs/overrides.md#using-gitattributes"" rel=""nofollow noreferrer"">here</a> and <a href=""https://stackoverflow.com/questions/40659265/using-gitattributes-for-linguist-examples"">here</a>. I created a .gitattributes file in the project directory with the following content:</p>
<pre><code>*.yy linguist-language=GameMaker JSON
*.yy linguist-detectable=true
*.yyp linguist-language=GameMaker JSON
*.yyp linguist-detectable=true
</code></pre>
<p>The files are no longer being detected as Yacc, but they are also not detected as &quot;GameMaker JSON&quot;, Gitlab now shows the repository as 100% GameMaker Language. I have tried both <code>*.yy linguist-detectable</code> syntax without the <code>=true</code> and with it, I have tried writing <code>GameMaker-JSON</code> with hyphens instead of spaces, and I have confirmed that the .gitattributes file was pushed onto the main branch (which is the only branch). How can I resolve this so that the .yy and .yyp files get recognized correctly, am I missing something?</p>
","6","18154951","",""
"73573683","16523771","2022-09-01 17:59:30","1","242","<git><line-endings><gitattributes>","Editing .gitattributes to normalize line endings doesn't work?","<p>I am trying to normalize line endings for my git repo, specifically, I am trying to make all .sh files use LF (Unix-style endings).
When I researched about it, I figured out I should add this to my .gitattributes file:</p>
<pre><code>*.sh eol=lf
</code></pre>
<p>That doesn't work... It doesn't change .sh file endings to LF..
Could anyone tell me what I should do?
Thank You!</p>
<p>I also tried <code>* text=auto eol=lf</code> and <code>git config --global core.autocrlf false</code></p>
","2","16523771","",""
"56857990","828499","2019-07-02 18:09:03","3","1376","<git><gitattributes>","What's the difference between ""* text=auto eol=lf"" and ""* text eol=lf"" in .gitattributes?","<p>This is very similar to this question:
<a href=""https://stackoverflow.com/questions/46590142/what-is-the-differrence-between-text-auto-and-text-eol-lf-in-gitattribu"">What is the differrence between `* text=auto` and `* text eol=lf` in .gitattributes?</a></p>

<p>But I'm specifically asking why I should use <code>* text=auto eol=lf</code> over <code>* text eol=lf</code> or vice versa?</p>

<p>From my understanding <code>eol</code> overrides the <code>text</code> setting, so what's the point in using the former? Is there a difference? If so - how?</p>

<p>I'm reading so many websites and Stack Overflow questions/answers right now - but I'm still utterly confused. Especially when I see this change: <a href=""https://github.com/git/git/blob/master/Documentation/RelNotes/2.10.0.txt#L248"" rel=""nofollow noreferrer"">https://github.com/git/git/blob/master/Documentation/RelNotes/2.10.0.txt#L248</a></p>

<p>I find the phrasing of the change so hard to read that I'm now none the wiser. Can someone please shed some light on this?</p>
","0","828499","",""
"57456282","11916120","2019-08-12 06:02:13","4","74","<git><gitattributes>","Is there a possibility in git to ignore only specific changes within a file, e.g. numbers?","<p>i have a config file ""Gui.cfg"" that is used for a GUI, like this:</p>

<pre><code>GROUP camera
 gui.drivers.CameraGui 1 (,,,,)
 gui.drivers.CameraGui 2 (,,,,)
</code></pre>

<p>when I open the GUI and the elements Camera 1 or Camera 2 the ""Gui.cfg"" changes and adds the window size, like</p>

<pre><code>GROUP camera
 gui.drivers.CameraGui 1 (25,0,430,477,0)
 gui.drivers.CameraGui 2 (393,6,426,473,0)
</code></pre>

<p>Is there any way to tell git, that these changes in the brackets are ignored, but all other changes are not? </p>

<p>I already read something about gitattributes and filters, but didn't find out how to get it working for my problem.</p>
","3","11916120","0","0"
"73700250","1184842","2022-09-13 09:03:13","-1","36","<git><line-endings><gitattributes>","How to configure git line endings simple and minimal?","<p>my assumption is that only in batch files windows line endings should be allowed. Everywhere else should be used the git internal mechanic to recognize binary files and all other text files should enforce linux file endings. Can this be configured simple, i.e. without <code>.gitattributes</code> and listing all kind of file types?</p>
","0","1184842","",""
"56950003","666414","2019-07-09 09:57:15","0","209","<git><vbscript><eol><gitattributes><core.autocrlf>","Does git takes into account my .gitattributes for *.vbs text eol=crlf?","<p>I'm currently working on VBScript (*.vbs) files, meant to be run on Windows only.</p>

<p>I want them to be checkout with CRLF disregarding of how developers have set their <code>core.autocrlf</code>. BTW, mine seems set to <code>false</code> when running <code>git config --get core.autocrlf</code></p>

<p>So I created a <code>.gitattributes</code> file with this:</p>

<pre><code>*.vbs text eol=crlf
</code></pre>

<p>Commited both the files (with their CRLF EOL's) and this <code>.gitattributes</code> one.</p>

<p>But now I've done some changes to a file, without changing the EOL's, when I want to see a diff e.g. in <code>gitk</code> I have to check <em>Ignore space change</em> to properly see the line differences, otherwise the whole file is considered to have changed.</p>

<p>What did I do wrong?</p>

<p>Note: especially here on SO and other forums, I read people saying to use e.g. <code>*.vbs binary</code> to avoid Git from altering EOL's - in the same way it's advised to do so on <code>*.jpg</code> files in the Git online doc - however <code>binary</code> means <code>-text -diff</code> and I don't want to (un)set <code>-diff</code> because I want to have diffs!!</p>
","2","666414","",""
"56951474","7779049","2019-07-09 11:23:45","3","167","<git><gitattributes>","Using .gitattributes as merge strategy in submodules","<p>I have two main branches which have one submodule, but pointing to two different branches of this submodule.</p>

<p>What I want is to ignore any submodule change when I merge/rebase between the two main branches.</p>

<p>I'm trying to use <code>.gitattributes</code> to ignore any merge conflict for a submodule (named <code>internal</code>).</p>

<p>Currently I have <code>internal merge=ours</code> in <code>.gitattributes</code>, but it's not working, it fails merging the <code>internal</code> submodule.</p>

<p>There is any other merge strategy that I can apply for my needs? Or I'm doing something wrong in the <code>.gitattributes</code> usage?</p>
","0","7779049","0","0"
"57050375","4130619","2019-07-16 05:08:56","1","52","<git><normalization><gitattributes><end-of-line>","How git is guessing content type for purposes of end-of-line normalization?","<p>According to <a href=""http://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">the documentation on .gitattributes</a>, <code>text</code> enables end-of-line normalization:</p>

<blockquote>
  <p><code>text</code></p>
  
  <p>Setting the text attribute on a path enables end-of-line normalization and marks the path as a text file. End-of-line conversion takes place without guessing the content type.</p>
</blockquote>

<p>I have list of extensions used in the project (<code>git ls-tree -r HEAD --name-only | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort -u</code> was used to find file types - from <a href=""https://stackoverflow.com/q/1842254/4130619"">How can I find all of the distinct file extensions in a folder hierarchy?</a> ).</p>

<p>Is there way to check whatever git recognizes each extension correctly as binary/text? Is it necessary to explicitly specify type of files or is Git usually handling it well?</p>
","1","4130619","0","0"
"74398374","5314","2022-11-11 05:29:37","1","141","<git><newline><line-endings><gitattributes>","Is it OK to use `* -text diff` in .gitattributes?","<p>We have a large collection of files we want to put in a Git repository. Line endings include LF, CRLF, and mixed LF/CRLF. It's important in our context to keep these files exactly as-is, byte-for-byte.</p>
<p>Git likes to store text files with LF line endings. Normally if you have a case that must be CRLF, you should add <code>.gitattributes</code> entries to indicate that it should be written to the working directory as CRLF but in our case there are no easy patterns. That is, we can't just say <code>*.foo eol=crlf</code> or <code>/bar/** eol=crlf</code>.</p>
<p>We thought about using <code>* binary</code>, but then we learned that <a href=""https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings"" rel=""nofollow noreferrer"">according to GitHub</a>:</p>
<blockquote>
<p>The <code>binary</code> setting is also an alias for <code>-text -diff</code>.</p>
</blockquote>
<p>We had the idea that we could disable Git's line-ending conversion by writing a <code>gitattributes</code> containing only:</p>
<pre><code>* -text diff
</code></pre>
<p>and get all the diff/history/merge behaviors of text files, without the line ending conversions.</p>
<p>Are there any downsides would should be aware of with this approach? Does it affect more than just line ending encoding?</p>
","1","5314","",""
"74612606","3239842","2022-11-29 10:29:30","1","67","<git><merge><gitattributes>","What exactly does ""* -merge"" in gitattributes effect?","<p>I am a little mistrustful towards automatic merging, so I'd like to stop Git from trying <em>anything</em> of that kind when I issue <code>git merge</code> or <code>git pull</code>; instead, I'd like to have my mergetool opened.</p>
<p>For that reason, I have put <code>* -merge</code> into my <code>.gitattributes</code> file. As I understand the documentation, that should do what I want. From <a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">https://git-scm.com/docs/gitattributes</a> (in the section &quot;Performing a three-way merge&quot;, about the <code>merge</code> attribute):</p>
<blockquote>
<p>Unset<br />
Take the version from the current branch as the tentative merge result, and declare that the merge has conflicts. This is suitable for binary files that do not have a well-defined merge semantics.</p>
</blockquote>
<p>However, that stanza in the <code>.gitattributes</code> file doesn't seem to effect anything. After having fetched the remote branch, a <code>git merge</code> still immediately opens the editor for the commit message, which means that Git has performed the necessary actions in the background.</p>
<p>Perhaps I misunderstand what <code>* -merge</code> should actually effect. Could somebody please elaborate a bit?</p>
<p>This question relates to two situations:</p>
<ol>
<li><p>The remote branch has diverged from the local branch, but the set of changed files is orthogonal; that is, a file that has been changed remotely has <em>not</em> been changed locally, and vice versa.</p>
</li>
<li><p>The remote branch has diverged from the local branch, and there is at least one file which has been changed remotely <em>and</em> locally.</p>
</li>
</ol>
<p>[ Side note: The reason for it not working as expected may be that my <code>.gitattributes</code> file does not get evaluated for some reason. But that's a different subject for a different question. I'd first like to know what I can expect from <code>* -merge</code> at all. ]</p>
","0","3239842","",""
"74747181","12091999","2022-12-09 18:49:43","0","52","<git><git-diff><gitattributes>","Use git diff to show only whitespace errors as defined in .gitattributes?","<p>In <code>.gitattributes</code> I define what sorts of whitespaces should <code>git diff</code> treat as errors, for example:</p>
<pre class=""lang-rb prettyprint-override""><code>*.xml whitespace=trailing-space,space-before-tab,indent-with-non-tab,tabwidth=2
</code></pre>
<p>The <code>whitespace</code> in this example option tells that <code>git diff</code> should treat specified kinds of whitespaces as errors for <code>xml</code> files.</p>
<p>When <code>git diff</code> is run against some <code>xml</code> file and finds those whitespace problems it will mark them with red background color, in the example bellow there are multiple whitespaces before tab as they are marked with red square for all the whitespaces:</p>
<p><a href=""https://i.stack.imgur.com/drw9C.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/drw9C.png"" alt=""enter image description here"" /></a></p>
<p>What I want to achieve with <code>git diff</code> is to show me <strong>ONLY lines whitespace errors</strong> and no other code changes, is that possible and how?</p>
<p>Code changes which contain no whitespace errors should not be shown to reduce output only to whitespace errors.</p>
","3","12091999","",""
"74815517","12050718","2022-12-15 17:38:35","0","946","<git><git-lfs><gitattributes>","what does "" filter=lfs diff=lfs merge=lfs "" do in .gitattributes?","<p>I saw code here <br/>
<a href=""https://gist.github.com/Srfigie/77b5c15bc5eb61733a74d34d10b3ed87"" rel=""nofollow noreferrer"">https://gist.github.com/Srfigie/77b5c15bc5eb61733a74d34d10b3ed87</a></p>
<pre><code>#Image
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.ai filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text
</code></pre>
","1","12050718","",""
"74817835","12050718","2022-12-15 21:36:04","1","63","<godot><gitattributes>","how do I add gdscript to gitattributes","<p>I see that I can do: <br/>
<a href=""https://github.com/alexkaratarakis/gitattributes/blob/master/Unity.gitattributes"" rel=""nofollow noreferrer"">https://github.com/alexkaratarakis/gitattributes/blob/master/Unity.gitattributes</a></p>
<pre><code># Unity
*.cginc              text
*.cs                 text diff=csharp
*.shader             text
</code></pre>
<p>but can I do</p>
<pre><code>*.gd                text diff=gdscript
</code></pre>
<p>I tried:<br/> googling diff=gdscript but nothing came up. <br/>
<a href=""https://www.reddit.com/r/godot/comments/k3tk52/godot_and_git_part_8_git_lfs_and_dealing_with/"" rel=""nofollow noreferrer"">https://www.reddit.com/r/godot/comments/k3tk52/godot_and_git_part_8_git_lfs_and_dealing_with/</a></p>
","0","12050718","",""
"75259350","4127458","2023-01-27 14:19:27","1","73","<git><merge><diff><changelog><gitattributes>","Can you force manual merge for a text file in a git repository?","<h2>Motivation</h2>
<p>In our software development, it often happens that multiple developers make changes to the <code>CHANGELOG.md</code> at the same time. Let's say our master branch looks like this.</p>
<pre class=""lang-markdown prettyprint-override""><code>## Unreleased

change X
change Y
</code></pre>
<p>If on one branch, we create a new release:</p>
<pre class=""lang-markdown prettyprint-override""><code>## Unreleased

## [1.0.0] - 2023-01-27

change X
change Y
</code></pre>
<p>While on another <code>change Z</code> is introduced:</p>
<pre class=""lang-markdown prettyprint-override""><code>## Unreleased

change X
change Y
change Z
</code></pre>
<p>If the change branch gets merged after the release branch, the automatic merge will most likely happily merge the CHANGELOG.md like so:</p>
<pre class=""lang-markdown prettyprint-override""><code>## Unreleased

## [1.0.0] - 2023-01-27

change X
change Y
change Z
</code></pre>
<p>Change Z was placed under the release even though it is not part of it!</p>
<p>The correct CHANGELOG.md looks like this:</p>
<pre class=""lang-markdown prettyprint-override""><code>## Unreleased

change Z

## [1.0.0] - 2023-01-27

change X
change Y
</code></pre>
<h2>Question</h2>
<p>We do not have automated tests for our changelog and so I would like to know if it is possible to force developers to manually merge the changelog whenever parallel changes were made (on three-way merge).</p>
<p>At the same time, I want our tooling (VSCode) to consider the CHANGELOG.md file a text file.</p>
<p>Ideally, no one on the team would have to execute any manual steps after cloning.</p>
<h2>What I've already tried</h2>
<p>I added a <code>.gitattributes</code> file and played with the <code>diff</code> and <code>merge</code> attributes.</p>
<pre><code>CHANGELOG.md -merge diff
</code></pre>
<p>While unsetting the <code>merge</code> attribute with <code>-merge</code> does force a merge, the file is treated as a binary despite setting the <code>diff</code> attribute with <code>diff</code>. I tried a few more combinations but so far I have not found a combination that both:</p>
<ol>
<li>allows me to view the diffs as text</li>
<li>forces a manual resolution of three-way merges (forces conflicts)</li>
</ol>
","0","4127458","",""
"45756805","5376736","2017-08-18 12:35:43","1","287","<git><github><gitattributes>","How can we add a project level configuration .gitattributes file to enforce line endings which will be applicable to anyone cloning the repo?","<p>We are working in a project which has code in git and is developed using visual studio. But quite often we have this issue of having the whole file changed because of line endings getting changed automatically. We did consider the option of having line endings setting configured in git on every developer machine but we wanted something more tightly integrated to the repo we are using.
I was able to find a solution in the git documentation (<a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">https://git-scm.com/docs/gitattributes</a>) but right now I am stuck because I cannot commit this file to the repository since the .git folder is outside the repository. 
I tried to perform a ""git add"" for this file but that too did not work. </p>

<p>Any suggestions?</p>
","0","5376736","0","0"
"63744738","11298410","2020-09-04 16:15:49","1","490","<git><gitattributes>",".gitattribute merge ours trow merge conflict","<p>I have branch <code>master</code> and <code>develop</code>.</p>
<p><code>master</code> branch contain:</p>
<ol>
<li><strong>dist/app.js</strong></li>
<li><strong>dist/app.polyfill.js</strong></li>
</ol>
<hr />
<p><code>develop</code> branch contain:</p>
<ol>
<li><strong>dist/app.js</strong></li>
</ol>
<hr />
<p><code>.gitattributes</code> file contain:</p>
<pre><code>dist/* merge=ours
</code></pre>
<hr />
<p><code>$ git config merge.ours.driver true</code> - used</p>
<hr />
<p>When i try to merge <code>master</code> to <code>develop</code> <strong>dist/app.js</strong> is merged without conflicts but  <strong>dist/app.polyfill.js</strong> trown merge error.</p>
<p>What i´m doing wrong?</p>
<hr />
<h1>Merge error</h1>
<p>CONFLICT (modify/delete): dist/app.polyfill.js deleted in HEAD and modified in 682c04bb6342e545f70a5e936413904a0d57156b. Version 682c04bb6342e545f70a5e936413904a0d57156b of dist/app.polyfill.js left in tree.
Auto-merging dist/app.js
Automatic merge failed; fix conflicts and then commit the result.</p>
","2","11298410","",""
"64453192","10364575","2020-10-20 20:53:45","1","731","<git><eol><gitattributes>",".gitattributes not respected on most windows OS","<p>So I've tried to introduce a <code>.gitattributes</code> file to my projects repos but I've run into an issue where the file is not respected among some of my peers Windows 10 machines. I've tried looking at <a href=""https://stackoverflow.com/questions/62367256/git-pull-on-windows-git-smc-client-doesnt-respect-gitattributess-eol-lf"">Git pull on Windows (git smc client) doesn&#39;t respect .gitattributes&#39;s eol=lf</a> and many other posts to no avail as it doesn't fit the experience I am seeing. I would expect given this <code>.gitattributes</code> file that all text would stay as LF but it is not. The windows OS is actively converting the files at <code>git add</code> (which have all undergone <code>git add --renormalize .</code>) to CRLF. The exact warning is: <code>warning: LF will be replaced by CRLF in Callflows/ors_PostCreateOrsIssue.callflow. The file will have its original line endings in your working directory.</code></p>
<p>To confound it more, a couple of my peers' windows OS performs as expected where the LF and the <code>.gitattributes</code> is respected.</p>
<p>Gitattributes:</p>
<pre><code># Setting a default value and trusting git to do correctly determine files
*               text eol=LF

# Java sources
*.java          text diff=java
*.gradle        text diff=java
*.gradle.kts    text diff=java

# These files are text and should be normalized (Convert crlf =&gt; lf)
*.css           text diff=css
*.df            text
*.htm           text diff=html
*.html          text diff=html
*.js            text
*.jsp           text
*.jspf          text
*.jspx          text
*.properties    text
*.tld           text
*.tag           text
*.tagx          text
*.xml           text
*.grxml         text
*.callflow      text
*.json          text

# These files are binary and should be left untouched
# (binary is a macro for -text -diff)
*.class         binary
*.dll           binary
*.ear           binary
*.jar           binary
*.so            binary
*.war           binary
*.jks           binary
*.wav           binary
*.vox           binary
*.gram          binary
</code></pre>
<p>Here is a <strong>working</strong> setup from my peers machine.</p>
<ul>
<li><code>git --version</code>: 2.18.0.windows.1</li>
<li>global git config retrieved using <code>git config -l</code>.</li>
</ul>
<pre><code>core.symlinks=false
core.autocrlf=true
core.fscache=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
rebase.autosquash=true
http.sslcainfo=C:/Program Files/Git/asdf/ssl/certs/ca-bundle.crt
http.sslbackend=openssl
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
user.name=asdf
user.email=asdf@asdf.com
difftool.sourcetree.cmd='' &quot;$LOCAL&quot; &quot;$REMOTE&quot;
mergetool.sourcetree.cmd=''
mergetool.sourcetree.trustexitcode=true
</code></pre>
<p>Setup from a peer where it is <strong>NOT working</strong>:</p>
<ul>
<li><code>git --version</code>: 2.18.0.windows.1</li>
<li><code>git config -l</code>:</li>
</ul>
<pre><code>core.symlinks=false
core.autocrlf=true
core.fscache=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
rebase.autosquash=true
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
http.sslbackend=openssl
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
credential.helper=manager
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
filter.lfs.clean=git-lfs clean -- %f
</code></pre>
<p>Any help would be greatly appreciated!!</p>
","0","10364575","0","0"
"28649989","400861","2015-02-21 18:59:06","3","658","<git><eol><gitattributes>","Force LF eol in git repo on all platforms with .gitattributes","<p>I have a remote repo that is being cloned and worked on in boths windows and mac. I want whenever anyone pulls this repo, it should automatically use LF eol on any platform.</p>

<p>My main issue occurs whenever the Windows Build Server pulls the repo. I don't have control over executing any config commands on the server so I'd like to only use the .gitattributes file for this problem. The reason for LF is that there are some build tools that require the source files to be LF eol.</p>

<p>Is this file saying that all text files will be checkedout with LF eol while skipping jpg and png files? If not, what would this file look like to accomplish the above?</p>

<p><strong>.gitattributes</strong> file</p>

<pre><code>* text=auto eol=lf
*.jpg binary
*.png binary
</code></pre>
","0","400861","",""
"47219985","6741215","2017-11-10 09:54:04","12","10896","<git><gitignore><git-lfs><gitattributes>",".gitignore vs .gitattributes","<p>Considering I have <code>*.pdf</code> files in both my <code>.gitignore</code> and <code>.gitattributes</code>, how does git behave and prioritize between the two? Does it ignore pdf files or stores them as LFS?</p>
","2","6741215","0","0"
"29435156","21728","2015-04-03 15:32:18","47","16319","<git><gitattributes>","What will `* text=auto eol=lf` in gitattributes do?","<p>We have this in our .gitattributes file:</p>

<pre><code>* text=auto eol=lf
</code></pre>

<p>I'd like to precisely understand what this does.</p>

<p>The first part is <code>text=auto</code>. From the <a href=""http://git-scm.com/docs/gitattributes"" rel=""noreferrer"">documentation</a>:</p>

<blockquote>
  <p>This ensures that all files <strong>that Git considers to be text</strong> will have normalized (LF) line endings in the repository.</p>
</blockquote>

<p>The important part is that Git does the normalization only for files that it detects as text files.</p>

<p>However, I'm not sure about the <code>eol=lf</code> part. I would think that it will also do the normalization only for text files but I can't find support for it in the documentation and we had an instance when our PNG files were normalized too, making them invalid.</p>

<p>Is there a settings like the above that would basically say ""do the normalization in <em>both directions</em> for <em>text files</em>, and leave binary files alone""?</p>
","0","21728","0","0"
"44805861","3731501","2017-06-28 14:49:03","5","1946","<git><gitattributes>","Files without extensions in .gitattributes","<p>I'm trying to address files without extensions in .gitattributes:</p>

<pre><code>* text=auto
*. eol=lf
.py eol=lf
</code></pre>

<p><code>*.</code> clearly doesn't help. <code>git check-attr --all -- ./foo</code> outputs:</p>

<blockquote>
  <p>./foo: text: auto</p>
</blockquote>

<p>How can this be done?</p>
","3","3731501","0","0"
"26753821","11895","2014-11-05 09:41:20","1","650","<git><merge><conflict><gitattributes>","How to see conflicts after an auto merge with merge=union in git","<p>I have <code>*.csproj merge=union</code> in <code>.gitattributes</code>, and I am pretty happy about how git manages merges with that on. Other times though, git will do really poor job merging xml files, such as <code>*.csproj</code> (because of lacking a proper xml merge driver I hear) and I cannot load VS project anymore.</p>

<p>So I <code>git reset --hard HEAD^</code> and try again with <code>git merge --no-commit --no-ff</code> so I can sneak peak before committing the merge.</p>

<p>For instance:</p>

<pre><code>mkdir foobar &amp;&amp; cd foobar
git init
echo ""README merge=union"" &gt; .gitattributes
echo ""Hello"" &gt; README
git add --all
git commit -m 'Initial commit.'
git checkout -b italian-translation
echo ""Ciao"" &gt; README
git commit -am 'Italian translation'
git checkout master
git merge --no-commit --no-ff italian-translation
</code></pre>

<p>At this point <code>README</code> contains:</p>

<pre><code>Hello
Ciao
</code></pre>

<p>Then I try to see conflicting version of <code>README</code>, so I can dive into conflicts and resolve manually:</p>

<pre><code>git checkout -m README
</code></pre>

<p>And I expect something similar to:</p>

<pre><code>&lt;&lt;&lt;
Hello
===
Ciao
&gt;&gt;&gt;
</code></pre>

<p>But I still get:</p>

<pre><code>Hello
Ciao
</code></pre>

<p>What am I missing here please?</p>

<p>Thank you.</p>
","0","11895","0","0"
"19807979","348920","2013-11-06 09:15:16","13","1873","<git><gitattributes>","Why does 'git status' ignore the .gitattributes clean filter?","<p>I have a <a href=""http://git-scm.com/book/en/Customizing-Git-Git-Attributes#Keyword-Expansion"" rel=""noreferrer"">.gitattributes clean filter</a> to remove all comments from a file before committing.</p>

<pre><code>$ cat .git/config
[filter ""cleancomments""]
    clean = ""grep -v '^#'""

$ cat .gitattributes
*   filter=cleancomments
</code></pre>

<p>And I have a file 'test' with following content (committed in the repository):</p>

<pre><code>This is a file with random content
</code></pre>

<p>Now I make a modification to 'test' and add comments:</p>

<pre><code>This is a file with random content
# and some comments
# like this
</code></pre>

<p><code>git status</code> now tells me:</p>

<pre><code>modified:   test
</code></pre>

<p>but <code>git diff</code> is empty (as it should).</p>

<p>It is not completely clear to me <strong>why git status does not use the filter to decide if a file has been modified or not</strong>, but I assume this is how it is implemented.</p>

<p>What is really mysterious to me is following:</p>

<p>If I do this:</p>

<pre><code>git add test
</code></pre>

<p>Then suddenly the file 'test' is no longer marked as modified and it does not appear in the git index. Why is this?</p>
","2","348920","0","0"
"57962547","10624355","2019-09-16 18:29:09","0","67","<git><line-endings><gitattributes>","Unsure what to expect when enforcing specific line terminators with .gitattributes","<p>I am trying to set up repository-level rules to convert line terminators to LF for any future commits. My .gitattributes file is as follows:</p>

<pre><code># Files of the following types should have their line terminators converted to LF
*.c        text eol=lf
*.cpp      text eol=lf
*.h        text eol=lf
*.hpp      text eol=lf
*.py       text eol=lf
*.json     text eol=lf
makefile   text eol=lf
Makefile   text eol=lf
</code></pre>

<p>I added it and committed it to my local branch, and now I want to test it. If I <code>touch</code> a file that has CRLF terminators then it shows up as having unstaged changes in <code>git status</code>. However, if I <code>touch</code> a file that I know for a fact only has LF terminators, it also shows up as having unstaged changes.</p>

<p><code>foo/Makefile</code> - a file with CRLF terminators</p>

<p><code>foo/include/someheader.h</code> - a file with LF terminators</p>

<pre><code>$ touch foo/Makefile
$ touch foo/include/someheader.h
$ git status
...
# Changes not staged for commit:
#   modified:   foo/Makefile
#   modified:   foo/include/someheader.h
...
</code></pre>

<p>Furthermore, if I try to discard changes for either file with <code>git checkout -- &lt;file&gt;</code> they still appear as having unstaged modifications. <code>git diff</code> shows a deletion and re-addition of every line, even when they are identical including the line-terminators.</p>

<p>I am using git version 1.8.3.1 on Linux.</p>
","0","10624355","0","0"
"21302670","3226810","2014-01-23 08:09:55","31","9874","<git><line-endings><eol><gitattributes>","What does ""!eol"" in gitattributes do?","<p>Recently I came across the following entry in a .gitattributes file:</p>

<p><code>""* text=auto !eol""</code></p>

<p>What does <code>!eol</code> do?</p>
","1","3226810","0","0"
"39995131","4313791","2016-10-12 09:28:17","5","7661","<windows><git><macos><gitattributes><end-of-line>",".gitattributes don't work properly on mac and windows","<p>On my project i use computers with different OS, one is Mac second is with windows. When I use git every change is shown as whole document change. The reason is different end-of-line in these two OS. I read this <a href=""https://help.github.com/articles/dealing-with-line-endings/"" rel=""noreferrer"">https://help.github.com/articles/dealing-with-line-endings/</a> and made a <code>.gitattributes</code> file in the root folder but the problem still exists. This is my <code>.gitattributes</code> file:</p>

<pre><code># Set the default behavior, in case people don't have core.autocrlf set.
* text=auto

# Explicitly declare text files you want to always be normalized and converted
# to native line endings on checkout.

*.css text
*.html text
*.js text

# Declare files that will always have CRLF line endings on checkout.
*.sln text eol=crlf

# Denote all files that are truly binary and should not be modified.
*.png binary
*.jpg binary
</code></pre>

<p>I have no idea why it's not working because I was try a lot of configurations of this file before.</p>
","2","4313791","0","0"
"59237007","1499350","2019-12-08 15:38:12","11","2948","<git><git-lfs><gitattributes>","Should I always exclude text attribute for git LFS files?","<p>There are a lot of articles in the web saying it is a good practice to place binary files under LFS. So, <code>.gitattributes</code> file will look like this:</p>

<pre><code>## Fonts
*.otf filter=lfs diff=lfs merge=lfs -text
*.OTF filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
*.TTF filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>Note that all the entries contain <code>-text</code> which tells git to not treat these files as text files and treat them as binary.</p>

<p>Now, let's say I want to track some text files with extension <code>*.yaml</code> as LFS because they are very large but still text based. Should I create entries in the same way as for binary ones or should I omit <code>-text</code> like this?</p>

<pre><code>*.yaml filter=lfs diff=lfs merge=lfs
*.YAML filter=lfs diff=lfs merge=lfs
</code></pre>
","0","1499350","0","0"
"12226445","365256","2012-09-01 09:09:49","2","1530","<xcode><git><gitattributes>",". gitattributes not working","<p>My <code>.gitattributes</code> has the following in order to diff the <strong>XCode</strong> project (which is plain text)</p>

<pre><code>*.pbxproj -crlf -diff -merge
</code></pre>

<p>But when I diff, still showing binary file</p>

<pre><code># git diff MyApp.xcodeproj/project.pbxproj
diff --git a/MyApp.xcodeproj/project.pbxproj b/MyApp.xcodeproj/project.pbxproj
index xxx..xxx xxx
Binary files a/MyApp.xcodeproj/project.pbxproj and b/MyApp.xcodeproj/project.pbxproj differ
</code></pre>

<p>My <code>.gitattributes</code> is in the same level of <code>.git</code> folder</p>
","0","365256","0","0"
"20118063","59692","2013-11-21 10:14:27","0","433","<git><line-endings><gitattributes>",".gitattributes and normalizing line-endings: changed files still there","<p>I am confused with .gitattributes behavior.</p>

<p>Following the <a href=""https://help.github.com/articles/dealing-with-line-endings"" rel=""nofollow"">article</a> about normalizing line-endings, I have done following steps:</p>

<ul>
<li>created .gitattiributes with <code>* text=auto</code></li>
<li>on my <strong>dev Windows machine</strong> I have <code>core.autocrlf = true</code></li>
<li>on my <strong>build Linux machine</strong> I have <code>core.autocrlf = input</code></li>
<li>I have performed line-endings normalization on my dev machine running <code>git rm --cached -r . &amp;&amp; git reset --hard &amp;&amp; git add . &amp;&amp; git commit -m ""normalized"" &amp;&amp; git push develop origin/develop</code>. </li>
</ul>

<p>Last step according to my thoughts, should in the end push all text files with LF endings to repository and since that moment all my commits and chechouts will not be bothered with line-endings collisions on whatever platforms.</p>

<p>But when I have cloned the repo on my <strong>build Linux</strong> machine I immediately got a bunch of files marked as changed. If in the working copy on build machine I change .gitattributes line to <code># * text=auto</code> (commented), everything becomes fine.</p>

<p>Why is that and what am I doing wrong?</p>
","0","59692","",""
"20200596","971392","2013-11-25 18:36:34","0","64","<git><archive><gitattributes>","Anything like export-add for gitattribute?","<p>How can I overwrite an excluded folder in <code>.gitignore</code>, by adding it when I generate my archive with <code>git-archive</code>?</p>

<p>There is <code>export-ignore</code>, but it can't find anything like <code>export-add</code>`export-include`.</p>

<p>Any ideas?</p>
","2","971392","",""
"30537764","4863180","2015-05-29 19:37:38","0","1115","<c#><visual-studio><github><gitattributes>","Why is git saying these attributes are not valid attributes?","<p>I'm using the default .gitattributes file for my Visual Studio project on github but whenever I try to commit it throws back ""not a valid attribute"" errors.</p>

<p>The errors are for lines 1,12,20, 21, and 24. What is most confusing to me is that most of the lines returning errors are commented out.</p>

<p>Here is the file</p>

<pre><code>**###############################################################################**
# Set default behavior to automatically normalize line endings.
###############################################################################
* text=auto

###############################################################################
# Set default behavior for command prompt diff.
#
# This is need for earlier builds of msysgit that does not have it on by
# default for csharp files.
# Note: This is only used by command line
**###############################################################################**
#*.cs     diff=csharp

###############################################################################
# Set the merge driver for project and solution files
#
# Merging from the command prompt will add diff markers to the files if there
# are conflicts (Merging from VS is not affected by the settings below, in VS
**# the diff markers are never inserted). Diff markers may cause the following** 
**# file extensions to fail to load in VS. An alternative would be to treat**
# these files as binary and thus will always conflict and require user
# intervention with every merge. To do so, just uncomment the entries below
**###############################################################################**
#*.sln       merge=binary
#*.csproj    merge=binary
#*.vbproj    merge=binary
#*.vcxproj   merge=binary
#*.vcproj    merge=binary
#*.dbproj    merge=binary
#*.fsproj    merge=binary
#*.lsproj    merge=binary
#*.wixproj   merge=binary
#*.modelproj merge=binary
#*.sqlproj   merge=binary
#*.wwaproj   merge=binary

###############################################################################
# behavior for image files
#
# image files are treated as binary by default.
###############################################################################
#*.jpg   binary
#*.png   binary
#*.gif   binary

###############################################################################
# diff behavior for common document formats
# 
# Convert binary document formats to text before diffing them. This feature
# is only available from the command line. Turn it on by uncommenting the 
# entries below.
###############################################################################
#*.doc   diff=astextplain
#*.DOC   diff=astextplain
#*.docx  diff=astextplain
#*.DOCX  diff=astextplain
#*.dot   diff=astextplain
#*.DOT   diff=astextplain
#*.pdf   diff=astextplain
#*.PDF   diff=astextplain
#*.rtf   diff=astextplain
#*.RTF   diff=astextplain
</code></pre>
","6","4863180","",""
"58276824","719603","2019-10-07 20:38:03","1","125","<git><git-merge><git-pull><gitattributes>","What's the best way to exclude files from a merge that I have included in my "".git/info/exclude"" file?","<p>I have some files specified in the "".git/info/exclude"" file so that when I make a commit, those files are not staged/included in the commit. I <em>also</em> want to keep my local version of these files when I do a merge. I've set up a ""ours"" merge driver and set the "".git/info/attributes"" file appropriately (I think); however, I don't think the driver's being used because I don't think git detects any conflicts in these files when the merge is attempted.</p>

<p>Here's my "".git/info/exclude"" file (which is giving me what I want - these files never get staged):</p>

<pre><code>/IDWA.Client/dmsConfig.json
/IDWA.Server.AppServer/client-config*.*
/IDWA.Server.AppServer/dmsConfig.json
</code></pre>

<p>Here's my "".git/info/attributes"" file (which doesn't appear to be doing anything at all; again, I think because git is not detecting any conflicts when a merge is attempted):</p>

<pre><code>/IDWA.Client/dmsConfig.json merge=ours
/IDWA.Server.AppServer/client-config*.* merge=ours
/IDWA.Server.AppServer/dmsConfig.json merge=ours
</code></pre>

<p>The driver configuration:</p>

<pre><code>git config --global merge.ours.driver true
</code></pre>

<p>And, finally..</p>

<p><a href=""https://i.stack.imgur.com/jUYpi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jUYpi.png"" alt=""enter image description here""></a></p>

<p>I just want to be able to do a git pull and never have to worry about these files.</p>
","2","719603","0","0"
"30669292","117507","2015-06-05 14:38:07","1","187","<git><line-endings><git-config><gitattributes>","At what point will .gitattribute eol settings be run?","<p>After adding a line to a <code>.gitattributes</code> file in the root of a repository:</p>

<pre><code>*.tt eol=crlf
</code></pre>

<p>At what point will what process apply this rule and change the line endings; at <code>merge</code> or at <code>commit</code> or at <code>push</code>? Where will it run them on the client or whatever is storing the origin (bitbucket, stash, github)? Is it different per operating system?</p>

<p>The <a href=""http://git-scm.com/docs/gitattributes"" rel=""nofollow"">git man page for .gitattributes</a> is a bit vague under the Checking out and checking in:</p>

<blockquote>
  <p>These attributes affect how the contents stored in the repository are copied to the working tree files when commands such as git checkout and git merge run. They also affect how Git stores the contents you prepare in the working tree in the repository upon git add and git commit.</p>
</blockquote>

<p>When, exactly, are these changes made?</p>

<p>How is this different to a setting in <code>.gitconfig</code>?</p>
","0","117507","",""
"20633792","551045","2013-12-17 12:12:06","1","85","<git><gitattributes>","Abort commit/add if file does not match rule in gitattributes","<p>Basically the title says it all.</p>

<p>If for some reason a file in my current repository does not match any pattern in the gitattributes file it should abort adding/commiting the file.</p>

<p>I want to use this to make sure we don't rely at all on core.eol, core.autocrlf and core.safecrlf.</p>

<p>The <a href=""https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html"" rel=""nofollow"">manpage on gitattributes</a> does not say anything at all about this. Nor any other topic on gitattributes i have found so far.</p>
","1","551045","",""
"58641445","9982386","2019-10-31 10:33:51","0","261","<xcode><git><github><gitattributes>","How do not change development team while doing git pull?","<p>There are two developers at the project, each of them has his own Apple developer account and there is no team account. After pulling changes from git, which contains change in .pbxproj file needs to change team back and it's quite annoying. 
<a href=""https://i.stack.imgur.com/JkPau.png"" rel=""nofollow noreferrer"">xCode signing page</a></p>

<p>after team changing there is a high probability this change should push to origin and teammate will need to fix team too</p>

<p><a href=""https://i.stack.imgur.com/NXKKC.png"" rel=""nofollow noreferrer"">changes in GitHub Desktop</a></p>

<p>I suspect that it can be fixed with .gitattributes file, but have no idea, how to do it. </p>
","0","9982386","",""
"18596046","55948","2013-09-03 15:28:11","4","1004","<windows><git><github><line-endings><gitattributes>","Changing branches in git mistakenly results in modified files","<p>I am using git (1.8.3) on Windows. If I clone a repo from github then immediately checkout a different existing branch on that repo, git detects modified files. <em>Usually</em>. Sometimes it doesn't. And the diff on all of the modified files comes back identical (including line endings). This problem has been observed on 2 different repos on at least 4 different PCs among my team.</p>

<p>And it's not always the same files, but it's almost always one of a few subsets of files in the rep. For example, sometimes it's the same 5 files in the root of the repo, sometimes it's the same 93 files in one particular folder, sometimes it's the same 16 files in a different folder. </p>

<p>Once git has marked the files as modified, if I revert or stash them, they are immediately marked as modified again, which makes it impossible to switch back and forth between branches.  </p>

<p>I have the feeling it's related to line endings, but I've already added the recommended .gitattributes file and <a href=""https://help.github.com/articles/dealing-with-line-endings#re-normalizing-a-repository"" rel=""nofollow"">renormalized</a> each branch, but I still have these sporadic problems. Another possibility I've thought of is merging between branches somehow messed up the renormalization I did, but I don't know how to test that theory.</p>

<p>We all have <code>core.autocrlf=true</code> as we are all on Windows. Here is our .gitattributes</p>

<pre><code># Auto detect text files and perform LF normalization
* text=auto

# Custom for Visual Studio
*.cs      diff=csharp
*.sln     merge=union
*.csproj  merge=union
*.sqlproj merge=union
*.html    text diff=html
*.css     text
*.js      text
*.ejs     text
*.sql     text

# Standard to msysgit
*.doc     diff=astextplain
*.DOC     diff=astextplain
*.docx    diff=astextplain
*.DOCX    diff=astextplain
*.pdf     diff=astextplain
*.PDF     diff=astextplain
</code></pre>
","1","55948","0","0"
"58663927","6501141","2019-11-01 18:10:26","1","291","<git><gitattributes><git-difftool>","Is there a way to configure git to use a different difftool based on the file extension?","<p>I would like to setup git to launch different difftool executables (<a href=""https://git-scm.com/docs/git-difftool"" rel=""nofollow noreferrer"">DiffTool Man-page</a>) based on the file extension.</p>

<p>This could be done with an external script or executable. For example, here is a posted Q&amp;A with a shell script that could do this: <a href=""https://stackoverflow.com/a/25083339/6501141"">Git shell script for multiple difftools</a>, however, my team uses primarily Windows, and this is a Unix solution, and I'd prefer a built-in solution.</p>

<p>Is there a way of doing something similar by having different <code>[difftool]</code> or <code>[diff]</code> sections in my global <code>.gitconfig</code> and using something like the <code>.gitattributes</code> file?</p>

<p>I'm currently using the <code>.gitattributes</code> method to unzip a specific file extension, that is an archive, before git diff's it. Can this method be extended to also launch a different DiffTool based on a different <code>[difftool ""mytool""]</code> section in the <code>.gitconfig</code>?</p>

<p>Or, is there some other way to do this that is built-in to git?</p>
","4","6501141","",""
"18729473","1585512","2013-09-10 22:01:24","1","282","<python><git><gitattributes>","Why do scripts behave differently called from commandline vs git attribuites?","<p><strong>Updated scripts attached below, these are now working on my sample document</strong></p>
<p><strong>Why do the following python scripts perform differently when called via git attributes or from command line?</strong></p>
<p>What I have are two scripts that I modeled based on the mercurial zipdoc functionality. All I'm attempting to do is unzip docx files on store (filter.clean) and zip them on restore (filter.smudge).  I have two scripts working well, but once I put them into git attribute they don't work and I don't understand why.</p>
<p>I've tested by doing the following</p>
<p><strong>Testing the Scripts (git bash)</strong></p>
<blockquote>
<p>$ cat original.docx | python ~/Documents/pyscripts/unzip.py &gt;
uncompress.docx</p>
<p>$ cat uncompress.docx | python
~/Documents/pyscripts/zip.py &gt; compress.docx</p>
<p>$ md5sum uncompress.docx compress.docx</p>
</blockquote>
<p>I can open both the uncompressed and compressed files with Microsoft Word with no errors.  The scripts work as expected.</p>
<p><strong>Test Git Attributes</strong></p>
<ol>
<li>I set both clean and scrub to <em>cat</em>, verified my file saves and restores w/o problem.</li>
<li>I set clean to <em>python ~/Documents/pyscripts/unzip.py</em>. After a commit and checkout the file is now larger (uncompressed) but errors when opened in MS-Word.  Also the md5 does not match the &quot;script only&quot; test above.  Although the file size is identical.</li>
<li>I set clean back to <em>cat</em> and set scrub to <em>python ~/Documents/pyscripts/zip.py</em>.  After a commit and checkout the file is now smaller (compressed) but again errors when opened in MS-Word.  Again the md5 differs from the &quot;script only&quot; test but the file size matches.</li>
<li>Setting both clean and scrub to the python scripts produces an error, as expected.</li>
</ol>
<p>I'm really lost here, I thought git Attributes simply provides input on stdin and reads it from stdout.  I've tested both scripts to work with a pipe from cat and a redirect from the output just fine.  I know the scripts are running b/c the files change size as expected, however a small change is introduced somewhere in the file.</p>
<p><strong>Additional References</strong></p>
<p>I'm using msgit on Win7, all commands above were typed into the git bash window.</p>
<p><a href=""http://git-scm.com/book/ch7-2.html"" rel=""nofollow noreferrer"">Git Attributes Description</a></p>
<p><strong>Uncompress Script</strong></p>
<pre><code>import fileinput
import sys
import zipfile

# Set stdin and stdout to binary read/write
if sys.platform == &quot;win32&quot;:
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)

try:
  from cStringIO import StringIO
except:
  from StringIO import StringIO

# Wrap stdio into a file like object
inString = StringIO(sys.stdin.read())
outString = StringIO()

# Store each member uncompressed
try:
    with zipfile.ZipFile(inString,'r') as inFile:
        outFile = zipfile.ZipFile(outString,'w',zipfile.ZIP_STORED)
        for memberInfo in inFile.infolist():
            member = inFile.read(memberInfo)
            memberInfo.compress_type = 0
            outFile.writestr(memberInfo,member)
        outFile.close()
except zipfile.BadZipfile:
    sys.stdout.write(inString.getvalue())

sys.stdout.write(outString.getvalue())
</code></pre>
<p><strong>Compress Script</strong></p>
<pre><code>import fileinput
import sys
import zipfile

# Set stdin and stdout to binary read/write
if sys.platform == &quot;win32&quot;:
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)

try:
  from cStringIO import StringIO
except:
  from StringIO import StringIO

# Wrap stdio into a file like object
inString = StringIO(sys.stdin.read())
outString = StringIO()

# Store each member compressed
try:
    with zipfile.ZipFile(inString,'r') as inFile:
        outFile = zipfile.ZipFile(outString,'w',zipfile.ZIP_DEFLATED)
        for memberInfo in inFile.infolist():
            member = inFile.read(memberInfo)
            memberInfo.compress_type = zipfile.ZIP_DEFLATED
            outFile.writestr(memberInfo,member)
        outFile.close()
except zipfile.BadZipfile:
    sys.stdout.write(inString.getvalue())

sys.stdout.write(outString.getvalue())
</code></pre>
<p>Edit: Formatting
Edit 2: Scripts updated to write to memory rather than stdout during file processing.</p>
","4","1585512","0","0"
"59034847","30447","2019-11-25 15:12:10","1","476","<windows><git><batch-file><parameter-passing><gitattributes>","properly setting a git filter and passing parameters to it in Windows","<p>I need to set a <strong>git filter</strong> with an executable file and a long list of parameters under Windows.</p>

<p>The executable is <code>jq.exe</code> the parameters I need to pass to it are <code>--indent 1 ""(.cells[] | select(has(\""outputs\"")) | .outputs) = [] | (.cells[] | select(has(\""execution_count\"")) | .execution_count) = null | .metadata = {\""language_info\"": {\""name\"": \""python\"", \""pygments_lexer\"": \""ipython3\""}} | .cells[].metadata = {}""</code></p>

<p>I have tried two ways to have git filter to invoke this long command. None of them has worked.</p>

<hr>

<ol>
<li><p>I wrote a small bat file <code>nbstrip.bat</code> that contains the full invocation. I have put this bat file in the path. And I have set the filter <code>git config --global --add filter.nbstrip.clean ""cmd /c nbstrip""</code></p>

<p>When I invoke this filter indirectly with a <code>git add test.nb</code>, git gets apparently ""confused"" and kinda interprets the output of the filter as new commands and tries to execute them.</p>

<p><strong>what is the correct way to set a window bat file as command in a git filter?</strong></p></li>
</ol>

<hr>

<ol start=""2"">
<li><p>I put all the parameters in a auxiliary file in <code>%appdata%</code> in order to simplify the command invocation. This way <code>git config --global --add filter.nbstrip.clean ""jq --indent 1 --from-file %appdata%\nbstrip.jq.txt""</code>.</p>

<p>When I invoke this filter indirectly with a <code>git add test.nb</code>, the jq executable does not receive the correct filename, and complains with a error message <code>jq.exe: Could not open C:UsersAdminAppDataRoamingnbstrip.jq.txt: No such file or directory</code> as if it had all the backslashes removed before the name be passed to the executable.</p>

<p><strong>What is the correct way to have parms with backslashes in a git filter command specification?</strong></p></li>
</ol>

<hr>

<p>Note that:</p>

<ul>
<li>In both cases I have tried the command invocation directly in the command line and they work perfectly</li>
<li>there is no issue with the git filter definition in .gitattributes nor in the git config, they are correctly setup: if instead of invoking my command I set a simple log it works perfectly.</li>
</ul>

<p>Do you have any additional strategy that could solve this situation?</p>
","0","30447","0","0"
"59036141","5016008","2019-11-25 16:25:34","6","215","<git><github><gitattributes>","Why does GitHub ignore .gitattributes patterns that mark certain files as binary?","<p>I would like to exclude some files from line count statistics on GitHub, for example *.dat files.</p>

<p>In .gitattributes it should be possible to do this:</p>

<p><code>*.dat text -diff</code></p>

<p>or </p>

<p><code>*.dat binary</code></p>

<p>If I commit a .dat file after committing .gitattributes with the above settings, GitHub Desktop (for Windows) correctly shows 'This binary file has changed' and does not show any diffs and does not count them in user contributions.
On GitHub.com, however, the same file is still treated as a standard source code file and all additions and deletions are counted.</p>

<p>You can see it in this small test repository:
<a href=""https://github.com/btitze/line-count-test"" rel=""noreferrer"">https://github.com/btitze/line-count-test</a></p>

<p>Is this a bug on GitHub.com? 
I would like the *.dat files to be handled in the same way as, for example, *.png files, for which lines are never counted.</p>
","2","5016008","0","0"
"59116720","3873510","2019-11-30 13:41:06","0","153","<git><binaryfiles><gitattributes>","Why does git prevent merging binary files?","<p>I was browsing yarn's <a href=""https://github.com/yarnpkg/berry/"" rel=""nofollow noreferrer"">berry</a> repository and stumbled upon this setting in their <code>.gitattributes</code> file:</p>

<pre class=""lang-sh prettyprint-override""><code># Mark .pnp.js as binary to prevent git from trying to merge it
/.pnp.js                binary linguist-generated
</code></pre>

<p>Why does git, by default, prevent binary files from being merged automatically? Is it because most editors would fare poorly at editing the contents of such files?</p>
","1","3873510","",""
"59210453","4573095","2019-12-06 09:38:54","2","1348","<git><git-lfs><gitattributes>","Remove Git lfs link to file and add it to git directly","<p>I need to remove a Git LFS file pointer, and add the file directly to Git. </p>

<p>I have a filter in .gitattributes to match certain files:</p>

<pre><code>test/**/*.py filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>How can I modify it to exclude 1 file from this pattern?</p>

<p>I tried something like this:</p>

<pre><code>test/**/*.py !test/my_dir/my_file.py filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>but it doesn't seem to work... git says that there is no such file</p>
","2","4573095","",""
"21472971","1154350","2014-01-31 05:22:49","171","58574","<git><gitattributes>","What is the purpose of `text=auto` in `.gitattributes` file?","<p>Mostly <code>.gitattributes</code> file has <code>* text=auto</code>. What is the purpose of <code>text=auto</code> in that file?</p>
","0","1154350","0","0"
"14053967","110464","2012-12-27 11:30:48","1","386","<windows><git><msysgit><eol><gitattributes>","git EOL converted the opposit way around? (despite .gitattributes)","<p>I am working on Windows 7 and to prevent EOL problems I have a <code>.gitattributes</code> file set up the following way (as described in the <a href=""https://help.github.com/articles/dealing-with-line-endings"" rel=""nofollow"">github help</a>):</p>

<pre><code>* text=auto

*.js text
</code></pre>

<p>But now, when I commit a <code>js</code>-file that has only <code>LF</code> line-endings I get the warning:</p>

<pre><code>warning: LF will be replaced by CRLF in XXX.js.
The file will have its original line endings in your working directory.
</code></pre>

<p>Well, this sounds to me like I will have <code>CRLF</code> in my repository and <code>LF</code> in my working directory, even though it should be (and I want it to be) the exact other way around. The <code>js</code>-file's line endings are still <code>LF</code> after the commit.</p>

<p>Am I reading the warning wrong or did I set up <code>.gitattributes</code> in the wrong way?
Thanks!</p>

<p>p.s. my global git config has <code>autocrlf = true</code>, but that should not effect the EOL-conversion when committing because of the <code>.gitattributes</code> file</p>

<p>p.p.s the <code>js</code> file is in a subdirectory</p>
","0","110464","0","0"
"18864698","66502","2013-09-18 05:44:10","9","3055","<git><gitattributes>","Whitespace in .gitattributes patterns","<p>I am writing some tools for git that make use of <a href=""http://git-scm.com/book/ch7-2.html"" rel=""noreferrer"">smudge/clean filters</a>, and so I must create entries in the <code>.gitattributes</code> file.</p>

<p>Unfortunately, that file is parsed rather simply by splitting on whitespace, and so it is does not seem possible to me to include an explicit space character in the pattern.</p>

<p>I have been replacing whitespace characters with <code>?</code>, which matches again zero or one characters.</p>

<p>Ergo, a pattern of <code>has?spaces</code> will match against my target filename of <code>has spaces</code>, but also <code>hasspaces</code>.</p>

<p>Is there a way to only match spaces, or am I stuck with the near-match?</p>
","0","66502","0","0"
"27616697","520162","2014-12-23 08:32:29","1","136","<git><gitattributes><git-filter>","How would I protect a certain file from being processed by a git filter?","<p>Say I've got that git filter that does some cleanup on the XML files used in my project. Configuration is done like this:</p>

<pre><code>*.xml filter=clear-xml
</code></pre>

<p>One thing that filter does in the <code>clean</code> step is to check whether there's an empty line at the end of the file and if not, it adds one. The <code>smudge</code> part of the filter does nothing.</p>

<p>Now, there's this single unique XML file that gets generated without an empty line at the end. This file shall not be processed by the <code>clear-xml</code> filter.</p>

<p>How would I approach this problem?</p>
","0","520162","0","0"
"45481391","3933631","2017-08-03 10:19:22","2","1799","<git><gitattributes>","Does .gitattributes rebuild itself?","<p>Does this file rebuild itself? I am deleting from project some old files and classes. When I was looking for instances and uses of this classes I have found entries of them in .gitattributes. So I am wondering if I should delete those entries also from there, or does git will rebuild .gitattributes properly later?</p>
","0","3933631","",""
"45533593","5405070","2017-08-06 15:31:49","7","2461","<git><git-lfs><gitattributes>","How to make git LFS not apply to a subdirectory","<p>My repository uses git LFS and includes lines such as this one in its .gitattributes:</p>

<pre><code>*.jar filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>There's one .jar file that I want to store in the repo directly, not involving LFS. Ideally, I would make LFS not apply to anything under the directory that contains that jar. Is there a way to do that?</p>
","0","5405070","0","0"
"64424022","4804881","2020-10-19 08:51:22","2","58","<regex><github><gitattributes>","Regex getting converted when checked-in to github","<p>I'm having the regex in one of the file as shown below.</p>
<pre><code>pattern = &quot;^[^,&amp;*\n\t\r]*&quot;
</code></pre>
<p>But when i check-in that to github, it's getting converted to invalid characters as shown in the below image.</p>
<p><a href=""https://i.stack.imgur.com/ohm1j.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ohm1j.png"" alt=""enter image description here"" /></a></p>
<p>I have added the .gitattributes as shown below. Still getting this error. Any help would be appreciated.</p>
<pre><code>* text=auto
*.proto text
</code></pre>
","8","4804881","",""
"46590142","1555615","2017-10-05 16:02:56","9","3664","<git><gitattributes><core.autocrlf>","What is the differrence between `* text=auto` and `* text eol=lf` in .gitattributes?","<p>I am looking again and again at the documentation of <a href=""https://git-scm.com/docs/gitattributes"" rel=""noreferrer"">.gitattributes</a> but I cannot find a clear answer on what is the differrence between these two:</p>

<p><code>* text=auto</code></p>

<p><code>* text eol=lf</code></p>

<p>Also is <code>text=auto</code> intended only for use with <code>*</code> or it can also be used with specific extensions? In such a case what is the differrence?</p>

<p><code>*.txt text=auto</code></p>

<p><code>*.txt text eol=lf</code></p>
","0","1555615","0","0"
"10843789","1004609","2012-06-01 02:49:10","3","983","<git><rebase><git-merge><gitattributes>","Apply merge rules from .gitattributes file to git rebase calls","<p>I have previously read and applied the instructions from <a href=""https://stackoverflow.com/questions/928646/how-do-i-tell-git-to-always-select-my-local-version-for-conflicted-merges-on-a-s"">this excellent answer</a> about setting up merge strategies for specific file types in git.  This works superbly for merges.  However, when I do a <code>git rebase</code>, the merge strategy isn't applied.</p>

<p>Is it possible to set <code>git rebase</code> up so that it applies a similar merge strategy to resolve certain conflicts automatically?</p>
","1","1004609","0","0"
"47065520","4916897","2017-11-02 00:05:31","0","1739","<git><bash><zip><gitattributes>","Sha256 hash of a zip file is different after git commit despite archive contents not changing?","<p>I'm using git archive to export source code from a certain project folder <code>src</code> in a repository in order to calculate its combined sha256 hash like so:</p>

<pre><code>git archive HEAD --worktree-attributes -o project-archive.zip src/
sha256sum project-archive.zip | awk '{ print $1 }' &gt; project-archive.zip.hash
</code></pre>

<p>My git attributes file lives at the root of the project and looks a bit like so:</p>

<pre><code>integration_tests/ export-ignore
src/unit_tests export-ignore
src/.* export-ignore
.git* export-ignore
.config.yml export-ignore
*.md export-ignore
</code></pre>

<p>This works well for calculating the hash of my source but I'm finding that modifications to project files that aren't being included in the archive, such as <code>.config.yml</code> and <code>integration_tests/foo.py</code> still modify the hash of the archive. </p>

<ul>
<li><p>There aren't any erroneous files in the archive itself.</p></li>
<li><p>The sha256 hash of each of the <code>.py</code> files is unchanged.</p></li>
<li><p>I only see these changes to the archive hash after I've commited the
unrelated (unarchived) changes, so I believe this to be a git behaviour or a misunderstanding of the
git attributes config on my part.</p></li>
</ul>

<p>Presumably there is some git metadata on the source files that I don't know about that effects the archive hash?</p>
","2","4916897","0","0"
"12318336","1346705","2012-09-07 12:41:02","13","3607","<windows><git><gitattributes>","Problems with git reset --hard after adding .gitattribute -- local changes that should not be there","<p>I have observed CRLF problems after merging bundles from my colleague. Sometimes lines with LF were mixed into the sources, probably the ones that were merged into. Therefore, we have decided to add the <code>.gitattributes</code> file with the following content (comments removed):</p>

<pre><code>*.cpp text
*.h text
*.inc text
*.cfg text
*.dic text

*.sln text eol=crlf
*.vcxproj text eol=crlf
*.filters text eol=crlf
*.user text eol=crlf
*.rc text eol=crlf
*.rc2 text eol=crlf
</code></pre>

<p>Now I observe the strange behaviour. I can see a lot of <code>modified: ...</code> files (i.e. unstaged) that should not be there. I tried <code>git reset --hard</code>, but the files still have the same status. I tried to clone the repository again -- the same result.</p>

<p>I have <code>git version 1.7.11.msysgit.0</code> installed from the <code>Git-1.7.11-preview20120620.exe</code> downloaded as current version for Windows.</p>

<p>What else should I try?</p>

<p>Thanks, 
  Petr</p>
","3","1346705","0","0"
"66320737","2326139","2021-02-22 17:41:49","4","1475","<git><gitattributes>","how do i add core.ignorecase to .gitattributes","<p>I have a repo that need to be run both in windows and linux, so need to set <code>git config core.ignorecase false</code></p>
<p>but instead of asking each developer to set this in their repo, I want to add this in <code>.gitattributes</code></p>
<p>I tried two things and both didn't work</p>
<pre><code>[core]
    ignorecase = false
</code></pre>
<p>and</p>
<pre><code>* text=auto ignorecase=false
</code></pre>
<p>I checked the <code>.git/config</code> file and content is like this:</p>
<p><a href=""https://i.stack.imgur.com/5XsNS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5XsNS.png"" alt=""enter image description here"" /></a></p>
<p>if I set it to <code>false</code>, I can see that vscode is picking files names changes. but when I set that in <code>.gitattributes</code> vscode doesn't pick the changes.</p>
<p>how should I set it only for this repository so all developers don't need to set it manually?</p>
","1","2326139","",""
"30912693","2639304","2015-06-18 10:20:31","0","264","<git><github><gitignore><gitattributes>","git add file to archive","<p>When I run this command, the files of my latest commit are <strong>saved to a ZIP</strong>.</p>

<pre><code>git archive -o ../code_version0.9.zip HEAD 
</code></pre>

<p>However <strong>the files</strong> in <code>node_modules</code> and <code>build/</code> <strong>are missing.</strong></p>

<p>That Is because my <code>.gitignore</code> is the following one:</p>

<pre><code>node_modules
build/
</code></pre>

<p><strong>How can I ignore files, but Include them In the archive?</strong> 
I looked into the documentation for <code>.gitattributes</code> but I couldn't find a include statement. </p>
","0","2639304","",""
"33013757","1168830","2015-10-08 10:53:51","2","1460","<gitattributes><subgit>","SubGit and .gitattributes","<p>I'm importing an SVN repository into Git, and I have a lot of files with <code>svn:eol-style</code> set. <strong>SubGit</strong> reads those properties and generates a <code>.gitattributes</code> line for <em>every</em> file.</p>

<p>Is there a way to tell it to use a single-liner for every type of file (i.e. <code>*.java text</code> or <code>*.java text eol=lf</code> since we have a style guide rule which mandates that)?</p>

<p>I tried to add the <code>info/attributes</code> to the repository just before the import, but there's no change in the generated <code>.gitattributes</code>.</p>

<p>Is there a way to do it?</p>
","0","1168830","0","0"
"30802367","823101","2015-06-12 11:50:05","0","63","<git><git-svn><gitattributes>","How to completly turn off git line endings auto correction","<p>I'm writing a script that migrates our SVN repos to GIT. I have discovered that one repo contains a <code>.gitattributes</code> file (with content like <code>* type=text</code>). That unfortunately means that all files are modified (line endings are auto corrected).</p>

<p>I don't want that because as a next step we are doing branch filtering (using <code>git filter-branch</code>) and it can't proceed with unstaged changes/uncommitted changes (and I also don't want to commit them).</p>

<p>How can I avoid changing endline characters on migration?</p>
","3","823101","",""
"21093479","1356973","2014-01-13 14:19:12","5","3982","<git><gitattributes>","""openssl""] is not a valid attribute name: .git/info/attributes:5","<p>I am getting following error when setting attributes in <code>.git/info/attributes</code> file.</p>

<pre><code>$ git add --dry-run . 
""openssl""] is not a valid attribute name: .git/info/attributes:5
""openssl""] is not a valid attribute name: .git/info/attributes:8
add '.gitignore'
add 'README.md'
</code></pre>

<p>Content of file: </p>

<pre><code>* filter=openssl diff=openssl

[merge]
        renormalize=true
[filter ""openssl""]
        smudge=~/.gitencrypt/smudge_filter_openssl
        clean=~/.gitencrypt/clear_filter_openssl
[diff   ""openssl""]
        textconv=~/.gitencrpt/diff_filter_openssl
</code></pre>

<p><strong>Updated:</strong> </p>

<pre><code>$ git version
git version 1.8.3.2
</code></pre>
","1","1356973","",""
"40659265","7141779","2016-11-17 15:48:43","41","17518","<github><gitattributes><github-linguist>","Using gitattributes for linguist examples","<p>Are there any concrete examples, in order to detect wrong languages in GitHub via Linguist attributes?  </p>

<p>Source: <a href=""https://github.com/github/linguist"" rel=""noreferrer"">https://github.com/github/linguist</a></p>

<ul>
<li>linguist-documentation</li>
<li>linguist-language </li>
<li>linguist-vendored</li>
</ul>
","1","7141779","0","0"
"59449442","712700","2019-12-23 01:59:36","2","369","<git><normalization><line-endings><eol><gitattributes>","Disable end of line normalization via .gitattributes file","<p>How can I disable end of line normalization (line terminator) via .gitattributes file? Or more usefully, disable it for certain paths and/or files. Also I want Git to show diff's/merge's as per usual for text files.</p>

<p>Since sometimes you need to normalize line endings for text files depending on the OS (i.e. using <code>* text=auto</code> in the <code>.gitattributes</code> file), how can exclusions be achieved?</p>
","0","712700","",""
"29694540","1171133","2015-04-17 08:51:49","10","4060","<git><gitattributes>","list all files having a git attribute set","<p><code>git check-attr</code> allows me to check if an attribute is set in <code>.gitattributes</code> for a specific set of files. 
e.g:</p>

<pre><code># git check-attr myAttr -- org/example/file1 org/example/file2
org/example/file1: myAttr: set
org/example/file2: myAttr: unspecified
</code></pre>

<p>Is there an easy way to list all files having <code>myAttr</code> set, including all wildcard matches?</p>
","0","1171133","0","0"
"18877877","984270","2013-09-18 16:46:59","28","15816","<git><hook><gitattributes>","How to automatically invoke a script before a git add?","<p>Here's my use case: I commit PNGs and other stuff in my Git repo. I would like to apply a specific process to every PNGs I would like to commit and this is the result of the process I finally want to commit (the potential modified PNG).</p>

<p>At the beginning I thought about a hook (like a <code>pre-commit</code>) but it's a little weird because the process will change the file so I will need to re-add it! And according to what I <a href=""https://www.kernel.org/pub/software/scm/git/docs/githooks.html"">read</a>, there is no <code>pre-add</code> hook (or something like that).</p>

<p>May be a solution is to create a git alias ? But I don't want to change - too much -  the way people work, I'm searching for a smooth and transparent way.</p>

<p>If you have a clue... even if the clue is to change my process idea.</p>
","0","984270","0","0"
"40795130","2994596","2016-11-24 22:09:40","1","955","<git><gitattributes><git-lfs>","How can I track text files with proper line endings normalization using git-lfs?","<p>I have a repository to which I would like to add large text data files. Due to their number and size (which can be up to approximately 100MB in some cases), I would like to track those files with <code>git-lfs</code>.</p>

<p>I've added such a file with <code>git lfs track data.txt</code>, and changed the default <code>-text</code> (which specifies a binary file) to <code>text=auto</code> in the <code>.gitattributes</code> file (as documented in <a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">git-scm's gitattributes documentation</a>). This gives me a <code>.gitattributes</code> which looks like:</p>

<pre><code>data.txt filter=lfs diff=lfs merge=lfs text=auto
</code></pre>

<p>And just to be sure, I have <a href=""https://help.github.com/articles/dealing-with-line-endings/#refreshing-a-repository-after-changing-line-endings"" rel=""nofollow noreferrer"">refreshed the repository</a>. Even so, it seems that the file is still tracked as a binary object and correspondingly the end-of-line conversion filter is not applied on check-out (i.e. the file is getting checked-out with the original line endings it was checked-in with).</p>

<p>I've also tried with <code>text=crlf</code> (and the variant <code>text eol=crlf</code>) with the same result. I have seen a number of documents and tutorials about using <code>git-lfs</code> but they all seem to be geared towards tracking binary files (such as <a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial"" rel=""nofollow noreferrer""><code>*.bin</code></a>, <a href=""https://github.com/blog/2079-managing-large-files-with-git-lfs"" rel=""nofollow noreferrer"">images</a>, <a href=""https://www.atlassian.com/git/tutorials/git-lfs/"" rel=""nofollow noreferrer"">audio files</a>, ...)</p>

<p>Is there a way to make the file tracked as a large text file (and have the end-of-lines normalized as would be for regular text files) with <code>git-lfs</code>? </p>

<p>I am currently using <code>git-lfs</code> 1.5.2, and <code>git</code> for Windows 2.10.2 (64-bit version) on a Windows 7 platform, with the <code>core.autocrlf=true</code> configuration. </p>
","0","2994596","0","0"
"48789703","2020827","2018-02-14 14:34:13","3","706","<git><line-endings><gitattributes><git-filter>",".gitattributes using '* text=auto' with filters","<p>In a cross-platform project, what is the right way to configure <em>CRLF normalization</em> for all text files '<code>* text=auto</code>' together with <em>'smudge' and 'clean' filters</em> for certain files '<code>*.h filter=myfilter</code>'?</p>

<p>Example:</p>

<pre class=""lang-sh prettyprint-override""><code># my .gitattributes
* text=auto           # in case people don't have core.autocrlf set
*.h filter=myfilter   # filter for header files
</code></pre>

<p>After adding <code>*.h filter=myfilter</code>, I am getting warnings like:</p>

<blockquote>
<pre><code>warning: LF will be replaced by CRLF in foo.h.
The file will have its original line endings in your working directory.
</code></pre>
</blockquote>

<p>If I remove <code>*.h filter=myfilter</code>, the warning disappears. Why? Is this line disabling the <em>CRLF normalization</em> for *.h files?</p>

<h3>Update</h3>

<p>As to the warning, the filters use <code>sed</code> to replace tags in file header comments. When run on windows <code>sed</code> is converting <code>CRLF</code> to <code>LF</code>. This is where the warning is coming from. The solution is to run <code>sed</code> in binary mode (<code>--binary</code>).</p>
","0","2020827","",""
"59907844","694705","2020-01-25 09:10:21","0","217","<gitattributes><github-linguist>","github-linguist does not recognize vendored files from .gitattributes","<p>Github's linguist is detecting many files in my repos which are vendored, especially JavaScript. <a href=""https://github.com/github/linguist#vendored-code"" rel=""nofollow noreferrer"">I found out</a> that a <code>.gitattributes</code> can be used to configure linguist to ignore several files for statistics count.</p>

<p>But this doesn't work, in any way I try. It seems like it simply doesn't matter whats defined in my <code>.gitattributes</code>. So far, I've tried the following:</p>

<pre><code>deploy/static/js/pdfjs/*    linguist-vendored
deploy/static/py/Brython-3.7.1/*    linguist-vendored

deploy/static/js/pdfjs/build/pdf.js linguist-vendored
deploy/static/js/pdfjs/web/debugger.js  linguist-vendored
deploy/static/js/pdfjs/web/viewer.js    linguist-vendored
deploy/static/py/Brython-3.7.1/brython.js   linguist-vendored

/deploy/static/js/pdfjs/*   linguist-vendored
/deploy/static/py/Brython-3.7.1/*   linguist-vendored

**/pdfjs/*  linguist-vendored
**/Brython-3.7.1/*  linguist-vendored
</code></pre>

<p>The result when I run <code>github-linguist --breakdown</code> is always</p>

<pre><code>JavaScript:
deploy/static/js/app.js
deploy/static/js/pagination.js
deploy/static/js/pdfjs/build/pdf.js
deploy/static/js/pdfjs/web/debugger.js
deploy/static/js/pdfjs/web/viewer.js
deploy/static/py/Brython-3.7.1/brython.js
sources/gulpfile.js
</code></pre>

<p>What am I doing wrong?</p>
","2","694705","",""
"51957907","1797006","2018-08-21 23:17:00","11","18626","<git><line-endings><gitattributes><lf>","Avoid ""No newline at end of file"" in git diff","<p>I'm quite sure I understand what <a href=""https://stackoverflow.com/questions/5813311/no-newline-at-end-of-file"">No newline at end of file</a> means. I want to provide a pull request of a branch which I created long time ago and rebased (commits might be from the time before <code>.gitattributes</code> has been added). I see that some <code>.java</code> source code files have only the change</p>

<pre><code>-}
\ No newline at end of file
+}
</code></pre>

<p>regardless of the configuration, I'd simply like these changes to be excluded from the PR commit. I'd like to avoid picking the changes with <code>git difftool</code> and broaden my understanding of <code>git</code>.</p>

<p>The thing is that I already don't understand how this change can exist since there's a <code>.gitattributes</code> with</p>

<pre><code># Set the default behavior, in case people don't have core.autocrlf set.
* text=auto

# Explicitly declare text files you want to always be normalized and converted
# to native line endings on checkout.
*.c text
*.h text
*.java text
*.css text
*.js text
*.xml text
*.dtd text
*.xsl text
*.properties text
*.txt text
*.svg text
*.yml text
*.md text

# Declare files that will always have CRLF line endings on checkout.
*.sln text eol=crlf

# Denote all files that are truly binary and should not be modified.
*.png binary
*.gif binary
*.jpg binary
*.jpeg binary
*.eot binary
*.ttf binary
*.woff binary
*.woff2 binary
</code></pre>

<p>in the repository and I ran <code>git rm --cached -r . &amp;&amp; git add .</code> which should convert all line endings to LF because of <code>*.java text</code> (also tried <code>*.java text</code>), but there're no changes shown (against <code>HEAD</code>) and <code>git diff</code> still shows the line ending difference.</p>

<p>Also <code>find ./ -type f -name '*.java' -exec dos2unix {} \;</code> doesn't causes any changes to be recognized by <code>git status</code> and <code>git diff master</code> still displays the line ending change (while the working directory has no staged or unstaged changes).</p>

<p>I'm not interested in hiding the changes, like <code>git diff --ignore-all-space</code> would do.</p>

<p>I'm using <code>git</code> 2.17.1 on Ubuntu 18.04.</p>
","0","1797006","0","0"
"4348590","287289","2010-12-03 18:23:49","206","35553","<git><gitattributes>","How can I make git ignore future revisions to a file?","<p>I have created a default version of a file included in a git repository.  It's important that when someone clones the repository, they get a copy of this file.  However, I would like to set git so that it ignores changes to this file later.  <code>.gitignore</code> works only on untracked files.</p>

<p>My motivation is that this file contains machine-specific information.  I would like to provide default values, while allowing people to make local changes that won't get pushed back to the origin repository, creating merge conflicts when we pull new changes.</p>

<p>We are generally pretty lazy and use <code>git add .</code> a lot, so I'm pretty sure if I can't tell git to ignore this file, changes to it will end up getting committed and pushed.</p>

<p>To summarize,</p>

<ol>
<li>I would like to create a file, call it <code>default_values.txt</code> that is added to my git repository and is included when someone clones that repository.</li>
<li><code>git add .</code> should not add <code>default_values.txt</code> to the commit.</li>
<li>This behavior should be passed on to any clones of the repository. </li>
</ol>
","6","287289","0","0"
"40874563","4852374","2016-11-29 19:48:50","1","694","<git><newline><gitattributes>","git filter-branch and gitattributes","<p>I want to convert Windows/mixed line endings in the history of an enterprise git repository into Unix line endings using <code>git filter-branch</code>. Since the repository contains some domain specific binary file types, the <code>.gitattributes</code> file is quite elaborated, so I would rather use git's own mechanism for EOL conversion as opposed to <code>dos2unix</code> scripting like <a href=""https://stackoverflow.com/questions/16693512/rewriting-git-history-to-make-crlf-consistent"">here</a>.</p>

<p>I managed to do the conversion using the procedure that I describe in <a href=""https://github.com/cnaj/demo-crlf-rewrite/tree/so-question"" rel=""nofollow noreferrer"">https://github.com/cnaj/demo-crlf-rewrite/tree/so-question</a>, namely to do a <em>tree-filter</em> that adds the <code>.gitattributes</code> and then performs a <code>git reset</code>. Without the reset the history would remain unchanged. However, apparently the index is still at the HEAD revision during the filter operations, so only files that are changed with respect to HEAD are recognized, and only those files are converted according to <code>.gitattributes</code> (hence the ""NUKE"" commit in the demo).</p>

<p>My questions:</p>

<ol>
<li>Is this procedure safe to use, or is it just an accidental outcome of undocumented (or misunderstood) behavior?</li>
<li>What is git's index during the <em>tree-filter</em> operation? Can commands that alter the index be used in <em>tree-filter</em> (I didn't find explicit documentation on this topic)?</li>
<li>Bonus question: What exactly causes git to pick up the line ending conversions in this setting? (I'm having a hard time understanding what's going on...)</li>
</ol>
","0","4852374","",""
"21990758","97300","2014-02-24 14:35:37","1","298","<php><git><symfony><phing><gitattributes>","Way to disable git attribute $id$ filter?","<p>I do know it is not a place to discuss product specific problems, yet I try to ask a Git specific question that arouse in a Git GUI product.</p>

<p>The <a href=""http://www.phing.info/"" rel=""nofollow noreferrer"">Phing</a> PHP library has the $id$ notation in their source code header and the Git GUI product keeps extending the SHA-1 gitattribute filter onto those files making them appear as modified versions.
Please see the screenshot below how this looks like. </p>

<p><img src=""https://i.stack.imgur.com/4yTN2.png"" alt=""enter image description here""></p>

<p>Can someone disable this built in filter in a gitattribute file? It can be only applied to PHP files.</p>
","1","97300","",""
"22106609","2445008","2014-02-28 21:58:30","10","2359","<c#><git><gitattributes>","What does the value means in git?","<p>In a <code>.gitattributes</code> file I found the following line</p>

<pre><code>*.cs   text diff=csharp
</code></pre>

<p>what does it mean?</p>
","0","2445008","",""
"22106645","534003","2014-02-28 22:00:23","0","289","<git><deployment><web-deployment><gitattributes>",".gitattributes export-ignore if in current directory but include if in subdirectory","<p>How can I use .gitattributes to ignore a directory in the parent but include the directory in the child?</p>

<p>For example, consider a <code>/config</code> directory.  The root has a <code>/config</code> directory and there is also one located in <code>/app/config</code>  </p>

<p>Adding </p>

<pre><code>config export-ignore
</code></pre>

<p>would solve things for the root <code>/config</code> but it also removes the subdirectory <code>/app/config</code>.  </p>

<p>How can I keep the subdirectory <code>/app/config</code>?</p>
","0","534003","",""
"42311670","329700","2017-02-18 06:00:18","1","813","<git><gitattributes><git-archive>","Specify custom gitattributes file location for git archive","<p>I'd like to expose <code>git archive</code>, but have a way for users to ask for some files or globs to be excluded, so the resulting archive file is not very big.</p>

<p>Normally you'd write the file/glob list to <code>.gitattributes</code> and then run <code>git archive</code>. But this means only one person can ask for an archive per on-disk repository, since they have to write their ignore-export list to <code>.gitattributes</code>, then get the archive, before yielding to someone else. Also this means that whatever settings you had in there previously get clobbered.</p>

<p>Is there a way I could write to /tmp/attributes-1 or another similar temp file, and tell <code>git archive</code> to read that .gitattributes file instead of <code>$repo/.gitattributes</code>? Reading the doc string, it doesn't seem like it.</p>

<p><a href=""https://git-scm.com/docs/git-archive"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-archive</a></p>

<p><a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">https://git-scm.com/docs/gitattributes</a></p>
","0","329700","",""
"23313620","3491667","2014-04-26 16:27:01","10","4326","<git><merge><git-config><gitattributes>","Select git mergetool based on file type","<p>When running <code>git mergetool</code>, I'd like to have git select the merge tool used based on the file extension. How can I do this? </p>

<p>A similar question was asked here: <a href=""https://stackoverflow.com/questions/7403102/git-configure-patterns-for-difftool-and-mergetool"">Git: configure patterns for difftool and mergetool</a>
and the answer was to write a custom merge driver. However, it seems like this would be executed upon <code>git merge</code>, whereas I would like the merge tool to be chosen upon <code>git mergetool</code>. </p>

<p>It seems like there must be some way to specify this with .gitattributes, but I can't seem to figure out how. Any advice?</p>
","0","3491667","0","0"
"41496664","3703933","2017-01-05 23:43:05","1","4416","<git><github><gitattributes>","gitattribute end of line setting","<p>I'm working on a code repository where all developers collaborating with the repository using windows PC &amp; eclipse as their IDE. The repository administrator has setup this <code>.gitattributes</code> file in the parent directory with the following:</p>
<pre><code>* text eol=crlf
</code></pre>
<p>I read <a href=""http://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/"" rel=""nofollow noreferrer"">here</a> that git internally maintains object database to write(commit)/read(checkout) the changes.</p>
<p>Does this above setting in <code>.gitattributes</code> will checkout the code with CRLF(windows) line ending and the file in the repository will be maintained in CRLF?</p>
<p>Enabled the &quot;Show White Spaces&quot; option in Eclipse IDE revealed that all the file endings were line feed(LF) without carriage return(CR).</p>
<p>Could someone point out the cause of this behavior?</p>
<p>On a different repository, It has</p>
<pre><code>* text eol=lf
*.java eol=crlf
*.csv eol=crlf
*.jar binary
*.sql eol=crlf
</code></pre>
<p>Does this mean all files(.java/.csv/.sql) would have CRLF and other files would have LF line endings?</p>
","1","3703933","",""
"12846125","801098","2012-10-11 18:22:48","1","515","<svn><unity-game-engine><automatic-properties><gitattributes>","Does SVN have an equivalent to .gitattributes?","<p><strong>Background:</strong></p>

<p>I have two Unity3d projects:</p>

<ul>
<li>The first whose Unity preferences are set to 'mixed asset' mode (some files are text, some are binary) and</li>
<li>The second whose preferences are set to 'force text' (most binary files are translated to <code>YAML</code> text, so nearly all files can be <code>diff</code>ed).</li>
</ul>

<p>In order to set the 1st project's files to text/binary, our <code>~/.subversion/config</code> file has <code>svn auto-props</code> enabled along with the list of files and their svn properties (<strong>*.cs</strong> files set to <code>svn:eol-style=native</code>, <strong>*.unity</strong> files are set to <code>svn:mime-type=application/octet-stream</code>, and so forth).</p>

<p><strong>Problem:</strong></p>

<p>Since our second project now supports a text mode for all the files, we would need to use a different set of <code>auto-props</code> rules so the <strong>*.unity</strong> files are now handled as <code>svn:eol-style=native</code>.</p>

<p>I see that <code>git</code> can use <code>.gitattributes</code> which is on a per-project (or per-directory) basis, so we could have this functionality. Can SVN do this with some sort of file we can share in our repo so everyone who commits will use the same default settings?</p>
","0","801098","",""
"13531988","281545","2012-11-23 15:31:31","7","3671","<git><line-endings><gitattributes>","git line endings : renormalize does not seem to checkout the right line endings","<p>I decided to set my line endings the Right Way via a <code>.gitattributes</code> file as detailed for instance <a href=""http://timclem.wordpress.com/2012/03/01/mind-the-end-of-your-line/"">here</a> - so I set the core.autocrlf to false and created and committed a .gitattributes file :</p>

<pre><code>*.java text eol=native
*.jsp text eol=native
*.css text eol=native
*.html text eol=native
*.js text eol=native
*.xml text eol=native
*.sql text eol=native
*.MF text eol=native

# git files
*.gitignore text eol=native
*.gitattributes text eol=native

#eclipse files
*.classpath text eol=native
*.project text eol=native
*.prefs text eol=native
*.properties text eol=native
</code></pre>

<p>I then issued <code>git rm --cached -r .</code> and then <code>git reset --hard</code> (tried also <code>git checkout HEAD</code>), as suggested <a href=""https://help.github.com/articles/dealing-with-line-endings"">here</a>. Now all the files have LF line endings. Shouldn't be CRLF ? What do I miss ? I am on windows 7, <code>git version 1.8.0.msysgit.0</code>.</p>

<p>Thanks</p>
","14","281545","0","0"
"31172162","1018226","2015-07-01 21:39:34","2","324","<git><gitattributes><git-filter>","Can gitattributes filters remove or add files?","<p><a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#Keyword-Expansion"" rel=""nofollow"">Git attributes</a> can be used to set up filters per file to make the content of the working directory be a transformed version of the repository content. I was wondering if this could be used to clean up the <code>.SRCINFO</code> files that have to be dealt with in <a href=""https://aur4.archlinux.org/"" rel=""nofollow"">Archlinux' new AUR version 4</a>.</p>

<p>Essentially, there are two files called <code>PKGBUILD</code> and <code>.SRCINFO</code> that both have to be stored in the repository. For my case it can be safely assumed that <code>.SRCINFO</code> is generated by running a program called <code>mksrcinfo</code> on the <code>PKGBUILD</code>. I want both to show up in the repository, but only <code>PKGBUILD</code> in my local tree.</p>

<p>How can I set up a filter pair so that</p>

<ul>
<li><p><em>smudge</em> removes <code>.SRCINFO</code>, or even better does not create it to begin with and</p></li>
<li><p><em>clean</em> adds <code>.SRCINFO</code>, generated by running <code>mksrcinfo PKGBUILD</code>?</p></li>
</ul>
","0","1018226","",""
"13704936","37422","2012-12-04 14:17:26","4","6008","<c#><git><encoding><gitattributes>","How to stop git from breaking encoding on checkout","<p>I recently added a .gitattributes file to a c# repository with the following settings:</p>

<pre><code>*            text=auto
*.cs         text diff=csharp
</code></pre>

<p>I renormalized the repository <a href=""https://help.github.com/articles/dealing-with-line-endings"" rel=""nofollow"">following these instructions from github</a> and it seemed to work OK.</p>

<p>The problem I have is when I checkout some files (not all of them) I see lots of weird characters mixed in with the actual code. It seems to happen when git runs the files through the <code>lf-&gt;crlf</code> conversion specified by the .gitattributes file above.</p>

<p>According to Notepad++ the files that get messed up are using <code>UCS-2 Little Endian</code> or <code>UCS-2 Big Endian</code> encoding. The files that seem to work OK are either <code>ANSI</code> or <code>UTF-8</code> encoded.</p>

<p>For reference my git version is <code>1.8.0.msysgit.0</code> and my OS is Windows 8.</p>

<p>Any ideas how I can fix this? Would changing the encoding of the files be enough?</p>
","0","37422","",""
"13711190","283776","2012-12-04 20:20:33","4","6834","<git><core.autocrlf><gitattributes>",".gitattributes with core.autocrlf unset","<p>I have a .gitattributes file in my repository that looks like this</p>

<pre><code>* text=auto
*.txt text
</code></pre>

<p>I have unset core.autocrlf in the repository, global, and system settings. My understanding, based on the documentation for gitattributes, is that all files in the repository whose names end with .txt should be checked out with the native line endings. What I'm seeing, though, is that the .txt files always have LF for line endings, even on Windows. Given this configuration, why aren't the line endings CRLF on Windows?</p>
","3","283776","0","0"
"2873124","108538","2010-05-20 11:16:18","2","657","<ruby><git><gitattributes>","How to determine files that are subjected to filter via gitattributes when filter is executed?","<p>I have bunch of ruby scripts in a git repository and it seems to be really hard to enforce people to write properly indented code.  </p>

<p>I also have a small ruby script that formats to code to specific standard and now i would like to run that as a a filter script so that junk wont get committed into repository.</p>

<pre><code>echo ""*.rb filter=rubyfilter"" &gt; .gitattributes
echo ""[filter \""rubyfilter\""]"" &gt;&gt; .git/config
echo ""    clean = /home/rasjani/bin/rbeauty"" &gt;&gt; .git/config
echo ""    smudge = /home/rasjani/bin/rbeauty"" &gt;&gt; .git/config
</code></pre>

<p>does the dirty trick git side but the ruby script should then process the files affected:</p>

<p>how / where do i look those up from ? </p>
","0","108538","0","0"
"13988619","416542","2012-12-21 10:44:54","8","1591","<git><version-control><filter><gitattributes>","Apply multiple filters for same files in git","<p>I am using Git for version control of local files, which finally have to be checked in into another version control system. Now I am experiencing some problems with most of the C code files:</p>

<ol>
<li>They all have an automatic version history in their header comment</li>
<li>Most of the files are cluttered by EasyCode or EasyCase comments</li>
</ol>

<p>I now simply created two git filters ""History"" and ""EasyTool"" to clean up the code before being checked in to Git. How is it possible to filter all C and H files with both of the filters?</p>

<p>Specifying the commands multiple times does not work and concatenation of the filter command does neither (or I at least did not find the correct syntax).</p>

<p>This was my first try:</p>

<pre><code>*.c  filter=History
*.c  filter=EasyTool           # This one wins, ""History"" is not executed
</code></pre>

<p>Then I tried something like this:</p>

<pre><code>*.c  filter=History EasyTool   # The first wins, other separators work neither
</code></pre>
","0","416542","0","0"
"66896135","585411","2021-03-31 22:31:25","1","972","<git><macos><gitattributes>","Git messing up line endings despite .gitattributes","<p>I have already seen <a href=""https://stackoverflow.com/questions/41496664/gitattribute-end-of-line-setting"">gitattribute end of line setting</a> and this is a different and quite bizarre problem.  I have already checked my autocrlf and eol configurations and they are not set</p>
<p>I'm on a Mac.  In our repository we have a .gitattributes file that looks like this:</p>
<pre><code>*.sql text eol=lf
*.sh text eol=lf
</code></pre>
<p>This works perfectly for .sql files.  However we have a file named <code>scripts/some-version.SQL</code>.  It is checked in with Unix lf endings.  When I check it out on OS X, that file immediately gets converted to dos crlf endings and is marked as changed.  Checking the same file out on Windows gives a Unix lf ending.</p>
<p>If I comment out the <code>.sql</code> line in the .gitattributes file, I stop getting the .SQL file checked out as crlf.  It is the .gitattributes  that is causing this behavior.  However then Windows users will accidentally start checking in crlf endings again.  Changing the filename is sadly not an option.</p>
<p>I tried adding a <code>.SQL text eol=lf</code> line to .gitattributes but that did not help.</p>
<p>How can we have a .gitattributes for our Windows users without messing up the line endings for this file on OS X?</p>
<hr />
<p>Per request.  A demonstration of the issue, along with <code>check-attr</code>.</p>
<pre><code>macbookpro:postgres btilly$ git checkout scripts/
Updated 1 path from the index
macbookpro:postgres btilly$ git status scripts/3.20.08-UPDATE.SQL 
On branch integration
Your branch is up to date with 'origin/integration'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    modified:   scripts/3.20.08-UPDATE.SQL

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
macbookpro:postgres btilly$ git check-attr -a scripts/3.20.08-UPDATE.SQL 
scripts/3.20.08-UPDATE.SQL: text: set
scripts/3.20.08-UPDATE.SQL: eol: lf
macbookpro:postgres btilly$ file scripts/3.20.08-UPDATE.SQL 
scripts/3.20.08-UPDATE.SQL: UTF-8 Unicode text, with very long lines, with CRLF line terminators
</code></pre>
","9","585411","",""
"67047123","1417628","2021-04-11 15:56:02","0","193","<git><githooks><gitattributes>","Git's `.gitattributes` filter not updating content in the worktree","<p>I wanted to use <code>.gitattributes</code> filter to update files on <code>git add</code> (actually, anything before commit would be fine).</p>
<p>However, despite the filter being ran, the content stays the same in the worktree.</p>
<p>I made a minimal repo as a showcase:</p>
<p><code>foo.txt</code></p>
<pre><code>Foo
&lt;start&gt;
&lt;stop&gt;
Bar
</code></pre>
<p><code>update-toc</code></p>
<pre class=""lang-py prettyprint-override""><code>#!/usr/bin/env python3

import re
import sys

def parse(lines):
    start = -1
    stop = -1
    for i, line in enumerate(lines):
        if re.match('&lt;start&gt;', line):
            start = i
            continue
        if re.match('&lt;stop&gt;', line):
            stop = i
            continue
    return start, stop

print('STARTING FILTER', file=sys.stderr)
lines = sys.stdin.readlines()
start, stop = parse(lines)
if start != -1 and stop != -1:
    new_lines = lines[:start + 1] + ['baz\n'] + lines[stop:]
else:
    new_lines = lines
sys.stdout.write(''.join(new_lines))
print('ENDING FILTER', file=sys.stderr)
sys.stderr.write(''.join(new_lines))
</code></pre>
<p><code>.gitattributes</code></p>
<pre><code>*.txt   filter=update-toc
</code></pre>
<p><code>.git/config</code></p>
<pre><code>[filter &quot;update-toc&quot;]
        smudge = ./update-toc
        clean = ./update-toc
        required
</code></pre>
<p>On this repo, if I run the following commands I can witness the filter being ran successfully but the content itself not being updated:</p>
<pre><code>$ git add --renormalize foo.txt
STARTING FILTER
ENDING FILTER
Foo
&lt;start&gt;
baz
&lt;stop&gt;
Bar

$ cat foo.txt
Foo
&lt;start&gt;
&lt;stop&gt;
Bar
</code></pre>
<p>Various edits and commits do not change <code>foo.txt</code> outside my own modifications.</p>
<p>If I however remove <code>foo.txt</code> then check it out (<code>git checkout</code>) then I'll retrieve the filtered version.</p>
<pre><code>$ rm foo.txt
$ git checkout foo.txt
$ cat foo.txt
Foo
&lt;start&gt;
baz
&lt;stop&gt;
Bar
</code></pre>
<p>Is there a way to modify worktree content as well or check it out automatically (maybe combining filter with a Git hook) ?</p>
","2","1417628","",""
"67095785","2559709","2021-04-14 16:40:53","1","974","<git><github><gitlab><gitattributes>","Why github/gitlab are appling gitattributes incorrectly?","<p>This is a similar issue I found: <a href=""https://stackoverflow.com/questions/24212291/make-github-use-gitattributes-binary-attribute"">Make github use .gitattributes &quot;binary&quot; attribute</a>
If it's not intended to work in Github then my question applies to Gitlab only.</p>
<hr />
<p>So the question: Imagine creating a branch with a single text <code>Dockerfile</code> and following <code>.gitattributes</code>:</p>
<pre><code>[core]
    whitespace=trailing-space,space-before-tab
[apply]
    whitespace=fix
* binary
Dockerfile text=auto diff merge
</code></pre>
<p>You push this code, you can view commit in interface and it works just fine.
Then you decide that <code>Dockerfile</code> should be binary as well (for whatever reason) and remove the last line. You commit it and then make change to the <code>Dockerfile</code> to check if it works. You call <code>git show</code> and it shows that changes indeed applied:</p>
<pre><code>pzixe@ZPC MINGW64 ~/Documents/Repos/gitlab-test (all-binary)
$ git show HEAD
commit 141451116e292ae30a515920e6efb906f84b4142 (HEAD -&gt; all-binary, origin/all-binary, github/all-binary)
Author: Psilon &lt;pzixel@gmail.com&gt;
Date:   Wed Apr 14 19:25:04 2021 +0300

    test changes

diff --git a/Dockerfile b/Dockerfile
index 11f0f66..fef4bc1 100644
Binary files a/Dockerfile and b/Dockerfile differ
</code></pre>
<p>But now if you check the github interface you will see that it actually shows a text diff instead of binary diff which was asked:</p>
<p><a href=""https://i.stack.imgur.com/PmtuQ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PmtuQ.png"" alt=""enter image description here"" /></a></p>
<p>Then you're trying to see if GitLab is working differently and find out it's not:</p>
<p><a href=""https://i.stack.imgur.com/Swpp5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Swpp5.png"" alt=""enter image description here"" /></a></p>
<p>So the question is: is there any way to make this working? I'd expect to see a text diff of initial commit <code>6c0745e</code> and binary collapsed diff on latest commit <code>1414511</code></p>
<p>Here is a repo with reproduced case: <a href=""https://github.com/Pzixel/test-gitlab"" rel=""nofollow noreferrer"">https://github.com/Pzixel/test-gitlab</a></p>
","2","2559709","",""
"67138825","8225336","2021-04-17 13:44:28","0","206","<git><gitignore><gitattributes>",".gitignore all binary files declared by .gitattributes","<p>What if <code>.gitignore</code> let's you define a pattern basically saying <code>ignore all files considered as binary files</code>? I mean without adding each pattern, because that are too many lines, but instead something like <code>binary</code>, similar to what <code>.gitattributes</code> let's you define.</p>
<p>Basically I would like:</p>
<ul>
<li>ignore all files by default, which are considered as <code>binary</code> as auto-detected by git and as specified by <code>.gitattributes</code></li>
<li>allow specific binary files only, by allowing them explicitely with <code>.gitignore</code> as usual</li>
</ul>
<p>I did not yet found any hint that something like this is possible. Does somebody knows more?</p>
","1","8225336","",""
"68543685","14175884","2021-07-27 11:00:51","2","3031","<github><gitattributes><github-linguist>","Github: linguist-generated=true not working in .gitattributes","<p>I am storing all the generated files in the build folder and trying to ignore these files in the pull request, I found and used the following method for doing so:</p>
<p>1.Create a .gitattributes file in the root directory.</p>
<p>2.Add this code to it:</p>
<pre><code>build/**/* linguist-generated=true
/build/**/* linguist-generated=true
/build/**/*.html linguist-generated=true
build/*.html linguist-generated=true
build/ linguist-generated=true
/build/ linguist-generated=true
build/name.html linguist-generated=true
/build/name.html linguist-generated=true
</code></pre>
<p>I know all these lines might not be necessary but this is everything I have already tried to see if it works, but the files in the build folder still show up in PR changed files tab, What am I doing wrong here?</p>
","3","14175884","",""
"33224945","2329708","2015-10-19 22:21:54","3","1261","<windows><git><sed><mingw><gitattributes>","Update file on git add with clean filter and sed","<p>I have a small header at the top of some of my project files that I want to make sure are updated with the current year every time I make a change to them. I'm having an issue with my clean filter in git throwing an error:</p>

<p>First, I have a file called <code>testClass.cs</code> on my master branch:</p>

<pre><code>// *********************
// File active 2011-2014
// *********************
</code></pre>

<p>I then make a small change to the file:</p>

<pre><code>// *********************
// File active 2011-2014
// *********************

// First commit, wahoo!
</code></pre>

<p>then I run <code>git add testClass.cs</code> to stage the change for the next commit. This runs my git clean filter that uses <code>sed</code> to attempt to edit the file inplace to update the year in the header to 2015 (ie, 2011-2014 should be changed to 2011-2015). Here is the config, with the filter setting:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
    hideDotFiles = dotGitOnly

[filter ""updatedate""]
    clean = sed -i ""s/2011-[[:digit:]]\\{4\\}/2011-$(date '+%Y')/"" %f
</code></pre>

<p>The issue that I am having, is that the add/update fails due to a ""Device or resource busy"" error. Seemingly to have something to do with the temp file that sed creates. The sed command works fine if I test it on the command line, but fails when used as a filter.</p>

<pre><code>$ git add testClass.cs
sed: cannot rename ./sed0jmaI2: Device or resource busy
error: external filter sed -i s/2011-[[:digit:]]\{4\}/2011-$(date '+%Y')/ %f failed 4
error: external filter sed -i s/2011-[[:digit:]]\{4\}/2011-$(date '+%Y')/ %f failed
</code></pre>

<p>I'm using git bash version 2.5.3 (MINGW64).</p>
","4","2329708","0","0"
"22577405","1354768","2014-03-22 12:10:05","2","2277","<git><merge><git-merge><gitattributes>",".gitattributes merge driver is not used","<p>At first, I know this question <a href=""https://stackoverflow.com/questions/928646/how-do-i-tell-git-to-always-select-my-local-version-for-conflicted-merges-on-a-s"">How do I tell git to always select my local version for conflicted merges on a specific file?</a> but this post doesn't help me and I can't add any comments because of my reputation.</p>

<p><a href=""http://git-scm.com/book/en/Customizing-Git-Git-Attributes"" rel=""nofollow noreferrer"">http://git-scm.com/book/en/Customizing-Git-Git-Attributes</a> suggests to set the merge strategy to ours for the path instead of setting a custom merge driver.</p>

<p>What is the benefit and differene of adding a custom merge driver return an exit code 0?</p>

<p>I have a .gitattributes file on my repos top level:</p>

<pre><code>pom.xml merge=ours
</code></pre>

<p>But when I merge two branches with changed pom.xml files the merge can't be resolved:</p>

<pre><code>$ git merge origin/master
Auto-merging pom.xml
CONFLICT (content): Merge conflict in pom.xml
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>And I get a standard merge conflict result:</p>

<pre><code>&lt;pom&gt;
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
    &lt;version&gt;0.88-SNAPSHOT&lt;/version&gt;
=======
    &lt;version&gt;0.87.0&lt;/version&gt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/master
&lt;/pom&gt;
</code></pre>

<p>What am I doing wrong?</p>
","0","1354768","0","0"
"41643977","1695680","2017-01-13 21:50:08","0","173","<git><gitattributes>","git diff-filter reports unchanged smudge/cleaned files","<p>for a repo with smudge/clean filters, a diff command like so</p>

<blockquote>
  <p>git diff master --name-only --diff-filter=ACMR</p>
</blockquote>

<p>keeps reporting all my (unchanged) smudged files.</p>
","0","1695680","",""
"6347157","535665","2011-06-14 16:53:20","3","315","<git><eol><gitattributes>","Overwrite unstaged commits due to gitattributes eol settings","<p>I have a fork that has automatic eol changes on cloning due to .gitattributes. This is fixed in upstream. I would like to merge upstream into my master; however, I am unable to get rid of these unstaged changes. I can't reset, and I can't stash them unless I am missing something. How do I merge upstream/master into master overwriting these local unstaged ""changes""?</p>
","0","535665","",""
"24876545","372708","2014-07-21 23:32:01","4","1796","<git><teamcity><gitattributes>","TeamCity's git checkout different from local git checkout","<p>I'm having a problem with TeamCity (8.1) running on a Windows box and one of our git repositories.
Few files (2 out of 1000s - *.bytes extension, binary) have larger sizes on TeamCity checkout then on developer machines. If I turn off ""Convert line-endings to CRLF"" sizes for those files are the same, but then rest of the project does not build properly + developer machines do have core.autocrlf=true.</p>

<p>I have also tried setting *.bytes as binary in .gitattributes but this looks like it is being ignored by TeamCity (?).</p>

<p>Does anyone know of a way to get this to work?</p>

<p>Thanks</p>
","4","372708","",""
"60405574","3434","2020-02-26 01:35:49","0","92","<git><git-config><gitattributes>","Can I supply gitattributes from the command line?","<p>I have the following in my <code>.gitconfig</code>:</p>

<pre><code>[diff ""haskell""]
  textconv=brittany
</code></pre>

<p>I want to invoke diff with this textconv occasionally, but not always, on <code>.hs</code> files.</p>

<p>If I put this in my <code>.gitattributes</code>, then <code>brittany</code> will always be invoked when diffing <code>.hs</code> files:</p>

<pre><code>*.hs diff=haskell
</code></pre>

<p>But I only want to do this sometimes. Is there a way I can tell <code>git</code> from the command line to use the attribute <code>diff=haskell</code>, or tell it to use a particular <code>.gitattributes</code> file?</p>
","0","3434","",""
"50428071","7149952","2018-05-19 17:57:49","3","1195","<git><github><gitattributes><github-linguist>","Add multiple languages in .gitattributes file","<p>I own a <a href=""https://github.com/ChahatGupta/F.L.A.M.E.S./"" rel=""nofollow noreferrer"">Github repository</a> which has a collection of scripts/programs in different languages to perform a task. The problem is that by default, my repository is marked to be in single language. I googled and tried to fix it with the .gitattributes file.</p>

<pre><code>* linguist-vendored
*.py linguist-vendored=false
</code></pre>

<p>This piece of code helped me to mark Python as the default language, but I still want my repo to be marked with more languages. Is there a way around to achieve this? Or there can only be one language marked with a repository? Thanks.</p>
","0","7149952","0","0"
"16981091","1034105","2013-06-07 09:48:33","1","838","<git><gitattributes>","Massive LF in .gitattributes","<p>I have read lots of posts about CRLF &amp; LF issues in git, i'm going to ask you if you consider correct this .gitattributes config:</p>

<pre><code># Autodetect text files
* text=auto

*.* eol=lf
</code></pre>

<p>In my repo we have a lot of sripts (some with sh extension, some without extension...) that run in linux environment so in a default git config and in a windows environment those scripts have CRLF when checkouts and it fails.
To accomplish that, i introduce in all files the LF line ending. I think there's no problem because git distinguishes between binary and text files. And for the rest of files: '.php', '.c', '.js', all window developers should not have problems displaying these files because they should have 'good ide's or text-editors'. Do you think that .gitattributes config is good?</p>
","0","1034105","0","0"
"50651899","6461432","2018-06-01 22:55:35","4","1442","<git><laravel><github><gitattributes><github-linguist>",".gitattributes linguist attributes standard","<p>I've just created a new Laravel project, and I'm setting up my <code>.gitattributes</code> Linguist attributes. Problem is, I'm not sure which ones to set for which files/directories.</p>

<p>The default <code>.gitattributes</code> file looks like this :</p>

<pre><code>* text=auto
*.css linguist-vendored
*.scss linguist-vendored
*.js linguist-vendored
CHANGELOG.md export-ignore
</code></pre>

<p>First of all, why are all <code>.css</code>, <code>.scss</code> and <code>.js</code> files set to <code>linguist-vendored</code> ? Not only would this exclude all such user-created files from Linguist, but Laravel also only has respectively 1, 2 and 4 of these files, how would this significantly impact Linguist stats ?</p>

<p>Secondly, is there any convention/standard regarding which files should be marked as <code>linguist-vendored</code> ? Should I mark all Laravel files, only the ones that I don't modify, only the <code>vendor</code> directory, or none at all ? Or maybe even something else ?</p>

<p>Thanks in advance !</p>
","0","6461432","",""
"17161535","105137","2013-06-18 06:00:41","3","419","<git><line-endings><gitattributes>","Is it possible to commit a file that defies the line ending behavior specified by .gitattributes?","<p>If a <code>.gitattributes</code> file is added to given directory, with exactly the following content:</p>

<pre><code>*.txt    text
</code></pre>

<p>Is there any possible way that a <strong>new file</strong> or a <strong>previously normalized file</strong> (e.g. all LF line-endings) could be committed to that directory and not be normalized?  I.e., is there any possible way that <strong>new CRLF line endings</strong> could be introduced into the repository after enabling <code>.gitattributes</code> with <code>text</code> mode specified?</p>

<p>To paraphrase again, is this <code>.gitattributes</code> file an <em>absolutely foolproof</em> way to prevent new CRLF lines from being committed to <code>*.txt</code> files in the directory that contains the <code>.gitattributes</code> file? I want to convince my colleagues that the <code>.gitattributes</code> file is entirely sufficient, and that further measures to exclude CRLFs (e.g. a server-side hook) are unnecessary.</p>

<p>An answer should either confirm that it is impossible to override the line-ending behavior specified by <code>.gitattributes</code>, or provide a counterexample explaining how one could circumvent the <code>.gitattributes</code> file and sneak in some CRLF line endings.</p>
","1","105137","0","0"
"50679230","4482812","2018-06-04 11:11:29","2","347","<git><gitattributes>","Is it possible to change EOL setting in .gitattributes without need to normalize all files?","<p>I have a repository, there's a mixture of CRLF and LF. With new pull requests, new EOL changes are produced, which is annoying. Is there a way to setup the .gitattributes in a way that:</p>

<ol>
<li>When you check in something (writing into the object database), it will get normalized (to LF).</li>
<li>You do not have to change all EOLs in the whole repository, which produces huge amount of unwanted changes that harden blaming etc.</li>
</ol>
","0","4482812","0","0"
"69037748","6025788","2021-09-02 22:44:48","0","281","<git><version-control><binaryfiles><gitattributes><git-status>","How to exclude modified binary files from `git status` output?","<p>We have a <code>.gitattributes</code> file to instruct git about which files are binary files - but I'm finding running <code>git status</code> is problematic in cases where we update hundreds of binary files along with a handful of source code files. It's far too easy to miss a source file name in a huge list.</p>
<p>Is there any way to exclude binary files from the output of <code>git status</code> or is there some alternative method to achieve the same end?</p>
<hr />
<p>Addressing comments:</p>
<p><strong>Why would we need this?</strong></p>
<p>They're generated binaries from reporting software.</p>
<p>The circumstances arise mainly by accident when some long-running report it still running and additional work is saved while it's still running.</p>
<p>The problem really is that the reporter stores its data in the style of one report-generated file per source file, so it inherently updates hundreds of small JSON files which we treat as binary.</p>
","4","6025788","",""
"33851346","220230","2015-11-22 03:39:09","4","666","<git><mercurial><line-endings><gitattributes>","Make git store text files with CRLF line endings with .gitattributes","<p>I'd like git to store text files with the CLRF line ending-style internally, I don't just want to see such line endings in the working directory (but the WD should also contain CRLF files). What is the .gitattributes configuration that would achieve this?</p>

<p>I need this so the repository can be seamlessly synced with a Mercurial one that also uses CRLF internally (due to the original files being such).</p>

<p>After going over every possible configuration I found online, including here, I couldn't find a solution that would yield CRLF. The files, in the end, end up being stored as LF. I tried the following .gitattributes file:</p>

<pre><code>* text=
* text eol=crlf
</code></pre>

<p>Also tried text=auto, text=crlf and even without the first line, no luck. I also re-clone the repo between changing this.</p>

<p>Thank you.</p>

<p><strong>Edit:</strong> literally 5 seconds after I posted this I found another snippet that appears to be working:</p>

<pre><code>*.* -crlf
</code></pre>

<p>However I'm unsure what exactly this does. Can somebody confirm please that this is what I want it won't bite me later?</p>
","0","220230","",""
"33872793","363603","2015-11-23 13:54:39","7","3062","<git><gitattributes>","Git * text=auto in the gitattributes file and line endings","<p>Based on this post:
<a href=""https://stackoverflow.com/questions/21472971/what-is-the-purpose-of-text-auto-in-gitattributes"">What is the purpose of `text=auto` in `.gitattributes` file?</a>
line endings are converted to <strong>LF</strong> for text files if you have the following in the .gitattributes file:</p>

<pre><code>* text=auto
</code></pre>

<p>I just tested this on a local repository:</p>

<pre><code>$ git add -A
warning: LF will be replaced by CRLF in [bla]/.gitattributes.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in [bla]/.gitignore.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in [bla]/README.md.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in [bla].csproj.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in 
</code></pre>

<p>But there it says the it will convert to <strong>CRLF</strong>. In the post above it says it will convert to <strong>LF</strong> which is not the case in this test.</p>

<p>So it seems that:</p>

<pre><code>* text=auto
</code></pre>

<p>will be converting to the line ending type based on the OS (CRLF for windows and LF for linux). But that is not what is being described here:</p>

<p><a href=""https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html"" rel=""nofollow noreferrer"">https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html</a></p>

<p>Based on below comments/answers it seems that the warning resulting from having this:</p>

<pre><code>* text=auto
</code></pre>

<p>in the .gitattributes file:</p>

<pre><code>warning: LF will be replaced by CRLF in [bla]/README.md.
The file will have its original line endings in your working directory.
</code></pre>

<p>Actually means that when you do a check-<strong>out</strong> (next time you checkout a file from the repository to you working directory) text files currently with <strong>LF</strong> endings will be converted to have <strong>CRLF</strong>.</p>

<p>The warning does <strong>NOT</strong> address that on check-<strong>in</strong> lines will have <strong>LF</strong> endings which is what the documentation says here:</p>

<p><a href=""https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html"" rel=""nofollow noreferrer"">https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html</a></p>

<p><em>Set to string value ""auto""
When text is set to ""auto"", the path is marked for automatic end-of-line normalization. If Git decides that the content is text, its line endings are normalized to LF on checkin.</em></p>
","3","363603","0","0"
"43226633","108802","2017-04-05 09:06:30","2","51","<git><newline><gitattributes><core.autocrlf><git-bisect>","git bisect in combination with CRLF/LF","<p>I am trying to <code>git bisect</code> some bad behavior in a public repo. </p>

<p>The repo has:</p>

<ul>
<li>some commits with CRLF (I am on MacOS, so expecting LF)</li>
<li>a <code>.gitattributes</code> <a href=""https://raw.githubusercontent.com/contiki-os/contiki/master/.gitattributes"" rel=""nofollow noreferrer"">file</a> in its root, normalizing .c, .h, and .java files</li>
</ul>

<p>As I understand it, none of the present <code>.git/config</code> or <code>~/.gitconfig</code> should matter, as <code>.gitattributes</code> has precedence.</p>

<p>My problem relates to this: when I do a checkout of a commit with CRLF, the local files are modified with LF. These files show up as modified upon <code>git status</code>. Then if I try to check out another commit, git refuses in order to protect my local changes. Fine.</p>

<p>In the <code>checkout</code> case, I can force it with <code>-f</code>, and go on.</p>

<p>The problem is that I cannot seem to force <code>git bisect skip</code>. If I try, <code>git</code> tells me to stash changes. I cannot get clean working files (stashing leaves me with modified newlines anyway), and I cannot skip.</p>

<p>I've tried copying over a temporary <code>.gitattributes</code> in order to make <code>bisect</code> leave the newlines unchanged, but then it complains about the changes in <code>.gitattributes</code> being unsaved.</p>

<p>Is there a way to force <code>bisect</code>?</p>
","1","108802","",""
"62548768","418966","2020-06-24 06:13:13","8","4010","<git><gitattributes>","Match dirs using `**/` in gitattributes","<p>I was expecting <code>**/</code> to match any directory in the git repo, but in fact it matches nothing. <code>man gitattributes</code> says:</p>
<blockquote>
<p>patterns that match a directory do not recursively match paths inside that directory (so using the
trailing-slash path/ syntax is pointless in an attributes file; use path/** instead)</p>
</blockquote>
<p>But in my case <code>**/</code> even didn't match <em>the directory itself</em>. I mean, if I have <code>a/b.txt</code> in my repo, then <code>**/</code> doesn't even match dir <code>a</code>. I was expecting it to match dir <code>a</code> but not file <code>a/b.txt</code>.</p>
<p>If I change <code>**/</code> to <code>**</code>, then both the directory and its contents are matched. In the same example, both dir <code>a</code> and file <code>a/b.txt</code> are matched.</p>
<p>So how do gitattributes work on directories? If git thinks attributes on directories don't matter, why does git list them in the case of <code>**</code>?</p>
","2","418966","",""
"62548825","418966","2020-06-24 06:16:41","1","674","<git><gitignore><gitattributes>","gitignore and gitattributes precedence","<p>If I get it right, <code>.gitignore</code> takes precedence over <code>$GIT_DIR/info/exclude</code>, but <code>$GIT_DIR/info/attributes</code> takes precedence over <code>.gitattributes</code>. Is this by design?</p>
","0","418966","0","0"
"62438524","204555","2020-06-17 21:18:31","0","53","<git><gitattributes>","How can i prevent git from updating the rcs $Id: tags in my repo?","<p>I have a repo that contains some imported sources that contain <code>$Id: &lt;hex&gt;</code> rcs codes in comments. When i clone that repo <code>git</code> is changing all those hex numbers in all those sources. Even doing a <code>git reset --hard</code> doesn't remove the changes. How do I prevent git from doing this?</p>
","2","204555","",""
"62703273","204555","2020-07-02 18:57:25","0","86","<git><gitattributes>","How do i disable git ident processing globally?","<p>I'm trying to disable ident processing globally in a repo that contains legacy <code>.gitattributes</code> files that <em>enable</em> ident processing - I want to override that behavior without changing those files.</p>
<p>The gitattributes docs (<a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">https://git-scm.com/docs/gitattributes</a>) seem to indicate that the <code>.git/info/attributes</code> file <em>should</em> take precedence:</p>
<blockquote>
<p>When deciding what attributes are assigned to a path, Git consults $GIT_DIR/info/attributes file (which has the highest precedence)</p>
</blockquote>
<p>So, in this file I have put:</p>
<pre><code>* -ident
</code></pre>
<p>which I believe <em>should</em> disable ident with highest precedence. (I have also tried <code>!ident</code>, but that doesn't work either)</p>
<p>However, ident processing is still occurring in my repo. Why, or more importantly: how do i do what i want?</p>
<p>I'm running git v2.18.2</p>
","5","204555","",""
"7542543","888302","2011-09-24 23:10:58","10","1415","<git><word-diff><gitattributes>","use git's word-diff for latex files","<p>I would like to have <code>git diff</code> outputs me regular diffs for all files, except *.tex. For *.tex files, I would like to see the output of <code>git diff --word-diff</code>.</p>

<p>I was playing around with <code>.gitattributes</code> and <code>.gitconfig</code>, but the furthest I got was to get a partial display for one .tex file, followed by a crash.</p>

<p>Is it possible to get this behaviour?</p>

<p>My <code>.gitattributes</code>:</p>

<pre><code>*.tex diff=latex
</code></pre>

<p><code>.gitconfig</code>:</p>

<pre><code>[diff ""latex""]
    wordRegex = ""\\\\[a-zA-Z]+|[{}]|\\\\.|[^\\{}[:space:]]+""
    command = ~/bin/word-diff.sh
</code></pre>

<p>and <code>word-diff.sh</code>:</p>

<pre><code>#!/bin/sh 
git --no-pager diff --color-words ""$2"" ""$5""
</code></pre>
","3","888302","0","0"
"22909620","383414","2014-04-07 10:20:20","25","6495","<git><gitattributes>","git smudge/clean filter between branches","<p>There are many related questions involving smudge/clean filters - I have spent some hours reading them, and trying various options, but still failing. I hope I can ask in a way that I get an answer that works for me.</p>

<p>Specifically, I have read the page most of these answers link back to:</p>

<ul>
<li><a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes"" rel=""noreferrer"">Customizing Git - Git Attributes</a></li>
</ul>

<hr>

<h2>tl;dr</h2>

<p>Its a detailed question, but the summary is:</p>

<ul>
<li>Can I store <code>DEBUG = false</code> in a file on one branch, and <code>DEBUG = true</code> in another branch, using smudge/clean filters to manage that file? And how?</li>
</ul>

<hr>

<h2>Background</h2>

<p>I have various remote repos hosted at bitbucket. I am using SourceTree on Win8, to clone the remote repos to my laptop. I create different branches for development, features, releases etc (following <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">A successful Git branching model</a> for better or worse).</p>

<p>I have an Android java class called <code>Dbug.java</code> that contains a boolean which turns on/off various debug logging, mocking etc features in my code.</p>

<pre><code>public static final boolean DEBUG = false;
</code></pre>

<p>I would like this value to be <code>false</code> on my ""production"" (master) branch, and to be <code>true</code> on my feature branches.</p>

<ul>
<li><strong>Is this possible using filters, or have I already misunderstood the use case?</strong></li>
<li>I am unsure if filters work like this between 2 branches of the same locally hosted repo, or if the filters only work between 2 repos.</li>
</ul>

<hr>

<h2>Creating the filters</h2>

<p>Working locally, I checked out the production branch. I created a test file called <code>debug_flag.txt</code> with the following contents:</p>

<pre><code>// false on production branch
// true on other branches
DEBUG = false;
</code></pre>

<p>I created a file in the root of my local repo called <code>.gitattributes</code> and added the filter reference to it:</p>

<pre><code>debug_flag.txt filter=debug_on_off
</code></pre>

<p>I updated the <code>.git/config</code> file with the filter definition:</p>

<pre><code>[filter ""debug_on_off""]
    clean = sed -e 's/DEBUG = true/DEBUG = false/'
    smudge = sed -s 's/DEBUG = false/DEBUG = true/'
</code></pre>

<ul>
<li>In my understanding, this should ensure that my file always has a
false value in production, but will have a true value when I branch from
production. </li>
<li><strong>Is this a correct understanding?</strong></li>
</ul>

<hr>

<h2>Testing the filters</h2>

<p>I created a new branch <code>test</code> using:</p>

<pre><code>git checkout -b test
</code></pre>

<p>I checked the contents of my file:</p>

<pre><code>$ cat debug_flag.txt

// false on production branch
// true on other branches
DEBUG = false;
</code></pre>

<ul>
<li><strong>I expected to see the value <code>true</code> in the file</strong></li>
<li>Shouldn't the ""smudge"" filter have run when I checked out the file?</li>
</ul>

<p>I added a new line to the file, and committed. I then switched back to the production branch, and this is where things get <strong>weird</strong>.</p>

<p>If I look at the file in SourceTree, there are no changes on this branch since it was created. That is what I would expect, since the only change was made on a different branch.</p>

<p>If I look at the file in the terminal, or Notepad++, I see my value has changed:</p>

<pre><code>$ cat debug_flag.txt

// false on production branch
// true on other branches
DEBUG = true;
</code></pre>

<p>I have not yet merged the change across from the test branch, I have not made a commit on the production branch, yet <strong>the file has changed</strong>.</p>

<ul>
<li>it looks like the smudge filter was run on the file within this branch, but not across branches.</li>
</ul>

<hr>

<p>I'm missing a vital piece of the puzzle, and hopefully it is something simple that can be spotted by someone with experience doing this.</p>

<p>My bet is this is a simple misunderstanding of the concept.</p>

<p>Pls prompt for any missing info...</p>

<hr>

<h2>Update based on VonC's reply</h2>

<p>Setting up the basic filters worked quite well. Defined the filter in the <code>config</code> file as:</p>

<pre><code>[filter ""debug_on_off""]
    clean = sed -e 's/DEBUG = true/DEBUG = false/'
    smudge = sed -s 's/DEBUG = false/DEBUG = true/'
</code></pre>

<p>Creating a new branch fixes false -> true, merging back changes true -> false.</p>

<p>Confining the change to just the production (master) branch required custom scripts that were aware of the branch they are being run from. So the <code>config</code> file became:</p>

<pre><code>[filter ""debug_on_off""]
    clean = ./scripts/master_clean.sh
    smudge = ./scripts/master_smudge.sh
</code></pre>

<p>master_clean.sh:</p>

<pre><code>#!/bin/sh
branch=$(git rev-parse --symbolic --abbrev-ref HEAD)
if [ ""master"" = ""$branch"" ]; then
    sed -e s/DEBUG = true/DEBUG = false/ $1
else
    cat $1
fi
</code></pre>

<p>master_smudge.sh:</p>

<pre><code>#!/bin/sh
branch=$(git rev-parse --symbolic --abbrev-ref HEAD)
if [ ""master"" = ""$branch"" ]; then
    sed -e s/DEBUG = false/DEBUG = true/ $1
else
    cat $1
fi
</code></pre>

<p>At this point, I am running into inconsistencies between what SourceTree is seeing, and what is being shown in Notepad++ for the contents of the debug file. SourceTree is showing the changes, but Notepad++ is not.</p>

<p>I am accepting <a href=""https://stackoverflow.com/a/22910075/383414"">VonC's answer</a>, since it answers the basic question I posed. </p>

<p>However, I will likely be implementing the <a href=""https://stackoverflow.com/a/22914145/383414"">solution I wrote</a>, since it solves the underlying problem that I am trying to solve, in an easier way (for me): retaining a different config file on separate branches.</p>
","4","383414","0","0"
"5270243","114798","2011-03-11 07:39:44","5","7276","<git><filter><git-svn><gitattributes>","How to setup gitattributes to filter part of a file?","<p>I am using Visual Studio 2010 and git (git svn). My coworker uses pure svn with the Ankhsvn plugin.</p>

<p>When i try to open the file with the Git Source Control Provider enabled, Visual Studion complains:</p>

<blockquote>
  <p>Source Control Plug-in<br>
  The active solution or project is controlled by adifferen source control plug-in than the one you have selected. If you change the source control plu-in, the active solution or project will be closed.<br>
  Do you want to continue?</p>
</blockquote>

<p>When i click yes an empty solution is opened.
When i click no, all the git specific icons next to the solution items are missing (i still see the branch name in the solution explorer) and i get prompted about the Source Control Plug-in every time i open the solution.</p>

<p>When i clone the svn repository which my coworker created the solution sln file contains the following</p>

<blockquote>
  <p>GlobalSection(SubversionScc) = preSolution<br>
        Svn-Managed = True<br>
        Manager = AnkhSVN - Subversion Support for Visual Studio<br>
    EndGlobalSection  </p>
</blockquote>

<p>I have deleted this section and now the solution opens without problems when the Git Source Control Provider is activated but complains when you select the Ankhsvn Provider - the situation is reversed.</p>

<p>I would like to tell git to remove this part of the .sln file during a pull (git svn fetch) and add it when i commit (git svn dcommit). Is this possible through gitattributes and how to do it?</p>

<p>EDIT:</p>

<p>I have now added </p>

<blockquote>
  <p>solutionname.sln filter=ankhsvn  </p>
</blockquote>

<p>to $GIT_DIR/info/attributes</p>

<p>and</p>

<pre><code>[filter ""ankhsvn""]
  clean=sed '/^Global$/ r ../ankhsvnsection '
  smudge=sed '/GlobalSection(SubversionScc)/,/EndGlobalSection/d '
</code></pre>

<p>to my .git/config file.</p>

<p>ankhsvnsection contains the secton that is removed by the smudge operation.
I does not seem to do anything?!</p>
","0","114798","0","0"
"34440169","3932615","2015-12-23 16:43:14","0","126","<git><git-merge><gitk><gitattributes>",".gitattributes file - prevent file from being merged but still view diff","<p>I'm dealing with some really awkward XML files that I want to prevent being merged. I know that I can do this using the <code>-diff</code> marker in .gitattributes. However I would still like to be able to read the diff in gitk if possible.</p>

<p>Is there an easy way of doing this?</p>
","0","3932615","",""
"34440418","1464870","2015-12-23 16:58:33","3","553","<git><gitattributes>","cannot checkout .gitattributes","<p>I ran into an odd problem that I cannot checkout .gitattributes from remote. The .gitattributes file was recently added, and I want to pull it in and make some change. I did <code>git pull</code> and it said my branch is up to date but the file does not appear in my local machine (<code>ls -al</code> did not show .gitattributes). I tried to <code>git checkout origin .gitattributes</code>, it said it did not match any files. But if I do <code>git rm .gitattributes</code>, then <code>git status</code> shows that .gitattributes is staged for remove. Does anyone know how to solve this?</p>

<p>Edit:</p>

<pre><code>$ git status
On branch YansBranch
Your branch is up-to-date with 'origin/YansBranch'.

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
// some file changes due to auto converting crlf to lf

no changes added to commit (use ""git add"" and/or ""git commit -a"")

$ ls -al
total 5
drwxr-xr-x      Administ     4096 Dec 23 12:11 .
drwxr-xr-x      Administ        0 Aug  5 16:38 ..
drwxr-xr-x      Administ     4096 Dec 23 12:13 .git
-rw-r--r--      Administ      955 Dec 23 10:57 .gitignore
drwxr-xr-x      Administ        0 Aug  5 16:39 win

$ git rm .gitattributes
rm '.gitattributes'

$ git status
On branch YansBranch
Your branch is up-to-date with 'origin/YansBranch'.

Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        deleted:    .gitattributes

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
// some file changes due to auto converting crlf to lf
</code></pre>

<p>And here's my .gitattributes</p>

<pre><code># THIS IS ONLY FOR THE gitattributes REPOSITORY.
# Handle line endings automatically for files detected as text
# and leave all files detected as binary untouched.
* text=auto

#
# The above will handle all files NOT found below
#
# These files are text and should be normalized (Convert crlf =&gt; lf)
*.gitattributes text
.gitignore text
*.md text

# c++

#sources
*.C text
*.cc text
*.cxx text
*.cpp text
*.c++ text
*.hpp text
*.h text
*.h++ text
*.hh text

# Compiled Object files
*.slo binary
*.lo binary
*.o binary
*.obj binary

# Precompiled Headers
*.gch binary
*.pch binary

# Compiled Dynamic libraries
*.so binary
*.dylib binary
*.dll binary

# Compiled Static libraries
*.lai binary
*.la binary
*.a binary
*.lib binary

# Executables
*.exe binary
*.out binary
*.app binary

# c#
*.cs     diff=csharp
</code></pre>
","8","1464870","",""
"5380634","114798","2011-03-21 16:33:18","9","7229","<git><filter><sed><gitattributes>","What is wrong with this git smudge/clean filter?","<p>I want to apply this filter in my git repository to remove a section from a solution file during checkout and to add this section during commit.</p>

<p>This is the section i want to remove or add:</p>

<pre><code>GlobalSection(SubversionScc) = preSolution
    Svn-Managed = True
    Manager = AnkhSVN - Subversion Support for Visual Studio
EndGlobalSection
</code></pre>

<p>I have setup this filter in my .git/info/attributes</p>

<blockquote>
  <p>*.sln  filter=SourceControlProvider</p>
</blockquote>

<p>and i have added these commands to my config</p>

<pre><code>$ git config filter.SourceControlProvider.smudge ""sed -e '/GlobalSection(SubversionScc)/,/EndGlobalSection/d' %""
$ git config filter.SourceControlProvider.clean ""sed -n -e '/^Global$/ r ankhsvnsection ' &lt; %""
</code></pre>

<p>Well, it does not work. What have i done wrong?</p>

<p>ankhsvnsection is a text file that lies in the same directory as the *.sln file</p>
","1","114798","0","0"
"42667996","297032","2017-03-08 09:51:10","15","10414","<git><line-endings><eol><gitattributes><core.autocrlf>","Enforce core.autocrlf=input through .gitattributes","<p>Is there a way to enforce <code>core.autocrlf=input</code> from within the <code>.gitattributes</code> in order to propagate the policy throughout my colleagues?</p>

<p>In detail what I want is to convert to <code>lf</code> on <em>add</em> and leave <code>as is</code> on <em>checkout</em>.</p>

<p>The problem is that neither <code>text</code> nor <code>eol</code> do what I want in <code>.gitattributes</code> since <code>eol</code> has 3 acceptable values:   </p>

<ol>
<li><code>lf</code></li>
<li><code>crlf</code></li>
<li><code>native</code></li>
</ol>

<p>Ideally I would like my <code>.gitattributes</code> file to look like this:</p>

<blockquote>
  <p><code>* text eol=asis</code></p>
</blockquote>
","2","297032","0","0"
"60961319","1575338","2020-03-31 23:10:54","2","46","<git><github><eol><gitattributes>","Changing EOL from cr to crlf seems to be ignored by git","<p>I have a Github repo where I put some rather obscure files into; they have their own file ending (while being pretty much normal txt files) and are UTF-8-BOM encoded with <code>cr</code> eol.</p>

<p>Github doensn't like <code>cr</code> eols, so you have line breaks, but everything is still on <em>one</em> line which is understandably rather dumb for diffs.</p>

<p>So I made a <code>.gitattributes</code> file with <code>*.gdl text eol=crlf</code> – but git doesn't care.</p>

<p>Had anybody a similar case?<br>
I'm on Windows, btw.</p>
","4","1575338","0","0"
"5524731","335847","2011-04-02 17:35:05","10","20919","<git><gitattributes>","git ignoring .gitattributes pattern","<p>I've a directory structure like this:</p>

<pre><code>root/
  .git
  deploy/
  Site/
    blah/
    more_blah/
      something.local
      else.development
    Rakefile
    .gitattributes
</code></pre>

<hr>

<p>Edit: to further clarify the above, directories have a trailing <code>/</code> and children are indented beneath a directory, so <code>blah</code> and <code>more_blah</code> are directories but <code>Rakefile</code> and <code>.gitattributes</code> are files, but all four are children of <code>Site</code>.</p>

<hr>

<p>I'm running <code>git-archive</code> from the <code>Site</code> directory like so:</p>

<pre><code>git archive --format=tar --prefix=git-v0.0.1/ v0.0.1 | gzip &gt; ../deploy/git-v0.0.1.tar.zip
</code></pre>

<p>but whatever pattern I put in .gitattributes, the resulting archive always contains <code>Rakefile</code>. I've tried:</p>

<ul>
<li>Rakefile</li>
<li>Site/Rakefile</li>
<li>*/Rakefile</li>
<li>./Rakefile</li>
<li>Rakefile*</li>
<li>*</li>
</ul>

<p>None of them work as I'd expect. Is anyone willing to point out the obvious yet non-obvious to me solution? Any help is much appreciated.</p>

<hr>

<p>My apologies for not being clear. </p>

<ul>
<li>I said the <em>pattern</em> I was using didn't seem to work, but I am using ""export-ignore"" after the pattern.</li>
<li><code>Rakefile</code> is not a directory, just a file</li>
<li><strike>The .gitattributes file is successful in removing other patterns from the archive, <code>Rakefile</code> is not the only pattern used, but is the only one that doesn't work. It doesn't work whether I have it on its own or with other patterns, and at any place in the file.</strike> This is not true, due to having renamed certain files but not archiving the commit with the rename I was appearing to get some good results. My bad! :S</li>
</ul>

<p>This is my <code>.gitattributes</code> (sitting in the directory <code>Site</code>)</p>

<pre><code>Rakefile        export-ignore
*.local         export-ignore
*.development   export-ignore
*.staging       export-ignore
</code></pre>
","1","335847","0","0"
"61120064","1616955","2020-04-09 11:25:25","0","136","<python><git><git-config><gitattributes><git-stage>","Problem with applying git filters to override changes to certain lines in a file","<p>I have a git repository with the following contents in the repository's root directory:</p>

<pre><code> .git
 .gitattributes
 .gitconfig
 gitfilters.py
 MyFile.txt
</code></pre>

<p>I want to add a filter that overrides any changes made to certain lines in <code>MyFile.txt</code> whose contents look like this:</p>

<pre><code>parameter1 = value1
parameter2 = value2
parameter3 = value3
parameter4 = value4
parameter5 = value5
</code></pre>

<p>I want the lines with <code>parameter1</code> and <code>parameter2</code> to not reflect on git when changed in the working directory.</p>

<p>I added my filter in the <code>.gitattributes</code> file in order to achieve this:</p>

<pre><code>MyFile.txt filter=MyFilter
</code></pre>

<p>I defined <code>MyFilter</code> in my <code>.gitconfig</code> file as below:</p>

<pre><code>[filter ""MyFilter""]
    clean = python ../gitfilters.py
    smudge = cat
</code></pre>

<p>The <code>gitfilters.py</code> script to replace the lines I don't want to change:</p>

<pre><code>import sys
OVERRIDE_PARAMS = {'parameter1': 'value1','parameter2': 'value2'}

for line in sys.stdin:
    for param, value in OVERRIDE_PARAMS.items():
        if param in line:
            line = f'{param} = {value}\n'
    sys.stdout.write(line)

exit() 
</code></pre>

<p>I then included the <code>.gitconfig</code> in my <code>.git/CONFIG</code> file:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[include]
    path = ../.gitconfig
</code></pre>

<p>With all these changes I expect that if I change <code>MyFile.txt</code> as below, my git staging area would still be clean</p>

<pre><code>parameter1 = value1NEW
parameter2 = value2NEW
parameter3 = value3
parameter4 = value4
parameter5 = value5
</code></pre>

<p>However, that's not the case and I still see the changes for the 2 lines in my git.</p>

<p>I suspect some of the paths are not correct and the filters are not run correctly. Can someone please point one what I'm missing here? Thanks!</p>
","3","1616955","",""
"43151318","663853","2017-04-01 00:07:36","1","37","<visual-studio-2015><gitignore><projects-and-solutions><git-bash><gitattributes>","GitBash VisualStudio Solution gitignore","<p>I deleted gitignore and gitattributes files and used gitbash to <code>-f</code> commit everything and it put the <code>obj</code>, <code>debug</code>, etc files I don't want. So i want to recommit everything but also want the git ignore rules to be inforced.</p>
","0","663853","0","0"
"6670140","814690","2011-07-12 19:47:55","21","13578","<git><gitattributes>","How do I set all files in a subdirectory to use a specific eol using gitattributes?","<p>I've been trying to set specific files to always use lf and not crlf regardless of autocrlf on the local system.</p>

<p>I tried creating a .gitattributes at the root of the project that only contained <code>SquishIt.Tests/js/*.js eol=lf</code> and I also tried <code>SquishIt.Tests/js/ eol=lf</code>. I pushed both of these attempts to my remote and then tried cloning it locally twice. The files under /js/ always showed up with CR+LF in both cases as autocrlf is on globally for me.</p>

<p>I'm on a Windows machine, just in case it was unclear. Is what I'm attempting to achieve even possible?</p>
","0","814690","0","0"
"24978611","969565","2014-07-27 06:50:26","4","3038","<git><github><git-push><git-commit><gitattributes>","What does ""*.jpg binary -delta"" do in the .gitattributes file?","<p><a href=""http://thread.gmane.org/gmane.comp.version-control.git/146957/focus=147598"" rel=""nofollow"">This thread</a> is suggesting placing </p>

<pre><code>*.jpg binary -delta
</code></pre>

<p>in the <code>.gitattribute</code> file for repos in git but I am not sure what it does. I cannot find any examples of the '-delta' flag for git.</p>

<p>The purpose is to apparently speed up commit or push times for larger files.</p>
","0","969565","0","0"
"6517186","45525","2011-06-29 07:33:03","6","1546","<git><hook><tr><gitattributes>","To hook or not to hook - git","<p>Our bespoke IDE outputs XML files with an encoding that makes them look like binary files. Diffs and merges of these files fail.</p>

<p>We can create ASCII versions of these files with the <code>tr</code> command. I would like to get to a state where these files are always automatically converted to ascii before they are committed.</p>

<p>I picked up my copy of <em>Version Control with Git</em> and it wholeheartedly warns me away from using hooks unless I really need to.</p>

<p>Should I be using a hook for this purpose? Or can I do something else to ensure the files are always converted before commit?</p>

<p>Windows XP with msysgit 1.7.4</p>

<p>--= update =--</p>

<p>Thanks everyone for your help and patience. Looking to <a href=""https://stackoverflow.com/questions/2316677/can-git-automatically-switch-between-spaces-and-tabs/2318063#2318063"">this question</a> I tried the following, but it does not work:</p>

<pre><code>echo ""*.xrp    filter=xrp"" &gt; .git/info/attributes
git config --global filter.xrp.clean 'tr -cd '\''\11\12\15\40-\176'\'''
git config --global filter.xrp.smudge cat
git checkout --force
</code></pre>

<p>The files remain unchanged after this config change. Even when I delete and re-checkout.</p>

<p>The <code>tr</code> command configured as the clean task <em>does</em> work in isolation. Proof:</p>

<pre><code>$ head -n 1 cashflow/repo/C_GMM_CashflowRepo.xrp
ÿþ&lt; ! - -   X M L   R e p o s i t o r y   f i l e   1 . 0   - - &gt;

$ tr -cd '\''\11\12\15\40-\176'\' &lt; cashflow/repo/C_GMM_CashflowRepo.xrp | head -n 1
&lt;!-- XML Repository file 1.0 --&gt;
</code></pre>

<p>Can anyone see what is wrong with my config?</p>
","2","45525","",""
"62385612","470994","2020-06-15 09:50:23","1","583","<git><atlassian-sourcetree><gitattributes>","git attributes for merge=ours doesn't work","<p>I am using Sourcetree 3.0.12 on Windows. The command-line git version I'm using is <code>git version 2.18.0.windows.1</code> (at least that's what it says when I open the Terminal from Sourcetree and get the Cygwin command line).</p>

<p>I want all the files on <code>app/Resources/</code> in my tree to be ""protected"" from changes in other branches; in other words, I want git to always merge my version in that folder. So I did the following:</p>

<p>1) In the command line, at the root of the tree, I typed <code>git config --global merge.ours.driver true</code>.</p>

<p>2) At the root of my tree I created a <code>.gitattributes</code> file that said:</p>

<pre><code>app/Resources/ merge=ours
</code></pre>

<p>Then I try to merge a change in another branch... and I get a lot of conflicts in files in <code>app/Resources</code>.</p>

<p>I read around an offhand comment suggesting that this feature only works with a newer version of git. Is that the case, or did I do something wrong?</p>

<p>EDIT: following the first answer below, I edited by hand my <code>.git/config</code> file to add this:</p>

<pre><code>[merge ""ours""]
    name = ours
    driver = true
</code></pre>

<p>I added it at the end of the file, then I tried merging again... but didn't work either.</p>
","0","470994","",""
"62407384","293195","2020-06-16 11:28:11","0","85","<git><gitattributes>","How to make a gitattribute `unspecified` again?","<p>I have the following <code>.gitattributes</code> files:</p>

<pre><code>.*[Dd][Aa][Tt] filter=lfs diff=lfs merge=lfs -text
**/Testing/**/*.[Dd][Aa][Tt] -filter -diff -merge text 
</code></pre>

<p>Since the first rule matches more generally than the second rule, I want to make the attributes <code>filter, diff, merge</code> to be <code>unspecified</code>. If I remove them -> what will happen? is it now <code>unspecified</code> or is it <code>unset</code> for <code>git</code>?</p>

<p>Background: </p>

<ul>
<li>First rule -> generally all <code>.dat</code> files are binary and go to LFS</li>
<li>Second rule -> an exception to rule 1, these files are <code>text</code> and dont go to LFS</li>
</ul>
","0","293195","",""
"35946883","245214","2016-03-11 17:59:56","1","394","<git><newline><gitattributes><core.autocrlf>","How to get git not to do any line ending conversions except for specific file types","<p>I would like git not to do any line ending conversions except for specific files (say <code>.c</code> and <code>.h</code>). I would like to do it through <code>.gitattributes</code> so I can override any environment on users' machines. This is primarily targeted at Windows clients.</p>

<p>I want something like this:</p>

<pre><code>* -text

*.c eol=lf
*.h eol=lf
</code></pre>

<p>But git is just ignoring everything after the first line (it's performing no line end manipulation at all).</p>

<p>Is there a way to do this?</p>
","0","245214","",""
"52123055","6996944","2018-08-31 22:02:39","0","99","<git><git-merge><gitattributes>","Alternative to .gitattributes","<p>I've been searching for a way to merge a branch into another without overriding image &amp; css folders. I looked up around SO and found some questions and answers mentioning .gitattribute.</p>

<p>I also checked out the official documentation. </p>

<p>But I must be missing something, because every time I try to do a merge (between two branches where I have replaced images) I get a merge conflict.</p>

<p>For reference, this is my .gitattributes file, included in both branches:</p>

<pre><code>/res/icon/                 merge=ours
/res/screen/               merge=ours
/platforms/                merge=ours
/www/assets/css/           merge=ours
/www/background_splash.png merge=ours
/www/bglogin.png           merge=ours
/www/top_bar.png           merge=ours
</code></pre>

<p>Am I missing something here? Thanks.</p>

<p>Also, is there another option for me to achieve this?</p>
","0","6996944","",""
"25635833","1160036","2014-09-03 03:37:33","0","298","<windows><git><newline><msysgit><gitattributes>","Git commits wrong newlines when using .gitattributes","<p>I was having an issue where merge conflicts resulted in the entire file being a conflict. This ended up being that the local file's newlines all became unix-style newlines (LF) at the time of merge (before merge both development and feature branch had CRLF newlines when checked out).</p>

<p>If I ran</p>

<pre><code>git rm --cached -r .
git add -A
</code></pre>

<p>no changes would show up with git status. But when I deleted the <code>.gitattributes</code> file and did another remove all / add all it resulted in certain files being updated with different new lines. For example for a 100 line file it would say 100 lines deleted, 100 lines added. After doing this to both branches the merges were fine.</p>

<p>.gitconfig <code>autocrlf = true</code> was set and .gitattributes file only had these lines. I would think the below lines would only affect merging strategry.</p>

<pre><code>*.csproj -text merge=union
*.sln -text merge=union
</code></pre>

<p><strong>Why would this .gitattributes change how new lines are committed?</strong></p>

<p>Also with autocrlf set to true I'm not sure why the merge would be comparing LF's vs CRLF's unless maybe something in the .gitattributes was overriding it.</p>

<hr>

<p>From <a href=""https://help.github.com/articles/dealing-with-line-endings"" rel=""nofollow"">https://help.github.com/articles/dealing-with-line-endings</a></p>

<blockquote>
  <p>Optionally, you can configure the way Git manages line endings on a
  per-repository basis by configuring a special .gitattributes file.
  This file is committed into the repository and overrides an
  individual's core.autocrlf setting, ensuring consistent behavior for
  all users, regardless of their Git settings. The advantage of a
  .gitattributes file is that your line configurations are associated
  with your repository</p>
</blockquote>

<p>This makes it clear that .gitattributes is capable of overriding autocrlf, but there are no settings in it that tell it to do any eol conversion. Maybe there is some default that is implicitly used.</p>
","0","1160036","",""
"25649092","811519","2014-09-03 16:14:57","1","847","<git><sed><gitattributes>","Are there inherent problems to using multiple filters in one line of a gitattributes file?","<p>Can you have multiple git attributes per line in the .gitattributes file? And if so what order do they get executed in?</p>

<p>I've been seeing some weird behavior where they're not getting executed in the fashion that one might expect. </p>

<p>Here's an example of one of my .gitattributes files that I am referring to:</p>

<pre><code>app*.php filter=infosafe_smudge_test filter=infosafe_smudge_test_staging filter=infosafe_clean_live filter=infosafe_clean_test filter=infosafe_clean_staging filter=infosafe_clean_test_staging filter=infosafe_global
/tests/config/framework.php filter=path_test
.gitattributes merge=ours
</code></pre>

<p>Then in my repo's git config file I have:</p>

<pre><code>[filter ""infosafe_clean_test""]
    clean = ../filters/sensitive_values_remover_test.sh
[filter ""infosafe_clean_live""]
    clean = ../filters/sensitive_values_remover_live.sh
[filter ""infosafe_clean_staging""]
    clean = ../filters/sensitive_values_remover_staging.sh
[filter ""infosafe_clean_test_staging""]
    clean = ../filters/sensitive_values_remover_test_staging.sh
[filter ""infosafe_smudge_test""]
    smudge = ../filters/sensitive_values_inserter_test.sh
[filter ""infosafe_smudge_live""]
    smudge = ../filters/sensitive_values_inserter_live.sh
[filter ""infosafe_smudge_staging""]
    smudge = ../filters/sensitive_values_inserter_staging.sh
[filter ""infosafe_smudge_test_staging""]
    smudge = ../filters/sensitive_values_inserter_test_staging.sh
</code></pre>

<p>Etc.</p>

<p>The individual shell scripts are just one-line sed scripts with multiple -e arguments like:</p>

<pre><code>#! /bin/sh -f 
sed \
-e 's|string to find|string to replace|' \
-e 's|string to find 2|string to replace 2| \
$1
</code></pre>

<p>Of course they are set executable and permissions are normal. All the shell scripts have been tested and so I know they work if used right on the command line. </p>

<p>Some of the shell scripts seem to get called by git. But not all. I don't understand it. No errors come when I re-check-out the HEAD. </p>

<p>What is going on? Is there something in my approach that would cause a problem? </p>
","0","811519","",""
"36241890","6118602","2016-03-26 23:00:25","3","790","<git><bash><gitattributes>","gitattributes - how to identify bash script files with no extension","<p>I'm just getting up to speed with using git. I've been using the examples in <a href=""https://github.com/Danimoth/gitattributes"" rel=""nofollow"">https://github.com/Danimoth/gitattributes</a> to put together a gitattributes file for my various projects (mostly bash and python scripts). My problem is that most of my bash scripts have no file extension. Is there a pattern I can use to explicitly select these (e.g. for a filter)? Or would it be easier to rename them with an .sh extension?</p>
","3","6118602","",""
"25818264","2624876","2014-09-12 23:23:07","3","673","<git><line-endings><gitattributes>","Make it as if I had .gitattributes the whole time","<p>I have a fairly new repository with 12 commits, all done without line-ending normalization.</p>

<p>No one else is using the repository and I'd like to rewrite history such that line-ending normalization is applied from the beginning (and avoid a commit in the middle that changes line-endings).</p>

<p>Can this be done with <code>git rebase -i</code> or something else? I'm guessing just reordering it with a commit of <code>.gitattributes</code> to the beginning won't fix it.</p>
","0","2624876","",""
"63257390","1592350","2020-08-05 02:04:56","2","248","<git><git-merge><gitattributes>","Skip files while merging git branches in both directions","<p>I have two branches in my git repo. There is a config file which should be different in two branches. I added <code>config merge=ours</code> to .gitattributes to preserve the config file when merging.
The config file does not get merged when merging from B branch to A branch. See the below graph</p>
<pre><code>*---*---*---*--*(A)(HEAD) //config file in branch A remains
    \         /
     *---*---*(B)
</code></pre>
<p>However, when I merge from A branch to B, my config file also gets merge</p>
<pre><code>*---*---*---*--*(A)
    \         /  \
     *---*---*----*(B)(HEAD) //config file in B gets merge with A
</code></pre>
<p>Can someone tell me what is the reason? And how I can preserve the file when merging from both directions?
Even though I found other discussions to preserve file when merge only one direction, I couldn't find a discussion about this particular scenario.</p>
","2","1592350","0","0"
"8266672","394282","2011-11-25 08:57:29","11","4576","<git><git-merge><gitattributes>","gitattributes not setting merge driver correctly","<p>I have the following directory structure:</p>

<pre><code>project/
    .git/
        ...
    app/
        ...
    config/
        initializers/
            braintree.rb
        environments/
            production.rb
    .gitattributes
</code></pre>

<p>My project uses two main branches, master and staging, each tracking a different remote (production and staging heroku apps).</p>

<p>The idea is that the staging branch moves forward with new features, they get pushed to and tested on the staging remote, then master is fast-forwarded to match staging and pushed to the production remote.</p>

<p>Here's what I want to do: freely merge these two branches while keeping their versions of <code>braintree.rb</code> and <code>production.rb</code> separate.</p>

<p>To accomplish this, here is what I put in <code>.gitattributes</code> (as per the ProGit book):</p>

<pre><code>config/initializers/braintree.rb merge=ours
config/environments/production.rb merge=ours
</code></pre>

<p>The file is present in both branches. </p>

<p>The problem I'm encountering is that this doesn't seem to have any effect on anything. Whenever I merge between the two, the files get changed anyway and I have to go change them again.</p>

<p>I have a feeling I'm missing something horribly obvious, but so far it's escaping me. I know that other answers here have involved creating custom merge drivers, but the ProGit book makes no mention of this process and seems to imply that the <code>ours</code> driver is built in (and I've seen it mentioned in the man pages, so I'm relatively sure it is). The only other thing I can think of is that I've somehow put <code>.gitattributes</code> in the wrong place or messed up its contents, but I can't find much information on that. I've tried moving it to the same directory as the files, but to no avail. </p>

<p>In case it's of any help, I'm running git version 1.7.2 on OS X. Any help would be much appreciated. </p>
","1","394282","0","0"
"26125573","1030573","2014-09-30 16:22:43","17","1834","<git><gitattributes>",".gitattributes smudge and clean filters as a part of the repository","<p>I have a number of template files in my git repository which change at different rates. These are then used to generate HTML pages. If someone reports a problem, I want them to be able to tell me which version of the template file has the problem. Currently, I manually enter the date into the file when I change it. Or, well, I try to. I forget most of the time.</p>

<p>At least in theory, I should be able to use git smudge and clean filters to fix the files and insert the date of last update automatically. This would be great.</p>

<p>Except that I develop on one machine, and when I'm ready, I push/pull to a different machine.</p>

<p>How do I get the smudge and clean filters to show up on the other machine? I don't want to have to add odd scripts to the path; this is only needed for this one repository, so I want to make it entirely self-contained. Everything online says ""add this filter definition to your ~/.gitconfig, then add these scripts to your path, then set up the repository .gitattributes file"". I want it so that if I go to a new computer and clone the repository, all of the clean and smudge is configured automatically.</p>

<p>Has anyone done this?</p>
","2","1030573","0","0"
"52508887","3995947","2018-09-26 01:58:22","7","1673","<git><merge><gitattributes>","How do I define a .gitattributes rule for a file with spaces in it?","<p>I've read the <a href=""https://git-scm.com/docs/gitattributes"" rel=""noreferrer"">documentation on .gitattributes</a> and <a href=""https://stackoverflow.com/questions/18864698/whitespace-in-gitattributes-patterns"">searched Stack Overflow</a> for a simple answer to this question, but so far haven't found it. I have a file with spaces in it like so.</p>

<pre><code>Reserved\ Slots.txt merge=mergeslots
</code></pre>

<p>I have also tried to use quotes instead of escaping the space.</p>

<pre><code>""Reserved Slots.txt"" merge=mergeslots
</code></pre>

<p>How do I use a custom merge driver for a file with spaces in it?</p>
","6","3995947","0","0"
"37457367","766786","2016-05-26 09:53:38","3","695","<git><jgit><gitattributes>","Ignore .gitattributes while doing a checkout","<p>JGit does not support <a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer""><code>.gitattributes</code></a>. There is a <a href=""https://bugs.eclipse.org/bugs/show_bug.cgi?id=342372"" rel=""nofollow noreferrer"">5 year old bug</a> on that topic.</p>

<p>As a consequence, the <a href=""https://stackoverflow.com/questions/1792838/how-do-i-enable-ident-string-for-git-repos""><code>ident</code></a> macro isn't used by JGit (<code>$Id</code> expansion).</p>

<p>If you checkout a branch with regular console <code>git</code>, which supports <code>.gitattributes</code> and <code>ident</code>, the macro expansion happens. If you then do <code>git blame</code>, it doesn't see a difference in lines with the <code>$Id$</code> macro. Which is expected.</p>

<p>If you then do <code>jgit blame</code> on that same repo, you get <code>Not Committed Yet</code> on lines that contain the <code>$Id$</code> macro.</p>

<p>I found this out while <a href=""https://groups.google.com/forum/#!topic/sonarqube/05ybdlF51UI"" rel=""nofollow noreferrer"">investigating an issue with Sonarqube's Git plugin</a>. The friendly people there opened a <a href=""https://jira.sonarsource.com/browse/SONARSCGIT-12"" rel=""nofollow noreferrer"">bug</a> to followup.</p>

<p>My question: <strong>how do I tell regular <code>git</code> to ignore <code>.gitattributes</code> while doing a checkout?</strong>
Extra brownie points: I need to do this in Jenkins, so preferably out of the box with some twiddling of the Jenkins Git plugin.</p>

<p><em>To be honest: I don't have high hopes for a positive answer. The best thing would be that JGit gets their act together and supports <code>.gitattributes</code>. But this is not the place for that rant.</em></p>
","0","766786","0","0"
"70309032","17647112","2021-12-10 18:38:28","1","111","<git><git-rebase><git-extensions><gitattributes>","Rebase repository with gitattributes changes easily","<p>I have a repository which has some files that are non-standard filetypes but are actually text files - unfortunately it has lacked a .gitattributes file for its entire history (~125 commits) so all of these files are being treated as binary instead of text as they should be. I am trying to find a way to retroactively apply the text attributes to the existing commits of the repository.</p>
<p>My first thought was to create a new commit based off the first commit of the repository which includes the attributes, then to rebase off of that:</p>
<pre><code>  G                          GitAttributes
 /
A---B---C---D---E---F        master
</code></pre>
<p>To achieve this I tried using <code>git rebase -X theirs GitAttributes</code> but for nearly every commit it applies I have to manually stash or commit changes before continuing the rebase. I always want to commit the changes from each successive commit, as the differences I am getting are just users committing files with different line endings.</p>
<pre><code>error: Your local changes to the following files would be overwritten by merge:
       &lt;&lt;file path&gt;&gt;
Please commit your changes or stash them before you merge.
Aborting
hint: Could not execute the todo command
hint:
hint:       pick &lt;&lt;commit hash&gt;&gt; &lt;&lt;commit name&gt;&gt;
hint:
hint: It has been rescheduled; To edit the command before continuing, please
hint: edit the todo list first:
hint:
hint:       git rebase --edit-todo
hint:       git rebase --continue
Could not apply &lt;&lt;commit hash&gt;&gt; &lt;&lt;commit name&gt;&gt;
</code></pre>
<p>What I want is to rebase to apply the text attribute to all these files, while always choosing the next commit's changes automatically. Manually resolving everything for each file changed in each commit is not feasible.</p>
<p>My questions are:</p>
<ol>
<li>Is rebase even the correct approach to take to this problem?</li>
<li>Am I correct in my understanding that <code>-X theirs</code> is the correct strategy to achieve what I want? This part I find somewhat confusing.</li>
<li>Is there a more effective way to automate this? Or do I really have to resort to manually committing each time the rebase aborts?</li>
</ol>
","1","17647112","",""
"70551390","1889607","2022-01-01 19:42:28","1","405","<git><gitattributes>","Enable git merge ours driver for all users","<p>I want to use <code>merge=ours</code> for a specific file. So I added this to <code>.gitattributes</code> file:</p>
<pre><code>.eslintcache merge=ours
</code></pre>
<p>But as stated <a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#_merge_strategies"" rel=""nofollow noreferrer"">here</a>, I have to run <code>git config --global merge.ours.driver true</code>. But I want this to be enabled for all contributors in the repo.</p>
<p>Also, I don't understand why the page calls it &quot;a dummy ours merge strategy&quot;! while in <a href=""https://git-scm.com/docs/merge-strategies#Documentation/merge-strategies.txt-ours"" rel=""nofollow noreferrer"">this page</a> it seems to be a predefined strategy. Shouldn't it just work without adding this config?</p>
","1","1889607","",""
"63492643","14133008","2020-08-19 18:06:44","4","4792","<github><pull-request><gitattributes>","""This comparison is taking too long to generate."" error on github","<p>I'm working on a project that has a large number of json files that are never reviewed in pull requests but occasionally need to be changed. Recently we had to make minor changes to them, and github isn't allowing me to create a pull request with those changes. Instead it gives me:</p>
<pre><code>This comparison is taking too long to generate.
Unfortunately it looks like we can’t render this comparison for you right now. It might be too big, or there might be something weird with your repository.
</code></pre>
<p>I checked the diff locally and the actual code changes are pretty minor (maybe 200 lines changed), but there are millions of changed lines in these json files. Is there any way to tell Github to ignore them? Right now I am unable to make a PR so the changes can't go through our normal company review process.</p>
<p>I've tried using the .gitattributes file with <code>*.json linguist-generated=true</code> unfortunately that had no effect.</p>
<p>Edit: As suggested in the accepted answer, I contacted github support about this case. Their suggestion was to create a new branch with a small commit, create the PR, and then merge the actual branch that I want to deploy into it. This will update the PR, and while the diff still won't display, it will let me create a PR.</p>
","2","14133008","",""
"27920526","1599122","2015-01-13 10:57:07","2","1846","<git><merge><gitattributes>","merge strategy in .gitattributes not working","<p>I want git to never have a conflict on this file:<br>
<code>test/file.txt</code><br>
when merging.
I tried the following in .gitattributes
test/file.txt merge=theirs</p>

<p>but I need to define the <code>theirs</code> merge strategy. I saw online that I can define the <code>ours</code> strategy by executing this:<br>
<code>git config --global merge.theirs.driver true</code><br>
which sets the driver to true (bash true) which will keep the local file instead of the new one.<br>
I want to do the opposite. How can I define the <code>theirs</code> driver to get the new copy and discard the local one when merging (after a git pull)?</p>
","0","1599122","0","0"
"54654766","1555615","2019-02-12 16:38:03","1","506","<git><gitattributes>","Is '-text' or 'text eol=lf' more suitable for *.sh files inside .gitattributes?","<p>Quite often in my projects I commit <code>*.sh</code> files which are executed from within a <code>Dockerfile</code>.</p>

<p>This means that even Windows users need these files to be checked-out with LF line-endings, otherwise docker fails executing them.</p>

<p>For this I use <code>.gitattributes</code> but still not sure whether 
<code>-text</code> or <code>text eol=lf</code> is the best practice.</p>

<p>The same question applies for <code>*.bat</code> files (e.g. linux-users need to execute them on a Windows VM): <code>-text</code> vs <code>text eol=crlf</code>. </p>
","2","1555615","0","0"
"54861889","4952149","2019-02-25 08:08:32","1","1207","<gitlab><gitattributes>","How to set file attributes in .gitattributes file via command line","<p>I want to edit some of the file attributes inside my .gitattributes file. How can I do that via command line without checking out the file and committing the file again after making the changes?</p>
<p>e.g. we can see the file attributes via the <code>git check-attr -a *.txt</code> command (to display all attributes of the .txt files). I need a similar way to set file attributes.</p>
","1","4952149","",""
"72427099","19003924","2022-05-29 20:36:19","1","464","<github><gitattributes>","How to find the location of .gitattributes on Github.com?","<p>Where can I find <code>.gitattributes</code> file on GitHub website or in my repository? I don't use git command line and use website for all uploads. Recently I have posted a SQLite file along with a Python file but in languages it is showing only Python.</p>
","0","19003924","",""
"64092429","1235929","2020-09-27 19:22:49","0","944","<git><windows-10><line-endings><gitattributes>","Why isn't my .gitattributes file preventing the addition of ""\r""s when checking out files on Windows?","<p>I'm using Git version 2.28.0.windows.1 within a Cygwin shell on Windows 10.  After I do my clone of my repository, I can see this</p>
<pre><code>$ cat .gitattributes 
* text=auto
*.sh text eol=lf
</code></pre>
<p>I set this up thinking that it would correct bad line endings (I want to eliminate the &quot;\r&quot; line endings from getting automatically included).  However, after I do my clone</p>
<pre><code>git clone https://github.com/chicommons/maps.git
cd maps
</code></pre>
<p>I can still see the line endings I don't want ...</p>
<pre><code>$ grep '\r' web/entrypoint.sh
python manage.py migrate
python manage.py migrate directory
python manage.py docker_init_db_data
</code></pre>
<p>What can I do with my &quot;.gitattributes&quot; (or possibly another file?) to prevent these line endings from appearing?</p>
","1","1235929","",""
"46165644","5757159","2017-09-11 23:23:16","2","173","<git><binaryfiles><gitattributes><git-filter>","Can I use a git smudge/clean filter to convert binary file to multiple files and back?","<p>I have a binary file that can be deserialized into a text representation along with some supporting image files.</p>

<p>Can I use smudge and clean to do this conversion from 1 file to many, and then back again?</p>

<p>Eg:</p>

<p>The binary file:</p>

<ul>
<li>Demo.bin</li>
</ul>

<p>Would deserialize to:</p>

<ul>
<li>Demo.txt (important to be able to do diffs on this file)</li>
<li>Demo.Picture1.bmp</li>
<li>Demo.Picture2.gif</li>
</ul>
","2","5757159","",""
"64610363","1056563","2020-10-30 14:32:36","0","124","<git><gitattributes>","Unable to configure the .gitattributes to have any effect for merges","<p>The <code>merge</code> driver for <code>.gitattributes</code> has been configured:</p>
<pre><code>git config --global merge.ours.driver true

$git config -l
push.default=current
pull.default=current
merge.ours.driver=true
</code></pre>
<p>Here is what is in the repo's <code>gitattributes</code> file (under <code>.git/info/attributes</code>):</p>
<pre><code>$cat .git/info/attributes

keys_manager/* merge=ours
js/README.md merge=theirs
</code></pre>
<p>The <code>keys_manager</code> directory had been removed in the first branch (ours) and a change made to it in the second (theirs) branch.  Changes have been made to a file inside of <code>keys_manager</code> on the remote end  and to the <code>js/README.md</code> on both branches.</p>
<p>Let us now do a dry-run of the commit:</p>
<pre><code>git merge --no-commit --no-ff origin/audiorec
</code></pre>
<p>The result:</p>
<pre><code>CONFLICT (modify/delete): keys_manager/init_db.sql deleted in HEAD and modified in 
origin/audio-recorder. Version origin/audio-recorder of keys_manager/init_db.sql left in tree.

Auto-merging js/README.md
CONFLICT (content): Merge conflict in js/README.md
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>
<p>These are not the expected <code>.gitattributes</code> influenced results but rather the vanilla results as if the <code>.gitattributes</code> did not exist. Why is it not taking effect?</p>
","0","1056563","",""
"28026767","656912","2015-01-19 14:21:44","79","49781","<git><unix><path><gitattributes>","Where should I place my global 'gitattributes' file?","<p>I gather there is (despite the lack of documentation) <a href=""https://stackoverflow.com/q/2788649/656912"">a way</a> to set <a href=""http://git-scm.com/docs/gitattributes"" rel=""noreferrer"">Git attributes</a> globally; but I'm not clear where to place the necessary <code>gitattributes</code> file. The <a href=""https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html"" rel=""noreferrer"">instructions</a> say they belong in</p>

<pre><code>$(prefix)/etc/gitattributes
</code></pre>

<p>But where is <code>$(prefix)</code>? In particular, where would it be for OS X (with Git in <code>/usr/local/git/bin/git</code>)? Alternately (or in addition)  would <code>~/.gitattributes</code> <a href=""http://git.kaarsemaker.net/git/commit/2851e8eba52e98d3112417952a24d82ae9d8c0eb/"" rel=""noreferrer"">work</a>?</p>
","3","656912","0","0"
"28145664","1212596","2015-01-26 06:37:31","4","636","<git><gitattributes>","Ignore text=auto in .gitattributes file","<p>I checked out a branch <code>foo</code>, and now I want to switch to branch <code>bar</code>.</p>

<pre><code>error: Your local changes to the following files would be overwritten by checkout:
&lt;300 files follow&gt;
</code></pre>

<p>Someone has a <code>.gitattributes</code> file on <code>foo</code> that includes</p>

<pre><code>text=auto
</code></pre>

<p>All of the ""changes"" are newline changes.</p>

<p>I could remove the file, switch branches, and then add it back.</p>

<pre><code>rm .gitattributes
git checkout bar
git checkout .gitattributes
</code></pre>

<p>Is this the best (fastest/least typing) way?</p>

<p>EDIT: To be clear, I just want to switch branches. I'm only reading the repo. I don't want to change anything other than the working tree. But I can't.</p>
","1","1212596","0","0"
"46695459","1555615","2017-10-11 18:45:35","2","353","<git><gitattributes><core.autocrlf>","What does ""check out code"" mean in git documentation for line endings?","<p>I'm really confused what ""check out code"" means in the following page: <a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#__code_core_autocrlf_code"" rel=""nofollow noreferrer"">https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#__code_core_autocrlf_code</a></p>

<blockquote>
  <p>If you’re on a Windows machine, set it to true – this converts LF endings into CRLF when you check out code:</p>
</blockquote>

<p>Does it mean when you add files? Because whenever I change <code>core.autocrlf</code> from <code>input</code> to <code>true</code> and vice-versa, the differrence I see in when I add the files (does ""check out"" mean ""add""?):</p>

<pre><code>&gt; git config --global core.autocrlf true

&gt; git add crlf-file.md

&gt; git add lf-file.md
 warning: LF will be replaced by CRLF in lf-file.md.
 The file will have its original line endings in your working directory.

&gt; git config --global core.autocrlf input

&gt; git add crlf-file.md
  warning: CRLF will be replaced by LF in crlf-file.md.
  The file will have its original line endings in your working directory.
&gt; git add lf-file.md
</code></pre>
","3","1555615","0","0"
"46695521","1555615","2017-10-11 18:50:03","2","1277","<git><gitattributes><core.autocrlf>","How can a file be committed with CRLF on git?","<p>I have a repository containing 5 files that have been committed with CRLF. I don't know how this happened, but on a clean checkout if I use this command it prints 5 files (out of hundreds): </p>

<p><code>git grep -I --files-with-matches --perl-regexp '\r' HEAD</code></p>

<p>Does anyone know how can I reproduce this issue? In other words what is a set of git settings that can lead to this situation?</p>
","0","1555615","0","0"
"65309426","14065861","2020-12-15 16:02:10","0","281","<git><github><gitattributes><github-enterprise>","How to enable custom merge driver - .gitattributes in GitHub","<p>I have develop and master branch. The develop branch should have different values of CODEOWNERS file from master branch.  For example:</p>
<p>develop branch should have:</p>
<pre><code> * @user1 @user2 @user3 @user4 @user5
</code></pre>
<p>master branch should have:</p>
<pre><code> * @user1 @user2
</code></pre>
<p>I'm trying to ignore the changes of CODEOWNERS in develop branch from pull request/merging from GitHub Website. I added .gitattributes and added:</p>
<pre><code> CODEOWNERS linguist-generated
 CODEOWNERS -diff
 CODEOWNERS merge=binary
 CODEOWNERS merge=ours
</code></pre>
<p>But when trying to pull request from GitHub website(develop to master), the CODEOWNERS still showing that it has modified changes.</p>
<p>I'm not sure if this gonna work but I tried to add <code>git config --global merge.ours.drivers true</code> in my local machine. Still no luck. Should I add this config to the server where git is installed? What should I do to enable the custom driver. Thank you.</p>
","1","14065861","",""
"10937839","170521","2012-06-07 18:38:31","5","3243","<git><line-endings><gitattributes>",".gitattributes default file type treatment","<p>We've created a list of text and binary file types for our project repository, but i'm afraid that some types might have slipped out of that classification, or that in the future someone might add a new file type forgetting about adding it to the <code>.gitattribute</code> file.</p>

<p>What is the default behavior for file types that are not on this file under some of the categories? can be the default behavior for file types that are not mentioned set to 'binary'? i think its less problematic to have text files that are not really treated like text for purposes like <code>autocrlf</code> conversion, than to have it change line endings to a <code>rar</code> file just because its file type is not mentioned in the config</p>
","0","170521","",""
"11023782","1454834","2012-06-13 21:46:12","2","225","<git><gitattributes><ident>","Git: How to get a specific version of a file from its .gitattributes ident?","<p>I have some Python scripts that have an $Id$ field set by .gitattributes at checkout.  How can I use this ident string to check out (or otherwise identify) the specific version of the file?</p>

<p>The problem arises when a client uses a script, but isn't sure which version they've checked out.  It would be nice to just ask for the $Id: ... $ and see which version they're using.</p>
","0","1454834","",""
"47491415","1959808","2017-11-25 23:11:47","3","4840","<git><newline><eol><gitattributes><core.autocrlf>","`git` shows changed files after cloning, without any other actions","<p><code>git clone git@github.com:erocarrera/pydot</code> (<a href=""https://github.com/erocarrera/pydot/commit/35a8d858bd9da0b37268fe9b317fe4895387e75f"" rel=""nofollow noreferrer"">35a8d858b</a>) in a Debian with <code>git config core.autocrlf input</code> shows:</p>

<pre><code>modified:   test/graphs/b545.dot
modified:   test/graphs/b993.dot
modified:   test/graphs/cairo.dot
</code></pre>

<p>These files have CRLF line endings, for example:</p>

<pre><code>$ file test/graphs/cairo.dot
test/graphs/cairo.dot: UTF-8 Unicode text, with CRLF line terminators
</code></pre>

<p>The <code>.gitattributes</code> file <a href=""https://github.com/erocarrera/pydot/blob/35a8d858bd9da0b37268fe9b317fe4895387e75f/.gitattributes"" rel=""nofollow noreferrer"">contains</a>:</p>

<pre><code>*.py eol=lf
*.dot eol=lf
*.txt eol=lf
*.md eol=lf
*.yml eol=lf

*.png binary
*.ps binary
</code></pre>

<p>Changing <code>core.autocrlf</code> has no effect on the status of these files. Deleting the <code>.gitattributes</code> has no effect either. Changing these files with <code>dos2unix</code> does not change their status (as expected), and back with <code>unix2dos</code> shows no difference with <code>diff</code> versus an older copy. File permissions look unchanged with <code>ls -lsa</code>. Also, the files have uniform line endings as far as I can tell with <code>vi -b</code> (thus it shouldn't be the case that <code>unix2dos</code> or <code>dos2unix</code> convert from mixed to uniform line endings, which could have explained this strange behavior). I'm using <code>git</code> version 2.11.0.</p>

<p>What does <code>git</code> think has changed?</p>

<p>Somewhat relevant:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/5787937/git-status-shows-files-as-changed-even-though-contents-are-the-same"">Git status shows files as changed even though contents are the same</a></li>
<li><a href=""https://stackoverflow.com/questions/5009096/files-showing-as-modified-directly-after-git-clone"">Files showing as modified directly after git clone</a></li>
<li><a href=""https://stackoverflow.com/questions/7383426/cloning-a-git-repo-and-it-already-has-a-dirty-working-directory-whaaaaa"">Cloning a git repo, and it already has a dirty working directory... Whaaaaa?</a></li>
</ol>

<p>I didn't find an answer that explains this behavior during my search over several discussions. This issue arose from <a href=""https://github.com/erocarrera/pydot/issues/163"" rel=""nofollow noreferrer""><code>pydot</code> # 163</a>.</p>

<p>In more detail:</p>

<pre><code>git status

On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   test/graphs/b545.dot
    modified:   test/graphs/b993.dot
    modified:   test/graphs/cairo.dot

no changes added to commit (use ""git add"" and/or ""git commit -a"")

git diff test/graphs/b993.dot

warning: CRLF will be replaced by LF in test/graphs/b993.dot.
The file will have its original line endings in your working directory.
diff --git a/test/graphs/b993.dot b/test/graphs/b993.dot
index e87e112..8aa0872 100644
--- a/test/graphs/b993.dot
+++ b/test/graphs/b993.dot
@@ -1,10 +1,10 @@
-diGraph G{
-graph [charset=""utf8""]
-1[label=""Umlaut""];
-2[label=""ü""];
-3[label=""ä""];
-4[label=""ö""];
-1-&gt;2;
-1-&gt;3;
-1-&gt;4;
-}
+diGraph G{
+graph [charset=""utf8""]
+1[label=""Umlaut""];
+2[label=""ü""];
+3[label=""ä""];
+4[label=""ö""];
+1-&gt;2;
+1-&gt;3;
+1-&gt;4;
+}
</code></pre>

<p>UPDATE:</p>

<p>Out of curiosity, I committed one of these files, dumped <code>git log -1 -p &gt; diff</code>, and <code>vi -b diff</code> shows that <code>git</code> normalized </p>

<pre><code>  1 commit 2021d6adc1bc8978fa08d729b3f4d565f9b89651
  2 Author:
  3 Date:
  4 
  5     DRAFT: experiment to see what changed
  6 
  7 diff --git a/test/graphs/b545.dot b/test/graphs/b545.dot
  8 index ebd3e8f..2c33f91 100644
  9 --- a/test/graphs/b545.dot
 10 +++ b/test/graphs/b545.dot
 11 @@ -1,9 +1,9 @@
 12 -digraph g {^M
 13 -^M
 14 -""N11"" ^M
 15 -  [^M
 16 -  shape = record^M
 17 -  label = ""&lt;p0&gt;WFSt|1571       as Ref: 1338    D""^M
 18 -]^M
 19 -N11ne -&gt; N11:p0^M
 20 -}^M
 21 +digraph g {
 22 +
 23 +""N11"" 
 24 +  [
 25 +  shape = record
 26 +  label = ""&lt;p0&gt;WFSt|1571       as Ref: 1338    D""
 27 +]
 28 +N11ne -&gt; N11:p0
 29 +}
</code></pre>

<p>Other weird observations: <code>git checkout</code> any of these files after cloning does not have any effect. <em>After</em> the above commit, the file <code>b545.dot</code> continued to have CLRF line endings in the working directory. Applying <code>dos2unix</code> followed by <code>unix2dos</code> didn't make <code>git</code> think that it has changed (whereas before the commit it did, probably because the <em>committed</em> file had CLRF line endings).</p>
","0","1959808","0","0"
"30976493","4997872","2015-06-22 09:32:09","2","552","<git><svn><migration><git-svn><gitattributes>","How to tell git-svn that files are NOT binary","<p>I am converting a large SVN-repo (~28k Commits) into Git using git-svn.
When the process was through (~ 1 1/2 weeks) I encountered some .ps1-files being treated as binary in the diffs.
I have commited a .gitignore file on master (after the conversion of course) that tells git to treat the files as text:</p>

<pre><code>* -text
*.snk binary
*.ico binary
*.chm binary
and so on...
</code></pre>

<p>Note: -text just tells it to treat line endings as is (not storing them with Unix line endings in its database)</p>

<p>However I was only able to add the .gitattributes AFTER the conversion of course.</p>

<p>The .gitattributes does not quite work out in Git-extensions for previous commits/diffs but that might be another problem that I don't want to discuss right now. The main problem is the files that are stored binary in git.</p>

<p>I read somewhere that you could store a gitattributes under .git/INFO. I could do this before the conversion process but I haven't given that another try since the conversion takes more than a week and I would like to get it right at the first strike.</p>

<p>So basically my question is now the following:
With the converted repository in mind: Can I convert existing binary files in an existing git repository to text files?</p>

<p>If not: How would I tell git-svn which files are to be treated as text/binary using gitattributes for the whole conversion procedure?</p>

<p>EDIT:
The problem was not anything in the conversion (git treating files as binary on purpose) but files being treated as binary by 'git diff' or Git-extensions. (see answer)
When using a diff tool (for example BeyondCompare) you can still work with those files. It is then only a little annoying in the history. The conversion worked flawless since the files were migratet as is. (UTF-16 that is)</p>
","0","4997872","",""
"30978710","239247","2015-06-22 11:22:11","8","6394","<windows><git><gitattributes><core.autocrlf>","Override .gitattributes text=auto in Windows","<p>This is pretty unintuitive:</p>

<pre><code>C:\python-tdl\examples\termbox&gt;git config core.autocrlf
false

C:\python-tdl\examples\termbox&gt;git commit termbox.py
warning: LF will be replaced by CRLF in examples/termbox/termbox.py.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in examples/termbox/termbox.py.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in examples/termbox/termbox.py.
The file will have its original line endings in your working directory.
Aborting commit due to empty commit message.
</code></pre>

<p>According to various media with <code>core.autocrlf=false</code> there should be no linefeed conversion at all.</p>

<p>In project root I discovered <code>.gitattributes</code> with the line:</p>

<pre><code># Auto detect text files and perform LF normalization
* text=auto
</code></pre>

<p>If I comment it, the warning goes away. The question - how can I override this <code>.gitattibutes</code> setting automatically?</p>
","0","239247","0","0"
"72454542","5326139","2022-05-31 22:04:45","0","203","<json><git><gitignore><gitattributes><git-filter>","Filter out certain parts of a json file on git commit","<p>I am looking to filter out specific parts of a json file so that the given part of the file does not get pulled into a git repository. My use case is that I am setting up a repository to keep some working files, including settings for vsCode. I have a plugin for window colors that sets different colors for different windows that are open. The current color is saved in the .vscode/setting.json file for that window.</p>
<p>I found where it is possible to use the .gitattributes file to apply a filter to a file or set of files, and then use &quot;$git config&quot; to remove certain lines from what is committed, based on a sed command per <a href=""https://stackoverflow.com/questions/16244969/how-to-tell-git-to-ignore-individual-lines-i-e-gitignore-for-specific-lines-of"">this previous question</a>.</p>
<p>I would like to apply this to the &quot;workbench.colorCustomizations&quot; object within the following json file, so that this object does not get committed, while other settings in the file may be committed, such as the &quot;editor.formatOnPaste&quot; object. Does anyone know of a way to do this?</p>
<pre><code>{
    &quot;workbench.colorCustomizations&quot;: {
        &quot;activityBar.background&quot;: &quot;#102D56&quot;,
        &quot;titleBar.activeBackground&quot;: &quot;#173F79&quot;,
        &quot;titleBar.activeForeground&quot;: &quot;#F8FAFE&quot;
    },
    &quot;editor.formatOnPaste&quot;: true
}
</code></pre>
","2","5326139","",""
"55330848","1254673","2019-03-25 03:16:56","2","4200","<git><png><gitattributes>","How to recover corrupted PNG files due to improper .gitattributes?","<p>I added &amp; committed &amp; pushed several PNG files into my git repo, but unfortunately, I had an improper .gitattributes file like this:</p>

<pre><code>* text
# no settings for PNG files
</code></pre>

<p>The PNG files were treated as text files by git. Now I cannot open them anymore and I also lost the original copy of them. Is there any way to recover them? Thanks!</p>

<hr>

<p><strong>Update</strong>: The <code>.gitattributes</code> was already in the repo when the PNG files were added. That means I cannot find a <em>good</em> state for the PNG files in the commit history. And all commits were made on Windows.</p>
","6","1254673","0","0"
"55345862","231914","2019-03-25 20:24:22","0","91","<git><diff><gitattributes>","Git will not treat a .html file as binary, even though it's marked as such in .gitattributes","<p>I'm trying to get git to mark compiled code as binary so as to clean up diffs.  For the most part this is working, but not for <code>.html</code> files.</p>

<p>Here's my <code>.gitattributes</code></p>

<pre><code>web/themes/custom/*/css/** -diff
web/themes/custom/*/dist/** -diff
web/themes/custom/*/pattern-lab/** -diff
web/themes/custom/*/pattern-lab/**/*.html -diff
web/themes/custom/columbia_sps/pattern-lab/public/patterns/00-base-global-01-colors-colors/00-base-global-01-colors-colors.html -diff
</code></pre>

<p>As you can see, those last two lines are my trying to make it work with something more specific.</p>

<p>And here's a diff</p>

<pre><code>$ git show b118f56069f96cd9f1c60ca9d8eca1a213aeabc1
diff --git a/web/themes/custom/columbia_sps/dist/style.css b/web/themes/custom/columbia_sps/dist/style.css
index 2af390be7..9e0570210 100644
Binary files a/web/themes/custom/columbia_sps/dist/style.css and b/web/themes/custom/columbia_sps/dist/style.css differ
diff --git a/web/themes/custom/columbia_sps/dist/style.css.map b/web/themes/custom/columbia_sps/dist/style.css.map
index c558df481..1a6ac917c 100644
Binary files a/web/themes/custom/columbia_sps/dist/style.css.map and b/web/themes/custom/columbia_sps/dist/style.css.map differ
diff --git a/web/themes/custom/columbia_sps/pattern-lab/public/latest-change.txt b/web/themes/custom/columbia_sps/pattern-lab/public/latest-change.txt
index b8064ad75..cdea372dd 100644
Binary files a/web/themes/custom/columbia_sps/pattern-lab/public/latest-change.txt and b/web/themes/custom/columbia_sps/pattern-lab/public/latest-change.txt differ
diff --git a/web/themes/custom/columbia_sps/pattern-lab/public/patterns/00-base-global-01-colors-colors/00-base-global-01-colors-colors.html b/web/themes/custom/columbia_sps/pattern-lab/public/patterns/00-base-global-01-colors-colors/00-base-global-01-colors-colors.html
index 733999083..a9e9ba436 100644
--- a/web/themes/custom/columbia_sps/pattern-lab/public/patterns/00-base-global-01-colors-colors/00-base-global-01-colors-colors.html
+++ b/web/themes/custom/columbia_sps/pattern-lab/public/patterns/00-base-global-01-colors-colors/00-base-global-01-colors-colors.html
@@ -45,10 +45,10 @@
     &lt;link rel=""stylesheet"" href=""/libraries/select2/dist/css/select2.min.css""  media=""all"" /&gt;

     &lt;!-- Pattern Lab base styles. --&gt;
-    &lt;link rel=""stylesheet"" href=""../../../../dist/styleguide-specific.css?cacheBuster=1553203845""&gt;
+    &lt;link rel=""stylesheet"" href=""../../../../dist/styleguide-specific.css?cacheBuster=1553539945""&gt;

     &lt;!-- Component styles --&gt;
-    &lt;link rel=""stylesheet"" href=""../../../../dist/style.css?1553203845"" media=""all"" /&gt;
+    &lt;link rel=""stylesheet"" href=""../../../../dist/style.css?1553539945"" media=""all"" /&gt;

     &lt;!-- Drupal-specific usage --&gt;
     &lt;!-- example using symlinking --&gt;
&lt;snip&gt;
</code></pre>

<p>So it seems to be working for all file types <em>except</em> .html, even though I explicitly list that one file in <code>.gitattributes</code>.</p>

<p>Why?</p>
","2","231914","",""
"36692669","2910704","2016-04-18 11:27:38","1","1066","<git><gitattributes>","How to set line ending in git attributes for all subfolders","<p>My git repository contains some Windows and Linux files. For example,</p>

<pre><code>/.gitattributes
/a/b/Windows/*
/a/b/Linux/*
</code></pre>

<p>Both Windows and Linux folders contain many subfolders and many different type of extensions (e.g. source code, text fies, tarball, binaries, etc)</p>

<p>How can I set the gitattribute so that when I checkout the repository, all the files in Windows folder will be set to eol=crlf, and Linux folder will be set to eol=lf?</p>

<p>In addition, how can I test the changes without push the changes to the remote repository?</p>
","0","2910704","0","0"
"52804334","5008962","2018-10-14 15:39:24","3","2104","<git><gitattributes><git-archive>","How to ignore files/directories in ""git archive"" and only create an archive of a subdirectory?","<p><strong>TL;DR:</strong> The <code>git archive</code> command seems to only either archive a single subdirectory <em>or</em> adhere to <code>.gitattributes</code> and exclude files/directories from the resulting ZIP, but cannot do both.</p>

<p>Say I have this directory structure in my git archive (simplified for reasability):</p>

<pre><code>.
├── assets
├── build
├── CONTRIBUTING.md
├── CONTRIBUTORS
├── LICENSE.md
├── README.md
├── scripts
├── src
│   ├── background
│   ├── common
│   ├── icons
│   ├── _locales
│   ├── manifest.json
│   ├── options
│   ├── popup
│   └── tests
└── tests -&gt; src/tests
</code></pre>

<p>Now I want to get <strong>an ZIP (or tar) archive</strong> with the following content:</p>

<ul>
<li>content of <code>src</code> directory only, as this is the source code I want to archive. Without the <code>src</code> directly, itself, however.</li>
<li>inside of these directories I may want to ignore more folders and files. E.g. <code>tests</code> needs to be ignored, obviously.</li>
</ul>

<p>So in the end, the archive should e.g. look like that:</p>

<pre><code>.
├── background
├── common
├── icons
├── _locales
├── manifest.json
├── options
└── popup
</code></pre>

<p>Now, I thought <code>git archive</code> is a great tool for that. You can <a href=""https://stackoverflow.com/questions/17350939/git-archive-a-subdirectory"">archive a subdirectory only</a> and use <a href=""https://stackoverflow.com/questions/12464258/how-do-i-use-gitattributes-to-avoid-including-a-folder-in-git-root-but-include""><code>.gitattributes</code> files</a> with <code>export-ignore</code> to exclude directories and files wherever I want.</p>

<p>The aim is to also use <code>.gitattributes</code> recursively inside multiple subfolders, so I can also always exclude single files from the archive without knowing the upper folder structure. (That's useful for included libraries e.g.)</p>

<p>I also noticed you <a href=""https://stackoverflow.com/a/5624398/5008962"">may need to add the parameter <code>--worktree-attributes</code></a> so git picks up the <code>.gitattributes</code> files everywhere, where it finds it. And I have use <code>**</code> to exclude subdirectories. That's fine.</p>

<p>So (for testing here) I tried this:</p>

<pre><code>$ git archive --worktree-attributes --format=tar HEAD:src | tar t
</code></pre>

<p>So only archiving the subdirectory works without any problems, but excludes files did not work. </p>

<p>E.g. I put this <code>.gitattributes</code> into the <code>src</code> directory:</p>

<pre><code>tests export-ignore
tests/** export-ignore
</code></pre>

<p>Now, running the command mentioned above, it still includes the <code>tests</code> dir content.
However, if I run <code>git archive --worktree-attributes --format=tar HEAD | tar t</code>, i.e. not archive the subdirectory, the list ends with:</p>

<pre><code>src/popup/[…]
tests
</code></pre>

<p>This means it excludes the content of the <code>tests</code> dir. For some reason, it did not exclude the dir itself, but that may be another issue on my side.</p>

<p>In contrast, if I put the follwing file into the root directory, the whole <code>src/tests</code> dir is excluded (although I had said they semantically mean the same):</p>

<pre><code>src/tests export-ignore
src/tests/** export-ignore
</code></pre>

<p>My git version: 2.17.2<br>
Fedora 28</p>

<p><strong>Edit:</strong> I noticed now it somehow seems to work when I put the <code>.gitattributes</code> file into the <em>root dir</em>, but mention the file paths relative to the <code>src</code> dir. I.e. doing this (also tested with file exclusion):</p>

<pre><code>tests export-ignore
tests/** export-ignore
manifest.json export-ignore
</code></pre>

<p>…somehow makes it work with the <code>src</code> archive command. Now, it does not work with archiving the whole dir anymore (but that is okay).
However, if I put this file anywhere else (like in the <code>src</code> dir) it again does not work…</p>

<p>And as my aim is to have <code>.gitattributes</code> files in subdirectories to exclude specific stuff in these directories, this still does not work as expected.</p>
","1","5008962","0","0"
"36957618","4935114","2016-04-30 16:53:48","2","532","<git><gitattributes>","Make git track only certain lines in a file","<h2>I'm confused about gitattributes.</h2>

<p>I'm not sure if what I'm trying to do is possible: I have a settings file that my IDE is generating for my project and this file get's updated very often. It's basically a text file but <em>it's recommended</em> not to edit it in text mode. I allow my self adding and editing certain parts of the file but I let the IDE's GUI do the rest because otherwise I may encounter problems.</p>

<p>Part of the file is changed by the GUI and some of it is changed by me. <strong>I want git to ignore changes or added lines that the GUI does but keep track of changes that I make.</strong></p>

<p>I can fit into a pattern the changes that the GUI and vise-versa. For example, the command below can print only the lines I want to tell git to track:</p>

<p><code>egrep -v (WORDS|THAT|APPEAR|IN|LINES|I|DON'T|WANT|GIT|TO|TRACK) &lt;setting-file&gt;</code></p>

<p>I came across <code>gitattributes</code> <a href=""https://stackoverflow.com/questions/6557467/can-git-ignore-a-specific-line"">here</a> and <a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes"" rel=""nofollow noreferrer"">here</a>. So I created a filter with the command above and I put it in <code>smudge</code> and <code>clean</code> in my <code>~/.gitconfig</code>. I've managed to make it work but <strong>The problem is</strong>: I don't want git to actually remove the lines that don't get through the filter. I just want git to ignore any changes to these lines.</p>

<p>Hope I made myself clear.</p>
","1","4935114","",""
"52996598","80002","2018-10-25 19:18:57","20","3559","<git><gitattributes><core.autocrlf>","How to express core.autocrlf = false with .gitattributes?","<p>This is amazing. With a gazillion posts on the Internet about <code>core.autocrlf</code> and <code>.gitattributes</code> I am still unable to figure out what to write in <code>.gitattributes</code> to express <code>core.autocrlf = false</code></p>

<p>Can anyone clear the mist around it? I do not need all the fancy cases, just give me <code>core.autocrlf = false</code> in <code>.gitattributes</code>. Nothing more, but nothing less.</p>
","2","80002","0","0"
"70889424","1635450","2022-01-28 06:01:30","0","111","<git><filter><git-config><gitattributes>","Fail to apply multiple git filters on one file","<p>I have the following <code>.gitattributes</code>:</p>
<pre><code>src/boot/firebaseConfig.js filter=updateFirebaseConfig
</code></pre>
<p>and the following <code>.git/config</code>:</p>
<pre><code>[filter &quot;updateFirebaseConfig&quot;]
        smudge = smudgeFirebaseConfig.sh %f
        clean = cleanFirebaseConfig.sh %f
</code></pre>
<p>This is my <code>/usr/local/bin/cleanFirebaseConfig.sh</code>:</p>
<pre><code>#!/bin/bash
set -x
sed -i -e &quot;s/base64string/{FIREBASE_KEY}/g&quot; $1
sed -i -e &quot;s/url.firebaseapp.com/{AUTH_DOMAIN}/g&quot; $1
sed -i -e &quot;s/https:\/\/url.firebaseio.com/{CONN_STR}/g&quot; $1
sed -i -e &quot;s/url\.appspot\.com/{STORAGE_BUCKET}/g&quot; $1
sed -i -e &quot;s/project/{PROJECT_ID}/g&quot; $1
sed -i -e &quot;s/idstring/{APP_ID}/g&quot; $1
</code></pre>
<p>I am on MacBook using BASH. There are 2 problems I encounter:</p>
<p>(1) It cleans the file <code>src/boot/firebaseConfig.js</code> on my local repository - replacing the values with the placeholder which is NOT intended behaviour.</p>
<p>(2) The clean operation is performed when I <code>git add</code> the changed file <code>src/boot/firebaseConfig.js</code> and at the end the file still shows up as changed and unstaged and I have to add again - DUPLICATE <code>git add</code> due to git changing the local file.</p>
<p>(3) When I browse the remote repository, this file is empty - removed.</p>
<p>Any idea and insight is appreciated.</p>
","0","1635450","",""
"70907406","14897578","2022-01-29 16:23:11","1","137","<git><git-merge><gitattributes>","how git always raise a conflict when any changes happened in specific file although the file don't have any conflict when merge","<p>i want a specified file always raise conflict when it have any changes,
i search in the internet and i find merge.*.driver in .gitattribute,
but this configuration is only effect when this file both changed in two branch,
what i wanted is when the file is only change in one branch(in other word,there is no conflict in the file),
git also invoke the driver that configured in .gitattribute and raise conflict.</p>
<p>the application scenarios is i want monitor the changes of specified file, and remind me of conflict  when merge.</p>
<p>my project git branch structure as follow:</p>
<pre><code>prod:  init --- p1 --- p2  
         |  
uat:      ------u1 ----u2
</code></pre>
<p>when i receive a feature task,
i create a new branch from prod branch,  named &quot;f1&quot;<br />
when i transfer my code to uat , i merge the branch f1 base on uat<br />
when i transfer my code to prod , i merge the branch f1 base on prod<br />
there are only one log configuration file (like log4j2.xml) in each branch,<br />
so when i develop in branch f1, i will change the log config fit my local environment，<br />
when i transfer to uat, my local config will merge to uat (what i do not want to happen )<br />
&quot;ours&quot; merge strategy is worked, when i not add something in log config file,<br />
but when i add something, &quot;ours&quot; strategy also discard what i added.<br />
and &quot;merge.*.driver&quot; is only worked there have changes in both brach.</p>
<p>so i want to know there is any solution to deal with this situation.<br />
like if any change is exist of specific file when merge is triggered， git always raise conflict</p>
","1","14897578","",""
"56465606","6501141","2019-06-05 17:48:38","2","2284","<git><simulink><binaryfiles><gitattributes>","Is there a global way to apply .gitattributes?","<p>I found a great Git function, which will unzip a file and use the uncompressed result in a diff, using .gitattributes, plus a change to your local repo config or to the global git config. This is how Simulink *.slx files are - they are zip compressed XML files, basically (maybe with some other added stuff).</p>

<p>However, this requires me to add a .gitattributes to every repo that needs this update - and it's config.</p>

<p>The particular changes needed are:</p>

<ol>
<li><p>Add the following line to <code>.gitattributes</code>:</p>

<pre><code>*.slx diff = slx
</code></pre></li>
<li><p>Add the following lines to the local repo config (one method: <code>git config -e</code>):</p>

<pre><code>[diff ""slx""]
    textconv = unzip -c -a
</code></pre></li>
</ol>

<h2>Question: Is there a way to apply the same function globally to any repo through the global config file, or another method?</h2>

<p>The goal would be that if I set up the global function locally, Git would know to uncompress any *.slx file in any repo.</p>
","0","6501141","",""
"73279084","108802","2022-08-08 13:59:07","1","35","<git><gitattributes><git-filter>","git attributes filter, determine file type from shebang","<p>I am using <a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">git attributes and filters</a> for auto-formatting before <code>diff</code> and <code>add</code>.</p>
<p>I have a filter for <code>*.[ch]</code>, and another for <code>*.py</code>.</p>
<p>I have a number of python scripts that lack a suffix in their filename. These always have a shebang as their first line.</p>
<p>Is it possible to trigger a clean filter based on the content of a file? I'd typically try to parse for something like <code>^#!.*python.*</code>.</p>
","3","108802","",""
"49898856","4931803","2018-04-18 11:42:35","7","4347","<git><github><gitattributes><github-linguist>","How can .gitattributes be used to get Github to display the correct primary language for a repo?","<p>I wrote a program in Python and used Bootstrap for its frontend.</p>

<p>When I upload the directory on GitHub it shows that the project is 90% JavaScript and only 7.5% Python. I understand that this is happening because of the JS directory in the Bootstrap folder. </p>

<p>I need to display Python as the primary project language for the repo.</p>

<p>I did a little bit of research and learnt that adding the file <code>.gitattributes</code> to your project is a solution, but I have no idea what to add in that file to get Github ignore JavaScript when assessing the primary language of the project. </p>

<p>I checked out the <a href=""https://git-scm.com/docs/gitattributes"" rel=""noreferrer"">official .gitattributes manual page</a> but couldn't find a direct solution to this issue.</p>

<p>Here's what the repo looks like</p>

<p><a href=""https://i.stack.imgur.com/lw9Dw.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/lw9Dw.png"" alt=""Repo screenshot""></a></p>

<p><a href=""https://github.com/sharmaeshaan/Stats4R"" rel=""noreferrer"">Link to Github repo</a></p>

<p>Edit: All the CSS and JS files are in the <code>static/</code> folder, so I added a <code>.gitattributes</code> file to the repo and added <code>static/* linguist-vendored</code> in the first line, however the repo still shows JS as 90% of the language.</p>
","6","4931803","",""
"15038409","189673","2013-02-23 07:53:57","3","785","<git><gitattributes>","Is it possible to mark specific file or contents of a specific folder as binary in .gitattributes?","<p>In our repo we have a <code>js</code> file, that is quite readable, but we do not require any reports about the diffs inside it. It only clutters the screen. So we want it to be considered binary. That's what we do with <code>*.min.js</code> and everybody is happy with the results. In <code>.gitattributes</code> we got: <code>*.js text eol=lf</code> line, now we need to override this for a specific <code>js</code> file somehow. I've tried: </p>

<pre><code>filename.js binary
path/filename.js binary
</code></pre>

<p>I even tried to put <code>.gitattributes</code> file under <code>bin/</code> folder itself (where we keep all compiled files), with such content:</p>

<pre><code>* binary
</code></pre>

<p>But it doesn't seem to work. Should be something simple I guess?</p>
","2","189673","0","0"
"50616624","22489","2018-05-31 04:23:56","1","123","<git><line-endings><git-config><gitattributes>","Catch-22 with .gitattributes settings and initial clone of repo","<p>Due to some issues with a 3rd party library I am using, I have a requirement to never auto-convert line-endings for my Git repository.  It is a requirement that any code I push or pull has the same line endings stored in my workspace and on the remote (i.e. Both <code>&lt;CR&gt;&lt;LF&gt;</code> and <code>&lt;LF&gt;</code> should remain unchanged at all times).</p>

<p>The following Git configuration allows this:</p>

<pre><code>core.autocrlf false
</code></pre>

<p>To reduce environmental dependencies between developers, I have decided to use a <code>.gitattributes</code> file to configure this as described in <a href=""https://stackoverflow.com/a/39461324/22489"">this answer</a></p>

<pre><code>* text=false
</code></pre>

<p>The problem I am having is in the initial clone of the repo on a new machine.  Because the line ending configuration option is now in the repo itself, the initial clone uses the local environment's global line ending configuration.  So, if a particular user's global configuration is like so:</p>

<pre><code>core.autocrlf true
</code></pre>

<p>This means that a file with Unix-style line endings like this:</p>

<pre><code>This file has&lt;LF&gt;
Unix style line endings.&lt;LF&gt;
</code></pre>

<p>Will end up in the workspace like so:</p>

<pre><code>This file has&lt;CR&gt;&lt;LF&gt;
Unix style line endings.&lt;CR&gt;&lt;LF&gt;
</code></pre>

<p>It seems like a catch-22 situation, as it cannot apply the <code>.gitattributes</code> setting until it's cloned the repo.  And at that stage its too late.</p>

<p>The obvious solution is to ensure that all users have the following global configuration value:</p>

<pre><code>core.autocrlf false
</code></pre>

<p>But then, this defeats the purpose of using <code>.gitattributes</code> at all.</p>

<p>Is there a nice way around this?</p>
","5","22489","0","0"
"68975804","359866","2021-08-29 18:25:57","0","227","<json><git><minify><data-conversion><gitattributes>","How to properly store minified JSON in git repository","<p>I want to store minified JSON <code>{&quot;name&quot;:&quot;JSON.minify()&quot;,&quot;type&quot;:&quot;javascript&quot;}</code> in git repository as following. I want <code>git show</code>, <code>git diff</code> and web view like GitHub\Gitlab\Bitbucket to consider this file as beautified JSON:</p>
<pre class=""lang-json prettyprint-override""><code>{
   &quot;name&quot;: &quot;JSON.minify()&quot;,
   &quot;type&quot;: &quot;javascript&quot; 
} 
</code></pre>
<p>I want to see per-line changes and etc, but I want to have actual minified JSON when I perform <code>git clone</code>.</p>
<p>I want similar behavior as one with encoding case when <a href=""https://www.git-scm.com/docs/gitattributes#_working_tree_encoding"" rel=""nofollow noreferrer"">working-tree-encoding</a> sat up.</p>
","9","359866","",""
"71376084","10630957","2022-03-07 03:16:14","0","202","<git><gitattributes><git-ls-files>",".gitattributes not setting attr 'text eol' properly","<p>Sample from <code>.gitattributes</code> file that was recently committed.</p>
<pre><code>* text=auto eol=lf
*.bat text eol=crlf
*.cmd text eol=crlf
*.ahk text eol=crlf
*.ps1 text eol=lf
</code></pre>
<p>Current output of <code>git ls-files --eol</code> below. Note that file <code>a.ps1</code> is currently a newly created staged file and file <code>b.ps1</code> was added in a previous commit when <code>*.ps1 text eol=crlf</code> existed in the <code>.gitattributes</code> file.</p>
<pre><code>i/lf    w/lf    attr/text eol=crlf      a.ps1
i/lf    w/crlf  attr/text eol=crlf      b.ps1
</code></pre>
<p>Expected output of <code>git ls-files --eol</code> below</p>
<pre><code>i/lf    w/lf  attr/text eol=lf      a.ps1
i/lf    w/lf  attr/text eol=lf      b.ps1
</code></pre>
<p>I can correct the <code>w/</code> line ending to <code>lf</code> by just manually changing the local files, but why does it not say <code>attr/text eol=lf</code>?</p>
<p>Does someone happen to know what is happening? OS is windows, if that matters. Thanks for your time.</p>
","0","10630957","",""
"71506502","5828163","2022-03-17 02:46:21","1","517","<git><gitattributes>",".gitattributes: override settings for a single file","<p>I have a directory of .txt files that I would like to treat as binary files. This prevents git from changing the line endings of those files so the checksum is consistent on all systems.</p>
<p>However, I have one .txt file that I would like to keep as text. If I create a .gitattributes file like:</p>
<pre><code>*.txt binary
foo.txt text
</code></pre>
<p>foo.txt is still treated as binary and <code>git diff</code> doesn't display changes properly. It seems like negation isn't supported in .gitattributes like it is in .gitignore. Is there any other way to make this work?</p>
","0","5828163","",""
"71784062","1703840","2022-04-07 14:30:11","2","954","<git><gitattributes>","Can we have multiple .gitattributes files in different repo subfolders?","<p>Is there any way to have multiple .gitattributes files, one in each subfolder, so that files (in this case for more modular management of LFS)?</p>
<p>Or is .gitattributes different from .gitignore and only supports a single file at repo root?</p>
<p>Thanks</p>
","0","1703840","",""
"54068308","152544","2019-01-07 03:40:57","8","736","<git><vim><diff><gitattributes>","Override .gitattributes from command line","<p>Is there any way to temporarily override attributes in git, similarly to how <code>-c</code> can be used to override config options?</p>

<p>I would like to call <code>git diff</code> with a specific custom <code>textconv</code> command different from the one I normally use.</p>

<p>To make this more concrete: My actual use case is for Jupyter notebooks being edited in vim with the <a href=""https://github.com/goerz/jupytext.vim"" rel=""noreferrer""><code>jupytext.vim</code> plugin</a>.</p>

<p>My normal <code>~/.gitconfig</code> contains</p>

<pre><code>[diff ""jupyternotebook""]
    command = git-nbdiffdriver diff
</code></pre>

<p>that sets up <a href=""https://nbdime.readthedocs.io/en/latest/"" rel=""noreferrer""><code>nbdime</code></a> as a diff driver, and then in <code>~/.gitattributes</code>:</p>

<pre><code>*.ipynb diff=jupyternotebook
</code></pre>

<p>Now I'd like to have</p>

<pre><code>[diff ""jupytext""]
    textconv = jupytext --from=ipynb --to=md -o - &lt;
</code></pre>

<p>(or something like that) in the git config, and have <code>git diff</code> act as if</p>

<pre><code>*.ipynb diff=jupytext
</code></pre>

<p>was in .gitattributes.</p>

<p>I'd be open to adding the <code>[diff ""jupytext""]</code> section permanently to my <code>~/.gitconfig</code>. However, using the ""jupytext"" driver instead of the default ""jupyternotebook"" must be temporary, based on a command line option passed to <code>git diff</code>.</p>

<p>Alternatively, I'd be OK with a command line option to <code>git diff</code> that forces it to use a different <code>~/.gitattributes</code> file that takes precedence over all other <code>.gitattributes</code> files (e.g. in the same directory).</p>

<p>Ultimately, the command line option is intended to go into the <code>g:gitgutter_diff_args</code> setting of <a href=""https://github.com/airblade/vim-gitgutter"" rel=""noreferrer""><code>vim-gitgutter</code></a>. I want to force the plugin to convert *.ipynb files differently from the way I would normally want to convert them with <code>nbdime</code>.</p>
","3","152544","0","0"
"72255720","13891817","2022-05-16 07:45:06","0","56","<windows><git><gitattributes>",".gitattributes on Windows modifies all files incorrectly","<p>I clone the repo, open it on IDE on Windows, and it shows to me, that I modified all the files. When I add them and push, it shows me in the pull request, that I have changed them from the beginning to the end, even though the content is the same and I didn't make any changes. Is there any way to solve the problem?</p>
<p>The .gitattributes file is the following:</p>
<pre><code>*.js text eol=crlf
*.jsx text eol=crlf

bin/* eol=lf
</code></pre>
<p>My git configs on the computer are the following:</p>
<pre><code>[user]
    name = ****
    email = ***
[filter &quot;lfs&quot;]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[core]
    autocrlf = input
</code></pre>
<p>What I have tried:</p>
<ol>
<li><p>I have tried the following commands (<a href=""https://stackoverflow.com/a/64609616"">a piece of advice from Krzysztof</a>):</p>
<pre><code>git rm --cached -r .
git reset --hard
</code></pre>
</li>
<li><p>Set git config to <code>core.autocrlf input</code> (a piece of advice from a programmer-friend of a colleague)</p>
<pre><code>git config --global core.autocrlf input
</code></pre>
</li>
<li><p>Delete the repo and clone it again several times</p>
</li>
</ol>
","2","13891817","",""
"54456794","1323785","2019-01-31 08:59:58","0","249","<git><gitattributes>","gitattributes -merge for one specific directory (existing repo)","<p>Sorry if this is a duplicate. I've searched but not found anything that seems to work.</p>

<p>I have a git repo that is up and running with history, different branches etc.</p>

<p>The repo doesn't have a pre-existing <code>.gitattribute</code> file, so I've added one.</p>

<p>My <code>.gitattribute</code> is located in the root folder and contains the following:</p>

<pre><code>#I've tried the following:
#./src/views/component-testing -merge
#./src/views/component-testing/*.* -merge

#Current content:
./src/views/component-testing/* -merge
</code></pre>

<p>I'm then trying to merge another branch (with a conflicting file in component-testing) into my current one. This is the result:</p>

<pre><code>&gt; git merge conflicting-branch
Auto-merging src/views/component-testing/component-testing.tsx
CONFLICT (content): Merge conflict in src/views/component-testing/component-testing.tsx
</code></pre>

<p>Why isn't this working?</p>
","0","1323785","",""
"54525888","1705267","2019-02-04 23:36:17","3","272","<git><git-tag><gitattributes>","Getting the latest git tag from export-subst","<p>I want to get some Git data into the archive generated by <code>git archive</code> command.  Adding a line <code>git_stuff.h export-subst</code> in <code>.gitattributes</code> seems to be the way to do it without requiring additional things to be configured, installed, or make Gitwhatever.com run a script before making an archive.  What I want are hash, short hash, commit date, branch, and tag.  The first three are easy.  I use <code>$Format: %H$</code>, <code>$Format: %h$</code>, and <code>$Format: %ci$</code>.  The fourth is trickier, I can use <code>$Format: %D$</code> and filter the result in the program before displaying it.  I have no idea how to do the fifth.  According to <a href=""https://stackoverflow.com/questions/41014693/get-latest-git-tag-from-the-current-commit"">Get latest git tag from the current commit</a>, I can get that using the <code>%D</code> substitution as before, but as before, I get only the top line.  The line I want, after removing blank lines, is the first one beginning with <code>tag:</code>.  How can I get at that tag info?</p>
","0","1705267","",""
"73337496","1446048","2022-08-12 16:54:53","0","172","<git><gitattributes>",".gitattributes match a directory by name in any sub-directory,","<p>In .gitattributes, how can I match any subdirectory with a name <code>blah</code>, e.g. <code>a/blah</code>, <code>b/blah</code>, <code>c/blah</code>?</p>
<p>It seems none of:</p>
<pre><code>blah -diff
blah/ -diff
blah/** -diff
**/blah -diff
**/blah/ -diff
**/blah/** -diff
</code></pre>
<p>works.</p>
<p>From <code>man 5 gitattributes</code>, I would expect <code>blah/**</code> to work:</p>
<blockquote>
<p>The rules by which the pattern matches paths are the same as in .gitignore files (see gitignore(5)), with a few exceptions:</p>
<pre><code> •   negative patterns are forbidden

 •   patterns that match a directory do not recursively match paths inside that directory (so using the trailing-slash path/ syntax is pointless in an attributes file; use path/** instead)
</code></pre>
</blockquote>
<p>Since <code>blah/</code> would work in <code>.gitignore</code> and I've changed <code>/</code> to <code>/**</code> as instructed.</p>
<p>Is this possible?</p>
","4","1446048","",""
"55446507","257233","2019-03-31 23:51:02","2","1359","<git><powershell><cygwin><gitattributes>","*.bat text eol=crlf but git still changes line ending","<p>I am running Windows 10 and use Cygwin's git on the Cygwin command line and use Windows git in applications like VS Code, PowerShell etc.</p>

<p>I have a <code>.gitattributes</code> file with entries like the following:</p>

<pre><code>text eol=crlf

*.ahk     text eol=crlf
*.bat     text eol=crlf
*.cmd     text eol=crlf
*.css     text 
*.java    text 
*.js      text 
*.md      text eol=crlf
*.sh      text eol=lf
*.txt     text eol=crlf
*.xml     text
</code></pre>

<p>However, I am finding that alternating between running <code>git status</code> on Cygwin or PowerShell repeatedly shows up all files as requiring modifications depending on which one I last checked them all in with.. how do I get the two to agree and obey my <code>.gitattributes</code>?</p>

<h2>In response to the suggestion from @VonC</h2>

<p>Tuesday, 2nd of April 2019, 12:32:15 PM</p>

<p>On Cygwin I do this:</p>

<pre class=""lang-sh prettyprint-override""><code>$ git config --global core.autocrlf
false

$ echo ""* text=auto"" &gt;&gt;.gitattributes

$ git add --renormalize .

$ git commit -m ""Introduce end-of-line normalization""
... snip

$ git push
... snip

$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
</code></pre>

<p>And then in PowerShell</p>

<pre><code>&gt; git config --global core.autocrlf
false

&gt; git status 
... snip.. every single file listed.. again!
</code></pre>
","0","257233","0","0"
"55930985","4330232","2019-05-01 02:34:40","1","101","<git><tfs><gitattributes>","Converting TFS source code to GIT. Is .tpattributes syntax equal to .gitattributes syntax?","<p>I am converting my source code from TFS to Git and I want to convert any <code>.tpattributes</code> files into <code>.gitattributes</code> files.  </p>

<p>It appears the pattern syntax is the same for both files, so I am wondering if it as simple as renaming my <code>.tpattributes</code> files to <code>.gitattributes</code> files?<br>
Or will more need to be done to ensure the syntax is compatible with Git?</p>
","0","4330232","0","0"