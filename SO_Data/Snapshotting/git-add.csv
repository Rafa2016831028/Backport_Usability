Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,AnswerCount,FavoriteCount
"348170","14069","2008-12-07 21:57:46","11089","5134423","<git><undo><git-add>","How do I undo 'git add' before commit?","<p>I mistakenly added files to Git using the command:</p>
<pre><code>git add myfile.txt
</code></pre>
<p>I have not yet run <code>git commit</code>. How do I undo this so that these changes will not be included in the commit?</p>
","11","14069","0"
"57539965","246724","2019-08-17 21:12:28","3","67","<git><git-add>","Can I make ""git add -p"" to immediately quit after added hunk?","<p>With <code>git add -p</code> I can add individual hunks step by step.</p>

<p>In many cases I want to add exactly one hunk and then quit the interactive mode immediately.
I don't want the next hunk to show up, because it will confuse me when writing the commit message, and forces me to scroll up to see the added hunk.</p>

<p>Is there any way to do this directly, instead of showing the next hunk and then using ""q""?</p>

<p>I already tried typing ""aq"" but it does not work (and I did not really expect it to work).</p>
","10","246724","0"
"38711272","6315090","2016-08-02 03:21:56","1","4995","<laravel><github><gitignore><git-add>","Why is vendor package not pushing to github even when ""/vendor"" is not listed in .gitignore file?","<p>When I add files to my local repository, some vendor packages are excluded even though they are not listed in the .gitignore file.  Since they are not pushed to the remote repository, other developers are not able to pull the vendor packages.</p>
","1","6315090",""
"11509789","1529613","2012-07-16 17:53:19","2","285","<git><git-add>","Finding next matching hunk when using git add --patch","<p>I find the use of <strong>git add --patch</strong> very useful for my work-flow sometimes, like when I need to revise lots before anything is ready to commit, especially with documentation.  If I have a large number of hunks to sift through, the search feature via <strong>/</strong> is helpful, but I have not discovered any way to search for the next hunk matching my regex without retyping the regex each time.  Is there a way to do that?</p>
","0","1529613",""
"3541647","165673","2010-08-22 13:34:24","122","67216","<version-control><git-commit><git-add><git>","git add . vs git commit -a","<p>What's the difference between:</p>

<ul>
<li><code>git add .</code></li>
<li><code>git commit -a</code></li>
</ul>

<p>Should I be doing both, or is that redundant?</p>
","1","165673","0"
"4058372","262667","2010-10-30 10:58:41","13","2991","<git><conflict><git-stash><git-add>","git stash and edited hunks","<p>I totally love <code>git add -p</code> and <code>git stash</code> but I occasionally have the following problem, which is reproduced by the following sequence of commands:</p>

<ul>
<li><code>git add -p my_file</code>: then I <strong>edit a hunk manually</strong> (using <code>e</code>) because the splitting that git suggests does not suit me</li>
<li><code>git stash --keep-index</code>: then I do some testing, and if the tests pass <em>I do not commit</em></li>
<li><code>git stash pop</code>: now the problem occurs: the file <code>my_file</code> <strong>is now considered as conflicted</strong>, and git has completely messed with my edited hunk, so I have to edit the file, remove the useless merge marks, and run <code>git add my_file</code> followed by <code>git reset HEAD</code></li>
</ul>

<p>I'm puzzled because this happens only when editing a hunk manually. I don't see how this should make any difference at all.</p>

<hr>

<p>To reproduce the problem:</p>

<ul>
<li><code>touch newfile</code></li>
<li><code>git add newfile</code></li>
<li><code>git commit -m 'newfile'</code></li>
<li>add two lines in the file</li>
<li><code>git add -p newfile</code></li>
<li>edit the hunk (<code>e</code>), remove one of the line in the hunk, then quit git add (<code>q</code>)</li>
<li><code>git stash --keep-index</code></li>
<li><code>git stash pop</code></li>
</ul>

<p>Now the file <code>newfile</code> is in unmerged state. Note, again, that the problem <strong>only occurs with manually edited hunks</strong>. There is no problem whatsoever with the commands above if one does not edit any hunk manually.</p>

<p>Incidentally, the preceding state of the file is in the third stage (<code>git show :3:newfile</code>), and the previously staged version is in the second stage (<code>git show :2:newfile</code>). So I could, by some git black magic, manage to put the second stage in this index, and the third stage in the working repo... but I don't know how to do that so I do it by hand. :-(</p>
","5","262667","0"
"68200539","4230755","2021-06-30 19:20:13","0","66","<git><git-checkout><git-add><git-status>","Command to tell git to not track certain files","<p>I know there is a shortcut for this, and cannot remember it.</p>
<p>I am working in a repository, and have about 8 files I need to add and commit, and 2 that are modified, that I do not need to commit. Rather than running <code>git add &lt;file&gt;</code> for each file I'm committing, I would like to run 2 commands to ignore the files I do not need to add, and then run <code>git add . </code> for the 8 I am adding/committing.</p>
<p>I thought the command to ignore the files I don't need was <code>git checkout -- &lt;file I don't need&gt;</code>, but I keep getting the error that <code>pathspec 'file I don't need' did not match any file(s) known to git</code></p>
<p>I thought, of course, it's because those 2 files are still untracked. So I added everything with <code>git add . </code> and THEN ran <code>git checkout -- &lt;file I don't need&gt;</code>. However, when I run a <code>git status</code> after that,  those files still show up to be committed.</p>
<p>Any advice would be much appreciated!</p>
","3","4230755",""
"68245411","14098258","2021-07-04 13:55:23","3","201","<git><version-control><git-add><git-status><git-stage>","unable to add files with git add","<p>I have tried to git add a file. But when I check git status, the file is still marked as &quot;Changes not staged for commit&quot;.
I have read many similar questions and I have tried everything:</p>
<ul>
<li>make sure I am in the right repository</li>
<li>make sure there is no other .git in any folders (no submodules)</li>
<li>make sure there is no corresponding entry in .gitignore (neither local nor global/system)</li>
<li>make sure there is no upper/lower-case mistake</li>
<li>make sure to try all variations of git add (-A, -u, ., *)</li>
</ul>
<p>Still nothing seems to work</p>
<p>That is what it looks like:</p>
<p><a href=""https://i.stack.imgur.com/jk5J2.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jk5J2.jpg"" alt=""enter image description here"" /></a></p>
<p>Any ideas, what else to try or what I may have missed?</p>
<p>Thanks for any help in advance!</p>
<p><strong>EDIT:</strong></p>
<p>This whole <code>_build/</code> folder is created, when I run <code>jb-build systemtechnik-fuer-energieeffizienz</code>. It contains (mainly, besides some other stuff, like these <code>.doctree</code> documents) the html output of a jupyter book created by all these jupyter notebooks in the <code>nb/</code> folder (see here <a href=""https://jupyterbook.org/start/build.html"" rel=""nofollow noreferrer"">jupyter book</a>). So it is not a submodule (in my understanding submodules have an own <code>.git</code> folder, however, inside <code>_build/</code> there is no such folder)</p>
<ul>
<li><p>The output of <code>git rev-parse --show-toplevel</code> is:</p>
<p><code>C:/Users/andre/Documents/GitLab/OER4EE_SYE/systemtechnik-fuer-energieeffizienz</code></p>
</li>
<li><p><code>git version</code> is <code>git version 2.24.0.windows.2</code></p>
</li>
<li><p>the output of <code>git diff -- _build/.doctree/SYE.doctree</code>
is:</p>
<p>just a blank line</p>
</li>
<li><p>the output of <code>git check-attr -a _build/.doctree/SYE.doctree</code> is:</p>
<p>just another blank line</p>
</li>
</ul>
","7","14098258","0"
"33078008","4423402","2015-10-12 09:44:57","1","1228","<git><git-add><repo><git-status>","Missing files in git index","<p>I work on a git repo with many many branches in it.
Now i wanted to add a new feature from another location.
So i did <code>cp -r /source /target</code><br/>
The new files are in my repo, but git ignores them.<br/>
If i do <code>git status</code> after i copied that files, git says 'working directory clean'...<br/>
Why this happens? It is not ignored in <code>.gitignore</code>.
I tried this also with other files, these files appear immediately in git status. What i did wrong and how i can fix this?</p>

<p>I read the other answers, but cant't find answers which helped.</p>
","8","4423402",""
"17483389","899260","2013-07-05 07:30:15","7","1999","<version-control><git-commit><git-add><git>","How do I place a dummy file in a git repo?","<p>I'm new at git so please bear with me. </p>

<p>Say i have a file under version control that includes sensitive data. Sure enough, I put that file in my .gitignore file, so it doesn't get pushed to the repo. The problem now is somewhere in my project i have a line like</p>

<pre><code>#include &lt;sensitivedata&gt;
</code></pre>

<p>or whatever your language of choice is. 
The problem is whenever somebody clones from that repo, that file is missing and he gets a fatal error when trying to build / compile the solution.</p>

<p>So, instead of pushing the file I'm actually working on I want to push some dummy file with the same name instead, where I place a comment like </p>

<pre><code>// replace the next line with the sensitive data!!!
</code></pre>

<p>How would I do this?</p>
","0","899260","0"
"17568543","723858","2013-07-10 10:41:14","6","7371","<git><repository><git-add>","'git add .' doesn't work","<p>I am currently trying to setup Git for a project I have been working on for a while. I do remember quite a while ago setting up Git but never used it for various reasons. Now I want to use it i am getting a strange issue that I believe is related to an old install.</p>

<p>To start a fresh I installed a fresh Ubuntu OS so that there would be no Git install present and I copied the project (Grails) over. I then navigated to the directory and run the following commands:</p>

<pre><code>git init

git remote add origin https://USERNAME@bitbucket.org/USERNAME/APPNAME.git
</code></pre>

<p>Then I ran:</p>

<pre><code>git add .
</code></pre>

<p>This is where i get the error below:</p>

<pre><code>fatal: Not a git repository: /home/user/workspace/App_V3/.git/modules/plugins/grails-spring-security-ui
</code></pre>

<p>This error is weird as this doesn't even match the directory I am in as the directory is below:</p>

<p><strong>/home/user/Workspace/App_V7/</strong></p>

<p>I am thinking that originally I may have setup the Git in the App_V3 folder on the old OS but don't know why it still points to that directory as I have run the code below to re-initialize it:</p>

<pre><code>rm -rf .git
git init
</code></pre>

<p>Can someone please help me with this as its really frustrating :S</p>

<p>Thanks in advance</p>
","7","723858","0"
"17724494","305189","2013-07-18 13:13:19","2","1235","<git><gitignore><git-add>","git add -A vs git add file","<p>I got into the habit of using <code>.gitignore</code> and always doing <code>git add -A</code>, <code>git status</code> to check the modified files, then commit, so I don't need to remember about the files that I have modified and other developers don't need to know which files are ignored.</p>

<p>I still see other people doing <code>git add files</code> for each modified file.</p>

<p>So I was wondering whether there is any advantage of adding each file.</p>

<p>The question is: why not always using <code>git add -A</code> ?</p>
","0","305189","0"
"17824647","2574766","2013-07-24 03:20:11","8","3573","<git><version-control><git-add><git-patch>","Manually editing using git add --patch <filename>","<p>So, I've got a file I've been working on in branch A, and I'm just about ready to commit it.  However, looking at the diff, I think it's better to put it into two separate commits (Well, in this case, two separate branches, maybe).  I've used git add --patch before to stage separate hunks, so I thought I could use this.  The problem is, I need to split one of my hunks.  Running <code>git add --patch SdA.py</code> and using <code>e</code> to edit the problem hunk...</p>

<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -50,13 +50,74 @@ import PIL.Image as im

 import constant

+
+def exp_range(min=None, max=None, step=None):
+    """"""
+    Generate an exponentially increasing value scaled and offset such
+    that it covers the range (min, max].  Behaviour is similar to
+    exp(x), scaled such that the final value generated is equal to
+    'max'.  'step' defines the granularity of the exponential
+    function.  The default value is 5, corresponding to a step-size
+    of tau.
+
+    :type min: float
+    :param min: minimum value of range (offset)
+
+    :type max: float
+    :param max: Maximum (final) value of range
+
+    :type step: int
+    :param step: Number of incremental steps within the range
+                 (min, max]
+    
+    """"""
+    if min is None:
+        raise StopIteration
+
+    # One input argument (same as range(10))
+    if min is not None and max is None and step is None:
+        step = min
+        min = 0.
+        max = 1.
+    elif step is None:
+        step = 5
+
+    for i in xrange(step):
+        exp_rate = np.exp(i - (step-1))
+        yield min + (max - min) * exp_rate
+    raise StopIteration
+
+
 def norm(input):
+    """"""
+    Return the norm of a vector or row-wise norm of a matrix
+
+    :type input: theano.tensor.TensorType
+    :param input: Theano array or matrix to take the norm of.
+    
+    """"""
     return T.sqrt((input * input).sum(axis=0))


 def normalize(vector, scale=1.0, offset=0.5):
+    """"""
+    Normalize (Zero and scale) a vector such that it's peak to peak
+    value is equal to 'scale', and it is centered about 'offset'.
+
+    :type vector: numpy.ndarray
+    :param vector: Vector to normalize to the given parameters.
+
+    :type scale: float
+    :param scale: Peak-to-peak range to stretch or shrink the vector's
+                  current peak-to-peak range to.
+
+    :type offset: float
+    :param offset: Value at which to center the peak-to-peak range at.
+    
+    """"""
     return (vector - vector.min()) * scale / vector.ptp()

+
</code></pre>

<p>That's okay.  There's a mini-guide on the bottom.  I get that.  So, we want to put the new function in this commit, and the documentation for the other functions into another commit.  According to the mini-doc: <code># To remove '+' lines, delete them.</code></p>

<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -50,13 +50,74 @@ import PIL.Image as im

 import constant

+
+def exp_range(min=None, max=None, step=None):
+    """"""
+    Generate an exponentially increasing value scaled and offset such
+    that it covers the range (min, max].  Behaviour is similar to
+    exp(x), scaled such that the final value generated is equal to
+    'max'.  'step' defines the granularity of the exponential
+    function.  The default value is 5, corresponding to a step-size
+    of tau.
+
+    :type min: float
+    :param min: minimum value of range (offset)
+
+    :type max: float
+    :param max: Maximum (final) value of range
+
+    :type step: int
+    :param step: Number of incremental steps within the range
+                 (min, max]
+    
+    """"""
+    if min is None:
+        raise StopIteration
+
+    # One input argument (same as range(10))
+    if min is not None and max is None and step is None:
+        step = min
+        min = 0.
+        max = 1.
+    elif step is None:
+        step = 5
+
+    for i in xrange(step):
+        exp_rate = np.exp(i - (step-1))
+        yield min + (max - min) * exp_rate
+    raise StopIteration
+
+
 def norm(input):
     return T.sqrt((input * input).sum(axis=0))


 def normalize(vector, scale=1.0, offset=0.5):
     return (vector - vector.min()) * scale / vector.ptp()
</code></pre>

<p>That looks good.  Let's add that puppy...</p>

<pre><code>error: patch failed: SdA.py:50
error: SdA.py: patch does not apply
Your edited hunk does not apply. Edit again (saying ""no"" discards!) [y/n]?
</code></pre>

<p>Mmkay...  <a href=""https://stackoverflow.com/questions/3268596/git-add-interactive-your-edited-hunk-does-not-apply"">git add --interactive &quot;Your edited hunk does not apply&quot;</a> and <a href=""https://stackoverflow.com/questions/2529441/how-to-work-with-diff-representation-in-git"">How to read the output from git diff?</a> explain that I have to update the affected line numbers.  To do this, now, I can manually count and say ""Hmm, I've removed 1, 2, 3... 23 lines.  I was editing 74 lines previously, now I'm editing... hmm... wish I had a calculator... .... 51 lines"" ('whew, I'm sweaty')</p>

<p>This seems like an overcomplicated method.  I still think patch is the right approach, but I must be doing something wrong if I need to manually update the number of affected lines in the to-file.  Anyone have any advice on how to do this more easily and efficiently?</p>
","0","2574766","0"
"17841858","","2013-07-24 18:20:13","0","2761","<git><github><git-commit><git-reset><git-add>","After doing `git commit` git tells me there is nothing to commit","<p>I am on my <code>gh-pages</code> branch and when I </p>

<pre><code>$ git add &lt;file&gt;
$ git commit -m ""&lt;message&gt;""
</code></pre>

<p>I see</p>

<pre><code># On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>Then I will do and see the following </p>

<pre><code>$ git stage
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?

$ git status
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>I tried to dig deeper to figure out whats messed up </p>

<pre><code>$ git log
commit d7122828ef232829e28654f4bc56022829d03722
Author: siddhion &lt;siddhion@gmail.com&gt;
Date:   Wed Jul 24 19:00:19 2013 +0200

    1st push to gh-pages

$ git reflog 
d712282 HEAD@{0}: checkout: moving from master to gh-pages
9bf529e HEAD@{1}: checkout: moving from gh-pages to master
d712282 HEAD@{2}: commit (initial): 1st push to gh-pages
</code></pre>

<p>I am not sure what is going on here but before this I was trying to get rid of my last commit trying the following commands</p>

<pre><code>git reset --soft HEAD
git reset --hard HEAD
git reset HEAD
git reset .
git reset
</code></pre>

<p>Perhaps I made things worse with those. Not sure. Also I tried </p>

<pre><code>$ git push origin gh-pages 
Counting objects: 1156, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (1141/1141), done.
Writing objects:   6% (70/1156), 2.27 MiB | 680.00 KiB/s   
</code></pre>

<p>then I immediately cancel because I don't want that commit/add anymore. </p>

<p><strong>How do I revert/delete that last commit/add and start over clean?</strong></p>

<h2>UPDATE</h2>

<p>Ok I first followed I am John Galt's answer. I ran </p>

<pre><code>$ git checkout d712282
</code></pre>

<p>and got this </p>

<pre><code>Note: checking out 'd712282'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at d712282... 1st push to gh-pages
</code></pre>

<p>at this point I really did not know what to do. All I wanted was to be back at my <code>gh-pages</code> branch and no longer have that dam <code>d712282</code> commit plaguing me. So at that point I </p>

<pre><code>$ git checkout gh-pages
</code></pre>

<p>and foolishly I thought the <code>d712282</code> commit died with the detached head and so I proceeded as I would before doing </p>

<pre><code>git add index.html 
</code></pre>

<p>but when I checked to see if had been staged I got </p>

<pre><code>$ git stage
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?
</code></pre>

<p>It seemed at this point that nothing changed from before but I kept on just to be thorough. When I tried to run a commit I got </p>

<pre><code>$ git commit -m ""added index.html to gh-pages"" 
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>and then I did</p>

<pre><code>$ git status
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>I wanted to see what was up and running <code>$ git log</code> gave me</p>

<pre><code>$ git log
commit d7122828ef232829e28654f4bc56022829d03722
Author: siddhion &lt;siddhion@gmail.com&gt;
Date:   Wed Jul 24 19:00:19 2013 +0200

    1st push to gh-pages
</code></pre>

<p>There is that same old <code>d712282</code> commit. I also ran <code>$ git reflog</code> and got</p>

<pre><code>$ git reflog
d712282 HEAD@{0}: checkout: moving from d7122828ef232829e28654f4bc56022829d03722
d712282 HEAD@{1}: checkout: moving from gh-pages to d712282
d712282 HEAD@{2}: checkout: moving from d7122828ef232829e28654f4bc56022829d03722
d712282 HEAD@{3}: checkout: moving from gh-pages to d712282
d712282 HEAD@{4}: checkout: moving from master to gh-pages
9bf529e HEAD@{5}: checkout: moving from gh-pages to master
d712282 HEAD@{6}: commit (initial): 1st push to gh-pages
</code></pre>

<p>and this point I tried Geoffrey's suggestion and ran and got </p>

<pre><code>$ git reset --hard d712282
HEAD is now at d712282 1st push to gh-pages
</code></pre>

<p>So at this point all I want to do is get rid of d712282 because everytime I try <code>git push origin gh-pages</code> git starting pushing the d712282 commit which has like 1156 files. Way too much. I wants it dead.</p>
","1","",""
"15011311","1533054","2013-02-21 20:11:10","40","15726","<git><git-add>","What's the difference between ""git add -u"" and ""git add -A""?","<p>Okay, so I was searching <strong>""How to Remove Manually Deleted files from Git""</strong> without actually doing <code>git rm file.txt</code> for each file when I came across ""<a href=""https://stackoverflow.com/questions/492558/removing-multiple-files-from-a-git-repo-that-have-already-been-deleted-from-disk"">Removing multiple files from a Git repo that have already been deleted from disk</a>"".</p>

<p>The two most Up-Voted commands were:</p>

<ul>
<li><code>git add -u</code></li>
<li><code>git add -A</code></li>
</ul>

<p>Although both of them worked for me, I still can't understand the difference and the solutions on the page don't explain it either. My questions are, how are they differ from each other, and what other git commands can be used to remove files that have been deleted manually from the disk?</p>
","1","1533054","0"
"51145932","10024280","2018-07-03 02:41:22","2","65","<git><git-commit><git-add>","Making changes to a file that has been git added and then git committed seems to work just fine","<p>I'm finally learning git and I'm a bit confused. From what I have read, and probably misunderstood, you have to ""git add"" after making changes to a file (saving the file locally in your ide?) before then ""git committing"".</p>

<p>When I ""git add"" all my files in the working  directory, make changes and save them in the ide, then ""git commit"", all the changes are committed just fine. Why do I need to restage with ""git add"" between the save and commit? It doesn't seem to make any difference and I'm confused why I've read that you need to given that it seems to make no differences. Apologies if this is a duplicate, I did look and couldn't find an answer to my question.</p>

<p>Oh also, I would understand if I were making a new file, as this would need to be added with ""git add"" as it isn't already known, but I don't understand when I'm changing files I've already added.</p>

<p>My test for this is running ""git add"" changing a file and saving it, trying a commit to see if it registers changes without a new ""git add"", which it does as it outputs a  message informing of the changes I have made. I must be missing something in my understanding. Thanks for any help.</p>
","0","10024280",""
"19392278","977408","2013-10-15 22:36:19","12","12527","<git><git-commit><git-add>","Is there a way in git to split up changes in a single file into two commits?","<p>So I a have a file:</p>

<pre><code>...

some code here..

...

some unrelate code here..

...
</code></pre>

<p>and I make the following changes to it:</p>

<pre><code>...

some code here that needs to be changed a bunch..

...

some unrelated code here..

...
</code></pre>

<p>Let's say I'm in the middle of some significant changes to the first section and I notice the typo in the later section.  I want to fix the typo and commit and possibly push that right away but I'm still working on the first part and not read to share it.  Obviously I could use git stash or do an intermediate commit and fix the typo in another branch but is there any way of adding only some of the changes in file to the staging area.  Obviously I can unfix the typo, <code>git add myfile</code> then refix the typo but if the typo fix is more complex that could be kind of annoying.  Is there a way to specify the lines in the file that I want to add with <code>git add</code>?</p>
","0","977408","0"
"19409144","411524","2013-10-16 16:47:58","2","2422","<git><bash><git-add>","GIT run script before git add","<p>I often require to do a make clean / make distclean before I do a <code>git add .</code> since I do not want to include binary and other stuffs.</p>

<p>I know I can add some name / pattern in to <code>.gitignore</code> but that's not very productive and flexible. Another solution is to create a bash file but that requires an additional file in my repository that I don't want.</p>

<p>Is there any pre-add configuration that allows me to run script before the actual <code>git add</code> execution ?</p>
","5","411524","0"
"51311764","9118024","2018-07-12 17:52:24","0","340","<linux><git><github><version-control><git-add>","git add . adds changes of other projects too","<p>I am trying to add all changed files to GitHub by using <code>git add .</code> but it also adds the changes made by me on other local projects. It should ideally add the changes of the same project. </p>

<p>How should it be solved?</p>

<p>When I run <code>git status</code> then I get to see those extra files which are <code>unstaged</code>.
Images:</p>

<p><a href=""https://i.stack.imgur.com/GV0gu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GV0gu.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/2gW4m.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2gW4m.png"" alt=""enter image description here""></a></p>
","9","9118024",""
"23047483","3327617","2014-04-13 19:35:48","0","546","<git><gitignore><git-add><rabbitvcs>","How to finally ignore a file in all sub-directories via .gitignore","<p>I know there are lots of duplicate questions but I'm fully confused. I should admit I'm completely new to Git. I'm using RabbitVCS, However, I edit the .gitignore file using gedit manually. That's what I have done:</p>

<ol>
<li>I have created a repository in Github.</li>
<li>I cloned it in my local computer using RabbitVCS.</li>
<li>I have pasted all files and folders of project into the repository.</li>
<li>I have created a <code>.gitignore</code> file in the root of repository which includes this pattern: <code>*~</code>.</li>
</ol>

<p><strong>I haven't commited anything yet</strong>.</p>

<p>I want to ignore all <code>~</code> and such other temp files in root and sub-directories. It ignores all files in root, but has no effect in sub-directories. When I want to commit using RabbitVCS, I can see them in the commit window.</p>

<p>I'm confusing because in Bazaar, we first add files, then commit them. But it Git, it seems we should just commit to add new files! Is it right?</p>

<p>What am I doing wrong? should I commit first?</p>
","8","3327617",""
"70177395","1367454","2021-11-30 23:30:00","1","148","<git><git-add><git-rm>","git add/rm files based on the type of change (of the files)","<p>Is there a way to stage or unstage (<code>git add</code> / <code>git rm</code>) files only based on what was the type of modification?</p>
<p>Like :</p>
<ul>
<li>add/rm only files that are deleted</li>
<li>add/rm only files that are new</li>
<li>add/rm only files that are modified</li>
<li>add/rm only files that are renamed</li>
</ul>
","5","1367454",""
"74255974","6025788","2022-10-30 19:08:28","0","39","<git><version-control><git-commit><git-add>","How to include untracked files in a command like `git commit --dry-run -a`","<p>I'd like to review that Git is going to properly detect files as moved, rather than deleted/added new - but there doesn't seem to be any way to preview the operation - it seems like my only option is <code>git add . --dry-run</code>, which then I can't see the resulting status of. Is there any other option?</p>
<p>I expected <code>git commit --dry-run .</code> would work, but it still excludes the untracked files.</p>
","1","6025788",""
"74105563","20146896","2022-10-18 04:00:27","0","159","<git><git-add><git-status><git-untracked>","how can i add one of my file in the .gitignore file?","<p>I'm new to coding.</p>
<p>I learned about the .gitignore file today, and I succeeded in adding an unwanted file to the .gitignore file but could not add one file on the .gitignore file.</p>
<hr />
<pre><code>Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    &quot;.zcompdump-Young\342\200\231s MacBook Pro (3)-5.8.1&quot;
    git/
</code></pre>
<hr />
<p>I don't want this file to be on my untracked file list.</p>
<p>How can I include this in the .gitignore file?</p>
<p>Why isn't this file included in .gitignorefile as other files?</p>
<p>I was able to add these files in the .gitignore file.</p>
<pre><code>.zshrc
.python_history
.stCommitMsg
.subversion/
.viminfo
.vscode/
Applications/
Creative Cloud Files/
Desktop/
Documents/
</code></pre>
<p>and when I enter git status commend these files weren't not appeared in the untracked list.</p>
<p>What am I doing wrong?
How can I add it to the .gitignore file?</p>
","2","20146896",""
"74165890","12636602","2022-10-22 18:00:40","1","158","<git><powershell><version-control><gitignore><git-add>","Although seemingly correct Syntax .gitignore File is ignored","<p>I have written some powershell code, since I wanted to achive two things.
The first one was to organize my gists and the second one to learn ps1 script syntax.
Until now I guess I've managed some impressive things on one hand, on the other I got stuck...</p>
<p>I read lots of interesting and sophisticated articles on git and earlier on I also used <code>.gitignore</code> files quite successfully.</p>
<p>Now this particular script does EVERYTIME Ignore the <code>.gitignore</code> seamingly not dependend on what im doing.</p>
<p>May somebody of you help me busting this mystery why this script always ignores my gitignore - it sucks that everytime on the first hand it uploads itself everywhere (which is the reason why it writes itself to the <code>.gitignore</code> in line: <code>40 ++</code>) and even more it gets wierd if everytime the <code>node_modules</code> where uploaded too</p>
<p>(testing this script on a freshly generated <code>npx create-react-app testapp</code> in the apps root folder)</p>
<p>By the way, to make things easier I also cleaned the cache with <code>git rm -r --cached .</code> in line 88 before the <code>git add .</code> this also does not work</p>
<p>Filename : <code>git-create-repo.ps1</code></p>
<p>Sourcecode:</p>
<pre><code>$workdir = Convert-Path $pwd

$gituser = &quot;l00tz1ffer&quot;
$gitserver = &quot;lootziffers-welt.de&quot;
$defaultRemoteName = &quot;origin&quot;
$targetBranchName = &quot;master&quot;

$gitHubExists = 0

$workDirName = $workdir.Substring(($workdir.LastIndexOf(&quot;\&quot;) + 1), ($workdir.Length - 1 ) - $workdir.LastIndexOf(&quot;\&quot;))

$git_dir_string = $workDirName + &quot;.git&quot;
echo $workDirName



git remote -v | Out-File -FilePath remotes.temp -Encoding utf8 -Append
$File = 'remotes.temp'

foreach ($line in Get-Content $File) {
    $remoteListingLine = $line
    $remoteHostName = $remoteListingLine.Substring(($remoteListingLine.IndexOf(&quot;@&quot;) + 1), ($remoteListingLine.LastIndexOf(&quot;:&quot;) - 1 ) - $remoteListingLine.IndexOf(&quot;@&quot;))
    echo $remoteHostName
    if ($remoteHostName -contains &quot;github.com&quot;) {
        echo &quot;GitHub Repo found&quot;
        $remoteListingLine = $remoteListingLine -replace $defaultRemoteName, &quot;github&quot;
        echo &quot;Renaming properly ...&quot;
        echo $remoteListingLine

        git remote rename $defaultRemoteName &quot;github&quot;
        $gitHubExists = 1

    }

}
Remove-Item 'remotes.temp'



if (-not (Test-Path -Path .gitignore)) {
    New-Item -Path '.gitignore' -ItemType File
}


If ( $workDirName -ne &quot;git-create-repo&quot; -and $workDirName -ne &quot;git-create-repo.git&quot;) {
    $File = '.gitignore'

    foreach ($line in Get-Content $File) {
        if (-not (Test-Path -Path new.gitignore)) {
            New-Item -Path 'new.gitignore' -ItemType File
        }

        echo &quot;.gitignore enthÃ¤lt folgenden Wert: $line&quot; 
        if ($line -contains &quot;git-create-repo.ps1&quot;) {
            echo &quot;Duplicate entry found, Removing it&quot;
        }
        elseif ($line.Length -eq 0) {
            echo &quot;Empty Line Found in .gitignore -&gt; Removing it&quot;
        }
        elseif ($line -contains $null) {
            echo &quot;Empty Line Found in .gitignore -&gt; Removing it&quot;
        }
        else {
            line | Out-File -FilePath new.gitignore -Encoding utf8 -Append
 
        }
    }
    
    Remove-Item '.gitignore'
    Rename-Item 'new.gitignore' '.gitignore'
    &quot;git-create-repo.ps1&quot; &gt;&gt; | Out-File -FilePath .gitignore -Encoding utf8 -Append

}

Start-Sleep -Seconds 3


git remote rm $defaultRemoteName
git branch -mv main $targetBranchName


ssh git@$gitserver &quot;cd  $gituser &amp;&amp; mkdir $git_dir_string &amp;&amp; cd $git_dir_string &amp;&amp; git init --bare&quot;


#if (Test-Path -Path '.git' -PathType Container) {
git init
echo &quot;Lokales Repo wurde Initialisiert&quot;

git rm -r --cached .
git add .\.gitignore

$timestamp = (get-date).ToString('G')
git commit -m &quot;Autogenerated Commit from ${[System.Environment]::UserName} -&gt; Zeit: $timestamp&quot;
echo &quot;Autogenerated Commit -&gt; Zeit: $timestamp&quot;
    
git rm -r --cached .
git add .
echo &quot;Dateien wurden zum Lokalen Repository hinzugefuegt&quot;
#}


$timestamp = (get-date).ToString('G')
git commit -m &quot;Autogenerated Commit from ${[System.Environment]::UserName} -&gt; Zeit: $timestamp&quot;
echo &quot;Autogenerated Commit -&gt; Zeit: $timestamp&quot;


$git_repo_string = &quot;git@lootziffers-welt.de:&quot; + $gituser + &quot;/&quot; + $workDirName + &quot;.git&quot;
echo &quot;Der Verwendete Remote Git Repo string lautet: $git_repo_string&quot; 

git remote add $defaultRemoteName $git_repo_string
git push $defaultRemoteName $targetBranchName
if ($gitHubExists -eq 1) {
    git push github $targetBranchName
}

 

scp git@${gitserver}:${gituser}/repos.txt repos.txt
if (-not (Test-Path -Path .gitignore)) {
    New-Item -Path 'repos.txt' -ItemType File
}
$File = &quot;repos.txt&quot;
foreach ($line in Get-Content $File) {
    echo &quot;repos.txt enthÃ¤lt folgenden Wert: $line&quot; 
    if ($line -contains $git_repo_string) {
        echo &quot;Duplicate entry found, Removing it&quot;
    }
    elseif ($line.Length -eq 0) {
        echo &quot;Empty Line Found in .gitignore -&gt; Removing it&quot;
    }
    elseif ($line -contains $null) {
        echo &quot;Empty Line Found in .gitignore -&gt; Removing it&quot;
    }
    else {
        line | Out-File -FilePath new.repos.txt -Encoding utf8 -Append
    }
}
Remove-Item 'repos.txt'
Rename-Item 'new.repos.txt' 'repos.txt'



${git_repo_string}.ToString() | Out-File -FilePath repos.txt -Encoding utf8 -Append
scp repos.txt git@${gitserver}:${gituser}/repos.txt
Remove-Item 'repos.txt'




Start-Sleep -Seconds 5
</code></pre>
<p>Here i will give you a basic idea of how my <code>.gitignore</code> file looks like</p>
<pre><code># See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# dependencies
/node_modules/*
node_modules/
/node_modules
/.pnp
.pnp.js
# testing
/coverage
# production
/build
# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local
npm-debug.log*
yarn-debug.log*
yarn-error.log*
git-create-repo.ps1

</code></pre>
<p>Thank you my dear friends out there for your quick support and taking time to overview this huge bulk of code.</p>
<p>Sincierly</p>
","7","12636602",""
"74342273","20282925","2022-11-07 05:23:34","-1","83","<git><github><git-clone><git-add>","can't clone or add in git repo","<p><a href=""https://i.stack.imgur.com/ZUQBu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZUQBu.png"" alt=""enter image description here"" /></a></p>
<p>when ever I'm trying to check my git status or want to clone in my repsitry the cmd is showing me this, can someone report a problem &amp; help me out with an error?</p>
","3","20282925",""
"74857564","20696751","2022-12-20 01:06:01","0","39","<git><git-clone><git-add>","How can I `git add` on cloned git repo by SSH?","<p>I can <code>git add</code> just add new file on repo directory. but when I make directory and add new file to this directory, I cannot <code>git add</code>.</p>
<h3>Note:</h3>
<ul>
<li>I ran <code>git clone</code> for clone private repo by ssh public key</li>
</ul>
<pre><code>$ git clone git@github.com:nyusername/mygitrepo.git
</code></pre>
<pre><code>$ cd mygitrepo &amp;&amp; ls
.gitignore
README.md
requirements.txt
my_dir
</code></pre>
<ul>
<li><code>my_dir</code>: directory that originally existed in repo</li>
<li><code>.gitignore</code> : only have one line <code>*.pyc</code></li>
</ul>
<h4>case 1: add new file where existed directory path.</h4>
<pre><code>$ cd my_dir &amp;&amp; cat &lt;&lt;EOF &gt; &quot;tmp_file.json&quot;
{
    &quot;foo&quot;: bar
}
EOF
</code></pre>
<pre><code>$ git status
</code></pre>
<pre><code>On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        my_dir/tmp_file.json

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>I can see that I can <code>git add my_dir/tmp_file.json</code></p>
<pre><code>$ rm tmp_file.json
$ cd .. &amp;&amp; ls
</code></pre>
<pre><code>.gitignore
README.md
requirements.txt
my_dir
</code></pre>
<blockquote>
<p>delete <code>my_dir/tmp_file.json</code></p>
</blockquote>
<h4>case 2: make dir and  add new file in here.</h4>
<pre><code>$ mkdir tmp_dir &amp;&amp; cd tmp_dir
$ cat &lt;&lt;EOF &gt; &quot;tmp_file.json&quot;
{
    &quot;foo&quot;: bar
}
EOF
</code></pre>
<p>run <code>git status</code></p>
<pre><code>$ cd .. &amp;&amp; git status
</code></pre>
<pre><code>On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        tmp_dir/

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>only I can <code>git add tmp_dir/</code>, can't  <code>git add tmp_dir/tmp_file.json</code></p>
<p>what I need help:</p>
<ul>
<li>Why did this happen?</li>
<li>How can I <code>git add</code> with make dir and file in here?</li>
</ul>
","2","20696751",""
"75366970","2636054","2023-02-06 21:54:51","0","43","<git><version-control><gitignore><git-add>","Does git add -A respect .gitignore?","<p>I have several <code>target</code> subdirectories in my project that I do not want to track. So I removed them all with:</p>
<p><code>find . -type d -name 'target' -print0 | xargs -0 git rm --cached -r --</code></p>
<p>I also added <code>./*/target/</code> to my <code>.gitignore</code> file.</p>
<p>I then ran <code>git add -A</code> and it appears all of my <code>target</code> subdirectories were tracked and I had to remove them again.</p>
<p>Does <code>git add -A</code> simply not respect <code>.gitignore</code>? Will I have to run <code>git add</code> with a different option?</p>
","2","2636054",""
"25550502","2038360","2014-08-28 13:49:41","3","2732","<git><git-add>","cancel git add -A","<p>By mistake I run the command </p>

<pre><code>git add -A
</code></pre>

<p>and then (when I figured out) I stopped it using </p>

<pre><code>Ctrl+C
</code></pre>

<p>Is there a way to reset the repository to the point before the <code>git add -A</code>?</p>

<p><code>git status</code> shows:</p>

<pre><code># On branch master
# Your branch is ahead of 'origin/master' by 2 commits.
#
# Changed but not updated:
#   (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   deleted:    1xx_xx/xx.m~
#   modified:   2xx_xx/xx_xx.m
#   deleted:    3xx_xx/xx_xx.m~
#   modified:   4xx_xx/xx_xx.m
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   xx_xxvariables_ldac/
#   xx_xx/variables_ldac_template/
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>
","5","2038360",""
"7374069","762896","2011-09-10 19:28:59","130","71812","<git><undo><git-commit><git-reset><git-add>","Undo git reset --hard with uncommitted files in the staging area","<p>I am trying to recover my work. I stupidly did <code>git reset --hard</code>, but before that I've done only <code>get add .</code> and didn't do <code>git commit</code>. Please help! Here is my log:</p>

<pre><code>MacBookPro:api user$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)

#   modified:   .gitignore
...


MacBookPro:api user$ git reset --hard
HEAD is now at ff546fa added new strucuture for api
</code></pre>

<p>Is it possible to undo <code>git reset --hard</code> in this situation?</p>
","6","762896","0"
"25884007","","2014-09-17 06:47:02","4","3096","<git><git-add>","Disable git add . command","<p>Many times I mistakenly add unwanted files to the staging area using the <code>git add .</code> command.</p>

<p>I wonder if there is a way I could completely disable this command, so that I only use <code>git add file</code>?</p>
","8","",""
"45725154","1944451","2017-08-17 01:09:24","0","977","<git><github><gitignore><git-commit><git-add>","git add . or -A is adding .gitignore file in commit list, how to get ridoff this?","<p>If I change a bunch of files and then run command <code>git add .</code> it includes all the files along with <code>.gitignore</code> in my commit list.</p>

<p>If I use <code>git rm --chached .gitignore</code> then it is showing as <code>deleted: .gitignore</code> and <code>git add .</code> is adding the deleted <code>.gitignore</code> file</p>

<p>How can I IGNORE <code>.gitignore</code> itself so that <code>git add .</code> command adds only my changes in actual files or directories. </p>
","1","1944451",""
"63914072","12347371","2020-09-16 06:07:19","0","876","<git><version-control><git-add>","What does git add do?","<p>I initialized a folder with <code>git init</code>.
The size of contents in that is around 600MB. After doing <code>git add</code>, The size of <code>.git</code> became 600MB, So, It literally stores all the contents of my files? I thought <code>git add</code> just considers the files as to be tracked, But If that is true, The size shouldn't be that large, Right?
Correct Me, If I am wrong.</p>
<p>If yes, can you suggest something more simple for tracking my changes locally?</p>
<p><strong>Update</strong>: Even with <code>git gc</code>, Size didn't change much
Actually My requirement is, I am storing Videos, Text Files, Pdf Files etc... And I keep changing them, So, I want to go back sometimes.
Due to large size of Videos, It is increasingly bloated.</p>
<p>I think there is no other choice other that <code>git</code>. Thanks Guys</p>
","1","12347371",""
"27974071","4228785","2015-01-15 22:19:38","1","339","<git><git-add><git-rm><git-stage>","“git rm .” is not adding the deleted files in the staged area","<p>I eliminated some files of my project. I want to pass all the eliminated files to staging area with some as <code>git rm .</code>, but I want to pass all the files at once using wildcards.</p>

<p>What's the good way to stage the eliminated files?</p>

<pre><code>fernando@fernando:~/ProyectoTicketMaster/Ticket_Master$ git status
# On branch jquery
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   deleted:    app/assets/javascripts/bus_routes.js.coffee
#   modified:   config/routes.rb
#
# Changes not staged for commit:
#   (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   deleted:    app/assets/javascripts/schedules.js.coffee
#   deleted:    app/assets/stylesheets/bus_routes.css.scss
#   deleted:    app/assets/stylesheets/schedules.css.scss
#   deleted:    app/controllers/bus_routes_controller.rb
#   deleted:    app/controllers/schedules_controller.rb
#   deleted:    app/helpers/bus_routes_helper.rb
#   deleted:    app/helpers/schedules_helper.rb
#   deleted:    app/models/bus_route.rb
#   deleted:    app/models/schedule.rb
#   deleted:    app/views/bus_routes/_form.html.erb
#   deleted:    app/views/bus_routes/edit.html.erb
#   deleted:    app/views/bus_routes/index.html.erb
#   deleted:    app/views/bus_routes/new.html.erb
#   deleted:    app/views/bus_routes/show.html.erb
#   deleted:    app/views/schedules/_form.html.erb
#   deleted:    app/views/schedules/edit.html.erb
#   deleted:    app/views/schedules/index.html.erb
#   deleted:    app/views/schedules/new.html.erb
#   deleted:    app/views/schedules/show.html.erb
#   deleted:    db/migrate/20141223030318_create_bus_routes.rb
#   deleted:    db/migrate/20141231211702_create_schedules.rb
#   deleted:    test/fixtures/bus_routes.yml
#   deleted:    test/fixtures/schedules.yml
#   deleted:    test/functional/bus_routes_controller_test.rb
#   deleted:    test/functional/schedules_controller_test.rb
#   deleted:    test/unit/bus_route_test.rb
#   deleted:    test/unit/helpers/bus_routes_helper_test.rb
#   deleted:    test/unit/helpers/schedules_helper_test.rb
#   deleted:    test/unit/schedule_test.rb
</code></pre>
","0","4228785",""
"10641451","1354543","2012-05-17 18:30:30","15","2244","<terminal><git-add><git><git-alias>","What is the meaning of the ""bang"" or ""!"" before the git command?","<p>As you can see from this excerpt, there is a ""!"" before the git command. What's the point?</p>

<pre><code>[alias]
commitx = !git add . &amp;&amp; git commit
</code></pre>

<p>- <a href=""https://stackoverflow.com/a/8956546/1354543"">https://stackoverflow.com/a/8956546/1354543</a></p>

<p>I understand aliases and what the command itself is doing, but not the point of the ""!"" before the git command.</p>
","0","1354543","0"
"65790476","1579456","2021-01-19 11:18:52","3","1027","<permissions><windows-subsystem-for-linux><samba><git-add>","WSL+samba+git: ""error: insufficient permission for adding an object to repository database .git/objects"" / git-clone / git-add permission errors","<p>I'm working on Win10 using the WSL1 (Windows Linux Subsystem) with Ubuntu 20.04.1 LTS. I have a Samba (1.0) Network Share on which I want to create my git repository via my Ubuntu Terminal.</p>
<pre><code>christian@my_pc:~/p/git_test$ ll
total 2048
drwxr-xr-x 1 christian christian  512 Jan 19 11:13 ./
drwxr-xr-x 1 christian christian  512 Jan 19 10:11 ../
-rwxr--r-- 1 christian christian    0 Jan 19 10:12 my_code_file.rb
</code></pre>
<p>I can <code>git init</code> without a problem, however, as soon as I try to <code>git add</code> a file, I get this error:</p>
<pre><code>christian@my_pc:~/p/git_test$ git add my_code_file.rb
error: insufficient permission for adding an object to repository database .git/objects
error: my_code_file.rb: failed to insert into database
error: unable to index file 'my_code_file.rb'
fatal: adding files failed
</code></pre>
<p>The permissions, however, are all right, as far as I can tell. All files belong to christian:christian. The tree looks like this:</p>
<pre><code>.git
├── [-rwxr--r--]  HEAD
├── [drwxr-xr-x]  branches
├── [-rwxr--r--]  config
├── [-rwxr--r--]  description
├── [drwxr-xr-x]  hooks
│   ├── [-rwxr--r--]  applypatch-msg.sample
│   ├── [-rwxr--r--]  commit-msg.sample
│   ├── [-rwxr--r--]  fsmonitor-watchman.sample
│   ├── [-rwxr--r--]  post-update.sample
│   ├── [-rwxr--r--]  pre-applypatch.sample
│   ├── [-rwxr--r--]  pre-commit.sample
│   ├── [-rwxr--r--]  pre-merge-commit.sample
│   ├── [-rwxr--r--]  pre-push.sample
│   ├── [-rwxr--r--]  pre-rebase.sample
│   ├── [-rwxr--r--]  pre-receive.sample
│   ├── [-rwxr--r--]  prepare-commit-msg.sample
│   └── [-rwxr--r--]  update.sample
├── [drwxr-xr-x]  info
│   └── [-rwxr--r--]  exclude
├── [drwxr-xr-x]  objects
│   ├── [drwxr-xr-x]  e6
│   │   └── [-r-xr--r--]  tmp_obj_mZzHwy
│   ├── [drwxr-xr-x]  info
│   └── [drwxr-xr-x]  pack
└── [drwxr-xr-x]  refs
    ├── [drwxr-xr-x]  heads
    └── [drwxr-xr-x]  tags

10 directories, 17 files
</code></pre>
<p>Whats strange is, that after <code>git add my_code_file.rb</code> I am no longer able to delete the <code>.git</code> dir, without permission error:</p>
<pre><code>christian@my_pc:~/p/git_test$ rm -rf .git
rm: cannot remove '.git/objects/e6/tmp_obj_mZzHwy': Permission denied
</code></pre>
<p>It seems git creates the <code>tmp_obj_mZzHwy</code> without giving me permission to delete it, which shouldn't be I guess.</p>
<p>Here again the permissions for the <code>.git</code> Folder after the <code>git add my_code_file.rb</code></p>
<pre><code>christian@my_pc:~/p/git_test$ ls -lahR .git
.git:
total 0
drwxr-xr-x 1 christian christian 512 Jan 19 11:14 .
drwxr-xr-x 1 christian christian 512 Jan 19 11:13 ..
drwxr-xr-x 1 christian christian 512 Jan 19 11:14 objects

.git/objects:
total 0
drwxr-xr-x 1 christian christian 512 Jan 19 11:14 .
drwxr-xr-x 1 christian christian 512 Jan 19 11:14 ..
drwxr-xr-x 1 christian christian 512 Jan 19 11:13 e6

.git/objects/e6:
total 1.0M
drwxr-xr-x 1 christian christian 512 Jan 19 11:13 .
drwxr-xr-x 1 christian christian 512 Jan 19 11:14 ..
-r-xr--r-- 1 christian christian   0 Jan 19 11:13 tmp_obj_mZzHwy
</code></pre>
<p>The Samba Share on which I am working is mounted as drive (with letter P:) on Win10. On my WSL Ubuntu I mount it via <code>/etc/fstab</code> with following line:</p>
<pre><code>P:▸ /mnt/p▸ drvfs▸defaults,metadata,rw,exec,uid=christian,gid=christian,umask=22,fmask=11▸0 0
</code></pre>
<p>My <code>.git/config</code> for the repo</p>
<pre><code>[core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
        symlinks = false
        ignorecase = true
</code></pre>
<p>What I already tried to fix the problem:</p>
<ul>
<li><code>chmod -R u+rwx .</code></li>
<li><code>git init --shared=all</code></li>
<li><code>umask 0000</code></li>
</ul>
<p>On my home dir (resp. non-samba drive) <code>git init/add</code> works without problems.</p>
<hr />
<h2><strong>Update</strong></h2>
<p>I found out that the samba share is not mounted properly, the <strong>metadata option is missing</strong> resp. <strong>gets ignored</strong> whenever I mount it. I think this might be the problem! However, its not clear to me, why it's ignored or if there is <strong>a way to force it?</strong></p>
<pre><code>TARGET                       SOURCE      FSTYPE      OPTIONS
/                            rootfs      wslfs       rw,noatime
...
├─/mnt/p                     P:          drvfs       rw,noatime,uid=1000,gid=1000,case=off
└─/mnt/c                     C:\         drvfs       rw,noatime,uid=1000,gid=1000,metadata,case=off
</code></pre>
","0","1579456","0"
"572549","64313","2009-02-21 06:51:06","3402","2102573","<git><git-add>","Difference between ""git add -A"" and ""git add .""","<p>What is the difference between <a href=""https://git-scm.com/docs/git-add#Documentation/git-add.txt--A"" rel=""noreferrer""><code>git add [--all | -A]</code></a> and <a href=""https://git-scm.com/docs/git-add"" rel=""noreferrer""><code>git add .</code></a>?</p>
","0","64313","0"
"58258337","12130659","2019-10-06 14:42:06","0","2852","<git><git-add>","Visual Studio Code Terminal ""git add . "" sends following error message ""fatal: not a git repository (or any of the parent directories): .git""","<p>I have a project I want to upload from Visual Studio Code by using the Terminal and the command: </p>

<pre><code>git add .
</code></pre>

<p>See down below error message. </p>

<blockquote>
  <p>fatal: not a git repository (or any of the parent directories): .git</p>
</blockquote>

<p>I don't understand how to solve this.</p>
","1","12130659",""
"39477305","213759","2016-09-13 19:07:56","6","9154","<git><git-add>","How to re-add added files (update staged files only) in git?","<p>We have modified files in <code>path/to/another/</code> and <code>path/to/main/</code>.<br>
Files in <code>path/to/main/</code> already added into git cache but we have updated <code>path/to/main/Bar.php</code> file <strong>AGAIN</strong>. We now have the following situation:</p>

<pre><code>$ git status
[...]
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   path/to/main/Foo.php
        modified:   path/to/main/Bar.php

Changes not staged for commit:
    (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   path/to/main/Bar.php
        modified:   path/to/another/Aaa.php
        modified:   path/to/another/Bbb.php
</code></pre>

<p>(note that path/to/main/Bar.php shows up twice)</p>

<p>I need a command which could readd files which were added before without using particular paths.</p>

<p>P.S. <code>git add --update</code> will add all these files. It doesn't work.</p>

<p>P.P.S. This command should be able to readd <code>modified:</code> and <code>new file:</code> types.</p>

<p><strong>UPD1</strong></p>

<p>Thanks to @AyonNahiyan, yeah, it can work in bash. But maybe there is a command without using bash tricks (subcommands).</p>
","8","213759","0"
"20665362","387028","2013-12-18 18:09:47","0","61","<git><git-add>","How to get `git add` to list files that's staged","<p>How do I get git to echo what files that are being staged during <code>git add</code> command?</p>

<p>Something like this...</p>

<pre><code>&gt; git add app/
app/index.html added
&gt; _
</code></pre>
","0","387028",""
"20889298","156982","2014-01-02 18:24:13","2","472","<git><git-commit><git-add>","Adding to git staging means what?","<p>What is the difference between <code>git add</code> and <code>git commit</code>? </p>

<p>I understand that former adds to staging. But adding to staging means what? </p>

<p>Isn't it an additional step to first add to staging and then do a commit? In fact, it just doesn't end there, we also have to do a <code>push</code> to actually save our changes to the centralized repository. Am I missing any point here?</p>
","1","156982",""
"20956947","906658","2014-01-06 18:42:25","2","2291","<git><git-reset><git-add>","How to abort git add -p discarding changes?","<p>I ran <code>git add</code> on some files, constituting a logical separate set of changes, made other changes to them and extracted another logical set of changes using <code>git add -p</code>. Half way through, I realize that I have not committed the previous set, yet.</p>

<p>The interactive help of <code>git add -p</code> only gives the following options:</p>

<pre><code>Stage this hunk [y,n,q,a,d,/,s,e,?]? ?
y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk nor any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk nor any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
</code></pre>

<p>How can I reset the added patches?</p>
","0","906658",""
"58823308","1191147","2019-11-12 16:57:07","1","288","<git><git-add>","What does git add :/ actually do?","<p>Since first learning Git a few months ago, I've been using <code>git add :/</code> to stage my files before committing, with the impression that the command stages all modified <em>and</em> newly-added files in my Git directory (I assume I got this impression from one of the articles I was using to learn). This has worked fine for me for the past few months, so at least seems to me to behave that way, but from doing some reading around the answers on this site I get the impression that that isn't the case, and the fact that it's such an under-documented command is another hint to this.</p>

<p>What exactly does <code>git add :/</code> do? If it <em>doesn't</em> stage all modified and newly-added files, is there a command that does, or is this just not (yet) possible with a single command in Git?</p>
","8","1191147",""
"2221408","244000","2010-02-08 12:07:11","61","74405","<git><glob><git-add>","git: How do I recursively add all files in a directory subtree that match a glob pattern?","<p>I have several .screen files inside <code>/xxx/documentation</code> and its subdirectories that are already tracked by Git.</p>

<p>After modifying many of these screen files, I run <code>git add documentation/\\*.screen</code>—as indicated by the first example in <code>git-add</code>'s documentation—to stage these files, but the command fails:</p>

<pre>fatal: pathspec 'documentation/\*.screen' did not match any files</pre>

<p>Is my command bad, or does git have a bug?</p>
","1","244000","0"
"1861861","95706","2009-12-07 18:15:04","2","3680","<git><interactive><git-add>","Why does git show ""dev/null"" in status after interactive add of renamed file?","<p>I get an unexpected appearance of ""dev/null"" in my <code>git status</code> output after interactively adding a patch for a file that was renamed. I'm wondering if this is expected and there is some good reason for this behavior, or if this could be a bug.</p>

<p>Below is a simple illustration of how to reproduce this. In my real-world scenario, it's a bit more complicated and there's a good reason why I'm using <code>git add -p</code>, but I was able to boil it down to this minimal example:</p>

<pre>
$ git init test
Initialized empty Git repository in /local_disk/tmp/test/.git/
$ cd test
$ echo ""foo"" > foo
$ git add foo
$ git commit -m 'Add foo'
[master (root-commit) 3643b5d] Add foo
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 foo
$ mv foo bar
$ git add -p
diff --git a/foo b/foo
index 257cc56..0000000
--- a/foo
+++ /dev/null
@@ -1 +0,0 @@
-foo
Stage this hunk [y,n,q,a,d,/,e,?]? y

$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD ..."" to unstage)
#
#       new file:   dev/null
#       deleted:    foo
#
# Changed but not updated:
#   (use ""git add/rm ..."" to update what will be committed)
#   (use ""git checkout -- ..."" to discard changes in working directory)
#
#       deleted:    dev/null
#
# Untracked files:
#   (use ""git add ..."" to include in what will be committed)
#
#       bar
</pre>

<p>What is with the ""new file: dev/null"" and ""deleted file: dev/null""? I would expect this to result in exactly the same thing as if I had done:</p>

<pre>
$ mv foo bar
$ git rm foo
$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD ..."" to unstage)
#
#       deleted:    foo
#
# Untracked files:
#   (use ""git add ..."" to include in what will be committed)
#
#       bar
</pre>

<p>I am using Git version 1.6.5.5, and have also reproduced it in 1.6.5.4. I was unable to reproduce it in my Cygwin environment which has Git at version 1.6.1.2.</p>
","5","95706","0"
"40158716","1011591","2016-10-20 15:32:21","1","175","<git><github><gitignore><git-add>","Broke my local git repo","<p>For whatever reason my .gitignore is failing to ignore my <code>node_modules</code> directory. When I do a <code>git status</code> it's returning a bunch of deleted and modified files that are under a directory it's supposed to ignore, and it's not picking up files I've added since the last commit. </p>

<p>What am I doing wrong?</p>

<p>The repo is <a href=""https://github.com/gh0st/ng2do-mean-app-arvindr21"" rel=""nofollow"">here</a>.</p>

<p>My <code>.gitignore</code> is here:</p>

<pre><code>node_modules
.idea

# compiled output
/public/vendor/my-app/dist
/public/vendor/my-app/tmp

# dependencies
bower_components

# IDEs and editors
/.idea

# misc
/public/vendor/my-app/.sass-cache
/public/vendor/my-app/connect.lock
/public/vendor/my-app/coverage/*
/public/vendor/my-app/lib/peerconnection.log
/public/vendor/my-app/npm-debug.log
/public/vendor/my-app/testem.log
/public/vendor/my-app/typings

# e2e
/public/vendor/my-app/e2e/*.js
/public/vendor/my-app/e2e/*.map

#System Files
.DS_Store
</code></pre>

<p>Is there anything else I can paste that would be of help?</p>
","13","1011591",""
"12218709","1211337","2012-08-31 15:47:49","0","110","<git><commit><git-commit><git-add>","Git commits un-staged changes of previously staged file, contrary to git-scm book","<p>The section of the book:</p>

<p><a href=""http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Staging-Modified-Files"" rel=""nofollow"">http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Staging-Modified-Files</a></p>

<p>says that if I change file A, run 'git add A' and then change file A again, run 'git commit' on this file, only previously staged changes will be committed. To commit unstaged changes - add file again and then commit.</p>

<p>After some testing, however it turns out that git commits all changes of the file A, even those that were made after the file had been staged initially.</p>

<p>Can anyone shed some light on this matter? Thanks.</p>

<p>EDIT:
I am not using -a option
It looks like if I specify the file explicitly for ""git commit A"" (I am not using -a option), it commits unstaged changes as well. Committing without file ""git commit"" asks to enter a commit message and then behaves as described in the book.</p>
","3","1211337","0"
"39108688","","2016-08-23 18:52:02","0","1228","<git><git-bash><git-add><git-patch>","Receiving ""patch failed"" and ""patch does not apply"" errors after running ""git add -e""","<p>I can't seem to run ""git add -e"" in either Powershell or Git Bash without getting errors.  Here are the file (test3.html) contents in question:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    Hello
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Note that there is a carriage return at the last line.</p>

<p>Now, I run the following commands and receive the respective output from my local git repo:</p>

<pre><code>PS C:\repos\git-test&gt; git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   test3.html

no changes added to commit (use ""git add"" and/or ""git commit -a"")
PS C:\repos\git-test&gt; git add -e
unix2dos: converting file C:/repos/git-test/.git/ADD_EDIT.patch to DOS format...
dos2unix: converting file C:/repos/git-test/.git/ADD_EDIT.patch to Unix format...
error: patch failed: test3.html:1
error: test3.html: patch does not apply
</code></pre>

<p>And here is what appears after entering the ""git add -e"" command in notepad:</p>

<pre><code>diff --git a/test3.html b/test3.html
index 1663e8c..03366ee 100644
--- a/test3.html
+++ b/test3.html
@@ -1,8 +1,9 @@
 &lt;!DOCTYPE html&gt;
 &lt;html&gt;
 &lt;head&gt;
-   &lt;title&gt;&lt;/title&gt;
+   &lt;title&gt;test&lt;/title&gt;
 &lt;/head&gt;
-   &lt;div&gt;
-   &lt;/div&gt;
+&lt;body&gt;
+   Hello
+&lt;/body&gt;
 &lt;/html&gt;
</code></pre>

<p>There is a carriage return after the last line.  The file was originally written with notepad++ in UTF-8 encoding.  </p>

<p>As soon as I close notepad, I receive these errors:  </p>

<p><strong>error: patch failed: test3.html:1</strong></p>

<p><strong>error: test3.html: patch does not apply</strong></p>

<p>Question:  Why am I getting these errors, especially if I haven't changed a thing with ADD_EDIT.patch?</p>

<p>I've tried more complex flows where I would split the changes into separate hunks and decide which changes I wanted to commit.  Similar results would occur.  And, if I can't get even the most simple flow to work, then what's the point...</p>

<p>My reasoning behind this is to become more acquainted with Git since I'm new to it.  I've been reading <a href=""https://git-scm.com/docs/git-add"" rel=""nofollow"">https://git-scm.com/docs/git-add</a> and have been trying to follow along each option.  </p>

<p>Any help, suggestions, or references to other posts that I might have missed are all greatly appreciated.</p>

<p>EDIT:</p>

<p>Here is how my configuration looks like:</p>

<pre><code>PS C:\repos\git-test&gt; git config --list
core.symlinks=false
core.autocrlf=true
core.fscache=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
diff.astextplain.textconv=astextplain
rebase.autosquash=true
credential.helper=manager
user.name=Dash
user.email=some.email.address@gmail.com
core.editor=notepad
core.whitespace=trailing-space,space-before-tab
help.autocorrect=1
color.ui=auto
gpg.program=c:/Program Files (x86)/GNU/GnuPG/gpg2.exe
gui.recentrepo=C:/Users/Dash/repos/public-repo-test
apply.whitespace=fix
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
core.excludesfile=C:\repos\gitignore_global.txt
remote.origin.url=https://Mister0wl@bitbucket.org/Mister0wl/using-git-with-a-gui.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
apply.whitespace=nowarn
</code></pre>
","4","",""
"20397024","245549","2013-12-05 10:08:35","5","2242","<git><git-checkout><git-add>","Are ""git add file"" and ""git checkout -- file"" symmetric?","<p>I have the following understanding of the <code>git add file</code> and <code>git checkout -- file</code> (but I am not sure if it is correct).</p>

<p>Whenever we edit files with a text editor, we do it in the working directory. Each time we can move file to the so called <code>staging area</code> by executing <code>git add file_name</code>. If we edit the file again (after <code>git add</code>) we change the file in the working directory and in this way, in the working directory we have the file in a ""new"" state while in the <code>staging area</code> the file is in the ""old"" state.</p>

<p>When we use <code>git add</code> again, we bring the file in the staging area to the ""new"" state (the state from the working directory).</p>

<p>If we do <code>git checkout -- file_name</code>, I assume that we take a file from the staging area and use it to overwrite the file in the working directory. In this way we can bring the file in the working directory to the ""old"" state. Is it correct?</p>

<p>What is also not clear to me, is if we copy or move the file from the staging area. In other words, does <code>git checkout -- file</code> change the state of the file in the <code>staging area</code>. Can we say that after <code>git checkout -- file</code> the file in the staging area change the state of the file to its previous state in the staging area? </p>
","0","245549","0"
"30599569","937363","2015-06-02 14:55:28","2","1739","<git><git-submodules><git-add>","git add submodule hash directly","<p>Is there a way using git commands to directly update the submodule hash in the index?</p>

<p>If not, is there a way to manually change it via modifying text somewhere in the .git directory?</p>

<p>I want to point to a specific commit in a submodule, but I want to avoid having to go into that submodule, check out the commit, add the submodule to the index, and then checking out the original commit in the submodule.
For example:</p>

<ol>
<li><code>cd &lt;submod&gt;</code></li>
<li><code>git checkout &lt;hash&gt;</code></li>
<li><code>cd ..</code></li>
<li><code>git add &lt;submod&gt;</code></li>
<li><code>cd &lt;submod&gt;</code></li>
<li><code>git checkout &lt;originalbranch&gt;</code>
<ul>
<li>To determine <code>&lt;originalbranch&gt;</code> programattically may take several more commands.</li>
</ul></li>
</ol>

<p>Of course, this could all be scripted, but since the submodule state is captured in the index via a single hash, it should be possible to have a single command to do this without this long unnecessary flow of actually checking the commit out.</p>
","2","937363","0"
"58376170","1175081","2019-10-14 11:50:19","1","544","<git><gitignore><git-add>","Can't add file to git for no apparent reason","<p>I have this file under assets/fonts/myFont.otf</p>

<p>I can't check it into my repo. But it is not ignored as far as I can tell.</p>

<pre><code>git checkout assets/fonts/myFont.otf
error: pathspec 'assets/fonts/myFont.otf' did not match any file(s) known to git.
</code></pre>

<p>But adding it has no effect.</p>

<pre><code>git add assets/fonts/myFont.otf
</code></pre>

<p>I can't get <code>git status</code> to show the file in any way.</p>

<p>I have tried so far:</p>

<ul>
<li>git add -f</li>
<li>git update-index --no-assume-unchanged</li>
<li>git config --global core.excludesfile</li>
<li>checking all .gitignore files in the project</li>
<li>Changeing the file ending from <code>.otf</code> to <code>.ttf</code> -> <strong>It works</strong></li>
<li>Moving /assets/fonts/* to . -> <strong>It works</strong></li>
<li>git check-ignore assets/fonts/* -> empty output</li>
</ul>

<p>I could not find out why <code>*.otf</code> files are ignored in my <code>assets/fonts/</code> folder. Any other things that I can try to find out? Any Ideas what might cause this? OS is macos 13.14.6</p>
","6","1175081","0"
"13102683","714232","2012-10-27 17:57:18","2","643","<git><git-commit><git-add>","Difference between ( git add -A followed by git commit ) and git commit -a?","<p><code>git add --all</code> or <code>git add -A</code> followed by <code>git commit -m ""commit message""</code> seem to produce a different result from <code>git commit -am ""commit message""</code> when I thought they would produce the same final result.</p>

<p>Am I doing something wrong with <code>git commit -am ""commit message""</code>?</p>

<p>Also is <code>git commit -a -m ""commit message""</code> the same as <code>git commit -am ""commit message""</code>?</p>
","0","714232","0"
"39743490","5353461","2016-09-28 09:34:28","14","1031","<git><git-diff><pager><git-add>","How do I use a pager for long git add --patch hunks?","<p>When I interactively add <code>diff</code> hunks with <code>git add --patch</code>, I sometimes get hunks which are longer than the screen, but no ability to use <code>less</code> to page through the hunks.</p>
<p>This is strange to me as I have already set:</p>
<pre><code>[core]
      pager = less -FRX --tabs=4

[pager]

  diff = diff-highlight | less -FRX --tabs=4
</code></pre>
<p><code>interactive.diffFilter=</code> piped through <code>less</code> doesn't help with paging either.</p>
<p>What do I need to do to get <code>git add--patch</code> to use <code>less</code> such that I can use the keyboard to navigate any output longer than one screen?</p>
","3","5353461","0"
"39150038","","2016-08-25 16:09:17","3","1220","<git><git-add>","What does git add -n --ignore-missing actually do?","<p>This seems simple enough, but I'm having a difficult time understanding the difference between the following commands:</p>

<pre><code>git add -n 
and
git add -n --ignore-missing
</code></pre>

<p>I believe I understand what ""git add -n"" does in the sense that it is a dry run of ""git add"", meaning that it will tell the user what file changes would be added to the staging area (index) without actually adding anything to the staging area.  I read the following description of the ""git add -n"" command in the <a href=""https://git-scm.com/docs/git-add"" rel=""nofollow"">online git documentation</a>:</p>

<blockquote>
  <p>-n<br>
  --dry-run  </p>
  
  <p>Don’t actually add the file(s), just show if they exist and/or will be ignored.</p>
</blockquote>

<p>By ""will be ignored"" I assumed that if ""git add -n"" does not show what it will do to a file that exists, then that file is being ""ignored"".  I haven't come up with a circumstance where the command will literally display that a file will be ignored...  yet.  Mind you, I've only been working with Git for the past couple weeks.  </p>

<p>Now, my confusion begins with the following description of ""--ignore-missing"":</p>

<blockquote>
  <p>--ignore-missing  </p>
  
  <p>This option can only be used together with --dry-run. By using this option the user can check if any of the given files
  would be ignored, no matter if they are already present in the work
  tree or not.</p>
</blockquote>

<p>""...the user can check if any of the given files would be ignored""...  But, I thought that's what ""git add -n"" does all by itself.  I set up a repository where all files that match *.log are to be ignored.  Yet, I don't see ""git add -n"" making any mention of any files with that extension unless it is already part of the repository.  The same goes for ""git add -n --ignore-missing"".</p>

<p>I have been desperately searching for a way where this option provides any difference from the regular usage of ""git add -n"".  I have a feeling that my understanding of ""git add -n"" is partially or fully incorrect, which worries me.  So I'm hoping someone could elaborate and emphasize where I'm going wrong.  Thanks to all those who can help!</p>
","0","",""
"35087114","3922930","2016-01-29 14:38:45","1","677","<git><git-reset><git-add>","Revert version of file in git staging area","<p>New newbie here.
This is related to manipulating staging area of git.</p>

<p>Say I have a file named cat.txt.</p>

<p>It's git committed version has a single line in it.
Then I edited cat.txt added a second line and staged it.
Then edited again, added third line and staged that too.
My working copy and staging area reference to it contains three lines.</p>

<p>Now I decided the to commit the version with only two lines in it.
How do I revert cat.txt in staging area back to its two lines version?
Thanks</p>
","1","3922930",""
"2190409","227171","2010-02-03 07:50:19","77","33808","<git><git-add>","What's the difference between `git add .` and `git add -u`?","<p>I was assuming that both work in the same way. Both add every file onto index. But I seem wrong.</p>

<ul>
<li>What's the difference between <code>git add .</code> and <code>git add -u</code>?</li>
</ul>
","0","227171","0"
"21378809","3239840","2014-01-27 10:47:57","1","306","<git><gitignore><git-add><git-track>","Add files to .git and do not delete them when pushing to upstream","<p>I am looking into adding some files to <code>.git</code> repo directory, and <code>push</code> them to the upstream
without tracking/commiting them. </p>

<p>Example:</p>

<pre><code>.git/information.txt 
</code></pre>

<p>After I do a <code>commit</code>, I add text to <code>information.txt</code>, and then <code>push</code>. 
When I <code>clone</code>/fork I would like to still have this file in <code>.git</code>. </p>

<p>What I basically want is to have files that are not tracked, and the content in the upstream is updated with the existing content in the local repo when <code>git push</code> is issued.</p>

<p>I guess the way to do it is to hack the <code>git-init</code> and add whatever I want, and see what <code>git push</code>/<code>clone</code>/fork does to the <code>.git</code> folder, and keep the new files and send them to upstream. But I am thinking that maybe there is another way.</p>

<p>Is there a config option that I am missing?</p>
","3","3239840",""
"27642116","4071486","2014-12-24 20:58:06","-1","52","<github><git-commit><git-add><git-status>","Doing a commit in github","<p>Actually i am a beginner in using github.
so here is my question.when i try to show commits in github i have a problem,so before adding the modification when i run <code>git status</code> i not only get the modifications inside the file as changes modified but also the total file as modified. for eg:</p>

<pre><code>user@ubuntu:~/folder$ git status -s
 M path/to/file
 M path/to/file~
</code></pre>

<p>so due to this when i commit my commits show 2 changes instead of just one change but this is not the actual problem as i can solve this by giving <code>git add path/to/file</code> and commiting.
But when i try to show changes in a macro level how i can i solve this problem???</p>

<p>For eg: if i edit 50 documents in my repo which already exist,how can i just add the changes in the documets and not the whole document including the changes as 2 separate changes in my commit history?</p>

<p>I add link to an example commit for more clarification if needed.
<a href=""https://github.com/Dhinesh-Ravi/Example/commit/01b78ffd25cfbbc18845e57bdad45f4131e2fa5c"" rel=""nofollow"">Example Commit Click Here</a></p>

<p>Hope I have clearly explained my doubt.
I would be more thankful if u clear my doubt step by step.</p>
","3","4071486","0"
"10721624","1355158","2012-05-23 14:04:50","62","233027","<git><github><version-control><git-commit><git-add>","github changes not staged for commit","<p>I have a very basic github setup with a readme, a directory, and another directory inside it with an html file. On github I can only view the readme and the first folder but none of its contents, and I am getting this message</p>

<pre><code>tc349 ryntc3$ git add *
tc349 ryntc3$ git status
On branch master
Changes not staged for commit:
(use ""git add &lt;file&gt;..."" to update what will be committed)
(use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
(commit or discard the untracked or modified content in submodules) 

modified:   week1 (modified content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I feel like if I am adding all to be staged that it should not be an issue. Any help?</p>
","0","1355158","0"
"64535863","3343783","2020-10-26 11:03:27","-2","758","<git><git-add>","Can't add a file to git, seriously","<p>Solved, as explained in a comment under the accepted answer.</p>
<p>I have been using Git since years and I am really surprised that I there is one specific file that I can't add to the staging area in one of my repos! I don't want to delete and recreate the repo but to understand what is going on and fix it. Also, <strong>now I am worried that maybe there are other files that are not being added</strong> to the repo (or in other repos).</p>
<p>I have one repo in which I have just committed and pushed successfully a bunch of files, and then I have realized that one of them, <code>init.el</code>, didn't get uploaded.
This is what I have:</p>
<ul>
<li>Running <code>git add init.el</code> does not produce any output</li>
<li>The file (or a pattern matching it) is not specified in any <code>.gitignore</code> file (in the current folder, in a child folder, or in one of the parent directories until the root).</li>
<li>There is not parent Git repository that I have accidentally created and that is messing with that file</li>
<li>The file (or a patter matching it) is not listed in <code>.git/info/exclude</code></li>
<li>The file (or a pattern matching it) does not appear when I run <code>git ls-files --others -i --exclude-standard</code></li>
</ul>
<p>I have then tried removing the file <code>rm init.el</code>, which correctly leads to</p>
<pre><code>Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
    modified:   .gitignore

Changes not staged for commit:
  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    deleted:    init.el
</code></pre>
<p>Then, I have tried doing <code>git rm init.el</code>, which again correctly led to</p>
<pre><code>rm 'init.el'
</code></pre>
<p>But putting back the file and then adding the file with <code>git add init.el</code> shows no output, and the file is still missing from the staging area (I have checked this with <code>git status</code>, <code>git diff --cached</code> and by committing and pushing (see next line)).
Trying to commit, push and double check what is going on in Github confirms that the file has not been added.</p>
<p>You never stops learning, is there anything standard that I am unaware of that may be triggering this behavior, or is this an error and so is there a way I can repair the repo?</p>
<p><strong>EDIT</strong>, to answer one comment</p>
<ul>
<li><code>pwd</code> gives <code>/Users/my_user/.my_spacemacs.d</code></li>
<li><code>cat .gitignore</code> gives</li>
</ul>
<pre><code>.DS_Store
spacemacs_d_backup2020/
</code></pre>
<ul>
<li><code>find . -name '.gitignore'</code> gives</li>
</ul>
<pre><code>./spacemacs_d_backup2020/.gitignore
./.gitignore
</code></pre>
<ul>
<li>finally, <code>cat ./spacemacs_d_backup2020/.gitignore</code> gives</li>
</ul>
<pre><code>.DS_Store
</code></pre>
","16","3343783",""
"64549425","13684332","2020-10-27 06:48:06","5","8112","<git><git-add><git-stage>","How do I see git added files?","<p>Sometimes I run <code>git add .</code> and big files that weren't supposed to get added are added. How can I see which files were added without commiting? And how to 'un-add' those files or all files at once so I can fix the <code>.gitignore</code>?</p>
","0","13684332","0"
"28011104","2630261","2015-01-18 15:00:28","102","92884","<git><git-add>","Undo git add --all","<p>I made a mistake and called <code>git add -all</code>, now all files are added. I did not make a <code>commit</code> and <code>push</code>. How can I <em>undo</em> my action?</p>
","1","2630261","0"
"46677642","8755591","2017-10-10 23:50:18","2","4640","<git><github><git-add>","git add -A not working","<p>Even after doing git add -A, when I run git status, I get this:</p>

<pre><code># On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   src/cartographer (modified content, untracked content)
#   modified:   src/cartographer_ros (untracked content)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Any idea how to fix this?</p>
","3","8755591","0"
"28437592","638893","2015-02-10 17:07:04","0","200","<git><jenkins><gitignore><git-add>",".gitignore to retain one file","<p>I'm trying to create a cronjob to backup all my Jenkins configuration in git. The only thing I need to be tracked in my repository is the <code>config.xml</code> in every Jenkins project. The file system is structured like <code>../jenkins/jobs/[PROJECTNAME]/config.xml</code>. The <code>.git</code> is located in jobs.</p>

<p>I don't want to explicitly ignore all other folder/files, but allow only the <code>config.xml</code> in that location. I came up with the following working solution:</p>

<pre><code>*

!.gitignore
!config.xml
!*/

*/workspace
*/modules
/config-history
*/config-history
*/*/config-history
*/*/*/config-history
*/*/*/*/config-history
*/*/*/*/*/config-history
*/*/*/*/*/*/config-history
*/*/*/*/*/*/*/config-history 
</code></pre>

<p>Unfortunate there are many projects and the <code>git add .</code> takes a while. Ignore <code>workspace</code>, the directly with most files in, didn't add any benefit.</p>

<p>Btw. the intuitive and short way didn't work at all:</p>

<pre><code>*
!.gitignore
!*/config.xml
</code></pre>

<p>Any ideas to either optimize my .gitignore or my git add without listing all files in either case?</p>
","0","638893",""
"12315081","1166235","2012-09-07 09:09:30","3","503","<git><sublimetext2><key-bindings><sublimetext><git-add>","sublime: bind ""git: add…"" from command palette to hotkey","<p>I'd like to bind action ""Git: add…"" (multiple files selection) from sublime command palette.</p>

<p><code>command: show_overlay {""overlay"": ""command_palette""} //shows command palette itself</p>

<p>command: git_add_choice //shows git:add… list</code></p>

<p>Binding this commands like that - fails</p>

<p><code>{ ""keys"": [""ctrl+shift+q""], ""command"": ""git_add_choice""}</p>

<p>{ ""keys"": [""ctrl+shift+q""], ""command"": ""show_overlay"", ""args"": {""overlay"": ""git_add_choice""} }</code></p>
","1","1166235","0"
"30013732","2856064","2015-05-03 12:19:10","4","2582","<git><git-bash><git-add>","How to add specific files recursively in git?","<p>To commit something on git using git bash on windows I need to do, e.g.:</p>

<pre><code>1.git add *
2.git commit -m ""Commit test""
3.git push origin master
</code></pre>

<p>In such way I commit all changes. I would like to add only specific files (*.h and *.cpp). The solution is to use:</p>

<pre><code>ad. 1.:
git add *.h
git add *.cpp
</code></pre>

<p>But in such way I add only *.h and *.cpp in current folder. The question is how to add files *.h and *.cpp in current folder and subfolders in one command?
Something like:</p>

<pre><code>1.git add *.h and *.cpp and_in_subfolders
and then:
2.git commit -m ""Commit test""
3.git push origin master
</code></pre>

<p>Thanks.</p>
","0","2856064","0"
"30890375","277826","2015-06-17 11:33:58","1","4495","<git><git-add>","git add all tracked files - also those in parent directory","<p>Lets say I have a git root folder <code>mine_git</code>, which has a subdirectory <code>subdir</code> there. So I've worked a bit, and I'm in <code>subdir</code> - <code>git status</code> lists all changed files:</p>

<pre><code>subdir$ git status -uno
# On branch master
# ...
#
#   modified:   mysubdirfile.txt
#   modified:   ../a-main-file.txt
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>K, so I want to add all of these tracked and modified files to staging area (or cache? index? not sure of the name), so I can commit afterwards; so I issue:</p>

<pre><code>subdir$ git add -u
</code></pre>

<p>... and then I check again:</p>

<pre><code>subdir$ git status -uno
# On branch master
# Changes to be committed:
#   ...
#
#   modified:   mysubdirfile.txt
#
# Changes not staged for commit:
#   ...
#
#   modified:   ../a-main-file.txt
#
# Untracked files not listed (use -u option to show untracked files)
</code></pre>

<p>So, only those files under my current location are <code>git add</code>ed, and <strong>not</strong> those in parent/sibling folders - even if those files are tracked by this git repository, and show up in <code>git status</code>!</p>

<p>And then I usually have to manually copy paste filenames, so as to do <code>git add ../a-main-file.txt</code>. Obviously this is a pain - so is there some command which will add <strong>all</strong> files listed by <code>git status -uno</code>, regardless of if they are located below the current level or not?</p>
","2","277826",""
"66473657","6199068","2021-03-04 10:58:12","1","89","<git><version-control><reverse-engineering><git-add>","How does `git add` deal with changes like file<->directory?","<p>This is a long question. I'm trying to reverse-engineer some basic Git functionalities, and am having some trouble wrapping my head around what <code>git add</code> really does under the hood. I'm already familiar with the three trees of Git, and that the index file is not really a tree but rather a sorted-array representation of the tree.</p>
<p>My original hypothesis is as follows: when <code>git add &lt;pathspec&gt;</code> is run,</p>
<ul>
<li>If <code>&lt;pathspec&gt;</code> exists in working directory:
<ol>
<li>Create an index file from  that reflects state of  in working directory</li>
<li>Overwrite the relevant section of index file with this (sub-)index.</li>
</ol>
</li>
<li>If <code>&lt;pathspec&gt;</code> exists only in current index file:
<ol>
<li>This means  has been deleted in working directory, so...</li>
<li>Delete relevant section of index file that corresponds to .</li>
</ol>
</li>
<li>If <code>&lt;pathspec&gt;</code> does not exist in working directory or index file:
<ol>
<li><code>fatal: pathspec &lt;...&gt; did not match any files</code></li>
</ol>
</li>
</ul>
<p>This hypothesis reflects a &quot;do what you're told to do&quot; <code>git add</code>, that only looks at the path and registers changes <em>at or under</em> this path to the index file. For most cases, this is how the actual <code>git add</code> seems to work.</p>
<p>But there are some cases that don't seem very straightforward:</p>
<h3>1. Replacing a file with a directory</h3>
<pre class=""lang-sh prettyprint-override""><code>git init

touch somefile
git add . &amp;&amp; git commit

rm somefile
mkdir somefile &amp;&amp; touch somefile/file
</code></pre>
<p>At this point, the index file consists of only a single entry for the <code>somefile</code> file I just deleted, as expected. Now I execute <code>git add</code>. I have two ways of doing this: <code>git add somefile</code> or <code>git add somefile/file</code>. (Obviously I'm excluding the trivial <code>git add .</code> here)</p>
<p><strong>What I expected:</strong></p>
<ul>
<li><code>git add somefile</code>: equivalent to <code>git add .</code> - remove old entry and add new entry</li>
<li><code>git add somefile/file</code>: only add an index entry for the new <code>somefile/file</code>.</li>
</ul>
<p><strong>What actually happens:</strong> Either of the above commands directly lead to the final state of having a single index entry for <code>somefile/file</code> - ie, both are equivalent to <code>git add .</code>.</p>
<p>Here, it feels like <code>git add</code> is not your straightforward &quot;do what you're told to do&quot; command. <code>git add somefile/file</code> seems to peek in and around the provided path, realizes <code>somefile</code> is no longer there and automatically removes the index entry.</p>
<h3>2. Replacing a directory with a file</h3>
<pre class=""lang-sh prettyprint-override""><code>git init

mkdir somefile &amp;&amp; touch somefile/file
git add . &amp;&amp; git commit

rm -r somefile &amp;&amp; touch somefile
</code></pre>
<p>At this point, the index file contains a single entry for the old <code>somefile/file</code> as expected. Again, I execute <code>git add</code> in the same two variants.</p>
<p><strong>What I expected:</strong></p>
<ul>
<li><code>git add somefile/file</code>: Normally, remove entry for the old <code>somefile/file</code>. But if it peeks around, it should also add new entry for <code>somefile</code>.</li>
<li><code>git add somefile</code>: equivalent to <code>git add .</code>.</li>
</ul>
<p><strong>What actually happens:</strong></p>
<ul>
<li><code>git add somefile/file</code>: leads to an empty index file - so, it does what I normally expect it to do!</li>
<li><code>git add somefile</code>: equivalent to <code>git add .</code>, as expected</li>
</ul>
<p>Here, <code>git add</code> behaves as a &quot;do what you're told to do&quot; command. It only picks up the paths and overwrites the appropriate section of index file with what the working directory reflects. <code>git add somefile/file</code> does not poke around and thus does not automatically add an index entry for <code>somefile</code>.</p>
<h3>3. Inconsistent index file</h3>
<p>Up to this point, a possible theory could be that <code>git add</code> tries to avoid the case of an inconsistent index file - ie, an index file that does not represent a valid work tree. But one extra level of nesting leads to exactly that.</p>
<pre class=""lang-sh prettyprint-override""><code>git init

touch file1
git add . &amp;&amp; git commit

rm file1 &amp;&amp; mkdir file1 &amp;&amp; mkdir file1/subdir
touch file1/subdir/something
git add file1/subdir/something
</code></pre>
<p>This is similar to case 1, only that the directory here has an extra level of nesting. At this point, the index file consists only of an entry for the old <code>file1</code> as expected. Again, now we run <code>git add</code> but with three variants: <code>git add file1</code>, <code>git add file1/subdir</code> and <code>git add file1/subdir/something</code>.</p>
<p><strong>What I expected:</strong></p>
<ul>
<li><code>git add file1</code>: Equivalent to <code>git add .</code>, leads to single index entry for <code>file1/subdir/something</code>.</li>
<li><code>git add file1/subdir</code> and <code>git add file1/subdir/something</code>: Normally, should only add an entry for <code>file1/subdir/something</code> (leading to inconsistent index file). But if the above &quot;no-inconsistent-index&quot; theory is correct, these should also remove the old <code>file1</code> index entry, thus being equivalent to <code>git add .</code>.</li>
</ul>
<p><strong>What actually happens:</strong></p>
<ul>
<li><code>git add file1</code>: Works as expected, equivalent to <code>git add .</code>.</li>
<li><code>git add file1/subdir</code> and <code>git add file1/subdir/something</code>: Only add a single entry for <code>file1/subdir/something</code>, leading to an inconsistent index file that cannot be committed.</li>
</ul>
<p>The inconsistent index file I'm referring to is:</p>
<pre><code>100644 &lt;object addr&gt; 0  file1
100644 &lt;object addr&gt; 0  file1/subdir/something
</code></pre>
<p>So just adding another level of nesting seems to stop <code>git add</code> from peeking around as it did in case 1! Note that the path provided to <code>git add</code> didn't matter too - both <code>file1/subdir</code> and <code>file1/subdir/something</code> lead to inconsistent index file.</p>
<p>The above cases paint a very complicated implementation of <code>git add</code>. Am I missing something here, or is <code>git add</code> really not as simple as it seems?</p>
","0","6199068",""
"33026270","5425083","2015-10-08 21:29:50","0","310","<git><patch><git-commit><git-add><git-am>","Troubles with git am when applied in a different repository","<p>I have two Git repositories:</p>

<ol>
<li><pre><code>/api/pom.xml
/jpa/pom.xml
</code></pre></li>
<li><pre><code>/mailbox/api/pom.xml
/mailbox/jpa/pom.xml
/protocols/api/pom.xml
</code></pre></li>
</ol>

<p>The second repository have a mailbox folder that has the exact same structure
that the first Git repository. Due to workflow changes, I now need to work on
the second repository, and need to transfer my working branches to the new
repository.</p>

<p>I created a patch in the first one (let say on file <code>api/pom.xml</code>)
and try to apply it in the second one, under the <code>/mailbox</code> path. So I have only
one problem: <code>git am</code> refuses to do the work, pretending that:</p>

<pre><code>&lt;file&gt; does not exist in index
</code></pre>

<p>I tried directory option and <code>-p1</code> option. Note: <code>patch -p1</code> does the job, but I
have ~80 patch to apply in all my branches:</p>

<pre><code>patch + git add + git commit
</code></pre>

<p>Is there any cheaper way to do it?</p>
","0","5425083","0"
"33042519","4292512","2015-10-09 15:53:21","1","72","<git><git-add>","Is there an option for ""git add -?"" to add only newly added files / removed files","<p><code>git status</code> gives me:</p>

<p>a list of added files</p>

<p>a list of modified files</p>

<p>a list of removed files</p>

<hr>

<p><strong>What I know:</strong></p>

<p><code>git add -A</code> --> all 3 lists</p>

<p><code>git add .</code> ---> all 3 lists</p>

<p><code>git add --ignore-removal .</code> ---> new and mod only</p>

<p><code>git add -u</code> --> mod and deleted</p>

<p><strong>Question:</strong></p>

<p><code>git add -??</code> --> new only</p>

<p><code>git add -??</code> --> deleted only</p>

<p><code>git add -??</code> --> new and deleted only</p>
","3","4292512",""
"58719940","6610176","2019-11-05 21:45:12","0","1341","<bash><git><rebase><git-rebase><git-add>","How to automatically resolve all conflicts in git rebase, ""git add .""","<p>The project I'm working on is a maven application with parent and child modules.  Changes to the parent module go to the development branch.  Each child module has its own branch that is rebased off of development to inherit these changes. </p>

<p>As of right now, I'm trying to set up a rebase script. To this end, I'm trying to figure out a way automatically resolve any conflicts that come up with no interruptions. As part of my testing, I'm rebasing a test branch I made off of development, by always defaulting to 'their' changes:</p>

<pre><code>git ls-files -z *_child | xargs -0 git update-index --skip-worktree #I do not want the child module to be touched

git rebase -X theirs development
</code></pre>

<p>However, the rebasing process is still being interrupted by conflict, usually for extremely old commits that have been resolved months ago.  To resolve this, I use:</p>

<pre><code>git add .
git rebase --continue
</code></pre>

<p>This works until I get to another conflict.  Right now, I'm looking into using <code>git rerere</code> to record the resolution actions I took:</p>

<pre><code>git config --local rerere.enabled true
</code></pre>

<p>However, I am still trying to figure out how this actually works with rebasing.  Do you have any suggestions, either with git rerere or some other git command, to resolve this?  Ideally, I would like to take out <code>git add .</code> altogether and always default conflicts to 'their' changes.</p>
","0","6610176",""
"21253404","3030786","2014-01-21 08:59:38","1","270","<git><git-add>","git add - Avoid adding files from subdirectories using wildcards when no pattern matches in current directory","<p><code>git add *.c</code> is supposed to add matching files only from the current directory, not from its subdirectories. I noticed that if no file matches the searched pattern in the current directory, <code>git add *.c</code> is adding matching files from subdirectories.</p>

<p>Does anybody know how to avoid this behavior?</p>
","0","3030786","0"
"2372583","146289","2010-03-03 15:37:48","22","5285","<git><git-add>","Untangle two lines with `git add -p`","<p>I've got a file with the following changes:</p>

<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -280,6 +281,7 @@
 if( foo )
 {
     bla();
-    test( true );
+    removeThis();
+    test( false );
 }
 else
</code></pre>

<p>How can I commit the change for <code>test()</code> only, and avoid committing removeThis() ?
Each time I try to edit the hunk manually git tells me it does not apply cleanly.</p>
","0","146289","0"
"59180634","2687324","2019-12-04 16:32:11","0","2458","<git><git-add>","Is there a difference between ""git add ."" and ""git add *"" with respect to outcome?","<p>Both seem to add everything in the current directory. The <a href=""https://git-scm.com/docs/git-add"" rel=""nofollow noreferrer"">Git add documentation</a> points to <a href=""https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec"" rel=""nofollow noreferrer"">pathspec</a>, which points to <a href=""http://man7.org/linux/man-pages/man3/fnmatch.3.html"" rel=""nofollow noreferrer"">fnmatch(3)</a>.</p>

<p>The docs suggests that <code>git add .</code> will add everything in the current directory, while <code>git add *</code> will add everything that matches <code>*</code>, which happens to be everything in the current directory. This then should result in the same outcome right? Perhaps <code>git add .</code> is a bit more performant because we don't have to expand the glob first?</p>
","2","2687324","0"
"59270198","3919155","2019-12-10 15:06:42","5","1148","<git><diff><patch><interactive><git-add>","How to get better hunks in git add interactive patch mode?","<p>I often use <code>git add -p somefile</code> to interactively stage only parts of the in the given file. However, if the file has more complicated changes, the default diff goes awry and so do the hunks offered by the interactive patch command.</p>

<p>The <code>git diff</code> command has a number of options to improve or customize the diff output, including the extremely useful <code>--anchored=&lt;text&gt;</code>, but are there any means get better hunks from <code>git add -p</code>?</p>
","4","3919155","0"
"10753268","1203556","2012-05-25 11:00:59","64","233904","<git><github><git-commit><git-push><git-add>","GitHub - error: failed to push some refs to 'git@github.com:myrepo.git'","<p>I ran these commands below:</p>
<pre><code>git add .
</code></pre>
<pre><code>git commit -m 't'
</code></pre>
<p>Then, when running the command below:</p>
<pre><code>git push origin development
</code></pre>
<p>I got the error below:</p>
<pre><code>To git@github.com:myrepo.git
 ! [rejected]        development -&gt; development (non-fast-forward)
error: failed to push some refs to 'git@github.com:myrepo.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>
<p>Are there any ways to solve the error above?</p>
","0","1203556","0"
"10782978","1402685","2012-05-28 10:17:46","13","8231","<git><git-commit><git-reset><git-add><git-reflog>","Recover files that were added to the index but then removed by a git reset","<p>I added some files to the index but then by mistake I deleted them with <code>git reset --hard</code>.  How do I recover them?
Here's what happened:</p>

<ol>
<li>I added all files using <code>git add .</code></li>
<li>I then committed</li>
<li>When I checked the status, there were still files that weren't included in the commit from the add, which was strange</li>
<li>I added the untracked files again and it worked this time</li>
<li>But I wanted everything to be in 1 single commit so I looked up how to unstage what I just committed</li>
<li>I used <code>git reset --hard HEAD^</code> — bad idea obviously, all files were deleted</li>
<li>so then I used <code>git reflog</code> to find where I left off</li>
<li>then I used <code>git reflog ______</code> to go back to my last commit.</li>
<li>then I used <code>git reset HEAD</code> to unstage the commit (what I should have originally done) but the files I added (see above) after the commit were still gone.</li>
</ol>

<p>How do I get those files back?</p>
","4","1402685","0"
"11225760","1395106","2012-06-27 12:04:20","1","88","<git><git-checkout><git-add>","when add a file to staged area, does git save the directory info?","<p>I am curious about git add action,
so I do some test.</p>

<p>create a index</p>

<pre><code>1. git init
2. mkdir mydir
3. echo ""hello"" &gt; mydir/hello
4. find .git/objects  ==&gt; nothing 
5. git add .
6. find .git/objects ==&gt; only find one file ,by cat-file,  I am sure it is hello 
</code></pre>

<p>do some change</p>

<pre><code>7. rm mydir/hello
</code></pre>

<p>get the file back</p>

<pre><code>8. git checkout mydir/hello
9. ls mydir/hello ==&gt; hello is back
</code></pre>

<p>My doubt is:
when I do <code>'git add .'</code>,there create only one blob, and not create a tree to record the direcoty 'mydir'. So,how could <code>git checkout mydir/hello</code> can find the blob ?</p>
","3","1395106",""
"65921715","5259594","2021-01-27 14:58:27","0","103","<git><gitlab><git-add>","How merging works when we use git add <filename>?","<p>Assume this is my project structure:</p>
<pre><code>- project
    - .git
    - scr
        - component
            - file.js
</code></pre>
<ul>
<li>I did clone the project</li>
<li>Made a new branch by <code>git checkout -b &quot;newBranch&quot;</code></li>
<li>Made some changes on <code>file.js</code></li>
<li>Added it to the stage by <code>git add /scr/compoent/file.js</code></li>
<li>Then committed it by <code>git commit -m &quot;some changes&quot;</code></li>
<li>Finally pushed it on the server by <code>git push origin newBranch</code></li>
</ul>
<blockquote>
<p>From the beginning of my life until now, I only was using <code>git add .</code> for adding changes to the stage. Few mins ago, for the first time, I used <code>git add file.js</code> instead.</p>
</blockquote>
<p>After those commands, I went to the <code>GitLab interface -&gt; Repasitory -&gt; File -&gt; newBranch</code> and I saw ONLY <code>file.js</code> there. Also, made a merge request by clicking on <code>create merge request</code>, then assigned it to me (myself) and put <code>master</code> as the destination branch. After merging, the project structure turned out like this:</p>
<pre><code>- project
    - .git
    - file.js              //=&gt; The file contains the changes
    - scr
        - component
            - file.js      //=&gt; This file remained untouched
</code></pre>
<p>My question is, why <code>file.js</code> is pasted in the root of the project? How can we apply changes on the real file in such cases instead of creating an instance file (containing changes) and locate it on the root?</p>
","1","5259594",""
"29533464","1614973","2015-04-09 08:26:05","3","1103","<git><version-control><git-commit><git-add>","Git add and commit all files in one _native git_ command?","<p>The most common Git command sequence is:</p>
<pre><code>git add .
git commit -m &quot;Message&quot;
</code></pre>
<p>I have searched for a native Git command to do it with one line but surprisingly could not find it. There are at least two big threads concerned with this question <a href=""https://stackoverflow.com/questions/4298960/git-add-a-git-commit-in-one-command"">HERE</a> and <a href=""https://stackoverflow.com/questions/2419249/git-commit-all-the-files-using-single-cmd"">HERE</a>, but surprisingly they have high voted answers not doing the job or doing it using additional hacks.</p>
<p>The top voted solution in the first thread linked above suggest to define a macro</p>
<pre><code>git config --global alias.add-commit '!git add -A &amp;&amp; git commit'
</code></pre>
<p>which has the downside of having to do it again and again for every new software environment. The second voted solution</p>
<pre><code>git commit -a -m &quot;message&quot;
</code></pre>
<p>does not work - it does not add new files! Other &quot;solutions&quot; involve writing the same two commands in a single line - this offers no advantage in terms of typing!</p>
<p>Further, <a href=""https://progit.org/"" rel=""nofollow noreferrer"">Pro Git</a> - one of the well-known books states on page 22:</p>
<blockquote>
<p>2.2.7 Skipping the Staging Area</p>
<p>Although it can be amazingly useful for crafting commits exactly how you want them,
the staging area is sometimes a bit more complex than you need in your workflow. If
you want to skip the staging area, Git provides a simple shortcut. Providing the -a
option to the git commit command makes Git automatically stage every file <strong>that is
already tracked</strong> before doing the commit, letting you skip the git add part...</p>
</blockquote>
<p>The emphasis is mine - this is indeed only works with files that are <strong>already tracked</strong>. But your new files are never tracked (or I can I change setting to make the being tracked?), so you can't have the added and committed using that command!</p>
<p>I am looking for a clean single line solution <strong>provided by the standard git software</strong> without additional hacks. Given so many rich advanced options of Git, it is hard to believe such a command does not exist. If there is anything I am missing here, will be happy to learn!</p>
","2","1614973",""
"11894217","220949","2012-08-10 01:19:17","5","111","<git><git-checkout><git-add>","is there a command in GIT that has the options of ""git add -p"" and ""git checkout -p"" COMBINED?","<p>I would like to issue <em>one</em> command that lets me interactively either ADD a hunk, DISCARD a hunk or leave the hunk unstaged...</p>

<p>Actually as I know of there is only:</p>

<p><code>git add -p</code>: ADDs hunks interactively (or leave unstaged) <br>
<code>git checkout -p</code>: DISCARDS hunks interactively  (or leave unstaged)</p>

<p>Is there a command in GIT that has the options of ""git add -p"" and ""git checkout -p"" COMBINED ? </p>

<p>The answer to this question provided <a href=""https://stackoverflow.com/questions/5851461/better-git-add-p"">here</a> is not at all satisfactory : (</p>
","5","220949","0"
"29593744","","2015-04-12 19:34:39","1","49","<git><git-checkout><git-stash><git-add><git-patch>","Can git break up changes by default?","<p>I like to use the <code>-p</code> flag on several git commands, such as <code>add</code>, <code>reset</code>, <code>checkout</code>, and <code>stash</code>. But git groups somewhat contiguous changes together in the same hunk. I know that <code>s</code> breaks up the changes but is there another option I could pass to have git break them up by default wherever possible?</p>
","0","",""
"11992785","1603937","2012-08-16 17:52:18","1","655","<git><msysgit><git-log><git-add>","How to Undo ""git add -A"" in uninitialized local empty repository (while keeping the files on my computer)?","<p>I just started learning Git &amp; Ruby on Rails and from the cmd prompt on my Windows 7 machine, I accidentally did a <code>git add -A</code> under my <code>C:\Users\myusername</code>. </p>

<p>All my files were added, but are untracked locally on Git. Obviously, I don't want to delete them &ndash; they are ALL my user files. However, since it is an empty repo, I can't find how to untrack them and clean up git. <code>git status</code> and <code>git log</code> responses are below.</p>

<pre><code>PS C:\Users\myusername&gt; git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
***All files listed***
nothing added to commit but untracked files present (use ""git add"" to track)

PS C:\Users\myusername&gt; git log
fatal: bad default revision 'HEAD'
</code></pre>
","6","1603937",""
"66241583","10568754","2021-02-17 12:03:06","0","868","<git><gitignore><git-add><git-rm>","Undo .gitignore changes","<p>I previously ignored a folder, but now I would like to ignore its content only: How do I remove/modify some entries from my .gitignore file so that git will track them again? I tried updating the gitignore file and adding the folder with <code>git add -f &lt;folder-name&gt;</code>, but it didn't work.</p>
<p>Thank you for your help</p>
","0","10568754","0"
"29706086","202130","2015-04-17 17:44:10","28","5995","<git><file-rename><git-add>","How to stage a rename without subsequent edits in git?","<p>I have a file that I've renamed and then edited. I would like to tell Git to stage the rename, but not the content modifications. That is, I wish to stage the deletion of the old file name, and the addition of the old file contents with the new file name.</p>

<p>So I have this:</p>

<pre><code>Changes not staged for commit:

        deleted:    old-name.txt

Untracked files:

        new-name.txt
</code></pre>

<p>but want either this:</p>

<pre><code>Changes to be committed:

        new file:   new-name.txt
        deleted:    old-name.txt

Changes not staged for commit:

        modified:   new-name.txt
</code></pre>

<p>or this:</p>

<pre><code>Changes to be committed:

        renamed:    old-name.txt -&gt; new-name.txt

Changes not staged for commit:

        modified:   new-name.txt
</code></pre>

<p>(where the similarity measure should be 100%).</p>

<p>I can't think of a straightforward way to do this.</p>

<p>Is there syntax for getting the contents of a specific revision of a specific file, and adding this to the git staging area under a specified path?</p>

<p>The delete part, with <code>git rm</code>, is fine:</p>

<pre><code>$ git rm old-name.txt
</code></pre>

<p>It's the add part of the rename I'm struggling with. (I could save the new contents, checkout a fresh copy (for the old contents), <code>mv</code> in the shell, <code>git add</code>, and then recover the new contents, but that seems like a very long way around!)</p>

<p>Thanks!</p>
","1","202130","0"
"48531321","2364393","2018-01-30 22:07:34","1","675","<git><version-control><git-add>","Difference between git add ., git add -A and git add -u","<p>What is the difference between the following commands?</p>

<ul>
<li>git add . </li>
<li>git add -A</li>
<li>git add -u</li>
</ul>

<p>I tried to execute them, and they create the same results.</p>
","1","2364393",""
"51824560","5655042","2018-08-13 14:21:14","0","298","<git><gitignore><git-add>","Git add . adds files from .gitignore","<p>if relevant: Laravel. PHP 7.0.3 </p>

<p>Hi! I had to delete 'vendor' folder in my project and do ""composer install"" to re-install all libraries. Then I modified some project's files (outside ""/vendor""). </p>

<pre><code>git status
</code></pre>

<p>showed me not only my project files being modified, but all the files inside '/vendor' being deleted and then modified.</p>

<p>After</p>

<pre><code>git add . &amp;&amp; git status
</code></pre>

<p>shows all projects modified files and all files from ""/vendor"" in the list of ""changes to be committed"".</p>

<p>My .gitignore file has a line: </p>

<blockquote>
  <p>/vendor</p>
</blockquote>

<p>And I thought that it would prevent any files in ""/vendor"" folder to be added to index and commited. But it seems to me now that all the changes in this folder are going to be committed to server which I don't want. </p>

<p>Are changes in '/vendor' folder are going to be committed and pushed to remote despite '/vendor' is in .gitignore?
If yes, how can I undo git add?:)</p>

<p>Thank you in advance.</p>

<p>I don't think my question is duplicate (I've read them). My .gitignore had /vendor in it before I deleted vendor folder and re-installed everything via composer.</p>
","7","5655042",""
"48726342","574371","2018-02-10 22:41:32","1","2321","<git><visual-studio-code><git-commit><git-add>","How to git stage an one by one the folder with files in Visual Studio Code?","<p>I have a folder with other subfolders. Then in each subfolder many files (over 1000). I want to stage, commit each subfolder at a time (not all subfolders folders at once). </p>

<p>Do I have in VSCode a way to do this easly form interface? Because I do not want to add 1000 files one by one to click the + sign.</p>
","2","574371",""
"22175152","1007758","2014-03-04 14:48:12","0","599","<git><msysgit><git-add>","Add all files in git","<p>I have this git status:</p>

<pre><code>User#/d/Work/Project/Module1/NV/build (master)$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 3 commits.
#   (use ""git push"" to publish your local commits)
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   ../../Module1/CMakeLists.txt
#       modified:   ../../Module1/Container.cpp
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>How can I add the 2 files? <code>git add -A</code> doesn't work?
I know it's possible to use the option <code>git add ../../.</code> for obvious reasons.</p>

<p>I know it's possible to add the files with a <code>git add</code> option but i can't remember it and I don't find it. I use <code>git version 1.8.1.msysgit.1</code>.</p>
","4","1007758",""
"3645467","212971","2010-09-05 08:29:39","0","168","<svn><git><git-svn><conflict><git-add>","git-svn problem with git add --patch resulting in conflicts","<p>Basically when i want to commit two separate changes in the same file that resulted from an <code>git add --patch &lt;file&gt;</code> operation, git svn rebase later on throws 1-2 conflicts upon comitting the second change when using <code>git add</code> for the second change.</p>

<p>so i'm basically doing this (i'm on master branch and have fetched the svn repository):</p>

<pre><code>git checkout -b feature
... make two unrelated changes to file test.txt...
git add --patch test.txt
... add first change but ignore second one
git commit -m ""change1""
git stash
git checkout master
git merge feature
git svn rebase
git svn dcommit
git checkout feature
git stash apply
</code></pre>

<p>now here there's two ways to do it, first the one that works:</p>

<pre><code>git add --patch test.txt
... select everything (which is the second change in this case)
git commit -m ""change 2""
git checkout master
git merge feature
git svn rebase
git svn dcommit
</code></pre>

<p>here's the one that doesn't work:</p>

<pre><code>git add test.txt #notice there's no --patch
git commit -m ""change 2""
git checkout master
git merge feature
git svn rebase #yields a conflict
</code></pre>

<p>So why is it that when using <code>git add --patch</code> for the second change, I can commit to the svn repository without problems, but when just using <code>git add</code> for the second change, it results in a conflict? I'm quite new to git, so this might be a stupid question, but as I see it, both commandsets should do exactly the same.</p>
","0","212971","0"
"3268596","370562","2010-07-16 20:23:58","98","42349","<interactive><patch><git-add>","git add --interactive ""Your edited hunk does not apply""","<p>I'm trying to use <code>git add --interactive</code> to selectively add some changes to my index, but I continually receive the ""Your edited hunk does not apply. Edit again..."" message.  I get this message even if I choose the e option, and immediately save/close my editor.  In other words, without editing the hunk at all, the patch doesn't apply.</p>

<p>Here's the exact example I'm using (I'm trying to put together a small demo):</p>

<p>Original file:</p>

<pre><code>first change
second change off branch
third change off branch
second change
third change
fourth change
</code></pre>

<p>New file:</p>

<pre><code>Change supporting feature 1
first change
second change off branch
third change off branch
second change
third change
fourth change
bug fix 1
change supporting feature 1
</code></pre>

<p>I'm trying to show how to use <code>git add --interactive</code> to only add the ""bug fix 1"" line to the index.  Running interactive add on the file, I choose the patch mode.  It presents me with </p>

<pre><code>diff --git a/newfile b/newfile
index 6d501a3..8b81ae9 100644
--- a/newfile
+++ b/newfile
@@ -1,6 +1,9 @@
+Change supporting feature 1
 first change
 second change off branch
 third change off branch
 second change
 third change
 fourth change
+bug fix 1
+change supporting feature 1
</code></pre>

<p>I respond with split, followed by ""no"" to apply the first hunk.  The second hunk, I try to edit.  I originally tried deleting the bottom line - that didn't work.  Leaving the hunk alone completely doesn't work either, and I can't figure out why.</p>
","2","370562","0"
"42293237","2713485","2017-02-17 08:45:49","4","814","<ios><git><git-add>","Why git add -A doesn't add all my png files?","<p>I have a repo containing a bunch of <code>.png</code> files. Those are organized into two subdirectories</p>

<ul>
<li><code>icon/</code></li>
<li><code>screen/</code></li>
</ul>

<p><a href=""https://i.stack.imgur.com/eFJJ8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eFJJ8.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/qquG7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qquG7.png"" alt=""enter image description here""></a></p>

<p>As you may notice, they are icons and screens for an iOS app (I don't know if it an useful info).</p>

<p>I perform a <code>git init</code> and a <code>git add -A</code>.</p>

<p>PNG files in <code>screen/</code> get tracked.
PNG files in <code>icon/</code> remain untracked.</p>

<p>This is my global <code>.gitignore</code></p>

<pre><code>*.retry

# Dropbox settings and caches
.dropbox
.dropbox.attr
.dropbox.cache

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity


# Ignore redis binary dump (dump.rdb) files

*.rdb

# cache files for sublime text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache

# workspace files are user-specific
*.sublime-workspace

# project files should be checked into the repository, unless a significant
# proportion of contributors will probably not be using SublimeText
# *.sublime-project

# sftp configuration file
sftp-config.json

# Package control specific files
Package Control.last-run
Package Control.ca-list
Package Control.ca-bundle
Package Control.system-ca-bundle
Package Control.cache/
Package Control.ca-certs/
bh_unicode_properties.cache

# Sublime-github package stores a github token in this file
# https://packagecontrol.io/packages/sublime-github
GitHub.sublime-settings

.vagrant/

# Virtualenv
# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/
.Python
[Bb]in
[Ii]nclude
[Ll]ib
[Ll]ib64
[Ll]ocal
[Ss]cripts
pyvenv.cfg
.venv
pip-selfcheck.json

# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore &amp; Swift.gitignore

## Build generated
build/
DerivedData/

## Various settings
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/

## Other
*.moved-aside
*.xccheckout
*.xcscmblueprint

*.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk
</code></pre>

<p>This is my local <code>.gitignore</code></p>

<pre><code>build/
.retry
</code></pre>

<p>I also tried to run <code>git check-ignore -v *</code> to find which <code>.gitignore</code> rule prevents icon png files to be tracked but there are no rules:</p>

<pre><code>.gitignore:1:build/ build
/Users/me/.gitignore_global:1:*.retry   copy_resources.retry
</code></pre>

<p>I also tried to inspect extended attributes using <code>ls -al@</code> but I could'nt spot any differences.</p>

<p>Can you explain why and provide a solution, please?</p>
","4","2713485",""
"22525655","1001938","2014-03-20 06:57:40","1","501","<git><git-add><git-rm>","Git deleting files without using git rm","<p>Often I'll delete a file (via Finder) while dealing with merge conflicts. When I go to conclude my merge, I try <code>git rm my_file.txt</code> and I get an error that <code>fatal: unable to stat 'my_file.txt': No such file or directory</code>. </p>

<p>Do I have to go to the CLI and always do <code>git rm my_file.txt</code>, or is there a git trick where I can mark that the file I just deleted should be removed?</p>
","0","1001938",""
"30411901","2820379","2015-05-23 11:00:58","12","2845","<git><git-add>","How to add specific files in git by their number in git status?","<p>I often encounter the following scenario:</p>

<pre><code>modified:   assembly/main.debug.s
modified:   ../src/cd/Config.java
modified:   ../src/cd/memoization/cfg/SubgraphFinder.java
modified:   ../src/cd/memoization/cfg/SubgraphMap.java
modified:   ../src/cd/profiler/Profile.java
modified:   ../test/cd/test/TestSamplePrograms.java
modified:   ../../notes/20150521.txt
</code></pre>

<p>Here I have a bunch of files and I want to include them in different commits. What I do so far is to do a bunch of <code>git add &lt;pathspec&gt;</code> followed by a respective <code>git commit</code>. The <code>&lt;pathspec&gt;</code> is what annoys me. Is there something like the following?</p>

<pre><code>1 modified:   assembly/main.debug.s
2 modified:   ../src/cd/Config.java
3 modified:   ../src/cd/memoization/cfg/SubgraphFinder.java
4 modified:   ../src/cd/memoization/cfg/SubgraphMap.java
5 modified:   ../src/cd/profiler/Profile.java
6 modified:   ../test/cd/test/TestSamplePrograms.java
7 modified:   ../../notes/20150521.txt
</code></pre>

<p><code>git magic 2,3,5 -m ""My super simple commit""</code> </p>
","12","2820379","0"
"30446281","1009091","2015-05-25 21:31:44","3","4816","<linux><git><git-commit><git-add>","git remove a file that no longer exists on the system","<p>I have never encountered this problem before and have no idea how this is possible. I had a really large directory that I downloaded by mistake into my git repo. I inadvertently did a <code>git add .</code> so the large directory got added to the working tree and when I tried to commit, it didn't allow me to, as the file was too big.
Then I didn't do a <code>git rm</code> and directly removed the file from the filesystem. The next time I tried to commit, it didn't allow me to and is still complaining that the directory (which is now no longer present on the filesystem) is too big. </p>

<p>Doesn't removing a file from the filesystem also remove it from the git working tree?</p>

<p>If there is a way to undo my last 2 commits without losing changes,and then re-push it to remote, that would be great.</p>
","0","1009091",""
"31232829","1444743","2015-07-05 17:01:20","7","1558","<git><symlink><git-add>","How to add symlinks to git repository on Windows?","<p>I compile binaries for OS X using GitHub' s electron environment and want to add the output to a git repository. </p>

<p>I tried  </p>

<pre><code>git add .
error: readlink(""sulu.app/Contents/Frameworks/Electron Framework.framework/Electron Framework""): Function not implemented
error: unable to index file sulu.app/Contents/Frameworks/Electron Framework.framework/Electron Framework
fatal: adding files failed
</code></pre>

<p>Any idea to work around this?</p>
","2","1444743","0"
"14011853","1275959","2012-12-23 14:42:32","1","678","<git-add>","git add failing because of .DS_STORE file","<p>I removed a .DS_STORE file from my local repo then I ran git add ., and I have this message : </p>

<pre><code>fatal: unable to stat '.DS_Store': No such file or directory
</code></pre>

<p>How can I manage this ?</p>
","3","1275959",""
"41012179","6521116","2016-12-07 08:01:49","2","242","<git><git-reset><git-revert><git-add>","How to undo the work after git add?","<p>There are many questions about git, so I google for a while before I asked here. I've not find any useful info.</p>

<p>Just make it easy,</p>

<pre><code>cat a.txt &gt;&gt; c.txt
git add .
cat b.txt &gt;&gt; c.txt
</code></pre>

<p>how to undo the last cat command.</p>

<p>Note here is just a simple to illustrate what I want, there are lot of modify before and after the git add.</p>

<p>The question may be duplicate, or the title is not proper, may someone helps?</p>
","3","6521116","0"
"31588719","1306132","2015-07-23 13:24:25","0","128","<git><git-add>","Git documentation: about `revert` subcommand of `git add -i`","<p><a href=""http://git-scm.com/docs/git-add"" rel=""nofollow"">Git documentation</a> about the <code>revert</code> subcommand of <code>git add -i</code>:</p>

<blockquote>
  <p><strong>revert</strong><br/>
  This has a very similar UI to update, and the staged
  information for selected paths are reverted to that <strong>of the HEAD
  version.</strong></p>
</blockquote>

<p>Maybe I incorrectly understand this text... I understand this like:</p>

<blockquote>
  <p><code>revert</code> does the same like <code>git checkout -- file_name</code>.</p>
</blockquote>

<p>But at practice I see <code>revert</code> only removes file from the staging area. Did I incorrect translat, or it is incorrect text in the documentation?</p>
","0","1306132",""
"32211989","1181574","2015-08-25 19:01:28","1","77","<git><git-add>","How do I avoid the `update-index` operation during a `git add -i`?","<p>I have a considerably large Git repository. As such, I try very hard to avoid running any Git operations which are slow.</p>

<p>For example, my <code>status</code> command is always something like <code>git status -uno -- &lt;dir&gt;</code> which completes nicely within a second (versus <code>git status -u</code> from the root directory which can take up to a minute).</p>

<p>Unfortunately, I have found using <code>git add -i</code> falls into the bucket of ""way too slow to be useful"". I can trace the command execution, and it seems most of the time is spent in the <code>update-index</code> operation. And no matter what pathspec I provide on the command line, the operation is always performed on the entire workspace.</p>

<p>I would love to use interactive mode while adding files to the index. Is there any way to avoid the full <code>update-index</code> operation or otherwise speed this up?</p>

<pre><code>$ cd cm/
$ GIT_TRACE=1 git add -u -p -- my_file
trace: built-in: git 'add' '-u' '-p' '--' 'my_file'
trace: run_command: 'add--interactive' '--patch' '--' 'cm/my_file'
trace: exec: 'git' 'add--interactive' '--patch' '--' 'cm/my_file'
trace: exec: 'git-add--interactive' '--patch' '--' 'cm/my_file'
trace: run_command: 'git-add--interactive' '--patch' '--' 'cm/my_file'
trace: built-in: git 'rev-parse' '--show-prefix'
trace: built-in: git 'config' '--get-colorbool' 'color.interactive' 'true'
trace: built-in: git 'config' '--get-color' 'color.interactive.prompt' 'bold blue'
trace: built-in: git 'config' '--get-color' 'color.interactive.header' 'bold'
trace: built-in: git 'config' '--get-color' 'color.interactive.help' 'red bold'
trace: built-in: git 'config' '--get' 'color.interactive.help'
trace: built-in: git 'config' '--get-color' 'color.interactive.error' 'red bold'
trace: built-in: git 'config' '--get-colorbool' 'color.diff' 'true'
trace: built-in: git 'config' '--get-color' 'color.diff.frag' 'cyan'
trace: built-in: git 'config' '--get-color' 'color.diff.plain' ''
trace: built-in: git 'config' '--get-color' 'color.diff.old' 'red'
trace: built-in: git 'config' '--get-color' 'color.diff.new' 'green'
trace: built-in: git 'config' '--get-color' '' 'reset'
trace: built-in: git 'config' '--bool' '--get' 'interactive.singlekey'
trace: built-in: git 'rev-parse' '--git-dir'
trace: built-in: git 'update-index' '--refresh'
^C
</code></pre>
","3","1181574","0"
"4613500","133234","2011-01-06 09:35:47","8","7136","<git><git-add><git-rm>","After git rm file; commit -- how to get file back from the remote branch?","<p>I was pulling in my .emacs directory, and hit the following conflict:</p>

<pre><code>CONFLICT (add/add): Merge conflict in elisp/dired-details+.el
</code></pre>

<p>Git status showed the following:</p>

<pre><code> Unmerged paths:
 #   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
 #  both added:         elisp/dired-details+.el
</code></pre>

<p>Okay, so git suggested using <code>git rm</code>.  I want to completely replace the local file with the file I'm pulling in, so it seems kind of sort of sensible...  So I do <code>git rm elisp/dired-details+.el</code> and <code>git merge</code>. I get: </p>

<p><strong>git merge: fatal: You have not concluded your merge (MERGE_HEAD exists). Please, commit your changes before you can merge.</strong></p>

<p>Okay, fine: <code>git commit -a -m ""ugh merge conflicts""</code>; <code>git pull origin master</code>.</p>

<p>Now everything merges fine, except for I am missing <code>dired-details+.el</code>, I am kind of confused, and I would like to know the answers to the following:</p>

<ol>
<li>How do I undo <code>git-rm</code> and get that file from the remote branch?..</li>
<li>Why was there a conflict in the first place?..  What's going on here with <code>add/add</code>?..</li>
<li>What should I have done instead of <code>git-rm</code>'ing the file I wanted to replace?..</li>
</ol>
","0","133234","0"
"49608465","997606","2018-04-02 09:14:54","1","608","<git><binaryfiles><git-add>","Why doesn't git add --patch work with git add -N of a binary file?","<p><code>git add --patch</code> doesn't work with binary files added with <code>git add -N</code>.  Does anyone know why?  In the following example you can see that <code>git add --patch</code> picks up the text file <code>a</code> but not the binary file <code>0</code>.</p>

<pre><code>echo a &gt; a
echo '\0' &gt; 0
git add -N 0
git add -N a

git add --patch
diff --git a/a b/a
index e69de29..7898192 100644
--- a/a
+++ b/a
@@ -0,0 +1 @@
+a
Stage this hunk [y,n,q,a,d,/,e,?]? y 
</code></pre>
","0","997606",""
"67317843","9608759","2021-04-29 12:55:41","1","63","<git><git-reset><git-add><git-patch>","Is it possible to undo a `git add` and go to the exact same staging index as before?","<p>I was trying to split my work into multiple commits. I have done this:</p>
<pre><code>git add --patch my_file
# accepted, rejected, manually edited many hunks
# ---&gt;
# now my silly mistake comes
git add my_file
git commit -m &quot;some commit message&quot;
</code></pre>
<p>I shouldn't have add that file as my changes are already on the staging index. Can I go back to that state (marked as <code>---&gt;</code> above)?</p>
","10","9608759",""
"32312610","745903","2015-08-31 13:36:15","0","75","<git><version-control><git-commit><git-add>","Can I make git reject an all-commit if I have before manually added files?","<p>Most of the time, I commit with <code>git commit -am</code>, because all I've done to the project belongs to the commit I'm working on.</p>

<p>Only sometimes, there are some changes I do not want to commit, so I use <code>git add -p</code> to stage only what I really want. Trouble is, I'm so used to typing <code>git commit -am</code> that I usually end up doing it anyway. I then get a commit with stuff I didn't want, and have to laborously go back to <code>HEAD^</code>, and also re-do the <code>add -p</code>.</p>

<p>Clearly, when some changes have already been added manually, <code>commit -am</code> doesn't make sense anymore. Is there a way to prevent git from accepting the option in this case (or some alternative to <code>-am</code> that is just as convenient)?</p>
","0","745903",""
"41539643","7392328","2017-01-09 01:04:08","-1","81","<git><git-add>","can't git add . files, how do i git add , the right way?","<p>Hi I am new on ruby on rails, I am creating an app with the ruby on rails version 3. I am having trouble, I have a lot of files to add. I type command <code>git status</code> and the following comes up , then I typed <code>git add .</code> and nothing happens. What am I missing?</p>

<blockquote>
  <p>$ git status</p>
  
  <p>On branch master
  Untracked files:
   (use ""git add ..."" to include in what will be committed)</p>
</blockquote>

<pre><code>.CFUserTextEncoding
.DS_Store
.bash_history
.bash_profile
.bash_sessions/
.bashrc
.bundle/
.cache/
.config/
.gem/
.gitconfig
.heroku/
.local/
.mkshrc
.mplayer/
.netrc
.node-gyp/
.npm/
.oracle_jre_usage/
.profile
.rvm/
.ssh/
.subversion/
.viminfo
.zlogin
.zshrc
Applications/
Desktop/
Documents/
Downloads/
FrostWire/
Library/
Movies/
Music/
Pictures/
Public/
RubymineProjects/
homebrew/
keys.txt
workspace/
</code></pre>
","7","7392328",""
"4090365","262667","2010-11-03 18:31:29","5","269","<git><conflict><git-add>","git: store different stages of a file in the index/working tree after conflict","<p>Assume one file is in conflict state with git.</p>

<p>It means that the index contains 3 versions of the file, the previous one, the one from one branch, the one from the other branch.</p>

<p>I would like to checkout version 3 (""theirs"") in the working directory, and stage version 2 (""ours"") in the index.</p>

<p>Is there a painless way to do that?</p>
","1","262667","0"
"43290841","3983454","2017-04-08 06:14:25","1","135","<git><github><git-add>","how to un-do git add --all followed by multiple commits","<p>I accidentally used <code>git add --all</code> earlier, then made several commits, and it's attempting to add several large files that should be ignored. </p>

<p>Now upon any commit, it shows 'this exceeds GitHub's file size limit of 100.00 MB'. I tried git --reset but it shows Your branch is ahead of 'origin/master' by 2 commits. How to get git back to normal again? Many thanks.</p>
","5","3983454",""
"24916186","1264804","2014-07-23 16:38:36","51","53584","<git><git-checkout><git-add>","How to do 'git checkout --theirs' for multiple files (or all unmerged files)","<p>Say I have this after attempting a merge and upon entering <code>git status</code>:</p>

<pre><code># Unmerged paths:
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   added by them: myfile1.xhtml
#   added by them: myfile2.xhtml
#   added by them: myfile3.xhtml
</code></pre>

<p>... and I know I want to do this for each of those files:</p>

<pre><code>git checkout --theirs myfile1.xhtml
git add myfile1.xhtml
</code></pre>

<p>... but there are many of them. How might I do them as a batch?</p>
","0","1264804","0"
"50108052","9458257","2018-04-30 20:51:41","0","54","<git><github><git-submodules><git-add>","undo submodule and make it a directory to a github repository","<p>I cloned a repository from github, and I would like to make it a directory in an other github repository. Though it is considered as a submodule (and I don't want it to be a submodule, but a directory). 
In this directory i have some script that I would like to push on my github repository.</p>

<p>When i do : <code>git status</code> i get this error message:</p>

<pre><code>On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)

    modified:   my_directory (untracked content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I tried to do <code>git add .</code> ; <code>git add my_directory</code> and to commit it, but it's not working neither.</p>

<p>I don't find any .gitignore or .gitmodules...</p>

<p><strong>edit :</strong></p>

<p>finally i find how to do what i want, i had to delete the .git that was in my directory. Though it was an invisible file...
Once this was done, i just had to do <code>git commit -a</code> and then <code>git push</code></p>
","0","9458257",""
"14852266","1722227","2013-02-13 11:16:25","1","95","<git><git-clone><git-add>","Some folders are empty while cloning after a git add -A","<p>I created some repository in Git and added repos as submodules.</p>

<p>In the submodule repo i added contents.( folders and files).After that i did </p>

<pre><code>git add -A
git commit -m ""message""
git push origin master.
</code></pre>

<p>After that i tried to clone the repo from some other place. I am able to clone the repo and I can see all the folders.But some folders are empty.</p>

<p>How to resolve this issue?</p>
","1","1722227","0"
"15542571","2043459","2013-03-21 08:29:26","4","13137","<git><ubuntu><terminal><git-add>","How to add multiple files in git","<p>I have 4 files in a folder. I have modified 3 of them. How do I add and push only the modified  files all at once. Will ""git add ."" work here.</p>
","2","2043459","0"
"15594419","1350248","2013-03-24 02:14:20","4","1809","<git><git-add>","GIT - git-add error (Bad File Number)","<p>I'm using Git to create a backup system. </p>

<p>I've just created the directory and initialized git on it. </p>

<pre><code>git init
</code></pre>

<p>When I tried to add the untracked files to the stage with</p>

<pre><code>git add -u *.pdf
</code></pre>

<p>I get this response error:</p>

<blockquote>
  <p>sh.exe"": /bin/git: Bad file number</p>
</blockquote>

<p>As additional information, I have a list of ~4500 untracked files and if I try to add the files one by one, I don't get any error response and the files are sent to the stage.</p>

<p>Does anyone know how to solve this problem and why it happens? I need to add all these untracked files, but I don't want to do that in a ""monkey job"" way, adding one by one.</p>
","1","1350248","0"
"15922860","1057545","2013-04-10 10:07:03","0","109","<git><gitignore><git-commit><git-add>","git- filter certain file","<p>I have a constants file, this file is needed but every developer keeps changing this for his environment and often pushes this changed file. Is there a way that there can be a filter where in this constants file will not get added/pushed.
.gitignore does not help as we need that file in the repo with the default configuration for someone who clones the project afresh. I just want to keep it out of the developers commit changes
Asking every developer not to add this constant file in this commit and enforcing this is other dirty way</p>

<p>regards,
Harsha</p>
","0","1057545",""
"16068968","2153622","2013-04-17 19:51:37","13","15128","<git><git-add><git-untracked>","Is it possible to skip the staging area and (also) commit untracked, new files to git?","<p>Is it possible to <strong>skip the staging area</strong> and (also) commit <strong>untracked, new files</strong> to git in a single built-in, command-line command ? If not, what are the alternatives ? </p>

<p><a href=""http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository"" rel=""noreferrer"">http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository</a></p>

<blockquote>
  <p>Providing the -a option to the git commit command makes Git
  automatically stage every file that is already tracked before doing
  the commit, letting you skip the git add part:</p>
  
  <p><code>$ git commit -a -m 'added new benchmarks'</code></p>
</blockquote>

<p>Thanks.</p>
","2","2153622","0"
"16969768","2162928","2013-06-06 18:43:30","83","100176","<git><command-line-interface><git-add>","What does the 'git add .' ('git add' single dot) command do?","<p>I don't get what the Git command means, when adding files to the stage with the use of a period (or full stop, single dot):</p>

<pre><code>$ git add .
</code></pre>

<p>What does this do?</p>
","1","2162928","0"
"33780904","2970348","2015-11-18 13:06:26","0","51","<git><git-add>","How to tweak the line numbers for git add -p","<p>I'm trying to remove the <code>import sys</code> and <code>import os</code> lines from one hunk of my script:</p>

<pre><code>diff --git a/GFF/fastas2GFF.py b/GFF/fastas2GFF.py
old mode 100644
new mode 100755
index 88850cd..8226717
--- a/GFF/fastas2GFF.py
+++ b/GFF/fastas2GFF.py
@@ -1,13 +1,22 @@
+#!/usr/bin/env python
+#fastas2GFF.py gets a multisequence FASTA file and outputs a GFF file
+import sys
+import os
 from Bio import SeqIO
 from Bio.Seq import Seq

-def map_bowtie(f, index_name):
-    handle = open(f, 'rU')
+if len(sys.argv) != 3:
+    sys.exit('Usage: %s &lt;fasta_file&gt; &lt;bt2_index_name&gt;' % sys.argv[0])
+
+def map_bowtie(input_file, index_name):
+    handle = open(input_file, 'rU')
     dna = list(SeqIO.parse(handle, 'fasta'))
     handle.close()
     map_dict = {}
     counter = 1 #To comply with the GFF format file specifications needs to start at 1
-    cat_genes = open(f + '.seq', 'a')
+
+    output_fasta_file = os.path.splitext(input_file)[0] + '.concatenated.fasta'
+    cat_genes = open(output_fasta_file, 'a')
     cat_genes.write('&gt;' + index_name + '\n') #FASTA header

     seqid_counter = 1 #To order the output of the sequence
@@ -16,7 +25,6 @@ def map_bowtie(f, index_name):
         gene_len = len(str(sequence.seq))

         description = list()
-        
         description.append(index_name) #bowtie index name
         description.append('beja_lab') #source of the sequence
         description.append('CDS') #Feature type: This can be exon, promotor, etc for us CDS it's ok i guess
@@ -25,8 +33,7 @@ def map_bowtie(f, index_name):
         description.append('.') #score ???
         description.append('+') #strand
         description.append('.') #score ???
-        description.append('GeneID '+ sequence.id + ' ' + str(seqid_counter).zfill(4)) #CDS0001, CDS0002, etc
-        
+        description.append('GeneID '+ sequence.id)# + ' ' + str(seqid_counter).zfill(4)) #CDS0001, CDS0002, etc
         description.append('\n')

         map_dict[seqid_counter] = description
@@ -34,7 +41,13 @@ def map_bowtie(f, index_name):
         counter += (gene_len)
         cat_genes.write(str(sequence.seq))

-    with open(f + '.map', 'w') as m:
+    output_gff_file = os.path.splitext(input_file)[0] + '.GFF2'
+    with open(output_gff_file, 'w') as m:
         m.write('##gff-version 2\n')
         m.writelines('\t'.join(map(str,map_dict[k])) for k in map_dict.keys())
     return
+
+fasta_file = sys.argv[1]
+bt2_index = sys.argv[2]
+
+map_bowtie(fasta_file, bt2_index)
</code></pre>

<p>After <code>git add -p</code> I ignore the mode change. Then I split this hunk:</p>

<pre><code>@@ -1,13 +1,22 @@
+#!/usr/bin/env python
+#fastas2GFF.py gets a multisequence FASTA file and outputs a GFF file
+import sys
+import os
 from Bio import SeqIO
 from Bio.Seq import Seq

-def map_bowtie(f, index_name):
-    handle = open(f, 'rU')
+if len(sys.argv) != 3:
+    sys.exit('Usage: %s &lt;fasta_file&gt; &lt;bt2_index_name&gt;' % sys.argv[0])
+
+def map_bowtie(input_file, index_name):
+    handle = open(input_file, 'rU')
     dna = list(SeqIO.parse(handle, 'fasta'))
     handle.close()
     map_dict = {}
     counter = 1 #To comply with the GFF format file specifications needs to start at 1
-    cat_genes = open(f + '.seq', 'a')
+
+    output_fasta_file = os.path.splitext(input_file)[0] + '.concatenated.fasta'
+    cat_genes = open(output_fasta_file, 'a')
     cat_genes.write('&gt;' + index_name + '\n') #FASTA header

     seqid_counter = 1 #To order the output of the sequence
</code></pre>

<p>And get the one that I want to modify (remove the <code>import sys</code> and <code>import os</code>):</p>

<pre><code>Split into 3 hunks.
@@ -1,3 +1,7 @@
+#!/usr/bin/env python
+#fastas2GFF.py gets a multisequence FASTA file and outputs a GFF file
+import sys
+import os
 from Bio import SeqIO
 from Bio.Seq import Seq

Stage this hunk [y,n,q,a,d,/,K,j,J,g,e,?]? 
</code></pre>

<p>The edited hunk that is being rejected is this one:</p>

<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -1,3 +1,5 @@
+#!/usr/bin/env python
+#fastas2GFF.py gets a multisequence FASTA file and outputs a GFF file
 from Bio import SeqIO
 from Bio.Seq import Seq

# ---
</code></pre>

<p>From reading <a href=""https://stackoverflow.com/a/3270837/2970348"">this answer</a> I suppose my problem is with the <code>@@ from-file-range to-file-range @@</code> line, but I can't set the correct ranges.</p>
","3","2970348","0"
"50891512","2571049","2018-06-16 20:27:50","4","1114","<git><diff><pandoc><git-diff><git-add>","git diff not working with Word document, --intent-to-add, and pandoc diff driver","<p>Several tutorials (<a href=""http://blog.martinfenner.org/2014/08/25/using-microsoft-word-with-git/"" rel=""nofollow noreferrer"">[1]</a>, <a href=""https://github.com/vigente/gerardus/wiki/Integrate-git-diffs-with-word-docx-files"" rel=""nofollow noreferrer"">[2]</a>, <a href=""http://hrishioa.github.io/tracking-word-documents-with-git/"" rel=""nofollow noreferrer"">[3]</a>) that can be found on the internet suggest the following configuration for diffing Word documents tracked by <code>git</code>.</p>

<ol>
<li><p>Configure a ""pandoc"" diff driver with the following settings:</p>

<pre><code>[diff ""pandoc""]
    textconv=pandoc --to=markdown
    prompt = false
</code></pre></li>
<li><p>Add the following to your <code>.gitattributes</code> file:</p>

<pre><code>*.docx diff=pandoc
</code></pre></li>
</ol>

<p>This seems to work fine except when trying to diff an untracked Word document after indicating intent to add it to the git repository. Does anyone know why this isn't working in this case?</p>

<p>Here are the steps to reproduce, assuming the following configuration detailed above.</p>

<ol>
<li><p>Create a Word document in a git repository</p>

<pre><code>touch my_document.docx
</code></pre></li>
<li><p>Open the file in Microsoft Word, add some content to the Word document (<em>e.g</em>, the characters ""asdf""), and save it</p></li>
<li><p>Indicate your intent to add the document</p>

<pre><code>git add -N my_document.docx
</code></pre></li>
<li><p>Try to see the diff:</p>

<pre><code>git diff my_document.docx
#&gt; couldn't parse docx file
#&gt; fatal: unable to read files to diff
</code></pre></li>
</ol>

<p>With <code>git</code> version 2.17.1 on macOS, I end up with a ""fatal: unable to read files to diff"" error. However, just adding the file to the index and then running <code>git diff --cached</code> results in the following diff:</p>

<pre><code>diff --git a/my_document.docx b/my_document.docx
new file mode 100644
index 0000000..17f1b0d
--- /dev/null
+++ b/my_document.docx
@@ -0,0 +1 @@
+asdf
</code></pre>

<p>Why doesn't the diff driver work with <code>git add -N</code>?</p>
","4","2571049",""
"18217533","1291122","2013-08-13 19:28:27","0","3235","<git><filesystems><git-add>","Unable to do ""git add .""","<p>I was able to add my directory to git and do a git commit but strangely, when I am doing</p>

<pre><code>$ git add .
</code></pre>

<p>I am getting the following error:</p>

<pre><code>warning: LF will be replaced by CRLF in .idea/workspace.xml.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in grails-app/controllers/com/abc/pqr/Rep
ortController.groovy.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in grails-app/domain/com/abc/pqr/Report.g
roovy.
The file will have its original line endings in your working directory.
fatal: unable to stat 'Dirname#com.abc.pqr.Report': No such file or directo
ry
</code></pre>

<p>I have already gone through <a href=""https://stackoverflow.com/a/14161298/1291122"">this</a> SO answer and if I try:</p>

<pre><code>$ git rm Dirname#com.abc.pqr.Report
</code></pre>

<p>I get this error:</p>

<pre><code>fatal: pathspec 'Dirname#com.abc.pqr.Report' did not match any files
</code></pre>

<p>Surprisingly there is no file as on searching through above directory, I do not find any such file as described above. </p>

<p>It is worth mentioning that there was a file Dirname/#com.abc.pqr.Report in the root directory(i.e. file #com.abc.pqr.Report under Dirname under the root directory). Which I was strangely not able to delete, an issue similar to <a href=""http://answers.microsoft.com/en-us/windows/forum/windows_7-files/cannot-delete-file-says-item-not-found-could-not/54d74f22-695d-4be3-8639-12f268680b00"" rel=""nofollow noreferrer"">this</a>(I am using windows-7 os) and I could resolve it using <a href=""https://superuser.com/a/174699"">this</a>.But ever since I (accidentaly through a buggy grails script) created the above file, I have not been able to do the `git add .</p>
","5","1291122",""
"34906054","2605112","2016-01-20 17:00:38","0","110","<git><github><git-pull><git-filter-branch><git-add>","How to remove file from remote repo without doing anything locally in git?","<p>Here's my situation:</p>

<p>I wanted to do a once-and-done push to a git repo.  So, I did the <code>add</code>, <code>commit</code>, and <code>push</code> as usual.  Except, I forgot that I had other files in previous commits that also got pushed.  So, now there are unnecessary files contaminating the repo (remotely) that I pushed to.  I want to remove those unnecessary files.</p>

<p>I don't want to pull from the remote repo because I'm not interested in getting any of those files.  So, I effectively want to do something like a <code>git filter-branch</code> but only on the remote repo.  </p>

<p>How do I remove files from the remote repo without pulling/pushing again locally?</p>
","0","2605112",""
"18424943","1106160","2013-08-25 01:58:44","19","16467","<git><git-add>","Undo multiple file and folder 'git add'","<p>I executed  </p>

<pre><code>git add .
</code></pre>

<p>and now I want to revert that git add. How can I accomplish that? </p>
","1","1106160","0"
"41917746","1710245","2017-01-29 04:56:54","1","360","<git><interactive><git-add>","git bash shell on Windows ""Your edited hunk does not apply""","<p>I have a very frustrating error when trying to manually edit hunks while using the command:</p>

<pre><code>git add -p
</code></pre>

<p>I have already looked through many of the existing questions on this site, including <a href=""https://stackoverflow.com/questions/3268596/git-add-interactive-your-edited-hunk-does-not-apply"">this one</a>, and <a href=""https://stackoverflow.com/questions/9500645/editing-git-patch-gives-your-edited-hunk-does-not-apply"">this one</a>. </p>

<p>I am at the point where I try to manually edit a hunk, <strong>make no changes</strong> to the file opened by git for manual editing, and still getting the error ""Your edited hunk does not apply"". </p>

<p>I thought this might have to do with CRLF vs. LF EOL characters. I am editing in Notepad++, and I can see that all of my line endings are CRLF. I naively tried to change all the line endings to LF, but to no avail. </p>

<p>I can also see that all context lines have leading spaces, so that isn't the issue either. Furthermore, I have:</p>

<pre><code>git --global core.autocrlf
</code></pre>

<p>set to <code>true</code>.</p>

<p>Any help is greatly appreciated.</p>

<hr>

<p><strong>Edit:</strong> According to VonC's answer, in my specific case I have a permission + content diff. Does this still mean I cannot do:</p>

<pre><code>git add -p
</code></pre>

<p>If it were only a permission diff, I understand why this wouldn't be necessary, and the interactive option must be dropped; but in this case, is there a way to still do an interactive <code>add</code>?</p>
","10","1710245","0"
"41972175","1710245","2017-02-01 04:57:06","2","608","<git><shell><interactive><git-add>","git bash shell on Windows “Your edited hunk does not apply” (continued)","<p>Not too long ago, I asked <a href=""https://stackoverflow.com/questions/41917746/git-bash-shell-on-windows-your-edited-hunk-does-not-apply?noredirect=1#comment71040215_41917746"">this question</a>. I received an answer, but it did not solve the issue I was having, so I was advised to create a new question with more detail.</p>

<p>Just to reiterate, I am getting an error when trying to manually edit a hunk in the Git bash shell on Windows, when using <code>git add -p</code> (specifically, I press <code>e</code> when prompted by the interactive command). This opens an edit file for the hunk in Notepad++ (my default .txt editor). Even <strong>without making any changes</strong> to this file, I am given the error:</p>

<blockquote>
  <p>Your edited hunk does not apply</p>
</blockquote>

<hr>

<p>As a minimal example, I have created a repo, value of <code>git config core.autocrlf</code> is <code>false</code> (I've also tried the following with value set to <code>true</code>). I have a .txt file (<code>foobar.txt</code>), I write <code>foo</code> in it, and commit my changes. Then I change the contents of the file to:</p>

<pre><code>foo 
bar
</code></pre>

<p>and then close the file. I then do <code>git add -p foobar</code>, and am prompted (not sure why the diff didn't work out cleanly in this case, but it generally does work for me):</p>

<pre><code>diff --git a/foobar b/foobar
index 1910281..a907ec3 100644
--- a/foobar
+++ b/foobar
@@ -1 +1,2 @@
-foo
\ No newline at end of file
+foo
+bar
\ No newline at end of file
Stage this hunk [y,n,q,a,d,/,e,?]?
</code></pre>

<p>to which I answer <code>e</code>. Again, without making any changes I get the error:</p>

<pre><code>error: patch failed: foobar:1
error: foobar: patch does not apply
Your edited hunk does not apply. Edit again (saying ""no"" discards!) [y/n]?
</code></pre>

<hr>

<p>Of course, I have also tried making changes to the manual hunk edit file; for example, the edit file will initially look like:</p>

<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -1 +1,2 @@
-foo
\ No newline at end of file
+foo
+bar
\ No newline at end of file
# ---
# To remove '-' lines, make them ' ' lines (context).
# To remove '+' lines, delete them.
# Lines starting with # will be removed.
#
# If the patch applies cleanly, the edited hunk will immediately be
# marked for staging. If it does not apply cleanly, you will be given
# an opportunity to edit again. If all lines of the hunk are removed,
# then the edit is aborted and the hunk is left unchanged.
</code></pre>

<p>A sample edit would be:</p>

<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -1 +1,1 @@
-foo
\ No newline at end of file
+foo
\ No newline at end of file
# ---
# To remove '-' lines, make them ' ' lines (context).
# To remove '+' lines, delete them.
# Lines starting with # will be removed.
#
# If the patch applies cleanly, the edited hunk will immediately be
# marked for staging. If it does not apply cleanly, you will be given
# an opportunity to edit again. If all lines of the hunk are removed,
# then the edit is aborted and the hunk is left unchanged.
</code></pre>

<hr>

<p>Another interesting point is that I have a developer's release of Windows, which allows me to use ""Bash on Ubuntu on Windows"". Using <code>git add -p</code> through this utility, and then trying to manually edit hunks, will work... so my question is, why does it not work on Git bash shell for me...?</p>
","0","1710245","0"
"35025048","2441230","2016-01-26 22:12:01","2","465","<git><git-add>","Git add all files also from nested git repos","<p>My dotfiles repository has some tmux plugin directories which are themselves git repositories. When I do git add -all these nested repos are ignored.</p>

<p>Is there a way to ignore the git semantics of these nested repos and treat everything as regular files?</p>
","0","2441230",""
"22977929","703308","2014-04-10 03:07:18","2","1838","<git><git-reset><git-add>","How could git reset --soft reset last commit without touching index file?","<p>This might be a noob question. </p>

<p>Suppose I have a Git repo which already have some files in the staged area by using git add. and then I do a <code>git reset --soft @~</code></p>

<p>I am happy to see some files I committed last time are put into staged area now.</p>

<p>But how? I check <code>.git</code> folder. the only thing changed are ref of current branch. and one ""ORIG_HEAD"" which I think is not relevant. the most suspicious index file is not touched at all. and also can anyone tell me how to view the content of it? </p>

<p>So how could git do this? Thanks.</p>
","0","703308",""
"23003118","1133318","2014-04-11 03:47:43","36","16455","<git><git-add>","Any difference between git add . and git add --all?","<p>Is there any difference between:</p>

<pre><code>git add .
</code></pre>

<p>and</p>

<pre><code>git add --all
</code></pre>

<p>?</p>
","1","1133318","0"
"23242827","771650","2014-04-23 11:23:43","4","1634","<git><merge><addition><merge-conflict-resolution><git-add>","Why do I need to do a 'git add <files>' after resolving merge conflicts?","<p>I've come here even after looking at this link - <a href=""https://stackoverflow.com/questions/161813/how-do-i-fix-merge-conflicts-in-git"">How to resolve merge conflicts in Git?</a>
and many other links. Everywhere, it is mentioned that you need to do a 'git add' after resolving the conflicts in a text editor.</p>

<p>I've been using git for a few years now, and have managed to not use merge too often. So, every once in a while, I have to google the method to resolve after merge.</p>

<p>Hence, I think I haven't understood some part of git (or 'git add') that makes me forget that I need to do a 'git add'. Can anyone explain/point out to me what I am missing so that the next time I merge, doing a 'git add' is the logical thing to do after resolving conflicts?</p>
","0","771650","0"
"23258338","","2014-04-24 01:45:43","0","105","<git><continuous-integration><file-permissions><travis-ci><git-add>","Error with adding all files with git","<p>I have tried to use git add -A to add all of my files to commit in the past, but now, it does not work anymore. </p>

<p>When I perform the command, the console prints out:</p>

<pre><code>fatal: pathspec '.' did not match any files on branch master
</code></pre>

<p>Any input on why this could be happening? Could this be a file permissions issue?</p>

<p>Some extra information: this is being built on Travis-CI.</p>
","4","",""
"60706929","13070739","2020-03-16 13:30:32","1","53","<gitignore><git-add>","Git add is ignoring certain files even when .gitignore does not exist","<p>I am facing a rather strange issue with my git working folders. Here's the summary:</p>

<ul>
<li><p>I previously had a local git repo with a .gitignore file that ignored certain files/folders.</p></li>
<li><p>I deleted the repo (.git folder) and also the .gitignore file</p></li>
<li><p>Then I initialized a new one with git init in the same folder. Now when I do a ""git add ."", the previous ignore pattern is retained for some reason.</p></li>
<li><p>Even stranger,this happens with any new project following the same folder structure no matter where I place the project on my computer. </p></li>
<li><p>I tried deleting and recreating the files multiple times. I even created a new .gitignore file with a different pattern. It does not seem to have an effect except when it is set to ignore everything (with just * in the file)</p></li>
</ul>

<p>My guess is that the .gitignore pattern I deleted is somewhere saved that I dont know the location of. If anyone has faced a similar issue or know what I could be missing, I'd love to know. 
I am still new to git. Sorry if this is something very obvious that I have missed out on. </p>

<p>UPDATE:
I still have not found the reason for this behaviour but managed to reset everything by doing 'git add --force .' in the directory and then deleting the repo. Now I initialized a new repo that works as expected. </p>
","6","13070739",""
"60709856","13071709","2020-03-16 16:38:55","1","386","<git><hook><git-stash><git-add><pre-commit>","git pre-commit hook: interaction between git add -p and git stash","<p>I have written a git pre-commit hook which does the following:</p>

<ol>
<li>Stash any changes that are not staged for commit</li>
<li>Run tests</li>
<li>Unstash changes</li>
</ol>

<p>The purpose is to prevent false-positives or false-negatives on passing tests/compiling when staged changes depend on unstaged changes.  Generally, the hook works very well and has caught many mistakes on my part.</p>

<p>However, as implemented it does not interact well with <code>git add -p</code>:</p>

<ol>
<li>Stage changes with <code>git add -p</code> and then <code>git commit</code></li>
<li>Script runs: <code>git stash push -m ""pre-commit-${DATE} on ${BRANCH}"" -k -u -q</code></li>
<li>tests pass/fail</li>
<li><code>git stash pop -q</code> is run and results in a conflict, ruining my day and aborting the commit</li>
</ol>

<p>My workaround has essentially been to either use <code>git commit --no-verify</code> or stash things myself if I ever use <code>git add -p</code>.  However I am updating my git hooks and I'd like to <strong>update or replace the stash functionality to allow me to run tests on only staged changes while no longer conflicting with <code>git add -p</code>.</strong>  Is there a way to:</p>

<ul>
<li>pre-determine if a stash will conflict and defer it to after the commit is generated</li>
<li>use a mechanism other than stash that works well in a <code>pre-commit</code> script</li>
<li>""abort"" the pop if a merge conflict happens</li>
</ul>
","2","13071709",""
"60730176","6041641","2020-03-17 21:02:31","1","845","<git><git-submodules><git-add>","How do I ""git add"" a modified submodule into the main module?","<p>I modified, added, committed and pushed a change to a submodule, then went up to the main module directory and ran:</p>

<pre><code># git status
...
Changes not staged for commit:
...
modified:   deps/gr-d13 (modified content, untracked content)
...

# git add deps/gr-d13
(no errors)
# git status
...
Changes not staged for commit:
...
modified:   deps/gr-d13 (modified content, untracked content)
...
</code></pre>

<p>Exactly the same as before.  My submodule was not staged.  Why not?</p>

<p>Both main and submodule are on the same branch.</p>
","2","6041641",""
"43816585","7971661","2017-05-06 04:02:33","2","100","<git><github><git-add>","git add or untracked file cancel","<p>I have some questions about <code>undo git add</code> and <code>git reset</code>.</p>

<p>Recently I made some mistakes. <br>
First, I added all directory's files. And I want to cancel added. Then, some of the directories are removed after I wrote a <code>git rm-</code> command. <br>
Second, Still, several <code>Untracked Files</code> are maintained. And I found solutions. And I did <code>git reset</code>. but, it's still maintained.</p>

<p>In colclusion, I could't recover some of the directories and so many <code>Untracked Files</code> are maintained to <code>Untracked Files</code> status.</p>

<p>How can I solve this problem? 
<br>
At least, I hope to cancel <code>Untracked Files</code>.<br></p>

<p>Untracked files status
<img src=""https://i.stack.imgur.com/SIwgU.png"" alt=""it&#39;s my Untracked files status""></p>
","0","7971661","0"
"62680778","875915","2020-07-01 15:59:39","0","303","<git><git-add><git-patch>","""error: ... patch does not apply"" when editing hunk with ""git add -p""","<p>tldr: why am I getting <code>error: ... patch does not apply</code> when editing a hunk and removing a line, even though it looks like it should work?</p>
<p>I'm editing a hunk while doing <code>git add -p</code>, where I want to only add <code>new line 1</code> (and not add <code>new line 2</code>):</p>
<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -1 +1,3 @@
 first line
+new line 1
+new line 2
# ---
# To remove '-' lines, make them ' ' lines (context).
# To remove '+' lines, delete them.
# Lines starting with # will be removed.
</code></pre>
<p>I changed the <code>+</code> to a space <code> </code> for <code>new line 2</code>:</p>
<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -1 +1,3 @@
 first line
+new line 1
 new line 2
# ---
# To remove '-' lines, make them ' ' lines (context).
# To remove '+' lines, delete them.
# Lines starting with # will be removed.
</code></pre>
<p>but that gives the error:</p>
<pre><code>error: patch failed: myfile:1
error: myfile: patch does not apply
Your edited hunk does not apply. Edit again (saying &quot;no&quot; discards!) [y/n]? 
</code></pre>
<p>What is the problem?</p>
","0","875915","0"
"44303245","6521116","2017-06-01 09:11:03","1","356","<git><git-add>","time of last git-add","<h2><strong>Note</strong>, please be kindly to read my question first, befroe mark it as duplicate of <a href=""https://stackoverflow.com/q/12132272/6521116"">how-can-you-undo-the-last-git-add</a>.</h2>

<p>Is there a git native way to get  when the last <code>git add .</code> executed?</p>

<p>I recent do some coding in my ios project, and execute <code>git add .</code> without committing.
Today I also do some coding in the project, and encountered a bug. I use <code>git diff</code> to check today's work, and not find any changes may lead to the bug. </p>

<p>I've test the ios app on my device last saturday. So I want to know when the last <code>git add .</code> was executed. If it was executed before last saturday, I can locate the bug in today's code.</p>
","4","6521116","0"
"26042390","870980","2014-09-25 15:28:21","188","82343","<git><version-control><git-add>","git add * (asterisk) vs git add . (period)","<p>I have a question about adding files in git. I have found multiple stackoverflow questions about the difference between <code>git add .</code> and <code>git add -a</code>, <code>git add --all</code>, <code>git add -A</code>, etc. But I've been unable to find a place that explains what <code>git add *</code> does. I've even looked at the <a href=""http://git-scm.com/docs/git-add"" rel=""noreferrer"">git add man page</a>, but it didn't help. I've been using it in place of <code>git add .</code> and my co-worker asked me why. I didn't have an answer. I've just always used <code>git add *</code>.</p>
<p>Are <code>git add .</code> and <code>git add *</code> the same? Does one add changed files from the current directory only, while the other adds files from the current directory and subdirectories (recursively)?</p>
<p>There's a great chart listed on one of the other stack questions that shows the difference between <code>git add -A</code> <code>git add .</code> and <code>git add -u</code>, but it doesn't have <code>git add *</code>.</p>
<p><img src=""https://i.stack.imgur.com/YfLUZ.jpg"" alt=""enter image description here"" /></p>
<p>Note: I understand what it means to use the asterisk as a wildcard (add all files with a given extension). For example, <code>git add *.html</code> would add all files that have a <code>.html</code> extension (but ignore <code>.css</code>, <code>.js</code>, etc).</p>
<p>Thanks for the help!</p>
","4","870980","0"
"33333057","1484957","2015-10-25 18:03:10","6","1328","<git><git-rebase><git-add>","How can I do a git add --patch during an interactive rebase?","<p>I want to go back and remove several portions of a commit that is two commits back.  I hoped I could do <code>git rebase -i HEAD^^</code>, <code>edit</code> the commit, and then use <code>git add --patch &lt;file&gt;</code> on the file.  However, during the rebase, <code>git reset HEAD &lt;file&gt;</code> doesn't appear to work because when I try <code>git add --patch &lt;file&gt;</code>, it says there are no changes.</p>
","0","1484957","0"
"35879185","410076","2016-03-08 22:20:34","24","1220","<windows><git><filenames><git-add>","Can't use git add with --patch option","<p>I recently updated Git to version <code>2.7.2.windows.1</code> (I am running Windows 7 64-bit).  Since the update, I have been unable to run <code>git add</code> with the <code>-p</code> option on files within a certain directory (or its subdirectories) whose name is <code>_</code> (an underscore).</p>

<p><code>git status</code> correctly reports that my file has changes:</p>

<pre><code>PS C:\Users\Carl\www\dl&gt; git status
On branch develop
Your branch is up-to-date with 'origin/develop'.
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   _/php/class.Menu.php
</code></pre>

<p>And I can add the entire file with a simple <code>git add</code>, or by specifying the file by name.  But if I try to include the <code>-p</code> or <code>--patch</code> option (both variations produce the same results), Git reports that there are no changes:</p>

<pre><code>PS C:\Users\Carl\www\dl&gt; git add -p .\_\php\class.Menu.php
No changes.
</code></pre>

<p>This only happens for files within the <code>_</code> directory, but it doesn't matter whether I <code>cd</code> into that directory to run the <code>git add</code> command without having to explicitly specify a path with an underscore in it; it still doesn't work:</p>

<pre><code>PS C:\Users\Carl\www\dl\_\php&gt; git add -p .\class.Menu.php
No changes.
</code></pre>

<p>I had initially thought this problem was related to a similar one I encountered recently on files within the <code>_</code> directory, <a href=""https://stackoverflow.com/questions/35660576/git-diff-fails-on-file-with-underscore-in-path"">which I asked about here</a>.  However, that problem appears to have been related to Posix path conversion in MinGW, whereas this problem occurs whether I use Git Bash, Windows PowerShell, or cmd.exe.</p>

<p>As I said in that previous question, I believe underscores to be valid in file/directory names.  Additionally, I am not the owner of the project so I cannot rename the directory or move the file.</p>

<p>Is this a bug in Git?  Are there any additional steps I can take to determine what the underlying issue is?</p>
","8","410076",""
"5165239","174011","2011-03-02 08:50:36","16","6062","<git><githooks><git-add>","why it is not possible to git add .git/hooks/my-hook","<p>I would like to have some hooks always present in a clone of a given repository. Is there a way to add a file in .git/hooks in the repository?</p>

<p>Thanks</p>
","0","174011","0"
"23728769","3282164","2014-05-19 02:02:29","3","3117","<git><git-branch><git-revert><git-add><git-reflog>","How to recover files added to git but overwritten by checkout","<p>Need some help!</p>

<ol>
<li>I added a few files using ""git add ""</li>
<li>I wanted to checkout the other files and accidentally ran ""git checkout -f""</li>
</ol>

<p>I do know its possible to get these changes back using reflog etc, but I don't know how! I know it's possible to get a diff. I really need those changes. </p>

<p>Any ideas??</p>
","7","3282164","0"
"5611116","521257","2011-04-10 10:18:39","1","3403","<git><temporary-files><git-add><hidden-files><dotfiles>","avoid git adding dotfiles, hidden file and tempfiles","<p>I'm new to Git and I use this command before committing:</p>

<pre><code>git add .
</code></pre>

<p>and it adds some files I don't want to be tracked like:
temp files</p>

<pre><code>.tmp_basictest-barchart.html.84279~
.tmp_basictest-demo.html.84399~ 
</code></pre>

<p>and hidden files:</p>

<pre><code>.project
</code></pre>

<p>How to avoid these files to be added ?</p>
","1","521257",""
"61481109","12857758","2020-04-28 13:16:52","1","713","<git><git-add>","git add line by line and not by paragraph","<p>Is there a way to add line by line in git.</p>

<p>I tried this:</p>

<pre><code>git add -p 
</code></pre>

<p>But this command is not performant for me. because I need to treat each line separately.</p>

<p>If there is no a solution, I'm surprised about how git community forgot to add this feature.</p>
","2","12857758",""
"6248917","417175","2011-06-06 07:26:11","66","23992","<git><git-add>","How to avoid specifying absolute file path while git-add","<p>Using <code>git add</code> command becomes tedious once the file path becomes lengthy. For e.g.
<code>git add src_test/com/abc/product/server/datasource/manager/aats/DSManger.java</code><br/>
Is it possible to bypass specifying absolute file path? May be using some kind of pattern or something?<br/></p>

<p>I know that we can use <code>git gui</code>. But I want to do it using cmd line. <br/><br/> </p>

<p>Thanks in advance for the inputs.</p>
","0","417175","0"
"60891721","2350838","2020-03-27 18:03:55","1","235","<git><git-rebase><git-diff><git-add>","When rebasing, why doesn't git add --patch work?","<p>In a git repository, I have a single file with a large commit I want to divide into multiple commits. I am trying to follow the instructions at <a href=""https://stackoverflow.com/a/43138338"">this answer</a> but I have run into a problem. <code>git status</code> shows that file.js is untracked, but <code>git add -p file.js</code> responds ""No changes."" 
I made a <a href=""https://github.com/jgibbons94/rebase-error"" rel=""nofollow noreferrer"">github reposiotry</a> to illustrate exactly what I mean.</p>

<p>In this specific repository, I want divide commit 92cc4839abe2bfe54981d8227c17acf07c24c84b into several commits, each adding one function to file.js. However, the only helpful instructions I have found fail.</p>

<p>How to reproduce:</p>

<ol>
<li><code>git clone https://github.com/jgibbons94/rebase-error.git</code></li>
<li><code>cd rebase-error/</code></li>
<li><code>git rebase -i HEAD~2</code> and mark commit 92cc483 to edit. Keep everything else the same.</li>
<li><code>git reset HEAD~</code></li>
<li><code>git status</code> lists file.js is not tracked.</li>
<li><code>git diff file.js</code> shows no changes.</li>
<li><code>git add -p file.js</code> responds ""No changes.""</li>
</ol>

<p>Is this a known issue with a known workaround? Am I misunderstanding something? All help will be appreciated.</p>
","0","2350838",""
"43161383","1264304","2017-04-01 19:59:15","74","24382","<git><git-add><git-stage>","Stage only deleted files with git add","<p>I have run <code>git status</code> and see several modified files and several deleted files.</p>
<p>Is it possible to stage only deleted or only modified files?</p>
","1","1264304","0"
"24824015","1798201","2014-07-18 11:30:19","0","221","<java><git><ant><jgit><git-add>","custom apache ant task git-add (jgit) is not working","<p>I wrote custom ant task which uses jgit. It should take local repository address together with directory address and add all files in the directory to index. It builds successfully but unfortunately it doesn't work. I'm totally new to that, so I wonder if some of you could help me finding the problem or what i am missing. Here's my code:</p>

<pre><code>package customGitTasks;

import java.io.File;

import org.apache.tools.ant.Task;
import org.apache.tools.ant.BuildException;
import org.eclipse.jgit.api.AddCommand;
import org.eclipse.jgit.api.Git;


public class GitAdd extends Task{

    private String dir;
    private String repository;

    public void setRepository(String repository) {
        this.repository = repository;
        }

    public void setDir(String dir) {
        this.dir = dir;
        }

public void execute() throws BuildException {
    try {

        Git git = Git.open(new File(repository));
        AddCommand add = git.add();
        add.addFilepattern(dir).call();

    } catch (Exception e) {
        e.printStackTrace();
        System.out.println(e.getMessage());
    }
}
}
</code></pre>

<p>Thank you</p>
","0","1798201",""
"24854021","229792","2014-07-20 19:19:59","2","806","<git><concurrency><git-commit><git-checkout><git-add>","Concurrent git checkout/add/commit","<p>I am developing an application which uses Git as a database. My current approach is to call out to the <code>git</code> shell command to construct a new commit whenever the application changes something. This is very simple, but a big disadvantage is that it does not allow any concurrent writes to the database: two threads cannot construct a commit simultaneously, because there is a single <code>HEAD</code>, a single <code>index</code>, and a single working copy.</p>

<p>However, since commits, trees, and blobs are all content-addressed, I think it should be possible to construct all of these concurrently. What would be the recommended approach for this? Perhaps:</p>

<ul>
<li>command line flags to <code>git add</code>, <code>git commit</code>, etc., which explicitly specify a different <code>HEAD</code> and <code>index</code> file to use. As far as I can see, such things do not exist.</li>
<li>using git plumbing commands for all operations. However, I am not an expert with them and am not totally sure which are thread-safe.</li>
<li>a Git service, to which one can connect a la traditional database connections, which would provide transactional, concurrent access to a Git repository. As far as I can see, such a thing does not exist. I have considered writing one.</li>
<li>giving up and doing a <code>git clone</code> to get an entirely new working copy for each concurrent user. This is inordinately expensive.</li>
</ul>
","0","229792","0"
"6839781","237285","2011-07-27 05:24:40","32","6509","<git><git-add>","What happens when you run `git add .git` in a Git repository?","<p>While it seemed to do nothing, it gave no warning or error message. Any ideas?</p>
","2","237285","0"
"35909016","1135135","2016-03-10 06:18:07","1","356","<linux><git><github><git-add><git-status>","files in the git repo are both deleted and untracked but they're still there. How is that possible?","<p>All the (hundreds of) files in my repo now show up as untracked and deleted though I can't figure out what's going on?</p>

<p><code>ls</code> shows the files are in the directory</p>

<p><a href=""https://i.stack.imgur.com/0GhFt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0GhFt.png"" alt=""ls shows the files are there""></a></p>

<p>but <code>git status .</code> in the directory has the files as deleted and untracked. I haven't touched any of these files in a couple months. Also the website the files are for is not working now...</p>

<p><a href=""https://i.stack.imgur.com/i6G6D.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/i6G6D.png"" alt=""enter image description here""></a></p>
","2","1135135",""
"25632047","1015214","2014-09-02 20:43:37","0","436","<git><git-add><git-rm>","How to git rm all deleted files from repo, excluding others","<p>I have used this post <a href=""https://stackoverflow.com/questions/492558/removing-multiple-files-from-a-git-repo-that-have-already-been-deleted-from-disk"">Removing multiple files from a Git repo that have already been deleted from disk</a> to figure out how to remove multiple files  with git rm at once.</p>

<p>Now, I'd like to do this, excluding one directory. I tried this:</p>

<pre><code>git rm $(git ls-files --deleted --exclude='sites/all/modules/imagecache_actions/')
</code></pre>

<p>but it didn't work. Am I misusing the exclude tag?</p>
","2","1015214",""
"7764914","877377","2011-10-14 08:22:03","47","8536","<git><mercurial><git-add>","hg equivalent of git add -p?","<p>Is there a mercurial equivalent of <code>git add -p</code>?</p>

<p>Quoting from man, git-add with the option -p (or --patch) does the following:</p>

<blockquote>
  <p>Interactively choose hunks of patch between the index and the work
  tree and add them to the index. This gives the user a chance to
  review the difference before adding modified contents to the index.</p>
</blockquote>
","3","877377","0"
"7770364","979672","2011-10-14 16:03:01","12","13141","<git><git-reset><git-add><git-rm>","Git: Undo local changes; git add . + git rm?","<p>Need help figuring out a couple common workflows with Github. I come from a VS TFS background, so forgive me.</p>

<p><strong>Undoing Pending Changes</strong></p>

<p>Let's say I have cloned of a git repository to my local file system. At this point, the project's local files match exactly what's in the remote repoistory.</p>

<p>Then I decided to make some changes to the code, and change the local versions of a couple files. After doing some testing, I figure out that I want to discard my local changes and revert the local files back to what they are in the remote repoistory. </p>

<p>How do I undo these local changes, restoring them to the current versions in the repository?</p>

<p><strong>Committing all Changes</strong></p>

<p>Whenever I modify the contents of local files in my repository clone, or add new files, and want to push the changes, I issue ""git add ."", ""git commit"" with my comments, then ""git push"" to my master.</p>

<p>However, when I delete a file locally that's tracked in the repository, ""git add ."" doesn't capture the rm changes. Instead, I have to ""git rm [filename]"" before I ""git commit"" to update the repository. I always forget to do this though.</p>

<p>Is there a git command that will ""git add ."" and ""git rm"" any files I've deleted locally, in one step? After modifying local files and deleting a couple, I'd like to issue just one command that captures all my changes before I ""git commit"".</p>
","0","979672","0"
"44481198","8143696","2017-06-11 06:58:02","7","5108","<linux><git><github><git-add><git-lfs>","Delete git LFS files not in repo","<p>I uploaded some files to git LFS and I went over my storage limit. Now, the files I uploaded don't show up in the repo, but I'm still over my data limit and I can't upload anything.  </p>
","0","8143696",""
"52313244","3512538","2018-09-13 11:58:28","1","587","<git><git-commit><git-add>","Trying to git add -p <file_name> but git does nothing","<p>I'm trying to use <a href=""https://stackoverflow.com/q/1085162/3512538"">this</a> in order to apply a big change I've worked on. I did the following:</p>

<pre><code> 1. git pull (before I started working)
 2. changed some code
 3. git diff &gt; ~/my_diff
 4. git stash
 5. git pull
 6. git stash pop 
</code></pre>

<p>This failed due to conflicts, so I tried:</p>

<pre><code> 7. cp ~/my_diff ./
 8. git add -p ~/my_diff
</code></pre>

<p>But I get nothing... The file contains a lot of changes, but for some reason it suggests no hunks to patch. What is the problem?</p>

<hr>

<p>This is the exact response from <strong>git</strong>:</p>

<pre><code>Your branch is up-to-date with '...'.

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        my_diff

nothing added to commit but untracked files present (use ""git add"" to track)
.../trunk $ git add -p my_diff
    No changes.
</code></pre>

<hr>

<p>Here is the <code>head -30 ~/my_diff</code>:</p>

<pre><code>diff --git a/trunk/files_transfer_mgmt/inc/files_transfer_mgmt.h b/trunk/files_transfer_mgmt/inc/files_transfer_mgmt.h
index 28907bd..f108931 100644
--- a/trunk/files_transfer_mgmt/inc/files_transfer_mgmt.h
+++ b/trunk/files_transfer_mgmt/inc/files_transfer_mgmt.h
@@ -13,6 +13,7 @@
 #include ""iss_api.h""
 #include ""rf_termserver.h""
 #include ""rf_versions_util.h""
+#include ""common_apis.h""

 #ifdef __cplusplus
        extern ""C"" {
@@ -23,23 +24,40 @@

 #define DEVICE_SFP             ""/dev/sfp""

-#define        SECONDS_TO_USECONDS(seconds)    (seconds * 1000000)
+#define SECONDS_TO_USECONDS(seconds)   (seconds * 1000000)
+
+#define DEFAULT_FTPS_ERR_LOG ""FTPS_error_log_tmp.txt""

 #ifdef __cplusplus
         }
 #endif /* __cplusplus */

 void SECURE_StartFileDownloadFromHere(void * data);
+void SECURE_ZT_entry_point(void * data);
 void SECURE_StartGenericFileTransferFromHere(void * data);
 void SECURE_getDownloadStatus(int argc, char *argv[],FILE *fin, FILE *fout,pedro_callback_func_args_t *pedro);
</code></pre>

<p>so you can see it is a well formed diff file</p>
","0","3512538",""
"36291216","337134","2016-03-29 17:33:36","5","11664","<git><github><version-control><git-commit><git-add>","Changes not staged for commit even after git add","<p>Here are the git commands which I have typed</p>

<pre><code>$ git add -u -n
add 'proj1/Foo.scala'
$ git add .
$ git add .
$ git commit -m ""message""
On branch feature/branch
Your branch is up-to-date with 'origin/feature/branch'.
Changes not staged for commit:
    modified:   ../proj1/Foo.scala
</code></pre>

<p>So why did I get the <code>Changes not staged for commit</code>? as you can see that I did <code>git add .</code> twice</p>

<p>Now if I got ahead and do</p>

<pre><code>git add ../proj1/Foo.scala
</code></pre>

<p>and then do commit it works. Why should I do each file specifically rather than just do <code>git add .</code></p>
","4","337134",""
"44078645","501204","2017-05-19 20:37:47","1","78","<git><git-add>","Make git add --patch remember which hunks I've declined to add until the next commit","<p>My common workflow is to do a bunch of code editing, and then use <code>git add --patch</code> to organize my changes into logically consistent commits.</p>

<p>A scenario that comes up over and over again is this:</p>

<ol>
<li>I skip a bunch of changes that don't relate to the commit I want to make</li>
<li>I add some changes that make sense</li>
<li>I find a typo or some commented-out code that I forgot to delete</li>
<li>I hit <code>q</code> to exit the interactive add</li>
<li>I go back to my editor and make the small change</li>
<li>I start <code>git add --patch</code> again</li>
<li>I very carefully walk through the entirety of the change set again, making sure to type <code>n</code> over again for all the hunks I don't want to include</li>
<li>I reach my newly updated hunk and type <code>y</code> to add it.</li>
<li>GOTO step 1</li>
</ol>

<p>This cycle plays out over and over again until finally my commit is ready to go.</p>

<p>What I'd like is for git to remember which hunks I've explicitly declined to add, so that the next time I run <code>git add --patch</code>, I don't have to decline them again.</p>

<p>I don't think git supports this, but is there any tool or workflow I could adapt that would make this easier?</p>
","3","501204","0"
"63041821","1718474","2020-07-22 19:30:17","1","70","<git><version-control><staging><git-add><git-patch>","See the full git add patch","<p>I use <code>git add -p</code> all the time. For large hunks I often go into (e)dit mode to review and adjust the hunk as desired.</p>
<p>Is there a way to edit the FULL diff (every hunk in every file), rather than make staging decisions one hunk at a time?</p>
<p>I know you can (s)plit a large hunk into smaller ones. I'm looking for something that kind of does the opposite: combine small hunks into one large one.</p>
","2","1718474",""
"26366851","554241","2014-10-14 17:36:53","1","537","<git><svn><git-add>","What is the svn equivalent for ""git add -u""?","<p>Is there an equivalent in svn like <code>git add -u</code>? Basically, stage all the tracked files?</p>
","0","554241",""
"26126876","171592","2014-09-30 17:43:07","46","23289","<git><git-diff><git-add>","why `git diff` reports no file change after `git add`","<h2> Why is that <code>git diff</code> thinks there are no changes</h2>

<p>..even if <code>git status</code> reports them as <em>modified</em>?</p>

<pre><code>$ git status
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use ""git push"" to publish your local commits)

Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    new file:   file-added
    modified:   file-with-changes   &lt;&lt; it knows there are changes
</code></pre>

<p>but in order to see the difference, I need to explicitly add the last reversion hash..</p>

<pre><code>$ git diff
  (nothing)

$ git diff rev-hash
diff --git a/file-with-changes b/file-with-changes
index d251979..a5fff1c 100644
--- a/file-with-changes
+++ b/file-with-changes
.
..
</code></pre>
","0","171592","0"
"8140216","638452","2011-11-15 17:07:13","14","12174","<git><github><git-rebase><git-stash><git-add>","git status: what is UU and why should add/rm fix it?","<p>Here is the current state of this feature branch.</p>

<p>Recent Steps:</p>

<ol>
<li>Remote development branch <strong>diverged</strong></li>
<li><strong>Fetched</strong> remote development branch</li>
<li><strong>Stashed</strong> local feature branch's diverged changes that I want to keep</li>
<li><strong>Rebased</strong> feature branch from local development branch</li>
<li>Stash <strong>Popped</strong> feature branch changes</li>
<li>Stash <strong>Apply</strong> feature branch changes</li>
</ol>

<p>Results:</p>

<pre><code>$ git status
# On branch feature-foo-branch
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   foo/bar.php
#   modified:   foo/baz.php
#
# Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both modified:      foo/conflict.php
#
</code></pre>

<p>and status with <code>-s</code></p>

<pre><code>$ git status -s
UU foo/conflict.php
M  foo/bar.php
M  foo/baz/php
</code></pre>

<p>git recommends either <code>add</code> or <code>rm</code> to resolve the conflict.  What does <code>UU</code> mean and why would those be the options to fix it?</p>

<p>All of the information I can find about resolving conflicts similar to this say not to use <code>rm</code> which makes me wonder why git thinks it's appropriate.</p>

<p>I can't find anything about <code>UU</code> in the git manual pages but there is this <a href=""https://stackoverflow.com/questions/7517124/git-merge-conflict-uu-how-do-i-resolve-conflict-without-adding-file-to-next-c"">SO question</a> which also seems to be having trouble sorting out why <code>add</code> would work in this case.</p>
","1","638452","0"
"36395149","5411817","2016-04-04 05:31:19","-1","656","<git><undo><git-reset><git-add><git-stage>","Is there any way to undo a ""`git reset .`""? It 'reverted' all files - all edits have been lost from my working directory","<p>I staged a grand number of files for commit.</p>

<p>Then I realized it was better to commit only two of the files,
and then commit the remaining ones in a separate commit.</p>

<p><code>git reset &lt;filename&gt;</code> unstages filename</p>

<p>I wanted to unstage everything,<br>
then restage two files, and commit.<br>
Then stage all remainging files and commit again.</p>

<p>As: ""<code>git add .</code>""            (adds all files to staging area)<br>
and      ""<code>git reset &lt;filename&gt;</code>"" (removes filename from staging area)<br>
""<code>git reset .</code>""  (seemed to make sense to unstage all files)</p>

<p>oops..!<br>
That reverted my working directory to the last committed version,<br>
 - I lost ALL File Edits that I had made! :-(</p>

<p>Anyway to ""undo"" ""<code>git reset .</code>"" ??</p>

<p>I've not found any documentation on this.<br>
In fact I do not find any documentation on ""<code>git reset .</code>"" at all.<br>
My best guess is that git took the ""<code>.</code>"" to be the value for an option,  other than the filename option.  </p>

<p>But is this undoable ?</p>
","4","5411817","0"
"36412446","2111099","2016-04-04 20:38:24","2","934","<git><symlink><git-add>","GIT removing files in symlinked folders, adds them back on second run of git add -A","<p>I have a directory structure as such:</p>

<pre><code>-main
    -sym-linked-dir
        some-file.txt
        some-other-file.bar
    -sym-linked-dir-2
        -some-dir
            some-doubly-nested-file.foo
    -normal-folder
        spam.eggs
        pan.cakes
        hash.browns
</code></pre>

<p>I do <em>not</em> have any symlinked <strong>files</strong> at all, just symlinked folders.</p>

<p>Lets say I make a change to spam.eggs, I then go to the command line and do a <code>git add -A</code> - git will run as normal, but say that all the files in symlinked folders will be marked as deleted:</p>

<pre><code>Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    deleted:    main/sym-linked-dir/some-file.txt
    deleted:    main/sym-linked-dir/some-other-file.bar
    deleted:    main/sym-linked-dir-2/some-dir/some-doubly-nested-file.foo
    modified:   main/normal-folder/spam.eggs

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    main/sym-linked-dir/
    main/sym-linked-dir-2
</code></pre>

<p>When I then run <code>git add -A</code> again or <code>git add main/sym-linked-dir</code>, it will add the folder and all the files as normal, as expected.</p>

<p>However, if I then run <strong>ANOTHER</strong> <code>git add -A</code>, it will <em>remove</em> the files again, alternately.</p>

<p>E.g., if I did <code>git add main/sym-linked-dir</code>, it would add that, and I would only have 1 untracked change, and 1 deleted file + folder. If I then do a <code>git add -A</code> it would <em>untrack</em> <code>main/sym-linked-dir</code> but recognise once again that it had been tracking <code>sym-linked-dir-2</code> all along. I do another <code>git add -A</code> and the situation reverses again!</p>

<p>My config for the repo (in .git folder) is as follows:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = true
    ignorecase = true
    hideDotFiles = dotGitOnly
</code></pre>

<p>I have nothing else relevent in my global config.</p>

<p>My overall question is: <strong>How do I get git to reliably treat files in symlinked folders as regular files, for all intents and purposes, so that confusing behaviour such as the above, doesn't happen?</strong></p>

<p><strong>edit:</strong></p>

<p>My use case is that I have a module that is used by two (or more) repos <strong>locally</strong>, so to keep them updated with each other with the latest code, I just symlinked some directories in both cases - this means whenever I update it in one repo, it updates in any of the others, e.g.</p>

<pre><code>-myAwesomeModules
    -myModule
        some-file.txt

-app1
    -modules
        -myModule &lt;points to /myAwesomeModules/myModule&gt;
            some-file.txt

-app2
    -modules
        -myModule &lt;also points to /myAwesomeModules/myModule&gt;
            some-file.txt
</code></pre>
","6","2111099","0"
"70293546","5170442","2021-12-09 16:40:41","2","121","<git><git-bash><git-add>","change color of ""Stage this hunk"" query in git bash","<p>when doing <code>git add -p</code> in the git bash terminal, the query &quot;stage this hunk&quot; comes up in a very dark blue that is very difficult to see on the black background.<br />
How can I change this to something more easily readable?</p>
<p><a href=""https://i.stack.imgur.com/823V3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/823V3.png"" alt=""enter image description here"" /></a></p>
","2","5170442",""
"70441956","16367458","2021-12-21 21:48:43","1","95","<git><staging><git-add><git-stage><git-index>","How can navigate one level back at the git interactive staging (add) command","<p>After running the interactive staging git command <code>$ git add -i</code> and choosing one of the options for example &quot;update&quot;, then I don't know how to get back to the root level to choose another option.</p>
<p>Is there any keyboard shortcuts or alternative methods rather that just using &quot;ctrl + c&quot; and then running the code <code>$ git add -i</code>, again?</p>
","0","16367458",""
"70500496","13957132","2021-12-27 21:17:02","-1","312","<git><git-commit><git-pull><git-add><git-untracked>","Cant pull nor commit from git for untracked file","<p>I was trying to pull from a repo and it gives me that message but if I run git status it says that my working tree has diverged and if I try to add and commit it gives me that error, (btw those files in the .gradle folder are in the .gitignore file so I don't get why there are being displayed when I try to use git)<a href=""https://i.stack.imgur.com/NsbWF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NsbWF.png"" alt=""enter image description here"" /></a></p>
","2","13957132",""
"27020803","4070848","2014-11-19 15:36:49","0","65","<git><git-add>","git add: new vs modified vs deleted","<p>I've been trying to get to grips with 'git add', particularly in relation to how it behaves for new vs modified vs deleted files.</p>

<p>I've looked at various guides and tutorials out on the web, but a lot of what's out there seems to be outdated now, particularly in relation to whether <em>deleted</em> files are staged (removed from the index), since it seems that the default behaviour of git has changed recently (or at least more recently that the article concerned).</p>

<p>Even the documentation at <a href=""http://git-scm.com/docs/git-add"" rel=""nofollow"">http://git-scm.com/docs/git-add</a> has me slightly confused, or uncertain about what is and isn't staged with 'git add'.</p>

<p>So let us consider the basic command:</p>

<pre><code>$ git add &lt;pathspec&gt;
</code></pre>

<p>My understanding from the ""official"" documentation is that, where the pathspec is directory name (e.g. 'dir' or 'dir/subdir' or even ‘.’), this causes all new files <em>and</em> modified files <em>and</em> deleted files in that directory to be staged (i.e. local files deleted will also be deleted in remote repo).</p>

<p>But where pathspec is a file or set of files (e.g. 'doc.txt' or '*.txt' or 'dir/*.js'), staging is only for <em>new</em> and <em>modified</em> files, not deleted files.</p>

<p>Is that correct?  Is that how git chooses between the two regimes, assuming no other flags are used?</p>

<p>And then the explicit flags are -A to stage new, modified and deleted.
Or -u to stage modified and deleted (but not new).
Or --no-all to stage new and modified (but not deleted).</p>

<p>Is that a fair summary, or have I misunderstood?  The docs do refer to a <em>leading</em> directory name, so maybe the rule is that 'dir/*.txt' <em>would</em> stage deleted files?</p>

<p>Would be useful if someone knowledgable could state explain the behaviour for each of the following examples, just by stating something like ""new: yes, modified: yes, deleted: no"":</p>

<pre><code>$ git add .
$ git add dir
$ git add dir/subdir
$ git add dir/*.txt
$ git add *.txt
$ git add file.txt
$ git add ./file.txt
$ git add dir/file.txt
</code></pre>

<p>For example: </p>

<pre><code>$ git add .    (new: yes, modified: yes, deleted: yes)
</code></pre>

<p>Many thanks.</p>
","3","4070848",""
"27569684","1161463","2014-12-19 16:04:39","0","286","<macos><git><laravel><gitignore><git-add>",".gitignore_global ignored wrong dir and won't allow it to be tracked after removal","<p>I accidentally added Laravel's <code>app/storage</code> dir to .gitignore_global. This caused problems of course, so I removed it from <code>.gitignore_global</code>.</p>

<p>Now no matter what I can't get any project to track <code>app/storage</code> or any of its subdirectories.</p>

<p>I've checked all <code>.gitignore</code> files for my projects and none mention ""storage"".</p>

<p>I tried running <code>git add storage -f</code> but this caused all <code>.gitignore</code> files in all the subdirectories to be ignored, which is not what I want since some files should not be added. If I just run <code>git add storage</code>, I get the error</p>

<pre><code>The following paths are ignored by one of your .gitignore files: app/storage
</code></pre>

<p>What's going on here?</p>

<p>(For information, I'm running on Mac OS 10.9.)</p>
","5","1161463",""
"9929691","1271772","2012-03-29 16:41:44","3","4632","<git><github><git-gui><git-add><git-stage>","What's the difference between Git add (ctrl+A) and Stage to Commit (ctrl+T) in the git GUI?","<p>If git add <kbd>CTRL</kbd>+<kbd>A</kbd> starts tracking changes AND stages changes to already tracked files, why should I ever use Stage to Commit <kbd>CTRL</kbd>+<kbd>T</kbd> in the git gui ?</p>
","0","1271772",""
"28179416","917249","2015-01-27 20:30:48","2","276","<git><git-add>","'git add .' fails when local repository is in subdirectory of the worktree","<p>I have a problem with <code>git add .</code> failing to add files. I believe (in fact, I'm sure) this is related to the fact that my local repository is located in a subdirectory of the worktree. <code>git add --all</code> works, but I'd like to understand what's going on here.</p>

<p>In the <code>worktree</code> directory I have two files and one repository subdirectory: <code>ignore.txt</code>, <code>do-not-ignore.txt</code> and <code>repo</code>. Inside <code>worktree/repo</code> is <code>.git</code>. I set <code>git config core.worktree '/absolute/path/to/worktree'</code>. The content of <code>.git/info/exclude</code> is:</p>

<pre><code>   *
   !do-not-ignore.txt
</code></pre>

<p>When I run <code>git status</code> from within <code>worktree/repo</code> I get (with the usual message):</p>

<pre><code>../do-not-ignore.txt
</code></pre>

<p>However, <code>git add .</code> does not do anything: running <code>git status</code> after <code>git add .</code> gives me the same result as above. <code>git add --all</code>, on the other hand, adds the file correctly. If I just move <code>.git</code> from <code>worktree/repo</code> to <code>worktree</code> everything works as expected.</p>

<p>Can someone, please, explain (or provide a link about) this behavior? Thanks.</p>
","2","917249","0"
"70584605","16301257","2022-01-04 20:20:50","0","395","<bash><git><github><git-add>","git add giving a super long never ending output","<p>So I am kinda new to git and github and wanted to push a project on github. However, when I add files</p>
<pre><code>git add .
</code></pre>
<p>it gives a super long message that does not seem to end</p>
<pre><code>warning: LF will be replaced by CRLF in Lib/site-packages/Django-3.0.3.dist-info/AUTHORS.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in Lib/site-packages/Django-3.0.3.dist-info/INSTALLER.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in Lib/site-packages/Django-3.0.3.dist-info/LICENSE.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in Lib/site-packages/Django-3.0.3.dist-info/LICENSE.python.
</code></pre>
<p>This keeps going on, where am I wrong?</p>
","1","16301257",""
"54907159","4862765","2019-02-27 13:59:05","0","4884","<git><git-add>","Unable to add folder to git repo","<p>I think this issue has already been discussed under this question : </p>

<p><a href=""https://stackoverflow.com/questions/17743549/recursively-add-the-entire-folder-to-a-repository"">Recursively add the entire folder to a repository</a></p>

<p>However I still can not add some folders to a git repository and I need help.</p>

<pre><code>$ git status
...
# modified:   folder_to_add1 (modified content, untracked content)
# modified:   folder_to_add2 (modified content, untracked content)
</code></pre>

<p>These folders originally belonged to another git repository, so I entered the folders and deleted the .git folder inside.</p>

<p>I then ran:</p>

<pre><code>$ git add folder_to_add1
$ git add folder_to_add2
$ git status 
# On branch master
# Changes not staged for commit:
#   (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       ../filestore/
#       ../../stdout
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Neither folder_to_add1 and folder_to_add2 can be committed.</p>

<p>There is no .gitignore file in my repo.</p>

<p>What else can I try ? Thanks.</p>

<hr>

<p>I will try to add further information regarding my original post which ended right before previous line. I will appreciate your comments regarding ""this"" being considered the right war to further clarify my original question, I am a complete newbie posting here.</p>

<p>Dear torek, thanks for your very detailed answer. I guess I will have to read it very carefully to understand the subtleties involved with the submodules concept. I guess submodules are very much like ""svn externals"" which I am more familiar with.</p>

<p>From a ten minutes reading of your answer, my answer is: ""I do not want a submodule or subgit at all"". I mean: I want these folders, originally being submodules, to be part of only one project instead of many projects (to use a figure). </p>

<p>I am sure your answer is somewhere telling me why this is happening, but the fact is that I need to copy my project from one PC to another one and by using git to do it, these folders are actually not included in the index with ""git add "" regardless of whether there is a .git subfolder in them or not.</p>

<p>A "".gitmodules"" file does not seem to exist. After running :</p>

<pre><code>$ find . -name .gitmodules -print 
</code></pre>

<p>on the main folder of the project I get no results.</p>

<p>What I did to be able to add these folders to a new (different) repository was: </p>

<pre><code>$ cp -r myproject /home/myusername/newproject
$ cd /home/myusername/newproject/folder_to_add1
$ rm -r .git
$ cd ../folder_to_add2
$ rm -r .git
$ cd /home/myusername/newproject
$ git init
$ git add .
$ git commit -m ""Adding all existing files to the new repository""
</code></pre>

<p>But I think I loose all file changes history by doing it this way.</p>
","6","4862765",""
"54913651","11127223","2019-02-27 20:05:15","0","1491","<git><git-add>","git add did not match any files","<p>So I've set up my repository in /Desktop/GitHW6 and I've copied files over from a separate folder /xampp/htdocs/ikp1 into my GitHW6 folder. It's not letting me add any files into this, and keeps giving me the error message:</p>

<p>$ git add index.html</p>

<p>fatal: pathspec 'index.html' did not match any files</p>

<p>I've tried adding from the ikp1 folder and adding the files from GitHW6 folder. It either says it is outside of the repository or it did not match any files. I don't know what I'm doing wrong and other online resources are making this far more confusing than I think this needs to be. Thanks in advance.</p>
","3","11127223",""
"54956520","","2019-03-02 08:11:55","0","102","<git><symlink><git-commit><git-add><hardlink>","Using .config/directory as a git repo","<p>The whole configuration for a soft is located in <code>.config/soft</code>. 
Lately, I had an idea to practice basic git usage by initializing a git repo to which I would send commits with config changes.</p>

<p>My question is that I am not sure if I should initialize <code>.config/soft</code> as a git repo. I thought about initializing it somewhere like Projects/soft and linking directory or specific files from <code>.config/soft</code> to it.</p>

<p>What's the best solution here?</p>
","1","",""
"55024759","981403","2019-03-06 13:53:44","1","204","<git><git-add>","git move part of changes from ""to be comitted"" to local changes","<p>I have a file that I modified with 2 set of changes: formatting and adding new feature. </p>

<p>I need to turn them into 2 commits.<br>
  - Formatting changes<br>
  - New Feature A.</p>

<p>Now I used <code>git add --patch</code> and staged all the formatting stuff. So I have:</p>

<pre><code>Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   FileA   &lt;-- formatting changes

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   FileA  &lt;-- Feature A
</code></pre>

<p>Now before commit, I realized that I put one function (few lines) to the formatting changes (it should land inside Feature changes). </p>

<p>Can I somehow edit now changes to be committed? The file is significant and I don't want to go over again with <code>git add --patch</code>.</p>

<p>The only solution that I can think of to omit running through <code>git add --patch</code> is to commit current changes and then remove these lines from the commit itself.</p>

<p>Is any other way to do that?</p>
","1","981403",""
"55051203","606961","2019-03-07 19:11:40","1","768","<git><git-commit><git-add>","How do I commit only ""git add -p file"" changes without other changes to same file and without staged renamings?","<p>The problem is that I cannot apparently make a partial commit of four lines' worth of changes in a file, out of about all 200 or so changed lines in that file. It might be due to the command I mistakenly did and then supposedly corrected. I am an experienced git user and I have done this sort of task before, but I always did it without making a mistake previously. </p>

<p>Here is what I did.</p>

<p>I have a file with 3 or 4 changes to it, including one that I think might be desirable even if the other changes are too experimental.</p>

<p>I also have some renamed files, so the renames are staged.</p>

<p>I did the usual <code>git add -p file</code> step and verified that <code>git diff --cached file</code> showed exactly the change I wanted to check in.</p>

<p>I accidentally did <code>git commit -m ""Message""</code> (omitting the file name I should have included) and it committed the (staged) renames, which was not desired, as well as <code>file</code>.</p>

<p>Then I backed that commit out with <code>git reset HEAD~1 --soft</code>. This canceled the commit, but left <code>file</code> in a staged state, with ALL the changes, not just the <code>add -p</code> changes, as shown by <code>git diff --cached file</code>.</p>

<p>Because I didn't want all the changes staged for commit yet, I reset the file with <code>git reset HEAD file</code>. At this point <code>git status</code> and <code>git diff</code> seem to show that I am back to the state I was in before the <code>git add -p file</code> command. </p>

<p>The problem is that, at this point, if I do the following with only the desired change accepted during the add,</p>

<pre><code>git add -p file
git commit file -m ""Message""
</code></pre>

<p>The status shows all the changes to <code>file</code> getting committed. The line counts show way too many lines after the commit is completed.</p>

<p>I how do I only commit what I chose during <code>git add -p file</code> now that it seems like I am blocked from doing so?</p>

<p>Commentary: Ordinarily I don't have staged renames, so ordinarily I don't have to try to specify the file I want to commit. I think that the meaning of <code>git commit file</code> is not the meaning I need for my purpose. From reading the man page, I think what it's trying to say is that it doesn't matter what is staged for <code>file</code> when you do <code>git commit file</code>, it will commit that file's complete set of changes. Also <code>git commit -p file</code> will do the right thing for <code>file</code> after letting me pick the change interactively, but it will also commit the unrelated renamings that are staged. </p>
","4","606961",""
"55064087","5784831","2019-03-08 13:20:03","1","132","<git><syntax><git-stash><git-add>","Is it possible to add (stash) several file types in git?","<p>Assume I have</p>

<pre><code>git status
...
Changes not staged for commit:
        modified:   A.R
        modified:   B.Rmd
        modified:   C.txt
...
</code></pre>

<p>Is there a way to do the following:</p>

<pre><code>git add *.Rmd OR *.R
</code></pre>

<p>or</p>

<pre><code>git stash *.Rmd OR *.R
</code></pre>

<p>? I can't find it in the docs for <a href=""https://git-scm.com/docs/git-add"" rel=""nofollow noreferrer"">add</a> or <a href=""https://git-scm.com/docs/git-stash"" rel=""nofollow noreferrer"">stash</a>.</p>
","0","5784831",""
"46065581","4343984","2017-09-06 01:43:23","-2","3151","<git><git-commit><git-push><git-pull><git-add>","What happens when user does ""git push"" before ""git add"" and ""git commit""?","<p>I was working on a project made some changes in my code (in Itellij IDE) and by mistake I did below two steps in my terminal and I saw some changes went into the main respository (not my changes or anything I had worked previously).
Does anyone know why it did it ?</p>

<p>Note:
Changes that were pushed were not my code.</p>

<ol>
<li>git pull ( all-upto-date, I received) from my terminal</li>
<li><p>git push (rather than ""git add"" and ""git commit"") from my terminal</p>

<ul>
<li>Adding additional information (<strong>edited</strong>)
Yes, I had some changes in my local repository before I did a git push. But when I did the mistake of ""git push"" none of my local committed changes were pushed but rather someone else code was pushed which I had pulled.</li>
</ul></li>
</ol>

<p>I could not understand why git did that and thought of asking a question here to understand.</p>

<p>The question was asked to know possible cause without influencing my view on the answer.</p>
","3","4343984",""
"28037693","627729","2015-01-20 04:18:51","0","136","<git><git-add>","How do I use the update command in git add -i?","<p>In interactive, the update command just lists the commands again:</p>

<pre><code>$ git add -i
           staged     unstaged path
  1:        +0/-3      nothing .bowerrc
  2:        +4/-1      nothing .meteor/packages

*** Commands ***
  1: status   2: update   3: revert   4: add untracked
  5: patch    6: diff     7: quit     8: help
What now&gt; u
*** Commands ***
  1: status   2: update   3: revert   4: add untracked
  5: patch    6: diff     7: quit     8: help
What now&gt; 2
*** Commands ***
  1: status   2: update   3: revert   4: add untracked
  5: patch    6: diff     7: quit     8: help
What now&gt; update
*** Commands ***
  1: status   2: update   3: revert   4: add untracked
  5: patch    6: diff     7: quit     8: help
What now&gt;
</code></pre>

<p>git version <code>2.2.1</code></p>

<p>According to </p>

<p><a href=""http://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging"" rel=""nofollow"">http://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging</a></p>

<p>I should expect:</p>

<pre><code>           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update&gt;&gt;
</code></pre>
","3","627729",""
"64760082","3088045","2020-11-09 22:20:35","4","232","<git><git-diff><git-add><convenience-methods>","How to refresh a chunk's diff, during `git add -p`","<p>When staging files with <code>git add</code> in <em>patch mode</em> (<code>-p</code>) I sometimes find a mistake that I would like to correct, before keeping on with <em>add</em>ing further changes.</p>
<p>Many possible options are prompted: <em>conf<code>y</code>rm</em>, <em>plu<code>n</code>k</em>, <em><code>s</code>plit</em>, <em><code>e</code>dit</em>, etc..</p>
<p>But I don't see any way to <strong>re-read the file and refresh the diff</strong> so I can see new updated changes, that I might have carried on in the meanwhile.</p>
<p>Usually I need to <code>q</code>uit <em>git-add</em>, and re-run it (eventually having to re-skip all eventual chunks, in order to finally get again to the chunk I edited during the previous <code>git add -p</code>).</p>
<p><em><strong>Is there any (native, or artificial) way for making the process more convenient and just refresh the diff?</strong></em></p>
","3","3088045","0"
"65274465","7204583","2020-12-13 10:18:35","-2","36","<git><gitignore><git-add>","Set git globally add certain files of type","<p>I want to setup git to stage only certain files of type.
With</p>
<pre><code>git add * 
</code></pre>
<p>in basic dir, i must stage only the files of type cpp,h,txt,html.
How i must do this?</p>
","2","7204583",""
"28505135","1339987","2015-02-13 17:19:26","2","392","<git><diff><perforce><git-add>","Perforce equivalent for git add patch?","<p><code>git add --patch</code> is very important to me. It shows all the diff chunks, and I say ""yes"" or ""no"" to add them to the index, from which I commit. In particular if I added something like a <code>console.log</code> in some random file, it won't be picked up in my commit.</p>

<p>For perforce I haven't found anything similar. Nothing as expressive as git.</p>

<p>Is there a good workflow or solution?</p>
","1","1339987","0"
"10971221","29347","2012-06-10 18:26:03","13","3156","<git><git-add>","What's the difference between git add * and git add ., if any?","<p><a href=""http://git-animals.tumblr.com/post/24638261758/git-init-git-add-git-commit-a-m-initial"" rel=""noreferrer"">git animals</a> had this series of commands:</p>

<pre><code>git init
git add *
git commit -a -m ‘initial commit and release!’
</code></pre>

<p>What does <code>git add *</code> do compared to <code>git add .</code> (which I normally do) are they the same?</p>
","2","29347","0"
"47570996","6795090","2017-11-30 10:19:57","2","2664","<git><git-push><git-add>","git add -A does not adding all files of project to git repository","<p>I have just created new repository on github and trying to add my project on git.</p>

<p>When my friend tried to clone using <code>git clone</code> this project, some files of my project were not cloned.</p>

<p>On inspecting more on this, I found that these files were not added from my side to git. Steps followed by me to add whole project to git:</p>

<pre><code>git add -A
git commit -am ""First Commit""
git push origin master
</code></pre>

<p>But, still some files were not added to git. I tried by changing permissions of these files from <strong>read-only</strong> to <strong>rwx</strong> and adding again. But, nothing changed.</p>
","6","6795090",""
"30973287","3457012","2015-06-22 06:25:47","1","133","<git><github><git-commit><git-add><git-init>","Can git ever send your code to a repo that isn't yours?","<p>Can running </p>

<pre><code>git add .
git commit -m ""message""
</code></pre>

<p>in a git repo which you've initialized using</p>

<pre><code>git init
</code></pre>

<p>ever result in your code being sent to a repo that is not yours? I am concerned because I did this while not logged in to my git hub account.</p>
","6","3457012","0"
"49058817","","2018-03-01 21:16:37","18","1410","<git><git-diff><git-config><git-add><ergonomics>","`git add --patch` with `--word-diff`","<p><code>git add --patch</code> provides a great interface for reviewing unstaged changes and then staging only the ones that are wanted in the next commit.</p>

<p>Great, except for one thing: there is no obvious way to choose which <code>diff</code> view to use.</p>

<p>In particular, I would like to be able to configure <code>git add --patch</code> to present diffs to me the same way that <code>git diff --word-diff</code> does.</p>

<p>How can I achieve that?</p>

<p><em>(N.B. neither <code>--word-diff</code> nor <code>--word-diff --color</code> is exactly the same as <code>--color-words</code>, and so this question (and its <a href=""https://stackoverflow.com/a/49059282"">answer</a>) are different to <a href=""https://stackoverflow.com/questions/10873882/how-to-use-color-words-with-git-add-patch"">this question</a> and its answers. However, that question's answers are much more comprehensive than this one's, so that is probably the place to go for more information about how to do achieve things <strong>like</strong> this.)</em></p>
","3","","0"
"55145040","11197864","2019-03-13 15:02:15","0","1266","<git><git-commit><git-add>","Why add and commit in git?","<p>I'm new with <a href=""/questions/tagged/git"" class=""post-tag"" title=""show questions tagged &#39;git&#39;"" rel=""tag"">git</a> and I ask me why I have to use '<code>git add</code>' and '<code>git commit</code>' to commit a file into my repository.</p>

<hr>

<p>With all IDEs I tried it is just one click to commit a file. This means the IDE combines 'add' and 'commit', right?!</p>

<p>And so I can't find any reason why it made sense to program both commands.  </p>
","3","11197864",""
"36687424","3667227","2016-04-18 07:08:16","0","70","<git><visual-studio><gitlab><git-push><git-add>","How to track sub-directories that change accurately with git","<p>I am having a bit of difficulty picking up git. 
While tracking and committing text files is easy, every time I add a Visual Studio project folder to a repository, git throws this (modified content) status at me and I can not get it to add the new content to the repository. I can add the files just great the first time, but any time I edit one of these files, I am unable to add the new files to the next commit. </p>

<p>What can I do to add new files, and why is this not working? I attempted to add some gitignore files to see if possibly I should be ignoring some of the extra Visual Studio files, although I'm not sure I have them added correctly and I was having this issue before and after. </p>

<p>While I have found numerous different people asking about this, none of the answers have fixed my issue.</p>

<p>Thanks in advance, I've been pulling my hair out over this, it just seems so simple. </p>

<p>Visual of the problem:</p>

<p><a href=""https://i.stack.imgur.com/OrmMO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OrmMO.png"" alt=""Visual of the problem""></a></p>
","2","3667227",""
"52865291","6492006","2018-10-18 00:23:11","0","965","<git><atlassian-sourcetree><git-add><git-stage>","SourceTree / git add - Fail to stage modified files","<p>I use SourceTree daily and never had such issue.  But today I did some minor change and now I ended up having this issue:</p>

<p>What I changed today?</p>

<p>I added p4Merge as merge tool and diff tool in my git config.  Then I changed my mind and deleted entries for p4Merge from my /.gitconfig file since I noticed I ended up having double entries for merge and diff tools there.</p>

<p>Here is how that looked</p>

<p><a href=""https://i.stack.imgur.com/2XvOp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2XvOp.png"" alt=""enter image description here""></a></p>

<p>However, after removing all entries for p4Merge tool, I noticed that I am unable to stage files from SourceTree anymore.  Below screenshot shows that I have 4 upstaged files.  If I try to stage them by checking off the checkbox beside them, nothing will happen.  The wont be moved to Staged files section</p>

<p><a href=""https://i.stack.imgur.com/hcrYQ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hcrYQ.png"" alt=""enter image description here""></a></p>

<p><strong>UPDATE</strong></p>

<p>Using <code>git add .</code> also does nothing and I notice that terminal shows files as modified but they are not red nor green but purple:</p>

<p><a href=""https://i.stack.imgur.com/8v0rK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8v0rK.png"" alt=""enter image description here""></a></p>
","5","6492006","0"
"36932309","58214","2016-04-29 07:33:28","45","5832","<git><git-add>","How do I git add only lines matching a pattern?","<p>I'm tracking with git some configuration files. I usually do an interactive <code>git add -p</code> but I'm looking at a way to automatically add all new/modified/deleted lines that match a pattern. Otherwise it's going to take me ages to do all the interactive split and add. <code>git add</code> has a pattern matching for filenames, but I can't find anything about the content.</p>
","7","58214","0"
"37114832","321973","2016-05-09 11:38:54","1","575","<git><git-add><git-plumbing>","Which plumbing commands achieve the same as git add?","<p>I'd like to understand <a href=""/questions/tagged/git-plumbing"" class=""post-tag"" title=""show questions tagged &#39;git-plumbing&#39;"" rel=""tag"">git-plumbing</a> better by learning what actually happens when entering</p>



<pre class=""lang-bash prettyprint-override""><code>git add $DIRECTORY
</code></pre>

<p>and</p>

<pre class=""lang-bash prettyprint-override""><code>git add $FILE
</code></pre>

<p>How does it work?</p>

<p>A rough idea can be gained by reading the <a href=""https://git-scm.com/book/en/v2/Git-Internals-Git-Objects"" rel=""nofollow"">progit's git internals section</a>.</p>

<ul>
<li>If <code>$DIRECTORY</code> is a directory, something like <code>find $DIRECTORY -type f -exec git add {} \;</code>, i.e. recursively adding all files in <code>$DIRECTORY</code>. Then, <code>git add $FILENAME</code> applies for each file.</li>
<li>A check against <code>.gitignore</code> (and its ""superiors"")</li>
<li>A check against <code>.gitattributes</code>, running a <code>clean</code> filter if applicable</li>
<li><a href=""https://www.kernel.org/pub/software/scm/git/docs/git-hash-object.html"" rel=""nofollow""><code>git hash-object -w</code></a> the <code>clean</code>ed contents</li>
</ul>

<p>And <em>then</em>, the index gets updates somehow, which involves <a href=""https://git-scm.com/docs/git-mktree/"" rel=""nofollow"">git mktree</a>. But what exactly happens there? Does the tree for a directory contain only the files added or all files that were previously committed as well? And what happens next?</p>
","1","321973",""
"53291011","6492006","2018-11-13 23:28:48","10","10422","<git><git-add><core.autocrlf>","git add throws warning ""CRLF will be replaced by LF in <file-name>""","<p>I started working on a Xamarin crossplatform development recently.  While some of devs in my team are using Mac for development (with Visual Studio for Mac), others are using Windows (with Visual Studio 2017).  We use git/github as our code repository/version control system.</p>

<p>After I did some changes and added some new files, I issued <code>git add .</code> to stage all my changes but I got warnings like this </p>

<pre><code>warning: CRLF will be replaced by LF in &lt;file-name&gt;.
The file will have its original line endings in your working directory
</code></pre>

<p>I checked my git config and <code>core.autocrlf=input</code> which to my understanding and according to documentation here <a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration"" rel=""noreferrer"">https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration</a>, is correct setting for Mac.</p>

<p>However, I am unsure about the warning above since I have never seen it before. 
I find it even more confusing since not all of files I added are showing this warning but only some.  </p>

<p>I have read numerous posts about this issue but none seam to clearly explain if these warnings can or cannot be ignored.  Or if they need to be fixed and how to fix them for teams that use both Windows and MacOS like mine team does.</p>

<p>Do I need to worry about this warning and what does it exactly mean for teams like mine working on both Windows and MacOS machines?</p>
","0","6492006","0"
"70664446","","2022-01-11 09:34:58","0","82","<git><git-submodules><git-clone><git-add>","Broken repos by applying git clone and add . to a parent folder","<p>This is the 2nd time it happens to me. The first time I thought it was a hard drive problem.</p>
<p>I'm trying to back up all my projects, that don't have a Repos in it. Because of my bad practices, I've local projects with repo and local projects without it. All projects are in a folder named <code>Workspace</code>.</p>
<p>I tried to backup everything creating a new repo in GitHub, I did a clone and then copy all the files ( in this case two files <code>Readme.md</code> and the folder <code>.git</code>) on the <code>Workspace</code> Folder. Then I apply</p>
<pre><code>git add . 
git commit -m &quot;backing up&quot;
</code></pre>
<p>After some time, I receive an error, talking of submodules, etc. I realize that I should do other things applying submodules and git. In any case, I change the strategy to back up my local projects.</p>
<p>The problem is, that all my local projects that have repos, git don't recognize the repos. git doesn't &quot;see&quot; the repos. I believe those commands change something on those inner projects.
Each project has its own <code>.git</code> folder but it doesn't matter. Git doesn't see the repo.
I've been trying to find a solution for two days now, and I didn't format my pc yet just in case
:( .
I believe that is something related to the files inside <code>.git</code> folder, <code>HEAD</code> file is not in the <code>.git</code> folder, it doesn't exist. Thank you</p>
","4","",""
"37930692","6471630","2016-06-20 19:50:18","3","963","<git><version-control><gitignore><git-add>",".gitignore, git add, and files mysteriously disappearing","<p>I have a project, and have shared the root folder through git.  </p>

<p>My compatriots and I are using different versions of Gradle (and have named the project different things), so it would be appropriate for some things in the .idea folder (a certain folder) to be in the .gitignore file. I did not realize this until now, when my friend has pulled it, changed many things due to using a different version, and now pushed it back.</p>

<p>I have added to the .gitignore file:</p>

<pre><code>/.idea/
</code></pre>

<p>However, git seems to still be sending the changes in that folder to the Github repo.</p>

<p>I have checked out a few things, including <a href=""https://stackoverflow.com/questions/15774606/git-add-does-add-files-listed-in-gitignore"">this</a>, <a href=""https://www.jamescoyle.net/how-to/1094-ignoring-files-in-git-with-gitignore"" rel=""nofollow noreferrer"">this</a>, and a few more questions on stack overflow.</p>

<p>I ran <code>git rm --cached .idea/</code> and that successfully kept the changes from being pushed. However, if I checkout another branch and then return to this one, it does not include the appropriate files in the .idea directory.</p>

<p>Thank you,</p>

<p>A confused coder</p>
","2","6471630",""
"38029869","999165","2016-06-25 15:12:16","34","8433","<git><git-add>","Why is split option missing in git add -p?","<p>Trying to split a hunk into smaller ones by <code>git add -p</code> and <code>split</code> option, but entire file appears as one hunk and I can't split it. </p>

<ol>
<li>I can edit, but removing lines causes the patch to fail.  </li>
<li><code>git help add</code> says I should have split, and I recall using it, but in my current example the option doesn't appear in the prompt.</li>
<li>When I choose the option help is printed, which says I can choose s to split :-[</li>
</ol>

<p>Git version: 1.9.1. Xubuntu 14, oh-my-zsh. The hunk is not one line, it's multiple lines. Any ideas why would that be?</p>

<p>Edited with more data, here's console log:</p>

<pre><code>+last line of long text 
Stage this hunk [y,n,q,a,d,/,e,?]? s
y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk nor any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk nor any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
</code></pre>
","3","999165","0"
"70929497","18082835","2022-01-31 16:34:05","0","59","<git><github><git-commit><git-add><git-status>","Commit separately specific files inside untracked new directory in git","<p>I have a new created directory &quot;supplier_directory&quot;, in which there are 3 new files. I need to add these files into different commits.</p>
<ol>
<li>Commit N1 : file1 only</li>
<li>Commit N2 : file2 and file3</li>
</ol>
<p>I'm having the following:</p>
<pre><code>supplier_directory
</code></pre>
<p>when trying:</p>
<pre><code>git status
</code></pre>
<p>I'm enable to add or show changes of certain files inside this untracked and new directory evenly when running 'git status' inside it.</p>
","2","18082835",""
"67478428","5457542","2021-05-10 22:38:39","-1","1213","<git><github><git-bash><git-add>","the ""git add <file_name>"" command leads to the error ""fatal: pathspec 'file_name' did not match any files","<p>Before you mark as duplicate, I am referencing this similar question: <a href=""https://stackoverflow.com/questions/20188229/fatal-pathspec-file-txt-did-not-match-any-files-git/21078070"">Fatal: pathspec &#39;file.txt&#39; did not match any files, GIT</a></p>
<p>However my issue seems slightly different from the one posted there.</p>
<p>I am a complete beginner with Git and GitHub.  I have already written a complete program and have followed the instructions to upload/commit it to my GitHub page.  It appears to have worked without any issues.</p>
<p>Later, as further practice, I edited the file containing the source code for my program.   All I am attempting to do is to upload/commit this newly edited version of my program to my GitHub page.  However when I attempt to enter the command:</p>
<pre><code>git add &lt;file_name&gt; 
</code></pre>
<p>I get the following message:</p>
<pre><code>fatal: pathspec 'file_name' did not match any files
</code></pre>
<p>I thought it might be a syntax issue so I tried the &quot;git add &lt;file_name&gt;&quot; command both with and without the file extension &quot;.txt&quot;  I also tried the add command using the &quot;/&quot; instead of the file extension since that's how it appears in Git Bash when using the &quot;git status&quot; command.  Nothing has worked.
<a href=""https://i.stack.imgur.com/tGLRd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tGLRd.png"" alt=""git add error 1"" /></a></p>
<p>Then I noticed that when I use the &quot;dir&quot; command the file names are represented using a different syntax.  It appears that file names consisting of multiple words separated by spaces are represented with backslashes followed by a space and with no file extension, so my file: &quot;Word Guess.txt&quot; became &quot;Word\ Guess&quot; taking this into account I tried the &quot;git add&quot; command using this different file name representation and I wrote:</p>
<pre><code>git add Word\ Guess
</code></pre>
<p>That gave me the following warning:</p>
<p><a href=""https://i.stack.imgur.com/aPzIA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/aPzIA.png"" alt=""git add error 2"" /></a></p>
<p>I don't fully understand the warning is saying but its obviously not the result I intended.  Clearly I am missing something here.  In the response given to the similar question that I referenced at the top of this post, the commenter said that the source of the problem was that the file did not exist and that you cannot add a file before creating it but in my case it seems obvious that the file exists because the program is fully functional and has already been successfully uploaded to my GitHub page.  What am I not grasping?</p>
<p>*Edit I am becoming even more confused now.  In the last screen shot the warning message said that:</p>
<pre><code>if you added this path by mistake, you can remove it from the index with:
    git rm --cached Word Guess/bin
</code></pre>
<p>However after typing the command exactly as it appears in the Git Bash warning:</p>
<pre><code>git rm --cached Word Guess/bin
</code></pre>
<p>I got the same error as before</p>
<pre><code>fatal: pathspec 'Word' did not match any files
</code></pre>
<p>Then I tried with the alternative name representation</p>
<pre><code>git rm --cached Word\ Guess/bin
</code></pre>
<p>That gave me the following error:</p>
<pre><code>error: the following file has staged content different from both the file and the HEAD: 
Word Guess/bin
(use -f to force removal)
</code></pre>
<p>see screen shot below:</p>
<p><a href=""https://i.stack.imgur.com/ddzAl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ddzAl.png"" alt=""git add error 3"" /></a></p>
<p>I am at a total loss now for how to proceed and am frustrated that I seemingly cannot even undo the mistaken commands.</p>
","4","5457542",""
"32006810","5122231","2015-08-14 09:31:32","1","111","<git-push><git-pull><git-clone><git-remote><git-add>","Connecting to web hosting site via git in such a way that I can push and pull directly via my local pc","<p>I initialized a bare repository on server</p>

<pre><code>git init --bare  
</code></pre>

<p>and then added a remote</p>

<pre><code>git remote add origin my.hosting.website.com:my-repository.git   
</code></pre>

<p>then I am trying to pull.I used     </p>

<pre><code>pull -all my repo on server
</code></pre>

<p>Problem is when I try to pull/push an item it gives error message</p>

<pre><code>fatal: /usr/libexec/git-core/git-pull cannot be used without a working tree
</code></pre>

<p>How to resolve this issue ?</p>

<p>Sorry I am just new to git.</p>
","5","5122231",""
"67625966","12980866","2021-05-20 18:19:13","4","813","<git><commit><git-commit><git-add>","Why should someone use git add before git commit? OR why should someone use git add at all?","<p>I am not an expert in git and I understand that the whole idea behind version control is to be able to record the history of the files. If we can keep track of changes made to files in the working directory by making commits, then why should I perform <code>git add</code> to keep a record of the files when I can just <code>git commit</code>?</p>
<p>I went through <a href=""https://stackoverflow.com/questions/3673537/when-should-i-use-git-add"">this</a> thread on SO and found this:</p>
<blockquote>
<p>I use git add when I think a file is ready to be committed, even if I know I won't make the commit until some time later. All else apart, git diff reports on the differences between what is in the index (staging area) and what is out in the working directory.</p>
</blockquote>
<p>Which shows the benefit of doing <code>git add</code> before <code>git commit</code>. Are there any more such benefits or is <code>git add</code> a common convention that someone should follow (but why?), or doing <code>git commit</code> without doing <code>git add</code> works all the time?</p>
<p>Sorry if I sound dumb. Thanks in advance!!</p>
","5","12980866",""
"14491727","10608","2013-01-24 00:09:49","138","34083","<git><shell><git-add>","'git add --patch' to include new files?","<p>When I run <code>git add -p</code>, is there a way for git to select newly made files as hunks to select??</p>

<p>So if I make a new file called <code>foo.java</code>, then run git add -p, git will not let me choose that file's content to be added into the index.</p>
","0","10608","0"
"14573656","656912","2013-01-29 00:19:52","2","515","<git><git-merge><git-add>","What is the correct 'git-add' command to issue after running 'git-mergetool'?","<p>I'm unclear on the correct sequence of Git commands required to complete a merge that has resulted in conflicts. I understand that one approach is to follow the rejected merge with something like</p>

<pre><code>git mergetool
# Then once everything has been fixed
git add ??
git commit -m ""Some message""
</code></pre>

<p>but it isn't clear to me exactly what the <code>git-add</code> command should consist of in order to ensure that only the files I originally staged for the rejected merge are ultimately committed, and that only those files are committed.</p>
","10","656912","0"
"32105130","998248","2015-08-19 20:32:12","8","214","<git><interactive><git-add>","How can I make git add -p accept keystrokes without waiting for me to press Enter?","<p><code>git add -p</code> is very convenient for staging changes in an interactive fashion. At each change, it prompts the user to press a key to determine what Git should do with the change in question:</p>

<pre><code>Stage this hunk [y,n,q,a,d,/,K,j,J,g,s,e,?]?
</code></pre>

<p>Is there anyway to make git move onto the next hunk without having to hit <kbd>Enter</kbd>?</p>
","1","998248",""
"68606768","9639702","2021-08-01 01:03:25","0","812","<git><git-add><git-rm>","what does git rm do as opposed to deleting by OS and git add","<p>If we want to delete a file (say file1.txt) and stop the git repo to track it, it is said that we should use <code>git rm file1.txt</code> and then <code>git commit -m &quot;...&quot; </code> it. But deleting from the working directory by OS, <code>rm file1.txt</code>, <code>add .</code> and then <code>git commit -m &quot;...&quot;</code> do the same. what are their difference?</p>
","1","9639702",""
"68640021","16586742","2021-08-03 16:55:27","1","131","<git><version-control><git-submodules><git-add>","How do I tell git that I only want to add the current file content of a child repo, not the repo as a submodule","<p>If you clone a git repo inside of another git repo (e.g. to install code for a library or plugin into the parent repo) it appears impossible to add the file content of that directory to the parent repo as a simple commit of files, unless you delete or move the child repo's <code>.git</code> directory first.</p>
<p>You might want to instead add the repo as a submodule, in which case <code>git add submodule &lt;child_repo_url&gt; &lt;child_folder&gt;</code> will add it as two files:</p>
<pre><code>new file:   .gitmodules
new file:   child_folder
</code></pre>
<p>In which child_folder is not an actual folder, but a simple text file that contains a line like this:</p>
<pre><code>Subproject commit 3ddea2d9a36dbdbf02f9f1897b713704300b0c34
</code></pre>
<p>And the <code>.gitmodules</code> file contains the info about the repo, allowing git to later check out the exact same commit from that repo and so reconstruct all the files without actually adding them to the parent repo.</p>
<p>But, if you don't want that because you do want to simply add the files and just do <code>git add &lt;child_folder&gt;</code> instead you will see this message:</p>
<pre><code>warning: adding embedded git repository: child_folder
hint: You've added another git repository inside your current repository.
hint: Clones of the outer repository will not contain the contents of
hint: the embedded repository and will not know how to obtain it.
hint: If you meant to add a submodule, use:
hint: 
hint:   git submodule add &lt;url&gt; child_folder
hint: 
hint: If you added this path by mistake, you can remove it from the
hint: index with:
hint: 
hint:   git rm --cached child_folder
hint: 
hint: See &quot;git help submodule&quot; for more information.
</code></pre>
<p>This sounds like it has done what I want, and is warning you in case you didn't want that to happen. But in fact, it hasn't added the files.</p>
<p>Instead it has added the same <code>child_folder</code> file as the <code>git submodule add</code>, but not the <code>.gitmodules</code> entry which seems like a necessary partner for it, and neither of the two commands it suggests will actually work now, because of the action that the command has just taken.</p>
<p>The <code>git submodule add</code> command would have worked, if the previous command hadn't already added something to the git index called <code>child_folder</code>, so the command fails with <code>'child_folder' already exists in the index</code>.</p>
<p>The second command I assume would work if the first command had done what I'd wanted, and allow you to undo that action, but instead it will say</p>
<pre><code>error: the following file has staged content different from both the
file and the HEAD:
    child_folder
</code></pre>
<p>So it seems at some point, what I want to happen was the default, and this error message was added to help people who had done it by mistake. Now, it appears impossible to do this with a single command, and the old help message is out of date and unhelpful.</p>
<p>Previously, you could avoid this behaviour by being careful about using, or not using, a final / when using <code>git add child_folder/</code> to get one behaviour or the other but at some point in git's history aronud version 1.6 this workaround appears to have stopped working and you now always get the behaviour I describe.</p>
<p>There seems to be no flags you can add to the command to specify that you know the subdirectory is a repo, and that you don't care. There is a flag        <code>--no-warn-embedded-repo</code> the help for which says:</p>
<blockquote>
<p>By default, git add will warn when adding an embedded repository
to the index without using git submodule add to create an entry
in .gitmodules. This option will suppress the warning (e.g., if
you are manually performing operations on submodules).</p>
</blockquote>
<p>If you ignore everything after the &quot;e.g.&quot; then it sounds exactly what I want. But if you include the e.g. then I don't know why you would want to manually update submodules that don't exist in .gitmodules. Either way, it doesn't help. It does suppress the warning, but the action it takes remains the same.</p>
<p>My current workaround is to delete or move the .git folder from the child repo to a different location before performing the git add, but it seems like this should be a possible option to have as a preference setting or command line flag, or indeed be the default behaviour with the existing warning message as help for those who don't want that, and the existing flag for people who know that they're doing something that throws a warning, and don't care.</p>
<p>Am I missing a git command or option that would do what I want or is this just a bug in git?</p>
","1","16586742",""
"33530045","1770201","2015-11-04 19:06:51","1","655","<git><gitignore><git-add>","How to git ignore everything but one folder?","<p>I have a git repo in my home folder. I'm trying to NOT include basically the entirety of my home folder, with the exception of my .vim folder.</p>

<p>In my .gitignore, I have</p>

<p><code>
*
!.vim
</code></p>

<p>The problem is that this only adds the <code>.vim</code> directory into my git repo, but not its files and its subdirectories (and its files, and its subdirectories, and so on). I'd like to have <code>.vim</code> and ALL of its subfiles and subdirectories into my git repo. How do I change this <code>.gitignore</code> for the desired behavior?</p>
","1","1770201","0"
"34527413","1974961","2015-12-30 10:13:55","18","6094","<git><git-add>","What are the options of `git add -p`?","<p>Doing a <code>git add -p</code> I see a one diff and the list of choices :</p>

<pre><code>~/workspace$ git add -p                                              
diff --git a/gulpfile.js b/gulpfile.js                                                 
index cf91028..c3a0964 100644                                                          
--- a/gulpfile.js                                                                      
+++ b/gulpfile.js                                                                      
@@ -57,7 +57,7 @@ gulp.task(""pack"", pack);                                             
 // Minify and concatenate all js libs                                                 
 gulp.task(""libs"", function() {                                                        
        return gulp.src([                                                              
-               ""js/libs/trackjs.js"",                                                  
+       //      ""js/libs/trackjs.js"",  // hidden due to noise but not the bug          
                ""js/libs/q.js"",                                                        
                ""js/libs/jquery.js"",                                                   
                ""js/libs/cookie.js"",                                                   
Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]?
</code></pre>

<p>What does <code>Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]?</code> options means ? Where to find their explanations ?</p>
","2","1974961",""
"18034918","2648942","2013-08-03 16:26:32","11","664","<git><version-control><tabs><git-add><tab-size>","How to set tab size for hunks in ""git add -p""?","<p>I used the solution <a href=""https://stackoverflow.com/questions/15132325/how-to-set-tab-size-for-pager-used-in-git-diff"">here</a> to change tab size in <code>git diff</code> output. That works fine with <code>git diff</code>. </p>

<p>I have these settings in my <strong>.gitconfig</strong>:</p>

<pre><code>[core]    
whitespace = tabsize=4,indent-with-non-tab
pager = less -FSRX -x4
</code></pre>

<p>But those settings seems does not affect on <code>git add -p</code>.
How to set tab size for hunks in <code>git add -p</code> command?</p>
","0","2648942","0"
"51488714","","2018-07-24 00:05:16","2","3492","<git><git-add>","how to add all changes one by one with confirmation on git","<p>team,
is there a way I can add all my changes one by one with confirmation?</p>

<p>example: if I changed 10 files, then I should be prompted 10 times to add change or no. I don't want to do ""git add -A"" or add every change manually. is there an automatic way which prompts y/n before adding on git?</p>
","0","","0"
"54001982","3453898","2019-01-02 06:11:30","0","169","<git><atlassian-sourcetree><git-add><git-ls-files>","git add wont stage files - git cache confused?","<p>I have a feeling my git cache is getting confused fairly often.  I work on Mac and use both git at terminal and SourceTree.  </p>

<p>I add or modify few files but I often notice that even files I have never modified in any way show as staged.  This is very confusing already.</p>

<p>However, even more confusing is that often issuing <code>git add .</code> to add all of the files to staging area does nothing.  I have been using git for few years and have never had this before.</p>

<p>I read all posts here on SO and none of them resolved this issue for me.  I found one suggestion to clear git cache like:</p>

<pre><code>git rm --cached path/to/file
git commit -m ""Repair confused cache""
git add path/to/file
git commit -m ""Add file""
</code></pre>

<p>This did resolve the issue temporarily but soon after, the thing starts happening again.</p>

<p>I am also seeing that git ls-list --cache returns most of the files twice, including their hash codes which are identical like below and the files can be png images, code files etc:</p>

<pre><code>mymbp:source username$ cd MySolution/
mymbp:MySolution username$ git ls-files --stage
100644 a658bb41271a4285977d1074a69f3302ab5cc15e 0    .gitignore
100644 a658bb41271a4285977d1074a69f3302ab5cc15e 0    .gitignore
100644 197079698252f7f85d6b1e3f68582b9cd1a9288b 0    Publishing/GooglePlay/Icons/res/mipmap-hdpi/icon.png
100644 197079698252f7f85d6b1e3f68582b9cd1a9288b 0    Publishing/GooglePlay/Icons/res/mipmap-hdpi/icon.png
100644 f03e22933ff168571cc5efac90fd4a9bbb4e5968 0    Publishing/GooglePlay/Icons/res/mipmap-mdpi/icon.png
100644 f03e22933ff168571cc5efac90fd4a9bbb4e5968 0    Publishing/GooglePlay/Icons/res/mipmap-mdpi/icon.png
100644 9f8a69a800369b1fd37061b46e808c62747115ac 0    Publishing/GooglePlay/Icons/res/mipmap-xhdpi/icon.png
100644 9f8a69a800369b1fd37061b46e808c62747115ac 0    Publishing/GooglePlay/Icons/res/mipmap-xhdpi/icon.png
100644 64c4174f8086fb7788c5ca922fd4411d8f5050ac 0    Publishing/GooglePlay/Icons/res/mipmap-xxhdpi/icon.png
100644 64c4174f8086fb7788c5ca922fd4411d8f5050ac 0    Publishing/GooglePlay/Icons/res/mipmap-xxhdpi/icon.png
100644 97a01523dd3909b8361d96c1ebd69373db33983f 0    Publishing/GooglePlay/Icons/res/mipmap-xxxhdpi/icon.png
100644 97a01523dd3909b8361d96c1ebd69373db33983f 0    Publishing/GooglePlay/Icons/res/mipmap-xxxhdpi/icon.png
100644 ab64f8448c2d2c74564c00f1cd1aca8bf1dbf200 0    Publishing/GooglePlay/Icons/web_hi_res_512.png
100644 ab64f8448c2d2c74564c00f1cd1aca8bf1dbf200 0    Publishing/GooglePlay/Icons/web_hi_res_512.png
</code></pre>

<p><strong>UPDATE 1</strong></p>

<p>The output of <code>git config --list --show-origin</code> is:</p>

<pre><code>dinosmbp:MySolution dinob$ git config --list --show-origin
file:/usr/local/etc/gitconfig   credential.helper=osxkeychain
file:/Users/dinob/.gitconfig    core.excludesfile=/Users/dinob/.gitignore_global
file:/Users/dinob/.gitconfig    user.name=DinoB
file:/Users/dinob/.gitconfig    user.email=db@dbsystems.com
file:/Users/dinob/.gitconfig    color.ui=true
file:/Users/dinob/.gitconfig    color.status.changed=blue normal
file:/Users/dinob/.gitconfig    color.status.untracked=red normal
file:/Users/dinob/.gitconfig    color.status.added=magenta normal
file:/Users/dinob/.gitconfig    color.status.updated=green normal
file:/Users/dinob/.gitconfig    color.status.branch=yellow normal bold
file:/Users/dinob/.gitconfig    color.status.header=white normal bold
file:/Users/dinob/.gitconfig    commit.template=/Users/dinob/.dinosStandardCommitMsg
file:/Users/dinob/.gitconfig    diff.tool=meld
file:/Users/dinob/.gitconfig    difftool.prompt=false
file:/Users/dinob/.gitconfig    difftool.meld.trustexitcode=true
file:/Users/dinob/.gitconfig    difftool.meld.cmd=open -W -a Meld --args ""$LOCAL"" ""$REMOTE""
file:/Users/dinob/.gitconfig    merge.tool=meld
file:/Users/dinob/.gitconfig    mergetool.prompt=false
file:/Users/dinob/.gitconfig    mergetool.meld.trustexitcode=true
file:/Users/dinob/.gitconfig    mergetool.meld.cmd=open -W -a Meld --args --auto-merge ""$LOCAL"" ""$BASE"" ""$REMOTE"" --output=""$MERGED""
file:/Users/dinob/.gitconfig    difftool.sourcetree.cmd=/Applications/Meld.app/Contents/MacOS/Meld ""$LOCAL"" ""$REMOTE""
file:/Users/dinob/.gitconfig    difftool.sourcetree.path=
file:/Users/dinob/.gitconfig    mergetool.sourcetree.cmd=/Applications/Meld.app/Contents/MacOS/Meld ""$LOCAL"" ""$BASE"" ""$REMOTE"" --auto-merge --output=""$MERGED""
file:/Users/dinob/.gitconfig    mergetool.sourcetree.trustexitcode=true
file:.git/config        core.repositoryformatversion=0
file:.git/config        core.filemode=true
file:.git/config        core.bare=false
file:.git/config        core.logallrefupdates=true
file:.git/config        core.ignorecase=true
file:.git/config        core.precomposeunicode=true
file:.git/config        remote.origin.url=https://github.com/DBSystems/MySolution.git
file:.git/config        remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
file:.git/config        branch.develop.remote=origin
file:.git/config        branch.develop.merge=refs/heads/develop
dinosmbp:MySolution dinob$ 
</code></pre>

<p><strong>UPDATE 2</strong></p>

<p>If I try to stage a file that refuses to be staged from SourceTree, I get briefly busy spinner in SourceTree (which tells me it is trying to stage it), but then it goes away and nothing happens, the file stays unstaged.</p>

<p>If I try to stage a file that refuses to be staged from git terminal by issuing <code>git add path/file</code> or <code>git add .</code> , nothing happens and file is not staged</p>

<p><strong>UPDATE 3</strong></p>

<p>Output of <code>git ls-files --stage | hexdump -C</code> below shows two different SHA values for file IoC.cs which is currently refusing to be added to stage using <code>git add .</code> command:</p>

<pre><code>0002ae90  63 73 0a 31 30 30 36 34  34 20 65 37 32 64 31 30  |cs.100644 e72d10|
0002aea0  63 34 31 65 66 31 37 36  64 31 63 35 62 63 66 30  |c41ef176d1c5bcf0|
0002aeb0  62 36 34 63 30 32 36 34  62 32 66 63 65 65 36 65  |b64c0264b2fcee6e|
0002aec0  31 62 20 30 09 53 71 75  69 72 72 65 6c 46 6f 48  |1b 0.SquirrelFoH|
0002aed0  2f 53 71 75 69 72 72 65  6c 2e 46 6f 48 2e 56 69  |/Squirrel.FoH.Vi|
0002aee0  65 77 4d 6f 64 65 6c 73  2f 49 6f 43 2f 49 6f 43  |ewModels/IoC/IoC|
0002aef0  2e 63 73 0a 31 30 30 36  34 34 20 32 62 31 39 61  |.cs.100644 2b19a|
0002af00  36 39 33 35 39 32 66 36  64 32 31 30 38 36 38 33  |693592f6d2108683|
0002af10  63 39 31 62 61 61 30 30  62 64 62 61 62 30 63 34  |c91baa00bdbab0c4|
0002af20  31 31 61 20 30 09 53 71  75 69 72 72 65 6c 46 6f  |11a 0.SquirrelFo|
0002af30  48 2f 53 71 75 69 72 72  65 6c 2e 46 6f 48 2e 56  |H/Squirrel.FoH.V|
0002af40  69 65 77 4d 6f 64 65 6c  73 2f 49 6f 43 2f 49 6f  |iewModels/IoC/Io|
0002af50  43 2e 63 73 0a 31 30 30  36 34 34 20 37 38 39 64  |C.cs.100644 789d|
</code></pre>
","10","3453898",""
"54260133","528015","2019-01-18 19:12:28","1","1295","<git><chmod><git-push><git-add>","Read only permission for file on git","<p>I am trying to give permission 400 to a file on git and try to commit the same. But is trying to commit with permssions as "" create mode 100644 ""</p>

<p>Is it possible to commit file with 400 permissions in git or should I git clone and  handle permission change  in my code </p>
","2","528015",""
"72279268","9151520","2022-05-17 18:49:37","1","133","<git><git-diff><git-add>","git-add and git-diff use different diff tools?","<p>TL;DR I configured a difftool and <code>git-diff</code> gives &quot;intelligent&quot; diffs but <code>git-add</code> creates &quot;stupid&quot; hunks.  Why?</p>
<p>I configured the difftool to use <a href=""https://nbdime.readthedocs.io/en/latest/"" rel=""nofollow noreferrer"">nbdime</a> with <code>nbdime config-git --enable --global</code> which I think essentially just adds these lines to my .gitconfig:</p>
<pre><code>[diff &quot;jupyternotebook&quot;]
    command = git-nbdiffdriver diff
[merge &quot;jupyternotebook&quot;]
    driver = git-nbmergedriver merge %O %A %B %L %P
    name = jupyter notebook merge driver
[difftool &quot;nbdime&quot;]
    cmd = git-nbdifftool diff \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot; \&quot;$BASE\&quot;
[difftool]
    prompt = false
[mergetool &quot;nbdime&quot;]
    cmd = git-nbmergetool merge \&quot;$BASE\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot; \&quot;$MERGED\&quot;
[mergetool]
    prompt = false
</code></pre>
<p>Now <code>git diff</code> gives the good output I expect:</p>
<pre><code>nbdiff /var/folders/6b/03yw1pts2nx_q8vftrh6fv140000gp/T//FILE.ipynb FOLDER/FILE.ipynb
--- /var/folders/6b/03yw1pts2nx_q8vftrh6fv140000gp/T//FILE.ipynb  2022-05-17 14:29:39.937318
+++ FOLDER/FILE.ipynb  2022-05-17 14:09:45.222229
## inserted before /cells/0:
+  code cell:
+    source:
+      ...
+  markdown cell:
+    source:
+      ...

## deleted /cells/0:
-  markdown cell:
-    source:
-      ...

## inserted before /cells/2:
+  code cell:
+    source:
+      ...
</code></pre>
<p>But if I do <code>git add -e FOLDER/FILE.ipynb</code>, it gives me a &quot;really bad&quot; diff:</p>
<pre><code>diff --git a/FOLDER/FILE.ipynb b/FOLDER/FILE.ipynb
index 3a1540c..17363f8 100644
--- a/FOLDER/FILE.ipynb
+++ b/FOLDER/FILE.ipynb
@@ -1,621 +1,716 @@
 {
- &quot;cells&quot;: [
-  {
-   &quot;cell_type&quot;: &quot;markdown&quot;,
-   &quot;metadata&quot;: {},
-   &quot;source&quot;: [
-    ...
-   ]
-  },
-  ... almost every line in the file is removed
+  &quot;cells&quot;: [
+    {
+      &quot;cell_type&quot;: &quot;code&quot;,
+      &quot;execution_count&quot;: null,
+      &quot;metadata&quot;: {
+        &quot;id&quot;: &quot;j1qKT6qtAYEj&quot;
+      },
+      &quot;outputs&quot;: [],
+      &quot;source&quot;: [
+        ...
+      ]
+    },
+    ... almost every line in the file is added back
</code></pre>
<p>I may have a fundamental misunderstanding of what git-add does, but why isn't <code>git add</code> using the nbdime diff tool?  And is there a way I can add just the changes that I see in <code>git-diff</code> ?</p>
","0","9151520",""
"56694035","573152","2019-06-20 21:22:12","4","355","<git><git-add><format-patch>","git add --patch hunk edition: How to remove context lines?","<p>I am currently presented with the following situation:</p>
<pre class=""lang-bash prettyprint-override""><code># Manual hunk edit mode -- see bottom for a quick guide.
@@ -10130,7 +10160,22 @@ function myGreatFunc(param1, param2

             let a = funcA(b, c);
             if(funcB(a, d.a.a) &gt;= e) {
-                if(d.b === undefined
+                let f = c * parseInt(g.a[b].a);
+                if(h !== null
+                 &amp;&amp; (h.a.a &gt;= c
+                  &amp;&amp; h.a.b === b
+                  || funcA(h.a.b, h.a.a) &gt;= a
+                 )
+                ) f = 0;
+/*                if(b === 'a'
+                 &amp;&amp; c === 1
+                 &amp;&amp; d.a.name === 'b'
+                 &amp;&amp; (d.c.a.includes('c')
+                  || d.c.a.includes('d')
+                 )
+                ) console.log('e', f);*/
+
+/*                if(d.b === undefined
                  || d.b.a &gt; c * parseInt(g.a[b].a)
                  || d.b.a === c * parseInt(g.a[b].a)
                   &amp;&amp; d.b.b &lt; a
</code></pre>
<p>The goal is to remove all comments.</p>
<p>The problem here lies in the end of the hunk, which only includes the start of a block comment, and not its end. It thus keeps the last 3 lines as context, while I also want them removed.</p>
<h1>Attempt n°1</h1>
<p>Keeping the original context lines, so <code>from-file-range</code> does not need being modified</p>
<pre class=""lang-bash prettyprint-override""><code># Manual hunk edit mode -- see bottom for a quick guide.
@@ -10130,7 +10160,11 @@ function myGreatFunc(param1, param2

             let a = funcA(b, c);
             if(funcB(a, d.a.a) &gt;= e) {
-                if(d.b === undefined
+                let f = c * parseInt(g.a[b].a);
+                if(h !== null
+                 &amp;&amp; (h.a.a &gt;= c
+                  &amp;&amp; h.a.b === b
+                  || funcA(h.a.b, h.a.a) &gt;= a
+                 )
+                ) f = 0;
+
-                 || d.b.a &gt; c * parseInt(g.a[b].a)
-                 || d.b.a === c * parseInt(g.a[b].a)
-                  &amp;&amp; d.b.b &lt; a
</code></pre>
<p>Note: The leading space for each of the context lines attempted to be removed has correctly been <strong>replaced</strong> (as opposed to merely preprended), with <code>-</code>.</p>
<h1>Attempt n°2</h1>
<p>Removing the original context lines</p>
<pre class=""lang-bash prettyprint-override""><code># Manual hunk edit mode -- see bottom for a quick guide.
@@ -10130,4 +10160,11 @@ function myGreatFunc(param1, param2

             let a = funcA(b, c);
             if(funcB(a, d.a.a) &gt;= e) {
-                if(d.b === undefined
+                let f = c * parseInt(g.a[b].a);
+                if(h !== null
+                 &amp;&amp; (h.a.a &gt;= c
+                  &amp;&amp; h.a.b === b
+                  || funcA(h.a.b, h.a.a) &gt;= a
+                 )
+                ) f = 0;
+
</code></pre>
<h1>Results</h1>
<p>Both attempts were met with:</p>
<pre><code>error: patch failed: myFile.html:10130
error: myFile.html: patch does not apply
Your edited hunk does not apply. Edit again (saying &quot;no&quot; discards!) [y/n]?
</code></pre>
<h1>Notes</h1>
<p>Using <code>git version 2.22.0.windows.1</code></p>
<p>How to edit that hunk to achieve the sought-after result?</p>
","7","573152",""
"73096909","19610624","2022-07-24 08:42:36","1","230","<git><path><git-bash><git-add>","Why is ""git add"" adding ""C:/Program Files/Git/"" in front of a given path starting with ""/""?","<p>While I am trying to do <code>git add</code> for a folder or for all files, I am getting the fatal error as shown below.</p>
<pre><code>MINGW64 /c/xampp/htdocs/d95x-dev (master)
$ git add /vendor
fatal: C:/Program Files/Git/vendor: 'C:/Program Files/Git/vendor' is outside repository at 'C:/xampp/htdocs/d95x-dev'
</code></pre>
<p>It is automatically adding this path <code>C:/Program Files/Git/</code> in front of the folder name that I am trying to add.</p>
<p>Why is it doing this?</p>
<p>My folder is at the path <code>C:/xampp/htdocs/d95x-dev</code>, how can I tell <code>git add</code> to add <code>C:/xampp/htdocs/d95x-dev/vendor</code> instead?</p>
","3","19610624",""
"56380972","11233170","2019-05-30 15:12:51","2","4812","<git><git-checkout><git-add>","git checkout after a git add?","<p>I wanted to know if there is a way to go back to the previous change in a file on git. If I create a .txt file, I edit it but I don't ""git add"" can I run ""git checkout - file.txt"" and go back, but is there a way to do it after doing ""git add""?</p>
","0","11233170",""