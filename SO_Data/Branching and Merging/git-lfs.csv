Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"44530508","1916754","2017-06-13 20:02:09","8","1073","<git><git-subtree><git-lfs>","Is there a better way to do `git subtree pull` while using git-lfs?","<p>I have two repositories: <code>parent</code> and <code>child</code>.  They both use git-lfs.  I am trying to import <code>child</code> as a subtree into <code>parent</code>.</p>

<p>When in the <code>parent</code> directory, I try adding it and I get the following:</p>

<pre><code>&gt; git subtree add --prefix child [child_url]
git fetch [child_url] master
From [child_url]
* branch            master     -&gt; FETCH_HEAD
Downloading [child_binary_file_path] (12.55 KB)
Error downloading object: [child_binary_file_path] ([sha])

Errors logged to .git\lfs\objects\logs\20170613T115607.1992713.log
Use `git lfs logs last` to view the log.
error: external filter git-lfs smudge -- %f failed 2
error: external filter git-lfs smudge -- %f failed
fatal: [child_binary_file_path]: smudge filter lfs failed
</code></pre>

<p>In the log file, I see</p>

<pre><code>Error downloading object: [child_binary_file_path] ([sha]): Smudge error: Error downloading [child_binary_file_path] ([sha]): [[sha]] Object does not exist on the server: [404] Object does not exist on the server

%+v
Smudge error: Error downloading [child_binary_file_path] ([sha]): [[sha]] Object does not exist on the server: [404] Object does not exist on the server
</code></pre>

<p>Which I guess makes sense, since the binary files for <code>child</code> <em>wouldn't</em> be on the server for <code>parent</code>.</p>

<p>So, I tried adding the <code>child</code> lfs files to <code>parent</code> like this, from the <code>parent</code> directory:</p>

<pre><code>git remote add child [child_url]
git fetch child
git lfs fetch 
git lfs fetch child --all
git lfs push origin --all
</code></pre>

<p>Everything works fine until the last command.  The <code>git lfs push</code> doesn't push anything:</p>

<pre><code>&gt; git lfs push origin --all
Git LFS: (0 of 0 files, 1 skipped) 0 B / 0 B, 210 B skipped
</code></pre>

<p>It appears that it's only pushing to <code>parent</code> files that exist on <code>parent</code> branches.</p>

<p>The only way I could figure out how to add these lfs files to <code>parent</code> was to add the <code>child</code> branch to the <code>parent</code>.</p>

<pre><code>git checkout -b temp_branch child/master
git push origin
</code></pre>

<p>This then lets me successfully call <code>git subtree add --prefix child [child_url] master</code>.</p>

<p>But, since I don't want <code>temp_branch</code> on <code>parent</code>, I must immediately delete it.</p>

<pre><code>git branch -D temp_branch
git push origin --delete temp_branch
</code></pre>

<p>This works, but it feels <em>really</em> kludgey.</p>

<p>Is there a better way to call <code>git subtree add</code> when the subtree repository is using git-lfs?</p>
","0","1916754","0","0"
"66797646","4870255","2021-03-25 10:34:04","0","387","<git><git-lfs>","Show all git-lfs files on a branch (working tree)","<p><strong>How can i show all git-lfs files on a branch (working tree)?</strong></p>
<p>Before pushing to the repo i want to makes sure that the files are tracked by git-lfs and not normal git</p>
","0","4870255","",""
"54602432","8777167","2019-02-09 01:53:01","0","741","<git><unity-game-engine><git-lfs>","trying to upload Unity Files to git using LFS fails with ""GH001 large files detected"" error","<p>I am trying to upload a Unity Project to GitHub using LFS.  The size of the director is 306MB so I need to us LFS.  It always freezes during the commit process which I quit with a control c.  When I perform the push it goes then says &quot;large files detected use LFS&quot;.</p>
<p>I perform the following steps where the directory is called &quot;clickToMove&quot;</p>
<pre><code>git lfs install
git lfs track &quot;clickToMove&quot;
git add .gitattributes
git add file clickToMove
git commit -m &quot;commitMessage&quot;
git push origin master
</code></pre>
<p>I tried
git lfs track &quot;clickToMove.**&quot;
as per another Stack Overflow about the same issue
I also tried doing
git lfs track &quot;clickToMove/Assets&quot;
git lfs track &quot;clickToMove/Library&quot;
etc until all the subdirectories are tracked in the .gitattributes file</p>
<p>I get an error that says large files detected and to use LFS.</p>
<p><img src=""https://i.imgur.com/ANMOaQk.jpg"" alt=""git error"" title=""gitError"" /></p>
","0","8777167","",""
"76283191","20662516","2023-05-18 17:36:11","0","18","<git><git-lfs>","Should git lfs tracking by pattern done by every user that clones the repository?","<p>I created a git repository with LFS enabled (by default on bitbucket). Cloned it to my local machine and setup up git lfs tracking locally using patterns. Finally, I pushed the <code>.gitattributes</code> file to the repo. My questions is that all the other users who have access to this repository, do they have to do this all over again (setup patterns etc.)? or cloning <code>.gitattributes</code> file is sufficient for them to start using LFS storage?</p>
","1","20662516","",""
"76316105","8189102","2023-05-23 14:56:46","0","39","<git><merge><gitlab><version-control><git-lfs>","Merging git submodule inside main repository with LFS objects","<p>I am looking in how can I merge existing submodule to my main repository. Basically currently my repository looks somehing like this</p>
<pre><code>├── example1.java
├── example2.java
├── img
|   └── image.jpg
└── submodule
    ├── sub_example1.java
    ├── sub_example2.java
    └── img
        └── sub_image.jpg
</code></pre>
<p>And submodule repository itself looks like this</p>
<pre><code>├── sub_example1.java
├── sub_example2.java
└── img
    └── sub_image.jpg
</code></pre>
<p>What I am trying to achieve is add this <code>submodule</code> folder inside may main project.</p>
<p><code>.gitattributes</code> on both repositories looks the same</p>
<pre><code>*.jpg filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.odt filter=lfs diff=lfs merge=lfs -text
*.xls filter=lfs diff=lfs merge=lfs -text
*.xlsx filter=lfs diff=lfs merge=lfs -text
*.xla filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p>so images from img folders are stored as LFS objects</p>
<p>I have tried to follow some tutorials, for example this one <a href=""https://stackoverflow.com/a/72557462/8189102"">https://stackoverflow.com/a/72557462/8189102</a> where I would clone main repo and submodule repo beside each other like so</p>
<pre><code>├── main/
└── submodule/
</code></pre>
<p>then I would checkout -b a local branch where I want to make changes</p>
<pre><code>$ git checkout -b submodule-merge
$ git submodule deinit -f -- submodule
Cleared directory 'submodule'
error: could not lock config file .git/modules/submodule/config: No such file or directory
warning: Could not unset core.worktree setting in submodule 'submodule'

$ rm -rf .git/modules/submodule
$ git rm -f submodule
rm 'submodule'
</code></pre>
<p>Then on the <code>submodule</code> repository I would</p>
<pre><code>$ cd submodule
$ git filter-repo --to-subdirectory-filter submodule
Parsed 501 commits
New history written in 2.12 seconds; now repacking/cleaning...
Repacking your repo and cleaning out old unneeded objects
Updating files: 100% (39508/39508), done.
HEAD is now at fa01cf43 Merge branch 'JRA-2221' into 'master'
Enumerating objects: 44721, done.
Counting objects: 100% (44721/44721), done.
Delta compression using up to 4 threads
Compressing objects: 100% (27931/27931), done.
Writing objects: 100% (44721/44721), done.
Total 44721 (delta 13961), reused 44721 (delta 13961), pack-reused 0
Completely finished after 7.69 seconds.

$ ls -l
submodule

$ git lfs ls-files
119926153d - submodule/img/sub_image.jpg
</code></pre>
<p>And then when trying to do the final merge</p>
<pre><code>$ cd main
$ git remote add submodule ../submodule/
$ git fetch submodule
remote: Enumerating objects: 44702, done.
remote: Counting objects: 100% (44702/44702), done.
remote: Compressing objects: 100% (27928/27928), done.
remote: Total 44702 (delta 13950), reused 44700 (delta 13949), pack-reused 0
Receiving objects: 100% (44702/44702), 19.83 MiB | 14.37 MiB/s, done.
Resolving deltas: 100% (13950/13950), done.
From ../submodule
 * [new branch]            JRA-117 -&gt; submodule/JRA-117
 * [new branch]            JRA-221 -&gt; submodule/JRA-221
 * [new branch]            JRA-333 -&gt; submodule/JRA-333
 * [new tag]               b-211      -&gt; b-211
 * [new tag]               b-333        -&gt; b-333

$ git merge --allow-unrelated-histories --no-commit submodule/master
error: Your local changes to the following files would be overwritten by merge:
  .gitmodules submodule

$ git status
On branch submodule-merge
Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
    modified:   .gitmodules
    deleted:    submodule

$ git commit -m &quot;Rremoved submodule&quot;
[submodule-merge 1683ee7b89] Rremoved submodule
 Committer: user
 2 files changed, 4 deletions(-)
 delete mode 160000 submodule

$ git merge --allow-unrelated-histories --no-commit submodule/master
Automatic merge went well; stopped before committing as requested
</code></pre>
<p><code>$ git status</code> also shows now all the new files added under <code>submodule</code> folder. Then I commit all the changes</p>
<pre><code>$ git commit -m &quot;Added submodule&quot;
[submodule-merge 332f599182] Added submodule
 Committer: user

$ git status
On branch submodule-merge
nothing to commit, working tree clean
</code></pre>
<p>Next I try to push the changes to new branch and I get the following error regarding LFS object</p>
<pre><code>$ git push origin submodule-merge
Locking support detected on remote &quot;origin&quot;. Consider enabling it with:
  $ git config lfs.https://gitlab.example.com/main/main.git/info/lfs.locksverify true
Unable to find source for object 65cbf95fd1c7984cc8aca10ef81901e59e5bd42e05d177d1f7b6c95237a20b49 (try running git lfs fetch --all)
Uploading LFS objects:   0% (0/96), 0 B | 0 B/s, done.
error: failed to push some refs to 'gitlab.example.com:main/main.git'
</code></pre>
<p>And I get stuck here with no idea what to do.
Also when running <code>$ git lfs ls-files | grep 65cbf95f</code> on both repositories (main and submodule) There are no results, its like this object has reference somewhere but actually it does not exist.</p>
<p>I would be very thankful if someone could help me to solve this.
Thank you!</p>
","4","8189102","",""
"76375828","18354226","2023-05-31 17:02:55","1","33","<git><git-lfs>","""git show"" not showing file contents for a specific commit, but instead version and size. How can I get the file contents?","<p>I want to visualize the version of a file  at commit . For this, I type at the command line</p>
<pre><code>git show &lt;commit&gt;:Repo\Path\To\File.cs
</code></pre>
<p>According to other posts such as <a href=""https://stackoverflow.com/questions/338436/how-can-i-view-an-old-version-of-a-file-with-git"">this</a> one, I expect to see the content of the file. Instead, the output of the command is something like</p>
<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:2b19859bbc4aba8a94563fbf8c8ee88dfda3ad348ce3f769b21651055
size 108912
</code></pre>
<p>Can someone help me understand what is going on here and how can I fix it?</p>
","3","18354226","",""
"76411811","14790901","2023-06-06 06:03:41","0","37","<git><github><git-lfs>","git pull fails when pulling lfs file","<p>I'm getting an Authorization error and a 'smudge filter' error when I git pull from my publicly-visible repo. The error occurs when downloading a file that is pointed to by git lfs. My repo looks like this:</p>
<pre><code>folder
folder
.gitattributes
python file
big_binary_file.h5
</code></pre>
<p>The error I get looks like this:</p>
<pre><code>Downloading big_binary_file.h5 (262 MB)
Error downloading object: big_binary_file.h5: Smudge error: Error downloading big_binary_file.h5:
batch response: Authorization error: https://github.com/user/repo.git/objects/batch
Check that you have proper access to the repository

Errors logged to log_path/log.log
Use `git lfs logs last` to view the log.
error: external filter 'git-lfs filter-process' failed
fatal: big_binary_file.h5: smudge filter lfs failed
</code></pre>
<p>I don't believe I have any authorization issues because the other files from my repo pull seamlessly. My repo is public and a git lfs file shouldn't have any special authorization needed, right?</p>
<p>My .gitattrbutes correctly identifies that '.h5' files should be fetched using LFS. It looks like this:</p>
<pre><code>*.h5 filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p>Has anyone gotten a similar error when they git pull and can they shine light on where I went wrong or what might be the cause of this?</p>
<p>Here are things I've tried (and you might try to if you run into this page looking for advice:)</p>
<ul>
<li>I've tried following the advice in the answer to <a href=""https://stackoverflow.com/questions/43989902/git-pull-smudge-filter-lfs-failed"">this question</a></li>
</ul>
<p>My <code>lfs.url</code> is the same as <code>remote.origin.url</code></p>
<ul>
<li>I've looked at my <code>git credentials</code> to make sure they are set correctly.</li>
<li>I've verified that my repo is publicly visible and that my <code>.gitattributes</code> is setup correctly.</li>
<li>I've made sure <code>git lfs</code> is setup on my system and have used it to push to the same repo.</li>
<li>I've tried diagnosing <code>git lfs logs last</code>.</li>
<li>I tried using <code>git reset</code> and then pulling.</li>
</ul>
","0","14790901","",""
"76444534","1350400","2023-06-10 02:53:20","0","42","<git><github><git-lfs><gitattributes><git-lfs-migrate>","How to `git lfs migrate` all branches using .gitattributes","<p>We have a repository with multiple branches and merge commits. There was some disagreement at the start on whether we wanted to use LFS or not, and the result was that no files have yet been tracked with Git LFS. Now, however, we've run into issues and we would like to migrate the entire repository history, including all branches and merges, to use LFS for files specified in a new .gitattributes file. Note that this .gitattributes file is not part of the repository history.</p>
<p>So far, we've tried a  few variations on <code>git lfs migrate import --everything</code> without success. When using the <code>--fixup</code> option, the history is rewritten but nothing gets tracked by LFS. Without that option, the migration modifies our .gitattributes file and adds EVERY file type in the repo, plain text files included. We haven't yet been able to get it to respect our .gitattributes the way it was written, without modification. We tried committing our .gitattributes before the migration as well as not committing it, and also explicitly running <code>git lfs track</code> before the migration as well as not doing that.</p>
<p>We've looked at existing SO questions, but none of the answers seem to match our situation. Here are some of the others that we looked at:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/62014426/git-lfs-git-lfs-migrate-import-include-all-file-types-specified-in-gitattribute"">Git LFS git lfs migrate import include all file types specified in .gitattribute?</a></li>
<li><a href=""https://stackoverflow.com/questions/58163427/git-lfs-migrate-using-the-new-gitattributes-file"">Git-LFS migrate using the new .gitattributes file</a></li>
<li><a href=""https://stackoverflow.com/questions/76106119/how-to-use-git-lfs-and-re-write-history"">How to use Git LFS and re-write history</a></li>
</ul>
<p>Any help is greatly appreciated. Thank you!</p>
<p>Postscript: We understand that we could probably use the <code>--import</code> option repeatedly to make migrate re-create the desired .gitattributes, but I'd love to know if this is doable without that.</p>
","0","1350400","",""
"76485671","6366489","2023-06-15 21:35:13","0","21","<git><github><gitlab><git-lfs>","Detect if repo needs to use git-lfs","<p>I already know the how to migrate a repo from gitlab to github. I also know to use git-lfs if my if my repo is too big or i have large files. How can I determine if given a repo to migrate I need to use git-lfs or not? Do I just need to inspect if the blobs for the repo exceed the max size as explained below then proceed with my migration steps to use lfs or not?</p>
<p><a href=""https://stackoverflow.com/questions/10622179/how-to-find-identify-large-commits-in-git-history"">How to find/identify large commits in git history?</a></p>
","0","6366489","",""
"76578012","9971404","2023-06-29 04:11:54","0","34","<git><ansible><git-lfs>","Detect whether git lfs was installed","<p>I'm using ansible to setup git and git lfs on my server.</p>
<p>When I run <code>git lfs install</code> it says:</p>
<blockquote>
<p>Git LFS initialized.</p>
</blockquote>
<p>When I run it again, it says the same thing and returns status code <code>0</code>. That makes ansible tasks not idempotent - it appears as if it is installed every time (rather than just the first time).</p>
<p>Is there some way to detect whether it was actually installed by that command? Alternatively, how can I tell whether it is currently installed?</p>
","0","9971404","",""
"76587229","7634254","2023-06-30 08:22:15","0","8","<git><ssh><git-lfs>","Popup asking for credentials on git-lfs repeateadly","<p>I have very annoying popups that asks for password every time I try to push to a remote repo with git lfs enabled.
The popups area simple &quot;Enter passphrase for key 'name_of_the_SSH_key'. The title is &quot;Git for Windows&quot;. The commits are often still pushed if pressing cancel repeatedly (if no git-lfs objects pushed).</p>
<p>How to prevent that ?</p>
<p>More context :</p>
<ul>
<li>I use SSH, on Windows 11, git version : git version 2.41.0.windows.1.</li>
<li>That popups happen on every project.</li>
<li>I tried using manager and cache in credential gitconfig.</li>
<li>Here is my git config (following a few post suggestions, without success):</li>
</ul>
<pre><code>[credential]
  helper =
  helper = cache
  guiPrompt = false
  modalPrompt = false
</code></pre>
<ul>
<li>Result from the command <code>git gc &amp;&amp; GIT_TRACE=1 GIT_TRANSFER_TRACE=1 GIT_CURL_VERBOSE=1 git push</code>, before the popup called</li>
</ul>
<pre><code>10:15:21.819070 exec-cmd.c:243          trace: resolved executable dir: C:/Program Files/Git/mingw64/bin
10:15:21.831913 git.c:462               trace: built-in: git push
10:15:21.837497 run-command.c:661       trace: run_command: unset GIT_PREFIX; ssh git@gitlab.com 'git-receive-pack 'repo_address'
Enter passphrase for key '/c/Users/username/.ssh/id_ed25519': 
10:15:26.925370 run-command.c:661       trace: run_command: .git/hooks/pre-push origin git@gitlab.com:repo_address.git
10:15:27.026482 exec-cmd.c:243          trace: resolved executable dir: C:/Program Files/Git/mingw64/libexec/git-core
10:15:27.039931 git.c:748               trace: exec: git-lfs pre-push origin git@gitlab.com:repo_address.git
10:15:27.039931 run-command.c:661       trace: run_command: git-lfs pre-push origin git@gitlab.com:repo_address.git
10:15:27.066754 trace git-lfs: exec: git 'version'
10:15:27.142308 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'remote' '-v'
10:15:27.202861 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'remote'
10:15:27.249710 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' 'HEAD' '--symbolic-full-name' 'HEAD'
10:15:27.294826 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' '--git-dir' '--show-toplevel'
10:15:27.344745 trace git-lfs: exec: uname 
10:15:27.419941 trace git-lfs: exec: git 'config' '--includes' '-l'
10:15:27.465155 trace git-lfs: exec: git 'rev-parse' '--is-bare-repository'
10:15:27.511599 trace git-lfs: exec: git 'config' '--includes' '-l' '--blob' ':.lfsconfig'
10:15:27.558154 trace git-lfs: exec: git 'config' '--includes' '-l' '--blob' 'HEAD:.lfsconfig'
10:15:27.604909 trace git-lfs: attempting pure SSH protocol connection
10:15:27.605412 trace git-lfs: run_command: ssh -oControlMaster=auto -oControlPath=C:\Users\USERNAME\AppData\Local\Temp\sock-2312666405\sock-%C git@gitlab.com git-lfs-transfer .git upload
10:15:27.609163 trace git-lfs: exec: ssh '-oControlMaster=auto' '-oControlPath=C:\Users\USERNAME\AppData\Local\Temp\sock-2312666405\sock-%C' 'git@gitlab.com' 'git-lfs-transfer repo_address.git upload'
</code></pre>
<p>Thanks for any help or tip !</p>
","0","7634254","",""
"41200129","2715229","2016-12-17 15:28:51","2","2679","<git><amazon-s3><git-lfs>","Using git lfs with S3 compatible storage","<p>we have a local TFS 2015 environment and a S3 compatible storage where we want to store large files to. </p>

<p>I found this: <a href=""https://github.com/meltingice/git-lfs-s3"" rel=""nofollow noreferrer"">https://github.com/meltingice/git-lfs-s3</a></p>

<p>Is it possible to use it with a S3 compatible storage instead of an Amazon S3? I tried it but got stuck with the authentication and configuraton as I can't see where to specify the S3 compatible endpoint. I neither can see where the Amazon S3 endpoint is specified so I think thats hidden in the used AWS Helper libs used in this project. </p>

<p>So I think my scenarion is not possible, right? </p>

<p>Any other Ideas how to use git with S3 compatible storage? Do we have to write our own lfs api? </p>

<p>thanks.</p>
","0","2715229","",""
"59940070","7189224","2020-01-27 22:55:50","2","2016","<git><bitbucket><git-lfs>","gitlfs batch response: Post https://../info/lfs/objects/batch: ..proxyconnect tcp: tls: first record does not look like a TLS handshake","<p>I have a bitbucket server git repo with LFS turned on. Yesterday I activated the use of LFS for a number of file types in my local clone and pushed all changes, including .gitattributes in the repo root. </p>

<p>A colleague of mine pulled the changes, executed git LFS install but now finds in his clone the LFS link files instead of the real files.</p>

<p>Another git pull made no difference, and a git LFS pull gave him</p>

<pre><code>$ git lfs pull
batch response: Post https://&lt;bitbucket-server&gt;/scm/&lt;proj&gt;/&lt;repo&gt;.git/info/lfs/objects/batch: 
...proxyconnect tcp: tls: first record does not look like a TLS handshake  
error: failed to fetch some objects from 
'https://&lt;bitbucket-server&gt;/scm/&lt;proj&gt;/&lt;repo&gt;.git/info/lfs'
</code></pre>

<p>Unfortunately there is no hint on any git lfs info page what this means - and how to fix it.</p>

<p>Is there any way I can make git lfs work for the rest of the team?
And, just for curiosity, what is the reason for this message?
All git lfs tutorials pretend that it is easy to use git lfs, but obviously it isn't.</p>
","0","7189224","0","0"
"41326399","1797006","2016-12-26 04:20:56","2","774","<git><github><git-lfs>","Is there any reason why git-lfs might push more than the files size to github.com?","<p>I wanted to get started working with <code>git-lfs</code> to push a 800+ MB binary to github.com for distribution. I'm seeing</p>

<pre><code>&gt; git push origin installer
Git LFS: (0 of 1 files) 65.72 MB / 860.12           Connection to github.com closed by remote host.
Git LFS: (0 of 1 files) 1.03 GB / 860.12 MB
</code></pre>

<p>after</p>

<pre><code>git lfs install
git lfs track [file]
git add [file]
git commit -m ""[message]
git push origin [branch]
</code></pre>

<p>Is there any change that exceeding the size of the file is the expected behaviour/not a bug?</p>

<p>I'm considering splitting the binary into modules and keeping it below 100 MB, but the issue still makes me curious.</p>

<p>I'm aware of <a href=""https://help.github.com/articles/working-with-large-files/"" rel=""nofollow noreferrer"">how to work with large files on github.com</a>.</p>

<p>I'm using <code>git-lfs</code> 1.5.3 on Ubuntu 16.10 and public github.com repositories.</p>
","4","1797006","",""
"60172926","688843","2020-02-11 16:01:05","3","1089","<git><ubuntu><git-lfs>","git checkout getting ASCII file instead of binary","<p>Installed Ubuntu 18.04 on a fresh PC and a binary file gets cloned out as a text file.</p>

<p>Ran command on both old and new boxes: </p>

<pre><code>$ git checkout -f a8afd894150cc31cde43dbeb422183640b64dcab
HEAD is now at a8afd8941 did some stuff.
</code></pre>

<p>old PC: </p>

<pre><code>file composer.phar
composer.phar: data
</code></pre>

<p>new PC:</p>

<pre><code>$ file composer.phar
composer.phar: ASCII text
</code></pre>

<p>After seeing it fails, I installed/enabled git lfs: </p>

<pre><code>$ apt-get install git-lfs 
$ git lfs install
Updated git hooks.
Git LFS initialized.
</code></pre>

<p>Both <code>/root/.gitconfig</code> and <code>/var/lib/jenkins/.gitconfig</code> look identical on old and new PCs.</p>

<p>Any ideas what's wrong?</p>
","0","688843","0","0"
"49267076","895670","2018-03-13 22:47:10","0","378","<git><bitbucket><git-lfs>","Git LFS doesn't track .gitattribtes on subfolders","<p>I have like 9Gbs of folders and files for Git LFS to track. I specifically specified Git LFS to track those files with their own individual <code>.gitattributes</code> on their respective directories.</p>

<p>Uploaded (to Bitbucket) only had 2Gbs. </p>

<p>Do I have to put just only one <code>.gitattributes</code> file on the root directory?</p>
","0","895670","",""
"66831208","7584167","2021-03-27 12:13:14","0","437","<git><github><git-branch><git-bash><git-lfs>","Unable to push the code to new branch on github","<p>At first I created a new branch to push the code and then it gave me error that src.zip large file so I deleted that large file by going through the folders and I again pushed the same code and it is still showing that large file error which I have already deleted. also I created a new branch to push but it is showing the same error of the large file on this branch too. NewBie here please help.</p>
<pre><code>Uploading LFS objects: 100% (304/304), 307 MB | 1.1 MB/s, done
Enumerating objects: 1210, done.
Counting objects: 100% (1210/1210), done.
Delta compression using up to 4 threads.
Compressing objects: 100% (774/774), done.
Writing objects: 100% (788/788), 218.86 MiB | 6.96 MiB/s, done.
Total 788 (delta 257), reused 0 (delta 0)
remote: Resolving deltas: 100% (257/257), completed with 81 local objects.
remote: warning: File src/doctorPhone/RaxaFlutter/.dart_tool/flutter_build/2df7223b49177d7318e9bb97b2996866/app.dill is 54.92 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: f7149ed9934cffbf584a9a95455829192e42d3caf9ecb80f50de60b697395238
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File src.zip is 169.55 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/usename/repoName.git
 ! [remote rejected]     hipconsent -&gt; hipconsent (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/usename/repoName.git'
</code></pre>
","1","7584167","",""
"66852435","14203319","2021-03-29 10:19:47","3","1219","<git><macos><path><git-lfs><gitkraken>","Gitkraken error when pull with git-lfs on macOS","<p>I have an error during the LFS pull with Gitkraken on macOS. I get the following error message:</p>
<blockquote>
<p>Error on LFS Pull git: 'lfs' is not a git command. See 'git --help'. The most similar command is log</p>
</blockquote>
<p>In the Gitkraken documentation (<a href=""https://support.gitkraken.com/git-workflows-and-extensions/intro-and-requirements/#git-lfs-requirements"" rel=""nofollow noreferrer"">here</a>) we find the following explanation:</p>
<blockquote>
<p>Note: If GitKraken still cannot find Git or Git LFS, the terminal or CMD may be using a different path than the system or user path. For example, on OSX applications launched from the GUI have a different path than those launched from the terminal.</p>
</blockquote>
<p>To check this, we can do the following command: <code>which git-lfs</code> and <code>which git</code></p>
<p>Indeed, I get the following result:</p>
<pre><code>which git     /usr/bin/git \
which git-lfs /opt/homebrew/bin/git-lfs
</code></pre>
<p>Then, the documentation says that you have to add an environment variable in the path, the example is given for windows, but I can't reproduce the equivalent for macOS</p>
<p>In my .zshrc I have this: <code>export PATH=$HOME/bin:/usr/local/bin:$PATH</code></p>
<p>I tried it with: <code>export PATH=$HOME/bin:/usr/local/bin:/opt/homebrew/bin/git-lfs:$PATH</code> but it doesn't work</p>
<p>It's possible that the error is absolutely obvious but I don't know much about environment variables etc.</p>
","0","14203319","",""
"66858409","11591297","2021-03-29 16:58:17","2","842","<git><large-data><git-lfs><raid>","Improving performance of git repo with hundreds of thousands of small files","<p>I'm trying to improve performance of a git repository that is being used almost exclusively by me to version a scientific computing project. The project's simulation software blasts teeny (less than 100KB) plaintext files into fairly deep directories, representing separate, relatively economical simulation results. I point out that these are economical to indicate that I can create many thousands of them over the course of a short amount of time, which means this is just going to keep getting worse. These simulations are run as batches, which can mean that individual commits can include several hundred MB of data, all in the form of these deep sub-trees populated with teeny text files. The institutional computing cluster I am running this on uses a 33TB RAID6 array of platter drives to store all my group's data (if it matters, this drive doesn't have a ton of headroom by percentage at the moment--about 1.6 TB).</p>
<p>I'm reasonably sure this is bad performance on the RAID6 array's part, because when I run a top-level <code>git add .</code> it can take tens of minutes, even if only a few files have changed. Committing is just as bad. Pushing, once things are committed usually still takes minutes, but is a bit faster (and the slow part of the push is not the part where it sends the data over the network). Doing all of this in an interactive session where I've requested extra cores also speeds things up, but it can still take minutes to finish adding new simulation results. When I do the same on my laptop, which has a modern NVME-PCIE SSD in it, these operations take seconds.</p>
<p>So, any advice? I looked at git lfs, but am not convinced this would help me a ton because the pointers it would create are not a million times smaller than the files they'd be pointing to, which is the normal use case. If people still think it'd help I guess I can give that a try. Also, if it matters, the cluster's linux is old (of course) so: <code>git version 1.8.3.1</code>...</p>
<p>Happy to add more context if needed. EDIT <code>git count-objects -vH</code> returns:</p>
<pre><code>count: 1
size: 4.00 KiB
in-pack: 229216
packs: 1
size-pack: 1.25 GiB
prune-packable: 0
garbage: 0
size-garbage: 0 bytes
</code></pre>
<p>P.S. I did add the <code>large-data</code> tag even though my data can comfortably fit on one device's storage medium. I added it because the data has become large/complicated enough to become unwieldy, as the post explains. If people think that's really inappropriate I can remove it.</p>
","10","11591297","",""
"49349974","","2018-03-18 16:02:17","2","2896","<git><git-lfs>","Move git directory from one LFS-enabled repo to another (also LFS)","<p>We are looking to move a specific directory from one git repository to another. I found <a href=""http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/"" rel=""nofollow noreferrer"">these instructions</a>, which went well until the point of the pull from the remote branch; it appears that having files on both sides that are tracked by git-lfs complicates the process somewhat.</p>

<p>I tried this both directly between my local clones, as well as doing the filter-branch on a branch and pushing it to the main server (VSTS). In both cases the smudge filter failed, saying it couldn't find the LFS-tracked file; with the VSTS remote the error logged is a 404.</p>

<p>I'd like to keep these files as LFS tracked in the destination, whether the move is done using the local clones direct or involves the server. Are there any additional commands/switches or preparation steps that will allow this?</p>
","1","","",""
"68242465","16375610","2021-07-04 07:06:52","0","3021","<github><git-lfs>","""Not in a git repository"" error in git-lfs","<p>I have a over 100 mb csv file that i would like to upload to github using lfs. However, i am facing this issue (Screenshot added). I have put the csv file in the local folder where the repository is located.</p>
<p><a href=""https://i.stack.imgur.com/WH0a1.png"" rel=""nofollow noreferrer"">enter image description here</a></p>
","0","16375610","",""
"50336448","8754229","2018-05-14 18:03:40","48","55562","<git><git-lfs>","Pull ALL files from git LFS","<p>Is it possible to locally cache ALL files in a git-LFS repo for offline use? That is, make the repo usable like a normal git repo, even without an internet connection to fetch git-LFS files?</p>
","1","8754229","0","0"
"48109609","7111561","2018-01-05 08:13:40","8","3321","<git><unity-game-engine><github><git-lfs>","How to repair Unity .prefab files in git-lfs after merging","<p>I'm working on a <code>Unity3D</code> project in Unity17.2.1</p>
<p>I use git with <code>Git-LFS</code> and <code>SourceTree</code> on Windows 10.</p>
<h3>My problem is now:</h3>
<p>On my local clone everything works fine.<br>
<strong>But</strong> if I clone the project in a new folder (for testing) I get a lot of errors. It downloads the most files tracket by <code>LFS</code> just well but for some of them I get:</p>
<blockquote>
<p>Error downloading object: Assets/VRITM/_Prefabs/SceneGraph/NetworkManager/DebugHUD/ConfigurationPanel/InputField.prefab (3a0c39040b397ab7120d427e019ad767b2bd6b91386856f9730507be1b59ad3c)</p>
</blockquote>
<p>I can somehow restore the &quot;copied&quot; (newly cloned) project locally since I have exportet the whole Assets-Folder as unitypackage from my working local clone.</p>
<p>But after doing that, git still claims it is &quot;up-to-date&quot; so I can not commit/push again.</p>
<p><strong>How can I repair those LFS tracked files on the remote repository (github)?</strong></p>
<p>Since I have it all working fine on my local clone I guess there has to be some way to kind of &quot;force&quot; <code>git-lfs</code> to upload all files as I have them.</p>
<hr />
<h3>A second problem (This is solved now. See comments.)</h3>
<p>Additionally I have two scripts which I renamed before the merge:<br>
On the master it was</p>
<pre><code>DebugHUDManager.cs
ConfigurationHUDManager.cs
</code></pre>
<p>But I renamed the classes and the files to</p>
<pre><code>DebugHudManager.cs
ConfigurationHudManager.cs
</code></pre>
<p>so in my local (working) clone I have the later while when I clone newly I get the former files (..HUD..) and therefore a GameObject has only missing scripts attached. I can solve this by renaming only the files again. But this is <strong>not</strong> tracked in git also. It keeps saying &quot;up-to-date&quot;.</p>
<hr />
<p>This is my <strong>.gitattributes</strong>:</p>
<pre><code># Unity
*.cginc   text
*.cs      diff=csharp text
*.shader  text


# Unity YAML
*.anim               merge=unityyamlmerge eol=lf
*.asset              merge=unityyamlmerge eol=lf
*.controller         merge=unityyamlmerge eol=lf
*.mat                merge=unityyamlmerge eol=lf
*.meta               merge=unityyamlmerge eol=lf
*.physicsMaterial    merge=unityyamlmerge eol=lf
*.physicsMaterial2D  merge=unityyamlmerge eol=lf
*.prefab             merge=unityyamlmerge eol=lf
*.unity              merge=unityyamlmerge eol=lf


# Unity LFS
*.cubemap       filter=lfs diff=lfs merge=lfs -text
*.unitypackage  filter=lfs diff=lfs merge=lfs -text


# Image
*.ai    filter=lfs diff=lfs merge=lfs -text
*.apng  filter=lfs diff=lfs merge=lfs -text
*.astc  filter=lfs diff=lfs merge=lfs -text
*.bmp   filter=lfs diff=lfs merge=lfs -text
*.dds   filter=lfs diff=lfs merge=lfs -text
*.eps   filter=lfs diff=lfs merge=lfs -text
*.exr   filter=lfs diff=lfs merge=lfs -text
*.gif   filter=lfs diff=lfs merge=lfs -text
*.hdr   filter=lfs diff=lfs merge=lfs -text
*.jpeg  filter=lfs diff=lfs merge=lfs -text
*.jpg   filter=lfs diff=lfs merge=lfs -text
*.ktx   filter=lfs diff=lfs merge=lfs -text
*.png   filter=lfs diff=lfs merge=lfs -text
*.psd   filter=lfs diff=lfs merge=lfs -text
*.pvr   filter=lfs diff=lfs merge=lfs -text
*.svg   filter=lfs diff=lfs merge=lfs -text
*.svgz  filter=lfs diff=lfs merge=lfs -text
*.tga   filter=lfs diff=lfs merge=lfs -text
*.tif   filter=lfs diff=lfs merge=lfs -text
*.tiff  filter=lfs diff=lfs merge=lfs -text
*.webm  filter=lfs diff=lfs merge=lfs -text
*.webp  filter=lfs diff=lfs merge=lfs -text


# Audio
*.aif   filter=lfs diff=lfs merge=lfs -text
*.m4a   filter=lfs diff=lfs merge=lfs -text
*.mp3   filter=lfs diff=lfs merge=lfs -text
*.ogg   filter=lfs diff=lfs merge=lfs -text
*.wav   filter=lfs diff=lfs merge=lfs -text


# Video
*.asf   filter=lfs diff=lfs merge=lfs -text
*.avi   filter=lfs diff=lfs merge=lfs -text
*.flv   filter=lfs diff=lfs merge=lfs -text
*.mov   filter=lfs diff=lfs merge=lfs -text
*.mp4   filter=lfs diff=lfs merge=lfs -text
*.mpeg  filter=lfs diff=lfs merge=lfs -text
*.mpg   filter=lfs diff=lfs merge=lfs -text
*.ogv   filter=lfs diff=lfs merge=lfs -text
*.wmv   filter=lfs diff=lfs merge=lfs -text


# 3D Object
*.blend  filter=lfs diff=lfs merge=lfs -text
*.dxf    filter=lfs diff=lfs merge=lfs -text
*.fbx    filter=lfs diff=lfs merge=lfs -text
*.lxo    filter=lfs diff=lfs merge=lfs -text
*.ma     filter=lfs diff=lfs merge=lfs -text
*.max    filter=lfs diff=lfs merge=lfs -text
*.mb     filter=lfs diff=lfs merge=lfs -text
*.obj    filter=lfs diff=lfs merge=lfs -text


# Compressed Archive
*.7z   filter=lfs diff=lfs merge=lfs -text
*.bz2  filter=lfs diff=lfs merge=lfs -text
*.gz   filter=lfs diff=lfs merge=lfs -text
*.rar  filter=lfs diff=lfs merge=lfs -text
*.tar  filter=lfs diff=lfs merge=lfs -text
*.zip  filter=lfs diff=lfs merge=lfs -text


# Compiled Dynamic Library
*.dll  filter=lfs diff=lfs merge=lfs -text
*.pdb  filter=lfs diff=lfs merge=lfs -text
*.so   filter=lfs diff=lfs merge=lfs -text


# Compiled Static Library
*.a            filter=lfs diff=lfs merge=lfs -text
*.la           filter=lfs diff=lfs merge=lfs -text
*.lai          filter=lfs diff=lfs merge=lfs -text
*.lib          filter=lfs diff=lfs merge=lfs -text
*.llblgenproj  filter=lfs diff=lfs merge=lfs -text


# Font
*.otf  filter=lfs diff=lfs merge=lfs -text
*.ttf  filter=lfs diff=lfs merge=lfs -text


# Executable/Installer
*.apk  filter=lfs diff=lfs merge=lfs -text
*.exe  filter=lfs diff=lfs merge=lfs -text


# Documents
*.pdf  filter=lfs diff=lfs merge=lfs -text


# Other
*.reason  filter=lfs diff=lfs merge=lfs -text
*.rns filter=lfs diff=lfs merge=lfs -text
</code></pre>
<hr />
<h3>Further Notes</h3>
<ul>
<li><p>Problems started after some huge merging.</p>
</li>
<li><p>I did not have the Smart-Merging of Unity with <code>UnityYamlMerge.exe</code> activated. (I added this now.)</p>
</li>
<li><p>All of the missing files are of the types <code>.prefab</code> and <code>.unity</code>. And all of them seem to be part of my latest commits before the merge. But other <code>.prefab</code> files are downloaded fine.</p>
</li>
<li><p>Also the size seems not to matter because most of them have like 10Kb while some <code>.prefab</code> files which are downloaded well have e.g. 1,9Mb.</p>
</li>
<li><p>Asset Serialization-Mode = <em>Force Text</em></p>
</li>
<li><p>I just made another test commit with just a new <code>.prefab</code> file. That works just fine. The only thing not working are those specific <code>.prefab</code> files which were added/changed by the merge.</p>
</li>
</ul>
<p><strong>How can I rescue this project? o.O</strong></p>
<p><strong>UPDATE:</strong><br>
Meanwhile I made a new repository and copied the files (ofcourse excluding the .git folder) from my working local clone in. But ofcourse the history in the new repository is gone. But atleast we can go on working together.</p>
","4","7111561","0","0"
"38675184","2704504","2016-07-30 14:48:09","9","1917","<git><bitbucket><git-lfs><bitbucket-server>","How to direct git-lfs traffic for multiple remotes to a single endpoint?","<p>I use a workstation to develop and two remotes to store: a local (LAN) git server [origin] and a hosted (e.g. bitbucket/github) git server [cloud] for extra backup. </p>

<p>I am currently using git lfs to track png files and my available online storage is running out. As a solution, I'd like to store png files exclusively on the origin remote. To achieve this I have attempted to configure the lfsurl for my cloud endpoint to be the same as the origin. This way, I expect that pushing a png to either git endpoint would result in the image going to the same location (and <em>ignored</em> in the cloud push?).</p>

<p>For a given repo here are samples of my git config files:</p>

<p><strong>.git/config</strong></p>

<blockquote>
  <p>[remote ""origin""] <br/>
  url = ssh://git@git.myserver.com:7999/project/repo-data.git<br/>
  [remote ""cloud""] <br/>
  url = git@bitbucket.org:user/repo-data.git<br/></p>
</blockquote>

<p><strong>.lfsconfig</strong></p>

<blockquote>
  <p>[remote ""cloud""]<br/>
  lfsurl = <a href=""https://git.myserver.com/project/repo-data.git/info/lfs"" rel=""noreferrer"">https://git.myserver.com/project/repo-data.git/info/lfs</a></p>
</blockquote>

<p>Output from git lfs env</p>

<pre><code>$ git lfs env
Endpoint=https://git.myserver.com/project/repo-data.git/info/lfs (auth=none)
Endpoint (cloud)=https://git.myserver.com/project/repo-data.git/info/lfs (auth=none)
</code></pre>

<p>The above configuration is functional as images are pushed to git lfs. Unfortunately the images continue to be pushed to <em>both</em> remotes (origin + cloud). I expect the pointer file on the cloud remote, but no png. </p>

<p>I suspect my lfsurl is incorrect and git lfs is falling back to the default url for each remote, but I see no errors or warnings. Are there tools/logs to troubleshoot?</p>

<p>How to direct git lfs traffic for multiple remotes to a single endpoint?</p>

<p>Thanks.</p>
","0","2704504","0","0"
"57866402","5784831","2019-09-10 07:57:35","1","1508","<git><git-lfs>","Why does git lfs migrate not track all pdf files?","<p><strong>Note in advance</strong>: <code>git lfs migrate import --include=""*.pdf""</code> does the job as  <code>git lfs ls-files</code> shows <code>e6521dbea0 - large180m.pdf</code> (I guess). But I still don't understand what happens.</p>

<hr>

<p>I need to use <code>git lfs</code> and I created a test folder in <code>C:/Temp/</code> (on windows) to check whether everything is working. Unfortunatelly, it is not: <code>git lfs ls-files</code> does not list any files! See below...</p>

<p>(<code>small.txt</code> and <code>small2.txt</code> are empty text files, <code>large180m.pdf</code> is a ""large"" pdf with 180 MB)</p>

<p><strong>What is wrong here?</strong> I followed the instructions from <a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial"" rel=""nofollow noreferrer"">here</a>:</p>

<pre><code>SQC@N6812 MINGW64 /c/Temp
$ ls C:/Temp/*.pdf
C:/Temp/large180m.pdf

SQC@N6812 MINGW64 /c/Temp
$ git init
Initialized empty Git repository in C:/Temp/.git/

SQC@N6812 MINGW64 /c/Temp (master)
$ git add .

SQC@N6812 MINGW64 /c/Temp (master)
$ git commit -m ""Initial commit including large file""
[master (root-commit) 035a6ca] Initial commit including large file
 3 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 large180m.pdf
 create mode 100644 small.txt
 create mode 100644 small2.txt

SQC@N6812 MINGW64 /c/Temp (master)
$ git status
On branch master
nothing to commit, working tree clean

SQC@N6812 MINGW64 /c/Temp (master)
$ git lfs migrate import --include=""C:/Temp/*.pdf""
migrate: Fetching remote refs: ..., done
migrate: Sorting commits: ..., done
migrate: Rewriting commits: 100% (1/1), done
  master        035a6ca083c3300bf33b5e399a547e8141daeb05 -&gt; 53861996e1fe34a82e9b4e1f7b951266b250c4de
migrate: Updating refs: ..., done
migrate: checkout: ..., done

SQC@N6812 MINGW64 /c/Temp (master)
$ git reflog expire --expire-unreachable=now --all

SQC@N6812 MINGW64 /c/Temp (master)
$ git gc --prune=now
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (5/5), done.
Total 5 (delta 0), reused 0 (delta 0)

SQC@N6812 MINGW64 /c/Temp (master)
$ git lfs track
Listing tracked patterns
    C:\Temp\*.pdf (.gitattributes)

SQC@N6812 MINGW64 /c/Temp (master)
$ git lfs ls-files
</code></pre>

<p>Note: Finally, the lfs should track pdf in all subfolders</p>

<p>From <code>git lfs env</code>: </p>

<pre><code>git-lfs/2.3.4 (GitHub; windows amd64; go 1.8.3; git d2f6752f)
git version 2.16.2.windows.1

LocalWorkingDir=C:\Temp
LocalGitDir=C:\Temp\.git
</code></pre>
","0","5784831","",""
"50546186","1725377","2018-05-26 19:06:36","2","1223","<git><git-lfs>","Are the git ""lfs"" and ""hooks"" folders supposed to be outside of the .git folder?","<p>I've started using git-lfs for a Unity project. After installing git-lfs and committing some resource files, it all seemed to work fine. Now I noticed that there are folders in my working directory called <code>lfs</code> and <code>hooks</code> that are not inside the <code>.git</code> directory. When I do a <code>git status</code> git lists the files inside those folders as untracked new files. This is not how it's supposed to work, right? Any ideas what might be causing this and what I should check?</p>

<p>Here is the output:</p>

<pre><code>$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        deleted:    Assets/Scripts/PlayerController/FOVKick.cs
        deleted:    Assets/Scripts/PlayerController/LerpControlledBob.cs

Changes not staged for commit:
  (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        deleted:    Assets/Scripts/PlayerController/FOVKick.cs.meta
        deleted:    Assets/Scripts/PlayerController/LerpControlledBob.cs.meta

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)
        hooks/
        lfs/
</code></pre>

<p>This is the .gitattributes file in the project root:</p>

<pre><code>## Unity ##

*.cs diff=csharp text
*.cginc text
*.shader text

*.mat merge=unityyamlmerge eol=lf
*.anim merge=unityyamlmerge eol=lf
*.unity merge=unityyamlmerge eol=lf
*.prefab merge=unityyamlmerge eol=lf
*.physicsMaterial2D merge=unityyamlmerge eol=lf
*.physicsMaterial merge=unityyamlmerge eol=lf
*.asset merge=unityyamlmerge eol=lf
*.meta merge=unityyamlmerge eol=lf
*.controller merge=unityyamlmerge eol=lf


## git-lfs ##

# Image
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.ai filter=lfs diff=lfs merge=lfs -text

# Audio
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.wav filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text

# Video
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text

# 3D Object
*.FBX filter=lfs diff=lfs merge=lfs -text
*.fbx filter=lfs diff=lfs merge=lfs -text
*.blend filter=lfs diff=lfs merge=lfs -text
*.obj filter=lfs diff=lfs merge=lfs -text

# Other
*.a filter=lfs diff=lfs merge=lfs -text
*.exr filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.pdf filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text
*.dll filter=lfs diff=lfs merge=lfs -text
*.unitypackage filter=lfs diff=lfs merge=lfs -text
*.aif filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
*.rns filter=lfs diff=lfs merge=lfs -text
*.reason filter=lfs diff=lfs merge=lfs -text
*.lxo filter=lfs diff=lfs merge=lfs -text
</code></pre>
","0","1725377","",""
"34027762","80869","2015-12-01 18:45:21","4","2663","<git><git-lfs>","Fetch a single LFS file from protected github repo","<p>I have switched from dropbox + script to github LFS to store large files.
Do you know a way to fetch a file stored in LFS using a simple curl/wget command? </p>

<p>To give you a bit of a background. The repository contains puppet code that automates our deployments. Since our company is using preoperative software we need to store some binary packages next to our puppet repo.</p>

<p>We deploy to two infrastructures one with git LFS and one without. (This issue cannot be easily fixed). On the former system I'd like to simply fetch the large files manually using curl / wget.</p>
","3","80869","0","0"
"34083386","566901","2015-12-04 07:53:18","5","3247","<git><tfsbuild><azure-devops><git-lfs>","Check out git-lfs files on VSTF build","<p>I've a repository hosted on VSTS, containig a file stored through git-lfs. If I just let VSTS build checkout the repository it just downloads the git-lfs metadata file containing the ID of the file. </p>

<p>Here's the output how VSTS gets its source:</p>

<pre><code>Syncing repository: MyRepo (Git)
Checking out c84ef2f2bbad4fa3dc70dbd4100534390b9c8f18 to d:\work\73\s
Checked out branch refs/heads/develop for repository MyRepo at commit c84ef2f2bbad4fa3dc70dbd4100534390b9c8f18
</code></pre>

<p>What do I need to do to checkout the real file?</p>

<p>Edit: I assume I need to manually call <code>git lfs fetch</code> after VSTS checked out the source. But how can I handle authentication (which is required by VSTS) in this case?</p>
","2","566901","0","0"
"50760795","473899","2018-06-08 12:34:41","10","1935","<git><git-lfs>","How to print a Git LFS file's old version to stdout (git show / git cat-file for LFS)?","<p>Another title for this question could be 'How to checkout multiple versions of a Git-LFS managed file?'</p>

<p>I would like to inspect several versions of a file stored in Git-LFS. I would therefore like to several versions of this file side-by-side in my working directory. Something like this is what I have in mind:</p>

<pre><code>git show v1:./myfile.ipynb &gt; myfile-v1.ipynb
git show v2:./myfile.ipynb &gt; myfile-v2.ipynb
</code></pre>

<p>This does not work as desired: the file is managed by Git-LFS, so to <code>git  show</code> its contents at each version looks like</p>

<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:62aafe00ec8b61a37dd729e7d3a723382...
size 20439
</code></pre>

<p>I am interested in the file's 'true', Git-LFS-managed contents, rather than the pointer file that LFS stores in Git's own tree.</p>

<p>How can I create untracked, custom-named files that each contain a specific version of a file tracked by Git-LFS? This does not need to be a single command, I am resigned to Git needing multi-step scripts for single-concept actions.</p>
","0","473899","0","0"
"34181356","1484601","2015-12-09 14:31:45","93","33184","<git><git-lfs>","Where are git-lfs files stored?","<p>I am trying to figure out how to use git-lfs. I use a gitlab EE server.</p>

<p>Maybe I missed something, but I failed to find any documentation on git-lfs beyond very short tutorial introducing the ""track"" command and cute 1 minute videos.</p>

<p>For example, I add and track a 3.7GB tar file in a repo, and push it:</p>

<pre><code>git lfs track ""*.tar""
cp &lt;a folder&gt;/a.tar .
git add a.tar 
git commit -m ""add a.tar""
git push origin master
</code></pre>

<p><strong>Question 1</strong>: at the end of this process, has a.tar been uploaded on the gitlab server ? It is unclear as the ""add"" and the ""commit"" commands took some time (maybe not long enough to let me wonder if the 3.7GB were uploaded during that time) but the push did not take any time at all (a fraction of second).</p>

<p><strong>Question 2</strong>: if the file was uploaded on the server, where ? Obviously not in the same place as the repo (that is the point). I asked because my server is being backed-up, and I need to know if the use of git-lfs requires me to update this in any way.</p>

<p><strong>Question 3</strong>: if the file was not uploaded, does this mean other users of the repo will get the link to the file on the original machine on which the file was added ? Is there a way to change this to a location on the server ? (back to question 2)</p>

<p><strong>Question 4</strong>: after cloning the repo, indeed the full 3.4G file is not there, ""just"" a text file with the content:</p>

<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:4bd049d85f06029d28bd94eae6da2b6eb69c0b2d25bac8c30ac1b156672c4082
size 3771098624
</code></pre>

<p>This is of course awesome and the whole point. But what if access to the full file is required ? how to download it ?</p>

<p>I would be happy with either direct answer to this question or a link toward a proper documentation.</p>
","0","1484601","0","0"
"69130913","1245262","2021-09-10 10:32:52","0","1328","<git><git-lfs>","Why can't I get git lfs to track a file","<p>I'm trying to use git lfs to track a large file, but cannot seem to add it to the repo as an lfs tracked file. The procedure I use is:</p>
<pre><code>$ git lfs track &quot;DeepMask.pth.tar&quot;
Tracking &quot;DeepMask.pth.tar&quot;
$ git add .gitattributes
</code></pre>
<p><code>.gitattributes</code> appears to have recognized the file I want git to track as an lfs file:</p>
<pre><code>$ cat .gitattributes 
DeepMask.pth.tar filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p>So at this point, I think all is well. However, when I try to add the file to my repo as follows:</p>
<pre><code>$ git add DeepMask.pth.tar 
</code></pre>
<p>The file does not seem to be added as an lfs file:</p>
<pre><code>$ git lfs status
On branch documentBranch
Objects to be pushed to origin/documentBranch:


Objects to be committed:

    .gitattributes (Git: e33cf7c)
    DeepMask.pth.tar (Git: 08f4391)

Objects not staged for commit:

$ git lfs ls-files
$ 
</code></pre>
<p>What am I doing wrong here? I saw the same problem with a solution at <a href=""https://stackoverflow.com/questions/55931154/staged-git-lfs-files-not-being-intercepted-by-git-lfs"">Staged git lfs files not being intercepted by git-lfs</a>, but the solution there was to use double-quotes  in the <code>git lfs track</code> statement. I am already doing that. Although, unlike the person who posted that question, I'm running Ubuntu 20.04.</p>
<p>I've tried replacing <code>git lfs track &quot;DeepMask.pth.tar&quot;</code> with `git lfs track &quot;*.tar&quot;, and even replacing the double-quotes with single quotes, in case I had the reverse of the problem found in <a href=""https://stackoverflow.com/questions/55931154/staged-git-lfs-files-not-being-intercepted-by-git-lfs"">Staged git lfs files not being intercepted by git-lfs</a>, but to no avail.</p>
<p>==================================================================</p>
<p>I tried a simpler case, just creating a fresh git repository and seeing if I could add my large file to it.</p>
<pre><code>$ mkdir tmpGit
$ cd tmpGit

$ git init
Initialized empty Git repository in ~/Projects/tmpGit/.git/

$ ls
DeepMask.pth.tar &lt;Note: I copied this file to my new directory using Nautilus&gt;

$ git lfs track &quot;*.tar&quot;
Tracking &quot;*.tar&quot;

$ cat .gitattributes 
*.tar filter=lfs diff=lfs merge=lfs -text

$ git add DeepMask.pth.tar 
$ git add .gitattributes 

$ git lfs status

Objects to be committed:

    .gitattributes (Git: 116c15b)
    DeepMask.pth.tar (Git: 08f4391)

Objects not staged for commit:


$ git lfs ls-files
$ 
</code></pre>
<p>Just to see exactly what files are in this directory and how large they are:</p>
<pre><code>$ ls -alh
total 133M
drwxrwxr-x  3 me me 4.0K Sep 10 09:02 .
drwxrwxr-x 47 me me 4.0K Sep 10 09:01 ..
-rw-rw-r--  1 me me 133M Aug 19 22:24 DeepMask.pth.tar
drwxrwxr-x  8 me me 4.0K Sep 10 09:03 .git
-rw-rw----  1 me me   42 Sep 10 09:02 .gitattributes
</code></pre>
<p>Note: I obtain the same result when I create a small text file with the single word &quot;Hello&quot;, and try to store it using git-lfs</p>
","5","1245262","",""
"34244821","1879101","2015-12-12 20:48:54","8","1480","<git><git-lfs>","git-lfs: fatal: Cannot handle files this big (4.3G)","<p>Using git-lfs/1.1.0 (GitHub; linux 386; go 1.5.1), file size 4.3G.</p>

<pre><code>git init
git lfs install
git lfs track *.nnex
</code></pre>

<p>.gitattributes: <code>*.nnex filter=lfs diff=lfs merge=lfs -text</code></p>

<p><code>git add evernote-backup.nnex</code>: <code>fatal: Cannot handle files this big</code></p>

<p><code>git lfs ls-files</code>: <code>Git can't resolve ref: ""HEAD""</code></p>

<p><code>git lfs track</code>: <code>Listing tracked paths evernote-backup.nnex .gitattributes)</code></p>

<p><code>git lfs env</code>:</p>

<pre class=""lang-none prettyprint-override""><code>WARNING: Reading LFS config from "".gitconfig"", not "".lfsconfig"". Rename to "".lfsconfig"" before Git LFS v2.0 to remove this warning.
git-lfs/1.1.0 (GitHub; linux 386; go 1.5.1)
git version 2.1.4

LocalWorkingDir=/home/vitaly
LocalGitDir=/home/vitaly/.git
LocalGitStorageDir=/home/vitaly/.git
LocalMediaDir=/home/vitaly/.git/lfs/objects
TempDir=/home/vitaly/.git/lfs/tmp
ConcurrentTransfers=3
BatchTransfer=true
git config filter.lfs.smudge = ""git-lfs smudge %f""
git config filter.lfs.clean = ""git-lfs clean %f""
</code></pre>

<p>I am getting the following error:</p>

<blockquote>
<pre><code>git-lfs: fatal: Cannot handle files this big (4.3G)
</code></pre>
</blockquote>
","10","1879101","0","0"
"57595420","9355850","2019-08-21 15:58:53","21","8874","<git><atlassian-sourcetree><git-lfs><gitattributes>","Can I exclude some files from git-lfs?","<p>I created a repo with some image files. I have .gitignore and .gitattributes that I want to exclude from lfs. So I need to track all files by lfs but not .gitignore and .gitattributes.</p>

<p>I' m using Sourcetree and I tried that in .gitattributes:</p>

<pre><code>.gitignore      text
.gitattributes  text
*               filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>But all of my files getting tracked by lfs.</p>
","1","9355850","0","0"
"50819763","1647457","2018-06-12 14:34:29","0","705","<git><git-lfs>","git lfs tracking file of type where size is above","<p>So i am using <code>git lfs</code> in my unity project. </p>

<p>Now in unity, a file called <code>.asset</code> doesn't necessarily mean that it is huge but it can grow to a huge amount over time.</p>

<p>my question is: </p>

<p><strong>is it possible to track .asset files that has a size above 50mb ?</strong></p>
","0","1647457","",""
"38961731","4154185","2016-08-15 19:30:07","3","1527","<linux><git><git-lfs>","Is there a way to download actual file from git lfs pointers?","<p>I have a git repository in which I have <code>git-lfs</code> pointers for some large files. If one clones the repository he can download the actual file using <code>git lfs pull</code>.</p>

<p>But if someone downloads repository working directory, it's not a git repository  so <code>git lfs pull</code> won't work. </p>

<p>Is it possible to get the large files without cloning the repository?</p>

<p>Also <code>git lfs pull</code> downloads every <code>big-file</code> for which there is a <code>git-lfs</code> pointer. Is there a way to download only a particular file among these big files and keep the rest as <code>text-pointers</code>?</p>
","3","4154185","0","0"
"57927809","613876","2019-09-13 17:12:32","0","2957","<git><github><repository><branching-and-merging><git-lfs>","Using git-lfs how do I setup a new branch with a new repository while keeping the old branch and repository?","<p>So there are quite a few questions on git in regards to setting up a new repository and adding branches etc, but in my case the extra element of git-lfs has caused quite a bit of trouble. I actually have the answer (something that is working in a desired fashion) at this point, but it comes after many articles and research so to save someone else the hassle I am putting this together. (as a side note if someone has a better answer please chime in and I will happily accept your response. </p>

<p>Here is my scenario:</p>

<p>Repo - A (has all commits and branches) - some developers work here</p>

<p>| Branch A1--- >> more branches with other developers working</p>

<p>Repo - B (has no commits or branches) - some developers will be doing work here</p>

<p>I need to be able to move code fluidly from one to the other and starting out Repo A only has one remote. Oh yes and gitlfs is involved - so most of the walkthroughs as mentioned above do not say what needs to happen next.</p>

<p>When I started this adventure, my initial setup was to clone Repo B and then bring Repo A over into B. That was a disaster, final solution there was just to wipe the repo and start again. After doing some more research I found that a better solution would be to setup from Repo A and add a branch then change remote and upstream. Here are is one of the errors that I ran into along the way:</p>

<p>Currently in the master branch of Repo A when I start issuing these commands:</p>

<pre><code>git remote -v
</code></pre>

<p>(this shows what your current remotes are)
origin <a href=""https://something.repoA.git"" rel=""nofollow noreferrer"">https://something.repoA.git</a> (fetch)
origin <a href=""https://something.repoA.git"" rel=""nofollow noreferrer"">https://something.repoA.git</a> (push)</p>

<p>The error that I got caught up on was this one:</p>

<p>open C:\somefile: the system cannot find the file specified
error: failed to push some refs to '<a href=""https://something.repoB.git"" rel=""nofollow noreferrer"">https://something.repoB.git</a>'</p>
","0","613876","",""
"67369505","765151","2021-05-03 13:10:19","0","846","<git><git-lfs><gitattributes>","Git LFS: How to make .gitattributes catch multiple extension-less files with the same name, but in different folders, without files with extension","<p>I'm trying to set up the .gitattributes for Git LFS to catch all extension-less files with a certain name. They are scattered out across different folders. And I don't want it to catch those with same name, but with an extension.
Example:</p>
<pre><code>A/B/C/D/Foo
A/B/C/D/Foo.meta
A/B/C/D/E/Foo
A/B/C/D/E/Foo.meta
A/B/F/Foo
A/B/F/Foo.meta
</code></pre>
<p>The three Foo files should be catched, but the three Foo.meta-files shouldn't.</p>
<p>More files of this kind might occur in automatically generated folders throughout production. So hardcoding the paths is not ideal.</p>
<p>I've tried adding the following to my .gitattributes:</p>
<pre><code>Foo diff=lfs merge=lfs -text
</code></pre>
<p>That almost works, but also catches the Foo.meta-files. The following is not allowed because “Negative patterns are ignored in git attributes”:</p>
<pre><code>Foo diff=lfs merge=lfs -text
!.meta diff=lfs merge=lfs -text
</code></pre>
<p>Any help would be much appreciated!</p>
","0","765151","",""
"35575400","2002510","2016-02-23 10:48:00","77","19006","<git><git-lfs>","What is the advantage of git lfs?","<p>Github has a <a href=""https://help.github.com/articles/conditions-for-large-files/"">limit</a> on push large file. So if you want to push a large file to your repo, you have to use <a href=""https://git-lfs.github.com/"">Git LFS</a>. </p>

<p>I know it's a bad idea to add binary file in git repo. But if I am using <a href=""https://about.gitlab.com/"">gitlab</a> on my server and there is no limit of file size in a repo, and I don't care the repo size to be super large on my server. In this condition, what's the advantage of git lfs?<code>git clone</code> or <code>git checkout</code> will be faster?</p>
","6","2002510","0","0"
"58390325","11578177","2019-10-15 08:26:25","1","1322","<git><bitbucket><git-lfs>","Bitbucket Maximum repo size with git-LFS","<p>I have a repository on bitbucket and I plan pushing some big files ( ~5gb ) on it. The files are marked as lfs with git-lfs but I cannot stop wonder if there are limitations even with that. So after reading <a href=""https://confluence.atlassian.com/bitbucket/what-kind-of-limits-do-you-have-on-repository-file-size-273877699.html"" rel=""nofollow noreferrer"">this</a> I still cannot understand If I will hit a limit or not.</p>
<p>Also is the limit only applied on the repository? So if I have 10 repositories of 1gb each under 1 project of 1 organization it will not be a problem correct?</p>
<p>Thank you!</p>
","0","11578177","",""
"51206681","2149553","2018-07-06 09:01:24","4","960","<git><git-lfs>","git lfs ls-files of a specific commit","<p>I wanted to see how the lfs track list was at a specific commit.</p>

<p>Tried:</p>

<p><code>git lfs ls-files &lt;commit sha&gt;</code></p>

<p>But it listed me files that could not be there at that commit, most probably this is printing me files being tracked right now, ignoring the ref commit I passed.</p>

<p>The help of the commad says:</p>

<pre><code>$ git lfs ls-files --help
git lfs ls-files [&lt;ref&gt;]

Display paths of Git LFS files that are found in the tree at the given
reference.  If no reference is given, scan the currently checked-out branch.
An asterisk (*) after the OID indicates a LFS pointer, a minus (-) a full object.
</code></pre>

<p>Is there any way of doing this? Am I missing something?</p>

<p>EDIT because of the questions:
Lets say in my initial commmit (51915d5) I've only commited a .gitattributes and a .gitignore file.</p>

<p>If I try: </p>

<pre><code>git lfs ls-files 51915d5
</code></pre>

<p>It prints me <strong>ALL</strong> the files tracked by LFS <strong>in my last commit.</strong></p>
","1","2149553","0","0"
"45328105","940208","2017-07-26 13:13:36","0","615","<git><github><push><git-push><git-lfs>","git lfs track fails on bare git repo","<p>I'm converting SVN repo to a Git one. This finished succesfully and now I have a bare Git repo tham I'm trying to push to GitHub:</p>

<pre><code>git push -u origin master
</code></pre>

<p>But this produces an error:</p>

<pre><code>remote: error: File root/data/big_file.conf is 187.98 MB; this exceeds GitHub's file size limit of 100.00 MB
</code></pre>

<p>OK, so I decided to use lfs:</p>

<pre><code>brew install git-lfs
git lfs install
</code></pre>

<p>Now while trying track my big files:</p>

<pre><code>git lfs track ""*.conf""
</code></pre>

<p>I'm getting this error:</p>

<pre><code>This operation must be run in a work tree.
</code></pre>

<p>How can I solve this?</p>
","5","940208","",""
"35625644","4997872","2016-02-25 11:12:58","3","4115","<git><git-lfs>","Does Git-Extensions support git lfs?","<p>I couldn't find any information on that topic.</p>

<p>Since Git-Extensions uses mainly (or is it: only) the command line to work with the repository my assumption is, that it should be OK with git lfs.
Diff, Blaming, File-History etc. shouldn't be a problem since lfs will only handly binary files.</p>

<p>But since that part of Git-Extensions (Diff, Blaming, File History) is quite weak (does not behave quite deteministic in my opinion) I was wondering if we would run into a problem when using git lfs.</p>

<p>Has anyone reliable information/experience when working with Git-Extensions and git lfs?</p>

<p>Thanks</p>
","0","4997872","0","0"
"51309399","5900271","2018-07-12 15:24:51","2","1553","<git><git-clone><git-lfs>","How to add lfs support to this git setup?","<p>I've set up my git repos like this: a bare repo on my HDD and a clone of it on my SSD. The bare repo is acting as a backup. Now I want to add lfs support to it and can't figure out how. I tried doing this in the clone repo:</p>

<pre><code>git lfs install
git lfs track '*.png'
</code></pre>

<p>Now I create <code>test.png</code> in that directory.</p>

<pre><code>git add .
git commit -m ""added png file""
git push origin master
</code></pre>

<p>After running the last line I get this error:</p>

<pre><code>Remote ""origin"" does not support the LFS locking API. Consider disabling it with:
$ git config lfs.D:/Git/test.git/info/lfs.locksverify false
batch request: missing protocol: ""D:/Git/test.git/info/lfs""
error: failed to push some refs to 'D:/Git/test.git'
</code></pre>

<p>Doing <code>git config lfs.D:/Git/test.git/info/lfs.locksverify false</code> doesn't help.
I think I'm misunderstanding how lfs sould be set up, but I couldn't find any tutorials on how to do it locally. I'm also not sure if it can even work without a server for lfs cache. Any help on how to set this up would be appreciated!</p>
","1","5900271","",""
"69576791","1086346","2021-10-14 20:08:24","0","270","<git-lfs>","git lfs 404 error: decipher error message to deduce file name","<p>I am moving several Git repositories that use LFS. I'm able to clone the repo into new system, then manually retrieve LFS files and upload. Command sequence is:</p>
<ol>
<li><p>Create the new repo.  We used Azure ADO import, which worked OK, but it does not bring in the LFS files.</p>
</li>
<li><p>Clone that new repo. Call that <code>origin</code></p>
</li>
<li><p>Manually get LFS files</p>
<p>A. <code>git remote add source URL_FOR_ORIGINAL_REPO</code></p>
<p>B. <code>git lfs fetch source --all</code></p>
<p>C. <code>git lfs push origin --all</code></p>
</li>
</ol>
<p>All good, except</p>
<p>In one case, a few files are missing from the source server, most likely because of a user error in the past.  Since users have come and gone, there's no guarantee we can find that user or their computer.</p>
<p>But I need to know what is missing.  Here's how the problem looks.  When we try to fetch, error is like this</p>
<pre><code>$ git lfs fetch source --all
fetch: 490 object(s) found, done.
fetch: Fetching all references...
[24d6ffa33aa5a786b0f0d0f542c2660bc886b14ce15203ea78cf971e5447e8ca] LFS object not found: [404] LFS object not found
[4ffaa18643534971c53b3bf3e419d51ebb6735449ef745626e17f8521cf92fe6] LFS object not found: [404] LFS object not found
[575b9fb4521dc75e39ec2741b75486f2069cf6baf0d00338129bb2a6f6dfcbad] LFS object not found: [404] LFS object not found
</code></pre>
<p>How can I trace from this</p>
<pre><code>[24d6ffa33aa5a786b0f0d0f542c2660bc886b14ce15203ea78cf971e5447e8ca] 
</code></pre>
<p>to the name of the branch and file that are missing from the repo?</p>
<p>It seems like there should have a simple answer, but I'm not finding any.</p>
<p><a href=""https://stackoverflow.com/a/35266717/1086346"">https://stackoverflow.com/a/35266717/1086346</a> : from 2016, suggests we run <code>git lfs push --object-id origin 24d6ffa33aa5a786b0f0d0f542c2660bc886b14ce15203ea78cf971e5447e8ca</code> but if I don't have the source file, how will this help?</p>
<p><a href=""https://github.com/git-lfs/git-lfs/issues/4099"" rel=""nofollow noreferrer"">https://github.com/git-lfs/git-lfs/issues/4099</a> : same problem, infeasible suggestions</p>
<p><a href=""https://stackoverflow.com/a/68591097/1086346"">https://stackoverflow.com/a/68591097/1086346</a> : doesn't explain how to get file path</p>
","0","1086346","",""
"69581510","4274952","2021-10-15 07:52:33","1","470","<azure-devops><azure-pipelines><git-lfs><azure-pipelines-yaml>","Azure Pipelines: git lfs not known with explicit declaration but UI config","<p>Facing a weird behaviour when we wanted to use git lfs to checkout a repository in a pipeline. When adding the step explicitly to the <code>azure-pipeline.yml</code></p>
<pre><code>  - checkout: self
    lfs: true
</code></pre>
<p>the pipeline fails with:</p>
<pre><code>git: 'lfs' is not a git command. See 'git --help'.
##[error]Git-lfs installation failed with exit code: 1
</code></pre>
<p>Without the explicit checkout step we've seen that <code>git-lfs</code> is actually pre-installed:</p>
<pre><code>Syncing repository: repo-name (Git)
git version
git version 2.27.0
git lfs version
git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.4)
</code></pre>
<p>however, it is not performing a git lfs checkout!</p>
<p>We've just figured out that this only happens when setting it additionally in the Edit Pipeline / Trigger &gt; YAML Settings to LFS, refer to picture. This is not really clear for me why the lfs checkout fails when calling it explicitly as it's not installed, but otherwise it is indeed pre-installed, however, will only work if configured in the UI. Did I miss anything?</p>
<p><a href=""https://i.stack.imgur.com/K95Vt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/K95Vt.png"" alt=""UI Specification"" /></a></p>
","0","4274952","",""
"52680338","288568","2018-10-06 15:02:08","1","1196","<git><continuous-integration><gitlab><gitlab-ci-runner><git-lfs>","How can I locally test a gitlab runner script, when the repository uses LFS","<p>I am working with GitLab runners and have to test them locally before pushing.</p>

<p>This can be done using</p>

<pre><code>gitlab-runner exec docker testing 
</code></pre>

<p>And works well.</p>

<p>Now, if the repository uses LFS, this does not work any longer and I get errors like</p>

<pre><code>batch request: missing protocol: ""/home/self/workspace/project.git/info/lfs""
</code></pre>

<p>That seems to be because you cannot just clone a local folder to another one, if LFS is used.</p>

<p>There is a workaround using <code>git clone --reference</code> <a href=""https://github.com/git-lfs/git-lfs/issues/1207"" rel=""nofollow noreferrer"">suggested</a></p>

<p>But how can this be applied to gitlab runner?</p>
","0","288568","",""
"73503589","6747164","2022-08-26 15:48:45","0","217","<git><atlassian-sourcetree><git-lfs>","Sourcetree asks to download binary content for git lfs on every startup","<p>Face the same problem when I open Sourcetree.
My Sourcetree version is 3.4.9.</p>
<p><a href=""https://i.stack.imgur.com/W8tKj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/W8tKj.png"" alt=""enter image description here"" /></a></p>
<p>does anyone know how to fix it?</p>
","3","6747164","",""
"73540727","12386300","2022-08-30 10:11:52","0","27","<git><git-lfs>","git-am --keep-cr not effective on LFS tracked files?","<p>Let’s say, we have some dev teams spread in the world, and there is a Git repo with lots of legacy code, including large XML files (actually databases, containing diverse data with mixed newlines).
There is some data exchange between loosely attached teams, which happened using Git Patches (git format-patch ...).
This has worked for a while, however the party who received the patches had to use <code>git am --keep-cr ...</code>, without <code>--keep-cr</code> it failed with obscure <code>patch does not apply</code> messages, although when we tested it originally, <code>git apply --check ...</code> was happy, only <code>git-am</code>was not.</p>
<p>Now a new stakeholder enters the game. They use another local git repo mirror, which needs to receive the changes. The only difference is that this time the repo was configured with Git-LFS for performance considerations.
Result: <code>git am --keep-cr</code> method does NOT work there. It fails again with obscure issues, like:</p>
<pre><code>$ git am --keep-cr 0001-feature-X.patch
warning: quoted CRLF detected
error: patch failed: Config/platform.xml:5523
error: Config/platform.xml: patch does not apply
error: patch failed: Config/target.arxml:150
error: Config/target.xml: patch does not apply
…
</code></pre>
<p>But why? We checksummed the contents, the original files are identical. The very same command works fine in the old repos. It only does NOT work on LFS-tracked files.</p>
<p>Out of desperation, we brought a copy of <code>.git</code> data to the LFS using site, attached as another git remote source and tried cherry-picking. And then, the very same errors started appearing, in a cherry-pick. But there is no issue using a similar
cherry-pick in the original repo on a sandbox branch.</p>
<p>So what is wrong with LFS-tracked files, what makes git's patch processing so dumb when working on them, even ignore --keep-cr?</p>
","0","12386300","",""
"73570861","8956751","2022-09-01 14:14:34","0","62","<git><github><git-lfs>","Migrating a repository to github with LFS object","<p>I'm migrating my repositories to github. So far so good except for one repo. In fact, when migrating this repo, I have following error:</p>
<pre><code>error: File Project/Resources/AssessmentTool.zip is 134.92 MB; this exceeds GitHub's file size limit of 100.00 MB
</code></pre>
<p>So, I tried to use git lfs to tackle this as following:</p>
<pre><code>git clone --mirror $oldURL
cd MY_CLONE
git remote add remoteName $newURL
git lfs push --all
</code></pre>
<p>But I have nothing on github.
So, what's the best procedure to migrate from a git server to github by also including LFS?</p>
","0","8956751","",""
"73622554","6240756","2022-09-06 13:04:25","0","407","<windows><git><ansible><git-lfs>","Ansible: git clone fails with ""fatal: Out of memory, realloc failed""","<p>I'm using Ansible with a Windows host (VM).
I'm trying to <code>git clone</code> a large content (actually using <code>git lfs</code>). It's around 15Go in total</p>
<p>I'm using <code>git for windows</code> (<a href=""https://github.com/git-for-windows/git/releases/tag/v2.37.2.windows.2"" rel=""nofollow noreferrer"">https://github.com/git-for-windows/git/releases/tag/v2.37.2.windows.2</a>).</p>
<p>I have the following Ansible task:</p>
<pre><code>- name: Clone repository
  ansible.windows.win_command: &gt;
    &lt;path/to/git.exe&gt; clone &lt;git-repo&gt;
</code></pre>
<p>The problem is that it always fails with the error:</p>
<p><code>fatal: Out of memory, realloc failed</code></p>
<p>I tried to increase the windows VM memory, or to play with <code>git config</code> settings, as explained in several posts, for example:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/39563566/remote-fatal-out-of-memory-realloc-failed-on-git-push-with-post-receive-hook"">remote: fatal: Out of memory, realloc failed on git push with post-receive hook</a></li>
<li><a href=""https://stackoverflow.com/questions/34360328/git-out-of-memory-on-checkout"">git out of memory on checkout</a></li>
<li><a href=""https://community.atlassian.com/t5/Bitbucket-questions/Message-erro-quot-fatal-Out-of-memory-realloc-failed-quot/qaq-p/894048"" rel=""nofollow noreferrer"">https://community.atlassian.com/t5/Bitbucket-questions/Message-erro-quot-fatal-Out-of-memory-realloc-failed-quot/qaq-p/894048</a></li>
</ul>
<p>But none of these solutions work for me. It always failed at the same points:</p>
<pre><code>&quot;Filtering content:  48% (440/902), 2.11 GiB | 6.70 MiB/s&quot;,
&quot;fatal: Out of memory, realloc failed&quot;,
&quot;Error downloading object: xxxxxxx: Smudge error: Error reading from media file: write /dev/stdout: The pipe is being closed.: write /dev/stdout: The pipe is being closed.&quot;,
&quot;&quot;,
&quot;Errors logged to 'xxxx.log'.&quot;,
&quot;Use `git lfs logs last` to view the log.&quot;,
&quot;warning: Clone succeeded, but checkout failed.&quot;,
&quot;You can inspect what was checked out with 'git status'&quot;,
&quot;and retry with 'git restore --source=HEAD :/'&quot;
</code></pre>
<p>The weird things is that this error only happen using Ansible. If I connect to the VM and manually run exactly the same <code>git clone</code> command, everything goes well.</p>
<p>Do you have any idea to help me? Thanks</p>
","3","6240756","",""
"73623208","9360793","2022-09-06 13:50:13","0","110","<git><git-lfs><.git-folder>","Download files with git-lfs and exclude .git directory","<p>I download large files from a git lfs repository.</p>
<pre><code>git lfs clone https://some-repo-in-the-wild
</code></pre>
<p>I have limited space on my host machine and have found that <code>.git</code> directory takes up more than half of the available storage. I would like to know if there is a command that does the cloning operation and excludes the .git directory.</p>
","1","9360793","",""
"73633552","17171606","2022-09-07 10:01:45","0","126","<git><git-lfs>","I pushed a large pdf file using git-lfs but have problem pulling it","<p>I pushed a large pdf file using git-lfs. It worked successfully but when I pulled it, the file is just like this.</p>
<p>version <a href=""https://git-lfs.github.com/spec/v1"" rel=""nofollow noreferrer"">https://git-lfs.github.com/spec/v1</a>
oid sha256: blah blah~
size 186454154</p>
<p>It is actually a pdf file, but It seems to be a text file.
I know that git-lfs pushes only the text pointer of the original large file. Then, how can I get the original file?</p>
","1","17171606","",""
"42019529","432509","2017-02-03 08:07:25","96","67334","<git><git-lfs>","How to clone/pull a git repository, ignoring LFS?","<p>Is there a way to explicitly ignore all git-lfs files on <code>clone</code> and <code>pull</code>?<br>(besides uninstalling <code>git-lfs</code> which I ended up doing).</p>

<hr>

<p>In this case git-lfs just contains pre-compiled libs for a platform I don't use... so there is absolutely no use in getting them.</p>
","4","432509","0","0"
"64210163","618099","2020-10-05 14:01:01","4","1846","<git><homebrew><git-lfs>","Homebrew update keep complaining about git-fls but which repos are the trouble","<p>I can't seem to get homebrew to work properly anymore. Have tried to <a href=""https://github.com/homebrew/install#uninstall-homebrew"" rel=""nofollow noreferrer"">uninstall and install it</a>. But it keeps throwing me this error about <code>git lfs</code> and I can't see where it comes from.</p>
<p>I'm all out of ideas - this is what I have done so far:</p>
<pre><code>❯ git lfs install
Git LFS initialized.

❯ brew update --verbose
Checking if we need to fetch /usr/local/Homebrew...
Checking if we need to fetch /usr/local/Homebrew/Library/Taps/caskformula/homebrew-caskformula...
Checking if we need to fetch /usr/local/Homebrew/Library/Taps/homebrew/homebrew-bundle...
Checking if we need to fetch /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask...
Checking if we need to fetch /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core...
Checking if we need to fetch /usr/local/Homebrew/Library/Taps/homebrew/homebrew-services...
Fetching /usr/local/Homebrew...
Updating /usr/local/Homebrew...
Branch 'master' set up to track remote branch 'master' from 'origin'.
Switched to and reset branch 'master'
Your branch is up to date with 'origin/master'.

This repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-checkout.

Switched to and reset branch 'stable'

This repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-checkout.

Current branch stable is up to date.

Already up-to-date.
</code></pre>
<pre><code>❯ cat .gitconfig
[core]
    editor = code --wait
    excludesfile = /Users/norfeldt/.gitignore_global
    hooksPath = /Users/norfeldt/Dropbox/Code/Git/hooks

    quotepath = false
    # The default value is true.

    precomposeunicode = true 
    # Only used by Mac OS implementation of Git.

    ...

[filter &quot;lfs&quot;]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[diff]
    ...
</code></pre>
<pre><code>❯ cat Dropbox/Code/Git/hooks/pre-push
#!/bin/sh
command echo $PWD
command -v git-lfs &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 &quot;\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/pre-push.\n&quot;; exit 2; }
git lfs pre-push &quot;$@&quot;
</code></pre>
<pre><code>❯ brew doctor
Please note that these warnings are just used to help the Homebrew maintainers
with debugging if you file an issue. If everything you use Homebrew for is
working fine: please don't worry or file an issue; just ignore this. Thanks!

Warning: A newer Command Line Tools release is available.
Update them from Software Update in System Preferences or run:
  softwareupdate --all --install --force

If that doesn't show you an update run:
  sudo rm -rf /Library/Developer/CommandLineTools
  sudo xcode-select --install

Alternatively, manually download them from:
  https://developer.apple.com/download/more/.
</code></pre>
","7","618099","",""
"65335964","3691191","2020-12-17 06:59:57","5","872","<git><git-lfs>","Is there any simple and fast way to tell whether a git repo has used LFS?","<p>I want to set up my env and install git-lfs only if it is necessary based on whether there is a file in the repo that uses LFS.</p>
<p>Is there a lightweight, fast, and easy way to check it?</p>
","0","3691191","",""
"51782043","1908650","2018-08-10 08:19:07","26","37954","<git><git-lfs>","What does git lfs migrate do?","<p>I thought that <code>git lfs migrate</code> rewrote the history of a repo so that specified large files were kept in LFS. This means that the repo should get smaller, because it doesn't directly contain all versions of large files. However, when I run</p>

<p><code>git lfs migrate import --include=""test-data/**"" --include-ref=refs/heads/master</code></p>

<p>All of the files in the <code>test-data/</code> directory are replaced with files that look like this:</p>

<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:5853b5a2a95eaca53865df996aee1d911866f754e6089c2fe68875459f44dc55
size 19993296
</code></pre>

<p>And the .git folder becomes twice as large (400MB to 800MB). I am confused.  What's <code>git lfs migrate doing</code>?</p>

<p>Edit: I did <a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial"" rel=""noreferrer"">clean after migration</a></p>

<pre><code>git reflog expire --expire-unreachable=now --all
git gc --prune=now
</code></pre>

<p>before running <code>du</code>. Afterwards, most of the space is used by these folders:</p>

<p>414M    .git/objects
398M    .git/lfs</p>
","0","1908650","0","0"
"54582147","3933805","2019-02-07 20:56:54","6","1802","<git><gitlab><git-lfs>","How do i move a repository with LFS support to gitlab.com?","<p>I have a repository on an old githost instance and i'm trying to migrate it over to gitlab.com. I'm using their instructions for migrating, but because this repository uses LFS, i am getting some errors that i cannot figure out how to resolve. Here are the commands I'm running</p>

<pre><code>cd repo
git remote rename origin old-origin
git remote add origin git@gitlab.com:group/repo.git
git push -u origin --all
git push -u origin --tags
</code></pre>

<p>And here is a sample of the response i get from <code>git</code> on the first <code>push</code> command:</p>

<pre><code>remote: GitLab: LFS objects are missing. Ensure LFS is properly set up or try a manual ""git lfs push --all"".
To https://gitlab.com/group/repo.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'https://gitlab.com/group/repo.git'
</code></pre>

<p>I have tried the suggested command (<code>git lfs push --all</code>) and that command is not valid. I have also tried <code>git lfs push origin master</code> and that results in: </p>

<pre><code>Uploading LFS objects: 100% (29/29), 2.4 GB | 0 B/s, done
</code></pre>

<p>I cannot find anything on the Gitlab docs, so i'm asking for this community's help. Thanks!</p>

<p>Edit: I have also tried using <code>https</code> instead of SSH repo origin and that results in no difference.</p>
","4","3933805","0","0"
"73686227","8743463","2022-09-12 08:07:25","1","16","<github><svn><git-svn><git-lfs>","How to remove the large file commit in history from the repo genrated by git svn clone operation?","<p>I created a repo &quot;test-repo&quot; on Github enterprise site and run following commands to push the local repo (c:\mytempdir) generated by git svn clone operation.</p>
<pre><code>cd c:\mytempdir
git remote add origin https://PAT@github.azc.ext.xx.com/liang-ming/test-repo
git push --set-upstream origin master
</code></pre>
<p>It failed with the error about some sdf files are larger than 100M.</p>
<pre><code>remote: error: Please visit https://www.yammer.com/xx.com/#/threads/inGroup?type=in_group&amp;feedId=6603278
remote: error: File HH.sdf is 104.75 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File HHx.sdf is 113.50 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File HH/xxx.sdf is 117.44 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
To https://github.azc.ext.xx.com/liang-ming/test-repo
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'https://PAT@github.azc.ext.xx.com/liang-ming/test-repo'
</code></pre>
<p>I searched the sdf files in c:\mytempdir, did not find any sdf file larger than 100M, so I guess it was the large file in the SVN commit history.</p>
<p>So I tried the BFG, it said it did not find any file larger than 100M.
<a href=""https://rtyley.github.io/bfg-repo-cleaner/"" rel=""nofollow noreferrer"">https://rtyley.github.io/bfg-repo-cleaner/</a></p>
<pre><code>java -jar bfg-1.14.0.jar --strip-blobs-bigger-than 100M C:\mytempdir
</code></pre>
<p>I also tried to use LFS to track &quot;*.sdf&quot; files as mentioned in the following link, but it did not resolve the error.</p>
<p><a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial"" rel=""nofollow noreferrer"">https://github.com/git-lfs/git-lfs/wiki/Tutorial</a></p>
<p>Any solution to solve this problem? Thanks.</p>
","1","8743463","",""
"74225434","12930053","2022-10-27 16:36:21","0","42","<git><git-lfs>","git lfs push is still attempting to upload many GB of non-lfs files","<p>I think I understand the root cause of the issue I'm having but I don't know the best way to fix it. In the process of adding many .fbx files to my Unity game project, I did the following.</p>
<p>Before adding git lfs to my project:</p>
<ol>
<li>I added the .fbx to my project</li>
<li>git add .</li>
<li>git commit -m &quot;add fbx&quot;</li>
<li>attempted a push to origin</li>
</ol>
<p>Of course, this push failed, as the push in question was over 2 GB in size. I did some research on what I should do to address this, and found git lfs, which I have since installed, and created a proper .gitattributes which is properly marking all the large files. Using git lfs ls-files, I've confirmed that the large files in question are being handled by git lfs, and have been properly committed.</p>
<p>However, after all this setup, when I add, commit, and push, (and after a ~6GB LFS upload which seems to go off without a hitch) standard git is still attempting to upload a large amount of files (multiple GB in size, enough to get the push to fail). I assume this is happening because of my previous commit, before the files were marked as lfs.</p>
<p>How can I &quot;reset&quot; the situation here so that git stops attempting to upload a large amount of files without lfs?</p>
<p>I have tried checking out a new branch, adding, committing, and pushing, but the issue persists.</p>
","2","12930053","",""
"74272833","11971720","2022-11-01 07:38:42","0","470","<python><git><git-lfs>","How to git clone a LFS repo through python?","<p>I need to clone a repo that uses LFS through code.</p>
<p>I tried using <code>GitPython</code> as follows:</p>
<pre><code>from git.repo.base import Repo
Repo.clone_from(&quot;https://foo.bar/baz&quot;, &quot;./foo/bar/&quot;)
</code></pre>
<p>However, this only downloads a pointer to the LFS files but does not actually download them.</p>
","2","11971720","",""
"74319087","3935035","2022-11-04 15:05:51","1","389","<github><git-lfs>","How to remove git lfs from repository","<p>I got a warning from <code>git lfs</code> that I exceeded my storage limit. Searching how to remove files from <code>git lfs</code> I came accross this site <a href=""https://docs.github.com/en/repositories/working-with-files/managing-large-files/removing-files-from-git-large-file-storage"" rel=""nofollow noreferrer"">https://docs.github.com/en/repositories/working-with-files/managing-large-files/removing-files-from-git-large-file-storage</a> which recommended using <code>$ git lfs uninstall</code>.</p>
<p>I run <code>$ git lfs uninstall</code> locally on my machine as well as <code>git lfs untrack</code>. I changed the <code>.gitattributes</code> file and commented everthing that has to do with  <code>git lfs</code>. I then <code>git add -A</code> and tried to push changes made to my code to my remote repo on GitHub. However, this gives me</p>
<pre><code>batch response: This repository is over its data quota. Account responsible for LFS    bandwidth should purchase more data packs to restore access.
Uploading LFS objects:   0% (0/2), 0 B | 0 B/s, done.
</code></pre>
<p>error: failed to push some refs to 'https://github.com/....git'</p>
<p>How would I remove <code>git lfs</code> from my repository, but not the files it tracked? I do not really need it anymore, so there is no need to track the files. However, I need to keep the files!</p>
","0","3935035","",""
"73762771","20025220","2022-09-18 12:24:40","0","166","<github><git-lfs>","'git lfs fetch' found 1 object, what does it mean?","<p>In order to backup some GitHub repositories, I followed <a href=""https://docs.github.com/en/repositories/creating-and-managing-repositories/duplicating-a-repository"" rel=""nofollow noreferrer"">this tutorial</a>, cloned those repositories with the <code>--mirror</code> option and then fetched Git LFS. Sometimes the output is simple:</p>
<pre><code>$ git lfs fetch --all
fetch: Fetching all references...
</code></pre>
<p>However, for some repositories, the output would be:</p>
<pre><code>$ git lfs fetch --all
fetch: 1 object found, done.
fetch: Fetching all references...
</code></pre>
<p>Both would create an empty folder <code>lfs/tmp</code> without downloading anything. So what does &quot;1 object found&quot; mean? Why is there a difference between repositories?</p>
<p>Git LFS doc didn't explain the output.</p>
","0","20025220","0","0"
"73813846","3395058","2022-09-22 11:30:38","0","105","<git><gitlab><git-lfs>","How to reduce git repository storage after migrating git repository to git lfs?","<p>I've created a test repository on GitLab and pushed a .mp4 (500MB) file to that repository. After that, I tried to migrate this repository to Git LFS and run the force push command. But when I check the usage quotas on Gitlab, both &quot;LFS storage&quot; and &quot;Repository&quot; have 500MB usage, so the total usage of project is 1GB.
<a href=""https://i.stack.imgur.com/mEKRd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mEKRd.png"" alt=""Gitlab usage quotas"" /></a></p>
<p>Why after migrating success, the &quot;Repository&quot; usage is not reduced?</p>
","1","3395058","",""
"73850744","10624000","2022-09-26 07:22:53","4","327","<git><gitlab><git-lfs><git-filter-repo>","Trying to clean up GitLab repository with LFS using git filter-repo, but I increased its size instead of reducing it","<p>please help me understand what I did wrong.</p>
<p>I'm following this official GitLab tutorial: <a href=""https://docs.gitlab.com/ee/user/project/repository/reducing_the_repo_size_using_git.html"" rel=""nofollow noreferrer"">https://docs.gitlab.com/ee/user/project/repository/reducing_the_repo_size_using_git.html</a>
I did everything exactly like in the tutorial, I ran Clean Up after 30minutes.
I found somewhere that running housekeeping option might help, so I also ran this one.
My repo size jumped from 6GB to 6,6GB and that's it. I tried to do this twice, as first one didn't work, but it only increased repo size by next 200mb.
I found info that unreferenced LFS files are removed at daily basis, but after 48h no changes.
Do you have any idea what can I do to fix it?</p>
","1","10624000","",""
"57089103","1109725","2019-07-18 07:20:44","5","9337","<git><tortoisegit><git-lfs>","How should I use Tortoisegit with LFS?","<p>It seems like tortoise supports LFS but the correct working practice for this seems absent in the documentation. I need to support my team, but never use the tool myself.</p>

<p>What is the <strong>correct</strong> way to use Tortoise with repos configured for LFS?</p>
","0","1109725","0","0"
"57173682","7196011","2019-07-24 00:16:33","0","125","<ruby><git><heroku><ruby-on-rails-5><git-lfs>","Upgraded to rails 5.2, and now when I push to heroku, why is it being prevented because of git-LFS (which I'd never heard of before today)?","<p>""This repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/pre-push.""</p>

<p>I've never heard of git-LFS, much less installed it, before. This repository was pushing to heroku just fine for 2+ years. </p>

<p>I recently made a new fork so I could try upgrading to <code>rails 5.2</code> and <code>ruby 2.4</code>. I got it all sorted and pulled my master FROM that fork, so my master is now <code>rails 5.2</code> and <code>ruby 2.4</code>.</p>

<p>But I can't push it to heroku because of the above error.</p>

<p>I have no idea where git-LFS came from. I never installed it, and now I don't know how to get rid of it.</p>

<p>If anyone knows why I can't push to heroku, or how to disable this git-LFS (that feels like malware), please let me know! I've been searching for hours :(</p>
","0","7196011","",""
"73983414","9222161","2022-10-07 06:50:04","0","62","<git><git-lfs>","Git status hangs after rsync-ing local git lfs repo to new disk","<p>I have a git repo of size ~450GB (configured with Git LFS). Due to lack of space on my original drive, I copied the repo to a new disk using rsync (<code>rsync -a src dst</code>). The copy completed successfully but now git commands like <code>git status</code> take forever/hang (10+ mins).</p>
<p><code>git status</code> works perfectly fine on the repo that's still on the original disk. <a href=""https://stackoverflow.com/questions/1183769/git-status-takes-a-long-time-to-complete"">Based on this answer</a>, I tried <code>git fsck</code> and the output is identical to the output of <code>git fsck</code> on the original repo.</p>
<p>Any ideas why <code>git status</code> is taking so long on the new drive? I tested the drive speed and it should be just as fast as the old drive. Does git need to reindex the whole (giant) repo after it moved locations (even though the folder structure is intact)?</p>
","0","9222161","",""
"57229595","1245120","2019-07-27 06:03:07","3","5083","<git><gitlab><git-push><git-pull><git-lfs>","batch response: dial tcp: lookup gitlab.com: no such host","<p>If I'm going to push a small private repository, every thing's OK</p>

<pre><code>Sepideh@DESKTOP-M232FOC MINGW64 /e/Test_gitlab (master)
$ git push -u origin --all
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 236 bytes | 78.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To gitlab.com:abadpours/test.git
 * [new branch]      master -&gt; master
Branch 'master' set up to track remote branch 'master' from 'origin'.

Sepideh@DESKTOP-M232FOC MINGW64 /e/Test_gitlab (master)
$ git push -u origin --tags
Everything up-to-date  
</code></pre>

<p>But for a big (1.94 GB), LFS-enabled private repository, I'll have the following:  </p>

<pre><code>Sepideh@DESKTOP-M232FOC MINGW64 /e/MSc_Thesis (master)
$ git config lfs.https://gitlab.com/abadpours/msc_thesis.git/info/lfs.locksverify true

Sepideh@DESKTOP-M232FOC MINGW64 /e/MSc_Thesis (master)
$ git push -u origin --all
Connection to gitlab.com closed by remote host.
Uploading LFS objects:   0% (0/4), 62 MB | 109 KB/s, done
batch response: Post https://gitlab.com/abadpours/msc_thesis.git/info/lfs/objects/batch: dial tcp: lookup gitlab.com: no such host
error: failed to push some refs to 'git@gitlab.com:abadpours/msc_thesis.git'  
</code></pre>

<p>The result is the same since yesterday. Are there any way to solve the problem?</p>
","1","1245120","0","0"
"57254411","11571935","2019-07-29 12:59:50","8","2454","<git><git-lfs>","Is it possible to use git lfs without API or other servers?","<p>I have already a local bare git repository without LFS, just for sharing the git, like it was supposed to.</p>

<p>This git will be utilized for stocking big images (singularity images) and my repo is already large (6 GB). However, I don’t particularly want to deploy an API or another server to use LFS, so I want to install locally. Is this possible ? It’s rentable ? When we use this, can we use the singularity images with a git pull? I search on the internet for a tutorial for that and I found this one <a href=""https://stackoverflow.com/questions/41912442/initialize-bare-git-repository-with-lfs"">Initialize bare git repository with LFS</a> but it doesn’t correspond to my waiting, it’s talking about an API.</p>

<p>I already tried on another repository but when I attempted to push, there is this error message : </p>

<pre><code>$ git push   

hint: The remote resolves to a file:// URL, which can only work with a
hint: standalone transfer agent.  See section ""Using a Custom Transfer Type
hint: without the API server"" in custom-transfers.md for details.
Remote ""origin"" does not support the LFS locking API. Consider disabling it with:
  $ git config lfs.file:///data/shared.git/info/lfs.locksverify false
Uploading LFS objects:   0% (0/1), 0 B | 0 B/s                                                                         
hint: The remote resolves to a file:// URL, which can only work with a
hint: standalone transfer agent.  See section ""Using a Custom Transfer Type
hint: without the API server"" in custom-transfers.md for details.
batch request: missing protocol: ""file:///data/shared.git/info/lfs""
error: impossible to push references to '/data/shared.git'
</code></pre>

<p>The  /data/shared.git repository is my bare repository. I look in the section ""Using a Custom Transfer Type without the API server"" but I don't understand it, and I think the custom transfert is for a third part stockage server. I don't want it here.</p>

<pre><code>$ git lfs env
git-lfs/2.8.0 (GitHub; linux amd64; go 1.12.6)
git version 2.17.1

Endpoint=file:///data/shared.git/info/lfs (auth=none)
LocalWorkingDir=/data/sing
LocalGitDir=/data/sing/.git
LocalGitStorageDir=/data/sing/.git
LocalMediaDir=/data/sing/.git/lfs/objects
LocalReferenceDirs=
TempDir=/data/sing/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=/data/sing/.git/lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic
UploadTransfers=basic
git config filter.lfs.process = ""git-lfs filter-process""
git config filter.lfs.smudge = ""git-lfs smudge -- %f""
git config filter.lfs.clean = ""git-lfs clean -- %f""
</code></pre>

<p>Appreciate any help, thanks!</p>
","1","11571935","0","0"
"74085232","19509544","2022-10-16 07:12:27","0","93","<git><git-lfs>","how to delete all files from ls-files in git?","<p>I added folder to git lfs using <code>git lfs add &quot;myfolder/**&quot;</code>. Also the funny thing is when I print<code>git lfs ls-files</code> it shows files from another folder but not from that I wanted to. Could someone say how to delete all files from ls-files? and maye someone knows why there were files from another folder? ask questions if I didn't exlplain well.</p>
","1","19509544","",""
"74109180","20271382","2022-10-18 10:04:36","1","31","<git><gitlab><setuptools><git-lfs>","Small datafiles, python package, git tracking","<p>I am building a Python package. This package consists of some scripts and several datafiles (~500 Mb) stored as small csv files. I use setuptools and I track the development of the package on Gitlab.</p>
<p>From time to time, I need update the csv files. Crucially, I always replace all of them at the same time. The problem is that every time that I do so, the size of the Gitlab repo and the python package increases insanely, because git keeps version control of the files.</p>
<p>I was wondering if you have some suggestion on the best practices in such a case and how to keep the package reasonably small in particular. Is git lfs the best option?</p>
","3","20271382","",""
"74188961","5379444","2022-10-25 03:53:49","0","67","<git-lfs>","Is it safe to run git add (Git LFS) in parallel?","<p>I am using Git LFS for many large binary files. I notice running <code>git add my_dir</code> is very slow. For example, it takes about 25 minutes to add 100 x 600MB files.</p>
<p>I wonder if it is safe to run multiple <code>git add</code> commands in parallel? For example, can I start 4 processes with <code>git add my_dir/file_1</code>, <code>git add my_dir/file_2</code>, <code>git add my_dir/file_3</code>, and <code>git add my_dir/file_4</code> at the same time?</p>
","0","5379444","",""
"57425536","11049614","2019-08-09 07:42:18","0","281","<python><git><ssh><git-lfs>","Automating git clone of several Git repositories without user intervention","<p>I am trying to automate git cloning of several repositories using Python.Ideally I do not want to have any user intervention when cloning of repositories starts. But I am ending up with prompts listed below for each repository cloning where I have to provide password and confirm ssh authenticity.</p>

<pre><code>python gitClone.py 

Enter Git Local Repository Folder [~/git/work] :

Enter Git Password for user '&lt;user&gt;' :

...Cloning into '~/git/work/xxx' ....

The authenticity of host 'github.com (xx.xxx.xxx.xxx)' can't be established.
ECDSA key fingerprint is 
ECDSA key fingerprint is 
Are you sure you want to continue connecting (yes/no)? y
Password for 'https://&lt;user&gt;@gitlfs.com': 

</code></pre>

<p>gitClone.py</p>

<pre><code>    input2 = getpass.getpass(prompt=""Enter Git Password for user '"" + current_user + ""' :"")
    if(input2):
        os.environ[""GIT_PASSWORD""] = input2

    git_command = ['/usr/bin/git','lfs', 'clone','--config', 'core.askpass=git_askpass_helper.sh', '-b', branch, ""git@github.com:myOrg/"" + name + '.git']
    print(""\n...Cloning into '"" + local_dir + ""/"" + name + ""' ...."")
    git_query = Popen(git_command, cwd=local_dir, stdout=PIPE, stderr=PIPE, env=dict(os.environ, GIT_SSH_COMMAND=""ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyCheck=no""))
    (git_status, error) = git_query.communicate()
    if git_query.poll() == 0:
        print(""\nCloning of Git Project myOrg/"" + name + "" Done!"")
    else:
        print(""\nError in Cloning Git Project myOrg/"" + name + ""\n"" + error)
</code></pre>

<p>git_askpass_helper.sh</p>

<pre><code>#!/bin/sh
echo ""$GIT_PASSWORD""
</code></pre>

<p>I don't want to have to provide git passsword or confirm ssh authenticity for each repository cloning. </p>
","5","11049614","",""
"74454249","5796503","2022-11-16 01:51:43","1","197","<git><unity-game-engine><github><git-lfs>","/Library is being pushed even though it's in .gitignore","<p>I'm not sure what's causing the failure here as I have /Library in my gitignore. I also have LFS enabled since the creation of the project and have made multiple pushes without error. I've followed the instructions <a href=""https://stackoverflow.com/questions/7986139/git-error-when-trying-to-push-pre-receive-hook-declined"">here</a> for the &quot;hook declined&quot; message but still no luck. Even on new branches. Any ideas?</p>
<p><a href=""https://i.stack.imgur.com/UVDof.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UVDof.png"" alt=""enter image description here"" /></a></p>
<p>.gitignore:</p>
<pre><code># This .gitignore file should be placed at the root of your Unity project directory
#
# Get latest from https://github.com/github/gitignore/blob/main/Unity.gitignore
#
/[Ll]ibrary/
/[Tt]emp/
/[Oo]bj/
/[Bb]uild/
/[Bb]uilds/
/[Ll]ogs/
/[Uu]ser[Ss]ettings/

# MemoryCaptures can get excessive in size.
# They also could contain extremely sensitive data
/[Mm]emoryCaptures/

# Recordings can get excessive in size
/[Rr]ecordings/

# Uncomment this line if you wish to ignore the asset store tools plugin
# /[Aa]ssets/AssetStoreTools*

# Autogenerated Jetbrains Rider plugin
/[Aa]ssets/Plugins/Editor/JetBrains*

# Visual Studio cache directory
.vs/

# Gradle cache directory
.gradle/

# Autogenerated VS/MD/Consulo solution and project files
ExportedObj/
.consulo/
*.csproj
*.unityproj
*.sln
*.suo
*.tmp
*.user
*.userprefs
*.pidb
*.booproj
*.svd
*.pdb
*.mdb
*.opendb
*.VC.db

# Unity3D generated meta files
*.pidb.meta
*.pdb.meta
*.mdb.meta

# Unity3D generated file on crash reports
sysinfo.txt

# Builds
*.apk
*.aab
*.unitypackage
*.app

# Crashlytics generated file
crashlytics-build.properties

# Packed Addressables
/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin*

# Temporary auto-generated Android Assets
/[Aa]ssets/[Ss]treamingAssets/aa.meta
/[Aa]ssets/[Ss]treamingAssets/aa/*
Temp/UnityLockfile
</code></pre>
","1","5796503","",""
"74538791","3716516","2022-11-22 20:48:40","1","199","<git><git-lfs>","How to properly setup LFS supported git home server","<p>So I need a LFS supported git home server for a game project. However I've run into multiple issues trying to do this and googling for hours without a satisfying answer on what is happening. I'll start by introducing my server implementation and the issues I've had with it.</p>
<ol>
<li><p>I've installed an Ubuntu VM to act as the git server. I enabled ssh login and port-forwarded it so it can be accessed by our friend group outside my network. I have tested that the server is accessible to login from both inside and outside my network via SSH.</p>
</li>
<li><p>I installed git on the server, set up a user for it, initialized a bare repository and configured SSH following <a href=""https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server"" rel=""nofollow noreferrer"">these</a> instructions.</p>
</li>
<li><p>I installed git-lfs on the server via apt and enabled it on the repository I initiated with</p>
</li>
</ol>
<pre><code>git lfs install
</code></pre>
<p>running the command</p>
<pre><code>git lfs env
</code></pre>
<p>gives me the following information <a href=""https://i.stack.imgur.com/DK0Wd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DK0Wd.png"" alt=""git lfs env output"" /></a></p>
<ol start=""4"">
<li>I clone the project on my PC and enable lfs on it with the install command. Then I create an UE5 project inside the git folder, add all the file types  I want to track via</li>
</ol>
<pre><code>git lfs track &quot;*.*filetype*&quot;
</code></pre>
<p>Then I make a commit and push it netting me this error <a href=""https://i.stack.imgur.com/dwR54.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dwR54.png"" alt=""lfs lock error"" /></a></p>
<p>I disable the locking as instructed by the error, and make another push netting me this error <a href=""https://i.stack.imgur.com/5MFKO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5MFKO.png"" alt=""enter image description here"" /></a></p>
<p>Now I don't know how to proceed. What am I doing wrong? Troubleshooting this is a nuisance since the repo gets bricked after an error and I need to reset it.</p>
<p>I checked all the posts I could find here but they either lack answers or include third party stuff like BitKraken, which I am not using. I am not really interested in a premade server implementation for learning reasons, unless setting this up is unnecessary complicated.</p>
","0","3716516","",""
"74543596","3768495","2022-11-23 08:15:06","0","51","<git><version-control><git-push><git-pull><git-lfs>","How to re-use a git lfs tracked file in another repo?","<p>I have been searching on SO for a while and found some related topics like <a href=""https://stackoverflow.com/questions/35011366/move-git-lfs-tracked-files-under-regular-git"">this</a> and <a href=""https://stackoverflow.com/questions/34181356/where-are-git-lfs-files-stored"">this</a>, but I still can't solve the problem I am having:</p>
<p>So in repo A, I used 'git lfs&quot; and everything worked fine - a 2GB text file was tracked and pushed, and the text file now looks like this:</p>
<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:4bd049d85f06029d28bd94eae6da2b6eb69c0b2d25bac8c30ac1b156672c4082
size 3771098624
</code></pre>
<p>Then I realized that I need to use this large text file, <strong>full_file_list.txt</strong>, in another repo, so I first copied this now 3-line file over to a different directory, and ran <code>git init</code> then wrote a few scripts then <code>git add .</code> then <code>git commit -m &quot;init&quot;</code>. With this repo B set up, I also ran <code>git lfs install</code> then <code>git lfs migrate import --everything</code> and then <code>git lfs pull</code>. This is what I got:</p>
<pre><code>batch request: missing protocol: &quot;&quot;, 0 B | 0 B/s
error: failed to fetch some objects from ''
</code></pre>
<p>I don't understand why it is a <code>batch request</code> since I have only ONE large file. Also, when I ran <code>git lfs ls-files</code>, this is what I got:</p>
<pre><code>a2daa75053 * main.py
4146614001 * utils/__pycache__/utils.cpython-37.pyc
50008faf1f - utils/full_file_list.txt
f2b404dbf3 * utils/utils.py
</code></pre>
<p>Does this mean in the new repo, the <code>git lfs</code> tracked all the four files? If that's the case, how do I let it only track the <code>utils/full_file_list.txt</code>?</p>
<p>Overall, I need to access the content of the 2GB text file but don't know how to. Please kindly help. Thanks!</p>
","0","3768495","",""
"74606534","2366418","2022-11-28 21:15:55","0","285","<git><git-lfs>","File not showing in git lfs ls-files in spite of showing up in objects to be committed","<p>I have cloned a repo with a bunch of files tracked with git lfs.
I had updated the .gitattributes using <code>git lfs track</code> to include the file I was about to add.
I have committed the .gitattributes, then added my new file.</p>
<p>When I try <code>git lfs status</code> I see my file in &quot;Objects to be committed&quot;. However, when I type <code>git lfs ls-files</code>, the file is not there.</p>
<p>I have tried checking after committing the file, retrospectively adding it with <code>migrate</code> and some other combinations, all to no avail. The file does not appear to be tracked by LFS.</p>
<p>What am I missing? How to properly add a tarball to a repo to be tracked with lfs?</p>
","0","2366418","",""
"74622328","214526","2022-11-30 02:43:58","0","389","<git><gitlab><git-lfs><git-lfs-migrate>","git lfs migrate for existing files in remote","<p>Recently, I enabled git lfs for my gitlab project while checking in a 200 MB file. And this I could successfully and verify that in remote this new 200 MB file shows <code>LFS</code>.</p>
<p>In the past I had checked-in few 10 MB files without lfs. Those exist in remote too. What is the best way to migrate those to lfs?</p>
<p>I tried following:</p>
<pre><code>git lfs migrate import --everything --include=&quot;*.pkl&quot; --verbose

</code></pre>
<p>And then when I try <code>git push</code>, I get an error -</p>
<pre><code> ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'yourgit.internal.yourdomain.com:&lt;user&gt;/project.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>
<p><code>git pull</code> does not work either. What is the way to migrate existing files to lfs? Will adding <code>--include-ref=refs/heads/master</code> to the migrate command help?</p>
<p>And do I need to do anything extra for the other branches?</p>
","0","214526","",""
"74698058","1436800","2022-12-06 06:15:13","0","358","<git><github><git-lfs>","Adding File with GIt LFS gives error- The following paths are ignored by one of your .gitignore files","<p>I want to add chromedriver file in my repo using git LFS. The steps I followed are:</p>
<ol>
<li><p>Install git LFS using this command:</p>
<p>sudo apt get install git-lfs</p>
</li>
<li><p>Initialize our repository with git-lfs using following command:</p>
<p>git lfs install</p>
</li>
<li><p>Track the files we want to add using this command:</p>
<p>git lfs track chromedriver</p>
</li>
<li><p>git add chromedriver</p>
<p>It is giving this error:
The following paths are ignored by one of your .gitignore files:
savedrivers
hint: Use -f if you really want to add them.
hint: Turn this message off by running
hint: &quot;git config advice.addIgnoredFile false&quot;
How to fix it?</p>
</li>
</ol>
<p>Secondly, what is the purpose of command <code>git add .gitattributes</code>?</p>
<p>Other questions:</p>
<ol>
<li>After the file is pushed in our repo, in which folder can we see the file and how can we access it inside our code?</li>
<li>Will the size of our repo be affected after adding file with GitLFS? As the purpose of Git LFS is to store file in our repo without affecting its size.</li>
<li>When the branch containing git lfs code gets merged to master branch, does everyone have to pull it locally?</li>
<li>In Github LFS, instead of pushing the files in our repository, we push them in a different server, and then can only reference from inside the repository. How can we access it in our code?</li>
</ol>
","0","1436800","",""
"74713197","1436800","2022-12-07 07:36:59","1","121","<git><github><git-lfs>","How can we see the reference file inside our repo after adding the file with git lfs?","<p>I have pushed a file using git-lfs in github. After pushing it, I can only see .gitattribute file changed under my commit in github like this:</p>
<pre><code>file_name filter=lfs diff=lfs merge=lfs -text 
</code></pre>
<p>There are couple of questions I want to ask:</p>
<ol>
<li><p>Is .gitattribute file supposed to be changed only? Git lfs stores the reference of the file inside our repo. That reference file should be added in our repo right? Why can't I see that reference file under my commit in github?</p>
</li>
<li><p>Actual file is pushed in a different server. From where exactly can we view it?</p>
</li>
<li><p>Now when my branch gets merged with master branch, can other team members be able to access that file simply by adding git pull origin master? Obviously after they have properly configured git LFS.</p>
</li>
<li><p><code>git lfs ls-files</code> is not showing any files after adding it. Why is this so?</p>
</li>
</ol>
<p>The commands I followed to push files with git lfs are:</p>
<p>1.Install git LFS using this command:</p>
<pre><code>sudo apt get install git-lfs
</code></pre>
<ol start=""2"">
<li><p>Initialize our repository with git-lfs using following command:</p>
<p>git lfs install</p>
</li>
<li><p>Track the files we want to add using this command:</p>
<p>git lfs track filename</p>
</li>
<li><p>Make sure .gitattributes is tracked using following command:</p>
<p>git add .gitattributes</p>
</li>
<li><p>Remaining steps are same:</p>
<p>git add file-name
git commit -m &quot;File added with git lfs&quot;
git push origin branch-name</p>
</li>
</ol>
","2","1436800","",""
"74733061","1436800","2022-12-08 15:59:55","0","99","<git><github><git-lfs>","Git lfs is updating two .gitattributes. Which one to keep?","<p>I have successfully added a file with git lfs. Now it is updating two .gitattribute files,
one with the location .gitattributes and other with the location My_folder/.gitattributes. My_folder is the name of folder where I have my file that is stored to track it with git lfs.</p>
<p>So my question is do we have to push both .gitattribute files in our repo? Both these files have identical changes.</p>
","0","1436800","",""
"74815517","12050718","2022-12-15 17:38:35","0","946","<git><git-lfs><gitattributes>","what does "" filter=lfs diff=lfs merge=lfs "" do in .gitattributes?","<p>I saw code here <br/>
<a href=""https://gist.github.com/Srfigie/77b5c15bc5eb61733a74d34d10b3ed87"" rel=""nofollow noreferrer"">https://gist.github.com/Srfigie/77b5c15bc5eb61733a74d34d10b3ed87</a></p>
<pre><code>#Image
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.ai filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text
</code></pre>
","1","12050718","",""
"74819564","13215988","2022-12-16 02:24:40","0","56","<github><netlify><cicd><git-lfs><netlify-cli>","How do I inject a file into a Netlify deploy from Github to avoid using git-lfs?","<p>I have a Netlify site that deploys from Github. The problem is that it contains a WebGL Unity game which has a pretty big <code>.data</code> file. The file is bigger than 100MB so it would need to be storged in Github's LFS. I don't want to use Github LFS so is there a way to store this file in an external link like Google Drive or Dropbox or something like that and inject it into the deploy at build time?</p>
","0","13215988","",""
"74981712","8254988","2023-01-02 11:13:07","1","511","<git><git-lfs>","Clone git repo with all lfs objects","<p>I want to make a backup of a git repo which uses lfs. Now, is a simple <code>git clone --recursive my_awesome_repo_url</code> sufficient or do I need to use additional commands to retrieve all lfs objects, which are necessary to checkout all branches and history correctly.</p>
","1","8254988","",""
"75022186","715036","2023-01-05 17:25:03","0","124","<python><python-3.x><git><subprocess><git-lfs>","The git process never exits when running as a Python subprocess","<h2>Background</h2>
<p>I'm writing a Python program to process LFS error messages as I have some repos with missing LFS files in Bitbucket Server. The output when running <code>git lfs fetch --all</code> isn't very helpful when you want to find out which LFS files are missing from a repo. That's why I'm making a tool for it. Maybe it can be contributed back to the git project in some form when I'm done with it?</p>
<h2>Code snippet</h2>
<pre class=""lang-py prettyprint-override""><code>import subprocess

def git_lfs_fetch(repo_dir) -&gt; list:
    timeout_sec = 120
    try:
        completed_process = subprocess.run(
            [&quot;git&quot;, &quot;lfs&quot;, &quot;fetch&quot;, &quot;--all&quot;], check=False, cwd=repo_dir, 
            capture_output=True, text=True, timeout=timeout_sec, shell=False)
        return completed_process.stderr.split('\n')
    except subprocess.TimeoutExpired as ex:
        print(f'ERROR Could not complete &quot;{ex.cmd}&quot; before timeout of {timeout_sec} s!')
        print(ex.stderr)
        return []
</code></pre>
<h2>Problem</h2>
<p>Sometimes, and not in any consistent way, the <code>subprocess.run()</code> method never returns because the <code>git-lfs</code> process never exits. Usually running the <code>git lfs fetch --all</code> command in my test repos takes a few seconds to complete. As a workaround, I added a 2 min <code>timeout</code> to the <code>subprocess.run()</code> call. I figured I could get the output I'm interested in from stderr from the exception, since the <code>git-lfs</code> was done with all it should do. However, that did not help. Python does not seem to be able to kill the <code>git</code> subprocess. I understand from the doc that it sends a <code>SIGKILL</code> to the process and then waits for it to exit. But it never exits, even with the timeout set.</p>
<p>If I manually kill the <code>git-lfs</code> process from the outside I get the expected output printed from <code>ex.stderr</code> so <code>git-lfs</code> sure looks like it is done, and my workaround does what it should.</p>
<h2>Environment</h2>
<ul>
<li><code>Windows 10, 64 bit</code></li>
<li><code>Python 3.10.7</code></li>
<li><code>git version 2.39.0.windows.2</code>
<ul>
<li>Upgraded from <code>2.35.2.windows.1</code></li>
</ul>
</li>
<li><code>git-lfs/3.3.0 (GitHub; windows amd64; go 1.19.3; git 77deabdf)</code>
<ul>
<li>Upgraded from <code>git-lfs/3.0.2 (GitHub; windows amd64; go 1.17.2)</code></li>
</ul>
</li>
</ul>
<h2>Fixing my workaround</h2>
<p>As I was writing this, in a typical <a href=""https://en.wikipedia.org/wiki/Rubber_duck_debugging"" rel=""nofollow noreferrer"">rubberducking</a> fashion, I had an idea.</p>
<p>Since Python fails to forcibly terminate the <code>git</code> subprocess I tried using <code>git-lfs</code> directly, instead of letting <code>git</code> call it. This made the timeout work.</p>
<pre class=""lang-py prettyprint-override""><code>subprocess.run([&quot;git-lfs&quot;, &quot;fetch&quot;, &quot;--all&quot;], ...)
</code></pre>
<h2>What I'm looking for</h2>
<p>The solution I'm looking for is a way to figure out why <code>git-lfs</code> and consequently <code>git</code> won't terminate properly. Even better would be a fix for that problem.</p>
<p>I have seen similar problems when calling <code>git</code> from Java and C# on both Linux and Windows (several years ago), i.e. the <code>git</code> command actually completes all it should do but the <code>git</code> process never terminates. So I'm thinking this &quot;hanging&quot; could be a problem in git itself. I really would like to be able to find out why the <code>git-lfs</code> process won't exit. I don't know where to start looking.</p>
<h2>Update</h2>
<p>I used the tip from @CharlesDuffy to try <code>strace</code>. I got some output that did not really tell me anything useful.</p>
<p>In Task Manager I then happened to see that there was a few (7) ssh processes running. On inspection of their command line it became clear that they were related to Git LFS and that they all were waiting for a response from the Bitbucket Server. The commands issued to the server was one of these</p>
<ul>
<li><code>ssh -p 7999 git@server-url &quot;git-lfs-authenticate &lt;path&gt; download&quot;</code></li>
<li><code>ssh -p 7999 git@server-url &quot;git-lfs-transfer &lt;path&gt; download&quot;</code></li>
</ul>
<p>and they appeared to be left-over processes from all the times I had seen problems and forcibly killed the <code>git-lfs</code> process.</p>
<p>I upgraded Git to the latest version, 2.39.0 with git-lfs 3.3.0, and tried again. At first it seemed to work better but then I got <code>git-lfs</code> stuck again. This time running from the command line, not from Python, and Task Manager shows that <code>ssh.exe</code> is running this command line and seem stuck in it:</p>
<pre class=""lang-bash prettyprint-override""><code>ssh -oControlMaster=Auto -oControlPath=C:\Users\username\Appdata\LocalTemp\sock-3553225979\sock-%C -p 7999 git@server-url &quot;git-lfs-transfer &lt;path&gt; download&quot;
</code></pre>
<p>I was unable to get any useful information from that hanging <code>ssh.exe</code> process using <code>strace</code> from <code>Git Bash</code>, and eventually it died while I was trying to get <code>strace</code> to attach to it again.</p>
<p>Since the <code>ssh</code> daemon on the server is living in the Bitbucket application I think the next step here is to involve Atlassian support for server side debugging. I still lack a reliable way of reproducing the problem though.</p>
","2","715036","",""
"75053450","17487954","2023-01-09 05:22:47","0","50","<gerrit><git-lfs>","git lfs: upload over 8G files, it stuck at 8.1G","<p>i build gerrit server using apache2.</p>
<p>i has 'git push' other lfs files successfully, now i want to upload over 8.1Gb lfs files，but it stuck at 8.1Gb, no return and no error.</p>
<p><code>android@gerrit-server:~/work/project$ git push http://username@gerrit-server:8888/vendor/qcom/boot_images HEAD:refs/heads/releases-branch**</code></p>
<p><code>Locking support detected on remote &quot;http://username@gerrit-server:8888/vendor/qcom/boot_images&quot;. Consider enabling it with: $ git config lfs.http://gerrit-server:8888/vendor/qcom/boot_images.git/info/lfs.locksverify true Uploading LFS objects:  98% (9892/10045), 8.1 GB | 0 B/s </code></p>
<p>Just like that, it always stuck that</p>
","0","17487954","",""
"75179581","12049249","2023-01-20 00:27:12","0","247","<git><ssh><portforwarding><ssh-tunnel><git-lfs>","How to setup a git ssh tunnel that works with git lfs?","<p>My work configuration is I have my work desktop, that I use a VPN on to connect to a private gitlab server. I also use this desktop to ssh into a remote server to do my work. On this desktop and the remote server, I have configured an SSH tunnel in this manner: <a href=""https://stackoverflow.com/questions/64997524/how-to-configure-system-to-use-git-via-an-ssh-reverse-tunnel-proxy/65000058#65000058"">how to configure system to use git via an ssh reverse tunnel / proxy?</a>
In order to be able to access my private gitlab server through a VPN tunnel on my work desktop.
This configuration works to access my gitlab server when I am not using git lfs.</p>
<p>However, this configuration does not seem to support git lfs. I think I need to tunnel more ports somehow, but I am not sure how to change the .ssh/config file on the remote server to reference the right ports. For reference, here is the .ssh/config on my work desktop:</p>
<pre><code>Host remoteServer
  HostName remoteServer
  User username
  RemoteForward 127.0.0.1:2222 gitlabServer:22
</code></pre>
<p>And here is the .ssh/config I use on the remoteServer:</p>
<pre><code>HOST gitlabServer
   hostname localhost
   port 2222

</code></pre>
<p>How can I modify these files, or do something else entirely, to support git lfs through the ssh tunnel I use?</p>
<p>I tried adding additional RemoteForward lines on my work desktop and LocalForward lines on the remote server to forward additional ports, but could not get my git lfs commands to work.</p>
","0","12049249","",""
"75227161","2084478","2023-01-24 20:51:11","1","291","<git><git-lfs><git-lfs-migrate>","Is there a good way to determine if a file is stored using git-lfs?","<p>We have a git repo that is exclusively setup to store large binary files; the intention is that every file will be stored using git-lfs (which is new to most of the team).  There are 106564 files.</p>
<p>We are running in to issues where certain team members (graphic artists - who are not git experts) are committing changes without git-lfs installed and we're consequently running in to issues where we see this warning:</p>
<p>Encountered 1 file(s) that should have been pointers, but weren't:</p>
<p>I've written some python code to compare the output of these two commands:</p>
<pre><code>git ls-files (list all files)
git lfs ls-files -n (list all files tracked by lfs)
</code></pre>
<p>The difference between the two lists (once I've dealt with some other issues) in theory provides me with a list of files not tracked by lfs.  Before I start going further down the rabbit hole, I'd like to manually confirm on a file basis if my code is working.  According to my code I have 1008 not tracked by LFS, if I run the following command on one of the 1008 files I get this output:</p>
<pre><code>git check-attr -a dirA/dirB/dirC/aFile.ext 
</code></pre>
<p>gives:</p>
<pre><code>dirA/dirB/dirC/aFile.ext: diff: lfs 
dirA/dirB/dirC/aFile.ext: merge: lfs
dirA/dirB/dirC/aFile.ext: filter: lfs
dirA/dirB/dirC/aFile.ext: crlf: unset
</code></pre>
<p>In this case the particular file shows up in the “git ls-files” list but not in the “git lfs ls-files” list, implying to me that the file is not tracked by lfs; yet the output of the “git check-attr -a” command leads me to believe otherwise…  What am I missing and is there something better than the “git check-attr -a” command to check a file?</p>
<p>I’m using git lfs version as follows on Ubuntu 20.04:</p>
<pre><code>git-lfs/3.3.0 (GitHub; linux amd64; go 1.19.3)
</code></pre>
<p>I was expecting the following command to tell me this file is not tracked by lfs:</p>
<pre><code>git check-attr -a dirA/dirB/dirC/aFile.ext
</code></pre>
<p>It doesn't!  Ultimately I'm looking to migrate these files to lfs.</p>
","1","2084478","",""
"75252039","7471369","2023-01-26 21:55:54","0","37","<git><merge><git-lfs><git-merge-conflict>","git lfs migration or create a new git repo","<p>Problem: Frequently modified build artifact has been in the code base for over a year, causing the git repo to balloon exponentially. git lfs migrate and git filter repo, appears to do similar things, rewrite the commit history. Since the Blob is found in the main branch as well as hundreds of feature branches, I included the <code>everything</code> flag.</p>
<pre><code>git lfs migrate import --include=&quot;*.tgz&quot; --everything
</code></pre>
<p>If I push this branch (and complete the PR). Will it not cause cascading merge conflicts for everyone?
Would it be better to just</p>
<ol>
<li><code>git clone &lt;repo&gt;</code></li>
<li><code>rm -rf .git/</code></li>
<li><code>git lfs install</code></li>
<li><code>git lfs track &quot;*.tgz&quot;</code></li>
<li>git add <code>.gitattributes</code></li>
<li>Create the new repo and add the origin to the new repo and push?</li>
</ol>
<p>Which option would be less of a headache, my thinking for the second option is to have the old repo stay up, and when working on the next software version, use the new repo and pick up from there.  Make the old repo readonly/archive for historical purposes and move forward with git lfs enabled from the get go on the new repo.</p>
","0","7471369","",""
"75280591","4626254","2023-01-30 05:38:42","0","38","<git><github><git-lfs><github-for-windows><github-enterprise>","How to find the commit in a mirrored git repo which is exactly at the middle of commits count?","<p><strong>Context:</strong></p>
<p>Migrating huge repos (size&gt;2GB) from GHES to GHEC.</p>
<p><strong>Problem:</strong></p>
<p>I have a repo which is of size 3.3 GB which needs to be mirror cloned and pushed to GHEC.</p>
<p>When pushing the repo to GHEC, I'm getting the below error.</p>
<pre><code>remote: fatal: pack exceeds maximum allowed size (2.00 GiB)
error: RPC failed; curl 18 transfer closed with outstanding read data remaining
send-pack: unexpected disconnect while reading sideband packet
Writing objects: 100% (282092/282092), 3.22 GiB | 55.08 MiB/s, done.
Total 282092 (delta 204318), reused 282092 (delta 204318), pack-reused 0
fatal: the remote end hung up unexpectedly
</code></pre>
<p>I see few articles where they suggested to push some commit where the repo size is less than 2GB.
<a href=""https://discourse.llvm.org/t/fyi-llvm-project-repo-has-exceeded-github-upload-size-limit/63293"" rel=""nofollow noreferrer"">https://discourse.llvm.org/t/fyi-llvm-project-repo-has-exceeded-github-upload-size-limit/63293</a></p>
<p>But how do I find that commit where the repo size is &lt; 2GB. My repo has around 37000 commits in it.</p>
","4","4626254","",""
"75329839","258894","2023-02-02 23:08:52","1","232","<windows><git><git-lfs>","why does git-lfs on Windows fail with ""executable file not found in %PATH%""?","<p>I'm using git-lfs on Windows; just did my first fetch of an LFS file and got this error: <code>Error downloading object: test-resources/CreateReferenceForMedia-flat.tiff (e26806d): Smudge error: Error downloading test-resources/CreateReferenceForMedia-flat.tiff (e26806d26938600c50a56ca03e3ec559ebd3d9cad1442b0a71cbfebbc166e53c): batch request: executable file not found in %PATH%</code></p>
<p>There is a logfile with a stack trace (looks like go code), but doesn't say what executable it is looking for.
I do have git-lfs, ssh and git on %PATH%. I'm running from an msys shell btw.
What executable is it looking for?</p>
","0","258894","",""
"75439820","867889","2023-02-13 18:22:18","0","44","<git><git-lfs>","Will the repo still work if I delete .git/lfs?","<p>I have a copy of git repo that I only need for reference (to keep some local branches JIC). Can I delete the contents of <code>.git/lfs</code> and still expect commands like <code>git checkout local_feature; git push local_feature other/location</code> to work? Contents of .git/lsf takes too much disk space.</p>
","6","867889","",""
"75596597","6221871","2023-02-28 19:43:04","0","98","<huggingface-transformers><git-lfs>","If I just want to use current version of files, do I still need the objects under .git/lfs?","<p>Use an example to explain.</p>
<p>I use these commands to download bart-large from huggingface:</p>
<pre><code>git lfs install
git clone https://huggingface.co/facebook/bart-large
</code></pre>
<p>The downloaded folder bart-large has size of 11 GB. The size of .git/lfs alone is 5.2 GB.</p>
<p>I remove the objects under .git/lfs and still can load the models from the local bart-large folder. This makes me wonder if I just want to use the current version of models and will not modify the repo, do I still need objects under .git/lfs?</p>
","0","6221871","",""
"75605279","14541828","2023-03-01 14:49:28","0","67","<python><git><tensorflow><github-actions><git-lfs>","Error loading a git LFS .h5 model using github actions","<p>I am currently developing a CI/CD pipeline for a simple ball classification model. The trained .h5 model &quot;ball_classifier.h5&quot; is larger than 100MB so i used Git lfs to upload the model into the github directory. github link: <a href=""https://github.com/kmeans27/ball-classification"" rel=""nofollow noreferrer"">https://github.com/kmeans27/ball-classification</a></p>
<p>Now i developed a script called &quot;batch_predict.py&quot; which simply uses this .h5 model to predict images within a folder in batches.(the code is working fine locally)</p>
<p>But github actions returns an error when trying to load the .h5 model:</p>
<pre><code>  File &quot;/home/runner/work/ball-classification/ball-classification/batch_predict.py&quot;, line 19, in &lt;module&gt;
    model = keras.models.load_model('ball_classifier.h5')
  File &quot;/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/keras/utils/traceback_utils.py&quot;, line 70, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File &quot;/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/h5py/_hl/files.py&quot;, line 567, in __init__
    fid = make_fid(name, mode, userblock_size, fapl, fcpl, swmr=swmr)
  File &quot;/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/h5py/_hl/files.py&quot;, line 231, in make_fid
    fid = h5f.open(name, flags, fapl=fapl)
  File &quot;h5py/_objects.pyx&quot;, line 54, in h5py._objects.with_phil.wrapper
  File &quot;h5py/_objects.pyx&quot;, line 55, in h5py._objects.with_phil.wrapper
  File &quot;h5py/h5f.pyx&quot;, line 106, in h5py.h5f.open
OSError: Unable to open file (file signature not found)
</code></pre>
<p>I included all needed dependencies in the requirements.txt file.
How can I fix this error? I need some new perspectives.
Could a env solve this? I am new in deploying models.</p>
","1","14541828","",""
"75687382","408496","2023-03-09 16:24:40","0","49","<git><git-lfs>","Why empty .git/lfs/tmp/ objects are created?","<p>We did a simple <code>cp -R repo1 test/</code> thinking that we would get the same number of files in dir test/repo1 as dir repo1</p>
<p>But we notice that new objects are created in the following paths after running <code>git status</code> -</p>
<p>./.git/lfs/tmp/3456789021</p>
<p>./.git/lfs/tmp/3452229021</p>
<p>./.git/lfs/tmp/3456449021</p>
<p>./.git/lfs/tmp/3456449000</p>
<ol>
<li>Why are new files created in there with a <code>git status</code> command ?</li>
<li>How do we get exact copy of files in dir repo1 in another directory ?</li>
</ol>
<p>Thank you</p>
","0","408496","",""
"75733554","14537313","2023-03-14 13:08:03","0","137","<git-lfs><libgit2>","How to properly clone a Git-LFS repo with libgit2?","<h2>Initial question:</h2>
<p>My clones with libgit2 don't checkout the LFS-tracked files in the cloned repo. Eventhough the .gitattributes file is there and git-lfs is installed.</p>
<p>How can I make libgit2 to checkout those LFS-tracked files properly?
Thanks in advance!</p>
<p>I'm cloning repositories as follows:</p>
<pre class=""lang-cpp prettyprint-override""><code>
#include &lt;git2.h&gt;

...

git_repository *cloned_repository = nullptr;
git_clone_options clone_opts = GIT_CLONE_OPTIONS_INIT;
clone_opts.checkout_branch = &quot;master&quot;;
git_checkout_options checkout_opts = GIT_CHECKOUT_OPTIONS_INIT;

// Set up options
checkout_opts.checkout_strategy = GIT_CHECKOUT_SAFE;
clone_opts.checkout_opts = checkout_opts;

// Do the clone
GIT_CHECK_ERROR(git_clone(&amp;cloned_repository, url.c_str(), path.string().c_str(), &amp;clone_opts));

git_repository_free(cloned_repository);
</code></pre>
<h2>Update:</h2>
<p>According to <a href=""https://stackoverflow.com/a/76133332/14537313"">lrm29's answer</a>, I have to define my own filters.
Regarding <a href=""https://stackoverflow.com/a/56284009/14537313"">this SO answer</a> I guess I have something to do like:</p>
<pre class=""lang-cpp prettyprint-override""><code>// Set-up LFS filter
git_filter *lfs_process = new git_filter{
    GIT_FILTER_VERSION,
    &quot;git-lfs filter-process&quot;,
    NULL,
    git_filter_free
};
git_filter *lfs_smudge = new git_filter{
    GIT_FILTER_VERSION,
    &quot;git-lfs smudge -- %f&quot;,
    NULL,
    git_filter_free
};
git_filter *lfs_clean = new git_filter{
    GIT_FILTER_VERSION,
    &quot;git-lfs clean -- %f&quot;,
    NULL,
    git_filter_free
};
</code></pre>
<p>I guess afterwards I have to add those filters to a filter list and define the mode. But I'm a bit confused as I have to set the filter mode (GIT_FILTER_SMUDGE/GIT_FILTER_CLEAN) on the filter list and not the filter. Do I then only have a single filter per list? Why is the mode not set directly on the filter or am I getting here something wrong. What about the process filter?
Unfortunately the API Documentation of libgit2 is not very informative, less than the source code.</p>
<p>I'd really appreciate some elaborate help on this. :) Thanks in advance.</p>
","0","14537313","",""
"75757287","19189796","2023-03-16 13:56:35","0","100","<git><git-lfs><tfvc><git-tfs><git-lfs-migrate>","git lfs push is throwing ""RPC failed"" error","<p>I am trying to migrate the repository from <strong>TFVC to Git with History of 4 months</strong> which is a huge data. I am using <code>git tfs</code> to clone it from a branch of a repo from TFVC to my local and trying to push it to a empty Git repository by enabling <code>git lfs</code> to track the large files and upload.</p>
<p>Steps:
I cloned a TFVC repo branch files with history of 4 months using git tfs clone to my local. then,
git remote add origin '<em>URL of the empty git repo</em>' -- empty repo refers to my new git repo created.</p>
<p>Enabled LFS</p>
<p>Tracked the Large files</p>
<p>Made a commit</p>
<p>Migrated the LFS files using <code>git lfs migrate import --include=&quot;*.*&quot; --include-ref=refs/heads/master</code></p>
<p>The above successfully converts pre-existing git objects to lfs objects. However, the regular objects still persist in the .git directory. These will be cleaned up eventually by git, but to clean them up right away, run:</p>
<pre><code> git reflog expire --expire-unreachable=now --all
         git gc --prune=now
</code></pre>
<p>&amp; Trying to push it using <code>git push origin -u -all</code></p>
<p>But facing below error:</p>
<pre><code>error: RPC failed; HTTP 503 curl 22 The requested URL returned error: 503
send-pack: unexpected disconnect while reading sideband packet
fatal: the remote end hung up unexpectedly
Everything up-to-date
##[error]PowerShell exited with code '1'.
Finishing: Migrate whole source code to git (git push)```
</code></pre>
","8","19189796","",""
"75935647","6378719","2023-04-05 04:27:54","0","33","<git><git-lfs>","Push two files with similar names using git-lfs","<p>I have a repo looking like this</p>
<pre><code>repo/
  folder/
    abc
    abcdef
</code></pre>
<p>where <code>abc</code> is a library I'd like to track with git-lfs and <code>abcdef</code> is another library that doesn't needs to be tracked with git-lfs.</p>
<p>In <code>repo</code> I did</p>
<pre><code>git lfs track --filename &quot;folder/abc&quot;
</code></pre>
<p>then .gitattributes was generated with</p>
<pre><code>folder/abc filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p>However, when I git add everything and make a push, this error came up</p>
<pre><code>LFS upload failed:cts:  50% (1/2), 151 MB | 0 B/s
  (missing) folder/abcdef (&lt;hash&gt;)
hint: Your push was rejected due to missing or corrupt local objects.
hint: You can disable this check with: 'git config lfs.allowincompletepush true'
Uploading LFS objects:  50% (1/2), 151 MB | 0 B/s, done.
</code></pre>
<p>It seems for some reason git-lfs wants to track <code>folder/abcdef</code> as well.</p>
<p>Why does this happen? Is it because the name of the file I want to track ('abc') is a substring of 'abcdef'? How to get around this and only let git-lfs track <code>folder/abc</code> but not <code>folder/abcdef</code>?</p>
","2","6378719","",""
"75946411","4561887","2023-04-06 06:16:26","2","607","<git><git-lfs>","How does git LFS track and store binary data more efficiently than git?","<p>I know that git LFS causes git to store a string &quot;pointer&quot; in a text file, and then git LFS downloads that target binary file. In this way, git repos are smaller on the remote git server. But, git LFS still has to store the binary files, so it seems to me that the storage locally (after a <a href=""https://stackoverflow.com/a/72610495/4561887""><code>git lfs pull</code></a>) is no different, and the combined sum of the remote git LFS server data plus the remote git data would still be similar.</p>
<p>What am I missing? How does git LFS efficiently track binary files?</p>
<hr />
<h2>Update (after additional learning since writing this question): don't use <code>git lfs</code>. I now recommend <em>against</em> using <code>git lfs</code></h2>
<p>See also:</p>
<ol>
<li>my comments below <a href=""https://stackoverflow.com/a/75946475/4561887"">the answer I accepted</a></li>
<li><a href=""https://stackoverflow.com/a/76567696/4561887"">my own answer I just added below</a></li>
</ol>
<p>I began with this question because I believed Git LFS was amazing and wonderful and I wanted to know <em>how.</em> Instead, I ended up realizing Git LFS was the cause of my daily workflow problems and that I shouldn't use it nor recommend it anymore.</p>
<p>Summary:</p>
<p><a href=""https://stackoverflow.com/a/72610495/4561887"">As I state here</a>:</p>
<blockquote>
<p>For personal, free GitHub accounts, it is way too limiting, and for paid, corporate accounts, it makes <code>git checkout</code> go from taking a few seconds to <a href=""https://stackoverflow.com/q/68552775/4561887"">up to 3+ <em>hours</em></a>, especially for remote workers, which is a total waste of their time. I dealt with that for three years and it was horrible. I wrote a script to do a <code>git lfs fetch</code> once per night to mitigate this, but my employer refused to buy me a bigger SSD to give me enough space to do <code>git lfs fetch --all</code> once per night, so I still ran into the multi-hour-checkout problem frequently. It's also impossible to undo the integration of <code>git lfs</code> into your repo unless you <em>delete</em> your whole GitHub repo and recreate it from scratch.</p>
</blockquote>
<p>Details:</p>
<p>I just discovered that the free version of <code>git lfs</code> has <a href=""https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-storage-and-bandwidth-usage"" rel=""nofollow noreferrer"">such strict limits</a> that it's useless, and I'm now in the process of removing it from all my public free repos. See this answer (<a href=""https://stackoverflow.com/a/59479166/4561887"">Repository size limits for GitHub.com</a>) and search for the &quot;git lfs&quot; parts.</p>
<p>It seems to me that the only benefit of <code>git lfs</code> is that it avoids downloading a ton of data all at once when you clone a repo. That's it! That seems like a pretty minimal, if not useless, benefit for any repo which has a total content size (git repo + would-be git lfs repo) &lt; 2 TB or so. All that using <code>git lfs</code> does is</p>
<ol>
<li><a href=""https://stackoverflow.com/q/68552775/4561887"">make <code>git checkout</code> take forever (literally <em>hours</em>)</a> (bad)</li>
<li>make my normally-fast-and-offline git commands, like <code>git checkout</code> now become online-and-slow git commands (bad), and</li>
<li>act as another GitHub service to pay for (bad).</li>
</ol>
<p>If you're trying to use <code>git lfs</code> to overcome GitHub's <a href=""https://stackoverflow.com/a/59479166/4561887"">100 MB max file size limit</a>, like I was, don't! You'll <a href=""https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-storage-and-bandwidth-usage"" rel=""nofollow noreferrer"">run out of <code>git lfs</code> space almost instantly</a>, in particular if anyone clones or forks your repo, as that counts against <em>your</em> limits, not theirs! Instead, &quot;a tool such as <a href=""https://unix.stackexchange.com/a/61776/""><code>tar</code> plus <code>split</code></a>, or just <a href=""https://stackoverflow.com/a/19031247/4561887""><code>split</code> alone</a>, can be used to split a large file into smaller parts, such as 90 MB each&quot; (<a href=""https://stackoverflow.com/a/59479166/4561887"">source</a>), so that you can then commit those binary file chunks to your regular <code>git</code> repo.</p>
<p>Lastly, the &quot;solution&quot; on GitHub to stop using <code>git lfs</code> and totally free up that space again is absolutely <em>crazy nuts!</em> You have to <em>delete your entire repo!</em> See this Q&amp;A here: <a href=""https://stackoverflow.com/q/34579211/4561887"">How to delete a file tracked by git-lfs and release the storage quota?</a></p>
<p>GitHub's <a href=""https://docs.github.com/en/repositories/working-with-files/managing-large-files/removing-files-from-git-large-file-storage"" rel=""nofollow noreferrer"">official documentation</a> confirms this (emphasis added):</p>
<blockquote>
<p>After you remove files from Git LFS, <strong>the Git LFS objects still exist on the remote storage and will continue to count toward your Git LFS storage quota.</strong></p>
<p>To remove Git LFS objects from a repository, <strong>delete and recreate the repository.</strong> When you delete a repository, any associated <strong>issues, stars, and forks are also deleted.</strong></p>
</blockquote>
<p>I can't believe this is even considered a &quot;solution&quot;. I really hope they're working on a better fix for it.</p>
<h2>Suggestion to employers and corporations considering using <code>git lfs</code>:</h2>
<p>Quick summary: don't use <code>git lfs</code>. Buy your employees bigger SSDs instead. <em>If</em> you do end up using <code>git lfs</code>, buy your employees bigger SSDs anyway, so they can run a script to do <a href=""https://stackoverflow.com/a/72610495/4561887""><code>git lfs fetch --all</code></a> once per night while they are sleeping.</p>
<p>Details:</p>
<p>Let's say you're a tech company with a massive mono-repo that is 50 GB in size, and binary files and data that you'd like to be part of the repo which are 4 TB in size. Rather than giving them insufficient 500 GB ~ 2 TB SSDs and then resorting to <code>git lfs</code>, which makes <code>git checkout</code>s <a href=""https://stackoverflow.com/q/68552775/4561887"">go from seconds to hours</a> when done on home internet connections, get your employees bigger solid state drives instead! A typical tech employee costs you &gt; $1000/day (5 working days per week x 48 working weeks/year x $1000/day = $240k, which is less than their salary + benefits + overhead costs). So, a $1000 8 TB SSD is totally worth it if it saves them <em>hours</em> of waiting and hassle! Examples to buy:</p>
<ol>
<li><a href=""https://rads.stackoverflow.com/amzn/click/com/B09WZK8YMY"" rel=""nofollow noreferrer"" rel=""nofollow noreferrer"">8TB Sabrent Rocket M.2 SSD, $1100</a></li>
<li><a href=""https://rads.stackoverflow.com/amzn/click/com/B0BDZWLBS4"" rel=""nofollow noreferrer"" rel=""nofollow noreferrer"">8TB Inland M.2 SSD, $900</a></li>
</ol>
<p>Now they will hopefully have enough space to run <code>git lfs fetch --all</code> in an automated nightly script to fetch LFS contents for <em>all</em> remote branches to help mitigate (but not solve) this, or at least <code>git lfs fetch origin branch1 branch2 branch3</code> to fetch the contents for the hashes of their most-used branches.</p>
<h2>See also</h2>
<ol>
<li>Really insightful Q&amp;A which also leans towards <em>not</em> using <code>git lfs</code> [even for remote repos]: <a href=""https://stackoverflow.com/q/63864442/4561887"">Do I need Git LFS for local repos?</a></li>
<li><a href=""https://stackoverflow.com/q/35575400/4561887"">What is the advantage of git lfs?</a></li>
<li>My Q&amp;A: <a href=""https://stackoverflow.com/q/68552775/4561887"">How to resume <code>git lfs post-checkout</code> hook after failed <code>git checkout</code></a></li>
<li>My answer: <a href=""https://stackoverflow.com/a/68554906/4561887"">How to shrink your .git folder in your git repo</a></li>
<li>My Q&amp;A: <a href=""https://stackoverflow.com/q/72610494/4561887"">What is the difference between <code>git lfs fetch</code>, <code>git lfs fetch --all</code>, and <code>git lfs pull</code>?</a></li>
</ol>

","5","4561887","",""
"75961254","6357916","2023-04-07 18:58:58","0","43","<git><git-clone><git-lfs>","Git clone error: cannot exec '/myrepo/.git/hooks/post-checkout': Permission denied","<p>I have a git repo on which I have enabled lfs (large file storage) by running following command:</p>
<pre><code>git lfs track &quot;*.pickle&quot;
</code></pre>
<p>I commited this repo and cloned it on another machine. But it gave me following error:</p>
<pre><code># git clone https://github.com/myuserid/myrepo.git
Cloning into 'myrepo'...
remote: Enumerating objects: 54, done.
remote: Counting objects: 100% (17/17), done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 54 (delta 4), reused 15 (delta 3), pack-reused 37
Unpacking objects: 100% (54/54), 59.20 MiB | 7.40 MiB/s, done.
Updating files: 100% (34/34), done.
Filtering content: 100% (14/14), 133.40 MiB | 34.05 MiB/s, done.
fatal: cannot exec '/myrepo/.git/hooks/post-checkout': Permission denied
</code></pre>
<p>How to fix this?
Also, the files seem to have checked out on my disk. So, is it just fine to continue ignoring the error messages? Also if it is due to lfs, I am ok to revert this back, that is get rid of lfs. But how do I do this?</p>
<p>PS: This never happened with me earlier with non lfs repos. This is the first time I am using lfs and thats why I am guessing its lfs that is causing this.</p>
","0","6357916","",""
"75961409","18653390","2023-04-07 19:24:30","0","24","<javascript><html><css><git-lfs>","Git lfs not extending the size of files that I am able to push to github","<p>I was trying to upload a file to git that is apparently 500 MB. I was told to try git lfs, but when I installed and set it up, I get this error:</p>
<p>remote: error: Trace: c287f1da79484f1e6e8f49fc71325ebeed8766e99945011efef8721ced1ddba0
remote: error: See <a href=""https://gh.io/lfs"" rel=""nofollow noreferrer"">https://gh.io/lfs</a> for more information.
remote: error: File mainPage/img/tempPost.mp4 is 541.34 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - <a href=""https://git-lfs.github.com"" rel=""nofollow noreferrer"">https://git-lfs.github.com</a>.</p>
<p>Even if 500 is above the limit, the previous limit of 100mb did not change once I installed git lfs and set it to track mp4 files. Not sure what the problem is, and youtube/internet is not helping that much. Any ideas?</p>
","0","18653390","",""
"76038033","504963","2023-04-17 18:06:09","0","22","<git><github><git-lfs>","GIT LFS error when moving repository to github","<p>I'm trying to move a repository from Bitbucket to GitHub. I keep getting an error when pushing. The error is on a file that does not exist in the repository currently.</p>
<pre><code>remote: error: See https://gh.io/lfs for more information.
remote: error: File public/uploads/genomic_workflow/seq_report/3/MIMIC-ED.zip is 122.46 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
</code></pre>
<p>I've tried using bfg <code> bfg -D public/uploads/genomic_workflow/seq_report/3/MIMIC-ED.zip</code> but I get the error</p>
<pre><code>**Error: *** Can only match on filename, NOT path *** - remove '/' path segments**
</code></pre>
<p>I've tried using filter-branch and I still get the original error</p>
<pre><code>git filter-branch --tree-filter 'git rm --cached --ignore-unmatch public/uploads/genomic_workflow/seq_report/3/MIMIC-ED.zip' HEAD
</code></pre>
","0","504963","",""
"76049684","3009592","2023-04-18 23:20:48","0","64","<git><repository><git-merge><git-lfs><git-filter-repo>","How do you merge two git repositories with LFS objects","<p>I have repo project-a which has LFS objects and I need to merge it into project-b. I am following below steps but getting error while performing merge step &quot;git merge --allow-unrelated-histories project-a/main&quot;</p>
<p>Steps:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>cd path/to/project-a
git filter-repo --to-subdirectory-filter project-a
cd path/to/project-b
git remote add project-a /path/to/project-a
git fetch project-a --no-tags
git fetch project-a --tags
**git merge --allow-unrelated-histories project-a/main** 
git remote remove project-a</code></pre>
</div>
</div>
</p>
<p>Error:</p>
<blockquote>
<p>Error downloading object:
 Object does not exist on the server: [404] Object does not exist on the serverErrors
error: external filter '/bin/git-lfs filter-process' failed
fatal: : smudge filter lfs failed</p>
</blockquote>
<p>I tried to follow <a href=""https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories"">How do you merge two Git repositories?</a> but it doesn't talk about LFS repos.</p>
","1","3009592","",""
"44161548","1149816","2017-05-24 14:36:34","6","5352","<git><visual-studio><azure-pipelines><git-clone><git-lfs>","How to remove dangling commits in remote git repository like VSTS","<p>I've been trying to decrease the size of my Git repository by moving some files to git LFS. A few 100 commands further, here we are with files in git LFS and no more history of these files in my git commits.</p>

<p>However, whenever I clone the repository I am still downloading about 3gb of objects. I worked around this issue by creating a new repository in Visual Studio Team Services and after pruning and garbage collecting my repository locally, then doing a push to there, it was reduced to 300mb.
(Command to do this locally found in this post: <a href=""https://stackoverflow.com/questions/18514659/git-what-is-a-dangling-commit-blob-and-where-do-they-come-from"">Git: what is a dangling commit/blob and where do they come from?</a>)</p>

<p>However I can't imagine that you always have to delete / recreate a complete repository to remove dangling commits.</p>

<p>What I also tried was doing a git init, and then pushing that over the existing repository, but it only increased the object count further.</p>

<p>For anyone also running into similar issues, these were the command I executed to create a new repository without dangling commits, I would however like to find out how to do this in the existing repository without having to delete it:</p>

<pre><code>git clone https://avavedse.visualstudio.com/Test/_git/TestRepository
cd blahblah
git reflog expire --expire=now --all
git gc --prune=now
git remote add newrepo https://avavedse.visualstudio.com/Test/_git/TestRepositoryNewEdition
git push newrepo
</code></pre>
","5","1149816","0","0"
"62823944","1860317","2020-07-09 21:24:39","5","5552","<git><docker><github><docker-compose><git-lfs>","How to download a specific git-lfs file into a Docker container","<p>I have a git repo with several large files. Git-LFS is enabled. I want to bring in one of the files into a Docker container. I have installed git-lfs in the container. So far I have:</p>
<pre><code>RUN git clone --no-checkout --depth 1 https://github.com/my-org/my-data-repo.git
RUN cd my-data-repo
RUN git lfs pull -I data/my-large-file.csv
</code></pre>
<p>The file actually get's downloaded but the Docker build process fails because I get the following error:</p>
<pre><code>Error updating the git index: (1/1), 90 MB | 4.8 MB/s                                                                                                                                                                                       
error: data/my-large-file.csv: cannot add to the index - missing --add option?
fatal: Unable to process path data/my-large-file.csv


Errors logged to .git/lfs/logs/20200709T142011.864584.log
Use `git lfs logs last` to view the log.
</code></pre>
<p>How can do this without an exception being thrown which kills the Docker build process?</p>
","3","1860317","0","0"
"44428178","5631585","2017-06-08 06:28:15","11","5763","<git><git-lfs>","Track all files in a directory to git LFS but ignore a single folder present in that directory","<p>Say I have a directory ""my_dir"" and some files in it. And I have a subdirectory in it ""my_dir_subdir"".</p>

<p>File structure:
""my_dir/my_dir_subdir"".</p>

<p>How to track my_dir via git LFS but not track ""my_dir/my_dir_subdir/"" via git LFS</p>
","0","5631585","0","0"
"63341408","397830","2020-08-10 13:41:37","1","3238","<git><azure-devops><git-lfs><git-lfs-migrate>","How to transfer a git repository with LFS file to another repository?","<p>We have a local git server, with LFS files. We are planning to move everything on MS Azure DevOps.
After some research, I read that it was advise to do a &quot;mirror&quot; clone, to have everything(tags at least):</p>
<blockquote>
<p>git clone --mirror</p>
</blockquote>
<p>Then, since I've some LFS files, I wanted to get them too:</p>
<blockquote>
<p>git lfs fetch --all</p>
</blockquote>
<p>But I get this error:</p>
<pre><code>Error: Failed to call git rev-parse --git-dir --show-toplevel: &quot;fatal: this operation must be run in a work tree\n&quot;
Not in a git repository.
</code></pre>
<p>For what I'm reading, git lfs fetch doesn't work on a <code>bare</code> repository(not that I know what this is, but I think it's related to the <code>--mirror</code> option.</p>
<p>So my question is: What should I do to transfer everything to this new repository? (the local server will be shutdown after this).</p>
<p>Thank you</p>
","0","397830","0","0"
"63466162","6702722","2020-08-18 09:54:02","2","1945","<git><webstorm><git-lfs>","git-lfs command not found webstorm","<p>I use WebStorm and after adding git-lfs I started to get this error<a href=""https://i.stack.imgur.com/rOQb8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rOQb8.png"" alt=""enter image description here"" /></a></p>
<blockquote>
<p>Error updating changes: git-lfs filter-process: git-lfs: command not found the remote end hung up unexpectedly</p>
</blockquote>
<p>It prevents git updates. Lfs is working fine in every terminal.</p>
","1","6702722","",""
"45277383","1578952","2017-07-24 09:50:51","0","1556","<git><tfs><git-lfs>","Push large files to git repository hosted on tfs","<p>I install and config lfs extension on my git repository and track "".ai"" files. 
when I push the commit with these files got this error:</p>

<pre><code>Git LFS: (0 of 5 files) 0 B / 1.19 GB
batch response: Repository or object not found: &lt;repo url&gt;/objects/batch
Check that it exists and that you have proper access to it
</code></pre>

<p>Any help would be much appreciated.</p>
","1","1578952","",""
"45680993","5529895","2017-08-14 18:43:07","2","363","<git><large-files><git-lfs>","Why not to use git for large files?","<p>I just had a project in which I had to store a csv file together with git (by using LFS). So I wonder why Git LFS should be used in these cases. Doesn't git only track the changes between Versions?</p>
","3","5529895","",""
"45693678","5529895","2017-08-15 13:17:48","4","3458","<git><git-lfs>","Best way to store large csv files with a git project","<p>Hey I have another question regarding this one: <a href=""https://stackoverflow.com/questions/45680993/why-not-to-use-git-for-large-files?noredirect=1#comment78321214_45680993"">Why not to use git for large files?</a>.
One user in the comment section mentions that git LFS is not really made to store large csv files. So now my question is, what would be a better way? Should I maybe just use git? But what about the problems with large files in history then?</p>
","2","5529895","0","0"
"63681261","534006","2020-09-01 04:09:56","1","279","<git><git-lfs>","How to know if I have latest version of file [git lfs lock workflow]","<p>We are using <code>git lfs lock</code> (<a href=""https://git-lfs.github.com"" rel=""nofollow noreferrer"">GitHub's open source git extension</a>) to prevent conflicts with binary files. The problem is that sometimes people forget to pull the latest version of a file, they lock the file and work on it but get rejected when trying to push.</p>
<p><em>So how can I quickly check if I have the latest version of the file</em>, before locking it?</p>
","1","534006","0","0"
"63691374","13494233","2020-09-01 16:03:36","1","537","<windows><git><unicode><git-lfs><gitkraken>","git lfs checkout fails on windows with unicode path ""Error: CreateFile""","<p>I have git for windows installed properly. Calling</p>
<pre><code>git lfs checkout
</code></pre>
<p>using bash.exe on a path that contains special characters (C:\Users\myUser\öäü) fails with an error:</p>
<pre><code>Error: CreateFile C:\Users\myUser\���: The system cannot find the file specified.
</code></pre>
<p>I've tried checking out LFS files with GitKraken to the very same directory and it fails with the same error (I see that GitKraken invokes bash.exe as well). When using git-bash.exe I cannot reproduce the error. Both terminals are MINGW64, the locale of the bash.exe prints</p>
<pre><code>$ locale
LANG=
LC_CTYPE=&quot;C.UTF-8&quot;
LC_NUMERIC=&quot;C.UTF-8&quot;
LC_TIME=&quot;C.UTF-8&quot;
LC_COLLATE=&quot;C.UTF-8&quot;
LC_MONETARY=&quot;C.UTF-8&quot;
LC_MESSAGES=&quot;C.UTF-8&quot;
LC_ALL=
</code></pre>
<p>whereas git-bash.exe prints en_GB.UTF-8 instead. I've also tried so set</p>
<pre><code>MSYSTEM=MINGW64
</code></pre>
<p>but that didn't help at all, unfortunately.
Using /usr/bin/mintty in Mingw-w64 mode fires up a functioning bash where I cannot reproduce the issue either. Hence I am wondering how I can configure bash.exe to function correctly, I feel that there must be some way to achieve that.</p>
<p>Edit:
git lfs version prints</p>
<pre><code>git-lfs/2.12.0 (GitHub; windows amd64; go 1.15.1)
</code></pre>
<p>Calling git lfs checkout with GIT_TRACE=1 prints:</p>
<pre><code>$ GIT_TRACE=1 git lfs checkout
14:12:20.043934 exec-cmd.c:237          trace: resolved executable dir: C:/Program Files/Git/mingw64/bin
14:12:20.059555 git.c:704               trace: exec: git-lfs checkout
14:12:20.059555 run-command.c:663       trace: run_command: git-lfs checkout
14:12:20.079718 trace git-lfs: exec: git 'version'
14:12:20.109504 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' '--git-dir' '--show-toplevel'
14:12:20.132914 trace git-lfs: exec: uname
14:12:20.189343 trace git-lfs: exec: cygpath '-w' '.git'
14:12:20.208415 trace git-lfs: exec: cygpath '-w' 'C:/Users/myUser/äöü'
14:12:20.243879 trace git-lfs: Error running 'git rev-parse': CreateFile C:\Users\myUser\���: The system cannot find the file specified.
Error: CreateFile C:\Users\myUser\���: The system cannot find the file specified.
...
</code></pre>
","5","13494233","",""
"45730603","610569","2017-08-17 08:52:14","4","4825","<git><bash><unix><arguments><git-lfs>","How to use git add or git lfs track A LOT of files","<p>My directory structure is as such with lots of files with <code>.xyz</code> extension:</p>

<pre><code>/outerdir-123
    /123456a
       abc.xyz
    /123457b
       lmn.xyz
       opq.xyz
    /999998c
       def.xyz
       ghi.xyz
       lop.xyz
</code></pre>

<p>When I tried to do:</p>

<pre><code>git lfs track outerdir-123/**
</code></pre>

<p>or when I try to add the files:</p>

<pre><code>git add outerdir-123/**
</code></pre>

<p>It throws a </p>

<pre><code>-bash: /usr/local/bin/git: Argument list too long
</code></pre>

<p>There are around 100,000 inner directories and each directory contains 1 to 20 <code>.xyz</code> files. </p>

<p>The files are small enough (&lt; 10MB each) so they should be able to fit into the git repository. </p>

<p><strong>How to use <code>git add</code> or <code>git lfs track</code> A LOT of files and subdirectories in <code>outerdir-123</code>?</strong> Is that possible at all?</p>

<p><strong>Should I write a script and just add/track each subdirectory individually?</strong> </p>
","1","610569","0","0"
"63780802","10159768","2020-09-07 15:53:22","0","1258","<git><git-lfs><git-lfs-migrate>","git lfs migrate import --no-rewrite unknown flag --no-rewrite","<p>I'm trying to fix missing pointers issue using <code>git lfs migrate import --no-rewrite</code> first i list all the files that had missing pointers using <code>git reset --hard</code>:</p>
<pre><code>new Promise((resolve, reject) =&gt; {
    exec(&quot;git reset --hard&quot;, (error, stdout, stderr) =&gt; {
        if (error) {
            console.error(`exec error: ${error}`);

            reject(error);
            return;
        }

        const filesWithMissingPointers = Array.from(
            stderr.matchAll(/\t(.*)/g)
        ).map((m) =&gt; m[1]);

        resolve(filesWithMissingPointers);
    });
});
</code></pre>
<p>Then i log the output:</p>
<pre><code>console.log(
    `Problem files before lfs migrating: \t\n${problemFilesBefore.join(&quot;\t\n&quot;)}`
);
</code></pre>
<p>Output:</p>
<pre><code>Problem files before lfs migrating:     
IdleGame/Assets/Plugins/Fonts/Localization/Korean/NotoSansCJKkr-Medium.otf  
IdleGame/Assets/Plugins/Fonts/Localization/Latin_Cyrillic_Greek/OctoberPro-Black.otf    
IdleGame/Assets/Plugins/Fonts/Localization/Latin_Cyrillic_Greek/OctoberPro-HeavyItalic.otf  
IdleGame/Assets/Plugins/Fonts/Localization/Persian/NotoNaskhArabicUI-Bold.ttf   
IdleGame/Assets/Plugins/Fonts/Localization/Thai/NotoSansThaiUI-CondensedMedium.ttf  
IdleGame/Assets/Plugins/Fonts/Oswald-Bold.ttf   
IdleGame/Assets/Plugins/Fonts/PoetsenOneRegular/TrueType font file/PoetsenOne-Regular 1.ttf 
IdleGame/Assets/Plugins/Fonts/Roboto Medium/TrueType font file/roboto-medium.ttf    
IdleGame/Assets/Plugins/Fonts/nevis.ttf 
IdleGame/Assets/Plugins/LibrariesDesign/BeautifulDissolves/_Examples/_Assets/Textures/ZomBearSpecular.tif   
IdleGame/Assets/Plugins/LibrariesDesign/BeautifulDissolves/_Examples/_Assets/Textures/ZomBunnySpecular.tif
</code></pre>
<p>I'm then trying to run:</p>
<pre><code>execSync(
  `git lfs migrate import --no-rewrite \ -m &quot;AutoCommit Bot: fix missing LFS points ${process.env.CI_PIPELINE_URL}&quot; ${problemFilesBefore.join(&quot; &quot;)} --yes`
);
</code></pre>
<p>And i encounter:</p>
<pre><code>Error: unknown flag: --no-rewrite
</code></pre>
<p>I'm encountering the same issue locally when running the command in powershell but i do not encounter it when running it in bash. My scripts runs in docker container (linux) with installed git lfs. Since it's Unix it should use bash as default command line so i don't think that the problem lies in the shell.</p>
<p>Note: I run this script as a job on gitlab</p>
","2","10159768","",""
"45822847","4353360","2017-08-22 16:30:37","1","104","<git><version-control><bitbucket><git-lfs>","Push full copy of my git repo to my remote","<p><strong>Enviroment</strong></p>

<p>I converted my git repo using git-lfs-migrate and I am within a BARE Repo now. Everything seems fine: Converting finished without errors, tags are still available as well as branches. Those branches have a different commit id compared to before I converted. This id seems to be fine since <code>git show</code> prints some infos for the given id.</p>

<p><strong>Problem</strong></p>

<p>I push the my repo into a clean remote repo with <code>git push --mirror</code>. The log tells me that it pushed all my branches and Tags, but if I take a look at the remote repo (BitBucket UI) there are my tags but just my master branch.</p>

<p><strong>Question</strong></p>

<p>How can I push a full copy (containing all branches and tags) to my remote?</p>

<p><strong>What I've tried</strong></p>

<ul>
<li>I also created a local clone of my converted bare repo, but there
excatly the same problem. Simply cloned with <code>git clone converted.git repo</code> and verified with <code>git branch -rv</code> </li>
<li>Like already mentioned: The branches and it's ids seem to be valid</li>
<li><code>git push --all</code> does not help. After <code>git push --mirror</code> it just tells me that everything is up-to-date.</li>
</ul>

<p>Git Version is 2.11.1 if that helps somehow!</p>

<p>Any help will be appreciated!
Thanks in advance!</p>
","7","4353360","",""
"63803518","10050942","2020-09-09 01:22:50","3","247","<git><git-lfs><libgit2><gitkraken>","How to use Git LFS+ with nodegit?","<p>I use <a href=""https://github.com/nodegit/nodegit"" rel=""nofollow noreferrer"">nodegit</a> for my NodeJS project and would like to use Git LFS support (<code>nodegit</code> uses <a href=""https://libgit2.org/"" rel=""nofollow noreferrer"">libgit2</a> under the hood). I found <a href=""https://github.com/Axosoft/nodegit-lfs"" rel=""nofollow noreferrer"">nodegit-lfs</a> - also from Axosoft - whose description states:</p>
<blockquote>
<p>Nodegit LFS is an extension library used to augment NodeGit with the capability to use git lfs via the command line.
To use this package, you must have git and git lfs installed.</p>
</blockquote>
<p>So it seems the standard Git installation is required for this &quot;add-on&quot; but due to license restrictions I can't use that (The reference Git implementation has a slightly different license as nodegit/libgit2 <strong>and</strong> Git LFS)</p>
<p>Does anyone know how if there is another way to use Git LFS with nodegit?</p>
<p>P.S. I attempted to add the hooks for Git LFS to my test repo but it seems libgit2 doesn't execute them, so no success on this.</p>
","2","10050942","0","0"
"45840749","287948","2017-08-23 13:11:51","1","78","<git-lfs>","Easy command sequence to git-lfs upload without cloning","<p>I have a zip file <code>myBig.zip</code> at a machine without a <code>git clone</code> repo, but the remote git  was prepared as an <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">git-lfs</a>, and is operating with no problem.</p>

<p>Puting in other words: need to do upload like in an old FTP by <code>put myBig.zip</code> command, put into the server-side  (git) repository, and only it... By easyest (default) way.</p>
","1","287948","0","0"
"63889223","11700877","2020-09-14 17:35:26","2","697","<git><github><large-files><git-lfs>","How to replace large files with links in git lfs","<p>I have a repo setup with Git LFS (Large File Storage) and I pulled the large files into my local branch without putting any <a href=""https://github.com/git-lfs/git-lfs/issues/2717"" rel=""nofollow noreferrer"">exclude statements</a> in, so all the large files have been downloaded on my local.</p>
<p>This takes up a lot of space, and I don't need all of the files on my local, so I would like to convert the actual large files into links so they take up less space. This is what would have happened if I had used exclude statements before I pulled the updated repo.</p>
<p>I've looked around and haven't found any explicit instructions, and I have learned I am not competent enough in git to just play around in the git repo, so any help is appreciated.</p>
","0","11700877","0","0"
"45924258","901870","2017-08-28 17:17:42","9","18136","<git><version-control><bitbucket><git-lfs>","git lfs prune to remove files from lfs and push to origin","<p>So here's what's happened:</p>

<ol>
<li>Accidentally committed lots of files that weren't meant to be. </li>
<li>Did a <code>git reset --soft HEAD~2</code> to get back to a commit before the accident</li>
<li>Modified gitignore to ignore the files</li>
<li>Commited again and pushed to origin.</li>
</ol>

<p>I assumed the git reset would revers everything from the accidental commit, but after checking bitbucket's list of git lfs files, it seems all the lfs tracked files from the accidental commit were pushed to lfs in origin. These files do not exist if I look through the source in bitbucket.</p>

<p>So I tried doing <code>git lfs prune</code> which appeared to delete an amount of files that looks to be about the amount that was accidentally commited, then <code>git lfs push origin master</code>. Checked bitbucket's list of git lfs files again, but those files are still there and nothing's changed in origin. </p>

<p>What have I done wrong?</p>
","0","901870","0","0"
"45925398","901870","2017-08-28 18:38:16","0","212","<git><version-control><gitlab><bitbucket><git-lfs>","Moving from bitbucket to self-hosted gitlab, LFS is 0 bytes","<p>I have imported my bitbucket repo into a self-hosted gitlab project. Everything seemed to work fine, but when I check the project info, the project is only 94mb and LFS is 0 bytes. In bitbucket when I check LFS info, there's about 800mb of data. </p>

<p>Seems the import does not include LFS? What is the easiest way to fix this? </p>
","0","901870","",""
"64481233","8896573","2020-10-22 11:26:05","0","3124","<git><gitlab><git-lfs><bfg-repo-cleaner>","migrating to git lfs by official guide creates bad object error","<p>Following <a href=""https://docs.gitlab.com/ee/topics/git/lfs/migrate_to_git_lfs.html"" rel=""nofollow noreferrer"">this guide</a>, when I get to the step <code>git push --force</code> I get the following error:</p>
<pre class=""lang-sh prettyprint-override""><code>ref master:: Error in git rev-list --stdin --objects --not --remotes=origin --: exit status 128 fatal: bad object d096dd7506987ff3ede8754716b5fe076836b524
error: failed to push some refs to &lt;git-url&gt;
</code></pre>
<p>I have followed the guide exactly so am at a loss. Any suggestions welcome.</p>
<p>TIA</p>
","0","8896573","",""
"65414609","14166557","2020-12-22 19:18:37","1","285","<git><azure><azure-pipelines><git-lfs>","In Azure, how to clone a repo that uses git-lfs repo in a different server?","<p>I have a repository that contains some files and a directory where I use git-lfs to store big files in another repository outside the domain of the first one. When I want to retrieve my project, I clone the first repository and then it's asked me the credentials for the second repository, so far so good.</p>
<p>The problem is, when I'm in Azure, trying to clone my repository, I don't see in the log the asking for the second repository credentials, I only see</p>
<pre><code>[5e71564651651654646516465164613211] LFS object not found: [404] LFS object not found  
</code></pre>
<p>In my pipeline, It's checked the &quot;checkout submodules&quot; and &quot;checkout files from LFS&quot;. When I uncheck those, my pipeline fetches the pointer for those big files, not the files themselves.</p>
<p>I think that the Azure is looking on the first repo for the git-lfs files, but I'm not sure. Thus, I can't find in Azure interface where to put the credentials for the second repository.</p>
<p>My question is: Is it possible to clone my repo using another server as git-lfs repository when you are using Azure pipeline? If so, how?</p>
","0","14166557","",""
"47199828","80480","2017-11-09 10:46:08","34","32627","<git><version-control><git-lfs>","How to convert a file tracked by git to git-lfs?","<p>How do I convert a single file (e.g. a png) which is already committed as a regular object to git-lfs?</p>

<p>I do not want to migrate the whole repo and I also do not want to rewrite the history of the repo.</p>
","3","80480","0","0"
"47219985","6741215","2017-11-10 09:54:04","12","10896","<git><gitignore><git-lfs><gitattributes>",".gitignore vs .gitattributes","<p>Considering I have <code>*.pdf</code> files in both my <code>.gitignore</code> and <code>.gitattributes</code>, how does git behave and prioritize between the two? Does it ignore pdf files or stores them as LFS?</p>
","2","6741215","0","0"
"65781975","408496","2021-01-18 20:58:38","1","519","<git><git-lfs>","Is rewriting history a necessary step to use git lfs with an existing git repo large files?","<p>We have an existing git repo with a few large files.<br/>
We like to move them to use with git lfs and Artifactory.<br/>
We read a few questions/answers on stackoverflow on this topic.<br/>
We like to avoid rewriting git history for these files.<br/>
We saw Lars Schneider's slides using <br/></p>
<pre><code>git lfs track &quot;/big/*&quot; 
</code></pre>
<p>We like to know if <br/></p>
<ul>
<li>we can avoid the need to rewrite git history if we move these large files into &quot;/big/&quot; directory and<br/>
delete the large files from their former paths over time as our project evolves, thereby <br/>
reducing the repo size.<br/></li>
</ul>
<p>Thank you<br/></p>
","0","408496","",""
"66149217","14088010","2021-02-11 05:27:37","3","4943","<git><ssh-keys><git-lfs>","Using git lfs and configuring SSH keys","<p>I'm starting on a new project. Their repository contains large files &gt;50MB. To properly clone the repo. I've been told I need to use git-lfs. I installed it, and used <code>git clone</code>, and then <code>git lfs install</code> inside the project folder. Then I used <code>git lfs fetch</code>. It returns an error of:</p>
<pre><code>batch request: git@github.com: Permission denied (publickey).: exit status 255
error: failed to fetch some objects from 'https://github.com/***/***.git/info/lfs'
</code></pre>
<p>I already have a working ssh key pair, with the ssh key added to github (which is how i'm able to clone a large portion of the files already). The original <code>git clone</code> fails when it encounters the first file it hits that is greater than 50MB.</p>
<p>I've searched the git lfs issues page, although I have not posted one. My guess is that the git lfs client cannot find the ssh keypair I have in .ssh. By the way this is on a Windows 10 VM. The host machine is Ubuntu.</p>
","5","14088010","0","0"
"47641304","939701","2017-12-04 20:17:54","2","678","<git><git-lfs>","git push gives fatal error via git-lfs","<p>I have a site that uses git-lfs to push a few large binary files. It was working until I updated my OS to High Sierra (10.13.1).</p>

<p>My git version is 2.15.0</p>

<p>Env info for git-lfs</p>

<ul>
<li>git-lfs/1.1.1 (GitHub; darwin amd64; go 1.5.3)</li>
</ul>

<p>Error output is below.</p>

<pre><code>unexpected fault address 0x43ae71333512
fatal error: fault
[signal 0xb code=0x1 addr=0x43ae71333512 pc=0x43ae71333512]

goroutine 53 [running]:
runtime.throw(0x502418, 0x5)
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/panic.go:527 +0x90 fp=0xc820038928 sp=0xc820038910
runtime.sigpanic()
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/sigpanic_unix.go:27 +0x2ba fp=0xc820038978 sp=0xc820038928
net/http.(*Transport).dial(0xc820091290, 0x5044a8, 0x3, 0xc820276320, 0xe, 0x0, 0x0, 0x0, 0x0)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/transport.go:499 +0x79 fp=0xc8200389c0 sp=0xc820038978
net/http.(*Transport).dialConn(0xc820091290, 0x0, 0xc82028e000, 0x5, 0xc820276320, 0xe, 0x5d0b08, 0x0, 0x0)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/transport.go:596 +0x19a9 fp=0xc820038f00 sp=0xc8200389c0
net/http.(*Transport).getConn.func4(0xc820091290, 0x0, 0xc82028e000, 0x5, 0xc820276320, 0xe, 0xc82027a120)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/transport.go:549 +0x66 fp=0xc820038f78 sp=0xc820038f00
runtime.goexit()
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/asm_amd64.s:1721 +0x1 fp=0xc820038f80 sp=0xc820038f78
created by net/http.(*Transport).getConn
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/transport.go:551 +0x265

goroutine 1 [semacquire]:
sync.runtime_Semacquire(0xc8200fb2ac)
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/sema.go:43 +0x26
sync.(*WaitGroup).Wait(0xc8200fb2a0)
    /usr/local/Cellar/go/1.5.3/libexec/src/sync/waitgroup.go:126 +0xb4
github.com/github/git-lfs/lfs.(*TransferQueue).Wait(0xc8200fb1e0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:101 +0x2b6
github.com/github/git-lfs/commands.prePushRef(0xc8200fcb92, 0x28, 0xc8200fe3c0, 0x29)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/commands/command_pre_push.go:129 +0x4c1
github.com/github/git-lfs/commands.prePushCommand(0x75f9e0, 0xc82008ee60, 0x2, 0x2)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/commands/command_pre_push.go:72 +0x433
github.com/github/git-lfs/vendor/_nuts/github.com/spf13/cobra.(*Command).execute(0x75f9e0, 0xc82008eca0, 0x2, 0x2, 0x0, 0x0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/vendor/_nuts/github.com/spf13/cobra/command.go:477 +0x403
github.com/github/git-lfs/vendor/_nuts/github.com/spf13/cobra.(*Command).Execute(0x7610a0, 0x0, 0x0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/vendor/_nuts/github.com/spf13/cobra/command.go:551 +0x46a
github.com/github/git-lfs/commands.Run()
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/commands/commands.go:88 +0x23
main.main()
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/git-lfs.go:34 +0x12e

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/asm_amd64.s:1721 +0x1

goroutine 19 [syscall]:
os/signal.loop()
    /usr/local/Cellar/go/1.5.3/libexec/src/os/signal/signal_unix.go:22 +0x18
created by os/signal.init.1
    /usr/local/Cellar/go/1.5.3/libexec/src/os/signal/signal_unix.go:28 +0x37

goroutine 22 [select, locked to thread]:
runtime.gopark(0x5d1810, 0xc820026728, 0x503fe0, 0x6, 0x2d718, 0x2)
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/proc.go:185 +0x163
runtime.selectgoImpl(0xc820026728, 0x0, 0x18)
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/select.go:392 +0xa64
runtime.selectgo(0xc820026728)
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/select.go:212 +0x12
runtime.ensureSigM.func1()
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/signal1_unix.go:227 +0x323
runtime.goexit()
    /usr/local/Cellar/go/1.5.3/libexec/src/runtime/asm_amd64.s:1721 +0x1

goroutine 23 [chan receive]:
main.main.func1(0xc820096de0, 0xc820063910)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/git-lfs.go:22 +0x6d
created by main.main
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/git-lfs.go:32 +0x129

goroutine 31 [chan receive]:
github.com/github/git-lfs/lfs.(*TransferQueue).errorCollector(0xc8200fb1e0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:256 +0x5b
created by github.com/github/git-lfs/lfs.(*TransferQueue).run
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:317 +0x3f

goroutine 33 [chan receive]:
github.com/github/git-lfs/lfs.(*TransferQueue).transferWorker(0xc8200fb1e0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:270 +0x98
created by github.com/github/git-lfs/lfs.(*TransferQueue).run
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:322 +0x167

goroutine 34 [chan receive]:
github.com/github/git-lfs/lfs.(*TransferQueue).transferWorker(0xc8200fb1e0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:270 +0x98
created by github.com/github/git-lfs/lfs.(*TransferQueue).run
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:322 +0x167

goroutine 35 [chan receive]:
github.com/github/git-lfs/lfs.(*TransferQueue).transferWorker(0xc8200fb1e0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:270 +0x98
created by github.com/github/git-lfs/lfs.(*TransferQueue).run
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:322 +0x167

goroutine 37 [select]:
net/http.(*Transport).getConn(0xc820091290, 0xc820290000, 0x0, 0xc82028e000, 0x5, 0xc820276320, 0xe, 0x0, 0x0, 0x0)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/transport.go:554 +0x663
net/http.(*Transport).RoundTrip(0xc820091290, 0xc820290000, 0xb3, 0x0, 0x0)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/transport.go:228 +0x4ac
net/http.send(0xc820290000, 0xca4488, 0xc820091290, 0xc82028e870, 0x0, 0x0)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/client.go:220 +0x52c
net/http.(*Client).send(0xc8200ffd10, 0xc820290000, 0x45, 0x0, 0x0)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/client.go:143 +0x15a
net/http.(*Client).doFollowingRedirects(0xc8200ffd10, 0xc820290000, 0x5d1410, 0x0, 0x0, 0x0)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/client.go:380 +0xbc0
net/http.(*Client).Do(0xc8200ffd10, 0xc820290000, 0x764460, 0x0, 0x0)
    /usr/local/Cellar/go/1.5.3/libexec/src/net/http/client.go:178 +0x188
github.com/github/git-lfs/lfs.(*HttpClient).Do(0xc82006e330, 0xc820290000, 0x6, 0x0, 0x0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/http.go:65 +0x115
github.com/github/git-lfs/lfs.doHttpRequest(0xc820290000, 0xc8200e6570, 0x0, 0x0, 0x0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/client.go:493 +0x633
github.com/github/git-lfs/lfs.doApiRequestWithRedirects(0xc820290000, 0xc820049aa8, 0x0, 0x4, 0x1, 0x0, 0x0, 0x0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/client.go:537 +0xb0
github.com/github/git-lfs/lfs.doAPIRequest(0xc820290000, 0x504701, 0x6, 0x0, 0x0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/client.go:479 +0x8e
github.com/github/git-lfs/lfs.doApiBatchRequest(0xc820290000, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/client.go:443 +0x13a
github.com/github/git-lfs/lfs.Batch(0xc820276030, 0x2, 0x2, 0x504788, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/client.go:235 +0x627
github.com/github/git-lfs/lfs.(*TransferQueue).batchApiRoutine(0xc8200fb1e0)
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:205 +0x456
created by github.com/github/git-lfs/lfs.(*TransferQueue).run
    /private/tmp/git-lfs20160205-83071-1xrm8js/git-lfs-1.1.1/src/github.com/github/git-lfs/lfs/transfer_queue.go:328 +0x2b7
</code></pre>
","0","939701","",""
"57909243","3745022","2019-09-12 14:45:42","0","209","<git><git-lfs><git-ls-files>","git lfs ls-files -I filter doesn't work with non-ASCII folder names","<p><a href=""https://github.com/git-lfs/git-lfs/blob/master/docs/man/git-lfs-ls-files.1.ronn"" rel=""nofollow noreferrer"">git lfs ls-files</a> <code>-I</code> filter seems not to work with non-ASCII folder names even when the filter is passed in octal encoding, as can be confirmed with the bash script below:</p>

<pre><code>mkdir LfsTestRepo
cd LfsTestRepo
git init
git lfs -v # git-lfs/2.7.2 (GitHub; windows amd64; go 1.12.2; git 08a08ae0)
git lfs install
echo ""*.dll filter=lfs diff=lfs merge=lfs -text"" &gt; .gitattributes
# ASCII
mkdir ""A B""
echo ""some binary data"" &gt; ""A B/C.dll"" 
# Non-ASCII
mkdir ""А Б""
echo ""some binary data"" &gt; ""А Б/В.dll"" 
git add --all
git commit -m ""DLLs added""

git lfs ls-files # Shows both files
git lfs ls-files -I ""/A B/*"" # ASCII - shows the file with folder filter
git lfs ls-files -I ""/А Б/*"" # Non-ASCII - doesn't show the file with folder filter

git ls-files -s "":(attr:filter=lfs)А Б"" # Non-ASCII native ls-files shows the file (octal encoding)

git lfs ls-files -I ""/\320\220 \320\221/*"" # Non-ASCII - doesn't show the file even with octal encoding
</code></pre>

<p>While in our particular case folders with non-ASCII characters shouldn't probably be ever encountered, it is still a minor nuisance and a potentially valid use-case.</p>

<p>So, am I doing something wrong, or is it just that <code>git lfs ls-files -I</code> doesn't support filters with non-ASCII characters?</p>
","0","3745022","",""
"39422328","6815376","2016-09-10 03:45:43","1","1261","<git><github><unity-game-engine><git-lfs>","git lfs not recognizing tracked file types","<p>I am trying to push my files to my repository (I am making a game design portfolio). Originally, it told me that my .unity3d files were too large to push (over 100 MB), so I downloaded git lfs. It seems to be working fine but it still says that my file is too large.</p>

<p>This is what resulted when I ran <code>$git push -u origin master</code>
(I had to edit the links so stack overflow would let me post the message).</p>

<p>Git LFS: (1 of 1 files) 163.57 MB / 163.57 MB<br>
Counting objects: 15, done.</p>

<p>Delta compression using up to 8 threads.</p>

<p>Compressing objects: 100% (12/12), done.</p>

<p>Writing objects: 100% (15/15), 14.42 MiB | 2.64 MiB/s, done.</p>

<p>Total 15 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), done.</p>

<p><code>remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com</code>.</p>

<p>remote: <code>error: Trace: 6b94a0d15a14a7da617866b684de1b8e</code></p>

<p>remote: <code>error: See http://git.io/iEPt8g</code> for more information.</p>

<p>remote: error: File Star Bomber Web Build.unity3d is 163.57 MB; this exceeds GitHub's file size limit of 100.00 MB</p>

<p>To <a href=""https://github.com/IanGRap/IanGRap.github.io.git"" rel=""nofollow noreferrer"">https://github.com/IanGRap/IanGRap.github.io.git</a>
 ! [remote rejected] master -> master (pre-receive hook declined)</p>

<p>error: failed to push some refs to = '<a href=""https://github.com/IanGRap/IanGRap.github.io.git"" rel=""nofollow noreferrer"">https://github.com/IanGRap/IanGRap.github.io.git</a>'</p>

<p>The file refered too on the first line appears to be the one I was originally referring to, as they are the same size. But if git lfs recognizes it, why is it later saying that the file is too large?</p>

<p>Here is what I have git lfs currently tracking.</p>

<p>Listing tracked paths</p>

<pre><code>*.unity3d (.gitattributes)
</code></pre>

<p>I was worried git lfs might not work with unity3d files for whatever reason, but it almost looks like it recognizes it then forgets it did? I'm still really new to all things git hub so does anybody know if I may be doing something wrong?</p>
","3","6815376","",""
"39902060","1086346","2016-10-06 17:17:25","2","1563","<git><version-control><git-lfs><bfg-repo-cleaner>","git lfs bfg: after that, resolve conflicts how?","<p>We have a repository in which we committed PDF snapshots of reports. I want to try out git lfs, see if it improves the quality of life.</p>

<p>I followed the procedures here (<a href=""https://github.com/rtyley/bfg-repo-cleaner/releases"" rel=""nofollow noreferrer"">https://github.com/rtyley/bfg-repo-cleaner/releases</a>) to use BFG to clean out the old binaries and transition to lfs. I wound my way through a couple of wrinkles related to the usage of Gitlab server for the repository, but in the end I believe this went well. </p>

<p>I'm writing to show what we did and ask a question about cleaning up merge conflicts at the very end.</p>

<p>I'll show you the transcript. We check out a ""--mirror"" clone (a bare repo) and BFG does its work on that, then we push it back after fiddling about:</p>

<pre><code>guides-to-lfs$ git clone --mirror git@gitlab.kucenter.edu:crmda/guides.git
Cloning into bare repository 'guides.git'...
X11 forwarding request failed on channel 0
remote: Counting objects: 865, done.
remote: Compressing objects: 100% (527/527), done.
remote: Total 865 (delta 318), reused 834 (delta 303)
Receiving objects: 100% (865/865), 151.75 MiB | 25.74 MiB/s, done.
Resolving deltas: 100% (318/318), done.
Checking connectivity... done.

guides-to-lfs$ cd guides.git/

guides.git$ java -jar ~/bin/bfg-1.12.13.jar --convert-to-git-lfs '*.{pdf,ogv,tar.gz,zip}' --no-blob-protection

Using repo : /home/pauljohn/GIT/CRMDA/guides-to-lfs/guides.git

Found 0 objects to protect
Found 3 commit-pointing refs : HEAD, refs/heads/master, refs/tmp/fd782dd8787a3ffb673455d1eafb9869/head

Protected commits
-----------------

You're not protecting any commits, which means the BFG will modify the contents of even *current* commits.

This isn't recommended - ideally, if your current commits are dirty, you should fix up your working copy and commit that, check that your build still works, and only then run the BFG to clean up your history.

Cleaning
--------

Found 124 commits
Cleaning commits:       100% (124/124)
Cleaning commits completed in 1,933 ms.

Updating 2 Refs
---------------

    Ref                                              Before     After   
    --------------------------------------------------------------------
    refs/heads/master                              | e3327ef1 | e4ac76a2
    refs/tmp/fd782dd8787a3ffb673455d1eafb9869/head | 74ccc454 | 6639b246

Updating references:    100% (2/2)
...Ref update completed in 19 ms.

Commit Tree-Dirt History
------------------------

    Earliest                                              Latest
    |                                                          |
    .......DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

    D = dirty commits (file tree fixed)
    m = modified commits (commit message or parents changed)
    . = clean commits (no changes to file tree)

                            Before     After   
    -------------------------------------------
    First modified commit | cdd8f486 | 5e6b64eb
    Last dirty commit     | e3327ef1 | e4ac76a2

Changed files
-------------

    Filename                                               Before &amp; After                                               
    --------------------------------------------------------------------------------------------------------------------
    01.LISREL.Syntax.pdf                                 | 71a17dcc ⇒ 7f217f4d                                          
    02.ReadingDataIntoLISREL.pdf                         | c05c3fe6 ⇒ e7238e11                                          
    03.InterpretingLISRELOutput.pdf                      | 6ef054c8 ⇒ a2a63813                                          
    04.StartingValuesInLISREL.pdf                        | 335d7a09 ⇒ c86439ee, 9f6fc232 ⇒ 05182a86                     
    05.WhatToReport.pdf                                  | 2bee7a8d ⇒ 1106d2f4, 3d30b103 ⇒ ce27382c                     
    06.Satorra-BentlerChi-Sq.pdf                         | 94ec6fd2 ⇒ b81d08b4, 7cd29d48 ⇒ 704d5f30                     
    ...

In total, 375 object ids were changed. Full details are logged here:

guides.git.bfg-report/2016-10-05/14-03-18

BFG run is complete! When ready, run: git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive

guides.git$ git reflog expire --expire=now --all

guides.git$ git gc --prune=now
</code></pre>

<p>In case you try this, you should be ready for some trouble pushing
back into the repo. One issue is that Gitlab before 8.12 did not integrate password management between the SSH transfers for git and the HTTPS transfers for git lfs. Another problem is Gitlab project ""protection"", which you may have seen if you use Gitlab.  I saw this the first time I pushed:</p>

<pre><code>guides.git$ git push
X11 forwarding request failed on channel 0
Git LFS: (0 of 105 files) 0 B / 140.38MB                          
http: Post https://gitlab.kucenter.edu/crmda/guides.git/info/lfs/objects/batch: x509: certificate signed by unknown authority
http: Post https://gitlab.kucenter.edu/crmda/guides.git/info/lfs/objects/batch: x509: certificate signed by unknown authority
error: failed to push some refs to 'git@gitlab.kucenter.edu:crmda/guides.git'
</code></pre>

<p>We made several changes to get around the problem.
We needed the absolutely newest version of Gitlab (8.12.4). I needed to tell Git to ignore the out-of-date-certificates. On the Gitlab server, the project had to be ""unprotected"" so that developers could push. I don't understand why that was necessary because I'm the owner and I can push regular git changes, but apparently the lfs integration is different.  After that fussing about, we have success pushing back to repository:</p>

<pre><code>guides.git$ GIT_SSL_NO_VERIFY=true git push
X11 forwarding request failed on channel 0
Git LFS: (0 of 0 files, 105 skipped) 0 B / 0 B, 140.38 MB skipped                                                                   Counting objects: 866, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (520/520), done.
Writing objects: 100% (866/866), 32.94 MiB | 26.41 MiB/s, done.
Total 866 (delta 311), reused 866 (delta 311)
To git@gitlab.kucenter.edu:crmda/guides.git
 + e3327ef...e4ac76a master -&gt; master (forced update)
 + 74ccc45...6639b24 refs/tmp/fd782dd8787a3ffb673455d1eafb9869/head -&gt; refs/tmp/fd782dd8787a3ffb673455d1eafb9869/head (forced update)
</code></pre>

<p>Success!</p>

<p>Then I went back to the working directory of this repository, the one that had the PDF files saved inside it, and tried a git pull. I see a lot of merge conflicts that I'll have to address:</p>

<pre><code>guides$ git pull
X11 forwarding request failed on channel 0
remote: Counting objects: 792, done.
remote: Compressing objects: 100% (491/491), done.
remote: Total 792 (delta 294), reused 791 (delta 293)
Receiving objects: 100% (792/792), 32.92 MiB | 54.09 MiB/s, done.
Resolving deltas: 100% (294/294), done.
From gitlab.kucenter.edu:crmda/guides
 + e3327ef...e4ac76a master     -&gt; origin/master  (forced update)
warning: Cannot merge binary files: keyword_guide/guide_keywords.pdf (HEAD vs. e4ac76a2561fd4dc3ca52971e8ee3d5cbe930a0c)
warning: Cannot merge binary files: Spanish_KUant_Guides/PDFs/9._opcion_RP_en_LISREL.pdf (HEAD vs. e4ac76a2561fd4dc3ca52971e8ee3d5cbe930a0c)
warning: Cannot merge binary files: Spanish_KUant_Guides/PDFs/8._Imputacion_de_datos.pdf (HEAD vs. e4ac76a2561fd4dc3ca52971e8ee3d5cbe930a0c)
warning: Cannot merge binary files: Spanish_KUant_Guides/PDFs/7._bootstrap.pdf (HEAD vs. e4ac76a2561fd4dc3ca52971e8ee3d5cbe930a0c)
warning: Cannot merge binary files: Spanish_KUant_Guides/PDFs
[...snip out hundreds of those ...]
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>I <em>think</em> I'll probably just make a clean clone of the remote and go on from there. The instructions I find on the Internet don't help too much with that, they are mostly about getting started with lfs, not so much about dealing with on-going lfs and clones of lfs. I worry a little bit about what would happen if somebody cloned this thing and they did not have lfs. Oh, well, we'll see.</p>

<p>Here's my question. If I did want to deal with all of those binary conflicts, what would I do?  If I simply want to accept all of the changes from the server, it appears I just need to run this over and over again, once for each conflicted ""fn.pdf"".</p>

<pre><code>$ git checkout --theirs -- fn.pdf
$ git add fn.pdf
</code></pre>

<p>Doing that over and over seems tedious, but I suppose I can do it. </p>

<p>I also found advice in here (<a href=""https://stackoverflow.com/questions/278081/resolving-a-git-conflict-with-binary-files"">Resolving a Git conflict with binary files</a>) to try  </p>

<pre><code>$ git mergetool
</code></pre>

<p>but I can't tell for sure how to interact with it. The diff thing launches an gvim frame with 3 columns of buffers, but I have not successfully navigated it. It appears to me that's landing me in editor hell.</p>
","4","1086346","0","0"
"58755718","1409128","2019-11-07 19:31:17","1","804","<git><gitlab><git-lfs>","error: failed to push some refs to when pushing git-lfs to GitLab","<p>I am running into this error when trying to push commits with lfs to my gitlab server. I am on the latest version of git <code>version 2.24.0.windows.2</code>. I am not exactly sure what the problem is. I have no problem pushing commits when I on other branches that do not have anything committed with git-lfs.</p>

<pre><code>Fatal error: Server error: http://gitlab.mywebsite.com/username/project.git/gitlab-lfs/objects/1fc3d99946b26bc1c3d02092f07f5378c648f786eafa482a1b0edde4389fd618/480
error: failed to push some refs to 'git@gitlab.mindforgestudios.com:Apullins/Text_Adventure.git'
</code></pre>
","0","1409128","",""
"58822686","5784831","2019-11-12 16:19:23","2","1213","<git><git-lfs>","Can I ""undo"" `git lfs checkout?","<p>I ran the following commands</p>

<pre><code>git lfs migrate import --everything --include=""*.pdf""
git reflog expire --expire-unreachable=now --all
git gc --prune=now
git push origin master
</code></pre>

<p>The I end up with local files with 1 kB only. I learned that I need an additional </p>

<pre><code>git lfs checkout 
</code></pre>

<p>to get ""the real files back"" and I just wonder, whether there is some command to hide the huge files again, that is some ""undo <code>git lfs checkout</code>""?</p>

<p>Concerning <code>git lfs prune</code>: This does not change anything:</p>

<pre><code>$ git status
On branch master
Your branch is up to date with 'origin/master'.
nothing to commit, working tree clean
</code></pre>

<p>Original files are present, then </p>

<pre><code>$ git lfs prune
* 36 local objects, 29 retained
Pruning 7 files, (935 KB)
* Deleted 7 files

$ git status
On branch master
Your branch is up to date with 'origin/master'.
nothing to commit, working tree clean
</code></pre>

<p>Files still present...</p>
","5","5784831","",""
"40136346","1156933","2016-10-19 15:56:14","2","3413","<nginx><docker><gitlab><large-files><git-lfs>","How can I increase gitlab CE lfs file size limitation as to not get 500 server errors?","<p>I'm using the excellent <a href=""https://github.com/sameersbn/docker-gitlab"" rel=""nofollow noreferrer"">sameersbn/gitlab</a> to set up a custom gitlab server for my job.</p>

<p>So I have a ridiculous scenario, I'm using <code>git lfs</code> to store files which are in the 10-20 <strong>GB</strong> range, with gitlab ce v8.12.5, but I'm seeing 500 server errors all over the place, my uploads cannot finish. </p>

<p><strong>Question: Does anyone know how I can increase the server side limitations?</strong> </p>

<blockquote>
  <p>Note: This is not a 413 nginx issue, I've set the <code>client_max_body_size 500G</code> so it should be forwarding to gitlab just fine. </p>
</blockquote>

<p>If any more info is required(i.e. log files, etc) I will gladly provide it, just make a comment.</p>

<h2>Update.1:</h2>

<p>There seems to be a related <a href=""https://gitlab.com/gitlab-org/gitlab-ce/issues/22428"" rel=""nofollow noreferrer"">gitlab issue</a> on this same problem.</p>

<h2>Update.2</h2>

<p>Other resources which are relavant:</p>

<p>For now my hypothesis is that there is a timeout somewhere in the chain or proxy servers in the docker container.</p>

<blockquote>
  <p><a href=""https://stackoverflow.com/questions/17683295/git-bash-error-rpc-failed-result-18-htp-code-200b-1kib-s/21682112#21682112"">git bash: error: RPC failed; result = 18, HTP code = 200B | 1KiB/s</a></p>
  
  <p><a href=""https://github.com/gitlabhq/gitlabhq/issues/694"" rel=""nofollow noreferrer"">https://github.com/gitlabhq/gitlabhq/issues/694</a></p>
</blockquote>

<p>So here's something I just noticed the docker mapped device <code>/dev/dm-7</code> becomes <strong>100% full</strong> near the same time that gitlab errors out with a <strong>500</strong>.</p>

<p>Now I'm starting to believe that this is not a gitlab problem, but a docker problem and that gitlab is just running out of space.</p>

<p>Thanks for your time, and cheers.</p>
","0","1156933","0","0"
"59052190","11993959","2019-11-26 13:36:27","2","690","<git><azure><proxy><git-lfs>","Running into 'authenticationrequired' error when using git lfs (Azure DevOps) behind a corporate (authenticated) proxy","<p>This issue only shows up when using LFS, not with normal git.</p>

<p>The environment is using a corporate proxy/firewall which does the SSL substitution for network scanning. The proxy requires authentication. In .gitconfig, to allow normal access, the following line was added:</p>

<pre><code>[http ""https://dev.azure.com""]
proxy = &lt;corporateproxyaddress&gt;
</code></pre>

<p>Testing git lfs, when pushing on an open network, this works fine. 
When running on the internal network, the following errors show up:</p>

<pre><code>Remote ""origin"" does not support the LFS locking API. Consider disabling it with:
  $ git config lfs.https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs.locksverify false
Uploading LFS objects:   0% (0/1), 0 B | 0 B/s, done
batch response: Post https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs/objects/batch: authenticationrequired
error: failed to push some refs to 'https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS'
</code></pre>

<p>Note that on the open network, the message about locking does not show up.</p>

<p>Running this git_trace doesn't give a lot more information:</p>

<pre><code>...
[Lots of other stuff]
...
&lt; HTTP/1.1 200 OK
&lt; P3P: CP=""CAO DSP COR ADMa DEV CONo TELo CUR PSA PSD TAI IVDo OUR SAMi BUS DEM NAV STA UNI COM INT PHY ONL FIN PUR LOC CNT""
&lt; Date: Tue, 26 Nov 2019 12:39:31 GMT
&lt; ActivityId: 78eab965-e1f6-454c-86f9-b0423b0d6874
&lt; Connection: Keep-Alive
&lt; X-VSS-E2EID: 78eab965-e1f6-454c-86f9-b0423b0d6874
&lt; Content-Type: application/x-git-receive-pack-advertisement
&lt; X-MSEdge-Ref: Ref A: C3D96E7AAAD34D31948B5780EFBEBD15 Ref B: AM3EDGE0805 Ref C: 2019-11-26T12:39:31Z
&lt; Cache-Control: private
&lt; X-TFS-Session: 78eab965-e1f6-454c-86f9-b0423b0d6874
&lt; Content-Length: 149
&lt; X-VSS-UserData: 0e251b3e-de99-6c32-a02e-8d195bc4322b:freek.giele@&lt;organization&gt;.com
&lt; Request-Context: appId=cid-v1:c8f7fd9a-79c8-4464-b82d-4564078d0a8d
&lt; X-FRAME-OPTIONS: SAMEORIGIN
&lt; X-TFS-ProcessId: be11ea40-8903-40db-9a20-752174cabee1
&lt; X-Content-Type-Options: nosniff
&lt; Strict-Transport-Security: max-age=31536000; includeSubDomains
&lt; Access-Control-Expose-Headers: Request-Context
&lt; 
* Closing connection 0
13:39:31.476453 exec-cmd.c:236          trace: resolved executable dir: C:/Program Files/Git/mingw64/libexec/git-core
13:39:31.489452 git.c:676               trace: exec: git-credential-manager store
13:39:31.490454 run-command.c:643       trace: run_command: git-credential-manager store
13:39:32.116456 run-command.c:643       trace: run_command: 'git credential-manager store'
13:39:32.255452 exec-cmd.c:236          trace: resolved executable dir: C:/Program Files/Git/mingw64/libexec/git-core
13:39:32.269453 git.c:676               trace: exec: git-credential-manager store
13:39:32.269453 run-command.c:643       trace: run_command: git-credential-manager store
13:39:32.853455 run-command.c:643       trace: run_command: .git/hooks/pre-push origin https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS
13:39:33.061456 exec-cmd.c:236          trace: resolved executable dir: C:/Program Files/Git/mingw64/libexec/git-core
13:39:33.076456 git.c:676               trace: exec: git-lfs pre-push origin https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS
13:39:33.076456 run-command.c:643       trace: run_command: git-lfs pre-push origin https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS
13:39:33.447454 trace git-lfs: exec: git 'version'
13:39:33.554492 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' 'HEAD' '--symbolic-full-name' 'HEAD'
13:39:33.825457 trace git-lfs: exec: git 'config' '-l'
13:39:33.943456 trace git-lfs: pre-push: refs/heads/master bbcad77f7720f010e1c7dd6056167518866f9e20 refs/heads/master d84c8834fd3be49d2c3a859092771c51d0c4f1ac
13:39:37.437456 trace git-lfs: HTTP: POST https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs/locks/verify
&gt; POST /&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs/locks/verify HTTP/1.1
&gt; Host: dev.azure.com
&gt; Accept: application/vnd.git-lfs+json; charset=utf-8
&gt; Content-Length: 36
&gt; Content-Type: application/vnd.git-lfs+json; charset=utf-8
&gt; User-Agent: git-lfs/2.7.1 (GitHub; windows amd64; go 1.11.5; git 6b7fb6e3)
&gt; 
Remote ""origin"" does not support the LFS locking API. Consider disabling it with:
  $ git config lfs.https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs.locksverify false
13:39:37.877456 trace git-lfs: tq: running as batched queue, batch size of 100
13:39:37.883457 trace git-lfs: run_command: git rev-list --stdin --objects --not --remotes=origin --
13:39:37.995456 trace git-lfs: tq: sending batch of size 1
13:39:37.995456 trace git-lfs: api: batch 1 files
13:39:37.995456 trace git-lfs: HTTP: POST https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs/objects/batch
&gt; POST /&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs/objects/batch HTTP/1.1
&gt; Host: dev.azure.com
&gt; Accept: application/vnd.git-lfs+json; charset=utf-8
&gt; Content-Length: 157
&gt; Content-Type: application/vnd.git-lfs+json; charset=utf-8
&gt; User-Agent: git-lfs/2.7.1 (GitHub; windows amd64; go 1.11.5; git 6b7fb6e3)
&gt; 
13:39:38.432491 trace git-lfs: api error: Post https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs/objects/batch: authenticationrequired
batch response: Post https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS.git/info/lfs/objects/batch: authenticationrequired
Uploading LFS objects:   0% (0/1), 0 B | 0 B/s, done
error: failed to push some refs to 'https://&lt;organization&gt;@dev.azure.com/&lt;organization&gt;/DemoFolder/_git/LFS'
</code></pre>

<p>Is there a configuration setting I am missing or is this an issue with Git LFS?</p>
","0","11993959","",""
"59052904","10585750","2019-11-26 14:16:11","0","102","<windows><git><git-lfs>","git-lfs .gitattributes file: strange unicode characters","<p>I am using git on windows.</p>

<p>I added the following line to <code>.gitattributes</code> file:</p>

<pre><code>""*.msi"" filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>Then I checked with <code>git lfs track</code> but nothing shows up.</p>

<p>Then I tried adding with <code>git lfs track ""*.msi""</code>. Now it shows up when using <code>git lfs track</code> but the .gitattributes file looks like this:</p>

<pre><code>਍∀⨀⸀洀猀椀∀ 昀椀氀琀攀爀㴀氀昀猀 搀椀昀昀㴀氀昀猀 洀攀爀最攀㴀氀昀猀 ⴀ琀攀砀琀ഀ਍⸪獭⁩楦瑬牥氽獦搠晩㵦晬⁳敭杲㵥晬⁳琭硥൴
</code></pre>

<p>What's going on? I want a readable working <code>.gitattributes</code> file.</p>
","0","10585750","",""
"57911612","3070814","2019-09-12 17:13:14","1","568","<python><python-3.x><git><pip><git-lfs>","PIP3 installation always tried to fetch packages from git-lfs directory","<p>Every time I try to install a package using pip3 it is trying to fetch the package from the git-lfs package repository, which of course returns an HTTP 404 error.</p>

<p>I have already tried uninstalling and installing pip3. For example when trying to install bokeh:</p>

<pre><code>pip3 install --default-timeout=1000 bokeh
</code></pre>

<p>I obtain the exception:</p>

<pre><code>    Traceback (most recent call last):
  File ""/usr/lib/python3/dist-packages/pip/basecommand.py"", line 215, in main
    status = self.run(options, args)
  File ""/usr/lib/python3/dist-packages/pip/commands/install.py"", line 353, in run
    wb.build(autobuilding=True)
  File ""/usr/lib/python3/dist-packages/pip/wheel.py"", line 749, in build
    self.requirement_set.prepare_files(self.finder)
  File ""/usr/lib/python3/dist-packages/pip/req/req_set.py"", line 380, in prepare_files
    ignore_dependencies=self.ignore_dependencies))
  File ""/usr/lib/python3/dist-packages/pip/req/req_set.py"", line 554, in _prepare_file
    require_hashes
  File ""/usr/lib/python3/dist-packages/pip/req/req_install.py"", line 278, in populate_link
    self.link = finder.find_requirement(self, upgrade)
  File ""/usr/lib/python3/dist-packages/pip/index.py"", line 465, in find_requirement
    all_candidates = self.find_all_candidates(req.name)
  File ""/usr/lib/python3/dist-packages/pip/index.py"", line 423, in find_all_candidates
    for page in self._get_pages(url_locations, project_name):
  File ""/usr/lib/python3/dist-packages/pip/index.py"", line 568, in _get_pages
    page = self._get_page(location)
  File ""/usr/lib/python3/dist-packages/pip/index.py"", line 683, in _get_page
    return HTMLPage.get_page(link, session=self.session)
  File ""/usr/lib/python3/dist-packages/pip/index.py"", line 795, in get_page
    resp.raise_for_status()
  File ""/usr/share/python-wheels/requests-2.18.4-py2.py3-none-any.whl/requests/models.py"", line 935, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://packagecloud.io/github/git-lfs/pypi/simple/bokeh/
</code></pre>
","0","3070814","",""
"57975244","6215584","2019-09-17 13:23:35","1","1348","<git><migrate><git-lfs>","bring files in feature branch back under git-lfs","<p><strong>Environment</strong></p>
<pre><code>git version 2.20.1 (Apple Git-117)
git-lfs/2.8.0 (GitHub; darwin amd64; go 1.12.7)
</code></pre>
<pre><code>$ more .gitattributes
**/data/** filter=lfs diff=lfs merge=lfs -text
**/results/** filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p><strong>Issue</strong></p>
<p>The issue plagues one of my feature branches, where - unlike in master - some large files in a <code>data</code> folder are not tracked by lfs. This was due to cloning the repo, checking out to the feature branch and committing some changes before remembering to set up lfs to track large files again.</p>
<p>The master branch correctly has these files tracked by lfs, but when I checkout to the feature branch, I get:</p>
<pre><code>Switched to branch 'feature'
Your branch is up to date with 'origin/feature'.
Encountered 27 file(s) that should have been pointers, but weren't:
...
</code></pre>
<p><strong>Attempted fix</strong></p>
<p>This should be a pretty easy to fix problem, and it's indeed mentioned in the <a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial#migrating-existing-repository-data-to-lfs"" rel=""nofollow noreferrer"">tutorial</a> under</p>
<blockquote>
<p><strong>Migrating existing repository data to LFS</strong></p>
<p>Sometimes files end up committed within your repository when they should have been committed with LFS...</p>
</blockquote>
<p>My problem is that the solution proposed there doesn't seem to do anything:</p>
<pre><code>$ git lfs migrate import --include=&quot;*/data/*&quot; # same path as in .gitattributes
migrate: Fetching remote refs: ..., done
migrate: Sorting commits: ..., done
migrate: Rewriting commits: 100% (0/0), done
migrate: Updating refs: ..., done
migrate: checkout: ..., done
</code></pre>
<p>which as you can see, does absolutely nothing in terms of rewriting commits.</p>
<p>I figured out from other issues that this might be because these files have already been pushed to remote (right?). So I tried to use the <code>--no-rewrite</code> option, to avoid rewriting history and just importing these files under lfs as a new commit, but here's what I get:</p>
<pre><code>$ git lfs migrate import --no-rewrite --include=&quot;*/data/*&quot;
fatal: expected one or more files with --no-rewrite
</code></pre>
<p>Can anyone explain me this error? How on earth do I make sure that in sub-branch feature all files with a path matching <code>**/data/**</code> are again tracked by lfs (as prescribed by <code>.gitattributes</code>), as it's already the case in master? I cannot merge this feature branch until this is fixed.</p>
<p><strong>UPDATE</strong></p>
<p>I spotted the problem with the <code>--no-rewrite</code> attempt, which caused the <code>expected one or more files with --no-rewrite</code> error: the syntax is different when using this option, and one shouldn't use include.</p>
<p>Correcting for that now gives the following error, which I still haven't been able to figure out:</p>
<pre><code>$ git lfs migrate import --no-rewrite &quot;**/data/**&quot;
fatal: no Git LFS filters found in .gitattributes
</code></pre>
<p>This doesn't seem the case to me, see my <code>.gitattributes</code> at the top.</p>
","0","6215584","",""
"58219778","3973361","2019-10-03 13:03:59","15","10460","<git><github><git-lfs>","How to get a direct link to a file in github LFS (large file storage)?","<p>I uploaded a large file to gitub using Git LFS (Large file storage).</p>
<p>At first I could download the file from a direct link.</p>
<pre><code>raw.githubusercontent.com/userName/reposiotry/master/file.mp4
</code></pre>
<p>But on the next day the file began to contain a text value</p>
<pre>oid sha256:59f24bc922e1a48bb3feeba18b23f0e9622a7ee07166d925650d7a933283f8b1
size 123882252
</pre>
<p>How do I download this file ? How to get a direct link to it ?</p>
","0","3973361","0","0"
"39337586","2950946","2016-09-05 20:52:29","78","13991","<git><github><git-lfs><git-annex>","How do Git LFS and git-annex differ?","<p><a href=""https://git-annex.branchable.com/"">git-annex</a> has been around for quite some time, but never really gained momentum.<br>
<a href=""https://git-lfs.github.com/"">Git LFS</a> is rather young and is already supported by GitHub, Bitbucket and GitLab.</p>

<p>Both tools handle binary files in git repositories. On the other hand, GitLab seems to have replaced <a href=""https://about.gitlab.com/2015/02/17/gitlab-annex-solves-the-problem-of-versioning-large-binaries-with-git/"">git-annex</a> with <a href=""https://about.gitlab.com/2015/11/23/announcing-git-lfs-support-in-gitlab/"">Git LFS</a> within one year.</p>

<ul>
<li>What are the technical differences?</li>
<li>Do they solve the same problem?</li>
</ul>
","1","2950946","0","0"
"58637815","9924593","2019-10-31 06:20:21","1","317","<git><git-lfs>","git lfs migration and pulling from upstream","<p>I am pulling code from an upstream server (Github) and making changes to the code locally and pushing to a downstream server (Gitlab). Others I work with will pull/push with the Gitlab server.</p>

<p>Now because of large files, we then have to use git-lfs on the Gitlab server. We have performed the migrate to change all existing large files to lfs files. I can see this rewrites history and now it looks like there are 2 branches which contain all the same commit contents but with different commit IDs.</p>

<p>I hope to have one history but how can I deal with the upstream server having the 'old' history and my lfs files having the 'new' history? When it comes to merging will this just be a total nightmare? I will not be pushing code upstream to Github, so I cannot change the upstream files to lfs files.</p>
","3","9924593","",""
"39855658","701263","2016-10-04 14:59:45","3","865","<git-lfs>","Git repository file size is larger after migrating to git-lfs","<p>I have a fairly large repository that takes quite awhile to clone from remote. I decided I might benefit from Git LFS so I went and migrated the repo. Though, after migrating, pushing and re-cloning, the repository takes up more disk space than the original repository. The culprit on the FS is .git/lfs/objects.</p>

<p>Before the migration my .git folder was 846MB, after migration it was 2GB, which is counter-intuitive.</p>

<p>I've tried two methods of migration. One was BFG and the other was using git filter-branch (which took three days x_x). Both ended up with the same results.</p>

<p>Am I missing something? Is this normal?</p>
","0","701263","",""
"58996296","1635450","2019-11-22 14:28:43","0","44","<git><git-lfs><bitbucket-cloud>","Last 10 days of work is lost after git push --force","<p>I tried to add pattern to GIT LFS today and all the work in the last 10 days are gone!!! The last commit seen is 11th Nov. All the work in between are all gone!!!</p>

<p>Last week I added *.html to GIT LFS. Today I tried to add *.{html, svg} and this is what I get!</p>

<pre><code>$ g reflog show --all
a7406c404 (HEAD -&gt; UpgradeDotNetCore, origin/UpgradeDotNetCore) refs/remotes/origin/UpgradeDotNetCore@{0}: update by push
a7406c404 (HEAD -&gt; UpgradeDotNetCore, origin/UpgradeDotNetCore) refs/heads/UpgradeDotNetCore@{0}: commit: Fix GIT
a7406c404 (HEAD -&gt; UpgradeDotNetCore, origin/UpgradeDotNetCore) HEAD@{0}: commit: Fix GIT
1eaf71063 refs/remotes/origin/UpgradeDotNetCore@{1}: update by push
1eaf71063 refs/heads/UpgradeDotNetCore@{1}: commit: Track wwwroot
1eaf71063 HEAD@{1}: commit: Track wwwroot
207186a6c refs/heads/UpgradeDotNetCore@{2}: branch: Created from refs/remotes/origin/UpgradeDotNetCore
207186a6c HEAD@{2}: checkout: moving from dev to UpgradeDotNetCore
be3b63495 (origin/dev, origin/HEAD, dev) refs/heads/dev@{0}: clone: from https://kokhow@bitbucket.org/4xlabs/bz-frontend.git
be3b63495 (origin/dev, origin/HEAD, dev) refs/remotes/origin/HEAD@{0}: clone: from https://kokhow@bitbucket.org/4xlabs/bz-frontend.git
be3b63495 (origin/dev, origin/HEAD, dev) HEAD@{3}: clone: from https://kokhow@bitbucket.org/4xlabs/bz-frontend.git
</code></pre>

<p>Any advice and insight is appreciated.</p>
","3","1635450","",""
"59237007","1499350","2019-12-08 15:38:12","11","2948","<git><git-lfs><gitattributes>","Should I always exclude text attribute for git LFS files?","<p>There are a lot of articles in the web saying it is a good practice to place binary files under LFS. So, <code>.gitattributes</code> file will look like this:</p>

<pre><code>## Fonts
*.otf filter=lfs diff=lfs merge=lfs -text
*.OTF filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
*.TTF filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>Note that all the entries contain <code>-text</code> which tells git to not treat these files as text files and treat them as binary.</p>

<p>Now, let's say I want to track some text files with extension <code>*.yaml</code> as LFS because they are very large but still text based. Should I create entries in the same way as for binary ones or should I omit <code>-text</code> like this?</p>

<pre><code>*.yaml filter=lfs diff=lfs merge=lfs
*.YAML filter=lfs diff=lfs merge=lfs
</code></pre>
","0","1499350","0","0"
"59337693","12533016","2019-12-14 17:56:00","0","817","<protocols><artifactory><git-lfs>","Artifactory not following git-lfs protocol","<p>I am trying to improve the reliability of git-lfs on Artifactory and I analyzed the protocol between the client and artifactory.<br>
The first part of downloading objects is to send a api command. {download, [{objectID, size},] 
the reply 
[{OID,size, auth,action[]},{}]  the problem is action is a zero length array, the expected ""download"" information is not there.</p>

<p>I did a trace of a simple lfs clone.  I also change the name to protect the guilty.</p>

<p>The problem is ""_links"" the new protocol uses ""actions""</p>

<p><a href=""https://github.com/git-lfs/git-lfs/blob/master/docs/api/batch.md"" rel=""nofollow noreferrer"">https://github.com/git-lfs/git-lfs/blob/master/docs/api/batch.md</a></p>

<pre><code>""objects"" : [ {
    ""oid"" : ""8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",
    ""size"" : 189,
    ""_links"" : {
      ""download"" : {
        ""href"" : ""https://server.org/artifactory/repo/objects/8b/4d/8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",
        ""header"" : {
          ""Authorization"" : ""Basic c3lzX21pZ2NpbHg6QVA1NVhjRWExeWhBVGZVRUxoeEpHcGplVktY""
        }
      }
    }
  }
</code></pre>

<p>@@@@@@</p>

<pre><code> GIT_TRACE=1 GIT_CURL_VERBOSE=1 git lfs clone git@github.com:svsintel/testlfs.git
12:28:42.951804 git.c:576               trace: exec: git-lfs clone git@github.com:svsintel/testlfs.git
12:28:42.951860 run-command.c:646       trace: run_command: git-lfs clone git@github.com:svsintel/testlfs.git
12:28:42.957381 trace git-lfs: run_command: 'git' version
WARNING: 'git lfs clone' is deprecated and will not be updated
          with new flags from 'git clone'

'git clone' has been updated in upstream Git to have comparable
speeds to 'git lfs clone'.
Cloning into 'testlfs'...
X11 forwarding request failed on channel 0
remote: Enumerating objects: 9, done.
remote: Counting objects: 100% (9/9), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 9 (delta 0), reused 6 (delta 0), pack-reused 0
Receiving objects: 100% (9/9), done.
12:28:43.728998 trace git-lfs: run_command: 'git' config -l -f /home/savages/DEVEL/testlfs/.lfsconfig
12:28:43.730944 trace git-lfs: run_command: 'git' config -l
12:28:43.733209 trace git-lfs: run_command: 'git' -c filter.lfs.smudge= -c filter.lfs.clean= -c filter.lfs.process= -c filter.lfs.required=false rev-parse HEAD --symbolic-full-name HEAD
12:28:43.735365 trace git-lfs: run_command: 'git' -c filter.lfs.smudge= -c filter.lfs.clean= -c filter.lfs.process= -c filter.lfs.required=false rev-parse HEAD --symbolic-full-name HEAD
12:28:43.737654 trace git-lfs: tq: running as batched queue, batch size of 100
12:28:43.738479 trace git-lfs: run_command: git cat-file --batch
12:28:43.741076 trace git-lfs: fetch javaguidelink.png [8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b]
12:28:43.741198 trace git-lfs: tq: sending batch of size 1
Git LFS: (0 of 1 files) 0 B / 189 B                                            12:28:43.741587 trace git-lfs: api: batch 1 files
12:28:43.741724 trace git-lfs: HTTP: POST https://server.org/repo/objects/batch
&gt; POST /artifactory/api/lfs/repo/objects/batch HTTP/1.1
&gt; Host: server.org
&gt; Accept: application/vnd.git-lfs+json; charset=utf-8
&gt; Content-Length: 122
&gt; Content-Type: application/vnd.git-lfs+json; charset=utf-8
&gt; User-Agent: git-lfs/2.3.4 (GitHub; linux amd64; go 1.8.3)
&gt; 
{""operation"":""download"",""objects"":[{""oid"":""8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",""size"":189}]}12:28:44.552717 trace git-lfs: HTTP: 401


&lt; HTTP/1.1 401 Unauthorized
&lt; Transfer-Encoding: chunked
&lt; Content-Type: application/json
&lt; Date: Tue, 17 Dec 2019 20:28:44 GMT
&lt; Server: Artifactory/5.3.0
&lt; Set-Cookie: BIGipServerlbauto-af01p-ir-https=!lwwF2ZPxFqh78i9ZXUYuw/jzKcOV9bdWzE0rDvzrv7YDwaHF/aePpE4m4YlV0HLmvlOn3f4in6Ea; path=/; Httponly; Secure
&lt; Www-Authenticate: Basic realm=""Artifactory Realm""
&lt; X-Artifactory-Id: a4228f8f67d17308ce2e6929fb0d1c96b8fc4fc0
&lt; X-Artifactory-Node-Id: irvapp049
&lt; 
12:28:44.552948 trace git-lfs: HTTP: {
  ""errors"" : [ {
    ""status"" : 401,
    ""message"" : ""Authorization Required""
  } ]
}
{
  ""errors"" : [ {
    ""status"" : 401,
    ""message"" : ""Authorization Required""
  } ]
}12:28:44.553053 trace git-lfs: setting repository access to basic
12:28:44.553065 trace git-lfs: run_command: 'git' config --replace-all lfs.https://server.org/artifactory/api/lfs/repo.access basic
12:28:44.555768 trace git-lfs: api: http response indicates ""basic"" authentication. Resubmitting...
12:28:44.555852 trace git-lfs: creds: git credential fill (""https"", ""server.org"", ""artifactory/api/lfs/repo"")
12:28:44.562949 trace git-lfs: Filled credentials for https://server.org/artifactory/api/lfs/repo
12:28:44.563100 trace git-lfs: HTTP: POST https://server.org/repo/objects/batch
&gt; POST /artifactory/api/lfs/repo/objects/batch HTTP/1.1
&gt; Host: server.org
&gt; Accept: application/vnd.git-lfs+json; charset=utf-8
&gt; Authorization: Basic * * * * *
&gt; Content-Length: 122
&gt; Content-Type: application/vnd.git-lfs+json; charset=utf-8
&gt; User-Agent: git-lfs/2.3.4 (GitHub; linux amd64; go 1.8.3)
&gt; 
{""operation"":""download"",""objects"":[{""oid"":""8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",""size"":189}]}{""operation"":""download"",""objects"":[{""oid"":""8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",""size"":189}]}12:28:46.318344 trace git-lfs: HTTP: 200


&lt; HTTP/1.1 200 OK
&lt; Transfer-Encoding: chunked
&lt; Content-Type: application/vnd.git-lfs+json
&lt; Date: Tue, 17 Dec 2019 20:28:46 GMT
&lt; Server: Artifactory/5.3.0
&lt; Set-Cookie: BIGipServerlbauto-af01p-ir-https=!PuMWH2edbtitYCJZXUYuw/jzKcOV9b83tgCkdCyENMF11Shn6y8h8GdLZf7RA08ntnJe+hDmFL6BoA==; path=/; Httponly; Secure
&lt; X-Artifactory-Id: a4228f8f67d17308ce2e6929fb0d1c96b8fc4fc0
&lt; X-Artifactory-Node-Id: irvapp032
&lt; 
12:28:46.518402 trace git-lfs: HTTP: {
  ""objects"" : [ {
    ""oid"" : ""8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",
    ""size"" : 189,
    ""_links"" : {
      ""download"" : {
        ""href"" : ""https://server.org/repo/objects/8b/4d/8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",
        ""header"" : {
          ""Authorization"" : ""Basic c3lzX21pZ2NpbHg6QVA1NVhjRWExeWhBVGZVRUxoeEpHcGplVktY""
        }
      }
    }
  } ]
}
{
  ""objects"" : [ {
    ""oid"" : ""8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",
    ""size"" : 189,
    ""_links"" : {
      ""download"" : {
        ""href"" : ""https://server.org/repo/objects/8b/4d/8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b"",
        ""header"" : {
          ""Authorization"" : ""Basic c3lzX21pZ2NpbHg6QVA1NVhjRWExeWhBVGZVRUxoeEpHcGplVktY""
        }
      }
    }
  } ]
}12:28:46.518635 trace git-lfs: tq: starting transfer adapter ""basic""
Git LFS: (0 of 1 files) 0 B / 189 B                                            12:28:46.519344 trace git-lfs: HTTP: GET https://server.org/artifactory/repo/objects/8b/4d/8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b
&gt; GET /artifactory/repo/objects/8b/4d/8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b HTTP/1.1
&gt; Host: server.org
&gt; Authorization: Basic * * * * *
&gt; User-Agent: git-lfs/2.3.4 (GitHub; linux amd64; go 1.8.3)
&gt; 
Git LFS: (0 of 1 files) 0 B / 189 B                                            12:28:47.326791 trace git-lfs: HTTP: 200

&lt; HTTP/1.1 200 OK
&lt; Content-Length: 189
&lt; Accept-Ranges: bytes
&lt; Content-Disposition: attachment; filename=""8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b""; filename*=UTF-8''8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b
&lt; Content-Type: application/octet-stream
&lt; Date: Tue, 17 Dec 2019 20:28:47 GMT
&lt; Etag: b0b31c0cbccf04819012d82385f3966ba0856d18
&lt; Last-Modified: Fri, 02 Aug 2019 09:42:37 GMT
&lt; Server: Artifactory/5.3.0
&lt; Set-Cookie: BIGipServerlbauto-af01p-ir-https=!kfSG8soGK6fsAIdZXUYuw/jzKcOV9czEPoAj80t8OIgyLdw5+B9YrT0o6uFWA5Jp3HDyK32k00JB; path=/; Httponly; Secure
&lt; X-Artifactory-Filename: 8b4d08d6b3a211d6bb09f636ebdfcdc88ade2f20bd0c011954929b4a65aec07b
&lt; X-Artifactory-Id: a4228f8f67d17308ce2e6929fb0d1c96b8fc4fc0
&lt; X-Artifactory-Node-Id: irvapp049
&lt; X-Checksum-Md5: b36c320fa2845b3c75f95685474843c9
&lt; X-Checksum-Sha1: b0b31c0cbccf04819012d82385f3966ba0856d18
&lt; 
Git LFS: (1 of 1 files) 189 B / 189 B                                          
12:28:47.556210 trace git-lfs: Install hook: pre-push, force=false, path=/home/savages/DEVEL/testlfs/.git/hooks/pre-push, upgrading...
12:28:47.556810 trace git-lfs: Install hook: post-checkout, force=false, path=/home/savages/DEVEL/testlfs/.git/hooks/post-checkout, upgrading...
12:28:47.557303 trace git-lfs: Install hook: post-commit, force=false, path=/home/savages/DEVEL/testlfs/.git/hooks/post-commit, upgrading...
12:28:47.558058 trace git-lfs: Install hook: post-merge, force=false, path=/home/savages/DEVEL/testlfs/.git/hooks/post-merge, upgrading...
</code></pre>
","2","12533016","",""
"57922231","5784831","2019-09-13 10:50:29","3","3951","<git><git-lfs>","Does git lfs reduce the size of files pushed to Github?","<p>Github does not allow to push files larger than 100 MB. Using <code>git lfs</code>, it is possible, to push large files to Github.
I am just curious about the idea of the process: To me it seems, that <code>git lfs</code> is just an additional switch which enables the push of large files (via https:/ only) to Github. But I can't image, that's all?</p>

<p>The doumentation in <a href=""https://www.atlassian.com/git/tutorials/git-lfs"" rel=""nofollow noreferrer"">altlassian</a> states</p>

<blockquote>
  <p>Git LFS (Large File Storage) is a Git extension developed by
  Atlassian, GitHub, and a few other open source contributors, that
  reduces the impact of large files in your repository by downloading
  the relevant versions of them lazily. Specifically, large files are
  downloaded during the checkout process rather than during cloning or
  fetching. Git LFS does this by replacing large files in your
  repository with tiny pointer files. During normal usage, you'll never
  see these pointer files as they are handled automatically by Git LFS.</p>
</blockquote>

<hr>

<p>Some details: I have a small project which I cannot push to github because of say one large file. I can then migrate and push as follows:</p>

<pre><code>git lfs migrate import --everything --include=""*.pdf""
git reflog expire --expire-unreachable=now --all
git gc --prune=now
git push origin master
git lfs checkout (? If you have local files with 1 kB only? Happend some days later...)
</code></pre>

<p>and everthing is pushed to Github - even the large files. Thus, why does Github deny large files, if it is allowed using <code>git lfs</code> (which can be installed quickly and works easily)?</p>
","0","5784831","0","0"
"57977347","1179925","2019-09-17 15:16:46","1","263","<git><git-log><git-lfs>","How to find commit at which file tracked by git lfs was deleted","<p>I'm trying to find commit at which some specific <code>*.npy</code> file was deleted.</p>

<p><code>git log --full-history  -- &lt;my_file&gt;</code> not showing anything</p>

<p><a href=""https://stackoverflow.com/questions/6839398/find-when-a-file-was-deleted-in-git"">Find when a file was deleted in Git</a></p>

<p>So I assume this file was added via git lfs.</p>

<p>How to find commit at which file tracked by git lfs was deleted?</p>
","0","1179925","0","0"
"66287692","1408347","2021-02-20 03:25:26","0","443","<git><gitlab><git-lfs>","gitlab LFS files missing after the repository is reconstructed from an exported file","<p>I want to migrate a gitlab repository that contains LFS files from gitlab server A to gitlab server B.</p>
<p>Here're the steps I've done:</p>
<ol>
<li>Click Settings -&gt; General -&gt; Export project in the repository at gitlab server A. Then download the exported file <code>repo.tar.gz</code>.</li>
<li>Create a new repository in server B using <code>repo.tar.gz</code> file.</li>
</ol>
<p>The problem I have with the above steps is that I can't download the LFS files in server B.</p>
<p>When I click the download button of one of the LFS files, I get a 404 Page Not Found error.</p>
<p><a href=""https://i.stack.imgur.com/iRkQL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iRkQL.png"" alt=""enter image description here"" /></a></p>
<p>Is this a bug of gitlab?</p>
<p>My gitlab version is 12.5.2.</p>
<p>I can successfully download the LFS files in server A.</p>
<p>If I use <code>git clone https://...</code> to download the repository at server B, I get the following error:</p>
<pre><code>Cloning into 'repo-at-server-b'...
remote: Enumerating objects: 248971, done.
remote: Counting objects: 100% (248971/248971), done.
remote: Compressing objects: 100% (163634/163634), done.
remote: Total 248971 (delta 61741), reused 248971 (delta 61741)
Receiving objects: 100% (248971/248971), 1.60 GiB | 42.92 MiB/s, done.
Resolving deltas: 100% (61741/61741), done.
Checking out files: 100% (226626/226626), done.
Downloading lfs_files/art.tar.xz (7.0 MB)
Error downloading object: lfs_files/art.tar.xz (b0d6758): Smudge error: Error downloading lfs_files/art.tar.xz (b0d67582c9a992b4f8a01fdde0f96999385435b98763251e64520e263e76ac0d): [b0d67582c9a992b4f8a01fdde0f96999385435b98763251e64520e263e76ac0d] Object does not exist on the server or you don't have permissions to access it: [404] Object does not exist on the server or you don't have permissions to access it

Errors logged to /data-disk/debug_git_lfs/repo-at-server-b/.git/lfs/logs/20210220T110106.03414397.log
Use `git lfs logs last` to view the log.
error: external filter 'git-lfs filter-process' failed
fatal: lfs_files/art.tar.xz: smudge filter lfs failed
warning: Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry the checkout with 'git checkout -f HEAD'
</code></pre>
<p>It looks like that something went wrong when exporting the repository from server A, or when importing into server B.</p>
<p>I've tried <a href=""https://stackoverflow.com/questions/41716509/fail-to-clone-repository-with-git-lfs"">the answer in this post</a>, but fail at <code>git lfs pull</code> command.</p>
<p>The error message I get from <code>git lfs pull</code> is <code>[c889004e16f35973ac3d695f7939e388060c425fd98d708e5076aefb67q15065] Object does not exist on the server or you don't have permissions to access it: [404] Object does not exist on the server or you don't have permissions to access it</code></p>
","0","1408347","",""
"39258605","2414957","2016-08-31 20:39:08","0","1875","<git><github><git-lfs><large-data>","git lfs not working properly for files larger than 100MB","<p>I was suggested by git to use git lfs for large files. After I tracked them with git lfs and checked if they are added to .gitattribute I still get the error that files are larger than 100MB for the same exact files. What are the suggestions here and how I can solve this problem? I would need to upload these large files as part of the project to github as well.</p>

<pre><code>    jalal@klein:~/computer_vision/py-faster-rcnn$ git push -u origin masterUsername for 'https://github.com': monajalal
    Password for 'https://monajalal@github.com': 
    Counting objects: 65949, done.
    Delta compression using up to 40 threads.
    Compressing objects: 100% (64616/64616), done.
    Writing objects: 100% (65949/65949), 1.53 GiB | 11.18 MiB/s, done.
    Total 65949 (delta 29371), reused 2 (delta 0)
    remote: Resolving deltas: 100% (29371/29371), done.
    remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
    remote: error: Trace: b3969bd24e3d0b92cab7299bbf735509
    remote: error: See http://git.io/iEPt8g for more information.
    remote: error: File caffe-fast-rcnn/boost_1_61_0/bin.v2/libs/math/build/gcc-5.2.1/release/link-static/src/tr1/pch.hpp.gch is 127.21 MB; this exceeds GitHub's file size limit of 100.00 MB
    remote: error: File data/faster_rcnn_models/ZF_faster_rcnn_final.caffemodel is 226.19 MB; this exceeds GitHub's file size limit of 100.00 MB
    remote: error: File data/faster_rcnn_models.tgz is 694.81 MB; this exceeds GitHub's file size limit of 100.00 MB
    remote: error: File data/faster_rcnn_models/VGG16_faster_rcnn_final.caffemodel is 522.92 MB; this exceeds GitHub's file size limit of 100.00 MB
    remote: error: File caffe-fast-rcnn/boost_1_61_0/bin.v2/libs/math/build/gcc-5.2.1/release/src/tr1/pch.hpp.gch is 127.21 MB; this exceeds GitHub's file size limit of 100.00 MB
    To https://github.com/monajalal/faster_RCNN.git
     ! [remote rejected] master -&gt; master (pre-receive hook declined)
    error: failed to push some refs to 'https://github.com/monajalal/faster_RCNN.git'



jalal@klein:~/computer_vision/py-faster-rcnn$ ls
caffe-fast-rcnn  data  experiments  lib  LICENSE  models  README.md  test  tools
jalal@klein:~/computer_vision/py-faster-rcnn$ git lfs track ""*.gch""
Tracking *.gch
jalal@klein:~/computer_vision/py-faster-rcnn$ git lfs track ""*.tgz""
Tracking *.tgz
jalal@klein:~/computer_vision/py-faster-rcnn$ git lfs track ""*.caffemodel""
Tracking *.caffemodel
jalal@klein:~/computer_vision/py-faster-rcnn$ git add -A
jalal@klein:~/computer_vision/py-faster-rcnn$ git commit -m ""files larger than 100MB tracked with git lfs""
[master 
b60c05f] files larger than 100MB tracked with git lfs
 6 files changed, 3 insertions(+)
 create mode 100644 .gitattributes
 rewrite caffe-fast-rcnn/boost_1_61_0/bin.v2/libs/math/build/gcc-5.2.1/release/link-static/src/tr1/pch.hpp.gch (99%)
 rewrite caffe-fast-rcnn/boost_1_61_0/bin.v2/libs/math/build/gcc-5.2.1/release/src/tr1/pch.hpp.gch (99%)
 rewrite data/faster_rcnn_models.tgz (99%)
 rewrite data/faster_rcnn_models/VGG16_faster_rcnn_final.caffemodel (99%)
 rewrite data/faster_rcnn_models/ZF_faster_rcnn_final.caffemodel (99%)
jalal@klein:~/computer_vision/py-faster-rcnn$ 
jalal@klein:~/computer_vision/py-faster-rcnn$ ls -a
.  ..  caffe-fast-rcnn  data  experiments  .git  .gitattributes  lib  LICENSE  models  README.md  test  tools


jalal@klein:~/computer_vision/py-faster-rcnn$ git push -u origin master
Username for 'https://github.com': monajalal
Password for 'https://monajalal@github.com': 
Username for 'https://github.com': monajalal
Password for 'https://monajalal@github.com': 
Git LFS: (5 of 5 files) 1.66 GB / 1.66 GB                                                                                                             
Counting objects: 65972, done.
Delta compression using up to 40 threads.
Compressing objects: 100% (64633/64633), done.
Writing objects: 100% (65972/65972), 1.53 GiB | 11.18 MiB/s, done.
Total 65972 (delta 29378), reused 2 (delta 0)
remote: Resolving deltas: 100% (29378/29378), done.
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: 4acfe1a1fdf5874edf9141fa8327428d
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File caffe-fast-rcnn/boost_1_61_0/bin.v2/libs/math/build/gcc-5.2.1/release/link-static/src/tr1/pch.hpp.gch is 127.21 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File data/faster_rcnn_models/ZF_faster_rcnn_final.caffemodel is 226.19 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File data/faster_rcnn_models.tgz is 694.81 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File data/faster_rcnn_models/VGG16_faster_rcnn_final.caffemodel is 522.92 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File caffe-fast-rcnn/boost_1_61_0/bin.v2/libs/math/build/gcc-5.2.1/release/src/tr1/pch.hpp.gch is 127.21 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/monajalal/faster_RCNN.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/monajalal/faster_RCNN.git'
jalal@klein:~/computer_vision/py-faster-rcnn$
</code></pre>

<p>Inside <code>.gitattribute</code> file I have:</p>

<pre><code>    *.gch filter=lfs diff=lfs merge=lfs -text
    *.tgz filter=lfs diff=lfs merge=lfs -text
    *.caffemodel filter=lfs diff=lfs merge=lfs -text
</code></pre>
","1","2414957","0","0"
"58319101","10207916","2019-10-10 08:59:03","1","118","<security><repository><artifactory><git-lfs>","Using include pattern for gitlfs repo gives: batch response: Repository or object not found:","<p>I want to use an include pattern for our git-lfs Artifactory repository to make separate directory's for security reasons.</p>

<p>The default directory created in the git-lfs repo is objects.
I want to place the artifacts in nl/kadaster/xxxx directory structures.
But when I push the artifacts using git push ( configured for pushing some type of artifacts to Artifactory ) I get an error:</p>

<p>batch response: Repository or object not found: http://'artifacthostname'/artifactory/api/lfs/lfs-local/nl/kadaster/dev/objects/batch
Check that it exists and that you have proper access to it
error: failed to push some refs to 'http://'githostname'/dev/gitlfs-test'</p>

<p>Pushing to the 'default' git-lfs root dir is ok. ( when I remove the include pattern in de repo configuration in artifactory )</p>

<p>I have tried several configurations in .get/config and .lfsconfig</p>

<p>I want to be able to push the artifacts to separate directory's in the Artifactory git-lfs repository.</p>
","0","10207916","",""
"58417991","7344314","2019-10-16 16:38:15","0","482","<git><github><git-lfs>","git push not showing on github and still lfs error","<p>I recently made a new directory on my local and copied all my changes from another project using a different source control into this new directory.</p>

<p>Inside the new directory I did</p>

<pre><code>git remote add origin git@github.com/user/repo.git //ssh url to my empty Github Repo
</code></pre>

<p>Afterwards, I did <code>git status</code> then git add all and git commit. Finally I did <code>git push</code> and I kept getting an error about a large file not being able to push to Github. For this I did <code>git lfs install</code> and <code>git lfs track ""*.[filename]""</code> but this didnt seem to work so I just deleted it from my new directory. 
After deleting it, I did <code>git status</code> again and committed the deletions of these files. However, when I push, I still get the error about the large files and checking out the <code>lfs</code> tool. When I go into my new directory, the large files git is complaining about is not there anymore.</p>
","0","7344314","",""
"39616408","2373412","2016-09-21 12:20:11","1","276","<git><github><git-lfs>","Is git-lfs needed to push and pull a repo?","<p>Does a repo with <a href=""https://git-lfs.github.com/"" rel=""nofollow""><code>git lfs</code></a> integration needed <code>git lfs</code> installed to push <strong>and</strong> pull from a repository?</p>

<p>Is it possible to have <code>git lfs</code> installed on only the machine that is <strong>pushing</strong> the changes?</p>
","0","2373412","0","0"
"58052562","10792497","2019-09-22 19:04:55","3","4766","<macos><jenkins><jenkins-pipeline><git-lfs><multibranch-pipeline>","Jenkins Multibranch Pipeline: git-lfs command not found on Mac node","<p>I've got a Jenkins multibranch pipeline configured to run tests and sonarqube scans on a mac 10.14 node thats configured via javaws. At checkout, it fails during scm checkout with:</p>

<pre><code>[Pipeline] End of Pipeline
[Bitbucket] Notifying commit build result
[Bitbucket] Build result notified
hudson.plugins.git.GitException: Command ""/usr/local/bin/git checkout -f 7dca678ce3a4a8f93fe8ed4bb4920db40c417839"" returned status code 128:
stdout: 
stderr: git-lfs filter-process: git-lfs: command not found
fatal: the remote end hung up unexpectedly

    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:2172)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access$1000(CliGitAPIImpl.java:78)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$9.execute(CliGitAPIImpl.java:2453)
Also:   hudson.remoting.Channel$CallSiteStackTrace: Remote call to JNLP4-connect connection from platform-e2e-mac.mynetwork.com/10.1.4.49:49175
        at hudson.remoting.Channel.attachCallSiteStackTrace(Channel.java:1741)
        at hudson.remoting.UserRequest$ExceptionResponse.retrieve(UserRequest.java:356)
        at hudson.remoting.Channel.call(Channel.java:955)
        at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler.execute(RemoteGitImpl.java:146)
        at sun.reflect.GeneratedMethodAccessor761.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler.invoke(RemoteGitImpl.java:132)
        at com.sun.proxy.$Proxy102.execute(Unknown Source)
        at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1242)
        at org.jenkinsci.plugins.workflow.steps.scm.SCMStep.checkout(SCMStep.java:124)
        at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:93)
        at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:80)
        at org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution.lambda$start$0(SynchronousNonBlockingStepExecution.java:47)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
Caused: hudson.plugins.git.GitException: Could not checkout AUTH-58-pipeline with start point 7dca678ce3a4a8f93fe8ed4bb4920db40c417839
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$9.execute(CliGitAPIImpl.java:2493)
    at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler$1.call(RemoteGitImpl.java:153)
    at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler$1.call(RemoteGitImpl.java:146)
    at hudson.remoting.UserRequest.perform(UserRequest.java:211)
    at hudson.remoting.UserRequest.perform(UserRequest.java:54)
    at hudson.remoting.Request$2.run(Request.java:369)
    at hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at hudson.remoting.Engine$1.lambda$newThread$0(Engine.java:97)
    at java.lang.Thread.run(Thread.java:748)
Finished: FAILURE
</code></pre>

<p>I've tried:</p>

<ol>
<li>installed and initialized git-lfs via Homebrew.</li>
<li>removed the homebrew version and installed git-lfs manually, but placing the git-lfs binary into /usr/local/bin and initializing it with git <code>lfs install</code>. (which is included in my node's $PATH)</li>
<li>installed git itself via homebrew (instead of the apple dev tools) and configured it as the default git tool in the node's TOOL configuration (confirmed it's used)</li>
<li>Initialized git-lfs at the system and local level.</li>
</ol>

<p>I have found several articles but haven't resolved the issue. It just cannot find git-lfs during checkout.</p>

<p>Since I cannot move git-lfs into <code>/usr/bin</code> due to OSX System Integrity Protection, is there a step or configuration I'm missing here?</p>

<p>Let me know if i can provide further details.</p>
","0","10792497","",""
"35068479","396110","2016-01-28 17:49:53","4","1276","<xcode><git><github><git-lfs>","Xcode server continuous integration and git lfs","<p>I created a bot in Xcode for continuous integration on my project. </p>

<p>I added a trigger to run prior to integration where I'm attempting to do a ""git lfs pull"" so that it pulls large files into the temporary directory  Xcode uses to perform the build. </p>

<p>What is a way to get the ""git lfs pull"" to work in order to have the integration succeed? </p>

<p>Currently I cannot get it to successfully download large files. My script looks like the following: </p>

<pre><code>#!/bin/bash

changeToRepo() {
    cd ${XCS_SOURCE_DIR}/My-Project-Name
}

changeToRepo
/usr/local/bin/git-lfs pull
</code></pre>

<p>However, the large files are not downloaded and when I check the logs for the trigger script, I see the following output. </p>

<blockquote>
  <p>Git LFS: (0 of 1 files) 0 B / 139.13 MB                               </p>
  
  <p>Git LFS: (0 of 1 files) 0 B / 139.13 MB<br>
  Could not checkout file git-lfs/1.1.0 (GitHub; darwin amd64; go 1.5.1;
  git 258acf1) git version 2.5.4 (Apple Git-61)</p>
  
  <p>$ git-lfs pull Could not checkout file</p>
  
  <p>Could not write working directory file: Error opening media file.
  goroutine 66 [running]: github.com/github/git-lfs/lfs.Stack(0x0, 0x0,
  0x0)  /Users/rick/go/src/github.com/github/git-lfs/lfs/errors.go:557
  +0x80 github.com/github/git-lfs/commands.logPanicToWriter(0x89a1e8, 0xc82002e018, 0x896028, 0xc82000e480)
    /Users/rick/go/src/github.com/github/git-lfs/commands/commands.go:184
  +0xf7f github.com/github/git-lfs/commands.logPanic(0x896028, 0xc82000e480, 0x0, 0x0)
    /Users/rick/go/src/github.com/github/git-lfs/commands/commands.go:148
  +0x421 github.com/github/git-lfs/commands.handlePanic(0x896028, 0xc82000e480, 0x0, 0x0)
    /Users/rick/go/src/github.com/github/git-lfs/commands/commands.go:123
  +0x4e github.com/github/git-lfs/commands.LoggedError(0x896028, 0xc82000e480, 0x548060, 0x17, 0x0, 0x0, 0x0)
    /Users/rick/go/src/github.com/github/git-lfs/commands/commands.go:73
  +0x82 github.com/github/git-lfs/commands.checkoutWithChan(0xc82012c4e0)
    /Users/rick/go/src/github.com/github/git-lfs/commands/command_checkout.go:202
  +0x860 github.com/github/git-lfs/commands.checkoutFromFetchChan.func1(0xc82012c4e0,
  0xc82018e040)
    /Users/rick/go/src/github.com/github/git-lfs/commands/command_checkout.go:78
  +0x21 created by github.com/github/git-lfs/commands.checkoutFromFetchChan
    /Users/rick/go/src/github.com/github/git-lfs/commands/command_checkout.go:80
  +0x439</p>
</blockquote>
","0","396110","0","0"
"58163427","3058609","2019-09-30 07:38:03","10","2101","<git><git-lfs>","Git-LFS migrate using the new .gitattributes file","<p>I have a largish (32k commits) git repository in which I need to rewrite history in one branch to remove a bunch of large files as described by a .gitattributes file. This branch is entirely local and has never hit a remote (in fact our remote is rejecting it because of the large files in history).</p>

<p>I know that the following command will go through the history of the branch and remove all <code>.dll</code> files:</p>

<pre><code>$ git lfs migrate import --include='*.dll'
</code></pre>

<p>but since the .gitattributes file exists and is rather extensive, is there a command that simply replays the work that would have been done to pointer-ize those files, if the .gitattributes file had existed back when the branch was created?</p>
","2","3058609","0","0"
"58432337","4391360","2019-10-17 12:09:20","1","729","<git><github><git-lfs>","How from github, not to clone the large files managed by git-lfs?","<p>In case a github repository (for example /user/myRepository) has large data files managed by <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">Git LFS</a>, when we clone the repository (with git-lfs installed on the client) with <code>git clone https://github.com/user/myRepository.git</code>, we get the whole repository (including the large files) and it can be quite long.</p>

<p>Is there a solution to not recover large files if you want to quickly clone only codes (without large files)?</p>

<p>I tried naively to do:</p>

<pre><code>git lfs uninstall
</code></pre>

<p>before to do: </p>

<pre><code>git clone https://github.com/user/myRepository.git
</code></pre>

<p>and it took long time and the large files was cloned ...</p>

<p><strong>I look for a simple method like:</strong></p>

<p>I want the large files, I do:</p>

<pre><code>git lfs install
git clone https://github.com/user/myRepository.git
</code></pre>

<p>I want to be fast and I don't need large files, I do:</p>

<pre><code>git lfs  uninstall
git clone https://github.com/user/myRepository.git
</code></pre>
","1","4391360","0","0"
"58541260","2576311","2019-10-24 12:19:46","31","8343","<git><git-lfs><dvc>","Difference between git-lfs and dvc","<p>What is the difference between these two? We used git-lfs in my previous job and we are starting to use dvc alongside git in my current one. They both place some kind of index instead of file and can be downloaded on demand. Has dvc some improvements over the former one?</p>
","0","2576311","0","0"
"35166077","5871762","2016-02-02 23:52:59","7","3153","<git><version-control><git-lfs><bitbucket-server>","convert exsisting git repository to git-lfs","<p>I am acctualy trying to convert my git repository to git-lfs. I downloaded the bitbucket test server, created a repository and enabled lfs in the options of the repo and the server. If i call git-lfs to track ""*.psd"" files, it works fine. If i push .psd files they are stored in the git lfs location.The problem is, if i push an exsisting repository(clientside) into an empty git-lfs repo, the files are not stored inside the git-lfs storage. However, if i push another .psd file after that, it works fine. </p>

<p>Do you guys have a good idea how to conver my repo to git-lfs ? I have to keep the history etc. as it is. I also saw some guides on that, but nothing rly worked vor me. I was looking at  <a href=""https://github.com/bozaro/git-lfs-migrate"" rel=""noreferrer"">git-lfs-migrate</a>, <a href=""https://github.com/github/git-lfs/issues/326#issuecomment-130439984"" rel=""noreferrer"">another script</a> and some other things. Nothing of this was pushing the tracked files to the lfs dir. directory</p>

<p>Thanks for helping me out !</p>

<p>Frossy</p>
","0","5871762","0","0"
"35179945","5871762","2016-02-03 14:38:16","2","409","<git><bash><shell><sed><git-lfs>","Speed up bash script converting git repo to LFS","<p>I am trying to convert a git repository to lfs. I am trying out this bash script at the moment and noticed that its pretty slow. Does anyone know how to speed this up a bit ? I am not realy in this whole bash thing.</p>

<pre><code>git filter-branch --prune-empty --tree-filter '
git lfs track ""*.psd""
git lfs track ""*.jpg""
git lfs track ""*.png""
git add .gitattributes 
git ls-files -z | xargs -0 git check-attr filter | grep ""filter: lfs"" | sed -E ""s/(.*): filter: lfs/\1/"" | tr ""\n"" ""\0"" | while read -r -d $'""'\0'""' file; do
    echo ""Processing ${file}""
    git rm -f --cached ""${file}""
    echo ""Adding $file lfs style""
    git add ""${file}""
done
' --tag-name-filter cat -- --all
</code></pre>
","6","5871762","",""
"35182052","4304934","2016-02-03 16:12:00","1","616","<github><git-lfs>","Trouble installing git LFS","<p>I've installed LFS through Homebrew but when I set it up it returns </p>

<pre><code> Error: unknown command ""install"" for ""git-lfs""
 Run 'git-lfs --help' for usage.
</code></pre>

<p>If I try to have it track a file type it returns </p>

<pre><code>.swf is outside repository
</code></pre>
","0","4304934","0","0"
"35198662","5871762","2016-02-04 10:34:32","1","325","<git-lfs>","Track everything with git-lfs","<p>I was wondering, why does no one use git with LFS to track everything? Since we configure LFS to track files based on the file extension instead of file size, I was thinking about tracking all my project files. Did anyone try this approach yet? Does it even make sense?</p>
","0","5871762","",""
"58796472","10327481","2019-11-11 06:25:29","32","34720","<git><git-lfs>","git lfs is not a command Mac OS","<pre><code>LFS git: 'lfs' is not a git command. See 'git --help'.
</code></pre>

<p>I am facing this issue on mac os. iit lfs command is working fine on terminal.
But when I am running this command from some script it is trying to find the lfs command into the git this is what I understand so far.</p>

<p>Please help me out in fixing this.</p>
","4","10327481","0","0"
"58958268","2125837","2019-11-20 15:44:42","1","1855","<git><credentials><git-lfs>","git lfs credential check command","<ul>
<li>Our company has a policy to force us to change passwords every three months. So <code>git lfs</code> operation will be broken every three months. </li>
<li>The problem is that <code>git</code> alone uses the default built windows credential mechanism so <code>git pull</code> can survive such password-change and only at the very end of <code>git pull</code> process the git lfs operation kicks in and then fail, leaving my huge git repo in a messy stage, with hundreds of changed or untracked files.</li>
</ul>

<p>So, is there any simple git lfs command I can use prior to <code>git pull</code>, to check/verify? I tried <code>git lfs pull</code> but that one does not ask for credentials.</p>
","0","2125837","0","0"
"59029451","1635450","2019-11-25 10:11:58","1","118","<bitbucket><git-push><git-pull><git-lfs>","Bitbucket git lfs fail to push and pull","<p>On <code>git lfs pull</code>, I get:</p>

<pre><code>Object does not exist on the server: [404] Object does not exist on the server

</code></pre>

<p>On <code>git lfs push origin --all</code>, I get:</p>

<pre><code>(missing) src/some_file_name (c466bb10506eb1404a0746d50069eaacb96abe736bb3351a81a29e1dea5d47c2)
</code></pre>

<p>How do I recover from this?</p>
","0","1635450","",""
"40294535","973447","2016-10-27 21:33:42","1","3644","<windows><git><git-lfs>","pre-push hook is reporting that git-lfs is not in my path, but it is","<p>I have git-lfs installed for Windows. It seems to be in my path for both <code>Git Bash</code> and <code>PowerShell</code>. Here is the output from <code>Git Bash</code></p>

<pre><code>502618458@G13G3Q72E MINGW64 ~
$ which git-lfs
/c/Program Files/Git LFS/git-lfs

502618458@G13G3Q72E MINGW64 ~
$ git lfs version
git-lfs/1.4.4 (GitHub; windows amd64; go 1.7.3; git cbf91a9)
</code></pre>

<p>Yet, when I run:</p>

<pre><code>$ git lfs install
Updated pre-push hook.
Git LFS initialized.
</code></pre>

<p>I get the following in the <code>pre-push</code> hook.</p>

<pre><code>#!/bin/sh
command -v git-lfs &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 ""\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/pre-push.\n""; exit 2; }
git lfs pre-push ""$@""
</code></pre>

<p>I've tried deleting the <code>pre-push</code> hook and reinstalling and I still get the same result.</p>

<p>I tested pushing a file that should be tracked... Used <code>git lfs track</code>, added <code>.gitattributes</code> and the tracked file, but it gets push into the regular git repo instead of git-lfs storage.</p>

<p>Any idea why I can't get <code>git lfs install</code> to put the right contents into the <code>pre-push</code> hook or know of any workarounds?</p>
","1","973447","",""
"40387376","6557000","2016-11-02 18:36:03","1","9341","<git><github><version-control><git-lfs>","git-lfs checkout remote branch","<p>I'm trying to checkout a branch from a remote that uses lfs to store files:</p>

<pre><code>git remote add remoteRepo git@github.com:user/remoteRepo-lfs.git
git fetch remoteRepo
git checkout -b test remoteRepo/master
</code></pre>

<p>It is worth mentioning that the remote has been subject to the bozaro/git-lfs-migrate tool. The checkout process stops with an error and a </p>

<pre><code>git lfs logs last
</code></pre>

<p>shows:</p>

<pre><code>git-lfs/1.4.4 (GitHub; linux amd64; go 1.7.3; git cbf91a9)
git version 2.10.2

$ git-lfs smudge -- testText.log
Error downloading object: testText.log (dc56c0fc4d655b0895d83cd61b121f30cb74bda428655db4144e4a1c8b582b57)

Smudge error: Error buffering media file: Object not found on the server.: 
github.com/github/git-lfs/errors.newWrappedError
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/errors/types.go:166
github.com/github/git-lfs/errors.NewSmudgeError
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/errors/types.go:252
github.com/github/git-lfs/lfs.PointerSmudge
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/lfs/pointer_smudge.go:69
github.com/github/git-lfs/lfs.(*Pointer).Smudge
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/lfs/pointer.go:64
github.com/github/git-lfs/commands.smudgeCommand
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/commands/command_smudge.go:66
github.com/github/git-lfs/vendor/github.com/spf13/cobra.(*Command).execute
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/vendor/github.com/spf13/cobra/command.go:477
github.com/github/git-lfs/vendor/github.com/spf13/cobra.(*Command).Execute
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/vendor/github.com/spf13/cobra/command.go:551
github.com/github/git-lfs/commands.Run
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/commands/run.go:65
main.main
    /Users/ttaylorr/dev/go/src/github.com/github/git-lfs/git-lfs.go:33
runtime.main
    /usr/local/Cellar/go/1.7.3/libexec/src/runtime/proc.go:183
runtime.goexit
    /usr/local/Cellar/go/1.7.3/libexec/src/runtime/asm_amd64.s:2086

ENV:
LocalWorkingDir=/home/person/Projects/proteus/proteus
LocalGitDir=/home/person/Projects/proteus/proteus/.git
LocalGitStorageDir=/home/person/Projects/proteus/proteus/.git
LocalMediaDir=/home/person/Projects/proteus/proteus/.git/lfs/objects
LocalReferenceDir=
TempDir=/home/person/Projects/proteus/proteus/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
BatchTransfer=true
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic
UploadTransfers=basic
GIT_DIR=.git
GIT_PREFIX=
</code></pre>

<p>A git-lfs env shows: </p>

<pre><code>git-lfs/1.4.4 (GitHub; linux amd64; go 1.7.3; git cbf91a9)
git version 2.10.2

Endpoint=https://github.com/username/repo.git/info/lfs (auth=none)
  SSH=git@github.com:username/repo.git
Endpoint (remoterepo)=https://github.com/username/remoteRepo.git/info/lfs (auth=none)
  SSH=git@github.com:username/remoteRepo.git
LocalWorkingDir=/home/person/Projects/proteus/proteus
LocalGitDir=/home/person/Projects/proteus/proteus/.git
LocalGitStorageDir=/home/person/Projects/proteus/proteus/.git
LocalMediaDir=/home/person/Projects/proteus/proteus/.git/lfs/objects
LocalReferenceDir=
TempDir=/home/person/Projects/proteus/proteus/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
BatchTransfer=true
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic
UploadTransfers=basic
git config filter.lfs.smudge = ""git-lfs smudge -- %f""
git config filter.lfs.clean = ""git-lfs clean -- %f""
</code></pre>

<p>I have cloned remoteRepo-lfs successfully with </p>

<pre><code>git clone git@github.com:user/remoteRepo-lfs.git
</code></pre>

<p>and have also been able to successfully checkout the branch by specifying in a .lfsconfig file:</p>

<pre><code>[lfs]
  url = https://github.com/username/remoteRepo-lfs.git
[remote ""remoteRepo""]
  lfsurl = https://github.com/username/remoteRepo-lfs.git/info/lfs
</code></pre>

<p>which seems to overwrite the endpoint url for origin. Is there a way to setup the local directory such that I can push/pull/checkout lfs files from origin and remotes based on their respective endpoint urls? </p>
","4","6557000","0","0"
"59210453","4573095","2019-12-06 09:38:54","2","1348","<git><git-lfs><gitattributes>","Remove Git lfs link to file and add it to git directly","<p>I need to remove a Git LFS file pointer, and add the file directly to Git. </p>

<p>I have a filter in .gitattributes to match certain files:</p>

<pre><code>test/**/*.py filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>How can I modify it to exclude 1 file from this pattern?</p>

<p>I tried something like this:</p>

<pre><code>test/**/*.py !test/my_dir/my_file.py filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>but it doesn't seem to work... git says that there is no such file</p>
","2","4573095","",""
"59294654","258894","2019-12-11 21:52:02","1","413","<git><gitlab><git-lfs>","Can't upload git-lfs files to gitlab: get 404 errors from endpoint","<p>I have a private repo that I migrated from github to gitlab.com a few months ago. Today, suddenly I can’t push binary git-lfs files to my repo. As far as I know, I haven’t had any troubles til today. My git lfs env shows this endpoint:</p>

<pre><code>% git lfs env
git-lfs/2.9.1 (GitHub; linux amd64; go 1.13.1)
git version 2.24.0

Endpoint=https://gitlab.com/garyo/horizon-project/info/lfs (auth=none)
LocalWorkingDir=/c/dss/Product/Horizon/WebProjects/horizon-project/horizon
</code></pre>

<p>and the errors are like this:</p>

<pre><code>% GIT_CURL_VERBOSE=1 git lfs push origin master
...
16:28:29.155229 trace git-lfs: HTTP: POST https://gitlab.com/garyo/horizon-project/info/lfs/objects/batch
&gt; POST /garyo/horizon-project/info/lfs/objects/batch HTTP/1.1
&gt; Host: gitlab.com
&gt; Accept: application/vnd.git-lfs+json; charset=utf-8
&gt; Content-Length: 285
&gt; Content-Type: application/vnd.git-lfs+json; charset=utf-8
&gt; User-Agent: git-lfs/2.9.1 (GitHub; linux amd64; go 1.13.1)
&gt;
{""operation"":""upload"",""objects"":[{""oid"":""af24ad604dd7b3bcda8f975ab973075f4a2f70a4087944a12f8ef8b63a3e07c2"",""size"":665},{""oid"":""3ed612f41e050ca5e7000cad6f1cbe7e7da39f65fca99c02e99e6591056e5837"",""size"":628}],""transfers"":[""lfs-standalone-file"",""basic""],""ref"":{""name"":""refs/heads/master""}}16:28:29.469808 trace git-lfs: HTTP: 404

&lt; HTTP/1.1 404 Not Found
&lt; Content-Length: 3108
&lt; Cache-Control: no-cache, no-store, max-age=0, must-revalidate
&lt; Content-Type: text/html; charset=utf-8
&lt; Date: Wed, 11 Dec 2019 21:28:31 GMT
&lt; Expires: Fri, 01 Jan 1990 00:00:00 GMT
&lt; Gitlab-Lb: fe-12-lb-gprd
&lt; Gitlab-Sv: web-18-sv-gprd
&lt; Pragma: no-cache
&lt; Server: nginx
&lt; X-Request-Id: tJHBYOXl4P7
&lt; X-Runtime: 0.017913
&lt;
16:28:29.470042 trace git-lfs: api error: Repository or object not found: https://gitlab.com/garyo/horizon-project/info/lfs/objects/batch
</code></pre>

<p>Everything seems fine on my local, and I can push commits without any LFS files just fine. <code>git lfs fsck</code> reports all OK. Is that the right LFS endpoint? What can I do to get this going?</p>
","0","258894","",""
"51031300","5454400","2018-06-25 20:23:23","1","2325","<git><docker><git-lfs>","In Docker, git-lfs giving error: credentials for https://github.... not found","<p>I am trying to pull large files into a Docker container from git using git-lfs. Unfortunately, I keep getting the error:</p>

<pre><code>...

 ---&gt; f07e7087dc5a
Step 13/16 : RUN git lfs pull
 ---&gt; Running in a387e389eebd
batch response: Git credentials for https://github.XXXX.edu/XXXXX/XXXXXXXXX.git not found.
error: failed to fetch some objects from 'https://github.XXXX.edu/XXXXX/XXXXXXXXX.git/info/lfs'
The command '/bin/sh -c git lfs pull' returned a non-zero code: 2
</code></pre>

<p>Any idea how to fix this and get my files pulled correctly and error-free? I am running the following in Docker to try to get git-lfs to work:</p>

<pre><code># Get git-lfs and pull down the large files
RUN apt-get update &amp;&amp; apt-get install -y apt-utils &amp;&amp; apt-get install -y curl
RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
RUN apt-get install -y git-lfs
RUN git lfs install
RUN git lfs pull
</code></pre>

<p>I add my <code>.gitattributes</code> file and <code>.git</code> file to the Docker image as well.</p>

<p><strong>EDIT</strong>: Can I maybe somehow use:</p>

<pre><code>https://you:password@github.com/you/example.git
</code></pre>

<p>or</p>

<pre><code>git config remote.origin.url https://you:password@github.com/you/example.git
</code></pre>
","1","5454400","0","0"
"45039647","6490497","2017-07-11 16:09:06","0","104","<git><cmd><git-lfs>","Only ""which git lfs"" doesn't work in windows prompt","<p>I just started to use git and git-lfs several days ago, and this problem came out. I could use any git command both in Git bash and windows cmd but ""which git lfs"". It works fine in Git bash but not in cmd, it said <strong>'which' is not recognized as an internal or external command, operable program or batch file</strong>. I checked my Path variable and GIT LFS was included, so this made me really confused. Is ""which git lfs"" a special command only for Git bash? Thanks for your help!</p>
","0","6490497","",""
"45047446","1165927","2017-07-12 02:41:23","0","113","<git><github><git-lfs>","Accidentally committed a large file, rm --cached it but git still won't let me push","<p>Earlier today I made a commit and a push to my repo. My commit included a large file (quantifications.csv) which gave me the typical error that it couldn't be pushed and that I should use git-lfs. I tried to remove the file from my history using</p>

<p>git rm --cached /path/to/quantifications.csv</p>

<p>The rm worked fine, but when I try to push, I still get the lfs notification. I have tried multiple things by this point, but I still can't seem to push my work.</p>
","1","1165927","",""
"45051978","1705458","2017-07-12 08:10:30","3","649","<gitlab><git-lfs>","Gitlab: Access git lfs files through deploy keys","<p>I am using Gitlab Community Edition 8.13.7 and want to switch our projects to use git lfs. </p>

<p>I setup a test project with git-lfs which works fine with cloning, pushing and pulling with git-lfs. Once the same project is used on our jenkins-ci cloning fails.</p>

<p>Before installing git-lfs on the jenkins machine I could clone the project fine and would see that the binary was replaced with a pointer file.</p>

<pre><code>cat image.iso
version https://git-lfs.github.com/spec/v1
oid sha256:1e1c4ea8348914d81385e4801de6ba34baa6ed6c4eb4f4cd026d0659eaa459de
size 111691252
</code></pre>

<p>After installing git-lfs I get the following error: </p>

<pre><code>stderr: Downloading image.iso (112 MB)
Error downloading object: image.iso (1e1c4ea): Smudge error: 
Error downloading image.iso (1e1c4ea8348914d81385e4801de6ba34baa6ed6c4eb4f4cd026d0659eaa459de): batch response:
Fatal error: Server error: http://gitlab-01.carsten.net/carsten/testing-lfs.git/info/lfs/objects/batch
Errors logged to /data/jenkins/tkn-01/lygteskov-test-lfs/.git/lfs/objects/logs/20170711T155641.879051717.log
Use `git lfs logs last` to view the log.
error: external filter git-lfs smudge -- %f failed 2
error: external filter git-lfs smudge -- %f failed
fatal: image.iso: smudge filter lfs failed` 
</code></pre>

<p>Output from git lfs logs last:</p>

<pre><code>git-lfs/2.2.1 (GitHub; linux amd64; go 1.8.3; git 621d1f82)
git version 2.0.5

$ git-lfs smudge -- image.iso
Error downloading object: image.iso (1e1c4ea): Smudge error: Error downloading image.iso (1e1c4ea8348914d81385e4801de6ba34baa6ed6c4eb4f4cd026d0659eaa459de): batch response: Fatal error: Server error: http://gitlab-01.carsten.net/carsten/testing-lfs.git/info/lfs/objects/batch

Server error: http://gitlab-01.carsten.net/carsten/testing-lfs.git/info/lfs/objects/batch
github.com/git-lfs/git-lfs/errors.Errorf
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/errors/errors.go:69
github.com/git-lfs/git-lfs/lfsapi.defaultError
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/lfsapi/errors.go:114
github.com/git-lfs/git-lfs/lfsapi.(*Client).handleResponse
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/lfsapi/errors.go:51
github.com/git-lfs/git-lfs/lfsapi.(*Client).Do
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/lfsapi/client.go:80
github.com/git-lfs/git-lfs/lfsapi.(*Client).doWithCreds
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/lfsapi/auth.go:74
github.com/git-lfs/git-lfs/lfsapi.(*Client).DoWithAuth
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/lfsapi/auth.go:44
github.com/git-lfs/git-lfs/tq.(*tqClient).Batch
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/tq/api.go:60
github.com/git-lfs/git-lfs/tq.Batch
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/tq/api.go:36
github.com/git-lfs/git-lfs/tq.(*TransferQueue).enqueueAndCollectRetriesFor
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/tq/transfer_queue.go:286
github.com/git-lfs/git-lfs/tq.(*TransferQueue).collectBatches
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/tq/transfer_queue.go:258
runtime.goexit
        /usr/local/Cellar/go/1.8.3/libexec/src/runtime/asm_amd64.s:2197
github.com/git-lfs/git-lfs/errors.newWrappedError
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/errors/types.go:170: Fatal error
github.com/git-lfs/git-lfs/errors.newWrappedError
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/errors/types.go:170: batch response
github.com/git-lfs/git-lfs/errors.newWrappedError
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/errors/types.go:170: Error downloading image.iso (1e1c4ea8348914d81385e4801de6ba34baa6ed6c4eb4f4cd026d0659eaa459de)
github.com/git-lfs/git-lfs/errors.newWrappedError
        /Users/ttaylorr/go/src/github.com/git-lfs/git-lfs/errors/types.go:170: Smudge error

ENV:
LocalWorkingDir=/data/jenkins/tkn-01/lygteskov-test-lfs
LocalGitDir=/data/jenkins/tkn-01/lygteskov-test-lfs/.git
LocalGitStorageDir=/data/jenkins/tkn-01/lygteskov-test-lfs/.git
LocalMediaDir=/data/jenkins/tkn-01/lygteskov-test-lfs/.git/lfs/objects
LocalReferenceDir=
TempDir=/data/jenkins/tkn-01/lygteskov-test-lfs/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic
UploadTransfers=basic
GIT_INTERNAL_GETTEXT_SH_SCHEME=gnu
GIT_DIR=.git
GIT_REFLOG_ACTION=pull origin master
GIT_PREFIX=
</code></pre>
","0","1705458","",""
"45117476","4457757","2017-07-15 11:08:43","5","631","<git><github><git-lfs>","Access download on git LFS file via raw.githubusercontent.com","<p>I recently upgraded a video from 480p to 720p on my repo. To do this I had to use git LFS since the 720p video was more than 100 MB (which is Github's limit for file storage).</p>

<p>Before the upgrade, I could download the video via a link similar to this: <a href=""https://raw.githubusercontent.com/user/repo/master/videos/video.mp4"" rel=""noreferrer"">https://raw.githubusercontent.com/user/repo/master/videos/video.mp4</a></p>

<p>Now, this link displays git LFS related information about the video (version, oid and size). I know I can use another link to download the video but I really need this link to do it (this URL as been documented somewhere I can't edit).</p>

<p>Is there a way to achieve this?</p>
","1","4457757","0","0"
"63621100","13578314","2020-08-27 17:14:52","1","4113","<git><amazon-web-services><github><large-files><git-lfs>","git lfs not working correctly - related to having no .gitconfig file?","<p>I've got a git repo with many large files that I need to access from my personal laptop and my AWS EC2 instance. For institutional reasons I'm accessing the instance through AWS SSM, and working as sudo. I keep having issues with (1) pushing large files to remote from AWS, as well as (2) getting errors when running my code because on startup my large files get replaced with their pointers instead of the actual file. Here's my (perhaps technically challenged) summary of what I've done and tried:</p>
<ul>
<li>I installed git and cloned my repos, then installed git lfs. This obviously failed to grab full files, so I had to git lfs migrate and then perform a git lfs pull. It all seemed to be working after this. I was able to create large files and push them to remote.</li>
<li>When I stopped the instance and signed back in I found I had to perform 'git lfs pull' to get the large files because they were defaulting to the pointers on restart.</li>
<li>I tried pushing some new large files and it's erroring out, saying:</li>
</ul>
<pre><code>remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: be4db70fb591a3183909102e8bbb8ba4
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File deterministic/outputs/s_consequences_SCM6p5_AHRAO_b0_434.csv is 370.07 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File deterministic/outputs/s_consequences_SCM5p8_AHRAM_b0_421.csv is 154.72 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File deterministic/outputs/s_dmgbyasset_IDM6p8_JdFP_b0_17.csv is 155.28 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File deterministic/outputs/s_dmgbyasset_SCM5p8_AHRAM_b0_421.csv is 142.86 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File deterministic/outputs/s_dmgbyasset_SCM6p5_AHRAO_b0_434.csv is 335.78 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File deterministic/outputs/s_lossesbyasset_SCM5p8_AHRAM_b0_423.csv is 136.97 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/PROJECT/oqREPO.git
 ! [remote rejected] tieganh -&gt; tieganh (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/PROJECT/oqREPO.git'
</code></pre>
<ul>
<li>I tried a hard reset to the commit before adding the large files, did a git lfs pull, re-committed, and then pushed. It still fails with the same error.</li>
<li>I checked that my large csv files are being tracked with <code>more .gitattributes</code>:</li>
</ul>
<pre><code>ProjectMaterials/OQWorkshop_Montreal/EqRisk_Nov2019_THEdit.key filter=lfs diff=lfs merge=lfs -text
ProjectMaterials/OQWorkshop_Montreal/OQWorkshopTraining.key filter=lfs diff=lfs merge=lfs -text
*.csv filter=lfs diff=lfs merge=lfs -text
</code></pre>
<ul>
<li>I tried checking if lfs was correctly installed on my ~/.gitconfig but found that it doesn't exist. It also doesn't exist in ~/.config/git/config, on sudo or as a regular user. Maybe because I was having an issue with mounting my storage volume at first, and accidentally had mounted my root directory to a different location for a while? I'm in over my head a bit.</li>
</ul>
<p>I'd really appreciate any help with this issue, either to fix my current repo or to help with reinstalling and moving to a new [clean] repo. For reference, I'm on Ubuntu 18.04 and the output of <code>git lfs env</code> is:</p>
<pre><code>git-lfs/2.3.4 (GitHub; linux amd64; go 1.8.3)
git version 2.17.1

Endpoint=https://github.com/PROJECT/oqREPO.git/info/lfs (auth=basic)
LocalWorkingDir=/root/storage/oqREPO
LocalGitDir=/root/storage/oqREPO/.git
LocalGitStorageDir=/root/storage/oqREPO/.git
LocalMediaDir=/root/storage/oqREPO/.git/lfs/objects
LocalReferenceDir=
TempDir=/root/storage/oqREPO/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=/root/storage/oqREPO/.git/lfs
AccessDownload=basic
AccessUpload=basic
DownloadTransfers=basic
UploadTransfers=basic
git config filter.lfs.process = &quot;&quot;
git config filter.lfs.smudge = &quot;&quot;
git config filter.lfs.clean = &quot;&quot;
</code></pre>
","1","13578314","",""
"45533593","5405070","2017-08-06 15:31:49","7","2461","<git><git-lfs><gitattributes>","How to make git LFS not apply to a subdirectory","<p>My repository uses git LFS and includes lines such as this one in its .gitattributes:</p>

<pre><code>*.jar filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>There's one .jar file that I want to store in the repo directly, not involving LFS. Ideally, I would make LFS not apply to anything under the directory that contains that jar. Is there a way to do that?</p>
","0","5405070","0","0"
"45536242","3006737","2017-08-06 20:21:30","1","1620","<git><git-lfs>","Cannot checkout a file with Git LFS: `unknown command ""post-checkout"" for ""git-lfs""`","<p>When I do the following command while on a feature branch:</p>

<pre><code>git checkout origin/master foo.js
</code></pre>

<p>I get the following error:</p>

<pre><code>$ git checkout origin/master foo.js
Error: unknown command ""post-checkout"" for ""git-lfs""
Run 'git-lfs --help' for usage.
</code></pre>

<p>Why is this happening and how do I fix this issue?</p>

<p><strong>Update</strong>
From this question: <a href=""https://stackoverflow.com/questions/43743717/cannot-use-older-version-of-git-lfs-on-a-repo-created-using-latest-version"">Cannot use older version of git-lfs on a repo created using latest version</a> it seems like it may be that I am using an older version of Git-LFS on the master branch compared to the feature branch (I may be wrong). </p>

<p>How can I check which version of GIT-LFS is being used for this feature branch?</p>
","0","3006737","",""
"63654604","14190187","2020-08-30 06:24:46","4","4259","<git><deprecated><git-lfs>","Why do I get a Warning that ""git lfs clone is deprecated""?","<p>When I run this:</p>
<pre><code>git lfs clone https://github.com/Unity-Technologies/FPSSample.git
</code></pre>
<p>I get this message:</p>
<blockquote>
<p>WARNING: 'git lfs clone' is deprecated and will not be updated with new flags from 'git clone'
'git clone' has been updated in upstream Git to have comparable
speeds to 'git lfs clone'.</p>
</blockquote>
<p>What does this mean, and what do I need to do about it?</p>
","6","14190187","0","0"
"64406789","14453685","2020-10-17 20:01:44","0","703","<git><github><git-lfs>","displaying old sha256 value after migrating sources from github","<p>I had a repository called <code>RepoA</code> in GitHub with some large files.
I migrated <code>RepoA</code> from GitHub to GitLab.</p>
<p>After that, I cloned <code>RepoA</code> sources from GitLab. If I run</p>
<pre><code>git show file1.tar
</code></pre>
<p>I'm getting the following message:</p>
<pre><code>+version https://git-lfs.github.com/****/v1
+oid sha256:*****************hgxs7y726726746881e7*****
+size 96776698
</code></pre>
<ol>
<li>Why am I getting GitHub url here after migrating <code>RepoA</code> to GitLab?</li>
<li>Is there any way to remove GitHub old sha256 value attached to <code>file.tar</code>?</li>
</ol>
","0","14453685","",""
"65054318","5958323","2020-11-28 20:49:24","0","306","<git><github><git-lfs>","Problem downloading large lfs files with git clone from github","<p>In this github repo:</p>
<p><a href=""https://github.com/jerabaul29/Cylinder2DFlowControlDRL"" rel=""nofollow noreferrer"">https://github.com/jerabaul29/Cylinder2DFlowControlDRL</a></p>
<p>the author made available a container, sliced in small chunks so that they are accepted by github, tracked using git-lfs. However, it seems that some users have problems reconstructing the container after a git clone, see:</p>
<p><a href=""https://github.com/jerabaul29/Cylinder2DFlowControlDRL/issues/19"" rel=""nofollow noreferrer"">https://github.com/jerabaul29/Cylinder2DFlowControlDRL/issues/19</a></p>
<p>I have tried myself, and the github cloning of the repo hang up and after an hour or so of doing nothing so I just killed it. As a result, the assembled container got corrupted. Following the method recommended on the readme there after the bug report, i.e. downloading the fragments using the web GUI, I got everything downloaded in the course of a few minutes and I managed to assemble a non corrupted container and run everything.</p>
<p>I think this problem with data obtained from cloning is a bit strange.</p>
<ul>
<li><p>any idea why cloning the repo does not seem to work? Is it due to the repo being set up in a wrong way and should the repo owner fix something, or is it due to my machine, or a github problem?</p>
</li>
<li><p>any way to fix this, so that issuing a simple git clone would clone the full repo including all segments? It looks like the segments data are well available, as it is possible to download these through the github web GUI...</p>
</li>
</ul>
","2","5958323","",""
"65056069","2713740","2020-11-29 01:17:39","1","66","<git><git-lfs>","git missing date in commits","<p>I converted some files to LFS using the following command:</p>
<pre><code>git lfs migrate import --no-rewrite luca/models/weights/yolov5m.pt
</code></pre>
<p>However, when I do this, the commit that is generated is not valid. When I run <code>git fsck</code> I get, the following:</p>
<pre><code>error in commit 1e394560481bc9b76efb42112a33470450006781: missingSpaceBeforeDate: invalid author/committer line - missing space before date
</code></pre>
<pre><code>git show 1e394560481bc9b76efb42112a33470450006781
</code></pre>
<pre><code>Author: John Doe &lt;john@DOE.COM&gt;
Date:   Thu Jan 1 00:00:00 1970 +0000

    luca/models/weights/yolov5m.pt: convert to Git LFS
</code></pre>
<p>The date seems to be bogus.</p>
","1","2713740","",""
"46595617","2210667","2017-10-05 22:20:05","3","3561","<git><github><git-lfs>","What does this git-LFS corrupted file error mean and how to fix it?","<p>Im not sure why but something is a little screwed up on my repo and when I try to push my branch to github I get an error:</p>

<pre><code>&gt; git push
Git LFS: (0 of 1 files) 0 B / 61.99 MB
LFS upload failed:
  (missing) path/to/bigfile (50...4b)
error: failed to push some refs to 'git@github.com:me/myproject'

&gt; git-lfs ls-files
50.. - path/to/bigfile

&gt;  git-lfs fsck
Object path/to/bigfile (50...4b) could not be checked: no such file or directory
Object path/to/bigfile (50...4b) could not be checked: no such file or directory
Moving corrupt objects to /Users/myname/.../.git/lfs/bad
rename /Users/myname/.../.git/lfs/objects/50/b6/50...4b 
/Users/myname/.../.git/lfs/bad/50...4b: no such file or directory  
</code></pre>

<p>Note that I don't care removing or deleting this file, it is not used anymore. (but the file is there!)
I have tried to <code>git-lfs untrack path/to/bigfile</code> but no luck, and I can't push my branch.</p>

<p>How to fix this?</p>
","1","2210667","",""
"46604322","1178052","2017-10-06 11:04:44","1","557","<git><git-lfs>","git lfs ""Object does not exist on the server""","<p>We've got a git repo which uses lfs for large file tracking. We've been using it for quite a while and it's going ok. However, we have 3 objects which are referenced in a commit but haven't been uploaded to the server. I've tried to get everyone to do a full push of all of their lfs objects, but it's tough to get everyone who has had anything to do with the repo to do this. </p>

<p>Is there anything we can do to avoid this error?</p>

<p>Alternatively, how can I find out which file it is pointing to and which commit so that I can more intelligently figure out who is responsible and get them to push all their files from their machine (if they still have it)? </p>
","0","1178052","",""
"46611245","1663987","2017-10-06 17:43:35","1","173","<git><git-lfs><bfg-repo-cleaner>","git lfs and BFS","<p>BFG for git LFS supports the option <code>--strip-blobs-bigger-than</code></p>

<p>Does git-lfs itself support tracking files based on size, or only based on extension? The git-lfs-track man page seems to only support specifying by extension, so I'm guessing BFS just uses that option to automatically determine a file extension list?</p>
","0","1663987","",""
"65195421","1635906","2020-12-08 08:21:50","4","1069","<git><githooks><git-lfs>","git-lfs: how to enforce git lfs installation?","<p>I work on a git-lfs repository. Some colleagues occasionally need to update large binary files in this repository (hence git-lfs). Not all colleagues have git-lfs installed. They will not do it unless they need to. But once they want to commit/push, they have forgotten they need git-lfs... Which leads to &quot;pollution&quot; of the repository with actual files.</p>
<p>Is there a way to enforce the use of git-lfs by software? So I can only commit/push to the repo if I have git-lfs installed?</p>
<p>Edit:
This question is similar <a href=""https://stackoverflow.com/questions/54213052/azure-devops-server-side-git-hooks"">Azure devops - server-side git hooks</a> but I hoped there was a client-side solution. I thought the pre-commit hook could also be used for this.</p>
<p>Update:
I see how git-hooks won't help because again I my collegues would need actively do something - which they probably won't. This explicit action is necessary because git-hooks would introduce massive security holes if not enabled with the users explicit consent. (<a href=""https://stackoverflow.com/a/23771013/1635906"">https://stackoverflow.com/a/23771013/1635906</a>)</p>
<p>Update:
So I am ready to create a branch-policy which makes sure a CI build is executed. The build should fail if there are files that should be pointers.
There is &quot; <a href=""https://stackoverflow.com/questions/42963854/list-files-not-tracked-by-git-lfs"">List files not tracked by Git LFS</a> &quot; but it aims at bash. My Azure DevOps (on-premise) runs on windows and therefore cmd/powershell. I need a command that is similar to the behavior of the message I get on clone: &quot;Encountered 11 file(s) that should have been pointers, but weren't&quot; And then it should either print to STDERR or result in a non-zero exit code.</p>
","5","1635906","",""
"65216274","12527252","2020-12-09 11:55:00","0","142","<python><makefile><gitlab><git-lfs><file-not-found>","File not found error on gitlab server, even when file is present","<p><a href=""https://i.stack.imgur.com/ZooZX.png"" rel=""nofollow noreferrer"">The error you can see file not found</a>File not found an error on GitLab when converted to large file system LFS. The file is present on GitLab server and I can download it is perfect. But when I tried to run make a test on the GitLab server it gives me such an error.
Sorry, I'm new to this, I am sorry if I could not frame the question in a proper format.
<a href=""https://i.stack.imgur.com/A9yeD.png"" rel=""nofollow noreferrer"">The file is present in the repository and it opened and works fine when downloaded, only the make test does not run on server. Make test runs fine on local machine. I think it is something related to LFS. Idk but</a>
<a href=""https://gitlab.informatik.uni-bremen.de/cgvr/smida2/schau_mir_in_die_augen/-/jobs/314106"" rel=""nofollow noreferrer"">Link to error on gitlab</a></p>
<p><a href=""https://gitlab.informatik.uni-bremen.de/cgvr/smida2/data_gaze_on_faces/-/blob/master/observer_info_cleaned_378.csv"" rel=""nofollow noreferrer"">Link to file which is present but still error occurs</a></p>
","2","12527252","",""
"65555192","6224662","2021-01-03 21:40:15","0","979","<git><azure><git-lfs>","Use azure blob storage for git lfs","<p>I am using git-lfs to store certain large datasets in my work. However, the free tier of git-lfs has a bandwidth limit of 1GB/month, beyond which a user gets blocked for a month.
I happen to have some azure credits and want to use the blob storage as the storage for git-lfs while I version my project using git.</p>
<p>I ran into this repository using aws-s3 storage : <a href=""https://github.com/meltingice/git-lfs-s3"" rel=""nofollow noreferrer"">git-lfs-s3</a>.</p>
<p>But it doesn't have enough instructions on how to set up the whole system and has also been archived by the user. Are there any other (well explained) solutions to this problem?</p>
","0","6224662","",""
"65603062","6807211","2021-01-06 20:37:32","8","8570","<git><gitlab><git-lfs>","How to download git-lfs files using the oid sha256 information","<p>I came across a set of images (e.g., <a href=""https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop/blob/master/stuttgart/stuttgart_cp_00000.npy"" rel=""noreferrer"">https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop/blob/master/stuttgart/stuttgart_cp_00000.npy</a>) that are stored in the <code>git lfs</code> with the information like this:</p>
<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:6692f38904c1ae21cd3d3e6e378538c07fda86fe97ee01d8664bb95fc20cd1de
size 8889498
</code></pre>
<p>How to view and download the original image file? I am new to Git LFS. Any one can give some detailed steps to follow?</p>
<p>Updates on what I did:</p>
<p>I downloaded the github repo: <a href=""https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop"" rel=""noreferrer"">https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop</a></p>
<p>unzipped it to a folder, and <code>cd</code> to the subfolder <code>stuttgart</code>(here is what are included:<a href=""https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop/tree/master/stuttgart"" rel=""noreferrer"">https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop/tree/master/stuttgart</a>),</p>
<p>type the command <code>git lfs pull</code> (via <code>git bash</code> win10), but got this error:
&quot;batch response:Rate limit exceeded: <a href=""https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop.git/info/lfs/objects/batch"" rel=""noreferrer"">https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop.git/info/lfs/objects/batch</a> error: failed to fetch some objects from 'https://github.com/kehuantiantang/A-DNN-based-Semantic-Segmentation-for-Detecting-Weed-and-Crop.git/info/lfs'</p>
","5","6807211","0","0"
"47072267","80480","2017-11-02 09:54:03","10","3657","<git><continuous-integration><pull-request><git-lfs>","How to check that all git-lfs tracked and committed files are pointers?","<p>As git-lfs requires some manual setup (install git-lfs, run <code>git lfs install</code> once) this can lead to developers not committing git-lfs tracked file types correctly. I would like to check that for pull requests on our continuous integration system.</p>

<p>How to check that all git-lfs tracked and committed files are pointers? <a href=""https://github.com/git-lfs/git-lfs/blob/master/commands/command_filter_process.go#L196-L201"" rel=""noreferrer"">There is a check</a> which is run e.g. when rebasing but this is not available as cli-command.</p>

<p>I would like to have something like this:</p>

<pre><code>$ git clone https://...
$ [git lfs check-for-pointers]
Encountered 35 file(s) that should have been pointers, but weren't:
    file1.png
    ...
</code></pre>
","2","80480","0","0"
"65982109","1324356","2021-01-31 17:24:10","2","5745","<git><github><git-lfs>","Where can I find the git-lfs-authenticate command?","<p>I can successfully push a git repository that uses Git LFS to Github, but when I try to push it to my own server I get the following error: <code>git-lfs-authenticate: not found</code>.</p>
<pre><code>$ git push origin main |&amp; cat
batch request: sh: 1: git-lfs-authenticate: not found: exit status 127
Uploading LFS objects:   0% (0/1), 0 B | 0 B/s, done.
error: failed to push some refs to 'git.example.com:'
</code></pre>
<p>On the local host, I use <code>git-lfs/2.13.2</code> and on the remote host <code>git-lfs/2.7.1</code>. These are the current versions of Debian 10 and 11, respectively. I have tried using <a href=""https://github.com/git-lfs/git-lfs/releases/latest"" rel=""nofollow noreferrer"">the latest version of Git LFS</a> on both hosts by placing the <code>git-lfs</code> binary in <code>/usr/local/bin</code>. The output is now slightly different, but I still get the same error:</p>
<pre><code>$ git push origin main |&amp; cat
batch request: sh: 1: git-lfs-authenticate: not found: exit status 127
error: failed to push some refs to 'git.example.com:'
</code></pre>
<p>I have also tried searching for a binary named <code>git-lfs-authenticate</code> but it is not present in any of the releases of Git LFS. I have also tried reading the <a href=""https://github.com/git-lfs/git-lfs/blob/master/docs/api/server-discovery.md"" rel=""nofollow noreferrer"">Git LFS Server Documentation</a> which mentions the <code>git-lfs-authenticate</code> command, but it doesn't explain where to find it or how to implement it.</p>
","0","1324356","",""
"66018423","13723586","2021-02-02 22:17:22","0","804","<git><git-lfs>","Recover git lfs storage","<p>I started to use git lfs, but then I realized that there was a storage limit quota. Now I wanted to recover git lfs storage. I tried removing git lfs and deleting .gitattributes but it still shows in my account that I have half storage used out of 1 GB.</p>
<p>Is there any way to recover that space?</p>
<p>If I reinitalize the repo, I would like to maintain my commits history. How can I do that?</p>
<p>Thank you all for the support!</p>
","1","13723586","",""
"47764272","2358361","2017-12-12 02:00:15","3","2903","<github><git-lfs><github-desktop>","Github Desktop and LFS failed to fetch some objects from github.com/.../git/info/lfs","<p>Here is the story, we have GitHub working and are using GitDesktop 1.0.10.<br>
We are also using Git LFS 2.3.0 from <a href=""https://github.com/blog/2432-git-lfs-2-3-0-released"" rel=""nofollow noreferrer"">https://github.com/blog/2432-git-lfs-2-3-0-released</a> ... two devs are able to clone and push repo without issue, one has issues as follows:</p>

<pre><code>WARNING: 'git lfs clone' is deprecated and will not be updated
          with new flags from 'git clone'
'git clone' has been updated in upstream Git to have comparable
speeds to 'git lfs clone'.
'git clone' has been updated in upstream Git to have comparable
speeds to 'git lfs clone'.
Cloning into 'C:\Git\SomeRepo'...
remote: Counting objects: 28847, done.        
remote: Compressing objects:   0% (1/331)           
remote: Compressing objects:   1% (4/331)           
remote: Compressing objects:   2% (7/331)           
...
remote: Compressing objects:  98% (325/331)           
remote: Compressing objects:  99% (328/331)           
remote: Compressing objects: 100% (331/331)           
remote: Compressing objects: 100% (331/331), done.        
Receiving objects:   0% (1/28847)   
Receiving objects:   1% (289/28847)   
Receiving objects:   2% (577/28847)   
Receiving objects:   3% (866/28847)   
...
Receiving objects:  96% (27694/28847), 974.57 MiB | 21.10 MiB/s   
Receiving objects:  97% (27982/28847), 974.57 MiB | 21.10 MiB/s   
Receiving objects:  98% (28271/28847), 974.57 MiB | 21.10 MiB/s   
Receiving objects:  99% (28559/28847), 974.57 MiB | 21.10 MiB/s   
remote: Total 28847 (delta 547), reused 598 (delta 424), pack-reused 28092        
Receiving objects: 100% (28847/28847), 974.57 MiB | 21.10 MiB/s   
Receiving objects: 100% (28847/28847), 979.90 MiB | 20.95 MiB/s, done.
Resolving deltas:   0% (0/16327)   
Resolving deltas:   1% (306/16327)   
Resolving deltas:   2% (343/16327)   
Resolving deltas:   5% (822/16327)   
Resolving deltas:   7% (1162/16327)   
...
Resolving deltas:  98% (16033/16327)   
Resolving deltas:  99% (16175/16327)   
Resolving deltas: 100% (16327/16327)   
Resolving deltas: 100% (16327/16327), done.
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
batch response: Git credentials for 
https://github.com/SomeOrg/SomeProject.git not found:
exit status 1
error: failed to fetch some objects from 'https://github.com/SomeOrg/SomeProject.git/info/lfs'
</code></pre>

<p>I have tried:</p>

<ul>
<li>Logging in with working credentials on non-working machine</li>
<li>Uninstalling and reinstalling Github Desktop</li>
<li>Deleting files forcing the reinstall of Github Desktop to ask for settings again</li>
<li>Disabled Firewall</li>
</ul>

<p>Any help here would be very much appreciated, thanks in advance! </p>
","1","2358361","0","0"
"66307854","11637415","2021-02-21 22:33:13","17","12619","<git><github><git-lfs><git-lfs-migrate>","How to setup a git lfs server at home?","<p>I am making use of <code>git lfs</code> for storage of large files in a github repository. The only problem is that there is a quota for <code>git lfs</code>; specifically you can only store 1 GB and only stream (download) 1 GB per month. After you run out of that, you must pay $5 for 5 more GB. This could become expensive.</p>
<p>I have an old PC I could boot Linux and port forward on.</p>
<p>Does anyone know how to setup a <code>git lfs</code> server at home rather than using Github's lfs built in CPU's?</p>
","2","11637415","0","0"
"48392440","4775020","2018-01-23 00:34:23","39","66398","<git><git-lfs>","git lfs clone vs git clone","<p>If I have git lfs installed on the client and I run:</p>

<pre><code>git clone
</code></pre>

<p>is this equivalent to </p>

<pre><code>git lfs clone
</code></pre>

<p>or will different results occur?</p>

<p>Thank you!</p>

<p>The answer to this question:  </p>

<p><a href=""https://stackoverflow.com/questions/39691929/can-one-clone-a-git-lfs-repo-without-installing-git-lfs"">Can one clone a Git LFS repo without installing Git LFS?</a></p>

<p>seems to imply that git clone will work if you have git lfs installed.  It isn't clear if this means that the two commands will work the same.  Unfortunately my reputation is too low to comment and ask.</p>
","0","4775020","0","0"
"68867420","11468263","2021-08-20 19:47:19","3","4088","<git-lfs><wsl-2>","How to install git-lfs on WSL2?","<pre><code>fatal: 'lfs' appears to be a git command, but we were not
able to execute it. Maybe git-lfs is broken?
</code></pre>
<p>Installing git-lfs on kali or ubuntu is simple, but steps are not easy to find. In my case it was because I needed it for git subrepo</p>
<pre><code>This repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-checkout.
</code></pre>
","0","11468263","",""
"58928256","7353268","2019-11-19 06:57:30","0","155","<android><git><github><git-lfs><clarifai>","How to clone clarifai-android-sdk using ""git lfs""?","<p>I want to create an object detection application using clarifai android library found in the following link:</p>
<p><a href=""https://github.com/Clarifai/docs/blob/master/android.md?fbclid=IwAR114v4A8Njz_ZVmNu6lCckN972sisKAsc1TeyZyl9Fy5BUeBCAcR8fs-Fk"" rel=""nofollow noreferrer""><strong>clarifai android</strong></a></p>
<p>The documentation is very clear but the problem is in cloning the <strong>clarifai-android-sdk</strong> using <strong>git-lfs</strong></p>
<p>and this what is mentioned in the documentation:</p>
<blockquote>
<p><strong>1) Git LFS</strong></p>
<p>Before doing anything else, please make sure you have Git-LFS
installed on your system. The binary contained in the framework is
managed by GitHub using git-lfs.</p>
<p>If you don't have it installed yet, you can find details at:
<a href=""https://git-lfs.github.com"" rel=""nofollow noreferrer"">https://git-lfs.github.com</a>. IF YOU DON'T HAVE GIT-LFS INSTALLED, THE
SDK WILL NOT WORK.</p>
<p><strong>2) Verifying the SDK</strong></p>
<p>After setting up Git LFS, please ensure that the SDK
cloned correctly, by checking the size of the *.aar. <strong>If the size is
less than ~120MB, then you will need to re-pull master now that Git
LFS is set up.</strong></p>
<p>If you downloaded a ZIP of the project via the &quot;Clone or download&quot;
button, the SDK will be cloned incorrectly. Either clone the repo with
git, or download the *.aar file specifically by clicking on the file
through GitHub, and clicking the &quot;Download&quot; button.</p>
</blockquote>
<p>if it is not clear this is a <a href=""https://github.com/Clarifai/clarifai-android-sdk"" rel=""nofollow noreferrer"">link of the full clarifai-android-sdk documentation</a></p>
<p>I have already installed <strong>git-lfs</strong> but when I try to clone the repository of  <strong>clarifai-android-sdk</strong> the size of <strong>'.aar'</strong> file is 100 megabyte not as mentioned previously that:</p>
<blockquote>
<p><strong>if the  '*.aar' file is less than 120 megabyte then you will need to</strong>
<strong>re-pull master now that Git LFS is set up.</strong></p>
</blockquote>
<p>so generally: I need to know what should I do to solve this problem ?<br />
and specifically what  is the meaning of <strong>re-pull master now that Git LFS is set up.</strong></p>
","1","7353268","",""
"40365154","2588038","2016-11-01 17:16:09","8","833","<git><github><bitbucket><git-lfs>","git migrate from LFS to normal repo","<p>There is LFS git repository hosted at Bitbucket server.
Now we do not need LFS.</p>

<p>How to migrate from git LFS repository back to normal repository?</p>

<p>If repo with LFS - there are ""pointers"" instead of files in the commits.
And if I need to remove LFS - I should use files instead of ""pointers"".
So how replace all ""pointers"" with files in commit history?</p>

<p>Suggest, that it is something like <code>git lfs smudge</code> but should be applied for all log.</p>
","3","2588038","0","0"
"59186671","6033537","2019-12-05 00:53:36","3","627","<git><git-lfs>","How git lfs clone is difference from git shallow clone","<p>git lfs will only download the latest version of binary files to the local repo. However, git shallow clone downloads the latest version of all the files(source + binary). </p>

<p>If storage is not a concern, we can use git shallow clone over git lfs?</p>
","0","6033537","0","0"
"48156577","8795404","2018-01-08 19:04:18","1","851","<git><https><http-status-code-404><git-lfs>","git lfs push fails with HTTP error 404","<p>Im a newbie on git so be gentle please. Not sure how much more info I should give so please ask me.</p>

<p>We are using git v2.11.0.windows.3.
We have set up in our office a Bonobo server to use GIT.
We have enabled git lfs and I have managed to commit and push to origin all our *.png files. Three months later and I am trying to add all *.ico files but it fails to push with the following error:</p>

<blockquote>
  <p>$ GIT_TRACE=1 git lfs push --all origin HEAD</p>
  
  <p>17:54:35.173243 git.c:607               trace: exec: 'git-lfs' 'push' '--all' 'origin' 'HEAD'</p>
  
  <p>17:54:35.173243 run-command.c:350       trace: run_command: 'git-lfs' 'push' '--all' 'origin' 'HEAD'</p>
  
  <p>17:54:35.204260 trace git-lfs: run_command: 'git' version</p>
  
  <p>17:54:35.285145 trace git-lfs: run_command: 'git' config -l</p>
  
  <p>17:54:35.353218 trace git-lfs: tq: running as batched queue, batch size of 100</p>
  
  <p>17:54:35.353218 trace git-lfs: Upload refs [HEAD] to remote origin</p>
  
  <p>17:54:36.289653 trace git-lfs: run_command: git rev-list --objects --do-walk HEAD --</p>
  
  <p>17:54:36.296699 trace git-lfs: run_command: git cat-file --batch</p>
  
  <p>17:54:36.390751 trace git-lfs: tq: sending batch of size 100</p>
  
  <p>17:54:36.390751 trace git-lfs: api: batch 100 files</p>
  
  <p>17:54:36.404759 trace git-lfs: HTTP: POST _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch</p>
  
  <p>17:54:36.442780 trace git-lfs: HTTP: 404</p>
  
  <p>17:54:36.442780 trace git-lfs: api error: Repository or object not found: _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch
  Check that it exists and that you have proper access to it</p>
  
  <p>17:54:36.455788 trace git-lfs: tq: sending batch of size 100</p>
  
  <p>17:54:36.455788 trace git-lfs: api: batch 100 files</p>
  
  <p>17:54:36.456788 trace git-lfs: HTTP: POST _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch</p>
  
  <p>17:54:36.466794 trace git-lfs: HTTP: 404</p>
  
  <p>17:54:36.466794 trace git-lfs: api error: Repository or object not found: _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch</p>
  
  <p>Check that it exists and that you have proper access to it</p>
  
  <p>17:54:36.993166 trace git-lfs: tq: sending batch of size 95</p>
  
  <p>17:54:36.993166 trace git-lfs: api: batch 95 files</p>
  
  <p>17:54:36.993166 trace git-lfs: HTTP: POST _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch</p>
  
  <p>17:54:37.009174 trace git-lfs: HTTP: 404</p>
  
  <p>17:54:37.009174 trace git-lfs: api error: Repository or object not found: _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch</p>
  
  <p>Check that it exists and that you have proper access to it</p>
  
  <p>Git LFS: (0 of 295 files) 0 B / 4.06 MB</p>
  
  <p>batch response: Repository or object not found: _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch</p>
  
  <p>Check that it exists and that you have proper access to it
  batch response: Repository or object not found: _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch</p>
  
  <p>Check that it exists and that you have proper access to it
  batch response: Repository or object not found: _https://blah.com/Git/Hippotizer.git/info/lfs/objects/batch/objects/batch</p>
  
  <p>Check that it exists and that you have proper access to it</p>
</blockquote>

<p>We havent changed anything in our server so can't figure out why I was able to push 3 months ago but not now.</p>
","0","8795404","",""
"48166358","228732","2018-01-09 10:42:07","2","111","<git><git-lfs>","What on-going maintenance do I need to do for a reference repo that uses git lfs?","<p>I have setup a git <strong>reference repo</strong> on our jenkins server using <code>--mirror</code> (we only have one remote).  Documentation I have read indicates that I will periodically  need to run <code>git fetch --all</code> in the reference repo and I have setup a maintenance job to do that.  </p>

<p>However, in order to populate the <code>lfs</code> directory in the reference repo (because the initial clone did not do this) I initally needed to do <code>git lfs fetch --all</code>.  My instinct was to add this command to the maintenance job, but it appears that it performs more work than necessary (I'm seeing a lot of output regarding the number of found objects) and I am wondering if I should be using <code>--recent</code> or perhaps just plain-ole <code>git lfs fetch</code>?</p>

<p>Using git 2.15.1.windows.2; lfs version 2.3.4; </p>
","0","228732","0","0"
"59273677","10585750","2019-12-10 18:54:04","2","27","<git><git-lfs>","git lfs: What are ""verifiable"" files?","<p>Sometimes there are files called ""verifiable"" under unstaged changes. They are inside a ""lfs"" folder with the last child folder being the name of a branch.</p>

<p>What are these files? Should they be commited and pushed to origin?</p>
","0","10585750","",""
"31463570","4004942","2015-07-16 20:06:51","-2","320","<assets><git-lfs><dam><git-annex>","Digital Asset Management tool for large files that are not photos or videos","<p>Most DAMs that I have found are geared towards media like photos and videos.  I have need to manage large binary files like ISOs and IMG files.</p>

<p>Does anybody know of a DAM that can manage non-media files?  Specifically something that is on premise?  Going to a DAM in the cloud would be too expensive because of the amount of storage we would need and the bandwidth it would consume.</p>
","1","4004942","",""
"59358892","336827","2019-12-16 14:42:34","1","166","<git><continuous-integration><git-lfs>","git clone exclude lfs file","<p>I'm struggling with git (2.24.0), git-lfs (not installed) and a continuous integration pipeline (until now I've tried with circleci and github actions). </p>

<p>Given that in CI machine there is no git-lfs installed, I expect that after executing git clone, only regular files will appear, but I see an lfs file created (almost empty, 138 bytes).</p>

<p>I've stressed the continuous integration thing because on my computer git clone behaves differently, i.e. not creating the lfs file at all.</p>

<p>How to exclude those placeholder lfs files to be created? </p>
","2","336827","",""
"59448847","267","2019-12-22 23:40:58","3","1653","<git-lfs><git-for-windows>","Disable git LFS Locking api locally because it is super-slow?","<p>I tend to try to answer a lot of git questions here on Stack Overflow, but in doing so, I like to first set up a dummy repository or two locally and test out what I'm proposing before posting.</p>

<p>Recently I got a new computer, and I guess something is either different with my configuration now, or it's been a while since I used git locally for this kind of thing because there has been introduced a big delay when pushing locally.</p>

<p>Let me give an example:</p>

<pre><code>git init --bare remote
git clone remote local
cd local
echo abc &gt;test.txt
git add .
git commit -m ""abc""
git push
</code></pre>

<p>This last command has a delay of about 12 seconds before it outputs this:</p>

<pre><code>λ git push
Remote ""origin"" does not support the LFS locking API. Consider disabling it with:
  $ git config lfs.https://z////Temp/remote.git/info/lfs.locksverify false
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Writing objects: 100% (3/3), 254 bytes | 254.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To Z:/Temp/remote
   2c2a0cf..12a484c  master -&gt; master
</code></pre>

<p>The question is, can I disable this LFS locking api probing or what it is doing here when using these commands locally, without having to add <code>--no-verify</code> on all such pushes? Basically, I would like to use git as normally without having to remember that git lfs probing seems to be broken locally.</p>

<p>I do not want to disable this LFS functionality for <em>all</em> git interactions with remotes, as I have at least one repository on github where I use it. ""It"" being LFS, is this LFS locking perhaps not needed and I <em>can</em> turn it off globally?</p>

<p>Or is this perhaps some kind of bug, and I should really be reporting this as such?</p>

<p>This is Git 2.24.1.windows.2, Windows 10 build 1909, running on a AMD Ryzen 5 3600 against a M.2 2GB/sec SSD, so I assume ""slow computer or disk"" is not really the problem either.</p>

<p>The only provided ways I've found is that I either specify <code>--no-verify</code> on all such pushes, or that I explicitly provide a per-repository configuration that disables it, like what <code>git push</code> is suggesting above. I really don't like either solution, are there any other?</p>

<p>If I issue this push command:</p>

<pre><code>git push --no-verify
</code></pre>

<p>it completes in a fraction of a second. Basically my question is if there is a way to configure git so that all local pushes have this speed, without having to either explicitly configure the repository/ies or having to specify this --no-verify every time.</p>
","0","267","0","0"
"46926094","2625036","2017-10-25 07:08:42","2","1508","<git><git-lfs>","Why git lfs checkout is 60 times slower than git lfs fetch?","<p>I have been getting very slow clone times with git LFS projects on my PC running Windows 7. When I do a normal clone or checkout it takes around 20 minutes to download just 60 MB of LFS objects. After removing the LFS objects, <code>rm -rf .git/lfs/*</code> if I run <code>git lfs fetch</code> for the  same repo in the same network on the exact same machine the same 60 MB of LFS objects are downloaded in 20 <strong>seconds</strong>, this is 60 times faster. </p>

<p>Is there something that I am missing here?</p>

<p>I cannot understand what is going on. Is there a way to make git be more verbose than just the <code>--verbose</code> flag? </p>

<p>Edit: On my laptop I clone this entire repo in 1 minute. So this issue is only isolated to my PC.</p>
","6","2625036","",""
"65486509","14904511","2020-12-29 02:20:39","0","869","<github><yolo><git-lfs>","Upload file by git lfs correctly","<p>I tried to upload large file ( 240mb ) to github by lfs by using</p>
<pre><code>- git lfs install
- git init 
- git remote add origin &quot;my repo url&quot;
- git lfs track &quot;*.weights&quot; 
- git add yolov3.weights
- git commit -m &quot;test&quot;
- git push -u origin master
</code></pre>
<p>after uploaded i found the file content</p>
<pre><code>versionversion https://git-lfs.github.com/spec/v1
oid sha256:c49c28814dc8bcd2c48aac1c3e41c92a183cf9b282f6ca4c05f3d99393137952
size 246305388
</code></pre>
<p>And not working but the size still 240 mb</p>
<p>How to upload the file right or what is the wrong?</p>
","4","14904511","",""
"65500663","1509401","2020-12-30 00:52:44","1","1098","<git><github><git-lfs>","What does %f represent in the git clean/smudge filters","<p>Inside my <code>~/.gitconfig</code> file I see that there is the following lfs filter:</p>
<pre><code>[filter &quot;lfs&quot;]
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process
        required = true
</code></pre>
<p><strong>Question</strong>: What does <code>%f</code> represent in the lfs filter? My understanding is it represents the file path but I'm not sure what file path it represents.</p>
","0","1509401","0","0"
"46978967","3999760","2017-10-27 15:50:38","3","3584","<git><unity-game-engine><git-lfs>","Pointer file error: Unable to parse pointer at: ""File path"" with git","<p>I am trying to merge a branch A into branch B.</p>

<p>But merge failed with error 
<code>Pointer file error: Unable to parse pointer at: ""File path""</code> for several files in the repository. (<code>*.meta</code>, <code>*.unity</code> , <code>*.mat</code>, <code>*.json</code>, <code>*.prefab</code>)</p>

<p>I have tried multiple solution that I found on net. </p>

<ol>
<li>Updated source tree(using this) and git lfs to the latest version (2.3.4)</li>
<li>Tried command line merge </li>
<li>Tried commands <code>git lfs uninstall</code> and <code>git lfs install</code>.</li>
</ol>

<p>But none of the above solutions worked for me.</p>

<p>It is unity3d project repository.</p>
","1","3999760","",""
"47290756","2157717","2017-11-14 16:30:38","2","786","<git><github><version-control><git-lfs>","Git LFS skipping File but git starts pushing it to repo","<p>I have a big file in my Github repo which i normally uploaded with git lfs. 
For a newer commit, i had to change the file, but now on pushing, git lfs is skipping the file and normal git tries to upload it. This, of course, fails, cause it exceeds the maximum file size of Github. 
When i run </p>

<p><code>GIT_TRACE=1 git push</code></p>

<p>this is the output:</p>

<blockquote>
  <p>trace git-lfs: run_command: 'git' version trace git-lfs: run_command:
  'git' config -l trace git-lfs: tq: running as batched queue, batch
  size of 100 trace git-lfs: run_command: ssh -- git@github.com
  git-lfs-authenticate myRepo.git upload
  trace git-lfs: HTTP: POST
  <a href=""https://lfs.github.com/myRepo/locks/verify"" rel=""nofollow noreferrer"">https://lfs.github.com/myRepo/locks/verify</a>
  trace git-lfs: HTTP: 200 trace git-lfs: HTTP:
  {""ours"":[],""theirs"":[],""next_cursor"":""""}</p>
  
  <p>trace git-lfs: pre-push: refs/heads/master
  d7b0e4138403023433894f756d63bdadfabac125 refs/heads/master
  683a30586bc68758230da6686fa902d4621b358a trace git-lfs: run_command:
  git rev-list --objects d7b0e4138403023433894f756d63bdadfabac125 --not
  --remotes=origin -- trace git-lfs: run_command: git cat-file --batch trace git-lfs: tq: sending batch of size 1 trace git-lfs: ssh cache:
  git@github.com git-lfs-authenticate
  myRepo.git upload trace git-lfs: api:
  batch 1 files trace git-lfs: HTTP: POST
  <a href=""https://lfs.github.com/myRepo/objects/batch"" rel=""nofollow noreferrer"">https://lfs.github.com/myRepo/objects/batch</a>
  trace git-lfs: HTTP: 200 trace git-lfs: HTTP:
  {""objects"":[{""oid"":""1e24fed72634c9217ce7856d11ee204d38eb154fc90572a8ef047007f2211a6c"",""size"":246116656}]}
  trace git-lfs: tq: starting transfer adapter ""basic"" Git LFS: (0 of 0
  files, 1 skipped) 0 B / 0 B, 234.72 MB skipped<br>
  17:22:37.083227 run-command.c:343       trace: run_command:
  'pack-objects' '--all-progress-implied' '--revs' '--stdout' '--thin'
  '--delta-base-offset' '--progress' 17:22:37.084316 exec_cmd.c:128<br>
  trace: exec: 'git' 'pack-objects' '--all-progress-implied' '--revs'
  '--stdout' '--thin' '--delta-base-offset' '--progress' 17:22:37.088704
  git.c:348               trace: built-in: git 'pack-objects'
  '--all-progress-implied' '--revs' '--stdout' '--thin'
  '--delta-base-offset' '--progress' Counting objects: 109, done. Delta
  compression using up to 4 threads.</p>
  
  <p>Compressing objects: 100%
  (106/106), done. Writing objects: 100% (109/109), 73.55 MiB | 1.81
  MiB/s, done. Total 109 (delta 74), reused 0 (delta 0) remote:
  Resolving deltas: 100% (74/74), completed with 53 local objects.
  remote: error: GH001: Large files detected. You may want to try Git
  Large File Storage - <a href=""https://git-lfs.github.com"" rel=""nofollow noreferrer"">https://git-lfs.github.com</a>. remote: error: Trace:
  e87aee9bcda79c0a788ae345112c9d37 remote: error: See
  <a href=""http://git.io/iEPt8g"" rel=""nofollow noreferrer"">http://git.io/iEPt8g</a> for more information. remote: error: File
  src/ios/sdk/myLib.framework/Framework is 234.72 MB; this
  exceeds GitHub's file size limit of 100.00 MB To
  git@github.com:myRepo.git  ! [remote
  rejected] master -> master (pre-receive hook declined) error: failed
  to push some refs to
  'git@github.com:myRepo.git'</p>
</blockquote>
","0","2157717","",""
"47305430","6384702","2017-11-15 10:49:09","3","1255","<java><git-clone><jgit><git-lfs>","Jgit clone with git lfs enabled repository not working","<p><b>Current setup</b> </p>

<p>I have a repository which is git lfs is enabled. There is another level of authentication present for accessing the drive where lfs content is stored. When I run the below code from command prompt it asks for the username and password for accessing the lfs content, as shown below.</p>

<p><a href=""https://i.stack.imgur.com/Rf4Mm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Rf4Mm.png"" alt=""JGIT LFS issue""></a></p>

<p>If we use another repository where there is no authentication for the lfs content, then everything works fine.
Please let me know how could I suppress the authentication from JGIT or how can I skip the fetching of LFS content.
Please let me know if I am doing anything wrong.</p>

<p>Details:
<br>1) Using following JGit version 4.9.0.201710071750-r
<br>2) git lfs is installed</p>

<p>Code Snippet</p>

<pre><code>public static void syncRepository(String uname, String pwd, String url, String destDir) throws Exception{
    String branch =  ""refs/heads/master"";
    System.out.println(""Cloning from [""+url+""] branch [""+branch+""] to [""+destDir.toString()+""]"");
    String workingDirPath = null;
    try {
        if (StringUtils.isNotEmpty(destDir)) {
            workingDirPath = FilenameUtils.normalize(destDir);
        } else {
            throw new Exception(""Working directory for code sync not found : "" + destDir);
        }
        Path path = Paths.get(workingDirPath);
        System.out.println(""Deleting '"" +workingDirPath+ ""' and re-creating empty destination dir"" );
        recursivelyDelete(path.toFile());
        Files.createDirectories(Paths.get(workingDirPath));
        Path targetPath = path.resolve("""");

        // clone repository
        Git git = cloneRepository(url, uname, pwd, branch, targetPath);
        System.out.println(""Git revision # "" + getLastHash(git));
        System.out.println(""SYNC Repository completed"");
    } catch (GitAPIException e) {
        // if the import fails then we should try to remove the created directory
        System.out.println(""Failed to clone git repository.""+ e);
        throw new Exception(""Failed to clone git repository"", e);
    }
}
private static Git cloneRepository(String url, String username, String password, String branch, Path targetPath)
        throws Exception {
    Git result;
    try {
        CloneCommand cloneCommand = Git.cloneRepository()
                .setProgressMonitor(new TextProgressMonitor(new PrintWriter(System.out)))
                .setURI(url).setBranch(branch)
                .setDirectory(targetPath.toFile())
                .setTimeout(300)
                .setTransportConfigCallback(new TransportConfigCallback() {
                    public void configure(Transport transport) {
                        transport.setTimeout(300);
                    }
                });
        setCredentials(cloneCommand, username, password);
        result = cloneCommand.call();
        return result;
    } catch (GitAPIException e) {
        // if the import fails then we should try to remove the created directory
        throw new Exception(""Failed to clone git repository"", e);
    }
}
</code></pre>
","0","6384702","0","0"
"65861666","10018708","2021-01-23 16:35:13","1","103","<git><git-lfs>","Can you clone a repo that is a clone of a git repo using LFS?","<p>Say there is a repo, A, which uses git LFS. And you have a clone of that, repo B. Can you create another clone, repo C, from repo B or do you have to go directly to repo A?</p>
<p>I ask because the network configuration makes it difficult to go directly from C to A, plus there is some stuff in B that I want that should not really be pushed to A.</p>
<p>When I tried, it looked like it cloned the repo okay but failed during the checkout with this error:</p>
<blockquote>
<p>Error downloading object: &lt;filepath&gt; (&lt;sha&gt;): Smudge error: Error downloading &lt;filepath&gt; (&lt;fullsha&gt;): EOF</p>
</blockquote>
<p>When I tried specifying the remote path as <code>//SERVERNAME/path/repo</code> instead of <code>file://SERVERNAME/path/repo</code>, it failed around the same point in the checkout with an &quot;unknown protocol&quot; error.</p>
<p>Note that none of the repos are on servers, but instead are on local or network drives.</p>
","1","10018708","",""
"65901147","15079400","2021-01-26 12:11:20","2","1093","<github><large-files><git-lfs>","I can't upload the node_modules folder to github","<p>The folder is over 100 MB and you must use Git LFS. However, how do I upload folders? It's the first time I'm using it, someone help me please</p>
","5","15079400","",""
"66204043","11637415","2021-02-15 07:19:43","0","408","<python><git><git-lfs>","How to publish a Python package located in a git repository that contains git lfs files?","<p>I am trying to make a Python package I have created can be <code>pip install</code>ed.</p>
<p>The answer <a href=""https://stackoverflow.com/questions/56393372/how-to-install-python-package-from-git-repo-that-has-git-lfs-content-with-pip"">How to install python package from git repo that has git-lfs content with pip?</a> to my question is simply not working.</p>
<p>Does anyone have any advice?</p>
","0","11637415","",""
"66653372","15406740","2021-03-16 10:29:22","1","218","<git><macos><github><desktop><git-lfs>","git large file storage / github desktop for mac","<p>I try to install git large file storage on my mac and followed the instructions, but somehow don't manage. I already tried <code>sudo ./install.sh</code> but still receive the message: permission denied. Someone who has experience with installing git lfs on github desktop for mac?</p>
<p>Thanks for your help.</p>
","1","15406740","",""
"48511313","1086346","2018-01-29 22:50:05","2","2669","<git-lfs>","Fix git-lfs user error","<p>We have a git-lfs enabled repository in gitlab, it works fine. It nicely separates pdf, movies, and other things we don't want to version manage.</p>

<p>There was a user error where somebody cloned the repository on a system that did not have git-lfs support enabled.  That person added a pdf file to git and pushed back to server. </p>

<p>Then another user fetches that branch on a system that does have git-lfs, and tries to check it out:</p>

<pre><code>   $ git checkout pj-guide_47_mac_R_setup
   Switched to branch 'pj-guide_47_mac_R_setup'
   Your branch is behind 'origin/pj-guide_47_mac_R_setup' by 14 commits, and can be fast-forwarded.
    (use ""git pull"" to update your local branch)
    Encountered 1 file(s) that should have been pointers, but weren't:
        47.mac_R_setup/47.mac_R_setup-slides.pdf 
</code></pre>

<p>What is the most direct route on the system that does have git-lfs properly configured to fix that pdf file? According to <a href=""https://github.com/git-lfs/git-lfs/issues/1726"" rel=""nofollow noreferrer"">https://github.com/git-lfs/git-lfs/issues/1726</a> there is a usage of git lfs merge import released with git-lfs 2.3.0, but I'm not able to understand how to use it.</p>
","0","1086346","0","0"
"51039908","2298137","2018-06-26 09:51:49","0","2229","<git><ubuntu><git-lfs>","git LFS Smudge Error downloading file. Server misbehaving","<p>So we have a git repo inside that it contains a submodule that has a bunch of binary files that are all LFS filtered (library files).</p>

<p>On windows using git 2.14.1.windows.1 I can do:</p>

<pre><code>git clone &lt;url&gt;
git submodule update --init
</code></pre>

<p>And this inits and downloads all the submodule content no problem.</p>

<p>Then on Ubuntu 18 using get version 2.17.0 I can do the same commands:</p>

<pre><code>git clone &lt;url&gt;
git submodule update --init
</code></pre>

<p>Only I get this error:</p>

<blockquote>
<pre><code>Error downloading object &lt;filename&gt;: smudge error: Error downloading
&lt;filename&gt; (&lt;HASH&gt;): batch reponse: Post
&lt;url.git&gt;/info/lfs/objects/batch: proxyconnect tcp: dial tcp: lookup
&lt;PCName&gt; on &lt;IP Address&gt;: server misbehaving
</code></pre>
</blockquote>

<p>I don't really understand what this means. But all my LFS files seem to have this same issue from the Ubuntu box (actually its a VM on my windows box). It can see all the same ip addresses that my windows box can see.</p>

<p>Using smartgit on the same Ubuntu VM I can sometimes get it to update the git submodules, but also sometimes it fails.</p>

<p>So really don't know how to proceed either debugging the issue or resolving it. My gut feeling is that it might be some timeout issue, but that is really a wild guess...</p>
","7","2298137","",""
"48529604","3006576","2018-01-30 20:02:40","0","1793","<tortoisegit><git-lfs>","Git (or tortoisegit) marks LFS file as modified, prevents push or pull","<p>I'm having a problem with our git repo. We have one LFS file that is only ever modified by one of our users, on a mac. The mac user pulls and pushes without incident.</p>

<p>But on the Windows dev's PC, git (or tortoisegit) automatically marks the LFS file as modified, even when it's not. I think it's because the switch from pointer to file isn't cleanly understood by tortoisegit.</p>

<p>The ugly effect is that the Windows user tries to push and gets a ""you must pull"" message, but then tries to pull and gets a merge conflict due to the not-really-modified LFS file. However, there is no resolve... option in the tortoisegit dropdown for the supposed conflict. A revert sets the icon back to unmodified, but any tortoisegit action still fails as though the lfs file has been modified and resets the icon status to modified.</p>

<p>Since the user can't push, can't pull, and can't resolve a merge conflict that's causing the inability to push or pull, the user is stuck. I googled and found some old posts suggesting tortoisegit doesn't handle lfs quite right and causes this, but does anyone have any better idea of how to resolve this than scary trial-and-error with git commands?</p>
","0","3006576","",""
"40795130","2994596","2016-11-24 22:09:40","1","955","<git><gitattributes><git-lfs>","How can I track text files with proper line endings normalization using git-lfs?","<p>I have a repository to which I would like to add large text data files. Due to their number and size (which can be up to approximately 100MB in some cases), I would like to track those files with <code>git-lfs</code>.</p>

<p>I've added such a file with <code>git lfs track data.txt</code>, and changed the default <code>-text</code> (which specifies a binary file) to <code>text=auto</code> in the <code>.gitattributes</code> file (as documented in <a href=""https://git-scm.com/docs/gitattributes"" rel=""nofollow noreferrer"">git-scm's gitattributes documentation</a>). This gives me a <code>.gitattributes</code> which looks like:</p>

<pre><code>data.txt filter=lfs diff=lfs merge=lfs text=auto
</code></pre>

<p>And just to be sure, I have <a href=""https://help.github.com/articles/dealing-with-line-endings/#refreshing-a-repository-after-changing-line-endings"" rel=""nofollow noreferrer"">refreshed the repository</a>. Even so, it seems that the file is still tracked as a binary object and correspondingly the end-of-line conversion filter is not applied on check-out (i.e. the file is getting checked-out with the original line endings it was checked-in with).</p>

<p>I've also tried with <code>text=crlf</code> (and the variant <code>text eol=crlf</code>) with the same result. I have seen a number of documents and tutorials about using <code>git-lfs</code> but they all seem to be geared towards tracking binary files (such as <a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial"" rel=""nofollow noreferrer""><code>*.bin</code></a>, <a href=""https://github.com/blog/2079-managing-large-files-with-git-lfs"" rel=""nofollow noreferrer"">images</a>, <a href=""https://www.atlassian.com/git/tutorials/git-lfs/"" rel=""nofollow noreferrer"">audio files</a>, ...)</p>

<p>Is there a way to make the file tracked as a large text file (and have the end-of-lines normalized as would be for regular text files) with <code>git-lfs</code>? </p>

<p>I am currently using <code>git-lfs</code> 1.5.2, and <code>git</code> for Windows 2.10.2 (64-bit version) on a Windows 7 platform, with the <code>core.autocrlf=true</code> configuration. </p>
","0","2994596","0","0"
"66681940","10423024","2021-03-17 22:07:02","1","483","<bitbucket><bitbucket-pipelines><git-lfs><bitbucket-cloud>","How to run git clone command in a pipeline step LFS enabled","<p>I've a pipeline that is cloning another repository. Pipeline below is running on yyy repository, and it's supposed to clone xxx repository and do some work on it, then upload the results to AWS S3, I have lots of object to be worked on, so git clone step should be LFS enabled. git lfs client is configured on my base image. LFS is also enabled on my xxx repository. My deployment consumes so much time to clone repo with LFS enabled.</p>
<pre><code> - step:
   name: &quot;Pipeline&quot;
   services:
       - docker
    caches:
       - docker
    script:
    - ...
    - ...
    - ...
    - ...
    - git clone git@bitbucket.org:xxx.git
</code></pre>
<p>I've tried</p>
<pre><code>clone:
    lfs: true
</code></pre>
<p>option to reduce the consumed time but it seems it doesn't work with the setup above.</p>
<p>How can I reduce time consumption for this setup? Is there any workaround here?</p>
<p>Thank you.</p>
","0","10423024","",""
"48640809","2832282","2018-02-06 10:30:36","14","7489","<git><git-lfs>","Force push a git lfs file ID","<p>Using git lfs, how can I force push a file ID that I know I have locally but that for some reason did not get pushed to the server ?</p>

<p>ie, on my build system I have errors like </p>

<blockquote>
  <p>Git LFS: (0 of 15 files, 1 skipped) 0 B / 1.10 MB, 4.30 MB skippedGit LFS: (15 of 15 files, 1 skipped) 1.10 MB / 1.10 MB, 4.30 MB skipped
  [f54812afe7bfdff14c154af6adb7cc4cb425763c1bdaa5fcf0bcea4fd2da7ab9] Object does not exist on the server: [404] Object does not exist on the server</p>
</blockquote>

<p>So I know I just need to push this file whose ID is <code>f5481...</code> but what's the command to do that ? <code>git lfs push</code> doesn't work I have to force the sync on that specific file ID</p>

<p>I remember finding that magic command once lost in some github issue but I have lost it and the man documentation doesn't seem to be helpful...</p>
","0","2832282","0","0"
"69410915","2779461","2021-10-01 19:07:08","1","644","<git-lfs><git-lfs-migrate>","git lfs fails to track a file after I rename it","<p>I keep running into this issue where I rename a file that is being tracked under git lfs, and when I push up the change to my repo, the file is no longer being tracked by git lfs.</p>
<p>Does anyone know how to resolve this?</p>
","0","2779461","",""
"59680238","7136195","2020-01-10 10:52:29","2","3592","<git><git-lfs>","How to shrink a git LFS repo","<p>In my company, we store system development related files with git LFS. This repository contains CAD data, images, documents (*.pdf, *.docx, *.xlsx) and so on. There is absolute necessity to have all files under version control. However, the way the repository was used ended up blowing the repository up to a total size of 8GB, despite all files being tracked by LFS.</p>

<p>Basically everything was pushed onto the master branch, which seems making the LFS storage obsolete, as nothing can be pruned to save local storage.</p>

<p><strong>Question</strong></p>

<p>Is there a way to allow more local objects to be pruned retroactively? </p>
","2","7136195","",""
"48699293","1594286","2018-02-09 05:31:42","51","52221","<git><git-lfs>","How do I disable git-lfs?","<p>I have a repository on bitbucket that is using LFS. Since using it for some time, I've decided to move the repository back to a space under my control. The only reason I used LFS in the first place was to effectively double my repository size limit (as files in LFS go in a separate bucket) but now I'm moving it, I no longer need to do this.</p>

<p>I need a way to trawl through the entire git history, removing all traces of the work git LFS does (so all files are committed 'normally'). Once this is done, I intend to force push to the new repository.</p>

<p>I've done quite a bit of searching, and come across <a href=""https://github.com/git-lfs/git-lfs/issues/910#issuecomment-238389388"" rel=""noreferrer"">suggested solutions</a> but I don't understand how to implement/run them because they are high-level.</p>

<p>How do I wave goodbye to git LFS?</p>
","2","1594286","0","0"
"35805825","2679757","2016-03-04 20:52:51","5","3948","<azure-devops><azure-pipelines><git-lfs>","How to use git lfs with Visual Studio Team Services hosted build agents","<p>I use git lfs to store the large files of my git repo. I then try to build this repo with hosted agents. My build is pretty simple. It has a single task: Execute PowerShell. In the invoked script, the first thing that I want to do is to fetch my lfs dependencies. I therefore have the following in my script:</p>

<pre><code>&amp; git lfs fetch
</code></pre>

<p>Unfortunately, my build fails with the following error:</p>

<pre><code>2016-03-04T19:49:05.7021988Z ##[error]git: 'lfs' is not a git command. See 'git --help'.
2016-03-04T19:49:05.7031986Z ##[error]Did you mean this?
2016-03-04T19:49:05.7041987Z ##[error]  flow
</code></pre>

<p>Since I can't install anything on hosted agents, how am I supposed to have git lfs available?</p>

<p><strong>EDIT</strong>
In this issue, I am not talking about git lfs authentication problems as described <a href=""https://stackoverflow.com/questions/34083386/check-out-git-lfs-files-on-vstf-build/35876342"">here</a>. I am strictly talking about the issue of calling <code>git lfs</code>.</p>

<p>Once you are able to call <code>git lfs</code>, look at this <a href=""https://stackoverflow.com/a/35876342/2679757"">answer</a> to solve the authentication problem.</p>
","3","2679757","0","0"
"35822720","311567","2016-03-06 03:20:28","0","675","<git><git-lfs>","git-lfs server-side vs client-side management of binary blobs","<p>What happens if I track all of the <code>pdf</code> files:</p>

<pre><code>git lfs track ""*.pdf""
</code></pre>

<p>But another developer that has not installed <code>git-lfs</code> pushes a new <code>pdf</code> file? Does it use text-pointer or the full binary? Is the server responsible for versioning the binary blobs or is it the client?</p>

<p>If it is server-side I could basically track the binary types once, and not worry about other developers pushing binary blobs to git (this is <code>gitlab</code>).</p>
","0","311567","",""
"48878600","3638394","2018-02-20 05:42:41","3","320","<git><git-lfs>","What's the best strategy to control the use of large files in a git repo?","<p>My group works on a project that includes some large data files which are integral to our development process and need to be versioned. However, there are some times (like when I'm at home or in Starbucks) when I do a pull and don't really want to bother with small changes in those big files. I've had ideas like moving all the big files to a branch (i.e., full-scale-testing) and only switching to this one when you're ready to deal with big files. I'm wondering if anyone else has come up with a better way of dealing with this type of situation. </p>
","1","3638394","0","0"
"40635111","7168057","2016-11-16 14:49:14","0","221","<git><command-prompt><git-lfs>","git not recognized on first run in command prompt (Windows). Second run works","<p>I've run into a strange problem debugging a python script. I think I have isolated the problem to the follow issue:</p>

<p>When trying to use git trough the command line, I get an error on the first run. Starting with the second run the same command goes through fine. </p>

<p>Any ideas what could be causing this?</p>

<p>Thanks!</p>

<p><a href=""https://i.stack.imgur.com/VdioU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VdioU.png"" alt=""Screenshot""></a></p>

<p>Alternatively, here is the code:</p>

<pre><code>C:\WINDOWS\system32&gt;cd /d ""D:\...""

D:\...&gt;git status

'status is not recognized as an internal or external command, operable program or batch file'

D:\...&gt;git status

On branch SCONS
Your branch is up-to-date....
</code></pre>

<p>Update: Still no progress. The issue originally came from a git-lfs command. If this maybe helps: git-lfs commands will give an error (even repeatedly) until the command ""git"" is entered once. After the first failed attempt both git, and git-lfs commands work fine. See picture:</p>

<p><a href=""https://i.stack.imgur.com/V8FVj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/V8FVj.png"" alt=""Screenshot 2""></a></p>
","6","7168057","0","0"
"41826155","2144067","2017-01-24 10:46:08","1","712","<git><githooks><git-lfs>","git lfs pre-receive hooks to prevent unwanted files in repository","<p>Is it possible to write a server side pre-receive hook to prevent large or binary files to be added to the repository via commits?</p>

<p>Locally I can control git-lfs behaviour by adding file types to a .gitattribute file via:</p>

<pre><code>    git lfs track ""*.zip""
</code></pre>

<p>This would cause that if a new zip file is added, it will be managed by git-lfs and not committed to the git object store.</p>

<p>git-p4 even allows me file size thresholds like:</p>

<pre><code>    largeFileCompressedThreshold = 1m
    largeFileThreshold = 50m
</code></pre>

<p>With multiple developers and developing environments it might happen, that one adds such a binary file without configuring git-lfs, hence such a file could be submitted to git directly.
I would like a server side hook which refuses such a commit and gives a meaningful message, so the developer can easily identify the problem.</p>

<p>Ideally this receive hook would use existing git functionality to parse e.g. .gitattributes instead of manually parsing all files which are being committed in a script.</p>
","0","2144067","",""
"59634806","10843657","2020-01-07 19:22:45","2","72","<git><git-lfs>","checking out a folder out a LFS tracked subfolder in git","<p>I'm merging together a couple or repositories into a monorepo
from repo1, repo2, repo3
to
monorepo\repo1, monorepo\repo2, monorepo\repo3</p>

<p>The issue I'm having is with repo3 that contains LFS tracked objects that I would like to checkout individually.
In the past I would git clone repo3 with the exclude * option and then pull the directories that I wanted one by one.
I'm not able to do something similar in the monorepo scenario.</p>

<p>The strategy I'm using for the rest of the folders in the monorepo (to check them out independently) is: I init a new repo, I add the remote then enable sparse checkout on the target folder/folders and call the checkout.
This does not seem to work on the LFS tracked objects. 
Anyone doing something similar?</p>
","0","10843657","0","0"
"66502921","9954366","2021-03-06 06:10:45","1","242","<git><github><gitlab><git-lfs><git-filter-repo>","How do I totally remove a specific version of a file from a git repository?","<p>I'm working on a couple of game development projects that involve lots of changes to code and large binary files at the same time. For the sake of simplicity, let's say I have a git repository with 2 files (a text file and a large binary blob) in it that are both updated across multiple commits:</p>
<pre><code>commit dddd: &quot;Release day is finally here!&quot; &lt;tag: v1.0&gt;
   changed hello.md
   changed image.png (lfs) &lt;==== keeper!

commit cccc: &quot;Ok, that's a bit better.&quot;
   changed hello.md
   changed image.png (lfs)

commit bbbb: &quot;Updated my project.&quot;
   changed hello.md
   changed image.png (lfs)

commit aaaa: &quot;Initial commit!&quot; 
   added hello.md
   added image.png (lfs) &lt;==== keeper!
</code></pre>
<p>Each commit I've made some kind of change to both of my files.</p>
<p>But, in retrospect, I've decided that I want to get rid of some lfs files to reduce the overall size of my repository, and only half of the versions of <code>image.png</code> are different enough to be worth keeping. (Keep in mind, it's not always as simple as not committing the intermediate versions, since we don't always know what the 'key' versions are without hindsight.)</p>
<p>So, <strong>can I completely remove the versions of <code>image.png</code> included in <code>bbbb</code> and <code>cccc</code> from my repository to reduce it's overall storage footprint? How?</strong> I've been looking into <code>git gc</code> and <code>git filter-repo</code> but I've been having trouble achieving what I want to do. Am I on the right track? Are there any other strategies that I can use to optimize the size of my repository or otherwise mitigate this situation?</p>
","5","9954366","",""
"66510463","9450714","2021-03-06 20:42:48","1","329","<github><azure-devops><git-lfs>","Can I use external location as a separate server for git-lfs?","<p>I have a repository on GitHub.com. I need to add a large file to it (&gt;1GB). git-lfs seems to be the solution but GitHub probably offers only upto 2GB for free. Can I use any other location as a separate large file server while the actual codes stay in GitHub?</p>
<p>I tried configuring lfs Endpoint to the Azure devops repo and the git origin to GitHub.com. It does not seem to be working that way.</p>
","3","9450714","",""
"49160126","","2018-03-07 19:51:01","1","710","<git><git-lfs>","How git lfs work ? Do I need to do ""git add""?","<p>I can't understand how git lfs works.  Do I need to maintain LFS store ? 
Do I need to do ""git lfs track *.dat"" every time ?
Do I need also do ""git add *.dat"" every time ?</p>
","2","","",""
"49185076","1269115","2018-03-09 01:09:14","0","778","<git><git-lfs><git-rewrite-history><bfg-repo-cleaner>","Re-wrote git history with bfg but not reflected in earlier commits","<p>A huge folder in my repository has filled up my LFS. As instructed <a href=""https://rtyley.github.io/bfg-repo-cleaner/"" rel=""nofollow noreferrer"">here</a>, I wish to remove the folder from the remote repository and then re-write history to drop it from all previous commits. That should free up lots of space in my LFS, but is not. What am I missing?</p>

<p>Say the repository is <code>repo</code> and the folder in question is <code>repo/unwantedFolder</code>.</p>

<p>I did the following steps:</p>

<ol>
<li><p>Removed the unwantedFolder and re-committed: </p>

<pre><code>$ git rm -r --cached unwantedFolder/
$ git commit -a -m 'Drops folder'
$ git push origin
</code></pre></li>
<li><p>Mirror-cloned the repo: </p>

<pre><code>$ git clone --mirror https://github.com/emagar/repo.git
</code></pre></li>
<li><p>Re-wrote history: </p>

<pre><code>$ java -jar bfg.jar --delete-folders unwantedFolder repo.git/
</code></pre></li>
<li>Moved into the manipulated cloned repo: <code>$ cd repo.git/</code></li>
<li><p>Used the git gc command: </p>

<pre><code>$ git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive
</code></pre></li>
<li>Pushed the clean repository: <code>$ git push origin</code></li>
<li>Moved back to the original repository: <code>$ cd repo/</code></li>
<li>Pulled from github: <code>$ git pull origin master</code> </li>
</ol>

<p>While all seemed to work well, when I inspect old commits in github, the unwantedFolder/ still appears there!</p>

<p>What am I missing?</p>
","4","1269115","",""
"49210033","2726203","2018-03-10 14:12:45","2","4080","<git><git-lfs>","Can't check out branch with git-lfs, smudge error","<p>I can't checkout a branch, git lfs returns an error. Other people in this project are able to check out this branch without problems, so it seems that the problem is on my end.
Here is the error I'm getting:</p>

<pre><code>$ git checkout Camera_ObstacleDetection
Downloading iso-space/Assets/models/Puzzle_Room_1.fbx (155 KB)
Error downloading object: iso-space/Assets/models/Puzzle_Room_1.fbx 
(752f9dd): Smudge error: Error downloading iso- 
space/Assets/models/Puzzle_Room_1.fbx 
(752f9dd38daec0eda91f8317abcbf5d8c257abc8c9232f10af26bb93d9d0062c): 
[752f9dd38daec0eda91f8317abcbf5d8c257abc8c9232f10af26bb93d9d0062c] 
Object does not exist on the server: [404] Object does not exist on 
the server

Use `git lfs logs last` to view the log.
error: external filter 'git-lfs filter-process' failed
fatal: iso-space/Assets/models/Puzzle_Room_1.fbx: smudge filter lfs failed
</code></pre>

<p>I have tried editing <code>.gitconfig</code> as described <a href=""https://stackoverflow.com/questions/40387376/git-lfs-checkout-remote-branch"">in this question</a>, but it didn't resolve the issue.</p>
","2","2726203","",""
"48258364","9218198","2018-01-15 07:10:36","0","63","<git><github><unreal-engine4><git-lfs>","Items still not letting me push in github after deleting them","<p>First time asking a question here. </p>

<p>I have been using Github and UE4 for a while now and when I have an asset that exceeds the 100mb limit in Github I add it to LFS. 
However I forgot to add these items (SEE IMAGE BELOW) to LFS and tried to push my branch up. I got this error. No problem I thought, I didn't need these stupidly large assets anyway so I'll just delete them. However after deleting them I got the same error again. I think it might be an issue of Git storing changes additively, so it's likely doing the push in order of add->remove. </p>

<p>How would I fix this? The items are deleted, I simply don't need GIT recognising them anymore?</p>

<p>Thanks </p>

<p><a href=""https://i.stack.imgur.com/wZalh.png"" rel=""nofollow noreferrer"">Example of GITHUB problem when trying to push deleted items that are to large</a></p>
","2","9218198","",""
"66614031","14750265","2021-03-13 13:25:21","1","1022","<python><git><continuous-integration><continuous-deployment><git-lfs>","Calling 'git lfs pull' in a CI/CD pipeline","<p>I am using a CI/CD pipeline in combination with <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer""><code>git-lfs</code></a>. At the beginning of my script, I want to load a pickle file (see code further below) that is stored via LFS. My code runs fine on the local machine, but in the pipeline I get the following error:</p>
<blockquote>
<p>_pickle.UnpicklingError: invalid load key, 'v'</p>
</blockquote>
<p><a href=""https://github.com/svip-lab/PPGNet/issues/2"" rel=""nofollow noreferrer"">It</a> <a href=""https://github.com/DwangoMediaVillage/3dpose_gan/issues/1"" rel=""nofollow noreferrer"">seems</a> <a href=""https://github.com/ijmarshall/robotreviewer/issues/18"" rel=""nofollow noreferrer"">that</a> this error is caused by the LFS file not being fetched and can be resolved with a simple <code>git lfs pull</code> command.</p>
<p>The question now is, how can I call <code>git lfs pull</code> in the pipeline? I naively tried adding it in the <code>.yml</code> file where I call my python scripts too, but that didn't work. I'm sorry if is this question is a bit stupid, I'm a bit outside of my normal field here.</p>
<p>EDIT with some details on when the error occurs and the CI/CD used:</p>
<p>These are the lines that cause the error to occur:</p>
<pre class=""lang-py prettyprint-override""><code>open(&quot;path_to_file/file&quot;, 'rb')
data = pickle.load(f)
</code></pre>
<p>I am using a Gitlab CI/CD and the <code>.yml</code> file defining the workflow is the following:</p>
<pre class=""lang-yaml prettyprint-override""><code>before_script:
    - rm -rf &quot;*-env&quot;; python3.8 -m venv ${CI_JOB_ID}-env
    - ${CI_JOB_ID}-env/bin/pip3 install -U pip

after_script:
    - rm -rf ${CI_JOB_ID}-env

stages:
    - calculations

CalcStrategicValues:
    stage: calculations
    only:
        - calculate
    script:
        - ${CI_JOB_ID}-env/bin/pip3 install -r requirements.txt
        # - ${CI_JOB_ID}-env/git lfs pull           &lt;- my attempt at solving the problem
        - ${CI_JOB_ID}-env/bin/python3 calculate.py
    allow_failure: false
    artifacts:
        name: results
        when: always
        paths:
            - output/
</code></pre>
","4","14750265","",""
"66908268","9944344","2021-04-01 16:27:21","0","102","<github><git-lfs>","Github prepends ""https://github.com/user/repo/blob/main/"" to all links in readme.md","<p>I have a private repository on GitHub that contains a readme.md file with links to Kaggle datasets. When viewing the repo on github prepends &quot;https://github.com/{user}/{repo}/blob/main/&quot; to the url, breaking it.</p>
<p>Why is this happening, and how do I change this behavior?</p>
<p>For what it's worth, I'm also using git-lfs, though I can't find any documentation of this behavior associated with that, either.</p>
","3","9944344","",""
"49375105","6169534","2018-03-20 01:42:24","3","2638","<git><github><git-lfs>","undo git lfs after limit exceeded","<p>I recently installed <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"" title=""Git-LFS"">Git-LFS</a> to manage large files. I've quickly reached the 1 Gb storage limit, however, and now when I try to push commits I'm prompted with:</p>

<blockquote>
  <p>batch response: This repository is over its data quota. Purchase more
  data packs to restore access.</p>
</blockquote>

<p>and failure to push. So now I can't actually push to the repo.</p>

<p>Purchasing more data packs is not an option, however storing large files locally (i.e. not having them version controlled) is.</p>

<p>So what I would like to do is:</p>

<ol>
<li>Stop monitoring the files that LFS monitors (currently set to all *.csv in .gitattributes).</li>
<li>Remove those files from git, i.e. so that they don't contribute to any repo size.</li>
<li>Still have those files present locally.</li>
<li>Uninstall Git-LFS.</li>
<li>Disrupt the history as little as possible, ideally so only the removed files are affected.</li>
<li>Now that the repo size should be smaller, get back to being able to push/pull as normal.</li>
</ol>

<p>I've found bits and pieces of info around where people have exceeded the limit, but nothing that can do the above points.</p>

<p>FWIW I typically use Tortoise Git but of course have Git Shell too.</p>
","5","6169534","0","0"
"68371990","12385251","2021-07-14 04:20:27","2","1019","<github><git-lfs>","How to retrieve large csv file I stored on github","<p>When I went into my github I had a csv file that I stored there that was large so I probably used <code>git lfs</code> to store it, but when I went back in the file all I see is this</p>
<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:d96f2a228ce88d533a77646d33e15be5ec00612db71332002f946611304d3234
size 651828087
</code></pre>
<p>Is there a way of retrieving this file I stored in its entirety?</p>
","1","12385251","0","0"
"60029570","2230045","2020-02-02 19:05:57","5","2435","<git><git-lfs>","Does `git lfs track` do more than writing to `.gitattributes`?","<p>From my understanding <code>.gitattributes</code> works similar as <code>.gitignore</code>.
If I define a filter in <code>.gitattributes</code>, this filter will take effect and the files will be transferred to LFS.</p>
<p>In every GIT LFS related document (official documentation, stackoverflow answers, ...) it is recommended to run <code>git lfs track</code>.</p>
<p>Does <code>git lfs track</code> do anything else than writing the filter to <code>.gitattributes</code>?</p>
","0","2230045","0","0"
"60134871","10050942","2020-02-09 08:43:57","2","618","<git><git-lfs>","git checkout takes hours","<p>I am experimenting with my selfhosted GitLab instance, so I pushed my git repo to it. The repository on GitLab consumes 14 GB and includes several lfs objects. Cloning my branch with the command below takes around 1-2 minutes.</p>

<pre><code>$ git clone http://[ip:port]/repo/bavoo.git
Cloning into 'bavoo'...
remote: Enumerating objects: 773299, done.
remote: Total 773299 (delta 0), reused 0 (delta 0), pack-reused 773299
Receiving objects: 100% (773299/773299), 541.07 MiB | 2.44 MiB/s, done.
Resolving deltas: 100% (633879/633879), done.
</code></pre>

<p>But the following checkout takes longer than two hours (maybe even longer, I cancelled it). I don't know what git is doing. Is there any chance to see what takes so long to checkout a branch?</p>

<pre><code>$ git checkout bavoo_test
</code></pre>

<p>For completeness, here are the version numbers of my OS, <code>git</code> and <code>git lfs</code></p>

<pre><code>$ macos-version
10.15.3 (19D76)
$ git --version
git version 2.24.1
$ git lfs --version
git-lfs/2.8.0 (GitHub; darwin amd64; go 1.12.7)
</code></pre>

<p><strong>Edit:</strong></p>

<p>As requested, here is the output of <code>git lfs env</code>:</p>

<pre><code>Endpoint=http://[ip:port]/repo/bavoo.git/info/lfs (auth=basic)
LocalWorkingDir=/Users/daniel/Desktop/bavoo
LocalGitDir=/Users/daniel/Desktop/bavoo/.git
LocalGitStorageDir=/Users/daniel/Desktop/bavoo/.git
LocalMediaDir=/Users/daniel/Desktop/bavoo/.git/lfs/objects
LocalReferenceDirs=
TempDir=/Users/daniel/Desktop/bavoo/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=/Users/daniel/Desktop/bavoo/.git/lfs
AccessDownload=basic
AccessUpload=basic
DownloadTransfers=basic
UploadTransfers=basic
GIT_EXEC_PATH=/usr/local/Cellar/git/2.24.1/libexec/git-core
</code></pre>
","5","10050942","",""
"67032721","14913477","2021-04-10 09:24:08","1","3403","<git><git-lfs>","git lfs not working - still throwing error - remote: error: GH001: Large files detected","<p>So I used node in my rails projects and there is this file that github won't push as it exceeds 100MB:</p>
<blockquote>
<p>node_modules/puppeteer/.local-chromium/linux-856583/chrome-linux/chrome</p>
</blockquote>
<p>I did</p>
<pre><code>git lfs install
git lfs track &quot;/node_modules/*&quot;
git add .gitattributes
git add .
git commit -am &quot;commit after lfs&quot;
git push
</code></pre>
<p>But it still throws the same error:</p>
<pre><code>remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: d06553d5a0051916cd0d22b28f55bb105cb07d442b1a6f6133e51e888e22b221
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File node_modules/puppeteer/.local-chromium/linux-856583/chrome-linux/chrome is 274.64 MB; this exceeds GitHub's file size limit of 100.00 MB
</code></pre>
<p>I also checked using git lfs ls-files and I see that file
What am I doing wrong here?</p>
","2","14913477","",""
"49538015","598940","2018-03-28 15:03:40","2","1579","<git><git-lfs>","git lfs pushed only the placeholder file","<p>I tried to take an existing git-lfs repository I have and push it to a secondary remote. On the secondary remote, an LFS file seemed to get pushed as if git-lfs's 'placeholder' file (text file with three lines: version, oid, size) was the real file. Trying to clone the secondary remote also fails with: <code>Smudge error: Error downloading ... Object does not exist on the server</code>.</p>

<p>The secondary remote has other LFS files which are stored properly. The file in question is also stored properly on the repo's 'primary' remote, and in my local repository (meaning: I see the actual file, not the placeholder).</p>

<p>I'm not sure how/why this happened (git lfs was initialized in my local repo, the push hooks were installed as far as I can tell), but I'd like to push the actual file. How can I do this?</p>

<p>I've tried <code>git lfs push --all secondary-remote branch-name</code>, <code>git lfs push secondary-remote --object-id ""abc123""</code>, but neither seemed to have any effect (they both print a ""Uploading LFS objects: 100% ..."" message, but the file still doesn't appear on the remote).</p>

<p><strong>edit:</strong> A co-worker did a <code>git lfs pull</code> and a <code>git lfs push</code> and it seemed to fix things. I'm not quite sure why though, given that my local repo already had the actual binary file checked out.</p>
","7","598940","",""
"67071709","7160164","2021-04-13 08:56:03","0","310","<gitlab-ci><git-lfs>","how to config lfs.fetchinclude in gitlabci","<p>I want to git lfs fetch only in some dir in the gitlab CI. but failed</p>
<p>the gitlab-runner was 11.8.0~beta.1077</p>
<p>i config like this:</p>
<pre><code>variables:
  # Please edit to your GitLab project
  GIT_STRATEGY: clone
  GIT_CHECKOUT: &quot;false&quot;

script:
  - git config lfs.fetchinclude &quot;xxx/xxx/, test/&quot;
</code></pre>
<p>but ci erro:</p>
<pre><code>root config contains unknown keys: script
</code></pre>
<p>how to fix it?</p>
","0","7160164","",""
"41704544","813948","2017-01-17 18:35:59","1","1723","<git><git-clone><git-lfs>","How can I download all git LFS files in batches on mac and linux?","<p>When I'm running git lfs clone somerepository in Windows, I've got the following output</p>

<pre><code>Cloning into 'somerepository'...
remote: Counting objects: 24028, done.
remote: Compressing objects: 100% (5003/5003), done.
remote: Total 24028 (delta 7376), reused 23762 (delta 7265)
Receiving objects: 100% (24028/24028), 7.12 MiB | 3.86 MiB/s, done.
Resolving deltas: 100% (7376/7376), done.
Git LFS: (57 of 57 files) 1.57 GB / 1.57 GB
</code></pre>

<p>Last line means git downloaded al files in a few batches (not 1 file at time like git pull) and it's quite quick.</p>

<p>In linux and mac instead, the same command does only the first 6 steps and nor the last one, leaving all LFS-tracked files only as a pointer. If I do a fetch/checkout/pull, git download the content one file at the time andvery slowly. I compared all configuration amongst different Linux/Windows/Mac system and behaviour are all the same with latest version of git and git-lfs.</p>

<p>I'd like to know what is the last command that git lfs clone run and how to trigger it manually or automatically even on Linux and Mac.</p>

<p>Thanks</p>
","1","813948","",""
"41716509","5795091","2017-01-18 10:08:35","17","36922","<windows><git><git-lfs>","Fail to clone repository with git lfs","<p>My repo uses git lfs. For a fresh clone, I ran:</p>

<pre><code>git lfs install
git clone https://example.com/repo.git
</code></pre>

<p>The clone gets to the point where it starts downloading lfs files, gets to some file and then fails. The file at which it fails is different each time I attempt to clone. Very occasionally it succeeds.</p>

<p>Here is the output:</p>

<pre><code>Cloning into 'repo'...
remote: Counting objects: 35699, done.
remote: Compressing objects: 100% (17678/17678), done.
remote: Total 35699 (delta 15603), reused 35553 (delta 15545)
Receiving objects: 100% (35699/35699), 231.45 MiB | 11.12 MiB/s, done.
Resolving deltas: 100% (15603/15603), done.
Downloading big_file.big (157.39 KB)
...
Downloading some_other_big_file.big (18.84 KB)
Error downloading object: some_other_big_file.big

Errors logged to blah.log
Use `git lfs logs last` to view the log.
error: external filter 'git-lfs filter-process' failed
fatal: some_other_big_file.big: smudge filter lfs failed
warning: Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry the checkout with 'git checkout -f HEAD'
</code></pre>

<p>The lfs logs say:</p>

<pre><code>Error downloading object: some_other_big_file.big

Smudge error: Error buffering media file: cannot write data to tempfile ""blah.tmp"": LFS: unexpected EOF:
github.com/git-lfs/git-lfs/errors.newWrappedError
        C:/Go/src/github.com/git-lfs/git-lfs/errors/types.go:166
github.com/git-lfs/git-lfs/errors.NewSmudgeError
        C:/Go/src/github.com/git-lfs/git-lfs/errors/types.go:252
github.com/git-lfs/git-lfs/lfs.PointerSmudge
        C:/Go/src/github.com/git-lfs/git-lfs/lfs/pointer_smudge.go:70
github.com/git-lfs/git-lfs/lfs.(*Pointer).Smudge
        C:/Go/src/github.com/git-lfs/git-lfs/lfs/pointer.go:65
github.com/git-lfs/git-lfs/commands.smudge
        C:/Go/src/github.com/git-lfs/git-lfs/commands/command_smudge.go:84
github.com/git-lfs/git-lfs/commands.filterCommand
        C:/Go/src/github.com/git-lfs/git-lfs/commands/command_filter_process.go:65
github.com/git-lfs/git-lfs/vendor/github.com/spf13/cobra.(*Command).execute
        C:/Go/src/github.com/git-lfs/git-lfs/vendor/github.com/spf13/cobra/command.go:477
github.com/git-lfs/git-lfs/vendor/github.com/spf13/cobra.(*Command).Execute
        C:/Go/src/github.com/git-lfs/git-lfs/vendor/github.com/spf13/cobra/command.go:551
github.com/git-lfs/git-lfs/commands.Run
        C:/Go/src/github.com/git-lfs/git-lfs/commands/run.go:66
main.main
        C:/Go/src/github.com/git-lfs/git-lfs/git-lfs.go:33
runtime.main
        C:/Go/src/runtime/proc.go:183
runtime.goexit
        C:/Go/src/runtime/asm_amd64.s:2086
</code></pre>

<p>If I try <code>git lfs pull</code> at this point, everything works fine.</p>

<p>Any idea what could be causing this failure to download the lfs files?</p>
","1","5795091","0","0"
"49598662","1011227","2018-04-01 13:40:01","1","538","<git><go><git-lfs>","Installing git-lfs from source using go - cannot find package","<p>I am trying to install git-lfs on an arm-based ubuntu machine. Package doesn't seem to exist so I need to install from source.</p>

<p>Seems like the installation depends on the go language so I installed it </p>

<pre><code>sudo apt-get install golang-go
</code></pre>

<p><code>go version</code> gives me: <code>go1.2.1 linux/arm</code></p>

<p>Now I need to build git-lfs </p>

<pre><code>go build ./src/github.com/git-lfs/git-lfs 
</code></pre>

<p>and I get:</p>

<blockquote>
  <p>cannot find package ""context"" in any of Same for <code>net/http/httptrace</code></p>
</blockquote>

<p>Other packages seem to have been found since I have set the path (after some fumbling around and setting a bunch of go environments params).</p>

<p>Now I see I can install more packages using <code>go get</code> , but it requires the full path, so I would need to know what is the fully qualified path to those two packages.</p>

<p>Is there a way to look up what is the full path for those packages? i.e. something equivalent to the py-pi in Python etc?</p>
","5","1011227","0","0"
"67197525","606880","2021-04-21 14:07:45","0","714","<git><git-lfs>","Git lfs configuration in .gitconfig for two different URLs","<p>I have a unique situation where I work with multiple projects simultaneously. There are two git repositories for which I need to add LFS configuration in my server. Both projects use different LFS servers. Hence I need to enter two LFS configuration in .gitconfig, something like this.</p>
<pre><code>[lfs &quot;server1.com/project1.git&quot;]
     url=https://&lt;username&gt;:&lt;password&gt;@lfs.server1.com
[lfs &quot;server2.com/project2.git&quot;]
     url=https://&lt;username&gt;:&lt;password&gt;@lfs.server2.com
</code></pre>
<p>Please let me know if this is a valid configuration. I tried but the server url is not getting used in filtering, please let me know what I am missing.</p>
","0","606880","",""
"67203432","529103","2021-04-21 21:01:14","0","1985","<git><git-lfs>","Any way to make git-lfs not download objects for files not in repo?","<p>I have a git-lfs object that was deleted from our git repo a year ago.  When we clone, it still downloads the LFS object in case someone ever needs to go back to that revision in history.  Problem is: the file is an executable and is triggering Windows defender on clone operations.  If we set the environment to skip smudge and then do a git lfs pull then the problem goes away, but it seems wasteful to download LFS objects that are very unlikely to ever be needed.</p>
<p>Is there any way to either:</p>
<p>a) Delete the object from the LFS server and have git clone still succeed but just ignore the file?</p>
<p>b) Tell git not to download lfs objects either for specific commit hashes, objects, dates, file names, or some other way of excluding certain objects?</p>
","0","529103","",""
"67235401","6394069","2021-04-23 18:49:01","2","1779","<git><github><git-lfs>","Alternative to git lfs","<p>Not sure if this is the right place to ask but I have the following question.</p>
<p>Basically I published a git repo where there are large files (30 and 150 mb) and I have been uploading those with git lfs.
However, when somebody downloads/clone the repo that is counted against my git lfs amount (1gb) and basically drained it. Are there any alternatives? I do not need to modify those files anymore once they were uploaded, is just insane having to purchase a data package when I am not actively using lfs anymore.</p>
","7","6394069","",""
"67280310","15305315","2021-04-27 09:21:35","1","1962","<git-lfs><repo>","How to run git lfs automatically after repo sync","<p>We started to use git lfs recently, but many team members fogot to run git lfs after repo sync.
Is there any way could run git lfs after repo sync automatically?</p>
","0","15305315","0","0"
"67291292","299084","2021-04-27 22:08:49","1","981","<git><git-lfs>","How do I track all directories in a git-lfs repository without specifying each directory in .gitattributes?","<p>I have a git LFS repository that is used for storing data files used by my project.  Most of these files are tens of megabytes in size, but a few are text files, mostly <code>*.csv</code> and <code>*.json</code>.  I want to have the CSV and JSON files tracked in git as text, with the data files (<code>*.tif</code>) tracked in LFS.  These files are all distributed across directories in the repository.</p>
<p>Let's say that my repository has this structure (in the real world, files in my repository have about 25 different file extensions):</p>
<pre><code>folder1/
folder1/subdir1/foo.tif
folder1/folder1.csv
folder1/folder1.json
folder2/
folder2/folder2.json
folder2/bar.tif
</code></pre>
<p>This <code>.gitattributes</code> configuration does what I want it to:</p>
<pre><code>folder1/** filter=lfs diff=lfs merge=lfs -text
folder2/** filter=lfs diff=lfs merge=lfs -text
**/*.json filter= diff= merge= text
**/*.csv filter= diff= merge= text
</code></pre>
<p>But I would prefer to have a single line be able to capture all of the files in all of the directories, so that if I add more directories with data files, I don't have to add another line in <code>.gitattributes</code>.  Is this possible?</p>
<p>This is what I'd like to have:</p>
<pre><code>**/** filter=lfs diff=lfs merge=lfs -text
**/*.json filter= diff= merge= text
**/*.csv filter= diff= merge= text
</code></pre>
<p>But this does not work as expected.</p>
","3","299084","",""
"50170415","9739767","2018-05-04 08:22:17","0","1225","<git><git-lfs><bonobo>","How to setup bonobo git server to support git-lfs?","<p><img src=""https://i.stack.imgur.com/WzQYN.png"" alt=""git command error"" /></p>
<p>I created a Bonobo git server on my LAN server. The base cmd &quot;pull&quot;or &quot;push&quot; has no problem. But when I tried to track large files and push it to server, it failed with the error messages below.</p>
<p>How should I setup the git server?</p>
<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false push -v --tags origin develop:develop
git: 'credential-wincerd' is not a git command. See 'git --help'.

The most similar command is
    credential-wincred

Pushing to http://IP/Git/GUI.git

Git LFS: (0 of 2 files) 0 B / 5.57 MB                                          
batch response: Repository or object not found: http://IP/Git/GUI.git/info/lfs/objects/batch
Check that it exists and that you have proper access to it

error: failed to push some refs to 'http://IP/Git/GUI.git'
Completed with errors, see above.
</code></pre>
","2","9739767","",""
"68552775","4561887","2021-07-27 23:31:33","0","1311","<git><git-lfs>","How to resume `git lfs post-checkout` hook after failed `git checkout`","<p>I'm working in a monsterously huge <code>git</code> mono-repo on the order of 100 GB in size. we have a git post-checkout hook in <code>.git/hooks/post-checkout</code> which contains the following hook to run <code>git lfs</code> after each checkout:</p>
<pre class=""lang-sh prettyprint-override""><code>#!/bin/sh
command -v git-lfs &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 &quot;\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-checkout.\n&quot;; exit 2; }
git lfs post-checkout &quot;$@&quot;
</code></pre>
<p>I just ran <code>git checkout main</code> and after literally 3 hrs of running and 27 GB of data downloaded through my internet connection, it failed because my disk was full, at about 97% complete through the <code>git lfs</code> post-checkout hook operation.</p>
<p>So, I cleared up some disk space.</p>
<p>Now, <code>git checkout main</code> fails with error:</p>
<blockquote>
<p>error: Your local changes to the following files would be overwritten by checkout:</p>
</blockquote>
<p>So, I tried running <code>git lfs post-checkout main</code> (I don't even know if this is a reasonable command--I'm guessing here) manually, and it fails too, with:</p>
<blockquote>
<p>This should be run through Git's post-commit hook.  Run <code>git lfs update</code> to install it.</p>
</blockquote>
<p><strong>Is there any way to resume my <code>git lfs</code> operation so I do NOT have to clear all 27 GB of data just downloaded and start downloading it all over again from scratch (via <code>git reset --hard &amp;&amp; git clean -fd &amp;&amp; git checkout main</code>)?</strong></p>
<p>Note that <code>git checkout main</code> had shown some errors like this as a result of the <code>git lfs</code> post-checkout hook operation:</p>
<pre><code>error: Your local changes to the following files would be overwritten by checkout:
    [list of tons of files]
error: The following untracked working tree files would be overwritten by checkout:
    [list of tons of files]
Aborting
0
</code></pre>
","4","4561887","",""
"33255069","4062660","2015-10-21 09:01:34","1","199","<git><github><git-lfs>","0KB of repo size on GitHub while testing with git-lfs","<p>I have a repository contains a .psd file which is tracked by <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">git-lfs</a>.</p>

<p>As the man-page stated that git-lfs will be</p>

<blockquote>
  <p>storing the file contents on a remote server like GitHub.com or GitHub
  Enterprise.</p>
</blockquote>

<p>I assumed that my repo size would be smaller than one that contains an actual .psd file.</p>

<p>To test this assumption, I created two repos like:</p>

<p>repo_1 - include a .psd tracked by git-lfs</p>

<p>repo_2 - include a .psd untracked</p>

<p>then pushed both to GitHub.</p>

<hr>

<p>Ways I tried to get repos sizes &amp; the results:</p>

<ol>
<li>checking on GitHub's Settings > Repositories page:</li>
</ol>

<p><a href=""https://i.stack.imgur.com/V5KJS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/V5KJS.png"" alt=""enter image description here""></a></p>

<ol start=""2"">
<li>accessing information via <a href=""https://developer.github.com/v3/repos/"" rel=""nofollow noreferrer"">GitHub API</a> like:
<a href=""https://api.github.com/repos/myUserName/myRepoName"" rel=""nofollow noreferrer"">https://api.github.com/repos/myUserName/myRepoName</a></li>
</ol>

<p><a href=""https://i.stack.imgur.com/x8Qbn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/x8Qbn.png"" alt=""enter image description here""></a></p>

<ol start=""3"">
<li>typing <code>curl https://api.github.com/repos/myUserName/myRepoName | grep size</code> in terminal: </li>
</ol>

<p><a href=""https://i.stack.imgur.com/THfOx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/THfOx.png"" alt=""enter image description here""></a></p>

<hr>

<p><strong>TL;DR</strong></p>

<p>Checking my GitHub repos sizes I get 0KB represented.</p>

<p>In order to check the differences of repos with and without git-lfs,</p>

<p>what else can I do?</p>
","0","4062660","",""
"42517807","7637627","2017-02-28 20:08:37","0","1067","<git><git-lfs>","Smudge Error downloading .pdf from origin using git [error: external filter 'git-lfs smudge %f' failed]","<p>I'm running git from command line on Sierra. I get the following error when I run git pull. It asks me for my ssh passphrase twice for some reason; which it never did before</p>

<pre><code>Enter passphrase for key '/Users/nihavd/.ssh/id_rsa': 
Updating 94a3d3c..1ab37b0
Downloading codes/SDE/Kramers.pdf (999.69 KB)
Enter passphrase for key '/Users/nihavd/.ssh/id_rsa': 
Error downloading object: codes/SDE/Kramers.pdf (cbfa6df7cf0a36276bcb9780ae34dea14276fabbaf310775afcffcdad96e58af)

Errors logged to /Users/nihavd/Github/stablebouncer/.git/lfs/objects/logs/20170228T143817.023100613.log
Use `git lfs logs last` to view the log.
error: external filter 'git-lfs smudge %f' failed 2
error: external filter 'git-lfs smudge %f' failed
fatal: codes/SDE/Kramers.pdf: smudge filter lfs failed
</code></pre>

<p>The log file says this</p>

<pre><code>git-lfs/1.5.6 (GitHub; darwin amd64; go 1.7.4)
git version 2.11.1

$ git-lfs smudge codes/SDE/Kramers.pdf
Error downloading object: codes/SDE/Kramers.pdf (cbfa6df7cf0a36276bcb9780ae34dea14276fabbaf310775afcffcdad96e58af)

Smudge error: Error buffering media file: http: Get https://github-cloud.s3.amazonaws.com/alambic/media/8792073/cb/fa/cbfa6df7cf0a36276bcb9780ae34dea14276fabbaf310775afcffcdad96e58af?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIMWPLRQEC4XCWWPA%2F20170228%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20170228T193746Z&amp;X-Amz-Expires=86400&amp;X-Amz-Signature=f1c7a9c0a65504be3193e6cf57655d02719e2ce0a62ee234f956212813080738&amp;X-Amz-SignedHeaders=host&amp;actor_id=2167694&amp;token=1: dial tcp 54.231.72.99:443: i/o timeout: 
github.com/git-lfs/git-lfs/errors.newWrappedError
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/errors/types.go:166
github.com/git-lfs/git-lfs/errors.NewSmudgeError
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/errors/types.go:252
github.com/git-lfs/git-lfs/lfs.PointerSmudge
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/lfs/pointer_smudge.go:70
github.com/git-lfs/git-lfs/lfs.(*Pointer).Smudge
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/lfs/pointer.go:65
github.com/git-lfs/git-lfs/commands.smudge
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/commands/command_smudge.go:89
github.com/git-lfs/git-lfs/commands.smudgeCommand
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/commands/command_smudge.go:117
github.com/git-lfs/git-lfs/vendor/github.com/spf13/cobra.(*Command).execute
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/vendor/github.com/spf13/cobra/command.go:477
github.com/git-lfs/git-lfs/vendor/github.com/spf13/cobra.(*Command).Execute
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/vendor/github.com/spf13/cobra/command.go:551
github.com/git-lfs/git-lfs/commands.Run
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/src/github.com/git-lfs/git-lfs/commands/run.go:66
main.main
    /opt/local/var/macports/build/_opt_bblocal_var_buildworker_ports_build_ports_devel_git-lfs/git-lfs/work/git-lfs-1.5.6/git-lfs.go:33
runtime.main
    /opt/local/lib/go/src/runtime/proc.go:183
runtime.goexit
    /opt/local/lib/go/src/runtime/asm_amd64.s:2086

ENV:
LocalWorkingDir=/Users/nihavd/Github/stablebouncer
LocalGitDir=/Users/nihavd/Github/stablebouncer/.git
LocalGitStorageDir=/Users/nihavd/Github/stablebouncer/.git
LocalMediaDir=/Users/nihavd/Github/stablebouncer/.git/lfs/objects
LocalReferenceDir=
TempDir=/Users/nihavd/Github/stablebouncer/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
BatchTransfer=true
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic
UploadTransfers=basic
GIT_DIR=.git
GIT_REFLOG_ACTION=pull
GIT_PREFIX=
</code></pre>

<p>Any ideas about what's wrong?</p>
","4","7637627","",""
"43076857","7344905","2017-03-28 18:07:29","2","5002","<git><git-commit><git-filter-branch><git-rewrite-history><git-lfs>","Remove all traces of large files in old git commit history","<p>I'm trying to put a Git project on GitHub but its history contains certain large files. If we try <code>git push</code> to GitHub, we are getting an error:</p>

<pre><code>remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: File .OldFiles/blah1/[file].[ext] is 257.29 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
</code></pre>

<p>Our first commit(say <code>commit_1</code>) was containing a few large files which were removed in one subsequent commit(say <code>commit_2</code>) without rewriting the git commit history.</p>

<p>We are using <code>AFS File System</code>(may be an extra info) and all the old large files are stored at a specific location in <code>.OldFiles</code> directory.
In <code>commit_2</code>, we have removed <code>.OldFiles</code> with it's contents and also have added <code>blah1</code> directory to <code>.gitignore</code>, but this is not removing their history within Git.
Unfortunately, we need to keep intact several other commits(literally <strong>n</strong> number of commits!) after <code>commit_1</code> &amp; <code>commit_2</code>. </p>

<p>I have tested over a clone at local sandbox by creating a duplicate branch from as <code>commit_1</code>:</p>

<pre><code>git checkout -b fix_branch &lt;commit_1_sha_id&gt;
</code></pre>

<p>Found that <code>fix_branch</code> is still containing large files: <code>.OldFiles/blah1/[file].[ext]</code>.</p>

<p>Maybe we need to remove these large files in <code>OldFiles</code> &amp; it's respective commit histories to do a successful GitHub push.</p>

<p>Tried <a href=""https://stackoverflow.com/questions/307828/completely-remove-file-from-all-git-repository-commit-history"">this</a> but we are getting an error at <code>git rebase</code>:</p>

<pre><code>error: unrecognised input
error: could not build fake ancestor
</code></pre>

<p>Also have tried <a href=""https://gist.github.com/wrburgess/3711050"" rel=""nofollow noreferrer"">this</a> but failed:</p>

<pre><code>git filter-branch --force --index-filter \ 'git rm --cached --ignore-unmatch [project]/.OldFiles/blah1/[file].[ext]' \ --prune-empty --tag-name-filter cat -- --all
</code></pre>

<p>I'm not sure whether we can use git <a href=""https://docs.acquia.com/article/removing-large-files-git-without-losing-history"" rel=""nofollow noreferrer"">cherry-pick</a> as we can not discard all files in <code>commit_1</code> but only these large files.</p>

<p>Is it possible to remove all large files traces by rewriting git history and by editing the commits by using <code>git filter-branch</code> and <code>git rebase -i</code>?</p>

<p>P.S. We do not have <code>lfs</code> or <code>bfg</code> installed in our project space. </p>

<p>A li'l help will be much appreciated to this newbie! :)</p>
","9","7344905","",""
"62006516","13510173","2020-05-25 16:18:15","2","125","<python><tensorflow><github><git-lfs>","How to upload a .data-00000-of-00001 using github lfs?","<p>I want to upload my tensorflow saved files to github. But the .datadata-00000-of-00001 file is almost 55 mb and github allows only 25 mb size. I tried using git lfs. But I dont understand what to give for this command.:</p>

<pre><code>git lfs track ""*.psd""
</code></pre>

<p>Do I give .data-00000-of-00001 as the file extension? But its saying not a git repository. Im really new to this. Can anyone tell me how to upload this into my github repository?</p>
","0","13510173","",""
"62014426","12004523","2020-05-26 03:56:48","1","2426","<git><git-lfs><git-lfs-migrate>","Git LFS git lfs migrate import include all file types specified in .gitattribute?","<p>I installed git lfs and created a gitattribute file with a lot of file types to track. I'd like to now run the git lfs migrate command for all file types specfied in the .gitattribute. How can I do this?</p>

<p>All the sources I've found seem to only do either a single file type at a time, or a list of file type seperated by a comma:</p>

<pre><code>$ git lfs migrate import --include='*.psd'

</code></pre>

<pre><code>$ git lfs migrate import --include='*.psd,*.jpg'

</code></pre>
","0","12004523","",""
"43524881","7896943","2017-04-20 16:20:23","1","162","<git><git-lfs>","git lfs loosing references on an external hard drive","<p>I'm using an external hard drive to store my git repository. We are using git lfs to manage our larger files. My problem is that whenever I move the hard drive to another machine, git lists all the large files as modified or sometimes deleted. It seems that LFS does not store the references to this metadata on the external drive.</p>

<p>I'm looking for a solution for this problem but so far the only way I have of cleaning this up is if I make sure I checkout from master before I start working on a machine different from the last time I pushed to the repository. My next guess at a solution is finding LFSs configuration so that I can store the metadata on the drive rather than on the individual machines. Any suggestions for how to do that or perhaps a better solution?</p>
","0","7896943","",""
"62226531","10594531","2020-06-06 02:12:25","1","691","<git><git-lfs>","git archive from a remote downloads LFS file pointers only, not actual LFS files","<p>I noticed that 'git archive' supports LFS when archiving from a local repo but not when archiving from a remote. Here are the git commands I used</p>

<pre><code>git archive -o latest.zip HEAD
git archive -o latest.zip HEAD --remote=&lt;remote git repo&gt;
</code></pre>

<p>The first one, which operates on the local repo, works.  The second one does not. Only pointers pointers to the LFS files, instead of the actual LFS files, are included in the archive.  Am I doing this wrong?</p>
","0","10594531","",""
"50515531","6562967","2018-05-24 18:02:06","0","179","<git><github><git-lfs>","Obliterate entire chain of commits from git history?","<p>I have a very odd problem.  After some misadventure with trying to migrate to Github's Large File Store and a botched attempt to migrate away from it, I now have a very messed-up git topology that looks like this:</p>

<pre><code>A  - B  - C - D - E - F 
            /
A' - B' - C'
</code></pre>

<p>Now, C is exactly the same as C', B is exactly the same as B', and so on all the way back to the initial commit.  If I do ""git log"", I essentially see duplicate commits for everything before D.  D itself is an empty merge.</p>

<p>Is there a way to completely delete A', B', and C', so that my history looks like this?</p>

<pre><code>A - B - C - E - F
</code></pre>
","2","6562967","",""
"68999317","13517137","2021-08-31 13:11:25","0","529","<java><jgit><git-lfs>","Jgit - How to filter big files clone","<p>I'm trying to clone a repository that contains one big file (above 2GB),
As this <a href=""https://tickets.dominodatalab.com/hc/en-us/articles/360058040352-Critical-Error-Object-too-large-rejecting-the-pack-Max-object-size-limit-is-2-147-483-639-bytes-#:%7E:text=Jgit%20has%20a%20pack%20size,past%20commits%20to%20the%20repo."" rel=""nofollow noreferrer"">article</a> mentions the max size of a file Jgit can handle is 2GB.
I saw that through pure git command I can filter big files using <code>git clone --filter=blob:limit=100m</code>
And now I want to implement this filter in my java code that uses Jgit so I would be able to avoid the exception
<code>Object too large (2,424,185,920 bytes), rejecting the pack. Max object size limit is 2,147,483,639</code>
Currently I do the cloning using Jgit like this :</p>
<pre><code>Git  git = Git.cloneRepository()
                        .setURI(gitUrl)
                        .setBranch(branch)
                        .setCloneAllBranches(false)
                        .setCredentialsProvider(credentialsProvider)
                        .setDirectory(directory)
                        .call();
</code></pre>
<p>I wonder if there is option to add filter to the clone so it will avoid cloning big files using Jgit?</p>
","0","13517137","",""
"33644679","807089","2015-11-11 05:17:48","2","595","<git><github><amazon-s3><git-lfs>","I have a git repo with some files in Large File Storage. How can I change what server these are stored in?","<p>I got Git LFS and set it up according to this website: <a href=""https://git-lfs.github.com/"" rel=""nofollow"">https://git-lfs.github.com/</a></p>

<p>On one of my repos, I tracked a few large files, and that seemed to be working well.</p>

<p>I want to move my storage of these large files to an S3 bucket, and I found this project: <a href=""https://github.com/meltingice/git-lfs-s3"" rel=""nofollow"">https://github.com/meltingice/git-lfs-s3</a></p>

<p>I installed git-lfs-s3 according to the instructions on the README, set all the appropriate environment variables regarding S3 access, and changed my .gitconfig to reference the new server.</p>

<p>However, I'm not sure how to trigger the moving of my large files from the server I was on to the new server. Additionally, I tried tracking some files on another repo after I made this change, and the files were pushed into regular GitHub.</p>

<p>I tried looking at the git lfs logs through the command line, but they appeared to be empty.</p>

<p>What's the way to trigger the movement of this data? And is there anything else I can do to get more information about what's going on?</p>
","0","807089","0","0"
"50659009","2295193","2018-06-02 16:37:51","3","4299","<git><unity-game-engine><version-control><git-lfs>","Broken Unity project after git clone","<p>I have a Unity project (<a href=""https://github.com/raidenfreeman/ExperimentNew"" rel=""nofollow noreferrer"">github link</a>), that doesn't work after being cloned. Even though the files are there, they have incorrect contents. For example .png files are replaced with text:</p>
<blockquote>
<p>version <a href=""https://git-lfs.github.com/spec/v1"" rel=""nofollow noreferrer"">https://git-lfs.github.com/spec/v1</a>
oid sha256:089f8198df161233681006c4243f6d6babb2e125062a21ea727d0d6c97889d26
size 1035</p>
</blockquote>
<p>Some DLLs that I have from external asset packages (for example DOTween), are also probably not stored correctly, because the compiler complains about undeclared namespaces.</p>
<blockquote>
<p>Assets/External Dependencies/Demigiant/DOTween/Examples/Basics.cs(3,7): error CS0246: The type or namespace name `DG' could not be found. Are you missing an assembly reference?</p>
</blockquote>
<p><strong>UPDATE:</strong>
Actually, the dlls are not even there. Why? They're not part of the gitignore.</p>
<p>I have made sure to set <code>Version Control Mode</code> to <code>Visible Meta Files</code> and
<code>Asset Serialization Mode</code> to <code>Force Text</code>.</p>
<p>I tried moving the project to a new directory, deleting the .git folder, deleting <code>Library</code>, remaking everything (reopening with Unity, and then <code>git init</code>), and pushing to a new repo. The new repo has the exact same issues as the previous one.</p>
<p>I'm using the <a href=""https://github.com/github/gitignore/blob/master/Unity.gitignore"" rel=""nofollow noreferrer"">default .gitignore for Unity</a></p>
<p>And the following .gitattributes (to enable LFS):</p>
<pre><code># 3D models
*.3dm filter=lfs diff=lfs merge=lfs -text
*.3ds filter=lfs diff=lfs merge=lfs -text
*.blend filter=lfs diff=lfs merge=lfs -text
*.c4d filter=lfs diff=lfs merge=lfs -text
*.collada filter=lfs diff=lfs merge=lfs -text
*.dae filter=lfs diff=lfs merge=lfs -text
*.dxf filter=lfs diff=lfs merge=lfs -text
*.fbx filter=lfs diff=lfs merge=lfs -text
*.jas filter=lfs diff=lfs merge=lfs -text
*.lws filter=lfs diff=lfs merge=lfs -text
*.lxo filter=lfs diff=lfs merge=lfs -text
*.ma filter=lfs diff=lfs merge=lfs -text
*.max filter=lfs diff=lfs merge=lfs -text
*.mb filter=lfs diff=lfs merge=lfs -text
*.obj filter=lfs diff=lfs merge=lfs -text
*.ply filter=lfs diff=lfs merge=lfs -text
*.skp filter=lfs diff=lfs merge=lfs -text
*.stl filter=lfs diff=lfs merge=lfs -text
*.ztl filter=lfs diff=lfs merge=lfs -text
# Audio
*.aif filter=lfs diff=lfs merge=lfs -text
*.aiff filter=lfs diff=lfs merge=lfs -text
*.it filter=lfs diff=lfs merge=lfs -text
*.mod filter=lfs diff=lfs merge=lfs -text
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text
*.s3m filter=lfs diff=lfs merge=lfs -text
*.wav filter=lfs diff=lfs merge=lfs -text
*.xm filter=lfs diff=lfs merge=lfs -text
# Fonts
*.otf filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
# Images
*.bmp filter=lfs diff=lfs merge=lfs -text
*.exr filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.hdr filter=lfs diff=lfs merge=lfs -text
*.iff filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.pict filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text
*.tiff filter=lfs diff=lfs merge=lfs -text
# Collapse Unity-generated files on GitHub
*.asset linguist-generated
*.mat linguist-generated
*.meta linguist-generated
*.prefab linguist-generated
*.unity linguist-generated
</code></pre>
<hr />
<h1>UPDATE:</h1>
<p>After further investigation, it seems that the png files, get overwritten (by unity?) when the project gets opened after cloning. They exist correctly in the remote repository. The external dlls on the other hand do not get uploaded at all.</p>
","5","2295193","",""
"50882026","1556108","2018-06-15 20:06:00","1","27","<git><githooks><git-lfs>","git lfs looses execute flag on hook scripts","<p>A weird issue where scripts in <code>.git/hooks</code> directory (e.g. <code>post-commit</code>, <code>post-merge</code>, etc) loose their <code>+x</code> flag rendering them useless.</p>

<p>Environment is macOS.  Git version is <code>2.15.1</code>, git lfs version is <code>git-lfs/2.3.4 (GitHub; darwin amd64; go 1.9.1)</code></p>

<p>Troubleshooting the issue I found that even if I manually run <code>chmod a+x .git/hooks/*</code>, verify that <code>x</code> is set on all the files, and then perform <code>git checkout &lt;whatever&gt;</code>, the <code>x</code> is reset and is gone.  It does it no matter if I checkout <code>master</code> or some branch.</p>

<p>Additionally, even running <code>git lfs install</code> doesn't resolve the issue, and after command runs (standard messages written to console), the command doesn't place <code>+x</code> on those files.</p>

<p>What is the way to fix this issue?</p>
","0","1556108","0","0"
"34685689","56791","2016-01-08 20:40:09","11","3487","<git><github><git-lfs>","Git lfs (Large File Storage) says lfs managed files are modified after a git lfs pull","<p>I have a working copy of a repository that uses git-lfs to store some large files. I have git-lfs binary installed, but may not have run ""git lfs install"" inside of the working copy. When I want to update my local working copy after additions of lfs files, I execute these commands:</p>

<pre><code>git pull
git lfs pull
</code></pre>

<p>That worked fine as long as lfs files were being added. Then the repository had some lfs files that were modified and when I ran <code>git pull</code> I got the error message:</p>

<pre><code>Your local changes to the following files would be overwritten by merge
....
....
</code></pre>

<p>And it listed out all of the lfs files that were going to be modified by the pull.</p>

<p>Since then, I ran <code>git lfs install</code> inside the working copy and it worked fine, but <code>git status</code> still lists all those files as being modified and a <code>git pull</code> gives me the same error.</p>

<p>My question is basically, what are the right steps for updating my working copy if I'm using lfs? How do I clean up this sticky situation?</p>
","0","56791","0","0"
"50923093","8018636","2018-06-19 07:43:11","0","3234","<git><github><git-lfs>","downloading failed from github using Git LFS","<p>I tried to use git clone to download repository from <a href=""https://github.com/eshijia/knowledge-graph-keras.git"" rel=""nofollow noreferrer"">this repository</a>. When I used </p>

<pre><code>git clone https://github.com/eshijia/knowledge-graph-keras.git
</code></pre>

<p>I get the following error :</p>

<pre><code>Error downloading object: data/freebase15k/freebase_15k-id2entity.pkl (d40c058):                                                             Smudge error: Error downloading data/freebase15k/freebase_15k-id2entity.pkl (d4                        0c05819ce4431249d27970c5c6abbd4a09b9616f3321c5082227be7a5eea0d): LFS: Get https:                                                             //github-cloud.s3.amazonaws.com/alambic/media/127872792/d4/0c/d40c05819ce4431249 d27970c5c6abbd4a09b9616f3321c5082227be7a5eea0d?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp; X-Amz-Credential=AKIAIMWPLRQEC4XCWWPA%2F20180619%2Fus-east-1%2Fs3%2Faws4_request &amp;X-Amz-Date=20180619T071649Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=e4c596e3046463c5 0dc27e23ca22fbb036a9aa25f48449467af2b3b71117e8da&amp;X-Amz-SignedHeaders=host&amp;actor_ id=0&amp;token=1: dial tcp 219.76.4.4:443: connectex: A connection attempt failed be                                                              cause the connected party did not properly respond after a period of time, or es                                                            tablished connection failed because connected host has failed to respond.

Errors logged to C:\Users\User\Desktop\Learning Materials\programming\python_cod                                       e\DL\knowledge-graph-keras\.git\lfs\logs\20180619T151710.7131223.log Use `git lfs logs last` to view the log. error: external filter 'git-lfs filter-process' failed fatal: data/freebase15k/freebase_15k-id2entity.pkl: smudge filter lfs failed warning: Clone succeeded, but checkout failed. You can inspect what was checked out with 'git status' and retry the checkout with 'git checkout -f HEAD'
</code></pre>

<p>However, if I downloaded the <code>data/freebase15k/freebase_15k-id2entity.pkl</code> directly from the original github page, the pkl file could be downloaded well. </p>

<p>Any solution for this?</p>

<p>PS: my git version is <code>2.17.1.windows.2</code></p>
","9","8018636","",""
"34892478","1816847","2016-01-20 05:51:58","21","11277","<git><github><git-lfs>","git lfs ""objects"" taking a lot of disk space","<p>I have a project with a lot of binaries (mostly pdfs) that I'm using git-lfs with.  The project is about 60mb but I found that my .git/lfs/objects director is about 500mb.  I presume these are cached versions of previous commits.  Is there a way to gracefully delete these (ie delete them without corrupting the state of git)?  The odds of me ever wanting previous versions of the files in LFS are near 0 now especially since the project is over.</p>
","0","1816847","0","0"
"41912442","2463421","2017-01-28 17:05:28","8","6111","<git><github><git-lfs>","Initialize bare git repository with LFS","<p>I'd like to initialize several local git repositories on an external drive (git init --bare reponame) supporting git LFS protocol. I.e. after cloning these, I'd like to be able to track large files via LFS (the version of the files should then be stored on the external drive)</p>

<p>Doing this without any additional steps did not work (i.e. clone empty repo, track large files with git LFS, and try to push to remote):</p>

<pre><code>Git LFS: (0 of 122 files) 0 B / 157.56 MB
http: Post /media/me/bigdrive/git_repos/coding.git/info/lfs/objects/batch:
      unsupported protocol scheme """"
http: Post /media/me/bigdrive/git_repos/coding.git/info/lfs/objects/batch:
      unsupported protocol scheme """"
error: failed to push some refs to '/media/me/bigdrive/git_repos/coding'`
</code></pre>

<p>I found no guide on how to do this and the LFS man page did not seem to provide a solution. The GitHub/BitBucket guides only explain how to do this on a local repository and then pushing to a correctly configured git repository on their servers</p>

<p>Appreciate any help, thanks!</p>
","0","2463421","0","0"
"34946134","3428674","2016-01-22 11:53:53","2","5977","<git><github><git-lfs>","How to migrate a repo to git-lfs without losing all the commit history?","<p>I have an existing git repository having large number of "".bmp"" files scattered across multiple folders. I want to update this repository so that is uses Git-LFS. Is there a way to do this without losing all the commit history? While searching regarding this I came across a tool <a href=""https://rtyley.github.io/bfg-repo-cleaner/"" rel=""nofollow"">BFG Repo-Cleaner</a>. But does this tool maintain the commit history of the said repository?</p>
","1","3428674","",""
"34987989","2388129","2016-01-25 08:24:50","1","888","<git><github><git-lfs>","git lfs - How to track files already committed to a local branch","<p>We have a collaborator who has been doing local commits, but not pushing them to GitHub since they were failing. We found that they were failing due to large files. So we installed lfs on his system and added those files to be tracked. However, since they were already committed it appears that they will not use lfs. 
What is the simplest way to remedy this situation?</p>

<p>I tried testing out how to fix this with a test repo by reverting the commits, but it is still stuck and the push to the remote fails. In the above case we do not want to revert or reset.</p>
","0","2388129","",""
"50961804","7208627","2018-06-21 06:32:00","9","4650","<git><git-lfs>","Git: reduce the size of `.git/lfs/`","<p>I use git-lfs to track large files, the setup is:</p>

<pre><code>.
├── ...
├── ...
├── large-files
├── ...
├── ...
└── .git
</code></pre>

<p>where an external storage is mounted on <code>large-files</code>, and all large files go here.</p>

<p>The problem with this setup is, there is a <code>.git/lfs</code> directory, which uses the same amount disk spaces as the <code>large-files</code>, since I will never delete from <code>large-files</code>, and my SSD, where the working tree resides, has smaller capacity than the external storage, <code>.git/lfs</code> will outgrow my SSD's capacity.</p>

<p>Is there a way to reduce the size of this <code>.git/lfs</code> without moving it to an external storage? (putting <code>.git</code> or the entire working tree to the external storage is not an option, because the external storage is not always available)</p>
","1","7208627","",""
"60510977","13000384","2020-03-03 15:51:28","2","500","<git><gitlab><git-lfs>","Command to get username used by git-lfs lock?","<p>I have a repo in which I am using git-lfs for file locking only (I'm not tracking any files). The remote host is our on-prem GitLab server. When a file is locked with 'git lfs lock' the lock owner's username is, I believe, provided by the GitLab server. This could be different to my Linux username or indeed my git config username, e.g.</p>

<pre><code>$ whoami
jbloggs
$ git config user.name
Joe
$ git lfs locks --path=file.txt
file.txt    Joe Bloggs ID:1
</code></pre>

<p>For a bash script I'm writing I want to be able to marry up these three usernames and effectively treat them as one.
Is there a way from the command line of getting a user's lfs lock username (without having to, for example, temporarily lock a file and run git lfs locks and grab the owner name from the output)?</p>
","0","13000384","",""
"42417119","4353360","2017-02-23 13:27:50","0","1085","<egit><git-lfs>","Can't clone nor stage git with lfs through egit","<p><strong>Enviroment</strong></p>

<p>I did setup an test enviroment for git-lfs. This includes Git 1.9.5, Eclipse 4.6.2 and EGit 4.4.0/4.6.0. git-lfs is installed and works. Eclipse shows the right git configuration parameters set by <code>git lfs install</code> (Preferences->Team->Git->Configuration->User Settings). Git-lfs is available in the PATH of git bash and the windows CMD.</p>

<p>Git and Git-LFS just works fine throught git bash.</p>

<p><strong>Problem</strong> </p>

<p>It's important that it's possible to use git throught Eclipse Plugins, which is currently EGit. EGit usually seems to support git-lfs, but in my case I am not able to clone nor stage (cloned throught git bash).
Clone:<code>Execution of filter command 'git-lfs smudge -- 'SW/xy.jar'' on file 'SW/xy.jar' failed with return code '2', message on stderr: 'Downloading 'SW/xy.jar' (289.10 KB)</code></p>

<p>Stage: <code>Execution of filter command 'git-lfs clean -- 'SW/xy.jar'' on file 'SW/xy.jar' failed</code></p>

<p><strong>Questions</strong></p>

<ol>
<li>Does someone have any suggestion what am I doing wrong?</li>
<li>Why is <code>git-lfs clean</code> executed throught adding/staging?</li>
</ol>

<p>Thanks in advance! Any help will be appreciated!</p>
","0","4353360","",""
"42604978","1576602","2017-03-05 05:45:43","8","2260","<git><github><git-lfs>","Multiple file versions in git-lfs","<p>I'm trying to estimate the storage requirements for my project on GitHub and have a few questions about how git-lfs stores multiple versions of files:</p>

<ul>
<li>Are multiple versions of files stored by git-lfs?</li>
<li>If so, will every change to a file result in the complete file being replicated, or are only differences stored? </li>
<li>Will all versions count towards the quota on github?</li>
<li>Is there any way to control how many versions are kept?</li>
</ul>
","1","1576602","0","0"
"43187374","5154345","2017-04-03 14:31:12","1","123","<git><git-lfs>","Error ""duplicate entry names"" while migrating existing repository data to LFS using git-lfs-migrate","<p>I got this error stack</p>

<pre><code>...
[main] INFO git.lfs.migrate.Main -   processed: 230934/230934
[main] INFO git.lfs.migrate.Main -   Converting object with dependencies in single thread...
[main] INFO git.lfs.migrate.Main -   processed: 1/231174
[main] INFO git.lfs.migrate.Main -   processed: 229/231174
Exception in thread ""main"" org.eclipse.jgit.errors.CorruptObjectException: duplicate entry names
    at org.eclipse.jgit.lib.ObjectChecker.report(ObjectChecker.java:728)
    at org.eclipse.jgit.lib.ObjectChecker.checkTree(ObjectChecker.java:658)
    at org.eclipse.jgit.lib.ObjectChecker.checkTree(ObjectChecker.java:594)
    at git.lfs.migrate.GitConverter$4.convert(GitConverter.java:231)
    at git.lfs.migrate.Main.processSingleThread(Main.java:208)
    at git.lfs.migrate.Main.processRepository(Main.java:169)
    at git.lfs.migrate.Main.main(Main.java:84)
</code></pre>

<p>When executing this kind of query with <a href=""https://github.com/bozaro/git-lfs-migrate"" rel=""nofollow noreferrer"">git-lfs-migrate</a> recommended by <a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial"" rel=""nofollow noreferrer"">Git LFS Tutorial</a> for migrating existing repository data to Git LFS</p>

<pre><code>java -jar jar_path\git-lfs-migrate.jar -s source_path\.git -d dest_path\.git -t 8 ""*.bin"" ""*.bmp"" ""*.db"" ""*.dll"" ""*.exe"" ""*.exp"" ""*.lib"" ""*.msi"" ""*.obj"" ""*.pdb"" ""*.pdf"" ""*.png"" ""*.psd"" ""*.rar"" ""*.whl"" ""*.zip""
</code></pre>

<p>Anyone know how to fix this or at least get more info on the ""duplicate entry names"" like filename in conflicts?</p>
","0","5154345","",""
"62094183","779513","2020-05-29 20:32:50","0","379","<git><git-lfs><bfg-repo-cleaner>","How to remove a deleted file from git history - including rev-list","<p>I have tried filter-branch, and got to the point where it is removed from git log, but still in rev-list. Then I tried bfg repo cleaner and it still is listed in rev-list. Ultimately I need it to be removed from rev-list because the file is missing from our git lfs server, which causes a git lfs fetch --all to fail...</p>
","0","779513","",""
"43895349","1916754","2017-05-10 14:26:26","0","659","<git-lfs>","'git lfs track' gives me incorrect ""already supported"" error","<p>My <code>.gitattributes</code> file has a single line:</p>

<pre><code>*.exe filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p><code>git lfs ls-files</code> shows me tracking 7 different *.exe files.</p>

<p>I want to track another file, which is already part of the repository.  </p>

<p>When I execute the command <code>git lfs track ""CacheFiles\Development_EntitlementFlatCache.dat</code> I get the error <code>""CacheFiles\\Development_EntitlementFlatCache.dat"" already supported</code>.</p>

<p>I check my <code>.gitattributes</code> files, and it is unchanged.</p>

<p>When I try adding a different .dat file, it works fine.</p>

<p>Why might it be saying that this file is supported, when it isn't being tracked?  Why is it preventing me from tracking this *.dat file, but not other *.dat files?</p>
","0","1916754","",""
"62567270","12859979","2020-06-25 03:12:41","1","2586","<git><git-lfs><jenkins-git-plugin>","Command ""git lfs pull origin"" returned status code 1; stderr: git: 'lfs' is not a git command","<p>Installed the git-lfs on our mac slaves and followed the artical at <a href=""https://medium.com/@priya_talreja/git-lfs-setup-in-jenkins-ee80879007e3"" rel=""nofollow noreferrer"">https://medium.com/@priya_talreja/git-lfs-setup-in-jenkins-ee80879007e3</a>. to build jenkins job</p>
<p>we are getting the following error:</p>
<pre><code>Git LFS initialized.     
xxxx
xxxx
xxxx
Enabling Git LFS pull
 &gt; git config core.sparsecheckout # timeout=10
 &gt; git checkout -f 94723c3732a48a49f41a70248233e52b015632cb # timeout=10
 &gt; git config --get remote.origin.url # timeout=10
 &gt; git lfs pull origin # timeout=10
FATAL: Could not checkout 94723c3732a48a49f41a70248233e52b015632cb
hudson.plugins.git.GitException: Command &quot;git lfs pull origin&quot; returned status code 1:
stdout: 
stderr: git: 'lfs' is not a git command. See 'git --help'. 
</code></pre>
<p>out of 4 nodes, one node is working others are not. [Mac OS X; Version: 10.14.6]
git versions : 2.22.0 / 2.21.0 /2.23.0 [Error getting on ver: 2.22.0 and 2.23.0]
git-lfs version: 2.11.0</p>
","3","12859979","0","0"
"43902836","832745","2017-05-10 21:12:14","2","105","<git><git-lfs>","keep .gitattributes updated for git-lfs","<p>I am trying to deploy git-lfs. An issue I'm trying to resolve is if user A decides to add a new file (blah.b), and he says git lfs track blah.b (b/c he learned that binaries must be tracked). Great, now blah.b is tracked. He then adds blah.b, commits it, and pushes it to the repo.</p>

<p>blah.b is now on the LFS server.</p>

<p>User B now pulls from origin and gets blah.b.</p>

<ol>
<li><p>blah.b is not pulled from LFS server - b/c .gitattributes isn't updated.</p></li>
<li><p>He manages to call git lfs pull, and now updates blah.b to blah.b`. He may now push a binary to the server b/c he doesn't have .gitattributes.</p></li>
</ol>

<p>Is there any way to enforce updating of .gitattributes at push time to make sure this issue doesn't occur?</p>

<p>Thanks</p>
","0","832745","",""
"62952175","668455","2020-07-17 10:32:08","0","155","<git><git-lfs>","Is ""git lfs install"" included in ""git lfs migrate""?","<p>Git lfs documentation says :</p>
<pre><code>Setup Git LFS on your system. You only have to do this once per
    repository per machine:

        git lfs install
</code></pre>
<p>Now, since how I don't know the extent of what <code>git lfs install</code> does, how could I check <code>git lfs migrate</code> has called <code>git lfs install</code> (which is not said in <code>git lfs migrate</code> doc : <a href=""https://manpages.debian.org/unstable/git-lfs/git-lfs-migrate.1.en.html"" rel=""nofollow noreferrer"">https://manpages.debian.org/unstable/git-lfs/git-lfs-migrate.1.en.html</a>) ?</p>
","0","668455","",""
"44549542","341970","2017-06-14 15:58:21","0","455","<git><authentication><bitbucket><git-lfs>","Cannot push to Bitbucket after installing git-lfs","<p>After installing <code>git lfs</code>, git keeps asking for my password when trying to execute:</p>

<pre><code>git push origin master
</code></pre>

<p>It's as if <code>git</code> was stuck in an infinite loop: No error message, nothing, but I am being prompted for my password over and over again. The repo was cloned over HTTPS.</p>

<p>The closest question seems to be:</p>

<p><a href=""https://stackoverflow.com/q/20928681/341970"">Cannot push to Bitbucket via https anymore: git returns fatal error</a></p>

<p>According to the answers to that question my options are:</p>

<ul>
<li>Use SSH, <em>or</em></li>
<li>add my password to the URL.</li>
</ul>

<p>(The other answers concerning the version of git don't count: I am using git 2.7.4 with git-lfs/2.1.1 (GitHub; linux amd64; go 1.8.1)   so it's not that my git is too old.)</p>

<p>Is there any other alternative to fix this issue?</p>
","0","341970","",""
"44550842","95008","2017-06-14 17:09:36","2","621","<git><git-lfs><bfg-repo-cleaner>","Unable to convert git repo to use large file support (lfs) via the bfg tool","<p>I am trying to convert an existing git repo to use git lfs. I am following <a href=""https://confluence.atlassian.com/bitbucket/use-bfg-to-migrate-a-repo-to-git-lfs-834233484.html"" rel=""nofollow noreferrer"">Atlassian's recipe</a>, using the BFG tool here: <a href=""https://rtyley.github.io/bfg-repo-cleaner/"" rel=""nofollow noreferrer"">https://rtyley.github.io/bfg-repo-cleaner/</a></p>

<p>The problem is that when I issue the suggested command to do the actual conversion, it ends almost immediately with no actual work done:</p>

<pre><code>C:\src&gt; java -jar bfg-1.12.15.jar --convert-to-git-lfs '*.{msi,7z,gz,zip,bin,exe,psd,pdf}' --no-blob-protection ent.git`

Using repo : C:\\src\\ent.git

Found 0 objects to protect
Found 35 tag-pointing refs : refs/tags/4.2/4.2.0, refs/tags/4.2/4.2.1, refs/tags/4.2/4.2.2, ...
Found 145 commit-pointing refs : HEAD, refs/heads/ESP-1652-filetransformer-throws-system.invalidoperationexception, refs/heads/archive/cmdev, ...

Protected commits
-----------------

You're not protecting any commits, which means the BFG will modify the contents of even *current* commits.

This isn't recommended - ideally, if your current commits are dirty, you should fix up your working copy and commit that, check that your build still works, and only then run the BFG to clean up your history.

Cleaning
--------

Found 11182 commits
Cleaning commits:       100% (11182/11182)
Cleaning commits completed in 782 ms.

BFG aborting: No refs to update - no dirty commits found??
</code></pre>

<p>I am on Windows 10 btw. Using git version <code>2.9.2.windows.1</code>.</p>

<p>Any ideas?</p>
","0","95008","",""
"63378779","2248302","2020-08-12 14:33:29","1","46","<git><gitlab><repository><git-lfs>","Repository is full! Is there a way to reduce space used up by git LFS?","<p>we are a games developing studio and unfortunately we hit out LFS storage size limit of 10Gb. Now, I wonder and have trouble finding out about how to reduce the size of the stored LFS files as much as possible.</p>
<p>As of now, our artists cannot work due to the repository being &quot;full&quot;.</p>
<p>As far as I understand, garbage collection and prune-commands do not help much, because all LFS file versions are referenced somewhere in some commits in our git history.</p>
<p>At the same time, we have thousands of commits, so it's not really doable to squash our history, or is it?</p>
<p>I'd be fine with losing all the history of our LFS files to free up space, again. But unfortunately, I do not know how to do this, if it is doable at all.</p>
<p>Any suggestions?</p>
","0","2248302","",""
"42386556","1011867","2017-02-22 08:45:09","1","171","<git><git-lfs>","git lfs without local storage","<p>I've migrated my repository to LFS and found that .git/lfs/objects is way too big.
Can I configure lfs not to store anything there and in case files are needed to download it straight to the repository folder?</p>
","0","1011867","0","0"
"60677856","2309838","2020-03-13 22:12:10","0","3285","<git><git-lfs>","cannot git push beacuse of LFS upload missing objects","<p>I'd like to push a local branch to remote. This local branch contains work that was not done by me and includes some LFS object reference in history. My git push attempted failed because of LFS upload missing objects. </p>

<pre><code>git lfs ls-files

35967a21e5 - spec/fixtures/git-cheat-sheet.pdf
</code></pre>

<p>I also couldn't lfs push:</p>

<pre><code>git lfs push origin mybranch                    
LFS upload missing objects: (0/1), 0 B | 0 B/s                                                                                                                                                                
  (missing) spec/fixtures/git-cheat-sheet.pdf (35967a21e5d856eaea89d2e5dd55a5e3b5f4e1e4efe3b000ef6d60b31600f1d2)
Uploading LFS objects:   0% (0/1), 0 B | 0 B/s, done.
</code></pre>

<p>Running git lfs untrack or remove git cache doesn't untrack this PDF. Is there any way I can push my branch? I wouldn't care if this file is stored in LFS or not</p>
","0","2309838","0","0"
"51982501","3470556","2018-08-23 09:27:06","0","594","<git><git-lfs><git-filter>","git smudge filter failing on last file","<p>I'm trying to do something similar to what git-lfs does using filters.<br>
Download .apk files from S3 on git checkout, but smudge filter is always failing on last file because of (<a href=""https://github.com/git/git/blob/v2.17.1/convert.c#L737"" rel=""nofollow noreferrer"">apply_filter</a> function i guess).</p>

<p>Configuration:  </p>

<pre><code>cat .gitattributes
    *.apk filter=custom-lfs -diff -text

cat ~/.gitconfig
    [filter ""custom-lfs""]
    smudge = custom-lfs %f
    required = true
</code></pre>

<p>If the filter is required to succeed '(required = true)' git status report assertion error:  </p>

<pre><code>git.real: convert.c:1165: convert_to_git_filter_fd: Assertion `ca.drv-&gt;clean || ca.drv-&gt;process' failed.
</code></pre>

<p>If it's not required git status is showing 1 from 20 apks modified, always the one which is downloaded last.<br>
S3 source apk and my local copy have the same checksum.  </p>

<p><a href=""https://github.com/git/git/blob/v2.17.1/convert.c#L1165"" rel=""nofollow noreferrer"">https://github.com/git/git/blob/v2.17.1/convert.c#L1165</a> </p>

<p>Was thinking to try out with 2.18.</p>
","5","3470556","",""
"62852772","12918630","2020-07-11 18:02:27","19","32272","<git><github><git-lfs>","Error when getting git LFS files: Object does not exist on the server: [404] Object does not exist on the server","<p>I downloaded and installed Git Large File Storage. Now I'm trying to get lfs files from the existing repository in github (not mine).
I tried:</p>
<p><code>git lfs clone https://github.com/xxx/xxx</code></p>
<p>then in my local just cloned repo:</p>
<p><code>git lfs fetch --all</code></p>
<p><code>git lfs pull</code></p>
<p>I also tried the same but without &quot;lfs&quot;.</p>
<p>The repository is cloned but for all lfs files always this error is shown:</p>
<pre><code>[301582dabd8c6ac7bdf626c7e4a1d64c8f9665b65b6334b44642bdfb78054575] Object does not exist on the server: [404] Object does not exist on the server
</code></pre>
<p>and then:</p>
<pre><code>error: failed to fetch some objects from 'https://github.com/xxx/xxx.git/info/lfs'
</code></pre>
<p>As a result, instead of real large files, their small pointers that can be seen in GitHub itself are cloned.</p>
<p>At the same time this command:</p>
<p><code>git log --all -p -S 301582dabd8c6ac7bdf626c7e4a1d64c8f9665b65b6334b44642bdfb78054575</code></p>
<p>gives the following results:</p>
<pre><code>commit 36c7dba69de90d99f0c305fce13a598b8f06b443
Author: xxx
Date:   Wed Sep 11 18:01:25 2019 +0200 
Add embeddings 
diff --git a/embeddings/wikipedia/0.pkl b/embeddings/wikipedia/0.pkl
new file mode 100644
index 0000000..5ee94da
--- /dev/null
+++ b/embeddings/wikipedia/0.pkl
@@ -0,0 +1,3 @@
+version https://git-lfs.github.com/spec/v1
+oid sha256:301582dabd8c6ac7bdf626c7e4a1d64c8f9665b65b6334b44642bdfb78054575
+size 588838774
</code></pre>
<p>I am not very confident user of GitHub, especially, of LFS. So, the question is: am I doing something wrong or does it indeed mean that the files do not exist on the server?</p>
","0","12918630","0","0"
"60995429","1222355","2020-04-02 15:40:02","1","223","<git-lfs><git-lfs-migrate>","Gradually converting a repo to use git-lfs for certain files. One file at a time","<p>We have a repo that is high value and expensive to disrupt.</p>

<p>It also has large XML files that cause significant problems when using a webapp for merges and git log history. In addition it is likely making our CI/CD inefficient. In other words ... the regular things that spur people to move to git-lfs.</p>

<p>We want to carefully do this. One file at a time.</p>

<p>I have seen approaches similar to what's listed below:</p>

<pre class=""lang-sh prettyprint-override""><code>cp *.xml ~/tmp
git rm *.xml
git commit
git lfs track *.xml
git add .gitattributes
git commit; git push
</code></pre>

<p>In a fresh directory:</p>

<pre class=""lang-sh prettyprint-override""><code>git clone --mirror $remote; cd repo
bfg --delete-files '*.xml'
git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive
git push
</code></pre>

<p>Back in src:</p>

<pre class=""lang-sh prettyprint-override""><code>mv repo repo.bloated
git clone $remote; cd repo
cp ~/tmp/*.xml .
git add *.xml # (it now puts them in lfs)
git commit; git push
</code></pre>

<p>How can I do something similar but just start with one large xml file to mitigate risk during this transition. We prefer to be in easy contact with the dev maintaining that file, isolate changes and crawl here. Changing 100s of files could hold up developers and be expensive.</p>

<p>Do we just change <code>*</code> to the specific file name in the above example?</p>
","0","1222355","",""
"61018374","9041349","2020-04-03 18:36:24","1","1108","<node.js><node-modules><puppeteer><chromium><git-lfs>","Github push error. Getting large file errors still after trying to track puppeteer chromium with git-lfs. Why is it even trying to upload this?","<p>I am trying to push my Node.js app which uses puppeteer2.1.1 into Github so I can then host on Azure. After trying to push I get these errors.</p>

<p><img src=""https://i.stack.imgur.com/IVf9c.png"" alt=""error message after trying to push to git""></p>

<p>I tried using <code>git lfs</code> followed all the commands by tracking the files, which I believe needs to be <code>/.local-chromium</code> according to the error message. After trying to push again still failed.</p>

<p>Has anybody used puppeteer and uploading to GitHub ever run into the same problem? I am also confused as to why it is even going to the node_modules folder. I thought that was automatically ignored when pushing to git. Here is my code below.</p>

<p>index.js </p>

<pre><code>const puppeteer = require(""puppeteer"");
require('dotenv').config();
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const client = require('twilio')(accountSid, authToken);
var schedule = require('node-schedule');

function coronaInfoSearch(){

    puppeteer.launch({  
        headless:true
    }).then(async browser =&gt;{


        //open new tab and go to specified url
        const page = await browser.newPage();

        await page.goto('https://www.worldometers.info/coronavirus/country/us/');

        //select elements wanted 
        page.waitForSelector('td')
            .then(async function(){

                //var self explanatory 
                const njRowTotalCases =await page.$eval('table .even .sorting_1', element =&gt; element.innerHTML);
                const njRowName = await page.$eval('table .even td', element =&gt; element.innerHTML);
                const njRowActiveCases = await page.$eval('#usa_table_countries_today &gt; tbody:nth-child(2) &gt; tr:nth-child(2) &gt; td:nth-child(6)', element =&gt; element.innerHTML);
                const njRowDeaths = await page.$eval('#usa_table_countries_today &gt; tbody:nth-child(2) &gt; tr:nth-child(2) &gt; td:nth-child(4)' , element =&gt; element.innerHTML);

                var coronainfoOutput = ""Total Cases:\n""+njRowTotalCases+""\n\n""+""Active Cases:""+njRowActiveCases+""\n\n""+""Total Deaths:""+njRowDeaths;
                //atring to be sent for outputting 
                var coronainfoOutputHeading=""NJ COVID-19 Update\n----------------\n"";

                //sent text message 
                client.messages
                  .create({
                     body: coronainfoOutputHeading + coronainfoOutput,
                     from: process.env.TWILIO_PHONE_NUMBER,
                     to: process.env.ANT_NUMBER
                   })
                  .then(message =&gt; console.log(message.sid));
            })
    });
};

schedule.scheduleJob(""55 13 * * 0-6"", function(){
    coronaInfoSearch();
});
</code></pre>

<p>package.json</p>

<pre><code>{
  ""name"": ""coronawebscrap"",
  ""version"": ""1.0.0"",
  ""description"": """",
  ""main"": ""index.js"",
  ""scripts"": {
    ""start"": ""node index.js"",
    ""test"": ""echo \""Error: no test specified\"" &amp;&amp; exit 1""
  },
  ""keywords"": [],
  ""author"": """",
  ""license"": ""ISC"",
  ""dependencies"": {
    ""dotenv"": ""^8.2.0"",
    ""express"": ""^4.17.1"",
    ""puppeteer"":  ""^2.1.1"",
    ""node-schedule"": ""^1.3.2"",
    ""twilio"": ""^3.41.1""
  }
}
</code></pre>

<p>.gitattributes</p>

<pre><code>.local-chromium filter=lfs diff=lfs merge=lfs -text
node_modules/puppeteer/.local-chromium filter=lfs diff=lfs merge=lfs -text
</code></pre>

<h2>Edit</h2>

<p>After putting node_modules/ under the .gitignore file, then adding to git repo, then committing, then pushing, I am still having same error.</p>

<p><strong>.gitignore</strong> </p>

<pre><code>.env
node_modules/
</code></pre>

<p>Git actions and errors:</p>

<p><img src=""https://i.stack.imgur.com/IVf9c.png"" alt=""**git actions and errors**""></p>
","0","9041349","",""
"61332784","5983691","2020-04-20 22:03:04","0","2529","<git><bitbucket><git-lfs>","How to lock a file with git on BitBucket?","<p>I am dealing with large files and have done <code>git lfs install</code> and followed all the steps listed <a href=""https://www.atlassian.com/git/tutorials/git-lfs#locking-files"" rel=""nofollow noreferrer"">here</a>. But when I actually want to lock a file, i.e. <code>git lfs lock &lt;filename&gt;</code> I am getting the following error:</p>

<blockquote>
  <p>Lock failed: Repository or object not found:
  <a href=""https://bitbucket.org/%7B%7D/%7B6cc70c4a-2d65-4a6d-b827-c37e61c63245%7D/info/lfs/locks"" rel=""nofollow noreferrer"">https://bitbucket.org/%7B%7D/%7B6cc70c4a-2d65-4a6d-b827-c37e61c63245%7D/info/lfs/locks</a></p>
  
  <p>Check that it exists and that you have proper access to it</p>
</blockquote>

<p>Is there anything I am missing?</p>
","0","5983691","",""
"61384994","335847","2020-04-23 10:30:54","0","1184","<git><git-lfs><git-ls-files>","Should git ls-files list the files being tracked by LFS (git lfs ls-files)","<p>I'm hoping this is a simple question - will <code>git ls-files</code> list the files I see from running <code>git lfs ls-files</code>? Or, are they managed and hence listed separately.</p>
<p>This is the first time I've used LFS, I've an error appearing but before I dive into that I want to check some basics, and I can't find anything about this in the documentation.</p>
","1","335847","",""
"60840963","10050942","2020-03-24 23:40:07","5","3721","<git><git-lfs>","What happens if I don't have a git lfs lock","<p>When using <code>git push</code> I receive a number of the following console outputs:</p>

<pre><code>Locking support detected on remote ""origin"". Consider enabling it with:
  $ git config lfs.https://127.0.0.1/foo/bar.git/info/lfs.locksverify true
</code></pre>

<p>I kind of understand what LFS locks are supposed to do, but I am not quite sure what happens if I don't enable them. Are they enabled on the server? Or on the client? Can anyone shed some light on this? Should I always enable it, if possible? Thank you!</p>
","4","10050942","0","0"
"42715826","3127087","2017-03-10 10:15:37","10","12051","<git><authentication><bitbucket><git-lfs>","Bitbucket git LFS giving weird error message","<p>I have worked on a <strong>git LFS via bitbucket</strong> for a while with no problem. I was working on my own but recently a trainee has joined me and we do not manage to push files from his machines.</p>

<p>We have been able to clone the repo on his machine (including the large files), make a few local commits with no problem. Though when it comes to <strong>pushing we have an authentication problem</strong> that says</p>

<blockquote>
  <p>Authentication required: Authorization error: <a href=""https://bitbucket"" rel=""noreferrer"">https://bitbucket</a>...
  ...
  Check that you have proper access to the repository</p>
</blockquote>

<p>The problem is shown in the image below:</p>

<p><a href=""https://i.stack.imgur.com/YcNaI.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/YcNaI.png"" alt=""enter image description here""></a></p>

<p>Note that my trainee has <strong>write access rights</strong> to the repo (in bitbucket).</p>

<p>Any idea of what's going on?</p>
","0","3127087","0","0"
"61156455","7147255","2020-04-11 12:02:15","4","1393","<linux><docker><jenkins><debian><git-lfs>","git-lfs/debian does not have a Release file","<p>Hello I am running the following docker image
<a href=""https://github.com/jenkinsci/docker/blob/master/Dockerfile"" rel=""nofollow noreferrer"">https://github.com/jenkinsci/docker/blob/master/Dockerfile</a></p>

<p>The dockerfile installs <strong>git-lfs</strong></p>

<p>So when I run <strong>apt-get udpate</strong>, I get the following error.</p>

<pre><code>W: The repository 'https://packagecloud.io/github/git-lfs/debian stretch Release' does not have a Release file.
E: Failed to fetch https://packagecloud.io/github/git-lfs/debian/dists/stretch/main/source/Sources  server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none
E: Some index files failed to download. They have been ignored, or old ones used instead.
</code></pre>

<p>Clicking on the link to the package (i.e. <a href=""https://packagecloud.io/github/git-lfs/debian"" rel=""nofollow noreferrer"">https://packagecloud.io/github/git-lfs/debian</a>) takes me to a page saying ""The page you were looking for doesn't exist.""</p>

<p>Is this some kind of external problem?</p>

<p>Is there a way that I can ignore this part of the update?</p>

<p>Any other ideas?</p>

<p>I've been googling and trying to think of workarounds for this for a full day and a half now.</p>
","4","7147255","",""
"61237382","893557","2020-04-15 19:47:42","2","181","<git><git-lfs><git-lfs-migrate>","Debugging Git LFS - why isn't my pack file shrinking after git lfs import?","<p>I have a UnrealEngine project with a bunch of uasset and umap files that I've tracked with LFS and not getting the results I expect.  The repository is a single pack file thats about 21gb. the working copy is about 25gb for a total of 46gb for the whole folder.</p>

<p>Have done the following with a new copy of the repo:</p>

<ol>
<li>git lfs install</li>
<li>git lfs track ""*.uasset""</li>
<li>git lfs track ""*.umap""</li>
<li>git lfs migrate import --include=""<em>.uasset,</em>.umap"" --verbose --everything</li>
</ol>

<p>This results in a ton of files being migrated based on what I'm seeing. Once its done I did:</p>

<ol>
<li>git reflog expire --expire-unreachable=now --all</li>
<li>git gc --prune=now --aggressive</li>
</ol>

<p>After running this I'm expecting the pack file to be a lot smaller but already know its not going to be because the gc takes forever, which means its re-compressing a ton of stuff. When its all said and done the pack file hasnt really changed size at all which is not what i'm expecting. I also now have a 20-something GB LFS folder.</p>

<p>Am I missing something? Not understanding how migrate is supposed to work? The usasset files are the majority of the space used in this repo.</p>
","0","893557","",""
"61634011","6191996","2020-05-06 11:27:16","4","3454","<git><git-lfs>","Is it mandatory to use the filter attribute for Git Large File Storage (LFS) in gitattributes?","<p>When I use the <em>.gitattributes</em> file with the following pattern <code>*.png binary</code> to handle large PNG files with Git LFS, nothing happens, LFS is ignored.<br>
When I set the track pattern manually with <code>git lfs track '*.png'</code> I get the following line in the <em>.gitattributes</em> file:<br>
<code>'*.png' filter=lfs diff=lfs merge=lfs -text</code><br>
This is working fine.</p>

<p><strong>So was there a change in a recent update of Git or Git LFS that makes it mandatory to use the filter attribute?</strong><br>
Or is the pattern just wrong? I guessed this is still fine since prominent resources <a href=""https://github.com/alexkaratarakis/gitattributes/blob/master/Web.gitattributes"" rel=""nofollow noreferrer"">like this repository use it</a>.</p>

<hr>

<p>Additional information:<br>
Through research and testing I found out that the <code>diff</code> and <code>merge</code> attributes are only placeholders for LFS for now and it doesn't make a difference if I remove them, but removing the <code>filter</code> attribute breaks LFS again (no error - files are just added to the repository as if there was no pattern for the file type).</p>

<p>This doesn't make sense to me since the filter is enforced through the global GIT config after running <code>git lfs install</code> (if I understand correctly). Here the relevant part from the <em>.gitconfig</em>:</p>

<pre><code>[filter ""lfs""]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
</code></pre>

<p>Btw. it also seems it doesn't matter if the pattern in the <em>.gitattributes</em> is quoted (<code>'*.png' filter=lfs -text</code>) or not (<code>*.png filter=lfs -text</code>), is this correct?</p>

<hr>

<p><em>git-lfs/2.10.0 (GitHub; windows amd64; go 1.12.7; git a526ba6b)</em><br>
<em>git version 2.26.2</em>  </p>

<p><em>Tested on command line and with Sourcetree.</em><br>
<em>Repository from Bitbucket</em></p>
","0","6191996","",""
"61816770","336827","2020-05-15 10:08:47","4","9091","<git><large-files><git-lfs><git-lfs-migrate>","How to migrate to git lfs","<p>I have a git repo where many files should be lfs because they are larger than 100M. </p>

<p>Looking around I was unable to find a step by step guide that explain how to migrate a real existing repo with many branches and where lfs files are within subdirectories.</p>

<p>In my case large files are spread around the repo like this:</p>

<pre><code>code/track1/file000.pkl
code/track3/dat000.bin
code/track4/pip000.pkl
code/subcode/track5/pip000.pkl
code/subcode/track5/pop000.model
</code></pre>

<p>I suppose to convert the git project into git lfs just using <code>git lfs migrate</code>:</p>

<pre><code>git lfs install
git lfs migrate import --include=""*.pkl""
git lfs migrate import --include=""*.bin""
git lfs migrate import --include=""*.model""
git commit -m ""migrating models""
</code></pre>

<p>but this does not do anything.</p>

<pre><code>nothing to commit, working tree clean
</code></pre>

<p>I want convert all the repo, I mean all the files, the history and also all existing branches.</p>

<p>In other words, <code>git lfs migrate</code> seems to be stable now but not so user frendly.</p>

<p>Running <code>git lfs track ""*.pkl""</code> seems to have an effect:</p>

<pre><code>modified:  code/track1/file000.pkl
modified:  code/track4/pip000.pkl
modified:  code/subcode/track5/pip000.pkl
</code></pre>

<p>but what to do next. I see that <code>git lfs track</code> will begin tracking a new file or an existing file that is already checked in to your repository. </p>

<p>But what about the history? I'm struggling because I don't want end up with a messed repository that I have to reimport from scratch or where have to deal with filter-branch..</p>
","7","336827","0","0"
"43142815","40834","2017-03-31 14:11:10","0","52","<git><git-lfs>","Does the --git argument in git-lfs-migrate tie the destination repo to that argument somehow?","<p>The <code>--git</code> argument to <code>git-lfs-migrate</code> (and the <code>--lfs</code> argument) point to a remote server. Does that imply that the converted repository specified by <code>--destination</code> is somehow linked with this remote server?</p>

<p>As far as I can tell, no LFS objects are uploaded during the conversion, and the destination repository doesn't have the server from <code>--git</code> as a remote, so I'm not sure what the argument is even for. What's stopping me from running the conversion once with garbage as the <code>--git</code> argument, then adding a remote afterwards and pushing there?</p>

<p>I ask because I want to convert a repository to LFS then push to several git servers to test them out, and would like to avoid running the migrate step several times - if I can run it once and push to several remotes instead, that would save me some time.</p>
","0","40834","",""
"61823844","68231","2020-05-15 16:17:33","8","2214","<git><github><git-lfs><git-lfs-migrate>","git lfs migrate doesn't seem to be migrating files","<p>We've been using <code>git-lfs</code> successfully for several years. However, we've periodically added to the file types that we're including in <code>git-lfs</code>. One of the more recent file types that we've moved over to <code>git-lfs</code> is all of our <code>*.csv</code> files.</p>

<p>The problem is that we've got several very large <code>*.csv</code> files in our history that didn't get caught in the initial migration, and I need to move <em>those</em> files to <code>git-lfs</code> as well. (We're moving from BitBucket to GitHub, and GitHub has stricter rules on the maximum size of files it will allow, so I need to make sure all the old large files are on <code>git-lfs</code> as well.)</p>

<p>The obvious way to do it is something like this:</p>

<p><code>git lfs migrate import --everything --include=""*.csv""</code></p>

<p>And when I run that command, it appears to succeed. It rewrites history, and the output looks something like this:</p>

<pre><code>PS E:\source\swyfft_web_ken&gt; git lfs migrate import --everything --include=""*.csv""
migrate: Sorting commits: ..., done.
migrate: Rewriting commits: 100% (131623/131623), done.
  development                                   1b042eeebfb346af8f7e90d1f6c7b6abfc64d014 -&gt; 1b042eeebfb346af8f7e90d1f6c7
b6abfc64d014
  feature/ks/20200205_ImsWebServicesV2          e2b5b267d5215ef48d5ef4e3f0924613c6076cd7 -&gt; e2b5b267d5215ef48d5ef4e3f092
4613c6076cd7
  master                                        2029338210697c795a536faa9dd4c141c6edd6c2 -&gt; 2029338210697c795a536faa9dd4
c141c6edd6c2
  1.0                                           752143ee1b87020e9b285886b3986703d6c74a38 -&gt; 752143ee1b87020e9b285886b398
6703d6c74a38
  1.1                                           5fefda3de45651107218a953e789ea5121002756 -&gt; 5fefda3de45651107218a953e789
ea5121002756
  1.2                                           30f87f08e672d10de0029985ad5acc1bf5a82457 -&gt; 30f87f08e672d10de0029985ad5a
cc1bf5a82457
  1.2.1                                         a4206c0ffb957401012385306157b7e1d14332bb -&gt; a4206c0ffb957401012385306157
b7e1d14332bb
  1.3                                           dc5d6c88a9c64150a33c60963f9ba8b03b1399de -&gt; dc5d6c88a9c64150a33c60963f9b
a8b03b1399de
  1.3.1                                         e3306023d55c5195ed12936a0b7cafb752d7d1f8 -&gt; e3306023d55c5195ed12936a0b7c
</code></pre>

<p>(lots more like that)</p>

<p>But then when I try to run <code>git lfs migrate info --everything</code>, it doesn't appear that those files have actually been touched.</p>

<pre><code>PS E:\source\swyfft_web_ken&gt; git lfs migrate info --everything
migrate: Sorting commits: ..., done.
migrate: Examining commits: 100% (131623/131623), done.
*.cs            3.1 GB  142030/142038 files(s)  100%
*.csv           1.3 GB      2102/2102 files(s)  100%
*.csproj        1.1 GB    15634/15634 files(s)  100%
*.exe           224 MB          43/43 files(s)  100%
*.ts            150 MB      6133/6134 files(s)  100%
</code></pre>

<p>And when I try to push the rewritten repository to GitHub, it still complains about there being *.csv files that are too large for GitHub to accept. (Can't get the exact error message, as the error takes about 8 hours to show up, and the last time I got it has scrolled off my screen.)</p>

<p>I've also tried pruning and GC'ing the repo afterwards, just in case that was interefering, but it doesn't seem to have made any difference.</p>

<pre><code>PS E:\source\swyfft_web_ken&gt; git reflog expire --expire-unreachable=now --all

PS E:\source\swyfft_web_ken&gt; git gc --prune=now
Enumerating objects: 709351, done.
Counting objects: 100% (709351/709351), done.
Delta compression using up to 4 threads
Compressing objects: 100% (210504/210504), done.
Writing objects: 100% (709351/709351), done.
Total 709351 (delta 579094), reused 583494 (delta 492112)
Removing duplicate objects: 100% (256/256), done.
Checking connectivity: 709351, done.
Expanding reachable commits in commit graph: 131646, done.

PS E:\source\swyfft_web_ken&gt; git lfs migrate info --everything --include=""*.csv""
migrate: Sorting commits: ..., done.
migrate: Examining commits: 100% (131623/131623), done.
*.csv   1.3 GB  2102/2102 files(s)      100%
</code></pre>

<p>Am I misunderstanding something about how <code>git lfs migrate</code> is supposed to work? Or am I doing something wrong?</p>
","8","68231","0","0"
"61826629","2603186","2020-05-15 19:07:03","3","583","<git><git-lfs>","I'm trying to track all files except a certain type in git LFS","<p>I want to use git LFS for all file types except "".m"" files. I've written this in .gitattributes:</p>

<pre><code># Track everything
* filter=lfs diff=lfs merge=lfs -text

#Except
.gitignore -filter=lfs -diff=lfs -merge=lfs -text
.gitattributes -filter=lfs -diff=lfs -merge=lfs -text
*.m -filter=lfs -diff=lfs -merge=lfs -text
</code></pre>

<p>This results in "".m"" files being tracked. Where is my mistake?</p>

<p>Note that apart from .gitignore and .gitattributes, everything else is in folders and subfolders.</p>

<p>Thank you</p>
","8","2603186","0","0"
"43377619","497208","2017-04-12 19:01:17","19","13191","<git><git-lfs>","Reset git lfs repository to pointers","<p>I have a <a href=""https://git-lfs.github.com"" rel=""nofollow noreferrer"">git LFS</a> repository checked out. All the binaries are <em>pointers</em>. I pulled the real binaries with:</p>
<pre class=""lang-bash prettyprint-override""><code>git lfs pull --include some/binaries
</code></pre>
<p>I used the binaries and now I would like to &quot;unpull&quot; the binaries and convert them to the pointers again, so I can reclaim the disk space.</p>
<p>I didn't find any suitable command to do that, and mangling with <code>.git/lfs/objects</code> plus hard resets make me nervous.</p>
<p>Question: How to convert the tracked binaries back to pointers?</p>
<p>Edit:</p>
<ul>
<li>I just found an open feature request for that:
<a href=""https://github.com/git-lfs/git-lfs/issues/1189"" rel=""nofollow noreferrer"">&quot;Add command to undo fetch and checkout&quot;</a></li>
</ul>
","1","497208","0","0"
"62060941","832560","2020-05-28 09:06:19","5","1716","<git><git-lfs>","Broken git repo after git lfs migrate","<p>Improper use of git lfs migrate --everything somehow generated a .gitattributes file with every known file type.  This has basically nuked our project, as all files of every type now look something like this:</p>

<pre><code>    version https://git-lfs.github.com/spec/v1
    oid sha256:f6d1237f5b00a49b32cca659d9764fc16cf012ea887c3007bf9a2120d7e9fef4
    size 792
</code></pre>

<p>..throughout the entire repo history.  The containing directory is still roughly the same filesize which gives me hope that there is a way of recovering this, but I haven't been able to work it out myself.</p>

<p>Due to unusual circumstances this repo was not yet on github - there's a copy of the repo that we can restore to if needed but would mean losing a couple of days work. </p>

<p>Is there any way to undo the lfs command?</p>

<p>This is how the .gitattributes file ended up being generated somehow:</p>

<pre><code>*.wav filter=lfs diff=lfs merge=lfs -text
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.rar filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.collabignore filter=lfs diff=lfs merge=lfs -text
*.gitignore filter=lfs diff=lfs merge=lfs -text
*.xml filter=lfs diff=lfs merge=lfs -text
*.iml filter=lfs diff=lfs merge=lfs -text
*.meta filter=lfs diff=lfs merge=lfs -text
*.mat filter=lfs diff=lfs merge=lfs -text
*.fbx filter=lfs diff=lfs merge=lfs -text
*.prefab filter=lfs diff=lfs merge=lfs -text
*.shader filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.FBX filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text
*.txt filter=lfs diff=lfs merge=lfs -text
*.obj filter=lfs diff=lfs merge=lfs -text
*.cs filter=lfs diff=lfs merge=lfs -text
*.pdf filter=lfs diff=lfs merge=lfs -text
*.dae filter=lfs diff=lfs merge=lfs -text
*.dll filter=lfs diff=lfs merge=lfs -text
*.mixer filter=lfs diff=lfs merge=lfs -text
*.compute filter=lfs diff=lfs merge=lfs -text
*.asset filter=lfs diff=lfs merge=lfs -text
*.cginc filter=lfs diff=lfs merge=lfs -text
*.unity filter=lfs diff=lfs merge=lfs -text
*.controller filter=lfs diff=lfs merge=lfs -text
*.mask filter=lfs diff=lfs merge=lfs -text
*.blend filter=lfs diff=lfs merge=lfs -text
*.blend1 filter=lfs diff=lfs merge=lfs -text
*.anim filter=lfs diff=lfs merge=lfs -text
*.exr filter=lfs diff=lfs merge=lfs -text
*.renderTexture filter=lfs diff=lfs merge=lfs -text
*.json filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
*.TTF filter=lfs diff=lfs merge=lfs -text
*.otf filter=lfs diff=lfs merge=lfs -text
*.asd filter=lfs diff=lfs merge=lfs -text
*.PSD filter=lfs diff=lfs merge=lfs -text
*.sfk filter=lfs diff=lfs merge=lfs -text
*.PNG filter=lfs diff=lfs merge=lfs -text
*.terrainlayer filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text
*.inputactions filter=lfs diff=lfs merge=lfs -text
*.lighting filter=lfs diff=lfs merge=lfs -text
</code></pre>
","0","832560","0","0"
"62499270","1341001","2020-06-21 13:32:37","0","307","<python-3.x><flask><azure-devops><continuous-deployment><git-lfs>","Deploy on Azure + Flask + Python3 + GIT LFS generates 'error: external filter 'git-lfs smudge %f' failed -1'","<h1>the use case</h1>
<ul>
<li>I have built a web app using Python3 and Flask.</li>
<li>The app works locally</li>
<li>the app is stored on <a href=""https://bitbucket.org"" rel=""nofollow noreferrer"">https://bitbucket.org</a></li>
</ul>
<h2>deployment on Azure</h2>
<ul>
<li>I create a new 'app service'</li>
<li>I set the parameters: Linux machine, Python 3.8, deployed in West Europe, Azure Plan B1</li>
<li>I go to 'deployment center'
<ul>
<li>select bitbucket</li>
<li>select the repository</li>
<li>I hit 'deploy'</li>
</ul>
</li>
</ul>
<h1>The error</h1>
<p>The deployment starts by cloning the source code but the process generates an error immediately</p>
<p><strong>git-lfs</strong> seems to be the issue!</p>
<pre><code>git-lfs smudge '.vscode/launch.json': 1: git-lfs smudge '.vscode/launch.json': git-lfs: Permission denied

error: external filter 'git-lfs smudge %f' failed -1

error: external filter 'git-lfs smudge %f' failed

fatal: .vscode/launch.json: smudge filter lfs failed

/usr/bin/git checkout master --force

</code></pre>
<p><strong>What should I do to overcome the issue?</strong></p>
<p>Many thanks for the time you will invest on this issue</p>
","0","1341001","",""
"62132960","704329","2020-06-01 13:07:47","0","332","<git><git-lfs>","Disable or properly install git LFS per remote","<p>I have a git repository with two remotes configured.</p>

<p>One of those remotes is a local bare git repository, accessed over ssh (its url is <code>ssh://username@host:/home/username/repo.git</code>) and it does not support git LFS. </p>

<p>Is it possible to disable LFS for that remote and make <code>git push</code> send original content of tracked files, instead of pointers?</p>

<p>I've followed advises from these articles, but they don't help:</p>

<p><a href=""https://stackoverflow.com/questions/36626793/disable-git-lfs-for-a-remote"">Disable Git LFS for a remote</a></p>

<p><a href=""https://github.com/git-lfs/git-lfs/issues/3665#issuecomment-496549743"" rel=""nofollow noreferrer"">https://github.com/git-lfs/git-lfs/issues/3665#issuecomment-496549743</a></p>

<p>Command <code>git push</code> succeeds, but I've got pointer files instead of original content:</p>

<pre><code>$ head ./src/LARGE-file.bin
version https://git-lfs.github.com/spec/v1
oid sha256:e4790eb8aeb78cc79ace0f3d9719875d95091fe97969302d6816f64b9f0f8850
size 1430976
</code></pre>

<p>To summarize, my goal is to enable git LFS for one remote and disable it for another.</p>

<p>Alternatively, it is also possible to configure LFS for that pure ssh remote, and I'd appreciate recommendations on how to do that.</p>
","0","704329","",""
"43478345","3493731","2017-04-18 17:12:14","1","583","<git><git-lfs><git-daemon>","git daemon with LFS?","<p>Is it possible to use <code>git daemon</code> with a repository that has LFS setup on it? I have a machine that isn't able to connect to my corporate VPN (no Linux client), and I must share a repository with it to try out Linux specific changes to my code.</p>

<p>I have:</p>

<ol>
<li>Mirrored the repository locally on the Windows machine.</li>
<li>Run <code>git daemon --export-all --enable=receive-pack --reuseaddr</code> (one directory up from the mirror)</li>
<li>Added a remote for this on the Linux computer, cloned, and made some changes to files tracked with <code>git lfs track</code>.</li>
<li>When I try to <code>git push &lt;remote&gt;</code> back to the Window machine, I get errors with LFS.</li>
</ol>

<p>The errors:</p>

<pre><code> Git LFS: (0 of 1 files) 0 B / 981.15 KB                                
 Post https://192.168.2.12/repository.git/info/lfs/objects/batch: dial tcp 192.168.2.12:443: i/o timeout 
 Post https://192.168.2.12/repository.git/info/lfs/objects/batch: dial tcp 192.168.2.12:443: i/o timeout 
 error: failed to push some refs to 'git://192.168.2.12/repository.git'
</code></pre>

<p>If I make edits to files that are not tracked under LFS, that works just fine. I'm assuming this is because git is also expecting some sort of LFS server on the Windows machine. Is there some way to get LFS to work in this case, or is this just unsupported with <code>git daemon</code>?</p>
","0","3493731","",""
"43721088","39242","2017-05-01 14:50:18","1","1141","<eclipse><git><egit><git-lfs>","Why is egit with LFS showing ""The system cannot find the file""?","<p>Using Eclipse with egit. Recently added LFS. Any push to remote gives an error. </p>

<p>As a simple test case: I cloned a remote repository, then, without changing any files, pushed to a new branch on remote, and got this:</p>

<pre><code>Can't connect to any URI... (Rejected by ""pre-push"" hook. 
open d:\dev\workspace\src\com\freightos\TestExcel.xlsx:
The system cannot find  the file specified.
</code></pre>

<p>Note that:</p>

<ul>
<li><p>In the command line, pushing works</p></li>
<li><p>egit <em>is</em> invoking LFS. I know this because LFS pulled some large files, but also because uninstalling LFS produces a different error message.</p></li>
<li><p>The mentioned large file is indeed not present in this branch. It did exist in other branches, which were not  involved in the above git workflow.</p></li>
</ul>
","0","39242","",""
"51995203","228738","2018-08-23 22:39:41","1","1473","<git><git-lfs>","Single file version in git-lfs","<p>Is there a way to setup git-lfs to store only 1 version of an LFS tracked file? New versions of the file should replace the old. In other works, an old commit should reference the latest (only) version of the LFS files.</p>

<p>I want to do this to keep the repository size down and still be able to sync the latest binaries among all clones. I don't have any need to track changes to files that are put into LFS.</p>

<p>For example, if elephant.bin is modified I want the original elephant.bin deleted from .git/lfs/objects (and anywhere else it might be stored) before adding the new elephant.bin.</p>

<p>I am contemplating doing this with symlinks to the binaries or on trying to figure out git-annex. As those should achieve my goal. Yet, if there's a way I can avoid managing symlinks and stick to using popular git-lfs, that's preferred.</p>

<p>The closest related question I found was <a href=""https://stackoverflow.com/questions/42604978/multiple-file-versions-in-git-lfs"">Multiple file versions in git-lfs</a></p>
","2","228738","",""
"43743717","1916754","2017-05-02 17:15:56","8","2568","<git-lfs>","Cannot use older version of git-lfs on a repo created using latest version","<p>I have a local repo with a bunch of git-lfs files tracked.  It was creted using git-lfs version 2.1.0.</p>

<p>If I try to do a checkout on that repo using git-lfs version 1.5.6, I get the error: </p>

<pre><code>    Error: unknown command ""post-checkout"" for ""git-lfs""
    Run 'git-lfs --help' for usage.
</code></pre>

<p>I get the same error after running <code>git-lfs install</code> in the repo.</p>

<p>Is git-lfs not backwards-compatible?</p>
","2","1916754","",""
"52063592","5136799","2018-08-28 17:41:38","0","449","<git><github><svn><git-lfs>","Migrate an svn repo with large files to a new git repo?","<p>I have converted my svn repo, with files larger than 100 mb, into a git repo with git-svn. Everything went swimmingly. Then I attempted to upload the repo to GitHub, and I got an error that a file was too large. I followed the link to <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer""><code>git lfs</code></a>, I set it up without a hitch. I assigned the file extensions of the files that were too large to the .gitattributes section, and during my upload, everything seemed to work well. git lfs uploaded the large files, and then git uploaded the rest - but there was still the same error from the same file! So I looked for this file, and I couldn't find it within the repo. I think it must have been made in an earlier commit, and later deleted. I suppose I could delete the tracked, large file, but that would be editing the history. Is there any way for lfs to track files in previous commits when uploading a repo? Or is something else going on? Here's my console output:</p>

<pre><code>➜  automated_design git:(master) git push -u origin master
Uploading LFS objects: 100% (134/134), 216 MB | 6.0 MB/s, done                  
Counting objects: 44692, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (7171/7171), done.
Writing objects: 100% (44692/44692), 1.75 GiB | 4.79 MiB/s, done.
Total 44692 (delta 37828), reused 44158 (delta 37460)
remote: Resolving deltas: 100% (37828/37828), done.
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: 247de6add2c0943c33f0d5b1e57c8155
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File Final Designs/ADT Designs/EtFlocSedFi/EtFlocSedFi Spanish 2.rtf is 101.13 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/AguaClara/mathcad.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/AguaClara/mathcad.git'
➜  automated_design git:(master) cat .gitattributes 
*.psd filter=lfs diff=lfs merge=lfs -text
*.docx filter=lfs diff=lfs merge=lfs -text
*.dwg filter=lfs diff=lfs merge=lfs -text
*.rtf filter=lfs diff=lfs merge=lfs -text
➜  automated_design git:(master) 
</code></pre>

<p>Any help is much appreciated!!</p>
","0","5136799","",""
"62649230","3933496","2020-06-30 02:01:41","2","1029","<git><github><git-lfs>","Unable to git push even after git lfs install","<p>Scenario 1:</p>
<ul>
<li>Tried to push file size &gt; 100MB in github</li>
<li>File &gt; 100MB not allowed to push.Valid error. Agreed</li>
<li>ok,use git lfs</li>
<li>Still same error</li>
<li>whats wrong here</li>
<li>Below pics related to Scenario 1</li>
</ul>
<p>Scenario 2:</p>
<ul>
<li>Cloned a new repo</li>
<li>Created a new file &gt; 100 MB</li>
<li>Not yet pushed. I know it will be a problem</li>
<li>do the git lfs install&amp;track of big file and do git add&amp;commit</li>
<li>now if i git push, success, all ok . No issues. I can see the big file in github</li>
<li>check it in <a href=""https://github.com/sivakumar-j-secondary-ac/scenario-2"" rel=""nofollow noreferrer"">https://github.com/sivakumar-j-secondary-ac/scenario-2</a></li>
</ul>
<blockquote>
<p>so What's wrong in the &quot;Scenario 1&quot;, if git lfs is working in scenario-2</p>
</blockquote>
<p><a href=""https://i.stack.imgur.com/iay6o.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iay6o.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/dWWHG.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dWWHG.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/wePSV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wePSV.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/dWWHG.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dWWHG.png"" alt=""enter image description here"" /></a></p>
","3","3933496","0","0"
"36071369","3096687","2016-03-17 20:46:47","6","165","<git><github><gollum-wiki><git-lfs>","Is it possible to embed a github git-lfs image in a github wiki for a private repo+wiki?","<p>Github allows you to <a href=""https://help.github.com/articles/adding-images-to-wikis/"" rel=""noreferrer"">embed images</a> in a wiki page. </p>

<p>The problem seems to be that for private repos, the right to access the image is determined by a transient token appended to the URL like this:</p>

<pre><code>https://media.githubusercontent.com/media/XYZ/MyProject/master/WikiMedia/Foo.png?token=XXXXXXXXXX-YYYYYYYYYYYYYYY-YYYYYYYYYYYYYYY
</code></pre>

<p>This URL work but only transiently; is there a more stable way?</p>
","0","3096687","",""
"52162770","1531124","2018-09-04 09:10:13","1","315","<git><git-lfs>","git-lfs gives ""Error: unknown command “post-merge” for “git-lfs”""?","<p>When doing a git pull or fetch/rebase on our server, git prints this <em>warning</em>:</p>

<pre><code>Error: unknown command “post-merge” for “git-lfs” 
</code></pre>

<p>Interestingly enough, things still work (so git-lfs does its job and fetches large files as expected). </p>

<p>Some online resources suggest that the .git/hooks/commit/post-merge file is at fault, but I checked: all hook files are the same when comparing them to other repos (on my local machine).</p>

<p>So how could this be resolved?</p>
","0","1531124","",""
"36109307","2228270","2016-03-20 01:33:08","4","4343","<git><unity-game-engine><large-files><git-lfs>","Use unity with git LFS","<p>I'm trying to use git lfs with my unity project, but since i'm quite new to git , i'm not sure how should i make lfs track the files. </p>

<p>Here is a link of git ignore files i found, i suppose i should make git lfs track everything in gitignore? (<a href=""https://github.com/github/gitignore/blob/master/Unity.gitignore"" rel=""nofollow"">https://github.com/github/gitignore/blob/master/Unity.gitignore</a>)</p>

<p>But should i first git-add all the files i have in that project and then use git-lfs-track to add the files in that link to lfs?  I'm extremely new to git, so if there's someone could provide me a step by step guide would be most appreciated. </p>

<p>Cheers</p>
","0","2228270","",""
"36115382","744423","2016-03-20 15:03:47","5","736","<git><bitbucket><git-lfs>","Bitbucket - push repo with git lfs","<p>When I'm trying to push my files into bitbucket repo (some of them tracked by git LFS, pattern is <code>*.uasset</code>), I'm getting this error (I've changed actual credentials with <code>---</code>):</p>

<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false push -v --tags --set-upstream origin master:master
Pushing to https://---@bitbucket.org/---/---.git

Git LFS: (0 of 241 files) 0 B / 372.25 MB                                      

Post https://bitbucket.org/account/signin/?next=/account/signin/%3Fnext%3D/account/signin/%253Fnext%253D/---/---.git/info/lfs/objects/batch: stopped after 3 redirects
Post https://bitbucket.org/account/signin/?next=/account/signin/%3Fnext%3D/account/signin/%253Fnext%253D/---/---.git/info/lfs/objects/batch: stopped after 3 redirects
Post https://bitbucket.org/account/signin/?next=/account/signin/%3Fnext%3D/account/signin/%253Fnext%253D/---/---.git/info/lfs/objects/batch: stopped after 3 redirects

error: failed to push some refs to 'https://---@bitbucket.org/---/---.git'

Completed with errors, see above.
</code></pre>

<p>I don't know what's wrong. Can you advice me how to solve this error?</p>
","2","744423","0","0"
"44481198","8143696","2017-06-11 06:58:02","7","5108","<linux><git><github><git-add><git-lfs>","Delete git LFS files not in repo","<p>I uploaded some files to git LFS and I went over my storage limit. Now, the files I uploaded don't show up in the repo, but I'm still over my data limit and I can't upload anything.  </p>
","0","8143696","",""
"36254156","151471","2016-03-28 00:12:35","6","3731","<xcode><git><git-lfs>","Xcode and git-lfs","<p>I installed <code>git-lfs</code> using <code>homebrew</code>, and it works fine from the command line. I can still add text files in Xcode as well, but whenever I try in Xcode to add a file which should be tracked by <code>git-lfs</code>, there is no effect (the file stays ""?"" in Xcode's file list, and the command line confirms that the file was not, in fact, added). After some research, I tried adding <code>~/Library/LaunchAgents/my.startup.plist</code> to <code>setenv PATH /usr/local/bin</code> but it had no effect.</p>

<p>How can I get Xcode to play nice with <code>git-lfs</code>?</p>
","0","151471","",""
"63157515","1172496","2020-07-29 15:51:43","2","702","<git><bitbucket><git-lfs>","Trying to sync zip file using git LFS, says I'm out of space","<p>I have a zip file that's about 600MB. I have the file setup to track using LFS. The zip changes frequently so I need to update it in the remote repo often.</p>
<p>I have no problem pushing the file to LFS if my LFS storage is empty. However, when I try to push it if the file already exists in LFS, I get an error: &quot;Your LFS push failed because you're out of file storage&quot;. The updated file is still not more than 600MB. I have a 1 GB limit with Bitbucket.</p>
<p>My assumption was that the file would just be updated on remote with each push if it has changed. However, that apparently is not true. In order to get the file pushed to remote, I have to manually login to Bitbucket and delete the file from LFS so I can push the updated version.</p>
<p>I'm assuming I am not doing something correctly and shouldn't need to manually delete my LFS to push changes to remote. I apparently am gravely misunderstanding how to use git LFS.</p>
<p>My apologies if this topic already exists. I swear I tried looking for it.</p>
","1","1172496","0","0"
"62546611","11886878","2020-06-24 02:23:58","0","986","<linux><git><github><embedded-linux><git-lfs>","git-lfs INSTALLATION ERROR : Syntax error: end of file unexpected (expecting "")"")","<p>I am working on Jetson nano platform <code>ARMv8 Processor rev 1 (v8l) × 4</code>.
I downloaded and extracted the binary from  <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">https://git-lfs.github.com/</a></p>
<pre><code>git-lfs-linux-amd64-v2.11.0.tar.gz
</code></pre>
<p>Trying to install from the install.sh script provided in the download package on Debian/sid:</p>
<pre><code>sudo bash -x install.sh 
</code></pre>
<p>I get the following  and the error:</p>
<pre><code>+ set -eu
+ prefix=/usr/local
+ '[' '' '!=' '' ']'
+ '[' '' '!=' '' ']'
+ mkdir -p /usr/local/bin
+ rm -rf /usr/local/bin/git-lfs
++ dirname install.sh
+ pushd .
+ for g in git*
+ install git-lfs /usr/local/bin/git-lfs
+ popd
+ PATH+=:/usr/local/bin
+ git lfs install
/usr/local/bin/git-lfs: 1: /usr/local/bin/git-lfs: Syntax error: end of file unexpected (expecting &quot;)&quot;)
</code></pre>
<p>The git version<code>git version 2.17.1</code></p>
<pre><code>$ git lfs help
/usr/local/bin/git-lfs: 1: /usr/local/bin/git-lfs: Syntax error: end of file unexpected (expecting &quot;)&quot;)
</code></pre>
","0","11886878","",""
"44107811","513451","2017-05-22 08:12:05","0","326","<git><bitbucket><git-lfs>","git-lfs-migrate with Bitbucket gives ""/objects/batch 501 (Not Implemented)""","<p>I'm trying to migrate our Git repo to LFS like this:</p>

<pre><code>java -jar git-lfs-migrate.jar -s our-repo.git -d our-repo-small.git -l https://user:password@bitbucket.example.com/bitbucket/scm/example/our-repo.git ""*.jar""
</code></pre>

<p>LFS is enabled for the repository, but I'm getting:</p>

<pre><code>[main] INFO git.lfs.migrate.Main - LFS server: Batch API request exception
ru.bozaro.gitlfs.client.exceptions.RequestException: https://user:password@bitbucket.example.com/bitbucket/scm/example/our-repo.git/objects/batch - 501 (Not Implemented)
        at ru.bozaro.gitlfs.client.Client.doRequest(Client.java:315)
        at ru.bozaro.gitlfs.client.Client.lambda$postBatch$7(Client.java:118)
        at ru.bozaro.gitlfs.client.Client.doWork(Client.java:252)
        at ru.bozaro.gitlfs.client.Client.postBatch(Client.java:118)
        at git.lfs.migrate.Main.checkLfsAuthenticate(Main.java:113)
        at git.lfs.migrate.Main.main(Main.java:66)
[main] ERROR git.lfs.migrate.Main - LFS server: Invalid base URL
</code></pre>

<p>We're on Bitbucket v4.6.2 but I couldn't find anythig related in the Bitbucket changelog since than.</p>

<p>Am I doing something wrong? Or does git-lfs-migrate use a feature that's not yet implemented by Bitbucket? If so, is there any workaround? I assume I'm not the first one doing this :-)</p>
","0","513451","0","0"
"44135278","39242","2017-05-23 12:46:47","0","1260","<git><git-lfs>","Why can't git lfs find files?","<p>Git LFS against Bitbucket has been working OK, but just now I got ""Object does not exist."" </p>

<p>What is happening? How do I resolve it?</p>

<pre><code>&gt; git lfs fetch --all
Scanning for all objects ever referenced...
* 780 objects found
Fetching objects...
Git LFS: (0 of 0 files, 37 skipped) 0 B / 0 B, 37.00 KB skipped               
[8a0b9504fbb28ce2679079b925eb83a807839f89189754d11c9f5bdb68bdccd0] Object does not exist on the server: [404] Object does not exist on the server
[90a4eb135056cf62603145742fc418f744c7902a86f27494956e53d9e44a9a8f] Object does not exist on the server: [404] Object does not exist on the server
....
</code></pre>
","0","39242","",""
"44746090","3548798","2017-06-25 11:52:29","4","2356","<amazon-web-services><amazon-s3><git-lfs>","How do I configure git-lfs to use an Amazon S3 backend?","<p>I'm trying to set up Git LFS to work with an S3 bucket as a backend. I've been trying to follow instructions at <a href=""https://github.com/meltingice/git-lfs-s3"" rel=""nofollow noreferrer"">meltingice/git-lfs-s3</a>, but I'm having trouble figuring out where to put my AWS credentials and url. At the moment, I have these in my root Git directory:</p>

<p><strong>.lfsconfig</strong></p>

<pre><code>[lfs]
    url = https://my-aws-folder.amazonaws.com
</code></pre>

<p><strong>.config</strong></p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true 
    symlinks = false 
    ignorecase = true 
[remote ""origin""] 
    url = https://github.com/my-user-name/test_repo.git 
    fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p><strong>.env</strong></p>

<pre><code>AWS_REGION=2 
AWS_ACCESS_KEY_ID=ABC1234 
AWS_SECRET_ACCESS_KEY=blahblahblah
S3_BUCKET=my-aws-folder 
LFS_SERVER_URL=https://my-aws-folder.s3.amazonaws.com
</code></pre>
","1","3548798","",""
"36374219","3671272","2016-04-02 14:01:00","5","2969","<git><gitlab><git-lfs>","Clone gitlab project that uses git lfs without giving password all the time","<p>I decided to try git lfs on gitlab. I noticed that it doesn't work with ssh so I decided to use https for it. Push works just fine but when I tried to clone my project it asked me for a username and a password for <strong>every</strong> file.</p>

<p>That's kind of annoying. Is there any workaround to it?</p>

<hr>

<h2>EDIT 2018</h2>

<p>This problem persist, where the real solution?  There are a simple and direct recipe for it?</p>

<p>The links <a href=""https://git-scm.com/docs/gitcredentials"" rel=""nofollow noreferrer"">https://git-scm.com/docs/gitcredentials</a> and <a href=""https://github.com/git-lfs/git-lfs/wiki/Tutorial"" rel=""nofollow noreferrer"">git-lfs/wiki/Tutorial</a> have perhaps something, but no objective solution.</p>

<p>Situation described by my <code>git lfs env</code>,</p>

<pre><code>git-lfs/2.4.0 (GitHub; linux amd64; go 1.8.3)
git version 2.7.4

LocalWorkingDir=
LocalGitDir=
LocalGitStorageDir=
LocalMediaDir=lfs/objects
LocalReferenceDir=
TempDir=lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic
UploadTransfers=basic
git config filter.lfs.process = ""git-lfs filter-process""
git config filter.lfs.smudge = ""git-lfs smudge -- %f""
git config filter.lfs.clean = ""git-lfs clean -- %f""
</code></pre>

<p>and when I do <code>git clone https://github.com/myPrivate/project1</code>  the problem clonning process is <strong>not complete</strong> (bug), and was  <strong>giving usernae and password all the time</strong>...</p>

<p>Problems also when try to do credentials (see <a href=""https://github.com/git-lfs/git-lfs/issues/2223"" rel=""nofollow noreferrer"">issue #2223</a>, etc.)</p>

<hr>

<p>Trying report:</p>

<ul>
<li><p><code>git config credential.helper</code> outputs nothing, empty message. </p></li>
<li><p><code>git config -f .lfsconfig lfs.url  https://github.com/myPrivate/MyProj1</code> accepts anything... So, is the browser URL or <code>.git</code> URL?<br/>After it the command <code>git add .lfsconfig</code> say <em>""fatal: Not a git repository (or any of the parent directories): .git""</em> in both cases (URL with or without .git)</p></li>
<li><p><code>git config credential.https://github.com/myPrivate/MyProj1 myusername</code> say <em>""fatal: not in a git directory""</em>, but of course, I need to clone first (!)..</p></li>
<li><p>...</p></li>
</ul>
","0","3671272","0","0"
"36376136","590335","2016-04-02 16:55:45","23","17774","<git><git-lfs>","Is it possible for git lfs pull to ignore some files / folders?","<p>Short question: 
Is it possible to configure git such that regular git pull will ignore some files?</p>

<p>Problem description:
I have a repository that includes some large data files (stored using git lfs)</p>

<p>While some developers who work on the data files need updated versions of these files, other developers need the files, but not necessarily the most recent version.</p>

<p>They do need updated code versions. And the data files are in the same repository as the code.</p>

<p>I want to set up for way that a regular pull wouldn't update the data files.</p>

<ul>
<li>I know it's possible to do a pull without downloading files from LFS, but this will replace the files with pointer files, and I need the previous version of the files. </li>
</ul>
","0","590335","0","0"
"45995379","790879","2017-09-01 07:36:58","0","364","<git><bitbucket><git-lfs>","git-lfs speeding up checkout","<p>I want to work with git-lfs. So I cloned my current repository, created a branch and pushed some files:</p>

<pre><code>git clone &lt;url&gt;
git checkout -b lfs-test
git lfs install
git lfs track ""*.log""
mkdir data
mkfile -n 1g data/test.log
git add . &amp;&amp; git commit -m ""test"" &amp;&amp; git push --set-upstream origin test &amp;&amp; git push
</code></pre>

<p>Works so far but when I switch from master to lfs-test branch it works different than expected because <a href=""https://www.atlassian.com/git/tutorials/git-lfs#speeding-up-pulls"" rel=""nofollow noreferrer"">Speeding up pulls</a> has no effect on switching branches.</p>

<p>What I expect: download git lfs files as a batch (like described <a href=""https://www.atlassian.com/git/tutorials/git-lfs#speeding-up-pulls"" rel=""nofollow noreferrer"">here</a>)</p>

<ul>
<li>macos sierra</li>
<li>git-lfs/2.2.1 (GitHub; darwin amd64; go 1.8.3)</li>
<li>git version 2.14.1</li>
<li>newest Bitbucket LFS Media Adapter</li>
</ul>
","4","790879","",""
"52599022","134702","2018-10-01 21:18:48","0","187","<git><git-lfs>","How to move a file from regular git tracking to large file server?","<p>I have a file that exceeds the upper limit of 100MB for GitHub enterprise.</p>

<p>It was added to the repository before lfs support was installed.</p>

<p>Then I added it to git lfs and told it to track. </p>

<pre><code>matt@ORAC:~/dev$ git lfs ls-files
83274a0d67 * extern/cudnn/bin/libcudnn.so.7.2.1
</code></pre>

<p>However, when pushing I still get this error.  </p>

<pre><code>remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: File extern/cudnn/bin/libcudnn.so.7.2.1 is 274.67 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
</code></pre>

<p>How do I fix it?</p>
","0","134702","",""
"36585393","2044126","2016-04-12 22:42:27","16","3440","<git><git-lfs>","git lfs ls-files : Asterisk (*) vs. Dash (-)","<p>This is my listing of git lfs managed files</p>

<p><code>$ git lfs ls-files</code></p>

<pre><code>b1d5dd29dd - file1.zip
27d3073f43 - file2.zip
fb4e699c05 * file3.zip
</code></pre>

<p><strong>Why does one file have an asterisk/star (*) beside it, while the others have a dash (-) beside them?</strong></p>

<p>The git lfs wiki seems to indicates that (*) is expected.</p>

<p><a href=""https://github.com/github/git-lfs/wiki/Tutorial"" rel=""noreferrer"">https://github.com/github/git-lfs/wiki/Tutorial</a></p>

<p><code>git lfs status</code> shows all clear (nothing to be committed/pushed/staged).</p>
","0","2044126","0","0"
"70202031","12047095","2021-12-02 15:18:43","0","118","<git><file-permissions><checkout><git-lfs><git-untracked>","Why does git checkout change mode of untracked files to read only?","<p>And more importantly, how can this be prevented?</p>
<pre><code>echo tracked &gt; tracked.txt
git add tracked.txt
git commit tracked.txt -m &quot;tracked&quot;
echo untracked &gt; untracked.txt
ls -l  
</code></pre>
<p>total 2<br />
-r--r--r-- 1 My Name 1049089  8 Dec  2 09:17 tracked.txt<br />
-rw-r--r-- 1 My Name 1049089 10 Dec  2 09:18 untracked.txt</p>
<pre><code>git checkout master -- tracked.txt
ls -l
</code></pre>
<p>total 2<br />
-r--r--r-- 1 My Name 1049089  8 Dec  2 09:17 tracked.txt<br />
-r--r--r-- 1 My Name 1049089 10 Dec  2 09:18 untracked.txt</p>
<pre><code>config
    [core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true

.gitattributes
    * filter=lfs diff=lfs merge=lfs -text lockable
    .gitattributes -filter -diff -merge -text
    .gitattributes export-ignore
    README.md export-ignore
</code></pre>
","9","12047095","",""
"70305281","8023143","2021-12-10 13:30:05","2","470","<windows><git><git-lfs>","git lfs handling of duplicated files in a repo using pointer files","<p>I have to duplicate a file (same name, same content) that is handled by git lfs twice inside a repo in different directories for our 3rd party software to work properly. This is a limitation to the 3rd party software that I have to live with.</p>
<ul>
<li>./directory1/large_file.crg</li>
<li>./directory2/large_file.crg</li>
</ul>
<p>git lfs intelligently identifies that they are the same file, and only downloads it once to a local repo. The other files simply get a pointer to the location of the real file. This is causing problems with the 3rd party software as it can not read the pointer.</p>
<p>Is there any way I can force Git LFS to duplicate the file instead of point to it?
Or can someone please point to me where this behavior is documented so I can explain it to colleagues?</p>
","9","8023143","",""
"37564298","139578","2016-06-01 09:13:48","5","1461","<git><github><git-lfs><git-bundle>","How to archive a git repository which uses LFS?","<p>I'm looking to archive a git repository to a regular file server for a client.</p>

<p>Previously I've used <code>git bundle create [path] --all</code>
to do this and it's worked well.</p>

<p>However this repository is using Git LFS, and the LFS files aren't included in the bundle created using the above command.</p>

<ol>
<li>How can I easily export all commits, branches and history for the
repository, including LFS files?</li>
<li>Is this possible with LFS?</li>
</ol>
","1","139578","0","0"
"37576604","943332","2016-06-01 18:51:06","8","4271","<git><git-lfs>","Find and remove too large of files to push in git lfs","<p>I have a commit, and I am trying to push it.  I get this response</p>

<pre><code>Git LFS: (0 of 9 files, 9 skipped) 0 B / 3.24 GB, 3.24 GB skipped
[422] Size must be less than 2147483648
[0ee4f2bc4d42d98ea0e7b5aeba2762c7482f3bcf00739d40b922babe8061820b] Size must be less than 2147483648
error: failed to push some refs to ...
</code></pre>

<p>What files are these? </p>

<p>How can I find and remove them from my commit so I can push all these files up?</p>
","1","943332","",""
"37615159","128511","2016-06-03 13:03:29","7","5426","<git><git-lfs>","how to rebase with git lfs?","<p>I've got a repoA with 2 lfs tracked files. I'm bringing that repo into repoB like this</p>
<pre><code>cd repoB
git fetch repoA somebranch
git checkout -b temp FETCH_HEAD
git rebase someotherbranch
</code></pre>
<p>this prints several lines of &quot;Applying: ...&quot; and then</p>
<pre><code>Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
error: Your local changes to the following files would be overwritten by merge:
    Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes
Please, commit your changes or stash them before you can merge.
Aborting
error: Failed to merge in the changes.
Patch failed at 0340 update server
The copy of the patch that failed is found in: .git/rebase-apply/patch

When you have resolved this problem, run &quot;git rebase --continue&quot;.
If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.
To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.
</code></pre>
<p>How do I fix this? <strong>NOTE: THIS FILE DOES NOT EXIST IN repoA</strong>. This issue seems to be entirely related to issues with git lfs.</p>
<p>git status showed this</p>
<pre><code>$ git status
rebase in progress; onto 5af1f30
You are currently rebasing branch 'gamepad' on '5af1f30'.
  (all conflicts fixed: run &quot;git rebase --continue&quot;)

Changes not staged for commit:
  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

    modified:   Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes
    deleted:    Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.sha256.bytes

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>Note: I tried just adding and committing the 2 files (voodoo) and then <code>git rebase --continue</code> which kept going until the next time the file was modified in the history at which point it got a similar error. I did the same thing and it finally finished. But then when I tried to rebase that onto another branch I got</p>
<pre><code>Downloading Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes (7.48 MB)
Error downloading object: Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes (4743b094eeab821140773213ebabdaa81c9ac2eb1be1108e70e8d51ae52873dd)

Errors logged to /Users/gregg/src/hft-unity3d/.git/lfs/objects/logs/20160603T213456.110362284.log
Use `git lfs logs last` to view the log.
error: external filter git-lfs smudge -- %f failed 2
error: external filter git-lfs smudge -- %f failed
fatal: Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes: smudge filter lfs failed
Could not apply dc378b5d715103e9af0ee805ff2a3be1159739aa... add lfs support
</code></pre>
<p>Which kind of suggests I have no clue how to use git lfs correctly.</p>
<h2>update 1</h2>
<p>So it turns out you have to install git lfs in every repo. This is not at all clear from <a href=""https://git-lfs.github.com/"" rel=""noreferrer"">the docs</a> which say</p>
<blockquote>
<p>You only have to set up Git LFS once.</p>
<pre><code> git lfs install
</code></pre>
</blockquote>
<p>It turns out it's once per repo not actually <em>once</em>.</p>
<p>Then, reading though <a href=""https://github.com/github/git-lfs/issues/"" rel=""noreferrer"">the issues</a> it needs to know where to get the remotely stored files. It does this based on whatever remote branch is being tracked so, starting over</p>
<pre><code>git clone git@github.com/me/repoA
cd repoA
git lfs install
git remote add repoB git@github.com/me/repoB
git fetch repoB
git checkout -b temp repoB/somebranch
</code></pre>
<p>This starts to checkout repoB/somebranch into a temp but fails with</p>
<pre><code>Downloading Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes (7.48 MB)
Error downloading object: Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes (f8c42a7c55f610768ce50ff93d09fc63fa897de867290dafee2e84d64e10de4e)

Errors logged to /Users/gregg/temp/delme-hft-unity3d/.git/lfs/objects/logs/20160603T231351.670335751.log
Use `git lfs logs last` to view the log.
error: external filter git-lfs smudge -- %f failed 2
error: external filter git-lfs smudge -- %f failed
fatal: Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes: smudge filter lfs failed
</code></pre>
<p>AFAIK I'm tracking the correct branch now. That's the same branch on the same remote that the files were uploaded with.</p>
<h2>update 2</h2>
<p>Starting over with the last one but changing <code>origin</code> to point to the repoB after cloning repoA gets further</p>
<pre><code>git clone git@github.com/me/repoA
cd repoA
git lfs install
git remote remove origin
git remote add origin git@github.com/me/repoB
git fetch repoB
git checkout -b temp origin/somebranch
</code></pre>
<p>This works where as before it failed</p>
<p>But now</p>
<pre><code>git checkout -b other master
git branch --set-upstream-to origin/somebranch
git rebase master temp
</code></pre>
<p>Fails at the same place as before</p>
<pre><code>Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
error: Your local changes to the following files would be overwritten by merge:
    Assets/HappyFunTimes/HappyFunTimesCore/Server/Resources/HFTOSXServer.bytes
Please, commit your changes or stash them before you can merge.
Aborting
error: Failed to merge in the changes.
Patch failed at 0358 update server
The copy of the patch that failed is found in: .git/rebase-apply/patch

When you have resolved this problem, run &quot;git rebase --continue&quot;.
If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.
To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.
</code></pre>
","1","128511","0","0"
"70491037","14235843","2021-12-27 01:46:26","1","480","<json><github><git-lfs>","How I can use github LFS together with large size JSON server json?","<p>So recently I create json server and I run into problem when I had to use LFS because of large size JSON files. So when I include these large json files to LFS, I couldn't use these JSON files anymore due to error:</p>
<pre><code>SyntaxError: /var/www/html/largejson.json: Unexpected token v in JSON at position 0
</code></pre>
<p>So json server doesn't recognize json files anymore because it's been kind of recognized as javaScript. What solution I could have?</p>
","5","14235843","0","0"
"70498887","8868108","2021-12-27 18:01:26","1","895","<python><git><git-lfs>","How to download a single file from git-lfs using Python?","<p>I am tracking some <code>.csv</code> and <code>.json</code> file using LFS in my repo, and I wish to download a single file.</p>
<p>Because I'm running on a cluster, which I need to initial every time, I wish that the download would happen within the code.</p>
<p>When I call the post request, Im getting back</p>
<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:376e3b8d27dfa7ca45c68d28466a2327832a08a92ef252502588937eeb78c8943
size  175233
</code></pre>
<p>which from what I understood is a pointer to the data.</p>
<p>I tried to work also with python's packages such as <code>giftless_client</code> but I didn't manage to make the download method to work.</p>
<p>my lfs env looks like:</p>
<pre><code>git-lfs/3.0.2 (GitHub; darwin amd64; go 1.17.2)
git version 2.30.1 (Apple Git-130)

Endpoint=https://gecgithub01.walmart.com/usr/datasets.git/info/lfs (auth=none)
  SSH=git@gecgithub01.walmart.com:usr/datasets.git
LocalWorkingDir=/Users/usr/Dev/datasets
LocalGitDir=/Users/s0g0a87/Dev/datasets/.git
LocalGitStorageDir=/Users/usr/Dev/datasets/.git
LocalMediaDir=/Users/usr/Dev/datasets/.git/lfs/objects
LocalReferenceDirs=
TempDir=/Users/s0g0a87/Dev/datasets/.git/lfs/tmp
ConcurrentTransfers=8
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=/Users/usr/Dev/datasets/.git/lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic,lfs-standalone-file,ssh
UploadTransfers=basic,lfs-standalone-file,ssh
GIT_EXEC_PATH=/Library/Developer/CommandLineTools/usr/libexec/git-core
git config filter.lfs.process = &quot;git-lfs filter-process&quot;
git config filter.lfs.smudge = &quot;git-lfs smudge -- %f&quot;
git config filter.lfs.clean = &quot;git-lfs clean -- %f&quot;

</code></pre>
","2","8868108","",""
"37747719","656912","2016-06-10 11:58:21","0","397","<git><storage><large-files><git-lfs>","Which repos replace large git-lfs managed files with links?","<p>The feature overview on the git-lfs site says</p>

<blockquote>
  <p>Git Large File Storage (LFS) replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise.</p>
</blockquote>

<p>But this sentence confuses me and seems at odds with the ambiguous accompanying figure. </p>

<p>Are large (managed) files replaced with links on local as well as remote repos, or just on remote repo? What happens when someone clones a remote repo with git-lfs managed files?</p>
","0","656912","0","0"
"70538814","8395359","2021-12-31 03:46:23","1","1268","<git><jenkins><git-lfs><jenkins-git-plugin>","Jenkins git checkout freezing on credentials for LFS","<p>I have a MultiBranch Pipeline based off a Jenkins file which explicitly clones another repository provided by parameters. I'm seeing that the it is freezing, and timing out, after attempting to ask for credentials for <code>git-lfs</code> as part of <code>git checkout -f &lt;HASH&gt;</code> command.</p>
<p>How can I checkout a repository with credentialed git lfs access?</p>
<p>Jenkinsfile:</p>
<pre><code>stages {
    stage('Fetch Source Code') {
        steps{
            dir('repo') {
                git branch: &quot;${params.Branch}&quot;, credentialsId: 'git-creds', url: &quot;${params.RepoURL}&quot;
            }
        }
    }
</code></pre>
<p>Jenkins console:</p>
<pre><code> &gt; git init /home/jenkins/agent/workspace/&lt;PIPELINE_NAME&gt;/repo # timeout=10
Fetching upstream changes from &lt;HTTPS_PRIVATE_GITLAB_URL&gt;
 &gt; git --version # timeout=10
 &gt; git --version # 'git version 2.30.2'
using GIT_ASKPASS to set credentials Credentials to access git resources
 &gt; git fetch --tags --force --progress -- &lt;HTTPS_PRIVATE_GITLAB_URL&gt; +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
Checking out Revision HASH (refs/remotes/origin/master)
 &gt; git config remote.origin.url &lt;HTTPS_PRIVATE_GITLAB_URL&gt; # timeout=10
 &gt; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 &gt; git config core.sparsecheckout # timeout=10
 &gt; git checkout -f &lt;HASH&gt; # timeout=10
Times out 
</code></pre>
","0","8395359","",""
"70574294","15113601","2022-01-04 05:06:00","1","493","<github><version-control><git-bash><large-files><git-lfs>","Remove folder from git repository/history","<p>I accidentally commited/pushed large folders to github and am unable to push further. When trying to commit and push I receive the following message. &quot;batch response: This repository is over its data quota. Account responsible for LFS bandwidth should purchase more data packs to restore access.&quot; I would like to remove the .next <strong>folder</strong>. and I do not want to purchase more storage. I am using git bash and windows 10.</p>
<p>Attempts I have tried so far.</p>
<ol>
<li><p>Adding to <code>.gitignore</code> file and pushing.</p>
</li>
<li><p>Following the example and solution provided <a href=""https://stackoverflow.com/questions/10067848/remove-folder-and-its-contents-from-git-githubs-history"">here</a></p>
<p><em>git filter-branch --tree-filter &quot;rm -rf .next&quot; --prune-empty HEAD
git for-each-ref --format=&quot;%(refname)&quot; refs/original/ | xargs -n 1 git update-ref -d
echo .next/ &gt;&gt; .gitignore
git add .gitignore
git commit -m 'Removing .next from git history'
git gc
git push origin master --force</em></p>
</li>
<li><p>The solution provided <a href=""https://stackoverflow.com/questions/6313126/how-to-remove-a-directory-from-git-repository"">Here</a></p>
<p><em>git rm -r --cached myFolder</em></p>
</li>
<li><p>The solution provided <a href=""https://stackoverflow.com/questions/2100907/how-to-remove-delete-a-large-file-from-commit-history-in-the-git-repository"">here</a></p>
</li>
</ol>
<p>*CD to your local working folder and run the following command:</p>
<pre><code>git filter-branch -f --index-filter &quot;git rm -rf --cached --ignore-unmatch FOLDERNAME&quot; -- --all
replace FOLDERNAME with the file or folder you wish to remove from the given git repository.
Once this is done run the following commands to clean up the local repository:
rm -rf .git/refs/original/
git reflog expire --expire=now --all
git gc --prune=now
git gc --aggressive --prune=now
Now push all the changes to the remote repository:
git push --all --force
</code></pre>
<p>This will clean up the remote repository.*</p>
<p>My repository is linked below.</p>
<p><a href=""https://github.com/Rinzler8806/crowdCoin"" rel=""nofollow noreferrer"">https://github.com/Rinzler8806/crowdCoin</a></p>
<p>I appreciate your help!</p>
","0","15113601","",""
"63408225","6224662","2020-08-14 07:16:10","2","868","<git><git-lfs><git-lfs-migrate>","Files have become unreadbale post git lfs migrate import, how to undo","<p>I did the following on my repository and now all the files have been replaced by statements like these(I have replaced the value in the second line with *s):</p>
<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:8*****************************************93
size 1003203
</code></pre>
<p>lfs commands run:</p>
<pre><code>git lfs install
git lfs track &quot;*.xyz&quot;
git lfs migrate import
</code></pre>
<p>Now all files including the xyz files are unreadable. How can I possibly undo these ?</p>
","3","6224662","",""
"63496836","12097673","2020-08-20 00:47:02","1","255","<docker><kubernetes><containers><openshift><git-lfs>","Cannot load a git-lfs file on OpenShift online platform","<p>I need to deploy a web app on OpenShift online platform which involves using a file that's stored on github repo with lfs.</p>
<p>When I built the app, I received this message:</p>
<pre><code>---&gt; Running application from Python script (app.py) ...
generated new fontManager
Traceback (most recent call last):
  File &quot;app.py&quot;, line 72, in &lt;module&gt;
   model.load_state_dict(torch.load(WEIGHTS_FILE, map_location=device))
  File &quot;/opt/app-root/lib/python3.6/site-packages/torch/serialization.py&quot;, line 585, in load
    return _legacy_load(opened_file, map_location, pickle_module, **pickle_load_args)
  File &quot;/opt/app-root/lib/python3.6/site-packages/torch/serialization.py&quot;, line 755, in _legacy_load
    magic_number = pickle_module.load(f, **pickle_load_args)
_pickle.UnpicklingError: invalid load key, 'v'.
</code></pre>
<p>I guess the reason must be that the weight file is stored by lfs. It looks like that OpenShift simply git pull the repo instead of git-lfs pull.</p>
<p>I used to git pull the entire repo to the terminal when I used other web services platforms, e.g. GCP, Azure.</p>
<p>So is it possible to open a terminal console and then I could git pull the repo? Or, any other alternatives?</p>
<p>PS: I am building it with dockerfile and here is my repo: <a href=""https://github.com/MemphisMeng/global-wheat-detection-web-app"" rel=""nofollow noreferrer"">https://github.com/MemphisMeng/global-wheat-detection-web-app</a></p>
","2","12097673","",""
"44884414","2681057","2017-07-03 11:28:28","2","945","<git><git-lfs>","How do you remove a file from your git database after moving it into LFS?","<p>I had some large files that were accidentally tracked in git. I didn't realize until many commits later. I moved those files into git LFS, but now I would like to delete them out of my normal git database as their deltas are taking up a huge amount of space. </p>
","0","2681057","0","0"
"44986734","19212","2017-07-08 13:25:08","11","767","<git><ubuntu-14.04><circleci><git-lfs>","git reset --hard hangs on CircleCI/Ubuntu 14 with git-lfs < 1.5.6","<p>I'm deploying to CircleCI and but my code is timing out.</p>

<p>The command in particular that CircleCI is calling that's causing the time-out is during the <code>checkout</code> stage:</p>

<blockquote>
  <p>git reset --hard SHA</p>
</blockquote>

<p>Where <code>SHA</code> is the hash of the build, but upon ssh'ing in I noted that <code>HEAD</code> and others that I tried also run forever.</p>

<p>At that point the code has been checked out with:</p>

<blockquote>
  <p>git clone --quiet git@github.com:Organization/Repo.git . --config core.compression=9 --depth 10 --no-single-branch</p>
</blockquote>

<p>Why would <code>git reset --hard</code> run (seemingly) forever on the CircleCI environment, and what fixes are reasonably available?</p>

<p>More details (we've got some git-lfs files here, too):</p>

<ul>
<li>lsb-release Ubuntu 14.04.4 LTS</li>
<li>git version 2.11.0</li>
<li>git-lfs/1.5.4 (GitHub; linux amd64; go 1.7.4)</li>
</ul>

<p><strong>EDIT</strong> This appears related to:</p>

<ul>
<li>github.com/git-lfs/git-lfs/pull/1932 (per @torek's comment)</li>
<li><a href=""https://discuss.circleci.com/t/is-there-any-way-to-disable-git-lfs-in-ubuntu-14-04-trusty-image/10208/12"" rel=""noreferrer"">https://discuss.circleci.com/t/is-there-any-way-to-disable-git-lfs-in-ubuntu-14-04-trusty-image/10208/12</a></li>
</ul>

<p>I would also note that adding <code>GIT_LFS_SKIP_SMUDGE=1</code> (in the CircleCI Project config) has not had any useful effect.</p>

<p>It does help to go back to Ubuntu 12, but obviously that's less than ideal.</p>

<p><strong>EDIT</strong></p>

<p>Here's a recent bug report I filed: <a href=""https://discuss.circleci.com/t/cannot-pull-with-git-lfs/14346"" rel=""noreferrer"">https://discuss.circleci.com/t/cannot-pull-with-git-lfs/14346</a></p>

<p>(Just to ensure visibility, because my other reports were buried in comments)</p>
","2","19212","0","0"
"45350174","2279059","2017-07-27 11:59:26","5","1639","<git><bitbucket><git-lfs>","Files are still (not) in GIT LFS after changing .gitattributes","<p>When using <strong>GIT LFS</strong>, <code>.gitattributes</code> controls which files are managed by GIT LFS and which ones are not. According to the documentation, all it takes to move files between GIT LFS and regular <strong>GIT</strong> storage is to change <code>.gitattributes</code>.</p>

<p>I have modified <code>.gitattributes</code> in a Bitbucket repository, but <code>git lfs ls-files</code> still lists the same files as before, including files that should no longer be managed by GIT LFS and not including files that should now be managed by GIT LFS. Also, committing and pushing the change in <code>.gitattributes</code> is suspiciously fast.</p>

<p>Is there a command that I can (or have to) run to update the <strong>GIT LFS</strong> status of all files and move them to the correct storage?</p>
","3","2279059","0","0"
"45355158","8322147","2017-07-27 15:32:12","0","51","<git><git-tag><git-lfs>","git- Handling and tracking versions of a file","<p>I am experimenting with using git along with Git LFS to version control my filmmaking workflow.</p>

<p>I have two questions:</p>

<p>1) Is there a way I can track all versions of a file? <code>git log &lt;path/to/file&gt;</code> gives me all the commits that involved that file, and that is great, but I would also love to find a way that lists only the blobs that refer to the file. They are all in .git/objects as <code>git rev-list --objects --all</code> shows, but I want to limit the results to showing only the blobs that relate to the file I want.</p>

<p>2) Using the data generated by rev-list, is there a way for me to sort of generate a human readable version number for the files, maybe something that uses the name of the file and the date it was committed to maybe add a note or a tag that looks like ""filename_v001"" or ""filename_commitDate"", as this would be more readable than the SHA?</p>

<p>All I want to achieve with that is something that works like tags do on a commit, but for a file.</p>

<p>I am really not sure if these things can be done or not as I am totally new to git and still trying to figure it out and see if it fits my needs.</p>
","7","8322147","",""
"64268434","6784916","2020-10-08 18:15:49","1","932","<git><git-lfs>","Does git-lfs remove files from the git history?","<p>I added a binary file to my git repo by accident.
If I start tracking it right now with git-lfs, will it be removed from the git history?</p>
","2","6784916","",""
"64282191","5287181","2020-10-09 14:39:04","3","2286","<bash><git><jenkins><groovy><git-lfs>","GitLFSPull SCM Jenkins Plugin is not able to do a proper git lfs pull to resolve pointers","<p><strong>Background</strong>: I am using Git LFS with the repo, and we need to do a Git LFS pull in the checkout logic while using Jenkins's groovy functions for the Pipeline. What this does is replaces the pointers with the actual files which are later on used during the CI compute phase.</p>
<p><strong>Problem</strong>: GitLFSPull SCM plugin exists and works without error when used as a scmExtension but it is not giving the expected results, basically the plugin activates, states the below, but I suspect the git lfs pull origin is not working</p>
<pre><code>Enabling Git LFS pull
 &gt; git rev-parse refs/remotes/origin/feature/xyz^{commit} # timeout=10
 &gt; git rev-parse refs/remotes/origin/origin/feature/xyz^{commit} # timeout=10
 &gt; git config core.sparsecheckout # timeout=10
 &gt; git checkout -f hash # timeout=10
 &gt; git config --get remote.origin.url # timeout=10
 &gt; git lfs pull origin # timeout=10

</code></pre>
<p>I would like to understand, am I missing something to use the Jenkins plugin correctly ? The below is the Checkout function that we are using</p>
<pre><code>def checkoutSourceCode(checkoutDir) {
    dir(checkoutDir) {
        checkout changelog: true,
                poll: true,
                scm: [$class: 'GitSCM',
                      branches: [[name: &quot;origin/&quot; + params.SOURCE_BRANCH]],
                      doGenerateSubmoduleConfigurations: false,
                      extensions                       : [
                      [$class: 'CloneOption', noTags: true, reference: '', shallow: false],
                      [$class: 'CleanBeforeCheckout'],
                      [$class: 'PruneStaleBranch'],
                      [$class: 'AuthorInChangelog'],
                      [$class: 'GitLFSPull']
                      [$class: 'UserIdentity', email: 'xyz@gmail.com', name: 'xyzzy'],
                      [$class: 'SubmoduleOption',
                                                           disableSubmodules  : false,
                                                           parentCredentials  : true,
                                                           recursiveSubmodules: true,
                                                           reference          : '',
                                                           trackingSubmodules : false]],
                      submoduleCfg                     : [],
                      userRemoteConfigs                : [[name         : 'origin',
                                                           credentialsId: 'xyzzy',
                                                           url          : 'ssh://xyz.xyn.com/something.git']]]
        gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        shortCommit = gitCommit.take(6)
        return shortCommit
    }
}
</code></pre>
","0","5287181","",""
"64316551","14385911","2020-10-12 11:01:20","14","10813","<git><github><gitlab><bitbucket><git-lfs>","git push was rejected due to missing or corrupt local objects git-lfs","<p>I am new to <code>git-lfs</code>, Following are the steps I configured and tried to push <code>git-lfs</code></p>
<p><code>git clone git@gitlab.example.com:group/project.git</code>
copied a tar.gz lfs file from different repo to my current repo, then</p>
<pre class=""lang-sh prettyprint-override""><code>git lfs install                      
git lfs track &quot;*.tar.gz&quot;
git add .gitattributes
git commit -m &quot;message&quot;

</code></pre>
<p>while <code>git push origin master</code>:</p>
<p>Error I am facing:</p>
<pre><code>(missing) code.tar.gz (f2b4bf22bcb011fef16f80532247665d15edbb9051***)
Uploading LFS objects:   0% (0/1), 0 B | 0 B/s, done.
hint: Your push was rejected due to missing or corrupt local objects.
hint: You can disable this check with: 'git config lfs.allowincompletepush true'
error: failed to push some refs to 'git@gitlab.example.com:group/project.git'
</code></pre>
<p>For your reference: when I run <code>ls .git/lfs/objects/f2/b4</code> I'm not able to find anything inside.</p>
<p>but for other tar files if I run <code>ls .git/lfs/objects/g3/8a</code> i am able to see c5a9a2e024875718b6377bb15a42fac872a3**** value</p>
","3","14385911","0","0"
"46811489","2401265","2017-10-18 13:34:36","1","444","<git><garbage-collection><git-lfs><gitlab-ce>","git lfs as content manager","<p>I have a scenario to use git lfs as a content manager.</p>

<p>My plan was to do a test something like that : </p>

<pre><code>                                            master   images    combined
init lfs                                     (1)
create images branch                                   (2)
add 2 files                                            (3)
edit 2 files                                           (4)
edit 2 files                                           (5)
edit 2 files                                           (6)
create branch from master                                        (7)
combine images to combines as 1 commit                           (8)
delete images branch                                    -
merge combined to master                     (10)
</code></pre>

<p>after all of that if the GC runs correctly all the changed files of branch images must get deleted.</p>

<p>Am I correct? Because the GC of lfs have to delete all unreferenced images, so the branch has been deleted so the commits must get removed also.</p>

<p>P.S. the history of the project shows only 2 commits after all the above</p>

<p><strong>UPDATE</strong></p>

<p>I deleted the project and after the gc run the space has been removed.</p>

<p><a href=""https://i.stack.imgur.com/pchrW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pchrW.png"" alt=""enter image description here""></a></p>
","0","2401265","",""
"65363299","1334868","2020-12-18 20:07:52","8","12801","<git><git-lfs>","git clone lfs files not fully downloading","<p>I have an issue, where if I run git clone I have some binary files in LFS, those files will clone but will be very small like 130 bytes when in reality they should be 100mb. When I go on Github it shows that they are 100mb. When I press download on Github it shows that they are 100mb.</p>
<p>When I do <code>git lfs clone</code> it will be correct.</p>
<p>If after I <code>git clone</code> I do:</p>
<pre><code>git lfs pull origin [BRANCH]
</code></pre>
<p>It will also get all the files with the correct size.</p>
<p>I'm really confused what is going on here?</p>
<p>Whats the difference between <code>git lfs clone</code> and <code>git clone</code>? Why does it clone the files correctly with git LFS, but not regular git.</p>
","0","1334868","",""
"70604260","2116599","2022-01-06 08:19:58","0","340","<git><git-branch><git-lfs>","I am stuck in a side-branch because git can't find lfs object","<p>I did a <code>git checkout side-branch</code>. After a bit, I tried to go back <code>git checkout master</code> which failed with error:</p>
<pre><code>Updating files: 100% (712/712), done.
Downloading code/external/CNN-WordSim-main/assets/corpus.pkl (17 KB)
Error downloading object: code/external/CNN-WordSim-main/assets/corpus.pkl (5f722ca): Smudge error: Error downloading code/external/CNN-WordSim-main/assets/corpus.pkl (5f722cae5ff766982b32729971bbab91f1ba61f0c61d2b08868cd358a778c903): [5f722cae5ff766982b32729971bbab91f1ba61f0c61d2b08868cd358a778c903] Object does not exist on the server: [404] Object does not exist on the server
</code></pre>
<p>Apparently the file corpus.pkl cannot be found anymore. I have also tried <code>git checkout --force master</code> with the same result. The point is that <em>I don't care about corpus.pkl</em>, it's an old file from a different repo I clone/forked/downloaded some time ago and I don't really care about it anymore. I am happy to lose the whole CNN-WordSim-main repo, I just want to go back to <code>master</code>.
I am at complete lost. Any idea?</p>
","2","2116599","",""
"54670485","1725377","2019-02-13 12:42:36","0","3140","<git><version-control><git-lfs>","What can cause a git lfs object to go missing?","<p>When I commit a git lfs tracked file (without pushing) two things happen, as far as I understand:</p>

<ol>
<li>The file is copied to the local lfs object storage (<code>.git/lfs/objects</code>)</li>
<li>The file is replaced with an lfs pointer file in the commit, but not in the working copy.</li>
</ol>

<p><strong>Under what circumstances can the file disappear from the local lfs object storage?</strong></p>

<p>Since the branch has not been pushed yet, not even <code>git prune</code> should be able to delete local lfs objects <a href=""https://github.com/git-lfs/git-lfs/blob/master/docs/man/git-lfs-prune.1.ronn"" rel=""nofollow noreferrer"">according to the manual</a>.</p>

<p>Yet, I keep running into issues with not being able to check out some branches, because of missing lfs objects. The <a href=""https://github.com/git-lfs/git-lfs/issues/3182"" rel=""nofollow noreferrer"">error message</a> refers to the objects not being on the server, but the branch has not been pushed anyway.</p>
","0","1725377","",""
"72354863","2197955","2022-05-23 21:13:01","4","585","<git><git-lfs>","Moving file under git lfs from one directory to another within the same repository","<p>I have a file that is under <code>git lfs</code> control that I want to move from one directory to another within the same git repository.  However, <code>git mv foo/bar baz/</code> works for regular files, but does not bring along the LFS state, so I cannot use that.</p>
<p>I.e., I was thinking along the lines of:</p>
<ol>
<li><code>git mv foo/biglfs.file bar/</code></li>
<li><code>git lfs track *.file</code></li>
<li><code>git add bar/.gitattributes</code></li>
<li><code>git commit</code></li>
</ol>
<p>But I don’t think that properly updates the LFS file pointers, and I think the first statement will actually add <code>biglfs.file</code> to the repo directly, which isn't desirable.</p>
<p>I think I have to manually remove the file from under <code>git lfs</code> control, move the file, and then re-add it.  But that strikes me as a lot of work, so surely there's an easy and direct way to do this?</p>
","3","2197955","",""
"54694969","258894","2019-02-14 16:30:36","0","1167","<git><git-lfs>","How to recover from failed git lfs push?","<p>I set up my <code>.gitattributes</code> to make some binary files LFS. Didn't realize I already had some git hooks in place so I didn't have the git lfs hooks. I did a push, and now, in the upstream repo, all the binary files are just empty pointers -- no files actually uploaded.</p>

<p>So I installed the proper git lfs hooks now, but now what do I do to actually upload the files? <code>git lfs push</code> says everything's up to date, although it's not.</p>

<p>I tried <code>git rm --cached file.bin &amp;&amp; git add file.bin</code> but that didn't do anything (status still says up to date).</p>
","0","258894","",""
"54804333","3745022","2019-02-21 10:05:22","7","487","<git><powershell><tfs><git-lfs><git-ls-files>","Is comparing git lfs ls-files with git ls-files ':(attr:filter=lfs)' a reliable way to detect lfs files that are not managed by lfs?","<p>I try to find a way to determine whether the files in git repository are correctly managed by git-lfs.</p>

<p>So far, I have found that comparing results from <code>git lfs ls-files</code> and <code>git ls-files ':(attr:filter=lfs)'</code> seems to give me what I want.</p>

<pre><code>Add-Type -AssemblyName 'System.Linq';
[string[]] $actualLfsFilePaths = git lfs ls-files | `
    ForEach-Object `
    {
        #'12345678 * my.dll' - not all lfs versions support -n flag, so it is better to be conservative
        $_.Split(' ', 3)[2]
    };
[string[]] $shouldBeUnderLfsFilePaths = git ls-files ':(attr:filter=lfs)';
$filePathsNotUnderLfs = [System.Linq.Enumerable]::ToArray(
    [System.Linq.Enumerable]::Except($shouldBeUnderLfsFilePaths, $actualLfsFilePaths)
    );
$count = $filePathsNotUnderLfs.Count;
Write-Host ""There are $($count) lfs files that are not under lfs"";
foreach ($filePathNotUnderLfs in $filePathsNotUnderLfs)
{
    Write-Host ""`t'$filePathNotUnderLfs'"";
}
if ($count -gt 0)
{
    Write-Error ""There are $count lfs files that are not under lfs"";
    return 1;
}
return 0;
</code></pre>

<p>Still I am not sure that is a reliable way. So, is it a reliable/correct way? Or perhaps there is an alternative available?</p>

<p>P.S.: What I am trying to achieve is to create a pull request validation build(for TFS repository) that will detect lfs violations (files committed without being added to lfs) that often occur for one or another reason and lead to unnecessary warnings and repo bloat at best and major <a href=""https://stackoverflow.com/questions/46704572/git-error-encountered-7-files-that-should-have-been-pointers-but-werent"">nuisances</a> at worst.</p>

<p><strong>EDIT:</strong> 
Well, found out that there are some issues with the current code:</p>

<ol>
<li><a href=""https://github.com/git-lfs/git-lfs/issues/2863"" rel=""nofollow noreferrer"">empty files</a> handling</li>
<li><a href=""https://stackoverflow.com/questions/22827239/how-to-make-git-properly-display-utf-8-encoded-pathnames-in-the-console-window"">octal encoding for non-ASCII chars in ls-files</a> </li>
<li>Symbolic links</li>
</ol>

<p>but they are relatively easily fixed and do not change the gist of the question.</p>
","2","3745022","0","0"
"54940889","5106253","2019-03-01 08:44:58","1","304","<git><svn><git-lfs>","Unable to svn rebase after doing git lfs migrate","<p>I've been migrating a Subversion codebase to Git.  All went well and I <code>git svn clone(d)</code> the repo and then <code>git lfs migrate(d)</code> the large and binary files.  The repo looks fine from the Git side but I now cannot <code>git svn rebase</code>...</p>

<p><code>$ git svn rebase
Unable to determine upstream SVN information from working tree history
$
</code></p>

<p>I've tried various suggestions from the web on solving this problem but they seem to have no effect.  Any suggestions?  Can I reset the Subversion/Git info?  Should I have <code>git lfs install(ed)</code> before doing the <code>git lfs clone</code>?</p>
","2","5106253","",""
"55067898","11041931","2019-03-08 17:10:06","1","2474","<git><tcp><proxy><git-lfs>","git lfs pull in repository produces an error about dial tcp","<p><code>git lfs pull</code> in repository produces the following error:</p>

<blockquote>
  <p>oobarbazanoo@LAPTOP-CQEVT11F MINGW64 /c/Projects/doesnotmatter/ecom-oneapp-data-staging/ecom-oneapp-data-staging (master)
  $ git lfs pull</p>
  
  <p>batch response: Post <a href=""https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch"" rel=""nofollow noreferrer"">https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch</a>: proxyconnect tcp: dial tcp: lookup helloInternet: no such host
  batch response: Post <a href=""https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch"" rel=""nofollow noreferrer"">https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch</a>: proxyconnect tcp: dial tcp: lookup helloInternet: no such host
  batch response: Post <a href=""https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch"" rel=""nofollow noreferrer"">https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch</a>: proxyconnect tcp: dial tcp: lookup helloInternet: no such host
  batch response: Post <a href=""https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch"" rel=""nofollow noreferrer"">https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch</a>: proxyconnect tcp: dial tcp: lookup helloInternet: no such host
  batch response: Post <a href=""https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch"" rel=""nofollow noreferrer"">https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch</a>: proxyconnect tcp: dial tcp: lookup helloInternet: no such host
  batch response: Post <a href=""https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch"" rel=""nofollow noreferrer"">https://yaroslavvaltech@bitbucket.org/doesnotmatter/ecom-oneapp-data-staging.git/info/lfs/objects/batch</a>: proxyconnect tcp: dial tcp: lookup helloInternet: no such host
  ...</p>
</blockquote>

<p>It seems that the issue is about the proxy being configured in a wrong way. So, what I decided to try is to run the command <code>git config --global --unset http.proxy</code> and then the <code>git lfs pull</code> once more. It did not help, I got the same error as above.</p>

<p>I am using Windows 10. Here is the copy of the file <code>C:\Windows\System32\drivers\etc\hosts.file</code>:</p>

<pre><code># Copyright (c) 1993-2009 Microsoft Corp.
#
# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.
#
# This file contains the mappings of IP addresses to host names. Each
# entry should be kept on an individual line. The IP address should
# be placed in the first column followed by the corresponding host name.
# The IP address and the host name should be separated by at least one
# space.
#
# Additionally, comments (such as these) may be inserted on individual
# lines or following the machine name denoted by a '#' symbol.
#
# For example:
#
#      102.54.94.97     rhino.acme.com          # source server
#       38.25.63.10     x.acme.com              # x client host

# localhost name resolution is handled within DNS itself.
#   127.0.0.1       localhost
#   ::1             localhost
</code></pre>

<p>As you can see there is no <code>helloInternet</code> host being specified in it. Actually the file is totally blank, since it contains only comments.</p>

<p>What may I do to fix it?</p>

<p>So, here are my environment variables:
<a href=""https://i.stack.imgur.com/2fhKx.png"" rel=""nofollow noreferrer"">enter image description here</a></p>

<p>After deleting the <code>http_proxy</code> variable and trying out the command everything works just fine.</p>
","4","11041931","",""
"63974443","669683","2020-09-20 00:11:59","1","477","<git><git-lfs><git-lfs-migrate>","Why does the number of commits increase after git lfs migrate?","<p>I tried running <code>git lfs migrate import --everything --include=&quot;*.dll&quot;</code> on a large repository. Before I ran this there were about 70k commits. After running the migration (and expiring reflog and pruning etc) <code>git rev-list --all --count</code> shows around 130k commits. Why are there so many commits added, and what are those commits?</p>
","6","669683","0","0"
"63974748","1823524","2020-09-20 01:20:58","4","1794","<git><git-lfs>","git lfs push is very slow","<p>I have a repo with one &quot;big&quot; file (~280 Mb), only this file is tracked by lfs. When I try to push it, push is extremely slow, around 20 KB/s - and if I wait, it only gets slower.</p>
<p>I tried using git for windows - <code>git version 2.28.0.windows.1</code> with <code>git-lfs/2.11.0 (GitHub; windows amd64; go 1.14.2; git 48b28d97)</code> and I tried Ubuntu with <code>git version 2.28.0</code> and <code>git-lfs/2.12.0 (GitHub; linux amd64; go 1.13.4)</code> - with equal results.</p>
<p>I also tried pushing by ssh and https, and setting <code>git config http.version HTTP/1.1</code> - no difference.</p>
<p>I'm pushing to github (not sure if that matters); bandwith limit doesn't seem to be the issue.</p>
","0","1823524","",""
"46064282","1393872","2017-09-05 22:41:19","1","2259","<git><git-lfs>","Storing large files in git without copying","<p>I'm looking for a way to store large files efficiently in git without having multiple local copies.</p>

<p>I've tried git lfs, however it creates a copy in <code>.git/lfs/objects/</code> of every modified file on every commit. This means that I need at least twice as much disk space (if I use <code>git lfs prune</code> regularly). </p>

<p>I understand that this is to keep the git workflow, but my data is in the hundreds of GBs and this is not really usable. </p>
","0","1393872","",""
"46124478","8359726","2017-09-08 21:00:12","0","334","<git><git-lfs><git-p4>","Merging a remote .gitattribute file with local .gitattribute file with merging strategy union","<p>I am working with git p4 rebase and git LFS. unfortunately after syncing the P4 contents to local git repo, it removes all the existing LFS tracked files from .gitattributes, and adds files to .gitattributes that were synced. </p>

<p>example:</p>

<p>Local and remote .gitattributes file before sync</p>

<pre><code>    File 1 filter=lfs diff=lfs merge=lfs -text
    File 2 filter=lfs diff=lfs merge=lfs -text
    File 3 filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>local .gitattributes file after sync</p>

<pre><code>    File 4 filter=lfs diff=lfs merge=lfs -text
    File 5 filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>Now, if I push to remote, I will lose tracking on 1,2,3. So before I push I need to merge the remote .gitattributes file with the local .gitattributes file to obtain </p>

<pre><code>    File 1 filter=lfs diff=lfs merge=lfs -text
    File 2 filter=lfs diff=lfs merge=lfs -text
    File 3 filter=lfs diff=lfs merge=lfs -text
    File 4 filter=lfs diff=lfs merge=lfs -text
    File 5 filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>Then I can push to remote.</p>
","4","8359726","",""
"64087994","14349276","2020-09-27 11:33:45","1","3340","<git><git-lfs>","Why git lfs get stuck when uploading lfs files","<p><a href=""https://i.stack.imgur.com/22ndr.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/22ndr.jpg"" alt=""The Git gui stuck at here"" /></a></p>
<p>When I installed git-lfs in the repository, every time I upload the file, it first upload the large file and stopped, Now I can't upload the other files.</p>
","3","14349276","",""
"64100708","4681265","2020-09-28 10:48:06","0","77","<git><git-lfs><git-lfs-migrate>","Why git clone fails for some repository names?","<p>I just migrated with <code>git-lfs</code> a clone of my existing repository from the local directory <code>/mnt/1TB/DataWin_to_sync/GITRepoWin/ubuntu18-config.git</code> but without pushing (the push failed in fact).</p>
<p>Then I created a new git repository in another directory (<code>/home/adr/GITRepoUbuntu/ubuntu18-config.git</code>) and tried to clone it:</p>
<pre class=""lang-sh prettyprint-override""><code>git clone https://adrhc.go.ro/ubuntu18-config.git
Cloning into 'ubuntu18-config'...
fatal: repository 'https://adrhc.go.ro/ubuntu18-config.git/' not found
</code></pre>
<p>All directories in <code>/home/adr/GITRepoUbuntu</code> are exposed to <code>https://adrhc.go.ro/&lt;&lt;directory&gt;&gt;.git</code> by using gitweb + nginx.</p>
<p>But when I created the new git repository <code>/home/adr/GITRepoUbuntu/xubuntu18-config.git</code> and clone it:</p>
<pre class=""lang-sh prettyprint-override""><code>git clone https://adrhc.go.ro/xubuntu18-config.git
Cloning into 'xubuntu18-config'...
warning: You appear to have cloned an empty repository.
</code></pre>
<p>My nginx logs this:</p>
<pre><code>2020/09/28 13:38:11 [error] 26114#0: *120 open() &quot;/fast-disk/apache-htdocs/ubuntu_packages/info/refs&quot; failed (2: No such file or directory), client: 127.0.0.1, server: adrhc.go.ro, request: &quot;GET /ubuntu_packages/info/refs?service=git-upload-pack HTTP/1.1&quot;, host: &quot;adrhc.go.ro&quot;
</code></pre>
<p>Both <code>find /mnt/1TB/DataWin_to_sync/GITRepoWin -name ubuntu_packages</code> and <code>locate ubuntu_packages/info/refs</code> finds nothing on my HDDs.</p>
<p>Same fail I have for names:</p>
<ul>
<li>ubuntu16-config</li>
<li>ubuntu10-config</li>
<li>ubuntu0-config</li>
<li>ubuntuNN-config</li>
</ul>
<p>but no error (when cloning) for the names:</p>
<ul>
<li>uubuntu18-config</li>
<li>uubuntu0-config</li>
<li>uubuntu0</li>
<li>uubuntuNN-config</li>
<li>uubuntuNN</li>
</ul>
<p>What is the issue and how should I solve it?</p>
","0","4681265","0","0"
"64178437","5287181","2020-10-02 21:26:58","3","133","<bash><git><version-control><git-bash><git-lfs>","How to advice developers after merging feature branch to master to enable git LFS (git)","<p><strong>Details</strong> :</p>
<ul>
<li>We are trying to migrate our repo to git LFS</li>
<li>I have a branch that will enable git lfs, what I am doing is updating a .gitattributes file, and creating a tracker which in turn created pointers to track all the files that need to be part of the LFS</li>
<li>Now I would have to advise the developers what they need to do once this feature branch is to merged into the default/master</li>
</ul>
<p><strong>The problem that I need to understand?</strong></p>
<ul>
<li>Now what I have advised and found in general is before updating to the master/default, ie, rebasing to master/default, I told them to do the below for all the feature branches that they have which obviously till this point do not have the git lfs changes in them</li>
</ul>
<pre><code>brew install git-lfs (this will be system-wide)
git lfs install (this will be on the root directory of the repo, for each branch)
</code></pre>
<ul>
<li>Now for the devs, this will be a manual step, and they somehow want this to be automated for them, which I assume may be done through git hooks, or some other way so that they do not have to update every branch
I am thinking of a plumbing bash command as such might do it? Is this feasible</li>
</ul>
<pre class=""lang-sh prettyprint-override""><code>for branch in $(git for-each-ref --format='%(refname)' refs/heads/); do 
    git lfs install &quot;$branch&quot;; 
done

</code></pre>
<p><strong>Update1</strong></p>
<ul>
<li>Seems the above does do <code>git lfs install</code> on all the branches that you have in your local history and does it in one time.</li>
<li>But I would still want to know and understand what is <code>best</code> practice</li>
</ul>
","0","5287181","",""
"46345317","779130","2017-09-21 13:30:28","2","1928","<git><git-lfs><git-for-windows>","Which git-lfs does `git lfs` use?","<p>I've just updated my installed Git LFS from <a href=""https://github.com/git-lfs/git-lfs/releases"" rel=""nofollow noreferrer"">https://github.com/git-lfs/git-lfs/releases</a> to the latest version (2.3.0). However, when I run <code>git lfs version</code> I see:</p>

<pre><code>$ git lfs version
git-lfs/2.2.1 (GitHub; windows amd64; go 1.8.3; git 621d1f82)
</code></pre>

<p>If I run <code>git-lfs version</code> I see the new version:</p>

<pre><code>$ git-lfs version
git-lfs/2.3.0 (GitHub; windows amd64; go 1.8.3; git 4dd2bf73)
</code></pre>

<p>I'm not sure I understand where the <code>git lfs</code> command finds its git-lfs. I've hunted down a couple (or at least one) old git-lfs installation and deleted them, though git still seems to find an old one. And there's no other git-lfs in the path.</p>

<p>What would I need to do to tell git to use the newly installed version?</p>

<p>I'm running Windows 10 and using Cygwin. I get the same in PowerShell and cmd.</p>

<p><b>EDIT:</b>
I found this:</p>

<pre><code>C:\Program Files\Git\mingw64\bin\git-lfs.exe
</code></pre>

<p>and this seems to be the old version:</p>

<pre><code>$ /cygdrive/c/Program\ Files/Git/mingw64/bin/git-lfs.exe version
git-lfs/2.2.1 (GitHub; windows amd64; go 1.8.3; git 621d1f82)
</code></pre>

<p>Should I just delete this (and the other should be found via the <code>PATH</code>, or replace it with the new one? Or is there a more ""official"" way of doing this?</p>
","3","779130","",""
"64939995","14453685","2020-11-21 04:59:06","4","1582","<git><github><gitlab><git-lfs>","Error while pushing the changes after uninstalling git lfs","<p>i have a repository enabled with git lfs,</p>
<p>1, when i tried to uninstall git lfs using <code>git lfs uninstall</code></p>
<p>getting the following <code>WARNING: error running /usr/lib/git-core/git 'config' '--global' '--remove-section' 'filter.lfs': 'fatal: No such section!' 'exit status 128'</code></p>
<p>2, while pushing the sources to remote facing the following error</p>
<pre><code>! [remote rejected] devbranch -&gt; devbranch (pre-receive hook declined)
error: failed to push some refs to 'http://gitlab.com/froup/repo1.git'
</code></pre>
<p>my git config file looks like below</p>
<pre><code>git config --list
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
user.email=ank@gmail.com
user.name=ank
color.ui=auto
core.repositoryformatversion=0
core.filemode=true
filter.lfs.smudge=git-lfs smudge --skip -- %f
filter.lfs.process=git-lfs filter-process --skip
lfs.allowincompletepush=false
</code></pre>
","0","14453685","0","0"
"65296467","1710392","2020-12-14 21:05:30","3","387","<windows><git><gitlab-ci><git-lfs>","Using external git-lfs server in gitlab-ci on a windows gitlab runner?","<p>I am trying to use an external git-lfs server for a job running on a windows gitlab runner (which is under my control). The git-lfs server used offers only HTTPS authentication (SSH is not an option). For security reasons, I don't want to commit my credentials into the file .lfsconfig.</p>
<p>For Linux, I found this <a href=""https://stackoverflow.com/a/43022442/1710392"">answer</a> and adapted it for my purpose:</p>
<pre><code>git config --global credential.mydomain.helper '!f() { echo &quot;username=${GIT_LFS_USER}&quot;; echo &quot;password=${GIT_LFS_PASSWORD}&quot;; }; f'
</code></pre>
<p>I tried to configure this on the windows gitlab-runner used (pre_clone_script option in config.toml), however I didn't manage to get it to work (I am getting authorization denied from the lfs server) and I am not sure this can work, because as far as I understand on Windows git uses Windows Credential Manager per default.</p>
<p>How can I provide the credentials of an external git-lfs server to run a gitlab-ci job on a Windows gitlab-runner?</p>
","0","1710392","0","0"
"47159392","577001","2017-11-07 13:39:10","3","726","<ubuntu-14.04><gitlab-ci><git-lfs>","git only clones sha for LFS files on Gitlab CI","<p>I pushed <code>.png</code> files, each of which is 2+MB file size and tracked by <code>git-lfs</code>, to my gitlab.com repository, say <code>repo_a</code>. In CI job on another repo <code>repo_b</code> where <code>git-lfs</code> is installed, repo_a is cloned. Now I see the size of all .png files are 132, which seems to be the same volume as <code>sha</code> output (as the following. Note: some values are populated for privacy):</p>

<pre><code>$ git show HEAD:file-a.png | tee sha_temp
version https://git-lfs.github.com/spec/v1
oid sha256:shashashaaaashashashaaaashashashaaaashashashaaaashashashaaaa
size 2430019
$ ls -l sha_temp 
-rw-rw-r-- 1 crookednoodle crookednoodle 132 Nov  7 05:35 sha_temp
</code></pre>

<p>However, On my computer instead on Gitlab CI, I can see the original files when I <code>git clone</code> the repo_a.</p>

<p>This makes me feel that the content of these files are still pointers, not the original files. I also noticed that on my computer, I see in the output the original files are downloaded like this:</p>

<pre><code>Downloading file-a.png (2.5 MB)
</code></pre>

<p>But I don't see this in the output on CI job.</p>

<p>Obviously related, subsequent process that opens the images by OpenCV fails.</p>

<p>What is wrong?</p>
","0","577001","",""
"66324731","14109040","2021-02-22 23:07:41","0","3252","<r><git><r-markdown><git-lfs>","Git lfs version https://git-lfs.github.com/spec/v1 oid error","<p>I am working on creating a simple R Markdown website hosted as a GitHub website (<code>xxx.github.io</code>). I have a few sub-pages which are also written in R and knitted to HTML, so the path to them would be in the format <code>xxx.github.io/subpagex.html</code></p>
<p>However, one of my subpages when knitted to HTML exceeded 100mb and required lfs tracking. So I installed git lfs, tracked the file at (<code>docs/subpagex.html</code>), committed and pushed.</p>
<p>However when I try <code>xxx.github.io/subpagex.html</code> it gives me the following error <code>version https://git-lfs.github.com/spec/v1 oid sha256:e4024c70f19f3dfsgsgsfgfgsfgfgsfgsfda4e537afc9fbab7037633651b08 size 140010078</code></p>
<p>How can I fix this?</p>
","0","14109040","",""
"47796863","6226238","2017-12-13 15:35:35","0","178","<git><git-lfs>","Setting up git large file storage","<p>I have updated some files in my development project, and successfully committed them. When I try to push them, I get the error that the files are too large, and that I must set up git-lfs, and my push fails. What is the best way to set this up? Should I copy my project, reverse the commit, set up git-lfs and re-commit? Or is there someway to avoid this, by simply designating certain files for git-lfs?</p>
","0","6226238","",""
"47797663","1078116","2017-12-13 16:15:51","17","7205","<git><git-lfs>","Is it possible to diff lfs files in git?","<p>When I look at the diff of an lfs file, I just see the oid and size difference.  Is there a way to easily diff the actual file contents?</p>
","1","1078116","",""
"49001956","7559012","2018-02-27 05:48:57","1","1542","<git><gitlab><git-lfs>","Could not push to gitlab using `git lfs push` command","<p>I track several files in my project using <code>git lfs</code>. After that I <code>add</code> and <code>commit</code> them successfully. But pushing files to gitlab server using <code>git lfs push origin develop --all</code> command got the following error.</p>

<p><code>batch response: Access forbidden. Check your access level.</code></p>

<p><strong>Server configuration</strong>: Version of gitlab server is <code>v9.4.3</code>. I enabled <code>git lfs</code> by changing <code>gitlab_rails['lfs_enabled'] = ture</code> in the <code>gitlab.rb</code> file. After that I <code>gitlab-ctl reconfigure</code> and <code>gitlab-ctl restart</code> the server.</p>

<p><strong>Client</strong>: Version of git is <code>v2.11.0.windows.1</code>. Output of <code>git lfs env</code> is as follows.</p>

<pre><code>git-lfs/2.3.4 (GitHub; windows amd64; go 1.8.3; git d2f6752f)
git version 2.11.0.windows.1

Endpoint=http://&lt;ip&gt;:&lt;port&gt;/&lt;group&gt;/&lt;project&gt;.git/info/lfs (auth=basic)
LocalWorkingDir=D:\project
LocalGitDir=D:\project\.git
LocalGitStorageDir=D:\project\.git
LocalMediaDir=D:\project\.git\lfs\objects
LocalReferenceDir=
TempDir=D:\project\.git\lfs\tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=D:\project\.git\lfs
AccessDownload=basic
AccessUpload=basic
DownloadTransfers=basic
UploadTransfers=basic
GIT_LFS_PATH=D:\Program Files\Git LFS
git config filter.lfs.process = ""git-lfs filter-process""
git config filter.lfs.smudge = ""git-lfs smudge -- %f""
git config filter.lfs.clean = ""git-lfs clean -- %f""
</code></pre>

<p><strong>PS:</strong> I also run <code>git config lfs.batch true</code> command but nothing changed. Total size of files are about <code>12GB</code>. Both <code>https</code> and <code>http</code> protocols for url checked. Connection/Response time of the server is as default. I am authorized to push <code>origin/develop</code>. Moreover, <code>git lfs fetch</code> command works successfully(i.e without access forbidden error).</p>
","0","7559012","0","0"
"49033359","614825","2018-02-28 15:42:56","0","826","<git><github><git-lfs>","Trying to git push three large text files to Github using git lfs","<p>After installing <code>git lfs</code> v2.3.4 for Windows, and enabling my repo to use <code>lfs</code> on all my <code>.txt</code> extension files using the following.</p>

<ol>
<li><code>git lfs track ""*.txt""</code></li>
<li><code>git add .gitattributes</code></li>
<li>Inside my .gitattributes, <code>*.txt filter=lfs diff=lfs merge=lfs -text</code></li>
</ol>

<p>When I try to <code>git add .</code>, <code>git commit -m ""initial commit""</code>, then finally <code>git push</code> I get the following error:</p>

<pre><code>Remote ""origin"" does not support the LFS locking API. Consider disabling it with:
  $ git config lfs.https://github.com/0xdec0de5/super_kali_wordlist.git/info/lfs.locksverify false
</code></pre>

<p>After running the following, <code>git config lfs.locksverify false</code></p>

<p>I get the following error:</p>

<pre><code>batch response: Git credentials for https://github.com/0xdec0de5/super_kali_wordlist.git not found.
error: failed to push some refs to 'https://github.com/0xdec0de5/super_kali_wordlist.git'
</code></pre>

<p>Any help to resolve the error would be appreciated!</p>
","0","614825","",""
"55084646","2267503","2019-03-10 05:11:48","0","1468","<git><github><git-lfs>","Difference between git-lfs env Endpoint and LfsStorageDir?","<p>I think I get the mechanics of lfs and its method of tracking the binary files via pointers and only cloning data as needed but I cannot get a solid confirmation where lfs is storing the bulk data. In my case I suspect lfs is keeping the data local because my github repository is tiny (175KB!) relative to the project (Source+Config:72KB, Content:140.7MB) and the local .git directory is much larger (1.2GB). </p>

<p>When I run <code>git lfs env</code> I get the following (left out the bulk of the report, showing what seems related):</p>

<pre><code>Endpoint (s05_testinggrounds_remote)=https://github.com/rebusb/S05_TestingGrounds.git/info/lfs (auth=basic)
...
LocalMediaDir=D:\Unreal Projects\Udemy C++ S05\TestingGRounds\..git\lfs\objects
...
LfsStorageDir=D:\Unreal Proejcts\Udemy C++ S05\TestingGrounds\.git\lfs
...
</code></pre>

<p>My intuition says the files are local, the reported size from github is correct,  and not to worry, but it contradicts what I have read about <a href=""https://stackoverflow.com/questions/32927704/how-to-specify-where-git-lfs-files-will-be-stored"">github lfs here,</a> and <a href=""https://stackoverflow.com/questions/34181356/where-are-git-lfs-files-stored"">git-lfs files here</a>. Everything I read says it stores them on a peer or a different server, but how do you identify that server location? I read that the Endpoint reported in the env command should be the location but then the reported size on github is wrong. </p>

<p>Can someone clear up the difference between Endpoint and the LfsStorageDir or explain how to find the actual server/location of the lfs data?</p>
","0","2267503","",""
"55098089","10219803","2019-03-11 08:47:41","1","315","<github><git-lfs>","Uploading big file on github with lfs","<p>I am trying to push a big file with an ML model on GitHub since yesterday without managing to do it so far. I am using the lfs but it does not seem to recognise my file. I am wondered if my ml file is still tracked, hence used git reset Head to unstage but it did not work. </p>

<p>This is the error message i get </p>

<pre><code>Last login: Mon Mar 11 08:05:10 on console
Nacires-MBP:~ Nacire$ cd /Users/Nacire/Desktop/WildMarketApp 
Nacires-MBP:WildMarketApp Nacire$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    new file:   WildMarket/Model /FlowerClassifier.mlmodel

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   Pods/Pods.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket.xcodeproj/project.pbxproj
    modified:   WildMarket.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket/Model /FlowerClassifier.mlmodel
    modified:   WildMarket/Models.scnassets/boxing.scn

Nacires-MBP:WildMarketApp Nacire$ git reset HEAD FlowerClassifier.mlmodel
Unstaged changes after reset:
M   Pods/Pods.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
M   WildMarket.xcodeproj/project.pbxproj
M   WildMarket.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
M   WildMarket/Model /FlowerClassifier.mlmodel
M   WildMarket/Models.scnassets/boxing.scn
Nacires-MBP:WildMarketApp Nacire$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    new file:   WildMarket/Model /FlowerClassifier.mlmodel

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   Pods/Pods.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket.xcodeproj/project.pbxproj
    modified:   WildMarket.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket/Model /FlowerClassifier.mlmodel
    modified:   WildMarket/Models.scnassets/boxing.scn

Nacires-MBP:WildMarketApp Nacire$  brew install git-lfs
Updating Homebrew...
==&gt; Auto-updated Homebrew!
Updated 1 tap (homebrew/core).
==&gt; Updated Formulae
angular-cli                lolcat                     pygobject3
bit                        mmark                      terraform-inventory
gobject-introspection      monero

Warning: git-lfs 2.7.1 is already installed and up-to-date
To reinstall 2.7.1, run `brew reinstall git-lfs`
Nacires-MBP:WildMarketApp Nacire$ git lfs track ""*.mlmodel""
Tracking ""*.mlmodel""
Nacires-MBP:WildMarketApp Nacire$ git add .gitattributes
Nacires-MBP:WildMarketApp Nacire$ git add FlowerClassifier.mlmodel
fatal: pathspec 'FlowerClassifier.mlmodel' did not match any files
Nacires-MBP:WildMarketApp Nacire$ git add WildMarket/Model /FlowerClassifier.mlmodel
fatal: /FlowerClassifier.mlmodel: '/FlowerClassifier.mlmodel' is outside repository
Nacires-MBP:WildMarketApp Nacire$ git commit -m ""untracked ml model""
[master fabac5d] untracked ml model
 2 files changed, 1 insertion(+)
 create mode 100644 WildMarket/Model /FlowerClassifier.mlmodel
Nacires-MBP:WildMarketApp Nacire$ git status
On branch master
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   Pods/Pods.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket.xcodeproj/project.pbxproj
    modified:   WildMarket.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket/Model /FlowerClassifier.mlmodel
    modified:   WildMarket/Models.scnassets/boxing.scn

no changes added to commit (use ""git add"" and/or ""git commit -a"")
Nacires-MBP:WildMarketApp Nacire$ git add .
Nacires-MBP:WildMarketApp Nacire$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    modified:   Pods/Pods.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket.xcodeproj/project.pbxproj
    modified:   WildMarket.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket/Model /FlowerClassifier.mlmodel
    modified:   WildMarket/Models.scnassets/boxing.scn

Nacires-MBP:WildMarketApp Nacire$ git push master
fatal: 'master' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

  Nacires-MBP:WildMarketApp Nacire$ git push origin master
Uploading LFS objects: 100% (1/1), 229 MB | 0 B/s, done                         
Counting objects: 1137, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (1097/1097), done.
error: RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54
fatal: The remote end hung up unexpectedly
Writing objects: 100% (1137/1137), 239.79 MiB | 267.00 KiB/s, done.
Total 1137 (delta 350), reused 0 (delta 0)
fatal: The remote end hung up unexpectedly
Everything up-to-date

  Nacires-MBP:WildMarketApp Nacire$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    modified:   Pods/Pods.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket.xcodeproj/project.pbxproj
    modified:   WildMarket.xcodeproj/xcuserdata/Nacire.xcuserdatad/xcschemes/xcschememanagement.plist
    modified:   WildMarket/Model /FlowerClassifier.mlmodel
    modified:   WildMarket/Models.scnassets/boxing.scn

   Nacires-MBP:WildMarketApp Nacire$ git push origin master
Uploading LFS objects: 100% (1/1), 229 MB | 0 B/s, done                         
Counting objects: 1137, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (1097/1097), done.
Writing objects: 100% (1137/1137), 239.79 MiB | 100.00 KiB/s, done.
Total 1137 (delta 351), reused 0 (delta 0)
remote: Resolving deltas: 100% (351/351), done.
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: 00e5ad3cab2d0130b8d7e347edd8e2eb
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File WildMarket/Model /FlowerClassifier.mlmodel is 218.53 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/nacire/WM.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/nacire/WM.git'

  Nacires-MBP:WildMarketApp Nacire$
</code></pre>

<p>Can you help??</p>

<p>Thanks
Nacire</p>
","0","10219803","",""
"55173538","346440","2019-03-14 23:33:36","9","1600","<git><bitbucket><git-lfs>","What causes an entry in my git config file for every LFS file I add?","<p>I recently added many (new) files to my git repository and am tracking them with Git LFS. My remote is BitBucket and it all works nicely as intended. </p>

<p>Except, for <em>every</em> file I add to LFS, an entry is added to my <code>.git/config</code> that looks like this:</p>

<pre><code>[lfs ""https://bitbucket.org/%7B%7D/%7B********-****-****-****-****6bcd1adc%7D/info/lfs/object/verify?upload_id=********-d87a-47f9-a857-ae04********""]
    access = basic
</code></pre>

<p>(All the <code>*</code>'s are hexadecimal characters I removed for security reasons)</p>

<p>Since one entry is added for every file I track and push with LFS and I have hundreds of files in LFS, my git config file is now huge.</p>

<p>I think this issue started after switching my <code>origin</code> remote (from one BitBucket repo to another).</p>

<p><strong>What's going on and more importantly, how can I fix this?</strong></p>

<p><strong>Can I safely delete these entries from <code>.git/config</code>?</strong></p>

<hr>

<p>For reference, this is how the BitBucket remote is configured in the same config file:</p>

<pre><code>[remote ""origin""]
    url = https://user@bitbucket.org/user/repository.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[lfs ""https://user@bitbucket.org/user/repository.git/info/lfs""]
    locksverify = false
    access = basic
[lfs ""https://bitbucket.org/user/repository.git/info/lfs""]
    access = basic
</code></pre>

<p>And this is what the LFS part of <code>.gitattributes</code> in the root of the repo looks like:</p>

<pre><code>...
database/seeds/sql/content/*/allcontent.sql filter=lfs diff=lfs merge=lfs -text
public/img/*/path1/*.normal@2x.jpg filter=lfs diff=lfs merge=lfs -text
public/img/*/path2/*.normal@2x.jpg filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p><strong>Update</strong>; I ran <code>git lfs uninstall</code> and then <code>git lfs install --local</code> in the repo to see if it fixes anything, it doesn't (that's to say, more lines were still being added to .git/config for new files I added to LFS). My <code>.git/config</code> file is now over 110KB large :S</p>

<p><strong>Update 2</strong>: I was in touch with BitBucket, the only response I got so far is that this is expected behavior and something about pruning local LFS files, so I think they don't understand the issue I submitted. I <em>suspect</em> you can fix this the brutal way by removing the remote repository at BitBucket and all files tracked with LFS from your working directory, uninstalling Git LFS, removing the LFS directory from your Git repo, removing all <code>.gitattributes</code> lines that reference LFS, doing a new commit locally, using BFG or something like it to remove the references to all LFS-tracked files from all historic commits (depending on how you do it, this might make the tracked files go missing from all historical commits - I followed <a href=""https://dustinfreeman.org/blog/rip-lfs/"" rel=""nofollow noreferrer"">this</a> article), then re-installing Git LFS and re-tracking and adding the files before pushing to a repo newly created at BitBucket. I did just this but without the final step of re-installing Git LFS - for now I'll just stick to tracking those files the regular way. If using LFS is absolutely necessary I suspect these steps will fix it (at the price of possibly losing historical commit integrity) but I'm not sure either. If I get another response from BitBucket I'll be sure to update this issue.</p>

<p><strong>Update 3</strong>: BitBucket now understands the issue and is investigating.</p>

<p><strong>Update 4</strong>: BitBucket never got back to me. I chose to start over afresh and now have a repo that works well without the problem. No idea what was going on.</p>
","5","346440","0","0"
"52769821","5431734","2018-10-11 22:35:52","5","3241","<git><git-lfs>","Removing git-lfs","<p>How do you do a full remove/unistall of git-lfs please? I did <code>git lfs uninstall</code> which returned the following two lines:</p>

<pre><code>Hooks for this repository have been removed
Global Git LFS configuration has been removed
</code></pre>

<p>but the <code>lfs</code> folder is still under <code>.git</code> and when I do <code>git status</code> files come and go in that folder (<code>.git/lfs/tmp</code>). It looks to me that <code>git-lfs</code> has not probably been removed.
The executable has also been uninstalled from the <code>uninstall or change a program</code> window under <code>control panel</code> in my windows10 machine.</p>
","1","5431734","0","0"
"52821479","10226731","2018-10-15 17:00:40","4","201","<git><travis-ci><github-pages><git-lfs>","How can I use git lfs with Travis CI gh-pages deploy?","<p>So currently I am trying to automatically deploy large files above 100 mb to github pages with travis, is that possible?</p>

<p>Is it possible to configure travis to do this in the deploy step rat
After testing a lot of different methods, I used a script to install git lfs and it successful pushed my changes to the repo.</p>

<p>Would having large files in the repo cause a travis pages deploy to fail?</p>
","0","10226731","0","0"
"69894412","3854205","2021-11-09 07:39:24","2","388","<git><git-lfs>","GIT LFS (Only application/vnd.git-lfs and application/vnd.git-lfs+json are supported)","<p>LFS support has been working for a long time with our Azure GIT repo but suddenly it fails when pushing commits with large files. It start to upload. It looks like it starts over several times and then it fails.</p>
<pre><code>C:\Git\...&gt;git push
Locking support detected on remote &quot;origin&quot;. Consider enabling it with:
  $ git config lfs.https://...@dev.azure.com/.../.../_git/....git/info/lfs.locksverify true
LFS: Client error: https://...@dev.azure.com/.../.../_git/.../info/lfs/objects/... from HTTP 413
Uploading LFS objects:   0% (0/1), 0 B | 18 MB/s, done.
error: failed to push some refs to 'https://dev.azure.com/.../.../_git/...'
</code></pre>
<p>The Client error is: Only application/vnd.git-lfs and application/vnd.git-lfs+json are supported</p>
<p>Using:</p>
<ul>
<li>git version 2.33.1.windows.1</li>
<li>git-lfs/3.0.1 (GitHub; windows amd64; go 1.17.1)</li>
</ul>
<p><strong>Update</strong>
The problem is consistent. Adding a new file produces the same error. I have reinstalled GIT/GIT-LFS, and cleaned the GIT repo folder. No change.</p>
","1","3854205","",""
"52823821","355401","2018-10-15 19:52:07","7","1654","<git><git-lfs>","What `git lfs migrate info` output means?","<p>When I run <code>git lfs migrate info --everything</code> on a repository I get the following output:</p>

<pre><code>... clipped
migrate: Examining commits:  99% (3622/3647)                                  migrate: Examining commits: 100% (3647/3647), done
*.json  56 MB     739/739 files(s)      100%
*.py    54 MB   2382/2382 files(s)      100%
*.ps1   9.4 MB    468/468 files(s)      100%
*.stl   5.3 MB        4/4 files(s)      100%
*.js    3.4 MB      45/45 files(s)      100%
</code></pre>

<ol>
<li>What does the size mean? For example the <code>56 MB</code> for <code>*.json</code></li>
<li>The <code>739</code> is probably the number of files, what what the first means and what the second means? (x/y - what is x, what is y?)</li>
<li><code>100%</code> - percent of what?</li>
</ol>
","0","355401","0","0"
"36902385","133327","2016-04-27 22:58:20","8","584","<express><heroku><amazon-s3><git-lfs>","Serve git-lfs files from express' public folder","<p>I'm using node.js (express) on Heroku, where the <a href=""https://devcenter.heroku.com/articles/limits#slug-size"" rel=""nofollow"">slug size is limited to 300MB</a>.</p>

<p>In order to keep my slug small, I'd like to use git-lfs to track my express' <code>public</code> folder.</p>

<p>In that way all my assets (images, videos...) are uploaded to a lfs-store (say AWS S3) and git-lfs leaves <a href=""https://github.com/github/git-lfs/blob/master/docs/spec.md#the-pointer"" rel=""nofollow"">a pointer file</a> (with probably the S3 URL in it?).</p>

<p><strong>I'd like express redirects to the remote S3 file when serving files from the public folder.</strong></p>

<p>My problem is I don't kwon how to retrieve the URL from the pointer file's content...</p>

<pre class=""lang-js prettyprint-override""><code>app.use('/public/:pointerfile', function (req, res, next) {
  var file = req.params.pointerfile;
  fs.readFile('public/'+file, function (er, data) {
    if (er) return next(er);

    var url = retrieveUrl(data); // &lt;-- HELP ME HERE with the retrieveUrl function

    res.redirect(url);
  });
});
</code></pre>

<p>Don't you think it will not be too expensive to make express read and parse potentially all the <code>public/*</code> files. Maybe I could cache the URL once parsed?</p>
","0","133327","0","0"
"69920296","5429512","2021-11-10 21:13:03","0","1527","<git><powershell><gitlab><git-lfs>","How to send http header for basic authentification when cloning with git lfs","<p>Hi everyone i migrated a GitLab repo to start using GIT LFS. when you start using GIT LFS for cloning your repositories you must use HTTPS to every request you do (clone, pull, push)</p>
<p>in my case we have enable the two factor authentication that means that we need to send our username and the PAT (personal access token) on every request.</p>
<p>So for doing that I'm doing this in this way:</p>
<p>I get the base64 authentication header</p>
<pre><code>$auth_basic = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(&quot;PlatinumDeployToken:asdasdLg9VVxBEzPp&quot;))
</code></pre>
<p>and then I send the clone request in this way:</p>
<pre><code>git lfs clone -c http.extraheader=&quot;AUTHORIZATION: basic $auth_basic&quot; https://gitlab.inside.com/Platinum/TRXN_LFS.git &quot;C:\testheaders&quot; --branch &quot;PRODUCTION&quot;
</code></pre>
<p>the problem when doing this way I got this error:</p>
<p>LFS: Client error: <a href=""https://gitlab.inside.com/Platinum/TRXN_LFS.git/gitlab-lfs/objects/d2f34058e9c225e94164008735227d5a97b200507da79bb58a4e60e3b098707b"" rel=""nofollow noreferrer"">https://gitlab.inside.com/Platinum/TRXN_LFS.git/gitlab-lfs/objects/d2f34058e9c225e94164008735227d5a97b200507da79bb58a4e60e3b098707b</a></p>
<p>on every binaries file that tries to download.</p>
<p>when enable degug to see what its happened</p>
<pre><code>$env:GIT_TRACE=1
$env:GIT_TRANSFER_TRACE=1
$env:GIT_CURL_VERBOSE=1

</code></pre>
<p>I got this response:</p>
<pre><code>&lt; HTTP/1.1 400 Bad Request
&lt; Connection: close
&lt; Content-Length: 150
&lt; Content-Type: text/html
&lt; Date: Wed, 10 Nov 2021 16:17:34 GMT
&lt; Server: nginx
&lt; Strict-Transport-Security: max-age=16070400; includeSubDomains
&lt;
10:17:34.399534 trace git-lfs: xfer: adapter &quot;basic&quot; worker 0 finished job for &quot;917a77065de94661f6997d8d301db30130033670b7d5d9c00a212904f393a00f&quot;
10:17:34.400529 trace git-lfs: xfer: adapter &quot;basic&quot; worker 0 processing job for &quot;6559abdbd7e5c21cef28c12f2b5a45b395c73fd55a03b05a5ce8b59cd749a0cd&quot;
10:17:34.399534 trace git-lfs: tq: refusing to retry &quot;917a77065de94661f6997d8d301db30130033670b7d5d9c00a212904f393a00f&quot;, too many retries (8)
10:17:34.400529 trace git-lfs: tq: refusing to retry &quot;917a77065de94661f6997d8d301db30130033670b7d5d9c00a212904f393a00f&quot;, too many retries (8)
10:17:34.410502 trace git-lfs: HTTP: GET https://gitlab.inside.com/Platinum/TRXN_LFS.git/gitlab-lfs/objects/6559abdbd7e5c21cef28c12f2b5a45b395c73fd55a03b05a5ce8b59cd749a0cd
&gt; GET /Platinum/TRXN_LFS.git/gitlab-lfs/objects/6559abdbd7e5c21cef28c12f2b5a45b395c73fd55a03b05a5ce8b59cd749a0cd HTTP/1.1
&gt; Host: gitlab.inside.com
&gt; Authorization: Basic * * * * *
&gt; Authorization: Basic * * * * *
&gt; User-Agent: git-lfs/2.13.2 (GitHub; windows amd64; go 1.14.13; git fc664697)
&gt;
10:17:35.054339 trace git-lfs: HTTP: 400
</code></pre>
<p>it seen that i got an 400 response because git lfs sent a duplicate authentication header.</p>
<p>Does anyone knows if this its the correct way to do it. or how can i fix this issue?</p>
<p>Regars.</p>
","1","5429512","",""
"37051841","878695","2016-05-05 13:24:38","8","981","<ios><git><cocoapods><git-lfs>","iOS Cocoapod with git large file storage","<p>I'm working on a component for iOS developers which is distributed as a Cocoapod. We have several versions up and running, and everything worked really nicely so far.</p>

<p>Since the component itself is rather large (it performs OCR, barcode scanning, and several other nontrivial features), when we included bytecode feature, we passed the github limit of 100MB for file size. We solved the problem by moving the file to git large file storage. </p>

<p>However, after this, we couldn't push the cocoapod to the trunk using 
<code>pod trunk push</code></p>

<p>The error we got is the following:</p>

<pre><code>Validating podspec
 -&gt; PPBlinkID (1.4.0)
    - ERROR | file patterns: The `preserve_paths` pattern did not match any file.
</code></pre>

<p>This indicates that the files which are in git lfs cannot be found in pod trunk.</p>

<p>Is it possible to push a cococapod which has some files in git lfs to pod trunk?</p>
","0","878695","",""
"53170244","307547","2018-11-06 10:41:18","2","812","<git><gitlab><corruption><git-lfs>","How to fix corrupted file on git-lfs server (gitlab)?","<p>We are using GitLab 11.2.1-ee with git-lfs (v.2.4.2) enabled.<br>
We found that we have corrupted object in git-lfs on server. When we run   </p>

<pre><code>sudo gitlab-rake gitlab:lfs:check VERBOSE=1 
</code></pre>

<p>, we have</p>

<pre><code>- 1401..1600: Failures: 1
  - LFS object: b675b00828707cd53dc5c130efce8a9d352e5efd8b9b29f06808810b6ebb5491: Checksum mismatch
</code></pre>

<p>Now when we try to do 
<code>git lfs pull</code> in clones, we got  </p>

<pre><code>Expected OID b675b00828707cd53dc5c130efce8a9d352e5efd8b9b29f06808810b6ebb5491, got 2c6abc2c4d29bd1c7f0041160ea15ea2765df10194a6e9ef3e6e2139c11fc67f after 12427595 bytes written
error: failed to fetch some objects from 'https://192.168.1.100/root/our_project.git/info/lfs'
</code></pre>

<p>How should we fix this corruption?</p>
","0","307547","",""
"53723840","1442181","2018-12-11 12:05:11","1","154","<git><github><git-lfs>","Remove file from certain git commits while keeping the local version unchanged","<p>The situation is as follows: we have a file <code>A.out</code> in our git repository that grew over time and now became too large to be pushed to github. I only realized the latter several commits after it became too large, so here is how the repo looks like:</p>

<ul>
<li>COMMIT5 (HEAD) contains <code>A.out</code> exceeding 100mb</li>
<li>COMMIT4 does not contain <code>A.out</code></li>
<li>COMMIT3 does contain <code>A.out</code> exceeding 100mb</li>
<li>COMMIT2 (origin/HEAD) does not contain <code>A.out</code></li>
<li>COMMIT1 does contain <code>A.out</code> <em>not</em> exceeding 100mb</li>
</ul>

<p>COMMIT2 is the last commit that I pushed to github, and I now cannot push after COMMIT5.</p>

<blockquote>
  <p>How can I remove <code>A.out</code> from commits 3 and 4, while keeping it in its newest >100mb version locally (and untracked from git)?</p>
</blockquote>

<p><strong>EDIT:</strong> The question originates in a large file issue with github, this specific case can probably be handled as explained at <a href=""https://stackoverflow.com/questions/37986291"">How to import git repositories with large files?</a> (pointed out by @phd). But the question as stated is, of course, independent of involved file sizes. In my specific case, the git version is too old to support git-lfs currently, but I don't want to wait until the server's version is updated.</p>
","3","1442181","",""
"70715753","12653532","2022-01-14 19:39:15","0","574","<git><github><git-lfs>","How to push a large folder onto github, ignoring all files over 100MB?","<p>I have an enormously large folder. In this folder are a lot of videos and small files scattered around. I value the small files, not the videos.</p>
<p>I want to back up all the small files onto Github. If I directly try to upload the folder onto Github, I will get multiple large fille (&gt;100 MB files) errors. The videos and small files are scattered around everywhere, making it difficult to remove videos one by one.</p>
<p>I know how to remove a single giant file from Github: <a href=""https://stackoverflow.com/questions/33360043/git-error-need-to-remove-large-file/33363083#33363083"">Git error, need to remove large file</a></p>
<p>However, is there an easy way to do this for <em>all</em> the large files in my folder, such that I can push everything else onto Github with ease?</p>
<p>Note: I don't want to use cloud storage, because all I want to store are my small files.</p>
","2","12653532","",""
"70719962","17416034","2022-01-15 08:37:43","2","155","<git><version-control><unreal-engine4><eof><git-lfs>","Is there a way to download a project from git like torrent downloads?","<p>So i dont have a good internet connection and i'm getting EOF error from git , when i try to download a large file(Game Assets Unreal Engine, uassets). The Project size is more than 78GB's. So i need to find a way to download all the files but in a separate way.</p>
<ol>
<li>I have tried Directory download (it doesn't work as it is a company owned git).</li>
<li>I have tried single file download it works but more than 1000++ files needs to be downloaded so it is also not an option.</li>
<li>Download as zip only downloads 2GB(Not more than that, sometimes it's less) Also It doesnt download the .git folder , So i can not even recognize it as a repository on Git Desktop.</li>
<li>Tried with (Fork , Source tree, VS Code(Git Extension) , VS Studio Community 2019, Git Desktop , Git Bash) those downloads a portion of a file but end's with EOF and all the downloads gets erased when this error occurs.</li>
</ol>
<p>I am open to suggestions of how do you guys fix this issue. And i can make sure that the EOF error occurs for my Bad internet. So need a way to download this large file in multiple days (like torrent downloads) if it's possible.</p>
","3","17416034","",""
"37986291","413020","2016-06-23 08:36:47","2","3006","<git><github><git-lfs><github-enterprise><bfg-repo-cleaner>","How to import git repositories with large files?","<p>Given that <a href=""https://help.github.com/articles/working-with-large-files/#conditions-for-large-files"" rel=""nofollow"" title=""GitHub Conditions for large files"">GitHub doesn't allow to push files larger than 100 MB</a>, it is not possible to <a href=""https://help.github.com/enterprise/2.6/user/articles/importing-a-git-repository-using-the-command-line/"" rel=""nofollow"" title=""Importing a Git repository using the command line"">git clone and push</a> a repository with large files into GitHub enterprise. The push fails with a:</p>

<pre><code>remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: File large.zip is 145.00 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
</code></pre>

<p><sup>(N.B.: there is a <a href=""https://github.com/blog/2163-import-repositories-with-large-files"" rel=""nofollow"" title=""GitHub.com New Features: Import repositories with large files"">repository importer</a>, but this is only for github.com, and requires public access to your repository)</sup></p>

<p>Fortunately, GitHub <a href=""https://github.com/blog/1986-announcing-git-large-file-storage-lfs"" rel=""nofollow"" title=""GitHub LFS"">provides support for storage of files larger than 100MB</a> since April 2015. So how to convert a current repository with such large files into a GitHub LFS compatible repository I can push to?</p>
","1","413020","",""
"37990928","143684","2016-06-23 11:55:44","0","1116","<git><git-lfs>","git lfs pull restores deleted files","<p>I have tracked some files in a Git repository with LFS and everything is in a clean state. When I delete an LFS-tracked file and then call <code>git lfs pull</code>, as my CI build script needs to do, the deleted file is immediately restored. Doing this before a commit would effectively prevent deleting LFS-tracked files.</p>

<p>How can I tell git-lfs to only pull those files that are actually referenced in the current working directory? If a pointer file is not there, that certainly has a reason.</p>
","1","143684","",""
"38017391","4663742","2016-06-24 15:50:38","8","516","<git><git-lfs>","What do I gain by using git lfs?","<p>I understand that git lfs replaces the lfs tracked files with pointer files in my repository.</p>

<p>What I don't understand is what I gain from that happening.</p>

<p>Is it just that I never have to download the binary files associated with commits that I never checkout?</p>

<p>Or are there other advantages?</p>
","0","4663742","",""
"70795198","6216186","2022-01-21 01:00:09","2","522","<reactjs><git><frontend><netlify><git-lfs>","Netlify/ git LFS exit status 128","<p>So on my netlify website, I'm trying to upload a video thats over 300mb(12 minutes long) and have it posted to the page. I had to use Git LFS to push my mp4 file to github. Now when I go to deplot my site I get the exit status 128 and its saying this in my deploy log</p>
<pre><code>4:54:27 PM: Error checking out branch: Downloading public/Videos/PythonCalc.mp4 (368 MB)
Error downloading object: public/Videos/PythonCalc.mp4 (adfdf37): Smudge error: Error downloading public/Videos/PythonCalc.mp4 (adfdf371e863741df3af4755413fae738891f5c794f28fd5564879b2a7ddb35b): batch request: missing protocol: &quot;&quot;


Errors logged to /opt/build/repo/.git/lfs/logs/20220121T005427.736137478.log
Use `git lfs logs last` to view the log.
error: external filter 'git-lfs filter-process' failed
fatal: public/Videos/PythonCalc.mp4: smudge filter lfs failed
4:54:27 PM: Creating deploy upload records
4:54:27 PM: Failing build: Failed to prepare repo
4:54:27 PM: Failed during stage 'preparing repo': exit status 128
4:54:28 PM: Finished processing build request in 8.446701277s
</code></pre>
<p>I just figured out how to use LFS and when I started looking into the error its saying netlify doesnt have permission? Thanks for the help.</p>
","0","6216186","",""
"70796855","9907733","2022-01-21 05:36:33","0","1115","<github><git-lfs>","How to use git lfs to push complete folder to github","<p>I have a project folder in my local having Deep learning models inside it. I want to push it to <code>GitHub</code> by creating new repository.</p>
<p>Here are the steps that I have taken:</p>
<p>Went to my GitHub account and created New Repo with name <code>DeepL_models</code> and only selected <code>ReadMe</code> and <code>Private</code> repository.</p>
<p>Then I cloned this repo using:</p>
<p><code>git clone ssh_link</code></p>
<p>After this step I went inside this <code>cloned folder</code> and dragged and dropped my model folder inside it:</p>
<p><a href=""https://i.stack.imgur.com/umacl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/umacl.png"" alt=""enter image description here"" /></a></p>
<p>The commands that I type after this are:</p>
<pre><code>pc@LM-BGL-40510 Model % git remote
origin
pc@LM-BGL-40510 Model % git branch
* master

git lfs install
Updated git hooks.
Git LFS initialized.

git push -u origin master
Branch master set up to track remote branch master from origin.
Everything up-to-date
</code></pre>
<p>But why I am getting <code>Everything up-to-date</code>?</p>
<p>To track the complete folder <code>model</code> :</p>
<pre><code>git lfs track *


git commit -m &quot;Adding Model&quot;  
git push origin master
</code></pre>
<p>Locking support detected on remote &quot;origin&quot;. Consider enabling it with:</p>
<pre><code>Counting objects: 170, done.
Delta compression using up to 16 threads.
Compressing objects: 100% (166/166), done.
Writing objects: 100% (170/170), 1.30 GiB | 1.88 MiB/s, done.
Total 170 (delta 99), reused 0 (delta 0)
remote: Resolving deltas: 100% (99/99), done.

remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: File Model/exports/dl_model/flax_model.msgpack is 475.54 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File Model/exports/dl_model/pytorch_model.bin is 475.57 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File Model/exports/unbiased-toxic-roberta/pytorch_model.bin is 475.62 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: Please contact github_support@***.com
To github.****.pc/Model.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'git@github.***.pc/Sexually_Explicit.git'
</code></pre>
<p>I have installed <code>git lfs </code> but still getting this error.
Also I have been asked password many times?</p>
","0","9907733","0","0"
"70850015","16852041","2022-01-25 14:04:59","1","7585","<python><git><huggingface-transformers><git-lfs><oserror>","OSError: You seem to have cloned a repository without having git-lfs installed. Please install git-lfs and run git lfs install followed by git lfs pul","<p>I'm using Jupyter Labs on AWS SageMaker.</p>
<p>Kernel: <code>conda_pytorch_p36</code> and did Restart &amp; Run All.</p>
<p>I <code>git cloned</code> this <a href=""https://huggingface.co/textattack/albert-base-v2-MRPC/tree/main"" rel=""nofollow noreferrer"">repo</a>.</p>
<p>Attempt at installing <code>git-lfs</code>:</p>
<pre><code>!curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | sudo bash
!sudo yum install git-lfs -y
!git lfs install
</code></pre>
<p>Running <code>fit lfs fetch</code> or <code>git lfs pull</code> after doesn't change Traceback.</p>
<pre class=""lang-py prettyprint-override""><code>from transformers import AutoTokenizer, AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained('albert-base-v2-MRPC')
</code></pre>
<p>Traceback:</p>
<pre><code>---------------------------------------------------------------------------
UnpicklingError                           Traceback (most recent call last)
~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/transformers/modeling_utils.py in from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs)
   1363                 try:
-&gt; 1364                     state_dict = torch.load(resolved_archive_file, map_location=&quot;cpu&quot;)
   1365                 except Exception as e:

~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/serialization.py in load(f, map_location, pickle_module, **pickle_load_args)
    592                 return _load(opened_zipfile, map_location, pickle_module, **pickle_load_args)
--&gt; 593         return _legacy_load(opened_file, map_location, pickle_module, **pickle_load_args)
    594 

~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/serialization.py in _legacy_load(f, map_location, pickle_module, **pickle_load_args)
    761 
--&gt; 762     magic_number = pickle_module.load(f, **pickle_load_args)
    763     if magic_number != MAGIC_NUMBER:

UnpicklingError: invalid load key, 'v'.

During handling of the above exception, another exception occurred:

OSError                                   Traceback (most recent call last)
&lt;ipython-input-15-34a92ef6f41b&gt; in &lt;module&gt;
      2 
      3 # load model
----&gt; 4 model = AutoModelForSequenceClassification.from_pretrained(configs.output_dir)  # &quot;textattack/albert-base-v2-MRPC&quot;
      5 #model = AlbertForSequenceClassification.from_pretrained(configs.output_dir)
      6 model.to(configs.device)

~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/transformers/models/auto/auto_factory.py in from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs)
    439         elif type(config) in cls._model_mapping.keys():
    440             model_class = _get_model_class(config, cls._model_mapping)
--&gt; 441             return model_class.from_pretrained(pretrained_model_name_or_path, *model_args, config=config, **kwargs)
    442         raise ValueError(
    443             f&quot;Unrecognized configuration class {config.__class__} for this kind of AutoModel: {cls.__name__}.\n&quot;

~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/transformers/modeling_utils.py in from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs)
   1368                             if f.read().startswith(&quot;version&quot;):
   1369                                 raise OSError(
-&gt; 1370                                     &quot;You seem to have cloned a repository without having git-lfs installed. Please install &quot;
   1371                                     &quot;git-lfs and run `git lfs install` followed by `git lfs pull` in the folder &quot;
   1372                                     &quot;you cloned.&quot;

OSError: You seem to have cloned a repository without having git-lfs installed. Please install git-lfs and run `git lfs install` followed by `git lfs pull` in the folder you cloned.
---------------------------------------------------------------------------
UnpicklingError                           Traceback (most recent call last)
~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/transformers/modeling_utils.py in from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs)
   1363                 try:
-&gt; 1364                     state_dict = torch.load(resolved_archive_file, map_location=&quot;cpu&quot;)
   1365                 except Exception as e:

~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/serialization.py in load(f, map_location, pickle_module, **pickle_load_args)
    592                 return _load(opened_zipfile, map_location, pickle_module, **pickle_load_args)
--&gt; 593         return _legacy_load(opened_file, map_location, pickle_module, **pickle_load_args)
    594 

~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/torch/serialization.py in _legacy_load(f, map_location, pickle_module, **pickle_load_args)
    761 
--&gt; 762     magic_number = pickle_module.load(f, **pickle_load_args)
    763     if magic_number != MAGIC_NUMBER:

UnpicklingError: invalid load key, 'v'.

During handling of the above exception, another exception occurred:

OSError                                   Traceback (most recent call last)
&lt;ipython-input-15-34a92ef6f41b&gt; in &lt;module&gt;
      2 
      3 # load model
----&gt; 4 model = AutoModelForSequenceClassification.from_pretrained(configs.output_dir)  # &quot;textattack/albert-base-v2-MRPC&quot;
      5 #model = AlbertForSequenceClassification.from_pretrained(configs.output_dir)
      6 model.to(configs.device)

~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/transformers/models/auto/auto_factory.py in from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs)
    439         elif type(config) in cls._model_mapping.keys():
    440             model_class = _get_model_class(config, cls._model_mapping)
--&gt; 441             return model_class.from_pretrained(pretrained_model_name_or_path, *model_args, config=config, **kwargs)
    442         raise ValueError(
    443             f&quot;Unrecognized configuration class {config.__class__} for this kind of AutoModel: {cls.__name__}.\n&quot;

~/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/transformers/modeling_utils.py in from_pretrained(cls, pretrained_model_name_or_path, *model_args, **kwargs)
   1368                             if f.read().startswith(&quot;version&quot;):
   1369                                 raise OSError(
-&gt; 1370                                     &quot;You seem to have cloned a repository without having git-lfs installed. Please install &quot;
   1371                                     &quot;git-lfs and run `git lfs install` followed by `git lfs pull` in the folder &quot;
   1372                                     &quot;you cloned.&quot;

OSError: You seem to have cloned a repository without having git-lfs installed. Please install git-lfs and run `git lfs install` followed by `git lfs pull` in the folder you cloned.
</code></pre>
<p><strong>albert-base-v2-MRPC/</strong></p>
<pre><code>config.json  log.txt  pytorch_model.bin  README.md  special_tokens_map.json  spiece.model  tokenizer_config.json  train_args.json
</code></pre>
<p>Please let me know if there's anything else I can add to post.</p>
","2","16852041","0","0"
"70876784","150936","2022-01-27 10:13:08","2","938","<git><github><command-line-interface><git-lfs><revert>","How to fix git lfs migrate import changes? Revert Stored with Git LFS","<p>Problem: <code>git lfs migrate import</code> converted everything to hash including .gitignore and all plaintext files.</p>
<p>Locally I gained 10k untracked files in .cache and .vscode-server maps that I do not want to track.</p>
<p>Even worse I can't edit any text files -&gt; everything turned into 3 line file with hash!</p>
<p>Remote Github files now all are: Stored with Git LFS</p>
<p>Even my .gitignore looks like as follows:</p>
<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:5dc008478f60b91b2ca91405adf351b4d253a254cd77604fe3a86bba855eac8e
size 7036
</code></pre>
<p>Short history</p>
<ul>
<li>Local git repo added a large .bak file. Push to remote(Github) thus
failed.</li>
<li>Installed LFS locally (technically a different dev machine
via SSH)</li>
</ul>
<pre><code>    git lfs install
    git lfs track &quot;*.bak&quot;
    git add .gitattributes
    git lfs status
    git lfs migrate
    git lfs migrate info
    git lfs migrate import
    git pull
    git push
</code></pre>
<p>Last 3 lines must be bad mistakes - especially <strong>git lfs migrate import</strong></p>
<p>I should have specified which file types to import.
See <a href=""https://stackoverflow.com/questions/62014426/git-lfs-git-lfs-migrate-import-include-all-file-types-specified-in-gitattribute"">Git LFS git lfs migrate import include all file types specified in .gitattribute?</a></p>
<p>My .gitattributes file turns out to contain all extensions</p>
<pre><code>*.bak filter=lfs diff=lfs merge=lfs -text
*.bash_history filter=lfs diff=lfs merge=lfs -text
*.gitignore filter=lfs diff=lfs merge=lfs -text
*.ipynb filter=lfs diff=lfs merge=lfs -text
*.md filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text
*.json filter=lfs diff=lfs merge=lfs -text
*.txt filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p>more file types follow</p>
<p>I only wanted to convert .bak (and possibly .zip) to LFS.</p>
<p>How do I fix this mess?</p>
<p>First priority is getting original text files(.txt, .gitignore, .json, .md, .html etc) back locally.</p>
<p>Second priority is actually pushing to remote.</p>
","3","150936","",""
"70911638","8810271","2022-01-30 03:42:20","1","358","<gitlab><git-lfs>","How to prevent Git from storing copies of LFS files in .git dir?","<p>It seems that Git is storing copies of LFS files in <code>.git/lfs</code>. This is taking twice of the space. I know this is a typical way Git handles the files, but I'm still wondering if there is a way to prevent Git from caching copies of them and just download from cloud when trying to revert the files.</p>
<p><a href=""https://i.stack.imgur.com/NxhQr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NxhQr.png"" alt=""Baobab screenshot"" /></a></p>
","1","8810271","",""
"53807098","192798","2018-12-16 22:40:54","1","714","<git><git-stash><git-lfs>","`git stash -p` showing files in lfs","<p>I have a repository that uses git-lfs, and the files in lfs are committed.  However, when I use <code>git stash -p</code>, git asks me if I want to stash each and every file in lfs.  How do I skip these files in the questions?  If I stash everything and <code>git stash show</code>, it does not show the lfs files as stashed.  It seems to be an issue specific to <code>-p</code>.</p>

<p>git version 2.17.1</p>

<p>git-lfs/2.3.4 (GitHub; linux amd64; go 1.8.3)</p>
","0","192798","",""
"38315539","2759492","2016-07-11 20:19:44","23","5738","<git><github><github-for-windows><git-lfs>","Duplicating a git repository and its GIT-LFS settings","<p>I've duplicated a repo into a newer repo but when doing a git clone on the new repo it's unable to download the files using the LFS pointers and I get an error when smudge is used...
e.g... ""Error downloading object. Object not found on server""</p>

<p>Steps:</p>

<pre><code>git clone --bare https://github.com/myuser/old-repo.git
cd old-repository.git
git push --mirror https://github.com/myuser/new-repo.git

git clone https://github.com/myuser/new-repo.git
[error.....git-lfs.exe smudge --- somefile.....Error downloading object]
</code></pre>

<p>The branches and commit histories look fine but LFS fails to download the required files. Is there another method when using git-lfs?</p>
","1","2759492","0","0"
"71084834","16573708","2022-02-11 18:22:59","1","276","<git-lfs>","git lfs says file modified after git lfs install","<p><em>(this question appears to be similar to <a href=""https://stackoverflow.com/questions/34685689/git-lfs-large-file-storage-says-lfs-managed-files-are-modified-after-a-git-lfs"">this one</a>, but the solution does not work here and is in fact part of the question)</em></p>
<p>My remote repository contains some file pushed under <code> git lfs</code>. If I start with a brand new local repository and then execute:</p>
<pre><code>git lfs install
git pull
</code></pre>
<p>The files will remain pointers even though common knowledge indicates that <code> git pull</code> should pull them at this point. If I execute instead:</p>
<pre><code>git lfs install
git lfs pull
</code></pre>
<p>Then the files will be fully downloaded but will appear as modifications. Why isn't <code>git lfs install</code> sufficient for <code>git pull</code>  to download all the files in this case? Why do the files appear as modified after a <code>git lfs pull</code> following a <code>git lfs install</code>?</p>
","0","16573708","",""
"71102807","18090706","2022-02-13 16:42:16","0","233","<google-colaboratory><git-lfs>","Git-lfs: Not in a git repository error when downloading cBioPortal files onto Google Colab","<p>I want to download the <code>gbm_tcga_pub2013</code> dataset from cBioPortal (<a href=""https://www.cbioportal.org/study/summary?id=gbm_tcga_pub2013"" rel=""nofollow noreferrer"">https://www.cbioportal.org/study/summary?id=gbm_tcga_pub2013</a>) using <code>git-lfs</code> onto Google Colab. I receive a <code>Not in a git repository.</code> error</p>
<pre><code>!curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
!sudo apt-get install git-lfs
!git lfs install --skip-repo --skip-smudge
!git clone https://github.com/cBioPortal/datahub.git
!cd datahub
!git lfs install --local --skip-smudge
!git lfs pull -I public/gbm_tcga_pub2013
</code></pre>
<p>Traceback:</p>
<pre><code>Not in a git repository.
Not in a git repository.
</code></pre>
<p>Even though I was able to change directory to <code>/datahub</code>, my working directory as per <code>pwd</code> is still <code>root</code>.</p>
","1","18090706","",""
"56479104","10543130","2019-06-06 13:54:20","6","4872","<git><repository><git-lfs>","Retrieving the original files from ""git-lfs"" files in a repository","<p>I found a git repository with a bunch of *.png files that I need.</p>

<p>The files' raw format however uses the git lfs and look like this:</p>

<pre><code>version https://git-lfs.github.com/spec/v1
oid 
sha256:82247bedcaf9f441851f272ca2213a64b1b1084b13709eee02f185921b057efe
size 258233
</code></pre>

<p>I've tried cloning the repository to view the images but I get the following:</p>

<pre><code>error: external filter 'git-lfs filter-process' failed
fatal: ""file_name"".png: smudge filter lfs failed
warning: Clone succeeded, but checkout failed.
</code></pre>

<p>The ""git pull"" command returns the same error:</p>

<pre><code>error: external filter 'git-lfs filter-process' failed
fatal: ""file_name"".png: smudge filter lfs failed.
</code></pre>

<p>The ""git lfs pull"" command simply returns ""could not pull"".</p>

<p>I ultimately want to view the ""file_name"".png as an image file instead of the sha256 string.</p>
","2","10543130","0","0"
"56490448","512324","2019-06-07 08:12:58","0","508","<git><locking><git-lfs>","list git lfs lockable files","<p>With git lfs it is possible to register a file type as lockable, without using LFS. From the lfs <a href=""https://github.com/git-lfs/git-lfs/wiki/File-Locking"" rel=""nofollow noreferrer"">wiki page</a>:</p>

<blockquote>
  <p>If you'd like to register a file type as lockable, without using LFS,
  you can edit the .gitattributes file directly:</p>
  
  <p><code>*.yml lockable</code></p>
  
  <p>Once file patterns in .gitattributes are lockable, Git LFS will make
  them readonly on the local file system automatically. This prevents
  users from accidentally editing a file without locking it first.</p>
</blockquote>

<p>I would like to do this for *.sql files, but when I do this, and run</p>

<pre><code>git lfs ls-files
</code></pre>

<p>sql files are not returned.</p>

<p>Is there a way to <code>ls-files</code> that can be locked?</p>
","0","512324","",""
"73270079","1032372","2022-08-07 18:37:17","0","132","<continuous-integration><github-actions><git-lfs>","What to do about git lfs files getting corrupted between CI runs?","<p>We are using GitHub Actions on self-hosted runner machines which we manage remotely via AWS, and <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">Git LFS</a> to store images and other large files.</p>
<p>This usually works fine but sometimes local copies of images used in my project's snapshot tests are sometimes getting corrupted or something on our CI machines, causing subsequent CI test runs to fail due to crashing when it tries to access the image files. When this happens the files are there, but you can't open them.</p>
<p>The files are fine on the remote, but if we run the tests on one branch where some of these images were changed, then we often get crashes in subsequent runs of different PRs even though none of those files were changed on that branch. The repo is checked out into the same folder each time, and presumably what's happening is for some reason Git LFS thinks the file is already there so it doesn't fetch it properly. It keeps failing until we manually remote into the machine to clear the folder, which is of course extra hassle we don't want to keep having to do.</p>
<p>The repo is checked out using <a href=""https://github.com/actions/checkout"" rel=""nofollow noreferrer"">GitHub's <code>checkout</code> action</a> (v3) with <code>lfs: true</code>.</p>
<p>Any ideas why is this would be happening and/or what workaround could I use to fix it?</p>
<p>I have considered adding a manually-run action which runs a terminal command like <code>rm -rf</code> to clear out the folder whenever I start getting this, but that seems extreme and also doesn't address the problem directly.</p>
","0","1032372","",""
"67395259","11390095","2021-05-05 04:38:48","51","53632","<git-lfs>","Git clone git-lfs filter-process: git-lfs: command not found","<p>I'm trying to clone a project from git by this:</p>
<pre><code>git clone link
</code></pre>
<p>And got this message</p>
<pre><code>remote: Enumerating objects: 24533, done.
remote: Counting objects: 100% (24533/24533), done.
remote: Compressing objects: 100% (5045/5045), done.
remote: Total 24533 (delta 15448), reused 24389 (delta 15306), pack-reused 0
Receiving objects: 100% (24533/24533), 75.12 MiB | 10.96 MiB/s, done.
Resolving deltas: 100% (15448/15448), done.
git-lfs filter-process: git-lfs: command not found
fatal: the remote end hung up unexpectedly
warning: Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry with 'git restore --source=HEAD :/'
</code></pre>
<p>I've been searching around and tried:</p>
<pre><code>git config --system core.longpaths true
</code></pre>
<p>but it doensn't work and my disk is plenty free</p>
","1","11390095","0","0"
"67413615","14940254","2021-05-06 07:29:45","1","2009","<git><git-push><git-pull><git-lfs>","i can't push anything to git using git lfs although i reduce the size of repository","<p>i'm using git lfs for putting large file in github. today i recieve this email:</p>
<blockquote>
<p>Git LFS has been disabled on your personal account because you’ve exceeded your data plan by at least 150%. Please purchase additional data packs to cover your bandwidth and storage usage:</p>
<p><a href=""https://github.com/account/billing/data/upgrade"" rel=""nofollow noreferrer"">https://github.com/account/billing/data/upgrade</a>
i don't want to purchase so i deleted all of my files from github to reduce the size. so now there is no file in github. and now i want to push a small file to github with the following command:</p>
</blockquote>
<pre><code> git push origin master
</code></pre>
<p>but the result is as the following:</p>
<pre><code>Uploading LFS objects:   0% (0/19), 0 B | 0 B/s, done.
batch response: This repository is over its data quota. Account responsible for LFS bandwidth should purchase more data packs to restore access.
error: failed to push some refs to 'https://github.com/something/something.git'
</code></pre>
<p>why? i deleted all of the files from github and the size should be very small but it doesn't let me to push anything. what should i do?</p>
","3","14940254","",""
"67493757","7142315","2021-05-11 20:14:01","0","1223","<git><gitignore><git-lfs>","git push hangs and fails after POST git-receive-pack","<p>I am trying to push my repository that has a lot of <code>.png</code>, <code>.mp4</code>, <code>.h5</code> files, that I can ignore.</p>
<h3>the directory structure:</h3>
<pre class=""lang-py prettyprint-override""><code>.gitignore
CV PROJECT
├───.vscode
├───Docker
├───src
│   ├───Game
│   ├───Main
│   │   └───__pycache__  
│   └───Video
│       ├───Images       
│       │   ├───test    
│       │   │   ├───boost # dir that has .png files 
│       │   │   ├───click # dir that has .png files 
│       │   │   └───upgrade # dir that has .png files 
│       │   └───train  
│       │       ├───boost # dir that has .png files 
│       │       ├───click # dir that, has .png files 
│       │       └───upgrade # dir that has .png files 
│       ├───Models # dir that has .h5 files  
│       └───Videos
│           ├───boost # dir that has .mp4 files
│           ├───click # dir that has .mp4 files
│           └───upgrade # dir that has .mp4 files
└───Tutorial
    └───.ipynb_checkpoints
</code></pre>
<p><em><strong>tl;dr</strong></em> what does my <code>.gitignore</code> need to look like?</p>
<hr />
<h2>the commands:</h2>
<pre class=""lang-py prettyprint-override""><code>git config --global http.postBuffer 2048M
git config --global http.maxRequestBuffer 1024M
git config --global core.compression 9

git config --global ssh.postBuffer 2048M
git config --global ssh.maxRequestBuffer 1024M

git config --global pack.windowMemory 256m 
git config --global pack.packSizeLimit 256m

# git hangs here
git push --verbose -f origin master
</code></pre>
<h3>the output:</h3>
<p>git hangs here:</p>
<pre><code>Total 133 (delta 29), reused 0 (delta 0), pack-reused 0
POST git-receive-pack (569667108 bytes)
</code></pre>
<p>so i tried to ignore them using this <code>.gitignore</code>:</p>
<pre><code>*.mp4
*.h5


Models/*
Videos/*
test/*
train/*

boost/*
upgrade/*
click/*
</code></pre>
<p>and got this output:</p>
<pre><code>remote: Resolving deltas: 100% (20/20), completed with 1 local object.
remote: warning: File src/Video/Videos/boost/b7.mp4 is 57.86 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
remote: warning: File src/Video/Videos/click/c7.mp4 is 73.08 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
remote: warning: File src/Video/Videos/upgrade/u6.mp4 is 56.50 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: 3a803801864c0608c9e57dd7cf9d3ee3eaca6a180713b3c7119e8b0414c776ee
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File src/Video/medmodel.h5 is 112.78 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/romhayh/special-mario.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/romhayh/special-mario.git'
</code></pre>
<p>after this i converted the <code>.gitignore</code> to <code>.gitattributes</code> (to not use <code>git lfs track</code>) and got the same error message:</p>
<pre><code>remote: Resolving deltas: 100% (29/29), completed with 1 local object.
remote: warning: File src/Video/Videos/boost/b7.mp4 is 57.86 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
remote: warning: File src/Video/Videos/click/c7.mp4 is 73.08 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
remote: warning: File src/Video/Videos/upgrade/u6.mp4 is 56.50 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: 9add1b6eba287591037b40a5a483a1b7bb9d2746853150a2146bdf83b8e58b9c
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File src/Video/Models/medmodel.h5 is 112.78 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File src/Video/medmodel.h5 is 112.78 MB; this exceeds GitHub's file size limit of 100.00 MB
</code></pre>
","0","7142315","",""
"67515686","8176989","2021-05-13 07:49:49","1","813","<git><git-submodules><git-lfs>","Init & update submodules with git-lfs include","<p>I'm making a test for Windows, so I want to restrict some lfs files that is not necessary in submodules.</p>
<p>When I try <code>git submodule update --init --recursive</code>, it pulls all lfs files.<br />
Running <code>git config lfs.fetchinclude &quot;*.lib&quot;</code> before update submodule doesn't pull any lfs files at all,<br />
and <code>git config lfs.fetchexclude &quot;*.a,*.so&quot;</code> before update submodule pulls all lfs files.</p>
<p>I don't want to specify a submodule to restrict lfs files, since it's not open to changes.<br />
How can I do this?</p>
","0","8176989","",""
"49821412","497049","2018-04-13 16:24:44","1","46","<git><git-lfs>","How to set not to fetch git lfs files by git attributes?","<p>In a C++ project, I store some test data with git lfs, in the same repository as the source code. I do not always want to build the tests, and in this case, I do not want to download the large files, either.</p>

<p>I know that it is possible to skip the lfs fetch by passing some arguments to git clone. But this depends on the user, and I want to enforce this in the repository.</p>

<p>The idea is that the test data was <em>never</em> fetched when the project is cloned. It would be downloaded later when the project is <em>configured</em>, depending on whether building the tests is opted in.</p>

<p>Is that possible at all?</p>

<p>Maybe with filter attributes?</p>
","0","497049","",""
"67582222","15959024","2021-05-18 08:04:36","2","1894","<git><repository><push><git-lfs><bare>","Is there a way to push git lfs to bare repository","<p><strong>Describe the issue</strong>
cannot push to the bare repository</p>
<p>I'm new to git, and I don't know if my operation is right.</p>
<ol>
<li>create a bare repo in computer A, and install lfs, and then share the folder to the local network</li>
<li>clone the bare repo to computer B and install lfs, track the files using <code>git lfs track &quot;*.psd&quot;</code></li>
<li><code>git add .</code> and <code>git commit -m 'lfs setup'</code></li>
<li>make some changes to psd files</li>
<li><code>git add .</code> and <code>git commit -m 'some changes'</code></li>
<li><code>git push origin master</code></li>
</ol>
<p>And then... ...</p>
<pre><code>$ git push
Uploading LFS objects: 100% (4/4), 46 MB | 0 B/s, done.
EOF
error: failed to push some refs to '&lt;bare repo path&gt;'
</code></pre>
<p>I don’t know if there is such a way that can fix the problem？</p>
<p><strong>Output of <code>git lfs env</code></strong></p>
<p>git lfs env in bare repo:</p>
<pre><code>git-lfs/2.13.3 (GitHub; windows amd64; go 1.16.2; git a5e65851)
git version 2.31.1.windows.1

LocalWorkingDir=
LocalGitDir=&lt;bare repo path&gt;
LocalGitStorageDir=&lt;bare repo path&gt;
LocalMediaDir=&lt;bare repo path&gt;\lfs\objects
LocalReferenceDirs=
TempDir=&lt;bare repo path&gt;\lfs\tmp
ConcurrentTransfers=8
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=&lt;bare repo path&gt;\lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic,lfs-standalone-file
UploadTransfers=basic,lfs-standalone-file
GIT_EXEC_PATH=C:/Program Files/Git/mingw64/libexec/git-core
git config filter.lfs.process = &quot;git-lfs filter-process&quot;
git config filter.lfs.smudge = &quot;git-lfs smudge -- %f&quot;
git config filter.lfs.clean = &quot;git-lfs clean -- %f&quot;

</code></pre>
<p>git lfs env in the working repo (non bare)：</p>
<pre><code>git-lfs/2.13.3 (GitHub; windows amd64; go 1.16.2; git a5e65851)
git version 2.31.1.windows.1

Endpoint=file:///&lt;bare repo path&gt; (auth=none)
LocalWorkingDir=
LocalGitDir=D:\lfs-repo\.git
LocalGitStorageDir=D:\lfs-repo\.git
LocalMediaDir=D:\lfs-repo\.git\lfs\objects
LocalReferenceDirs=
TempDir=D:\lfs-repo\.git\lfs\tmp
ConcurrentTransfers=8
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=D:\lfs-repo\.git\lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic,lfs-standalone-file
UploadTransfers=basic,lfs-standalone-file
GIT_EXEC_PATH=C:/Program Files/Git/mingw64/libexec/git-core
git config filter.lfs.process = &quot;git-lfs filter-process&quot;
git config filter.lfs.smudge = &quot;git-lfs smudge -- %f&quot;
git config filter.lfs.clean = &quot;git-lfs clean -- %f&quot;

</code></pre>
","0","15959024","",""
"67623557","2610049","2021-05-20 15:33:38","0","227","<git><git-lfs>","git lfs, store file in actual location","<p><strong>The problem</strong></p>
<p>A while ago my team started using git LFS, our project uses about 60 GB bmp files. I pushed the bmp files from my system to the remote, all images are correctly stored on LFS.</p>
<p>Whenever a colleague pulls the repository something weird happens, the bmp files are downloaded but stored in a different location. The image folder now contains a bunch of useless pointers instead of the actual images.</p>
<p><strong>Desired solution</strong></p>
<p>The image files are stored in their actual location instead of a useless pointer. In other words, I want the lfs files to behave like all the regular files.</p>
","5","2610049","",""
"67751703","3468778","2021-05-29 13:02:32","0","802","<git><github><ubuntu-18.04><git-lfs>","git lfs push to github failure on Ubuntu 18.04","<p>I have a local git repository where sync'ed with remote GitHub repository. On a feature branch, I needed to add/commit an large binary .pt file (236Mb) and then push it to remote origin in GitHub. Initially I added the file normally (git add), committed the file (git commit)and then tried to push (git push). The push to GitHub failed due to size of file and suggesting to use git-lfs. Following this error,
my colleague pushed a .gitattributes file to remote master branch on GitHub with this content:</p>
<pre><code>*.pt filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p>I then rebased my feature branch with master to get this file into my feature branch. I installed git-lfs using <code>sudo apt install git-lfs </code> Then I tried to unstage the file using</p>
<pre><code>$ git rm --cached bigFile.pt
rm 'bigFile.pt'
</code></pre>
<p>by running <code>git status</code> I get</p>
<pre><code>$ git status
On branch feature_branch
Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

    deleted:    bigFile.pt

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

    bigFile.pt
</code></pre>
<p>I then tried to add it, commit and push it which failed again with similar push failure error message due to big size. I then googled and then found this command (<a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">git-lfs.github.com</a>) and ran it in the folder inside branch:</p>
<pre><code>$git lfs install
Updated git hooks.
Git LFS initialized.
</code></pre>
<p>I then followed the instruction and ran:</p>
<pre><code>git lfs track &quot;*.pt&quot;
</code></pre>
<p>which seems to update .gitattributes which already updated by rebase from master branch.</p>
<p>I then tried to unstage the file using:</p>
<pre><code>git rm --cached bigFile.pt
</code></pre>
<p>The run the git lfs ls-files</p>
<pre><code>$ git lfs ls-files
e7e59a98b5 - bigFile.pt
</code></pre>
<p>Then:</p>
<pre><code>$ git lfs status
On branch feature_branch

Objects to be committed:

    bigFile.pt (LFS: e7e59a9 -&gt; File: e7e59a9)

Objects not staged for commit:
</code></pre>
<p>I then added the file:</p>
<pre><code>$ git add bigFile.pt
</code></pre>
<p>And then checked:</p>
<pre><code>$ git lfs status
On branch feature_branch

Objects to be committed:


Objects not staged for commit:

$ git lfs ls-files
e7e59a98b5 - bigFile.pt

$ git status
On branch feature_branch
nothing to commit, working tree clean
</code></pre>
<p>But at the end push fails as follows?!:</p>
<pre><code>$ git push --set-upstream origin feature_branch
Uploading LFS objects: 100% (1/1), 247 MB | 0 B/s, done.                                                                                                                                                    
Counting objects: 16, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (16/16), 218.00 MiB | 1.08 MiB/s, done.
Total 16 (delta 9), reused 0 (delta 0)
remote: Resolving deltas: 100% (9/9), completed with 6 local objects.
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: 259f0ded862988234bfa0bf1094ba2da8a3b59f4a9a0ea91f8c48ef330598dc4
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File bigFile.pt is 235.15 MB; this exceeds GitHub's file size limit of 100.00 MB
To github.com:reporName.git
 ! [remote rejected] feature_branch -&gt; feature_branch (pre-receive hook declined)
error: failed to push some refs to 'git@github.com:repoName.git'
</code></pre>
<p>BTW, this repository has been added as git submodule to another repository. I am running out of ideas to test and verify here? Any help how to verify and resolve this issue so that I can push this branch is appreciated?</p>
<p>Thanks</p>
","0","3468778","",""
"67781391","339427","2021-06-01 00:20:52","0","1329","<git><unreal-engine4><git-lfs>","Why are all my Unreal Engine uasset files missing after using git lfs migrate import --include=""*.uasset""","<p>I was trying to add large file support for my Unreal Engine project. After adding LFS support I then found the following command to make sure that all the large files where added throughout my version history.</p>
<p>git lfs migrate import --include=&quot;*.uasset&quot;</p>
<p>After running this command I know notice that NON of my blueprints or assets inside the content browser are showing up. If I browse to the file system all the .uasset files are there.</p>
<p>I'm not sure how to get the .uassets to show up in Unreal Editor again.</p>
","0","339427","",""
"67841141","12447766","2021-06-04 16:50:46","-1","582","<git><git-lfs>","Use local Git LFS repo to check if any file changed without copying under .git","<p>I have a folder with lots of binaries. I would like to <em>save</em> the current state, make some changes and see which files are changed by <code>git status</code>. I think it is a good idea to use Git LFS, because it only keeps 3 lines for each file with size and hash information.</p>
<p>The problem is that <code>git add .</code> command takes a lot of time and makes a backup. Is it possible to commit only pointer files without creating LFS objects?</p>
<p>The commands I use:</p>
<pre class=""lang-sh prettyprint-override""><code>$ git init
$ git lfs install
$ git lfs track &quot;*&quot;
$ echo &quot;.gitattributes filter= diff= merge= text&quot; &gt;&gt; .gitattributes
$ git add .
$ git commit -m &quot;previous state&quot;
$ rm -rf .git/lfs/objects/
</code></pre>
<p>I am okay with low level (plumbing) commands if there is not a porcelain solution.
In case anyone wonders how a file is saved with Git LFS, <code>FILENAME</code> is committed in the following format.</p>
<pre><code>version https://git-lfs.github.com/spec/v1
oid sha256:$(sha256sum $FILENAME | awk '{print $1;}')
size $(du -b $FILENAME | awk '{print $1;}')
</code></pre>
","1","12447766","",""
"67926181","2121782","2021-06-10 17:49:44","0","209","<git-lfs>","What should 'git lfs lock' on a file not tracked by LFS do?","<p>What should be the behavior of 'git lfs lock' if its called on a file not tracked by LFS? I did not see this addressed in the documentation</p>
<p>In my experiments with the command line, it allows me to lock a file that isn't tracked by LFS. It subsequently shows that lock when I do a 'git lfs locks'. However, if I do a 'git lfs ls-files' it does not show that file as being tracked.</p>
<p>Is that right?</p>
<p>git-lfs/2.13.3 (GitHub; windows amd64; go 1.16.2; git a5e6585)</p>
","0","2121782","",""
"68004876","9761768","2021-06-16 14:39:19","0","474","<git><git-lfs><git-subtree>","How can I add a git subtree repository without LFS files to a container repository with tracking LFS files?","<p>I have a repository with tracked files do git-lfs (e.g. files with pattern *.png).</p>
<p>Then I want to add a subtree repository that also contains *.png files, but I don't want to track that files to git-lfs, to keep the subtree repository intact.</p>
<p>How can I do that?</p>
<h4>EDIT:</h4>
<p>As pointed by bk2204 in the comments below, subtrees seems to have problems with git-lfs. Specially when the subtree node has lfs files. The two issues <a href=""https://github.com/git-lfs/git-lfs/issues/1948"" rel=""nofollow noreferrer"">here</a> and <a href=""https://github.com/git-lfs/git-lfs/issues/854"" rel=""nofollow noreferrer"">here</a> bring some information.</p>
<p>I've tried the following procedure with a subtree node <strong>without</strong> lfs inside a repository with lfs.</p>
<p>I would like to know if someone could confirm this simple procedure really works. I'm not having troubles so far (but I made backups)</p>
<hr />
<ol>
<li>First, I edited the <code>.gitattributes</code> file including a line to not track files inside a future folder, that will contain the subtree node.</li>
</ol>
<pre><code>*.png filter=lfs diff=lfs merge=lfs -text
futurefoldername/** -filter=lfs -diff=lfs -merge=lfs -text
</code></pre>
<ol start=""2"">
<li>Then, I add the subtree in that folder:</li>
</ol>
<pre><code>git remote add &lt;remote-name&gt; &lt;url&gt;
git subtree add -P futurefoldername &lt;remote-name&gt; master
</code></pre>
<ol start=""3"">
<li>Now, LFS does not change files inside <code>futurefoldername</code> and it seems to be fine to pull and push with <code>git subtree</code> without LFS files.</li>
</ol>
<hr />
","3","9761768","",""
"68036070","2436087","2021-06-18 13:31:37","1","1578","<git><github><git-lfs>","Cleaning up a git-lfs repository that is too big for GitHub","<p>I have a git repository with the following structure</p>
<pre><code>+ LICENSE
+ README.md
+ experiments
   + ... (large csv files stored with git-lfs)
+ reports
   + ... (pdf files stored with git-lfs)
+ demos
   + ... (small example scripts)
+ src
   + ... (main codebase)
+ tests
   + ... (unit tests)
</code></pre>
<p>My work involves running experiments and I use git-lfs to store the experiment results, both data (csv-files) and results (mostly data plots in pdf-form, pdf-presentations).</p>
<p>Recently, I ran a larger experiments and added a csv-file with several gigabytes of size to git-lfs. The official git-lfs implementation has no file size limit, so I thought it would be no problem to store this in git. I did however split the large csv into multiple small ones because I heard some git-lfs implementations have problems with files &gt; 3GB.</p>
<p>Anyhow, adding this large file turned out to be a terrible mistake. Once everything was committed, I tried to push my changes to GitHub and got the following error message.</p>
<pre><code>batch response: This repository is over its data quota. Account responsible for LFS bandwidth should purchase more data packs to restore access.
</code></pre>
<p>Now, I am really not sure how to fix this. I am using GitHub to share the main code with other people, but the experiments don't need to be up there. So, my thought was to split the repository into two. One containing the main code (no git-lfs) and one containing the experiments and reports. There is no need to store the latter one on github, so I should be good using it locally.</p>
<p>So, for the github-repository, I would like to delete the folders <code>experiments</code> and <code>reports</code> completely, including their commit history. I would also like to remove git-lfs completely. On the other side, I would like to preserve the commit history for the rest of the repository.</p>
<p>Is that even possible? If so, how would I go about it? Which tools can I use?</p>
<p>Or, is this situation too messed up and I am better advised to start with a brand-new repository?</p>
","0","2436087","",""
"33455323","3271166","2015-10-31 18:50:13","6","6797","<git><git-lfs>","How to use git lfs with ""normal"" git","<p>I cloned my normal (non-lfs) repository to local drive. Now I want to add a file to it which is larger than 100MB and commit the change to the repository. I used following commands for this:</p>

<pre><code>git clone ....
</code></pre>

<p>Then I copy that file with size >100MB that I want to add to repository.
Lets say name of that file is ""filename"".</p>

<pre><code>git lfs init
git lfs track ""filename""
git add ""filename""
git commit -m ""commit message""
git push -u origin
</code></pre>

<p>And this fails with file size error message saying that files only sizes upto 100MB are allowed.</p>

<p>So how do I use git lfs in this case?</p>
","2","3271166","0","0"
"34579211","482169","2016-01-03 17:08:44","65","53469","<git><github><git-lfs>","How to delete a file tracked by git-lfs and release the storage quota?","<p>How to delete a never-use-again file and release the storage back to the github lfs quota?</p>

<p>Does deleting the reference point of the file in git history work in this situation?</p>
","1","482169","0","0"
"51650142","1185460","2018-08-02 09:28:52","0","1303","<git><apache><gitlab><git-lfs>","gitlab git lfs + apache2 , getting 502 ""AH01097: pass request body failed to 127.0.0.1:8181"" when pushing file","<p>I'm using gitlab  11.1.4 , installed with omnibus package, with apache2</p>

<p>Everything is working fine, except git lfs seems to timeout.</p>

<p>On the client side I can see </p>

<pre><code>bar/foo/lb/bar.cast (99%)
Fatal error: Server error: https://gitlab.example.com/foo/whatever.git/gitlab-lfs/objects/777ed934b03ee88e4d6f25b16e79c1409030ece50d8ff751818f5f064149226c/203686721 from HTTP 502                        
Uploading LFS objects:   0% (0/2), 0 B | 346 KB/s, done
Fatal error: Server error: https://gitlab.example.com/foo/whatever.git/gitlab-lfs/objects/c119f668d98e8f67acefeade50d7d89f50cfe0654bbe6775ad971d229f99612b/233214051 from HTTP 502
error: failed to push some refs to 'ssh://git@gitlab.example.com:8090/foo/whatever'
</code></pre>

<p>and in the apache2 log I see </p>

<pre><code>[Thu Aug 02 10:48:09.195315 2018] [proxy:error] [pid 23394] (104)Connection reset by peer: [client 195.68.4.138:57292] AH01084: pass request body failed to 127.0.0.1:8181 (127.0.0.1)
[Thu Aug 02 10:48:09.195340 2018] [proxy_http:error] [pid 23394] [client 195.68.4.138:57292] AH01097: pass request body failed to 127.0.0.1:8181 (127.0.0.1) from 195.68.4.138 ()
</code></pre>

<p>As the file is 40MB large, I suspect a timeout-ish issue. (uploading a smaller file get me a 422 instead of 502, but I think it's because of this bug:  <a href=""https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/20923"" rel=""nofollow noreferrer"">https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/20923</a>)</p>

<p>I tried to change the following in the apache2 conf </p>

<p>Timeout 2400
  ProxyTimeout 2400
  ProxyBadHeader Ignore </p>

<p>and In the <code>gitlab.rb</code> I put the following </p>

<pre><code>gitlab_workhorse['proxy_headers_timeout'] = ""20m0s""
unicorn['worker_timeout'] = 3600
</code></pre>

<p>and <code>gitlabctl restart</code> </p>

<p>but still 502.</p>

<p>Am I missing something ? </p>
","0","1185460","",""
"51756409","7748562","2018-08-08 22:16:03","6","5974","<git><git-lfs>","Does git lfs work behind a proxy?","<p>My failed attempt:</p>

<p>```</p>

<p>$ git push origin master<br>
batch response: Post 
proxyconnect tcp: tls: oversized record received with length 20527                                                                    </p>
","0","7748562","0","0"
"53321680","24874","2018-11-15 14:30:23","37","17232","<git><git-clone><git-lfs>","What does ""Filtering content"" mean when doing a git clone?","<p>I cloned a git repo and noticed a status line <code>Filtering content</code> which was very slow. This doesn't usually appear. What is it?</p>

<pre><code>remote: Enumerating objects: 30, done.
remote: Counting objects: 100% (30/30), done.
remote: Compressing objects: 100% (26/26), done.
remote: Total 16592 (delta 6), reused 9 (delta 4), pack-reused 16562
Receiving objects: 100% (16592/16592), 14.14 MiB | 1.01 MiB/s, done.
Resolving deltas: 100% (7529/7529), done.
Checking out files: 100% (11475/11475), done.
Filtering content:   6% (115/1729), 390.32 MiB | 1.12 MiB/s
</code></pre>
","0","24874","0","0"
"70058577","186964","2021-11-21 21:01:59","1","200","<git><git-lfs>","Can I copy the LFS settings in .gitattribute to another repository","<p>I'd like to filter the same file types on several (existing) repositories. Of course I could manually add the filters one by one to each repository, or write a bash script. But it would be much easier to just copy the <code>.gitattributes</code> into each repository. However I'm not sure if this is safe, since I don't know if there is something that git sets in the <code>.git</code> of the repo as well.</p>
","1","186964","",""
"70061766","17476471","2021-11-22 06:36:18","1","57","<git><gitlab><git-lfs><large-file-upload>","Setting up git-LFS remotely","<p>My co-worker just left his position, before he left, he created a repo with a lot of binary data(10GB of Unix Executable File) to our team GitLab without using git-LFS. When I try to clone the repo, it takes forever to clone. I researched a bit on setting up git-LFS, most articles show me how to set up LFS locally after cloning the repo. Is there a way to set up git-LFS remotely before cloning?</p>
","0","17476471","",""
"70107869","12348415","2021-11-25 08:23:50","0","111","<git><atlassian-sourcetree><git-lfs>","Is there any way to manually remove a remote as my git lfs contains more than one remote","<p>i have created a repo with lfs installed, but another collaborator also called git lfs install command which after pushing to master caused an issue where now when i am trying to call git lfs pull it says the lfs url contains more than one remote</p>
","0","12348415","",""
"56540406","194106","2019-06-11 09:20:46","10","5064","<git><bitbucket><atlassian-sourcetree><git-lfs>","Configure git-lfs to track files above some size","<p>I have a git repository with git-lfs installed and I would like to have <em>all PDF files above some size</em> in LFS, but not <em>all PDF files</em>, as git-lfs supports. The reason for this is that I have many tiny PDF figure files in vector format which are ok to have in regular version control, and a few large PDFs. </p>

<p>Is it possible to configure git-lfs this way? </p>

<p>I use git from Atlassian source-tree and host the repository in bitbucket, maybe those support this more advanced use-case?</p>
","3","194106","0","0"
"53839454","987706","2018-12-18 18:57:05","1","11753","<git><gitlab><git-lfs>","Git: ""The system cannot find the path specified."" after git lfs migrate","<p>I'm trying to migrate an older git repo to use lfs. I previously succesfully migrated the png images to lfs, using <code>git lfs migrate import --everything --include=""*.png""</code> (I thought png were to only large binary files in the repo).</p>

<p>Now I noticed there were also an xcf source files in there still. So I tried migrating that using <code>git lfs migrate import --everything --include=""*.xcf""</code>.</p>

<p>However, when I now try to <code>git push -f</code> to update it, I get the following error:</p>

<pre><code>PS C:\Users\Pablo\Dev\war-systems&gt; git push -f
open C:\Users\Pablo\Dev\war-systems\Unity - War Systems\Assets\Plugins\badpix\message-16-help.png: The system cannot find the path specified.
error: failed to push some refs to 'https://gitlab.com/TheOddler/war-systems.git'
</code></pre>

<p>The file <code>message-16-help.png</code> is and old file that was deleted at some point in development. It's not in the <code>HEAD</code>, but at some point it was.</p>

<p>Why does this happen now? And how do I fix it?</p>

<p>If it matters, I'm trying to push to gitlab.</p>
","0","987706","",""
"38464691","3493731","2016-07-19 17:15:06","2","1076","<git><git-p4><git-lfs>","git-p4 and config git-p4.largeFileExtensions","<p>I am attempting to convert a Perforce repository to a git one, using <code>git-p4</code> (using git for Windows). I have many images, and would like to use LFS for them. However, I can't seem to get the <code>git-p4.largeFileExtensions</code> config setting to work properly with multiple extensions. If I execute the following:</p>

<pre><code>git config       git-p4.largeFileSystem     GitLFS
git config       git-p4.largeFileExtensions png
git config --add git-p4.largeFileExtensions jpg
git p4 clone --verbose //depot/project@all .
</code></pre>

<p>I get (if I use more than two, all pairs report a similar warning):</p>

<pre><code>WARNING: These git config values clash:
  git config ""git-p4.largefileextensions"" = ""png""
  git config ""git-p4.largefileextensions"" = ""jpg""
</code></pre>

<p>The <code>.git/config</code> file is what I would expect, a multivalue entry for largeFileExtensions:</p>

<pre><code>[git-p4]
        largeFileSystem = GitLFS
        largeFileExtensions = png
        largeFileExtensions = jpg
</code></pre>

<p>The however <code>.gitattributes</code> file created looks like:</p>

<pre><code>#
# Git LFS (see https://git-lfs.github.com/)
#
*.png
jpg filter=lfs -text
</code></pre>

<p>Am I doing something wrong, or does the <code>largeFileExtensions</code> attribute formatted differently?</p>
","0","3493731","0","0"
"71231259","18223888","2022-02-23 04:08:05","0","1635","<gitlab><git-lfs>","git lfs: can't Push","<pre><code>Uploading LFS objects:  98% (681/697), 8.2 GB | 2.3 MB/s                                                                                                                                                           
Uploading LFS objects:  98% (681/697), 8.2 GB | 2.3 MB/s                                                                                                                                                           
Uploading LFS objects:  98% (681/697), 8.2 GB | 2.1 MB/s                                                                                                                                                           
Uploading LFS objects:  98% (681/697), 8.2 GB | 2.1 MB/s                                                                                                                                                           
Uploading LFS objects:  98% (681/697), 8.1 GB | 1.9 MB/s, done.                                                                                                                                                    
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/fb663f1b4d91384adc5ac8fdb9af1913518ff0a13480bcabec9b9a7a2711ac35/174103539) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/b20873242a22c81fe3ec6fa9b7e9cf807d879e41a275e4628e2953da4d36d283/129084241) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/4278efaee7fcc070a4d79bfacfd4b7021a06e6eb85ef249b030e4a6c91245eee/129524737) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/5a45fe82998b215eefe26ba7e42739046a5bf0b3820926415cf9cecc5b34c4ac/140182884) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/a59f68b7b00808383f9d56ed614cb12c9e7a37ab33826035442c55e0765096fd/164722834) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/6203e31bf4abadae7e82459bd95e010d004a50921a24b69d433e1cce29a8c4b3/259587134) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/3cdf5db943a06de4c527fda4537eb4e518156653bbfe0d665c2c0d2f9c539904/128242012) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/2db72b0121456b6c6e9f16d537661d5798b74376af9e40bf81bae91369c5661b/130354900) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/e5cd60ba3ed2830daf1c5aa0e6a340e60f4e119c3b686f7aa432e5dc9ad9825f/131075284) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/f5ec3e90720fb3f363ea4a935c5f5ea2525fe7b464ad6229492d1a8438b57d0b/119885784) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/4019cd76813f24725ceddaea04c07e799975896ee95e371c4b7e57736e1ccb5d/107303384) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/7a0d7883fd4c79a634165a180c85a86541ede52a6ef25e8128cfa99cee1c9753/116349562) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/8af67803d82da913d3a25f08b3a38461dd67a3caa08fd55825279fe83377e0a8/114271984) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/65f35188f43d1a8c51ac6198d3ec68de377fc8f340a2cea5f9a65156720b7deb/117215284) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/411ac0895a5664887d71b1b05d0c2a5ef20082965bf44687b7311e45422da68d/112391747) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/91c3a60e9d11eace70bd1e3dacd687a4481c66df4e81f29fef78deec06684c8d/111344737) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
error: failed to push some refs to 'https://202.nl84.seedit4.me/gitlab/STC/ManySTLsDataSet.git'
MUSIC@DEVs-MacBook-Air ManySTLsDataSet % 
</code></pre>
<p>git push produces such output. how to fix it?</p>
<p>im pushing via https to to the gitlab instance. the df -h on the instance produces:</p>
<pre><code>:~$ watch df -h

Every 2.0s: df -h                                                                                                                                                                 CT14586: Wed Feb 23 05:07:28 2022


Filesystem                Size  Used Avail Use% Mounted on
tank/subvol-14586-disk-0   50G  8.0G   43G  16% /
tank/userdata/14586       3.0T  2.6T  382G  88% /home

</code></pre>
","1","18223888","",""
"71232676","18223888","2022-02-23 07:13:59","0","21","<gitlab><git-lfs>","how to fix it? git gitlab","<pre><code>Locking support detected on remote &quot;origin&quot;. Consider enabling it with:
  $ git config lfs.https://202.nl84.seedit4.me/gitlab/STC/ManySTLsDataSet.git/info/lfs.locksverify true
Uploading LFS objects:  98% (681/697), 8.2 GB | 2.3 MB/s                                                                                                                                                           
Uploading LFS objects:  98% (681/697), 8.2 GB | 2.3 MB/s                                                                                                                                                           
Uploading LFS objects:  98% (681/697), 8.2 GB | 2.1 MB/s                                                                                                                                                           
Uploading LFS objects:  98% (681/697), 8.2 GB | 2.1 MB/s                                                                                                                                                           
Uploading LFS objects:  98% (681/697), 8.1 GB | 1.9 MB/s, done.                                                                                                                                                    
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/fb663f1b4d91384adc5ac8fdb9af1913518ff0a13480bcabec9b9a7a2711ac35/174103539) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/b20873242a22c81fe3ec6fa9b7e9cf807d879e41a275e4628e2953da4d36d283/129084241) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/4278efaee7fcc070a4d79bfacfd4b7021a06e6eb85ef249b030e4a6c91245eee/129524737) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/5a45fe82998b215eefe26ba7e42739046a5bf0b3820926415cf9cecc5b34c4ac/140182884) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/a59f68b7b00808383f9d56ed614cb12c9e7a37ab33826035442c55e0765096fd/164722834) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/6203e31bf4abadae7e82459bd95e010d004a50921a24b69d433e1cce29a8c4b3/259587134) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/3cdf5db943a06de4c527fda4537eb4e518156653bbfe0d665c2c0d2f9c539904/128242012) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/2db72b0121456b6c6e9f16d537661d5798b74376af9e40bf81bae91369c5661b/130354900) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/e5cd60ba3ed2830daf1c5aa0e6a340e60f4e119c3b686f7aa432e5dc9ad9825f/131075284) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/f5ec3e90720fb3f363ea4a935c5f5ea2525fe7b464ad6229492d1a8438b57d0b/119885784) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
LFS: Client error &amp;{%!!(string=https) %!!(string=) %!!(*url.Userinfo=&lt;nil&gt;) %!!(string=202.nl84.seedit4.me) %!!(string=/gitlab/STC/ManySTLsDataSet.git/gitlab-lfs/objects/4019cd76813f24725ceddaea04c07e799975896ee95e371c4b7e57736e1ccb5d/107303384) %!!(string=) %!!(bool=false) %!!(string=) %!!(string=) %!!(string=)}s(MISSING) from HTTP 413
error: failed to push some refs to 'https://202.nl84.seedit4.me/gitlab/STC/ManySTLsDataSet.git'
MUSIC@DEVs-MacBook-Air ManySTLsDataSet % git push
Locking support detected on remote &quot;origin&quot;. Consider enabling it with:
  $ git config lfs.https://202.nl84.seedit4.me/gitlab/STC/ManySTLsDataSet.git/info/lfs.locksverify true
Uploading LFS objects:  98% (681/697), 8.3 GB | 1.6 MB/s                                                                                                                                                           
</code></pre>
<pre><code>$ watch df -h

Every 2.0s: df -h                                                                                                                                                                 CT14586: Wed Feb 23 05:10:07 2022

Filesystem                Size  Used Avail Use% Mounted on
tank/subvol-14586-disk-0   50G  8.0G   43G  16% /
tank/userdata/14586       3.0T  2.6T  382G  88% /home
none                      492K  4.0K  488K   1% /dev
udev                       32G     0   32G   0% /dev/fuse
tmpfs                      32G   36K   32G   1% /dev/shm
tmpfs                      32G   12M   32G   1% /run
tmpfs                     5.0M     0  5.0M   0% /run/lock
tmpfs                      32G     0   32G   0% /sys/fs/cgroup
tmpfs                     6.3G     0  6.3G   0% /run/user/1000
</code></pre>
<p>it gets to the 82% quickly and then freezes. I feel like I need to check files with python script, for being only Cyrillic or UTF-8 or space or letters.</p>
","3","18223888","",""
"71234657","1209486","2022-02-23 09:48:08","0","55","<git-lfs>","How to store Pixelmator files (macOS bundle) to git LFS?","<p>I'm trying to store Pixelmator files (macOS bundle) using LFS on GitHub.</p>
<p>I want to create an image repository and store all my originals (I do editing in Pixelmator Pro).</p>
<p>A Pixelmator &quot;file&quot; looks like this:</p>
<pre><code>directory: myfilename.pxd
    directory: data
      file: ABCD-EFG-XYZ (no file extension, 5 MB)
    directory: QuickLook
      file: Icon.tiff
      file: Thumbnail.tiff
    file: metadata.info
</code></pre>
<p>Based on <a href=""https://github.com/git-lfs/git-lfs/issues/968"" rel=""nofollow noreferrer"">this git-lfs issue</a>, I tried this:</p>
<p><code>git lfs track 'all_my_pixelmator/files/*</code></p>
<p>Now my <em>.gitattributes</em> looks like this:</p>
<pre><code>*.tiff filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.m4a filter=lfs diff=lfs merge=lfs -text
*.mp3 filter=lfs diff=lfs merge=lfs -text
media_cards_pxd/images filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p>So then I committed the directory and pushed it to GitHub.</p>
<p>However, when I check the GitHub UI, it shows that only the TIFF files are stored in LFS; the data files and the info files are not.  When I clone my repo, it has increased in size from 20 MB to 215 MB, so clearly the files got committed incorrectly and are not stored on LFS.</p>
<p>I could add <code>.info</code> to my <code>.gitattributes</code> file, but I don't understand how to add the files in the data directory because they have no file extension (don't know how to do a pattern match in this case).</p>
<p>So how can I configure my repo to ensure that all Pixelmator &quot;files&quot; (any files in a directory that ends in PXD) should be stored in LFS?</p>
<p>Although Pixelmator is macOS software, I'm using git on ubuntu to commit if it matters.</p>
","0","1209486","",""
"38521839","3556110","2016-07-22 08:37:08","6","1617","<git><attributes><git-lfs>","How do I make git-lfs treat a file as binary?","<p>It's possible to make git <a href=""https://stackoverflow.com/questions/11162267/how-do-i-make-git-treat-a-file-as-binary"">treat a file as binary</a>, to avoid attempts to merge and avoid corruption of line endings etc.</p>

<p>I've attempted to do the same with git-lfs, and opened the .gitattributes file to find that git-lfs (already in use in the repo) has added the following attributes:</p>

<pre><code>*.mat filter=lfs diff=lfs merge=lfs -text
</code></pre>

<p>The link above suggests that I add the binary attribute, which is equivalent to:</p>

<pre><code>*.mat -diff -merge -text
</code></pre>

<p>I <em>think</em> it's most likely that this is what I'm looking for:</p>

<pre><code>*.mat filter=lfs -diff -merge -text
</code></pre>

<p>Which I believe should store the file at the git-lfs endpoint and maintain the relevant pointers, but treat it in exactly the same way git would treat a file with the -diff -merge -text attributes. </p>

<p>I'd normally just try this, but am worried about corrupting binaries... so my three-part question is:</p>

<ol>
<li>Is this safe to try?</li>
<li>Is this correct?</li>
<li>Is there any documentation beyond that on <a href=""https://git-scm.com/docs/gitattributes"" rel=""noreferrer"">git attributes</a> that's specific to git-lfs attributes, and if so where?</li>
</ol>

<p>Thanks in advance!</p>

<p>Tom</p>
","2","3556110","0","0"
"71236993","8622814","2022-02-23 12:32:15","9","4041","<git><git-lfs>","git lfs cannot discard file changes (encountered files that should have been pointers)","<p>I have a file using git lfs, but even without me doing anything, it just shows up on git as having changes. I am unable to discard these changes, whether through the VS Code UI, through git reset, or git restore.</p>
<p>Git keeps telling me &quot;Encountered 1 file(s) that should have been pointers, but weren't:&quot;</p>
<p>I am aware of the thread at <a href=""https://stackoverflow.com/questions/46704572/git-error-encountered-7-files-that-should-have-been-pointers-but-werent"">Git error: Encountered 7 file(s) that should have been pointers, but weren&#39;t</a>, but I have tried all the solutions there and none of them helped.</p>
","0","8622814","0","0"
"71241653","10266405","2022-02-23 17:36:02","1","175","<git><ssh><gitlab><scp><git-lfs>","Using git submodules as poor mans git lfs","<p>TL;DR:</p>
<p>Should i use git submodules as a way to include large data in a repository so that the main repository does not bloat?</p>
<p>i am using git to keep track of configurations,settings and scripts for analysis of weather stations i manage for my university. Each Station has its own repository.
On top of that i am using gitlab to host the remotes and keep track of issues with these stations. I really like this workflow.</p>
<p>Now theses stations produce a lot of data in different formats. Some generate just a few MB/month and some, in rare cases, 4GB/month running for multiple years.</p>
<p>I already manage the data with a database(influxdb and grafana) where the data is simplified a little bit for monitoring and quickliy visualising data.
But i really want to keep the RAW original Data somewhere, in case of some issue with the database and just as a dumb backup. Mostly these are csv, json or some other textbased files. And i want that backup to be redundant, reliable and accessible. (Longterm the data will go into some kind of AWS glacier but thats another story)</p>
<p>Obviously, i dont want to keep it in the main repo for the station since this will bloat the repo and introduce problems on gitlab. But i also like the thought that the data is connected somehow to the station it belongs to.</p>
<h2>So how do i store the data without bloating my repo?</h2>
<h3>1. Just store it on a file server and document it then..</h3>
<p>So this one is kind of lame and does not feel complicated enough :D. No seriously since the number of stations will grow and i sometimes want to just do something like <code>git clone --recurse-submodules ...</code> and have everything i need for that station, i want the data somehow to be related to the repo.</p>
<h3>2. Thats what git lfs is made for..</h3>
<p>I think this would be the most obvious solution, but i have one problem with that. I would need to maintain my own instance of gitlab on a server that has enough storage since the limit on gitlab.com is 10GB. Maybe i will manage my own instance in the future where this restriction does not exist but i think i want a dedicated local server for that.
But i dont want to manage my own raid and everything that comes with reliable backup storage. That i want to outsource to some storageprovider or the datacenter at our university. In the gitlab docs is a section about <a href=""https://docs.gitlab.com/ee/topics/git/lfs/#hosting-lfs-objects-externally"" rel=""nofollow noreferrer"">hosting lfs externally</a> but it seems like this external storage needs to support lfs as well.? And it does not seem like i just need to install git lfs there... So maybe still possible, but i guess setting up the backend for that is more complicated.</p>
<h3>3. Using submodules like a fool</h3>
<p>My idea was to just use an extra repository for the data. This repo would be hosted on a cheap dedicated fileserver with enough space and ssh connection. I then would add this remote as a submodule to the mainrepo. I tested this already and it works but:</p>
<h4>a. Adding files is slow</h4>
<p>i expected this, its ok</p>
<h4>b. compressing when pushing and cloning is slow</h4>
<p>no way around that i guess..</p>
<h4>c. writing and receiving is slow</h4>
<p><code>Writing objects: 100% (78/78), 2.28 GiB | 4.24 MiB/s, done.</code></p>
<p><code>Receiving objects:  25% (24/95), 153.55 MiB | 4.56 MiB/s</code></p>
<p>Why? Isnt this just a ssh connection? It tops out at around 4MiB/s while i know that my connection is a lot faster. Around 100MiB/s when using scp to the same server in both directions</p>
<p>I kind of like this solution the most since it does require the least amount of additional software to get it working.</p>
<p>May i get punished by the git gods.</p>
<p>Is it possible to optimize the submodule workflow or should i do it differntly since this just is not what git is made for? I guess there is a very straight forward way doing this which i am not seeing because i am in tunnel vision right now.</p>
","0","10266405","",""
"71242554","4526336","2022-02-23 18:50:20","1","315","<git><git-lfs>","All git commands are hanging","<p>I'm working on a repository on a remote server. The repo uses LFS and totals ~10GB of files. I was able to check out this branch with minimal issues, and have before now had no issues switching branches (this server and the git server are in the same room with 10GE connections). I've modified some code, and I'm trying to save it on another branch.</p>
<pre><code>git checkout -b my_new_branch
</code></pre>
<p>Is hanging. I understand it's a big repo, but it's hanging for quite a long time. I tried</p>
<pre><code>git diff
</code></pre>
<p>To no avail. It also hangs effectively indefinitely. I've yet to leave it for more than a few minutes but I don't see it doing any i/o in iotop.</p>
<p>I've tried cleaning up swap files. There were none so that is not causing any hang issues.</p>
<p>Is this just an indexer of some sort running for a ridiculously long time in git? I'm not seeing any CPU or I/O usage, which is misleading.</p>
","7","4526336","",""
"71294988","11441089","2022-02-28 12:22:52","0","420","<git><bitbucket><git-lfs><git-lfs-migrate>","git lfs migrate info outputs Git can't resolve ref: ""HEAD""","<p>I'm trying to migrate a git repository to Git LFS. I already installed Git LFS with <code>git lfs install</code>. But when I'm executing <code>git lfs migrate info</code> I get the following output (with GIT_TRACE enabled):</p>
<pre><code>&gt; git lfs migrate info
13:10:41.420197 git.c:703               trace: exec: git-lfs migrate info
13:10:41.420282 run-command.c:663       trace: run_command: git-lfs migrate info
13:10:41.426809 trace git-lfs: exec: git 'version'
13:10:41.434261 trace git-lfs: exec: git 'config' '-l'
13:10:41.754159 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' 'HEAD' '--symbolic-full-name' 'HEAD'
Git can't resolve ref: &quot;HEAD&quot;
</code></pre>
<p>I'm not sure what git lfs is doeing but when I execute the last command of the trace myself it seems to work:</p>
<pre><code>&gt; git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' 'HEAD' '--symbolic-full-name' 'HEAD'
13:14:35.705088 git.c:439               trace: built-in: git rev-parse HEAD --symbolic-full-name HEAD
453332128e48ab30cb60cd06e334c76b0571dd76
refs/heads/main
</code></pre>
<p>My Git-LFS setup is following:</p>
<pre><code>&gt; git lfs env
13:15:36.500676 git.c:703               trace: exec: git-lfs env
13:15:36.500746 run-command.c:663       trace: run_command: git-lfs env
13:15:36.506168 trace git-lfs: exec: git 'version'
git-lfs/2.9.2 (GitHub; linux amd64; go 1.13.5)
git version 2.25.1

13:15:36.508870 trace git-lfs: exec: git '-c' 'filter.lfs.smudge=' '-c' 'filter.lfs.clean=' '-c' 'filter.lfs.process=' '-c' 'filter.lfs.required=false' 'rev-parse' 'HEAD' '--symbolic-full-name' 'HEAD'
13:15:36.520625 trace git-lfs: exec: git 'config' '-l'
Endpoint (bitbucket)=https://***CENSORED***.git/info/lfs (auth=none)
LocalWorkingDir=/some/path/MyGitRepo
LocalGitDir=/some/path/MyGitRepo/.git
LocalGitStorageDir=/some/path/MyGitRepo/.git
LocalMediaDir=/some/path/MyGitRepo/.git/lfs/objects
LocalReferenceDirs=
TempDir=/some/path/MyGitRepo/.git/lfs/tmp
ConcurrentTransfers=3
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=/some/path/MyGitRepo/.git/lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic,lfs-standalone-file
UploadTransfers=basic,lfs-standalone-file
GIT_CURL_VERBOSE=1
GIT_EXEC_PATH=/usr/lib/git-core
GIT_TRACE=1
git config filter.lfs.process = &quot;git-lfs filter-process&quot;
git config filter.lfs.smudge = &quot;git-lfs smudge -- %f&quot;
git config filter.lfs.clean = &quot;git-lfs clean -- %f&quot;
13:15:36.524541 trace git-lfs: filepathfilter: rewrite &quot;.git&quot; as &quot;**/.git/**&quot;
13:15:36.524562 trace git-lfs: filepathfilter: rewrite &quot;**/.git&quot; as &quot;**/.git&quot;
13:15:36.524731 trace git-lfs: filepathfilter: accepting &quot;tmp&quot;
</code></pre>
<p>I should mention that I did not push the repository yet to the server as I first wanted to migrat e to Git-LFS. Has anyone an idea where the issue could be?</p>
","0","11441089","",""
"71301039","4332228","2022-02-28 21:05:02","0","1460","<git><github><unreal-engine4><git-lfs>","Cannot push to github with the unreal engine","<p>So I followed this tutorial</p>
<p><a href=""https://www.youtube.com/watch?v=F5Yn7y9Ib_I&amp;"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=F5Yn7y9Ib_I&amp;</a></p>
<p>And got this error message.</p>
<blockquote>
<p>Enumerating objects: 2360, done. Counting objects: 100% (2360/2360),
done. Delta compression using up to 6 threads Compressing objects:
100% (2355/2355), done. error: RPC failed; curl 55 Send failure:
Connection was aborted send-pack: unexpected disconnect while reading
sideband packet Writing objects: 100% (2360/2360), 2.59 GiB | 14.22
MiB/s, done. Total 2360 (delta 61), reused 0 (delta 0), pack-reused 0
fatal: the remote end hung up unexpectedly Everything up-to-date</p>
</blockquote>
<p>I did everything in that tutorial except when I first tried to push it said that large files  could not be uploaded. I did install GitLFS. Im wondering if GitLFS was not installed correctly and if I need to do it again.</p>
<p>Is there a way I can make sure that GitLFS is installed correctly?</p>
","2","4332228","",""
"71317129","588001","2022-03-02 03:28:35","1","694","<git><git-lfs>","Undo local changes in git-lfs","<p>I have a git-lfs repo with local changes and I want to discard them. I tried the following command without success:</p>
<p><code>git checkout file</code></p>
<p><code>git checkout -- file</code></p>
<p><code>git lfs checkout file</code></p>
<p><code>git reset --hard</code></p>
<p>What command should I use?</p>
<p>Thanks!</p>
<p><strong>EDIT:</strong></p>
<p>Viewing the modifications with gitk revealed that r/w attributes were changed for all files. Contents are identical.</p>
<pre><code>-------------------- .gitattributes --------------------
old mode 100644
new mode 100755
</code></pre>
<p>Also tried the suggestions mentioned here without success:
<a href=""https://stackoverflow.com/questions/11383094/unstaged-changes-left-after-git-reset-hard"">Unstaged changes left after git reset --hard</a></p>
","3","588001","",""
"71320888","11441089","2022-03-02 10:11:37","2","551","<git><git-lfs>","git lfs prune retaining almost all files","<p>I having a repository with a huge amount of files which are tracked by git-lfs. I pushed them all to my remote via <code>git lfs push --all &lt;remote&gt;</code>. Then I tried to decrease my local repository size by pruning the git-lfs objects:</p>
<pre><code>&gt; git lfs prune --force
prune: 39598 local objects, 39594 retained, done.
prune: Deleting objects: 100% (4/4), done.
</code></pre>
<p>However from my 39598 objects 39594 are retained and only 4 are deleted. As far as I understand <code>git lfs push -all</code> pushes every file to my remote host. And then <code>git lfs prune --force</code> should delete every files which is not pushed (but every file should be pushed?!). Am I misunderstood anything? Are the any option to see which file has been pushed and which file not?</p>
","0","11441089","0","0"
"53873881","8796941","2018-12-20 18:01:02","2","321","<git><bitbucket><git-lfs>","How to locally manage git lfs files (in same directory with normal git files, if possible)","<p>I'm trying to work with git lfs (Large File Support) files on my Windows 10 computer.  The ultimate goal is to be able to do a diff between the files in the git repository and the files in another folder, but this question is about the way git lfs files are stored and managed locally.  I'm using SourceTree as well as command line git and have Cygwin installed (and I'm very familiar with Unix commands and development in general).</p>

<p>In my local repository (a clone of a BitBucket repository), some of them seem to be showing up with full content under the directory structure where the rest of the git files are stored.  Others are showing up as zero byte files, which I understand it some kind of pointer used by git lfs.  I also know that the <code>.git/lfs/objects/</code> folder seems to be where the local copies of some of the LFS objects are stored.</p>

<p>When I do <code>git lfs ls-files</code>, some of the files that I know are checked in to git lfs aren't listed at all (some large .mp4 video files, specifically).  I am on the latest version of the correct branch (master) where the files are checked in and visible and downloadable via the web interface.  I have tried doing <code>git lfs pull</code> and many other commands, but the files aren't showing up the way I need and expect them to.</p>

<p>Ideally, I would like to have a copy of the current version of the lfs files (content and all) in the same folder structure (locally) with the rest of the files.  I am fine if it is elsewhere (locally) so long as I have some way to get at it.  (I can figure out how to deal with it if I need to, so long as I have the content of the files available.)</p>

<p>So what am I missing or doing wrong?  Why can't I locate the content of some files?  Why does <code>git lfs ls-files</code> not list all the files I'm expecting it to?</p>
","0","8796941","0","0"
"71364497","3279889","2022-03-05 17:44:28","0","536","<git><github><git-lfs>","How to disable git LFS for a single remote that does support LFS?","<p>I have a private github repository with LFS enabled and some files already stored in LFS. As github's LFS bandwidth is rather limited (1GB of download a month on free plan), I have recently started switching to a self hosted gitea server, but for legacy automation reasons, I still need to push new commits to github.</p>
<p>Now I'm wondering, is there a way to only push the LFS link files to github and not the binary objects themselves, while retaining the ability to push LFS normally to my private gitea remote (the local cloned repository currently has 2 remotes set)? In my googling I've only found how to disable LFS for remotes that don't support it (github obviously does) or how to completely get rid of LFS in a repo, none of which sadly help my problem.</p>
","3","3279889","",""
"71447678","17991460","2022-03-12 07:13:31","1","197","<git><alias><git-lfs>","git lfs: wildcard in path works not in git alias","<p>on a windows system, I want to lock all files with a Extension in a specific folder.</p>
<p>These commands work as expected:</p>
<pre><code>git lfs lock $(git rev-parse --show-toplevel)/lockdata/*.txt
git lfs unlock $(git rev-parse --show-toplevel)/lockdata/*.txt
git add $(git rev-parse --show-toplevel)/lockdata/*.txt&quot;
</code></pre>
<p>Now i define aliases:</p>
<pre><code>git config --local alias.libsadd      &quot;add $(git rev-parse --show-toplevel)/lockdata/*.txt&quot;
git config --local alias.libslock     &quot;lfs lock $(git rev-parse --show-toplevel)/lockdata/*.txt&quot;
git config --local alias.libsunlock   &quot;lfs unlock $(git rev-parse --show-toplevel)/lockdata/*.txt&quot;
</code></pre>
<p>Then the .git/config file holds:</p>
<pre><code>[alias]
    libslock = lfs lock E:/TEMP/test_lfs/lockdata/*.txt
    libsunlock = lfs unlock E:/TEMP/test_lfs/lockdata/*.txt
    test = add E:/TEMP/test_lfs/lockdata/*.log
</code></pre>
<p>&quot;git libsadd&quot; works as expected. &quot;git libslock&quot; does not:</p>
<pre><code>$ git libslock
lfs: unable to canonicalize path &quot;E:/TEMP/test_lfs/lockdata/*.txt&quot;: The filename, directory name, or volume label syntax is incorrect.
</code></pre>
<p>Executing directly in git bash works as expected</p>
<pre><code>$ git lfs lock E:/TEMP/test_lfs/lockdata/*.txt
Locked lockdata/aaa.txt
Locked lockdata/bbb.txt
</code></pre>
<p>Executing in commandline does something else (locking a nonexisting &quot;*.txt&quot; file), so a batch file is no workaround</p>
<p>Any ideas where the different behaviour in the alias comes from (and how to fix)?</p>
","4","17991460","",""
"71448559","8446781","2022-03-12 09:37:19","4","4930","<linux><git><amazon-ec2><git-lfs>","Git Large File Storage / How to install git lfs on AWS EC2 Linux 2 / ""No package git-lfs available.""","<p>How to install <code>git-lfs</code> on an Amazon EC2 (Amazon Linux 2) instance?</p>
<p>Based on <a href=""https://github.com/git-lfs/git-lfs/blob/main/INSTALLING.md"" rel=""nofollow noreferrer"">https://github.com/git-lfs/git-lfs/blob/main/INSTALLING.md</a> did I tried:</p>
<pre><code>sudo yum install git -y;
cd /home/ec2-user;
curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | sudo bash
   -&gt; which tells me afterwards: 
   The repository is setup! You can now install packages.
sudo yum install git-lfs
   -&gt; gives me: 
   Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
   No package git-lfs available.
   Error: Nothing to do
</code></pre>
<hr />
<p>Future commands (not possible yet duo <code>git: 'lfs' is not a git command. See 'git --help'.</code> after <code>git lfs install</code>) would than be based on <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">https://git-lfs.github.com/</a></p>
<pre><code>git lfs install
...
git clone https://yourrepo.git;
</code></pre>
<hr />
<p>Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type / Arm</p>
","2","8446781","",""
"71465766","17194313","2022-03-14 09:50:45","2","217","<git><git-lfs>","How do you fix a massive `.git` folder (2Gb+)?","<p>The project I'm working on involves some large files (eg. Jupyter notebooks, some data files, some pickled objects) - and over time the .git folder has become very large.</p>
<p>Right now it's at 2.1Gb, but the trajectory is clear and not good.</p>
<p>What options do we have? I'm aware of:</p>
<ol>
<li>Archive the git history and copy over the HEAD to a fresh repository (and be more careful with large files).</li>
<li>Prune large files from the history.</li>
<li>Implement something like git-lfs going forward.</li>
</ol>
<p>Any recommendations?</p>
","3","17194313","",""
"71601785","1833601","2022-03-24 11:36:39","0","85","<java><git><command><git-clone><git-lfs>","git (lfs) clone hanging for image files when executed from java application","<p>In my Java application (running on Windows) I need to clone a git repository.
My command is:</p>
<pre><code>&lt;path_to_git&gt;\bin\git.exe clone --depth 1 --branch &lt;branch&gt; &lt;path_to_git_repo&gt;.git &lt;destination&gt;
</code></pre>
<p>When I execute this command from cmd.exe everything is fine, git finishes and all my files are there.
However, when I execute this command from my Java application ie.</p>
<pre><code>String cmd = &lt;the above command&gt;;
Process p = Runtime.getRuntime().exec(command);
p.waitFor();
</code></pre>
<p>the following happens:</p>
<ol>
<li>The download starts, I can see this in the task manager but also in the destination folder where most of the files are checked out</li>
<li>Download finishes, there is no network activity, the p.waitFor() call doesn't return and I have processes git.exe and git-lfs.exe still running</li>
<li>When using Procmon64.exe I see that git.exe and git-lfs.exe are working just as long I observer network activity, afterwards they don't do nothing at all.</li>
<li>A comparison of the working copy resulted from running the git clone from cmd.exe and the Java aopplication reveals there are no image files downloaded using the Java application</li>
</ol>
<p><a href=""https://i.stack.imgur.com/NW5pV.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NW5pV.jpg"" alt=""comparison"" /></a></p>
<p>I guess it's something related to LFS but I have no clue how to debug this further. Any help would be much appreciated.</p>
","7","1833601","",""
"71642000","18571327","2022-03-28 03:03:24","2","1095","<python-3.x><git-lfs>","Progress bar while fetching files from git-lfs","<p>I'm trying to fetch files from git-lfs and show some kind of progress, but while calculating the size of the file it shows around 100 bytes(pointer size), whereas the actual size of the file is &gt;200 mb.</p>
<pre><code>with open(file_name, &quot;wb&quot;) as f:
    print(&quot;Downloading %s&quot; % file_name)
    response = requests.get(link, stream=True)
    total_length = response.headers.get('content-length')

    if total_length is None: # no content length header
        f.write(response.content)
    else:
        dl = 0
        total_length = int(total_length)
        for data in response.iter_content(chunk_size=4096):
            dl += len(data)
            f.write(data)
            done = int(50 * dl / total_length)
            sys.stdout.write(&quot;\r[%s%s]&quot; % ('=' * done, ' ' * (50-done)) )    
            sys.stdout.flush()
</code></pre>
<p>This is my approach.</p>
","1","18571327","",""
"53946456","2713740","2018-12-27 14:13:33","0","1082","<git><gitlab><git-lfs>","git remove file and history from all branches","<p>I had created a private repository on gitlab over a year ago and over time the repo has grown a fair bit. One mistake in hindsight from me was to put some large binary files in the repository. I did not know about <code>git-lfs</code>and the repo has now grown quite substantially.</p>

<p>So what I thought might be a possible approach would be:</p>

<ul>
<li>Remove the files along with their history from the entire repository (on all branches as well.</li>
<li>Enable <code>git-lfs</code> (again somehow on all branches).</li>
<li>Add these files (again on all the branches).</li>
</ul>

<p>The situation is that I have quite a few active branches on the repository. Is there a way to do this somehow across all branches with a minimal set of commands?</p>

<p>Another way, of course, is to archive this repo and then start from scratch in a brand new repository and enable <code>git-lfs</code> and add everything manually. However, given the number of branches, this again seems tedious.</p>
","3","2713740","",""
"71663330","4533188","2022-03-29 13:52:24","0","1025","<git><git-lfs><dvc><git-annex>","What is the advantage of DVC, git-annex, git-lfs for large or binary files over git?","<p>If I have different versions of a file, e.g., in different branches, and I try to reconcile those, git will has great mechanisms for that. However, in order to do the reconciliations, e.g., in a merge, git requires access to the &quot;inside&quot; of the file. Thus files should be text files.</p>
<p>If I change a version controlled file, git does not save the delta between those files, but safes and entire snapshot of the file. If one makes a change, even a small change, to a large file, the entire files will be stored twice by git. Thus files should be small.</p>
<p>Files that are either large or binary (or both), they should not be tracked by Git. If I still need them in my project, I should use something like DVC, git-annex, git-lfs.</p>
<p>As far as I understand, all three of those keep the those other files outside of git, and keep a reference, which is tracked by git. I will use DVC as a stand-in, as I know even less about the other two.</p>
<ol>
<li><p>In DVC, the reference is a text file and thus, git will not get confused. However, since it is only a reference, there is not much merging to be done by git anyways. So, git's reconciliation-capabilities are not really required. What is the advantage of using DVC then regarding this aspect? Can't I just use git and just not use those mechanisms?</p>
</li>
<li><p>In DVC, it seems that if I change a large file, just like in git, a snapshot of that file is created (not a delta saved). So, how does this improve the situation compared to git? I still get lots of (near) copies of this big file.</p>
</li>
</ol>
<p>I understand from <a href=""https://stackoverflow.com/a/35578715/4533188"">here</a> that git-lfs keeps most of the (near) copies of my file in the remote storage. Only if I checkout the respective version of the large file, the files is downloaded. In that case, while I would be correct about my point 2, at least it is only a &quot;problem&quot; of the server (in terms of space), but not on my local disk space and also not for the internet bandwidth usage. This might be the same for DVC.</p>
<p>Are my &quot;objections&quot; or &quot;caveats&quot; of the points 1 and 2 valid?</p>
","8","4533188","",""
"71670983","732174","2022-03-30 02:56:22","1","1271","<ssh><git-lfs>","stdin: is not a tty when running 'git push' - github over ssh","<p>I am using Git on Windows and everything was working fine till recently.</p>
<p>In the last few days I have been getting an error when trying to push my local branch to remote on GitHub. I am connecting to GitHub via SSH. The error that I'm getting is</p>
<pre><code>stdin is not a tty
error: failed to push some refs to 'github.com:xxx/yyy.git'
</code></pre>
<p>This happens regardless whether I try to push a new branch (without a remote) or an existing one. Both of those commands fail in the same way:</p>
<pre><code>git push
git push -u origin tomasz/test
</code></pre>
<p>all other git commands seem to be working fine, i.e. <code>git pull</code>, <code>fetch</code> etc.</p>
<p>I have been googling for the last few days but couldn't find anything that would fix it</p>
<p><a href=""https://i.stack.imgur.com/rTSoC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rTSoC.png"" alt=""enter image description here"" /></a></p>
<p>Update 1:
I tried one of the solutions proposed by running <code>pull --rebase ...</code>, this is the outcome:
<a href=""https://i.stack.imgur.com/HoNRw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HoNRw.png"" alt=""enter image description here"" /></a></p>
<p>Update:2
Git Trace failed ssh protocol connection gives error
<code>14:49:50.463468 trace git-lfs: pure SSH protocol connection failed: Unable to negotiate version with remote side (unable to read capabilities): EOF</code>
<a href=""https://i.stack.imgur.com/yXAsQ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yXAsQ.png"" alt=""enter image description here"" /></a></p>
","6","732174","",""
"71693987","18644454","2022-03-31 14:07:07","1","94","<unity-game-engine><github><archive><git-lfs><hub>","""Archives"" section not present in git hub repository setting","<p>I want to include a unity file on git hub. To upload a unity file git-lfs is needed, so we have to enable the include git-lfs under the archive section but the archive section is not found in my repository:</p>
<p><a href=""https://i.stack.imgur.com/qbiC2.png"" rel=""nofollow noreferrer"">screenshot</a></p>
<p>I am searching for the solution to this problem online but have not been able to find any solution to this problem.</p>
","0","18644454","",""
"71708327","8484214","2022-04-01 14:13:06","2","939","<git><macos><bitbucket><git-lfs>","git lfs pull does not download lfs files on mac from bitbucket","<p>After entering <code>git lfs pull</code> outputs this</p>
<pre><code>% git lfs pull
Downloading LFS objects:   0% (0/1), 0 B | 0 B/s 
</code></pre>
<p>and nothing happens.</p>
<p>Repository located on bitbucket.</p>
<pre><code>% git --version
git version 2.32.0 (Apple Git-132)
</code></pre>
<pre><code>% git lfs --version
git-lfs/3.1.2 (GitHub; darwin amd64; go 1.17.6)
</code></pre>
<p>Also i tried <code>git lfs fetch</code> but there is the same problem</p>
<pre><code>% git lfs fetch  
fetch: Fetching reference refs/heads/master
Downloading LFS objects:   0% (0/29088), 0 B | 0 B/s 
</code></pre>
<p>I expecting downloading files</p>
","2","8484214","",""
"71734264","111575","2022-04-04 08:42:11","0","544","<git-lfs>","How to query for objects tracked by LFS on github or any other remote","<p>Looking over the docs and trying some semi-random commands, I couldn't find a way to use <code>git lfs</code> to query for objects that were tracked by LFS.</p>
<p>Locally, I can just use:</p>
<pre class=""lang-sh prettyprint-override""><code>git lfs ls-files -all
</code></pre>
<p>Which, interestingly, does give me a list of OIDs (pointers) and their original file name and location, but does not give me the actual location of the large binary files. I can find them only by searching for the OID in the <code>.git\lfs\objects</code> dir. i'm not aware of a better way.</p>
<p>Is there a synonym for <code>lfs ls-files</code> where I can query the remote?</p>
<p>I'm mainly asking this because I notice a discrepancy between the files tracked by LFS locally and the ones tracked on the remote server. After <code>git clone</code> the set of files tracked by LFS is far larger than the files that I can find manually having an OID pointer on the Github server. I'm trying to understand why this discrepancy exists.</p>
","3","111575","",""
"71917047","14514393","2022-04-18 21:02:22","0","136","<windows><git-lfs>","How are git commands broken?","<p>I installed git lfs from the website, then ran git lfs install and it said:</p>
<pre><code>git lfs install
--&gt;
fatal: 'lfs' appears to be a git command, but we were not
able to execute it. Maybe git-lfs is broken?
</code></pre>
<p>I tried uninstalling the lfs installer and re-installing, didnt change anything.</p>
<p>I'm on windows 10, WSL 2, Ubuntu 20.04.4</p>
<p>this is the website: <a href=""https://git-lfs.github.com/"" rel=""nofollow noreferrer"">https://git-lfs.github.com/</a></p>
","2","14514393","",""
"71950606","13494233","2022-04-21 07:39:42","3","323","<git><git-lfs><git-gc>","git partial clone garbage collection","<p><strong>Question:</strong> How can I remove / prune / gc unreferenced blobs in a partially cloned git repository?</p>
<p><strong>Details:</strong> I am evaluating whether <a href=""https://git-scm.com/docs/partial-clone"" rel=""nofollow noreferrer"">Git Partial Clone</a> can become a replacement for Git LFS, now where both GitLab and GitHub seem to have implemented full support for it (I couldn't find a <em>beta</em> label). As large binaries / blobs are only fetched on checkout with <code>--filter=blob:none</code>, the git repository on disk and the fetch performance seem both reasonably fast.
That being said, I am struggling how to clean / prune the blobs similar to git LFS prune. When working with a reasonably sized repository over time, you still end up with all blobs that have accumulated over time that are not referenced by HEAD (anymore).</p>
<p><strong>What I've tried</strong>: I was hoping that <code>git gc --prune=today --aggressive</code> would be able to understand the active filter (or that I can pass a filter) to convert all blobs / trees / commits, that are not referenced by the current checkout, to promisor objects. Unfortunately, I could not find a way to reduce the size of the partial cloned repository after using it for quite a while</p>
<p><strong>edit:</strong> I am using git version 2.36.0</p>
","6","13494233","0","0"
"71995166","2426732","2022-04-25 06:15:14","1","333","<git-lfs>","git lfs fetch -all stuck when fetching non-lfs historical object","<p>git lfs fetch -all output as follow:</p>
<pre><code>...
12:28:46.546451 trace git-lfs: fetch Assets/GameLib/Editor/Log/Console.Editor.dll [325411bb444577bf87722995507c4b25e7f84ed2816019193be3b33be5f8ee0c]
12:28:46.546963 trace git-lfs: fetch Assets/GameLib/Editor/Log/Console.Editor.dll [a0c906d2e702bdc8b6860237f8be21a134e63bfcdf9bedf9cacd2c97ba53b15e]
</code></pre>
<p>[325411bb444577bf87722995507c4b25e7f84ed2816019193be3b33be5f8ee0c] is a lfs object, [a0c906d2e702bdc8b6860237f8be21a134e63bfcdf9bedf9cacd2c97ba53b15e] is not lfs object,  but git lfs fetch still want to fetch it then stuck witout error ouput, and other lfs objects aren't been fetched.</p>
<p>Because of these missing lfs objects, I can not do git merge!</p>
<pre><code>Unable to find source for object 90af847f7266c61641eebac20fe6f5a884306429a7a6ca22cad732e580b97644 (try running `git lfs fetch --all`)
</code></pre>
<p>Is there any way to work around or fix this issue?</p>
","2","2426732","",""
"71995542","12557307","2022-04-25 06:57:09","1","120","<git-lfs>","Doing git pull changes the permission of untracked files","<p>I've been having a problem where all files that I don't want to be tracked by git keep changing permission from 644 to 444 whenever I do git pull (I'm currently using CentOS 7). I'm using git-lfs with the .gitattributes contains:</p>
<pre><code>[!.]* filter=lfs diff=lfs merge=lfs -text lockable
</code></pre>
<p>I've also set the following in the .git/config</p>
<pre><code>[core]
filemode = false
autocrlf = true
</code></pre>
<p>I've been using git-lfs to tracked all type of files that being pushed to the remote server but there are files that I wished stayed and can be edited locally. Its a hassle to change the permission everytime I am pulling the changes from remote.</p>
","0","12557307","0","0"
"54074114","7936836","2019-01-07 12:05:52","1","276","<git><git-lfs>","How to make `git lfs` recognize `core.filemode=false`?","<p>I use <code>git-lfs 2.4.2</code> with <code>git 1.8.3.1</code> in centos 7. 
git config as below:  </p>

<pre><code>[root@localhost www]# git config --list
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
filter.lfs.clean=git-lfs clean -- %f
core.safecrlf=true
core.filemode=false
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.safecrlf=true
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
</code></pre>

<p>Through <a href=""https://stackoverflow.com/questions/54071612/how-to-write-post-checkout-hook-to-chmod-666-to-all-files"">How to write post-checkout hook to chmod 666 to all files?</a>  ,I set <code>post-checkout</code> hook as below:  </p>

<pre><code>##!/bin/bash
## post-chekcout script

set -e

command -v git-lfs &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 ""\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-checkout.\n""; exit 2; }
git lfs post-checkout ""$@""

exec chmod -R a+rwX .
</code></pre>

<p>After <code>git checkout -b develop</code>, a lots of <code>.jpg</code>,<code>.gif</code> (files tracked by git-lfs) chagned mod as below:  </p>

<pre><code># On branch develop
# Changes not staged for commit:
#   modified:   admin/images/admin_tit_bg.jpg
#   modified:   user/images/ajax_loader.gif
</code></pre>

<p>After that,I run <code>git commit -am</code>,then <code>git checkout master</code>,get below errors:  </p>

<pre><code>Pointer file error: Unable to parse pointer at: ""admin/images/admin_tit_bg.jpg""
Pointer file error: Unable to parse pointer at: ""user/images/ajax_loader.gif""
Checking out files: 100% (321/321), done.
Switched to branch 'master'
</code></pre>

<p>It seemed <code>git-lfs</code> doesn't recognize <code>core.filemode=false</code>.How to solve it?</p>
","0","7936836","",""
"72050445","4708150","2022-04-28 21:31:10","1","1593","<ssl-certificate><github-actions><git-lfs>","GitHub self-hosted action runner git LFS fails x509 certificate signed by unknown authority","<p>I am trying to create a GitHub action that runs on a windows server self-hosted runner and I'm stuck on my checkout failing at the LFS download portion</p>
<p>I'm using</p>
<pre class=""lang-yaml prettyprint-override""><code>- uses: actions/checkout@v3
  with:
    lfs: true
</code></pre>
<p>The checkout for the normal code works fine, but when it gets to the LFS download step I get a lot of messages complaining about x509: certificate signed by unknown authority.</p>
<blockquote>
<p>LFS: Get &quot;https://github-cloud.githubusercontent.com/alambic/details_changed_to_protect_the_innocent&quot;: x509: certificate signed by unknown authority</p>
</blockquote>
<p>The self-hosted runner is on a domain that is behind a firewall that interrogates https traffic and inserts its own certificate into the chain, so I'm guessing that the unknown authority is that certificate, but I don't know where that certificate needs to be trusted so that things work.</p>
<p>The certificate is trusted by the OS and is installed in the certificate store through a group policy, but it seems that git LFS is verifying the certificate chain separate from that and complains anyway because the certificate is unexpected.</p>
<p>A common solution I've seen floating around for things like this is just turn off SSL checking, but that feels like just a temporary hack and not a real solution. I would like for this to work with all security in place.</p>
<p>As an additional note, this is running on a server that is also running TeamCity, and the TeamCity GitHub config is able to clone repos with LFS from that same server, so these problems are just inside of the GitHub action runner environment that gets set up.</p>
","0","4708150","0","0"
"72121642","81306","2022-05-05 03:35:37","-1","470","<git><github><git-lfs>","git push returns ""unknown value given to http.version: 'HTTP/1.1.""","<p>My github repo started to give me this error when pushing:</p>
<p><strong>unknown value given to http.version: 'HTTP/1.1.'</strong></p>
<p>Here is the full log:</p>
<pre><code> % git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)

nothing to commit, working tree clean
% git push
warning: unknown value given to http.version: 'HTTP/1.1.'
batch response: Unknown HTTP version &quot;HTTP/1.1.&quot;                                                          
Uploading LFS objects:   0% (0/7), 0 B | 0 B/s, done.
error: failed to push some refs to 'https://github.com/blabla/unity-blabla.git'
</code></pre>
<p>How can I resolve it?</p>
","5","81306","",""
"72125944","2384296","2022-05-05 10:48:46","1","219","<git><git-lfs><git-lfs-migrate>","Does git lfs migrate --no-rewrite change all the branches? And will it change the large file from history to LFS objects?","<p>In my repo, I have large files committed in history and also present in latest commit.</p>
<p>I want to use git lfs migrate --no-rewirte so that the previous commits SHAs does not get changed</p>
<p>But will --no-rewrite change all the large files objects from history with LFS object?</p>
<p>Can I use &quot;--everything&quot; flag to update all the remote branches?</p>
","0","2384296","",""
"54185170","2059584","2019-01-14 16:12:50","1","2156","<git><git-lfs>","git lfs ""Could not check out <file>""","<p>I'm trying to clone a repository which uses <code>git-lfs</code>.
Although main clone went fine, when I try to run <code>git lfs pull</code> some of the files are not updated and it prints error of form:</p>

<pre><code>Could not checkout out ""path/to/file""
</code></pre>

<p>What could be the problem?</p>

<p>All of the files which are not downloaded have been locked before.</p>
","0","2059584","",""
"72186566","397830","2022-05-10 12:45:27","1","2460","<git><git-lfs><husky>","""Hook already exists: pre-push"" after adding new git hook","<p>In a git repository, where we already have a .Net solution, we recently added an angular part.</p>
<p>For this angular part, we did add some hooks with husky. Since the frontend, that contains the package.json is in a subfolder, we did the following:</p>
<ol>
<li>npm install husky --save-dev</li>
<li>Ran <code>cd .. &amp;&amp; husky install ./Frontend/.husky</code></li>
<li>Added a &quot;prepare&quot; script: <code>&quot;prepare&quot;: &quot;cd .. &amp;&amp; husky install ./Frontend/.husky&quot;</code></li>
<li>ran <code>npx husky add .husky/pre-commit &quot;cd ./Frontend &amp;&amp; npm run lint&quot;</code></li>
<li>We also added a hook to do the automatic npm install after getting the code: <code>npx husky add .husky/post-merge &quot;cd ./Frontend &amp;&amp; npx git-pull-run --pattern 'package-lock.json' --command 'npm install'&quot;</code></li>
</ol>
<p>This seems to work fine locally, but when the repository is checked out by our CI agent(azure devop), we get an error:</p>
<pre><code>Syncing repository: XXX (Git)
Prepending Path environment variable with directory containing 'git.exe'.
git version
git version 2.30.2.windows.1
git lfs version
git-lfs/2.13.3 (GitHub; windows amd64; go 1.16.2; git a5e65851)
git config --get remote.origin.url
git clean -ffdx
git reset --hard HEAD
git config gc.auto 0
git config --get-all http.https://xxx@dev.azure.com/yyy/zzz/_git/aaa.extraheader
git config --get-all http.extraheader
git config --get-regexp .*extraheader
git config --get-all http.proxy
git config http.version HTTP/1.1
git lfs install --local
Hook already exists: post-merge

    #!/usr/bin/env sh
    . &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;
    
    cd ./Frontend &amp;&amp; npx git-pull-run --pattern 'package-lock.json' --command 'npm install'

To resolve this, either:
  1: run `git lfs update --manual` for instructions on how to merge hooks.
  2: run `git lfs update --force` to overwrite your hook.
##[error]Git-lfs installation failed with exit code: 2
</code></pre>
<p>This error doesn't happen when azure devop has a clean repository, but on the second run only.</p>
<p>I tried to run the git lfs update --manual/--force commands, without any changes.</p>
<p>How to properly integrate git-lfs with git hooks?</p>
","0","397830","",""
"72205544","2384296","2022-05-11 17:54:02","8","536","<git-lfs><git-lfs-migrate>","git lfs migrate with --everything is not migrating all the remote branches","<p>I cloned a repo which has 10+ remote branches and 20+ tags.</p>
<p>Cloned repo has the default branch master checkout.</p>
<p>When I ran git lfs migrate, it migrated all the tags but migrated only master branch, other remote branches were not migrated. Is this the expected behavior? Do I need to checkout all the remote branches before running &quot;git lfs migrate import  --everything --include=&quot;*.bin&quot;&quot; ?</p>
<p>LFS version is 3.1.4</p>
","2","2384296","",""
"54367756","4833070","2019-01-25 14:57:02","3","1550","<git><git-lfs>","Get old revision of a git-lfs file","<p>Kinda like how I can do <code>git cat-file blob &lt;object-hash&gt;</code> and get the file's raw data, I would like to get an old revision of a file tracked by LFS, so that I can save it somewhere. How would I do that.</p>
","1","4833070","",""
"54384035","151641","2019-01-27 00:20:30","8","1208","<git><git-submodules><git-checkout><git-lfs>","Git checkout branch and prune everything related to previous checkout (incl. git-lfs remains)","<p>I have a repo of a superproject with number of submodules.
lots of files of both are in Git LFS.</p>

<p>The repo comes with multiple long-lived release branches.</p>

<h2>Problem</h2>

<p>The complete clone transfers 20 GB of Git and Git LFS objects.</p>

<p>Checkout of master deflates the total repo to 40 GB in total,
that is the objects and the working tree files together.</p>

<p>Let's consider three separate clones as canonical way to create
three working copies, one per the long-lived branch:</p>

<pre><code>git clone --branch master      --recursive --jobs 8 https://repo repo_master
git clone --branch release/1.0 --recursive --jobs 8 https://repo repo_release1
git clone --branch release/2.0 --recursive --jobs 8 https://repo repo_release2
</code></pre>

<p>I'm trying to work out a network-optimised equivalent of the above:
- clone once with the default master checked out
- make multiple copies of the cloned repo
- checkout release branches</p>

<h2>Questions</h2>

<ol>
<li><p>How to checkout an existing branch fetched from remote,
delete the previous branch and clean up any remains?</p></li>
<li><p>How to clean up everything related to the previously checked out
master and its working tree, any cached previous LFS downloads etc.?</p></li>
</ol>

<p>But, to keep the history of origin/master.</p>

<h2>Solution Prototype</h2>

<p>Here is what I have come up with for the the network-optimised workflow:</p>

<pre><code>git clone --branch master --recursive --jobs 8 https://repo repo_master

cp -a repo_master repo_release1
cp -a repo_master repo_release2

cd repo_release1
git checkout -b release/1.0 --track origin/release/1.0

git pull
git submodule update --init --recursive --jobs 8

git branch -D master

git lfs prune
git submodule foreach --recursive git lfs prune

git lfs checkout
git submodule foreach --recursive git lfs checkout
</code></pre>

<h3>Questions to Prototype</h3>

<p>Does it look correct or any steps are missing/redundant?</p>

<p>Does it make sense to run any of these, at which point?</p>

<pre><code>git gc --aggressive --prune=now
git submodule foreach --recursive git gc --aggressive --prune=now
</code></pre>

<p>Please, assume, no new commits will happen locally between the
<code>git clone --branch master ...</code> and <code>cp -a repo_master ...</code>.</p>

<p>(<em>The problem was also posted to <a href=""https://public-inbox.org/git/CABUeae_tm__uvHH74UARG805uTa2Sf0v6wYk=pmKvxxH3kvQ8A@mail.gmail.com/"" rel=""noreferrer"">Git mailing list</a> and <a href=""https://github.com/git-lfs/git-lfs/issues/3499"" rel=""noreferrer"">Git LFS at GitHub</a></em>)</p>
","6","151641","0","0"
"54425023","8710344","2019-01-29 16:00:55","0","38","<git-lfs>","git-lfs checkout older version of binary file","<p><strong>EDIT</strong>:
So apparently, I asked this about <code>git</code> when I wanted <code>git-lfs</code>, which apperently behaves differently.   In git you can do:</p>

<pre><code>git show tag-name:foo.bin &gt; foo-tag-name.bin
</code></pre>

<p>to get an older version of a file.   In <code>git-lfs</code>, if you do this, you get:</p>

<pre><code>~&gt; git show HEAD^:foo.a &gt; foo.orig.a
~&gt; more foo.orig.a
version https://git-lfs.github.com/spec/v1
oid sha256:a2da7b663ad2aef3316adc804f2ea23a17ab64d61638de16d9d7e097fdaacd49
size 44634
</code></pre>

<p>So, how would I get an older version of a binary file in <code>git-lfs</code> without overwriting the original?</p>
","2","8710344","",""
"72300692","16659393","2022-05-19 07:54:20","0","261","<atlassian-sourcetree><git-lfs>","git push Error batch request: fatal: unrecogized command 'git-lfs-authenticate ~ upload': exit status 128","<p>I am doing software configuration management using git.(with sourcetree)</p>
<p>An error occurs when pushing with a remote branch.</p>
<pre><code>batch request: fatal: unrecognized command 'git-lfs-authenticate ~ upload': exit status 128
</code></pre>
<p>Please tell me the reason for this error and the solution.</p>
<p>Thank you.</p>
","2","16659393","",""
"54451856","35690","2019-01-31 00:55:21","84","61702","<git><github><git-lfs>","How can I tell if a file will be uploaded to git lfs correctly?","<p>I'm trying to add everything under <code>MyProject/Frameworks/</code> to <a href=""https://git-lfs.github.com"" rel=""noreferrer"">git-lfs</a> (large file storage). I'm <a href=""https://stackoverflow.com/questions/35769330/git-lfs-track-folder-recursively#comment95711641_35769868"">not sure</a> what the proper format for matching all files and folders recursively under the <code>Frameworks</code> folder is. <a href=""https://stackoverflow.com/a/35769868/35690"">This answer</a> says the proper format is <code>git lfs track ""MyProject/Frameworks/**""</code>, but <a href=""https://www.atlassian.com/git/tutorials/git-lfs#tracking-files"" rel=""noreferrer"">Atlassian's help document</a> says I should use <code>git lfs track ""MyProject/Frameworks/""</code>. I tried both and they didn't use <code>git lfs</code> for storage. It tried uploading files directly.</p>

<p>Sure, I'd love to know the proper format, but more importantly, before I attempt to push my changes to github, I'd like to verify that the match and files do indeed work correctly. This'll allow me to iterate and try new things.</p>

<p>I see two related commands that might help: <a href=""https://github.com/git-lfs/git-lfs/blob/master/docs/man/git-lfs-status.1.ronn"" rel=""noreferrer""><code>git lfs status</code></a> and <a href=""https://github.com/git-lfs/git-lfs/blob/master/docs/man/git-lfs-ls-files.1.ronn"" rel=""noreferrer""><code>git lfs ls-files</code></a>. It's not clear which one I should be using and what output I should be looking for. For example, when I ran <code>git lfs status</code>, it showed me a ton of files under <code>Git LFS objects to be committed</code>, making me think they would be added to Git LFS. However, after attempting to push to GitHub.com, I realized that it was clearly not the case. If it helps, the output for these files always had something like <code>(Git: edee1ad)</code> after each file name.</p>

<p>When I attempt to use <code>git lfs ls-files</code> I'm not sure if I need to run it after <code>git add</code>ing the files, after committing them, or after pushing them. Most of the time it's just showing me blank output.</p>

<p>Essentially the question is: <strong>If I configured <code>git lfs</code> correctly, what tool (e.g. <code>git lfs status</code>) should I use, and what output should I look for <em>before</em> I attempt to commit/push?</strong></p>

<p><strong>Note:</strong> Please don't answer the question with <em>only</em> how to match all recursive files as that will help me once (this specific case), rather than allowing me to iterate and try new things (any case).</p>
","0","35690","0","0"
"56558634","10603152","2019-06-12 09:15:43","5","5243","<git><tortoisegit><git-lfs>","Does tortoisegit support git lfs?","<p>Does <strong>Tortoisegit</strong> support Git Lfs ?</p>
","5","10603152","",""
"73331990","10742287","2022-08-12 09:26:37","0","318","<git><gitlab><git-lfs>","git lfs smudge error when doing https clone","<p>I am having an issue where if I clone my <strong>gitlab</strong> repo  using ssh then everything works fine.</p>
<p>But when I use https I get the following error</p>
<pre><code>Error downloading object: [file] (353bfa2): Smudge error: Error downloading [file] 

(353bfa2b22928633c05343fb42365cf1d1fe55582392f5d8099be6eca9986c52): batch response: Repository or object not found: https://[repo].git/info/lfs/objects/batch
Check that it exists and that you have proper access to it

Errors logged to [path]/.git/lfs/logs/20220812T021719.161294815.log
Use `git lfs logs last` to view the log.
error: external filter 'git-lfs filter-process' failed
fatal: [file]: smudge filter lfs failed
</code></pre>
<p>my lfs env is</p>
<pre><code>git-lfs/2.13.3 (GitHub; linux amd64; go 1.16.2)
git version 2.37.1

Endpoint=https://[url].git/info/lfs (auth=none)
LocalWorkingDir=[work_dir]
LocalGitDir=[work_dir]/.git
LocalGitStorageDir=[work_dir]/.git
LocalMediaDir=[work_dir]/.git/lfs/objects
LocalReferenceDirs=
TempDir=[work_dir]/.git/lfs/tmp
ConcurrentTransfers=8
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=[work_dir].git/lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic,lfs-standalone-file
UploadTransfers=basic,lfs-standalone-file
GIT_EXEC_PATH=/usr/lib/git-core
git config filter.lfs.process = &quot;git-lfs filter-process&quot;
git config filter.lfs.smudge = &quot;git-lfs smudge -- %f&quot;
git config filter.lfs.clean = &quot;git-lfs clean -- %f&quot;
</code></pre>
<p>for ssh clones, my lfs env is:</p>
<pre><code>git-lfs/2.13.3 (GitHub; linux amd64; go 1.16.2)
git version 2.37.1

Endpoint=https://[url].git/info/lfs (auth=none)
  SSH=git@[url].git
LocalWorkingDir=[work_dir]
LocalGitDir=[work_dir]/.git
LocalGitStorageDir=[work_dir]/.git
LocalMediaDir=[work_dir]/.git/lfs/objects
LocalReferenceDirs=
TempDir=[work_dir]/.git/lfs/tmp
ConcurrentTransfers=8
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=[work_dir].git/lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic,lfs-standalone-file
UploadTransfers=basic,lfs-standalone-file
GIT_EXEC_PATH=/usr/lib/git-core
git config filter.lfs.process = &quot;git-lfs filter-process&quot;
git config filter.lfs.smudge = &quot;git-lfs smudge -- %f&quot;
git config filter.lfs.clean = &quot;git-lfs clean -- %f&quot;
</code></pre>
<p>is this a configuration problem on my side or is it a server side configuration problem? <strong>We self host our gitlab server</strong> but I dont have access to the server configs so I cant provide them.</p>
","0","10742287","",""
"73363715","10742287","2022-08-15 16:19:13","1","1218","<git><gitlab><git-lfs>","git lfs smudge error when doing an https clone","<p>I am having a problem where certain projects on my self hosted gitlab 13.9 server can get cloned with ssh without any problems.</p>
<p>But If I clone with https, I get the following error:</p>
<pre><code>Error downloading object: &lt;file&gt; (353bfa2): Smudge error: Error downloading &lt;file&gt; (353bfa2b22928633c05343fb42365cf1d1fe55582392f5d8099be6eca9986c52): batch response: Repository or object not found: https://&lt;user:token&gt;@&lt;url&gt;/info/lfs/objects/batch
Use `git lfs logs last` to view the log.
error: external filter 'git-lfs filter-process' failed
fatal: &lt;file&gt;: smudge filter lfs failed
</code></pre>
<p>My lfs env is:</p>
<pre><code>git-lfs/2.13.3 (GitHub; linux amd64; go 1.16.2)
git version 2.37.1

Endpoint=https://&lt;user:token&gt;@&lt;url&gt;.git/info/lfs (auth=none)
LocalWorkingDir=&lt;path&gt;
LocalGitDir=&lt;path&gt;/.git
LocalGitStorageDir=&lt;path&gt;/.git
LocalMediaDir=&lt;path&gt;/.git/lfs/objects
LocalReferenceDirs=
TempDir=&lt;path&gt;/.git/lfs/tmp
ConcurrentTransfers=8
TusTransfers=false
BasicTransfersOnly=false
SkipDownloadErrors=false
FetchRecentAlways=false
FetchRecentRefsDays=7
FetchRecentCommitsDays=0
FetchRecentRefsIncludeRemotes=true
PruneOffsetDays=3
PruneVerifyRemoteAlways=false
PruneRemoteName=origin
LfsStorageDir=&lt;path&gt;/.git/lfs
AccessDownload=none
AccessUpload=none
DownloadTransfers=basic,lfs-standalone-file
UploadTransfers=basic,lfs-standalone-file
GIT_EXEC_PATH=/usr/lib/git-core
git config filter.lfs.process = &quot;git-lfs filter-process&quot;
git config filter.lfs.smudge = &quot;git-lfs smudge -- %f&quot;
git config filter.lfs.clean = &quot;git-lfs clean -- %f&quot;
</code></pre>
<p>I dont have access to the gitlab server configs so I am not sure, but I know other projects on the same server work fine with both ssh and https clones.</p>
","0","10742287","0","0"
"73391822","19786941","2022-08-17 16:18:59","0","90","<github><git-lfs>","git-lfs file size is different between github and my local repository","<p>I am making some Unity project(3D game). I used git lfs because of some files that exceeds 100MB. I checked lfs files size by using &quot;git lfs ls-files -s&quot;. Totally, i am using 380MB by LFS. But, GitHub indicates that i am using 1.25GB . Anyone who has solution about this problem, please let me know.</p>
","1","19786941","",""
"73396546","19789615","2022-08-18 01:37:21","-1","110","<node.js><git><macos><electron><git-lfs>","Git command run with child_process.spawn is unable to find git-lfs subcommand","<p>I've got an electron app (Electron v17.4.10) running on macOS Monterey (v12.5) and on startup it attempts to perform the command <code>git lfs install</code>. It does so by using the Node child_process package's spawn command to invoke a direct call to a standalone git executable.</p>
<p>When the electron app is installed, it provides its own version of git that isn't added to the PATH to prevent interfering with any git versions that may already be installed. The standalone version of git (v2.33.0) has the folder structure shown in the image below and the git-lfs binary (v3.2.0) is contained within <code>/PortableGit/git/libexec/git-core/</code></p>
<p><a href=""https://i.stack.imgur.com/kjGiy.png"" rel=""nofollow noreferrer"">Standalone Git Directory Structure</a></p>
<p>The full command executed is:<br>
<code>&quot;/Applications/MyApp/Utilities/PortableGit/bin/git&quot; lfs install</code></p>
<p>And the output is:<br></p>
<pre><code>git: 'lfs' is not a git command. See 'git --help'.

The most similar command is
    log
</code></pre>
<p>How can I get the standalone installation of git to recognize the subcommand <code>lfs</code> without placing it on the PATH? Is having a self-contained git package like I've described even possible? Or should I abandon the approach and ensure git is installed properly on the target machine?</p>
","0","19789615","",""
"73421750","1243247","2022-08-19 20:05:19","0","263","<github-actions><git-lfs><github-ci>","Integrate git-lfs with Github continuous integration","<p>I have the following Github CI</p>
<pre class=""lang-yaml prettyprint-override""><code>name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [12.x, 14.x, 16.x]
        
    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Upgrade NPM
      run: npm install -g npm
    - run: npm ci
    - run: npm test
</code></pre>
<p>But it doesn't work after I have installed git-lfs, I guess because I have some files only stored in Git LFS storage, and thus the <code>npm test</code> suite does not work</p>
<p>How can I integrate git-lfs with Github CI?</p>
","0","1243247","",""
"73454161","4180447","2022-08-23 06:38:36","0","165","<git><clone><git-lfs>","git clone with --single-branch causes the process to freeze","<p>Reference to this post:</p>
<p><a href=""https://stackoverflow.com/q/73407722/4180447"">Git clone over Bitbucket takes a long time even when cloning from an empty orphan branch</a></p>
<p>I used this command:</p>
<pre><code>git clone repo_url . --branch some/big/master/branch --single-branch
</code></pre>
<p>I am trying to clone one single branch but this time, not an empty branch, it is one of the relatively big branches with many large ZIP files with the LFS feature turned on.</p>
<p>The cloning process seemed to work fine, but it froze for more than one hour.</p>
<p>Then, I pressed ctrl-x or ctrl-c to break the process, and used this command:</p>
<pre><code>git fetch
git reset --hard origin/some/big/branch
</code></pre>
<p>It starts doing something, then it will freeze again for what looks like forever.</p>
<p>Any idea what is going on?</p>
<hr />
<h1>Update 1</h1>
<p>I then closed all windows, restarted the laptop, and tried again, and it finished in 30 seconds.</p>
<p>Is this probably because <code>git</code> needs a lot of resources to clone LFS files? I have pushed a good number of ZIP files with LFS turned on.</p>
<hr />
<h1>Update 2:</h1>
<p>I did another round of tests with and without the <code>--single-branch</code> switch. I noticed that running the clone from another colleague's laptop, with the single branch switch, is faster than without the single branch switch and it took a max of 10 seconds to complete in both cases. But, from my laptop, it took 5 minutes to complete without the single branch switch I checked Task Manager and didn't find any reference to GIT-LFS. I ran the cloning process on my laptop with the single branch switch, and it finished in 10 seconds.</p>
<p>So the problem is really cloning any repo without using the single branch switch, and it is on my laptop.</p>
<p>This means the problem is either in my laptop resources or some config that allows <code>git</code> to run and exploit the available resources.</p>
<p>Is there some config to let <code>git</code> run more efficiently?</p>
<p><a href=""https://i.stack.imgur.com/dfkNN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dfkNN.png"" alt=""enter image description here"" /></a></p>
","6","4180447","",""
"55506257","810830","2019-04-04 00:44:26","11","5208","<git><gitlab><git-lfs>","Removing missing LFS objects from git repository","<p>I am missing a bunch of LFS objects in my git repository*, both on the clients and the server. I am aware that those objects are lost and that's okay. Unfortunately this means that <code>git lfs fetch --all</code> or even <code>git lfs push --all origin</code> will fail.</p>

<p>I would like to purge the ""broken pointers"" from the repository, either by replacing the binary with a dummy text file or by removing the pointer altogether. I am also aware that this involves rewriting history and that's also fine.</p>

<p>What would be the best way to proceed?</p>

<p>*To clarify, I am missing <strong>some</strong> LFS files on the server but not all of them and not for all revisions of those files.</p>

<p>For example, I have foo.png that has been modified in 3 commits:</p>

<ul>
<li>foo.png (Version 1, LFS Sha: 03cfd743)</li>
<li>foo.png (Version 2, LFS Sha: 661f0797)</li>
<li>foo.png (Version 3, LFS Sha: 5fa2f122)</li>
</ul>

<p>The LFS server no longer has foo.png version 2, so I would like to remove that commit from history. Unfortunately git lfs does not tell me which commit is broken, it simply tells me that <code>661f0797</code> is missing.</p>

<p>(For the record, I have found the missing files so I no longer have this issue but the solution should still be interesting!)</p>
","1","810830","0","0"
"72581602","15193435","2022-06-11 03:54:30","1","141","<git><android-studio><github><git-lfs>","how to initialize git in Android Studio","<p>I'm trying to use git lfs because my mobile app codes are too big to upload on github. For some reason, git lfs doesn't work. Therefore, I'm trying to initialize git by typing &quot;git init&quot;. However git init doesn't work.</p>
<p>How can I initialize git in Android Studio?</p>
","6","15193435","",""
"72610494","4561887","2022-06-14 01:05:10","16","6504","<git><git-lfs>","What is the difference between `git lfs fetch`, `git lfs fetch --all`, and `git lfs pull`?","<p>Despite having used <code>git</code> for years, I find <code>git lfs</code> (<a href=""https://git-lfs.github.com/"" rel=""noreferrer"">git Large File Storage</a>) to be pretty confusing to use, even at a very basic level. Can someone explain the difference between these 3 commands?:</p>
<ol>
<li><code>git lfs fetch</code></li>
<li><code>git lfs fetch --all</code></li>
<li><code>git lfs pull</code></li>
</ol>
<p>Related:</p>
<ol>
<li><a href=""https://stackoverflow.com/q/50336448/4561887"">Pull ALL files from git LFS</a></li>
</ol>
","0","4561887","0","0"
"55640015","2747201","2019-04-11 19:39:15","4","1650","<gitlab><tortoisegit><git-lfs>","TortoiseGit responding ""/usr/bin/sh: git-lfs: command not found"" when attempting diff of lfs tracked file","<p>I am trying to perform a diff of a LabVIEW (.vi) file using TortoiseGit.  I get the following error:</p>

<pre><code>Failed to checkout file ""*****.vi"" of revision ### to
""C:\Users\***\TortoiseGit\*****-###.vi"".
libgit2 returned: External filter application exited non-zero (127) and reported:
/usr/bin/sh: git-lfs: command not found
</code></pre>

<p>I am using TortoiseGit 2.8.0.0 with a GitLab server.  I have lfs enabled.  Any file type that is tracked with lfs seems to have this problem.  The error message seems straightforward as to what the problem is, but it's not clear to me how to fix it.</p>
","0","2747201","0","0"
"72641580","3511123","2022-06-16 06:49:04","1","321","<git><git-lfs>","Why the git repository size stays the same after migration to LFS","<p>I have a git repository with a huge (2.5GB) file inside one of the folders. As there have been some versions before (actually, different files, the old one has been always deleted and new one added in a commit), the size of the repository on the disk is ~12.5GB (<code>du -sm repository</code>).</p>
<p>I have converted the repository to LFS using <code>git lfs migrate import --everything --include=&quot;big-file-folder/**&quot;</code> - this step caused the repository size to grow to ~17GB on the local disc (where I did the migration). When I did <code>git push --force</code> to a remote bitbucket and then cloned the repository again, the freshly cloned one has ~15GB.</p>
<p>Then I found out there is a <code>git lfs prune</code> command, but when I run it on the migrated repository, it only shrinks to pre-migration size of ~12.5GB, not to ~3GB what I would expect (the 2.5GB for one version of the big file, plus ~0.5GB for the rest of the repository content).</p>
<p>It looks like the 5 previous versions of the big file are still in the repository, which is not what I have expected.</p>
<p>Note: I am using git-lfs 2.13, we have an old bitbucket that does not support the newer 3.0.</p>
","5","3511123","0","0"
"55724063","8260782","2019-04-17 09:17:02","0","64","<git><commit><git-lfs>","Why is git pushing my files normally, even if they are handled by git-LFS?","<p>I have the problem that, in my repo, I have to upload an essential <code>*.lm</code> dictionary file which is about 380mb of size.
It actually is tracked by <code>git-lfs</code> and it also is being uploaded to <code>git-lfs</code>. My problem is, that besides <code>git-lfs</code>, git also uploads this file to the repo, so at the end it fails, because you can't upload files bigger than 100mb.</p>

<p>I already tried to clean my repo with bfg and <code>git-lfs import</code> to migrate my repo to lfs. None of them worked, it still keeps uploading the files to both <code>lfs</code> and the normal repo.</p>

<p>I really don't know what to do, it already worked in the history, now it does not anymore.</p>
","0","8260782","",""
"55748357","11379255","2019-04-18 14:37:38","1","172","<git><binary><atlassian-sourcetree><git-lfs>","How to reduce size of git repo on local machines via ""gt lfs prune""?","<p>I'm adding these parameters to config file, but I'm not sure about formatting.</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[remote ""origin""]
    url = XXX
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[lfs ""XXX""]
    access = basic
    pruneoffsetdays = 0
    fetchrecentrefsdays = 0
    fetchrecentremoterefs = 0
    fetchrecentcommitsdays = 0
</code></pre>

<p>These settings should erase all unnecessary versions stored in .git folder on local machines. I'm doing it right?</p>

<p>At this point, my local folder is about double size of the actual repo. I don't think I can shrink it more, but at least I wanna be sure to have done everything in a proper way.</p>

<p>Thanks!</p>
","2","11379255","",""
"72705064","8118147","2022-06-21 17:44:51","1","221","<node.js><git><go><dependency-management><git-lfs>","Should I use git-lfs for packages info files?","<p>As a developer working with several languages, I notice that in most modern languages, dependencies metadata files can change a lot.</p>
<p>For instance, in NodeJS (which in my opinion is the worst when it comes to package management), a change of dependencies or in the version of NPM (respectively yarn) version can lead to huge changes in <code>package-lock.json</code> (respectively <code>yarn.lock</code>), sometimes with tens of thousands of modified lines.</p>
<p>In Golang for instance, this would be <code>go.sum</code> which can have important changes (in smaller  magnitude when compared to Node of course) when modifying dependencies or running <code>go mod tidy</code> at times.</p>
<p>Would it be more efficient to track these dependencies files with <code>git-lfs</code>? Is there a reason not to do it?</p>
<p>Even if they are text files, I know that it is advised to push SVG files with <code>git-lfs</code>, because they are mostly generated files and their diff has no reason to be small when regenerating them after a change.</p>
<p>Are there studies about what language and what size/age of a project that makes <code>git-lfs</code> become profitable?</p>
","0","8118147","",""
"72706545","2985753","2022-06-21 20:06:43","0","967","<git><git-lfs>","Unable to install git lfs","<p>First tried</p>
<pre><code>brew install git-lfs
git lfs install
</code></pre>
<p>and the initial install works but then I get &quot;lfs command not found&quot;.
Read I needed to try:</p>
<pre><code>sudo apt install git-lfs
</code></pre>
<p>&quot;The operation couldn’t be completed. Unable to locate a Java Runtime that supports apt.&quot;
Installed JRE, JDK. Still getting same message.</p>
<p>I tried everything here: <a href=""https://stackoverflow.com/questions/48734119/git-lfs-is-not-a-git-command-unclear"">git: &#39;lfs&#39; is not a git command unclear</a>
and read everything I could find on SO about this.</p>
<p>I added C:\Program Files\Git\bin to the system path. That didn't do anything.</p>
<p>I have an intel silicon mac.</p>
","1","2985753","",""
"55833391","9913650","2019-04-24 15:13:29","0","288","<git><svn><vpn><git-lfs>","git lfs locks works fine inside corporate network, but takes more than 10 minutes when used by contractor connecting through VPN","<p>Our contractors are migrating from SVN to Git, and we are in need to provide them with file locking option. As SVN supports this feature, git doesn't have one, so i'm trying to use Git LFS module for this problem. After installing GIT LFS, i locked some of the files using</p>

<pre><code>    git lfs lock file
</code></pre>

<p>and typed command</p>

<pre><code>    git lfs locks
</code></pre>

<p>it worked very fast, i got respond less then in a second.
But on the side of our contractors, who connect to our network through VPN, response time was more than 10 minutes, and still no output. What might be the problem? And is there any any to solve it? </p>

<p>Git itself and git lfs are installed on Windows 10 and all the commands are run from git bash terminal.
git lfs version 2.7.1</p>

<p>I expect same response time from git lfs lock</p>
","4","9913650","",""
"55848394","2628841","2019-04-25 11:37:16","3","2886","<git><github><repository><gitlab><git-lfs>","Can't migrate large repo from gitlab to github","<p>I am trying to migrate a private repo from Gitlab to Github. It contains some large files which are tracked using git LFS. Even after that, I am not able to push the repo to GitHub. The size of the repo is huge as it's the full codebase for an operating system and size of the repo is around 75GB.</p>

<p>When I am trying to push it to GitHub, I'm getting the following logs.</p>

<pre><code>Uploading LFS objects: 100% (8600/8600), 5.9 GB | 0 B/s, done
Enumerating objects: 472049, done.
Counting objects: 100% (472049/472049), done.
Compressing objects: 100% (302043/302043), done.
kex protocol error: type 7 seq 16549), 1020.66 MiB | 4.88 MiB/s
kex protocol error: type 7 seq 32979), 1.99 GiB | 4.83 MiB/s
remote: fatal: pack exceeds maximum allowed size
fatal: the remote end hung up unexpectedly
fatal: the remote end hung up unexpectedly
</code></pre>

<p>Please let me know if there is any way to bypass the size limit.</p>
","1","2628841","0","0"
"55878894","9382524","2019-04-27 09:00:20","0","2509","<git><performance><github><git-clone><git-lfs>","Faster alternative to git lfs clone from remote GitHub repositories?","<h2>Objective</h2>

<p>I have a remote <a href=""https://github.com/PackardChan/chk2019-blocking-extreme"" rel=""nofollow noreferrer"">GitHub repositories</a>, which uses git-lfs to hold large binary files. </p>

<ul>
<li>I want others to be able to quickly download my code and data.</li>
<li>If speed can be enhanced, I don't expect others to necessarily version control their copies of the repository with git.</li>
<li>Preferably, I want to know the reason of being slow or being fast.</li>
</ul>

<h2>Baseline approach (<code>git lfs clone</code>)</h2>

<p>As a test of how others will download my repository, I ran the following command on a high performance login node (with 72 Intel Xeon CPUs) on a Linux cluster, using a gpfs disk, and with these versions of git and git-lfs.</p>

<ul>
<li>git version 2.10.2</li>
<li>git-lfs/2.3.4 (GitHub; linux amd64; go 1.9.1; git d2f6752f)</li>
</ul>

<pre><code>$ time git lfs clone --progress git@github.com:PackardChan/chk2019-blocking-extreme.git
Cloning into 'chk2019-blocking-extreme'...
remote: Enumerating objects: 138, done.
remote: Counting objects: 100% (138/138), done.
remote: Compressing objects: 100% (114/114), done.
remote: Total 138 (delta 20), reused 138 (delta 20), pack-reused 0
Receiving objects: 100% (138/138), 148.16 MiB | 36.59 MiB/s, done.
Resolving deltas: 100% (20/20), done.
Git LFS: (64 of 64 files) 7.29 GB / 7.29 GB                                                              

real    4m51.156s
user    7m14.044s
sys 0m28.360s
</code></pre>

<p>This took near 5 minutes even in a high performance node. And I noticed that the last line of output reaches the total of 7.29GB only in 36 seconds. The rest of the time is running <code>git update-index -q --refresh --stdin</code> (from what I learn from <code>top -c</code> command).</p>

<p>I therefore believe the performance can be substantially improved if update-index can be skipped. As mentioned in ""Objectives"", if speed can be improved, I don't mind giving up git version control.</p>

<h2>Other unsuccessful attempts</h2>

<ol>
<li>svn export</li>
</ol>

<p>Inspired by this <a href=""https://stackoverflow.com/a/18324428/9382524"">post</a>, I tried:</p>

<pre><code>time svn export https://github.com/PackardChan/chk2019-blocking-extreme/trunk z4svn
</code></pre>

<p>But the lfs files are not correctly downloaded. This is also reported <a href=""https://github.community/t5/How-to-use-Git-and-GitHub/Is-git-LFS-compatible-with-SVN-client-support-on-GitHub/m-p/5346/highlight/true#M1737"" rel=""nofollow noreferrer"">here</a>.</p>

<ol start=""2"">
<li>git archive</li>
</ol>

<p>However, <a href=""https://stackoverflow.com/a/43079188/9382524"">GitHub doesn't support git-archive</a>.</p>

<ol start=""3"">
<li>--depth=1</li>
</ol>

<p>I tried, it didn't perform better. This is understandable as my repository only has one commit.</p>

<p>I am rather new to git. So, am I missing anything?</p>
","0","9382524","",""
"72770732","18908901","2022-06-27 10:39:24","0","1106","<git-lfs>","git-lfs.windows-v.3.2.0. setup won't open","<p>When trying to open the git-lfs installation setup, it shows the following error: &quot;Could not found Git, can not register Git lfs.&quot;
Not sure if it makes any difference, I have GitHub desktop installed.</p>
","0","18908901","",""
"55919100","380073","2019-04-30 10:34:35","3","158","<git><git-lfs>","fast-export git lfs repository","<p>I have a git repository with a great number of .exe files inside.
The .exe files are stored using LFS and now I want to move the repository to a new hub.</p>

<p>Directly fast-exporting the repository only exports the LFS references, not the actual data.</p>

<p>I would like to fast-export the entire repository with the .exe actual content and not references. Is it possible? How?</p>

<p>Thanks.</p>
","1","380073","",""
"55931154","5628902","2019-05-01 03:07:10","0","755","<git><git-lfs>","Staged git lfs files not being intercepted by git-lfs","<p>I am trying to commit/push a 1.2gb tar file to git lfs server using Git on Windows 10</p>

<p>I have tracked the tar extension with:</p>

<pre><code>C:\FilepathTo\Folder&gt; git lfs track '*.tar'
</code></pre>

<p>Running <code>git lfs track</code> returns</p>

<pre><code>Listing tracked patterns
    Folder\'*.tar' (Folder\.gitattributes)
</code></pre>

<p>I add the .gitattributes file</p>

<pre><code>C:\FilepathTo\Folder&gt; git add .gitattributes
</code></pre>

<p>I add the large file</p>

<pre><code>C:\FilepathTo\Folder&gt; git add file.tar  
</code></pre>

<p>Then confirm the file is being tracked with</p>

<pre><code>C:\FilepathTo\Folder&gt; git lfs status

    On branch MyAwesomeBranch
    Git LFS objects to be pushed to origin/MyAwesomeBranch:


    Git LFS objects to be committed:

            .gitattributes  (Git: 136g1ea)
            file.tar (Git: 567d1ed)

    Git LFS objects not staged for commit:

</code></pre>

<p>I commit the file</p>

<pre><code>C:\FilepathTo\Folder&gt; git commit -m ""foo""
    [MyAwesomeBranch ecf9735] foo
     2 files changed, 0 insertions(+), 0 deletions(-)
     create mode 100644 Folder/.gitattributes
     create mode 100644 Folder/file.tar
</code></pre>

<p>And check that the file is being tracked</p>

<pre><code>C:\FilepathTo\Folder&gt; git lfs track ls-files
</code></pre>

<p>Which returns nothing. </p>

<p>I check lfs status again and it isn't listed as an object to be pushed.</p>

<pre><code>C:\FilepathTo\Folder&gt; git lfs status
On branch MyAwesomeBranch
Git LFS objects to be pushed to origin/MyAwesomeBranch:


Git LFS objects to be committed:


Git LFS objects not staged for commit:

</code></pre>

<p>As expected, pushing fails with </p>

<pre><code>remote: error: File Folder/file.tar is 1229.43 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
</code></pre>

<p>What am i doing wrong? Why is the staged file not being committed to git lfs?</p>
","0","5628902","",""
"72830343","3935035","2022-07-01 13:53:00","3","2049","<git><git-lfs>","Retrieve original files after a git clone with git lfs","<p>I am a bit confused. I back up a project with Github.com. Because my files are too large to store them on Github.com, I am using <code>git large file storage</code>. Now I changed to a new computer, and performed a <code>git clone</code> on the repository stored remotly on Github.com. I also installed <code>git lfs</code> with <code>brew</code> and did a <code>git lfs install</code> in the just cloned repository. However, my large files are still &quot;pointer files&quot;. When I run my project,it says, these files are missing.</p>
<p>I did a</p>
<pre><code>git lfs fetch --all
</code></pre>
<p>which downloaded something. But where is it?
How do I retrieve the files I backed up with <code>git lfs</code> after moving to a completly new computer with a fresh setup?</p>
","2","3935035","",""
"72859230","10888766","2022-07-04 15:42:21","1","330","<git><git-submodules><git-lfs>","How to use git LFS repo as submodule?","<p>I'm actually using git lfs to track some binary files I need in my project.
I have one repo dedicated to these files, and an another main repo with all of my source code.
I added the git lfs repo in my main repo as a submodule.</p>
<p>My problem is that now when I clone my main repo, and I run <code>git submodule update --init</code>, the command is really slow, and take a long time to download all my binaries. Why not, but it seems the main repo contains also binaris in <code>.git/modules/path/to/submodules</code>.</p>
<p>How can i avoid thay and only have my binary files in the dedicated submodule ?</p>
<p>Thanks !</p>
","0","10888766","",""
"72970799","1325849","2022-07-13 18:11:03","0","239","<git><github><git-lfs>","git-lfs not tarcking files even after tracking enabled","<p>I have been struggling with git-lfs since yesterday. I wanted to add a new <code>.webp</code> file to a repository and it was too large to push to github. The repo already had another .webp file, but under the github size limit.</p>
<p>I installed gi-lfs, added <code>*.webp</code> files to tracking and tried to commit and push.</p>
<p>This did not work. Can't remember the exact sequence of events, but after trying different things (git-lfs migrate) and dealing with a series of unfortunate results - .webp files got altered (the image in them disappeared), repo histories diverged etc., I started fresh today.</p>
<ul>
<li>Checked out master (it already had .gitattribute with *.webp tracking enabled)</li>
<li>Removed the <code>old.webp</code> file (the one under size limit). Commit and push.</li>
<li>Added the <code>old.webp</code> file back. Commit and push.</li>
<li>Created a new branch</li>
<li>Added the new .webp files (<code>open.webp</code> and <code>closed.webp</code>, these over size limit)</li>
<li>Checked <code>git-lfs ls-files</code>, it does not list these new .webp files.</li>
</ul>
<pre><code>% git status
On branch new-layout
Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
    new file:   public/images/closed.webp
    new file:   public/images/open.webp

% git-lfs status
On branch new-layout

Objects to be committed:

    public/images/closed.webp (Git: 3190ceb)
    public/images/open.webp (Git: a7d8770)

Objects not staged for commit:

% git commit -m 'new bg images'
[new-layout 4429202] new bg images
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 public/images/closed.webp
 create mode 100644 public/images/open.webp

% git-lfs ls-files
[new-layout 4429202] new bg images
 a8b55ce445 - public/images/old.webp
</code></pre>
<p><code>git-lfs ls-files</code> only shows the old.webp, and not the new ones I committed.</p>
<p>Also, this is what my <code>.gitattributes</code> file looks like:</p>
<pre><code>*.webp filter=lfs diff=lfs merge=lfs -text
</code></pre>
<p>What am I doing wrong? Please help!</p>
","0","1325849","",""
"56252748","3682919","2019-05-22 08:45:05","0","377","<git><git-lfs><git-history>","Push missing file to git lfs","<p>Unfortunately, I introduced an error in my <code>.gitattributes</code> some weeks (and commits and pushes) ago. As a result the <code>.gitignore</code> of a subfolder of my project is assumed to be on git lfs. But for some reason, it never got pushed there. I corrected the wrong <code>.gitattributes</code> by a new commit. Now, everything is fine except that I cannot checkout older commits, which assume that the file exists in git lfs. I get the following error:</p>

<pre><code>Error downloading object: testdata/.gitignore (42e0b88): Smudge error: Error downloading testdata/.gitignore (42e0b88b4a1842297d2671cd534dc6130a7a8fc4806bc7ef9bab82d38df32360):[42e0b88b4a1842297d2671cd534dc6130a7a8fc4806bc7ef9bab82d38df32360] Object does not exist on the server or you don't have permissions to access it: [404] Object does not exist on the server or you don't have permissions to access it
</code></pre>

<p>How can I fix that? Is there a way to push the file manually and give it the correct id? Or can I retrospectively fix the wrong commit?</p>
","3","3682919","",""
"56341730","293195","2019-05-28 11:55:48","1","605","<git><git-lfs>","Whats the correct way to measure a git blob object size","<p>I am measuring git blobs sizes with</p>

<pre class=""lang-sh prettyprint-override""><code>fileSizeThreshold=2^19
git rev-list --objects --all \
| git cat-file --batch-check='""%(objecttype)"",""%(objectname)"",%(objectsize),%(objectsize:disk),""%(rest)""' \
| sed -n 's/^""blob"",//p' \
| awk -F',' '$2'""&gt;= ${fileSizeThreshold}"" \
| sort -t "","" --numeric-sort --key=2 &gt; ${outDir}/largeBlobs
</code></pre>

<p>Which gives me all blobs greater than 512kb.
I am wondering which size is the correct one to consider when thinking about putting this file (its path pattern...) in the Git Large Files Storage (LFS).</p>

<p>Is it <code>%(objectsize)</code> or <code>%(objectsize:disk)</code>?</p>

<p>Because <code>%(objectsize:disk)</code> reports some strange sizes (the bold one):</p>

<ul>
<li>""0901797d58f6916cad4ef4fd581d8254596bdd19"", <em>722013b</em>, <strong>105b</strong></li>
</ul>

<p>In the caveat section of <a href=""https://git-scm.com/docs/git-cat-file"" rel=""nofollow noreferrer"">git cat-file</a>, there is some note about that, which I dont understand.</p>

<p>Considering LFS, one should look at the <code>objectsize:disk</code> supposedly because that is the space used for this blob...?</p>
","0","293195","",""
"56393372","7505910","2019-05-31 10:29:21","2","4005","<python><git><pip><git-lfs>","How to install python package from git repo that has git-lfs content with pip?","<p>I have migrated large files in my git repository to git-lfs. The repository contains the source code of a custom python library. I was able to install it with pip: </p>

<pre><code>pip install git+https://gitserver.com/myrepo.git@branch
</code></pre>

<p>Currently (after migration), large files that are stored at lfs, obviously, are out of the installation (there are only links). I have installed git-lfs package from PyPI in the environment but it does not help.<br>
Is there any way to tell pip to fetch git-lfs files while cloning the repo?</p>
","2","7505910","",""
"73157694","17265582","2022-07-28 18:37:40","0","602","<linux><git><server><local><git-lfs>","Create a git local server that uses git lfs","<p>A have a rasberry pi(Debian) with a local git server in it. I was able to push normal files to the repo but when I try to push big files it gives me this error.</p>
<blockquote>
<p>batch request: bash: git-lfs-authenticate: command not found: exit status 127</p>
</blockquote>
<p>Im connection to the rasberry via ssh.
I have installed in both sides git lfs (maybe I did it wrong)</p>
<p>I was able to use git lfs to push into GitHub but not into my local server.
Do I have to create a different type of server of just with the git one should work;</p>
","0","17265582","",""
"56410647","148736","2019-06-01 21:44:09","1","2086","<github><git-lfs>","How to get large files from git-lfs when error even though you have credits","<p>I've tried adding 100 GB of LFS credits to my github account but still get:</p>

<p>""This repository is over its data quota. Purchase more data packs to restore access.""</p>

<p>For this repo:</p>

<p><a href=""https://github.com/aarch64-laptops/prebuilt"" rel=""nofollow noreferrer"">https://github.com/aarch64-laptops/prebuilt</a></p>

<p>And I've tried forking the repo to a new repo under my account but same issue. Any other way to get these large files?</p>
","0","148736","0","0"
"73194371","16955107","2022-08-01 13:23:08","2","178","<github><git-bash><tracking><git-lfs>","How to add all the files that are bigger than 100 MB to git-LFS?","<p>One has to add all the big files manually to git-lfs. Is there anyway, that they're automatically tracked?</p>
","0","16955107","",""