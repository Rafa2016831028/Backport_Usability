Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"38605863","3224058","2016-07-27 06:59:28","1","629","<windows><git><git-checkout>","Error at git checkout. Path too long","<p>I have this error in Git when I try to checkout to another branch after clone the repo:</p>

<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false checkout develop

fatal: cannot create directory at 'node_modules/karma/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/isobject/node_modules/isarray/build': Filename too long
</code></pre>

<p><code>node_modules</code> folder is no longher important to tack into git
(I put the folder <code>node_modules/</code> in <code>.gitignore</code>) but I always have this error.</p>

<p>It seems a problem of too long path, because if I try to navigate in explorer I meet a windows error of too long path.</p>
","3","3224058","0","0"
"10182303","970193","2012-04-16 21:58:06","3","433","<git><merge><git-checkout>","git pull to branch_1 and merge into current branch simultaneously","<p>I took a look around, but didn't see this exact question answered, so here I go:</p>

<pre><code>git checkout master
git checkout -b release1
git checkout -b feature1
git checkout -b feature2
</code></pre>

<p>i do work on <code>feature1</code>, someone else does work on <code>feature2</code>, both are pushed to origin</p>

<pre><code>git checkout -b feature1
git pull
git checkout -b feature2
git pull
</code></pre>

<p>Question 1: Can I pull the latest from origin of <code>feature1</code> and <code>feature2</code> to their respective local branches without having to check them out individually and pull them each separate? </p>

<p>Continuing along . . .</p>

<pre><code>git checkout release1
git merge feature1
git merge feature2
</code></pre>

<p>Someone else does work on <code>feature2</code>. </p>

<p>Question 2: I want to merge the latest on origin <code>feature2</code> into my current <code>release1</code> branch without switching branches to pull it, then switching again to merge it. Is this possible?</p>
","3","970193","",""
"65336952","14842360","2020-12-17 08:20:25","1","344","<git><git-branch><git-checkout>","git checkout master returns error when switching from mybranch","<p>I was pushing code to <code>master</code> branch and switching to <code>mybranch</code> to fix bugs. Everything worked fine when using <code>$git checkout master</code> and <code>$git checkout mybranch</code>!</p>
<p>The problem is that I once typed <code>git checkout origin</code> instead of <code>git checkout master</code> when I wanted to switch from <code>mybranch</code> into <code>master</code>. Now, every time I want to return to <code>master</code> branch I get this error:</p>
<pre><code>error: pathspec 'master' did not match any file(s) known to git
</code></pre>
<p>My question is: how can I get back to <code>master</code> branch using <code>$git checkout master</code> command?</p>
","1","14842360","0","0"
"76216018","21725097","2023-05-10 07:41:07","0","20","<git><visual-studio-code><git-checkout>","How to `git checkout <commit-ID> <filename>` with VScode?","<p>From the command line, if I want to go back to a previous version of a specific file, I can checkout this file with a commit-ID like this :</p>
<p><code>git checkout &lt;commit-ID&gt; &lt;filename&gt;</code></p>
<p>I wonder how can I achieve the same thing with VScode ?</p>
<p>The source control menu in VScode is quiet weak and does not do much, I probably need an extension to do more sophisticated stuff. I saw edamagit that is inspired from magit on Emacs which is quiet powerful, but don't know how to use magit for doing this.</p>
","1","21725097","",""
"76337157","7835017","2023-05-26 01:39:38","0","80","<github-actions><git-checkout><semantic-versioning><gitversion>","fetch-depth: 0 on github actions checkout is not fetching all tags and refs","<p>I have a  repo which has a TAG 1.0.0 on main and i am running a github workflow on branch &quot;dev&quot;</p>
<pre><code> steps:      
      - name: &quot;Checkout Application repo&quot;
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo_name }}
          token: ${{ secrets.token }}
          fetch-depth: 0
      - name: Gitversion
        id:  git-version
        run: |
          cd ${{github.workspace}}         
          $GitVersion = dotnet-gitversion /output json |ConvertFrom-Json
          echo $GitVersion.SemVer
        
</code></pre>
<p>I expect the semver to be 1.1.0 using Continous delivery mode , however the Semever is 1.0.1 and i  tried to list git branch -l to see all branches listed , but i only see dev branch there with fetch-depth : 0 it should have all branch and tag information</p>
<p>what am i am missing here?</p>
","1","7835017","",""
"76362202","12969054","2023-05-30 06:47:04","0","32","<ssh><github-actions><remote-access><cicd><git-checkout>","how to do checkout in github actions on remote server which is running somewhere using ssh?","<p>Let's say there are two machines A and B, I'm inside <strong>A</strong> machine which works as a self-hosted runner in the GitHub actions. If I use checkout action, it will checkout to <strong>Machine A</strong>, what if I want checkout to <strong>Machine B</strong> by ssh to <strong>Machine B</strong> without git clone or appleboy/ssh-action.</p>
<p>Example Workflow:</p>
<pre><code>....
....
jobs:
  test:
    runs-on: self-hosted [Machine A]
    steps:
      - name: checkout
        uses: actions/checkout@v2 
        #Which will checkout in A
      - name: ssh
        #lets say I ssh to remote Machine B
        and able to run the commands inside the B how to do the 
        checkout in B other than git clone. Is it possible??
</code></pre>
","3","12969054","",""
"76418208","5002671","2023-06-06 20:25:56","0","35","<git><git-merge><gitignore><git-checkout>","Why .gitignore files are appearing in master while they are ignored in development branch?","<p>I have a development branch, where in one of the sub-directories I created a .gitignore file, added the file(s) to be ignored, committed and pushed the change to development branch. But now when I checkout to master (because I want to merge development to master), the ignored files show up as unstaged changes. Why does it happen this way? What am I doing wrong in the workflow? How can I fix it? (I am using VS code for my work).</p>
","0","5002671","",""
"76457596","6613780","2023-06-12 14:22:10","0","20","<git><github><git-checkout><git-stash>","How to recover deleted files from git after switching branch without stash","<p>I've made some local changes and didn't pushed to repository, accident tally switched to another branch without stashing my changes, i did</p>
<pre><code>git checkout .
</code></pre>
<p>Now i realized that after switching to my working branch, noticed all my local changes gone. Is there anyway to get it back i mean restore or if i do git checkout ., these files will be moved to any cache or recycle bin, i checked it in recycle bin, but not succeeded.
Any help ?
Thanks in advance</p>
<p>I've checked in my local is there any stash list, but no list. Very disappointing work i did. Is there any way to get back my local changes?</p>
","0","6613780","",""
"76474048","5426329","2023-06-14 13:18:36","0","22","<c++><git><git-checkout><libgit2>","Checkout local commit with libgit2","<p>I'm trying to implement a simple checkout operation between 2 commit. The code executes without errors.</p>
<pre><code>int checkout2() {
git_repository_free(repo);

git_repository_open(&amp;this-&gt;repo, this-&gt;dir);

git_commit* commit = NULL;

git_tree* tree;
check_lg2(git_commit_tree(&amp;tree, commit), &quot;Get tree&quot;, NULL);

const char* target_ref = &quot;commit hash&quot;;

git_checkout_options opts = GIT_CHECKOUT_OPTIONS_INIT;

/*checkout from HEAD*/
int error = git_checkout_head(repo, &amp;opts);

/*Checkout from the index*/
error = git_checkout_index(repo, NULL, &amp;opts);

/*Checkout a different tree*/
git_object* treeish = NULL;

error = git_revparse_single(&amp;treeish, repo, target_ref);
error = git_checkout_tree(repo, treeish, &amp;opts);

return 0;
</code></pre>
<p>}</p>
<p>However, the commit does not change.
I've checked the example in libgit2 (checkout.cpp) but there is a git_remote_list().</p>
<p>I want to checkout only between local commit.</p>
<p>What am I doing wrong?</p>
<p>I want to do something like <code>git checkout hash_commit</code></p>
","0","5426329","",""
"76503858","11143113","2023-06-19 05:38:00","0","78","<git><github><repository><github-actions><git-checkout>","How do i checkout a single folder / file from a remote repo using github actions","<p>I'm using github actions runner on windows.</p>
<p>I tried the below to checkout only the <code>scripts</code> folder from remote repo called <code>betech</code> from branch <code>mm365</code> inside the <code>current-folder\betech</code>; but it checks out the entire repo contents.</p>
<pre><code>  - name: Checkout just the scripts folder
    uses: actions/checkout@v3
    with:
      repository: mytech/betech
      ref: mm365
      path: betech
      token: ${{ secrets.MYGITHUBTOKEN }}

  - name: Configure Sparse Checkout   
    run: |
      echo &quot;scripts/*&quot; &gt;&gt; .git/info.sparse-checkout
      git read-tree -mu HEAD
    working-directory: betech

    env:
      token: ${{ secrets.MYGITHUBTOKEN }}
      secrets: inherit 
</code></pre>
<p>here is the sparse file</p>
<pre><code>cat betech\.git\info.sparse-checkout

scripts/*
</code></pre>
<p>Can you please suggest how I can checkout only the scripts folder or any single file [If the logic is comparatively different]</p>
<p>*** Update: ***
I tied the below answer and it works.</p>
<pre><code>  - name: Checkout just the scripts folder
    uses: actions/checkout@v3
    with:
      repository: mytech/betech
      ref: mm365
      path: betech
      sparse-checkout: |
        scripts
      sparse-checkout-cone-mode: false
      token: ${{ secrets.MYGITHUBTOKEN }}
</code></pre>
","0","11143113","",""
"76578944","8961192","2023-06-29 07:37:17","0","18","<git><github><git-branch><git-checkout><sparse-checkout>","git sparse checkout and get all branch","<p>My Requirement was to checkout a specific directory from a repo and also checkout each branch which has that directory and copy each branch directory to a target path.</p>
<p>For Example football is a repo and src/ronaldo is the directory which I am trying to checkout and football repo has Branch A,B,C,D. But src/ronaldo is only in branch A and B.
Now I wanna checkout the directory from Branch A and B and copy it to target folder Messi.</p>
<p>I tried to do a sparse checkout a specific directory in a repo and I am able to do it using the below commands.</p>
<pre><code>git clone --filter=blob:none --no-checkout --depth 1 --sparse &lt;project-url&gt;
cd &lt;project&gt;
Specify the folders you want to clone
 
git sparse-checkout add &lt;folder1&gt; &lt;folder2&gt;
git checkout
</code></pre>
<p>But I am not able to find the rest of the branch which has the directory. What other git commands need to be added here.</p>
","0","8961192","",""
"19438254","2892377","2013-10-17 22:14:22","1","801","<git><git-submodules><git-checkout><git-bare>","Why does git checkout from a bare repo delete instead of creating?","<p>This is kind of a weird one, and I apologize in advance if it doesn't have much application outside of my specific circumstances.  I am using git to manage my deployment packages by committing and tagging a set of generated files relating to the deployment and a submodule which points to the release code.  I am attempting to do a git checkout of this deployment tag from a bare repo on each machine into a different, empty directory.  The output I get indicates that it has deleted the files it should have created, and the work-tree directory remains empty afterward.</p>

<pre><code>$ ls -al /var/www/test/
total 0

$ git --bare --work-tree=/var/www/test/ checkout my_tag
D   .gitmodules
D   generated.tgz
D   release
D   signatures.md5
HEAD is now at 8946ff5... Generated contents of deployment package.

$ ls -al /var/www/test/
total 0
</code></pre>

<p>I should state that both the commit referenced by my_tag and the tip of master have the same 4 files (though with different contents).  Which makes it all the stranger that the following procedure gets me 75% of the way there:</p>

<pre><code>$ git --bare --work-tree=/var/www/test/ checkout master
D   .gitmodules
Previous HEAD position was 8946ff5... Generated contents of deployment package.
Switched to branch 'master'

$ ls -al /var/www/test/
total 4
-rw-r--r-- 1 root root    0 Oct 17 17:00 generated.tgz
drwxr-xr-x 2 root root 4096 Oct 17 17:00 release
-rw-r--r-- 1 root root    0 Oct 17 17:00 signatures.md5

$ git --bare --work-tree=/var/www/test/ checkout my_tag
D   .gitmodules
(---- git's warning about detached HEAD state cut ----)
HEAD is now at 8946ff5... Generated contents of deployment package

$ ls -al /var/www/test/
total 4624
-rw-r--r-- 1 root root 2103765 Oct 17 17:02 generated.tgz
drwxr-xr-x 2 root root    4096 Oct 17 17:00 release
-rw-r--r-- 1 root root 2614883 Oct 17 17:02 signatures.md5
</code></pre>

<p>The thing is, ""release"" is a git submodule, and I can't init or update it without .gitmodules, so 75% of the way there still isn't good enough.</p>

<p>One solution to this problem would be to simply clone the repo anew every time I deploy, and maybe I'll go that way if nobody can suggest a better solution.  But ideally I'd like to keep one bare repo on each machine and checkout from that to a new work-tree each time.  Can anybody tell me what's going on here?</p>

<p>For reference, I'm using Git 1.8.2.1.</p>
","0","2892377","",""
"40611175","203415","2016-11-15 13:34:01","3","486","<windows><git><symlink><git-checkout>","git checkout -- <filename> doesn't recover a locally deleted symbolic link on Windows 10","<p>So, yes, I am using Windows 10, when everyone around me at the office is using Linux/Mac.  But I won't give up.</p>

<p>I deleted a Symlink which is part of the repo, that was locally created by ""git clone"" - (Read below why if you are bored)</p>

<p>Now when I run ""git status"" it says : ""Deleted"" for my symlinks.  I want them back, so I tried the following :</p>

<p>git checkout .<br>
git checkout -- <br>
git reset --hard HEAD</p>

<p>Nothing worked, they all completed without errors, but ""git status"" still shows the symlinks are deleted, and indeed ""ls"" shows they are gone.  Any attempt to create them myself using ""ln -s"" (in git-bash) results in ""typechange"" in git status.</p>

<p>How can I get ""git checkout ."" or any other git command to restore the symlinks to be as they are in the repository?</p>
","0","203415","",""
"59415996","8886611","2019-12-19 19:43:12","1","534","<git><azure-devops><git-branch><git-checkout>","Missing branch from 'git branch -a' but shows up with 'git ls-remote origin'","<p>I created a branch through the Azure DevOps portal, and I want to checkout the branch. However, when I run </p>

<p><code>git checkout remotes/origin/dev/&lt;branch name&gt;</code></p>

<p>It returns ""error: pathspec 'remotes/origin/dev/branchname' did not match any file(s) known to git""</p>

<p>So I run</p>

<p><code>git branch -a</code></p>

<p>And the branch is not in the output.</p>

<p>So then I run</p>

<p><code>git ls-remote origin</code></p>

<p>and the branch is there and has the same refs/heads/ prefix as the branches that show up with 'git branch -a'! Is there a different way I can fetch the branches that show up from 'git ls-remote origin'?</p>
","2","8886611","0","0"
"41191831","908939","2016-12-16 20:15:05","0","129","<git><git-checkout><git-status><core.autocrlf>","Can't unmodify files in git","<p>When I merged with another branch, a few of my files became modified automatically.<br>
I tried to <code>checkout --</code> on the files, but <code>git status</code> still shows them as modified.  </p>

<p>I then tried a custom shell function that normally fixes these kinds of problems for me:  </p>

<pre><code>cd `git rev-parse --show-toplevel`;
git reset --hard HEAD &amp;&amp; git clean -d -f;
cd -; 
git rm -r --cached .
git reset --hard HEAD
</code></pre>

<p>The files still showed up as modified.  </p>

<p>I tried  running these chunks of commands through different versions of:   </p>

<pre><code>git config --global core.autocrlf true
git config --global core.autocrlf false
git config --global core.autocrlf input
</code></pre>

<p>The files still show as modified.<br>
I just want a clean <code>git status</code>...  </p>

<p>Is there a command that is guaranteed to do this?   </p>
","5","908939","0","0"
"22204376","2036867","2014-03-05 17:05:47","0","225","<git><git-branch><gitignore><git-checkout>","GIT - Fail to checkout to other branch when nothing to commit - when file is in gitignore","<p>Trying to checkout to another branch </p>

<p>I have a .gitignore file with </p>

<pre><code>.someFile
</code></pre>

<p>trying to checkout to another branch fails even when i dont have any changes </p>

<pre><code>dev@cool:~/proj/source$ git status
# On branch master
nothing to commit, working directory clean
dev@cool:~/proj/source$ git checkout someBranchName 
error: Your local changes to the following files would be overwritten by checkout:
    .someFile
Please, commit your changes or stash them before you can switch branches.
Aborting
dev@cool:~/proj/source$ 
</code></pre>

<p>removing the file from .gitignore and add it again didnt help</p>

<p>running command :</p>

<pre><code>      git update-index --assume-unchanged .someFile
</code></pre>

<p>or</p>

<pre><code> git rm --cached .someFile
</code></pre>

<p>didnt help</p>

<p>any idea ?</p>
","1","2036867","",""
"3689137","289715","2010-09-10 23:54:33","15","10955","<git><git-clone><git-checkout>","error: git checkout-index: unable to create file","<p>What I am trying to do is a git clone on windows, but the parent repository exists in a unix machine. </p>

<p>Am cloning using ssh to get a clone from UNIX to windows, and I get this weird error.</p>

<pre><code>error: git checkout-index: unable to create file &lt;filename&gt;
</code></pre>

<p>This happens during the checkout step of a git clone.</p>

<p>Can anyone help me?</p>
","2","289715","0","0"
"3699466","446354","2010-09-13 10:14:59","1","12446","<git><git-checkout>","git checkout HEAD~2 (example) deletes untracked files if they were added with last commit","<p>I add new files (which were present before as untracked files) and commit them. When I checkout to before this commit, these files are deleted. They should not.</p>

<p>It does not matter whether .gitignore lists these files or not (which requires to do git add -f ...).</p>
","1","446354","0","0"
"60190759","62131","2020-02-12 14:37:34","13","3715","<git><git-checkout><git-fetch><revision-history><git-sparse-checkout>","How do I clone, fetch or sparse checkout a single directory or a list of directories from git repository?","<p>How do I clone, fetch or sparse checkout a single file or directory or a list of files or directories from a git repository avoiding downloading the entire history or at least keeping history download at minimum?</p>
<p>For the benefit of people landing here, these are references to other similar questions:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository"">How do I clone a subdirectory only of a Git repository?</a></li>
<li><a href=""https://stackoverflow.com/questions/2466735/how-to-sparsely-checkout-only-one-single-file-from-a-git-repository"">How to sparsely checkout only one single file from a git repository?</a></li>
<li><a href=""https://stackoverflow.com/questions/4114887/is-it-possible-to-do-a-sparse-checkout-without-checking-out-the-whole-repository"">Is it possible to do a sparse checkout without checking out the whole repository first?</a></li>
</ul>
<p>These similar questions were asked long ago and git evolved ever since, which ended up causing a flood of different answers, some better, some worse, depending on the version of git being considered. The trouble is that not a single answer from these aforementioned questions attend all requirements from all these questions combined, which means that you have to read all answers and compile in your head your own answer which eventually attend all requirements.</p>
<p>This question here expands on previous questions mentioned, imposing more flexible and stringent requirements than all other questions combined. So, once again:</p>
<p>How do I clone, fetch or sparse checkout a single file or directory or a list of files or directories from a git repository avoiding downloading the entire history or at least keeping history download at minimum?</p>
","6","62131","0","0"
"60201840","3405291","2020-02-13 06:40:07","1","179","<git><github><git-merge><git-checkout><git-merge-conflict>","Resolve `git merge master` conflicts after doing `git checkout master --patch`","<p>To be able to merge my local branch with <code>master</code> by a pull request, I'm trying to update my local branch with the latest modification on <code>master</code>. Since conflicts are complicated, I used this command to hand pick chunks of code modifications:</p>

<pre><code>git checkout master --patch
</code></pre>

<p>Even after doing so, I cannot merge my local branch into <code>master</code> by a pull request due to conflicts. Also running this command, might <em>not</em> work due to complex conflicts:</p>

<pre><code>git merge master
</code></pre>

<p>I ran out of options, how can I update my local branch with latest modifications on <code>master</code> without messing up anything?</p>
","0","3405291","",""
"22641249","816213","2014-03-25 16:50:34","6","6150","<git><git-checkout><git-stash><merge-conflict-resolution>","Difference between git checkout HEAD -- filename and git checkout -- filename","<p>Let's begin with a situation.</p>

<ol>
<li>I stash some changes (5 files) <code>git stash</code></li>
<li>Change some files</li>
<li>Commit the changes <code>git commit -m ""Commit message""</code></li>
<li>Get the changes back from stash <code>git stash apply</code></li>
</ol>

<p>I receive a merge-conflict in 2 files because of the commit. I no longer want the changes in those 2 files So I tried to revert those changes.</p>

<p>I did <code>git checkout -- background.js</code></p>

<p>It failed with error </p>

<blockquote>
  <p>error: path 'src/background/background.js' is unmerged</p>
</blockquote>

<p>But then I read <a href=""https://stackoverflow.com/a/7147320/1310070"">this SO post</a> and tried</p>

<pre><code>git checkout HEAD -- background.js
</code></pre>

<p>It works successfully. It happened with me for both the files. I want to understand the difference bewteen</p>

<p><code>git checkout -- file</code> AND <code>git checkout HEAD -- file</code></p>
","0","816213","0","0"
"19655659","2931566","2013-10-29 10:31:47","1","219","<git><git-checkout><git-post-receive>","git checkout modifies too many files","<p>I'm using git to publish a web site.
The workflow is roughly:</p>

<pre><code>$ git add my_file
$ git commit -m comment my_file
$ git push # Just house-keeping, goes to my master repo
$ git push ssh://user@webserver//var/www/repo.git
</code></pre>

<p>A post-receive hook on the web server looks like this:</p>

<pre><code>#!/bin/bash

working=$(pwd)
working=${working##*/}
working=../${working%.*}
while read oldrev newrev ref ; do
    branch=$(echo ${ref} | cut -d/ -f3)
    GIT_WORK_TREE=${working} git checkout -f ${branch}
done
</code></pre>

<p>The vast majority of the time this works just fine.
When I say fine I mean, if I've added one file, the checkout modifies that one file.</p>

<p>Only if I wait for a day and then make another commit &amp; push, the git checkout in the post-receive hook re-fetches every single file in my working copy. Not only does it take ages, but it then messes with an rsync I run later on.</p>

<p>what can be happening overnight so that the checkout that happens tomorrow is wildly different from one that I can repeat over and over again today?</p>
","0","2931566","",""
"49320573","2997932","2018-03-16 12:17:17","1","7153","<git><github><gitlab><versioning><git-checkout>","Need for git pull right after a git checkout for the first time","<p>From my understanding about git, every time I perform a <code>git checkout</code> one of two things happens:</p>

<ol>
<li>The branch already exists locally and so the HEAD is simply positioned on the top of it.</li>
<li>The branch does not exist locally and so git ""clones"" it from the remote repository (let's just assume that git refs are updated) </li>
</ol>

<p>However, for several times I perform a <code>git checkout</code> to a remote branch (that never existed locally) and I get an outdated content. Then I perform a <code>git pull</code> and new commits are received.</p>

<p>Does anyone had this problem too? Do you know why this happens?</p>
","3","2997932","0","0"
"32158416","5255493","2015-08-22 16:36:59","0","346","<git><github><git-checkout>","git commits c1,c2,c3,c4 head=c4 now checkout to c1 and then again checkout to c4","<p>Suppose, I have committed four commits and they are c1, c2, c3, c4 in order. Now i am checking out c1 commit but then i decide to go back to C4 ( Let's say I have stored the commit ID of c4). Will c2 and c3 commits be reflected if I directly jump from c1 to c4?</p>
","2","5255493","",""
"68200539","4230755","2021-06-30 19:20:13","0","66","<git><git-checkout><git-add><git-status>","Command to tell git to not track certain files","<p>I know there is a shortcut for this, and cannot remember it.</p>
<p>I am working in a repository, and have about 8 files I need to add and commit, and 2 that are modified, that I do not need to commit. Rather than running <code>git add &lt;file&gt;</code> for each file I'm committing, I would like to run 2 commands to ignore the files I do not need to add, and then run <code>git add . </code> for the 8 I am adding/committing.</p>
<p>I thought the command to ignore the files I don't need was <code>git checkout -- &lt;file I don't need&gt;</code>, but I keep getting the error that <code>pathspec 'file I don't need' did not match any file(s) known to git</code></p>
<p>I thought, of course, it's because those 2 files are still untracked. So I added everything with <code>git add . </code> and THEN ran <code>git checkout -- &lt;file I don't need&gt;</code>. However, when I run a <code>git status</code> after that,  those files still show up to be committed.</p>
<p>Any advice would be much appreciated!</p>
","3","4230755","",""
"68227331","65889","2021-07-02 14:56:47","1","42","<git><git-checkout><git-switch>","Can I retrieve uncommited changes from git after a few known git commands?","<p>I have a local git repo where I did some  substantial editing to a file <code>file1.txt</code>.</p>
<p>Then I issued a few <code>git</code> commands to look at older versions of this file (and other files). I totally had forgotten that thsi - of course! - would write old veersions to teh same file I just had edited!</p>
<p>The commands I issued are</p>
<ul>
<li>Some <code>git log ...</code> commands</li>
<li>Some <code>git checkout &lt;COMMIT&gt; file1.txt</code> commands</li>
<li>Some <code>git checkout &lt;COMMIT&gt;</code> commands</li>
<li>One <code>git status</code> command</li>
<li>One <code>git switch -</code> and one <code>git switch</code> command</li>
<li>A final <code>git checkout master</code> command.</li>
</ul>
<p>I don't think any of these commands gave me an warning that they would override my uncommitted changes. (I did however get an info about &quot;detached HEAD mode&quot;.)</p>
<p>So I hope there is a chance to get the uncommitted changes back. Does <code>git</code> save uncommited changes somewhere before checking out old versions? Can I retrieve my uncommitted changes?</p>
","3","65889","",""
"14707172","1611830","2013-02-05 12:06:47","0","135","<git><gitignore><git-checkout>","No checkout because of gitignore","<p>I have a project under git. In my gitignore file, I have a folder folder/ I don't want git to care about. The problem, is each time I want to checkout a branch , I am asked to error: The following untracked working tree files would be overwritten by checkout:</p>

<p>error: The following untracked working tree files would be overwritten by checkout:
folder/somefile
folder/subfolder/somefile...</p>

<p>So I moved away the folder/, commited again and then took back the folder/ in my git repo. But why is this message always appearing ? (In my .gitignore, I have a line :  folder/)</p>
","0","1611830","",""
"50333774","6147658","2018-05-14 15:16:54","0","88","<git><rollback><git-commit><snapshot><git-checkout>","How can I git rollback/redo working dictionary files within one branch like a snapshot?","<p>I only has one git branch (master), also it is a private repository (only used by myself). How can I easily rollback/redo my working dictionary files like snapshot management?</p>

<p>For example:</p>

<ol>
<li>I commit 1st time, with only 1.txt in the dictionary</li>
<li>I commit 2nd time, to add 2.txt in the dictionary</li>
<li>I commit 3rd time, to add 3.txt in the dictionary</li>
</ol>

<p>Now the question is:</p>

<ol>
<li>what command I should issue for git to recover my working dictionary only include 1.txt file?</li>
<li>After above step 1, what git command I should  issue again to restore my working dictionary, let it has 3 files (1.txt, 2.txt, 3.txt) again? </li>
</ol>

<p>Basically I want to treat it as snapshot management for working dictionary to easily switch between different commit. Is it doable with git?</p>
","0","6147658","",""
"15476444","1126393","2013-03-18 12:05:39","1","83","<git><git-checkout>","Git checkout from git://* not working","<p>I am trying to checkout from the following git://github.com/ajaxorg/cloud9.git but this fails, with this error message:</p>

<pre><code>Cloning into cloud9...
github.com[0: 207.97.227.239]: errno=Connection timed out
fatal: unable to connect a socket (Connection timed out)
</code></pre>

<p>When I checkout from <a href=""https://github.com/ajaxorg/cloud9.git"" rel=""nofollow"">https://github.com/ajaxorg/cloud9.git</a> it works without any problems.</p>

<p>I am working on Ubuntu Desktop 32bit 11.04. An upgrade to Ubuntu 12.10 is no option.</p>
","4","1126393","0","0"
"38901626","6385128","2016-08-11 16:22:45","0","59","<git-merge><git-checkout><libgit2><fast-forward>","git_checkout_tree() with conflicts, can it write the conflicting blocks into files?","<p>Currently I tried following options:</p>

<pre><code>checkout_options.checkout_strategy = GIT_CHECKOUT_SAFE |
GIT_CHECKOUT_ALLOW_CONFLICTS |
GIT_CHECKOUT_CONFLICT_STYLE_MERGE;
checkout_options.checkout_strategy = GIT_CHECKOUT_SAFE |
GIT_CHECKOUT_CONFLICT_STYLE_MERGE;
checkout_options.checkout_strategy = GIT_CHECKOUT_SAFE |
GIT_CHECKOUT_ALLOW_CONFLICTS;
</code></pre>

<p>The most promising was the first set of flags – perform checkout even when conflicts are expected, and ""Write normal merge files for conflicts"", as header of <code>*_STYLE_MERGE</code> says. I had hoped that this sentence means that in files with conflicts, there gonna be the ""&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; theirs"", etc. preambles wrapping conflicting code blocks. Instead, the file is left untouched. Is there a way to have the preambles, etc. written to files?</p>
","2","6385128","",""
"33896910","2124712","2015-11-24 14:58:10","5","7349","<git><reset><git-checkout>","git: reset to remote branch","<p>After cloning a repository I cannot reset that repository's state to a remote branch.</p>

<pre><code>$ git clone &lt;repo&gt;
$ git reset --hard &lt;upstream branch&gt;
fatal: ambiguous argument '&lt;upstream branch&gt;': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]
</code></pre>

<p>What works fine is either prefixing with <code>origin</code></p>

<pre><code>$ git reset --hard origin/&lt;upstream branch&gt;
</code></pre>

<p>or do a checkout before</p>

<pre><code>$ git checkout &lt;upstream branch&gt;
$ git reset --hard &lt;upstream branch&gt;
</code></pre>

<p>Questions:</p>

<ol>
<li>What extra information or state change does the checkout command provide to the local git repository so that it eventually can reset its state?</li>
<li>Is there a command (like checkout) I can run before the reset command that is not branch specific?</li>
</ol>
","4","2124712","0","0"
"17353400","","2013-06-27 21:19:40","0","39","<git><git-checkout><working-directory>","Can I checkout using git and delete all but one dir on my working tree?","<p>I need that every time I checkout a revision, the working dir end with just the files and directories of that revision, not matter what existed in the working tree at the time I checkout, with exception of a directory on my working that I never want delete.</p>
","0","","",""
"17374871","1023812","2013-06-28 22:59:32","0","330","<git><git-push><git-pull><git-checkout><git-reset>","How badly did I hose my git repo?","<p>My project has a bare repo setup on the server. I'm currently on branch <code>0.9/develop</code>. I merged <code>0.9/develop</code> with a branch that another developer was working on. It turns out that it would be <strong>way</strong> more work to fix his code than to obliterate his changes entirely. Unfortunately, I already ran a <code>git push origin 0.9/develop</code> after having committed the merge AND I pulled those changes to my development AND staging servers (yes, I'm stupid).</p>

<p>I've been going through a bunch of somewhat similar questions on SO, but none of them quite seem to cover my exact case. This one was particularly useful: <a href=""https://stackoverflow.com/questions/4114095/git-revert-to-previous-commit-how"">How to revert Git repository to a previous commit?</a></p>

<p>Using info from that question, I was able to successfully obliterate the last commit off of the project. Specifically, I did a <code>git reset --hard f6c84a0</code>, which successfully reset my local repository to the commit right before I merged the other developer's n00bery into my poetry.</p>

<p>Okay, great. Now I just need to get the bare repo fixed up. So I tried <code>git push --force origin 0.9/develop</code>. Unfortunately I lost the specific message that the server sent back, but it was something along the lines of ""success"", and it showed that the remote repo had been updated to commit f6c84a0.</p>

<p>When I tried to ssh into the server and then go to my staging environment and run a <code>git pull</code>, the response was:</p>

<pre><code>From /home/ben/web/example
 + 77d54e4...f6c84a0 0.9/develop -&gt; origin/0.9/develop  (forced update)
Already up-to-date.
</code></pre>

<p>However, when I ran a <code>git log</code> from the staging server, all of the commits from the merge are still on the <code>0.9/develop</code> branch. I tried a couple of things, like <code>git pull --force</code>, but I couldn't get the bad commits to go away.</p>

<p>Okay, fine. There's more than one way to skin a cat. I wiped the staging server clean and did a fresh <code>git clone --recursive --no-hardlinks example.git stage.example.com</code> and ran the necessary setup script that does a few little server maintenance things.</p>

<p>Now I can't get back to my <code>0.9/develop branch</code>. In the past, I have simply run <code>git checkout 0.9/develop</code>, but if I try that now, I get this:</p>

<pre><code>Branch 0.9/develop set up to track remote branch 0.9/develop from origin.
Switched to a new branch '0.9/develop'
</code></pre>

<p>Wait...what? <code>0.9/develop</code> is not a new branch. Working with info from this question: <a href=""https://stackoverflow.com/questions/67699/how-do-i-clone-all-remote-branches-with-git"">How to clone all remote branches in Git?</a> I did a <code>git branch -a</code> and got the following:</p>

<pre><code>* 0.9/develop
  master
  remotes/origin/0.8/develop
  remotes/origin/0.8/master
  remotes/origin/0.9/develop
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/category-address
  remotes/origin/jaminimaj
  remotes/origin/master
  remotes/origin/permissions
  remotes/origin/ticket-duration
  remotes/origin/timzone-support
</code></pre>

<p>I then tried <code>git checkout origin/0.9/develop</code>, but I got the following message:</p>

<pre><code>Note: checking out 'origin/0.9/develop'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at f6c84a0... bugfix: revert email helper
</code></pre>

<p>Well, the good news is the staging server now has the proper code base, but I'm in a detached HEAD state. I realize that I'm probably missing something very minor here, but it certainly is messing with my Friday evening. How can I get my staging server HEAD pointing back to the HEAD of <code>0.9/develop</code>? Also, I want to do the same thing on my development environment, but I'd rather do it in the proper <code>git</code> fashion than erasing the whole server and starting over again. Can I do that, or will I just have to brute-force it by rebuilding the server from the repo? Thanks for the help everybody!</p>
","5","1023812","",""
"17441279","846910","2013-07-03 06:39:24","3","3393","<git><gitignore><git-pull><git-remote><git-checkout>","git: ignore a file on pull from remote1, but push local version to remote2","<p>I have 3 git repositories:</p>

<ul>
<li><code>local</code>: my development repo on my local machine;</li>
<li><code>remote1</code> used for collaboration with other developers;</li>
<li><p><code>remote2</code> which is a Production server.</p>

<ol>
<li><p>I would like to <code>pull</code> regularly from <code>remote1</code> to my <code>local</code> repo and keep some local tracked files intact (i.e. fetch and merge from <code>remote1</code>, but exclude some local tracked files from being merged).</p></li>
<li><p>On the other side, I would like to regularly <code>push</code> to <code>remote2</code> and I would like local tracked files to be pushed as well.</p></li>
</ol></li>
</ul>

<p>In other words, I would like to have the following versions of <code>file1</code>:</p>

<ul>
<li><code>local</code>: file1 <em>v.1</em></li>
<li><code>remote1</code>: file1, <em>v.2</em></li>
<li><code>remote2</code>: file1, <em>v.1</em></li>
</ul>

<p>Note: <code>file1</code> can be anything (.css, .html, even .png)</p>

<p>I have tried the following approaches:</p>

<ul>
<li><code>.gitignore</code> a file (does not work, the file becomes being tracked again after pull from <code>remote1</code>)</li>
<li><code>git pull --no-ff --no-commit remote1 master</code>, then <code>git checkout --ours file1</code> according to <a href=""https://stackoverflow.com/questions/2073841/how-can-i-discard-remote-changes-and-mark-a-file-as-resolved"">this</a> (does not work, file1 becomes v.2)</li>
<li><code>.git/info/exclude</code> as described <a href=""https://stackoverflow.com/questions/1753070/git-ignore-files-only-locally/1753078#1753078"">here</a> (does not work, nothing is ignored and even if it is ignored, <code>file1</code> will not be pushed to <code>remote2</code> then) </li>
</ul>
","0","846910","0","0"
"34005686","3362364","2015-11-30 18:44:36","0","123","<git><github><git-branch><git-checkout>","Mistakenly created a new branch and git won't pull","<p>We have 2 branches. One is <strong>live</strong> and the other is <strong>admin</strong>. We just moved to a paid github account and I was working on <strong>live</strong>.</p>

<p>After git push, when i type ""git branch"", only <strong>live</strong> shows up. I don't know why. Mistakenly, i typed ""git branch admin"" instead of ""git checkout admin"" and I think this created a clone of the <strong>live</strong>. </p>

<p>I can't access the <strong>admin</strong> branch anymore! What should I do?</p>
","2","3362364","",""
"17479263","2379706","2013-07-04 23:33:33","0","130","<git><gitignore><git-checkout>","Moving gitignored files with branch after git-checkout","<p>I have a single repo where each branch specifies different approaches to the same problem:</p>

<pre><code>$ git branch
approach1
approach2
approach3
</code></pre>

<p>Now for each of these approaches, I have several auxiliary files, but the auxiliary files are specific to each branch.</p>

<p>So my question is: Is it possible to have these files not be tracked, but move with the branch when I <code>git checkout</code> and move to a different branch?</p>

<p>This is what I would like to happen when I move to different branches:</p>

<pre><code>$ git checkout approach1
$ ls
notrack_test1.cpio.gz  notrack_test2.tar  notrack_test2-logging.img
tracked1/  tracked2.tmp

$ git checkout approach2
$ ls
notrack_check1.cpio.gz  notrack_check2.cpio.zip
notrack_check2-no_cam.img  tracked1.img  tracked_source/
</code></pre>

<p>Is this possible? The main reason I need to do this is because I have a large amount of auxiliary files per branch that should not be committed and not tracked.</p>
","2","2379706","",""
"34051174","1438029","2015-12-02 19:19:57","4","1337","<git><diff><revert><git-checkout><git-revert>","After reverting a file to a previous revision git diff shows no differences?","<p>After <a href=""https://stackoverflow.com/questions/215718/reset-or-revert-a-specific-file-to-a-specific-revision-using-git"">reverting a file to a previous revision</a> in git</p>

<p><code>git checkout abcdefg myfile</code></p>

<p><code>git diff myfile</code> &lt;-- shows no results.</p>
","0","1438029","",""
"34089089","631619","2015-12-04 13:05:17","12","2734","<git><git-branch><git-merge><git-checkout><git-squash>","How to squash my git branch commits into the same branch without rebasing?","<p>I have a local branch, we're using git-flow with Pull Requests and I'm looking to squash a few commits after receiving PR feedback.</p>

<p>How can I squash all my commits (from PR's for example) into the same branch?</p>

<p>I imagine it would be something like:</p>

<pre><code>git checkout master                    # For master
git pull                               # Get all branches up-to-date
git checkout feature1                  # Checkout the branch
git checkout -b feature1_squash        # Make a copy of the branch
git branch -D feature1                 # Delete original branch
git checkout master                    # (?) Branch off latest master for safety
git checkout -b feature1               # Make new (empty) original branch
git merge --squash feature1_squash     # Merge with squash into it
git push -f feature1                   # Push, force will be required
</code></pre>

<p>but I'm not sure.<br>
With that many steps it also seems like a good case for using a function to tie it all together and just pass the branch name as a parameter.  Of course automating it would mean making sure to handle errors, exceptions, edge cases, etc.</p>

<p>I don't want to use interactive rebase because it's a little tricky to get right for newbies that I train.  I also don't want to have to know the number of commits, I just want to do all the ones that exist on this branch.</p>
","2","631619","0","0"
"69114282","9674909","2021-09-09 07:52:02","0","85","<git><version><commit><git-checkout><git-reset>","Git checkout commit command works like git reset commit","<p>I want just to see my previous commits without doing any changes.</p>
<p>I use:</p>
<pre><code>git checkout id_of_certain_commit
</code></pre>
<p>But when I try to get back, it looks like everything that was from that point is removed. I use:</p>
<pre><code>git checkout master
</code></pre>
<p>It does not get back to the commits that were ahead...</p>
<p>Please, help. It looks like I am doing something wrong</p>
","1","9674909","0","0"
"34287722","2217962","2015-12-15 11:12:20","23","19887","<git><git-checkout>","git checkout master does not switch branch - repository broken?","<p><strong>tl;dr</strong>: <code>git checkout master</code> does not switch to master branch, gives no error or any output at all and I have no clue why. Any other branch works fine.</p>

<p>I have a git repository that consists of the branches <code>development</code> and <code>master</code>. I do a fresh clone of the repository, checking out branch <code>development</code> as default.</p>

<pre><code>$ git clone &lt;REPO-URL&gt; --branch development
$ git branch -a
* development
origin/HEAD -&gt; origin/development
origin/development
origin/master
$ git show-ref 
656c781c2affc26792f857baf8e232de07101535 refs/heads/development
656c781c2affc26792f857baf8e232de07101535 refs/remotes/origin/HEAD
656c781c2affc26792f857baf8e232de07101535 refs/remotes/origin/development
cfee1a1761642453edf5d001565f23b50243ff09 refs/remotes/origin/master
</code></pre>

<p>The ref master is pointing to is correct, that commit does exists and is the latest commit of my master branch.</p>

<p>So far everything looks normal, but when I try to switch to master this is happening:</p>

<pre><code>$ git checkout master
$ git branch 
* development
</code></pre>

<p>No message from checkout, no error, nothing, and the branch is not switched.</p>

<p>Things I have tried so far:</p>

<ul>
<li>Creating a second branch <code>master2</code> from the same commit => checkout works fine.</li>
<li>Deleting and re-creating branch master both local and on origin => again no checkout possible</li>
<li><code>git checkout -b master --track origin/master</code> => works, but I think it should not be necessary to use this command as this is what <code>git checkout master</code> should do automatically</li>
<li>Committing and pushing to master works, but does not change the checkout problem</li>
<li>I tried several git versions (1.9, 2.2) and machines (linux, windows), problem occurs everywhere.</li>
</ul>

<p>Any further ideas? What am I missing? Is my repository broken? How can I fix this?</p>
","1","2217962","0","0"
"57499728","11046237","2019-08-14 17:50:14","9","5166","<git><git-bash><git-checkout>","What happens to a modified file when using ""git checkout""?","<p>I was simply trying out a few things on a project and wanted to delete some modified files I was working with but no longer needed.</p>

<p>I got careless and typed <code>git checkout file</code> instead of <code>git checkout -- file</code>. So essentially I was just checking out this modified file and I have no clue where that modified file went off to. </p>

<p>I've tried using <code>git update-index --fresh</code> just to try and see where this modified file could have gone but it seems like it may have been deleted in the end? </p>

<pre><code>    modified:   test/ssc_test/cmod_tcsdirect_steam_test.cpp
    modified:   test/ssc_test/cmod_tcsfresnel_molten_salt_test.cpp
    modified:   test/ssc_test/cmod_tcsmolten_salt_test.cpp
</code></pre>

<p>These were the files I was trying to get rid of but forgot to add the <code>--</code> to get rid of one of the edited files. </p>

<p>After checking out this file, instead of deleting it, it gave me the message, <code>Updated 1 path from the index</code> and it was no longer displayed along with the other modified files when using <code>git status</code>.</p>

<p>I'm pretty clueless with what happened exactly. Was it was deleted or hidden somewhere in the index, or something else?</p>
","4","11046237","",""
"57527130","3587229","2019-08-16 15:15:29","1","57","<git><git-checkout><git-reset>","After committing, resetting head and then checking out the commit, git does not restore removed files","<p>After committing changes, I ran <code>git reset --hard HEAD^</code> mistakenly and it caused me to lose the files in that committed changes.</p>

<p>I am trying to recover these files.</p>

<p>When I do <code>git reflog</code> it shows that previous commit, <code>thatCommit</code>, so I then proceed with:</p>

<p><code>git checkout thatCommit</code></p>

<p>However, none of the files are restored.</p>

<p>When I then type <code>git checkout</code> it prints out all the files that have been deleted:</p>

<pre><code>D path/to/deletedFile1
D path/to/deletedFile2
M path/to/changedFile1
M path/to/changedFile2
</code></pre>

<p>I'd like the deleted files and changed files to be restored, but I cannot see <code>path/to/deletedFile1</code> in my repo/branch.</p>

<p>How can I recover these files?</p>
","0","3587229","0","0"
"17822522","1167662","2013-07-23 23:09:02","0","102","<git><delete-file><git-checkout><revision>","Checked out an old revision in git, then returned to latest revision, but deleted files from old revision are still in local directory?","<p>While using git, I checked out a specific revision in my master branch:</p>

<p><code>checkout &lt;branch hash&gt; .</code></p>

<p>I only did this to take a look at some previous files, I made no changes.  I then attempted to reset my current state to my latest revision.  Unfortunately I attempted several commands because I wasn't sure if it initially worked; the commands included:</p>

<p><code>checkout master .</code></p>

<p><code>checkout HEAD .</code></p>

<p><code>reset HEAD --hard</code></p>

<p>I wasn't sure if it worked at first because of certain behavior that indicated a previous file of the old revision was present.</p>

<p>I then realized that my modified and new files were indeed restored to the current revision, however files that I deleted between the old revision and the current revision are still in my local directory.  Is this supposed to occur? I imagine that no one would generally want old, deleted files to be present after returning to the current revision, and yet this appears to be the case.</p>

<p>I was wondering if I did something wrong for this to occur or if there is another command I can use to remove these unwanted files of the temporarily checked out revision?</p>
","1","1167662","",""
"17852875","1185665","2013-07-25 08:31:15","0","78","<git><git-checkout>","Getting current of current remote git repository","<p>I am working on a python script that takes a repository name from a properties file and it either it does</p>

<pre><code>git remote add -f origin repository_name
</code></pre>

<p>or if it finds a .git folder already there, it just fetches a branch.</p>

<p>My problem is, the above command takes lot of time .So I will want to find that the repository name that is coming from properties file is same as represented by .git folder(or we can say someone already ran above command). If it is same then go ahead and just checkout a branch else run the above command.</p>

<p>I will want to put a check that if the repository that's coming from properties is same as represented by .git folder.</p>
","0","1185665","",""
"57874532","2208672","2019-09-10 16:06:06","1","259","<git><git-submodules><git-checkout>","git checkout takes too long ""Checking out submodules""","<p>Every time i do a ""git checkout "", it takes at least 90 secs to switch to a branch. It used to take less than a second. I see the message ""Checking out submodules"" and it takes a while to get out of that. How do I fix this please ?
Any help appreciated.</p>

<p>Tried re-installing git. But no change.</p>
","4","2208672","0","0"
"35048508","5819516","2016-01-27 21:35:26","0","190","<git><git-merge><atlassian-sourcetree><git-commit><git-checkout>","Apply locally committed changes over pulled changes using source tree and git","<p>I have a serious problem, I committed my local changes to the local branch. Then, I did a pull from the remote server. I then resolved the conflict. But, one mistake I did was, I accidentally accepted the change of the remote server over mine. So now, all my changes are gone. Luckily, I still have that local commit with my changes. </p>

<p>Now, I want my local commit to overwrite my pulled file. I am not sure what is the right way to do this on sourcetree. I can also try the command line on sourcetree. I have tried to checkout a branch on my local change/commit and marked it to track the remote branch. But that is not over writing it with my committed file. Does anybody know how to fix this?</p>

<p>Thanks</p>
","0","5819516","",""
"35578733","3917725","2016-02-23 13:22:35","6","585","<git><subdirectory><git-checkout><sparse-checkout><git-sparse-checkout>","How can I sparse checkout a subdirectory from git without checking out its parent directories?","<p>I am trying to sparse-checkout a subdirectory from my git repository.</p>

<p>The repository contains multiple plugins for wordpress and I want to check them out one by one. With the below posted solutions I have encountered the problem that EVERYTIME I check out the parent directory of the subdirectory is also checked out and the plugins are not working.</p>

<p>I tried something like this <a href=""https://stackoverflow.com/questions/4114887/is-it-possible-to-do-a-sparse-checkout-without-checking-out-the-whole-repository"">Is it possible to do a sparse checkout without checking out the whole repository first?</a> and something like that <a href=""https://stackoverflow.com/questions/15827117/git-sparse-checkout-for-simple-web-deployment"">Git sparse checkout for simple web deployment</a> .</p>

<p>I really hope somebody can help me because I just feel like I kind of missed some information.</p>

<p>Thank you.</p>
","4","3917725","",""
"39898345","294813","2016-10-06 14:12:19","2","512","<git><git-branch><git-checkout>","git branch -f and git checkout in one step","<p>Sometimes I need to move a branch to my current commit. There is two ways I can do it:</p>

<pre><code>git checkout foo
git reset --hard HEAD@{1}
</code></pre>

<p>I don't like this because this way I have to change the working directory twice. A better option is this:</p>

<pre><code>git branch -f foo
git checkout foo
</code></pre>

<p>This is better, but I would like to do it in one step, just like when I switch to a new branch <code>git checkout -b</code>. Unfortunately, <code>git checkout -f -b foo</code> doesn't work.</p>
","0","294813","",""
"51279331","8331235","2018-07-11 07:12:44","1","225","<git-checkout>","difference between git --git-dir checkout and git checkout","<p>git checkout acts differently for using option <code>--git-dir</code>.</p>

<p>Commands :</p>

<ol>
<li><code>inside_gitdir$ git checkout remote/branch</code></li>
<li><code>outside_gitdir$ git --git-dir=/path/.git checkout remote/branch</code></li>
</ol>

<p>Here <strong>command 1</strong> works well and checking out. but the <strong>command 2</strong> shows to move files like :</p>

<pre><code>error: The following untracked working tree files would be overwritten by checkout:
someFiles

Please move or remove them before you can switch branches.
Aborting
</code></pre>

<p>I thought both the commands are running in same way. But,</p>

<ul>
<li>Why am i getting this error in second command not in first ?</li>
<li>What is the difference of using <code>--git-dir</code> option ?</li>
</ul>
","0","8331235","",""
"15013017","306295","2013-02-21 21:57:22","1","58","<git><commit><git-checkout>","How do I remove a file change from a commit that has not been pushed to origin in git?","<p>I have a file that I accidentally added to my most recent commit. I want to remove the changes, but leave the file in the repository. That is because it is a generated sass stylesheet and I always have merge problems with it. Since the server will regenerate it anyway I would really like to just avoid committing it.</p>
","0","306295","",""
"17965631","1649021","2013-07-31 08:46:32","0","2854","<xcode><git><git-checkout>","git checkout for xcode","<p>So I've been watching some videos from the Facebook Mobile DevCon 2013 (<a href=""http://www.youtube.com/watch?v=mLuaUtbGvEM"" rel=""nofollow"">http://www.youtube.com/watch?v=mLuaUtbGvEM</a>) on youtube and every time someone explains something new he or she does a new checkout and all the new code was added to your project. So is this something like different versions of your project? How does this exactly work?</p>

<p>Can someone just explain roughly what a git checkout is and what is needed to set one up?</p>

<p><strong>EDIT</strong>
The speaker does a git checkout on 38:49</p>
","0","1649021","",""
"51352460","1223975","2018-07-15 21:41:14","1","308","<git><git-checkout>","Undo git command - git checkout --","<p>Is there a way to undo the following git command:</p>

<pre><code>git checkout -- .
</code></pre>

<p>I was trying to remove files that were added to the repo directory but not staged or committed. That command didn't seem to do that, instead changing some other files.</p>

<p><strong>Update:</strong></p>

<p>There's a difference between untracked filed and unstaged files. In this case, I would like to find a way to discard both untracked and unstaged files. When I ran <code>git checkout -- .</code>, I thought it would get rid of untracked files, but it only got rid of unstaged files, as far as I can tell.</p>
","2","1223975","0","0"
"34500227","","2015-12-28 20:23:20","1","242","<git><git-checkout>","""git branch checkout"" does not change directory content","<p>I have two branches, let's call them <code>project/branch-A</code> and <code>project/branch-B</code>. In branch A I have a directory, let's say <code>parent/dirI/dirII/dirIII</code> . </p>

<p>In branch B I have <code>parent/dirI/dirIII</code> where I have moved <code>dirIII</code> up one level and remove <code>dirII</code>. Now when I am on branch A and go </p>

<pre><code>git checkout branch-B
</code></pre>

<p>I still can see <code>dirII</code> and <code>dirIII</code> with all the correct contents in <code>dirIII</code>. This does not change, again when I am currently on <code>branch-B</code> and go</p>

<pre><code>git checkout branch-A
</code></pre>

<p>I get the same stuff again: both <code>dirII</code> and <code>dirIII</code> presents in the lower level of <code>dirI</code>.</p>

<p>What is happening?<br>
Have I done something wrong? Or is this how <code>git</code> supposed to work?</p>
","3","","0","0"
"51364584","7762809","2018-07-16 14:50:59","0","58","<git><git-checkout>","git: File shows up as modified immediately after checkout from repo","<pre><code>jen.test@wswp0 MINGW64 /c/inetpub/wwwroot/2.0 (master)

$ git fetch


jen.test@wswp0 MINGW64 /c/inetpub/wwwroot/2.0 (master)

$ git checkout origin/master -- testFile.php


jen.test@wswp0 MINGW64 /c/inetpub/wwwroot/2.0 (master)

$ git status testFile.php

On branch master

Changes to be committed:

  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   testFile.php


jen.test@wswp0 MINGW64 /c/inetpub/wwwroot/2.0 (master)

$
</code></pre>

<p>This is what I was trying to do - I have made changes to several files including testFile.php from another computer. Those files are committed to the repo, and I executed a ""git push origin master"". I like to get the latest testFile.php from the repo, but not the other files.</p>
","2","7762809","",""
"69596805","9953550","2021-10-16 15:04:33","-1","73","<git><git-checkout><git-revert>","Can I revert to a previous version of just one file even if I git added all files before a commit?","<p>Can I revert to a previous version of just one file even if I git added all files before a commit?</p>
<p>So, this is what I did:
<code>git add .</code> then <code>git commit -m &quot;my changes&quot;</code> then <code>git push</code></p>
<p>So there have been many other git add . and commits between <code>&quot;my changes&quot;</code> and the current head.</p>
<p>Is it possible to revert back to <code>&quot;my changes&quot;</code> state for only one file even though I git added several files(<code>git add .</code>)?</p>
","0","9953550","",""
"73555417","16556697","2022-08-31 11:47:18","1","993","<git><git-branch><git-checkout>","fatal: unable to read tree error on git checkout","<p>Unfortunately my hard drive got damaged, and now I'm trying to restore my project files, which are in a repository on another branch.</p>
<p>When <code>git checkout currency-convertor</code> outputs this:</p>
<blockquote>
<p>fatal: unable to read tree 41d648e8fd1281a8cdb1fcadb10daac5f7be2d39</p>
</blockquote>
<p>How can I restore the files of this branch? After going through different sites, I only realized that somehow I can restore them, through backups, etc., and I sort of found how to do it, maybe I did something wrong, but the methods I found did not help me. What surprised me was that of all the branches, only the branch was affected <code>currency-convertor</code>, although at the time of the disk failure, another branch was installed. Is it possible to recover at least some files?</p>
<p>Maybe it's important, the output of the command git fsck --full:</p>
<pre><code>Checking object directories: 100% (256/256), done.
Checking objects: 100% (173/173), done.
broken link from    tree 5f9cd50454c698571ef96c2f037773890bde4a23
              to    blob 5e76c750eeaeb2b07542d07dc3a925999e8aaa2f
broken link from    tree 5f9cd50454c698571ef96c2f037773890bde4a23
              to    blob 63a23f89e10d31c3a9ed9ca582e83a8a05204b96
broken link from    tree 5f9cd50454c698571ef96c2f037773890bde4a23
              to    tree 41d648e8fd1281a8cdb1fcadb10daac5f7be2d39
broken link from    tree 5f9cd50454c698571ef96c2f037773890bde4a23
              to    blob 217069b72a199c7be5b4fd8ae45e0b93a1f36b85
broken link from    tree 8f79d8e655ff8fd4e6b4516f6fefb4bc8ba02c3c
              to    blob e50ee4159db60c92f144c4b33f45bd1a57ebd6ff
broken link from    tree d1281c46e3f1d36eea7d8e5be3b4cdd2a120a2fd
              to    blob fcaca083555ace75f54451698da96f98688a4709
broken link from    tree d1281c46e3f1d36eea7d8e5be3b4cdd2a120a2fd
              to    blob 7d1296959b427b97cf52812566b74fd38da0e0ae
broken link from    tree f8b71bc6088fb8f8422a40a5b212b3cabd8ddb66
              to    blob e8567005d36f967f7d852313b82767c04ab155a8
broken link from    tree f8b71bc6088fb8f8422a40a5b212b3cabd8ddb66
              to    blob f20377b3d16a0e580834e0438954cf9bba291fdf
broken link from    tree f70049a236deb0e215d5483fe9df3a0cbba88ceb
              to    blob e7280e8dac5c31d348f093a33172b2282149b064
broken link from    tree f70049a236deb0e215d5483fe9df3a0cbba88ceb
              to    blob 04f62a6068ea0cf89229a0c7579df0f2c0aa7ed1
broken link from    tree b5d32fbe8e6c2832ddd37625370e221837a176c8
              to    blob 55aa349b8516fb9a5b4d71a1c34ca8c1b1715e34
broken link from    tree b5d32fbe8e6c2832ddd37625370e221837a176c8
              to    blob 536346328a8d35ab7b62cf4b43db3bb307064f24
broken link from    tree a1b26b4af971808beec0e8c2fb4797d7ef6cca42
              to    blob 1f48f7a7a8c10175c8b0d0814f091ce4247cfd24
broken link from    tree a1b26b4af971808beec0e8c2fb4797d7ef6cca42
              to    blob df85d005e45adba5d9802b42d38ae07c00cf931a
broken link from    tree 3bdebb7bf8c1edbe618d7cc4eec1af2a35e89c31
              to    blob a82bcd60f583bdd9165b048bfc91df1b6a60eb22
broken link from    tree 3bdebb7bf8c1edbe618d7cc4eec1af2a35e89c31
              to    blob c55ee0ed8d8bcc7ad581fdfeca14e1daa5a86f8a
missing blob 04f62a6068ea0cf89229a0c7579df0f2c0aa7ed1
missing blob 1f48f7a7a8c10175c8b0d0814f091ce4247cfd24
missing blob 217069b72a199c7be5b4fd8ae45e0b93a1f36b85
dangling commit 317044625dfc11b9757ca4807e228c09eb5eb6e8
missing tree 41d648e8fd1281a8cdb1fcadb10daac5f7be2d39
missing blob 55aa349b8516fb9a5b4d71a1c34ca8c1b1715e34
missing blob 5e76c750eeaeb2b07542d07dc3a925999e8aaa2f
missing blob 63a23f89e10d31c3a9ed9ca582e83a8a05204b96
dangling commit 6bb4969cfc01bd1741b86c6f45c310fe766879ad
missing blob 7d1296959b427b97cf52812566b74fd38da0e0ae
missing blob c55ee0ed8d8bcc7ad581fdfeca14e1daa5a86f8a
missing blob e50ee4159db60c92f144c4b33f45bd1a57ebd6ff
missing blob e7280e8dac5c31d348f093a33172b2282149b064
missing blob e8567005d36f967f7d852313b82767c04ab155a8
missing blob fcaca083555ace75f54451698da96f98688a4709
missing blob 536346328a8d35ab7b62cf4b43db3bb307064f24
dangling commit 6313128d5b4b49f0b2900ebbe21dc17eea708c25
missing blob a82bcd60f583bdd9165b048bfc91df1b6a60eb22
missing blob df85d005e45adba5d9802b42d38ae07c00cf931a
missing blob f20377b3d16a0e580834e0438954cf9bba291fdf
</code></pre>
","0","16556697","0","0"
"74214035","391161","2022-10-26 20:45:03","2","30","<git><git-checkout>","Is there a `git checkout <commit> -- .` variant that forces the working directory back to an old commit exactly, including removing new files?","<p>Consider the following series of commands:</p>
<pre><code>git init .
echo &quot;Hello world&quot; &gt; Foo.txt
git add Foo.txt
git commit -m 'First commit'
echo Goobye &gt; Bar.txt
git add Bar.txt
git commit -m 'Second commit'
git log
# Output:
commit 94fcd274a0d6c5c603e1a4eb3f7492989ccbca2a (HEAD -&gt; main)
Author: &lt;redacted&gt;
Date:   Wed Oct 26 13:39:23 2022 -0700

    Second commit

commit 6317cf761676ed46c3cb20eeeb5a8dbd4a7fdfda
Author: &lt;redacted&gt;
Date:   Wed Oct 26 13:39:00 2022 -0700

    First commit


git checkout 6317cf761676ed46c3cb20eeeb5a8dbd4a7fdfda -- .
git diff 6317cf761676ed46c3cb20eeeb5a8dbd4a7fdfda
</code></pre>
<p>The output of the final command:</p>
<pre><code>diff --git a/Bar.txt b/Bar.txt
new file mode 100644
index 0000000..b079804
--- /dev/null
+++ b/Bar.txt
@@ -0,0 +1 @@
+Goobye
</code></pre>
<p>The behavior I expected was that the output would be empty.</p>
<p>I expected the state of the working tree to be exactly equivalent to commit <code>6317cf761676ed46c3cb20eeeb5a8dbd4a7fdfda</code> after running <code>git checkout 6317cf761676ed46c3cb20eeeb5a8dbd4a7fdfda -- .</code>.</p>
<p>However, it seems like <code>git checkout &lt;sha&gt; -- .</code> does not remove newly added files.</p>
<p>Is there a variation of the <code>git checkout &lt;sha&gt; -- .</code> command that <em>does</em> cause the working tree to exactly match the state of the old commit, <strong>without</strong> actually moving the current branch?</p>
","3","391161","",""
"73807546","2630261","2022-09-21 22:28:15","2","1334","<git><azure-devops><azure-pipelines><git-checkout>","Azure DevOps throws error: pathspec 'master' did not match any file(s) known to git","<p>We have about 100 running azure-devop pipelines with all the same azure-pipeline.yaml. In all pipelines, we are calling <code>get checkout $(Build.SourceBranchName)</code>. In one of the repositories we get the error message:</p>
<pre><code>error: pathspec 'master' did not match any file(s) known to git
</code></pre>
<p>On our local machines checking out the master branch does not make any problems. When pushing to any other branch, it is not working as well. E.g. when using dev branch:</p>
<pre><code>error: pathspec 'dev' did not match any file(s) known to git
</code></pre>
<p>I can't see any differences. What I tried:</p>
<ul>
<li>Create everything from scratch</li>
<li>Check whether HEAD ref is equal to master (origin/master)</li>
<li>Creating new branches and push them (e.g. origin/dev) is not working as well</li>
<li>Switching branches does not help</li>
</ul>
<p>Any other ideas?</p>
","2","2630261","0","0"
"57029663","998117","2019-07-14 17:31:39","1","51","<git><merge><git-branch><git-merge><git-checkout>","How would I git merge two of the same projects that have an original ancestor but diverged?","<p>I have a project (effectively a folder with a bunch of files). </p>

<p>Say I have a main release that is now on version 5.2.</p>

<p>Back when it was on version 3.0, I duplicated the folder and began working on a separate set of features. Like a poor version of git branch.</p>

<p>Since then obviously the main version is on 5.2 and now I want to merge this branched off version back into the main version, effectively into a 6.0 version.</p>

<p>How would I best do this?</p>
","0","998117","",""
"57053433","5843514","2019-07-16 08:46:14","1","1024","<git><jenkins><jenkins-pipeline><git-checkout><jenkins-declarative-pipeline>","declarative pipeline function for git checkout","<p>I have a jenkinsfile that I try to execute using shared libraries.
my function (for now work as in line function) is: </p>

<pre><code>def gitCheckout(gitUrl, creadencialsId = """", branch, scm){
    script {
        echo ""inside""
        checkout (
            poll:false,
            scm: [
                $class: 'GitSCM', branches: [[name: ""${branch}""]], 
                extensions: scm.extensions,
                submoduleCfg: [],
                userRemoteConfigs: [[refspec: ""+refs/heads/${branch}:refs/remotes/origin/${branch}"", url: ""${gitUrl}"", credentialsId: ""${credentialsId}""]]
            ]
        )
    }
}
</code></pre>

<p>and I'm trying to pass inside the array of the scm.extensions so I can modify it before using it, for now what I'm trying is:</p>

<pre><code>stage('Get Sources') {
    steps {
        script {
            echo ""before extensions""
            scm.extensions = [[$class: 'CloneOption', noTags: true, reference: '', shallow: false], [$class: 'DisableRemotePoll']]
            echo ""before git checkout""
            gitCheckout(""${gitUrl}"", ""SSH-for-git"", ""${params.branch}"", scm)
        }
    }
}
</code></pre>

<p>but no luck!
I can't find anywhere the way to use correctly the scm object.
I tried things like</p>

<pre><code>scm.extensions.add([[$class: 'CloneOption', noTags: true, reference: '', shallow: false], [$class: 'DisableRemotePoll']])

scm.extensions += [[$class: 'CloneOption', noTags: true, reference: '', shallow: false]] + [[$class: 'DisableRemotePoll']]
</code></pre>

<p>etc. still no luck</p>
","0","5843514","0","0"
"57123031","1849331","2019-07-20 08:30:04","13","11617","<git><git-checkout>","git checkout <commit-hash> vs git checkout branch","<p>I was playing around with git and got confused here. </p>

<p>The <strong>HEAD</strong> of <code>develop</code> branch is at<br> <strong>235a6d8</strong> <br><br></p>

<p>When I do: </p>

<pre><code>git checkout 235a6d8
</code></pre>

<p>from any <strong>other branch</strong> or from <strong><code>develop</code> branch</strong>, this leaves me in detached head.<br>
I am not sure why does this happen when I am checking out to the latest commit on this branch.  </p>

<p>When I do:</p>

<pre><code>git checkout develop
</code></pre>

<p>I can switch to develop branch correctly.</p>

<p>I am not getting the difference between <strong><code>git checkout &lt;commit-has&gt;</code></strong> and <strong><code>git checkout branchname</code></strong>.<br>
How they are different ?</p>
","5","1849331","0","0"
"57265785","2881414","2019-07-30 06:46:30","748","240647","<git><git-checkout><git-switch>","What's the difference between git switch and git checkout <branch>","<p>Git 2.23 <a href=""https://github.com/git/git/blob/master/Documentation/RelNotes/2.23.0.txt"" rel=""noreferrer"">introduces</a> a new command <code>git switch</code> -- after reading the docs, it seems pretty much the same as <code>git checkout &lt;branchname&gt;</code> can someone explain the difference or use case?</p>

<blockquote>
  <p>Two new commands ""git switch"" and ""git restore"" are introduced to
     split ""checking out a branch to work on advancing its history"" and
     ""checking out paths out of the index and/or a tree-ish to work on
     advancing the current history"" out of the single ""git checkout""
     command.</p>
</blockquote>
","6","2881414","0","0"
"57274474","6730526","2019-07-30 14:49:58","3","254","<git><encoding><git-checkout><git-patch>","git checkout -p with specified encoding","<p>I'm working with the mixed encoding files in a repo. </p>

<p>My system $LANG is <strong>en_US.UTF8</strong>, file encoding is <strong>iso-8859-1</strong>. when I run <code>git checkout -p HEAD file</code> git uses <strong>UTF8</strong> to show me differences.</p>

<p>And I see something like this:</p>

<pre><code>-               ""�"" - EUR
-               ""�"" - GBP
-               ""�"" - JPY
+               ""�"" - EUR
+               ""�"" - GBP
+               ""�"" - JPY
Discard this hunk from index and worktree [y,n,q,a,d,/,j,J,g,e,?]?
</code></pre>

<p>The problem is, that ""�"" is not the correct content of a file.  When I run <code>iconv -f iso-8859-1 -t UTF8 file | less</code> 
I see </p>

<pre><code>""¤"" - EUR
""£"" - GBP
""¥"" - JPY
</code></pre>

<p>When I accept or discard a change when running <code>git checkout -p</code> I'd like to see exactly what characters changed instead of ""�"" character, which is uninformative. How can I do it?</p>
","3","6730526","0","0"
"74105931","12022535","2022-10-18 05:06:58","1","73","<git><git-merge><git-checkout>","Is there a difference between ""git merge"" and ""git checkout -b""?","<p><a href=""https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches"" rel=""nofollow noreferrer"">https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches</a></p>
<p>I would like to confirm that at the end of the &quot;Pushing&quot; section on the above page,</p>
<p>(1) Execute <code>git merge origin/serverfix</code> after fetch</p>
<p>(2) Run <code>git checkout -b serverfix origin/serverfix</code></p>
<p>Am I correct in understanding that operation (1) and (2) have the same effect after all?</p>
","0","12022535","",""
"74654682","3719845","2022-12-02 10:59:44","1","199","<git><git-checkout><git-log><git-show><git-switch>","git checkout commit with specific trailer","<p>I have an orphan branch (let's call it output) which contains the documents generated by templates stored on my main branch. I would like to checkout the commit on output that correspond to a specific commit on main.</p>
<p>I settled on using <code>git commit --trailer 'Source: xxxxx'</code> when committing on output where <code>xxxxx</code> is the corresponding commit on main.</p>
<p>Is it possible to checkout a commit on output knowing only the value of its trailer?</p>
","1","3719845","",""
"74706571","1281339","2022-12-06 17:14:13","1","29","<git><git-checkout><git-stage><git-index>","Weird behavior of git switch/checkout if index has same content as target commit","<p>Let's create a small local repository:</p>
<pre class=""lang-bash prettyprint-override""><code>git init
echo foo &gt; foo
git add foo
git commit -m foo
git branch bar
echo foo &gt;&gt; foo
git commit -a -m 'another foo'
</code></pre>
<p>If we do this now, we replace our file <code>foo</code> in our <em>index</em> as well as in our <em>working copy</em> with the one from the branch <code>bar</code>:</p>
<pre class=""lang-bash prettyprint-override""><code>git restore --source bar --staged --worktree foo
</code></pre>
<p>and now we switch to <code>bar</code>:</p>
<pre class=""lang-bash prettyprint-override""><code>git switch bar
</code></pre>
<h1>Expectation</h1>
<p>git should refuse the <code>switch</code> due to a dirty repository</p>
<h1>Actual behavior</h1>
<p>git does the switch and acts like nothing ever happened:</p>
<pre class=""lang-bash prettyprint-override""><code>git status
</code></pre>
<blockquote>
<pre><code>On branch bar
nothing to commit, working tree clean
</code></pre>
</blockquote>
<hr />
<p>Even weirder, if we instead just restore to the <em>index</em>:</p>
<pre class=""lang-bash prettyprint-override""><code>git restore --source bar --staged foo
</code></pre>
<p>and switch then:</p>
<pre class=""lang-bash prettyprint-override""><code>git switch bar
</code></pre>
<p>It will again just do it, but this time with uncommitted changes to <code>foo</code>?</p>
<pre class=""lang-bash prettyprint-override""><code>git status
</code></pre>
<blockquote>
<pre><code>On branch bar
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   foo
</code></pre>
</blockquote>
<h1>Questions</h1>
<ul>
<li>Why does git perform the switch?</li>
<li>Why doesn't it refuse to switch because of a dirty repository?</li>
<li>What is happening behind the scenes?</li>
<li>Where is this behavior documented?</li>
</ul>
<p>FYI, the same happens with <code>git checkout</code>.</p>
<hr />
<p>All I could find in the <a href=""https://git-scm.com/docs/git-switch"" rel=""nofollow noreferrer"">documentation</a> is this sentence:</p>
<blockquote>
<p>The operation is aborted however if the operation leads to loss of local changes, [...]</p>
</blockquote>
<p>But that doesn't really explain it, since if I do this instead of the <code>restore</code> above:</p>
<pre class=""lang-bash prettyprint-override""><code>echo foo &gt;&gt; foo
git add foo
git switch bar
</code></pre>
<blockquote>
<pre><code>error: Your local changes to the following files would be overwritten by checkout:
        foo
Please commit your changes or stash them before you switch branches.
Aborting
</code></pre>
</blockquote>
<p>git <strong>won't</strong> do the switch because of a dirty repository (as expected), even though it theoretically <strong>could</strong> without losing local changes by only updating the <em>index</em> and not the <em>working directory</em>, as it seemingly does when the <em>index</em> already has the desired content for the switch.</p>
<p>Why is there an exception when the index has the same content as the target branch?</p>
","2","1281339","",""
"74751990","19226184","2022-12-10 10:09:33","1","286","<git><gitlab><git-bash><git-checkout><git-revert>","Git lab showing ""There are no commits yet"" after my git reset?","<p>I have three branches in my GitLab</p>
<ol>
<li>Main</li>
<li>ppp7</li>
<li>ppp7-master</li>
</ol>
<blockquote>
<p>ppp7---&gt; ppp7-master---&gt; main</p>
</blockquote>
<p>every day I'm pushing my new code into ppp7 branch.if code is running fine in ppp7 branch, i create new merge request to ppp7-master branch.until here all three branches are have same code only. whats happen yesterday i pushed a wrong code into ppp7 branch.after i merge that ppp7 code into other two branches.but that code failing on all environment. so here i reset ppp7 branch code to previous commit using below comments.</p>
<pre><code>$ git reset --hard 725bb8011bbb2535053feffd441f01d3059fea56
HEAD is now at 725bb80 Update emp.sql
$ git add .

</code></pre>
<pre><code>$ git commit -m &quot;where condition removed&quot;
On branch ppp7
Your branch is behind 'origin/ppp7' by 1 commit, and can be fast-forwarded.
  (use &quot;git pull&quot; to update your local branch)

nothing to commit, working tree clean

$ git push -f origin ppp7
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
remote:
remote: To create a merge request for ppp7, visit:
</code></pre>
<pre><code> + 2cb0310...725bb80 ppp7 -&gt; ppp7 (forced update)


</code></pre>
<p>now my ppp7 branch have working code, other two branches have wrong code. so i'm creating new merge request to ppp7-master. but I'm cant merge gitlab showing &quot;There are no commits yet.&quot;
<a href=""https://i.stack.imgur.com/add0r.png"" rel=""nofollow noreferrer"">There are no commits yet</a>
why I'm cant merge both branches have different code.also when i compare both branches its showing  &quot;Showing with 0 additions and 0 deletions&quot;. how its possible both branches have different code.</p>
<ol>
<li><a href=""https://i.stack.imgur.com/HRqT3.png"" rel=""nofollow noreferrer"">when comparing ppp7 branch with
ppp7-master</a></li>
<li><a href=""https://i.stack.imgur.com/gArs1.png"" rel=""nofollow noreferrer"">when i comparing ppp7-master with
ppp7</a></li>
</ol>
<p>I'm needed to merge new reset code into ppp7-master and why this error showing.</p>
","1","19226184","",""
"74848311","1379799","2022-12-19 09:09:29","1","134","<git><git-merge><git-checkout>","git merge reverted but the changes needed","<p>I have a feature branch, let's call it A, and a main line, let's call it B, where we deliver. The problem is the following:</p>
<ol>
<li>Branch A was many commits ahead of branch B, nothing extraordinary so far. So I did a merge from branch A to B.</li>
<li>Then I noticed, this is not what I wanted as I suspect the automatic merges were not alright.</li>
<li>I did a revert for the merge, which was ok, the changes merged disappeared.</li>
<li>I only want to have the code state of branch A in branch B; consequently, I removed the directories and files locally in branch B and wanted to do the merge from branch A again, which does not work anymore as git perceives that the merge has already been done. My second idea is to check out branch A in branch B but I don't know how as normal checkouts from the remote repository will go into the corresponding branches: A in A and B in B.</li>
</ol>
<p>Any idea how I could check out branch A in branch B? Remark: there are no changes in the main line since starting this feature branch A, so what I need is A in branch B. Thanks for any solutions in advance.</p>
<p>Would <code>git fetch &lt;remote&gt; &lt;remoteBranch&gt;:&lt;localBranch&gt;</code> do this?</p>
<pre><code>git fetch origin A:B
git push origin B
</code></pre>
<p><strong>Solution:</strong>
See the answer from VonC and also my questions about the index. Thanks for all responses.</p>
<pre><code>cd /path/to/repo
git switch B
git restore -s A -SW -- .
git commit -m &quot;override B with A content&quot;
</code></pre>
","0","1379799","",""
"75150145","4523359","2023-01-17 17:31:51","-3","326","<git><git-checkout><backslash><invalid-characters><git-history>","Remove all files from Git repo history with path having escape \ in filename with git filter-repo","<p>I have special filenames with escape \ characters stored in Git repository on Debian 10 Linux.</p>
<p>Problem: it is not possible to git checkout files on Windows, which have incompatible characters in the filename.</p>
<p><strong>Example:</strong></p>
<pre><code>git log --all --name-only -m --pretty= '*\\*'
&quot;systemd/system/default.target.wants/snap-git\\x2dfilter\\x2drepo-7.mount&quot;
&quot;systemd/system/multi-user.target.wants/snap-git\\x2dfilter\\x2drepo-7.mount&quot;
&quot;systemd/system/snap-git\\x2dfilter\\x2drepo-7.mount&quot;
</code></pre>
<p>I get following Git errors at Windows checkout:</p>
<pre><code>C:\Git\bin\git.exe reset --hard &quot;5ef1cac3a03304c35b455edf32bd1bb78060c5b9&quot; --
error: invalid path 'systemd/system/default.target.wants/snap-git\x2dfilter\x2drepo-7.mount'
fatal: Could not reset index file to revision '5ef1cac3a03304c35b455edf32bd1bb78060c5b9'.
Done
</code></pre>
<p><strong>Problem reproducing steps:</strong></p>
<pre><code># Clone repository, to be executed on a safe repo:
git clone --no-local /source/repo/path/ /target/path/to/repo/clone/
# Cloning into '/target/path/to/repo/clone'...
# remote: Enumerating objects: 9534, done.
# remote: Counting objects: 100% (9534/9534), done.
# remote: Compressing objects: 100% (4776/4776), done.
# remote: Total 9534 (delta 4215), reused 8043 (delta 3136), pack-reused 0
# Receiving objects: 100% (9534/9534), 7.41 MiB | 16.78 MiB/s, done.
# Resolving deltas: 100% (4215/4215), done.

cd /target/path/to/repo/clone/

# List the files with escape \ from repo history into a list file:
git log --all --name-only -m --pretty= '*\\*' | sort -u &gt;/opt/git_repo_files_w_escape.txt

# Remove the files with escape \ from repo history:
git filter-repo --invert-paths --paths-from-file /opt/git_repo_files_w_escape.txt
Parsed 592 commits
New history written in 0.25 seconds; now repacking/cleaning...
Repacking your repo and cleaning out old unneeded objects
HEAD is now at 71128f3 .gitignore: ADD snap-git to be ignored
Enumerating objects: 9354, done.
Counting objects: 100% (9354/9354), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3694/3694), done.
Writing objects: 100% (9354/9354), done.
Total 9354 (delta 4085), reused 9354 (delta 4085), pack-reused 0
Completely finished after 0.55 seconds.


# List files with escape \ to check result:
git log --format=&quot;reference&quot; --name-status --diff-filter=A '*\\*'
# &quot;systemd/system/default.target.wants/snap-git\\x2dfilter\\x2drepo-7.mount&quot;
# &quot;systemd/system/multi-user.target.wants/snap-git\\x2dfilter\\x2drepo-7.mount&quot;
# &quot;systemd/system/snap-git\\x2dfilter\\x2drepo-7.mount&quot;

#  Unfortunately it seems filter-repo was executed, but log still lists filenames with escape \ :-( 
</code></pre>
<p><strong>Question:</strong></p>
<p><strong>1) How to remove all files from Git repo history with path having at least one escape \ character in filename?</strong></p>
<p>(reason: it is not possible to checkout those files on Windows, which have incompatible characters in the filename)</p>
<p><strong>UPDATE1:</strong></p>
<p>Tried to replace <code>\\x2d</code> string to - in input file list as suggested, but git history remove was still unsuccessful:</p>
<pre><code># List the files with escape \ from repo history into a list file:
git log --all --name-only -m --pretty= '*\\*' | sort -u &gt;/opt/git_repo_files_w_escape.txt

# Replace \\x2d string to - in git_repo_files_w_escape.txt:
sed -i 's/\\\\x2d/-/g' /opt/git_repo_files_w_escape.txt

# Remove the listed files from repo history:
git filter-repo --invert-paths --paths-from-file /opt/git_repo_files_w_escape.txt
Parsed 592 commits
New history written in 0.25 seconds; now repacking/cleaning...
Repacking your repo and cleaning out old unneeded objects
HEAD is now at 71128f3 .gitignore: ADD snap-git to be ignored
Enumerating objects: 9354, done.
Counting objects: 100% (9354/9354), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3694/3694), done.
Writing objects: 100% (9354/9354), done.
Total 9354 (delta 4085), reused 9354 (delta 4085), pack-reused 0
Completely finished after 0.55 seconds.


# List files with escape \ to check result:
git log --format=&quot;reference&quot; --name-status --diff-filter=A '*\\*'
# &quot;systemd/system/default.target.wants/snap-git\\x2dfilter\\x2drepo-7.mount&quot;
# &quot;systemd/system/multi-user.target.wants/snap-git\\x2dfilter\\x2drepo-7.mount&quot;
# &quot;systemd/system/snap-git\\x2dfilter\\x2drepo-7.mount&quot;

#  Unfortunately log still lists filenames with \\x2d :-(
</code></pre>
<p><strong>UPDATE2:</strong></p>
<p>Tried to replace <code>\\x2d</code> in git_repo_files_w_escape.txt to <code>\\\\x2d</code> or <code>\x2d</code> but none of them resulted to remove the files having <code>\\x2d</code> in filename from Git history.</p>
<p><strong>UPDATE3:</strong></p>
<p><strong>I'm looking for a working solution based on git filter-repo.</strong></p>
<p>Any more idea?</p>
","20","4523359","",""
"75235378","17263281","2023-01-25 14:22:53","1","54","<git><github-actions><git-submodules><git-checkout>","Why do I get ""fatal: No url found for submodule path 'TestLibrary1' in .gitmodules"" for a submodule that no longer exists?","<h1>Problem</h1>
<p>When I try to checkout my repository using GitHub Actions I get the following error:</p>
<pre><code>fatal: No url found for submodule path 'TestLibrary1' in .gitmodules
</code></pre>
<h1>What I Tried</h1>
<p>I tried removing the submodule.</p>
<p>As far as I can tell it is completely gone (it is gone from the folder &amp; from <code>.gitmodules</code>)</p>
<p>However, I keep getting the above error.</p>
<h1>Question</h1>
<p>Why is this still happening when the submodule no longer exists?</p>
<p>Is there somewhere that it is holding onto a reference that I can check?</p>
","0","17263281","",""
"75389927","19275689","2023-02-08 18:00:18","0","35","<git><git-checkout>","How to revert commits in local git?","<p>I entered git checkout ( git number ) and I was thrown to this commit but deleted all the commits made above. Is there a way to return the files</p>
<p>Suggest solutions to the problem</p>
","4","19275689","",""
"75658767","21347161","2023-03-07 06:50:29","-1","46","<git><terminal><git-checkout>","removing untracked change from git","<p>I would appreciate if you help me in this problem I have with git. I am new with working with that. I need to remove untracked change from git. I have already tried &quot;git checkout .&quot; and &quot; git restore .&quot;, but those are not working always. Is there any more reliable way? Any help is appreciated.</p>
<p>This is the untracked file I need to be removed from git:</p>
<pre><code>Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        secret1.txt

 test-repo % git restore .
 test-repo % git status
HEAD detached from V2
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        secret1.txt

 test-repo % git checkout .
Updated 0 paths from the index
 test-repo % git status
HEAD detached from V2
Untracked files:
   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        secret1.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>As you can see secret1.txt is still there!</p>
","1","21347161","",""
"75746967","18188098","2023-03-15 15:40:41","1","93","<git><git-checkout><sparse-checkout>","git sparse checkout unable to switch branches","<p>I have a two branches main and feature branch. In both the branches there are two folders f1 and f2. There is a file inside f1 folder called file1.txt.</p>
<pre><code>main branch structure

-root
 - f1
  - file1.txt
 - f2

feature branch structure 

-root
 - f1
  - file1.txt
 - f2

</code></pre>
<p>I want to clone f1 folder and its content using sparse checkout and after that I want to switch branches. How can i do that?</p>
<p>What I have tried:</p>
<pre><code>git clone &lt;link to repo&gt; --depth 1 --filter=blob:none --sparse
cd &lt;folder name&gt;
git sparse-checkout set f1/
git fetch --all
git branch -a
git checkout feature
</code></pre>
<p>doing this i get this error &quot;error: pathspec 'feature' did not match any file(s) known to git&quot;</p>
<p>can someone guide me here?</p>
","0","18188098","",""
"44163307","378418","2017-05-24 15:58:06","24","3938","<git><branch><git-branch><git-checkout>","Why does `git checkout <branch> <file>` stage the change?","<p>If I start from a clean working tree and run <code>git checkout &lt;branch&gt; &lt;file&gt;</code>, where <code>&lt;branch&gt;</code> has a different version of this file, I end up with a staged rather than an unstaged change.</p>

<p>What's the reason for this? Is this just for consistency with other commands like <code>git mv</code>, which you would expect to stage changes? Is it for convenience when using <code>git checkout</code> to resolve merge conflicts? Or is there some other rationale?</p>

<p>It seems mildly odd to me since just using <code>git checkout &lt;branch&gt; &lt;file&gt;</code> does not offer any indication of whether I plan to commit the change.</p>
","2","378418","0","0"
"7393274","359862","2011-09-12 20:00:18","93","48829","<git><branch><git-checkout>","Is it possible to view multiple git branches at the same time for the same project?","<p>I have 2 branches, which are not ready to be merged yet, but have some complementary logic, which I'd like to review (before merging)</p>

<p>Can I check out multiple git branches of the same project? Is it possible?</p>
","2","359862","0","0"
"8291833","289715","2011-11-28 05:25:12","1","721","<git><git-branch><git-checkout><git-status>","What is the use of ""git checkout -f"" when ""git status"" shows tracked file changes on all branch","<p>I have a tracked file (an old versioned file) that i modified on master branch.
The staus on master branch shows this file as modified but
The status on the topic branch also shows this file as modified.</p>

<p>Earlier there was an error ""error: You have local changes to ""X""; cannot switch branches"" when i checkout to the other branch without doing a stash or without using ""-f"" in git-checkout.</p>

<p>i have checked ""stackoverflow.com/questions/1304626/git-switch-branch-and-ignore-any-changes-without-committing"" but that error doesnt occur and am able to checkout even when i have local changes.</p>

<p>Is there any kind of config that is causing this confusion?</p>
","0","289715","",""
"8315710","879664","2011-11-29 18:23:00","1","120","<git><version-control><git-branch><git-checkout>","Confusion over branch creation in git","<p>After making a few changes to branch <code>master</code> I decided to work from a new branch. I did <code>git checkout -b new_branch_name</code> and a new branch was created and checked out. <code>git status</code> showed the changes I had made to <code>master</code>. </p>

<p>I was curious if my changes were now on both branches (<code>master</code> and <code>new_branch_name</code>) or just <code>new_branch_name</code>. So I checked out <code>master</code> and noticed my changes were there as well. So I reverted those changes with <code>git checkout -- fileThatChanged</code>. The changes were indeed gone from <code>master</code>.</p>

<p>Unfortunately checking out <code>new_branch_name</code> and running <code>git status</code> showed my changes were reverted from that branch as well.</p>

<p>I'd like to understand what happened and how can I avoid this in the future.</p>

<p>One solution is to just create/checkout a new branch before starting work.</p>
","1","879664","",""
"8375359","885386","2011-12-04 12:44:02","1","500","<git><svn><git-svn><git-checkout><svn-checkout>","How to download the project using the git-svn-id?","<p>The question might seem too simple or might be irrelevant here. But i need some help immediately.</p>

<p>I got the git-sv-id of the library required in this link
<a href=""http://code.google.com/p/vncj/updates/list"" rel=""nofollow"">http://code.google.com/p/vncj/updates/list</a></p>

<p>I do not know how to download such files. When i tried the svn checkout option in an empty folder it did not work</p>

<p>I need the files of that project. Anyone with some basic info kindly help.</p>
","0","885386","",""
"8421415","244005","2011-12-07 19:37:15","21","9446","<git><git-checkout>","git: replace folder with the same folder on a different branch","<p>I tried</p>

<pre><code>git checkout OTHER_BRANCH -- /path/to/folder
</code></pre>

<p>the problem is with files that exist on current branch, but do not exist on the other branch.
I want to delete these.</p>
","1","244005","0","0"
"26214691","2089518","2014-10-06 10:52:34","9","7152","<git-checkout><git>","Does git checkout update all files?","<p>Newb question, I want to make sure I understand this.</p>

<p>When I <code>git checkout &lt;revision&gt;</code>, does this return the <em>entire project</em> to its state at that moment, or does it only recreate the files changed in <em>that particular</em> revision?</p>

<p>For example: If my folder was completely empty besides the .git repo, and I <code>git checkout master</code>, will the resulting files be the project in its entirety, or only the files changed in the most recent commit?</p>

<p>I ask, because I am checking out my project at various points (starting from the beginning), and instead of the project slowly growing in size as one would expect, the size of each checkout is varying quite a lot.</p>
","0","2089518","",""
"26855990","3080003","2014-11-11 01:24:40","9","15257","<git><git-checkout>","Is there a way to do ""git checkout"" and *force* the argument to be interpreted as a branch name?","<p>You type the command ""git checkout foo"".</p>

<p>If there is a branch called ""foo"" yet no file by that name, it switches to the branch -- and if there is a file by that name and no such branch, it updates the file ""foo"".</p>

<p>But I wonder --- is there a way to enter the command so that Git will unconditionally interpret ""foo"" as the name of a branch no matter what? This includes (but is <em>not</em> limited to) the specification that if there is no branch called ""foo"", the operation will fail even if a file by that name exists.</p>

<p>So - is there any way to do this?</p>

<p>Thanks.</p>
","1","3080003","0","0"
"63468054","14125148","2020-08-18 11:53:23","0","2055","<git><jenkins><jenkins-pipeline><git-checkout>","What is the difference between the following git checkout behaviours in a jenkins pipeline?","<p>I'm on a new project in my organisation. In two different jenkins pipeline I have the following checkout behaviours and I want to understand the difference between the two and when to use which one.
The first one is :</p>
<pre><code>                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[credentialsId: GIT_CRED_ID, url: REPO_URL]]
                ])
</code></pre>
<p>GIT_CRED_ID and REPO_URL are defined variables in the pipeline environment.</p>
<p>The second one is:</p>
<pre><code>checkout([$class: 'GitSCM', branches: [[name: '*/develop']], doGenerateSubmoduleConfigurations: false,
extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'xxx-key', url: 'https://github.com/xxx']]])
</code></pre>
<p>Apart from the branch they are checking out I do not understand when to use which one.</p>
","0","14125148","",""
"9529686","693642","2012-03-02 07:43:04","2","238","<git><commit><git-checkout>","Clarifications when using git to go back a few commits","<p>Can anyone clarify some things things for me. If I go back a previous commit using</p>

<pre><code>git checkout HASH
</code></pre>

<ol>
<li>Running <code>git branch</code> shows <code>(no branch)</code>. What does this mean?</li>
<li>If I edit a file then commit. Will it create a new branch or will it simply update the entire branch so when I go back to the current commit the file will also be updated?</li>
<li>Related to #2, is the purpose of checking out a previous commit so you can make a branch out of it or something more? I'm guessing something more but I can't see it since my project isn't all that complex.</li>
</ol>
","0","693642","",""
"45144641","4591336","2017-07-17 12:43:06","4","1252","<git><visual-studio-code><git-checkout><code-editor>","Can I undo (cmd-Z) a git checkout file in VSCode?","<p>in Sublime Text, if the file was open in editor, I could Cmd-Z to a before-checkout file state after an accidental <code>git checkout [file]</code>.
Visual Studio Code, however, seems to hard-reset the changes without any way to get back. Is that so?</p>
","4","4591336","0","0"
"45155236","8322147","2017-07-17 23:40:09","1","345","<git><git-checkout>","git- Checkout multiple file from different commits","<p>Let's say I have <code>fileA.py</code> and <code>fileB.py</code>, and I want to restore both of these file to a previous version using <code>git checkout &lt;commit&gt; &lt;filename&gt;</code>.</p>

<p>The issue I have is the versions I want to restore were committed in two different commits. Is there a way to restore both files using one command, or do I have to do each one on its own.</p>
","4","8322147","0","0"
"45170268","884502","2017-07-18 14:53:15","0","686","<git><githooks><git-checkout><pre-commit-hook><pre-commit>","(How) can I run git checkout from within the pre-commit hook?","<p>There is a file that should be in our git repository so that it is in any checkout.
It <em>may</em> be changed by users, but <em>usually</em> the changes should not be checked back in.
Neither --assume_unchanged nor --skip_work_tree provide the required flexibility, and the file is too cumbersome to reasonably be 'modified' with smudge/clean filters.</p>

<p>So I've written a pre-commit hook that successfully asks the user if they're sure they want to commit the changes to this file. If they say yes, the file is checked in (hook returns 0, commit continues), if not, the commit is aborted.</p>

<p>Instead of aborting, I'd like to give the user the option to revert changes to the file and continue with the commit.</p>

<p>To revert the file to an unchanged state, I'm using <code>git checkout -- file/in/question</code>.</p>

<p>Given that the file is modified and staged for commit, I run the following pre-commit hook:</p>

<pre><code>#!/bin/bash
echo ""git checkout -- file/in/question""
git checkout -- file/in/question
echo ""git status""
git status
exit 1 #would be 0 if the hook worked as expected
</code></pre>

<p>And I get the following output:</p>

<pre><code>git checkout -- file/in/question
git status
On branch blah
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   file/in/question
</code></pre>

<p>Why does git status report that the git checkout has had no effect? (it's correct - returning 0 from the hook causes the file to be incorrectly committed)</p>
","6","884502","",""
"45190298","3805929","2017-07-19 12:15:54","2","1462","<git><android-studio><github><version-control><git-checkout>","How to checkout git branch with local 'assume-unchanged' files?","<p>I've checked out from a remote branch and modified some of the files. However I do not wish to add them in the next commit since they are applicable only to my local configuration; in fact, I always want them to be uncommitted. For that reason, I've applied <code>git update-index --assume-unchanged</code> on these files. However, now I have problems with checking out from branches where these files differ from my local ones:
<a href=""https://i.stack.imgur.com/WcHPP.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WcHPP.jpg"" alt=""enter image description here"" /></a></p>
<p>If I click on 'Smart Checkout' (which is what I need), it throws an error:</p>
<blockquote>
<p>Couldn't checkout origin/master: Your local changes to the following files would be overwritten by checkout:</p>
</blockquote>
<p>Even if I click on &quot;Force Checkout&quot; it will throw:</p>
<blockquote>
<p>Couldn't checkout origin/master: Entry '.gitignore' not uptodate. Cannot merge.</p>
</blockquote>
<p>So how can I check out from other branches, while keeping local changes?</p>
","4","3805929","",""
"9591407","170521","2012-03-06 20:33:42","642","285821","<git><git-checkout>","Unstage a deleted file in git","<p>Usually, to discard changes to a file you would do:</p>

<pre><code>git checkout -- &lt;file&gt;
</code></pre>

<p>What if the change I want to discard is deleting the file? The above line would give an error:</p>

<pre><code>error: pathspec '&lt;file&gt;' did not match any file(s) known to git.
</code></pre>

<p>What command will restore that single file without undoing other changes?</p>

<p><strong>bonus point:</strong> Also, what if the change I want to discard is <em>adding</em> a file? I would like to know how to unstage that change as well.</p>
","3","170521","0","0"
"45256029","1014320","2017-07-22 15:09:01","2","1757","<git><git-branch><git-clone><git-checkout><git-worktree>","git: copy a worktree of a remote branch that is not present at local","<p>At work, I have a project that it has two different version with some common basic features. I make use of <code>git worktree</code> to put these versions in separate folders that I have two long-running branches beside <code>master</code> for each version and the <code>master</code> is for common features. So there are 3 folders with one repository. Also, there is a remote repository for this and the whole things are pushed there.</p>

<pre><code>$git branch -a
*master
 version-1
 version-2
 remote/origin/master
 remote/origin/version-1
 remote/origin/version-2
</code></pre>

<p>At home PC, I have the folder of <code>master</code> and this local repository is linked to the same remote as my work repo. And when I get the list of branches it is like:</p>

<pre><code>$git branch -a
*master
 remote/origin/master
 remote/origin/version-1
 remote/origin/version-2
</code></pre>

<p>I want to <code>checkout</code> to the <code>version-1</code> as well as copy the whole stuff of version-a to a local folder, that the folder is tracked by git as a <code>worktree</code> like at my work.
does <code>git clone</code> or <code>git checkout</code> do that or I need to do something more tricky?</p>
","6","1014320","",""
"63571253","8320076","2020-08-25 02:34:05","1","31","<git><git-checkout>","why can see right files after git checkout -b $local_branch based on git checkout remotes/origin/remote_branch","<p>What I did is</p>
<ol>
<li><p><code>git fetch</code> to get all remote branch meta data,</p>
</li>
<li><p><code>git checkout remotes/origin/$remote_branch</code></p>
</li>
<li><p><code>git checkout -b $local_branch</code></p>
</li>
</ol>
<p>When I brow files in Intellij, all files on remote branch show correctly.<br />
Which did the magic to pull the remote files?</p>
","1","8320076","0","0"
"27785304","802268","2015-01-05 18:08:33","0","51","<git><version-control><git-checkout>","get all historical versions of a file in a git repo","<p>I'd like to retrieve all the historical versions of a file in a git repo, and save them into multiple files. I am thinking of making a script to checkout all the commit tags one by one and save the target file, but is there any easier way to do this? Thanks!</p>
","0","802268","0","0"
"45673218","6342729","2017-08-14 11:11:58","1","251","<git><git-branch><gitignore><git-checkout>","After git checkout node_modules are saved in other branch","<p>I have added new folder where are node_modules and they are ignored, like this:</p>

<pre><code>folder
 -node_modules
folder1
 -node_modules
 -app
</code></pre>

<p>folder1 and folder are in second branch, and in master branch is just folder.</p>

<p>After I switch from second branch to master node modules are saved and I get like this in master:</p>

<pre><code>folder
 -node_modules
folder1
 -node_modules
</code></pre>

<p>How to prevent this behaviour?</p>
","6","6342729","",""
"63753680","4632019","2020-09-05 12:02:51","2","108","<git><git-checkout><git-worktree>","May I force git to change directory instead of fatal error while checking out branch from different worktree?","<p>I have few work trees:</p>
<pre><code>$ git worktree list
/home/kes/work/projects/video/app     7509c7f [dev]
/home/kes/work/projects/video/second  c12cdf9 [newbr]
</code></pre>
<p>I want to be switched to different directory, when I do <code>git checkout newbr</code> from <code>dev</code> branch (worktree), instead of get error:</p>
<pre><code>$ git checkout newbr
fatal: 'newbr' is already checked out at '/home/kes/work/projects/video/second'
</code></pre>
<p>Currently I do:</p>
<pre><code>cd /home/kes/work/projects/video/second
</code></pre>
<p>Is there an option to do this automatically?</p>
","0","4632019","",""
"63800244","1363576","2020-09-08 19:15:49","0","876","<git><macos><git-merge><git-commit><git-checkout>","Can't switch git branch after committing changes","<p>I am working on an Xcode project in macOS. The project is also under git version control. I have a branch in git that I created off of my local master branch. I have done some substantial work in it and have committed the changes. Issuing a <code>git status</code> command reports:</p>
<pre><code>nothing to commit, working tree clean
</code></pre>
<p>I want to switch to the master branch and merge the changes from this branch into it. When I go to switch to the master branch I get a response like the following:</p>
<pre><code>error: Your local changes to the following files would be overwritten by checkout:
    &lt;List of files&gt;
Please commit your changes or stash them before you switch branches.
Aborting
</code></pre>
<p>I am puzzled about why it says the files have changed. If I try to do a diff on one of the files, nothing happens; no output Is generated. In a certain sense, git seems to be treating at least some of these files as if they were new files even though they are not. I’ve tried adding the supposedly changed files to a git commit and git status still says</p>
<pre><code>working tree clean
</code></pre>
<p>If I try to commit, git says</p>
<pre><code>nothing to commit, working tree clean
</code></pre>
<p>If I try to do a git stash, it says</p>
<pre><code>No local changes to save
</code></pre>
<p>What can be be done to fix this problem and allow me to merge the changes from this branch into the master branch?</p>
","3","1363576","",""
"45900249","71376","2017-08-26 22:43:32","10","3437","<git><git-commit><git-checkout>","Why are folders left in my local git working directory after commit and checkout","<p>I have created a folder containing files in my local working git structure. I created a new branch with git checkout -b and used git add . and git commit -m ""..."" to add those files to my local branch. But, when I do git checkout master the folder I created and committed is still there. Why? I thought git commit would put the folder and its contents into my local branch, switching it out when I checkout master.</p>
","3","71376","0","0"
"64485139","963156","2020-10-22 15:06:57","1","31","<git><github><git-checkout>","5 PRs I want to test locally, confused about git commands","<p>3 months ago, 5 PRs were merged into our repository.</p>
<p>One of these PRs is causing an issue.</p>
<p>I wish to roll back to when each PR was merged, test locally, and isolate the issue down to the one problematic PR. I do not want to commit anything to master.</p>
<p>So my plan to go to each PR, find the final commits SHA and run :</p>
<pre><code>git checkout &lt;SHA&gt; #checks out/downloads all work up to commit id, discards any commits made after this date locally
git checkout -b bugIsolation
</code></pre>
<p>Will this work as I hope/is there a cleaner or better way to do this?</p>
","4","963156","",""
"47204309","5612562","2017-11-09 14:25:33","10","6384","<git><git-bash><git-checkout>","What does ""git checkout -"" do?","<p>I saw a weird type of git checkout command.</p>

<pre><code>git checkout -
</code></pre>

<p>What does <code>-</code> do here?</p>
","0","5612562","0","0"
"29007821","1983854","2015-03-12 10:54:10","173","226811","<git><git-checkout>","git checkout all the files","<p><strong>How can I get rid of all the changes in all the files of my repository?</strong></p>

<p>Say I am in a branch and I did some changes. <code>git status</code> returns a set of files in the ""Changes not staged for commit"" and I notice I would like to get rid of all of these changes in all the files. How can I do this with a single command?</p>

<p>I know I can do the following to checkout just one file:</p>

<pre><code>git checkout -- &lt;file&gt;
</code></pre>

<p>I noticed that <code>git checkout --</code> alone returns the list of all uncommited files. However, I cannot find a way to checkout all of them, something like <code>git checkout --all</code>.</p>

<p>I checked <code>man git checkout</code> and could not find anything. Also I saw <a href=""https://stackoverflow.com/q/20008025/1983854"">Git: Checkout all files except one</a> and tried <code>git checkout .</code> and did not work either.</p>

<p>Would I have to do it programmatically, by looping through the <code>git checkout --</code> output?</p>
","0","1983854","0","0"
"11125127","352808","2012-06-20 17:40:44","1","133","<git><git-checkout>","git checkout <branchname> systematicaly modify files","<p>This is driving me crazy and I can't find why it's doing this...</p>

<pre><code>git clone git@github.com:/my/working/repo.git
--I don't do anything in the working copy--
git status
--no modification/no file to be commited--
git checkout another_branch
--I don't do anything in the working copy--
git status
modified: /some/file/that/I/touched.php
modified: /some/file/that/I/touched2.php
modified: /some/file/that/I/touched3.php
</code></pre>

<p>And when I do a git diff it shows only some line ending modifications.
I see you coming... You're gonna tell me that I have to set autocrlf to false... Already tried that, and changes nothing...</p>

<p>If anyone has an idea on how to fix this i'd be more than pleased...</p>

<p>Thank you.</p>
","4","352808","0","0"
"47630950","3702377","2017-12-04 10:11:49","386","780089","<git><version-control><git-checkout>","How can I switch to another branch in git?","<p>Which one of these lines is correct?</p>
<pre><code>git checkout 'another_branch'
</code></pre>
<p>or</p>
<pre><code>git checkout origin 'another_branch'
</code></pre>
<p>or</p>
<pre><code>git checkout origin/'another_branch'
</code></pre>
<p>And what is the difference between them?</p>
","2","3702377","0","0"
"26694894","846563","2014-11-02 00:51:21","0","378","<git><sha><git-checkout>","List of SHAs that are possible for checkout in git","<p>I would like a complete list of SHAs that are available/possible to pass to the checkout operation</p>

<pre><code>git checkout &lt;sha-parameter-here&gt;
</code></pre>

<p>similar to what I am getting from</p>

<pre><code>git log --pretty=oneline
</code></pre>

<p>but a <strong>complete</strong> listing.</p>

<p>Here is a simple run through:</p>

<ul>
<li><p>checkout earlier version in master branch using</p>

<p>git checkout ""sha-parameter-from-log""</p></li>
<li><p>make modifications and commit</p>

<p>git commit -a -m 'something'</p></li>
<li><p>at this point the log is ""truncated"" but contains most SHA of most recent commit.</p>

<p>git log --pretty=oneline</p></li>
<li><p>when back to master, the SHA is not listed anymore</p>

<p>git checkout master</p>

<p>git log --pretty=oneline</p></li>
<li><p>HOWEVER, if i remember the SHA from the commit I can STILL perform</p>

<p>git checkout ""sha-not-in-log""</p></li>
</ul>

<p>Thanks for any help.</p>
","4","846563","",""
"26788179","795398","2014-11-06 19:50:45","2","3202","<git><git-checkout><git-stash>","Using git stash, checkout previous commit, and going back","<p>I wanted to go back to a commit to see how things were at that moment, so I did</p>

<pre><code>git stash
</code></pre>

<p>... to save my changes then I used</p>

<pre><code>git checkout &lt;hash&gt;
</code></pre>

<p>When done with my exploration, I just wanted to go back where I was and I used</p>

<pre><code>git stash apply
</code></pre>

<p>Now files are messed up and I can't see further commits when using <code>git log</code></p>

<p>What's going on? How do I get back to where I was?</p>

<p><strong>EDIT</strong></p>

<p>Tried to do a <code>git checkout master</code> but had some conflicts (a <code>README.md</code>, marking ""deleted by US"")</p>

<p>So I added it, stashed my changes, used <code>git checkout master</code> and then applied the stash.</p>

<p>Fixed the <code>README.md</code> conflict and everythings's fine.</p>

<p>GIT hurts my brain.</p>
","3","795398","",""
"573585","61728","2009-02-21 19:13:43","57","35235","<git><svn><git-svn><git-checkout><svn-update>","What's the git equivalent of ""svn update -r""?","<p>I'm a recent git convert. It's great to be able to use git-svn to keep my branches locally without disturbing the svn server. There was a bug that existed in the latest version of the code. I wanted to establish a time when it worked so that I could use git bisect. I couldn't find the right command to move back in time. Thanks.</p>
","0","61728","0","0"
"57879408","261647","2019-09-10 23:45:19","1","766","<git><git-checkout>","Impossible to checkout a git commit","<p>I'm trying to checkout a specific commit that I see on GitHub:</p>

<p><a href=""https://github.com/mapbox/node-sqlite3/commit/b8907e79fc3fb52803b5a05c106948911dcd77ac"" rel=""nofollow noreferrer"">https://github.com/mapbox/node-sqlite3/commit/b8907e79fc3fb52803b5a05c106948911dcd77ac</a></p>

<p>However, a local checkout fails:</p>

<pre><code>$ git checkout b8907e79fc3fb52803b5a05c106948911dcd77ac
fatal: reference is not a tree: b8907e79fc3fb52803b5a05c106948911dcd77ac
</code></pre>

<p>A <code>git reset</code> failed with the same error.</p>

<p>Any ideas?</p>
","0","261647","0","0"
"19980631","2298986","2013-11-14 14:44:54","80","42502","<git><git-branch><git-checkout>","What is `git checkout --orphan` used for?","<p>I've just discovered <code>git checkout --orphan</code>, but I don't know how to use it. Its help page says it creates a <strong>new unparented branch</strong>. </p>

<p>In the <code>master</code> branch, I've tried <code>git checkout --orphan br</code>, only to see the files in the working directory change to &ldquo;Changes to be committed&rdquo;, and the <code>git log</code> saying <code>fatal: bad default revision 'HEAD'</code>.</p>

<p>So what's the advantage of using  <code>git checkout --orphan</code>?</p>
","0","2298986","0","0"
"20268844","417629","2013-11-28 14:39:29","0","84","<wordpress><git><git-submodules><git-checkout><git-reset>","How do I git out of this mess with a git submodule?","<p>I've got a git repo with Wordpress as a submodule. I was trying to update Wordpress and really screwed things up. I just want to get all of the code from the 3.7.1 tag in the remote repository, but this doesn't work;</p>

<pre><code>git fetch --tags
git checkout 3.7.1
</code></pre>

<p>Leaves a bunch of either ""untracked files"" or ""uncommitted changes"". I don't know what I'm doing wrong. I've tried so many things to get this submodule onto the 3.7.1 tag and nothing seems to work. If anything, I feel like I'm just making the problem worse. It shouldn't be that hard to just reset the code from the tag I want and discard everything else. Any help?</p>
","0","417629","",""
"1291459","54964","2009-08-18 02:16:52","33","47561","<git><git-merge><git-checkout>","To git checkout without overwriting data","<p><strong>How can you <code>git-checkout</code> without overwriting the data?</strong></p>
<p>I run</p>
<pre><code>git checkout master
</code></pre>
<p>I get</p>
<pre><code>error: Entry 'forms/answer.php' would be overwritten by merge. Cannot merge.
</code></pre>
<p>This is surprising, since I did not know that Git merges when I <code>git-checkout</code>.
I have always run after the command separately <code>git merge new-feature</code>.
This seems to be apparently unnecessary if Git merges at checkout.</p>
","0","54964","0","0"
"20535194","2012282","2013-12-12 04:42:17","0","2635","<git><git-commit><git-checkout>","Commit then checkout another branch in git carries old commit?","<p>If I am on branch <code>b-one</code> and I run <code>git commit -m ""init commit""</code> and then <code>git checkout -b b-two</code>, does the commit carry to the new branch? More generally, are commits branch specific? Or when you commit, are you just committing on your local machine and can access that commit from any branch?</p>
","1","2012282","",""
"39650678","3225105","2016-09-23 00:11:31","35","63909","<github><bitbucket><git-checkout>","git checkout error: cannot create directory: Permission denied","<p>I am facing issues with the git checkout command. Please help.</p>

<p>Here is what I did.</p>

<ol>
<li>Created a local directory. Created some files. Initiated a git repo locally.</li>
<li>Created a repo in bitbucket &amp; pushed my local repo to bitbucket</li>
<li>Created a new branch locally, b01</li>
<li>Added new files to b01, committed them and successfully pushed the branch to bitbucket</li>
<li>Now I am trying to merge b01 with master and that is where I am facing issues. I am not able to checkout master.</li>
</ol>

<p>Lists of commands used and the error details:</p>

<pre><code>git clone [my repo]
git checkout -b b01
</code></pre>

<p>Hereafter I made multiple changes, including creating new files and directories, committed those changes and successfully pushed the changes on that branch to the repo. like:</p>

<pre><code>git push -u origin b01
</code></pre>

<p>Now I am done with the changes and want to merge it to the master branch. So I do a:</p>

<pre><code>git checkout master
</code></pre>

<p>Here is the error it throws:</p>

<pre><code>fatal: cannot create directory at 'workfolder': Permission denied
</code></pre>

<p>Git keeps me in b01, but <em>deletes ALL the files I had created in the branch.</em> 
So if I now do a </p>

<pre><code>git status
</code></pre>

<p>it shows me: </p>

<pre><code>On branch b01
Your branch is upto date with 'orgin/b01'
Changes not staged for commit:
(use ""git add/rm .....)
  deleted: new file1
  deleted: new file2
&lt;list of the new files I had added but which got deleted as a result of the command&gt;
</code></pre>

<p>I am having to run a </p>

<pre><code>git checkout -- . 
</code></pre>

<p>to restore the files.</p>

<p>Please help. </p>
","3","3225105","0","0"
"20953286","709496","2014-01-06 15:30:07","2","418","<git><git-checkout>","What is git sparse checkout and what are situations where it is useful?","<p>I am quite advanced Git user, but just now I have discovered this ""sparse checkout"" possibility. I noticed various questions/answers here on SO that it is something that people coming from SVN missed in GIT, but I do not understand what is so useful about this. Can some explain in what situations this can be useful?</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/2336580/sparse-checkout-in-git-1-7-0"">Sparse checkout in Git 1.7.0?</a></li>
<li><a href=""https://stackoverflow.com/questions/600079/is-there-any-way-to-clone-a-git-repositorys-sub-directory-only/13738951#13738951"">How do I clone a subdirectory only of a Git repository?</a></li>
<li><a href=""http://schacon.github.io/git/git-read-tree.html#_sparse_checkout"" rel=""nofollow noreferrer"">http://schacon.github.io/git/git-read-tree.html#_sparse_checkout</a></li>
</ul>
","0","709496","",""
"21048897","948542","2014-01-10 16:04:45","1","807","<git><git-stash><git-checkout>","git - stash and add don't see any changes but checkout does and fails","<p>I have a very weird case for y'all.</p>

<p>git can't add my changes, complaining that no changes exist. But a checkout fails since git does see local changes that would be overwritten.</p>

<pre><code>modify tracked file foo.sh in topic branch

$git add -p foo.sh
No changes.

$git checkout master
error: Your local changes to the following files would be overwritten by checkout:
        foo.sh
Please, commit your changes or stash them before you can switch branches.
Aborting

$git stash
No local changes to save
</code></pre>

<p>(file and branch names changed for clarity)</p>

<p>I don't have any gitignore files. My repository resides on a network mounted volume. Could this be an issue?</p>
","4","948542","",""
"2311958","200266","2010-02-22 15:38:14","5","9693","<git><git-checkout>","Is there a git uncheckout?","<p>With <code>git clone</code> there is the option <code>-n</code> wich prevents a checkout of <code>HEAD</code> after the repository is cloned. Is there a possibility to do this manually?</p>

<p><strong>Edit</strong> I think the option <code>-n</code> reads better in the manual than it actually is: After cloning with <code>-n</code> all my tools show that I still reside on the master branch; the only difference being that all files are shown as deleted. It’s not really the same situation that I would call ‘not checked out’.</p>

<p>So maybe I should just delete <code>HEAD</code>?</p>
","3","200266","0","0"
"2541545","9951","2010-03-29 21:55:02","47","19709","<git><git-checkout><git-reset>","Is there a difference between ""git reset --hard hash"" and ""git checkout hash""?","<p>While <code>reset</code> and <code>checkout</code> have different usages most of the time, I can't see what difference there is between these two.</p>

<p>There probably is one or nobody would have bothered adding a <code>--hard</code> option to do something the basic <code>checkout</code> can do.</p>

<p>Maybe there is a difference is the way you will see the history?</p>
","5","9951","0","0"
"39438168","4710968","2016-09-11 16:19:41","41","25849","<git><repository><git-branch><git-merge><git-checkout>","git checkout --ours does not remove files from unmerged files list","<p>Hi I need to merge two branches like this.</p>

<p>This is just an example what is happening, I work with hundreds of files which need resolution.</p>

<pre><code>git merge branch1
...conflicts...
git status
....
# Unmerged paths:
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both added:   file1
#   both added:   file2
#   both added:   file3
#   both added:   file4
git checkout --ours file1
git chechout --theirs file2
git checkout --ours file3
git chechout --theirs file4
git commit -a -m ""this should work""
U   file1
fatal: 'commit' is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm &lt;file&gt;' as
appropriate to mark resolution and make a commit, or use 'git commit -a'.
</code></pre>

<p>When I do <code>git merge tool</code>, there is the correct content just from the 'ours' branch and when I save it, the file disappears from the unmerged list. But since I have hundreds of files like this, this is not an option.</p>

<p>I thought that this approach will bring me where I want to be - easily say which file from which branch I want to keep.</p>

<p>But I guess I misunderstood the concept of the <code>git checkout --ours/theirs</code> commands after a merge.</p>

<p>Could you please provide me some info, how to handle this situation? I use <code>git 1.7.1</code></p>
","0","4710968","0","0"
"58463630","5634165","2019-10-19 12:21:43","0","2232","<git><git-checkout>","What does this Command do "" git checkout -- . ""","<p>I am beginner wit using git and I wanna know What this git command means </p>

<pre><code>git checkout -- .
</code></pre>

<p>I know that git checkout  is for switching between branches but I don't know whta the above options means I tried to look on toturials but I didn't options like this one</p>
","8","5634165","",""
"1753467","204564","2009-11-18 03:34:48","1","1513","<git><branch><git-checkout><subtree>","git checkout remote branch shows extraneous files?","<p>master branch has these files and folders (simplified):</p>

<pre><code>C:\Local\TickZoom\Project&gt;ls
file.txt         name.txt      public
</code></pre>

<p>public branch is tracking a vendor repository and has been subtree
merged as public folder in master branch above. public has three
folders only (simplified):</p>

<pre><code>C:\Local\TickZoom\Project&gt;ls
platform  providers  www
</code></pre>

<p>When switching from public to master it behaves correctly.</p>

<p>However, when switching from master to public, an odd thing happens.
It has all the files and folders of both combined:</p>

<pre><code>C:\Local\TickZoom\Project&gt;git checkout public

C:\Local\TickZoom\Project&gt;ls
file.txt  name.txt   public
platform  providers  www
</code></pre>

<p>However, checking git status says nothing has changed.</p>

<p>I discovered that 'git reset --hard' fixes public back.</p>

<p>CLUE: It seems that this only happens after making a new commit
to master.  Does git do some kind of automatic merge?</p>

<p>After 'git reset --hard', the checkout to master and back
to public work fine, even if repeatedly.</p>

<p>The first, I thought it was fixed but it occurred again the
next time I made a change. Let me try that one more time
now to make sure...</p>

<p>Now, I can't reproduce it. But it did happen twice.</p>

<p>One other CLUE is that the first time I did a git reset --hard
it complained about files being locked by processes.</p>

<p>After the offending programs were closed, the git reset --hard
succeeded and then the checkout worked between the two branches.</p>

<p>So does the checkout get confused by files being locked and
""silently"" fail? It would be better, it that's the problem to 
fail the same way git reset --hard does than just reporting
success and having a jumbled workspace.</p>

<p>Any other wisdom or options to set on git checkout to avoid this
will be appreciated.</p>

<p>Wayne</p>
","1","204564","0","0"
"39860169","719427","2016-10-04 19:21:30","2","2435","<git><git-checkout>","How to git checkout -b from two weeks ago or from an specific date?","<p>I am trying to checkout and old version of my code from the <code>master</code> branch and I am doing as follow:</p>

<pre><code>git checkout -b master_de1974 `git rev-list -n 1 --before=""5 days ago"" master`
</code></pre>

<p>Is that the right command? How I can be sure if I am getting the old code instead the new one?</p>
","3","719427","",""
"39932217","2039094","2016-10-08 12:14:11","0","36","<git><bitbucket><git-checkout>","After git add directory is empty","<p>I am very new to git, I am using Ubuntu terminal to perform git actions.
After creating a git repository I executed the below commands</p>

<pre><code>mkdir project

cd project

git init
</code></pre>

<p>then I copied all the files to project directory and executed </p>

<pre><code>git add -A 
git commit 
git push origin master
</code></pre>

<p>Everything looks fine but it deleted all the files from my project directory.!! But all the files are safe in the server under master tag!!</p>

<p>Then I tried <code>git pull origin master</code> it says </p>

<pre><code> * branch            master     -&gt; FETCH_HEAD
Already up-to-date.
</code></pre>

<p>Whats wrong with my steps? How can I pull the files?</p>
","3","2039094","",""
"20913023","1792701","2014-01-03 21:30:38","3","67","<git><merge><git-checkout>","git: after merge conflicts, checkout for resetting files, but now merge doesn't reapply","<p>At some branch X I did </p>

<pre><code>git merge master
</code></pre>

<p>But there was some conflicts. I did a mistake during resolving the conflicts, (basically doing <code>git add</code> when I should have done <code>git rm</code> to confirm some local deletes)</p>

<p>To cancel those errors, I did</p>

<pre><code>git checkout -- folder/
</code></pre>

<p>which removed everything from cache. But now I did attempted again the merge and I get this:</p>

<blockquote>
  <p>fatal: You have not concluded your merge (MERGE_HEAD exists). Please,
  commit your changes before you can merge.</p>
</blockquote>

<p>What should I do to avoid this message?</p>
","0","1792701","",""
"21054148","2449192","2014-01-10 20:48:38","25","13685","<git><git-checkout>","Why does git checkout with explicit refs/heads/branch give detached HEAD?","<p>If I checkout a branch using just the branch name, <code>HEAD</code> is updated to point at that branch.</p>

<pre><code>$ git checkout branch
Switched to branch 'branch'
</code></pre>

<p>If I checkout a branch by using <code>refs/heads/branch</code> or <code>heads/branch</code>, <code>HEAD</code> becomes detached.</p>

<pre><code>$ git checkout refs/heads/branch
Note: checking out 'refs/heads/branch'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

$ git checkout ""refs/heads/branch""
Same result

$ git checkout heads/branch
Same result
</code></pre>

<p>Why? If its version dependent, I have git 1.7.9.5 on Ubuntu 12.04.3.</p>
","0","2449192","0","0"
"21141056","2799974","2014-01-15 15:11:09","0","94","<git><git-merge><git-checkout>","Is there a form to do checkout of a specific folder from other branch to my branch by git?","<p>I'm working with git and each developer has yours branches with new features separately, so I want just merge a piece of code (folder) to my branch.</p>
","2","2799974","",""
"40155270","2965109","2016-10-20 13:03:42","2","69","<git><restore><git-checkout>","git-only command to restore a directory to a commit state","<p>I would like to restore a whole directory (recursively) from the history of my git repository (exactly like <a href=""https://stackoverflow.com/q/9670745/2965109"">this question</a>).</p>

<p>I know that the right git command is:</p>

<pre><code>git checkout [tree-ish] -- path/to/the/folder
</code></pre>

<p>But I have a problem: to restore an existing directory to the state of a commit, the content of the directory should be deleted first. In other case, existing files that didn't exist in the old commit won't be removed.
So, to obtain exactly what I want I have to do the following command:</p>

<pre><code>rm -Rf path/to/the/folder
git checkout [tree-ish] -- path/to/the/folder/
</code></pre>

<p>(See <a href=""https://stackoverflow.com/a/9671161/2965109"">this answer</a> and comments).</p>

<p>I'd like to know if there is a <strong>git-only command</strong> to achieve the same behaviour of the two commands above, in order to avoid making a <code>rm</code> manually.</p>

<p>EDIT:
I do not want to remove untracked files or clean after the checkout, I do not have them. I want to restore a folder exactly like it was some commit ago, removing added files, restoring removed files and so on.</p>
","8","2965109","",""
"58998582","8135687","2019-11-22 16:53:55","1","131","<git><github><git-branch><git-checkout>","Why does github compare my branch with the default branch instead of the source branch from which it was created?","<p>I am trying to create a new <code>test</code> branch from the <code>kinetic-devel</code> branch of the <a href=""https://github.com/rickstaa/panda_moveit_config"" rel=""nofollow noreferrer"">the following repository</a>. I do this by using the following git command:</p>

<pre><code>git checkout -b test kinetic-devel
</code></pre>

<p>When checking out the new branch on GitHub.com I expected the GitHub interface to show a comparison of the newly created <code>test</code> branch with the <code>kinetic-devel</code> source branch:</p>

<p><a href=""https://i.stack.imgur.com/Rr7z0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Rr7z0.png"" alt=""right_comparison""></a></p>

<p>Instead, GitHub shows me a comparison with the default <code>melodic-devel</code> branch instead of the <code>kinetic-devel</code> source branch from which it was created:</p>

<p><a href=""https://i.stack.imgur.com/0FiKz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0FiKz.png"" alt=""wrong_comparison""></a></p>

<p>Judging from the git log the <code>test</code> branch is indeed a child of the <code>kinetic-devel</code> branch and not the<code>melodic-devel</code> branch. </p>

<h2>Question</h2>

<p>Is this only an interface related problem or am I doing something wrong while creating the new branch?</p>
","0","8135687","0","0"
"2466735","90801","2010-03-17 23:52:14","586","727774","<git><file><git-checkout><sparse-checkout>","How to sparsely checkout only one single file from a git repository?","<p>How do I checkout just one file from a git repo?</p>
","9","90801","0","0"
"40424928","3150057","2016-11-04 14:16:35","18","2911","<git><branch><git-checkout><git-stash><git-reflog>","Is there a way to output the previous git branch name?","<p>This answer tells how to checkout to the previous branch, and helpfully explains <code>@{-1}</code>: <a href=""https://stackoverflow.com/a/7207542/3150057"">https://stackoverflow.com/a/7207542/3150057</a></p>

<p>The previous branch is important if I stashed some code before changing branch, and am now thinking about working on the stash.</p>

<p>Is there a way to quickly see the name of the previous branch without searching <code>git reflog show</code> for the latest <code>checkout: moving from foo to bar</code> entry?</p>

<hr>

<p>More info:</p>

<p>This is a solution to my forgetfulness of my previous working context, which usually happens after coming back from lunch.</p>

<p><code>git rev-parse @{-1}</code> shows the HEAD commit of the branch that would be checked-out by <code>git checkout -</code> but not the branch name.</p>

<p><code>git branch --contains @{-1}</code> will list every branch with that commit.</p>

<p>Listing the branch(es) with that commit as HEAD would be helpful, as it could help remind me of my previous working context, but I'm not sure how to do that.</p>
","0","3150057","0","0"
"826865","55223","2009-05-05 20:52:48","32","10032","<git><svn><git-svn><git-checkout><svn-checkout>","Convert an SVN checkout to use git (git-svn)","<p>I work with software that is kept in svn for version control. I would like to use git (git-svn) however the software requires lots of setup and configuration before it can be used. There are tools that take care of all of the setup, including checking out all the code via svn.</p>

<p>All the documentation for git-svn (I've been able to find) requires a fresh checkout, using git-svn. </p>

<p>Is there a way to convert an existing svn checkout so it can use git-svn?</p>
","0","55223","0","0"
"12256137","1575059","2012-09-04 02:43:30","89","155399","<git><github><git-checkout>","Cloning an older version of github repo","<p>I have an Amazon EC2 machine. I would like to clone an older version of github repo on this machine. Normally I use git clone <a href=""https://linktomyrepo.git"">https://linktomyrepo.git</a> How can I clone an older version, say an update from 14 days ago? I can see the exact version I need in the commit history of repository, but do not know how to clone it onto the EC2 machine. Do I need to use the little SHA code next to each commit?</p>
","0","1575059","0","0"
"58016352","5175709","2019-09-19 17:39:39","1","36","<git><git-checkout>","Why does git indicate that files are modified after checkout?","<p>In terminal I just did: </p>

<pre><code>git checkout -b feature123
</code></pre>

<p>Then I see </p>

<pre><code>M   Classes/API/APIClient/APIClient.swift
M   Classes/Data/Data.swift
M   Classes/Views/StackProvider.swift
M   Tests/ViewModelTests.swift
Switched to a new branch 'feature123'
</code></pre>

<p>Yet when I do: </p>

<pre><code>git status
</code></pre>

<p>I get: </p>

<pre><code>On branch feature123
nothing to commit, working tree clean
</code></pre>

<p>Is that expected? </p>

<p>I didn't change anything so the <code>git status</code> is understandable, but I can't understand the <code>M</code> for those files. </p>

<p>This has happened a few times...</p>

<p><strong>EDIT:</strong></p>

<p>This is how my bash_profile looks like:</p>

<pre><code>[ -f /usr/local/etc/bash_completion ] &amp;&amp; . /usr/local/etc/bash_completion
alias xi='cd ~/Documents/xi’
alias xdd='rm -rf ~/Library/Developer/Xcode/DerivedData'
alias xpush='pod repo push ios-pod-spec mypod.podspec --private --allow-warnings --verbose'
# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/honey/google-cloud-sdk/path.bash.inc' ]; then . '/Users/honey/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/honey/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/honey/google-cloud-sdk/completion.bash.inc'; fi
~                                                                                                                                                                                          
~                                                                                                                                                                                          
~                                                                                                                                                                                          
~                                                                                                                                                                                          
~                                                                                                                                                                                          
~                                                                                                                                                     
</code></pre>
","4","5175709","0","0"
"30531079","1350476","2015-05-29 13:36:56","0","45","<git><git-commit><git-checkout><git-reset>","Undo all files within a folder in git","<p>I searched and found many link which talks about un-doing your uncommited changes with respect to specific file:</p>

<ol>
<li>git reset </li>
<li>git reset --hard </li>
<li>git checkout -- file</li>
<li>git checkout branchname^ filename</li>
</ol>

<p><strong>but I want to undo changes for all the files I have modifies under a specific folder.</strong> </p>

<p>assume I have a folder like this <code>clients/libs/slickgrid</code> &amp; <code>slickgrid</code> internally contains multiple folder which contains multiple files. </p>

<p>I want to undo all modified files under slickgrid folder. What options I have over here?</p>
","0","1350476","",""
"30537734","4305712","2015-05-29 19:35:48","0","6573","<git><github><git-branch><git-clone><git-checkout>","Get changes from one branch into another one in git and how can I work on my own branch","<p>I'm a little lost with git, It's the first I use git with other people.</p>

<p>What I want to do is bring the changes that were made in a branch to the branch in which I am working, let's say that when I execute <code>git branch --all</code> what I see is this:</p>

<pre><code>  master
* c
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/a
  remotes/origin/master
  remotes/origin/c
</code></pre>

<p>So, I'm working on the branch c, and I have a friend who made ​​some changes in the branch a, how can I bring his changes to my branch?</p>

<p>The other thing I do not quite understand is how I can work on my own branch, let's suppose I fixed something in the file blah.html.erb, and I want to do a commit and upload it to my own branch, would it be ok to do the following?</p>

<pre><code>git remote add blah.html.erb origin/c
git commit -m ""Some changes""
git push origin origin/c
</code></pre>

<p>Greetings.</p>
","1","4305712","",""
"20344749","2856998","2013-12-03 06:56:18","5","2678","<git><version-control><version><git-checkout><merge-conflict-resolution>","How can keep master files after merge conflict in git","<p>I fall in to this situation many times</p>

<pre><code>1. I work on master branch and make some commits
2. Then i use git pull
3. Then i get auto merge fail , conflicting changes
</code></pre>

<p>Now suppose there were 5 files which were conflicting.  I want to know</p>

<pre><code>1. How can i overwrite those conflicting files with my files on my commit
2. How can i overwrite those with chnages from master
</code></pre>

<p>after i do git pull</p>
","0","2856998","0","0"
"58281140","3545094","2019-10-08 06:29:22","0","38","<git><git-checkout>","Rationale behind behavior of `git checkout HEAD`","<p>When doing <code>git checkout HEAD</code> i checkout the commit my <code>HEAD</code> points to. I use it to trigger some hooks after doing a <code>git reset --hard origin/master</code> for example.</p>

<p>What's the rationale behind not ending up on a detached <code>HEAD</code> after doing it though? In the case above, I am still on whatever branch i had checked out before the reset. I don't have a problem with this, but to me the semantics don't feel aligned with other operations. I would expect to end up on the very same commit, but with a detached <code>HEAD</code> (this could also be useful, perhaps it's possible somehow).</p>
","1","3545094","",""
"20353729","1160070","2013-12-03 14:24:13","58","37891","<git><tags><teamcity><git-checkout>","How can I build a git tag in TeamCity?","<p>I want to provide a git tag to the TeamCity server to build it.
I pass the tag (i.e. <code>release_1.1</code>) as a parameter to the job. So inside the job the tag is available as <code>%tag%</code>,  but under the <code>Version Control Settings</code> I don't see any way to use this parameter so the server can checkout this tag.
Is there any way this parameter can be used in the settings to checkout the tag?</p>
","1","1160070","0","0"
"30580930","1337336","2015-06-01 18:46:50","0","77","<git><git-checkout>","How to checkout a single file from a local git repository?","<p>I have a local git repository, and I need to do the equivalent of a TFS 'Undo Pending Changes'. There is no remote repository. There are no branches, just Master. I have tried nearly every suggestion from questions ""<a href=""https://stackoverflow.com/questions/2466735/how-to-checkout-only-one-file-from-git-repository"">How to checkout only one file from git repository</a>"" and ""<a href=""https://stackoverflow.com/questions/692246/undo-working-copy-modifications-of-one-file-in-git"">Undo working copy modifications of one file in Git</a>"". When I do '$ git checkout HEAD -- error.cshtml', I always get ""error: pathspec 'error.cshtml' did not match any file(s) known to git."" How can I get the latest committed version of a single file from the repository?</p>
","4","1337336","",""
"20397024","245549","2013-12-05 10:08:35","5","2242","<git><git-checkout><git-add>","Are ""git add file"" and ""git checkout -- file"" symmetric?","<p>I have the following understanding of the <code>git add file</code> and <code>git checkout -- file</code> (but I am not sure if it is correct).</p>

<p>Whenever we edit files with a text editor, we do it in the working directory. Each time we can move file to the so called <code>staging area</code> by executing <code>git add file_name</code>. If we edit the file again (after <code>git add</code>) we change the file in the working directory and in this way, in the working directory we have the file in a ""new"" state while in the <code>staging area</code> the file is in the ""old"" state.</p>

<p>When we use <code>git add</code> again, we bring the file in the staging area to the ""new"" state (the state from the working directory).</p>

<p>If we do <code>git checkout -- file_name</code>, I assume that we take a file from the staging area and use it to overwrite the file in the working directory. In this way we can bring the file in the working directory to the ""old"" state. Is it correct?</p>

<p>What is also not clear to me, is if we copy or move the file from the staging area. In other words, does <code>git checkout -- file</code> change the state of the file in the <code>staging area</code>. Can we say that after <code>git checkout -- file</code> the file in the staging area change the state of the file to its previous state in the staging area? </p>
","0","245549","0","0"
"1391732","167646","2009-09-08 02:49:06","10","11939","<git><push><git-checkout><cherry-pick>","git says everything-up-to-date when pushing changes to a remote branch","<p>i have commits that are in a remote repository (origin/master) which i want to put in a branch created from that repository (origin/remote_branch).</p>

<p>when i checkout to that remote branch</p>

<pre><code>git checkout -b mybranch origin/remote_branch
</code></pre>

<p>then cherry-picked the commits that i made</p>

<pre><code>git cherry-pick 9df63616b0428cf6edc4261adb533a1ac516b9a0
</code></pre>

<p>git says everything-up-to-date when i try to push.</p>

<pre><code>git push
</code></pre>

<p>is there anything i'm doing wrong?</p>
","0","167646","0","0"
"66423662","8303650","2021-03-01 14:12:13","0","91","<git><shell><variables><sh><git-checkout>","git checkout with a variable that has multiple files in it","<p>I have a use-case for checking out multiple files whos name are in a variable. The piece of code that i written is:</p>
<pre><code>b=&quot;file1 file2&quot;
git checkout origin/branch1 $b
</code></pre>
<p>While executing this code i am getting error as :</p>
<pre><code>error: pathspec 'file1 file2' did not match any file(s) known to git
</code></pre>
<p>if i give the file name directly like <code>git checkout origin/branch1 file1 file2</code> its working fine also, if  their is only one file name in the variable its also working fine.</p>
<p>i use shell for writing the code</p>
<p>Kindly please suggest me a way to pass multiple file names that are in a variable for checking out file.</p>
","15","8303650","0","0"
"47896598","8548036","2017-12-19 23:17:58","0","325","<git><git-checkout>","Why git checkout filename changes its extension?","<p>The git command <code>git checkout *filename*</code> does not reset file changes.<br>
Moreover, it changes its extension.  </p>

<p>Detailed description:<br>
This is public project repository and those pictures in the folder aren't mine.<br>
I have cloned the project a month ago and haven't touched it.<br>
Today I have pulled repository. After <code>git pull</code> I get this strange behaviour:  <a href=""https://i.stack.imgur.com/DF41q.jpg"" rel=""nofollow noreferrer"">terminal screenshot</a><br>
As you can see i can't reset file changes and the extension switches from <code>PNG</code> to <code>png</code> (and vice versa).<br>
Is anybody here who can explain me what is going on with my files and git?  </p>
","2","8548036","",""
"1153774","","2009-07-20 14:04:50","0","2513","<git><capistrano><git-checkout>","Capistrano and git checkout","<p>I am getting the following error when I do a cap deploy, which checks out of a git master repository:</p>

<p>Could anyone please help me?</p>

<p>Thanks in advance</p>

<pre><code>/var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/servers.rb:78:in `role_list_from': unknown role `app' (ArgumentError)
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/servers.rb:75:in `map'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/servers.rb:75:in `role_list_from'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/servers.rb:47:in `find_servers'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/servers.rb:10:in `find_servers_for_task'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/connections.rb:133:in `execute_on_servers'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/actions/invocation.rb:170:in `run_tree'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/actions/invocation.rb:143:in `run'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/actions/invocation.rb:208:in `sudo'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/actions/invocation.rb:89:in `send'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/actions/invocation.rb:89:in `invoke_command'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/recipes/deploy.rb:123:in `try_sudo'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/recipes/deploy.rb:136:in `try_runner'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/namespaces.rb:186:in `send'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/namespaces.rb:186:in `method_missing'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/recipes/deploy.rb:302:in `load'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/execution.rb:139:in `instance_eval'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/execution.rb:139:in `invoke_task_directly_without_callbacks'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/callbacks.rb:27:in `invoke_task_directly'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/execution.rb:89:in `execute_task'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/namespaces.rb:186:in `send'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/namespaces.rb:186:in `method_missing'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/namespaces.rb:104:in `restart'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/recipes/deploy.rb:154:in `load'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/execution.rb:139:in `instance_eval'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/execution.rb:139:in `invoke_task_directly_without_callbacks'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/callbacks.rb:27:in `invoke_task_directly'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/execution.rb:89:in `execute_task'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/configuration/execution.rb:101:in `find_and_execute_task'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/cli/execute.rb:45:in `execute_requested_actions_without_help'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/cli/execute.rb:44:in `each'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/cli/execute.rb:44:in `execute_requested_actions_without_help'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/cli/help.rb:19:in `execute_requested_actions'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/cli/execute.rb:33:in `execute!'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/lib/capistrano/cli/execute.rb:14:in `execute'
    from /var/lib/gems/1.8/gems/capistrano-2.5.8/bin/cap:4
    from /usr/bin/cap:19:in `load'
    from /usr/bin/cap:19
</code></pre>

<p>Deploy.rb file contents:</p>

<pre><code>set :deploy_to, ""/home/edward/captest2""

set :application, ""captest2""

role :web, ""localhost""

default_run_options[:pty] = true

set :repository,  ""edward.m@deditest1.example.net:/usr/home/git""

set :scm, ""git""

set :scm_passphrase, Proc.new { Capistrano::CLI.password_prompt(""GIT Password for #{scm_user}:"") }  #This is your custom users password

set :user, ""edward""

set :branch, ""master""

ssh_options[:forward_agent] = true
</code></pre>
","2","","",""
"18659425","229686","2013-09-06 13:48:44","35","22591","<git><branch><git-branch><git-checkout>","Get git current branch/tag name","<p>How can I get the current branch or tag name for my working copy?  I have seen references that indicate <code>rev-parse --abbrev-ref HEAD</code> will give branch name, but this doesn't work if the checkout is of a tag, in which case it just returns 'HEAD'. I need to somehow get the tag name of these revisions.</p>

<p>To be clear, I want one of two possible names:</p>

<ol>
<li>If the current checkout is the HEAD of a branch, I want the branch name</li>
<li>If it is a detached HEAD, I want the tag name (on the assumption there is a tag)</li>
</ol>
","3","229686","0","0"
"35139991","1086540","2016-02-01 20:46:42","2","1749","<git><git-stash><git-checkout>","git checkout fails due to local changes but stash applies cleanly afterwards","<p>It happens often that I try to checkout a new remote branch (to create a local branch out of it, but this might be irrelevant to my issue) and git fails with the following error</p>

<blockquote>
  <p>error: Your local changes to the following files would be overwritten by checkout:<br>
  Please, commit your changes or stash them before you can switch branches.</p>
</blockquote>

<p>Now, when I see this, one could naively expect that if one stashes the changes, checkout the new branch and then apply the stashed changes then there would be a conflict, but that is almost never the case. What happens is that the stashed changes apply cleanly and I don't lose anything from what I had before I checked out the new branch. Why is git giving this seemingly misleading error? <strong>if I can stash before checking out and apply the stash at the end cleanly, why isn't <code>git checkout</code> doing just that under the hood?</strong></p>

<p>Edit:<br>
To make it clearer, I am not asking why the checkout fails, or why sometimes a checkout with a dirty workspace succeeds, I understand all that. My questions is that in this case there is a course of action that is 100% data-loss free (or is there some corner case where data could be lost that I fail to see??) so why doesn't git just do it? </p>

<p>If I said to someone new to git that a modif on file <code>foo</code> line 100 would conflict with another modif on file <code>foo</code> line 2 it would kind of make sense to them an accept it as truth, not complain and would easily fix the conflict. But because git is a nice tool, it does the smart thing and doesn't even bother you with a non-issue that it can fix without any risks of corruption. Why is that not the same philosophy in this scenario with <code>git checkout</code>? </p>
","9","1086540","0","0"
"1475037","126855","2009-09-25 01:42:06","9","22221","<git><switch-statement><branch><git-checkout>","Switching branches in git","<p>Sometimes I'm in a feature branch, but I've made an unrelated change that I want to see in master.  Often I can just do:</p>

<pre><code>git checkout master
git commit -m ""..."" filename
</code></pre>

<p>But sometimes when I do the checkout I get a warning that there are local changes and thus I can't switch the branch.</p>

<p>Why does this only happen sometimes?  Is there a workaround when I see this message?  Maybe stash?</p>
","0","126855","0","0"
"58437233","5918696","2019-10-17 16:39:32","0","464","<git><git-checkout><git-reset>","What exactly does ‘git checkout commit-sha’ do?","<p>Without path of files, what exactly does </p>

<pre><code>git checkout commit-sha
</code></pre>

<p>do ?</p>

<p>Anyone can explain it to me?</p>
","5","5918696","",""
"1641015","198559","2009-10-29 00:39:45","2","4244","<git><git-checkout>","How to cope with ""rejected"" on git push?","<p>I have a master and a beta branch. There is a situation where push is rejected:</p>

<p><em>edit2:</em> I am on branch master.</p>

<pre><code>$ git push
Counting objects: 9, done.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 669.81 KiB, done.
Total 6 (delta 2), reused 0 (delta 0)
To git@github.com:foobar/codedemo.git
   a5fc71d..64430c1  master -&gt; master
 ! [rejected]        beta -&gt; beta (non-fast forward)
error: failed to push some refs to 'git@github.com:foobar/codedemo.git'
</code></pre>

<p>Normally I would checkout beta, then pull beta and this wold probably solve it.</p>

<p>But because this is a production website I cannot checkout beta here. Is there a way I can pull beta without checking it out?</p>

<p>As this is a production site I am somehow stuck. </p>

<p><em>Edit:</em> The code is also checked out on another location, can I do something from the other location to solve the problem here? There are no problems at the other location.</p>

<p><em>Edit3:</em> With help of the accepted solution I could do it after some time, but I'd prefer a solution without a second client</p>
","5","198559","",""
"40199711","3611258","2016-10-23 05:01:32","4","20341","<git><github><git-checkout>","How to checkout remote branch git?","<p>Me and my team member are working on same repository. Someone create a branch from master called test_01, worked on that and commit, push to test_01 and merge to master. In the meantime some commit are done in master. Now I want to checkout that test_01 so that I write </p>

<pre><code> git checkout test_01 
</code></pre>

<p>and got a git error : pathspec 'test_01' did not match any file know to git . </p>
","3","3611258","0","0"
"2297035","170451","2010-02-19 14:38:31","4","821","<git><merge><version-control><branch><git-checkout>","git ,,local push'' from feature branch to master, without checkout","<p>I would like to merge from FeatureBranch to master, without doing ,,checkout master'' first.
I've tried (being in FeatureBranch)</p>

<pre><code>git push . master
</code></pre>

<p>but I got (to a degree of surprise) :</p>

<pre><code>Everything up-to-date
</code></pre>

<p>Despite having commits in FeatureBranch which are not (yet) present in master.<br/>
<br/></p>

<p>The reasons why I desire to be able to do ,,one-step local push'', are:</p>

<ol>
<li>I want to give changes to my co-workers who stay on master branch</li>
<li>without the additional step of ,,checkout master''</li>
<li>thus being able to still stay in FeatureBranch</li>
<li>and avoiding rapid changing of many files which confuses/alerts many tools which have something to do with dirs/files in repo</li>
</ol>

<p>I know I can do it in more steps in different ways. But I wonder whether there is a one-step solution to this (I think there should be).</p>

<p>I think/realize, that if conflicts arise, I would have to switch to master anyway. But in most cases I do not have conflicts and thus would benefit from one-step solution.</p>

<p>My git version:</p>

<pre><code>git --version
git version 1.6.5.1.1367.gcd48
</code></pre>

<p>(Windows)<br/>
<br/>
TIA<br/>
karolrvn</p>
","2","170451","0","0"
"40291034","153911","2016-10-27 17:41:49","8","3816","<git><git-checkout>","How to find the last branch checked out in git","<p>We can checkout the last branch using <code>git checkout -</code>, but is there a way to just find out what was last branch and not check it out?</p>

<p>EDIT:
I already found that I could use: </p>

<pre><code>git reflog | grep -i ""checkout: moving""|head -1|cut -d' ' -f6
</code></pre>

<p>But I wanted to know if there is a direct simpler command. I am updating the question to reflect this need. Sorry about not being clear enough</p>
","1","153911","",""
"18803105","609235","2013-09-14 15:04:17","1","102","<git><amazon-web-services><repository><git-checkout>","Checkout source files from local git repo to local folder","<p>I am using Amazon Ec2 . I am trying to create a Remote Repo on the Ec2 server to which I can check in code and run my server from there . </p>

<h2>Ec2 Server</h2>

<p>Here is created two folders </p>

<pre><code>/home/ubuntu/project.git &lt;---- Repo
/home/ubuntu/project     &lt;---- Source files to run server
</code></pre>

<p>I followed the instructions given here - <a href=""http://blog.soarez.com/post/56644329478/deploy-a-node-js-service-on-ec2-with-git"" rel=""nofollow"">http://blog.soarez.com/post/56644329478/deploy-a-node-js-service-on-ec2-with-git</a></p>

<p>Now from my local computer , I pushed the source files to project.git . It works fine . Files get pushed into the repo.</p>

<p>Now how do I get the files from the project.git to the project folder . 
I tried doing this , but it doesnt work - </p>

<pre><code>cd ~/project.git
GIT_WORK_TREE=/home/ubuntu/project git checkout -f
</code></pre>
","1","609235","0","0"
"18857570","2788848","2013-09-17 18:46:38","374","130094","<git><git-pull><git-checkout>","How to 'git pull' without switching branches (git checkout)?","<p>I'm used to running <code>git pull</code> and other commands from within a branch I'm working on.  But I have set up a development server that several people work on, so I don't want to have to switch branches when I do it.</p>
<p>If I want to update an existing branch on the dev server from the github repository we all use, what would be the right way to do that?</p>
<p>If I run the command <code>git pull github branchname</code> will that simply pull the branch into the current branch?</p>
<p>All of the git examples I can find seem to indicate that you run <code>checkout branchname</code> first, then do the pull.  I'm trying to avoid that.  As I said, this is an existing branch and I just want to update to the latest version.</p>
","4","2788848","0","0"
"45021988","2924482","2017-07-10 21:34:11","-1","599","<git><svn><github><git-checkout>","GIT: Fork git repro can't checkout branches","<p>I fork repo but the origin of the for has multiple branches and on my fork (web) I can see the the branches but when I try to switch branches on my computer I'm getting the following errors:</p>

<pre><code>error: pathspec 'myBranch01' did not match any file(s) known to git.
</code></pre>

<p>If I check if the branch exist:</p>

<pre><code>git branch -a |grep myBranch01
</code></pre>

<p>I get:</p>

<pre><code>  remotes/origin/myBranch01
  remotes/upstram/myBranch01
  remotes/upstream/myBranch01
</code></pre>

<p>any of you knows why I'm getting this error?, or what I'm doing wrong?</p>

<p>I'll really appreciate your help.</p>
","0","2924482","",""
"63533723","3655142","2020-08-22 07:37:21","3","1926","<git><git-checkout>","git can't checkout branch for the first time without the remote name","<p>I have cloned a repo and added my fork as another remote but I cannot check out a branch for the first time (in this case <code>master</code>, which is not their default branch) without specifying which remote.</p>
<pre><code>git clone https://github.com/facebook/zstd.git
cd zstd
git remote add jay https://github.com/jay/zstd.git
git fetch jay
git checkout master

error: pathspec 'master' did not match any file(s) known to git.
</code></pre>
<p>If I specify the remote it works:</p>
<pre><code>git checkout -b master origin/master

Branch master set up to track remote branch master from origin.
Switched to a new branch 'master'
</code></pre>
<p>I'm curious why I need to specify the remote in this case. I must be remembering this wrong but I'm pretty sure that wasn't always necessary. This is true of any branch that's in both repos, for example, <code>git checkout zstd_help</code> would also fail the first time unless I explicitly specified origin remote.</p>
<p>Git version: <code>git version 2.7.4</code></p>
","0","3655142","0","0"
"45083400","1432545","2017-07-13 14:19:23","2","240","<git><repository><git-checkout><git-filter>","Running git filter manually","<p>I have a repository that contains a <a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#_keyword_expansion"" rel=""nofollow noreferrer"">filter</a> (clean and smudge) which replaces tokens with paths (e.g. <code>@ROOT@</code> with the repository root).
However, when doing a fresh clone, the filters are (of course) not set up yet, so after cloning, I need to add the filters to the git config of the repository.</p>

<p>The files, however, still contain the tokens because the smudge filter is not run. The only workaround I found was removing the files and checking them out freshly, this causes the smudge filter to run. Is there another non-hacky way to run the smudge filter?</p>
","3","1432545","0","0"
"9493055","852366","2012-02-29 03:08:06","0","2153","<git><git-checkout>","Multiple remote git repo in local directory with same directory structure","<p>I'm learning more and more about git each day, so that leads to some inquiring questions.  I have two remote git repos each with their own structure, except both have an 'origin/dev'.  If I checkout using the following in each respective repo to my local:</p>

<p>Project1:</p>

<pre><code>git checkout -b dev origin/dev
</code></pre>

<p>Project2:</p>

<pre><code>git checkout -b dev origin/dev
</code></pre>

<p>Can I run into a scenario where I can have files from Project1 and Project2 in the same local 'dev' directory?  What is the best way around this?</p>
","1","852366","0","0"
"45574086","3528539","2017-08-08 17:00:33","0","2983","<git><git-checkout>","how can git checkout HEAD~2 go 10 commits back","<p>There's a remote branch <code>my-issue-branch</code> and a local branch of the same name. We performed </p>

<p><code>git pull --rebase</code></p>

<p>to get the latest commits locally, but the two last commits are breaking the build. We want to go 2 commits back to build the project and do </p>

<p><code>git checkout HEAD~2</code></p>

<p>which takes us about 10 commits back, instead of just two.</p>

<p>Only</p>

<p><code>git checkout &lt;commit-hash&gt;</code></p>

<p>helps the situation.</p>

<p>Keeping in mind, that four people work on this branch, what can be wrong?</p>
","2","3528539","0","0"
"27742458","2409793","2015-01-02 12:45:02","1","622","<git><git-checkout><git-reset>","Difference between git reset and git checkout","<p>What is the difference in the actual effect of the following two commands?
Don't they both make the staging area and the working directory to match the latest commit?</p>

<p><code>git reset --hard</code></p>

<p><code>git checkout &lt;sha-of-latest-commit&gt;</code> </p>
","2","2409793","",""
"27766927","3852268","2015-01-04 15:15:03","0","326","<git><github><bitbucket><atlassian-sourcetree><git-checkout>","How to checkout project in my local machine(windows 8) from git repo and i am using bitbuket & source tree","<p>I want checkout project from git repo. and i am using bitbucket repo.</p>

<p>i am using this command <code>git clone https://test@bitbucket.org/abc/xyz.git</code> and cloning start </p>

<p>see attached:
<img src=""https://i.stack.imgur.com/wABdD.png"" alt=""enter image description here""></p>

<p><strong>but i don't know this cloning/checkout is where to store in my local</strong></p>

<p>And i am also try using source-tree but i don't how to checkout project quickly </p>

<p>see attached :</p>

<p><img src=""https://i.stack.imgur.com/1kaTc.png"" alt=""enter image description here""></p>

<p>then when i click on <strong>Clone</strong> then cloning process start but still cloning 5 - 6 hour.</p>

<p>please help me i want to checkout project quickly</p>
","0","3852268","0","0"
"27963720","838527","2015-01-15 12:41:05","3","918","<phpstorm><remote-server><git-checkout>","Uploading remote server files after git checkout","<p>I am using phpstorm 7 on my windows host for a git project. The files are synced with a VM via phpstorm's <strong>remote server</strong> feature, so each time a save is made, the changed file is also upoloaded to my VM.</p>

<p>I am having difficulties when I am <strong>pulling newer versions from Git</strong> because the only way to send the changed files to my VM is to upload a <strong>full copy</strong> of the project via phpstorm. Or of course I can send them individually but it also takes too <strong>much effort</strong>.</p>

<p>So my question is if there is a feature or plugin for phpstorm which <strong>automatically</strong> uploads only the <strong>changed files</strong> after a git checkout.</p>

<p>Thank you!   </p>
","1","838527","",""
"28257189","1203396","2015-01-31 22:20:05","0","130","<git><git-branch><git-checkout>","Understanding git behavior on a checkout; expected an error on a checkout but did not get one","<p>My question is on git behavior on checkout and here are the steps to elucidate the behavior I do not understand. I make a dir <code>testdir</code> with files <code>foo</code> and <code>bar</code> each with a single line of text. I do the following:</p>

<pre>
git init
git add .
git commit
git branch bug
</pre>

<p>So I have the <code>master</code> branch and an identical <code>bug</code> branch. In <code>master</code> I add a line of text to file <code>foo</code> but do NOT add or commit to master, just a file change on my local tree. Next I do:</p>

<pre>
git checkout bug
</pre>

<p>I was expecting to get the following error:</p>

<pre>
   error: Your local chages to the following file would be overwritten by checkout:
     foo
  Please commit your changes or stash them before you can switch branches.
</pre>

<p>But I did <strong><em>NOT</em></strong> get the above error, and my question is how come git did not error in this case? Instead I got the following:</p>

<pre>
  root@revision-control ~/testdir# git checkout bug
  M       foo
  Switched to branch 'bug'
</pre>

<p>I am in now the <code>bug</code> branch but the <code>foo</code> file has that second line I added when I was in <code>master</code>.</p>

<p>Can anyone explain what happened here and why git let me change branches without the error message? And there are no merge conflict indicators in the file. </p>

<p>Next I change back to the <code>master</code> branch and add then commit the change to the <code>foo</code> file (so <code>master</code> file <code>foo</code> has 2 lines and <code>bug</code> <code>foo</code> has one line). I make a change to <code>foo</code> in <code>master</code> and add a third line of text and now when I try to checkout the <code>bug</code> branch (same git command as above) I get:</p>

<pre>
user@host ~/testdir# git checkout bug
error: Your local changes to the following files would be overwritten by checkout:
        foo
Please, commit your changes or stash them before you can switch branches.
Aborting
</pre>

<p>So why is this behavior now different than before and I get the error? (this is the behavior I was expecting initially).</p>
","1","1203396","",""
"65124384","1252422","2020-12-03 10:42:34","0","64","<git><git-checkout><undo><sparse-checkout>","Undo git checkout.. with a twist","<p>First of all, let me make one thing clear: although there are a LOT of questions about undoing a git checkout, this is not (at least as far as I can assess) a duplicate question.</p>
<p>Now let me explain my use-case:
I am using the sparse-checkout feature to have a working copy which does not contain all the files in the central remote repo.</p>
<p>Now let's suppose I want to add a file to my working copy, but I make a mistake and checkout the wrong file.</p>
<p>I want to revert my working copy as if that file was never checked-out.</p>
<p>That is: I want to remove that file from my working copy, but I do <strong>not</strong> want that file to be removed from the remote repo.
I have been looking everywhere but still have not found a way to do what I want.</p>
","0","1252422","",""
"28663227","2605112","2015-02-22 21:04:28","12","13836","<git><merge><git-pull><git-checkout>","Difference between checkout remote branch and pull remote branch in git?","<p>What is the difference between:</p>

<pre><code>git checkout -b &lt;branch&gt; origin/&lt;branch&gt;
</code></pre>

<p>and </p>

<pre><code>git pull origin &lt;branch&gt;
</code></pre>

<p>They seem to have the same functionality to me.  thanks.</p>
","0","2605112","0","0"
"28676567","1339987","2015-02-23 14:56:46","3","974","<git><git-checkout>","git checkout modified file without copy-pasting full file path","<p><code>git status</code> shows something like</p>

<pre><code>git status
# On branch icc-server-send-metric-values
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   java/com/me/cards/preview/preview-card.js
</code></pre>

<p>I want to checkout the file, but without retyping it or copy pasting it. The closest command is <code>add -i</code> but this only really cares about the index, not checking out. What's a good workflow here?</p>
","2","1339987","",""
"10002239","443600","2012-04-03 22:15:53","307","235223","<git><branch><git-branch><git-checkout>","Difference between git checkout --track origin/branch and git checkout -b branch origin/branch","<p>Does anybody know the difference between these two commands to switch and track a remote branch?</p>
<pre><code>git checkout -b branch origin/branch
git checkout --track origin/branch
</code></pre>
<p>I think both keep track of the remote branch so I can push my changes to the branch on origin, right?</p>
<p>Are there any practical differences?</p>
","0","443600","0","0"
"64602069","7613404","2020-10-30 02:47:04","0","2196","<git><github><git-merge><git-pull><git-checkout>","how to edit and update files for different git branches?","<p>A repository in my GitHub has two branches: <code>master</code> and <code>solution</code>. First I <code>git clone</code></p>
<pre><code>git clone &lt;master url&gt;
</code></pre>
<p>then I <code>cd</code> to that folder and switch to <code>solution</code> branch</p>
<pre><code>git checkout solution
</code></pre>
<p>I find the contents of files is still the same as in <code>master</code>, e.g. <code>README.md</code>. how can I access <code>solution</code> files?</p>
<p>then I tried <code>git pull</code> to update the files in <code>solution</code> branch</p>
<pre><code>git pull origin solution
</code></pre>
<p>and it works and now the contents of files are for <code>solution</code>, but when I want to switch back to <code>master</code>, it failed and said I need to merge, because I think some files have different contents in the two branches. How to switch back?</p>
<p>In general, how to edit and update files in different branches and how to easily switch back and forth?</p>
<p>Another example:</p>
<pre><code>          I--J   &lt;-- br1
         /
...--G--H   &lt;-- main
         \
          K--L   &lt;-- br2     
              \
               M--N
                   \
                    P
</code></pre>
<p>Is another worktree needed?</p>
","3","7613404","0","0"
"46644278","1668622","2017-10-09 10:28:45","10","1327","<git><git-submodules><git-pull><git-checkout><git-config>","Todays strategy to keep git submodule checkouts in sync with commit-IDs?","<p>A lot of questions about automatically update submodules have been asked on 
StackOverflow including:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/4611512"">Is there a way to make git pull automatically update submodules?</a></li>
<li><a href=""https://stackoverflow.com/questions/1030169"">Easy way to pull latest of all git submodules</a></li>
<li><a href=""https://stackoverflow.com/questions/22328053"">Why doesn't <code>git checkout</code> automatically do <code>git submodule update --recursive</code>?</a></li>
</ul>

<p>But it looks to me as for git submodules there is no single approach yet which works like <code>svn up</code> regarding svn-externals.</p>

<p>So since git is changing every day I dare to ask again: </p>

<p><strong>Is there a (convenient) way to <em>init</em> and <em>automatically update</em> submodule checkouts (i.e. keep in sync with their corresponding submodule commit IDs) for <code>checkout</code> <em>and</em> <code>pull</code> (i.e. <code>merge</code> and <code>rebase</code>)?</strong></p>

<p>Currently I have two approaches for this:</p>

<p><strong>#1: create a <code>post-checkout</code>, <code>post-merge</code> and <code>post-rewrite</code> hook with the following content</strong></p>

<pre><code>#!/bin/sh
git submodule update --init --recursive
</code></pre>

<p>as you can already see this approach has several disadvantages:</p>

<ul>
<li>it's <strong>complicated</strong> and probably needs a script to make it working reliably</li>
<li>does not work well if you <strong>use these git-hooks already</strong></li>
<li>the commit hooks are only active <strong>on this clone</strong> (has to be re-done by
everyone working on this project on every single clone)</li>
<li>setup is <strong>non-standard</strong> and will confuse others</li>
</ul>

<p><strong>#2: configure aliases for <code>pull</code> and <code>checkout</code></strong></p>

<pre><code>git config --global alias.up 'pull --recurse-submodules'
git config --global alias.co 'checkout --recurse-submodules'
</code></pre>

<p>But this isn't nice neither:</p>

<ul>
<li>it won't <code>--init</code> the submodules (can be solved by running <code>pull</code>/<code>checkout</code> and <code>submodule update</code> separately instead</li>
<li>it's <strong>non-standard</strong> and won't work with scripts and snippets</li>
<li>it's <strong>easy to forget to use</strong> <code>up</code>/<code>co</code> instead of <code>pull</code>/<code>checkout</code></li>
<li>it works <strong>only on the local</strong> machine/user</li>
</ul>

<p>This approach would be a bit more like I want it to be if you could do something
like</p>

<pre><code>git config --global pull.recurseSubmodules true
git config --global pull.initSubmodules true
git config --global checkout.recurseSubmodules true
git config --global checkout.initSubmodules true
</code></pre>

<p>.. but you can't, do you?</p>
","0","1668622","0","0"
"46666880","4453737","2017-10-10 12:31:30","6","12620","<git><git-checkout>","Is their a way to revert `git checkout`?","<p>I did <code>git checkout -- .</code> mistakenly . </p>

<p>changes neither committed nor stashed..
is their a way to retrieve my changes? </p>

<p>tried <code>git reflog</code> changes wasn't reflected in it.. </p>

<p>if i commit or stash i know to retrieve but what about checkout without doing either?</p>

<p>things i did,</p>

<p><code>git status</code></p>

<p>after i noticed some useless changes so i tried to do <code>checkout</code> changes instead i did <code>git checkout -- .</code></p>

<p>so is it possible to retrieve? </p>
","2","4453737","",""
"10821362","833422","2012-05-30 17:35:36","4","2844","<c><git><git-checkout><libgit2>","Git checkout with libgit2","<p>This question is an evolution or resolution my previous question: <a href=""https://stackoverflow.com/questions/10642629/clone-a-git-repo-in-depth"">Clone a git repo (in depth)</a> I think creating a new question is the best thing to do in this situation, but I may be wrong.</p>

<p>This one is simple: how would I do something equivalent of <code>git checkout master</code> with <a href=""https://github.com/libgit2/libgit2"" rel=""nofollow noreferrer"">libgit2</a></p>

<p>It seems like it was not possible a year ago: <a href=""https://github.com/libgit2/libgit2/issues/247"" rel=""nofollow noreferrer"">https://github.com/libgit2/libgit2/issues/247</a>
According to this a clone was possible at least 5 months ago. But I have never seen any <a href=""https://github.com/libgit2/libgit2/tree/development/src"" rel=""nofollow noreferrer"">code</a>, <a href=""http://libgit2.github.com/libgit2/"" rel=""nofollow noreferrer"">documentation</a> or <a href=""https://github.com/libgit2/libgit2/issues"" rel=""nofollow noreferrer"">examples</a> about how to do it. <strong>(Edit)</strong> I mean I haven't seen anything about a complete clone with <code>git checkout</code> included, nor any code/docs about the checkout.</p>
","0","833422","0","0"
"11306737","1365319","2012-07-03 08:00:29","16","7388","<git><git-checkout>","--dry-run option in git checkout","<p>I use <code>git checkout --&lt;dir_name(or)file_name&gt;</code> to discard all my changes in the specific directory or in the file. Whenever I do that, GIT checks-out the directory (or) file from the repository.</p>

<p>Is there a way I can tell GIT?, ""<strong>do not override the changes, just tell me what would happen.</strong>""</p>

<p>Similar to <code>git clean -n</code> (or) <code>git clean --dry-run</code>.</p>

<p><strong>UPDATE:</strong>
Before I execute, <code>git checkout --src/</code>, I would like to see what are the files would be overridden. I know we can use <code>git status src/</code>. But, wouldn't it be great to have <code>git checkout -n --src/</code>? Not much command changes for the user.</p>
","4","1365319","0","0"
"47421693","6375030","2017-11-21 20:00:37","1","1300","<git><git-checkout>","git modified file keeps coming up after checking out branch","<p>I have a modified file on the master branch.</p>

<p>I do a <code>git checkout myfile</code>, check <code>git status</code> and the master branch is up-to-date with no modified files.</p>

<p>But when I checkout another branch and come back with <code>git checkout master</code> the modified file shows up again. I don´t know why, I even cleaned the stash, but still, whenever I switch back to master, that file shows up as modified again.</p>

<p>Anyone a hint how to solve that?</p>
","3","6375030","0","0"
"47441994","6723085","2017-11-22 18:54:44","0","1248","<git><git-checkout>","alternative to git checkout --orphan when --orphan is not supprted","<p>I have programmed a script that at some point runs</p>

<pre><code>git checkout --orphan $BRANCH_NAME
git rm -rf *
git commit --allow-empty -m 'Orphaned Branch inited'
</code></pre>

<p>Which works exactly as I would like to work</p>

<p>Now I have to deploy it, and don't ask me why, this server's git does not support --orphan option, resulting in </p>

<pre><code>error: unknown option `orphan'
</code></pre>

<p>git checkout --help does not show the option
git --version results in </p>

<pre><code>git version 2.9.2
</code></pre>

<p>And from what I read, --orphan has been around prior to git 2.</p>

<p>Touching the server in any way is not an option, so I need to re write my scripts so I end up with an orphaned, empty branch (and without messing my other branches in the process)</p>

<p>How can I achieve this?</p>

<p>Thanks in advance</p>

<p>edit: updated the commands</p>
","0","6723085","",""
"47451586","8995290","2017-11-23 09:14:26","2","974","<git><branch><git-checkout><git-worktree>","git checkout branches for development/staging/production","<p>I am currently restructuring how our company is handling development procedures. Since it is quite the hazzle for us to always ssh into the server to promote files/folders from DEV to STAGE/PRODUCTION servers I thought it might be a good idea to setup the git environment in a way that would allow us to simple merge the dev-branch into the stage-branch to perform a ""promotion"".</p>

<p>For this we would need 3 different branches in our projects which checkout to different locations on the server when a new push is received.</p>

<p>Lets say we have 3 folders on our server which contain the data for our 3 different environments (DEV - STAGE - PROD). Then the schema would look somewhat like this:</p>

<p><a href=""https://i.stack.imgur.com/ShlS6.png"" rel=""nofollow noreferrer"">Branch checkout schema</a></p>

<p>I set up the git as bare repos and I was wondering if something of that sort is possible with git.</p>

<p>I will be grateful for every bit of help you guys can provide me with! :D</p>
","2","8995290","",""
"47469039","245549","2017-11-24 08:20:05","2","6895","<git><git-branch><git-checkout>","How to see and go to local branches in git?","<p>I have just created a brand-new git repository:</p>

<pre><code>git init
</code></pre>

<p>By executing</p>

<pre><code>git status
</code></pre>

<p>I have determined that I am in the master branch. The first line of the output was:</p>

<pre><code>On branch master
</code></pre>

<p>As a first step I wanted to create a branch and go in there. I have learned that one can do these two steps just by one command:</p>

<pre><code>git checkout -b aaa
</code></pre>

<p>I this way I have created a branch called ""aaa"" and went there. I could confirm it with ""git status"" (it tells me ""On branch aaa""). Now I want to go back to the ""master"" branch. So, I execute:</p>

<pre><code>git checkout master
</code></pre>

<p>As a result I get:</p>

<pre><code>error: pathspec 'master' did not match any file(s) known to git.
</code></pre>

<p>So, how do I go to another (existing) branch in git? Moreover, I do not even know what branches exist. How can I see a list of existing branches?</p>
","2","245549","0","0"
"66312039","9852082","2021-02-22 08:07:58","1","29","<git><branch><history><git-checkout>","Is it possible to see which branches I used in git?","<p>Is it possible to see which branches I used in git?</p>
<p>I would like to see something like the branches checkout history in git. Is it possible to do somehow or does this kind of information not stored by git?</p>
<p>I was not able to find an answer to my question by googling.</p>
<p>E.g. if I run the commands: <code>git checkout -b feature/foo</code>, <code>git checkout -b feature/bar</code>, then the last two records in the history I am looking for I am expecting to see something similar to the:</p>
<pre><code>...
feature/foo
feature/bar
</code></pre>
","1","9852082","0","0"
"30036362","587415","2015-05-04 17:37:17","0","1680","<git><git-merge><git-checkout>","git how to checkout to a commit make some changes and push it back to master","<p>So I have many commits in the master branch. I want to roll back to a commit and make some changes in one file. It's simply to do with <code>checkout</code> command.</p>

<p>So what were my steps.
1. I've checkout new branch from master <code>git checkout -b new_branch</code>
2. Then in new_branch I made <code>git checkout f95ecfe</code> to roll back to a commit.</p>

<p>Now it says: <code>HEAD detached at f95ecfe</code></p>

<p>On this stage I want to add some changes and push this new branch to the bitbucket.</p>

<p>Should I do some other actions or I can simple make <code>git push origin new_branch</code></p>

<p>Also in the master after this commit f95ecfe I have many other commits, so my question also how can I correctly merge this new branch with detached head with a master. Will it just merge one my modified file or it will merge entire tree from new branch with have different state of all files with master tree?</p>
","1","587415","",""
"30935689","2498090","2015-06-19 10:19:17","30","21880","<git><git-checkout>","git: fatal: Cannot switch branch to a non-commit '12382'","<p>Someone else on my team created a new git branch, committed and pushed to the usual remote that we work with.  When I try to check out this branch, I get this:</p>

<pre><code>% git checkout 12382
fatal: Cannot switch branch to a non-commit '12382'
</code></pre>

<p>I have not had trouble checking out other branches from this repository; tried checking another one out right after this (one that I did not have a local copy of), and it worked fine.</p>

<p>I tried building a server with this branch on our Go pipeline, it worked fine - which means the server was successful in checking out that branch.</p>

<p>Tried this to check the status of things:</p>

<pre><code>% git remote show origin
* remote origin
  Fetch URL: git@gitlab.mycompany.com:mycompany/myrepository.git
  Push  URL: git@gitlab.mycompany.com:mycompany/myrepository.git
  HEAD branch: stage
  Remote branches:
    10112                     tracked
    10198                     tracked
    10678                     tracked
...
    12382                     tracked    &lt;&lt;&lt;---
...
  Local branches configured for 'git pull':
...
  Local refs configured for 'git push':
...
</code></pre>

<p>Could anyone suggest how to fix this?  What went wrong?</p>
","0","2498090","0","0"
"66629409","1385931","2021-03-14 20:49:23","1","136","<git><git-checkout>","Difference between `git checkout -- foo.txt` and `git checkout foo.txt`","<p>Normally I use <code>git checkout -- foo.txt</code> to reset a specific file in my worktree.
Today I accidentally used <code>git checkout foo.txt</code> (without <code>--</code>) and it seems it did the same.</p>
<pre><code>$ git checkout -- foo.txt  # no output
$ git checkout foo.txt
Updated 1 path from the index
</code></pre>
<p>So I am wondering, what is the difference between the two? Or, is there any?</p>
","0","1385931","",""
"66629436","1385931","2021-03-14 20:52:45","16","2655","<git><git-checkout><git-switch>","What does git checkout still do after git switch got introduced?","<p>As everyone knows, <code>git checkout</code> is a very overloaded command. And I do understand that certain commands got introduced to distribute, e.g. to <code>git switch</code>.</p>
<p>Before I used the following commands:</p>
<pre><code>$ git checkout &lt;existing-branch&gt;
$ git checkout &lt;hash&gt;
$ git checkout -b &lt;new-branch-name&gt;
</code></pre>
<p>So I am wondering after <code>git switch</code> got introduced, what is the left purpose of <code>git-checkout</code>? Is this a deprecated command?</p>
","4","1385931","",""
"30780316","338581","2015-06-11 12:05:55","-1","86","<git><git-checkout>","What is the reason that in git we can refer to HEAD by --?","<p>We all know <code>git status</code> command, and beginning of its output:</p>

<pre><code>$ git status
On branch add_multiple_items_to_set__to_master
Changes not staged for commit:
  (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
</code></pre>

<p>the last mentioned line suggest that we should use <code>--</code> to refer to last commit - <code>HEAD</code>.</p>

<p>I always wondered from where this come from. It took me a while to figured out, that I can use <code>git checkout HEAD &lt;file&gt;...</code> and expect this same result, and that <code>git log -1 --</code> and <code>git log -1 HEAD</code> also is this same.</p>

<p>In which statements <code>--</code> syntax are more natural? Are there any other multiple dashes shortcuts, like <code>---</code>, etc.?</p>
","1","338581","",""
"30800454","4419357","2015-06-12 10:06:47","58","231314","<git><github><git-checkout><git-fork>","error: pathspec 'test-branch' did not match any file(s) known to git","<p>I am a new user of Git. I have forked a repository called Spoon-Knife (available for practicing forking with Git). Then, I cloned it locally by running</p>

<pre><code>git clone https://github.com/rohinichoudhary/Spoon-Knife.git
</code></pre>

<p>This repository contains three branches, i.e.</p>

<ul>
<li><code>master</code>,</li>
<li><code>test-branch</code>,</li>
<li><code>change-the-title</code>.</li>
</ul>

<p>When I run <code>git branch</code>, it only shows <code>*master</code>, not the remaining two branches. And when I run</p>

<pre><code>git checkout test-branch
</code></pre>

<p>I get the following error:</p>

<blockquote>
  <p>error: pathspec 'test-branch' did not match any file(s) known to git.</p>
</blockquote>

<p>Why is this happening? How can I solve this problem?</p>
","1","4419357","0","0"
"47927746","245549","2017-12-21 15:09:38","0","64","<git><git-rebase><git-checkout><git-fetch>","Do these three sets of git commands do the same?","<p>Do the following three sequences of command do the same:</p>

<p>Commands 1:</p>

<pre><code>git fetch origin master
git rebase origin master
</code></pre>

<p>Commands 2:</p>

<pre><code>git pull origin master --rebase
</code></pre>

<p>Commands 3:</p>

<pre><code>git fetch origin master
git checkout FETCH_HEAD
</code></pre>

<p>My understanding is that all three commands do the same, which is:</p>

<ol>
<li>""Download"" all the commit from the specified branch of the specified remote repository.</li>
<li>Put the commit from the current branch ""on top"" of the downloaded commits.</li>
</ol>
","2","245549","0","0"
"58939846","4451315","2019-11-19 17:36:36","2","505","<git><git-branch><git-checkout>","`git checkout` not resetting file","<p>Here's my situation. I'm on branch <code>my_branch</code>, have accidentally modified a file (and have staged these changes), and would like to reset this file to how it was on <code>master</code>. However, if I doing so using <code>git checkout</code>, I get an error (see below for details).</p>

<pre><code>$ git branch
* my_branch
  master

$ git fetch origin master
From [MY REMOTE]
 * branch            master     -&gt; FETCH_HEAD

$ git status
modified:   my_folder/my_file.py

$ git checkout origin/master -- my_folder/my_file.py
error: pathspec 'my_folder/my_file.py' did not match any file(s) known to git.
</code></pre>

<p>How should I be using <code>git checkout</code>? What might be causing git to list this file as 'modified' in <code>git status</code>, but to say it's not recognised during <code>git checkout</code>?</p>
","0","4451315","",""
"21088498","1746582","2014-01-13 10:05:30","0","116","<git><https><git-push><git-checkout><git-post-receive>","https and http alternating on HTML forms every other git push (and post-receive git checkout -f)","<p>I have a web site that is using Laravel and using Git to push changes from my local laptop to Live (apache) web server.  The server runs as a VPS.</p>

<p>I have an issue that seems to be occuring consistently with every other Git push.  With web pages that contain forms that require SSL/HTTPS connectivity I have noticed the following:</p>

<ul>
<li>when I push a change via Git, the HTML web page shows as ""https"" as the form action.</li>
<li>when I push the same file via Git again (with trivial change, same code), the HTML web page shows ""http"" as the form action and a warning is visible using Fire bug as follows:
""Password fields present in a form with an insecure (http://) form action.</li>
<li>when i push again, the form action is ""https"" again without the error.</li>
<li>I can ftp the file as many times as I like and each time the form action is as expected, i.e. is ""https"".</li>
</ul>

<p>I have no idea why this is happening and would be extremely grateful if someone could shed light on the possible cause of this.</p>
","4","1746582","",""
"58942127","10894456","2019-11-19 20:12:55","2","139","<git><intellij-idea><git-branch><git-pull><git-checkout>","Why ""git pull"" is updated files when implemented immediately after checking out a remote branch?","<p>I use IntellijIDEA,</p>

<ol>
<li>At the branches view( right bottom corner) I select  a brunch from remote branches which I have never checked out before ( I didn't even knew it's name before read at my Jira task )</li>
<li>Clicked on it</li>
<li>Checkout As...</li>
<li>Left the original name ( the same as remote name)</li>
<li>OK</li>
</ol>

<p>I I wish I got an up to date branch ( isn't it reasonably?) but when I immediately select Git -> pull, I got <strong>588 files updated in 627 commits</strong> at this branch?</p>

<p>Please explain what is the logic? Isn't it reasonably to expect to get an up to date branch when checkout and expect pull will say ""everything is up to date"" ? </p>
","0","10894456","",""
"30833712","2712050","2015-06-14 19:40:19","7","4246","<git><git-commit><git-checkout>","How to git commit in a new branch after I've already made the changes?","<p>I understand that a command to start a new branch is</p>

<pre><code>git checkout -b &lt;mybranch&gt;
</code></pre>

<p>However, that assumes I had the foresight to have created the new branch before making the new changes that I want to commit. </p>

<p>Usually however that's not the case. Usually, I start coding, then may or may not do <code>git add .</code> <em>then</em> want to commit in a new branch. How do I do that?</p>
","0","2712050","",""
"13292918","280043","2012-11-08 16:10:05","61","27754","<git><git-checkout>","How do I intentionally detach HEAD in git?","<p>If I do <code>git checkout HEAD^</code>, I get this:</p>

<pre><code>$ git checkout HEAD^
Note: checking out 'HEAD^'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at...
$
</code></pre>

<p>Veteran git users are probably very familiar with this. But if I do <code>git checkout HEAD</code>, nothing happens:</p>

<pre><code>$ git checkout HEAD
$
</code></pre>

<p>I'd like to create the ""detached HEAD"" state for the commit at the head of my current branch. How do I do that?</p>
","9","280043","0","0"
"40272472","1741893","2016-10-26 21:34:54","9","3012","<git><git-checkout>","How can I use a wildcard in git pathspec?","<p>I'm using Git for Windows 2.9.3.windows.1 via Git Bash.</p>

<p>Now dev branch is checked out and I want to checkout some files which are now not in the working directory from master branch.
The files have the same name and are stored in similar directories like:</p>

<pre><code>path/to/a/file.txt
path/to/that/file.txt
path/to/the/file.txt
path/to/this/file.txt
</code></pre>

<p>I'm sure I can do that by specifying the files one by one:</p>

<pre><code>git checkout master path/to/a/file.txt path/to/that/file.txt path/to/the/file.txt path/to/this/file.txt
</code></pre>

<p>But it's a hassle. Instead I want to use a wildcard like:</p>

<pre><code>git checkout master path/to/*/file.txt
</code></pre>

<p>When I tried this command an error occurred:</p>

<pre><code>error: pathspec 'path/to/*/file.txt' did not match any file(s) known to git.
</code></pre>

<p>Then, I learned <a href=""https://git-scm.com/docs/gitglossary#def_pathspec"" rel=""noreferrer"">pathspec</a> and tried:</p>

<pre><code>git checkout master path/to/**/file.txt
git checkout master 'path/to/*/file.txt'
git checkout master 'path/to/**/file.txt'
git checkout master */file.txt
git checkout master '*/file.txt'
git checkout master **/file.txt
git checkout master '**/file.txt'
git checkout master ':(glob)path/to/*/file.txt'
git checkout master ':(glob)path/to/**/file.txt'
git checkout master ':(glob)**/file.txt'
</code></pre>

<p>All of them didn't work due to the same error. They didn't work even if I add <code>--</code> between master and pathspec.
How can I use a wildcard in pathspec?</p>
","4","1741893","0","0"
"40469805","455319","2016-11-07 16:21:42","0","220","<git><deployment><git-checkout>","How to checkout the contents of a directory in git?","<p>I have a repo with a 'htdocs` directory in its root, is it possible to checkout only the contents of this folder? I tried running:</p>

<pre><code>git checkout -f master -- htdocs
</code></pre>

<p>Which does ignore everything else in the repo root but it also brings in the <code>htdocs</code> folder. I could copy the contents and remove the directory with a couple additional commands but I was wondering if it was possible with through git only.</p>
","0","455319","",""
"40554135","1537990","2016-11-11 18:35:07","0","31","<git><gitignore><git-checkout>","git double checkout, folder content gone","<p>I have a git repository with a master and developer branch.<br>
Say my branch is called <code>branch1</code>.<br>
Inside my repo I have a folder called <code>myfolder</code>. I was on <code>branch1</code> and I did</p>

<pre><code>git checkout master
git checkout branch1
</code></pre>

<p><code>myfolder</code> is now empty (sic), how did this happen?   </p>

<p>I should note that <code>myfolder</code> is included in the <code>.gitignore</code> which I suspect is the cause of the problem, but I don't understand why. Also is there a way to restore its content? </p>
","2","1537990","",""
"13955433","1406122","2012-12-19 15:17:39","1","62","<git><version-control><repository><git-submodules><git-checkout>","Error cloning git re","<p>So I'm participating in this project, using git.</p>

<p>There's a bunch of source files and some libraries we refer to. The libs are put into git as sub-modules (e.g. BulletPhysics) and shall not be altered by our team.</p>

<p>According to Murphy's law, this alteration has happened, along with a commit/push, which seemed not to have had any effect...</p>

<p>... Until some guy lost his local repo and had to re-clone. Well, all that happens is some part of the project being actually downloaded, but when it comes to bullet, all that happens is </p>

<pre><code>Unable to checkout 'cc1b481c8ec2868595db30303d88bd12bc1bcf2a' in submodule path 'extern/bullet'
</code></pre>

<p>Our supervisor told us it has been broken by the commit/push action(s) that tried to alter bullet, with us not having rights to do this, and that he doesn't know how to fix this.</p>

<p>Could anybody help me fix this without judging him? ;)</p>

<p>regards, LDer</p>
","8","1406122","",""
"40652774","6280224","2016-11-17 10:44:47","0","1445","<git><git-checkout>","git checkout deletes files","<p>I am new to git and I wanted to try the branch feature. I am working with a local repository. The problem is that if I create a new branch and then go back to the master branch, some files are lost.</p>

<p>This is what I do:</p>

<p>I have two directories:</p>

<pre><code>$ ls
g_LT  LT
</code></pre>

<p>and a source code file lt_mp2.F in the LT directory:</p>

<pre><code>$ ls LT/ | grep lt_mp2.F
lt_mp2.F
</code></pre>

<p>The other directory contains a relative symlink to this file:</p>

<pre><code>$ ls -l g_LT/ | grep lt_mp2.F
lt_mp2.F -&gt; ../LT/lt_mp2.F
</code></pre>

<p>Both files are lost if I create a new branch and then go back to the master branch. So, let me show this:</p>

<p>Before I create the new branch, let's check that there is nothing to commit:</p>

<pre><code>$ git status
HEAD detached from 2617e8a
nothing to commit, working directory clean here
</code></pre>

<p>Let's also check that we are in the master branch and that the last commit is from Oct 13 2016</p>

<pre><code>$ git branch -a
* (detached from 2617e8a)
master

$ git log
commit 3484261bdd585671bf7c74568542a62610c2deaf
Author: [...]
Date:   Thu Oct 13 09:25:06 2016 +0200
[...]
</code></pre>

<p>Now I create a new branch:</p>

<pre><code>$ git checkout -b testbranch
Switched to a new branch 'testbranch'
</code></pre>

<p>The source files are still there:</p>

<pre><code>$ ls LT/ | grep lt_mp2.F
lt_mp2.F
$ ls -l g_LT/ | grep lt_mp2.F
lt_mp2.F -&gt; ../LT/lt_mp2.F
</code></pre>

<p>Now I go back to the master branch:</p>

<pre><code>$ git checkout master
Switched to branch 'master'
</code></pre>

<p><strong>But now the source files are gone:</strong></p>

<pre><code>$ ls LT/ | grep lt_mp2.F
(no output)
$ ls -l g_LT/ | grep lt_mp2.F
(no output)
</code></pre>

<p><strong>Moreover the last commit is suddenly from Dec 2015 instead of Oct 13 2016:</strong></p>

<pre><code>$ git log
commit 634741172ed34cd687fd91f14da45004b3328f8b
Author: [...]
Date:   Tue Dec 1 18:54:57 2015 +0100
[...]
</code></pre>

<p>What is happening here and why am I losing my source files?</p>
","0","6280224","",""
"28696002","120481","2015-02-24 12:37:48","27","17543","<git><branch><git-checkout>","undo git pull of wrong branch onto master","<p>I have <strong>pulled from</strong> a different branch from the remote. The 2 branches are different yet the merge happened silently on my current branch. I am currently working on the ""master"" branch locally, and it has been updated with the changes of the remote branch - ""FE_Changes"". </p>

<p>How do I remove the effects of the ""FE_Changes"" branch from my master branch ?</p>
","6","120481","0","0"
"65527930","997147","2021-01-01 07:20:59","0","80","<git><git-branch><git-checkout><git-diff>","How to ignore a fixed set of changes from a commit without adding to gitignore (read the details)?","<p>So there are many times that while working with git I follow this process:</p>
<ol>
<li>Clone a project and perform it's setup.</li>
<li>The setup/install process creates new files which maybe configurational files specific to my environment (that aren't gitignored) or modifies existing &quot;core&quot; files in the process of the setup of the project. These changes/files are essential to run the project but should not be checked into the repo and were coded specifically that way so that these should NOT be checked in ever coz it maybe sensitive.</li>
<li>I make a branch called feature-newfeaturename and then start my feature development. At this point there are several unstaged changes/files from step 2 and I work on top of that.</li>
</ol>
<p>Now when I finish developing the feature, I want to checkin merely the changes I made excluding the files. Normally what I do is that at the end of step 2, I do a <code>git diff &gt; setup-changes.txt</code> and then use that file as reference at the end.</p>
<p>When I'm done with my feature development, I literally do git checkout <code>each-file-name-in-the-list</code>, followed by <code>git add .</code> and <code>git commit</code> and then make the PR--this way it merely PRs in my changes only.</p>
<p>This works fine for now but isn't efficient and I feel there might be a better way?</p>
<p>And another issue is, sometimes my changes include changes to the core files which conflict with the changes made in step 2. So when I do a git checkout in the end, my changes would be erased and therefore I have to manually diff out the changes I made, do a checkout of the file with the original core (that excludes the setup changes) and then manually use the diff to find and add my changes alone.</p>
<h2>Again this is counterintuitive and wish there is a better process. Is there? If so how?</h2>
<p>To simplify this question, let me provide an example:</p>
<ol>
<li>There's a file main.txt which simply has the word 'apples' and is part of &quot;first commit&quot; in the main branch.</li>
<li>Then I do a <code>git checkout -b setup</code> and add <strong>bananas</strong> which is the configuration changes and perform a commit.</li>
<li>Then I do a <code>git checkout -b feature</code> from setup branch and add <strong>oranges</strong> making the file have apples, bananas and oranges. So the new feature is addition of <strong>oranges</strong>.</li>
</ol>
<p>Now what I want to do is simply get the diff between first and last i.e. I want to be able to have just apples and oranges in my final commit and then push that as the second commit to my main branch.</p>
","2","997147","",""
"47315255","3910384","2017-11-15 18:59:33","0","265","<git><git-checkout>","git history changes after a checkout","<p>I have a history that I'm happy with: </p>

<pre><code>$ git log --oneline -n60
b1bbe6a JIRA-1569 later fixes
b021112 JIRA-1569 later fixes
0734203 JIRA-1569 adding new statuses
b38c4a2 Merge branch 'feature/MultipleStars' of feature/MultipleStars
0e2bcbd Merge remote-tracking branch 'remotes/origin/feature/AutoStars' into feature/MultipleStars
d8d6be9 JIRA-1520 Removed the datasource reference from web.xml to fix java naming lookup issue
d8085e0 JIRA-1569 fix filter
9641af1 JIRA-1569 displaying MR info
ecb3b3c JIRA-1569 commit
002820d JIRA-1569 include statuses and dates in the response
7b912c8 JIRA-1569 translate SP to ibatis
9de1c77 JIRA-3107 : Put a condition for userid (only for IVR reqeust) to avoid concurrent login session check.
e78716c JIRA-3181 - Mass Reformat and removal of Imports
2907ffc JIRA-3057 Auto accept WS Changes.                &lt;&lt;&lt;&lt;&lt;---HERE!!!!!
212379a JIRA-3057 Auto Accept changes.
2f79bbc JIRA-76 MP Payment Acceptance with fixed Acceptance type
842c02f JIRA-59 Multiple Payee dashboard changes
3552c15 JIRA-3056 Auto Accept Changes in request response
f03d150 Merge pull request #25 in JIRA/My from release/digitalStarts to feature/RealTimeStars
4c9a7d6 JIRA-2274 Added blah, blah in the correct position and rererred the right package name.
288eb2b JIRA-2274 - Update RTP Payments in Transaction Staging
9dfdf7c JIRA-2272, JIRA-51 - Initial commit - Fetch CP RTP value and RTP Routing number Validation
a16ce9a JIRA-2378 - Settings file to build web service
</code></pre>

<p>But, I do a checkout (which I marked as HERE above): </p>

<pre><code>$get checkout 2907ffc 
</code></pre>

<p>And now I get a different history: </p>

<pre><code>$ git log --oneline
2907ffc JIRA-3057 Auto accept WS Changes.
212379a JIRA-3057 Auto Accept changes.
3552c15 JIRA-3056 Auto Accept Changes in request response
f03d150 Merge pull request #25 in CQP3/consumer-portal-webservice from release/digitalClearXChangePhase2 to feature/RealTimePayments
4c9a7d6 JIRA-2274 Added blah, blah in the correct position and rererred the right package name.
288eb2b JIRA-2274 - Update RTP Payments in Transaction Staging
</code></pre>

<p>These 2 commits have disappeared from the history: .</p>

<pre><code>2f79bbc JIRA-76 MP Payment Acceptance with fixed Acceptance type
842c02f JIRA-59 Multiple Payee dashboard changes
</code></pre>

<p>I thought I understood git fairly well, but this has me very confused. </p>
","1","3910384","",""
"11225760","1395106","2012-06-27 12:04:20","1","88","<git><git-checkout><git-add>","when add a file to staged area, does git save the directory info?","<p>I am curious about git add action,
so I do some test.</p>

<p>create a index</p>

<pre><code>1. git init
2. mkdir mydir
3. echo ""hello"" &gt; mydir/hello
4. find .git/objects  ==&gt; nothing 
5. git add .
6. find .git/objects ==&gt; only find one file ,by cat-file,  I am sure it is hello 
</code></pre>

<p>do some change</p>

<pre><code>7. rm mydir/hello
</code></pre>

<p>get the file back</p>

<pre><code>8. git checkout mydir/hello
9. ls mydir/hello ==&gt; hello is back
</code></pre>

<p>My doubt is:
when I do <code>'git add .'</code>,there create only one blob, and not create a tree to record the direcoty 'mydir'. So,how could <code>git checkout mydir/hello</code> can find the blob ?</p>
","3","1395106","",""
"29133146","2565958","2015-03-18 21:34:14","2","46","<git><config><git-checkout>","Reason I have to fix git remote for new branches","<p>I have already found at least 3 different ways to fix this git problem, so that is not what this question is.  First, the problem:</p>

<p>I have a repo cloned from our gitlab server to my laptop.  I made changes in my master branch, ran ""git checkout -b newBranchName"", and with git gui, committed and pushed.  But ""git pull"" complains ""There is no tracking information for the current branch. ...""  It's true.  The problem is that .git/config indeed has no entry for my newBranchName.  But I think that it should.</p>

<p>While git is highly generalized to work with N remotes and all, it makes some assumptions, too.  The config file shows several variables with default (assumed) values, and I like them all.  But I want it to also assume that if I have only one remote in my config file, for master, then that's the same remote for any new branches I make with ""checkout -b"".  If it's ever an incorrect assumption, I can fix it.  I just don't want to HAVE to fix new branches every time.</p>

<p>So really, I have two questions.  One, why does git make no assumption about remote for my new branches?  Two, am I doing something wrong when I create new branches?</p>
","3","2565958","",""
"29146968","881945","2015-03-19 14:16:38","2","460","<git><git-merge><git-checkout>","git checkout --merge <tree-ish> -- <paths> not working as expected","<p>When I try to merge my working tree changes to a file with the ones at <code>tree-ish</code> by checking its path out the former changes are overwritten with the latter changes.</p>

<p>I did not expect this behavior. Instead I would expect Git to replace the file content with conflict markers displayed in the <em>default</em>, <em>merge</em> or <em>diff3</em> style depending on whether the <code>--merge</code>, <code>--conflict=merge</code> or <code>--conflict=diff3</code> option was given to <code>git checkout</code>.</p>

<p>Given the following use case:</p>

<pre><code>git init
echo foo &gt; foobar
git add foobar
git commit --message=blabla foobar
echo bar &gt; foobar
git checkout --conflict=diff3 HEAD -- foobar
</code></pre>

<p>I lose the local changes made with <code>echo bar &gt; foobar</code>.</p>

<p>Also why does the manual page <code>git-checkout(1)</code> mention the <code>-m</code> and <code>--conflict=&lt;style&gt;</code> options in the synopsis <code>git checkout [-f|--ours|--theirs|-m|--conflict=&lt;style&gt;] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…</code>? What is the purpose of these two options?</p>

<p>I use git version 1.9.4.msysgit.2 on Microsoft Windows 7.</p>
","3","881945","0","0"
"11244162","1488465","2012-06-28 12:00:29","2","925","<git><git-checkout><git-worktree>","About git-new-workdir branches syncing","<p>I am using git-new-workdir script to manage my branches but the branch apparently do not synchronize automatically. I have a repo with three branches (master, branchA and branchB). First, I cloned the repo with:</p>

<pre><code>git clone git://myreposite.com/project.git
</code></pre>

<p>Second, I use git-new-workdir to split my branches</p>

<pre><code>git-new-workdir project branchA branchA
git-new-workdir project branchB branchB
</code></pre>

<p>Now I have project, branchA and branchB directories.
Suppose someone else also had cloned my repo from other computer and checked out branchA, modified a file, committed and issued a <code>git push --all</code>.</p>

<p>Thus, now I have to updated my branchA. So, I issue a <code>git pull --all</code> from master branch directory and I would expect that all my branches got updated instantly, but they didn't. When check the modified file on branchA directory nothing changed.</p>

<p>What am doing wrong?</p>
","1","1488465","0","0"
"11247432","1442534","2012-06-28 15:00:09","4","5150","<git><git-checkout><filepath>","error: pathspec 'temp/versionX' did not match any file(s) known to git","<p>In git, I'm trying to check out versions of a specific repository into a version folder inside of a temp folder, but when I do</p>

<pre><code>git checkout master~X C:/file/path/temp/versionX
</code></pre>

<p>I get the error</p>

<pre><code>error: pathspec 'temp/versionX' did not match any file(s) known to git.
</code></pre>

<p>What's causing the problem and how do I fix it?</p>
","2","1442534","",""
"11258599","72174","2012-06-29 08:41:32","38","24997","<git><git-checkout><git-archive>","git archive fatal: Operation not supported by protocol","<p>I'm trying to checkout part of remote git repository. As recommended <a href=""https://stackoverflow.com/questions/160608/how-to-do-a-git-export-like-svn-export"">here</a>, with help of command </p>

<pre><code>git archive --format=zip --remote=http://path_to_repository
</code></pre>

<p>But I'm getting error message:</p>

<pre><code>fatal: Operation not supported by protocol.
Unexpected end of command stream
</code></pre>

<p>Git is not supporting this operation with http protocol? Thats a problem of hosting environment or git itself? Any directions would help, thanks.</p>
","0","72174","0","0"
"11715379","187812","2012-07-30 04:24:35","5","490","<git><github><push><git-checkout>","Is it safe to checkout a new git branch during the push of a current branch?","<p>For example, if I am pushing <code>master</code> to a remote repo and it's taking a while, is it safe to open another terminal and do <code>git checkout secondbranch</code> so I can start working again? Is the original process doing the push going to be disrupted by the new checkout?</p>
","0","187812","",""
"29448266","2353731","2015-04-04 15:42:16","0","60","<git><git-merge><git-checkout>","Tell git to always pull the remote version of a file in case of conflict","<p>I want to tell git that in case of conflict on a merge on a specific file he has to always use the remote version of the file.</p>

<p>The only thing I found was how to always keep the local version of the file:
<a href=""https://stackoverflow.com/questions/928646/how-do-i-tell-git-to-always-select-my-local-version-for-conflicted-merges-on-a-s"">How do I tell git to always select my local version for conflicted merges on a specific file?</a>
and <a href=""https://stackoverflow.com/questions/5465122/gitattributes-individual-merge-strategy-for-a-file"">.gitattributes &amp; individual merge strategy for a file</a> </p>

<p>thanks</p>
","0","2353731","",""
"11834406","428705","2012-08-06 19:13:59","8","1250","<git><git-checkout><git-describe>","GIT checking out code from output of ""git describe""","<p>I am thinking about using <code>git describe</code> to generate automated version numbers. As suggest <a href=""https://stackoverflow.com/questions/4120001/what-is-the-git-equivalent-for-revision-number"">here</a>. </p>

<p>My question is that if I get o/p of <code>git describe</code> as <code>v2.0-64-g835c907</code>,
how can I checkout that particular revision number using git in future?</p>
","0","428705","",""
"11894217","220949","2012-08-10 01:19:17","5","111","<git><git-checkout><git-add>","is there a command in GIT that has the options of ""git add -p"" and ""git checkout -p"" COMBINED?","<p>I would like to issue <em>one</em> command that lets me interactively either ADD a hunk, DISCARD a hunk or leave the hunk unstaged...</p>

<p>Actually as I know of there is only:</p>

<p><code>git add -p</code>: ADDs hunks interactively (or leave unstaged) <br>
<code>git checkout -p</code>: DISCARDS hunks interactively  (or leave unstaged)</p>

<p>Is there a command in GIT that has the options of ""git add -p"" and ""git checkout -p"" COMBINED ? </p>

<p>The answer to this question provided <a href=""https://stackoverflow.com/questions/5851461/better-git-add-p"">here</a> is not at all satisfactory : (</p>
","5","220949","0","0"
"11923635","429400","2012-08-12 16:07:18","35","17429","<git><git-checkout>","git tries to delete a directory on checkout","<p>Whenever I switch between my branch (Li) to the master branch I get the following message:</p>

<blockquote>
  <p>Deletion of directory 'sys/console/api' failed. Should I try again? (y/n)</p>
</blockquote>

<p>Anyone knows how do I get rid of this message? I think that in the past I tried to delete this directory by mistake and now I'm stuck with this error message.</p>
","0","429400","0","0"
"29593744","","2015-04-12 19:34:39","1","49","<git><git-checkout><git-stash><git-add><git-patch>","Can git break up changes by default?","<p>I like to use the <code>-p</code> flag on several git commands, such as <code>add</code>, <code>reset</code>, <code>checkout</code>, and <code>stash</code>. But git groups somewhat contiguous changes together in the same hunk. I know that <code>s</code> breaks up the changes but is there another option I could pass to have git break them up by default wherever possible?</p>
","0","","",""
"12043807","569976","2012-08-20 19:23:56","2","6820","<git><github><git-checkout>","git checkout origin/master doesn't work?","<p>I type in <code>git checkout origin/master</code> at the command line and at first am giving the following prompt:</p>

<pre><code>Deletion of directory 'dirname1/dirname2' failed. Should I try again? (y/n)
</code></pre>

<p>It fails pretty much every time I try so I wind up hitting n.  Then I get this:</p>

<pre><code>You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at c2850cd... - change description
</code></pre>

<p>I do <code>git branch</code> after that and here's what I see:</p>

<pre><code>* (no branch)
  remote/branchname
  master
</code></pre>

<p>Why is it doing that?  How do I make a commit to origin/master in light of this?</p>
","4","569976","",""
"30187624","4882274","2015-05-12 10:04:32","2","12003","<eclipse><git><git-pull><git-checkout>","Checkout conflict with files git pull","<p>Yesterday I made a pull in Eclipse from my team repository and it worked perfectly. But today I have tried to pull and the following message appears:</p>

<pre><code>Checkout conflict with files: 

.....(Here is my project and the window that is affected)

org.eclipse.jgit.api.errors.ChechoutConflictException
</code></pre>

<p>One of my partners has made changes but not at the same time that me. How can I solve it?</p>
","0","4882274","",""
"12572583","617937","2012-09-24 20:41:16","3","1141","<git><git-checkout><git-fetch>","Does git checkout automatically fetch first?","<p>Say I have a command that looks as follows:</p>

<p><code>git checkout -b my-branch origin/dev</code></p>

<p>Assuming I have already fetched from <code>origin</code> before, so I know it has a <code>dev</code> branch, do I <strong>need</strong> to run <code>git fetch</code> before <code>git checkout</code>, or will <code>checkout</code> always fetch up to the latest commit in the remote branch?</p>
","0","617937","0","0"
"12596767","1542339","2012-09-26 07:35:03","2","13884","<git><version-control><git-branch><git-diff><git-checkout>","why i cannot checkout another git branch?","<pre><code>$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/lab_master
  remotes/origin/master

$ git checkout lab_master
error: Your local changes to the following files would be overwritten by checkou                                                                                                                           t:
        **project.properties**
Please, commit your changes or stash them before you can switch branches.
Aborting
</code></pre>

<p>why i just failed to checkout lab_master branch?</p>

<p>another question: why i cannot compare current file with the file in another branch?</p>

<pre><code>$ git diff project.properties -b lab_master
fatal: bad flag '-b' used after filename
</code></pre>
","0","1542339","0","0"
"18900774","1720085","2013-09-19 16:59:04","10","17140","<git><svn><git-checkout><svn-checkout>","Equivalent of ""svn checkout"" for git?","<p>What git command should I use to be equivalent to <code>svn checkout</code>?</p>

<pre><code>git checkout(?)
</code></pre>

<p>Many thanks!</p>
","4","1720085","0","0"
"31631726","66814","2015-07-25 22:26:13","2","990","<git><git-remote><git-checkout>","How does git deal with identical branch names from two different remote repo?","<p>If I set up two remote using <strong>git remote add</strong> for a repo, and the two repo contain a branch with the same name.  How does git know which branch of which repo I intend to use when I switch to it using <strong>git checkout</strong>?</p>
","0","66814","",""
"35407024","1155881","2016-02-15 10:34:00","0","79","<git><git-rebase><git-stash><git-checkout>","git rebase: weird stash behaviour","<p>I did a <code>git rebase -i</code>, selected one commit for edit and git stopped at that commit.   </p>

<p>I now try to <strong>checkout</strong> one patch from the <strong>stash</strong> with <code>git checkout -p stash</code>.</p>

<p>But this gives me weird old stash contents while <code>git stash show -p</code> gives me the expected patches from which I want to checkout one.  </p>

<p>What happens here and how can I checkout my hunk from the stash?<br>
Let me know if I shall provide more info.</p>
","2","1155881","",""
"3163325","48625","2010-07-02 05:03:02","3","1322","<git><git-checkout>","Confusion about git checkout","<p>I am confused about a behavior of git checkout. The <a href=""http://git-scm.com/docs/git-checkout"" rel=""nofollow noreferrer"">documentation of git checkout</a> says:</p>
<blockquote>
<p>--merge</p>
<p><strong>When switching branches, if you have local modifications to one or
more files that are different between
the current branch and the branch to
which you are switching, the command
refuses to switch branches in order to
preserve your modifications in
context.</strong> However, with this option, a
three-way merge between the current
branch, your working tree contents,
and the new branch is done, and you
will be on the new branch.</p>
</blockquote>
<p>But, I have done a small test which is not behaving as said in the bold part. That is:</p>
<ol>
<li>I create a git repo</li>
<li>create a directory and a file with some conent and commit it in master branch.</li>
<li>Create another branch &quot;testbranch&quot;</li>
<li>change the content of the file in master. But did not commit.</li>
<li>switched to &quot;testbranch&quot;.</li>
<li>Now the changed and uncommitted changes from master branch come to testbranch!</li>
</ol>
<p>Wasn't it supposed to fail, if I have some local changes and wanted to switch to a branch?</p>
<p>Below is the list of commands to reproduce this behavior:</p>
<pre><code>sabya@SABYA-PC e:/test/merge_test
$ git init
Initialized empty Git repository in E:/test/merge_test/.git/

sabya@SABYA-PC e:/test/merge_test (master)
$ mkdir src

sabya@SABYA-PC e:/test/merge_test (master)
$ echo &quot;Hello World&quot; &gt; src/a.txt

sabya@SABYA-PC e:/test/merge_test (master)
$ cat src/a.txt
Hello World

sabya@SABYA-PC e:/test/merge_test (master)
$ git add src

sabya@SABYA-PC e:/test/merge_test (master)
$ git commit -m &quot;say hello&quot;
[master (root-commit) 939f6e0] say hello
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 src/a.txt

sabya@SABYA-PC e:/test/merge_test (master)
$ git branch testbranch

sabya@SABYA-PC e:/test/merge_test (master)
$ echo &quot;Changed content&quot; &gt; src/a.txt

sabya@SABYA-PC e:/test/merge_test (master)
$ git status
# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   src/a.txt
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

sabya@SABYA-PC e:/test/merge_test (master)
$ git checkout testbranch
M       src/a.txt
Switched to branch 'testbranch'

sabya@SABYA-PC e:/test/merge_test (testbranch)
$ cat src/a.txt
Changed content
</code></pre>
<p>Can anyone explain this?</p>
<p>Below is my git version output:</p>
<pre><code>sabya@SABYA-PC e:/test/merge_test (testbranch)
$ git --version
git version 1.7.0.2.msysgit.0
  
</code></pre>
","0","48625","0","0"
"31688157","1778409","2015-07-28 22:24:23","0","104","<git><git-branch><git-pull><git-checkout><bitbucket-server>","how to check out against a remote git repository from command line","<p>I am having trouble understanding exactly how I need to create a  local feature branch to put customizations into.  I have consulted some online resources which only confuse me  further.</p>

<p>I have created the remote branch via stash called feature/mycustomization for people to create pull requests against.</p>

<p>Now from command line do I have to do a git checkout -b  to create   a local branch  from which to push the changes to feature/mycustomization?  Also, does the name of my local branch have to match up with the remote branch due to convention?</p>

<p>Or is there a command which pulls the code from the remote branch feature/mycustomization created in step one and automatically creates the local branch?</p>

<p>I would appreciate some step by step instructions if possible.</p>

<p>Cheers,
Bob</p>
","0","1778409","",""
"59892514","3237814","2020-01-24 08:04:22","1","1372","<git><git-checkout><git-detached-head>","What is difference between git checkout remotes/origin/branch and git checkout branch?","<p>When I execute </p>

<pre><code>git checkout remotes/origin/test_branch
</code></pre>

<p>my HEAD goes in a <em>detached state</em>. Below is output:</p>

<pre><code>C:\..\git_test&gt;git checkout remotes/origin/test_branch
Note: checking out 'remotes/origin/test_branch'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &lt;new-branch-name&gt;

HEAD is now at 4590fa2 Test branch commit
M       src/test/resources/**

C:\..\git_test&gt;git branch -a
* (HEAD detached at origin/test_branch)
  test_branch
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/test_branch
  remotes/origin/master

</code></pre>

<p>And if I execute </p>

<pre><code>git checkout test_branch
</code></pre>

<p>on the same branch then I am no more in a detached state.</p>

<pre><code>C:\..\git_test&gt;git checkout test_branch
Switched to branch 'test_branch'
M       src/test/resources/**
Your branch is up to date with 'origin/test_branch'.

C:\..\git_test&gt;git branch -a
* test_branch
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/test_branch
  remotes/origin/master
</code></pre>

<p>Please can anyone explain what is the difference and why it is going to the detached state while the branch is same?</p>
","3","3237814","",""
"69715385","5339258","2021-10-25 22:18:26","0","187","<git><github><branching-and-merging><git-checkout>","git checkout master isn't reverting my working directory, it's still showing changes from the branch","<p>I have my git master branch, then i created a new branch to work on a new, long-term feature, and i've added and committed changes to this new branch, and pushed them to github.  I then pulled these changes from the git repository onto my DEV box from the new branch.  Now i want to <code>git checkout master</code> so i can add/commit a one-line hotfix. But on my DEV box (and in my working directory) when i <code>git checkout master</code>, the files in the file-system still reflect the changes i made on the feature branch.  I thought by checking out the master, it would revert my working directory (and the directory on DEV) back to the way it is in the master branch, but it doesn't appear to be doing that.  I have verified in GitHub that the new-feature changes are in the new branch, and i've verified thru GitHub that the master does NOT have those changes and is the way i had left it.</p>
<p>Is there another step (other than git checkout master) i must make to change the files on the DEV box and my working directory to reflect what is in the master branch?  i have also tried <code>git pull origin master</code>, with no luck.</p>
<p>When i do <code>git status</code>, it says i'm on master, and it also says &quot;Your branch is ahead of 'origin/master' by 12 commits&quot;.</p>
<p>I've been using this website and followed it's commands:
<a href=""https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"" rel=""nofollow noreferrer"">https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging</a>
...but it doesn't seem to be reverting my working directory to the way it was before my feature commits.</p>
<p>any help is much appreciated, thanks.</p>
","1","5339258","",""
"48823520","2396502","2018-02-16 09:20:42","4","14232","<git><version-control><git-branch><git-checkout>","git checkout to a branch takes long time","<p>I am on Ubuntu 17.10 and I am using git (version 2.14.1). Whenever I create a branch from master and try to checkout to it (or to the master from it), it takes a whole lot of time, around few minutes, sometimes nearly 10 minutes. True, that I have a few GBs of data, but as far as I understand, the whole data doesn't actually get copied and instead only the changes are saved. What then could be the issue behind this? </p>
","5","2396502","0","0"
"35846772","2818245","2016-03-07 14:53:21","0","146","<git><git-branch><git-checkout>","Switch git branch while keeping current branch in conflicted state","<p>I have a branch <code>master</code>. I created a new branch <code>feature</code>, made some changes to its files <code>fileA</code> and <code>fileB</code>. Meanwhile some changes were made to <code>master</code> also in the same files <code>fileA</code> and <code>fileB</code>. Now I merged <code>master</code> into <code>feature</code>. It shows conflicts in file <code>fileA</code> and <code>fileB</code>. Let's suppose, Now I decide to keep the feature branch in the same conflicted state and want to move to master. </p>

<p><code>git checkout master</code> gives an error saying below:</p>

<pre><code>fileA: needs merge

fileB: needs merge

error: you need to resolve your current index first
</code></pre>

<p>How may I switch to <code>master</code> while keeping <code>feature</code> as it is.</p>

<p><code>EDIT</code>   Basically what happened is, I merged from master and some conflicts occurred which made my changes on feature useless. So I wanted to go back to master and cut out a new branch to work on the feature. At the same time, I dont want my earlier feature branch to be removed as it has some code that I may have to write again, hence I want to keep it to refer it as and when needed.</p>
","0","2818245","",""
"3639342","260127","2010-09-03 20:21:43","518","165401","<git><git-checkout><git-reset>","What's the difference between ""git reset"" and ""git checkout""?","<p>I've always thought of <code>git reset</code> and <code>git checkout</code> as the same, in the sense that both bring the project back to a specific commit. However, I feel they can't be exactly the same, as that would be redundant. What is the actual difference between the two? I'm a bit confused, as the svn only has <code>svn co</code> to revert the commit. </p>

<h3>ADDED</h3>

<p>VonC and Charles explained the differences between <code>git reset</code> and <code>git checkout</code> really well. My current understanding is that <code>git reset</code> reverts all of the changes back to a specific commit, whereas <code>git checkout</code> more or less prepares for a branch. I found the following two diagrams quite useful in coming to this understanding:</p>

<p><img src=""https://i.stack.imgur.com/C4BCo.png"" alt=""http://a.imageshack.us/img651/1559/86421927.png"">
<img src=""https://i.stack.imgur.com/Tiv4H.png"" alt=""http://a.imageshack.us/img801/1986/resetr.png""></p>

<h3>ADDED 3</h3>

<p>From <a href=""http://think-like-a-git.net/sections/rebase-from-the-ground-up/using-git-cherry-pick-to-simulate-git-rebase.html"" rel=""noreferrer"">http://think-like-a-git.net/sections/rebase-from-the-ground-up/using-git-cherry-pick-to-simulate-git-rebase.html</a>, checkout and reset can emulate the rebase. </p>

<p><a href=""https://i.stack.imgur.com/EYijy.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/EYijy.png"" alt=""enter image description here""></a></p>

<pre><code>git checkout bar 
git reset --hard newbar 
git branch -d newbar 
</code></pre>

<p><a href=""https://i.stack.imgur.com/6F3ZK.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6F3ZK.png"" alt=""enter image description here""></a></p>
","6","260127","0","0"
"35862068","4684797","2016-03-08 08:05:37","0","79","<git><commit><git-checkout>","command git checkout deleted a few commits","<p>I used the command <code>git checkout 1234567</code> to view an old commit. 
Directly afterwards I checked another commit <code>git checkout 1234568</code> then I checked to master again <code>git checkout master</code>. But now my website is on a old version. </p>

<p>After I executed <code>git log --oneline</code> I realised that my two latest commits are lost! Why did this happen and is it possible to restore them?</p>

<p>Is it because I have to checkout to master again everytime before I checkout to another commit?</p>
","4","4684797","",""
"41300052","5060626","2016-12-23 10:54:42","3","345","<git><merge><commit><git-branch><git-checkout>","git - How to checkout all changed files between two commits","<p>I have a branch A and a branch B. Branch B is three commits ahead of A.</p>

<p>I can use <code>git diff</code> to list the changed files between A and B.</p>

<p>But my question is: How can I checkout all those changed files between A and B while I am on A, then commit them altogether into A as one commit?</p>
","0","5060626","",""
"40639881","910118","2016-11-16 18:44:08","1","169","<git><git-checkout>","Check git current file version and how to handle removed files","<p>I have a git repository, and its log history is shown below.</p>

<pre><code>../mypapers/Doc_thesis$ git log 
commit 5bbb3681e1630a423f143a2e97350f463669c214
Author: ShijieXu &lt;shijiexu@yahoo.com&gt;
Date:   Wed Nov 16 14:10:16 2016 -0400

    Revist GraphJIT

commit e8ccd771208c5d328936422d60dcae2d3850e3a1
Author: ShijieXu &lt;shijiexu@yahoo.com&gt;
Date:   Tue Nov 8 15:04:22 2016 -0400

    version

commit c8f2313c324cd0a07e67eb07f060d319bb4faa69
Author: ShijieXu &lt;shijiexu@yahoo.com&gt;
Date:   Wed Apr 13 11:03:53 2016 -0300

    another chapter
</code></pre>

<p>My questions are: </p>

<ol>
<li>How to check a file's current version? For example, I normally switch file version using <code>git checkout c8f2313c324cd0a07e67eb07f060d319bb4faa69</code>, so after several revision changes, is there any way to check out which revision the current file is? </li>
<li><p>How to handle some deleted files when changing the commit number. For example, The commit <code>e8ccd771208c5d328936422d60dcae2d3850e3a1</code> contains deleting a number of files. After checking out to this commit and then back to the <code>5bbb3681e1630a423f143a2e97350f463669c214</code>, <code>git status</code> will show up some new files, which have all been removed. </p>

<pre><code>git status 
On branch final_thesis
Changes to be committed:
(use ""git reset HEAD &lt;file&gt;..."" to unstage)
new file:   #introduction.tex#
new file:   UNBThesis2-1101.tex
new file:   UNBThesis2_0430.pdf
new file:   UNBThesis2_bak.tex
</code></pre></li>
</ol>

<p>Thanks</p>
","2","910118","0","0"
"40647288","1931422","2016-11-17 05:25:17","0","1330","<git><bitbucket><conflict><git-checkout>","git go back to the state of a file before conflict","<p>I had the merge conflict while pulling from another branch and used ""Use mine"" instead of ""Use theirs"" mistakenly for a single file. the other conflicted files were taken good care. </p>

<p>Now i want to move to the old state of this file (before conflict) and pull again from the branch to create the conflict and select the right option.</p>

<p>I have used checkout <em>git checkout ""commit#"" PathToFile</em> which rightly retrieves the file to the state it was in (before the conflict), but now when i pull from other branch the conflict is not there.</p>
","0","1931422","",""
"2840816","135414","2010-05-15 16:18:53","203","134758","<git><git-stash><git-checkout>","git stash blunder: git stash pop and ended up with merge conflicts","<p>I did a <code>git stash pop</code> and ended up with merge conflicts. I removed the files from the file system and did a <code>git checkout</code> as shown below, but it thinks the files are still unmerged. I then tried replacing the files and doing a <code>git checkout</code> again and same result. I event tried forcing it with <code>-f</code> flag. Any help would be appreciated!</p>

<pre><code>chirag-patels-macbook-pro:haloror patelc75$ git status
app/views/layouts/_choose_patient.html.erb: needs merge
app/views/layouts/_links.html.erb: needs merge
# On branch prod-temp
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   db/schema.rb
#
# Changed but not updated:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       unmerged:   app/views/layouts/_choose_patient.html.erb
#       unmerged:   app/views/layouts/_links.html.erb

chirag-patels-macbook-pro:haloror patelc75$ git checkout app/views/layouts/_choose_patient.html.erb
error: path 'app/views/layouts/_choose_patient.html.erb' is unmerged
chirag-patels-macbook-pro:haloror patelc75$ git checkout -f app/views/layouts/_choose_patient.html.erb
warning: path 'app/views/layouts/_choose_patient.html.erb' is unmerged
</code></pre>
","1","135414","0","0"
"59621764","8496110","2020-01-07 03:20:59","0","489","<git><github><pull-request><git-checkout><git-remote>","git checkout a pull request branch on your own fork","<p>We have this original repo called <code>origin</code> that all of us fork from and make changes.</p>

<p>I have a fork of this original repo called <code>fork1</code> my friend has a fork of this original repo called <code>fork2</code>.</p>

<p>Today, he made changes on <code>fork2</code> on branch <code>feature</code> and wanted to open a pull request to merge the branch <code>feature</code> to <code>origin</code>
To approve his pull request, I wanted to test out <code>feature</code> on my <code>fork1</code>. How should I do it?</p>
","2","8496110","0","0"
"40878166","6595857","2016-11-30 00:19:17","3","2162","<git><alias><git-pull><git-checkout>","git alias including checkout and pull + rebase with params","<p>What am I doing wrong here? 
Suppose I'm in branch ""one"" and wanna switch to master and execute a pull --rebase.</p>

<p>The alias I used was:</p>

<pre><code>git config --global alias.cpr ""!git checkout $1 &amp;&amp; git pull --rebase $2 $1""
</code></pre>

<p>Thanks</p>
","2","6595857","",""
"42038305","6260870","2017-02-04 08:40:39","2","1939","<git><github><tags><git-clone><git-checkout>","git clone a specific release from a forked git branch","<p>I want to clone a specific version of a forked git repository, but seem to be misunderstanding why I am getting what I am getting.<br>
I want to pull v2.43.0 from <a href=""https://github.com/giggls/openstreetmap-carto-de"" rel=""nofollow noreferrer"">https://github.com/giggls/openstreetmap-carto-de</a>, </p>

<p>1.) which in theory should also have ""hstore-only.style"" (but does not if you click on v2.43.0). It seems to have it only under master. Why is that?</p>

<p>2.) If I do </p>

<pre><code>$ git clone git://github.com/giggls/openstreetmap-carto-de.git
</code></pre>

<p>This gives me the master, and I see all files including ""hstore-only.style""</p>

<pre><code>$ cd openstreetmap-carto-de
$ git tag -l
</code></pre>

<p>this already gives me v2.9.1, which is confusing. Because there the highest tag is 2.43.0. Where does the 2.9 come from?</p>

<p>3.) and with</p>

<pre><code>$ git checkout v2.43.0
</code></pre>

<p>I would get the reduced file set without <code>hstore-only.style</code>.<br>
Is there a way I can get the 2.43 with that file?</p>
","0","6260870","0","0"
"3404936","188923","2010-08-04 11:10:49","284","230585","<git><git-checkout><git-tag>","Show which git tag you are on?","<p>I'm having trouble finding out which tag is currently checked out.</p>

<p>When I do:  </p>

<pre><code>git checkout tag1
git branch
</code></pre>

<p>I can't seem to find out which tag I'm on. It only logs:</p>

<pre><code>* (no branch)
master
</code></pre>

<p>Is it possible to find out which tags are checked out? In the above example, this would be <code>tag1</code>.</p>
","0","188923","0","0"
"22124870","1035279","2014-03-02 07:06:33","3","329","<git><github><git-branch><git-log><git-checkout>","How does git log work across branches?","<p>I'm using a github repository and it has a master branch and a demo branch. All was good and both the master version and the demo version of the code are in use (master on a staging site, and the demo on a demo site). A live site runs on a tagged commit.</p>

<p>While making changes, I messed something up which did not reveal itself for a while so I needed to start looking through old commits to see how I introduced the problem.</p>

<p>On Github I saw commits for the demo branch as follows:</p>

<pre><code>Changed logos to xxx ones
8c4a3eab22 Browse code 
pwhipp authored 3 days ago
Feb 04, 2014
Paul Whipp
Changed archetype age_default to default to zero (and set all null va… …
6e4c9e8864 Browse code 
pwhipp authored a month ago
Feb 03, 2014
Paul Whipp
Added demo.xxx allowed domain for RED
2f72e3b05a Browse code 
pwhipp authored a month ago
</code></pre>

<p>So on a local repo, pulled up to date,  I do ""git checkout 8c4a3eab22"". Then when I invoke git log locally, I see:</p>

<pre><code>(red)~/wk/red $ git status
# HEAD detached at 8c4a3ea
(red)~/wk/red $ git log
commit 8c4a3eab22dc2ce9708c9aae00751e558ae81dd3
Author: pwhipp &lt;paul.whipp@gmail.com&gt;
Date:   Thu Feb 27 10:55:21 2014 +1000

    Changed logos to xxx ones

commit 2f72e3b05a005738d77ed12be475634aadf76b49
Author: pwhipp &lt;paul.whipp@gmail.com&gt;
Date:   Mon Feb 3 10:58:08 2014 +1000

    Added demo.xxx allowed domain for RED
</code></pre>

<p>Why is 6e4c9e8864 not shown by git log? It exists (I can check it out) but the differences between it and 8c4a3eab22 seem far greater than those indicated when I browse 6e4c9e8864 on github so I'm thinking there may be other commits I'm not seeing.</p>

<p>Do I need to RTFM somewhere to understand how the commits are being reported in the log call across the different branches?</p>
","4","1035279","0","0"
"22233910","265932","2014-03-06 19:18:36","0","77","<git><git-checkout>","Git: How does git decide which files to delete during checkouts?","<p>One thing about Git that I'm trying to understand is how it deals with files which aren't tracked, or which <em>weren't</em> tracked but now are committed.</p>

<p>Here's an example:</p>

<pre><code>echo ""one"" &gt; one.txt
git add one.txt
git commit -m ""#1""
</code></pre>

<p>So, ""one.txt"" is in the first commit. Now, I'll create two more files, but only add <em>one</em> of them (and I'll tag this next commit as ""#2"" so that we can return to it):</p>

<pre><code>echo ""two"" &gt; two.txt
echo ""three"" &gt; three.txt
git add two.txt
git commit -m ""#2""
git tag ""#2""
</code></pre>

<p>So, ""two.txt"" is in the 2nd commit, and ""three.txt"" is just this extra file, hanging around. Then, I checkout HEAD~ and, sure enough, Git removes the file ""two.txt"", because that didn't exist back then...</p>

<pre><code>git checkout HEAD~
ls
___ one.txt three.txt
</code></pre>

<p>Okay.. back to the end of the branch, and only <em>add</em> the third file. So, we're only <em>tracking</em> it. <em>Then</em> let's step backward one commit...</p>

<pre><code>git checkout ""#2""
git add three.txt
git checkout HEAD~
ls
___ one.txt three.txt
</code></pre>

<p>Ummm... okay... so just <em>tracking</em> a file isn't enough to have Git manage whether it's there or not. So, we go to the end of the branch, again, and commit, then back up (twice, this time, to get back to commit #1) and what do we see?</p>

<pre><code>git checkout ""#2""
git commit -m ""#3""
git checkout HEAD~~
ls
___ one.txt
</code></pre>

<p>This time, Git has deleted the file ""three.txt"". So, my question is: Can someone describe just <em>how</em> Git decided to do that? It doesn't seem to be simply whether a filename appears in <em>any</em> tree object in the respository, because I can create a <em>new</em> three.txt (a filename which is being <em>tracked</em> and has a <em>committed</em> version in the respository, and then do more checkouts, and Git leaves it alone, again, like before.</p>

<p>Can someone explain how Git decides what is okay to <strong>delete</strong> when doing checkouts?</p>
","0","265932","",""
"66371749","3233393","2021-02-25 15:44:51","1","502","<git><powershell><git-checkout>","`git checkout branch -- .`, without overwriting existing files","<h3>Context</h3>
<p>I have a repository containing the development history for an application. The application is compiled on the fly from its source code to be used right after the repository has been cloned.</p>
<p>The application uses a couple of configuration files, which are declined in several configuration archetypes. For ease of deployment, I would like to store each archetype on a separate branch, and obtain both the application from <code>master</code> and the configuration from the selected branch after cloning.</p>
<p>The plain solution would be to base the configuration branches on <code>master</code>, but this requires regularly rebasing them all when <code>master</code> advances. I'm therefore trying out a solution with two separate git histories:</p>
<ul>
<li>The <code>master</code> branch contains the application's source code;</li>
<li>All <code>config/&lt;archetype&gt;</code> stem from a separate root (created through <code>git checkout --orphan</code>), and only contain the build script and their respective configurations.</li>
</ul>
<p>The build script must now retrieve all source code from <code>master</code> before building it, taking care not to overwrite the archetype configuration files with the default ones from <code>master</code>. Therefore...</p>
<h3>Question</h3>
<p>I need a variant of <code>git checkout &lt;branch&gt; -- .</code> that does <em>not</em> touch existing files, whatever their state (changed, unchanged, ignored, untracked...).</p>
<h3>Leads</h3>
<p>I have found <a href=""https://stackoverflow.com/a/43052910/3233393"">this</a> identical question which does have an answer (<code>git archive mybranch | tar x --skip-old-files</code>), however I'm encountering some issues:</p>
<ul>
<li>I'm using Powershell on Windows, which apparently provide a native <code>tar</code> command that does not have <code>--skip-old-files</code>;</li>
<li>Git's version of <code>tar</code> accepts the flag, but fails due to what I assume is a quirk in how Powershell's pipeline works (the same command run from Git Bash works):</li>
</ul>
<pre class=""lang-none prettyprint-override""><code>PS&gt; &amp;&quot;C:\Program Files\Git\bin\git.exe&quot; archive master | &amp;&quot;C:\Program Files\Git\usr\bin\tar.exe&quot; x --skip-old-files
/usr/bin/tar: Malformed extended header: missing newline
/usr/bin/tar: Substituting `.' for empty member name
/usr/bin/tar: Substituting `.' for empty member name
/usr/bin/tar: Skipping to next header
/usr/bin/tar: Exiting with failure status due to previous errors
</code></pre>
<p>In this environment, I would much prefer a solution which only uses Git.</p>
","4","3233393","0","0"
"30351845","117507","2015-05-20 13:56:11","1","1349","<git><git-checkout>","How to resolve pathspec not matching any file known to git when checking out a single, deleted file?","<p>I have a branch <code>feature</code> that has come off of <code>develop</code> and is ahead of it.<br>
A combination of <code>stash pop</code>s and <code>merge develop</code>s have resulted in a commit that includes a <code>rm</code> for particular file.</p>

<p>I'm trying to undo this delete by checking out the file from the commit before this delete with:</p>

<pre><code>name@machine ~/path/inside/the/repo/to/the/parent/dir
$ git checkout megalongshaofthecommitthatdeletedthefile^ -- filename.ext
</code></pre>

<p>but get</p>

<pre><code>error: pathspec 'filename.ext' did not match any file(s) know to git.
</code></pre>

<p>I've tried checking out files that haven't been deleted, but git is still refusing to check out the undeleted file.</p>

<p>How can I tell git where to get this file?</p>
","0","117507","",""
"30380720","4638428","2015-05-21 17:37:58","0","2799","<git><github><intellij-idea><git-checkout>","Intellij checkout from github","<p>I am using Intellij Idea Ultimate edition 14.0.3. my <strong>Git</strong> plugin tests successfully but when I create a new workspace and try to checkout my project using <strong>Github</strong> it gives me an error - </p>

<blockquote>
  <p>Service unavailable</p>
</blockquote>

<p>I have tried using both Auth Types - Password and Token, but looks like I am not connecting to the Github repository. I have double checked my user credentials and they are correct. My host name also follows the expected syntax :- </p>

<p><code>ssh://git@......git</code></p>

<p>When I test the Github connection, the error message is as under:</p>

<pre><code>Can't login: Can't get user info
Service Unavailable         
</code></pre>

<p>Is there an issue with my proxy? I am using the default Proxy settings.</p>
","9","4638428","",""
"30392969","674064","2015-05-22 09:22:04","14","6277","<git><git-branch><git-checkout><git-fetch>","fetch and checkout a remote git branch in just one command","<p>If</p>
<ul>
<li>I have local repo with a remote <code>$REMOTE</code> already set up</li>
<li>and a new branch <code>$BRANCH</code> exists on the remote repo that I haven't fetched, yet</li>
</ul>
<p>can I fetch that branch <strong>and</strong> check it out into a tracking local branch of the same name <strong>in a single command</strong>?</p>
<p>I can achieve the desired result in <em>two</em> commands either with</p>

<pre class=""lang-sh prettyprint-override""><code>git fetch $REMOTE $BRANCH
git checkout $BRANCH # or more explicitly git checkout -b $BRANCH $REMOTE/$BRANCH
</code></pre>
<p>or (inspired by <a href=""https://stackoverflow.com/a/19442557/674064"">this answer</a> to Question <a href=""https://stackoverflow.com/q/1783405/674064"">How do I check out a remote Git branch?</a>) with</p>
<pre class=""lang-sh prettyprint-override""><code>git fetch $REMOTE $BRANCH:$BRANCH
git branch --set-upstream-to=$BRANCH $BRANCH
</code></pre>
","3","674064","",""
"12822727","967164","2012-10-10 15:13:10","8","12304","<git><merge><git-checkout>","git checkout automatically merges local modifications","<p>I tried following commands on the shell   </p>

<pre><code>git init

echo ""test1"" &gt; test1.txt
git add test1.txt
git commit -a -m ""test1""

echo ""test2"" &gt;&gt; test1.txt

git branch test
git checkout test
</code></pre>

<p><code>text.txt</code> now contains:</p>

<pre><code>test1
test2
</code></pre>

<p>After checkout to branch <code>test</code> all local modifications from <code>master</code> get merged.</p>

<p>Why? </p>

<p>I expected that <code>git</code> refuses checkout to <code>test</code> because of the local changes. I expected that git asks for a commit or <code>stash</code> the local changes.</p>

<p>Edit:
I used a bash script to execute this commands. I get following output:</p>

<pre><code>r@r:/tmp/test$ ./createrepo 
Initialized empty Git repository in /tmp/test/.git/
[master (root-commit) 0407f5b] test1
 1 file changed, 1 insertion(+)
 create mode 100644 test1.txt
M       test1.txt
Switched to branch 'test'
</code></pre>
","1","967164","0","0"
"12850030","1739644","2012-10-11 23:17:20","36","13746","<git><git-clone><git-checkout>","git - getting ALL previous version of a specific file/folder","<p>I want to retrieve <strong>all</strong> previous version of a specific file in a git repository.</p>

<p>I see it is possible to get one specific version with the checkout command, but I want them all. And the git clone command with the depth option doesn't seem to allow me to clone subfolder (""not valid repository name"").</p>

<p>Do you know if it is possible and how?</p>

<p>Thank you</p>
","1","1739644","0","0"
"31058185","154480","2015-06-25 18:36:21","2","1432","<git><gitignore><ignore><msysgit><git-checkout>","How to prevent `git checkout` from checking out specific file types?","<p>We are creating a system in which users will be able to push arbitrary content to a shared Git repository. Our server will then checkout the repository and use the files.</p>

<p>To reduce risks, I'd like the <code>git checkout</code> command not to write any <code>.exe</code>, <code>.cmd</code>, <code>.bat</code> etc. on disk, and control which file types will be written.</p>

<p>How to configure Git (either using a configuration file, or a command-line argument) to ignore/skip specific file types at checkout?</p>

<p>Note that I'm running Git for Windows.</p>
","0","154480","0","0"
"47980997","9142201","2017-12-26 16:07:19","4","10211","<git><tags><jenkins-pipeline><git-checkout>","how to checkout specific tag/commit (git) with Jenkins pipeline","<p>till now I ran the follwoing command in jenkins:</p>

<pre><code>git branch: branch_nam, url: url, credentialsId: cred
</code></pre>

<p>and it works fine.
I've tried to add a way to checkout specific tag/commit so I've used the follwing command:</p>

<pre><code>checkout scm: [$class: 'GitSCM', userRemoteConfigs: [[url: url]], branches: [[name: tag]]], credentialsId: cred, poll: false
</code></pre>

<p>but I get the following error:</p>

<blockquote>
  <p>ERROR: Error cloning remote repo 'origin'
  hudson.plugins.git.GitException: Command ""git fetch --tags --progress
  <a href=""http://codefront:8080/tfs/DefaultCollection/some_folder"" rel=""nofollow noreferrer"">http://codefront:8080/tfs/DefaultCollection/some_folder</a>
  +refs/heads/<em>:refs/remotes/origin/</em>"" returned status code 128: stdout:  stderr: fatal: Authentication failed for
  <a href=""http://codefront:8080/tfs/DefaultCollection/some_folder"" rel=""nofollow noreferrer"">http://codefront:8080/tfs/DefaultCollection/some_folder</a></p>
</blockquote>

<p>what did I do wrong?
what is the difference between they way each command works?</p>

<p>Thanks in advance </p>
","2","9142201","",""
"13660292","1796891","2012-12-01 14:16:24","5","1515","<git><git-checkout><core.autocrlf><git-show>","How can I preserve line endings when I check out a single file to a different location with git?","<p>I want to checkout a single file from a git repository to a different location (other than working dir) and leave my current working dir as it is. And I want git to checkout my file with correct line endings.</p>

<p>I work on Windows but I have the same problem in Linux too.</p>

<p>Here is my scenario (Win7 64-Bit):</p>

<p>First I make sure that git converts CRLF to LF on commit and LF to CRLF on checkout: </p>

<pre><code>git config --local core.autocrlf true
</code></pre>

<p>Then I create a file called crlf.txt with CRLF line endings and commit it:</p>

<pre><code>git add crlf.txt
git commit -m ""File with crlf""
</code></pre>

<p>I change something in crlf.txt and commit it:</p>

<pre><code>git add crlf.txt
git commit -m ""Change in crlf.txt""
</code></pre>

<p>Now I want to get crlf.txt like it was on first commit:</p>

<pre><code>git show HEAD~1:crlf.txt &gt; ""/home/user/crlf_like_in_head-1.txt""
</code></pre>

<p>The file ""crlf_like_in_head-1.txt"" contains no CRLF but LF. I think git show is correct because it shows file content like it is in the repository (core.autocrlf=true converts CRLF to LF). I know that from documentation and I tried the same with core.autocrlf=false. With core.autocrlf=false ""crlf_like_in_head-1.txt"" contains CRLF. I know that I can easily convert LF to CRLF but I have to make sure that the result file is the same like it was checked out with git.</p>

<p>I know I can also checkout a single file with git checkout:</p>

<pre><code>git checkout HEAD~1 crlf.txt
</code></pre>

<p>But it overwrites the current content of crlf.txt in the working dir (also if crlf.txt was in a dirty state) and I can't checkout it to a different folder with git checkout. </p>
","0","1796891","0","0"
"13761682","1885174","2012-12-07 10:56:17","5","1580","<git><git-branch><gitignore><git-checkout>","gitignore - hide ignored files during checkout","<p>Here is my problem (via example steps):</p>

<ul>
<li>I have a Git repo with two different branches (branchA and branchB), which are currently identical.</li>
<li>Checkout to branchB and create a new file ""foo.txt"".</li>
<li>Add that file to "".gitignore"" of that branch, so that it is successfully ignored in branchB.</li>
<li>Create another file ""hello.txt"", stage it and commit it.</li>
<li>Checkout to branchA.</li>
<li>foo.txt appears in branchA, but hello.txt does not.</li>
</ul>

<p>Why does foo.txt appear in branchA and not get ""hidden"" like hello.txt does?</p>

<p>From my perspective this is a great annoyance and seems like a bug/feature request, but has Git been designed to act this way? I was surprised to find no other people complaining about this.</p>
","0","1885174","",""
"31378525","3240356","2015-07-13 08:21:57","5","2646","<git><git-checkout>","Checkout to branch when git clone --depth 1 doesn't work","<pre><code>set -e
cd /source

git clone --depth 1 https://github.com/named-data/ndn-cxx.git

pushd ./ndn-cxx

git checkout -b release-build ndn-cxx-0.3.3

./waf configure

./waf

./waf install

popd

rm -rf ./ndn-cxx
</code></pre>

<p>I am running the above mentioned script, but getting the error: ""Cloning 
into 'ndn-cxx'...
/source/ndn-cxx /source
fatal: Cannot update paths and switch to branch 'release-build' at the same time.
Did you intend to checkout 'ndn-cxx' which can not be resolved as commit?""</p>
","1","3240356","",""
"49187351","8361292","2018-03-09 05:46:34","1","296","<git><github><git-branch><git-checkout><vcs-checkout>","git checkout branch without checking files","<p>I have huge size of git repo in my local system with 10 different branches,
In those 10 branch the master repository is around 2 GB. when i switch from any branch1 to master branch, Git is trying to checkout all files in local system itself, how to reduce the time here.</p>

<pre><code>  [linux@linux_001 myrepo]$ time git checkout master
   Checking out files: 100% (25765/25765), done.
   Switched to branch 'master'

   real    0m55.617s
   user    0m35.597s
   sys     0m5.002s
</code></pre>

<p>Here i have reduce 55 sec</p>
","0","8361292","0","0"
"40675630","5309101","2016-11-18 11:11:10","2","1445","<git><gitignore><git-checkout>","Git is dropping my .gitignore files at checkout","<p>When I checkout branch A to branch B, some files in my .gitignore A are dropped if they're not in in .gitignore branch B.
I tried to edit my .git/info/exclude file, but I don't see the difference.
I tried with --assume-unchanged and --skip-worktree (keeping the files in .gitignore + make add -f) but I can't checkout if my file is modified. I really need to ignore my file ...
Have you got some tips to share ?</p>

<p>Thanks</p>
","2","5309101","0","0"
"48285463","9225276","2018-01-16 16:10:33","4","1007","<git><version-control><git-branch><git-checkout>","What would be the difference between `git branch -f master HEAD~` and `git reset HEAD~`?","<p>See title really. </p>

<p>Assuming we're already on the master branch:</p>

<p>What would be the difference between <code>git branch -f master HEAD~</code> and <code>git reset HEAD~</code>? </p>

<p>As far as I can tell both of these commands move the branch/HEAD pointers one up in the commit chain, but are there any other differences between these two worth noting?</p>
","4","9225276","",""
"48287523","7097494","2018-01-16 18:19:50","1","85","<android><ubuntu-16.04><git-checkout><openfl><haxeflixel>","What i must do that clone github repository, rollback to old version and update submodules on ubuntu 16.04?","<p>I need rebuild openfl/lime for android targeting, under ubuntu 16.04 x64. This allow me use for my haxeflixel project ""lime build android"" syntax, with android app version 26, which soon will be minimum allowed version, that publish in google playstore.</p>

<p>I need to know the steps for ubuntu 16.04  for clone github project , rollback to old relese and update submodules, like TortoiseGit for windows can do.</p>

<p>this is the github link
<a href=""https://github.com/openfl/lime"" rel=""nofollow noreferrer"">https://github.com/openfl/lime</a>
i need clone it and roll back version to 2.9.1, with update submodules.
The newest version of lime on github is 5.9.1.
But i only use sourcetree(windows) etc before, and don't know how solve my problem fast and nice.</p>

<p>OS ubuntu 16.04.3 x64</p>
","1","7097494","",""
"59646295","5946384","2020-01-08 12:51:15","3","1996","<github><azure-devops><azure-pipelines><git-checkout>","Checkout a private github in Azure pipeline job using service connection","<p>I want to checkout one of the private repo which is located in the same GitHub organization in one of the Azure pipeline stages, based on Azure documentation here is what I have tried:</p>

<p><a href=""https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/multi-repo-checkout?view=azure-devops"" rel=""nofollow noreferrer"">https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/multi-repo-checkout?view=azure-devops</a></p>

<pre><code>resources:
  repositories:
  - repository: pipelinetemplates
    type: github
    name: myorg/myrepotemplate
    endpoint: mygithub-serviceconnection
  - repository: myrepo
    type: github
    name: myorg/myrepo
    endpoint: mygithub-serviceconnection
stages:
- stage:
  jobs:
  - job: Build
    steps:
    - template: Template/build.yaml@pipelinetemplates ##It works fine
    pool:
       vmImage: 'ubuntu-latest'

- stage:
  jobs:
   - job: A
     pool:
       vmImage: 'ubuntu-latest'
     steps:
     - checkout: myrepo  ##Error-not found repo
     - task: PowerShell@2
       inputs:
        targetType: 'inline'
        script: |
          Write-Host ""Fetching files""
          ls
</code></pre>

<p>I get this error message in checkout part:</p>

<pre><code>Syncing repository: myorg/myrepo (github)
git version
git version 2.24.0
git lfs version
git-lfs/2.9.1 (GitHub; linux amd64; go 1.13.1)
git init ""/home/vsts/work/1/s""
Initialized empty Git repository in /home/vsts/work/1/s/.git/
git remote add origin https://github.com/myorg/myrepo
git config gc.auto 0
git config --get-all http.https://github.com/myorg/myrepo.extraheader
git config --get-all http.proxy
git -c http.extraheader=""AUTHORIZATION: basic ***"" fetch --force --tags --prune --progress --no-recurse-submodules origin
remote: Repository not found.
fatal: repository 'https://github.com/myorg/myrepo/' not found
##[warning]Git fetch failed with exit code 128, back off 5.284 seconds before retry.
</code></pre>

<p>Does anyone know what the problem is and how it can be fixed?</p>

<p>Updated:</p>

<p>I could see that the service-connection is using GitHub-InstallationToken (using azure pipelines app). And based on my last searches when we use GitHub token, then we can not use it more than one time for fetching repos under one pipeline however in this pipeline we are calling the GitHub service-connection two times. It looks like the token is valid for one time use. Is there any way to fix this issue?</p>
","11","5946384","",""
"3133449","293511","2010-06-28 14:54:13","212","73925","<git><git-rebase><git-merge><git-branch><git-checkout>","Why does git-rebase give me merge conflicts when all I'm doing is squashing commits?","<p>We have a Git repository with over 400 commits, the first couple dozen of which were a lot of trial-and-error. We want to clean up these commits by squashing many down into a single commit. Naturally, git-rebase seems the way to go. My problem is that it ends up with merge conflicts, and these conflicts are not easy to resolve. I don't understand why there should be any conflicts at all, since I'm just squashing commits (not deleting or rearranging). Very likely, this demonstrates that I'm not completely understanding how git-rebase does its squashes.</p>

<p>Here's a modified version of the scripts I'm using:</p>

<hr>

<p>repo_squash.sh (this is the script that is actually run):</p>

<hr>

<pre><code>rm -rf repo_squash
git clone repo repo_squash
cd repo_squash/
GIT_EDITOR=../repo_squash_helper.sh git rebase --strategy theirs -i bd6a09a484b8230d0810e6689cf08a24f26f287a
</code></pre>

<hr>

<p>repo_squash_helper.sh (this script is used only by repo_squash.sh):</p>

<hr>

<pre><code>if grep -q ""pick "" $1
then
#  cp $1 ../repo_squash_history.txt
#  emacs -nw $1
  sed -f ../repo_squash_list.txt &lt; $1 &gt; $1.tmp
  mv $1.tmp $1
else
  if grep -q ""initial import"" $1
  then
    cp ../repo_squash_new_message1.txt $1
  elif grep -q ""fixing bad import"" $1
  then
    cp ../repo_squash_new_message2.txt $1
  else
    emacs -nw $1
  fi
fi
</code></pre>

<hr>

<p>repo_squash_list.txt: (this file is used only by repo_squash_helper.sh)</p>

<hr>

<pre><code># Initial import
s/pick \(251a190\)/squash \1/g
# Leaving ""Needed subdir"" for now
# Fixing bad import
s/pick \(46c41d1\)/squash \1/g
s/pick \(5d7agf2\)/squash \1/g
s/pick \(3da63ed\)/squash \1/g
</code></pre>

<hr>

<p>I'll leave the ""new message"" contents to your imagination. Initially, I did this without the ""--strategy theirs"" option (i.e., using the default strategy, which if I understand the documentation correctly is recursive, but I'm not sure which recursive strategy is used), and it also didn't work. Also, I should point out that, using the commented out code in repo_squash_helper.sh, I saved off the original file that the sed script works on and ran the sed script against it to make sure it was doing what I wanted it to do (it was). Again, I don't even know why there <em>would</em> be a conflict, so it wouldn't seem to matter so much which strategy is used. Any advice or insight would be helpful, but mostly I just want to get this squashing working.</p>

<h2>Updated with extra information from discussion with Jefromi:</h2>

<p>Before working on our massive ""real"" repository, I used similar scripts on a test repository. It was a very simple repository and the test worked cleanly.</p>

<p>The message I get when it fails is:</p>

<pre><code>Finished one cherry-pick.
# Not currently on any branch.
nothing to commit (working directory clean)
Could not apply 66c45e2... Needed subdir
</code></pre>

<p>This is the first pick after the first squash commit. Running <code>git status</code> yields a clean working directory. If I then do a <code>git rebase --continue</code>, I get a very similar message after a few more commits. If I then do it again, I get another very similar message after a couple dozen commits. If I do it yet again, this time it goes through about a hundred commits, and yields this message:</p>

<pre><code>Automatic cherry-pick failed.  After resolving the conflicts,
mark the corrected paths with 'git add &lt;paths&gt;', and
run 'git rebase --continue'
Could not apply f1de3bc... Incremental
</code></pre>

<p>If I then run <code>git status</code>, I get:</p>

<pre><code># Not currently on any branch.
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
# modified:   repo/file_A.cpp
# modified:   repo/file_B.cpp
#
# Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
# both modified:      repo/file_X.cpp
#
# Changed but not updated:
#   (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
# deleted:    repo/file_Z.imp
</code></pre>

<p>The ""both modified"" bit sounds weird to me, since this was just the result of a pick. It's also worth noting that if I look at the ""conflict"", it boils down to a single line with one version beginning it with a [tab] character, and the other one with four spaces. This sounded like it might be an issue with how I've set up my config file, but there's nothing of the sort in it. (I did note that core.ignorecase is set to true, but evidently git-clone did that automatically. I'm not completely surprised by that considering that the original source was on a Windows machine.)</p>

<p>If I manually fix file_X.cpp, it then fails shortly afterward with another conflict, this time between a file (CMakeLists.txt) that one version thinks should exist and one version thinks shouldn't. If I fix this conflict by saying I do want this file (which I do), a few commits later I get another conflict (in this same file) where now there's some rather non-trivial changes. It's still only about 25% of the way through the conflicts.</p>

<p>I should also point out, since this might be very important, that this project started out in an svn repository. That initial history very likely was imported from that svn repository.</p>

<h2>Update #2:</h2>

<p>On a lark (influenced by Jefromi's comments), I decided to do the change my repo_squash.sh to be:</p>

<pre><code>rm -rf repo_squash
git clone repo repo_squash
cd repo_squash/
git rebase --strategy theirs -i bd6a09a484b8230d0810e6689cf08a24f26f287a
</code></pre>

<p>And then, I just accepted the original entries, as is. I.e., the ""rebase"" shouldn't have changed a thing. It ended up with the same results describe previously.</p>

<h2>Update #3:</h2>

<p>Alternatively, if I omit the strategy and replace the last command with:</p>

<pre><code>git rebase -i bd6a09a484b8230d0810e6689cf08a24f26f287a
</code></pre>

<p>I no longer get the ""nothing to commit"" rebase problems, but I'm still left with the other conflicts.</p>

<h2>Update with toy repository that recreates problem:</h2>

<p>test_squash.sh (this is the file you actually run):</p>

<pre><code>#========================================================
# Initialize directories
#========================================================
rm -rf test_squash/ test_squash_clone/
mkdir -p test_squash
mkdir -p test_squash_clone
#========================================================

#========================================================
# Create repository with history
#========================================================
cd test_squash/
git init
echo ""README""&gt;README
git add README
git commit -m""Initial commit: can't easily access for rebasing""
echo ""Line 1""&gt;test_file.txt
git add test_file.txt
git commit -m""Created single line file""
echo ""Line 2""&gt;&gt;test_file.txt 
git add test_file.txt 
git commit -m""Meant for it to be two lines""
git checkout -b dev
echo Meaningful code&gt;new_file.txt
git add new_file.txt 
git commit -m""Meaningful commit""
git checkout master
echo Conflicting meaningful code&gt;new_file.txt
git add new_file.txt 
git commit -m""Conflicting meaningful commit""
# This will conflict
git merge dev
# Fixes conflict
echo Merged meaningful code&gt;new_file.txt
git add new_file.txt
git commit -m""Merged dev with master""
cd ..

#========================================================
# Save off a clone of the repository prior to squashing
#========================================================
git clone test_squash test_squash_clone
#========================================================

#========================================================
# Do the squash
#========================================================
cd test_squash
GIT_EDITOR=../test_squash_helper.sh git rebase -i HEAD@{7}
#========================================================

#========================================================
# Show the results
#========================================================
git log
git gc
git reflog
#========================================================
</code></pre>

<p>test_squash_helper.sh (used by test_sqash.sh):</p>

<pre><code># If the file has the phrase ""pick "" in it, assume it's the log file
if grep -q ""pick "" $1
then
  sed -e ""s/pick \(.*\) \(Meant for it to be two lines\)/squash \1 \2/g"" &lt; $1 &gt; $1.tmp
  mv $1.tmp $1
# Else, assume it's the commit message file
else
# Use our pre-canned message
  echo ""Created two line file"" &gt; $1
fi
</code></pre>

<p>P.S.: Yes, I know some of you cringe when you see me using emacs as a fall-back editor.</p>

<p>P.P.S.: We do know we'll have to blow away all of our clones of the existing repository after the rebase. (Along the lines of ""thou shalt not rebase a repository after it's been published"".)</p>

<p>P.P.P.S: Can anyone tell me how to add a bounty to this? I'm not seeing the option anywhere on this screen whether I'm in edit mode or view mode.</p>
","13","293511","0","0"
"48309214","4683761","2018-01-17 20:08:54","0","555","<git><branch><git-checkout><pull>","'git pull origin master': will this affect my committed, not yet merged, changes?","<p>Unfortunately I wasn't able to find the answer to my specific problem through research, so I am looking for some help. The answer may be out there, but I don't have a good enough understanding to determine whether it will help me in my current situation. I am relatively new to git, and I need to get the latest changes from the repository which I forked from.</p>

<p>Here is what I have done prior:</p>

<ol>
<li>I forked the repository to create a copy of my own.</li>
<li>I cloned my copy to my machine using git clone.</li>
<li>From my forked copy, I created a new branch to work off of, and committed some changes.</li>
<li>I created a merge request to merge my branch with the main repo, but it has not been merged yet.</li>
</ol>

<p>Some changes have been made to the main repo, and I have been asked to continue working on the branch which I requested to be merged. I now need to pull the code from the master of the main repo, and bring it into my branch so I can continue working with a project that is up to date.</p>

<p>I was told to do a 'git pull origin master', however, I notice that the origin (after doing git remote -v) is my copy of the repo. Now to my question: Would the 'git pull origin master' be the correct thing to do in order to get the most recent code from the main repo into my branch that is checked out (and not merged yet)?</p>

<p>Just a side note: I am currently in training, so this may not be how the process usually goes, but I just want to make sure I am doing things correctly. If you need any more information to answer the question, please let me know. Thanks.</p>
","4","4683761","",""
"41023939","1416144","2016-12-07 17:40:00","4","3720","<git><git-checkout><git-reflog>","how to redo discarded local changes in git?","<p>Let have a file <code>a</code> tracked by git and modified locally.
Moreover, that file was in the stash too.</p>
<p>Then:</p>
<p>If you did it <code>git stash pop</code>, see <a href=""http://stackoverflow.com/questions/89332/how-to-recover-a-dropped-stash-in-git"">this link</a></p>
<p>If accidentally you did only this <code>git checkout a</code> you've lost.</p>
<p>That discards all changes in a file.</p>
<p>How to undo this operation?</p>
<p>I don't see this operation in <code>reflog</code>.</p>
<p>Stash after pop doesn't exist (not listed), but does any of that history is available somewhere in <code>.git</code> directory?</p>
","1","1416144","",""
"41135543","1223975","2016-12-14 05:36:30","0","1155","<git><git-merge><git-checkout>","git checkout branch -- file vs git merge","<p>I am concerned that git checkout other_branch -- file will overwrite the file in my current branch and not do a merge at all.</p>

<p>Say I am on a branch called foo. I want to merge a file in foo called bar.js, with the same filepath on a branch called baz;</p>

<p>so <code>git branch -v</code> looks like:</p>

<pre><code>* foo        adbe2d4 pdev:set
  baz        ae598f5 [ahead 5] sync-msg
</code></pre>

<p>The way I know how to do this is to do:</p>

<pre><code>git checkout baz -- bar.js
</code></pre>

<p>what I am confused about, is, doesn't this overwrite the file on my branch with the same name?</p>

<p>How can I merge bar.js from baz instead of checking out the file and overwriting the work on the foo branch? Or am I mistaken and a merge does indeed happen? </p>
","2","1223975","",""
"66934746","12588795","2021-04-03 18:48:28","0","3214","<git><github><git-checkout>","error: pathspec '...' did not match any file(s) known to git","<p>I'm calling <code>git checkout HEAD~2 &quot;Finished 1 stage&quot;</code> (or just <code>git checkout &quot;Finished 1 stage&quot;</code>)</p>
<p>Then i get <code>error: pathspec 'Finished 1 stage' did not match any file(s) known to git</code></p>
<p>git log:<a href=""https://i.stack.imgur.com/uRWEE.png"" rel=""nofollow noreferrer"">git log</a></p>
<p>I'm trying to get files from commit &quot;Finished 1 stage&quot;</p>
<p>I hope you will help me!</p>
","2","12588795","",""
"59878883","12764126","2020-01-23 12:43:57","2","1414","<git><git-checkout>","What happens when we git checkout a commit","<p>I'd like to know if we use <code>git checkout &lt;commit hash&gt;</code> and the commit is in multiple branch, how do we know which one get checkout?</p>

<p>I didn't know how to do it visually so I tried to do a little drawing, sorry about that.<br>
I'm not allowed to post it directly so here's a link.<br>
If we have those three branches, then we <code>git checkout &lt;Commit Z&gt;</code>, will we get Branch A or Branch B?
How does it work? Thank you!</p>

<p><a href=""https://i.stack.imgur.com/Y3wJr.png"" rel=""nofollow noreferrer"">https://i.stack.imgur.com/Y3wJr.png</a></p>
","2","12764126","",""
"49433466","7220869","2018-03-22 16:11:02","0","619","<git><git-checkout>","What is the effects of using the command git checkout?","<p>I have three branches Master, Branch1 and Branch2, 
I am currently working on Branch2. I have done some local changes but I want to commit these changes to a new branch (Branch3). </p>

<p>After doing some research I see that I should create a new command using <strong>""git checkout -b [name_of_your_new_branch]""</strong></p>

<p>I am scared that if I do a checkout new branch all my local changes will be gone. </p>

<p>Can someone help confirm what is the safest way to commit and push to a new branch when working on branch2.</p>
","1","7220869","",""
"14736181","1895775","2013-02-06 18:27:51","0","873","<git><git-checkout>","git check out error pathspec","<p>I'm new in git and ruby on rails, i'm trying to recover an other day work with git, so I type ""git log"" and i can see my ""commits"" for the repository in my application directory:</p>

<pre><code>commit 016a8807427c46087762b56e1ea02abc
Author: Antonio 
Date:   Mon Feb 4 11:32:32 2013 +0100

    session errors

commit cc3c292ffd110414cf4db54c5b976f2f
Author: Antonio 
Date:   Sun Feb 3 21:02:59 2013 +0100

    hw2_c

commit af2a509d462e454d0315c63ce98ad6d0
Author: Antonio 
Date:   Sun Feb 3 20:34:55 2013 +0100

    hw2_elementsId

commit 2314687a32c7f56ff8fc8557d95af3df
Author: Antonio 
Date:   Sun Feb 3 20:25:23 2013 +0100

    hw2_b
</code></pre>

<p>But when i try to checkout any commit, I receive always  the same error message:</p>

<pre><code>git checkout hw2_c

error: pathspec 'hw2_c' did not match any file(s) known to git.
</code></pre>

<p>Can anyone help me?</p>
","0","1895775","",""
"41407951","7357954","2016-12-31 11:35:24","1","1722","<git><git-checkout><git-tag>","How do I download a specific git repository tag?","<p>There's a repository I want to build from, however if I clone the repository, the source I get results in an unstable program. The last version of the source they tagged (1.2) is stable but I'm not sure how to download it using git. From what I've been reading when searching for answers I can clone the repository first then use <code>checkout</code> to switch to the tag;</p>

<p><code>git clone https://github/project/project.git</code></p>

<p><code>cd project</code></p>

<p><code>git checkout tags/1.2</code></p>

<p>This results in detached head mode which I'm not sure is a problem or not. However what I don't get is, when I do checkout it says it switches to the tag in the ""working tree"". Does that mean now that if I build it with the scripts the dev team included to do so it will build the 1.2 source code only? I did so and I got a program that seemed unstable still. However I can't tell what version it is because it doesn't say (they're fixing that in a later release).</p>

<p>So did I do this correctly? Or am I barking up the wrong tree by using checkout. I mean, ideally I would like to be able to download the source for that tag without having to clone the entire repository but I can't seem to figure out how to do that, if it's even possible.</p>
","0","7357954","",""
"32226082","3881487","2015-08-26 12:00:59","2","718","<git><git-checkout><git-reset>","Difference between git reset --hard <filename> and git checkout -- <filename>","<p>As far as I understand, git reset --hard  will update  in the index and working directory to whatever the HEAD points to?</p>

<p>Git checkout --  will update  in working directory to whatever that file state in the INDEX is?</p>

<p>So if  is unstaged, then they will do the same thing (change the file in the working directory to its state in the HEAD/INDEX [which are the same state for that file])? But if it is staged then git reset --hard  will do as above, but Git checkout --  will do nothing?</p>
","4","3881487","",""
"32230161","5205383","2015-08-26 15:01:58","10","6376","<git><version-control><git-checkout><git-reset>","Difference between git reset --hard and git checkout","<p>Let's say I want to undo all changes introduced by previous commits.</p>

<p>As far as I understand, <code>git reset --hard &lt;specified commit&gt;</code> will remove all commits up until the specified commit, and undo all changes.<br>
On the other hand <code>git checkout &lt;specified commit&gt;</code> will change my directory to reflect the specified commit.</p>

<p>So if I <code>git reset</code> after <code>git checkout</code> will it have the same result as <code>git reset --hard</code>?</p>

<p>Alternatively, if I simply <code>git commit</code> after <code>git checkout</code>, will the newly created commit overwrite the existing commits?</p>
","1","5205383","0","0"
"3791788","37370","2010-09-24 23:47:54","3","2791","<git><merge><git-checkout>","git checkout certain files despite conflict","<p>I frequently find myself wanting to checkout only certain files in a tree but cant because I have modified them locally and dont want the hassle of trying to figure out merge (I dont want to merge anything - I just want the git version of certain files).</p>

<p>So how can I force a checkout of, for example, ""db-backup*"" where these files are scattered over a directory structure?</p>

<p>e.g</p>

<pre><code>git-parent
  - dir1
    - db-backup1
  - dir2
    - db-backupA
</code></pre>

<p>thanks,</p>

<p>r.</p>
","0","37370","0","0"
"22442000","166231","2014-03-16 19:47:53","4","2509","<git><git-diff><git-checkout>","After git checkout file from commit, git diff shows no changes?","<p>I am confused on the git checkout  behavior.  If I wanted to grab a previous version of the file and do something like:</p>

<pre><code>git checkout HEAD^^ Xml/Config-Profile.xml
git status
</code></pre>

<p>I get:</p>

<pre><code>On branch master
Your branch is up-to-date with 'origin/master'

Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    modified: Xml/Config-Profile.xml
</code></pre>

<p>And if I do, git diff, I get no differences.  I've figured out that if I do git diff --cached, it shows the changes, so I guess that means that my checkout command pulled from repository's HEAD^^ commit and updated the 'index only'?</p>

<p>I guess my concerns are (and I couldn't gleam info directly from checkout manual pages):</p>

<p>1) Why is only the index getting updated?  How come it doesn't behave as if I just replaced the Config-Profile.xml file in my <strong>working directory</strong> with some (previous) copy of the file?</p>

<p>2) I guess what makes this confusing for me, and maybe it is all just semantics, is that if I were editing a file in my working directory and decided I didn't like it and did a git checkout, it replacing the file in the working directory.  After stating that, I'm guessing that git checkout pulls latest file from the index into the working directory, instead of the file from the latest commit in the repository?</p>

<p>3) Is there a command that pulls a file from a commit directly into the working directory as if I edited it myself manually to that point?  Or do I need to create a custom alias?</p>

<p>Thanks in advance.</p>
","1","166231","",""
"67010172","892536","2021-04-08 18:52:05","8","4526","<git><visual-studio-2019><git-checkout>","How do I do a `git checkout` in visual studio 2019?","<p>I'd like to go back and look at a commit of the code I previously published. From the command line, it would be <code>git checkout [commit id]</code>, but I'd like to do it though Visual Studio (2019) so I don't have to open the command prompt and find/copy the commit id. I don't want to make any permanent changes to the code, I just want to be able to browse/debug the old code.</p>
<p>This seems like it should be a feature in Visual Studio - from the history window, I can see options for <code>Revert</code>, <code>Reset</code>, <code>Cherry-Pick</code>, but I don't think any of those are re-named version of <code>checkout</code>. I tried searching for &quot;visual studio 2019 how do I checkout a previous commit git&quot; (and various wordings), but I can't find the answer.</p>
<p>The solution I've used so far was to make a new branch from the commit I want to look at, then delete the branch when done, but it seems like there must be a better way...</p>
<p>Here is the right-click menu:
<a href=""https://i.stack.imgur.com/4cskR.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/4cskR.png"" alt=""Commit History Right-Click Menu"" /></a></p>
","5","892536","0","0"
"41558587","3148736","2017-01-09 23:15:39","3","3420","<windows><git><ant><commit><git-checkout>","How to run git checkout in ant?","<p>I have been reading this <a href=""https://stackoverflow.com/questions/6990484/git-checkout-by-date/41558355#41558355"">post</a> to git checkout by a specific date. I have been able to obtain the revision commit SHA code to the specific commit that I am targeting for the checkout, but when I am trying to actually run the git checkout command line I got the error:</p>

<blockquote>
  <p>error: pathspec 'de957d59f5ebef20f34155456b8ab46f127dc345
  ' did not match any file(s) known to git.</p>
</blockquote>

<p>Not sure what that means. I am running this command from ant 1.94 on my windows 7 machine</p>

<p>The ant command script looks as follow:</p>

<pre><code> &lt;target name=""git.revlist"" description=""Revision list of repo for a particular timeframe"" &gt;
    &lt;exec executable=""git"" dir=""${run.repo.dir}"" failifexecutionfails=""true"" output=""${output_commit_sha_file}"" &gt;
        &lt;arg line=""rev-list -n 1 --before=${snapshot_before_date} ${repo_branch}""/&gt;
    &lt;/exec&gt;
    &lt;loadfile property=""output_commit_sha"" srcfile=""${output_commit_sha_file}""  /&gt;
    &lt;exec executable=""git"" dir=""${run.repo.dir}"" failifexecutionfails=""true"" &gt;
        &lt;arg line=""checkout ${output_commit_sha}""/&gt;
    &lt;/exec&gt; 
 &lt;/target&gt;
</code></pre>

<p>Where the first execution actually retrieve the SHA (de957d59f5ebef20f34155456b8ab46f127dc345) code successfully, but when trying to use that for the second execution tasks command arguments, it throughs the above error.</p>

<p>Any ideas/recommendations on what I am missing here. Like I mentioned, I do have several task command lines that look like this and are used to perform other tasks, like <code>git clone</code> and <code>git log</code>, but this one seems to be missing something crucial.</p>

<p>Thanks in advance</p>
","1","3148736","0","0"
"67051791","8816796","2021-04-12 01:58:07","0","116","<git><git-checkout><git-stash>","automatically switch from and then to git branch without losing topic changes","<p>I got a cronjob to run a test against my master branch during my break. First thing, it checks out master. Let's assume I was checkout to <code>topic</code> when I left with some uncommitted changes. I'd like to ensure when I get back, the check is done &amp; topic branch is checked out &amp; as it was when I left.</p>
<pre class=""lang-sh prettyprint-override""><code>[programmatically check if you need to stash anything and do so if needed]
git checkout master 
[do your thing]
git checkout - [and nicely unstash changes if there were any. Do not blindly unstash old stashes otherwise.]
</code></pre>
","2","8816796","",""
"4021088","222072","2010-10-26 06:04:03","0","1166","<git><pull><git-checkout><revert>","How to get back modified file after git checkout and git pull?","<p>I've modified a file, then I want to get latest version from remote.</p>

<p>So I run git checkout to revert the file, and run git pull to get latest version.</p>

<p>After that, I found that I need the modification of the file.</p>

<p>Is it possible to get it back? Thanks!</p>
","0","222072","",""
"60415023","11533075","2020-02-26 13:26:56","2","2418","<bash><git><git-branch><git-checkout>","-bash: syntax error near unexpected token `(' while git checkout","<p>I Accidentally created a git branch, which contain '()' in branch name. I didn't get any error while creating the branch. But when i tried to <strong>git checkout</strong> to the branch from master, i got the following error.</p>

<pre><code>-bash: syntax error near unexpected token `('
</code></pre>

<p>I tried renaming the branch with <strong>git branch -m</strong> and <strong>git branch -m -f</strong> but both commands returned the same error as given above.</p>

<p>How can i solve this situation ? Is there any method to get the changes i made in that branch??</p>

<p>Thanks in advance</p>
","2","11533075","",""
"67203019","167698","2021-04-21 20:27:02","1","114","<windows><git><checkout><desktop><git-checkout>","Two git branches on two different Windows Desktops?","<p>Can you have two separate Git branches checked out on two different Windows desktops (same computer, just different desktops)?</p>
","3","167698","",""
"32320672","1927589","2015-08-31 22:05:46","0","256","<git><git-checkout>","git: abandon changes to current checked out version","<p>I checked out an earlier version of my project, using:</p>

<pre><code>$ git checkout fd4a4a1
</code></pre>

<p>The response was: </p>

<pre><code>Note: checking out 'fd4a4a1'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at fd4a4a1... &lt;original commit message&gt;
</code></pre>

<p>I copied a chunk of code, but made no changes. I now want to return to the current branch. However, when I run...</p>

<pre><code>git checkout myCurrentBranch
</code></pre>

<p>... git complains:</p>

<pre><code>error: Your local changes to the following files would be overwritten by checkout:
    app/.meteor/packages
    app/meteo4j.js
Please, commit your changes or stash them before you can switch branches.
Aborting
</code></pre>

<p>I don't care about these changes. If they were made, it happened unintentionally. Is it possible to force git to ignore these changes and to checkout my current branch, without changing my history in any way?</p>
","1","1927589","",""
"14966232","892768","2013-02-19 19:57:28","1","3460","<visual-studio><git-extensions><git-checkout>","""git checkout"" Doesn't Update Files","<p>my workflow with git is something like this:
1. pull --rebase from origin/master
2. create a new branch for a specific issue and make my changes on that branch
3. switch head back to master and then merge the new branch I've created to to master</p>

<p>from the documentation page, git checkout is suppose to</p>

<blockquote>
  <p>Updates files in the working tree to match the version in the index or the specified tree</p>
</blockquote>

<p>however after I made changes to the new branch and checkout master and check the status using 'git status', the changed files is still present.</p>

<p>Worst of all, I have used the 'undo file changes' option in git extension for visual studio, now that even if I switch back to the branch I created using the 'checkout' command, I no longer see my changes. Is there anyway that I can redo those changes?</p>
","1","892768","",""
"32394214","2396605","2015-09-04 09:08:57","13","17977","<git><pull><git-checkout><smartgit>","smartgit delete commit and return to previous commit","<p>By mistake i have made a commit that now i want to delete from the history log and return to a previous commit. I have been trying to checkout the commit that i want to return to but Smartgit ask me to create a local branch in order to do this (screen shot attached) and since im not an expert with SG i really need some advice. I have also try to revert the commit that i made by mistake but i still see the commit on the log. This is how the log look now:</p>

<p>When trying to checkout :</p>

<p><a href=""https://i.stack.imgur.com/tV8tT.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/tV8tT.jpg"" alt=""enter image description here""></a></p>

<p>How my log looks at the moment :</p>

<p><a href=""https://i.stack.imgur.com/6Hikn.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6Hikn.jpg"" alt=""enter image description here""></a></p>

<p>What i want to do is delete the first two commits from the log and return to the ""Cambios Varios"" commit (the one with the green arrow that btw appeared when i was trying to check out that commit).</p>

<p>All this mess was because my coleague made some changes and add a file and then commit his changes, in order to have my files updated i made a pull but my files didn't get updated on my local repository and didnt add the file that was added by my coleague. Is there something else i have to do in order to update all my folders when another user do a commit besides PULL ? Im pretty new to SmartGit and is kinda of confusing everytime im trying to do a clean pull. Many thanks !</p>
","0","2396605","0","0"
"14995506","535590","2013-02-21 05:54:48","74","38756","<git><git-checkout>","How to get a copy of an older version of a file in a git repository?","<p>I have a version of a <code>.tex</code> file from a number of commits ago that I would like to get a copy of. I have the sha1 hash value for the commit that has the version of that file that I want. I do not want to replace the current version of the file. Rather, I want to just get a separate copy of it that reflects its state at the older version.</p>

<p>A lot of similar questions suggest using <code>git checkout &lt;sha1&gt; -- file.tex</code>, but this just keeps giving ""error: pathspec 'file.tex' did not match any file(s) known to git.""</p>

<p>The file I am interested in originally existed in the top-level directory of the repository. I am currently in a sub-directory of the repository trying to run this command so as to get the older version of file.tex in the subdirectory.</p>

<p>Is this possible? How can I do this?</p>
","2","535590","0","0"
"16648887","384706","2013-05-20 11:49:58","1","54","<git><version-control><dvcs><git-checkout>","Can not figure out how checkout works in git","<p>I have created a new repository and commited a file <code>a.pl</code>. All ok.<br>
If I do <code>git status</code> that there is nothing added or untracked changes. I do a <code>git log</code> and I see the <code>hash</code> of my last (and actually only) commit in this repository.<br>
Now I modify the <code>a.pl</code> and I append a new line in the end of the file. E.g <code>print ""1"";</code><br>
I save it and if I do <code>git status</code> it reports untracked changes.<br>
Now If I do: <code>git checkout &lt;commit_id&gt;</code> using the hash reported in <code>git log</code> I expect to go to the version I commited, so my recent untracked modification should be deleted.<br>
I do <code>git checkout 1d739</code> and I get:  </p>

<blockquote>
  <p>Note: checking out '1d739'.  </p>
  
  <p>You are in 'detached HEAD' state. You can look around, make
  experimental   changes and commit them, and you can discard any
  commits you make in this   state without impacting any branches by
  performing another checkout. etc</p>
</blockquote>

<p>When I look in the file, I see that the <code>print ""1"";</code> I added is still there!<br>
Now in this checkout version I append another line in the file: <code>print ""2"";</code> and save the file.  </p>

<p>Then I do: <code>git checkout master</code>. This would take me back to the latest commit, right? So I expected that the last append I did <code>print ""2"";</code> would be lost.<br>
Well after I get: <code>Switched to branch 'master'</code> I see the file and it has both <code>print ""1"";</code> and <code>print ""2"";</code>.<br>
This is really confusing. Shouldn't I be seeing the latest commit now? And both the modifications should be lost?</p>
","0","384706","",""
"3953074","259692","2010-10-17 11:49:19","9","4033","<git><branch><git-checkout>","""git branch --track"" vs ""git checkout --track""","<p>What is the difference between ""git branch --track"" and ""git checkout -b --track"", if there  is any?</p>
","0","259692","0","0"
"14811991","1711159","2013-02-11 12:33:32","32","72437","<windows><git><filepath><git-checkout>","git checkout error: unable to create file","<p>While cloning a git repository from Linux to a Windows system, I am getting the following error in checkout the phase:</p>

<blockquote>
  <p>$ git clone gituser@serveraddr:/git/git_repo.git git_WA<br>
  Cloning into 'git_WA'...<br>
  gituser@serveraddr's password:<br>
  remote: Counting objects: 500846, done.<br>
  remote: Compressing objects: 100% (118676/118676), done.<br>
  remote: Total 500846 (delta 307739), reused 483023 (delta 291136)<br>
  Receiving objects: 100% (500846/500846), 907.54 MiB | 9.04 MiB/s, done.<br>
  Resolving deltas: 100% (307739/307739), done.  </p>
  
  <p>error: unable to create file RealR**************************************************************************************************************************************************************************************************************validation.xml (No such file or directory)<br>
  Checking out files: 100% (441329/441329)<br>
  Checking out files: 100% (441329/441329), done.<br>
  done.</p>
</blockquote>

<p>Case-2: Cloned as bare repo, checked-out all from bare repo locally => Same error.</p>

<p>Case-3: Clone the repo in C:\ directly, checkout successful, No error.</p>

<p>-> It looks like problem with filename/filepath length limitation. </p>

<p>Case-4: checkout the same files from SVN repo. Able to checkout at any location without any problem. Hence no problem from windows side. (Yes, l have data in SVN and GIT both, I just migrated from SVN to GIT).</p>

<p>Hence, the problem has to be within msysgit, some filepath length limitation. Can path length in gitclient/msysgit be tweaked?  </p>

<p>Edit1: <em>All operation tried with <strong>TortoiseGIT client v1.8.0</strong> and <strong>git-bash: git version 1.8.0.msysgit.0</strong>.</em><br>
Edit2: Added the actual command used while cloning.</p>
","1","1711159","0","0"
"5244786","650444","2011-03-09 11:00:55","22","21266","<git><git-checkout>","Why is the git command to switch branches named ""git checkout""?","<p>Why is the git command to switch branches named <code>git checkout</code>?<br>
Does it really make sense ? </p>

<p>I would name it <code>git switch</code> instead. Besides, <code>git checkout</code> has other meanings: e.g. reverting a file (like <code>svn revert</code>)</p>
","2","650444","0","0"
"61773670","9181725","2020-05-13 11:40:11","0","841","<git><git-checkout>","How to stop git auto-update when switching branches?","<p>I have two branches:</p>

<pre><code>----master
  |
  |----lf
</code></pre>

<p>I developed some new feature in branch <code>lf</code> and get some output. Then, I tried to switch back to <code>master</code> (through <code>git checkout</code>) and execute the program to compare the result. Unfortunately, <code>git checkout master</code> will update what I did in <code>lf</code>:</p>

<pre><code>M   Makefile
M   src/mainloop.c
M   src/threadpool.c
M   src/threadpool.h
Already on 'master'
Your branch is up to date with 'origin/master'.
</code></pre>

<p>As a result, I get the exact same project in two branches. This is not what I want. I don't want master auto update what I changed in <code>lf</code>.</p>

<p>My question are:</p>

<ol>
<li><p>How to recover the code in <code>master</code> before I do branch (<code>git branch lf</code>)?</p></li>
<li><p>How to switch between different branches with no auto-update?</p></li>
</ol>
","4","9181725","0","0"
"6073507","762896","2011-05-20 14:38:35","39","22340","<git><branch><clone><git-checkout>","git checkout branch from outside","<p>Problem: I need somehow to checkout an existing branch of a project that is already cloned locally on my file system without being in that particular folder of this project.</p>
<p>Solution: I'm trying to do the following:</p>
<ol>
<li><code>git clone 'github-project-url' 'file-system-folder'</code></li>
<li><code>git checkout 'existing-branch' 'file-system-folder'</code></li>
</ol>
<p>I do realize that second step is not quite right, but I also am trying to avoid to <code>cd 'file-system-folder'</code>.</p>
","2","762896","0","0"
"43298974","1264304","2017-04-08 18:41:06","-1","1007","<git><git-checkout>","git checkout file for multiple files not staged for commit","<p>If <code>git status</code> reports 10 files not staged for commit and would like to revert changes to them using one command instead of multiple <code>git checkout single_file</code>.
Is it possible?</p>
","8","1264304","",""
"62010553","2010357","2020-05-25 20:48:16","-1","157","<git><git-checkout>","Non-deterministic behavior of git-checkout","<p>I am trying to understand this behavior of git. It has to do with file removal and preservation of a commit.</p>

<p>Suppose I am working in a branch called fork1 at the latest point. I get there by doing ""git checkout fork1"". I then delete a file called first.bsh. (Not git rm, just rm). If I do ""git checkout fork1"", it produces a message:</p>

<pre><code>Already on 'fork1'
D       first.bsh
</code></pre>

<p>noting the file is missing. It is not restored, despite the checkout.</p>

<p>I then do ""checkout master"" and then ""checkout fork1"". At this point, the file is restored. It appears that the order of the commands affects what ""checkout fork1"" does. That is surprising and does not seem like desirable behavior. It's sort of ""respecting"" my deletion in one case, but not the other. What is the logic here?</p>
","7","2010357","",""
"62203766","12032306","2020-06-04 20:42:24","0","248","<git><repository><git-checkout><git-bare>","How can my git repository be non-bare and have no working tree?","<p>It seems like the central git repo I'm working with is both non-bare and has no working tree, which doesn't seem possible given my understanding of the definition of non-bare.</p>

<p>In the repository the result of <code>git rev-parse --is-bare-repository</code> is <code>false</code></p>

<p>And when I look at its branch list the master branch is shown as checked-out with an asterisk.</p>

<p>However when I try to checkout a different branch I am met with:</p>

<pre><code>fatal: This operation must be run in a work tree
</code></pre>

<p>I discovered this when I tried to push my changes from my local repo and got: </p>

<pre><code>! [remote rejected] master -&gt; master (branch is currently checked out)
</code></pre>

<p>Could someone help me understand the situation more? Ideally I would want the central repo to be bare and to be able to push there. </p>

<p>For context, I did not create the repo myself so I'm not sure if this is purposeful or happened by accident somehow. </p>

<p>Edit: For more info, here is the content of the config file</p>

<pre><code>[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
[receive]
        denyCurrentBranch = refuse
</code></pre>
","4","12032306","",""
"43542975","122687","2017-04-21 12:39:21","1","56","<git><version-control><git-checkout>","After editing my code, ""git checkout -- ."" works for resetting, but after ""git checkout [revision] ."" it doesn't","<p>After editing my code, <code>git checkout -- .</code> works for undoing my edits. The same command, however, doesn't work for undoing the changes made by <a href=""https://stackoverflow.com/a/2007704""><code>git checkout [revision] .</code></a> - I need <code>git reset --hard;</code> in that case instead.</p>

<p>Can anyone explain why the inconsistency?</p>
","0","122687","0","0"
"6624036","652895","2011-07-08 11:53:09","281","131094","<git><git-checkout>","Restore file from old commit in git","<p>I have an old commit that I did a few weeks ago. I want to restore only a single file from that commit. What do I do?</p>
","1","652895","0","0"
"43551979","47281","2017-04-21 21:03:25","8","7907","<git><merge><git-checkout>","git checkout --ours when file spec includes deleted file","<p>When we merge we keep the local version of our Maven pom.xml files:</p>

<pre><code>git merge origin/remote_branch
git checkout --ours **/pom.xml pom.xml
git add **/pom.xml pom.xml
git commit -m ""Merge""
</code></pre>

<p>This works great except if a pom.xml file has been removed in the local branch.  After running command #2 above we get an error:</p>

<pre><code>d:\code&gt;git checkout --ours **/pom.xml pom.xml
error: path 'blah/pom.xml' does not have our version
</code></pre>

<p>... and after this error the next command #3 <code>git add **/pom.xml pom.xml</code> effectively adds the remote pom.xml files - exactly what we <em>don't</em> want. </p>

<p>How can we update our script to handle this?</p>
","0","47281","0","0"
"6631337","836203","2011-07-08 22:48:30","13","792","<git><branch><tracking><git-checkout>","Are there different meanings to the concept of 'tracking' in git?","<p>I run 'git branch -r' and get</p>
<blockquote>
<p>origin/branch1</p>
<p>origin/branch2</p>
</blockquote>
<p>From the man page, the -r option will &quot;list or delete (if used with -d) the remote-tracking branches&quot;.  So origin/branch1 and origin/branch2 are known as remote-tracking branches.  However, you can't commit directly onto a remote-tracking branch (an anonymous branch will be created instead).  A remote-tracking branch simply tracks a remote branch when running 'git fetch'.</p>
<p>Here's where the semantics get a little blurry for me.  If I then</p>
<blockquote>
<p>git checkout -b branch1 origin/branch1</p>
</blockquote>
<p>I get the following output:
&quot;Branch branch1 set up to track remote branch branch1 from origin.  Switched to a new branch 'branch1'&quot;</p>
<p>Here's my question, put as verbosely as possible to clarify what's confusing me...
By virtue of having branch1 set up to track remote branch branch1 from origin, is 'branch1' thus considered a remote-tracking branch?  If so, doesn't this conflict with the fact that 'origin/branch1' was already listed as a remote tracking branch when running 'git branch -r'?  From what I understand, there exist either local (topic) branches or remote-tracking branches.  When running 'git checkout -b branch1 origin/branch1', am I creating a local (topic) branch (onto which I can add commits) that is tracking a remote branch by way of fetches?  Running 'git branch' now gives: '* branch1', and running 'git branch -r' still gives 'origin/branch1' and 'origin/branch2'.  I created branch1 to add commits to and to track origin/branch1.  Which is considered the remote-tracking branch, 'branch1' from the output of 'git branch', or 'origin/branch1' from the output of 'git branch -r'?</p>
","1","836203","0","0"
"24911809","2461450","2014-07-23 13:28:45","17","28440","<git><git-checkout><rm><git-revert><git-rm>","Restore deleted file not staged in git","<p>I accidentally removed the entire directory of my source code...with a nice rm -r. I know, really bad; but fortunately, I had a git repo in the containing directory. Thus, git has a huge list of <strong>unstaged</strong> changes of deleted files. For example: </p>

<pre><code>""deleted:   src/caronmonitor/server.py"" 
</code></pre>

<p>How do I get these files back? There is advice all over the web to do:</p>

<pre><code>git checkout file
</code></pre>

<p>or</p>

<pre><code>git revert &lt;commit&gt;
</code></pre>

<p>But as I understand that will restore the file to it's state at the last commit. I don't want to go back to the last commit but instead go back to right before the delete operation. I can look in the gitk and see my files as they were before the delete; thus this must be possible. </p>
","3","2461450","0","0"
"6638937","807549","2011-07-10 03:10:33","2","11263","<git><branch><git-branch><git-checkout>","switching branches in git - when will i get ""You have local changes cannot switch branches.""?","<blockquote>
<p><strong>Possible Duplicates:</strong><br />
<a href=""https://stackoverflow.com/questions/1304626/git-switch-branch-and-ignore-any-changes-without-committing"">git: Switch branch and ignore any changes without committing.</a><br />
<a href=""https://stackoverflow.com/questions/6337122/git-branches-behaving-strangely"">Git branches behaving strangely</a></p>
</blockquote>

<p>I know that the general recommendation is to have a clean status before switching branches in git. ( stash or park-commit ). I'm trying to understand when will I get &quot;You have local changes cannot switch branches&quot; , I can't follow the logic :</p>
<p>I have a repo, with a file called version.txt, contains the text &quot;1&quot; :</p>
<blockquote>
<p>git checkout -b new</p>
<p>echo 2 &gt;&gt; version.txt  (working dir is not dirty, modified the file)</p>
<p>git checkout master ( how come this works ? I have not stages\commited my changes on new )</p>
</blockquote>
<p>same happens if I delete the file content in my new branch, or stage the file first.</p>
<p>Can someone help me to understand when will i get the &quot;You have local changes cannot switch branches.&quot; ?</p>
<p>Thanks,
Ran</p>
","1","807549","",""
"24916186","1264804","2014-07-23 16:38:36","51","53584","<git><git-checkout><git-add>","How to do 'git checkout --theirs' for multiple files (or all unmerged files)","<p>Say I have this after attempting a merge and upon entering <code>git status</code>:</p>

<pre><code># Unmerged paths:
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   added by them: myfile1.xhtml
#   added by them: myfile2.xhtml
#   added by them: myfile3.xhtml
</code></pre>

<p>... and I know I want to do this for each of those files:</p>

<pre><code>git checkout --theirs myfile1.xhtml
git add myfile1.xhtml
</code></pre>

<p>... but there are many of them. How might I do them as a batch?</p>
","0","1264804","0","0"
"24921595","823869","2014-07-23 21:44:50","17","1186","<git><git-checkout><git-plumbing>","How to replicate git-checkout using only plumbing commands?","<p>I would like to avoid calling porcelain commands from my scripts, but is there a way to get some of the behavior of <code>git checkout &lt;commit&gt;</code> using only plumbing commands like <code>checkout-index</code>? I'm particularly interested in the effect on the working copy: assuming everything is clean, <code>checkout</code> deletes files that were tracked in the old HEAD and absent in the new one. <code>checkout-index</code> doesn't seem to have any concept of deleting files. The closest thing I can think of would be to call</p>

<pre><code>git diff-tree -p &lt;old&gt; &lt;new&gt; | git apply
</code></pre>

<p>but computing the whole diff seems unnecessarily expensive. Is there a better way?</p>
","5","823869","0","0"
"24925106","1305226","2014-07-24 04:23:56","3","2452","<git><branch><git-remote><jgit><git-checkout>","how to create git branch in remote repository without checking out using jgit","<p>Can we create a remote branch in git using jgit without checking out. For example I want to create a branch named <em>foo</em> from branch named <em>bar</em> in my remote repository without checking out branch <em>bar</em> locally.</p>
","0","1305226","0","0"
"68432786","9113679","2021-07-18 20:19:11","0","30","<git><git-pull><git-checkout>","After doing `git pull` in a local repository, is it possible to find out which commit was the last before the git pull?","<p>I did a git pull. Then, a fast forward merge happened and multiple objects and commits were added to my local repository.</p>
<p>Some things went wrong and I would like to go back to how the local repository was before pulling new objects from upstream.</p>
<p>Hence, I would like to <strong>checkout the last commit</strong> before pulling. The problem is that I <strong>do not</strong> remember what was the last commit before pulling.</p>
<p>Is there a command to show the last commit before pulling? Maybe another command that shows what as added on the last git pull?</p>
<p>Thanks.</p>
","3","9113679","",""
"50109381","7449489","2018-04-30 23:11:13","1","53","<git><git-checkout><git-log>","Does the branch I'm on using 'git log' matter if I use the same commit hashes?","<p>Behold! I have the following Git structure:</p>

<pre><code>A-...-C-D-E      (develop branch)
         \
          X-Y    (feature1 branch)
</code></pre>

<p>Where A, B, C, D, and E are commits on the develop branch, and X and Y are commits on a branch named feature1. Commits A and C are seperated by an unknown amount of commits.
Let's also say that commit A has (partial) commit hash <code>b0a710ad5</code> and commit Y has (partial) commit hash <code>0fc0d3</code>.</p>

<p>Now, there are two scenarios of interest. One where I checkout develop and run </p>

<pre><code>git log --oneline b0a710ad5..0fc0d3
</code></pre>

<p>And the second scenario, where I instead checkout feature1, and do the same command:</p>

<pre><code>git log --oneline b0a710ad5..0fc0d3
</code></pre>

<p>If I had to guess what these scenarios returned, I would say that the first would give me an error, since commit Y does not exist on the develop branch. And I would guess that the second scenario would give me a legitimate Git log. However, I was quite mistaken. It didn't seem to matter what branch I was on: both commands gave me the exact same logs. It appears that <code>git log</code> can see commits from other branches, <em>which thing I never had supposed</em>.</p>

<p>Can <code>git log</code> find a commit on any branch in the local repository? Does it search and find commits remotely if it can't find it on any local branches? Does it truly not matter what branch I am on when I run a <code>git log ..</code> with commit hashes? Oh, the possibilities.</p>
","2","7449489","",""
"15536639","234593","2013-03-20 23:20:18","71","27956","<git><branch><git-checkout>","git: checkout files from another branch into current branch (don't switch HEAD to the other branch)","<p>I want to load a different version of the files that exist in another branch into my current branch.</p>

<p><code>git help checkout</code> says:</p>

<pre><code>DESCRIPTION
   Updates files in the working tree to match the version in the index or
   the specified tree. If no paths are given, git checkout will also
   update HEAD to set the specified branch as the current branch.
</code></pre>

<p>Is there a way to checkout all those files, but <em>not</em> update HEAD?</p>
","2","234593","0","0"
"15574136","1721248","2013-03-22 15:30:33","0","355","<git><git-checkout>","git checkout overload","<p>TL;DR I can't revert a file with git checkout if a branch has the same name.</p>

<hr>

<p>I was working on my GIT repository when found a funny problem.
We've a branch called ""build-upload"" where we are creating a new ""upload"" feature.
We also have a file called ""bin/build-upload"", it's a script than builds the project and uploads it to production.</p>

<p>The thing is I was on the ""bin/"" directory and modified ""build-upload"" file and I want to revert it. So I typed</p>

<pre><code>git checkout build-upload
</code></pre>

<p>And the result was</p>

<pre><code>amatiasq:~/repo/bin$ git checkout build-upload
M   bin/build-upload
Switched to branch 'build-upload'
</code></pre>

<p>I didn't pay enought attention to the result, and continued working without realizing I was on another branch. Fortunately before I commit the new changes I saw ""bin/build-upload"" was modified and this led me to found I switched branch.</p>

<p>The question is. Is there a way to prevent this ambiguity? How can I tell git when I do ""checkout"" if I want to switch branch or revert a file? </p>
","2","1721248","",""
"32568643","2359659","2015-09-14 15:33:25","4","1871","<git><git-checkout>","What is the opposite of 'git checkout HEAD^'?","<p>I'm walking through git history with command <code>git checkout</code>. From <code>master</code> I went to e.g commit with hash <code>a7040f35a1e</code>.</p>

<pre><code>git checkout a7040f35a1e
</code></pre>

<p>Then I went to the previous commit:</p>

<pre><code>git checkout HEAD^
</code></pre>

<p>How can I return back? I mean how can I go to following commit? Is it possible with the word <code>HEAD</code> + or something?</p>
","0","2359659","0","0"
"32574620","2605112","2015-09-14 22:00:25","2","84","<git><git-branch><git-rebase><git-checkout>","Difference between `git rebase foo bar` and `git checkout bar; git rebase foo`?","<p>I've seen both, and they seem to do the same thing.  </p>

<p>1)   <code>git rebase foo bar</code></p>

<p>2)  <code>git checkout bar</code>; 
<code>git rebase foo</code></p>

<p>Are they the same?  And, does it depend on which branch you are on when you do 1)?  </p>
","0","2605112","",""
"15748964","841626","2013-04-01 18:11:46","2","488","<git><version-control><git-checkout>","git undo a checkout of past commit","<p>so I did <code>git checkout &lt;past_commit_hashtag&gt;</code></p>

<p>but then I want to undo it and go back to the current latest revision </p>

<p>so I did a whole bunch of things:</p>

<pre><code>git reset --hard
git checkout &lt;root folder&gt;
git branch -D master
git checkout master
</code></pre>

<p>nonetheless, I now get an error message <code>Fatal error: Cannot redeclare file_create_url() etc</code> which implies that I did not revert back to the latest revision properly...</p>

<p>How do I actually go back to the current revision properly? </p>

<p><code>git pull --rebase</code> reveals that my branch is up to date
moreover <code>git status</code> reveals that there are no dirty changes </p>
","0","841626","",""
"50425943","9634883","2018-05-19 13:44:30","4","1209","<git><performance><git-branch><git-checkout>","creating git branch is extremely slow in large repository","<p>i have a local repository with ~300.000 files and about 40gb on an encrypted filesystem (and i cannot change that ...).
i often need to create a new branch and make the current contents of the working directory the contents of this branch.</p>

<p>so this ""checkout"" is not actually a checkout that modifies anything in the working tree, but just creates a branch, switches to it, and leaves the working directory unchanged.
and it is <strong>not about large files</strong>: the average file size is much less than 1mb (40gb/300000=130kb)</p>

<p>currently i do:</p>

<pre><code>git checkout -q -b mynewbranch
git add -v -A
git commit -q -m ""at mynewbranch""
</code></pre>

<p>in principle this works, but the first step to create the branch takes more than an hour (!).
(the ""add"" and ""commit"" take a few minutes, i could live with that.)
the ""git checkout"" seems to re-read the whole working directory just in order to create the branch.</p>

<p>ideally i would want that creating the branch would take almost no time at all,
and its state should simply be based on a previously existing branch.
and then the ""add"" should also not take too much time since timestamps may be used
and not all file contents should be compared to the repository,
only files with new timestamps should be looked at in detail.</p>

<p>has anybody an idea how this can be done efficiently ?</p>

<p>edit: git 2.17, ubuntu, encfs over ext4, recent hardware, 12 cpu, mostly binary files (like pdf, jpeg, mp4; no deep tree; they need to be versioned).</p>

<p>the primary issue is: can it be avoided that just creating a branch looks at the content of all files ?</p>
","7","9634883","",""
"50428589","1223975","2018-05-19 19:06:18","-1","321","<git><git-merge><git-checkout>","Cannot ignore local changes with `git checkout` command","<p>I have this:</p>

<pre><code>$ git checkout -- .
$ git pull
Updating 4411c31..db4498d
error: Your local changes to the following files would be overwritten by merge:
        index.js
        utils.js
Please commit your changes or stash them before you merge.
Aborting
</code></pre>

<p>I keep trying <code>git checkout -- .</code> and it keeps giving me the same message. How do I obliterate the local changes here? I don't wish to keep my changes to index.js and utils.js.</p>
","2","1223975","",""
"32612057","10608","2015-09-16 14:53:06","0","80","<git><git-branch><git-checkout>","git create OR update branch (while checking it out) -- single command","<p>I want to create a new branch and check it out. However, if the branch name I'm creating already exists, I don't want to get an error, I simply want git to update the already existing branch to the point I'm checking it out at.</p>

<p>Here is what I'm doing:</p>

<pre><code>$ git branch
  develop
* foobar
$ git checkout -b develop origin/develop
fatal: A branch named 'develop' already exists.
$ git update-ref refs/heads/develop origin/develop
$ git checkout develop
Switched to branch 'develop'
$ git branch
* develop
  foobar
$
</code></pre>

<p>Here is something like what I want:</p>

<pre><code>$ git checkout --update-if-exists -b develop origin/develop
Switched to branch 'develop'
$ git branch
* develop
  foobar
$
</code></pre>
","0","10608","",""
"16008318","405161","2013-04-15 05:41:45","6","3463","<git><githooks><git-checkout>","Including submodules in git checkout to GIT_WORK_TREE in hook","<p>Is it possible to include submodules when using the following code in a post-update hook?</p>

<pre><code>GIT_WORK_TREE=/path/to/directory git checkout -f
</code></pre>

<p>What other options would I have to distribute code, including submodules from a post-update hook?</p>

<p>Thanks.</p>
","0","405161","0","0"
"16042823","714112","2013-04-16 16:57:51","3","106","<git><git-checkout><git-reflog>","git checkout PREV","<p>Is there a simple way to switch back to the branch you were most recently on prior to the current one? The same concept as ""cd -"" from the command line.</p>

<p>When working on multiple branches, this can be useful.</p>
","0","714112","0","0"
"32729515","2605112","2015-09-23 01:18:48","1","71","<git><vim><github><git-rebase><git-checkout>","How and why does ""git checkout HEAD"" result in different results for ""--theirs"" and ""--ours""?","<p>When I am in the middle of a <code>rebase</code> conflict, I'd like to see the changes that would be instituted by <code>--ours</code> , <code>--theirs</code> and <code>HEAD</code>.  </p>

<p>So, I check out all of them (literally):</p>

<p><code>git checkout --ours &lt;new_file&gt;</code> </p>

<p><code>vim &lt;new_file&gt;</code></p>

<p>...I examine the file...</p>

<p><code>git checkout --theirs &lt;new_file&gt;</code> </p>

<p><code>vim &lt;new_file&gt;</code></p>

<p>...I examine the file...</p>

<p><code>git checkout HEAD &lt;new_file&gt;</code> </p>

<p><code>vim &lt;new_file&gt;</code></p>

<p>...I examine the file...</p>

<p>Then, I go back and checkout <code>theirs</code> and <code>ours</code>:</p>

<p><code>git checkout --theirs &lt;new-file&gt;</code></p>

<p><code>vim &lt;new-file&gt;</code></p>

<p>For some reason, <code>--theirs</code> and <code>--ours</code> have both conformed to the version when I checked out <code>HEAD</code>. I understand the <code>git checkout</code> is supposed to change the working directory and the index, but even when I checkout <code>--theirs</code> <strong>again</strong> it is still like the <code>HEAD</code> version.</p>

<p>How/why is this?  And is there a way to get back my original <code>--theirs</code> and <code>--ours</code> versions?  Thanks.  </p>
","1","2605112","0","0"
"50488030","659503","2018-05-23 12:08:35","4","3423","<git><git-checkout>","Checkout old commit from git based on date","<p>I am trying to retrieve an old commit from git, due to incompatibility with another project (which shares this code).  The git repo is OpenZWave.</p>

<p>I found a post on SO saying to issue command:</p>

<pre><code>git checkout @{14.days.ago}
</code></pre>

<p>But that results in:</p>

<pre><code>warning: Log for '' only goes back to Wed, 23 May 2018 08:02:05 -0400.
HEAD is now at 77a05ed... Update hs-ms100plus.xml
</code></pre>

<p>I can't figure out what's wrong - clearly there are older commits than today's date.  What is wrong with this command?  (And will that command result in my clone being replaced with code from 14 days ago)</p>
","0","659503","0","0"
"32773964","5374546","2015-09-25 02:41:49","0","137","<php><git><git-checkout><undo>","How to undo checkout in git","<p>I searched as much as I could, but I couldn't find any answers. Right now I am panicking that I've lost everything.</p>

<p>I'm working on a project for a php web app, I created some files and then accidentally clicked checkout in soucetree on an earlier revision. Is there any way to recover the previous version (I did commit before the checkout) or is it gone?</p>
","3","5374546","",""
"16283722","350542","2013-04-29 16:31:56","0","122","<git><branch><reset><git-checkout>","How to unstage github changes (reset --hard, checkout both failing)","<p>I've run into a problem wherein i cannot ""back out"" of a branch which I've started merging.  </p>

<ul>
<li>The branch is behind master</li>
<li>By checking out the branch, there are several files left from my last branch (master) that have been committed, but appear to be uncommitted in the context of the current branch</li>
</ul>

<p>Thus, running:</p>

<pre><code>$ git checkout master
</code></pre>

<p>Leaves me with the error:
error: Untracked working tree file 'a' would be overwritten by merge.</p>

<p>I've tried running commands such as ""git checkout -- ."" and ""git reset --hard"" in hopes that git would ""forget"" that i tried to merge this branch with master, or by some other magic, loosen up .  </p>

<p>However, I appear to be permanantly stuck on this branch.</p>
","1","350542","",""
"16364674","2230300","2013-05-03 17:37:13","5","3183","<git><repository><reset><git-checkout><revert>","Revert git repo to previous commit","<p>I have a git problem.  I develop on my local host, push changes to my repo, then pull to my live site. I recently built a page on my localhost, which worked fine.  Then I pushed to my repo and pulled to the live site.  For some reason the changes broke my live site.  For example purposes, here are the hashes of the broken commit and the working commit:</p>

<p><strong> ABCDE 'This commit works on the local host and the live site'</strong><br>
<strong>ZYXWV 'This commit works on local host but not live site'</strong><br></p>

<p>So I made the commit ZYXWV on my local host and pushed it to the repo.  Then I pulled ZYXWV to  my live site, which broke it.  In order to fix my live site I did the following:</p>

<p><strong>git checkout ABCDE</strong><br></p>

<p>So, now my live site is working.  The only problem is that my live site is not in sync with my repo, which means I can't pull any changes without getting the broken code.  I don't need the broken code and am okay if it gets deleted.  I just need a way to get the repo in sync with ABCDE again.</p>

<p>I hope that made sense.  I am not that great with git.  Thanks for your help.</p>
","0","2230300","",""
"33785039","3240681","2015-11-18 16:15:45","3","1121","<git><wildcard><git-checkout>","Git: pathspec 'path' did not match any file(s) known to git","<p>I want to discard my local changes for a lot of files, which names corresponds some of wildcard pattern (for example <code>prefix*</code>)</p>

<p>I tried do it with command:</p>

<pre><code>git checkout prefix*
</code></pre>

<p>But got errors because of existance a local untracked files suitable for wildcards. Files are untracked because they are mentioned in <code>.gitignore</code> (e.g. *.log):</p>

<pre><code>pathspec 'prefix.log' did not match any file(s) known to git.
</code></pre>

<p>How to revert a lot of files (using wildcards) if i have local untracked files with corresponding names?</p>
","4","3240681","",""
"33785630","1134934","2015-11-18 16:42:47","0","906","<git><git-checkout><git-tag>","How to chown/chmod after tag checkout in git?","<p>On a live environment I need to fetch tags and simply switch between them. After every switch, I need to chown/chmod all files inside the worktree.</p>

<p>I've created a <code>post-checkout</code> hook</p>

<pre><code>#!/bin/bash
chown -R www-data:www-data public/
find public/ -type f -exec chmod 400 {} \;
find public/ -type d -exec chmod 500 {} \;
</code></pre>

<p>The <code>.git</code> dir is outside of the public dir, so I've added the following to the git config.</p>

<pre><code>worktree = /var/www/site/public
</code></pre>

<p>Now I execute the following commands</p>

<pre><code># git fetch --tags
# git checkout 0.0.1
</code></pre>

<p>But the <code>post-checkout</code> hook does not get executed. Whats wrong?</p>

<p>Another question: What is the relative path of the hook? Is it the same dir where <code>.git</code> lies or is it <code>public/</code>?</p>
","1","1134934","",""
"17319517","2373881","2013-06-26 12:04:55","6","22129","<git><branch><git-commit><git-checkout>","how to list all uncommitted changes made only in current branch in git","<p>I am a newbie to git initially i used to work only on master branch then i read a little about git branching and i was amazed by it power so i started using branches in my workflow </p>

<p>when i started with branching my master branch was clean nothing to commit.
Then I created new branch <strong>feature1</strong></p>

<pre><code>git checkout -b feature1
</code></pre>

<p>i made my changes in branch <strong>feature1</strong> added some js and css files . Then i created another branch from master branch without committing changes made to branch <strong>feature1</strong> like so :</p>

<pre><code>git checkout master
git checkout -b feature2
</code></pre>

<p>i added some more code in <strong>feature2</strong> branch and added some new css files and then again i created another branch <strong>feature3</strong> from master with committing changes in branch <strong>feature2</strong> like this :</p>

<pre><code>git checkout master
git checkout -b feature 3
</code></pre>

<p>I added some new code in <strong>feature3</strong> branch with 1 new css file . now when i did :</p>

<pre><code>git status
</code></pre>

<p>I got list of all files which i modified but not committed in all the 3 branches . I was expecting that i will get only list of file modified in current branch i.e branch <strong>feature3</strong> , now i don't remember which files I created in which branch . </p>

<p>Can anyone please help me to list only files i created or modified in particular branch and commit them. to respective branches .</p>

<p>For e.g</p>

<p>list all files modified or created in <strong>feature1</strong> branch and commit them to <strong>feature1</strong> branch and do this with all 3 branches.</p>

<p>I also want to know how i can create a branch from master branch without getting other files which are modified in other branch but not committed . i.e i want the new branch to be exact clone of master with noting to commit.</p>
","0","2373881","",""
"18097680","661933","2013-08-07 07:53:21","1","3135","<git><directory><subdirectory><git-checkout>","Get all files in a directory recursively from a particular git commit","<p>My folder structure looked like this:</p>

<pre><code>root -&gt; Model -&gt; Simulation -&gt; (many sub directories and files in it)
</code></pre>

<ol>
<li><p>I committed it and the sha is <code>022f5fb</code>. </p></li>
<li><p>Later I deleted the <code>Simulation</code> folder. And it was committed. </p></li>
<li><p>And then many commits were committed all which involved addition of new files and removal of certain other etc etc.</p></li>
</ol>

<p>Now I need to get the <code>Simulation</code> folder and all the files in it recursively (at the time of commit <code>022f5fb</code>) to the current working directory.</p>

<p>I know I have to do something with <code>git checkout 022f5fb</code> or something but that will checkout the whole working directory. I only need <code>Simulation</code> folder and its contents.</p>

<p>Is it possible?</p>
","0","661933","",""
"18114774","709943","2013-08-07 22:17:39","4","116","<git><git-checkout><git-reset>","What is the point for git reset accepting paths as an argument when we have git checkout?","<p>I understand <code>git reset</code> updates the index, whereas <code>git checkout</code> updates the working copy. What I don't understand is the use case that requires <code>git reset</code> to accept an argument for reference and path? It seems I would always want to use <code>git checkout</code> in this case?</p>

<p>This comes up all the time when folks ask why they can't <code>git reset some-ref --hard -- some/path/to/file</code>. The real question is why <code>git reset</code> even accepts <code>git reset some-ref -- some/path/to/file</code> when we have <code>git checkout</code>.</p>

<p>Never thought of this till teaching someone the difference between the two.</p>
","3","709943","0","0"
"34733284","4539349","2016-01-11 23:53:07","1","172","<git><git-checkout>","git checkout and file directory behavior","<p>I have been exploring git and I noticed that when I checkout different branches in terminal I notice the changes reflected in finder.  So, if <code>branchA</code> has file1 and <code>branchB</code> has file1 as well as file2 and i run <code>git checkout branchA</code>, I look in finder I see file1 in my git directory.  But if I run <code>git checkout branchB</code> and look in finder I see file1, file2.  Ok, great.  It seems git modifies the current directory based on which branch is checked out.</p>

<p>However, I recently cloned a remote repo.  Lets say master has file1 in it and that is it.  I am in master.  I than create newBranch and checkout to it.  I run <code>echo ""test"" &gt; test.txt</code>.  Now when I checkout either branches test.txt shows in finder.  But I added text.txt while I was checked out in newBranch, not master.  </p>

<p>I feel uneasy about seeing this new text.txt file in the finder directory even when i checkout back to master.  Shouldn't it revert to the initial state after cloning.  When it only contained file1?  And I will see file1 + test.txt when I checkout to the new branch where I actually added it.  How can I understand this behavior?</p>
","0","4539349","",""
"34740121","1340942","2016-01-12 09:42:39","1","363","<git><branch><git-checkout>","git checkout master does not restore files","<p>I have a repo, being at master. I do <code>git checkout -b new_branch</code> and change, add and commit some files to <code>new_branch</code>. Doing <code>git checkout master</code> keep the files state as they were in <code>new_branch</code>, so I have to do a <code>git checkout -- .</code> on <code>master</code> to get all files to <code>master</code> state. </p>

<p>If I now change back and forth between the branches everything is updated like I expect them to. What am I doing wrong? </p>

<p>EDIT: This seems to be a bug with Atom, the text editor I am using. See <a href=""https://github.com/atom/atom/issues/4982"" rel=""nofollow"">this issue</a></p>
","4","1340942","0","0"
"18248766","928763","2013-08-15 08:18:46","3","2131","<git><git-checkout><git-reset>","git checkout -f master VS git reset","<p>I want to revert all the uncommited changes in current branch say '<code>master</code>'. Whats the best one to use amoung the following and WHY??:</p>

<ol>
<li><code>git checkout -f master</code></li>
<li><code>git reset --hard &lt;last commitID&gt;</code></li>
</ol>
","2","928763","",""
"50912342","3511736","2018-06-18 14:58:41","0","496","<git><git-branch><git-checkout><git-tag>","Checkout git tags present on multiple branches","<p>I read a lot of SO posts but none of them make me understand how really work git tags especially concerning their link with branches. I think it is due to a misunderstanding of git principles. Maybe someone could help me.</p>

<p>Let's say I have the following two branches <code>master</code> and <code>develop</code> with <code>K</code> the merging commit:</p>

<pre><code>-A-B-C-D-E-F-G-K-L-M (master)
       \-H-I-J-/     (develop)
</code></pre>

<p>If I tag the <code>J</code> commit, this tag will be on the two branches (because of the merge).
So when I <code>checkout</code> this tag, what version would I have? The one containing the <code>E</code>,<code>F</code>,<code>G</code> commits of the <code>master</code> branch or the one from the <code>develop</code> branch. Not sure I am clear about what I want to understand. I know that tags does not reference branch but only commit. But checkouting a tag also recover a commit historic doesn't it?</p>
","8","3511736","0","0"
"4468322","305340","2010-12-17 06:40:40","48","12486","<git><git-branch><git-checkout>","Switch current branch in git bare repository","<p>I actually want to remove a branch in the bare repository i am working with, but this task hits a dead end because I cannot switch away from the master repository without a 'work tree' which a bare repository does not have.</p>

<p>When I run <code>git branch -d master</code> the output is:</p>

<pre><code>error: Cannot delete the branch 'master' which you are currently on.
</code></pre>

<p>So I try to switch to another branch called 'develop' by running <code>git checkout develop</code> and the output is:</p>

<pre><code>fatal: This operation must be run in a work tree
</code></pre>
","2","305340","0","0"
"41888489","2218640","2017-01-27 07:03:02","3","13407","<git><git-pull><git-checkout><git-fetch>","git fetch not working - but checkout working","<p>I am beginner to git and trying some hands on with it on Windows.</p>
<p>I made a repository on Bitbucket. Added Three files ( SAY A , B , C ) to the master branch via Bitbucket online .</p>
<p>Now  i have folder on my local PC , where i used <code>git fetch</code> for getting those three file. Three files are now in local repository.</p>
<p>Now , i added one other file (SAY D )  on bitbucket , and changed the content of all three files (A , B , C ) .</p>
<p>Now if i try to fetch the changes via <code>git fetch MY_REMOTE master</code>  ,  I am not getting any changes in my local. but</p>
<ul>
<li><p>with <code>git pull MY_REMOTE master</code> , I am able to see the changes.</p>
</li>
<li><p>with <code>git checkout MY_REMOTE/master</code> , I am able to see the changes.</p>
<p>So the doubt i have ,</p>
</li>
<li><p><code>git fetch</code> simply copies the changes those are not on the local to the local repo except Local repo have changed the same copy. Why <code>git fetch</code> is not working here ?</p>
</li>
<li><p>I don't understand the purpose of doing <code>git checkout MY_REMOTE/master</code> on Local . Why should i do that ?</p>
</li>
</ul>
","0","2218640","0","0"
"50948576","2261538","2018-06-20 12:43:30","0","253","<git><git-merge><git-checkout>","Crashed merge: How does git handle uncommitted changes during a checkout with merge?","<p>So a hard crash occurred during a <code>git checkout --merge</code>.</p>

<p>It left the repository in a messed up state - and the uncommitted seems to be gone, although not 100% sure.</p>

<p>In hindsight, perhaps I should have stashed or committed the uncommitted changes first - but then again, whats the point of the that command in the first place (?).</p>

<p>So the question is, if anyone knows what Git does with the uncommitted changes in this case? Are they lost for good or stored in some temporary location? If only they get stored in memory during the process, then I guess it's a lost cause trying to dig them out from somewhere.</p>

<p>Looking at the docs, they doesn't seem to go into details about the process itself <a href=""https://git-scm.com/docs/git-checkout"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-checkout</a>.</p>
","8","2261538","0","0"
"18525152","2731584","2013-08-30 04:50:31","61","47757","<git><clone><commit><git-checkout>","git clone and checkout in a single command","<p>The following is the command I use to checkout a specific commit.</p>

<pre><code>git clone git://repo.git/repo123
git checkout &lt;commitID&gt;
</code></pre>

<p>I want to do the above in one step - using a git clone command only. </p>

<p>The reason why I want to do this is, repo123 is very huge. So checking out the commit I want will save me a lot of time.</p>

<p>I am aware of <code>--depth</code> option. But in this case, it is of no use. Can anyone tell me how to do it?</p>
","1","2731584","0","0"
"22959549","1608058","2014-04-09 10:19:15","10","3535","<git><git-checkout>","Undo git checkout overwrite of uncommitted files","<p>I had used the command git checkout -- <code>$(git ls-files -m)</code> to undo a git <code>rm</code> on some files. However, I had modified some other files without committing them, and these files have been reverted to their previous commit, losing the uncommitted changes.</p>

<p>Is there a way to get these changes back?<br/>
I imagine not with git as the changes weren't added to git. On a Mac if that helps.</p>

<p>Thanks
Tom</p>
","4","1608058","0","0"
"42207230","6530024","2017-02-13 15:07:43","16","25852","<git><bash><git-checkout>","Git Checkout hangs indefinitely with git bash. How to solve?","<p>I have been working on a project in the develop branch using git bash on my work computer.  I have just attempted to checkout to the master branch as I intend to merge the changes, but when I attempt to do this the command line hangs indefinitely until I kill it with CTRL + C.</p>

<p>If I attempt to checkout again, I get the following error:</p>

<blockquote>
  <p>Another git process seems to be running in this repository, e.g.
      an editor opened by 'git commit'. Please make sure all processes
      are terminated then try again. If it still fails, a git process
      may have crashed in this repository earlier:
      remove the file manually to continue.</p>
</blockquote>

<p>However, after deleting the index.lock file, attempting to use git checkout once again simply hangs in the terminal and never makes any progress until I kill the process once again!  Etc.!</p>

<p>Has anyone come across this, and if so, how did you go about solving this issue?</p>
","6","6530024","0","0"
"5094993","520548","2011-02-23 18:05:12","9","1380","<git><commit><rebase><git-checkout><git-fetch>","Strange behavior with git fetch","<p>I'm getting a big problem with GIT fetch...look this</p>

<pre><code>$ git fetch
From server:project
   422b4cb..a04c062  master     -&gt; origin/master

$ git show-ref
ba113be885e66a5306d1646cd3db0801170c04f8 refs/heads/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/master
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/test
a04c062261beeb4a951337ebb58745945cac3562 refs/remotes/origin/HEAD
ba113be885e66a5306d1646cd3db0801170c04f8 refs/remotes/origin/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/remotes/origin/master
</code></pre>

<p>And another <code>git fetch</code>:</p>

<pre><code>$ git fetch
From server:project
 + a04c062...422b4cb HEAD       -&gt; origin/HEAD  (forced update)

$ git show-ref
ba113be885e66a5306d1646cd3db0801170c04f8 refs/heads/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/master
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/test
422b4cbac3db2784c8f6e94ffd99c7afcda9122d refs/remotes/origin/HEAD
ba113be885e66a5306d1646cd3db0801170c04f8 refs/remotes/origin/alpha-release
422b4cbac3db2784c8f6e94ffd99c7afcda9122d refs/remotes/origin/master
</code></pre>

<p>And another one...</p>

<pre><code>$ git fetch
From server:project
   422b4cb..a04c062  master     -&gt; origin/master

$ git show-ref
ba113be885e66a5306d1646cd3db0801170c04f8 refs/heads/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/master
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/test
a04c062261beeb4a951337ebb58745945cac3562 refs/remotes/origin/HEAD
ba113be885e66a5306d1646cd3db0801170c04f8 refs/remotes/origin/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/remotes/origin/master
</code></pre>

<p>And another <code>git fetch</code>:</p>

<pre><code>$ git fetch
From server:project
 + a04c062...422b4cb HEAD       -&gt; origin/HEAD  (forced update)

$ git show-ref
ba113be885e66a5306d1646cd3db0801170c04f8 refs/heads/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/master
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/test
422b4cbac3db2784c8f6e94ffd99c7afcda9122d refs/remotes/origin/HEAD
ba113be885e66a5306d1646cd3db0801170c04f8 refs/remotes/origin/alpha-release
422b4cbac3db2784c8f6e94ffd99c7afcda9122d refs/remotes/origin/master
</code></pre>

<p>My <code>refs/remotes/origin/HEAD</code> and <code>refs/remotes/origin/master</code> always force update to <code>422b4cb</code>...</p>

<p>What happened? <code>422b4cb</code>... is a old commit.</p>
","0","520548","0","0"
"42422464","4127646","2017-02-23 17:27:41","1","3160","<git><git-submodules><git-checkout>","Git ""fatal: no submodule mapping found in .gitmodules for path.."" but no submodule reference found","<p>I have pulled a company repo down and started working; the initial branch was <code>master</code>.  In attempting to <code>git checkout</code> I'm encountering the following error consistently <em>(backslash = line break)</em>:</p>

<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false -c \
    credential.helper=sourcetree checkout master 
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.  #so far, so good..


git -c diff.mnemonicprefix=false -c core.quotepath=false \
     -c credential.helper=sourcetree submodule update --init --recursive 
fatal: no submodule mapping found in .gitmodules for path 'vendor/omnipay/pin'
Completed with errors, see above
</code></pre>

<p>I have searched for answers on this but all of them involve the presence of some reference to <code>submodule</code> somewhere, including <a href=""https://stackoverflow.com/questions/4185365/no-submodule-mapping-found-in-gitmodule-for-a-path-thats-not-a-submodule"" title=""this one here"">this one here</a>.  However:</p>

<ol>
<li><p><code>.git/config</code> - contains no reference to submodule(s) at all</p></li>
<li><p><code>vendor/omnipay/pin</code> - this directory is empty including no hidden dot-files.</p></li>
<li><p>There is no string <code>submodule</code> in vendor/omnipay or even vendor/ for that matter</p></li>
</ol>

<p>Again, other posts don't seem to apply as there is no file or submodule line to reference/remove.  What is the problem here and how do I fix it?</p>
","5","4127646","0","0"
"42992997","7162485","2017-03-24 06:39:59","3","12350","<git><git-checkout>","meaning of the command ""git checkout .""","<p>While I understand that the command in the title is akin to undo the changes to the current repository, I am unable to understand how it actually works or how to read the command. Any leads would be a great help.</p>
","4","7162485","",""
"7097360","675646","2011-08-17 18:04:38","9","13851","<php><git><git-checkout>","Checkout of git repository in pure PHP","<p>I need to to a git checkout in pure PHP.
I already tried this ( <a href=""http://www.phpclasses.org/package/5310-PHP-Retrieve-project-files-from-GIT-repositories.html"" rel=""nofollow"">http://www.phpclasses.org/package/5310-PHP-Retrieve-project-files-from-GIT-repositories.html</a> ) with HTTP and SASL, but I didn't really work.
Then I took a look at GLIP ( <a href=""https://github.com/patrikf/glip"" rel=""nofollow"">https://github.com/patrikf/glip</a> ), but that doesn't seem to have any functionality like this.
Basically I need to</p>

<p>-replicate/clone a remote git repository</p>

<p>-""extract"" master branch files into a specified directory</p>

<p>The main problem with PHP GIT is, that it just didn't supported all possible changes you could do in a commit. Only new files, no moving around of files. And it was also unable to extract files.</p>

<p>/edit:
git is not installed and I also cannot install git</p>
","1","675646","0","0"
"7101151","365261","2011-08-18 00:42:27","1","280","<git><search><ant><git-checkout>","How do I use git to checkout just the files and their parent folders that have a given file extension?","<p>We would be using this inside an Ant build script running under TeamCity.</p>
","3","365261","",""
"6918837","817740","2011-08-02 21:25:11","17","4359","<git><reset><git-checkout>","What's the difference between git reset file and git checkout file?","<p>Why is it that git allows me to reset a file? I thought I understood <code>reset</code>, in the sense that it was moving the HEAD ... clearly I was wrong.</p>

<p>So, <code>git reset sha file</code> seems to do the same as <code>git checkout sha file</code>, with the exception that I see <code>file</code> in the index and in the working directory.</p>

<p>It doesn't make sense to me. Can someone please explain the difference?</p>
","1","817740","0","0"
"25178016","999162","2014-08-07 08:46:45","2","180","<git><git-checkout>","How to search for an old git commit for when a feature broke","<p>while tracking down when a feature broke I identified a commit waaay in the past where the feature still worked. Now I'd like to incrementally checkout newer commits to see when the feature broke, without having to identify them by hash, but rather, relative to the hash I identified (where the feature still worked).</p>

<p>Is there a way to do something like this:</p>

<pre><code>git checkout ""COMMITHASH + X COMMITS NEWER (closer to master)""
</code></pre>

<p>or after having checked out a commit:</p>

<pre><code>git checkout ""X COMMITS NEWER (closer to master)""
</code></pre>

<p>Other solutions to the problem welcome as well, but still I am wondering if there is syntax like my pseudo statements above, something like <code>HASH~1</code> but in inverse direction.</p>
","1","999162","",""
"7206801","10771","2011-08-26 15:09:11","935","119697","<git><git-checkout>","Is there any way to git checkout previous branch?","<p>I sort of want the equivalent of <code>cd -</code> for git. If I am in branch <code>master</code> and I checkout <code>foo</code>, I would love to be able to type something like <code>git checkout -</code> to go back to <code>master</code>, and be able to type it again to return to <code>foo</code>.</p>

<p>Does anything like this exist? Would it be hard to implement?</p>
","7","10771","0","0"
"7254731","228517","2011-08-31 08:59:54","0","549","<git><branch><tracking><git-checkout>","'git pull' branch only","<p>I have a git cloned repository.</p>

<p>The purpose of this repo is <code>git log</code>, as long there is no such thing as <a href=""https://stackoverflow.com/questions/6924922/git-log-over-ssh-remote-repository"">git log over ssh</a>.</p>

<pre><code>$ git ls-remote

ac118076af0ca4c164a831b9e31b1a307747ec36        refs/heads/master
db1253eae8241aa0813d5a49880c41cd810216c2        refs/heads/production/version-2011.10
32c2dcad3133c8214c0d0e898e32b7a7a9f068cf        refs/heads/release/version-2011.11
</code></pre>

<p>I would like to set-up a read-only branch only for <code>git pull</code> from remote machine (tracking branch?!).</p>

<pre><code>$ git branch -tb version-2011.11 refs/heads/release/version-2011.11

fatal: git checkout: updating paths is incompatible with switching branches.
Did you intend to checkout 'refs/heads/release/version-2011.11' which can not be resolved as commit?

$ git checkout -tb version-2011.11 release/version-2011.11

fatal: git checkout: updating paths is incompatible with switching branches.
Did you intend to checkout 'release/version-2011.11' which can not be resolved as commit?
</code></pre>

<p>In future:</p>

<ul>
<li>release/2011.11 will become a production/2011.11</li>
<li>master -> release/version-2011.12</li>
<li>and so on...</li>
</ul>

<p>any suggestions?</p>
","0","228517","",""
"7552089","614157","2011-09-26 07:55:02","4","814","<git><git-checkout>","Why does 'git checkout' work only for some branches?","<p>Here is the result of two checkouts: why the second is failing? 'git status' shows some files have been modified, but I am sure I haven't touched those files.</p>

<pre><code>praveensripati@MyMini:~/Hadoop/Git/hadoop-common$ git checkout branch-0.21  
Switched to branch 'branch-0.21'  

praveensripati@MyMini:~/Hadoop/Git/hadoop-common$ git checkout branch-0.20  
error: The following untracked working tree files would be overwritten by checkout:  
    CHANGES.txt  
    LICENSE.txt  
    README.txt  
    bin/hadoop  
    bin/hadoop-daemon.sh  
    bin/hadoop-daemons.sh  
Please move or remove them before you can switch branches.  
Aborting

praveensripati@MyMini:~/Hadoop/Git/hadoop-common$ git status
# On branch trunk
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   CHANGES.txt
#   LICENSE.txt
#   README.txt
#   bin/
#   build.xml
#   conf/
#   lib/
#   site/
#   src/
nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>
","3","614157","0","0"
"25993871","245549","2014-09-23 11:24:34","7","32954","<git><git-checkout><git-stash>","What is the difference between git-stash and git-checkout?","<p>I try to go from one local branch to another one. Git tells me that I cannot do it because my <code>local changes to the following files would be overwritten by checkout</code>.</p>

<p>Then I get a ""recommendation"" <code>Please, commit your changes or stash them before you can switch branches</code>.</p>

<p>I know that I do not need the changes to the mentioned file. It is OK to overwrite them. So, I try to <code>stash</code>. I execute <code>git stash file_name</code>. As a result I get:</p>

<pre><code>Usage: git stash list [&lt;options&gt;]
   or: git stash show [&lt;stash&gt;]
   or: git stash drop [-q|--quiet] [&lt;stash&gt;]
   or: git stash ( pop | apply ) [--index] [-q|--quiet] [&lt;stash&gt;]
   or: git stash branch &lt;branchname&gt; [&lt;stash&gt;]
   or: git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
               [-u|--include-untracked] [-a|--all] [&lt;message&gt;]]
   or: git stash clear
</code></pre>

<p>OK. It does not work. Then I try <code>git checkout file_name</code>. No complains from git. Then I can switch from one branch to another one. So, it seems that I got what I needed (go to the second branch without saving changes to the first branch).</p>

<p>However, I would like to ask why <code>stash</code> did not work, and how the final result would be different in case it had worked?</p>
","4","245549","0","0"
"26036086","537554","2014-09-25 10:18:47","1","201","<git><sparse-matrix><git-checkout>","an empty .git/info/sparse-checkout is not the same as a missing one, but the opposite, why?","<p>First <code>core.sparsecheckout</code> is set to <code>true</code>.</p>

<p>And I created an empty <code>.git/info/sparse-checkout</code> file. This causes I'm not able to checkout a new branch recently fetched from remote.</p>

<p>Then I tried to delete the empty <code>.git/info/sparse-checkout</code> file, and now I can checkout.</p>

<p>I understand the fact, and I know I can include <code>/*</code> in <code>.git/info/sparse-checkout</code> to make it work.</p>

<p>I just wonder why? what's the rational behind this? isn't it confusing?</p>

<p>As to me, both an empty <code>sparse-checkout</code> file, and a missing one, are saying: ""nothing is specified to go with sparse checkout"", therefore git should checkout everything.</p>

<p>I guess what I need is a more convincing explanation of the current choice, not how this is implemented.</p>
","0","537554","0","0"
"7902144","247243","2011-10-26 11:47:00","17","18078","<git><git-branch><git-checkout>","How the working directory is updated on ""git checkout""?","<p>Consider the following ""story"":</p>

<pre><code>$ mkdir my_project
$ cd my_project
$ git init
Initialized empty Git repository in /home/misha/misha/my_project/.git/

$ echo ""first line"" &gt; hello.txt
$ git add hello.txt
$ git commit -m ""first commit""
[master (root-commit) 9c913a1] first commit
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 hello.txt

$ git branch new_feature
$ git checkout new_feature
Switched to branch 'new_feature'
$ echo ""second line"" &gt;&gt; hello.txt
$ cat hello.txt
first line
second line

$ git checkout master
M    hello.txt
Switched to branch 'master'
$ cat hello.txt
first line
second line
</code></pre>

<p>Why <code>hello.txt</code> has two lines on branch <em>master</em>? (I thought that <code>git checkout</code> will revert the working directory to the previous state, i.e. <code>hello.txt</code> will have only one line.)</p>

<p>What actually happens behind the scenes to the working directory on <code>git checkout</code>? How it is updated?</p>
","0","247243","0","0"
"23160844","2370337","2014-04-18 19:24:51","1","95","<git><commit><git-checkout>","Hey git, what happened to the last commits?","<p>I just used <code>check out head</code> after making a commit.  I figured that doing this checkout would not actually do anything, but I seem to have been wrong.  It put me into a 'detached head' state.  I ignored this note, and continued to make a few additional commits.  The message change to 'Head detached from ...'  Feeling a bit annoyed by this, I looked for a way to fix it.  The answer I found was <code>git checkout master</code>.  I did this and now my last few commits disappeared.  What happened here?</p>
","0","2370337","",""
"42367510","5032083","2017-02-21 12:34:47","1","32","<git><git-commit><git-checkout>","git - Recover commits that were deleted with checkout","<p>I was 2 commits ahead of Github. I did <code>git checkout</code> and these commits were deleted. I tried recover the files in .git folder to a previous version using the Dropbox history. I ran <code>git status</code> and showed that I was again 2 commits ahead, I got happy, commited and pushed to Github only to see that I didn't recover at all.  </p>

<p><strong>tl;dr</strong>: Lost 2 commits with git checkout</p>
","4","5032083","",""
"42540353","1723707","2017-03-01 19:28:43","0","15","<git><bash><git-checkout>","Creating an alias and appending variable with text not working with git checkout","<p>I've created an alias in my <em>.bash_profile</em></p>

<pre><code>alias gco=""git checkout origin/${1}""
</code></pre>

<p>but whenever I try to call a command like this:</p>

<pre><code>gco master
</code></pre>

<p>it responds with:</p>

<pre><code>error: pathspec 'origin/' did not match any file(s) known to git.
error: pathspec 'master' did not match any file(s) known to git.
</code></pre>

<p>Could anyone help me understand why its returning these errors and not just concatenating the text properly? Thanks!</p>
","5","1723707","",""
"23403900","2204621","2014-05-01 07:39:45","1","80","<git><git-log><git-checkout>","git commit nolonger showing up in log","<p>Yesterday I git-commited, then checked out multiple old commits and also used <code>stash</code> on some of them. </p>

<p>Now yesterday's commit is no longer showing up in <code>git log</code>. </p>

<p>I dont know the tree-ish but i know the exact comment i used. </p>

<p>I tried checking out the most-recent before yesterday's commit but it still does not show up in the log-tree.</p>

<p>Is there some way to checkout or search by the comment i gave it? (Also is there a reason why it nolonger shows up in <code>git log</code>?)</p>
","2","2204621","",""
"34413707","","2015-12-22 10:31:20","7","2248","<git><git-clone><git-checkout>","git clone, ""checking out files"" phase skipped","<pre><code>ubuntu@site3-user03:/projects$ git clone git://git.alsa-project.org/alsa-driver.git  
</code></pre>

<p>was carried out. It resulted in following output  </p>

<pre><code>Cloning into 'alsa-driver'...
remote: Counting objects: 208801, done.
remote: Compressing objects: 100% (41538/41538), done.
remote: Total 208801 (delta 162528), reused 206283 (delta 160012)
Receiving objects: 100% (208801/208801), 37.00 MiB | 1.53 MiB/s, done.
Resolving deltas: 100% (162528/162528), done.
Checking connectivity... done.
ubuntu@site3-user03:/projects$
</code></pre>

<p>However, for some unknown reason the clone process did not include the stage
<em>Checking out files: 100% (xyz/zyx), done.</em><br>
Usually the clone process includes checkout to working space. In end-effect my private fork has empty working space and myself has to decide where to branch out which might not be straightforward.  </p>

<pre><code>ubuntu@site3-user03:/projects/alsa-driver$ git ls-remote origin
a1c6fbc1a65d8a755425d0b56077868148512891    HEAD
1721fb542b00f1c7aebc923732068f403b6062ad    refs/heads/build
a1c6fbc1a65d8a755425d0b56077868148512891    refs/heads/master
71b3b2b41dfbdeda78e2e7b62fe2afa8b451fb6e    refs/heads/mirror
b044dfe04f636d87fd391b575ba41e495e68e973    refs/heads/release
6386d9e39e6f364698648f4e4741897f83b00121    refs/tags/build/v1.0.1
234b00ebe6e1513c3ce8cdd83999c255bd5516eb    refs/tags/build/v1.0.10
f888eb06d4c7af89faa2f9dda189d488312ecb07    refs/tags/build/v1.0.10rc1
e4c4d1037521f536b79f8d145979ec869db353f9    refs/tags/build/v1.0.10rc2
....
many more tags
</code></pre>

<p>My expectation is the clone carries out the check-out based on remote's HEAD which points to certain commit on remote.<br>
<strong>What is the possible reason of the check-out stage had been skipped?</strong><br>
During the clone process was in progress I created small readme file in the working space. However that file stays untracked up to this moment. There is no plan to track that file.<br>
<strong>Can this file creation have disturbed clone process so it could not include check-out stage?</strong>  </p>

<pre><code>ubuntu@site3-user03:/projects$ git clone git@git.alsa-project.org:alsa-driver.git alsa-driver  
Cloning into 'alsa-driver'...  
The authenticity of host 'git.alsa-project.org (77.48.224.243)' can't be established.  
RSA key fingerprint is f1:0e:a7:1f:bc:1b:9f:71:00:85:c9:4a:8a:d9:d6:33.  
Are you sure you want to continue connecting (yes/no)? no   
Host key verification failed.  
fatal: Could not read from remote repository.  

Please make sure you have the correct access rights  
and the repository exists.  
ubuntu@site3-user03:/projects$
</code></pre>

<p>So, I aborted it because am used to have straightforward clone process, furthermore not the slightest idea about all resulting effects on confirming to continue on unauthenticated host.</p>

<pre><code>git help clone
</code></pre>

<p>and the examples made there use among others following URL format  </p>

<pre><code> The following syntaxes may be used with them:
   ·   git://host.xz[:port]/path/to/repo.git/
   ·   http[s]://host.xz[:port]/path/to/repo.git/
   ...
 git clone git://git.kernel.org/pub/scm/.../linux.git my-linux
 git clone --reference /git/linux.git \
                   git://git.kernel.org/pub/scm/.../linux.git \
                   my-linux
·   Create a bare repository to publish your changes to the public:
    git clone --bare -l /home/proj/.git /pub/scm/proj.git
</code></pre>

<p>As for used setup following applies as well:  </p>

<pre><code>ubuntu@site3-user03:/$ sudo find / -type f -name known_hosts
[sudo] password for ubuntu: 
ubuntu@site3-user03:/$ 
</code></pre>

<p>One time in the past I have had similar effect with other clone. That time it was clone of Linux kernel public repo for MSM SoC. However, that time the clone process generated also some message of the kind ""unable to clone because no ??? found on remote"". Forgotten what ??? read. So in the end-effect I had also to do check-out manually subsequently to clone process. However, such warning did not come in this case, forking alsa-driver public repo.</p>
","0","","",""
"34464883","3254515","2015-12-25 17:21:53","-1","145","<git><git-checkout>","Override a file using git checkout does not warn about losing changes","<p>I recently found out I could override a file from my tracking remote branch doing the next : ""git checkout origin/remoteBranchName nameFile.txt"". But I have some questions: </p>

<ol>
<li><p>Having changes in this file not commited, executing the command does not warn about losing changes and when switching to other branch it does. Why?</p></li>
<li><p>I tried to override using hard reset but I think you cannot do it with one file. Why?</p></li>
</ol>

<p>Thanks</p>
","0","3254515","",""
"50844087","1792086","2018-06-13 18:37:33","27","51663","<git><git-checkout><git-fetch>","What's the difference among ""git fetch && git checkout"" versus ""git checkout"" only?","<p>Should do we always do as: </p>

<pre><code>git fetch &amp;&amp; git checkout
</code></pre>

<p>Or only, </p>

<pre><code>git checkout
</code></pre>

<p>?</p>

<p>For example when doing a checkout from a branch in bitbucket they provide the command as: </p>

<p><a href=""https://i.stack.imgur.com/zUmsV.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/zUmsV.png"" alt=""enter image description here""></a></p>

<pre><code>git fetch &amp;&amp; git checkout develop
</code></pre>

<p>But why is this necessary if </p>

<blockquote>
  <p>git checkout</p>
</blockquote>

<p>will do the same, isn't it? </p>
","0","1792086","0","0"
"69191231","2318353","2021-09-15 10:19:15","-1","256","<git><git-checkout>","What does the command `git checkout . path/to/file.php` do?","<p>I have several modified files, my <code>git status</code> looks like</p>
<pre class=""lang-sh prettyprint-override""><code>$ git status
On branch loyalty-module
Your branch is up-to-date with 'origin/loyalty-module'.
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

    modified:   this/is/a/path/to/AFile.php
    modified:   this/is/another/file/A.php
    modified:   this/is/another/file/B.php

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

    system/logs/test.log
    system/logs/test-api.log

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>Accidentally, I run this command <code>git checkout . this/is/a/path/to/AFile.php</code>. Notice the period!</p>
<p>When, I run the <code>git status</code> again, all I've got is the <em>Untracked files</em>.</p>
<pre class=""lang-sh prettyprint-override""><code>$ git status
On branch loyalty-module
Your branch is up-to-date with 'origin/loyalty-module'.
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

    system/logs/test.log
    system/logs/test-api.log

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>What does <code>git checkout .</code> do? And how can I retrieve those <code>modified</code> files again?</p>
","3","2318353","",""
"19030192","1860929","2013-09-26 13:51:52","8","2859","<git><git-log><git-checkout>","Get snapshot of a git repo on a particular date","<p>Say I have a repo with multiple banches.</p>

<p>Is it possible to get the repo snapshot of some particular date/time using usual git foo?
(We currently have code dumps every day, and I am thinking of ways to remove that)</p>

<p>(Assuming no branches are permanently deleted, and the git commit history hasn't been played with)</p>

<p>Edit: Interim branch merges are possible.</p>
","0","1860929","0","0"
"19033763","","2013-09-26 16:32:45","0","61","<git><git-branch><git-pull><git-checkout><git-fetch>","Understanding git fetches and your local repo","<p>I read that, after doing a <code>git fetch</code>, your local repo has all the commits from the original repo, but that they are ""not yet integrated into the cloned repository's local branches"".</p>

<p><strong>What does this mean/imply?</strong></p>

<p>Do I then need to checkout my branch to pull the changes down into my local working copy? Or does it imply something else? Thanks in advance!</p>
","0","","",""
"51081005","9968701","2018-06-28 10:49:47","1","155","<git><clone><git-pull><git-clone><git-checkout>","Checking out specific file from git repository","<p>I have a git repository named demo.In that git i have a file named details.This details file contains some filenames listed in it.My requirement is that when i checkout the repository, I want only the files whose names are in details file to be pulled and other files shouldn't be checked out.I have tried sparse  checkout , but sparse checkout helps to pull files of a sub directory in a repository while my need is that the files which are listed in details file alone should be checked out.Could you suggest me ways to do it?</p>
","2","9968701","0","0"
"35515155","3337819","2016-02-19 21:14:41","-1","306","<git><git-checkout><git-revert>","After git revert, working tree remains the same","<p>I have one bad pushed commit.<br>
How to undo this commit, and back to my working tree (was before)?</p>

<p>This will lead me to right working tree:</p>

<pre><code>git checkout HEAD~1
</code></pre>

<p>This will lead me to right commit, but working tree remains the same unnecessary files:</p>

<pre><code>git revert HEAD~1
</code></pre>

<p>How to completely rollback to previous commit?</p>

<p>I mean, I shouldn't commit on detached HEAD, right?  (in case of <code>git checkout &lt;commit&gt;</code>)</p>
","1","3337819","",""
"23478732","2370337","2014-05-05 17:58:09","3","614","<git><branch><commit><git-checkout>","Why didn't git checkout (of a past commit) change my files?","<p>I have been building my website with a git repository for a week.  So far, I have not created any branches, but I just discovered a problem on my live site which needs to be fixed.  Currently, I am two commits beyond the commit that contained my site as it was when I last pushed it from my dev environment to live last week.  So here is what I did:</p>

<ul>
<li>I did <code>git checkout -b feature1</code> to create a new branch called 'feature1'</li>
<li>I committed all of my current files.   </li>
<li>I did <code>git log</code> to find the hash number (afd6) of the commit that corresponds the that last live push/update.</li>
<li>I did <code>git checkout afd6</code></li>
</ul>

<p>At this point I expected my work space to only contain files and revisions that I committed last week.  However, My work still contains all of the files and variations from today.  Am I missing a step here?  I am assuming that this operation should have removed all of the tracked files that did not exist within the earlier commit, and reverted all of the files that changed today.  </p>

<p>edit ========================</p>

<p>I just did <code>git clean -f -d</code> but nothing changed</p>

<p>edit =======================</p>

<p>git status says:</p>

<p>HEAD detached at afd620b
nothing to commit, working directory clean</p>

<p>edit =========================</p>

<p>Actually, I made a mistake in assuming that the files did not change because I was looking at each of the file's change date.  I was expecting this data to change to 'last week' after checkout.  Upon closed inspection, I saw that the files actually do contain last week's code, even though the data of modification still says 'today'.  Could someone verify that <code>git checkout</code> is considered to be a file modification by the operating system?</p>
","3","2370337","",""
"60754571","12655717","2020-03-19 09:49:26","1","2581","<git><git-branch><git-checkout>","Why does git switch/checkout not switch branch?","<p>I have two local branches, <code>master</code> and <code>test</code>. I want to switch from <code>master</code> to <code>test</code>.</p>

<p>If I use <code>git checkout test</code>, the console says</p>

<blockquote>
  <p>Your branch is up to date with 'origin/master'</p>
</blockquote>

<p>and I'm still in <code>master</code> branch.</p>

<p>If I use <code>git switch test</code>, the console says</p>

<blockquote>
  <p>fatal: missing branch or commit argument`</p>
</blockquote>

<p>and again, I'm still in <code>master</code> branch.</p>

<p>What's going on here?     </p>

<p><strong>This is what I did:</strong></p>

<ul>
<li><code>git checkout -b 'test'</code> → created and switched to <code>test</code>.</li>
<li><code>git checkout master</code> → switched to <code>master</code>.</li>
<li><code>git checkout test</code> and <code>git switch test</code> → I want to switch back to <code>test</code>, but this doesn't work.</li>
</ul>
","11","12655717","",""
"61370287","1791531","2020-04-22 16:33:52","0","18","<git><version-control><rebase><git-checkout>","git reset a pushed file to a previous commit","<p>I have pushed some changes to my <code>feature</code> branch.</p>

<p><code>file_a</code> has been changed on the <code>master</code> branch.</p>

<p>Now, I would like to keep my changes, but for <code>file_a</code> I want it to be the same as the one in <code>master</code></p>

<p>I don't want to do heavy merges, so I decided to reset my file to a previous commit (the one before my own push)</p>

<pre><code>git checkout aaaaaaa -- file_a
</code></pre>

<p>Now, the file's <strong>content</strong> resets to what I had before making changes, but it's not reset to that commit. Now I have uncommitted changes.</p>

<p><strong>Problem</strong>: I cannot do a <code>git pull origin master --rebase</code>. I cannot stash the change, because my edit will appear. I don't want to commit it, because it becomes a new commit and then I cannot rebase without a merge (there will be conflicts with my previous edit)</p>

<p><strong>What I'm looking for</strong>: is for <code>file_a</code> (not just its content) to be reset to that exact commit before my edit, such that I can rebase without merging. Would that be possible?</p>
","0","1791531","",""
"61489989","12000390","2020-04-28 21:05:18","-1","218","<git><git-checkout>","How should I investigate a git checkout problem","<p>I am facing a strange situation with GIT and I don't know how to explain it in detail, so that is why I am looking more for hints on how should I investigate it rather than an answer. </p>

<p>As I said, I don't have too much details about it, because I spotted it too late and I can say that I forgot what I did at the beginning(i.e. when I did the first checkout, because I tried a lot of checkouts after that). </p>

<p>The problem is that when I checkout to a branch(let's call it <em>branch1</em>) it seems that a lot of files are deleted and some are modified even if they exist on the remote <em>branch1</em> . I did a git pull and it says that everything is up-to-date, but when I tried to checkout to any branch, those files are still missing. I really don't know how should I investigate this.</p>
","3","12000390","",""
"61497693","2691812","2020-04-29 08:46:54","3","34466","<git><git-checkout>","What is the git checkout master vs git checkout origin/master","<p>What is the difference between the following commands?</p>

<pre><code>git checkout master vs git checkout origin/master
</code></pre>
","0","2691812","0","0"
"5753976","578325","2011-04-22 09:12:10","2","416","<git><commit><git-checkout>","git checkout newer branch","<p>I switched to a older commit with: <code>git checkout $HASH</code> to look for something i did in an older version of my directory. Now i want to go back to the newest commit, but i cant find the Hash for that anymore? when i do a <code>git log</code> it just shows the older commits from the commit i am currently at. How can i switch to the newest commit again?</p>
","1","578325","",""
"43060756","7418257","2017-03-28 04:42:35","1","56","<git><git-bash><git-checkout>","check out all conflicted file in another branch via bash in git","<p>I got a conflicted files that haven't been solved for a while.
I tried to use the following command:</p>

<pre><code> git checkout MOODLE_31_STABLE $(grep  -rwl  ""&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"")
</code></pre>

<p>which tries to to check out each conflicted file and replaced it by MOODLE_31_STABLE copy.</p>

<p>unfortunately , for some  files I get this error:</p>

<pre><code>error: pathspec 'theme/boost/config.php' did not match any file(s) known to git.
error: pathspec 'theme/boost/lang/en/theme_boost.php' did not match any file(s) known to git.
error: pathspec 'theme/boost/readme_moodle.txt' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/bootstrap.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/mixins/_forms.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/mixins/_grid-framework.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/mixins/_grid.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/mixins/_text-emphasis.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/utilities/_background.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/utilities/_visibility.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_alert.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_card.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_input-group.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_media.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_navbar.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_print.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_progress.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_reboot.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_tables.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/bootstrap/_variables.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/moodle/course.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/scss/preset-default.scss' did not match any file(s) known to git.
error: pathspec 'theme/boost/settings.php' did not match any file(s) known to git.
error: pathspec 'theme/boost/templates/core/dataformat_selector.mustache' did not match any file(s) known to git.
error: pathspec 'theme/boost/templates/mod_assign/grading_navigation.mustache' did not match any file(s) known to git.
error: pathspec 'theme/boost/thirdpartylibs.xml' did not match any file(s) known to git.
</code></pre>

<p>I've checked and the branch has been checked out, so it IS in local. the files do exist in both branches...
So I really don't understand why I get the errors.</p>
","2","7418257","0","0"
"6238357","781678","2011-06-04 17:38:06","0","429","<git><commit><git-checkout>","Why does git checkout master resets my edits?","<p>Basically, I was working already in the master branch , (I hadn't checked out to another branch) and after doing git add . and git commit, I accidentally ran git checkout master, now when I do git push it says everything is up to date (but ofcourse its not). Quite an odd one.</p>
","2","781678","",""
"43248385","7199968","2017-04-06 07:24:15","1","157","<git><fitnesse><git-checkout>","Fitnesse has page properties removed when checking out from git","<p>After checkout from my git repository every suite and test page have their respective property removed.
Instead there is text at the top of the page:<br>
<s>Test</s><br>
<s>Suite</s></p>

<p>This forces me to manually set the property and remove the text for every single page after i checkout a branch.
Am I doing something wrong in how i use version control with Fitnesse or why does this happen?</p>

<p>The current branch can be found here: <a href=""https://github.com/Suptzs/OnlineLottery/tree/RemoveDuplication"" rel=""nofollow noreferrer"">https://github.com/Suptzs/OnlineLottery/tree/RemoveDuplication</a></p>
","2","7199968","",""
"24462751","2038192","2014-06-28 01:26:02","0","146","<git><tags><diff><git-checkout>","Get ""git checkout tag"" to produce the same output as ""git pull"" diff list","<p>I was just wondering if there's some sort of tag or parameter that we can provide to a</p>

<pre><code>git checkout tags/{tag_name}
</code></pre>

<p>call that would provide an output similar to a regular <code>git pull</code>. I'm just looking for a single command to do a diff of the current revision against the code provided in the new tag.</p>

<p>I'm sure I can create a bash script to do this in two steps, but I was wondering if there was a way already part of Git to do it.</p>

<p>If not, then would would be the advice to get that diff (before <strong>or</strong> after doing the checkout)?  If I cannot do this in one line with Git, then I <strong>will</strong> be writing my own script to do this.</p>
","0","2038192","",""
"61812370","11814008","2020-05-15 05:31:22","1","2844","<github><fatal-error><git-checkout>","Not able to perfrom git checkout . Facing error- Fatal: Reference is not a tree error is triggering","<p>I am new to github and when i tried to checkout initial <code>6.2</code> from the link mentioned below i am getting below error.</p>

<p>link: <a href=""https://github.com/trainindata/deploying-machine-learning-models/commits/master"" rel=""nofollow noreferrer"">https://github.com/trainindata/deploying-machine-learning-models/commits/master</a></p>

<pre><code>error :  fatal : reference is not a tree 75b48f55a9b6dd94c40846f5a66c7f217a1f580b
</code></pre>

<p>can anyone help me to solve this error.</p>
","0","11814008","0","0"
"6963129","512433","2011-08-05 22:09:24","106","20241","<git><git-checkout>","Is it possible to git-checkout a single line instead of the entire file?","<p>If I have modified several lines of a versioned file, is it possible to undo the changes of <strong>a line</strong> by command-line?</p>

<p>Just like I would do for an entire file with:</p>

<pre><code>git checkout /path/to/file.extension
</code></pre>

<p>but doing something like, say</p>

<pre><code>git checkout /path/to/file.extension --line 10
</code></pre>

<p>is this possible?</p>
","0","512433","0","0"
"43467052","978399","2017-04-18 08:16:47","1","67","<makefile><git-checkout>","Is it possible for git to keep unchanged files untouched when switching branches?","<p>I have a project which uses custom defined files to generate source files and then compiles them (which takes a lot of time). Only the custom defined files are tracked by git. Every time I switch my branch git touches all the files which triggers the generation of all source files and hence the compilation. I want to save time by making git touch only those files that are different between the two local branches and hence reduce my make time.</p>

<p>Please enlighten on the possibilities of achieving such a feat.</p>
","6","978399","",""
"24854021","229792","2014-07-20 19:19:59","2","806","<git><concurrency><git-commit><git-checkout><git-add>","Concurrent git checkout/add/commit","<p>I am developing an application which uses Git as a database. My current approach is to call out to the <code>git</code> shell command to construct a new commit whenever the application changes something. This is very simple, but a big disadvantage is that it does not allow any concurrent writes to the database: two threads cannot construct a commit simultaneously, because there is a single <code>HEAD</code>, a single <code>index</code>, and a single working copy.</p>

<p>However, since commits, trees, and blobs are all content-addressed, I think it should be possible to construct all of these concurrently. What would be the recommended approach for this? Perhaps:</p>

<ul>
<li>command line flags to <code>git add</code>, <code>git commit</code>, etc., which explicitly specify a different <code>HEAD</code> and <code>index</code> file to use. As far as I can see, such things do not exist.</li>
<li>using git plumbing commands for all operations. However, I am not an expert with them and am not totally sure which are thread-safe.</li>
<li>a Git service, to which one can connect a la traditional database connections, which would provide transactional, concurrent access to a Git repository. As far as I can see, such a thing does not exist. I have considered writing one.</li>
<li>giving up and doing a <code>git clone</code> to get an entirely new working copy for each concurrent user. This is inordinately expensive.</li>
</ul>
","0","229792","0","0"
"35920005","1277137","2016-03-10 14:59:11","0","29","<git><git-commit><git-checkout>","Get content of file in some commit without using `git checkout`","<p>Is there a way to get a full content of a file (not just diff) in some commit, without using <code>git checkout</code> (because it pollutes the working directory)?
Something like this:</p>

<pre><code>$ git content 43fb721 --file main.rb =&gt; ""class Main\nend\r""
</code></pre>
","0","1277137","",""
"52043875","815612","2018-08-27 17:00:05","7","4470","<git><version-control><git-checkout><git-reset><git-clean>","Why does git checkout not delete new files?","<p>Suppose I create (but do not commit) a file <code>file.txt</code>, and then type <code>git checkout HEAD</code> or <code>git checkout HEAD .</code>. I thought <code>git checkout</code> basically overwrote your current working files with the snapshot at the commit you give it, so I would have thought this would delete <code>file.txt</code>. But it doesn't. Why?</p>
","11","815612","",""
"52053462","71376","2018-08-28 08:33:48","0","235","<git><clone><addition><commit><git-checkout>","git checkout causes modified file which cannot be added","<p>I <code>git clone</code> my repo and <code>git status</code> shows everything is fine (for want of a better expression) aka no changes, etc.</p>

<p>I then <code>git checkout</code> a feature branch and <code>git status</code> shows one file (which exists in both master and the feature branch) to be <code>modified</code>.</p>

<p><code>git add .</code> does absolutely nothing to change the <code>git status</code> and I have not made any changes to the file during the process above.</p>

<p>The file is not git ignored.</p>

<p><strong>[UPDATE]</strong></p>

<p>I tried <code>git add &lt;filename&gt;</code> and the <code>git status</code> has changed from modified conflicted to modified modified, as represented by the posh git statuses:</p>

<pre><code>modified conflicted +0 ~1 -0 !
modified modified +0 ~1 -0 ~
</code></pre>

<p>What I don't understand is how to resolve this. <code>git add .</code>, <code>git commit</code> and <code>git push --force</code> do nothing to the status.</p>
","6","71376","",""
"35979642","4591230","2016-03-14 04:38:50","782","924477","<git><git-checkout><git-tag><git-refspec>","What is git tag, How to create tags & How to checkout git remote tag(s)","<p>when I checkout remote git tag use command like this:</p>
<pre><code>git checkout -b local_branch_name origin/remote_tag_name
</code></pre>
<p>I got error like this:</p>
<blockquote>
<p>error: pathspec <code>origin/remote_tag_name</code> did not match any file(s) known to git.</p>
</blockquote>
<p>I can find remote_tag_name when I use git tag command.</p>
","1","4591230","0","0"
"52124035","1223975","2018-09-01 00:52:46","2","2136","<git><git-checkout>","Lock a local git branch from any further changes","<p>Say I have this sequence of commands:</p>

<pre><code>current_branch=""$(git rev-parse --abbrev-ref HEAD)""
git checkout -b ""foo""
git lock ""$current_branch""   # i made this up
</code></pre>

<p><em>what I want to do is lock a branch so that I cannot <strong>accidentally</strong> make changes to it after I am done with it. For example, after a feature branch has been squashed and merged into the integration branch.</em></p>

<p>Is there a way to do this with git? Perhaps there is a way to lock a worktree using <a href=""https://git-scm.com/docs/git-worktree"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-worktree</a>?</p>
","7","1223975","0","0"
"52133390","","2018-09-02 01:49:49","1","384","<git><git-branch><git-checkout>","File permissions are being shared across git branches","<p>Not sure why this is happening, but the problem is I am changing file permissions on a branch after I push that branch to the remote. Then I checkout a new branch from our integration branch and it has the permissions from the ""dead branch"", this is how it goes:</p>

<pre><code># on feature branch
git checkout --no-track -b foo
git reset --soft ""remotes/origin/dev""
git add .
git add -A
git commit --allow-empty -am ""bar""
git push -u origin foo
chmod -R -w .  # remove all write permissions in current dir

# later on
git branch --no-track z ""remotes/origin/dev""
git checkout z
### ughh this new branch z files are not writable, but whyyyy?
</code></pre>

<p>basically we changed the files to non-writable and that branch never gets merged into any branch - we pushed it to the remote before modifying the file permissions.</p>

<p>Why the do the non-writable file permissions show up in other branches that never got merged with the non-writable file branch?</p>
","0","","",""
"52133407","","2018-09-02 01:56:02","3","219","<git><git-merge><git-checkout><git-reset>","git reset --soft - does it go back to git checkout point or to the last git merge point?","<p>I think what I am looking for is the oldest shared ancestor of two branches, or something like that, this question seems to touch on it:
<a href=""https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git"">Finding a branch point with Git?</a></p>

<p>But instead of the diagram in the OP, this is more what I am looking at:</p>

<pre><code>-- I -- I -- I -- I -- I -- I -- I  (integration branch) 
          \         \          /
           \         \        /
             F -- F -- F -- F  (feature branch)
</code></pre>

<p>My question is - if we checkout a feature branch from integration and make some changes and some commits, and then we update/merge with integration a few times as we go. Aka, commit commit, merge with integration, commit commit, merge with integration, etc. If we then do a <code>git reset --soft &lt;integration&gt;</code>, is that going to reset it to the commit on integration when <code>git checkout</code> was used, or will it simply reset it to the point where the last <code>git merge</code> with integration occurred?</p>

<p>The goal is so that I can make my feature into one big commit. If the <code>git reset --soft</code> only goes back as far as the last git merge with integration, then my feature might have 100s of commits, which is no bueno, and I will need another technique. </p>
","1","","0","0"
"52200308","7267704","2018-09-06 08:59:13","2","15502","<git><github><version-control><git-checkout><git-clone>","Why git checkout after git clone?","<p>I am new to git. I understand git basics as well as development procedures using git, however there is one thing that confuses me. </p>

<p>Whenever I have to pull something from a git repo with multiple projects inside (<a href=""https://github.com/ros-perception/image_pipeline"" rel=""nofollow noreferrer"">example</a>), I see these instruction steps:</p>

<ol>
<li>git clone xxx</li>
<li>cd xxx</li>
<li>git checkout yyy</li>
</ol>

<p>This is a bit puzzling to me. As I already have the entire repo, why would I want to checkout the project I am interested in if I can just copy the folder and do whatever I like with it?</p>
","0","7267704","",""
"25670173","2528472","2014-09-04 16:05:43","22","41705","<git><git-checkout><remote-branch>","Why does Git tell me ""Not currently on any branch"" after I run ""git checkout origin/<branch>""?","<p>I was trying to follow the instructions from <a href=""https://stackoverflow.com/questions/4735556/git-not-currently-on-any-branch-is-there-an-easy-way-to-get-back-on-a-branch"">Git: &quot;Not currently on any branch.&quot; Is there an easy way to get back on a branch, while keeping the changes?</a> but <code>git checkout</code> appears to be broken:</p>

<pre><code>$ git checkout origin/web-zach
HEAD is now at 1366cb1... Changed so css files not ignored

$ git status
# Not currently on any branch.
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       .cordova/config.xml
#       www/languages/pt/sounds/
nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>More specifically, I'm worried about the ""Not currently on any branch"" message. <code>git checkout</code> doesn't seem to do anything here... Isn't the entire purpose of that command to put me on a branch?  How can I get back on a branch and commit/push again?  </p>
","2","2528472","0","0"
"25966013","2605155","2014-09-22 02:43:43","9","309","<git><security><verification><git-checkout><git-tag>","Combined command for git tag verification and git checkout?","<p>Usual work flow is, git tag verify.</p>

<pre><code>git tag -v tagname
</code></pre>

<p>Then git tag checkout.</p>

<pre><code>git checkout tagname
</code></pre>

<p>Is there a combined command to verify the tag, shows the verification, and checks it out if verification succeeded?</p>
","5","2605155","0","0"
"36287854","2595659","2016-03-29 14:55:20","1","1360","<git><git-branch><git-push><git-checkout>","One git command to create new local branch, push to origin, track origin","<p>A common part of my workflow is:</p>

<pre><code>git checkout -b new_branch origin/master
git push origin new_branch
git branch --set-upstream-to origin/new_branch
</code></pre>

<p>Is there a way this could be boiled down to one command?  I'd like to be able to set up an alias so that this can be done with something quick to type such as:</p>

<pre><code>gitnew new_branch parent_branch
</code></pre>

<p>A bash solution is acceptable, but would be neat if it were pure git.</p>
","0","2595659","",""
"25975582","754174","2014-09-22 13:40:08","0","158","<git><history><git-checkout>","Should .git contain all files? How do I fix problems?","<p>I have a plain copy backup of a <code>.git</code> directory. I don't have the actual files outside of the <code>.git</code> directory in the backup (<code>git status</code> shows that all files would be deleted on commit), only the actual <code>.git</code> directory.</p>

<p>When I do <code>git checkout master</code>, I get about half of the files that should be there. I was under the impression that this should recreate all the project files.</p>

<p>Does this mean that somewhere in the git history there is an error? Some files changes clearly couldn't resolve all the way to a complete file. If I get a backup from the complete project including the files, how can I 'fix' my history to make sure it contains everything?</p>

<p>I'm not a git-pro, but the backup, unpacked to an empty directory, is currently sitting in a feature branch. So according to <code>git status</code>, a million files would be deleted if I would do <code>git commit</code>. I reckoned doing <code>git checkout master</code> would give me all the files in the latest master commit in the empty directory.</p>
","3","754174","",""
"25483311","3884647","2014-08-25 09:55:17","0","649","<git><git-checkout><revert>","git switch and come back to/from an older state","<p>I need to switch to an older commit to check an older functionality of our program that has been later removed.</p>

<p>For that I checkout the corresponding commit:</p>

<pre><code>git checkout 367af0345d0b09ab3ade1c7856462f68e5eafe86
</code></pre>

<p>Then I change some code about this deprecated functionality. But this is just for checking I want to ignore all of them.</p>

<p>Now the verification is done I want to come back to the latest working code:</p>

<pre><code>git checkout master
</code></pre>

<p>But unfortunately I get a warning that sounds bad:</p>

<pre><code>git checkout master
Checking out files: 100% (281/281), done.
Warning: you are leaving 183 commits behind, not connected to
any of your branches:

  367af03 message
  e5eee29 message
  6999d77 message
 ... and 179 more.

If you want to keep them by creating a new branch, this may be a good time
to do so with:

 git branch new_branch_name 367af0345d0b09ab3ade1c7856462f68e5eafe86

Switched to branch 'master'
</code></pre>

<p>Indeed I want to keep the last 183 commits but I don't want to create a new branch, just come back to the state I was before reverting temporarily...</p>

<p>The thing is that now these 183 commits are actually present in my code so they have not been lost like the warning suggests.</p>

<p>What did I miss?</p>
","3","3884647","",""
"25524683","1798201","2014-08-27 10:25:26","0","70","<git><content-management-system><git-commit><git-checkout>","git checkout only those files which were commited during the concrete commit","<p>I have a branch detached from head in my repo where I add folder under the same name with different files in it. Every time when I want to commit something I manually delete the folder in my repository and add the new one with the same name but the different content in it, which I later commit and push. The problem is that when I checkout one of my past commits I see that folder and it contains content from the selected commit and the past commits, but I want to see content ONLY from that concrete commit. So, I want to ask is it possible to do so and how should I achieve that? Maybe I should delete the files from my repo using some kind of git command? (But if its true I want to make sure that the files from the last commits wont be lost).</p>
","0","1798201","",""
"44124969","4754011","2017-05-23 02:47:39","1","122","<git><git-checkout><tab-completion>","clean git checkout autocompeletion","<p>I'm using git with zsh</p>

<p>when I type in 'gco' and press the 'tab' key, it will be like the following</p>

<p><a href=""https://i.stack.imgur.com/xppdO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xppdO.png"" alt=""enter image description here""></a></p>

<p>Those are not deleted or merged branches, but I don't want them. </p>

<p>Especially something like</p>

<p><code>7038cc34  -- [HEAD]
</code></p>
","0","4754011","0","0"
"44133583","5903989","2017-05-23 11:30:18","2","1964","<ruby-on-rails><git><server><git-checkout>","How do I know the git branch my rails server is running on?","<p>Is there a way to figure out which git branch my local rails server takes all data and structure from?</p>

<p>Let's say I switch to another branch for some reasons while my local rails server is still running. I would like to know which branch was checked out at the moment I started the rails server.</p>

<p>For example, if it happens that I change the branch while the server is still active on another terminal, then I forget to restart the server and I want to try something out on the first branch which is different from the second branch, I would like to know the name of the first branch in order to understand why it behaves differently.</p>

<p>Of course the normal behavior would be to restart the server manually (<code>CTRL+C</code> + <code>rails s</code>) without keeping track of the previous branch name, but you know, you get confused when this happens and you wonder why it's so. Then you might like to know this information (i.e. if that branch differs from you actual one) simply to avoid further headaches...</p>
","8","5903989","",""
"7599707","971460","2011-09-29 15:29:58","4","2365","<git><svn><git-checkout><revision><svn-checkout>","Checkout the git commit corresponding to a certain revision from the old SVN repository?","<p>I migrated my repository from SVN to git. I used 
<a href=""http://www.jonmaddox.com/2008/03/05/cleanly-migrate-your-subversion-repository-to-a-git-repository/"" rel=""nofollow"">THIS</a> site. Now I have a bug in revision X. How do I checkout from my git repository, knowing only the revision number from my old SVN repo?</p>

<p>Thank you for your Help.</p>
","0","971460","0","0"
"7600158","959792","2011-09-29 16:03:44","0","57","<git><date><cygwin><git-checkout>","How to grab the last 12 months from cygwin ""date"" and use the months for git sync","<p>I'm trying to compare the trees of a repo as they were at the end of the month for the past 12 months, to see what changed.  I am a newb - so far my code basically looks like this:</p>

<p><code>for month in Jan Feb Mar Apr May Jun Jul Aug Sep</code></p>

<p><code>git checkout $(git rev-list --before ""$month 1 2011"" -n 1 HEAD)</code></p>

<p>I'd like to make this work for the last 12 months, going back to the previous year.  I want it to by dynamic - how do I make a loop that iterates over the last 12 months, ending on the current month?  I want the month value to be a variable I can use both in <code>for ""...""</code> and in my <code>git checkout ...</code> line.</p>

<p>Thanks! </p>
","0","959792","",""
"25786808","4030436","2014-09-11 11:55:00","6","4826","<git><git-branch><git-merge><branching-and-merging><git-checkout>","How many types of branches exist in git?","<p>Struggling to understand how to work with remote branches and how many types of git branches there are I somehow got lost in differing namings and git versions. Here's a few things that happened to me, while believing there are only TWO types of git branches: </p>

<ol>
<li>I unwillingly created a non-tracking local branch (so push and pull didn't work)</li>
<li>(I therefore decided to abandon automatic push/pull for a while)</li>
<li>I merged origin/master into my current branch without having fetched from origin before</li>
<li>I merged master into my current branch without having merged origin/master into it first. </li>
</ol>

<p>So, after having spent some time mainly at <a href=""http://git-scm.com/book"" rel=""nofollow noreferrer"">http://git-scm.com/book</a> and on stackoverflow, I got to the conclusion that I can actually describe FOUR instead of the commonly described two types (local vs remote) of git branches. I decided I would try to draw my understanding of how to work with remote branches, I know it is extremely reduced, but the idea would be to point in the right direction and get an idea of the different branch levels: </p>

<p><strong>Edit:</strong> New picture, incorporating dunni's comment.
<img src=""https://i.stack.imgur.com/8WMyq.png"" alt=""enter image description here""></p>

<p>What do you think, how much did I get wrong? What should be added/noted?</p>
","5","4030436","",""
"25800406","3763032","2014-09-12 03:47:06","1","933","<git><reset><git-checkout>","git checkout didn't work","<p>I did backup my files, before a rough <code>git reset --hard HEAD@{n}</code> from <code>git reflog</code> :'( On <strong>develop</strong> branch.</p>

<p>But, I also lost my files on <strong>master</strong> branch. T__T</p>

<p>I did undoing the reset though, on <strong>develop</strong>. I tried to <code>git checkout master</code>, and then pasted the backup files to <strong>master</strong>. After that, I can't go back to <strong>develop</strong> because this message prevent me to:</p>

<p><code>(master) $ git checkout develop 
error: The following untracked working tree files would be overwritten by checkout: 
    some folder/files
Please move or remove them before you can switch branches. 
Aborting</code></p>

<p><strong>some folder/files</strong> &lt; is from the backed up folder</p>
","0","3763032","",""
"7987687","592254","2011-11-02 21:44:36","256","121741","<git><git-branch><git-checkout>","What is the difference between ""git branch"" and ""git checkout -b""?","<p>I used <code>git checkout -b</code> to create a new branch. I think that <code>git branch</code> does the same thing.
How do these two commands differ, if they differ at all?</p>
","1","592254","0","0"
"8151820","1048756","2011-11-16 12:37:09","3","730","<git><shell><utf-8><status><git-checkout>","How do I use octal characters in a git checkout?","<p>I have a git repo of my music files, and I have recently detected that some are deleted. 
I suppose I accidentally deleted them, however now I have only too-briefly reveled in the fact that I had the foresight to
use a git repo, so my current git status verifies they have been deleted. Here is the listing of a few:</p>

<pre><code># deleted:  Steve_Erquiaga-Cafe_Paradiso/03 - Arioso__J.S._Bach_.flac
# deleted: ""Steve_Erquiaga-Cafe_Paradiso/04 - S\303\203\302\251r\303\203\302\251nade__Rachmaninov__from_Moreaux_de_fantasie.flac""
# deleted: ""Steve_Erquiaga-Cafe_Paradiso/05 - After_a_Dream__Faure___Apr\303\203\302\250s_Une_R\303\203\302\252ve_.flac""
# deleted:  Steve_Erquiaga-Cafe_Paradiso/06 - Prelude_in_C_Minor__J.S._Bach__from_The_Well-Tempered_Clavier.flac
# deleted:  Steve_Erquiaga-Cafe_Paradiso/07 - If_Dreams_Could_Dance__Erquiaga_.flac
</code></pre>

<p>I have already restored one song that did not contain special characters in its name by using:</p>

<pre><code>$git checkout ""copy/pasted-in_name_from the output above""
</code></pre>

<p>However the special characters in some of the names are blocking my simplistic approach to restore them:</p>

<pre><code>$git checkout 'Steve_Erquiaga-Cafe_Paradiso/05 - After_a_Dream__Faure___Apr\303\203\302\250s_Une_R\303\203\302\252ve_.flac'
</code></pre>

<p>Error: </p>

<blockquote>
  <p>pathspec 'Steve_Erquiaga-Cafe_Paradiso/05 - After_a_Dream_<em>Faure</em>__Apr\303\203\302\250s_Une_R\303\203\302\252ve_.flac' did not match any file(s) known to git.</p>
</blockquote>

<p>I suppose it is not a git issue per se, rather a shell special-character escaping or translating issue.
I tried putting the name in double quotes, as it is displayed, but I got the same message. I also tried it with outer double-quotes and preceding each 'inner double quote' with a backslash, garnering the same type of error message.</p>

<p>How can I construct a git checkout command that will work using these file names?</p>
","1","1048756","0","0"
"8275452","1765871","2011-11-26 00:37:28","8","3638","<git><git-checkout>","dot sign's meaning in git checkout command","<p>if I use git command like this: </p>

<pre><code>git checkout -- .
</code></pre>

<p>I know its effect is to discard all unstaged files everywhere.</p>

<p>Can anyone tell me what is the meaning of the dot sign (.) in this command?</p>
","0","1765871","0","0"
"63383276","169252","2020-08-12 19:08:51","1","340","<git><git-branch><git-checkout><git-repo>","Unequivocally checkout a branch and get latest version in git from a script","<p>I am creating a shell build script.</p>
<p>I want it to be called like this:</p>
<p><code>./build.sh REPONAME BRANCHNAME</code></p>
<p><code>$REPONAME</code> corresponds to a remote. I am assuming that the remote exists.
<code>$BRANCHNAME</code> is a branch existing on <code>$REPONAME</code>.</p>
<p><code>$BRANCHNAME</code> may have never been checked out on this computer.</p>
<p>So I have this:</p>
<pre><code>cd $REPOPATH
git fetch $REPONAME $BRANCHNAME
git checkout --track $REMOTE/$BRANCHNAME
git pull $REPONAME
echo `git rev-parse HEAD`
</code></pre>
<p>This kind of works but I am experiencing several issues:</p>
<ul>
<li>I have to enter my key's private key twice - I guess once for fetch and once for pull. Not critical but if it would be just once, would be better.</li>
<li>Because of <code>--track</code>, if <code>$BRANCHNAME</code> was already checked out in the past, I get</li>
</ul>
<blockquote>
<p>fatal: A branch named $BRANCHNAME already exists</p>
</blockquote>
<p>. No idea how fatal that really is but I don't like to see a fatal in the output</p>
<ul>
<li>Without the <code>--track</code>, I get into detached mode, which I also do not like</li>
<li>With just <code>git checkout $BRANCHNAME</code> I was suddenly getting messages about &quot;ambiguous&quot; branches. Maybe because <code>$BRANCHNAME</code> could be on several remotes?</li>
</ul>
<p>So what is the cleanest and unequivocal way to checkout a branch from a remote, get its latest version and build from it?f</p>
<p>It's astonishing how after so many years using <code>git</code> I still don't have a grasp of what feels like must-know skills.</p>
","0","169252","",""
"8592181","244005","2011-12-21 15:24:32","5","742","<git><git-checkout>","meaning of -‌- in git checkout","<p>If I want to replace a folder on a working branch with the same folder from another branch,
I can call:</p>

<pre><code> git checkout OTHER_BRANCH -- /path/to/folder
</code></pre>

<p>what is the meaning of the --   ?</p>
","0","244005","",""
"63385030","3882565","2020-08-12 21:37:31","1","277","<git><git-branch><git-checkout><git-fork><upstream-branch>","Difference between `git checkout -b newbranch upstream/newbranch` and `git checkout newbranch`","<p>I have read <a href=""https://stackoverflow.com/a/4410502/3882565"">this</a> answer about importing an upstream branch into a fork. The answer suggests using <code>git checkout -b newbranch upstream/newbranch</code> to switch to the new branch. I always just used <code>git checkout newbranch</code> in this case and it worked aswell. Is there any difference between these commands? My guess is that I only need <code>-b</code> to specify a branch name in case it should be different from <code>upstream/newbranch</code>. But if I just want the branch with its original name <code>newbranch</code>, is there any difference between using <code>git checkout -b newbranch upstream/newbranch</code> and <code>git checkout newbranch</code>? I have read the <a href=""https://git-scm.com/docs/git-checkout#Documentation/git-checkout.txt-emgitcheckoutem-b-Bltnewbranchgtltstartpointgt"" rel=""nofollow noreferrer"">docs</a> of <code>-b</code> but that doesn't actually answer my question.</p>
","0","3882565","",""
"26398947","3192519","2014-10-16 07:48:16","3","698","<git><git-checkout>","What happened if I didn't add a dot at the end of `git checkout [commit]`?","<p>I'd like to view previous version of code. And choose to use the <code>git checkout [commit]</code> command to roll the workspace back to the target version.</p>

<p>I tried both <code>git checkout [commit]</code> and <code>git checkout [commit] .</code>. With or without the tailing dot, the workspace can both be rolled back.</p>

<p>So what's the difference between them?  </p>
","0","3192519","",""
"52401478","3305546","2018-09-19 08:30:11","8","11140","<git><git-checkout>","How do we understand git checkout [dot]","<p>As my understanding, <code>git checkout</code> is about moving the <code>head</code>.</p>

<p>For example, <code>git checkout &lt;commit id&gt;</code> is to move the <code>head</code> to the <code>&lt;commit id&gt;</code>, <code>git checkout &lt;branch_name&gt;</code> is to move the <code>head</code> to the <code>&lt;branch_name&gt;</code>.</p>

<p>However, <code>git checkout .</code> is to discard the unstaged changes. it doesn't seem that there is any business about <code>head</code>.</p>

<p>So I can not understand why <code>git</code> uses the same key word <code>checkout</code> to do two totally no-relative things. Or <code>git checkout .</code> still works based on <code>head</code>?</p>
","0","3305546","0","0"
"52408001","3305546","2018-09-19 14:16:40","1","518","<git><git-checkout>","How do we understand the command: ""git checkout commit_id .""","<p>I understand that <code>git checkout commit_id</code> will move the <code>head</code> to the <code>commit_id</code> and I will get an detached head and my working space will be overwritten by the <code>commit_id</code>.</p>

<p>Today I found another <code>git checkout</code>: <code>git checkout commit_id .</code>. This dot gives me a different thing. It seems that it overwrites my working space and the index of git with the <code>commit_id</code> whereas the <code>head</code> isn't moved.</p>

<p>How could I understand this command? Why does the dot stop the moving of <code>head</code>?</p>
","0","3305546","",""
"8494321","165448","2011-12-13 18:33:38","-5","206","<git><clone><git-submodules><git-checkout>","I have a ruby project that needs a submodule from github","<p>I have a typical ruby project and I would like to include a submodule within that project. The submodule lives on github. How do I use the git submodule command to include the submodule in my projects vender/plugins directory?</p>

<p>Thanks.</p>
","1","165448","",""
"9166356","254837","2012-02-06 19:55:45","6","4079","<git><git-checkout>","How do I do a pristine checkout with git?","<p>How do I return my working directory to the state it would be in if I made a new clone and checked out the current version?</p>

<p>For subversion I'd do:</p>

<pre><code>$ svn status --no-ignore | awk '$1 == ""?"" { print $2 }' | xargs rm -r
</code></pre>

<p>and for mercurial:</p>

<pre><code>$ hg status --ignored --unknown | awk  ' ( $1 == ""?"" ) || ( $1 == ""I"") { print $2 }' | xargs rm -r
</code></pre>

<p>So answers in the same line are fine. But something like <code>git checkout --clean -r b4a23</code> would be better.</p>
","2","254837","0","0"
"36468151","2034384","2016-04-07 06:20:47","0","99","<git><github><version-control><merge><git-checkout>","work independently on two git branches","<p>I had one git branche - BRANCH-1</p>

<p>Following are the steps I followed:</p>

<pre><code>**STEP-1:** git checkout -b BRANCH-2 BRANCH-1 // creates BRANCH-2 from BRANCH-1 and switches to BRANCH-2
</code></pre>

<p>I make changes to some files in BRANCH-2
I do not commit</p>

<pre><code>**STEP-2:** git checkout BRANCH-1 // switches to BRANCH-1
M       file.name
Switched to branch 'BRANCH-1'
</code></pre>

<p>After STEP-2, git moves to BRANCH-1 , but it also changes the file.name on BRANCH-1.</p>

<p>How do I checkout/switch between BRANCH-1 and BRANCH-2 with keeping their changes only to the respective branches</p>
","3","2034384","",""
"36555964","5402030","2016-04-11 18:03:31","2","474","<git><git-checkout><git-patch>","A manual git checkout patch which simply will not apply","<p>I'm a relative newcomer to Git, but I've been learning some more advanced stuff as I've been working on a game design competition. In the process of trying to splice changes between two branches, I've been introduced to <code>git checkout --patch</code>, which would do exactly what I need it to. However, despite the fact that simply applying hunks with <code>y</code> or <code>n</code> will work, as will splitting, any time I choose to manually edit a hunk with <code>e</code>, it consistently fails. Take, for example, this patch:</p>

<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -102,12 +80,12 @@ enum Facing {
     int stunTimer;
     int m_health;

-    bool m_softStun = true;
     bool hitFlag;
     bool jumpFlag;
     SoundGroup contactSounds;

     float movementInput;
+    float verticalInput;

     [SerializeField]
     public GameObject opponent;
# ---
# To remove '-' lines, make them ' ' lines (context).
# To remove '+' lines, delete them.
# Lines starting with # will be removed.
#
# If the patch applies cleanly, the edited hunk will immediately be
# marked for applying. If it does not apply cleanly, you will be given
# an opportunity to edit again. If all lines of the hunk are removed,
# then the edit is aborted and the hunk is left unchanged.
</code></pre>

<p>This is a simple patch whose problem I could solve by splitting, but I will use it as an example. Say I attempt to keep both the <code>m_softStun</code> bool, and <code>verticalInput</code> float variables. It should seem like all I need to do is this:</p>

<pre><code># Manual hunk edit mode -- see bottom for a quick guide
@@ -102,12 +80,12 @@ enum Facing {
     int stunTimer;
     int m_health;

     bool m_softStun = true;
     bool hitFlag;
     bool jumpFlag;
     SoundGroup contactSounds;

     float movementInput;
+    float verticalInput;

     [SerializeField]
     public GameObject opponent;
# ---
# To remove '-' lines, make them ' ' lines (context).
# To remove '+' lines, delete them.
# Lines starting with # will be removed.
#
# If the patch applies cleanly, the edited hunk will immediately be
# marked for applying. If it does not apply cleanly, you will be given
# an opportunity to edit again. If all lines of the hunk are removed,
# then the edit is aborted and the hunk is left unchanged.
</code></pre>

<p>All I have done is remove the <code>-</code> in front of <code>bool m_softStun</code> and, as documentation and other answers have told me, add a space.</p>

<p>However, when I try to apply this patch, it returns to me an error:</p>

<pre><code>error: patch failed: Assets/Scripts/Fighter.cs:23
error: Assets/Scripts/Fighter.cs: patch does not apply
</code></pre>

<p>This error, or variations with different line numbers, has returned to me through all of the following attempts to fix it:</p>

<ul>
<li>I have used standard Windows 10 Notepad, Notepad++ and even Vim</li>
<li>I have checked to make sure there is no whitespace being consumed by a tab at the beginning, even going into Vim's hexadecimal analysis to ensure it</li>
<li>I have tried removing and keeping carriage returns from the ends of the lines </li>
<li>I have tried to encode in both ANSI and UTF-8 via Vim, Notepad and Notepad++</li>
<li>I have tried <strong>not</strong> editing the patch <strong>at all</strong>, which still gives me an error, leading me to suspect it is either an error in git, or in the way I'm saving files.</li>
</ul>

<p>I'm practically at my wit's end trying to figure out what's gone wrong, but I don't have the technical knowledge to even start to find out. Even my local 'git guy', who suggested such things as the hexadecimal checking, has been unable to help, and sent me to e-mail a bug report which has so far turned up nothing. <strong>Does anyone have any clue why I can't make a manual patch?</strong></p>
","8","5402030","",""
"52617849","","2018-10-02 23:43:19","1","331","<git><git-submodules><git-checkout><git-reset>","git submodule - ignoring changes","<p>I do this all the time:</p>

<pre><code>git add .
git add -A
git commit -am ""foobar""
</code></pre>

<p>that adds everything so all of my changes are staged, but we have a git submodule in the config directory.</p>

<p>What I have been doing is using several of these commands to ""get rid of changes to the config dir"":</p>

<pre><code>git reset -- config
git checkout -- config
git checkout origin/dev config
git reset HEAD config
</code></pre>

<p>Can anyone explain what these are doing? I am not even sure if the last command is doing what I think it does.</p>
","0","","0","0"
"37449401","5209224","2016-05-25 23:51:03","2","551","<git><merge><rebase><pull><git-checkout>","What is the purpose of git merge's rebase option?","<p>Learning git from <a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/centralized-workflow"" rel=""nofollow"">here</a></p>

<pre><code>git pull --rebase origin master
</code></pre>

<p>What is the difference with and without the --rebase option? I read that rebase option allows you to put your own commits over the master branch after the commits have synced up, but isn't that what happens normally anyway?</p>

<p><strong>I also don't understand the purpose of designating a branch as an option during checkout.</strong></p>

<pre><code>git checkout -b marys-feature master
</code></pre>

<p>Why do you need to designate <code>master</code>? If you're already on master on it, wouldn't making a new branch automatically make it a copy of the master branch. If so, designating the branch you want to make a copy of is only useful if you're on a branch (the currently checked out branch) that you don't want to copy off of it right?</p>

<p><strong>Also, what's the purpose of the -u option during a push?</strong></p>

<pre><code>git push -u origin marys-feature
</code></pre>

<p>Even if you don't have the <code>-u</code> it would have made it a remote tracking branch right? I thought anything you push will make it remote tracking automatically? </p>
","3","5209224","",""
"53582776","10320794","2018-12-02 17:26:38","-1","42","<git><git-checkout>","I have 5 files I want to ignore in git. Updated my .gitignore to include them but get ""local changes to the following files would be overwritten""","<p>I have 5 files that I want to ignore in git on my test server. I updated my git ignore file to include them but I still get an error saying ""You local changes to the following files would be overwritten by checkout"" and am unable to proceed with the checkout.  I am on the server and see the .gitignore file as been updated. The error lists the problematic files under the error message:</p>

<pre><code>path\to\file_a
path\to\file_b
path\to\file_c
path\to\file_d
path\to\file_e
</code></pre>

<p>My .gitignore file looks like the below:</p>

<pre><code># Directories #
###############
# Ignore everything:
/*

# Except for the web, database, and company web directories:
!web/
!database/
!cron/
!includes/
!.gitignore

# But still ignore these directories and files:
path/to/file_a
path/to/file_b
path/to/file_c
path/to/file_d
path/to/file_e
</code></pre>

<p>I believe I should not get the git error because I have listed the files in the .gitignore</p>

<p>I did the rm --cahced path\to\file method and that did not work
<a href=""https://i.stack.imgur.com/tBF6k.jpg"" rel=""nofollow noreferrer"">enter image description here</a></p>
","1","10320794","",""
"70398395","343178","2021-12-17 20:07:43","1","109","<git><github><git-branch><git-checkout>","Why is a new branch in our github repo unavailable for checkout?","<p>A colleague created a new branch in our repo in Github, but I cannot seem to use checkout to get it, and when I do a <code>git branch -a</code> (using Git Bash, Windows 10) it is not listed among the branches.  Yet in my Github account behold, there it is under Active branches: 36_assistapi.</p>
<p>I tried several variations on the following command but get the same output.</p>
<pre><code>$ git checkout origin/36_assistapi
error: pathspec 'origin/36_assistapi' did not match any file(s) known to git
</code></pre>
<p>I also tried <code>git checkout 36_assistapi</code> and <code>git checkout 36_assistapi</code>
Surely we've omitted something simple:</p>
<p><a href=""https://i.stack.imgur.com/6npOs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6npOs.png"" alt=""enter image description here"" /></a></p>
","0","343178","",""
"70468422","9693461","2021-12-23 23:54:21","1","498","<git><version-control><branch><git-checkout>","git checkout <branch> <file path> does not match what is on <branch>","<p>I am having a confusing issue with <code>git</code></p>
<p>On <code>main/development</code> I have a file that has the most up-to-date changes of <code>UsersTable.tsx</code></p>
<p>On my working branch <code>chore/add-linting</code> I am a few commits ahead, but I want to pull the latest code of <code>UsersTable.tsx</code> from <code>main/development</code>.</p>
<p>I performed:</p>
<pre class=""lang-sh prettyprint-override""><code>$ git pull origin main/development

# oh no, I have a couple merge conflicts

# I want this file to be whatever is exactly on `main/development`
$ git checkout main/development path/to/UsersTable.tsx

Updated 1 path from f59fed63
</code></pre>
<p>However, the file is NOT what is <code>main/development</code>! The version that it checked out for me is still behind <code>main/development</code> and has old code.</p>
<p>What is going on here? I did <code>git fetch</code> and the <code>git pull</code>.</p>
","1","9693461","0","0"
"8709269","1110929","2012-01-03 07:45:46","4","184","<git><reset><git-checkout>","Compare about using checkout or reset hard to undo git commit","<p>If I use:</p>

<pre><code>$ git reset --hard HEAD~N
</code></pre>

<p>or</p>

<pre><code>$ git checkout HEAD~N
</code></pre>

<p>Both of two will use the version of <code>HEAD~N</code> to change working directory and stage area.</p>

<p>If there is any different between these two commands?<br>
Thanks.</p>
","2","1110929","0","0"
"27089095","48062","2014-11-23 12:45:07","9","14589","<git><merge><git-checkout>","How to override unmerged git checkout with upstream version","<p>I’m attempting to revert a file modified locally to the version that is most recent upstream, effectively undoing my changes.</p>

<pre><code>$ git checkout --  Jovie/Jovie-Info.plist
error: path ‘Jovie/Jovie-Info.plist' is unmerged
</code></pre>

<p>Using -f alters the error to warn, but still won’t make the change (???)</p>

<pre><code>$ git checkout  -f -- Jovie/Jovie-Info.plist
warning: path ‘Jovie/Jovie-Info.plist' is unmerged
</code></pre>

<p>The file itself looks like this:</p>

<pre><code>$ git diff Jovie/Jovie-Info.plist
diff --cc Jovie/Jovie-Info.plist
index 6c576d9,0209baa..0000000
--- a/Jovie/Jovie-Info.plist
+++ b/Jovie/Jovie-Info.plist
@@@ -50,7 -50,7 +50,11 @@@
                &lt;/dict&gt;
        &lt;/array&gt;
        &lt;key&gt;CFBundleVersion&lt;/key&gt;
++&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream
 +      &lt;string&gt;5922&lt;/string&gt;
++=======
+       &lt;string&gt;5918&lt;/string&gt;
++&gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes
        &lt;key&gt;Fabric&lt;/key&gt;
        &lt;dict&gt;
                &lt;key&gt;APIKey&lt;/key&gt;
</code></pre>

<p>How do I override the local files and apply upstream changes?</p>
","1","48062","0","0"
"44953037","884502","2017-07-06 15:21:14","10","6648","<git><git-checkout><git-reset><git-clean>","What is the difference between ""git checkout -- ."" and ""git reset HEAD --hard""?","<p>This is not a general question about what '--' does, as in the marked duplicate. This is a git-specific question asking for clarity on what the operational differences are between the mentioned commands.</p>

<p>If I want to clean out my current directory without stashing or committing, I usually use these commands:</p>

<pre><code>git reset HEAD --hard
git clean -fd
</code></pre>

<p>A co-worker also mentioned using this command:</p>

<pre><code>git checkout -- .
</code></pre>

<p>It's a difficult command to google, and it's not clear to me from the git documentation what this command actually does. It seems to be one of the later-mentioned usages in the manual.</p>

<p>At a guess it replicates <code>git reset HEAD --hard</code>, but what exactly does it do as compared to the commands I'm already using?<br>
Does it replicate one or both of the commands, or is it similar yet subtly different?</p>
","8","884502","0","0"
"27567846","1226705","2014-12-19 14:14:31","511","298838","<git><github><pull-request><git-checkout>","How can I check out a GitHub pull request with git?","<p>I'd like to check out a previously created pull request (created via GitHub web interface). I searched and found different places where a refs/pull or refs/pull/pr</p>

<p>But when I add <code>fetch = +refs/pull/*/head:refs/remotes/origin/pr/*</code> to the git config file and do a git fetch</p>

<p>What I'm doing wrong? Should GitHub create automatically the pull/xyz stuff, or do I have to configure something?</p>
","5","1226705","0","0"
"10200307","231624","2012-04-17 22:46:25","22","7002","<git><merge><git-checkout><pull><git-fetch>","How to git fetch and checkout without creating a remote branch locally?","<p>Use Case: I have some repo on GitHub, someone forked it and added new feature and initiated pull request. 
I can't automatically merge it because there are some minor problems I would like to fix first. </p>

<p>It's one-time activity I'll never need this remote repository, so I don't want to create local <code>remote</code> branch.</p>

<p>Basically I would like to do:</p>

<ol>
<li>copy files from remote repository and rewrite my own (without any git-related information).</li>
<li>see difference with my current head.</li>
<li>fix something and commit it.</li>
</ol>

<p>How to do that?</p>

<p><code>git checkout git://github.com/xxx/xxx.git</code> doesn't works at all (fail with error)</p>

<p><code>git fetch git://github.com/xxx/xxx.git</code> works but doesn't update anything</p>
","0","231624","0","0"
"64997848","14113310","2020-11-25 02:48:46","0","127","<git><gitlab><git-branch><git-checkout><git-remote>","How to clone a copy of all remote branches on local with git","<p>I encounter an issue with some of my projetc. I started them on my older computer that doesn't work now. But, I have my projetcs on a gitlab repository. However, when I cloned them on my new computer, I just have master branch on my local, I think it's normal.
So my question is : how can I have the local copy of the content of remote branches on my local please ?</p>
<p>I really don't enjoy to 'checkout' on remote/example branch ... :/
I hope I was clear in my words</p>
<p>Sorry for my English, I'm french.</p>
<p>Have a nice day</p>
","2","14113310","",""
"28218274","2087192","2015-01-29 15:24:39","1","437","<git><git-checkout>","git: checkout or checkout-index a directory with a different name","<p>I would like to checkout a directory, and its contents, from an earlier commit into the working directory under another name; or alternatively into another directory under the same name.</p>

<p>It's a bit like checking out a temp file, but I need a whole directory and I don't want to overwrite the existing one.</p>
","4","2087192","",""
"28226798","2480715","2015-01-29 23:42:50","0","131","<git><version-control><git-branch><git-remote><git-checkout>","How can I retrieve git remote branches?","<p>I'm clearly missing something since I am unable to fetch the remote branch I need on the server from the git repo I've been working with locally.</p>

<p><strong>On my local dev environment</strong></p>

<p>I run <code>git remote -v</code> and it gives me:</p>

<pre><code>origin  git@git.example.com:the_repo (fetch)
origin  git@git.example.com:the_repo (push)
</code></pre>

<p>I run <code>git branch</code> and it gives me:</p>

<pre><code>* live
  master
</code></pre>

<p><strong>On my live server environment</strong></p>

<p>I run <code>git remote -v</code> and it gives me:</p>

<pre><code>origin  git@git.example.com:the_repo (fetch)
origin  git@git.example.com:the_repo (push)
</code></pre>

<p>I run <code>git branch</code> and it gives me:</p>

<pre><code>* master
</code></pre>

<p>When I try to fix this situation by running <code>git fetch</code> or <code>git fetch origin</code>, I still do not see my <code>live</code> branch upon running <code>git branch</code> again. I suspect this is because <code>git branch</code> only lists my local branches. </p>

<p><strong>How can I fetch the repo's remote branches and list them before I check them out locally?</strong></p>

<p>Many thanks - much appreciated.</p>
","0","2480715","",""
"46489378","129209","2017-09-29 13:01:04","0","75","<git><git-checkout>","Source code with project-name.git how do I checkout","<p>I have this zip file. I have no idea how to checkout the source.</p>

<p>Here is the folder.
<a href=""https://i.stack.imgur.com/P3DU8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/P3DU8.png"" alt=""git folder structure""></a></p>

<p>As my understanding. Normally the git folder is .git. I am not sure how come it is like this.</p>

<p>I tried to rename the shiroproject.git to .git, and try to run <code>git status</code>
then it prompted <strong>This operation must be run in a work tree</strong></p>

<p>Can anyone help on this matter?</p>
","0","129209","",""
"28238559","323456","2015-01-30 14:57:42","15","1589","<git><gulp><git-checkout><gulp-watch>","Pausing file watchers until git checkout complete","<p>What does git do when starting the checkout operation?  Does it write out a lock file or something?</p>

<p>I use gulp, and I'd like it to ""pause"" the watchers if git is actively performing a checkout operation.</p>

<p>I'm okay with possibly having to ""resave"" something to kick the file watcher back into gear.</p>
","0","323456","0","0"
"28555062","4290309","2015-02-17 05:10:57","55","41458","<git><git-checkout>","Can I use ""git checkout --"" on two files?","<p>Is it possible to use git checkout -- on multiple files in order to discard the changes? </p>

<p>If so how would I specify multiple files?</p>
","1","4290309","0","0"
"46802675","8292763","2017-10-18 04:10:48","0","760","<git><github><git-checkout><git-stash>","git revert / stash change without losing its history","<p>This is my requirement:
I have <code>a -&gt; b -&gt; c (HEAD)</code>. 
I am adding a new commit <code>d</code>. Now, it becomes <code>a -&gt; b -&gt; c -&gt; d(HEAD)</code>. </p>

<p>Now, I want to revert to <code>c</code> (that is, undoing all changes that were made in <code>d</code>) and make an additional change and form <code>e</code>. The tree should look like <code>a -&gt; b-&gt; c -&gt; d -&gt; e(HEAD)</code>. NOTE: I must not lose the <code>d</code> history. I must revert it and add new changes to <code>e</code>.</p>

<p><strong>UPDATE:</strong>
I can explain with a better example. Let's say I have <code>a-&gt;b-&gt;c(HEAD)</code>, here <code>c</code> is the primary or main commit. <em>I'm trying to automate with a script.</em> </p>

<p><strong>Initial Step:</strong> I start with <code>git checkout &lt;SHA1 of c&gt;</code>, tree looks like: <code>a-&gt;b-&gt;c(DETACHED HEAD)</code></p>

<p><strong>My Real query starts from here:</strong></p>

<ol>
<li>I <strong>modify few files (I don't add any new files)</strong> and add a new commit <code>d</code>. So tree should look like: <code>a-&gt;b-&gt;c-&gt;d(HEAD)</code></li>
<li>I <strong>revert changes in #1</strong> by running <strong>Initial Step</strong> and <em>modify other files (again, I don't add any new files)</em> and add a new commit <code>e</code>. So tree should look like: <code>a-&gt;b-&gt;c-&gt;d-&gt;e(HEAD)</code></li>
</ol>

<p><strong>NOTE:</strong> Here <code>e</code> = revert of commit <code>d</code> + new changes to <code>c</code>. I can't blindly use <code>git revert HEAD</code> since <code>c</code> is considered to be the primary commit. I was thinking I could use <code>git stash</code> and <code>git stash pop</code> to remove old changes and insert new changes. Can I do something like <code>git checkout stash</code>?</p>

<p><strong>In short:</strong> I'm trying to fuzz test commit <code>c</code> for around 50 times (ie) commit and revert for 50 times</p>
","3","8292763","",""
"28573481","2005291","2015-02-17 23:51:56","2","510","<git><git-checkout><git-reset>","Does git checkout -B perform a reset?","<p>I have branch called <code>shared</code> that is shared amongst other developers. I work off of a <code>feature</code> branch. Whilst on my <code>feature</code> branch, I ran <code>git checkout -B shared</code>, and got the following message:</p>

<pre><code>Switched to and reset branch 'shared'
Your branch and 'origin/shared' have diverged,
and have 6 and 126 different commits each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
</code></pre>

<p>I pulled and resolved the conflicts and suddenly realized that my <code>shared</code> branch had all of my changes from my <code>feature</code> branch. My questions are:</p>

<ol>
<li><p>How did this happen exactly?</p></li>
<li><p>Looking at the docs it says that the branch is reset when running checkout with the <code>-B</code> flag:</p>

<blockquote>
  <p>If <code>-B</code> is given, <code>&lt;new_branch&gt;</code> is created if it doesn’t exist; otherwise, it is reset.</p>
</blockquote>

<p>Last time I checked, running reset on a shared branch was dangerous. Or does 'reset' have a different meaning, in this context?</p></li>
</ol>
","7","2005291","",""
"28578709","172406","2015-02-18 08:01:13","0","87","<git><drupal><git-checkout>","How can a git checkout or deployment avoid overwriting non source code files and directories in the working directory?","<p>I am currently using Git locally for my current Drupal installation, and I want to convert to working from a remote repository which I will clone for use in a development installation. </p>

<p>If after testing the updates and upgrades  on the development version proves safe, I will then push it to the main repo and pull it from there into the working installation.</p>

<p>Is there a possibility that refreshing from the remote and checking out some branches might overwrite the other files in the Drupal directory which are not under git control, like media files, documents etc? Are there checkout commands which a designed to avoid that kind of situation?</p>
","0","172406","",""
"46820965","4812515","2017-10-18 23:58:50","1","2166","<recovery><git-checkout>","Is it possible to restore a file overwritten by git checkout?","<p>I had uncommitted changes and ran</p>

<pre><code>gco . /path/to/file.js
</code></pre>

<p>Needless to say, I lost all my changes.  Is there any way to undo this? Changes were not staged and didn’t have tabs open. Wish they had been. Using VSCode(with git lens) for an editor. Don’t have time machine enabled.</p>
","10","4812515","0","0"
"72346246","14653849","2022-05-23 09:31:21","2","56","<git><git-commit><git-checkout>","How to make git always warn to stash or commit changes before checking out a different branch?","<p>When I have modified my current branch and check out to a different branch, <code>git</code> warns me that I have not stashed or commited fails <strong>only when there is a conflict between the two branches.</strong></p>
<p>How can I make git always warn me that files have not been commited before I checkout?</p>
","1","14653849","0","0"
"54636883","939983","2019-02-11 18:28:46","0","361","<git><git-checkout><revert>","How to revert ""git checkout --"" to get local changes back","<p>By mistake I ran <code>git checkout --</code> and all local changes are gone. I can't see anything when running <code>git log</code>. How can I get all local changes back?</p>
","1","939983","",""
"46137128","8586238","2017-09-10 03:50:07","2","4060","<git><github><git-checkout>","git checkout <branch> -- path/to/file not working","<p>When I try to replace a file in a branch with the version from the master branch it acts as if it worked; however, the file is not replaced and nothing new is staged. For example, here is a sample workflow:</p>

<pre><code>git checkout someBranch
git checkout master -- path/to/file
</code></pre>

<p>The second command will return as if nothing went wrong or nothing has happened. How do I checkout a file from a different branch into my current branch?</p>
","5","8586238","",""
"64693438","12608776","2020-11-05 08:16:03","0","920","<linux><git><linux-kernel><git-checkout>","Linux kernel source git checkout to specific version","<p>When I am in Linux kernel git local repo and want to <code>git checkout</code> to some specific version of sources I see e.g. the following options:</p>
<pre><code>git checkout v4.4
v4.4       v4.4-rc1   v4.4-rc2   v4.4-rc3   v4.4-rc4   v4.4-rc5   v4.4-rc6   v4.4-rc7   v4.4-rc8
</code></pre>
<p>But there are much more versions in <a href=""https://elixir.bootlin.com/linux/v4.4.233/source"" rel=""nofollow noreferrer"">https://elixir.bootlin.com/linux/v4.4.233/source</a>.<br />
E.g. I want to checkout to <em>v4.4.233</em>.<br />
How can I do this in my local repo?</p>
","0","12608776","",""
"46326120","3437012","2017-09-20 15:27:19","2","2624","<git><git-checkout>","Why does ""git checkout <filename>"" only work for non-staged files?","<p>If I commit and then make changes to a file <code>foo</code>, I can undo these changes by <code>git checkout foo</code>. If I make changes to <code>foo</code> AND add them with <code>git add foo</code>, then <code>git checkout foo</code> doesn't do anything (and doesn't say anything)</p>

<p>What is the reasoning behind this?</p>
","2","3437012","0","0"
"46348522","6243124","2017-09-21 16:04:34","2","1570","<git><git-branch><git-merge><git-commit><git-checkout>","Did git checkout just delete my repository?","<blockquote>
  <p><strong>General Question:</strong> How can one use Git locally alone (i.e. by oneself) in such a way that merging changes from a new branch into master, or moving from branch to branch using checkout, doesn't delete everything in the new branch and the master branch?</p>
  
  <p>Or if one wants to avoid git deleting everything and leaving no backups, is it essentially necessary to be working with a remote repository (e.g. GitHub), not just a local one?</p>
</blockquote>

<p><strong>Specific Case:</strong><br>
I had two branches for my local git repository, <code>master</code> and <code>equality</code>, located in the folder <code>.../ps/ps3</code>. I was in the branch <code>equality</code> and I wanted to merge my changes into <code>master</code>.</p>

<p>So first I did <code>git merge</code> and this returned the error:</p>

<p><code>fatal: No remote for the current branch.</code></p>

<p>So then I figured that I needed to be in <code>master</code> rather than <code>equality</code> to merge my changes from <code>equality</code> into master. So what I did next was: <code>git checkout master</code>. This produced the following error:</p>

<p><code>error: Your local changes to the following files would be overwritten by checkout:
    ps3/ps3.aux
    ps3/ps3.log
    ps3/ps3.pdf
    ps3/ps3.synctex.gz
    ps3/ps3.tex
Please commit your changes or stash them before you switch branches.
Aborting</code></p>

<p>I interpreted that error as follows: nothing happened, I am still in the <code>equality</code> branch, I should make another commit of <code>equality</code> branch if I want my changes in <code>equality</code> to be saved when I use them to rewrite the <code>master</code> branch, rather than git rewriting from an earlier version of <code>equality</code>.</p>

<p>My terminal prompt indicated that I was still in the directory <code>.../ps/ps3</code> and in the branch <code>equality</code>, so I didn't think that anything was wrong. When I did <code>git commit -am ""Finished correct proof""</code> I didn't get an error message.</p>

<p><code>5 files changed, 155 insertions(+), 29 deletions(-)
 rewrite ps3/ps3.pdf (72%)</code></p>

<blockquote>
  <p>Now it was either this command, or the one immediately following it, which deleted <em>everything</em>, not just <code>equality</code> and every commit in that branch, but also <code>master</code> and every commit in the branch, and even the entire folder <code>.../ps/ps3</code> of the repository. </p>
</blockquote>

<p>I did <code>git merge</code> (I was still in the branch <code>equality</code>) and I got the error message:</p>

<p><code>fatal: No remote for the current branch.</code></p>

<p>This confused me, because why would I need a remote of anything to do anything? And what did it have to do with my current situation? I guessed it was just an arcane way of complaining that merging the changes from <code>equality</code> into <code>master</code> needed to be done from <code>master</code>. </p>

<p>So next I did <code>git checkout master</code> and got no error, just <code>Switched to branch 'master'</code>. In spite of not getting any errors, I still think this may have been the step that deleted everything, since after doing this my terminal no longer showed that I was in either <code>equality</code> or <code>master</code>, so it seemingly must have at the very least deleted the entire repository, i.e. all of the files in it and the containing folder. </p>

<p>My terminal still said I was in a directory named <code>ps3</code> even though it didn't also list a git branch like it should have. So next I did <code>git merge</code> and then <code>git merge equality</code> but both returned the error:</p>

<p><code>fatal: Unable to read current working directory: No such file or directory</code></p>

<p>Then I did <code>ls</code>, there was no output, then I did <code>cd ..</code> and <code>ls -a</code> and the directory <code>ps3</code> was not listed as being a subdirectory of <code>ps</code>. I.e. the containing folder for the repository, as well everything and every branch in it had been deleted somehow. I didn't even know it was possible to do this with Git -- I thought that the worst possible thing that could happen if I screwed up was that the earlier version in the <code>master</code> branch would overwrite the newer version in the <code>equality</code> branch, and that I could then just do <code>git revert</code> multiple times to get back the <code>equality</code> branch. And I thought <code>git checkout</code> just moved between branches, rather than deleting everything.</p>

<p><a href=""https://try.github.io/levels/1/challenges/22"" rel=""nofollow noreferrer"">This page</a> makes it seem like <code>git checkout master</code> does what I expected it to do, namely switch to the <code>master</code> branch, rather than deleting everything. Also <a href=""https://stackoverflow.com/questions/30875205/restore-a-deleted-folder-in-a-git-repo"">this page</a> makes it seem like <code>git checkout</code> should help restore files, so why did it delete all of mine? </p>
","0","6243124","",""
"10082243","272171","2012-04-10 02:08:40","1","383","<ruby-on-rails><git><restore><git-checkout><revert>","Used git checkout to revert a file - anyway to restore it?","<p>I'm picking up work on this Rails system, and was told I could modify the server to do some testing. I made a small change to a few files for testing, confirmed my suspicions, and then did a recursive git checkout on the root directory.</p>

<p>I restarted passenger with no issue, but got an error with MySQL, namely, my database.yml file did not have the right credentials. Turns out that the dev before me had put database.yml in version control, so the usernames/passwords on this system got reverted to the previous commit on the recursive git checkout.</p>

<p>Is there any possible way to get back that version of database.yml? It seems like I want to step forward in my git commits, but I don't want to monkey around with it if its possible to recover this file. Anyone have any ideas?</p>
","0","272171","",""
"10124223","81415","2012-04-12 13:08:04","14","57677","<git><git-pull><git-checkout><git-fetch>","Pulling just one directory out of a git repo","<p>I have a git repo that I want to do a pull from. I do a normal <code>git pull</code> with no problems. The issue is that I want just one certain directory out of the repo. My thinking was that I could use a <code>.gitignore</code> file with a rule like this:</p>

<pre><code>#Ignore all files
/
#Except the one I want
!/temp
</code></pre>

<p>The problem is this doesn't work. Is that the right way to do it or is there a better way?</p>
","3","81415","0","0"
"10147475","644986","2012-04-13 19:55:46","139","137758","<git><git-pull><git-checkout>","git checkout tag, git pull fails in branch","<p>I have cloned a git repository and then checked out a tag:</p>

<pre><code># git checkout 2.4.33 -b my_branch
</code></pre>

<p>This is OK, but when I try to run <code>git pull</code> in my branch, git spits out this error: </p>

<blockquote>
  <p>There is no tracking information for the current branch. Please
  specify which branch you want to merge with. See git-pull(1) for
  details</p>

<pre><code>git pull &lt;remote&gt; &lt;branch&gt;
</code></pre>
  
  <p>If you wish to set tracking information for this branch you can do so
  with:</p>

<pre><code>git branch --set-upstream new origin/&lt;branch&gt;
</code></pre>
</blockquote>

<p>I want <code>git pull</code> to only update the master branch and leave my current branch alone (it's a tag anyway). Is something like this possible?</p>

<p>The reason I need this is that I have a automatic script which always git pulls the repository and of course fails because of the error above..</p>
","1","644986","0","0"
"28149804","391161","2015-01-26 12:05:29","18","3898","<git><branch><git-checkout>","Difference between `git branch -f <branch_name> <hash>` and `git checkout <branch_name>; git reset --hard <hash>` under a clean working tree?","<p>Up until now, I have always used <code>git checkout &lt;branch_name&gt;; git reset --hard &lt;hash&gt;</code> to move a branch back to an earlier commit.</p>

<p>Then I came across <a href=""https://stackoverflow.com/questions/5471174/git-move-branch-pointer-to-different-commit"">this question</a>, but the answers and comments do not explain in great detail the differences between them.</p>

<p>Assuming I have a clean working tree, what internal differences are there between </p>

<pre><code>git branch -f &lt;branch_name&gt; &lt;hash&gt;
</code></pre>

<p>and </p>

<pre><code>git checkout &lt;branch_name&gt;
git reset --hard &lt;hash&gt;
</code></pre>

<p>and do such differences, if any, have any subtle implications for advanced usage?</p>
","0","391161","0","0"
"46757991","4907735","2017-10-15 17:35:43","7","2507","<c><git><git-checkout><libgit2>","Checkout branch with libgit2","<p>I'm trying to implement a simple checkout operation between 2 branches. The code executes without errors.</p>

<pre><code>git_libgit2_init();
git_object *treeish = NULL;
git_checkout_options opts;
opts.checkout_strategy = GIT_CHECKOUT_SAFE;

/* branchName in this case is ""master"" */
handleError(git_revparse_single(&amp;treeish, repo, branchName));
handleError(git_checkout_tree(repo, treeish, &amp;opts));

git_object_free(treeish);
git_libgit2_shutdown();
</code></pre>

<p>However, the branch does not change when I check it using <code>git status</code>.
I've checked the <a href=""https://libgit2.github.com/docs/guides/101-samples/"" rel=""noreferrer"">101 examples of libgit2</a> and it says:</p>

<blockquote>
  <p><code>git_checkout_options</code> isn’t actually very optional. The defaults won’t
  be useful outside of a small number of cases. The best example of this
  is checkout_strategy; the default value does nothing to the work tree.
  So if you want your checkout to check files out, choose an appropriate
  strategy.</p>
  
  <p><code>NONE</code> is the equivalent of a dry run; no files will be checked out.</p>
  
  <p><code>SAFE</code> is similar to <code>git checkout</code>; unmodified files are updated, and modified files are left alone. If a file was present in the old HEAD
  but is missing, it’s considered deleted, and won’t be created.</p>
  
  <p><code>RECREATE_MISSING</code> is similar to <code>git checkout-index</code>, or what happens after a clone. Unmodified files are updated, and missing files are
  created, but files with modifications are left alone.</p>
  
  <p><code>FORCE</code> is similar to <code>git checkout --force</code>; all modifications are overwritten, and all missing files are created.</p>
</blockquote>

<p>In my case I'm testing it with a very small repo without uncommited changes and without any conflicts between these 2 branches.</p>

<p><a href=""https://i.stack.imgur.com/6Iggl.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6Iggl.png"" alt=""git log""></a></p>

<p>What am I doing wrong? I expected this code to do something like <code>git checkout master</code></p>
","0","4907735","",""
"65640502","11855650","2021-01-09 07:54:31","0","60","<git><git-branch><git-checkout>","git branch new_branch VS git checkout -b new_branch","<p>The following are two git commands. Both of them create a new branch</p>
<pre><code>git branch new_branch_name

git checkout -b new_branch_name
</code></pre>
<p>What is the difference between them?</p>
","1","11855650","",""
"28912252","172406","2015-03-07 06:49:05","0","36","<git><git-checkout><working-directory>","It there a built in Git command for checking out a Git ref or branch into a non git directory?","<p>I am compiling source from a local git mirror in a separate directory, ie I don't do any work in the  Git directory, I just need the source code from it.</p>

<p>Of course I go into the Git directory, check out the ref I want and copy it into the compilation directory, but I want to know if there is a git command for doing it directly</p>

<p>Something along the lines of:</p>

<pre><code>git checkout file://home/user/repo.get treeish  /my/working/directory
</code></pre>
","1","172406","",""
"29290026","4009879","2015-03-26 22:26:51","1","1859","<git><git-checkout>","Checking out and not allowing changes to a file in git","<p>Is there a way to checkout a file in git and not allow anyone else to make changes to it until it is checked back in by the user that checked it out? I.e. Checking out in the true sense of the words.</p>

<p>Thx!</p>
","3","4009879","",""
"47505122","6044814","2017-11-27 06:30:31","0","1281","<git><branch><git-commit><git-checkout><nothing>","git status say nothing to commit, but can't switch branch","<p>I'm working on windows, Thanks for git professionals for any help on this.</p>

<pre><code>PS G:\Solid\WebPortals&gt; git status

On branch pos-event-waiver
nothing to commit, working tree clean
PS G:\Solid\WebPortals&gt; git checkout pos-exchange-bill
error: Your local changes to the following files would be overwritten by checkout:
        Site/WebPortals/assets/typescript/pos/cart/waiver.component.ts
Please commit your changes or stash them before you switch branches.
Aborting
</code></pre>

<p><a href=""https://i.stack.imgur.com/HCosC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HCosC.png"" alt=""enter image description here""></a></p>
","3","6044814","",""
"11458926","463038","2012-07-12 19:10:32","24","24469","<macos><git><git-checkout>","git checkout -- <files> doesn't discard changes?","<p>I have changes in my working directory that I'm trying to discard (reset to the current indexed version of the files), however, <code>git checkout -- &lt;file&gt;</code> will not discard the changes.
I've attempted to manually remove the files (<code>rm -r files</code>) then run <code>git checkout -- .</code>, which displays the files as modified again.</p>

<pre><code>$ git checkout -- .
$ git status
# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   files/Hulk.png
#   modified:   files/Hulk_2.png
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Running <code>git diff</code> shows the files are modified...</p>

<pre><code>diff --git a/files/Hulk.png b/files/Hulk.png
index 1c256cb..1d37fe0 100644
Binary files a/files/Hulk.png and b/files/Hulk.png differ
diff --git a/files/Hulk_2.png b/files/Hulk_2.png
index 1c256cb..0717199 100644
Binary files a/files/Hulk_2.png and b/files/Hulk_2.png differ
</code></pre>

<p>NOTE: Some people have said to run <code>git checkout .</code>, however this will achieve the same result as <code>git checkout -- .</code>. The <code>--</code> is just a notation used in the git checkout command to differentiate treeish/commit points from files/paths.</p>

<p>OS: OSX 10.6
Git: 1.7.10.2</p>
","5","463038","0","0"
"30085490","4844673","2015-05-06 19:05:57","0","4195","<git><hash><git-checkout>","Finding hash for git checkout","<p>I am working through the git immersion tutorial.  We are up to checking out a branch.  The instructions say to type the following</p>

<pre><code>$ git checkout &lt;hash&gt;

$ cat hello.rb
</code></pre>

<p>It says that the command depends on the has values in the repo and my hash values will be different than theirs so I'm supposed to substitute the proper hash value for my repo.  How do I know what to substitute for my hash value?  They're using some long number but I don't see a number on my screen at all?</p>

<p>In addition I'm a little lost in the tutorial what exactly are they having me do?  I've done other tutorials and they've told me to use get checkout master, so is this different?</p>

<p>Thanks for any context on this in general as well as what I need to do to get to this hash.  I wanted to add an screen capture image to help clarify, but I'm new so it wouldn't let me.  I'll copy the text hopefully that help...</p>

<pre><code> $ git checkout 9416416
Note: checking out '9416416'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 9416416... First Commit
$ cat hello.rb
puts ""Hello, World""
</code></pre>
","0","4844673","",""
"13424858","707301","2012-11-16 21:43:47","0","104","<windows><git><tortoisegit><git-remote><git-checkout>","How do I set git up to keep my files in sync?","<p>I'm having a problem with getting my Git repository to function the way that I want it to. I'm sure it can do what I want, but I'm just not figuring it out on my own. Here's my setup...</p>

<ul>
<li>PC1: This is my dev machine where I created the repository, and make changes to it.</li>
<li>SERVER1: This is where my remote Git repository is located, and all changes are pushed to it from PC1.</li>
<li>PC2: This is my QA machine. I cloned the Git repo from SERVER1. I wish to checkout whatever branch I want to test from the remote repository, and be able to do pulls to get the latest code.</li>
</ul>

<p>I use TortoiseGit on both PCs. I created a branch (2012_2_2) on PC1, committed changes, and pushed to SERVER1. From PC2, I selected ""Switch/Checkout"", and checked out remotes/orgin/2012_2_2. </p>

<p>Sadly, this doesn't work. When I look at the properties of the PC2 repository, the Current Branch say ""fatal: ref HEAD is not a symbolic link"". Also, I am unable to pull changes made to branch 2012_2_2. When I select pull from the menu, the only branch available to pull from is origin/master.</p>

<p>Where did I go wrong?</p>
","3","707301","",""
"66483574","9509206","2021-03-04 21:50:51","3","539","<git><git-checkout><git-stage><git-index>","Why does git checkout file behave like reset staged file followed by checkout unstaged file?","<p>I've come across this statement in git documentation:</p>
<pre><code>Checking out a file is similar to using git reset with a file path, except it updates the working directory instead of the stage
</code></pre>
<p>Link:<a href=""https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting"" rel=""nofollow noreferrer"">https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting</a></p>
<p>Section: &quot;Git Checkout File&quot;</p>
<p>Now suppose I have a repo and a file <code>test.txt</code> in it</p>
<p>At first the working directory is clean:</p>
<pre><code>On branch master
nothing to commit, working tree clean
</code></pre>
<p>Now I <strong>modify</strong> <code>test.txt</code>, run <code>git add</code> and <code>git status</code> shows now:</p>
<pre><code>On branch master
Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
        modified:   test.txt
</code></pre>
<p>Now I run <code>git checkout HEAD test.txt</code> and get:</p>
<pre><code>Updated 1 path from 58e7043
</code></pre>
<p>Output of <code>git status</code>:</p>
<pre><code>On branch master
nothing to commit, working tree clean
</code></pre>
<p>According to the docs the version of <code>test.txt</code> in the <strong>index</strong> should have <strong>stayed the same</strong> and the version of it in the working directory should've changed back to its version in the commit to which HEAD points, <strong>resulting in different versions of the file between the working directory and the index</strong> --&gt; in which case shouldn't <code>git status</code> output something ? But <code>git status</code> doesn't show that - why ?</p>
<p>Usually to go from staged file to clean working tree I'd have to use <code>git reset HEAD &lt;filename&gt;</code> followed by <code>git checkout HEAD &lt;filename&gt;</code> for that file but <strong>here it seems to do both</strong> ??</p>
<p>I'm confused</p>
<p>Edit - also what's interesting is that if after staging the file <code>test.txt</code> I run <code>git checkout test.txt</code> instead of <code>git checkout HEAD test.txt</code> I get:</p>
<pre><code>Updated 0 paths from the index
</code></pre>
<p>Even though these 2 forms should be equivalent where the former defaults to <code>HEAD</code> as well (?)</p>
<p>I'm confused again</p>
","0","9509206","",""
"14416175","1275959","2013-01-19 16:10:10","1","1708","<git><gitignore><git-pull><git-checkout>","Git checkout failing after pulling and changing .gitignore file","<p>Suppose I have in my local repo two branches 'master' and 'new', in master I decided to put a folder 'folder/' in .gitignore and the I pulled from the repo into master, adding a new folder 'temp/' Now when I want to checkout to 'new', I have this </p>

<pre><code>error: The following untracked working tree files would be overwritten by checkout:
.folder/subfolder/somefile
.folder/subfolder/somefile
tmp/somefiles(1),tmp/somefiles(2)...
</code></pre>

<p>(I commited before checking out out) I tried to run git rm --cached to the 'temp/'and 'folder/' folder and I don't understand why I get this message (and I think check out process is not really clear for me). Some one can help ?</p>
","0","1275959","0","0"
"55303401","4746206","2019-03-22 15:52:30","1","724","<git><git-checkout>","Difference between git checkout - and git checkout master","<p>What are the differences between:</p>

<pre><code>git checkout - 
</code></pre>

<p>and</p>

<pre><code>git checkout master
</code></pre>

<p>Thanks</p>
","2","4746206","0","0"
"36677501","6216135","2016-04-17 13:59:34","4","6566","<git><git-checkout>","git checkout branch with quotes","<p>I have two branches:
feature/x
""feature/y""</p>

<p>I can checkout the first with no problems, but the one in quotes is giving me problems, with the error 'feature/y' did not match any files known to git.</p>
","4","6216135","",""
"36677857","3179955","2016-04-17 14:32:51","3","1326","<git><git-merge><git-checkout>","How to git merge changes from main branch to orphan branch without adding to orphan's history?","<p>I have a git repository for my phd dissertation (in latex). The university policies does not allow me to share the background review chapter of my dissertation with my research adviser, I am free to share and get opinion for other chapters.</p>

<p>To share the repository with my advisor I created an orphan branch (noRevBranch) with the required chapter removed and pushed and tracked this branch to a new repository on github.
I can share this with his and he can not access the removed chapter because there is no history here.</p>

<p>The question is how do I merge any changes I make to the master branch in the future to the noRevBranch without also appending the master branch history to the new merge commit?</p>
","0","3179955","",""
"37067671","6299330","2016-05-06 08:26:34","1","30","<git><version-control><branch><git-checkout>","When doing git checkout and checking the branch it shows - * (no branch)","<p>After doing checkout with tag server_8_2_4 am getting this:</p>

<pre><code>root@dhp# git branch
* (no branch)
  master
</code></pre>

<p>Is my current branch now server_8_2_4? Or what exactly happened?</p>
","0","6299330","",""
"37114775","3631654","2016-05-09 11:36:06","5","2644","<git><git-branch><git-checkout>","git checkout with different node_modules folder","<p>I have two branches, one called ""gh-pages"" and the other ""master"" branch. Both are having separate folders like ""node_modules"", but they are completely different. And they are untracked!</p>

<p>So when checking out e.g. the ""gh-pages"" branch as follows</p>

<pre><code>git checkout gh-pages
</code></pre>

<p>I need a way to specify that Git should not just remove (but save) all tracked, but also all untracked files and folders (like the ""node_modules"" folder) from the ""master"" branch. And then load all tracked files and folders from the ""gh-pages"" branch and as well as all untracked files and folders.</p>

<p>Is there a simple way or do I really need to remove untracked files and folders for each checkout so that the two do not come into the cross?</p>
","0","3631654","",""
"53214095","6492006","2018-11-08 18:34:38","2","1325","<git><macos><github><git-checkout>","git checkout errors even though git status reports that working tree is clean","<p>I am on my local <code>my-feature</code> branch</p>

<p><code>git status</code> reports <code>nothing to commit, working tree clean</code></p>

<p>I want to switch to develop branch and do <code>git fetch</code> and <code>git merge</code> there (I prefer it over <code>git pull</code>)</p>

<p>However, doing so produces error below</p>

<p>Here I first check status and it shows that all is clean</p>

<pre><code>mymbp:MyProj username$ git status
On branch my-feature
nothing to commit, working tree clean
</code></pre>

<p>Next I try to checkout my develop branch which is an existing local branch</p>

<pre><code>On branch my-feature
nothing to commit, working tree clean
mymbp:MyProj username$ git checkout develop
error: Your local changes to the following files would be overwritten by checkout:
    MyProj.sln
Please commit your changes or stash them before you switch branches.
Aborting
</code></pre>

<p>It complains that <code>myProj.sln</code> has been changed even though <code>git status</code> says nothing has changed.</p>

<p>Issuing <code>git status</code> again, confirms that nothing has changed</p>

<pre><code>mymbp:MyProj username$ git status
On branch my-feature
nothing to commit, working tree clean
</code></pre>

<p><strong>UPDATE 1</strong></p>

<p>Doing <code>git ls-files --stage --debug MyProj.sln</code> shows like below and I dont see any 4000 or 8000 (<code>--skip-worktree</code> or <code>--assume-unchanged</code> flags):</p>

<pre><code>mymbp:MyProj username$ git ls-files --stage --debug MyProj.sln
100644 40c3593ed572beb2139c189455274f8900a1340c 0   MyProj.sln
  ctime: 1541703970:521058155
  mtime: 1541637062:121492660
  dev: 16777220 ino: 8470003
  uid: 501  gid: 20
  size: 55684   flags: 0
mymbp:MyProj username$ 
</code></pre>

<p>Issuing <code>git show develop:MyProj.sln</code> shows me number of project files and their GUIDs in the solution, Global sections for pre and post solution but the output is very long showing just Release, Debug configurations and some GUIDS.  Not sure what to do with that yet.</p>

<p><strong>UPDATE 2</strong></p>

<p>So, it seams as if MyProj.sln file is in work-tree but not in index and commit (HEAD).  Based on @torek explanation, issuing git add MyProj.sln should add this file to index but that is not true since nothing is added and git status returns nothing before I did git add and after I did it.  Meanwhile git checkout still complains that MyProj.sln has changed.  git diff also returns nothing</p>

<p><strong>UPDATE 3</strong></p>

<p>I also found someone suggest issuing these 2 command to get hash of commit HEAD and to then see what changed in it.  I see lots of files duplicate, while some do not.  Those that do not appear to be files I added in my current feature branch.  Those that are duplicate appear to be files from remote</p>

<pre><code>mymbp:MyProj username$ git rev-parse HEAD
1ca8d8a7c5eff0f2a03eb185f1b25aff27c1d2fd
mymbp:MyProj username$ git ls-tree -r 1ca8d8a7c5eff0f2a03eb185f1b25aff27c1d2fd
</code></pre>

<p>And here is the output of it</p>

<p><a href=""https://i.stack.imgur.com/dErMl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dErMl.png"" alt=""enter image description here""></a></p>

<p><strong>UPDATE 4</strong></p>

<p>My config is:</p>

<pre><code>mymbp:MyProj username$ git config --list
credential.helper=osxkeychain
core.excludesfile=/Users/username/.gitignore_global
core.autocrlf=input
difftool.sourcetree.cmd=opendiff ""$LOCAL"" ""$REMOTE""
difftool.sourcetree.path=
mergetool.sourcetree.cmd=/Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh ""$LOCAL"" ""$REMOTE"" -ancestor ""$BASE"" -merge ""$MERGED""
mergetool.sourcetree.trustexitcode=true
user.name=User Name
user.email=username@somesystems.com
color.ui=true
color.status.changed=blue normal
color.status.untracked=red normal
color.status.added=magenta normal
color.status.updated=green normal
color.status.branch=yellow normal bold
color.status.header=white normal bold
commit.template=/Users/username/.stCommitMsg
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
core.precomposeunicode=true
remote.origin.url=https://github.com/SomeSystems/MyProj.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.develop.remote=origin
branch.develop.merge=refs/heads/develop
branch.feat-1.remote=origin
branch.feat-1.merge=refs/heads/feat/feat-1
branch.1234-refactoring.remote=origin
branch.1234-refactoring.merge=refs/heads/1234-refactoring
mymbp:MyProj username$ 
</code></pre>
","5","6492006","",""
"37188412","1995573","2016-05-12 13:28:58","0","109","<git><git-checkout>","git checkout -f causing all files to be modified","<p>I just started learning git a few days ago and I started by setting up an example repo. </p>

<p>After performing a successful checkout using git checkout -f, when I run ""git status"" in the local repo, it comes back telling me all files have been modified.</p>

<p>I do not believe this is normal behavior and from my research, maybe it has something to do with line endings? I am running git on Windows 10 if that helps.</p>
","2","1995573","",""
"37201104","339874","2016-05-13 04:10:42","18","18918","<git><git-checkout>","git checkout <commit> . is not removing files that were added after the commit","<p>Using a public repo, I want to get my master branch back to a certain commit from the past. I have reviewed the options and the best thing for me looks to be a simple checkout to the desired commit, then commit to the master branch. However when I do the checkout it does not remove some files that have been added into master after the specified commit hash.</p>

<p>So for example, if I want to get back to commit <code>aaa1</code>:</p>

<pre><code>$ cd working-copy-top-dir
$ git checkout master
$ git checkout -- .
$ git clean -fd
$ git checkout aaa1 .
$ git clean -fd
</code></pre>

<p>But at this point some files added after <code>aaa1</code> are still in the working copy. What is the <code>checkout</code> command to get the working copy <em>data</em> back how it was at <code>aaa1</code>?</p>

<pre><code>$ git --version
git version 2.7.2.windows.1
</code></pre>
","3","339874","0","0"
"70637762","79125","2022-01-09 01:22:36","1","139","<git><git-branch><git-checkout>","Prevent git from creating branches that use names of remotes?","<p>I often accidentally checkout remote tracking branches incorrectly:</p>
<pre><code>git checkout -b origin/fixbugs
</code></pre>
<p>The <code>-b</code> should be a <code>-t</code>.</p>
<p>This mistake creates a branch called &quot;origin/fixbugs&quot;. How could I get git to give me an error instead of creating this branch when the branch name begins with &quot;origin/&quot; (or any other remote name)?</p>
","1","79125","0","0"
"70874686","5437543","2022-01-27 07:20:39","0","993","<jenkins><jenkins-pipeline><git-clone><git-checkout><gitversion>","Why does this ""complicated"" git clone/checkout cause gitversion to fail?","<p>I have the following pipeline syntax code in a Jenkinsfile to clone a git repo:</p>
<pre><code>      checkout([$class: 'GitSCM',
                branches: [[name: &quot;${branch}&quot;]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'SubmoduleOption',
                              disableSubmodules: false,
                              parentCredentials: false,
                              recursiveSubmodules: true,
                              reference: '',
                              trackingSubmodules: false],
                             [$class: 'LocalBranch',
                              localBranch: &quot;&quot;],
                             [$class: 'RelativeTargetDirectory',
                              relativeTargetDir: relative_dir]],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: cred_id,
                                     url: git_url]]])
</code></pre>
<p>Following is the output of one instance of this Jenkins job, which reveals the git commands used to clone a repo:</p>
<pre><code> &gt; git init /home/user/workspace/CICD/PRJ/repo/PRJ/repo/121/src # timeout=10
Fetching upstream changes from ssh://git@bitbucket.company.com:7999/PRJ/repo.git
 &gt; git --version # timeout=10
using GIT_SSH to set credentials user - ssh username with private key. 
 &gt; git fetch --tags --progress -- ssh://git@bitbucket.company.com:7999/PRJ/repo.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git config remote.origin.url ssh://git@bitbucket.company.com:7999/PRJ/repo.git # timeout=10
 &gt; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git config remote.origin.url ssh://git@bitbucket.company.com:7999/PRJ/repo.git # timeout=10
Fetching upstream changes from ssh://git@bitbucket.company.com:7999/PRJ/repo.git
using GIT_SSH to set credentials user - ssh username with private key. 
 &gt; git fetch --tags --progress -- ssh://git@bitbucket.company.com:7999/PRJ/repo.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git rev-parse refs/remotes/origin/feature/hcf^{commit} # timeout=10
 &gt; git rev-parse refs/remotes/origin/refs/heads/feature/hcf^{commit} # timeout=10
Checking out Revision 37b9492373951ab0b4c70fa64a3320be58133e0e (refs/remotes/origin/feature/hcf)
 &gt; git config core.sparsecheckout # timeout=10
 &gt; git checkout -f 37b9492373951ab0b4c70fa64a3320be58133e0e # timeout=10
 &gt; git branch -a -v --no-abbrev # timeout=10
 &gt; git checkout -b feature/hcf 37b9492373951ab0b4c70fa64a3320be58133e0e # timeout=10
Commit message: &quot;Uncomment set_fault&quot;
 &gt; git rev-list --no-walk 59ce67929be6c901975596db509de7a72b3c557a # timeout=10
</code></pre>
<p>This same Jenkinsfile automatically applies git tags using <code>gitversion</code> like so:</p>
<pre><code>docker run -u $(id -u ${USER}):$(id -g ${USER}) --rm -v &quot;$(pwd):/repo&quot; artifactory.company.com/gittools/gitversion:5.7.1 /repo
</code></pre>
<p>The above methods of git cloning and using <code>gitversion</code> to generate new git tags has been working fine for several months without incident.</p>
<p><strong>Problem</strong>:<br />
Today, <code>gitversion</code> failed unexpectedly when this Jenkins job was run to build a git branch that I cannot see anything unique about (versus the many successfully-built branches).<br />
The error, below, seems to indicate an inability to identify development or release branches, which are <code>dev</code> and <code>master</code>, respectively, in our case.</p>
<pre><code>+ docker run -u 1172002866:1172000513 --rm -v /home/user/workspace/CICD/PRJ/repo/PRJ/repo/121/src:/repo artifactory.company.com/gittools/gitversion:5.7.1 /repo
INFO [01/26/22 23:30:14:02] Working directory: /repo
INFO [01/26/22 23:30:14:26] Project root is: /repo/
INFO [01/26/22 23:30:14:26] DotGit directory is: /repo/.git
INFO [01/26/22 23:30:14:59] Begin: Loading version variables from disk cache
  INFO [01/26/22 23:30:14:59] Cache file /repo/.git/gitversion_cache/AF7963E4F79300A465EFC56DBA14B2B679307C08.yml not found.
  INFO [01/26/22 23:30:14:59] End: Loading version variables from disk cache (Took: 1.50ms)
  INFO [01/26/22 23:30:14:61] Using latest commit on specified branch
  INFO [01/26/22 23:30:14:62] Begin: Attempting to inherit branch configuration from parent branch
    INFO [01/26/22 23:30:14:65] Begin: Finding branch source of 'feature/hcf'
    INFO [01/26/22 23:30:14:66] End: Finding branch source of 'feature/hcf' (Took: 15.87ms)
    INFO [01/26/22 23:30:14:67] Begin: Getting branches containing the commit '37b9492'.
      INFO [01/26/22 23:30:14:67] Trying to find direct branches.
      INFO [01/26/22 23:30:14:67] No direct branches found, searching through all branches.
      INFO [01/26/22 23:30:14:67] Searching for commits reachable from 'origin/dev'.
      INFO [01/26/22 23:30:14:69] The branch 'origin/dev' has no matching commits.
      INFO [01/26/22 23:30:14:69] Searching for commits reachable from 'origin/master'.
      INFO [01/26/22 23:30:14:70] The branch 'origin/master' has no matching commits.
      INFO [01/26/22 23:30:14:70] Searching for commits reachable from 'origin/release-npm2'.
      INFO [01/26/22 23:30:14:70] The branch 'origin/release-npm2' has no matching commits.
      INFO [01/26/22 23:30:14:70] Searching for commits reachable from 'origin/release-npm3'.
      INFO [01/26/22 23:30:14:71] The branch 'origin/release-npm3' has no matching commits.
      INFO [01/26/22 23:30:14:71] Searching for commits reachable from 'origin/release-5944.0'.
      INFO [01/26/22 23:30:14:72] The branch 'origin/release-5944.0' has no matching commits.
      INFO [01/26/22 23:30:14:72] Searching for commits reachable from 'origin/release-5944.1'.
      INFO [01/26/22 23:30:14:73] The branch 'origin/release-5944.1' has no matching commits.
    INFO [01/26/22 23:30:14:73] End: Getting branches containing the commit '37b9492'. (Took: 63.52ms)
    INFO [01/26/22 23:30:14:73] Found possible parent branches: 
  INFO [01/26/22 23:30:14:74] End: Attempting to inherit branch configuration from parent branch (Took: 116.47ms)
  ERROR [01/26/22 23:30:14:82] An unexpected error occurred:
System.InvalidOperationException: Gitversion could not determine which branch to treat as the development branch (default is 'develop') nor releaseable branch (default is 'main' or 'master'), either locally or remotely. Ensure the local clone and checkout match the requirements or considering using 'GitVersion Dynamic Repositories'
   at GitVersion.Configuration.BranchConfigurationCalculator.InheritBranchConfiguration(IBranch targetBranch, BranchConfig branchConfiguration, ICommit currentCommit, Config configuration, IList`1 excludedInheritBranches) in D:\a\GitVersion\GitVersion\src\GitVersion.Core\Configuration\BranchConfigurationCalculator.cs:line 137
   at GitVersion.Configuration.BranchConfigurationCalculator.GetBranchConfiguration(IBranch targetBranch, ICommit currentCommit, Config configuration, IList`1 excludedInheritBranches) in D:\a\GitVersion\GitVersion\src\GitVersion.Core\Configuration\BranchConfigurationCalculator.cs:line 47
   at GitVersion.GitVersionContextFactory.Create(GitVersionOptions gitVersionOptions) in D:\a\GitVersion\GitVersion\src\GitVersion.Core\Core\GitVersionContextFactory.cs:line 40
   at GitVersion.GitVersionCoreModule.&lt;&gt;c__DisplayClass0_0.&lt;RegisterTypes&gt;b__1() in D:\a\GitVersion\GitVersion\src\GitVersion.Core\GitVersionCoreModule.cs:line 38
   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)
   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.get_Value()
   at GitVersion.VersionCalculation.NextVersionCalculator.get_context() in D:\a\GitVersion\GitVersion\src\GitVersion.Core\VersionCalculation\NextVersionCalculator.cs:line 17
   at GitVersion.VersionCalculation.NextVersionCalculator.FindVersion() in D:\a\GitVersion\GitVersion\src\GitVersion.Core\VersionCalculation\NextVersionCalculator.cs:line 32
   at GitVersion.GitVersionCalculateTool.CalculateVersionVariables() in D:\a\GitVersion\GitVersion\src\GitVersion.Core\Core\GitVersionCalculateTool.cs:line 52
   at GitVersion.GitVersionExecutor.RunGitVersionTool(GitVersionOptions gitVersionOptions) in D:\a\GitVersion\GitVersion\src\GitVersion.App\GitVersionExecutor.cs:line 70
  INFO [01/26/22 23:30:14:82] Attempting to show the current git graph (please include in issue): 
  INFO [01/26/22 23:30:14:82] Showing max of 100 commits
  INFO [01/26/22 23:30:14:93] * 37b9492 3 minutes ago  (HEAD -&gt; feature/hcf, origin/feature/hcf)
</code></pre>
<p><strong>What I have tried</strong>:<br />
When I manually clone the repo and check out the branch using the above git commands, I can reproduce the <code>gitversion</code> failure.</p>
<p>When I &quot;simplify&quot; my git clone and branch checkout to just:</p>
<pre><code>$ git clone ssh://git@bitbucket.company.com:7999/PRJ/repo.git
$ git checkout feature/hcf
$ docker run -u $(id -u ${USER}):$(id -g ${USER}) --rm -v &quot;$(pwd):/repo&quot; artifactory.company.com/gittools/gitversion:5.7.1 /repo
</code></pre>
<p>...then <code>gitversion</code> succeeds and returns an expected value.</p>
<p><strong>Questions</strong>:<br />
Can the Jenkinsfile <code>checkout()</code> statement be modified so that it is functionally identical to the &quot;simple&quot; <code>git clone</code> and <code>git checkout</code> statements? There is obviously some salient difference between the two &quot;methods&quot; of cloning from git and checking out branches that is relevant to <code>gitversion</code>.<br />
If possible, I would prefer a solution that uses the Jenkins pipeline <code>checkout()</code> function over a shell script invocation like <code>sh(script:&quot;git clone...&quot;)</code> -- but perhaps an experienced answerer can convince me that that preference isn't justified.</p>
<p>Can someone explain how I can determine what is &quot;unique&quot; about this particular git repo or branch? With other repos/branches, the above <code>checkout()</code> statement in our Jenkinsfile continues to work simpatico with the subsequent <code>gitversion</code> invocation. So it would seem there is something unique about this one failing case that I don't know how to determine.</p>
","1","5437543","",""
"70884294","10864356","2022-01-27 19:03:16","1","317","<git><version-control><git-commit><git-checkout><git-stash>","Checked out previous git commit, now can't switch back to HEAD","<p>In my React Native project I checked out a previous git commit using <code>git checkout &lt;previous commit SHA&gt;</code>, then tried to return to HEAD using <code>git checkout &lt;most recent commit SHA&gt;</code>. It said <code>error: Your local changes to the following files would be overwritten by checkout: android/gradlew.bat. Please commit your changes or stash them before you switch branches.</code>
I did <code>git stash</code> and then <code>git checkout &lt;most recent commit SHA&gt;</code> again, but it gave me the same <code>Your local changes</code> error.</p>
<p>How can I get back to HEAD?</p>
","0","10864356","",""
"71080098","17216529","2022-02-11 12:27:33","2","1099","<git><gitlab><git-branch><git-commit><git-checkout>","Switch from one git branch to another without loosing the newly added code","<p>I have a repository having two branches master ( keeps final error free code ) and develop ( developing branch ).The default branch is master, I cloned and worked on the project, but unfortunately I forgot to checkout to the develop branch before I start coding.So all the changes that I made will be on the master branch. Is there any way to switch the branch after developing? so that I can commit and push the code only to the develop branch without loosing my code.</p>
","1","17216529","",""
"73216042","15170044","2022-08-03 03:36:06","0","107","<python-3.x><git-checkout><gitpython>","How to execute --track, using GitPython(as a python script). ""git checkout -B <branchname> --track origin/<TeamBranch>""","<p>I can execute &quot;git checkout -B  --track origin/TeamBranch&quot; through terminal. but I have the requirement to implement the above command through my script using Gitpython.
can someone help me with this?</p>
<p>Thanks in advance.</p>
","0","15170044","",""
"56464499","5175709","2019-06-05 16:25:01","1","1371","<git><git-checkout><git-fetch>","How does git checkout work after git fetch","<p>I just did </p>

<pre><code>git fetch origin &lt;remoteBranch&gt;
</code></pre>

<p>And after that I just did </p>

<pre><code>git checkout &lt;remoteBranch&gt;
</code></pre>

<p>That created a local branch with the name of <code>&lt;remoteBranch&gt;</code>. </p>

<p>How does that just work? Normally when I want to create a local branch I have to do </p>

<pre><code>git checkout -b
</code></pre>
","0","5175709","",""
"73234676","1340942","2022-08-04 10:54:40","2","376","<git><git-checkout>","What is the difference between `git checkout HEAD` and `git checkout <current_commit>`?","<p>Say I am working on my master branch. I have the latest commit</p>
<p><code>commit a9993d589a45f108b68fda665d4714039482ede1 (HEAD -&gt; master, origin/master, origin/HEAD)</code></p>
<p>If I do <code>git checkout HEAD</code> or <code>git checkout master</code> I get</p>
<pre><code>➜  myproject:(master)$ git checkout HEAD
Your branch is up to date with 'origin/master'.
➜  myproject:(master)$ git checkout master
Already on 'master'
Your branch is up to date with 'origin/master'.
</code></pre>
<p>But if I checkout the commit with the SHA instead, where all points to the same thing, I end up in a detached state.</p>
<pre><code>➜  myproject:(master)$ git checkout a9993d60c300f108b68fda665d4714039482ede1
Note: switching to 'a9993d60c300f108b68fda665d4714039482ede1'.

You are in 'detached HEAD' state.
(...)
</code></pre>
<p>Why is the last checkout any different from the first two?</p>
","3","1340942","",""
"73270432","2881414","2022-08-07 19:26:52","0","16","<git><git-checkout><git-switch>","git checkout/switch and mtimes","<p>Does git store the <code>mtime</code> (i.e. modification time of my last edit) of the files when committed? And does it restore the <code>mtime</code> when they differ between switching branches? E.g. If the same file has different modification times in two branches, does switching back and forth between the branches restore the respective modification time (i.e. my last edit) or will the <code>mtime</code> match the time of the last switch of the branch?</p>
<p>Also, is this consistent between the different Operating Systems (Linux, Mac, Win) and is there some documentation that documents that behavior?</p>
","1","2881414","",""
"56519368","9966006","2019-06-10 00:35:19","1","143","<git><git-checkout>","git checkout lost files","<p>I am new to git so can you please suggest me how can I resolve this</p>

<pre><code>I was on branch name v1.2.3-build2

&gt; git status
&gt; Your branch is up to date with 'origin/v1.2.3-build2'.

Changes to be committed:
new file:   Project/Modules/Debug/Debug.swift
.....

Changes not staged for commit:
(use ""git add &lt;file&gt;..."" to update what will be committed)
(use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

modified ....

&gt; git:(v1.2.3-build2) ✗ git checkout -b v1.2.3-debug


&gt; A Project/Modules/Debug/Debug.swift
&gt; M Project/Modules/Home/Home.swift
&gt; ....

Switched to a new branch 'v1.2.3-debug'
&gt; git push --set-upstream origin v1.2.3-debug
</code></pre>

<p>But I am not able to find the code on git anymore even I try git reset and git log nothing work.</p>
","7","9966006","0","0"
"67382815","1232987","2021-05-04 10:14:52","0","58","<git><git-checkout>","Accidentally omitted ""--"" when running git checkout","<p>Usually when I have files which have been modified, but which I do not want to include in the commit I do this:</p>
<pre><code>git checkout -- unwanted.file
</code></pre>
<p>Today I accidentally did this to three files (I omitted the &quot;--&quot;):</p>
<pre><code>git checkout unwanted.file
</code></pre>
<p>And the response was:</p>
<blockquote>
<p>Updated 3 paths from the index</p>
</blockquote>
<p>I believe I reverted the changes on these 3 files which is fine, correct me if I am wrong.</p>
<p>But the message confuses me.</p>
","1","1232987","",""
"67457356","9946668","2021-05-09 11:50:04","0","63","<git><git-submodules><git-checkout>","How to checkout between git branches while one has a directory and the other has a submodule under the same name and path?","<p>In a large git repo, I need to maintain an old branch that has a directory named NAME in its root dir. Somewhere along the way, git submodules were introduced to the project so that the directory became a submodule, and the submodule's name was defined NAME for consistency.</p>
<p>Now, when working on the current branch - NewBranchWithSubmodule, upon checkout to the old OldBranchWithDir, I get the following message:</p>
<pre><code>user$ git checkout OldBranchWithDir
error: The following untracked working tree files would be overwritten by checkout:
       NAME/file
Please move or remove them before you switch branches.
Aborting
</code></pre>
<p>I've read about similar issues here, but none of which solved the issue sufficiently enough.</p>
<p>what is the proper way to checkout or to maintain such condition? (assuming a rename or moving the dir isn't an option)</p>
<p>Thanks!</p>
","0","9946668","",""
"31980034","3311276","2015-08-13 05:20:15","1","195","<git><githooks><git-checkout>","is it possible to run a command before git checkout","<p>every user is logged in with credentials working on a local repo he created branch.</p>

<p>So if that user's path is shared with other anyone probably can navigate to that path and type <code>git checkout  .</code> that would undo all the changes done by the user sitting on different machine with different login but having access to same path where local repo is.</p>

<p>So I want to be able to reject the checkout if the user executing the <code>git checkout</code> command is different then the one who created the local repo at that path. So far I found git hook that executes post-checkout</p>

<p>i.e. checkout succeeded. and do the other things.
So anyone have any idea how this can be achieved to just execute the command before checkout to just reject if user name doesnt matches ?</p>
","4","3311276","0","0"
"31985820","3311276","2015-08-13 10:37:00","1","1830","<git><githooks><git-checkout>","post-checkout git hook not working","<p>I have git checkout hook called post-checkout</p>

<pre><code>$ ll  /usr/local/Cellar/git/2.3.5/share/git-core/templates/hooks/post-checkout 

-rwxr-xr-x  1 root  wheel  375 Aug 13 14:11 /usr/local/Cellar/git/2.3.5/share/git-core/templates/hooks/post-checkout
</code></pre>

<p>the content of post-checkout is:</p>

<pre><code>#!/usr/bin/env bash

echo ""Hello from post-checkout""

# Delete .pyc files and empty directories from root of project
cd ./$(git rev-parse --show-cdup)

# Clean-up
find . -name "".DS_Store"" -delete

NUM_PYC_FILES=$( find . -name ""*.pyc"" | wc -l | tr -d ' ' )
if [ $NUM_PYC_FILES -gt 0 ]; then
    find . -name ""*.pyc"" -delete
    printf ""\e[00;31mDeleted $NUM_PYC_FILES .pyc files\e[00m\n""
fi
</code></pre>

<p>so when I cloned my repo i passed the path of templates to template flag like this:</p>

<pre><code>$ git clone  https://sanfx@bitbucket.org/sanfx/git-maildiff.git --template=/usr/local/Cellar/git/2.3.5/share/git-core/templates/
</code></pre>

<p>but after i clone and CD to that cloned directory of git-maildiff and I try checkout I get nothing .</p>

<pre><code>$ git clone  https://sanfx@bitbucket.org/sanfx/git-maildiff.git --template=/usr/local/Cellar/git/2.3.5/share/git-core/templates/
Cloning into 'git-maildiff'...
remote: Counting objects: 239, done.
remote: Compressing objects: 100% (215/215), done.
remote: Total 239 (delta 109), reused 0 (delta 0)
Receiving objects: 100% (239/239), 72.90 KiB | 0 bytes/s, done.
Resolving deltas: 100% (109/109), done.
Checking connectivity... done.
$ git checkout
Your branch is up-to-date with 'origin/master'.
</code></pre>

<p>but if i ran my executable post-checkout branch I get the Hello from post-checkout printed in shell.</p>

<p>so what is wrong where ?</p>
","2","3311276","",""
"67610147","2416601","2021-05-19 20:04:18","0","62","<git><bitbucket><git-commit><git-checkout>","Instead of git checkout file one by one, checkout a whole commit","<p>I have a situation where I committed to a branch B1. In the commit I have several files. Now I want those files to be copied to a Branch B2.</p>
<p>Actually I am using the following command for each file in the commit on my current branch B2:</p>
<pre><code> $ git checkout B1 path/to/file1
 $ git checkout B1 path/to/file2
 ......
 $ git checkout B1 path/to/fileN
</code></pre>
<p>I guess that there should be a syntax that will allow me to directly checkout the specific commit from branch B1 to branch B2. I tried several solutions but they are rewriting the whole branch which I do not want, nor history of the all files. I only want the state of the file in the particular commit. Overwriting is not a problem.</p>
<p>How to achieve this ?</p>
","1","2416601","",""
"67748064","15103565","2021-05-29 05:31:38","1","481","<git><github><git-branch><git-checkout>","Not able to checkout from a locally created git branch","<p>I created a new branch using :</p>
<p><code>git checkout -b DikshaPython</code></p>
<hr />
<p>Now I am not able to checkout from the branch and move back to master.
Even when I close the window of gitBash and open it again it shows that I am still on this branch.
I have used commands

<code>git fetch</code>
<code>git checkout</code>
and nothing happens. I have even tried to force delete the branch by using <code>git branch -D DikshaPython</code>
and I get and error</p>
<blockquote>
<p>&quot;error: Cannot delete branch 'DikshaPython' checked out at 'C:/Users/Diksha Nasa'&quot;</p>
</blockquote>
<hr />
<p>Searched stack overflow and found some answers which recommended using <code>$ git checkout master</code>
<code>$ git branch -d DikshaPython</code>
Recieved an error</p>
<blockquote>
<p>error: pathspec 'master' did not match any file(s) known to git</p>
</blockquote>
<hr />
<p>Please help me as to how do I get back to my master branch, I have not stored anything on this branch so deleting it is not an issue.</p>
","11","15103565","",""
"67751701","7697451","2021-05-29 13:02:29","-1","152","<git><github><git-push><git-checkout><git-revert>","why cant I push reverted commit in github?","<p>I'm pretty new in git.I was working on a project and I used new commit that ruined my project.</p>
<p>so I used git log and git check out to go back to last commit.that was successful on my computer but when I try to push it on github repository I see this error:</p>
<pre><code>error: failed to push some refs to 'https://github.com/bamdadghoori/courses.git'

hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

bamdad@DESKTOP-MJ4O8KO MINGW64 /e/courses (master)
</code></pre>
<p>these are some ways I tried</p>
<p>1-reinitializing  and using new commit</p>
<p>2-using git revert</p>
","0","7697451","",""
"67822160","16117284","2021-06-03 13:12:33","0","387","<linux><git><git-branch><git-commit><git-checkout>","How do I not transfer changes done to files from a branch to a another in git","<p>I have a homework assignment where I need to make three different implantations to the same program. The professor recommended using git and having each implantation in a different branch. Thing is that when I do a change on a branch named A, it'll also modify the same file in the master branch...I don't want it to carry my changes around every branch, instead keep the changes saved locally on each branch alone. How do i do this ?</p>
<p>(I'm new to using git)
(We work on linux, a remote server, on the terminal)</p>
<p>EDIT: The commands i used to make my project directory:</p>
<p><code>git init</code></p>
<p><code>git commit -m &quot;my message&quot;</code></p>
<p><code>git checkout // to switch branches</code></p>
<p><code>git branch branchname // to create a branch</code></p>
","3","16117284","",""
"14569172","1275959","2013-01-28 19:00:39","23","35346","<git><git-checkout>","Problems with corrupt git repo","<p>My git repo got corrupted while running a find and replace command (See here: <a href=""https://stackoverflow.com/questions/14564936/git-reset-failing-after-find-and-replace"">Git reset failing after find and replace</a>). So I deleted some pack files about which git told me that there were not reachable. So I ran rm ./.git/index, git reset. When running git commit, I got this message :</p>

<pre><code>fatal: corrupt tree sha $someSHA
</code></pre>

<p>Finally git fsck, my working directory went clean and I was able to commit. The pb now is that when I run git checkout some_other_branch, I got this message </p>

<pre><code>fatal: unable to read tree $someSHA
</code></pre>

<p>(The $someSHA appearing are the same). Someone could help me ?</p>

<h3>Edit 1 :</h3>

<p>when I run git fsck --full, I get a serie of </p>

<pre><code>error: refs/remotes/repo0/master does not point to a valid object!
error: refs/remotes/repo1/new-version does not point to a valid object!
...
</code></pre>

<p>then a serie of</p>

<pre><code>broken link from    tree d935b909f76ea92728d71038d0a67384353e65e1
              to    blob 05b97658ebd47fee25b76d80ac76cbd07d77961d
...
</code></pre>

<p>and then some missing blobs...</p>

<h3>Edit 2 :</h3>

<p>I ran git log --raw --all --full-history -- subdir/my-file, and I get </p>

<pre><code>error: refs/remotes/repo0/master does not point to a valid object!
error: refs/remotes/repo1/new-version does not point to a valid object!
...
error: Could not read 9096eb9d9dcbdf15a04e0a7c78a3744936f82ac7
fatal: cannot simplify commit 8dfd8e3d5b698dc979300d93d8e89a757abf6ec6 (because of 9096eb9d9dcbdf15a04e0a7c78a3744936f82ac7)
</code></pre>

<h3>Edit 3 :</h3>

<p>I ran <code>git fsck --full</code>, the I get numerous lines as so </p>

<pre><code>error: packfile .git/objects/pack/pack-fbfd8042e1e96bf5ffff88f9b5a230b8f5e4d4c4.pack does not match index
fatal: packfile .git/objects/pack/pack-fbfd8042e1e96bf5ffff88f9b5a230b8f5e4d4c4.pack cannot be accessed
...
</code></pre>

<p>when running <code>git checkout</code> to another branch I got numerous messages as so : </p>

<pre><code>error: packfile .git/objects/pack/pack-3e7a0c040a5e3d1c21b91256d583424d82a59706.pack does not match index
warning: packfile .git/objects/pack/pack-3e7a0c040a5e3d1c21b91256d583424d82a59706.pack cannot be accessed
....
fatal: unable to read tree 2ad71d368b65eff0b6fec1ef72c6fdde6e80edad
</code></pre>

<h3>Edit 4 :</h3>

<p>following the suggested answer, I unpacked the files and when I checked out, I got 
some lines as so : </p>

<pre><code>error: packfile .git/objects/pack/pack-fbfd8042e1e96bf5ffff88f9b5a230b8f5e4d4c4.pack does not match index
warning: packfile .git/objects/pack/pack-fbfd8042e1e96bf5ffff88f9b5a230b8f5e4d4c4.pack cannot be accesse....
</code></pre>

<p>and then a serie of lines beginning with</p>

<pre><code> error: Your local changes to the following files would be overwritten by checkout:
.idea_local_work/.name
.idea_local_work/libraries/sass_stdlib.xml
.idea_local_work/scopes/scope_settings.xml
... and then aborting
</code></pre>
","10","1275959","0","0"
"15031646","668650","2013-02-22 19:18:45","3","128","<git><directory><branch><git-checkout>","Does the folder I am in have any significance in git?","<p>I am git newbie. Learning while doing things.
I have <a href=""https://stackoverflow.com/questions/15030975/git-separate-folder-for-each-branch-setting-it-up"" title=""Separate folders for branches"">this</a> setup. Now lets say I am on <code>branch1</code> folder (git bash), like <code>c:\branch1\</code> and do a <code>checkout master</code>. It switches to <code>master</code> branch, but does not change the folder. So the folder I am in is not the <code>master's</code> folder, which is lets say <code>c:\master\</code>. Its <code>branch1</code>s folder. </p>

<p>Do I need to switch to <code>master's</code> folder to do any work on <code>master</code> branch files? Or just checkout is enough.</p>

<p>May be its a dumb question. :-) But I am trying to understand this. So want to get it clear.</p>
","1","668650","",""
"15120526","2065529","2013-02-27 19:21:16","6","1587","<github><git-commit><git-checkout>","git checkout commit and delete newer commits","<p>I have made bad commits in the github and i want to do the following things:<br/></p>

<ol>
<li>checkout to an old commit from a different branch than master</li>
<li>make this commit my last commit(delete those after this)</li>
<li>make this branch as master branch and delete all the others branches</li>
<li>merge master branch to a new one</li>
</ol>

<p>Is it possible to do this?  </p>
","1","2065529","0","0"
"68600473","5649739","2021-07-31 08:31:59","1","527","<git><azure-devops><azure-pipelines><git-checkout><azure-pipelines-tasks>","Azure Pipelines Error: pathspec 'refs/remotes/origin/master' did not match any file(s) known to git","<p>I am trying to checkout code from AWS Codecommit in an Azure Pipeline job. However, the dynamic build agent is complaining that it cannot find master branch.</p>
<p>I am restricted to only classic editor as AWS Codecommit falls under generic git repository. I couldn't tinker the git checkout stage where I can fetch the entire list of branches in remote.</p>
<pre><code>From https://git-codecommit.ap-south-1.amazonaws.com/v1/repos/inxxxxxx
 * [new branch]      master       -&gt; origin/master
##[debug]STDOUT/STDERR stream read finished.
##[debug]STDOUT/STDERR stream read finished.
##[debug]Exited process 4361 with exit code 0
##[debug]Finished process 4361 with exit code 0, and elapsed time 00:00:05.5947164.
##[debug]Processed: ##vso[telemetry.publish area=AzurePipelinesAgent;feature=GitFetch]{&quot;ElapsedTimeMilliseconds&quot;:&quot;5597&quot;,&quot;RefSpec&quot;:&quot;&quot;,&quot;RemoteName&quot;:&quot;origin&quot;,&quot;FetchDepth&quot;:&quot;0&quot;,&quot;ExitCode&quot;:&quot;0&quot;,&quot;Options&quot;:&quot;--force --tags --prune --progress --no-recurse-submodules origin &quot;}
##[debug]Processed: ##vso[task.setprogress value=80]Starting checkout...
##[debug]refFetchedByCommit : 
##[debug]Checkout refs/remotes/origin/master.
git checkout --progress --force refs/remotes/origin/master
##[debug]Starting process:
##[debug]  File name: '/usr/bin/git'
##[debug]  Arguments: 'checkout --progress --force refs/remotes/origin/master'
##[debug]  Working directory: '/home/vsts/work/1/s'
##[debug]  Require exit code zero: 'False'
##[debug]  Encoding web name:  ; code page: ''
##[debug]  Force kill process on cancellation: 'False'
##[debug]  Redirected STDIN: 'False'
##[debug]  Persist current code page: 'False'
##[debug]  Keep redirected STDIN open: 'False'
##[debug]  High priority process: 'False'
##[debug]Updated oom_score_adj to 500 for PID: 4381.
##[debug]Process started with process id 4381, waiting for process exit.
error: pathspec 'refs/remotes/origin/master' did not match any file(s) known to git
##[debug]STDOUT/STDERR stream read finished.
##[debug]STDOUT/STDERR stream read finished.
##[debug]Exited process 4381 with exit code 1
##[debug]Finished process 4381 with exit code 1, and elapsed time 00:00:00.0069196.
##[error]Git checkout failed with exit code: 1
##[debug]Processed: ##vso[task.logissue type=error;]Git checkout failed with exit code: 1
##[debug]Processed: ##vso[task.complete result=Failed;]
##[debug]   at Agent.Plugins.Repository.GitSourceProvider.GetSourceAsync(AgentTaskPluginExecutionContext executionContext, RepositoryResource repository, CancellationToken cancellationToken)
   at Agent.Plugins.Repository.CheckoutTask.RunAsync(AgentTaskPluginExecutionContext executionContext, CancellationToken token)
</code></pre>
<p><a href=""https://i.stack.imgur.com/LxWrR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LxWrR.png"" alt=""enter image description here"" /></a></p>
<p>How to resolve this checkout error in Azure Pipeline? How to fetch all the branches including the master branch?</p>
","4","5649739","",""
"15160978","216021","2013-03-01 15:16:31","85","34387","<git><wildcard><git-checkout>","Is there a way to use wildcards with git checkout?","<p>What I would like to do is to checkout a single file or a set of files with a common name part like this</p>

<p><code>git checkout myBranch */myFile.md</code> and</p>

<p><code>git checkout myBranch -- */*Test*</code> (not sure about the '--' part)</p>

<p>instead of  </p>

<p><code>git checkout myBranch src/main/java/a/deep/package/structure/myFile.md</code> and</p>

<p><code>git checkout myBranch src/test/java/a/deep/package/structure/TestOne.java</code><br> 
<code>git checkout myBranch src/test/java/a/deep/package/structure/TestTwo.java</code><br> 
<code>git checkout myBranch src/test/java/a/deep/package/structure/resources/TestData.sql</code><br> </p>

<p>I know there is some limited wildcard functionality for some git command like <code>diff</code> and <code>add</code> but have found nothing for <code>checkout</code>. Is there a way?</p>

<p>EDIT: I am using git 1.7.9.5 on Linux. A working combination of git and shell commmands would be acceptable as well.</p>
","1","216021","0","0"
"15234357","2133170","2013-03-05 21:21:49","7","1709","<git-checkout>","What controls git checkout feedback?","<p>Sometimes a <code>git checkout</code> command gives progress feedback:</p>

<pre><code>$ git checkout develop
Checking out files: 100% (10779/10779), done.
Switched to branch 'develop'
</code></pre>

<p>Sometimes it doesn't, (very next command line, same repo context):</p>

<pre><code>$ git checkout master
Switched to branch 'master'
</code></pre>

<p>It's not because the branches are equal, because switching back on the very next command shows this feedback:</p>

<pre><code>$ git checkout develop
Checking out files: 47% (5067/10779), done.
Switched to branch 'develop'
</code></pre>

<p>This happens for small repos also. I have a repo with just 13 files in it and when I add a file in a branch and use checkout to switch back and forth, I get no feedback either way. Is it some kind of ""this is taking a long time, start showing feedback"" timer?</p>

<p>I searched (Google, Stackoverflow) but didn't find anything specific. I did find some patch documentation that shows the addition of a --verbose flag to checkout that forces feedback to always happen, but I couldn't find an explanation for why feedback only happens sometimes without that patch. The same notes pointed out that feedback only happens if isatty() returns true, but that's not relevant here, since all of the commands above were typed into the same bash window, which presumably isatty.</p>

<p>I'm using git <code>version 1.8.1.msysgit.1</code> (downloaded from git-scm.com as 1.8.1.3), which does not have the --verbose patch as far as I can tell.</p>
","1","2133170","0","0"
"15296473","295530","2013-03-08 14:38:08","130","115078","<git><git-checkout>","What do git checkouts really mean?","<p>What are <code>checkout</code>s in git? </p>

<p>I know once you do <code>checkout</code> to a particular branch, the <code>HEAD</code> points to that branch. But what does it really mean? Does it mean I can then work on that branch? If yes, then, without checking out a branch, I am not able to work on it?</p>

<p>Also, what does <code>remote checkout</code> mean? How is it useful?</p>
","2","295530","0","0"
"33443815","5405069","2015-10-30 19:47:01","1","179","<git><deployment><push><hook><git-checkout>","Checkout subdirectory of git repository","<p>I have set up push-to-deploy for git repo using post-receive hook and now I need somehow make it to checkout only content of a particular directory of repository, like below:</p>

<pre><code>repo.git/dir1/dir11 -&gt; /var/www/html/site1
repo.git/dir2       -&gt; /var/www/html/site2
</code></pre>

<p>I want to have only contents of directory checked out, not full structure, so at the end I would have the following:</p>

<pre><code>/var/www/html/site1/""whatever is in dir1/dir11/ directory"".
</code></pre>

<p>Thanks.</p>
","0","5405069","0","0"
"33476478","3151258","2015-11-02 11:24:06","1","1030","<git><git-checkout>","Move forward in git","<p>Imagine I have this history 7-6-5-4-3-2-1-(first-commit)
Now I do the following command to go the commit 3 :</p>

<pre><code>git checkout HEAD~3 
</code></pre>

<p>What I should to go the commit 4? I tried <code>git checkout HEAD~-1</code> but it's not the right syntax. We assume that there's no other branch.</p>
","2","3151258","",""
"17989165","872058","2013-08-01 08:44:37","109","255071","<git><git-checkout>","git checkout master error: the following untracked working tree files would be overwritten by checkout","<p>I have a git repository. It has A B C D E ... commits. Now I want to checkout D as a new branch named Dbranch. So I excute:<code>git checkout D -b Dbranch</code>. And now I want to delete this branch. Firstly I need to switch to master branch , and then use <code>git branch -d Dbranch</code> to delete it. But when I excute <code>git checkout master</code>, it gives me the error. </p>

<pre><code>error: The following untracked working tree files would be overwritten by checkout:
    source/a/foo.c
        ...... (too many lines)
Please move or remove them before you can switch branches.
Aborting
</code></pre>

<p>How to delete the Dbranch?</p>
","1","872058","0","0"
"50854195","9219409","2018-06-14 09:33:03","1","422","<git><git-checkout><git-reset>","Git status shows changes after git reset -- hard, 2nd checkout -- removes change","<p>For roughly one month now, I have a strange problem with git.</p>

<p>I work with Intellij in a large project with lots of commits, we use gerrit for code reviews and coordination.</p>

<p>Often I have to reset local changes or use intellij to rebase my changes.</p>

<ul>
<li><p>For a while now rebases fail because git can't properly reset files</p></li>
<li><p>The content of a file is properly reset but some flags or metadata are still changed.</p></li>
<li><p>Git Diff does not list any changes</p></li>
<li><p>Only after a second ""checkout -- file"" (intellij: revert changes), files are listed as 'unchanged'.</p></li>
</ul>

<p>I have attached a minimal example which shows that behavior:</p>

<pre><code>user@Windows10 MINGW64 /d
$ mkdir gittest

user@Windows10 MINGW64 /d
$ cd gittest/

user@Windows10 MINGW64 /d/gittest
$ git init
Initialized empty Git repository in D:/gittest/.git/

user@Windows10 MINGW64 /d/gittest (master)
$ echo test &gt;&gt; pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git add .

user@Windows10 MINGW64 /d/gittest (master)
$ git commit
[master (root-commit) e498342] testcommit
 1 file changed, 1 insertion(+)
 create mode 100644 pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git status
On branch master
nothing to commit, working tree clean

user@Windows10 MINGW64 /d/gittest (master)
$ echo test &gt;&gt; pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git status
On branch master
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   pom.xml

no changes added to commit (use ""git add"" and/or ""git commit -a"")

user@Windows10 MINGW64 /d/gittest (master)
$ git checkout -- pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git status
On branch master
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   pom.xml

no changes added to commit (use ""git add"" and/or ""git commit -a"")

user@Windows10 MINGW64 /d/gittest (master)
$ git diff

user@Windows10 MINGW64 /d/gittest (master)
$ git checkout -- pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git status
On branch master
nothing to commit, working tree clean
</code></pre>

<p>Same behavior with git reset --hard, only a consecutive git checkout -- file removes all changes.</p>

<p>Environment: Windows 10, Eset Antivirus, git version 2.16.0.windows.2, same behavior on SSD and HDD</p>
","6","9219409","",""
"69202915","15150677","2021-09-16 05:45:27","-1","1536","<git><github><git-bash><git-commit><git-checkout>","Unable to do ""git checkout main""","<p>Whenever I am trying to run:</p>
<pre><code>git checkout main
</code></pre>
<p>I am getting an error:</p>
<pre><code>error: The following untracked working tree files would be overwritten by checkout:
    README.md
Please move or remove them before you switch branches.
Aborting
</code></pre>
<p>I have tried doing the following steps:</p>
<ol>
<li>
<pre><code> git rm --cached README.md
 git checkout main 
</code></pre>
<p>Didn't work.</p>
</li>
<li>
<pre><code> git add -all
 git commit -m &quot;initial commit&quot;
 git checkout main 
</code></pre>
<p>Still the same output.</p>
</li>
</ol>
","1","15150677","0","0"
"50860788","9876908","2018-06-14 15:13:55","0","39","<git><git-checkout>","How to git checkout a version of code from before my clone?","<p>How can I checkout a version of code from before I cloned it? Usually I would do <code>git reflog</code> to get the version number and then do a <code>git checkout 'version number'</code>, but if I've cloned after the commit was made that I want, it doesn't show up as an option in <code>git reflog</code>. Is there still a way to go back to this commit?</p>
","0","9876908","",""
"34541114","4799532","2015-12-31 04:41:51","0","1635","<git><undo><git-checkout>","Undoing a git checkout -- <file>","<p>I didn't realize that I had uncommitted changes and I ran <code>git checkout -- 'file'</code>, is there a way to undo this?</p>
","1","4799532","",""
"51499312","639956","2018-07-24 13:01:39","1","330","<git-checkout><git-mv>","Git checkout fails on untracked working tree files after git mv","<p>I have a problem with my local branches. When I am trying to do <code>git checkout &lt;branch&gt;</code> I get this error message:</p>

<pre><code>error: The following untracked working tree files would be overwritten by checkout:
... (list of files)
Please move or remove them before you switch branches.
Aborting
</code></pre>

<p>I think that the reason is a fact, that in current branch I've renamed/moved some files with <code>git mv</code>.
All the files listed in this error message are listed with old path (i.e. path before moving / renaming action). Is there any way to work around this problem? I'd like to move to my master branch now, and merge it with current branch, so after that there should be no problem, yet for now, I don't know how to successfully switch branches (and then do a merge, if there might again be some problems).</p>

<hr>

<p>Edit:
I was able to checkout using -f option, but the problem remains, because now I can't do merge, for the same reasons (actually, now the paths are the opposite, i.e. now error message contains new paths, that were used in database branch) and I don't know an option to force git to do this merging.</p>

<p>I am not sure, but probably the same solution would work for both checkout and merge problem.</p>

<hr>

<p>Following @LutzBüch comment, I am trying to show exactly what happened in this repo.
I have branches <strong>master</strong> and <strong>database</strong>. The database branch worked only on a parts strictly related to database only. This part of code remained in a directory named let's say <code>db</code>. At some point, I had to change this dir name to <code>DB</code>, so I did some <code>git mv</code>'s. Let's follow it from last merge, when everything still worked.</p>

<pre><code>git checkout master
git merge database
git checkout database
git commit

{now the renaming happens}
git mv db/. tmp/.
git mv tmp/. DB/.
git commit {no other changes were made}
{added some renaming related changes, i.e. changed paths in 2 files}
git commit --amend

{now it's becoming the standard}
git commit {multiple times}
git checkout master {fails}
</code></pre>

<p>Last command failed with error message mentioned earlier. All files on the list had paths with the old dirname, i.e. <code>db</code>. After using <code>git checkout -f master</code>, when I tried to do merge I received paths with <code>DB</code> as the dirname.</p>
","2","639956","",""
"51537621","8058159","2018-07-26 11:21:45","0","376","<git><git-checkout>","git checkout file is outdated","<p>i was trying to checkout a single file from upstream but i only get a very old version of this file. it works on a clean fork so i guess its a git problem</p>

<p>after a git pull --all
i used this command : <code>git checkout upstream/develop -- system/bootstrap.php</code></p>

<p>the thing is we changed a couple of essential files/classes for special requirements, but as the upstream met some of these requirements - i like to switch to their implementation and stick as near as possible to the upstream source.</p>

<p>feels free to ask for more informations/details
( Software: Sourcetree 2.6.10.0, Git 2.17.1 )</p>
","3","8058159","",""
"51678048","1223975","2018-08-03 18:13:45","0","1803","<git><git-checkout>","git checkout command does not work as expected","<p>I have this:</p>

<pre><code>git branch # I am on a feature branch ""X""  
git fetch origin dev;
git checkout -b ""${new_branch}"" ""origin/dev""
</code></pre>

<p>the problem is that the last command checks out a new branch with X as the base, instead of ""origin/dev"" as the base. Why would it do that? I was under the impression that <code>git checkout -b foo bar</code> would checkout a new branch called foo using bar as the ""base"" (please correct my terminology). Why wouldn't that work?</p>

<p>I am on git version: 2.17.1</p>

<p>perhaps I should use this instead:</p>

<pre><code>git checkout -b ""${new_branch}"" --track origin/dev
</code></pre>

<p>?</p>

<p><strong>update</strong>: what is likely happening is that origin/dev is getting updated with changes from the local feature branches. so the first command I am using does use origin/dev as the base, it's only that origin/dev is seeing updates from the feature branches because tracking was set up...</p>
","1","1223975","",""
"51690849","1223975","2018-08-05 01:56:55","4","1016","<git><git-checkout><git-status>","git status without checking out a branch","<p>Say I have:</p>

<pre><code>git fetch origin
git status ""remotes/origin/master""
</code></pre>

<p>I am not sure if I can check the status of a branch that I haven't checked out, so let's say I checkout a branch like so:</p>

<pre><code>git branch foo ""remotes/origin/master""
git checkout foo
git status
</code></pre>

<p>my question is 2-fold:</p>

<ol>
<li>Can I get the git status of a branch without checking it out?</li>
<li>Would the git status of foo ever be ""unclean""? I would assume the git status of foo would always be ""clean"" and ""up-to-date with the remote"".</li>
</ol>
","3","1223975","0","0"
"51717734","4843013","2018-08-07 01:50:44","9","9359","<git><git-checkout><git-stash><git-reset>","Can't discard changes in git","<p>A week or two ago I took some files that I had been archiving with a simple <code>find |sed|tar|xz|gpg</code> bash script, unpacked them all, and put their contents in a git repo, commited, put the next archives content in the repo, committed (rinse and repeat) in order to have a nicer system.</p>
<p>All files were edited with on one of my two computers, both using Arch Linux, in either TeXstudio or Vim.</p>
<p>I tried to checkout an old version, but its flipping out---it won't let me due to changed that are outstanding. I tried everything I knew how, and then went on Google to find out things I didn't know.</p>
<p>There are a number of other questions on this subject. Unfortunately their answers have not helped me. For sake of completion I'll list the questions.</p>
<blockquote>
<p>$ git status<br />
On branch master<br />
Changes not staged for commit:<br />
(use &quot;git add ...&quot; to update what will be committed)<br />
(use &quot;git checkout -- ...&quot; to discard changes in working directory)</p>
<p>modified:   Arcs/arc1.tex<br />
modified:   Arcs/arc2.tex<br />
modified:   Arcs/frontmatter.tex</p>
<p>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</p>
</blockquote>
<p>Also, so people don't need to look, below, I already did the obvious ones.</p>
<pre><code>git reset --hard
git -a commit
git stash
git pull
</code></pre>
<p>as well as remove everything from the index and add it back.</p>
<h1><a href=""https://stackoverflow.com/questions/26879788/cant-discard-file-changes-in-git"">Cant discard file changes in GIT</a></h1>
<p>I'm not on Windows. Also, this should have anything to do with line endings since I'm the only user. There is no reason for there to be weird line endings.</p>
<h1><a href=""https://stackoverflow.com/questions/18536863/git-refuses-to-reset-discard-files/18875915"">Git refuses to reset/discard files</a></h1>
<pre><code>git reset --hard HEAD (among other possibilities)
</code></pre>
<hr />
<pre><code>git stash
git stash drop
</code></pre>
<hr />
<pre><code>git config core.autocrlf input
git rm --cached -r .
git reset --hard
git add .
git commit -m &quot;Normalize line endings&quot;
</code></pre>
<p>Not only did this not work but it increased the number of files that are misbehaving and also wrote 700+ lines to a file for. . .reasons. It wasn't even the file that was misbehaving.</p>
<h1><a href=""https://stackoverflow.com/questions/1575682/cant-seem-to-discard-changes-in-git"">Can&#39;t seem to discard changes in Git</a></h1>
<p>More end line stuff.</p>
<h1><a href=""https://stackoverflow.com/questions/52704/how-do-i-discard-unstaged-changes-in-git"">How do I discard unstaged changes in Git?</a></h1>
<pre><code>git clean -df
git checkout -- .
git checkout -- ./.

git checkout-index -a -f

git checkout --force master
</code></pre>
<h1>Things I didn't see, but tried anyway</h1>
<p>I tried commiting the changing <code>git commit -am &quot;WORK DAMN YOU!&quot;</code> then <code>git revert --hard HEAD^</code></p>
<p>I also tried pulling from my private remote, but was just told that the local repo was already up to date.</p>
<p>This is extremely frustrating.</p>
","12","4843013","0","0"
"51726725","4241431","2018-08-07 12:22:57","2","303","<git><git-submodules><git-checkout>","git checkout version including submodules","<p>How can I checkout a git repo including its submodules?</p>

<p>e.g. I have a repo A, with a submodule B, the commit history is as follows:</p>

<ul>
<li>f7fe0a4 A, bcbaec2 B (latest)</li>
<li>206c8dd A, bcbaec2 B</li>
<li>0fd667c A, bcbaec2 B </li>
<li>0ec21a1 A, e79fea0 B (older version)</li>
</ul>

<p>I want to temporarily go back to an older version of A, so I stashed local changes in A and B, then <code>git checkout 0ec21a1</code></p>

<p>But Im still on the latest version of the submodule. I expected the submodule to updated according to the parent version. My understanding from this question, <a href=""https://stackoverflow.com/questions/1777854/git-submodules-specify-a-branch-tag"">submodule tag</a> is that git does not manage submodules when you checkout the parent, is this correct?</p>

<p>My real commit history is more complicated and there are several submodules. Is there a way to determine what version of submodule B was used in commit xxx of A? I can get approximate versions by comparing the git logs but it's rather painful...</p>
","2","4241431","",""
"51734782","772309","2018-08-07 20:19:24","0","89","<git><git-checkout><git-subtree>","Remote git branch checkout from within a git subtree","<p>We've been using Heroku's review apps to help us better QA our Github issues but recently we switched from one app to two (1 backend, 1 frontend). Often times an issue in one repo will have two PRs (one from each repo) and both will be needed to test the issue.</p>

<p>This has caused me to rethink how we get a single ""review app"" to work with two separate repos and still have a review app that is unique for each individual Github issue we have.</p>

<p>My current plan is to use <a href=""https://docs.gitlab.com/ee/ci/review_apps/"" rel=""nofollow noreferrer"">Gitlab's review apps feature</a>. I'll leave out some of the details for brevity but the problem I'm struggling with right now is how do have one repo that contains two children sub-repos? </p>

<p>I've looked into <code>git subtree</code> but I'm struggling with pulling in the remote branches and running <code>git checkout</code> on the remote branches I need. When I run checkout from within a subtree it replaces all the contents of the folder.</p>

<pre><code>+-- parent-repo &lt;git checkout 14-parent-branch&gt;
|   +-- child-repo-frontend &lt;git checkout 142-frontend-branch&gt;
|   +-- child-repo-backend &lt;git checkout 22-backend-branch&gt;
</code></pre>

<p>^^^ This is ideally what I want. The frontend subtree is checking out a remote branch from the remote frontend repo, same for the backend, and the parent-repo is in its own branch to save that state essentially.</p>

<p>I realize this might be a little long and tough to describe, please let me know if I can better clarify anything.</p>
","0","772309","",""
"51749222","6511217","2018-08-08 14:28:55","4","1569","<git><git-checkout>","Git fetch does not resolve pathspec error on git checkout -- *","<p>In previous projects, I often run <code>git checkout -- *</code> to discard all changes in my working directory. </p>

<ol>
<li><p>In my current project, I get the following:</p>

<pre><code>$ git checkout -- *
error: pathspec 'node_modules' did not match any file(s) known to git.
</code></pre></li>
<li><p>I then do a <code>git status</code>:</p>

<pre><code>$ git status
On branch &lt;feature_branch&gt;
Your branch is ahead of 'origin/&lt;feature_branch&gt;' by 2 commits.
  (use ""git push"" to publish your local commits)

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   &lt;relative_file_path_in_current_app_dir&gt;

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre></li>
<li><p>I read another StackOverflow <a href=""https://stackoverflow.com/questions/5989592/git-cannot-checkout-branch-error-pathspec-did-not-match-any-files-kn/7334027"">post</a> that said <code>git fetch</code> can resolve this pathspec error. I tried that and it puled a new feature branch from remote:</p>

<pre><code>$ git fetch
remote: Counting objects: 67, done.
remote: Compressing objects: 100% (67/67), done.
remote: Total 67 (delta 55), reused 0 (delta 0)
Unpacking objects: 100% (67/67), done.
From https://bitbucket.org/&lt;repo_name&gt;
   b42b31e05..e7f3858ad  &lt;unrelated_bug_branch&gt;       -&gt; origin/&lt;unrelated_bug_branch&gt;
   36b2cd4e9..ac87583fd  develop                      -&gt; origin/develop
   61945b8ef..22a63fd7e  &lt;unrelated_feature_1_branch&gt; -&gt; origin/&lt;unrelated_feature_branch&gt;
   322a39980..1f8752f2c  &lt;unrelated_feature_2_branch&gt; -&gt; origin/&lt;unrelated_feature_2_branch&gt;
 * [new branch]          &lt;unrelated_feature_3_branch&gt; -&gt; origin/&lt;unrelated_feature_3_branch&gt;
   5fe02b8b3..a27140571  &lt;unrelated_feature_4_branch&gt; -&gt; origin/&lt;unrelated_feature_4_branch&gt;
</code></pre></li>
<li><p>I do another <code>git status</code> and it's the same as #2 above.</p></li>
<li><p>I can target the specific file and that will work:</p>

<pre><code>$ git checkout -- &lt;relative_file_path_in_current_app_dir&gt;
</code></pre></li>
<li><p><code>git status</code> now shows I have a clean working tree. </p></li>
</ol>

<p>What exactly is the root cause of my pathspec error and how can I resolve it? I can checkout specific files in the meantime, but I'm just curious about this error.</p>
","2","6511217","0","0"
"53460724","8082353","2018-11-24 17:33:33","-2","545","<git><git-checkout>","Return uncommitted changes after ""git checkout""","<p>I had some changes on master and then I created a branch where I added all my changes. Then, I went back to master to remove the changes that I did. I entered <code>git checkout .</code> which unstaged all of my changes on master and the branch.</p>

<p>Any ideas?</p>
","4","8082353","",""
"38377808","4923852","2016-07-14 15:06:20","2","832","<git><github><git-checkout>","Recover files after git checkout -f","<p>Was doing smth on master branch
then done <code>git add .</code>
then accidentaly <code>git checkout -f</code></p>

<p>now files are lost
how to recover?</p>
","1","4923852","0","0"
"38408778","618099","2016-07-16 07:13:16","1","85","<git><macos><merge><bower><git-checkout>","Mac problems when doing git merge master with branch that has bower","<p>Quite new to git and mac.</p>

<p>But I'm using the <code>Git Plus</code> in Atom to handle all my version control via git. But I'm having a lot problems if I add components/libs via bower to my ionic project.</p>

<p>Working on branch <code>quick_fix</code> and adding a <code>angular-cookies</code> (ionic stores it in a folder called <code>lib</code>). Update the code and do some commits.</p>

<p>Had some problems doing it in Atom after using <code>bower</code>, so try the terminal. So I do the following in the Terminal:</p>

<pre><code>git checkout master

warning: unable to unlink www/lib/angular-cookies/.bower.json: Permission denied
warning: unable to unlink www/lib/angular-cookies/LICENSE.md: Permission denied
warning: unable to unlink www/lib/angular-cookies/README.md: Permission denied
warning: unable to unlink www/lib/angular-cookies/angular-cookies.js: Permission denied
warning: unable to unlink www/lib/angular-cookies/angular-cookies.min.js: Permission denied
warning: unable to unlink www/lib/angular-cookies/angular-cookies.min.js.map: Permission denied
warning: unable to unlink www/lib/angular-cookies/bower.json: Permission denied
warning: unable to unlink www/lib/angular-cookies/index.js: Permission denied
warning: unable to unlink www/lib/angular-cookies/package.json: Permission denied
</code></pre>

<p>So these files are now still in the folder... even though that I'm back to the master code that doesn't have the hot fixes...</p>

<pre><code>git status

On branch master
Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    www/lib/angular-cookies/
</code></pre>

<p>If I try to do a merge I get the following</p>

<pre><code>sudo git merge quick_fix

Updating 034f577..8b74fa5
error: The following untracked working tree files would be overwritten by merge:
    www/lib/angular-cookies/.bower.json
    www/lib/angular-cookies/LICENSE.md
    www/lib/angular-cookies/README.md
    www/lib/angular-cookies/angular-cookies.js
    www/lib/angular-cookies/angular-cookies.min.js
    www/lib/angular-cookies/angular-cookies.min.js.map
    www/lib/angular-cookies/bower.json
    www/lib/angular-cookies/index.js
    www/lib/angular-cookies/package.json
Please move or remove them before you can merge.
Aborting
</code></pre>

<p>How do I do a merge?</p>

<p>I think that the problem has to do with doing a checkout to master without doing <code>sudo</code>. So I'm not giving it permission to delete the folders.. Is there any way I can give permanent sudo permissions to delete files in this working directory - so the Atom editor can do a checkout to master without keeping the added component..</p>

<p>Problem is that I can't checkout <code>quick_fix</code> because it gives me the same error and aborts.</p>
","9","618099","0","0"
"71379984","10737778","2022-03-07 10:55:53","1","479","<git><git-checkout><git-clean>","Any way to avoid git checkout -f ""warning directory is not empty""?","<p>I have a git repository that contains multiple branch that diverged a lot. When I say diverged it means that each branch can contain new folder or submodule and a lot of diffs between files.</p>
<p>When you checkout a branch that doesn't have the same submodule you initiated with git submodule update --init in your current branch you can fall into this kind of issue:</p>
<pre><code> error: The following untracked working tree files would be overwritten by checkout
     path_to_submodule/my_file.txt
     path_to_submodule/second_file.txt
     ...
</code></pre>
<p>To overcome this issue I'm using:</p>
<pre><code>git checkout -f my_branch
</code></pre>
<p>This way &quot;git proceed even if the index or the working tree differs from HEAD, and even if there are untracked files in the way&quot; (from the doc)</p>
<p>But when I do this I have a lot of warning saying that git cannot remove not empty directory..</p>
<pre><code>warning: cannot remove my_directory. Directory not empty
</code></pre>
<p>As it's a warning we can ignore it but then when you do a git status you have all those directories that are untracked. So to clean them I use:</p>
<pre><code>git clean -xdff
</code></pre>
<p>My goal is to have a clean environment switching between two branches. That is why I'm using git clean. I know all the consequences using this command.</p>
<p>When you have a lot of submodules the logs can be quite messy with all those warnings when you force switch a branch. So I was wondering if there is a better way of doing that ? I have not seen any options in git checkout to automatically remove the untracked files/submodules when --force is used.</p>
","0","10737778","0","0"
"53888777","9275622","2018-12-21 17:33:44","0","3480","<git><ssh><putty><git-checkout>","git checkout <branchname> not working for specific branch","<p>I have created a repository in bitbucket for educational purposes. I have master and 2 branches.</p>

<p>I have  my droplet on digitalocean, where I entered <code>git clone</code> into Putty.</p>

<p><code>git checkout &lt;branchname&gt;</code> works only for one of the branches, and doesn't work for the other. (strange, right?)</p>

<p>if I enter the <code>git checkout hashtag</code> of that branch, it works though.</p>

<p>I don't get any error or any message, it just says .. <em>switched to branch</em> .. but the result is an early version of master.</p>
","1","9275622","0","0"
"53984808","9219650","2018-12-31 07:34:02","0","48","<git><git-checkout>","What are the git commands that can help me in this situation?","<p>I am new to git. I face this problem of having to add new features to my application on github and the dilemma of when to push and how to retrieve the entire version of code as I needed. </p>

<p>I have the habit of just cloning my repository, v0 and editing it locally on my computer, call this directory_v1. Then I would edit directory_v1 , and there might be a time my changes don’t seem to be working and I would want to revert back to v0(like re-clone again and start from scratch), and I don’t think it would be wise to push the failed plan into origin as that would prevent me from getting v0 back.</p>

<p>While I might revert back to v0 at some point, I still want to track my progress on directory_v1, like commit my changes. If I’m not wrong, commits are not “saved” if you don’t push, but the problem is if I pushed, I do not know how to retrieve the entire directory out of that commit timestamp and “clone” it locally to my computer.</p>

<p>I know of a command that might do something similar. <code>git checkout commit_id</code>, but from what I know from tutorials, I only see people taking out 1 file out of the entire branch, instead of the “clone whole version into directory” idea, and that requires me to know exactly what file I needed in my development process, and my previous commits were actually “pushed”. However, I’m not that professional at my current level, and would definitely prefer to work in a local directory where I could view in column view and work with the files neatly(since implementation usually requires many changes simultaneously). </p>

<p>Can anyone help me with this?</p>
","5","9219650","0","0"
"54068765","7504076","2019-01-07 05:01:40","0","69","<git><atlassian-sourcetree><git-checkout>","Excluding a Folder when submitting to git","<p>I need to make sure that a certain folder is excluded for all developers when submitting a code change. </p>

<p>.gitignore won't help as these are files that are already tracked in the repository. </p>

<p><a href=""https://stackoverflow.com/a/1753078/7504076"">Tried this</a> but .git/info/exclude also couldn't solve the issue.<br>
<a href=""https://stackoverflow.com/a/3320183/7504076"">Tried this</a> but <code>git update-index --assume-unchanged [&lt;file&gt; ...]</code> also failed.<br>
Then I came across <a href=""https://stackoverflow.com/a/13631525/7504076"">this</a> but alas even <code>--skip-worktree</code> failed. </p>

<p>In my build process certain files get added to a folder that is tracked in the repository. But I don't need to submit these files to the repo and also I can't remove these files from the repo as they break the build if done so.<br>
I run <code>git update-index --skip-worktree SDK/</code> before the build starts.<br>
I also get the ouput on the terminal as <code>Ignoring path SDK/</code><br>
But after I build and my build modifies some files over in the SDK Folder, around 200 odd files that I modified show up in git status. </p>

<p>Is there any way I can stop it from showing up in <code>git status</code>.<br>
The only workaround I've found so far is to use <code>git checkouot SDK/</code> after I build to remove these files from being shown in the changed files list.</p>
","3","7504076","",""
"54098538","6637004","2019-01-08 19:32:19","1","182","<git><github><git-checkout>","`git checkout [other-branch] path-to-file` does not overwrite file on current branch","<p>I am trying to checkout files from a different branch. </p>

<p>I'm using the command </p>

<p>git checkout other-branch path-to-file</p>

<p>for example: </p>

<pre><code>git checkout hiresnetworkbug Leaflet-Localized/SpeciesViewController.*
</code></pre>

<p>However this does nothing to the file on my current branch. I tried to force it with -f option but that didn't work. </p>
","5","6637004","",""
"54242473","3839175","2019-01-17 18:52:10","0","4730","<git><git-clone><git-checkout>","cloning git repository when folder and files already exist","<p>I was working on 2 computers, alternating which one I use, and every time moved the whole thing between them. Then I setup git on computer A and synced it with github repository. So far so good. </p>

<p>Now I want to clone this to computer B, but git clone doesn't work because the folder and files already exist. </p>

<p>So this is what I've done on computer B: </p>

<pre><code>git init
git remote add origin &lt;my-github-rep.git&gt;
git fetch
</code></pre>

<p>Now I need to bring the latest files from github here. </p>

<pre><code>git reset origin/master
</code></pre>

<p>I think this is what resets current HEAD to point to master branch on origin. </p>

<p>Okay, now here is the problem: </p>

<p>I would assume that at this point I need the following: </p>

<pre><code>git checkout -t origin/master
</code></pre>

<p>Because this would bring all the latest files from origin and would have the whole thing checked out on computer B. This is what I want, but it doesn't work. Here is the error msg: ""<strong>fatal: A branch named 'master' already exists.</strong>""</p>

<p>How do I overcome this and just bring the files? What have I done wrong. </p>

<p>(to clarify: I don't want just to delete the folder and the files and simply clone the repository because there are many more files in there which are not supposed to be on git, so it's hard to do pick and choose; at this point what I want is to overwrite all the relevant files in my local folders from the latest files in the remote repository - this way I'll have the latest code, and the files that are not tracked by git won't be affected)</p>
","4","3839175","0","0"
"54384035","151641","2019-01-27 00:20:30","8","1208","<git><git-submodules><git-checkout><git-lfs>","Git checkout branch and prune everything related to previous checkout (incl. git-lfs remains)","<p>I have a repo of a superproject with number of submodules.
lots of files of both are in Git LFS.</p>

<p>The repo comes with multiple long-lived release branches.</p>

<h2>Problem</h2>

<p>The complete clone transfers 20 GB of Git and Git LFS objects.</p>

<p>Checkout of master deflates the total repo to 40 GB in total,
that is the objects and the working tree files together.</p>

<p>Let's consider three separate clones as canonical way to create
three working copies, one per the long-lived branch:</p>

<pre><code>git clone --branch master      --recursive --jobs 8 https://repo repo_master
git clone --branch release/1.0 --recursive --jobs 8 https://repo repo_release1
git clone --branch release/2.0 --recursive --jobs 8 https://repo repo_release2
</code></pre>

<p>I'm trying to work out a network-optimised equivalent of the above:
- clone once with the default master checked out
- make multiple copies of the cloned repo
- checkout release branches</p>

<h2>Questions</h2>

<ol>
<li><p>How to checkout an existing branch fetched from remote,
delete the previous branch and clean up any remains?</p></li>
<li><p>How to clean up everything related to the previously checked out
master and its working tree, any cached previous LFS downloads etc.?</p></li>
</ol>

<p>But, to keep the history of origin/master.</p>

<h2>Solution Prototype</h2>

<p>Here is what I have come up with for the the network-optimised workflow:</p>

<pre><code>git clone --branch master --recursive --jobs 8 https://repo repo_master

cp -a repo_master repo_release1
cp -a repo_master repo_release2

cd repo_release1
git checkout -b release/1.0 --track origin/release/1.0

git pull
git submodule update --init --recursive --jobs 8

git branch -D master

git lfs prune
git submodule foreach --recursive git lfs prune

git lfs checkout
git submodule foreach --recursive git lfs checkout
</code></pre>

<h3>Questions to Prototype</h3>

<p>Does it look correct or any steps are missing/redundant?</p>

<p>Does it make sense to run any of these, at which point?</p>

<pre><code>git gc --aggressive --prune=now
git submodule foreach --recursive git gc --aggressive --prune=now
</code></pre>

<p>Please, assume, no new commits will happen locally between the
<code>git clone --branch master ...</code> and <code>cp -a repo_master ...</code>.</p>

<p>(<em>The problem was also posted to <a href=""https://public-inbox.org/git/CABUeae_tm__uvHH74UARG805uTa2Sf0v6wYk=pmKvxxH3kvQ8A@mail.gmail.com/"" rel=""noreferrer"">Git mailing list</a> and <a href=""https://github.com/git-lfs/git-lfs/issues/3499"" rel=""noreferrer"">Git LFS at GitHub</a></em>)</p>
","6","151641","0","0"
"73377740","788488","2022-08-16 17:08:14","1","31","<git><git-checkout><git-merge-conflict>","How can I have git-checkout merge local modifications only if there's no conflict?","<p>When I use <code>git checkout -m</code>, it merges local modifications, which makes life easier when a file has changed between two commits but in a completely separate place from where my local modifications are. However, this becomes a messy merge conflict that has to be resolved when there is indeed a conflict, and I can't simply go back to the previous branch. I also don't want to have to use <code>git stash push</code> and <code>git stash pop</code> all the time, as that is cumbersome. Any ideas what to do?</p>
","0","788488","0","0"
"73383378","3469465","2022-08-17 05:42:11","1","47","<git><git-checkout>","What is the best practice for splitting product versions of a project using git?","<p>I am working on a project with 2 repositories as Front-End Repository and Back-End Repository.</p>
<p>I also developed a Testing environment for my co-workers to test every feature / bug that i am publishing.</p>
<p>My current problem is that i need to build a different version from an older commits on both repositories. So what i thought of is to clone each project to a new folder, checkout to the specific commit, create a new branch from that commit, then build a new version from the new branch instead of 'master'.</p>
<p>Its important to say that i am just learning how to work well with git so i want to make sure i understand my different options for any issues.</p>
<p>Thanks in advance for your answers.</p>
<p>As <strong>@Casper Bang</strong> suggested, I am adding more info on my situation:</p>
<p>So as i mentioned, I am constantly developing a program which runs on a IIS server.</p>
<p>I am developing the software from my first day at work, without any supervisor that would argue the best practice for different cases.
As things ran quickly and the Time To Market demand were high, i developed with one branch and built every product in my own computer.
As the program went bigger, I created a Jenkins pipeline to make sure every version created was built through a certain flow.
Then I managed to work with feature branches, to make it a bit more backwards compatible -&gt; and each time i wanted to make a product I would merge every branch into master, for creating more organized versions.</p>
<p>So The current problem is actually that the features are not working perfectly as there are some rejects from my co-workers. However I
do need to create a new version during the next few days, based on the latest PRODUCTION version, with a tiny fix which will be a 'temporary version'. This way i could release the version soon enough, and split the new versions away while working on them to make them better. because the fix is about 2 lines of code, I can make sure that I will add them both to the Quick PRODUCTION version <strong>AND</strong> to the future versions manually.</p>
<p>I think it is also important to say that there 5 Different branches merged to master since the last production versions, and its all merged to the current master branch, in each repository.</p>
","0","3469465","0","0"
"56692739","11661209","2019-06-20 19:32:04","1","868","<git><git-checkout>","why on git checkout it automatically adds changed files in my new branch","<p>I have to checkout from one branch of the project to the other. When I do it, it adds all the added files in the changed branch also. I don't want to commit those files from this branch. What should I do and how should I avoid this thing in future</p>

<pre><code>A   ui/.gitignore
A   ui/README.md
A   ui/babel.config.js
A   ui/package-lock.json
A   ui/package.json
A   ui/public/favicon.ico
A   ui/public/index.html
A   ui/src/App.vue
A   ui/src/assets/logo.png
A   ui/src/components/HelloWorld.vue
A   ui/src/main.js
Already on 'added_more_notification_channels'
</code></pre>
","0","11661209","",""
"55515024","7290622","2019-04-04 11:36:14","1","212","<git><git-checkout>","If I run `git checkout -​- .` on branch. Is there any way I can get those files back?","<p>If I have a load of uncommitted file changes and for whatever reason run <code>git checkout --</code> on a file and then realise I need it back - is there any means of doing this?</p>

<p>Have tried <code>git checkout HEAD &lt;filename&gt;</code> but I imagine HEAD is not where those files exist anymore?</p>
","4","7290622","",""
"55622319","9609843","2019-04-10 22:47:46","1","1245","<git><git-branch><git-checkout>","git checkout -B without reset or alternatives?","<p>I want to use a command that will do:</p>

<ol>
<li>Create a new branch if it doesn't exist.</li>
<li>Checkout branch if it exists without any modification to it.</li>
</ol>

<p>Currently used <code>git checkout -B branchname</code> violates the second requirement because it resets the branch to <code>HEAD</code> of starting point if branch exists. Do you know any flags to <code>checkout</code> / workarounds / another commands that will satisfy both requirements?</p>
","3","9609843","",""
"55631116","1593077","2019-04-11 11:10:46","4","844","<git><git-submodules><git-checkout>","Can I make git automatically update submodules when checking out a branch?","<p>I'm working on a git repository with some submodules, which have different revisions on different branches. When I switch branches, I get a:</p>

<pre><code>M          path/to/subrepo
Switched to branch 'another-branch'
</code></pre>

<p>message. I then manually do:</p>

<pre><code>git submodule update --recursive
</code></pre>

<p>and that goes away.</p>

<p>I tried writing a git hook, in .git/hooks/post-checkout:</p>

<pre><code>#!/bin/bash

exec git submodules update --recursive
</code></pre>

<p>but this doesn't seem to do anything. I tried to add an exec echo hello from post-hook line - doesn't seem to work either.</p>

<p>My question: Can I configure git so that the branch checkout itself will also update the submodules, by default?</p>
","0","1593077","",""
"55791162","5316255","2019-04-22 08:05:42","1","10874","<git><git-rebase><git-push><git-checkout><git-detached-head>","After git reset --hard, why didn’t my topic branch change?","<p>I accidentally rebased my branch with the DEV branch and then pushed it to a remote repository. With the rebase, I selected the current changes and hence my local changes got overwritten.</p>

<p>I lost my earlier commit in the rebase but found it by running <code>git log</code>. Then I ran <code>git checkout commitId</code> and even <code>git reset --hard commitId</code>. However, in both cases my code base still shows the latest rebased code on my branch.</p>

<p>How do I restore my branch back to its previous state?</p>
","2","5316255","",""
"55806765","5655869","2019-04-23 08:03:37","1","313","<git><restore><git-checkout>","How to recover changes that discard by git checkout -f","<p>My changes were gon after I run command <code>git checkout -f</code></p>

<p>Is there a way to recover my changes?</p>

<p>I did not commit my changes and also it's unstaged.</p>
","2","5655869","",""
"72715741","3131685","2022-06-22 12:42:35","2","118","<git><delete-file><git-checkout><git-reset>","Accidently removed files from local folder after running ""git checkout origin/main""","<p>I am new to git.</p>
<p>I accidentally deleted all project files from my local machines after running <code>git checkout origin/main</code> command.</p>
<p>I have checked and could not find the files in the <strong>Recycle bin</strong> as well. How can I recover those lost files?</p>
<p>I was following a script that I have written when I was learning Git and this was the first time that I tried it on an actual project.  Following is the message I receive. Should I run <code>git switch</code>. If yes, how.</p>
<p><a href=""https://i.stack.imgur.com/T6l4N.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/T6l4N.png"" alt=""Message received after running the checkout command"" /></a></p>
<p>I do not want to do something stupid again and loose whatever I am left with. How can I recover those lost files?</p>
","5","3131685","0","0"
"55861572","8561798","2019-04-26 05:56:55","0","1850","<git><git-checkout><file-recovery>","Undo git checkout --","<p>I first checkout a branch from feature branch.</p>

<pre><code>git checkout -b MyBranch
</code></pre>

<p>Made some changes in that branch. Added all the files. Then I moved to feature branch. All my staged changes are present in feature branch. Then I did:</p>

<pre><code>git checkout -- &lt;Staged File&gt;
</code></pre>

<p>I then moved to my branch. I dont see my staged file in MyBranch.</p>

<p>Is there any way I could recover my staged file ?</p>
","4","8561798","",""
"72741219","16992583","2022-06-24 08:35:00","4","260","<git><git-checkout>","git checkout [commit-name] vs with a dot","<p>What is the difference between <code>git checkout [commit-name]</code> and <br> <code>git checkout [commit-name] .</code> ?</p>
<p>I saw that the first command changes to detached head state, where you can commit up from there and go on to create a new branch.</p>
<p>I am confused as to what the second command does. It stays on the master but reverts all the files back to the state at the specified commit. Why is it so? What can you do with this and in what situations is this used?</p>
","2","16992583","0","0"
"72807519","11809612","2022-06-29 20:32:13","2","46","<git><unix><git-branch><git-checkout>","How git checkout old_branch * within a subdirectory work?","<p>I am new to git and recently get confused about the code below. My question are,</p>
<ul>
<li>Why <code>git branch new_branch</code> will copy the current <code>release_branch</code>?</li>
<li>After checkout the new branch, why we could enter a sub directory and just re-checkout an old branch to bring in the old script?</li>
<li>Why the last checkout line (for old branch) will only restore the files in this subdirectory instead of bringing all scripts or switching to the old branch?</li>
</ul>
<pre><code># Say pwd is /home/ab/
git checkout -f $RELEASE_BRANCH
git branch $NEW_REPAIR_BRANCH
git checkout $NEW_REPAIR_BRANCH
cd /home/ab/cd/ef/
rm -r *
git checkout $OLD_REPAIR_BRANCH *
</code></pre>
<p>Is there anyone could help me explain the logic? Much appreciate! Btw, I believe they should be able to be simplified as well!</p>
","2","11809612","0","0"
"55974730","","2019-05-03 17:37:44","0","585","<git><git-checkout>","Is there any difference between git checkout <branch_name> and git checkout -b <branch_name>","<p>I'm very new to git so I'm about to make my fist commit, so for this I have created a branch by typing <code>git checkout my_branch</code> .This worked fine. But after I saw in the documentation that It is used <code>git checkout -b my_branch</code></p>

<p>Is there any difference between those?</p>
","2","","",""
"56084943","","2019-05-10 21:16:33","1","55","<git><git-checkout><git-fetch>","List all branches with `git branch -a` does not show recently fetched branch?","<p>I have this history in the console:</p>

<pre><code>Resolving deltas: 100% (58156/58156), completed with 1585 local objects.
From bitbucket.org:interos/datavana
 * branch                datavana.dev.py.3.7.3 -&gt; FETCH_HEAD

$ git checkout datavana.dev.py.3.7.3
error: pathspec 'datavana.dev.py.3.7.3' did not match any file(s) known to git

$ git branch
* alex/dockerize
  master

$ git branch -a
* alex/dockerize
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>I noticed a problem when I tried running:</p>

<pre><code>git checkout datavana.dev.py.3.7.3
</code></pre>

<p>because as you can see that didn't work, and this branch is also not listed using <code>git branch -a</code>, anybody know why I can't checkout this branch?</p>
","0","","",""
"56104400","","2019-05-12 23:53:29","1","153","<git><git-checkout>","Scan git objects for commit w/o checkout","<p>Is there a way to read all the files pertaining to a git commit without running git checkout? Doesnt a commit point to a bunch of blobs in the .git folder? Is there a way to read those blobs directly given a commit id? or is it just more straightforward to run <code>git checkout</code>? I am just trying to audit the files for vulnerabilities like plain text passwords etc.</p>
","0","","0","0"
"56243900","5139911","2019-05-21 17:51:49","4","557","<git><git-checkout>","git checkout will not remove staged files that were never committed","<p>I am learning git and was was surprised by the fact that staged files created while being in topic branch are not deleted when checking out to the master.</p>

<p>For example:</p>

<pre><code>git checkout -b topic
nano newfile.txt
git add newfile.txt
git checkout master // newfile.txt is still in the working directory, even though it was created in topic branch
</code></pre>

<p>I am well aware of <code>git clean</code> command, it's just that I expected that all files that were never committed are removed if you checkout to a different branch.</p>

<p>Am I missing something here or is this the expected behaviour of git?</p>
","2","5139911","0","0"
"56346608","357618","2019-05-28 16:33:45","0","50","<git><git-checkout>","git checkout HEAD vs git checkout head","<p>Git version: 2.21.0.windows.1</p>

<p>Environment: mintty bash</p>

<hr>

<p><strong>Edited:</strong> Note this is not the exactly the same question than (IMHO): 
<a href=""https://stackoverflow.com/questions/48137927/git-head-lowercase-vs-head-uppercase"">Git - head (lowercase) vs HEAD (uppercase)</a></p>

<p>Because I am not asking for a 'concept' but a behavior of <code>git checkout head</code> and <code>git checkout HEAD</code>, doing different things.</p>

<p>But reading all answers, the last one reveals the right answer for my question.  Anyway, it is a strange behavior mixing <code>checkout+head/HEAD</code>.</p>

<hr>

<p><strong>Original question text</strong>:</p>

<p>Why this commands are different?</p>

<p>If I write head/HEAD both of them do close things but really different:</p>

<pre><code>git checkout HEAD
</code></pre>

<p>than</p>

<pre><code>git checkout head
</code></pre>

<p>The first one takes me to the same ""place"" where I am. If I am in master branch, it does nothing (it takes me to the same place).</p>

<p>But with the second one (head lowercase) it takes me to the commit (detached HEAD) where I am already located.
If I am in the master branch, it puts me in the same commit but in detached head.</p>

<p>I cannot find anything in documentation pointing this out.</p>
","2","357618","",""
"73098513","17789133","2022-07-24 12:45:57","1","388","<git><branch><git-checkout><git-stash>","All my modifications gone after git stash","<p>I was working on the main branch, then I decided to create a new branch called <code>test-branch</code>. I tried <code>git checkout feature</code> first which warned me to <code>stash</code> or <code>commit</code> my changes. I <code>stash</code>ed them using <code>git stash save latest modification</code> and then I went to <code>test-branch</code> using <code>git checkout -b test-branch</code>. I was trying to add all files (not ignoring any) and commit to the branch. So I deleted everyting from <code>.gitignore</code>. After running <code>git add .</code>, I came back to <code>main</code> without committing to <code>test-branch</code>. I deleted that branch using <code>git branch -D test-branch</code>. And then I used <code>git stash apply</code> in <code>main</code>. Now my code has gone to the last commit version and all the modifications I did after that commit exist no more. What do I do now ?</p>
<p>Before swtiching branches</p>
<pre><code>PS C:\Users\Administrator\Desktop\projects\songs&gt; git checkout feature
error: Your local changes to the following files would be overwritten by checkout:
        .gitignore
        app.py
        music.db
        static/css/styles.css
        templates/favorites.html
        templates/layout.html
Please commit your changes or stash them before you switch branches.

PS C:\Users\Administrator\Desktop\projects\songs&gt; git stash save &quot;latest modification&quot;
Saved working directory and index state On main: latest modification
Unlink of file 'music.db' failed. Should I try again? (y/n) y
fatal: Could not reset index file to revision 'HEAD'.
</code></pre>
<p>After switching branches</p>
<pre><code>PS C:\Users\Administrator\Desktop\projects\songs&gt; git checkout -b test-branch
Switched to a new branch 'test-branch'

PS C:\Users\Administrator\Desktop\projects\songs&gt; git st
 M music.db
?? static/scripts/downloader.js
?? test/

PS C:\Users\Administrator\Desktop\projects\songs&gt; git add .
</code></pre>
<p>I then came back again to <code>main</code></p>
<pre><code>PS C:\Users\Administrator\Desktop\projects\songs&gt; git checkout main
Switched to branch 'main'
M       .gitignore
M       music.db
A       static/scripts/downloader.js
A       test/a.exe
A       test/ipvalidator.exe
A       test/nextvalidator.c
A       test/nextvalidator.exe
Your branch is up to date with 'origin/main'.

PS C:\Users\Administrator\Desktop\projects\songs&gt; git branch -D &quot;test-branch&quot;
Deleted branch test-branch (was 08f1d8e).
</code></pre>
<p>Then I applied the <code>stash</code> and my changes are gone</p>
<pre><code>
PS C:\Users\Administrator\Desktop\projects\songs&gt; git stash apply
error: Your local changes to the following files would be overwritten by merge:
        .gitignore
Please commit your changes or stash them before you merge.
Aborting

Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
        modified:   music.db
        new file:   static/scripts/downloader.js
        new file:   test/a.exe
        new file:   test/ipvalidator.exe
        new file:   test/nextvalidator.c
        new file:   test/nextvalidator.exe

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   .gitignore

Untracked files:
        __pycache__/
        flask_session/
        improvements.txt
        
        run.ps1
        static/downloads/
        templates/test.html
        test.py
        venv/
</code></pre>
<p><strong>Edit:</strong></p>
<p>As per @ElderFuthark 's request, I ran <code>git stash show --stat</code> and got the following:</p>
<pre><code>PS C:\Users\Administrator\Desktop\projects\songs&gt;  git stash show --stat
 .gitignore                 |   4 ++--
 app.py                     |  11 +++++++----
 music.db                   | Bin 69632 -&gt; 86016 bytes
 static/css/musicPlayer.css |   1 +
 static/css/styles.css      |   4 +++-
 templates/favorites.html   |   2 ++
 templates/layout.html      |   8 ++++++--
 templates/play.html        |  27 +++++++++++++++++++--------
 8 files changed, 40 insertions(+), 17 deletions(-)
</code></pre>
","2","17789133","0","0"
"56380972","11233170","2019-05-30 15:12:51","2","4812","<git><git-checkout><git-add>","git checkout after a git add?","<p>I wanted to know if there is a way to go back to the previous change in a file on git. If I create a .txt file, I edit it but I don't ""git add"" can I run ""git checkout - file.txt"" and go back, but is there a way to do it after doing ""git add""?</p>
","0","11233170","",""
"56434460","9491934","2019-06-03 20:58:00","1","206","<php><laravel><git><git-checkout>","Checkout fails using git-php in laravel 5","<p>I'm use this lib for php czproject/git-php and when I try do checkout to another branch a I get this error:</p>

<pre><code>Command 'git checkout 'qa'' failed (exit-code 1)
</code></pre>

<p>I try to clone from some repository and then I create a branch and in the same function call I tried to checkout to the new branch</p>

<pre><code>use Cz\Git\GitRepository;

//Some code

$this-&gt;repo = GitRepository::cloneRepository('/path/to/repository');

//Some code

$this-&gt;repo-&gt;createBranch('my_branch', TRUE);

local.ERROR: Command 'git checkout 'my_branch'' failed (exit-code 1).
</code></pre>
","1","9491934","0","0"