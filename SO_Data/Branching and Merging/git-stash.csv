Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"49149297","746346","2018-03-07 10:14:10","8","483","<git><git-stash>","Why does git stash -p take long to start?","<p>In my repo, <code>git diff</code> and <code>git stash</code> both run quickly, in less than a second. However <code>git stash -p</code> takes a good 20 seconds before showing the first hunk. Why could this be?</p>
","4","746346","0","0"
"76457596","6613780","2023-06-12 14:22:10","0","20","<git><github><git-checkout><git-stash>","How to recover deleted files from git after switching branch without stash","<p>I've made some local changes and didn't pushed to repository, accident tally switched to another branch without stashing my changes, i did</p>
<pre><code>git checkout .
</code></pre>
<p>Now i realized that after switching to my working branch, noticed all my local changes gone. Is there anyway to get it back i mean restore or if i do git checkout ., these files will be moved to any cache or recycle bin, i checked it in recycle bin, but not succeeded.
Any help ?
Thanks in advance</p>
<p>I've checked in my local is there any stash list, but no list. Very disappointing work i did. Is there any way to get back my local changes?</p>
","0","6613780","",""
"21738579","424632","2014-02-12 20:11:18","13","2414","<git><git-stash><git-show>","Difference between `git stash show -p stash@{N}` and `git show stash@{N}`?","<p>I thought they should be basically the same, but when I tried</p>

<pre><code>$ git stash show -p stash@{N}
</code></pre>

<p>and</p>

<pre><code>$ git show stash@{N}
</code></pre>

<p>the latter shows some additional commit information, but the actual diff was much, much shorter. (The former shows about a dozen files, but the latter only one.)</p>

<p>So, what exactly is the difference between the two and why are they different?</p>

<p>Can I also rely on things like <code>git diff stash@{M} stash@{N}</code> to be correct?</p>
","0","424632","0","0"
"59703836","438742","2020-01-12 12:33:53","3","99","<git><git-stash>","Why git stash creates two commits","<p>This is a history graph with a stash ref using <code>git log --graph --all refs/stash</code>:</p>

<pre><code>*   commit e5e6f3db57db6237a4334dc69a9a229f1cd7bd82 (refs/stash)
|\  Merge: 2a1a05a e918d31
| | Author: user &lt;xxx@yyy.com&gt;
| | Date:   Sun Jan 12 12:27:13 2020 +0000
| | 
| |     On master: some stash comment
| | 
| * commit e918d315535c6c6ade2dfb0538039d527dd0cd6e
|/  Author: user &lt;xxx@yyy.com&gt;
|   Date:   Sun Jan 12 12:27:13 2020 +0000
|   
|       index on master: 2a1a05a init
| 
* commit 2a1a05a258d3877ed1f6d32dfd57ae1941530418 (HEAD -&gt; master)
  Author: user &lt;xxx@yyy.com&gt;
  Date:   Sun Jan 12 12:09:51 2020 +0000

      init
</code></pre>

<p>Why commit <code>e5e6</code> is needed?</p>
","0","438742","0","0"
"22076944","3189","2014-02-27 18:15:54","29","13805","<git><git-stash>","git stash reporting: '' is not a stash reference","<p>Not quite sure what's happened, but git stash seems to be in a bad place.</p>

<pre><code>% git stash list
stash@{0}: filter-branch: rewrite
stash@{1}: filter-branch: rewrite
stash@{2}: On mysolr: start mysolr stuff
</code></pre>

<p>Is OK, and <code>git show stash@{0}</code> works fine.  But:</p>

<pre><code>% git stash drop
'' is not a stash reference
% git stash pop
'' is not a stash reference
% git stash drop stash@{0}
'stash@{0}' is not a stash reference
</code></pre>

<p>I've used git stash plenty in the past and not come across this.  I had recently rewritten history to remove a file from history before publishing to github.  The command I ran then was</p>

<pre><code>git filter-branch --force --index-filter \
  'git rm --cached --ignore-unmatch FILENAME' \
  --prune-empty --tag-name-filter cat -- --all
</code></pre>

<p>Any ideas how to fix the stash?</p>
","2","3189","0","0"
"22207256","807674","2014-03-05 19:25:18","893","462278","<git><git-stash>","Undo git stash pop that results in merge conflict","<p>I began making changes to my codebase, not realizing I was on an old topic branch. To transfer them, I wanted to stash them and then apply them to a new branch off of master. I used <code>git stash pop</code> to transfer work-in-progress changes to this new branch, forgetting that I hadn't pulled new changes into master before creating the new branch. This resulted in a bunch of merge conflicts and loss of a clean stash of my changes (since I used pop).</p>

<p>Once I recreate the new branch correctly, how I can I recover my stashed changes to apply them properly? </p>
","2","807674","0","0"
"22641249","816213","2014-03-25 16:50:34","6","6150","<git><git-checkout><git-stash><merge-conflict-resolution>","Difference between git checkout HEAD -- filename and git checkout -- filename","<p>Let's begin with a situation.</p>

<ol>
<li>I stash some changes (5 files) <code>git stash</code></li>
<li>Change some files</li>
<li>Commit the changes <code>git commit -m ""Commit message""</code></li>
<li>Get the changes back from stash <code>git stash apply</code></li>
</ol>

<p>I receive a merge-conflict in 2 files because of the commit. I no longer want the changes in those 2 files So I tried to revert those changes.</p>

<p>I did <code>git checkout -- background.js</code></p>

<p>It failed with error </p>

<blockquote>
  <p>error: path 'src/background/background.js' is unmerged</p>
</blockquote>

<p>But then I read <a href=""https://stackoverflow.com/a/7147320/1310070"">this SO post</a> and tried</p>

<pre><code>git checkout HEAD -- background.js
</code></pre>

<p>It works successfully. It happened with me for both the files. I want to understand the difference bewteen</p>

<p><code>git checkout -- file</code> AND <code>git checkout HEAD -- file</code></p>
","0","816213","0","0"
"4058372","262667","2010-10-30 10:58:41","13","2991","<git><conflict><git-stash><git-add>","git stash and edited hunks","<p>I totally love <code>git add -p</code> and <code>git stash</code> but I occasionally have the following problem, which is reproduced by the following sequence of commands:</p>

<ul>
<li><code>git add -p my_file</code>: then I <strong>edit a hunk manually</strong> (using <code>e</code>) because the splitting that git suggests does not suit me</li>
<li><code>git stash --keep-index</code>: then I do some testing, and if the tests pass <em>I do not commit</em></li>
<li><code>git stash pop</code>: now the problem occurs: the file <code>my_file</code> <strong>is now considered as conflicted</strong>, and git has completely messed with my edited hunk, so I have to edit the file, remove the useless merge marks, and run <code>git add my_file</code> followed by <code>git reset HEAD</code></li>
</ul>

<p>I'm puzzled because this happens only when editing a hunk manually. I don't see how this should make any difference at all.</p>

<hr>

<p>To reproduce the problem:</p>

<ul>
<li><code>touch newfile</code></li>
<li><code>git add newfile</code></li>
<li><code>git commit -m 'newfile'</code></li>
<li>add two lines in the file</li>
<li><code>git add -p newfile</code></li>
<li>edit the hunk (<code>e</code>), remove one of the line in the hunk, then quit git add (<code>q</code>)</li>
<li><code>git stash --keep-index</code></li>
<li><code>git stash pop</code></li>
</ul>

<p>Now the file <code>newfile</code> is in unmerged state. Note, again, that the problem <strong>only occurs with manually edited hunks</strong>. There is no problem whatsoever with the commands above if one does not edit any hunk manually.</p>

<p>Incidentally, the preceding state of the file is in the third stage (<code>git show :3:newfile</code>), and the previously staged version is in the second stage (<code>git show :2:newfile</code>). So I could, by some git black magic, manage to put the second stage in this index, and the third stage in the working repo... but I don't know how to do that so I do it by hand. :-(</p>
","5","262667","0","0"
"60330971","7269570","2020-02-21 01:37:22","1","193","<git><git-stash>","How to stash unchanged files on git?","<p>So, I have some committed files in branch A, but I feel like they really don't belong there. I want to move them, as they are, to another branch B - but I don't want to bring the entire branch A history to B; I just want the files.</p>

<p>Then, I'm looking for a way to stash those files, and then pop this stash on a brand new branch B. I've done this in the past in a pretty trashy way - that is, I literally modified every file adding a new line at their beginning, so they could be stashed. Obviously, this solution is nowhere near smart. Is there any way to stash them?</p>

<p>(other solutions to this task are most welcome as well, by the way)</p>

<p>EDIT: I realize this question is badly written. I should have asked ""how to move files between branches"", because that is my real goal. Sorry for falling to the <a href=""https://en.wikipedia.org/wiki/XY_problem"" rel=""nofollow noreferrer"">XY problem</a>. Anyway, for that question, there is already <a href=""https://stackoverflow.com/a/307872/7269570"">a great answer</a> - check it out. I'm keeping the question in order to help others who may phrase their problems the same way I did.</p>
","4","7269570","",""
"38872509","298195","2016-08-10 11:43:44","2","1186","<git><git-stash>","Force message on git stash","<p>I'm using <code>git stash</code> a lot. Most of the time I forget to set a message (<code>git stash save &lt;message&gt;</code>). </p>

<p><strong>How</strong> is it possible to <strong>force message</strong> on the normal <code>git stash</code> command?</p>

<p>From the git stash help page:</p>

<blockquote>
  <p>Calling git stash without any arguments is equivalent to git stash save. A stash is by default listed as ""WIP on branchname …"", but you can give a more descriptive message on the command line when you create one.</p>
</blockquote>
","3","298195","0","0"
"14654229","841626","2013-02-01 20:12:04","5","402","<git><version-control><patch><git-stash>","save git stash revision long term","<p>How do I </p>

<p>""Save"" a git stash and store it away long terms such that I can access it in the future (perhaps save it in some patch file) even after the stash itself is cleared. IE. how do I save a certain stash into a file such that I can clear the current stashes and that nothing will show up if I do git stash list and yet I will still be able to access the saved stash revision in the future if I want to</p>
","3","841626","0","0"
"89487","2108922","2008-09-18 02:29:32","85","19059","<git><git-stash>","Why isn't the git stash unique per branch?","<p>I suppose it allows for moving changes from one branch to the next but that's what cherry picking is for and if you're not making a commit of your changes, perhaps you shouldn't be moving them around?</p>

<p>I have on occasion applied the wrong stash at the wrong branch, which left me wondering about this question.</p>
","1","2108922","0","0"
"12139812","1542339","2012-08-27 09:57:52","12","23972","<git><github><git-pull><merge-conflict-resolution><git-stash>","why git stash cannot abandon the changes made just now?","<p>i forked a project from github, and the origin point to my own github repo, remote point to its original repo, since i want to get update from remote, </p>

<p>i use git pull remote branch_name, then my local repo is in conflict mode, 
now i want to cancel the effect of git pull, so i use git stash, but was surprised to find i failed to do this?  what's wrong?</p>

<p>the detailed info is as follows:</p>

<pre><code>[mirror@home weechat]$ git status
# On branch master
# Unmerged paths:
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#       both modified:      CMakeLists.txt
#       both modified:      ChangeLog
#       both modified:      NEWS
#       both modified:      configure.in
#       both modified:      po/cs.po
#       both modified:      po/de.po
#       both modified:      po/es.po
#       both modified:      po/fr.po
#       both modified:      po/hu.po
#       both modified:      po/ru.po
#       both modified:      po/weechat.pot
#       deleted by us:      src/irc/irc-server.c
#       both modified:      weechat.spec
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
[mirror@home weechat]$ git stash
CMakeLists.txt: needs merge
ChangeLog: needs merge
NEWS: needs merge
configure.in: needs merge
po/cs.po: needs merge
po/de.po: needs merge
po/es.po: needs merge
po/fr.po: needs merge
po/hu.po: needs merge
po/ru.po: needs merge
po/weechat.pot: needs merge
src/irc/irc-server.c: needs merge
weechat.spec: needs merge
CMakeLists.txt: needs merge
ChangeLog: needs merge
NEWS: needs merge
configure.in: needs merge
po/cs.po: needs merge
po/de.po: needs merge
po/es.po: needs merge
po/fr.po: needs merge
po/hu.po: needs merge
po/ru.po: needs merge
po/weechat.pot: needs merge
src/irc/irc-server.c: needs merge
weechat.spec: needs merge
CMakeLists.txt: unmerged (118d776a202cfc6688290e96fca20ac4f8631f5e)
CMakeLists.txt: unmerged (d05c9a9711a965dcad0aefa03b79ae7a4f5cb8fb)
CMakeLists.txt: unmerged (dd2b14cb188e1927e098705d77e922ad530e232b)
ChangeLog: unmerged (764711936b54aa75812828e1ab15e1632aa3eb9d)
ChangeLog: unmerged (e00d4bf654c3d199e24bf4910b066f1659fea4b6)
ChangeLog: unmerged (dbec2315ffc1f15feede248abe3ed85beaa82ed7)
NEWS: unmerged (457d5443548e6130b50e42a9c87a6f2e8ba4c596)
NEWS: unmerged (706cee4b8853013f20129ccb2fa9057b7500fceb)
NEWS: unmerged (33afffbac62399faa32e2560a9accd95dd9a050e)
configure.in: unmerged (8e1058e5e00a5e671459cee8300420b0488560d9)
...
fatal: git-write-tree: error building trees
Cannot save the current index state
</code></pre>

<p>so how to cannel the effect of git pull? should i delete repo, and download it again? </p>
","0","1542339","",""
"12147042","1620574","2012-08-27 17:57:56","52","46773","<git><git-stash>","lost git stash changes","<p>So here's what happened:
I was on a branch 'A' and did a Git stash on that branch. Then I switched to another branch 'B'. I navigated back to Branch 'A' but did not do a Git stash pop. I switched to the master branch and then back to branch 'A'. I am trying to go a git stash pop now but cant seem to get my changes back.. I need to recover that code but whenever I do a git stash pop, my file changes are not listed. I did not commit any code.</p>

<p>Is there a way to recover the changes that I made? would really appreciate any help in this regards. </p>
","1","1620574","0","0"
"19821560","355019","2013-11-06 19:57:55","12","305","<git><git-stash>","git-stash is moving my master branch","<p>I'm trying to switch from a feature branch to master without losing my changes, and so I'm trying to <code>git stash</code> and then switch to master, but master is moving to my feature branch. Basically:</p>

<pre><code>&lt;feature*&gt; $ git status
# On branch feature
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   hay.md
&lt;feature*&gt; $ git rev-parse --short HEAD
737b183 
&lt;feature*&gt; $ git rev-parse --short master
109b5f7 # This happens to be 4 commits ago
&lt;feature*&gt; $ git stash
Saved working directory and index state WIP on feature: 737b183 Some commit
HEAD is now at 737b183 Some commit
&lt;feature&gt; $ git rev-parse --short HEAD
737b183 
&lt;feature&gt; $ git rev-parse --short master
737b183 # WAT??!!!
</code></pre>

<p>Am I misunderstanding git-stash? Or maybe git as a whole? <del>Or do I misunderstand the nature of the correspondence of perception and reality?</del></p>

<p><strong>Update</strong>
I just discovered it does the same thing in the case of a <code>git reset</code>.</p>

<pre><code>&lt;feature*&gt; $ git status
# On branch feature
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   hay.md
&lt;feature*&gt; $ git rev-parse --short HEAD
737b183 
&lt;feature*&gt; $ git rev-parse --short master
109b5f7
&lt;feature*&gt; $ git reset --hard HEAD
HEAD is now at 737b183 Some commit
&lt;feature&gt; $ git rev-parse --short HEAD
737b183 
&lt;feature&gt; $ git rev-parse --short master
737b183 # Hm....
</code></pre>

<p><strong>Another Update</strong>  </p>

<p>It's only happening in one ""instance"" of the repo (I don't know the right git vocabulary), so I imagine there is something wonky in <code>.git/</code>. A bandaid solution is to delete the repo and clone it from the remote again, but I'd kind of like to know <em>why</em> it's happening.</p>

<p><strong>Some more stuff</strong></p>

<pre><code>‹master› » git checkout feature
Switched to branch 'feature'
Your branch is ahead of 'master' by 1 commit.
  (use ""git push"" to publish your local commits)
‹feature› » echo ""Hay"" &gt;&gt; hay.md
‹feature*› » cat .git/HEAD
ref: refs/heads/feature
‹feature*› » cat .git/refs/heads/master
93d9d14b0f298ed28cc1520905768281f32d0929
‹feature*› » cat .git/refs/heads/feature
51410c5dcd679b8cf57a7dce2d17be7bbd121923
‹feature*› » git stash
‹feature› » cat .git/HEAD
ref: refs/heads/feature
‹feature› » cat .git/refs/heads/master
51410c5dcd679b8cf57a7dce2d17be7bbd121923
‹feature› » cat .git/refs/heads/feature
51410c5dcd679b8cf57a7dce2d17be7bbd121923
</code></pre>
","24","355019","0","0"
"50540920","9850371","2018-05-26 08:40:44","1","70","<ruby-on-rails><ruby><git><git-stash>","git: temporarily store current files - and return them","<p>I know <code>git stash</code>, but somehow either I am doing something wrong or my problem is not as common as I think.</p>

<p>Scenario: I am coding, committed and pushed a version, doing further code, then to make a decision I would like to test something. For that, I'd love to save the current local files away and return to that state later on to try another solution. Note: in an intermediate un-committed state. Something one would do normally by zipping the project folder and restoring it later.</p>

<p><code>git stash</code> for me has the crux, that I cannot tell it to simply re-apply the stashed content, ignore anything else, simply recover what was stashed. With <code>git stash apply --force</code> I get (of course) warnings that files are not committed.</p>

<p>Any help?</p>
","2","9850371","",""
"33904733","3254515","2015-11-24 22:03:52","3","1128","<git><git-stash>","""stash apply"" in git override changes got from a pull","<p>I got in this situation today. I had some changes in one file to commit but before I wanted to do a pull for this file so I did the next</p>

<ol>
<li>Stash changes from my working directory</li>
<li>Pulling changes bringing changes in this same file from other person</li>
<li>Stash apply my changes</li>
</ol>

<p>What I have found after ""stash apply"" is that the changes I got after doing the pull were overriden with with my stash changes. </p>

<ol>
<li><p>Is this normal? There shouldnt be merge conflicts when applying my stash changes affect the changes in the same file got from the pull?</p></li>
<li><p>How to deal with this situation in order to avoid my stash changes override 
changes got from a pull?</p></li>
</ol>

<p>Thanks</p>
","2","3254515","",""
"34000732","1604568","2015-11-30 14:19:19","4","986","<git><pull><git-stash>","git stash merge conflict - take stashed version","<p>i am wondering how can i take the stashed version of the files.</p>

<p>say i have a file called <code>foo.c</code> with some uncommitted changes on master and i would like to update the current branch from remote. Remote has also modified <code>foo.c</code></p>

<p>My current approach is to:</p>

<pre><code>stash the current changes on master
git pull --rebase
</code></pre>

<p>this goes well.</p>

<p>but when i do a:</p>

<pre><code> git stash pop
</code></pre>

<p>there will be a merge conflict in <code>foo.c</code></p>

<p>so is there a way to take stashed version of <code>foo.c</code>?</p>

<p>i.e similar to what can be done with pulling: </p>

<pre><code> git pull -s recursive -X theirs --rebase
</code></pre>

<p>so what i am looking for is:</p>

<pre><code> git stash pop ""-X theirs""
</code></pre>

<p>that would replace the pulled version of foo.c with the stashed version</p>

<p>tnx for the help</p>
","8","1604568","",""
"50764051","47633","2018-06-08 15:36:47","3","1936","<git><git-push><git-pull><git-remote><git-stash>","git: best way to ""stash"" changes to continue work from a remote repo","<p>As far as I understand stashes are local, and are not meant to be pushed to remote repos.</p>

<p>Sometimes I have ongoing work that is not ready to be committed, but that I have to somehow share with other workers or with myself accessing from a different workstation.</p>

<p>What would be the best way to emulate some kind of ""remote stash"" with git or to use git for a workflow like I've just described?</p>
","3","47633","0","0"
"17569756","1335290","2013-07-10 11:42:15","1","501","<git><branch><git-branch><git-stash>","How does one divide changes among multiple branches in git?","<p>What is the ""best"" (read: ""easiest"", ""preferred"", ""proper"") way to divide up a set of changes among multiple branches in git? For example, assume I have made a set of (uncommitted) changes while working on branch X, but some of the changes really need to be committed to branch Y, others to branch Z, and still others to branch W; normally what I would do instinctively (like recommended <a href=""https://stackoverflow.com/questions/2944469/how-to-commit-my-current-changes-to-a-different-branch-in-git"">here</a>) is to stash the changes, checkout Y, apply the changes, commit only what's relevant to Y, and repeat for the other branches. The problem I run into with this is that applying the stashed changes often results in merge conflicts that have to be handled, and if I do a stash pop instead of apply (which happens often enough to be a real risk for me!), I end up intermingling changes intended for Z in the Y branch and they have to be disentangled manually.</p>

<p>Is there a better way? How better could I handle this situation?</p>

<p>Note that my question is related to questions like <a href=""https://stackoverflow.com/questions/2944469/how-to-commit-my-current-changes-to-a-different-branch-in-git"">this one</a>, but is different in that I seek the best way to divide a current set of changes among multiple branches. Also note that I cannot switch to Y, Z, or W prior to developing the set of changes; I have to start on X and develop the set of changes on X.</p>
","6","1335290","",""
"69127643","31897","2021-09-10 05:29:42","5","328","<git><shell><scripting><git-stash>","How to use git-stash --keep-index in a shell-script without conflicts","<p>I'm attempting to automate a particular operation on a git-repository (<code>typedoc</code>, a command to generate TypeScript documentation); but I need that command to only &quot;see&quot; the actually-staged changes. Any unstaged changes need to be &quot;hidden&quot; from the command.</p>
<p>My current approach is <a href=""https://github.com/ELLIOTTCABLE/Pratchett.js/blob/eeea6a25c98853669f212426dfd202698ef6887a/Scripts/regenerate-docs.sh#README"" rel=""nofollow noreferrer"">attempting to automate git-stash</a>, such that it stashes away any untracked-files and unstaged-changes, then runs the command, then pops that stash. The meat of the script is thus:</p>
<pre class=""lang-sh prettyprint-override""><code>stash_working=_no

git update-index --refresh
if git diff-index HEAD -- .':!Documentation/'; then
   stash_working=_yes
fi

if [ &quot;$stash_working&quot; != &quot;_no&quot; ]; then
   git stash push --include-untracked --keep-index -m &quot;AUTOMATED STASH&quot; \
       -- .':!Documentation/'
fi

typedoc
typedoc_exit_status=$?

if [ &quot;$stash_working&quot; != &quot;_no&quot; ]; then
   git stash pop
fi

exit $typedoc_exit_status
</code></pre>
<p>Unfortunately, this isn't working as hoped: in particular, despite &quot;not being included&quot; in the stash, the stashed changes are ... interfering with themselves(?) when being popped. For instance, if the <em>staged</em> content (that I <em>do</em> want in the docs) contains this line,</p>
<pre><code> * This is some fake documentation for testing purposes.
</code></pre>
<p>... but there's an unstaged-change updating that to</p>
<pre><code> * THIS IS A CHANGE TO THAT DOCUMENTATION
</code></pre>
<p>... then I get the following conflict, and that <code>git stash pop</code> fails:</p>
<pre class=""lang-js prettyprint-override""><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream
/**
 * This is some fake documentation for testing purposes.
 */
export const Foo = {}
||||||| constructed merge base
=======
/**
 * THIS IS A CHANGE TO THAT DOCUMENTATION
 */
export const Foo = {}
&gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes
</code></pre>
<p>I've also tried <code>git stash pop --index</code>, but that has the same effect, in this case.</p>
<p>Is there a Git-centric way (i.e. not scripting the creation of a temporary working-directory, checking out, running docgen, copying docs back to original project, type-of-thing) for me to improve on this automation so that such merge-conflicts don't occur, and the working-directory is transparently kept in the state it was at during the</p>
","7","31897","0","0"
"34345691","3808424","2015-12-17 22:43:55","4","613","<git><git-stash>","git stash drop oldest stashes ( say oldest 5 stashes)","<p>How do I drop oldest stashes (say oldest 5 stashes) in one statement instead of doing something like this:</p>

<pre><code>git stash drop stash@{3}
git stash drop stash@{4}
git stash drop stash@{5}
git stash drop stash@{6}
git stash drop stash@{7}
</code></pre>
","0","3808424","0","0"
"17811714","639654","2013-07-23 13:33:02","6","300","<git><copy><save><export><git-stash>","What is the most practical way to keep working on a git stash on a different computer?","<p>it happened more than once to leave the office having only saved a stash of uncommitted code.</p>

<p>So, if I wanted to keep working on the same feature, I had to SSH to my host, create a disposable branch, commit the stash and push the new branch to the development repository.</p>

<p>Now I wonder if there is a cleaner, more practical solution for ""copying/exporting"" a git stash to another local repository. I have already ruled out SCP'ing the local repository on my office machine, because I could have some work in progress on my laptop, too.</p>

<p>P.S.: my question looks like the continuation of this <a href=""https://stackoverflow.com/questions/1550378/is-it-possible-to-push-a-git-stash-to-a-remote-repository?rq=1"">one</a></p>
","0","639654","0","0"
"57757607","1446048","2019-09-02 13:14:07","1","349","<git><git-stash>","git stash tracked but new files","<pre><code>$ git init
$ git commit -m 'initial commit needed to stash' --allow-empty
$ touch test
$ git add --intent-to-add test  # aka -N
$ git stash
error: Entry 'test' not uptodate. Cannot merge.
Cannot save the current worktree state
</code></pre>

<p>It's not untracked, so <code>--include-untracked</code> has no impact. Is there any way to stash an added but never committed file?</p>
","9","1446048","",""
"47177355","4512509","2017-11-08 10:32:46","0","27","<git><git-stash>","git stash apply restores only new files","<p>On some point of developing I used <code>git stash save --all</code> to stash my progress. But then, when I try to apply this stash: <code>git stash apply stash@{0}</code> it only get back new files, but files that were modified  previously are not changed. It also shows message at the end: <code>Could not restore untracked files from stash</code>. That is interesting because actually untracked files are the only that were backed up.</p>

<p>If I run <code>git stash show stash@{0}</code> it shows me the files that were only edited, so edit files are not gone anywhere and they are still inside this stash.</p>

<p>How I can restore <em>all</em> the files, both untracked and modified?</p>
","6","4512509","",""
"49119934","2055918","2018-03-05 21:40:43","8","2456","<windows><git><git-stash>","git stash leaving modified files?","<p>I'm getting some odd behavior when trying to stash changes. I'm not a git expert so I'm hoping someone can shed some light on this:</p>

<ol>
<li>On an up-to-date branch, I modify a tracked file. git status shows it as modified</li>
<li>git stash (responds with ""Saved working directory and index state WIP on...)</li>
<li>git status still shows the file as modified, but git diff (and git gui) show no changes.</li>
<li>git stash list shows the stash was created</li>
<li>git stash pop responds with ""error: Your local changes to the following files would be overwritten by the merge:""</li>
</ol>

<p>The behavior at 3 makes no sense to me. It started happening fairly recently. I've been using stash/stash pop for several months with no problems.</p>

<p>I wondered whether there was an issue with my local working copy so I re-cloned but get the same behavior.</p>

<p>Is my GIT installation broken, or am I missing something?</p>

<p>Additional info:</p>

<ul>
<li><p>Tried this on another PC and it behaves as expected, so it's something to do with this installation.</p></li>
<li><p>Tried creating a new local repo, add &amp; commit 1 file, modify, stash. Same behavior</p></li>
<li><p>Tried with files with CR LF and LF line endings. Same behavior</p></li>
</ul>

<p>git config -l:</p>

<pre><code>core.symlinks=true
core.autocrlf=true
core.fscache=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
help.format=html
diff.astextplain.textconv=astextplain
rebase.autosquash=true
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
http.sslbackend=openssl
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
credential.helper=manager
core.editor='C:\Program Files (x86)\Notepad++\notepad++.exe' -multiInst -    notabbar -nosession -noPlugin
core.excludesfile=C:\GIT\gitignore\VisualStudio.gitignore
core.editor=notepad
core.fscache=true
core.preloadindex=true
gui.fontdiff=-family Consolas -size 10 -weight normal -slant roman -    underline 0 -overstrike 0
gui.recentrepo=C:/GIT/polarisv4
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
user.name=xxxxx
user.email=xxxxxx
difftool.sourcetree.cmd='C:/Program     Files/TortoiseGit/bin/TortoiseGitMerge.exe' ""$LOCAL"" ""$REMOTE""
mergetool.sourcetree.cmd='C:/Program     Files/TortoiseGit/bin/TortoiseGitMerge.exe'  -base:""$BASE"" -mine:""$LOCAL"" -    theirs:""$REMOTE"" -merged:""$MERGED""
mergetool.sourcetree.trustexitcode=true
alias.co=checkout
alias.br=branch
alias.st=status
winupdater.recentlyseenversion=2.15.1.windows.2
credential.helper=manager
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
</code></pre>
","9","2055918","",""
"19314287","430766","2013-10-11 09:04:58","5","1825","<git><merge><branch><git-stash>","Can I influence the merge strategy used by ""recursive"" when applying a git stash?","<p>I have a set of debug utilities living in a git stash slot; I'm moving between branches which differ only very slightly regarding the changes in the stash. I <code>git stash apply</code> the top stash on the respective branch to test a feature.</p>

<p>However I ran into a proper merge conflict in one of the branches, but I want to prefer what's in the stash, so I want the merge-strategy ""recursive"" to prefer the version coming from the stash (I <em>guess</em> that'd be ""theirs"", cf. <code>man git-merge</code> section <code>MERGE-STRATEGIES</code>, subsection <code>recursive</code>).</p>

<p>Can I somehow tell <code>git stash apply</code> what merge strategy to use?</p>
","0","430766","",""
"69529207","6111343","2021-10-11 16:00:06","0","167","<node.js><git><git-stash>","How to git stash some files in a script?","<p>I'm writing a Node script that create a git stash dynamically.
The purpose is to create a single stash entry with some files in it, while leaving all the other changes unchanged in the working tree.</p>
<p>All the files to be stashed are stored in a JS Array. Beware it can contains hundreds of files.</p>
<p>I can't call <code>git stash save -- &lt;file1&gt;</code> for each file as it will create N stash entries. <code>git stash save -- &lt;file1&gt; &lt;file2&gt; &lt;file3&gt; etc...</code> may be too long a for single command, given the number of files to handle.</p>
<p>How can I make a script executing multiple git commands to create step by step a single stash entry ?
... Or there is another solution I didn't expect ?</p>
<p>Thank you !</p>
","5","6111343","",""
"62423123","2680007","2020-06-17 06:56:28","-1","96","<git><git-stash>","How to use `git stash --patch` together with `git stash save`","<p>I want to use:</p>

<pre><code>git stash save ""Message describing stash""
</code></pre>

<p>…but I also want to stash only <em>some</em> of my working directory, using:</p>

<pre><code>git stash --patch
</code></pre>

<p>How can I create a stash that both <strong>has a message</strong>, <em>and</em> <strong>includes only selected changes</strong>?</p>
","0","2680007","",""
"63170071","9212101","2020-07-30 09:21:39","0","174","<git><github><git-bash><git-pull><git-stash>","how to automate the “stash-and-pull” process? (git)","<p>I create a shell script for run project in a local environment. When running the script I need include if git update also updates my local code with git code before run project.</p>
<pre><code>cd /var/www/html/project &amp;&amp; \
    git stash &amp;&amp; \
    git pull &amp;&amp; \
    git stash apply
</code></pre>
<p>There is my try. But problem their when conflict happens no way to change conflict. I need when git stash apply if conflict happen stop a script make way to resolve conflict.</p>
","3","9212101","",""
"35628793","3607573","2016-02-25 13:34:14","1","2250","<git><git-branch><git-commit><git-stash>","using git stash to move the changes to a different branch","<p>In git if we are accidentally working on a different branches and we do not wish to commit the untested code, I have seen people using stash to save the uncommitted changes, switch to the correct branch and then apply the stash.</p>

<p>As far as I understand, if we have made some changes which is not committed, we can simply move to the correct branch and commit the code. Why do we even need to stash it since changes that are uncommitted will be visible in all the branches.</p>

<p>I remember seeing in some documentation that git will not allow you to switch between branches if you have any uncommitted changes. Is there something I am missing?</p>
","0","3607573","",""
"51275777","367796","2018-07-11 00:54:16","204","98723","<git><git-stash>","Why does git stash pop say that it could not restore untracked files from stash entry?","<p>I had a bunch of staged and unstaged changes and I wanted to quickly switch to another branch and then switch back.</p>

<p>So I staged my changes using:</p>

<pre><code>$ git stash push -a
</code></pre>

<p>(In hindsight I probably could have used <code>--include-untracked</code> instead of <code>--all</code>)</p>

<p>Then when I went to pop the stash I get a whole lot of errors along the lines of:</p>

<pre><code>$ git stash pop
foo.txt already exists, no checkout
bar.txt already exists, no checkout
...
Could not restore untracked files from stash entry
</code></pre>

<p>There doesn't seem to be any changes restored from the stash.</p>

<p>I also tried <code>$ git stash branch temp</code> but that shows the same errors.</p>

<p>I did figure out a way around this which was to use:</p>

<pre><code>$ git stash show -p | git apply
</code></pre>

<p>Disaster averted for now but this raises some questions.</p>

<p>Why did this error happen in the first place and how do I avoid it next time?</p>
","8","367796","0","0"
"68568063","1163186","2021-07-28 22:32:59","0","132","<git><rebase><git-rebase><git-stash>","Rebasing git branches on top of tracking branches","<p>Suppose you have a Git repository with a <code>master</code> branch tracking <code>origin/master</code> and a long-lived <code>release</code> branch tracking <code>origin/release</code>. Now, suppose that a <code>git fetch</code> operation has changed the tracking branches such that <code>release</code> is behind. Finally, suppose you have unstashed changes.</p>
<p>If we do <code>git rebase --autostash</code> while we are on master, then master will be up-to-date with its remote, and the unstashed changes will be preserved, short of a rebase/unstash conflict. The question is, if I am on <code>master</code> with unstashed changes (and possibly behind <code>origin/master</code>), what should I do in order to have <code>release</code> no longer behind <code>origin/release</code>?</p>
<p>My best guess is using some form of <code>git rebase --autostash --onto</code>, but I'm not sure what the rest of the arguments would be like. Maybe <code>git rebase --autostash --onto release origin/release release</code>?</p>
<p>Also, would it suffice to <em>reset</em> <code>release</code> to <code>origin/release</code> instead?</p>
","2","1163186","0","0"
"51422637","4684797","2018-07-19 12:24:22","28","10664","<git><git-stash>","git diff for a single file in stash","<p>I know from <a href=""https://stackoverflow.com/questions/7677736/git-diff-against-a-stash"">this answer</a> how to show the diff against a stash.</p>

<pre><code>git stash show -p stash@{1}
</code></pre>

<p>But how can I show the diff to a specific file from a stash?</p>
","1","4684797","0","0"
"73492077","3109248","2022-08-25 18:17:12","2","721","<git><git-stash>","""git stash show"" after stashing only one file","<p>Ran <code>git stash</code> to stash just one file out of 4 tracked files.</p>
<p>Using <code>git stash show</code> displays not only that file but the other staged files as well. Why? For example: why does it show anything other than the file <em>&quot;application.xml&quot;</em> that I stashed?</p>
<pre><code>$ git status
On branch some/0.0.1
Your branch is up to date with 'origin/some/0.0.1'.

Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
    modified:   src/main/java/ServiceServiceImpl.java
    modified:   src/main/java/util/ServiceUtil.java
    modified:   src/test/SystemTest.java

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    modified:   src/main/java/util/ServiceUtil.java
    modified:   src/main/resources/application-local.yml
    modified:   src/main/resources/application.yml
    modified:   src/main/resources/logback.xml


$ git stash push src/main/resources/application.yml -m &quot;app.xml stashed&quot; &lt;-- stash just one file
Saved working directory and index state On 0.0.1: app.xml stashed

$ git stash list
stash@{0}: On 0.0.1: app.xml stashed

$ git stash show stash@{0} &lt;---------------- Why does it show &quot;staged&quot; files other than the one I stashed (which is src/main/resources/application.yml)
 .../java/ServiceServiceImpl.java   |  8 ++++----
 .../java/util/ServiceUtil.java    |  1 +
 src/main/resources/application.yml            | 20 ++++++++++++++------
 .../test/SystemTest.java |  6 +++---
 4 files changed, 22 insertions(+), 13 deletions(-)
</code></pre>
<p>This is from the man git-stash:</p>
<blockquote>
<p>show [-u|--include-untracked|--only-untracked] [] []
Show the changes recorded in the stash entry as a diff between the stashed contents and the commit back when the stash entry was first created.</p>
</blockquote>
","3","3109248","",""
"56810579","274579","2019-06-28 16:46:59","2","1178","<windows><git><user-interface><git-stash>","Is there a graphical tool to conveniently view git stash contents?","<p>Is there a GUI-based alternative to the command <code>git stash show -p stash@{0}</code> (preferably in conjunction with TortoiseGit, or WinMerge)?</p>
","0","274579","0","0"
"73646643","18150659","2022-09-08 09:22:31","0","21","<git><git-stash>","Why git stash apply command does not work?","<p>I have run git stash, when I am upgrading flutter. Now I am trying to run &quot;git stash apply&quot; command, but I get this error.
This is really important to me because it has been a lot of progress since my last commit.
Is there anyone who knows what can I do? Thanks for your suggestions.
It looks like your post is mostly code; please add some more details.</p>
<pre><code>    git stash apply stash^{/0e55629}
error: Your local changes to the following files would be overwritten by merge:
        ios/Flutter/Debug.xcconfig
        ios/Flutter/Release.xcconfig
        lib/snapi_data/doctor.dart
        linux/flutter/generated_plugin_registrant.cc
        linux/flutter/generated_plugins.cmake
        macos/Flutter/Flutter-Debug.xcconfig
        macos/Flutter/Flutter-Release.xcconfig
        macos/Flutter/GeneratedPluginRegistrant.swift
        pubspec.lock
        pubspec.yaml
        windows/flutter/generated_plugin_registrant.cc
        windows/flutter/generated_plugins.cmake
Please commit your changes or stash them before you merge.
Aborting
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   ios/Flutter/Debug.xcconfig
        modified:   ios/Flutter/Release.xcconfig
        modified:   lib/snapi_data/doctor.dart
        modified:   linux/flutter/generated_plugin_registrant.cc
        modified:   linux/flutter/generated_plugins.cmake
        modified:   macos/Flutter/Flutter-Debug.xcconfig
        modified:   macos/Flutter/Flutter-Release.xcconfig
        modified:   macos/Flutter/GeneratedPluginRegistrant.swift
        modified:   pubspec.lock
        modified:   pubspec.yaml
        modified:   windows/flutter/generated_plugin_registrant.cc
        modified:   windows/flutter/generated_plugins.cmake

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        .vscode/
        android/app/google-services.json
        android/app/src/main/kotlin/com/example/medicte_/
        ios/Podfile
        ios/Podfile.lock
        ios/Runner/Assets.xcassets/AppIcon.appiconset/100.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/1024.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/114.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/120.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/128.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/144.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/152.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/16.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/167.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/172.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/180.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/196.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/20.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/216.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/256.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/29.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/32.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/40.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/48.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/50.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/512.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/55.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/57.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/58.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/60.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/64.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/72.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/76.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/80.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/87.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/88.png
        lib/assets/
        lib/cards/
        lib/firebase_options.dart
        lib/images/102642-contact.json
        lib/images/81732-contact-us.json
        lib/images/96769-contac-mouse-web.json
        lib/images/Lovepik_com-401792159-medical-robot.png
        lib/images/address.png
        lib/images/alarm-alert-bell-notification-icon-89422.png
        lib/images/email.png
        lib/images/facebook.png
        lib/images/instagram.png
        lib/images/lf20_9gwslqtn.json
        lib/images/notification.png
        lib/images/telephone-call.png
        lib/images/twitter.png
        lib/pages/category_page.dart
        lib/pages/chat_ui.dart
        lib/pages/doctor_page.dart
        lib/pages/doctor_search_page.dart
        lib/pages/hospital_page.dart
        lib/pages/treatment_page.dart
        lib/snapi_data/hospital.dart
        lib/snapi_data/treatments.dart
        macos/Podfile

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
❯ git stash apply
error: Your local changes to the following files would be overwritten by merge:
        ios/Flutter/Debug.xcconfig
        ios/Flutter/Release.xcconfig
        lib/snapi_data/doctor.dart
        linux/flutter/generated_plugin_registrant.cc
        linux/flutter/generated_plugins.cmake
        macos/Flutter/Flutter-Debug.xcconfig
        macos/Flutter/Flutter-Release.xcconfig
        macos/Flutter/GeneratedPluginRegistrant.swift
        pubspec.lock
        pubspec.yaml
        windows/flutter/generated_plugin_registrant.cc
        windows/flutter/generated_plugins.cmake
Please commit your changes or stash them before you merge.
Aborting
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   ios/Flutter/Debug.xcconfig
        modified:   ios/Flutter/Release.xcconfig
        modified:   lib/snapi_data/doctor.dart
        modified:   linux/flutter/generated_plugin_registrant.cc
        modified:   linux/flutter/generated_plugins.cmake
        modified:   macos/Flutter/Flutter-Debug.xcconfig
        modified:   macos/Flutter/Flutter-Release.xcconfig
        modified:   macos/Flutter/GeneratedPluginRegistrant.swift
        modified:   pubspec.lock
        modified:   pubspec.yaml
        modified:   windows/flutter/generated_plugin_registrant.cc
        modified:   windows/flutter/generated_plugins.cmake

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        .vscode/
        android/app/google-services.json
        android/app/src/main/kotlin/com/example/medicte_/
        ios/Podfile
        ios/Podfile.lock
        ios/Runner/Assets.xcassets/AppIcon.appiconset/100.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/1024.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/114.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/120.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/128.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/144.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/152.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/16.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/167.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/172.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/180.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/196.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/20.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/216.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/256.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/29.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/32.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/40.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/48.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/50.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/512.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/55.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/57.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/58.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/60.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/64.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/72.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/76.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/80.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/87.png
        ios/Runner/Assets.xcassets/AppIcon.appiconset/88.png
        lib/assets/
        lib/cards/
        lib/firebase_options.dart
        lib/images/102642-contact.json
        lib/images/81732-contact-us.json
        lib/images/96769-contac-mouse-web.json
        lib/images/Lovepik_com-401792159-medical-robot.png
        lib/images/address.png
        lib/images/alarm-alert-bell-notification-icon-89422.png
        lib/images/email.png
        lib/images/facebook.png
        lib/images/instagram.png
        lib/images/lf20_9gwslqtn.json
        lib/images/notification.png
        lib/images/telephone-call.png
        lib/images/twitter.png
        lib/pages/category_page.dart
        lib/pages/chat_ui.dart
        lib/pages/doctor_page.dart
        lib/pages/doctor_search_page.dart
        lib/pages/hospital_page.dart
        lib/pages/treatment_page.dart
        lib/snapi_data/hospital.dart
        lib/snapi_data/treatments.dart
        macos/Podfile

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;```
</code></pre>
","2","18150659","",""
"56864610","8170092","2019-07-03 07:01:24","0","2415","<git><github><recovery><git-stash>","How to recover the lost git file after git-stash pop","<p>I had 2 branches. I recently did <code>git stash</code> on first branch and then moved to different branch. I made few changes in the second branch. And i wanted to move to the first branch so I did <code>git stash</code> again in my second branch and moved to first branch. 
But after i did <code>git stash pop</code> it merged few files and i lost all my changes after the previous commit. The got the following message after git stash pop</p>

<p><code>git stash pop
 Auto-merging src/settings.jsx
 CONFLICT (content): Merge conflict in src/settings.jsx
 Auto-merging public/css/index.css</code></p>

<p>I expect to recover all the files that i lost after <code>git stash pop</code>
I'm new to git. Any help would be mch appreciated. Thanks in advance. </p>
","3","8170092","",""
"73663716","1072187","2022-09-09 14:30:05","2","452","<git><git-stash>","git pop failed with ""error: could not restore untracked files from stash""","<p>I have done about 2 months work locally against main branch (without committing or staging anything). This included adding new (untracked) files and modifying existing tracked files.</p>
<p>Then I wanted to check something on the main branch without my changes so did:</p>
<pre><code>git stash -all
</code></pre>
<p>Expecting it to stash both my tracked and untracked file changes.</p>
<p>I then did</p>
<pre><code>git stash pop
</code></pre>
<p>To get my changes back, and got thousands of errors:</p>
<pre><code>.project already exists, no checkout
all/.project already exists, no checkout
all/.settings/org.eclipse.wst.common.component already exists, no checkout
all/target/vault-work/META-INF/MANIFEST.MF already exists, no checkout
all/target/vault-work/META-INF/vault/config.xml already exists, no checkout
all/target/vault-work/META-INF/vault/filter.xml already exists, no checkout
all/target/vault-work/META-INF/vault/properties.xml already exists, no checkout
all/target/vault-work/META-INF/vault/settings.xml already exists, no checkout
core/.project already exists, no checkout
core/target/classes/META-INF/MANIFEST.MF already exists, no checkout
core/target/classes/OSGI-INF/com.xx.aem.core.filters.CorrelationLoggingFilter.xml already exists, no checkout
core/target/classes/OSGI-INF/com.xx.aem.core.filters.LinkHeaderFilter.xml already exists, no checkout
core/target/classes/OSGI-INF/com.xx.aem.core.filters.LoggingFilter.xml already exists, no checkout
</code></pre>
<p>and ending in:</p>
<pre><code>ui.content/target/vault-work/META-INF/vault/settings.xml already exists, no checkout
ui.frontend/.project already exists, no checkout
ui.tests/.project already exists, no checkout
error: could not restore untracked files from stash
The stash entry is kept in case you need it again.
</code></pre>
<p>Surprisingly, when looking at the state of the local code, it does seem to have created the new files.  But none of the changed files are there.  So the error says it could not restore untracked files, but it appears to have, but it has not recovered the changes I made to existing files.</p>
<p>Summary:</p>
<ol>
<li>I had changed files and new (untracked files) from main.</li>
<li>I did &quot;git stash -all&quot;</li>
<li>This got me back to main without my changes.</li>
<li>I then did &quot;git pop&quot;, expecting to be back to 1.</li>
<li>got thousands of errors for no apparent reason.</li>
<li>None of my changes to files are there.</li>
<li>My new, untrack files do see to be there, despite it saying it could not restore them.</li>
</ol>
<p>How do I get back all the changes I did to existing files?</p>
<p>Any help appreciated.</p>
<p>Note: I have recently noticed that git stash --all (which was recommended on a post in order to stash tracked and untracked files) may also (bizarrely) stash ignored files - this could be the crux of the problem.</p>
<p>If I do</p>
<pre><code>git stash show
</code></pre>
<p>I get</p>
<pre><code>bob@MacBook-Pro eyas-web % git stash show
 .../aem/core/filters/xx.java |  25 ++-
 .../models/xxx/response/x.java   |  18 --
 .../xx/aem/core/models/xx/Player.java         |  14 ++
 .../xx/aem/core/services/xx.java       |  31 +++
 .../services/impl/xx.java  |   2 +-
 .../core/services/impl/xx.java |   6 +
 .../aem/core/services/impl/xx.java   | 212 ++++++++++++++++++++-
 pom.xml                                            |  18 --
 8 files changed, 282 insertions(+), 44 deletions(-)
</code></pre>
<p>I need to figure out how to get the &quot;8 files changed&quot; back from the stash, along side the new untracked files which do seem to have been restored.</p>
<p>One idea might be to try to remove all the ignored files, then do git stash pop again.  However, looking at the man pages for &quot;git clean -xdf&quot;, it doesn't say if -x also removes the necessary git files as well as the ignored files we added (such as project config files).</p>
<p>Any ideas how to fix this?</p>
<p>I noticed this post: <a href=""https://stackoverflow.com/questions/835501/how-do-you-stash-an-untracked-file"">How do you stash an untracked file?</a></p>
<p>Which says: &quot;git stash -u Warning, doing this will permanently delete your files if you have any directory/ entries in your gitignore file.&quot;</p>
<p>This seems very bad, and may be related to my issue.</p>
","7","1072187","0","0"
"51782434","3766405","2018-08-10 08:41:53","2","117","<git><git-stash>","git stash - prevent a misspelled subcommand from executing","<p>In the <a href=""https://git-scm.com/docs/git-stash#git-stash-push-p--patch-k--no-keep-index-u--include-untracked-a--all-q--quiet-m--messageltmessagegt--ltpathspecgt82308203"" rel=""nofollow noreferrer""><code>git stash</code> documentation</a>, there is this paragraph:</p>

<blockquote>
  <p>For quickly making a snapshot, you can omit ""push"". <strong>In this mode, non-option arguments are not allowed to prevent a misspelled subcommand from making an unwanted stash entry</strong>. The two exceptions to this are stash -p which acts as alias for stash push -p and pathspecs, which are allowed after a double hyphen -- for disambiguation.</p>
</blockquote>

<p>What exactly does the highlighted sentence mean?
The only non-option arguments that I think can be used are <code>&lt;message&gt;</code> and <code>&lt;pathspec&gt;...</code>.</p>

<p>Does it mean that if one writes the command <code>git stash -m""message""</code>, git may think that the user misspelled the word <code>stash</code>, but it executes the command (<code>git stash push</code>) anyway?</p>

<p>Thank you.</p>
","2","3766405","",""
"57008108","11680838","2019-07-12 13:37:44","1","300","<git><git-stash>","What is the difference between git stash save and git stash store?","<p>Looking for an explanation based on their different use cases.</p>
","0","11680838","0","0"
"57253059","3258059","2019-07-29 11:37:29","3","250","<git><git-branch><gitignore><git-stash>","How to apply local changes to git repo after every pull from master without ever pushing to master","<p>My development setup is quite different to the other developers in the team - mac vs linux
- docker vs vagrant</p>

<p>Every time I pull a new branch I have to make a load of changes to config files and docker related files to get my dev environment functioning.</p>

<p>I need to avoid pushing these to my working branches as they can't be merged into master.</p>

<p>At the moment I am leaving these files off <code>git add</code> and then manually adding them back every time I switch branches and perform a pull.</p>

<p>The following SO question suggests I could <code>git stash</code> and then <code>git stash apply</code> <a href=""https://stackoverflow.com/questions/48273898/how-to-keep-the-git-local-changes-without-commit-and-apply-to-different-repos-af"">How to keep the git local changes without commit and apply to different repos after switch</a></p>

<p>I think that would work providing I keep my git stashes neat and the last one is restricted to my dev changes. I'm wondering if there is a better way to handle this workflow.</p>

<p>Can I save these changes in a dev-setup branch and use in a similar way to the stash method? </p>
","0","3258059","",""
"74145138","11986167","2022-10-20 19:07:56","0","35","<git><version-control><git-stash>","how to view git stashes without the need to reset?","<p>git newbie here: I have a list of stashes:</p>
<pre><code>aws-0292@procolharum MINGW64 ~/phuber/magic (master)
$ git stash list
stash@{0}: On master: 30 or 31
stash@{1}: On master: music
stash@{2}: On master: this party
</code></pre>
<p>I would like to see each stash, so I do:</p>
<pre><code>$ git stash apply stash@{0}
</code></pre>
<p>works great! I can see what stash#0; now I wish to move to stash#1, in order to do so I have to clear everything so I do:</p>
<pre><code>$ git reset --hard
</code></pre>
<p>and then</p>
<pre><code>$ git stash apply stash@{1}
</code></pre>
<p>I'm quite sure my process is somewhat wrong, is there a better way without the need of git reset?</p>
","0","11986167","",""
"74375589","20381158","2022-11-09 13:25:28","0","44","<git><github><version-control><github-actions><git-stash>","How to solve a git stash conflict","<p><a href=""https://i.stack.imgur.com/6RRkB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6RRkB.png"" alt=""enter image description here"" /></a></p>
<p>Hi guys I have the following issue.</p>
<ul>
<li>I performed a git stash first</li>
<li>Then a git pull</li>
<li>then sorted out the conflicts</li>
<li>Now I am trying to do a git stash pop so as to bring back the changes I made and add them to my project and I am getting the above messages for each of the stashed files</li>
</ul>
<p>Help, how do I proceed?</p>
<p>I have tried doing <code>git stash pop</code> to get the stashed files back</p>
","2","20381158","",""
"74479664","19751436","2022-11-17 17:26:18","0","48","<git><git-stash>","git stash -how to switch between uncommitted versions","<p><strong>[git newbie here]</strong></p>
<p>Say I'm working on a new file and I'm writing the following story:</p>
<pre><code>Version1: A guy walks into a bar
          [here I tell my story]
</code></pre>
<p>At this point I like what I wrote but I wish to make some changes, so I stash my changes like this:</p>
<pre><code>$git stash save -u 'version1: a guy walks'
</code></pre>
<p>I get the following message:</p>
<pre><code>Saved working directory and index state On dev_story: version1: a guy walks
</code></pre>
<p>Next, I make a change:</p>
<pre><code>Version2: A nice dude walks into a bar
          [here I tell a slighly different story]
</code></pre>
<p>and stash it again:</p>
<pre><code>$git stash save -u 'version2: a dude walks'
</code></pre>
<p>received message:</p>
<pre><code>Saved working directory and index state On dev_story: version2: a dude  walks
</code></pre>
<p>Checking my stash list I see:</p>
<pre><code>$ git stash list
stash@{0}: On dev_story: version2: a dude walks
stash@{1}: On dev_story: version1: a guy walks
</code></pre>
<p>I wish to show my work to a friend and debate version1 vs version2.</p>
<p>when I try to apply stash@{0} it doesn't show 'a guy walks...'
what I have tried:</p>
<pre><code>$ git stash show stash@{0}  //new line no error

$ git stash apply stash@{0} 

test/story.txt already exists, no checkout
error: could not restore untracked files from stash
</code></pre>
","3","19751436","",""
"74796143","3416648","2022-12-14 09:35:10","0","61","<git><atlassian-sourcetree><git-stash>","Stashed files reappearing in ""unstaged"" section of sourcetree (and in git status output)","<p>In Sourcetree (3.4.10) if I stash my current folder, the files that were modified pops back again in my &quot;unstaged&quot; area.</p>
<p>this even though I havn't selected the flag &quot;keep staged modifications&quot;.</p>
<p>git version is 2.37.0 on Windows10</p>
<p>Also if I</p>
<pre><code>$ git status  
Changes not staged for commit:
     modified: myfile.cpp
$ git stash  
$ git status  
Changes not staged for commit:
     modified: myfile.cpp
$ 
</code></pre>
<p>I find the list of modified files that in my ideas should have been stashed</p>
<p>EDIT:</p>
<p>also p4merge (called from sourcetree) says:</p>
<p><code>0 diffs (Recognize line endings and whitespaces differences), tab spacing: 4, encoding: UTF8, No BOM</code></p>
","5","3416648","",""
"75700598","21300087","2023-03-10 20:11:41","0","101","<git><git-stash>","How to git stash only the conflicting files in a git pull?","<p>I'm looking for a command(s) to <code>git stash</code> only the list of files that would be overwritten/conflicting when doing a <code>git pull</code>, all at once. I just want to accept all the remote changes and deal with all conflicts by stashing local.</p>
<p>I've only been discarding local changes that conflict or stashing all changes (I want to keep those that don't conflict), which isn't ideal.</p>
","8","21300087","",""
"41725917","599830","2017-01-18 17:35:46","2","2359","<git><interactive><git-rebase><git-stash><git-workflow>","Is it possible to git stash an interactive rebase in progress?","<p>I am currently rebasing origin/master onto a branch that was created from origin/master a while ago and the developer that worked on the branch is not available right now.</p>

<p>I have resolved some conflicts on the first commits of the feature branch but come to a point where I must wait for the developer to know how to finalize the rebase.</p>

<p>Is there a way to keep the conflict resolution I already did (~30 minutes) so that I can move on to another task?</p>
","0","599830","",""
"25871638","3763032","2014-09-16 14:36:20","0","400","<git><indexing><corrupt><git-stash>","git status shows Index corrupted, after git stash","<p>I already made my <a href=""https://stackoverflow.com/q/25867686/3763032"">post here</a>, but I still don't know is there any ways to recover back my <code>.git/index &amp; .git/HEAD</code></p>

<p>I had corrupted .git/index &amp; .git/HEAD, take a look at this <a href=""https://imgur.com/KdX0hid"" rel=""nofollow noreferrer"">image</a>.</p>

<p>Please, if you had experience this problem too, or any other solution to provides :) I'm just newbie for a git t(^_^)</p>

<p>Thank you for taking time, to see what's going on :)</p>
","0","3763032","",""
"7751555","993029","2011-10-13 08:46:55","683","523114","<git><git-stash>","How to resolve git stash conflict without commit?","<p>As <a href=""https://stackoverflow.com/q/7517124/11343"">asked in this question</a>, I also want to know how to resolve a conflicting <code>git stash pop</code> without adding all modifications to a commit (just like &quot;git stash pop&quot; without a conflict does).</p>
<p>My current approach is very uncool because I do it this way:</p>

<pre class=""lang-sh prettyprint-override""><code>git stash pop  # -&gt; CONFLICT
git stash drop
# [resolve conflict]
# [add conflict files]
git reset HEAD # &lt;all files that are in commit-mode&gt;
</code></pre>
<hr />
<p><strong>How to reproduce:</strong></p>
<pre class=""lang-sh prettyprint-override""><code>mkdir foo; cd foo; git init
echo &quot;1&quot; &gt; one
echo &quot;2&quot; &gt; two
git add -A; git commit -m &quot;first&quot;
echo &quot;1.1&quot; &gt; one
echo &quot;2.1&quot; &gt; two
git stash
echo &quot;2.2&quot; &gt; two
git commit -a -m &quot;second&quot;
echo &quot;Only this file would stay in HEAD without the conflict&quot; &gt; third
git add third
git stash pop
git status
</code></pre>
<p>2016-06-27: Added a new file called 'third' to the example to show that workarounds like the solution from scy only work for empty HEADs but don't fix the initial problem that the HEAD doesn't have the same content like for a <code>git stash pop</code> without a conflict.</p>
","5","993029","0","0"
"8309047","860421","2011-11-29 10:14:16","2","86","<git><git-stash>","what are possible ways of referring to a git stash?","<p>In</p>

<p><code>git stash show stash@{x}</code></p>

<p>what values can x take(apart from the whole numbers pointing to the serial number of the stash)?</p>
","0","860421","",""
"8307737","860421","2011-11-29 08:23:47","1","593","<git><git-stash>","How to access a stash(git) saved with `git stash save --patch name` ?","<p>I am able to <code>stash</code> a patch of changes
by doing <code>git stash save --patch name</code>
, which gets listed when I do <code>git stash list</code>.</p>

<p>Now how do I refer to this stash using the name?</p>
","0","860421","0","0"
"26186599","809217","2014-10-03 20:46:53","2","695","<git><memory><git-stash>","Do I need to delete my git stash?","<p>I have been using <code>git stash</code> to quickly discard all my changes on my local machine. At first I thought nothing of it but then I became concerned that it might start to fill up my hard drive on my machine, especially if I am stashing a lot of changes in many files.</p>

<p>Do stashes take up a lot of hard drive space on my local machine? Do I need to delete my git stash regularly?</p>
","1","809217","",""
"26190837","1355634","2014-10-04 07:54:55","26","10640","<git><git-stash>","How many / how long are stashes saved by git?","<p>I'm very new to git and have some question about stashing. If I've worked on a branch but was not able to get to a position where I can commit the branch, stashing is the right thing to use. My questions regarding stashing are:</p>

<ol>
<li>How many stashes are saved?</li>
<li>How long are these stashes saved?</li>
<li>Do they just temporarily save the work such that the changes are lost when you reboot your computer?</li>
</ol>

<p>If someone could quickly help clarifying these would be really appreciated.</p>
","3","1355634","0","0"
"27353480","4255488","2014-12-08 07:42:33","1","174","<git><git-stash>","How to git fetch by branch creator from stash","<p>when I use the command:</p>

<p><strong>git fetch</strong></p>

<p>I am getting all the branch created on the remote which are not on my local machine.</p>

<p><em>But I only want to fetch the remote branches that I created myself.</em></p>
","0","4255488","0","0"
"27368094","2565348","2014-12-08 22:22:48","3","163","<git><git-stash>","git stash restores some, but not all, changes","<p>While working on Branch A, a fire erupted in the office that required extinguishing. I did not yet want to commit my changes. I had added 2 new files, and altered 7. None of the changes were staged. I wanted to temporarily stash my changes, and used 'git stash -a'. What I'd really wanted was the -u switch, but erroneously used -a. My entire project was stashed and my branch was, as expected, restored to the last commit.</p>

<p>I switched to Branch B, did some work, and committed it.</p>

<p>I then switched back to Branch A, and called 'git stash pop'. Many repetitive lines scrolled by reading ""[filename] already exists, no checkout"", and then finalizing with the message ""Could not restore untracked files from stash"". Examination of my branch showed that the 2 untracked files HAD been restored, but the 7 altered ones had not. 'git status' shows 2 untracked files, and no other changes. Because I'd stashed the entire project, there are roughly 1500 files being compared, so I don't know what the result of the comparison with the 7 altered files shows... it scrolls off the buffer.</p>

<p>'git stash list' shows that there is still an entry in the stash:
""stash@{0}: WIP on Branch A: ffef125 [last commit message]""</p>

<p>'git stash show' does indeed show my 7 changed files in the stash, but when I 'git stash pop', those files are not restored, and the entry remains in the stash (which is not consistent with my expectations for pop)</p>

<p>I'd wondered if there'd been some kind of merge conflict with the 7 altered files, but there are no conflict resolution markers in any of them.</p>

<p>Why can I not restore my 7 altered files, and what's the workaround? And on a side note, why does git say that it could not restore the untracked files, when in fact those are the things that WERE restored?</p>
","9","2565348","",""
"27431440","1569930","2014-12-11 20:04:32","5","5297","<git><git-stash><git-reset>","Undo git reset --hard after git stash pop","<p>I had some changes in the stash that I attempted to recover using <code>git stash pop</code>. There were some merge conflicts, and rather than resolving them, I decided to just reset it. Unfortunately, in a moment of stupidity, I did a <code>git reset --hard</code>, and now all of the previously stashed changes are gone.</p>

<p>Is there any way to recover these changes? I've tried <code>git fsck --cache --no-reflogs --lost-found --unreachable  HEAD</code>, but none of the commit hashes listed refer to the changes I need. What else can I do? or did I just lose all of that work?</p>
","1","1569930","",""
"63892219","6206509","2020-09-14 21:46:53","1","227","<git><git-stash>","git stash pop : discard local changes in a single file","<p>On my-branch</p>
<pre><code> git stash
 git checkout master
 git pull --rebase
 git checkout my-branch
 git rebase master
 git stash pop
</code></pre>
<p>Everything is ok but only 1 file has conflicts and I do not want the changes that I stashed. There are bunch of other files which are not conflicting and those changes are needed.</p>
<pre><code>Unmerged paths:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)
  both modified:   /server/Server.java
</code></pre>
<p>How do I get rid of these changes and have a clean stash pop ?</p>
","0","6206509","",""
"63907322","11749004","2020-09-15 17:49:11","0","327","<git><git-stash>","I read about git-stash and don't understand what the `-index` does","<p>I read about <a href=""https://git-scm.com/docs/git-stash"" rel=""nofollow noreferrer"">git-stash</a> and dont understand what the <code>-index</code> does<br />
I understand what stash does, apply pop ans so on but this <code>-index</code> not</p>
<p>I read <a href=""https://stackoverflow.com/questions/48645729/whats-the-difference-between-git-stash-apply-and-git-stash-apply-index"">whats-the-difference-between-git-stash-apply-and-git-stash-apply-index</a> but don't understand it. Would someone draw a scenario?</p>
<blockquote>
<p>--index This option is only valid for pop and apply commands.</p>
<p>Tries to reinstate not only the working tree’s changes, but also the
index’s ones. However, this can fail, when you have conflicts (which
are stored in the index, where you therefore can no longer apply the
changes as they were originally).</p>
</blockquote>
","4","11749004","",""
"45944129","3666903","2017-08-29 16:30:40","0","739","<git><git-submodules><git-stash>","Apply git stash pop to new submodule","<p>I worked on two tasks at the same time : writing some code and make a folder of my working tree a submodule. When I switched task, I simply <code>git stash save</code> my modified files. The problem is that my modified files are now part of the new submodule.</p>

<p>And when I try to do a <code>git stash pop</code> on the top folder, I got a lot of conflicts</p>

<pre><code>$ git stash pop
error: refusing to lose untracked file at 'folder/file1'
error: refusing to lose untracked file at 'folder/file2'
[and so on]

CONFLICT (modify/delete): [folder]/file1 deleted in Updated upstream and modified in Stashed changes. Version Stashed changes of [folder]/file1 left in tree. 
CONFLICT (modify/delete): [folder]/file2 deleted in Updated upstream and modified in Stashed changes. Version Stashed changes of [folder]/file2 left in tree. 
[and so on]
CONFLICT (file/directory): There is a directory with name [folder] in Stashed changes. Adding [folder] as [folder]~Updated upstream
</code></pre>

<p>Where [folder] is the previous folder/new submodule</p>

<p>I did a clean clone of the complete repo and the there is no problem with the new submodule.</p>

<p>Is there a way to transfer the stash to the submodule? Or to get the files in the stash and merge them manually in the submodule?</p>
","1","3666903","",""
"64450033","875915","2020-10-20 17:03:51","0","1394","<git><git-stash><git-merge-conflict>","Why does ""git stash push"" cause ""Unmerged paths: ... both modified: ...""?","<p>Q1: How can I reproduce this scenario? (I unsuccessfully tried to reproduce it)</p>
<p>Q2: What does this <code>Unmerged paths:... both modified:...</code> state mean?</p>
<hr />
<p>I did a <code>git stash</code> (push) and got into an <code>Unmerged paths: ... both modified: ...</code> state, and I don't know why / what it means.</p>
<hr />
<p>My steps:</p>
<ol>
<li>modified a single file</li>
<li>(I may have done a <code>git add -p</code>, and then might have modified the working tree copy (I don't remember))</li>
<li>$ <code>git stash -m 'my message'</code></li>
<li>$ <code>git status</code></li>
</ol>
<pre><code>Unmerged paths:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)
    both modified:   questions/templates/flashcard.html

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
","2","875915","0","0"
"9987759","860421","2012-04-03 05:50:12","16","4457","<git><git-stash>","Undo git stash pop on dirty working tree","<p>This seems very foolish mistake, I just did a <code>git stash pop</code> on a dirty working tree. I do not know any way of keeping the desired changes and undoing the <code>stash pop</code>. Does one exist? Or such a mistake is unforgivable?</p>
","0","860421","0","0"
"28635989","758446","2015-02-20 18:41:50","23","4577","<git><git-stash>","What is the purpose of git stash create and git stash store?","<p>From the documentation at <a href=""http://git-scm.com/docs/git-stash"" rel=""noreferrer"">git-scm</a>, there are two git stash commands that mention relevance to scripting, but not general use:</p>

<blockquote>
  <p><strong>create</strong></p>
  
  <p>Create a stash (which is a regular commit object) and return its object name, without storing it anywhere in the ref namespace. This is intended to be useful for scripts. It is probably not the command you want to use; see ""save"" above.</p>
  
  <p><strong>store</strong></p>
  
  <p>Store a given stash created via git stash create (which is a dangling merge commit) in the stash ref, updating the stash reflog. This is intended to be useful for scripts. It is probably not the command you want to use; see ""save"" above.</p>
</blockquote>

<p>Supposing that we are considering the context of automated scripts, what advantages do <code>git stash create</code> and <code>git stash store</code> give me over the usual <code>git stash save</code> and friends? </p>
","2","758446","0","0"
"11533252","1059070","2012-07-18 01:52:43","1","440","<git><git-stash>","How to add an unreachable git commit to stash by its hash","<p>I have the hashes of a large number of unreachable commits (silly me trying to <code>clear</code> the console while I had <code>git stash</code> typed in)</p>

<p>I've got a bunch of these hashes from a bit of messing around with git fsck</p>

<p>Is there any easy way to <code>xargs</code> these hashes back into the git stash?</p>
","2","1059070","",""
"66147338","14039503","2021-02-11 00:57:06","0","754","<git><git-stash><git-filter-branch>","git filter-branch: Cannot rewrite branches: You have unstaged changes","<p>I run this command</p>
<pre><code>git filter-branch -f --tree-filter &quot;echo AAAAAAA&quot; --prune-empty --tag-name-filter cat -- --all
</code></pre>
<p>And get the following error</p>
<pre><code>Proceeding with filter-branch...

Cannot rewrite branches: You have unstaged changes.
</code></pre>
<p>Previously, I ran</p>
<pre><code>git stash
git stash drop
</code></pre>
<p>running</p>
<pre><code>git status
</code></pre>
<p>shows me</p>
<pre><code>Refresh index: 100% (107206/107206), done.
On branch master

It took 8.70 seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
nothing to commit, working tree clean
</code></pre>
<p>What else is git expecting me to do?</p>
<hr />
<p><strong>Update: trying git status</strong></p>
<p>steps:</p>
<p>command:</p>
<pre><code>git stash 
</code></pre>
<p>output</p>
<pre><code>No local changes to save
</code></pre>
<p>command:</p>
<pre><code>git stash drop
</code></pre>
<p>output</p>
<pre><code>No stash entries found.
</code></pre>
<p>command:</p>
<pre><code>git status
</code></pre>
<p>output</p>
<pre><code>Refresh index: 100% (107206/107206), done.
On branch master
It took 8.39 seconds to enumerate untracked files. 'status -uno'

may speed it up, but you have to be careful not to forget to add

new files yourself (see 'git help status').

nothing to commit, working tree clean
</code></pre>
<p>command:</p>
<pre><code>git filter-branch -f --tree-filter &quot;echo AAAAAAA&quot; --prune-empty --tag-name-filter cat -- --all
</code></pre>
<p>output</p>
<pre><code>WARNING: git-filter-branch has a glut of gotchas generating mangled history

     rewrites.  Hit Ctrl-C before proceeding to abort, then use an

     alternative filtering tool such as 'git filter-repo'

     (https://github.com/newren/git-filter-repo/) instead.  See the

     filter-branch manual page for more details; to squelch this warning,

     set FILTER_BRANCH_SQUELCH_WARNING=1.

Proceeding with filter-branch...
Cannot rewrite branches: You have unstaged changes.
</code></pre>
","7","14039503","",""
"11579607","1540753","2012-07-20 12:41:40","2","154","<git><git-stash>","""git stash save -u"" is not removing some directories","<p>here's my situation:<br>
Say I work on branch b1. I write a file dir/f1. <br>
Then I want integrate code of dir/f1 in dir/f2, and I no longer need f1. <br>
For random reason I want to keep f1.<br>
I removed it from version control, but it is still here, untracked.<br>
If I switch to branch b2, f1 has compile errors, since it has not been kept in sync with b2.<br>
So, I decided to git stash -u in b1 before switching so I can get my context back when I'm done working on b2.<br>
It works almost as expected: working dir is cleaned up, everything (tracked and untracked files, but not ignored files since I didn't use -a) is stashed, and I can git stash apply them back.<br>
The only problem is some files are removed from working dir, but others are not. 
The message is:</p>

<pre><code>Not removing dir/f1
</code></pre>

<p>So my question is: what can be the reason for such a behavior? How does git decide which files are to be removed during a stash and which are not?<br><br>
Thanks</p>
","1","1540753","",""
"11680453","1036728","2012-07-27 01:55:20","4","1704","<git><git-stash>","git stash: where did the files in my directory go?","<p>I have a bad feeling my work is lost.  Is there a way to possibly get them back?</p>

<p>Here's a gist of what I did:</p>

<pre><code># Initially
$ git init -q
$ echo foo &gt;foo
$ git add foo
$ git commit -m initial
[master (root-commit) 399ac4f] initial
 1 file changed, 1 insertion(+)
 create mode 100644 foo

# Work work work
$ rm foo
$ mkdir foo &amp;&amp; echo bar &gt;foo/bar

# This is where things went bad
$ git stash
Saved working directory and index state WIP on master: 399ac4f initial
HEAD is now at 399ac4f initial
$ git stash pop
Removing foo
# On branch master
# ...
no changes added to commit (use ""git add"" and/or ""git commit -a"")
Dropped refs/stash@{0} (c8353a2223b73ceb9aa73fac64829919b68c86e9)

# What happened to my work!?
$ find foo
find: foo: No such file or directory

$ git --version
git version 1.7.11.3
</code></pre>

<p>Unfortulately, I don't think <code>foo/bar</code> ever saw the repository/index, as I hadn't run any <code>git</code> commands on it prior to this.</p>
","0","1036728","",""
"26671394","3086861","2014-10-31 09:34:34","2","625","<git><git-stash><git-revert>","Wrongly applied git stash to a different branch","<p>I was initially working on a branch, say A and stashed some of the changes in that branch using <code>git stash save &lt;message&gt;</code>. Upon completion of my work in that branch, I switched to a different branch B, and then wrongly typed <code>git stash apply</code> thinking I was on branch A, which resulted in conflicts in couple of files on branch B.</p>

<p>I tried doing <code>git checkout</code> and <code>git reset HEAD</code> on those files, but it says the files are unmerged and I am unable to bring my branch back to the original state.</p>

<p>Is there any way I could bring my branch B to original state or revert the stash I applied to branch B wrongly?</p>

<p>UPDATE : As per the latest answer, running git reset HEAD and then git checkout --  does fix the issue. But it might be time consuming if there are several files in the list as in my case, is there a better way to reverse all these changes in just one attempt?</p>
","0","3086861","",""
"26758539","1404348","2014-11-05 13:34:45","0","1086","<git><git-stash><git-merge-conflict>","git stash apply conflict after rebasing and amending a commit","<p>I stashed my changes to rebase and amend a commit.</p>

<p>After rebasing, I deleted a file, staged it and the ran <code>commit --amend</code></p>

<p>Unfortunately the file in question had been modified when I stashed the work.</p>

<p>Now after <code>rebase --continue</code> I can't <code>stash apply</code> because it has conflicts.</p>

<pre><code>deleted in updated upstream and modified in stashed changes
</code></pre>

<p>How should I fix it?</p>
","1","1404348","",""
"26788179","795398","2014-11-06 19:50:45","2","3202","<git><git-checkout><git-stash>","Using git stash, checkout previous commit, and going back","<p>I wanted to go back to a commit to see how things were at that moment, so I did</p>

<pre><code>git stash
</code></pre>

<p>... to save my changes then I used</p>

<pre><code>git checkout &lt;hash&gt;
</code></pre>

<p>When done with my exploration, I just wanted to go back where I was and I used</p>

<pre><code>git stash apply
</code></pre>

<p>Now files are messed up and I can't see further commits when using <code>git log</code></p>

<p>What's going on? How do I get back to where I was?</p>

<p><strong>EDIT</strong></p>

<p>Tried to do a <code>git checkout master</code> but had some conflicts (a <code>README.md</code>, marking ""deleted by US"")</p>

<p>So I added it, stashed my changes, used <code>git checkout master</code> and then applied the stash.</p>

<p>Fixed the <code>README.md</code> conflict and everythings's fine.</p>

<p>GIT hurts my brain.</p>
","3","795398","",""
"9009354","1169984","2012-01-25 19:56:17","34","17757","<git><merge><git-merge><git-stash><merge-conflict-resolution>","`git stash` during a merge conflict","<p>We've done something bad.</p>

<p>We ran <code>git stash save</code> during a merge conflict, and now we can't restore our work.</p>

<p>Things we've tried:</p>

<pre><code>git pull -Xours origin master
git stash apply --index
</code></pre>

<p>And:</p>

<pre><code> git pull origin master
 git stash save --keep-index ""merge conflicts""
 git stash apply stash@{1}
</code></pre>

<p>Please help!</p>
","6","1169984","0","0"
"19981419","2992617","2013-11-14 15:18:27","4","2203","<git><gitignore><git-stash>","git stash restores ignored files","<p>I committed in the past some wrong files to git. After that I excluded and ignored these files:</p>

<pre><code>git rm --cached -r config.php
git reset config.php
echo ""config.php"" &gt;&gt; .gitignore
git update-index --assume-unchanged config.php
</code></pre>

<p>Now git commit works great. Changes in config.php are not committed.</p>

<p>But: If I stash the working directory for example to switch the branch, than config.php is restored from the local repos.</p>

<p>How can I use <code>git stash</code> without changing ignored (and from index excluded) files?</p>
","2","2992617","",""
"20055398","1790491","2013-11-18 18:46:50","57","36608","<git><bash><git-stash>","Is it possible to get commit logs/messages of a remote git repo without git clone","<p>Is it possible to get commit logs/messages of a remote git repo without git clone?</p>

<p>The git repo I am working with is huge, even if I run git clone with --depth=1 still takes sometime before I am able to clone it. </p>

<p>I am looking for something like this, </p>

<p>git remote-log .</p>

<p>I have also looked in to git -ls-remote, which only provides the SHA and the Heads/tags. I am interested in getting the last 2 commit title, commit user and commit SHA?</p>

<p>Anyone know how to do that?</p>
","1","1790491","0","0"
"1105253","26630","2009-07-09 17:12:11","1088","384081","<git><git-stash>","How would I extract a single file (or changes to a file) from a git stash?","<p>Is it possible to extract a single file or diff of a file from a git stash without popping the stash changeset off?</p>
","0","26630","0","0"
"20326480","158483","2013-12-02 10:52:39","9","1101","<git><git-stash>","Can I have ""git stash"" to automatically include untracked files by default?","<p>Well, as the title says, is there an option I can set in git, that will make it automatically include untracked files when I execute <code>git stash</code>, so I don't have to remember the <code>-u</code> option.</p>

<p>Alternately, after I created a stash, and I discover that I forgot to include untracked files, can I amend those to the stash?</p>
","2","158483","0","0"
"20479794","156767","2013-12-09 20:13:09","28","11420","<git><githooks><git-stash>","How do I properly git stash/pop in pre-commit hooks to get a clean working tree for tests?","<p>I'm trying to do a pre-commit hook with a bare run of unit tests and I want to make sure my working directory is clean.  Compiling takes a long time so I want to take advantage of reusing compiled binaries whenever possible.  My script follows examples I've seen online:</p>

<pre><code># Stash changes
git stash -q --keep-index

# Run tests
...

# Restore changes
git stash pop -q
</code></pre>

<p>This causes problems though.  Here's the repro:</p>

<ol>
<li>Add <code>// Step 1</code> to <code>a.java</code></li>
<li><code>git add .</code></li>
<li>Add <code>// Step 2</code> to <code>a.java</code></li>
<li><code>git commit</code>
<ol>
<li><code>git stash -q --keep-index</code> # Stash changes</li>
<li>Run tests</li>
<li><code>git stash pop -q</code> # Restore changes</li>
</ol></li>
</ol>

<p>At this point I hit the problem.  The <code>git stash pop -q</code> apparently has a conflict and in <code>a.java</code> I have</p>

<pre><code>// Step 1
&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream
=======
// Step 2
&gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes
</code></pre>

<p>Is there a way to get this to pop cleanly?</p>
","0","156767","0","0"
"20537223","1836143","2013-12-12 07:15:04","238","169267","<git><git-stash>","What is the intended use-case for git stash?","<p>If I work on branch A and suddenly need to work on branch B before being ready with a commit on branch A, I stash my changes on A, checkout B, do my work there, then checkout A and apply the stash.</p>
<p>If I work on A and I want to stop working for the day, should I stash my work and then apply it the next day (when I resume my work), or should I just leave things as they are—uncommitted modified files in the working directory? I don't see why I would need to use stash in this case, except if there is some security benefit.</p>
<p>Also, another scenario: I work both at work and at home. If I am not ready with a commit when I want to go home, can I stash my work, push it to GitHub and then pull that stash at home?</p>
","2","1836143","0","0"
"20607502","3053011","2013-12-16 09:37:32","-1","811","<git><git-pull><git-stash>","git pull replaces existing code","<p>After I committed files in Git, I made a <code>pull</code> request but it stops some of my code functionality. I want to go to the previous stage, before I committed my files, the state previous to this pull request. </p>

<p>I found <code>git stash</code> is an option to go to previous stage. But there are many options given with it like</p>

<pre><code>git --rebase
git stash
git stash pop
</code></pre>

<p>Other commands I've tried include:</p>

<pre><code>git status
git commit file1 file2 file3 -m ""message""
git commit -i file1 file2 file3 ""message""
git pull
git checkout 
</code></pre>

<p>Which commands do I need to use to go to the stage before pull?</p>
","1","3053011","",""
"58564611","7905775","2019-10-25 19:26:58","5","1507","<git><git-stash><git-untracked>","Lost tracked files when doing git stash --include-untracked","<p>when I did <code>git status</code>, there are both tracked and untracked files. Early the day, I just learned that <code>git stash --include-untracked</code> would stash the untracked files. It worked for me at that time. So I thought <code>git stash --include-untracked</code> would save both tracked and untracked files' change. But when I <code>git stash apply</code>, there is only untracked files' change left. The tracked files' change are lost.</p>
","2","7905775","0","0"
"21048897","948542","2014-01-10 16:04:45","1","807","<git><git-stash><git-checkout>","git - stash and add don't see any changes but checkout does and fails","<p>I have a very weird case for y'all.</p>

<p>git can't add my changes, complaining that no changes exist. But a checkout fails since git does see local changes that would be overwritten.</p>

<pre><code>modify tracked file foo.sh in topic branch

$git add -p foo.sh
No changes.

$git checkout master
error: Your local changes to the following files would be overwritten by checkout:
        foo.sh
Please, commit your changes or stash them before you can switch branches.
Aborting

$git stash
No local changes to save
</code></pre>

<p>(file and branch names changed for clarity)</p>

<p>I don't have any gitignore files. My repository resides on a network mounted volume. Could this be an issue?</p>
","4","948542","",""
"2213235","267730","2010-02-06 13:28:54","69","51957","<git><git-rebase><git-pull><git-stash><git-revert>","Undoing a git pull --rebase","<p>Hey I'm new to git and I need to undo a pull, can anyone help?!? So what I've done is...</p>

<ol>
<li>git commit</li>
<li>git stash</li>
<li>git pull --rebase</li>
<li>git stash pop</li>
</ol>

<p>this created a bunch of conflicts and went a bit wrong. Now doing 'git stash list' reveals that my stash is still there. Is it possible to revert my repo back to the point just after doing git commit. So effectively my repo only contains only changes I have made and nothing new from the server?</p>
","0","267730","0","0"
"21308438","698154","2014-01-23 12:40:22","4","102","<git><git-stash>","prevent git stash from working with non-managed files?","<p>I wonder how I can get git stash <em>not</em> work with non-managed files?</p>

<p>I repeatedly got into issues where I just 'stash' some changes, only to find that I can't pop / apply the stash, because stash finds conflicts with files that are not managed by git anyway. the errors are like:</p>

<pre><code>bin/classes.dex already exists, no checkout
</code></pre>

<p>interestingly, when I look at the contents of the stash with</p>

<pre><code>git stash show stash@{1}
</code></pre>

<p>these files aren't even listed in the stash.</p>

<p>how do I prevent stash from putting these un-managed files in the stash in the first place?</p>

<p>if this has already happened, how do I make stash only apply files which are managed by git? (these would be the very same files that are listed with git stash show)</p>
","6","698154","",""
"40406063","122687","2016-11-03 15:56:43","0","252","<git><git-stash>","`git stash apply` deleted a random dir from my working copy","<p>I just tried <code>git stash save</code> for the first time. It worked fine. Then I tried <code>git stash apply</code> and while my uncommitted changes were restored, another effect was that a random dir from the root of my working copy was deleted. I don't know why it chose that exact dir, there's lots of other dirs like it in the root.</p>

<p><code>git stash save</code> output:</p>

<pre><code>Saved working directory and index state WIP on clipping: cfeac4b - applying the solution from http://stackoverflow.com/questions/40385482/why-cant-i-use-opengl-es-3-0-in-qt
HEAD is now at cfeac4b - applying the solution from http://stackoverflow.com/questions/40385482/why-cant-i-use-opengl-es-3-0-in-qt
</code></pre>

<p>Shortened <code>git stash apply</code> output:</p>

<pre><code>Removing debug_stencil_not_working/textureandlight.js
Removing debug_stencil_not_working/qtlogo.png
[... more removes here ...]
On branch clipping
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        new file:   documentation/textureSize_missing.txt

Changes not staged for commit:
  (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        deleted:    ../debug_stencil_not_working/qtlogo.png
        deleted:    ../debug_stencil_not_working/textureandlight.js
        [... more deleted files here ...]
        modified:   main.cpp
        modified:   main.qml
        [... more modified files here ...]

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        ../dbg_repeater/dbg_repeater.pro.user
        debug_stencil_not_working/
        [... more files and dirs here ...]
</code></pre>

<p><strong>Note:</strong> The dir that got deleted was a committed and pushed dir. It had no uncommitted local changes.</p>

<p><strong>Any idea why this random dir got deleted?</strong></p>

<p><strong>Also, how to restore this dir?</strong> When I browse to the root in the github web interface, it's there. But I tried <code>git pull origin clipping</code> and it didn't pull that dir back into the my working copy.</p>

<p><strong>Edit:</strong> I figured out how to restore it. In the TortoiseGit context menu I selected ""Diff"", and in the list the deleted files were listed as ""missing"". I selected them all, right clicked them, and selected ""revert"". Still don't know why the dir got deleted in the first place.</p>
","5","122687","",""
"813822","99189","2009-05-02 00:33:38","56","42654","<git><git-merge><git-stash>","How to make git merge handle uncommitted changes to my working tree?","<p>A co-worker and I are both working on the master branch at the moment.  I have some code in my working tree that I don't want to commit (debugging statements and the like).  Now if he commits changes to some of those same files, I can't merge them:</p>

<pre><code>$ git merge origin/master
Updating 1b8c5c6..eb44c23
error: Entry 'blah.java' not uptodate. Cannot merge.
</code></pre>

<p>Coming from a subversion background, I'm used to having my working tree automatically merged when I pull changes from the repository and if there are conflicts, I resolve them manually.</p>

<p>The quickest way I have found to do this in git is:</p>

<pre><code>$ git stash
$ git merge origin/master
$ git stash pop
</code></pre>

<p>Essentially, removing my uncommitted changes, doing the merge and then re-applying the changes.  How can I tell merge to automatically merge my working tree with the changes I'm trying to pull in?</p>
","5","99189","0","0"
"58072744","1433268","2019-09-24 03:36:38","1","3104","<git><git-stash>","How to exclude files from git commit?","<p>I am working with a bunch of files but would not like to commit some of them.</p>

<p>Rather than commit each file individually is there a way I can exclude the files I do not want to commit?</p>

<p>From reading similar questions on SO, I've tried various instances of <code>git stash</code> but have not been able to get them to work, eg:</p>

<pre><code>git stash file.ext
git stash -- file.ext
git stash push ""file.ext""
git stash push -- file.ext
</code></pre>

<p>Would anyone know how I could do this?</p>
","0","1433268","0","0"
"58410321","785535","2019-10-16 09:42:28","0","279","<git><powershell><git-stash>","How to see git stash modification when it was done by git stash push filename","<p>I stash few files earlier by git stash push file_path. Now I can see them as list as by 
git stash list</p>

<pre><code>stash@{0}: WIP on web_09_11: a6c038e7 Merged PR 25503: Get latst commites
stash@{1}: WIP on web_09_11: a6c038e7 Merged PR 25503: Get latst commites
stash@{2}: WIP on web_09_11: a6c038e7 Merged PR 25503: Get latst commites
stash@{3}: WIP on web_09_11: a6c038e7 Merged PR 25503: Get latst commites
</code></pre>

<p>I want to see the content of each stash. I found that it should show if I try </p>

<blockquote>
  <p>git stash show stash@{1}</p>
  
  <p>But it gives me error as:<br>
  fatal: ambiguous argument 'stash@': unknown
  revision or path not in the working tree. Use '--' to separate paths
  from revisions, like this:</p>
  
  <p>Or Too many revisions specified: 'stash@' 'MQA=' 'xml' 'text'</p>
</blockquote>

<p>how can I see it? </p>
","2","785535","",""
"20681448","747050","2013-12-19 12:09:45","3","386","<git><git-stash>","Why does ""git stash pop"" right after ""git stash --keep-index"" result in conflicts?","<p>I did:</p>
<pre><code>$ git stash --keep-index
$ git stash pop
</code></pre>
<p>and Git asks me to solve conflicts.</p>
<p>Do I do something wrong? How can I stash unstaged files (test the programm) and then return everything back (so I've got all staged files untouched and unstaged files are back and are unstaged)?</p>
","2","747050","0","0"
"40424928","3150057","2016-11-04 14:16:35","18","2911","<git><branch><git-checkout><git-stash><git-reflog>","Is there a way to output the previous git branch name?","<p>This answer tells how to checkout to the previous branch, and helpfully explains <code>@{-1}</code>: <a href=""https://stackoverflow.com/a/7207542/3150057"">https://stackoverflow.com/a/7207542/3150057</a></p>

<p>The previous branch is important if I stashed some code before changing branch, and am now thinking about working on the stash.</p>

<p>Is there a way to quickly see the name of the previous branch without searching <code>git reflog show</code> for the latest <code>checkout: moving from foo to bar</code> entry?</p>

<hr>

<p>More info:</p>

<p>This is a solution to my forgetfulness of my previous working context, which usually happens after coming back from lunch.</p>

<p><code>git rev-parse @{-1}</code> shows the HEAD commit of the branch that would be checked-out by <code>git checkout -</code> but not the branch name.</p>

<p><code>git branch --contains @{-1}</code> will list every branch with that commit.</p>

<p>Listing the branch(es) with that commit as HEAD would be helpful, as it could help remind me of my previous working context, but I'm not sure how to do that.</p>
","0","3150057","0","0"
"19937580","319618","2013-11-12 18:55:03","96","51862","<git><git-stash>","Can't pop git stash, 'Your local changes to the following files would be overwritten by merge'","<p>So I had a load of changes and some untracked files. I needed to tweak something, so I used <code>git stash -u</code>, modified a couple of things, committed those changes, pushed them, and then tried to <code>git stash pop</code>.</p>

<p>Because I'd modified a couple of files that I'd stashed, I got the following message:</p>

<pre><code>error: Your local changes to the following files would be overwritten by merge:
    file_1.py
    file_2.py
Please, commit your changes or stash them before you can merge.
Aborting
</code></pre>

<p>This seems odd, I had committed all new changes, my checkout was clean when I ran the command.</p>

<p>It seems the <code>git stash pop</code> operation un-stashed half of my changes and the untracked files, but if I try and <code>git stash pop</code> again I get output like:</p>

<pre><code>some_file.html already exists, no checkout
some_other_file.html already exists, no checkout
yet_another_file.html already exists, no checkout
Could not restore untracked files from stash
</code></pre>

<p><code>git stash show</code> still shows a list of my stashed changes, but I'm at a loss as to what I do now.</p>

<p>How can I get myself unstuck?</p>
","2","319618","0","0"
"19969233","1533046","2013-11-14 03:52:40","4","4799","<git><git-stash>","How do I 'git stash' changes for multiple commits?","<p>I have five files that have been changed: 1-3 need to be in a single commit, while 4 and 5 need to be different commits entirely, so I need 3 separate commits in all. How do I use <code>git stash</code> to accomplish the following:</p>

<pre><code>commit1:
  file1
  file2
  file3
commit2:
  file4
commit3:
  file5
</code></pre>

<p>without losing any of my changes? Thanks!</p>
","1","1533046","",""
"39174691","4736012","2016-08-26 21:13:04","4","234","<git><git-stash>","Alias: `git pop last`, for `git stash pop [last stash on the list]`","<p>Is this even possible? I want an easier command to <code>git stash pop stash@{13}</code> where <code>stash@{13}</code> would simply be <code>last</code> meaning ""the last stash on the list"" or ""the oldest stash"".</p>

<p>I know I can create an alias of <code>git pop</code> for <code>git stash pop</code> (which I could use like <code>git pop stash@{13}</code>), but I'd like something simpler like <code>git pop last</code>. Would I need to write my own script or is there a way to do it just with git or alias? I use Windows primarily but sometimes Linux.</p>
","3","4736012","0","0"
"66401232","5587393","2021-02-27 16:58:58","3","1135","<git><git-rebase><git-stash><git-fsck><git-dangling>","git fsck combining --lost-found and --unreachable","<p>I found many interesting posts about <code>git fsck</code>, so I wanted to experiment a little on them. First of all the sources I read before this question:</p>
<ul>
<li><p><a href=""https://stackoverflow.com/questions/31388918/how-can-i-find-an-unreachable-commit-hash-in-a-git-repository-by-keywords"">How can I find an unreachable commit hash in a GIT repository by keywords?</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/questions/36621730/git-fsck-how-dangling-vs-unreachable-vs-lost-found-differ"">git fsck: how --dangling vs. --unreachable vs. --lost-found differ?</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/questions/4786972/get-a-list-of-all-git-commits-including-the-lost-ones"">Get a list of all git commits, including the 'lost' ones</a></p>
</li>
</ul>
<p>I started with this repo:</p>
<pre><code>* 9c7d1ea (HEAD -&gt; test) f
* cd28884 e
| * 7b7bac0 (master) d
| * cab074f c
|/  
* d35af2c b
| * f907f39 r # unreferenced commit
|/
* 81d6675 a
</code></pre>
<p>Where <code>r</code> has been created from a detached <code>HEAD</code> from <code>a</code>.
Then I wanted to rebase <code>master</code> on <code>test</code>, but I had some unstaged changes, so I did:</p>
<pre><code>git rebase --autostash test
</code></pre>
<p>Obtaining (I am not showing <code>r</code> but it is still there):</p>
<pre><code>* caee68c (HEAD -&gt; master) d
* 2e1cb7d c
* 9c7d1ea (test) f
* cd28884 e
* d35af2c b
* 81d6675 a
</code></pre>
<p>Next I run:</p>
<pre><code>$ git fsck
#...
dangling commit 6387b70fe14f1ecb90e650faba5270128694613d # stash
#...
</code></pre>
<pre><code>$ git fsck --unreachable
#...
unreachable commit 6387b70fe14f1ecb90e650faba5270128694613d # stash
unreachable commit d8bb677ce0f6602f4ccad46123ee50f2bf6b5819 # stash index
#...
</code></pre>
<pre><code>$ git fsck --lost-found
#...
dangling commit 6387b70fe14f1ecb90e650faba5270128694613d # stash
dangling commit f907f39d41763accf6d64f4c736642c0120d5ae2 # r
#...
</code></pre>
<h2>First question</h2>
<p>Why does only the <code>--lost-found</code> version return the <code>r</code> commit? And why are not the <code>c</code> and <code>d</code> before the <code>rebase</code> shown among the unreachables? I thought I understood the difference reading the linked questions, but I am clearly missing something. I still have the complete reflog, but I guess you do not need it, since all commits (except those related to the <code>stash</code>) are referenced.</p>
<hr />
<p>I know I should create another post but the second question is partially related. I tried out of curiosity:</p>
<pre><code>$ git fsck --lost-found --unreachable
#...
unreachable commit 6387b70fe14f1ecb90e650faba5270128694613d # stash
unreachable commit d8bb677ce0f6602f4ccad46123ee50f2bf6b5819 # stash index
unreachable commit f907f39d41763accf6d64f4c736642c0120d5ae2 # r
unreachable commit 7b7bac0608936a0bcc29267f68091de3466de1cf # c before rebase
unreachable commit cab074f2c9d63919c3fa59a2dd63ec874b0f0891 # d before rebase
#...
</code></pre>
<h2>Second question</h2>
<p>Combining both options I get all the unreachable commits (and not just the union of <code>--lost-found</code> and <code>--unreachable</code>), this is very unexpected. Why does it behave like this?</p>
","0","5587393","0","0"
"13088513","1105094","2012-10-26 14:08:12","3","404","<git><git-stash>","git stash list or git show , returning ( most +s +'/---': 1: most: not found ) What is this?","<p>Not sure if I need to upgrade git or I have something configured or broken?</p>

<p>I can push, pull, tag everything else just cannot seem to list stashes and stuff. I can't seem to locate this Error if it is one ( <strong>git stash list</strong> or <strong>git show</strong> return console output: "" <strong>most +s +'/---': 1: most: not found</strong> "" ) when googling it.</p>

<p>I can actually stash and pop items. Using git version: 1.7.5.4</p>
","0","1105094","",""
"39191073","47281","2016-08-28 12:03:37","4","1582","<git><git-stash>","View git stash using visual tool","<p>We configure our diff visual tool using <code>diff.tool=xxx</code> and then running <code>git difftool</code> to see a visual diff.   <a href=""https://stackoverflow.com/questions/10725729/git-see-whats-in-a-stash-without-applying-stash"">You can see</a> a stash using <code>git stash show</code> - but how can you see the stash visually like you can with diff?</p>
","0","47281","0","0"
"39409030","1319392","2016-09-09 10:07:00","0","46","<maven><tomcat><tomcat7><git-stash>","Apache tomcat doesn't recognize git stashed and later git stash applied changes","<p>I had a repository with code that I was testing via running a server at localhost. The standard procedure was to start Apache-Tomcat-7, re-build the project using Maven and deploy it. </p>

<p>After a while of coding I decided to <code>git stash</code> current changes, then built and deployed the old version, it ran correctly in all browsers. After that I called <code>git stash apply</code>and once again built and deployed the created .war file. However, despite the correct version of code both in generated war and in the deployed .war, now none of the browsers see the new applied version. </p>

<p>I tried <kbd>Ctrl</kbd>+<kbd>F5</kbd>, removing cached files, shutting down Tomcat &amp; deleting the logs &amp; starting it again. And yet the changes, despite being correctly deployed, don't appear in browsers when I navigate to localhost.</p>

<p>How to fix it, what am I doing wrong?</p>
","0","1319392","",""
"39412407","779446","2016-09-09 13:12:48","20","6685","<git><git-stash>","git-stash changes without reverting","<p>I work on a project using Git. Every once in a while I find myself wanting to save my changes, without committing them, just as a backup, and then continue working. What I usually do is <code>git stash</code> and then immediately <code>git stash apply</code> to bring the code back to the same state as before stashing. The problem I have with this is that git stash reverts my work directory so even though I apply the stash immediately files and projects have to be rebuilt because they appear to have changed. This is quite annoying because some of our projects take ages to build.</p>

<p>So my question is, is there a way to stash my changes without reverting? If stash doesn't do that, is there any other command in git that can do it? Thank you.</p>
","3","779446","0","0"
"20409853","772264","2013-12-05 20:20:13","44","48972","<git><git-pull><git-stash>","git stash and apply","<p>I'm new to git and not quite clear on how stashing works.</p>

<p>Let's say I'm working on branch master and try to <code>git pull</code> and receive the error that my local changes would be overwritten and need to be stashed or committed. If I haven't staged any of my changes and run <code>git stash</code>, then do a <code>git pull</code> and and update successfully, what happens when I <code>git stash apply</code>?</p>

<p>In general, If someone else modifies files and I run <code>git pull</code>, what happens when I <code>run git stash apply</code>? does it overwrite the files that were just updated, regardless of whether or not they were staged when I stashed them? Does it overwrite every file that I just updated with <code>git pull</code>, with the files that were stashed?</p>
","1","772264","0","0"
"18662740","281545","2013-09-06 16:50:53","1","2044","<git><git-stash>","git stash while amending last commit (in gui) - pop pops nothing","<p>So I had some unstaged changes and some staged ones. I issued</p>

<pre><code>Welcome to Git (version 1.8.3-preview20130601)
$ git stash save --keep-index
Saved working directory and index state WIP on master: ab0d18d Setup of alarms f
or network service + Logging exceptions + long arithmetic
HEAD is now at ab0d18d Setup of alarms for network service + Logging exceptions
+ long arithmetic
$ git stash
Saved working directory and index state WIP on master: ab0d18d Setup of alarms f
or network service + Logging exceptions + long arithmetic
HEAD is now at ab0d18d Setup of alarms for network service + Logging exceptions
+ long arithmetic
</code></pre>

<p>Then I hit amend last commit  <strong>in the gui</strong> to split the ab0d18d commit into smaller ones. I unstaged some of the files and I hit</p>

<pre><code>$ git stash save --keep-index
Saved working directory and index state WIP on master: ab0d18d Setup of alarms f
or network service + Logging exceptions + long arithmetic
HEAD is now at ab0d18d Setup of alarms for network service + Logging exceptions
+ long arithmetic
</code></pre>

<p>Repeated the above procedure :</p>

<pre><code>$ git stash save --keep-index
Saved working directory and index state WIP on master: ab0d18d Setup of alarms f
or network service + Logging exceptions + long arithmetic
HEAD is now at ab0d18d Setup of alarms for network service + Logging exceptions
+ long arithmetic
</code></pre>

<p>Then I edited the commit message and I committed. Then I issued <code>git stash pop</code> to start getting back my stashes and committing them one by one.</p>

<pre><code>$ git stash pop
# On branch master
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       TODO.txt
nothing added to commit but untracked files present (use ""git add"" to track)
Dropped refs/stash@{0} (43facd88ea3548071b196324523bd017d680d6dd)
</code></pre>

<p>Disaster !</p>

<p>I had backups happily (long live dropbox)</p>

<p>2 questions :</p>

<ul>
<li>what did I do wrong ?</li>
<li>how should one recover from such a scenario ?</li>
</ul>

<p>EDIT : gitk after I restored the changes (the amended commit is the SETUP ALARMS one)</p>

<p><img src=""https://i.stack.imgur.com/CToPE.jpg"" alt=""enter image description here""></p>

<p><strong><em>EDIT</em></strong></p>

<p>Found a way to reproduce the problem - will be amending it (probably only the last part is needed - was trying to reproduce my original scenario exactly) but for starters :</p>

<pre><code>mkdir test_stash; cd  test_stash;git init
echo f1 &gt;&gt; f1 ; echo f2 &gt;&gt; f2 ; echo f3 &gt;&gt; f3 ; echo f4 &gt;&gt; f4 ; echo f5 &gt;&gt; f5
git add f1 f2 f3 f4 f5
git commit -m base123
echo change f1 to be amended &gt;&gt; f1
echo change f2 to be amended &gt;&gt; f2
echo change f3 to be amended &gt;&gt; f3
git add .
git commit -m tobeamended123
echo change f4 &gt;&gt; f4; git add f4
echo change f5 &gt;&gt; f5
git stash save --keep-index
git stash
git gui &amp;
</code></pre>

<p>Now hit amend commit <strong><em>in the gui</em></strong>. Not sure to which command it corresponds to but <code>git commit --amend</code> does not do the trick.  </p>

<p><img src=""https://i.stack.imgur.com/iBGbr.jpg"" alt=""enter image description here""></p>

<p>While in the amend state unstage file f3 <strong><em>in the gui again</em></strong> (click on it so it moves on the unstaged area - would be <code>git reset HEAD f3</code> but this does not work either) then</p>

<pre><code>git stash save --keep-index
git commit -m amended # not really amended - a new commit altogether
git stash pop
</code></pre>

<p>Getting :</p>

<pre><code># # On branch master
nothing to commit, working directory clean
Dropped refs/stash@{0} (898687d73b65ccc9e10cd826bc12fda1a4759651)
</code></pre>

<p>Expecting : the f3 modifications to show up</p>
","0","281545","0","0"
"35139991","1086540","2016-02-01 20:46:42","2","1749","<git><git-stash><git-checkout>","git checkout fails due to local changes but stash applies cleanly afterwards","<p>It happens often that I try to checkout a new remote branch (to create a local branch out of it, but this might be irrelevant to my issue) and git fails with the following error</p>

<blockquote>
  <p>error: Your local changes to the following files would be overwritten by checkout:<br>
  Please, commit your changes or stash them before you can switch branches.</p>
</blockquote>

<p>Now, when I see this, one could naively expect that if one stashes the changes, checkout the new branch and then apply the stashed changes then there would be a conflict, but that is almost never the case. What happens is that the stashed changes apply cleanly and I don't lose anything from what I had before I checked out the new branch. Why is git giving this seemingly misleading error? <strong>if I can stash before checking out and apply the stash at the end cleanly, why isn't <code>git checkout</code> doing just that under the hood?</strong></p>

<p>Edit:<br>
To make it clearer, I am not asking why the checkout fails, or why sometimes a checkout with a dirty workspace succeeds, I understand all that. My questions is that in this case there is a course of action that is 100% data-loss free (or is there some corner case where data could be lost that I fail to see??) so why doesn't git just do it? </p>

<p>If I said to someone new to git that a modif on file <code>foo</code> line 100 would conflict with another modif on file <code>foo</code> line 2 it would kind of make sense to them an accept it as truth, not complain and would easily fix the conflict. But because git is a nice tool, it does the smart thing and doesn't even bother you with a non-issue that it can fix without any risks of corruption. Why is that not the same philosophy in this scenario with <code>git checkout</code>? </p>
","9","1086540","0","0"
"20526355","1312080","2013-12-11 17:48:40","150","44523","<git><git-stash>","Is git stash branch-specific or for the whole repository?","<p>I went into a branch and did some work.  I wanted to go into another branch but didn't want to commit so I did <code>git stash</code>.  Then I did <code>git checkout &lt;otherbranch&gt;</code>.  I did some work there and, just like in the first branch, I wanted to switch out of it before committing the work.  So I did <code>git stash</code> there too.  I switched back to the first branch and tried to unstash it (<code>git stash pop</code>) thinking it would get the stash from that specific branch.  I was surprised that it unstashed the stash from <code>&lt;otherbranch&gt;</code> (latest stashed).  I was under the impression that stash is branch-specific but this behavior indicates that there is only one stash for the whole local repository.</p>

<p>Is <code>git stash</code> branch-specific or for the whole repository?  If it is for the whole repository, can I pass options to it to make it branch-specific?</p>
","0","1312080","0","0"
"1550378","38765","2009-10-11 10:36:08","273","107414","<git><git-stash>","Is it possible to push a git stash to a remote repository?","<p>In git, is it possible to create a stash, push the stash to a remote repository, retrieve the stash on another computer, and apply the stash? </p>

<p>Or are my options:</p>

<ul>
<li>Create a patch and copy the patch to the other computer, or</li>
<li>Create a minor branch and commit the incomplete work to that branch?</li>
</ul>
","0","38765","0","0"
"20586009","1247274","2013-12-14 17:16:52","15","5664","<git><git-stash>","How to recover from ""git stash save --all""?","<p>I wanted to stash untracked files, but I keep passing the wrong option. To me this sounds right:</p>

<pre><code>git stash save [-a|--all]
</code></pre>

<p>but this in fact stashes ignored files as well. The correct one is:</p>

<pre><code>git stash save [-u|--include-untracked]
</code></pre>

<p>When I run <code>git stash save -a</code> and try to <code>git stash pop</code> it, I get countless errors for all ignored files:</p>

<pre><code>path/to/file1.ext already exists, no checkout
path/to/file1.ext already exists, no checkout
path/to/file1.ext already exists, no checkout
...
Could not restore untracked files from stash
</code></pre>

<p>so the command fails.</p>

<p>How do I get my tracked and untracked stashed changes back? <code>git reflog</code> doesn't store stash commands.</p>
","1","1247274","0","0"
"58497639","931154","2019-10-22 05:32:52","2","389","<git><git-stash>","git discard specifically changes in the staging area","<p>There are cases where I want to discard all the files currently in the staging area and only the files currently in the staging area. Essentially I want something that is just like <em>making a commit and then immediately discarding the commit that was just made</em>.</p>

<p>Right now in practice I mostly use <code>git stash</code> for this purpose and just remember that I don't actually want the thing that I'm stashing.</p>

<p>However, <code>stash</code>ing and discarding are not really the same thing and <code>stash</code> appears to capture all the tracked files, not just the ones currently in the staging area, as the script below shows.</p>

<p>Is there a way to <em>completely discard</em> (changes to) exactly the files that are currently in the staging area?</p>

<pre><code>#!/bin/bash

mkdir -p ./a

echo foo &gt; ./a/foo
echo bar &gt; ./a/bar
(
    # add initial commit
    cd ./a
    git init
    git add foo
    git add bar
    git commit --message='initial commit'

    # change first line of foo and bar
    ed ./foo &lt;&lt;'EOF'
s/$/ aaaaaa/
wq
EOF
    ed ./bar &lt;&lt;'EOF'
s/$/ aaaaaaa/
wq
EOF

    git add ./foo
    git stash save
    git status
)
</code></pre>

<p>When run, this script produces the following output</p>

<pre><code>$ bash gitrepo.sh
Initialized empty Git repository in ~/git/a/a/.git/
[master (root-commit) a8f0104] initial commit
 2 files changed, 2 insertions(+)
 create mode 100644 bar
 create mode 100644 foo
4
11
4
12
Saved working directory and index state WIP on master: a8f0104 initial commit
HEAD is now at a8f0104 initial commit
</code></pre>

<p>I've also tried essentially the same script with <code>git clean -f</code> and <code>git reset</code> in place of <code>git stash save</code></p>

<p><code>git clean -f</code> appears to discard neither the changes to <code>foo</code> nor to <code>bar</code>.</p>

<pre><code>[master (root-commit) 0c10b47] initial commit
 2 files changed, 2 insertions(+)
 create mode 100644 bar
 create mode 100644 foo
4
11
4
12
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   foo

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   bar
</code></pre>

<p><code>git reset</code> in this specific case appears to simply remove <code>foo</code> from the staging area.</p>

<pre><code>[master (root-commit) 65fce7b] initial commit
 2 files changed, 2 insertions(+)
 create mode 100644 bar
 create mode 100644 foo
4
11
4
12
Unstaged changes after reset:
M       bar
M       foo
</code></pre>

<p>The current best solution I have so far is the following script, which has the right behavior in the few cases I've tested it with. However, it accomplishes this behavior by creating, committing to, and then deleting a new branch named by a UUID. I'd prefer a way of discarding the changes in the staging area that's less circuitous.</p>

<pre><code>#!/bin/bash

branch=""$(python -c 'import uuid; print(str(uuid.uuid4()))')""
git checkout -b ""$branch""
git commit -m ""commit for $branch""
git checkout -
git branch -D ""$branch""
</code></pre>

<p>When using <code>gitdiscard</code> (the script above), the tester script produces the right results, foo's change is discarded, but the unstaged modifications to <code>bar</code> are still there.</p>

<pre><code>[master (root-commit) e4e81d9] initial commit
 2 files changed, 2 insertions(+)
 create mode 100644 bar
 create mode 100644 foo
4
11
4
12
M       bar
M       foo
Switched to a new branch 'abebe893-e579-4ecc-9422-6c99051d67f6'
[abebe893-e579-4ecc-9422-6c99051d67f6 05916d5] commit for abebe893-e579-4ecc-9422-6c99051d67f6
 1 file changed, 1 insertion(+), 1 deletion(-)
M       bar
Switched to branch 'master'
Deleted branch abebe893-e579-4ecc-9422-6c99051d67f6 (was 05916d5).
</code></pre>

<p>Non-exhaustive list of similar but non-duplicate questions:</p>

<p><a href=""https://stackoverflow.com/q/3103939/"">This question</a> is not a duplicate because it refers to discarding untracked files, not changes in the staging area.</p>

<p><a href=""https://stackoverflow.com/questions/673407/how-do-i-clear-my-local-working-directory-in-git"">This question</a> is not a duplicate because it refers to clearing the entire working directly, not to discarding changes in the staging area.</p>

<p><a href=""https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree"">This question</a> covers untracked files and untracked directories, but doesn't cover discarding changes to files in the staging area.</p>
","0","931154","",""
"35186393","4806903","2016-02-03 19:52:17","4","2003","<git><git-stash>","How do i recover my git stash after git stash pop was successful","<p>I had changes in a few files and some new files</p>

<p><code>git pull</code>: said I had conflicts in a few files</p>

<p>I did : </p>

<pre><code>git stash
git pull
git stash pop
</code></pre>

<p>I expected conflicts but there were none.</p>

<p>Instead many files are now just empty.
current uncommitted changes show everything deleted from these files.</p>

<p>Solution I see is: clone the repository. ""somehow recover"" my last popped stash and save it as a patch and apply there.</p>

<p>How do I recover this (it is not in the stash list anymore)</p>

<p>I don't see the last stash using : </p>

<pre><code>gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )
</code></pre>

<p>and </p>

<pre><code>git fsck --no-reflog | awk '/dangling commit/ {print $3}'
</code></pre>

<p>gives :</p>

<pre><code>error: object file .git/objects/02/7745a5151a6237eb1dcd8e4f0df10328809669 is empty
error: object file .git/objects/02/7745a5151a6237eb1dcd8e4f0df10328809669 is empty
fatal: loose object 027745a5151a6237eb1dcd8e4f0df10328809669 (stored in .git/objects/02/7745a5151a6237eb1dcd8e4f0df10328809669) is corrupt
</code></pre>

<p>What do I do? What happened?</p>
","3","4806903","",""
"1910082","99877","2009-12-15 20:14:32","795","742839","<git><git-stash>","git stash apply version","<p>I have 2 branches: master | design</p>

<p>Working in design I did a stash and switched to master, made some adjustments. Switched back to design and did a <code>stash apply</code> only to lose all my changes in the design branch.</p>

<p>I am hoping all my work is within a stash as I have not cleared or removed these.</p>

<p>If I do a stash list I get 4 results:</p>

<pre><code>stash@{0}: WIP on design: f2c0c72... Adjust Password Recover Email
stash@{1}: WIP on design: f2c0c72... Adjust Password Recover Email
stash@{2}: WIP on design: eb65635... Email Adjust
stash@{3}: WIP on design: eb65635... Email Adjust
</code></pre>

<p>If I try <code>git stash apply f2c0c72</code> I am getting an error:</p>

<pre><code>fatal: Needed a single revision
f2c0c72: no valid stashed state found
</code></pre>

<p>How can I apply a specific stash?</p>
","1","99877","0","0"
"1912934","145256","2009-12-16 07:26:17","15","2695","<bazaar><git-stash><fossil>","How to emulate 'git stash' in fossil, bzr?","<p>Is it possible to emulate the behavior of 'git stash' when using fossil/bzr?</p>

<p>Basically I'm interested in handling the following workflow:</p>

<ul>
<li>at some point the source code tree has state X, it is commited</li>
<li>I proceed to writing new code, I write it for a while and I see the
opportunity of a refactoring</li>
<li>I can't commit at this point, because the change I've started to make is not
completed, it is not atomic yet</li>
<li>at this point I would do 'git stash', would save the current work and would
get back to state X</li>
<li>I would do the refactoring and commit, source code now has state Y</li>
<li>I would merge source code in state Y with code in stash, complete the change
to make it atomic, then commit once again, pushing the source code to state Z</li>
</ul>

<p>I think that generally it is possible to emulate this scenario when using
another SCM by branching the code in state X instead of doing 'git stash',
doing the refactoring in that branch, then merging the branch back into the
main one. But I'm aware that branching is not always a cheap operation. So are
there any better particular approaches that eventually rely on specific
features of fossil/bzr?</p>
","0","145256","0","0"
"18737640","2548887","2013-09-11 09:37:16","27","40925","<git><github><git-commit><git-stash>","Use git stash save or git commit for local changes?","<p>I changed some files in my repo, but don't want them to be pushed public or create any temporary branch to store them. I just want to save these changes in somewhere. So which command is better:</p>

<pre><code>git stash save ""save message"" 
</code></pre>

<p>or </p>

<pre><code>git commit -am ""save message""
</code></pre>

<p>? </p>

<p>If I use <code>git commit</code>, is it true that all of my local commits will be pushed publicly by one <code>git push</code> command? What if I just want to push one specific commit among them?</p>
","2","2548887","0","0"
"58948855","6813433","2019-11-20 07:24:44","-1","684","<git><git-stash><gitkraken>","After git stashing my project contents are not updated anymore how do I get back all my files","<p>Please, take it easy on me guys, I don't really understand stashing w/git, I only understand git add, status and basic stuff about git, Hope you'd be really understanding with me about this</p>

<p>I stashed all my project files since that current changes is not yet finished so I did git stash and when I moved to another branch by <code>git checkout ...</code></p>

<p>I commited my updated changes to the master branch and pushed it to its github repo but when I run my updated project with its local server, I found out that I don't have my updated project files. like all my updated contents were now gone, how do I get back to those.</p>

<p><a href=""https://i.stack.imgur.com/HwuiB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HwuiB.png"" alt=""enter image description here""></a></p>
","6","6813433","",""
"21280109","965100","2014-01-22 10:20:38","3","1187","<git><git-stash>","Applying stash changes in git, where the stash contains files that has been moved","<p>My current branch has moved certain files to different folders, and the stash created had made changes to the files which were located in the old folders. How to properly apply the stash without breaking anything, and would like to know the easiest method for this.</p>
","0","965100","0","0"
"18832432","2131316","2013-09-16 16:00:39","7","3650","<git><git-stash>","how to check the source code of stashed files without pop them in git?","<p>I have some stashed files in git, but I do not want to <code>git stash pop</code> it, because sometime it alert merge message, I do not want to do merge in order to see the source code in stashed files, is there a way of doing that?</p>
","1","2131316","0","0"
"35311887","5872077","2016-02-10 09:56:40","1","80","<git><atlassian-sourcetree><git-stash>","Stash-git pull issue","<p>We are using Stash for our SCM. Currently we are a team of three (developer1,developer2,developer3). Developer1 is working on branch1 of a stash repository. He has pushed some changes on branch1  which I am also working.I want to pull the branch1 data from remote server to my working copy.</p>

<p>But pull get aborted because I have my local changes via 'source tree tool'. How can I keep my local changes and pull the data from remote server without overwriting it? I want to push the local changes to remote afterwards as latest commit.</p>

<p>Please help.</p>
","3","5872077","",""
"59290400","3429331","2019-12-11 16:42:36","2","244","<git><github><git-stash>","How can I remove selective stashes in git?","<p>I have the list of stashes and want to drop some of them selectively.</p>
<p>For my example, I want to <strong>remove stash@{1}, stash@{3}, stash@{4}, stash@6}</strong></p>
<blockquote>
<p>$git stash list</p>
</blockquote>
<pre><code>stash@{1}: Tests On branch1-om: Test for #8
stash@{2}: WIP On branch1-om: WIP for #12
stash@{3}: Temp on branch1-om: 0a447303 Add Unit Tests for the HttpClient
stash@{4}: To delete stash: 233abc813c fix
stash@{5}: WIP on branchn-test-om: 4a42e4 WIP: Commit
stash@{6}: On branch-test-om: projects deleted/modified when rebuilt
stash@{7}: My configurations: Apply my local dev configurations
</code></pre>
<p><strong>My Current step is very repetitive:</strong></p>
<blockquote>
<p>$git stash drop stash@{1}</p>
<p>$git stash list</p>
</blockquote>
<pre><code>stash@{1}: WIP On branch1-om: WIP for #12
stash@{2}: Temp on branch1-om: 0a447303 Add Unit Tests for the HttpClient
stash@{3}: To delete stash: 233abc813c fix
stash@{4}: WIP on branchn-test-om: 4a42e4 WIP: Commit
stash@{5}: On branch-test-om: projects deleted/modified when rebuilt
stash@{6}: My configurations: Apply my local dev configurations
</code></pre>
<blockquote>
<p>$git stash drop stash@{2}</p>
<p>$git stash list</p>
</blockquote>
<pre><code>stash@{1}: WIP On branch1-om: WIP for #12
stash@{2}: To delete stash: 233abc813c fix
stash@{3}: WIP on branchn-test-om: 4a42e4 WIP: Commit
stash@{4}: On branch-test-om: projects deleted/modified when rebuilt
stash@{5}: My configurations: Apply my local dev configurations
</code></pre>
<blockquote>
<p>$git stash drop stash@{2}</p>
<p>$git stash list</p>
</blockquote>
<pre><code>stash@{1}: WIP On branch1-om: WIP for #12
stash@{2}: WIP on branchn-test-om: 4a42e4 WIP: Commit
stash@{3}: On branch-test-om: projects deleted/modified when rebuilt
stash@{4}: My configurations: Apply my local dev configurations
</code></pre>
<blockquote>
<p>$git stash drop stash@{3}</p>
<p>$git stash list</p>
</blockquote>
<pre><code>stash@{1}: WIP On branch1-om: WIP for #12
stash@{2}: WIP on branchn-test-om: 4a42e4 WIP: Commit
stash@{4}: My configurations: Apply my local dev configurations
</code></pre>
","0","3429331","",""
"48446845","1733053","2018-01-25 15:48:17","14","1404","<git><git-stash>","git stash restoring index state of deleted and renamed files","<p>When stashing staged deleted or renamed files, and then unstashing them, they are restored in both their deleted and non deleted state.</p>

<p>In the following example state:</p>

<pre><code>$ git status s

A  file0
D  file1
R  file2 -&gt; file3
?? file4
</code></pre>

<p>running <code>git stash push -k -u</code> and then <code>git stash pop --index</code> will leave me with in the following state:</p>

<pre><code>$ git status s

A  file0
D  file1
R  file2 -&gt; file3
?? file1
?? file2
?? file4
</code></pre>

<p>I would expect to end up in the original state, without the deleted files reappearing as untracked after <code>pop</code>. </p>

<p>Any way around this?</p>

<p>Edit:
Here's a script that recreates the issue (tested on Mac OS X 10.13.2 with git 2.16.1)</p>

<pre><code>#!/usr/bin/env bash

echo -e ""\nInitializing a fresh git dir...""
mkdir gitStashIssue &amp;&amp; cd $_
rm -rf * .*
git init


echo -e ""\nPreparing git state for test...""
# Create files and commit them
echo 'abc' &gt; file1
echo 'aabbcc' &gt; file2
echo 'aaabbbccc' &gt; file3
echo 'aaaabbbbcccc' &gt; file4
git add .
git commit -m 'initial commit'

# Make changes and add them to stage
echo `cat file1` &gt;&gt; file1
echo `cat file2` &gt;&gt; file2
git add .

# Make another change to a staged file without
# staging it, making it partially staged
echo `cat file1` &gt;&gt; file1

# Delete and rename files
git rm file3
git mv file4 fileRenamed

# Add untracked file
echo ""untracked"" &gt; untrackedFile

# git status -s should now show
# MM file1
# M  file2
# D  file3
# R  file4 -&gt; fileREnamed
# ?? untrackedFile

echo -e ""\nCurrent git status is:""
git status -s

echo -e ""\nStasing changes...""
git stash save -u -k

# git status -s should now show
# M  file1
# M  file2
# D  file3
# R  file4 -&gt; fileREnamed
# ?? file3
# ?? file4

echo -e ""\ngit status after stashing files is:""
git status -s

echo -e ""\ncleaning up deleted and renamed files...""
git clean ./ -f

echo -e ""\ngit status after cleanup:""
git status -s

echo -e ""\nCommiting unstashed changes...""
git commit -m 'commit unstashed changes'

# This causes a conflict in file1
# git status -s should now show
# UU file1
# ?? untrackedFile
git stash pop --index

echo -e ""\ngit status after unstashing:""
git status -s
</code></pre>
","2","1733053","0","0"
"35324886","1380285","2016-02-10 20:08:32","1","2886","<git><git-stash>","stuck with stash in git","<p>I am using git, but have alot to learn.  I wanted to save some changes to a file (but not commit) and go to a different branch, have a look at some code there then go back to what I was working on.  That's all.  So I did</p>

<pre><code>&gt; git stash
&gt; git checkout
&gt; vi ....
&gt; git stash apply stash@{0}
</code></pre>

<p>and found myself facing an error message</p>

<pre><code>Auto-merging schematic.f
CONFLICT (content): Merge conflict in schematic.f
</code></pre>

<p>I obviously didn't realize how stash apply was going to work.  And now I'm stuck.  Nothing I can think of doing will get me out of my current branch and back to the one I was working in.  I keep getting this same error message over and over.  How do I get out of this?  Thanks.</p>
","0","1380285","",""
"48458222","633961","2018-01-26 08:55:52","24","7731","<git><git-stash>","git: Automatically stash+pop on checkout","<p>If I do <code>git checkout my-super-branch</code> git tells me:</p>

<pre><code>error: Your local changes to the following files would be overwritten by checkout:
    somedir/somefile.py
Please, commit your changes or stash them before you can switch branches.
Aborting
</code></pre>

<p>Is there a simple way to tell git to do stash+pop automatically?</p>
","7","633961","0","0"
"27173560","4243639","2014-11-27 14:59:12","1","129","<git><version-control><git-branch><git-stash>","git from checked-out stash to branch","<p>I want 100% of stash <code>4aa0f82</code> below on my master branch</p>

<p>Problem is, stash apply/pop does not apply all the changes. I can resolve some conflicts, but some important stuff that I changed and saved in the stash does not appear in the conflicts (maybe because there was a commit with a detached HEAD in between).</p>

<p>I want 100% of the stash on my branch. it is all there when I do checkout stash@{0}. how do I move that full stashed commit on my branch?</p>

<p><code>git log --graph --decorate --oneline stash</code> output: </p>

<pre><code>*-.   6872ac5 (refs/stash) WIP on (no branch): d5da51e
|\ \
| | * 52db257 untracked files on (no branch): d5da51e
| * fb1c947 index on (no branch): d5da51e
|/
*   d5da51e bug removed
|\
| * 3096570 index on master: 89f11dd
|/
* 89f11dd (HEAD, master)
</code></pre>

<p><code>git log --graph --decorate --oneline</code> output:</p>

<pre><code>*   4aa0f82 (HEAD)
|\
| * bb34a5b index on HEAD: d5da51e
|/
*   d5da51e
|\
| * 3096570 index on master: 89f11dd
|/
* 89f11dd (master)
</code></pre>
","5","4243639","0","0"
"45445638","561624","2017-08-01 18:54:39","1","883","<git><git-stash><git-bundle>","git bundle stashed code","<p>I have a specific set of code stashed in git and would like to bundle it up in order to transfer it to a different clone on a separate PC, but I have not figured out how to reference the stash in the bundle command.</p>

<pre><code>stash@{0}: On issue/789: Something I do not want bundled
stash@{1}: WIP on issue/456: Something I do want bundled
stash@{2}: On issue/123: Something else I do not want bundled
</code></pre>

<p>I have tried:</p>

<pre><code>git bundle create My-WIP.bundle stash@{1}
</code></pre>

<p>but get the following error:</p>

<pre><code>error: Refusing to create empty bundle.
</code></pre>

<p>I can confirm that stash@{1} is not empty. Does the bundle command not support the stash? Is it possible to do what I'm trying to do?</p>
","0","561624","0","0"
"45550795","6627675","2017-08-07 15:39:23","1","112","<git><svn><terminal><command><git-stash>","Is there a CLI command for stashing in git-svn?","<p>Are there any CLI commands to stash the working copy using <code>git-svn</code>?</p>

<p>I saw this answer but I was wondering if there is any particular command for <code>git svn</code>:</p>

<p><a href=""https://stackoverflow.com/questions/1554278/temporarily-put-away-uncommited-changes-in-subversion-a-la-git-stash"">Temporarily put away uncommited changes in Subversion (a la &quot;git-stash&quot;)</a></p>
","0","6627675","",""
"46519879","5723614","2017-10-02 05:19:30","5","832","<intellij-idea><git-stash>","Not working git stash","<p>I use <code>VNC -&gt; Git -&gt; Stash Changes</code> in Intellj IDEA</p>

<p>I get error:
<a href=""https://i.stack.imgur.com/kFAvo.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/kFAvo.png"" alt=""enter image description here""></a></p>

<p>I run</p>

<pre><code>  git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""
</code></pre>

<p>But it still not working. Why?</p>
","1","5723614","",""
"46575029","3719459","2017-10-04 22:18:00","3","2391","<git><visualization><git-stash>","Is this a valid visualization of the ""git stash"" operation?","<p>I can not find a good visualization of the <code>git stash</code> operation. So I created my own based on some rare comments on the internet.</p>

<p><a href=""https://i.stack.imgur.com/oKcp4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oKcp4.png"" alt=""enter image description here""></a></p>

<p>This this visualization correct?</p>

<p>Edit note: I need to change the color of <code>stash@{0}</code> because it's no branch.</p>

<p>Where are stashes stored in my <code>.git</code> directory? I think it's a reference and stored in <code>refs</code>, right?</p>

<hr>

<p>Legend:</p>

<ul>
<li>C1, C2 - commits</li>
<li>Idx - Index</li>
<li>WD - working directory</li>
<li>dashed line and dashed borders => free for garbage collection</li>
</ul>

<hr>

<p><strong>Reworked Image</strong></p>

<p><a href=""https://i.stack.imgur.com/voxJl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/voxJl.png"" alt=""enter image description here""></a></p>
","1","3719459","0","0"
"28682919","276120","2015-02-23 20:33:40","15","21159","<git><git-stash><git-merge-conflict>","How do I resolve git merge conflicts on a submodule from `git stash pop`","<p>I have a git repository with a submodule. I need to pop changes I've previously stashed. However, this is causing a merge conflict on the submodule reference.</p>

<p>I want to keep my changes from the stash, except for the submodule. For most code files, I can resolve the conflict by editing the conflicting file, but that doesn't seem to be an option for the submodule.</p>

<p>How can I resolve the merge conflict and still extract my changes from the stash?</p>

<pre><code>$ git stash pop
warning: Failed to merge submodule some-submodule (commits don't follow merge-base)
Auto-merging some-code
Auto-merging some-submodule
CONFLICT (submodule): Merge conflict in some-submodule
</code></pre>

<hr>

<pre><code>$ git status
# On branch some-branch
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   some-code
#
# Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both modified:      some-submodule
</code></pre>
","0","276120","",""
"9996446","280043","2012-04-03 15:24:13","7","4270","<git><git-stash>","git fetch ""unable to find"" ""object... not found"" errors for stash","<p>I have a simple backup system where a git clone created using <code>--bare</code> (it might have been <code>--mirror</code>) run <code>git fetch</code> every hour. The idea is that if something happens to my working copies that I have a backup of my work in the clone.</p>

<p>This system works great, but I'm getting an error when I run <code>git fetch</code>:</p>

<pre><code>$ git fetch
remote: Total 0 (delta 0), reused 0 (delta 0)
error: unable to find 2a8c978c41c362c3f0c42775c9124780a0e71e08
fatal: object 2a8c978c41c362c3f0c42775c9124780a0e71e08 not found
</code></pre>

<p>When I look in the original repository for the object, it's a stash:</p>

<pre><code>$ git show 2a8c978c41
commit 2a8c978c41c362c3f0c42775c9124780a0e71e08
Merge: 808f6e4 ddc28da
Author: Russell Silva &lt;russell.silva@blahblah.com&gt;
Date:   Wed Feb 29 10:19:26 2012
    WIP on experimental: 808f6e4 blah blah blah
</code></pre>

<p>It looks like the fetch is mostly successful; <code>git log &lt;branch&gt;</code> shows up-to-date branches. But the errors are pesky. How do I get rid of them? How do I keep them from recurring?</p>

<p>Note that this question is different from <a href=""https://stackoverflow.com/questions/2248680/can-i-fetch-a-stash-from-a-remote-repo-into-a-local-branch"">this one</a> where someone actually wants to fetch a stash. I don't care if my <code>git fetch</code> commands fetch stashes; it's fine if they don't.</p>

<p>EDIT: the full output of <code>git fetch --verbose</code> was requested:</p>

<pre><code>$ git fetch --verbose
remote: Total 0 (delta 0), reused 0 (delta 0)
From /home/russell/work/russells-project
 = [up to date]      some-branch -&gt; some-branch
error: unable to find 2a8c978c41c362c3f0c42775c9124780a0e71e08
fatal: object 2a8c978c41c362c3f0c42775c9124780a0e71e08 not found
</code></pre>

<p>I have changed names in the output to conceal private information and eliminated all but one of the ""[up to date]"" lines -- there's dozens of them, one for each branch in the repository.</p>

<p>Also, my remote is on the local filesystem; it's not being accessed over the network.</p>

<pre><code>$ git remote --verbose
origin  /home/russell/work/russells-project (fetch)
origin  /home/russell/work/russells-project (push)
</code></pre>
","6","280043","0","0"
"46271035","4372702","2017-09-18 03:05:47","5","4431","<git><version-control><git-stash>","how to apply same stash to different branches in git?","<p>I have four branches lets say A B C D.</p>

<p>I worked on branch B for some function and created stash.</p>

<p>This feature I also want in branch A and D .</p>

<p>Is there any way that I can use this stash from B and apply to A and D also and definitely I want it on B too that's why I don't want to commit instantly and go for stash.</p>
","0","4372702","",""
"28446934","2297823","2015-02-11 05:02:58","1","705","<git><git-stash>","error after git stash pop twice","<p>I hava a file A and 2 stash both modified file A, then I ran the command 'git stash pop' twice.</p>

<p>The result is first stash popped successfully,but second stash occur an error like below:</p>

<blockquote>
  <p>error: Your local changes to the following files would be overwritten by merge:
          A</p>
  
  <p>Please, commit your changes or stash them before you can merge.
  Aborting</p>
</blockquote>

<p>I need both the 2 stash, and I dont want a commit after first stash pop.
So how can I fix this problem?Is There a way for me to merge this 2 stash and then just pop once to meet my request?</p>
","0","2297823","",""
"46992492","8804096","2017-10-28 17:24:41","0","101","<git><github><git-stash>","delete a particular commit log in git/stash","<p>There was a file with credentials checked into <code>git/stash</code> accidentally. I've deleted the file in git stash. However, the commit log with the link to the deleted file still remains in the commit history. I tried to delete a particular commit log in <code>git/stash</code> following <a href=""https://www.clock.co.uk/insight/deleting-a-git-commit"" rel=""nofollow noreferrer"">https://www.clock.co.uk/insight/deleting-a-git-commit</a> but doesn't work. Any ideas what's the best way to resolve my issue? Thanks!!</p>
","3","8804096","0","0"
"47007336","527702","2017-10-30 02:26:01","2","2305","<git><git-commit><git-stash>","Does ""git stash"" internally ""commit"" to my local repo?","<p>I only ever manually <code>commit</code> to my local repo just before <code>push</code>ing to the remote repo.</p>

<p>But more often I <code>pull</code> to get my coding partner's changes.</p>

<p>Sometimes we've both worked on the same file and there's a conflict. In these cases he's told me to do a <code>git stash</code> before my <code>git pull</code> and then a <code>git stash pop</code> afterward.</p>

<p>But sometimes this results in git telling me next time that I can't <code>pull</code> because I have unmerged files. These are usually experimental changes in my local tree that I don't wish to <code>commit</code> or <code>push</code>.</p>

<p>A couple of times I've needed to send my work in and the result has been intermediate revisions in the remote repo including my local experiments, debug code, etc, that I never wished to send. I want to avoid making such mess.</p>

<p>Is this due to <code>stash</code> modifying my local repo? If so, how can I avoid that? If not, what else could be causing it? I'm a total noob at git and only use these few commands.</p>
","2","527702","0","0"
"28804439","289246","2015-03-02 07:14:17","3","1783","<git><bash><git-stash>","can't pop named stash in git","<p>I am trying to write set of bash commands that will:</p>

<ol>
<li>Stashes the current changes</li>
<li>Checkout and pull SOURCE branch</li>
<li>Checkout and pull TARGET branch</li>
<li>Merge TARGET branch with SOURCE branch</li>
<li>Push changes to TARGET branch</li>
<li>Checkout the initial branch</li>
<li>Pop the changes from stash</li>
</ol>

<p>First, I don't know if this is the correct approach to merge two branches using bash script.<br>
The thing is that I am having difficulties stashing and un-stashing named stashes. Here is my script:</p>

<pre><code>while getopts ""s:t:"" option; do
    case ""${option}"" in
        s) SOURCE=${OPTARG};;
        t) TARGET=${OPTARG};;
    esac
done

if [ ""${SOURCE}"" = """" ]; then
    echo ""SOURCE argument is missing""
    exit 1
fi

if [ ""${TARGET}"" = """" ]; then
    echo ""TARGET argument is missing""
    exit 1
fi

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

echo ""Stash changes...""
git stash save GIT_DEPLOY_STASH

echo ""Checkout and pull ${SOURCE}...""
git checkout ${SOURCE}
git pull --rebase origin ${SOURCE}

echo ""Checkout and pull ${TARGET}...""
git checkout ${TARGET}
git pull --rebase origin ${TARGET}

echo ""Merge and push ${SOURCE}...""
git merge ${SOURCE}
git push origin ${TARGET}

echo ""Checkout ${CURRENT_BRANCH}...""
git checkout ${CURRENT_BRANCH}

echo ""Pop stash...""
git stash pop stash^{/GIT_DEPLOY_STASH} #&lt;--- THIS ISN'T WORK!
</code></pre>

<p>Usage example:</p>

<pre><code>$ sh ./my-script.sh -s develop -t staging
</code></pre>

<p>Any idea how to overcome the named stash issue?
Any idea how to improve this script?</p>
","2","289246","",""
"16454098","2360913","2013-05-09 03:58:25","0","554","<git><git-pull><git-stash>","Git stash and git pull in vagrant","<p>Having problem in using git pull and git stash it give me following error.</p>

<p><strong>fatal: cannot unlink '.vagrant/machines/default/virtualbox/id': Permission denied</strong></p>

<p>Inside vagrant and if I use git pull then it will say that there some changes that need to be
pushed and thing is that I don't want these changes anymore.</p>

<p>So, if anyone can help in this.
Thanks</p>
","1","2360913","",""
"16476476","492336","2013-05-10 06:32:43","6","1538","<git><qt-creator><git-stash>","Git diff doesn't work after git stash pop","<p>After <code>git stash pop</code>, there were some conflicts, things like:</p>

<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; Updated upstream
int foo = 5;
=======
int foo = 6;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes
</code></pre>

<p>I resolved them in the code, but now I can't preview my changes before committing them. All I get is this, and I know there are changes:</p>

<pre><code>diff --cc mainwindow.cpp
index 24dc025,2c44ad8..0000000
--- a/mainwindow.cpp
+++ b/mainwindow.cpp
</code></pre>

<p>How do I force git diff to compare my current source to the last commit?</p>
","4","492336","0","0"
"13173565","348545","2012-11-01 08:39:11","3","168","<git><git-branch><git-stash>","Why does git require stash save-pop to switch branch?","<p>Sometimes when there are local changes to the working directory, switching branch fails, but the following flow works:</p>

<ul>
<li>Stash save</li>
<li>Switch branch</li>
<li>Stash pop</li>
</ul>

<p>How come? Doesn't git know how to apply the local working directory changes to the target branch? What design choice made this procedure necessary? Is there a flag I could use in order to avert this slightly long procedure?</p>

<p><strong>UPDATE:</strong><br>
Assume I want to keep the local changes as local changes when I switch branch. Sometimes it's a practical scenario...</p>
","0","348545","",""
"58926699","6521116","2019-11-19 04:35:12","2","1339","<git><git-commit><git-stash>","git apply multi stash at one time","<p>I have stash two times, and I need to commit the two stash in one commit.</p>

<p>I use <code>git stash apply</code> to apply the latest stash, but when I use it again, it throw below error,</p>

<blockquote>
<pre><code>error: Your local changes to the following files would be overwritten by merge:
        library/HQ/groupsql.sql
Please commit your changes or stash them before you merge.
Aborting
The stash entry is kept in case you need it again.
</code></pre>
</blockquote>

<p>How can I pop the two stash then commit them.</p>
","5","6521116","0","0"
"40105126","4470135","2016-10-18 09:57:25","0","8035","<git><git-merge><git-stash>","git stash unresolved merge conflicts","<p>I was resolving merge conflicts and needed to get back to the old codebase to figure out how it worked before.
I intuitively stashed my working copy, checked what I wanted to and applied the stash back.
Now I'm in a lot of trouble because my code has been saved but I no longer see <code>|MERGING</code> next to the branch name in the terminal and I have lost all the commits form the other branch. For git it doesn't look like a merge commit any longer, but simply a new code change.</p>

<p>What have I done wrong and how can I avoid the same issue in the future?</p>

<p>NOTE: Committing it as is is not an option, because we are working on 2 different repos and we need to merge one into another from time to time. If we change the checksum during one of our merges, we will face a massive amount of conflicts, because on the next merge git will not recognise the previously merged code. Merging the same repo over and over again looks like merging the same branch several times. Checksums should stay the same.</p>
","0","4470135","",""
"40173403","4157337","2016-10-21 09:47:24","2","720","<git><ssh><git-stash>","SSH Advice, git cloning from multiple Jumps","<p>this is a bit of a strange one and I am not sure how to tackle it.</p>

<p>At the moment, we have a jump box which we use to connect to customers:</p>

<pre><code>Host jump.server.com
 Hostname jump.server.com
 ForwardAgent yes
 ForwardX11 yes
User first.last
 Port 22
 DynamicForward 9999
</code></pre>

<p>I then connect to my customer:</p>

<pre><code>Host jump.customer.com
  User server
  ForwardAgent yes
  ProxyCommand ssh -qaxT jump.server.com nc 10.xx.xx.x1 22
</code></pre>

<p>This customer then has a local <em>Stash</em> server:</p>

<pre><code>Host stash.customer
  User server
  ForwardAgent yes
  ProxyCommand ssh -qaxT jump.customer.com nc 10.xx.xx.x2 22
</code></pre>

<p>I want to clone a repo from stash on my local machine, currently I am able to clone it from <em>jump.customer.com</em> with out any issues, see below:</p>

<pre><code>server@jump.customer.com:~/repos $ git clone ssh://git@stash.customer:7999/cm/repo.git
Cloning into 'repo'...
remote: Counting objects: 37, done.
remote: Compressing objects: 100% (37/37), done.
remote: Total 37 (delta 22), reused 0 (delta 0)
Receiving objects: 100% (37/37), 5.41 KiB | 0 bytes/s, done.
Resolving deltas: 100% (22/22), done.
Checking connectivity... done.
</code></pre>

<p>However when I try to do this on my local machine I get the following:</p>

<pre><code>└─ $ ▶ git clone ssh://git@stash.customer:7999/cm/repo.git
Cloning into 'repo'...
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>At first I thought this meant my key wasn't on the stash server for this repo, but it is so I looked in the secure logs on <em>stash.customer</em></p>

<pre><code>Oct 21 09:42:48 stash.customer sshd[24122]: Invalid user git from 10.xx.xx.1
Oct 21 09:42:48 stash.customer sshd[24123]: input_userauth_request: invalid user git
Oct 21 09:42:49 stash.customer sshd[24123]: Connection closed by 10.xx.xx.1
</code></pre>

<p>There is no user called git on the stash server or the jump machine, is this the problem? I am certain stash doesn't need a traditional ssh user as it currently doesn't have one, and I can clone within the network.</p>

<p>TLDR; I can't clone a repo on my local machine only within the network due to multiple jumps being used.</p>
","0","4157337","",""
"66466799","125349","2021-03-04 00:14:14","0","68","<git><git-stash>","Is there a way to stash the current git index, `git add -u`, and then restore the index to the stashed state?","<p>The idea here is that I want to (temporarily) stage all pending changes, then later undo it, without ever changing files in the working tree.  It seems like it should be in the domain of <code>git stash</code>, but I can't figure out how to make it happen using that command.  Thanks!</p>
","11","125349","",""
"2359861","82723","2010-03-01 23:22:47","5","322","<git><git-svn><git-stash><quilt>","Maintain set of local commits working with git-svn","<p>I am using git to develop against a project hosted in subversion, using git-svn:</p>

<pre><code>git svn clone svn://project/
</code></pre>

<p>My general workflow has been to repeatedly edit-and-commit on the master branch, then commit to the svn repository via:</p>

<pre><code>git stash
git svn dcommit
git stash apply
</code></pre>

<p>One of the local modifications that 'stash' command is preserving, that I don't want to commit to the svn repository, is a changed database connection string.  What's the most convenient way to keep this local change without the extra 'stash' steps?</p>

<p>I suspect that something like 'stash' or 'quilt' is what I'm looking for, but I'm still new enough to git that I think I'm missing some terminology that would lead to the exact incantation.</p>

<p><em>Update</em>:  The only solution I found that seems to avoid the <code>git stash</code> + <code>git-svn action</code> + <code>git stash apply</code> series was to update the git-svn ref manually:</p>

<pre><code>(check in local-only change to 'master', then...)
$ cat .git/refs/master &gt; .git/refs/remote/git-svn
$ git svn fetch (with at least one new SVN revision)
</code></pre>

<p>And that leaves the local-only commit as a weird (probably unsafe) commit between two svn revisions.</p>
","0","82723","0","0"
"13915098","1050885","2012-12-17 13:28:07","3","114","<git><git-stash>","File state lost after git stash command","<pre><code>echo Hello. &gt; a.txt
git add .
echo Bye. &gt;&gt; a.txt
git status -s
&gt;&gt;&gt; AM
</code></pre>

<p>We can see state is <code>AM</code>,<br>
But on doing the following</p>

<pre><code>git stash
git stash pop
git status -s
&gt;&gt;&gt; A
</code></pre>

<p>State is <code>A</code>.
Why is the <code>M</code> state lost?</p>
","1","1050885","0","0"
"2613956","124504","2010-04-10 15:57:11","6","3493","<git><git-stash><data-loss>","Strange git case - git stash followed by git stash apply lost uncommitted data?","<p>I have a file, let's say file.txt  I have done git mv file.txt to file1.txt, then I created a new file called file.txt and worked on it.  Unfortunately I didn't add that file to git yet. Anyway the problem is that I did git stash, then git stash apply, but the new file.txt disappeared... anyway to get it back?</p>
","1","124504","0","0"
"11175927","1092327","2012-06-24 08:05:17","8","2926","<git><pull><git-stash>","Are there best practices, other than stash, for using git-pull when our workflow includes a lot of uncommitted code?","<p>My team and I are new to Git; we have used CVS so far. We have a remote repository and each one of us has his own repository. Each one of us is working on a feature or bug, but some of us may work on different parts of the same feature. </p>

<p>When one is done they commit and push their changes. Another programmer may want to use that code (for example, if one is working on BL, and another one on UI), but without committing anything as the code may not even compile yet or the working directory may still be dirty.</p>

<p>So far I've only found out a suggestion to use stash, but we find it uncomfortable. We want to pull the code from the remote and simply get it merged with the uncommitted code, but as far as I understand Git, this is probably impossible.  </p>

<p>What do you think would be the best way for us to work with the remote?</p>
","3","1092327","0","0"
"29099480","4680771","2015-03-17 12:47:24","3","67","<git><repository><git-stash>","Git stash local or in git repository","<p>Someone created a git stash on my computer and I would like to know, if he also has git and can change to the branch, if he can download the stash or is the stash local on my computer?</p>
","0","4680771","",""
"65923031","1391441","2021-01-27 16:13:23","3","2667","<git><git-branch><git-commit><git-stash>","Moving uncommitted changes to a new branch: git: stash vs checkout","<p>I've done some changes to my code in <code>branch1</code>, but now I need to move those changes to another branch.  Graphically, I have:</p>
<pre><code>master
  |___develop
         |___branch1
</code></pre>
<p>and I need to move all the <strong>uncommitted changes and untracked files</strong> to a new branch <code>branch2</code> (which does not exist):</p>
<pre><code>master
  |___develop
         |___branch1
         |___branch2
</code></pre>
<p>after which I'll just delete <code>branch1</code> since all its changes are already pushed, and be left with all the uncommitted changes and untracked files in <code>branch2</code>:</p>
<pre><code>master
  |___develop
         |___branch2
</code></pre>
<p>There are quite a few of similar questions in SO but I'm still not sure how I should proceed in my case. Some say to use <code>git stash</code> (<a href=""https://stackoverflow.com/q/556923/1391441"">How do I merge my local uncommitted changes into another Git branch?</a>, <a href=""https://stackoverflow.com/q/7217894/1391441"">moving changed files to another branch for check-in</a>) which in my case I guess would be:</p>
<pre><code>git stash -u
git checkout develop
git checkout -b branch2
git stash pop
</code></pre>
<p>but other answers (<a href=""https://stackoverflow.com/q/4746672/1391441"">Put current changes in a new Git branch</a>, <a href=""https://stackoverflow.com/q/13687334/1391441"">Moving uncommitted changes to a new branch</a>) say to simply use <code>checkout</code> as:</p>
<pre><code>git checkout -b branch2
</code></pre>
<p>but I'm not sure if this will carry my untracked files too. There's a newer answer that recommends using <code>switch</code> (<a href=""https://stackoverflow.com/q/1394797/1391441"">Move existing, uncommitted work to a new branch in Git</a>), but my <code>git</code> version  2.17.1 does not have this command.</p>
<p>Any help will be much appreciated.</p>
","3","1391441","0","0"
"29593744","","2015-04-12 19:34:39","1","49","<git><git-checkout><git-stash><git-add><git-patch>","Can git break up changes by default?","<p>I like to use the <code>-p</code> flag on several git commands, such as <code>add</code>, <code>reset</code>, <code>checkout</code>, and <code>stash</code>. But git groups somewhat contiguous changes together in the same hunk. I know that <code>s</code> breaks up the changes but is there another option I could pass to have git break them up by default wherever possible?</p>
","0","","",""
"29635601","382186","2015-04-14 19:14:45","16","19262","<git><git-stash>","Is there a graphical way to git stash/unstash individual files?","<p>I am looking for a GUI for stashing and stash popping files in git, with the ability to do so for individual modified files.  I know there is a command line way to do so, seen <a href=""https://stackoverflow.com/questions/15264553/git-how-to-unstash-only-certain-files"">here</a>, but I am looking for a graphical way.  I don't care so much about stashing individual files, but more about popping/applying. I am running on Windows 7.</p>
","7","382186","0","0"
"30208928","633961","2015-05-13 07:58:13","173","58816","<git><git-pull><git-stash>","Can ""git pull"" automatically stash and pop pending changes?","<p>I know how to solve this:</p>

<pre><code>user@host$ git pull
Updating 9386059..6e3ffde
error: Your local changes to the following files would be overwritten by merge:
    foo.bar
Please, commit your changes or stash them before you can merge.
Aborting
</code></pre>

<p>But isn't there a way to let <code>git pull</code> do the <code>stash</code> and <code>pop</code> dance for me?</p>

<p>If this command has a different name, it's ok.</p>

<p>Creating a shell alias for <code>git stash; git pull; git stash pop</code> is a solution, but I search for a better solution.</p>
","8","633961","0","0"
"18884567","38765","2013-09-19 00:42:09","32","10958","<git><powershell><git-stash>","""Too many revisions"" git message","<p>On git version 1.7.9.5, when trying</p>

<pre><code>git stash show -p stash@{""Friday Smarch 13 13:13:13 2013""}
</code></pre>

<p>(from <a href=""https://stackoverflow.com/questions/3243231/is-it-possible-to-choose-a-git-stash-when-theyre-described-by-the-date-stashed"">Is it possible to choose a git stash when they&#39;re described by the date stashed?</a> )</p>

<p>I get the error message</p>

<pre><code>Too many revisions specified: stash@{Friday Smarch 13 13:13:13 2013}
</code></pre>

<p>I also get the same error message when trying the following</p>

<pre><code>git stash show ""stash@{Friday Smarch 13 13:13:13 2013}""
git stash show -p stash@{Friday\ Smarch\ 13\ 13:13:13\ 2013}
</code></pre>

<p>I don't think escaping is the cause. If I do</p>

<pre><code>git stash show -p stash@{Friday\ Smarch\ 13\ 13:13:13 2013}
</code></pre>

<p>Then I get a different error message:</p>

<pre><code>fatal: ambiguous argument 'stash@{Friday Smarch 13 13:13:13': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions
</code></pre>

<p>By contrast, doing</p>

<pre><code>git stash show -p stash@{42}
</code></pre>

<p>Works.</p>

<p>What does the error message mean, and what should I do?</p>
","6","38765","0","0"
"14075604","841626","2012-12-28 20:48:33","1","666","<git><version-control><gitignore><git-stash>","prevent git stash from resetting files in .gitignore","<p>So I'm using drupal that is version controlled via git</p>

<p>I modified the bootstrap.inc file in drupal that I don't want to push to the origin and should only be in my local environment</p>

<p>I added bootstrap.inc to my ~/.gitignore</p>

<p>however whenever I do a git stash save, my changes in bootstrap.inc gets reset to the head version even though I'm ignoring it...</p>

<p>is there a way to prevent this from happening and still have my own personal changes to bootstrap.inc not being reset by git stash? </p>
","2","841626","",""
"31627421","5155539","2015-07-25 14:22:00","1","53","<git><bash><command-line><directory-structure><git-stash>","Command for viewing overall git status regardless of location in directory","<p>Is there a way to see a big-picture status in git? I'm new to git and end up losing files based on stashing them in the wrong directory or working on the wrong branch, and I'd like to find a command that gives me an overview of everything, regardless of where in the directory I am or which branch I currently have checked out. Does that exist? (I'm using bash)</p>
","1","5155539","",""
"35407024","1155881","2016-02-15 10:34:00","0","79","<git><git-rebase><git-stash><git-checkout>","git rebase: weird stash behaviour","<p>I did a <code>git rebase -i</code>, selected one commit for edit and git stopped at that commit.   </p>

<p>I now try to <strong>checkout</strong> one patch from the <strong>stash</strong> with <code>git checkout -p stash</code>.</p>

<p>But this gives me weird old stash contents while <code>git stash show -p</code> gives me the expected patches from which I want to checkout one.  </p>

<p>What happens here and how can I checkout my hunk from the stash?<br>
Let me know if I shall provide more info.</p>
","2","1155881","",""
"14097834","1272683","2012-12-31 05:32:53","1","642","<git><bash><shell><sh><git-stash>","What does the shell script in git-stash mean and how does it work?","<p>I saw code snippets like this in <code>git-stash</code></p>

<pre><code>            rm -f ""$TMP-index"" &amp;&amp;
            GIT_INDEX_FILE=""$TMP-index"" git read-tree HEAD &amp;&amp;


            # find out what the user wants
            GIT_INDEX_FILE=""$TMP-index"" \
                    git add--interactive --patch=stash -- &amp;&amp;

            # state of the working tree
            w_tree=$(GIT_INDEX_FILE=""$TMP-index"" git write-tree) ||
            die ""$(gettext ""Cannot save the current worktree state"")""

            git diff-tree -p HEAD $w_tree -- &gt;""$TMP-patch"" &amp;&amp;
            test -s ""$TMP-patch"" ||
            die ""$(gettext ""No changes selected"")""

            rm -f ""$TMP-index"" ||
            die ""$(gettext ""Cannot remove temporary index (can't happen)"")""
</code></pre>

<p>What I don't understand is the expression like this:</p>

<pre><code>GIT_INDEX_FILE=""$TMP-index"" git read-tree HEAD
</code></pre>

<p>Does that mean assign the value of <code>TMP-index</code> to <code>GIT_INDEX_FILE</code>, and then execute command <code>git read-tree HEAD</code>?</p>

<p>I'm not sure about that. So I tried to write a similar command like this.</p>

<pre><code>A=""1"" ls
echo $A
</code></pre>

<p>The value of <code>A</code> is still <code>null</code>.</p>

<p>I also tried this:</p>

<pre><code>echo $a
=&gt; 1
k=$(a=100 echo $a)
=&gt; 
echo $k
=&gt; 1
</code></pre>

<p>It looks that the value of <code>a</code> is not changed at all. So the <code>a=100</code> seems useless..</p>

<p>Does anyone have ideas about syntax like this?</p>
","0","1272683","",""
"18976732","2131316","2013-09-24 08:40:18","0","93","<git><git-stash>","what is the right way to git stash pop?","<p>I <code>git stash</code> my changes, then I pick the updates up using <code>git stash pop</code>, but the <code>gitk</code> still shows the stashed version, what is the right way to pick up the updates?</p>
","3","2131316","",""
"31660207","359862","2015-07-27 18:06:59","0","1154","<git><git-stash>","How to find the physical location of a git repo on Stash server?","<p>Given Stash URL,</p>

<pre><code>http://stash.abc.net/scm/gui/something.git
</code></pre>

<p>How do I know the physical location of this repo? I am looking to find a directory to which I can <code>cd</code> to </p>

<p>EDIT: What is not clear please?</p>
","4","359862","",""
"48791266","5476782","2018-02-14 15:55:38","4","4922","<git><git-stash>","git delete last stash commit only","<p>When I have more stashes than one, sometimes I need to drop one or two before the last one:</p>

<pre><code>&gt; git stash
stash@{0}: WIP on 0.9.1: e59f763 UPDATE deploy script UPDATE requirements
stash@{1}: WIP on dev: c9f86fb ADD index view ADD return view ADD welcome
</code></pre>

<p>In this case I want to drop <code>@{0}</code>. If I <code>git stash pop</code> I got into merge conflicts that I have to solve manually, maybe not only once, to get rid of the stashed commit.</p>

<p>Usually, I create another branch:</p>

<pre><code>git checkout -b temp  
git stash pop
# solve merge-conflicts
git checkout branch_for_stash@{1}
git stash pop
</code></pre>

<p>Is there any (<code>git</code>) command to remove the last, or even any stashed commit? </p>
","3","5476782","",""
"41291788","3487317","2016-12-22 21:18:47","4","1400","<git><git-stash>","git stash clear, except a specific stash","<p>Sometimes I use <code>git stash</code> to quickly get rid of any spikes or experiments that I think I might want to revisit. A lot of the time, I don't revisit them and my stash list becomes polluted.</p>

<p>I'd like to remove everything in my <code>git stash</code> except one specific stash.</p>

<p>Example: my <code>git stash list</code> looks like this: </p>

<pre><code>stash@{0}: On test-branch: try something
stash@{1}: WIP on spiked-branch: 2cc4751 another spike attempt
stash@{2}: On master: 2cc4751 experimental refactoring
stash@{3}: WIP on spiked-branch: 3ccfc4d first spike attempt
</code></pre>

<p>I'd like to just keep <code>stash@{2}</code>. Is there an easy way to do this?</p>

<p>I know I can achieve my results by taking the following steps:</p>

<pre><code>git reset --hard origin/master #=&gt; ensure I have clean branch
git stash pop stash@{2} #=&gt; put stash on current branch
git stash clear #=&gt; clear all stashes
git stash #=&gt; re-stash what I popped in step 2
</code></pre>

<p>This seems tedious. Is there a more efficient way?</p>
","2","3487317","",""
"48856649","9378178","2018-02-18 21:14:00","7","2454","<git><git-branch><git-merge><git-stash>","Make a snapshot of working directory with git","<p>I sometimes need to make a snapshot of the current (possibly dirty) working directory. <code>git stash save -u</code> is very similar to what I need but there are two problems:</p>

<ol>
<li>I want my working directory to stay in the same state (keep untracked files untracked)</li>
<li>In case I need to come back to the saved state (maybe a month later), it would not be easy to <code>git stash apply</code> because I first need to find the state before <code>git stash</code>.</li>
</ol>

<p>I currently have the following sequence of commands that works for me but I would like to know if there is a more elegant way of doing it.</p>

<pre><code># on branch master
git add .
git commit -m ""Temporary commit on the original branch""
git checkout -b snapshot_of_master_yyyy-mm-dd-hh-mm-ss HEAD~
git merge master
git checkout master
git reset HEAD^
</code></pre>

<hr>

<p>Thank you everyone for the answers and explanations! I am going to do something like this mostly based on @XavierGuihot's answer</p>

<pre><code>git stash -u # -u to include untracked files
git checkout -b snapshot_of_master_yyyy-mm-dd-hh-mm-ss
git stash apply
git add --all
git commit -m ""Snapshot""
git checkout master
git stash pop --index # --index to recover the state of indexed files
</code></pre>
","3","9378178","0","0"
"41304610","1282160","2016-12-23 16:11:52","7","921","<git><git-stash>","Run tests only for staged files: `git stash -k -u` and `git stash pop` will raise conflicts on partial staged files","<h1>tl;dr</h1>

<p>I want to run tests only with staged files before commit:</p>

<ol>
<li><code>git stash save -k -u</code> to stash unstaged/untracked files/changes before testing</li>
<li>run tests with staged files</li>
<li><code>git stash pop</code> to restore changes/files at step 1.</li>
</ol>

<p>The problem is using <code>git stash pop</code> will raise conflicts on the files with partial staged. Resolving the conflicts will lead to lose the partial staged/unstaged changes (you need to pick partial lines to staged again).</p>

<blockquote>
  <p>Update: If you want to know the shell script to run this procedure, please jump to the last section for more information.</p>
</blockquote>

<h2><strong>NOTE: only adjacent lines (or close enough) with partial staged will cause this issue.</strong> For example, if you have 6 new line changes in a file:</h2>

<pre><code>1 +| a     (add to staged)
2 +| b     (add to staged)
3 +| c     (add to staged)
4  | d     (keep unstaged)
5  | e     (keep unstaged)
6  | f     (keep unstaged)
</code></pre>

<p>Now use <code>git stash -k -u</code> and then <code>git stash pop</code> will raise conflict.</p>

<h1>Demonstrate the question</h1>

<p>Git provides three phases for changes before commit: <code>staged</code>, <code>unstaged</code> and <code>untracked</code>.</p>

<p>Any changes will be added to <code>unstaged</code>. Before commit, you can pick some of lines or files and add them to <code>staged</code> by <code>git add</code>.</p>

<p>Now, after adding some of code to <code>staged</code>, I want to run tests with only staged files to make sure they were suitable for commit, so I need to stash <code>unstaged</code> and <code>untracked</code> changes (new files) by <code>git stash -k -u</code> and keep <code>staged</code> changes.</p>

<p>Say, for example, I have 3 file changes: file A is fully staged, file B is partial staged (some of code), and file C is a new file which is untracked.</p>

<pre><code>[staged]
  file A
  file B (only stage some of code)
[unstaged]
  file B
[untracked]
  file C (new file)
</code></pre>

<p>After running <code>git stash -k -u</code>, all unstaged/untracked changes are stashed.</p>

<pre><code>[staged]
  file A
  file B (only stage some of code)
[unstaged/untracked]
  &lt;none, clean&gt;
</code></pre>

<p>Here comes the problem. After running tests and then <code>git stash pop</code>, it raises conflicts on file B because it is partial staged. I'm sure that I did not change file B when stashing and testing.</p>

<p>I wonder how to auto-merge with <code>git stash pop</code> without any conflict just like before I stashed them.</p>

<h1>My workflow</h1>

<p>I think this is a very usual workflow</p>

<pre><code>  development start
          |
[make changes (unstaged)] 
          |
(pick changes to staged for commit by `git add`)&lt;---|
          |                                         |
          V                     (pick other changes to fulfill tests)
[partial staged/unstaged]                           |
          |                                         |
(stash unstaged changes by `git stash -k -u`)       |
          |                                         |
(run tests only with staged files for commit)       |
          |                                         | 
(restore stashed files by `git stash pop`)          |
          |                                         |
          |------------&lt;if test failed&gt;-------------| 
          |
    &lt;if test success&gt;
          |
[commit staged files by `git commit`]
          |
          V
keep development or next commit
</code></pre>

<p>I need a way to <code>stash pop</code> without losing staged/unstaged state for all changes. Keeping staged files is very important to commit or fulfill test by adding other changes.</p>

<h2>Update with solution: a shell script to run the procedure</h2>

<p>According to @torek's answer, I write a shell script to run tests with only staged files:</p>

<pre class=""lang-sh prettyprint-override""><code>#!/bin/sh -e

# stash all unstaged changes
# (-k: unstaged files; -u: new added files; -q: quite)
echo '--------------------------------------------------------------'
echo '---- Stash all unstaged/untracked files (git stash -k -u) ----'
echo '--------------------------------------------------------------'
BEFORE_STASH_HASH=$(git rev-parse refs/stash)
git stash -k -u -q
AFTER_STASH_HASH=$(git rev-parse refs/stash)
if [ ""$BEFORE_STASH_HASH"" == ""$AFTER_STASH_HASH"" ]; then
  echo '\n\n---- Stash failed! Please check and retry. ----\n\n';
  exit 1;
fi;

# run test only with staged files
echo '-------------------'
echo '---- Run tests ----'
echo '-------------------'
&lt;run your tests here&gt; ||      #### &lt;=== replace your test command here
(echo '\n\n---- Tests failed! Please fix it before commit. ----\n\n')

# restore all stashed changes
# http://stackoverflow.com/questions/41304610/
echo '-----------------------------------------------------------'
echo '---- Restore all stashed files (git stash pop --index) ----'
echo '-----------------------------------------------------------'
git reset --hard -q &amp;&amp;
git clean -df -q &amp;&amp;
git stash pop --index -q ||
(echo '\n\n---- Restore failed! Please check and fix it. ----\n\n')
</code></pre>
","8","1282160","0","0"
"2840816","135414","2010-05-15 16:18:53","203","134758","<git><git-stash><git-checkout>","git stash blunder: git stash pop and ended up with merge conflicts","<p>I did a <code>git stash pop</code> and ended up with merge conflicts. I removed the files from the file system and did a <code>git checkout</code> as shown below, but it thinks the files are still unmerged. I then tried replacing the files and doing a <code>git checkout</code> again and same result. I event tried forcing it with <code>-f</code> flag. Any help would be appreciated!</p>

<pre><code>chirag-patels-macbook-pro:haloror patelc75$ git status
app/views/layouts/_choose_patient.html.erb: needs merge
app/views/layouts/_links.html.erb: needs merge
# On branch prod-temp
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   db/schema.rb
#
# Changed but not updated:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       unmerged:   app/views/layouts/_choose_patient.html.erb
#       unmerged:   app/views/layouts/_links.html.erb

chirag-patels-macbook-pro:haloror patelc75$ git checkout app/views/layouts/_choose_patient.html.erb
error: path 'app/views/layouts/_choose_patient.html.erb' is unmerged
chirag-patels-macbook-pro:haloror patelc75$ git checkout -f app/views/layouts/_choose_patient.html.erb
warning: path 'app/views/layouts/_choose_patient.html.erb' is unmerged
</code></pre>
","1","135414","0","0"
"3243231","38765","2010-07-14 03:33:42","11","1633","<git><git-stash>","Is it possible to choose a git stash when they're described by the date stashed?","<p>I'm able to list git stashes by date with</p>

<pre><code>git stash list --date=local
</code></pre>

<p>but how do I select a revision without getting</p>

<pre><code>fatal: Needed a single revision
</code></pre>
","0","38765","",""
"3269086","336925","2010-07-16 21:46:14","9","2150","<git><pre-commit-hook><git-stash>","git: Can I stash an untracked file without adding it to the index?","<p>A related question <a href=""https://stackoverflow.com/questions/835501/git-how-do-you-stash-an-untracked-file"">How do you stash an untracked file?</a> was answered with ""track the file.""  This doesn't work for my particular needs, however.</p>

<p>I'm trying to stash everything that isn't in the index with <code>git stash save --keep-index</code> so that I can validate the index in my pre-commit hook. The idea is from the ""Testing partial commits"" example of the git-stash man page. I want to make sure that what I'm actually committing passes the tests and not just whats in the working directory. Here's what I have so far:</p>

<pre><code>echo ""Running tests on the staging area.""
git stash save --keep-index
# configure, build, run tests, clean
git stash pop; true
</code></pre>

<p>This seems to work until I have untracked files in my working directory which don't get stashed. Some searching resulted in a feature request from two years ago: <a href=""http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=461485"" rel=""nofollow noreferrer"">Option to save untracked and/or ignored files in stash</a>, but nothing else.</p>

<p>Should I be using stash at all? Perhaps theres a better way involving temporary branches or something.</p>
","0","336925","0","0"
"22108074","90511","2014-02-28 23:56:52","3","905","<git><git-stash>","How do I undo a partial git stash?","<p>I had a dirty working directory and used <code>git stash save -p</code> to selectively stash some of the changes. My intention is splitting what used to be a big commit into two smaller commits. The problem now is that I accidentally stashed the wrong thunks so I want to do it again. I tried doing a <code>git stash pop</code>, as suggested in <a href=""https://stackoverflow.com/questions/10827160/undo-a-git-stash"">this question</a> but doing that gives me this error: </p>

<pre class=""lang-none prettyprint-override""><code>error: Your local changes to the following files would be overwritten by merge:
    my_file.js
Please, commit your changes or stash them before you can merge.
Aborting
</code></pre>
","0","90511","0","0"
"41226396","1534368","2016-12-19 15:52:00","6","3848","<git><git-branch><git-commit><git-stash><git-reset>","How do I save work in progress without using git-stash?","<p>I have a git directory with this situation:</p>

<pre><code>ProgSoul@PROGSOUL-LENOVO:~/esercizio3_2$ git status
Sul branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   A

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   A

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        B
</code></pre>

<p>In this situation I have:</p>

<ul>
<li>there is a file named A in the index with a string ""AA"" inside it</li>
<li>I modified the file A with ""AAA"" inside it but I didn't add this change on the stage. So in the working directory I have A with a string ""AAA"" inside it</li>
<li>an untracked empty file B</li>
</ul>

<p>My teacher wants me to temporarily suspend my work, create a BUGFIX file, commit it and restore my previous situation.</p>

<p>I achieved it through these commands:</p>

<pre><code>git stash --include-untracked
touch BUGFIX
git add BUGFIX
git commit -m ""Aggiunto file BUGFIX""
git stash pop --index
</code></pre>

<p>With these commands I saved my initial situation and restored it once my fix has been commited.
My teacher also asked me to reach this goal without using git-stash.</p>

<p>I followed the help in the stash documentation:</p>

<pre><code>git checkout -b WIP
git commit -a -m ""WIP""
git checkout master
touch BUGFIX
git add BUGFIX
git commit -a -m ""BUGFIX""
git checkout WIP
git reset --soft HEAD^
</code></pre>

<p>With git reset --soft I restored the index but the changes not staged for commit have been lost.</p>

<p>With git reset --mixed I restored the changes not staged for commit but the index has been lost.</p>

<p>How can I restore the same initial situation once I commit the fix without using git stash?</p>
","7","1534368","0","0"
"12681529","699700","2012-10-01 21:40:25","145","20469","<git><git-stash>","In git, is there a way to show untracked stashed files without applying the stash?","<p>If I run <code>git stash -u</code>, I can stash untracked files.  However, said untracked files don't show  up at all with <code>git stash show stash@{0}</code>.  Is there any way to show untracked stashed files without applying the stash?</p>
","1","699700","0","0"
"30357497","397230","2015-05-20 18:20:50","2","302","<git><git-stash>","I misplaced some work, but I know its somewhere in my git-stash stack","<p>I was in the middle of fixing a feature when another issue of greater priority arose. Instead of creating a new branch, committing, and moving back to the master branch like I usually do, I used <code>git stash</code>. I forgot that I never finished the fix, and just left it sitting in my stash. I often use <code>git stash</code> to move changes around between branches set up with different project configurations to test against multiple build environments, so I'm always stashing things. Some time later I realized that the fix wasn't anywhere to be found in the master branch, and I remembered that I stashed it a while ago. I know for a fact that I still must have it, as I always use <code>git stash apply</code> instead of <code>git stash pop</code>, but I don't have any idea how far back in the stack these changes are. I do, however, know that all of the changes for this fix were made in a single source file, if that helps.</p>

<p>Is there a ""best"" way to try to find this lost fix? I could just run <code>git stash pop</code>, see if it restores the fix, <code>git reset --hard</code> if it doesn't, <code>git stash drop</code> if there was a merge conflict, and repeat until I find it, but I was hoping for something a little less destructive. It always seems like with Git, there's at least 10 different ways to accomplish anything you might want to do in terms of managing your code, so I'd like to get a second opinion before I start demolishing my stash stack.</p>
","1","397230","",""
"13495818","42473","2012-11-21 14:49:28","1","3329","<git><git-merge><git-rebase><git-stash><git-reset>","How do I rework a git merge commit?","<p>I would like to amend a merge commit which failed a unit test on our continuous integration server, but I don't want to leave a commit which fails tests in the history.</p>

<p>Since this commit was only used by the CI server (and would not have been pulled down by anyone else) I would like to fix up the merge and then <code>--force</code> push it to replace the existing failed merge commit.</p>

<p>My problem is, I can't work out how to easily get back to the state immediately before the original commit was made, so that I can fix the failing test, recommit the merge and then force push that change up.</p>

<p>I don't really want to have to redo the whole merge, since there are quite a few files with conflicts which had to be resolved and all but one was resolved successfully.</p>

<h2>What I have tried so far</h2>

<h3>Attempt 1: <code>git reset</code></h3>

<p>My first attempt was to do a mixed reset back to the commit before the merge commit, fix the bug introduced by the merge and then recommit.</p>

<pre><code>git reset HEAD^
# Fix the failing test
git commit
</code></pre>

<p>Unfortunately this results in a non-merge commit which silently incorporates all of the branch changes - not really what I want. *8')</p>

<h3>Attempt 2: <code>reset</code>, <code>stash</code>, <code>merge</code> &amp; <code>apply</code></h3>

<p>I then attempted to use stash to save the changes I made during my first attempt to merge:</p>

<pre><code>git reset HEAD^
git add .               # Since there were untracked files
git stash
git merge branch
git stash apply         # Fails
git add .
git stash apply         # Merged but with conflicts
</code></pre>

<p>Unfortunately when <code>git stash apply</code> attempts to merge my stashed changes with the existing conflicted merge files it fails with the error</p>

<blockquote>
  <p>Cannot apply to a dirty working tree, please stage your changes</p>
</blockquote>

<p>If I dutifully make my working directory clean by using <code>git add .</code> then the <code>git stash apply</code> runs but now not only do I have conflicts, I have conflicts with conflicts in them and any files which should have been removed have been added back in.</p>

<h3>Attempt 3: <code>amend</code> and/or <code>rebase</code>.</h3>

<p>I tried the <a href=""https://stackoverflow.com/a/13496331/42473"">nice simple suggestion</a> by <a href=""https://stackoverflow.com/users/1507392/qqx"">qqx</a> to just fix the problem and <code>git commit --amend</code> the original commit, but without actually going back to the mid-merge state you lose access to the merge tools.</p>

<p>Once I've committed, I lose the ability to run <code>git mergetool {file}</code> as it just returns with the error:</p>

<blockquote>
  <p>{file}: file does not need merging</p>
</blockquote>

<p>When trying to fix up a merge conflict, I really like being able to see my base, left, right and current revisions all together using tools like <code>kdiff3</code>.</p>

<p>using <code>rebase</code> suffers the same issue.</p>

<hr>

<p>Any hints on a workflow which could allow me to achieve my desired result would be appreciated.</p>
","0","42473","",""
"13576940","561309","2012-11-27 03:27:49","5","1357","<cvs><git-stash>","Equivalent of git stash in CVS?","<p>I need to test some old version of our source code, however I have some local changes. So I would like to ""stash"" these changes, checkout the old version, do some tests, then go back to the current version, and restore my changes. Is it possible to do this kind of workflow in CVS? Basically, what I need is the equivalent of <code>git stash/restore</code>.</p>
","1","561309","",""
"31267019","2003165","2015-07-07 11:13:40","3","18942","<git><github><git-stash>","git checkout branchname is not working","<p>I have created new project into stash repository and also i have created few branches in stash for this new project. I am able to clone the project from git bash but when i try to checkout particular branch i was getting below error </p>

<pre><code>git checkout feature/Project_branch

error: pathspec 'feature/Project_branch' did not match any file(s) known to git.
</code></pre>

<p>but if i use as below then its working</p>

<pre><code>git fetch origin

git checkout feature/Project_branch
</code></pre>

<p>There are other projects which i used to checkout it was working without using <code>git fetch origin command</code>, but in my new repository case its throwing above error.</p>

<p>Can any one please help me to unsderstand, is there any configuration i have to do to directly checkout the branch with <code>git checkout</code> without using <code>git fetch</code> command?</p>
","1","2003165","",""
"31273614","2753864","2015-07-07 15:55:52","8","4665","<git><git-stash>","Untracked files lost after git stash, working on branch and stash pop","<p>Please understand the scenario:<br>
1. created a new branch a day ago and pushed my work there.<br>
2. worked on sublime whole day, modified existing files, created some new files.<br>
3. Didn't add or commit, but stashed, switched to another branch, commited there and popped the stash<br><br>
Whoa !! new files (untracked files) lost</p>

<p>Is this the normal behaviour of stash or I might get this data back.</p>

<p>Any help would be appreciated.
Thanks :)</p>
","0","2753864","0","0"
"31334204","2746028","2015-07-10 06:46:33","8","11317","<git><git-stash>","Doing a git stash doesn't remove changes in git local","<p>When I do <code>git status</code>, I see some files having local changes (seems to be indentation changes).</p>

<p>And when I do <code>git stash</code>, it doesn't remove those files from the queue. It blocks my auto pull script from fetching from remote git. </p>

<pre class=""lang-none prettyprint-override""><code>$ git stash
Saved working directory and index state WIP on develop: 05c60a5 Merge remote-tracking branch 'origin/develop' into develop
HEAD is now at 05c60a5 Merge remote-tracking branch 'origin/develop' into develop

$ git stash
On branch develop 
Your branch and 'origin/develop' have diverged and have 23 and 127 different commit(s) each, respectively.

Changed but not updated:
(use ""git add &lt;file&gt;..."" to update what will be committed)
(use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory) 

    modified:   config/buznames/businessname_map.
    modified:   public/css/_lib/dropdown.less
    modified:   public/css/_lib/secureBadge.less
</code></pre>
","8","2746028","0","0"
"13818076","439592","2012-12-11 10:17:07","1","2028","<git><ignore><git-stash>","Can git-stash ignore modifications to a tracked file","<p>I am working on a project which has a bit of an uncommon behaving thing:</p>

<p>One of the files in the source code is a file that contains serious code, but it can edit itself to also include some configuration. Whether this is good design is a different discussion, but to be able to test my project, this file needs to be in its modified state.</p>

<p>Before I commit anything, I normally do an A-B comparison between the situation before and after my  contribution. I use <code>git stash</code> to switch between base and my dirty working copy. The problem is that when using <code>git stash</code>, it also reverts my config-thing.</p>

<p>My current workaround is cumbersome: I do a <code>git add path/to/settingsfile</code> and then <code>git stash --keep-index</code>, but I rather dislike this workaround. Is there a  more elegant solution to have git ignore all modifications to this file unless I specify otherwise?</p>
","3","439592","0","0"
"49199278","1894517","2018-03-09 17:40:35","0","53","<git><github><git-stash>","How can I see what are the steps involved in any git command","<p>Is there any way or neat documentation where I could see what are all the steps or stages when we run a git command.</p>

<p>For example, when we do a git pull.  I believe</p>

<ul>
<li>git fetch is run</li>
<li>then git pull</li>
</ul>

<p>But that's something I devised from logs. Is there any way I could actually see what is run as part of a git command e.g. <code>git stash -p</code>. I tried to search for a documentation etc but didn't find anything.</p>

<p>Please help!</p>
","0","1894517","0","0"
"14264467","823078","2013-01-10 18:08:54","14","4898","<git><git-stash>","How to recover the index after a git stash / git stash pop?","<p>After adding some changes to the index with git add -p, I then issued a git stash but forgot to add --keep-index. Then I stupidly did a git stash pop, and all my changes to the index were gone. Is there a way to recover the index to the state before the git stash?</p>
","3","823078","0","0"
"14267841","166838","2013-01-10 21:46:23","3","701","<git><git-stash>","Is there a way with to prevent ""git stash pop"" from marking files as modified?","<p>I implemented a git-hook to scan my commits through pyflakes and jshint, and after reading Yipit's commentary on <a href=""http://tech.yipit.com/2011/11/16/183772396/"" rel=""nofollow"">why most pre-commit hooks are broken</a>, I chose to implement his <code>git stash</code> and <code>git stash pop</code> suggestions.</p>

<p>Unfortunately, <code>git stash pop</code> marks the files as 'modified', which then causes my IDE to warn me whenever I go back to that page "" modified on disk.  Reread from disk?""  It then asks ""Are you sure you want to edit this buffer?"" and finally ""Are you sure you want to save this buffer over a modified file?""</p>

<p>I appreciate everything it's trying to do for me, but it's asking me about functionally non-existent ""changes"".</p>

<p>Short of playing weird guessing games with <code>touch</code> is there some way to prevent <code>git stash pop</code> from marking all of the files it touched as changed?</p>
","0","166838","0","0"
"3124185","338581","2010-06-26 14:23:59","5","3274","<git><dvcs><git-stash>","Is it possible to drop a single file from git stash?","<p>Is it possible, without pop whole stash and save another without this particular file?</p>
","0","338581","0","0"
"31567232","871784","2015-07-22 15:14:50","0","55","<git><git-stash><git-stage>","Did a git stash - had unstaged changes, is there a way to reverse that?","<p>i did a git stash and had some changes that were not added to the index, when i did a git stash apply, they were not reapplied. Is there a way to get back from this?</p>

<p>Thanks and kind regards</p>
","6","871784","",""
"48320046","6322310","2018-01-18 11:18:11","0","131","<git><version-control><git-stash>","Use git stash apply to reach recent head commit","<p>I worked in the branch master and <code>HEAD</code> points to commit <code>1</code>.</p>
<p>During my work time, my colleague has pushed his commit with number <code>2</code> into the master branch. And now the <code>HEAD</code> points to commit <code>2</code>.</p>
<p>After commit of my colleague, I want to update the pushes of my colleague into my current working directory. But I have still my own local changes in my working directory.</p>
<p>In this case I put firstly my local change into local stash. And then I pull my local working directory in recent head commit <code>2</code>.</p>
<p>So my question now, how can I apply the changes in stash to current <code>HEAD</code> commit <code>2</code>?</p>
<p>If I use <code>git stash apply</code> or <code>git stash add</code>, I will go to the old state based with 0001. I don't want this. I want to push my local changes into the recent commit <code>2</code>.</p>
<p>My thought here is, maybe I can use somehow cherry pick?</p>
","4","6322310","",""
"40899204","438581","2016-11-30 22:13:48","4","338","<git><git-stash>","Remove git stashes beyond N","<p>I stash changes in git regularly and have built up quite a long stash list (and 'stache, coincidentally). My current repo has 68 stashes. Is there a way to cleanup the stash list by clearing all but the N most recent stashes?</p>

<p>Options I've looked into:</p>

<p><code>git stash clear</code> - removes the entire stash list</p>

<p><code>git stash drop &lt;stash&gt;</code>- removes the specific <code>&lt;stash&gt;</code></p>

<p>The first option would remove the entire stash list, the latter would require a few dozen commands. I'm looking for something along the lines of how <code>git rebase -i HEAD~N</code> works, where a number can be supplied to the command. </p>
","0","438581","",""
"48339061","216129","2018-01-19 10:33:49","1","167","<git><git-stash>","What option did I miss when I stashed untracked file in Git, but it didn't restore with git stash pop?","<p>I was testing two things at once and had working tree status like:</p>

<pre><code>Changes not staged for commit:
    modified:   component/file.html
    modified:   component/file.scss
    modified:   component/file.ts
    modified:   component2/file.scss

Untracked files:
    common/file.scss
</code></pre>

<p>I decided to temporarily stash all scss-files to focus on others with <code>git stash push -m ""scss files for later"" -- *.scss</code> So my working tree now looks like this:</p>

<pre><code>Changes not staged for commit:
    modified:   component/file.html
    modified:   component/file.ts
</code></pre>

<p>Later I popped the same stash back, but the untracked scss (which was <em>apparently</em> stashed) file didn't pop:</p>

<pre><code>Changes not staged for commit:
    modified:   component/file.html
    modified:   component/file.scss
    modified:   component/file.ts
    modified:   component2/file.scss
</code></pre>

<p>As I popped (vs. applied) the stash, the stash ref is now gone.</p>

<p>Should I have applied some sort of flag on pop?<br>
Or was the file gone already when I pushed the stash (meaning: should I have applied some sort of flag <em>on push</em>)?</p>

<p>(git version 2.15.0)</p>

<hr>

<p>Steps to reproduce on gist: <a href=""https://gist.github.com/keinajar/c52d90cded491f82ffbbf5939fc1b044"" rel=""nofollow noreferrer"">https://gist.github.com/keinajar/c52d90cded491f82ffbbf5939fc1b044</a></p>

<p>Referring to gist: if I try to <code>git stash push -- common/d.scss</code> instead of <code>*.scss</code> I get the error which (based on current answers) would be the expected outcome:</p>

<pre><code>error: pathspec 'common/d.scss' did not match any file(s) known to git.
Did you forget to 'git add'?
</code></pre>

<p>So instead of me missing options, this is a bug?</p>
","0","216129","",""
"66622520","747050","2021-03-14 08:38:37","0","534","<git><gitignore><git-stash>","Ignore changes in the files, which are in the git repository, locally","<p>To make my project work locally I have to change one file. But this file has to be unchanged in the remote. How do I make git ignore the changes in this file when using <code>git status</code>, <code>git add</code> and <code>git stash</code> command?</p>
<p>What I tried:</p>
<p>1.</p>
<pre><code>git update-index --assume-unchanged filename
</code></pre>
<p>makes it work with 'git status' and 'git add', but 'git stash'+'git stash pop' restores the file to the original state, breaking my local setup.</p>
<p>2.
I found this solution, but it changes remote as well, which I don't want to:
<a href=""https://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/"" rel=""nofollow noreferrer"">https://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/</a></p>
<p>3.
adding the file to <code>.git/info/exclude</code> doesn't work, since it is a file from the repository, not a new file.</p>
","6","747050","",""
"14318234","1132363","2013-01-14 12:14:43","864","1412213","<git><git-pull><git-stash>","How do I ignore an error on 'git pull' about my local changes would be overwritten by merge?","<p>How do I ignore the following error message on Git pull?</p>

<blockquote>
  <p>Your local changes to the following files would be overwritten by merge</p>
</blockquote>

<p>What if I <strong>want</strong> to overwrite them?</p>

<p>I've tried things like <code>git pull -f</code>, but nothing works.</p>

<p>To be clear, I only want to overwrite specific changes, not everything.</p>
","5","1132363","0","0"
"32208272","3607573","2015-08-25 15:37:40","3","3061","<git-stash><git>","switching branches with uncommitted changes in git","<p>I am working on my master branch and have some uncommitted changes inside the master branch. I have already created a feature branch and I am able to switch to my feature branch using the <code>git checkout feature_branch</code> command. I have couple of doubts here which I am listing below:</p>

<ol>
<li>Why am I seeing the uncommitted changes in my branch when I have made my changes inside my master branch. If I commit my changes in the master branch and switch to my feature branch, I do not see the committed changes specific to master. I am expecting the same behavior for uncommitted changes also.</li>
<li>I came across the stash command in Git and there it was mentioned that if you have any uncommitted changes inside the master branch, and would like to switch to some other branch, git will not allow you and hence you need to stash the changes inside the master branch and then only switch to the development branch. I did not face this issue. Am I missing something here and if so, what is the significance of using the stash command?</li>
</ol>
","0","3607573","0","0"
"22413626","943022","2014-03-14 19:03:17","1","1014","<git><git-branch><git-stash>","How do I save work in a (no branch) in git?","<p>I have a project in git. I checked out an earlier commit, now I'm on an un-named branch. I want to save the work here and go back to the latest branch but still be able to come back. How do I do that, is it stash &amp; pop?</p>

<p>Here is what transpired. I realized that I needed to go back to the state of things several months ago. So I ran</p>

<pre><code>$ git log
</code></pre>

<p>and located the commit number, E.G.</p>

<pre><code>commit 1910e8fdf0b37cd5c7a693572bf89767a2615c7d
Author: user account &lt;user@xxx.xxx.xxx&gt;
Date:   Fri Jun 15 15:00:43 2012 -0700

--&gt; WORKING VERSION &lt;--
</code></pre>

<p>At which point I switched to that commit by typing:</p>

<pre><code>$ git checkout 1910e8fdf0b37cd5c7a693572bf89767a2615c7d
</code></pre>

<p>I made a few changes. Now I need to jump back to the latest version but I want to preserve the changes that I made in the earlier version. I don't want to merge them; they should be a separate branch. But I'm not on a branch. When I type ""git branch"" I get this:</p>

<pre><code>$ git branch
* (no branch)
  bias_turn_on_experiment
  hst_persist
  master
</code></pre>

<p>And ""git status"" shows me this:</p>

<pre><code>$ git status
# Not currently on any branch.
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   sn102
#       modified:   timIRmisc.asm
#       modified:   timing.def
#
</code></pre>

<p>So how do I save the state of things, go back to master, and then come back to this current state, without effecting any of the other branches? Is it git stash? But then where do I pop it back again? Or maybe git stash branch? I'm not sure. Thanks.</p>
","1","943022","",""
"32226863","3311276","2015-08-26 12:35:19","0","613","<git><git-stash>","git stash but keep whats being stash instead of reverting to last commited change","<p>So when I <code>git stash</code> it will pack my changes since the last commit to a list, however is their any way that I do not have to commit, but still stash and keep the uncommitted changes or of their is any other git command for that ?</p>
","2","3311276","",""
"48904806","3355","2018-02-21 11:31:08","0","57","<git><git-stash>","Can I force git to stash, even when there are no local changes","<p>I have a pre-push script in .git/hooks that does the following:</p>

<pre><code>git stash -u
&lt;build / test&gt;
git stash pop
</code></pre>

<p>However, if the working directory is clean, then git stash -u does nothing, and no stash is created. Then pop pops the previous stash item. Is there a way of forcing stash?</p>

<p>A workaround is to create a temp file, that I then delete to force there to be something to stash.</p>
","3","3355","",""
"41439024","7143532","2017-01-03 08:11:50","15","9933","<git><rebase><git-pull><git-stash>","Can I use git pull --rebase instead of ""git stash git pull git stash pop""?","<p>What is the difference between </p>

<pre><code>git pull --rebase
</code></pre>

<p>and </p>

<pre><code>git stash
git pull
git stash pop
</code></pre>
","0","7143532","0","0"
"41440933","1197249","2017-01-03 10:06:03","5","99","<git><git-commit><git-stash>","Why does git stash creates 2 commit objects? Seems like 1 was adequate","<p>When doing <code>git stash</code> 2 commits are created. One is referenced by the <code>stash</code> ref and has 2 parent commits. One parent is the index of where we did the stash. The other parent has the actual contents of what we stashed.<br>
Why are 2 commits needed for the stash? It seems to me that only 1 was sufficient. I.e. just make <code>stash</code> ref to the commit that has the actual contents.<br>
Would this not work?</p>
","0","1197249","",""
"67051791","8816796","2021-04-12 01:58:07","0","116","<git><git-checkout><git-stash>","automatically switch from and then to git branch without losing topic changes","<p>I got a cronjob to run a test against my master branch during my break. First thing, it checks out master. Let's assume I was checkout to <code>topic</code> when I left with some uncommitted changes. I'd like to ensure when I get back, the check is done &amp; topic branch is checked out &amp; as it was when I left.</p>
<pre class=""lang-sh prettyprint-override""><code>[programmatically check if you need to stash anything and do so if needed]
git checkout master 
[do your thing]
git checkout - [and nicely unstash changes if there were any. Do not blindly unstash old stashes otherwise.]
</code></pre>
","2","8816796","",""
"49543213","1028503","2018-03-28 20:02:25","1","124","<git><diff><git-stash>","figuring out which git stash is applied","<p>I had created a bunch of stashes (each with a message btw, using 'git stash save ""my message"" ') and then applied one of those stashes (using 'git stash apply stash@{n}') which was NOT the most recent stash.</p>

<p>Now few days later, I can't remember which one I had applied. I ran a bunch of long-running tests which passed after applying the stash so it is important for me to know the answer.</p>

<p>To figure out which stash I may have applied, I looked thru the documentation and the SO questions but didn't find a clue. The only idea that comes to my mind is doing </p>

<pre><code>git diff &gt; mydiff.txt
</code></pre>

<p>and then comparing mydiff.txt with each of the patch files obtained for the stashes. That is, obtain the patch for say the second stash: </p>

<pre><code>git show -p stash@{1} &gt; 1.txt
</code></pre>

<p>and compare mydiff.txt against 1.txt:</p>

<pre><code>diff mydiff.txt 1.txt
</code></pre>

<p>to figure out if stash@{1} was the one I applied. This is a bit tedious especially in the scenario where changes were made after applying the stash.
Is there a better/""less-brute-force"" way to find out which stash was actually applied? Would greatly appreciate any pointers from people who know better.</p>
","1","1028503","",""
"4225350","279627","2010-11-19 13:17:11","31","4848","<git><pager><git-stash>","Turning off the pager in git for the stash command only","<p>I generally like the use of the pager in git, but for <code>git stash</code> the pager annoys me.  When calling <code>git stash list</code>, I don't want to be shown the three lines of output in the pager -- it forces me to press <code>q</code> just to make the output unavailable again when typing the folow-up <code>git stash pop</code> command.</p>

<p>One solution would be to use</p>

<pre><code>git --no-pager stash list
</code></pre>

<p>but that's to much typing (I'm lazy).  Following the <a href=""http://git-scm.com/docs/git-config"" rel=""noreferrer"">man page of <code>git config</code></a>, I tried</p>

<pre><code>git config --global pager.stash false
</code></pre>

<p>but this doesn't seem to do what the documentation says (actually, I didn't notice any effect).  Then I tried</p>

<pre><code>git config --global alias.stash ""--no-pager stash""
</code></pre>

<p>again without any noticable effect.  </p>

<p>The configuration gets properly updated, for example</p>

<pre><code>git config pager.stash
false
</code></pre>

<p>It just does not have any effect.  What am I missing?  And how can I achieve that <code>git stash</code> does not use the pager?</p>
","5","279627","0","0"
"67111324","2831843","2021-04-15 15:24:56","0","377","<git><git-diff><git-stash>","git diff shows nothing","<p>After I do a <code>git reset --hard HEAD</code>, I do a <code>git status</code> and everything is clean.  Then I do a <code>git checkout stash@{0} -- pom.xml</code> to get the pom.xml file in the stash.  When I do a <code>git status</code> it shows <code>modified:  pom.xml</code>.  When I do a <code>git diff</code>, it shows nothing.   Why?</p>
","2","2831843","",""
"67166183","15631250","2021-04-19 16:54:18","0","553","<git><git-stash>","How can we `git stash apply` to move between all states of the repo?","<p>For example, if we have one simple solution in our code, we could</p>
<pre class=""lang-sh prettyprint-override""><code>git stash save &quot;Simple solution&quot;
</code></pre>
<p>and now we are all &quot;clean&quot; and can try another solution.  But just to experiment, I did a</p>
<pre class=""lang-sh prettyprint-override""><code>git stash apply stash@{0}
</code></pre>
<p>to see that the simple solution is working.  Now, can I <code>git stash apply</code> to go back to the &quot;clean&quot; state?  It seems we can go to any of the <code>git stash</code> state by <code>git stash apply stash@{0}</code>, <code>git stash apply stash@{1}</code>, etc, but how can we go back to the &quot;clean&quot; state without needing to save another stash?</p>
","11","15631250","",""
"14398166","1031218","2013-01-18 11:40:35","1","467","<git><git-stash>","git stash save assume changed file","<p>I changed a tracked file.</p>

<p>I then marked the file with <code>--assume-unchanged</code> flag.</p>

<p>I ran <code>git stash save</code>, but nothing stashed.</p>

<p>How to stash save assume changed file?</p>
","0","1031218","0","0"
"49768206","997606","2018-04-11 06:42:52","1","417","<git><git-stash>","Can I disable the git stash?","<p>I would rather make temporary commits than use the git stash.  More importantly, I would prefer my colleauges with less experience with git avoid the stash.</p>

<p>Is there a way to disable the git stash so that commands that interact with it terminate with an error?</p>

<p>EDIT: Thanks for the answers suggesting what I can do instead, but what I am really looking for is a ""yes"" or ""no"" answer, if possible with some justification, to the literal question.</p>
","8","997606","",""
"14988929","2092726","2013-02-20 20:06:53","72","47904","<git><git-log><git-stash>","Show all stashes in git log","<p>I would like to see all stashes in <code>git log</code> output. Does anyone know if there is a way to do that?</p>
<p>Edit: I want to see all commits in the log -- <em>including</em> stash commits. I tried the command:</p>
<pre><code>git log --date-order --all
</code></pre>
<p>But it returns only the top most stash. I would like to see commits that represent other stashes too.</p>
","0","2092726","0","0"
"68920240","13424259","2021-08-25 09:24:17","3","2496","<git><git-stash><git-merge-conflict>","Overwrite via git stash apply","<p>I am having a merge conflict when using <code>git stash apply</code>.  How can I hard overwrite files using stash?<br />
Something like that</p>
<pre><code>git stash apply -Xours
</code></pre>
","3","13424259","0","0"
"68396930","10873713","2021-07-15 15:48:06","1","153","<git><git-stash>","How better to restore modified files after git stash?","<p>Making git pull I got errors  :</p>
<pre><code>error: Your local changes to the following files would be overwritten by merge:
        public/js/file.js
        public/file.json
Please commit your changes or stash them before you merge.
</code></pre>
<p>I saved list of all modified files with</p>
<pre><code>git status
</code></pre>
<p>and command run</p>
<pre><code>git stash
</code></pre>
<p>I merged all files now I need to restore all my changes. List of all files is rather big, including
deleting/new files, like:</p>
<pre><code>On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

        deleted:    app/Http/Controllers/ItemController.php
        new file:   app/Http/Controllers/BoxController.php
        
Changes not staged for commit:
  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

        modified:   .gitignore
        modified:   app/Http/Controllers/ItemController.php
        
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)

        app/Http/Controllers/ItemController.php
        app/Http/Requests/ItemRequest.php
</code></pre>
<p>When I need to restore some modified files I can apply changes manually, but</p>
<ol>
<li><p>How to restore deleted/new files?</p>
</li>
<li><p>Is the listing of all modified files is rather big, how can I make it better, not manually checking them one by one?</p>
</li>
</ol>
","3","10873713","",""
"3945826","244005","2010-10-15 20:20:30","5","9883","<git><conflict><git-stash>","git stash questions","<p>I am running msysgit 1.7.3.1.  If I run stash apply, and there is a conflict,
all of my stash changes get staged. Is this the correct behaviour? I found it a
little surprising.</p>

<p>Another question: if I have stashed 10 files, and there is a conflict in one of
them, will stash apply abort when it has a conflict, or will it apply all
non-conflicted files.</p>

<p>Finally, if I do the following:</p>

<pre><code>git stash
git pull
git stash apply
</code></pre>

<p>and another developer has removed a file that I have stashed, then I am unable
to apply the stash  on this file. How can I retrieve my changes from the stash?</p>

<p>Thanks!</p>
","1","244005","0","0"
"3962970","329737","2010-10-18 20:10:04","0","4288","<git><git-stash>","git stash apply does not restore all the files","<p>Ok, so i have run into this a few times and it's really annoying.  Scenario:</p>

<pre><code>modify a file say a.txt (add say two lines)
stash it
stash apply
git reset
remove the two lines added to a.txt because you want to commit and push these partial  changes
git add a.txt
git commit the above, and push the changes (push irrelevant for this discussion)
git reset --hard
now do git stash apply
</code></pre>

<p>Now, a.txt is the same version as was committed, it should be the version that i stashed. Thus i have now lost my changes to a.txt.  If i go back one commit, ie. git co head~1 and apply my stash it still doesn't work.</p>

<p>A fix would be much appreciated.</p>

<p>Thanks.</p>

<p>Okay, so i tried extensively with a script to reproduce this, trying many variations of merge commits etc and could not get reproduce it.  Unfortunately it's very difficult in a script for me to reproduce the complexity of the source tree i was working on when this happened.  The one other caviat i'm thinking of now is that i had multiple stashes based on different versions of the same branch, with some files pushed, some files committed locally that were in those stashes.  My commands only ever applied the last stash as described earlier, but during this whole process, i lost 2 stashes, they just disappeared when executing git stash list.  So i maybe this somehow also affects the outcome.  If anybody runs into anything similar please update this thread.  If anybody is interested in taking my testing further, i can post my script (completely self contained, creates the repository and everything).  In the mean time i will continue using git and the next time it happens maybe i get a better idea of what happened.</p>

<p>Also this happened at work, hence why i can't supply original code, but i will take a look at the gitk results again and post my findings as that might help.</p>

<p>Thanks for all the help!</p>

<p>Ok, so looking at gitk shows that my stash is based on an index (which i think is normal), then that index is based off of a commit, that seems to only exist in the stash (this does not make sense.  Ie. the save has the commit message i gave it when i committed it to my private branch, but somehow, my private branch does not have that commit as part of the gitk path.</p>
","2","329737","0","0"
"22540913","507670","2014-03-20 17:36:22","0","103","<git><git-stash>","Strange git file created during stashing","<p>Recently after stashing changes in git, I noticed a strange file named ""s"" in the root directory of my project. It looks like some kind of corrupted git diff.</p>

<p>What might have caused this? How can I prevent it from occurring again?</p>

<pre><code>[1mdiff --git a/app/assets/stylesheets/&lt;redacted&gt;/_blog.scss b/app/assets/stylesheets/&lt;redacted&gt;/_blog.scss[m
[1mindex e2b54f0..a7363a1 100644[m
[1m--- a/app/assets/stylesheets/&lt;redacted&gt;/_blog.scss[m
[1m+++ b/app/assets/stylesheets/&lt;redacted&gt;/_blog.scss[m
[36m@@ -3,8 +3,9 @@[m
 $login-gray: #3f3a3c;[m
 $contact-us-blue: #0087fc;[m
 $blog-background-gray: #f2f2f2;[m
[32m+[m[32m$blog-navbar-color: #343434;[m
 [m
[31m-// Header layout[m
[32m+[m[32m// Site header layout[m
 [m
 $blog-navbar-height: 64px;[m
 [m
[36m@@ -35,7 +36,7 @@[m [m$blog-navbar-height: 64px;[m
   }[m
 }[m
 [m
[31m-// Header elements[m
[32m+[m[32m// Site header elements[m
 [m
 .login {[m
   background-color: $login-gray;[m
[36m@@ -47,6 +48,12 @@[m [m$blog-navbar-height: 64px;[m
   background-color: $contact-us-blue;[m
 }[m
 [m
[32m+[m[32m// Blog header[m
[32m+[m
[32m+[m[32m#blog-navbar {[m
[32m+[m[32m  background-color: $blog-navbar-color;[m
[32m+[m[32m}[m
[32m+[m
 // Trapezoids[m
 [m
 .trapezoid {[m
[1mdiff --git a/app/views/blog/posts/index.html.haml b/app/views/blog/posts/index.html.haml[m
[1mindex 1f2d61c..1e9517d 100644[m
[1m--- a/app/views/blog/posts/index.html.haml[m
[1m+++ b/app/views/blog/posts/index.html.haml[m
[36m@@ -21,7 +21,16 @@[m
           %li[m
             %a.contact-us.trapezoid.bottom-left-trapezoid{ href: ""#contact"" }[m
               Contact Us![m
[31m-  #blog-navbar[m
[32m+[m[32m  %nav#blog-navbar.navbar[m
[32m+[m[32m    .navbar-header[m
[32m+[m[32m      %button{ type: ""button"", class: ""navbar-toggle"", ""data-toggle"" =&gt; ""collapse"", ""data-target"" =&gt; ""#bs-example-navbar-collapse-1"" }[m
[32m+[m[32m        %span{ class: ""sr-only"" }[m
[32m+[m[32m          Toggle navigation[m
[32m+[m[32m        %span{ class: ""icon-bar"" }[m
[32m+[m[32m        %span{ class: ""icon-bar"" }[m
[32m+[m[32m        %span{ class: ""icon-bar"" }[m
[32m+[m[32m      %a{ href: ""/blog"" }Blog home[m
[32m+[m
 [m
 #blog-content[m
   %h1 &lt;redacted&gt;[m
</code></pre>

<p>Note: in Sublime, most lines have one or more <code>[ESC]</code> characters that aren't appearing in SO. </p>

<p>I could find nothing strange about the commands I entered around this time (e.g. no noticeable typos). Also, this was over ssh, if that matters.</p>
","0","507670","",""
"22674383","1285959","2014-03-26 22:28:58","1","3988","<git><atlassian-sourcetree><git-stash>","SourceTree git stash missing","<p>During move of git repository from one hard drive to another my GIT stash broke, or Sourcetree configuration is wrong. From that time my old stashes are not accessible and new one are visible only using GIT Terminal</p>

<p>I can apply stash on my working copy from terminal but it also should be visible in sourcetree sidebar. Any ideas what is wrong and how to fix this?</p>

<p><img src=""https://i.stack.imgur.com/SyUPK.png"" alt=""enter image description here""></p>
","1","1285959","0","0"
"42696911","3037949","2017-03-09 13:40:21","0","108","<git><github><git-stash>","Is git stash/git stash pop okay for accidental branch switch?","<p>Are <code>git stash</code> and <code>git stash pop</code> a good solution for this problem?</p>

<p>I was working on branch B, but something happened accidentally and unbeknownst to me, put me back into an older branch, branch A, where I kept working blindly on various tasks.</p>

<p>Git wants me to commit my new work to branch A, before I can switch over to branch B, but I can't (shouldn't) do that.</p>

<p>Is it safe (meaning will I not lose all my work, but be able to put it over into its correct branch) to, while on branch A (the wrong branch), do <code>git stash</code>, then switch to branch B (correct branch) and do <code>git stash pop</code>? Will I encounter any disasters by doing that? Will all of my work be instantly in the correct branch and I can commit and push as normal?</p>

<p>I am nodding off and unsure of how not to blow up my Git project.</p>

<p><a href=""https://stackoverflow.com/a/556986/3037949"">This post</a> answers my question, I think, but is it up to date? Also, from that post:</p>

<blockquote>
  <p>To also stash currently untracked (newly added) files, add the
  argument <code>-u</code></p>
</blockquote>

<p>What is the difference between uncommitted and untracked/newly added files? Aren't uncommitted files more or less ""newly added""?</p>
","0","3037949","",""
"41855523","3878940","2017-01-25 15:34:09","24","9887","<git><git-stash>","How to remove range of git stash?","<p>I want to remove all stash'es, except most recent, from <code>git stash list</code>. </p>

<p>E.g. I want to remove stash <em>1</em> to <em>3</em> in a single git command: </p>

<pre><code>stash@{0}: On master: Test related changes
stash@{1}: On master: Tets
stash@{2}: On master: Integrate bunyan logging and http2
stash@{3}: On master: Integrate bunyan logging and http2
</code></pre>

<p>I checked this answer <a href=""https://stackoverflow.com/a/5737041/3878940"">https://stackoverflow.com/a/5737041/3878940</a>, but its applicable to delete only a single stash. Is there any git command to delete a range of <code>stash</code>es?</p>
","1","3878940","0","0"
"24428536","376998","2014-06-26 10:51:56","11","718","<git><gnupg><sign><git-stash>","GPG sign all git commits without stash","<p>git 2.0 has the config option <code>commit.gpgsign</code> which will sign all commits.</p>

<p>This will also apply for <code>git stash</code> and will ask for the password of my gpg key.</p>

<p>Is ther a way to automatically sign all commits, tags,... but exclude stashes?</p>
","2","376998","0","0"
"24907924","3767386","2014-07-23 10:23:57","4","7632","<git><git-stash>","No stash found when using git stash branch","<p>Using git, I am working on the master branch and have a few unadded and uncommitted files. I don't want to add them or commit them to the master. Instead, I am trying to stash the files and move to a new branch to add them and commit them there. However, this is failing with the error message: ""No stash found."". Please see the log below:</p>

<pre><code>$git status

# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   Makefile
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   newfile.c
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>And then when I try to use git stash</p>

<pre><code>$git stash branch mywork
No stash found.
</code></pre>

<p>I am pretty sure the I used git stash in a similar manner before, but I can't see why it is failing now. How can I stash my changes to another branch and commit them there?</p>
","0","3767386","0","0"
"41673806","3469484","2017-01-16 10:04:47","0","214","<git><git-stash>","Git: Simulate git stash without stash command","<p>Git stash is a very helpful family of commands but it does not add anything to the commands (i.e. you can't commit without the commit command, while you can have workarounds to stash with no stash command). </p>

<p>How would you do it if you had to stash your work but did not have the stash command?</p>
","8","3469484","",""
"22722575","","2014-03-28 20:25:08","55","52336","<git><git-stash><merge-conflict-resolution>","git remove file from stash","<p>I have a stash with a bunch of files in it.</p>

<p>But I can't apply my stash because of a conflicting file. I've identified the problematic file in my stash and I want to remove it.</p>

<p>How can I remove a single file from a stash without destroying the entire thing?</p>
","2","","0","0"
"32532922","847480","2015-09-11 22:18:55","-1","131","<git><git-flow><git-stash>","developer vs release branch gitflow","<p>I'm new to gitflow so have a few questions.</p>

<p>Do we really need the <code>developer</code> branch? What purpose does it serve?</p>

<p>We can very well have a <code>master</code> branch where everything gets merged to production level. Then for each release we have release branches which get deployed to production for release. Feature branches are where developers code and then with a pull request merge to the relevant release branch. </p>

<p>What am I missing here?</p>
","1","847480","",""
"32545963","2338813","2015-09-13 03:15:42","0","64","<git><git-stash>","Merge-conflict-free way to git stash changes","<p>If I <code>git stash -k</code> (stash all unstaged changes) and <code>git pop</code>, I get merge conflicts if one of the files was modified in the staging area and also had an unstaged change.</p>

<p>I'm writing a script that calls <code>git stash -k</code>, lints the files, and commits them if they pass. If not, I'd like to <code>git stash pop</code> and return the working tree to precisely its previous state.</p>

<p>Is this possible? Is there a merge-conflict-free way of achieving this?</p>

<p>Thank you!</p>
","1","2338813","",""
"32877523","857695","2015-10-01 00:08:48","0","2168","<linux><git><bash><git-stash><git-config>","Store credentials for git commands using HTTP","<p>I would like to store Git credentials for git pulls permenantly on a linux machine, and git credential.helper doesn't work ( I think because I'm not using SSH ) - I get that error ""Fatal: could not read password for 'http://....': No such device or address"". Given that I'm not the administrator of the repository and only HTTP is allowed for authentication, and fortunately I don't care about the safety of the password. What can I do to put the git pull command in a bash file and avoid prompting the user for password?</p>

<p>I hope there is a way around it.</p>
","0","857695","0","0"
"16071720","214373","2013-04-17 23:00:39","5","726","<git><git-stash>","Get git stash parent commit","<p>Is there a way to retrieve the commit from which a stash was originally created?</p>

<p>When creating a stash with the default command <code>git stash</code> the original commit is saved in the stash message, so it usually looks like:</p>

<pre><code>stash@{0}: WIP on master: abc123 This is the message of some commit.
</code></pre>

<p>However, if <code>git stash save 'a stash message'</code> is used, the commit does not appear in the stash list:</p>

<pre><code>stash@{1}: On master: my own message
</code></pre>

<p>So how could it be retrieved?</p>
","0","214373","",""
"32676076","1056563","2015-09-20 05:19:15","0","725","<git><git-stash>","Reversing a git stash resulting in patch failed","<p>I had done a </p>

<pre><code>git stash
</code></pre>

<p>and then </p>

<pre><code>git rebase origin/master
</code></pre>

<p>which were both successful.</p>

<p>However</p>

<pre><code>git stash apply 
</code></pre>

<p>was not so happy:</p>

<pre><code>$git stash apply
Auto-merging yarn/pom.xml
CONFLICT (content): Merge conflict in yarn/pom.xml
Auto-merging unsafe/pom.xml
CONFLICT (content): Merge conflict in unsafe/pom.xml
Auto-merging tools/pom.xml
CONFLICT (content): Merge conflict in tools/pom.xml
Auto-merging streaming/pom.xml
CONFLICT (content): Merge conflict in streaming/pom.xml
Auto-merging sql/hive/pom.xml
CONFLICT (content): Merge conflict in sql/hive/pom.xml
Auto-merging sql/hive-thriftserver/pom.xml
CONFLICT (content): Merge conflict in sql/hive-thriftserver/pom.xml
..
</code></pre>

<p>It seems a consensus approach for reverting the <code>apply</code> were:</p>

<pre><code>$git stash show -p | git apply -R
</code></pre>

<p>However that results in:</p>

<pre><code>error: patch failed: assembly/pom.xml:20
error: assembly/pom.xml: patch does not apply
error: patch failed: bagel/pom.xml:20
error: bagel/pom.xml: patch does not apply
error: patch failed: core/pom.xml:20
error: core/pom.xml: patch does not apply
error: patch failed: examples/pom.xml:20
error: examples/pom.xml: patch does not apply
error: patch failed: external/flume-assembly/pom.xml:20
..  and so on ..
</code></pre>

<p>So then is there any means to roll the whole <code>stash apply</code> back?</p>
","0","1056563","",""
"32769106","5032466","2015-09-24 19:10:28","0","735","<git><git-stash>","How to discard a specific file changes from git stash","<p>I want to be able to apply a stash that looks like this:</p>

<pre><code>git stash show --stat stash@\{1\} 
 extensions/99/fill-thresholds.json            |  2 +-
 html/js/1.js                           | 10 ++++++++++
 html/pages/su/2.html            |  4 ++--
 html/pages/su/popups/3.html | 21 +++++++++++----------
 sql/2 - data/4.sql              |  6 +++---
 sql/3 - keys/5.sql               |  4 ++--
 sql/5 - views/6.sql          |  2 +-
 7 files changed, 30 insertions(+), 19 deletions(-)
</code></pre>

<p>When I try to apply that stash I get a conflict error:</p>

<pre><code>git stash apply stash@\{1\} 
Auto-merging sql/2 - data/4.sql
CONFLICT (content): Merge conflict in sql/2 - data/4.sql
</code></pre>

<p>And then I have tried to resolved the conflict but then my other files were not applied, if I run the apply that stash again I get that conflict error again. </p>

<p>I don't really care about the file with the error so I was thinking if there's a way to discard that file only from the stash so when I try to apply it I don't get that error or how can I continue applying the stash after I resolved the conflict?</p>
","2","5032466","",""
"32814034","38765","2015-09-27 23:51:30","9","1481","<git><git-stash>","Show message as well as diff with git stash show","<p>Using the command line tool <code>git-stash</code>, how can I view both the stash message, as well as the diff, for a given stash?</p>

<p>The documentation for <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-stash.html"">git stash</a> mentions that you can configure how a diff is shown, but it doesn't mention messages anywhere other than in how to create a stash.</p>
","3","38765","0","0"
"69017180","28324","2021-09-01 16:01:48","2","429","<git><git-stash>","How can I ignore spaces when applying a git stash?","<p>I have some modifications in a git stash, and I would like to apply them using <code>git stash pop</code> or <code>git stash apply</code>. But I have changed some indentation in the files that the stash changes, and when I try to apply the stash, I get a bunch of merge conflicts. Is there a way to ignore whitespace while applying the stash, similar to the <code>-Xignore-all-space</code> option for <code>git merge</code>?</p>
<p>I tried <code>git stash apply -Xignore-all-space stash@{2}</code> and it told me <code>error: unknown switch `X'</code>.</p>
","1","28324","",""
"33747004","38765","2015-11-17 00:13:04","1","414","<git><git-stash>","Can I hide a stash in git?","<p>Is it possible to hide a stash in git?</p>

<p>Basically, there's a stash that I'm 95% sure I won't need. I'd like to be able to not show it when I do a normal <code>git stash list</code>, but if I decide I do need it after all, I'd like to be able to pass some sort of <code>--show-everything</code> option to <code>git stash list</code> and find it.</p>
","7","38765","",""
"34685407","1274817","2016-01-08 20:21:01","18","2413","<git><merge><git-stash>","Can I git stash a merge in progress?","<p>I'm in the middle of resolving conflicts for a git merge, but I want to get back to a clean state temporarily without losing the work I've already done on the merge. If I try to git stash, I get errors for each file for which a conflict has not yet been resolved: ""needs merge"". </p>

<p>Is there a good way to save the merge-in-progress? The only idea that I have is to clone the repo into a different folder, but that seems excessive. </p>
","3","1274817","0","0"
"41879816","4126167","2017-01-26 17:51:44","5","6293","<git><git-stash>","How to ignore trailing whitespace errors with git stash","<p>I have an unusual problem with git. I've pulled from a repo I haven't used in awhile, and for simplicity let's say I have two branches, develop and master. I was already in develop, and checked out master. I made no changes, I was just looking at the files. When I went to checkout develop, I could not because README.md was modified. Git diff showed the whole file was changed, with identical content, so I thought that was some sort of whitespace error.</p>

<p>I did git checkout -- README.md, and it still appeared modified. So then I tried git stash -p (so I could just stash that file). That gave me:</p>

<pre><code>warning: 3 lines add whitespace errors.
</code></pre>

<p>It went on to say:</p>

<pre><code>warning: squelched 55 whitespace errors
warning: 60 lines add whitespace errors.
</code></pre>

<p>And the file is still modified.</p>

<p>Is there any way to get around these errors? What could be causing it?</p>
","0","4126167","",""
"41970584","5390873","2017-02-01 01:43:02","1","19","<windows><githooks><git-stash>","How can I use clientside githook in stash?","<p>I have created a precommit clientside githook in my .git/hooks directory. This is a hidden directory but I want to save this to my repo. How can I save this in the repo and deploy this for other developers? I am using windows 7 and the precommit is a node mochajs unittest.</p>
","0","5390873","0","0"
"4596583","60531","2011-01-04 17:33:44","3","1332","<git><patch><git-stash>","Why doesn't git format-patch work for stashes?","<p>If I run</p>

<pre><code>git format-patch -1 stash@{0}
</code></pre>

<p>git returns silently without creating any file. Why does this happen? How can I save a stash in a format compatible with <code>git am</code>?</p>
","4","60531","",""
"4600037","38765","2011-01-05 01:14:57","15","4918","<git><git-stash>","Is there a maximum number of git stashes?","<p>Is there a maximum number of git stashes, or can you have as many as you like?</p>

<p>I'm aware that</p>

<pre><code>git stash list
</code></pre>

<p>doesn't list as many results as</p>

<pre><code>git stash list --date=local
</code></pre>

<p>But does Linus Torvalds think that anyone with more than <em>x</em> stashes is an idiot who deserves to lose the old stashes?</p>
","8","38765","0","0"
"60709856","13071709","2020-03-16 16:38:55","1","386","<git><hook><git-stash><git-add><pre-commit>","git pre-commit hook: interaction between git add -p and git stash","<p>I have written a git pre-commit hook which does the following:</p>

<ol>
<li>Stash any changes that are not staged for commit</li>
<li>Run tests</li>
<li>Unstash changes</li>
</ol>

<p>The purpose is to prevent false-positives or false-negatives on passing tests/compiling when staged changes depend on unstaged changes.  Generally, the hook works very well and has caught many mistakes on my part.</p>

<p>However, as implemented it does not interact well with <code>git add -p</code>:</p>

<ol>
<li>Stage changes with <code>git add -p</code> and then <code>git commit</code></li>
<li>Script runs: <code>git stash push -m ""pre-commit-${DATE} on ${BRANCH}"" -k -u -q</code></li>
<li>tests pass/fail</li>
<li><code>git stash pop -q</code> is run and results in a conflict, ruining my day and aborting the commit</li>
</ol>

<p>My workaround has essentially been to either use <code>git commit --no-verify</code> or stash things myself if I ever use <code>git add -p</code>.  However I am updating my git hooks and I'd like to <strong>update or replace the stash functionality to allow me to run tests on only staged changes while no longer conflicting with <code>git add -p</code>.</strong>  Is there a way to:</p>

<ul>
<li>pre-determine if a stash will conflict and defer it to after the commit is generated</li>
<li>use a mechanism other than stash that works well in a <code>pre-commit</code> script</li>
<li>""abort"" the pop if a merge conflict happens</li>
</ul>
","2","13071709","",""
"23671388","3315680","2014-05-15 07:04:15","3","133","<git><git-stash>","Is it possible to delete a single file (i.e the diff of one file) from git stash with several files","<p>I'm looking for a way to delete a single change from a stash compiled of several changes, anyone knows of a way to do it?
The best way for to describe it (due to the fact that <code>git commit</code> and <code>git stash</code> are so similar) is that I wish I knew a way to <code>git commit --amend</code> the stash.</p>

<p>It all started when I <code>git stash</code> a few changes before pulling from a shared repository.
while I was trying to <code>git pop</code> the code from the stash, I had a conflict (I couldn't resolve) with a file I didn't care for duo to the fact that I had a script to generate it automatically, and was more interested in the other files located in my stash.</p>

<p>While I was looking for a solution I've found this Q : <a href=""https://stackoverflow.com/questions/1105253/how-would-i-extract-a-single-file-or-changes-to-a-file-from-a-git-stash"">How would I extract a single file (or changes to a file) from a git stash?</a>  - it seemed promising, and was also given to someone else asking a similar question to mine, but it didn't help...</p>
","0","3315680","0","0"
"24520791","740923","2014-07-01 23:40:43","51","21209","<git><batch-file><git-stash>","Check if ""git stash"" stashed anything","<p>I have a Windows Command script designed to merge the <strong>dev</strong> branch into a project branch.  It starts by reading the current branch name, stashing changes, fetching and merging the dev and project branches, then switches back to the original branch and pops the stash.</p>

<p>The issue is there might not be any changes to stash.  This leaves the previous stash at the top of the stack.  When it gets to the end of the script and pops the stash, it's popping the previous stash which is unrelated to the current branch.</p>

<pre><code>Set SourceBranch=dev
Set ProjectBranch=project

:: Stash current changes.
For /F ""tokens=1,2"" %%a In ('Git branch -q') Do If ""%%a""==""*"" Set CurrentBranch=%%b
Git stash save -u

:: Pull latest source branch.
Git checkout %SourceBranch%
Git pull
For /F ""tokens=1,3"" %%a In ('Git branch -q -v') Do If ""%%a""==""*"" Set MergeHash=%%b

:: Merge source into project branch.
Git checkout %ProjectBranch%
Git pull
Git merge --commit %MergeHash%||Exit 1

:: Return to original branch.
Git checkout %CurrentBranch%
Git stash pop
</code></pre>

<p>How can I get feedback from <code>Git stash</code> or <code>Git status</code> to determine whether I need to pop the stash?</p>
","2","740923","0","0"
"25058925","214892","2014-07-31 12:31:30","1","1298","<git><git-stash>","Applying git stash - newly added files not included?","<p>If you have a number of files that are newly added to a repository, but not committed, and you then execute <code>git stash</code>, <code>git pull</code> and <code>git stash apply stash@{0}</code>, what reasons exist for the newly added files to not be included in the apply?</p>

<p>This happened to me yesterday when a coworker modified the <code>htaccess</code> and <code>htpasswd</code> files and created a backup on a staging environment.  These backup files were not added to the repository and caused a fatal error and abort of a git pull.  So I added the files via <code>git add &lt;filename&gt;</code>, and then executed a stash, pull and apply, only to find the new htaccess and htpasswd files were not included in the apply.  </p>

<p>However, <code>git stash show -p stash@{0} | grep ""diff""</code> showed that the filenames were in the stash and I was able to see the contents by omitting the <code>grep</code> pipe.  This solution was resolved via <code>git checkout stash@{0} -- &lt;filename&gt;</code>, but the question remains as to why a stash apply did not include these files.</p>
","1","214892","",""
"7039968","888302","2011-08-12 12:20:31","8","615","<git><git-stash>","Keep stash after git filter-branch --subdirectory-filter","<p>I recently split out my repository (residing in <code>bigproj</code>) using <code>git filter-branch --subdirectory-filter deep/in/my/project</code>. Then, I moved <code>.git</code> directory to <code>deep/in/my/project</code>.</p>

<p>Now, stash is in a strange state, where the top stash is something like:</p>

<pre><code>stash@{0}: filter-branch: rewrite
</code></pre>

<p>I can't drop this stash, as I get this error (after <code>git stash drop</code>):</p>

<pre><code>refs/stash@{0}: not a valid stashed state
</code></pre>

<p>Now, even if I know the refid of stash@{1}, it still contains diffs for files in <code>bigproj</code> hierarchy. Is it possible to re-write stash data, so that it only contains files belonging to <code>deep/in/my/project</code> hierarchy?</p>
","0","888302","",""
"43911591","2123942","2017-05-11 09:30:40","0","36","<git><git-stash>","Why does git stash pop acts as apply","<p>Anybody know why the drop part of the pop would not work for me?
pop is behaving like apply.</p>

<p>My process is:</p>

<pre><code>git stash save ""name of save""
git stash pop
</code></pre>

<p>then:</p>

<pre><code>git stash list (and ""name of save"" will still be listed). 
</code></pre>

<p><a href=""https://i.stack.imgur.com/Z62QC.png"" rel=""nofollow noreferrer"">enter image description here</a></p>
","1","2123942","",""
"25191985","3363760","2014-08-07 20:54:01","2","168","<git><git-stash>","files that have not been changed show up in unstaged list after git stash","<p>I have a repo with changes that I want to stash...so I do. After the stash a number of files show back up as being changed even though the only ""change"" is that all lines show as being removed and then re-added. I have NOT made these changes. To clarify, these files did not show up prior to the stash, as there were no changes made to them. Here's the most interesting part, after experimenting for many hours, I have found that I can copy the entire directory, perform a 'git checkout -- .' then a 'git status', and then the files that show up erroneously are gone. If I try the 'git checkout -- .' on the original repo, 'git status' shows that they are still there and nothing I do will get rid of them. Another thing to note, even after copying the repo, if I go a 'git status' first, prior to the 'git checkout -- .', it continue to erroneously show the files as being changed when, in fact, they have not been changed.</p>

<p>One more thing to note, I have read many posts about line endings, etc. This is NOT what's going on here. The files are identical, in every way.</p>
","10","3363760","",""
"62962964","1798351","2020-07-17 23:23:16","0","148","<git><git-bash><git-stash><git-hash>","`git stash create` does not return a hash","<p>Example (bash):</p>
<pre><code>&gt; cd ~/repo1
&gt; git stash create
</code></pre>
<p>Clearly something is wrong, maybe there is already something <em>stashed</em>?</p>
<pre><code>&gt; git stash drop
No stash entries found
</code></pre>
<p>Maybe there is something wrong with git, pick a random other <em>repository</em> and <em>rerun</em>:</p>
<pre><code>&gt; cd ~/repo2
&gt; git stash create
f6fed634ce4de28d8696de39f6a338df8edef59c
</code></pre>
<p>What's going on here?</p>
","4","1798351","",""
"25752101","2841163","2014-09-09 19:22:55","0","453","<git-stash><git>","Trying to reverse apply stash, git stash show and git apply giving errors","<p>I'm following this <a href=""http://git-scm.com/book/en/Git-Tools-Stashing"" rel=""nofollow"">git stashing guide</a> but when I try to un-stash by using the command </p>

<pre><code>$ git stash show -p stash@{0} | git apply -R
</code></pre>

<p>or </p>

<pre><code>$ git stash show -p | git apply -R
</code></pre>

<p>I keep getting these errors</p>

<pre><code>error: patch failed: app/scripts/app.js:20
error: app/scripts/app.js: patch does not apply
error: patch failed: app/views/main.html:34
error: app/views/main.html: patch does not apply
</code></pre>

<p>How do I get past this error?</p>

<p>When I do <code>$git stash list</code> it shows <code>stash@{0}: WIP on my_branch: dc19ed5 My Commit</code></p>
","2","2841163","0","0"
"25993871","245549","2014-09-23 11:24:34","7","32954","<git><git-checkout><git-stash>","What is the difference between git-stash and git-checkout?","<p>I try to go from one local branch to another one. Git tells me that I cannot do it because my <code>local changes to the following files would be overwritten by checkout</code>.</p>

<p>Then I get a ""recommendation"" <code>Please, commit your changes or stash them before you can switch branches</code>.</p>

<p>I know that I do not need the changes to the mentioned file. It is OK to overwrite them. So, I try to <code>stash</code>. I execute <code>git stash file_name</code>. As a result I get:</p>

<pre><code>Usage: git stash list [&lt;options&gt;]
   or: git stash show [&lt;stash&gt;]
   or: git stash drop [-q|--quiet] [&lt;stash&gt;]
   or: git stash ( pop | apply ) [--index] [-q|--quiet] [&lt;stash&gt;]
   or: git stash branch &lt;branchname&gt; [&lt;stash&gt;]
   or: git stash [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]
               [-u|--include-untracked] [-a|--all] [&lt;message&gt;]]
   or: git stash clear
</code></pre>

<p>OK. It does not work. Then I try <code>git checkout file_name</code>. No complains from git. Then I can switch from one branch to another one. So, it seems that I got what I needed (go to the second branch without saving changes to the first branch).</p>

<p>However, I would like to ask why <code>stash</code> did not work, and how the final result would be different in case it had worked?</p>
","4","245549","0","0"
"42345040","343204","2017-02-20 12:49:42","3","2923","<git><git-stash>","git stash - No local changes to save but untracked files","<p>I'd like to stash some Untracked files. I tried:</p>

<pre><code>$ git stash
</code></pre>

<p>which gave</p>

<pre><code>No local changes to save
</code></pre>

<p>Running <code>git status</code> gives:</p>

<pre><code>$ git status
On branch develop
Your branch is up-to-date with 'origin/develop'.
Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    dir/

nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>Any suggestions?</p>
","1","343204","",""
"5047366","168143","2011-02-18 22:46:51","79","8012","<git><git-stash>","Why does `git stash -p` sometimes fail?","<p>I ♥ <code>git stash -p</code>. But sometimes, after a satisfying session of <code>y</code>, <code>n</code>, and <code>s</code>, I get this:</p>

<pre><code>Saved working directory and index state WIP on foo: 9794c1a lorum ipsum
error: patch failed: spec/models/thing_spec.rb:65
error: spec/models/thing_spec.rb: patch does not apply
Cannot remove worktree changes
</code></pre>

<p>Why?</p>
","7","168143","0","0"
"60675392","9905383","2020-03-13 18:13:54","0","581","<git><gitlab><git-stash><revert>","How to recover overwritten file that I git stashed?","<p>I attempted to pull, but git complained about local changes being overwritten so I stashed and pulled.
By pulling, I wrote over a file that I now want to revert back to how it was when I stashed it. How can I do this? When I run git <code>git stash show</code> it shows the single file is still there.</p>

<p>I want to keep all other pulled changes in my local repo, I just want to get that single file back to its old state. Thanks</p>
","1","9905383","",""
"60941833","8289918","2020-03-31 00:58:17","1","140","<git><git-stash><git-filter-branch>","Is it possible to retrieve a stash after running git filter-branch?","<p>I ran <code>git filter-branch --env-filter 'GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE'</code> to fix the commit dates after I rebased. However, I didn't know that my stash would be lost.</p>

<p>I've tried the following:</p>

<ul>
<li>running <code>git reflog --all</code>, checking out the earliest commit that it showed (<code>c9e4e26 HEAD@{37}: rebase (start): checkout e3536c9^</code>) and running <code>git stash list</code></li>
<li>running <code>git fsck</code>, checking out every unreachable/dangling blob and commit and running <code>git stash list</code></li>
</ul>

<p>Is there a way to retrieve that stash?</p>
","0","8289918","",""
"69177795","12989752","2021-09-14 12:29:04","-1","649","<git><git-stash>","how to recover files after (git stash save --include-untrack)","<p>How to recover files after (<code>git stash save --include-untrack</code>). I used angular 10 and
visual studio Code. I need to recover those files after this command delete it.</p>
","2","12989752","",""
"51977050","7478147","2018-08-23 01:07:04","2","765","<git><git-merge><git-stash>","Restore a _remote_ file after solving a merge conflict using git","<p>I've done several changes on my local files in a <code>parallel branch</code>. I used <code>git stash</code> to save my changes and to get other changes into <code>master</code> without having to push online. So I had to solve some merge conflicts about files redudants files. Step by step, this is my code on <code>git bash</code>: </p>

<pre><code>git stash
git pull origin master
git stash pop
git mergetool
</code></pre>

<p>I solved conflict about one file <code>myFile.py</code> using <code>meld</code> as mergetool. My problem is that I forgot a huge part of code in the <code>remote</code> file (<code>myFile_remote_7572.py</code>) during the merge step. Right now, I'm not able to find the file anywhere on my laptop. I want to restore it in order to find my last code without restarting merge step. Thanks...</p>
","0","7478147","",""
"51979493","10031415","2018-08-23 06:25:11","0","438","<github><git-stash>","I have 2 git branches develop and master but mistakenly some of the code is directly checked-in to master","<p>Some of the code is directly pushed to master which is not in develop branch</p>

<p>Also their is some code which is checked-in to develop but not merged to master yet</p>

<p>What would be the best possible way of syncing both branches so that both will have the same code</p>
","0","10031415","",""
"23494569","236081","2014-05-06 12:20:29","0","1031","<git><git-stash><git-reset><git-clean>","Is ""git clean"" followed by ""git stash clear"" redundant when creating a pristine checkout?","<p>I would like to write a script that guarantees a successful Git checkout without intervention from the user. I don't mind dumping anything that cannot be solved without user intervention: for example, uncommitted changes. I do want to keep explicitly ignored files (I consider these to be ""under version control"").</p>

<p>I made a script based on the cornucopia of answers to <a href=""https://stackoverflow.com/questions/52704/how-do-you-discard-unstaged-changes-in-git"">How do you discard unstaged changes in Git?</a> and fixing errors I encountered over time (similar to but not exactly the same as <a href=""https://stackoverflow.com/questions/11383094/unstaged-changes-left-after-git-reset-hard"">Unstaged changes left after git --reset hard</a> and <a href=""https://stackoverflow.com/questions/14318234/ignoring-your-local-changes-to-the-following-files-would-be-overwritten-by-merg"">Ignoring “Your local changes to the following files would be overwritten by merge” on pull</a>).</p>

<p>I am now concerned that my piecemeal script contains redundancies, or could be shortened. Are any of the following calls redundant?</p>

<pre><code>cd /SOME/FOLDER
git clean -df &amp; git checkout .
git stash
git stash clear
git checkout SOME-BRANCH # or git checkout -B SOME-REMOTE SOME-BRANCH [1]
# possibly followed by a manual call to: git pull --rebase SOME-REMOTE
</code></pre>

<p>[1] Could these calls be <code>git checkout -f</code> and <code>git checkout -fB</code>?</p>
","0","236081","0","0"
"60960252","12527480","2020-03-31 21:32:59","0","56","<git><git-stash>","git stash gives merge error / conflict that is unable to resolve","<p>I already have stashed my changes and I can see them when I use <code>git stash list</code>. I did <code>git pull --rebase upstream master</code> successfully. (It had conflict in FileA, I resolved it.) Now I want to get my latest stashed changes at <code>stash@{0}:</code>. So I use <code>git stash apply 0</code>. Its gives me message <code>Merge conflict in .gitignore</code>. I fixed / merged/ resolved conflict in .gitignore. </p>

<p>Then did <code>git stash apply 0</code>, I received same error <code>Merge conflict in .gitignore</code>. This time I again fixed .gitignore, and I committed this .gitignore file hoping it would take care. ( I did look up on stakcoverflow and found exact same issue faced by someone and took steps). </p>

<p>Then I again did <code>git stash apply 0</code> and same error again in loop. How to get past this error. </p>

<p>After <code>git stash apply</code> , I don't see all my changes that are supposed to be applied from the stash. I just get the conflict message for .gitignore but don't see other changes that I would like to see. </p>
","0","12527480","",""
"60969659","9484203","2020-04-01 11:17:42","13","5504","<git><git-stash>","How to add file to existing stash in git?","<p>When I did <code>git stash push &lt;path/to/file&gt;</code> it created <code>stash@{0}</code> for it.
Reusing the same command with different file creates another stash -> <code>stash@{1}</code>.
I have other files that logically belong to stash@{0}. </p>

<p>Can I somehow push file to existing stash?</p>
","2","9484203","0","0"
"42843705","3120446","2017-03-16 19:58:33","1","695","<git><git-stash><git-apply>","Pull non-binary files from git stash","<p>I'm pretty new to git.  On one computer I ran</p>

<pre><code>git stash save myfeature
git stash show -p &gt; myfeaturepatch
</code></pre>

<p>I copied <code>myfeaturepatch</code> to a second computer and ran</p>

<pre><code>git apply myfeaturepatch
</code></pre>

<p>I made some changes which included adding some font files (binaries) and then ran</p>

<pre><code>git stash save myfeature2
git stash show -p &gt; myfeaturepatch2
</code></pre>

<p>When I try to apply this second version back to my first computer, I get</p>

<pre><code>error: cannot apply binary patch to 'myfont.ttf' without full index line
</code></pre>

<p>My guess is I needed to run <code>git stash save --binary myfeature2</code> when I made the stash.  Unfortunately, since <code>git stash</code> deletes the changes it saves to the file, and since I can't apply my patch to either computer due to the above error, I don't currently have access to the changes I made.</p>

<p>I've tried a bunch of different <code>git apply</code> and <code>git stash</code> commands, but I don't have a complete enough understanding of what's going on and what the arguments mean to pull out just the non-binary files from my patch file.  I assume there's a way to do this.</p>
","0","3120446","0","0"
"5737002","97627","2011-04-20 21:43:46","926","826370","<git><git-stash>","How to delete a stash created with git stash create?","<p>Git stash seems to do a lot of what I want, except that it is a little hard to script, as the if you have no changes, then <code>git stash; git stash pop</code> will do something different than if you do have changes in your repository.</p>

<p>It appears that <code>git stash create</code> is the answer to that problem, and everything works, except for one thing… I can't get rid of the created stash. Is there any way to get rid of the stash?</p>

<p>To make it 100% clear what I am doing:</p>

<p>Create the stash:</p>

<pre><code>~/tmp/a(master) $ git stash create 
60629375d0eb12348f9d31933dd348ad0f038435
~/tmp/a(master) $ git st
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   new file:   b
#
~/tmp/a(master) $ git reset --hard
HEAD is now at 555d572 log message
</code></pre>

<p>Use the stash:</p>

<pre><code>~/tmp/a(master) $ git apply 60629375d0eb12348f9d31933dd348ad0f038435
fatal: can't open patch '60629375d0eb12348f9d31933dd348ad0f038435': No such file or directory
~/tmp/a(master) $ git stash apply 60629375d0eb12348f9d31933dd348ad0f038435
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   new file:   b
#
</code></pre>

<p>Delete the stash: (except that this last bit doesn't work)</p>

<pre><code>~/tmp/a(master) $ git stash drop !$
git stash drop 60629375d0eb12348f9d31933dd348ad0f038435
'60629375d0eb12348f9d31933dd348ad0f038435' is not a stash reference
</code></pre>
","2","97627","0","0"
"5996484","373361","2011-05-13 18:56:25","21","19146","<git><git-stash>","git - errors after merge conflicts during stash pop","<p>Original title: git - update all files that have not been changed</p>

<p>Currently I am trying to update all files in a git repository that have not been changed. Lets say for example I have:</p>

<ul>
<li>test1.py</li>
<li>test2.py</li>
</ul>

<p>test1.py has been modified locally while both files have been modified remotely. Now I tried:</p>

<pre><code>git stash
git pull
git stash pop
</code></pre>

<p>which restored my changes, giving me a warning that I need to merge <code>test1.py</code>. So far so good. The problem arises when I try to do the same process again (after both files have been again changed remotly). Git now says</p>

<pre><code>unmerged (6b126638f7c63aa648609afa60ab972a2403502b)
fatal: git-write-tree: error building trees
Cannot save the current index state
</code></pre>

<p>which makes me kind of sad. It just want a simple thing: Update all files that I haven't changed. I will take care of merging later.</p>
","1","373361","0","0"
"5506339","272203","2011-03-31 21:05:38","2278","1118199","<git><git-stash>","How can I git stash a specific file?","<p>How can I stash a specific file leaving the others currently modified out of the stash I am about to save?</p>

<p>For example, if git status gives me this:</p>

<pre><code>younker % gst      
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   app/controllers/cart_controller.php
#   modified:   app/views/cart/welcome.thtml
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>and I only want to stash app/views/cart/welcome.thtml, how would I do that? Something like (but of course this does not work):</p>

<pre><code>git stash save welcome_cart app/views/cart/welcome.thtml
</code></pre>
","5","272203","0","0"
"61118854","10681697","2020-04-09 10:14:31","0","190","<git><git-rebase><git-stash>","git - Make autostash reapply index, just like git stash's --index option","<p>I have <code>rebase.autostash=true</code> set in my global config, and it's great to be able to rebase a dirty working tree, but there doesn't seem to be a <code>--index</code> option to make the autopop restage my previously staged changes, like you can do when manually stashing and popping via <code>git apply/pop --index &lt;StashID&gt;</code>. Instead, after rebasing and autopopping, all changes are now unstaged.</p>

<p>Is there a way to add <code>--index</code> to autostashing?</p>
","0","10681697","",""
"23952575","2266261","2014-05-30 10:38:29","47","20306","<git><git-stash>","Is git stash stack pushed to the remote repo?","<p>Is my <code>stash</code> stack pushed to the <code>remote repo</code>? Or is it completely ignored? </p>

<p>I'm just curious if I should tend to it every once in a while to drop some of it to save space on the server.</p>
","0","2266261","0","0"
"5863372","228315","2011-05-02 22:57:46","8","5413","<git><git-stash>","git-stash unable to find work tree","<p>I'm trying to setup a git repository with a manually defined worktree via:</p>

<pre><code>cd /Users/braitsch/repos/project1
git --git-dir=. --work-tree=/Users/braitsch/projects/project1 init
</code></pre>

<p>After running the above I can add files located in ""/Users/braitsch/projects/project1""<br>via : git add somefile or git add .<br>
Commits work fine as do calls to ""git branch""</p>

<p>However, <code>git stash list</code> throws the following error:<br></p>

<blockquote>
  <p>fatal: /usr/local/Cellar/git/1.7.4.4/libexec/git-core/git-stash cannot
  be used without a working tree.</p>
</blockquote>

<p>Is stashing not supported in user defined work-trees?</p>

<pre><code>git config --local core.worktree
echoes out : /Users/braitsch/projects/project1
</code></pre>

<p>Any thoughts would be much appreciated!</p>

<p><strong>--------UPDATE--------</strong></p>

<p>As @jleedev noted below, there does appear to be a bug when attempting to call ""git stash"" from outside the worktree. However my workaround is to just cd into the worktree and then call stash by first preceding the path to the gitdir. Inconvenient, I know but the following works for the stash command:</p>

<pre><code>git --git-dir=""projects/proj1/.git"" stash list
</code></pre>

<p>This issue doesn't appear to plague other stock commands like add, commit, branch, etc. Just ""stash"" so far as I can tell.</p>

<p>If you are looking to break-away from the default structure of having your .git folder nested inside of your worktree, you might find the following steps useful:</p>

<ol>
<li>create a directory where you'd like to store your git repository</li>
<li>create a directory where you want keep the files your going to track
(both of these can be anywhere on your file system)</li>
<li><p>cd into your git repository folder and run:</p>

<pre><code>  git --git-dir=. --work-tree=""path-to-your-project-folder"" init
</code></pre>

<p>This will init a new repository and link it to your external worktree folder.<br></p></li>
</ol>

<p>To run standard add, delete, branch, commit commands, cd into the your git repository and run your command as usual.
To run stash however, be sure to cd into <strong>your worktree</strong> and then run stash as I noted above prefacing the command with the path to your gitdir.</p>
","0","228315","0","0"
"24736091","3755198","2014-07-14 11:59:50","0","80","<git><git-merge><git-stash>","code pulled from git removed my updates in same file (local)","<p>I have pulled my code from git. I know that some conflicts may happen. So I did the following commands for git pull.</p>

<pre><code>sudo git pull
</code></pre>

<p>...which did a fast-forward.<br>
Then I moved my local changes to buffer using</p>

<pre><code> sudo git stash
</code></pre>

<p>Then I pulled new code from git</p>

<pre><code>sudo git pull
</code></pre>

<p>...and got told I was already up-to-date.<br>
Then I merged my new changes with new git code</p>

<pre><code>sudo git stash pop
</code></pre>

<p>So now problem is, when I check my files all are those git files I couldn't find my changes that I stashed (my local instance updates not merged with my git code).</p>
","10","3755198","",""
"24955178","3088045","2014-07-25 11:53:10","3","674","<git><workflow><temporary><git-stash>","Which git commands can delete your stashes?","<p>I usually work with <code>git stash save ""What I´m working on""</code>, thinking that stashes are quite a safe place where to store temporary code.</p>

<p>But I wonder which are the <em>git</em> commands that could harm/delete my stash, and that I should be careful with for not loosing my work.</p>

<p>Except, obviously, for direct <em>git-stash</em> commands like:</p>

<ul>
<li><code>git stash drop &lt;stash&gt;</code></li>
<li><code>git stash pop</code></li>
<li><code>git stash clear</code></li>
</ul>

<p>An example I found is <code>git reflog expire --expire=30.days refs/stash</code>. But this would usually be executed on purpose.
But I would interested in cases where you could get an unexpected loss of your stashes while performing other operation than working on stashes:</p>

<ul>
<li>git pull/fetch?</li>
<li>git reset?</li>
<li>anything else?</li>
</ul>
","0","3088045","",""
"25196034","3449335","2014-08-08 04:25:18","2","52","<git><github><git-merge><git-rebase><git-stash>","Merge the changes made in the master while keeping the changes made locally in git","<p>I have cloned a particular repo. Suppose it is at state A. I have made some changes to it locally, suppose it is  A -> B.  But some changes have already been updated in the master branch of repo, suppose it is A->C. 
Now, I need to update my local repo and then merge my changes to it. That is, it should be A-> C-> B . How do I do this ? 
After googling a lot, I found out it can done using </p>

<pre><code>git stash
</code></pre>

<p>Some blogs said that even </p>

<pre><code>git rebase 
</code></pre>

<p>can be used to do it. Can you please help with the command sequence that I need to follow? (for merging conflicts I am using kDiff3)</p>
","0","3449335","",""
"6294437","25688","2011-06-09 14:28:35","4","1246","<git><git-merge><git-stash><merge-conflict-resolution>","git stash pop: avoiding stash drop and un-staging steps","<p>Sometimes when running <code>git stash pop</code> there are merge conflicts that need to be resolved. This happens a lot when I have to stash/pop before/after switching branches.</p>

<p>The conflicts are no problem to deal with, but this has two annoying side effects:</p>

<ol>
<li><p>All changes coming from the stash are now staged and have to be unstaged</p></li>
<li><p><code>stash@{0}</code> is not dropped and has to be dropped manually</p></li>
</ol>

<p>Looking for suggestions on how to make this process a little smoother.</p>
","0","25688","0","0"
"6543519","742719","2011-07-01 04:15:27","221","130739","<git><git-stash>","Undoing accidental git stash pop","<p>I stashed some local changes before doing a complicated merge, did the merge, then stupidly forgot to commit before running <code>git stash pop</code>.  The pop created some problems (bad method calls in a big codebase) that are proving hard to track down.  I ran <code>git stash show</code>, so I at least know which files were changed. If nothing else, I guess this is a lesson to commit more.</p>

<p>My question: is it possible to undo the stash pop without also undoing the merge?   </p>
","5","742719","0","0"
"51990912","3991688","2018-08-23 17:02:53","2","451","<git><git-rebase><git-stash><git-interactive-rebase>","""git stash store requires one <commit> argument"" during rebase --abort","<p>Every time I think I'm a Git wizard some entirely new and weird thing happens to put me back in my place...</p>

<p>I was in the process of squashing two commits in an interactive rebase, when all of a sudden the outputs from Git started like overwriting themselves, and multiple Git Bash prompts appeared in the mess as if the commands thought they were complete before they actually were (I forgot to take a screenshot unfortunately).  My repo now seems corrupt, as I am stuck in <code>REBASE-i</code> mode and cannot abort.  Below are some screenshots that will hopefully help the more-Git-wizardry-than-I troubleshoot (<code>git s</code> is an alias for <code>git status</code>).  I have literally never seen that <code>Cannot store</code> message before, and I don't understand how it could be generated by <code>rebase</code>.  I can always delete the repo and make a fresh clone but I thought I'd appeal to SO before throwing in the towel here...</p>

<p><strong>EDIT:</strong><br>
Here are the steps I took that led up to this issue:  </p>

<ol>
<li><code>git commit --squash head</code> so that I could squash my latest changes with the previous commit.</li>
<li><code>git rebase -i --autosquash head^^</code> to start an interactive rebase with the <code>squash</code> command already set up.</li>
<li>The rebase proceeded normally but then started showing the weird output described above.  It started complaining about not being able to unlink <code>.pack</code> files and if I wanted to try again.  I'd seen that message before; usually it just keeps asking to retry forever, so instead I exited with <kbd>Ctrl+C</kbd>.</li>
<li>At that point, I was unable to <code>git rebase --abort</code>, with the error message shown below.</li>
<li>I tried <code>git rebase --edit-todo</code> and deleted all lines of the todo file, but rebase continued to fail.</li>
<li>Finally I ran <code>git rebase --continue</code> and it got me out of <code>REBASE-i</code> mode, allowing me to get on with my life in a very flustered state...</li>
</ol>

<p><strong>Version Info:</strong><br>
 - Git for Windows: 2.18.0<br>
 - Windows: Windows 10 Pro 1803</p>

<p><img src=""https://i.stack.imgur.com/Xgs5K.png"" alt=""enter image description here"">
<img src=""https://i.stack.imgur.com/yJ04J.png"" alt=""enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/AGgzT.png"" alt=""enter image description here""></p>
","6","3991688","",""
"36031405","2695816","2016-03-16 09:24:30","2","63","<git><locking><sublimetext3><git-bash><git-stash>","Sublime locks files so that git cannot unstash","<p>I'm on Windows 10 Pro and using the Windows version of Git and Sublime (Build 3103). I installed git up so that I can use that before committing and pushing.</p>

<p>This is what happens when Sublime is open:</p>

<pre><code>$ git up
Fetching origin
stashing 1 change
develop    up to date
master     up to date
unstashing
Unstashing failed!
</code></pre>

<p>Here's what git said:</p>

<blockquote>
  <p>b'error: unable to create file app/scripts/controllers/products.controller.js (Permission denied)\n'</p>
</blockquote>

<p>If I close Sublime there is no problem at all. I've tried running Git Bash both as user and as administrator, without any difference.</p>

<p>Also, this only occurs on the file that is the ""active tab"" in Sublime, not any other files that I have opened and made changes in.</p>

<p>Anyone knows what the problem might be?</p>
","0","2695816","0","0"
"7463392","429850","2011-09-18 18:15:35","47","65445","<git><git-branch><git-stash>","Switching a branch after aborting current changes in git","<p>I cloned a git repo and then started playing around in its master branch. After a while, I want to ignore the changes I just made (without committing them), and switch to a different branch. However, it stops me from switching because there are uncommitted changes. How do I ignore them without stashing them either? This is what happens:</p>

<pre><code>$ git checkout gh-pages
error: Your local changes to the following files would be overwritten by checkout:
        somefile.txt
Please, commit your changes or stash them before you can switch branches.
Aborting
</code></pre>
","0","429850","0","0"
"36154790","5944123","2016-03-22 12:46:12","2","669","<git><git-stash>","Git: How to store 'git stash' Data","<p>I had some particular uncommitted changes in my development branch and I stashed them using <code>git stash</code> command, and I am re applying those stashed changes using <code>git pop</code> command. </p>

<p>But this specific state I want to preserve (If possible then may me in some text format). </p>

<p>Because there are many times I have some uncommitted changes which are not particular I am doing that just sake for branch changing activity so my particular stashed changes get overlapped(removed). So I want to preserve that particular stash. </p>

<p>Is there any chance I can preserve the specific stashed changes in some file if possible?</p>
","1","5944123","0","0"
"25931026","123671","2014-09-19 09:46:31","304","54156","<git><git-stash>","How can I rename a git stash?","<p>I have a stash with an incorrect name. I would like to fix the name so it's accurate. </p>

<p><strong>How can I rename a stash?</strong></p>
","4","123671","0","0"
"63162924","1732418","2020-07-29 21:46:18","4","266","<git><git-submodules><git-stash>","Is it possible to make git submodule update to autostash if there are uncommitted changes?","<p>assuming that I have a git project that has been changed locally and remotely, so it is obsolete.</p>
<p>If I want to upgrade to the latest remote code without destroying my local work. Git can do it automatically using:</p>
<pre><code>git pull --rebase --autostash
</code></pre>
<p>Unfortunately it only works for root module, for git submodule. I have tried the following options:</p>
<pre class=""lang-sh prettyprint-override""><code>git submodule foreach git fetch
git submodule update --init --recursive
# git report error:
# Cannot rebase: Your index contains uncommitted changes.
# Please commit or stash them

git submodule foreach git fetch
git submodule update --init --recursive --autostash
# git report syntax error

git submodule foreach git fetch
git submodule update --init --recursive --force
# git destroy local changes

</code></pre>
<p>What is the correct way to make submodule to behave similarly to root module?</p>
","0","1732418","",""
"52357450","683982","2018-09-16 19:00:27","9","1135","<git><git-stash>","how to view untracked files that were ""git stash -u""","<p>Stashing content in git is very useful.
when stashing untrack files and going through your stash like this</p>

<pre><code>echo test &gt; foo
git stash -u # foo is stashed
git stash show -p stash@{0}
</code></pre>

<p>untracked files are not shown.
how can we see them?</p>

<p>thanks</p>
","1","683982","0","0"
"62521771","1123685","2020-06-22 19:08:32","1","141","<git><git-stash>","Git-config setting to specify --include-untracked for git stash?","<p>I understand git stash, but I find the default behavior of ignoring my untracked files to be rarely what I want.  If I'm working on new code and want to stash it, I want <code>git stash</code> to save my entire state and leave me with a clean working folder, and <code>git stash apply</code> to bring it all back.</p>
<p>The default behavior doesn't do this because it leaves untracked files lying around, which is rarely what I want.</p>
<p>Q: Is there a git config setting that will tell <code>git stash</code> to always <code>--include-untracked</code>?</p>
<p>I know I can create a git alias to do this...I'm specifically asking whether there is a config setting (I didn't find one mentioned in the documentation of git-stash.)</p>
<p>Thanks!</p>
","3","1123685","",""
"25485104","3096096","2014-08-25 11:40:54","2","382","<git><git-stash>","git bundle on unstaged local repo","<p>My local repo has some local modifications/changes (adding new mock files, commenting some third party dependency imports) to run my app. Those changes (8 files changes and 2 files newly added) are fixed ones I repeatedly do whenever I do a fresh checkout. </p>

<p>Now when I start using bundle to update my local repo, </p>

<ol>
<li><p>Is it possible to pull/update my local repo (with unstaged changes) from the bundle? Should i undo all those local changes and only then can run update of the bundle?</p></li>
<li><p>Will stashing help me out? Meaning first: stash the branch , second: update from bundle my local repo, third: apply back the stash to the updated repo branch .....</p></li>
</ol>

<p>Please help me out with ur ideas/suggestions</p>
","0","3096096","",""
"44135104","127670","2017-05-23 12:38:44","14","2186","<git><git-stash>","git add -N followed by git stash - ""Cannot merge""","<p>I need to stash a set of changes that includes a new file - without <a href=""https://stackoverflow.com/a/835561"">deleting ignored directories</a>.</p>

<p>So I tried this:</p>

<pre><code>git add --intent-to-add myNewFile.txt
git stash
</code></pre>

<p>The result was:</p>

<pre><code>error: Entry 'myNewFile.txt' not uptodate. Cannot merge.
Cannot save the current worktree state
</code></pre>

<p>How can I stash the modified files plus one or more selected new files, but not affect any other files or directories (in particular those in <code>.gitignore</code>)?</p>

<p>(This is not a duplicate of <a href=""https://stackoverflow.com/q/5506339"">how can I git stash a specific file?</a> because that question is how to stash a file that has previously been added. My problem is to stash a file that has <strong>not yet</strong> been added.)</p>
","4","127670","0","0"
"25807094","207655","2014-09-12 11:19:16","32","16101","<git><git-stash>","List modified file names in a git stash","<p>Can I list the names of the modified files in a stash, without their contents?</p>

<p>While searching, I only found people printing the whole diff, couldn't manage to view the filenames only.</p>
","2","207655","0","0"
"7643822","124330","2011-10-04 05:59:04","4","8403","<git><git-stash>","git stash unable to apply the changes saved","<p>I tried saving a git state using : git stash save changes_1.
I can see the stash list using: git stash list</p>

<p>But when I try to apply the stash using: git stash apply stash@{0}.
Now, I cannot see any changes are getting updated with git diff. and it is showing the message ""Already uptodate!""</p>

<p>So, in short git stash is not able to apply the changes saved.
Any help.</p>
","2","124330","",""
"7962942","38765","2011-11-01 05:52:50","10","889","<git><git-stash>","How can you tell if a git stash is no longer required?","<p>Is it possible to tell whether a stash has already been applied, and therefore is no longer required, without doing <code>git stash apply</code>? Assume that I'm only using one branch.</p>

<p>This could be prevented by using <code>pop</code> rather than <code>apply</code> when applying a stash, and therefore get rid of the stash each time it gets applied. However, I sometimes use git stash to keep a snapshot of work in progress, rather than only using it to switch from one task to another. Using pop would defeat that somewhat.</p>
","0","38765","0","0"
"8044675","165448","2011-11-08 00:45:13","44","123450","<git><git-pull><git-stash>","Pull is not possible because you have unmerged files, git stash doesn't work. Don't want to commit","<p>I just want to pull. I have changes to disregard, my Gemfile and Gemlock files and I'd be happy to just overwrite them and just pull. I tried stashing my changes away, this didn't work out for me. What do I do?</p>

<pre><code>git pull
M   Gemfile
U   Gemfile.lock
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'
as appropriate to mark resolution, or use 'git commit -a'.
~/projects/sms/apps2/apps2_admin(apps2)$ git stash save ""saved""
Gemfile.lock: needs merge
Gemfile.lock: needs merge
Gemfile.lock: unmerged (4ea16799dba7bfe1db28adecf36dee1af5195c1a)
Gemfile.lock: unmerged (e77439c9f86d1d0eda7ae0787e3e158f90959e68)
Gemfile.lock: unmerged (d690d3860db1aa8e46c1bb2f4de3e52a297b5c26)
fatal: git-write-tree: error building trees
Cannot save the current index state
~/projects/sms/apps2/apps2_admin(apps2)$ git pull
M   Gemfile
U   Gemfile.lock
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'
as appropriate to mark resolution, or use 'git commit -a'.
</code></pre>
","3","165448","0","0"
"8058611","1036676","2011-11-08 23:45:08","87","27781","<git><git-diff><git-stash><working-copy>","Can git do a diff of the working copy with stash","<p>How can I diff my current working copy against a stash?</p>

<p>My use case: my working copy already contains a subset of the changes in my <code>stash@{0}</code>, but I don't want to apply <em>all</em> the changes in <code>stash@{0}</code>. I want to do a diff to help determine which desirable changes in <code>stash@{0}</code> are still missing from my working copy.</p>
","0","1036676","0","0"
"44680028","385655","2017-06-21 15:14:33","97","38919","<git><git-stash>","What's the difference between git stash save and git stash push?","<p>When should I use <code>git stash save</code> instead of <code>git stash push</code> and vice-versa?</p>
","3","385655","0","0"
"8140216","638452","2011-11-15 17:07:13","14","12174","<git><github><git-rebase><git-stash><git-add>","git status: what is UU and why should add/rm fix it?","<p>Here is the current state of this feature branch.</p>

<p>Recent Steps:</p>

<ol>
<li>Remote development branch <strong>diverged</strong></li>
<li><strong>Fetched</strong> remote development branch</li>
<li><strong>Stashed</strong> local feature branch's diverged changes that I want to keep</li>
<li><strong>Rebased</strong> feature branch from local development branch</li>
<li>Stash <strong>Popped</strong> feature branch changes</li>
<li>Stash <strong>Apply</strong> feature branch changes</li>
</ol>

<p>Results:</p>

<pre><code>$ git status
# On branch feature-foo-branch
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   foo/bar.php
#   modified:   foo/baz.php
#
# Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both modified:      foo/conflict.php
#
</code></pre>

<p>and status with <code>-s</code></p>

<pre><code>$ git status -s
UU foo/conflict.php
M  foo/bar.php
M  foo/baz/php
</code></pre>

<p>git recommends either <code>add</code> or <code>rm</code> to resolve the conflict.  What does <code>UU</code> mean and why would those be the options to fix it?</p>

<p>All of the information I can find about resolving conflicts similar to this say not to use <code>rm</code> which makes me wonder why git thinks it's appropriate.</p>

<p>I can't find anything about <code>UU</code> in the git manual pages but there is this <a href=""https://stackoverflow.com/questions/7517124/git-merge-conflict-uu-how-do-i-resolve-conflict-without-adding-file-to-next-c"">SO question</a> which also seems to be having trouble sorting out why <code>add</code> would work in this case.</p>
","1","638452","0","0"
"8171065","555384","2011-11-17 16:52:31","1","126","<git><rebase><git-stash><git-patch>","Taking your work Hostage with git?","<p>Here's the situation...</p>

<p>I need to be able to rebase a git repository branch to a point in time, then remove (and stash or keep) my commits beyond that point in time.  Retaining the ability to re-apply every thing... but not having them living in the remote repository...</p>

<p><em><strong>Reason</em></strong> (maybe you'll have a better solution)</p>

<p>Have a contract job that I've been working on for a few months, and they are refusing to pay... I want to be able to rewind the repo to the beginning of my involvement, remove ( and store) my work to be re-applied on payment..</p>

<p>The complicated issue is that there have been other users committing in tandem and I don't want to remove those, but it will obviously break if I yank intermittent commits and attempt to run the repo at the same point (not-rewinding the active copy).</p>

<p>Ideas? (<strong>Technical</strong>) ... Thought about using a git patch?</p>
","4","555384","0","0"
"26244929","828688","2014-10-07 20:42:33","0","470","<git><git-stash>","Weird behavior with running git stash twice","<p>I had a few modified files in my develop branch and few that were newly created but untracked by git. I wanted to move these changes to a feature branch, So I ran <code>git stash</code>. 
After checking with <code>git status</code>, I realized that git did not stash the untracked files. So I ran <code>git stash -u</code>.</p>

<p>Something weird happened here, because after I checked out my feature branch and was trying to see the two stashed changes, using <code>git stash show stash@{0}</code> and <code>git stash show stash@{1}</code>, it did not show me anything for the 0th stash index and the 1st stash index showed the untracked files. There was no 2nd index.</p>

<p><code>git stash list</code> did not show anything at all. I went ahead and did <code>git stash apply</code> and that only brought back the untracked file changes, not the modified files.</p>

<p>After I applied the untracked files changes, I ran <code>git stash show stash@{0}</code> and <code>git stash show stash@{1}</code> again. This time, the 0th index again was empty, and the modified files changes moved to the 1st index. Applying the stash@{1}, brought back all my changes, but I fail to understand the behavior of the stash. Has anybody seen this before?</p>
","0","828688","",""
"8495103","743464","2011-12-13 19:38:13","40","6916","<git><git-stash>","git stash and pop shows file no longer marked as moved?","<pre><code>git mv file1 file2

git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   renamed:    file1 -&gt; file2

git stash
git stash pop

# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   new file:   file2
#
# Changes not staged for commit:
#   (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   deleted:    file1
</code></pre>

<p>As you can see, git loses the renamed relationship after a stash / pop. Is there any way to regain this relationship, or have stash know that files were moved? I often stash to see what my system state is like pre-changes, but having it lose the rename relationship is a problem for me. I don't know how to fix it other than deleting the new file, doing a git mv again, and replacing the new file's contents.</p>
","1","743464","0","0"
"36373181","1654520","2016-04-02 12:22:17","2","44","<git><git-merge><git-pull><git-stash>","aborting a git merge and going back to uncommitted work","<p>this is my situation:</p>

<p>i forgot to pull and I started working on my project. what I worked on this morning is totally different from my last commit on that repository.</p>

<p>I'm doing a commit and I'm prompted to pull, this is when i realized i will have an avalanche of unresolvable conflicts.</p>

<p>i pull and my project is all messed up now.
is there a way to going back to the work i did before performing the pull? </p>

<p>not reverting to my last commit because I would lose all the work i did today, but just stash all the mess and go back to 5 minutes ago?</p>
","3","1654520","",""
"9143865","341583","2012-02-04 19:35:39","85","39226","<git><git-stash>","How to combine multiple stashes in git","<p>This is a pipeline on branch <code>frontend</code> over the last two weeks.</p>

<p>| <code>Stash@{3}</code> is all code since <code>Stash@{1}</code> (excluding the two tiny commits)<br>
| Tiny Commit<br>
| Tiny commit<br>
| Huge bulk commit two weeks ago, now rebased and moved to <code>Stash@{1}</code>  </p>

<p>My working tree is currently clean.<br>
<code>Stash@{1}</code> is the contents from a bulk commit of general development code two weeks ago (this should have been stashed in the first place). This commit was undone and moved to stash.<br>
<code>Stash@{3}</code> is the newest work on that tree since <code>Stash@{1}</code> (minus a couple of changes that have been committed).  </p>

<p>I need to combine these two stashes together in my working tree so I can make a number of commits from this huge pool of work.</p>

<p>I ran <code>git stash apply stash@{1}</code> then I tried:</p>

<p><code>git stash apply stash@{3}</code><br>
<code>git stash show -p | git stash apply stash@{3}</code></p>

<p>but I get 'dirty working tree' in both cases. How can I merge this work together? Because <code>stash@{3}</code> is newer, I want it to supersede <code>stash@{1}</code> wherever there are conflicts.</p>
","0","341583","0","0"
"52522911","576746","2018-09-26 17:08:33","6","4440","<git><version-control><git-stash>","git stash drop: How can I delete older stashed states without dropping the latest X?","<p>What I already have discoverd:</p>

<pre><code>git stash list
</code></pre>

<p>... for listing all my stashes.</p>

<pre><code>git stash show -p stash@{0} --name-only
</code></pre>

<p>To list all files within that stash (here the latest stash at position 0).</p>

<p>Now I have a project with hundreds of old stashed changes which will not be needed anymore. I know I could delete them all:</p>

<pre><code>git stash clear
</code></pre>

<p>... or delete single stashes like this (deletes the stash with 87 stashes afterwards):</p>

<pre><code>git stash drop stash@{87}
</code></pre>

<p>However I would like to delete the stashes 3-107. With a risky guess I tried:</p>

<pre><code>git stash drop stash@{3-107} -- does not work
</code></pre>

<p>How can I do this?</p>
","3","576746","",""
"52568548","5353461","2018-09-29 12:51:14","3","344","<git><git-pull><git-stash>","git stash exits 0 but no stash created","<p>I've been advised to <a href=""https://stackoverflow.com/a/52540878/5353461"">avoid <code>git pull --autostash</code></a>, and instead use:</p>

<pre><code>git alias.pull-autostash '!git stash push &amp;&amp; git pull --rebase &amp;&amp; git stash pop'
</code></pre>

<p>When there are no changes in the index or working tree, doing:</p>

<pre><code>$ git stash push
</code></pre>

<p>gives:</p>

<pre><code>No local changes to save
</code></pre>

<p>An additional problem is that the exit status is <code>0</code>.</p>

<p>Any <code>stash pop</code> would then <code>pop</code> something which wasn't pushed.</p>

<p>How do I force an empty stash to be created, like <code>git commit --allow-empty</code>?</p>
","0","5353461","",""
"36567356","1983854","2016-04-12 08:15:16","2","94","<git><git-stash>","Can you set the order in which files appear on ""git"" commands?","<p>I want to stash a single file. Since <code>git stash</code> does not allow a filename as a parameter, I have to use <a href=""https://stackoverflow.com/a/17969785/1983854""><code>git stash -p</code></a> and select the file among the rest of changes.</p>

<p>This works fine if changes not staged for commit do not include many files, or if the file I want to stash is one of the first ones.</p>

<p>However, if there are many files and the one I want to stash is to the end of the list, I have to go through all the other ones until I get to the desired one. And this is a bit tedious.</p>

<p>So I was wondering: is there a way to define the order in which the files not staged for commit appear upon doing <code>git stash -p</code>?</p>
","3","1983854","0","0"
"37529016","111471","2016-05-30 15:16:03","54","10870","<windows><git><git-bash><git-stash>","git stash is slow on windows","<p>On my windows machine <code>git stash</code> has about 3.5 seconds overhead on each invocation, which adds about 7 seconds to my git commit hook.</p>

<p>The same command under linux (same machine) takes about 0.01 seconds. The performance issue applies to empty repositories as well.</p>

<p>I have tried the following from <a href=""https://stackoverflow.com/questions/4485059/git-bash-is-extremely-slow-in-windows-7-x64"">this thread</a> and <a href=""https://stackoverflow.com/questions/2835775/msysgit-bash-is-horrendously-slow-in-windows-7/2967519#2967519"">this thread</a>:</p>

<ul>
<li><code>core.fscache</code> is set to <code>true</code></li>
<li><code>core.preloadindex</code> is set to <code>true</code></li>
<li><code>gc.auto</code> is set to <code>256</code></li>
<li>Setting PS1='$ '</li>
<li>Running cmd in administration mode</li>
<li>Running inside <em>cmd.exe</em> instead of git-bash</li>
</ul>

<p>Running <code>GIT_TRACE=true git stash list</code></p>

<pre><code>16:58:16.844591 git.c:563               trace: exec: 'git-stash' 'list'
16:58:16.844591 run-command.c:336       trace: run_command: 'git-stash' 'list'
16:58:19.699591 git.c:350               trace: built-in: git 'rev-parse' '--git-dir'
16:58:19.859591 git.c:350               trace: built-in: git 'rev-parse' '--git-path' 'objects'
16:58:20.069591 git.c:350               trace: built-in: git 'rev-parse' '--show-toplevel'
16:58:20.154591 git.c:350               trace: built-in: git 'rev-parse' '--git-path' 'index'
16:58:20.244591 git.c:350               trace: built-in: git 'config' '--get-colorbool' 'color.interactive'
16:58:20.334591 git.c:350               trace: built-in: git 'config' '--get-color' 'color.interactive.help' 'red bold'
16:58:20.424591 git.c:350               trace: built-in: git 'config' '--get-color' '' 'reset'
16:58:20.514591 git.c:350               trace: built-in: git 'rev-parse' '--verify' '--quiet' 'refs/stash'

real    0m3.845s
user    0m0.000s
sys     0m0.047s
</code></pre>

<p>Running <code>GIT_TRACE_PERFORMANCE=true git stash list</code></p>

<pre><code>16:59:18.414591 trace.c:420             performance: 0.001078046 s: git command: 'C:\Program Files\Git\mingw64\libexec\git-core\git.exe' 'rev-parse' '--git-dir'                                          
16:59:18.569591 trace.c:420             performance: 0.000947184 s: git command: 'C:\Program Files\Git\mingw64\libexec\git-core\git.exe' 'rev-parse' '--git-path' 'objects'                               
16:59:18.779591 trace.c:420             performance: 0.001253627 s: git command: 'C:\Program Files\Git\mingw64\libexec\git-core\git.exe' 'rev-parse' '--show-toplevel'                                    
16:59:18.869591 trace.c:420             performance: 0.001285517 s: git command: 'C:\Program Files\Git\mingw64\libexec\git-core\git.exe' 'rev-parse' '--git-path' 'index'                                 
16:59:18.955591 trace.c:420             performance: 0.001139994 s: git command: 'C:\Program Files\Git\mingw64\libexec\git-core\git.exe' 'config' '--get-colorbool' 'color.interactive'                   
16:59:19.040591 trace.c:420             performance: 0.001182881 s: git command: 'C:\Program Files\Git\mingw64\libexec\git-core\git.exe' 'config' '--get-color' 'color.interactive.help' 'red bold'       
16:59:19.125591 trace.c:420             performance: 0.001128997 s: git command: 'C:\Program Files\Git\mingw64\libexec\git-core\git.exe' 'config' '--get-color' '' 'reset'                                
16:59:19.215591 trace.c:420             performance: 0.001567766 s: git command: 'C:\Program Files\Git\mingw64\libexec\git-core\git.exe' 'rev-parse' '--verify' '--quiet' 'refs/stash'                    
16:59:19.295591 trace.c:420             performance: 3.730583540 s: git command: 'C:\Program Files\Git\mingw64\bin\git.exe' 'stash' 'list'                                                                

real    0m3.819s                                                                                                                                                                                          
user    0m0.000s                                                                                                                                                                                          
sys     0m0.062s                                                                                                                                                                                          
</code></pre>

<p>From the log we see that it takes around 3 seconds between the git-stash command is run and the git-rev-parse is run. Are there any other flags I can run to find the bottleneck?</p>
","14","111471","0","0"
"37553649","1555615","2016-05-31 19:02:03","1","1579","<git><git-stash>","git stash pop prints ""deleted by us"" for file that was never created on master","<p>I am relatively new to git (coming from svn).</p>

<p>I perform the following steps which are mainly that I edit a file on a branch, perform a stash and then try to apply the stash to the master (which does not have this file).:</p>

<pre><code>user1:~/gittest$ ls
user1:~/gittest$ git init
Initialized empty Git repository in /home/user1/gittest/.git/

user1:~/gittest$ touch file1
user1:~/gittest$ git add file1
user1:~/gittest$ git commit -m ""committing file1""
[master (root-commit) 7c29335] committing file1
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file1

user1:~/gittest$ git checkout -b br1
Switched to a new branch 'br1'

user1:~/gittest$ touch file2
user1:~/gittest$ git add file2
user1:~/gittest$ git commit -m ""committing file2""
[br1 b565401] committing file2
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file2

user1:~/gittest$ echo ""updated.."" &gt;&gt; file2
user1:~/gittest$ git add file2 
user1:~/gittest$ git stash
Saved working directory and index state WIP on br1: b565401 committing file2
HEAD is now at b565401 committing file2

user1:~/gittest$ git checkout master
Switched to branch 'master'

user1:~/gittest$ git stash pop
CONFLICT (modify/delete): file2 deleted in Updated upstream and modified in Stashed changes. Version Stashed changes of file2 left in tree.

user1:~/gittest$ git status
On branch master
Unmerged paths:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)
  (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)

        deleted by us:   file2

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>My question is why does git print the message ""deleted by us"" since file2 was never created on master and thus never deleted.</p>

<p>Is this a misleading message, or am I missing something about the way git works.</p>
","0","1555615","",""
"37570686","2190425","2016-06-01 13:50:32","7","12609","<git><git-branch><git-stash>","How to git stash pop the last stash created on current branch?","<p>I want to work with different branches and it would be useful for git to remember which stash is for which branch. So that when I <code>git stash pop</code> it only pops the stash that was created on current branch, if not - does nothing.</p>

<p>Basically whenever I switch branch I want to write <code>git stash pop</code> in case I had any work saved on this branch with <code>git stash -u</code></p>

<p>It has to be a script or a one-liner to solve my problem.</p>
","0","2190425","0","0"
"37637844","6420642","2016-06-05 02:23:09","1","92","<java><git><github><merge><git-stash>","Missing some variable declaration in java file when git Merge with another branch","<p>I have two git branches and I merged these two branches together. One of the java class , some variable declarations are missing  . </p>

<h2>A branch</h2>

<pre><code>class Cal {

int x =10 ;
int y = 20 ;

public void m(){
system.out.print (x+y);
}}
</code></pre>

<h2>B branch</h2>

<pre><code>class Cal {

int a =10 ;
int b = 20 ;

public void m2(){
system.out.print (a+b);
}}
</code></pre>

<p>Branch A merged to Branch B</p>

<p>Then;</p>

<pre><code>class Cal {

int a =10 ;
int b = 20 ;

public void m(){
system.out.print (x+y);
}

public void m2(){
system.out.print (a+b);
}

}
</code></pre>

<p>Any special reason to happen it ?.</p>
","1","6420642","",""
"63413652","700144","2020-08-14 13:24:04","2","1186","<git><git-stash>","Output of `git stash show` empty","<p>I have an upgrade script that runs</p>
<pre class=""lang-sh prettyprint-override""><code>git stash -k -u
</code></pre>
<p>Before updating to the newest version.</p>
<p>Normally, this outputs: <code>No local changes to save</code>
But since some time, it has been outputting: <code>Saved working directory and index state WIP on generated: build</code> even though no changes were made to the working copy.</p>
<p>When I try to inspect the contents of any of the stashes, it appears completely empty, too:</p>
<pre><code>$ git stash list
stash@{0}: WIP on generated: bc0c9f6 build
stash@{1}: WIP on generated: 1d83819 build
stash@{2}: WIP on generated: 6aff261 build
stash@{3}: WIP on generated: ac3f8a9 build
stash@{4}: WIP on generated: bf0d020 build
stash@{5}: WIP on generated: ba972db build
stash@{6}: WIP on generated: 2c5cfe3 build

$ git stash show stash@{0}
$ git stash show stash@{1}
</code></pre>
<p>Etc... the output is empty for all stashes. Same if I specify the <code>-p</code> flag to the <code>stash show</code> command.</p>
<p>I need help figuring out the contents of these stashes in order to speculate why they are being created in the first place.</p>
","4","700144","",""
"27010495","1174770","2014-11-19 06:35:23","0","140","<git><git-stash>","Manage git repository with multiple remote repos","<p>I am working on a customization based on a github project <a href=""https://github.com/USER_A/PROJ_A"" rel=""nofollow noreferrer"">https://github.com/USER_A/PROJ_A</a>.</p>

<p>I started by doing a clone of the original project and started my customization in a local branch MY_BRANCH.  Once I am done, I wanted to push MY_BRANCH to my own repository as master branch.</p>

<ul>
<li>MY_BRANCH/master</li>
<li>origin/HEAD -> origin/master</li>
<li>origin/BR_1</li>
<li>origin/BR_2</li>
<li>origin/BR_3</li>
<li>origin/master</li>
<li>origin/BR_4</li>
</ul>

<p>When I tried to switch over to the master branch of my own repo, I always got HEAD DETACHED.</p>

<p>HEAD detached at MY_BRANCH/master</p>

<p>Is this ok?  What is the best practice to handle multiple remote repo in this scenario?</p>
","0","1174770","",""
"27012598","4069796","2014-11-19 08:58:22","4","983","<git><gitignore><git-stash><git-assume-unchanged>","git assume-unchanged and git stash","<p>I keep some of my local configuration in assume-unchanged files. I have several branches created over time, and assumed-unchanged files have evolved in between (adding more local config). If I try to checkout an older branch, I get:</p>

<pre><code>error: Your local changes to the following files would be overwritten by checkout:
    &lt;some assume-unchanged files&gt;
Please, commit your changes or stash them before you can switch branches.
</code></pre>

<p>I don't want to commit them and cannot stash them (even with the --include-untracked option):</p>

<pre><code>$ git stash
No local changes to save
</code></pre>

<p>Is there a solution for this, or a better workflow for local changes to keep uncommitted?</p>
","1","4069796","0","0"
"9242844","133327","2012-02-11 18:29:16","71","58247","<git><git-stash>","Aborting `git stash apply`","<p>I regret having applied a stash (wrong branch). How can I undo this and have my stash back to my stash list in order to apply it later on the right branch?</p>
","0","133327","0","0"
"44883637","2298137","2017-07-03 10:44:53","-1","66","<git><git-stash>","what does git stash save do that git stash does not do and in what circumstance would you use it?","<p>I use <code>git stash</code> a reasonable amount and then <code>git stash pop</code> to re-apply my changes, typically when I want to do a pull from the remote without losing my changes.</p>

<p>But I saw the command <code>git stash save</code> being used in a similar manner and after reading the git documentation I was non-the-wiser on what it does that <code>git stash</code> does not do.</p>

<p>Can someone explain to me what it does? (please assume I am a simple person :)</p>
","3","2298137","",""
"44888049","7542959","2017-07-03 14:24:18","8","13059","<git><pull><git-stash>","How to git pull while ignoring the local changes?","<p>As I am trying to pull some changes from origin/master, I am getting this error :</p>

<p><code>error: Your local changes to the following files would be overwritten by merge</code> </p>

<p>because I made local changes. I don't want to commit these changes, so I suppose I should use <code>git stash</code> on my branch, then <code>git pull origin master</code></p>

<p>My question is :</p>

<ol>
<li>Will the pull simply ignore the changes and merge correctly</li>
<li>Can I still use my local changes after the pull + the ones merged without any additional step ? </li>
</ol>

<p>Thank you !</p>

<p>PS : yes, I googled, I just want to make sure I understood correctly.</p>
","0","7542959","0","0"
"27116671","183132","2014-11-25 00:17:13","49","26191","<git><git-stash>","automatically stash save/pop changes on git rebase?","<p>my git workflow uses rebase a lot. I always fetch upstream changes (the main repo i forked from) and then merge to my branches, and then rebase to remove useless (to me :D) merge commits and tree splits.</p>

<p>one thing on this workflow that annoys me is:</p>

<pre><code>$ git rebase upstream/master
Cannot rebase: You have unstaged changes.
Please commit or stash them.

$ git stash
Saved working directory and index state WIP on cc: abc1234 Merge remote-tracking branch 'upstream/master' into local_branch
HEAD is now at abc1234 Merge remote-tracking branch 'upstream/master' into local_branch

$ git rebase upstream/master
First, rewinding head to replay your work on top of it...
Applying: awesome code change

$ git stash pop
</code></pre>

<p>so here we have 4 commands, 1=failed rebase, 2=stash, 3=rebase, 4=stash pop. anything but 3 is just mindless work.</p>

<p>So, the question is: What is the most recommended way of automating it? an alias to run git stash/rebase/pop everytime? some git config that forces rebase to stash or treat it as another commit to reapply afterwards? something else?</p>
","4","183132","0","0"
"44977234","36388","2017-07-07 18:11:53","0","94","<git><git-stash>","Sibling directories lost after git stash of current directory","<p>Let's say I have this directory structure:</p>

<pre>
project_root
|
+--parent
   |
   +--child
   |
   +--baby_brother
</pre>

<p><code>baby_brother</code> is a new directory, untracked by git.  I also have lots of changes to the files in <code>child</code>.  I needed temporary access to the previous versions of the files in <code>child</code>, so I figured I'd just stash my changes:</p>

<pre><code>cd $project_root/parent/child
git stash push .
</code></pre>

<p>Then later:</p>

<pre><code>cd $project_root/parent/child
git stash pop
</code></pre>

<p>Now, much to my dismay, <code>baby_brother</code> is missing, along with a week's worth of work.  :-(</p>

<p>I have two questions:</p>

<ol>
<li><p>Is there any way to get my files back?  I suspect the answer is ""no"".</p></li>
<li><p>Is this a bug, or did I do something wrong?</p></li>
</ol>

<p>I've seen <a href=""https://stackoverflow.com/questions/2613956/strange-git-case-git-stash-followed-by-git-stash-apply-lost-uncommitted-data"">an SO question</a> that says it's expected behavior for git to delete untracked files, but for one, it also says this was fixed in 1.7.1.1 (I'm using 2.13.0), and for two, I expected the stash only to affect <code>child</code>, since I was in that directory and included a dot at the end of the command to reference the current directory.</p>

<hr>

<p>Here is a quick repro that demonstrates the problem:</p>

<pre>
1 ~ % mkdir project_root
2 ~ % cd project_root
3 project_root % mkdir parent
4 project_root % touch parent/file
5 project_root % mkdir parent/child
6 project_root % touch parent/child/file2
7 project_root % git init
Initialized empty Git repository in /home/pdaddy/project_root/.git/
8 project_root % git add .
9 project_root % git commit -m 'Get it in git'
[master (root-commit) 2d0872c] Get it in git
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 parent/child/file2
 create mode 100644 parent/file
10 project_root % mkdir parent/baby_brother
11 project_root % touch parent/baby_brother/file3
12 project_root % touch parent/file4
13 project_root % touch file5
14 project_root % comment=""As it turns out, file4 and file5 will be deleted, too.""
15 project_root % tree $PWD
/home/pdaddy/project_root
|-- file5
`-- parent
    |-- baby_brother
    |   `-- file3
    |-- child
    |   `-- file2
    |-- file
    `-- file4

3 directories, 3 files
16 project_root % echo 'some changes' >> parent/child/file2
17 project_root % cd parent/child
18 child % git stash push .
Saved working directory and index state WIP on master: 2d0872c Get it in git
19 project_root % tree ~/project_root
/home/pdaddy/project_root
`-- parent
    |-- child
    |   `-- file2
    `-- file

2 directories, 2 files
20 child % git stash pop
On branch master
Changes not staged for commit:
  (use ""git add ..."" to update what will be committed)
  (use ""git checkout -- ..."" to discard changes in working directory)

        modified:   file2

no changes added to commit (use ""git add"" and/or ""git commit -a"")
Dropped refs/stash@{0} (80e41d0ed1f2b0a085d4f5ca3a38833a18873f98)
21 child % tree ~/project_root
/home/pdaddy/project_root
`-- parent
    |-- child
    |   `-- file2
    `-- file

2 directories, 2 files
</pre>
","0","36388","",""
"45401273","3022952","2017-07-30 15:08:40","1","49","<git><merge><git-merge><git-stash>","How do I stash manual resolutions from an uncommitted git merge for later?","<p>I'm attempting to merge a long-standing branch, and not surprisingly, there's a fair number of merge conflicts which need to get resolved. I've worked through a fair number of them, <code>git-add</code>-ing each file once the conflicts have been resolved.</p>

<p>However, I now realize that for some of the conflicts, resolution would be easier if I could temporarily go back to the pre-merge state, fix up the files, and then re-do the merge, at least for those files. (Specifically, part of the conflicts has to do with an automatic code formatting tool. I'd like to be able to run that same tool on the branch pre-merge, so that merging only has to deal with the non-auto-formatting changes.)</p>

<p>I know I can drop the merge entirely, but I have a large number of manual resolutions which I don't want to lose. Is there any way to save the manual resolutions such that they can be re-applied after I redo the merge?</p>
","0","3022952","",""
"27923852","57883","2015-01-13 13:58:28","0","115","<git><git-stash>","git stash, git apply, modifications, git commit, git pop (with rebase preferred)?","<p>According to <a href=""http://heliom.ca/blog/posts/git-tip-rebase-your-stash"" rel=""nofollow noreferrer"">most</a> of what I'm <a href=""https://stackoverflow.com/questions/27116671/automatically-stash-save-pop-changes-on-git-rebase"">seeing</a> temporary commits that you un-commit are the only way to rebase a stash.</p>

<p>This seems like an awfully difficult and dangerous thing to try to test in my situation.</p>

<p>do temporary commits go into the you-can-never-delete-these-from-your-history such that passwords in local edits are now part of what you <code>git push master</code> ?</p>
","1","57883","",""
"28190023","5058","2015-01-28 10:35:17","1","431","<git><git-stash>","Handling multiple git branches: stash or clone-per-branch?","<p>I would be interested in both general case and more specific answers, but some relevant factors in my particular case are:</p>

<ul>
<li>I'm currently the lone developer on this project, but might be collaborating with another in the near future</li>
<li>I'm attempting to follow <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">this workflow</a>, more-or-less.</li>
<li>In particular regard to the previous point, two branches (master and develop) have remotes, other branches created for hotfixes, bugs, and features are local-only</li>
<li>The repo is easy to clone and run/develop/test multiple instances of locally</li>
</ul>

<p>On a day-to-day basis, I'm frequently working on several branches concurrently. Much of this work isn't immediately committable, so I'm currently using <code>git stash</code> to save work between branch switches. However, I'm finding working with stashes a bit fiddly and wondering if a clone-per-branch approach might be easier to keep track of. What are the advantages/disadvantages of each, and does anyone strongly recommending one approach over the other?</p>

<p>UPDATE: I should add that my reluctance to keep all branches constantly committed is because of an aversion to having broken or really bad code in the repo. I realise, however, that it might be wise to revise this principle, especially if I gain familiarity with the git tools to mitigate any negative side-effects.</p>
","4","5058","",""
"28195778","3088045","2015-01-28 15:16:21","64","24301","<git><git-stash><chunks><interactive-mode>","'git stash apply' with Interactive Mode","<p>I have a serie of files into a stash (<code>stash{0}</code>) and I would like to <code>git apply</code> <strong>just</strong> some parts/hunks of these files (usually known as <em>Interactive mode</em>).</p>

<p>Is it possible?</p>

<p>I've seen that is possible to perform a</p>

<pre><code>git stash save -p 'Stash name'
</code></pre>

<p>but it seems not possible to do</p>

<pre><code>git stash apply -p 'Stash name'
</code></pre>

<p>Do you know a way to achieve it?</p>
","3","3088045","0","0"
"46802675","8292763","2017-10-18 04:10:48","0","760","<git><github><git-checkout><git-stash>","git revert / stash change without losing its history","<p>This is my requirement:
I have <code>a -&gt; b -&gt; c (HEAD)</code>. 
I am adding a new commit <code>d</code>. Now, it becomes <code>a -&gt; b -&gt; c -&gt; d(HEAD)</code>. </p>

<p>Now, I want to revert to <code>c</code> (that is, undoing all changes that were made in <code>d</code>) and make an additional change and form <code>e</code>. The tree should look like <code>a -&gt; b-&gt; c -&gt; d -&gt; e(HEAD)</code>. NOTE: I must not lose the <code>d</code> history. I must revert it and add new changes to <code>e</code>.</p>

<p><strong>UPDATE:</strong>
I can explain with a better example. Let's say I have <code>a-&gt;b-&gt;c(HEAD)</code>, here <code>c</code> is the primary or main commit. <em>I'm trying to automate with a script.</em> </p>

<p><strong>Initial Step:</strong> I start with <code>git checkout &lt;SHA1 of c&gt;</code>, tree looks like: <code>a-&gt;b-&gt;c(DETACHED HEAD)</code></p>

<p><strong>My Real query starts from here:</strong></p>

<ol>
<li>I <strong>modify few files (I don't add any new files)</strong> and add a new commit <code>d</code>. So tree should look like: <code>a-&gt;b-&gt;c-&gt;d(HEAD)</code></li>
<li>I <strong>revert changes in #1</strong> by running <strong>Initial Step</strong> and <em>modify other files (again, I don't add any new files)</em> and add a new commit <code>e</code>. So tree should look like: <code>a-&gt;b-&gt;c-&gt;d-&gt;e(HEAD)</code></li>
</ol>

<p><strong>NOTE:</strong> Here <code>e</code> = revert of commit <code>d</code> + new changes to <code>c</code>. I can't blindly use <code>git revert HEAD</code> since <code>c</code> is considered to be the primary commit. I was thinking I could use <code>git stash</code> and <code>git stash pop</code> to remove old changes and insert new changes. Can I do something like <code>git checkout stash</code>?</p>

<p><strong>In short:</strong> I'm trying to fuzz test commit <code>c</code> for around 50 times (ie) commit and revert for 50 times</p>
","3","8292763","",""
"28590735","3999893","2015-02-18 18:07:57","7","1170","<git><git-stash>","How to list the parent commit of a stash in `git stash list`","<p>When I generate a stash in <code>git</code>, there is a ""parent"" (the last commit before I stashed my changes).</p>

<p>When I use <code>git stash</code> to stash my changes, an ID to that parent-commit is added to the message describing my stash. calling <code>git stash list</code> can e.g. show:</p>

<pre><code>stash@{0}: WIP on master: c09a3fc second commit
stash@{1}: WIP on master: 063b893 first commit
stash@{2}: WIP on master: 063b893 first commit
</code></pre>

<p>But when I run <code>git stash save ""My own message""</code> the ID of the parent-commit is not added (<code>git stash list</code>):</p>

<pre><code>stash@{0}: On master: My own message
stash@{1}: WIP on master: c09a3fc second commit
stash@{2}: WIP on master: 063b893 first commit
stash@{3}: WIP on master: 063b893 first commit
</code></pre>

<p>It there a way to show the ID of the parent-commit to the list of stashes?</p>

<p>I tried: <code>git stash list --oneline --parents</code>, which gave me:</p>

<pre><code>1b5dfb1 4efd3e0 refs/stash@{0}: On master: My own message
4efd3e0 1e9b384 refs/stash@{1}: WIP on master: c09a3fc second commit
1e9b384 51eb834 refs/stash@{2}: WIP on master: 063b893 first commit
51eb834 refs/stash@{3}: WIP on master: 063b893 first commit
</code></pre>

<p>But here the wrong IDs are shown. I expected (the first line beeing the ID of the parent-commit which is the same for groups of two commits in this example):</p>

<pre><code>c09a3fc 1b5dfb1 refs/stash@{0}: On master: My own message
c09a3fc 4efd3e0 refs/stash@{1}: WIP on master: c09a3fc second commit
063b893 1e9b384 refs/stash@{2}: WIP on master: 063b893 first commit
063b893 51eb834 refs/stash@{3}: WIP on master: 063b893 first commit
</code></pre>
","3","3999893","0","0"
"37857175","583464","2016-06-16 10:56:45","0","806","<git><git-stash>","Go back to original branch after git stash","<p>I wanted to check a previous commit.</p>

<p>I am in brach  <code>mybranch</code> where I had a few changes in a file, that's why I did  <code>git stash</code> first.</p>

<p>Then, </p>

<p><code>git checkout previouscommit</code></p>

<p>I ran the code, made a few changes that I don't want to save.</p>

<p>Now, how can I go back to <code>mybranch</code>?</p>

<p>1)  I don't want to keep the changes I made in <code>previouscommit</code>.</p>

<p>2) I want to go back to <code>mybranch</code></p>

<p>I know I have to do  a <code>git stash pop</code> but I am not sure at what point. Before, or after checking <code>mybranch</code>? (Also I can't right now because I have done some changes as I said to a file that I don't want to keep and I am not sure how to force to go back to <code>mybranch</code>.)</p>
","0","583464","0","0"
"54705288","10691371","2019-02-15 08:32:58","2","66","<git><git-stash>","Why 'Save' doesn't exist in git stash manual","<p>I'm watching the free lecture on git.<br>
The screen shows me the help message of <code>git stash</code> (by <code>git stash --help</code>). It appears in my terminal like below:</p>

<pre><code>git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
                    [-u|--include-untracked] [-a|--all] [-m|--message &lt;message&gt;]
                    [--] [&lt;pathspec&gt;...]]
</code></pre>

<p>But in the lecture, they use <code>save</code> as a substitute for <code>push</code>. My git version is 2.17.1. Was there some change in the command syntax in git stash?</p>
","2","10691371","0","0"
"72439837","4372452","2022-05-30 20:41:45","1","126","<git><git-stash>","How to make `git stash` refuse to smudge unstaged and staged changes?","<h1>Question</h1>
<p>How do I either</p>
<ol>
<li>make <code>git stash</code> <em>error out</em> if there are both unstaged and staged changes and I haven't specified either <code>--staged</code> (<code>-S</code>) or <code>--keep-index</code> (<code>-k</code>), or</li>
<li>make <code>git stash</code> default to <code>--keep-index</code> if invoked without the <code>--staged</code> option?</li>
</ol>
<p>Ideally as a global config option.</p>
<h1>Motivation</h1>
<p>Several times now:</p>
<ol>
<li>I carefully <code>git add -p</code> just the changes I want to commit (sometimes with temporary edits to files beforehand, when I want to pull apart two atoms of change which happen to touch the same lines or adjacent line, which <code>git</code> struggles with), then</li>
<li>I think &quot;I'll just quickly stash those other unstaged changes before taking the time to think of a good commit message&quot;, and so</li>
<li>I type <code>git stash</code>, wasting the work of step 1, because <code>git</code> does the dumbest thing a program can do in that case - destroys user information by default without opportunity to abort or undo, by stashing <em>all changes</em>, both staged and unstaged changes, blended into one diff without any distinction. (edit: the answers reveal <code>git</code> actually preserves the distinction when stashing, I just didn't know how to retrieve it)</li>
</ol>
<p>Now if I was a computer program, I'd always just execute <code>git commit -m 'TODO: --amend THIS COMMIT'</code> before <code>git stash</code>, or I'd always remember to type <code>git stash -k</code>. But I find it more natural to think &quot;I'll stash these unstaged changes real quick for later, then focus on the larger mental task of writing good commit message&quot;</p>
<p>In fact come to think of it, I've been using <code>git</code> for close to a decade almost daily, and I have <em>never</em> wanted a <code>git stash</code> to stash staged changes, let alone fuse staged and unstaged changes back together. I can see how that could be useful if you're in the middle of staging one set of changes and then you want to stash the whole thing, but to me that's an extremely tiny window of time - most of the time, if I have staged changes and unstaged changes, they're meaningfully different pieces of change which I haven't finished separating out into the best atomic commits.</p>
","2","4372452","",""
"55064087","5784831","2019-03-08 13:20:03","1","132","<git><syntax><git-stash><git-add>","Is it possible to add (stash) several file types in git?","<p>Assume I have</p>

<pre><code>git status
...
Changes not staged for commit:
        modified:   A.R
        modified:   B.Rmd
        modified:   C.txt
...
</code></pre>

<p>Is there a way to do the following:</p>

<pre><code>git add *.Rmd OR *.R
</code></pre>

<p>or</p>

<pre><code>git stash *.Rmd OR *.R
</code></pre>

<p>? I can't find it in the docs for <a href=""https://git-scm.com/docs/git-add"" rel=""nofollow noreferrer"">add</a> or <a href=""https://git-scm.com/docs/git-stash"" rel=""nofollow noreferrer"">stash</a>.</p>
","0","5784831","",""
"46093356","2989136","2017-09-07 09:55:23","1","371","<git><netbeans-8><git-stash>","Automatically delete existing git stash when unstashing","<p>I started using git. As I work with different branch between which I sometimes like to change without committing current modifications, I'm using the <code>stash</code> function. This works like a charm. My only concern is, that after I <code>unstash</code> the stash still keeps existing. Doing this a couple times, it pollutes the branch. Is there a way to automatically remove a <code>stash</code> when unstashing it?</p>

<p><strong>Update</strong></p>

<p>So I downloaded the source package of netbeans and customized the git module. The only thing to change was a hard coded boolean from false to true for the apply command of a stash, as the whole drop mechanism is already implemented. I loaded the customized module into my netbeans instance and now, when I unstash, the stash automatically gets dropped.</p>
","3","2989136","",""
"64799228","4103650","2020-11-12 06:54:40","6","6666","<github><git-stash><github-desktop>","unable to restore stash when changes are present on your branch github desktop","<p>I am using Github desktop.</p>
<p>I was working on a project on my PC, when my teammate do some changes from his PC on that project,
I pull these changes, and my local changes goes into stash.
After that pull, when I try to recover my local changes from stash, it show me a error saying</p>
<pre><code>&quot;**unable to restore stash when changes are present on your branch github desktop&quot;**
</code></pre>
<p>I do lot of changes in that project, that was equal to workload of 15 days.
I am not much familiar with git,</p>
<p>My question is about to recover stash files when github desktop is saying that you are unable to restore stash files.</p>
","1","4103650","",""
"46364713","746346","2017-09-22 12:21:41","0","244","<git><git-log><git-stash>","Why does --date= affect the %gd git log format?","<pre><code>$ git stash list --format=""%gd, %cd""
stash@{0}, Fri Sep 22 11:40:25 2017 +0100
stash@{1}, Mon Sep 18 16:12:11 2017 +0100
</code></pre>

<p>Stash id's and long format dates. If I try to get short dates:</p>

<pre><code>$ git stash list --format=""%gd, %cd"" --date=short
stash@{2017-09-22}, 2017-09-22
stash@{2017-09-18}, 2017-09-18
</code></pre>

<p>Why did the stash id also change into a date? <code>%cd</code> is <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-log.html"" rel=""nofollow noreferrer"">documented</a> to respect <code>--date=</code>, but not <code>%gd</code> (and it's not supposed to show a date anyway). </p>
","0","746346","",""
"46366708","1168041","2017-09-22 14:06:33","3","1797","<git><git-stash>","How does `git stash` treat untracked files?","<p>How does <code>git stash</code> treat untracked files?</p>

<p>Git official doc (<a href=""https://git-scm.com/docs/git-stash"" rel=""nofollow noreferrer"">link</a>) defines <code>git-stash</code> as</p>

<pre><code>git-stash - Stash the changes in a dirty working directory away
</code></pre>

<p>But to me (a beginner of git), it is not very obvious what is
the exact definition of ""dirty working directory"".  Are untracked
files included?</p>

<p>To be more precise, I notice that 
in a ""dirty"" working directory, we can have three types of dirty states:</p>

<ol>
<li>changes made to a file before it has been run <code>git add</code> (changes are in index)</li>
<li>changes made to a file after it has been run <code>git add</code>  (changes are not in index but the file is tracked aka ""Changes to be committed"")</li>
<li>changes made to a file that <code>git add</code> has never been run (the file is untracked)</li>
</ol>

<p>When we run <code>git stash</code>, what would happen to #1, #2, and #3?</p>
","4","1168041","0","0"
"10541542","1384315","2012-05-10 20:21:51","1","321","<git><git-stash>","Git pushing to remote origin—changes are not commited in origin, only visible after git stash","<p>On my local machine I have cloned a remote repo, made some changes, commited, then pushed back to the remote repo which has NOT been touched in any way in the meantime.</p>

<p>On the remote machine when I look in the remote repo, I don't see the changes I made. <code>git status</code> tells me that there are changes to be committed. When I look into the files, I do not see any of the changes I made. When I do <code>git stash</code> in the remote branch, I see the changes. So somehow git does not commit the pushed changes in the remote repo.</p>

<p>Could someone please explain the logic behind this to me and how I can circumvent this situation? Can I somehow push changes to the remote repo without having to <code>git stash</code>?</p>

<p>Thanks a lot for the clarifications!</p>
","0","1384315","",""
"11440916","937084","2012-07-11 20:26:25","2","2862","<git><githooks><pre-commit-hook><git-stash>","git stash in pre-commit hook fails on first commit","<p>I'm working on a pre-commit hook that uses YUI Compressor to minify any CSS and JavaScript files that have been staged for commit. After the files get minified, the minified versions automatically get staged for commit. I've read that it's generally not a good idea to automatically add machine-generated files to the commit, but I think in this case it's OK. This is what it looks like:</p>

<p>Output of <code>git status</code>:</p>

<pre><code># On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   _site-wide.css
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#   modified:   _subpage.css
#
</code></pre>

<p>Output of <code>git commit -m ""Updated site-wide styling""</code>:</p>

<pre><code>1 CSS file was minified and added to the Git repository
0 JavaScript files were minified and added to the Git repository
[master 41f1815] Updated site-wide styling
 2 files changed, 2 insertions(+), 2 deletions(-)
</code></pre>

<p>What happened here is the pre-commit hook used YUI Compressor to minify <code>_site-wide.css</code>, outputting the result to <code>site-wide.css</code> (no leading underscore). It then staged <code>site-wide.css</code> for commit. The pre-commit hook skipped over <code>_subpage.css</code> because, although it had been modified, it was not staged for commit.</p>

<p>Since the CSS and JavaScript files on disk might not be the same as the CSS and JavaScript files staged for commit, I run <code>git stash -q --keep-index</code> before minifying the files and then run <code>git stash pop -q</code> after. This pre-commit hook works fine on repositories that already have a commit, but if I put the pre-commit hook in place before the first commit is made, I get this:</p>

<p>Output of <code>git status</code>:</p>

<pre><code># On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use ""git rm --cached &lt;file&gt;..."" to unstage)
#
#   new file:   _site-wide.css
#   new file:   _subpage.css
#
</code></pre>

<p>Output of <code>git commit -m ""Initial commit""</code>:</p>

<pre><code>fatal: bad revision 'HEAD'
fatal: bad revision 'HEAD'
fatal: Needed a single revision
You do not have the initial commit yet
2 CSS files were minified and added to the Git repository
0 JavaScript files were minified and added to the Git repository
No stash found.
</code></pre>

<p>Output of <code>git status</code>:</p>

<pre><code># On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use ""git rm --cached &lt;file&gt;..."" to unstage)
#
#   new file:   _site-wide.css
#   new file:   _subpage.css
#   new file:   site-wide.css
#   new file:   subpage.css
#
</code></pre>

<p>I will now paste the pre-commit hook's code. Keep in mind that in order to be flexible, I wrote this script so that it could be run in any CakePHP project, not just the ones that have a Git repository. I also wrote it so that you can force it to minify all of the CSS and JavaScript files and not just the ones staged for commit. This is done by running <code>.git/hooks/pre-commit force</code>. Here is the code:</p>

<pre><code>#!/bin/bash

css_files_to_ignore=(
    #""_do_not_minify.css""
)

js_files_to_ignore=(
    #""_do_not_minify.js""
)

if git rev-parse --git-dir &gt; /dev/null 2&gt;&amp;1; then
    git_repository=true
    base_folder=""$(git rev-parse --show-toplevel)/app/webroot""

    if [ ""$1"" == ""force"" ]; then
        process_unstaged_files=true
    else
        process_unstaged_files=false
    fi
else
    git_repository=false
    base_folder=""$(cd ""$(dirname ""${BASH_SOURCE[0]}"")"" &amp;&amp; pwd)/webroot""
fi

if [ -f /Applications/yuicompressor.jar ]; then
    # Mac

    yuicompressor_path=/Applications/yuicompressor.jar
else
    # Linux

    yuicompressor_path=$(command -v yui-compressor)
fi

function process_assets()
{
    extension=$1
    files_minified=0

    for infile in $(echo ""$base_folder/$extension/*.$extension"")
    do
        # Only process files.

        [[ -f $infile ]] || continue

        filename=${infile##*/}

        # If the filename starts with an underscore, that means that the file is
        # eligible for minification.

        [[ ${filename:0:1} == ""_"" ]] || continue

        ignore_this_file=false

        files_to_ignore=$extension""_files_to_ignore""

        for i in $(eval echo \${$files_to_ignore[@]})
        do
            if [[ $i == $filename ]]; then
                ignore_this_file=true
                break
            fi
        done

        if [ $git_repository == true ] &amp;&amp; [ $process_unstaged_files == false ] &amp;&amp; git diff --quiet --cached $infile; then
            # This file is NOT staged for commit.

            ignore_this_file=true
        fi

        if [ $ignore_this_file == false ]; then
            minified_file=""$base_folder/$extension/${filename:1}""

            if [ ! -f ""$minified_file"" ] || test $infile -nt $minified_file; then
                $yuicompressor_command ""$infile"" -o ""$minified_file""

                if [ $git_repository == true ] &amp;&amp; [ $process_unstaged_files == false ]; then
                    git add ""$minified_file""
                fi

                ((files_minified++))
            fi
        fi
    done

    # Output a summary of what was done.

    if [ $extension == ""css"" ]; then
        file_type=""CSS""
    else
        file_type=""JavaScript""
    fi

    echo -n ""$files_minified $file_type file""

    if [ $files_minified -eq 1 ]; then
        echo -n "" was""
    else
        echo -n ""s were""
    fi

    echo -n "" minified""

    if [ $git_repository == true ] &amp;&amp; [ $process_unstaged_files == false ]; then
        echo "" and added to the Git repository""
    else
        echo
    fi
}

if [ -f ""$yuicompressor_path"" ]; then
    if [ ${yuicompressor_path: -4} == "".jar"" ]; then
        yuicompressor_command=""java -jar $yuicompressor_path""
    else
        yuicompressor_command=$yuicompressor_path
    fi

    if [ $git_repository == true ] &amp;&amp; [ $process_unstaged_files == false ] &amp;&amp; ! git diff --quiet --cached; then
        # The staging area is what should be processed rather than what is currently
        # on disk.

        git stash -q --keep-index

        stashed=true
    else
        stashed=false
    fi

    process_assets css
    process_assets js

    if [ $stashed == true ]; then
        git stash pop -q
    fi
else
    echo ""YUI Compressor was not found. Aborting.""
    exit 1
fi
</code></pre>

<p>How can I make this work? Any help would be appreciated.</p>
","1","937084","0","0"
"66085407","15161761","2021-02-07 07:09:05","4","2595","<git><git-stash>","git stash -u leaves untracked files in working directory","<p>If I understand correctly, <code>git stash -u</code> stashes everything in your working directory including untracked files and puts your working directory in the state it was in after the last commit i.e position of HEAD.</p>
<p>But when I ran it, it got rid of all untracked files except one folder (also removed all the tracked and modified files from my working directory of course). That particular folder is not in any of my <code>.gitignore</code> before or after stashing. It was showing as untracked before I ran the command and after. Is this a bug or is there a reason why this happened?</p>
<p>For further details, I had copied the folder from somewhere else in the same repo but I had done the same with several other folders which got stashed and removed. My goal was to stash all my local changes both tracked and untracked so that I could get a working directory in exactly the same state as the latest commit.</p>
","3","15161761","0","0"
"11489471","369854","2012-07-15 04:37:54","4","1318","<git><git-commit><git-stash>","how to alias git checkout && git stash apply","<p>So I have two branches master and formtest</p>

<p>I have an [alias] ""git switch"" that lets me stash any works in progress and checkout another branch.</p>

<p>""git switch""</p>

<pre><code>switch = !git stash &amp;&amp; git checkout
</code></pre>

<p>Now I want to create an [alias]</p>

<p>""git switchback""</p>

<pre><code>switchback = ???
</code></pre>

<p>when run it I want it to say </p>

<p>switch to this branch ""formtest""</p>

<p>and then run stash apply</p>

<p>to unstash the last WIP done and return things back before I first ran ""git switch""</p>
","7","369854","0","0"
"30081136","1552766","2015-05-06 15:26:53","2","514","<git><git-branch><git-stash>","Tracking changes using git during code review (stash vs. branch)","<p>In the interest of keeping code reviews small and concise, I've submitted a smaller code review than a full feature.  It is the cleanup before a larger change, but to avoid cluttering up the final review with the cleanup, I've made this review.</p>

<p>My later work will build on this currently active review, and there will be changes that I need to make as a result of the review.  However, I would also like to continue working on the final feature while this code is in review.</p>

<p>How I can properly track my development on the feature while still remaining able to make changes for code review.</p>

<p>Current scenario:</p>

<pre><code>master -x-x-x---x---|
feature      \-x-x-x| code review
</code></pre>

<p>Future scenario (branching)</p>

<pre><code>master -x-x-x---x---|
feature      \-x-x-x|-x--x--|
  feature2          \x--x--x| code review complete (merge)
</code></pre>

<p>Future scenario (stash)</p>

<pre><code>master -x-x-x---x---|
feature      \-x-x-x|-x--x--| code review complete (merge)
  work on feature branch, stash changes if needed to make code review updates
</code></pre>

<p>I think the branch model makes more sense, but creating another branch with the same name and same purpose seems to violate some sense of ""git propriety""</p>
","1","1552766","",""
"12476239","646276","2012-09-18 11:35:30","124","174732","<git><egit><git-stash>","git stash and git pull","<p>I am new to Git and I am using EGit eclipse plugin to commit.</p>

<p>I modified few files and I stashed the changes, then I did <code>git pull</code> in command line which pulled up all the latest commits. Then I did <code>Apply stashed changes</code> from EGit. Now it applied my changes and the changes which pulled from last commit of stashed files went out. I am not sure why it didn't ask me about merge conflicts and overwrote my changes and lost previous commits changes. </p>

<p>How to get those changes?</p>
","1","646276","0","0"
"13419997","787333","2012-11-16 15:54:08","0","179","<git><git-rebase><git-flow><git-stash>","git rebase with stash shows possible duplicate commits","<p>I am using git with git flow, and ""dev"" and ""branches"". I worked on a feature baaed on dev, then made some commits in dev. Now I want to rebase my feature on the dev HEAD. Rebase works perfectly, but I also have stashed changes in my feature. When I run gitk, everything looks fine, but when I tick ""All refs"" in view, it shows the feature branch twice - once correctly rebased on dev HEAD, but also on its old position in the branch tree. I assume that it has something to do with stashing, since that doesn't show up without a stash.</p>

<p>before rebase:</p>

<pre><code>A-B-E
   \
    C-D
</code></pre>

<p>after rebase</p>

<pre><code>A-B-E-C-D
</code></pre>

<p>after rebase with stash</p>

<pre><code>A-B-E-C-D-stash
   \
    C-D-stash
</code></pre>

<p>The actual question: are these commits really duplicate? And if yes, what can I do about it?</p>
","0","787333","",""
"66764592","","2021-03-23 13:55:29","0","485","<git><git-stash>","How to undo git stash save --keep-index","<p>I was working on deleting flutter from my MacOs and used the command git stash save --keep-index, which deleted every single thing on my Mac. I had really important documents on my laptop and really need those files back.
Would really appreciate the help.</p>
<p>Thanks in advance.</p>
","1","","",""
"55356101","1075247","2019-03-26 11:31:29","-1","166","<git><git-stash>","Can I prevent git stash pop/apply if I have any file changes?","<p>I broke my own rule of having more than one item in my git stash stack, and I <code>git stash pop</code>ed two of them instead of one.</p>

<p>That means I had two sets of changes, with no conflicts, now sat as untracked changes that I can't separate easily<sup>1</sup>.</p>

<p>So is there a way to make stash pop/apply interactive, and check I have no tracked or untracked changes before continuing?</p>

<hr>

<p><sup>1</sup> Had there been conflicts  I could have just use reset as in <a href=""https://stackoverflow.com/questions/48619276/actually-undo-git-stash-pop"">Actually undo git stash pop</a> </p>
","3","1075247","",""
"36745955","827880","2016-04-20 13:50:17","1","3563","<git><git-stash>","git stash apply to specific files?","<p>I have two stashes that overlap. I think that if I apply both stashes, I will have a mess, because I don't need some changes in one of the stashes. So I would like to apply one stash and then apply only changes to specific files from another stash, even better if interactively. How can I do it?</p>

<p>My question is different than <a href=""https://stackoverflow.com/questions/15212882"">this one</a> suggested, because the OP of that question wants apply stash to different commits, I want to apply two stashes to my code.</p>
","2","827880","",""
"36776653","5760308","2016-04-21 17:29:49","2","1339","<linux><git><version-control><git-stash><angular-seed>","How do I push an angular-seed based project to my own git repo?","<p>So I made a small web app based off of the Angular-Seed project on my local machine. I cloned it from Github and made the project, no problem.</p>

<p>I added all the files/directories without issue, after I deleted the <code>.git</code> directory and <code>.gitignore</code> file from the angular-seed root directory. Running a <code>git status</code> the console reads:</p>

<pre><code>On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
</code></pre>

<p>However when I add, commit and push to my remote repository, the angular-seed directory (along with the rest of the project files) does not show up.</p>

<p>The directory map looks like <code>/home/user/my-local-repo/angular-seed/</code> where all the project files are in the <code>angular-seed</code> directory. Can somebody please help me?</p>
","0","5760308","",""
"36798310","2082964","2016-04-22 15:51:58","18","7907","<git><git-stash><git-config>","git create stash without need to configure user.email and user.name (git stash --author ?)","<p><strong>IN SHORT</strong></p>

<p>Is there a possibility to create a stash (using <code>git stash create</code>) <strong>without</strong> the need to configure <code>user.email</code> and <code>user.name</code>? Something similar to the <code>git commit --author</code> option? </p>

<p><strong>SOME CONTEXT:</strong></p>

<p>I have several build machines on which I have a build user. Each has acces to the central git repositories. However I haven't configured <code>user.email</code> and <code>user.name</code> for each of those users; since they never need to make commits.</p>

<p>In one of my scripts I use</p>

<pre><code>git stash create
</code></pre>

<p>(which allows me to use git archive --format-gtz ... I'll spare you the detail; see my <a href=""https://stackoverflow.com/questions/23115777/git-archive-with-unstaged-changes"">related question</a>)</p>

<p>However this command fails:</p>

<pre><code>*** Please tell me who you are.

Run

  git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: empty ident name (for &lt;macq@chmalap.macqel&gt;) not allowed
Cannot save the current index state
</code></pre>

<p>PS: I have git 1.8.4</p>
","1","2082964","0","0"
"52946530","6915929","2018-10-23 10:14:28","0","67","<git><git-stash>","git stash partial failure due to wrongly ordered arguments and lost untracked files","<p>I had some modified files and I had 2 untracked files.</p>

<p>I wanted to stash some of the modifications and the untracked files
All the thinks I wanted to stash were in the same directory so I used that and a wild card on the end to achieve stashing all the files within it.</p>

<p>so I ran </p>

<pre><code>git stash push -u  -- File/Path/To/FolderOfFilesIWantCommited/* -m ""My Message""
</code></pre>

<p>This returned this</p>

<pre><code>Saved working directory and index state WIP on [Branch Name]: [Commit Sha1] [commit message]
fatal: pathspec '-m' did not match any files
error: unrecognized input
</code></pre>

<p>This message is why I said 'partial failure' in the title.. it isn't really clear what has gone on here</p>

<p>I realised what I should have ran was</p>

<pre><code>git stash push -u -m ""My Message""  -- File/Path/To/FolderOfFilesIWantCommited/* 
</code></pre>

<p>However after the failed first attempt all of my modifications remained unstaged but present. However the 2 untracked files had disappeared. I could really do with them back, so any help would be greatly appreciated</p>

<p>Just an added note: I ran this in Powershell using PoshGit, which be the cause of one or more of the error messages. Thought I'd include this as it might confuse others</p>
","0","6915929","",""
"70017175","17376215","2021-11-18 09:12:08","2","1937","<git><git-stash>","Remove changes from one file in git","<p>For example, I start from a clean commit, make some changes to different files, then I want to remove changes I made from only one file. How do I do it?<br />
I tried to do:</p>
<pre><code>git stash -p train.py
</code></pre>
<p>But I've got the error:</p>
<pre><code>fatal: subcommand wasn't specified; 'push' can't be assumed due to unexpected token 'train.py'
</code></pre>
","3","17376215","",""
"70635443","499439","2022-01-08 18:55:14","0","58","<git><user-experience><git-stash>","Git stash/whatever on every git switch?","<p>Can we have such a functionality, let's call it <code>git switch-for-humans</code> that will make me forget about stashing/switching/committing/amending/etc. (and choosing the right one of them every single time) once and forever:</p>
<ol>
<li>When I'm at branch A and I want to switch to whatever branch B I just do:
<code>$ git switch-for-humans B</code>
At this point my working tree whatever state it is in (with all the tracked/untracked/etc.files, just as it is) is magically stashed or saved at some storage specific for branch A</li>
<li>I get to branch B.</li>
<li>I do any kind of switching</li>
<li>At some point by calling &quot;git switch-for-humans A&quot; I arrive back to A and the working tree gets magically restored.</li>
</ol>
<p>This saving/restoration works for every branch, w/o any additional actions from user's side.</p>
<p>Is there some known way to get such behavior from git?..</p>
","3","499439","0","0"
"70692004","17440307","2022-01-13 05:50:36","0","121","<git><git-stash><git-untracked>","Untracked files automatically updated, used git stash, and the changes have followed me since","<p><strong>For reference</strong>: My master branch is essentially a dead branch (I haven't visited in months), all deployments are made from my dev2 branch. Checking out to master was an error of natural reflex since my other projects all use master.</p>
<p><strong>For context</strong>: I was on a feature branch, I checked out to master and all of my untracked files were automatically updated. I need these files to return to their previous state for my code to be in working order.</p>
<p>Here is a list of my operation in order with their related git notifications:</p>
<p>From a clean working tree, <code>git checkout master</code></p>
<pre><code>$ git checkout master

Updating files: 100% (59224/59224), done. Switched to branch 'master'
</code></pre>
<p>I ran a <code>git status</code></p>
<pre><code>$ git status

Untracked files: (use &quot;git add ...&quot; to include in what will be committed) 
  .DS_Store 
  .env node_modules/.bin/ 
  etc. 
</code></pre>
<p>but note that the list is long and they are node modules and cp resource files.</p>
<p>I ran a <code>git add</code>, and then <code>git stash</code></p>
<pre><code>$ git add .
$ git stash

Saved working directory and index state WIP on master: c28616b90 fix ht access
</code></pre>
<p>Then I did a <code>git status</code></p>
<pre><code>$ git status 

On branch master Your branch is up to date with 'origin/master'. nothing to commit, working tree clean
</code></pre>
<p>Checked out to a working branch called &quot;dev2&quot;, which is essentially my master branch</p>
<pre><code>$ git checkout dev2

Updating files: 100% (59224/59224), done. Switched to branch 'dev2'
</code></pre>
<p>It appears the untracked files updated on master have followed me to other branches and updated those branches.</p>
<p>Here's a git log</p>
<pre><code>$ git log

commit f45afe47f6c5d4e1e63c71748cd556d9c133fd21 (HEAD -&gt; tyClients)
commit c82fb69f9147082ccdfe6d955be7e4a5508b7f3a (origin/dev2, mobForms, dev2)
</code></pre>
<p>The file updates are in my gitignore.</p>
<p>I would like the untracked files to return to their previous state on all branches before this <code>git stash</code> or at their state of my last real commit.</p>
","3","17440307","",""
"53757281","10784772","2018-12-13 07:54:26","0","458","<java><spring><git><spring-boot><git-stash>","How to connect a git stash url to my local repository to get an updated code each time?","<p>I have created a search Directory project wherein I am searching for the table name in the codebase of my local. Now, I just want to connect this local repo to git stash so that each time it searches in the updated code and not the old one. How can we do this through java?</p>

<p>Please suggest</p>
","3","10784772","",""
"38124744","3042595","2016-06-30 13:35:33","0","685","<git><version-control><merge><git-pull><git-stash>","Why git pull won't/can't merge local changes?","<p>Trying to understand git behavior.</p>
<p>When I execute <code>git pull</code> I get a warning</p>
<pre><code>error: Your local changes to the following files would be overwritten
by merge:
        foo/bar
Please, commit your changes or stash them before you can merge. Aborting
</code></pre>
<p>But if I <code>git stash save</code>, <code>git pull</code>, and then <code>git stash pop</code>, the changes are applied without any problem.</p>
<pre><code>Auto-merging foo/bar
...
</code></pre>
<p>Why can't/won't <code>git pull</code> do the same thing?</p>
","3","3042595","",""
"70884294","10864356","2022-01-27 19:03:16","1","317","<git><version-control><git-commit><git-checkout><git-stash>","Checked out previous git commit, now can't switch back to HEAD","<p>In my React Native project I checked out a previous git commit using <code>git checkout &lt;previous commit SHA&gt;</code>, then tried to return to HEAD using <code>git checkout &lt;most recent commit SHA&gt;</code>. It said <code>error: Your local changes to the following files would be overwritten by checkout: android/gradlew.bat. Please commit your changes or stash them before you switch branches.</code>
I did <code>git stash</code> and then <code>git checkout &lt;most recent commit SHA&gt;</code> again, but it gave me the same <code>Your local changes</code> error.</p>
<p>How can I get back to HEAD?</p>
","0","10864356","",""
"53807098","192798","2018-12-16 22:40:54","1","714","<git><git-stash><git-lfs>","`git stash -p` showing files in lfs","<p>I have a repository that uses git-lfs, and the files in lfs are committed.  However, when I use <code>git stash -p</code>, git asks me if I want to stash each and every file in lfs.  How do I skip these files in the questions?  If I stash everything and <code>git stash show</code>, it does not show the lfs files as stashed.  It seems to be an issue specific to <code>-p</code>.</p>

<p>git version 2.17.1</p>

<p>git-lfs/2.3.4 (GitHub; linux amd64; go 1.8.3)</p>
","0","192798","",""
"71036153","7975462","2022-02-08 15:04:44","0","89","<git><bitbucket><oracle-sqldeveloper><git-clone><git-stash>","How to resolve this ""git-upload-pack not found"" in Sql Developer","<p>I'm trying to clone my Bitbucket repository with SQL developer but i am getting the below error.</p>
<pre><code>https://username@stash.cit.comp.comg:1234/stash: https://username@stash.cit.comp.comg:1234/stash/info/refs?service=git-upload-pack not found
</code></pre>
","2","7975462","",""
"71041694","1108305","2022-02-08 22:29:09","0","69","<git><git-stash>","What is meant by including ""-p"" as a ""non-option argument"" in the git stash push documentation?","<p>The <code>git stash push</code> <a href=""https://git-scm.com/docs/git-stash#Documentation/git-stash.txt-push-p--patch-S--staged-k--no-keep-index-u--include-untracked-a--all-q--quiet-m--messageltmessagegt--pathspec-from-fileltfilegt--pathspec-file-nul--ltpathspecgt82308203"" rel=""nofollow noreferrer"">documentation</a> states:</p>
<blockquote>
<p>For quickly making a snapshot, you can omit &quot;push&quot;. In this mode, non-option arguments are not allowed to prevent a misspelled subcommand from making an unwanted stash entry. The two exceptions to this are <code>stash -p</code> which acts as alias for <code>stash push -p</code> and pathspec elements, which are allowed after a double hyphen <code>--</code> for disambiguation.</p>
</blockquote>
<p>However, I'm confused by the <code>stash -p</code> example being listed as an exception to the non-option arguments.  Isn't <code>-p</code> an option argument?</p>
<p>For instance, the following also appears to be a valid use of omitting &quot;push&quot;, and it creates a stash with the given message:</p>
<pre class=""lang-none prettyprint-override""><code>git stash -m &quot;some commit message&quot;
</code></pre>
<p>Am I misunderstanding something here?  Is this an issue with the documentation?</p>
<p>What is meant by including <code>stash -p</code> as an exception to disallowing the non-option arguments, when it appears to be an option argument.?</p>
","1","1108305","0","0"
"38291337","404099","2016-07-10 11:22:05","7","1406","<git><git-stash>","What is the purpose of .git/log","<p>I've noticed <code>.git/log</code> while searching where git saves stash commits. Found that:</p>

<pre><code>$ ls .git/logs/
HEAD  refs 
$ diff .git/refs/ .git/logs/refs/ | head -n3
Common subdirectories: .git/refs/heads and .git/logs/refs/heads 
Common subdirectories: .git/refs/remotes and .git/logs/refs/remotes 
diff .git/refs/stash .git/logs/refs/stash 
</code></pre>

<p>Meaning <code>stash</code> - is the only unique file under <code>logs</code>. But it doesn't shed light on the rationale for this folder. So what is the purpose of <code>.git/log</code> and why git duplicates references?</p>
","0","404099","",""
"71060732","839513","2022-02-10 06:36:04","4","2261","<git><git-stash>","git stash can't apply untracked file","<p>I stashed my files, including a new file <code>src/***/Microservices.jsx</code>. Now I see it on my stash:</p>
<pre class=""lang-sh prettyprint-override""><code>&gt; git stash show
 src/***/***.jsx                 |  5 ++---
 src/***/table-view/***.jsx  |  4 ++--
 src/***/table-view/SubGroup.jsx | 37 -------------------------------------
 src/***/views.js                |  2 ++
 4 files changed, 6 insertions(+), 42 deletions(-)

&gt; git stash show --include-untracked
 src/***/***.jsx                                    |  5 +--
 src/***/Microservices.jsx                          | 48 ++++++++++++++++++++++
 src/***/{table-view =&gt; microservices}/SubGroup.jsx | 14 ++++---
 src/***/table-view/***.jsx                     |  4 +-
 src/***/views.js                                   |  2 +
 5 files changed, 63 insertions(+), 10 deletions(-)
</code></pre>
<p>But no matter what I tried (applying by <code>git stash apply [--index]</code>, <code>git stash pop</code> or from the git extension below), I can't apply this file.</p>
<p>What should I do to continue to work on this file?</p>
<hr />
<p>Screenshot from <a href=""https://github.com/mhutchie/vscode-git-graph"" rel=""nofollow noreferrer""><em>Git Graph</em></a> VSCode Extension:</p>
<p><a href=""https://i.stack.imgur.com/gwpOj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gwpOj.png"" alt=""stash details"" /></a></p>
<p>You can see the <code>Microservices.jsx</code> file, and I can click on it and see the diff of this file inside the stash.</p>
","6","839513","",""
"71063044","18000575","2022-02-10 10:00:01","0","538","<git><git-stash>","git stash --all not stashing untracked dir","<p>I have some untracked files and folders in my project. When I run &quot;git stash --all&quot; even though these untracked folders not stashed why so? How can I fix this?</p>
<pre><code>/home/bug_fix/mps&gt;git stash --all 
warning: LF will be replaced by CRLF in mps-dashboard/dashboard/veronica-client/target/generated-sources/swagger/.gitignore.
The file will have its original line endings in your working directory
warning: LF will be replaced by CRLF in mps-dashboard/dashboard/veronica-client/target/generated-sources/swagger/.swagger-codegen-ignore.
The file will have its original line endings in your working directory
warning: failed to remove mps-dashboard/dashboard/webapp-frontend/target/we-archiver/pom.properties: Permission denied
warning: failed to remove mps-dashboard/dashboard/webapp-frontend/target/mps-dash-fe-2.0.1-SNAPSHOT.jar: Permission denied


/home/bug_fix/mps&gt;git status
On branch mps
Your branch is up to date with 'origin/mps'.

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    test/veronica/

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>added more log as asked by @Ruchita Sheth</p>
<pre><code>/home/bug_fix/mps&gt;git status
On branch mps
Your branch is up to date with 'origin/mps'.

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        test/veronica/

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
/home/bug_fix/mps&gt;


/home/bug_fix/mps&gt;git stash push --all
warning: CRLF will be replaced by LF in ric-dashboard/dashboard/webapp-frontend/node/npm.cmd.
The file will have its original line endings in your working directory
Ignoring path test/veronica/
Saved working directory and index state WIP on mps: f80fc826a Merge branch 'XLM-908' into 'mps'
warning: failed to remove ric-dashboard/dashboard/app-mgr-client/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst: Permission denied
warning: failed to remove ric-dashboard/dashboard/webapp-frontend/target/ric-dash-fe-2.0.1-SNAPSHOT.jar: Permission denied
/home/bug_fix/mps&gt;


/home/bug_fix/mps&gt;git status
On branch mps
Your branch is up to date with 'origin/mps'.

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    test/veronica/

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
","10","18000575","",""
"53823386","1858225","2018-12-17 21:42:15","8","1467","<git><shell><git-stash>","Programmatically get number of stashes in git","<p>My ""oldest"" stash in a project is something I need to re-apply from time to time. (Yes, there's a reason for this, and yes, it's terrible, but fixing the underlying issue would be more time-consuming than just using <code>git stash</code> for now.)</p>

<p>However, the oldest stash has the highest number in the list, so I can't apply it without first using <code>git stash list</code> to see what number it is.</p>

<p>Is there some way to make Git print the number of stashes it's currently holding, so that something like this would always print the last stash (in a shell supporting this kind of command-interpolation)?</p>

<pre><code>git stash apply $(git stash &lt;count-command&gt;)
</code></pre>

<p>I realize I can use something like this:</p>

<pre><code> git stash list | tail -1 | awk '{print $1}' | grep -oP '\d+'
</code></pre>

<p>...but that's pretty hideous, so I'd like to know if there's something simpler.</p>
","7","1858225","0","0"
"56501190","986696","2019-06-07 21:03:48","2","128","<git><git-merge><githooks><git-stash>","Is there a way to `git stash` every file in the project (not just changes)?","<p>I've run into an issue where I believe the best solution would be to capture the current state of the project and apply it to a new commit in a new branch.</p>

<p><strong>Here's an overview of my git workflow:</strong></p>

<ul>
<li>I keep a local copy of our origin/master branch on my machine which I'll refer to as local/master.</li>
<li>I use local/master for comparison when debugging changes in my own local/feature branches.  For instance, if I notice a bug in my local/feature branch I might switch back to the local/master branch to see if it reproduces there.  This lets me know if the bug was pre-existing or caused by my own changes.</li>
<li>I also use local/master as an intermediate staging branch when performing merges between origin/master and my local/feature branches.  This prevents the source branch (master) from being a moving target in case I need to abandon the merge and start over.</li>
<li>I only update local/master by pulling from origin/master.  This is done whenever other devs merge their own changes into origin/master.</li>
<li>I submit my code by pushing from local/feature to origin/feature and submitting a merge request from origin/feature into origin/master.</li>
</ul>

<p><strong>Here are the chronological steps that led to this situation:</strong></p>

<ol>
<li>I forked a branch from local/master as local/feature1.</li>
<li>I made several commits to local/feature1.</li>
<li>A feature was merged into origin/master which moved some .pem files (public/private keys) from one directory to another.</li>
<li>A hook was added to origin (a private Gitlab instance) which prevented any subsequent .pem files from being checked in.</li>
<li>I pulled from origin/master into local/master.</li>
<li>I merged from local/master into local/feature1.</li>
<li>I made several more commits to local/feature1.</li>
<li>I attempted to push my code from local/feature1 into origin as origin/feature1.</li>
<li>origin complained that I wasn't allowed to check in .pem files.</li>
</ol>

<p>I believe this is happening because the commit history in local/feature1 now contains a merge commit which included the .pem file changes.  This file was added to origin/master before the hook was implemented, so it wasn't subject to the hook restrictions.  However, the merge commit into my branch is being submitted afterwards along with my code changes, so it's getting flagged by the hook.</p>

<p>At this point I'd like to remove the .pem files from local/feature1's commit history without actually removing the files.  Rebasing and squashing the commits at this point won't solve the problem since the .pem files are already there.  Deleting the .pem files won't help since they actually need to be in the project (unrelated story).  Reverting my branch to an unmerged state isn't an option either since the uploaded origin/feature would then be too far out of date with origin/master for the review to make sense.</p>

<p>The obvious solution seems to be:</p>

<pre><code># Copy current state of the project to a backup directory
cp -r . ../backup
rm -rf ../backup/.git

# Reset project to latest official state
git checkout local/master
git pull

# Regenerate local branch so the merged changes aren't included as local commits
git branch -D local/feature1
git checkout -b local/feature2

# Copy the desired project state back in and commit it
cp -rf ../backup/. .
git add --all
git commit -m ""Regenerating feature branch""
rm -rf ../backup

# Upload without being restricted by hook
git push --set-upstream origin feature2
</code></pre>

<p>I feel like there ought to be a way to do this natively with git without the need to mess with the file system directly.  Is there some magic trick to doing this?  Perhaps via <code>git stash</code>?</p>
","2","986696","",""
"67473634","11822604","2021-05-10 15:47:06","0","296","<git><github><git-stash>","git stash apply recovered only unstaged files","<p>I have some 24 files changed on branch A. None of these are committed. Some of these files with changes, say 18 are unstaged. And other 6 files are staged. I had to checkout to other branch B because of some other work.
I stashed these changes while on branch A, checked out to branch B, did my work and later checked back to branch A.
I now did git stash apply. I can only see changes that are unstaged are recovered, but there is no sign of file changes that are changed and staged.</p>
<p>Can anyone help how I can get these staged but uncommitted changes back?</p>
","0","11822604","",""
"67571873","301717","2021-05-17 14:40:18","1","103","<git><git-rebase><git-stash>","Where is the temporary stash entry created by `git rebase --autostash`?","<p>I am used to run <code>git rebase --autostash</code>. For several reasons (conflict, edition, etc...) I may be interrupted during the rebase. I expect to see the autostashed content in the output of <code>git stash list</code>. But it is not. Where the temporary stash entry is located? How to see it?</p>
","0","301717","",""
"49830435","1589324","2018-04-14 10:28:55","3","4163","<git><git-stash>","Git - remove all stashes from the git stash list after a certain point","<p>I have the following stash list (<code>git stash list</code>):</p>

<pre><code>stash@{0}: WIP on foobar: baz qux
stash@{1}: WIP on worble: norf 
stash@{2}: On blazbliz: finishes blah 
stash@{3}: WIP on foobar: baz qux in progress
stash@{4}: WIP on wizzle: wuzzle 
stash@{5}: On wiggle: wiggle 
stash@{6}: On blah: yada 
stash@{7}: WIP on hello: started hello world 
</code></pre>

<p>How do I drop all stashes after a certain point? say for example all stashes after <code>stash@{2}</code> so that I end up with</p>

<pre><code>stash@{0}: WIP on foobar: baz qux
stash@{1}: WIP on worble: norf 
stash@{2}: On blazbliz: finishes blah
</code></pre>
","0","1589324","0","0"
"32008744","4025940","2015-08-14 11:15:21","3","5479","<git><git-stash>","How can I merge two commits in git?","<p>I recently pushed a commit to my git remote repository, and now I'm going to commit another change.</p>

<p>Is there a way I can merge these commits into a single commit? </p>
","0","4025940","0","0"
"14495179","1356739","2013-01-24 06:24:58","0","1067","<git><git-stash>","git stash apply can't get the version what i really need","<p>At first branch is in master,then</p>

<p>(1) <code>git checkout -b test1</code> ,then modify one file a.c,and <code>git stash</code></p>

<p>And now git stash list</p>

<pre><code>stash@{0}: WIP on test1: 7aa1dbd Merge ""RR:AA123""
</code></pre>

<p>(2)<code>git checkout -b test2</code>,then modify another file b.c,and <code>git stash</code></p>

<p>And now git stash list</p>

<pre><code>stash@{0}: WIP on test2: 7aa1dbd Merge ""RR:AA123""
stash@{1}: WIP on test1: 7aa1dbd Merge ""RR:AA123""
</code></pre>

<p>(3) now <code>git checkout test</code>,and i'd like to get the modified a.c file,which was in <code>stash@{1}</code></p>

<pre><code> git stash apply --stash@{1},
</code></pre>

<p>and found get the b.c but not a.c</p>

<p>do i miss some steps that try to get stash pop?</p>
","0","1356739","0","0"
"67880909","","2021-06-08 03:08:51","2","438","<git><git-stash>","Git: does deleting a directory remove git stashes?","<p>I have some work in directory <code>/foo</code>.  I stashed some of my changes and now the directory is in a bad state.  If I delete the directory entirely and re-clone it from github, will my stashes still be there or are they tied to the directory I made them in?</p>
","0","","",""
"32092351","500999","2015-08-19 10:01:24","4","2109","<git><git-stash>","Applying a git stash created with --all","<p>I accidentally created a git stash with the <code>--all</code> option, which, according to the docs,</p>

<blockquote>
  <p>If the <code>--all</code> option is used instead then the ignored files are stashed and cleaned in addition to the untracked files.</p>
</blockquote>

<p>So now restoring my changes with <code>git stash pop</code> fails:</p>

<pre><code>some/ignored/file already exists, no checkout
Could not restore untracked files from stash
</code></pre>

<p>(What I actually should have done is use <code>--include-untracked</code>)</p>

<p><code>git stash show -p</code> still lists my changes, without any ignored files. How can I <code>apply</code> my stash without git trying to restore ignored files?</p>

<p><strong>Edit</strong>: I just created a test repository and did a <code>git stash --all</code>. Ignored files were stashed and removed from the file system. My problem is that in my case above, they were stashed, but <strong>not</strong> removed from the file system, so that seems to be the cause for the problem.</p>
","4","500999","0","0"
"50242489","35250","2018-05-08 21:26:22","16","938","<git><git-stash>","How to ignore added hunks in `git stash -p`","<p>Imagine this scenario:</p>

<pre><code># edit two files
git add -p // add hunks from one file
</code></pre>

<p>Now when you run <code>git stash -p</code>, it will again ask you whether you want to stash the hunks that you just selected via <code>git add -p</code>. Is there some way to configure git to ignore these already-added hunks by default? Most of the time, I don't want to stash stuff that I added already.</p>
","9","35250","0","0"
"15286075","1044366","2013-03-08 03:14:02","1516","686972","<git><git-stash>","Difference between git stash pop and git stash apply","<p>I've been using <code>git stash pop</code> for quite some time. I recently found out about the <code>git stash apply</code> command. When I tried it out, it seemed to work the same as <code>git stash pop</code>. </p>

<p>What is the difference between <code>git stash pop</code> and <code>git stash apply</code>?</p>
","0","1044366","0","0"
"33411000","2152440","2015-10-29 09:57:06","1","293","<git><git-stash>","git diff stash@{0} shows changes - git stash apply does not change the working tree","<h3>The Problem</h3>

<p>We had an external developer working on a project on a wrong branch through FTP (not working with git at all).</p>

<h3>The fix</h3>

<p>To reapply his (by nature, uncommitted) changes, I ran <code>git stash</code>, followed by <code>git checkout [correct_branch]</code>, then <code>git stash apply</code>. Nothing had changed except for a single file which was not changed by him (but existed in the stash anyway). </p>

<h3>The good ol' weirdness</h3>

<p>Running <code>git diff 'stash@{0}' [correct_branch] --name-only</code> (alternatively omitting the <code>name-only</code> flag) shows me a correct difflist of the changed files. When running <code>git stash apply</code> or <code>git stash apply 'stash@{0}'</code>, followed by <code>git diff</code> does not tell me that anything has changed.</p>

<p>What's going on here? The <code>diff</code> against the stash tells me that there is indeed changes in that stash that hasn't been applied to the current branch.</p>
","2","2152440","",""
"50617527","4089974","2018-05-31 05:53:48","0","1006","<git><git-stash><git-extensions><git-reset>","Git: Is it possible to recover my local unstaged changes (which were once staged) after a git reset --hard?","<p>I had some changes in my local branch which I added using <code>git add -A</code>.
Then for some reasons I unstaged these changes by doing <code>git reset</code>.
Then I opened GitExtensions and clicked on <em>Reset all changes</em>. (I somehow assumed that it was <em>Reset selected changes</em> :/)</p>

<p>So I ended up losing these changes.
Is it possible to recover these changes given that they were once added ?</p>

<p>The conversation here suggests that the changes can be recovered if they were ever staged. I could not find how though:
<a href=""https://groups.google.com/forum/#!topic/gitextensions/fyt9AXC6GR4"" rel=""nofollow noreferrer"">need to undo ""Reset Changes"" action git extensions</a></p>

<p>I found ways to recover if the changes were once stashed:
<a href=""https://stackoverflow.com/questions/89332/how-to-recover-a-dropped-stash-in-git"">how-to-recover-a-dropped-stash-in-git</a></p>

<p>The answers here suggest that it is not possible to recover the changes if they are not commited, staged, or stashed:
<a href=""https://stackoverflow.com/questions/7147680/accidentally-reverted-to-master-lost-uncommitted-changes?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa"">accidentally-reverted-to-master-lost-uncommitted-changes</a></p>
","1","4089974","",""
"50873021","141022","2018-06-15 09:47:09","12","2159","<git><powershell><git-stash><posh-git>","git stash apply unknown option: -encodedCommand error","<p>When applying a git stash with the command:</p>

<p><code>git stash apply stash@{1}</code></p>

<p>As suggested in the <a href=""https://git-scm.com/book/en/v1/Git-Tools-Stashing"" rel=""noreferrer"">documentation on git stash</a>.</p>

<p>I receive the error:</p>

<pre><code>unknown option: -encodedCommand error
</code></pre>
","0","141022","0","0"
"34589451","3595639","2016-01-04 10:51:04","22","13272","<git><git-stash>","git: move stash to repository in another directory","<p>I have a local stash on a directory. </p>

<p>For some reasons, I had to re-import the same remote project into another directory. </p>

<p>Is there a way to move my stash from my old directory to the new created one since they follow the same remote project and branches ? </p>
","2","3595639","0","0"
"51717734","4843013","2018-08-07 01:50:44","9","9359","<git><git-checkout><git-stash><git-reset>","Can't discard changes in git","<p>A week or two ago I took some files that I had been archiving with a simple <code>find |sed|tar|xz|gpg</code> bash script, unpacked them all, and put their contents in a git repo, commited, put the next archives content in the repo, committed (rinse and repeat) in order to have a nicer system.</p>
<p>All files were edited with on one of my two computers, both using Arch Linux, in either TeXstudio or Vim.</p>
<p>I tried to checkout an old version, but its flipping out---it won't let me due to changed that are outstanding. I tried everything I knew how, and then went on Google to find out things I didn't know.</p>
<p>There are a number of other questions on this subject. Unfortunately their answers have not helped me. For sake of completion I'll list the questions.</p>
<blockquote>
<p>$ git status<br />
On branch master<br />
Changes not staged for commit:<br />
(use &quot;git add ...&quot; to update what will be committed)<br />
(use &quot;git checkout -- ...&quot; to discard changes in working directory)</p>
<p>modified:   Arcs/arc1.tex<br />
modified:   Arcs/arc2.tex<br />
modified:   Arcs/frontmatter.tex</p>
<p>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</p>
</blockquote>
<p>Also, so people don't need to look, below, I already did the obvious ones.</p>
<pre><code>git reset --hard
git -a commit
git stash
git pull
</code></pre>
<p>as well as remove everything from the index and add it back.</p>
<h1><a href=""https://stackoverflow.com/questions/26879788/cant-discard-file-changes-in-git"">Cant discard file changes in GIT</a></h1>
<p>I'm not on Windows. Also, this should have anything to do with line endings since I'm the only user. There is no reason for there to be weird line endings.</p>
<h1><a href=""https://stackoverflow.com/questions/18536863/git-refuses-to-reset-discard-files/18875915"">Git refuses to reset/discard files</a></h1>
<pre><code>git reset --hard HEAD (among other possibilities)
</code></pre>
<hr />
<pre><code>git stash
git stash drop
</code></pre>
<hr />
<pre><code>git config core.autocrlf input
git rm --cached -r .
git reset --hard
git add .
git commit -m &quot;Normalize line endings&quot;
</code></pre>
<p>Not only did this not work but it increased the number of files that are misbehaving and also wrote 700+ lines to a file for. . .reasons. It wasn't even the file that was misbehaving.</p>
<h1><a href=""https://stackoverflow.com/questions/1575682/cant-seem-to-discard-changes-in-git"">Can&#39;t seem to discard changes in Git</a></h1>
<p>More end line stuff.</p>
<h1><a href=""https://stackoverflow.com/questions/52704/how-do-i-discard-unstaged-changes-in-git"">How do I discard unstaged changes in Git?</a></h1>
<pre><code>git clean -df
git checkout -- .
git checkout -- ./.

git checkout-index -a -f

git checkout --force master
</code></pre>
<h1>Things I didn't see, but tried anyway</h1>
<p>I tried commiting the changing <code>git commit -am &quot;WORK DAMN YOU!&quot;</code> then <code>git revert --hard HEAD^</code></p>
<p>I also tried pulling from my private remote, but was just told that the local repo was already up to date.</p>
<p>This is extremely frustrating.</p>
","12","4843013","0","0"
"37279961","180500","2016-05-17 15:09:16","6","1121","<git><gitignore><node-modules><git-stash>","Why is git stash removing my node_modules folder?","<p>I'm having an issue where when I run <code>git stash -u</code> (ie. stash all, including untracked files), Git removes my node_modules directory. On top of this, it doesn't even restore it on <code>git stash pop</code> - I have to run <code>npm install</code> again to get it back.</p>

<p>node_modules is ignored in .gitignore (via the line <code>node_modules/*</code>), and as far as I can see has never been committed in the history of the project (<code>git log --all -- node_modules</code> returns nothing). Shouldn't <code>git stash</code> ignore it (even when committing untracked files)? I'm pretty sure I've used <code>git stash</code> like this before without any issues with node_modules.</p>

<p><strong>Update:</strong> I've checked, and this issue is not limited to a particular project - it seems to happen anywhere I run <code>git stash -u</code>. For what it's worth, my Git version is 2.6.3.windows.1 (on Windows).</p>
","5","180500","",""
"37309536","6213522","2016-05-18 20:29:47","0","55","<eclipse><git><git-stash>","Using stash and eclipse, I cannot see a branch I created in the Stash UI in the git view in eclipse","<p>So I created a branch in the stash UI but I cannot see it on the list of Remote Tracking branches in the Git Repositories eclipse add-on.</p>

<p>Thanks in advance for the help!</p>
","1","6213522","",""
"37422901","5948645","2016-05-24 20:06:19","0","1740","<git><git-stash>","I accidentally ""git stash"" all my changes. How do I roll back?","<p>I am new to programming and new to github. I am currently doing my intern at a school department. I installed some js plugins today and realized I might have wiped out some of the other js files. Then I decided to just copy the .cshtml and .css files I have been working on and stash all other changes. I was stupid enough to forgot to make a copy of my .css file and all the changes are lost. </p>

<p>Is there anyway to reverse a ""git stash"" command?</p>
","0","5948645","",""
"71139921","3310334","2022-02-16 10:16:59","2","179","<git><git-stash>","use git stash version in case of merge conflict","<p>I just did</p>
<pre><code>git stash
git pull
git stash apply
</code></pre>
<p>and got the message</p>
<pre><code>Auto-merging my_notebook.ipynb
CONFLICT (content): Merge conflict in my_notebook.ipynb
</code></pre>
<p>It's a binary file, so I wouldn't know how to manually resolving the conflict like I normally do for source code merge conflicts.</p>
<p>How can I just replace the file in my working directory with the file that I stashed? Overwrite the version that was pulled?</p>
","0","3310334","",""
"38504594","6042877","2016-07-21 12:42:41","3","1380","<git><git-rebase><git-stash>","How to find out if anyone has done git rebase operation in remote branch?","<p>An important commit is missing from commit history of remote git repository.
Is there any way to find out who did git rebase in that particular remote branch?</p>
","2","6042877","",""
"71250875","16751401","2022-02-24 10:57:38","1","1739","<git><git-stash>","`git stash push`: Add custom message to default message","<p>When I do</p>
<pre class=""lang-sh prettyprint-override""><code>git switch bugfix-scaling
# do some work
git stash push

git switch feature-colored-graph
# do some work
git stash push

git stash list
</code></pre>
<p>in the command line terminal, then I see something like</p>
<pre><code>stash@{0}: WIP on feature-colored-graph: 1234567 Added RGB encoding
stash@{1}: WIP on bugfix-scaling: 2345678 X-axis scaling now works
</code></pre>
<p>I.e. I see from which branch the stash comes (<code>feature-colored-graph</code> resp. <code>bugfix-scaling</code>), and I see the latest commit hash (<code>1234567</code> resp. <code>2345678</code>) together with their respective commit message.</p>
<p>If instead I had done</p>
<pre class=""lang-sh prettyprint-override""><code>git switch bugfix-scaling
# do some work
git stash push

git switch feature-colored-graph
# do some work
git stash push -m &quot;Trying to match similar colors&quot;

git stash list
</code></pre>
<p>then I would see</p>
<pre><code>stash@{0}: On feature-colored-graph: Trying to match similar colors
stash@{1}: WIP on bugfix-scaling: 2345678 X-axis scaling now works
</code></pre>
<p>I.e. when I enter a custom stash message, then the listed stash entry does not show the last commit anymore.</p>
<p>It would be beneficial if I could <em>add</em> my own message <code>&quot;Trying to match similar colors&quot;</code> to the default message <code>&quot;WIP on feature-colored-graph: 1234567 Added RGB encoding&quot;</code>. Afterwards, I imagine <code>git stash list</code> to print something like</p>
<pre class=""lang-sh prettyprint-override""><code>stash@{0}: WIP on feature-colored-graph: 1234567 Added RGB encoding
           Trying to match similar colors
stash@{1}: WIP on bugfix-scaling: 2345678 X-axis scaling now works Is this possible?
</code></pre>
<p>I am aware that anything like</p>
<pre class=""lang-sh prettyprint-override""><code>git stash push -m &lt;command to insert default commit message&gt; -m &quot;Trying to match similar colors&quot;
</code></pre>
<p>will probably not work, since <code>git stash push</code> seems to accept at most one message and the last given message is kept.</p>
","0","16751401","",""
"71398658","11587055","2022-03-08 16:50:55","2","173","<git><github><gitlab><git-stash>","Will git stash reset submodules?","<p>I'm new to git. I wanted to stash my changes and do a <code>git pull origin master</code> on my branch. The project that I'm working on has submodules.</p>
<p>Those are the commands I ran :</p>
<ol>
<li><p><code>git status</code> - I can see all of my changes ( submodules + the main project )</p>
</li>
<li><p><code>git stash push</code> no errors or warnings. I ran this in the main directory of my project</p>
</li>
<li><p><code>git status</code> - All of the changes are gone ( submodules include )</p>
</li>
<li><p><code>git pull origin master</code> - works ( updates the submodules as well due to some configuration in our environment )</p>
</li>
<li><p><code>git stash pop</code> - no errors or warnings</p>
</li>
<li><p><code>git status</code> - all the work done in the submodules is gone.</p>
</li>
</ol>
<p>What happened ? I know that git stash is going to make commits for my stashed work and after that do a git <code>git reset --hard</code>. Why is my submodule work gone ? How do you  correctly stash a project with submodules ?</p>
<p>Thanks</p>
","0","11587055","",""
"71534225","5004011","2022-03-18 23:38:25","0","455","<git><git-stash>","git stash uncommited files disappeared","<p>I had a few stashes of uncommitted files <code>git stash -u</code>. I was able to apply them in the past and get the uncommitted files. But now after the last stash none of the stashes in my <code>git stash list</code> are bringing back the uncommitted files. What could have happened? Are the stashes lost forever?</p>
","5","5004011","",""
"71737197","1763217","2022-04-04 12:22:58","0","48","<git><git-stash>","Is it possible in git to stash removing a file from the index?","<p>I want to do:</p>
<pre><code>git rm --cached file.autogenerated.txt
git stash -m &quot;untrack file.autogenerated.txt&quot;
</code></pre>
<p>The stash is created but it doesn't seem to have anything in the stash - just 0 files changes, 0 insertions, 0 deletions. And applying this stash has no effect.</p>
<p>I also tried:</p>
<pre><code>git rm --cached file.autogenerated.txt
git stash --include-untracked -m &quot;untrack file.autogenerated.txt&quot;
</code></pre>
<p>But likewise this had no effect.</p>
<p>Is there any way to stash a removal of a file from the index?</p>
","6","1763217","",""
"71833491","4876257","2022-04-11 19:44:35","2","63","<git><git-pull><git-stash><git-merge-conflict>","simple example to demonstrate a git principal with stash and pull","<p>Say I have <code>one.txt</code> and <code>two.txt</code> in a remote repo and I've been doing some work locally and haven't staged them. Then I find out another team member made some necessary changes to those two files and pushed them to the remote repo. I need his changes, so I go <code>git stash</code>, <code>git pull</code>, <code>git stash pop</code>.</p>
<p>But I get 2 merge conflicts when I did the <code>stash pop</code>. one.txt was auto merged and two.txt had to be done manually. For the manual one, I said &quot;take both&quot; in one area, and the other I kept mine). Then I staged the result of the merge via <code>git add</code>.</p>
<p><code>git status</code> now shows both files are ready to be committed.</p>
<p>Will I have a problem pushing? In other words, does the checking in of a merge (in the context of the stash/pull/pop) have to match what the co-worker pushed? Also, am I supposed to do something with the stash after/when there's a conflict?</p>
<p>I'm trying to avoid a merge conflict when I push to the remote repo, so I'm worried about getting into a weird state.</p>
","1","4876257","",""
"71937661","3719101","2022-04-20 09:58:25","2","55","<git><rebase><git-stash><git-amend><git-stage>","Quick, small, casual git rebase for only one or a few hunks: any facility?","<p>I'm in the process of editing my source files to produce a new commit atop my <code>dev</code> branch. My changes are saved on disk but not yet staged.</p>
<p>Then I notice a small mistake introduced by a former commit, say <code>HEAD~10</code>. Once fixed, the result is only one (or a few) additional git diff hunk(s) on my disk.</p>
<p>I don't want these hunks to be recorded within the new commit, because they belong to <code>HEAD~10</code>. So I need to rebase. Here is my workflow then, but I'm not satisfied with it:</p>
<pre class=""lang-sh prettyprint-override""><code>$ git stash # save my current work + the small fix
$ git rebase --interactive HEAD~11
# set first commit appearing in todo list to `edit` action

$ git stash pop # re-introduce my changes here (**may conflict**)
$ git add --patch fixed_files # or similar, to only stage relevant fix hunk(s)
$ git commit --amend # fix old commit
$ git stash # save my current work again
$ git rebase --continue # get back to my current commit (will likely *not* conflict)
$ git stash pop # back here with HEAD~10 fixed
</code></pre>
<p>What I'm not happy with is that the process is complicated, and that the first <code>git stash pop</code> line may introduce meaningless conflicts, even though I'm confident that no conflicts will occur during execution of the <code>git rebase --continue</code> line.</p>
<p>Is there a better way? Suppose I only have a few staged hunks in <code>HEAD</code>, can I easily introduce them earlier in my branch with some magical:</p>
<pre><code>git amend-old-commit-then-rebase HEAD~10
</code></pre>
<p>yet keep my unstaged changes? (of course I'd be warned in case the inherent rebase does conflict)</p>
","3","3719101","",""
"72031183","4876257","2022-04-27 15:12:28","0","1267","<git><git-pull><git-stash>","git stash pop merge conflict resolution and reason","<p>I've recently been using <code>git stash</code> <code>git pull</code> and <code>git stash</code> pop as my work flow when I need to sync up to what other devs are doing but save what I'm working on and then continue working. I recently did a git pull to get everything new and it worked with no problem, I was caught up. A few hours later I did stash/pull/pop and and got a merge conflict when doing the <code>pop</code>. I saw that the conflicts were between code I recognized I had written a long time ago and what I was trying to currently pull from just a couple hours in between the clean pull and this one.</p>
<p>Could this be because I didn't clear my stash after I resolved a merge conflict from the past, therefore any subsequent pop + conflict tries to use the most recent stash where a conflict also occurred?</p>
<p>I guess what I'm saying is, if you get a conflict and resolve it after popping your stash, do you need to manually remove that stash to avoid this next time you pop with conflict? I thought stash pop was supposed to remove the stash, but I take it it doesn't if there's a conflict... so it needs to be done manually to avoid the unexpected situation where it was trying to get me to resolve conflicts between the recent pull I did and code that was done and pushed weeks ago?</p>
<p>Just trying to figure this out and avoid it.</p>
","0","4876257","",""
"54071448","6844481","2019-01-07 09:16:49","44","41163","<git><visual-studio><git-stash>","Is it possible to use git stash command from Visual Studio","<p>I'm using Visual Studio 2017's Team Explorer to work with a <code>git</code> repository.</p>

<p>Every time I'm uses the <code>git stash</code> or <code>git stash pop</code>, I need to open the Git Bash console and navigate to my project folder and run the commands.</p>

<p>Is there any way to stash within Visual Studio (2017)?</p>
","0","6844481","0","0"
"55423900","10738638","2019-03-29 18:52:58","1","3822","<git><git-commit><git-stash>","git workflow: should I commit before I pull?","<p>I read the following post:
<a href=""https://stackoverflow.com/questions/9588111/how-do-you-git-fetch-then-merge-error-your-local-changes-to-the-following-fil"">How do you git fetch then merge? &quot;Error: Your local changes to the following files would be overwritten by merge&quot;</a></p>

<p>I work with my friend on the same branch with git. When he did changes to our project and he pulls the project, he gets the error, that his local changes will be overwritten.</p>

<p>Is this a possible workflow in order to push his new changes:</p>

<pre><code>git commit 
git pull (or fetch and merge)
git push
</code></pre>

<p>Or is <code>git stash</code> better than <code>git commit</code></p>
","1","10738638","",""
"55519100","7038145","2019-04-04 14:57:08","1","53","<git><git-stash>","Can git stash pop also switch to the original branch/commit?","<p>Git stash knows what branch you were working on, e.g.:</p>

<p><code>stash@{1}: WIP on master: c264051 Revert ""added file_size""</code></p>

<p>Is it possible to have <code>git stack pop</code> switch back to that branch before popping, or do I have to do it manually?</p>
","0","7038145","",""
"55578145","8267816","2019-04-08 16:48:49","4","6055","<git><git-merge><git-stash><git-revert>","Undo git Auto-merge","<p>After I switched branches, I applied stash (as below), which resulted in an auto-merge. </p>

<pre><code>  git stash apply

Auto-merging src/clojure/project_src.clj
On branch upgrade_project
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

modified:   src/clojure/project_src.clj

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I tried <code>git revert HEAD</code> which reverted a commit (not the auto-merge). How can I revert the auto-merge? </p>
","0","8267816","0","0"
"72931533","8231574","2022-07-10 20:03:18","0","431","<git><command><git-stash>","git stash seems not to work when new files have been added?","<p>I don't have the exact setup on me right now, but I remember adding a couple of new files to my tree and then wanting to stash them. Instead of stashing correctly, git stash returned an error:</p>
<pre><code>error: Entry 'x' not uptodate. Cannot merge.
</code></pre>
<p>It seems weird, since the error message has to do with merging, but that's what I got back from git stash.</p>
<p>Does anyone know why and in what circumstances git stash returns an error such as this?</p>
<p>Edit:</p>
<p>In response to the nice people who have answered so far, I'd like to clarify something that I didn't mention originally. After rebuilding the situation in a new git repo, I can say for certain that I wasn't in the middle of a merge and my new files were being tracked. I used <code>git add -N .</code> to add the files without staging them, so that I could stash them properly. After trying to stash, I get this error message:</p>
<pre><code>error: Entry 'x' not uptodate. Cannot merge.
Cannot save the current worktree state.
</code></pre>
","0","8231574","",""
"73098513","17789133","2022-07-24 12:45:57","1","388","<git><branch><git-checkout><git-stash>","All my modifications gone after git stash","<p>I was working on the main branch, then I decided to create a new branch called <code>test-branch</code>. I tried <code>git checkout feature</code> first which warned me to <code>stash</code> or <code>commit</code> my changes. I <code>stash</code>ed them using <code>git stash save latest modification</code> and then I went to <code>test-branch</code> using <code>git checkout -b test-branch</code>. I was trying to add all files (not ignoring any) and commit to the branch. So I deleted everyting from <code>.gitignore</code>. After running <code>git add .</code>, I came back to <code>main</code> without committing to <code>test-branch</code>. I deleted that branch using <code>git branch -D test-branch</code>. And then I used <code>git stash apply</code> in <code>main</code>. Now my code has gone to the last commit version and all the modifications I did after that commit exist no more. What do I do now ?</p>
<p>Before swtiching branches</p>
<pre><code>PS C:\Users\Administrator\Desktop\projects\songs&gt; git checkout feature
error: Your local changes to the following files would be overwritten by checkout:
        .gitignore
        app.py
        music.db
        static/css/styles.css
        templates/favorites.html
        templates/layout.html
Please commit your changes or stash them before you switch branches.

PS C:\Users\Administrator\Desktop\projects\songs&gt; git stash save &quot;latest modification&quot;
Saved working directory and index state On main: latest modification
Unlink of file 'music.db' failed. Should I try again? (y/n) y
fatal: Could not reset index file to revision 'HEAD'.
</code></pre>
<p>After switching branches</p>
<pre><code>PS C:\Users\Administrator\Desktop\projects\songs&gt; git checkout -b test-branch
Switched to a new branch 'test-branch'

PS C:\Users\Administrator\Desktop\projects\songs&gt; git st
 M music.db
?? static/scripts/downloader.js
?? test/

PS C:\Users\Administrator\Desktop\projects\songs&gt; git add .
</code></pre>
<p>I then came back again to <code>main</code></p>
<pre><code>PS C:\Users\Administrator\Desktop\projects\songs&gt; git checkout main
Switched to branch 'main'
M       .gitignore
M       music.db
A       static/scripts/downloader.js
A       test/a.exe
A       test/ipvalidator.exe
A       test/nextvalidator.c
A       test/nextvalidator.exe
Your branch is up to date with 'origin/main'.

PS C:\Users\Administrator\Desktop\projects\songs&gt; git branch -D &quot;test-branch&quot;
Deleted branch test-branch (was 08f1d8e).
</code></pre>
<p>Then I applied the <code>stash</code> and my changes are gone</p>
<pre><code>
PS C:\Users\Administrator\Desktop\projects\songs&gt; git stash apply
error: Your local changes to the following files would be overwritten by merge:
        .gitignore
Please commit your changes or stash them before you merge.
Aborting

Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
        modified:   music.db
        new file:   static/scripts/downloader.js
        new file:   test/a.exe
        new file:   test/ipvalidator.exe
        new file:   test/nextvalidator.c
        new file:   test/nextvalidator.exe

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   .gitignore

Untracked files:
        __pycache__/
        flask_session/
        improvements.txt
        
        run.ps1
        static/downloads/
        templates/test.html
        test.py
        venv/
</code></pre>
<p><strong>Edit:</strong></p>
<p>As per @ElderFuthark 's request, I ran <code>git stash show --stat</code> and got the following:</p>
<pre><code>PS C:\Users\Administrator\Desktop\projects\songs&gt;  git stash show --stat
 .gitignore                 |   4 ++--
 app.py                     |  11 +++++++----
 music.db                   | Bin 69632 -&gt; 86016 bytes
 static/css/musicPlayer.css |   1 +
 static/css/styles.css      |   4 +++-
 templates/favorites.html   |   2 ++
 templates/layout.html      |   8 ++++++--
 templates/play.html        |  27 +++++++++++++++++++--------
 8 files changed, 40 insertions(+), 17 deletions(-)
</code></pre>
","2","17789133","0","0"
"73128025","8008396","2022-07-26 18:15:10","2","98","<bash><git><git-stash><pre-commit-hook>","How can I create a (temporary) clean working tree for running unit tests in a git pre-commit hook?","<p>If I forget to stage a modification/a file that is neccesary for a unit test, I want that that unit test to fail (when running inside of a pre-commit hook). The exception to this is gitignored files/folders (like the <code>node_modules</code>-folder when dealing with Node.js).</p>
<p>It seems like <code>git stash</code> might allow me to create such a temporary state. It is also very important that I'm able to restore the state as if nothing happened after running the tests.</p>
<p>To describe the exact behaviour I want, I have created a bash script below:</p>
<pre class=""lang-bash prettyprint-override""><code>#!/bin/bash
mkdir temporary-repo &amp;&amp; cd temporary-repo || exit 1
git init &gt; /dev/null 2&gt;&amp;1
printf '%s' &quot;0&quot; &gt; ignored
printf '%s' &quot;ignored&quot; &gt; .gitignore
printf '%s' &quot;0&quot; &gt; modified-staged
printf '%s' &quot;0&quot; &gt; modified-unstaged
printf '%s' &quot;0&quot; &gt; modified-unstaged-undo
printf '%s' &quot;0&quot; &gt; modified-unstaged-update
git add . &amp;&amp; git commit -m &quot;Initial commit&quot;  &gt; /dev/null 2&gt;&amp;1
printf '%s' &quot;1&quot; &gt; new-staged
printf '%s' &quot;1&quot; &gt; modified-staged
printf '%s' &quot;1&quot; &gt; new-unstaged-undo
printf '%s' &quot;1&quot; &gt; new-unstaged-update
printf '%s' &quot;1&quot; &gt; modified-unstaged-undo
printf '%s' &quot;1&quot; &gt; modified-unstaged-update
git add .
printf '%s' &quot;0&quot; &gt; new-unstaged-undo
printf '%s' &quot;0&quot; &gt; modified-unstaged-undo
printf '%s' &quot;1&quot; &gt; new-unstaged
printf '%s' &quot;1&quot; &gt; modified-unstaged
printf '%s' &quot;2&quot; &gt; new-unstaged-update
printf '%s' &quot;2&quot; &gt; modified-unstaged-update
before=&quot;$(git status)&quot;

#####################
# CREATE STASH HERE #
#####################

echo &quot;--- Created stash ---&quot;
test &quot;1&quot; = &quot;$(cat new-unstaged-undo)&quot; || echo &quot;ERR: new-unstaged-undo != 1&quot;
test &quot;1&quot; = &quot;$(cat modified-unstaged-undo)&quot; || echo &quot;ERR: modified-unstaged-undo != 1&quot;
test &quot;1&quot; = &quot;$(cat new-staged)&quot; || echo &quot;ERR: new-staged != 1&quot;
test &quot;1&quot; = &quot;$(cat modified-staged)&quot; || echo &quot;ERR: modified-staged != 1&quot;
test -f new-unstaged &amp;&amp; echo &quot;ERR: new-unstaged should not exist&quot;
test &quot;0&quot; = &quot;$(cat modified-unstaged)&quot; || echo &quot;ERR: modified-unstaged != 0&quot;
test &quot;1&quot; = &quot;$(cat new-unstaged-update)&quot; || echo &quot;ERR: new-unstaged-update != 1&quot;
test &quot;1&quot; = &quot;$(cat modified-unstaged-update)&quot; || echo &quot;ERR: modified-unstaged-update != 1&quot;
test &quot;0&quot; = &quot;$(cat ignored)&quot; || echo &quot;ERR: ignored != 0&quot;

##################
# POP STASH HERE #
##################

echo &quot;--- Popped stash ---&quot;
test &quot;0&quot; = &quot;$(cat new-unstaged-undo)&quot; || echo &quot;ERR: new-unstaged-undo != 0&quot;
test &quot;0&quot; = &quot;$(cat modified-unstaged-undo)&quot; || echo &quot;ERR: modified-unstaged-undo != 0&quot;
test &quot;1&quot; = &quot;$(cat new-staged)&quot; || echo &quot;ERR: new-staged != 1&quot;
test &quot;1&quot; = &quot;$(cat modified-staged)&quot; || echo &quot;ERR: modified-staged != 1&quot;
test &quot;1&quot; = &quot;$(cat new-unstaged)&quot; || echo &quot;ERR: new-unstaged != 1&quot;
test &quot;1&quot; = &quot;$(cat modified-unstaged)&quot; || echo &quot;ERR: modified-unstaged != 1&quot;
test &quot;2&quot; = &quot;$(cat new-unstaged-update)&quot; || echo &quot;ERR: new-unstaged-update != 2&quot;
test &quot;2&quot; = &quot;$(cat modified-unstaged-update)&quot; || echo &quot;ERR: modified-unstaged-update != 2&quot;
test &quot;0&quot; = &quot;$(cat ignored)&quot; || echo &quot;ERR: ignored != 0&quot;

after=&quot;$(git status)&quot;
diff -y &lt;(echo &quot;$before&quot;) &lt;(echo &quot;$after&quot;)
cd .. &amp;&amp; rm -rf temporary-repo

</code></pre>
<h2>Attempt 1</h2>
<pre class=""lang-bash prettyprint-override""><code># Create stash
git stash -k -u

# Pop stash
git stash pop
</code></pre>
<p>Failing test output:</p>
<pre><code>--- Created stash ---
--- Popped stash ---
ERR: new-unstaged-undo != 0
ERR: modified-unstaged-undo != 0
ERR: new-unstaged-update != 2
ERR: modified-unstaged-update != 2
On branch master                                                On branch master
Changes to be committed:                                        Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)               (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
        modified:   modified-staged                                     modified:   modified-staged
                                                              &gt;         modified:   modified-unstaged
        modified:   modified-unstaged-undo                              modified:   modified-unstaged-undo
        modified:   modified-unstaged-update                  &lt;
        new file:   new-staged                                          new file:   new-staged
        new file:   new-unstaged-undo                         &lt;
        new file:   new-unstaged-update                       &lt;

Changes not staged for commit:                                | Unmerged paths:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  |   (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working  |   (use &quot;git add &lt;file&gt;...&quot; to mark resolution)
        modified:   modified-unstaged                         |         both modified:   modified-unstaged-update
        modified:   modified-unstaged-undo                    |         both added:      new-unstaged-undo
        modified:   modified-unstaged-update                  |         both added:      new-unstaged-update
        modified:   new-unstaged-undo                         &lt;
        modified:   new-unstaged-update                       &lt;

Untracked files:                                                Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committ     (use &quot;git add &lt;file&gt;...&quot; to include in what will be committ
        new-unstaged                                                    new-unstaged
</code></pre>
<h2>Attempt 2</h2>
<pre class=""lang-bash prettyprint-override""><code># Create stash
stash=$(git stash create -q)
git stash store &quot;$stash&quot;
git stash show -p | git apply --reverse
git diff --cached | git apply

# Pop stash
git reset --hard -q
git stash apply --index -q
git stash drop -q
</code></pre>
<p>Failing test output:</p>
<pre class=""lang-bash prettyprint-override""><code>--- Created stash ---
ERR: new-unstaged should not exist
--- Popped stash ---
On branch master                                                On branch master
Changes to be committed:                                        Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)               (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
        modified:   modified-staged                                     modified:   modified-staged
        modified:   modified-unstaged-undo                              modified:   modified-unstaged-undo
        modified:   modified-unstaged-update                            modified:   modified-unstaged-update
        new file:   new-staged                                          new file:   new-staged
        new file:   new-unstaged-undo                                   new file:   new-unstaged-undo
        new file:   new-unstaged-update                                 new file:   new-unstaged-update

Changes not staged for commit:                                  Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)      (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working      (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working 
        modified:   modified-unstaged                                   modified:   modified-unstaged
        modified:   modified-unstaged-undo                              modified:   modified-unstaged-undo
        modified:   modified-unstaged-update                            modified:   modified-unstaged-update
        modified:   new-unstaged-undo                                   modified:   new-unstaged-undo
        modified:   new-unstaged-update                                 modified:   new-unstaged-update

Untracked files:                                                Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committ     (use &quot;git add &lt;file&gt;...&quot; to include in what will be committ
        new-unstaged                                                    new-unstaged
</code></pre>
<p>Attempt 1 creates the desired state for running unit tests, but fails to restore the original state. Attempt 2 fails to stash/remove new-unstaged, but successfully restores the original state.</p>
<p>Is there any way to get my desired behavior with git?</p>
","1","8008396","",""
"56432104","3121548","2019-06-03 17:37:47","1","93","<git><git-stash>","How to remove ""<file_path>/file.py~Stashed changes"" from git status","<p>After doing some git stashing and branch changes, I somehow have the following in my git status: </p>

<pre><code>Untracked files:  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    ""&lt;file_path&gt;/file.py~Stashed changes""
</code></pre>

<p>But when I try to do <code>git rm &lt;file&gt;</code> or <code>git add &lt;file&gt;</code>, I'm getting:</p>

<p><code>fatal: pathspec '&lt;file_path&gt;/file.py~Stashed' did not match any files</code></p>

<p>How do I remove this file path from my <code>git status</code>?</p>
","0","3121548","",""