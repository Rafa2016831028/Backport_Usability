Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"19489769","613540","2013-10-21 08:42:56","0","327","<git><git-log><git-cherry>","See commits between branches (git cherry) with descriptions?","<p>The <a href=""http://schacon.github.io/git/git-cherry.html"" rel=""nofollow noreferrer"">git cherry</a> command is great for seeing <a href=""https://stackoverflow.com/questions/7566416/different-commits-between-two-branches"">what commits have happened between two branches</a>. However, by default it just gives you a list of commit IDs - not that informative.</p>

<pre class=""lang-sh prettyprint-override""><code>$ git cherry master dev # Commits in ""dev"" since it forked from ""master""
+ 54408ddc6403376c638d5bfc94c033ab655da7b3
+ 68bc4277954b7de4c95881904de22f1d443366ae
+ d74ab86eee75a8e5c1a835a6e69e74c01d4186e8
</code></pre>

<p>How can I get the same list with more information?</p>
","0","613540","",""
"38604851","1254208","2016-07-27 06:00:47","1","144","<git><merge><git-log>","Why does git lose a commit from log after merge?","<p>I'm trying to merge a development branch into master.  But it seems to undo a commit that was made in master, to the extent that the particular commit no longer appears in the file's <code>git log</code>.</p>

<p>When I'm on the master branch, I can see commit <code>2d1b9af</code> on Jul 14</p>

<pre><code>c:\src&gt;git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

c:\src&gt;git log server\Fitnesse\FitNesseRoot\APITest\content.txt
commit 88a68b11b273b98531ae686b85b5733b86706bda
Author: charles
Date:   Fri Jul 15 00:56:44 2016 +0000

    XX-338 Add IsDeleted to Place table

commit 2d1b9afdabd7fbbf970d697bd0c15957a8fd288a
Author: charles
Date:   Thu Jul 14 23:15:28 2016 +0000

    fix FitNesse test which are broken by renaming

commit f1616fed48bb15c1c120cfe016e571f49aae6244
Author: charles
Date:   Tue Jun 21 11:04:53 2016 +1200

    modify fitNesse Test for new API changes.
</code></pre>

<p>Then I merge in my large branch.</p>

<pre><code>c:\src&gt;git merge origin/myLargeBranch
Removing server/Database/355_UnitTest.sql
Merge made by the 'recursive' strategy.
 .../packages.config                                |   2 +-
 .../Utilities/Extensions/StringExtensions.cs       |  10 +
 .../Utilities/Throttle.cs                          |  45 ++++

 [ ... etc ]

 .../FitNesseRoot/APITest/content.txt         |  37 +--
 128 files changed, 3705 insertions(+), 481 deletions(-)
 create mode 100644 [ ... ] 

c:\src&gt;git status
On branch master
Your branch is ahead of 'origin/master' by 32 commits.
  (use ""git push"" to publish your local commits)
nothing to commit, working directory clean
</code></pre>

<p>I note here that it alters the file I'm looking at.  I haven't actually modified this file since I took the branch.  This may be related to my issue, but it's not specifically what I'm asking about.</p>

<p>What's important to me right now, is that he commit from 14 July isn't in my log any more:</p>

<pre><code>c:\src&gt;git log server\Fitnesse\FitNesseRoot\APITest\content.txt
commit f1616fed48bb15c1c120cfe016e571f49aae6244
Author: charles
Date:   Tue Jun 21 11:04:53 2016 +1200

    modify fitNesse Test for new API changes.

commit 16b7beb9d1045f5fe7354c0fdbe637a49bb48ce0
Author: charles
Date:   Tue May 10 10:54:13 2016 +1200
</code></pre>

<p>So I'm a <em>little</em> concerned about getting the wrong code in the end.  This is a <em>bit</em> of a worry.</p>

<p>But I'm really much more worried that git is now not showing in it's log that the changes were ever made.</p>

<p>What am I missing?</p>

<p><strong>Update</strong>  After comments from @tim-biegeleisen I've tracked down the actual commit, but am still as confused.</p>

<p>The culprit appears to be a merge from master onto my development branch:</p>

<pre><code>c:\src&gt;git show b5637f9
commit b5637f9a65e415f1b415fad99c9e7a4e6b46ab1a
Merge: cb8ed90 6b5c0e1
Author: GregH &lt;GregH@GREGH-LT001&gt;
Date:   Tue Jul 26 04:25:40 2016 +0000

    Merge from master
[ ... ] 
</code></pre>

<p>cb8... is my branch:</p>

<pre><code>c:\src&gt;git checkout cb8ed90
Previous HEAD position was 6b5c0e1... PR 93: Merge DeletePlace to master
HEAD is now at cb8ed90... Added tests for apple messages


c:\src&gt;git log server\Fitnesse\FitNesseRoot\APITest\content.txt
commit f1616fed48bb15c1c120cfe016e571f49aae6244
Author: charles
Date:   Tue Jun 21 11:04:53 2016 +1200
</code></pre>

<p>6b5... is master</p>

<pre><code>c:\src&gt;git checkout 6b5c0e1
Previous HEAD position was cb8ed90... Added tests for apple messages
HEAD is now at 6b5c0e1... PR 93: Merge DeletePlace to master

c:\src&gt;git log server\Fitnesse\FitNesseRoot\APITest\content.txt
commit 88a68b11b273b98531ae686b85b5733b86706bda
Author: charles
Date:   Fri Jul 15 00:56:44 2016 +0000
</code></pre>

<p>And after the merge, I've lost the commits from 14 and 15 July.</p>

<pre><code>c:\src&gt;git checkout b5637f9
Previous HEAD position was 6b5c0e1... PR 93: Merge DeletePlace to master
HEAD is now at b5637f9... Merge from master

c:\src&gt;git log server\Fitnesse\FitNesseRoot\APITest\content.txt
commit f1616fed48bb15c1c120cfe016e571f49aae6244
Author: charles
Date:   Tue Jun 21 11:04:53 2016 +1200
</code></pre>

<p>**Update: **  Suggested by VonC, <code>git log --all</code> shows the commits are still in the history.</p>

<p>Without <code>--all</code>, it's as above, showing latest update jun 21
    git log server\Fitnesse\FitNesseRoot\APITest\content.txt
(No point repeating it).</p>

<p>But <strong>with</strong> <code>--all</code> they're there:</p>

<pre><code>c:\src&gt;git log --all server\Fitnesse\FitNesseRoot\APITest\content.txt
commit 88a68b11b273b98531ae686b85b5733b86706bda
Author: charles
Date:   Fri Jul 15 00:56:44 2016 +0000

    XX-338 Add IsDeleted to Place table

commit 2d1b9afdabd7fbbf970d697bd0c15957a8fd288a
Author: charles
Date:   Thu Jul 14 23:15:28 2016 +0000

    fix FitNesse test which are broken by renaming

commit f1616fed48bb15c1c120cfe016e571f49aae6244
Author: charles
Date:   Tue Jun 21 11:04:53 2016 +1200

    modify fitNesse Test for new API changes.
</code></pre>

<p>So how come they're undone during the merge?</p>
","8","1254208","",""
"57574448","1424739","2019-08-20 13:08:58","0","74","<git><git-clone><git-log>","How to frugal `git clone` for `git log` only?","<p>I just want to clone a repository to extract the author and email info each commit. Is there a way to only <code>git clone</code> what is needed for <code>git log</code>?</p>
","3","1424739","",""
"14639202","841070","2013-02-01 03:23:02","0","796","<git><version-control><git-log>","How to fix a git log author name?","<p>When my development team uses git to commit, there times where they do it from an environment they are new in. When this happens, their git config has not been properly set up and they commit to the codebase with a default ""root@localhost.localdomain"" author name. This is very annoying in terms of the git log. We can eliminate this via processes, but human error is unavoidable at times.</p>

<p>Is there a way to change those incorrect author names or have a way to enforce correct author names before commit? For example, I can set up a list of authorized authors and anyone not using the author name cannot commit.</p>
","2","841070","",""
"76167239","10747383","2023-05-03 19:03:40","0","38","<git><git-log>","My ""git log"" shows the oldest commits. How to change it to show from the newest?","<p>Let's say I have 100 commits in my workspace (commit1 - oldest, commit100 - newest).
If I do <code>git log --oneline</code> then it shows like this. It keep printing until the oldest and stop.</p>
<pre class=""lang-none prettyprint-override""><code>==============================================
commit10
commit9
commit8
commit7
commit6
commit5
commit4
commit3
commit2
commit1
&gt;&gt;my_branch&gt;main&gt;
===============================================
</code></pre>
<p>How can I change this show from the newest like this?</p>
<pre class=""lang-none prettyprint-override""><code>==============================================
commit100
commit99
commit98
commit97
commit96
commit95
commit94
commit93
commit92
commit91
...

===============================================
</code></pre>
","7","10747383","",""
"76167995","4951187","2023-05-03 21:07:29","0","67","<git><git-log><cherry-pick><git-cherry-pick>","How can git log --cherry-pick be parallelized?","<p>I've inherited some code that is using <code>git log --no-merges --right-only --cherry-pick --since='2 months ago' some_tag..origin/master -- path1, path2, ...</code> as an initial step in determining commits that are missing from <code>some_tag</code>. The main problem is it's slow and there is no status.</p>
<p>I can use git log <code>git log --since='2 months ago' origin/master -- path1, path2, ...</code> to get all the commits added for those paths in the specified time, which is fast. Then I'd like to spawn multiple threads to then check the commits individually, but I'm not sure what the equivalent would be for a single commit. Perhaps generating a patch file and using <code>git apply --check</code> and <code>git apply --reverse --check</code>, but I'm not sure that would be equivalent.</p>
<p>Or perhaps there is a more direct way to do it?</p>
","5","4951187","",""
"76197426","38765","2023-05-08 03:54:35","3","76","<git><git-log><git-bisect>","How can I see git bisect status of commits in git log?","<p>I'm doing a git bisect, and I've found a few good and bad commits so far, which I can confirm by running <code>git bisect log</code>.</p>
<p>However, if I run git log for my branch <code>git log --graph --decorate=full origin/master..mybranch</code> I can see it display that a certain commit is origin/mybranch and mybranch, and that another that I currently have checked out is (HEAD), but it doesn't display the commits that were &quot;good&quot; or &quot;bad&quot; with anything.</p>
<p>My git version is &quot;git version 2.40.0.windows.1&quot;.</p>
<p>Here's a reproduction using a publicly available git repo.</p>
<pre><code>git clone https://github.com/agrimm/zombie-chaser.git
cd zombie-chaser
git bisect start
git bisect bad d27ec73cf2f1df89cbccd41494f579e066bad6fe
git bisect good 3a99fd1ee5a20aa18e5202e9a8c3ee0ba04a740e
git log --graph --decorate=full master
</code></pre>
<pre><code>* commit d27ec73cf2f1df89cbccd41494f579e066bad6fe (refs/remotes/origin/master, refs/remotes/origin/HEAD, refs/heads/master)
| Date:   Mon Apr 12 23:24:20 2010 +1000
|
|     Fixed typos, updated home page URL.
|
* commit ae1c1d263168cf123578ff5d50f4fc7eb9726a52 (HEAD)
| Date:   Sun Apr 11 22:17:39 2010 +1000
|
|     Bump up to version 0.1.0.
|
* commit 2a1e2a6c7d2b7036a36c291cc220cbc486815aa8
| Date:   Sun Apr 11 19:19:27 2010 +1000
|
|     Move library files and ui files into a lib subdirectory, and other changes to file loading.
|
* commit 3a99fd1ee5a20aa18e5202e9a8c3ee0ba04a740e
| Date:   Sun Apr 11 12:28:10 2010 +1000
|
|     Removed gosu as a dependency, to satisfy jruby.


</code></pre>
<p>Running of git bisect log:</p>
<pre><code>$ git bisect log
git bisect start
# status: waiting for both good and bad commits
# bad: [d27ec73cf2f1df89cbccd41494f579e066bad6fe] Fixed typos, updated home page URL.
git bisect bad d27ec73cf2f1df89cbccd41494f579e066bad6fe
# status: waiting for good commit(s), bad commit known
# good: [3a99fd1ee5a20aa18e5202e9a8c3ee0ba04a740e] Removed gosu as a dependency, to satisfy jruby.
git bisect good 3a99fd1ee5a20aa18e5202e9a8c3ee0ba04a740e
</code></pre>
<p>What I expected: some text of &quot;good&quot; or &quot;bad&quot; after certain commits, what I actually got: nothing.</p>
","0","38765","",""
"76284220","11047487","2023-05-18 20:20:28","0","60","<git><encoding><header><git-log>","""git log --encoding=ISO-8859-1"" doesn't have any effect","<p>I have a C project (<a href=""https://en.wikipedia.org/wiki/ISO/IEC_8859-1"" rel=""nofollow noreferrer"">ISO 8859-1</a> encoded) in the <a href=""https://en.wikipedia.org/wiki/STM32#Cortex-M"" rel=""nofollow noreferrer"">STM32CubeMX</a> IDE, and I want to add Git log information in a header file in order to use those in my software (print it in the terminal).</p>
<p>My whole project is ISO 8859-1 encoded, and Git uses the default UTF-8 for commit, so for log too.</p>
<p>The Git command I have is:</p>
<pre class=""lang-none prettyprint-override""><code>git log -n 1 --date=format:&quot;%H:%M %d/%m/%Y&quot; --encoding=ISO-8859-1 --pretty=format:&quot;#ifndef GITCOMMIT_H_%n#define GITCOMMIT_H_%n%n#define AUTHOR_NAME '%an'%n#define COMMIT_HASH '%h'%n#define DATE '%cd'%n%n#endif&quot;  &gt; src\gitcommit.h
</code></pre>
<p>But when I compiled I got the error:</p>
<pre class=""lang-none prettyprint-override""><code>../gitcommit.h:1:1: error: stray '\377' in program
    1 | ÿþ# i f n d e f    G I T C O M M I T _ H _
</code></pre>
<p>And other errors all along the line.</p>
<p>How can I fix this?</p>
<p>As I am on Windows, when I create the header file with the &quot;&gt;&quot; operator, it is automatically encoded in <a href=""https://en.wikipedia.org/wiki/UTF-16#Byte-order_encoding_schemes"" rel=""nofollow noreferrer"">UTF-16LE</a>.</p>
","9","11047487","",""
"76514791","1419127","2023-06-20 12:38:34","0","20","<git><git-submodules><git-log>","git log submodule after changing folder structure","<p>A git submodule was changed location in our folder structure in the module containing it by means of <code>git mv</code> (I think). Anyhow, when I ask for the history of the revision changes in this submodule from the containing module (<code>git log &lt;submodule&gt;</code>), the history stops at the commit bringing this change in folder structure about.</p>
<p>Can I ask git to continue tracing the changes related to this submodule through its change of location in the structure ?</p>
","6","1419127","",""
"76556536","19508856","2023-06-26 12:08:52","0","31","<git><zsh><git-log>","Why git log change the author filter syntax only in one device","<p>I'm here to ask about a very strange problem I ran into with the git log:</p>
<p>I have 2 devices, both with zsh terminal, on which I have to run a git log filtering the authors by email.</p>
<p>The command I run is:</p>
<pre class=""lang-bash prettyprint-override""><code>git log --author=&quot;\(email1@gmail.com\)\|\(email2@gmail.com\)&quot; --after=2023-03-01
</code></pre>
<p>Only now, in an inexplicable way, on the second device has this format stopped working while it has started to accept this:</p>
<pre class=""lang-bash prettyprint-override""><code>git log --author=&quot;(email1@gmail.com)|(email2@gmail.com)&quot; --after=2023-03-01
</code></pre>
<p>Since this command is standard, I would like to understand why the syntax has changed on the second device and how to go back, or simply force one of the 2</p>
<p>Thanks in advance! 😊</p>
<p>PS
Owr git version is: <code>git version 2.41.0</code>, but the same problem appears with 2.39, boot installed with <code>brew</code>.
The zsh version is: <code>zsh 5.9 (x86_64-apple-darwin22.0)</code></p>
<p>And finally the result of <code>git config --list</code> for each device are:
<a href=""https://i.stack.imgur.com/LrqHz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LrqHz.png"" alt=""Meld diff of each git config"" /></a></p>
<p>EDIT_1:
@knittl
After digit <code>set -x</code>, the output is
This is the output result:</p>
<pre><code>user@MacBook-Pro-di-user crm % git log --author=&quot;\(user1@gmail.com\)\|\(user2@gmail.com\)&quot; --after=2023-03-27 --oneline --name-only --pretty=format: 
+__vsc_preexec:1&gt; PS1='%n@%m %1~ %# ' 
+__vsc_preexec:2&gt; PS2='%_&gt; ' 
+__vsc_preexec:3&gt; [ -n '' ']'
+__vsc_preexec:6&gt; __vsc_in_command_execution=1 
+__vsc_preexec:7&gt; __vsc_current_command='git log --author=&quot;\(user1@gmail.com\)\|\(user2@gmail.com\)&quot; --after=2023-03-27 --oneline --name-only --pretty=format: ' 
+__vsc_preexec:8&gt; __vsc_command_output_start
+__vsc_command_output_start:1&gt; printf '\e]633;C\a'
+__vsc_command_output_start:2&gt; __vsc_escape_value 'git log --author=&quot;\(user1@gmail.com\)\|\(user2@gmail.com\)&quot; --after=2023-03-27 --oneline --name-only --pretty=format: '
+__vsc_escape_value:1&gt; emulate -L zsh
+__vsc_escape_value:4&gt; local 'LC_ALL=C' 'str=git log --author=&quot;\(user1@gmail.com\)\|\(user2@gmail.com\)&quot; --after=2023-03-27 --oneline --name-only --pretty=format: ' i byte token 'out='
...
...
+__vsc_escape_value:6&gt; i &lt; 142
+__vsc_escape_value:7&gt; byte=: 
+__vsc_escape_value:10&gt; [ : '=' '\' ']'
+__vsc_escape_value:12&gt; [ : '=' ';' ']'
+__vsc_escape_value:15&gt; token=: 
+__vsc_escape_value:18&gt; out+=: 
+__vsc_escape_value:6&gt; ++i 
...
...
+__vsc_escape_value:6&gt; i &lt; 142
+__vsc_escape_value:21&gt; print -r 'git log --author=&quot;\\(user1@gmail.com\\)\\|\\(user2@gmail.com\\)&quot; --after=2023-03-27 --oneline --name-only --pretty=format: '
+__vsc_command_output_start:2&gt; printf '\e]633;E;%s;%s\a' 'git log --author=&quot;\\(user1@gmail.com\\)\\|\\(user2@gmail.com\\)&quot; --after=2023-03-27 --oneline --name-only --pretty=format: ' a601b767-d5fd-47a1-834e-6eaba4a7799d
+/bin/zsh:10&gt; git log '--author=\(user1@gmail.com\)\|\(user2@gmail.com\)' '--after=2023-03-27' --oneline --name-only '--pretty=format:'
+__vsc_precmd:1&gt; local __vsc_status=0                                                                                                                                                            
+__vsc_precmd:2&gt; [ -z 1 ']'
+__vsc_precmd:7&gt; __vsc_command_complete 0
+__vsc_command_complete:1&gt; [[ 'git log --author=&quot;\(user1@gmail.com\)\|\(user2@gmail.com\)&quot; --after=2023-03-27 --oneline --name-only --pretty=format: ' ==  ]]
+__vsc_command_complete:4&gt; printf '\e]633;D;%s\a' 0
+__vsc_command_complete:6&gt; __vsc_update_cwd
+__vsc_update_cwd:1&gt; __vsc_escape_value /Users/a469952/Documents/CRMT_Italia
+__vsc_escape_value:1&gt; emulate -L zsh
+__vsc_escape_value:4&gt; local 'LC_ALL=C' 'str=/Users/a469952/Documents/CRMT_Italia' i byte token 'out='
+__vsc_escape_value:6&gt; i = 0
+__vsc_escape_value:6&gt; i &lt; 36
+__vsc_escape_value:7&gt; byte=/ 
+__vsc_escape_value:10&gt; [ / '=' '\' ']'
+__vsc_escape_value:12&gt; [ / '=' ';' ']'
+__vsc_escape_value:15&gt; token=/ 
+__vsc_escape_value:18&gt; out+=/ 
...
Change only out+= ....
...
+__vsc_escape_value:6&gt; ++i 
+__vsc_escape_value:6&gt; i &lt; 36
+__vsc_escape_value:21&gt; print -r /Users/a469952/Documents/CRMT_Italia
+__vsc_update_cwd:1&gt; printf '\e]633;P;Cwd=%s\a' /Users/a469952/Documents/CRMT_Italia
+__vsc_precmd:8&gt; __vsc_current_command='' 
+__vsc_precmd:11&gt; [ -n 1 ']'
+__vsc_precmd:13&gt; __vsc_update_prompt
+__vsc_update_prompt:1&gt; __vsc_prior_prompt='%n@%m %1~ %# ' 
+__vsc_update_prompt:2&gt; __vsc_prior_prompt2='%_&gt; ' 
+__vsc_update_prompt:3&gt; __vsc_in_command_execution='' 
+__vsc_update_prompt:4&gt; PS1=+__vsc_update_prompt:4&gt; __vsc_prompt_start
+__vsc_prompt_start:1&gt; printf '\e]633;A\a'
+__vsc_update_prompt:4&gt; PS1=+__vsc_update_prompt:4&gt; __vsc_prompt_end
+__vsc_prompt_end:1&gt; printf '\e]633;B\a'
+__vsc_update_prompt:4&gt; PS1=$'%{\C-[]633;A\C-G%}%n@%m %1~ %# %{\C-[]633;B\C-G%}' 
+__vsc_update_prompt:5&gt; PS2=+__vsc_update_prompt:5&gt; __vsc_continuation_start
+__vsc_continuation_start:1&gt; printf '\e]633;F\a'
+__vsc_update_prompt:5&gt; PS2=+__vsc_update_prompt:5&gt; __vsc_continuation_end
+__vsc_continuation_end:1&gt; printf '\e]633;G\a'
+__vsc_update_prompt:5&gt; PS2=$'%{\C-[]633;F\C-G%}%_&gt; %{\C-[]633;G\C-G%}' 
+__vsc_update_prompt:6&gt; [ -n '' ']'
</code></pre>
","7","19508856","",""
"76560694","18301962","2023-06-26 22:56:09","0","34","<c><git><git-diff><git-log><gitattributes>","git see history of a specific c function that has a prototype above it in the source file","<p>I am trying to see the history of a c function using git log, but the function is static and the source code is organized with a block of function prototypes at the top, and their definitions are below in the source code.</p>
<p>Something like this:</p>
<pre class=""lang-c prettyprint-override""><code>/// @file foo.c

static void foo();

static void foo()
{
    // function body
}
</code></pre>
<p>I am trying to see the history like I would with an external function (the prototype would be in a separate header file):</p>
<pre><code>git log -L :foo:foo.c
</code></pre>
<p>However when I do this it only shows me the history for the prototype. I am only interested in the functions implementation. Is there a way I can see the history for the actual definition?</p>
<p>I have already done some searching and attempted to set up a <code>.gitattributes</code> file in the base directory of my repo with these contents:</p>
<pre><code>*.c diff=cpp
*.h diff=cpp
*.f diff=fortran
</code></pre>
<p>Any ideas what else I can try?</p>
","0","18301962","",""
"76575924","22146621","2023-06-28 18:46:28","-2","28","<git><github><git-branch><git-log><git-switch>","Does git not highlight the branch name on which we are after we switch to a branch using its case insensitive name","<p>Suppose I am on a branch named <strong>main</strong> in git and we can confirm it by <code>git branch</code> and <code>git log</code> commands.
<a href=""https://i.stack.imgur.com/uE8yj.png"" rel=""nofollow noreferrer"">Screen shot of git bash</a>.</p>
<p>But as branch names are case-insensitive in git. So, when we switch to any branch using <code>git switch</code> using its case-insensitive name, e.g., Horror in case of horror, git doesn't highlight the current branch in case of <code>git branch</code> and <code>HEAD</code> doesn't point to any branch in the case of <code>git log</code> command.<br />
<a href=""https://i.stack.imgur.com/2TeXa.png"" rel=""nofollow noreferrer"">Screen shot of git bash</a></p>
<p>I was expecting that after switch to a branch by using its case-insensitive name, git should highlight that branch as current branch.</p>
","1","22146621","",""
"59306411","12479070","2019-12-12 14:06:37","1","43","<git><tags><git-log>","git nearest regex matched tags to commit","<p>I have a shortlog in my git history like this:</p>

<pre><code>1234213 commit A tag: positive_1  
1234324 commit B  
1111111 commit C  
4543533 commit D tag: negative_1  
1234234 commit E tag: positive_2  
4534543 commit F  
4543533 commit G tag: positive_3
</code></pre>

<p>And I would like to have a git command which shows me two or more positive regex matched tags that are nearby to specified commit. For 1111111 for example, output should be like:</p>

<pre><code>1234213 commit A tag: positive_1  
1111111 commit C  
1234234 commit E tag: positive_2  
4543533 commit G tag: positive_3  
</code></pre>

<p>I have a necessity to know which version of product contains specified fix/feature. The command would make it easier to find it.</p>
","0","12479070","",""
"40603434","2303252","2016-11-15 06:29:08","1","57","<git><git-log>","Is it possible to further customize the format of git log based on some built-in options?","<p>I want a prettier look git log.<br>
I'm current using <code>git log --branches --remotes --tags --graph --decorate --oneline</code>, which is already pretty good.</p>

<p>But it doesn't show the commiter names and date, what I want to do is do some further customization based on the above built-in options.</p>

<p>Is it possible?</p>
","1","2303252","0","0"
"21607305","494643","2014-02-06 15:39:16","41","11964","<git><git-log>","How to make 'git log' decorate by default","<p>I frequently type <code>git log</code> when what I actually want is <code>git log --decorate</code>. How do I make it decorate by default?</p>
<p>I have seen lots of answers of the form &quot;make an alias <em>lg</em> and then type <code>git lg</code> instead of git log&quot;. But, I can't find anywhere how to change the default behaviour of <code>git log</code> itself. <code>alias log</code> does not work.</p>
","1","494643","0","0"
"21609151","1586860","2014-02-06 16:55:54","-1","56","<git><git-log>","Why a simple linear git log doesn't seem to be time ordered?","<p>I have a very simple (no branches, one developer) linear commit history.
However git shows the log out of (time) order (screenshot 1).</p>

<p>I have run also git log --pretty=fulle  (as <a href=""https://stackoverflow.com/questions/13177852/why-the-data-of-commits-in-git-log-is-out-of-order"">suggested here</a>) and the author's dates and commit's dates always coincide, but still the log is out of order (screenshot 2).</p>

<p>More importantly, if I need to hunt for a bug.. which is the effective order I should look for ?? The one given me by the log or the one I will compose myself looking at the date ?</p>

<p><img src=""https://i.stack.imgur.com/zfCQP.png"" alt=""screenshot1"">
<img src=""https://i.stack.imgur.com/Ean8K.png"" alt=""screenshot2""></p>

<p>Thanks,
  Antonello</p>
","2","1586860","",""
"2798822","310121","2010-05-09 19:13:45","241","78453","<git><git-log>","How to git log in reverse order?","<p>I recently learned that I can get hg log to print the history in reverse order with:</p>

<pre><code>hg log -r :
</code></pre>

<p>So of course I tried:</p>

<pre><code>git log -r :
</code></pre>

<p>Well, it didn't work. So what is the command to do the same thing in git?</p>
","3","310121","0","0"
"21842962","1494794","2014-02-18 02:01:37","0","139","<git><garbage-collection><git-log><git-revert><git-reflog>","Dangling commit is not in reflog and won't purge by git gc","<p>I got a dangling commit that is not in the reflog (or I use it wrong) and won't go away with <code>git gc</code>. Here is what I mean:</p>

<pre><code>% git fsck
Checking object directories: 100% (256/256), done.
Checking objects: 100% (5425/5425), done.
dangling commit e681384da8babd4524f545bd880dfc602d271e45
dangling blob 77835dc1395f57d359d81f2c240d02a6ff1e9a69
...

% git reflog | grep e681

% git gc
Counting objects: 5425, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (1585/1585), done.
Writing objects: 100% (5425/5425), done.
Total 5425 (delta 2086), reused 5425 (delta 2086)

% git fsck
Checking object directories: 100% (256/256), done.
Checking objects: 100% (5425/5425), done.
dangling commit e681384da8babd4524f545bd880dfc602d271e45
dangling blob 77835dc1395f57d359d81f2c240d02a6ff1e9a69
...
</code></pre>

<p>Also there is nothing that would explain it for me:</p>

<pre><code>% git config gc.reflogExpireUnreachable

% git config gc.pruneExpire
</code></pre>

<p>I see that the commit is a revert and has a history back to the early days:</p>

<pre><code>% git log e681384da8babd4524f545bd880dfc602d271e45 --oneline | tail -n 2
b50e1de base file structure
9a4b3af first commit
</code></pre>

<p>But why won't this commit go away? </p>

<p>I am eager to know this because it's so good at making no sense to me :D</p>
","2","1494794","",""
"59608275","284493","2020-01-06 07:35:08","2","338","<regex><git><pcre><git-log>","Why is git-log with perl regex negative lookbehind causing a fatal error?","<p>Either I cannot get git-log's regexp grep functionality to search using perl based regexp (pcre) or I can but it is not working with negative lookbehind.</p>

<pre><code>git log -p -P -G'(?&lt;!-)title'
</code></pre>

<p>results in output</p>

<pre><code>fatal: invalid regex: Invalid preceding regular expression
</code></pre>

<p>However, pcre support and negative lookbehind seems to be working, if git-grep is any indicator.
E.g. <code>git grep -P '(?&lt;!-)title'</code> returns expected results.</p>

<p>git version 2.21.0 (Apple Git-122.2)</p>
","0","284493","",""
"21848711","1520502","2014-02-18 09:04:38","0","207","<git><git-branch><git-log>","git: git log between remote branch and HEAD being in detached HEAD state","<p>git checkout -t origin/5.0</p>

<pre><code>* df957e8 (HEAD, origin/5.0, 5.0) commit A
* 93f3185 commit B
* abd1176 commit C
</code></pre>

<p>I checked out a change from gerrit using below command  </p>

<blockquote>
  <p>git fetch gerrit refs/changes/36/236/1 &amp;&amp; git checkout FETCH_HEAD</p>
</blockquote>

<p>Now its  going to detached HEAD state with incoming commits on top of master branch instead of 5.0</p>

<pre><code>    * bdd7f9c (HEAD) part 3 of 236
    * fa8f60f part 2 of 236
    * bddd168 part 1 of 236
    * ffc7982 (origin/master, origin/HEAD) commit master
    * 415668e 
    * 991d48d 
</code></pre>

<p>I want it to be  like</p>

<pre><code>* bdd7f9c (HEAD) part 3 of 236
* fa8f60f part 2 of 236
* bddd168 part 1 of 236
* df957e8 (HEAD, origin/5.0, 5.0) commit A
* 93f3185 commit B
* abd1176 commit C
</code></pre>

<p>I tried changing HEAD pointing to refs/heads/5.0 using symbolic-ref but immediately after checking out FETCH_HEAD it is showing on top of master branch instead of 5.0.</p>

<p>My aim is to get list of commits came from gerrit change checkout using command </p>

<blockquote>
  <p>""git log --format=""%H"" origin/5.0..HEAD""</p>
</blockquote>

<p>but its not working in this case as it is checking out on top of master instead of 5.0</p>

<p>Please let me know if I am missing anything</p>
","0","1520502","",""
"22220286","17675","2014-03-06 09:33:03","4","161","<git><git-log>","Is there a git log argument to filter files only with large changes?","<p>Given that I have say 40 files in my current <code>git log --stat</code>, I want to only show those that have say 500 changes.</p>

<p>Example output:</p>

<pre><code>.../MyModule.java                |   10 +
.../MySecondModule.java          |  560 +++++++++
.../MyThirdModule.java           |    5 +-
.../MyForthModule.java           |   12 +-
</code></pre>

<p>In this case I want to filter everything out except for <code>MySecondModule.java</code>. This would be a good command to run on a repo that I haven't worked on in awhile to get an idea of where any major work was done since I will likely have hundreds to thousands of changed files.</p>
","1","17675","",""
"60060533","10745466","2020-02-04 15:24:24","3","966","<git><git-log>","git log command doesnt show HEAD info","<p>I am creating a git repository and adding a file to the repository using <code>git commit</code>.
After commit in the <code>git log</code>, I could see the commit info but i am not able to see the <code>HEAD</code>info. Following is the steps that I followed:</p>

<pre><code>$ git config --global user.name ""abc""
$ git config --global user.mail ""abc@abc.com""
$ git init
  Initialized empty Git repository in /home/aishwarya/github.com/temp/.git/
$ touch a.txt
$ git add a.txt

$ git commit --message ""first commit in NonBareRepo""
  [master (root-commit) 6d46130] first commit in NonBareRepo
   1 file changed, 0 insertions(+), 0 deletions(-)
   create mode 100644 a.txt
$ git log
  commit 6d46130416eef0104408d575d8d4958457fe1dab
  Author: abc &lt;abc@abc.com&gt;
  Date:   Mon Feb 3 22:07:18 2020 +0530

      first commit in NonBareRepo
</code></pre>

<p>On other machine, after creating repository with the same steps, I could see the git log output as follows(HEAD points to master):</p>

<pre><code>$ git log
commit 7ba4781ddee49a3636ee700fe057c3a372502460 (HEAD -&gt; master)
Author: abc &lt;abc@abc.com&gt;
Date:   Mon Feb 3 22:01:11 2020 +0530

    first commit in NonBareRepo
</code></pre>

<p>Please let me know if I am missing something. Thank you</p>
","0","10745466","0","0"
"4082126","42645","2010-11-02 21:10:08","215","112804","<git><git-log>","git log of a single revision","<p>I have a commit c. I want to get the changeset of that exact commit c + metainformation and no other one. Is there a simpler way than <code>git log -p c^..c</code> to do that?</p>
","0","42645","0","0"
"41729252","1245262","2017-01-18 20:54:22","1","98","<git><git-log>","Formatted output for git log inconsistent with non formatted output","<p>I've just cloned the Keras repository and was interested in looking at the git log. I initially tried using a pretty format, and got this for the last 4 commits:</p>

<pre><code>me@ARL--M6800:~/Downloads/keras$ git log --pretty=format:""%cn %cd %h""

François Chollet Tue Jan 17 13:29:21 2017 -0800 55487f3
François Chollet Mon Jan 16 17:14:16 2017 -0800 1c6db08
François Chollet Mon Jan 16 10:05:35 2017 -0800 e54d795
François Chollet Sat Jan 14 21:33:04 2017 -0800 82ca6d4
</code></pre>

<p>However, when I didn't format the output, I got these results for the last 4 commits:</p>

<pre><code>commit 55487f33b135849cdda49bcc75778976d94a2575
Author: Javier Dehesa &lt;javidcf@gmail.com&gt;
Date:   Tue Jan 17 21:29:21 2017 +0000
 ...
commit 1c6db0815853f7c5421b8057e9167f19b5b94812
Author: Petr Baudis &lt;pasky@ucw.cz&gt;
Date:   Tue Jan 17 02:14:16 2017 +0100
...
commit e54d7951f2a82629c71c77ca842ba032b523fe84
Author: Pat York &lt;pat.york@nevada.unr.edu&gt;
Date:   Mon Jan 16 10:05:35 2017 -0800
  ...
commit 82ca6d418588ccd61d663ec8029937290b62d583
Author: Mohanson &lt;mohanson@outlook.com&gt;
Date:   Sun Jan 15 13:33:04 2017 +0800
</code></pre>

<p>Although the hashes match, the author and commit dates do not. Does anyone know why this is and what it means?</p>
","1","1245262","",""
"57792985","3882744","2019-09-04 17:07:04","1","899","<git><git-log>","How to get the history of commit messages for a given author in a git branch?","<p>I would like to get the history of commit messages for a given author in a git branch. Is there any easy way to achieve it other than to parse the log through programming?</p>

<p><strong><em>UPDATED:</em></strong></p>

<p>The following was expacted for me that does the same thing:</p>

<pre><code>git log --author='some author' --pretty=oneline --abbrev-commit
git log --author='some author' --oneline
</code></pre>

<p><code>git log --help</code> mentioned the follows:</p>

<pre><code>   Commit Formatting
       --pretty[=&lt;format&gt;], --format=&lt;format&gt;
           Pretty-print the contents of the commit logs in a given format, where &lt;format&gt; can be one of oneline, short, medium, full, fuller, email, raw and
           format:&lt;string&gt;. See the ""PRETTY FORMATS"" section for some additional details for each format. When omitted, the format defaults to medium.

           Note: you can specify the default pretty format in the repository configuration (see git-config(1)).

       --abbrev-commit
           Instead of showing the full 40-byte hexadecimal commit object name, show only a partial prefix. Non default number of digits can be specified
           with ""--abbrev=&lt;n&gt;"" (which also modifies diff output, if it is displayed).

           This should make ""--pretty=oneline"" a whole lot more readable for people using 80-column terminals.

       --no-abbrev-commit
           Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit and those options which imply it such as ""--oneline"". It also
           overrides the log.abbrevCommit variable.

       --oneline
           This is a shorthand for ""--pretty=oneline --abbrev-commit"" used together.
</code></pre>
","2","3882744","",""
"32168890","1197249","2015-08-23 16:30:35","-1","5535","<linux><git><grep><git-log>","How can I extract the email of a commiter using git?","<p>If I have a specific string how can I use e.g <code>git log</code> to find the email of the committer from the command line?<br>
I don't want to see the commit. I only want the ""one-liner"" command to give me <strong>only</strong> the email of the author.   </p>

<p><strong>NOTE:</strong> I do <strong>NOT</strong> have a commit id. I only have a search string. I mean a string that I know is part of a commit for sure.  </p>

<p><strong>Update after comment from @axiac:</strong><br>
I have a string X that is ""unique"" in the sense that is introduced by only 1 committer. The committer adds it to file <code>foo.java</code>.<br>
I want having only the string <code>X</code> and <code>foo.java</code> to find the email of the commiter who added the string</p>
","10","1197249","",""
"32170320","5232667","2015-08-23 18:57:02","1","1906","<arrays><git><powershell><git-bash><git-log>","How to put git log results in an array of arrays? Powershell/ GitBash","<p>For a specific branch I would like to; </p>

<p>Run the Git Log command to get the Commit and Filename, this will be executed in Powershell. </p>

<p>I then would like to have For Loop to go through the Commits and have the last Modified filename in a 1 dimensional table, i can use the join cmd in Powershell to join Commit and Filename together.</p>

<p>Example of the Output would be; </p>

<h2>Commit      Filename</h2>

<p>14241jdae   FileOne.ps1</p>

<p>24242jdae   FileTwo.ps1</p>

<p>34243jdae   FileThree.ps1</p>

<p>The problem i am having if i run the following </p>

<blockquote>
  <p>git log branch1 --pretty=oneline</p>
</blockquote>

<p>This displays the result, even if i use a function and call the function, i am struggling how to assign the Git Log output to a 1-Dimensional Array or 2-Dimensional Array table format.</p>

<p>Any help would be appreciated. </p>
","1","5232667","",""
"50009857","5613639","2018-04-24 19:57:09","-5","73","<git><git-log>","what are the commands that will create this git graph","<p>hello guys I am new to git and I am working on a project where I need to respect this graph I just want to know what can I do to get this git graph what are the commands and with explanation please</p>

<p>All I know that every vertex is a commit all the labels are branch names
I don't know where to start like do I need to create all branches before or what it's not clear at all </p>

<p><a href=""https://i.stack.imgur.com/HVnTR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HVnTR.png"" alt=""git graph ""></a></p>
","6","5613639","",""
"68671049","5106317","2021-08-05 17:25:51","0","125","<git><git-log><git-rev-list>","How to track the trace of a file through commits in the forward direction in a git repository?","<p>Suppose we have a file <em>F</em> in a certain commit <em>C</em>. Given a future commit <em>C'</em>, what is the best way to deduce the list of files in <em>C'</em> that are derived from <em>F</em>?</p>
<p>A file can be modified, renamed, moved, copied, deleted, split and merged several times in any order on its journey from one commit to another.</p>
<p>I want to determine the final list of files - which can be empty - that are &quot;derived&quot; from the original file through such operations, ideally using plumbing commands of git.</p>
<p>Yes, there is no way to reliably say wether a file is split, merged, moved or copied for certain. But the algorithm that is used in git-log or git-blame for the same purposes should be ok. (Thanks @SpaceKatt).</p>
<p><strong>TL;DR</strong> I want a function that produces the following Output given the Input:</p>
<pre><code>Input: {F, C, C'}
  C is an earlier commit.
  C' is a later commit (and C is reachable from C')
  F is a file in C

Output: {F1', F2', F3', ...}
  Fx's are list of files in C' that are derived from F
</code></pre>
<p><strong>Note</strong>: If It was the opposite problem (i.e finding history of a file) a solution could probably be derived using <code>git-log</code> or <code>git-blame</code>, although I am not aware of a perfect solution (not involving porcelain) for that either.</p>
","4","5106317","",""
"57712214","11203452","2019-08-29 14:19:47","0","2788","<git><git-log>","How do i get the target branch of a commit using git log command","<p>I have this command:</p>

<pre><code>git log --pretty=""%D"" -n 2962c2b8dbd4bf78d90f228527c3cb65c4cea3b0
</code></pre>

<p>Result is:</p>

<pre><code>HEAD -&gt; master
local_branch




... and many many many more lines are printed out by this command. Sometimes there are outher branch names
</code></pre>

<p>When i try:</p>

<pre><code>git log --pretty=""%D"" -1 2962c2b8dbd4bf78d90f228527c3cb65c4cea3b0

This is the result (two empty lines):


</code></pre>

<p>How do I achieve that I get only the first ""line"", or the first branch name?</p>

<p>Why is the output of the first command so long? And why does the second command output 2 lines, though I limit it to just one line with -1?</p>

<p>I'm really desperate :(</p>
","7","11203452","",""
"33080793","1433338","2015-10-12 12:10:10","5","5521","<git><github><git-log>","How to get ONLY filename with path using git log?","<p>I used almost all git log commands yet i haven't found a best way to do this. I need only this - get only file name with path nothing else</p>

<pre><code>/path/filename.txt
/path/anotherfile.ext
...
...
</code></pre>

<p>My input is date FROM and TO to the git log command.
Either git log gives developer-name or date or commit-number or something that i don't want with file names. How to get ONLY the file name with full path?</p>
","0","1433338","0","0"
"33993016","38765","2015-11-30 06:58:03","1","39","<git><merge><git-log>","Suitable options for git log -p if worried about evil merges","<p>I'm worried that a given branch I'm looking at may have some evil merges in it. What options should I add to <code>git log -p</code> to be more verbose for diffs displayed for merge commits?</p>
","0","38765","",""
"34096982","4199880","2015-12-04 20:36:56","7","2399","<git><git-log>","How can I pass a string to git log -S instead of just a word?","<p>I wanted to search for the commit that either contains the string ""hello world"" or any commit that included that phrase inside of a file. </p>

<p><code>git log -SHello World</code> doesn't work</p>

<p><code>git log -S'Hello World'</code> doesn't work</p>

<p><code>git log -S""hello world""</code> doesn't work</p>

<p>I have been using: <code>git log -i --grep='hello world'</code>
but this one only works for commit messages. </p>
","3","4199880","0","0"
"34100019","3893948","2015-12-05 01:02:54","1","42","<git><git-merge><git-log><git-reflog>","Just get list of merge happened on my current branch in git","<p>Is there any way in Git you can just list all Branch merge commmits?
I tried with <code>git reflog</code> and it does show commit and </p>

<pre><code>&lt;commit number&gt; HEAD@{2}: commit (merge): merge with feature/unification
</code></pre>

<p>Is using (merge) string enough to detect branch merging?</p>
","0","3893948","",""
"17608970","2575332","2013-07-12 06:46:01","1","499","<git><git-log>","git log decoration origin/HEAD","<p>I have two project repositories.</p>

<p>When I run <code>git log --oneline --decorate --graph</code> in each, one shows <code>(HEAD, origin/dev, origin/HEAD, dev)</code> and the other shows <code>(HEAD, origin/dev, dev)</code>.</p>

<p>In both cases, <code>dev</code> is the default branch. Why does <code>origin/HEAD</code> show in one and not the other? What does one do to make <code>origin/HEAD</code> appear or not appear?</p>
","2","2575332","0","0"
"34166636","130111","2015-12-08 21:46:59","2","235","<git><grep><git-log>","searching commit messages in the whole git repo","<p>I'd like to understand the difference between <code>git log --all --grep=&lt;&gt;</code> and <code>git log --grep=&lt;&gt;</code>. My goal is to traverse the whole repo when searching. If I don't add <code>--all</code>, does it mean that I will miss all the commit messages in branches? Looks like a non-intuitive default to me. </p>
","0","130111","",""
"34172707","5208600","2015-12-09 07:10:09","2","3097","<windows><git><grep><git-log>","git log --grep does not work in windows","<p>Is there any equivalent for <strong>""git log --grep=""STRING""</strong> in <strong>windows?</strong></p>

<p>I've written a python program for linux which requires a reading of commit logs that contain certain string from the git object. This worked fine in linux, but when I ran the same program in windows, <strong>git log --grep=""STRING""</strong> catches nothing.</p>

<p>Here's the code snippet. (fetcher.py)</p>

<pre><code>import os
...
os.chdir(DIRECTORY) # where git obj is
command = ""git log --all --grep='KEYWORD' &gt; log.txt""
os.system(command) # run the command in the shell
...
</code></pre>

<p>It seems that git internally uses the linux grep for the ""--grep"" argument such that Windows cannot run this correctly as it misses grep.</p>

<p>Thanks for your help.</p>

<hr>

<p>As I am not getting any answer for 24 hrs,
I suggest my own solution, which does not utilize grep.</p>

<p>Because <strong>git log</strong> itself runs without any problem,
I just ran the command without the --grep='STRING' option, then read the output from the shell (or a file) to filter the commit logs which contain 'STRING' by the use of regular expression.</p>

<pre><code>import os
import re

command = ""git log --all &gt; log.txt""
os.system(command) # run the command in the shell and store output in log.txt

with open('log.txt', 'r') as fp:
    gitlogoutput = fp.readlines() # read the redirected output

if gitlogoutput:
    commits = re.split('[\n](?=commit\s\w{40}\nAuthor:\s)', gitlogoutput)
    # it splits the output string into each commits
    # at every '\n' which is followed by the string 'commit shahash(40bytes)\nAuthor: '

    for commit it commits:
        if 'KEYWORD' is in commit:
            print commit
</code></pre>

<p>The approach requires you to add some code, but I believe it does the same thing as the original command does. For better results, you can change the last if statement which is,</p>

<pre><code>if 'KEYWORD' is in commit:
</code></pre>

<p>into something that can do more sophisticated search e.g. re.search() method.
In my case, this produced exactly the same result as that of --grep=""KEYWORD""</p>

<p>Still, I appreciate your help :)</p>
","0","5208600","0","0"
"38637167","1833945","2016-07-28 13:00:53","0","48","<git><version-control><git-branch><git-log>","How exactly mean this graph obtained by git log?","<p>I am absolutly new in <strong>GIT</strong> and I have the following doubt.</p>

<p>Into a project on which I am working on I do:</p>

<pre><code>Andrea@Andrea-PC MINGW64 ~/Documents/WS_vari/version-control/asteroids (master)
$ git branch
* master
</code></pre>

<p>So it should bean that I have only the <strong>master</strong> branch in this project. Is it my interpretation correct?</p>

<p>Then I want to see the graph related to the commitment of this project performing:</p>

<pre><code>git log --graph --oneline --decorate=full --all
</code></pre>

<p>and this is my output:</p>

<pre><code>Andrea@Andrea-PC MINGW64 ~/Documents/WS_vari/version-control/asteroids (master)
$ git log --graph --oneline --decorate=full --all
* cba1887 (HEAD -&gt; refs/heads/master) fixing: fixed the bug related of the weapo
n delay
* 3884eab (refs/remotes/origin/master, refs/remotes/origin/HEAD) Add color
* 3e42136 now using requestAnimationFrame
* 4035769 frame interval was set wrong after game was paused
* 25ede83 a couple missing ends with the ipad version
* df03538 I can't spell 'screen' apparently :)
| * 354dfdd (refs/remotes/origin/coins) Make ships able to spawn on coins
| * 0c6daf1 Make it possible to collect coins
| * a3c0ae4 Create helper functions
| * 656b02e First pass at adding coins
|/
* b0678b1 Revert controls
* f19cb1b Fix typo in space
* 75928a9 Use space for movement and enter for shooting
* ac83b72 mostly finished ipad version
* 7ca4826 trying to get div touch controls to work

....................................................................
....................................................................
....................................................................
</code></pre>

<p>So I think that it means:</p>

<p>1) The last commit have id <strong>cba1887</strong> and this commit is into the <strong>master</strong> branch.</p>

<p>My problem is on this section of the graph:</p>

<pre><code>* df03538 I can't spell 'screen' apparently :)
| * 354dfdd (refs/remotes/origin/coins) Make ships able to spawn on coins
| * 0c6daf1 Make it possible to collect coins
| * a3c0ae4 Create helper functions
| * 656b02e First pass at adding coins
|/
</code></pre>

<p>So it seems to me that it is creating a new branch having id <strong>df03538</strong> (the branch can have an ID or am I missing something?) and label <strong>I can't spell 'screen' apparently :)</strong>.</p>

<p>This branch contains 4 commits with ids <strong>354dfdd, 0c6daf1, a3c0ae4, 656b02e</strong>.</p>

<p>Is it my interpretation correct or am I missing something?</p>

<p>If my interpretation is correct and this is a new branch why I can't see it into the list of branches obtined by the previous <strong>git branch</strong> statment that show only the <strong>master</strong> branch?</p>
","3","1833945","",""
"19848120","1391026","2013-11-07 22:35:21","1","2308","<git><grep><git-log>","How to list only version tags with git-log?","<p>I want to create a (latex) table of tags and theirs messages straight out of git, therefor I need to get all tags that match a pattern like:</p>

<pre><code>/^v([0-9]|\.)*/
</code></pre>

<p>or so.</p>

<p>How to do this? My attempt:</p>

<pre><code>git log --all --tags --grep=""^v([0-9]|\.)*"" --pretty=format:""%d &amp; %s &amp; %b""
</code></pre>

<p>fails and returns nothing (tested on the linux kernel source tree).</p>
","1","1391026","0","0"
"19850985","2326199","2013-11-08 03:16:51","1","1914","<git><git-log>","git show logs exclude some user or committer","<p>I don't know how to do this</p>

<p>I try these already:</p>

<p><code>
<code>git log -p --author=""user"" --not Sites/Web/Templates</code>
</code></p>

<p><code>
<code>git log -p --author=""!user"" Sites/Web/Templates</code>
</code></p>

<p>still show log of that user. Help, please.</p>
","4","2326199","",""
"19853283","575569","2013-11-08 06:58:37","1","282","<git><shell><sed><grep><git-log>","Custom changelog from git log","<p>I need help to create a custom formatted change log from git log.</p>

<p>Here is how a git log looks like the way we write it.</p>

<pre><code>commit 2f5719d373e284e4473a5a3f229cbf163f6385fe
Author: Adrian &lt;adrian@mycompany.com&gt;
Date:   Tue Nov 5 17:23:51 2013 +0100

    This is the title of the commit

    Some description about the commit, row 1
    Some description about the commit, row 2
    Some description about the commit, row 3

    ISSUE=BZ1020
    ISSUE=BZ1022        
    Change-Id: I1e15e12da28692e09c377c084dc439fec1d58f4c
</code></pre>

<p>The way I want it formatted is to extract the <code>title</code> row and <code>ISSUE=BZ</code> row and create a nice change log. I want something like this with issue number(s) first and then the title. I also want to support several <code>ISSUE=BZ</code> tags in case someone fixes several bugs in one commit. An of course, not all commits contains bug fixed so I want to omit those commits completely.</p>

<pre><code>BZ1020 This is the title of the commit
BZ1022 This is the title of the commit
</code></pre>

<p>So far i have managed to extract all issues fixed but not the title with this command:</p>

<pre><code>git log &lt;old version&gt;..HEAD | grep -i 'ISSUE=BZ' | sed 's/.*=//g'
</code></pre>

<p>Produce:</p>

<pre><code>BZ1020
BZ1022
</code></pre>

<p>Any ideas how to proceed? I have to tell you that I am a beginner a using the <code>sed</code> command.</p>
","0","575569","",""
"19733972","47552","2013-11-01 19:25:42","4","164","<git><rename><git-log>","git log: summarize movement of directories containing lots of files","<p>I'm doing some directory-level reorganization in my repository.  The resulting commits show a lot of file-level renames, which obscures the fact that conceptually all I've done is one or two <code>git mv dir1/ dir2/</code> commands.</p>

<p>Is there a way to make <code>git log</code> summarize this sort of operation to show that, conceptually, an entire directory was moved?  I thought that <code>--dirstat</code> or <code>--summarize</code> would get me at least close, but they don't seem to do what I want.</p>

<p>(I understand that git's repository model does not track any information about directories, only files.  However, the same is true of file renames, yet it's able to derive information about file-level renames after the fact.)</p>

<p>Here's a simple example:</p>

<pre><code>#setup
git init
mkdir dir1
for f in foo bar baz; do echo $f &gt; dir1/$f; done
git add dir1
git commit -m 'dir1'

#do the directory move
git mv dir1 dir2
git commit -m 'rename dir1 to dir2'
</code></pre>

<p>At this point I'd like to see something like this:</p>

<pre><code>$ git log -1 --what-options-go-here?
b0ba9c9 rename dir1 to dir2
0       0       {dir1 =&gt; dir2}/
</code></pre>

<p>Instead, I can only seem to produce things like this:</p>

<pre><code>$ git log -1 --numstat --oneline
b0ba9c9 rename dir1 to dir2
0       0       {dir1 =&gt; dir2}/bar
0       0       {dir1 =&gt; dir2}/baz
0       0       {dir1 =&gt; dir2}/foo
</code></pre>
","0","47552","0","0"
"20172758","2219989","2013-11-24 08:54:09","1","481","<git><git-log>","Meaning of commit date in git log","<p>When I check the master log in git doing:</p>

<pre><code>git log master -30 --pretty=""%h - %s - %cn - %cd""
</code></pre>

<p>And I see:</p>

<pre><code>...
af79643 - BL - added changes from test fix - B Lo - Fri Nov 15 12:04:42 2013 +0000
...
</code></pre>

<p>Does this mean that on Friday 15 Nov this was checked into master or could it mean that this commit was checked into somewhere else (e.g. develop) and then subsequently merged into master (at a later date)?</p>

<p>Thanks   </p>
","1","2219989","",""
"22477982","544947","2014-03-18 11:28:17","2","476","<git><git-log>","git log: contributors list since certain tag?","<p>So I know this awesome script to display the contributors of my repo with their associated number of commits:</p>

<pre><code>#!/bin/sh
git log --no-merges ""$@"" | grep ^Author: | sed 's/ &lt;.*//; s/^Author: //' | sort | uniq -c | sort -nr
</code></pre>

<p>But now I'm interested in a script that would do exactly the same thing, but only from a certain range of checkpoints (for example: since tag XYZ to master branch HEAD).</p>

<p>How could I do this?</p>
","0","544947","",""
"44847336","4453737","2017-06-30 13:11:03","8","1895","<git><git-commit><git-log>","How to view git commits when local branch is ahead of origin Commits","<p>I want to view git commits when my branch is ahead of origin branch.</p>

<p>i tried <code>git log</code>  it returns all commits. but, i want to view only <code>ahead commits</code> from branch to origin/branch</p>

<p>here what i mean,</p>

<blockquote>
<pre><code>On branch permissions
Your branch is ahead of 'upstream/permissions' by 2 commits.
  (use ""git push"" to publish your local commits)

nothing to commit, working directory clean
</code></pre>
</blockquote>

<p>in this case i want to view 2 commits</p>
","0","4453737","",""
"29379176","881945","2015-03-31 21:47:55","0","80","<git><colors><format><multiline><git-log>","How to let git-log color multiline placeholder values in format string?","<p>Given the following <code>git-log</code> command:</p>

<pre><code>git log --max-count=1 --format='format:%C(cyan)%GG'
</code></pre>

<p>Only the first line of the <code>%GG</code> multiline placeholder value gets colorized. But I want to have the following text to be in the same color until the currently chosen color is reset by the next <code>%C(...)</code> statement. How can I achieve this?</p>

<p>I'm using Git version 2.1.0 on Fedora Desktop 21.</p>
","0","881945","",""
"30168278","2612235","2015-05-11 12:56:38","7","832","<git><git-log>","Display git log --graph --decorate with HEAD on top","<p>With this command: </p>

<pre><code>git log --all -n30 --graph --abbrev-commit --decorate \
   --date=relative --format=format:'%h - (%ar) %s - %an%d'
</code></pre>

<p>I will get a wonderful tree which is exactly what I am looking for except that the HEAD is not always on the top. </p>

<p>If I remove the <code>--all</code> option, I will also lose all the displayed branches. </p>

<p>How can I keep both the HEAD on top and still see the full tree visible up to the last 30 elements?</p>

<p>In other words what I get is </p>

<pre><code>   * d4b7d5a - (foo)
   * * 44f53e2 - (HEAD)
   |/
   * 4587f32 - (bar)
</code></pre>

<p>And What I want to get is:</p>

<pre><code>   * 44f53e2 - (HEAD)  &lt;- HEAD on the top
   | * d4b7d5a - (foo)
   |/
   * 4587f32 - (bar)
</code></pre>
","3","2612235","0","0"
"14243380","286802","2013-01-09 17:52:10","201","117069","<git><git-log>","How to configure 'git log' to show 'commit date'","<p>How can I configure <code>git log</code> to show <code>commit date</code> instead of <code>author date</code>?</p>
","2","286802","0","0"
"19246286","2598745","2013-10-08 11:17:07","0","52","<ruby><git><git-log>","How to create a file in another directory of different path while performing git log in ruby script","<p>Please find the code below. </p>

<pre><code>Dir.chdir('/home/user/Source/pxe/')do
system(""git log ""+ version_one +"" "" + version_two +"" --pretty=format:'%h %ad%x09%an%x09%s' --date=short"", :out =&gt; ['gitlog.txt', 'a'])
end
</code></pre>

<p>Depending on version inputs from user, I perform <code>git log</code> between two versions and log gets saved in <code>gitlog.txt</code> of pxe folder. </p>

<p>Now my question is, how to create this <code>gitlog.txt</code> in another directory and append the log to the same file, say the new file path is: <code>/home/user/server-diff/gitlog.txt</code></p>

<p>I tried it in below way but no file got written and raised an error on execution 
<code>Permission denied- /home/user/server-diff/gitlog.txt (Errno::EACCES)</code>: </p>

<pre><code>file = File.new(""/home/user/server-diff/gitlog.txt"", ""w"")
Dir.chdir('/home/user/Source/pxe/')do
    system(""git log ""+ version_one +"" "" + version_two +"" --pretty=format:'%h %ad%x09%an%x09%s' --date=short"", :out =&gt; [file, 'a'])
    end
</code></pre>

<p>Please let me know how to go ahead, I have one more question associated with this.</p>

<p>Kindly let me know if there is any lack of clarity in the question asked.</p>
","2","2598745","",""
"35565847","424632","2016-02-22 23:19:12","1","81","<git><git-log>","Abbreviating pathname prefixes from the output of git log --stat","<p>When I run <code>git log --stat</code> on a repository where most of the changes are occurring in the same subtree deep in the hierarchy, I may get something like this:</p>

<pre><code>$ git log --stat
commit xxxxxxx
Author: xxx
Date:   xxx

    commit message

.../toplevel/networking/services/cool_analysis/Makefile    |  10 ++
.../networking/services/cool_analysis/cool_analysis_main.c | 209 +++............
.../subdirectory/util/cool_analysis_helper.c               | 112 +++.......
</code></pre>

<p>where everything shares the common prefix <code>xxx/toplevel/networking/services/cool_analysis</code> (and <code>subdirectory</code> is runder that) but the output of <code>git log --stat</code> makes it really hard to recognize the fact, because different amounts of the pathname prefixes are abbreviated. Instead I would like something like this:</p>

<pre><code>$ git log --stat --strip=xxx/toplevel/networking/services/cool_analysis
commit xxxxxxx
Author: xxx
Date:   xxx

    commit message

.../Makefile                                 |  10 ++
.../cool_analysis_main.c                     | 209 +++............
.../subdirectory/util/cool_analysis_helper.c | 112 +++.......
</code></pre>

<p>Is there a way to get this? The manual doesn't seem to have anything about it, and post-processing the output with <code>sed</code> or something is hard because the pathnames are already abbreviated. (<code>git log --name-only</code> gives unabbreviated full pathnames, but it doesn't give you the stats.)</p>
","0","424632","",""
"3197416","385804","2010-07-07 17:47:48","92","25628","<git><git-log>","Why doesn't ""git log -‌- foo"" work for deleted file foo?","<p>My repository underwent changes such as:</p>

<ol>
<li>...some unrelated commits...</li>
<li>Commit new file <code>foo</code> with 100 lines of content</li>
<li>...intervening commits, some of which touch <code>foo</code>...</li>
<li>Insert the contents of <code>foo</code> at the top of an existing file <code>bar</code> and <code>git rm foo</code> in the same commit</li>
<li>...more unrelated commits...</li>
</ol>

<p>Now I want to see the log of deleted file <code>foo</code>.  Everything I've read, including on SO, says I should be able to <code>git log -- foo</code>, but that command produces no output.</p>

<p>If I find the commit that includes deleting <code>foo</code> I can <code>git log 1234abcd -- foo</code> and see its log, so I think my path to <code>foo</code> isn't the problem.  Also note that <code>git merge-base HEAD 1234abcd</code> outputs <code>1234abcd[...]</code>, so I think that should prove the commit is reachable from <code>HEAD</code>.  Note that there is no file <code>foo</code> in my working tree (obvious, since it was deleted).  Using Git 1.7.1.1 on OS X.</p>

<p>Why doesn't <code>git log -- foo</code> work for me and how can I fix it?  Thanks!</p>
","3","385804","0","0"
"22479096","544947","2014-03-18 12:15:05","1","200","<git><gettext><git-log>","git log: exclude commits that only modify certain subfolder?","<p>When writing the release notes for a new version of a project, sometimes it is interesting to distinguish which contributors are developers and which are just translators.</p>

<p>For this, in the case of <em>gettext</em>-based projects, one could simply use <code>git log</code> but just taking in account all the subfolders of a project which are <strong>not</strong> named <code>po</code>.</p>

<p>I've seen that <code>git log</code> accepts a <em>path</em> argument, but how to achieve the opposite? Supply a path to be <strong>discarded</strong>, instead of taken in account? Thanks</p>
","0","544947","",""
"61047230","246724","2020-04-05 18:10:51","1","200","<git><git-log><git-revision>","git log - exclude children/descendants of given ancestor/base","<p>In <code>git help log</code> and <code>git help revisions</code>, it is documented how to include or exclude specific commits/refs and their ancestors in <code>git log</code>.</p>

<p>I am now looking for a way to exclude <em>children</em> of a given rev, and combine this with other range specifiers.</p>

<p>So:</p>

<ul>
<li>Include TARGET and its ancestors</li>
<li>Exclude BASE_1 and all its parents / ancestors, even if they are ancestors of TARGET.</li>
<li>Exclude BASE_2 and all its parents / ancestors, even if they are ancestors of TARGET.</li>
<li>Exclude START_1 and all its children / descendants, even if they are ancestors of TARGET. In my case, START_1 is an ancestor of TARGET, but is <em>not</em> an ancestor of any of the other revs I am excluding.</li>
</ul>

<p>The first three steps can be done with <code>^</code> negation, or with <code>--not</code>.</p>

<pre><code>git log TARGET ^BASE_1 ^BASE_2
</code></pre>

<p>The last step would require something new, which I don't know if it exists.</p>

<pre><code>git log --exclude-descendants-of=START_1 TARGET ^BASE_1 ^BASE_2
</code></pre>

<h2>Use case / motivation</h2>

<p>We have an ""acceptance"" branch which merges a lot of feature branches. It also contains some commits that were done directly on acceptance, to amend faulty merges (don't judge!).</p>

<p>I am rebasing this on master with <code>git rebase -i --rebase-merges</code> to preserve branch topology.</p>

<p>I want find out which feature branches were merged to the old version, but not (yet) to the rebased version. I want to exclude from this list the feature branches that I already know to be missing, so that I can narrow it down step by step.</p>

<p>So I would have something like this:</p>

<pre><code>git log --exclude-descendants-of=START_OF_OLD_ACC origin/acceptance ^acceptance ^FEATURE_1 ^FEATURE_2
</code></pre>

<h2>What I considered so far</h2>

<p>I already found <code>--ancestry-path</code>. But I don't see how I can negate this and combine with other range specifiers to achieve the desired result.</p>

<h2>Alternatives</h2>

<p>Alternatively, I would already be happy if I could exclude all commits that appear in <code>git log --first-parent TARGET</code>, because these happen to be more or less the same as the descendants I would like to exclude. </p>

<h2>Related</h2>

<p><a href=""https://stackoverflow.com/questions/61038114/git-log-range-exclude-ancestors-of-multiple-base-refs"">git log range exclude ancestors of multiple base refs</a></p>
","6","246724","",""
"10585498","263268","2012-05-14 14:38:26","1","618","<git><git-log>","List key git commits between revision A and B","<p>I'm trying to understand the relationship between two git commits that are some distance apart in git spacetime. They both touch the same piece of code, but somewhere along the line for one of them, the code got moved to a different file.</p>

<p>What I think I want to do is this: view a simplified <code>git log</code> that shows 'key' commits. Initially, this would be revision A, revision B, and their common ancestor. But, as I identify other relevant commits, I'd also like to be able to see those, in something like the <code>git log --graph</code> format.</p>

<p>Issues so far:</p>

<ol>
<li><code>git log --all A...B</code> starts at B, shows many commits, and I'm not sure what the significance of the final commit it shows is. (It's not A)</li>
<li>I can't work out any way to filter down the huge number of commits. <code>--simplify-by-decoration</code> helps in other cases, but not here (eg, it doesn't show the actual commits I specified).</li>
</ol>

<p>Sorry if this isn't clear. It's not easy to explain the kind of information that would be helpful until you see it.</p>

<p>EDIT </p>

<p>Ok, I'll try and spell it out. Call the target commits a123 and b234, with c345 another 'key commit' I've identified, and d456 is the common ancestor:</p>

<pre><code>git log &lt;something&gt;  a123 b234 c345

d456
| |
| c345 &lt;description, diff of key file&gt;
| |
| b234 &lt;...&gt;
|
a123
</code></pre>
","1","263268","",""
"49130112","4632019","2018-03-06 11:47:37","0","64","<git><git-log>","Why git do not take into account changes at working tree?","<p>I run the command:</p>

<pre><code>git log --topo-order -u -L 228,250:""lib/Mojolicious/Plugin/Wizard.pm""
</code></pre>

<p>To inspect changes at the <code>start</code> subroutine, but <code>git</code> do not take into account changes in working tree. </p>

<p><a href=""https://i.stack.imgur.com/tvDea.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tvDea.jpg"" alt=""enter image description here""></a></p>

<p>It seems I should supply lines as they are in last commit:</p>

<pre><code>git stash save
git log --topo-order -u -L 212,234:""lib/Mojolicious/Plugin/Wizard.pm""
</code></pre>

<p><a href=""https://i.stack.imgur.com/Onxvz.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Onxvz.jpg"" alt=""enter image description here""></a></p>

<p>After that I can restore stash. And command still works (just lines in editor are different. See first picture):</p>

<pre><code>git stash pop
git log --topo-order -u -L 212,234:""lib/Mojolicious/Plugin/Wizard.pm""
</code></pre>

<p><strong>Is there an option that will show evolution for lines that are not committed yet?</strong></p>
","2","4632019","",""
"50236548","1154610","2018-05-08 14:53:36","1","28","<git><git-log>","Is it possible to customize the GPG validity using a custom git log format?","<p>I have specified a git alias which shows GPG signature validity in a commit log.</p>

<pre><code>[alias]
    l = log --graph --decorate --pretty=format:'%C(auto)%G? %H %d%n%an &lt;%ae&gt; [%ai]%n%n  %s%n%Creset'
</code></pre>

<p>A full reference of the format can be found <a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">here</a>.</p>

<p>I’m using <code>%G?</code> to show the GPG signature validity of each commit. This shows <code>G</code> for a good signature, <code>B</code> for a bad signature, etc.</p>

<p>Is it possible to customize the characters used to indicate the signature validity? E.g. <code>%Cgreen✔%C(auto)</code> for good, <code>%Cgreen✖%C(auto)</code> for bad, etc.? If so, how?</p>
","0","1154610","",""
"51428487","8105932","2018-07-19 17:15:26","-1","88","<json><git><graph><git-bash><git-log>","getting git log output in prettyformat","<p>I have this command:<code>git log --all --pretty=format:'%n{%n  ""CommitHash"": ""%H"",%n  ""Author"": ""%an"",%n  ""AuthorEmail"": ""%ae"",%n  ""Date"": ""%ad"",%n  ""Message"": ""%f"",%n},'
</code></p>

<p>Ho can I modify it to get this: <code>""Merge"":"".....""</code> and this:  <code>Merge branch 'master' of ..........</code></p>

<p>Those 2 things appear when you use the <code>git log --all --graph</code> command,  but I trying to put the info that I would get with that command in the pretty format that I put above,  and until now I could get everything except those 2 things.</p>
","0","8105932","",""
"52678700","1972294","2018-10-06 11:43:57","0","54","<git><git-log>","Why does this not work: 'git log branchname:filepath'?","<p>Why does this not work:</p>

<pre><code>git log someBranch:path/to/myfile.txt       
echo $?  # shows 0/success but no output from git log
</code></pre>

<p>(This does work:)</p>

<pre><code>git rev-parse someBranch:path/to/myfile.txt # this works and returns the SHA
</code></pre>

<p>Is there another way to get the log/commits relevant to a specific file on a specific branch (without checking out that branch) ?</p>
","0","1972294","",""
"73482255","1925536","2022-08-25 05:24:31","0","72","<git><git-log>","Can I hide part of a commit message when using git log?","<p>I use &quot;Smart Commits&quot; with git and JIRA, which means my commit messages look like this:</p>
<pre><code>J5481-290 - #comment {panel:bgColor=#eae6ff}*Git Commit Message*\\Added IQ310-2 to *FB710* code, including populated interface{panel} #time 1m
</code></pre>
<p>I'd like to use <code>git log</code>, but omit part of the commit message, for example, removing the following texts:</p>
<ul>
<li><code>#comment {panel:bgColor=#eae6ff}*Git Commit Message*\\</code></li>
<li><code>{panel}</code></li>
</ul>
<p>I'm happy to leave everything else that is there for formatting on JIRA, but the above can just makes things difficult to read for other people who are looking later</p>
<p>Is there any way of doing this with <code>git log</code>?</p>
","2","1925536","",""
"73531998","19424480","2022-08-29 16:42:07","0","81","<git><git-log>","How to only get git commit messages for merges into a particular branch","<p>In our repo we have 3 primary branches.</p>
<p><a href=""https://i.stack.imgur.com/IWnMt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IWnMt.png"" alt=""enter image description here"" /></a></p>
<ol>
<li><code>development</code> developers branch from development, do their work and merge back into development.</li>
<li><code>UAT</code> once the client is ready we merge development into UAT</li>
<li><code>live</code> once UAT passes we merge UAT into live</li>
</ol>
<p>I would like a list of all git-log commit messages for merges into the development branch.</p>
<p>I would like to exclude all other merges, e.g. development to some other branch, live to UAT, UAT to dev, dev to UAT.</p>
<p>Currently I have this</p>
<pre><code>git log --merges --since=&quot;2022-07-27 16:00:00&quot; --grep='Merged\sPR\s\d+:\s' -P --pretty=oneline 
</code></pre>
<p>This will get me all the merge commits</p>
<ol>
<li>since particular date</li>
<li>I use grep to filter. All the merges I'm interested in have the text &quot;Merge PR 12345&quot; in the message. This filters out merges from development into some other dev branch (pink with green bar in the image).</li>
</ol>
<p>How to get rid commit messages for merges from live to UAT to development ?</p>
","2","19424480","",""
"73530478","1900608","2022-08-29 14:37:25","0","60","<git><git-log>","git log --oneline: separator for lines of body","<p>I often use</p>
<pre><code>git log --graph  --all --oneline
</code></pre>
<p>My problem is that, if the commit message contains several lines, then they are concatenated with a space as separator.
Is it possible to define a different separator, e.g. '$'?</p>
","5","1900608","",""
"56784010","4143930","2019-06-27 04:42:54","2","1601","<git><git-log><git-history>","How to check the latest commit irrespective of the branch in the git history?","<p>In my project there are multiple branches. I want to check which is the latest commit in the history irrespective of any branch.</p>

<p>I have tried  <code>git log -n 1 --date-order</code> but it gives the commit in the checked out branch</p>

<p>Please help me with a command that I can use to see the latest commit in the git history which is not dependent on the branch.
The result should give me the commit and the branch name on which it was committed.</p>
","1","4143930","",""
"56798837","1223975","2019-06-27 21:48:52","2","593","<git><git-commit><git-log><git-hash>","Determine branch name from git commit","<p>I assume that a git commit hash (5743a31610d38064af35573b91e3bbe39d808b9b) will always map to 0 or 1 git branches? Is there a reliable way to trace what the branch name was when the git commit was created? From what I know a git branch is a pointer to a commit, given a commit can we reliably point to a branch (if the branch still exists)?</p>

<p>Context: I am creating some devops deployment change-logs so we can keep track of what we changed - I am wondering if it's worthwhile to name the git branches that were released, or just put the git commit hash in there, and we can reverse lookup the branch name if we really want to?</p>
","1","1223975","",""
"27906979","66293","2015-01-12 16:55:12","1","374","<git><powershell><formatting><git-log>","powershell select-string preserve formatting of git log","<p><strong>Is it possible to preserve formatting (specifically colour) of a string when piped through select-string?</strong></p>

<p>I'm using select-string to find entries with specific tags in a git log that's been pretty-formatted with some nice colours. Unfortunately the colour gets lost in the process, and I get something that looks like non-printing control characters scattered about. This happens even on the ""line"" property of the match-info object.</p>

<p>I've piped the output of the git log into Get-Member and it appears to be a vanilla System.String.</p>

<p><strong>Extra-details</strong>:
(probably not important, but you can never tell)</p>

<p>powershell v4</p>

<p>git 1.9.5</p>

<p>The formatted git log command is:</p>

<pre><code>git log --color --graph --pretty=format:'%C(cyan)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit
</code></pre>

<p>I am vaguely aware that I may be able to do something similar with git log switches, and I'm looking into this, but for this question, assume I still need to pipe the output through powershell commands keeping the colours.</p>

<p><strong>Edit:</strong></p>

<p>Mangled output looks something like this (slightly sanitized). Unfortunately the unicode chars didn't survive emailing off the system in question.</p>

<pre><code>* [0123abc[m -[33m (tag: build-1.0.3730)[m Some Comment [32m(5 hours ago) [1;34m&lt;Author Name&gt;[m
* [0123xyz[m -[33m[m Some other comment [32m(6 hours ago) [1;34m&lt;Author Name&gt;[m
</code></pre>

<p>According to www.babelstone.co.uk/Unicode/whatisit.html there is a control (escape) character in the output with codepoint U+001B, immediately preceding each left square bracket in the previous example, however these were removed by email clients.</p>
","5","66293","",""
"35773936","128662","2016-03-03 13:46:11","17","5517","<git><git-commit><git-log>","Git log - How to filter (exclude) files from appearing in `git log`? (git pathspec magic)","<p>I need to use the <code>git-log</code> command to create a report of the number of added and removed lines by commit, on average between two dates. </p>

<p>Currently the command I use is:</p>

<pre><code>git log --since=""2015-12-01"" --until=""2015-12-31"" --shortstat
</code></pre>

<p>But I need to filter some files in the process.
Thoses files are autogenerated, and we don't want to see their influence. They are easily recognizes by their name <code>*.generated.*</code></p>

<p>I choose to use the <code>git-log</code> command, I am able to get the report I need, except I don't see how to filter those unwanted files.</p>

<p><a href=""https://git-scm.com/docs/git-log"" rel=""noreferrer"">The doc is big</a>, I already read it several times, but I don't see anything about filtering files based on their names. Is this possible, or do I have to find another command to find the number of lines added/deleted by commit?</p>
","4","128662","0","0"
"54567567","10821986","2019-02-07 06:33:56","6","234","<regex><git><version-control><git-log>","How can I search my ENTIRE git repo's commit history for a string change?","<p>I have a website/repo.</p>

<p>Part of my website says:</p>

<p>""Powered by <a href=""https://myotherwebsite.com/"" rel=""nofollow noreferrer"">https://myotherwebsite.com/</a>'""</p>

<p>at some point, some troll I had working on the website switched it to say:</p>

<p>""Powered by <a href=""https://theirwebsite.com"" rel=""nofollow noreferrer"">https://theirwebsite.com</a>""</p>

<p>How can I search the entire repo history to the commit where this change was made.</p>

<p>There have been A LOT of commits/branches over the years.</p>
","0","10821986","",""
"57457613","11915904","2019-08-12 08:08:51","2","545","<git><git-merge><git-log>","""git log --follow"" always ignore merge commit","<p>It seems <code>git log --follow</code> always ignore all the merge commits even though the merge commit include some content change different from its parents.</p>

<p>I just use two different branches from master to change the same file and merge them back with <code>--no-ff</code>. Since two branch change the same file, the later merge conflict. And I just combine the change from the two branch. However, when I try to inspect the change history. I find that  ""git log"" list the latter merge commit as expected. However, ""git log --follow"" just ignore all merge commit even latter merge actually change some content.</p>

<p>My git version is 2.19.1.windows.1.</p>

<p>My Operating System is windows 10.</p>

<p>My problem could be reproduce with following commands:</p>

<pre><code># init git repository
git init .

# create a.txt 
echo Hello &gt; a.txt
git add a.txt
git commit -m ""First commit""

# change a.txt in branch ch1
git checkout -b ch1
echo World &gt;&gt; a.txt
git commit -am ""first change""

# change a.txt in branch ch2
git checkout master
git checkout -b ch2
echo Git &gt;&gt; a.txt
git commit -am ""second change""

# merge ch1 back into master with no-ff
git checkout master
git merge --no-ff ch1

# merge master into ch2 and resolve conflict
git checkout ch2
git merge master

echo ""Hello
World
Git"" &gt; a.txt

git commit -a

# merge ch2 back into master with no-ff
git checkout master
git merge --no-ff ch2

</code></pre>

<p>Then, in master branch when I run <code>git log --oneline --graph -- a.txt</code>, I just get:</p>

<pre><code>*   4506bb4 (ch2) Merge branch 'master' into ch2
|\
| * 09c2898 (ch1) first change
* | 0c7e2e6 second change
|/
* 0363441 First commit
</code></pre>

<p>When I run <code>git log --oneline --graph --follow -- a.txt</code>, I just get:</p>

<pre><code>...
| * | 09c2898 (ch1) first change
|/ /
| * 0c7e2e6 second change
|/
* 0363441 First commit
</code></pre>

<p>I just expect the same log history with or without <code>--follow</code> option in this simple scenario. Why <code>git log --follow</code> seems always ignore the merge commits even though the merge commit actually include some change different from its parent?</p>
","4","11915904","",""
"74301302","15034568","2022-11-03 10:12:46","0","13","<github><git-log>","GitHub git log to log commit count for specific file","<p>I've been messing around with the following:
<a href=""https://gist.github.com/sg-s/2ddd0fe91f6037ffb1bce28be0e74d4e"" rel=""nofollow noreferrer"">https://gist.github.com/sg-s/2ddd0fe91f6037ffb1bce28be0e74d4e</a></p>
<p>I've been trying to edit to to log the commit count for a specific file, however I'm at a loss.</p>
<p>This is where I'm at, but it doesn't work - somehow it's still for the entire repo, and somehow it's no longer for commit count, but for some other weird number.</p>
<p><code>git log main -- myluafile.lua pretty=oneline | wc -l &gt; build_number</code> took the count from 1391 to 1397.
I would expect it to reflect the actual commit count of the file, adding +1 for each commit I make.</p>
<p>What am I doing wrong? :)</p>
","0","15034568","",""
"73852443","7023245","2022-09-26 09:56:37","1","83","<git><git-log><git-format>","git log --format: linebreak after list of refs","<p>the git log <code>format</code> option <code>%d</code> for displaying the list of refs associated with the commit accepts a <code>+</code> to add a &quot;conditional&quot; line break in front of this part of the output:</p>
<pre><code>git log --oneline --graph --decorate --date=short \
--format=format:&quot;%C(dim white)%h%C(reset) %C(blue)%ad%C(reset) %C(bold white)%s%C(auto)%+d%C(reset)&quot; 
</code></pre>
<p>This results in a output like this, where the ref names are in a new line after the commit they belong to and no new line if there is no ref annotation for the commit:</p>
<p><a href=""https://i.stack.imgur.com/DybAr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DybAr.png"" alt=""enter image description here"" /></a></p>
<p>This is somewhat misleading and makes the ouput harder to read than I wanted to have it.</p>
<p>I'd like to change the positions of the ref names to be the first part:</p>
<pre><code>git log --oneline --graph --decorate --date=short \
--format=format:&quot;%C(auto)%+d%C(reset)%C(dim white)%h%C(reset) %C(blue)%ad%C(reset) %C(bold white)%s&quot; 
</code></pre>
<p>But then (obvious) I still get a linebreak <em>before</em> the refs and no linebreak behind.
If I add <code>%n</code> I get an <em>unconditional</em> linebreak resulting in an empty line between each and every commit, what I don't want either.</p>
<p>How can I place such a &quot;conditional&quot; line break <strong>behind</strong> the refs part, so that the ref is in a separate line before its commit, but no linebreake when the commit has no refs?</p>
<p>I already use this command in a shell script so any solution based on <code>sed</code> or <code>awk</code> <strong>that preserves coloring</strong> is also welcome.</p>
","5","7023245","",""
"57168290","3906760","2019-07-23 16:11:17","4","139","<git><git-log>","How to get meaningful revision graph with `git log`","<p>I've quite a big repository with lots of branches and tags. In order to get a quick overview over the branches and tags I often use</p>

<pre><code>git log --all --graph --simplify-by-decoration
</code></pre>

<p>However, this command oversimplifies the revision graph (which basically looks like this; <code>tag B</code>, <code>branch C</code>, and <code>branch D</code> all come after <code>tag A</code>, but are not direct children of <code>tag A</code>):</p>

<pre><code>  tag B   branch C   branch D
       \     |     / 
           tag A
</code></pre>

<p>instead of </p>

<pre><code>                  branch C   branch D
                    \        /
  tag B            last common ancestor Y
     \              /
     last common ancestor X
              |
             tag A
</code></pre>

<p>Hence, it is hard to see where the branches branched off.</p>

<p>Is there a way to get the desired output (i.e., includes the common ancestors)? - Using <code>sparse</code> adds all commits and, thus, is too noisy.</p>
","9","3906760","0","0"
"73982364","1498652","2022-10-07 04:25:32","2","32","<bash><git><git-log><git-reflog>","How can I tweak this git log command / bash script to include deleted commits from deleted branches that git reflog should still know about?","<p>So I have this little bash script to output a csv file that shows all my commit history from a specific month.</p>
<pre class=""lang-bash prettyprint-override""><code>function make-git-report() {
  if [ &quot;$1&quot; != &quot;&quot; ]
  then
    local month=$1
  else
    local month=$(date +%m)
  fi

  local year=$(date +%Y)
  local nextYear=$year
  local nextMonth=$((month+1))

  if [ &quot;$nextMonth&quot; = &quot;13&quot; ]
  then
    local nextMonth=&quot;01&quot;
    local nextYear=$((year+1))
  fi

  local start=&quot;$year-$month-01&quot;
  local end=&quot;$nextYear-$nextMonth-01&quot;

  rm -f log.csv
  git --no-pager log \
      --author=&quot;Evert&quot; \
      --since=&quot;$start&quot; \
      --before=&quot;$end&quot; \
      --branches --remotes --tags --no-decorate --no-merges \
      --pretty=format:'§&quot;%ch&quot;;&quot;%an&quot;;&quot;%s&quot;;' --stat | \
      grep -v \| | tr -s &quot;\n\n&quot;  | tr &quot;\n&quot; '&quot;' | tr &quot;§&quot; &quot;\n&quot; &gt; templog.csv
  echo &quot;\nDate;Author;Message;Changes&quot; &gt;&gt; templog.csv
  tac templog.csv &gt; log.csv
  rm -f templog.csv
}
</code></pre>
<p>But I just realized that if a branch is deleted during that month, and it was only merged using a squash merge, then a lot of commits will not show up in my csv file.</p>
<p>I've understood that <code>git reflog</code> will somehow still contain that missing data, but I'm not sure how to merge that information into the output from <code>git log</code> while graciously avoiding things like duplicate entries and maybe more unwanted results that I now can't think of.</p>
<p>Can anybody give me a little hint, a push in the right direction, on how to solve this?</p>
","1","1498652","",""
"74033327","2561130","2022-10-11 19:41:50","0","89","<git><branch><git-branch><git-log>","git log showing source of a branch","<p>I have a repos with several branches and I would like to be able to tell the initial source branch from which each branch was started. For example:</p>
<ol>
<li>Initial checkin of master</li>
<li>make changes to master</li>
<li>branch master to featureA</li>
<li>make changes to featureA</li>
<li>branch featureA to featureB</li>
<li>make changes to featureB</li>
<li>merge featureB into master</li>
</ol>
<p>or if you want the commands:</p>
<pre><code>git clone &lt;url&gt; test
cd test

echo &quot;Test&quot;&gt;test.txt
git add .
git commit -m &quot;Initial checkin&quot;
git push

echo &quot;Updates&quot;&gt;&gt;test.txt
git add .
git commit -m &quot;Updates&quot;
git push

git branch featureA
git checkout featureA
git push --set-upstream origin featureA
echo &quot;Updates featureA&quot;&gt;&gt;test.txt
git add .
git commit -m &quot;Updates to featureA&quot;
git push

git branch featureB
git checkout featureB
git push --set-upstream origin featureB
echo &quot;Updates featureB&quot;&gt;&gt;test.txt
git add .
git commit -m &quot;Updates to featureB&quot;
git push

git checkout master
git merge origin/featureB
git push 
</code></pre>
<p>but when I run a <em>git log --all --source</em> I don't see where featureB came from:</p>
<pre><code>commit d5f1a9d511ff349a35befbe7aa4f41aca75a0e5a refs/heads/featureB
Author: itsme mario
Date:   Tue Oct 11 15:16:49 2022 -0400

    Updates to featureB

commit f66006c5d87ee2a507da39aa8a8d6f354b454bb8 refs/heads/featureA
Author: itsme mario
Date:   Tue Oct 11 15:15:28 2022 -0400

    Updates to featureA

commit 9f433234c228029b5efba118001f0afc8ab5c4ee refs/heads/featureA
Author: itsme mario
Date:   Tue Oct 11 15:13:52 2022 -0400

    Updates

commit 57d41e78fea121977aa7e52177901ac77109b8bb refs/heads/featureA
Author: itsme mario
Date:   Tue Oct 11 15:13:23 2022 -0400

    Initial checkin
</code></pre>
<p>if I a graph it doesn't show the different branches either <em>git log --all --source --graph</em>:</p>
<pre><code>* commit d5f1a9d511ff349a35befbe7aa4f41aca75a0e5a   refs/heads/featureB
| Author: itsme mario
| Date:   Tue Oct 11 15:16:49 2022 -0400
| 
|     Updates to featureB
| 
* commit f66006c5d87ee2a507da39aa8a8d6f354b454bb8   refs/heads/featureA
| Author: itsme mario
| Date:   Tue Oct 11 15:15:28 2022 -0400
| 
|     Updates to featureA
| 
* commit 9f433234c228029b5efba118001f0afc8ab5c4ee   refs/heads/featureA
| Author: itsme mario
| Date:   Tue Oct 11 15:13:52 2022 -0400
| 
|     Updates
| 
* commit 57d41e78fea121977aa7e52177901ac77109b8bb   refs/heads/featureA
  Author: itsme mario
  Date:   Tue Oct 11 15:13:23 2022 -0400
  
      Initial checkin
</code></pre>
<p>What can I do to have the git log show where featureB came from (aka featureA via master)?
Thank you!</p>
","1","2561130","",""
"74060906","2716948","2022-10-13 19:32:50","-1","121","<git><git-commit><git-log>","Is there a command to get the number of lines of code added, deleted, modified for a git commit?","<p>I'm using below command</p>
<p><code>git log --pretty=format:&quot;%h,%cn,%cs&quot;</code> which gives me the commit ID, committer name, and commit date. But what I need is the number of lines added/modified/deleted for every commit ID.</p>
<p>FYI: I'm not looking for difference between the commits.</p>
","0","2716948","",""
"57333971","","2019-08-02 22:11:00","3","686","<git><git-log>","git log --numstat has weird data","<p>I run this command:</p>

<pre><code>git log HEAD --numstat --pretty=""%ae"" | cat
</code></pre>

<p>and I see this:</p>

<pre><code>6       4       frontend/src/Frontend.hs
aviansys@gmail.com
dan.side@gmail.com
dan.side@avian.systems

3       3       dep/rhyolite/github.json
29      14      frontend/src/Frontend.hs
aviansys@gmail.com

3       1       backend/src/Backend/RequestHandler.hs
27      18      frontend/src/Frontend.hs
dan.side@avian.systems

5       0       default.nix
7       0       dep/reflex-dom/default.nix
7       0       dep/reflex-dom/github.json
7       0       dep/reflex/default.nix
7       0       dep/reflex/github.json
dan.side@avian.systems
dan.side@avian.systems
dan.side@avian.systems
</code></pre>

<p>what exactly does it mean to have more than one email associated with a commit? does that likely mean the person moved from one network to another (like took their laptop home, then finished their commit?) I am trying to parse the commits and assign them to a single author, but having multiple emails attached to a commit is making this harder?</p>
","2","","0","0"
"57354374","58808","2019-08-05 07:54:18","2","215","<git><git-log>","Combine --grep and -G options in git log","<p><code>git log</code> provides the <code>--grep</code> option to filter commits by commit <em>message</em>. It also provides <code>-G</code> or <code>-S</code> to filter commits by <em>changes</em> made in that commit. But is there a way to combine the two options using a Boolean OR?</p>
","5","58808","",""
"74524799","20565631","2022-11-21 20:56:46","0","24","<git><version><versioning><git-log>","How download all version of a git hub file","<p>I would like to know how to locally download all versions of a file from git hub.
I know I can get them directly from the browser but I don't want just a few but all of them even a hundred.
If I use git log I can see all the commits that have been made but I can't download all the versions of that file to my computer.</p>
<p>Can someone help me?</p>
<p>I expect all versions of a git hub file on my computer</p>
","0","20565631","",""
"74552048","6893936","2022-11-23 19:26:21","-1","43","<git><git-log>","How to filter the git log with only the commit date yyyyddmm format and commit message which has the release of last three months?","<p>I want the output of git log as below -</p>
<p>&quot;2022-06-02 Release Point &quot;</p>
<p>Release Point is what we put into the commit message.</p>
<p>So far, I have tried below commands, I am having trouble in the displayed date format and get only the commit message.</p>
<p>git log --pretty=format:&quot;%ad - %an: %s&quot; --after=&quot;2022-09-08&quot; --until=&quot;2022-11-18&quot; --grep=&quot;Build Integration Point&quot;</p>
<p>It gives me below output -</p>
<p>Fri Nov 11 16:38:05 2022 +0100 - Author Name: -------------------- Release Commit message --------------------</p>
<p>I only want the date and the Release commit message. I want all other details excluded from my output.</p>
","0","6893936","",""
"74654682","3719845","2022-12-02 10:59:44","1","199","<git><git-checkout><git-log><git-show><git-switch>","git checkout commit with specific trailer","<p>I have an orphan branch (let's call it output) which contains the documents generated by templates stored on my main branch. I would like to checkout the commit on output that correspond to a specific commit on main.</p>
<p>I settled on using <code>git commit --trailer 'Source: xxxxx'</code> when committing on output where <code>xxxxx</code> is the corresponding commit on main.</p>
<p>Is it possible to checkout a commit on output knowing only the value of its trailer?</p>
","1","3719845","",""
"74704938","416845","2022-12-06 15:20:39","2","84","<git><git-clone><git-log>","git log pulling objects for shortstats","<p>I'm cloning a particular repository intentionally bare as part of an automation system to parse commits. The command I'm using is:</p>
<pre><code>git clone https://github.com/google/material-design-icons.git --filter=blob:none --bare --no-tags --single-branch
</code></pre>
<p>This is very effective at producing the smallest size-on-disk clone I could achieve, as well as ensuring a fast clone, both of which are important to my process.</p>
<p>When running <code>git log</code> with the following command:</p>
<pre><code>git --no-pager log --max-count=10000 --shortstat -z
</code></pre>
<p><code>git log</code> appears to pause between commits to enumerate receive objects:</p>
<pre><code>remote: Enumerating objects: 8, done.
remote: Counting objects: 100% (8/8), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 8 (delta 2), reused 8 (delta 2), pack-reused 0
Receiving objects: 100% (8/8), 13.48 MiB | 5.76 MiB/s, done.
Resolving deltas: 100% (2/2), done.
</code></pre>
<p>If I remove the <code>--shortstat</code> flag, this doesn't occur. I've attempted to deep dive the docs but I've either missed content on why <code>--shortstat</code> is pulling objects, or there's institutional knowledge I lack. The repo mentioned above is one of a handful we've run into during processing that exhibit this behavior. I would love to be able to output stats while having a slim clone and not having to enumerate objects from remote between commits.</p>
","0","416845","",""
"74857185","20803273","2022-12-19 23:46:03","0","51","<git><terminal><indentation><git-log>","How to fix/adjust git log result's indentation in terminal","<p>In VS Code terminal on Windows,</p>
<p>I am trying to display my commits by using <code>git log</code> and somehow, the displayed result's indentation are broken.</p>
<p>AFAIK, I accidentally pressed arrow keys which move the screen of terminal in VS Code to the right.</p>
<p>I git add and commit them like this:</p>
<pre><code>
    feature/POR-1-landing-page-ui
      * Remove @webpack-cli/generators
      * Sanitize spaces to tabs

</code></pre>
<p>But the indents appear like this when I <code>git log</code></p>
<p>and there's large indent between the <code>*</code> and <code>#commit messages</code>.</p>
<pre><code>$ git log

commit b153284 (HEAD -&gt; feature/POR-1-landing-page-ui)

    feature/POR-1-landing-page-ui
            *       Remove @webpack-cli/generators
            *       Sanitize spaces to tabs

</code></pre>
<hr />
<p>This is how I want the indents to be displayed. When there are too many changes, it's difficult to read the commit messages because of the large indents.</p>
<pre><code>commit 7a0dcb4

    feature/POR-1-landing-page-ui
      * Sanitize imports
      * Sanitize indents
      * Sanitize folder name

</code></pre>
<p>I tried to restart the integrated terminal first and still the same, afterwards tried restarting vscode nothing happens also. I checked VS Code settings but nothing was modified.</p>
","4","20803273","",""
"74866401","20824747","2022-12-20 16:57:12","1","33","<git-log><git-bisect>","How Could I use git log --oneline --all output for ubuntu which will be the same as look like mac, when I will use git bisect good/bad command","<p>I have set the both git bisect good and bad commit but for Ubuntu refs/bisect/bad and good is missing. So how could I bring it back in ubuntu for the same command( git log --oneline --all).</p>
<p>This is in mac git log --oneline --all command output</p>
<p><img src=""https://i.stack.imgur.com/ZJoOi.png"" alt=""1"" /></p>
<p>This is in Ubuntu git log --oneline --all command output</p>
<p><img src=""https://i.stack.imgur.com/yOFaB.png"" alt=""2"" /></p>
","0","20824747","",""
"75000467","15542245","2023-01-04 02:40:34","0","26","<git><search><git-log>","Why does git log command only respond to a committed code line that is referenced without the # comment?","<p>I had commented out line of code in a calling script. I knew my last commit date. But was not sure whether I had made this code change at that time or earlier.</p>
<p><a href=""https://i.stack.imgur.com/b4nB1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/b4nB1.png"" alt=""github repo line of code"" /></a></p>
<p>I wanted to know when I removed this function call</p>
<pre><code>$ git log -S&quot;# $pageString = sortRollListings $pageString&quot;
</code></pre>
<p>No return from git log for this search option. But when I take out the comment-space characters, in the quoted code string, git log returns what I am after.</p>
<pre><code>$ git log -S&quot;$pageString = sortRollListings $pageString&quot;
commit 6be2eb07f432069c57b729568f08b305f7ec5b78 (HEAD -&gt; master)
Author: xxxxxxxxxxxxxxxxxxxxxxxxxxxx
Date:   Wed Dec 7 15:46:49 2022 +1300

    Removed redundant code from rollConvertReport.ps1

commit 4eea8cdbc364b80fc63996294b309168b3d2e911
Author: xxxxxxxxxxxxxxxxxxxxxxxxxxxx
Date:   Sat Dec 3 15:27:19 2022 +1300

    Function readPageOfDblePage redeveloped from halveListings.ps1

commit b9f7fa13cc99caed32be55f57e0fa2fcd9a97db3
Author: xxxxxxxxxxxxxxxxxxxxxxxxxxxx
Date:   Sat Oct 15 17:08:10 2022 +1300

    Revised function expandStreet() to be clearer

commit 55f83a1e9737ea981a4badc8c03b6e5ef31c825f
Author: xxxxxxxxxxxxxxxxxxxxxxxxxxxx
Date:   Sun Oct 9 17:39:21 2022 +1300

    Created rollConvertReport &amp; modified headParserRev() to return header line
:
</code></pre>
<p>The <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow noreferrer"">docs</a> paragraph on <code>-S</code> says:</p>
<pre><code>-S&lt;string&gt;
</code></pre>
<p>Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.</p>
<p>It is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into -S, and keep going until you get the very first version of the block.</p>
<p>I don't understand &quot;use the feature iteratively to feed the interesting block in the preimage back into -S&quot; But I'm pretty sure I'm using this search option as intended.</p>
<p>It appears to me that the quote string, without the hash comment symbol, returns the line of code (being quoted in the git log search option <code>-S</code>) to it's pre-commit state. And because of this is successful. This is like having to quote missing lines of code to find when the lines were removed. Which clearly is not right.</p>
<p>Does anyone have an idea why I'm getting this behavior from <code>git log</code></p>
","1","15542245","",""
"75459163","12682116","2023-02-15 11:32:34","0","52","<git><git-log><git-config><cmder><git-for-windows>","Why is ""git log"", when using cmder's git for windows, showing all commits on my branch?","<p>Typically <code>git log</code> would show the most recent commits on my branch and I can scroll back through the history to see earlier commits.</p>
<p>I have used cmder on all my windows machines as terminal of choice, especially when using git, I've never had this issue before. Cmder comes shipped with git-for-windows which again has never caused this issue before.</p>
<p>Currently setting up a new PC with cmder and I've just noticed this strange behaviour when using git log that is displays all my commits all the way to the first commit. This is obviously not useful as i'm interested in the latest commits only.</p>
<p>I ran <code>git log</code> I expected to see the latest commits with option to scroll through earlier ones.</p>
<p>Instead the terminal spits out all commits and scrolls to the first one ever made.</p>
<p>Perhaps there is some git config incorrectly set?</p>
","8","12682116","",""
"75483949","12828249","2023-02-17 11:52:25","0","71","<git><commit><git-log>","Getting the author and the date of last commit for all the files in a git repo","<p>I have a large repo with many documents (it is an ADO Wiki repo). I want to get the author and the last updated date of each of the documents in the repo. Currently, I'm running</p>
<pre><code>git log -1 --pretty=format:%ci, %cn -- &lt;file path&gt;
</code></pre>
<p>for every file in the repo but this is very slow and takes a long time to finish. What is a faster way to get what I need?</p>
<p>Update:</p>
<p>I modified the accepted answer to get the earliest commit date (the creation date) and all the authors of the file:</p>
<pre class=""lang-bash prettyprint-override""><code>#!/bin/bash

declare -A seen_latest seen_earliest authors

while read -r line ; do
    if [[ $line = /* ]] ; then
        hash=${line%% *}
        date=${line#* }
        date=${date:0:25}
        committer=${line#* }
        committer=${committer:26}
    elif [[ $line &amp;&amp; -z ${seen_latest[$line]} ]] ; then
        seen_latest[$line]=&quot;$date|$committer&quot;
    fi
    if [[ $line ]] ; then
        if [[ -z ${authors[$line]} ]] ; then
            authors[$line]=&quot;$committer&quot;
        elif [[ ! &quot;${authors[$line]}&quot; =~ &quot;$committer&quot; ]] ; then
            authors[$line]=&quot;${authors[$line]}:$committer&quot; # you can use any other separators you like
        fi
        seen_earliest[$line]=&quot;$date|$committer&quot;
    fi
done &lt; &lt;(git log --format='/%H %ci %cn' --name-only)

find -name .git -prune -or -print | while read f ; do
    f=${f#./}
    printf '%s|%s|%s|%s\n' &quot;$f&quot; &quot;${seen_latest[$f]}&quot; &quot;${seen_earliest[$f]}&quot; &quot;${authors[$f]}&quot;
done

</code></pre>
","2","12828249","",""
"75544683","5561649","2023-02-23 12:14:27","1","103","<git><powershell><pycharm><git-log>","How to exit `git log` if it gets stuck while scrolling?","<p>I'm running <code>git</code> commands from Pycharm's terminal using Powershell, on Windows. It sometimes gets stuck after I resize the terminal pane, when I press <code>Q</code>, it just goes to a new line, but I don't get a new Powershell prompt, it just gets stuck there instead.</p>
<p>EDIT: This is not limited to Pycharm. It's also happening from Windows Terminal. However it does not happen using Powershell's own terminal or that of cmd. It seems to be only for terminals that make git-log print new lines (as if I was pressing <code>Enter</code>) while resizing the window.</p>
<p>I have tried hitting <code>Q</code> again, <code>Ctrl+C</code>, <code>Escape</code>, and other combinations of keys. Nothing works. I need to close the terminal and open a new one to be able to issue new commands.</p>
","5","5561649","",""
"75688174","21356188","2023-03-09 17:36:47","0","36","<git><timestamp><git-commit><git-log>","In what order does `git log` show commits with same timestamp?","<p>Look at this:</p>
<pre><code>$ git log --oneline --graph
*   c3f035c (HEAD -&gt; master) added files
|\  
| * df07f9e (alt) Add Z
| * 85d52b4 Add Y
| * cb54ba0 Add X
* | 0ee077f Add E
* | d968ccf Add D
* | b0777d7 Add C
|/  
* a0be85a Add B
* bb35288 Add A
</code></pre>
<p>^ That shows them in the order that they were committed.</p>
<p>But without --graph, the output is so confusing:</p>
<pre><code>$ git log --oneline
c3f035c (HEAD -&gt; master) added files
df07f9e (alt) Add Z
85d52b4 Add Y
cb54ba0 Add X
0ee077f Add E
a0be85a Add B
d968ccf Add D
bb35288 Add A
b0777d7 Add C
</code></pre>
<p>Why does it show C last? And A and B apart from each other?</p>
<p>the git log man page says that --graph implies --topo-order which makes it print all children before any parents, which is what i understand.</p>
<p>It also says that the default is reverse chronological order, so the commits are shown in the order that they happened, but C wasnt commited before A, how could that even be possible?</p>
<p>Could the problem be that A..E all have the same commit timestamp?
(CommitDate: Thu Mar 9 19:15:54 2023 +0200)</p>
","1","21356188","",""
"75949450","2437508","2023-04-06 12:21:49","0","24","<git><git-log><git-blame><git-history>","git - how can I _copy_ a file and still be able to use the original history when blaming?","<p>How can I create a <em>copy</em> of a file and make it so that git <em>understands</em> where it is coming from? If I just do a copy and add it to the branch, git is not able to figure it out:</p>
<pre><code>$ git log --oneline --graph --name-status master
* 70f03aa (master) COpying file straight
| A     new_file.txt
* efc04f3 (first) First commit for file
  A     hello_world.txt
$ git diff master:new_file.txt master:hello_world.txt 
$ git blame -s master -- hello_world.txt
^efc04f3 1) I am here
^efc04f3 2) 
^efc04f3 3) Yes I am
$ git blame -s master -- new_file.txt
70f03aab 1) I am here
70f03aab 2) 
70f03aab 3) Yes I am
$ git blame -s --follow master -- new_file.txt
70f03aab 1) I am here
70f03aab 2) 
70f03aab 3) Yes I am
</code></pre>
","2","2437508","",""
"76120184","140750","2023-04-27 12:04:03","1","72","<git><git-log><git-notes>","Remove trailing newline from %N format specifier in git-log","<p>Is it possible to easily trim the newline when displaying a note with %N with <code>git log</code>?</p>
<p>I would like to include metadata about a commit by adding it with git-notes and viewing it with something like:</p>
<pre><code>git log --format=format:'%h [%N] %an %s %D'
</code></pre>
<p>This seems much cleaner than creating commit messages with meta-data prefixed as is common practice these days, but it seems that there is always a trailing newline on the note.</p>
<p>Any suggestions on how to easily remove it without filtering through external tools?</p>
","3","140750","",""
"21941714","200985","2014-02-21 17:55:08","1","212","<git><version-control><commit><git-svn><git-log>","git-svn -- Why are other branches' commits mixed in with trunk commits on master?","<p>I'm tracking a svn repository using git. A merge was done on 2014-01-09 (producing commit <code>A</code>) and another on 2014-02-12 (producing commit <code>B</code>). When I <code>git checkout master; git log</code>, I see the commits for the merges, but I also see, for instance, a commit on 2014-02-04 (<code>C</code>) made against a branch (which was merged as part of <code>B</code>).</p>

<p><strong>Why would a commit made against a branch show up when running <code>git log</code> on trunk ?</strong></p>

<p>I discovered this while trying to rewind my master and branches to a particular date in time to try to execute merge <code>B</code> again to see what conflicts exist. I had assumed that I could <code>git checkout master; git reset --hard B^; git merge branch;</code>, but that didn't work, then I saw these extra commits from branches in my trunk log and got confused.</p>

<p>Any help you can offer on the subject will be much appreciated!</p>
","0","200985","",""
"25573773","473792","2014-08-29 18:01:06","4","271","<git><git-log>","git log doesn't work with both the --graph option and the --since/--until options","<p>I'm exploring a git repository (specifically, <a href=""https://github.com/voldemort/voldemort"" rel=""nofollow"">Voldemort</a>).</p>

<p>When I run <code>git log</code> with the <code>--graph option</code>, I get some useful information:</p>

<pre><code>computer:voldemort kevin$ git log --graph
* commit 3e16d366e6ae473153e7a1d99e62db96dc7b6c1b
| Author: Arunachalam Thirupathi &lt;arunachalam.t@gmail.com&gt;
| Date:   Thu Aug 28 15:48:01 2014 -0700
| 
|     Merge Read and Write Quota
|     
|     Combined GET and GETALL to GET
|     Combined PUT and DELETE to PUT
|     It would be cleaner if we rename the new GET to READ and PUT to WRITE
|     But it might break the backward compatibility so leaving it like this
|     for now.
|    
*   commit d5c048b3611ccac863b09f1c1433d0026748e77a
|\  Merge: c080cfc d7d7349
&lt;!-- etc --&gt;
</code></pre>

<p>When I run <code>git log</code> with the <code>--since</code> and <code>--until</code> options, it also works:</p>

<pre><code>computer:voldemort kevin$ git log --since=2009-12-16 --until=2009-12-17
commit ae6983f377733153bd9c720019a4c72bafa7318a
Author: Alex Feinberg &lt;alex@strlen.net&gt;
Date:   Wed Dec 16 20:16:22 2009 -0800

    Rewriting the ec2 gossip test.

commit 6af8f35157f535a7cc27633599c635b96fe594e3
Merge: d4fdede 72ef048
Author: Alex Feinberg &lt;alex@strlen.net&gt;
Date:   Wed Dec 16 18:24:06 2009 -0800

    Merge branch 'rebalancing' of git://github.com/bbansal/voldemort into rebalancing
&lt;!-- etc --&gt;
</code></pre>

<p>However, when I run <code>git log</code> with all three options at once, I get no output:</p>

<pre><code>computer:voldemort kevin$ git log --graph --since=2009-12-16 --until=2009-12-17
computer:voldemort kevin$ 
</code></pre>

<p>Switching the order the options appear in doesn't help:</p>

<pre><code>computer:voldemort kevin$ git log --since=2009-12-16 --until=2009-12-17 --graph
computer:voldemort kevin$ 
</code></pre>

<p>How can I get this to work? The information depicted by the <code>--graph</code> option is what I really want to see - I want to be able to clearly tell when branches diverge and merge, so just looking over the data without the <code>--graph</code> option isn't suitable for me without a good replacement.</p>
","10","473792","0","0"
"25584959","1325279","2014-08-30 17:17:54","6","882","<regex><git><git-log>","git log suppress refs matching specified pattern","<p>I regularly use the following <code>git-log</code> command:</p>
<pre><code>git log --oneline --graph --decorate --all
</code></pre>
<p>The command is perfect for me, with one exception. I maintain a set of <code>refs</code> in <code>refs/arch/</code> that I want to keep around (&quot;arch&quot; stands for &quot;archive&quot;), but I do not want to see them every time I look at my git log.  I don't mind them showing up if they are an ancestor of an existing <code>branch</code> or <code>tag</code>, but I really do not want to see series of commits that <em>would not otherwise</em> show up in the git log but for the fact that they are in the commit history of a given <code>refs/arch/*</code> <code>ref</code>.</p>
<p>For example, in the image below, the left-hand side is an illustration of what I see currently when I run <code>git log --oneline --graph --decorate --all</code>.  As you can see, the commit referred to by <code>refs/arch/2</code> would not show up in the log if that <code>ref</code> didn't exist. (Assume there are no <code>refs</code> that are <em>not</em> shown in the left-hand side image.) Now, the right-hand side is an illustration of two alternative log graphs, either of which would be perfectly fine.  I don't mind seeing anything matching <code>refs/arch/*</code> so long as it is in the commit history of a <code>branch</code> or <code>tag</code>. But, in the image below, I definitely do not want to see the commit referred to by <code>refs/arch/2</code>.</p>
<p><img src=""https://i.stack.imgur.com/DdeSC.png"" alt=""Illustration of question"" /></p>
<p>How can my <code>git-log</code> command be modified to suppress <code>refs/arch/*</code> in either of the senses depicted in the illustration?</p>
","6","1325279","0","0"
"25608809","3997651","2014-09-01 15:13:54","41","17304","<git><git-diff><git-log><git-show>","git log -p vs. git show vs. git diff","<p>How are the commands <code>git log -p</code>, <code>git show</code>, and <code>git diff</code> related and why would one be used over another? </p>

<p>Given a repo with the following 4 commits:</p>

<blockquote>
  <p>commitd - last commit<br>
  commitc<br>
  commitb<br>
  coomita - initial commit</p>
</blockquote>

<p>What are the differences between the following git commands?:</p>

<pre><code>git log -p commitb commitd  
git show commitb commitd  
git diff commitb commitd  

git log -p commitd commitb  
git show commitd commitb  
git diff commitd commitb  

git log -p commitb..commitd  
git show commitb..commitd  
git diff commitb..commitd

git log -p commitd..commitb  
git show commitd..commitb  
git diff commitd..commitb

git log -p commitb...commitd  
git show commitb...commitd  
git diff commitb...commitd

git log -p commitd...commitb  
git show commitd...commitb  
git diff commitd...commitb
</code></pre>
","3","3997651","0","0"
"8401654","993563","2011-12-06 14:38:30","2","164","<git><git-log>","altering git commit history but keeping the changes in ","<p>How can I alter/delete commit history?</p>

<p>I have been working on a project from my home computer, where git config user.name was different than the one at office. 
I do not want the nicks to mingle. 
I have already pushed the code to the official repository. </p>

<p>In the commit history as of now, I have the logs as:
committed by ""my_home_nick""</p>

<p>But I want all of the commit messages to appear as:
committed by ""my_office_nick""</p>

<p>Is there anyway of doing it?</p>

<p>In short say there are logs: 
<strong>committed by x</strong></p>

<p>I want that to change to
<strong>committed by y</strong></p>
","1","993563","",""
"8411686","289715","2011-12-07 07:16:16","6","1437","<git><git-log>","What is the difference between ""git whatchanged -- filename"" and ""git rev-list -- filename""","<p>What is the difference between the 2 commands below. I see different outputs.<br>
Both are run from a clone having a single branch.</p>

<pre><code>git whatchanged -m -- foo.c

git rev-list --reverse --all -- foo.c
</code></pre>
","0","289715","0","0"
"8414940","289715","2011-12-07 11:58:35","1","444","<git><git-log>","git log and git whatchanged allowing duplicate commits","<p>The git log and git whatchanged shows 2 commits, but both have same lines added, so where was it removed inbetween so it allwed adding same changes again?</p>

<p>I tried the below command, how can there be 2 commits having the same 2 lines added, when there is not a single commit inbetween which show the lines as removed. How to i find what happened to this file, inbetween these 2 commit?</p>

<p><strong>git log --stat --follow -p at_Objects/AtResctrCase.cpp</strong></p>

<p>commit 914f8e87cb88e2923ed089a579d69cfa21ae0bc4</p>

<p>at_Objects/AtResctrCase.cpp | 2 ++</p>

<p>1 files changed, 2 insertions(+), 0 deletions(-)</p>

<pre><code> seller_bid_amount.clear();
 //F 27116
 auction_items.clear();
    +        //F-41959
    +        store_id.clear();
</code></pre>

<p>commit 6fe48ea09abae01a9bfea37e6ccf8e6c6fb360c2</p>

<p>at_Objects/AtResctrCase.cpp | 2 ++</p>

<p>1 files changed, 2 insertions(+), 0 deletions(-)</p>

<pre><code> auction_items.clear();
    //F-39023
    is_acm_case = false;
    +       //F-41959
    +        store_id.clear();
</code></pre>

<p><strong>git diff 6fe48ea09abae01a9bfea37e6ccf8e6c6fb360c2^..914f8e87cb88e2923ed089a579d69cfa21ae0bc4 -- at_Objects/AtResctrCase.cpp</strong></p>

<pre><code>diff --git a/at_Objects/AtResctrCase.cpp b/at_Objects/AtResctrCase.cpp
index 91fe41a..878d184 100644
--- a/at_Objects/AtResctrCase.cpp
+++ b/at_Objects/AtResctrCase.cpp
@@ -32,4 +32,6 @@ void AtResctrCase::clear()
     auction_items.clear();
        //F-39023
        is_acm_case = false;
+        //F-41959
+        store_id.clear();
 }
</code></pre>

<p>Doing a ""git log"" i found a few commits inbetween and checked whether this file was modified in any of the commit. in the order of Recent to oldest. Found the commit where the line was removed. b4eec3024a18bd502735d88c31891eea646d3356 Merge: 9a74a46 66cc3f1. But why it should be removed when no other commit inbetween modified this file? Did the automerge remove the line? if this file was removed in the merge commit, why it didnt show up in 
""git log --stat --follow -p at_Objects/AtResctrCase.cpp"" OR ""git diff"". Any suggestions much appreciated.</p>

<pre><code>$ git show -m --name-status 914f8e87cb88e2923ed089a579d69cfa21ae0bc4 | grep AtResctrCase.cpp 
M       at_Objects/AtResctrCase.cpp
$ git show -m --name-status 914f8e87cb88e2923ed089a579d69cfa21ae0bc4:at_Objects/AtResctrCase.cpp | grep F-41959
        //F-41959
</code></pre>

<p><strong>In the above commit the line was manually re-added.</strong>    </p>

<pre><code>$ git show -m --name-status 62a3731fbc1d008342ac72614faaf7fd9e7e312b | grep AtResctrCase.cpp 
$ git show -m --name-status 8a8de0663381f70677d6685d4ae214becd1f4310 | grep AtResctrCase.cpp 

$ git show -m --name-status **b4eec3024a18bd502735d88c31891eea646d3356** | grep AtResctrCase.cpp 
M       at_Objects/AtResctrCase.cpp
$ git show -m --name-status b4eec3024a18bd502735d88c31891eea646d3356:at_Objects/AtResctrCase.cpp | grep F-41959
</code></pre>

<p><strong>The line F-41959 has been removed here.</strong></p>

<p>commit <strong>b4eec3024a18bd502735d88c31891eea646d3356</strong>
Merge: <strong>9a74a46 66cc3f1</strong></p>

<pre><code>$ git show -m --name-status **9a74a46a47e425e35bc73a532a374ab5e67ec478** | grep AtResctrCase.cpp 
$ git show -m --name-status **66cc3f136c91c2fb7c71915a1dbd4fbf9facf761** | grep AtResctrCase.cpp

$ git show -m --name-status 50b5cfac734f3a4231e60144d6223d68412900b5 | grep AtResctrCase.cpp
M       at_Objects/AtResctrCase.cpp
$ git show -m --name-status 50b5cfac734f3a4231e60144d6223d68412900b5:at_Objects/AtResctrCase.cpp | grep F-41959
        //F-41959
</code></pre>

<p><strong>The above commit is where the lines were initially added</strong></p>
","6","289715","",""
"27313309","1418643","2014-12-05 10:03:12","61","37612","<git><git-log>","List git commits to master branch between two dates","<p>How can i get a list of all the git commits done to the master branch between 2014-01-01 and 2014-06-30?</p>

<p>I know <code>git log</code> will give me roughly this format (repeated for all commits):</p>

<pre><code>commit &lt;hash&gt;
author: &lt;author name&gt;
date: &lt;date&gt;
&lt;comment&gt;
</code></pre>

<p>But how can it be limited to selected dates and a one line per commit format?</p>

<pre><code>&lt;hash&gt; &lt;author&gt; &lt;date&gt;
&lt;hash&gt; &lt;author&gt; &lt;date&gt;
</code></pre>
","1","1418643","0","0"
"27324942","3987673","2014-12-05 21:27:11","-2","274","<git><git-log><bitbucket-server>","How can I track down a user that deleted all my branches in git","<p>We are using Git and Stash at my firm and it looks like someone deleted all the branches but master.</p>

<p>Can someone please tell me how to track down which users did it? Also, how to restore the data (if it can be restored)?</p>
","0","3987673","",""
"63558133","2192903","2020-08-24 09:21:19","4","1178","<git><git-log>","git log origin/develop gives ""fatal: ambiguous argument""","<p><strong>Context</strong>: I am making a tool to analyze differences between 2 branches. I would like to watch the history of commits on <code>origin/develop</code> and <code>origin/release</code>. As I need the history only, I cloned the project with only the history (<code>git clone --bare</code>)</p>
<p>After a <code>git fetch</code>, I would like to see the latest commits on release and develop without having to <code>git merge origin/develop|release</code> on each branch. So I tried to just <code>git log origin/develop [... format options]</code>.</p>
<p>On some projects, it works as expected. But on a particular project, I get this error :</p>
<pre><code>$ git log origin/develop                                                                                                                                                                                                                 master * ] 11:01 
fatal: ambiguous argument 'origin/develop': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'
</code></pre>
<p>If I try <code>git remote -v</code>, I can see that <code>origin</code> is correctly defined. How could <code>origin/develop</code> not be a valid revision?</p>
","0","2192903","",""
"45826892","275088","2017-08-22 20:59:59","2","154","<git><git-log><konsole>","How to exclude a color from git's graphColors?","<p>I'd like to customize the colors used in <code>git log --graph</code> via <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-config.html"" rel=""nofollow noreferrer""><code>log.graphColors</code></a>. Basically, I need to keep the default colors, just exclude the blue color as it's barely readable in my terminal. What would be the cleanest way to do that?</p>
","0","275088","",""
"45831341","2608566","2017-08-23 05:32:52","3","745","<git><git-log>","Use gitgraph for existing git project","<p>I want to view my commits on git project graphically, so I downloaded the <code>GitGraph.js</code> package from <a href=""https://gitgraphjs.com/"" rel=""nofollow noreferrer"">gitgraphjs.com</a>.</p>
<p>How can I view my repository graphically using <code>GitGraph.js</code>?</p>
","2","2608566","0","0"
"9823923","47552","2012-03-22 14:08:06","12","4442","<git><wildcard><git-log>","Using path wildcards in git log","<p>I have a file down deep in my git tree:</p>

<pre><code>$ git ls-files | grep /Expression.java
sm/src/main/java/cl/utilities/sm/Expression.java
</code></pre>

<p>I'd like to get a log of its activity without having to type the whole path.  Basically I want this output:</p>

<pre><code>$ git log --oneline -2 sm/src/main/java/cl/utilities/sm/Expression.java
2718cdc cleaned up some warnings
f30cf15 Added missing @Overrides
</code></pre>

<p>... but without having to type <code>sm/src/main/java/cl/utilities/sm</code>.  I tried lots of things, but none of them worked:</p>

<pre><code>$ git log -- \*/Expression.java
$ git log -- \*Expression.java
$ git log -- \*\*/Expression.java
$ git log -- '*/Expression.java'
$ git log -- '**/Expression.java'
</code></pre>
","2","47552","0","0"
"65386246","13718135","2020-12-21 00:40:22","-1","96","<json><git><pipe><git-log>","git log pretty format for a certain branch","<p>I am trying to use the git log pretty format command to input the log into a json file. Currently I am using this command to get the specific git attributes:</p>
<pre><code>git log --pretty=&quot;format:{commit:%h,%n merge:%p,%n author:%an,%n title:%s,%n body:%b,%n}&quot;&gt;git_log.json
</code></pre>
<p>The problem with this command is that it gets the logs of all the branches in the system and inputs into the json. I only want to use this command to input logs of a certain branch that I can input somehow.</p>
<p>I tried checking out the certain branch that I want to get the log off and then used that command but it did not work as it still showed logs of all the existing branches. This was my failed attemmpt in the cmd line:</p>
<pre><code>git checkout robotics/ashish_c/infrastructure
git fetch

git log --pretty=&quot;format:{commit:%h,%n merge:%p,%n author:%an,%n title:%s,%n body:%b,%n}&quot;&gt;git_log.json
</code></pre>
<p>But it gave me the log files of other branches as well.
How do I only get the pretty format log file of only the branch robotics/ashish_c/infrastructure ?</p>
","0","13718135","",""
"28610078","5809","2015-02-19 15:22:47","2","122","<git><git-log>","""git log -- file_name"" shows less than ""git log --first-parent -- file_name""","<p>After doing a merge where a file had been deleted, ""git log -- file_name"" did not show the commit from the current branch. However, the commit shows up if I do ""git log"" or ""git log --first-parent -- file_name"". Why? </p>

<p>Steps to recreate:</p>

<pre><code>git init
echo ""First"" &gt; file1.txt
git add file1.txt &amp;&amp; git commit -m ""Adding file1.txt""
echo ""Second"" &gt; file2.txt
git add file2.txt &amp;&amp; git commit -m ""Adding file2.txt""
git checkout -b side_branch
echo ""... and third"" &gt;&gt; file1.txt  # modifying file1.txt in side_branch
git commit -am ""*** Adding third to file1.txt in side_branch""
git checkout master
git rm file1.txt &amp;&amp; git commit -m ""Removing file1.txt in master""
git checkout side_branch
git merge master
git rm file1.txt &amp;&amp; git commit --no-edit

git log -- file1.txt                 # Doesn't show commit with *** 
git log                              # Shows commit with *** 
git log --first-parent -- file1.txt  # Shows commit with *** 
git log --follow -- file1.txt        # Shows commit with *** 
</code></pre>

<p>I thought that that the --first-parent version of the log command would show a subset of the commits listed by the first log command, but it doesn't.</p>
","0","5809","0","0"
"10680703","1407208","2012-05-21 06:57:10","2","224","<git><git-pull><git-log>","Can git tell me when a repo was pulled from origin","<p>I'm trying to find out exactly when some part of a site went live by looking at the git logs.</p>

<p>My setup is like this:<br>
- I have a local git repo where I'm doing development and testing and committing changes<br>
- I push changes to a repo on my server<br>
- when I am happy with the changes I pull them into a second repo on the same server which makes the changes live.</p>

<p>So I make changes, <code>git commit</code>, <code>git push</code>. Then ssh into the web server and <code>git pull</code> to deploy.</p>

<p>Using <code>git log</code> I can see when I made which commits but I can't work out how to tell when I did the <code>git pull</code>. Is this possible?</p>
","5","1407208","0","0"
"11563346","290085","2012-07-19 14:45:25","8","9756","<git><undo><git-merge><git-log><git-revert>","How to identify the right commit hash for git-revert to undo a pushed merge?","<p>I merged the beta branch into the master branch.  I pushed to origin.  I now want master to be as it was prior to the merger both locally and remotely.</p>

<p>A good answer for <a href=""https://stackoverflow.com/a/6217372/290085"">undoing a merge that was already pushed</a> suggests </p>

<pre><code>git revert -m 1 commit_hash
</code></pre>

<p>If this is indeed the way to go, how can I determine <i>commit_hash</i>?  I unsuccessfully tried the hash returned by <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-merge-base.html"" rel=""nofollow noreferrer"">merge-base</a>:</p>

<pre><code>$ git merge-base --all master beta
1f4b949b7ef97abf913ae672e3acd0907abfac1b
$ git revert -m 1 1f4b949b7ef97abf913ae672e3acd0907abfac1b
error: Mainline was specified but commit 1f4b949b7ef97abf913ae672e3acd0907abfac1b is not a merge.
fatal: revert failed
</code></pre>

<p>I've examined both git-log and gitk renditions of the branches, but they're very long, and I am uncertain enough of my interpretation to feel I should seek assistance before making a perhaps bigger mess.  Beta was derived from v2 which was derived from master.  There have been some mergers from master into v2 and beta along the way as I've kept the new branches up-to-date with master.  The merger in the direction from beta into master was a mistake I wish to correct.</p>

<p>Once I do determine the merge point, if I find any commits made on master after the merger that really should be on the beta branch, what's the best way to move them over? </p>
","1","290085","",""
"29416378","878514","2015-04-02 15:10:45","2","1555","<git><git-log><git-show>","Difference between git show and git log when displaying commit ids","<p>I need to get list of commit ids between two known commits. I used the following command:</p>

<pre><code>git show --format=format:%H --quiet commitA...commitB
</code></pre>

<p>It works flawlessly until there is a merge commit. I.e.:</p>

<pre><code>*   c36a37b
|\
| * 92187d9
* | e24d2c4
|/
* eef755e
</code></pre>

<p>The output is as follows:</p>

<pre><code>$ git show --format=format:%H --quiet c36a37b...eef755e
c36a37b80caf2bae7b4833617443f4dfea8d8816

e24d2c4292baef4106976373ff3d01341834648d
92187d9a1002027c7d99824f2561467692bfd6b3
</code></pre>

<p>When I change the <code>show</code> command and use <code>log</code> instead:</p>

<pre><code>$ git log --format=format:%H --quiet c36a37b...eef755e
c36a37b80caf2bae7b4833617443f4dfea8d8816
e24d2c4292baef4106976373ff3d01341834648d
92187d9a1002027c7d99824f2561467692bfd6b3
</code></pre>

<p>Notice there is no empty line after the first commit. I'm not fanatic about using <code>git show</code> over <code>git log</code> - I event don't remember where I got this idea from. But this extra empty line caused my program failure and I wonder if it has any special meaning.</p>

<p>Git version 1.9.5.</p>
","2","878514","0","0"
"29423079","1312080","2015-04-02 21:50:25","0","379","<git><git-log>","Is it possible to enumerate commits in git log?","<p>I frequently need to <a href=""http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html"" rel=""nofollow""><code>squash</code></a> many small commits into a big one to merge from a development feature branch into the <code>master</code>.  So I do</p>

<pre><code>git rebase -i HEAD~X
</code></pre>

<p>Where X is the number of the latest commits to squash.  However, as I am sometimes dealing with literally dozens of commits, I must count them manually in <code>git log</code>, which I am trying to avoid.</p>

<p>Is there a way to produce a git log-like report that will, in addition to showing commit SHAs, also enumerate them 0-n ?</p>
","3","1312080","",""
"11676210","823118","2012-07-26 18:58:22","67","27732","<git><git-merge><git-log>","git log the difference between 1 branch from another","<p>I have 2 branches A and B.</p>

<p>Whenever I run a build, Branch A gets merged into Branch B. I want to be able to email out all the updates made in A, since the last time the build was ran.  How can I use <code>git log</code> to be able to copy all the commits made in A since the last A -> B merge?</p>
","0","823118","0","0"
"26735697","3707996","2014-11-04 12:55:55","0","172","<git><git-log>","Logging git commits till a commit id when pulled with git pull --rebase","<p>Lets Suppose the git log has the following commits</p>

<pre><code>commit15
commit14
commit13
commit12
commit11
commit10
.
.
.
commit1
</code></pre>

<p>I tried saving the git log till commit 14 to a file by</p>

<pre><code>git log --pretty=format:'%h|%H|%an|%ai|%s' $commitid | grep -v ""Merge branch 'master' of"" &gt; 'path to log file which should contain git log till that Commitid'
</code></pre>

<p>This is working fine except for one case,i.e.</p>

<p>When commit12 and commit13 were pushed after pulling with <code>git pull --rebase</code>,when i try to save the git log till commit14 using <code>git log commit14</code> i cant see the commits12 and commits13 but when i try to log till commit15 using <code>git log commit15</code> the commits 12 and 13 are listed under commit14</p>

<p>I understand the problem is with --rebase,Is there any way i can log the commits till a particular id even it has commits below it which have been rebased onto the top of it? (I saw the git repo, commit12 and commit13 are listed under commit14)</p>
","7","3707996","",""
"26762768","10608","2014-11-05 16:55:51","0","49","<git><git-log>","Can git track that certain lines were copied from another file?","<p>First, I have file abc.java, and it has 10 lines of code. Then, in the same commit, I remove those lines from abc.java and put them in xyz.java. Is there a way that <code>git blame</code> or <code>git log</code> can follow the history of those lines across files?</p>

<p>Here is what I'm wanting. I want to do <code>git log -L100,110:xyz.java</code> (<a href=""http://git-scm.com/docs/git-log#_options"" rel=""nofollow"">see -L documentation</a>), and not only see all commits touching those 10 lines in xyz.java, but also all the commits that changed those lines when they were in abc.java.</p>
","0","10608","",""
"57938466","4820101","2019-09-14 19:07:49","2","1095","<git><git-log><git-history-graph>","git: what is difference between tilde (~) and caret (^)","<p>Below is the git output for show-rev</p>

<pre><code>$ git name-rev  --all

2651919f941c11581c794b40aadb2028c4f52ab4 joincolumn_issue
2617f2a1410ce0ec8ea268bbb073008b73490e78 master~2
292def505dd3cdbfd9ac974396775683b5f4c288 ls
0ec9116840a3f21c0b800617c29b7ddab5fda928 joincolumn_issue~2
ee9bb706c8fcc329fac4acf69ad6b684f1069170 master~1
d56a6751771b1f62d9ceb0bcce9a2391c004ee44 master^2
3d80a12ed375c6a9572cde39b5be0722c8cb6439 joincolumn_issue~1
df1834dbe560c2c95c8abaeec494eb1767b96a1e master
</code></pre>

<p>As you can see there are lines with <strong><code>master^2</code> and <code>master~2</code></strong>
So, wondering what is the difference between these two and also the output is out of chronological order.</p>

<p>Further the git graph shows as below</p>

<pre><code>$ git log --all --oneline --graph

* 2651919 (origin/joincolumn_issue, joincolumn_issue) changing to @JoinColumn(name=""country_nm"")
* 3d80a12 hibernate ignoring joinColumn value
* 0ec9116 changing name in joinColumn is breaking
| * 292def5 (origin/mappedBy, mappedBy, ls) OneToMany using mappedBy
|/
*   df1834d (HEAD -&gt; master, origin/master) Merge branch 'master' of https://github.com/samshers/graphql-hibernate
|\
| * d56a675 fixed country null issue
* | ee9bb70 fixed country null issue
|/
* 2617f2a hibernate cascade error issue. country field in state table set to null
</code></pre>
","2","4820101","",""
"57963516","6912352","2019-09-16 19:48:09","0","222","<git><graph><networkx><git-log>","Extract git graph for processing","<p>Given a Github repository, I need to extract the graph representing its commits, branches etc. so that I can process it with scripts.<br>
I know that once cloned the repository I can use the log command like: </p>

<pre><code>git log --graph --abbrev-commit --decorate --date=relative --all  
</code></pre>

<p>but its output cannot be processed (or at least easily).<br>
After many useless attempts, I found out this tool (<a href=""https://github.com/blegat/git-dot"" rel=""nofollow noreferrer"">git-dot</a>) that generates a .dot file representing the graph of the given repository; then it has been easy to work with the graph since I have been able to import it reading the .dot file in Networkx. However, I think that such tool doesn't work very well as I have less commits than the number written in the Github repository, too many cycles and so on.</p>

<p>My question is about other tools or a representation of log command giving me a graph that I can process with my scripts. I hope you can help me.</p>
","0","6912352","",""
"20015808","170803","2013-11-16 07:06:24","10","1216","<git><version-control><git-log>","Show all commits in a git branch since original branching point from master","<p>I'm looking for a way to view all commits on active branch since branching point (and including it) and hopefully since branching from master. </p>

<p>For example situation like:</p>

<pre><code>A-B-C-D (master)
   \
    E-F (branch A)
</code></pre>

<p>I want to get commits F, E and B while F is the HEAD. </p>

<p>And for </p>

<pre><code>A-B-C-D   (master)
   \
    E-F   (branch B)
       \
        G (branch C)
</code></pre>

<p>I want to get commits G, F, E, B in case G is current HEAD. Displaying this information with --graph option would be also great.</p>

<p>For now I have come up with</p>

<pre><code>git log master^..HEAD
</code></pre>

<p>But it seems to be displaying too much information (like commits from other branches).
Thanks for your help!</p>
","3","170803","0","0"
"39427282","3779","2016-09-10 14:57:00","6","195","<git><travis-ci><pull-request><git-log>","Why doesn't the Travis git ref match my pull request sometimes?","<p>I have a Travis-CI script that <a href=""https://github.com/Elgg/Elgg/blob/2.x/.scripts/travis/check_commit_msgs.sh#L3"" rel=""nofollow"">checks the commit messages of pull requests</a>. GitHub gives it a range of commits and it uses <code>git log --format=online ""&lt;lastref&gt;..&lt;firstref&gt;""</code> to build the list of SHAs to check.</p>

<p>This works great most of the time, but occasionally this happens:</p>

<p>My <a href=""https://github.com/Elgg/Elgg/pull/10184"" rel=""nofollow"">pull request</a> (merging branch 2.2 into 2.x, several commits) yields this command on Travis:</p>

<pre><code>git log --format=oneline b5d12909dacd80d21c4e4f4ca6d5683d6e547f9e..b349be9418371c1f694dabeccbce0e946fde3a0a
</code></pre>

<p>Locally, this works as expected. I get the commits in the PR. On Travis, though, the b5d129 commit does not appear, and so it dumps out <a href=""https://travis-ci.org/Elgg/Elgg/jobs/158901338#L400"" rel=""nofollow""><strong>every commit back to the beginning of the project</strong></a>.</p>

<p>What's going on here?</p>

<p><strong>Update:</strong> I made another merge PR, this time with Travis's default git clone depth of 50, but also not including a new commit on 2.x. In any case, the build for this new PR <a href=""https://travis-ci.org/Elgg/Elgg/jobs/159131384#L395"" rel=""nofollow"">worked correctly</a>. I'm still stumped. Clone depth <em>shouldn't</em> have any effect because the checkout would fail if it didn't have the necessary commits.</p>
","0","3779","",""
"39478505","5572731","2016-09-13 20:30:42","0","442","<git><powershell><git-log>","How to count multiple lines from git log in PowerShell?","<p><strong>PROBLEM</strong>  </p>

<pre><code>git log --pretty=oneline $branch...$version
</code></pre>

<p>Allows me to determine how many commits are between the specified branch and tag. Each commit is printed to the console window on a different line, and starts with 40 characters of that commit's SHA and is followed by a brief description.</p>

<p>Using PowerShell, I would like to take the count of all these commits and assign it to a variable. I don't want to output this data to a file.</p>

<p>My assumption is that a large regex would be the best option, but I'm thinking that there must be an easier solution.</p>

<p><strong>QUESTION</strong><br>
Is there an easier way to find the count of multiple lines outputted to the console? </p>

<p>Also, is there a way to get around the buffer size when handling the log data without adjusting the buffer-size of the console window? Or is this a factor I will need to worry about at all? (<em>when handling a large amount of commits</em>)</p>
","0","5572731","",""
"21121576","1015595","2014-01-14 18:51:27","0","331","<git><bitbucket><git-commit><git-log><git-squash>","How do I fix this git commit log?","<p>I have a repository on Bitbucket. I kinda screwed up the commit log when I tried to squash the commits <code>c265825</code> and <code>0a1837e</code>:</p>

<p><img src=""https://i.stack.imgur.com/FdZs4.png"" alt=""enter image description here""></p>

<p>Trying to squash these commits resulted in <code>0942142</code>, which is basically empty. What I mean is if I try and view that commit it shows no files changed, which could be normal for a ""merge"" commit - I don't know.</p>

<p>Obviously I need to fix things like this before pushing to Bitbucket, but how can I fix it after the fact? I'd like to squash <code>0942142</code>, <code>c265825</code> and <code>0a1837e</code> if possible so it looks like a single commit called ""Removed unused files.""</p>

<p>PS: This is a private repo (for now), so nobody has pulled any of these changes (yet).</p>

<p><strong>Edit:</strong> TheBuzzSaw's answer below is correct for squashing every commit since <code>0a1837e</code>. I wanted to just squash those three commits and keep the rest of the history, however (the screenshot is a mockup - not representative of actual changes). So I had to do this:</p>

<pre><code>git reset --hard HEAD~7
git cherry-pick -n 0a1837e..c265825
git cherry-pick -n -m 1 0942142
git commit -m ""Removed unused files""
git cherry-pick 8f8308b
git cherry-pick f7b14f5
git cherry-pick bb90ff9
git cherry-pick 976985d
git cherry-pick 6f4d0c2
</code></pre>

<p>Now my commit log is beautified:</p>

<p><img src=""https://i.stack.imgur.com/enfhY.png"" alt=""enter image description here""></p>
","0","1015595","",""
"2557564","215847","2010-04-01 01:10:11","22","10541","<git><git-log>","how do i identify files/directories that were added or removed in a git commit?","<p>I need to write a script that incrementally keeps track of files and directories added and removed from a git repo.  </p>

<p>I have tried to use:</p>

<pre><code>git log -n1 --pretty=""format:"" --name-only
</code></pre>

<p>But that only tells me which files were committed.  It does not specify if it was added or removed. </p>

<p>Any ideas? </p>
","0","215847","0","0"
"57941299","12068996","2019-09-15 05:03:00","4","1785","<git><version-control><git-log>","`git log -p`: showing diff or generating patch?","<p>When reading the documentation of git, I seemed to find a contradiction.</p>

<p>In <a href=""https://git-scm.com/docs/gittutorial#_viewing_project_history"" rel=""nofollow noreferrer"">this official tutorial of git</a>, <code>git log -p</code> is said to show the history of commits together with complete diff info. However, in <a href=""https://git-scm.com/docs/git-log#_generating_patches_with_p"" rel=""nofollow noreferrer"">the documentation of git-log</a>, the <code>-p</code> option is said to produce a patch file instead of directly output. Also, the description ""they do not produce the output described above"" is confusing, since the ""described above"" is very vague, at least for me.</p>

<p>Other than the section given above, I only find <a href=""https://git-scm.com/docs/git-log#Documentation/git-log.txt---full-diff"" rel=""nofollow noreferrer"">one other place</a> mentioning the <code>-p</code> option, which matches the description in the tutorial instead of the patch part. Also, when I run <code>git log -p</code> on my computer, its shows commit history together with diff info, and I  don't see any patch files generated. So are the two parts of the documentation contradictory? Or do I misunderstood the process of ""generating patch files""? Thank you!</p>
","2","12068996","0","0"
"39340232","5315079","2016-09-06 03:30:41","0","2109","<regex><git><bash><git-log>","git log regex search","<p>I just found out the differences between 
<code>
git log --all -G ""mystring""
</code>
and,
<code>
git log --all -S ""mystring""
</code>
as you can see <a href=""https://stackoverflow.com/questions/2928584/how-to-grep-search-committed-code-in-the-git-history/"">here</a>, for example.</p>

<p>But, I'd like to know if I can specify several regular expressions (a.k.a. regex) to <code>-G</code>, with something like:
<code>
git log --all -G ""str1"" --and -G ""str2""
</code></p>

<p>Of course, I can always wrap git commands inside python or bash scripts, but I'd like to know if using pure-git-commands, I can do this.</p>

<p>Thanks very much!!</p>
","1","5315079","",""
"39382953","2564826","2016-09-08 05:06:12","0","166","<git><git-log><git-fetch>","git: reviewing changes after 'git fetch'","<p>Following a git fetch, I'd like to review code changes that are introduced from upstream.</p>

<p>I can use <code>git log -p ..@{u}</code>, however the output will not include diffs of merge commits/merges of pull requests.</p>

<p>Is there a way to include those in the output, that will yield a comprehensive history of changes that occurred since I last pulled?</p>

<p>Thanks </p>
","0","2564826","0","0"
"39854111","1160022","2016-10-04 13:50:54","1","2563","<python><git-commit><git-log><gitpython>","Diff commit messages of two branches with gitpython","<p>At work, we have a workflow where each branch is ""named"" by date. During the week, at least once, the latest branch gets pushed to production. What we require now is the summary/commit messages of the changes between the latest branch in production vs the new branch via gitpython.</p>

<p>What I have tried to do:</p>

<pre><code>import git

g = git.Git(""pathToRepo"")
r = git.Repo(""pathToRepo"")
g.pull() # get latest

b1commits = r.git.log(""branch1"")
b2commits = r.git.log(""branch2"")
</code></pre>

<p>This give me all of the commit history from both branches but I can't figure out how to compare them to just get the newest commit messages.</p>

<p>Is this possible to do in gitPython? Or is there a better solution?</p>
","0","1160022","",""
"39926174","6368710","2016-10-07 21:38:45","2","1096","<git><git-log>","How I can get out from the 'git log' command process it and continue with other commands?","<p>When I call a <code>git log</code> I get some like the following, but I can't continue because end blocks my actions.</p>

<p><a href=""https://i.stack.imgur.com/KjYKy.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KjYKy.png"" alt=""Enter image description here""></a></p>
","0","6368710","",""
"58776646","438615","2019-11-09 05:16:04","3","225","<git><github><git-log>","""More content"" indicator for commit messages in git log --online?","<p>If you view commit history in Github, eg, it will indicate using ellipsis which commit message have additional lines of content beyond their subject line:</p>

<p><a href=""https://i.stack.imgur.com/tHbz5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tHbz5.png"" alt=""Github history""></a></p>

<p>When using:</p>

<pre><code>git log --oneline
</code></pre>

<p>in the terminal, is there any way to get a similar ""more content"" indicator?</p>
","0","438615","0","0"
"40430944","","2016-11-04 20:06:20","1","1214","<git><shell><teamcity><agent><git-log>","How do I get 'git log' in the terminal or using a shell script when not in a repository","<p>I have <strong>Teamcity build agent</strong>, where I need to extract the <code>git log</code> from a repository. The trouble is, when my shell script runs, it's not in git repository, so <code>git log</code> doesn't work out of the box.</p>

<p>Does anyone know how to achieve this.</p>

<p>I have search the documentation, but I can't seem to find any way of doing it.</p>

<p><strong>Problem solving so far</strong></p>

<ol>
<li><p>When Teamcity ""clones"" a project from Github on to the agent, it doesn't actually clone the whole thing. So the <code>working directory</code> is not a repository.</p></li>
<li><p>I do not have SSH access to github when running my shell script, which I need</p></li>
</ol>

<p>Thanks in advance.</p>

<p><strong>Solution</strong></p>

<p>See accepted answer below.</p>
","3","","0","0"
"21529590","999258","2014-02-03 14:13:50","1","219","<git><git-log>","Search through all git commits with a grep and then format the results","<p>How do I search through all git commits with a grep and then format the results with just the commit hash and the commit notes.</p>

<p>I have tried something like this.</p>

<pre><code>git log --pretty=format:%H %N --grep=mysearchtext
</code></pre>

<p>Not sure if I am missing some command pipes somewhere.</p>
","2","999258","",""
"40544753","6936103","2016-11-11 09:23:01","2","1087","<regex><git><git-log>","how to search git log without a certain commit","<p>Assume I have a branch master with 3 commits, the comments are t123, b1 and b12 separately.</p>

<pre><code>* b90b03f (HEAD -&gt; master) b12
* 27f7577 b1
* 7268b40 t123
</code></pre>

<p>And now, I want to use <code>git log --grep &lt;regex&gt;</code> to search the log log without t123.
The result I want is </p>

<pre><code>* b90b03f b12
* 27f7577 b1
</code></pre>

<p>So how do I use regex to meet the requirement?</p>
","1","6936103","0","0"
"12219604","709943","2012-08-31 16:57:46","37","31257","<git><git-log><git-tag>","List git tag names, dates and messages","<p>How do I list the tag name, tag date and tag message for all tags?</p>

<p>It seems that git's separation of display logic for commits through <code>git log</code> and tags through <code>git tag</code> makes it difficult to list the tag name, the tag's date and the tag message.</p>

<p>I can show the tag date, name and <em>commit message</em> using <code>git log --tags --show-notes --simplify-by-decoration --pretty=""format:%ai %d %s""</code></p>

<p>I inspected <a href=""http://opensource.apple.com/source/Git/Git-26/src/git-htmldocs/pretty-formats.txt"">http://opensource.apple.com/source/Git/Git-26/src/git-htmldocs/pretty-formats.txt</a> but didn't see any option to show tag message.</p>

<p>I can show the tag name and 5 lines of <em>tag message</em> using <code>git tag -n5</code>.</p>

<p>But to get all three pieces of info would appear to require gnarly scripting beyond my ability.</p>
","0","709943","0","0"
"57947283","4820101","2019-09-15 18:55:03","0","499","<git><git-branch><git-commit><git-log><git-history-graph>","git confusing graph. `master` branch seems to have two lines?","<p>On running <code>git log</code> i am seeing strange graph. I will explain it further.
Below is the output for git log with graph.</p>

<pre><code>$ git log --graph  --oneline
*   df1834d (HEAD -&gt; master, tag: r-0.1, origin/master) Merge branch 'master' of https://github.com/samshers/graphql-hibernate
|\
| * d56a675 fixed country null issue
* | ee9bb70 fixed country null issue
|/
* 2617f2a hibernate cascade error issue. country field in state table set to null
</code></pre>

<p>As you an see master has two separate branches in itself. To confirm this further, i ran </p>

<pre><code>$ git branch --contains ee9bb706c8fcc329fac4acf69ad6b684f1069170
  joincolumn_issue
  ls
  mappedBy
* master
</code></pre>

<p>And then</p>

<pre><code>$ git branch --contains d56a6751771b1f62d9ceb0bcce9a2391c004ee44
  joincolumn_issue
  ls
  mappedBy
* master
</code></pre>

<p><strong>So clearly these two commits are present on master - so then why are there two graphs.</strong> 
How can i know if <strong>changes</strong> both the commits are present on master. Or if only <strong>changes</strong> from one of them is actually present on the master, which one of the two?     </p>

<p><strong>Edit - following responses from RY and Mark</strong>
<a href=""https://i.stack.imgur.com/nYa1M.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nYa1M.png"" alt=""adding the graph screenshot""></a>   ( if color codes add any further meaning, please hint on that as well.)<br>
So, am further trying to understand why a commit (Y) is not based on previous commit (X) ( if X was committed before Y). 
The git log shows that both <code>d56a675</code> and <code>ee9bb70</code>  where committed at the same time. </p>

<pre><code>commit ee9bb706c8fcc329fac4acf69ad6b684f1069170
Author: itsvamshers &lt;itsvamshers@gmail.com&gt;
Date:   Mon Sep 9 17:24:01 2019 +0530

    fixed country null issue

commit d56a6751771b1f62d9ceb0bcce9a2391c004ee44
Author: itsvamshers &lt;itsvamshers@gmail.com&gt;
Date:   Mon Sep 9 17:24:01 2019 +0530

    fixed country null issue
</code></pre>

<p>But, on digging further the little difference can be seen..</p>

<pre><code>$ git show -s --format=""%ct"" d56a6751771b1f62d9ceb0bcce9a2391c004ee44
1568030041
</code></pre>

<p>and </p>

<pre><code>$  git show -s --format=""%ct""  ee9bb706c8fcc329fac4acf69ad6b684f1069170
1568031643
</code></pre>

<p>and this info should be enough for git to put the commits in right order. But if it is not, then I guess it is smarter and doing it for reason, just trying to understand the reason and the cause.</p>
","1","4820101","",""
"57948370","4820101","2019-09-15 21:42:27","0","39","<git><git-log><git-show>","Different time values from different git commands","<p>I am seeing that for a particular commit, git is giving different time stamp values for different commands.   </p>

<pre><code>$ git show -s --format=""%ci"" ee9bb
2019-09-09 17:50:43 +0530
</code></pre>

<p>The above command shows time value as <strong>17:50:43</strong></p>

<p>While the below commands show time value as <strong>17:24:01</strong></p>

<pre><code>$ git show -s  ee9bb
commit ee9bb706c8fcc329fac4acf69ad6b684f1069170
Author: itsvamshers &lt;itsvamshers@gmail.com&gt;
Date:   Mon Sep 9 17:24:01 2019 +0530

    fixed country null issue


$ git log ee9bb
commit ee9bb706c8fcc329fac4acf69ad6b684f1069170
Author: itsvamshers &lt;itsvamshers@gmail.com&gt;
Date:   Mon Sep 9 17:24:01 2019 +0530
</code></pre>

<p>Could anyone explain why this is the case. And which one should I consider.</p>
","0","4820101","0","0"
"57977347","1179925","2019-09-17 15:16:46","1","263","<git><git-log><git-lfs>","How to find commit at which file tracked by git lfs was deleted","<p>I'm trying to find commit at which some specific <code>*.npy</code> file was deleted.</p>

<p><code>git log --full-history  -- &lt;my_file&gt;</code> not showing anything</p>

<p><a href=""https://stackoverflow.com/questions/6839398/find-when-a-file-was-deleted-in-git"">Find when a file was deleted in Git</a></p>

<p>So I assume this file was added via git lfs.</p>

<p>How to find commit at which file tracked by git lfs was deleted?</p>
","0","1179925","0","0"
"12251186","1440858","2012-09-03 16:10:09","1","197","<git><git-log>","For git log, the difference between options of --follow and --find-renames","<p>Suppose I only need to work on a single file. From the git-log man page, it seems like I should use --follow. What confuses me is that for --find-renames, I can specify the threshold on the similarity index, while there is no such threshold for --follow. </p>

<p>My question is why I do not need to specify a threshold for --follow to find renaming?</p>

<p>Thanks</p>
","0","1440858","",""
"66288731","247243","2021-02-20 06:34:17","-1","223","<node.js><git><git-log>","How to build a list of all git commits on master?","<p>Given a git repository, I would like to list all of the commits on the branch <code>origin/master</code> by date along with their SHA values. What is the easiest way to achieve this?</p>
<p>My desired result is an array of objects in Node.js representing a git repository, containing commit data such as</p>
<pre class=""lang-js prettyprint-override""><code>    [
      {
        date: &quot;2020-02-02&quot;,
        sha: &quot;03ffd2d7c3c1fdcc86f947537c6f3afa209948dd&quot;,
      },
      {
        date: &quot;2019-03-13&quot;,
        sha: &quot;3a7dbc7e6ab332ebbca9a45c75bd608ddaa1ef95&quot;,
      },
      ...
    ]
</code></pre>
<p>or simply a comma-separated list such as</p>
<pre><code>2020-02-02
03ffd2d7c3c1fdcc86f947537c6f3afa209948dd
2019-03-13
3a7dbc7e6ab332ebbca9a45c75bd608ddaa1ef95
...
</code></pre>
","0","247243","",""
"58013885","4820101","2019-09-19 14:58:59","0","610","<git><git-log><git-reset>","Does git log pickup(show) commits associated with some branch or tag only?","<p>On running <code>git log --graph --oneline</code>, i see only commits(and there parent commits and there parent commits and so on) that are associated with some branch (local and origin) or tag.</p>
<p>That is if I reset on a branch to a previous commit and make a new commit, a new history line is created. Now if I merge the new local history line with origin, I see that the old history line is no more show in graph (unless the old history tip was tagged).</p>
<p>Even on querying for the entire repo logs seems to be not of help <code>git log --graph --oneline -all</code></p>
<p>So, wondering if git log / graph pickups(shows) commits associated with some branch or tag only ? Could someone confirm or correct.</p>
<p><strong>Edit</strong> - following answer from RomainValeri</p>
<p>From git docs:</p>
<blockquote>
<p>git-log - Show commit logs</p>
</blockquote>
<p>and from actual observation and also answer from - RomainValeri</p>
<blockquote>
<p>git log --graph --oneline --all</p>
<h1>outputs all branch/tag histories</h1>
</blockquote>
<p>So is there any way to see the log of every commit (including dangling commits i.e those not associated with any branch/tag ) either with git log or any other alternate command/tool.</p>
","0","4820101","0","0"
"58016135","2985129","2019-09-19 17:23:22","5","1185","<git><newline><git-log><format-string>","Format string for consistent separation between entries output by `git log --pretty`","<p>I am trying to develop a format string to pass to <code>git log --pretty</code> so that each log entry ends in a full commit message, yet each log entry is separated by <strong>exactly one</strong> empty line.  The problem is that some full commit messages end in a newline, and some do not.</p>

<p>For example, let's say I have two commits, <code>abc1234</code> and <code>def5678</code>, but only <code>abc1234</code> contains a newline at the end of the full commit message.  Outputting the raw commit contents on the command line would look something like this:</p>

<pre><code>[prompt]$ git cat-file commit abc1234
(...)

Title FOO

Full commit message FOO
[prompt]$ git cat-file commit def5678
(...)

Title BAR

Full commit message BAR[prompt]$
</code></pre>

<p>Note how the new shell prompt appears at the end of the last line of output, demonstrating that commit <code>def5678</code> does <strong>not</strong> contain a newline at the end of the full commit message.</p>

<p>Let's say that <code>def5678</code> is the parent of <code>abc1234</code> and I want to output a simple log where each entry contains only the short commit hash, title line, and full commit message.  I might try something like this:</p>

<pre><code>[prompt]$ git log --graph --pretty='commit %h%n%B' abc1234
* commit abc1234
| Title FOO
| 
| Full commit message FOO
|
* commit def5678
| Title BAR
|
| Full commit message BAR
* commit &lt;parent of def5678&gt;
(...)
</code></pre>

<p>Note the spacing between the log entries.  The entries for <code>abc1234</code> and <code>def5678</code> are separated by a blank line (save for the graph character), yet the entries for <code>def5678</code> and its parent are not.</p>

<p>How can I construct a format string so that the spacing is consistent, even with inconsistent termination of full commit messages?  The builtin pretty formats of <code>medium</code>, <code>full</code>, <code>fuller</code>, and <code>email</code> already do that, but I want to be able to construct arbitrary format strings to do the same thing.</p>

<p>I've experimented with the <code>%+B</code>, <code>%-B</code> and <code>% B</code> sequences (and their <code>%b</code> and <code>%n</code> equivalents), but I just can't seem to get consistent spacing.</p>

<p>I'm using Git 2.17.0 if that makes a difference.</p>
","9","2985129","0","0"
"12272011","1440858","2012-09-04 22:09:07","1","272","<git><git-log>","Does git log --follow work for multple branches?","<p>I recently see something very strange. Suppose I have three branches. They all have a file named A. A then is renamed to B independently in three branches. Then the three branches are merged into one. If now I use </p>

<pre><code>git log --follow B
</code></pre>

<p>I think I should see three commits about the renaming like</p>

<pre><code>diff --git a/A b/B
similarity index 85%
rename from A
rename to B
index b328642..5cd437a 100644
--- a/A
+++ b/B
</code></pre>

<p>But What I actually see is a commit about renaming from A to B like above, the other two are deleting A like</p>

<pre><code>diff --git B B
deleted file mode 100644
index 5db3424..0000000
--- a/B
+++ /dev/null
</code></pre>

<p>It looks like to me that --follow ignores branches. It just follows through logs linearly rather than treat different branches differently.</p>

<p>What happens here? Is there any solution to avoid this problem?</p>

<p>Thanks</p>
","0","1440858","",""
"20200226","554241","2013-11-25 18:13:15","34","15651","<git><git-log>","How to understand git log --graph","<p>I am quite confused with the output of graphic git log.</p>

<p>I do understand that each <code>*</code> means a commit, whether it is a diverge, common or merge commit.
I do understand that pipes means branch.</p>

<p>Let's look at a simple graph log:</p>

<p><img src=""https://i.stack.imgur.com/brAtv.png"" alt=""enter image description here""></p>

<p>First of all, which branch does the red pipe (the most left-handed one) represent for? I don't think it is the current branch that I am on, because after I checkout to other branch, the graph looks the same. Furthermore, it doesn't represent master branch neither. </p>

<p>Second of all, if the most left-handed branch represents a single branch, why it changes color after commit ""0e5b5""?</p>

<p>I searched for a tutorial on how to read git log graphs, unfortunately, I got nothing. If there are some awesome tutorials on this topic, please feel free to share.</p>
","3","554241","0","0"
"66443115","2144408","2021-03-02 16:19:19","1","33","<git-log>","How can I show the branches in `git log -- dir`?","<p>I can run <code>git log -- doc</code> in, for example, <a href=""https://github.com/alire-project/alire"" rel=""nofollow noreferrer"">this fairly small repository</a>. However, the branches are not displayed unless the tip of that branch made a change inside the directory I specify. I would like to see the branch names displayed on the latest commit on that branch that touched the directory.</p>
<p>This is similar to how, in GitExtensions, you can request the 'History of a directory / file' while still also seeing the branches involved. It is especially useful when you are resolving a difficult merge/rebase conflict, or tracking down a bug in that code, because you can see the branches which the other modifications were on, so you also know if particular changes were already merged into master or not.</p>
<p>I specifically need a way to output this on the commandline, such as by passing parameters to <code>git log</code>, or a custom shell script, because the output of git log is used by my git GUI (<a href=""https://github.com/rbong/vim-flog/issues/47"" rel=""nofollow noreferrer"">vim-flog</a>).</p>
","0","2144408","",""
"18643023","1083704","2013-09-05 18:00:38","1","1811","<git><git-log><gitk>","gitk search results","<p>I have tried <code>gitk $(git log -S"" extreemly rare "" --pretty=format:%h)</code>, as <a href=""https://stackoverflow.com/questions/18643023/gitk-search-results/18644680#comment27454684_18644680"">this answer</a> suggests  but <code>gitk</code> shows all commits in addition to the search results (if I can add anything to a universal set)</p>

<p>Initially, this came from <a href=""https://stackoverflow.com/a/746790/1083704"">this answer</a>, that recommended <code>gitk --all $(git log -S"" rare text"" --pretty=format:%h)</code>. I was advised to remove <code>--all</code> but this does not have any effect.</p>
","0","1083704","",""
"39462616","3713234","2016-09-13 05:16:53","2","47","<git><git-log>","How to use git to see changes to all files since their initial creation?","<p>I'm trying to see what edits I've made since an initial commit.</p>

<p>This happens a lot when I import and control code from a vendor.</p>

<p>So the workflow is like this:</p>

<ol>
<li><code>git add/commit</code> original</li>
<li>make edits</li>
<li><code>git commit</code></li>
<li>go to 2</li>
</ol>

<p>I'd like to see a record of all of <em>my</em> changes to the files since they were first created.</p>

<p><code>git log -p -- &lt;file&gt;</code> doesn't quite work because the file's initial creation shows up as one giant additional of all lines.  Like so:</p>

<pre><code>commit 82abdc4cc52d70dcabdec4b987632f226a1e8bc4
Author: Greg Bell &lt;greg@&gt;
Date:   Fri Aug 26 07:13:22 2016 +1000

    initial import from vendor

diff --git a/vendor/source.h b/vendor/source.h
new file mode 100644
index 0000000..baf6d8a
--- /dev/null
+++ b/vendor/source.h
@@ -0,0 +1,221 @@
+/*
+ * Error codes returned by blah.
+ *
+ * Copyright (C) 1998-2000 blah blah
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, visit the http://fsf.org website.
+ */

+#define RERR_OK         0
+#define RERR_SYNTAX     1       /* syntax or usage error */
.
. (all 1250 lines shown)
.
</code></pre>

<p>This badly clutters the output when I'm running the log on the entire dir instead of just one file.</p>

<p>There are no branches - perhaps a critical initial mistake, though it would be nasty to have to switch branches based on whether I'm bringing in new files or editing existing ones (then merge, etc.)</p>

<p>What I think makes this hard is that files may come in at any time, so may be added all throughout the git history, so I don't think I can use .. or the various <a href=""https://git-scm.com/docs/gitrevisions"" rel=""nofollow"">revision syntaxes</a>.</p>

<p>Seems like a simple use case, but my reading of the documentation for <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow"">git-log</a>, and Googling, hasn't yielded anything.</p>
","0","3713234","0","0"
"35133762","","2016-02-01 15:03:07","0","261","<git><history><git-log><simplification>","Git log history simplification, elaborations example in git log's manual","<p>All of you comfortable with example and elaborations in git log's help for history simplification?
I encounter some burdens on understanding when using this help/manual and the named example. </p>

<pre><code>  .-A---M---N---O---P---Q
 /     /   /   /   /   /
I     B   C   D   E   Y
 \   /   /   /   /   /
  `-------------'   X
</code></pre>

<blockquote>
  <ul>
  <li>I is the initial commit... foo exists with contents “asdf”, and a file quux exists with contents “quux”....</li>
  <li>In A, foo contains just “foo”...</li>
  <li>B contains the same change as A...</li>
  <li>C does not change foo, but its merge N changes it to “foobar”...</li>
  <li>P is TREESAME to O...</li>
  </ul>
</blockquote>

<ul>
<li>The sense of a merge with a change not present in any of its parents included?
See merge's N description in git log's help</li>
<li>The file's quux undergoes some modifications on the transition from O to merge P, why do the elaborations in help qualify P as treesame against O?</li>
</ul>

<p>It looks like the terms TREESAME and !TREESAME are to be seen in scope of a single file/directory. Not to be used to express commit property for multiple files. Is this true?</p>
","0","","",""
"20579889","281108","2013-12-14 05:07:49","6","2461","<git><git-log>","Different pretty formats for git log and git show?","<p>I have this in my <code>.gitconfig</code>:</p>

<pre><code>[format]
    pretty = %C(yellow)%h%Cred%d%Creset - %C(cyan)%an %Creset: %s %Cgreen(%cr)
</code></pre>

<p>This makes the output of <code>git log</code> look like this (plus some nice colors):</p>

<pre><code>6b1d043 (origin/master) - Ismail Badawi : Don't redirect to index after saving query. (28 hours ago)
df98a3e - Ismail Badawi : Store example queries in database &amp; cache results (30 hours ago)
6de44ab - Ismail Badawi : Add sanity check tests for different pages. (31 hours ago)
7b6b46b - Ismail Badawi : Save query results for saved queries. (31 hours ago)
</code></pre>

<p>I find this format easy to scan through. I don't like that it also affects <code>git show</code> though; in particular, I'd like to be able to see the full commit message in the output of <code>git show</code>, not just the title line; also the actual date instead of relative, the author email, etc.</p>

<p>Is there some way to use different default formats for <code>git log</code> and <code>git show</code>?</p>
","1","281108","0","0"
"58597775","9975453","2019-10-28 20:13:08","0","842","<git><powershell><git-log><git-rev-list>","Get the name of the file that was changes recently in a git folder","<p>I am trying to get the name of a file name that has the recent change. For example a folder has three files file1.txt, file2.txt and file3.txt. I am trying to have a powershell script that captures the name of a file based on the git log or rev-list and select the name of it. Also if someone adds another file called file4 then it has to be selected by the variable. </p>

<pre><code>cd folder
  $latest_file = git log -n1  --pretty=""format:"" --name-only -- *.txt
# or $latest_file = git show --name-only $(git rev-list -1  --all *.sql)
cp $latest_file ""some/another/folder/""
</code></pre>

<p>The problem with git log -n1 is that it can capture the name of the file only if file1.txt is changed while if I change file2.txt then it fails,however if I change git log -n2 then it captures the chagne in file2 but then if file1 is changed or if file4 is added then it fails. </p>

<p>Problem with git rev-list -a --all is that it gives more output then just a file name and don't know how to use pretty format like in log .</p>

<p>Thank you!</p>
","2","9975453","",""
"35186829","678435","2016-02-03 20:15:47","15","7262","<git><git-log>","How to improve git log performance?","<p>I am trying to extract git logs from a few repositories like this:</p>

<pre><code>git log --pretty=format:%H\t%ae\t%an\t%at\t%s --numstat
</code></pre>

<p>For larger repositories (like rails/rails) it takes a solid 35+ seconds to generate the log. </p>

<p>Is there a way to improve this performance?</p>
","3","678435","0","0"
"39887690","401523","2016-10-06 04:44:54","5","3980","<git><git-log>","How to reproduce the format of git log --oneline --decorate?","<p>Where is the format of git log --oneline --decorate defined?</p>

<p>Using git Iog  --format=format:'my format', I cannot reproduce the colours of the branches, tags and HEAD as shown by git log --oneline --decorate.</p>

<pre><code> git log --oneline --decorate    
</code></pre>

<p>shows HEAD in light blue, the branch names in green and the punctuations (,,) in brown.</p>

<p>The closest I have come to getting what I want is: </p>

<pre><code>git log --graph --abbrev-commit --decorate --date=short --format=format:'%C(bold blue)%h%C(reset) %C(bold green)%ad%C(reset)%d %C(white)%s%C(reset)' -20  
</code></pre>

<p>with the only difference being that the branches/HEAD/tags are not coloured like with the previous command. </p>
","0","401523","0","0"
"39964077","4962956","2016-10-10 17:57:06","0","130","<ruby><git><git-log>","How to output file name inside system(git log) command in ruby script?","<p>The problem I encounter is that I don't manage to put the name of the file inside the below screen output inside git log using pretty format flag.</p>

<p>An extract of my code is the following:</p>

<pre><code>filename = File.basename file
system('git log --pretty=format:""%cd: (here I want the filename)""')
</code></pre>

<p>presented as sample.c for example.</p>

<p>I tried <code>#{filename}</code> but is interpreted as a string from the compiler and the result is the same as the input.</p>

<p>Thank you in advance.</p>
","0","4962956","",""
"40110818","896012","2016-10-18 14:22:15","2","1664","<git><git-log><git-rev-list><git-verify-pack>","Finding large files in the history of a git repository fails","<p>My repository is very big because of some large files in the history. For finding the large files and removing them, I am executing:</p>

<pre><code>$ git verify-pack -v .git/objects/pack/pack-..e8a.idx | sort -k 3 -n | tail -3 
</code></pre>

<p>and the result is something like:</p>

<pre><code>12eb660ea206e1b7bd42cb8b525aabe9e86a5064 blob   56413247 15833578 5889838
89b377ace5639c0914bb49d28d0c8e97b0f19a16 blob   56414112 15833631 81736530
4ea83fb57b49f7afdbe99e4f043509d184338f5b blob   56426618 15837504 48628334
</code></pre>

<p>To find the path of the largest file, I run:</p>

<pre><code>$ git rev-list --objects --all | grep 4ea83fb57b49f
</code></pre>

<p>and the result is:</p>

<pre><code>4ea83fb57b49f7afdbe99e4f043509d184338f5b path/to/my/large_file
</code></pre>

<p>but, when I run <code>git log</code> on this file like:</p>

<pre><code>$ git log --oneline --branches -- path/to/my/large_file
</code></pre>

<p>No log is shown. 
In addition, whenever I try to remove the binary file from history by:</p>

<pre><code>$ git filter-branch --index-filter  \
'git rm --ignore-unmatch --cached path/to/my/large_file'
</code></pre>

<p>I receive:</p>

<pre><code>WARNING: Ref 'refs/heads/master' is unchanged
</code></pre>

<p>Any ideas?</p>
","0","896012","0","0"
"21110868","2837410","2014-01-14 10:14:03","0","23","<git><git-log>","git:listing files that ever contained specified text","<p>I need to list all the files that currently or at some point in history contained a specified text.Is there anyway to do that?</p>
","0","2837410","",""
"2282952","234784","2010-02-17 17:32:29","20","16956","<git><git-push><git-log>","git: how to see changes due to push?","<p>I can't quite figure out how to see what exactly was changed, in the remote repository, by a 'push'.  'git log' shows me the series of commits but those took place in my local repository and were pushed at different times; I would like to know which commits were part of each specific 'push'</p>
","0","234784","0","0"
"51021581","9668773","2018-06-25 10:42:30","0","237","<git-log><dulwich><git-rev-list>","Dulwich cheat sheet: how to reproduce “git log”?","<p>Dear community members,</p>

<p>I'm working on a code analysis system and would like to replace calls to CLI Git application with Dulwich module. As a second step I need to replace ""git log"" command with Dulwich equivalent.</p>

<p>Specifically, I'm trying to reproduce the following command:</p>

<pre><code>git log --format=%H -- &lt;path_to_a_file&gt;
</code></pre>

<p>which must be similar to:</p>

<pre><code>git rev-list HEAD -- &lt;path_to_a_file&gt;
</code></pre>

<p>My ultimate goal is to get a list of blobs (e.g. represented with SHAs) related to a given file.</p>

<p>What would be the best way to achieve it?</p>
","0","9668773","",""
"18830659","531179","2013-09-16 14:36:09","70","28814","<git><git-log>","How to `git log` a tree-ish from another branch?","<p>Let's say I have a Git repo with branch <code>A</code> and branch <code>B</code>.<br>
Branch <code>B</code> is currently checked out (i.e. <code>.git/HEAD</code> contains <code>refs/heads/B</code>).<br>
Now, <strong>without checking out branch <code>A</code></strong>, how to view the history (log) of <code>path/file</code> in branch <code>A</code>?</p>

<p>Following <code>git help rev-parse</code>, I've attempted to use <code>git log A:path/file</code>, but that doesn't seem to work (outputs nothing). Why?</p>
","3","531179","0","0"
"21485714","1303625","2014-01-31 16:58:24","3","282","<git><git-log>","Is it possible to dynamically generate git log format?","<p>I'd like to always show Author Name and Author Date, but optionally show Committer Name and Committer Date if they are different from Author Name and Date.</p>

<p>This is mainly for use after a rebase. The Author info remains the same, but the Committer info changes. If and only if they are different, I'd like to show the Committer info in addition to the Author info.</p>

<p>Author and Committer info are the same:</p>

<pre><code>%C(yellow)%h%Creset %s %C(cyan)(%an - %ar)%Creset
</code></pre>

<p>Different:</p>

<pre><code>%C(yellow)%h%Creset %s %C(cyan)(%an - %ar, %cn - %cr)%Creset
</code></pre>

<p>Is this possible?</p>
","0","1303625","",""
"69382731","5699993","2021-09-29 20:04:22","1","250","<git><git-log>","The last commit of a file in git shows lines added but the file is not in the project folder","<p>Using the command <code>git log --numstat</code> I can see that the last commit for the file <strong>MyFile</strong> shows some lines added. Which means that the last thing it has been done to <strong>MyFile</strong> is that somebody has added some lines to it.</p>
<p>At the same time I can not find <strong>MyFile</strong> in the project folder. Therefore I assume that <strong>MyFile</strong> is referenced in some branches but not in the current branch.</p>
<p>Is this a correct assumption? If so, is there a way to find which branches actually have references to <strong>MyFile</strong>?</p>
","2","5699993","",""
"45064007","567620","2017-07-12 17:19:43","4","400","<git><github><git-commit><git-log>","What does the git documentation mean by 'unwrapped subject and body' for %B pretty print specifier","<p>If you search for %b and %B in <a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">the documentation</a>, there is no explanation of the difference between them apart from the cryptic ""(unwrapped subject and body)"".</p>

<p>Here is an example commit from a repo (using git version 2.9.3) and the differing result printed from using %b vs. %B. The commit command was <code>git commit -m 'Automated version update from Jenkins.'</code></p>

<pre><code>$ git log -1 origin/master
commit 30ac57e...
Author: Jenkins &lt;email@email.com&gt;
Date:   Wed Jul 12 16:28:41 2017 +0000

    Automated version update from Jenkins.
$ git log -1 --format=%B origin/master
Automated version update from Jenkins.

$ git log -1 --format=%b origin/master

$ 
</code></pre>

<p>I do not understand why %b fails to produce the commit message body, nor why %B (if it contains ""subject and body"" in some sense) only provides the message body. </p>

<p>What is the underlying difference between %b and %B for pretty printing from logs? </p>

<p>If you want to reliably print just the most recent commit message (message only), how should you do so? I thought it should be <code>git log -1 --format=%b origin/master</code> but this example seems to suggest otherwise. Will %B work reliably, or does the phrase ""(unwrapped subject and body)"" mean it may somehow include the subject in some situations?</p>
","0","567620","0","0"
"9483757","472034","2012-02-28 14:30:17","1271","564965","<git><git-diff><git-log>","How to exit git log or git diff","<p>I'm trying to learn Git with the help of <a href=""http://gitimmersion.com/"" rel=""noreferrer"">Git Immersion</a>.<br>
There's one thing that frustrates me whenever I use <code>git log</code> or <code>git diff</code>:</p>

<p><img src=""https://i.stack.imgur.com/yJ0Ms.png"" alt=""Git log shows (END) marker""></p>

<p>I can't figure out what to do next when I encounter this <code>(END)</code> word.</p>

<p>I can't type any commands, and I end up closing the current Bash window and open another. How do I type in the next command that I want to use?</p>
","6","472034","0","0"
"63653790","9434450","2020-08-30 03:53:42","1","1211","<git><git-commit><git-log><git-fetch>","""git fetch"" doesn't update commit history in ""git log""","<p>I'm new to git workflow and was following a tutorial online about &quot;git fetch&quot;. Here are the performed steps:</p>
<ol>
<li>&quot;git pull&quot; to synchronize files and history from remote repo</li>
<li>A new commit was performed by the <strong>same user</strong> <strong>online</strong></li>
<li>&quot;git remote show origin&quot; show that local branch is &quot;out of date&quot; with remote repo</li>
<li>&quot;git fetch&quot; was performed to synchronize metadata and not local files</li>
</ol>
<p>For the tutorial  --&gt;  After &quot;git fetch&quot; when &quot;git log&quot; is used to view commit history, it shows the last performed commit and who did it</p>
<p>For me --&gt;  After &quot;git fetch&quot; when &quot;git log&quot; is used, it <strong>doesn't show me the last performed commit</strong></p>
<p>I tried &quot;git pull&quot; and then both commit history and local file got updated. <strong>Am I doing something wrong here (or) &quot;git fetch&quot; isn't supposed to update the log history</strong></p>
","0","9434450","",""
"28265648","2269586","2015-02-01 17:36:31","0","84","<git><git-log>","How can I get 'git log' to display filenames?","<p>Which command should I use (in Git Bash) to display a history of commits, comments, user, date, and <em>most importantly</em> the file name?</p>
","4","2269586","",""
"65068106","816389","2020-11-30 04:24:58","0","329","<python><git><subprocess><git-log>","option --decorate-refs is ignored when calling git-log from python subprocess","<p>I am stuck at this error. I have tried to search a bunch of things, i tried following the call using debugger. I am none the wiser.</p>
<p><strong>My problem:</strong></p>
<p>I run this command from command line</p>
<pre class=""lang-sh prettyprint-override""><code>git log --format=format:%D --simplify-by-decoration --decorate-refs=*platVer*
</code></pre>
<p>and i get the expected list of tags</p>
<pre class=""lang-py prettyprint-override""><code>tag: platVer/222.3.4123, tag: myplatVer-222.3.4123
tag: platVer-20.07.000
tag: platVer-20.06.000
tag: platVer-20.05.000
</code></pre>
<p>if I run this from python on command line, i also get the expected list</p>
<pre><code>&gt;&gt;&gt; from subprocess import call, Popen, PIPE
&gt;&gt;&gt; pp = Popen(['git', 'log', '--decorate-refs=*platVer*', '--format=format:%D', '--simplify-by-decoration'])
tag: platVer/222.3.4123, tag: myplatVer-222.3.4123
tag: platVer-20.07.000
tag: platVer-20.06.000
tag: platVer-20.05.000
</code></pre>
<p>Running this line in idle or in a script the output is not captured (as expected), to enable capture of stdout, popen needs stdout parameter set to PIPE.</p>
<p>but if I run with stdout=PIPE, it appears to ignore the <code>'--decorate-refs=*platVer*'</code> and just list the entire set of refs</p>
<pre><code>&gt;&gt;&gt; pp = Popen(['git', 'log', '--decorate-refs=*platVer*', '--format=format:%D', '--simplify-by-decoration'], stdout=PIPE)
&gt;&gt;&gt; pp.stdout.read()
b'HEAD -&gt; feature/ps2python, origin/feature/ps2python\ntag: platVer/222.3.4123, tag: myplatVer-222.3.4123, tag: mao_test ....
</code></pre>
<p>I get the same when I run this from a script or in idle.</p>
<pre class=""lang-py prettyprint-override""><code>from subprocess import Popen, PIPE

pp = Popen(['git', 'log', '--decorate-refs=*platVer*', '--format=format:%D', '--simplify-by-decoration'], stdout=PIPE)
print( pp.stdout.read().decode('ascii' ) )
</code></pre>
<p>gives me this</p>
<pre class=""lang-none prettyprint-override""><code>HEAD -&gt; feature/ps2python, origin/feature/ps2python
tag: platVer/222.3.4123, tag: myplatVer-222.3.4123, tag: mao_test
show-current, develop
tag: platVer-20.07.000,
... (cut the remaining many many lines of refs)
</code></pre>
<p>I am running on windows 10 (Version 10.0.18363.778)
git version  2.29.2.windows.2
python version 3.8.5</p>
<p>I tried with shell=Tre/False,  universal_newlines=True/False
I tried it in WSL (ubuntu)
All gave same result</p>
<p>Then I tried in a virtual ubuntu 18.LTS. with git version 2.17. And here I got the wired results, where <code>'--decorate-refs=*platVer*'</code> is ignored. from command line.</p>
<p>I then updated the git to newer version (2.29.2) on this ubuntu. And now the command work exactly as expected....</p>
<p>I then tried the same commands from python, same result as on the win10 machine.</p>
<p>Please help. Can't figure out how setting <code>stdout=PIPE</code> can change the behaviour of the git command.</p>
<p><strong>edit:</strong>
I did check that the same version of git is called with and without PIPE</p>
<p><strong>Edit2:</strong></p>
<p>I marked @torek 's answer as the accepted as it solves my question perfectly.</p>
<p>However I should have stated the goal of my use of git-log to allow for broader answers.</p>
<blockquote>
<p>My goal is to find the tag  that is the first tag found when traveling
back in history (topological or graph ordering) and that matches a
regular expression.</p>
</blockquote>
<p>I was previously using rev-list, but found no documentation that this would deliver tags in the order i wanted, maybe i missed something.</p>
<p>The reason I use a simple glob pattern in my command when I at the same time state that I need a regex match, is that I assume the globbing to be faster, and therefore use it as a prefilter to shorten the list that needs to be parsed by the regular expression in python. I expect that the list of tags, in a few years, to contain 1000+ tags and growing. where the tags with the word 'platVer' will be around 1% of that list.</p>
","2","816389","",""
"10738726","229753","2012-05-24 13:45:49","3","177","<git><reporting><git-log>","git log on a pre-filtered subset of the history","<p>I'd like to use git log to show a set of diffs between commits that I have filtered myself. git log does have an internal history filtering ability that will (when used with the --patch flag) show diffs between commits that may be far apart in the history. But when I try to combine that with --stdin to pass a list of commits, I get the full history of these commits (actually the full history of the branch they are on). Adding -1 does not get me closer to the desired behaviour, it just limits me to one commit total.</p>

<p>I'm looking for a cleaner version of this (daily diffs of all commits that occured during the last few weeks):</p>

<pre class=""lang-bsh prettyprint-override""><code>git log --date=short --format='%H %ad' --since 2012-05-15 \
  |uniq -f1 |while read hash date
do
  if [[ -n $hash0 ]]; then
    echo ${date}..${date0}
    git diff $hash $hash0
  fi
  hash0=$hash
  date0=$date
done |less
</code></pre>
","5","229753","0","0"
"64584382","782880","2020-10-29 03:04:19","2","67","<git><git-log>","Why does `git log --all` show removed commits?","<p>I used <code>git reset --hard sha</code> on a commit to strip/remove several commits, then did <code>git gc --prune=now</code>.  When I do a <code>git log --pretty=oneline --abbrev-commit</code> it returns commits with the latest at the sha I used in the reset command.  This is what I’m expecting.</p>
<p>However, I then did <code>git log --pretty=oneline --abbrev-commit --all</code> and it is returning commits I thought I stripped.  Why is this history still here?</p>
<p>ETA: None of these commits exist on a master repo</p>
","1","782880","",""
"10022722","10608","2012-04-05 04:31:53","39","16139","<git><git-log>","Difference between git-log and git-whatchanged?","<ol>
<li>Given <a href=""https://stackoverflow.com/a/280140/10608"">this answer</a> to another question, and</li>
<li>given that the man pages for both <a href=""http://linux.die.net/man/1/git-log"" rel=""noreferrer"">git-log</a> and <a href=""http://linux.die.net/man/1/git-whatchanged"" rel=""noreferrer"">git-whatchanged</a> say they pull from <a href=""http://linux.die.net/man/1/git-rev-list"" rel=""noreferrer"">git-rev-list</a>...</li>
</ol>

<p>...what then is the difference between the two commands? Why bother having both of them?</p>
","1","10608","0","0"
"46639060","8655006","2017-10-09 04:53:34","2","856","<git><bash><delete-file><git-log>","How to exclude the deleted file in git log command?","<p>I need to exclude the deleted file in git log. I use the command <code>git log -1 --name-only --pretty=format:eee6ce6</code> to get the changed file name in last that commit.  I using <a href=""https://github.com/github/platform-samples/blob/master/pre-receive-hooks/block_file_extensions.sh"" rel=""nofollow noreferrer"">pre-receive</a> hook to block the specific file type committing. Above command listed all file which has modified. </p>

<p>But I wanna allow the user to remove the specific file types. How can I do this? </p>

<ul>
<li>I tried this <code>git log -1 --name-only --pretty=format:eee6ce6-filter=d</code>  command too, But it also listing the deleted file.</li>
<li>This <code>git log -1 --diff-filter=d --name-only</code> perfectly works. But the it giving <code>commit ID, author name, date</code> also. I want only the file name.</li>
</ul>
","0","8655006","0","0"
"11301244","433718","2012-07-02 21:12:04","12","6185","<web-services><git><github><github-api><git-log>","Web API (like github REST API) for a personal Git server repo to enable ""git log""?","<p><strong>I probably end up re-inventing parts of the <a href=""http://developer.github.com/v3/repos/contents/"" rel=""nofollow noreferrer"">github REST API</a> for my own repo server. But maybe there is some server script to do that already out there? Or maybe you have other suggestions?</strong></p>

<p><strong>This is my use case:</strong></p>

<p>I am developing a Firefox Extension, that shall display the data of a</p>

<pre><code>git log -- &lt;path&gt;
</code></pre>

<p>I always could write a little server script that implements the well developed <a href=""http://www.eclipse.org/jgit/"" rel=""nofollow noreferrer"">JGit</a> and does the ""git log"" command there. But then, the FF extension depends on that server script ;(</p>

<p>I was wondering, if there exists something like the <a href=""http://developer.github.com/v3/repos/contents/"" rel=""nofollow noreferrer"">github REST API</a> for ""not-github""-repos that would be more standard as my little server script?</p>

<p>I also thought about a <a href=""https://stackoverflow.com/questions/3411302/javascript-git-client"">Git JS Client</a>, like <a href=""https://github.com/danlucraft/git.js"" rel=""nofollow noreferrer"">Git.JS</a> (apparently the only JS Client; workes with node.js; Unfortunatly the project is no more active and has no documentation.) . However, I don't need a full client. I just want to retrieve some information Read Only from the remote master repo.</p>
","2","433718","0","0"
"11307115","1474886","2012-07-03 08:25:51","0","185","<git><git-log><gitweb>","gitweb vs git-log date","<p>I currently have a local clone of a repo from our company git server. What I have noticed is that the dates returned in the history summary returned by <code>git log</code> don't match the dates on our gitweb server view.</p>

<p>Can anyone explain how each of these gets their dates and possibly why they might be different?</p>

<p>Having different dates makes it very complicated to track changes! </p>
","0","1474886","",""
"47438581","2075630","2017-11-22 15:37:25","0","303","<git><git-log>","Missing newline in git log --graph --format=... with file status toggles?","<p>I am trying to get a custom-formatted git log with file status information. However, I ran into a strange little problem with newline positioning. </p>

<p>Apparently, whenever using a <code>--format</code> or <code>--pretty</code> argument, the newline normally inserted after the file status information is omitted. This leads to somewhat hard-to-read output like</p>

<pre><code>&gt;&gt; git log -3 --graph --name-status --format=%h:%s
* eee8e08:Second commit With more details in the body.
|
| M hello.txt
* b6146f7:First commit.
|
| A hello.txt
| A world.txt
* 30cb21f:We start from here. Bla bla bla.
</code></pre>

<p>where visually the file-status looks grouped with the wrong commit. </p>

<p>Without the requirement of the <code>--graph</code> option, it could be easily fixed by adding newlines (<code>%n</code>) to the beginning of the format, but wth --graph this just leads to an even more weird look, moving the commit message away from the <code>*</code> denoting the note in the graph. </p>

<pre><code>&gt;&gt; git log -3 --graph --name-status --format=%n%h:%s
*
| 1868195:Second commit With more details in the body.
|
| M hello.txt
*
| 0f03672:First commit.
|
| A hello.txt
| A world.txt
*
| 033f27f:We start from here. Bla bla bla.
</code></pre>

<p>The missing newline affects all file-status toggles (e.g. <code>--name-status</code>, <code>--stat</code>, <code>--numstat</code>).</p>

<p>For reference, without formatting commands the verbose message has better newline positioning, </p>

<pre><code>&gt;&gt; git log -3 --graph --name-status
* commit eee8e08d3c892e96228844bcdc6324dc895041af
| Author: me &lt;me@me.org&gt;
| Date:   Wed Nov 22 16:26:58 2017 +0100
|
|     Second commit
|     With more details in the body.
|
| M hello.txt
|
* commit b6146f70b3406508f5b1300c8cda6fd954d3eadd
| Author: me &lt;me@me.org&gt;
| Date:   Wed Nov 22 16:26:58 2017 +0100
|
|     First commit.
|
| A hello.txt
| A world.txt
|
* commit 30cb21f8aba82b30a2f780165533b477cb4555f9
| Author: me &lt;me@me.org&gt;
| Date:   Wed Nov 22 16:26:58 2017 +0100
|
|     We start from here.
|     Bla bla bla.
</code></pre>

<p>which makses the grouping of message, header and file-status more clear.</p>

<p>Is there some method to get the file-status information into custom log formats, without missing the newline separating it from the previous commit?</p>

<hr>

<p>For reference, the output was created in a test repository with a script <a href=""https://pastebin.com/exLswmeR"" rel=""nofollow noreferrer"">https://pastebin.com/exLswmeR</a></p>
","0","2075630","0","0"
"29239526","2541573","2015-03-24 17:48:12","4","1116","<git><git-log><git-plumbing><git-rev-list>","What plumbing command provides the same functionality as git log --follow?","<p>In an effort to improve stability, I'm currently refactoring all my Git-related shell scripts so that they use only <em>plumbing</em> (rather than <em>porcelain</em>) commands. In particular, I'm trying to replace calls to <code>git log</code> (porcelain) by calls to <a href=""http://git-scm.com/docs/git-rev-list"" rel=""nofollow""><code>git rev-list</code></a> (plumbing).</p>

<p>However, although <code>git rev-list</code> seems to offer much of the functionalities of <code>git log</code>, it seems to be missing an option equivalent to <code>git log</code>'s <code>--follow</code> flag, which tells Git to list commits that affected a path even beyond renames (e.g. <code>README</code> -> <code>README.md</code>). From the <a href=""http://git-scm.com/docs/git-log"" rel=""nofollow""><code>git log</code> man page</a>:</p>

<blockquote>
  <p><code>--follow</code></p>
  
  <p>Continue listing the history of a file beyond renames (works only
     for a single file).</p>
</blockquote>

<p>I've sifted through the <a href=""http://git-scm.com/docs/git-rev-list"" rel=""nofollow""><code>git rev-list</code> man page</a>, but I couldn't find any option that does the same as <code>git log --follow</code>. What am I missing? Can that be done with <code>git rev-list</code>? Or should I use another plumbing command altogether?</p>
","2","2541573","",""
"47475712","1254292","2017-11-24 14:54:30","17","3112","<git><git-log>","Git: How to list specific trailers (footers) in git-log format?","<p>Given the following example git commit message:</p>

<pre><code>My commit message summary

Some more body in this message...

Signed-off-by: My name &lt;my.name@example.com&gt;
Issue: MYPROJ-123
</code></pre>

<p>I can now parse these '<a href=""https://git-scm.com/docs/git-interpret-trailers"" rel=""noreferrer"">trailers</a>' (key/value parameters in the footer) with recent Git versions (2.14+) using <code>git interpret-trailers --parse</code>.
This appears integrated into git-log formatting options as well, e.g.:</p>

<pre><code>git log --format=""%h %s %(trailers)""
</code></pre>

<p>However, it shows me all trailers, including the line breaks.</p>

<p>Would it be possible to limit this to the value(s) of a single trailer token? Ideally, what I'd like to accomplish is something like this as a git-log line, showing the value of the <code>Issue</code> token only:</p>

<pre><code>0123abcd My commit message summary MYPROJ-123
</code></pre>
","0","1254292","0","0"
"47478585","4296267","2017-11-24 18:41:36","1","454","<git><git-log>","How to parse commit tree from git log?","<p>I want to retrieve commit tree of some repo using only git log output. To get log I use following command:</p>

<pre><code>git log --parents --all --source --numstat
</code></pre>

<p>My output looks like (just omit unnecessary metadata): </p>

<pre><code>commit e32c46de36343a0cdad2eac18b5167c0a2831f4d 55dae2809b9e8484ab2466adb6cbed0b1a48fbc9 c070bfc4ed1610d12a1500e307f1323ce9f91653 refs/origin/some_branch
Date:   &lt;commit date&gt;

commit 6d5b6ed00daea7abbb1643cbdd6d2c9d12b5c10a eb539e82860c8c56d18a57e1121d691484aa62cf refs/tags/one_more_tag
Date:   &lt;commit date&gt;
</code></pre>

<p>What should be the algorithm to correctly retrieve commit tree? </p>
","3","4296267","",""
"29271924","867294","2015-03-26 05:53:32","5","646","<git><git-log>","How can I get git log to print only the initials of author names?","<p>Is there anyway I can call a function from inside the argument of 
 <code>git log</code>'s <code>--format</code> flag? Something like the following:</p>

<pre><code>git log --graph --format ""${%ani:0:4}"" 
</code></pre>

<p>(this isn't a real function, but you get the idea).</p>

<p>More specifically, I'd like to trim down the committer name (ideally, to just his/her initials) so that my graph log doesn't get too wide. How can I do that?</p>
","5","867294","0","0"
"30012587","1542339","2015-05-03 10:08:18","0","1276","<git><git-rebase><git-commit><git-log>","why git rebase -i based squash could lead to conflicts?","<p>in fact <strong>there is only one person work on that repo, and there is only one branch on that repo</strong>, 
i use <code>git rebase -i HEAD~200</code> to get rid of some meaningless commits which have ""tirval commit"" message in commit log, i think all these commit could be squash to previous commits, it is so natural that my current branch is not in conflict state, and all previous commits are without conflicts, even when there were conflicts, they were solved, why squash could lead to conflicts?</p>

<p><img src=""https://img.itc.cn/photo/jfnTnW35fjc"" alt=""""></p>

<p><img src=""https://img.itc.cn/photo/jfnTw1DhDFA"" alt=""""></p>

<p>btw, is there quiet mode to do git rebase -i without confirming lots of popups?</p>
","1","1542339","",""
"66314728","15165816","2021-02-22 11:20:39","2","578","<c#><github><graph><git-log><libgit2sharp>","How to get git branch information about each of commit by using 'LibGit2sharp'","<p>I'd like to make 'Commit History Graph' by using <code>libgit2sharp</code> library like below.</p>
<p><a href=""https://i.stack.imgur.com/Y9sG8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Y9sG8.png"" alt=""enter image description here"" /></a><br />
<br/></p>
<p>There was a similar question in stackoverflow, but I couldn't get the specific answer.</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/15203844/how-do-i-build-a-version-tree-for-a-git-repository-using-libgit2sharp"">How do I build a version tree for a Git repository using LibGit2(Sharp)
</a></li>
</ul>
<br/>
Here is my source code.   
<br/>
<br/>
<pre class=""lang-cs prettyprint-override""><code>string path = &quot;c:\github\git-gui-app&quot;;
var repo = Repository(path);
var commits = repo.Commits();
var list = new List&lt;CommitItem&gt;();
foreach (var item in commits)
{
    var commitItem = new CommitItem();
    commitItem.Name = item.Message;
    commitItem.Sha = item.Sha;
    commitItem.ParentSha = item.Parents.FirstOrDefault().Sha;
    list.Add(commitItem);
}
</code></pre>
<pre class=""lang-cs prettyprint-override""><code>foreach (var item in list)
{
    item.BranchInfo = GetBranchInfo(item);
}

...

private BranchItem GetBranchInfo(CommitItem item)
{
    // How to get branch information in current commit?
}
</code></pre>
<p>I succeeded in getting the git repository commit information,
but I still don't know how to get branch information of each commit.</p>
","0","15165816","0","0"
"33012869","3540289","2015-10-08 10:15:14","71","23875","<git><git-branch><fatal-error><git-log><blue-screen-of-death>","Broken branch in git, fatal: your current branch appears to be broken","<p>Here is my case:</p>

<ul>
<li>I was working on one branch.</li>
<li>Pushed new commits to the remote.</li>
<li>Switched back to the master branch. </li>
</ul>

<p>But suddenly after typing <code>git checkout master</code> command my computer encountered <a href=""https://en.wikipedia.org/wiki/Blue_Screen_of_Death"" rel=""noreferrer"">blue screen of death</a> and an unexpected force shut down happened. After starting back my computer I have checked the status of my current branch and as a result I got each and every file as marked new files.</p>

<p>Now, I am stuck at this point and after <code>git log</code> command I am getting error </p>

<pre><code>$ git log
fatal: your current branch appears to be broken
</code></pre>

<p>How to solve this problem and recover my branch?.</p>

<p>I am working with windows 7 and git bash latest version</p>

<blockquote>
  <p>Edit: <strong>I don't want to delete this branch.</strong></p>
</blockquote>
","2","3540289","0","0"
"13178401","962814","2012-11-01 13:46:36","0","131","<git><git-log>","git log --pretty to file with error","<p>I do it:</p>

<pre><code>git log --all --format=format:'%C(bold blue)%h%C(reset) - %an%C(reset)%C(bold yellow)%d%C(reset) - %C(bold green)(%ad)%C(reset) %C(white)%s%C(reset) %C(bold white)'
</code></pre>

<p>Right result:</p>

<pre><code>2c6f8b9 - Matheus - (Thu Sep 20 14:06:51 2012) ++ import clientes, ++ now send email ok! 
102c911 - LIVE - (Thu Sep 20 13:25:24 2012) ++ db 
93bf163 - Matheus - (Wed Sep 19 17:31:18 2012) ++ import clientes 
8539cf4 - Matheus - (Wed Sep 19 16:41:56 2012) ++ import clientes, ++ now with defaultBilling and defaultShipping 
843509a - Matheus - (Wed Sep 19 16:36:19 2012) ++ import clientes, ++ now with defaultBilling and defaultShipping 
b8de06d - Matheus - (Wed Sep 19 15:48:05 2012) ++ import clients
</code></pre>

<p>To my a file: </p>

<pre><code>git log --all --format=format:'%C(bold blue)%h%C(reset) - %an%C(reset)%C(bold yellow)%d%C(reset) - %C(bold green)(%ad)%C(reset) %C(white)%s%C(reset) %C(bold white)' &gt; file
</code></pre>

<p>Wrong result when a save in file output:</p>

<pre><code>[1;34ma36b984[m - LIVE[m[1;33m[m - [1;32m(Thu Sep 20 16:16:57 2012 -0300)[m [37m++ import clientes, ok!![m [1;37m
[1;34m1794d80[m - Matheus[m[1;33m[m - [1;32m(Thu Sep 20 15:31:28 2012 -0300)[m [37mMerge remote-tracking branch 'live/master' into import-clientes[m [1;37m
[1;34me8a1735[m - LIVE[m[1;33m[m - [1;32m(Thu Sep 20 15:23:00 2012 -0300)[m [37m++ db[m [1;37m
[1;34m7c838ef[m - Matheus[m[1;33m[m - [1;32m(Thu Sep 20 15:00:52 2012 -0300)[m [37m++ import-clientes, external file[m [1;37m
[1;34m2c6f8b9[m - Matheus[m[1;33m[m - [1;32m(Thu Sep 20 14:06:51 2012 -0300)[m [37m++ import clientes, ++ now send email ok![m [1;37m
[1;34m102c911[m - LIVE[m[1;33m[m - [1;32m(Thu Sep 20 13:25:24 2012 -0300)[m [37m++ db[m [1;37m
[1;34m93bf163[m - Matheus[m[1;33m[m - [1;32m(Wed Sep 19 17:31:18 2012 -0300)[m [37m++ import clientes[m [1;37m
</code></pre>

<p>I try without pretty format, work perfectly.
Later I try with pretty format, don't work!</p>

<p>How i can save this in a file, with a pretty format?</p>

<p>Thanks.</p>
","1","962814","",""
"39870476","5980376","2016-10-05 09:38:47","1","1331","<git><terminal><git-bash><git-log>","Search git log using a comment","<p>I check my git logs using <code>git log --stat</code> which shows me all the commits and the files that were changed in those commits.</p>

<p>Now there is a commit that was  made a long time ago, I remember a part of the commit message such that  when I do <code>git log --stat | grep 'message text'</code> the log shows only the commit messages in which 'message text' exists.</p>

<p>I, however need to see at least the commit id along with the grep results. How do I achieve this?</p>
","0","5980376","",""
"13291182","1426193","2012-11-08 14:41:47","24","10056","<git><git-log>","git log without tags","<p>So I'm doing something like</p>

<pre><code> git log --graph --pretty='%h %d %s' -n10
</code></pre>

<p>to get brief history of my recent commits.  </p>

<p>The only issue I have is that most of the time I'm not interested in seeing the tags, only the branches.  %d however shows both tags and branches.  Is there some way I can only display branch names and not tags?</p>
","1","1426193","0","0"
"21162314","1251787","2014-01-16 12:50:53","0","46","<git><git-log>","Number of edition in git repository","<p>Please, how can i compute the total number of line edited in git repository ? i'm trying this line commande:</p>

<blockquote>
  <p><code>git log --oneline --shortstat</code></p>
</blockquote>

<p>but it returns the number of edition per files. How can i obatain the total number ? the addition of all edition ? How can i obtain the total line (inserted+deleted) in git repository ? </p>
","6","1251787","",""
"21163327","1397097","2014-01-16 13:36:40","18","10810","<git><pager><git-log>","When I use the ""git log"" command it is no longer implicitly piping through ""less""","<p>Before, I could just type</p>

<pre><code>git log
</code></pre>

<p>Now, I have to type:</p>

<pre><code>git log | less
</code></pre>

<p>to get the same effect. I haven't (intentionally) changed any parameters. I've checked my global config: ""~/.gitconfig"" and my project Git config "".git/config"" but I can't see anything that would cause this. All of the command parameters seem to be for opting out of this.</p>

<p>Furthermore, none of these work either:</p>

<pre><code>git config --add --global core.pager less
git log
</code></pre>

<p>or</p>

<pre><code>GIT_PAGER=less git log
</code></pre>

<p>or</p>

<pre><code>PAGER=less git log
</code></pre>
","3","1397097","0","0"
"31387828","4080215","2015-07-13 15:47:33","1","109","<git><pager><git-log>","Focus HEAD initially in git log","<p>I use this command to view my Git commit graph:</p>

<pre><code>git log --oneline --graph --decorate --all
</code></pre>

<p>Is there a way to have <code>git log</code> focus on the <code>HEAD</code> pointer initially? As in: put the <code>HEAD</code> commit in the middle of the screen when I run this command, while still showing the whole tree?</p>

<p>I often have lots of other commits on top of me so, in almost every case, when I run this command, the first thing I do is search for ""<code>\(HEAD</code>"". It's annoying...</p>

<p>Is there a way to automate that initial search in <code>less</code>?</p>
","0","4080215","",""
"31448445","3928061","2015-07-16 07:56:54","103","112426","<git><git-commit><git-log>","git log show one commit id only","<p>I need some help. It is possible to only show one commit id? Since git log -3 show the log from 1 - 3, I just want to show only 3. What possible command will match for it?</p>

<p>I use the command</p>

<pre><code>       git log -3 --pretty=format:""%h""
</code></pre>

<p>the result is</p>

<pre><code>       ffbef87
       cf0e073
       1c76c5d
</code></pre>

<p>I only want to display the <strong>1c76c5d</strong> only.</p>
","0","3928061","0","0"
"59273210","463213","2019-12-10 18:17:45","4","1664","<git><git-branch><git-diff><git-log>","git log to show commits different between two branches, including common ancestor","<p>When working on feature branches (e.g., <code>feature</code>) created off of our main (e.g., <code>master</code>) branch, I use the following git command to view a list of commits that have been added to the <code>feature</code> branch that are not on the <code>master</code> branch:</p>

<pre><code>git log --oneline master..HEAD
</code></pre>

<p>This outputs a nice short summary of the commits on <code>feature</code> that aren't on <code>master</code> (note, this command is run after checking out the <code>feature</code> branch):</p>

<pre><code>$ git log --oneline master..HEAD
1ca070a (HEAD -&gt; feature) foo the bar
03a1047 baz the wuz
c9e8279 fop the sip
6ee6d6f up the ante
5812200 bop the binky
</code></pre>

<p>The problem is, it doesn't show the common ancestor commit on the <code>master</code> branch. What I would like is for the command to include one more line, that's the common ancestor commit, like this:</p>

<pre><code>1ca070a (HEAD -&gt; feature) foo the bar
03a1047 baz the wuz
c9e8279 fop the sip
6ee6d6f up the ante
5812200 bop the binky
fb37d68 (master) fuzzy the wuzzy
</code></pre>

<p>I would expect that replacing <code>master</code> with <code>master~1</code> would include one commit prior to the common ancestor, and therefore include the common ancestor,</p>

<pre><code>git log --oneline master~1..HEAD
</code></pre>

<p>but whether I specify <code>master</code> or <code>master~1</code>, the log summary is always the same.</p>

<pre><code>$ git log --oneline master~1..HEAD
1ca070a (HEAD -&gt; feature) foo the bar
03a1047 baz the wuz
c9e8279 fop the sip
6ee6d6f up the ante
5812200 bop the binky
</code></pre>

<p><strong>My question is, how can I include the common ancestor commit in the log summary?</strong> Note that the common ancestor is not necessarily the tip of the <code>master</code> branch.</p>
","2","463213","",""
"21462900","1476878","2014-01-30 17:07:13","1","95","<git><git-commit><git-log>","git log shows only the most recent revision of a file","<p>In order to compare two revisions of a file in a project, I did a <code>git log /path/to/file</code> which only returns the last commit.</p>

<p>When executing <code>git blame /path/to/file</code> I got the trace of each line with the correct sha, dates, and authors.</p>

<p>So the commits are stored but somehow <code>git log</code> doesn't show them.</p>

<p>Any idea on how to fix this?</p>
","1","1476878","0","0"
"13954376","1852702","2012-12-19 14:21:28","26","29523","<git><git-branch><git-log>","How to show git log with branch name","<p>I try <code>git log</code> w/ <code>--decorate</code> and <code>--source</code> options. But still can not get the branch name of commit  <code>2f3cb60</code> and  <code>d7e7776</code>, Why?</p>

<pre><code>#git log 2f3cb60 --graph  --decorate --source --all --oneline
...
* | | | 1920ad5 refs/heads/gpio support gpio lib
| |/ /
|/| |
* | | 2f3cb60   2f3cb60 fix
* | | d7e7776   2f3cb60 fix
| |/
|/|
* | aa4dcfb     refs/remotes/origin/httpd support
* | cfc839d     refs/remotes/origin/httpd add folder
</code></pre>

<p>How do I show git log with branch name?</p>
","2","1852702","0","0"
"31477442","520997","2015-07-17 13:51:14","0","1626","<git><git-log>","git log when HEAD is behind tip?","<p>Let's say that HEAD is at the final commit in master, and the log looks like this</p>

<pre><code>$ git log --oneline
bcaee1c 15 July update
02ff17a add feature x
0910b6f end of weekly update
c2b7189 add 03 july update
737be94 add feature y
</code></pre>

<p>Now I want to go look at the past:</p>

<pre><code>$ git checkout 0910b6f
</code></pre>

<p>now the log shows no hint of the more recent state -- the relative future from HEAD</p>

<pre><code>$ git log --oneline

0910b6f end of weekly update
c2b7189 add 03 july update
737be94 add feature y
</code></pre>

<p>Ok, no problem, I just ""remember"" or ""write down"" that the furthest-ahead commit is <code>bcaee1c</code> and I can get back with a <code>git checkout bcaee1c</code>, but BAMMO, here comes a phone call, a bunch of emergency meetings, a forced reboot, a weekend, and I ""forget"" and / or lose the sticky note.  I come back (much) later with all that mental context blown and start creating away, only to discover later that I've messed up and have a forensics job with reset and revert and rewind.</p>

<p>Can I get <code>git log</code> to show the future of <code>HEAD</code>?  Is there a better git-fu for this scenario?</p>
","1","520997","0","0"
"13965391","155823","2012-12-20 04:36:25","485","311878","<git><branch><git-log>","How do I see the commit differences between branches in git?","<p>I'm on branch-X and have added a couple more commits on top of it. I want to see all the differences between MASTER and the branch that I am on in terms of commits. I could just do a </p>

<pre><code>git checkout master
git log
</code></pre>

<p>and then a </p>

<pre><code>git checkout branch-X
git log
</code></pre>

<p>and visually diff these, but I'm hoping for an easier, less error-prone method.</p>
","2","155823","0","0"
"13970621","739331","2012-12-20 10:56:54","0","247","<php><regex><preg-match><git-log>","Formatting git-log using preg_match","<p>I want to format git-log match in a convenient way.
The output of git-log command is given:</p>

<pre><code>commit 11ae9c97409fb349e2bfa50ed65bd23ec6dbca70
Author: Fabien Potencier &lt;fabien.potencier@gmail.com&gt;
Date:   Wed Jul 11 19:51:30 2012 +0200

    updated VERSION for 2.0.16

commit 6e14d67cb23439d6700f494e29e809811edeeade
Author: Fabien Potencier &lt;fabien.potencier@gmail.com&gt;
Date:   Wed Jul 11 19:50:55 2012 +0200

    update CONTRIBUTORS for 2.0.16

commit 0341492ed566fca8df556573b9664f691c5dff3d
Author: Fabien Potencier &lt;fabien.potencier@gmail.com&gt;
Date:   Wed Jul 11 19:48:12 2012 +0200

    updated CHANGELOG for 2.0.16

commit b18f6f557b5db1e2e6d2c2c0494e0564b91f438d
Author: Fabien Potencier &lt;fabien.potencier@gmail.com&gt;
Date:   Tue Jul 10 15:28:02 2012 +0200

    [Console] fixed wrong phpdoc (closes #4394)
</code></pre>

<p>I want to format as given below:</p>

<pre><code>Fabien Potencier, Wed Jul 11 19:51:30 2012 +0200

    updated VERSION for 2.0.16

Fabien Potencier, Wed Jul 11 19:50:55 2012 +0200

    update CONTRIBUTORS for 2.0.16

Fabien Potencier, Wed Jul 11 19:48:12 2012 +0200

    updated CHANGELOG for 2.0.16

Fabien Potencier, Tue Jul 10 15:28:02 2012 +0200

    [Console] fixed wrong phpdoc (closes #4394)
</code></pre>

<p>for that I wrote a PHP script  as given below.</p>

<pre><code>&lt;?php

$r = shell_exec('git log');

$p = '/commit (.{2})(.{4})(.{6})/';// THIS SHOULD CHANGE!

preg_match_all($p, $r, $match);

unset($match[0]);

$output = array();

foreach($match as $k1=&gt; $v1)

    foreach($v1 as $k2=&gt;$v2)

          @$output[$k2] .= $v2 . ($k1==1 ? ',' : PHP_EOL);

echo implode('', $output);
</code></pre>

<p>I don't have any idea about the pattern I should be used here. Please help me.</p>
","0","739331","",""
"65825379","3288954","2021-01-21 10:22:09","1","31","<git><command-line-interface><git-log>","Extra newline in git log with tformat compared to oneline","<p>Trying to reproduce <code>--oneline</code> using tformat produces an extra newline when combined with other options, for example:</p>
<pre><code>$ git log --oneline --name-status 
c6104f2 (HEAD -&gt; master, origin/master, origin/HEAD) Remove the Slack chat badge, as nobody uses it anymore
M       README
f77d72b Fix SIGSEGV, Segmentation fault when scanning a now unexistent region.
M       ptrace.c
</code></pre>
<pre><code>$ git log --pretty=tformat:&quot;%C(yellow)%h%C(auto)%d %s&quot; --name-status 
c6104f2 (HEAD -&gt; master, origin/master, origin/HEAD) Remove the Slack chat badge, as nobody uses it anymore

M       README
f77d72b Fix SIGSEGV, Segmentation fault when scanning a now unexistent region.

M       ptrace.c
</code></pre>
<p>the extra newlines do not appear without <code>--name-status</code>, but they come out for every extra option I tried.</p>
<p>This was already noted in <a href=""https://stackoverflow.com/questions/25630021/extra-newline-in-git-log-with-tformat"">this 6 years old question</a>, and the answer back then was &quot;nothing can be done&quot;.<br />
I was hoping some new option was introduced in the meantime, or that this annoys enough people that someone knowledgeable can bring the concern to the git project.</p>
","2","3288954","",""
"11159533","207968","2012-06-22 15:40:30","2","76","<xml><git><sitemap><git-log>","How to generate a sitemap from git log?","<p>I use git to store and deploy a static Web site (HTML, CSS, JavaScript, images).</p>

<p>Is there a simple way to extract the last modification date of all files from git log to generate an XML site map?</p>
","1","207968","",""
"47300390","747579","2017-11-15 06:00:44","2","955","<json><git><git-log>","Parse Approved-By from git log or git show","<p>Using <code>--pretty=format</code>, you can format <code>git log</code> or <code>git show</code> stdout as you like.</p>

<pre><code>git log \
--pretty=format:'{%n  ""commit"": ""%H"",%n  ""author"": ""%an &lt;%ae&gt;"",%n  ""date"": ""%ad"",%n  ""message"": ""%f""%n},' \
$@ | \
perl -pe 'BEGIN{print ""[""}; END{print ""]\n""}' | \
perl -pe 's/},]/}]/'
</code></pre>

<p>Example above parses author, commit, date, message values. How can we parse the value of <code>Approved-by</code> which is available when a pull-request is approved. </p>

<p>Even the <a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">official documentation</a> does not mention that </p>
","0","747579","",""
"65844331","1564946","2021-01-22 11:31:28","2","119","<git><git-log>","git: get *new* contributors (authors) list in release/tag","<p>I'm preparing changelog for a release and doing some statistic.</p>
<p>It's quite easy to list contributors from previous release:</p>
<pre><code>git shortlog -s -e -n TAG..
</code></pre>
<p>reviewers:</p>
<pre><code>git log TAG.. | grep -Ei '(reviewed|acked)-by:' |sed 's/.*by: //' | sort | uniq -c | sort -n -r
</code></pre>
<p>committers:</p>
<pre><code>git shortlog -s -e -n -c TAG..
</code></pre>
<p>But how to list new contributors (authors) since <code>TAG</code> (e.g. those who haven't been committing before <code>TAG</code>)?</p>
","0","1564946","",""
"65852566","466738","2021-01-22 20:49:21","0","512","<git><git-log>","git-log: output order of ancestor branches for a merge commit with topological ordering","<p>There is a piece of code in my project that relies on the output of this command:</p>
<pre><code>git log -n 2 --topo-order --pretty=format:&quot;%H&quot;
</code></pre>
<p>This is applied to merge commits (merged pull requests) on master branch and assumes that the result is the hash of the current (merge) commit and the parent commit <strong>from the feature branch</strong>. So eg.</p>
<pre><code>master   a - b - m
          \     /
feature    x - y 
</code></pre>
<p>when executed on merge commit <code>m</code> it is assumed the result will be <code>m y</code> and not <code>m b</code>. I verified by checking multiple such merge commits that indeed it's the case - always the parent from the feature branch is returned. However, in the documentation of <a href=""https://git-scm.com/docs/git-log#Documentation/git-log.txt---topo-order"" rel=""nofollow noreferrer""><code>git-log --topo-order</code></a> I see that no guarantees are made as to which parent branch is printed first.</p>
<p>Can anyone explain how the choice is made which parent branch to print first when <code>git-log --topo-order</code> is used and why does it always show the feature branch first in my use case?</p>
","1","466738","",""
"29100389","1444743","2015-03-17 13:30:36","3","2964","<git><github><git-log>","How to show authors short username with git log?","<p>I try to get the username of the last commit of a repository using<br>
<code>git log -n 1 --pretty=""%an""</code></p>

<p>Some entries in 
<code>git log --pretty=""%an"" | uniq</code>
shows a full username not the short login name of a commiter. I expect the git/github username. </p>

<p>Does there exist a way to force <code>git log</code> to show short author names and not a a maped full name?</p>
","21","1444743","",""
"29118592","1826281","2015-03-18 09:41:51","2","838","<git><git-log>","How to invert git log --author=me? (Without using Perl)","<p>How can I invert</p>

<pre><code>git log --author=me 
</code></pre>

<p>to get all commits which are not from me?</p>

<p>Edit: I can not use Perl
<em>OS: Windows 7, Git Version: 1.9.4</em></p>
","2","1826281","",""
"65888141","10806229","2021-01-25 15:57:11","7","7261","<git><git-log>","git log does not show all commits","<p>I have been learning a lot about the git log lately and would like to write it to a file so I can process it and write a changelog/release notes from it. However, when I write the git log between two commits or two tags I lose a lot of the commits in between. I'm not sure why this is. I checked the GitHub network graph and checked the commit history on GitHub manually and the commits that I lose are commits belonging to the branch, so I am thinking that my commands are wrong or incomplete.</p>
<p>Here is what I have done and tried</p>
<ul>
<li>in git bash, navigate to the directory where the respective .git folder is</li>
<li>check out the respective branch (dev in my case)</li>
<li>see the full history, no merge commits (written to file)<br />
<code>$ git log --pretty=oneline --no-merges --decorate=short &gt; file1.txt</code><br />
This gives me what I need in terms of amount of information; the output looks like this (please ignore the commit messages themselves...):</li>
</ul>
<p>a384d44ff80de33aebd9057f3c99e822440fa545 Adjusted dev version (#13)<br />
6ddf190dd11bcc71552b482b4751acc7c98a74d2 (tag: 0.0.1) 0.0.1<br />
f7fb130f7b3f48d5fc0b2edde2bb888a891c76a6 Back to 0.1.1<br />
881e70c8df9a3df6ec8ee8cba13b39165e9db179 Update DESCRIPTION version<br />
d3dc1169705c5f48748bcd72d07ebd2bf5eff59f Update DESCRIPTION version<br />
b766875b4fcaa978f6ec85129a2542ed5dd44762 Update description file version number to match version tag<br />
ed04156444914785b002b5c94b501ed54b5b99a4 (origin/vd-networkPl) Debugging to fix issue with igraph graph_from_data_frame()<br />
dd96aca4db22d5b9921726795642a2358248526d Write network plot vignettes<br />
64d216700a9df8393eeab0b2c6967554da18a092 Update codex to work with network plot</p>
<ul>
<li>Then I try to narrow it down, so only write the history between two commits or two tags<br />
<code>git log --pretty=oneline --no-merges --decorate=short commit1..commit2&gt; file2.txt</code><br />
<em>or</em><br />
<code>git log --pretty=oneline --no-merges --decorate=short 0.0.0..0.0.1&gt; file3.txt</code><br />
In both cases, I loose hundreds of commit messages. Instead of having a file with hundreds of lines, I get 24. I know that I don't have hundreds of merge commits, so what am I missing here?</li>
</ul>
<p>Sorry I didn't add a reproducible example. All my repositories are private (company regulations) so I wasn't sure how to create a reproducible example.</p>
","3","10806229","0","0"
"11726144","1028230","2012-07-30 17:00:17","4","389","<git><git-diff><git-log><difftool><mergetool>","View full file diff of `x` commits of a single file's history (that's hosted in git)","<p>Say I have a file in git called <code>filex.code</code>, and I want to see the <em>full code</em> of the last <code>x</code> versions of that file with <em>each changed section highlighted</em> -- all in one place.  So an <code>x</code>-paned commit history of <code>filex.code</code>, almost as if I were doing an <code>x</code>-paned diff, but viewing historical versions rather than merging from different branches.</p>

<p>The greater <code>x</code>, the better.  Crossplatform would be great, but any of the Big Three works.  Being able to edit the latest version would also be great, but read-only visualization is plenty.</p>

<p>Note that this is different from a <a href=""https://stackoverflow.com/questions/1786027/how-to-view-file-history-in-git"">simple history</a> of commits to a file, so the otherwise wonderful <a href=""https://stackoverflow.com/a/1321962/1028230""><code>gitk path/to/file</code></a> (or SourceTree or whatever visual git client you love) isn't what I'm looking for.  <a href=""https://stackoverflow.com/a/1786184/1028230""><code>git log -p</code></a> also comes close, and its output tantalizingly includes all the information I'd want, just that it's all in a linear, almost ""procedural"" output format rather than a good, relatively non-hierarchical, visual one like your favorite three-paned GUI'd mergetool's.  </p>

<p>(<strong>Edit:</strong> Another really cool option that ultimately still experiences the shortcomings of only showing each line's latest source &amp; a linear output is <a href=""https://stackoverflow.com/a/3458509/1028230""><code>git blame</code></a>, but it's cool.)</p>

<p>So I'm not precisely looking for <a href=""https://stackoverflow.com/a/255212/1028230"">setting up difftool</a> either, I don't think.  Rather than diffing two known versions of a file, I want to visualize <code>x</code> iterations of historical edits to a single file.</p>

<p>Asking too much?  Is this a WTFA (Write The ""Fantastic"" App [yourself]) situation?</p>

<p>Lesser alternative: Is there a three-paned mergetool that I can trick into displaying the last three commits of a single file?</p>
","0","1028230","0","0"
"11829947","1047741","2012-08-06 14:08:50","2","660","<git><version-control><merge><git-merge><git-log>","git log --follow filename does not show commit changed that file","<p>Here what have I done:</p>

<ul>
<li>Created development branch from master;</li>
<li>Modified several files and committed them;</li>
<li>Merged development branch to master with <code>--no-commit</code> parameter;</li>
<li>Run <code>git reset --hard</code> on several files modified in the development branch. As the result master branch contains only several objects from development branch — i.e. I've merge development changes partially;</li>
<li>I've committed changes in master;</li>
<li>After some time, master branch was updated by other developers and to update my development branch I merged master branch into it.</li>
</ul>

<p>I was ready to fact, that my development objects I've not committed to master on my previous merge will be overwritten by files from master. But in the output of the <code>git log --follow dev-modified-file.txt</code> I cannot see the commit who overwrote my development changes.</p>

<p>Running  <code>git log --follow dev-modified-file.txt</code> on my development branch I can see needed commits with development modifications. But cannot see commits reverting that changes back (actually there is no such commit anyway) but my working tree contains master version of the <code>dev-modified-file.txt</code> file, despite there are commits adding development code, but there are no commits deleting that code.</p>

<p>Why?</p>

<p>And how did code from master branch sneak to the my development branch leaving no traces behind?</p>

<p>P.S. If my description is unclear, please ask questions in comments I will be glad to explain and correct this post accordingly.</p>

<p><strong>EDIT:</strong> After merging my master into development I don't see difference between master and development branch (my omitted changes are gone!) and I don't see commit responsible for that in development branch!</p>

<p>I believe it might be related to merging strategies... But how? You see, how my log in development branch look like:</p>

<ul>
<li>I've added changes to file — file in working folder contain that changes.</li>
<li>I've merged master branch into development — lots of commits came to development branch and my edited file become equal one in the master branch, despite there is no commit responsible for that!</li>
</ul>

<hr>

<p>I have added changes to the file after merge that changes disappear with no traces left! </p>
","3","1047741","",""
"11898882","1563927","2012-08-10 09:29:18","0","657","<git><cherry-pick><git-log>","git shortlog: how to exclude ""(cherry picked from commit ____)"" blah?","<p><code>git shortlog</code> is handy for making a human-readable summary of changes. However, when I cherry-pick changes from the master branch I use the <code>-x</code> flag to <code>git cherry-pick</code> because it records which commit it picked from. This causes some ugliness in the shortlog:</p>

<pre><code>% git shortlog Version-3.5.3..3.5

Dan S (5):
  Fix typo that causes build fail on big-endian archs, thanks Felipe Sateler     (cherry picked from commit 4588258193072cd2fb845f7fb0b4670d6ad5edf2)
  fix build on ARM (where qreal==float); thanks Felipe Sateler     (cherry picked from commit 976d560060185c1e31c9f40660172f0054a4a05c)
  Strip gremlin characters from JITLib wrapForNodeProxy.sc     (cherry picked from commit d0842acae77a90b5eb9811d947ee2dad2282edff)
  choose clipping rather than wraparound for writing integer-format audio     files (libsndfile setting)
  arm build fix: another double-&gt;qreal in QcMultiSlider     (cherry picked from commit 548ad319dddf53e4edac1cfa44b3193027eefda2)
</code></pre>

<p>Is there an easy way to tell <code>git shortlog</code> that we don't want those cherry-pick lines (which are on new lines in the actual log)?</p>

<p>Of course, I know it's possible to filter them out, for example using <code>git shortlog Version-3.5.3..3.5 | sed 's/[(]cherry picked.*$//g'</code>. But it seems that git should be aware of its own annotations and be able to deal with them. Anything I've missed?</p>
","0","1563927","",""
"11992785","1603937","2012-08-16 17:52:18","1","655","<git><msysgit><git-log><git-add>","How to Undo ""git add -A"" in uninitialized local empty repository (while keeping the files on my computer)?","<p>I just started learning Git &amp; Ruby on Rails and from the cmd prompt on my Windows 7 machine, I accidentally did a <code>git add -A</code> under my <code>C:\Users\myusername</code>. </p>

<p>All my files were added, but are untracked locally on Git. Obviously, I don't want to delete them &ndash; they are ALL my user files. However, since it is an empty repo, I can't find how to untrack them and clean up git. <code>git status</code> and <code>git log</code> responses are below.</p>

<pre><code>PS C:\Users\myusername&gt; git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
***All files listed***
nothing added to commit but untracked files present (use ""git add"" to track)

PS C:\Users\myusername&gt; git log
fatal: bad default revision 'HEAD'
</code></pre>
","6","1603937","",""
"29665183","2109534","2015-04-16 04:09:22","30","9056","<git><git-log>","Using git to see all logs related to a specific file extension within subdirectories","<p>I am trying to see the commits in the history of a repository but just for files with an specific extension.</p>

<p>If this is the directory structure:</p>

<pre><code>$ tree
.
├── a.txt
├── b
└── subdir
    ├── c.txt
    └── d
</code></pre>

<p>And this is the full history:</p>

<pre><code>$ git log --name-only --oneline 
a166980 4
subdir/d
1a1eec6 3
subdir/c.txt
bc6a027 2
b
f8d4414 1
a.txt
</code></pre>

<p>If I want to see logs for file with .txt extension:</p>

<pre><code>$ git log --oneline *.txt
f8d4414 1
</code></pre>

<p>It returns only the file that is in the current directory, not in subdirectories. I want to include all possible subdirectories inside the current directory. </p>

<p>I've also tried:</p>

<pre><code>$ git log --oneline */*.txt
1a1eec6 3
</code></pre>

<p>And:</p>

<pre><code>$ git log --oneline *.txt */*.txt
1a1eec6 3
f8d4414 1
</code></pre>

<p>That works for this case, but it is not practical for more generic cases.</p>

<p>And:</p>

<pre><code>$ git log --oneline HEAD -- *.txt
f8d4414 1
</code></pre>

<p>Without success.</p>
","2","2109534","0","0"
"12020232","747050","2012-08-18 16:26:33","1","489","<git><git-log><file-move>","git: view log and changes of moved file","<p>I have file in git and want to check it's history: commits when it was changed and what exactly was changed between this commits.</p>

<p>But: </p>

<ol>
<li>I know that I have renamed the file in the past git history </li>
<li>May be
even have moved between directories.</li>
</ol>

<p>What is the easiest way to check what I want to check?</p>

<p>P.S. I know about this question: <a href=""https://stackoverflow.com/questions/5730460/git-diff-on-moved-file"">git diff on moved file?</a>, but there is not answer what to do if you have a bad memory and don't remember all previous file names.</p>
","0","747050","",""
"30185916","3885376","2015-05-12 08:45:35","5","1949","<git><git-log>","Get list of tasks numbers from git log based on message","<p>Task number = JIRA issue number = **** (E.g.: 7600)</p>

<p>Let's suppose that I have a list of commits having the following messages:</p>

<pre><code>PRJ-7600 - first message
PRJ-8283 - second message
PRJ-8283 - third message
PRJ-1001 - fourth message
PRJ-8283 - fifth message
PRJ-7600 - sixth message
</code></pre>

<p>where the first one is for the oldest commit.</p>

<p><strong>Wanted</strong> output:</p>

<pre><code>1001
7600
8283
</code></pre>

<p>I listed my commits using the following command:</p>

<pre><code>git log --author=""First Last"" --oneline --grep=PRJ --pretty=format:""%s"" | sort
</code></pre>

<p>where</p>

<ul>
<li>committer = author (in this case)</li>
<li><code>--grep=PRJ</code> is specified to ignore the comments that were automatically generated (""<em>Merge branch ...</em>"") (alternative to <code>--no-merges</code>)</li>
<li><code>--pretty=format:""%s""</code> shows only the message (removes the hash)</li>
</ul>

<p><strong>Actual</strong> output:</p>

<pre><code>PRJ-1001 - fourth message
PRJ-7600 - first message
PRJ-7600 - sixth message
PRJ-8283 - fifth message
PRJ-8283 - second message
PRJ-8283 - third message
</code></pre>

<p>Is it possible to extract those numbers (probably using regex or something like substring) showing them only once? </p>

<p><strong>Details:</strong></p>

<ul>
<li>Windows 7</li>
<li>git 1.9.5 (msysgit) -> used from cmd, not from Git Bash console</li>
</ul>
","6","3885376","0","0"
"12569394","66289","2012-09-24 16:46:24","2","5656","<git><git-log>","How to show git changes pushed in the last 24 hours?","<p>I'm familiar with the syntax for <code>git log --since=""24 hours ago""</code> which shows changes that were <strong>committed</strong> (to the authors local repository) in the last 24 hours. </p>

<p>We have a team of developers who are constantly committing locally, and then only pushing those changes every two days or so.  If this is true, then <code>git log --since=""24 hours ago""</code> will never list those changes.  (we're using this for nightly summary e-mails) </p>

<p>What I'd really like to see is: Changes that have been pushed to master in the last 24 hours, and be able to do this without having to manually remember the commit hash of the last time that our summarization script ran. </p>
","0","66289","0","0"
"12593113","425964","2012-09-26 00:51:09","14","20928","<git><git-commit><git-log>","View git changes/diffs of local commits not pushed to remote","<p>I have three <code>Git</code> commits that I committed locally, but have not pushed to GitHub. I would like to view the changes/diffs for all three commits, how do I view all the diffs?</p>

<p>I tried: <code>git log --branches --not --remotes</code></p>

<p>Which shows me the three commits, but not all the diffs/changes of each.</p>

<pre><code>commit c08fbb72ae6a06e8b2ff3dbbb96fb555a43f4136
Author: Justin &lt;justin@mydomain.com&gt;
Date:   Mon Sep 10 18:17:02 2012 -0700

    Updated order of requires in Requires.php

commit 041fe19a48269a8aea2ccf90f53568893d4e0158
Author: Justin &lt;justin@mydomain.com&gt;
Date:   Mon Sep 10 17:56:42 2012 -0700

    Checking for app.config.php in Requires.php

commit 61c103a8a122bcde2311d081a8340ee1dd71997c
Author: Justin &lt;justin@mydomain.com&gt;
Date:   Mon Sep 10 17:42:20 2012 -0700

    Version bump 0.4.0. See CHANGELOG.md
</code></pre>

<p>Thanks for the help.</p>
","1","425964","0","0"
"12631720","1288760","2012-09-27 23:50:29","10","3510","<git><version-control><git-log>","How to make 'git log --oneline' show which commit messages are multiline","<p>I find myself doing <code>git log --oneline</code> quite often to get a quick glance at changes I am about to push <em>to</em> or merge <em>from</em> the remote. Is it possible to append some identifier (such as ""[...]"") to mark that commit message as a multiline one, so I can know that there is more information there?</p>

<p>Basically, what I want is this:</p>

<pre><code>e1140de Some commit message
d1f58d1 Some multine commit message [...]
736f778 Some other commit message
</code></pre>
","0","1288760","0","0"
"18868847","2790838","2013-09-18 09:42:06","1","77","<git><git-log>","Can git log ignore pieces of text matching a given regex when doing rename detection?","<p>I have a large commit in a git repository which renames a lot of files and restructures the directory layout. At the same time, there are extensive changes to the comments in the source files. Now I would like to find out which file ended up where.</p>

<p>I have tried to use git log for this like so:</p>

<pre><code>git log -B -M50% -C50% -w --summary -1 -l 10000 .
</code></pre>

<p>This helps a bit but for files containing many comments it doesn't detect the rename. For this I would have to lower the similarity to 20% or less, which gives a lot of false positives.</p>

<p>Now, is there a way to tell git to ignore the comments before calculating the similarity index? </p>
","0","2790838","",""
"66654638","13742862","2021-03-16 11:46:27","0","28","<git><git-log><git-rev-list><git-mv>","git: find most recent non-rename commit to a file","<p><code>git rev-list</code> outputs all version of a file path (stops at renames), <code>git --follow --pretty=%h</code> outputs all versions across moves/renames, but how can I find (non-manually) the latest commit that modified the content of a file (preferably excluding <code>chmod</code>'s too)?</p>
<p>In my case I have a file that was renamed several times, but I want to rebase just before the latest commit that changed it.</p>
","2","13742862","",""
"59385247","534006","2019-12-18 03:51:38","2","249","<git><git-log><git-filter-branch>","git log --all doesn't work inside a filter-branch","<p>I'm writing a <code>git filter-branch --tree-filter</code> command that uses <code>git log --follow</code> to check if certain files should be kept or deleted during the filtering.</p>
<p>Basically, I want to keep commits that contain a filename, even if this file was renamed and/or <strong>moved</strong>.</p>
<p>This is the filter I'm running:</p>
<p><code>git filter-branch --prune-empty --tree-filter '~/preserve.sh' -- --all</code></p>
<p>This is the command I'm using inside <code>preserve.sh</code>:</p>
<p><code>git log --pretty=format:'%H' --name-only --follow --all -- &quot;$f&quot;</code></p>
<p>The result is that a commit that creates a file that is later moved to another path is stripped out of history when I'm searching for the file in the new path, which shouldn't happen. For example:</p>
<blockquote>
<p>commit 1: creates <code>foo/hello.txt</code>;</p>
<p>commit 2: moves <code>foo/hello.txt</code> to <code>bar/hello.txt</code>;</p>
<p>using <code>git filter-branch</code> passing <code>bar/hello.txt</code> yields a history with only commit 2.</p>
</blockquote>
<p>At first, I thought the problem was happening because I wasn't using <code>--all</code> in <code>git log</code>, that is, when analyzing <em>commit 1</em> it wouldn't find <code>foo/hello.txt</code> because it was only looking in past history where <code>bar/hello.txt</code> isn't mentioned anywhere. But then I added <code>--all</code>, which looks to all commits (including the &quot;future&quot; ones), however, nothing changed.</p>
<p>I checked out to the commit where the file is being created, ran that log command and it worked (listed both <code>foo/hello.txt</code> and <code>bar/hello.txt</code>), so there's nothing wrong with it. I also logged the results of the log command when it's run by filter-branch and in this case I can see that in <em>commit 1</em> the file is not found (only <code>bar/hello.txt</code> is listed).</p>
<p>I think this problem happens because internally git is copying each commit to a &quot;new repo&quot; structure so by the time it's analyzing <em>commit 1</em> the newer commits don't exist yet.</p>
<p>Is there a way to fix this, or another way to approach the problem of re-writing history while preserving renames/moves?</p>
<p>I'm running a modified version of the script found in <a href=""https://stackoverflow.com/a/57939162/534006"">this answer</a>.</p>
","0","534006","0","0"
"2899187","88739","2010-05-24 18:13:48","3","1320","<git><msysgit><git-log>","msysGit: Why does git log output blank lines?","<p>It appears to insert less blank lines the closer I type the command to the bottom of the terminal window.  If I type it at the top of the terminal window, it inserts nearly a full window height of blank lines; if I type it at the very bottom, no blank lines are inserted.  </p>

<p>It seems like the pager program is pushing output to the bottom of the terminal window, but I want the output to be right below my command or at the top, like in Linux git.</p>

<p>I can get expected behavior by using <code>git --no-pager log</code>, but what if I want to use a pager?</p>
","2","88739","",""
"40697663","418966","2016-11-19 20:37:39","50","45525","<git><git-log>","Show commit size in git log","<p>How can I get commit size shown in the output of <code>git log</code>?</p>

<p>You may understand <em>commit size</em> as the diff between its parents and itself, or anything reasonable that tells you <em>how big</em> the commit is.</p>

<p><code>git log</code> has a <code>--log-size</code> option but its the size of the log message, not the commit itself.</p>
","10","418966","0","0"
"14104998","308079","2012-12-31 18:34:02","1","877","<powershell><git-log>","Escaping in Powershell for a git log","<p>I know the escape character is (`), the backtick, but even if I try to use it toe escape the &lt; characters I get error...</p>

<pre><code>git log ORIG_HEAD --no-merges --date=short --pretty=""format:&lt;tr&gt;&lt;td&gt;%h&lt;/td&gt;&lt;td&gt;%ad&lt;/td&gt;&lt;td&gt;%an&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;"" &gt; test.txt
&lt; was unexpected at this time.
</code></pre>

<p>How can I go about formatting my git log as above?</p>
","0","308079","",""
"21822466","1957448","2014-02-17 06:45:14","0","108","<git><git-branch><git-log>","What is this git log --graph indicating?","<p>I have the following branches:</p>
<ul>
<li><p>master</p>
</li>
<li><p>upgadingToJquery1.4</p>
</li>
<li><p>handlingExceptions</p>
</li>
</ul>
<p>I was working on the <strong>upgradingToJquery1.4</strong> branch and had made a few commits.</p>
<p>I created another branch <strong>handlingExceptions</strong> made some changes and committed them.</p>
<p>Then I switched back to master and merged the <strong>handlingExceptions</strong> branch. Surprisingly I think the changes in <strong>upgradeToJquery1.4</strong> branch also got merged. Then to confirm I merged the <strong>upgradeToJquery1.4</strong> branch and it said up to date.</p>
<p>Can someone just explain what the graph is indicating here?</p>
<pre><code>git log --oneline --decorate --graph --all
    *   a54bd6d (HEAD, master) Merge branch 'upgradeToJquery1.4'
    |\
    | * d4f762c (upgradeToJquery1.4) main.sass updated
    * |   bcf7a4f Merge branch 'handlingExceptions'
    |\ \
    | * | 471c1ad (handlingExceptions) the postLogin method in the accountController catches the exceptions and now prov
    | |/
    | * 76145d1 1. css/images - Jquerymobile icon files
    | * 34bc7b9 custom-jqueryMobile.js - to override jquerymobile defaults. Currently added transitions doesn't work with p
</code></pre>
","1","1957448","",""
"59691065","257924","2020-01-11 02:06:53","1","636","<git-log>","What does git log --since/--until do when there is no HH:MM:SS supplied in the value?","<p>Reference the answer at <a href=""https://stackoverflow.com/a/19987337/257924"">https://stackoverflow.com/a/19987337/257924</a> to the question of <a href=""https://stackoverflow.com/questions/19987099/how-do-i-view-all-commits-for-a-specific-day"">How do I view all commits for a specific day?</a> </p>

<p>What is the value of HH:MM:SS referenced below that would make the output of the following command be true across all git repositories regardless of history and content:</p>

<pre><code>git log --since='2019-12-25'          --until='2019-12-26 00:00:00'
git log --since='2019-12-25 HH:MM:SS' --until='2019-12-26 00:00:00'
</code></pre>

<p>I ask because the man-page for git-log does not provide that detail (or I missed it).</p>

<h1>TL;DR Experiment</h1>

<p>Try this on your own git repos, and be as baffled by the output as I am by the fact that all of the one after the first combination yield differences in git log output:</p>

<pre><code>$ for x in """" ""00:00:00"" ""23:59:59""
do
  for y in """" ""00:00:00"" ""23:59:59""
  do
    printf ""x %-10s y %-10s --&gt; "" ""&lt;$x&gt;"" ""&lt;$y&gt;""
    diff &lt;(git log --since=2019-12-25 --until=2019-12-26 | sha1sum) &lt;(git log --since=""2019-12-25 $x"" --until=""2019-12-26 $y"" | sha1sum) | wc -l
  done
done
x &lt;&gt;         y &lt;&gt;         --&gt; 0
x &lt;&gt;         y &lt;00:00:00&gt; --&gt; 4
x &lt;&gt;         y &lt;23:59:59&gt; --&gt; 4
x &lt;00:00:00&gt; y &lt;&gt;         --&gt; 4
x &lt;00:00:00&gt; y &lt;00:00:00&gt; --&gt; 4
x &lt;00:00:00&gt; y &lt;23:59:59&gt; --&gt; 4
x &lt;23:59:59&gt; y &lt;&gt;         --&gt; 4
x &lt;23:59:59&gt; y &lt;00:00:00&gt; --&gt; 4
x &lt;23:59:59&gt; y &lt;23:59:59&gt; --&gt; 4
$ 
</code></pre>
","0","257924","",""
"3194240","321973","2010-07-07 11:28:53","0","835","<git><history><commit><patch><git-log>","How can a patchfile created with `git-log -p <filename>` be applied to create all the commits included?","<p>Background: <a href=""https://stackoverflow.com/questions/3192828/is-it-possible-to-move-a-bunch-of-files-from-one-git-repository-to-another-while/3192912#3192912"">this question</a>. <code>git apply &lt;patchfile&gt;</code> just recreates the file but without committing the history, which in this case would be desireable. Is there any switch for <code>git-apply</code> to do so? Or is there a way to convert the patchfile into a <code>git-am</code> compatible file? (Currently, git-am complains ""Patch format detection failed"")</p>
","3","321973","",""
"31680889","2639801","2015-07-28 15:31:12","1","2183","<git><git-log><git-show><git-diff-tree>","git show -- output only displays summary","<p>I'm having trouble with all git commands that display the log/history of a repository. This issue is ONLY limitied to one of my repositories. I have several others that work just fine. </p>

<p>For the repo with issues, I only see the summary of the commit, where as the default behavior is to display the diff as well. </p>

<pre><code>$ git show
  commit bc8865f8b16ccf9eerrt678df99a4b89e73c0545
  Merge: 677f483 3e8617d
  Author: Some Author
  Date:   Thu Jul 23 07:56:28 2015 -0400

  Merge branch 'Some_branch' ....
</code></pre>

<p>Similarly, the <em>git diff-tree</em> command works fine with all repos except for this one. </p>

<p>Normal Repo:</p>

<pre><code>git diff-tree --pretty=format:%an %cn 5cff917e
Joe Black Joe Black
:040000 040000 98c97ee8929b487ae14ada67c1932205a80cfc3f 719f1764f123d462b20707f5f7740e4f473b2b47 M  oracle
</code></pre>

<p>Repo with issues:</p>

<pre><code>$ git diff-tree --pretty=format:%an 39ebdeb8f29

jblack@DFX1 ~/repositories/RepoName(master)
</code></pre>
","3","2639801","",""
"31685411","1197249","2015-07-28 19:27:22","1","52","<git><version-control><grep><git-log>","How can I find which commit removed a file from git?","<p>If I have a file under git e.g. an image png that was removed from the repository, how can I find which commit removed it?<br>
Also I would like to search even if I am not 100% about the file name e.g. if it was <code>some_image.png</code> or <code>some_image_icon.png</code> for instance</p>
","0","1197249","",""
"41054099","1426157","2016-12-09 06:06:44","0","114","<github><git-log>","how to display the modified file path in git log","<p>I have a GitHub repository with many different folders containing many sub folders and files. After making a commit to a particular file it would be really helpful if the git log shows the modified file name along with the file path inside the repository.</p>

<pre><code>for example like : repo/&lt;path-to-the-modified-file&gt;
</code></pre>

<p>Does any know how to display the modified file path in the <code>git log</code></p>
","0","1426157","",""
"59888730","986160","2020-01-23 23:59:55","2","2843","<bash><git><shell><git-log>","How to use git shortlog to aggregate user commit stats over multiple repositories in a single directory?","<p>I have a directory with a lot of Git repo subdirectories in it and I would like to accumulate information similar to </p>

<pre><code>git shortlog -sne --no-merges
</code></pre>

<p>for all the repos in it sorting the users by all their total commits.</p>

<p>e.g for repo 1:</p>

<pre><code>430 Author 1 &lt;author1@email.com&gt;
 20 Author 2 &lt;author2@email.com&gt;
</code></pre>

<p>e.g for repo 2:</p>

<pre><code>123 Author 1 &lt;author1@email.com&gt;
 92 Author 2 &lt;author2@email.com&gt;
</code></pre>

<p><strong>total result:</strong></p>

<pre><code>453 Author 1 &lt;author1@email.com&gt;
112 Author 2 &lt;author2@email.com&gt;
</code></pre>

<p>Is it possible to do that with git built-in tools?</p>

<p>I was able to go outside of the repo folders and run that for a single folder:</p>

<pre><code>git -C repoFolder shortlog -sne --no-merges
</code></pre>
","1","986160","0","0"
"48783827","1654526","2018-02-14 09:37:31","0","118","<git><git-log>","why git does not show latest log of a inner directory from root directory?","<p>I'm experiencing the following situation:</p>

<pre><code>user@host:~myproj$ git log . | head
commit 824982108230598203958209
Author: me &lt;me@me&gt;
Date:   Web Feb 14 00:17:13 2018+0100

   My comment of commit B

commit 215237562352395782927652
Author: me &lt;me@me&gt;
Date:   Web Feb 13 00:05:21 2018+0100

   My comment to last common commit C

user@host:~myproj$ git log inner/directory | head
commit 124975408286439738467394
Author: me &lt;me@me&gt;
Date:   Web Feb 14 10:08:35 2018+0100

   Comment to a more recent commit A

commit 215237562352395782927652
Author: me &lt;me@me&gt;
Date:   Web Feb 13 00:05:21 2018+0100

   My comment to last common commit C
</code></pre>

<p>That is if I run <code>git log</code> from root directory I see commit B and C, if I run <code>git log</code> from an inner directory I see commit A and C, with A more recent than B.</p>

<p>I'm also in the following situation:</p>

<pre><code>user@host:~myproj$ git status
On branch master
Your branch is up-to-date with 'origin/master'
nothing to commit, working directory clean
user@host:~myproj$ git pull
Already up-to-date.
user@host:~myproj$ git push
Everything up-to-date
</code></pre>

<p>I thought that asking logs from root directory would have shown every commit in all sub-directory of the project; since now I see I'm wrong, how can I have a full list of commit history order by commit date?</p>

<p>Also, why this is happening? Is this a normal git behavior or am I m[ie]ssing something?</p>
","5","1654526","0","0"
"35820818","3010223","2016-03-05 22:43:07","6","4920","<git><git-bash><git-log>","How do I go to the next command in Git Bash after using git log?","<p>When using Git Bash, I type the command:</p>

<pre><code>git log
</code></pre>

<p>It shows me all the logs. But now I want to do a second command. So I hold the down arrow to get to the bottom of the logs and it just says <code>(END)</code>. How do I get to the next line so I can enter my next command?</p>
","0","3010223","",""
"35823373","6024301","2016-03-06 05:08:24","0","1243","<python><git><function><datetime><git-log>","Python- Writing a function using git log output","<p>I have created a date variable for the commit date from a git log but I don't know how to convert this date into the week number in Python. I am just not understanding how to create a function in python that would create a new variable with values that draw on another variable. Below is my code- As you'll see I created a variable for the date of a commit and I want to use that date to find out the week number. I want to do this for every commit date and then print the results so I can view them.  </p>

<pre><code>import git
g = git.Git(""dir_repo"")
loginfo = g.log('--since=2015-03-01', '--date=short', '--pretty=%cn %cd')

datecom=g.log('--since=2015-03-01', '--date=short','--pretty=%cd')

import datetime

def week():
    return datetime.isocalendar(); 
weeknum=week(); 

print week(datecom)
</code></pre>

<p>I receive the following error: </p>

<pre><code>$ python test23.py
Traceback (most recent call last):
  File ""test23.py"", line 13, in &lt;module&gt;
    weeknum=week();
  File ""test23.py"", line 12, in week
    return datetime.isocalendar();
AttributeError: 'module' object has no attribute 'isocalendar'
</code></pre>
","0","6024301","",""
"48806659","9308769","2018-02-15 11:54:32","-1","52","<git><git-log>","How can I list related branches in git log","<p>I am looking for a possibility to show the history of a given file together with the information in which branch the given commit is in.</p>

<p>Given this git repositority:</p>

<pre><code>$ git log --graph --all --decorate=full --pretty=oneline --abbrev-commit 
* 3b116ab (refs/heads/br2) x
| * 8777a0a (HEAD -&gt; refs/heads/br1, refs/heads/branch) g
| * 9be1f38 d
|/ 
| * 3a30d9c (refs/heads/master) d
| * e678c2f c
|/  
* faa3666 b
* 03ea6ad a
</code></pre>

<p>I need the history of a given file</p>

<pre><code>$ git log --graph --all --decorate=full --pretty=oneline --abbrev-commit -- a
* 9be1f38 d
| * e678c2f c  
|/  
* faa3666 b
* 03ea6ad a
</code></pre>

<p>and the information in which branch which commit is in</p>

<pre><code>$ git branch -a
* br1
  br2
  branch
  master

$ git branch -a --contains 9be1f38
* br1
  branch

$ git branch -a --contains e678c2f
  master

$ git branch -a --contains faa3666
* br1
  br2
  branch
  master
</code></pre>

<p>combined in one overview, something like</p>

<pre><code>$ git magical-command
+ refs/heads/br2
| + HEAD -&gt; refs/heads/br1, refs/heads/branch
| * 9be1f38 d
|/ 
| + refs/heads/master
| * e678c2f c
|/  
* faa3666 b
* 03ea6ad a
</code></pre>

<p>Of course in reality there would be much more commits not changing my file ""a"".</p>

<p>I think that might be not so unusual but I did not find anything like this. So any hint would be welcome.</p>
","0","9308769","",""
"41175211","15441","2016-12-15 23:49:56","2","429","<git><awk><pipe><git-log><git-cherry>","How do I use git cherry to get committer email?","<p><code>git cherry</code> is superior to <code>git log</code> for getting the difference between two branches. The problem is that its output is limited. </p>

<p>I'm trying to extract the email address (or user) associated with a commit. Here is what I'm doing. </p>

<pre><code>git cherry firstbranch secondbranch | awk '/^+/ {print $2}' | awk '{ system(""git show $1""); }'
</code></pre>

<p>All I get is the details of one commit. Instead of every commit that I do get with: </p>

<pre><code>git cherry firstbranch secondbranch | awk '/^+/ {print $2}'
</code></pre>

<p>Something is going wrong with the second pipe operation. </p>

<p>My question is: <strong>How do I use git cherry to get committer email?</strong></p>
","0","15441","",""
"31709785","10608","2015-07-29 19:47:10","3","114","<git><git-log>","git line log (git -L) suppress diff","<p><code>git log --format=%H -L12,45:file.txt -s</code> will always output the diff for each commit. It seems to ignore the <code>-s</code> flag when doing line-based logging. How can I fix this?</p>

<p>git version 2.1.4 as well as 1.9.4.msysgit.1 . Both on Windows.</p>
","1","10608","",""
"22313343","1027004","2014-03-10 23:14:08","5","2579","<git><git-log>","git graph what do the lines and asteriks denote?","<p>Trying to understand git in a bit more detail. In the graph output of git log, what do the lines and dots mean? Why are the dots only on the left for part of it, and only on the right for another part? Is it because I ran the command from a specific branch? Would it be different form master? Is a pull merge shown differently?</p>

<p><img src=""https://i.stack.imgur.com/h0M5k.png"" alt=""enter image description here""></p>
","0","1027004","0","0"
"21858691","10608","2014-02-18 15:49:19","3","215","<git><branch><git-branch><git-log>","can I delete git branch, but not delete the branch reflogs?","<p>Sometimes I want to clean up my personal git repo by deleting all my locally made branches. However, I like to rebase before pushing changes. With a rebase by itself:</p>

<ol>
<li>I clean the commit history before pushing to others</li>
<li>I can still access the previous tip of the branch via <code>git reflog</code></li>
</ol>

<p>But if I delete the branch, I delete the reflog too (thus loosing access to those commit objects). Is there a way to delete the branch, but keep the reflog?</p>

<p>Currently, I solve the problem by making a secondary repo on my machine called <code>backup</code> and I push there before rebasing and any other 'destructive' actions. That way the backup's reflog keeps all activity. But I would rather just keep the reflogs in my main repo if possible.</p>
","3","10608","0","0"
"40859263","1733857","2016-11-29 06:37:11","-1","207","<git><github><git-log>","Get the merge files names in the git log command","<p>We are using the below command to get the commits for a particular date range. However it is able to identify the merge (commits) from a different branch. But its not providing the merge list of file names in the output.</p>

<p>Sample command which we are using is given below,</p>

<pre><code>git log --after=""11/29/2016"" --before=""11/20/2016""  --pretty='format:%cd %h' --name-status --date=short-local
</code></pre>

<p>How to get the list of merge file names in the above command.</p>
","2","1733857","",""
"4393527","","2010-12-08 23:50:48","110","49957","<git><history><dvcs><rename><git-log>","Why might git log not show history for a moved file, and what can I do about it?","<p>I've renamed a couple of files using <code>git mv</code>, used <code>git stash</code>, had a quick look at HEAD (without changing it) then did <code>git stash pop</code> to get the whole lot back again. My moves had disappeared from the commit list, so I redid them with <code>git rm</code> and the commit message claimed git had spotted the rename was a rename. So I thought no more of it.</p>

<p>But now, post-commit, I can't get at the history of the moved files! Here's what git says about the commit in question:</p>

<pre><code>~/projects% git log --summary
commit de6e9fa2179ae17ec35a5c368d246f19da27f93a
Author: brone
Date:   Wed Dec 8 22:37:54 2010 +0000

    Moved R_DebugUI into runtime

 delete mode 100644 test/R_DebugUI_iOS.h
 delete mode 100644 test/R_DebugUI_iOS.m
 create mode 100644 system/runtime/src/R_DebugUI_iOS.h
 create mode 100644 system/runtime/src/R_DebugUI_iOS.m

 &lt;&lt;snip older commits&gt;&gt;
 ~/projects%
</code></pre>

<p>I'm now trying to get the history of one of these moved files, so I can look at an old version, but I don't get anything very useful:</p>

<pre><code>~/projects/system/runtime/src% git log --follow --find-copies-harder -M -C R_DebugUI_iOS.m
commit de6e9fa2179ae17ec35a5c368d246f19da27f93a
Author: brone
Date:   Wed Dec 8 22:37:54 2010 +0000

    Moved R_DebugUI into runtime
~/projects/system/runtime/src% 
</code></pre>

<p>(I've also tried it without <code>-M</code>, <code>-C</code> and <code>--find-copies-harder</code>, but to no avail.)</p>

<p>I can get its history under its old name, which stops at the point it was deleted from its old location:</p>

<pre><code>~/projects% git log --summary --follow --find-copies-harder -M -C -- test/R_DebugUI_iOS.m
commit de6e9fa2179ae17ec35a5c368d246f19da27f93a
Author: brone
Date:   Wed Dec 8 22:37:54 2010 +0000

    Moved R_DebugUI into runtime

 delete mode 100644 test/R_DebugUI_iOS.m

commit 32a22d53c27e260714f759ecb3d3864e38b2e87f
Author: brone
Date:   Tue Dec 7 23:52:51 2010 +0000

    Can set debug UI's alpha.

&lt;&lt;snip older commits&gt;&gt;
~/projects%
</code></pre>

<p>So I'm not completely stuck this time, but I wouldn't fancy having to do this kind of thing all the time. (I anticipate having a fair number of files that will move at least once in their life.)</p>

<p>Am I doing something wrong? The old copy of the file and the new copy are 98.8% the same (2 lines out of 166 changed). My understanding is that git should be able to track the file in this case, because it infers rename operations rather than storing them explicitly, and the files are similar enough that I believe it should consider them the same.</p>

<p>Is there anything I can do to fix this?</p>
","5","","0","0"
"4649356","463038","2011-01-10 17:04:40","564","457142","<git><branch><git-branch><git-log>","How do I run git log to see changes only for a specific branch?","<p>I have a local branch tracking the remote/master branch. After running <code>git-pull</code> and <code>git-log</code>, the log will show all commits in the remote tracking branch as well as the current branch. However, because there were so many changes made to the remote branch, I need to see just the commits made to the current local branch.</p>

<p>What would be the Git command to use to only show commits for a specific branch?</p>

<p>Notes:</p>

<p>Configuration information:</p>

<pre><code>[branch ""my-branch""]
  remote = origin
  merge = refs/heads/master
</code></pre>
","1","463038","0","0"
"41114195","1733857","2016-12-13 05:20:12","0","40","<git><github><git-log>","How to fetch the list of merge files along with other commits within a GIT branch using git log command?","<p>How to fetch the list of merge files <strong>along with other commits</strong> within a GIT branch using git log command? For example, the sample command is given below,</p>

<p><strong>git log --after=""11/29/2016"" --before=""11/20/2016""  --pretty='format:%cd %h' --name-status --date=short-local</strong></p>
","2","1733857","0","0"
"22124870","1035279","2014-03-02 07:06:33","3","329","<git><github><git-branch><git-log><git-checkout>","How does git log work across branches?","<p>I'm using a github repository and it has a master branch and a demo branch. All was good and both the master version and the demo version of the code are in use (master on a staging site, and the demo on a demo site). A live site runs on a tagged commit.</p>

<p>While making changes, I messed something up which did not reveal itself for a while so I needed to start looking through old commits to see how I introduced the problem.</p>

<p>On Github I saw commits for the demo branch as follows:</p>

<pre><code>Changed logos to xxx ones
8c4a3eab22 Browse code 
pwhipp authored 3 days ago
Feb 04, 2014
Paul Whipp
Changed archetype age_default to default to zero (and set all null va… …
6e4c9e8864 Browse code 
pwhipp authored a month ago
Feb 03, 2014
Paul Whipp
Added demo.xxx allowed domain for RED
2f72e3b05a Browse code 
pwhipp authored a month ago
</code></pre>

<p>So on a local repo, pulled up to date,  I do ""git checkout 8c4a3eab22"". Then when I invoke git log locally, I see:</p>

<pre><code>(red)~/wk/red $ git status
# HEAD detached at 8c4a3ea
(red)~/wk/red $ git log
commit 8c4a3eab22dc2ce9708c9aae00751e558ae81dd3
Author: pwhipp &lt;paul.whipp@gmail.com&gt;
Date:   Thu Feb 27 10:55:21 2014 +1000

    Changed logos to xxx ones

commit 2f72e3b05a005738d77ed12be475634aadf76b49
Author: pwhipp &lt;paul.whipp@gmail.com&gt;
Date:   Mon Feb 3 10:58:08 2014 +1000

    Added demo.xxx allowed domain for RED
</code></pre>

<p>Why is 6e4c9e8864 not shown by git log? It exists (I can check it out) but the differences between it and 8c4a3eab22 seem far greater than those indicated when I browse 6e4c9e8864 on github so I'm thinking there may be other commits I'm not seeing.</p>

<p>Do I need to RTFM somewhere to understand how the commits are being reported in the log call across the different branches?</p>
","4","1035279","0","0"
"59943206","3865284","2020-01-28 06:27:50","1","186","<gitlab><git-log><git-show>","How to find deleted files in a single commit in gitlab","<pre><code>git show -m -1 --name-only --pretty=format: --stat --relative --first-parent commit_id
</code></pre>

<p>I am using above command to list all the files in a commit. It is listing all the deleted files as well.  </p>

<p>I want to remove deleted files from my list. </p>

<p>Is there a way to exclude deleted files from git show command?<br>
Or is there a way to list deleted files from a commit id?</p>
","1","3865284","0","0"
"22247676","243104","2014-03-07 10:34:08","3","114","<git><scripting><git-log>","How can I access the information shown in git log --stat using only plumbing commands?","<p>I'm writing a script that uses the insertion + deletion information in <code>git log --stat</code>, but I've realised that I should be using <a href=""https://www.kernel.org/pub/software/scm/git/docs/#_low_level_commands_plumbing"" rel=""nofollow"">plumbing commands</a>, while git-log is a <a href=""https://www.kernel.org/pub/software/scm/git/docs/#_high_level_commands_porcelain"" rel=""nofollow"">porcelain command</a>.</p>

<p>What plumbing command or commands can I use to get access to the same information that git-log is using to produce those stats?</p>
","1","243104","0","0"
"41370429","47552","2016-12-28 22:12:57","0","95","<git><merge><git-log><merge-conflict-resolution><git-merge-conflict>","Why does path-restricted 'git log' omit merge commits with interesting conflict resolutions?","<p>If a file's history includes a merge commit with an ""interesting"" conflict resolution, <code>git log</code> will skip over it.  Why is this, and how can I make that commit be included?</p>

<p>(By ""interesting"", I mean a resolution that doesn't just take the version from <code>HEAD</code> or <code>MERGE_HEAD</code> verbatim.)</p>

<p>For example, in <a href=""https://github.com/jerith666/merge-log-test"" rel=""nofollow noreferrer"">this sample repository</a>,  I've prepared a simple history that illustrates the problem:</p>

<pre><code>$ git log --oneline --graph 
* 4a69f452 add -stuff at C and G
*   9fc8e8bf resolve E-alpha + E-beta as E-gamma
|\  
| * 95bc62e9 add -beta suffix on lines E and J
* | 465abd9e add -alpha suffix on lines A and E
|/  
* f43dc68c initial ten-line A..J file
</code></pre>

<p>The merge commit resolved the conflict by introducing an entirely new version of the <code>E</code> line:</p>

<pre><code>$ git show 9fc8e8bf -U0 | grep -A100 ^@@
@@@ -5,1 -5,1 +5,1 @@@
- E-alpha
 -E-beta
++E-gamma
</code></pre>

<p>However, <code>git log</code> totally glosses over this.  The commits it lists fail to explain the current state of the <code>E</code> line in <code>test.txt</code>:</p>

<pre><code>$ git log --oneline 4a69f452 test.txt
4a69f452 add -stuff at C and G
95bc62e9 add -beta suffix on lines E and J
465abd9e add -alpha suffix on lines A and E
f43dc68c initial ten-line A..J file
</code></pre>

<p>Is there an option I can give to <code>git log</code> that will make it include the merge commit?</p>

<p>Other commands, like <code>git blame</code>, do show that the <code>E</code> line was last touched in the <code>9fc...</code> merge commit:</p>

<pre><code>$ git blame -L5,5 4a69f452 test.txt
9fc8e8bf9 (Matt McHenry 2016-12-28 16:55:10 -0500 5) E-gamma
</code></pre>

<p>(Note: the above outputs are produced by git version <code>2.11.0</code>.)</p>
","8","47552","",""
"60093746","2927522","2020-02-06 11:17:13","4","203","<git><git-log>","How to prepend a character to every line of the body of a git commit","<p>Our code review tool uses Markdown for the CR description. I want to automate
writing these descriptions by taking information from the git commits being
reviewed.</p>

<p>Say I have a git commit with the following subject and body:</p>

<pre><code>This is the subject line

This is a long paragraph spanning multiple lines wrapped to 80
characters. 

This is a second paragraph.
</code></pre>

<p>I want to create a git log formatter that produces the following output from
this commit:</p>

<pre><code>`&lt;commit short hash&gt;` - This is the subject line

&gt; This is a long paragraph spanning multiple lines wrapped to 80
&gt; characters.
&gt; 
&gt; This is a second paragraph.
</code></pre>

<p>I have tried the following command to produce this output but I can not find a
way to prepend the <code>&gt;</code> to every line of the body</p>

<pre><code>$ git log --format='`%h` - %s%n%n&gt; %b%n' 'HEAD^..HEAD'
`e8aa4cf` - This is the subject line

&gt; This is a long paragraph spanning multiple lines wrapped to 80
characters.

This is a second paragraph.
</code></pre>

<p>Another option I tried was to use <code>w(80,2,2)</code> to pad the body but this is
also missing the <code>&gt;</code> on each line.</p>

<pre><code>$ git log --format='`%h` - %s%n%n&gt;%w(80,2,2)%b%n' 'HEAD^..HEAD'
`e8aa4cf` - This is the subject line

&gt;  This is a long paragraph spanning multiple lines wrapped to 80 characters.

  This is a second paragraph.
</code></pre>

<p>Can this be done using <code>git log --format='X'</code>?</p>
","0","2927522","0","0"
"22534116","1278913","2014-03-20 13:13:39","1","97","<git><logging><git-log>","How to I get all the log messages for the last week for a given file in git?","<p>I want to list all the commits against a specific file for the last week.</p>
","1","1278913","",""
"30377486","3785777","2015-05-21 15:00:23","2","105","<git><git-log>","How to view commits from one day only in a pretty format in git?","<p>I'd like to view commit history in the console that:</p>

<ol>
<li>Is only from one day, e.g. May 14,</li>
<li>Each row contains only: a) commit message, b) commit SHA, c) author.</li>
</ol>

<p>I've tried <code>git log --after=""May 13"" --before=""May 15"" --pretty=oneline
</code></p>

<p>but it does not give the author of the commit.</p>
","0","3785777","",""
"30421996","3658288","2015-05-24 09:33:37","4","785","<git><git-log>","For each commit hash use git show","<p>I need to log all my git commits for my teacher. He gave me the following example:</p>

<pre><code>git log --pretty=""%H"" --author=you | while read commit_hash 
                                     do git show $commit_hash
                                     done &gt; log.txt
</code></pre>

<p>I know that the ""you"" part needs to be my name and the git command works fine but after the pipe it returns with a greater than sign and doesn't do anything. I also understand that it should use every commit hash for the <code>git show</code> command. Any suggestions? I'm also using OSX.</p>
","0","3658288","0","0"
"30443906","931156","2015-05-25 18:14:54","23","14331","<git><git-log>","git log --follow, show all commits including merges","<p>I would like to <code>git log --follow file.ext</code> but showing all commits, including merges.</p>

<p>Tried <code>no-max-parents</code>, but not helping.</p>
","0","931156","0","0"
"31050815","3472065","2015-06-25 12:45:50","0","104","<git><grep><commit><git-log>","Skip git commits with a specific string using git log","<p>I would like to take the latest 5 commits using git log that do not contain a specific string, for example ""Merge branch"".</p>

<p>I tried several options, but none of them worked. e.g.: </p>

<pre><code> git log -n 5 --grep=""Merge branch"" --invert-grep
 git log -n 5 -v --grep=""Merge branch""
 git log -n 5 --not --grep=""Merge branch""
</code></pre>

<p>It seems that --invert-grep does the job but it doesn't work (<a href=""http://git-scm.com/docs/git-log"" rel=""nofollow"">http://git-scm.com/docs/git-log</a>)</p>
","0","3472065","",""
"13544378","9360","2012-11-24 18:46:16","8","514","<git><egit><git-log><gitk><revision-history>","Can I affect the order/column of branches displayed in gitk and Eclipse Egit","<p>When doing <code>gitk --all</code> I get a nice summary of commits/branches/tags across a whole repo.</p>

<p>However, the way the branches are displayed is not always consistent, and it is also different to the method Egit uses in Eclipse's History pane.</p>

<p><strong>Is there a way to control the ordering of the columns</strong> for either/both of gitk and egit?</p>

<p>Specifically, I would like to always have commits to master in the first (left-most) column.</p>

<p>(If possible, I'd like a 180 rotation of the <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">nvie model's diagram</a>, but simply having a consistent order with master on the left would be good enough.)</p>

<p>I read that gitk accepts most of the <a href=""http://git-scm.com/docs/git-log"" rel=""noreferrer"">git-log</a> parameters, so I've checked its man page but couldn't figure out what (if any) of the options do this. (And if that is the right route, how would I get egit to use those options?)</p>
","1","9360","0","0"
"31178662","3472065","2015-07-02 07:55:55","7","4335","<git><path><git-commit><git-log>","In git, obtain commits using git log with path","<p>I would like to obtain the last 10 commits using git log specifying the path of my repository. I used the option <code>-path</code> but I have &quot;is outside repository&quot; error</p>
<pre><code> git log --no-merges -10 -p /home/my_folder/git/repo

 fatal: /home/my_folder/git/repo: '/home/my_folder/git/repo' is outside repository
</code></pre>
<p>The comand is running for example in the folder /home</p>
","0","3472065","",""
"13742514","1852410","2012-12-06 11:18:54","2","801","<python><git-log>","Trying to parse a git log file in a very particular way using git log commands and python","<p>I want to display only the diff between commits that have a tag added to them. Or the closest to this. In other words something like this:</p>

<pre><code>tag  ""5 ...""
@@ -1,1 +1,3 @@
+ dfd
+ dfgd

tag ""4..""
@@ -1,1 +1,3 @@
+ dfd
+ dfgd
</code></pre>

<p>And so on. I have tried but cannot get this specific format maybe someone can help me out there. Then once I have a text file with this format or as close as possible I do the following:</p>

<pre><code>with open('log_output_alex.txt', 'r') as f:
  read_data = f.read()
f.closed

tag_separation = read_data.split('tag: ""')
</code></pre>

<p>After doing this I do not know how TO READ EACH OF THE LINES IN EACH OF THE STRINGS in the array tag_separation?</p>

<p>Once I can do this I can check if line in the string starts with a certain character (@, +, - or tag) and store different lines in data structures to manipulate later.</p>

<p>Thanks in advance for the help!</p>
","0","1852410","",""
"31289269","377393","2015-07-08 09:58:34","1","48","<git><git-log>","How to show log passing through the specific commit in git?","<p>I have a repo with a master containing almost only merge-commits. When I do <code>git log</code> it sometimes follows first parent and sometimes the second. I want to see output of the <code>git log</code> that passes through a specific commit - starting from HEAD.</p>

<p>How to do that?</p>
","0","377393","0","0"
"13777171","180416","2012-12-08 11:49:32","28","5423","<git><git-log>","Configuring git log to use mailmap by default","<p>Is there a way to configure git log to use a mailmap file by default? Without having to specify a format (or an alias for one).</p>
","6","180416","0","0"
"13850089","192798","2012-12-12 22:52:50","4","323","<git><merge><git-merge><git-log>","git mergetool --follow?","<p>is there a flag for <code>git-mergetool</code> that behaves like <code>--follow</code> from <code>git-log</code>?</p>

<pre><code>   --follow
       Continue listing the history of a file beyond renames (works only
       for a single file).
</code></pre>

<p>Basically I want it to merge renamed files instead of thinking they are deleted.</p>

<p><code>git-mergetool</code> provides the following:</p>

<pre><code>       When git mergetool is invoked with this tool (either through the -t
       or --tool option or the merge.tool configuration variable) the
       configured command line will be invoked with $BASE set to the name
       of a temporary file containing the common base for the merge, if
       available; $LOCAL set to the name of a temporary file containing
       the contents of the file on the current branch; $REMOTE set to the
       name of a temporary file containing the contents of the file to be
       merged, and $MERGED set to the name of the file to which the merge
       tool should write the result of the merge resolution.
</code></pre>

<p>So what I want, in the case of a renamed/moved file, is for BASE/LOCAL/REMOTE to still work.  I want <code>git-mergetool</code> to ""follow"" the rename of BASE to LOCAL or REMOTE, as appropriate.</p>
","1","192798","",""
"49219779","834019","2018-03-11 12:03:32","5","190","<git><git-log><gitk>","How to avoid showing parent commits in gitk when filtering by author?","<p>I want to show only my commits in gitk. I try to use the command </p>

<pre><code>gitk --author=""Eugeniy Maksimov"" &lt;path&gt;
</code></pre>

<p>gitk shows not only my commits, but also theirs parents. Why? How to avoid this?</p>
","1","834019","0","0"
"49229443","7628875","2018-03-12 06:43:11","1","1217","<git><merge><git-merge><git-log><git-rev-list>","Determine commits introduced to branch by merge commit in git?","<p>I am trying to determine commits introduced to parent branch due to a merge using merge id.</p>
","0","7628875","",""
"40675151","6834680","2016-11-18 10:47:48","35","12466","<git><graph><git-log>","What do line colors in git log --graph mean?","<p>I'm curious what do line colors mean in <code>git log --graph</code>?  </p>

<p>Yes, I'm asking about lines <code>|</code> <code>/</code> <code>\</code> which connect commits <code>*</code> at the left edge of console output.  </p>

<p><a href=""https://i.stack.imgur.com/SIQUe.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/SIQUe.png"" alt=""part of git log --graph output""></a>  </p>

<p><strong>Question #1</strong><br>
Do these colors have some hidden meaning?<br>
Or do they are pseudo-randomly chosen?  </p>

<p><strong>Question #2</strong><br>
Sometimes overlapped (but disconnected) lines have the same color.<br>
For example, see at the purple lines on the screenshot above: </p>

<ul>
<li>first line from <code>a55</code> to <code>e1c</code></li>
<li>second line from <code>3c1</code> to <code>043</code>  </li>
</ul>

<p>Is it possible to ask git to choose colors wisely to avoid isolated (not having common commit) same color lines to overlap?<br>
I want the graph to be more easily readable.</p>
","2","6834680","0","0"
"13991959","878451","2012-12-21 14:29:42","3","221","<git><gitignore><git-diff><git-log>","changes to .gitignore not shown in log but shown in commit to commit diff","<p>10 something commits back, I made a change to .gitignore file. Today when I pulled the latest code, my change was not there. So I ran this command:</p>

<pre><code>git log -p .gitignore
</code></pre>

<p>And it showed me that the last change to the file was mine. Then I pulled all the commits between now and my commit, and pinpointed the commit that removed my change. Then I took the diff of That commit, and the one before that, and in the diff I could see the change to the file. </p>

<p>But why can't I see the change through above command? And I don't even see this change when I use </p>

<pre><code>gitk .gitignore
</code></pre>

<p>Also I am wondering, might this happen when I try to see the history of some other file as well?</p>
","3","878451","",""
"40775105","","2016-11-23 22:22:04","1","53","<regex><git><bash><shell><git-log>","how to pre-fix a piece of text in github ""git log"" using shell-script","<p>I need to make a github commit (the text), from the git command <code>git log</code> into a link in an email. So the recipient can click on the link and go directly to the change.</p>

<p>I receive a long list containing lines with the text:</p>

<p><code>commit some_long_string_of_hexadecimals</code></p>

<p>and I need to transform this into:</p>

<p><code>commit https://github.com/account/repo/commit/some_long_string_of_hexadecimals</code></p>

<p>The log I am receiving contain n-amount of these logs, so I need the script to do this for all instances of this (some_long_string_of_hexadecimals).</p>

<p>Here are a few example log statements:</p>

<pre><code>commit a98a897a67896a987698a769786a987a6987697a6
Author: Some Person &lt;some@email.com&gt;
Date:   Thu Sep 29 09:48:52 2016 +0200

    long message describing change.

commit a98a897a67896a987698a769786a987a6987697a6
Author: Some Person &lt;some@email.com&gt;
Date:   Thu Sep 29 09:48:52 2016 +0200

    more description
</code></pre>

<p>I'd like it to look like this:</p>

<pre><code>commit https://github.com/account/repo/commit/a98a897a67896a987698a769786a987a6987697a6
Author: Some Person &lt;some@email.com&gt;
Date:   Thu Sep 29 09:48:52 2016 +0200

    added handling of running tests from within a docker container
</code></pre>

<p>How do I achieve this using a shell command ?</p>

<p>Thanks in advance.</p>
","2","","",""
"66600606","533842","2021-03-12 13:14:56","3","714","<json><git><git-log>","How to get git log -p as json","<p>I want to run <code>git log -p</code> and get the results as JSON.
I couldn't find a way to do it from the <a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">pretty format documentation</a>, but I am probably missing something.</p>
<p>The desired result I have in mind will be something like:</p>
<pre><code>[{
  &quot;commit&quot;: SHA,
  &quot;author&quot;: AUTHOR,
  &quot;date&quot;: DATE,
  &quot;commit_message&quot;: COMMIT_MSG,
  &quot;full_diff&quot;: FULL_DIFF
}]
</code></pre>
","1","533842","",""
"31561633","675100","2015-07-22 11:19:49","0","707","<git><logging><git-log>","How to get git log --oneline --graph with chronological commits/merges between branches?","<p>For now I have the following alias (found somewhere on the internet):</p>

<pre><code>[alias]
  lg = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
</code></pre>

<p>but this will produce something like that in my repo:</p>

<pre><code>* a18c363 - (2 weeks ago) Fix | Changed sed separator - Patryk (wierd_branch)
* 7c6ddd8 - (2 weeks ago) Feature  - Patryk 
* 2bd909b - (2 weeks ago) Fix | This was not supposed to be there.... - Patryk 
* a99f925 - (2 weeks ago) Feature | Added  - Patryk 
| * ed2da1d - (45 minutes ago) Feature | Added - S (origin/master, origin/HEAD)
| * d580796 - (2 hours ago) Fix | Tag - W 
| * e0b1611 - (2 hours ago) Fix - S
| * 8588818 - (2 weeks ago) Documentation | Incremented documentation version - X
|/  
* 05ff79b - (2 weeks ago) Fix | changed structure - M
</code></pre>

<p>But as you can see this is not chronological - namely, the branches give straight lines instead of showing that the commits in e.g. 2 branches have happened chronologically (e.g. <code>ed2da1d</code> should be on the top of the log).</p>

<p>How can I make that chronological? (for instance GitLab has some kind of this log that show chronological commits in multiple branches but in its web UI)</p>
","0","675100","",""
"41008601","337772","2016-12-07 02:48:14","1","603","<git><git-log>","Search git history for commits made in the night or in Saturday","<p>Github have a <a href=""https://github.com/rails/rails/graphs/punch-card"" rel=""nofollow noreferrer"">punchcard</a> that display at what time the commits were done, but doesn't show which commits were done in that hour.</p>

<p>Is there any easy way to search the <code>git log</code> for commits made in a time interval (not for a specific date).</p>

<p>Just to make it clear, I'm <strong>not</strong> looking for commits made in a certain date, instead of that I want to find all the commits made between 10pm and 5am on any date.</p>

<p>Can it be done without using a super custom script?</p>
","0","337772","0","0"
"31828638","115493","2015-08-05 09:33:54","5","2470","<git><git-diff><git-log>","Why can't I use git log --follow with --full-diff?","<p><code>git log --follow &lt;myfile&gt;</code> shows the <code>git log</code> for one file.</p>

<p>I'd like to see this log with all the changes (diffs) in this file. I try:</p>

<pre><code>git log --full-diff --follow &lt;myfile&gt;
</code></pre>

<p>But this fails with:</p>

<pre><code>fatal: --follow requires exactly one pathspec
</code></pre>

<p>Why? How can I get the diff I wanted?</p>

<p><sub>Or maybe, is it a bug in git?</sub></p>
","0","115493","",""
"66904383","15524126","2021-04-01 12:21:17","0","135","<git><parsing><git-log>","""git log -m"" always show both diffs","<p>I'm currently writing a program that needs to read a git log-file and reconstruct the complete filetree out of it.
To support file-tracking and renames through different branches I need to see file creations and renaming on merges. For this I can use the '-m'-argument that git already provides: <a href=""https://git-scm.com/docs/git-log#Documentation/git-log.txt--m"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-log#Documentation/git-log.txt--m</a></p>
<p>-m generates a diff for both parents of a merge. This is good and exactly what I need. But now comes the problem. If the diff for one parent is empty, only one diff gets printed. The format of both diffs is exactly the same. The only way to see to which parent a diff applies is by checking the order they get printed. The first one is the one from the merge-source-parent and the second one is from the merge-target-parent. The problem is that if one of both diffs is empty I can't find out to which parent the printed diff belongs.
I use this command to generate the log:
<code>git log --pretty=format:'[%h] [%an] (%p) %ad %s' --date=&quot;format:%Y-%m-%d %H:%M:%S&quot; -m --numstat --summary --parents</code>
Is there a way to let the git command print the headline of the diff even if the diff is empty? Or is there any other way to find out to which parent the diff belongs if only one diff gets printed?</p>
","3","15524126","",""
"66914882","2548883","2021-04-02 05:32:20","0","559","<git><gitignore><git-flow><git-log><aws-codecommit>","aws codecommit repo folder override by git command run on local computer","<p>There was a folder name called <strong>profileimg</strong> in the local computer and the AWS codecommit repository. That folder fills with images when a user uploads images. However, when I change some code in the local computer repo and git push into remote repo ( AWS codecommit repo ), <strong>profileimg</strong> folder override with empty data and images are being disappeared. This was a Laravel 8 project hosted in the AWS beanstalk environment.</p>
<p>What I tried so far in the local git repo: <br/></p>
<ul>
<li>$ git rm -r --cached public/images/profileimg/*</li>
<li>$ git update-index --assume-unchanged public/images/profileimg/*</li>
</ul>
<p><strong>Folder structure:</strong>
<br/></p>
<ul>
<li>public
<ul>
<li>images
<ul>
<li>profileimg</li>
</ul>
</li>
</ul>
</li>
<li>.gitignore</li>
</ul>
<p><strong>.gitignore</strong>
<br/></p>
<pre><code>#exclude everything
public/images/profileimg/*
public/images/profileVerifyDoc/*

#exception
!public/images/profileimg/.gitkeep
!public/images/profileVerifyDoc/.gitkeep
</code></pre>
<br/>
<p><a href=""https://i.stack.imgur.com/C9tU2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/C9tU2.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://i.stack.imgur.com/h7T2P.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/h7T2P.png"" alt=""enter image description here"" /></a></p>
<br/>
Moreover, I created .ebignore file in the AWS codecommit repo. The local computer also has .gitignore file. Any suggestion, please. 
","5","2548883","",""
"41275330","1499296","2016-12-22 03:25:26","1","1858","<git><github><git-commit><git-log><git-hash>","git push - where's my commit hash - git log is not showing in the history MIRROR repository","<p>I cloned from a GIT repository (latest). At this point, the latest commit in the repository was: <code>a10cb09</code> </p>

<p>I cloned from using the following command (where I set variable <code>r</code> = 1st parameter passed (for repo name aka <code>ansible</code>) in my tiny wrapper script:</p>

<pre><code>  git clone git@github.com:mycompany/${r}.git
</code></pre>

<p>and made few changes and did the following simple steps: (i.e. make changes, add file/folder, commit and push) and I got a new commit hash <code>a08c263</code> (short). </p>

<pre><code>[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    roles/mycompany.mycompany-ansible/
    mycompany-ansible.yml

nothing added to commit but untracked files present (use ""git add"" to track)
[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ 


[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git add mycompany-ansible.yml roles/mycompany.mycompany-ansible

[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git commit -m ""mycompany.mycompany-ansible playbook and role"" mycompany-ansible.yml roles/mycompany.mycompany-ansible 
[master a08c263] mycompany.mycompany-ansible playbook and role
 14 files changed, 1771 insertions(+)
 create mode 100644 roles/mycompany.mycompany-ansible/README.md
 create mode 100644 roles/mycompany.mycompany-ansible/defaults/main.yml
 create mode 100644 roles/mycompany.mycompany-ansible/handlers/main.yml
 create mode 100644 roles/mycompany.mycompany-ansible/meta/.galaxy_install_info
 create mode 100644 roles/mycompany.mycompany-ansible/meta/main.yml
 create mode 100644 roles/mycompany.mycompany-ansible/tasks/apt_install.yml
 create mode 100644 roles/mycompany.mycompany-ansible/tasks/main.yml
 create mode 100644 roles/mycompany.mycompany-ansible/tasks/yum_install.yml
 create mode 100644 roles/mycompany.mycompany-ansible/templates/10-statsd.conf.j2
 create mode 100644 roles/mycompany.mycompany-ansible/templates/10-mycompany.conf.j2
 create mode 100644 roles/mycompany.mycompany-ansible/templates/proxy_auth_credentials.set.j2
 create mode 100644 roles/mycompany.mycompany-ansible/templates/telegraf.conf.wfcopy.j2
 create mode 100644 roles/mycompany.mycompany-ansible/templates/mycompany-proxy.conf.j2
 create mode 100644 mycompany-ansible.yml
[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ 


[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git push
Counting objects: 21, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (19/19), done.
Writing objects: 100% (21/21), 18.65 KiB | 0 bytes/s, done.
Total 21 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:repogroup/ansible.git
   a10cb09..a08c263  master -&gt; master
[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $  


[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git log -1 --pretty=format:%h 
a10cb09


[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git rev-parse a08c263
a08c263
fatal: ambiguous argument 'a08c263': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'
</code></pre>

<p>When I'm going to Github repo to see my latest changes, it's not there. <code>git log</code> is also not showing my commit (instead, it's showing me the commit hash which was at the top before my commit). What did I miss?</p>

<p>It seems like I can't even see the long hash using <code>git rev-parse a08c263</code> (small hash).</p>

<pre><code>$ git remote -v
origin  git@github.com:mycompany/ansible.git (fetch)
origin  git@github.com:mycompany/ansible.git (push)
</code></pre>

<p>and</p>

<pre><code>$ git reflog 
a10cb09 HEAD@{0}: clone: from git@github.com:mycompany/ansible.git
</code></pre>

<p><strong>PS</strong>: If I do the same steps for other repositories sitting under <code>mycompany</code> repo group and all those repos get my commit/push changes successfully in github if I follow the similar steps.</p>

<p><strong>UPDATE:</strong> one of my browser page was still having this open. After I did commit+push, I was able to see my committed change(new hash <code>a08c263</code> as the latest commit at the top repo level). When I clicked on it, it opened this attached browser page where I can see the FULL hash and also the folder/files. If I visit the opened browser URL for my commit, it's still there (so Git did save something) but clicking back on the repository's root level i.e. <code>ansible</code>, the latest commit is not my commit+push (new hash) but it's listing <code>a10cb09</code> as the latest one (which per the snapshot is the parent hash for my newly generated hash). See here:</p>

<p><a href=""https://i.stack.imgur.com/5gf2H.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5gf2H.jpg"" alt=""enter image description here""></a></p>

<p>That now brings the main questions:<br/></p>

<ol>
<li><p>If I didn't had this browser page still opened, then how would I have got the long hash and my folder/files (contents)?<br/></p></li>
<li><p>If I cloned from a github.com/mycompany/ansible (repo) which was a MIRROR of the ansible repository, actually hosted in Phabricator (where the actual original repository clone URL would be different than what I used in my tiny script above), then what command / option should I have used to push my new change to the original Phabricator <code>ansible</code> repository? <br/></p></li>
<li><p>If commit+push was complete at my end, why <code>git log</code> and other similar <code>git</code> commands are not showing any information against my new hash? </p></li>
</ol>
","11","1499296","0","0"
"41281560","3458727","2016-12-22 10:58:13","0","749","<git><bitbucket><git-commit><git-log>","Download git commit log from bitbucket within a date range","<p>I want to download latest git commit log from the bitbucket as pdf/excel/any document type. I want to get commit log within a date range. So far, i have found some solution by using <strong>git log .....</strong>. I want a different option to get the log. How can i do this ? </p>
","2","3458727","",""
"60000712","9966029","2020-01-31 09:00:20","3","534","<git><version-control><git-log>","How to get all commit messages which are affected in last push in git?","<p>I am just trying to create a git hook which sends a notification about all the commits to our ms-teams channel on every ""post-recieve"".</p>

<p>The git hook itself works, but with the command <code>git log -1 --pretty=format:'%s'</code><br>
I only get the last commit-message, which is not very useful if you push multiple commits to master.</p>

<p>Is there a way to get the data (message, author, date of commit, commit number, usw.) of all affected commits on every push?  </p>

<p>I have looked up a lot of questions here on Stack Overflow, but haven't found a proper solution for my problem.</p>
","1","9966029","",""
"22415347","241211","2014-03-14 20:41:13","5","2637","<git><formatting><git-log>","Optional indented newline in git log format","<p>I have been tinkering with <code>git</code> aliases for some <code>log</code> commands. I have most of what I'd like (<a href=""https://stackoverflow.com/a/9074343/241211"">credit here</a>), but I'm having trouble with one piece. When I call…</p>
<pre class=""lang-bash prettyprint-override""><code>git log --graph --format=format:'%h - [%ar] %s%+d'
</code></pre>
<p>…I get…</p>
<pre class=""lang-none prettyprint-override""><code>* ab123f - [6 hours ago] Fix the references
|  (HEAD, origin/master, master)
* bc123f - [8 hours ago] New build syntax
* cd123f - [10 hours ago] Initial import
</code></pre>
<p>…where <code>%+d</code> adds a new line and puts the <code>--decorate</code> tags on it if they exist. I would rather have the tags to be in line with the <em>time stamp</em> instead, like so:</p>
<pre class=""lang-none prettyprint-override""><code>* ab123f - [6 hours ago] Fix the references
|          (HEAD, origin/master, master)
* bc123f - [8 hours ago] New build syntax
* cd123f - [10 hours ago] Initial import
</code></pre>
<p>How do I accomplish this? I do not want a bonus newline if there are no <code>--decorate</code> tags. I've been experimenting with various <a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">format placeholders:</a> <code>%+d</code>, <code>%-d</code>, <code>%+    d</code> (which doesn't work); permutations of <code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;&gt;(&lt;N&gt;)</code>; and so on, but I can't get it to do what I want.</p>
<p>Colors and further commit info had been removed for simplicity, but they seem to interfere with <a href=""https://stackoverflow.com/a/22416145/241211"">torek's answer</a>. The full command is below:</p>
<pre class=""lang-bash prettyprint-override""><code>git log --graph --format=format:'%C(bold yellow)%h%C(reset) - %C(green)(%ar)%C(reset) %s %C(white)&lt;%an&gt;%C(reset)%C(auto)%+d%C(reset)'
</code></pre>
","0","241211","0","0"
"32226653","1433338","2015-08-26 12:25:52","0","61","<git><bash><github><git-log>","Writing a configurable git command in bash script","<p>Take a git command  as below- </p>

<pre><code>git log --before=""$today"" --after=""yeasterday"" --pretty=format ""%cd""
</code></pre>

<p>i want my script to do this -</p>

<p>a user inputs any of date/author/commit#..... etc.
Whichever the user provides use it in the command and provide log- something like: </p>

<p>If user provides only after-date add that part of command to the <code>git log</code></p>

<pre><code>git log $afterdate 
</code></pre>

<p>where <code>$afterdate= ""--after=user_provided_date_goes here""</code></p>

<p>Is this possible using Bash script. i tried as showed above by concatenating <code>git log</code> to <code>$command</code> to get desired log output didn't work(it fails to build a command as such)</p>
","0","1433338","",""
"60121617","2891724","2020-02-07 21:55:33","0","79","<git><git-svn><git-log><git-show>","Switching from svn to git: Can searching logs for svn commit and showing commit in git be done in a one-liner?","<p>I know that you can search for an <code>svn commit</code> after running <code>git svn</code> using the <code>git log</code> command.</p>

<p>Example searching for svn commit r88843:</p>

<pre><code>git log --grep=git-svn-id:.*@88843
</code></pre>

<p>Then you can use the git commit hash  to pass into <code>git show</code></p>

<p>Can this be done in a one-liner?</p>

<p>Similar to (in Linux):</p>

<pre><code>git show &lt; git log --grep=git-svn-id:.*@88843 --pretty=format:%H
</code></pre>
","2","2891724","",""
"41427590","5118212","2017-01-02 13:16:01","9","4429","<git><git-log>","git log -L without diff","<p>I'm trying to use <code>git log -L &lt;start&gt;,&lt;end&gt;:&lt;filename&gt;</code> but I would like to have very limited output (actually just hashes). While --pretty prints the commit info in the format I want, I did not find a way to not display the diff...</p>

<p>e.g. on linux-next what I tried is:</p>

<pre><code>git log --pretty=format:""%H"" -s -L 70,70:./arch/x86/include/asm/irqflags.h
</code></pre>

<p>where (according to the manpage) the -s is supposed to Supress the ouput of the diff, however the output is:</p>

<pre><code>$ git log --pretty=format:""%H"" -s -L 70,70:./arch/x86/include/asm/irqflags.h
6abcd98ffafbff81f0bfd7ee1d129e634af13245
diff --git a/include/asm-x86/irqflags.h b/include/asm-x86/irqflags.h
--- a/include/asm-x86/irqflags.h
+++ b/include/asm-x86/irqflags.h
@@ -1,2 +64,1 @@
-#ifdef CONFIG_X86_32
-# include ""irqflags_32.h""
+{

96a388de5dc53a8b234b3fd41f3ae2cedc9ffd42
diff --git a/include/asm-x86/irqflags.h b/include/asm-x86/irqflags.h
--- /dev/null
+++ b/include/asm-x86/irqflags.h
@@ -0,0 +1,2 @@
+#ifdef CONFIG_X86_32
+# include ""irqflags_32.h""
</code></pre>

<p>I am using git version 2.10.2</p>
","2","5118212","0","0"
"31856812","5134102","2015-08-06 13:13:34","4","613","<git><git-log>","Git: What is the difference between 'git log --graph' and 'git log --graph --all'?","<p>The command:  <code>git log --graph</code>, shows the commit logs with a text-based graphical representation  on the left hand side of the output.</p>

<p>About the option <code>--all</code> to limit the output of commits, the <a href=""http://git-scm.com/docs/git-log"" rel=""nofollow"">git doc</a> says:</p>

<blockquote>
  <p><strong>Commit Limiting</strong></p>
  
  <p>Besides specifying a range of commits that should be listed using the
  special notations explained in the description, additional commit
  limiting may be applied.</p>
  
  <p><strong>--all</strong></p>
  
  <p><em>Pretend as if all the refs in <code>refs/</code> are listed on the command line as <code>&lt;commit&gt;</code>.</em></p>
</blockquote>

<p>I don't understand very well the output that I'm getting with this option.</p>

<p><strong>What are all the refs of</strong> <code>refs/</code><strong>?</strong></p>

<p><strong>What is the default value of</strong> <code>git log --graph</code> <strong>related to commit limiting ?</strong></p>

<p><strong>Concerning commit limits,</strong> <strong>what is the difference between <code>git log --graph</code> and <code>git log --graph --all</code> ?</strong></p>
","1","5134102","0","0"
"49486522","4645310","2018-03-26 07:54:55","1","3911","<git><git-log>","Git log --pretty as git log --graph --oneline","<p>I'm trying to replicate <code>git log --graph --oneline</code> with some information added. The problem is that my current alias shows me the logs for all branches like this:</p>
<pre><code>$ git lg
* 7683440c6 - (origin/Branch1, Branch1) Message1 (48 minutes ago) by Author1
* 297b8a9cc - (HEAD -&gt; Branch2, origin/Branch2) Message2 (4 days ago) by Author2
| * a21d8248e - (origin/Branch3, Branch3) Message3 (4 days ago) by Author2
| * 11f0f5aea - (origin/Branch4) Message4 (5 days ago) by Author3
| * b9b816d84 - (origin/Branch5) Message5 (5 days ago) by Author4
|/
| * 1acf9435f - (origin/Branch6, Branch6) Message6 (5 days ago) by Author1
|/
* 982aab25a - Message7 (5 days ago) by Author5
* 48df9d049 - Message8 (5 days ago) by Author5
</code></pre>
<p>and what I want is something like this:</p>
<pre><code>$ git log --graph --oneline
* 297b8a9cc (HEAD -&gt; Branch2, origin/Branch2) Message2
* 982aab25a Message7
* 48df9d049 Message8
* b409cbed5 Message9
* 2868a5794 Message10
* 46cd8e98f Message11
* 3c6ac0b8d Message12
</code></pre>
<p>As you can see I'm on <code>Branch2</code> and <code>git log --graph --oneline</code> shows me only what is on this branch, but my alias shows my additional info (for rest of branches) and I don't want that.
How can I replicate the above command on my alias so I have only the commits on my current branch (plus the ones on which <code>Branch2</code> is on top - like <code>git log --graph --oneline</code>)?</p>
<p>My current alias looks like this:</p>
<pre><code>lg = log --first-parent --graph --pretty=format:'%C(yellow)%h%Creset -%C(auto)%d%Creset %s %C(cyan)(%cr) %Cresetby %C(bold blue)%aN%Creset' --abbrev-commit --date=relative --branches
</code></pre>
","2","4645310","",""
"67028735","6539631","2021-04-09 21:51:53","0","157","<git><git-log><git-show>","How to print commit dates in %Y%m%d format in git log?","<p>I am trying to print the commit date in 2021April09 format using --date=format:'%Y%b%d' but it gives me segmentation fault. Neither of below works for me even for standard formats.</p>
<p><code>git log --pretty=format:%cd --date=format:%Y%m%d -5</code></p>
<p><code>git log --pretty=format:%cd --date=format:'%Y-%m-%d' -5</code></p>
<p>I know I can use <code>git log --pretty=format:%cd --date=short</code> to get the shorter version but I want to use strftime format to print the abbreviated month etc</p>
","9","6539631","0","0"
"60165817","932786","2020-02-11 09:38:54","0","127","<git><format><git-log>","git log --graph tabular format","<p>I'm trying to make the output of <code>git log</code> tabular. After reading different posts and <code>git log</code> manual page, I got to this version:</p>

<pre><code>git log --graph --pretty=format:'%&lt;(10,trunc)%Cred%h%Creset -%C(yellow)%&lt;(20,trunc)%d%Creset %&lt;(50,trunc)%s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit
</code></pre>

<p>This is not bad but still has two problems.</p>

<p><strong>First</strong>, I can't force indentation to the graph itself. The first field I can indent is the hash (<code>%h</code>). How can I indent a maximum space for the graph itsefl?</p>

<p><a href=""https://i.stack.imgur.com/nZn24.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nZn24.png"" alt=""enter image description here""></a></p>

<p><strong>Second</strong>, If I tried to indent the relative time field (<code>%cr</code>) by writting <code>%&lt;(15)(%cr)</code>, I got the text indented but the closing bracket is not included in the indented field. See below picture. How can I indent the whole text including the brackets?</p>

<p><a href=""https://i.stack.imgur.com/0PFJl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0PFJl.png"" alt=""enter image description here""></a></p>
","1","932786","0","0"
"49518481","","2018-03-27 16:54:20","0","28","<git><bitbucket><git-log>","Identify field in the git log","<p>I ran git log, and I see this:</p>

<p><a href=""https://i.stack.imgur.com/PRQN1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PRQN1.png"" alt=""enter image description here""></a></p>

<p>The line that says ""hotstepper"" was added to the commit message using this UI on Bitbucket:</p>

<p><a href=""https://i.stack.imgur.com/ZKvO7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZKvO7.png"" alt=""enter image description here""></a></p>

<p>My question is - when using <code>$ git log --pretty-format:</code>, which field can I find the hotsteppper line? It does not appear to be on the subject line or sanitized_subject line.</p>

<p><a href=""https://git-scm.com/docs/git-log"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-log</a></p>
","0","","",""
"49527126","7628875","2018-03-28 05:58:30","0","59","<git><commit><git-commit><git-log>","How to determine git commits on a branch but not inherited from different branch?","<p>I am trying to determine git commits on a particular branch, which excludes git commits inherited.</p>
","4","7628875","",""
"49538665","633721","2018-03-28 15:36:38","9","2147","<git><git-log><commit-message>","Print git commits body lines joined in one line","<p>How can I print git commits to print only body (commit message without title) but in one line? So commit body lines are joined, possibly separated with space, and printed as one line for one commit.</p>

<p>For example, with two commits A and B, command:</p>

<pre><code>$ git log --format=%b
</code></pre>

<p>prints:</p>

<pre><code>Commit A, line A.1
Commit A, line A.2
Commit B, line B.1
Commit B, line B.2
</code></pre>

<p>But I'd like to get:</p>

<pre><code>Commit A, line A.1 Commit A, line A.2
Commit B, line B.1 Commit B, line B.2
</code></pre>
","0","633721","0","0"
"41696837","3270524","2017-01-17 12:12:54","2","725","<gitlab><git-log>","Is there a command or a ""git log"" option to retrieve comments/discussion logged for a merge request?","<p>We have a GITlab(8.14) running for collaboration within the company.
I am working on a python script to collect information about merge requests being raised by developers across projects. I can very easily isolate the merge requests using 'git log'
<code>git log --merges</code></p>

<p>However, I haven't been able to locate the correct command or option to retrieve all the discussion/comments taking place in the Merge Request.</p>
","2","3270524","0","0"
"41702411","2646226","2017-01-17 16:38:57","1","64","<javascript><git><commit><git-log><changelog>","Explanation on the logic for git log command git log master-1.0.83..HEAD","<p>For this specific library <a href=""https://github.com/rafinskipg/git-changelog"" rel=""nofollow noreferrer"">https://github.com/rafinskipg/git-changelog</a>
I enabled its debugging mode and saw the logic that is been used to pull in the Git log, I got lost in some of them.</p>

<p>In the debugging log I saw this:</p>

<pre><code>git log --grep=""^fix|^feat|^docs|BREAKING|^refactor|^style|^test|^Merge branch|^Merge pull request"" -i -E --format=%H%n%s%n%b%n==END== master-1.0.83..HEAD
</code></pre>

<p>I especially interested to know what <code>==END== master-1.0.83..HEAD</code> does? I am still having issue understanding, that, how the log of changes got pulled in? Is it base on comparing parent branch that current branch branched off from? or it is base on the branch that I fill in .changelogrc, for example, in this case, I added a new param <code>""tag"": ""master-1.0.83""</code>, I feel this <code>==END==master-1.0.83..HEAD</code> is the factor that determines how the branches are compared.</p>
","0","2646226","",""
"4259996","97101","2010-11-23 19:31:42","1587","769259","<git><version-control><git-log>","How can I view a git log of just one user's commits?","<p>When using <code>git log</code>, how can I filter by user so that I see only commits from that user?</p>
","2","97101","0","0"
"14375938","1275959","2013-01-17 09:33:54","3","588","<git><patch><git-log><git-patch>","Git format-patch vs git log -p","<p>I would like to retrieve a list of commits as patches and then try to apply them to another repo in which I stored a very close project to the one from wich I want to retrieve the patch : how can I in one command retrieve all the patches ? what is the best method (and the differences) between git format-patch and git log -p ? </p>
","3","1275959","",""
"49665623","8402628","2018-04-05 06:36:56","0","1628","<python><git><github><grep><git-log>","Regex for grepping exact phrase in git log","<p>Currently, I am working on mining software repository in <code>github</code>. I use the <code>git log command</code> to get the commit logs. But when I only need to find the commit logs contain a specific word, some unexpected logs also have shown.</p>

<p>For example, I need the commit log contains word <code>HBASE-792</code>. I used command <code>git log --grep='HBASE-792' --oneline</code>. But these logs have shown:</p>

<pre><code>HBASE-7921. TestHFileBlock.testGzipCompression should ignore the block checksum
HBASE-7923 force unassign can confirm region online on any RS to get rid of double assignments
HBASE-7928 Scanning .META. with startRow and/or stopRow is not giving proper results; REVERT.  NEEDS SOME MORE WORK
Fix overlogging; part of HBASE-792 patch
Patches to alleviate HBASE-790 and HBASE-792
</code></pre>

<p>What I need are only the last 2 commit logs which exactly contain <code>HBASE-792</code>. What pattern should I write in grep?</p>
","0","8402628","",""
"68535266","12644356","2021-07-26 19:09:36","1","92","<json><git><git-log>","Is there a way to search git logs for changes to specific json attributes over multiple commits?","<p>I'm working with JSON files and I need to find changes to certain attributes over the commits I've done.</p>
<p>For example with this fake file I'd want to see the changes done to attr1, 2, 3, and 4, but not 5 (or any other not listed.)</p>
<p>File 1 commit A</p>
<pre><code>{
    &quot;group&quot;: {
        &quot;attr1&quot;: &quot;apples&quot;,
        &quot;attr2&quot;: &quot;oranges&quot;
    },
    &quot;attr3&quot;: &quot;&quot;,
    &quot;attr4&quot;: &quot;grapes&quot;,
    &quot;attr5&quot;: &quot;kiwi&quot;,
}
</code></pre>
<p>File 1 commit B</p>
<pre><code>{  
    &quot;attr3&quot;: &quot;bananas&quot;,
    &quot;attr4&quot;: &quot;&quot;,
    &quot;attr5&quot;: &quot;strawberry&quot;,
    &quot;attr-new&quot;: &quot;watermelon&quot;,
    &quot;group&quot;: {
        &quot;attr1&quot;: &quot;pineapples&quot;,
        &quot;attr2&quot;: &quot;oranges&quot;
    }
}
</code></pre>
<p>Wanted output for each file:</p>
<pre class=""lang-none prettyprint-override""><code>File 1 Changes:
    attr1: &quot;apples&quot; to &quot;pineapples&quot;
    attr3: &quot;&quot; to &quot;bananas&quot;
    attr4: &quot;grapes&quot; to &quot;&quot;
</code></pre>
<p>I saw that <a href=""https://www.git-scm.com/docs/git-log#Documentation/git-log.txt--Lltstartgtltendgtltfilegt"" rel=""nofollow noreferrer"">git log has an -L option</a> to search by line, but as you can see, the line numbers aren't consistent between the two commits. Also I know git log as a regex option to use, but I'm not familiar enough with regex to know if it would work here.</p>
<p>I'd need to do this for each file listed in the git log. How do I do this?</p>
","2","12644356","0","0"
"14988929","2092726","2013-02-20 20:06:53","72","47904","<git><git-log><git-stash>","Show all stashes in git log","<p>I would like to see all stashes in <code>git log</code> output. Does anyone know if there is a way to do that?</p>
<p>Edit: I want to see all commits in the log -- <em>including</em> stash commits. I tried the command:</p>
<pre><code>git log --date-order --all
</code></pre>
<p>But it returns only the top most stash. I would like to see commits that represent other stashes too.</p>
","0","2092726","0","0"
"16666009","1275937","2013-05-21 09:02:12","12","12833","<git><vim><pager><git-log>","How do I use vim as 'git log' editor?","<p>When I run <code>git log</code>, what exactly is the editor <code>git log</code> is using? </p>

<p>Also: </p>

<ol>
<li>Is there anyway I can use <code>vim</code> as my default editor for <code>git log</code>?</li>
<li>If I want to search against the git log, what's the best way? Now I'm doing something like: <code>git log | grep bla</code>.</li>
</ol>
","3","1275937","0","0"
"16678494","998117","2013-05-21 20:02:23","0","103","<git><bash><git-log>","How can I find my alias for `git log`?","<p>I have my git log formatted a specific way, which works when I call <code>git lg</code> (note the lack of an o) and it looks quite nice. I got it from a stackoverflow answer and all I had to do was enter something in the command line, like <code>git config ...</code> or something, and voila, git lg worked.</p>

<p>However, I'm on a new computer now and I want that to work again. How do I get what git lg is mapped to?</p>
","0","998117","",""
"33279999","4149487","2015-10-22 11:32:23","0","136","<git><git-log>","Filter git commits by range of hash","<p>I need to filter commits by a range definded by his own hash number. I've been looking for on internet and I couldn't find anything.</p>

<p>Thanks</p>
","3","4149487","",""
"50065264","1391026","2018-04-27 15:04:59","4","2228","<git><git-log><git-notes>","How to show remote refs/notes/* with git log","<p>How to show <code>refs/notes</code> in a <code>git log --oneline --graph --all --decorate</code> output for remotes?</p>

<p>With the above command I only see my own <code>refs/notes/foobar</code>, but not the remote ref.</p>

<p>The docs don't hint any command I could possibly use for this.</p>
","0","1391026","0","0"
"68411828","9113679","2021-07-16 15:44:59","1","802","<git><git-merge><git-log>","Why `git merge` happens but `git log --graph` does not show the branching?","<p>I do not understand the behavior of <code>git merge</code>. Sometimes, I merge a branch and, after executing <code>git log --graph</code>, I can see the branch merging as a draw like:</p>
<pre><code>    D  
   / \
  C   B
   \ /
    A
</code></pre>
<p>I just did</p>
<pre><code>$ git merge feature1 develop 
Updating 4c3dd3e..a90a849 Fast-forward 
fileA.txt | 1 +  1 file changed, 1 insertion(+)
</code></pre>
<p>It works. I can even delete the topic branch which shows the branch is not indispensable anymore and the merge was successful:</p>
<pre><code>$ git branch -d feature1 
Deleted branch feature1 (was a90a849).
</code></pre>
<p>However, I cannot see the drawing. I just have a line:</p>
<pre><code>pedro (develop) second-final-project $ git log --graph 

* commit a90a84966040e36b994c0146bbd8a666954bee49 (HEAD -&gt; develop)
| Author: Pedro Delfino &lt;p.delfino01@gmail.com&gt;
| Date:   Fri Jul 16 12:29:24 2021 -0300
| 
|     add feature 1
| 
* commit 4c3dd3ea0cfe07e1c9ccd9e65b2a2060137f1b27
| Author: Pedro Delfino &lt;p.delfino01@gmail.com&gt;
| Date:   Fri Jul 16 11:49:00 2021 -0300
| 
|     add fileA.txt
| 
* commit ae8124ea03436dd48d98424d594ff91b75bca00b (master)
  Author: Pedro Delfino &lt;p.delfino01@gmail.com&gt;
  Date:   Fri Jul 16 11:48:33 2021 -0300
  
      add README.md
</code></pre>
<p>Maybe the drawing is not visible because of a fast-forward commit. But I think I have seen the drawing and the merge commit in fast-forward merges before.</p>
<p>In addition, I was expecting to see something different as commit messages. I got the commit message available as the last commit on the merged branch.</p>
<p>I would like to see the merge commit with that standard message, such as:</p>
<blockquote>
<p>Merge​ ​branch 'feature1'​ ​into develop</p>
</blockquote>
<p>Sometimes this desired message naturally happens. In other situations, it does <strong>not</strong>, such as the present one.</p>
<p>Why does this happen? How can I achieve the standard message and the visual drawing desired when merging a branch?</p>
<p>Thanks.</p>
","1","9113679","",""
"32263264","38765","2015-08-28 04:16:22","1","347","<git><git-log>","git log --stat relative to subfolder","<p>I want to display the filenames in <code>git log --stat</code> relative to a certain sub-folder, so that it's easier to read. How can I do this?</p>

<p>I tried <code>git log --stat sub/folder/foo</code>, <code>git log --stat sub/folder/foo/</code>, and changing to the subfolder before running <code>git log --stat</code>, <code>git log --stat .</code>, and <code>git log --stat ./</code>.</p>
","0","38765","",""
"41517489","242123","2017-01-07 03:26:06","0","358","<git><git-log>","Why does git log --since not include the commits that I expect?","<p>I wanted to get a list of all my commits to <a href=""https://github.com/mozilla/gecko-dev"" rel=""nofollow noreferrer"">a repository</a> since the start of the year.  I tried with the obvious command, but it doesn't include any of them:</p>

<pre>
$ git log --pretty='format:%h %ae %cI %s' --author=cam@mcc.id.au --since=2017-01-01
$
</pre>

<p>Oddly, I have to use <code>--since=2016-12-19</code>, which gets me some of them:</p>

<pre>
$ git log --pretty='format:%h %ae %cI %s' --author=cam@mcc.id.au --since=2016-12-20
$ git log --pretty='format:%h %ae %cI %s' --author=cam@mcc.id.au --since=2016-12-19
61569b5 cam@mcc.id.au 2017-01-02T16:25:22+08:00 Bug 1324624 - Tweak stylo crashtest assertion annotations a bit more.
7fca5ff cam@mcc.id.au 2016-12-29T16:32:01+08:00 Bug 1323892 - Followup to disable one more crashtest under stylo.
cd875e7 cam@mcc.id.au 2016-12-28T17:50:44+08:00 Bug 1326023 - Make Element::GetBindingURL return a strong reference. r=smaug
3c057d1 cam@mcc.id.au 2017-01-02T15:44:23+08:00 Bug 1323717 - Re-enable 1290994-4.html. r=manishearth
7a45228 cam@mcc.id.au 2016-12-28T17:50:44+08:00 Bug 1326023 - Make Element::GetBindingURL return a strong reference. r=smaug
171e45e cam@mcc.id.au 2017-01-03T18:35:15+08:00 Bug 1328223 - stylo: Ignore invalid URLs from @import rules. r=emilio
$
</pre>

<p>But it's not all of them:</p>

<pre>$ git log --pretty='format:%h %ae %cI %s' --author=cam@mcc.id.au | grep 2017- | wc -l
19</pre>

<p>What's going on here?  Does <code>--since</code> do something other than just remove commits from the output that are earlier than the given date?</p>
","0","242123","",""
"42527378","5186167","2017-03-01 09:02:17","4","1174","<git><git-log>","git: get the list of files that have been modified along one specific file","<p>I'd like to check which files have been modified at the same time as one specific file. Specifically, I want to get the history of this specific file, and for each commit of this history I want to know which files were affected.</p>

<p>When I do <code>git log --name-only</code>, I get the full history of commits, as well as a list of files that have been modified, for each commit.</p>

<p>Now if I do <code>git log &lt;file&gt;</code>, I get the history of the commits that involved this specific file.</p>

<p><code>git log --name-only &lt;file&gt;</code>, however, do not include the full list of files modified by each commits. Instead it only shows me <code>&lt;file&gt;</code>, which is quite useless to be honest.
Is there any way to make this command include all files?</p>
","0","5186167","",""
"5248671","168143","2011-03-09 16:16:49","1","422","<git><logging><git-log>","why can't I get git log to use the ""since"" and ""until"" parameters?","<p>from the git log help page:</p>

<blockquote>
  <p>since..until    Show only commits
  between the named two commits. When
  either  or  is omitted,
  it defaults to HEAD, i.e. the tip of
  the current branch. For a more<br>
  complete list of ways to spell 
  and , see gitrevisions(7).</p>
</blockquote>

<p>but i can't get it to work. <code>git log 32c67ec..HEAD</code> shows some unknown, large subset of the entire log.</p>
","3","168143","0","0"
"60498389","5916915","2020-03-03 00:15:07","2","2355","<git><git-diff><git-log>","How to show number of lines added and deleted for every file in git log and git diff?","<p>If I do <code>git log &lt;commit-id&gt; --stat</code> or <code>git diff</code> with <code>--stat</code>, I get something like:</p>

<pre><code>myproj/src/__main__.py                             |   1 +
myproj/{ =&gt; src}/utils.py                          |   0
myproj/{ =&gt; src}/web.py                            |  31 ++++-
3 files changed, 29 insertions(+), 3 deletions(-)
</code></pre>

<p>The number next to each file is: <code>number_of_inserts + number_of_deletes</code>. This is not what I want. I want to know the number of lines added and deleted for each file (e.g. <code>+28 -3</code> instead of <code>31</code>).</p>

<ul>
<li>I know I could use <code>--numstat</code> instead of <code>--stat</code>, but <code>--numstat</code> will not produce the histogram. </li>
<li><p>I also know that I  can use <a href=""https://linux.die.net/man/1/diffstat"" rel=""nofollow noreferrer""><code>diffstat</code></a>. For example, <code>git diff &lt;commit-id&gt; | diffstat -f4 -C</code>:</p>

<pre><code>myproj/src/__main__.py                             |   1    1    0 +
myproj/src/web.py                                  |  31   28    3 ++++-
2 files changed, 29 insertions(+), 3 deletions(-)
</code></pre>

<p>But here I lose information about file moves/renames (e.g. <code>myproj/{ =&gt; src}/web.py</code>).</p></li>
</ul>

<p>So how can I get output similar to <code>--stat</code>, but with information about the number of lines added and the number of lines deleted for each file?</p>
","3","5916915","0","0"
"42129387","5174213","2017-02-09 06:07:18","0","635","<git><bitbucket><git-log><bitbucket-server>","How to get the custom commit report using git log and unix commands?","<p>I am using the below command to get the commit report for a repository in stash. I am able to get the author name,commit id, date,comments etc in the repository and export to csv files, But unable to get the branch names. I am expecting a report to get the repo name, branch name, commit for the branch, author for the commit, date etc. If possible i want the jira ids with comments also.</p>

<pre><code>git log --pretty=format:'""%h"",""%an"",""%aD"",""%s"",' --shortstat --no-merges | paste - - - &gt; out.csv
</code></pre>
","4","5174213","",""
"61585601","13246220","2020-05-04 05:18:00","3","1140","<git><shell><command-line><branch><git-log>","git log --before=""4 months"" show me branches that have commits from 3 weeks ago. what am I doing wrong?","<p>so I have this snippet that I want to use to filter out branches that doesn't have a certain prefix and that hasn't received any commits in over 3 months so that I can remove them from our remote later on.</p>

<pre><code> for k in $(git branch -r | awk -Forigin !'/\/Prefix1\/|\/prefix2\//'); do
  if [ ""$(git log -1 --before=""3 month"" $k)"" ]; then
    echo ""$(git log -1 --pretty=format:""%ci, %cr, "" $k) $k"";
  fi;
done
</code></pre>

<p>The problem is currently that when I run this I see branches that have received commits 3 weeks ago, 5 months ago, 2 months ago, 1 month ago etc etc and I can't figure out why. </p>

<p>But if I only run: git log --before=""4 month"" --pretty=format:""%ci, %cr, "" It works as intended.</p>

<p>Can anyone give me any guidance? </p>
","0","13246220","0","0"
"24223206","117579","2014-06-14 18:56:46","0","89","<git><version-control><dvcs><git-log>","git log difference between 2 branches AND starting from a specific commit id","<p>I'm doing <code>git log HEAD..remotes/upstream/master</code> to get the difference in commits between the two branches. I want to do the same thing but listing commits after a specific commit hash. </p>

<p>For example, my current output is something like:</p>

<pre><code>1e191 commit 5
e0fa4 commit 4
fc27c commit 3
99df2 commit 2
9cfef commit 1
</code></pre>

<p>I would like to pass in <code>9cfef</code> and get:</p>

<pre><code>1e191 commit 5
e0fa4 commit 4
fc27c commit 3
99df2 commit 2
</code></pre>

<p>Is there a simple way to do this?</p>
","3","117579","",""
"24225832","117579","2014-06-15 01:37:48","3","2505","<git><version-control><git-branch><dvcs><git-log>","git log revision range gives incorrect range of commits","<p>I am trying to use list all commits within a given range on a branch using the  argument of <code>git log</code>. For some reason it doesn't seem to be giving me the right result (or maybe I'm understanding the command wrong?).</p>

<p>Here's the steps for what I'm doing:</p>

<ol>
<li><p>Clone the repo</p>

<p><code>git clone https://github.com/openstack/nova.git</code></p></li>
<li><p>Do <code>git log</code> and these are the last 9 commits:</p>

<pre><code>d5bde44 Merge ""Make metadata password routines use Instance object""
6cbc9ee Merge ""Fix object change detection""
39b7875 Merge ""Fix object leak in nova.tests.objects.test_fields.TestObject""
94d1034 Merge ""maint: correct docstring parameter description""
6407f17 Merge ""Fix live_migration method's docstring""
7406661 Merge ""Fix infinitely reschedule instance due to miss retry info""
9d8a34f Merge ""Remove unused code from test_compute_cells""
429cd4b Fix object change detection
01381b8 Fix object leak in nova.tests.objects.test_fields.TestObject
...
</code></pre></li>
<li><p>Lets say I want to get all the commits starting after <code>01381b8</code>. I issue <code>git log 01381b8..HEAD</code> and the following output is seen:</p>

<pre><code>d5bde44 Merge ""Make metadata password routines use Instance object""
6cbc9ee Merge ""Fix object change detection""
39b7875 Merge ""Fix object leak in nova.tests.objects.test_fields.TestObject""
94d1034 Merge ""maint: correct docstring parameter description""
6407f17 Merge ""Fix live_migration method's docstring""
7406661 Merge ""Fix infinitely reschedule instance due to miss retry info""
9d8a34f Merge ""Remove unused code from test_compute_cells""
429cd4b Fix object change detection
2214bc0 Remove unused code from test_compute_cells
9639b55 Fix infinitely reschedule instance due to miss retry info
a5184d3 Fix live_migration method's docstring
76729a3 maint: correct docstring parameter description
28224a6 Make metadata password routines use Instance object
</code></pre></li>
</ol>

<p>Wow! I actually got <strong>13</strong> commits in that output when I expected <strong>8</strong>. What is going on here? Is the revision range the correct mechanism to get show commits after a given commit? Or is this a bug?</p>
","1","117579","",""
"61965322","13599554","2020-05-22 23:19:17","2","293","<git><git-log>","Using git log to find branch creation dates in a repository","<p>I’m trying to use the git history to find out when branches in a repository were created. I’m approximating a branch’s creation date as the date of the first commit on a branch. The repositories I’m dealing with have no activity in the list 90 days, so the Github API doesn’t store this information.</p>

<p>My current approach is :</p>

<ol>
<li>Use <code>git log --merges</code> to get all merge commits</li>
<li>For each merge commit with parents A and B, use <code>git merge-base A B</code> to find the most recent common ancestor between those 2 commits. This is commit C.</li>
<li>Use <code>git log B..C</code> to list all commits on the branch, and use the last commit’s commit date as an approximation date for when the branch was created.</li>
</ol>

<p>I wanted to see if anyone knew of a more concise way to do this besides my approach above. </p>

<p>Thanks!</p>
","6","13599554","0","0"
"43334245","6046739","2017-04-10 23:07:00","2","136","<git><git-log>","git: how to show commits since ""the last time it was 5AM""","<p>I am trying to make an alias that, when used, would show all commits since 5 AM. First I found <a href=""https://stackoverflow.com/questions/5113425/how-to-make-git-log-show-all-of-todays-commits"">this Stack Overflow answer</a> which got me this far:</p>

<pre><code>git log --since=""5am""
</code></pre>

<p>Which at first seemed to be exactly what I need, except that after using it for a while, I noticed that if I execute it at any time between <code>05:00</code> and <code>23:59</code>, I get all the commits that were committed the same day since 5 AM as expected, but if I execute it at any time between <code>00:00</code> and <code>04:59</code>, I don't get any commits, not even ones that I commit after 12 AM.</p>

<p>So I guess using a time like that with <code>--since</code> is kind of equivalent to ""give me all the commits that were literally committed today AND after 5 AM"". What I want is more like ""give me all the commits that were committed since the last time it was 5 AM, be it today or yesterday"". For example if today I make a commit at 9 AM, I want to be able to see it in the result for the rest of the day, but also tomorrow from 12 AM to 5 AM.</p>

<p>Is there a way to achieve this?</p>

<p>Thanks :)</p>
","0","6046739","0","0"
"6628624","270511","2011-07-08 18:15:25","1","274","<git><git-log>","How to get git-log to display commits using relative revision syntax of git-parse-rev","<p>git show-branch displays commits using the relative revision expressions that can be parsed by git-parse-rev, for example ""dev~106^2~52"".  How can I get the same output from git-log?</p>
","1","270511","",""
"6653334","470112","2011-07-11 16:29:08","3","2057","<git><grep><git-log>","git log with additional details from body of the commit message","<p>I have a git commit template as below:</p>

<pre><code>[overtype with subject line up to 50 chars -----&gt;]

[overtype with details of what's in the commit]

[other information]
Ticket-Refs: 
</code></pre>

<p>I would like to append the string after ""Ticket-Refs:"" to a <code>git log graph --pretty=format:</code></p>

<p>I was trying to use the <code>--grep=</code> to achieve this on the <code>%b</code> or <code>%B</code>, any help would be appreciated.</p>
","0","470112","",""
"62243415","10425217","2020-06-07 09:31:00","1","437","<git><visual-studio-code><git-log><git-revision>","git log extension in VSCode throwing error ambiguous argument 'HEAD'","<p>One strange issue i am facing is git history extenstion in VSCode throwing me error that - ambiguous argument HEAD if i select a file and click on git history extension button to see the history on the file. 
But if i run the git command manually to check commits on that file, it works. Can you please help me on this. I even cannot uninstall reinstall git history from VSCode</p>

<p>When clicking '<strong>Git: View History</strong>' button at the top right corner of the screen , the error is -</p>

<pre><code>git rev-list --full-history --count master --  (completed in 0.102s)
fatal: bad revision 'master'

git log --full-history --pretty=oneline --date-order --decorate=full --skip=0 --max-count=100 master --  (completed in 0.106s)
fatal: bad revision 'master'

git shortlog -e -s -n HEAD  (completed in 0.111s)
fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]
</code></pre>

<p>But when i run the following git bash command , it gives me proper commits log-</p>

<pre><code>git log &lt;filename&gt;
commit 9cd4423a53ef3737d8d43a2e19185eead51e103f (HEAD -&gt; &lt;branch1&gt;, origin/&lt;branch1&gt;)
Author: XX &lt;...&gt;
Date:   Sat Jun 6 07:24:57 2020 +0530

    terminate protect value false modified

commit a37cce30dcb76d857fc44bd98601ac1ce2e567a3
</code></pre>
","0","10425217","",""
"32274406","5277471","2015-08-28 15:17:21","4","2353","<git><git-log>","How to make git log output that just shows date and hash on one line?","<p>I need to get the Date and commit results of a set of github  in this format: </p>

<pre><code>Date Commit
19 Mar 2015 b6959eafe0df6031485509c539e22eaf2780919c
1 Apr 2015 9a1f13339cc7d43930440c2350ea3060b72c8503
1 Apr 2015 1e76036421ca4d72c371182fc494af514911b099
</code></pre>

<p>I am able to get the date with this command: </p>

<pre><code>git log | grep Date: | awk '{print  $4 "" "" $3 "" "" $6}'
</code></pre>

<p>and the commit with</p>

<pre><code>git log | grep commit | awk '{print $2}'
</code></pre>

<p>How can I combine the commands, so as to print both results in the same line? </p>

<p>Here is an example of the git log:</p>

<pre><code>commit 1e76036421ca4d72c371182fc494af514911b099
Author: xxxx
Date:   Wed Apr 1 17:35:36 2015 +0200

    First web app commit

    First web app commit

commit 9a1f13339cc7d43930440c2350ea3060b72c8503
Author: xxxx
Date:   Wed Apr 1 17:28:42 2015 +0200

   change from app to website

commit b6959eafe0df6031485509c539e22eaf2780919c
Author: xxx
Date:   Thu Mar 19 18:58:33 2015 +0100

   First remote commit: hello world

    scheleton of the project now available

commit a41d419de46a59e72dbc52e5f39c9d8a8a9af72a
Author: xxxx
Date:   Thu Mar 19 17:31:16 2015 +0100

    Initial commit
</code></pre>
","0","5277471","",""
"50109381","7449489","2018-04-30 23:11:13","1","53","<git><git-checkout><git-log>","Does the branch I'm on using 'git log' matter if I use the same commit hashes?","<p>Behold! I have the following Git structure:</p>

<pre><code>A-...-C-D-E      (develop branch)
         \
          X-Y    (feature1 branch)
</code></pre>

<p>Where A, B, C, D, and E are commits on the develop branch, and X and Y are commits on a branch named feature1. Commits A and C are seperated by an unknown amount of commits.
Let's also say that commit A has (partial) commit hash <code>b0a710ad5</code> and commit Y has (partial) commit hash <code>0fc0d3</code>.</p>

<p>Now, there are two scenarios of interest. One where I checkout develop and run </p>

<pre><code>git log --oneline b0a710ad5..0fc0d3
</code></pre>

<p>And the second scenario, where I instead checkout feature1, and do the same command:</p>

<pre><code>git log --oneline b0a710ad5..0fc0d3
</code></pre>

<p>If I had to guess what these scenarios returned, I would say that the first would give me an error, since commit Y does not exist on the develop branch. And I would guess that the second scenario would give me a legitimate Git log. However, I was quite mistaken. It didn't seem to matter what branch I was on: both commands gave me the exact same logs. It appears that <code>git log</code> can see commits from other branches, <em>which thing I never had supposed</em>.</p>

<p>Can <code>git log</code> find a commit on any branch in the local repository? Does it search and find commits remotely if it can't find it on any local branches? Does it truly not matter what branch I am on when I run a <code>git log ..</code> with commit hashes? Oh, the possibilities.</p>
","2","7449489","",""
"15521255","764363","2013-03-20 10:42:25","6","1260","<git><git-log>","Using git log, is there a way to get '--name-status' and '--numstat' in one command?","<p>For all files of a commit, I would like both the status modifier <code>--name-status</code> provides, as well as the amount of added and deleted lines that <code>--numstat</code> gives. Say I have the following:</p>

<pre><code>&gt; git log --pretty=format:""%aN %ct"" --reverse --name-status --encoding=UTF-8 --no-renames
John Doe 1234567489
M       foo/bar/foo.bar
A       bar/hello.txt
</code></pre>

<p>and:</p>

<pre><code>&gt; git log --pretty=format: --reverse --numstat --encoding=UTF-8 --no-renames
9      5       foo/bar/foo.bar
21     0       bar/hello.txt
</code></pre>

<p>Is there a single command/combination of flags which gives me the output of them combined? Something along the lines of this:</p>

<pre><code>John Doe 1234567489
M    9    5       foo/bar/foo.bar
A    21   0       bar/hello.txt
</code></pre>

<p>I know it is possible to combine them with some <code>awk</code> magic, but seeing as I will do this on multiple large repositories and performance matters, a single git log command would be preferable.</p>
","0","764363","0","0"
"32540819","1049526","2015-09-12 15:58:41","8","2146","<git><depth><git-diff><git-log><non-recursive>","Non-recursive git log and diff","<pre><code>git log -p .
</code></pre>

<p>only within the current directory but not in subdirectories</p>

<p>equivalent</p>

<pre><code>svn log --diff --depth files .
</code></pre>

<p>Is it possible?</p>
","0","1049526","0","0"
"15595832","1852410","2013-03-24 06:32:47","0","262","<git><git-diff><git-log>","error in git log","<p>So I have been coming into this git log error several times now.</p>

<p>I wrote this simple java code to illustrate it. I commit my progress (writing it gradually) and then run <em>git log -p --decorate</em> </p>

<pre><code>class Mega {
    private int alpha = 0;
    private int beta = 1;
    private int omega = 5;

    public returnAlpha(){
        return this.alpha;
    }

    public returnBeta(){
        return this.beta;
    }

    public returnOmega(){
        return this.omega;
    }
}
</code></pre>

<p>This is the git log:</p>

<pre><code>commit 2dcc5243a943a7e1a3344479bfb6a21474c6c024 (HEAD, master)
Date:   Sat Mar 23 17:26:24 2013 -0700

    stage 2

diff --git a/untitled.java b/untitled.java
index 821a19e..b2ba345 100644
--- a/untitled.java
+++ b/untitled.java
**@@ -10,4 +10,8 @@ class Mega {**
    public returnBeta(){
        return this.beta;
    }
+
+   public returnOmega(){
+       return this.omega;
+   }
 }
\ No newline at end of file

commit 43fadfc5ec827cf24667494e350ca9bcda21ffd3
Date:   Sat Mar 23 17:26:01 2013 -0700

    stage 2

diff --git a/untitled.java b/untitled.java
index e5c38d9..821a19e 100644
--- a/untitled.java
+++ b/untitled.java
**@@ -6,4 +6,8 @@ class Mega {**
    public returnAlpha(){
        return this.alpha;
    }
+
+   public returnBeta(){
+       return this.beta;
+   }
 }
\ No newline at end of file

commit 46d27d8485cb296798e5490803b1b7a04313793f
Date:   Sat Mar 23 17:25:24 2013 -0700

    stage 1

diff --git a/untitled.java b/untitled.java
index 332a406..e5c38d9 100644
--- a/untitled.java
+++ b/untitled.java
@@ -1,5 +1,9 @@
 class Mega {
-   int alpha = 0;
-   int beta = 1;
-   int omega = 5;
+   private int alpha = 0;
+   private int beta = 1;
+   private int omega = 5;
+
+   public returnAlpha(){
+       return this.alpha;
+   }
 }
\ No newline at end of file

commit bb18a576d44b492e50906d3eac495956590ff263
Date:   Sat Mar 23 17:24:22 2013 -0700

    stage 0

diff --git a/untitled.java b/untitled.java
index e69de29..332a406 100644
--- a/untitled.java
+++ b/untitled.java
@@ -0,0 +1,5 @@
+class Mega {
+   int alpha = 0;
+   int beta = 1;
+   int omega = 5;
+}
\ No newline at end of file

commit d630ed1f1edff608488938ec3ea748a2d5a7bab1
Date:   Sat Mar 23 17:23:39 2013 -0700

    java added

diff --git a/untitled.java b/untitled.java
new file mode 100644
index 0000000..e69de29
</code></pre>

<p>I need to fix this log mistake because I am automatically (with a script) parsing the log and I need it to remain consistent. </p>

<p>Furthermore as the amount of commits increases there are other inconsistencies such as random spaces and sometimes the line after the @ is actually part of the diff (unlike the cases of this example).</p>
","1","1852410","",""
"32893773","134804","2015-10-01 17:49:37","6","2982","<git><git-log>","how to git log with date-time and file names in one line","<p>I would like to have an git log (or in any other way) output like this, </p>

<pre><code>2015-01-14 10:33:14 main.cpp
2014-10-30 11:30:22 some.cpp
2014-10-27 10:15:43 another.cpp
2014-10-27 09:41:22 main.cpp
2014-10-24 19:15:08 some.cpp
</code></pre>

<p>Basically the output should contain date, time and the file changed. And one entry should be in one line as example shows. 
I have checked pretty formats, but could not find a way to output the file names.</p>

<p>So, how to get something like this from git commands?</p>
","2","134804","",""
"15807522","441352","2013-04-04 09:33:21","24","10387","<git><git-log><cherry-pick><git-cherry-pick>","Why is git log --cherry-pick not removing equivalent commits?","<p>I have been trying to use </p>

<pre><code>git log --no-merges --cherry-pick --right-only master...my-branch
</code></pre>

<p>to generate a list of commits that are in the my-branch, but not in master (as per the git-log documentation). However, there are still many equivalent commits that are coming up in the list. If I show them and their patches, there is no difference apart from the commit id.</p>

<pre><code>git show 16cbd0e47406a4f7acbd6dc13f02d74d0b6a7621 &gt;patcha
git show c53c7c32dcd84bfa7096a50b27738458e84536d5 &gt;patchb

diff patcha patchb
1c1
&lt; commit 16cbd0e47406a4f7acbd6dc13f02d74d0b6a7621
---
&gt; commit c53c7c32dcd84bfa7096a50b27738458e84536d5
</code></pre>

<p>And even <code>git patch-id</code> shows them as being equivalent:</p>

<pre><code>git show c53c7c32dcd84bfa7096a50b27738458e84536d5 | git patch-id
2b5504fb9a8622b4326195d88c7a20f29701e62b c53c7c32dcd84bfa7096a50b27738458e84536d5
git show 16cbd0e47406a4f7acbd6dc13f02d74d0b6a7621 | git patch-id
2b5504fb9a8622b4326195d88c7a20f29701e62b 16cbd0e47406a4f7acbd6dc13f02d74d0b6a7621
</code></pre>

<p>How does <code>git log --cherry-pick</code> not pick these up as duplicates?</p>
","1","441352","0","0"
"15834839","1061748","2013-04-05 13:10:21","5","2482","<git><git-log><git-status>","How can I make git list all changed files of a certain type in a specific path for a specific bug?","<p>I would like to know how to make git list all changed files</p>

<ul>
<li>of a certain type (e.g. all php files)</li>
<li>filed under a certain bug no. or which are still uncommitted</li>
<li>and are in a specific path</li>
</ul>

<p>I'll start with laying out an example situation for my question.</p>

<p>Say I have changed the following files:</p>

<p><strong>Uncommitted changes</strong></p>

<pre><code>/site/main.php
/site/main.html
/site/includes/lib.php
</code></pre>

<p><strong>Commit 3</strong><br>
Commit message: ""Bug xyz: Made some changes""</p>

<pre><code>/site/main.php
/site/main.html
/site/main.js
/test/test.php
/test/test.html
</code></pre>

<p><strong>Commit 2</strong><br>
Commit message: ""Bug xyz: Made some more changes""</p>

<pre><code>/site/main.php
/site/main.html
/site/includes/include.php
</code></pre>

<p><strong>Commit 1</strong><br>
Commit message: ""Bug abc: Note that this is another bug""</p>

<pre><code>/site/login.php
</code></pre>

<p>Say I'm still working on bug xyz. Now I need a list of all php files that have been changed so far in the site directory for this bug. So I would need the following list as output:</p>

<pre><code>/site/main.php
/site/includes/lib.php
/site/includes/include.php
</code></pre>

<p>What command can do this?</p>
","0","1061748","0","0"
"50428002","7424690","2018-05-19 17:46:42","-1","182","<linux><git><ubuntu><github><git-log>","git log displays nothing for all projects","<p>I have been using git for many years. But suddenly, <code>git log</code> command started displaying nothing. When I type <code>git log</code> command, it simply ends and displays nothing.</p>

<p>The command <code>git rev-list --all --pretty</code> does return all the commits along with other informations.</p>

<pre><code>commit b89bbaafc0854b57230d5e5018dd72d48106eb03
Merge: 96758ec 60c87e1
Author: Ali Ayub Khan &lt;akhan.bscs15seecs@seecs.edu.pk&gt;
Date:   Sat May 19 14:05:01 2018 +0500

Merge pull request #33 from hkedia321/master

fix #32 - update readme and ping heroku to prevent from sleeping
</code></pre>

<p>So, the ""git log"" command started displaying nothing. I uninstalled git and reinstalled also, but it still doesn't work. This is same for all the projects (new and old both). I am using Ubuntu 16.04 LTS.Can someone please help me to fix this problem.</p>
","0","7424690","",""
"50430722","8888320","2018-05-20 00:39:51","8","21522","<git><git-log>","Meaning of git log --oneline --graph output","<p>I'm learning about relative commit references and trying to understand the following <code>git log --oneline --graph</code> output provided in a lesson.</p>

<p><a href=""https://i.stack.imgur.com/1gSeO.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/1gSeO.jpg"" alt=""git graph""></a></p>

<p>In the lesson it says that given HEAD points to the <code>9ec05ca</code> commit, HEAD^^^ (meaning the great-grandparent commit) is the <code>0c5975a</code> commit. But it seems to me <code>4c9749e</code> should be the great grandparent, if each SHA is a direct descendant of the one below it. Any clarification appreciated.</p>
","5","8888320","0","0"
"50435580","1004604","2018-05-20 13:58:15","1","121","<bash><shell><vim><scripting><git-log>","How to kill LESS for git log in shell script while loop?","<p>I want to monitor my git log using a shell script but I cannot figure out how to send the <code>q</code> key to kill LESS to continue the while loop.  Here is what I have so far:</p>

<pre><code>while :
do
clear
git log
sleep 1
done
</code></pre>

<p>I also tried:</p>

<pre><code>while :
do
clear
git log
PID=$!
sleep 1
kill $PID
done
</code></pre>

<p>But, that second script has the same problem as the one before it, which is that the loop stops and waits for the git log (which is being shown through LESS) to quit.</p>

<p>How can I send a command to quit the git log so that it can refresh?</p>
","6","1004604","",""
"32637429","1858327","2015-09-17 18:22:12","3","362","<git><git-log>","git log --remotes --decorate shows a deleted branch?","<p>I'm using <code>git log --oneline --remotes --decorate</code> (didn't think <code>--oneline</code> was relevant so it's not in the title) and I get this log (names and messages changed).</p>

<pre><code>$ git log --oneline --remotes --decorate
0efdd55 (HEAD, origin/master, origin/HEAD, master) Merge pull request #1 in FOO/bar-service from develop to master
cec3034 (origin/develop, develop) Merge pull request #2 in FOO/bar-service from refactor-top-level-components to develop
a847a00 (origin/refactor-top-level-components, refactor-top-level-components) Remove an unnecessary file to fix compilation
029e107 (origin/feature/refactor-top-level-components) Add .gitignore, remove editor specific files and compiled output
72dffaf Initial bar service Commit
</code></pre>

<p>I accidentally made the <code>feature/refactor-top-level-components</code> branch through BitBucket after I made <code>refactor-top-level-components</code> locally. I pushed <code>refactor-top-level-components</code> and deleted <code>feature/refactor-top-level-components</code> through stash. Why does it still show in the logs? Is it not actually deleted or is there some log flag I'm using wrong?</p>
","0","1858327","",""
"16286517","2153622","2013-04-29 19:19:34","6","2654","<git><date><git-log>","How to ""toggle"" the date format of git-log? How to display both relative and absolute dates simultaneously in the same git log?","<p>My current default git log line runs as follows:</p>

<pre><code>git log --graph --date=relative --pretty=format:'%Cblue%h%Creset %Cgreen(%cr)%Creset -%C(yellow)%d%Creset %s' --abbrev-commit -7
</code></pre>

<p>Sometimes, however, I'd prefer an absolute date/time format, rather than relative, so I tried: <code>--date=default</code> and <code>--date=local</code> instead of <code>--date=relative</code> and even left <code>--date=..</code> out altogether: the result was unchanged. Possibly it has to do with <a href=""http://linux.die.net/man/1/git-log"" rel=""noreferrer"">""log.date config variable sets a default value for log command's --date option.""</a>, I don't know. Possibly I'd need to restart the terminal (but if that were the case I'd be a tad disappointed...).</p>

<p>In short, I'd like to ""toggle"" the date, and morever even be able to use both date formats in one instance of git log.</p>
","1","2153622","0","0"
"16986060","1270259","2013-06-07 14:04:25","0","83","<git><git-log><git-status>","Did I just lose every change I ever made in git?","<p>I was working on a project last night and committing all my changes but NOT checking them in to the repo, which is my bad.</p>

<p>However this morning I had a small issue with <a href=""https://stackoverflow.com/a/12371337/1270259"">object file is empty</a> and followed the steps in the answer (deleting the damaged object files).</p>

<p>I continued with my git commits, merges and so on, but when I went to push my new tag to github, I saw that none of my changes were in there.</p>

<p>So I did a git log and see NONE of my previous commits. where are they? Is all my work lost? My last commit in the log was from April.....</p>

<h2>Update</h2>

<p>I did a <code>git fsck --unreachable</code>:</p>

<pre><code>###@######:~/####/###/Aisis-Framework$ git fsck --unreachable
Checking object directories: 100% (256/256), done.
Checking objects: 100% (8675/8675), done.
broken link from    tree 48d988ab8e70a2cd914bcf25ca3b306108a47fc1
              to    blob a3f00c48ae551785c50de092734c988eca4c0e0a
unreachable blob 2090973ca264991ec96d19ebd326d4c95dbae692
unreachable blob 231c62f4a8ea2fa6ccebe40e819046838e12ad1a
unreachable blob 66a2a7c461ac0ca24cbcde6b073bfde1b80daee8
unreachable blob 33a4ad126b514928010bc88aff3fbb3ef51cfaa7
unreachable blob a524ad7bff264b084c48d4325480313d7ed8b3ed
unreachable blob acde3d0e65d1dfc8e7ec3dd3f585e53564828afa
unreachable blob 7f6056fc3f08e552f257eb1bf3bf173d923fe0dc
unreachable tag ee6283bdf5b1f486eb3a6ca53604f474d6a240b0
missing blob a3f00c48ae551785c50de092734c988eca4c0e0a
unreachable blob 84f610d9133548e8aca1c7c4af6ff4c74931390a
unreachable blob 35773cf6313d506598e7e26c2f06422fc0a83471
</code></pre>
","7","1270259","",""
"33592008","614702","2015-11-08 08:18:59","41","5497","<git><terminal><git-log><oh-my-zsh>","git log/show etc. replaces the terminal screen","<p>I recently started to use <code>zsh</code> (oh-my-zsh, without customizations) on iTerm2. But, I'm having a trouble in <code>git log</code> or <code>git show</code>.</p>

<p>Previously, for example, the <code>git log</code> results were just a part of the terminal, just like <code>ls -l</code> result. After quitting <code>git log</code> by pressing <code>q</code> key, the result was remained in the terminal screen. I was able to pick some hash id easily.</p>

<p>However, the current problem is that <code>git log</code> (or <code>git show</code>) results replace the screen. So, after quitting <code>git log</code>, the terminal completely removes all <code>git</code> results and returns to the original screen. This behavior is like <code>vim</code>.</p>

<p>This behavior is the same even with <code>bash</code> or Mac's default terminal app. This is not a problem of <code>--no-pager</code>.</p>

<p>Any helps would be appreciated.</p>
","4","614702","0","0"
"17127801","384706","2013-06-15 20:56:16","1","170","<git><version-control><git-log><gitk>","Shortcoming of git log? Why can't I see all the branches?","<p>I have a branch in <code>git</code> and I am on that branch and not on <code>master</code> branch.<br>
Using <code>git log --graph</code> I can only see linearly that I am on that branch. But I can not see that I have ""splitted"" from the <code>master</code> branch.<br>
I.e.  I see:  </p>

<pre><code>* b  
*     
*    
*    
</code></pre>

<p>Where <code>b</code> is the private branch I made and I was expecting to see:  </p>

<pre><code>*master  
* / *b  
*    
*  
*  
</code></pre>

<p>But I do see this in <code>gitk</code>. Is it not possible to get an accurate graph of the tree via command line?</p>
","0","384706","0","0"
"33695763","1400869","2015-11-13 15:06:53","1","218","<git><merge><git-log>","Weird output for git log --merges when merging feature branches","<p>I have the following Git repository tree:</p>

<pre><code>C
|\
| B
|/
A 

A: No parents. Initial commit.
   Contains foo with content ""ABC"".
B: Parents: A. ""Commit on feature branch"".
   Contains foo with content ""XYZ"".
C: Parents: A, B. ""Merge of feature branch"".
   Contains foo with content ""XYZ"".
</code></pre>

<p>I expected <code>git log --merges foo</code> to show me commit <code>C</code>, however, the log is empty! Only if I specify <code>--first-parent</code> as well, it shows the merge commit <code>C</code>. Why is that so? Is this a bug in Git's default history simplification?</p>

<p>Unfortunately, the history simplification example in the Git docs (<a href=""https://git-scm.com/docs/git-log#_history_simplification"" rel=""nofollow"">https://git-scm.com/docs/git-log#_history_simplification</a>) does not contain the very same situation as here (although it is probably the most common situation...).</p>

<p>Does anybody know, what happens? I'm pretty sure it has to do with Git's default history simplifcation algorithm, because if I specify <code>--full-history</code> the merge commit <code>C</code> is shown as well.</p>

<p>Does the default follow only the <em>second</em> parent in a commit for some reason?</p>
","4","1400869","",""
"33763340","432311","2015-11-17 17:29:29","0","471","<git><branch><git-log><revision-history>","How can I filter out certain branches from git log?","<p>I want to filter out certain branches (such as those matching <code>origin/build_*</code> for example) from my git log.</p>

<p>I've looked high and low and come across some great resources (<a href=""https://www.atlassian.com/git/tutorials/git-log/filtering-the-commit-history"" rel=""nofollow"">this one for example</a>) but I still can't figure out how to do this. </p>

<p>From the documentation it looks like I should be able to do something like:</p>

<p><code>git log --exclude=origin/build_* --branches</code></p>

<p>but it doesn't work.</p>
","1","432311","",""
"33781297","48465","2015-11-18 13:26:08","1","83","<git><git-log>","How to get the git log of which files were deleted/modified?","<p>I could parse <code>git log -p --pretty=format:%H</code> but this also includes the content of the files.</p>

<p>Is there any option I could pass to <code>git log</code> that would return less characters than the command above but would still allow me to figure out whether at least 1 file was deleted or modified for each commit?</p>
","0","48465","",""
"18123233","863028","2013-08-08 10:07:19","1","1127","<git><git-log><cherry-pick><git-cherry-pick>","more verbose git cherry","<p>I'm looking for git cherry to behave more like <code>git log</code>.</p>

<p>I have two independent branches in my git repository (result of svn import). No common ancestor, no merges between them. I don't want these two branches to be ever connected, even though they concern the same project.</p>

<p>The two branches are:</p>

<p><code>master</code> (clean line, releasable code)</p>

<p><code>old_trunk</code> (junk development branch, with experimental commits as well as ones that I want to cherry pick)</p>

<p>Now, </p>

<pre><code>$ git cherry old_trunk -v
</code></pre>

<p>properly identifies changesets that were already applied to the master (as svn merge is working more like a cherry pick).</p>

<p>However git log:</p>

<pre><code>$ git log --cherry --cherry-mark master..old_trunk
</code></pre>

<p>shows all commits as not yet applied to master.
It's either broken or using different mechanism to find cherry picks.</p>

<p>I'm looking for a solution to navigate through <code>old_trunk</code> history to see the author, see the date of the commit, see full commit message, and most importantly to be able to distinguish cherry-picks already done.</p>

<p>Any thoughts?</p>
","0","863028","",""
"34764425","4303370","2016-01-13 10:38:08","1","161","<git><git-log>","git show only remote branches","<p>how can I show branches by date on server?<br>
On <a href=""http://www.commandlinefu.com/commands/view/2345/show-git-branches-by-date-useful-for-showing-active-branches"" rel=""nofollow noreferrer"">this page</a> I have following query found:</p>

<pre><code>for k in `git branch|perl -pe s/^..//`;do echo -e `git show --pretty=format:""%Cgreen%ci %Cblue%cr%Creset"" $k|head -n 1`\\t$k;done|sort –r
</code></pre>

<p>With git branch -rv I can see the branches on the server, but no additional information.</p>

<p>How could you build such a thing, but only for the server, ie. Show all branches, which are located only on the server?</p>

<p>Unfortunately, I am familiar with the console not good enough to make it rebuild itself :-(</p>
","0","4303370","",""
"50927407","8825683","2018-06-19 11:32:47","0","891","<git><git-commit><git-diff><git-log>","Why is git diff showing wrong commit?","<p>I was trying to get the diff for a commit with the message <code>Add structure</code> shown below, but <code>git diff fb237ff</code> shows the diff for the commit <code>""Add title""</code> instead. How can I get the diff for the <code>SHA</code> I want instead of the child of this commit?:</p>

<pre><code>commit 31013a1 (HEAD -&gt; master, origin/master)
Author: user.name &lt;user.email&gt;
Date:   Sun Jun 17 19:28:52 2018 +0100

    Add title

commit fb237ff
Author: user.name &lt;user.email&gt;
Date:   Sun Jun 17 19:24:33 2018 +0100

    Add structure

commit 69d64b4
Author: user.name &lt;user.email&gt;
Date:   Sun Jun 17 19:10:26 2018 +0100

    Add heading
</code></pre>
","1","8825683","",""
"18435363","10608","2013-08-26 01:14:12","3","333","<git><git-log>","how to search git history (pickaxe), but excluding renames","<p>In a personal project of mine, I renamed a file about 4 times across 4 different commits. In fact, I was learning git with this process as well, and I have renamed many files many, many times.</p>

<p>I want to search for any change involving the word ""water"", but I do not want git to display every instance ""water"" that simply results because of file renaming I did.</p>
","0","10608","",""
"41975669","7431936","2017-02-01 09:03:06","6","3483","<git><cut><git-log>","Get first 'x' characters of git log","<p>I'm trying to get only the first 40 characters of a git log,
my current not working command is:</p>

<pre><code>git log &lt;branch_name&gt; | cut -c 1-40 &gt;&gt; some_file
</code></pre>

<p>This outputs the whole log.</p>

<p>Kinda new to linux, any suggestions?</p>

<p><strong>EDIT:</strong></p>

<pre><code>git log &lt;branch_name&gt; | head -n1 &gt;&gt; some_file
</code></pre>

<p>Working command per @Someprogrammerdude suggestion</p>
","1","7431936","",""
"34994647","246724","2016-01-25 14:10:59","3","131","<git><git-log><git-subtree>","git log --all to ignore disconnected parts of history graph","<p>A regular <code>git log</code> only lists the ancestors of the current commit.</p>

<p>With the <code>--all</code> parameter (preferably combined with <code>--graph</code>), it lists the ancestors of all refs. Usually these other refs and commits are somehow connected to the current commit. They can be ancestors, descendants, or some kind of direct or indirect ""siblings"". Or in other words, you could find a path through the graph from the current commit to any other commit shown with <code>git log --all</code>.</p>

<p>If you start playing with <code>git subtree</code>, and fetch from other subtree remotes, you will get commits that are not in any way connected to the main history. These are still listed with <code>git log --all</code>. And this can get confusing.</p>

<p>Questions:</p>

<ul>
<li>Is there a trick to exclude disconnected commits from history display?</li>
<li>Is there a trick to have a better visual distinction between connected and disconnected pieces of the history graph?</li>
</ul>

<hr>

<p>Note: I am using the following aliases for git log:</p>

<pre><code>lol = log --graph --decorate --pretty=oneline --abbrev-commit
lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
</code></pre>
","0","246724","0","0"
"42182555","58678","2017-02-11 23:41:31","2","3137","<git><format><git-log>","git log pretty format","<p>I have an alias for <code>git log</code> twoline.</p>

<pre><code>[alias]
    l       = ""log --graph --date=relative --decorate --abbrev-commit --pretty=format:'%h - %aD (%ar)%d%n  %s - %an'""
</code></pre>

<p>It works nicely.</p>

<p><strong>output#1:</strong></p>

<pre><code>$ git l -2
* 714a14e - Fri, 18 Nov 2016 00:04:19 -0800 (3 months ago) (HEAD -&gt; dev, github/dev)
|   Adding BitSet implementation. - hippy
* 87dce5f - Sat, 10 Dec 2016 12:50:40 -0800 (9 weeks ago)
|   Turning on recommended code analysis rules. - hippy
</code></pre>

<p>However, with <code>--name-status</code>, I can see a pipe after the author name.</p>

<p><strong>output#2:</strong></p>

<pre><code>$ git l -2 --name-status
* 714a14e - Fri, 18 Nov 2016 00:04:19 -0800 (3 months ago) (HEAD -&gt; dev, github/dev)
|   Adding BitSet implementation. - hippy|
| M README.md
| A rm.Extensions/BitSet.cs
| M rm.Extensions/Properties/AssemblyInfo.cs
| M rm.Extensions/rm.Extensions.csproj
| A rm.ExtensionsTest/BitSetTest.cs
| M rm.ExtensionsTest/rm.ExtensionsTest.csproj

* 87dce5f - Sat, 10 Dec 2016 12:50:40 -0800 (9 weeks ago)
|   Turning on recommended code analysis rules. - hippy|
| M rm.Extensions/GraphExtension.cs
| M rm.Extensions/Wrapped.cs
| M rm.Extensions/WrappedExtension.cs
| M rm.Extensions/rm.Extensions.csproj
</code></pre>

<p>If I were to add a <code>%n</code> at the very end (so <code>...%an%n</code>), <strong>output#1</strong> becomes 3 lines instead of 2. </p>

<p>I want <code>--name-status</code> to look like this preferably but an extra newline before list of files is ok:</p>

<pre><code>$ git l -2 --name-status
* 714a14e - Fri, 18 Nov 2016 00:04:19 -0800 (3 months ago) (HEAD -&gt; dev, github/dev)
|   Adding BitSet implementation. - hippy
| M README.md
| A rm.Extensions/BitSet.cs
| M rm.Extensions/Properties/AssemblyInfo.cs
| M rm.Extensions/rm.Extensions.csproj
| A rm.ExtensionsTest/BitSetTest.cs
| M rm.ExtensionsTest/rm.ExtensionsTest.csproj
|
* 87dce5f - Sat, 10 Dec 2016 12:50:40 -0800 (9 weeks ago)
|   Turning on recommended code analysis rules. - hippy
| M rm.Extensions/GraphExtension.cs
| M rm.Extensions/Wrapped.cs
| M rm.Extensions/WrappedExtension.cs
| M rm.Extensions/rm.Extensions.csproj
</code></pre>

<p>This just seems like a bug to me as I cannot find anything in the <a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">pretty formats man page</a>. </p>

<pre><code>$ git version
git version 2.11.0.windows.1
</code></pre>

<p>How do I fix this the <code>pretty format</code>?</p>

<p>Note: I have filed a bug here (<a href=""http://marc.info/?t=148695424800002&amp;r=1&amp;w=2"" rel=""nofollow noreferrer"">bug link</a>) and will update the ticket accordingly.</p>
","0","58678","0","0"
"42196742","1084174","2017-02-13 04:35:49","0","350","<git><version-control><commit><git-log>","Human readable/comparable git change IDs","<p>Some version control system, for example, Perforce, keeps CL as simple integer, hence looking into two different CL on same branch, it's easy to understand which CL has been merged first. But, in case of Git, a CL/ short CL is long hex string, which is not even comparable by human eyes easily. Is there any way to get rid of this issue?</p>
","4","1084174","",""
"42230119","34438","2017-02-14 15:32:20","2","1025","<git><svn><git-log><git-blame>","git: How to find file history from blob ID","<p>I'm trying to replicate Subversion's <code>$Id: $</code> feature with git. I know that I can use <code>.gitattributes</code> to set the <code>ident</code> attribute, which will allow me to embed the blob ID in a source code comment. That's the basic requirement, and I'm covered.</p>

<p>But I'm struggling to work out how I can make the ID useful in a practical sense. <code>git log</code> and <code>git blame</code> require a filename, so I can't use the ID with them. <code>git show</code> just shows the blob contents, but doesn't give any link to the commit.</p>

<p>What I'd like is, given a blob ID, to get the commit that created that blob. (Ultimately, to get <code>git log</code> or <code>git blame</code> data for the file, or to be able to check out a revision that contained that file).</p>

<p>I appreciate that commit history in a distributed system like git is more complex than subversion, but if I can get anything as a starting point, that would be sufficient. All I really need is to be able to demonstrate that given the source code, I can track back into the version control history.</p>
","1","34438","",""
"23010173","3523232","2014-04-11 10:34:18","1","156","<git><git-log>","Exclude provided date with git log --since","<p>I'd like to exclude commit done at the provided date from the git log --since  command.</p>

<p>When running :</p>

<pre><code> git log --since ""2014-04-10 13:23:51 +0200"" --pretty=format:"" %ci, (%h): %s""
</code></pre>

<p>I get:</p>

<pre><code> 2014-04-10 17:00:22 +0200, (2697ef4): commit message 2
 2014-04-10 13:23:51 +0200, (8170ee5): commit message 1
</code></pre>

<p>But I'd like to exlude the second one since the commit date is exactly the provided date and get only:</p>

<pre><code> 2014-04-10 17:00:22 +0200, (2697ef4): commit message 2
</code></pre>
","3","3523232","",""
"42426836","","2017-02-23 21:50:10","1","125","<git><merge><git-log>","How to identify and list octopus merges using git log?","<p>Is there any way to <strong>list</strong> all <strong>octopus</strong> <strong>merges</strong> in a git repository using git commands (e.g. git log ...)?</p>
","3","","",""
"42446665","659634","2017-02-24 19:21:39","1","256","<git><git-log>","How to show complete files that changed in git log","<p>How to I show unabbriviated files that changed in gitlog? Right now the files are cut to only show one or two lines before and after deleted lines of code. I would like to show the whole file of each change.</p>

<p>My current command that I run is <code>git log -w --full-history --date=local -p --format=""%H""</code> How can I run a command that does not abbreviate the changed files?</p>

<pre><code>7d45603c29d0b7e451424cb5b181e6af16485a4f

diff --git a/ui/src/org/pentaho/di/ui/spoon/ExpandedContentManager.java b/ui/src/org/pentaho/di/ui/spoon/ExpandedContentManager.java
index 3c41b27..84db90a 100644
--- a/ui/src/org/pentaho/di/ui/spoon/ExpandedContentManager.java
+++ b/ui/src/org/pentaho/di/ui/spoon/ExpandedContentManager.java
@@ -33,6 +33,7 @@ import org.eclipse.swt.events.KeyListener;
 import org.eclipse.swt.layout.FormAttachment;
 import org.eclipse.swt.layout.FormData;
 import org.eclipse.swt.widgets.Control;
+import org.pentaho.di.core.Const;
 import org.pentaho.di.ui.spoon.trans.TransGraph;

 import java.util.function.Consumer;
@@ -160,6 +161,9 @@ public final class ExpandedContentManager {
     if ( !isVisible( graph ) ) {
       maximizeExpandedContent( browser );
     }
+    if ( Const.isOSX() &amp;&amp; graph.isExecutionResultsPaneVisible() ) {
+      graph.extraViewComposite.setVisible( false );
+    }
     browser.moveAbove( null );
     browser.getParent().layout( true );
     browser.getParent().redraw();
</code></pre>
","0","659634","",""
"42445001","65127","2017-02-24 17:41:25","2","329","<git><git-log>","git log shows (origin) without any branch","<p>I have a git respository aligned to our (local) server; we are working with two branches (master and develop).</p>

<p>Lately, I noticed a strange report on the log:</p>

<pre><code>47f7bf8 (HEAD -&gt; develop, origin/develop) &lt;Commit message&gt;
7c3e64a Merge branch 'develop' 
6a85e24  &lt;Commit message&gt;
794e28d  &lt;Commit message&gt;
6ad4058  &lt;Commit message&gt;
b73932c  &lt;Commit message&gt;
8527c54 (origin)  &lt;Commit message&gt;
ae68dba (tag: 20170213, origin/master, origin/HEAD, master)  &lt;Commit message&gt;
66af625 Merge branch 'develop' 
4bfbc6c Merge branch 'develop' 
</code></pre>

<p>If you notice, the commit <strong>8527c54</strong> is referring to <strong>(origin)</strong> without any detail on the branch it is...</p>

<p>The other branches I'm working on (master and develop) are actually aligned to the server, as I recently did a <code>push</code></p>

<p>Strangely enough, I noticed that cloning (on my local PC) another copy of the same repository is working well, and I have no ""missing"" reference as in this case...</p>

<hr>

<p><strong>Edit</strong>: here is the output of <code>git branch -vv</code>, as asked in the comments:</p>

<pre><code>* develop           47f7bf8 [origin/develop] &lt;Commit message&gt;
  master            ae68dba [origin/master] &lt;Commit message&gt;
  origin            8527c54 &lt;Commit message&gt;
</code></pre>
","3","65127","",""
"60568380","13020019","2020-03-06 16:49:56","0","406","<git><github><git-log><git-show>","How can I extract filepaths and changes from a commit or pull request using git?","<p>I'm trying to get a consolidated list of changes (file paths and new/modified/deleted changes) from a commit/pull request in Github.</p>

<p>This is the format I'm trying to aim for:</p>

<p><code>filepath/to/some/file.properties:thisIsAKey=This is the string for this key.</code></p>

<p>I'm able to grab filepaths relatively easily using:</p>

<p><code>git show --pretty=""format:"" --name-only commitID</code></p>

<p>I also tried this but it includes a lot of noise:</p>

<p><code>git log -p commitID</code></p>

<p>Here's what I have from using the above, but I only need the b/+ changes:</p>

<pre><code>diff --git a/locales/ES/es/forms/dispute-options.properties b/locales/ES/es/forms/dispute-options.properties
index 490457e9e0..569921196a 100644
--- a/locales/ES/es/forms/dispute-options.properties
+++ b/locales/ES/es/forms/dispute-options.properties
@@ -60,4 +60,5 @@ fraudSeller.info=Para cancelar este pedido tendrá que comunicarse directamente
 fraudSeller.errorHeadingMessage = Lo sentimos, pero no puede reportar este tipo de problema para la transacción seleccionada.
 fraudSeller.backButtonText = Atrás

-modal.cancel=Cancel
\ No newline at end of file
+modal.cancel=Cancel
+disputeOptions.creditTransactionInfo=Si presenta un caso para esta compra, aún tendrá que continuar pagando cualquier saldo importe dejado en su plan de {data.pageStore.value.creditProductDescriptor} junto con la comisiones tardía (si corresponde).
</code></pre>

<p>I've been reading the documentation on how to use <code>diff-filter</code>, but haven't seen anything that matches what I need yet.</p>

<p>Edit:
Thanks for everyone's comments! It led me to the answer I was looking for: <code>git diff -U0 --ignore-all-space commitID1 commitID2 | grep '^[+]' | grep -Ev '^(--- a/)' &gt; test.txt</code></p>
","1","13020019","",""
"5889878","231463","2011-05-04 21:07:00","116","50735","<git><git-log>","Color in git-log","<p>When you run <code>git log --decorate --pretty=oneline</code> the output will have entries like <code>(HEAD, refs/published/master, master)</code> with coloration.</p>

<p>I also have the following in my gitconfig:</p>

<pre><code>[color ""branch""]
    current = yellow reverse
    local = yellow
    remote = green
</code></pre>

<p>How do you replicate those colors when doing a custom format like the following?</p>

<pre><code>git log --decorate --stat --graph --pretty=format:""%d %Cgreen%h%Creset (%ar - %Cred%an%Creset), %s%n""
</code></pre>
","0","231463","0","0"
"5891531","336905","2011-05-05 00:55:37","28","17859","<git><version-control><patch><git-log>","How do I get a ""git log"" patch for a specific commit","<p>If I have a commit hash that has not yet been pushed to origin, how can I generate a patch for that commit only.  I would like to use <code>git log -p --no-names</code> but can't see a switch to pass in a specific commit hash. Should I be using a different git command?</p>
","0","336905","0","0"
"42984410","797205","2017-03-23 18:41:04","2","1931","<git><git-log>","git log origin/master..HEAD but include origin/master itself","<p>This is my full git log.</p>

<pre><code>$ git log --oneline --decorate

77cbdda (HEAD -&gt; master) file4
8afab80 file3
9a4cd72 file2
76c2efc (origin/master) file1
</code></pre>

<p>I want to get log from origin/master to HEAD.
When I tried</p>

<pre><code>$ git log --oneline --decorate origin/master..HEAD
</code></pre>

<p>I got log msg like below</p>

<pre><code>77cbdda (HEAD -&gt; master) file4
8afab80 file3
9a4cd72 file2
</code></pre>

<p>But what I want is like below.</p>

<pre><code>77cbdda (HEAD -&gt; master) file4
8afab80 file3
9a4cd72 file2
76c2efc (origin/master) file1
</code></pre>

<p>How can I get log message like that?</p>
","1","797205","0","0"
"24529413","2050788","2014-07-02 10:59:06","3","397","<git><branch><git-branch><git-log>","How to get git to display the most recent n commits from all local branches","<p>I would like to see the most recent n commits (generally 1 or 2) for all local branches in my respository.</p>

<p>I have tried ""git log -1 --all"" and ""git log -1 --branches"" but this doesn't have the effect I expect in git 1.8.4.</p>

<p>Basically I would like the equivalent of </p>

<pre><code>for i in $(ls .git/refs/heads/); do echo ====$i====; git log -1 $i; done
</code></pre>
","7","2050788","0","0"
"24555358","10608","2014-07-03 13:42:45","17","5195","<git><git-log>","git log: only show yesterday's commit","<p><code>git log --since=yesterday --until=today</code> doesn't work because it will <em>include</em> today's commits.</p>

<p><code>git log --since=yesterday --until=yesterday</code> doesn't work because it will not show anything at all.</p>

<p>I'm assuming that ""yesterday"" translates to 12:01am of the previous date, and ""today"" translates to the current hour. That can make sense to some degree, but it is very unhelpful for me right now.</p>

<p>I also want this to be in a script. So I can't hardcode the dates/times. Is the only option really to programmatically calculate yesterday's date and manually pass the hour as well?</p>

<p>EDIT:</p>

<p>I noticed the following. In the source code for the most recent version of git, it appears that ""yesterday"" <a href=""https://github.com/git/git/blob/965798d1f2992a4bdadb81eba195a7d465b6454a/date.c#L923"" rel=""noreferrer"">(see code here)</a> means 24*60*60 seconds before the current time. So depending on how precise you need to be, that could matter. Right above that line in the code you see that ""today"" does mean right now</p>
","0","10608","0","0"
"43890335","3171917","2017-05-10 10:51:15","0","544","<git><git-log><git-am>","How to merge two patches(git log) of different repository","<p>I have a use case where I wanted to merge some sub directories of two repositories in a new repo. </p>

<p>For this, I have created patch for both the repositories for the directories I need using </p>

<pre><code>git log --pretty=email --patch-with-stat --reverse --full-index --binary -- path/to/file_or_folder &gt; patch1
git log --pretty=email --patch-with-stat --reverse --full-index --binary -- path/to/file_or_folder &gt; patch2
</code></pre>

<p>Now, I wanted to merge both the patch in the new repository using git am, when I am doing it the commit history is coming repo by repo (which is expected). Is there a way I can get the commit history sorted by date, irrespective of where the commit came from?</p>
","0","3171917","",""
"62570091","932786","2020-06-25 07:31:09","2","299","<git><git-log>","git log - display only the first x characters of commit's message","<p>I want to display only a limited number of characters (say the first 100 characters) of the commit message in <code>git log</code></p>
<p>Currently, I used <code>git log --oneline</code> but this displays the first line of the message. This can be a very long line if there is no new-line-characters between lines in the message. This makes my git log ugly and not easily readable.</p>
<p>How can I do this?</p>
<p>If this is not possible to display a limited number of characters, can I display the real first line of the message, I mean if there is no break between it and the second line in the message?</p>
","0","932786","",""
"62792665","13387448","2020-07-08 10:24:56","1","100","<git><commit><git-commit><git-log>","How to use git log -L /regex/ with linebreak?","<p>Git documentstion <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-log</a> says that there is a command</p>
<pre><code>git log -L &lt;start&gt;,&lt;end&gt;:&lt;file&gt;
</code></pre>
<p>&quot;start&quot; and &quot;end&quot; can be number, /regex/, +offset or -offset.</p>
<p>I am looking for commits that modify a piece of code matching the regular expression. For this I put the regular expression in &quot;start&quot; and offset=&quot;+1&quot; in &quot;end'.</p>
<p>But I was faced with a problem: I have a regular expression that consists of several lines. Is it possible to insert a line separator in /regex/ used in &quot;git log -L&quot;?</p>
<p>Or, is there some other way to look at the history of commits that modify a piece of code that matches a regular expression consisting of several lines?</p>
","0","13387448","",""
"6924922","228517","2011-08-03 10:17:55","1","3519","<git><ssh><iterator><git-log>","git log over ssh remote repository","<p>I want to create a git (web) browser, hence I need to iterate over commits (<code>git log</code>) on remote repository which is on ssh connected machine.
My repo is quite big and constantly changing, therefore I will be interested in not fetching changes locally only to <code>git log</code> them.</p>

<p>I have tried with:</p>

<pre><code>git remote add origin ssh://example.net/repo
git checkout -b master --track origin/master
</code></pre>

<p>and it failed :\</p>

<p>Any hints how to do that?</p>
","2","228517","0","0"
"25701695","82156","2014-09-06 15:15:11","7","1235","<alias><git-log><git-config>","Enabling git log parameters by default","<p>I like the way that the following command prints out git logs:</p>

<pre><code>git log --oneline --decorate --graph
</code></pre>

<p>I would like to make that the default format whenever I use git log.  Is there a way to edit <code>~/.gitconfig</code> to enable oneline, decorate, and graph by default?</p>

<p>And yes, I'm aware that I can alias those options to another git command alias, but I'd rather that log just print out using those options by default.</p>
","0","82156","0","0"
"25739604","4021962","2014-09-09 08:09:39","0","105","<git><dvcs><git-commit><git-log>","git - finding from what commit branch created","<p>Suppose I had a branch 'develop' and I created a branch 'test_branch' from it. 
Then the both branches moved forward with lots of commits and even merges to each other. </p>

<p>Now, my commit graph turned into mess. So how to track the commit point from where my test_branch was created from develop branch.</p>
","5","4021962","",""
"25749547","1675492","2014-09-09 16:19:49","5","202","<git><git-log><todo>","git – order commits introducing ""TODO""s by date","<p>I want to find commits that <s>introduced</s> added a ""TODO"" or ""FIXME"" comment and order them by date.</p>

<p>I know that <code>git log -G'TODO|FIXME'</code> will show me commits that contain either comment and I could do something like</p>

<pre><code>git log --format='%ci' -G'TODO|FIXME' | cut -d' ' -f 1
</code></pre>

<p>But this will not respect that it should only be commits <em>introducing</em> such comments.</p>

<p>Does anyone know how I can find only commits introducing such comments and order them by date? If the actual SHA-1 was included in that list, that would be even more awesome.</p>
","2","1675492","0","0"
"25766267","4009451","2014-09-10 13:07:10","10","17254","<git><git-log><git-gui>","How to do a 'git log' in the Windows Git Gui?","<p>I just used the Git Gui to clone a local repo from GitHub, and then I checked out a certain branch. I now want to see the equivalent of doing a <code>git log -50</code>, but can't seem to find anything in the menu options or on the main screen:</p>

<p><img src=""https://i.stack.imgur.com/dkofy.png"" alt=""enter image description here""></p>

<p>How can I see the commit history/data for the last, say, 50 changes?</p>
","0","4009451","0","0"
"63223619","7245935","2020-08-03 04:10:26","0","57","<git><git-log><git-blame>","How to find all the ""active"" git commits in a tree?","<p>I'd like to get a snapshot of &quot;active&quot; git commits has for a directory tree, meaning git commits that really are part of the build and not commits that have been fully superseded by newer commits.</p>
<p>I can do this by running <code>git blame</code> on every file and extracting the commits that way, but it's too slow to be practical on a large repo.</p>
","14","7245935","0","0"
"63379693","163454","2020-08-12 15:21:33","0","84","<git><git-log><git-repo>","git log -p without contents of deleted files","<p>I'm assigned to a task to delete unnecessary files from our git repository. This results in deleting many files and editing few others. When I issue <code>git show</code> or <code>git log -p</code> my screen is flooded with the contents of the deleted files and I can hardly find the meaningful parts which are the modifications I made in the other files.</p>
<p>Illustration:</p>
<pre><code>--- a/path/to/a/file
+++ /dev/null
@@ -1,41 +0,0 @@
-Lots of content I don't want to see.
-Lots of content I don't want to see.
-Lots of content I don't want to see.
-Lots of content I don't want to see.
-Lots of content I don't want to see.
-...
</code></pre>
<p>Is there any way to suppress displaying the contents of deleted files?</p>
","3","163454","",""
"4786972","240443","2011-01-24 20:43:41","258","437562","<git><git-log>","Get a list of all git commits, including the 'lost' ones","<p>Let's say that I have a graph like this:</p>

<pre><code>A---B---C---D (master)
     \
      \-E---F (HEAD)
</code></pre>

<p>If I do <code>git log --all --oneline</code>, I will get all six of my commits.</p>

<p>But if the graph is</p>

<pre><code>A---B---C---D (master, HEAD)
     \
      \-E---F
</code></pre>

<p>I will not see E and F. Can I get git to tell me all the commits, including those on branches which are not named?</p>

<p>Thanks</p>
","0","240443","0","0"
"42340316","1197249","2017-02-20 09:06:32","1","1366","<git><git-branch><git-log><git-revert>","git revert remove commit","<p>I am interested in reverting a <em>pushed</em> commit but also removing it from the graph.<br>
E.g. I have:  </p>

<pre><code>                   tag
A &lt;— B &lt;— C &lt;— D &lt;— E  &lt;— F  
                          HEAD  
</code></pre>

<p>I would like to remove <code>F</code> completely so my graph looks like:  </p>

<pre><code>                   tag
A &lt;— B &lt;— C &lt;— D &lt;— E  
                   HEAD  
</code></pre>

<p>How can I do this?</p>
","2","1197249","0","0"
"23163002","880367","2014-04-18 21:55:15","1","301","<git><glob><git-log>","git log for commits matching branch or tag glob","<p>I want to get a log of all commits matching a branch glob in git.</p>

<p>Consider the following history (lower case letters are commits, upper case commits are BRANCHES pointing there)</p>

<pre><code> /-b --XX, tag2
a--c --XY, tag1
 \-d --ZZ, HEAD
</code></pre>

<p>I want all commits that match the branch glob <code>abc*</code> (in this example none, but there may be some), merged with those that match the tag glob <code>tag*</code> (in this example tag1 and tag2). I would expect</p>

<pre><code>git log --branches=""abc*"" --tags=""tag*""
</code></pre>

<p>to return a, b and c, but instead it returns a and d.</p>
","6","880367","0","0"
"23403900","2204621","2014-05-01 07:39:45","1","80","<git><git-log><git-checkout>","git commit nolonger showing up in log","<p>Yesterday I git-commited, then checked out multiple old commits and also used <code>stash</code> on some of them. </p>

<p>Now yesterday's commit is no longer showing up in <code>git log</code>. </p>

<p>I dont know the tree-ish but i know the exact comment i used. </p>

<p>I tried checking out the most-recent before yesterday's commit but it still does not show up in the log-tree.</p>

<p>Is there some way to checkout or search by the comment i gave it? (Also is there a reason why it nolonger shows up in <code>git log</code>?)</p>
","2","2204621","",""
"68944289","10868981","2021-08-26 19:22:45","-1","656","<git><git-commit><git-log>","git log --oneline command not displaying recent commit","<p>Interesting issue I ran into at work the other day. So I'm a new data engineer learning the ropes. I made a git commit of two files to my remote branch and made a PR, waiting to be reviewed for merging.</p>
<p>However, my manager told me to suppress one of the files as there were barely any changes. The novice in me made a big no no, and from this window deleted the file. (<em>For examples sake, news/reddit.py is the sample file</em> <a href=""https://i.stack.imgur.com/LH1r5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LH1r5.png"" alt=""enter image description here"" /></a></p>
<p>Now, this obviously makes a new commit. I would like to revert these changes using <code>git revert &lt;commithash&gt; --no-edit</code>. The issue I'm having is when I run <code>git log --oneline</code> in the terminal, there is no hash for the commit created upon file deletion.</p>
<p>Now when I grab the hash from github here:</p>
<p><a href=""https://i.stack.imgur.com/bnz1h.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bnz1h.png"" alt="""" /></a></p>
<p>and run <code>git revert 738bd6a --no-edit</code></p>
<p>I receive this error: <code>fatal: bad revision '738bd6a'</code></p>
<p>Also running the revert command with the full hash I receive this: <code>fatal: bad object 738bd6a3bccab7d96e9e7f93871285eea72943cf</code></p>
<p>I know I can just close the PR and recommit the files, but wanted to see if anyone had any ideas why the hash's won't work and why I can't find the hash running <code>git log --oneline</code></p>
<p>Thanks!</p>
","0","10868981","",""
"17857723","427653","2013-07-25 12:13:48","227","110022","<git><git-log><git-reflog>","What's the difference between git reflog and log?","<p>The man page says that log shows the commit logs and reflog manages reflog information. What exactly is reflog information and what does it have that the log doesn't? The log seems far more detailed.</p>
","0","427653","0","0"
"34403707","4163859","2015-12-21 20:20:23","2","387","<git><repository><git-log>","git whatchanged - what does -M do?","<p>I am looking at some code that uses the -M (capital M, not lowercase, which is documented as include merges) flag passed to Git whatchanged.  </p>

<p>I can't see a definition for the flag in the man page (for 1.8.3.1).  Can anyone advise what it does?  Is it the opposite of -m (lowercase)?</p>
","0","4163859","0","0"
"50832895","1393609","2018-06-13 08:49:07","2","3053","<git><git-merge><git-log>","How to get git logs of only current branch and just a merged commit","<p>I am using this git command for getting logs (from particular commit) in reverse order and commit details : </p>

<pre><code>git log eab3e0ffdsfs.. --reverse -M --numstat --summary --pretty=format:commitId:%H%ndate:%cd%nsubject:%s%nauthor:%an%n
</code></pre>

<p>Which gives me all commits after the specified commit including commits from another branches which were later merged into the current branch . </p>

<p>However I am just interested in current branch commits and merged commits log.</p>

<p>I tried following options :</p>

<pre><code>git log --first-parent 8e146445d19b.. --reverse -M --numstat --summary --pretty=format:commitId:%H%ndate:%cd%nsubject:%s%nauthor:%an%n
</code></pre>

<p>gives commits of current branch but I don't receive files that have been modified in that merged commit.I just get author name , subject and date of the merged commit.</p>

<p>However , If you go to github and check history for your branch , you get current branch commits and just a merged commit including files modified in that.</p>

<p>Can we achieve this with git command?</p>

<p>Thanks</p>
","0","1393609","",""
"34462011","2075423","2015-12-25 10:26:11","2","151","<git><git-log>","git log --tags changes the commits order","<p>By default, <code>git log</code> the commits are shown in reverse chronological order.</p>

<pre><code>commit 519f71eb2e4e1fa5da429bb01f95d2b6517c4c34
Author: Steve Mao &lt;maochenyan@gmail.com&gt;
Date:   Fri Dec 25 21:07:05 2015 +1100

    Fourth commit

commit d52ef03bbdb825499ed317172eacb29d6666cb13
Author: Steve Mao &lt;maochenyan@gmail.com&gt;
Date:   Fri Dec 25 21:07:04 2015 +1100

    Third commit

commit 4992115ed36e0a2135f1ea5bfc6bd6d4aa6ba97a
Author: Steve Mao &lt;maochenyan@gmail.com&gt;
Date:   Fri Dec 25 21:07:03 2015 +1100

    Second commit

commit 9fc40f59a209c17cb8554afd4476c14126f22ad8
Author: Steve Mao &lt;maochenyan@gmail.com&gt;
Date:   Fri Dec 25 21:07:03 2015 +1100

    First commit
</code></pre>

<p>But if I run <code>git log --tags</code> the commits order is different</p>

<pre><code>commit 519f71eb2e4e1fa5da429bb01f95d2b6517c4c34
Author: Steve Mao &lt;maochenyan@gmail.com&gt;
Date:   Fri Dec 25 21:07:05 2015 +1100

    Fourth commit

commit d52ef03bbdb825499ed317172eacb29d6666cb13
Author: Steve Mao &lt;maochenyan@gmail.com&gt;
Date:   Fri Dec 25 21:07:04 2015 +1100

    Third commit

commit 9fc40f59a209c17cb8554afd4476c14126f22ad8
Author: Steve Mao &lt;maochenyan@gmail.com&gt;
Date:   Fri Dec 25 21:07:03 2015 +1100

    First commit

commit 4992115ed36e0a2135f1ea5bfc6bd6d4aa6ba97a
Author: Steve Mao &lt;maochenyan@gmail.com&gt;
Date:   Fri Dec 25 21:07:03 2015 +1100

    Second commit
</code></pre>

<p>According to <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow"">https://git-scm.com/docs/git-log</a></p>

<blockquote>
  <p>--tags[=&lt;pattern&gt;]<br>
  Pretend as if all the refs in refs/tags are listed on the command line as &lt;commit&gt;. If &lt;pattern&gt; is given, limit tags to ones matching given shell glob. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p>
</blockquote>

<p>It doesn't mention the order. Why is that?</p>
","0","2075423","0","0"
"19030192","1860929","2013-09-26 13:51:52","8","2859","<git><git-log><git-checkout>","Get snapshot of a git repo on a particular date","<p>Say I have a repo with multiple banches.</p>

<p>Is it possible to get the repo snapshot of some particular date/time using usual git foo?
(We currently have code dumps every day, and I am thinking of ways to remove that)</p>

<p>(Assuming no branches are permanently deleted, and the git commit history hasn't been played with)</p>

<p>Edit: Interim branch merges are possible.</p>
","0","1860929","0","0"
"69444637","207791","2021-10-05 03:37:00","1","75","<git><git-log>","In git log --name-status, what does the T type (""file changed"") mean?","<p><code>man git-log</code> in <code>--name-status</code> paragraph refers to <code>--diff-filter</code>, which, in turn, says that <code>T</code> is &quot;Changed&quot;, and <code>M</code> is &quot;Modified&quot;.</p>
<p><code>man git-diff</code> says</p>
<blockquote>
<p>T: change in the type of the file.</p>
</blockquote>
<p>I created a test repo.</p>
<ul>
<li>Changing file executable bit results in <code>M</code>.</li>
<li>Deleting a file and creating a directory with the same name results in <code>D</code> and <code>A</code>.</li>
<li>Replacing a text file with a binary file results in <code>M</code> again (I know that git evaluates file types on the fly, but it was worth trying).</li>
</ul>
<p>So what does <code>T</code> &quot;Changed&quot; mean there?</p>
","0","207791","",""
"19178869","1542339","2013-10-04 10:20:54","1","4203","<git><git-commit><git-log>","how to merge two git commits into one?","<p>i have made two commits while in fact one commit is enough, the reason that i make two commits is because i forget to add one file after i make the first commit, so i add it and make another commit, after that i found that i find i have made two commit with the same comment, so how to merge these two commits into one?</p>

<pre><code>* 3e381e7 - (HEAD, master) now i have add load script which can open many pages automatically at one time (4 seconds ago) 
* 2d97025 - now i have add load script which can open many pages automatically at one time (21 seconds ago) 
</code></pre>

<p>how to merge commits 3e381e7 and 2d97025 so that there is only one commit log?</p>
","1","1542339","",""
"35531707","2339781","2016-02-21 02:45:37","3","1741","<git><date><git-log>","git log not listing commits since a certain date","<p>I just migrated a massive amount of source history from MKS to a git repository using git fast-import. The problem is that when I use ""git log"" to see all commits in the repository in the last 10 days there are certain commits that are not being listed, but should. This is what I'm doing to reproduce this issue:</p>

<p>When I type this command to list 3 commits by author ""renato"":</p>

<pre><code>git log --pretty=format:""%h %an %ad"" --author renato -3
</code></pre>

<p>I get the following output:</p>

<pre><code>8cd40f6 renatoo Mon Feb 15 10:35:28 2016 -0600
a2694d2 renatoo Fri Feb 5 13:30:14 2016 -0600
57ee8d3 renatoo Thu Jan 14 15:08:33 2016 -0600
</code></pre>

<p>Notice the date of the first one is Feb 15, 2016 which is 5 days ago.</p>

<p>But if I issue the following command to list all of his commits in the last 10 days it displays nothing: </p>

<pre><code>git log --pretty=format:""%h %an %ad"" --author renato --since=10.days
</code></pre>

<p>I've actually played around with this a bit and I found that the value I can issue for ""--since"" that will work to finally show his commits is 24 years!:</p>

<pre><code>&gt;git log --pretty=format:""%h %an %ad"" --author renato --since=24.years
8cd40f6 renatoo Mon Feb 15 10:35:28 2016 -0600
a2694d2 renatoo Fri Feb 5 13:30:14 2016 -0600
57ee8d3 renatoo Thu Jan 14 15:08:33 2016 -0600
aa0d926 renatoo Thu Jan 14 15:08:08 2016 -0600
13fdca1 renatoo Thu Jan 14 15:08:22 2016 -0600
32c5af7 renatoo Wed Jan 20 08:59:56 2016 -0600
68231db renatoo Thu Jan 14 15:18:55 2016 -0600
2c25c72 renatoo Thu Jan 14 15:17:28 2016 -0600
1d7ddd3 renatoo Thu Jan 14 15:18:08 2016 -0600
9677ed9 renatoo Thu Jan 14 15:16:51 2016 -0600
1da4267 renatoo Thu Jan 14 15:14:39 2016 -0600
c64b3e1 renatoo Thu Jan 14 15:14:03 2016 -0600
ea9fe12 renatoo Thu Jan 14 15:10:10 2016 -0600
708b712 renatoo Thu Jan 14 15:12:27 2016 -0600
b24a2cf renatoo Thu Jan 14 15:13:12 2016 -0600
15c5abe renatoo Fri Jan 29 15:32:53 2016 -0600
a698bbe renatoo Mon Feb 15 10:36:51 2016 -0600
861b322 renatoo Fri Feb 5 13:29:37 2016 -0600
3da4bcf renatoo Fri Jan 29 15:32:17 2016 -0600
3a1db85 renatoo Fri Jan 29 15:32:14 2016 -0600
d60841f renatoo Mon Feb 15 10:36:17 2016 -0600
132d762 renatoo Fri Feb 5 13:28:49 2016 -0600
764d6e0 renatoo Mon Feb 15 10:36:23 2016 -0600
9d35f44 renatoo Fri Feb 5 13:29:10 2016 -0600
f808b8b renatoo Mon Feb 15 10:36:09 2016 -0600
2b04034 renatoo Fri Feb 5 13:28:37 2016 -0600
682a776 renatoo Mon Jan 25 11:46:30 2016 -0600
1276d4b renatoo Fri Jan 22 10:42:39 2016 -0600
ad77333 renatoo Mon Jan 25 11:47:09 2016 -0600
2df0aec renatoo Fri Jan 22 10:42:25 2016 -0600
&gt;
</code></pre>

<p>But 23 years doesn't work:</p>

<pre><code>&gt;git log --pretty=format:""%h %an %ad"" --author renato --since=23.years
&gt;
</code></pre>

<p>I've tried a lot of different things, including looking at the committer date and the author date (they all match for these commits, in this case), as well as trying options --all, --branches, and --reflogs.</p>

<p>Is there a different and more reliable way to get all commits within a given timespan (I'm personally interested in commits made in the last 3 days)?
Could there be some corruption of the repo?</p>

<p>Edit: Fixed last example command line.</p>
","3","2339781","0","0"
"69736301","2191695","2021-10-27 09:44:01","1","267","<git><git-log><git-notes>","How do we exclude `Notes added by 'git notes add'` from `git log`?","<p>How do we exclude <code>Notes added by 'git notes add'</code> from <code>git log</code>?</p>
<p>When we run <code>git log --all</code>, there are millions of lines with <code>Notes added by 'git notes add'</code>. We need --all to see everything else. We just don't want the commits that add the notes. However, we do want to see the actual notes itself that was attached to commits.</p>
<p>There's probably a duplicate question somewhere out there but I've search for over 8 hours and still can't find one.</p>
<p>For example: <code>git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset) %C(red)%N %C(reset)' --all</code> displays the following (where <code>Tested</code> is the notes):</p>
<ul>
<li>1b15b8e - (3 hours ago) Notes added by 'git notes add' - maker2</li>
<li>06b1158 - (2 hours ago) Fixed bug #37 - maker2 <code>Tested</code></li>
</ul>
<p>We actually want:</p>
<ul>
<li>06b1158 - (2 hours ago) Fixed bug #37 - maker2 <code>Tested</code></li>
</ul>
<p>We don't want:</p>
<ul>
<li>1b15b8e - (3 hours ago) Notes added by 'git notes add' - maker2</li>
</ul>
<p>Using --no-notes actually produces the following, which is NOT the output we want:</p>
<ul>
<li>1b15b8e - (3 hours ago) Notes added by 'git notes add' - maker2 %N</li>
<li>06b1158 - (2 hours ago) Fixed bug #37 - maker2 %N</li>
</ul>
<p>Git version is 1.7.1</p>
<p>The current work around we have is to use <code> | grep -v 'Notes added by' | less -r</code> but the output now gets colored strangely with the graph lines are displayed in rainbow colors for some reason.</p>
","3","2191695","",""
"23494208","487598","2014-05-06 12:03:35","3","139","<git><git-branch><git-log>","How to git-log all branches that contain a specific commit","<p><code>git log</code> accepts multiple branch names as parameters, and using <code>--graph</code> you get a nice tree-view of it. With <code>--all</code> I see the complete tree, with <code>--branches</code> I can even filter branch names.</p>

<p>I want to show the complete history of all (sub)branches of a specific branch. To that end, I want to know <strong>how can I <code>git log</code> all branches that contain some commit?</strong></p>

<p><em>With <code>git branch --contains</code>, I can find all branches that contain a specific commit. So with some bash-wizardry, I could probably make up a command that does what I want. But I'm guessing that git should have a more direct way to get such a log.</em></p>
","1","487598","0","0"
"60945548","13080654","2020-03-31 07:39:44","0","283","<git><github><git-commit><git-log>","How to add metadata info to a git commit","<p>I am working on some git tooling that helps prevent git conflicts. Git commit authors are usually identified by their email address, but many people have multiple email addresses. Instead I would like to use a uuid to identify each committer, and my goal is to somehow include that uuid in the git commit metadata somehow. Is there some way to configure git to include that uuid or is not really possible?</p>

<p>I would assume the only place the uuid could go is the git commit message and that would make them quite noisy?</p>
","3","13080654","",""
"5602204","101911","2011-04-09 01:05:40","36","19603","<git><git-log>","How to invert `git log --grep=<pattern>` or How to show git logs that don't match a pattern","<p>I want to use <code>git log</code> to show all commits that do not match a given pattern. I know I can use the following to show all commits that do match a pattern:</p>

<pre><code>git log --grep=&lt;pattern&gt;
</code></pre>

<p>How do I invert the sense of matching?</p>

<p>I am trying to ignore commits that have ""bumped to version ..."" in the message.</p>

<p>EDIT: I want my final output to be pretty verbose. e.g. <code>git log --pretty --stat</code>. So output from <code>git log --format=oneline</code> won't work for me.</p>
","3","101911","0","0"
"61037792","246724","2020-04-05 03:48:17","0","287","<git><git-log>","Force git log to show all commits, including cherry-picked","<p><em>While writing, I just found the answer to this question, but will still post it to share with others.</em></p>

<h2>Test scenario</h2>

<p>I created a small testing repository with a merge of two branches, where one branch contains cherry-picked versions of commits already present in the other branch.</p>

<p>(I used <code>rebase -ir</code> to artificially craft this test history)</p>

<p>A regular git log shows the complete history:</p>

<pre><code>&gt; git log --graph --decorate --pretty=oneline --abbrev-commit --abbrev=8
*   b1008ab1 (HEAD -&gt; master) Merge 'alternative' into master.
|\  
| * 22a3a296 Add x.txt
| * 0af2f788 Add y.txt
* | 3856adbf Add y.txt
* | 8543e6d8 Add x.txt
|/  
* e7696150 Initial commit.
</code></pre>

<p>(I am using <code>git lol</code> alias for this, but for this question I am spelling out all the options)</p>

<p>However, a git log filtered to one of the files only shows the one of the respective commits that is in the main part of the branch (first merge parent):</p>

<pre><code>&gt; git log --graph --decorate --pretty=oneline --abbrev-commit --abbrev=8 x.txt
* 8543e6d8 Add x.txt
</code></pre>

<h2>Question</h2>

<p>How can I force git log to show all the commits that modify the respective file, including duplicates / cherry-picked commits?</p>

<h2>What I tried so far</h2>

<p>I checked in <code>git help log</code> and found <code>--cherry-mark</code>, <code>--cherry-pick</code>, <code>--left-only</code>, <code>--right-only</code>, but none of these really make a difference.</p>
","0","246724","",""
"61038114","246724","2020-04-05 04:33:50","-1","164","<git><git-log>","git log range exclude ancestors of multiple base refs","<p>I often use <code>git log &lt;options&gt; BASE..TARGET</code> to show a range of commits.</p>

<p>What this does, based on my previous experience and understanding:</p>

<ul>
<li>Include TARGET and all its ancestors.</li>
<li>Exclude BASE and all its ancestors, even if they are ancestors of TARGET.</li>
</ul>

<p>Sometimes I would like to achieve the following instead:</p>

<ul>
<li>Include TARGET and all its ancestors.</li>
<li>Exclude BASE_0 and all its ancestors, even if they are ancestors of TARGET.</li>
<li>Exclude BASE_1 and all its ancestors, even if they are ancestors of TARGET.</li>
<li>Exclude BASE_2 and all its ancestors, even if they are ancestors of TARGET.</li>
<li>...</li>
</ul>

<p>A typical use case would be to find commits that are in (= ancestors of) a given feature branch, but are neither in (= ancestors of) master nor a specific other feature branch.</p>

<p>Obviously, the range A..B syntax won't cut it here. Instead, there would need to be a parameter like <code>--exclude-ancestors-of=A_0,A_1,A_2</code>, with a syntax that allows multiple refs.</p>

<p>Is this possible somehow?</p>
","1","246724","",""
"61936264","2443944","2020-05-21 14:00:39","3","4664","<git><git-branch><git-log>","Understanding the git graph","<p>I used the <code>git log --graph --all</code> command to visualise my commit/branch history. However whilst I understand what most of what the graph shows there are some parts of the branch visualisation I am having difficulty interpreting.</p>

<p>The branches that I am having difficulty interpreting are:</p>

<p>a) Commit <code>309a287</code> </p>

<p>b) Commit <code>3f7475</code></p>

<p>c) The interpretation of <code>)</code> in e9415f</p>

<p>I am also slightly puzzled by why there seems to be three branches (three vertical parallel lines) as I only ever had a master branch and one additional branch at the same time.</p>

<pre><code>|
| * commit 88531a7dc85d030016296a51c5c433b72c7186c5 (refs/stash)
|/| Merge: c501f9f 631678b
| | Author: 
| | Date:   Wed May 20 17:01:59 2020 +0100
| |
| |     On blackforest: ddd
| |
| * commit 631678b558576418c21496712db524eb86a755ec
|/  Author: 
|   Date:   Wed May 20 17:01:59 2020 +0100
|
|       index on blackforest: c501f9f induced typo
|
* commit c501f9fc6b817541d8cb6a466c77b8d84231afcb (origin/blackforest)
| Author: 
| Date:   Sun May 17 18:53:59 2020 +0100
|
|     induced typo
|
| *   commit e9415f49f953ca4fe53bd9631e4afea94c3ba4ba (HEAD -&gt; master, origin/master
)
| |\  Merge: 9a1ff1f 3f74752
| | | Author: 
| | | Date:   Sun May 17 18:51:40 2020 +0100
| | |
| | |     Merge branch 'master' of
| | |
| | *   commit 3f7475269c1134aef39a06f13ae11d74c9496542
| | |\  Merge: 309a287 3d41b51
| |_|/  Author:
|/| |   Date:   Sun May 17 18:46:19 2020 +0100
| | |
| | |       Merge pull request #1 from 
| | |
| | |       enhanced emoticon
| | |
* | | commit 3d41b51c8157abe38d251e065ad33b3d265d332c
| | | Author: 
| | | Date:   Sun May 17 18:42:00 2020 +0100
| | |
| | |     enhanced emoticon
| | |
| * | commit 9a1ff1fa645e8390ab26f751dbf1b716e15b0df6
| |/  Author: 
| |   Date:   Sun May 17 18:50:09 2020 +0100
| |
| |       capitalised a
| |
| *   commit 309a287f9c39d219d719efbcc872a176f7644b19
| |\  Merge: dafe938 806e855
| |/  Author: 
|/|   Date:   Sun May 17 17:42:46 2020 +0100
| |
| |       Merge branch 'blackforest'
| |
* | commit 806e8558cd7b24658a998b2ee5d19500e608b77d
| | Author: 
| | Date:   Sun May 17 17:06:10 2020 +0100
| |
| |     new common
| |
* | commit a5e386a55389a6435a050be9981ea97011449783
| | Author: 
| | Date:   Sun May 17 17:32:26 2020 +0100
| |
| |     Edited firstfile to reflect new branch name
| |
| * commit dafe938bcfbdfe6eaf62d5f446637e6f5d594015
|/  Author: 
|   Date:   Sun May 17 17:06:10 2020 +0100
|
</code></pre>
","2","2443944","0","0"
"60694439","1593077","2020-03-15 15:23:21","1","236","<git><clearcase><git-log>","What's the ClearCase equivalent of git log on a file?","<p>With <code>git log my_file</code>, I can see a list of commits (or rather a forest of branches and commits on them) involving <code>my_file</code>, inclduing dates and commit comments. How do I do this with ClearCase?</p>
","3","1593077","0","0"
"42721263","1048369","2017-03-10 14:52:56","3","1200","<git><git-log>","Get git log range of remote branch","<p>Getting the logs within a specified tag range works as expected:</p>

<pre><code>git log v1..v2 --oneline
</code></pre>

<p>However, I want the tag range logs of <code>origin/master</code>. When I provide the tag range and remote/branch arguments I do not get as expected.</p>

<pre><code>git log origin/master v1..v2 --oneline
</code></pre>

<p>The output is the same as if <code>v2</code> is not supplied at all. Indeed, when <code>v2</code> is removed, the output is from <code>v1</code> to <code>HEAD</code> of <code>origin/master</code>.</p>

<p>How can I make this command respect the tag range argument?</p>

<p>Git version 2.9.0</p>
","1","1048369","0","0"
"23645415","528726","2014-05-14 04:02:46","3","708","<git><logging><git-log><ifs>","How to view git log using column unit separators?","<p>How can I get <code>git log --graph</code> to print using column unit separators? </p>

<p>I would like the messages to line up vertically, rather than being indented by the graph.</p>

<p>Example command to print the branch graph, author name, and message:</p>

<pre><code>git log --graph --pretty=format:'%an %s' 
</code></pre>

<p>The output is indented like this:</p>

<pre><code> *  Ann  Merge ...
 |\  
 | *  Bob  Merge ..
 | |\  
 | | |  Catherine  Build feature
</code></pre>

<p>My goal is a column layout like this: </p>

<pre><code> *      Ann        Merge ...
 |\  
 | *    Bob        Merge ..
 | |\  
 | | |  Catherine  Build feature
</code></pre>

<p>If possible I would like to use column unit separators, such as the ASCII character <code>\031</code> also known as <code>\x1F</code>.</p>

<p>I'm adding a bounty for any solution that is pure git, i.e. that does <em>not</em> require piping to Unix commands such as column, sed, awk, pr, etc.</p>
","1","528726","0","0"
"42931385","729513","2017-03-21 15:26:38","1","812","<git><git-log>","How to override a git log pretty format?","<p>The available built-in pretty formats don't exactly fit my need (or my taste):</p>

<p><a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">https://git-scm.com/docs/pretty-formats</a></p>

<p><code>git log --decorate --graph --all --pretty=short</code> is almost what I want, but I'd like the commit date to be shown as well...</p>

<p><code>git log --decorate --graph --all --pretty=medium</code> is nice, but I don't want to the full commit message. I'd like only the first line of the commit message to be shown...</p>

<hr>

<p>So I tried to define my own pretty format, just like 'medium' but without the full commit message, like so:</p>

<pre><code>git log --decorate --graph --all --pretty=format:'commit %H%nAuthor: %an%nDate: %ad%n%n%s%n'
</code></pre>

<p>One problem is the branch names are not shown anymore. Another problem is the logs are not in color anymore. How can I do that correctly?</p>

<p>Ideally, I'd just like to <em>override</em> <code>--pretty=medium</code> so that it will not show the full commit message, but only the title of the commit (or to <em>override</em> <code>--pretty=short</code> for it to show the date). Is this only possible (to <em>override</em> a built-in pretty format)? If yes, how?</p>
","0","729513","",""
"24492519","3368298","2014-06-30 14:31:01","1","188","<git><sublimetext><fatal-error><revision><git-log>","fatal: bad revision 'your git UserName'","<p>when i use sublime text edit a file  and i  wanna to see this file's git log  ,so i use its git </p>

<p>plugin(i had been installed), operate like this: Tools=>Git=>This file=>log,</p>

<p>but i see this error:</p>

<pre><code>fatal: bad revision 'Xujiajun(it is my git username)'
</code></pre>

<p>so i use google to search question to the answer, almost people meet like this ""</p>

<blockquote>
  <p>git - fatal: bad default revision 'HEAD'</p>
</blockquote>

<p>""  ,but it is not what i need.</p>

<p>who can help me ?</p>

<p>thanks a lot:)</p>
","2","3368298","0","0"
"24492647","1197249","2014-06-30 14:36:29","0","45","<git><version-control><git-log><git-reset>","Why can I git show a commit I just did a git reset?","<p>I did a <code>git commit</code> but I included files I should not have.<br>
Let's say commit 321232323232<br>
That was the top commit. I did <code>git reset --soft HEAD~1</code> 
and I can see my files as they were before I did the wrong commit
and when I do a <code>git log</code> I don't see the bad commit but when I do
<code>git show bad_commit</code> I can still see the changes!<br>
Why is that?</p>
","0","1197249","",""
"24705429","1516425","2014-07-11 19:48:14","2","395","<git><git-log>","Condense git log --graph output?","<p>Is there a way to condense the output of <code>git log --graph</code> so it'll visually squash commits that follow a linear history? Basically, I just want to see the points in the graph where some branches diverge/merge to get an top-level 'overview' of what my branch structure looks like. As an example, if I had this:</p>

<pre><code>A
|
Z
|
H
|
B    G
|   /
C  F
| /
D
|
E
</code></pre>

<p>I'd want it to show something like:</p>

<pre><code>A    G
|   /
.. ..
| /
D
|
E
</code></pre>
","1","1516425","0","0"
"24735688","3521479","2014-07-14 11:37:48","-1","295","<git><merge><format><git-log>","git log --format=format Difference between common commit and merge commit","<p>How to distinguish common commit and merge commit in:</p>

<pre><code>git log --format=format:""something""
</code></pre>

<p>It can distinguish recursive merge from any other because recursive has two parents, and I can use %p option and parse it, but what if I have common commit and fast forwarding merge commit?</p>

<p>Is it possible?</p>
","2","3521479","",""
"43395504","5369466","2017-04-13 14:52:41","13","3287","<git><git-merge><git-log><git-revert>","git revert a merge: determine which parent is which (-m 1 vs -m 2)","<p>I am trying to revert a merge, but I don't know whether to use <code>git revert -m 1 &lt;merge commit's sha&gt;</code> or <code>git revert -m 2 &lt;merge commit's sha&gt;</code>. How do I find out which parent is <code>-m 1</code> and which parent is <code>-m 2</code>?</p>
","0","5369466","0","0"
"6683067","576872","2011-07-13 17:30:37","3","3789","<python><regex><git><git-log>","Parse git - log file with python","<p>So i need to parse thing like this :</p>

<pre><code>commit e397a6e988c05d6fd87ae904303ec0e17f4d79a2
Author: Name &lt;email@email.com&gt;
Date:   Sat Jul 9 21:29:10 2011 +0400

    commit message

 1 files changed, 21 insertions(+), 11 deletions(-)
</code></pre>

<p>and get Author name and number of insertions and deletions.</p>

<p>For the name i have this:</p>

<pre><code>re.findall(r""Author: (.+) &lt;"",gitLog)
</code></pre>

<p>For the numbers i have this:</p>

<pre><code>re.findall(r"" (\d+) insertions\S+, (\d+) deletions"",gitLog)
</code></pre>

<p>But i want to get a list of tuples of name,insertions and delitions with one regular-expression.</p>

<p>I tryed to do somthing like</p>

<pre><code>re.findall(r""Author: (.+) &lt;.+ (\d+) insertions\S+, (\d+) deletions"",gitLog,re.DOTALL)
</code></pre>

<p>but it returns nothing...</p>

<p>So what is my mistake? How regular-expression should look like?</p>

<p>UPADTE:
wRAR is right, but somehow when i read i file and try to parse it i get the whole file as a name , and then last insertion and deletion, so it matches the whole file but not a single commit... [.+] gets the whole file but not a part of a commit...</p>
","0","576872","",""
"24851919","133470","2014-07-20 15:21:13","0","228","<git><git-log><git-tag>","Adding tags retrospectively and git log","<p>I'd like to be able to query git and output a list of changes between tagged releases to create simple release notes.</p>

<p>I've retrospectively added tags to commits in my git repo and pushed these to origin as well. But now when I try and list the commits between tags, the result are not right. </p>

<p>Here's my log:</p>

<pre><code>$ git log --pretty=oneline --decorate
8f326b8ac5dc4ae5d1e9097d91ef460a39e9bda2 (HEAD, tag: 1.1.65, origin/master, origin/HEAD, master) following fixes done
aef34c6dec4890384ca5fd318988d14a5b7af327 chat Input Field to have padding from the left....
adbad9b9aa74bb9664521780adb50272181eca23 changed setting name from LogEntries to Live Log
58476d5f72abe603c2b0ec3bf54a40a82fbafb90 Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
77f3d951a3ad7099667b98dd1622279da5fc8c3d prevent legacy setting lock in, remove 2 observers when view is unloaded, possible better test in 
ed48862949890604b044e4cf20bc6bcff4a8674a Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
07bf561ef4eb55fddd732d796a0014aa8d992df8 (tag: 1.1.64) Fixed Issues:
e3119c296b4b2df91eec035cbd05f256f86a2150 Put username (friendly name) UNDER Avatar in scrolling area, rather than next to it
25cb2fcf57915b417d9f8404f1eca9c44704245d Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
5bd194a9ade3cfc172e218c43b398ebe9bce7126 version v1.1.62
2910fd959e7273943461986328b60b4b40b5e08c (tag: 1.1.63) following issues are completed
4893a19ad4cc2c9e4a4a89ec561a194506349974 Merge branch 'master' of https://github.com/fezzee/FezzeeIOS
43dda4ed132e6f748e02f6a2ad3ff1b1d4870566 Following Issues Fixed:-
ac8e14dc810c85ddab09e25a3efdc3c7b1cc8ff5 fixed merge conflict
090c3f3d99df70df25e5d54d96192b58e805a619 (tag: 1.1.62) Pull letest
0d2b5bc1e247ea4f9eef247fb6e24d4bf1e48948 Inform user about phone number on which activation code has been sent
8d1e4688149accc8d183bb74c6a21f61f37f3497 Artist image is not updated in app, when changes to the image have been made in JSON and downloade
61b90f31254a3bdcc7508b6bcfe73d02d181f3eb some Ui changes On boarding And pull latest update
c90c963592cd3fe9f86333df991083d7ab444ebb (tag: 1.1.60/61) Merge branch 'master' of https://github.com/fezzee/FezzeeIOS
f63df18631f9020f8775ed9259d99e84fb46cccb add booked acts on an  ""undefined stage""  but have them displayed in the artists list
418ff451d236ba5abf5fb904cfed9a601e4489ef Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
a8d025d86819c152c577340eb2d4ee8924890ccc v1.1.59
:
</code></pre>

<p>If I then get the commits between (and including) the tags , the results don't match:</p>

<pre><code>$ git log --pretty=oneline --decorate  1.1.64^..1.1.65
8f326b8ac5dc4ae5d1e9097d91ef460a39e9bda2 (HEAD, tag: 1.1.65, origin/master, origin/HEAD, master) following fixes done
aef34c6dec4890384ca5fd318988d14a5b7af327 chat Input Field to have padding from the left....
adbad9b9aa74bb9664521780adb50272181eca23 changed setting name from LogEntries to Live Log
58476d5f72abe603c2b0ec3bf54a40a82fbafb90 Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
77f3d951a3ad7099667b98dd1622279da5fc8c3d prevent legacy setting lock in, remove 2 observers when view is unloaded, possible better test in 
ed48862949890604b044e4cf20bc6bcff4a8674a Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
07bf561ef4eb55fddd732d796a0014aa8d992df8 (tag: 1.1.64) Fixed Issues:
25cb2fcf57915b417d9f8404f1eca9c44704245d Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
5bd194a9ade3cfc172e218c43b398ebe9bce7126 v1.1.62
ac8e14dc810c85ddab09e25a3efdc3c7b1cc8ff5 fixed merge conflict
418ff451d236ba5abf5fb904cfed9a601e4489ef Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
a8d025d86819c152c577340eb2d4ee8924890ccc v1.1.59
</code></pre>

<p>I was expecting:</p>

<pre><code>8f326b8ac5dc4ae5d1e9097d91ef460a39e9bda2 (HEAD, tag: 1.1.65, origin/master, origin/HEAD, master) following fixes done
aef34c6dec4890384ca5fd318988d14a5b7af327 chat Input Field to have padding from the left....
adbad9b9aa74bb9664521780adb50272181eca23 changed setting name from LogEntries to Live Log
58476d5f72abe603c2b0ec3bf54a40a82fbafb90 Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
77f3d951a3ad7099667b98dd1622279da5fc8c3d prevent legacy setting lock in, remove 2 observers when view is unloaded, possible better test in 
ed48862949890604b044e4cf20bc6bcff4a8674a Merge branch 'master' of ssh://github.com/fezzee/FezzeeIOS
07bf561ef4eb55fddd732d796a0014aa8d992df8 (tag: 1.1.64) Fixed Issues:
</code></pre>

<p>Can anyone explain this behaviour?</p>

<p>Can anyone suggest a better way of creating a simple change log, than using the commandline below?</p>

<p>git log --pretty=oneline --decorate  1.1.64^..1.1.65</p>
","3","133470","",""
"25074210","551273","2014-08-01 06:33:11","1","262","<git><git-merge><git-flow><git-log>","How to show all logs including the merged branches in git-flow","<p>I took <code>git-flow</code> to do my work,</p>

<p>But I wonder how to see the merged-branch logs after I merged the branch.</p>

<p>for example, when I finished the branch <code>feature/support_vadp</code></p>

<p>I can no see the logs in that branch anymore.</p>

<pre><code>584c054 - (HEAD, hotfix/fix_duplicated_partial_only_items) Ignore: experimental seeding files (24 minutes ago) &lt;poc7667&gt;
bbaffaf - (master) Merge branch 'develop' (31 minutes ago) &lt;poc7667&gt;
7bc6c17 - (develop) Merge branch 'feature/support_vadp' into develop (37 minutes ago) &lt;poc7667&gt;
</code></pre>

<p><img src=""https://i.stack.imgur.com/uDzhf.png"" alt=""enter image description here""></p>
","0","551273","0","0"
"62386237","5534202","2020-06-15 10:26:00","0","99","<git><github><git-log><git-cherry-pick><git-rev-list>","git rev-list omit cherrypicked commits doesn't work","<p>I'm using <code>git rev-list</code> (because that's what GitPython's <code>iter_commits</code> is running behind the scenes) to obtain the changes present in one branch and not the other.</p>

<p>I want to omit all of the commits that were cherry-picked into the older branch.</p>

<p>This is the tree of commits before cherry-pick:
<a href=""https://i.stack.imgur.com/AAIyx.png"" rel=""nofollow noreferrer"">git log before cherry-pick</a></p>

<p>Now, I want to cherry-pick commit ""6"" into ""release-6.6"":</p>

<pre><code>git checkout release-6.6
git cherry-pick 24e0f0c
</code></pre>

<p>This is the tree of commits after cherry-pick:
<a href=""https://i.stack.imgur.com/kYL0O.png"" rel=""nofollow noreferrer"">git log after cherry-pick</a></p>

<p>Now I want to compare between branch <code>release-6.6</code> and branch <code>release-6.8</code> and get only commits <code>5,7,8</code>:</p>

<pre><code>git rev-list release-6.6..release-6.8
</code></pre>

<p>And the output is 4 commits which are: <code>5,6,7,8</code>.</p>

<p>I even try:</p>

<pre><code>git rev-list release-6.6..release-6.8 --cherry-pick
git rev-list release-6.6..release-6.8 --cherry-pick --right-only
git rev-list release-6.6..release-6.8 --cherry-pick --left-right
</code></pre>

<p>but none of them works. </p>

<p>What am I doing wrong? how can I get only commits <code>5,7,8</code>?</p>

<p>Thanks</p>
","2","5534202","",""
"25100064","20520","2014-08-02 22:46:58","2","44","<git><rename><git-log>","How can I efficiently see the contents of a renamed file maintained under git?","<p>With the <em>git</em> command</p>

<pre><code>git log --follow --pretty='format %H %ae %ai' foo.c
</code></pre>

<p>I get a list of changes that affected the file <code>foo.c</code>. Then, given a hash <em>H</em> from the <em>git log</em> output, I can run</p>

<pre><code>git show H:foo.c
</code></pre>

<p>to see the file's contents at that point of time.  </p>

<p>This doesn't work if the file has been renamed; <em>git</em> complains:</p>

<pre><code>fatal: Path 'foo.c' exists on disk, but not in '34cd81d75f398ee455e61969b118639dacbfd7a6'.
</code></pre>

<p>What is the most efficient way obtain the renamed file's contents?</p>
","1","20520","",""
"35945860","1860929","2016-03-11 17:00:16","146","64507","<git><git-log>","View git log without merge commits","<p>I'm trying to view commits made by a specific user, and want to remove any  merges done by the user from the output. How can I do so?</p>

<p>I can check for the commits of a user using <code>git log --author=&lt;name&gt;</code>, but can't remove the merge commits in the output.</p>

<p>PS: Merge conflicts do not happen in the workflow of the repo in question, all branches are rebased before merging into master so it is safe to remove the merge commits from the output, and similarly, two feature branches are not merged with one another raising the possiblity.</p>
","3","1860929","0","0"
"25339828","673760","2014-08-16 11:43:42","7","2795","<git><git-log>","Ignore files in git log -p","<p>I'm trying to summarize my work on a project. The problem is that I do not want to include test files in the output of <code>git log --patch</code>.</p>

<p>The files are in a single directory called <code>mtest</code>; however, that folder also contains test suite code that I do want to show. Test files, which I want to exclude, have extension <code>mscx</code> or <code>xml</code>, so I would want the filter to work based on that.</p>

<p>I have looked at <a href=""https://stackoverflow.com/questions/5685007/making-git-log-ignore-changes-for-certain-paths"">Making &#39;git log&#39; ignore changes for certain paths</a> but this looks like it excludes commits that modified a file instead of simply excluding the file.</p>

<p>Is there a way to do this?</p>

<p>I have tried Jubobs answer, and it seemed worked, but surprisingly 2 files came up even with the filter on.</p>

<p>I have reproduced this with this small repository:</p>

<pre><code>mkdir test
cd test
git init
echo 'readme' &gt; README
git add .
git commit -m ""Initial commit""

mkdir test2
cd test2
echo 't1' &gt; test1.cpp
echo 't2' &gt; test2.xml
git add .
git commit -m ""c2""

echo 't3' &gt; test3.cpp
echo 't4' &gt; test4.xml
git add .
git commit -m ""c3""
</code></pre>

<p>I noticed that files are not filtered when a directory is created.
I have tried the following commands:</p>

<pre><code>git log --patch -- . "":(exclude)**/*.xml""
</code></pre>

<p>which resulted in <strong>both</strong> xml files to be included.</p>

<pre><code>git log --patch -- . "":(exclude)*.xml""
</code></pre>

<p>This surprisingly filters out the <code>test4.xml</code> but not <code>test2.xml</code>. </p>
","1","673760","0","0"
"25362738","2541573","2014-08-18 11:56:16","10","3327","<git><git-log>","Why isn't the pathspec magic :(exclude) excluding the specified files from git log's output?","<p>This is a follow-up to <a href=""https://stackoverflow.com/questions/25339828/ignore-files-in-git-log-p"">Ignore files in git log -p</a> and is also related to <a href=""https://stackoverflow.com/questions/5685007/making-git-log-ignore-changes-for-certain-paths"">Making &#39;git log&#39; ignore changes for certain paths</a>.</p>

<p>I'm using Git 1.9.2. I'm trying to use the pathspec magic <code>:(exclude)</code> to specify that some patches should not be shown in the output of <code>git log -p</code>. However, patches that I want to exclude still show up in the output.</p>

<p>Here is a minimal working example that reproduces the situation:</p>

<pre class=""lang-sh prettyprint-override""><code>$ cd ~/Desktop
$ mkdir test_exclude
$ cd test_exclude
$ git init
$ mkdir testdir
$ printf ""my first cpp file\n"" &gt; testdir/test1.cpp
$ printf ""my first xml file\n"" &gt; testdir/test2.xml
$ git add testdir/
$ git commit -m ""added two test files""
</code></pre>

<p>Now I want to show all patches in my history expect those corresponding to XML files in the <code>testdir</code> folder. Therefore, following <a href=""https://stackoverflow.com/a/21079437/2541573"">VonC's answer</a>, I run</p>

<pre class=""lang-sh prettyprint-override""><code>$ git log --patch -- . "":(exclude)testdir/*.xml""
</code></pre>

<p>but the patch for my <code>testdir/test2.xml</code> file still shows up in the output:</p>

<pre class=""lang-bash prettyprint-override""><code>commit 37767da1ad4ad5a5c902dfa0c9b95351e8a3b0d9
Author: xxxxxxxxxxxxxxxxxxxxxxxxx
Date:   Mon Aug 18 12:23:56 2014 +0100

    added two test files

diff --git a/testdir/test1.cpp b/testdir/test1.cpp
new file mode 100644
index 0000000..3a721aa
--- /dev/null
+++ b/testdir/test1.cpp
@@ -0,0 +1 @@
+my first cpp file
diff --git a/testdir/test2.xml b/testdir/test2.xml
new file mode 100644
index 0000000..8b7ce86
--- /dev/null
+++ b/testdir/test2.xml
@@ -0,0 +1 @@
+my first xml file
</code></pre>

<p>What am I doing wrong? What should I do to tell <code>git log -p</code> not to show the patch associated with all XML files in my <code>testdir</code> folder?</p>
","1","2541573","0","0"
"62638966","3789040","2020-06-29 13:15:14","0","1267","<git><git-merge><git-diff><git-log><git-merge-conflict>","avoid auto merging of git conflicts and warn if same files getting modified in different branches","<p>Usually when we merge feature branch with master or any other branch and if same file is modified in different branches but on different lines then GIT does resolve the conflict automatically. We dont want these merge happened automatically and expecting GIT should warn us with list of common files modified in two branches to be merged.</p>
<p>e.g. In Master, we have file test1.txt as below</p>
AAA<br>
BBB
<p>Feature branch (feature/test1) created out of master and updated file test1.txt</p>
AAA<br>
BBB<br>
CCC
<p>also added new file Test2.txt</p>
<p>If I merge feature branch in master then this is will resolve conflicts automatically and merges the file contents successfully.
We wanted if same file is modified in feature and master branch then automatic merge should not occur, howeven it should warn saying test1.txt is modified and needs manual merge.</p>
Please assist how to achieve.
","5","3789040","",""
"7157312","872654","2011-08-23 06:57:40","6","2470","<git><git-log>","Autorefresh git log after commit when running in the Terminal","<p>Is it possible git log to be auto refreshed after commit or can I use another utillity in the Terminal to see list of all previous commits which auto refreshes itself?</p>
","0","872654","",""
"25392580","2541573","2014-08-19 20:39:57","7","611","<git><git-log><git-detached-head>","Can git log --decorate unambiguously tell me whether the HEAD is detached?","<p>I know that, in Git parlance, &quot;detached HEAD&quot; corresponds to a state in which the symbolic reference <code>HEAD</code> is not pointing to any branch. I also know that <code>git branch</code>, for instance, will tell me whether I'm in detached-HEAD state, e.g.</p>
<pre><code>* (detached from 9a2ef02)
  master
</code></pre>
<p>or not, e.g.</p>
<pre><code>* master
</code></pre>
<p>However, I'd like to know if there is a way to make the output of <code>git log --decorate</code> completely <em>unambiguous</em> as to whether I'm in detached-HEAD state or not.</p>
<h2>Example</h2>
<p>Say I'm on <code>master</code> and my history looks as follows:</p>
<pre><code>4d860e9 (HEAD, master) Remove trailing whitespace
9a2ef02 Correct typo in header
f0badb5 Add to-do section to README
</code></pre>
<h3>Case 1: unambiguous detached-HEAD state</h3>
<p>If I run</p>
<pre><code>git checkout 9a2ef02
</code></pre>
<p>then the output of <code>git log --decorate --oneline</code> is</p>
<pre><code>9a2ef02 (HEAD) Correct typo in header
f0badb5 Add to-do section to README
</code></pre>
<p>Because no branch reference is listed next to <code>HEAD</code> in this output, I know for sure that I've got a detached HEAD.</p>
<h3>Case 2: detached-HEAD state or not?</h3>
<p>However, if I run</p>
<pre><code>git checkout 4d860e9
</code></pre>
<p>then <code>HEAD</code> does not point to <code>master</code>, but <em>directly</em> to commit <code>4d860e9</code>, which <code>master</code> also points to; I've got a detached HEAD. However, there is no way to tell from the output of <code>git log --decorate --oneline</code>,</p>
<pre><code>4d860e9 (HEAD, master) Remove trailing whitespace
9a2ef02 Correct typo in header
f0badb5 Add to-do section to README
</code></pre>
<p>because it's exactly the same as when I'm on <code>master</code>.</p>
<p>Is there a way, via some <code>git log</code> options, to remove that ambiguity? I haven't found a way in the <code>git-log</code> man page...</p>
","4","2541573","0","0"
"7430093","676439","2011-09-15 11:33:03","22","17104","<git><git-log>","A git log history graph with one line per commit, in color, with dates","<p>I need to have format like:</p>

<pre><code>git log --decorate --graph --oneline --date-order
</code></pre>

<p>but I need it also:</p>

<ol>
<li>to contain date (short)</li>
<li>to have the same colors</li>
</ol>

<p>I tried:</p>

<pre><code>git log --decorate --graph --oneline --date-order \
--date=short --pretty=format:""%h %ad %s""
</code></pre>

<p>but it's harder to read (no colors) and does not include branches/tags</p>

<hr>

<p>The closest simple solution is(thanks <a href=""https://stackoverflow.com/users/6309/vonc"">VonC</a>):</p>

<pre><code>git log --graph --pretty=format:'%C(yellow)%h%Creset \
-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' \
--abbrev-commit --date=short
</code></pre>
","2","676439","0","0"
"36089674","2910279","2016-03-18 16:34:50","0","132","<git><git-diff><git-log>","git log -1 -p stash@{0} shows empty patch","<p>To reprodoce this behaviour just init a new git repository, create a file, add and commit. Now edit this file again (no add, no commit this time) and stash. The result should look like this:</p>

<pre><code>$ git log stash@{0} --graph --decorate
*   commit C (refs/stash)
|\  Merge: A C
| |     WIP on master: A init
| |
| * commit B
|/      index on master: A init
|
* commit A (HEAD, master)
      init
</code></pre>

<p>The diff between A and C shows the expected result:</p>

<pre><code>$ git diff stash@{0}^..stash@{0}
diff --git a/file b/file
index b1b7161..51bdcb4 100644
--- a/file
+++ b/file
@@ -1 +1,2 @@
+a new uncommited change
init
</code></pre>

<p>I would expect the same output for the command</p>

<pre><code>$ git log stash@{0}
</code></pre>

<p>but there is no patch. Why does this happen?
(This is not related to stashing: Same behaviour if you create the history using empty commit, no-ff, ...)</p>
","0","2910279","",""
"25630021","9859","2014-09-02 18:34:24","5","816","<git><git-log>","Extra newline in git log with tformat","<p>When I use <code>git log --pretty=oneline --shortstat</code>, I get a compact representation of my log:</p>

<pre><code>% git log --pretty=oneline --shortstat
73c6eecd930c2f66d5c1e87fcca7ca9b0e356809 doing stuff with things
 3 files changed, 134 insertions(+)
65b457d2e0e94e628e1b30204075540524c8a1d2 doing things with stuff
 2 files changed, 4 insertions(+), 1 deletion(-)
...
375531279297af3c787855b0848b400f1c40b638 things with stuff doing
 1 file changed, 2 insertions(+)
5501964b19815a07b64e1cd391e032147af33b8f with things doing stuff
 25 files changed, 6746 insertions(+)
</code></pre>

<p>But if I try to use the <code>tformat</code> equivalent of <code>oneline</code>, I get an extra newline before the stat:</p>

<pre><code>% git log --pretty=""%C(yellow)%H%Creset %s"" --shortstat
73c6eecd930c2f66d5c1e87fcca7ca9b0e356809 doing stuff with things

 3 files changed, 134 insertions(+)
65b457d2e0e94e628e1b30204075540524c8a1d2 doing things with stuff

 2 files changed, 4 insertions(+), 1 deletion(-)
...
375531279297af3c787855b0848b400f1c40b638 things with stuff doing

 1 file changed, 2 insertions(+)
5501964b19815a07b64e1cd391e032147af33b8f with things doing stuff

 25 files changed, 6746 insertions(+)
</code></pre>

<p>Without the <code>--shortstat</code> flag (or <code>--stat</code>) flag, the output of the two commands is identical, so it's something about adding those flags.</p>

<p>I can fix this with grep:</p>

<pre><code>[alias]
  x-skip-empty-lines=""!f(){ git $* --color=always | grep -vE '^(\\|{0,1}|\\e\\[[^m]*m)[[:space:]]*$' | less ;}; f""
  logpatch= !git x-skip-empty-lines log --pretty='%C(yellow)%H%Creset %s' --shortstat 
</code></pre>

<p>But is there a way to avoid producing the newline in the first place?</p>

<p>(git 1.8.3 and 2.0.1)</p>
","3","9859","0","0"
"25638767","683159","2014-09-03 07:36:39","5","2721","<git><git-diff><git-log>","git diff on a bare repo","<p>I wanna see how much a repo changed in the last month on gitlab server side </p>

<pre><code>cd /path/to/my/bare/repo.git/
git --git-dir . diff --shortstat ""@{1 month ago}""
fatal: Unable to read log 'logs/refs/heads/master': No such file or directory
</code></pre>

<p>However it works fine in local checkout-ed working branch.</p>

<p>Is there a way to do this without too much hassle?</p>

<p>To avoid X-Y problem: I wanna run statistics through hundreds of repos on a Gitlab server</p>
","6","683159","0","0"
"62910170","10024116","2020-07-15 07:58:42","0","399","<git><powershell><cmd><git-log><windows-terminal>","Force git log to display UTF8 in Windows Terminal","<p>I've started to use Windows Terminal as my git command-line tool, but It seems like Korean characters are not properly printed when I type <code>git log</code>, like:</p>
<p><a href=""https://i.stack.imgur.com/aPnYm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/aPnYm.png"" alt=""enter image description here"" /></a></p>
<p>I've also tried using <code>cmd</code> and <code>powershell</code>, but same thing also happened. (no screenshots)</p>
<p>But it prints properly in Git Bash, like:</p>
<p><a href=""https://i.stack.imgur.com/DW6Od.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DW6Od.png"" alt=""enter image description here"" /></a></p>
<p>What I've searched and tried:</p>
<ul>
<li>Typing <code>chcp 65001</code></li>
<li>Typing <code>set LC_ALL=C.UTF-8</code></li>
<li>Change administrative language setting (followed <a href=""https://akr.am/blog/posts/using-utf-8-in-the-windows-terminal"" rel=""nofollow noreferrer"">this article</a>)</li>
</ul>
<p>And all things above didn't solve my problem. Is there any suggestion to solve my problem? I want to use Windows terminal, not git bash :(</p>
","7","10024116","0","0"
"36219388","539570","2016-03-25 11:51:29","1","189","<git><git-log>","git line range log -- for what commit line numbers refer","<p>I have some file foo.hpp and a line there that was added on commit A at line number 4332. Now (at HEAD) this line is at position 4776</p>

<p>Neither </p>

<pre><code>1) git log -L 4330,4335:foo.hpp
</code></pre>

<p>nor</p>

<pre><code>2) git log -L 4774,4778:foo.hpp
</code></pre>

<p>doesn't give me commit A with the line added.</p>

<p>Writing</p>

<pre><code>3) git log &lt;commit A hash&gt; -L 4330,4335:foo.hpp
</code></pre>

<p>gives me commit A and some older commits. So I assume that, when revision is entered, understand line range as a range of lines at specific revision. But than I don't get why the 2nd variant didn't show me this line change, since specifying no revision essentially makes it being set to HEAD.</p>

<p>Can anyone explain me such a behaviour? If I specify the line range, than how git understands it (I mean, which commit does this line range correspond for?)</p>

<p>In case if git understands line range as a line range for each commit, than why the 1st variant didn't help me? And is there any tool to track line range intellectually (so that git automatically updates it accordingly to file changes)?</p>
","3","539570","0","0"
"52313525","3743145","2018-09-13 12:13:06","1","327","<git><git-log><git-filter-branch>","Extract meta information from Git, allow git log without fetching full repo","<p>When use Git in a deployment it is often need to get know commit history and relationship. There is no problems when the repo is small. But for big  repositories to get full history it is required to fetch all the objects. This operation consumes much bandwidth and takes much time.</p>

<p>So, the problem:</p>

<h3>need operate with history of a big Git repo without fetching content.</h3>

<p>It would be nice to fetch few MBs and get working <code>git log</code>, <code>git rev-parse</code>, <code>git rev-list</code>, etc. without ability to checkout contents.</p>

<h3>idea1. dedicated branch <em>_metainfo</em> with raw output from git log</h3>

<p>Store output of <code>git log</code> to dedicated branch. 
But this approach will require own parser.<br>
This is suitable for very simple tasks.</p>

<h3>idea2. prune file contents</h3>

<p><code>git filter-branch tree-filter ""echo &gt;**""</code> (pseudo-code). This will change hash of commits, but store commit messages and dates. And old commit hash can be added to filtered commit message.   </p>

<p><strong>upd</strong>.<br>
Thank you for the answers. I have already read possible duplicates and get know: <strong>""no solution at the moment""</strong>. During this research I implemented my 1st idea as a simple workaround and 2nd as a concept of working solution. Both of them gives semi-usable results. I'd prettify and publish them if community interested. </p>
","4","3743145","0","0"
"44525202","172406","2017-06-13 15:04:07","0","204","<bash><git-remote><git-log>","Can the url of the remote be included in the output of `git for-each-ref` command?","<p>I am writing to a script to list all the git repositories on my system, their branches, and the latest commits on the system. So I have created this script prints out the following. </p>

<p><code>directory, branch(ref), date, commit hash, date, commit message, ref (again)</code>.</p>

<pre class=""lang-bash prettyprint-override""><code>#!/bin/bash
IFS='
'
for directory in `ls -d $1/*/`; do
  # echo ""$directory : $directory.git""
  if [[ -d $directory/.git ]] ; then
      # filter=/refs/heads
      filter=''
      for branch in $(git -C $directory for-each-ref --format='%(refname)' $filter); do
          echo $directory : $branch :  ""$(git -C $directory log -n 1 --oneline  --pretty=format:'%Cred%h - %C(yellow)%ai - %C(green)%s %C(reset) %gD' $branch)"" : $(echo $branch | rev | cut -d\/ -f-1 | rev)
      done
  fi
done
</code></pre>

<p>What I don't have is the repository URLs for the remotes. Can the remote's URL be printed as part of the output of <code>git for-each-ref</code> command?</p>

<p>I guess I could use <code>git remote -C $directory -v</code> to list the remotes for the repository into a lookup list which I would use for each value of <code>xxxxx</code> in <code>refs/remotes/xxxxx</code> into a variable which would be added to the <code>echo</code> command.</p>
","0","172406","",""
"62533921","1428089","2020-06-23 11:44:40","0","306","<git><git-log>","Use part of git commit message as a variable in git log","<p>I'm trying to create a more useful list of commits for reporting, and would like to format commit messages made in the following format:</p>
<pre><code>Merged PR 5678: [12345] here's my awesome git commit message
</code></pre>
<p>Into the this format:</p>
<pre><code>12345 - 2020-06-02 - Merged PR 5678: [12345] here's my awesome git commit message - Joe Bloggs
</code></pre>
<p>What i have so far:</p>
<pre><code>git log --grep=Merged --pretty=&quot;%ad - %s - %an&quot; --date=short
</code></pre>
<p>Which returns:</p>
<pre><code>2020-06-02 - Merged PR 5678: [12345] here's my awesome git commit message - Joe Bloggs
</code></pre>
<p>But i don't know where to start in extracting the number from brackets and adding it as a variable to the pretty mask, is this possible?</p>
","0","1428089","",""
"62749476","13387448","2020-07-06 04:54:59","1","160","<git><git-log><git-patch>","How to get a git log for a line from a patch?","<p>I get a patch using command:</p>
<pre><code>git format-patch -1 --numbered-files --unified=100000 -o tmpdir commit_sha1 --file_name
</code></pre>
<p>Now I'm interested in a specific line from a specific file from the patch. I want to see the change history of this line.
I could use the git log like this:</p>
<pre><code>git log -L10,10:file_name
</code></pre>
<p>But the problem is that the line number in the patch does not match the line number in the original file.</p>
<p>Is there any way to get git log of line from a patch?</p>
","1","13387448","",""
"25502037","110963","2014-08-26 09:10:18","2","69","<git><git-log>","How to figure out in which git commit a method go ""lost""?","<p>I had two git branches parallel to the master branch. Over time changes between branches had been merged back and forth which caused a way to complicated history, but that's nothing I can change now. What happened is, that some method M existed in branch B, which has been merged into master. ""Most"" of B is in master, but I'm missing method M. It probably got ""lost"" in a ""wrong"" merge. Trying to figure out, where it happened, I tried:</p>

<pre><code>git log -S""def M""
</code></pre>

<p>and also</p>

<pre><code>git log -G""def M""
</code></pre>

<p>I see the commit where the method has been introduced in the output, but not where it has been removed. Any hint what I might be doing wrong?</p>
","1","110963","0","0"
"25540255","2940571","2014-08-28 03:28:25","1","53","<git><git-commit><git-log>","git lost my edit history without merge and conflict","<p>I have a commit at Wed Aug 27 19:43:46 2014 +0800, </p>

<pre><code>commit bbdbbb7214de8611a787c92daf93dbc2719600d0
Author: malloc (malloc@slowcast.com)
Date:   Wed Aug 27 19:51:17 2014 +0800


commit a5f8bcbf7fdfa995325a338a02ad8eef611ac9f8
Author: malloc (malloc@slowcast.com)
Date:   Wed Aug 27 19:43:46 2014 +0800
</code></pre>

<p>the edit of the commit shows that 3 files had been modified. </p>

<pre><code>git d --name-only a5f8bcb^..a5f8bcb

res/layout/layout_login.xml
base/BaseAct.java
ui/login/Login.java
(END)
</code></pre>

<p>then other people commit their modifies. </p>

<pre><code>commit 833dee16869ceb834cb1b8d8ac38bf3d0f147e66
Author: simon (simon@slowcast.com)
Date:   Wed Aug 27 20:13:42 2014 +0800


commit b391737ac94d5d779c1cb00b05a7c3bccee98915
Author: muham (muham@slowcast.com)
Date:   Wed Aug 27 20:00:35 2014 +0800
</code></pre>

<p>at version b391737 the Login.java is the new version, but at version 833dee1 the content of Login.java is old version.  (and also other filess been modified)</p>

<p>check the commit 833dee1, only one file is commited</p>

<pre><code>git d --name-only 833dee1^..833dee1

res/values/strings.xml
(END)
</code></pre>

<p>and then check the log of Login.java</p>

<pre><code>git log ui/login/Login.java

commit c5a5ae9a48c2f1d44b6cd3654c20834ed49b3991
Author: simon (simon@slowcast.com)
Date:   Thu Aug 21 15:54:39 2014 +0800


commit 7e65405d19a946349ee4ac07176a37098f52867b
Author: shubin (nick@slowcast.com)
Date:   Fri Aug 15 15:22:01 2014 +0800
</code></pre>

<p>the lastest commit is at Thu Aug 21 15:54:39 2014 +0800, there is no log of my edit.  </p>

<p>How could this happen? The commit 833dee1 didn't have file I edited and history of Login.java also lost my edit .<br>
Is there some command that I can find the whole history of Login.java?</p>

<h1>edit</h1>

<p>=========================================<br>
we use only one branch master, and the log is not only at local, git clone from remote get the same log history.
Add some output:</p>

<pre><code>$ git log --oneline --graph --color=auto --decorate --all ui/login/Login.java
</code></pre>

<ul>
<li>b77af0c (HEAD, origin/master, origin/HEAD, master) recover login</li>
<li>9f88669 temp fix</li>
<li>c5a5ae9 add some comment</li>
<li>7e65405 config edit
...
...</li>
</ul>

<p>c5a5ae9 is at Aug 21 15:54:39 2014, many days ago, 9f88669 and b77af0c is commits after we find the problem, git losts the log at a5f8bcb.</p>

<pre><code>git log --oneline --graph --color=auto --decorate 833dee16...bbdbbb72
</code></pre>

<ul>
<li>833dee1 change var</li>
<li>bbdbbb7 modify default avatar style</li>
<li>a5f8bcb login page style</li>
<li>8b4aff8 add some string</li>
<li>ab1e53c add some string</li>
<li>9ab6bea edit rec user page style</li>
</ul>
","5","2940571","",""
"62983039","8522818","2020-07-19 16:42:27","0","267","<git><git-log>","git log --since is excluding the first commit","<p>Suppose a git repo has 12 commits and 4 was created <em>yesterday</em> (let's say <em>December 31st, 2199</em>).</p>
<p><code>git log --oneline</code> will output:</p>
<pre class=""lang-sh prettyprint-override""><code>9675a65 fix: a bug in feature B
041e1b2 feat: add feature B
d0f58e3 refactor: apply DPs to feature A
e933840 feat: add feature A
a6a235d chore: update version
...

f982bfd chore: initial commit
</code></pre>
<h3>Expected behavior</h3>
<p>From my understanding, if I run <code>git log --since=1.day</code> today (<em>January  1st, 2200</em>) I should get an output including the last 4 commits from yesterday (in the example: from <em>feat: add feature A</em> to <em>fix: a bug in feature B</em>).</p>
<h3>Actual behavior</h3>
<p>But instead, I am getting only the last 3 commits (from <em>refactor: apply DPs to feature A</em> to <em>fix: a bug in feature B</em>). <code>git log --since=1.day</code> is not including the first commit created yesterday in its output (the <em>feat: add feature A</em>).</p>
<p>Am I missing something here?</p>
","4","8522818","",""
"8016645","972791","2011-11-04 22:53:46","60","37403","<git><git-log>","git: list all files added/modified on a day (or week/month...)","<p>Given a period of time (e.g. a day, a week, a month), is it possible to list all files that were modified or added in this time?</p>
","2","972791","0","0"
"26148941","61624","2014-10-01 19:20:45","3","845","<git><performance><git-svn><git-log>","This git log command is takes a longer to run the more I use it, how do I make it run faster?","<p>I happen to be using the <code>git svn</code> bridge, I'm not sure if that's relevant.  In my "".gitconfig"" I have an alias for <code>git lg</code> that's defined like this:</p>

<pre><code>[alias]
        lg = log --max-count=100 --branches --color --graph --pretty=format:'%Cred%h%Creset - %C(bold blue)&lt;%an&gt;%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)' --abbrev-commit
</code></pre>

<p>When I first cloned this repository, running <code>git lg</code> would be near instantaneous, but this command seems to get slower and slower as time goes by.  Now <code>git lg</code> takes at least 30 seconds.  What is causing this to be slow and how can I make it run faster?</p>
","4","61624","0","0"
"26150001","283296","2014-10-01 20:26:30","1","754","<git><git-log>","git log a specific HEAD~N","<p>Is there any way to just show the output of <code>git log</code> a number of commits ago?</p>

<p>I tried, e.g. <code>git log HEAD~3</code> but that seems to show everything, not just the entry for <code>HEAD~3</code> (three commits ago from <code>HEAD</code>)</p>
","0","283296","",""
"44686634","1424776","2017-06-21 21:34:15","0","255","<git><ansible><git-diff><git-log><ansible-vault>","I keep getting a password prompt when I try to git-log an ansible-vault file","<p>I followed the instruction here: </p>

<p><a href=""https://stackoverflow.com/questions/29937195/how-to-diff-ansible-vault-changes"">How to diff ansible vault changes?</a></p>

<p>but I keep getting a prompt to put in the ansible-vault password. </p>

<p>This is the command I run that prompts for the vault password:</p>

<p>git log -p staging.yml</p>

<p>What am I doing wrong?  I tried putting in the the pager as cat and less like the comments show and it still prompts for the vault password...can someone tell me what I am doing wrong?  I am using mac os x sierra...</p>
","0","1424776","",""
"8576503","31897","2011-12-20 13:52:43","63","32195","<git><sorting><timestamp><git-log>","How can I make git log order based on author's timestamp?","<p>I use a fairly complex <code>git-log</code> command involving <code>--date-order</code> to get an overview of my repository's status; but unfortunately, <code>--date-order</code> seems to use the <em>committer</em> date, not the <em>author</em> date. That means that each time I bring my topic branches up to date by rebasing them onto the current upstream, I lose the helpful chronological ordering in my <code>git-log</code> of relative commits in my topic branches (that is, each branch becomes a single long line, because all of its commits got rebased to sequential and nearly-identical committer timestamps.)</p>

<p>If I could get <code>git-log</code> to order commits by the <em>author</em> timestamp instead of the <em>committer</em> timestamp, this would be solved. Does anybody know of a way to do that?</p>

<hr>

<p>For those visiting this from Google results, you may want to look into <a href=""https://stackoverflow.com/users/990642/josephdpurcell"">josephdpurcell</a>'s solution (and <a href=""http://thesimplesynthesis.com/post/how-to-sort-git-commits-by-author-date/"" rel=""noreferrer"">in-depth blog post</a>!), below. It's quite excellent, if you're looking for standard <code>git-log</code> style output, multi-line, with detailed messages about each commit.</p>

<p>Unfortunate, I now need to amend this question, because I'm an idiot and didn't provide more specific information about my use-case: I use <code>git-log</code> in “<code>--graph</code> mode,” and I need to make <strong><code>git-log</code> itself</strong> operate in author-date-order. As far as I've been able to ascertain, this is completely impossible to do from outside <code>git-log</code>, because <code>git-log</code> <em>itself</em> handles the graph ordering and printing.</p>

<p>A script, or patch for <code>git-log</code>, may be necessary, it seems. I'll leave this open until somebody can either 1. write such a script, or 2. we can talk the <code>git</code> authors into including a <code>--author --date-order</code> combination of flags. (=</p>

<hr>

<p>For reference, here's what my current <a href=""https://github.com/elliottcable/System/blob/Master/Dotfiles/profile#L180-L189"" rel=""noreferrer""><code>glog</code> function</a>'s output looks like, and what I need to re-order:</p>

<p><img src=""https://i.stack.imgur.com/HUVAU.png"" alt=""glog output""></p>
","0","31897","0","0"
"26378594","454094","2014-10-15 09:06:31","0","101","<git><tags><git-log><git-tag>","Get the two most recent git tags (and the log between them)","<p>I am looking for a git command that would show me the <code>git log</code> between the <strong>two most recent tags</strong> in the current branch.</p>

<p>I.e. if the two most recent tags are <code>build_341</code> and <code>build_342</code>, then I would want to end up with the output of <code>git log build_341..build_342</code></p>

<p>I know that I can get the most recent tag using <code>git describe --abbrev=0</code>, but I don't know how to show the second most recent tag.</p>
","0","454094","",""
"44747564","4695280","2017-06-25 14:57:24","2","496","<git><git-log>","git log -S'string with line breaks'","<p>I have the following code in project:</p>

<pre><code>someMethodCall();
anotherMethodCall(); //new string
</code></pre>

<p>I want to find logs, which contains that both srings, with <code>-S</code> parameter.
I've tried:</p>

<pre><code>git log -S'someMethodCall();anotherMethodCall()'
git log -S'someMethodCall();%nanotherMethodCall()'
git log -S'someMethodCall();\r\nanotherMethodCall()'
git log -S'someMethodCall();\nanotherMethodCall()'
</code></pre>

<p>...but no success.</p>
","0","4695280","0","0"
"8481914","353652","2011-12-12 22:37:35","1","806","<c><git><git-log><libgit2>","""git log -1 fullpath/myfile"" with libgit2","<p>I want to implement <code>git log -1 fullpath/myfile</code> with libgit2. I am fairly new to libgit2. Am I on the right track? This is what I have so far:</p>

<pre><code>git_repository_head(&amp;refToHead, repo);

headOID = git_reference_oid(refToHead);
git_commit_lookup(&amp;headCommit, repo, headOID);

headTreeOID = git_commit_tree_oid(headCommit);
git_tree_lookup(&amp;tree, repo, headTreeOID);

git_tree_entry_byname(tree, ""repopath/myfile"");
</code></pre>

<p>Unfortunately <code>git_tree_entry_byname</code> seems not to work for files in subdirectories of the repo. Any idea?</p>

<p>Thank you,
Lars</p>
","0","353652","0","0"
"69824008","3902663","2021-11-03 11:24:42","1","425","<git><git-log>","Show branch names with ""git log --graph --oneline --decorate"" when it takes a filename","<h2>Background</h2>
<ul>
<li>Our team uses a git repository on GitLab to store source files of a product.</li>
<li>We are using a git-flow-like branch model to commit and merge changes to the repository.</li>
<li>I found that some feature branches are not merged unintentionally. Also, there are some feature branches that should be deleted like:
<ul>
<li>Branches that merged to the develop branch successfully and not deleted yet</li>
<li>Branches that abandoned (because they can't be merged successfully)</li>
</ul>
</li>
<li>I want to distinguish branches that should be merged from ones that should be deleted.</li>
</ul>
<h2>What I want to do</h2>
<p>To confirm that all the necessary changes are merged to the develop branch successfully, I am trying to show a merge graph per file like this:</p>
<pre class=""lang-sh prettyprint-override""><code>git log --graph --all --oneline --decorate=full develop -- ./path/to/a/file
</code></pre>
<p>And if there is a file that forked and not merged like this, I want to ask the owner of the file to merge or delete the branch that contains that file.</p>
<pre><code>* 4151fa9 Commit Message 4
| * 8dc5658 Commit Message 3
* | d579006 Commit Message 2
|/  
* 4df043a Commit Message 1
</code></pre>
<h2>Problem</h2>
<p>I want to know the name of the branch that forked and not merged (<code>8dc5658</code> in above), but <code>git log --graph --oneline --decorate</code> doesn't show the branch name if it takes a file name as its argument.</p>
<p>What I want to get as the result of <code>git log --graph --all --oneline --decorate=full develop -- ./path/to/a/file</code> is like this:</p>
<pre><code>* 4151fa9 (HEAD -&gt; develop) Commit Message 4
| * 8dc5658 (branch-abandoned) Commit Message 3
* | d579006 Commit Message 2
|/  
* 4df043a Commit Message 1
</code></pre>
<h2>Question</h2>
<p>How can I show the branch name in the result of <code>git log --graph --oneline --decorate</code> when it takes a file name as its argument?</p>
<p>Note that you can show an original branch for a commit with <code>git branch --contains COMMIT</code>, but it's difficult to identify commits to pass to <code>git branch --contains</code> from a commit graph (<code>4151fa9</code> and <code>8dc5658</code> in the above) for each file in the repository.</p>
","1","3902663","",""
"45992116","863980","2017-09-01 01:19:16","0","205","<git><git-log>","Is it possible to display nested command with git log --pretty","<p>I came up with a one liner command to display the names, SHA-1 hashes and URLs of each submodule:</p>

<pre><code>git submodule foreach --quiet ""echo $name:$sha1: `git config --get remote.origin.url`/tree/$sha1""
</code></pre>

<p>I want to display the hash and URL of head as well, but struggling to figure out which format command should I use. I have tried:</p>

<pre><code>git log -1 --pretty=format:""`git config --get remote.origin.url`/tree/%h""
</code></pre>

<p>but it doesn't evaluate the <code>git config --get remote.origin.url</code> part and instead prints it verbatim. Can we someone format with nested command? Or is there any other <code>git</code> command which can produce the desired output (origin.url + ""/tree/"" + ""sha1"")?</p>

<p>It would be much appreciated if the solution is one liner with single, pure git command executing the nested command as I need to run it on a slim Windows build environment, where python, ruby and bash etc. commands (like <code>cut</code> etc.) are note available.</p>
","4","863980","",""
"52632881","2150289","2018-10-03 17:46:07","1","1308","<git><git-log>","How to suppress blank lines with git log pretty format?","<p>I am trying to extend the <code>git log --oneline</code> format to show a little more information, specifically the committer and commit time.</p>

<p>The original command is <code>git log --oneline --name-status</code>
and produces this output:</p>

<pre><code>[master] ~/temp/tempgit$ git log --oneline --name-status
809d815 (HEAD -&gt; master) modified bar
M       bar.txt
352d6d3 modified foo
M       foo.txt
e4150f4 initial commit
A       bar.txt
A       baz.txt
A       foo.txt
</code></pre>

<p>I've duplicated this format with additional information as
<code>git log --oneline --name-status --pretty='format:%C(yellow)%h %C(auto)%d %s %C(red)(%cn, %cr)'</code>
and it produces this output:</p>

<pre><code>[master] ~/temp/tempgit$ git log --oneline --name-status --pretty='format:%C(yellow)%h %C(auto)%d %s %C(red)(%cn, %cr)'
809d815 (HEAD -&gt; master) modified bar (Mike Harvey, 29 seconds ago)
M       bar.txt

352d6d3 modified foo (Mike Harvey, 49 seconds ago)
M       foo.txt

e4150f4 initial commit (Mike Harvey, 2 minutes ago)
A       bar.txt
A       baz.txt
A       foo.txt
</code></pre>

<p>What I want to do is suppress the blank lines between log entries, but cannot find an option to remove it, nor why it is being inserted. The only difference here is that I am using a pretty format.</p>

<p>UPDATE: It seems there is no workaround, so I adapted Kjele's solution. Piping the output loses the color info, which I really wanted, so I forced it with -c color.ui=always.</p>

<p>This is the final version that does what I wanted:</p>

<p><code>git log ${REV}..HEAD --oneline --name-status -c color.ui=always --pretty=format:%C(yellow)%h %C(auto)%d %s %C(red)(%cn, %cr) | sed '/^\s*$/d'</code></p>

<p>Thanks!</p>
","3","2150289","0","0"
"52644051","2997128","2018-10-04 10:07:59","1","176","<git><branch><git-branch><git-log>","git log after(contains) commit? (with --graph)","<p>I knew that </p>

<ul>
<li><code>git branch --contains &lt;REVISION&gt;</code> can show names of all child branches since <code>&lt;REVISION&gt;</code></li>
<li><code>git log --branches=&lt;BRANCH_REGEX&gt;</code> can filter branches</li>
</ul>

<p>Is there any way to conceptually direct output of the former command to the latter?<br/>
i.e. <strong><code>git branch --contains &lt;REVISION&gt; | git log --branches=</code></strong></p>

<p>The goal is to filter branches when using <code>git log --decorate --graph --oneline [OTHER_OPTIONS]</code></p>

<p>Thanks~</p>
","0","2997128","",""
"37465145","52499","2016-05-26 15:28:19","2","1593","<git><git-log>","`git log -p path/to/file` doesn't show all the changes","<p>I expect it to show all the changes (commits) to the specified file, but it doesn't do that. It shows only some of them. I suppose it has something to do with merging, but I don't see what might go wrong here. Can someone explain that?</p>

<p><strong>UPD</strong> I was able to reproduce my particular issue in a test repo:</p>

<pre class=""lang-bash prettyprint-override""><code>#!/usr/bin/env bash
set -eu
rm -rf 1
mkdir 1 &amp;&amp; cd 1
git init

mkdir 1
echo m1 &gt; 1/m1 &amp;&amp; git add 1/m1 &amp;&amp; git commit -m m1

git co -b b1
echo m11 &gt; 1/m1 &amp;&amp; git add 1/m1 &amp;&amp; git commit -m b11
echo m1 &gt; 1/m1 &amp;&amp; git add 1/m1 &amp;&amp; git commit -m b12

git checkout master
echo m2 &gt; m2 &amp;&amp; git add m2 &amp;&amp; git commit -m m2
git merge b1 -m 'merge b1'
git --no-pager log --graph --oneline --decorate --all
git --no-pager log --oneline 1
</code></pre>

<p>Commits <code>b11</code> and <code>b12</code> are not listed by the last command.</p>
","0","52499","0","0"
"70219692","3220554","2021-12-03 19:23:41","3","160","<git><git-log>","How to get ref names with git log --pretty=format:""....""? %d shows refs, but all in same color","<p>I'm trying to get a customized git log listing using --pretty=format:&quot;....&quot;, but can't seem to find out how get the <em>ref names</em> colored as in <code>git log --oneline</code>. This is my log command so far:</p>
<pre><code>git log --pretty=format:&quot;%C(yellow)%h%Creset %d %ci (%cr)%n    ==&gt; %s%n&quot;
</code></pre>
<p>It displays all I want, except for the coloring of the refs:</p>
<p><a href=""https://i.stack.imgur.com/CZqEB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CZqEB.png"" alt=""enter image description here"" /></a></p>
<p>Is there a way to get the refs printed in color such as in <code>git log --oneline</code>?</p>
<p><a href=""https://i.stack.imgur.com/anKDt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/anKDt.png"" alt=""enter image description here"" /></a></p>
","0","3220554","",""
"70223900","14872262","2021-12-04 07:50:59","0","820","<git><powershell><git-log>","How to find the git log or commit history for a specific file using PowerShell","<p>I wanted to find the commit history for a specific file/path using powershell. Based on the last commit message,if it was deleted i am invoking a deleted function. which it invokes a rest API to delete it from Azure else it will go to next.</p>
<p>Here what i am trying to do</p>
<blockquote>
<pre><code>  $commited_file_name = $([io.path]::GetFileNameWithoutExtension($_.Line)) #This gives Me the filename

  $path = $_.Line #This Gives me the complete Path. They change it dynamically based on the committed file in the Azure Devops Repo
</code></pre>
</blockquote>
<p>by make using of the above lines i'm passing the following git commands to fetch commit history of a specic file. most of my files are Json files.</p>
<p>By referencing these two <a href=""https://stackoverflow.com/questions/6839398/find-when-a-file-was-deleted-in-git"">Find when a file was deleted in Git</a> and <a href=""https://stackoverflow.com/questions/7203515/how-to-find-a-deleted-file-in-the-project-commit-history"">How to find a deleted file in the project commit history</a>. As i couldn't find how to do it via powershell.</p>
<p>Here is what i Did.</p>
<pre><code>      #Tried to get the commit history using a Path
      $commit_log = git log --full-history -1 [$path]
      WriteDebug &quot;Commit Log:$commit_log&quot; #[However this is not returning anything ]

      #Then tried to get the commit history using a Filename
      $commit_file = git log --all --full-history -1 -- &quot;**/$commited_file_name.json.*&quot;
      WriteDebug  &quot;Commit File history:$commit_file&quot; #[This is also not returing anything]
      
      #And it is failing at this point and invoked the DotheNextTask function even if the last commit of the file was deleted.

      $filter_commit = $(&quot;$commit_file&quot; | grep -c &quot;Deleted&quot;)
      if (&quot;$filter_commit&quot; -ne 0 ) {
        Deletefile
      }
      else{
        DotheNextTask
      }
</code></pre>
<p>is there something i'm not doing right? or am i missing something here.</p>
","1","14872262","",""
"70252806","1289801","2021-12-06 22:36:17","2","318","<git><git-log><git-history-graph>","This git log output shows two branches as if they weren't branches? Please explain","<p><code>feature/XY</code> is the name of a feature branch and is currently checked out. <code>feature/XY-refactor</code> is the name of another branch, that branched off of <code>feature/XY</code>.</p>
<p>When I run <code>git log --oneline</code>, I get the output below.
What does it mean that these two are right one after the other at the very top of the log output? I am using git bash on Windows.</p>
<pre><code>user@host ~/Documents/repo (feature/XY)
$ git log --oneline
9feb11a (HEAD -&gt; feature/XY, origin/feature/XY) Axis labels
d250b90 (feature/XY-refactor) Refactored
87d49c1 Fix typoe
6a8a7c7 Fix print statement
945ffca Fix code layout
3e747c9 Added spaces after comma
b143713 Changed fontsize
a669cd4 Commented out a print statement
// .. more commits
</code></pre>
","1","1289801","",""
"53581762","5958455","2018-12-02 15:33:24","11","3456","<git><git-log>","Is ""git log --pretty=<pretty format>"" a porcelain or plumbing command?","<p>I am creating some scripts and programs that fetch commit information using</p>

<pre><code>git log --pretty=&lt;my format&gt; -1 &lt;commit&gt;
</code></pre>

<p>I wonder if the output of this command is suitable to be parsed by programs (plumbing) or only meant to be presented to humans (porcelain). For example, in some projects I am fetching commit SHA + author name + commit summary with this:</p>

<pre><code>git log --pretty=""%H%n%an%n%s"" -1 HEAD
</code></pre>

<p>And then I split the output string by the newline character (I'm on Linux).</p>

<p>Besides, in some cases I also do something like this:</p>

<pre><code>git log --pretty='[%h] %an: %s' -1 HEAD
</code></pre>

<p>And then parse the result with the following regex, expecting that a short SHA, the author name and the commit summary are in the captured groups:</p>

<pre><code>^\[(\w+)\] ([^:]+): (.*)$
</code></pre>

<p>Is it a good approach? If not, what is the preferred way to programmatically get information about commits?</p>
","1","5958455","0","0"
"70392361","8019153","2021-12-17 11:18:37","4","321","<git><git-diff><git-log>","List all files touched by commits in git","<p>How to list all the files that were &quot;touched&quot; somewhere between two commits? I am looking for a command similar to <code>git diff COMMIT1..COMMIT2 --name-only</code> but including the files that were modified and reverted later.</p>
<p>For example, let's say I have a repository with a series of commits (linear history): C0&lt;-C1&lt;-C2&lt;-C3&lt;-C4. The commit C1 introduced a new file F and then the commit C3 removed it from the repository. I am looking for a command that, given C0 and C4, would tell me that somewhere in between there was a file F. Even though there is no such file in C0 and in C4. Therefore <code>git diff</code> wouldn't mention file F at all.</p>
","1","8019153","",""
"53675639","1366368","2018-12-07 19:21:35","0","1175","<git><git-log>","Is there a way to show the git log graph from the HEAD to a commit that was made by a specific user?","<p>We have our daily build done by a automated user, which will make an empty commit to the repo with the build information in the message.</p>

<p>I was wondering if I could either:</p>

<ol>
<li>Get the last log entry (or <em>n</em> log entries) from where I am currently in the repo that was committed by that automated user and/or</li>
<li>Show a graph from HEAD to that same automated user's commit which shows all users commits that were done in between.</li>
</ol>

<p>Are either possible just using git commands, or do I have to do some external processing?</p>
","0","1366368","",""
"53681452","4403802","2018-12-08 10:09:19","6","5083","<git><branch><git-log><author><git-history>","Filter git log by author or branch","<p>In my workflow I'm usually only interested in my own branches and some specific branches like <code>staging</code> or <code>master</code> and would like my <code>git log</code> to reflect that. I've come up with this command :</p>

<pre><code>git log --branches=staging* --author=my_name
</code></pre>

<p>The problem is that the <code>author</code> and <code>branches</code> filters seem to linked with the logical operator <code>and</code>, meaning that I can either see all my branches or staging, but not both at the same time.</p>

<p>In other words, I'd like to see only commits where I'm the author AND all the commits of the branch named <code>staging</code> branch (regardless of the authors), with one single command.</p>

<p>Is there a way to achieve this ?</p>
","2","4403802","0","0"
"37801342","6462105","2016-06-14 00:55:28","23","11840","<git><merge><git-log>","Using git log to display files changed during merge","<p>I’m executing the following command:</p>

<pre><code>git log --name-only –pretty=""format:%H %s"" -- *.sql --grep=""JIRA-154""
</code></pre>

<p>which returns results in the format:</p>

<pre><code>[commitid1] [comment]
path/to/file1/file1.sql
path/to/file2/file2.sql
path/to/file3/file3.sql

[commitid2] [comment]
path/to/file2/file2.sql
path/to/file4/file4.sql
</code></pre>

<p>The output is redirected to a file and the format is exactly what I’m looking for, however merge commits are a problem. The files that have been changed as part of a merge are never listed. Instead I end up with something like the following:</p>

<pre><code>[commitid3] [merge comment]
[commitid4] [comment]
path/to/file3/file3.sql
</code></pre>

<p>I’ve obviously misunderstood something here because I expect to see the files that changed during the merge listed. Is there a way to include these files in the output?</p>
","2","6462105","0","0"
"27053909","239879","2014-11-21 04:03:35","0","34","<git><git-log>","How can I count the number of files edited per day via git log?","<p><code>git log --name-only</code> seems to help, but how do I count these up by filename?</p>

<p>It returns something like:</p>

<pre><code>commit bbd0cf6a25c742bf5e5734fa544c041052f5cf70
Merge: 0aec39a 20cabfb
Author: Adones Pitogo &lt;pitogo.adones@gmail.com&gt;
Date:   Fri Oct 31 21:06:46 2014 +0800

    Merge pull request #10 from agibson-fl/master

    Use readAsArrayBuffer() instead of deprecated readAsBinaryString().

commit 20cabfbcc42f0978ce70cdb1912c8672c0abf313
Author: agibson-fl &lt;agibson@frontlinetechnologies.com&gt;
Date:   Thu Oct 30 11:57:37 2014 -0400

    Properly annotate function

dist/angular-base64-upload.js
dist/angular-base64-upload.min.js
src/angular-base64-upload.js
</code></pre>
","0","239879","",""
"44931532","4953069","2017-07-05 16:27:13","0","75","<git><git-log>","git log usage: finding the most frequent committers for a given time period","<p>For a given sub-directory in a git repository, how can I find who are the most frequent committers for a given period of time?</p>

<p>As of now I used git shortlog as follows:</p>

<pre><code>git shortlog -sn -- path/to/subdir
</code></pre>

<p>But problem is this is giving data since beginning. I am trying to find this data for a window of time, e.g., last 1 year.</p>
","0","4953069","",""
"44945000","299080","2017-07-06 09:29:50","0","611","<git><git-log>","Ignore git log cross-branch duplicates","<p>If I perform <code>git log -g</code>, for instance, the results will include many commits containing the same content (for example, commits with the same diff but cherry picked to different branches). How can I have git log only show one of those commits and ignore others with duplicate diff content?</p>
","0","299080","0","0"
"44945546","8264082","2017-07-06 09:52:07","1","1462","<git><gerrit><git-log>","Is there any way to show remote references with git log?","<pre><code>git log --oneline
</code></pre>

<p>The above command gives me the followed results: </p>

<pre><code>5485b34 Modify: something 
ccaf2c4 Modify: another thing
85a87e8 Bug Fix: the other thing
</code></pre>

<p>But because I'm using gerrit and usually gerrit has it's change number as refs/changes/... format, I want to collect list framed as follows: </p>

<pre><code>refs/changes/85/104085/9 Modify: something
refs/changes/33/104033/9 Modify: another thing
refs/changes/83/104183/2 Bug Fix: the other thing
</code></pre>

<p>I know there is a way to obtain the mapping between commit IDs and remote references by using ""git ls-remote"". And by using ""git ls-remote"", I can make a script to obtain the above result. But is there any better and simpler way to obtain the above results? </p>
","0","8264082","0","0"
"9366960","1170116","2012-02-20 19:10:32","9","2213","<git><git-log>","Limit refs shown with git log --decorate","<p>I have 3 standard remotes for a the main repository I work in currently: a local backup, my development partner's workstation, and a hosted repository.  We have 3 or 4 branches that are active most of the time, one being master.</p>

<p>I monitor the branches on a regular basis throughout the day using:</p>

<pre><code>git log --graph --oneline --decorate -15 my-branch his-repo/his-branch master other-branch
</code></pre>

<p><code>--decorate</code> is crucial because it lets me know the state of things in regards to our very volatile development branches.  The problem is that I see <strong><em>all</em></strong> of the remote refs and <strong><em>all</em></strong> of the branches, tags, etc. in the decoration.</p>

<p>Is there any way to limit <code>--decorate</code> to only output certain refs?  Listing the refs on the command line only limits the commits shown, not the refs shown.</p>

<p>Thanks,
Mike</p>
","0","1170116","",""
"45346038","2161029","2017-07-27 09:02:24","3","1622","<git><bash><shell><xargs><git-log>","How to run command on git log output per commit using bash","<p>On our project we use git commit messages to add certain metadata to our commits. Most obvious ones are JIRA ids but there are more.
What I am trying to do is to process commit messages to extract this data and do something with it but am having trouble with how to run a script per one message and not per line.
For example here is what I am trying to do:</p>

<pre><code># Extract JIRA issue ids for last 5 commits
git log --format=format:%B --no-merges -n5 | while read line ; do echo $line | grep -oP ""(?&lt;=JIRA: )[^ ]+""; done

#Output 
456
128
756
</code></pre>

<p>this does work in this case but the problem is that using while here is run per line and not per one message of log output so grep is ran too many times. This becomes a problem when I try to do something like:</p>

<pre><code> # Extract JIRA issue id and Gerrit change id from last 5 commits
 git log --format=format:%B --no-merges -n5 | while read line ; do echo $line | grep -oP ""(?&lt;=Change-Id: )[^ ]+|(?&lt;=JIRA: )[^ ]+""; done

#Output
Ida3e220cdfa80ace5164109916fb5015d7aaaaaa
Ic4eed79f8acf5bf56f848bf543168e4ac9aaaaaa
456
I51dc621df6f54539f05053f6e036cc97a7aaaaaa
128
Ic04fa3de9b5e453358292bc7b965139707aaaaaa
756
I453a99155dacdc693ee28f248e92a6ccc8aaaaaa
</code></pre>

<p>As you can see each match from grep is printed on seperate lien but I would like to get output in the format:</p>

<p>Change-Id JIRA</p>

<p>Ida3e220cdfa80ace5164109916fb5015d7aaaaaa<br>
Ida3e220cdfa80ace5164109916fb5015d7aaaaaa 128
Ic04fa3de9b5e453358292bc7b965139707aaaaaa 756</p>

<p>Do note that some commits don't have Jira Id and this should be reflected by empty string or "" "" like shown for first commit.</p>

<p>I also tried using </p>

<pre><code># Extract JIRA ids using bash function and xargs
git log --format=format:%B --no-merges -n5 | xargs -L1 gitLogExtractJIRA
</code></pre>

<p>But this gives me the ""xargs: gitLogExtractJIRA: No such file or directory""
 error</p>

<p>I also looked into using <a href=""https://git-scm.com/docs/git-for-each-ref"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-for-each-ref</a> especially the --shell subcommand but think it is not applicable in this case since I am iterating over log messages not refs. I might be wrong on this thou since I haven't used for-each-ref much.</p>

<p>So my question is how to run a bash function (or inline group of commands) per one message of git log output and not per line?</p>
","4","2161029","",""
"45356760","2911458","2017-07-27 16:54:06","9","1095","<git><git-log>","Combine color with conditional newlines in git log output","<p>When I invoke the following command:</p>

<pre><code>git log --format=format:""%C(yellow)%h %C(blue)%s %C(green)%ad %C(reset)%an%n%n%-b""
</code></pre>

<p>I get output that looks like this:</p>

<p><a href=""https://i.stack.imgur.com/GJwJe.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/GJwJe.png"" alt=""enter image description here""></a></p>

<p>I would like the commit bodies to be dimmed, so I tried inserting the instruction <code>%C(dim)</code> at the end of my format string. However, there does not seem to be an insertion location that achieves my goal:</p>

<ul>
<li><p>Inserting <code>%C(dim)</code> after the newlines and before the <a href=""https://git-scm.com/docs/pretty-formats"" rel=""noreferrer"">(conditional newline-chomping) <code>%-b</code> command</a> correctly applies the dimming effect, but breaks conditional newline-chomping:</p>

<pre><code>git log --format=format:""%C(yellow)%h %C(blue)%s %C(green)%ad %C(reset)%an%n%n%C(dim)%-b""
</code></pre>

<p><a href=""https://i.stack.imgur.com/U8uha.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/U8uha.png"" alt=""enter image description here""></a></p></li>
<li><p>Inserting <code>%C(dim)</code> before both the newlines and the (conditional newline-chomping) <code>%-b</code> command correctly retains conditional newline-chomping, but fails to apply the dimming effect (i.e. no change from original output):</p>

<pre><code>git log --format=format:""%C(yellow)%h %C(blue)%s %C(green)%ad %C(reset)%an%C(dim)%n%n%-b""
</code></pre>

<p><a href=""https://i.stack.imgur.com/GJwJe.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/GJwJe.png"" alt=""enter image description here""></a></p></li>
</ul>

<p>Additionally, I cannot move the 'chomp' operator <code>-</code> to the color command, since that always appears to ""evaluate"" to a non-empty string (and therefore, newlines are not chomped).</p>

<p>Is there a way to achieve my goal?</p>
","0","2911458","0","0"
"45439796","3217306","2017-08-01 13:51:47","1","656","<git><glob><git-log>","Globbing in git log to show certain branches","<p>I have a project with lots of branches, and I want to log only these branches:</p>

<pre><code>foo/bar
foo/bar-baz
origin/foo/bar
origin/foo/bar-baz
</code></pre>

<p>What glob pattern do I need to do this? I've tried <code>foo/bar*</code></p>

<pre><code>git log --decorate --oneline --graph foo/bar*
</code></pre>

<p>which shows me <code>foo/bar</code> and <code>foo/bar-baz</code> only.</p>
","6","3217306","",""
"64258410","667355","2020-10-08 08:13:05","2","6269","<windows><git><git-log>","Getting ""command not found"" error message when running ""git log"" on Windows","<p>I have installed git and all the commands work properly except <code>git log</code>. When I type <code>git log</code>, this message appears:</p>
<pre><code>command not found
</code></pre>
<p>what could be the possible reason for such a strange behaviour?</p>
<hr />
<pre><code>$ git --version
git version 2.16.1.windows.4

$ which git
/mingx64/bin/git
</code></pre>
","4","667355","0","0"
"46487476","3233393","2017-09-29 11:02:15","5","956","<git><git-log>","`git log --follow --graph` skips commits","<h1>Setup</h1>

<pre><code>git version 2.11.0.windows.1
</code></pre>

<p>Here is a bash snippet to reproduce my test repository:</p>

<pre><code>git init

# Create a file
echo Hello &gt; a.txt
git add a.txt
git commit -m 'First commit'

# Change it on one branch
git checkout -b feature
echo Hi &gt; a.txt
git commit -am 'Change'

# Rename it on the other
git checkout master
git mv a.txt b.txt
git commit -m 'Move'

# Merge both changes
git merge --no-edit feature
</code></pre>

<p>At the end, <code>git log --graph --pretty=oneline --abbrev-commit</code> prints:</p>

<pre><code>*   06b5bb7 Merge branch 'feature'
|\
| * 07ccfb6 Change
* | 448ad99 Move
|/
* 31eae74 First commit
</code></pre>

<hr>

<h1>Problem</h1>

<p>Now, I want to get the full log for <code>b.txt</code> (ex-<code>b.txt</code>).<br>
<code>git log --graph --pretty=oneline --abbrev-commit --follow -- b.txt</code> prints:</p>

<pre><code>...
* | 1a07e48 Move
|/
* 5ff73f6 First commit
</code></pre>

<p>As you can see, the <code>Change</code> commit is not listed, even though it <em>did</em> modify the file.</p>

<p>I think I have tracked it down to the implicit use of <code>--topo-order</code> by <code>--graph</code>, since adding <code>--date-order</code> brings the commit back, but that might be chance.</p>

<p>Additionally, adding <code>-m</code> shows the merge commit (which is fine) and the <code>Change</code> commit, but then the merge commit is duplicated:</p>

<pre><code>*   36c80a8 (from 1a07e48) Merge branch 'feature'
|\
| | 36c80a8 (from 05116f1) Merge branch 'feature'
| * 05116f1 Change
* | 1a07e48 Move
|/
* 5ff73f6 First commit
</code></pre>

<h1>Question</h1>

<p>What am I missing to explain the weird behaviour I'm witnessing?<br>
How can I display cleanly all of the commits that changed a file, following through renames?</p>
","0","3233393","0","0"
"10593229","263268","2012-05-15 01:51:17","3","395","<git><git-branch><git-log>","How can I show the name of branches on every commit in `git log`","<p>In Gitk, showing a commit gives output like this:</p>

<pre><code>Author: ...
Committer: ...
Parent: ...auth/parser)
Parent: ... (Merge branch '...')
Child:  ...
Branches: remotes/me/foo, foo
</code></pre>

<p>Is there a way to get this kind of output in <code>git log</code>? Using <code>git log --graph</code> gives similar information, but in my repository with long-lived branches, it can take a lot of scrolling to find which branch a commit was on.</p>

<p>(A similar question to <a href=""https://stackoverflow.com/questions/1841405/how-can-i-show-the-name-of-branches-in-git-log"">How can I show the name of branches in `git log`?</a>)</p>
","0","263268","0","0"
"37833605","390161","2016-06-15 11:03:48","2","410","<git><visual-studio-2015><git-log>","How to order git history in visual studio 2015?","<p>I have git repo with long history. For some reason this history isn't ordered by date. It really bowers me. I have trouble reviewing code and figuring out what causes some problems. I see same mess in branch history as well as in file history. I checked this window in my colleagues's VS. some of them have ordered history and some have messy history. I didn't figured out what is different between theirs instalations. </p>

<p>I also checked git-log documentation and didn't find configuration for log order.</p>

<p>Result of <code>git-log</code> command ordered by commit date as well. So it's probably something in VS causes this mess.</p>

<p>How can I convince VS to show history ordered by date?</p>
","4","390161","0","0"
"54643839","10662240","2019-02-12 06:13:11","2","124","<git><format><git-log>","An alias for git's --pretty option string format","<p>I know I can set an alias for <code>git log</code> invocation with lots of parameters.</p>

<p>For example, I can use this:</p>

<p><code>git config --global alias.lg ""log --graph --pretty=format:'%h -%d %s (%cr) &lt;%an&gt;'""</code></p>

<p>to alias <code>git log --graph --pretty=format:'%h -%d %s (%cr) &lt;%an&gt;'</code> with much shorter <code>git lg</code>.</p>

<p>Is it possible to set an alias for a <code>--pretty=format:</code> string alone? So that I can type</p>

<p><code>git log --pretty=my_aliased_format</code></p>
","0","10662240","",""
"72356218","7098403","2022-05-24 01:10:11","-2","70","<git><git-log><git-history>","How can I get git history (date range) log to a file without author, date, commit message and commit hash","<p>How can I get git history (date range) log to a file <strong>without</strong> author, date, commit message and commit hash?</p>
","2","7098403","",""
"64045040","5825294","2020-09-24 10:59:02","2","4980","<git><git-diff><git-log>","What does --oneline in git diff do?","<p>In <a href=""https://stackoverflow.com/a/64040710/5825294"">this</a> answer of mine, I have kept from the question an option I didn't know of, namely <code>--oneline</code> applied to <code>git diff</code> instead of <code>git log</code>. But searching for <code>oneline</code> in <code>man git-diff</code> doesn't give any result. Still <code>git diff --oneline</code> doesn't error.</p>
<p>What is it for?</p>
","5","5825294","0","0"
"64688438","1487102","2020-11-04 22:09:47","0","164","<git><git-log><git-show>","How to show a git message body (not just the title)?","<p>I've been doing a fair amount of research and can't find this trivial functionality:</p>
<p><code>git log</code> and <code>git show</code> are only showing the headline/title of the commit message, but I'd like to see the rest of the body.</p>
<p>By body, I mean the section where 'conflicts' and 'squashed commits' are usually listed.</p>
<p>How can I view this information?</p>
<p>Thanks</p>
","2","1487102","",""
"64726927","8742533","2020-11-07 10:54:48","1","369","<github><gradle><github-actions><git-log>","Github actions, gradle. pretty=format flag for git log is not working","<p>I have a weird problem using Github’s actions. I have a Gradle task that prints release notes to file (it works perfectly fine locally). But using GitHub actions it seems like I cannot use the <code>–pretty=format:</code> flag for <code>git log</code>. For an unknown reason, it doesn’t print anything. It works when I remove this flag or when I set it to something without quotation marks. Maybe it’s a problem with escaping those characters? Nevertheless, it’s super weird.</p>
<p>And no it’s not a problem with <code>fetch-depth</code>. It is set to 0, the history is correct.</p>
<p>When I run it like that (outside from Gradle task):</p>
<pre><code>    run: |-
      git log develop --no-merges --date=short --pretty=format:&quot;%ad %an: %s&quot; v1.0.0...HEAD
</code></pre>
<p>it works as well. It only doesn’t work with the Gradle task inside Github action.</p>
<p>Example run:
<a href=""https://github.com/JakubMosakowski/ItemistEvolved/actions/runs/350396754"" rel=""nofollow noreferrer"">https://github.com/JakubMosakowski/ItemistEvolved/actions/runs/350396754</a></p>
<p>There are plenty of similar runs because I was trying everything to check where the problem is.</p>
<p>To be even more precise. This command inside the Gradle task does work:</p>
<pre><code>printf(&quot;git log develop --no-merges --date=short --pretty=oneline ${tag}...HEAD&quot;.execute().text.trim())
</code></pre>
<p>and it doesn’t:</p>
<pre><code>printf(&quot;git log develop --no-merges --date=short --pretty=\&quot;%ad %an: %s\&quot; ${getNewestTag()}...HEAD&quot;.execute().text.trim())
</code></pre>
","0","8742533","",""
"46364713","746346","2017-09-22 12:21:41","0","244","<git><git-log><git-stash>","Why does --date= affect the %gd git log format?","<pre><code>$ git stash list --format=""%gd, %cd""
stash@{0}, Fri Sep 22 11:40:25 2017 +0100
stash@{1}, Mon Sep 18 16:12:11 2017 +0100
</code></pre>

<p>Stash id's and long format dates. If I try to get short dates:</p>

<pre><code>$ git stash list --format=""%gd, %cd"" --date=short
stash@{2017-09-22}, 2017-09-22
stash@{2017-09-18}, 2017-09-18
</code></pre>

<p>Why did the stash id also change into a date? <code>%cd</code> is <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-log.html"" rel=""nofollow noreferrer"">documented</a> to respect <code>--date=</code>, but not <code>%gd</code> (and it's not supposed to show a date anyway). </p>
","0","746346","",""
"64952610","14584348","2020-11-22 09:36:10","-1","203","<git><datetime><formatting><timezone><git-log>","git log: How do I change the time zone and format of date at the same time?","<p>I use this command in Git Bash:</p>
<pre><code>git log -1 --date=local --pretty=format:'%ad' ce40c0f8f02e83892eb185aabea306ee2a3ab10e
</code></pre>
<p>I want to display the date in local time zone AND as <code>DD-MMM-YYYY HH:MM:SS</code>.</p>
<p>It seems I can either change the time zone to local (<code>--date=local</code>) or change the format (<code>--date=format:'%d %b %Y %H:%M:%S'</code>), but cannot seem to do both together.</p>
","1","14584348","",""
"65319896","1668622","2020-12-16 08:44:02","2","887","<git><branch><commit><git-log>","git log --cherry-pick A..B - what am I doing wrong?","<p>In order to find commits on branch <code>working</code> not merged/picked to <code>master</code> yet I'm running</p>
<pre><code>git log --format=&quot;%h %aN %ai %f&quot; --cherry-pick --no-merges master..working
</code></pre>
<p>as learned <a href=""https://stackoverflow.com/questions/1710894/using-git-show-all-commits-that-are-in-one-branch-but-not-the-others"">here</a>.</p>
<p>But as described <a href=""https://stackoverflow.com/questions/15807522/why-is-git-log-cherry-pick-not-removing-equivalent-commits"">here</a> I'm finding commits which are on <code>master</code> <em>and</em> <code>working</code> only varying in commit IDs due to cherry-picking.</p>
<p>Neither <code>working</code> has been merged to <code>master</code> nor vice versa.</p>
<p>Even when I manually cherry-pick a commit from <code>working</code> to <code>master</code> it will show up running the above command.</p>
<p>Acutally <code>--cherry-pick</code> seems to have no effect at all, as <code>|wc</code> show.</p>
<p>What am I doing wrong?</p>
<p><strong>Update</strong>:</p>
<p>Actually both ElpieKay and torek are right and my initial command would have worked, too. Unfortunately I did not know we're using some &quot;cherry-pickish&quot; magic I did not know about which alters commits after cherry-picking</p>
<p>.</p>
","4","1668622","0","0"
"47081606","591182","2017-11-02 17:47:40","15","5623","<git><git-log><git-cherry-pick>","Can 'git log' ignore certain commits based on commit message?","<p>I'm using <code>git log</code> in order to generate a diff between two branches. The exact command I'm using is:</p>

<pre><code>git log --left-right --graph --cherry-pick --oneline sourceBranch...targetBranch
</code></pre>

<p>What I'm wondering is if I can exclude some of the log entries based on the commit message. For example, all of the commits by our test automation team contain a certain identifier, we'll call it <strong>TEST_AUTO</strong>. Currently, the output from my diff looks like this:</p>

<pre><code>&gt;   1e31b8x Merge pull request #1225 in base/project from feature/ABCD-1111 to master
|\  
| &gt; b2f0dfx [ABCD-1111] rework help tour // fixes
| &gt; 270072x [ABCD-1111] rework help tour // merge fixes
| &gt; 98ffeax [ABCD-1111] rework help tour // merge fixes
| &gt;   ff2e25x Merge branch 'master' into feature/ABCD-1111-rework-help-tour
| |\  
| &gt; | f0daf2x [ABCD-1111] rework help tour // new menu
| &gt; | c519a2x [ABCD-1111] rework help tour
| &gt; | 6873cax [ABCD-1111] rework help tour // animations
| &gt; | 944cc7x [ABCD-1111] rework help tour // fix phone fullscreen
| &gt; | 72b3ffx [ABCD-1111] rework help tour // phone animations
| &gt; | 7f7c50x [ABCD-1111] rework help tour // base logic
| &gt; | b6dccex [ABCD-1111] rework help tour
| &gt; | a30022x [ABCD-1111] rework help tour // code clean up and new icons
&gt; | |   c0a3e1x Merge pull request #11361 in base/project from TEST_AUTO-123-bring-automation-code-to to master
|\ \ \  
| |_|/  
|/| |   
| &gt; | 9837a4x [TEST_AUTO-123] Bring Android automation code to 123.X version
| &gt; | 41b33cx Merge branch 'feature/automation' into TEST_AUTO-951-bring-automation-code-to
| &gt; |   bb53f6x Merge branch 'feature/automation' into TEST_AUTO-951-bring-automation-code-to
| |\ \  
| | &gt; | aa1a90x [TEST_AUTO-123] Bring Android automation code to 123.X version
| | &gt; |   876ee8ex Merge pull request #12261 in base/project from bugfix/TEST_AUTO-789-android-fix to feature/automation
| | |\ \ \  
| | | &gt; | | ef3fa1x [TEST_AUTO-456] fixed test_508()
| | | &gt; | | a2d352x [TEST_AUTO-456] fixed test_186 and moved to PortfolioTest
| | | &gt; | | 1880b0x [TEST_AUTO-456] small fix test_493
| | | &gt; | | facc13x [TEST_AUTO-456] fixed test_493
| | | &gt; | | 9ebce6x [TEST_AUTO-456] fix test_31734 (test_493)
| | | &gt; | | 128890x [TEST_AUTO-456] fix test_31621 (test_384) and moved to common/MediaTest
| | | &gt; | | ab64b8x [TEST_AUTO-456] fix test_498()
| | | &gt; | | 7935aax [TEST_AUTO-456] fix test_31740 (test_498) (not ready)
| | | &gt; | | ffb930x [TEST_AUTO-456]fixed test_31751 (test_508) and moved to common/SideMenuTest
| | | | &gt; |   2b810ax Merge remote-tracking branch 'remotes/origin/feature/automation' into bugfix/TEST_AUTO-789-android-fix
</code></pre>

<p>These generate a lot of log noise that I'm not interested in.</p>

<p>Ideally, I'd like to exclude any commits from the compare that contain this <strong>TEST_AUTO</strong> string. I've tried piping the above command to 'grep -v' but that just eliminates the lines that contain it (obviously) and leaves weird gaps in the tree. I want to prevent them from being included at all.</p>
","3","591182","0","0"
"28862064","1108891","2015-03-04 18:25:50","0","1062","<git><git-log>","Determine a git branch's ancestor branch","<p>I have a long running git branch. I am trying to determine its ancestor. For example, if I am on a <code>staging</code> branch that split from <code>master</code>, the following commands would be perfect:</p>

<pre><code>&gt; git log --show-ancestor-branch
master
</code></pre>

<p>or</p>

<pre><code>&gt; git log --show-branches-with-common-ancestors
master
</code></pre>

<p>What I mean by ancestor is that <code>master</code> in the following log would be an ancestor of <code>staging</code>.</p>

<pre><code>* 741c3fd (master) 
| * a8503ef (HEAD, staging) 
|/
| 
|
* bd783e3 Add simple query expressions
</code></pre>

<p>The following did not work: </p>

<pre><code>*  `git log --ancestry-path`
* ` git merge-base -a`
</code></pre>

<p>The following would work in subversion:</p>

<pre><code>svn log --stop-on-copy
</code></pre>
","1","1108891","0","0"
"65663949","1611317","2021-01-11 09:05:55","0","71","<git><git-log>","git - get commits between tags on second level (--second-parent?)","<p>I try to get all commits between two tags.</p>
<p>If the git history is:</p>
<pre><code>* A - 2.0
| \
|  * B
| /
* C
|
D  - 1.0
</code></pre>
<p>I can use <code>git log 2.0..1.0 --first-parent</code> to get commit A, C and D.</p>
<p>What would be the git command for:</p>
<pre><code>* X - 2.0
|\
| * A
| |\
| | * B
| |/
| * C
| |
| * D
|/
* Z  - 1.0
</code></pre>
<p>To also only getting A, C and D. Everything I tried so far (min/max parents) had included commit B or excluded A, C and D.</p>
","1","1611317","",""
"65664219","435129","2021-01-11 09:27:47","2","49","<git><git-branch><git-diff><git-log>","View commits (and diff) pertaining to a particular git branch","<p>Suppose I have the following git structure:</p>
<pre><code>A - B - C - D - E - F master
         \_ G - H - I branch
</code></pre>
<p><code>git checkout branch; git log</code> doesn't identify the point at which branch diverged from master.</p>
<p>What if I want to examine all changes in this branch?</p>
","0","435129","",""
"47133546","6808207","2017-11-06 09:24:41","0","108","<git><git-clone><git-diff><git-log>","get changes in git remote branch","<p>I am a tester and have limited knowledge about Git. I have cloned a project to create local repository. When I have to get changes for last 'x' days,<br> I run <code>git pull</code> followed by <code>git diff '@{ x days ago}'</code>.</p>

<p>Now I want to get changes in developers branch. So I have cloned his branch in another repository using <code>git clone -b dev_branch &lt;url&gt;</code>. How can I get his diffs for last x days?<br>
<br>
Also comment about doing the both tasks in same repository.<br>
Thanks</p>
","3","6808207","",""
"47135249","6179286","2017-11-06 10:53:25","0","56","<git><ubuntu><git-pull><git-log>","exact timestamps git pull","<p>I'm trying to retrieve a list when a <strong>git pull</strong> was made on a Ubuntu server
eg.</p>

<ul>
<li>2017-11-03 14:00:00 revision</li>
<li>2017-11-02 11:30:00 revision</li>
</ul>

<p>Is this possible?</p>

<p>I tried <strong>git log</strong> but this shows me the commits and not the date when they were pulled.</p>
","3","6179286","",""
"10987341","105428","2012-06-11 20:50:15","1","62","<git><git-submodules><githooks><git-log>","How can I get a list of all modified files for submodules with git?","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/10757091/git-list-of-all-changed-files-including-those-in-submodules"">git: list of all changed files including those in submodules</a>  </p>
</blockquote>



<p>I have a super repository that has many submodules that are regularly being updated. I have a post-receive hook setup for this super repository that does maintenance after every commit.</p>

<p>I'm trying to get a list of all modified files in a commit, which includes any files that have been modified after a submodule has been updated.</p>

<p>Here's how I do it for a repo without submodules:</p>

<p><code>git show --pretty=""format:"" --name-only HEAD | tr '\n' ' '</code></p>

<p>...which will output something like <code>testing1.html testing2.html foo.md bar.js</code>, which is the desired format (space-delimited filenames).</p>

<p>My question is, how can I get a list of <em>all</em> the modified files for a single commit, including the files that have changed in submodules?</p>
","0","105428","0","0"
"11020227","1440858","2012-06-13 17:29:34","2","358","<git-log>","How to print the corresponding parent commit hash when using git log -m --patch","<p>When using git log</p>

<pre><code>git log -m --patch
</code></pre>

<p>for a merge commit, it would produce a diff for each parent commit and specify the corresponding parent commit hash, like:</p>

<pre><code>commit c82270ac7d31f1c32b0b0d541c4c0b00fe85b4ab (from dd039905f7e2e1f74cddbb67cd0f699c443722e4)
</code></pre>

<p>But it is not convenient for parsing. </p>

<p>When I use %P in pretty format, it would give me the two parents commit hashes at the same time, like</p>

<pre><code>dd039905f7e2e1f74cddbb67cd0f699c443722e4 fdc14f48ff64d9ad8837dafb22c366bc2f
</code></pre>

<p>and I cannot distinguish which one is the patch for. How can I get the corresponding parent commit hash when using pretty format? </p>

<p>Thanks</p>
","0","1440858","",""
"66095324","11776951","2021-02-08 02:50:06","1","40","<git><git-log>","How to find a file in a git repo that was lost","<p>There was once a file in our repo that had some content we need to retrieve. There's too many logs to go one by one. So I was thinking we could run a command to list the files that were created and their commit hash. How can you do that?</p>
<ul>
<li>List all files created for every commit in a repo.</li>
<li>Include the commit hash and file name.</li>
</ul>
<p>Then I can just checkout that commit and see the file. Alternatively, if you know how to list what commits had the certain file, that would be even better. The file is <code>foo.md</code> let's say. Then I could checkout the last commit of that file.</p>
","0","11776951","",""
"11471836","433718","2012-07-13 13:50:09","5","5497","<git><git-log><jgit>","How to ""git log --follow <path>"" in JGit?  (To retrieve the full history including renames)","<p>How do I have to extend the following logCommand, to get the <code>--follow</code> option of the <code>git log</code> command working?</p>

<pre><code>Git git = new Git(myRepository);
Iterable&lt;RevCommit&gt; log = git.log().addPath(""com/mycompany/myclass.java"").call();
</code></pre>

<p>This option is implemented in jGit, but I don't know how to use it. The logCommand's methods don't appear to be useful. Thank you!</p>
","3","433718","0","0"
"29366171","340993","2015-03-31 10:16:15","1","69","<git><git-log>","Git commits appear with git log but not with git log <filepath>","<p>When I run <code>git log --name-status</code> I can see my files that were modified in my commits.
However, when I run <code>git log myfilename</code> specifying one of the filenames that appeared in the previous command some commits are not listed.</p>

<p>Why could this be?</p>
","3","340993","0","0"
"66340603","9693461","2021-02-23 20:26:38","0","26","<git><version-control><git-log>","git log what does "".../{ => Folder}/..."" mean?","<p>I was looking at a git log of a heavy branch-coordinated repo ( lots of merging and branching ) and when I ran my handy <code>git log</code> alias: <code>git log --stat --pretty=short --graph</code></p>
<p>I see this weird syntax:</p>
<pre><code>| | |  application/client/app/Admin/Templates/index.tsx                            |   2 +-
| | |  application/client/app/Awards/Templates/Create.tsx                          | 126 ++++++++++++++++++++++++++++++++++++++++++++++++

# here
| | |  application/client/app/Awards/{ =&gt; Templates}/Templates.scss                |   0
| | |  application/client/app/Awards/{ =&gt; Templates}/Templates.tsx                 |  12 ++---

| | |  application/client/app/components/DataTable/IndeterminateCheckbox/index.tsx |  10 ++--
| | |  application/client/app/components/DataTable/index.tsx                       | 258 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--------------------------------
| | |  application/client/app/components/DataTable/styles.scss                     |  96 +++++++++++++++++++++++++++++++------
| | |  application/client/app/components/DropDownMenu/DropDownMenu.scss            |  26 +++++-----
| | |  application/client/app/components/DropDownMenu/index.tsx                    |  56 +++++++++++-----------
| | |  application/client/app/components/Header/Header.scss                        |  13 +++--
| | |  application/client/app/components/Header/index.tsx                          |  65 ++++++++++++++-----------
| | |  application/client/app/components/Inputs/Inputs.scss                        |  74 ++++++++++++++++++----------
| | |  application/client/app/components/Inputs/index.tsx                          |  58 +++++++++++++---------
</code></pre>
<p>The git diff isn't any help, I think it's a sub folder replace? Not sure.</p>
<p>any ideas?</p>
","0","9693461","",""
"31744917","745903","2015-07-31 11:19:25","2","753","<git><graph><version-control><git-log>","Is there an easy way to get a git reverse log starting from a given commit?","<p>Say I have a simple history:</p>

<pre><code>A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F -&gt; G
</code></pre>

<p>When normally doing e.g. <code>git log D</code>, I get the history</p>

<pre><code>D
C
B
...
</code></pre>

<p>Is it possible to get the view in the other direction</p>

<pre><code>D
E
F
...
</code></pre>

<p>i.e. like what <code>git log --reverse -4</code> yields, but without actually needing to specify the number of commits or a particular reference in the history after <code>D</code>?</p>

<p>I'm well aware that this is generally not well-specified (because commits often have more than one child, in different branches), but in practice, often enough there <em>are</em> some commits just in a linear chain, before there is a branch point. I'd be perfectly happy if only the longest chain of unique immediate children was shown.</p>
","2","745903","",""
"14206505","988231","2013-01-08 00:34:28","3","553","<linux><git><git-log>","git command to show branch/feature name from a sha1 hash","<p>How do I get the branch/feature name from a sha1 hash on the command line?</p>

<p>Also how is this done using pretty=format syntax.  </p>

<p>I see that it's done somehow using this method </p>

<pre><code>git log --graph --full-history --all --color \  
--pretty=format:""%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s""
</code></pre>

<p>but I don't know which line is causing this. </p>
","0","988231","",""
"49038908","7449489","2018-02-28 21:29:58","3","549","<git><git-commit><git-log>","'git log' does not match up with 'git log tag..'","<p>I've always assumed that 'git log' is the source of all truth, showing things truly chronologically. But I've run into a contradiction with the git log range option. I believed that the 'tag..' option would give me everything between a tag and HEAD on the specific branch I'm on. </p>

<p>For example, I use <code>git log --oneline --decorate</code> and get</p>

<pre><code>df43779 (HEAD -&gt; myBranch) commit o
5aeb672 commit n
34cc390 (tag: myTag) commit k
060e7ee commit i
7b6607a commit f
08a3fea commit d
467aea3 commit b
aa4c5dd commit a
</code></pre>

<p>And I would expect that when I do <code>git log myTag.. --oneline --decorate</code> I would get</p>

<pre><code>af43779 (HEAD -&gt; myBranch) commit o
5aeb672 commit n
</code></pre>

<p>However, when I run <code>git log myTag.. --oneline --decorate</code> I am getting this instead:</p>

<pre><code>df43779 (HEAD -&gt; myBranch) commit o
5aeb672 commit n
060e7ee commit i
08a3fea commit d
</code></pre>

<p>Assuming <code>git log</code> is telling the truth, what are some reasons why my range command might be giving me commits that are out of my specified commit range?</p>

<p>I know some more information might be useful to answer this question specifically, such as commit times and information on branch complexity. But I guess what I really want to know is more theoretical: does the git log display things in a true chronological fashion or is it not as simple as it seems? And is the 'tag..' option doing something other than my simple explanation of what it did? What are some reasons why the examples didn't match up as I thought? </p>

<p>In other words, what log is the ""true log"" and why?</p>
","2","7449489","",""
"31758311","2829676","2015-08-01 04:41:17","0","137","<git><git-log><commit-message>","git log displays only a part of the commit messages","<p>The git log command displays only a part (upto a perticular limit of innitial characters ) of the original commit message. But I want to display the whole long log message on the console. How to do it?</p>
","0","2829676","",""
"55104067","6076028","2019-03-11 14:25:27","3","859","<git><git-log>","How to override git log --format=oneline actual format?","<p>I have hard issue to rule out (which I do not want to bother you). To rule that issue out, I have found that on my failing system the command</p>

<pre><code>$ git log --pretty=oneline
</code></pre>

<p>is equivalent to: </p>

<pre><code>$ git log --pretty=format:%H%x20%s
</code></pre>

<p>This makes the long hash output. At the same time</p>

<pre><code>$ git log --oneline
</code></pre>

<p>makes short hash output. Which is the desired output.</p>

<p>On the not failing system the --pretty=oneline format is equivalent to:</p>

<pre><code>$ git log --pretty=format:%h%x20%s
</code></pre>

<p>This makes short hash output.</p>

<p>I have been looking how to override the oneline configuration in git and it seems that the oneline is hard coded, i.e. I can not change the format with:</p>

<pre><code>$ git config --global pretty.oneline %h%x20%s
</code></pre>

<p>I can make different pretty format</p>

<pre><code>$ git config --global pretty.myline %h%x20%s
</code></pre>

<p>and it will show nicely the short hash with</p>

<pre><code>$ git log --pretty=myline
</code></pre>

<p>The trouble is that I want to rule out the issue dependence to exact log command hash printout length. I can not use different command like</p>

<pre><code>$ git log --pretty=format:%h%x20%s
</code></pre>

<p>Is there a way to override the pretty formats like oneline? </p>
","3","6076028","",""
"55122434","1518100","2019-03-12 13:18:52","2","7260","<git><push-notification><git-push><git-log>","git get force push history","<p>This question may be duplicate but I didn't find an exactly same one.</p>

<p>In our QA team's git repository I often find the test cases I added before was lost. and from the main branch's histroy I cannot find my commit anymore. </p>

<p>The root cause was once found when I compare my personal branch's log and the main branch's log, and it was someone's force push, and the guy admitted that he's not very familiar with git merge but hurried to push so used force option.</p>

<p>But what if there's no such branch that backed up these commit history? and every team member has pulled after some days so that commit history disappears forever.</p>

<p>And even if there's such a backup branch, it is very time consuming to compare and get to know who did the force push.</p>

<p>Is there some ways to get the force push log? please note as a normal employee I'm not the owner/admin of the git server, but I care about my commits and want the ones who delete them to be warned.</p>
","5","1518100","0","0"
"55219394","10755836","2019-03-18 10:38:31","1","73","<git><git-log>","Explanation of commit line in a git log entry","<p>Sometimes I see a lot of branching information when I call a <code>git log</code> on my repo. For example:</p>

<pre><code>commit COMMIT_HASH (HEAD -&gt; CURRENT_BRANCH, tag: A_TAG, ANOTHER_BRANCH, ANOTHER_BRANCH)
Author: AUTHOR_NAME
Date: DATE

    LOG MESSAGE
</code></pre>

<p>My question is about part in the first line of the message. After the <code>COMMIT_HASH</code> theres some information about what I believe is some kind history of the branch. In honesty, I did not go through the whole description of <code>git log</code>; however, I could not find the description of its output format. An explanation or a link to the information would be appreciated.</p>
","3","10755836","",""
"55284565","3095866","2019-03-21 15:59:45","1","652","<windows><git><git-log>","Get first line by git log with a single command on windows","<p>Seems to be pretty simple question that drives me crazy already. Trying get the first line from the commit list that I've got by following command:</p>

<blockquote>
  <p>E:\Repos\reports>git log --oneline --reverse
  origin/master..feature/a123</p>
</blockquote>

<p>Getting following output</p>

<pre><code>d8c38ac Dummy change to invoke deploy
aaca9eb (HEAD -&gt; feature/a123, origin/feature/a123) Add transation isolation
</code></pre>

<p>Then trying to do</p>

<blockquote>
  <p>E:\Repos\reports>git log --oneline --reverse
  origin/master..feature/a123 -n 1</p>
</blockquote>

<p>and doesn't matter do I use <code>--reverse</code> or not, I'm always getting <code>aaca9eb</code> commit</p>
","0","3095866","",""
"55385835","321973","2019-03-27 20:23:23","1","37","<git><branch><git-log>","How to get only git revisions that are branch heads?","<p>Given a history such as</p>

<pre><code>commit         | ref
---------------+------------------------------
3ad2c1         | master
b34b14         |
afeg41         | origin/merge-requests/421
1fea34         |
6422bc         |
15fcda         | origin/merge-requests/152
</code></pre>

<p>How can I can get a list of only the named refs, i.e. <code>master, origin/merge-requests/{421,152}</code> between two given commits?</p>
","2","321973","0","0"
"36721926","73955","2016-04-19 14:49:57","0","1025","<git><git-log>","Show merge parents in git log when using pretty format string","<p>Git log <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow"">documentation</a> says:</p>

<blockquote>
  <p>If the commit is a merge, and if the pretty-format is not oneline, email or raw, an additional line is inserted before the Author: line. This line begins with ""Merge: "" and the sha1s of ancestral commits are printed, separated by spaces. </p>
</blockquote>

<p>Buy I'm using format.pretty in my git global config, and I don't see the ""Merge line"".</p>

<p>I could emulate it with the %p (or %P) parameters shown in the <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow"">git-log documentation</a>:</p>

<blockquote>
  <p>%P: parent hashes</p>
  
  <p>%p: abbreviated parent hashes</p>
</blockquote>

<p>But that shows an empty ""Merge:"" line if the commit is not a merge commit.</p>

<p>Is there a way to emulate the standard log behavior about merge commits parents while using a pretty format string?</p>
","2","73955","",""
"36734446","5163170","2016-04-20 05:18:14","1","639","<git><github><git-log>","How can I recover my reflog list so that the entire list appears in ""git log"" as well?","<p>I am new to git, and I was trying to push something to my remote repository and when it did not work I reset my git and now I can see that my code is not gone, (that is my very last well-working version of my code is still there) which is a relief. But when I run ""git log"" it only shows the last commit. I kinda liked my history of the commits, as I move forward in my project I want to be able to have a look at all my previous codes as they evolved and progressed. So when I do ""git reflog"" I can see them, but when I do ""git log"" I can only see the last one. </p>

<p>So, in my case I HAVE NOT LOST anything, my last commit is there, and my code is up to date to its last version, only I cannot see the history of my commits. I want to see the history of my commits as before. that's it. </p>

<p>Anyone can help? </p>

<p>P. S. please be quick in helping me as I have read the reflog gets cleaned up every 90 days! :( </p>

<p>Cheers,</p>
","6","5163170","",""
"36740231","76701","2016-04-20 09:58:26","8","333","<git><version-control><git-log><git-bisect><git-blame>","Git: Equivalent of `--full-history` for `git bisect` and `git blame`","<p>I've been using Git heavily for about 7 years. A few days ago I found a behavior that surprised me. I found <code>git log</code>, <code>git blame</code> and <code>git bisect</code> to exhibit this weird behavior. <a href=""http://www.syntevo.com/smartgithg/"">A friend</a> let me know about the <code>--full-history</code> flag to <code>git log</code> that solved my problem. I want to know, for my own education, whether there is an equivalent fix for <code>git blame</code> and <code>git bisect</code>.</p>

<p>Feel free to see the problem for yourself with this repo: <a href=""https://dl.dropboxusercontent.com/u/1927707/problematic_repo.7z"">https://dl.dropboxusercontent.com/u/1927707/problematic_repo.7z</a></p>

<p>Here is its log:</p>

<pre><code>$ git log  --graph
* commit b7a8d7aa001d06eb7491ab5fb447a8dd3aa421a8
| Author: Ram Rachum &lt;ram@rachum.com&gt;
| Date:   Tue Apr 19 17:45:01 2016 +0300
|
|     adding more to some-file
|
*   commit 0aa833916e908ea93902a6c4c227f9a884a1bcef
|\  Merge: 2413945 3068c7d
| | Author: Ram Rachum &lt;ram@rachum.com&gt;
| | Date:   Tue Apr 19 17:44:31 2016 +0300
| |
| |     Merge branch 'master' into development
| |
| * commit 3068c7d2548f1798b6840f73b13a649937339f28
| | Author: Ram Rachum &lt;ram@rachum.com&gt;
| | Date:   Tue Apr 19 16:02:27 2016 +0300
| |
| |     Adding sugar to coffee
| |
* | commit 24139451ab954b1f0a9ef616775a3dba0ac81669
|/  Author: Ram Rachum &lt;ram@rachum.com&gt;
|   Date:   Tue Apr 19 16:01:28 2016 +0300
|
|       Creating some-file
|
* commit cf02fbbc40104cd02eea4c7c6f134ef1fd7b5661
  Author: Ram Rachum &lt;ram@rachum.com&gt;
  Date:   Tue Apr 19 16:00:47 2016 +0300

      Create coffee
</code></pre>

<p>In the very first commit, the file <code>coffee</code> was added. In the commit <code>3068c7d</code>, I added a line ""sugar"" to the <code>coffee</code> file. But then I merged this branch into the <code>development</code> branch, and in that merge, a mistake was made and the ""sugar"" line was removed, leaving <code>coffee</code> empty. Then another commit <code>b7a8d7a</code>, making an unrelated change, was added for good measure. </p>

<p>Now I'm looking at my coffee, and finding there's no sugar in it. I distinctly remember adding sugar to my coffee. I run <code>git log coffee</code>, and get this output:</p>

<pre><code>$ git log coffee
commit cf02fbbc40104cd02eea4c7c6f134ef1fd7b5661
Author: Ram Rachum &lt;ram@rachum.com&gt;
Date:   Tue Apr 19 16:00:47 2016 +0300

    Create coffee
</code></pre>

<p>That's it. <code>git log</code> is showing neither my original commit that added the sugar, nor the merge that removed it. Two very relevant commits that are missing. </p>

<p>I was frustrated for about an hour by this problem, because it happened in a huge enterprise repo, where commits are much harder to find manually.</p>

<p>I also tried using <code>git bisect</code> and <code>git blame</code> to pin down the two commits, but both of these tools ignored the two commits. <code>git bisect</code> pointed me to the wrong commit after I finished doing all the <code>git bisect bad</code> and <code>git bisect good</code> actions.</p>

<p>Then, as I said in the beginning, a friend pointed me towards the <code>--full-history</code> flag:</p>

<pre><code>$ git log --full-history --graph coffee                
*   commit 0aa833916e908ea93902a6c4c227f9a884a1bcef    
|\  Merge: cf02fbb 3068c7d                             
| | Author: Ram Rachum &lt;ram@rachum.com&gt;                
| | Date:   Tue Apr 19 17:44:31 2016 +0300             
| |                                                    
| |     Merge branch 'master' into development         
| |                                                    
| * commit 3068c7d2548f1798b6840f73b13a649937339f28    
|/  Author: Ram Rachum &lt;ram@rachum.com&gt;                
|   Date:   Tue Apr 19 16:02:27 2016 +0300             
|                                                      
|       Adding sugar to coffee                         
|                                                      
* commit cf02fbbc40104cd02eea4c7c6f134ef1fd7b5661      
  Author: Ram Rachum &lt;ram@rachum.com&gt;                  
  Date:   Tue Apr 19 16:00:47 2016 +0300               

      Create coffee                                    
</code></pre>

<p>This makes me happy because it shows the two relevant commits, the one adding sugar and the merge that removed it. So my problem is solved. <strong>But I really wish I could know how to make <code>git bisect</code> and <code>git blame</code> behave as well.</strong> Does anyone happen to know?</p>
","4","76701","0","0"
"36774102","4069768","2016-04-21 15:26:34","0","25","<java><linux><git-log>","git -C /var/git/plexus.git log > Test.txt","<p>Here is my problem: I want to create a git log file staying outside the repository folder and save it as <code>TestfromShell.txt</code>.</p>

<p>I have git command</p>

<pre><code>git -C /var/git/plexus.git log &gt; Test.txt
</code></pre>

<p>for linux machine. I want to execute this command from Java, but every time I execute this command from Java, it says:</p>

<pre><code>Command to be executed :git -C /var/git/plexus.git log &gt; Test.txt
Error:
fatal: ambiguous argument '&gt;': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'
</code></pre>

<p>Java code:</p>

<pre><code>command=""git -C /var/git/plexus.git log &gt; Test.txt""; 
p = Runtime.getRuntime().exec(command);
</code></pre>
","4","4069768","",""
"52939727","3338893","2018-10-23 01:10:01","1","123","<git><git-log><git-subtree><git-mv>","How to move multiple directories from another repo and preserve git log directory behavior?","<p>I've read <em>several</em> threads on moving directories between git repositories, and the one I've settled on using is <a href=""https://stackoverflow.com/questions/359424/detach-move-subdirectory-into-separate-git-repository/17864475#17864475"">this one</a>, which makes use of <code>git subtree</code>.</p>

<p>Following the steps, everything seems to work well, but the problem comes at the end.</p>

<p>I'm left with a new repo where all of the contents of the directory I wanted to move is in the root. If I do a <code>git mv</code> of the contents into the subdirectory I want, when I do a <code>git log -- sub\dir\1</code>, the history is NOT viewable from there. The history is only visible from the root.</p>

<p>I plan to move multiple directories in this fashion, so it dampers things a bit because now I have to use <code>git log --follow</code> on every single file I look up the history for.</p>

<p>Is there another way, or something that I am doing wrong, so that I can preserve the history under the right subdirectory? If it helps, the folder structure I want in my new repo is actually the same as the one in my old repo (well, at least before the <code>git subtree</code> command).</p>

<p>To be explicit, here is what I am starting with:</p>

<pre><code>\old-repo
   \sub\dir\1
   \sub\dir\2
   \sub\dir\3
</code></pre>

<p>Here is where I am now:</p>

<pre><code>\new-repo (subdir1 history viewable from here)
   \sub\dir\1 (subdir1 history is NOT viewable, besides the most recent git mv)
</code></pre>

<p>Here is what I actually want:</p>

<pre><code>\new-repo
   \sub\dir\1 (subdir1 history viewable from here)
   \sub\dir\2 (subdir2 history viewable from here)
   \sub\dir\3 (subdir3 history viewable from here)
</code></pre>
","1","3338893","0","0"
"53034425","3710611","2018-10-28 17:45:03","5","2495","<json><git><cmd><git-log>","git log --pretty=format windows strange behavior","<p>I reduce the problem to its lowest terms.
Under linux a git command like this:</p>

<pre><code>git log --pretty=format:{""commit"":""%H""}
</code></pre>

<p>gives me a valid json element, so something like:</p>

<pre><code>{""commit"":""20cafdecc9898113ac6215ae70cd7622dc2cae3b""}
</code></pre>

<p>under windows I obtain a not-valid json element, because in some way windows seems to remove the double-quotes elements and I obtain:</p>

<pre><code>{commit:20cafdecc9898113ac6215ae70cd7622dc2cae3b}
</code></pre>

<p>Do you know why, or how can I fix it making it work under both os?
Thank you!</p>
","0","3710611","0","0"
"37005082","3472757","2016-05-03 13:08:48","0","1213","<git><git-log>","How to include branch name in git log command results","<p>I am listing commits that have been changing specific file with command</p>

<pre><code>$ git log --all --graph --abbrev-commit --format=fuller  --follow &lt;path_to_filename&gt;
</code></pre>

<p>It displays a nicely formatted commits that include provided file name. However I had trouble finding the commit. I used </p>

<pre><code>$ git branch --contains 10264d5
</code></pre>

<p>to find branch names that contain specific commit. </p>

<p>Is there a way to include branch name in <code>git log</code> command? I tried to use command recommended in <a href=""https://stackoverflow.com/a/13955891/3472757"">this answer</a> but it doesn't work with --filename argument. </p>
","2","3472757","",""
"53044157","3710611","2018-10-29 11:05:53","2","973","<git><cmd><git-log>","git space between pretty format placeholders","<p>For some reason (<a href=""https://stackoverflow.com/questions/53034425/git-log-pretty-format-windows-strange-behavior"">this reason</a>) I will probably have to run a git command like this:</p>

<pre><code>git log --pretty=format:{\""author\"":\""%aE &lt;%aD&gt;\""}
</code></pre>

<p>but it doesn't work and I obtain this error information:</p>

<blockquote>
  <p><code>fatal: ambiguous argument '&lt;%aD&gt;""}': unknown revision or path not in</code>
  <code>the working tree.</code></p>
</blockquote>

<p>but the same command whithout the space works well:</p>

<pre><code>git log --pretty=format:{\""author\"":\""%aE&lt;%aD&gt;\""}
</code></pre>

<p>Do you know how to fix this or how to insert a space ""programmatically"" with another placeholder?
Thanks!</p>
","1","3710611","",""
"53107027","151312","2018-11-01 18:13:24","10","11234","<git><diff><git-diff><git-log>","How to get a list of different commits between two git branches?","<p>I want to see a list of only non-common commits between two branches.</p>
<h1>How can I get output like this?</h1>
<p>Basically a <code>git diff -y master new-feature</code> summary between two branches:</p>
<pre><code>              master                               new-feature
-------------------------------------|--------------------------------------
xxx - Jan 1st 2018 - initial commit  | xxx - Jan 1st 2018 - initial commit
xxx - Feb 1st 2018 - fix a bug       | xxx - Feb 1st 2018 - fix a bug
                                     &gt; xxx - Mar 1st 2018 - WIP almost done
xxx - Apr 1st 2018 - fix another bug | xxx - Apr 1st 2018 - fix another bug
xxx - May 1st 2018 - fix more bugs   | xxx - May 1st 2018 - fix more bugs
                                     &gt; xxx - Jun 1st 2018 - Ready to merge!
xxx - Jul 1st 2018 - latest patches  &lt; 
</code></pre>
<br>
<p><strong>Solution</strong>: I don't know how to make heads or tails of it, but I <em>think</em> <code>git log --graph</code> accomplishes this, just with a very confusing visual style:</p>
<pre><code>git log --left-right --graph --cherry-pick --oneline master
</code></pre>
<br>
<br>
<br>
<br>
<br>
<h1>Or this?</h1>
<p>Better yet, <code>git diff -y --suppress-common-lines master new-feature</code> is what I really want:</p>
<pre><code>              master                               new-feature
-------------------------------------|--------------------------------------
                                     &gt; xxx - Mar 1st 2018 - WIP almost done
                                     &gt; xxx - Jun 1st 2018 - Ready to merge!
xxx - Jul 1st 2018 - latest patches  &lt;
</code></pre>
<br>
<p><strong>Solution:</strong> You probably can't with git alone but, as per <a href=""https://stackoverflow.com/a/53109239/151312"">@torek's answer</a>, you can get <em>mostly</em> there with <code>git rev-list</code>:</p>
<pre><code>git rev-list --left-right master...new-feature

&gt;eb57618eed654685a7999da847628dc5eb27313f
&gt;0da0196ab24542a1a1697b1c0c5efeef6d09e027
&gt;9452f57d97e5fc86e773e7a9fca488b7a0d44a0c
&lt;4fc12fe25a127f8f0dfddf7625c22656c7b2c7c1
&lt;9c0058dcabacfc6560f4fbaf73ea55dd70d27036
&gt;5117fcd041793898683f9469aac00337e9fadd8b
</code></pre>
<br>
<br>
<br>
<br>
<br>
<h1>Or even just this?</h1>
<p>And more critical than that, a <code>git diff --right-only master new-feature</code> style view would get the job done:</p>
<pre><code>     commits only in new-feature
-------------------------------------
xxx - Mar 1st 2018 - WIP almost done
xxx - Jun 1st 2018 - Ready to merge!
</code></pre>
<p>Which, of course, could be reversed to get the opposite view <code>git diff --right-only new-feature master</code></p>
<pre><code>       commits only in master               
-------------------------------------
xxx - Jul 1st 2018 - latest patches 
</code></pre>
<br>
<p><strong>Solution</strong>: As <a href=""https://stackoverflow.com/a/53107520/151312"">@brentjanderson points out</a>, <code>git log main..new-feature</code> and <code>git cherry -v main</code> both do this:</p>
<pre><code>git cherry -v main

+ c00335cd93898683f9469aafad8a8476227b117f WIP do things
+ f5c86e777d97e5f3e7a9fca488b79a0d44ac9452 WIP do more
+ 0ef6ddda576180196ab7b1c0c57eefe009e027dc Finished!
</code></pre>
<p>as well as</p>
<pre><code>git log master..new-feature --format=&quot;%h - %ad - %s&quot; --date=format:'%b %d %Y'

c00335cd - Jan 01 2018 - WIP do things
f5c86e77 - Feb 01 2018 - WIP do more
0ef6ddda - Mar 01 2018 - Finished!
</code></pre>
<br>
<br>
<p>P.S. I have tried <code>git checkout new-feature; git log --left-right --graph --cherry-pick --oneline master</code> before, but I can't make heads or tales (or tails) of the output. Actually, on second thought, I bet taking the output, turning it sideways, and playing it as excitebike map would make a good tale of it. Hmm...</p>
","0","151312","0","0"
"37142920","508194","2016-05-10 15:29:11","2","254","<git><git-log>","git log -S does not show anything","<p>I've used <code>git log -S</code> many times with great success but this time, it does not show anything.<br>
I'm looking for the commit that introduced <code>pagesNum</code>.</p>

<p>Here is what I do:</p>

<pre><code>$ git status
On branch master
nothing to commit, working directory clean
$ git grep pagesNum
resources/locales/en.json:    ""search-page"": ""{pagesNum} Select..."",
$ git log -SpagesNum
$ git log -S""pagesNum""
$ git log -S""pagesNum"" --all
$
</code></pre>

<p>How is it possible that <code>git log</code> does not show anything??</p>
","0","508194","",""
"53207325","4818802","2018-11-08 12:00:26","0","29","<git><git-log>","How to generate a tree of commits relations from a set of git patches?","<p>I have a set of patches that apply to an old parent in a repo, I would like to generate a tree that represents time/dependency relationship between these patches.</p>

<p>For a directory containing such files:</p>

<pre><code>0001-add-foo.patch
0002-add-bar.patch
0003-fix-bar.patch
0004-fix-foo.patch
0005-repair-x.patch
</code></pre>

<p>Make something like this:</p>

<pre><code>├*    sha...    commit msg...
├─┬*  sha...    commit msg...
│ ├*  sha...    commit msg...
├─┼*  sha...    commit msg...
│ └*  sha...    commit msg...
├*    sha...    commit msg...
└*    sha...    commit msg...
</code></pre>

<p>I can not guuarantee that patches have no conflicts, but I do know that all patches apply to some specific parent commit in the repo or to other patches</p>
","0","4818802","",""
"37898232","3986708","2016-06-18 14:47:10","2","184","<git><content-management-system><git-log><git-config><git-show>","Make different `pretty` settings for git-log and git-show","<p>I have this setting in my <code>.gitconfig</code>:</p>

<pre><code>[format]
    pretty = oneline
</code></pre>

<p>Which nicely formats my output of <code>git-log</code>. However it also changes the output of <code>git-show</code> (and <code>git-status</code>), which annoys me, because when I use <code>git-show</code>, I usually want to see more detailed output than when I'm using <code>git-log</code>.</p>

<p>Basically I want the default <code>pretty</code> setting of <code>git-show</code> to be different than the default <code>pretty</code> setting of <code>git-log</code>. Is this somehow possibly?</p>
","0","3986708","0","0"
"70670826","2279385","2022-01-11 17:15:54","1","589","<git><version-control><git-branch><git-log>","how to list all 'active' branches in git containing unmerged commits","<p>I'm struggling to make sense of the history of a couple of very large repositories that have hundreds of (old) branches which never have been deleted (even though work on most of these branches is 'done').</p>
<p>I'm trying to find a way to generate a list of branches that</p>
<ul>
<li><strong>contain commits after the branch was created ('not empty')</strong></li>
<li><strong>have not been merged into another branch</strong></li>
</ul>
<p>If my assumption is correct, this should return a list of branches that contain unmerged/active code - everything else is safe to delete.</p>
<p>A nice gimmick would be to to visualize this via <code>git log --graph</code> - only displaying the 'current working tree', going back only to the first commit that's present in all of the 'currently active branches'.</p>
<p>Any suggestions/help is highly appreciated!</p>
","0","2279385","",""
"70744333","12948485","2022-01-17 16:12:30","0","83","<git><git-log>","How can i extend my git log command to get desired output","<p>how can I extend the following command so that the following desired output appears?</p>
<pre><code>git log --pretty=oneline --no-abbrev-commit
</code></pre>
<p>Output:</p>
<pre><code>fcdb58d185039bd732e877a3cae6485608a39e70 (HEAD -&gt; master, origin/master, origin/HEAD) Merge pull &gt; request #42413 from bioothod:export_golang_functions_ma ster
1cc66e060d7ec25c89807065d453f20ab46ca93e Temporarily disable xla_compiler_test.
41f429e7b5e8393f3cddd6f2b53b148d19874d44 [XLA:SPMD] Fix bug in partial replicate resharding.
</code></pre>
<p>desired Output:</p>
<pre><code> tag_version,commit-id, commit-message, author_email
</code></pre>
","2","12948485","",""
"53809600","424957","2018-12-17 05:49:57","0","2290","<git><git-log>","How to commit date in ""git log --all --graph --oneline --simplify-by-decoration""","<p>I use <code>git log --all --graph --oneline --simplify-by-decoration</code> to show large git commit history, but there is no commit date, what can add date?</p>
","0","424957","",""
"71040611","9157799","2022-02-08 20:41:18","2","217","<bash><git><git-log>","git log format: How to remove leading space from %d (ref names) placeholder?","<p>Currently, I have this setting:</p>
<pre class=""lang-sh prettyprint-override""><code>format='%C(bold blue)%s'           # Commit subject
format+='%C(auto)%d%n'             # (HEAD -&gt; master, origin/master)\n
format+='%C(yellow)%h%C(reset) '   # 4ae4a86
format+='%an, '                    # John Doe,
format+='%C(magenta)%ar%C(reset) ' # 3 days ago
format+='at %C(cyan)%ad%n'         # at 14:17\n   (--date=format:%H:%M)
format+='%b'                       # Commit body
alias gl=&quot;git log --graph --all --pretty='$format' --date=format:%H:%M&quot;
unset format
</code></pre>
<p>Which gives this:</p>
<p><a href=""https://i.stack.imgur.com/Epl5r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Epl5r.png"" alt=""current git log format"" /></a></p>
<p>Like <code>git log --graph --oneline --all</code>:</p>
<p><a href=""https://i.stack.imgur.com/fCKY1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fCKY1.png"" alt=""git log --graph --oneline --all"" /></a></p>
<p>I want to swap the <code>%d</code> (ref names) with <code>%s</code> (subject):</p>
<pre class=""lang-sh prettyprint-override""><code>format='%C(auto)%d '               # (HEAD -&gt; master, origin/master)
format+='%C(bold blue)%s%n'        # Commit subject\n
</code></pre>
<p>But it gives a leading space:</p>
<p><a href=""https://i.stack.imgur.com/ooWlw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ooWlw.png"" alt=""first attempt"" /></a></p>
<p>As an alternative to <code>%d</code>, there's <a href=""https://git-scm.com/docs/git-log#Documentation/git-log.txt-emDem"" rel=""nofollow noreferrer""><code>%D</code>, which removes the leading space <strong>and</strong> the parantheses</a>. So I replaced <code>%d</code> with <code>%D</code> and wrap it in parentheses:</p>
<pre class=""lang-sh prettyprint-override""><code>format='%C(auto)(%D) '             # (HEAD -&gt; master, origin/master)
</code></pre>
<p>But now it looks like this:</p>
<p><a href=""https://i.stack.imgur.com/EEt1V.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/EEt1V.png"" alt=""latest attempt"" /></a></p>
<p>So, how to remove the leading space from <code>%d</code> while still retaining the parentheses?</p>
","0","9157799","",""
"49792793","196463","2018-04-12 09:22:55","1","641","<jgit><git-log>","How do I get ""git log --full-history [file]"" in jgit","<p>Specifically, I want to get a log that includes all merges that affect a file - it seems that for my repo, at the commandline, <code>git log [file]</code> doesn't show the merge, but <code>git log --full-history [file]</code> does. </p>

<p>(I can also see it in <code>git log -m --follow [file]</code> but not if I just specify <code>-m</code> or <code>--follow</code> alone, bizarrely. Something to do with merging a revert? I'm not sure.  The sequence of commits is:</p>

<ul>
<li>The file was changed on a branch, by reverting an old commit</li>
<li>A PR was raised on github.com and merged</li>
</ul>

<p>The file change shows up in all the logs - the merge doesn't)</p>

<p>JGit <code>LogCommand</code> with a <code>addPath</code> filter seems to mimic what git does - it shows me the commits on the file, but not the merge.</p>
","1","196463","",""
"67430697","6012105","2021-05-07 07:32:46","0","42","<git><git-diff><git-log>","git diff/log retrieve also merged commits","<p>given the following schema where an hotfix (D) released into master is merged back into test branch we need to found a way , with a diff between test and master, to get (B), (C) and also (D3).</p>
<pre><code>hotfix      /------------D
           /              \
master ---A----------------D2--------
             \              \
test          \----B----C----D3------
</code></pre>
<p>every git diff (bot 2/3 dots ) would always return B and C but not D3 so we ended with a git log sequence:</p>
<p>checkout test :</p>
<pre><code>git log --pretty=format: --name-only HEAD...$( git log --format=%H origin/master..HEAD | tail -1 )^ | sort -u -k1,1
</code></pre>
<p>the idea is to retrieve all the commit since the common anchestor ( B, C, D3 ) and retrieve each resource changed.
That's &quot;seems&quot; to work but we maybe there's a better way to accomplish our task.</p>
<p>This approach has quite drawbacks:</p>
<ul>
<li>we loose control over diff filters : we also need to remove from the retrieve any deleted resource</li>
<li>every &quot;reverted&quot; resource will be retrieved even if unchanged</li>
</ul>
<p>Is there a better solution?</p>
<hr />
<p>Try to better explain the problem</p>
<p>Requirements : generate a deployment package with changed resource between master and test. Resources must be retrieved, packaged and installed into multiple environments.</p>
<p>T0 : git diff master...test retrieve every resource from C, B. Bundle with resources is then installed into ENV1</p>
<pre><code>hotfix      
           
master ---A--------------
             \             
test          \----B----C
</code></pre>
<p>T2 : git diff master...test retrieve every resource from C, B but not D3. Bundle will not contains D3 resources and will not keep ENV1 updated.</p>
<pre><code>hotfix      /------------D
           /              \
master ---A----------------D2--------
             \              \
test          \----B----C----D3------
</code></pre>
<p>The statement must retrieve the resources that are on test and not on master but also the resources that are merged back from master to keep ENV1 updated.
The only way to align ENV1 is from commit/event on test</p>
<p>Thanks in advance</p>
","0","6012105","",""
"67520665","7302671","2021-05-13 14:06:15","0","58","<git><commit><checkout><git-log>","Understanding of ""git checkout"" working with local repo","<p>Let's assume I have a repo with file <code>A.txt</code>
In remote repo with some commit-id this file contains string <code>&quot;Hello, World!&quot;</code>, but I want to clone it to my local machine and change this string to <code>&quot;Goodbye, World!&quot;</code></p>
<p>After <code>git clone</code> and <code>git commit -m &quot;Hello to Goodbye&quot;</code> I suddenly understand that this is not what I really want to do and trying to return my <code>&quot;Hello, World!&quot;</code></p>
<p>After doing <code>git checkout -b stable_version &lt;commit-id&gt;</code> I've got message about 'detached HEAD' state but there are no visible changes for <code>A.txt</code> file.</p>
<p>So my question is what exactly should I do for rolling back to <code>&quot;Hello, World!&quot;</code>?</p>
","2","7302671","",""
"67590215","257924","2021-05-18 16:22:21","3","761","<git><date><command-line-arguments><git-log>","How to use git log --since to produce reliable results","<p>I need to run <code>git log</code> to show all commits after a specific date and time, and not leave out any commits, and <strong>without</strong> running <code>git log</code> to show <em>all</em> commits, as the latter is too slow (because this should work within git IMO).</p>
<p>However, <strong>before</strong> you mark this as a duplicate, consider I've read, as carefully as I can, through all of the following:</p>
<ol>
<li><a href=""https://stackoverflow.com/questions/19742345/what-is-the-format-for-date-parameter-of-git-commit/19742762#19742762"">What is the format for --date parameter of git commit</a></li>
<li><a href=""https://stackoverflow.com/questions/45405844/git-log-since-date-options"">git log --since=&lt;date&gt; options</a></li>
<li><a href=""https://stackoverflow.com/questions/18910305/strange-behavior-from-git-log-since?noredirect=1&amp;lq=1"">Strange behavior from git log --since</a></li>
<li><a href=""https://stackoverflow.com/questions/14618022/how-does-git-log-since-count"">How does git log --since count?</a></li>
</ol>
<p>This is what I tried:</p>
<pre><code>$ git --version
git version 2.31.1
$ date
Tue May 18 08:55:45 PDT 2021
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='2021-04-01' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='2021-04-01 00:00' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='2021-04-01 00:00:00' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='2021-04-01T00:00:00' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='1 week ago' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='2 weeks ago' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='3 weeks ago' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='4 weeks ago' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' --since='666 weeks ago' | grep 2021-04- | tail -1
2021-04-23 11:51:30 -0700 4 weeks ago          76044d3f08087add08ad1012ae1ee9a569679268
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='2021-04-01' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='2021-04-01 00:00' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='2021-04-01 00:00:00' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='2021-04-01T00:00:00' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='1 week ago' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='2 weeks ago' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='3 weeks ago' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='4 weeks ago' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='666 weeks ago' | grep 2021-04- | tail -1
$ git log --date=local --format='%ad %&lt;(20)%ar %H' --since='666 weeks ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='2021-04-01' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='2021-04-01 00:00' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='2021-04-01 00:00:00' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='2021-04-01T00:00:00' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='1 week ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='2 weeks ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='3 weeks ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='4 weeks ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ad %&lt;(20)%ar %H' --since='666 weeks ago' | grep 2021-04- | tail -1
$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' | grep 2021-04- | tail -1
2021-04-01 00:00:13 -0700 7 weeks ago          657fa6a40cfd93c6d48a8aee4cc8190df753f6d7
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='2021-04-01' | grep 2021-04- | tail -1
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='2021-04-01 00:00' | grep 2021-04- | tail -1
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='2021-04-01 00:00:00' | grep 2021-04- | tail -1
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='2021-04-01T00:00:00' | grep 2021-04- | tail -1
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='1 week ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='2 weeks ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='3 weeks ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='4 weeks ago' | grep 2021-04- | tail -1
$ git log --date=default --format='%ci %&lt;(20)%ar %H' --since='666 weeks ago' | grep 2021-04- | tail -1
2021-04-23 18:51:30 +0000 4 weeks ago          76044d3f08087add08ad1012ae1ee9a569679268
$ git log --date=iso-local --format='%ci %&lt;(20)%ar %H' | grep 2021-04- | tail -1
2021-04-01 00:00:13 -0700 7 weeks ago          657fa6a40cfd93c6d48a8aee4cc8190df753f6d7
$ 
</code></pre>
<p>I'm baffled as to why I get output about commit 76044d3f08087add08ad1012ae1ee9a569679268 at all, and the other <code>--date=something</code> variations do not show any output. And of course it is wrong output anyhow.</p>
<p>Puzzling.</p>
<p>Here is my slow <strong>workaround</strong> that I do not want to have to constantly resort to:</p>
<pre><code>$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' | grep 2021-04- | tail -1
2021-04-01 00:00:13 -0700 7 weeks ago          657fa6a40cfd93c6d48a8aee4cc8190df753f6d7
$
</code></pre>
<p>In the latter command, Git is dumping out the entire commit history, only for me to have to filter out the results I am looking for. In this case, <code>git log</code> is slow because my git repository is huge:</p>
<pre><code>$ git log --date=iso-local --format='%ad %&lt;(20)%ar %H' | wc -l
344841
</code></pre>
<p>What am I doing incorrectly here? Or is the <code>--since</code> option defective?</p>
","5","257924","0","0"
"67595564","3958878","2021-05-19 00:43:37","0","1168","<git><git-log><gitpython>","git log does not return the history of a file correctly","<p>I have a weird problem with the git log command. Although this command:</p>
<pre><code>git log --pretty=format: --name-only --diff-filter=A
</code></pre>
<p>returns <strong>.xyz.yml</strong> file in the list, but when I try to run this command:</p>
<pre><code>git log --pretty=&quot;%ad&quot; --diff-filter=A -- .xyz.yml
</code></pre>
<p>to retrieve the time this file was added to this repository it returns empty.</p>
<p>Is there any solution for it?</p>
<ul>
<li>I am sure that I write the exact name in the command (so I believe it doesn't have anything to do with case sensitivity)</li>
<li>the same problem happens in other repositories</li>
<li>I am using centos</li>
<li>I checked the problem both with python and GitPython lib and git command line</li>
</ul>
<p>I would be grateful for any kind of clue.</p>
<p><strong>Edit:</strong></p>
<p>When I try to get full history:</p>
<pre><code>git log --full-history -- .xyz.yml
</code></pre>
<p>the output shows a brief and incomplete history</p>
<pre><code>commit b26d833b9da805d5d58c429a4af2d1a5c5b0bad9
Author: author name
Date:   Mon Dec 19 14:07:17 2016 -0500

Code config (#606)

* Create .xyz.yml

Created a Code config that uses your setup (also, enabled our Duplication engine).

* Update .xyz.yml

* Update .xyz.yml

* Update .xyz.yml

* Update .xyz.yml

* Update .xyz.yml

* Update .xyz.yml

* Update .xyz.yml
</code></pre>
<p>Even though the file is no longer present in the head, the history does not show any deletion...</p>
<p>I have also had a look at the commit history in the GitHub user interface and I see a whole different world there:</p>
<p><a href=""https://i.stack.imgur.com/80PDq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/80PDq.png"" alt=""enter image description here"" /></a></p>
<p>The first commit date is even different than what I can find in --full-history.</p>
","4","3958878","",""
"49871429","5608018","2018-04-17 06:40:06","0","78","<git><gitlab><git-log>","(git-log) The returned results are different even though I used the same command on same branch","<p>I'm using git log to show commit log (files changed, lines added, lines deleted) on a branch with the command below that contains filters:</p>

<p><code>git log --shortstat --author=""cuongnq|hung.nguyen|thinhnv"" --since=""2018-03-26"" --until=""2018-04-12"" --no-merges | grep -E ""fil(e|es) changed"" | awk '{files+=$1; inserted+=$4; deleted+=$6; delta+=$4-$6; ratio=deleted/inserted} END {printf ""Commit stats:\n- Files changed (total).. %s\n- Lines added (total).... %s\n- Lines deleted (total).. %s\n- Total lines (delta).... %s\n- Add./Del. ratio (1:n).. 1 : %s\n"", files, inserted, deleted, delta, ratio }'</code></p>

<p>I used that command in the morning but in the afternoon the returned result is different. I dont understand. Can anyone explain this issue and how to fix it?</p>

<p>The retured result in the morning:</p>

<ul>
<li>Files changed (total).. 1258</li>
<li>Lines added (total).... 59519</li>
<li>Lines deleted (total).. 8714</li>
<li>Total lines (delta).... 50805</li>
<li>Add./Del. ratio (1:n).. 1 : 0.146407</li>
</ul>

<p>And in the afternoon:</p>

<ul>
<li>Files changed (total).. 1271</li>
<li>Lines added (total).... 59761</li>
<li>Lines deleted (total).. 8953</li>
<li>Total lines (delta).... 50808</li>
<li>Add./Del. ratio (1:n).. 1 : 0.149813</li>
</ul>

<p>Thank in advance!</p>
","2","5608018","",""
"49886056","","2018-04-17 19:27:48","1","201","<git><git-diff><git-log>","git log shows added / removed - is there a way to show modified lines","<p>When we use the <code>$ git log</code> command, we can see how many lines added / removed for a file.</p>

<p>My question is - is there a way to inspect which lines were modified (neither added nor removed)? Or can only <code>git diff</code> do that?</p>

<p>Sort of a philosophical question, since a modified line could simply be considered to be removed then added.</p>
","0","","",""
"67907248","10926556","2021-06-09 15:27:47","0","154","<git><github><commit><git-log>","Git / Github - problem with commit visibility / history / git log -S","<p>I have a pretty weird problem with git. <br />
When I use the command: <br />
<code>git show {number of commit}</code> <br />
It shows me a commit that I made, and in this commit, I can clearly see that I used the &quot;boolToString&quot; function. With applies that the commit is existing. But when I use <br />
<code>git log -S boolToString {path to file}</code><br />
it does not find commit with this change. The path to file is correct because if I type some phrase that was there before my commit it is returning results. Does any of you come with a problem similar to mine? I would be more than thankful for any hints or ideas about what's going on.</p>
","2","10926556","",""
"67922095","297115","2021-06-10 13:24:53","-1","302","<git><gerrit><git-diff><git-log><git-show>","What is the git command to get only the newly added/modified lines in a commit?","<p>I want to write shell script to parse java source files and find-out the common violations in source code based on some rule. This script should run on new code which is added/modified , this shouldn't get the old code. My code repository is git.</p>
<p>How to get the newly added/modified lines from git. I can then execute my script on top this.</p>
","1","297115","",""
"14618022","2019043","2013-01-31 03:37:04","116","126036","<git><git-log>","How does git log --since count?","<p>I have a simple test repository with just several commits and want to see the date&amp;time filtered log:</p>

<pre>
$ git log --author=""automatix"" --since=""2013-01-30"" --pretty -- test
commit ea0719bef142659fa561c9d040b2120012ed0184
Date:   Thu Jan 31 02:03:12 2013 +0100

commit ab4a8387bc4d9bdb4f67212df77eb1fc3d8b6304
Date:   Thu Jan 31 01:59:11 2013 +0100

commit a0b027beba2cd03571bb9475b9db9542f8efe990
Date:   Thu Jan 31 01:50:38 2013 +0100

commit add77c8fe2ba9254c11b98e14facede3420dc51c
Date:   Thu Jan 31 01:48:34 2013 +0100

commit e6e323c05d37c74fcabeb9186b95c0d49b862e6f
Date:   Thu Jan 31 01:46:27 2013 +0100

commit 8c286391e54d3fc1e210950b1320fd6f013a8f84
Date:   Thu Jan 31 01:41:27 2013 +0100

commit 9c880595e57f717383796fa2940f41f0f42f7e2a
Date:   Thu Jan 31 01:38:17 2013 +0100

commit a95527f36a533e1ecba1aadceea31a9dcbe1a8db
Date:   Thu Jan 31 01:30:00 2013 +0100
</pre>

<p>The first selected commit is <code>a95527f36a533e1ecba1aadceea31a9dcbe1a8db</code> from <code>2013-01-30 01:30:00</code>. 8 commits are selected:</p>

<pre>
$ git log --author=""automatix"" --since=""2013-01-30"" --format=oneline -- test | wc
      8      34     498
</pre>

<p>OK. Now I select since <code>2013-01-31</code>:</p>

<pre>
$ git log --author=""automatix"" --since=""2013-01-31"" --format=oneline -- test | wc
      0       0       0
</pre>

<p>What? Ok, that should mean, that the <code>since</code> rule <em>excludes</em> the commits of the startdate. Right?</p>

<p>But let's go on:</p>

<pre>$ git log --author=""automatix"" --since=""2013-01-31 01:30:00"" --pretty -- test
commit ea0719bef142659fa561c9d040b2120012ed0184
Date:   Thu Jan 31 02:03:12 2013 +0100

commit ab4a8387bc4d9bdb4f67212df77eb1fc3d8b6304
Date:   Thu Jan 31 01:59:11 2013 +0100

commit a0b027beba2cd03571bb9475b9db9542f8efe990
Date:   Thu Jan 31 01:50:38 2013 +0100

commit add77c8fe2ba9254c11b98e14facede3420dc51c
Date:   Thu Jan 31 01:48:34 2013 +0100

commit e6e323c05d37c74fcabeb9186b95c0d49b862e6f
Date:   Thu Jan 31 01:46:27 2013 +0100

commit 8c286391e54d3fc1e210950b1320fd6f013a8f84
Date:   Thu Jan 31 01:41:27 2013 +0100

commit 9c880595e57f717383796fa2940f41f0f42f7e2a
Date:   Thu Jan 31 01:38:17 2013 +0100

commit a95527f36a533e1ecba1aadceea31a9dcbe1a8db
Date:   Thu Jan 31 01:30:00 2013 +0100
</pre>

<pre>$ git log --author=""automatix"" --since=""2013-01-31 01:30:00"" --format=oneline -- test | wc
      8      34     498
</pre>

<p>Now, when I'm writing the starttime as well, the commits of the starttime are <em>included</em> .</p>

<p>I don't understand the logic. Can anybody explain, why it works so strange?</p>

<p>Thanks</p>
","5","2019043","0","0"
"68095793","3518405","2021-06-23 07:54:52","0","1734","<git><gitlab><gitlab-ci><gitlab-ci-runner><git-log>","gitlab-runner log size exceeded","<p>I am using ranchar2 gitlab runner and don't have control over it's configuration
but while running tests I am getting Job's log exceeded limit of 4194304 bytes error .</p>
<p>Is there any way I can change runner setting's from ci.yml file ?</p>
","1","3518405","",""
"15078976","875915","2013-02-26 00:06:10","3","183","<git><git-log>","Where do docs explain why ""git log"" output differs based on checked-out branch?","<p>The output from <code>git log</code> is different based on what branch I currently have checked-out.  Where in the git documentation does it explain this behavior?  </p>

<p>I looked at <code>git log --help</code> and <code>git rev-list --help</code> but don't see anything explaining the that <code>git log</code> is context-sensitive based on which branch I have checked-out.</p>

<p>EDIT:<br>
I had read the following section that @max and @James mentioned, and it's clear what happens when one of the commits is omitted and <code>..</code> is specified.  But it's ambiguous what happens when both commits are omitted. And it's also ambiguous when one commit is omitted and the <code>..</code> is omitted:</p>

<blockquote>
  <p>&lt;since&gt;..&lt;until&gt;</p>
  
  <p>Show only commits between the named two commits.
  When either &lt;since&gt; or &lt;until&gt; is omitted, it defaults to HEAD, i.e. the tip of
  the current branch.</p>
</blockquote>

<p>So, for example, the following would be equivalent:<br>
<code>git log master..</code>  is equivalent to:<br>
<code>git log master..HEAD</code><br></p>

<p><code>git log ..master</code> is equivalent to:<br>
<code>git log HEAD..master</code></p>

<p>But, if <b>both</b> &lt;since&gt; and &lt;until&gt; are omitted, then what?<br>
<code>git log</code> is <b>NOT</b> equivalent to:<br>
<code>git log HEAD..HEAD</code></p>

<p>So what is <code>git log</code> equivalent to in the &lt;since&gt;..&lt;until&gt; format?</p>

<p>And if only one commit is listed, but not <code>..</code>, then what?<br>
<code>git log foo</code> equivalent to:<br>
<code>git log foo..HEAD</code> or<br>
<code>git log HEAD..foo</code> ?</p>
","0","875915","0","0"
"15079209","1178659","2013-02-26 00:30:04","2","1365","<git><git-diff><git-log>","Why does ""git log --name-only"" show one file change, but ""git diff"" shows more?","<p>When I run</p>

<pre><code>git log --name-only
</code></pre>

<p>it shows sha1 and sha2 as consecutive commits and only one file was changes in sha2.</p>

<p>However, when I run</p>

<pre><code>git diff sha1 sha2
</code></pre>

<p>it shows differences in a lot of files. Why is this?
sha1 and sha2 are consecutive commit ids that I got from git log --name-only.
sha1 is the earlier commit.</p>

<p>I thought that <code>git diff</code> would only show differences in files that are listed by <code>git log --name-only</code>.</p>

<p>The <code>sha1</code> and <code>sha2</code> are consecutive commits in the same branch.</p>

<p><code>sha1</code> was a cherry pick from <code>B1</code> and <code>sha2</code> was cherry picked from <code>B2</code>.</p>

<p>I found that a file that was not listed in <code>git log --name-only</code> was modified and basically my changes in <code>B1</code> were overwritten by <code>B1</code> commit, even though it isn't listed as having been modified.</p>

<p>Is there an issue with the cherry-picking here where changes are picked up unknowingly?</p>
","1","1178659","0","0"
"50253867","7784533","2018-05-09 12:50:12","0","18","<git><git-submodules><git-log>","git log doesn't show modified submodules of a commit","<p>With git, is it possible to show modified submodules of a commit when execute <code>git log</code> in a master repo managing submodule ?
I try differents values for --pretty and --submodule options but nothing works.</p>
","0","7784533","",""
"15250012","220155","2013-03-06 14:30:59","9","1489","<git><git-log>","Unexpected underscore in git log --graph output","<p>When running <code>git log --graph</code> on my copy of the Linux kernel, I'm seeing an underscore in the graph that doesn't look like it should be there. </p>

<p>What does that underscore mean?</p>

<p>The specific command I'm using is thus:</p>

<pre><code>git log --graph --decorate --pretty=oneline --abbrev-commit --all --date-order
</code></pre>

<p>And the output looks like this:</p>

<p><a href=""https://i.stack.imgur.com/E4xNk.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/E4xNk.png"" alt=""git log --graph output""></a></p>

<p>I've tried looking at this area in the graph in gitk, but there doesn't seem to be anything out of the ordinary there.</p>

<p>I don't <em>think</em> this is just showing a branch point, as I'd expect that to be rendered as on the right, not as on the left (the left should match the image above):</p>

<pre><code>I see:        I'd expect for
              normal branching:

 \ \ \         \ \ \
 / / /         / / /
| _ /         | / /
|  /          |/ /
| |           | |
| |           | |
</code></pre>
","5","220155","0","0"
"33422650","2287913","2015-10-29 19:08:04","0","114","<git><jira><git-log>","Is there a way to dedupe or group git commits by Jira ticket using git log?","<p>I am trying to group the git commit messages by Jira ticket using git shortlog so that the file I output the results to only shows 1 (the first) commit per Jira ticket even if there were multiple commits for 1 ticket.</p>

<p>Here is my command so far : </p>

<pre><code>git shortlog --no-merges -n --pretty=oneline tagA..tagB &gt;log.txt
</code></pre>

<p>This results in a format like this : </p>

<pre><code>...
Developer (3)
 JIRA-123 blah 1 
 JIRA-123 blah 2 
 JIRA-123 blah 3 
...
</code></pre>

<p>But I want the format to be this : </p>

<pre><code>...
Developer (3)
JIRA-123 blah 1
....
</code></pre>
","2","2287913","",""
"33525661","784815","2015-11-04 15:27:14","3","4358","<git><git-log>","Git log after git fetch","<p>How can I get the same result of <code>git log</code> after <code>git fetch</code>, as I get after <code>git pull</code>?</p>

<p>I have cloned two the same repositories. Just <code>clone</code> for first one and with <code>--bare</code> flag for second one. Some time later I've executed <code>git pull</code> for first repository and <code>git fetch</code> for second one.</p>

<p>If I try to check <code>git log</code> for repositories, I get different results.</p>

<pre><code>cd ~/first
git pull
git log --all --oneline | wc -l
21962

cd ~/second.git
# second
git fetch
git log FETCH_HEAD --all --oneline | wc -l
21903
</code></pre>
","2","784815","",""
"16962737","1385067","2013-06-06 12:57:45","2","290","<git><web-deployment><git-merge><git-flow><git-log>","how to find git merge commits which merges into current branch","<p>At my company we are using <a href=""https://github.com/nvie/gitflow"" rel=""nofollow"">git flow</a> to manage the development of a number of sites.
All of these sites are forks of a base repo. It is easy enough to update the sites with updates from the upstream project.
But updating the base projects with features from the sites is giving me some headaches.</p>

<p>Each site has its own repository as origin and the base as a profile remote.</p>

<p>All the common stuff that these sites share are located under one directory, and we could properly use git subtrees, but we currently do not. </p>

<p>Currently I check out the develop branch from profile and checkout the shared directory from the local master, commit and push to profile/develop. This squashes all features into one commit.</p>

<p>What I would like to do is: pull individual features from the different sites into profile/develop.</p>

<p>The problem is: when features are tested, publish on the site and ready to be merged upstream, the feature is already merged into master by git flow, at this point.</p>

<p>I have not been able to find a way of finding already merged in features in the git history of the local sites.</p>

<p>I have come up with a script which can tell me the merge commits that bring in stuff to the current branch:</p>

<pre><code>git log --decorate --graph  --all|grep --before-context=1 --after-context=4 ""^|\\\\""|grep ^\*|awk '{for(i=1; i &lt;= NF; i++){if($i ~ /commit/){com = i + 1;print $com}}}'
</code></pre>

<p>When I run this this command in the local develop branch I can do a format-path on the different merges, and do a more granular update of the profile.</p>

<p>Could anybody please show me a more correct way of doing it.</p>
","0","1385067","0","0"
"69221549","2163852","2021-09-17 10:07:09","1","206","<git><git-log><cherry-pick><git-cherry-pick>","Hiding cherry picked commits in git log between 2 branches","<p>Let's start with master branch</p>
<pre><code>m1 -&gt; m2 -&gt; m3
</code></pre>
<p>We create a branch now. Add b1 and b2, so my branch looks like this</p>
<pre><code>m1 -&gt; m2 -&gt; m3 -&gt; b1 -&gt; b2
</code></pre>
<p>Now master gets 2 more added</p>
<pre><code>m1 -&gt; m2 -&gt; m3 -&gt; m4 -&gt; m5
</code></pre>
<p>I cherry pick those 2 in my branch</p>
<pre><code>m1 -&gt; m2 -&gt; m3 -&gt; b1 -&gt; b2 -&gt; m'4 -&gt; m'5
</code></pre>
<p>Master has m6 and m7 added.</p>
<pre><code>m1 -&gt; m2 -&gt; m3 -&gt; m4 -&gt; m5 -&gt; m6 -&gt; m7
</code></pre>
<p>Now, I want to see everything in master that's not in branch. Easy syntax</p>
<pre><code>git log --oneline master ^branch
</code></pre>
<p>I want the above to <strong>only show m6 and m7</strong></p>
<p>Why, because <em>m4</em> already shows up in my branch (except it shows up as <em>m'4</em> because of the cherry pick) and <em>m5</em> already shows up in my branch (except it shows up as <em>m'5</em> because of the cherry pick)</p>
<p>I understand cherry-picks have different hashes, but is there a way for git log to somehow identify that <em>m4</em> == <em>m'4</em> and <em>m5</em> == <em>m'5</em> and  therefore when I ask &quot;what's in master that's not in my branch&quot; , it hides those 2?</p>
<p>None of the --cherry-mark, --cherry, --cherry-pick seem to do what I want.</p>
","4","2163852","",""
"51553292","217823","2018-07-27 07:51:38","3","311","<git><user-interface><tree><git-log>","How to specify the leftmost (the main branch of interest) when visualizing git log tree?","<p>I'm using Sourcetree, but I saw the same issue in other Git GUI tools, so I'm not sure if there is any tool that can do what I need.</p>

<p>The main reason for the question is that sometimes I need to look at a specific release version branch and see all the other branches and all the commits as relative to the branch of interest.</p>

<p>Currently it can get confusing because even if I check out the branch, it is not displayed as a straight line in the tree visualization, which makes it complicated to track when and why did this branch split or merge. It would be much more easier if I could see specific branch as a straight vertical line and all the other branches were arranged around that.</p>

<p>For example, I have branch A and then create a branch B off it and then commit something into B and also something else into A. When I view the log, I want to be able to specify that branch A is my branch of interest, thus branch A (and not branch B) should be displayed as a straight line. But currently I don't know how to do that - it seems, Git (or Sourcetree) decides which branch will be displayed as a straight line (most probably, it is the one with the newest commits?) and which branches will be displayed as splitting off of the currently chosen ""main branch"".</p>
","3","217823","0","0"
"51596369","932786","2018-07-30 14:32:41","10","2806","<git><git-log>","How to show the change itself using git log pickaxe?","<p>I would like to search git log for a specific string to find where it was modified/deleted/added. </p>

<p>I knew that I can do this using <code>pickaxe</code> (i.e., <code>git log -S""Text""</code>)</p>

<p>When I run this command, only the names of the commits where the change has occurred are shown. I also tried <code>git log -G""Text""</code> but no difference.</p>

<p>When I tried <code>git log -p -S""Text""</code>, it showed me full comparision between two versions of files.</p>

<p>Is there a way to spot the exact location (line) where the text has been changed/added/deleted?</p>

<p>I checked related posts <a href=""https://stackoverflow.com/questions/1337320/how-to-grep-git-commit-diffs-or-contents-for-a-certain-word/1340245#1340245"">1</a>, <a href=""https://stackoverflow.com/questions/31778649/git-pickaxe-not-finding-modified-line"">2</a> but didn't answer my question. I'm working on Windows OS.</p>
","0","932786","",""
"51614904","148926","2018-07-31 13:45:07","7","968","<git-branch><git-log><git-tag><git>","git: list dangling tags","<p>Context:</p>

<ul>
<li>assume you have some rather tricky CI/CD workflow which relies on git tags</li>
<li>the feature branches are built and generate some <em>short-lived</em> tags to signify commits which yield the deployable artifacts</li>
<li>when the feature branch gets squash-merged, usually it's deleted, <strong>but the tags, unsurprisingly, survive</strong></li>
<li>after, say, several months of development the tag listing predictably becomes hairy</li>
</ul>

<p>Hence, the question: </p>

<p>how would I, using git command line and, optionally, basic bash tooling</p>

<ol>
<li>list all the branches which have given tag reachable (the dual to that is <code>git tag -l --merged ${BRANCH_COMMITTISH}</code>, but I need not tags for the given branch but branches for a given tag)</li>
<li>list all the tags which have empty output from point 1 above (obviously this is doable with a for loop <em>(given any terminating implementation for 1)</em>,  but maybe there's some neat magical git one-liner)?</li>
</ol>
","0","148926","0","0"
"51618951","10095231","2018-07-31 17:26:33","2","1666","<git><whitespace><git-diff><git-log>","git diff --check shows changes of unrelated branch/files","<h3>Background</h3>

<p>I am trying to see the whitespace errors of the current branch (ignoring <strong>CR</strong>
at eol).  Most files use <strong>CRLF</strong>, and I don't have the <strong>core.whitespace</strong>
config set.</p>

<p>This is the original command:</p>

<pre><code>git -c core.whitespace=trailing-space,cr-at-eol diff --check master..HEAD
</code></pre>

<p><strong>HEAD</strong> refers to a branch created on top of an older version of <strong>master</strong>
(""<strong>oldmaster</strong>"").</p>

<p>The problem is that <code>git diff --check</code> is behaving in an unexpected way: it is
showing not only the errors in <strong>master..HEAD</strong>, but also the errors in
<strong>oldmaster..master</strong>. </p>

<h3>Questions</h3>

<ul>
<li><p>Is this occurring because <code>git diff --check</code> compares the whole snapshots in
the given revision range?</p></li>
<li><p>Why do <code>git log</code> and <code>git diff</code> behave differently in this case?</p></li>
<li><p>Shouldn't <code>git diff --check</code> compare only the changed lines in the changed
files?</p></li>
</ul>

<h3>Information</h3>

<p><strong>master</strong> vs <strong>oldmaster</strong> (the numbers are coincidental):</p>

<pre><code>$ git log --oneline oldmaster..master | wc -l
115

$ git diff --name-only oldmaster..master | wc -l
115
</code></pre>

<p>This shows the relevant commits correctly:</p>

<pre><code>$ git log --oneline master..HEAD | wc -l
4
</code></pre>

<p>This shows the correct files:</p>

<pre><code>$ git log --oneline --name-only master..HEAD -- | grep -E '^[a-zA-Z]+/' \
  | sort -u | wc -l
4
</code></pre>

<p>These for some reason also include the files changed in <strong>oldmaster..master</strong>:</p>

<pre><code>$ git diff --name-only master..HEAD -- | wc -l
119

$ git -c core.whitespace=trailing-space,cr-at-eol diff --name-only \
  master..HEAD -- | wc -l
119
</code></pre>

<p>Both of these also show unrelated files:</p>

<pre><code>$ git diff --check master..HEAD -- | grep -E '^[a-zA-Z]+/' | cut -d : -f 1 \
  | sort -u | wc -l
30

$ git -c core.whitespace=trailing-space,cr-at-eol diff --check master..HEAD \
  -- | grep -E '^[a-zA-Z]+/' | cut -d : -f 1 | sort -u | wc -l
9
</code></pre>
","0","10095231","",""
"51621341","241142","2018-07-31 20:12:48","0","15","<git><git-log>","How do I condense my git log output by ""de-duplicating"" branch names (as described below)?","<p>I would like to display my <code>git log</code> so that branch names are ""de-duplicated""&mdash;so that the same branch on <em>origin</em> does not need its full name displayed next to the local name.</p>

<p>For example, here is what I currently have as the first line of my <code>git log --graph</code>:</p>

<pre><code>* 9c202db5 (HEAD -&gt; feature/blah-blah-descriptive-name--289, origin/feature/blah-blah-descriptive-name--289) do the thing to the code
</code></pre>

<p>But I would like it to become more like this (and this is just an example&mdash;whatever achieves the same basic effect would be fine):</p>

<pre><code>* 9c202db5 (HEAD -&gt; feature/blah-blah-descriptive-name--289 &lt;-&gt; origin) do the thing to the code
</code></pre>

<p>(SHA1 shortening here is done for cosmetic purposes, to make the differences visible without scrolling.)</p>
","0","241142","",""
"51629509","258483","2018-08-01 09:13:59","9","4412","<git><git-log>","How to show git log with commit numbers?","<p>I found an <a href=""https://www.clock.co.uk/insight/deleting-a-git-commit"" rel=""noreferrer"">example on how to delete a commit</a> but it includes git log in the following format</p>

<pre><code>Number  Hash    Commit Message  Author
1   2c6a45b (HEAD) Adding public method to access protected method  Tom
2   ae45fab Updates to database interface   Contractor 1
3   77b9b82 Improving database interface    Contractor 2
4   3c9093c Merged develop branch into master   Tom
5   b3d92c5 Adding new Event CMS Module Paul
6   7feddbb Adding CMS class and files  Tom
7   a809379 Adding project to Git   Tom
</code></pre>

<p>When I issue the <code>git log</code> command I'm getting log in another format and without the numbers (which are required by the task).</p>

<p>How to get <code>git log</code> with numbers?</p>
","1","258483","0","0"
"35730363","421049","2016-03-01 18:16:22","5","2146","<windows><git><git-log>","Colors and authors in git log on Windows?","<p>Using Windows 10 Pro 64-bit I found a nice command to list the Git history, showing <code>HEAD</code>, branches, and tags as stand-out colors. Nice!</p>

<pre><code>git log --oneline --decorate --graph --all
</code></pre>

<p>But I don't see any dates or authors! So I find another nice command:</p>

<pre><code>git log --pretty=format:\""%h %ad | %s%d [%an]\"" --graph --date=short
</code></pre>

<p>Also very nice---now I can see dates and authors. But all the pretty colors are gone (except for the graph). <code>HEAD</code>, branches, and tags are all the same color as the rest of the log, making it hard to pick them out.</p>

<p>How do I get the colors back for the commit pointers while keeping the date and authors?</p>
","0","421049","0","0"
"51707312","6943752","2018-08-06 12:09:05","0","310","<git><bitbucket><git-bash><git-log>","How to fetch files from a remote git repository to a local folder, based on specific date?","<p>I am trying to clone/pull, all the files pushed to remote repository, only on a specific date (say, after 2018-08-06). In my remote repository, i have more than 10000 files, but i only need files pushed to the repository, on a specific date. With the below command, i am able to see the logs for a specific time period:</p>

<pre><code>git log --since=2018-08-03 --until=2018-08-06
</code></pre>

<p>Now i need to clone only these files and not all the files in the repository.
Please suggest.</p>
","2","6943752","",""
"35743332","1546844","2016-03-02 09:36:42","7","3578","<terminal><git-log><less-unix>","How to make git-log scroll up instead of down","<p>Whenever I view a <code>git log --all --graph --oneline --decorate</code> output in my terminal emulator, the first commit is viewed at the top of the terminal screen. When I quit the <code>git log</code> output view with <code>q</code>, a few lines from the are not visible any more, as there are some new lines appended to the bottom of the screen, for the next command. </p>

<p>Usually though, those top lines are the most interesting, as they resemble the most recent git history, so I want them to be still visible when I type the next git command.</p>

<p>How can I make the <code>git log</code> output appear starting at the bottom of the screen, i.e. such that the first commit is viewed at the bottom? You would have to scroll up to view older commits.</p>

<p>NOTE: The <code>--reverse</code> flag is not an option for two reasons.</p>

<ol>
<li>Each time you have to scroll all the way to the bottom to view the first
commits. That should not be necessary. I want to start at the bottom.</li>
<li>It doesn't combine with the <code>--graph</code> flag: <code>fatal: cannot combine --reverse with --graph</code>.</li>
</ol>
","7","1546844","0","0"
"37299022","11722","2016-05-18 12:02:28","4","1116","<git><git-log>","git log --branches with prefix","<p>I want to log all changes on a specific set of branches to see the relationshop between them, and I found that:</p>

<pre><code>git log --graph --oneline --topo-order --decorate --simplify-by-decoration `git branch --list -a origin/foo/*`
</code></pre>

<p>does exactly what I want (i.e. log changes on all branches that are prefixed with foo/*).</p>

<p>But now I am curious about the <code>--branches</code> option of git log. It seems like that should work in a similar way, but if I use <code>--branches=origin/foo/*</code> or <code>--branches=remotes/origin/foo*</code> or even <code>--branches=foo</code> the output is very different (only very few and irrelevant commits are showing).</p>

<p>The documentation say:</p>

<pre><code>--branches[=&lt;pattern&gt;]
Pretend as if all the refs in refs/heads are listed on the command line as
&lt;commit&gt;. If &lt;pattern&gt; is given, limit branches to ones matching given shell
glob. If pattern lacks ?, *, or [, /* at the end is implied.
</code></pre>

<p>What is the difference ? My problem is already solved since I can use the first version - but I am asking this since I am curious. ( And also adding a git alias is slightly simpler if use of back ticks can be avoided. )</p>

<p><a href=""https://stackoverflow.com/q/5316802/11722"">This question</a> discusses related topics - but I could not see any info about my specific issue.</p>
","2","11722","0","0"
"53381570","816448","2018-11-19 19:42:37","12","857","<git><macos><git-log>","Keep color in 'git log' when piping to 'head' (osx)","<p>I have the following aliases in my bashrc file.</p>

<pre><code>alias gl=""git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all""
alias glh=""gl | head -n 20""
</code></pre>

<p>Both of the aliases used to print the output of git history in color. However with the update of git to <code>git version 2.19.1</code> <code>glh</code> stopped printing the output in color. <code>gl</code> still prints the output in color. Is there a way to force <code>git log</code> to keep the color even though it is piped to <code>head</code>?</p>

<p>OS:</p>

<pre><code>ProductName:    Mac OS X
ProductVersion: 10.11.6
BuildVersion:   15G22010
</code></pre>
","4","816448","0","0"
"37325709","281545","2016-05-19 14:06:05","1","3320","<git><bash><git-log>","How do I pass a range of commits to git log?","<p>Ok I give up, I am a Bash noob.</p>

<p>This:</p>

<pre><code>$ git log --no-walk --oneline 6980e6ecede8e188f434f6da669c2297f28decfe 458567536c1f20498da033cb0e42da74439ef12e
</code></pre>

<p>prints:</p>

<pre><code>4585675 NNN bethDataFiles, allBethFiles belong to game/game/constants.py
6980e6e NNN bethDataFiles, allBethFiles belong to game/game/constants.py
</code></pre>

<p>This:</p>

<pre><code>git log -g --pretty=format:'%ai %H' | awk '$0 &gt;= ""2016-04-13"" &amp;&amp; $0 &lt;= ""2016-04-15""'| cut -d' ' -f 4 | awk '!a[$0]++' | tr '\n' ' '
</code></pre>

<p>prints me a range of commits:</p>

<pre><code>ba4ee4b099d23642e6cad56d9f41974f6e767781 1daaede0f4e11cae0e0bb00b9ebb43bba4f5671 ...
</code></pre>

<p>Now why on earth piping this command to git log as in:</p>

<pre><code>git log -g --pretty=format:'%ai %H' | awk '$0 &gt;= ""2016-04-13"" &amp;&amp; $0 &lt;= ""2016-04-15""'| cut -d' ' -f 4 | awk '!a[$0]++' | tr '\r\n' ' ' | git log --format='%h %s %ai' --no-walk
</code></pre>

<p>only shows me the first commit:</p>

<pre><code>ba4ee4b _load_active_plugins pre BAPI code - superseded by games.py API: 2016-04-14 19:38:41 +0200
</code></pre>

<p>?</p>

<pre><code>$ git --version
git version 2.6.1.windows.1
</code></pre>
","0","281545","",""
"70108309","7881859","2021-11-25 09:00:27","3","464","<git><version-control><git-log>","What does ""replaced"" mean in git log?","<p>When I do <code>git log --all</code>, I found one interesting commit in the log:</p>
<pre><code>commit 3a1a6bfbd936ea441ecf1f071e82f89c7e8bbf6c (replaced, origin/main)
</code></pre>
<p>What does the <code>replaced</code> keyword mean in the parentheses? And how to trigger it?</p>
","2","7881859","",""
"37344763","4820341","2016-05-20 10:50:07","11","4437","<git><git-log>","Difference in the output of git log --decorate: (HEAD -> master) vs (HEAD, master)","<p>When I get the log of a GIT repo:</p>

<pre><code>git log --oneline --decorate --graph
</code></pre>

<p>the output is like this:</p>

<pre><code>* 44025ed (HEAD -&gt; master) second commit
* adf2dbb first commmit
</code></pre>

<p>In another repo, when I <code>git log</code>, I get:</p>

<pre><code>* 435b61d (HEAD,master) bar
* 9773e52 foo
</code></pre>

<p>What is the difference between <code>(HEAD -&gt; master)</code> and <code>(HEAD,master)</code></p>
","0","4820341","0","0"
"70127546","4242086","2021-11-26 16:38:26","1","1241","<git><git-clone><git-log>","git log not showing latest commits in cloned repository","<p>A while ago one of my team members cloned my code by using</p>
<pre><code>git clone --bare -l /home/jaimemontoya/public_html/app/public.git /home/johndoe/app/public.git
</code></pre>
<p>He continued coding and when he uses <code>git remote -v</code> he gets this:</p>
<pre><code>origin    ssh://johndoe@www.example.com/home/johndoe/app.git (fetch)
origin    ssh://johndoe@www.example.com/home/johndoe/app.git (push)
</code></pre>
<p>He had the latest code so at one point I wanted to get the latest version of his code by using this:</p>
<pre><code>git clone --progress -v &quot;ssh://jaimemontoya@example.com/home/johndoe/app.git&quot; &quot;C:\Users\jaimemontoya\Apps\Marketing\app&quot;
</code></pre>
<p>To my surprise, when I navigate to <code>C:\Users\jaimemontoya\Apps\Marketing\app</code> and use <code>git log -1</code>, I'm getting a very old commit, not the most recent one that my team member has when he uses <code>git log -1</code> from his local. He claims to have already pushed to remote, meaning <code>ssh://johndoe@www.example.com/home/johndoe/app.git</code> should already have his latest code so that when I clone from it, I should also be able to fetch the latest. My first guess is that he may not have pushed to remote. But assuming he has already done it, what could explain why I'm not being able to retrieve the latest code from <code>ssh://johndoe@www.example.com/home/johndoe/app.git</code>?</p>
<p>Note: I used <code>root</code> to try to explore <code>ssh://johndoe@www.example.com/home/johndoe/app.git</code> and see what I get:</p>
<pre><code>root@sub.example.com [~]# cd ../home/johndoe/app.git/
root@sub.example.com [app.git]# ls -al
total 68
..................
..................
drwxr-x--x 5 johndoe gitgrp 4096 Nov  25  2021 app
..................
..................
drwxr-x--x 7 johndoe gitgroup 4096 Nov  25  2021 .git
..................
..................
root@sub.example.com [androidapp.git]# git log -1
</code></pre>
<p>I'm still seeing an old commit, not the latest one that my team member claims to have already pushed to remote. This happens even after logging in as <code>root</code> to the server where the code is being hosted. This is a bare repository. However, shouldn't <code>.git</code> list the latest code pushed to <code>ssh://johndoe@www.example.com/home/johndoe/app.git</code>, when use use <code>git log -1</code> from <code>/home/johndoe/app.git/</code> on the server where the remote repository is hosted? Thank you.</p>
","2","4242086","0","0"
"38434161","2331529","2016-07-18 10:16:41","8","2763","<git><command-line-interface><shortcut><git-log>","Is there a git command to show new upstream commits after fetch?","<p>Is there some shortcut to specify the interval of fetched, new commits from remote tracking branch? Instead of typing this long command that is also branch specific:</p>

<pre><code>git log branchName..origin/branchName
</code></pre>

<p>I am looking for some git interval hack, that will represent interval of branchName..origin/branchName, something like (not working, equivalent to git log ..origin/HEAD)</p>

<pre><code>git log ..origin
</code></pre>
","3","2331529","0","0"
"53867283","4064942","2018-12-20 10:55:30","0","85","<git-log><grgit>","I am trying to get commit body from Grgit log is it possible?","<pre><code>Grgit.open(dir: repoDir).log {
    range 'origin/develop', branch
    maxCommits:
        num
}
</code></pre>

<p>Can I add some argument to get commit body?</p>
","0","4064942","",""
"71384830","4561887","2022-03-07 17:12:55","0","1322","<git><date><git-log>","How to make `git log` show only the commit date, nothing else","<p>I just want to get a quick glance at the history of a project by having <code>git log</code> show <em>only</em> the commit date, nothing else. How can we best do that?</p>
<hr />
<h3>Update:</h3>
<p>It turns out I was actually asking for the <strong>author</strong> date, which is what is shown by <code>git log</code>. To see the <strong>committer</strong> date too, which can be different, run <code>git log --pretty=fuller</code>.</p>
<p>See also here: <a href=""https://stackoverflow.com/a/11857467/4561887"">Why is git AuthorDate different from CommitDate?</a></p>
<p>To help make this point that there are different dates: to set an <strong>author</strong> date when running <code>git commit</code>, use:</p>
<pre class=""lang-sh prettyprint-override""><code>git commit ---date &quot;&lt;date&gt;&quot;
</code></pre>
<p>To set also the <strong>committer</strong> date, you'd have to do:</p>
<pre class=""lang-sh prettyprint-override""><code>GIT_COMMITTER_DATE=&quot;&lt;date&gt;&quot; git commit --date &quot;&lt;date&gt;&quot;
</code></pre>
<p>See here: <a href=""https://stackoverflow.com/a/9701130/4561887"">How can one change the timestamp of an old commit in Git?</a></p>
","1","4561887","0","0"
"71600805","1419127","2022-03-24 10:29:45","0","110","<git><search><docx><git-log>","Ignore files from git log -S/-G","<p>So when I run <code>git log -S[string]</code> or <code>git log -G[string]</code>, <code>git</code> will try to search <code>[string]</code> in various places over all the log. It seems to encounter some old <code>.docx</code> files that I had committed once but since then deleted. Somehow <code>git</code> isn't happy with that though, since it says either :</p>
<pre><code>&lt;[filename].docx&gt; does not seem to be a docx file!
</code></pre>
<p>or</p>
<pre><code>Failed to extract required information from &lt;[filename].docx&gt;!
</code></pre>
<p>In my particular situation, however, I have never encountered a situation where I would expect results of my <code>-S</code>/<code>-G</code> search to pop up in those files. Can I just ask <code>git</code> to skip them when searching, thus saving time (the search is noticeably slower) and also sparing me the error messages ?</p>
","3","1419127","",""
"71881825","18452428","2022-04-15 08:37:25","1","240","<git><git-remote><git-log>","How do I get the last commit date of a remote repository without cloning using the basic git commands?","<p>I need to get the date of the last commit (in seconds) from the remote repository without cloning it, and I need to do this with the basic git commands.</p>
<p>I can get the date of the last commit of the local repository in seconds using <code>git log</code> command, but I did not find how to do the same with the remote repository without cloning it.</p>
<pre><code>git log -1 --format=%ct
</code></pre>
<p>I work in bash.</p>
<p>How can I do that?</p>
","7","18452428","",""
"72005180","5201222","2022-04-25 20:06:08","1","220","<git><git-log>","Sudden color change in ""git log""","<p>Please consider the following <code>git log</code> alias I use:</p>
<pre><code>log --date-order --color-moved --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''%C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
</code></pre>
<p>And now, please consider the following screenshot the above alias produces:
<a href=""https://i.stack.imgur.com/hs5vX.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hs5vX.png"" alt=""enter image description here"" /></a>
As one can see, in the red circles in the screenshot, there are sudden color changes. Why is that?</p>
<p>I think its an issue with my alias.</p>
<p>EDIT:
Clarification as requested by @eis in the comments: for example, take a look at the first red circle. There is a new branch starting there, right? It starts with yellow <code>/</code> and then immediately change to a blue <code>|</code>. It should have started with blue.</p>
","7","5201222","",""
"72196739","9157799","2022-05-11 07:04:34","-1","458","<git><git-log><pager>","Why does git log doesn't show HEAD and branches when passed to a pager","<p>When passed to a pager (<code>git log | less</code>, <a href=""https://stackoverflow.com/q/62803231/9157799""><code>watch git log</code></a>, etc), the <code>(HEAD -&gt; master, origin/master, origin/HEAD)</code> doesn't show up.</p>
","1","9157799","",""
"54412432","8652414","2019-01-29 00:55:59","4","354","<git><git-log>","What flags need to be set on `git log` to make it have similar output to `git whatchanged`?","<p>Per: <a href=""https://stackoverflow.com/questions/10022722/difference-between-git-log-and-git-whatchanged"">Difference between git-log and git-whatchanged?</a> </p>

<blockquote>
  <p>Encourage new users to use 'log' instead. These days, these commands are unified and just have different defaults.</p>
</blockquote>

<p>I only recently discovered <code>git whatchanged</code> but found its output:</p>

<pre><code>commit deadbeefdeadbeefdeadbeefdeadbeefdeadbeef
Author: Egg Sample &lt;mail@example.com&gt;
Date: Mon Jan 28 16:32:04 2019 -0800

    change some files

:100777 100644 abaddad1 feeb1e42 M      src/changemymode.txt
:100644 100644 1234abcd abcd1234 M      src/changemycontent.txt
:000000 100755 00000000 6600abcd A      src/addme.txt
:100755 000000 feed1bee 00000000 D      src/deleteme.txt

</code></pre>

<p>useful for a particular workflow I had recently (involving a branch with many file mode changes). Out of curiosity, what would I need to do to make <code>git log</code> behave in such a manner, i.e.:</p>

<ul>
<li>show the commit information,</li>
<li>the old mode, new mode, hashes, <code>Modified|Added|Deleted</code> and filenames of the files that changed</li>
<li>and not the diffs themselves</li>
<li>(and exclude merges by default, which is also called out as <code>git whatchanged</code> behavior).</li>
</ul>

<p>I figured it might be something in the <code>--stat</code> or <code>--format</code> options, but <code>git log --help</code> doesn't seem to mention anything about getting the file modes and object hashes printed in conjunction with these options, and a quick scan of said document doesn't have anything jump out at me.</p>
","2","8652414","0","0"
"54451190","8207842","2019-01-30 23:34:52","4","635","<git><git-diff><git-log><git-config>","Displaying git diff and git log output on a separate terminal screen","<p>After setting up new development environment I encountered a strange git behavior that I don't recall seeing in the past. </p>

<p>I am used to <code>git diff and git log</code> creating a new screen in the terminal and displaying their output inside (what <strong>less</strong> does by default, and I'm using it as my pager). </p>

<p>I can then quit and go back to my previous terminal state, with the command output gone. Now, however, output is printed right into the same screen as if it was <strong>cat</strong> (but with a pager). Any ideas how to fix this? Couldn't find any info online.</p>

<p>UPDATE:
Was able to fix this with @torek's help by setting <code>core.pager</code> to <code>'less -+F -+X'</code></p>
","0","8207842","",""
"54560243","8267816","2019-02-06 18:27:12","2","332","<git><macos><git-log>","git log macOS problems","<p>I have git installed and am able to run all the basic commands, except for git log.</p>

<p>When I try to run git log this is what I get : </p>

<pre><code>⑂master  git log

$(brew--prefix)/share/git-core/contrib/diff-highlight/diff-highlight |     LESS=${LESS:-FRX} $(git var GIT_PAGER): brew--prefix: command not found
$(brew--prefix)/share/git-core/contrib/diff-highlight/diff-highlight |     LESS=${LESS:-FRX} $(git var GIT_PAGER): /share/git-core/contrib/diff-highlight/diff-highlight: No such file or directory
</code></pre>

<p>Has anyone faced this issue? I'd appreciate your thoughts!</p>
","8","8267816","0","0"
"54561892","30225","2019-02-06 20:19:02","1","36","<git><git-log>","git log to show only files that were modified only after being merged to master","<p>We have a folder containing database migrations. These are cumulative and should never be changed. If you need to introduce a change you add a new migration.</p>

<p>Is there simple way in git to only show files <em>in that folder</em> that were modified <em>after</em> their <em>first</em> merge/commit into master branch?</p>

<p>I worked out <code>git log --graph --name-status --diff-filter=a -- FOLDERNAME</code> to show most of these changes but I want to limit them to modifications after they entered master. In other words I don't care about the initial history of the file only after it was merged to master.</p>

<p>Edit: <code>--diff-filter=a</code> seems better then <code>--diff-filter=DM</code></p>

<p>I'm using git for Windows and Azure DevOps if that is relevant.</p>
","0","30225","0","0"
"73308666","2641825","2022-08-10 15:08:50","2","226","<git><git-log><git-blame>","To display changes to the first line of a csv file tracked by git, can git log be on one line when using the -L line argument?","<p>I would like to show only changes to the column headers of a csv file tracked by git. I use the code in <a href=""https://stackoverflow.com/a/17803762/2641825"">this nice answer by Kirill Müller</a>. It works almost perfectly except that it repeats the lines even if the commit didn't actually change the first line of the file.</p>
<h2>Reproducible code</h2>
<pre><code>cd /tmp/
mkdir test
cd test/
git init
echo &quot;bla,bla&quot; &gt; table.csv
git add table.csv
git commit -m &quot;version bla&quot;
echo &quot;bla,bli&quot; &gt; table.csv
git commit -am &quot;version bli&quot;
echo &quot;1,2&quot; &gt;&gt; table.csv
git commit -am &quot;Add data&quot;
</code></pre>
<h2>Issue</h2>
<pre><code>user:/tmp/test$ FILE=table.csv
user:/tmp/test$ LINE=1
user:/tmp/test$ git log --format=format:%H $FILE | xargs -L 1 git blame $FILE -L $LINE,$LINE
e4a89a75 (user 2022-08-10 16:45:04 +0200 1) bla,bli
e4a89a75 (user 2022-08-10 16:45:04 +0200 1) bla,bli
^58b4b88 (user 2022-08-10 16:44:16 +0200 1) bla,bla
</code></pre>
<p>The issue is that the last commit appears twice, eventhought the first line wasn't changed.</p>
<h2>Expected output</h2>
<pre><code>e4a89a75 (user 2022-08-10 16:45:04 +0200 1) bla,bli
^58b4b88 (user 2022-08-10 16:44:16 +0200 1) bla,bla
</code></pre>
<h2>What I tried</h2>
<p>The log part of the instruction currently uses <code>format:%H</code></p>
<pre><code>user:/tmp/test$ git log --format=format:%H table.csv
c51873404aa45fb50fcbd6bd7ea06ab1e9f22071
e4a89a75e48623a1d2967996e6de3a250607e6a5
58b4b88800dd57cb1ca0476f1b9939781af28600
</code></pre>
<p>I tried adding the <code>L1,1:</code> argument to the log section but it formats the log differently so that the output cannot work anymore as an input to <code>xargs</code></p>
<pre><code>user:/tmp/test$ git log --format=format:%H -L1,1:table.csv
e4a89a75e48623a1d2967996e6de3a250607e6a5
diff --git a/table.csv b/table.csv
--- a/table.csv
+++ b/table.csv
@@ -1,1 +1,1 @@
-bla,bla
+bla,bli

58b4b88800dd57cb1ca0476f1b9939781af28600
diff --git a/table.csv b/table.csv
--- /dev/null
+++ b/table.csv
@@ -0,0 +1,1 @@
+bla,bla
</code></pre>
<p>Putting the log on one line may not be possible when using <code>-L</code> according to <a href=""https://stackoverflow.com/a/59325856/2641825"">this answer</a>:</p>
<blockquote>
<p>&quot;[...] git log --oneline -L 10,11:example.txt does work (it does however output the full patch).&quot;</p>
</blockquote>
","0","2641825","",""
"56621554","6723250","2019-06-16 18:27:58","6","3115","<git><git-log>","How do I show tags in a custom git log format?","<h2>Situation</h2>

<p>I am using git log with a custom <code>--pretty:format</code>:</p>

<pre class=""lang-sh prettyprint-override""><code> git --no-pager log --pretty=format:""%C(yellow)%h%Creset %s %Cgreen(%cr) %Cblue&lt;%an&gt;%Creset"" -5
</code></pre>

<p>which produces an output like this</p>

<pre class=""lang-sh prettyprint-override""><code>7224466 update version (4 days ago) &lt;Xerus&gt;
3f00703 improve stuff (9 days ago) &lt;Xerus&gt;
</code></pre>

<h2>Problem</h2>

<p>I want to also see the tags of a commit if it has any associated with it, like the option <code>--decorate</code>, but I couldn't find any mention of the tags in the formatting documentation.</p>
","0","6723250","",""
"56694961","8384","2019-06-20 23:15:08","12","859","<git><format><git-branch><git-log>","Why does a pipe remove the branch names from git log?","<p>when I run</p>

<pre><code>&gt; git log --oneline
</code></pre>

<p>I get output that looks like this</p>

<pre><code>abcdef0 (head, branch, origin/branch) comment
0987654 different comment
1234567 (different-branch, origin/branch) third comment
</code></pre>

<p>But as soon as I pipe the output to anything (e.g. <code>&gt; git log --oneline | cat</code>), the branch names are gone</p>

<pre><code>abcdef0 comment
0987654 different comment
1234567 third comment
</code></pre>

<p>This means I can't grep, or add line numbers, or anything like that.</p>

<p>(It's also missing the colors and <code>less</code> style behavior, but I don't care about that either way today)</p>

<p>Is this something I can re-enable via a command-line parameter?</p>
","0","8384","0","0"
"55427101","1773938","2019-03-30 00:45:02","2","40","<git><git-log>","How do I list the time stamp and commit message for git comits made this year?","<p>I have a git history with multiple branches with some unmerged. I would like to extract a log of each comit forward from a single past comit to today. </p>

<p>I have had a look at Git Log but havent found a function which just gives me everything. I have just set a tag on the branch to set the starting point. </p>

<p>I would like the history to have the timestamp, comit message and branch.</p>
","0","1773938","0","0"
"55656434","1445015","2019-04-12 16:57:40","3","12761","<python><git><git-log><gitpython>","Parse git log using gitpython","<p>In python, I want to get log of all commits for a file in a git repository and parse the information in the log (hash, author name, author mail, author date, committer name, committer mail, commit date, and commit message). Currently, I can get the raw git log using either gitpython or calling shell commands through subprocess. </p>

<p>Using gitpython:</p>

<pre><code>g=git.Git(path)
loginfo=g.log(""--pretty=fuller"",'--follow',""&lt;filename&gt;"")
</code></pre>

<p>Using subprocces call:</p>

<pre><code>lines = subprocess.check_output(
        ['git', 'log','--follow',""--pretty=fuller"","" 
         &lt;filename""],stderr=subprocess.STDOUT)
</code></pre>

<p>However, after that I want to parse the raw log but I am unable to find a suitable library/method in gitpython for that. Also, I would want the dates to be parsed in python datetime format as well. Can you help?</p>
","0","1445015","0","0"
"72653563","18644471","2022-06-17 01:52:04","4","249","<git><git-log>","`git log --name-only` show coauthors","<p>Although I have added Co-authored-by: in the commit message, <code>git log --name-only</code> only shows one author, not the others, how can I make git show the coauthors?</p>
","0","18644471","0","0"
"55932865","136054","2019-05-01 07:21:12","1","154","<git><git-log>","Find the modified java files between two branches after a date in git","<p>I am trying to find all the modified java file between two branches after the 1st of April. I could find all the modified java files with the following command. Is there anyway to apply date filter as well? Thanks </p>

<pre><code>git --no-pager diff --name-only feature_branch..master | grep .java
</code></pre>

<p><strong>Solution</strong> </p>

<p>Thanks @romainvaleri. I used the following command to identify the modified Java files.</p>

<pre><code>git log --since=""1st April"" --name-only --pretty=format:"""" feature_barnch..master -- *.java | sort -u | sed 's/.*\///' 
</code></pre>
","0","136054","",""
"72800293","5889169","2022-06-29 11:02:48","-1","91","<git><git-log><recover>","Git: restore a deleted branch. (i can find a commit within that branch with `git log -p SHA`)","<p>I deleted a branch that i want to restore.
I tried to recover it and the only thing i could find is a commit from <code>git-log</code> running:
<code>git log -p 4afa3abc4218b6251dea24c910eaced6af465d11</code>. Also - it seems that this SHA appears only on my local mac (when my colleague run this git-log command he gets an error)</p>
<p>I can see the changes in the output and i would like to create a brand new branch from this git log output.</p>
<p>How can i easily do that?</p>
","1","5889169","",""
"56018666","8602926","2019-05-07 08:41:04","2","61","<git><git-log><data-loss><data-corruption>","Always losing git history when switching PCs","<p>I am using a SATA SSD that I always keep on myself and that I'm storing all my projects on.<br>
Recently though, I started losing data when plugging the SSD into a PC after being plugged into another one (most files ended up being nothing but this character, repeated x times: �)<br>
Both devices run Windows 10.<br>
If this happens, I can plug the SSD out and back in, resulting in the data being restored.<br>
But after I do this, all files in my workspace suddenly end up being unstaged and if I try to open the git log with the VS Code extension <a href=""https://github.com/DonJayamanne/gitHistoryVSCode"" rel=""nofollow noreferrer"">Git History</a> (v0.4.6), this is git's output:</p>

<pre><code>git rev-parse --show-toplevel
git rev-parse --show-toplevel
git rev-parse --show-toplevel
git rev-parse --show-toplevel
git rev-parse --show-toplevel
git rev-parse --show-toplevel
git rev-parse --show-toplevel
git rev-parse --show-toplevel
git rev-parse --show-toplevel
fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
</code></pre>

<p>This basically always means I have to delete the <code>.git</code> folder and having to <code>git init</code> again, resulting in all my progress being lost.<br>
I've also tried doing the things in the answers of <a href=""https://stackoverflow.com/questions/12267912/git-fatal-ambiguous-argument-head-unknown-revision-or-path-not-in-the-workin"">this Stackoverflow question</a> but that also just clears the history and I lose all progress.<br>
This is really, really frustrating and I don't know what the exact issue is.<br><br>
The git login information is the exact same on both PCs.<br>
SSD hot-swapping is enabled on both PCs and I always make sure to use the Windows thing to remove the external drive securely or wait until the PC is shut down completely but still this keeps happening.</p>
","0","8602926","",""
"56139490","11501030","2019-05-14 22:33:50","0","249","<git><git-log>","git log filter with sparse checkout","<p>I have a large project that I use sparse checkout to exclude one directory (which is quite large).  However, when I use git log, the commit in the directory that I already excluded with sparse checkout will show up, polluting my real interests. </p>

<p>The answer given for <a href=""https://stackoverflow.com/questions/47180781/filter-git-commit-history-after-sparse-checkout"">this question</a> by specifying one directory doesn't work for me since I need to exclude one directory but include many. I came from perforce where if I specify <code>...</code>, it will not include files or directories that were excluded by my p4 client spec.</p>
","0","11501030","",""
"73095368","18644471","2022-07-24 02:20:43","1","51","<git><git-log>","How to print out each version of a given file in ""git log""?","<p>We can generate a patch for each version of a given file by:</p>
<pre class=""lang-bash prettyprint-override""><code>git log -p -- &lt;filename&gt;
</code></pre>
<p>But it only shows the diff of each version, I want it to show the full content of the file at each version, so I can next parse the output as my demand. Does <code>git log</code> support this?</p>
","0","18644471","",""
"56452635","16957","2019-06-04 23:46:11","2","2808","<git><branch><git-log>","Visualize git branch dependency","<p>Is there a tool that can show me what branches a specific branch has been merged into? For example, if ""A"" has been merged into ""B"" and ""C"" but not ""D"", how do I output ""B"" and ""C""? I'd only need the branch names.</p>
","0","16957","0","0"