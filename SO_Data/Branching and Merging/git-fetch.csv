Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"292357","6068","2008-11-15 09:51:09","13636","3379961","<git><version-control><git-pull><git-fetch>","What is the difference between 'git pull' and 'git fetch'?","<p>What are the differences between <a href=""https://git-scm.com/docs/git-pull"" rel=""noreferrer""><code>git pull</code></a> and <a href=""https://git-scm.com/docs/git-fetch"" rel=""noreferrer""><code>git fetch</code></a>?</p>
","7","6068","0","0"
"65336955","1169587","2020-12-17 08:20:29","0","2665","<git><git-fetch>","git fetch remote branch, but cannot see in local repository or working copy","<p>my current branch is staging_kei20201211, I want to fetch the latest code from origin/staging branch, I type the following command</p>
<pre><code>git fetch origin staging
</code></pre>
<p>and it said
<a href=""https://i.stack.imgur.com/EaUNB.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/EaUNB.jpg"" alt=""fetch output"" /></a></p>
<p>1)
then I go to visual studio to see the history of my branch staging_kei20201211, but I cannot see the commit c03c99691 as stated in the fetch output, why?</p>
<ol start=""2"">
<li>what is the meaning of the fetch output screen?
From http://XXXXXX/gitea/elm-ha/CFMS</li>
</ol>
<ul>
<li>branch                staging    -&gt; FETCH_HEAD
c97e1dbb7..c03c99691  staging    -&gt; origin/staging</li>
</ul>
","1","1169587","",""
"76239473","1715765","2023-05-12 19:41:33","-3","53","<git><git-config><git-fetch>","How do I set git fetch --force in git config?","<p>I want every fetch and pull to get tags from origin, replacing local ones if they differ, and delete tags and <code>origin/</code> branches that are not on origin, so I did this:</p>
<pre><code>git config --global fetch.tags true
git config --global fetch.force true
git config --global fetch.prune true
git config --global fetch.pruneTags true
</code></pre>
<p>I still need to type <code>git fetch --force</code> to &quot;clobber&quot; existing tags. The rest works fine. How do I properly add the force flag to git config?</p>
<p>This is in my .gitconfig:</p>
<pre><code>[fetch]
    tags = true
    force = true
    prune = true
    pruneTags = true
</code></pre>
","5","1715765","",""
"40602721","1175080","2016-11-15 05:34:39","1","1102","<git><git-merge><git-pull><git-fork><git-fetch>","Syncing fork with upstream: git fetch + git checkout + git merge vs. git checkout + git pull","<p>The documentation at <a href=""https://help.github.com/articles/syncing-a-fork/"" rel=""nofollow noreferrer"">Github-Help: Syncing a Fork</a> shows three commands to keep my GitHub fork in sync with the upstream repo.</p>

<pre><code>git fetch upstream
git checkout master
git merge upstream/master
</code></pre>

<p>Can I use the following two commands instead of the above three?</p>

<pre><code>git checkout master
git pull upstream/master
</code></pre>

<p>Are the two sets of commands equivalent, or are there differences between them?</p>
","4","1175080","",""
"59414497","7629560","2019-12-19 17:38:19","0","80","<git><git-pull><git-fetch>","What is the reason of the existence of ""git pull --all""?","<p>Before anything, <em>I know the difference between <code>git pull</code> and <code>git fetch</code></em>.</p>

<p>However, I'd like to pull every branch at a time, and I learned that a command <code>git pull --all</code> exists, but it did not accomplish that purpose, as it fetches all branches but only merges the one I am working in with its remote (and other stackoverflow posts like <a href=""https://stackoverflow.com/a/4318198/7629560"">this</a> assured me that).</p>

<p>The documentation on <code>man git-pull</code> references the <code>git fetch</code> command and in the <code>--all</code> section says </p>

<pre><code>   Options related to fetching
   --all
       Fetch all remotes.
</code></pre>

<p>My question is, then, <strong>therotical</strong>. </p>

<p>Does it make sense to exist a <code>git pull --all</code> since its name is misleading? </p>

<p>And does it make sense to reference <code>man git-fetch</code> in a way that also misleads, since <code>git pull --all</code> is not the same as <code>git fetch --all</code> ?</p>

<p>(<em>I know this question may sound like primarily opinion based question, however maybe I can get from you an understanding of these git commands that I do not have now. And others may not have it as well.</em>)</p>
","0","7629560","",""
"40834966","5063401","2016-11-27 23:07:07","0","927","<git><github><push><git-commit><git-fetch>","pushing limited commit history to remote git","<p>I have a git repository on a lab machine at my school and have been running into an issue I've been trying to solve.  </p>

<p>Due to arrangement of the CUDA SDK we're using, I have two remotes in the same directory, but I do not want all the commits from one remote, origin, being pushed to the other remote, ""proj1"".  I'll be more clear below:</p>

<p>Originally, this directory had a git repository with a single remote, and for example, the following commit history:</p>

<pre><code>A-B-C-D-E &lt;-(origin/master)
</code></pre>

<p>I then added a second remote and created a local branch from which I would push to and fetch from:</p>

<pre><code>A-B-C-D-E-G &lt;-(origin/master) (master)
        '        
        '-F-H-I &lt;-(proj1/newbranch) (newbranch)
</code></pre>

<p>Now when I go to push my changes from ""newbranch"" to remote ""proj1/newbranch"", I do NOT want to push commits A-E with it, I want only to push from F and forward.</p>

<p>I know that an orphaned branch is exactly what I'm looking for here, but our lab is running git 1.7.x, which does not have that feature yet, and getting the admins to update it simply takes too long (we don't have permissions to do it ourselves of course).</p>

<p>I also read I could reorder my commits with rebase so that F is the oldest commit, then I could push a single commit to ""proj1"".  But wouldn't doing this alter/mess up my history on the master branch as well? (A-E are already on origin/master)</p>

<p>So I am wondering if I am missing some feature of git to accomplish what I'd like?  Is there some other way to delete the commit history of ""newbranch"" or at least break it off?  Maybe what I am doing is bad practice, but like I said, I need to have all files in this directory for the CUDA SDK, and I don't want to mess with that.  </p>
","7","5063401","",""
"3357122","286802","2010-07-28 20:16:04","333","180647","<git><git-rebase><git-pull><git-fetch>","What is the difference between git pull and git fetch + git rebase?","<p><a href=""https://stackoverflow.com/questions/292357/whats-the-difference-between-git-pull-and-git-fetch"">Another question</a> says that <code>git pull</code> is like a <code>git fetch</code> + <code>git merge</code>.</p>
<p>But what is the difference between <code>git pull</code> and <code>git fetch</code> + <code>git rebase</code>?</p>
","3","286802","0","0"
"22083818","364100","2014-02-28 00:32:52","3","133","<git><version-control><fetch><git-fetch>","What's the difference between 'git fetch' and 'git fetch --all'","<p>It seems to make no difference for the repo I'm working with, and the man page is not very helpful.</p>
","0","364100","0","0"
"59920937","596370","2020-01-26 17:34:31","2","1008","<git><gitlab><git-remote><git-fetch>","git command warning says redirecting to <url>.git","<p>I am holding a project on <code>gitlab</code>, and I am having a cloned copy on my <code>ubuntu</code> desktop. On recent days I am facing a weird warning (<code>redirecting to https://gitlab.com/&lt;my_handle&gt;/&lt;project&gt;.git/</code>) on <code>remote update</code> and <code>fetch</code> operation.</p>

<p>Below mentioned is my <code>remote</code>, do I need to update it to hold <code>.git</code> at the end of URL ?</p>

<pre><code>$ git remote -v
origin  https://gitlab.com/&lt;my_handle&gt;/&lt;project&gt; (fetch)
origin  https://gitlab.com/&lt;my_handle&gt;/&lt;project&gt; (push)
</code></pre>

<p>Note: The other existing <a href=""https://stackoverflow.com/questions/53012504/what-does-the-warning-redirecting-to-actually-mean"">question</a> does not answer this doubt.</p>
","4","596370","",""
"3705078","21981","2010-09-13 23:10:56","11","13442","<git><hudson><git-fetch>","Why does git fetch via hudson fail, while git fetch via the command line works?","<p>I'm trying to fetch a read-only git repository from github and have it be built via hudson.  This process is failing.</p>

<p>This is the hudson output:</p>

<pre><code>Started by an SCM change
Checkout:workspace / d:\hudson\home\jobs\gdcm-hudson\workspace - hudson.remoting.LocalChannel@19ba1d8
Using strategy: Default
Checkout:workspace / d:\hudson\home\jobs\gdcm-hudson\workspace - hudson.remoting.LocalChannel@19ba1d8
GitAPI created
Fetching changes from the remote Git repository
Fetching upstream changes from git://github.com/malaterre/gdcm.git
[workspace] $ ""C:\Program Files (x86)\Git\bin\git.exe"" fetch -t git://github.com/malaterre/gdcm.git +refs/heads/*:refs/remotes/origin/*
[workspace] $ ""C:\Program Files (x86)\Git\bin\git.exe"" ls-tree HEAD
ERROR: Problem fetching from origin / origin - could be unavailable. Continuing anyway
ERROR: Could not fetch from any repository
FATAL: Could not fetch from any repository
hudson.plugins.git.GitException: Could not fetch from any repository
    at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:674)
    at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:641)
    at hudson.FilePath.act(FilePath.java:753)
    at hudson.FilePath.act(FilePath.java:735)
    at hudson.plugins.git.GitSCM.checkout(GitSCM.java:641)
    at hudson.model.AbstractProject.checkout(AbstractProject.java:1061)
    at hudson.model.AbstractBuild$AbstractRunner.checkout(AbstractBuild.java:479)
    at hudson.model.AbstractBuild$AbstractRunner.run(AbstractBuild.java:411)
    at hudson.model.Run.run(Run.java:1273)
    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:46)
    at hudson.model.ResourceController.execute(ResourceController.java:88)
    at hudson.model.Executor.run(Executor.java:129)
</code></pre>

<p>When I run that fetch command directly via the git bash command line, I get no response (which I assume means it's worked).</p>

<p>I looked at this possible solution:
<a href=""http://issues.hudson-ci.org/browse/HUDSON-7141?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel"" rel=""nofollow noreferrer"">http://issues.hudson-ci.org/browse/HUDSON-7141?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel</a></p>

<p>But using that version of the plugin did not change this behavior.</p>

<p>I haven't even gotten to having it work with cmake yet, just downloaded consistently.  How can I get this to work?</p>

<p>edit: This problem is not a repro of <a href=""https://stackoverflow.com/questions/2370371/problem-cloning-fetching-repository-using-git-plugin-for-hudson-on-windows"">Problem cloning / fetching repository using Git plugin for Hudson on Windows</a>, because I'm not running as a service on a server.</p>
","0","21981","0","0"
"22363400","1027004","2014-03-12 20:44:25","0","330","<git><git-push><git-pull><git-fetch>","Are git pull and push repository wide operations or branch specific?","<p>Trying to get a real handle on git : ) Is git pull a repository wide operation? Meaning, does it update your local branches (which are tracking remote branches) across the repository, or does it only fetch and merge for the currently checkedout branch?</p>

<p>Is the same true for push? What does --all do for push and pull?</p>

<p>Any help would rock!</p>

<p>Also, what does fetch do? Does it grab the info (files inside of the .git folder) for a specific branch? Or is the .git folder consistent across the whole repo? If I do fetch instead of clone, I can't really do anything after that, what do I do after fetching?</p>
","1","1027004","",""
"60190759","62131","2020-02-12 14:37:34","13","3715","<git><git-checkout><git-fetch><revision-history><git-sparse-checkout>","How do I clone, fetch or sparse checkout a single directory or a list of directories from git repository?","<p>How do I clone, fetch or sparse checkout a single file or directory or a list of files or directories from a git repository avoiding downloading the entire history or at least keeping history download at minimum?</p>
<p>For the benefit of people landing here, these are references to other similar questions:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository"">How do I clone a subdirectory only of a Git repository?</a></li>
<li><a href=""https://stackoverflow.com/questions/2466735/how-to-sparsely-checkout-only-one-single-file-from-a-git-repository"">How to sparsely checkout only one single file from a git repository?</a></li>
<li><a href=""https://stackoverflow.com/questions/4114887/is-it-possible-to-do-a-sparse-checkout-without-checking-out-the-whole-repository"">Is it possible to do a sparse checkout without checking out the whole repository first?</a></li>
</ul>
<p>These similar questions were asked long ago and git evolved ever since, which ended up causing a flood of different answers, some better, some worse, depending on the version of git being considered. The trouble is that not a single answer from these aforementioned questions attend all requirements from all these questions combined, which means that you have to read all answers and compile in your head your own answer which eventually attend all requirements.</p>
<p>This question here expands on previous questions mentioned, imposing more flexible and stringent requirements than all other questions combined. So, once again:</p>
<p>How do I clone, fetch or sparse checkout a single file or directory or a list of files or directories from a git repository avoiding downloading the entire history or at least keeping history download at minimum?</p>
","6","62131","0","0"
"66854653","14919032","2021-03-29 12:58:55","0","138","<python><git><git-fetch>","Why does git fetch not always update the local branch to show when it is out of sync with remote","<p>I have a script that automates some large pull-request tasks that we do. One thing I do is to try to automatically sync two of the branches we use. I used to use a token to do a <code>git fetch</code> but had to change it recently due to some policy changes.</p>
<p>So what I'm doing now is the below.</p>
<pre><code>subprocess.check_call(['git', 'fetch', f'https://{username}:{password}@{repo_url}'], cwd=repo_path)
</code></pre>
<p>But, I've noticed that this doesn't always show when my local branch is out of sync with the remote branch.</p>
<p><strong>Question</strong></p>
<p>My question is this, what is different about <code>git fetch</code> versus when I use my username, password, and repo_url that causes it not to notice remote changes when I use my username and credentials to do the fetch? What should I be doing different? And what should I be using instead to guarantee that my script notices when the remote branch is out of sync?</p>
<p><strong>Further Details</strong></p>
<p>I've tried scripting the git fetch all by itself, and it works just fine, only that it requires me putting in my username and password again.</p>
<pre><code>subprocess.check_call(['git', 'fetch'], cwd=repo_path)
</code></pre>
","8","14919032","",""
"50006450","1391026","2018-04-24 16:15:51","0","384","<git><git-push><git-pull><git-fetch><git-notes>","git overrides refs/notes when fetching?","<p>I'm keeping my changelog in <code>git-notes --ref changelog</code> when developing. I'm always putting a note on the merge-to-master commit and push it out to three remotes (<code>git push &lt;remote&gt; refs/notes/changelog</code>) - but every time I forget to push to one remote and <code>fetch</code> from it, the ref gets overridden with some old version:</p>

<p>(Sorry for german locale)</p>

<pre><code>$ git fetch github -p
Von github.com:&lt;user&gt;/&lt;repo&gt;
 + ca36d98d...1f3b9041 refs/notes/changelog -&gt; refs/notes/changelog  (Aktualisierung erzwungen)
</code></pre>

<p>How to prevent that? Is it somehow related to my <code>.git/config</code>?</p>

<p>(excerpt from <code>.git/config</code>):</p>

<pre><code>[remote ""github""]
    url = git@github.com:&lt;user&gt;/&lt;repo&gt;.git
    fetch = +refs/heads/*:refs/remotes/github/*
    fetch = +refs/pull/*/head:refs/remotes/github/pr/*
    push = +refs/notes/changelog:refs/notes/changelog
    fetch = +refs/notes/changelog:refs/notes/changelog
[notes ""rewrite""]
    rebase = true
    amend = true
[notes]
    rewriteRef = refs/notes/changelog
</code></pre>
","1","1391026","",""
"38673450","310370","2016-07-30 11:29:58","3","3672","<git><github><git-submodules><git-pull><git-fetch>","How to fetch submodules in github","<p>I have used the following commands but submodules are not fetched :(</p>

<pre><code>git remote add upstream https://github.com/NecronomiconCoding/NecroBot

git fetch upstream

git merge upstream/master

git submodule foreach git pull upstream master
</code></pre>

<p>However the submodule <code>FeroxRev @ 33654cd</code> is not fetched into my local repository :(</p>

<p>So how can I fetch the latest submodule?</p>

<p>Here my project  : <a href=""https://github.com/MonsterMMORPG/aaddd/"" rel=""nofollow"">https://github.com/MonsterMMORPG/aaddd/</a></p>

<p>When I click submodule name it goes into remote repository</p>
","0","310370","0","0"
"33069728","969451","2015-10-11 20:20:27","3","432","<git><branch><git-fetch>","How do I remove all remote git branches","<p>I want to remove locally all branches that I can see with <code>git branch -r</code>. I've already removed all files from .git/refs/remote/*/ and appropriate records from .git/info/refs, but they are still there.</p>
","6","969451","",""
"33193121","4162708","2015-10-18 00:35:09","1","278","<git><git-branch><git-pull><git-fetch>","git branch -r shows different remote shared repo in different local working directory","<p>I created a shared repo and then clone it into two folders (A and B). All in the same PC.</p>

<p>Now there are two branches, <code>master</code> and <code>v0</code>. Folder A and B are now in branch <code>v0</code>. On A I deleted the <code>v0</code> branch on remote repo.</p>

<pre><code>$ git push origin --delete v0
To file:///home/nanger/github/shared1.git
 - [deleted]         v0
</code></pre>

<p>and then I tried to pull the remote repo on both A and B (in branch <code>v0</code>):</p>

<p>Now, I see that</p>

<p>on A:</p>

<pre><code>$ git pull
Already up-to-date.

$ git branch -r
origin/master

$ git branch
* master
v0
</code></pre>

<p>on B:</p>

<pre><code>$ git pull
Already up-to-date

$ git branch -r
origin/HEAD -&gt; origin/master
origin/master
origin/v0

$ git branch
* master
v0
</code></pre>

<p>Why do A and B have different views of the remote repo?</p>
","2","4162708","",""
"33197684","1136218","2015-10-18 11:58:41","0","682","<git><version-control><git-branch><git-fetch>","Deleted branches after 'git fetch -p'","<p>I try to delete several branches from my project:</p>

<pre><code>leo:Project leo$ git push origin --delete effects
To https://github.com/gituser/Project.git
 - [deleted]         effects
leo:Project leo$ git push origin --delete viewport
To https://github.com/gituser/Project.git
 - [deleted]         viewport
</code></pre>

<p>But after <code>fetch --prune</code> that says </p>

<blockquote>
  <p>After fetching, remove any remote-tracking references that no longer
  exist on the remote.</p>
</blockquote>

<p>I still have deleted branches on local machine:</p>

<pre><code>leo:Project leo$ git fetch -p
leo:Project leo$ git branch -a
  develop
  effects
* master
  viewport
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/master
</code></pre>

<p>Any suggestions? </p>
","5","1136218","",""
"17429442","1007758","2013-07-02 15:19:36","18","23447","<git><git-svn><git-merge><git-rebase><git-fetch>","Git: How does git svn fetch work?","<p>How does <code>git svn fetch</code> work? Where is that branch which is fetched so that I can merge or rebase with my master or other branch? Where is the data fetched because <code>git remote</code> doesn't give me anything on my <code>git svn</code> repository?</p>
","0","1007758","0","0"
"50792586","8955175","2018-06-11 07:36:48","0","156","<git><github><git-fetch>","What happens actually when I do git fetch and git checkout origin/branch from a local branch where new files are there?","<p>Consider I have a local branch <code>A</code> and two remote branches <code>A</code> and <code>B</code>. <br />
The <strong>local</strong> branch <code>A</code> contains <strong>some files</strong> which are not in <strong>remote</strong> <code>B</code>.<br />
then, I do as follows: <br /> <br />
<code>git fetch</code> <br/>
<code>git checkout origin/B</code><br /></p>

<blockquote>
  <p>then, those <strong>files from local A</strong> remains there, I removed those files and commit with my required changes in some files which were there in <code>origin/B</code>:<br /></p>
</blockquote>

<p><code>git add .</code><br />
<code>git commit -m ""fixes made""</code></p>

<blockquote>
  <p>then, head got detached with showing the commit hash</p>
</blockquote>

<p>So, I have two questions here</p>

<ol>
<li><p>Why those files from my local branch <code>A</code> copied/remained to/in <code>origin/B</code>?</p></li>
<li><p>Why head got detached?</p></li>
</ol>
","0","8955175","",""
"38993559","4942704","2016-08-17 10:04:08","1","95","<git><git-pull><git-reset><git-fetch>","Git update local ignoring few files (is not .gitignore)","<pre><code>Scenario:
 Bitbucket:
  file1 
  file2 
  file3  

 Local:
  file1 - person1 is working on it
  file2 - person2 is working on it
  file3 - common with personal hardcoded configuration
  untracked files
</code></pre>

<p>person1 commits and pushes his changes on file1.
How person2 can update file1 in his local without resetting file2, file3 and untracked files?
It's a while that I'm trying to do it but I still don't find an easy way!
Thanks.</p>
","1","4942704","",""
"58341371","719427","2019-10-11 12:33:37","0","274","<git><git-fetch>","Does git have some kind of caching mechanism?","<p>I am having a ""weird"" issue with Git on Windows and I am not sure if something has changed recently as for example a cache mechanism was added or kind off. </p>

<p>I have a branch locally: <code>branch_A</code> and that branch was deleted from the remote. How do I know? Because ...</p>

<ul>
<li>I checked the Github PR and it was merged and the branch was deleted</li>
<li>I ran the command <code>git branch -r | grep branch_A</code> and no results were returned</li>
</ul>

<p>For some reason the command:</p>

<pre><code>git checkout master &amp;&amp; git pull origin master &amp;&amp; git fetch -p
</code></pre>

<p>Is not telling me all the branches that were deleted from the remote. In other words it shows some of the branches that were deleted from remote but miss some others that were deleted as well.</p>

<p>That leads me to end up with dead branches and making it hard for me to know which branches should I keep updated and I have to go through all the PR checking if the branch was deleted or not so I cleanup my local repository.</p>

<blockquote>
  <p><strong>Note:</strong> I am not expecting the command to delete any branch locally it makes no sense because git does not know if I need it or not (as @Chris says on it's answer)</p>
</blockquote>

<p>The version I am running of Git is: <code>git version 2.23.0.windows.1</code>.</p>

<p>Does any one have an idea of what could be wrong here? Am I missing something?</p>
","2","719427","",""
"35591887","2926340","2016-02-24 02:00:14","39","60414","<git><git-remote><git-fetch>","How to undo 'git fetch'","<p>I just added additional <code>remote A</code> to my <code>repo B</code> and then run <code>git fetch A</code>. How can I undo the fetch? If I just remove <code>remote A</code>: <code>git remote remove A1</code> would it undo fetch?</p>

<h3>UPDATE:</h3>

<pre><code>$ git remote add A path/to/A
$ git fetch A
</code></pre>

<p>The above are commands I run so in result I got all branches fetched to my <code>repo B</code> however I just need one specific branch from <code>repo A</code> and I need it to go in specific folder on <code>repo B</code> but that is another story <a href=""https://stackoverflow.com/questions/35590795/merge-code-between-two-dfferent-git-repositories"">Merge code between two dfferent git repositories</a>.</p>
","12","2926340","0","0"
"23517286","991788","2014-05-07 12:03:19","1","111","<git><git-fetch>","Does git fetch pull data for all branches","<p>If I am on a particular branch and I do a <code>git fetch</code> does it pull down all the data for that branch only or for all branches for that repository?</p>
","0","991788","",""
"51220152","1522479","2018-07-07 05:21:10","1","79","<git><git-fetch>","cannot see branches after git fetch","<p>I try to make git fetch, but after the command is completed, it doesn't expose any info in the console. git config --get remote.origin.fetch says:</p>

<pre><code>+refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>?</p>
","1","1522479","0","0"
"52661928","5353461","2018-10-05 08:59:18","5","1349","<git><git-fetch>","Get only tags / references of a git remote repository","<p>Is it possible to get the tags / references of a repository (eg GitHub) without downloading objects / files?</p>

<p>My use case is in packaging the latest beta release of some software which has a long history and is therefore large to clone.</p>

<p>Ideally after I determine the tag that I wish to use, I can then:</p>

<pre><code>git clone -b ""$tag"" --depth=1
</code></pre>
","1","5353461","0","0"
"36630490","4912604","2016-04-14 17:52:59","37","19322","<git><git-fetch>","Git fetch origin vs git fetch --all","<p>What is the difference between the following git commands?</p>

<pre><code>git fetch origin
</code></pre>

<p>and</p>

<pre><code>git fetch --all
</code></pre>

<p>Running them from the command line looks like they do the same thing.</p>
","1","4912604","0","0"
"56953340","29726","2019-07-09 13:08:42","-1","88","<git><git-fetch>","git: fetching another branch fails","<p>I am doing parallel development with my team mate. We both created feature branches off of master (branchA - mine and branchB - his).
I want to rebase on top of his branch. I am in my local branch (branchA) and issue the following command:</p>

<blockquote>
  <p>git fetch branchB </p>
</blockquote>

<p>I get the following error: </p>

<blockquote>
  <p>fatal: 'branchB' does not appear to be a git repository fatal: Could
  not read from remote repository.</p>
  
  <p>Please make sure you have the correct access rights and the repository
  exists.</p>
</blockquote>

<p>However, branchB does exist. How can I fix it?</p>
","1","29726","",""
"73910605","14177746","2022-09-30 14:57:05","1","124","<git><github><jenkins><gitignore><git-fetch>","Can I set in Jenkins to not fetch every file from gitHUB?","<p>I have a project on gitHUB where I have two '.txt' file at .project level. I would use them for comparison a previus run to a new run to find out the difference.</p>
<p><a href=""https://i.stack.imgur.com/tRS1F.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tRS1F.png"" alt=""enter image description here"" /></a></p>
<p>I use Jenkins to build the project, but every time when a new Run starts, the git fetch overwrite thoso two '.txt' so it doesn't make sense anymore.</p>
<p>Can I set in Jenkins somehow to not overwrite all the files -or skip those two- when git fetch starting in the beggining of the run?</p>
","0","14177746","",""
"74010980","619177","2022-10-10 06:32:15","0","34","<git><git-fetch>","git fetch overwrote the current main with an old push to another remote, how to get my main back to how it is on github?","<p>I wanted to get the tags that another contributor added to a github remote, so I ran <code>git fetch --all --tags</code>.  The resulting fetch looked like this:</p>
<pre><code>$ git fetch --all --tags
Fetching origin
remote: Enumerating objects: 34, done.
remote: Counting objects: 100% (34/34), done.
remote: Compressing objects: 100% (18/18), done.
remote: Total 34 (delta 13), reused 34 (delta 13), pack-reused 0
Unpacking objects: 100% (34/34), 3.78 KiB | 10.00 KiB/s, done.
From https://github.com/myname/myrepo
 * [new branch]      chore/docker-setup -&gt; origin/chore/docker-setup
 * [new branch]      fix/lib-paths      -&gt; origin/fix/lib-paths
 * [new tag]         0.1.0              -&gt; 0.1.0
 * [new tag]         1.0.0              -&gt; 1.0.0
 * [new tag]         1.1.0              -&gt; 1.1.0
 * [new tag]         1.2.0              -&gt; 1.2.0
Fetching heroku
Fetching anotherRemote
</code></pre>
<p>My local repo now has the contents of <code>anotherRemote</code>, which I haven't pushed to in over a year, I'm guessing that's because <code>anotherRemote</code> was the final remote that was fetched? But when I tried pulling from <code>origin</code> I got:</p>
<pre><code>$ git pull origin main
From https://github.com/myname/myrepo
 * branch            main -&gt; FETCH_HEAD
Already up to date.
</code></pre>
<p>How do I get the contents of my local repo to actually match what's in <code>origin</code>?</p>
","8","619177","",""
"57290884","5410622","2019-07-31 12:35:30","0","5676","<git><subprocess><python-3.7><git-fetch>","git fetch https://<access-token>url-to-repo :git-branch not working","<p>I have a git repo with master and branch1. 
on branch1- I cloned in two locations and I have to reset it to one previous commit in one location and then force push it to remote and fetch it to another location and reset it. I have to do it in some python script with subprocess. As I am able to reset in location1 and force push to remote, but I am not able to fetch it in location2 with the access token in https URL. If I could give credentials directly it works fine but not with access token URL.</p>

<p>Tried: <code>git fetch https://&lt;access-token&gt;@repo-url :origin/branch1</code>
which outputs</p>

<blockquote>
  <ul>
  <li>branch            HEAD       -> FETCH_HEAD</li>
  </ul>
</blockquote>

<p>but origin/branch1 didn't go to the commit where the remote head is there, so I am not able to reset that specific commit.
while: </p>

<pre><code>  git fetch
  prompt - username &lt;entered&gt;
  prompt - password &lt;entered&gt;
</code></pre>

<p>makes origin/branch1 to the commit where I want and then I able to reset to it. </p>

<p>I expect some way to run <code>git fetch</code> command (can include credentials or access-token) and fetch the remote changes on branch1 so that I can reset it. As I am running from python subprocess, I couldn't provide credentials for the prompt.</p>
","1","5410622","0","0"
"74653225","6019420","2022-12-02 09:05:32","0","43","<git><git-fetch>","Network failure during git fetch command","<p>I'm trying to investigate what happens if the network would fail during a git fetch command.
I can't find any documentation that really goes into detail of the fetch command and digging into the git C source code seems a bit overwhelming. Where can I find some good detailed description what fetch really does?</p>
<p>I'm investigating the possibility of using git as a backup solution for binary files. If the network goes down in the middle of a fetch, will git clean up and remove the downloaded data objects? Or will they just be left in the .git folder?</p>
","3","6019420","",""
"74857682","477476","2022-12-20 01:31:52","1","116","<git><git-submodules><git-fetch>","`git submodule update` always keep fetching the same commit","<p>I have a Git repo with one submodule and two commits that change the submodule's HEAD. If I check out one of the commits, and do a <code>git submodule update</code>, this succeeds without having to connect to a remote, as I would expect since I have the given commit available locally. If I check out the other commit, however, <code>git submodule update</code> always does a fetch (and fails if the remote is not accessible), even though it keeps re-fetching the same commit.</p>
<p>Example session:</p>
<pre><code>$ git checkout -q 9089923 &amp;&amp; git submodule update
Submodule path 'chirp8-engine': checked out '341b24f2c3168a6e226ae3c249179426eff6dd99'
$ git checkout -q 289a15d &amp;&amp; git submodule update
From github.com:gergoerdi/chirp8-engine
 * branch            2fd6ace109f6337df97056aacdb40e5fb51f0e97 -&gt; FETCH_HEAD
Submodule path 'chirp8-engine': checked out '2fd6ace109f6337df97056aacdb40e5fb51f0e97'
$ git checkout -q 9089923 &amp;&amp; git submodule update
Submodule path 'chirp8-engine': checked out '341b24f2c3168a6e226ae3c249179426eff6dd99'
$ git checkout -q 289a15d &amp;&amp; git submodule update
From github.com:gergoerdi/chirp8-engine
 * branch            2fd6ace109f6337df97056aacdb40e5fb51f0e97 -&gt; FETCH_HEAD
Submodule path 'chirp8-engine': checked out '2fd6ace109f6337df97056aacdb40e5fb51f0e97'
$ git checkout -q 9089923 &amp;&amp; git submodule update
Submodule path 'chirp8-engine': checked out '341b24f2c3168a6e226ae3c249179426eff6dd99'
$ git checkout -q 289a15d &amp;&amp; git submodule update
From github.com:gergoerdi/chirp8-engine
 * branch            2fd6ace109f6337df97056aacdb40e5fb51f0e97 -&gt; FETCH_HEAD
Submodule path 'chirp8-engine': checked out '2fd6ace109f6337df97056aacdb40e5fb51f0e97'
</code></pre>
<p>What is the reason for this, and how do I change it so that <code>git submodule update</code> doesn't keep re-fetching the same commit?</p>
<p><strong>Edited to add</strong></p>
<p>I started tracing <code>git</code>, and the difference all comes down to what <code>git submodule--helper</code> does:</p>
<pre><code>$ GIT_TRACE=1 git submodule--helper run-update-procedure --oid 341b24f2c3168a6e226ae3c249179426eff6dd99  -- chirp8-engine
11:08:30.962038 git.c:455               trace: built-in: git submodule--helper run-update-procedure --oid 341b24f2c3168a6e226ae3c249179426eff6dd99 -- chirp8-engine
11:08:30.962259 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 341b24f2c3168a6e226ae3c249179426eff6dd99 --not --all
11:08:30.963983 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 341b24f2c3168a6e226ae3c249179426eff6dd99 --not --all
11:08:30.965639 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git checkout -q -f 341b24f2c3168a6e226ae3c249179426eff6dd99
11:08:30.966504 git.c:455               trace: built-in: git checkout -q -f 341b24f2c3168a6e226ae3c249179426eff6dd99
Submodule path 'chirp8-engine': checked out '341b24f2c3168a6e226ae3c249179426eff6dd99'
</code></pre>
<pre><code>$ GIT_TRACE=1 git submodule--helper run-update-procedure --oid 2fd6ace109f6337df97056aacdb40e5fb51f0e97  -- chirp8-engine 
11:08:35.917283 git.c:455               trace: built-in: git submodule--helper run-update-procedure --oid 2fd6ace109f6337df97056aacdb40e5fb51f0e97 -- chirp8-engine
11:08:35.917522 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 2fd6ace109f6337df97056aacdb40e5fb51f0e97 --not --all
11:08:35.919289 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git fetch
11:08:35.920134 git.c:455               trace: built-in: git fetch
11:08:35.920490 run-command.c:668       trace: run_command: unset GIT_DIR GIT_PREFIX; GIT_PROTOCOL=version=2 ssh -o SendEnv=GIT_PROTOCOL git@github.com 'git-upload-pack '\''gergoerdi/chirp8-engine.git'\'''
11:08:38.965515 run-command.c:668       trace: run_command: git rev-list --objects --stdin --not --all --quiet --alternate-refs
11:08:39.272774 run-command.c:1597      run_processes_parallel: preparing to run up to 1 tasks
11:08:39.272791 run-command.c:1629      run_processes_parallel: done
11:08:39.272799 run-command.c:668       trace: run_command: git maintenance run --auto --no-quiet
11:08:39.273925 git.c:455               trace: built-in: git maintenance run --auto --no-quiet
11:08:39.274557 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 2fd6ace109f6337df97056aacdb40e5fb51f0e97 --not --all
11:08:39.276381 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git fetch origin 2fd6ace109f6337df97056aacdb40e5fb51f0e97
11:08:39.277324 git.c:455               trace: built-in: git fetch origin 2fd6ace109f6337df97056aacdb40e5fb51f0e97
11:08:39.277686 run-command.c:668       trace: run_command: unset GIT_DIR GIT_PREFIX; GIT_PROTOCOL=version=2 ssh -o SendEnv=GIT_PROTOCOL git@github.com 'git-upload-pack '\''gergoerdi/chirp8-engine.git'\'''
11:08:42.446569 run-command.c:668       trace: run_command: git rev-list --objects --stdin --not --all --quiet --alternate-refs
From github.com:gergoerdi/chirp8-engine
 * branch            2fd6ace109f6337df97056aacdb40e5fb51f0e97 -&gt; FETCH_HEAD
11:08:42.754265 run-command.c:1597      run_processes_parallel: preparing to run up to 1 tasks
11:08:42.754283 run-command.c:1629      run_processes_parallel: done
11:08:42.754295 run-command.c:668       trace: run_command: git maintenance run --auto --no-quiet
11:08:42.755355 git.c:455               trace: built-in: git maintenance run --auto --no-quiet
11:08:42.755976 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git checkout -q -f 2fd6ace109f6337df97056aacdb40e5fb51f0e97
11:08:42.756942 git.c:455               trace: built-in: git checkout -q -f 2fd6ace109f6337df97056aacdb40e5fb51f0e97
Submodule path 'chirp8-engine': checked out '2fd6ace109f6337df97056aacdb40e5fb51f0e97'
</code></pre>
<p>In particular, the trace diverges right at the start:</p>
<pre><code>$ GIT_TRACE=1 git submodule--helper run-update-procedure --oid 341b24f2c3168a6e226ae3c249179426eff6dd99  -- chirp8-engine
11:08:30.962038 git.c:455               trace: built-in: git submodule--helper run-update-procedure --oid 341b24f2c3168a6e226ae3c249179426eff6dd99 -- chirp8-engine
11:08:30.962259 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 341b24f2c3168a6e226ae3c249179426eff6dd99 --not --all
11:08:30.963983 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 341b24f2c3168a6e226ae3c249179426eff6dd99 --not --all
</code></pre>
<p>vs</p>
<pre><code>$ GIT_TRACE=1 git submodule--helper run-update-procedure --oid 2fd6ace109f6337df97056aacdb40e5fb51f0e97  -- chirp8-engine 
11:08:35.917283 git.c:455               trace: built-in: git submodule--helper run-update-procedure --oid 2fd6ace109f6337df97056aacdb40e5fb51f0e97 -- chirp8-engine
11:08:35.917522 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 2fd6ace109f6337df97056aacdb40e5fb51f0e97 --not --all
11:08:35.919289 run-command.c:668       trace: run_command: cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git fetch
</code></pre>
<p>Indeed, there is a difference in the output of <code>cd chirp8-engine; unset GIT_PREFIX; GIT_DIR=.git git rev-list -n 1 $SUBMODULE_COMMIT --not --all</code> depending on which commit is checked out in the submodule, but that should be expected since <code>2fd6ace</code> is an ancestor of <code>341b24f</code>.</p>
","0","477476","",""
"75040372","8590320","2023-01-07 12:36:40","5","82","<git><git-config><git-fetch>","Did git configuration `branch.<name>.fetch` ever exist?","<p>Git configuration <code>branch.&lt;name&gt;.fetch</code> is mentioned in the first <a href=""https://git-scm.com/docs/git-fetch#_examples"" rel=""noreferrer""><code>git-fetch</code> example</a><sup>1</sup>:</p>
<blockquote>
<ul>
<li><p>Update the remote-tracking branches:</p>
<pre><code>$ git fetch origin
</code></pre>
<p>The above command copies all branches from the remote refs/heads/ namespace and stores them to the local refs/remotes/origin/ namespace, unless the branch..fetch option is used to specify a non-default refspec.</p>
</li>
</ul>
</blockquote>
<p>But I can't find its doc in <a href=""https://git-scm.com/docs/git-config"" rel=""noreferrer""><code>git-config</code>'s doc</a>. Did <code>branch.&lt;name&gt;.fetch</code> ever exist?</p>
<p>Searching in <code>git-config</code>'s doc for configs starting with <code>branch.</code> or ending with <code>.fetch</code>, it seems <code>branch.&lt;name&gt;.fetch</code> is a typo of <code>remote.&lt;name&gt;.fetch</code>.</p>
<p><sup>1</sup> This example was added in <a href=""https://github.com/git/git/commit/d504f6975d34025ed3b5478b657789410b52cdb1"" rel=""noreferrer"">commit d504f69</a> in 2009.</p>
","4","8590320","",""
"76033075","12574341","2023-04-17 08:23:18","0","53","<git><version-control><git-fetch>","git remove single line from file in git history","<p>I accidentally committed a line of code that was not meant to be part of the commit.</p>
<pre><code>class Engine {
    x: X
    protected _events: Event // &lt;-- this line was accidentally included
    y: Y
</code></pre>
<p>the committed version needs to instead be</p>
<pre><code>class Engine {
    x: X
    y: Y
</code></pre>
<p>I have already made more commits afterwards, so doing <code>git reset</code> and manually re-staging is not tenable.</p>
<p>Following <a href=""https://stackoverflow.com/a/7198036/12574341"">another post</a>, I attempted this command</p>
<pre class=""lang-bash prettyprint-override""><code>git filter-branch --tree-filter 'sed -i &quot;/protected _events: Event/ d&quot; src/engine/Engine.ts' -- --all
</code></pre>
<p>but receive the following error</p>
<pre class=""lang-bash prettyprint-override""><code>WARNING: git-filter-branch has a glut of gotchas generating mangled history
         rewrites.  Hit Ctrl-C before proceeding to abort, then use an
         alternative filtering tool such as 'git filter-repo'
         (https://github.com/newren/git-filter-repo/) instead.  See the
         filter-branch manual page for more details; to squelch this warning,
         set FILTER_BRANCH_SQUELCH_WARNING=1.
Proceeding with filter-branch...

fatal: bad revision '_events:'
</code></pre>
<p>What is going wrong?</p>
","2","12574341","",""
"7365415","39381","2011-09-09 17:43:12","17","10058","<git><branch><git-push><git-pull><git-fetch>","pull-only repo's 'git status' saying the branch is ahead of origin/master. Why?","<p>So here's the situation:</p>
<blockquote>
<p>$ git status<br />
# On branch master<br />
# Your branch is ahead of 'origin/master' by [x] commits.<br />
#</p>
</blockquote>
<p>There are several questions about this on SO already, but none seem to specifically address the type of scenario I have. <a href=""https://stackoverflow.com/questions/2432579/git-your-branch-is-ahead-by-x-commits/3323933#3323933"">This answer</a> to one of the questions comes closest, but doesn't go into detail.</p>
<p>I'll just quote it verbatim:</p>
<blockquote>
<p>If you get this message after doing a &quot;git pull remote branch&quot;, try following it up with a &quot;git fetch&quot;.</p>
<p>Fetch seems to update the local representation of the remote branch, which doesn't necessarily happen when you do a &quot;git pull remote branch&quot;.</p>
</blockquote>
<p>That tip does indeed work. But &quot;doesn't necessarily happen?&quot; Why not? I need to understand this. What is pull not doing?</p>
<p>I don't want to take over that question, so here's my scenario in detail:</p>
<p>Three computers involved. The Mac on which I develop, my home server where the git repo (i.e. origin/master) lives and a Webfaction account that pulls from that server.</p>
<p>I do commits and <code>git push origin master</code> only on the Mac. The only command that ever gets run on Webfaction as part of the normal workflow is <code>git pull origin master</code> (as part of a Fabric deployment script). I don't modify code there. I'm a lone developer, so neither does anyone else.</p>
<p>Every now and then I log in to Webfaction and check on things, including a <code>git status</code>. Inevitably, I always get the &quot;Your branch is ahead...&quot; message. Running <code>git fetch</code> makes the message go away.</p>
<p>I'm about to add <code>git fetch</code> to the Fabric script to be done with this issue, but I want to know why that needs to be done, especially on a pull-only clone of origin/master. I'm not deeply versed in Git though I use the basic functionality daily, so a newbie-friendly explanation would be appreciated.</p>
<p><strong>Update</strong> as requested, the relevant bits from <code>config</code>:</p>
<pre><code>[remote &quot;origin&quot;]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = git@[server_address]:[path/to/repo.git]
[branch &quot;master&quot;]
    remote = origin
    merge = refs/heads/master
</code></pre>
","3","39381","0","0"
"7677924","488735","2011-10-06 17:07:00","0","739","<git><git-fetch>","How to git fetch from a central remote repository?","<p>I'm new to Git and I'm a little confused how to use ""git fetch""</p>

<p>I have a central repository that I access using SSH, I have created a repository using git clone, just like this:</p>

<pre><code>$ cd /my/local/repotest
$ git clone ssh://andre@somedomain.com/var/github/repotest .
</code></pre>

<p>Now other developer have pushed some new files to the central repo in ""somedomain.com""</p>

<p>My question is, how can I fetch the new files and changes via command line?</p>
","1","488735","",""
"9537392","846381","2012-03-02 17:06:56","3062","4269300","<git><branch><git-branch><git-fetch>","`git fetch` a remote branch","<p>The remote repository contains various branches such as <code>origin/daves_branch</code>:</p>
<pre><code>$ git branch -r
origin/HEAD -&gt; origin/master
origin/daves_branch
origin/master
</code></pre>
<p>How do I switch to <code>daves_branch</code> in the local repository so that it tracks <code>origin/daves_branch</code>?</p>
<p>I tried:</p>
<pre><code>$ git fetch origin daves_branch
$ git checkout daves_branch
</code></pre>
","8","846381","0","0"
"45168111","4453737","2017-07-18 13:24:40","0","74","<git><git-fetch>","git difference between fetch branch vs fetch branch:branch","<p>I am confused about </p>

<p><code>git fetch origin master</code> vs <code>git fetch origin master:master</code>.</p>

<p>I know first will fetch from repository and specified branch.</p>

<p>what about second <code>git fetch origin master:master</code>?</p>
","0","4453737","0","0"
"9588111","817963","2012-03-06 16:47:51","23","29510","<git><git-merge><git-fetch>","How do you git fetch then merge? ""Error: Your local changes to the following files would be overwritten by merge""","<p>Newbie Git question: I have a repo set up on bitbucket. I git fetched someone else's changes and would like to merge them with my own. However, when I try to git merge (or git merge origin/master), I get the message ""error: Your local changes to the following files would be overwritten by merge:"", and then a list of files I've changed. Having Git merge these changes is exactly what I want to do though.</p>
","1","817963","0","0"
"27808931","1113997","2015-01-06 23:17:38","-1","1122","<git><git-fetch>","git fetch does not update my local branch","<p>I am new to git (have used other version control systems like Perforce) but what I am trying to do seems very basic to do it wrong.</p>

<p>I have a local workspace and a remote one. I want to bring changes from the remote to local (not force update but merge them with my local workspace).</p>

<p>If I do this :</p>

<pre><code>git diff master remote_name/master
</code></pre>

<p>I can see there are a lot of differences.</p>

<p>So, I am trying to fetch stuff from remote :</p>

<p>Tried both :</p>

<pre><code>git fetch remote_server
git fetch remote_server master
</code></pre>

<p>where remote_server is the name I have given (I see this if I run <code>git remote -v</code> )</p>

<p>But my local files do not change.</p>

<p>What am I missing?</p>
","0","1113997","",""
"64464508","12833093","2020-10-21 13:24:05","0","99","<git><git-merge><git-pull><git-fetch>","git pull excluding some file?","<p>I have a public repository for my students in which I pushed a large dataset and some corrections. The thing is we have a storm here at the moment and connection is really poor. Moreover, students already downloaded the datasets on their own for the purpose of the exercises.</p>
<p>My question, for which I can't figure out an easy solution : is there a way for them, to pull the repo without the dataset (just for that time) and whenever connection will be back, on their next pull, they will be able to pull everything.</p>
<p>I was thinking <code>git fetch</code> + <code>git merge</code> only wanted files, but that's not exactly what I wanted since ideally it would be a <code>git fetch</code> + <code>git merge</code> excluding one folder (the data folder).</p>
<p>Hope my issue is clear enough and that it has an easy solution !
Thanks for your help</p>
","0","12833093","",""
"46857465","404623","2017-10-20 21:16:48","3","321","<git><git-fetch>","git fetch blacklist remote","<p>Is there a way to make <code>git fetch --all</code>, or alternatively some other flag to <code>git fetch</code>, to not fetch from one remote?</p>

<p>I know there is the <code>git fetch --multiple foo bar baz</code> but I am looking for something more along the lines of <code>git fetch --exclude remote_rarely_fetched_from_needs_vpn</code>.</p>

<p>Otherwise I have to wait for the command to time out from failing to establish a network connection to that remote.</p>

<p>Alternatively, it would work for my case if I can fetch from all remotes with hostname matching <code>github.com</code>, but I am interested in seeing all options, if any.</p>
","2","404623","0","0"
"10671638","1310991","2012-05-20 07:37:32","19","19933","<git><git-pull><git-fetch>","How to fix git repository broken by interrupted git fetch?","<p>If <code>git fetch</code> gets interrupted for example by Ctrl-C or caused by connectivity problems, after that <code>git fetch</code> and also <code>git pull</code> fail to work.</p>

<pre><code>user@computer:~/code/openttd-git$ git fetch
^C
user@computer:~/code/openttd-git$ git fetch
error: Unable to find 22d90742fc79a9011fb86ee03d8aeea66bc12657 under http://git.openttd.org/openttd/trunk.git
Cannot obtain needed object 22d90742fc79a9011fb86ee03d8aeea66bc12657
error: Fetch failed.
</code></pre>

<p>I believe this is not related to the repository. Using <code>git clone</code> to create a copy of this broken local repository into a new local repository does not fix this. The only solution I know so far is to <code>git clone</code> the entire remote repository (<code>origin/master</code>) into a new local repository. But is there any better (faster) solution?</p>

<p>There is <a href=""http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=602528"">Debian bug report</a> that has last message from February 2011. Is this the same bug I have or is there already a fix or any solution or workaround to this? My git version is 1.7.10.</p>
","0","1310991","0","0"
"10678495","1275959","2012-05-21 00:56:04","77","44724","<git><pull><git-fetch>","Where to find changes due to `git fetch`","<p>I didn't want to lose some information after a <code>git pull</code>, so I did a <code>git fetch</code> before. Where can I read the new modifications after a <code>git fetch</code>? I went to the <code>FETCH_HEAD</code> file, but there was nothing more than a big number.</p>
","4","1275959","0","0"
"11623862","1467306","2012-07-24 03:48:32","360","249845","<git><git-branch><git-fetch>","fetch in git doesn't get all branches","<p>I have cloned a repository, after which somebody else has created a new branch, which I'd like to start working on.  I read the manual, and it seems dead straight easy.  Strangely it's not working, and all the posts I've found suggest I'm doing the right thing.  So I'll subject myself to the lambasting, because there <em>must</em> be something obviously wrong with this:</p>

<p>The correct action <em>seems</em> to be </p>

<pre><code>git fetch
git branch -a
* master
  remotes/origin/HEAD --&gt; origin/master
  remotes/origin/master
git checkout -b dev-gml origin/dev-gml
</code></pre>

<p>At this point there is a problem, for some reason after <code>git fetch</code> I can't see the dev-gml remote branch.  Why not?  If I clone the repository freshly, it's there, so certainly the remote branch exists:</p>

<pre><code>$ mkdir ../gitest
$ cd ../gitest
$ git clone https://github.com/example/proj.git
Cloning into proj...
remote: Counting objects: 1155, done.
remote: Compressing objects: 100% (383/383), done.
remote: Total 1155 (delta 741), reused 1155 (delta 741)
Receiving objects: 100% (1155/1155), 477.22 KiB | 877 KiB/s, done.
Resolving deltas: 100% (741/741), done.
$ cd projdir
$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/dev-gml
  remotes/origin/master
</code></pre>

<p>I've tried <code>git update</code>, <code>git pull</code>, <code>git fetch --all</code>, <code>git pretty-please</code> in all possible permutations...</p>
","9","1467306","0","0"
"47637214","5816911","2017-12-04 15:56:49","1","465","<git><git-remote><git-fetch>","git remote -v not showing remote after git fetch --all","<p>I'm working with a git project and I need to add a remote repository.<br>
In the <strong>PC1</strong> I added the remote repo with:
<code>git remote add new_repo https://192.168.2.223</code> (this is the IP of my <strong>PC1</strong> within the network).<br>
Then, in another pc (<strong>PC2</strong>) within the same network, I tried to fetch the <em>new_repo</em> I've just created:
<code>git fetch --all</code>.</p>

<p>Now in the <strong>PC2</strong>, if I type: <code>git remote -v</code> I can't see the <em>new_repo</em>.<br>
What's wrong?</p>
","3","5816911","",""
"29443001","392412","2015-04-04 05:15:40","2","67","<git><github><git-fetch>","Can I fetch changes from more than one repo in git?","<p>In git 2.3, we can git clone codes fast using --reference and --dissociate by borrowing objects from existing clones. </p>

<p>My question is can we make git fetch like that? Because under some poor network condition, git fetch from github will be very very slow. I want to make a mirror on my own server, so I can fast fetch from my own server but push codes to github.
If the mirror git repo is behind the github repo, the git could fetch from github automatically.</p>

<p>I mean, when git fetch, first check github repo , and then check if those newer objects exist in mirror repo, if exist, fetch from mirror, if not, fetch from github.</p>
","1","392412","0","0"
"26623867","4049331","2014-10-29 06:20:12","13","8329","<git><git-branch><git-fetch>","Skip copying some branches/tags to local Git with `git fetch --all`","<p>I have many remotes added to my Git. Each remote is a repository for one developer. Every day I <code>fetch --all</code> to see any new branches they create that are ready to review.</p>
<p>However, developers can push &quot;private&quot; branches to the remote. Say, all branches named with an underscore prefix are not ready to review, while other branches are ready to review.</p>
<p>When doing the <code>git fetch --all</code>, my Git graph (by <code>/libexec/git-core/git-gui</code>) will see all branches, no matter whether they have the underscore prefix or not. It complicates the graph.</p>
<p>I want <code>git fetch</code> to ignore those <code>_XXXX</code> branches from being downloaded to my local Git. So when I view the Git graph it's like:</p>
<ul>
<li><strong>Shows branches:</strong>   <code>RemoteA/Branch1</code> , <code>RemoteB/Branch1</code>, <code>RemoteB/Branch2</code></li>
<li><strong>Ignores branches:</strong>  <code>RemoteA/_Branch2</code>, <code>RemoteB/_Branch3</code></li>
</ul>
<p>How can I do this?</p>
","2","4049331","0","0"
"2014523","95592","2010-01-06 16:41:45","8","2308","<git><github><git-fetch>","Why include `master` in the command `git fetch upstream master`?","<p>In the section <strong>Pulling in upstream changes</strong> on <a href=""http://help.github.com/forking/"" rel=""noreferrer"">help.github's <strong>Forking a project</strong></a> it states:</p>

<blockquote>
  <p>Some time has passed, the upstream repo has changed and you want to update your fork before you submit a new patch. There are two ways to do this:</p>
</blockquote>

<pre><code>$ git fetch upstream master

$ git merge upstream/master
</code></pre>

<p>Why are they including <code>master</code> in the fetch command? I've looked at the <code>git help fetch</code> information but I'm not understanding what including <code>master</code> does. Thanks.</p>
","0","95592","",""
"59048003","1233600","2019-11-26 09:46:47","1","264","<git><bitbucket><git-fetch>","Authentication issue while fetching from fork branch in git","<p>I am trying to fetch from my colleagues fork using the following command:</p>

<pre><code>git remote add fellow https://&lt;servername&gt;/~nsarkr/&lt;application&gt;.git
</code></pre>

<p>Next I try to fetch the branches:</p>

<pre><code>git fetch fellow
</code></pre>

<p>I get the following error:</p>

<pre><code>fatal: Authentication failed for 'https://&lt;servername&gt;/~nsarkr/&lt;application&gt;.git'
</code></pre>

<p>But I'm not sure what can authenticate me.
I am aware that my colleague may create personal tokens and can share it with me, but how would I use that?
I need to use the <code>fetch</code> command. I don't want to clone the repo again, since that would clutter my workspace.</p>

<p>The following article explains about cloning the repo using personal tokens.</p>

<p><a href=""https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line"" rel=""nofollow noreferrer"">https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line</a></p>

<p>Thanks in advance!!</p>
","1","1233600","",""
"19962354","1277331","2013-11-13 19:11:39","1","993","<git><git-fetch>","git branch contains other unwanted branch","<p>The admin has told me not to merge develop into my branches before pushing them to remote, and that I should create new branches based on master, that way no code from develop will accidentally get merged into master. OK, that has worked fine for several weeks, but a couple of days ago I accidentally merged develop into one of my branches. That didn't create a big problem for the admin, he just told me not to do it again, but since then I started using <em>""git branch --contains""</em> to make sure. </p>

<p><strong>Problem</strong>: 
When I fetch the remote master and run ""git branch --contains"", it shows that develop is part of it:</p>

<pre><code>git branch --contains
  develop
* master
</code></pre>

<p>How can that be possible?? </p>

<p>I see 3 possible explanations:</p>

<ol>
<li>remote master was at some point accidentally merged with develop</li>
<li>some unknown error </li>
<li>I'm not updating my local branch correctly with the fetched master</li>
</ol>

<hr>

<ol>
<li>is very unlikely since the admin is a guru who couldn't possibly have let that happen</li>
<li>is what I suspect is happening</li>
<li>possible, but I think I've been doing it correctly all these weeks with this code:</li>
</ol>

<hr>

<pre><code>git fetch
git checkout master
git reset --hard origin/master
git clean -f
git pull origin master
</code></pre>

<p>So as long as develop is in master I cannot create/push any new branches.</p>

<p>Any idea what's going on?</p>
","0","1277331","",""
"1070496","34956","2009-07-01 17:54:56","58","35987","<git><git-fetch>","Having a hard time understanding git-fetch","<p>I am having a hard time understanding the nuances of git-fetch. I understand that doing a <code>fetch</code>, fetches the remote refs into a local tracking branch.</p>

<p>I have a few questions though:</p>

<ol>
<li><p>Can it be possible that a local tracking branch does not exist? If so, will it then be created automatically?</p></li>
<li><p>What will happen if I do a <code>fetch</code> and specify a non tracking branch as the destination?</p></li>
<li><p>The man page for git-fetch specifies:</p>

<pre><code>git-fetch &lt;options&gt; &lt;repository&gt; &lt;refspec&gt;
</code></pre></li>
</ol>

<p>How would I use the refspec to fetch contents from my remote master into its remote tracking branch? I believe this may be possible if my current HEAD is on master and I run</p>

<p><code>git fetch origin master</code></p>

<p>However, can I use the <code>&lt;+?src:dest&gt;</code> refspec to achieve the same thing? I think this will help me understand the concepts better.</p>

<p>And one more question:</p>

<p>My .git/config file has the following line for fetching (showing only relevant lines):</p>

<pre><code>fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>Can someone please explain what this line exactly means?</p>
","1","34956","0","0"
"1125968","98046","2009-07-14 14:58:15","9355","7784168","<git><version-control><overwrite><git-pull><git-fetch>","How do I force ""git pull"" to overwrite local files?","<p>How do I force an overwrite of local files on a <code>git pull</code>? My local repository contains a file of the same filename as on the server.</p>
<blockquote>
<p>error: Untracked working tree file 'example.txt' would be overwritten by merge</p>
</blockquote>
","11","98046","0","0"
"39382953","2564826","2016-09-08 05:06:12","0","166","<git><git-log><git-fetch>","git: reviewing changes after 'git fetch'","<p>Following a git fetch, I'd like to review code changes that are introduced from upstream.</p>

<p>I can use <code>git log -p ..@{u}</code>, however the output will not include diffs of merge commits/merges of pull requests.</p>

<p>Is there a way to include those in the output, that will yield a comprehensive history of changes that occurred since I last pulled?</p>

<p>Thanks </p>
","0","2564826","0","0"
"20549778","2769590","2013-12-12 17:11:18","17","1234","<git><git-pull><git-fetch>","some confusion on git pull vs git-fetch","<p>So - can someone clarify this one: </p>

<p>I run:</p>

<pre><code>git pull origin master  
git status
</code></pre>

<p>And it then pulls the changes and says:</p>

<pre><code>your branch is ahead of origin/master ... blahblah by 6 commits...
</code></pre>

<p>When I then run </p>

<pre><code>git fetch
git status
</code></pre>

<p>It says:</p>

<pre><code># On branch master
nothing to commit (working directory clean)
</code></pre>

<p>So - I thought <code>git pull</code> does git fetch by default - so why does it says ""ahead by 6 commits""  without additional <code>git fetch</code>?</p>
","10","2769590","",""
"20620005","3009900","2013-12-16 20:12:55","0","1192","<git><github><version-control><git-fetch>","git reset --mixed FETCH_HEAD","<p>Say I have a repo called repo1</p>

<p>Within this repo i have 5 revisions, with A being the most recent</p>

<p>A
B
C
D
E</p>

<p>Say I have a workspace with files at revision B but 
for some reason git thinks I'm at revision C.</p>

<p>I am interested in pulling down the git metadata so that my workspace is in the correct state(e.g git thinks i have revision B) but I do not want the files</p>

<p>My first idea was to run : </p>

<p>1) git pull -n</p>

<p>2) git reset --mixed B</p>

<p>However , this would fail due to merge conflicts</p>

<p>My second idea is to run :</p>

<p>1) git fetch -n </p>

<p>2) git reset --mixed FETCH_HEAD</p>

<p>3) git reset --mixed revision B</p>

<p>Is this the best solution ? </p>

<p>Thanks for your help.</p>
","1","3009900","",""
"1856499","136562","2009-12-06 20:27:28","202","92294","<git><git-remote><git-fetch>","Differences between git remote update and fetch?","<p>Is <code>git remote update</code> the equivalent of <code>git fetch</code>?</p>
","0","136562","0","0"
"39861912","2977570","2016-10-04 21:17:52","25","3148","<git><git-remote><git-fetch>","Is there any reason to not set 'git fetch' to always use the --prune option?","<p>Using git fetch --prune deletes local remote tracking branches when the branch on the remote machine has been deleted.  Setting remote.origin.prune to true using the following...</p>

<pre><code>git config --global fetch.prune true
</code></pre>

<p>...makes using the fetch command always implicitly use the --prune option. </p>

<p>I am putting together a best-practices/introduction to git for some developers in my group who aren't quite familiar with it. I want to be sure I know this is not a dangerous behavior before advising them to do so. I at least give them a heads up of what to watch out for if there is some extraneous mishap case. </p>

<p>It doesn't seem like this is a destructive operation because it doesn't delete any local (non-remote) branches. It also seems like this is a great way to not build up remotes that aren't in use anymore without periodically specifying git fetch --prune or git remote prune. </p>

<p>If this is all true, why is this not the default behavior for git?</p>
","5","2977570","0","0"
"2236743","262667","2010-02-10 12:33:19","103","74731","<git><git-fetch>","git refusing to fetch into current branch","<p>I set up a remote repository and I can push new changes to it, but I cannot fetch from it, I always get the (rather cryptic) error message:</p>

<pre><code>fatal: Refusing to fetch into current branch refs/heads/master of non-bare repository
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What does it mean? What should I do to enable fetching?</p>

<p>(Note that this remote repo is only used as a backup repo, so it should be pretty much an exact copy of my local repository. I really can't understand why I can push to it but not fetch from it...)</p>

<p>My config looks like:</p>

<pre><code>[remote ""origin""]
    url = ssh://blablablah
    fetch = +refs/*:refs/*
    mirror = true
</code></pre>
","5","262667","0","0"
"59162007","8340633","2019-12-03 17:01:12","0","53","<git><git-pull><git-fetch>","Understanding git commands in the context of the task","<p>I need help understandign git pull/fetch merge, etc... 
I know there are a lot of articles and answers on this site, so I will put it in a context of the problem I have</p>

<ol>
<li><p>So, I have this:</p>

<pre><code>Remote branch ""myBranch""
file A
file B

Local Branch ""myBranch""
       file A
       file B 
</code></pre></li>
</ol>

<p>At this point, these 2 branches are the same</p>

<p>2.) I go ahead and manually create an additional file on remote branch.  Imitating as if ANOTHER developer commited it
So, the picture changes</p>

<pre><code>    Remote branch ""myBranch""
    file A
    file B
    file C *

   Local Branch ""myBranch""
           file A
           file B 
</code></pre>

<p>Now, I know that git fetch command will ""tell me"" that there are changes, but will not modify my local branch.
When I run git fetch, I get the following output</p>

<pre><code>    $ git fetch
    remote: Counting objects: 4, done.
    remote: Compressing objects: 100% (3/3), done.
    remote: Total 4 (delta 1), reused 0 (delta 0), pack-reused 0
    Unpacking objects: 100% (4/4), done.
    From https://bvdevgithubvm.broadviewnet.com/internal-dev/bvn-process-history-service
       0c075bc..6098e63  prototype  -&gt; origin/prototype
</code></pre>

<p>BUT !! I only know that there are differences.
How do I know WHAT CHANGED.  Can I see the changes on remote branch BEFORE I bring it to my local branch (to my local machine)<br>
I guess, what I am looking for, is if you know SVN world, something equivalent to being able to see svn log and see who commited what, before doing an SVN update.</p>

<p>This was a part 1 of the question I had.  Now goes part 2, that may be viewed as independent question.</p>

<p>3.) So, from above I call git pull and bring the remote modification to the local branch
So, the picture now is  </p>

<pre><code>Remote branch ""myBranch""
           file A
           file B
           file C

        Local Branch ""myBranch""
           file A
           file B
           file C
</code></pre>

<p>At this point branches are the same.</p>

<p>So, I go ahead and delete the file C from my local branch.
Then I commit the changes, but DO NOT push them. (yet)!!</p>

<p>At this point the picture is like this:</p>

<pre><code>    Remote branch ""myBranch""
           file A
           file B
           file C

        Local Branch ""myBranch""
           file A
           file B
</code></pre>

<p>Now, this is where I get confused.  If I do the git fetch or git pull, 
output is </p>

<pre><code>$ git pull
    Already up to date.
</code></pre>

<p>I EXPECTED to know that there is something on a remote branch that makes it different.  But .. I can't ?<br>
How can I deal with this?<br>
Now, I understand that there may be a reason for such behavior, reason that lies in git filosophy, compared to the SVN (for instance).
But, how I can deal with such a difference?  How can I know that things might have changed on the remote?  </p>
","4","8340633","0","0"
"21537244","1988876","2014-02-03 20:37:50","1","3761","<git><git-merge><git-fetch>","Differences between git fetch and git fetch origin master","<p>I was <a href=""https://stackoverflow.com/questions/21536126/will-fetch-merge-not-work-if-files-are-added-or-deleted-in-github-repository"">doing a fetch/merge</a> and wanted to know if there is any difference between doing </p>

<pre><code>git fetch
</code></pre>

<p>and </p>

<pre><code>git fetch origin master
</code></pre>

<p>I do not have any other branches and origin points to my <code>remote repository</code> on GitHub.</p>

<p>When I do:</p>

<pre><code>git fetch origin master
remote: Counting objects: 4, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From github.com:XXXXXXXXXXXXXXX
 * branch            master     -&gt; FETCH_HEAD
</code></pre>

<p>But just:</p>

<pre><code>git fetch
From github.com:XXXXXXXXXXXXXXX
   531d466..aaf6df0  master     -&gt; origin/master
</code></pre>

<p>Note that master points to different things; in one case <code>FETCH_HEAD</code> and in other case, <code>origin/master</code>?
Are they different? </p>
","6","1988876","0","0"
"20078507","3009900","2013-11-19 17:52:23","6","4887","<git><clone><commit><git-fetch>","How to git clone 'git' metadata only","<p>I have a remote repo called FOO which has the two following revisions : </p>

<p>commit1
commit2</p>

<p>I have a directory 'bar' which contains all the files for commit2 but I am missing the .git directory and all metadata.</p>

<p>Is there a way for me to 'git clone' only the '.git' metadata from the remote into my current directory without the files? </p>

<p>The main goal is to avoid wasting time checking out files since I already have them.</p>

<p>Any suggestions ? Thanks in advance.</p>
","1","3009900","",""
"1204190","143397","2009-07-30 02:47:31","302","258329","<git><pull><git-tag><git-fetch>","Does ""git fetch --tags"" include ""git fetch""?","<p>A nice and simple question - is the function of ""git fetch"" a strict sub-set of <code>git fetch --tags</code>?</p>

<p>I.e. if I run <code>git fetch --tags</code>, is there ever a reason to immediately run <code>git fetch</code> straight afterward?</p>

<p>What about <code>git pull</code> and <code>git pull --tags</code>? Same situation?</p>
","2","143397","0","0"
"58238536","12151830","2019-10-04 14:39:54","0","284","<git><git-pull><git-fetch>","Why does my local branch show (local out of date) despite doing git fetch?","<p>My team mate updated his branch <code>feature1</code> on remote while I was working on <code>feature2</code>. </p>

<p>Now when I do <code>$ git remote show origin</code>, it shows - </p>

<p><code>Local refs configured for 'git push':</code></p>

<p><code>feature1 pushes to feature1 (local out of date)</code></p>

<p>I am currently checked out on branch <code>feature2</code>, and I tried all the commands below, but the state of <code>feature1</code> doesn't change to <code>(up to date)</code>. (All commands execute without any errors)</p>

<p><code>$ git fetch origin</code></p>

<p><code>$ git fetch --all</code></p>

<p><code>$ git fetch origin feature2</code></p>

<p>Why does this happen? What am I missing?</p>
","1","12151830","",""
"30585634","3571278","2015-06-02 00:50:51","6","2330","<git><branch><git-fetch>","Why doesn't git run a git fetch periodically?","<p>Since <code>git fetch</code> doesn't make any changes and it just updates the references and keeps the tracking branches up to date with the remote branches (like it says if it's ahead and/or behind).</p>

<p>I can see that it is really important to know whats going on on the remote repo.</p>

<p>If git fetch is not destructive. Why doesn't git just run a git fetch periodically whenever there is an internet connection?</p>

<p>Is it good practice to make a script that does that for me?</p>
","5","3571278","0","0"
"13074389","1426193","2012-10-25 17:54:36","11","7529","<git><permissions><file-permissions><git-fetch><directory-permissions>","git fetch insufficient permission for adding an object to repository database .git/objects?","<p>In my repo in my home directory (on an Ubuntu box) I did</p>

<pre><code> git fetch
</code></pre>

<p>I unfortunately got an error about: </p>

<pre><code> insufficient permission for adding an object to repository database .git/objects
</code></pre>

<p>There's a gazillion directories in .git/objects and all of them appear to be 775.  The few spot checks I did show the files to be 664.  </p>

<p>I went and did a </p>

<pre><code> chmod -R 777 .git/objects 
</code></pre>

<p>which fixed the problem but now I've got a bunch of files 777 on my box and I'm sure that's a no-no.</p>

<p>What should the correct permissions be and how can I easily get all 10 million files and directories set correctly?</p>

<p>Thanks in advance.</p>
","0","1426193","0","0"
"18744654","2769202","2013-09-11 14:57:44","2","1426","<linux><git><git-clone><usb-drive><git-fetch>","How can I daisy chain git repositories in a sneaker-net environment","<p>I am working on developing some code for an embedded application.  My embedded systems run linux/git and have a native compiler right on board, but they have no networking hardware or capability.  I am able to happily mount a USB drive on these embedded systems.</p>

<p>I have my master (bare) git repository for the source code on my desktop PC, and do quite a bit of development there in a clone of the repository.  The simple/basic git work flow is fine.</p>

<p>What I envision in my mind is creating a --bare clone of the repository on a USB thumb drive and then sneaker-netting that between my embedded systems.</p>

<p>I would like the git repository on board each embedded system to be a clone from the USB repository.</p>

<p>So the workflow I envision is this:</p>

<ol>
<li>Make some changes onbaord one of my embedded systems.  Add and commit them to the local git clone.</li>
<li>Mount the USB thumb drive to the embedded system and push the changes from the local repository to the thumb drive repository.</li>
<li>Mount the USB thumb drive on my desktop PC and push those commits up to the master/bare repository</li>
<li>Pull the changes into my desktop development tree.</li>
</ol>

<p>And then I would like to do the reverse of this:</p>

<ol>
<li>Make changes to my desktop working git tree, add, commit, push them to the master repository.</li>
<li>Mount the thumb drive on my desktop PC, pull/fetch the master changes into the git clone on the thumb drive.</li>
<li>Mount the thumb drive on an embedded system, pull/fetch the changes into the local working tree on the embedded system ...</li>
</ol>

<p>The end goal is to be able to make development changes on my desktop PC or on any of my embedded systems (which do not have network ability) and keep everything in sync.</p>

<p>Is this possible?  Is this possible without massive amounts of git voodoo?</p>

<p>I've sat down to work through this on a couple occasions and keep running into road blocks.  I don't think I want a --mirror'd repository on the thumb drive because I want to be able to push changes both directions through the thumb drive.</p>

<p>I could put the official master repository on the thumb drive and have all my working copies point to that I suppose, but that doesn't give me warm fuzzy feelings about the security of my master copy if it gets buried.</p>

<p>I'm hoping for something 'simple' that I can understand and do myself!</p>
","0","2769202","",""
"59107709","7887218","2019-11-29 15:42:22","1","1280","<git-pull><git-fetch>","Git pull vs git pull --all","<p>In the Git manual it states that the --all option is for the fetch part. I'm confused because I thought git fetch would update the whole local copy of the remote repository by default, so I don't see the need to define --all. And the main question, is git pull the same as git pull --all? if not, what is the difference?</p>
","0","7887218","",""
"63529683","7133414","2020-08-21 20:28:26","0","266","<git><git-branch><git-merge><git-pull><git-fetch>","git reset to a local commit head; need to pull from origin keeping local changes","<p>I have a local <code>feature/branch</code>. When I pull from a <code>remote/origin</code> it's overiding my local changes, when usually it presents me with conflicts from the merge.... How do I set up the local git branch so that I get a conflict report when merging the remote branch and can resolve those conflicts?</p>
<p>UPDATE:</p>
<p>using <code>git branch -vv</code> I can see that the branch was merged into the <code>remote branch origin/master</code> and has a pull request id. Many changes have been made on top and some of the work on the current <code>feature/branch</code> and some changes have been over-written. I moved the <code>feature/branch</code> back to a previous commit before it's changes were over-written.</p>
<p>I can see the changes in <code>git diff master</code> but I'd like to be able to see the <em>conflicts</em> and resolve them in vscode rather than scroll through the terminal output of <code>git diff master</code>.</p>
<p>could I detach the <code>local feature/branch</code> from the <code>remote feature/branch</code> so that git picks up the conflicts on a <code>git pull origin master</code>?</p>
","1","7133414","",""
"63653790","9434450","2020-08-30 03:53:42","1","1211","<git><git-commit><git-log><git-fetch>","""git fetch"" doesn't update commit history in ""git log""","<p>I'm new to git workflow and was following a tutorial online about &quot;git fetch&quot;. Here are the performed steps:</p>
<ol>
<li>&quot;git pull&quot; to synchronize files and history from remote repo</li>
<li>A new commit was performed by the <strong>same user</strong> <strong>online</strong></li>
<li>&quot;git remote show origin&quot; show that local branch is &quot;out of date&quot; with remote repo</li>
<li>&quot;git fetch&quot; was performed to synchronize metadata and not local files</li>
</ol>
<p>For the tutorial  --&gt;  After &quot;git fetch&quot; when &quot;git log&quot; is used to view commit history, it shows the last performed commit and who did it</p>
<p>For me --&gt;  After &quot;git fetch&quot; when &quot;git log&quot; is used, it <strong>doesn't show me the last performed commit</strong></p>
<p>I tried &quot;git pull&quot; and then both commit history and local file got updated. <strong>Am I doing something wrong here (or) &quot;git fetch&quot; isn't supposed to update the log history</strong></p>
","0","9434450","",""
"10325586","425964","2012-04-26 00:14:03","10","6057","<git><version-control><git-merge><git-fetch>","How to nest git repositories; fetch and merge","<p>So I have two git repos. The first is our framework (think db abstraction, functions) and then another git repo for our new project.</p>

<p>I want to include the framework git repo into the project git, and according to GitHub Help, this should work:</p>

<pre><code> cd /project
 git remote add framework git://github.com/username/Framework.git
 git fetch framework
 git merge framework/master
</code></pre>

<p>The problem is, when I do the merge, it brings everything all files from framework and simply dumps them into the root of project. Instead, how can we have framework files merged into a child directory like <code>/project/framework/</code>?</p>
","1","425964","0","0"
"65460355","293195","2020-12-26 20:19:25","1","883","<git><git-fetch>","Why does `git fetch . origin/master:master` leave staged changes?","<p>I am wondering why the following leaves staged changes:</p>
<pre class=""lang-sh prettyprint-override""><code>git reset --hard master~4 # reset in prupose of the next command 
# fetch from this repository... src: origin/master to destination: master
git fetch --update-head-ok . origin/master:master 
git status # -&gt; Shows various staged files?
</code></pre>
<p>The branch <code>master</code> seems to be in sync with <code>origin/master</code>.
<strong>But:</strong>  now I have various staged files on <code>master</code> ?.
Why is this behavior like that? I thought that <code>git fetch . origin/master:master</code> updates my local branch HEAD to the one in <code>origin/master</code>. Obviously it does more? But what exactly?.</p>
","3","293195","0","0"
"28001878","3811693","2015-01-17 16:55:47","24","25976","<git><github><gitlab><git-clone><git-fetch>","git fetch --unshallow gives :""fatal: --unshallow on a complete repository does not make sense"" error","<p>I am unable to git clone a remote repository using plain</p>

<pre><code>git clone path 
</code></pre>

<p>I get the error <code>""The remote end hung up unexpectedly""</code>.
The complete msg I get is :</p>

<pre><code>Cloning into 'xyzabc'...
remote: Counting objects: 4328, done.
remote: Compressing objects: 100% (3861/3861), done.
select: Not enough memory2192/4328), 123.71 MiB | 164.00 KiB/s
ffatal: The remote end hung up unexpectedly
atal: early EOF
fatal: index-pack failed
</code></pre>

<p>I search online for a solution and after trying every other solution landed on solution of doing :</p>

<pre><code>git clone --depth=1 path
</code></pre>

<p>followed by</p>

<pre><code>git fetch --unshallow
</code></pre>

<p>Now the clone is completing fully. But, when I try to run git fetch --unshallow to recieve the complete project, I get the error :</p>

<pre><code>fatal: --unshallow on a complete repository does not make sense
</code></pre>

<p>I dont know what to do please guide</p>
","0","3811693","0","0"
"46597915","996205","2017-10-06 03:40:03","8","11609","<git><version-control><git-branch><git-remote><git-fetch>","Git Branches NOT Showing in ""git branch"" after Pull or Fetch but ""git checkout"" works ...?","<p>After committing my latest work on a new branch <code>branchname</code> to my local git repo on machine A, I pushed that work to my gitlab remote repo with</p>

<pre><code>$ git push origin branchname 
</code></pre>

<p>The <code>master</code> branch was already in sync with the remote repo. All branches showed up on the remote repo on my gitlab list. </p>

<p>I later went to machine B. I first did a </p>

<pre><code>$ git pull origin master 
</code></pre>

<p>and master was updated, but my new <code>branchname</code> didn't show up when I typed <code>git branch</code>, nor did another branch that I new existed in the history tree. I went to this <a href=""https://stackoverflow.com/questions/6373277/git-sync-local-repo-with-remote-one"">post</a> and followed the directions from the first answer. Another 'git branch' still did not show my other branches. On a whim, I simply tried to do </p>

<pre><code>$ git checkout branchname 
</code></pre>

<p>and it was there and checked out fine. A <code>git branch</code> command then showed master and branchname in my list of branches. I did the same thing with another branch, and it too then showed up in the branch list after a <code>git branch</code> command.</p>

<p>Is this normal git behavior for such operations? The main thing I am wondering is if you pull or fetch from a remote repo to update a local repo that had to know previous knowledge of branches on the remote, why don't they show up during a <code>git branch</code> command? And, why can I check them out when I couldn't see them after a <code>git branch</code>?</p>

<p>This saga is similar to <a href=""https://stackoverflow.com/questions/12319968/remote-branch-not-showing-up-in-git-branch-r"">THIS</a> one, but my branches were actually there and just NOT showing following git branch commands until I checked them out.</p>
","1","996205","",""
"28791020","3913991","2015-03-01 07:01:58","3","411","<git><gitignore><git-fetch>","What if .gitignore ignore itself? Does it affect on ""git fetch""?","<p>Suppose this scene</p>

<ol>
<li>A git server of some sources codes and some elf binary files</li>
<li>This server has no <code>.gitignore</code> file.</li>
<li>I don't know what new binary file will be added to the git server</li>
<li>Every time i build the codes, it will create some new elf binary files.</li>
<li>Since there is no <code>.gitignore</code> file, after building, i can't <code>git fetch</code> or <code>git pull</code> because git will promopts <code>changes not committed</code></li>
</ol>

<p>So i want to solve this, but i can't just make a <code>.gitignore</code> with <code>*.elf</code> because there are some elf files released with git server.</p>

<p>Of course i can't tell <code>.gitignore</code> don't ignore these elf files released with git server because there may be some new elf binary files added to git server in the future</p>

<p>So, what if i create <code>.gitignore</code> that ignore itself, so it won't be pushed to git server, but will it affect my <code>git fetch</code> process? If there is two differenct <code>.gitignore</code> rules in server and in my local computer, which one will <code>git fetch</code> obey?</p>

<p>And how can i solve my problem?</p>
","5","3913991","",""
"11304261","139766","2012-07-03 03:59:48","5","11309","<java><git><version-control><jgit><git-fetch>","Git fetch failing using jgit: Remote does not have <branchname> available for fetch","<p>I have a bare repo located at <code>main.git</code> and am trying to fetch a branch (<code>foo</code>, let's say) in another repo, <code>test</code>, which has only just been <code>git init</code>'d:</p>

<pre><code>fetchtest/
  |- main.git/
  |- test/
       |- .git/
</code></pre>

<p>Using regular git commands, I can do a <code>git fetch ../main.git foo:foo</code> and this will make a new branch <code>foo</code> in <code>test/</code> and fetch the objects required for the branch. <strong>I then want to do the same thing but programmatically using JGit, ie not using the git CLI but using only Java code. There is no way I can use the git CLI:</strong></p>

<pre><code>Git git = Git.init().setDirectory(new File(""fetchtest/test/"")).call();

git.fetch().setRemote(new File(""../main.git""))
           .setRefSpecs(new RefSpec(""foo:foo""))
           .call();
</code></pre>

<p>but it just errors with:</p>

<pre><code>org.eclipse.jgit.api.errors.TransportException: Remote does not have foo available for fetch.
    at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:137)
    // ......
Caused by: org.eclipse.jgit.errors.TransportException: Remote does not have foo available for fetch.
    at org.eclipse.jgit.transport.FetchProcess.expandSingle(FetchProcess.java:349)
    at org.eclipse.jgit.transport.FetchProcess.executeImp(FetchProcess.java:139)
    at org.eclipse.jgit.transport.FetchProcess.execute(FetchProcess.java:113)
    at org.eclipse.jgit.transport.Transport.fetch(Transport.java:1069)
    at org.eclipse.jgit.api.FetchCommand.call(FetchCommand.java:128)
</code></pre>

<p>How do I get this to work?</p>
","2","139766","0","0"
"30895518","108802","2015-06-17 15:08:25","0","310","<git><git-push><git-tag><git-fetch>","git push and fetch annotated tag does not create the tag","<p>I just created an annotated tag on machine A, then pushed the tag to the server S:</p>

<pre><code>@A$ git tag -a v1 -m""Release version 1""
@A$ git push origin_on_S v1
</code></pre>

<p>Then on machine B, I tried to fetch the tag:</p>

<pre><code>@B$ git fetch origin v1
</code></pre>

<p>I got the commit, but not the tag. The reply from <code>fetch</code> was:</p>

<pre><code>From &lt;server_S/repo&gt;
 * tag               v1 -&gt; FETCH_HEAD
</code></pre>

<p>Then nothing. <code>FETCH_HEAD</code> was updated, but apparently no annotated tag was created.</p>

<p>I am currently trying <code>git fetch origin v1:v1</code>, but I had the impression that <code>git fetch tag</code> should fetch both the data and the annotated tag. Was I wrong, or did I do something wrong to prevent this?</p>
","3","108802","",""
"13403224","1086034","2012-11-15 17:46:17","1","254","<git><git-remote><git-fetch><git-tag>","What is the behavior of `git remote update <name>` when `remote.<name>.tagopt` is not set?","<p>The <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-remote.html"" rel=""nofollow""><code>git remote</code> man page</a> explains what <code>--tags</code> and <code>--no-tags</code> does, but not the default behavior if neither is specified. What is that behavior?</p>
","0","1086034","",""
"47927746","245549","2017-12-21 15:09:38","0","64","<git><git-rebase><git-checkout><git-fetch>","Do these three sets of git commands do the same?","<p>Do the following three sequences of command do the same:</p>

<p>Commands 1:</p>

<pre><code>git fetch origin master
git rebase origin master
</code></pre>

<p>Commands 2:</p>

<pre><code>git pull origin master --rebase
</code></pre>

<p>Commands 3:</p>

<pre><code>git fetch origin master
git checkout FETCH_HEAD
</code></pre>

<p>My understanding is that all three commands do the same, which is:</p>

<ol>
<li>""Download"" all the commit from the specified branch of the specified remote repository.</li>
<li>Put the commit from the current branch ""on top"" of the downloaded commits.</li>
</ol>
","2","245549","0","0"
"40028804","4632019","2016-10-13 18:53:14","9","1400","<git><git-pull><git-fetch>","How git-pull corporate with git-fetch (was: what does git-pull option `-p` mean)?","<p>Sometimes I see at articles command: <code>git pull -p</code><br>
But I do not found info about that in <a href=""https://git-scm.com/docs/git-pull"" rel=""noreferrer"">official documentation</a></p>

<p>What does that option mean?</p>

<p><strong>UPD</strong></p>

<p>As noted by @torek the <code>-p</code> option is passed to <code>git fetch</code>. And <code>-p</code> here means:</p>

<blockquote>
  <p>-p<br>
  --prune<br>
  Before fetching, remove any remote-tracking references that no longer exist on the remote.</p>
</blockquote>

<p>But I do not understand how <code>git-pull</code> <s>corporate</s> cooperate with <code>git-fetch</code>?<br>
How I can figure out how and which <code>git</code> options fall through one command to another?</p>
","3","4632019","",""
"21359777","895429","2014-01-26 04:39:46","6","7538","<git><git-clone><git-fetch>","git fetch fails due to pack-object failure","<p>When I add our remote repository as upstream and try to fetch it , it fails as below :</p>

<pre><code>    $ git fetch upstream
    remote: Counting objects: 11901, done.
    remote: aborting due to possible repository corruption on the remote side.
    error: pack-objects died of signal 9
    error: git upload-pack: git-pack-objects died with error.
    fatal: git upload-pack: aborting due to possible repository corruption on the re
    mote side.
    fatal: protocol error: bad pack header
</code></pre>

<p>I understand that it fails due to having huge files in the repository( which we do have) , but why does it Not fail when I clone the same repository? Because I am able to clone the repository successfully. Shouldn't The same objects  be packed at the time of a clone request?</p>
","0","895429","0","0"
"2602546","277","2010-04-08 18:45:02","119","139531","<git><git-pull><git-merge><git-fetch>","How Do I 'git fetch' and 'git merge' from a Remote Tracking Branch (like 'git pull')","<p>I have set up some remote tracking branches in git, but I never seem to be able to merge them into the local branch once I have updated them with 'git fetch'.</p>

<p>For example, suppose I have remote branch called 'an-other-branch'. I set that up locally as a tracking branch using</p>

<pre><code>git branch --track an-other-branch origin/an-other-branch
</code></pre>

<p>So far, so good. But if that branch gets updated (usually by me moving machine and commiting from that machine), and I want to update it on the original machine, I'm running into trouble with fetch/merge:</p>

<pre><code>git fetch origin an-other-branch
git merge origin/an-other-branch
</code></pre>

<p>Whenever I do this, I get an 'Already up-to-date' message and nothing merges.</p>

<p>However, a</p>

<pre><code>git pull origin an-other-branch
</code></pre>

<p>always updates it like you would expect.</p>

<p>Also, running git diff</p>

<pre><code>git diff origin/an-other-branch
</code></pre>

<p>shows that there are differences, so I think I have my syntax wrong.</p>

<p>What am I doing wrong?</p>

<p><strong>EDIT [2010-04-09]:</strong> I have checked a couple of times, and I'm definitely not on a different branch. Should my 'git fetch' followed by a 'git merge' (as shown above) do the exact same thing as a git pull? I will get some workflow showing the results of a git status etc.</p>
","0","277","0","0"
"21452934","1635129","2014-01-30 09:49:50","1","135","<git><git-clone><git-fetch>","What is the easiest way to push a very messy local git repo to a remote git repo, chunk by chunk?","<p>I have forked and then cloned a git repo that my research group is working on a while ago. I was (and still am) new to git, but I happily created a few branches, occasionally merging them with the changes from the remote source. I have also pushed my changes every now and again to my remote forked version of the repo, but I never pushed much to the original repo, because my work was undone and nobody demanded it.</p>

<p>Here is the situation: I have a whole load of changes committed and pushed to my remote repo. Almost none of it made it to the original remote repo that the rest of the group is working on. Just doing one big diff is out of the question, because there is still way too much scruffy unfinished work that nobody besides me might need. How do I start pushing selected changes (as in, selected manually, by hand) to the remote repo, chunk by chunk?</p>

<p>I am not fluent in git, and I wonder if I have to make a clean clone and start from there. Is there a smarter way of approaching my situation?</p>

<p>Thank you.</p>
","2","1635129","0","0"
"31443255","4199880","2015-07-16 00:01:09","1","200","<git><git-fetch>","How to see what will be merged after git fetch","<p>My question is after doing a <code>git fetch</code> how can I see what is what git actually fetched from origin?
I have my guesses by using diff but I don't know exactly how I can do it. </p>
","0","4199880","",""
"47671726","7076079","2017-12-06 10:12:30","-1","3341","<git><git-fetch>","Why doesn't git fetch update local branch?","<p>I have the following scenario:</p>

<p>I have my remote branch equal to my local branch. Then I made some changes in the remote branch and some different changes in my local branch.</p>

<p>My idea is to run <code>git fetch</code>, to sync my local branch, then <strong>check the differences</strong>, and then push everything, but it simply doesn't work! (<code>git fetch</code> seems to not get the changes made in the remote branch before)
I know running <code>git pull</code> ""fixes"" this, or <code>git push -f</code> but I want to review the changes before commit.</p>

<p>Why doesn't <code>git fetch</code> work as expected? Or how can I otherwise review the differences before commit?</p>
","3","7076079","",""
"47675225","245549","2017-12-06 13:15:25","1","4387","<git><git-fetch>","How to see a result of git fetch?","<p>I fetch a branch from a remote repository. How can I see that it has worked successfully? I expect that after this fetch I should have a (copy of) remote branch locally but I cannot find it (neither with <code>git branch</code> nor <code>git branch -r</code> nor <code>git status</code>). To me it looks like nothing has happened.</p>
","4","245549","",""
"11892517","571575","2012-08-09 21:52:53","38","85131","<git><branch><git-fetch>","git fetch vs. git fetch origin master have different effects on tracking branch","<p>This is mostly of the nature of a curiosity as I'm trying to get familiar with Git. I have looked at the documentation for 'git fetch' but I don't see an obvious explanation for the below.  Thanks in advance, and apologies if this is howlingly obvious.</p>

<p>1) From a central repository, say GitHub, I clone a repository named <code>website</code> on each of two machines, <code>HostA</code> and <code>HostB</code>.  </p>

<p>2) on <code>HostA</code>, I make a change to a file, say <code>README.txt</code>, and commit it.<br>
At this point on <code>HostA</code>, the commits for branches <code>master</code> and
<code>origin/master</code> are, as expected different since I haven't pushed yet</p>

<pre><code>git show master
git show origin/master
</code></pre>

<p>report different hashes (since <code>master</code> has the change and <code>origin/master</code> does not)</p>

<p>3) Once I push, they are after that the same.</p>

<hr>

<p>4) Now, over on <code>HostB</code>, if I do the following:</p>

<pre><code>git fetch
git merge FETCH_HEAD
</code></pre>

<p>afterwards, on HostB <code>master</code> and <code>origin/master</code> report the same hash when queried with <code>git show</code></p>

<p>BUT</p>

<p>if instead I had done, on <code>HostB</code>:</p>

<pre><code>git fetch origin master
git merge FETCH_HEAD
</code></pre>

<p>at that point the hashes still differ.</p>

<pre><code>git show origin
git show origin/master
</code></pre>

<p>report <em>different</em> hashes</p>

<p>The tracking branch <code>origin/master</code> isn't updated until I do a plain <code>git fetch</code></p>

<p>Why is this?</p>
","1","571575","0","0"
"29603815","3105390","2015-04-13 11:06:05","0","49","<git><deployment><fetch><git-fetch><shallow-clone>","can't deploy (checkout) code and branch still missing after shallow git fetch","<p>I've made a quick setup of the repository:</p>

<pre><code>git init
git remote add origin git@bitbucket.org:bbaccount/svgopt.git
git fetch origin display-channel --depth 1
remote: Counting objects: 85, done.
remote: Compressing objects: 100% (82/82), done.
remote: Total 85 (delta 5), reused 47 (delta 0)
Unpacking objects: 100% (85/85), done.
From bitbucket.org:bbaccount/svgopt
 * branch            display-channel -&gt; FETCH_HEAD
</code></pre>

<p>Then, when I'm trying to get the code:  </p>

<pre><code>git checkout display-channel
</code></pre>

<p>I get:</p>

<pre><code>error: pathspec 'display-channel' did not match any file(s) known to git.
</code></pre>

<p>I've checked and despite the <code>git fetch</code> log output the branch doesn't seem to be locally avaliable:</p>

<pre><code>git branch -a
</code></pre>

<p>returns nothing. I'm looking to get the most recent code from single branch only (no reason to pull all) - can I not do that?</p>
","0","3105390","",""
"29626398","4523902","2015-04-14 11:42:32","0","500","<git><repository><git-fetch>","git fetch origin just stops doesn't do anything","<p>I have git branches on a remote server They are like:</p>

<pre><code>origin/ABCD
origin/HEAD -&gt; origin/master
origin/XYZP
origin/PQRS
</code></pre>

<p>I see them when I run <code>git branch -r</code>.</p>

<p>Now, I am at a local machine, which is connected to the remote server, and I am on a local branch say ABCD.</p>

<pre><code>* ABCD
</code></pre>

<p>I wish to update the remote branch for my local machine, so that I can see the code. I do:</p>

<pre><code>git fetch origin 
</code></pre>

<p>but nothing happens; it just stops, even though it used to ask for the remote server's password. What's happening?</p>
","3","4523902","",""
"12572583","617937","2012-09-24 20:41:16","3","1141","<git><git-checkout><git-fetch>","Does git checkout automatically fetch first?","<p>Say I have a command that looks as follows:</p>

<p><code>git checkout -b my-branch origin/dev</code></p>

<p>Assuming I have already fetched from <code>origin</code> before, so I know it has a <code>dev</code> branch, do I <strong>need</strong> to run <code>git fetch</code> before <code>git checkout</code>, or will <code>checkout</code> always fetch up to the latest commit in the remote branch?</p>
","0","617937","0","0"
"48484506","7581","2018-01-28 08:28:29","2","303","<git><git-tag><git-fetch>","Fetch new tags but don't update old ones in git","<p>In git, putting a <code>+</code> in front of a refspec is supposed to mean ""allow overwrites"" - i.e., the difference between</p>

<pre><code>git fetch origin +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>and</p>

<pre><code>git fetch origin refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>Is that the latter form will not update a remote branch unless it is a fast-forward merge from the existing remote branch.</p>

<p>It seems that this doesn't work for tags, though. Whether I add a <code>+</code> in front or not, an updated tag in the remote will update the local tag as soon as I fetch, and the only indication something has happened is a <code>t</code> flag for a ""successful tag update"".</p>

<p>Here's a simple reproduction (on Linux/cygwin/MinGW):</p>

<pre><code>mkdir repo1
cd repo1
git init
for i in `seq 10`; do echo $i &gt; $i.txt; git add $i.txt; git commit -m ""$i""; done
git branch branch10
git tag tag10
cd ..
git clone repo1 repo2
cd repo1
git branch -f branch10 branch10^  # move branch10 one commit back
git tag -f tag10 tag10^  # move tag10 one commit back
cd ../repo2
git fetch origin refs/heads/*:refs/remotes/origin/* refs/tags/*:refs/tags/*
</code></pre>

<p>The output of the last command is:</p>

<pre><code>From C:/Users/israel.tsadok/Documents/test/repo1
 ! [rejected]        branch10   -&gt; origin/branch10  (non-fast-forward)
 t [tag update]      tag10      -&gt; tag10
</code></pre>

<p>The commit gets rejected, as expected, but the tag gets merrily updated.</p>

<p>I would like to be able to fetch only new tags from a remote, without worrying about changing existing tags. What's the best way to do this?</p>
","2","7581","0","0"
"18907689","1769790","2013-09-20 01:48:43","12","20073","<git><git-branch><git-pull><git-fetch>","Issue with git pull master is out of sync with origin master","<p>These are the sequence of steps I have performed:</p>

<ol>
<li>committed my changes in branch to local master (commit id <code>dc9afg2k</code>)</li>
<li><code>git fetch origin master &amp;&amp; git merge origin master</code></li>
<li><code>git checkout master</code> </li>
<li><code>git pull</code> (this pulled all recent changes)</li>
<li><code>git fetch origin master &amp;&amp; git merge origin master</code></li>
<li><code>git reset --hard origin/master</code></li>
<li><code>git checkout branch</code> </li>
<li><code>git blog</code> 
<li><code>git reset --hard dc9afg2k</code> (commit successful) </li>
<li><code>git checkout master</code></li>
<li><code>git log</code> (this was gone back to 2 days ago).</li>
<li><code>git pull</code> (<code>master</code> is not updating with current <code>origin/master</code>).</li>
</ol>
","0","1769790","0","0"
"21810301","655316","2014-02-16 11:07:15","2","113","<git><git-merge><git-pull><git-fetch>","How to fetch and merge from URL into a project from zip file, using git?","<p>I downloaded a big zip file from Github, months ago. I decided to change some parts of the project. I unzipped the file contents and made a mistake and executed these lines:</p>

<pre><code>git init
git add .
git commit -a

git fetch https://github.com/Path_To_Project
</code></pre>

<p>This last line downloaded a big amount of data, which I thought it would auto merge it with my local files.</p>

<p>Now, I see that my local project is not updated. Still there are a huge amount of data in <code>.git/objects</code> folder. How can I merge those data into my project?</p>
","0","655316","0","0"
"48709059","5784246","2018-02-09 15:27:09","0","583","<git><git-fetch><git-mirror>","Update git mirror without pruning local branches following a specific pattern","<p>I have to update frequently a mirror of a git repository on Github.
In the meantime, I created branches following a specific pattern (let's say <code>foo-[1-9]+[0-9]*</code>) on my local mirror. These branches were created at a given tag and contains internal patches.</p>

<p>I would like to update my mirror frequently and get an exact copy of Github's repository + the branches containing internal patches.</p>

<p>At the time I created the mirror, let's assume the state of Github's repository is the below:</p>

<pre><code>      C---D branchA
     /
A---B---E---F master
        \
         G---H branchB

v0.1 --&gt; F
</code></pre>

<p>We use the software at tag <strong>v0.1</strong> and we created patches for some reasons to fix the build or the software. The state of the local repository is now:</p>

<pre><code>      C---D branchA
     /
A---B---E---F master
        \   \
         \   I---J foo-1
          \
           G---H branchB

v0.1 --&gt; F
foo-1 has been created and host patches for v0.1
</code></pre>

<p>In the meantime, new commits, branches appeared on Github and development branches were merged and then deleted. The state of Github's repository is now :</p>

<pre><code>                          J'---K branchC
                         /
A---B---E---F---C---D---I' master
            \
             G---H branchB

v0.1 --&gt; F
v0.2 --&gt; D
branchB has been rebased
branchC has been created
branchA has been merged into master and then deleted
</code></pre>

<p>At first I clone the mirror.</p>

<p><code>git clone --mirror ${url_local_repo}</code></p>

<p>Then I add Github's repository as remote.</p>

<p><code>git remote add --mirror=fetch github ${url_github_repo}</code></p>

<p>Finally I fetch the changes from github.</p>

<pre><code>git fetch --tags --prune github
   From ${url_github_repo}                                                                                     
    x [deleted]         (none)     -&gt; branchA                                                     
    x [deleted]         (none)     -&gt; foo-1                                                                                                               
    * [new branch]      branchC    -&gt; branchC
    E..F                branchB    -&gt; branchB
    F..I'               master     -&gt; master
</code></pre>

<p><code>foo-1</code> is deleted but I want to keep it.
I tried to screen the fetch using glob but it does not work.</p>

<pre><code>git fetch --dry-run --prune github '+refs/heads/*:refs/heads/[!f][!o][!o]*'
fatal: Invalid refspec '+refs/heads/*:refs/heads/[!f][!o][!o]*'
</code></pre>

<p>What would you suggest ?</p>
","0","5784246","",""
"3332938","223092","2010-07-26 07:22:13","4","3150","<git><git-fetch>","Can ""git fetch"" be told not to use ""git upload-pack"" for local repositories?","<p>When using <code>git fetch</code> to fetch refs from one (very large) repository to another one on the local machine, <code>git upload-pack</code> takes a very long time to create pack files.  In the local case there's not such a need to minimize the amount of data transported, and I don't care about disk space lost by losing delta compression, so ideally I'd prefer for the missing objects to be copied rather than packed and then imported.  Is there any way to tell <code>git fetch</code> to just copy the missing objects when using the local transport?   </p>

<p>Or, more generally, is there a way to suppress the generation of pack files globally?  Really I just want to use git as a versioned filesystem that doesn't use up extra space for identical files - packing and repacking seems to be the time-consuming step that makes this awkward.</p>

<p>Incidentally, I've spent some time trying to optimize config options so that repacking doesn't take so long (nor start thrashing) so I don't think the answer is ""use these config options and packing will happen much faster"" - however, perhaps I've got that all wrong, so just to be clear, the config options that I'm typically using (on a maching with 2 GiB of RAM) are:</p>

<pre><code>core.deltacachesize=1
core.packedgitwindowsize=16m
core.packedgitlimit=128m
pack.packsizelimit=512m
pack.windowmemory=200m
pack.deltacachesize=200m
pack.window=4
pack.compression=3
pack.threads=0
gc.auto=0
gc.pruneexpire=never
receive.autogc=false
</code></pre>
","1","223092","",""
"41158603","7291459","2016-12-15 07:26:37","3","1977","<git><encoding><utf-8><git-fetch>","git fetch changes german umlauts","<p>I have multiple git repositories that are all utf-8 encoded and display umlauts correctly. I want them to be combined into a single repo (each original repo is a single branch in the new one). My system is configured to use utf-8 as the default git encoding.
I do the following steps:</p>

<pre><code>git init test (initializes as utf-8)
cd test
git remote add test_remote C:/temp/remote_repo
git fetch --all
git checkout -b test_local test_remote/master
</code></pre>

<p>After that, i have the remote branch master in the local branch test_local with all commits. My problem is, that the german umlauts aren't shown correctly, but git log gives something like Ã¼ for ü.</p>

<p>My question is, why does git fetch change encodings and why isn't it shown correctly in the new repo, as it is also utf-8?</p>

<p>I attached an example of how i fetch the remote repo and the commit message changes while the commit hash stays the same: 
<a href=""https://i.stack.imgur.com/LTfEL.png"" rel=""nofollow noreferrer"">Git Bash Screenshot</a></p>
","3","7291459","0","0"
"41779529","5259594","2017-01-21 12:46:24","3","5264","<git><bitbucket><git-fetch>","Why git fetch doesn't download anything?","<p>I'm trying to download my project which is uploaded on bitbucket on my local directory. As far as I know about <code>git fetch</code>, it should download the project <em>(but not <code>merge</code> it)</em>. </p>

<p>Well I have a connection to my repository as well, an here is what I've done:</p>

<p><a href=""https://i.stack.imgur.com/qY48m.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qY48m.png"" alt=""enter image description here""></a></p>

<p>And this is the result of <code>git fetch</code>: <em>(as you see it in the image above)</em></p>

<pre><code>$ git fetch
remote: Counting objects: 114, done.
remote: Compressing objects: 100% (104/104), done.
remote: Total 114 (delta 6), reused 114 (delta 6)
Receiving objects: 100% (114/114), 10.32 MiB | 2.03 MiB/s, done.
Resolving deltas: 100% (6/6), done.
From https://bitbucket.org/lamtakam/lamtakam
 * [new branch]      master     -&gt; origin/master
</code></pre>

<p>But nothing downloaded ..! Why? As you see, my local directory is empty <em>(except <code>.git</code> folder)</em>. What's wrong?</p>
","16","5259594","0","0"
"41813643","200783","2017-01-23 18:56:57","10","7348","<git><tags><git-fetch>","Why is git fetch not fetching any tags?","<p>I have created a sandbox git repository containing a few commits and a couple of tags, one lightweight and one annotated:</p>

<pre><code>&gt; mkdir one; cd one; git init

&gt; touch a.txt; git add a.txt; git commit -m""a.txt""

&gt; touch b.txt; git add b.txt; git commit -m""b.txt""
&gt; git tag light

&gt; touch c.txt; git add c.txt; git commit -m""c.txt""
&gt; git tag -a annot -m""annot""
</code></pre>

<p>I now create a second repository and fetch from the first:</p>

<pre><code>&gt; mkdir two; cd two; git init

&gt; git remote add one &lt;...&gt;/one
&gt; git fetch one master
remote: Counting objects: 9, done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 9 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (9/9), done.
From &lt;...&gt;/one
 * branch            master     -&gt; FETCH_HEAD
 * [new branch]      master     -&gt; one/master
</code></pre>

<p>Why have neither of the tags been fetched? I expected they would be, based on <a href=""https://git-scm.com/docs/git-fetch"" rel=""noreferrer"">the documentation for <code>git fetch</code></a>:</p>

<blockquote>
  <p>By default, any tag that points into the histories being fetched is also fetched; the effect is to fetch tags that point at branches that you are interested in.</p>
</blockquote>
","4","200783","0","0"
"40870139","3581539","2016-11-29 15:53:34","1","505","<git><zsh><git-fetch>","How to correctly fetch git notes with zsh?","<p>Recently vagrant image i use switched to zsh and i can't get git notes from remote with it. I try:</p>

<pre><code>git fetch origin refs/notes/*:refs/notes/*
</code></pre>

<p>And get:</p>

<pre><code>zsh: no matches found: refs/notes/*:refs/notes/*
</code></pre>

<p>What is the correct command then?</p>
","0","3581539","",""
"30392969","674064","2015-05-22 09:22:04","14","6277","<git><git-branch><git-checkout><git-fetch>","fetch and checkout a remote git branch in just one command","<p>If</p>
<ul>
<li>I have local repo with a remote <code>$REMOTE</code> already set up</li>
<li>and a new branch <code>$BRANCH</code> exists on the remote repo that I haven't fetched, yet</li>
</ul>
<p>can I fetch that branch <strong>and</strong> check it out into a tracking local branch of the same name <strong>in a single command</strong>?</p>
<p>I can achieve the desired result in <em>two</em> commands either with</p>

<pre class=""lang-sh prettyprint-override""><code>git fetch $REMOTE $BRANCH
git checkout $BRANCH # or more explicitly git checkout -b $BRANCH $REMOTE/$BRANCH
</code></pre>
<p>or (inspired by <a href=""https://stackoverflow.com/a/19442557/674064"">this answer</a> to Question <a href=""https://stackoverflow.com/q/1783405/674064"">How do I check out a remote Git branch?</a>) with</p>
<pre class=""lang-sh prettyprint-override""><code>git fetch $REMOTE $BRANCH:$BRANCH
git branch --set-upstream-to=$BRANCH $BRANCH
</code></pre>
","3","674064","",""
"31177893","258479","2015-07-02 07:16:09","22","25087","<git><git-pull><git-fetch>","Why does git log not show anything new after git fetch?","<p>I am learning about working with Git remotes by reading the <a href=""http://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes"" rel=""noreferrer"">relevant section of the Pro Git Book</a>.</p>

<p>If you clone a repository, the command automatically adds that remote repository under the name ""origin"". So, <code>git fetch origin</code> fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.</p>

<p>It’s important to note that the <code>git fetch</code> command only <em>fetches</em> the data to your local repository; it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.</p>

<p>Here is what I tried. I cloned a repository and edited a file.
In the original repository, someone updated the same file and pushed.
Then,</p>

<ol>
<li><p>I ran <code>git fetch</code>.
It showed some update progress message. However, <code>git log</code> did not show that update. Did I misunderstand what <code>git fetch</code> does? Am I missing something?</p></li>
<li><p>I ran <code>git pull</code>, and I got</p></li>
</ol>

<blockquote>
  <p>error: Your local changes to 'hello_world.c' would be overwritten by merge.  Aborting.
  Please, commit your changes or stash them before you can merge.</p>
</blockquote>

<p>Here, I believe it's also merging and to avoid accidental data loss, it aborts. </p>

<p><strong>Edit:</strong>
Thanks for the answers. Actually before looking at the answers, I was trying myself and realized the same with the following commands / outputs:</p>

<pre><code>$ git ls-remote origin
d0006a6bfa95e0e90aa820a0e50d31a548625652    HEAD
d0006a6bfa95e0e90aa820a0e50d31a548625652    refs/heads/master
$ git ls-remote .
14375458b8a6b84f82d9fa4d2ded0bb8c9e87431    HEAD
14375458b8a6b84f82d9fa4d2ded0bb8c9e87431    refs/heads/master
d0006a6bfa95e0e90aa820a0e50d31a548625652    refs/remotes/origin/HEAD
d0006a6bfa95e0e90aa820a0e50d31a548625652    refs/remotes/origin/master
</code></pre>

<p>Also with following commands:</p>

<pre><code>$git log origin --oneline
$git log --oneline
</code></pre>

<p>Thank you for bearing with my stupid questions ;-) </p>
","1","258479","0","0"
"31203443","4205016","2015-07-03 09:35:45","1","568","<git><github><git-pull><git-fetch>","Can git pull be used to update repository with an upstream","<p>From <a href=""https://stackoverflow.com/questions/292357/what-are-the-differences-between-git-pull-and-git-fetch?answertab=votes#tab-top"">What is the difference between &#39;git pull&#39; and &#39;git fetch&#39;?</a>,</p>

<p>If <code>git pull</code> is a combination of <code>git fetch</code> followed by a <code>git merge</code>, can <code>git pull upstream master</code> be used to <strong>fetch and merge</strong> the changes from the upstream in the clone of a forked repository.</p>
","0","4205016","",""
"31233581","4027368","2015-07-05 18:25:12","3","973","<git><git-push><git-fetch><git-non-bare-repository>","Why is `git push` to non-bare remote not the dual of `git fetch` from the remote","<p>First, I understand the <strong>how</strong> related to pushing to non-bare git remotes, including the use of the git config option <code>receive.denyCurrentBranch</code> and other work arounds, so I'm <strong>NOT</strong> looking for answers such as those here:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/2816369/git-push-error-remote-rejected-master-master-branch-is-currently-checked"">Git push error &#39;[remote rejected] master -&gt; master (branch is currently checked out)&#39;</a></li>
<li><a href=""https://stackoverflow.com/questions/1764380/push-to-a-non-bare-git-repository"">Push to a non-bare Git repository</a></li>
<li><a href=""https://stackoverflow.com/questions/16550040/git-pushing-to-non-bare-repo-save-current-worktree"">Git pushing to non-bare repo, save current worktree</a></li>
<li><a href=""https://stackoverflow.com/questions/6075584/git-making-pushes-to-non-bare-repositories-safe"">Git: making pushes to non-bare repositories safe</a></li>
</ul>

<p>This is more of a git implementation/representation/philosophical question.</p>

<p>Why can't a <code>git push &lt;remote&gt;</code> to a non-bare remote be the dual or essentially the same as a <code>git fetch &lt;source&gt;</code> from the remote?  That way, my local working dir on the remote may be out of date (behind) the new content, and I might even have local changes (commits ahead, or even staged/unstaged/stashed/whatever), but that working dir is completely untouched by the push operation?  If it did, then once on the remote, I could merge or rebase or whatevever necessary.    In fact, that's exactly what is claimed by <a href=""https://git.wiki.kernel.org/index.php/GitFaq#push-is-reverse-of-fetch"" rel=""nofollow noreferrer"">this kernel.org git faq entry</a>.  </p>

<p>Motiviation for this is really the same as everyone else who asks the <strong>how</strong> questions:  I don't have any way to easily access the ""source"" of the push from the remote due to {firewall, nat, security} reasons.</p>

<p>Probably I'm missing some fundamental knowledge of how git really tracks things that ""<em>if I only understood XXXX</em>"", I'd know the answer;  enlighten me, please.</p>
","3","4027368","0","0"
"48014363","5898008","2017-12-28 21:03:37","2","45","<git><git-branch><git-fetch>","After using git fetch only to have a look at others' work, how to get rid of fetched branches?","<p>I have a project with a friend with only one branch, <code>master</code>. My friend last worked on the project and I fetched (<code>git fetch</code>) his work just to have a look. This created a branch called <code>origin/master</code>:</p>

<pre><code>Project ps1$ git branch -a
  * master
    remotes/origin/master
</code></pre>

<p>I checked it out (<code>git checkout origin/master</code>) and I don't agree with everything that was done, so I don't want to merge now. I'm going to let my friend work more on it. I tried to delete this fetched branch just to clean up, using either</p>

<pre><code>git branch -d remotes/origin/master
</code></pre>

<p>or</p>

<pre><code>git branch -d origin/master
</code></pre>

<p>but it said the branch was not found in both cases. How do I get rid of this branch (should I even do this?)?</p>
","2","5898008","",""
"49199751","8182674","2018-03-09 18:12:01","4","4875","<git><git-merge><git-fetch>","How to see changed files after calling git fetch","<p>If two people are working on the same repository on github and the same branch master. Then say person A pushes their change to master and I as person B, how do I check the files changed in after calling <code>git fetch</code>? </p>

<p>If I do: </p>

<pre><code>git fetch
git merge master origin/master
</code></pre>

<p>I get this line: </p>

<pre><code>aa@DESKTOP-KQQ0A3T MINGW64 ~/..
$ git merge master origin/master
Merge made by the 'recursive' strategy.
 src/main.js | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)
</code></pre>

<p>I like how the diff in <code>src/main.js</code> is described in that way, but that info appears only when I merge, so my question is, what command should I use to see the same info about the diff but before doing merge? </p>
","0","8182674","0","0"
"14264216","1031863","2013-01-10 17:55:46","1","1440","<git><github><git-fetch>","How does git fetch work?","<p>From one of most followed blogs, When you do git fetch, Git gathers any commits from the target branch that do not exist in your current branch and stores them in your local repo. However, it does not merge them with your current branch. </p>

<p>After fetching all the commits, where does git store all these commits (since, it's not merging them with my local branch) and how does git repo history changes when i do git fetch?</p>
","0","1031863","",""
"48235034","1223975","2018-01-12 22:42:47","1","613","<git><git-fetch>","git fetch only tip of branch","<pre><code>git init
git remote add production ""ssh://domain.com/foo.git/""
git fetch origin
npm install --production --silent
</code></pre>

<p>the problem is that <code>git fetch</code> seems to be fetching a lot of commits.</p>

<p>I only want to fetch the tip of the master branch from the origin remote. Does anyone know to fetch just the latest commit from a certain branch?</p>
","2","1223975","",""
"40784842","3079520","2016-11-24 11:08:03","11","3205","<git><git-branch><git-fetch>","git fetch branches with specified prefix","<p>I have following branches in remote origin.</p>

<pre><code>ft_d_feature_abc
ft_d_feature_xyz
ft_d_feature_lam
ft_d_feature_ton
ft_m_feature_mak
ft_m_feature_echo
ft_m_feature_laa
ft_m_feature_pol
</code></pre>

<p>I want to fetch branches which are starting with <code>ft_d</code>. How can I achieve this with <code>git fetch</code>?
My Git version is 1.7.9.5.</p>
","0","3079520","",""
"40886812","1671693","2016-11-30 11:08:45","0","216","<git><git-fetch>","git fetch/pull keeps updating branch","<p>Every time I do a git fetch/pull I am getting and update that a new branch has been downloaded. I am certain that the branch isn't being updated on the server side in the interim. </p>

<p>What could be causing this?</p>

<p>The server is a gitlab instance </p>

<p>See below: (edited for brevity and privacy)</p>

<pre><code>&gt; git pull
From &lt;remote_server&gt;
 * [new branch]      branch_name -&gt; origin/branch_name
Already up-to-date.

&gt; git pull
From &lt;remote_server&gt;
 * [new branch]      branch_name -&gt; origin/branch_name
Already up-to-date.

&gt; git fetch
From &lt;remote_server&gt;
 * [new branch]      branch_name -&gt; origin/branch_name

&gt; git br -rd origin/branch_name
Deleted remote-tracking branch origin/branch_name (was 2cce655).

&gt; git fetch
From &lt;remote_server&gt;
 * [new branch]      branch_name -&gt; origin/branch_name

&gt; git fetch
From &lt;remote_server&gt;
 * [new branch]      branch_name -&gt; origin/branch_name


&gt; git --version
git version 2.10.0.windows.1


&gt; git pull origin branch_name
From &lt;remote_server&gt;
 * branch            remote_branch -&gt; FETCH_HEAD
 * [new branch]      remote_branch -&gt; origin/remote_branch
Merge made by the 'recursive' strategy.

&gt; git pull origin branch_name
From &lt;remote_server&gt;
 * branch            remote_branch -&gt; FETCH_HEAD
 * [new branch]      remote_branch -&gt; origin/remote_branch
Already up-to-date.

&gt; git pull origin branch_name
From &lt;remote_server&gt;
 * branch            remote_branch -&gt; FETCH_HEAD
 * [new branch]      remote_branch -&gt; origin/remote_branch
Already up-to-date.
</code></pre>
","10","1671693","",""
"22022106","3198108","2014-02-25 17:47:42","12","15840","<git><branch><git-clone><git-fetch>","git fetch origin doesn't fetch all branches","<p>I read in the answers to <a href=""https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches"">this question</a> that <code>git fetch origin</code> should fetch <em>all</em> branches of origin. In my case, it doesn't seem to give me any branches, though. Here's what I did:</p>

<p>Initially, a remote called origin had 7 branches. I cloned it. <code>git branch</code> then returned only <code>master</code>. I did <code>git fetch origin</code>, and <code>git branch</code> still only shows <code>master</code>. How can I get the other 6 branches without fetching them individually?</p>
","1","3198108","0","0"
"14732836","1475872","2013-02-06 15:37:45","1","119","<git><git-clone><git-fetch>","Odd/garbled remote output from ""git clone"" and ""git fetch"" commands","<p>I've been running into some odd server output (line 5 of the block quote, below) when cloning and fetching from a remote Git repository.  I'm wondering if anyone has a thought as to what could be causing it.</p>

<pre><code>D:\dev&gt;git clone https://&lt;user&gt;@&lt;repo&gt;
Cloning into '&lt;repo&gt;'...
remote: Counting objects: 345583, done.
remote: Compressing objects: 100% (26532/26532), done.
remote: Total 34R558ece3 iv(dinelg taob 3je19ct67s:3) 1, 00re% us(3ed45 358443/25345 55(d83el),ta 2 35418.6591 4)  B
Receiving objects: 100% (345583/345583), 255.40 MiB | 3.55 MiB/s, done.
Resolving deltas: 100% (319673/319673), done.
Checking out files: 100% (16038/16038), done.
</code></pre>

<p>The server version of Git is 1.8.0.msysgit.0 and the local version of Git is 1.7.11.msysgit.1.  My best guess is this is a potential artifact of the version difference, but numerous other developers on my team use the same version and have not reported such output.</p>
","2","1475872","",""
"3829426","262667","2010-09-30 09:42:43","5","2951","<git><git-fetch><git-remote>","git fetch with path instead of remote","<p>I understand the idea of running <code>git fetch &lt;remote&gt;</code>, because the remote branches are then available with <code>git checkout &lt;remote&gt;/&lt;branch&gt;</code>.</p>

<p>But how does it work if I just run</p>

<pre><code>git fetch path/to/other/repo
</code></pre>

<p>How can I checkout the corresponding branches? Note that the operation runs silently (even with <code>--verbose</code>), and that no new branch is created.</p>

<p><strong>edit</strong>: just to be clear: I perfectly understand how git works with remotes. I'm just curious about this alternate syntax <code>git fetch path/to/remote</code>, or <code>git fetch &lt;url&gt;</code>. How is it supposed to work? Why does it not create new branches? Why does it run silently even in verbose mode? What is the intended usage?</p>
","0","262667","",""
"41708925","469294","2017-01-17 23:33:26","10","20468","<git><git-pull><git-fetch>","Are ""git fetch --tags --force"" and ""git pull <branch>"" conmutative operations?","<p>Normally the git tags are a fixed reference to a commit. But sometimes they are used to mark some event (<code>last-build</code>, <code>base-line</code>, etc..) and they change frequently.   </p>

<p>I have an script that refreshes those kind of ""floating"" tags from the reference repository.</p>

<pre><code>git fetch --tags --force
</code></pre>

<p>and also make pull from one branch:</p>

<pre><code>git pull origin &lt;mybranch&gt;
</code></pre>

<p>I know that many git users warn about using floating tags, but i am forced to deal with that. My question is:</p>

<p><em>If the branch is marked by one of those floating tags... does the execution order of the commands matter?</em></p>

<p>I am afraid that <code>git pull</code> doesn't refresh the tags when they exist locally, and that it might work with the reference of the all tags if it runs first.</p>

<p><code>git pull</code> has a <code>--force</code> option, but the help section of the option <code>--no-tags</code> explain the default behavior as:</p>

<blockquote>
  <p>By default, tags that point at objects that are downloaded from the
  remote repository are fetched and stored locally.</p>
</blockquote>

<p>Does it means that the objects should be downloaded first in order to be able to refresh the tags ? In that case <code>git pull</code> should go first.</p>

<p>Which is the correct order?</p>
","2","469294","0","0"
"42000439","621690","2017-02-02 11:00:05","0","756","<git><version-control><git-fetch>","git fetch : output that there was an update","<p>The expected behaviour for fetch in case of an update is the following (imho):</p>

<pre><code>$ git fetch -p
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From AAA
   a061e40..2058467  develop    -&gt; origin/develop
</code></pre>

<p>This works for me in project A. Fetching from the same git host, same local system, different project (say, project B), <code>git fetch</code> gives me no output. I think it has changed at some point in time but I cannot make out what the cause was.</p>

<p>Project B, <code>git fetch</code> output:</p>

<pre><code>$ git checkout develop
Switched to branch 'develop'
Your branch is up-to-date with 'origin/develop'.
$ git fetch -pv
From BBB
 = [up to date]      develop                       -&gt; origin/develop
$ git status
On branch develop
Your branch is behind 'origin/develop' by 2 commits, and can be fast-forwarded.
  (use ""git pull"" to update your local branch)
</code></pre>

<p>Project A config:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    precomposeunicode = true
[remote ""origin""]
    url = AAA
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[branch ""develop""]
    remote = origin
    merge = refs/heads/develop

$ git branch -vv
* develop    a061e40 [origin/develop: behind 1]
</code></pre>

<p>Project B config:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    precomposeunicode = true
[remote ""origin""]
    url = BBB
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[branch ""develop""]
    remote = origin
    merge = refs/heads/develop

$ git branch -vv
* develop                       7d1afd6 [origin/develop: behind 2]
</code></pre>

<p>How can I change the behavior of <code>git fetch</code> in project B back to how it behaves in project A?</p>
","0","621690","",""
"42260136","1790644","2017-02-15 21:11:33","0","117","<git><git-pull><git-fetch>","git pull from fetch head / unavailable server","<p>Before losing internet access I ran <code>git fetch --all</code> to fetch all branches.</p>

<blockquote>
  <p>With a connection to the server now unavailable, how can I do a <code>git pull</code>?</p>
</blockquote>

<pre><code>$ git checkout feature.a
Already on 'feature.a'
Your branch is behind 'origin/feature.a' by 7 commits, and can be fast-forwarded.
  (use ""git pull"" to update your local branch)

$ git pull
ssh: Could not resolve hostname unavailable.example.com: nodename nor servname provided, or not known
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>
","3","1790644","",""
"49784394","2809294","2018-04-11 21:00:37","4","1302","<git><git-pull><git-fetch>","What is the exact difference when you execute `git fetch upstream master:master` vs `git pull upstream master:master`","<p>I know the difference between <code>git fetch</code> and <code>git pull</code>. <code>git pull</code> is basically a <code>git fetch</code> + <code>git merge</code> in one command.</p>

<p>However, I was researching on how to update my fork (master branch) with the upstream <strong>without checking out the master branch</strong>. I came across this SO answer - <a href=""https://stackoverflow.com/questions/3216360/merge-update-and-pull-git-branches-without-using-checkouts/4157106#4157106"">Merge, update and pull Git branches without checkouts</a></p>

<p>But when I used <code>git fetch upstream master:master</code> after I was already checked out on master, I ran into this error -</p>

<pre><code>fatal: Refusing to fetch into current branch refs/heads/master of non-bare repository
</code></pre>

<p>So, I tried <code>git pull upstream master:master</code> and it worked. What is interesting is that doing <code>git pull upstream master:master</code> updates my fork with upstream <strong>regardless of whether I am on master or not</strong>. Whereas <code>git fetch upstream master:master</code> only works when I am <strong>NOT on master</strong> branch.</p>

<p>It will be very interesting to read explanation on this, from the knowledgeable folks out here.</p>
","2","2809294","0","0"
"61566959","9210343","2020-05-02 22:09:28","0","34","<git><git-branch><git-fetch>","How many branches are fetched after git fetch","<p>Assuming I have tracking branch br1 and I am on that branch will git fetch downloand changes only for that branch or every other branch from the same remote as br1. </p>
","3","9210343","",""
"61568262","9210343","2020-05-03 00:45:59","-1","44","<git><git-branch><git-fetch>","Clonning again git repository instead of fetching and merging every branch","<p>Is it often practice to delete local git repository and make fresh git clone instead of fetching every remote branch and merging it with local branches?</p>
","5","9210343","",""
"61587416","2807741","2020-05-04 07:48:42","0","848","<git><github><branch><git-fetch>","Git: git fetch <branch> ends in ""xxx/xxx does not appear to be a git repository""","<p>I'm having problems on fetching one specific branch from my remote repo.</p>

<p>If I do git <strong>branch -a</strong> the output is:</p>

<pre><code>* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/release/2.0.23175_BBDDv10
...
</code></pre>

<p>and that is ok, all my branches are in remote but as soon as I do</p>

<pre><code>git fetch origin/release/2.0.23175_BBDDv10
</code></pre>

<p>I receive:</p>

<pre><code>fatal: 'origin/release/2.0.23175_BBDDv10' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I'm the owner of the repo and I have rights on it and if I do:</p>

<pre><code>git remote -v
</code></pre>

<p>the output is:</p>

<pre><code>origin  https://xxxm@xxx.org/xxxxx/xxxxxxx.git (fetch)
origin  https://xxx@xxx.org/xxxxx/xxxxxxx.git (push)
</code></pre>

<p>So 'origin' is pointing to where it have to.</p>

<p>At this point <strong>I'm stuck on being able to fetch one specific branch</strong> (haven't tried fetch --all yet)</p>

<p>Something to add just in case:</p>

<p>Not sure it may have something to do with it, but just in case and if it is of any help, I can add that I pushed two very big files by mistake yesterday and then removed them both following 'BFG Repo Cleaner' instructions (<a href=""https://rtyley.github.io/bfg-repo-cleaner/"" rel=""nofollow noreferrer"">https://rtyley.github.io/bfg-repo-cleaner/</a>). They're easy to follow and my big unwanted files dissapeared from local and remote/history.</p>
","0","2807741","",""
"43317872","1818935","2017-04-10 08:09:28","17","10057","<git><git-merge><git-remote><git-config><git-fetch>","Understanding .git/config's 'remote' and 'branch' sections","<p>Here's the contents of the <code>remote</code> and <code>branch</code> sections of my <code>.git/config</code> file.</p>

<blockquote>
<pre><code>[remote ""origin""]  
    url = https://EvanAad@bitbucket.org/EvanAad/bitbucketstationlocations.git  
    fetch = +refs/heads/*:refs/remotes/origin/*  
[branch ""master""]  
    remote = origin  
    merge = refs/heads/master
</code></pre>
</blockquote>

<p>What is the meaning and purpose of the contents of these sections, in particular the <code>fetch</code> and <code>merge</code> subsections? How is this information used by Git to guide its operation?</p>
","3","1818935","0","0"
"62240722","2628868","2020-06-07 04:06:45","0","1782","<git><git-remote><git-fetch>","how to change remote fetch url in git","<p>My git remote repo looks like this:</p>

<pre><code>$ git remote -v
origin  https://github.com/jiangxiaoqiang/dolphin-scripts.git (fetch)
origin  https://github.com/jiangxiaoqiang/dolphin-scripts.git (push)
origin  https://gitee.com/jiangxiaoqiang/dolphin-scripts.git (push)
</code></pre>

<p>now I want fetch from <em>gitee</em> by default, how to change the fetch url to <em>gitee</em>?</p>
","1","2628868","",""
"15801930","1431238","2013-04-04 03:17:09","3","520","<git><bitbucket><git-merge><git-push><git-fetch>","Afraid git commit and push will accidentally overwrite changes","<p>I am working on a project with a friend using a remote git tool <a href=""http://bitbucket.org"" rel=""nofollow"">bitbucket.org</a>. So far that we have been working on the master branch at different times, and then commit and push those changes to the remote site for the other to use. </p>

<p>Now he has committed and pushed his changes out to the repository while I was working on my own, and I am afraid that if I push out my commit it will re-write his commit completely. Are my fears correct? I think I should create a new branch, fetch his changes into the master branch, and then merge the two, and then push. Is this a good strategy? Or I am worrying for nothing. A little advice would be great.  </p>
","0","1431238","",""
"68803828","4819735","2021-08-16 13:41:16","1","141","<git><git-fetch><shallow-clone>","git - fetching from a specific branch although repository wasn't cloned with '--single-branch'","<p>To make a long story short, what I'm looking for is to be able to fetch only a specific branch in a local repository, even though this repository wasn't originally cloned with &quot;--single-branch -branch &lt;branch_name&gt;&quot;.</p>
<p>To share the complete story - we would like to use shallow clone for reducing git run time in general and specifically in our custom CI tool. Also I should state that we use the Android's &quot;repo&quot; tool.</p>
<p>As far as I understand, we first need to clone the git repository using --depth=1, which the Android's &quot;repo&quot; tool supports, but that is not quite enough for our CI tool which needs to deepen the fetch for being able to have a common git history when pulling updates from users' repositories. So when we try to deepen the fetch (for simplicity - &quot;git fetch --deepen=1&quot;) then git fetches all branches and tags and spends a lot of run-time doing so, although we only need to deepen the fetch for a very specific branch.</p>
<p>This is resolved if the git repository is initially cloned using &quot;--single-branch -branch &quot; (in addition to --depth=1) and then &quot;git fetch --deepen=1&quot; runs ultra fast. But the issue is that it seems that the Android's &quot;repo&quot; tool does not support cloning git repos using &quot;--single-branch -branch &quot;, hence my question at the top. Alternatively, if there is another way of being able to deepen the fetch for a specific branch - I would be glad to know the details.</p>
<p>Thank you!</p>
","2","4819735","",""
"32654294","1147600","2015-09-18 14:18:16","0","278","<git><git-fetch>","How do I fix a rejected git fetch to a bare repository?","<p>I'm the author of WorldPainter (a map generator for Minecraft). I have a set of git repositories set up to be able to work on WorldPainter at home and at work. There is a full repository on my workstation at home ([Home]) and one at work ([Work]). To transfer changes between them I have set up a bare repository on a network share at home ([Net]) and another bare repository on a USB stick ([USB]). [Home] and [USB] have [Net] as a remote repository, and [Work] has [USB] as a remote repository.</p>

<p>In addition, but I think it is probably not relevant, [Net] has GitHub as a remote repository.</p>

<p>When I want to transfer changes from home to work I do:</p>

<p>[Home] -push-> [Net] &lt;-fetch- [USB] &lt;-pull- [Work]</p>

<p>To transfer changes the other way:</p>

<p>[Work] -push-> [USB] -push-> [Net] &lt;-pull- [Home]</p>

<p>This has worked great so far, but today the fetch from [Net] to [USB] went wrong with the following message:</p>

<pre><code>remote: Counting objects: 13, done.
remote: Compressing objects: 100% (11/11), done.
remote: Total 13 (delta 7), reused 0 (delta 0)
Unpacking objects: 100% (13/13), done.
From file:///mnt/git-repos/WorldPainter-public
 ! [rejected]        master     -&gt; master  (non-fast-forward)
</code></pre>

<p>A push from [USB] to [Net] now fails with a similar message.</p>

<p>I'm finding git very complex and counter-intuitive and at this point I'm lost. If I understand the situation correctly this most likely means that there are conflicting changes which need merging, but since [USB] is a bare repository, I can't merge them.</p>

<p>I've probably done some things in the wrong order to get in this situation, but how do I fix it? Is there a way to temporarily add a working directory to [USB] so I can merge the changes there? Can I move the problem to one of the repositories which <em>does</em> have a working directory and fix the problem there? I'm aware that I can --force the fetch, but that's not very elegant and would probably result in losing changes, right?</p>
","4","1147600","",""
"32718904","2092322","2015-09-22 13:58:10","0","89","<git><zsh><git-fetch>","Reasons for lack of output of git fetch (zsh console)?","<p>I've encountered a problem with git recently. For one of my repositories it does not show any output for <code>git fetch</code> any more.</p>

<p>All the repositories are stored on the same <a href=""http://gitolite.com/gitolite/gitolite.html"" rel=""nofollow"">gitolite</a> server.</p>

<p>See what happens now in my console:</p>

<pre><code># jul is the user
# pushing some work on master
jul@jul-Precision-M4800 ~/workspace/repo-name (git)-[local_branch] % git push origin local_branch:master
Counting objects: 47, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 777 bytes | 0 bytes/s, done.
Total 7 (delta 5), reused 0 (delta 0)
To gitolite:repo-name
   9bd0d8e..308fe47  local_branch -&gt; master

# alright, later (I know there are changes): fetch a fresh(!) master
jul@jul-Precision-M4800 ~/workspace/repo-name (git)-[local_branch] % git fetch
jul@jul-Precision-M4800 ~/workspace/repo-name (git)-[local_branch] % git fetch --all
Fetching origin

# no output!!
# but there are updates (2 fresh commits):

jul@jul-Precision-M4800 ~/workspace/repo-name (git)-[local_branch] % git log --oneline local_branch..origin/master
acde85f Merge branch 'master' of gitolite:repo-name
3b1eb49 any commit message
jul@jul-Precision-M4800 ~/workspace/repo-name (git)-[local_branch] % 
</code></pre>

<hr>

<p>Did anybody see this, too? Which additional informations could be helpful? What are the possible reasons and solutions? Note, that the same works perfectly for the other repositories on this server.</p>

<hr>

<p><strong>[Edit:]</strong>
After deleting all remote tracking branches the situation has not changed.</p>
","3","2092322","0","0"
"50637753","5829906","2018-06-01 06:58:24","1","130","<git><github><git-commit><git-fetch>","git: 3 commits ahead from original repo","<p>I am new to git, so sorry for this noob question.</p>

<p>The changes which were made in original repo in GitHub by others, I updated those changes in my local copy from the original repo and committed to my forked repo, now it is showing 3 commits ahead, inspite of it being identical to the original repo, what should I do? How can I make it even with the original repo? It showing me to pull request changes which are already done in the original repo</p>

<p>I was using Github desktop
,I did the following</p>

<pre><code>1)Change Remote repository in Repository/Repository Settings/Remote/Primary Remote Repository to the the repository I have forked my repo.
2)Press ""Fetch Origin"" button on the main screen.
3)Press ""Pull Origin"" button on the main screen.
4)Change Back ""Primary Remote Repository"" to my fork repository.
5)Press ""Fetch Origin"" button on the main screen.//This step I skipped
6)Press ""Push Origin"" button on the main screen.
</code></pre>

<p>I wanted my forked repo to be identical to original repo, which I achieved, but it is showing 3 commits ahead </p>
","11","5829906","",""
"69046015","3355024","2021-09-03 13:49:39","1","119","<git><git-submodules><git-remote><git-fetch>","Where does git fetch from when doing a git submodule update?","<p>The <code>git submodule update</code> documentation says:</p>
<blockquote>
<p>Update the registered submodules to match what the superproject expects by cloning missing submodules, <strong>fetching missing commits in submodules</strong> and updating the working tree of the submodules.</p>
</blockquote>
<p>But I can't find anything about from which remote git will fetch from. I was hoping to find some configuration, which would define the remote to fetch from.</p>
<p>My setup right now is: I have two remotes defined in one of my submodules. When doing a <code>git submodule update</code> I get following error:</p>
<pre><code>fatal: --stdin can only be used when fetching from one remote
</code></pre>
<p>This sounds like git is trying to fetch from all known remotes. Is there a way to configure the remote fetch from?</p>
<p>Worth mentioning: none of the submodule's remotes is named <code>origin</code> (I really hope that is not the issue here)</p>
","2","3355024","",""
"34638742","5753322","2016-01-06 17:10:07","3","136","<git><jgit><git-fetch>","Use jgit to do git fetch -p","<p>I understood that <code>git.fetch().setRemoveDeletedRefs(true).call()</code> would do the equivalent of ""git fetch -p"" in my program, but when I run that line, it actually deletes my master and HEAD remote refs. Running ""git fetch -p"" on the CLI does not. </p>

<p>Strangely enough, this doesn't happen on my teammates' machines. Also, while I was trying to figure out what the issue was, I set a breakpoint at that line in Intellij and used the expression evaluator to play around with different fetch() calls, and continuing the program after that didn't delete those refs, but I haven't been able to repro that since. Is this a bug in jgit, am I doing something wrong with this call, or is something wrong with my repo? </p>
","3","5753322","",""
"41888489","2218640","2017-01-27 07:03:02","3","13407","<git><git-pull><git-checkout><git-fetch>","git fetch not working - but checkout working","<p>I am beginner to git and trying some hands on with it on Windows.</p>
<p>I made a repository on Bitbucket. Added Three files ( SAY A , B , C ) to the master branch via Bitbucket online .</p>
<p>Now  i have folder on my local PC , where i used <code>git fetch</code> for getting those three file. Three files are now in local repository.</p>
<p>Now , i added one other file (SAY D )  on bitbucket , and changed the content of all three files (A , B , C ) .</p>
<p>Now if i try to fetch the changes via <code>git fetch MY_REMOTE master</code>  ,  I am not getting any changes in my local. but</p>
<ul>
<li><p>with <code>git pull MY_REMOTE master</code> , I am able to see the changes.</p>
</li>
<li><p>with <code>git checkout MY_REMOTE/master</code> , I am able to see the changes.</p>
<p>So the doubt i have ,</p>
</li>
<li><p><code>git fetch</code> simply copies the changes those are not on the local to the local repo except Local repo have changed the same copy. Why <code>git fetch</code> is not working here ?</p>
</li>
<li><p>I don't understand the purpose of doing <code>git checkout MY_REMOTE/master</code> on Local . Why should i do that ?</p>
</li>
</ul>
","0","2218640","0","0"
"34948133","245966","2016-01-22 13:43:09","1","69","<git><git-fetch>","How to git fetch from remote only the branches that I already have locally (partial sync with a remote)","<p>Let's say I have a git remote named <code>alice</code>. This remote has hundreds of branches, but I only fetched a few branches from it, using <code>git fetch alice some-branch</code>, <code>git fetch alice another-branch</code> etc.</p>

<p>Now, I want to sync from <code>alice</code> only the branches that I already have - I don't want to fetch all of them. How do I do it?</p>
","0","245966","0","0"
"41978721","55075","2017-02-01 11:31:49","1","115","<git><git-fetch><git-show>","How to invoke `git show` only for the latest fetched branches?","<p>I've repository with hundreds of branches and I'd like to run <code>git show</code> only for these which have been recently fetched or updated as shown by <code>git fetch</code>, e.g.</p>

<pre><code>$ git fetch tester
From repo:Foo/Bar
 * [new branch]      Foo -&gt; origin/Foo
   a7e70a8..a9d7805  Bar -&gt; origin/Bar
 + b673629...293dc64 Baz -&gt; origin/Baz (forced update)
 + 345850e...b3646a3 Qux -&gt; origin/Qux (forced update)
</code></pre>

<p>So I'd like to end up with the command like:</p>

<pre><code>git show origin/Foo origin/Bar origin/Baz origin/Qux
</code></pre>

<p>which will show me the differences between these recent fetched branches and their parents commit(s).</p>

<p>How this can be achieved?</p>

<hr>

<p>I've tried <code>git show FETCH_HEAD</code>, but it shows me only one branch along with the warning that refname 'FETCH_HEAD' is ambiguous.</p>

<p>And <code>git show $(git branch -r --sort=authordate | head)</code> shows me much older branches, secondly the command breaks on lines with <code>-&gt;</code>, so it doesn't work either.</p>
","2","55075","",""
"42184661","3001352","2017-02-12 05:54:06","5","10855","<git><git-pull><git-fetch>","what is the difference between git pull , git fetch and git rebase?","<p>What are the differences between <code>git pull</code> ,  <code>git fetch</code> and <code>git rebase</code>? I feel pull and fetch are same.</p>
","3","3001352","0","0"
"5094993","520548","2011-02-23 18:05:12","9","1380","<git><commit><rebase><git-checkout><git-fetch>","Strange behavior with git fetch","<p>I'm getting a big problem with GIT fetch...look this</p>

<pre><code>$ git fetch
From server:project
   422b4cb..a04c062  master     -&gt; origin/master

$ git show-ref
ba113be885e66a5306d1646cd3db0801170c04f8 refs/heads/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/master
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/test
a04c062261beeb4a951337ebb58745945cac3562 refs/remotes/origin/HEAD
ba113be885e66a5306d1646cd3db0801170c04f8 refs/remotes/origin/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/remotes/origin/master
</code></pre>

<p>And another <code>git fetch</code>:</p>

<pre><code>$ git fetch
From server:project
 + a04c062...422b4cb HEAD       -&gt; origin/HEAD  (forced update)

$ git show-ref
ba113be885e66a5306d1646cd3db0801170c04f8 refs/heads/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/master
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/test
422b4cbac3db2784c8f6e94ffd99c7afcda9122d refs/remotes/origin/HEAD
ba113be885e66a5306d1646cd3db0801170c04f8 refs/remotes/origin/alpha-release
422b4cbac3db2784c8f6e94ffd99c7afcda9122d refs/remotes/origin/master
</code></pre>

<p>And another one...</p>

<pre><code>$ git fetch
From server:project
   422b4cb..a04c062  master     -&gt; origin/master

$ git show-ref
ba113be885e66a5306d1646cd3db0801170c04f8 refs/heads/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/master
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/test
a04c062261beeb4a951337ebb58745945cac3562 refs/remotes/origin/HEAD
ba113be885e66a5306d1646cd3db0801170c04f8 refs/remotes/origin/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/remotes/origin/master
</code></pre>

<p>And another <code>git fetch</code>:</p>

<pre><code>$ git fetch
From server:project
 + a04c062...422b4cb HEAD       -&gt; origin/HEAD  (forced update)

$ git show-ref
ba113be885e66a5306d1646cd3db0801170c04f8 refs/heads/alpha-release
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/master
a04c062261beeb4a951337ebb58745945cac3562 refs/heads/test
422b4cbac3db2784c8f6e94ffd99c7afcda9122d refs/remotes/origin/HEAD
ba113be885e66a5306d1646cd3db0801170c04f8 refs/remotes/origin/alpha-release
422b4cbac3db2784c8f6e94ffd99c7afcda9122d refs/remotes/origin/master
</code></pre>

<p>My <code>refs/remotes/origin/HEAD</code> and <code>refs/remotes/origin/master</code> always force update to <code>422b4cb</code>...</p>

<p>What happened? <code>422b4cb</code>... is a old commit.</p>
","0","520548","0","0"
"61270362","12309483","2020-04-17 11:19:14","3","2505","<git><git-fetch>","Where to see the changes with ""git fetch""?","<p>I am just curious as to how to view changes after typing ""git fetch"".</p>

<p>My research has told me that it allows you to see if your local repository is up to date with the remote repository without changing your code in the local repository. However, where will I be able to view the changes after typing the command?</p>

<p>An example could be my colleague commits a change and I type the command to see if my local repository is up-to-date, what will it display and where will it be displayed?</p>
","2","12309483","",""
"61648984","13028814","2020-05-07 02:43:50","1","196","<node.js><git><git-branch><git-fetch><nodegit>","git-clone a bare repo with nodegit","<h1>Hi,</h1>
<p>I am cloning a worktree as a bare repo in <code>nodegit</code></p>
<pre><code>Git.Clone('/work/localrepo', '/git/newbare', {bare: 1})
</code></pre>
<p>This creates a bare repo just like</p>
<pre><code># in /git/newbare
&gt; git clone --bare /work/localrepo
</code></pre>
<p>Note: <code>newbare</code> has refs to all <code>localrepo</code> branches in <code>/git/newbare/refs/remote/origin</code>,
but only <code>localrepo's</code> active branch is cloned in the <code>newbare's</code> local refs</p>
<p>That means that if <code>localrepo</code> was on master when it was cloned, then <code>newbare</code> is only tracking master</p>
<p>Now in <code>git</code> I can track all branches on <code>origin</code> with</p>
<pre><code>#in bare

&gt; git fetch origin '+refs/*;refs/*'

&gt;&gt;&gt; /git/newbare
    From /work/localrepo
      * [new branch]      feature     -&gt; feature
</code></pre>
<p>Look at <a href=""https://git-scm.com/book/en/v2/Git-Internals-The-Refspec"" rel=""nofollow noreferrer"">refspec</a> if you want more info on the fetch here.</p>
<h1>Problem</h1>
<p>I can't figure out how to setup tracking branches in a bare directory, for all branches on <code>remote/origin</code> with <code>nodegit</code></p>
","0","13028814","0","0"
"61690932","1477456","2020-05-09 02:13:30","2","311","<git><git-merge><git-rebase><git-pull><git-fetch>","Is there a difference between ""git pull --rebase"" and ""git fetch && git rebase --autostash FETCH_HEAD""?","<p>Title says it all. Is there a difference between:</p>

<p><code>git pull --rebase --autostash</code></p>

<p>and</p>

<p><code>git fetch &amp;&amp; git rebase --autostash FETCH_HEAD</code>?</p>

<p>And while we're at it, between:</p>

<p><code>git pull</code></p>

<p>and</p>

<p><code>git fetch &amp;&amp; git merge</code>?</p>

<p>Thanks!</p>
","1","1477456","0","0"
"24513437","1213528","2014-07-01 14:58:10","2","452","<git><git-branch><git-fetch>","git: track more than one remote branches","<p>In our git repository we have several branches, most of which are not used daily and contain gigabytes of information.</p>

<p>As such, I usually work tracking the remote branch I am using:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote ""origin""]
    url = https://sever/repository.git
    fetch = +refs/heads/devel:refs/remotes/origin/devel
</code></pre>

<p>How can I add an extra branch to be fetched from remote?</p>
","2","1213528","0","0"
"6898317","242933","2011-08-01 12:20:46","45","9504","<git><git-push><git-pull><git-fetch>","git pull analogous to / opposite of git push -f?","<p>Sometimes, esp. when I'm the only one working on a remote repository, I like rewriting the history with <code>git rebase -i</code> and <code>git push origin master -f</code>.</p>

<p>How do I do a forced <code>git pull origin master</code> without a merge? I tried it with the <code>-f</code> option, but that didn't work. I just want to rewrite the history of my local git repo to match that of the remote (origin).</p>
","5","242933","0","0"
"44309681","27302","2017-06-01 14:02:22","0","120","<git><git-fetch>","Equivalent of updateInstead for git fetch -u","<p>As <a href=""https://git-scm.com/docs/git-fetch#git-fetch--u"" rel=""nofollow noreferrer"" title=""Documentation for git fetch"">documented</a> and <a href=""https://stackoverflow.com/a/19205680/27302"" title=""A relevant Stack Overflow answer"">discussed</a> elsewhere, <code>git fetch</code> refuses to fetch the current branch unless you supply the <code>-u</code> option.</p>

<p>This behavior makes perfect sense in most cases, and is obviously the correct default. However, it is not the behavior I want. Instead, I would like something like what the configuration option <code>receive.denyCurrentBranch=updateInstead</code> does: if the current working tree and index match <code>HEAD</code>, then allow the fetch and update working tree; otherwise, refuse the fetch with a similar message to the default. Is there any way to do this without writing my own porcelain command using <code>git fetch -u</code>?</p>

<hr>

<p>The reason I want this, in case a better workflow is available, is that I am working on a number of projects stored in separate Git repositories. Most of them are just on the <code>dev</code> local branch, which has the <code>dev/master</code> remote branch as its upstream. When I am actually doing development, I do it on a branch named after whatever feature I’m working on, not the <code>dev</code> branch. I want all the remote branches available, so I need to do a <code>git fetch --all -p</code> regularly, and I additionally need to do a <code>git pull</code> in the projects I’m not building so they have the latest code. Because there are a lot of projects, the easiest way is to just loop through them in Bash and run <code>git fetch --all -p; git pull</code> on all of them. Unfortunately, that also runs <code>git pull</code> on the projects I’m currently making changes on, and that might lead to merge conflicts instead of just getting the latest dependencies.</p>

<p>Instead, I would like the projects I’m not currently working on have the working tree updated automatically; then I only need to run <code>git pull</code> on repositories I am currently working on. That way, I can run it only when it’s appropriate, and not worry about merge conflicts when I just want to build against the latest source of the dependent projects.</p>
","3","27302","",""
"50844087","1792086","2018-06-13 18:37:33","27","51663","<git><git-checkout><git-fetch>","What's the difference among ""git fetch && git checkout"" versus ""git checkout"" only?","<p>Should do we always do as: </p>

<pre><code>git fetch &amp;&amp; git checkout
</code></pre>

<p>Or only, </p>

<pre><code>git checkout
</code></pre>

<p>?</p>

<p>For example when doing a checkout from a branch in bitbucket they provide the command as: </p>

<p><a href=""https://i.stack.imgur.com/zUmsV.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/zUmsV.png"" alt=""enter image description here""></a></p>

<pre><code>git fetch &amp;&amp; git checkout develop
</code></pre>

<p>But why is this necessary if </p>

<blockquote>
  <p>git checkout</p>
</blockquote>

<p>will do the same, isn't it? </p>
","0","1792086","0","0"
"19033763","","2013-09-26 16:32:45","0","61","<git><git-branch><git-pull><git-checkout><git-fetch>","Understanding git fetches and your local repo","<p>I read that, after doing a <code>git fetch</code>, your local repo has all the commits from the original repo, but that they are ""not yet integrated into the cloned repository's local branches"".</p>

<p><strong>What does this mean/imply?</strong></p>

<p>Do I then need to checkout my branch to pull the changes down into my local working copy? Or does it imply something else? Thanks in advance!</p>
","0","","",""
"61016580","4438463","2020-04-03 16:43:55","2","41","<git><git-pull><git-fetch><sparse-checkout><shallow-clone>","Same git size with and without --depth=1","<p>I am writing a script that clones a large git repository, modifies a few files and pushes the changes back to the remote. It needs to run as fast as possible.</p>

<p>Right now, it takes about 10 minutes to clone the repository. The resulting folder is roughly 3GB large, 50% of which is the <code>.git</code> folder. I tried cloning the repository with <code>--depth=1</code>, but the result is basically identical.</p>

<p>I also tried running <code>git fetch origin --depth=1</code>, which downloads a <code>.git</code> folder of about 100MB. However, when I checkout the branch, it then gets back to 3GB.</p>

<p>Why does my <code>.git</code> folder have the same size with and without <code>--depth=1</code>? Does it mean that my history is basically small, and the size comes from large binary files, etc?</p>

<p>Note 1: This workspace is using git lfs. I don't know if that has an impact or not.</p>

<p>Note 2: I intend on experimenting with partial clones in the near future. It looks like it could solve my problem, since I know exactly which files I need to modify.</p>
","1","4438463","",""
"24363345","2607581","2014-06-23 10:11:34","-1","135","<git><git-fetch>","How to overwrite remote specific branches on git fetch?","<p>I have setup a central backup server which has all the developer repos added as remotes. I fetch everyday from all the remotes. It gives me all the branches of developers as <code>dev1/master</code>, <code>dev1/FeatureA</code>, <code>dev2/master</code>, <code>dev2/Hotfix</code> etc. I do this so that I have backup of user repos in case a local system crashes. Things are all fine.</p>

<p>The problem that I face is:
When say <code>dev1</code>'s Repo has 2 branches <code>Br1</code> and <code>Br2</code> that are tracked on backup via <code>dev1/Br1</code> and <code>dev1.Br2</code> respectively. Now the developer deletes one of the branches, say <code>Br1</code>. I do a fetch at EOD on backup server. The backup server still shows that <code>dev1</code> has <code>Br1</code> branch.</p>

<p><strong>How can I make fetch replace all existing branches with the new ones, i.e. also delete <code>dev1/Br1</code> if the remote (<code>dev1</code>) repo deletes the branch?</strong></p>
","8","2607581","",""
"5552879","676439","2011-04-05 13:47:19","2","4285","<git><git-merge><git-pull><git-fetch>","synchronize between 2 git repositories","<p>I have 2 bare repositories. They are made like this:</p>

<pre><code>ssh git@primary.com
git init --bare repo1
ssh git@backup.com
git clone --bare git@primary.com:repo1
</code></pre>

<p>One is used for development (let's call it <strong>primary</strong>) and one is used for backup (in case first is not accessible). Is it possible to automatically synchronize them - something like doing <code>git pull</code> on backup.</p>

<p>I guess you can't merge or pull on bare repository. Is there another way to have backup repository up to date, rather than this:</p>

<pre><code>ssh git@backup.com
rm repo1 -fr
git clone -- bare git@primary.com:repo1
</code></pre>

<p>of course when primary wasn't accessible for a while and I used backup then I would want to update primary.</p>

<p>Also adding 2 remotes to the working repository is a solution, but you have to constantly push to the both of them, which can't happen if one is inaccessible.</p>

<p>All conflicts are resolved in the non-bare repositories</p>

<p><strong>edit</strong> why do I need backup repository:</p>

<p>we use remote repository to exchange code and it's needed daily. usually people don't need code written by other developers, but that's not always the case. we lost contact with primary for 3 days and it was not easy to develop. I made second repository on another server and I cloned local, but I had to do that for a lot of projects and it's time consuming. I prefer to have the second repository automatically updated.</p>
","1","676439","",""
"60895035","257924","2020-03-27 22:39:18","0","232","<git><git-fetch><git-bundle>","Why can't git fetch from a git-bundle in the current working directory","<p>Try this: Create a git-bundle like this:</p>

<pre><code>git bundle create trash1.bundle some_branch^^..some_branch
</code></pre>

<p>Then try to fetch right back into the same git repo, but into a separate branch like this:</p>

<pre><code>git fetch ./trash1.bundle some_branch:some_branch.1
</code></pre>

<p>See it fail like this:</p>

<pre><code>fatal: './trash.bundle' does not appear to be a git repository
</code></pre>

<p>But move it into /tmp/trash1.bundle, and run it like this:</p>

<pre><code>git fetch /tmp/trash1.bundle some_branch:some_branch.1
</code></pre>

<p>And it proceeds without issue, creating the <code>some_branch.1</code> branch (which just so happens to point to the same commit as <code>some_branch</code>, as expected, since it is the same repo.</p>

<p>So why would git-fetch disallow specifyinf a bundle using standard file syntax of ""./"" in front? Why does the bundle file have to be fully-qualified?</p>
","2","257924","",""
"5559321","212675","2011-04-05 22:27:05","10","11252","<git><git-fetch><git-bare>","""fetch --all"" in a git bare repository doesn't synchronize local branches to the remote ones","<p>I'm trying to synchronize periodically a git bare repository, my local branches are created using the ""--track"" option. here is my config (without unnecessary things):</p>

<pre><code>[core]
        bare = true
[remote ""origin""]
        url = git@github.com:Ummon/D-LAN.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
        remote = origin
        merge = refs/heads/master
[branch ""website""]
        remote = origin
        merge = refs/heads/website
</code></pre>

<p>I must use the 'cp' command to update the local branches:</p>

<pre><code> git fetch --all
 cp -r refs/remotes/origin/* refs/heads
</code></pre>

<p>Is there a more elegant solution?</p>
","0","212675","0","0"
"61211167","7887218","2020-04-14 15:16:16","0","3378","<git><git-merge><git-pull><git-fetch>","git fetch + git merge origin/master vs git pull origin/master","<p>I thought git pull was like a git fetch + git merge. Being in branchA, I always do a git fetch and then a git merge origin/master. But today, being in a branchA, I tried git pull origin/master and it didn't work but doing a git pull origin master worked. Any thoughts?</p>

<p>Extra question, if an updated origin/master and the online version of master are the same, why bother to have origin/master, wouldn't it be more convenient to always work with the online version that is always updated, releasing us from the burden to alway be git fetching?</p>
","3","7887218","",""
"42783463","","2017-03-14 10:28:17","0","142","<windows><text><cmd><git-fetch>","Get the git fetch output string in text file","<p>I am trying to get the output string of the <code>Git fetch</code> command in a text file. The data Which I need is the size of the gitlab project. </p>

<p><a href=""https://i.stack.imgur.com/iZwCS.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iZwCS.jpg"" alt=""enter image description here""></a></p>

<pre><code>  git init &amp; git remote add origin https://gitlab.company.com/project.git &amp; git fetch -v&gt;test.txt 2&gt;&amp;1
</code></pre>

<p>After I run the above code there is some data in the <code>test.txt</code> file which contain <code>POST git-upload-pack (675 bytes)</code>. But I don`t need that data. I need the the full size of the project which I shown in the image. The data which I need is exist in the below command.</p>

<pre><code>git init &amp; git remote add origin https://gitlab.company.com/project.git &amp; git fetch -v &gt;test.txt
</code></pre>

<p>My problem is, If I run the above command means I got nothing in the <code>test.txt</code> file. But the data which I need is displaying in the <code>cmd</code> window. How would I get the data in text file?</p>
","13","","",""
"6150188","370290","2011-05-27 09:16:42","171","165633","<git><mirror><git-clone><git-remote><git-fetch>","How to update a git clone --mirror?","<p>I have created a git repository to mirror a live site (which is a non-bare git repository):</p>

<pre><code>git clone --mirror ssh://user@example.com/path/to/repo
</code></pre>

<p>Now, to keep this mirror clone updated with all changes from its remote origin, which command or commands I must use?</p>

<p>I'd like to keep everything updated: commits, refs, hooks, branches, etc.</p>

<p>Thanks!</p>
","0","370290","0","0"
"61851581","9831899","2020-05-17 12:11:28","0","222","<git><github><git-branch><collaboration><git-fetch>","Need a local branch for others code fetch in git","<p>My colleague and I are working on a same project, my friend create repository on his remote server like GitHub, then I forked his repository and I have cloned it into machine local machine. The thing i want to do I need to create a local branch ""devlp_b"" for getting his code, means I want to fetch code from his remote repo to my local branch ""devlp_b"", after that I work on that branch and merge back to my local master branch.</p>

<p><strong>Briefly</strong></p>

<p>Need a local branch <code>devlp_b</code> for manually fetch others repo code, ( I don't want that branch into my remote repository, that only reside in my local machine.</p>
","0","9831899","",""
"62060073","13466110","2020-05-28 08:18:06","-2","302","<git><git-fetch>","why i can't see the new remote branch on my localhost after git fetch --all?","<p><strong>Hello everyone.</strong>
yesterday, my boss created a new remote branch that i should have after, but when i use <code>git fetch --all</code>, on my local host, i just have the ancient branches that i had before, and i can't switch to the new created branch because i can't see it in my local host.</p>

<p>This is a picture to show you what i tried to do:</p>

<p><a href=""https://i.stack.imgur.com/1or9V.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1or9V.jpg"" alt=""enter image description here""></a></p>

<p>so my question is so clear, how can i see the remote branch in my local host ?
<em>Thanks.</em></p>
","1","13466110","",""
"24813816","2564682","2014-07-17 21:26:08","45","105110","<git><jenkins><ssh><bitbucket><git-fetch>","Why is Jenkins failing when fetching from git, while the command line isn't?","<p>All of my Jenkins builds are failing at the <code>git fetch</code> line. </p>

<p>It's failing at <code>git fetch --tags --progress git@bitbucket.org:ethenwilson/whentoact.git</code></p>

<pre><code>Started by user anonymous
Building in workspace /Users/ethen/.jenkins/workspace/Build NikNik
 &gt; git rev-parse --is-inside-work-tree
Fetching changes from the remote Git repository
 &gt; git config remote.origin.url git@bitbucket.org:ethenwilson/whentoact.git
Fetching upstream changes from git@bitbucket.org:ethenwilson/whentoact.git
 &gt; git --version
using GIT_SSH to set credentials NikNik BitBucket SSH Key
 &gt; git fetch --tags --progress git@bitbucket.org:ethenwilson/whentoact.git +refs/heads/*:refs/remotes/origin/*
FATAL: Failed to fetch from git@bitbucket.org:ethenwilson/whentoact.git
hudson.plugins.git.GitException: Failed to fetch from git@bitbucket.org:ethenwilson/whentoact.git
    at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:622)
    at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:854)
    at hudson.plugins.git.GitSCM.checkout(GitSCM.java:879)
    at hudson.model.AbstractProject.checkout(AbstractProject.java:1252)
    at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:624)
    at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:86)
    at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:530)
    at hudson.model.Run.execute(Run.java:1732)
    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)
    at hudson.model.ResourceController.execute(ResourceController.java:88)
    at hudson.model.Executor.run(Executor.java:234)
Caused by: hudson.plugins.git.GitException: Command ""git fetch --tags --progress git@bitbucket.org:ethenwilson/whentoact.git +refs/heads/*:refs/remotes/origin/*"" returned status code 128:
stdout: 
stderr: remote: Counting objects: 2682, done.[K
remote: Compressing objects:   0% (1/1399)   [K
remote: Compressing objects:   1% (14/1399)   [K
...
remote: Compressing objects:  99% (1398/1399)   [K
remote: Compressing objects: 100% (1399/1399)   [K
remote: Compressing objects: 100% (1399/1399), done.[K
Receiving objects:   0% (1/2682)   
Receiving objects:   1% (27/2682)   
...  
Receiving objects:  78% (2092/2682), 4.07 MiB | 1.59 MiB/s   
Corrupted MAC on input.
Disconnecting: Packet corrupt
fatal: The remote end hung up unexpectedly
fatal: early EOF
fatal: index-pack failed

    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:1325)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandWithCredentials(CliGitAPIImpl.java:1186)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access$200(CliGitAPIImpl.java:87)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$1.execute(CliGitAPIImpl.java:257)
    at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:620)
    ... 10 more
</code></pre>

<p>When I run <code>git fetch --tags --progress git@bitbucket.org:ethenwilson/whentoact.git</code> from the command line, it works fine, which means my SSH keys must be working.</p>

<p>I'm connecting to BitBucket with Jenkins with SSH verification. Jenkins gets the key from the file it's located (the default one), so I know that Jenkins is using the same key as I am when I run from the command line.</p>

<p>I'm using the latest build of the BitBucket and Git plugins for Jenkins. My installed Git on my Mac is version <code>1.8.5.2 (Apple Git-48)</code>.</p>

<p>My jenkins start command is <code>nohup java -jar ~/jenkins.war --httpPort=8081 --ajp13Port=8010 &gt; /tmp/jenkins.log 2&gt;&amp;1 &amp;</code>.</p>

<p>What's going wrong?</p>

<p><strong>EDIT: I was wrong, I had accidentally hit an option to have the SSH Key be in the wrong place when I did that. Now, using @borrrden's suggestion, it still gives the same error. <s>**EDIT:</strong> As @borrrden suggested, I changed my start command to <code>nohup java -Dorg.jenkinsci.plugins.gitclient.Git.useCLI=true -jar ~/Downloads/jenkins.war --httpPort=8081 --ajp13Port=8010 &gt; /tmp/jenkins.log 2&gt;&amp;1 &amp;</code>, and now I get a different crash:</s></p>

<pre><code>Started by user anonymous
Building in workspace /Users/ethen/.jenkins/workspace/Build NikNik
 &gt; git rev-parse --is-inside-work-tree
Fetching changes from the remote Git repository
 &gt; git config remote.origin.url git@bitbucket.org:ethenwilson/whentoact.git
Fetching upstream changes from git@bitbucket.org:ethenwilson/whentoact.git
 &gt; git --version
using GIT_SSH to set credentials NikNik BitBucket SSH Key
 &gt; git fetch --tags --progress git@bitbucket.org:ethenwilson/whentoact.git +refs/heads/*:refs/remotes/origin/*
FATAL: Failed to fetch from git@bitbucket.org:ethenwilson/whentoact.git
hudson.plugins.git.GitException: Failed to fetch from git@bitbucket.org:ethenwilson/whentoact.git
    at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:622)
    at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:854)
    at hudson.plugins.git.GitSCM.checkout(GitSCM.java:879)
    at hudson.model.AbstractProject.checkout(AbstractProject.java:1252)
    at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:624)
    at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:86)
    at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:530)
    at hudson.model.Run.execute(Run.java:1732)
    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)
    at hudson.model.ResourceController.execute(ResourceController.java:88)
    at hudson.model.Executor.run(Executor.java:234)
Caused by: hudson.plugins.git.GitException: Command ""git fetch --tags --progress git@bitbucket.org:ethenwilson/whentoact.git +refs/heads/*:refs/remotes/origin/*"" returned status code 128:
stdout: 
stderr: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:1406)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandWithCredentials(CliGitAPIImpl.java:1194)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access$200(CliGitAPIImpl.java:87)
    at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$1.execute(CliGitAPIImpl.java:265)
    at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:620)
    ... 10 more
</code></pre>
","1","2564682","0","0"
"62136405","1169587","2020-06-01 16:18:44","0","317","<git><git-merge><egit><git-fetch>","Egit fetch from origin vs fetch from upstream","<p>1) what is fetch from origin and fetch from upstream in EGIT? </p>

<p>In some workspace, I just see fetch from origin, in other workspace, I just see fetch from upstream.</p>

<p><a href=""https://i.stack.imgur.com/rVkOO.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rVkOO.jpg"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/VV3Ex.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VV3Ex.jpg"" alt=""enter image description here""></a></p>

<p>2) I am working on a branch (e.g. branchA) in my local workspace, then I want to merge the change from remote master branch, what should I do? </p>
","2","1169587","",""
"62160707","351501","2020-06-02 20:17:42","1","68","<git><git-branch><git-fetch>","How do I access a git branch with a ':' in the name?","<p>In recent months I have two PRs come at me with the branch names being 'foo:bar'. Whenever I do a <code>git fetch --all</code>, that branch is nowhere to be found. How can I get this branch to be on my local machine?</p>
","1","351501","",""
"52111349","3667830","2018-08-31 08:23:23","1","188","<git><git-fetch>","git fetch corrupts FETCH_HEAD","<p>I have several git repositories, and when I do <code>git fetch</code> in any of them, file <code>.git/FETCH_HEAD</code> seems to be updated in this way: its content is taken, converted to NUL ascii characters and then new data from fetch appended. After that, <code>git merge FETCH_HEAD</code> failed.</p>

<p><a href=""https://i.stack.imgur.com/EccHY.png"" rel=""nofollow noreferrer"">Corrupted FETCH_HEAD</a></p>

<p>The first time after cloning a new repository <code>git fetch</code> works ok, maybe because there is no <code>FETCH_HEAD</code>.</p>

<p>The same issue applies to any repository I tried, GitHub too.</p>

<p>My colleagues don't have the issue with the same repositories, I don't have it on my another computer.</p>

<p>I might break some git config file before the issue started to appear, but I completedly remove everything related to git I could find (<code>system</code>, <code>global</code> settings, <code>%home%/gitconfig</code>, etc).</p>

<p>I tried: clone repos again, in different folders; remove git and install latest version 2.18; use portable git 2.17.</p>

<p>I didn't try: reinstall windows.</p>

<blockquote>
  <p>Win10 x64, git 2.17, 2.18. </p>
</blockquote>
","4","3667830","",""
"7427413","786284","2011-09-15 07:43:00","1","253","<git><repository><fetch><git-fetch>","git - how to mirror file from other repo","<p>I've a problem which probably can't be solved, but I'll ask anyway.
I do have one git repository, and I need one file to be mirrored from another one.
There is one .xsd file in the repo I need to have in my repository.</p>

<p>That's not the biggest problem. I want to update that file (on git fetch for instance), to the version of the last tag on the repository containing .xsd file.</p>

<p>Any help is really appreciated</p>
","0","786284","",""
"7493274","955866","2011-09-21 00:17:29","17","2856","<ruby-on-rails><git><github><merge><git-fetch>","Git push fails to github: failed to read object","<p>The story:</p>

<p>I've been developing a RoR-app in both my desktop and laptop. It was quite handy to commit changes made on another, push them to github and fetch &amp; merge on other.</p>

<p>The starting point is this: I committed latest changes on my desktop, pushed them to github and then fetched and merged them into my laptop. Then, I made some commits on laptop and pushed to github. Took the changes, merged to my desktop (with --no-ff). THEN, happened the probable source of all mischiefs: I reverted the desktop to commit where it was before the latest fetch &amp; merge. Made some development work with it, committed, pushed to github. In the laptop, I did the revert as well, though I reverted it to a commit which was made somewhere between the latest fetch from github, fetched again and merged those. Some error messages came after reverting desktop and laptop both, but things worked still fairly well and I kept working on both machines.</p>

<p>Until now. I tried to push from my laptop to github, which gives the following output:        </p>

<pre><code> Counting objects: 106, done.
 error: unable to find 5a2a4ac...
 error: unable to find bc36923...
 error: unable to find ecb0d86... 
 error: unable to find f76d194...
 error: unable to find f899df7...
 Compressing objects: 100% (64/64), done.
 fatal: failed to read object 5a2a4ac... : Invalid argument
 error: failed to push some refs to 'git@github:username/repo.git'
</code></pre>

<p>So, the question is, what exactly took place here?</p>

<p>EDIT: It seems that because of suspending my laptop and moving it from place to place in that state screwed up the hard drive somehow. The fsck output is unavailable because we worked around the problem and kept on working, but IIRC some branches and commits were dangling, including that commit which git failed to read. - Teemu</p>
","3","955866","0","0"
"44473483","7955302","2017-06-10 12:49:38","20","20815","<git><git-fetch>","What does git fetch exactly do?","<p>Edit: I have checked this <a href=""https://stackoverflow.com/questions/9237348/what-does-fetch-head-in-git-mean"">What does FETCH_HEAD in Git mean?</a>    before asking the question.<br>
Sorry for the original inaccurate question. </p>

<p>My question is how does fetch really work?  Does fetch drop all current log?</p>

<p>This is my situation: my teammates and I are using the same repository which only has one branch. So we have to do fetch before push anything up.<br>
We typically do it this way:</p>

<pre><code>git status
git add .
git commit -m message1
git fetch origin
git reset head
git status
git add .
git commit -m message
git push
</code></pre>

<p>But after reset, it seems that my previous commit (with <code>message1</code>) is gone.</p>

<p>Is this normal or is there anything wrong?<br>
How can I access my local history?<br>
They are synced but my local history is gone.</p>

<p>Old staff ,forget it: I have been learning  Git CLI recently.<br>
Someone told me to type ""<code>git fetch head</code>"" to keep track of remote branch.<br>
But I wonder what does this do ? Does this command override my local log?<br>
And what is the difference between ""<code>git fetch</code>"" and ""<code>git fetch head</code>"" ?</p>
","3","7955302","0","0"
"7793038","145989","2011-10-17 11:23:56","5","193","<git><git-fetch>","Git: What do the numbers reported by `git fetch` mean?","<p>When running git fetch, that gives some numbers:</p>

<pre><code>$ git fetch upstream
remote: Counting objects: 77, done.
remote: Compressing objects: 100% (23/23), done.
remote: Total 47 (delta 19), reused 39 (delta 11)
Unpacking objects: 100% (47/47), done.
From http://github.com/jbossas/jboss-as
ef19bd4..b5015c1  master     -&gt; upstream/master
</code></pre>

<p>Are they useful in any way? I'd like to know e.g. how many commits was fetched happened in that remote. Which seems not to be contained in these data (in this case, it was 5 commits).<br>
(I know I can see log or whatever to see that; just wonder  what's that for.)</p>
","0","145989","",""
"62763692","13879169","2020-07-06 20:06:27","1","977","<git><github><git-bash><git-push><git-fetch>","Cannot push or fetch from remote repository in git","<p>I was able to initialize my remote repository on GitHub. See message:</p>
<pre><code>git remote show origin
* remote origin
  Fetch URL: https://github.com/sonicspark/Web-Developer-Course
  Push  URL: https://github.com/sonicspark/Web-Developer-Course
 HEAD branch: master
  Remote branches:
    Staging tracked
    master  tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (local out of date)
</code></pre>
<p>For some reason I cannot push or fetch data from my remote repository using these commands:</p>
<p><code>git fetch Web-Developer-Course</code></p>
<p><code>git push Web-Developer-Course master</code></p>
<p>I get the following error message from both of the commmands:</p>
<pre><code>fatal: 'Web-Developer-Course' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>
<p>I already successfully published my public key to my GitHub account. Any help finding out why I cannot push or fetch to my remote repository would be helpful.</p>
","5","13879169","",""
"26116414","2607581","2014-09-30 08:42:47","1","1427","<git><logging><error-handling><git-fetch>","Redirect only error of git command to a log file","<p>I am writing a script that uses <code>git fetch --all &amp;&amp; git fetch --all --tags</code> to fetch all the branches and tags of all the remotes.</p>

<p>What I want to do is, ignore/don't display fetching output, but if the fetch fails, then do something (like writing error message to a log file and mail it). How can i ignore normal output but write only error to log file if the command fails?</p>

<p>OS: CentOS 6.5</p>

<p>git: 2.1.0-rc1</p>

<p>Thank You!</p>

<blockquote>
  <p>Update-1</p>
</blockquote>

<p><code>git-fetch</code> writes to stderr even on successful fetching. So if I do</p>

<p><code>git fetch a.j 1&gt;success 2&gt;errlog</code>, then even on successful fetching I get this in error file:</p>

<p>From xx.xx.xx.xx:user.name/repo</p>

<ul>
<li><p>[new branch]      for/lib.base/core -> a.j/for/lib.base/core</p></li>
<li><p>[new branch]      for/master/lib.base_core -> a.j/for/master/lib.base_core</p></li>
<li><p>[new branch]      for/master/memmgr -> a.j/for/master/memmgr</p></li>
</ul>
","0","2607581","",""
"26373995","4049331","2014-10-15 03:26:15","8","307","<git><git-fetch>","How to control the order of fetching when fetching all remotes by git fetch --all","<p>I have a lot of remotes added in my git. Each remote is a link to a network share folder of different regions, and each remote contains the code submitted by one developer.</p>

<p>Everyday I need to fetch the latest code they submitted by <em>git fetch --all</em>.</p>

<p>Because of the geographical location, the speed of the network share folders are different. Some of them are very very slow. I want to fetch the data from the fastest share folder first so that I can start examining code while waiting for the fetching of other remotes.</p>

<p>The order of fetch by <em>git fetch --all</em> is not the same as the one shown by <em>git remote -v</em>. How is the order of fetching determined and is there a way to control the order?</p>
","2","4049331","0","0"
"26376832","4120409","2014-10-15 07:28:00","308","700017","<git><git-pull><merge-conflict-resolution><git-fetch>","Why does git say ""Pull is not possible because you have unmerged files""?","<p>When I try to pull in my project directory in the terminal, I see the following error:</p>

<pre><code>harsukh@harsukh-desktop:~/Sites/branch1$ git pull origin master
U app/config/app.php
U app/config/database.php
U app/routes.php
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'
as appropriate to mark resolution, or use 'git commit -a'.
</code></pre>

<p>Why does git say <code>""Pull is not possible because you have unmerged files""</code>, and how can I resolve it?</p>
","3","4120409","0","0"
"8689054","229642","2011-12-31 15:58:23","38","52575","<git><github><git-pull><git-fetch>","git pull origin master does not update origin/master?","<p>According to the documentation, <strong>git pull</strong> performs a <strong>git fetch</strong> then a git merge, however in that case performing <strong>git pull origin master</strong> should perform a <strong>git fetch origin master</strong> right?  However,  it does not appear to be doing so.  Here is an example.</p>

<p>Supposed my remote origin master (on GitHub in my case) has the following history:</p>

<pre><code>commit 1111111 : my first commit
commit 2222222 : a commit from someone else
</code></pre>

<p>and I only have my first commit locally as doing following shows</p>

<pre><code>git checkout master
git log --pretty=format:'%h' -n 1
1111111

git checkout origin/master
git log --pretty=format:'%h' -n 1
1111111
</code></pre>

<p>From here I do my pull and look at the results as follows:</p>

<pre><code>git checkout master
git pull origin master

git log --pretty=format:'%h' -n 1
2222222

git checkout origin/master
git log --pretty=format:'%h' -n 1
1111111
</code></pre>

<p>As can be seen, the pull did in fact update my master branch with the new commit(s) from the remote origin, but my local origin/master is still where it was.  Forcing me to do the following</p>

<pre><code>git fetch origin master

git checkout origin/master
git log --pretty=format:'%h' -n 1
2222222
</code></pre>

<p>Is this correct behavior for git pull or might I have something miss configured?  I looked through the git pull man page and didn't see anything that suggested this but I may have missed it.</p>
","4","229642","0","0"
"26905446","3342739","2014-11-13 09:32:11","9","5898","<git><git-fetch>","Fetch specific commit from remote git repo","<p>So, what I'm basically trying to do is to pull down a given commit (identified by its SHA) from one remote repo, and then push it to another remote repo as a new branch (whose name I autogenerate). The source repo will vary and these are all one-shot operations, so I don't want to <code>git remote add</code> these remotes and I don't want to create refs/branches for the commits. And I don't want to change the HEADs of any of my local branches.</p>

<p>So, <strong>how do I just grab the given remote commit (and any of its parent commits that are new to me) and add it/them to my local git database?</strong></p>

<p><code>git pull</code> implicitly involves a merge or rebase, so that's out of the question.</p>

<p>I tried <code>git fetch https://github.com/foo/bar.git 7d0969daba1fdf9d5bb9bc9a2847fd1bc1c7e426</code><br>
but that just leads to<br>
<code>error: no such remote ref 12819ad8e10e5906df5352d7d8fec1fceb1f3afc</code><br>
(and yes, I verified that that commit SHA exists on that remote; looks like git doesn't accept a SHA here anyway).</p>

<p>I mean, I guess I could come up with a single arbitrary local branch name to always pull the commits down into, and then delete that branch after every push, but that's seems inelegant...</p>
","5","3342739","",""
"27442134","3091524","2014-12-12 10:57:12","14","22849","<git><post><freeze><git-fetch><bonobo>","Git fetch hangs on git-upload-pack","<p>Seemingly at random, our local repos can no longer fetch from our Bonobo server. It happens with our biggest remote repo (about 4GB) to different people and at different times, when we try to fetch locally. At first it was just every few months, but now it's increasing in frequency and happened to a lot of local repos at the same time today. For now we are solving it by moving a working <code>.git</code> folder around.  </p>

<p>It rapidly prints some <code>POST git-upload-pack (gzip X to Y bytes)</code>, then hangs for half an hour to an hour.  </p>

<p>If I delete a pack file from the objects dir, it complains about missing things then starts fetching correctly, but only for that <code>git-upload-pack</code>.  </p>

<p>I've tried <code>repack</code> and <code>gc</code> in various ways to no effect. I tried upgrading git on both server and client from 1.8.4 to 1.9.</p>

<p><code>clone</code>ing had the same problem, but upgrading Bonobo solved that, even though it was the same version of git. A freshly cloned repo yesterday was working but today it has the same problem. </p>

<p>Of interest may be that we have a lot of dll's and pdb's in it. It's been in use for a year now and was imported from an SVN repo with git-svn.</p>

<p>This is the trace</p>

<pre><code>$ GIT_TRACE=1 git fetch -v
trace: built-in: git 'fetch' '-v'
trace: run_command: 'git-remote-https' 'origin' 'https://xxx
/yyy.git'
trace: run_command: '""C:/Program Files (x86)/GitExtensions/GitCredentialWinStore
/git-credential-winstore.exe"" get'
trace: run_command: '""C:/Program Files (x86)/GitExtensions/GitCredentialWinStore
/git-credential-winstore.exe"" store'
trace: run_command: 'rev-list' '--objects' '--stdin' '--not' '--all' '--quiet'
trace: run_command: 'fetch-pack' '--stateless-rpc' '--stdin' '--lock-pack' '--in
clude-tag' '--thin' 'https://xxx/yyy.git/'
trace: built-in: git 'fetch-pack' '--stateless-rpc' '--stdin' '--lock-pack' '--i
nclude-tag' '--thin' 'https://xxx/yyy.git/'
POST git-upload-pack (gzip 2057 to 1096 bytes)
POST git-upload-pack (gzip 2307 to 1222 bytes)
POST git-upload-pack (gzip 3657 to 1914 bytes)
POST git-upload-pack (gzip 6207 to 3192 bytes)
POST git-upload-pack (gzip 12607 to 6374 bytes)
</code></pre>

<p>Googling shows some people had this problem but nothing mentioned (upgrade bonobo, etc) worked.</p>
","1","3091524","0","0"
"45304116","1662268","2017-07-25 12:58:54","0","367","<git><git-pull><git-fetch>","git pull without updating remote","<p>Suppose I have already run <code>git fetch</code>, and now I want to run <code>git pull</code>, to bring my local <code>myBranch</code> up-to-date with my <code>origin\myBranch</code>.</p>

<p>BUT!! in the mean time, after running the <code>fetch</code>, my internet connection has dropped :( Now, when I run <code>git pull</code> it fails, because it can't see <code>remote</code>. But I'd like to still do the local portion of the pull.</p>

<p>Is there a way to tell <code>git pull</code> to run without doing the initial <code>git fetch</code>?</p>

<p>NOTE:
I could <code>git reset --hard</code> to update <code>myBranch</code>. But <code>git pull</code> doesn't always just do that.</p>

<p>I guess another way to phrase the question is ""What second command satisfies: <code>git pull</code> = <code>git fetch</code> + <code>git ???</code>""?</p>
","0","1662268","",""
"45307918","4467704","2017-07-25 15:39:42","2","40","<git><git-rebase><pull><git-fetch><git-status>","Aside from the resulting git tree structure, are there any important differences between git pull vs git fetch + git rebase?","<p>I've worked on a dev team that preferred to use the method of <code>git fetch</code> and then <code>git rebase</code> rather than the method of <code>git pull</code>, before git pushing any changes to avoid merge conflicts. </p>

<p>Is there a specific reason besides the difference in the visual tree structure? According to <a href=""http://mattsnider.com/git-rebase-versus-git-pull/"" rel=""nofollow noreferrer"">http://mattsnider.com/git-rebase-versus-git-pull/</a> <code>fetch</code> &amp; <code>rebase</code> </p>

<blockquote>
  <p>""will produce a cleaner history, without extraneous merge commits"" </p>
</blockquote>

<p>but between the two methods are there any other reasons to choose one over the other?</p>
","2","4467704","",""
"45306529","4292958","2017-07-25 14:39:48","0","814","<python><python-3.x><git><subprocess><git-fetch>","Getting git fetch output to file through python","<p>I am trying to save <em>git fetch</em> output to file through python, using:</p>

<pre><code>subprocess.check_output([""git"", ""fetch"", ""origin"", ""&gt;&gt;"", ""C:/bitbucket_backup/backup.log"", ""2&gt;&amp;1""], cwd='C:/bitbucket_backup/loopx')
</code></pre>

<p>but I believe there is something missing in <em>subprocess.check_output</em> args because when adding <em>>> C:/bitbucket_backup/backup.log 2>&amp;1</em> I receive this error:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;pyshell#28&gt;"", line 1, in &lt;module&gt;
     subprocess.check_output([""git"", ""fetch"", ""origin"", ""&gt;&gt;"", ""C://bitbucket_backup//backup.log"", ""2&gt;&amp;1""], cwd='C://bitbucket_backup//loopx')
  File ""C:\Users\fabio\AppData\Local\Programs\Python\Python36-32\lib\subprocess.py"", line 336, in check_output
     **kwargs).stdout
  File ""C:\Users\fabio\AppData\Local\Programs\Python\Python36-32\lib\subprocess.py"", line 418, in run
     output=stdout, stderr=stderr)
subprocess.CalledProcessError: Command '['git', 'fetch', 'origin', '&gt;&gt;', 'C://bitbucket_backup//backup.log', '2&gt;&amp;1']' returned non-zero exit status 128.
</code></pre>
","4","4292958","",""
"9841433","632472","2012-03-23 14:57:46","37","90321","<git><git-fetch>","git fetch doesn't update my local repository","<p>What I want:</p>
<p><strong>Update all new commits from server with my local repository in all branch but do not merge any branch (just join the history lines).</strong></p>
<p>I am trying this command</p>
<pre><code>git fetch --force --progress --verbose  name@host:/path/to/repository.git 
</code></pre>
<p>I thought it will work fine, because it show:</p>
<pre><code>From host:/path/to/repository
  * branch            HEAD       -&gt; FETCH_HEAD
</code></pre>
<p>But, what does this output mean? If I see the log, it wasn't updated. If I do a clone from server, all new commits are there. So... The command does not work. Then I try with a branch that exist in server but not in my local repository</p>
<pre><code>git fetch --force --progress --verbose  name@host:/path/to/repository.git my_branch
</code></pre>
<p>The result is:</p>
<pre><code>From host:/path/to/repository
  * branch            my_branch       -&gt; FETCH_HEAD
</code></pre>
<p>And any success... Even if I not know all branches and my branch was update, I want to fetch this changes and can see in my log.</p>
<p>Any idea to do it work?</p>
","4","632472","0","0"
"53587085","2289953","2018-12-03 03:29:46","1","78","<git><laravel><bitbucket><git-pull><git-fetch>","Git: git pull - start from specific commit until the latest commits skipping 1 commit?","<p>How can I pull from a branch to start fetching on a specific commit?</p>

<p>Suppose, I have these branches:
<code>branch1</code> and <code>oldbranch1</code></p>

<p><code>branch1</code> is the rollback version of <code>oldbranch1</code></p>

<p>And suppose, <code>oldbranch1</code> have these commits:</p>

<ul>
<li>commit_5</li>
<li>commit_4</li>
<li>commit_3 (merge <code>somebranch</code> to <code>oldbranch1</code>)</li>
<li>commit_2</li>
<li>commit_1</li>
</ul>

<p>And on <code>branch1</code>:</p>

<ul>
<li>commit_2</li>
<li>commit_1</li>
</ul>

<p>Now I want to get the updates from <code>oldbranch1</code> skipping the <code>commit_3</code> from <code>oldbranch1</code> as it contains wrong merges that deletes the changes from <code>commit_2</code> and <code>commit_1</code></p>

<p>How can I do it? is there any magic commands for this? </p>
","0","2289953","0","0"
"37664226","571778","2016-06-06 18:17:15","93","68601","<git><git-fetch>","git fetch origin --prune doesn't delete local branches?","<p>At one point I thought that <code>git fetch origin --prune</code> deleted local branches that were no longer present on the server. Somehow this is not my experience at the moment.</p>

<p>I ran this command, and the local branch was not deleted. It is <em>not</em> currently checked out. I ran <code>git branch -vv</code> to check this info, and I see</p>

<pre><code>feature/MyGreatFeature           f30efc7 [origin/feature/MyGreatFeature: gone]
</code></pre>

<p>So it seems to know that it is gone. Why would it not delete my local branch?</p>

<p>Running <code>git version 2.7.4 (Apple Git-66)</code></p>
","3","571778","0","0"
"9239557","94486","2012-02-11 10:42:23","1","7596","<git><git-pull><git-fetch>","How can git-fetch only download changes without adding/updating files?","<ul>
<li>Project.git is a remote git repo that has a staging branch</li>
<li>Two developers are working on their own forks of project.git</li>
<li>Both developers only interact with staging</li>
</ul>

<h3>Common to both developers</h3>

<pre><code># Developer 1 &amp; developer 2 add staging as follows
$ git clone myForkOfProject.git
$ git remote add live project.git
</code></pre>

<h3>Developer 2 working on docs</h3>

<pre><code>[master] $ git branch docs
[master] $ git checkout docs
[docs] $ git add README 
[docs] $ git commit -m ""pushing to live's staging from local's docs works"" README
[docs] $ git push live docs:staging
</code></pre>

<h3>Developer 1 working on bugfix, wants to selectively merge docs</h3>

<p>Developer 1 wants to see selectively merge files from docs into his local <code>mybranch</code></p>

<pre><code>[master] git branch mybranch
[master] git checkout mybranch
[mybranch] $  git fetch live staging

# Checks to see if anything changed
[mybranch] $  git status -s ./
[mybranch] $

# Doesn't know what to merge since diff, status shows no change 

# Where as if developer1 did
[mybranch] $  git pull live staging
[mybranch] $  git status -s ./
A  README
</code></pre>

<h3>What developer1 actually wanted</h3>

<p>What developer1 wanted to do is only to fetch the last changes in staging into the working directory without automatically adding README.</p>

<p>How do I pull/fetch so that <code>git status -s ./</code> just downloads the changes</p>

<pre><code>[mybranch] git *fetch changes from staging into mybranch 's working directory*
[mybranch] git status -s ./
[?] README
# This is what developer1 wants to see
# so that he can decide to 'git add README' manually
# here are the unsuccessful attempts to do the same

# Developer2 makes a commit, and does git push live docs:staging 
[mybranch] $ git fetch live staging
[mybranch] $ git pull live staging --no-commit --no-log --no-ff
</code></pre>

<p>The last option I have is to selectively call <code>git rm --cached README</code>, but I wonder if I'm missing something in the <code>git fetch</code>, <code>git merge</code> flow.</p>
","0","94486","0","0"
"46208207","889053","2017-09-13 23:20:27","3","2871","<git><github><git-remote><git-fetch>","fetch git repo at specific commit without cloning","<p>I am trying to get a git repo at a specific commit hash <strong>without cloning</strong>! Every example wants to clone the whole repo. This makes sense but the repo I have in mind is huge and I need this to leave a small footprint as it is going with a docker image.</p>

<p>The commit hash is in the URL - either <code>wget</code> or <code>curl</code> could/should recursively fetch but I have a feeling github is blocking that as all I ever get is <code>robots.txt</code></p>

<p>The repo and commit: </p>

<blockquote>
  <p><a href=""https://github.com/phalcon/cphalcon/tree/1d6d21c98026b5de79ba5e75a3930ce7d1ebcd2e"" rel=""nofollow noreferrer"">https://github.com/phalcon/cphalcon/tree/1d6d21c98026b5de79ba5e75a3930ce7d1ebcd2e</a></p>
</blockquote>

<p>my best attempt error:</p>

<pre><code>git fetch https://github.com/phalcon/cphalcon/ 1d6d21c98026b5de79ba5e75a3930ce7d1ebcd2e
error: Server does not allow request for unadvertised object 1d6d21c98026b5de79ba5e75a3930ce7d1ebcd2e
</code></pre>

<p><strong>update</strong></p>

<p>Suggestions of answers that use clone aren't answering the question. I can clone/checkout no problem. Trying to do it without having the whole repo locally</p>
","4","889053","0","0"
"28187051","2400754","2015-01-28 07:44:26","0","364","<git><svn><git-fetch>","Is there any equivalent svn command for git fetch","<p>Anyway I have got some understanding about the differences between <code>git fetch</code>, <code>git pull</code> and <code>git merge</code>.</p>

<p>Now I want to know whether there exists an equivalent <strong>svn</strong> command for <code>git fetch</code> that copies the latest code from the remote repo and that doesn't merge the local branch.</p>
","1","2400754","",""
"10200307","231624","2012-04-17 22:46:25","22","7002","<git><merge><git-checkout><pull><git-fetch>","How to git fetch and checkout without creating a remote branch locally?","<p>Use Case: I have some repo on GitHub, someone forked it and added new feature and initiated pull request. 
I can't automatically merge it because there are some minor problems I would like to fix first. </p>

<p>It's one-time activity I'll never need this remote repository, so I don't want to create local <code>remote</code> branch.</p>

<p>Basically I would like to do:</p>

<ol>
<li>copy files from remote repository and rewrite my own (without any git-related information).</li>
<li>see difference with my current head.</li>
<li>fix something and commit it.</li>
</ol>

<p>How to do that?</p>

<p><code>git checkout git://github.com/xxx/xxx.git</code> doesn't works at all (fail with error)</p>

<p><code>git fetch git://github.com/xxx/xxx.git</code> works but doesn't update anything</p>
","0","231624","0","0"
"28250389","2674303","2015-01-31 10:03:30","3","2755","<git><version-control><git-pull><git-fetch>","Should I do git fetch before pull if branch exists locally?","<p>I have following question about git.</p>

<p>I novice with git. I want to get last state of <code>branch1</code> locally.</p>

<p>now I switched on <code>branch2</code> and <code>branch1</code> exists locally.</p>

<p>Now I make</p>

<ol>
<li>fetch  </li>
<li>switch to branch1  </li>
<li>pull</li>
</ol>

<p>Please clarify me whether does first <code>fetch</code> redundant or not?</p>
","0","2674303","",""
"72352502","6719286","2022-05-23 17:19:38","0","541","<git><git-pull><git-fetch>","Why does git require me to commit or stash local changes before doing a pull","<p>I made a change to a file in my local working copy and the same file has been modified in the remote repo. When I do a git pull, git gives the message, &quot;error: Your local changes to the following files would be overwritten by merge:
foo.txt
Please commit your changes or stash them before you merge.&quot;</p>
<p>I know how to solve this issue, but I am not completely clear why this happens. So, if I do a git pull (which is git fetch  followed by git merge), then git will first bring the remote file changes to my local (and hence I lose my local changes) and then do the merge, is this what happens?</p>
<p>Also, in the same scenario, instead of a git pull, I did a git fetch first. This caused no issue, but when I did a git merge, I got the same message from git about losing local changes. So, that means that git fetch does not bring the remote changes to local, only when I try to do the merge is when the local working copy is replaced by the remote changes?</p>
","4","6719286","",""
"54988424","859591","2019-03-04 17:22:48","1","146","<git><git-push><git-fetch>","How to reject a forced update by GIT on client side when doing a git fetch or git pull?","<p>It is possible to deny forced pushes on server-side by setting <a href=""http://%20https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_code_receive_denynonfastforwards_code"" rel=""nofollow noreferrer"">receive.denyNonFastForwards</a> or by <a href=""https://github.com/kyanny/git-hooks-detect-force-update"" rel=""nofollow noreferrer"">adding a git hook</a> (or in a different way for special GIT servers like Gerrit or Github). I would like to reject a forced update on client side (see also <a href=""https://stackoverflow.com/questions/10319110/how-to-detect-a-forced-update"">here</a>), when doing a <code>git fetch</code> or <code>git pull</code> or a <code>git pull --rebase</code>. If I don't have access to the GIT server to reject forced pushes (or if I don't trust the server because others have access too), I might want GIT to stop with an error before changing any refs when a forced push was done. This could help to notice attackers changing the remote or if I simple want to know if somebody changes my commits (yes, if I really want to avoid somebody else committing using my name, I need sign my commits using my key).</p>

<p>I seems not to be possible to run code after a <a href=""https://stackoverflow.com/questions/5623208/how-to-execute-a-command-right-after-a-fetch-or-pull-command-in-git"">fetch or pull</a> command using hooks. I parse the output of <code>git fetch</code> and raise an error if ""forced update"" has been printed. But it would actually be better to detect this before refs are changed.</p>

<p>Is there a better way to do this?</p>
","0","859591","",""
"72446448","1075247","2022-05-31 10:51:30","2","282","<git><git-fetch>","How can I make `git fetch --all` fail/show me failures prominently, if any of the remotes fail?","<p>My issue is that I have multiple remotes set up, but day to day I only push to one. Let's call this remote 'Frank'. The other one, I almost never pull from, lets call her 'Alex'.</p>
<p>The 'Alex' remote is reliable, 'Frank' is unreliable. He gives me:</p>
<blockquote>
<p><code>fatal: Could not read from remote repository</code></p>
</blockquote>
<p>When I run <code>git fetch --all -p</code>, if 'Frank' fails the error output gets crowded out and pushed off screen by the successful fetching of all the branches updated on 'Alex'. The issue comes, in that if I don't see that 'Frank' has failed again, I carry on gitting as though I'm up to date.</p>
<p>Can I make <code>git --all</code> fail if any of the remotes fail, with an extra option? The <a href=""https://git-scm.com/docs/git-fetch"" rel=""nofollow noreferrer"">Git Fetch Docs</a> give the <code>--atomic</code> option, but that says:</p>
<blockquote>
<p><code>--atomic</code><br />
Use an atomic transaction to update local refs. Either all refs are updated, or on error, no refs are updated.</p>
</blockquote>
<p>Now I'm not certain that would work (does a remote not being reachable tell git that a local ref failed?), but I'm being told that <code>atomic</code> is not an options, and it's not listed in the usage output. I don't and can't get my git updated currently (I'm on v2.20.1).</p>
<p>Is that possible, or maybe something that suppresses anything not from 'Frank' ?</p>
","6","1075247","",""
"10124223","81415","2012-04-12 13:08:04","14","57677","<git><git-pull><git-checkout><git-fetch>","Pulling just one directory out of a git repo","<p>I have a git repo that I want to do a pull from. I do a normal <code>git pull</code> with no problems. The issue is that I want just one certain directory out of the repo. My thinking was that I could use a <code>.gitignore</code> file with a rule like this:</p>

<pre><code>#Ignore all files
/
#Except the one I want
!/temp
</code></pre>

<p>The problem is this doesn't work. Is that the right way to do it or is there a better way?</p>
","3","81415","0","0"
"29287734","590475","2015-03-26 20:00:32","1","10617","<git><git-pull><git-fetch>","How to pull new files from git master?","<p>Hi I have been scouring all the forums and search engines for doing what I thought to be simple. I am trying to pull all the changes from my master git repo into a remote branch. It does that but does not pull in the new files created. How on earth can I make sure that new files are added to the branch with </p>

<pre><code>git pull
</code></pre>

<p>I tried:</p>

<pre><code>git checkout master newfile.html
</code></pre>

<p>and </p>

<pre><code>git checkout HEAD -- newfile.html
</code></pre>

<p>I thought that by default 'pull' would just update everything from the master new or not new, but it is obviously not the case. How do I do this?</p>
","2","590475","",""
"29327999","1229582","2015-03-29 10:25:26","1","1655","<git><git-merge><git-fetch>","git fetch - reviewing and modifying incoming changes","<p>I have read that <code>git pull</code> = <code>git fetch</code> + <code>git merge</code>, and that the latter is usually preferred because it allows one to review changes before merging them.</p>

<p>Our small development team is sharing a git repo on a server. My colleague just pushed and I fetched, so that his commits are now in my local repository. I can see them with: </p>

<pre><code>git log ..origin/mybranch
</code></pre>

<p>and inspect them with:</p>

<pre><code>git diff &lt;hash&gt;
</code></pre>

<p>Now let's imagine that I want to merge the changes into my working copy, but I don't like some commits or parts of one commit.<br>
My question is:</p>

<ul>
<li>how do I go about ""modifying"" a commit before merging it into my working copy?</li>
<li>in case I can do the above, will that affect the remote repository? (I have read that one should not rebase after a push, for example)</li>
<li>in case I cannot do the above, how do I fix the changes after merging them? (eg. manually, ...)</li>
</ul>

<p>In short: can someone give an overview of actions that are typically performed between a ""fetch"" and a ""merge"" to review and edit changes? </p>
","0","1229582","0","0"
"30103552","343204","2015-05-07 14:08:31","4","141","<git><git-branch><git-fetch>","git fetch --all - extra branches being created","<p>I've got my USB stick set up as a git repo (don't ask why) but I just did a <code>git fetch --all</code> and got these messages:</p>

<pre><code>   38ea2b1..2b4fdaf  master     -&gt; usb/master
 * [new branch]      usb/branch/A -&gt; usb/usb/branch/A
 * [new branch]      usb/branch/B -&gt; usb/usb/branch/B
 * [new branch]      usb/master -&gt; usb/usb/master
</code></pre>

<p>which looks worrying.</p>

<p>It appears there are additional branches being created that aren't necessary. Is this going to be the start of an infinite loop of <code>usb/usb/usb/usb</code> branches? </p>

<p>What should I do to squash this and avoid the problem?</p>

<p>==== UPDATE 1</p>

<p>In <code>.git/config</code> I have:</p>

<pre><code>[remote ""usb""]
        url = /path/to/usb/repo.git
        fetch = +refs/heads/*:refs/remotes/usb/*
</code></pre>

<p>which looks pretty standard. But then directly below it I've got this weird stuff:</p>

<pre><code>[branch ""branch/A""]
        remote = usb
        merge = refs/heads/branch/A
[branch ""usb/branch/B""]
        remote = .
        merge = refs/heads/branch/A
[branch ""usb/branch/C""]
        remote = .
        merge = refs/heads/branch/A
</code></pre>

<p>This continues. Around 20 entries in total.</p>

<p>What's going on here?</p>

<p>==== UPDATE 2</p>

<p>My USB project.git/config contains:</p>

<pre><code>[remote ""origin""]
    url = C:/xampp/htdocs/networkroot/.
</code></pre>

<p>Not sure if that's as it should be.</p>
","6","343204","0","0"
"12493230","873381","2012-09-19 10:49:31","1","292","<git><git-fetch>","How to revert wrong fetch from remote operation in git","<p>I have some git repo with alot of remotes, some of remote branches a unique and i have not local tracking branches for it.</p>

<p>Today I did mistake on changing a remote url (I used remote1 instead of remote2).</p>

<p>After <code>git fetch --all</code> my remote1 was rewritten (i see + before commit sha)</p>

<p>It's very bad, because remote1 now not accessible for me, and i cant modify url back and fetch. </p>

<p>Is it possible restore remote1 branches from my local repo after this wrong fetch?</p>
","0","873381","",""
"30146405","33080","2015-05-10 00:19:16","7","3521","<git><git-fetch>","What's the difference between ""git fetch <url>"" and ""git add remote upstream <url>"" followed by ""git fetch upstream""?","<p>I was trying to pull changes from upstream into my fork. I tried <code>git fetch https://github.com/someuser/someproject</code>, but it stubbornly refused to do anything. It just said something totally cryptic and did nothing, namely:</p>

<pre><code>From https://github.com/someuser/someproject
 * branch            HEAD       -&gt; FETCH_HEAD
</code></pre>

<p>But the moment I added the URL as a named remote, things changed:</p>

<pre><code>&gt; git remote add upstream https://github.com/someuser/someproject.git
&gt; git fetch upstream
remote: Counting objects: 340, done.
remote: Compressing objects: 100% (268/268), done.
remote: Total 340 (delta 145), reused 18 (delta 16), pack-reused 44
... etc ...
</code></pre>

<p>So what's the difference? Why did it do nothing when I specified a remote without adding it first? And what exactly was it telling me when I tried to fetch from the URL?</p>
","2","33080","",""
"48998733","6523738","2018-02-26 23:25:14","14","1505","<git><git-fetch>","What use does the --append option in git fetch command?","<p>While looking at the documentation for git fetch I noticed the --append option. The documentation says it does this: </p>

<blockquote>
  <p>Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten.</p>
</blockquote>

<p>What use does this have? From what I understand, FETCH_HEAD keeps track of the tips of the remotes branche that were just fetched so that merge or rebase gets called on them.</p>

<p>Why would appending to the list matter? Why does keeping old fetch heads matter?</p>
","2","6523738","0","0"
"72458833","18160701","2022-06-01 08:43:48","0","46","<git><clone><git-clone><git-fetch>","sharing a git repository to a machine that does not have internet access from one that has","<p>I have this setup</p>
<pre><code>machineA -&gt; remote server with a repo.git initialized with --bare

machineB -&gt; client that can access to internet and clone repo.git, so it locally will have repo

machineC -&gt; connected in LAN with machineB and no internet access
</code></pre>
<p>The goal is to make machineC work (in read-only mode) with the machineB repo as if it was the remote one. Because of this, machineB is periodically doing a git fetch from the remote server</p>
<p>I am sharing the local machineB repo via SMB and I am able to clone it from machineC.</p>
<p>The issue is that I am just be able to get the master branch or only the local branches I have on machineB, not all the branches present on machineA.</p>
<p>Is there any command to fetch locally everything or to transform the repo into a .git one?</p>
<p>Cheers</p>
","0","18160701","",""
"55144477","1277934","2019-03-13 14:36:58","2","953","<git><gitlab><git-fetch><git-ls-remote>","Why doesn't git ls-remote list all the remote refs?","<p>I have a remote repo (<code>origin</code>) whose <code>refs</code> directory contains, in addition to the usual <code>heads</code>, <code>tags</code>, and <code>remotes</code> subdirectories, also  <code>keep-around</code> and <code>merge-requests</code>.  These are special sets of refs that are managed by <a href=""https://about.gitlab.com/"" rel=""nofollow noreferrer"">Gitlab</a> for its internal housekeeping.</p>

<p>When I use <code>git ls-remote</code> to interrogate this repo, the command lists the <code>merge-requests</code> refs but not the <code>keep-around</code> requests:</p>

<pre><code>$ git ls-remote
5ef8f113ba35360de0dfc015601bb832bacb5505        HEAD
... lots of refs/heads/...
... lots of refs/merge-requests/...
... lots of refs/tags...
</code></pre>

<p>Similarly, I can fetch <code>merge-requests</code> refs, for example with</p>

<pre><code>$ git fetch origin refs/merge-requests/999/head
From git.company.com:Company/company
 * branch                    refs/merge-requests/999/head -&gt; FETCH_HEAD
</code></pre>

<p>but when I ask for a <code>keep-around</code> ref, the remote repo claims it doesn't exist, even though I know it does:</p>

<pre><code>$ git fetch origin  refs/keep-around/291ad6a6bebf067377700d430ac130d758ed52e9
fatal: couldn't find remote ref refs/keep-around/291ad6a6bebf067377700d430ac130d758ed52e9
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I don't see anything in the remote repo's <code>config</code> that seems to relate to this.  What's causing the different behavior?</p>

<hr>

<p>Addendum: Meredith Howard suggests that this may be a feature of Gitlab; there is a special Gitlab config that tells it specifically to hide the refs in <code>refs/keep-around</code>. See <a href=""https://gitlab.com/gitlab-org/gitlab-ce/issues/28685"" rel=""nofollow noreferrer"">this support request from someone with a similar question</a>.</p>

<hr>

<p>Addendum: It has been suggested that this is a duplicate of <a href=""https://stackoverflow.com/questions/14370157/git-fetch-a-specific-commit-by-hash"">Git fetch a specific commit by hash</a> .  I am not trying to fetch a specific commit by hash.  I want to know why the remote repo is omitting certain refs from its listing.</p>
","1","1277934","",""
"52870122","5353461","2018-10-18 08:39:32","1","135","<git><git-merge><git-pull><pull><git-fetch>","Why avoid `git pull` and what to do instead","<p>In <a href=""https://stackoverflow.com/questions/52538050/exit-status-is-0-but-autostash-requires-manual-merging#comment92077148_52540878"">this comment</a>, 
<a href=""https://stackoverflow.com/users/1256452/torek"">@torek</a> (reputation currently 172,509) said:</p>

<blockquote>
  <p>I actually recommend avoiding <code>git pull</code> entirely, for the same reason you recommend avoiding <code>--autostash</code></p>
</blockquote>

<p>The <a href=""https://stackoverflow.com/a/52540878/5353461"">reason given</a> for avoiding <code>git rebase --autostash</code> was:</p>

<blockquote>
  <p>It seems convenient when it works but is problematic when it doesn't</p>
</blockquote>

<p>In which ways can <code>git pull</code> be problematic when it doesn't work?</p>

<p><a href=""https://stackoverflow.com/a/52870006/5353461"">My robust automated solution to avoiding <code>git pull --autostash</code> is non-trivial</a>.</p>

<p>Is there a robust automated solution to avoiding <code>git pull</code>?</p>
","7","5353461","0","0"
"36874281","711287","2016-04-26 19:40:55","1","386","<git><git-fetch><git-reflog>","git fetching 'lost' commits","<p>Short version: Is it possible to use 'git fetch' to get commits from a remote repo that are not visible in the git log (part of/under the HEAD commit)</p>

<p>Longer version:
I have a repo (remote copy) that looks like this:</p>

<pre><code>A - B - C - D(HEAD)
         \
          \-E
</code></pre>

<p>The remote version got to this state by making commit E, resetting to commit C, then making commit D.</p>

<p>Locally, I have an old clone of that repo that looks like this:</p>

<pre><code>A - B - C(HEAD)
</code></pre>

<p>When I fetch from the remote repo, I only get commit D, but I would like to be able to reset --hard to commit E in my local repo.</p>
","1","711287","0","0"
"52980805","10323279","2018-10-25 03:13:20","0","2652","<gitlab><git-commit><git-push><git-pull><git-fetch>","can't push to gitlab, failed and rejected","<blockquote>
  <p>has been pulled, the result is still an error <code>! [rejected]  dev-&gt;dev(non-fast-forward)</code></p>
</blockquote>

<pre><code>D:\PPI_Roketin\Project\astrowatch (dev)
λ git add resources/views/reals/_form.blade.php

D:\PPI_Roketin\Project\astrowatch (dev)
λ git commit -m ""resources/views/reals/_form.blade.php""
[dev db5ac99] resources/views/reals/_form.blade.php
1 file changed, 2 insertions(+), 2 deletions(-)

D:\PPI_Roketin\Project\astrowatch (dev)
λ git push origin dev
To gitlab.com:roketin-stellar/astrowatch.git
! [rejected]        dev -&gt; dev (non-fast-forward)
error: failed to push some refs to 'git@gitlab.com:roketin- stellar/astrowatch.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<blockquote>
  <p>error like this, why?</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/xW3bV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xW3bV.png"" alt=""enter image description here""></a></p>

<blockquote>
  <p>have done git checkout, and repeated the command, it's still an error like above</p>
</blockquote>
","1","10323279","",""
"53057000","10450762","2018-10-30 03:33:12","1","920","<git><git-clone><git-fetch>","How to change git checkout to original","<p>I cloned a software with git clone.</p>

<pre><code>git clone https://github.com/BinPro/CONCOCT.git
</code></pre>

<p>And then</p>

<pre><code>cd CONCOCT
git fetch
git checkout SpeedUp_Mp
</code></pre>

<p>Then I got this message.</p>

<pre><code>Branch 'SpeedUp_Mp' set up to track remote branch 'SpeedUp_Mp' from 'origin'.
Switched to a new branch 'SpeedUp_Mp
</code></pre>

<p>Then I put</p>

<pre><code>sudo python ./setup.py install
</code></pre>

<p>Now I want to make it into 'origin' as before.
So I put</p>

<pre><code>git fetch
git checkout origin
</code></pre>

<p>Then I get an error message</p>

<pre><code>error: Your local changes to the following files would be overwritten by checkout:
concoct/cluster.py
Please commit your changes or stash them before you switch branches.
Aborting
</code></pre>

<p>What can I do? How do I commit changes?</p>
","0","10450762","",""
"69953877","14591686","2021-11-13 11:39:20","0","26","<git><branch><branching-and-merging><git-fetch>","Problem with running `git merge` on my new branch","<p>I have my work only on my master branch locally and remotely also I have an upstream from where I fetch updates and merge/push them to my master branch, the question is how should I properly execute git commands in order to:</p>
<ol>
<li>create new branch &quot;working&quot;</li>
<li>Set remotes in that branch as remote master(same as now) and remote upstream</li>
<li>Fetch on that branch updates from upstream</li>
<li>And push them to my remote git repository but not on master but on my new branch -&gt; I want to create branch also on my github.</li>
</ol>
<p>I tried</p>
<pre><code>
-&gt; git branch working
-&gt; git checkout working (that's first step I hope)
</code></pre>
<p>I added remotes, so when I do -&gt; git remote -v
I can see also my origin remote and my upstream remote</p>
<p>And now...</p>
<p>When I do</p>
<pre><code>-&gt;git fetch upstream
-&gt;git merge -m &quot;Merge upstream&quot;
</code></pre>
<p>This is what I normally did when I wanted to update my repository
I get <strong>fatal: No remote for the current branch.</strong><br />
What Is the problem and how should I fix this ?</p>
","0","14591686","",""
"37145151","340512","2016-05-10 17:25:22","327","153646","<git><git-remote><git-fetch><git-gc>","How to handle git gc fatal: bad object refs/remotes/origin/HEAD error?","<p>I randomly hit this today while trying to run Git <em>garbage collect</em>:</p>

<pre><code>$ git gc
fatal: bad object refs/remotes/origin/HEAD
error: failed to run repack
</code></pre>

<p>How do I deal with this?</p>
","0","340512","0","0"
"53196575","6492006","2018-11-07 19:36:20","1","922","<git><git-merge><git-fetch>","git - A git fetch / git merge merges without conflicts, but shows almost all files are modified and need to be committed","<p>I am very new to git and I have been seeing this every once in a while.</p>

<p>For example:</p>

<ol>
<li>I work on my branch <code>branch-A</code> for few days (branch is created from develop fresh copy)</li>
<li>I do <code>git add . / git commit -m ""blahblah""</code> to stage and commit my changes</li>
<li>Now I want to get latest changes from remote and merge it into my branch so I ensure I work on latest code</li>
<li><p>to do so, I do <code>git checkout develop</code> to switch to my local <code>develop</code> branch, git status shows I'm behind 37 commits</p>

<pre><code>myMBPro:MyProj$ git status
On branch develop
Your branch is behind 'origin/develop' by 37 commits, and can be fast-forwarded.
  (use ""git pull"" to update your local branch)

Changes not staged for commit:
  (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
</code></pre>

<p>and the list of deleted, untracked files follow</p></li>
<li><p><code>git fetch origin</code>, then <code>git merge origin/develop</code> while on <code>develop</code> branch shows:</p></li>
</ol>

<p><code>
    myMBPro:MyProj user$ git fetch origin
    myMBPro:MyProj user$ git merge origin/develop
    Updating 799c6d7a..510c77ab
    Fast-forward
     .../Implementations/MyRenderer.cs      |  39 ++--
     ... etc
</code></p>

<ol start=""6"">
<li>I would typically now switch to my branch <code>branch-A</code> and do <code>git merge develop</code> to merge develop to <code>branch-A</code> but I typically do first <code>git status</code> to check all is OK.  So, I stay on <code>develop</code> branch and do <code>git status</code></li>
<li>The problem is that I see <code>git status</code> reporting probably every single file in my project as changed (some as untracked, some as staged and some as ready to be committed).  </li>
</ol>

<p>```</p>

<pre><code>myMBPro:MyProj user$ git status
On branch develop
Your branch is up to date with 'origin/develop'.

Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)
</code></pre>

<p>, and the list of files ready to commit, files not staged, and files that are untracked follows after this.</p>

<p>So, I end up with lots of files that I haven't even touched, nor modified, nor added now showing as being somehow modified by me.  As a result, I am hesitant to merge them in my <code>branch-A</code>.</p>

<p>Any idea why is this happening?  Is it even normal (but to me it does not sound normal that files I have not changed appear as they are changed by me and now I need to start tracking them, stage and commit them.</p>

<p>I am on MacBookPro, using git from terminal and also using SourceTree</p>
","7","6492006","",""
"53196687","6492006","2018-11-07 19:44:23","0","2754","<git><git-merge><git-fetch>","git - How to revert git fetch / git merge","<p>As very new with git, I need help to probably very basic issue I am having.</p>

<p>I did following</p>

<ol>
<li>I am on develop branch and I did <code>git fetch origin</code> and <code>git merge origin/develop</code></li>
<li>The merge was successful</li>
</ol>

<p>But for whatever reason, I decide I did not want to do <code>git fetch/merge</code> I did above, so I would like to remove it and go to where I was before I did step 1 above.</p>

<p>How do I do that?</p>
","2","6492006","",""
"53246722","3437012","2018-11-11 07:33:56","2","88","<git><git-remote><git-fetch>","What's the difference between `git fetch origin` and `git fetch git://127.0.0.1/`","<p>I am experimenting with git and have created a repository in <code>~/A</code> containing only a master branch.</p>

<p>I have then cloned this repository into <code>~/B</code> (by starting a <code>git daemon</code> in <code>~/A</code> and running <code>git clone git://127.0.0.1/</code>).</p>

<p>I then created a new <code>test</code> branch in <code>~/A</code> and tried to get that branch in <code>~/B</code>. However, <code>git fetch git://127.0.0.1/</code> only showed</p>

<pre><code>From git://127.0.0.1
 * branch            HEAD       -&gt; FETCH_HEAD
</code></pre>

<p>To get the new branch I ended up doing <code>git fetch</code>, which as far as I understand is equivalent to <code>git fetch origin</code>. In any case, both of these give me</p>

<pre><code>From git://127.0.0.1
 * [new branch]      test       -&gt; origin/test
</code></pre>

<p>after which I can start working on the <code>test</code> branch in <code>~/B</code> by doing <code>git checkout test</code>. </p>

<p><strong>How is it possible that <code>git fetch git://127.0.0.1/</code> and <code>git fetch origin</code> have different results, when <code>git remote -v</code> shows</strong></p>

<pre><code>origin  git://127.0.0.1/ (fetch)
origin  git://127.0.0.1/ (push)
</code></pre>

<p>The daemon shows the same request for all commands, namely </p>

<pre><code>[20291] Extended attribute ""host"": 127.0.0.1
[20291] Request upload-pack for '/'
</code></pre>
","3","3437012","",""
"38259839","6563738","2016-07-08 05:59:40","0","85","<git><merge><fetch><git-merge><git-fetch>","What's difference netween git fetch B + git merge B VS git merge origin/B","<p>What's the difference between git fetch B + merge B and merge origin/B? </p>

<pre><code>$ git fetch origin develop
From [...]
 * branch            develop    -&gt; FETCH_HEAD
$ git merge develop
Already up-to-date.
$ git merge origin/develop
error: Your local changes to the following files would be overwritten by merge
...
</code></pre>

<p>In the above sequence I expect the merges to output same, but results are different. I expected the ""fetch"" command to retrieve the remote branch locally for it to be available for the local merge operations. After fetch is done I expected the merge from local branch to be the equal operation to the merge from the origin. Am I wrong with this expectation?</p>
","0","6563738","",""
"56464499","5175709","2019-06-05 16:25:01","1","1371","<git><git-checkout><git-fetch>","How does git checkout work after git fetch","<p>I just did </p>

<pre><code>git fetch origin &lt;remoteBranch&gt;
</code></pre>

<p>And after that I just did </p>

<pre><code>git checkout &lt;remoteBranch&gt;
</code></pre>

<p>That created a local branch with the name of <code>&lt;remoteBranch&gt;</code>. </p>

<p>How does that just work? Normally when I want to create a local branch I have to do </p>

<pre><code>git checkout -b
</code></pre>
","0","5175709","",""
"67416083","14001350","2021-05-06 10:13:50","0","318","<git><github><git-fetch>","Github: Remote does not appear to be a git repository","<p>I'm having some trouble with Github throwing the error: fatal: 'remote' does not appear to be a git repository.</p>
<p>I did the cloning, which was successful.</p>
<pre><code>git clone https://github.com/StephenW789/CIS-41B-Final-Project-Public

cd CIS-41B-Final-Project-Public

git remote -v # Prints out the correct origin as expected
</code></pre>
<p>I then did this, which ended up having the error message</p>
<pre><code>git fetch remote main
fatal: 'remote' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>
<p>I tried the following, but the issue still persists.</p>
<pre><code>git remote remove origin
git remote add https://github.com/StephenW789/CIS-41B-Final-Project-Public
git fetch remote main
</code></pre>
<p>Thank you.</p>
","1","14001350","",""
"67630383","15475004","2021-05-21 03:16:17","8","8924","<git><git-fetch><git-gc>","Git gc and git prune warnings when git fetch origin is run","<p>Working with remote repository at some moment I started recieving this when I run <code>git fetch origin</code></p>
<blockquote>
<p>Auto packing the repository in background for optimum performance.</p>
</blockquote>
<blockquote>
<p>See &quot;git help gc&quot; for manual housekeeping.</p>
</blockquote>
<blockquote>
<p>warning: The last gc run reported the following. Please correct the root cause
and remove .git/gc.log.</p>
</blockquote>
<blockquote>
<p>Automatic cleanup will not be performed until the file is removed.</p>
</blockquote>
<blockquote>
<p>warning: There are too many unreachable loose objects; run 'git prune' to remove them.</p>
</blockquote>
<p>This happens all the time. I found somewhere that <code>git gc</code> should help but it works only once (or seems to work) - after this and following <code>git fetch origin</code> I get</p>
<blockquote>
<p>Auto packing the repository in background for optimum performance.
See &quot;git help gc&quot; for manual housekeeping.</p>
</blockquote>
<p>Later the situation repeats. I also tried to remove .git/gc.log - it doesn't help.</p>
<p>My git skills are really limited. Why do I get this warnings and how to fix the issue for long?</p>
","2","15475004","0","0"
"32021161","1236694","2015-08-15 03:15:22","0","998","<redirect><host><libgit2><libgit2sharp><git-fetch>","libgit2sharp exception ""cross host redirect not allowed""","<pre><code>Windows 7 
ASP.NET MVC 4 
LibGit2Sharp 0.21.0.176 
Visual Studio Premium 2012 Version 11.0.61030.00 Update 4 
Microsoft .NET Framework Version 4.5.50709
</code></pre>

<p>I have various unit/integration tests that call the following code : </p>

<pre><code>var remote = Repository.Network.Remote.Add(""origin"",""https://www.github.com/{org}/{repo}.git"");
Repository.Network.Fetch(remote, ...)
</code></pre>

<p>In every case an exception is thrown : </p>

<blockquote>
  <p>LibGit2SharpException ""cross host redirect not allowed""</p>
</blockquote>

<p>Additionally, debug step-through this code the same exception is thrown.</p>

<p>From Windows <code>cmd.exe</code> I can run these commands without issue : </p>

<pre><code>git clone https://www.github.com/{org}/{repo}.git
cd repo
git fetch
</code></pre>

<p>The GitHub repo has never been renamed.</p>

<p>One unlikely explanation would be something ( such as spyware/malware ) is redirecting all http requests to an intermediary site. However, I've run full scans and found nothing.</p>

<p>I can run the above tests/code on other dev/test/build workstations without this result.</p>
","3","1236694","",""
"67826983","14158686","2021-06-03 18:33:17","3","3193","<git><github><git-fetch>","How to preview changes before git pull","<p>I want to check the changes that will done to the files after I run git pull. I know we use <code>git fetch</code> to retrieve new objects from remote repository without changing local repository.
But how can I view these changes in editor ?</p>
","2","14158686","",""
"15032159","1361615","2013-02-22 19:51:41","14","47604","<git><git-fetch>","git fetch, FETCH_HEAD and origin/master","<p>I'm very new to git and I'm having trouble with a simple <code>fetch</code> operation.</p>

<p>I'm trying to fetch a coworker's progress from his repository. At first I did <code>git fetch HEAD</code> which prompted git to download about 350MB of data so I was sure it had done something.  However, <code>origin/master</code> ended up still pointing to the same old commit (actually it's under the name <code>dev</code> but I'll call it <code>master</code> - he doesn't have a <code>master</code>).</p>

<p>After that I tried <code>git fetch origin master</code> but it didn't seem to do anything, it only updated <code>FETCH_HEAD</code>. I tagged the <code>FETCH_HEAD</code> commit so I wouldn't lose it, but I'd still like to have an updated remote branch.</p>

<p>What was it that went wrong? I do not have access to the remote repository. Can I still fix it at home?</p>
","3","1361615","0","0"
"15199996","486057","2013-03-04 11:01:07","12","2032","<git><git-fetch>","What would be the opposite of ""git fetch""?","<p>If I do git fetch from repo <code>A</code> to <code>B</code>, the master branch in <code>B</code> doesn't change - changes only <code>remotes/origin/master</code>, and <code>git status</code> reminds me of it.</p>

<p>But now I want to do the opposite - update <code>B</code> from <code>A</code>, something like pushing from <code>A:master</code> to <code>B:remotes/origin/master</code>. The reason for this is that this update happens over ssh, and <code>A</code> machine has public-key auth to <code>B</code> machine - but not vice versa.</p>

<p>How can I do this?</p>
","1","486057","0","0"
"15254480","2141094","2013-03-06 17:52:38","24","13815","<git><git-fetch>","Reverse a git fetch","<p>I have a thorough understanding of git, and the difference between pull, fetch, and merge.  I have a remote that I track, fetch, and merge with occasionally, let say it's origin/master.  What I'm looking to do is reverse the behavior of a 'git fetch'.  It sounds goofy, but I want to un-update where my remote tracking branch points, to an older state, the state right before the last fetch.  Is this possible?</p>

<p>For example, lets say this is my workflow...</p>

<pre><code>git show origin/master # shows commit abc123

git fetch              # yay i got something!

git show origin/master # shows commit def456
</code></pre>

<p><strong>mystery command goes here so that...</strong></p>

<pre><code>git show origin/master # shows commit abc123
</code></pre>

<p>It's kind of a weird thing to want, but I have a crontab that watches a git repo to detect when there's something to fetch, and I'm having issues debugging the script that performs some actions based on this behavior.  Instead of waiting for origin/master to change, I'd like to change it myself so I can debug my script!</p>
","1","2141094","0","0"
"16838158","46194","2013-05-30 13:55:39","24","12540","<git><git-fetch>","Default remote for git fetch","<p>If I am on a local branch that is <em>not</em> tracking any remote branch and I give the command</p>

<pre><code>git fetch
</code></pre>

<p>Given I have several remotes defined in <code>$GIT_DIR/config</code>, from which remote is the fetch done?</p>

<p>I tried to find out from the <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-fetch.html"" rel=""noreferrer"">man page</a>, but this point is unclear to me.</p>

<p>Additionally: How can I change this default remote without making the local branch tracking?</p>
","0","46194","0","0"
"33512199","5457974","2015-11-04 01:29:10","1","590","<git><git-pull><git-fetch>","What is a very descriptive and easy to understand description between git fetch and git pull? When is it better to git fetch vs git pull?","<p>I am somewhat new to git any advice would be appreciated. Even a link to learn a more in depth free video/course practice could be useful to me here. </p>
","1","5457974","",""
"18029722","586086","2013-08-03 05:42:02","1","247","<git><branch><fetch><git-merge><git-fetch>","Specifying branch arguments to git fetch, merge, and push","<p>If I am working on a branch of a repo, say <code>devel</code>, what is the difference between the following commands? In this case, I have already added an <code>upstream</code> remote:</p>

<pre><code>$ git fetch upstream devel
From github.com:meteor/meteor
 * branch            devel      -&gt; FETCH_HEAD
</code></pre>

<p>and</p>

<pre><code>$ git fetch upstream 
remote: Counting objects: 500, done.
remote: Compressing objects: 100% (230/230), done.
remote: Total 326 (delta 227), reused 187 (delta 90)
Receiving objects: 100% (326/326), 46.61 KiB, done.
Resolving deltas: 100% (227/227), completed with 87 local objects.
From github.com:meteor/meteor
 * [new branch]      appconfig  -&gt; upstream/appconfig
 * [new branch]      check-path -&gt; upstream/check-path
   248ff08..4d44a4d  ctl-migrate -&gt; upstream/ctl-migrate
   2c356d2..bfb8fd3  devel      -&gt; upstream/devel
 * [new branch]      release-0.6.5 -&gt; upstream/release-0.6.5
   64b95a4..c0014df  shark      -&gt; upstream/shark
From github.com:meteor/meteor
 * [new tag]         release/0.6.5-rc11 -&gt; release/0.6.5-rc11
 * [new tag]         release/0.6.5-rc12 -&gt; release/0.6.5-rc12
</code></pre>

<p>How does fetch know what to get if no branch is specified? </p>

<p>Moreover, why is it that the merge command is </p>

<pre><code>$ git merge upstream/devel
</code></pre>

<p>but if I want to push the changes to my fork, I need to say </p>

<pre><code>$ git push origin devel 
</code></pre>

<p>why is there a slash in one case but not the other?</p>
","0","586086","0","0"
"71146723","9413055","2022-02-16 17:41:22","0","165","<bash><git><git-fetch>","How to write bash script to loop through a git fetch command","<p>I've been trying to fetch all branches of a git repository</p>
<p>using &quot;git fetch&quot;</p>
<p>but due to network issue it's failing</p>
<p>Then after searching for a while I tried</p>
<p>&quot;git fetch --depth=n&quot; , n = 1, 10, 20, .....</p>
<p>but this failed too even with value 1.
next attempt was</p>
<p>&quot;git fetch origin 'branchname' --depth=n&quot;</p>
<p>but I don't want to manually put this command every time.Would be a lot easier if I could find a bash-script to increase n by 100 and run this command in a loop.
Any help would be much appreciated. Thanks in advance</p>
","2","9413055","",""
"71240005","46194","2022-02-23 15:43:52","1","262","<git><monorepo><git-fetch><git-refspec>","Configure git to always fetch only current branch and master","<p>Is it possible to configure git to, <em>by default</em>, when using <code>git fetch</code>, fetch <em>only</em> the current branch and master from the remote, without explicitly mentioning the current branch name?</p>
<p>I know that I can achieve this exact fetch with this command:</p>
<pre><code>git fetch origin $(git rev-parse --abbrev-ref HEAD) master:master
</code></pre>
<p>But I would like to have the same behavior when I run only</p>
<pre><code>git fetch
</code></pre>
<p>Is that possible to configure? For instance, by some magic refspec in the <code>.git/config</code> file.</p>
<p>Note that, in the configuration, I don't want to hard code the name of the current branch, and I don't want to use aliases.</p>
","9","46194","",""
"71935720","","2022-04-20 07:27:48","0","480","<git><bitbucket><git-branch><git-fetch>","Unable to find remote git branch in remote -- BitBucket","<p>Switched to a new machine. I need to pull the working branches which was pushed from my old machine to remote. But I am unable to find the remote branches via git command. I could see the branch in BitBucket UI.</p>
<p>This search all is not showing the branches</p>
<pre><code>git branch -all
</code></pre>
<p>However I could see my branch in grep search</p>
<pre><code>git ls-remote | grep &quot;my_branch_name&quot;

From ssh://git@my_org.com:xxxx/xxxx/xxx.git
ed18a***************************113aa4ac        HEAD
5b9a1***************************f4aa4f3a        refs/heads/feature/mybranch-10XX
704e2***************************2a4586d5        refs/heads/feature/mybranch-5XX
</code></pre>
<p>Is there anyway to fetch these to my new local ?</p>
","3","","",""
"54196800","5070050","2019-01-15 10:15:53","0","80","<git><authentication><git-remote><git-fetch>","fatal: Authentication failed for repo_b while doing a git fetch repo_b master (currently on repo_a 's master which is forked from repo_b)","<p>I'm currently on <code>repo_a</code> 's <code>master</code> , <code>repo_a</code> is forked from <code>repo_b</code>.</p>

<p>While trying to resolve conflicts, I am doing a <code>git fetch repo_b master</code> </p>

<p>I'm getting a following error:</p>

<pre><code>fatal: Authentication failed for 'repo_b's url'
</code></pre>

<p>I tried unsetting my <code>user.name</code> and <code>user.password</code> in <code>git config --global</code> , even after that I am getting the same error. </p>

<p>Could anyone please let me know where I am wrong ?</p>
","7","5070050","",""
"54247086","424957","2019-01-18 02:44:00","0","95","<git><git-remote><git-fetch>","How to update username and password on git remote?","<p>Though I can git fetch/pull/push on eclipse, but when I git fetch on GitBash, I got error as below, how can I set id/pw on remote?</p>

<pre><code>remote: Invalid username or password.
fatal: Authentication failed for 'https://abc.xyz.co.jp/projects/project.git/'
</code></pre>
","1","424957","",""
"54432506","1964090","2019-01-30 02:21:45","2","29","<git><gitpython><git-fetch>","'fast-forward' vs 'forced-update' for 'git fetch' command","<p>I have a python application which maintains a mirror of a git repo by periodically (every 10 seconds) doing <code>git fetch -v</code> followed by <code>git reset --hard</code> (using <code>GitPython</code> library) on that repo. More specifically it uses the following python code to do this</p>

<pre><code>Popen(['git', 'fetch', '-v', 'origin'], cwd=absolute_path_to_repo, universal_newlines=True, shell=None)
Popen(['git', 'reset', '--hard', 'origin/branch'], cwd=absolute_path_to_repo, universal_newlines=False, shell=None)
</code></pre>

<p>I was just exploring git logs (inside <code>.git/logs/refs/remotes/origin/&lt;branch_name&gt;</code> of that repo), and saw 2 different kind of log lines.</p>

<pre><code>remotes/origin/{branch-name}:a6aac37 ca8ab94 Application Server Pseudo-User &lt;app@{hostname}&gt; 1547575486 +0000   fetch -v origin: fast-forward
remotes/origin/{branch-name}:6b92d4f a6aac37 Application Server Pseudo-User &lt;app@{hostname}&gt; 1548703807 +0000   fetch -v origin: forced-update
</code></pre>

<p>The first log line says <code>fetch -v origin: fast-forward</code> and the second log line says  <code>fetch -v origin: forced-update</code>. I am trying to understand why does git log them differently when they are output of the same command - specially given the fact that the python application is not making any changes in the git repo (its read-only).</p>

<p>The reason why I trying to answer this question is because in <code>forced-update</code> case I see that the <code>HEAD</code> of my repo moves to an older commit (<code>a6aac37</code> corresponds to a month old commit). In all other cases the <code>HEAD</code> points to the latest commit.</p>

<p>Another observation was that although <code>forced-update</code> rarely happens but happens only at the time there was a push made to the remote. I have verified that those commits were pretty normal (like any other commits).  </p>
","3","1964090","",""
"54558715","1818935","2019-02-06 16:52:35","1","211","<git><git-push><git-fetch>","Which items from the local .git directory get copied to/from the remote upon pushing/fetching?","<ol>
<li><p>When you <code>push</code> to a remote repository, which items from the local <code>.git</code> directory get copied to the remote <code>.git</code> directory?</p></li>
<li><p>The same question in the opposite direction, when you perform <code>fetch</code>.</p></li>
</ol>
","0","1818935","",""
"56616024","3675724","2019-06-16 04:14:19","4","1597","<git><version-control><git-fetch>","Why does git fetch origin master:master fast forward the local branch?","<p>I have been playing around with git and stuck with concepts of git fetch.</p>

<p>I have tried and observed following scenarios:</p>

<p>1)
<code>$ git fetch</code></p>

<p>All the remote branches are fetched and all the corresponding remote-tracking branches are updated. I understand that it looks at .git/config file and uses default remote repository location and default fetch refspec which is generally ""refs/heads/<em>:refs/remotes/origin/</em>"". It does not fast forward any local branches.</p>

<p>2)
<code>$ git fetch origin</code></p>

<p>Observed same as 1)</p>

<p>3)
<code>$ git fetch origin master</code></p>

<p>Only master branch is fetched and remote-tracking branch origin/master is updated. Does not fast forward the local 'master' branch.</p>

<p>4)
<code>$ git fetch origin master:master</code></p>

<p>Only master branch is fetched and remote-tracking branch origin/master is updated. Fast forwards the local 'master' branch.</p>

<p>Understanding 1) and 2) was straightforward. However 3) and 4) confuses me. </p>

<p>What does a fetch command had to do anything with local branches? Why does it fast forward the local branch? (Proof that it affects the local branch is when I try <code>git fetch origin master:master</code>, while the master branch is checked out, it throws the following error: <code>fatal: Refusing to fetch into current branch refs/heads/master of non-bare repository</code>)</p>

<p>According to my intuition, on any type of fetch command, updating the remote-tracking branches is default behavior. However when <code>git fetch origin master</code> is executed, it has an additional behavior of updating FETCH_HEAD. When <code>git fetch origin master:master</code> is executed, it has an additional behavior of updating local branch 'master'. Is my intuition right?</p>

<p>Does it interpret <code>git fetch origin master:master</code> as <code>git fetch origin refs/heads/master:refs/heads/master</code>? (Maybe redundant to my previous question)</p>

<p>Does it interpret <code>git fetch origin master</code> as <code>git fetch origin refs/heads/master:</code>?</p>
","0","3675724","0","0"
"56635648","979325","2019-06-17 16:47:52","0","71","<git><git-pull><git-tag><git-fetch>","git does't retrieve remote tags with pull but it does with fetch","<p>I'm using a git repository with many remote tags.</p>

<p>In another PC, if I use this command:</p>

<pre><code>git pull origin develop
</code></pre>

<p>I don't have new remote tags created by another station, but if I use following command:</p>

<pre><code>git fetch origin
</code></pre>

<p>I download also tags. Tags are created in <code>develop</code> branch, and, as far as I know, <code>git pull</code> is a shortcut for <code>git fetch</code> and <code>git merge</code>.</p>

<p>If I clone the repository in a new folder I can retrieve all tags instead.</p>

<p>So why I can't download new tags from remote repository and how can I fix it?</p>

<p>I'm using git 2.21 on windows 10 64 bit, with git bash.</p>
","3","979325","",""
"73400574","19792108","2022-08-18 09:28:07","0","12","<git><github><repository><repo><git-fetch>","Is there a way to fetch individual subdirectories instead of entire git repo?","<p>I'm working on a project where I would like to work on separate subdirectory without fetching the entire repo.</p>
<p>As an example, <code>project_repo</code> has the structure:</p>
<pre><code>project_repo/
  mainProgram/
  pluginA/
  pluginB/
</code></pre>
<p>I will work on <code>pluginA</code> on my local machine while someone else is working on <code>pluginB</code>.</p>
<p>To do so I could just clone the entire repo into the <strong>.../plugins/</strong> folder on my pc, but that will lead to errors with the program because I'm trying to run <code>pluginB</code> which <strong>isn't ready yet</strong> and also <code>mainProgram</code> which <strong>is not a plugin</strong>.</p>
<p><strong>Is it possible to bring a single subdirectory to my local machine?</strong> My last resource would be to work on separate repos for each plugin, but I'm working with +180 plugins and would be exponentially harder to track, coordinate and add to the original project repo (which don't know if it's possible).</p>
","3","19792108","",""
"56679888","5374999","2019-06-20 06:04:25","1","158","<git><git-branch><git-fetch>","Can not fetch all git branches","<p>I've recently installed git on my MacBook for the first time. I generate my ssh key and added it to my git account. I cloned with ssh remote and after cloning I tried to fetch all branches with <code>git fetch --all</code> but after running this command nothing happens and I still have just the master branch. Do you think my installation has some problem (my git configuration ) or it is some thing else ?</p>
","2","5374999","",""
"72641951","18791843","2022-06-16 07:23:12","0","125","<git><jenkins><git-config><git-fetch><git-worktree>","Running <git worktree add> checks out older commit hash","<p>Im running a jenkins pipeline, where:</p>
<pre><code>[Pipeline] { (Prepare)
[Pipeline] sh
+ git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'

[Pipeline] sh
+ git fetch origin master
From https://github.com/&lt;company&gt;/ltlwrk-python
 * branch            master     -&gt; FETCH_HEAD
   94b92f5..22c1a07  master     -&gt; origin/master

[Pipeline] sh
+ git fetch origin test
From https://github.com/&lt;company&gt;/ltlwrk-python
 * branch            test       -&gt; FETCH_HEAD
   223cb5f..7b13d20  test       -&gt; origin/test

[Pipeline] sh
+ git fetch origin production
From https://github.com/&lt;company&gt;/ltlwrk-python
 * branch            production -&gt; FETCH_HEAD
   54aad77..2e8a174  production -&gt; origin/production
</code></pre>
<p>I run a config remote and fetch 3 branches, as seen.
After I call on git worktree, because I want to build a single container of the 3 env., <strong>the problem is, it doesnt checks out the latest commit</strong> and when the image is build it has the old code in it:(master: 94b92f5 - old hash. 22c1a07 - new commit hash which I want to build upon)</p>
<pre><code>git worktree add ./all/src_master master
git worktree add ./all/src_test test
git worktree add ./all/src_production production
</code></pre>
<p>I'm might be using the wrong git config, fetch, worktree command, i cant figure out which one, anyone knows what am I missing?</p>
","0","18791843","",""
"55777424","1147600","2019-04-20 20:21:49","0","242","<git><github><git-merge><git-pull><git-fetch>","Why does git not fetch the pull request I merged in GitHub?","<p>I'm having some git trouble. My setup is as follows:</p>

<p>[workstation repo] -origin-> [network drive bare repo] -origin-> [GitHub]</p>

<p>I just accepted my first pull request on GitHub (<a href=""https://github.com/Captain-Chaos/WorldPainter/pull/100"" rel=""nofollow noreferrer"">this one</a>) and merged it to master. Now I want to pull it to my workstation. So I do <code>git fetch</code> on the network drive, and then <code>git pull</code> on my workstation, but on my workstation git says 'Already up-to-date' and refuses to merge the change (I checked, it's not in my workspace).</p>

<p>The output of <code>git branch -vv</code> on the network drive includes the line:</p>

<pre><code>* master                    0fe40e2 [origin/master: behind 2] Some small code improvements
</code></pre>

<p>The output of <code>git branch -vv</code> on the workstation repo includes the line:</p>

<pre><code>* master         0fe40e2 [origin/master] Some small code improvements
</code></pre>

<p>The actual commit they should be pointing to is <a href=""https://github.com/Captain-Chaos/WorldPainter/commit/338864196d59b86d3b42c4fffc88f56aecb75433"" rel=""nofollow noreferrer"">3388641</a>. It looks like in the bare repo on the network drive the master branch is somehow behind origin/master. I have no idea how this situation arose, or how to fix it. I can't use <code>git pull</code> or <code>git reset</code> since it is a bare repo.</p>

<p>Does anyone know how I can determine what the problem is and how to fix it?</p>
","0","1147600","",""
"55909951","3464933","2019-04-29 19:52:56","4","1712","<git><git-branch><git-fetch>","Why git fetch does not create local branches?","<p>From what I understand, whenever you run <code>git fetch</code> remote objects are downloaded locally and a lightweight pointer  named <code>FETCH_HEAD</code> to the <code>HEAD</code> commit of the remote branch is created. </p>

<p>Since a branch is simply a pointer, how is this different from creating a local branch? What design considerations support the case for not creating a local branch whenever using <code>git fetch</code>? </p>
","3","3464933","0","0"
"55966634","8311953","2019-05-03 09:09:11","1","1795","<git><ubuntu><github><cron><git-fetch>","Unable to run git commands with crontab","<p>I am setting up a server, and I want the git repository in my server to be up to date with the origin server(Github). I tried to run a cron job which updates the repository in the server every minute. This was successful in my mac pc.</p>

<p>crontab:</p>

<pre><code>* * * * * bash /home/ubuntu/venv/App/deployer.bash &gt;&gt; /home/ubuntu/venv/App/Logs/deployer.txt 2&gt;&amp;1
</code></pre>

<p>Here is the part that fails in the server:</p>

<pre><code>git fetch --all 
git reset --hard origin/master
</code></pre>

<p>Error :</p>

<pre><code>Fetching origin
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.
error: Could not fetch origin
</code></pre>

<p>Everything works fine outside the crontab.
 For example :
I Can do all git commands within the git repo without sudo.
Using sudo I get the same error as in cronjob.</p>

<p>Update :</p>

<p>Figured out what caused the problem: </p>

<p>2>&amp;1 in the crontab expression was writing the standard error and it was very correct. 
When I ran the commands outside of crontab it never requested for authentication. But on crontab on every execution, the commands are requesting for an authentication</p>

<p>Now can anyone explain why this would cause an error like that?</p>
","2","8311953","",""
"56084943","","2019-05-10 21:16:33","1","55","<git><git-checkout><git-fetch>","List all branches with `git branch -a` does not show recently fetched branch?","<p>I have this history in the console:</p>

<pre><code>Resolving deltas: 100% (58156/58156), completed with 1585 local objects.
From bitbucket.org:interos/datavana
 * branch                datavana.dev.py.3.7.3 -&gt; FETCH_HEAD

$ git checkout datavana.dev.py.3.7.3
error: pathspec 'datavana.dev.py.3.7.3' did not match any file(s) known to git

$ git branch
* alex/dockerize
  master

$ git branch -a
* alex/dockerize
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>I noticed a problem when I tried running:</p>

<pre><code>git checkout datavana.dev.py.3.7.3
</code></pre>

<p>because as you can see that didn't work, and this branch is also not listed using <code>git branch -a</code>, anybody know why I can't checkout this branch?</p>
","0","","",""
"56383474","5175709","2019-05-30 18:08:35","0","672","<git><git-fetch>","How should I read the message a git fetch returns?","<p>I just did </p>

<pre><code>get fetch origin feature/8067
</code></pre>

<p>and below it I got 3 columns: </p>

<pre><code> * branch                feature/8067 -&gt; FETCH_HEAD
 * [new branch]          feature/8067 -&gt; origin/feature/8067
</code></pre>

<p>Trying to process this...reading from <a href=""https://stackoverflow.com/questions/9237348/what-does-fetch-head-in-git-mean"">here</a> I just learned that <code>FETCH_HEAD</code> basically means the tip of where I last did a <code>fetch</code>. The file will contain a commit. </p>

<p>Does that <code>[new branch]</code> refer to the <strong>new</strong> branch created under my <code>refs/remote</code>? </p>

<p>I'm not sure if my reading of the following is correct: <code>feature/8067 -&gt; origin/feature/8067</code> </p>

<p>Is the 2nd column the <code>&lt;nameOfBranchOnRemoteRepo&gt;</code> while the 3rd column is <code>&lt;repoName/nameOfBranchOnRemoteRepo&gt;</code> and it says my fetched remote branch in the refs is pointing to that in the remote? </p>
","0","5175709","",""